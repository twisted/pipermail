From matt at pollenation.net  Fri Jul  1 05:56:08 2005
From: matt at pollenation.net (Matt Goodall)
Date: Fri, 01 Jul 2005 10:56:08 +0100
Subject: [Twisted-Python] Event queue in the Python std lib
Message-ID: <42C51338.2040905@pollenation.net>

Hi,

I know some of you guys have already thinking about this but ...

A couple of weeks ago we had a bit of a chat (flame? ;-)) in #twisted 
about the idea of moving parts of Twisted, specifically the event loop, 
into the std lib. So, at Europython I had a quick chat with GvR about it 
too.

GvR would really, really like to get a simple, flexible event loop into 
the std lib and thinks that Twisted is likely the best starting point 
since Twisted probably integrates with more event driven toolkits than 
anything else.

Obviously, having the event loop part in the std lib has a number of 
benefits but it should also put pressure on all event driven toolkits to 
conform to the common API. Everything would then work together and the 
world would be a happier, shinier place ;-).

GvR suggested that someone should start a PEP to talk around, which 
seems like a sensible thing to do, although I don't know if anyone with 
enough knowledge of the reactor and working with other event loops has 
time right now.

Cheers, Matt

-- 
      __
     /  \__     Matt Goodall, Pollenation Internet Ltd
     \__/  \    w: http://www.pollenation.net
   __/  \__/    e: matt at pollenation.net
  /  \__/  \    t: +44 (0)113 2252500
  \__/  \__/
  /  \          Any views expressed are my own and do not necessarily
  \__/          reflect the views of my employer.



From itamar at itamarst.org  Fri Jul  1 10:53:21 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Jul 2005 10:53:21 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C51338.2040905@pollenation.net>
References: <42C51338.2040905@pollenation.net>
Message-ID: <1120229601.8891.30.camel@localhost.localdomain>

On Fri, 2005-07-01 at 10:56 +0100, Matt Goodall wrote:

> Obviously, having the event loop part in the std lib has a number of 
> benefits but it should also put pressure on all event driven toolkits to 
> conform to the common API. Everything would then work together and the 
> world would be a happier, shinier place ;-).

Which event driven toolkits are you talking about, besides Twisted?

> GvR suggested that someone should start a PEP to talk around, which 
> seems like a sensible thing to do, although I don't know if anyone with 
> enough knowledge of the reactor and working with other event loops has 
> time right now.

On the whole I don't think now, if ever, is the time to add Twisted or a
Twisted-based event loop to the Python standard library. There are a
number of issues:

1. Release cycles: Python releases on its own schedule, which may not
match up to the needs of bug fixes or feature additions to Twisted.

One solution is a separate Twisted package you can install, overriding
the stdlib's. Since Twisted, even split up, is quite large, this would
probably be necessary for most non-trivial functionality anyway, which
leads to:

2. Installing separate package issues. As PyXML has shown, having a
separate package which overrides or extends a built-in stdlib API works
terribly.  http://www.amk.ca/conceit/xmlplus.html covers some of the
issues, but there's also - 

3. Limited usefulness of minimal APIs: lets say we add Twisted to the
stdlib. Because it's large, we don't want to add *everything*. We can't
add SSL probably cause that depends on pyOpenSSL which is LGPLed,
probably don't want the pygtk reactor because that occasionally needs
updates for new pygtk releases, etc.. So Jane User decides to build a
network application, plays a bit with the TCP client code, and now says
"OK great, now to add a GUI and TLS support" - and suddenly she needs to
install the full Twisted framework to do that.


I would argue that Python needs less in the stdlib, not more; specific
external software packages will probably grow into de-facto standard
packages, but there's no reason for them to be in stdlib. PyXML is
usually installed separately because people need the extended features
the full package has, and the same would happen to Twisted. The only
real benefit to inclusion in the stdlib is ease of distribution, and a
better way to deal with that is to put more work into things like Eggs
(http://peak.telecommunity.com/DevCenter/PythonEggs).

-- 
Itamar Shtull-Trauring <itamar at itamarst.org>
http://itamarst.org




From itamar at itamarst.org  Fri Jul  1 11:02:28 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Jul 2005 11:02:28 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C51338.2040905@pollenation.net>
References: <42C51338.2040905@pollenation.net>
Message-ID: <1120230148.8891.37.camel@localhost.localdomain>

One more argument:

Inclusion in the stdlib requires more stringent backwards compatibility
in APIs. Now, on the whole this is a good thing, but it can have serious
long term consequences. Asyncore is the perfect example; Twisted's event
loop API started out being no better than asyncore's, whereas now it is
far superior (can work much better with stateful OS APIs like epoll(),
can support asynchronous rather than just non-blocking, supports
scheduling, much better TCP client support, etc..) 

The reason is years and years of working on improving it, whereas
asyncore was basically stuck where it was because it had to be backwards
compatible, and because adding major changes into the stdlib is harder.
So, for example, a number of people independently added scheduling to
the asyncore API, but it never made it into the stdlib. asyncore is now
almost identical to the way it was 5 years ago.




From natester at gmail.com  Fri Jul  1 11:37:46 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Fri, 1 Jul 2005 09:37:46 -0600
Subject: [Twisted-Python] jabber sasl and TLS
Message-ID: <4adac7a305070108376455c124@mail.gmail.com>

What is the status of the sasl TLS jabber authenticator?  There is
this code from about a month ago:
http://bfs.itlab.musc.edu/pubcvs/viewcvs.cgi/tofu/saslclient.py#rev1.6,
but it does not include TLS.

Nate



From Henning.Ramm at mediapro-gmbh.de  Fri Jul  1 12:54:46 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Fri, 1 Jul 2005 18:54:46 +0200
Subject: [Twisted-Python] Event queue in the Python std lib
Message-ID: <F92274058556DE42B94B148EEFB9183949E755@exchange-03.suedkurier.de>

>I would argue that Python needs less in the stdlib, not more; specific
>external software packages will probably grow into de-facto standard
>packages, but there's no reason for them to be in stdlib.

I agree, there are some rather, ehm, suboptimal modules in the stdlib
(e.g. ConfigParser, logging), and if one needs a good solution for
something, (s)he would always install some addition (or code it
her|himself). So perhaps a better way to handle "standard modules"
would be a standard package manager (like ActivePerl's ppm).

Otherwise it would be nice to declare Twisted "Python standard" this way.
(But perhaps it would frighten off Python newbies who are only looking
for a simple network library...)

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From glyph at divmod.com  Fri Jul  1 14:24:35 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 01 Jul 2005 14:24:35 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <1120229601.8891.30.camel@localhost.localdomain>
References: <42C51338.2040905@pollenation.net>
	<1120229601.8891.30.camel@localhost.localdomain>
Message-ID: <42C58A63.6020308@divmod.com>

Itamar Shtull-Trauring wrote:
> On Fri, 2005-07-01 at 10:56 +0100, Matt Goodall wrote:

>>GvR suggested that someone should start a PEP to talk around, which 
>>seems like a sensible thing to do, although I don't know if anyone with 
>>enough knowledge of the reactor and working with other event loops has 
>>time right now.

Well, it's a subject that comes up periodically, and I have some new 
thoughts, so let me play devil's advocate here:

> On the whole I don't think now, if ever, is the time to add Twisted or a
> Twisted-based event loop to the Python standard library. There are a
> number of issues:
> 
> 1. Release cycles: Python releases on its own schedule, which may not
> match up to the needs of bug fixes or feature additions to Twisted.

This will always be a concern, but Python manages to get releases out 
every so often, and the stdlib *does* change sometimes.  We've been 
pretty good about preserving compatibility for a release or two 
ourselves.  I think it is a reasonable concern but not a reason to stop 
this entirely.

> One solution is a separate Twisted package you can install, overriding
> the stdlib's. Since Twisted, even split up, is quite large, this would
> probably be necessary for most non-trivial functionality anyway, which
> leads to:

IMHO the point here is the trivial functionality.  As far as I can tell 
from the few examples of event-driven applications that I use which I 
didn't write :-), there is a progression that many event-driven Python 
programs go through these days:

	- Implement something with asyncore
	- realize asyncore's deficiencies, start enhancing it
	- discover Twisted, re-implement networking code (from scratch)

If the event loop in Python provided similar interfaces to the one in 
Twisted, the amount of work involved in stage 3 could be greatly reduced.

> 2. Installing separate package issues. As PyXML has shown, having a
> separate package which overrides or extends a built-in stdlib API works
> terribly.  http://www.amk.ca/conceit/xmlplus.html covers some of the
> issues, but there's also - 

So let's not pretend that they're the same thing.  'from eventloop 
import listenTCP' -> 'from twisted.internet import reactor'.  They can 
just share a set of common interfaces.  The big problem with xmlplus was 
that it changed the behavior of a built-in package, so let's not ever do 
that again.   amk's article specifically recommends this solution.

> 3. Limited usefulness of minimal APIs: lets say we add Twisted to the
> stdlib. Because it's large, we don't want to add *everything*. We can't
> add SSL probably cause that depends on pyOpenSSL which is LGPLed,
> probably don't want the pygtk reactor because that occasionally needs
> updates for new pygtk releases, etc.. So Jane User decides to build a
> network application, plays a bit with the TCP client code, and now says
> "OK great, now to add a GUI and TLS support" - and suddenly she needs to
> install the full Twisted framework to do that.

Right.  But, her code uses Twisted-like interfaces so she doesn't have 
to re-write it all.  Given that a lot of network applications are 
trivial one-offs, this step will not always happen.

> I would argue that Python needs less in the stdlib, not more; specific
> external software packages will probably grow into de-facto standard
> packages, but there's no reason for them to be in stdlib. PyXML is
> usually installed separately because people need the extended features
> the full package has, and the same would happen to Twisted. The only
> real benefit to inclusion in the stdlib is ease of distribution, and a
> better way to deal with that is to put more work into things like Eggs
> (http://peak.telecommunity.com/DevCenter/PythonEggs).

I don't think the issue is "less" or "more" but "better".  The Python 
standard library is of a highly non-uniform quality.  Whether or not 
Twisted gets added, I think asyncore should be removed, or at least 
strongly deprecated.



From bob at redivi.com  Fri Jul  1 14:50:24 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 1 Jul 2005 08:50:24 -1000
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C58A63.6020308@divmod.com>
References: <42C51338.2040905@pollenation.net>
	<1120229601.8891.30.camel@localhost.localdomain>
	<42C58A63.6020308@divmod.com>
Message-ID: <C88813C7-F1C1-4458-AC73-FE52A3DB97C1@redivi.com>


On Jul 1, 2005, at 8:24 AM, Glyph Lefkowitz wrote:

> Itamar Shtull-Trauring wrote:
>
>> On Fri, 2005-07-01 at 10:56 +0100, Matt Goodall wrote:
>>
>
>
>> One solution is a separate Twisted package you can install,  
>> overriding
>> the stdlib's. Since Twisted, even split up, is quite large, this  
>> would
>> probably be necessary for most non-trivial functionality anyway,  
>> which
>> leads to:
>>
>
> IMHO the point here is the trivial functionality.  As far as I can  
> tell from the few examples of event-driven applications that I use  
> which I didn't write :-), there is a progression that many event- 
> driven Python programs go through these days:
>
>     - Implement something with asyncore
>     - realize asyncore's deficiencies, start enhancing it
>     - discover Twisted, re-implement networking code (from scratch)
>
> If the event loop in Python provided similar interfaces to the one  
> in Twisted, the amount of work involved in stage 3 could be greatly  
> reduced.

A fringe benefit of having something reactor-like in the Python  
stdlib is that it gives Twisted more credibility (amongst those that  
don't already know that we're right).

>> 3. Limited usefulness of minimal APIs: lets say we add Twisted to the
>> stdlib. Because it's large, we don't want to add *everything*. We  
>> can't
>> add SSL probably cause that depends on pyOpenSSL which is LGPLed,
>> probably don't want the pygtk reactor because that occasionally needs
>> updates for new pygtk releases, etc.. So Jane User decides to build a
>> network application, plays a bit with the TCP client code, and now  
>> says
>> "OK great, now to add a GUI and TLS support" - and suddenly she  
>> needs to
>> install the full Twisted framework to do that.
>>
>
> Right.  But, her code uses Twisted-like interfaces so she doesn't  
> have to re-write it all.  Given that a lot of network applications  
> are trivial one-offs, this step will not always happen.

If something like threadedselectreactor made it into stdlib, then GUI  
integration (and integration with otherwise blocking code) would be  
easy enough.

Personally, since this is the 2.5+ timeframe we're talking about  
here, I would rather see something PEP-342 based on the outside, as  
that would require less brain enhancement for most people to use  
properly.

Deferreds are just as important as anything else.. I mean hell, I  
have implemented the Deferred API (with cancellation) in both  
JavaScript and ActionScript 2.0 for various purposes because it's the  
Right Way to represent that sort of thing given the language  
constraints.

(the JavaScript stuff, which should make a lot of Pythonistas very  
happy, will probably make it into open source in 2 weeks or so.. the  
AS2 stuff I have no immediate plans of releasing).

-bob




From foom at fuhm.net  Fri Jul  1 14:55:53 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 1 Jul 2005 14:55:53 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C51338.2040905@pollenation.net>
References: <42C51338.2040905@pollenation.net>
Message-ID: <1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>

On Jul 1, 2005, at 5:56 AM, Matt Goodall wrote:
> Hi,
>
> I know some of you guys have already thinking about this but ...
>
> A couple of weeks ago we had a bit of a chat (flame? ;-)) in  
> #twisted about the idea of moving parts of Twisted, specifically  
> the event loop, into the std lib. So, at Europython I had a quick  
> chat with GvR about it too.
>
> GvR would really, really like to get a simple, flexible event loop  
> into the std lib and thinks that Twisted is likely the best  
> starting point since Twisted probably integrates with more event  
> driven toolkits than anything else.
>
> Obviously, having the event loop part in the std lib has a number  
> of benefits but it should also put pressure on all event driven  
> toolkits to conform to the common API. Everything would then work  
> together and the world would be a happier, shinier place ;-).
>
> GvR suggested that someone should start a PEP to talk around, which  
> seems like a sensible thing to do, although I don't know if anyone  
> with enough knowledge of the reactor and working with other event  
> loops has time right now.

I think adding a subset of Twisted to the python stdlib would be a  
disservice to both the stdlib users and Twisted users, especially now  
that Python is on the cusp of having an easy way to distribute, find,  
and install 3rd party packages automatically. Saying that Twisted  
should be a "starting point" bothers me especially, as that seems to  
indicate that the two will diverge over time. That is worrisome. Who  
is going to maintain the stdlib fork?

I would suggest instead that python should distribute a selected set  
of "recommended extras" as part of the installer, which would  
basically be complete 3rd party packages, included just for  
convenience. Twisted core would make a good package to include there,  
as would many others.

James



From itamar at itamarst.org  Fri Jul  1 14:58:31 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Jul 2005 14:58:31 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C58A63.6020308@divmod.com>
References: <42C51338.2040905@pollenation.net>
	<1120229601.8891.30.camel@localhost.localdomain>
	<42C58A63.6020308@divmod.com>
Message-ID: <1120244311.8891.63.camel@localhost.localdomain>

On Fri, 2005-07-01 at 14:24 -0400, Glyph Lefkowitz wrote:

> 	- Implement something with asyncore
> 	- realize asyncore's deficiencies, start enhancing it
> 	- discover Twisted, re-implement networking code (from scratch)
> 
> If the event loop in Python provided similar interfaces to the one in 
> Twisted, the amount of work involved in stage 3 could be greatly reduced.

Alternatively, asyncore could just be deprecated, which would be a lot
easier to do, and people would start from the correct solution :)

> > 2. Installing separate package issues. As PyXML has shown, having a
> > separate package which overrides or extends a built-in stdlib API works
> > terribly.  http://www.amk.ca/conceit/xmlplus.html covers some of the
> > issues, but there's also - 
> 
> So let's not pretend that they're the same thing.  'from eventloop 
> import listenTCP' -> 'from twisted.internet import reactor'.  They can 
> just share a set of common interfaces.  The big problem with xmlplus was 
> that it changed the behavior of a built-in package, so let's not ever do 
> that again.   amk's article specifically recommends this solution.

Hm. That's a lot better than moving parts of Twisted, yes. I still think
it's silly.

> I don't think the issue is "less" or "more" but "better".  The Python 
> standard library is of a highly non-uniform quality.  Whether or not 
> Twisted gets added, I think asyncore should be removed, or at least 
> strongly deprecated.

Adding yet another event loop would just continue the tradition, I'm
sure; it took us quite a while to get to the quality we have now just in
terms of platform support. I suppose you could butcher our code by
ripping features out... but you'd just get a crippled piece of software.
The motivation is "so then people can move to something less suck"? Why
not just have them start from something good to begin with?




From twisted at ralphm.ik.nu  Fri Jul  1 15:21:51 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Fri, 1 Jul 2005 21:21:51 +0200
Subject: [Twisted-Python] jabber sasl and TLS
In-Reply-To: <4adac7a305070108376455c124@mail.gmail.com>
References: <4adac7a305070108376455c124@mail.gmail.com>
Message-ID: <20050701192151.GA56738@ik.nu>

On Fri, Jul 01, 2005 at 09:37:46AM -0600, Nathaniel Haggard wrote:
> What is the status of the sasl TLS jabber authenticator?  There is
> this code from about a month ago:
> http://bfs.itlab.musc.edu/pubcvs/viewcvs.cgi/tofu/saslclient.py#rev1.6,
> but it does not include TLS.

Yes, tofu has submitted this code, and I, the maintainer of the Jabber
pieces in Twisted, am looking at integrating this. However, to do this
right, there are some fundamental changes necessary in Xish and the
Jabber module. I'm working on this, and will update the bug with
progress.

If you have any more questions, do ask in this list.

-- 
Groetjes,

ralphm



From natester at gmail.com  Fri Jul  1 15:35:39 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Fri, 1 Jul 2005 13:35:39 -0600
Subject: [Twisted-Python] jabber sasl and TLS
In-Reply-To: <20050701192151.GA56738@ik.nu>
References: <4adac7a305070108376455c124@mail.gmail.com>
	<20050701192151.GA56738@ik.nu>
Message-ID: <4adac7a3050701123513f2a10d@mail.gmail.com>

Where is the code now and can I help you by using it?

Nate

On 7/1/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> On Fri, Jul 01, 2005 at 09:37:46AM -0600, Nathaniel Haggard wrote:
> > What is the status of the sasl TLS jabber authenticator?  There is
> > this code from about a month ago:
> > http://bfs.itlab.musc.edu/pubcvs/viewcvs.cgi/tofu/saslclient.py#rev1.6,
> > but it does not include TLS.
> 
> Yes, tofu has submitted this code, and I, the maintainer of the Jabber
> pieces in Twisted, am looking at integrating this. However, to do this
> right, there are some fundamental changes necessary in Xish and the
> Jabber module. I'm working on this, and will update the bug with
> progress.
> 
> If you have any more questions, do ask in this list.
> 
> --
> Groetjes,
> 
> ralphm
>



From solipsis at pitrou.net  Fri Jul  1 15:39:36 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 01 Jul 2005 21:39:36 +0200
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C58A63.6020308@divmod.com>
References: <42C51338.2040905@pollenation.net>
	<1120229601.8891.30.camel@localhost.localdomain>
	<42C58A63.6020308@divmod.com>
Message-ID: <1120246776.9439.62.camel@fsol>


Hi,

> IMHO the point here is the trivial functionality.  As far as I can tell 
> from the few examples of event-driven applications that I use which I 
> didn't write :-), there is a progression that many event-driven Python 
> programs go through these days:
> 
> 	- Implement something with asyncore
> 	- realize asyncore's deficiencies, start enhancing it
> 	- discover Twisted, re-implement networking code (from scratch)
> 
> If the event loop in Python provided similar interfaces to the one in 
> Twisted, the amount of work involved in stage 3 could be greatly reduced.

As a humble lurker on this list, I just wanna say that this argument
rings a bell. I had to rewrite a P2P program which had chosen to
implement its own event loop instead of using Twisted... ;)

It would be nice if more people knew about Twisted.

Regards

Antoine.





From golux at comcast.net  Fri Jul  1 16:01:53 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 01 Jul 2005 16:01:53 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
References: <42C51338.2040905@pollenation.net>
	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
Message-ID: <42C5A131.708@comcast.net>

James Y Knight wrote:
> I would suggest instead that python should distribute a selected set  of 
> "recommended extras" as part of the installer, which would  basically be 
> complete 3rd party packages, included just for  convenience. Twisted 
> core would make a good package to include there,  as would many others.

I agree with James's position:  Twisted should be one of a number
of Python "recommended extras" (I also agree with Glyph and Itamar
that asyncore should be deprecated).

IMO, that approach accomplishes everything that could be hoped
for by incorporating a reactor-like event loop in the std library:
(1) makes Twisted more visible to anyone looking for a "simple,
flexible event loop", and (equally important) add the context of
the deferred api and some well-tested goodies with asynchronous
api's (like adbapi) and (2) does not create any gratuitous wrinkles
(like a potential stdlib fork) for the current well-oiled Twisted
development machine's minions to have to deal with.  ;)

Bob's point about "credibility" is well-taken, but I think having
Twisted designated as an official Python "recommended extra"
would accomplish that as well.

Cheers,
Steve



From bob at redivi.com  Fri Jul  1 16:26:20 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 1 Jul 2005 10:26:20 -1000
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <1120246776.9439.62.camel@fsol>
References: <42C51338.2040905@pollenation.net>
	<1120229601.8891.30.camel@localhost.localdomain>
	<42C58A63.6020308@divmod.com> <1120246776.9439.62.camel@fsol>
Message-ID: <A33760FE-AB9A-40B5-85DE-1AF2071B0980@redivi.com>


On Jul 1, 2005, at 9:39 AM, Antoine Pitrou wrote:

>> IMHO the point here is the trivial functionality.  As far as I can  
>> tell
>> from the few examples of event-driven applications that I use which I
>> didn't write :-), there is a progression that many event-driven  
>> Python
>> programs go through these days:
>>
>>     - Implement something with asyncore
>>     - realize asyncore's deficiencies, start enhancing it
>>     - discover Twisted, re-implement networking code (from scratch)
>>
>> If the event loop in Python provided similar interfaces to the one in
>> Twisted, the amount of work involved in stage 3 could be greatly  
>> reduced.
>>
>
> As a humble lurker on this list, I just wanna say that this argument
> rings a bell. I had to rewrite a P2P program which had chosen to
> implement its own event loop instead of using Twisted... ;)

I did this once too, s/P2P program/XML Socket Server/

It turned out that doing one in Twisted was so easy, that I never  
bothered to package another one again.  Everything else I had in  
there was more or less YAGNI because Twisted already did it, or made  
implementing the features so trivial as it wasn't worth including  
it.  These days I just whip up app-specific LineReceivers with a '\0'  
delimiter that parse/generate with ElementTree.. takes like 5 minutes.

-bob




From bob at redivi.com  Fri Jul  1 16:28:10 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 1 Jul 2005 10:28:10 -1000
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C5A131.708@comcast.net>
References: <42C51338.2040905@pollenation.net>
	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
	<42C5A131.708@comcast.net>
Message-ID: <A89582D5-B8B8-475C-BC84-3712AAF7DCB4@redivi.com>


On Jul 1, 2005, at 10:01 AM, Stephen Waterbury wrote:

> James Y Knight wrote:
>
>> I would suggest instead that python should distribute a selected  
>> set  of "recommended extras" as part of the installer, which  
>> would  basically be complete 3rd party packages, included just  
>> for  convenience. Twisted core would make a good package to  
>> include there,  as would many others.
>>
>
> I agree with James's position:  Twisted should be one of a number
> of Python "recommended extras" (I also agree with Glyph and Itamar
> that asyncore should be deprecated).
>
> IMO, that approach accomplishes everything that could be hoped
> for by incorporating a reactor-like event loop in the std library:
> (1) makes Twisted more visible to anyone looking for a "simple,
> flexible event loop", and (equally important) add the context of
> the deferred api and some well-tested goodies with asynchronous
> api's (like adbapi) and (2) does not create any gratuitous wrinkles
> (like a potential stdlib fork) for the current well-oiled Twisted
> development machine's minions to have to deal with.  ;)
>
> Bob's point about "credibility" is well-taken, but I think having
> Twisted designated as an official Python "recommended extra"
> would accomplish that as well.

I just wanted to point out that I agree with James' position too, but  
was speaking towards the "what if ideas from Twisted were to be  
included", rather than "what should actually happen".

Python's standard library should dissolve into just the bits required  
to support simple scripts and EasyInstall/eggs.

-bob




From golux at comcast.net  Fri Jul  1 17:12:56 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 01 Jul 2005 17:12:56 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <A89582D5-B8B8-475C-BC84-3712AAF7DCB4@redivi.com>
References: <42C51338.2040905@pollenation.net>	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>	<42C5A131.708@comcast.net>
	<A89582D5-B8B8-475C-BC84-3712AAF7DCB4@redivi.com>
Message-ID: <42C5B1D8.6060106@comcast.net>

Bob Ippolito wrote:
> I just wanted to point out that I agree with James' position too, but  
> was speaking towards the "what if ideas from Twisted were to be  
> included", rather than "what should actually happen".
> 
> Python's standard library should dissolve into just the bits required  
> to support simple scripts and EasyInstall/eggs.

Rat on!  And the library docs will hopefully evolve into a
nice distributed documentation system, too ... :)

Steve



From natester at gmail.com  Fri Jul  1 19:40:42 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Fri, 1 Jul 2005 17:40:42 -0600
Subject: [Twisted-Python] jabber sasl and TLS
In-Reply-To: <4adac7a3050701123513f2a10d@mail.gmail.com>
References: <4adac7a305070108376455c124@mail.gmail.com>
	<20050701192151.GA56738@ik.nu>
	<4adac7a3050701123513f2a10d@mail.gmail.com>
Message-ID: <4adac7a3050701164046710cb@mail.gmail.com>

Ok I patched the latest twisted with those patches from the bug, and
this is the code that I use to try to login.

from twisted.words.protocols import jabber
from twisted.xish import xmlstream
from twisted.words.protocols.jabber import client, jid
from twisted.internet import reactor, defer

class Connection:
    def __init__(self, who, myjid):
        self.jid = jid.JID(myjid)
        self.who = who

    def connect(self, passwd, port=5223):
        self.factory = client.jabberClientFactory(self.jid, passwd)
        
        self.factory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT,self.onAuthSuccess)
        self.factory.addBootstrap(client.XMPPAuthenticator.AUTH_FAILED_EVENT,self.onAuthFailed)
        
        self.connector = reactor.connectTCP(self.jid.host, port, self.factory)
    
    def onAuthSuccess(self, stream):
        print "%s: Successful connection" % (self.who)
        self.stream = stream

    def onAuthFailed(self, stream):
        print "%s: Failed connection" % (self.who)
        self.factory.stopTrying()
        self.connector.disconnect()

c1 = Connection('1', 'test at domain.com/res1')
c1.connect('pass')

reactor.run()

jabberd 2.0s8 (on linux with openssl 0.9.7d) complains with this error:

C2S : Fri Jul  1 17:20:55 2005 [notice] [6] [10.1.2.111, port=49443]
error: SSL handshake error (error:140760FC:SSL
routines:SSL23_GET_CLIENT_HELLO:unknown protocol)
C2S : sx (sx.c:55) allocated new sx for 6
C2S : Fri Jul  1 17:21:47 2005 [notice] [7] [10.1.2.111, port=49444] connect

The server is setup to do TLS auth only on port 5223. 

Nate

On 7/1/05, Nathaniel Haggard <natester at gmail.com> wrote:
> Where is the code now and can I help you by using it?
> 
> Nate
> 
> On 7/1/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> > On Fri, Jul 01, 2005 at 09:37:46AM -0600, Nathaniel Haggard wrote:
> > > What is the status of the sasl TLS jabber authenticator?  There is
> > > this code from about a month ago:
> > > http://bfs.itlab.musc.edu/pubcvs/viewcvs.cgi/tofu/saslclient.py#rev1.6,
> > > but it does not include TLS.
> >
> > Yes, tofu has submitted this code, and I, the maintainer of the Jabber
> > pieces in Twisted, am looking at integrating this. However, to do this
> > right, there are some fundamental changes necessary in Xish and the
> > Jabber module. I'm working on this, and will update the bug with
> > progress.
> >
> > If you have any more questions, do ask in this list.
> >
> > --
> > Groetjes,
> >
> > ralphm
> >
>



From dvkeeney at gmail.com  Fri Jul  1 21:54:26 2005
From: dvkeeney at gmail.com (David)
Date: Fri, 1 Jul 2005 20:54:26 -0500
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C5B1D8.6060106@comcast.net>
References: <42C51338.2040905@pollenation.net>
	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
	<42C5A131.708@comcast.net>
	<A89582D5-B8B8-475C-BC84-3712AAF7DCB4@redivi.com>
	<42C5B1D8.6060106@comcast.net>
Message-ID: <6e04113a050701185426225d0e@mail.gmail.com>

I am not yet a twisted programmer, so my contribution to this thread
has more to do with English interpretation than with twisted.

A principle problem with event mainloops is that each toolkit wants to
provide one, and the program can only have one running at a time
(barring multithreading fanciness).  When I read the original post
referring to the discussion with GvR, I thought, cool, a resolution to
the different-mainloops-for-different-tool kits problem: a mainloop
that can integrate various tool kits.

It seems that all other respondents have interpreted it as a call to
include twisted, or parts of it _as is_, in the stdlib.  I did not see
in the original post a call for twisted _networking_ inclusion at all.

When I read about twisted on other lists (the pygame list comes to
mind), the examples almost always use the poll() reactor method,
because it allows you to use twisted from your own mainloop; you can
then integrate other tool kits into that home-spun mainloop by
whatever provisions they allow for doing so.

We shouldn't have to be that creative.  There should be one std dist
mainloop that can accommodate, via callbacks perhaps, whatever
(multiple) services need a mainloop.   So a tkinter-twisted mainloop
and a gtk-twisted mainloop would not be needed as separate components.

I am too naive to write such a library, nor even to write a PEP, so I
won't be running with this, but is there something impossible about my
interpretation?

David



From andrea at cpushare.com  Fri Jul  1 22:20:44 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat, 2 Jul 2005 04:20:44 +0200
Subject: [Twisted-Python] how to tap a DelayedCall?
Message-ID: <20050702022044.GJ9987@g5.random>

Hello,

I'm still using my setup where I use mktap for the production system so
I tweak it with mktap -u/-g/Options() parameters
(twisted.python.usage.Options) and the tac -noy model for development
with default Option values, but I'm now having a problem with a delayed
call in the tap mode.

Somewhere inside the makeService hook I execute a reactor.callLater, and
that gives the following error:

WARNING: unserializing ephemeral twisted.internet.base.DelayedCall

(and of course it hangs too since that new callLater is now fundamental ;)

Now I think I can trivially move the callLater into the startFactory()
hook, and then it should work even with the tap file, but I wondered if
there was a more transparent way to make callLater work with tap files
like it does with the tac ones just fine.

I'm considering going away from the tap model, but first I'd like to see
the equivalent of mktap -u/-g and the other Option() parameters
available through tac files too (which isn't possible yet AFIK, twistd
doesn't take those params, and I don't want to reinvent locally yet
another getopt/Options mechanism, the Options configurable via mktap
were all I needed, except I don't need serialization just to pass
options, I only need the mktap option passing). Hints welcome.

Thanks and keep up the great work!



From bob at redivi.com  Fri Jul  1 23:23:45 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 1 Jul 2005 17:23:45 -1000
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <6e04113a050701185426225d0e@mail.gmail.com>
References: <42C51338.2040905@pollenation.net>
	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
	<42C5A131.708@comcast.net>
	<A89582D5-B8B8-475C-BC84-3712AAF7DCB4@redivi.com>
	<42C5B1D8.6060106@comcast.net>
	<6e04113a050701185426225d0e@mail.gmail.com>
Message-ID: <CF4FB2B0-C703-4E23-AC89-14C26E420CD8@redivi.com>


On Jul 1, 2005, at 3:54 PM, David wrote:

> I am not yet a twisted programmer, so my contribution to this thread
> has more to do with English interpretation than with twisted.
>
> A principle problem with event mainloops is that each toolkit wants to
> provide one, and the program can only have one running at a time
> (barring multithreading fanciness).  When I read the original post
> referring to the discussion with GvR, I thought, cool, a resolution to
> the different-mainloops-for-different-tool kits problem: a mainloop
> that can integrate various tool kits.
>
> It seems that all other respondents have interpreted it as a call to
> include twisted, or parts of it _as is_, in the stdlib.  I did not see
> in the original post a call for twisted _networking_ inclusion at all.
>
> When I read about twisted on other lists (the pygame list comes to
> mind), the examples almost always use the poll() reactor method,
> because it allows you to use twisted from your own mainloop; you can
> then integrate other tool kits into that home-spun mainloop by
> whatever provisions they allow for doing so.
>
> We shouldn't have to be that creative.  There should be one std dist
> mainloop that can accommodate, via callbacks perhaps, whatever
> (multiple) services need a mainloop.   So a tkinter-twisted mainloop
> and a gtk-twisted mainloop would not be needed as separate components.
>
> I am too naive to write such a library, nor even to write a PEP, so I
> won't be running with this, but is there something impossible about my
> interpretation?

That's a nice idea, but it can't possibly work.  If you want a  
general way to interoperate with different toolkits, you basically  
have to use multithreaded fanciness, because not many of them have  
timers or socket notifiers built in worth their salt.  Starting a  
single thread to sit around and wait for select() or equivalent is  
pretty sane, and makes the interface a lot more flexible and generic  
since you only need one facility in the toolkit -- namely a thread- 
safe way to call back into the main thread.

Fortunately, there is one in Twisted 2.1, threadedselectreactor,  
which DOES integrate with various runloops (pygame and wxPython  
included) without polling.  However, it's not the end of the road.   
threadedselectreactor should be refactored into a general interface  
(interleave) such that other backends (epoll, kqueue, windows junk,  
etc.) can be used rather than select.

-bob




From anthony at interlink.com.au  Sat Jul  2 01:12:59 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Sat, 2 Jul 2005 15:12:59 +1000
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
References: <42C51338.2040905@pollenation.net>
	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
Message-ID: <200507021513.01756.anthony@interlink.com.au>

On Saturday 02 July 2005 04:55, James Y Knight wrote:
> I would suggest instead that python should distribute a selected set
> of "recommended extras" as part of the installer, which would
> basically be complete 3rd party packages, included just for
> convenience. Twisted core would make a good package to include there,
> as would many others.

I don't think this should be bundled into the base installer. 

a: The installer's already up around 10M - adding Twisted 
makes it that much larger
b: Shipping it as part of the Official Installer suggests
that Twisted will follow then standard Python release 
process, which means you have to worry about deprecations
and the like
c: There will be confusion for users with bugs - do they
submit an entry to the python bug tracker?

But I _would_ like to see asyncore more aggressively deprecated...

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From christopher.zorn at gmail.com  Sat Jul  2 08:53:57 2005
From: christopher.zorn at gmail.com (Christopher Zorn)
Date: Sat, 2 Jul 2005 08:53:57 -0400
Subject: [Twisted-Python] jabber sasl and TLS
In-Reply-To: <4adac7a3050701123513f2a10d@mail.gmail.com>
References: <4adac7a305070108376455c124@mail.gmail.com>
	<20050701192151.GA56738@ik.nu>
	<4adac7a3050701123513f2a10d@mail.gmail.com>
Message-ID: <149014b905070205534fc2fe5d@mail.gmail.com>

On 7/1/05, Nathaniel Haggard <natester at gmail.com> wrote:
> Where is the code now and can I help you by using it?
> 

http://twistedmatrix.com/bugs/issue1046

There is the issue/bug on the twisted tracker. It has patches
attached, but as ralph said, in order to do this right there needs to
be changes in xish. But for now those patches on the issue have TLS
support.


> Nate
> 
> On 7/1/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> > On Fri, Jul 01, 2005 at 09:37:46AM -0600, Nathaniel Haggard wrote:
> > > What is the status of the sasl TLS jabber authenticator?  There is
> > > this code from about a month ago:
> > > http://bfs.itlab.musc.edu/pubcvs/viewcvs.cgi/tofu/saslclient.py#rev1.6,
> > > but it does not include TLS.
> >
> > Yes, tofu has submitted this code, and I, the maintainer of the Jabber
> > pieces in Twisted, am looking at integrating this. However, to do this
> > right, there are some fundamental changes necessary in Xish and the
> > Jabber module. I'm working on this, and will update the bug with
> > progress.
> >
> > If you have any more questions, do ask in this list.
> >
> > --
> > Groetjes,
> >
> > ralphm
> >
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From andrea at cpushare.com  Sat Jul  2 13:34:42 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat, 2 Jul 2005 19:34:42 +0200
Subject: [Twisted-Python] how to tap a DelayedCall?
In-Reply-To: <20050702022044.GJ9987@g5.random>
References: <20050702022044.GJ9987@g5.random>
Message-ID: <20050702173442.GM9987@g5.random>

On Sat, Jul 02, 2005 at 04:20:44AM +0200, Andrea Arcangeli wrote:
> Now I think I can trivially move the callLater into the startFactory()
> hook, and then it should work even with the tap file, but I wondered if

Well, sounds like there was nothing as easy as to move it in
startFactory, I now arm the timer in startFactory and I cancel it in
stopFactory and it works fine as expected and I can still use the mktap
trick to pass the params and -u/-g dynamically on the command line ;)



From foom at fuhm.net  Sat Jul  2 14:40:21 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 2 Jul 2005 14:40:21 -0400
Subject: [Twisted-Python] how to tap a DelayedCall?
In-Reply-To: <20050702173442.GM9987@g5.random>
References: <20050702022044.GJ9987@g5.random> <20050702173442.GM9987@g5.random>
Message-ID: <68BDEC68-EC59-4EB5-891E-927A1B2F77E9@fuhm.net>


On Jul 2, 2005, at 1:34 PM, Andrea Arcangeli wrote:

> On Sat, Jul 02, 2005 at 04:20:44AM +0200, Andrea Arcangeli wrote:
>
>> Now I think I can trivially move the callLater into the  
>> startFactory()
>> hook, and then it should work even with the tap file, but I  
>> wondered if
>>
>
> Well, sounds like there was nothing as easy as to move it in
> startFactory, I now arm the timer in startFactory and I cancel it in
> stopFactory and it works fine as expected and I can still use the  
> mktap
> trick to pass the params and -u/-g dynamically on the command line ;)

FYI, the -u and -g arguments were added to twistd for 2.0,

James



From ww at groovy.net  Sat Jul  2 15:37:24 2005
From: ww at groovy.net (William Waites)
Date: Sat, 2 Jul 2005 15:37:24 -0400
Subject: [Twisted-Python] Fast RPC
Message-ID: <20050702193724.GB27071@groovy.net>

It looks like this has come up once or twice on the list under the
guyse of "how do I make synchronous calls to PB from another
application" with no clear answer. It seems to be hard to do
because of the design of PB. Use XMLRPC is the usual response.

Here's the situation. I have an embedded python interpreter
running inside of Yate. Because of the way Yate deals with
threads and signals, it seems to be hard to get a twisted
reactor to run inside the embedded interpreter. I also have a 
twisted process that wraps an API around a database and
exposes it over XMLRPC and PB. The embedded interpreter needs
to get at various bits of data by making RPC calls to this API.

Using XMLRPC works. But it is very slow. Especially since
xmlrpclib wants to make a new TCP connection for each call.

Using a test PB client, PB calls are much faster, since
there is a persistant TCP connection and simpler encoding.

I have toyed with the idea of using Sun RPC or something
similar to have the embedded interpreter talk to a local
twisted process that then would talk over the network, and
perhaps this is not a bad option.

Any suggestions for a way to make RPC calls over the network
with the speed of the PB and the synchronicity of XMLRPC?

Cheers,
-w



From bob at redivi.com  Sat Jul  2 16:27:28 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 2 Jul 2005 10:27:28 -1000
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <20050702193724.GB27071@groovy.net>
References: <20050702193724.GB27071@groovy.net>
Message-ID: <C764BA21-F36E-4117-8FA7-23537B071F77@redivi.com>


On Jul 2, 2005, at 9:37 AM, William Waites wrote:

> It looks like this has come up once or twice on the list under the
> guyse of "how do I make synchronous calls to PB from another
> application" with no clear answer. It seems to be hard to do
> because of the design of PB. Use XMLRPC is the usual response.
>
> Here's the situation. I have an embedded python interpreter
> running inside of Yate. Because of the way Yate deals with
> threads and signals, it seems to be hard to get a twisted
> reactor to run inside the embedded interpreter. I also have a
> twisted process that wraps an API around a database and
> exposes it over XMLRPC and PB. The embedded interpreter needs
> to get at various bits of data by making RPC calls to this API.

threadedselectreactor (in svn, will be in 2.1) runs the blocking part  
of the reactor in a separate thread, so you could do blocking PB- 
based RPC with that..

I just checked in an example of how you might be able to use it:
Twisted/trunk/doc/core/examples/threadedselect/blockingdemo.py

Not really tested or thought out very well, but it should work.

-bob




From itamar at itamarst.org  Sun Jul  3 00:49:20 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 03 Jul 2005 00:49:20 -0400
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <20050702193724.GB27071@groovy.net>
References: <20050702193724.GB27071@groovy.net>
Message-ID: <1120366160.7846.10.camel@localhost.localdomain>

On Sat, 2005-07-02 at 15:37 -0400, William Waites wrote:

> Because of the way Yate deals with
> threads and signals, it seems to be hard to get a twisted
> reactor to run inside the embedded interpreter.

reactor.run(installSignalHandlers=False) may fix that.




From jritter at bektel.com  Sun Jul  3 04:56:42 2005
From: jritter at bektel.com (Josh Ritter)
Date: Sun, 3 Jul 2005 03:56:42 -0500
Subject: [Twisted-Python] Minions of Mirth - Independent Persistent World
	RPG using Twisted
Message-ID: <006d01c57fad$227219e0$0400000a@spooge>

Hello all...

I thought this might be of interest to a few people... I know there are some 
game developers on this list... and we have a pretty good example of Twisted 
being used in a game :)

We just opened up the alpha on our RPG that uses Twisted for the bulk of 
it's "RPG Networking"... Twisted has been absolutely great to work with... 
it's used in our Master Server, World Server, Zone Servers, and Client... We 
also have an autopatching system it will be used in, though for now that 
uses *gulp* urllib :|

The alpha can be downloaded on both the Windows and OSX platforms.... some 
further information is below....

Oh, and here's an embedded web server in the world server running Nevow, 
hooray for Nevow! http://www.prairiegames.com/phpBB2/viewtopic.php?t=116

Vibes and THANKS!!!,
-Josh Ritter
Prairie Games
http://www.prairiegames.com

-----------------------------------------------------------

Minions of Mirth(tm) - "Truly Open Alpha"

Minions of Mirth(tm) is a massively single player, multiplayer, 3d MUD, 
Persistent World RPG, by Prairie Games.
We are currently in alpha testing on OSX and Windows and are extending an 
invitation to be a part of the game's creation.

You can DOWNLOAD the alpha test simply by registering on our forums: 
http://www.prairiegames.com/phpBB2/profile.php?mode=register

Once you've registered, the download information can be obtained in this 
thread: http://www.prairiegames.com/phpBB2/viewtopic.php?t=93

The Minions of Mirth "Truly Open Alpha" is a work in progress that features:

+ Windows and OSX support!

+ Easy access, only a forum registration is necessary to get in on the fun! 
http://www.prairiegames.com/phpBB2/profile.php?mode=register

+ Massively Single Player Gameplay(tm)!!!

+ Cooperative and Player vs Player Multiplayer

+ No monthly service fees for Multiplayer!

+ Autopatcher delivers immediate content and feature upgrades!!!

+ Host your own persistent worlds with your own original content!

+ Immortal access to your own world where you can control time, weather, 
spawns, items, etc

+ 10 playable races with distinct look, feel, and SIZE!!! Huge Drakken and 
tiny little Halflings!!!

+ 9 beautiful zones with huge playable area and vistas!  Dark dungeons and 
sprawling wilderness!

+ 2 hours of original music!

+ Masterfully animated 3d monster models with stunningly realistic textures

+ Spine-chilling sound effects!

+ Day/Night cycles with gameplay tied to time of day

+ Immersive weather effects based on zone climate

+ Multiclass your characters all the way to level 100 in up to 3 classes!

+ Material based clothing system

+ Over 50 3d weapon models

+ 100's of in game items with high resolution graphics and magical effects!

+ Political Factions

+ Quest Journal

+ Online Help

+ Vendors sell items and restock at regular intervals

+ Trade items and currency with other players!

+ 3d Automap

+ Versatile Spell System (invisibility, wind walking, Teleportation, 
Healing, Nukes, DoTs, etc)

+ Summon pets, equip them, and order them to destroy your foes!

+ Powerful Skills (Feign Death, Bloodletting, Rage, Volitation, Archery, 
Grecious Wound, Precise Shot, etc)

+ Form your own party of up to 6 characters

+ Form multiplayer alliances with up to 36 characters

+ Add, remove, or even create new characters at Inns, without ever leaving 
the game!

+ Powerful modding system including RPG Database (with live recompiles) and 
Realtime Zone Editing

+ Advanced users can SSH into their world and edit the game while it's 
running from an interactive Python shell.

+ Global, World, Zone, Area, Alliance, and Private chat channels

+ Global Chat system is hooked up to IRC, so you can chat with people in and 
out of the game, even spanning worlds!

Thanks!,
The Entire Team at Prairie Games 




From glyph at divmod.com  Sun Jul  3 14:55:48 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 3 Jul 2005 14:55:48 -0400
Subject: [Twisted-Python] Minions of Mirth - Independent Persistent World
In-Reply-To: <006d01c57fad$227219e0$0400000a@spooge>
Message-ID: <20050703185548.26278.1431338652.divmod.quotient.4958@ohm>

Josh, this is fabulous!  I'm signing up.  Just one thing:

>+ Advanced users can SSH into their world and edit the game while it's 
>running from an interactive Python shell.

I think you might find that it's a *bit* too easy to tank your whole game world using this feature...



From andrea at cpushare.com  Sun Jul  3 17:25:35 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 3 Jul 2005 23:25:35 +0200
Subject: [Twisted-Python] how to tap a DelayedCall?
In-Reply-To: <68BDEC68-EC59-4EB5-891E-927A1B2F77E9@fuhm.net>
References: <20050702022044.GJ9987@g5.random> <20050702173442.GM9987@g5.random>
	<68BDEC68-EC59-4EB5-891E-927A1B2F77E9@fuhm.net>
Message-ID: <20050703212535.GO9987@g5.random>

On Sat, Jul 02, 2005 at 02:40:21PM -0400, James Y Knight wrote:
> FYI, the -u and -g arguments were added to twistd for 2.0,

thanks for the info, so the only reason left to still use mktap are the
other params.



From nkeric at gmail.com  Sun Jul  3 22:31:08 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 4 Jul 2005 10:31:08 +0800
Subject: [Twisted-Python] How to implement bandwidth control for a UDP proxy
	server?
Message-ID: <43c0d2b5050703193162cde4e1@mail.gmail.com>

Hello!

Dose anyone have any experience in implementing bandwidth control for
UDP packets transferring with twisted? Please enlighten me if you
could, thank in advance!

: )

- Eric



From moof at metamoof.net  Mon Jul  4 10:53:58 2005
From: moof at metamoof.net (Moof)
Date: Mon, 04 Jul 2005 16:53:58 +0200
Subject: [Twisted-Python] Scheduling of modules
Message-ID: <42C94D86.2060008@metamoof.net>

Hiya,

I've more or less had twisted sold to me as the be-all and end-all in terms
of avoiding having to deal with threads, amongst other things, so I thought
I'd ask if twisted is the right thing to use for my problem.

I have a number of modules which use John J Lee's mechanize module to do
some web scraping to different web sites. Right now mechanize uses standard
urllib calls to do its thing, though it may be possible after much
refactoring to get it use something more asyncronous. So for the short term
rapid development thing, I'm more or less stuck with threads if I want to
get any vaguely concurrent running out of these modules.

Specifically, I'm going to need to poll a database every minute or so (or
write some form of SQL Server 2000 trigger which will call me when things
change) and if there are any changes in the database, potentially fire off
thirty of these web scraping modules at once. The modules are
self-contained, and don't communicate with anything other than the thing
that calls them by returning values, so I'm vaguely certain they're more or
less thread-safe, inasmuch as I ever can be.

My beef is that I can't have more than one scraping module modifying the
same site concurrently. This introduces race conditions on the site, rather
than in my code. Each module touches only one site, so I need to basically
have a module-level lock either in the module or in the thread scheduler to
ensure that I'm not running the same module more than once.

This makes me think of some sort of queue structure. I either need to have
one queue that just works through its requests ignoring any that are
currently running, or one queue per module with some sort of central
dispatcher that will place a request in the appropriate queue.

In real terms, these modules may take up to three minutes to complete the
web scraping they are required to do, though most take 20 seconds or so. I'd
rather not just have them called one after the other in a blocking manner,
as I'd sort of like to have a five or six minute response time whenever a
request is placed in the database to fire off a bunch of updates, rather
than the close to 20 minute response time I'm currently getting when I fire
a complete unittest suite off. These requests may come in several times a
day, most commonly hours apart, but I need to be able to react if I get two
or three different requests within a five minute period, which would mean
firing off the next request to the module as soon as it has completed the
current request.

Is this something Twisted can help me with? If so, what are my options
within Twisted, and what should I be reading up on how to use? I have a
vague idea that Twisted has a thread pool, but I'm not sure if it has an
event queue that would be suitable for this sort of control, or how I'd go
about modifying whatever's there to be useful for this sort of thing.

If not, any pointers to patterns that might help me code such a thing up?

I'm running on Windows. I need no GUI integration as such, though it will
need to run as an NT service. Any input other than though the database could
potentially be triggered off by a client programme going through something
like perspective broker, or the Windows NT service controller telling me to
start up or shut down.

Thanks for your help,

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From abe at fettig.net  Mon Jul  4 13:47:50 2005
From: abe at fettig.net (Abe Fettig)
Date: Mon, 04 Jul 2005 13:47:50 -0400
Subject: [Twisted-Python] O'Reilly book on Twisted coming in October
Message-ID: <42C97646.3040203@fettig.net>

Hi all,

I'm happy to announce that O'Reilly is going to publish my book on
Twisted. It's scheduled for release in October. The working title is
Twisted Network Programming Essentials.

I've been working on this book since the end of last year, but I've been
waiting to announce it until I knew that it was definitely going to be
published in the reasonably near future. At this point it's in the
editing stage, and O'Reilly has put it on their production schedule for
an October release. So spread the word - there's a Twisted book coming!

For a description of what the book covers (and what it doesn't), see
this post on my weblog:

http://fettig.net/weblog/2005/06/30/my-book-on-twisted/

Thanks to all the Twisted developers for creating such an amazing
framework. The more I learn about Twisted (and I learned a lot while
writing this book), the more I'm impressed. I hope this book helps many
more people to get started with Twisted, and that it's the first of many
more books to come.

Abe



From glyph at divmod.com  Mon Jul  4 14:01:40 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 4 Jul 2005 14:01:40 -0400
Subject: [Twisted-Python] O'Reilly book on Twisted coming in October
In-Reply-To: <42C97646.3040203@fettig.net>
Message-ID: <20050704180140.26278.427842379.divmod.quotient.5500@ohm>


On Mon, 04 Jul 2005 13:47:50 -0400, Abe Fettig <abe at fettig.net> wrote:
>Hi all,

>I'm happy to announce that O'Reilly is going to publish my book on
>Twisted. It's scheduled for release in October. The working title is
>Twisted Network Programming Essentials.

Congratulations, Abe!  This is wonderful news.  You know what would be better news, though?  My free, autographed copy arriving in the mail ;-)



From flashbuster at gmail.com  Mon Jul  4 14:22:15 2005
From: flashbuster at gmail.com (Sebastian Schulze)
Date: Mon, 4 Jul 2005 20:22:15 +0200
Subject: [Twisted-Python] O'Reilly book on Twisted coming in October
In-Reply-To: <42C97646.3040203@fettig.net>
References: <42C97646.3040203@fettig.net>
Message-ID: <c2959a4205070411225176a8e4@mail.gmail.com>

Whhee, what a good news! I'll definitly buy this one.
Please inform us when your book is avaiable on amazon.com (or elsewhere).

I have two questions: Does it cover all the changes done with Twisted 2.0 or
is it based on a prior version?
Is there a way of getting an autographed version, that would be nice :-)


On 7/4/05, Abe Fettig <abe at fettig.net> wrote:
> Hi all,
> 
> I'm happy to announce that O'Reilly is going to publish my book on
> Twisted. It's scheduled for release in October. The working title is
> Twisted Network Programming Essentials.
> 
> I've been working on this book since the end of last year, but I've been
> waiting to announce it until I knew that it was definitely going to be
> published in the reasonably near future. At this point it's in the
> editing stage, and O'Reilly has put it on their production schedule for
> an October release. So spread the word - there's a Twisted book coming!
> 
> For a description of what the book covers (and what it doesn't), see
> this post on my weblog:
> 
> http://fettig.net/weblog/2005/06/30/my-book-on-twisted/
> 
> Thanks to all the Twisted developers for creating such an amazing
> framework. The more I learn about Twisted (and I learned a lot while
> writing this book), the more I'm impressed. I hope this book helps many
> more people to get started with Twisted, and that it's the first of many
> more books to come.
> 
> Abe
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From general at eepatents.com  Mon Jul  4 18:20:36 2005
From: general at eepatents.com (Ed Suominen)
Date: Mon, 04 Jul 2005 15:20:36 -0700
Subject: [Twisted-Python] Re: O'Reilly book on Twisted coming in October
In-Reply-To: <E1DpVEj-0005kE-02@pyramid.twistedmatrix.com>
References: <E1DpVEj-0005kE-02@pyramid.twistedmatrix.com>
Message-ID: <1120515636.9253.52.camel@207-118-73-152.dyn.centurytel.net>

Abe, this is great to hear! Congratulations and very best of success to
you and the book. I for one will be looking to buy it ASAP.

P.S. - Apparently your blogging software is based on PHP rather than
Twisted. :-/ From your link, I just get an error "Error establishing a
database connection. This either means that the username and password
information in your wp-config.php file is incorrect or we can't contact
the database server at localhost." 

Best regards,
Ed Suominen

Abe Fettig wrote:
> Hi all,
> 
> I'm happy to announce that O'Reilly is going to publish my book on
> Twisted. It's scheduled for release in October. The working title is
> Twisted Network Programming Essentials.
> 
> I've been working on this book since the end of last year, but I've
> been
> waiting to announce it until I knew that it was definitely going to be
> published in the reasonably near future. At this point it's in the
> editing stage, and O'Reilly has put it on their production schedule
> for
> an October release. So spread the word - there's a Twisted book
> coming!
> 
> For a description of what the book covers (and what it doesn't), see
> this post on my weblog:
> 
> http://fettig.net/weblog/2005/06/30/my-book-on-twisted/
> 
> Thanks to all the Twisted developers for creating such an amazing
> framework. The more I learn about Twisted (and I learned a lot while
> writing this book), the more I'm impressed. I hope this book helps
> many
> more people to get started with Twisted, and that it's the first of
> many
> more books to come.
> 
> Abe




From iacovou at gmail.com  Tue Jul  5 08:16:57 2005
From: iacovou at gmail.com (kgi)
Date: Tue, 5 Jul 2005 15:16:57 +0300
Subject: [Twisted-Python] Questions regarding serviceCollection and
	Interfaces.
Message-ID: <491db6c9050705051673b82535@mail.gmail.com>

Hi all.

I'm in the process of moving a skeleton asyncore application to
Twisted, and need some help. I'm hoping that someone with much Twisted
Enlightenment can point me gently in the direction of understanding.

(Amusingly enough, another poster recently summarised my exact
experiences: start with asyncore, find its limitations, do a bit of
shoehorning and end up trying with Twisted).

Because this is new code I want to do The Right Thing vis-a-vis the
latest Twisted coding techniques. Everything was peachy until I reached
a certain step in the "Evolution of Finger" Tutorial.

Until a certain point I had completely grokked the approach that looks
like this:


  class Foo ( Protocol ):
      ....

  factory = ServerFactory()
  factory.protocol = Foo

  application = service.Application ( "fooserver" )
  internet.TCPServer ( port, factory ).setServiceParent ( application )


However, then I reached:

  http://twistedmatrix.com/projects/core/documentation/howto/tutorial/components.html

and the approach morphed into:

  application = service.Application ( "fooserver" )
  f = FooService()
  serviceCollection = service.IServiceCollection ( application )
  internet.TCPServer ( port, IFooFactory ( f ) ).setServiceParent (
serviceCollection )


Here are my questions:

1. I simply don't understand the third line of the new approach! :-)

   In twisted.application.service.py, I see:

    class IServiceCollection(components.Interface):
      ....

   So, "IServiceCollection" is an Interface; my (possibly outdated)
understanding
   is that an interface is simply a specification that you can check
against when
   something claims to implement it, hence all the "implements(Yadda)" calls
   everywhere (presumably, an exception is raised when something tells porkies
   about what it implements).

   But in this case, it looks like we're actually instantiating an
interface class.
   I can't grok what this "means", especially in light of the fact that there
   is "MultiService" below it that implements IServiceCollection.

2. Similarly, in the last line, "IFooFactory(f)" is taking a Service
(which isn't
   a factory) and passing it as a construction argument to IFooFactory (which
   also isn't a factory). The result is used as an argument to
internet.TCPServer(),
   which expects a factory!

3. What do I gain by using a serviceCollection over an application as the
   serviceParent of a TCPServer? Come to think of it, what did I gain in the
   first place with setServiceParent()?

4. Lastly, there are lots of examples floating around that describe
   how each Protocol example can reference its own Factory in order for
   connections to be able to talk to other connections (for example, in
   the chat server example). However, what approach should I take when I
   have a single server with multiple Protocols?

   For example, consider a simple cache: I have a server which accepts
   TCP connections from lots of clients, and handles queries from
   these clients. The server actually gets information from an
   upstream server, but caches the results that it has already seen.

   In this case in the server I need a Protocol/TCPServer server to
   handle the multiple clients, and a single Protocol/connectTCP
   client for the upstream connection. However, it's not clear to me
   how I would transfer the data from the lineReceived() method of the
   server Protocol to the sendLine() method of the client Protocol,
   since each Protocol can see its own Factory, but not the Factory of
   the other Protocol.


Many thanks for your time, and any assistance afforded!

Ricky



From abe at fettig.net  Tue Jul  5 09:32:48 2005
From: abe at fettig.net (Abe Fettig)
Date: Tue, 05 Jul 2005 09:32:48 -0400
Subject: [Twisted-Python] O'Reilly book on Twisted coming in October
In-Reply-To: <20050704180140.26278.427842379.divmod.quotient.5500@ohm>
References: <20050704180140.26278.427842379.divmod.quotient.5500@ohm>
Message-ID: <42CA8C00.4020308@fettig.net>

glyph at divmod.com wrote:

> Congratulations, Abe!  This is wonderful news.  You know what would be
> better news, though?  My free, autographed copy arriving in the mail ;-)

You got it! Send me your mailing address off-list and I'll see to it
that you get a copy. Same offer goes to any of the other twisted devs
(committers only, sorry but I've got to cut it off somewhere!), on a
first come, first served basis until I use up my free copies.

Abe



From itamar at itamarst.org  Tue Jul  5 09:50:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 05 Jul 2005 09:50:29 -0400
Subject: [Twisted-Python] Questions regarding serviceCollection and
	Interfaces.
In-Reply-To: <491db6c9050705051673b82535@mail.gmail.com>
References: <491db6c9050705051673b82535@mail.gmail.com>
Message-ID: <1120571429.8508.23.camel@localhost.localdomain>

On Tue, 2005-07-05 at 15:16 +0300, kgi wrote:

>    But in this case, it looks like we're actually instantiating an
> interface class.
>    I can't grok what this "means", especially in light of the fact that there
>    is "MultiService" below it that implements IServiceCollection.

This is interface adaptation, see
http://twistedmatrix.com/projects/core/documentation/howto/components.html for an expalantion.

> 3. What do I gain by using a serviceCollection over an application as the
>    serviceParent of a TCPServer? Come to think of it, what did I gain in the
>    first place with setServiceParent()?

Services are setup as a tree; the application is the root of the tree.
Services let you organize your code as pluggable self-contained parts
that get startup and shutdown events. Of course, for a simple TCP server
that doesn't give you much.

> 4. Lastly, there are lots of examples floating around that describe
>    how each Protocol example can reference its own Factory in order for
>    connections to be able to talk to other connections (for example, in
>    the chat server example). However, what approach should I take when I
>    have a single server with multiple Protocols?
> 
>    For example, consider a simple cache: I have a server which accepts
>    TCP connections from lots of clients, and handles queries from
>    these clients. The server actually gets information from an
>    upstream server, but caches the results that it has already seen.
> 
>    In this case in the server I need a Protocol/TCPServer server to
>    handle the multiple clients, and a single Protocol/connectTCP
>    client for the upstream connection. However, it's not clear to me
>    how I would transfer the data from the lineReceived() method of the
>    server Protocol to the sendLine() method of the client Protocol,
>    since each Protocol can see its own Factory, but not the Factory of
>    the other Protocol.

myServerFactory.clientFactory = myClientFactory 
# and now server Protocol instances can do self.factory.clientFactory





From abe at fettig.net  Tue Jul  5 09:53:03 2005
From: abe at fettig.net (Abe Fettig)
Date: Tue, 05 Jul 2005 09:53:03 -0400
Subject: [Twisted-Python] O'Reilly book on Twisted coming in October
In-Reply-To: <c2959a4205070411225176a8e4@mail.gmail.com>
References: <42C97646.3040203@fettig.net>
	<c2959a4205070411225176a8e4@mail.gmail.com>
Message-ID: <42CA90BF.20302@fettig.net>

Sebastian Schulze wrote:
> Whhee, what a good news! I'll definitly buy this one.
> Please inform us when your book is avaiable on amazon.com (or elsewhere).
> 
> I have two questions: Does it cover all the changes done with Twisted 2.0 or
> is it based on a prior version?

It's based on Twisted 2.0.

> Is there a way of getting an autographed version, that would be nice :-)

A lot of people seem to be asking for that :-). I've already promised to
give away my free author's copies to Twisted committers, but I'll try to
figure out a way to make autographed copies available for purchase for
everybody else who wants one.

Thanks for all the enthusiastic comments, everyone! I'm very excited.

Abe



From yanick at iotum.com  Tue Jul  5 12:06:50 2005
From: yanick at iotum.com (Yanick Dufresne)
Date: Tue, 5 Jul 2005 12:06:50 -0400
Subject: [Twisted-Python] Adbapi, cp_reconnect and MySQL
Message-ID: <48C76E56FDD0DF44B6585A82E5DD27AE06B901@iotum-sbs.IotumCorp.local>

Hi all, quick question:

In adbapi's Transaction.reopen:

    def reopen(self):
        if self._connection is None:
            self.reconnect()

        if self._cursor is not None:
            self.close()

        try:
            self._cursor = self._connection.cursor()
            return
        except:
            if not self._pool.reconnect:
                raise

My understand of the goal of cp_reconnect is to ensure that at the
beginning of a query, the connection be re-established if it timed out
since the last query (I understand that trying to reconnect in the
middle of an interaction could potentially have undesired and
unpredictable effects).

The code above seems to assume that self._connection.cursor() will raise
ConnectionLost if the connection has timed out.

My question is two-fold:
1) should it not specifically check for ConnectionLost rather than catch
everything?
2) I don't know about other backends, but MySQL will cheerfully give you
a cursor object whenever you ask for one, and only raises ConnectionLost
when you actually call execute on the cursor, making the code above
completely ineffective. Anyone has a clever solution to this, short of
inserting "            self._cursor.execute(self._pool.good_sql)" in the
try block? That works, but isn't exactly performance friendly...

Any help appreciated,

Yanick Dufresne
Iotum Corporation



From itamar at itamarst.org  Tue Jul  5 17:32:52 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 05 Jul 2005 17:32:52 -0400
Subject: [Twisted-Python] ANN: Coil v0.1, a configuration library
Message-ID: <1120599172.8508.61.camel@localhost.localdomain>

Coil is a configuration language, inspired by some of SmartFrog's
features (http://www.hpl.hp.com/research/smartfrog/papers.htm), aimed at
Python programs in general and Twisted in particular. Coil will at some
point become twisted.coil and form the basis for a new (but, of course,
completely optional) deployment system for Twisted.

You can download it at:
http://itamarst.org/software/coil-0.1.tar.gz

and read the documentation (also in the tarball) at:
http://svn.twistedmatrix.com/cvs/sandbox/itamar/coil/DOC.txt?view=auto&rev=14097

I forgot to add a license file, but it's licensed under same terms as
Twisted itself (i.e. MIT license).

Coil's development was sponsored by my employer, ITA Software (we're
hiring: <http://www.itasoftware.com/careers/>)

-- 
Itamar Shtull-Trauring <itamar at itamarst.org>
http://itamarst.org




From pelzlpj at eecs.umich.edu  Tue Jul  5 21:27:57 2005
From: pelzlpj at eecs.umich.edu (Paul Pelzl)
Date: Tue, 5 Jul 2005 21:27:57 -0400
Subject: [Twisted-Python] resolution failure after upgrade to twisted 2.0
Message-ID: <20050706012757.GW21233@edinburgh.eecs.umich.edu>


Hello,

I maintain a wxPython application that uses Twisted for the networking
back-end.  After upgrading from Twisted 1.3 to 2.0, the application
fails to connect to a given hostname (e.g. "localhost"), although
everything works fine if an explicit IP address is provided.  My
application runs the Twisted loop by polling with a timer, like so:

------------------------------------------------------------------------
class MyApp(wxApp):

   def OnInit(self):
      ...
      EVT_TIMER(self, TIMERID, self.OnTimer)
      self.timer = wxTimer(self, TIMERID)
      self.timer.Start(250, False)
      ...


   def OnTimer(self, event):
      reactor.runUntilCurrent()
      reactor.doIteration(0)


   def connect(self, event=None):
      ...
      reactor.connectTCP(hostname, portNum, MyClientFactory())


reactor.startRunning()
app = MyApp(0)
app.MainLoop()
------------------------------------------------------------------------

Any idea what's going on here?  I suspect this guy is dealing with a
related issue:
http://groups-beta.google.com/group/comp.lang.python/browse_frm/thread/1f0be1d57dfafe1c/2d84c0bc9cd4e4f6

Paul





From exarkun at divmod.com  Tue Jul  5 21:52:29 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 5 Jul 2005 21:52:29 -0400
Subject: [Twisted-Python] resolution failure after upgrade to twisted 2.0
In-Reply-To: <20050706012757.GW21233@edinburgh.eecs.umich.edu>
Message-ID: <20050706015229.26278.328283714.divmod.quotient.6249@ohm>

On Tue, 5 Jul 2005 21:27:57 -0400, Paul Pelzl <pelzlpj at eecs.umich.edu> wrote:
>
>Hello,
>
>I maintain a wxPython application that uses Twisted for the networking
>back-end.  After upgrading from Twisted 1.3 to 2.0, the application
>fails to connect to a given hostname (e.g. "localhost"), although
>everything works fine if an explicit IP address is provided.  My
>application runs the Twisted loop by polling with a timer, like so:
>

Your app doesn't seem to be starting the reactor via the public API.  This is probably causing the threadpool to never be started up.

Twisted 2.0 switched to doing name resolution using the threadpool, since it can block for significant amounts of time.  If the threadpool never starts up, no names will ever be resolvable.

Explicitly installing BlockingResolver or starting up the reactor in a way which starts the threadpool should fix the problem.

Jp



From ww at groovy.net  Tue Jul  5 23:11:52 2005
From: ww at groovy.net (William Waites)
Date: Tue, 5 Jul 2005 23:11:52 -0400
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <C764BA21-F36E-4117-8FA7-23537B071F77@redivi.com>
References: <20050702193724.GB27071@groovy.net>
	<C764BA21-F36E-4117-8FA7-23537B071F77@redivi.com>
Message-ID: <20050706031152.GA17576@groovy.net>

On Sat, Jul 02, 2005 at 10:27:28AM -1000, Bob Ippolito wrote:
> 
> threadedselectreactor (in svn, will be in 2.1) runs the blocking part  
> of the reactor in a separate thread, so you could do blocking PB- 
> based RPC with that..

This seems to work, even just taking that file
and adding it by hand to a 2.0.1 install.

Thanks!

-w



From ww at groovy.net  Tue Jul  5 23:17:32 2005
From: ww at groovy.net (William Waites)
Date: Tue, 5 Jul 2005 23:17:32 -0400
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <1120366160.7846.10.camel@localhost.localdomain>
References: <20050702193724.GB27071@groovy.net>
	<1120366160.7846.10.camel@localhost.localdomain>
Message-ID: <20050706031732.GB17576@groovy.net>

On Sun, Jul 03, 2005 at 12:49:20AM -0400, Itamar Shtull-Trauring wrote:
> On Sat, 2005-07-02 at 15:37 -0400, William Waites wrote:
> 
> > Because of the way Yate deals with
> > threads and signals, it seems to be hard to get a twisted
> > reactor to run inside the embedded interpreter.
> 
> reactor.run(installSignalHandlers=False) may fix that.

Hmmm. I tried that, but then the reactor stalls. No
reactor.callLater's actually seem to get called...

-w



From foom at fuhm.net  Wed Jul  6 00:29:53 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 6 Jul 2005 00:29:53 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <ABE552E5-22C4-4122-9E58-CA94A2A3867D@fuhm.net>

Bug summary
______________________
Since 2005-06-30 00:55:46.390000:
Bugs opened: 8   Bugs closed: 6   Total open bugs: 398 (+2)
   Urgent: 9 (+0)
   Bug: 170 (+2)
   Feature: 143 (+0)
   Wish: 76 (+0)

New / Reopened Bugs
______________________
                     ==== Bug ====
TypeError in Failure.raiseException when using  
defer.deferredGenerator and perspective broker  (8 hours ago)
        http://twistedmatrix.com/bugs/issue1103 opened by titty

[PB] _Dereferences showing up in cyclic data structures with pb,  
jelly, and Cacheable  (5 days ago)
        http://twistedmatrix.com/bugs/issue1102 opened by phenyx

twisted-bugs list is broken  (6 days ago)
        http://twistedmatrix.com/bugs/issue1101 opened by exarkun

Bugs Closed
______________________
                     ==== Bug ====
internet.py: self._port.stopListening() should check that self._port  
exists  (2 weeks ago)
        http://twistedmatrix.com/bugs/issue1088 opened by loic,  
closed by exarkun




From therve at free.fr  Wed Jul  6 04:18:23 2005
From: therve at free.fr (Thomas HERVE)
Date: Wed, 06 Jul 2005 10:18:23 +0200
Subject: [Twisted-Python] File Transfer/BitTorrent
Message-ID: <20050706101823.34qo14yhlj5wgkoo@itchy.wasabout.net>

Hi all,

I've seen a lot of threads talking around my problem but haven't found what I
was looking for.

My need : I want to have a file transfer application, with the following
functionnalities (for now) :
- Transfer from 1 to N
- Integrity control
- Failover/Resume
- Handle big files (up to 5Gb)
- Strong authentication/encryption (with client certificates)
- Automatic actions when upload/download finished

FTP is not really a possibility (mainly because of the nasty network
configuration it needs).

My first thought was : hey, it looks like BitTorrent could fit my needs, just a
little SSL could make it. Unfortunately, after some tests, I realized that the
reference implementation of BitTorrent is really messy : plugging a SSL part is
a challenge, resulting in something not so great. BitTornado is cleaner, but
also lacks documentation (yes, more than twisted !).

So why not implement BitTorrent with Twisted ? It could be something great for
the Twisted visibility. But as I don't care about BitTorrent compatibility, it
might be better to start a new protocol from scratch.

So :

1) Is there some people interested in BitTorrent client/server with Twisted ?

2) If not, does a draft/standard exist of good file transfer protocol, that
could be done with Twisted ?

Thanks for your opinions,

-- 
Thomas



From nkeric at gmail.com  Wed Jul  6 06:45:34 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Wed, 6 Jul 2005 18:45:34 +0800
Subject: [Twisted-Python] Can I get the interface's IP addr from where the
	datagram is received?
Message-ID: <43c0d2b5050706034524cffa8a@mail.gmail.com>

Hi all,

I'm writting a udp server which may have multiple instances listening
on multiple network interfaces, I need to get the network interface's
address when datagrame received:

class MyUdpServer(DatagramProtocol):
    def datagramReceived(self, data, addr):
        print "The client's addr is", addr
        print "My addr is", ???

How can I retrieve the IP?
Thanks in advance!

- Eric



From iacovou at gmail.com  Wed Jul  6 10:18:53 2005
From: iacovou at gmail.com (kgi)
Date: Wed, 6 Jul 2005 17:18:53 +0300
Subject: [Twisted-Python] Questions regarding serviceCollection and
	Interfaces.
In-Reply-To: <1120571429.8508.23.camel@localhost.localdomain>
References: <491db6c9050705051673b82535@mail.gmail.com>
	<1120571429.8508.23.camel@localhost.localdomain>
Message-ID: <200507061718.53389.iacovou@gmail.com>

On Tuesday 05 July 2005 16:50, Itamar Shtull-Trauring wrote:
> On Tue, 2005-07-05 at 15:16 +0300, kgi wrote:
> >    I can't grok what this "means", especially in light of the fact that
> > there is "MultiService" below it that implements IServiceCollection.
>
> This is interface adaptation, see
> http://twistedmatrix.com/projects/core/documentation/howto/components.html
> for an expalantion.

Thanks for your answer, Itamar.

I've read the information at the link, and I think I've moved a few rungs up 
the grokking ladder now. I had previously read the Zope Interface 
introduction at:

  http://svn.zope.org/Zope3/trunk/src/zope/interface/README.txt?view=markup

but this mostly just talks about the relationship between interfaces and 
objects (i.e. lots of .providedBy() and implementedBy() examples), and 
doesn't touch interface adaptation and components.

I do have one question arising from the Zope documentation, though. In the 
link above, it says (abridged):

"""
class IFoo(zope.interface.Interface):
    def bar(q, r=None):
        """bar blah blah"""
[...]
  Note that `bar` doesn't take a `self` argument.  Interfaces document
  how an object is *used*.  When calling instance methods, you don't
  pass a `self` argument, so a `self` argument isn't included in the
  interface signature.
"""

Yet all the examples I've seen in the Twisted documentation have interface 
methods that contain "self" parameters; for example, from the link you sent 
me:

from zope.interface import Interface

class IAmericanSocket(Interface):
    def voltage(self):
      """Return the voltage produced by this socket object, as an integer.
      """

Is this simply a cosmetic thing (i.e. no code actually looks at the function 
signature) or is the Zope Interface documentation out of date or wrong?

> > 3. What do I gain by using a serviceCollection over an application as the
> >    serviceParent of a TCPServer? Come to think of it, what did I gain in
> > the first place with setServiceParent()?
>
> Services are setup as a tree; the application is the root of the tree.
> Services let you organize your code as pluggable self-contained parts
> that get startup and shutdown events. Of course, for a simple TCP server
> that doesn't give you much.

Got you, thanks.

> >    In this case in the server I need a Protocol/TCPServer server to
> >    handle the multiple clients, and a single Protocol/connectTCP
> >    client for the upstream connection. However, it's not clear to me
> >    how I would transfer the data from the lineReceived() method of the
> >    server Protocol to the sendLine() method of the client Protocol,
> >    since each Protocol can see its own Factory, but not the Factory of
> >    the other Protocol.
>
> myServerFactory.clientFactory = myClientFactory
> # and now server Protocol instances can do self.factory.clientFactory

OK, so it's as simple as just boshing in a new attribute. I guess I had got so 
hung up on not understanding the "service" stuff previously I was convinced 
the right way to access other Factories was via the serviceCollection.

Again, thanks for your answer.

Ricky

P.S. I took so long in answering because I wanted to be able to answer 
maintaining the original message threading information (I know some people 
get really upset when you break threading), which eventually meant setting up 
a separate postfix server just for outgoing gmail email.

If anyone has any information on either (1) getting a single postfix instance 
to work with multiple relayhosts for multiple "identities", or (2) 
configuring kmail to send directly to gmail over TLS, I'd love to hear how 
you did it. I found lots of generic configuration info for kmail, but I 
couldn't get kmail to manage it whatever I did.



From tv at twistedmatrix.com  Wed Jul  6 11:21:26 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 06 Jul 2005 18:21:26 +0300
Subject: [Twisted-Python] Can I get the interface's IP addr from where
	the	datagram is received?
In-Reply-To: <43c0d2b5050706034524cffa8a@mail.gmail.com>
References: <43c0d2b5050706034524cffa8a@mail.gmail.com>
Message-ID: <42CBF6F6.2000306@twistedmatrix.com>

Eric Hsu wrote:
> I'm writting a udp server which may have multiple instances listening
> on multiple network interfaces, I need to get the network interface's
> address when datagrame received:
> 
> class MyUdpServer(DatagramProtocol):
>     def datagramReceived(self, data, addr):
>         print "The client's addr is", addr
>         print "My addr is", ???
> 
> How can I retrieve the IP?
> Thanks in advance!

Assumption: you really need to know the address the packet was sent to,
and not just "(one of) my IP address(es)".

1) the portable, ugly way: iterate all local addresses, bind to each
separately, map socket fd -> IP address when receiving. Note that
modern OSes allow more than one address per interface. Sucks a lot
if anything changes during runtime, too.

2) the Linux-specific, nice way: see IP_PKTINFO in ip(7), recvmsg(2),
cmsg(3), etc. For python, use eunuchs.recvmsg, see
http://www.inoi.fi/open/trac/eunuchs



From itamar at itamarst.org  Wed Jul  6 11:51:37 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 06 Jul 2005 11:51:37 -0400
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <20050706031732.GB17576@groovy.net>
References: <20050702193724.GB27071@groovy.net>
	<1120366160.7846.10.camel@localhost.localdomain>
	<20050706031732.GB17576@groovy.net>
Message-ID: <1120665097.8537.28.camel@localhost.localdomain>

On Tue, 2005-07-05 at 23:17 -0400, William Waites wrote:

> > reactor.run(installSignalHandlers=False) may fix that.
> 
> Hmmm. I tried that, but then the reactor stalls. No
> reactor.callLater's actually seem to get called...

That's how it's supposed to work: reactor.run() doesn't exit until you
stop the reactor. You need to setup scheduled calls before running the
reactor.




From itamar at itamarst.org  Wed Jul  6 11:53:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 06 Jul 2005 11:53:32 -0400
Subject: [Twisted-Python] Questions regarding serviceCollection and
	Interfaces.
In-Reply-To: <200507061718.53389.iacovou@gmail.com>
References: <491db6c9050705051673b82535@mail.gmail.com>
	<1120571429.8508.23.camel@localhost.localdomain>
	<200507061718.53389.iacovou@gmail.com>
Message-ID: <1120665212.8537.30.camel@localhost.localdomain>

On Wed, 2005-07-06 at 17:18 +0300, kgi wrote:

> Is this simply a cosmetic thing (i.e. no code actually looks at the function 
> signature) or is the Zope Interface documentation out of date or wrong?

Our code is wrong and needs the self removed; in practice though the
methods on interfaces only serve as documentation, so it doesn't
actually matter.





From ww at groovy.net  Wed Jul  6 12:11:43 2005
From: ww at groovy.net (William Waites)
Date: Wed, 6 Jul 2005 12:11:43 -0400
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <1120665097.8537.28.camel@localhost.localdomain>
References: <20050702193724.GB27071@groovy.net>
	<1120366160.7846.10.camel@localhost.localdomain>
	<20050706031732.GB17576@groovy.net>
	<1120665097.8537.28.camel@localhost.localdomain>
Message-ID: <20050706161143.GJ17576@groovy.net>

On Wed, Jul 06, 2005 at 11:51:37AM -0400, Itamar Shtull-Trauring wrote:
> On Tue, 2005-07-05 at 23:17 -0400, William Waites wrote:
> 
> > > reactor.run(installSignalHandlers=False) may fix that.
> > 
> > Hmmm. I tried that, but then the reactor stalls. No
> > reactor.callLater's actually seem to get called...
> 
> That's how it's supposed to work: reactor.run() doesn't exit until you
> stop the reactor. You need to setup scheduled calls before running the
> reactor.

I understand that. I had set up a couple of reactor.callLater's
before calling reactor.run(). They just don't actually seem to
get run.

For actual operation, control passes from a thread in the 
C++ method TelEngine::MessageHandler::received(Message &m)
to a python function softswitch.message(m) which then calls
into the reactor using callFromThread. Bit I'm not quite
there yet, first step was to get the reactor running, which
seems to work with threadedselectreactor.

Incidentally, I am running the standard reactor like so in
the block of code that runs when the Yate module is imported
after it initializes the interpreter:

from threading import Thread
t = Thread(target = reactor.run, kwargs = {'installSignalHandlers' : False})
t.start()

This is necessary because the Yate module's initialization 
method is expected to return. But is this expected to work
in your experience?

Alternatively the Yate module could run the main interpreter in
a separate thread itself that is not expected to return. This
is what the (corresponding) asterisk module does. That might be the
best way, but then it assumes a main-thread function in python
does not return, which is a nuisance if you want to do something
in the python module without using twisted.

-w



From foom at fuhm.net  Wed Jul  6 12:29:03 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 6 Jul 2005 12:29:03 -0400
Subject: [Twisted-Python] Questions regarding serviceCollection and
	Interfaces.
In-Reply-To: <200507061718.53389.iacovou@gmail.com>
References: <491db6c9050705051673b82535@mail.gmail.com>
	<1120571429.8508.23.camel@localhost.localdomain>
	<200507061718.53389.iacovou@gmail.com>
Message-ID: <6B638BAE-8EFE-4BDD-B51D-9B81DB0C5A08@fuhm.net>

On Jul 6, 2005, at 10:18 AM, kgi wrote:
> I do have one question arising from the Zope documentation, though.  
> In the
> link above, it says (abridged):
>
> """
> class IFoo(zope.interface.Interface):
>     def bar(q, r=None):
>         """bar blah blah"""
> [...]
>   Note that `bar` doesn't take a `self` argument.  Interfaces document
>   how an object is *used*.  When calling instance methods, you don't
>   pass a `self` argument, so a `self` argument isn't included in the
>   interface signature.
> """
>
> Yet all the examples I've seen in the Twisted documentation have  
> interface
> methods that contain "self" parameters



Twisted hasn't always used Zope Interfaces -- we used to have our  
own. In our implementation, we *did* use self as the first argument.  
Thus, the general rule is, if you inherit from  
twisted.python.components.Interface (our backwards compatibility  
wrapper), you should follow our rule and include self as the first  
argument. However, if you inherit directly from  
zope.interface.Interface, you should follow zope's rule and not  
include self.

That said, the signature isn't really used for anything at the  
moment. I've played around with an interface enforcement wrapper that  
does use the signature, but that's just playing around at the moment.

James



From milan at datagate.net.uk  Wed Jul  6 13:43:56 2005
From: milan at datagate.net.uk (Milan Avramovic)
Date: Wed, 6 Jul 2005 18:43:56 +0100
Subject: [Twisted-Python] SuxElementStream error
Message-ID: <200507061843.57134.milan@datagate.net.uk>

Hi,

I've got a problem with Twisted, and I haven't seen it mentioned on the list 
in the last year (some sort of search would definitely help tho...)

Anyway, when trying to run PyMSNt jabber transport, I get following error:

File "/usr/inet/jabberd/PyMSNt-0.9.3/src/utils.py", line 97, in parseString
    es = SuxElementStream()
TypeError: 'NoneType' object is not callable


Now, on PyMSNt some people started talking about missing libraries, so here's 
the question: 

Which libraries does Twisted rely upon?

I've got a Solaris box, manually patched up, so concrete library names will be 
much appreciated. Also, I've manually compiled python 2.4.1, however whole 
python build process seems to just swallow errors, so I'm a bit miffed here.

All help appreciated.


-- 
Kind regards,

Milan Avramovic, System Engineer
DataGate - http://www.DataGate.co.uk
Tel: +44 8700 119090, Fax: +44 8700 119080

____________________________________________________

This email is confidential and intended solely for the use of the
individual to whom it is addressed. Any views or opinions presented are
solely those of the author and do not necessarily represent those of
DataGate Network Solutions Ltd.

If you're not the intended recipient, be advised that you have received
this email in error and that any use, dissemination, forwarding,
printing, or copying of this email is strictly prohibited. If you have
received this email in error please notify the sender by telephone on
+44 (0)8700 11 90 90



From pp64 at codelock.com  Wed Jul  6 17:33:36 2005
From: pp64 at codelock.com (Pavel Pergamenshchik)
Date: Wed, 6 Jul 2005 14:33:36 -0700
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <20050706161143.GJ17576@groovy.net>
References: <20050702193724.GB27071@groovy.net>
	<1120366160.7846.10.camel@localhost.localdomain>
	<20050706031732.GB17576@groovy.net>
	<1120665097.8537.28.camel@localhost.localdomain>
	<20050706161143.GJ17576@groovy.net>
Message-ID: <20050706143336.59812c91@dunce>

On Wed, 6 Jul 2005 12:11:43 -0400
William Waites <ww at groovy.net> wrote:

> On Wed, Jul 06, 2005 at 11:51:37AM -0400, Itamar Shtull-Trauring
wrote:
> > On Tue, 2005-07-05 at 23:17 -0400, William Waites wrote:
> > 
> > > > reactor.run(installSignalHandlers=False) may fix that.
> > > 
> > > Hmmm. I tried that, but then the reactor stalls. No
> > > reactor.callLater's actually seem to get called...
> > 
> > That's how it's supposed to work: reactor.run() doesn't exit until
you
> > stop the reactor. You need to setup scheduled calls before running
the
> > reactor.
> 
> I understand that. I had set up a couple of reactor.callLater's
> before calling reactor.run(). They just don't actually seem to
> get run.
> 
> For actual operation, control passes from a thread in the 
> C++ method TelEngine::MessageHandler::received(Message &m)
> to a python function softswitch.message(m) which then calls
> into the reactor using callFromThread. Bit I'm not quite
> there yet, first step was to get the reactor running, which
> seems to work with threadedselectreactor.

Please make sure you understand how to use threadedselectreactor.
Specifically, you should not call run() on it. You are supposed to call
reactor.interleave(func), where func is your waker function. You _must_
do that or threadedselectreactor will not work. See the examples in
Twisted/doc/core/examples/threadedselect.



From nkeric at gmail.com  Wed Jul  6 22:44:30 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Thu, 7 Jul 2005 10:44:30 +0800
Subject: [Twisted-Python] Can I get the interface's IP addr from where the
	datagram is received?
In-Reply-To: <42CBF6F6.2000306@twistedmatrix.com>
References: <43c0d2b5050706034524cffa8a@mail.gmail.com>
	<42CBF6F6.2000306@twistedmatrix.com>
Message-ID: <43c0d2b5050706194445f5579d@mail.gmail.com>

2005/7/6, Tommi Virtanen <tv at twistedmatrix.com>:
> Assumption: you really need to know the address the packet was sent to,
> and not just "(one of) my IP address(es)".

Hi Tommi, thank you for your reply!

I'm having my server running on a machine which has two ethernet
interfaces, one has an intranet ip address like "192.168.3.4", another
one has a public internet ip address like "202.71.3.4".

I want my server to provide public services to the outside. One of its
function is to allocate some ports for the clients, once the
allocation has been done, the server has to send back an address pair
(ip:port) to the client.

I have written a method:

def getServerIP():
    return socket.getaddrinfo(socket.gethostname(), None)[0][4][0]

It worked properly several days ago and returned me the public address
(202.71.3.4) of that machine, however, yesterday, it kept returning
the intranet address (192.168.3.4) which was useless for the clients
on the internet. I can't figure out why...

I've tried to use the self.transport.getHost(), however, the result
was something like this: IPv4Address(UDP, '0.0.0.0', 6677). What's
wrong with this method?

Is it so hard to know the ip address from which the data my server received?

I'm very new to twisted and not a native english speaker, so please
bear with me :p


- Eric



From andrea at cpushare.com  Thu Jul  7 08:22:56 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 7 Jul 2005 14:22:56 +0200
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
Message-ID: <20050707122256.GV3731@g5.random>

Hello,

I wrote the below code in my server:

from twisted.python import log

# local
from cpushare.mail import send_exception

class cpushare_logging_observer_class(object):
	def __init__(self, factory):
		self.factory = factory
	def start(self):
		if self.factory.production:
			log.addObserver(self.emit)
	def stop(self):
		if self.factory.production:
			log.removeObserver(self.emit)
	def emit(self, eventDict):
		edm = eventDict['message']
		if not edm:
			if eventDict['isError'] and eventDict.has_key('failure'):
				send_exception(eventDict['failure'])

to receive exceptions by email like the below if (send_exception sends me
an sms for the very first exception too). I do a very similar thing in
nevow, but in nevow I handle it through the nevow layer, not through
twisted.

Now to me it seems that the below exception isn't really interesting to
me, any client could generate it by injecting garbage in the ssl
connection.

Does anybody has suggestions on the best way to filter out all
OpenSSL.SSL.Error exceptions before calling send_exception in the above
code? Thanks!

(twisted is great ;)

----- Forwarded message from cpushare at cpushare.com -----

Date: Thu,  7 Jul 2005 14:14:08 +0200 (CEST)
From: cpushare at cpushare.com
To: andrea.kernel at tiscali.it
Subject: CPUShare Exception
X-Mailbox-Line: From nobody Thu Jul  7 14:14:07 2005

Traceback (most recent call last):
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/python/log.py", line 43, in callWithContext
    
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/python/context.py", line 59, in callWithContext
    
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/python/context.py", line 37, in callWithContext
    
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/internet/pollreactor.py", line 160, in _doReadOrWrite
    
--- <exception caught here> ---
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/internet/tcp.py", line 111, in doRead
    
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/internet/tcp.py", line 339, in doRead
    
OpenSSL.SSL.Error: [('SSL routines', 'SSL3_READ_BYTES', 'ssl handshake failure')]

----- End forwarded message -----



From glyph at divmod.com  Thu Jul  7 08:44:04 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 7 Jul 2005 08:44:04 -0400
Subject: [Twisted-Python] File Transfer/BitTorrent
In-Reply-To: <20050706101823.34qo14yhlj5wgkoo@itchy.wasabout.net>
Message-ID: <20050707124404.26278.1921372994.divmod.quotient.7103@ohm>



On Wed, 06 Jul 2005 10:18:23 +0200, Thomas HERVE <therve at free.fr> wrote:

>1) Is there some people interested in BitTorrent client/server with Twisted ?

I'm sure lots of people would be interested in a bittorrent protocol implementation for Twisted :).  I know of at least 2 aborted attempts; I don't know if either ever produced any code.

>2) If not, does a draft/standard exist of good file transfer protocol, that
>could be done with Twisted ?

Personally I'm writing a different file-transfer protocol which might meet your requirements; it's called "sigma" and it's going to be based on a lower-level peer-to-peer system called Q2Q.  Watch this space: 
http://divmod.org/projects/q2q
for more information in the next couple of days.




From glyph at divmod.com  Thu Jul  7 08:48:59 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 7 Jul 2005 08:48:59 -0400
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
In-Reply-To: <20050707122256.GV3731@g5.random>
Message-ID: <20050707124859.26278.1398928648.divmod.quotient.7106@ohm>



On Thu, 7 Jul 2005 14:22:56 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:

>Does anybody has suggestions on the best way to filter out all
>OpenSSL.SSL.Error exceptions before calling send_exception in the above
>code? Thanks!

It seems like you might want to filter more than just OpenSSL.SSL.Error ;).  eventDict['failure'] is a twisted.python.failure.Failure object; see the API docs or the code for that class for details on introspecting them (they're designed to be easier to introspect than Python tuples).

For your particular request:

if not eventDict['failure'].check(OpenSSL.SSL.Error):
 send_exception(...)




From andrea at cpushare.com  Thu Jul  7 10:23:13 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 7 Jul 2005 16:23:13 +0200
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
In-Reply-To: <20050707124859.26278.1398928648.divmod.quotient.7106@ohm>
References: <20050707122256.GV3731@g5.random>
	<20050707124859.26278.1398928648.divmod.quotient.7106@ohm>
Message-ID: <20050707142313.GD8436@g5.random>

On Thu, Jul 07, 2005 at 08:48:59AM -0400, glyph at divmod.com wrote:
> It seems like you might want to filter more than just OpenSSL.SSL.Error ;). 

very likely ;), but I guess I can wait until some harmless annoyance
trigger like in this case.

The number of emails the server sends me has a maximum of 10, to avoid
getting the same exception too many times (and the max number of sms is
1). So even something goes wrong and I'm on vacation I don't risk to
fill the inbox ;)

> eventDict['failure'] is a twisted.python.failure.Failure object; see the 
> API docs or the code for that class for details on introspecting them 
> (they're designed to be easier to introspect than Python tuples).
> 
> For your particular request:
> 
> if not eventDict['failure'].check(OpenSSL.SSL.Error):
> send_exception(...)

cool, I updated it like this.

from OpenSSL import SSL
from twisted.python import log

# local
from cpushare.mail import send_exception

class cpushare_logging_observer_class(object):
	def __init__(self, factory):
		self.factory = factory
	def start(self):
		if self.factory.production:
			log.addObserver(self.emit)
	def stop(self):
		if self.factory.production:
			log.removeObserver(self.emit)
	def emit(self, eventDict):
		edm = eventDict['message']
		if not edm:
			if eventDict['isError'] and eventDict.has_key('failure'):
				failure = eventDict['failure']
				if not failure.check(SSL.Error):
					send_exception(failure)

Thanks.



From glyph at divmod.com  Thu Jul  7 10:42:12 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 7 Jul 2005 10:42:12 -0400
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
In-Reply-To: <20050707142313.GD8436@g5.random>
Message-ID: <20050707144212.26278.317575382.divmod.quotient.7154@ohm>



On Thu, 7 Jul 2005 16:23:13 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>On Thu, Jul 07, 2005 at 08:48:59AM -0400, glyph at divmod.com wrote:
>> It seems like you might want to filter more than just OpenSSL.SSL.Error ;).
>
>very likely ;), but I guess I can wait until some harmless annoyance
>trigger like in this case.
>
>The number of emails the server sends me has a maximum of 10, to avoid
>getting the same exception too many times (and the max number of sms is
>1). So even something goes wrong and I'm on vacation I don't risk to
>fill the inbox ;)

Rather than a simple counter, why not hash tracebacks so they are not sent more than once?  For example:

from twisted.python.failure import Failure
import sha

def a(): b()
def b(): c()
def c(): raise RuntimeError()

def fail():
    try:
        a()
    except:
        return Failure()

def fhash(f):
    return sha.new(
        f.getTraceback(elideFrameworkCode=1, detail='brief')).digest()

f1 = fail()
f2 = fail()

print fhash(f1) == fhash(f2)



From exarkun at divmod.com  Thu Jul  7 11:06:51 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 7 Jul 2005 11:06:51 -0400
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
In-Reply-To: <20050707144212.26278.317575382.divmod.quotient.7154@ohm>
Message-ID: <20050707150651.26278.1975198363.divmod.quotient.7165@ohm>

On Thu, 7 Jul 2005 10:42:12 -0400, glyph at divmod.com wrote:
>
>
>On Thu, 7 Jul 2005 16:23:13 +0200, Andrea Arcangeli <andrea at cpushare.com> 
>wrote:
>>On Thu, Jul 07, 2005 at 08:48:59AM -0400, glyph at divmod.com wrote:
>>>It seems like you might want to filter more than just OpenSSL.SSL.Error 
>>>;).
>>
>>very likely ;), but I guess I can wait until some harmless annoyance
>>trigger like in this case.
>>
>>The number of emails the server sends me has a maximum of 10, to avoid
>>getting the same exception too many times (and the max number of sms is
>>1). So even something goes wrong and I'm on vacation I don't risk to
>>fill the inbox ;)
>
>Rather than a simple counter, why not hash tracebacks so they are not sent 
>more than once?  For example:

This tends to work poorly for most tracebacks.  As soon as you have one that contains an object with a default repr, the ID section makes each hash different.

When I did this, I settled on hashing just the qual of the exception class and the brief string (failure.getErrorMessage()) version of it.  This has a similar problem, but seems to work ok in practice.

Jp



From tom.cocagne at gmail.com  Thu Jul  7 13:48:57 2005
From: tom.cocagne at gmail.com (Tom Cocagne)
Date: Thu, 7 Jul 2005 13:48:57 -0400
Subject: [Twisted-Python] Twisted communication with embedded C thread
Message-ID: <198edda9050707104832cd69f9@mail.gmail.com>

   Greetings all,

    I was wondering if anyone has suggestions for a good way to go
about setting up a message-passing communication channel between one
or more C threads and a single thread dedicated to running
Python/Twisted. I already have functional Python bindings accessing
the contents of the messages (basically C structures) but need some
way to exchange the messages between the C threads and the Python
thread.

    All I really need is a means by which to inform Twisted's reactor
that a C thread has sent a message.  My original plan was to use a
pair of pipes (via os.pipe()) to send pointers back and forth but it
didn't seem to work on Windows . I'm pretty sure this will work fine
for posix systems but it definitely didn't work on my first attempt
with Windows (though the problem may have been due to my library
configuration).

    I would imagine that something along these lines has been done
before. Does anyone know of an existing approach or have suggestions
for a better solution?

    Extra Details:
      I'm using Python 2.4.1, Twisted 2.0, and GLib 2.6

    Cheers,

    Tom



From itamar at itamarst.org  Thu Jul  7 14:02:12 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 07 Jul 2005 14:02:12 -0400
Subject: [Twisted-Python] Twisted communication with embedded C thread
In-Reply-To: <198edda9050707104832cd69f9@mail.gmail.com>
References: <198edda9050707104832cd69f9@mail.gmail.com>
Message-ID: <1120759332.8139.44.camel@localhost.localdomain>

On Thu, 2005-07-07 at 13:48 -0400, Tom Cocagne wrote:

>     I was wondering if anyone has suggestions for a good way to go
> about setting up a message-passing communication channel between one
> or more C threads and a single thread dedicated to running
> Python/Twisted. I already have functional Python bindings accessing
> the contents of the messages (basically C structures) but need some
> way to exchange the messages between the C threads and the Python
> thread.

Any reason you're using threads? You can run Twisted directly on the
glib event loop, so your whole program could run on the same loop.

In any case, Switching data from Twisted to C is just like passing data
from any Python program to C code: call a C extension function from
Python that calls into C code, and for reverse call a Python function
from C code. Thread safety is mostly orthogonal, so you can probably use
the standard Twisted reactor.callFromThread to have code run in the
Twisted thread.




From bob at redivi.com  Thu Jul  7 14:18:12 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 7 Jul 2005 08:18:12 -1000
Subject: [Twisted-Python] Twisted communication with embedded C thread
In-Reply-To: <198edda9050707104832cd69f9@mail.gmail.com>
References: <198edda9050707104832cd69f9@mail.gmail.com>
Message-ID: <3FCABFF0-42F9-4F44-838A-8426FDF007B6@redivi.com>


On Jul 7, 2005, at 7:48 AM, Tom Cocagne wrote:

>     I was wondering if anyone has suggestions for a good way to go
> about setting up a message-passing communication channel between one
> or more C threads and a single thread dedicated to running
> Python/Twisted. I already have functional Python bindings accessing
> the contents of the messages (basically C structures) but need some
> way to exchange the messages between the C threads and the Python
> thread.
>
>     All I really need is a means by which to inform Twisted's reactor
> that a C thread has sent a message.  My original plan was to use a
> pair of pipes (via os.pipe()) to send pointers back and forth but it
> didn't seem to work on Windows . I'm pretty sure this will work fine
> for posix systems but it definitely didn't work on my first attempt
> with Windows (though the problem may have been due to my library
> configuration).
>
>     I would imagine that something along these lines has been done
> before. Does anyone know of an existing approach or have suggestions
> for a better solution?

Acquire the GIL, call reactor.callFromThread, release the GIL.

-bob




From ww at groovy.net  Thu Jul  7 14:19:50 2005
From: ww at groovy.net (William Waites)
Date: Thu, 7 Jul 2005 14:19:50 -0400
Subject: [Twisted-Python] Twisted communication with embedded C thread
In-Reply-To: <198edda9050707104832cd69f9@mail.gmail.com>
References: <198edda9050707104832cd69f9@mail.gmail.com>
Message-ID: <20050707181950.GK1197@groovy.net>

On Thu, Jul 07, 2005 at 01:48:57PM -0400, Tom Cocagne wrote:
> 
>     All I really need is a means by which to inform Twisted's reactor
> that a C thread has sent a message.  My original plan was to use a
> pair of pipes (via os.pipe()) to send pointers back and forth but it
> didn't seem to work on Windows . I'm pretty sure this will work fine
> for posix systems but it definitely didn't work on my first attempt
> with Windows (though the problem may have been due to my library
> configuration).

#define MY_MODULE "foo.bar"
#define MY_FUNCTION "handle_message"

void send_message_to_python(message_t *message)
{
      PyObject *module_name, *module, *dict, *func, *args, *pymessage;

      module_name = PyString_FromString(MY_MODULE);
      module = PyImport_Import(module_name);
      dict = PyModule_GetDict(module)
      func = PyDict_GetItemString(MY_FUNCTION);

      args = PyTuple_New(1)
      pymessage = MyPythonWrappedMessage_New(message);
      PyTuple_SetItem(args, 0, pymessage);

      PyObject_CallObject(func, args);
}

(with appropriate error checking, of course)

This has the effect of doing

      from foo.bar import handle_message
      handle_message(m)

I'm not at all sure what would happen on Windows. I suppose this would
work there too.

But you also need to run the reactor, I guess which might be easier or
harder depending on the behaviour of the C program. The simplest way
is just to start a C thread and do the equivalent of the above for

	from twisted.internet import reactor
	reactor.run()

-w



From ww at groovy.net  Thu Jul  7 14:24:48 2005
From: ww at groovy.net (William Waites)
Date: Thu, 7 Jul 2005 14:24:48 -0400
Subject: [Twisted-Python] Twisted communication with embedded C thread
In-Reply-To: <3FCABFF0-42F9-4F44-838A-8426FDF007B6@redivi.com>
References: <198edda9050707104832cd69f9@mail.gmail.com>
	<3FCABFF0-42F9-4F44-838A-8426FDF007B6@redivi.com>
Message-ID: <20050707182448.GL1197@groovy.net>

On Thu, Jul 07, 2005 at 08:18:12AM -1000, Bob Ippolito wrote:
> 
> Acquire the GIL, call reactor.callFromThread, release the GIL.

Yeah, that too...

-w



From therve at free.fr  Thu Jul  7 16:10:47 2005
From: therve at free.fr (Thomas HERVE)
Date: Thu, 07 Jul 2005 22:10:47 +0200
Subject: [Twisted-Python] File Transfer/BitTorrent
In-Reply-To: <20050707124404.26278.1921372994.divmod.quotient.7103@ohm>
References: <20050707124404.26278.1921372994.divmod.quotient.7103@ohm>
Message-ID: <20050707221047.cuayi4stvdsg8w80@itchy.wasabout.net>

{Sorry glyph, reply-to ignored by f***** mail client]

Quoting glyph at divmod.com:
>> 1) Is there some people interested in BitTorrent client/server with 
>> Twisted ?
>
> I'm sure lots of people would be interested in a bittorrent protocol 
> implementation for Twisted :).  I know of at least 2 aborted 
> attempts; I don't know if either ever produced any code.

I don't know if it's good news or not... I don't have time to make it 
alone from
scratch, so any piece of code would be welcome.

>> 2) If not, does a draft/standard exist of good file transfer protocol, that
>> could be done with Twisted ?
>
> Personally I'm writing a different file-transfer protocol which might 
> meet your requirements; it's called "sigma" and it's going to be 
> based on a lower-level peer-to-peer system called Q2Q.  Watch this 
> space: http://divmod.org/projects/q2q
> for more information in the next couple of days.

It seems really promising ! I really enjoyed your slides :). I had a 
quick look
at q2q code and it seems pretty evolved yet. I'll try further in the 
next days,
if you need help (tests ?) I'm your man.

-- 
Thomas






From tom.cocagne at gmail.com  Thu Jul  7 16:18:35 2005
From: tom.cocagne at gmail.com (Tom Cocagne)
Date: Thu, 7 Jul 2005 16:18:35 -0400
Subject: [Twisted-Python] Twisted communication with embedded C thread
In-Reply-To: <1120759332.8139.44.camel@localhost.localdomain>
References: <198edda9050707104832cd69f9@mail.gmail.com>
	<1120759332.8139.44.camel@localhost.localdomain>
Message-ID: <198edda90507071318e93aaa7@mail.gmail.com>

    Thanks for the quick response guys. 

    A bit more of a description of what I'm working on may help.
Basically, I'm working on building a coordination library for use in
programs taking part in a distributed simulation. The simulations
themselves are written primarily in C++, run on a bunch of different
platforms, and are often optomized to use the specific hardware
they're running on top of (C-threads locked to specific CPUs, arcane
compiler flags, the whole shebang). The Python/Twisted side handles
all the high-level coordination stuff while the C++ code focuses on
numerics.

    As the library is supposed to be as generic as possible, I can't
make too many assumptions about how threading will be handled in any
particular application. So to keep things simple I'm creating a single
thread that is dedicated to running the Python interpreter and
allowing only that thread to touch the interpreter.

    I looked into the code for reactor.callFromThread that y'all
mentioned and it looks like the implementation for it exactly answers
the question I've been trying to ask. On posix systems the reactor's
'waker' is implemented as a pair of pipes and on Win32 systems it's
implemented as a pair of sockets. So it appears that my original
approach will work except that on Win32 systems I'll just have to use
a socket rather than a pipe.

    Thanks for the help,

    Tom

    BTW Itamar, I took a look at the SmartFrog/Coil documentation you
sent out yesterday and it looks very promising. Do you have any sort
of roadmap/timeline for Coil?

On 7/7/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> On Thu, 2005-07-07 at 13:48 -0400, Tom Cocagne wrote:
> 
> >     I was wondering if anyone has suggestions for a good way to go
> > about setting up a message-passing communication channel between one
> > or more C threads and a single thread dedicated to running
> > Python/Twisted. I already have functional Python bindings accessing
> > the contents of the messages (basically C structures) but need some
> > way to exchange the messages between the C threads and the Python
> > thread.
> 
> Any reason you're using threads? You can run Twisted directly on the
> glib event loop, so your whole program could run on the same loop.
> 
> In any case, Switching data from Twisted to C is just like passing data
> from any Python program to C code: call a C extension function from
> Python that calls into C code, and for reverse call a Python function
> from C code. Thread safety is mostly orthogonal, so you can probably use
> the standard Twisted reactor.callFromThread to have code run in the
> Twisted thread.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From andrea at cpushare.com  Thu Jul  7 23:13:27 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 8 Jul 2005 05:13:27 +0200
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
In-Reply-To: <20050707150651.26278.1975198363.divmod.quotient.7165@ohm>
References: <20050707144212.26278.317575382.divmod.quotient.7154@ohm>
	<20050707150651.26278.1975198363.divmod.quotient.7165@ohm>
Message-ID: <20050708031327.GT8436@g5.random>

On Thu, Jul 07, 2005 at 11:06:51AM -0400, Jp Calderone wrote:
> When I did this, I settled on hashing just the qual of the exception class 

I guess the qual would be failure.value.__class__.__module__ +
failure.value.__class__.__name__ or did I misunderstood?

Isn't it simpler to hash on failure.value.__class__ instead of the qual?

> and the brief string (failure.getErrorMessage()) version of it.  This has a 

That's neat too, the only disavantage compared to glyph's approach is
that the stack trace could be different but the exception the same,
stuff like AttributeError is quite common. gliph's example code wouldn't
risk to lose different stack traces.

The counter is good enough for now but I'll probably stack it on top of
glyph's appraoch in the future.

Thanks for the interesting hints!



From andy at thecablelounge.com  Fri Jul  8 02:46:03 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 08 Jul 2005 16:46:03 +1000
Subject: [Twisted-Python] Trouble with example imap client on unread messages
Message-ID: <42CE212B.4070901@thecablelounge.com>

I'm having trouble running Twisted/doc/mail/examples/imap4client.py on 
imap folders which have unread messages.  When the client issues:

proto.fetchSpecific('1:*',
	headerType='HEADER.FIELDS',
	headerArgs=['SUBJECT']
)

My server is returning:

  * 243 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {47}
  Subject: DELIVERY REPORTS ABOUT YOUR E-MAIL

  )
  * 244 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {42}
  Subject: AW: [syslinux] bug(?) in 2.11

  )
  * 244 FETCH (FLAGS (\Seen))

243 is a previously read message, 244 is an unread message.

The callback for the above fetchSpecific call is receiving:

{ 243 : [['BODY', ['HEADER.FIELDS', ['SUBJECT']], 'Subject: DELIVERY 
REPORTS ABOUT YOUR E-MAIL\r\n\r\n']], 244 : [['FLAGS', ['\\Seen']]] }

ie, I'm not getting the subject for unread messages.

Just wondering if this is a problem at twisted's end (is it incorrectly 
reducing the server response for 244 to [['FLAGS', ['\\Seen']]]?), my 
imap server (is it incorrect that my server is including the extra * 244 
FETCH (FLAGS (\Seen)) line ?  I'm using BincIMAP v1.2.12) or me :) (am I 
running something wrong here?)

cheers,
Andy.



From therve at free.fr  Fri Jul  8 04:36:32 2005
From: therve at free.fr (Thomas HERVE)
Date: Fri, 08 Jul 2005 10:36:32 +0200
Subject: [Twisted-Python] Trouble with example imap client on unread
	messages
In-Reply-To: <42CE212B.4070901@thecablelounge.com>
References: <42CE212B.4070901@thecablelounge.com>
Message-ID: <20050708103632.fketq9hm9u88o44o@itchy.wasabout.net>

Quoting Andy Gayton <andy at thecablelounge.com>:

> I'm having trouble running Twisted/doc/mail/examples/imap4client.py 
> on imap folders which have unread messages.  When the client issues:
>
> proto.fetchSpecific('1:*',
> 	headerType='HEADER.FIELDS',
> 	headerArgs=['SUBJECT']
> )
>
> My server is returning:
>
>  * 243 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {47}
>  Subject: DELIVERY REPORTS ABOUT YOUR E-MAIL
>
>  )
>  * 244 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {42}
>  Subject: AW: [syslinux] bug(?) in 2.11
>
>  )
>  * 244 FETCH (FLAGS (\Seen))

The problem I see is here : why does the server had this line ? It 
doesn't seem
to be an answer, but more the consequence of the fetch (which mark messages as
seen). This message should appeared *after* fetch called... Maybe Bincimap is
too fast :).

You could try this instead (which don't mark message seen) :

proto.fetchSpecific('1:*',
	headerType='HEADER.FIELDS',
	headerArgs=['SUBJECT'],
        peek=True
)

> 243 is a previously read message, 244 is an unread message.
>
> The callback for the above fetchSpecific call is receiving:
>
> { 243 : [['BODY', ['HEADER.FIELDS', ['SUBJECT']], 'Subject: DELIVERY 
> REPORTS ABOUT YOUR E-MAIL\r\n\r\n']], 244 : [['FLAGS', ['\\Seen']]] }
>
> ie, I'm not getting the subject for unread messages.

Well actually it's logical, because Twisted parses result in a dictionnary so
you have :
res[243] = < subject >, then res[244] = < subject >, but res[244] = < flags >
which overrides previous value.

> Just wondering if this is a problem at twisted's end (is it 
> incorrectly reducing the server response for 244 to [['FLAGS', 
> ['\\Seen']]]?), my imap server (is it incorrect that my server is 
> including the extra * 244 FETCH (FLAGS (\Seen)) line ?  I'm using 
> BincIMAP v1.2.12) or me :) (am I running something wrong here?)

I would say it's server fault, but if Twisted can cope with it it's better.

-- 
Thomas




From iko at cd.chalmers.se  Fri Jul  8 05:08:57 2005
From: iko at cd.chalmers.se (Anders Hammarquist)
Date: Fri, 08 Jul 2005 11:08:57 +0200
Subject: [Twisted-Python] Trouble with example imap client on unread
	messages 
In-Reply-To: <20050708103632.fketq9hm9u88o44o@itchy.wasabout.net> 
References: <42CE212B.4070901@thecablelounge.com>
	<20050708103632.fketq9hm9u88o44o@itchy.wasabout.net> 
Message-ID: <20050708090857.92969384C4@haddock.cd.chalmers.se>

In a message of Fri, 08 Jul 2005 10:36:32 +0200, Thomas HERVE writes:
>Quoting Andy Gayton <andy at thecablelounge.com>:
>>  * 244 FETCH (FLAGS (\Seen))
>
>The problem I see is here : why does the server had this line ?

The flags changed, and the server is telling you about it, as it
should.

>> The callback for the above fetchSpecific call is receiving:
>>
>> { 243 : [['BODY', ['HEADER.FIELDS', ['SUBJECT']], 'Subject: DELIVERY 
>> REPORTS ABOUT YOUR E-MAIL\r\n\r\n']], 244 : [['FLAGS', ['\\Seen']]] }
>>
>> ie, I'm not getting the subject for unread messages.
>
>Well actually it's logical, because Twisted parses result in a dictionnary so
>you have :
>res[243] = < subject >, then res[244] = < subject >, but res[244] = < flags >
>which overrides previous value.

This is bad, RFC-3501 says:
   A client MUST be prepared to accept any server response at all times.
   This includes server data that was not requested.  Server data SHOULD
   be recorded, so that the client can reference its recorded copy
   rather than sending a command to the server to request the data.  In
   the case of certain server data, the data MUST be recorded.

so I'd say twisted's IMAP-client is broken.

/Anders

-- 
 -- Of course I'm crazy, but that doesn't mean I'm wrong.
Anders Hammarquist                                  | iko at cd.chalmers.se
Physics student, Chalmers University of Technology, | Hem: +46 31 88 48 50
G|teborg, Sweden.           RADIO: SM6XMM and N2JGL | Mob: +46 707 27 86 87



From andy at thecablelounge.com  Fri Jul  8 07:51:19 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 08 Jul 2005 21:51:19 +1000
Subject: [Twisted-Python] Trouble with example imap client on
	unread	messages
In-Reply-To: <20050708103632.fketq9hm9u88o44o@itchy.wasabout.net>
References: <42CE212B.4070901@thecablelounge.com>
	<20050708103632.fketq9hm9u88o44o@itchy.wasabout.net>
Message-ID: <42CE68B7.6060300@thecablelounge.com>

> Quoting Andy Gayton <andy at thecablelounge.com>:
>> proto.fetchSpecific('1:*',
>>     headerType='HEADER.FIELDS',
>>     headerArgs=['SUBJECT']

Thomas HERVE wrote:
> The problem I see is here : why does the server had this line ? It 
> doesn't seem
> to be an answer, but more the consequence of the fetch (which mark 
> messages as
> seen). This message should appeared *after* fetch called... Maybe 
> Bincimap is
> too fast :).
> 
> You could try this instead (which don't mark message seen) :
> 
> proto.fetchSpecific('1:*',
>     headerType='HEADER.FIELDS',
>     headerArgs=['SUBJECT'],
>        peek=True
> )

Thanks Thomas, this workaround does work.  I'm sure there's going to be 
trouble down the track when I need my actions to change the state of the 
messages, but it at least confirms what you and Anders observed.

Anders wrote:
> This is bad, RFC-3501 says:
>    A client MUST be prepared to accept any server response at all times.
>    This includes server data that was not requested.  Server data SHOULD
>    be recorded, so that the client can reference its recorded copy
>    rather than sending a command to the server to request the data.  In
>    the case of certain server data, the data MUST be recorded.
> 
> so I'd say twisted's IMAP-client is broken.

I agree with Anders.  But man, what a bitch to handle :)

Actually this reminds me of a reply to an excellent intro to twisted 
clients thread which featured an imap client:

http://twistedmatrix.com/pipermail/twisted-python/2004-May/007781.html

Ideally I guess the message's subject should be passed to the callback, 
as expected, and a method call should be triggered for the change in the 
messages status.

I've raised a bug for it: http://twistedmatrix.com/bugs/issue1105

Hope this is ok ..

cheers,
Andy.



From luc.stepniewski at adelux.fr  Fri Jul  8 08:19:13 2005
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Fri, 8 Jul 2005 14:19:13 +0200
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
Message-ID: <200507081419.18207.luc.stepniewski@adelux.fr>

I've written a Twisted Windows Service which works perfectly with Twisted 1.3 
and Python 2.3. I've used the sandboxed ntsvc from moonfallen's svn.

I upgraded everything to Twisted 2.0.1 and Python 2.4.1 (even tried 
ActiveState's), and followed the information provided in moonfallen's 
README-service (that is, patch pywin32's boot_service.py).

It compiles correctly to a .exe, without any supplementary error and I can 
install it correctly as a service (using 'xxxxxx.exe -install'). But When I 
try to launch it (in the GUI Service), it dies immediately, putting the 
following message in the Windows Event Observer:

The instance's SvcRun() method failed
  File "win32serviceutil.pyc", line 742, in SvcRun
  File "ntsvc\runner.pyc", line 79, in SvcDoRun
  File "ntsvc\runner.pyc", line 48, in run
  File "twisted\application\app.pyc", line 31, in installReactor
  File "twisted\python\reflect.pyc", line 344, in namedModule
exceptions.ImportError: No module named default

I even cleaned my code to have just a .tac with 2 lines, and it does the same 
error. So I'm pretty sure it's not a problem in my code.

Has anyone managed to create and run a service with Python 2.4.1 & Twisted 
2.0.1? I'm using py2exe 0.5.4 and pywin32 204 both for python 2.4.

Thanks,
Luc
-- 
Luc Stepniewski <luc.stepniewski at adelux.fr>
Adelux - Securite, Linux  Public key: <http://lstep.free.fr/pubkey.txt>
Key BC0E3C2A fingerprint = A4FA466C68D27E46B427  07D083ED6340BC0E3C2A
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050708/369ff96b/attachment.pgp 

From corydodt at twistedmatrix.com  Fri Jul  8 10:53:12 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Fri, 08 Jul 2005 07:53:12 -0700
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
In-Reply-To: <200507081419.18207.luc.stepniewski@adelux.fr>
References: <200507081419.18207.luc.stepniewski@adelux.fr>
Message-ID: <42CE9358.4090107@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Luc, it's very common to get these near code that uses namedAny or named* from
reflect.  Using these calls guarantees that py2exe's module finding algorithm
won't know to bundle the named module.

You just need an "includes" line in your setup for twisted.internet.default.

C


Luc Stepniewski wrote:
| I've written a Twisted Windows Service which works perfectly with Twisted 1.3
| and Python 2.3. I've used the sandboxed ntsvc from moonfallen's svn.
|
| I upgraded everything to Twisted 2.0.1 and Python 2.4.1 (even tried
| ActiveState's), and followed the information provided in moonfallen's
| README-service (that is, patch pywin32's boot_service.py).
|
| It compiles correctly to a .exe, without any supplementary error and I can
| install it correctly as a service (using 'xxxxxx.exe -install'). But When I
| try to launch it (in the GUI Service), it dies immediately, putting the
| following message in the Windows Event Observer:
|
| The instance's SvcRun() method failed
|   File "win32serviceutil.pyc", line 742, in SvcRun
|   File "ntsvc\runner.pyc", line 79, in SvcDoRun
|   File "ntsvc\runner.pyc", line 48, in run
|   File "twisted\application\app.pyc", line 31, in installReactor
|   File "twisted\python\reflect.pyc", line 344, in namedModule
| exceptions.ImportError: No module named default
|
| I even cleaned my code to have just a .tac with 2 lines, and it does the same
| error. So I'm pretty sure it's not a problem in my code.
|
| Has anyone managed to create and run a service with Python 2.4.1 & Twisted
| 2.0.1? I'm using py2exe 0.5.4 and pywin32 204 both for python 2.4.
|
| Thanks,
| Luc
|
|
| ------------------------------------------------------------------------
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCzpNY3A5SrXAiHQcRAqOpAKCGCIxf7rKe0m8Nz9uBjZ5DNzZHZQCfdFd8
lE+0kILxAevmGi2k5FBu/ms=
=drPM
-----END PGP SIGNATURE-----



From natester at gmail.com  Fri Jul  8 11:12:35 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Fri, 8 Jul 2005 09:12:35 -0600
Subject: [Twisted-Python] File Transfer/BitTorrent
In-Reply-To: <20050707221047.cuayi4stvdsg8w80@itchy.wasabout.net>
References: <20050707124404.26278.1921372994.divmod.quotient.7103@ohm>
	<20050707221047.cuayi4stvdsg8w80@itchy.wasabout.net>
Message-ID: <4adac7a3050708081240de7455@mail.gmail.com>

I'm interested in sending data over the internet too--mostly server to
server behind NATs.  Jabber looked like a good solution for it's IM
capabilities and security, but maybe q2q would be good too.

What's a QSP?

What presence protocol will you implement?

What keeps Frank from impersonating Bob?

Is it like an encrpyted proxy for [protocol]?  

Is it centralized or not?

-Nate 

On 7/7/05, Thomas HERVE <therve at free.fr> wrote:
> {Sorry glyph, reply-to ignored by f***** mail client]
> 
> Quoting glyph at divmod.com:
> >> 1) Is there some people interested in BitTorrent client/server with
> >> Twisted ?
> >
> > I'm sure lots of people would be interested in a bittorrent protocol
> > implementation for Twisted :).  I know of at least 2 aborted
> > attempts; I don't know if either ever produced any code.
> 
> I don't know if it's good news or not... I don't have time to make it
> alone from
> scratch, so any piece of code would be welcome.
> 
> >> 2) If not, does a draft/standard exist of good file transfer protocol, that
> >> could be done with Twisted ?
> >
> > Personally I'm writing a different file-transfer protocol which might
> > meet your requirements; it's called "sigma" and it's going to be
> > based on a lower-level peer-to-peer system called Q2Q.  Watch this
> > space: http://divmod.org/projects/q2q
> > for more information in the next couple of days.
> 
> It seems really promising ! I really enjoyed your slides :). I had a
> quick look
> at q2q code and it seems pretty evolved yet. I'll try further in the
> next days,
> if you need help (tests ?) I'm your man.
> 
> --
> Thomas
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From luc.stepniewski at adelux.fr  Fri Jul  8 12:59:36 2005
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Fri, 8 Jul 2005 18:59:36 +0200
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
In-Reply-To: <42CE9358.4090107@twistedmatrix.com>
References: <200507081419.18207.luc.stepniewski@adelux.fr>
	<42CE9358.4090107@twistedmatrix.com>
Message-ID: <200507081859.37248.luc.stepniewski@adelux.fr>

On Friday 08 July 2005 16:53, Cory Dodt wrote:
> Luc, it's very common to get these near code that uses namedAny or named*
> from reflect.  Using these calls guarantees that py2exe's module finding
> algorithm won't know to bundle the named module.
>
> You just need an "includes" line in your setup for
> twisted.internet.default.

Wow, you're right! It works. It's strange I didn't need this "includes" with 
Twisted 1.3. Anyway. I'll add this to the HOWTO, as soon as I can.

Thanks,
Luc
-- 
Luc Stepniewski <luc.stepniewski at adelux.fr>
Adelux - Securite, Linux  Public key: <http://lstep.free.fr/pubkey.txt>
Key BC0E3C2A fingerprint = A4FA466C68D27E46B427  07D083ED6340BC0E3C2A



From exarkun at divmod.com  Fri Jul  8 13:30:03 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 8 Jul 2005 13:30:03 -0400
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
In-Reply-To: <200507081859.37248.luc.stepniewski@adelux.fr>
Message-ID: <20050708173003.26278.777804699.divmod.quotient.7796@ohm>

On Fri, 8 Jul 2005 18:59:36 +0200, Luc Stepniewski <luc.stepniewski at adelux.fr> wrote:
>On Friday 08 July 2005 16:53, Cory Dodt wrote:
>> Luc, it's very common to get these near code that uses namedAny or named*
>> from reflect.  Using these calls guarantees that py2exe's module finding
>> algorithm won't know to bundle the named module.
>>
>> You just need an "includes" line in your setup for
>> twisted.internet.default.
>
>Wow, you're right! It works. It's strange I didn't need this "includes" with
>Twisted 1.3. Anyway. I'll add this to the HOWTO, as soon as I can.

twisted.internet.default was never really public anyway, and now it's deprecated.  The ideal solution would be to stop using it altogether. What's it being imported for?

Jp



From corydodt at twistedmatrix.com  Fri Jul  8 13:51:59 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Fri, 08 Jul 2005 10:51:59 -0700
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
In-Reply-To: <20050708173003.26278.777804699.divmod.quotient.7796@ohm>
References: <20050708173003.26278.777804699.divmod.quotient.7796@ohm>
Message-ID: <42CEBD3F.6070309@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

It's not being imported by user code, it's being imported by t.service.app.
Py2exe doesn't know that, so it loses it.

Luc, probably ntsvc should deal with this automatically. Let me think about it
before you put it in the HOWTO.

C


Jp Calderone wrote:
| On Fri, 8 Jul 2005 18:59:36 +0200, Luc Stepniewski
| <luc.stepniewski at adelux.fr> wrote:
|
|> On Friday 08 July 2005 16:53, Cory Dodt wrote:
|>
|>> Luc, it's very common to get these near code that uses namedAny or
|>> named*
|>> from reflect.  Using these calls guarantees that py2exe's module finding
|>> algorithm won't know to bundle the named module.
|>>
|>> You just need an "includes" line in your setup for
|>> twisted.internet.default.
|>
|>
|> Wow, you're right! It works. It's strange I didn't need this
|> "includes" with
|> Twisted 1.3. Anyway. I'll add this to the HOWTO, as soon as I can.
|
|
| twisted.internet.default was never really public anyway, and now it's
| deprecated.  The ideal solution would be to stop using it altogether.
| What's it being imported for?
|
| Jp
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCzr0/3A5SrXAiHQcRAop4AKCdAcMcQpEvFTrZbtsXIkoQoVQ5YwCePO+n
OSxJhzReqZbBDrOmSCynFDw=
=yRFv
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Fri Jul  8 21:29:41 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 8 Jul 2005 21:29:41 -0400
Subject: [Twisted-Python] Race condition in callInThread()
In-Reply-To: 0
Message-ID: <20050709012941.26278.2130080586.divmod.quotient.7981@ohm>

James kindly added a failing test for the nasty behavior of twisted.python.threadpool.ThreadPool._startSomeWorkers().  It seems this will be difficult to fix completely without making API-incompatible changes all the way up to reactor.callInThread, though.

Fixing it for *most* cases is straightforward enough:

Index: twisted/python/threadpool.py
===================================================================
--- twisted/python/threadpool.py        (revision 14112)
+++ twisted/python/threadpool.py        (working copy)
@@ -99,10 +99,10 @@
         return state
     
     def _startSomeWorkers(self):
-        if self.workers >= self.max:
-            return
-        # FIXME: Wait for any waiters to eat of the queue.
-        while self.workers < self.max and self.q.qsize() > 0:
+        while (
+            self.workers < self.max and # Don't create too many
+            len(self.waiters) < self.q.qsize() # but create enough
+            ):
             self.startAWorker()
 
     def dispatch(self, owner, func, *args, **kw):

But this isn't a complete fix.  Annoyingly, the area it doesn't cover very well is exactly what the unit test covers most aggressively.  The problem is the implementation of _worker: it calls back into user code before adjusting the ThreadPool's state to indicate that it is no longer busy.  Since the concept of result callback/errbacks isn't present in _worker, fixing this would involve expanding the API to pass callback/errback functions all the way down so that _worker can invoke them at the right time.

At least, as far as I can tell.

Another option is to loosen up the test, so that it passes even if the ThreadPool creates one extra thread.  Unfortunately, even though the unit test will only ever create one extra thread, user code could create as many as the ThreadPool allows to exist total, by just adding multiple work units to the queue in a single callback on the Deferred returned by deferToThread.

Thoughts?

Jp



From gustavo at grahal.net  Sat Jul  9 00:28:08 2005
From: gustavo at grahal.net (Gustavo Rahal)
Date: Sat, 09 Jul 2005 01:28:08 -0300
Subject: [Twisted-Python] conch example of sftp
Message-ID: <danjqf$qhv$1@sea.gmane.org>

Hi

Does anyone has or know where I can find sftp code examples? AFAIK conch
is able of doing files transfers over a ssh connection.

I know it may appear that I'm laisy but I don't have much experience
with twisted nor conch and the documentation is not that good.


Thanks
Gustavo




From screwtape at froup.com  Sat Jul  9 03:08:15 2005
From: screwtape at froup.com (Tim Allen)
Date: Sat, 9 Jul 2005 17:08:15 +1000
Subject: [Twisted-Python] twisted.names and multicast DNS
Message-ID: <0516cbe8d34da0d0de64f7c7a772cfdf@froup.com>

So after two years of leaving it alone, I decided to have another look 
at the multicast DNS module I was writing for Twisted, and lo and 
behold I discover a serious design flaw in my response cache. Here's 
the basic situation I'm dealing with:

Suppose I have two hosts on my network, called ford and arthur. I'm 
sitting at arthur, and I'm looking for SSH servers advertised via 
DNS-based Service Discovery and Multicast DNS. At the present moment, 
ford is switched off.

I turn on ford, and when the SSH server starts up, ford broadcasts an 
announcement DNS datagram that says, "In the zone '_ssh._tcp.local', 
there is a PTR record with the data 'Ford._ssh._tcp.local'. This 
information expires in 7200 seconds." (it mentions the class too, of 
course, but the class doesn't affect the discussion below so we'll 
ignore it from here on).

arthur receives the announcement, records the transmission time and the 
TTL, and caches the PTR record. Thereafter, any program on arthur that 
requests PTR records in '_ssh._tcp.local' will be given the PTR record 
about 'Ford._ssh._tcp.local'.

Now I turn off Ford, and when the SSH server shuts down, ford 
broadcasts a goodbye datagram that says, "In the zone 
'_ssh._tcp.local', there is a PTR record with the data 
'Ford._ssh._tcp.local'. This information expires in 0 seconds." - that 
is to say, exactly the same as the previous announcement but with a TTL 
of 0. The cache on arthur needs to compare this new record to its 
cache, see that it matches the definition of an existing record, and 
update the TTL of the existing record so that it will expire 
immediately.

I'm trying to implement the record cache on arthur at the moment. It 
needs to be queried by (name, type, class) tuples, so I use such a 
tuple as the key of a dictionary. Since there can be multiple records 
available for a particular (name, type, class), the value associated 
with this key is a list of resource records. Because the 
t.names.dns.DNSDatagramProtocol gives me instances of the various 
t.names.dns.Record_* classes, I figured that those instances would be a 
good representation of the resource records I need to store.

In psuedo-python, then, the ideal data structure would look like this:

cache = {
	('_ssh._tcp.local', PTR, IN): [
			(<Record_PTR name=Ford._ssh._tcp.local>, 7200),
	]
}

...then, when I get a new record from the network, I can look up its 
(name, type, class) tuple and get the list of records. Then I compare 
the new record to each of the records in the list: if it matches a 
record I update the TTL, otherwise I add the record to the list.

The problem is this: the Record_PTR class (just like all the other 
Record_* classes) in t.names.dns stores the TTL as an instance 
variable! Therefore, when I have an existing record and an updated 
record, they never match, and I wind up with two identical records in 
my data structure that differ only by TTL.

As far as I can tell, I have three options from here:

1. Write my own versions of all the Record_* classes that don't 
maintain a TTL value, and translate backwards and forwards whenever I 
need to talk to Twisted's DNS layer. I'd need to update this code 
whenever a new DNS record type was added.
2. Write a comparison function for comparing resource records that 
compares instance variables that aren't named 'ttl'. This would 
probably need to be updated less frequently, but is horribly hacky.
3. Complain on the twisted-list and hope that somebody has a better 
suggestion, or changes the code to be more mDNS-friendly.

As you can see, I'm trying Option 3 at the moment, but I'm open to 
suggestions. :)




From corydodt at twistedmatrix.com  Sat Jul  9 13:56:01 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Sat, 09 Jul 2005 10:56:01 -0700
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
Message-ID: <42D00FB1.7080301@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Fixed in trunk.  I recommend you delete ntsvc.cfg and your dist
directory, then rerun setup.py twistedservice with svn trunk code.  Jp
was correct.

C



> It's not being imported by user code, it's being imported by t.service.app.
> Py2exe doesn't know that, so it loses it.
> 
> Luc, probably ntsvc should deal with this automatically. Let me think
> about it
> before you put it in the HOWTO.
> 
> C
> 
> 
> Jp Calderone wrote:
> | On Fri, 8 Jul 2005 18:59:36 +0200, Luc Stepniewski
> | <luc.stepniewski at adelux.fr> wrote:
> |
> |> On Friday 08 July 2005 16:53, Cory Dodt wrote:
> |>
> |>> Luc, it's very common to get these near code that uses namedAny or
> |>> named*
> |>> from reflect.  Using these calls guarantees that py2exe's module finding
> |>> algorithm won't know to bundle the named module.
> |>>
> |>> You just need an "includes" line in your setup for
> |>> twisted.internet.default.
> |>
> |>
> |> Wow, you're right! It works. It's strange I didn't need this
> |> "includes" with
> |> Twisted 1.3. Anyway. I'll add this to the HOWTO, as soon as I can.
> |
> |
> | twisted.internet.default was never really public anyway, and now it's
> | deprecated.  The ideal solution would be to stop using it altogether.
> | What's it being imported for?
> |
> | Jp
> |
> | _______________________________________________
> | Twisted-Python mailing list
> | Twisted-Python at twistedmatrix.com
> | http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFC0A+p3A5SrXAiHQcRAmo9AJ47RcWy5VZcAlBfcVEsz7bHOkbTNQCeO+nh
0n/Sl+TenS4gbyPSG8+G+Xw=
=5hWe
-----END PGP SIGNATURE-----



From mdmoin939 at yahoo.com  Sat Jul  9 14:48:57 2005
From: mdmoin939 at yahoo.com (Md Moin)
Date: Sat, 9 Jul 2005 11:48:57 -0700 (PDT)
Subject: [Twisted-Python] XML RPC
Message-ID: <20050709184857.8402.qmail@web40901.mail.yahoo.com>

I would like to setup a twisted XML RPC server with
authentication functionality based on username and
password.Is there any simple example available for XML
RPC server/client that uses username/password
authentication? I am a newbie thus if any of you guys
can post a simple example of xml rpc server and client
that uses authentication that will help me a lot. 
Thanx



		
____________________________________________________
Sell on Yahoo! Auctions ? no fees. Bid on great items.  
http://auctions.yahoo.com/



From jarrod.roberson at gmail.com  Sun Jul 10 00:38:18 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Sun, 10 Jul 2005 00:38:18 -0400
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <0516cbe8d34da0d0de64f7c7a772cfdf@froup.com>
References: <0516cbe8d34da0d0de64f7c7a772cfdf@froup.com>
Message-ID: <2389d47305070921383f2ca9ac@mail.gmail.com>

On 7/9/05, Tim Allen <screwtape at froup.com> wrote

you forgot option number 4, which is what we ended up doing.

Put a python binding in over the Apple code and use it integrated into 
Twisted.
Plus you get to use it outside Twisted as well :-)

-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050710/40ddb5b5/attachment.htm 

From bgranger at scu.edu  Sun Jul 10 02:45:39 2005
From: bgranger at scu.edu (Brian Granger)
Date: Sat, 09 Jul 2005 23:45:39 -0700
Subject: [Twisted-Python] twisted.names and multicast DNS
Message-ID: <s2d061b0.031@gwcl-21.scu.edu>

An embedded and charset-unspecified text was scrubbed...
Name: not available
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050709/1ca0b2e7/attachment.txt 

From exarkun at divmod.com  Sun Jul 10 14:16:34 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 10 Jul 2005 14:16:34 -0400
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <0516cbe8d34da0d0de64f7c7a772cfdf@froup.com>
Message-ID: <20050710181634.26278.1403125390.divmod.quotient.9004@ohm>

On Sat, 9 Jul 2005 17:08:15 +1000, Tim Allen <screwtape at froup.com> wrote:
>So after two years of leaving it alone, I decided to have another look at 
>the multicast DNS module I was writing for Twisted, and lo and behold I 
>discover a serious design flaw in my response cache. Here's the basic 
>situation I'm dealing with:
>
> [snip]
>
>The problem is this: the Record_PTR class (just like all the other Record_* 
>classes) in t.names.dns stores the TTL as an instance variable! Therefore, 
>when I have an existing record and an updated record, they never match, and 
>I wind up with two identical records in my data structure that differ only 
>by TTL.
>
>As far as I can tell, I have three options from here:
>
>1. Write my own versions of all the Record_* classes that don't maintain a 
>TTL value, and translate backwards and forwards whenever I need to talk to 
>Twisted's DNS layer. I'd need to update this code whenever a new DNS record 
>type was added.
>2. Write a comparison function for comparing resource records that compares 
>instance variables that aren't named 'ttl'. This would probably need to be 
>updated less frequently, but is horribly hacky.

What's hacky about this?  It seems like a simple, straightforward solution.  Record classes have comparison defined one way, you want to compare them another way.  Comparison can only be defined one way using the "==" operator, so clearly one of these requirements has to resort to using something other than the "==" operator.

I think it's even nicer than you suggest, since the attributes which should be compared are all declared on each class.  eg, Record_NS.compareAttributes == ('name', 'ttl').  You should be able to write a comparison function that looks at this attribute and simply omits ttl.

Hope this helps,

Jp



From mary-twisted at puzzling.org  Mon Jul 11 01:33:44 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 11 Jul 2005 15:33:44 +1000
Subject: [Twisted-Python] Reminder: Australian Twisted Sprint #2: 19th -
	21st August 2005, Sydney
Message-ID: <20050711053344.GQ9691@sourdust.home.puzzling.org>

Hey folks,

Still no final word on exactly where in Sydney this sprint will be held,
but it *will* be held and will be on these dates, so I'm posting again
to give people time to book flights before they get expensive.

I've made a grant application to Linux Australia to fund some of the
sprint, but this is not guarenteed to go through. Watch this thread for
details:
http://lists.linux.org.au/archives/linux-aus/2005-July/msg00216.html

We would very much appreciate people letting us know via the wiki if
they are definitely or maybe coming so that we have a good idea of
numbers when scouring for venues.

--- Announcement ---

Following the success of the Twisted sprint in Hobart in April, we're
having a second sprint.

Dates: Friday 19th - Sunday 21st August 2005

Location: Sydney (venue not yet known)

As with last time, there will be no attendence charge and sprinters will
be taking care of their own accommodation and transport. Once we have a
venue we'll have some suggestions.

We'll be working on code and documentation hopefully destined for the
Twisted Subversion repository. People not really familiar with Twisted
are welcome but will probably at least want to have the basics down by
the time of the sprint.

More details will be announced here, also see the wiki at
http://users.puzzling.org/users/mary/TwistedSprint/moin.cgi/FrontPage
People interested in coming should update
http://users.puzzling.org/users/mary/TwistedSprint/moin.cgi/SprintAttendees
and email me, so that we have an idea of numbers.

-Mary



From glyph at divmod.com  Mon Jul 11 03:52:35 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 11 Jul 2005 03:52:35 -0400
Subject: [Twisted-Python] Questions regarding serviceCollection
	and	Interfaces.
In-Reply-To: <200507061718.53389.iacovou@gmail.com>
References: <491db6c9050705051673b82535@mail.gmail.com>	<1120571429.8508.23.camel@localhost.localdomain>
	<200507061718.53389.iacovou@gmail.com>
Message-ID: <42D22543.7080101@divmod.com>

kgi wrote:

> If anyone has any information on either (1) getting a single postfix instance 
> to work with multiple relayhosts for multiple "identities", or (2) 
> configuring kmail to send directly to gmail over TLS, I'd love to hear how 
> you did it. I found lots of generic configuration info for kmail, but I 
> couldn't get kmail to manage it whatever I did.

No, but I do know of an email services company that provides a 
kmail-compatible IMAPS and SMTP/TLS implementation (using Twisted, even) ;-)

http://divmod.com/; contact me privately for a ticket.



From naewe.s at atlas.de  Mon Jul 11 07:46:21 2005
From: naewe.s at atlas.de (=?ISO-8859-15?Q?Stefan_N=E4we?=)
Date: Mon, 11 Jul 2005 13:46:21 +0200
Subject: [Twisted-Python] Receiving large packets with TCP
Message-ID: <42D25C0D.8010607@atlas.de>

Hi.
I'm using Twisted (2.0.1) for a TCP-based receiver.
That receiver receives different telegrams sent by another process.
Those telegrams are sent on different ports (i.e. one telegram type
is sent on one port). The sizes of the telegram vary from ~16 bytes
to ~8 kB.

Everything works perfectly. I've really never been *that*
productive.

BUT:
I'm having trouble receiving the whole contents of large telegrams.
For example one telegram is exactly 7452 bytes long but I only get
2920 bytes.
My twisted receiver uses the reactor to setup the different ports
to listen on and creates 'message handler' objects on connect.
Those message handler objects 'dissect' the received telegram and
print some of its contents to STDOUT.

Some parts of my code:

class MyReceiver(Protocol):

    def dataReceived(self, data):
        if __debug__: log.msg("Received %d bytes" % len(data))
        try:
            # here the message handler gets created
            m = self.factory.msg[self.port](data)
            log.msg(m)
        except KeyError:
            # can this really happen ??
            log.msg("Unhandled connection from port %d" % self.port)

    def connectionMade(self):
        addr = self.transport.getHost()
        self.proto = addr.type
        self.peer = addr.host
        self.port = addr.port
        log.msg("Connection from %s" % self.transport.getPeer())


My 'main' function simply does 'reactor.listenTCP(port, MyFactory)'

So what do I need to do to get the whole telegram 'in one shot' ?
Do I need to re-assemble the telegrams myself ?

(I hope this Information is enough...Tell me, if not.)

TIA

Stefan
-- 
----------------------------------------------------------------------
Stefan Naewe                                     ATLAS Elektronik GmbH
                                                         Dept.: NUS T4
phone: +49-(0)421-457-3969                Sebaldsbruecker Heerstr. 235
fax:   +49-(0)421-457-3913                                28305 Bremen




From radeex at gmail.com  Mon Jul 11 07:58:44 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 11 Jul 2005 21:58:44 +1000
Subject: [Twisted-Python] Receiving large packets with TCP
In-Reply-To: <42D25C0D.8010607@atlas.de>
References: <42D25C0D.8010607@atlas.de>
Message-ID: <60ed19d4050711045868b641cd@mail.gmail.com>

On 7/11/05, Stefan N?we <naewe.s at atlas.de> wrote:
> I'm having trouble receiving the whole contents of large telegrams.
> For example one telegram is exactly 7452 bytes long but I only get
> 2920 bytes.

...

> Some parts of my code:
> 
> class MyReceiver(Protocol):
> 
>     def dataReceived(self, data):
>         if __debug__: log.msg("Received %d bytes" % len(data))


dataReceived will be called with arbitrarily-sized chunks of data. You
can never assume how much data will be given to you. If you're
expecting more, buffer it until you receive everything you need.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From naewe.s at atlas.de  Mon Jul 11 08:03:06 2005
From: naewe.s at atlas.de (=?ISO-8859-15?Q?Stefan_N=E4we?=)
Date: Mon, 11 Jul 2005 14:03:06 +0200
Subject: [Twisted-Python] Receiving large packets with TCP
In-Reply-To: <42D25C0D.8010607@atlas.de>
References: <42D25C0D.8010607@atlas.de>
Message-ID: <42D25FFA.2060307@atlas.de>

N?we, Stefan schrieb:
> Hi.
> I'm using Twisted (2.0.1) for a TCP-based receiver.
> That receiver receives different telegrams sent by another process.
> Those telegrams are sent on different ports (i.e. one telegram type
> is sent on one port). The sizes of the telegram vary from ~16 bytes
> to ~8 kB.
> 
> Everything works perfectly. I've really never been *that*
> productive.
> 
> BUT:
> I'm having trouble receiving the whole contents of large telegrams.
> For example one telegram is exactly 7452 bytes long but I only get
> 2920 bytes.
> My twisted receiver uses the reactor to setup the different ports
> to listen on and creates 'message handler' objects on connect.
> Those message handler objects 'dissect' the received telegram and
> print some of its contents to STDOUT.
> 
> Some parts of my code:
> 
> class MyReceiver(Protocol):
> 
>     def dataReceived(self, data):
>         if __debug__: log.msg("Received %d bytes" % len(data))
>         try:
>             # here the message handler gets created
>             m = self.factory.msg[self.port](data)
>             log.msg(m)
>         except KeyError:
>             # can this really happen ??
>             log.msg("Unhandled connection from port %d" % self.port)
> 
>     def connectionMade(self):
>         addr = self.transport.getHost()
>         self.proto = addr.type
>         self.peer = addr.host
>         self.port = addr.port
>         log.msg("Connection from %s" % self.transport.getPeer())
> 
> 
> My 'main' function simply does 'reactor.listenTCP(port, MyFactory)'
> 
> So what do I need to do to get the whole telegram 'in one shot' ?
> Do I need to re-assemble the telegrams myself ?
> 
> (I hope this Information is enough...Tell me, if not.)

I forgot:

The telegram sender (non twisted) sits on a Win32 box.
The telegram receiver (twisted) on a Linux box.

Thanks

Stefan
-- 
----------------------------------------------------------------------
Stefan Naewe                                     ATLAS Elektronik GmbH
                                                         Dept.: NUS T4
phone: +49-(0)421-457-3969                Sebaldsbruecker Heerstr. 235
fax:   +49-(0)421-457-3913                                28305 Bremen




From dguaraglia at gmx.de  Mon Jul 11 08:19:47 2005
From: dguaraglia at gmx.de (David Guaraglia)
Date: Mon, 11 Jul 2005 09:19:47 -0300
Subject: [Twisted-Python] Receiving large packets with TCP
In-Reply-To: <42D25C0D.8010607@atlas.de>
References: <42D25C0D.8010607@atlas.de>
Message-ID: <42D263E3.2040201@gmx.de>

Hi Stefan.

As Christopher said, you never know how much data you'll receive so you 
must buffer the data until you have what you expect. If you know your 
packets are going to be _exactly_ 16kb long, then you just read until 
you have 16kb+ of data in a buffer, and process that. Then you save the 
rest for the next packet. One of the best ways to do that is using an 
string, or a queue. I have some example code in case you are interested,

David

Stefan N?we wrote:

>Hi.
>I'm using Twisted (2.0.1) for a TCP-based receiver.
>That receiver receives different telegrams sent by another process.
>Those telegrams are sent on different ports (i.e. one telegram type
>is sent on one port). The sizes of the telegram vary from ~16 bytes
>to ~8 kB.
>
>Everything works perfectly. I've really never been *that*
>productive.
>
>BUT:
>I'm having trouble receiving the whole contents of large telegrams.
>For example one telegram is exactly 7452 bytes long but I only get
>2920 bytes.
>My twisted receiver uses the reactor to setup the different ports
>to listen on and creates 'message handler' objects on connect.
>Those message handler objects 'dissect' the received telegram and
>print some of its contents to STDOUT.
>
>Some parts of my code:
>
>class MyReceiver(Protocol):
>
>    def dataReceived(self, data):
>        if __debug__: log.msg("Received %d bytes" % len(data))
>        try:
>            # here the message handler gets created
>            m = self.factory.msg[self.port](data)
>            log.msg(m)
>        except KeyError:
>            # can this really happen ??
>            log.msg("Unhandled connection from port %d" % self.port)
>
>    def connectionMade(self):
>        addr = self.transport.getHost()
>        self.proto = addr.type
>        self.peer = addr.host
>        self.port = addr.port
>        log.msg("Connection from %s" % self.transport.getPeer())
>
>
>My 'main' function simply does 'reactor.listenTCP(port, MyFactory)'
>
>So what do I need to do to get the whole telegram 'in one shot' ?
>Do I need to re-assemble the telegrams myself ?
>
>(I hope this Information is enough...Tell me, if not.)
>
>TIA
>
>Stefan
>  
>




From naewe.s at atlas.de  Mon Jul 11 08:33:20 2005
From: naewe.s at atlas.de (=?ISO-8859-15?Q?Stefan_N=E4we?=)
Date: Mon, 11 Jul 2005 14:33:20 +0200
Subject: [Twisted-Python] Receiving large packets with TCP (solved)
In-Reply-To: <42D25C0D.8010607@atlas.de>
References: <42D25C0D.8010607@atlas.de>
Message-ID: <42D26710.3080002@atlas.de>

N?we, Stefan schrieb:
> Hi.
> I'm using Twisted (2.0.1) for a TCP-based receiver.
> That receiver receives different telegrams sent by another process.
> Those telegrams are sent on different ports (i.e. one telegram type
> is sent on one port). The sizes of the telegram vary from ~16 bytes
> to ~8 kB.
> 
> Everything works perfectly. I've really never been *that*
> productive.
> 
> BUT:
> I'm having trouble receiving the whole contents of large telegrams.
> For example one telegram is exactly 7452 bytes long but I only get
> 2920 bytes.
> [...]

Actually, after sending the message I came up with a working solution
that does exactly what Christopher and David suggested.

So I would say this is solved.


Thanks a lot!

Happy Twisting!



Stefan
-- 
----------------------------------------------------------------------
Stefan Naewe                                     ATLAS Elektronik GmbH
                                                         Dept.: NUS T4
phone: +49-(0)421-457-3969                Sebaldsbruecker Heerstr. 235
fax:   +49-(0)421-457-3913                                28305 Bremen




From screwtape at froup.com  Mon Jul 11 08:35:16 2005
From: screwtape at froup.com (Tim Allen)
Date: Mon, 11 Jul 2005 22:35:16 +1000
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <20050710181634.26278.1403125390.divmod.quotient.9004@ohm>
References: <20050710181634.26278.1403125390.divmod.quotient.9004@ohm>
Message-ID: <d8e0b4e81bd1ac3e2566a6c1638aa838@froup.com>

On 11 Jul 2005, at 04:16, Jp Calderone wrote:
> What's hacky about this?  It seems like a simple, straightforward 
> solution.  Record classes have comparison defined one way, you want to 
> compare them another way.  Comparison can only be defined one way 
> using the "==" operator, so clearly one of these requirements has to 
> resort to using something other than the "==" operator.

Well, it would be nicer still if the world would conform to my 
requirements. :)

I was sort of hoping that someone would pop their head out of the 
woodwork and say 'No, it was designed this way because it makes 
such-and-such a task much easier', or even 'Nobody much cares either 
way, we're taking patches'.

> I think it's even nicer than you suggest, since the attributes which 
> should be compared are all declared on each class.  eg, 
> Record_NS.compareAttributes == ('name', 'ttl').  You should be able to 
> write a comparison function that looks at this attribute and simply 
> omits ttl.

I was a bit nervous about relying on undocumented instance variables of 
a module marked as 'unstable', but I suppose since I'm already relying 
on an unstable module, one more assumption isn't going to hurt.

Thanks!




From Henning.Ramm at mediapro-gmbh.de  Mon Jul 11 10:07:26 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Mon, 11 Jul 2005 16:07:26 +0200
Subject: [Twisted-Python] exceptions in adbapi
Message-ID: <F92274058556DE42B94B148EEFB9183949E777@exchange-03.suedkurier.de>

Hi there!

I've a twisted app as database proxy server that handles all database queries for my other apps (via a pb connection).
Now I get thousands of exceptions that I can't trace back, two kind:

2005-07-11 15:57:36,707	defer.328	[ERROR]
[Failure instance: Traceback: _mysql_exceptions.Warning: Datens?tze gefunden: 1  Ge?ndert: 0  Warnungen: 1
D:\Python\lib\threading.py:422:run
D:\Python\lib\site-packages\twisted\python\threadpool.py:145:_worker
D:\Python\lib\site-packages\twisted\python\context.py:52:callWithContext
D:\Python\lib\site-packages\twisted\python\context.py:31:callWithContext
--- <exception caught here> ---
D:\Python\lib\site-packages\twisted\internet\threads.py:25:_putResultInDeferred
D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:302:_runInteraction
D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:311:_runQuery
D:\Python\lib\site-packages\MySQLdb\cursors.py:95:execute
D:\Python\lib\site-packages\MySQLdb\cursors.py:114:_execute
D:\Python\lib\site-packages\MySQLdb\connections.py:33:defaulterrorhandler
]
2005-07-11 15:57:36,707	defer.328	[ERROR]
[Failure instance: Traceback: _mysql_exceptions.IntegrityError: (1062, "Doppelter Eintrag 'TA_V_23_130705' f\xfcr Schl\xfcssel 1.")
D:\Python\lib\threading.py:422:run
D:\Python\lib\site-packages\twisted\python\threadpool.py:145:_worker
D:\Python\lib\site-packages\twisted\python\context.py:52:callWithContext
D:\Python\lib\site-packages\twisted\python\context.py:31:callWithContext
--- <exception caught here> ---
D:\Python\lib\site-packages\twisted\internet\threads.py:25:_putResultInDeferred
D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:302:_runInteraction
D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:311:_runQuery
D:\Python\lib\site-packages\MySQLdb\cursors.py:95:execute
D:\Python\lib\site-packages\MySQLdb\cursors.py:114:_execute
D:\Python\lib\site-packages\MySQLdb\connections.py:33:defaulterrorhandler
]

The first one is absolutely useless - MySQL tells me only that it could process the query ("datasets found: 1, changed 0, warning: 1"); I'd like to block that completely.

The second one means that I tried an insert with an existing key ("Double entry '...' for key 1"); also no problem, if I could handle it and do an update query instead.

But as you can see, I can't trace the messages back to one of my methods (and I have already every function call in a try..except clause).

Any hints?


Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From glyph at divmod.com  Mon Jul 11 11:30:50 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 11 Jul 2005 11:30:50 -0400
Subject: [Twisted-Python] Receiving large packets with TCP
In-Reply-To: <60ed19d4050711045868b641cd@mail.gmail.com>
References: <42D25C0D.8010607@atlas.de>
	<60ed19d4050711045868b641cd@mail.gmail.com>
Message-ID: <42D290AA.3080304@divmod.com>

Christopher Armstrong wrote:

> dataReceived will be called with arbitrarily-sized chunks of data. You
> can never assume how much data will be given to you. If you're
> expecting more, buffer it until you receive everything you need.

This phenomenon is called "packet fragmentation" and is well-documented 
in various places.  Google for that phrase and you will turn up quite a 
few references :).

In fact, you will notice there are some unit tests in Twisted that do 
something like this:

     for byte in data:
         myProtocol.dataReceived(byte)

just to test that the protocol is still robust in the face of the 
ultimate (1-byte-at-a-time) fragmentation.  (FWIW, no actually existing 
TCP implementation will never actually fragment packets _this_ far, but 
there is nothing saying that it can't.)



From shimonrura at gmail.com  Mon Jul 11 11:47:07 2005
From: shimonrura at gmail.com (Shimon Rura)
Date: Mon, 11 Jul 2005 11:47:07 -0400
Subject: [Twisted-Python] need help getting started with Twisted
In-Reply-To: <42C97646.3040203@fettig.net>
References: <42C97646.3040203@fettig.net>
Message-ID: <253af2fb0507110847286b4723@mail.gmail.com>

Hi all,

I'm starting to work on a new server application, and I think Twisted
may be a useful platform to build on.  I've been having a hard time
figuring out where to start, though, as my experience is mostly in
database-backed web applications and Twisted seems rather large.  I
found myself wishing there was an O'Reilly book on Twisted, and was
happy to read the message below on the mailing list.

Abe, is there any way a newbie like me can get (or buy) a pre-print of
your book?

Can anyone recommend other resources or tutorials for newbies?  The
documentation on the Twisted website was confusing, in part because
it's divided into many different projects and I don't know how those
projects relate or if some of them have been superseded by newer ones.

thanks,
Shimon Rura

On 7/4/05, Abe Fettig <abe at fettig.net> wrote:
> Hi all,
> 
> I'm happy to announce that O'Reilly is going to publish my book on
> Twisted. It's scheduled for release in October. The working title is
> Twisted Network Programming Essentials.
> 
> I've been working on this book since the end of last year, but I've been
> waiting to announce it until I knew that it was definitely going to be
> published in the reasonably near future. At this point it's in the
> editing stage, and O'Reilly has put it on their production schedule for
> an October release. So spread the word - there's a Twisted book coming!
> 
> For a description of what the book covers (and what it doesn't), see
> this post on my weblog:
> 
> http://fettig.net/weblog/2005/06/30/my-book-on-twisted/
> 
> Thanks to all the Twisted developers for creating such an amazing
> framework. The more I learn about Twisted (and I learned a lot while
> writing this book), the more I'm impressed. I hope this book helps many
> more people to get started with Twisted, and that it's the first of many
> more books to come.
> 
> Abe



From justinjohnson at gmail.com  Mon Jul 11 11:52:14 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 11 Jul 2005 10:52:14 -0500
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
Message-ID: <94a776e7050711085220094f1c@mail.gmail.com>

I am attempting to add spawnProcess to iocpreactor. In order to begin this 
task I've had to do a lot of reading on Windows network programming, 
specifically the various Windows I/O methods, to attempt to understand what 
win32eventreactor and iocpreactor are doing, and also just increase my 
understanding of how reactors work in general. To understand the various 
Winsock 2 methods that both of these reactors rely upon, I read chapters 1-5 
of Network Programming for Microsoft Windows[1].
 Before actually attempting to add spawnProcess, I would like to present how 
I think iocpreactor works and how I think I should add spawnProcess, and 
hopefully be corrected or confirmed in my understanding. If I'm too vague 
there's a good chance it's because I don't understand it very well. Please 
feel free to point out things that you might think are obvious but aren't 
sure I understand.
 How iocpreactor works
---------------------------------

   1. Create an IO Completion Port. 
   2. Create a socket and associate it with the IOCP. This is the socket 
   we will call AcceptEx (a non-blocking accept) on. The association with the 
   IOCP is made via CreateIoCompletionPort. 
   3. Setup any scheduled tasks on the reactor. 
   4. Call AcceptEx (which doesn't block) on the socket. AcceptEx takes 
   an overlapped structure as a parameter. Before making the call, we set two 
   attributes of the struct: the callback and callback_args which will be 
   called when an accept event completes on the socket. The Winsock 2 methods 
   don't actually call the callback. The Winsock 2 methods handle copying data 
   related to the network event that occurred on the socket into the overlapped 
   structure and making that overlapped structure available to 
   GetQueuedCompletionStatus. So when we handle events on sockets via 
   GetQueuedCompletionStatus from within doIteration, we have access to the 
   data related to the event as well as the callback and callback_args we call 
   to handle that event. The callbacks are setup in the xxxOp classes in 
   ops.py and always result in some transport method getting called (such 
   as readDone, connectionDone, etc). 
   5. From within doIteration, call GetQueuedCompletionStatus (which does 
   block) with a timeout of the time until the next scheduled task needs to be 
   run. If any event occurs on the sockets currently associated with the IOCP 
   before that time expires, GetQueuedCompletionStatus will return (stop 
   blocking). Now we have access to the overlapped structure containing data 
   associated with the event which was copied into the overlapped structure's 
   buffer, such as data received from WSARecv calls, as well as the callback 
   and callback_args. From within doIteration we call the callbacks passing in 
   the data related to the event. Depending on the events we are handling, we 
   may create new sockets (e.g. end point sockets in TCP connections) and 
   associate them with the IOCP as well. All Winsock 2 API calls made are 
   non-blocking accept for GetQueuedCompletionStatus. 
   6. Step 5 continues until the reactor stops.

  How to add spawnProcess
---------------------------------------

   1. Create the processes via Windows APIs and associate their 
   stdout/err with with the IOCP via CreateIoCompletionPort calls. 
   2. Close stdin. 
   3. Notify the ProcessProtocol via protocol.makeConnection (not sure 
   why, looking at win32eventreactor) 
   4. Receive data from stdout/err via the completion port by calling 
   GetQueuedCompletionStatus from within doIteration. Is this really possible? 
   ProcessProtocol's methods won't get called appropriately by letting the 
   existing callbacks in ops.py make calls to the transport (e.g. 
   connectionDone, readDone)?

  Thanks for your help.
Justin
 [1] http://www.amazon.com/exec/obidos/ASIN/0735615799
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050711/966328e8/attachment.htm 

From exarkun at divmod.com  Mon Jul 11 12:34:55 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 11 Jul 2005 12:34:55 -0400
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <94a776e7050711085220094f1c@mail.gmail.com>
Message-ID: <20050711163455.26278.1912863786.divmod.quotient.9475@ohm>

On Mon, 11 Jul 2005 10:52:14 -0500, Justin Johnson <justinjohnson at gmail.com> wrote:
>I am attempting to add spawnProcess to iocpreactor. In order to begin this
>task I've had to do a lot of reading on Windows network programming,
>specifically the various Windows I/O methods, to attempt to understand what
>win32eventreactor and iocpreactor are doing, and also just increase my
>understanding of how reactors work in general. To understand the various
>Winsock 2 methods that both of these reactors rely upon, I read chapters 1-5
>of Network Programming for Microsoft Windows[1].
> Before actually attempting to add spawnProcess, I would like to present how
>I think iocpreactor works and how I think I should add spawnProcess, and
>hopefully be corrected or confirmed in my understanding. If I'm too vague
>there's a good chance it's because I don't understand it very well. Please
>feel free to point out things that you might think are obvious but aren't
>sure I understand.
> How iocpreactor works
>---------------------------------
>
> [snip]
>
>  How to add spawnProcess
>---------------------------------------
>
>   1. Create the processes via Windows APIs and associate their
>   stdout/err with with the IOCP via CreateIoCompletionPort calls.
>   2. Close stdin.

Why close stdin?  How will you write to the spawned process?

>   3. Notify the ProcessProtocol via protocol.makeConnection (not sure
>   why, looking at win32eventreactor)

makeConnection is the method that's actually part of IProtocol (even though ProcessProtocol doesn't implement IProtocol, it still adheres to its API in this regard).  Generally, all it does is set the .transport attribute on the protocol instance and then call connectionMade.  This might seem pointless in the case of processes, but since it maintains consistency with other kinds of transports, it is useful.

>   4. Receive data from stdout/err via the completion port by calling
>   GetQueuedCompletionStatus from within doIteration. Is this really possible?
>   ProcessProtocol's methods won't get called appropriately by letting the
>   existing callbacks in ops.py make calls to the transport (e.g.
>   connectionDone, readDone)?
>
>  Thanks for your help.
>Justin
> [1] http://www.amazon.com/exec/obidos/ASIN/0735615799
>

Jp



From justinjohnson at gmail.com  Mon Jul 11 13:16:35 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 11 Jul 2005 12:16:35 -0500
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <20050711163455.26278.1912863786.divmod.quotient.9475@ohm>
References: <94a776e7050711085220094f1c@mail.gmail.com>
	<20050711163455.26278.1912863786.divmod.quotient.9475@ohm>
Message-ID: <94a776e705071110161e92d8a4@mail.gmail.com>

See response below.

On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote: 
> 
> On Mon, 11 Jul 2005 10:52:14 -0500, Justin Johnson <
> justinjohnson at gmail.com> wrote:
> >I am attempting to add spawnProcess to iocpreactor. In order to begin 
> this
> >task I've had to do a lot of reading on Windows network programming,
> >specifically the various Windows I/O methods, to attempt to understand 
> what
> >win32eventreactor and iocpreactor are doing, and also just increase my
> >understanding of how reactors work in general. To understand the various
> >Winsock 2 methods that both of these reactors rely upon, I read chapters 
> 1-5
> >of Network Programming for Microsoft Windows[1].
> > Before actually attempting to add spawnProcess, I would like to present 
> how
> >I think iocpreactor works and how I think I should add spawnProcess, and
> >hopefully be corrected or confirmed in my understanding. If I'm too vague
> >there's a good chance it's because I don't understand it very well. 
> Please
> >feel free to point out things that you might think are obvious but aren't
> >sure I understand.
> > How iocpreactor works
> >---------------------------------
> >
> > [snip]
> >
> > How to add spawnProcess
> >---------------------------------------
> >
> > 1. Create the processes via Windows APIs and associate their
> > stdout/err with with the IOCP via CreateIoCompletionPort calls.
> > 2. Close stdin.
> 
> Why close stdin? How will you write to the spawned process?

 I see, so I won't close stdin and people can do that in their 
ProcessProtocol in connectionMade or something if they want.

> 3. Notify the ProcessProtocol via protocol.makeConnection (not sure
> > why, looking at win32eventreactor)
> 
> makeConnection is the method that's actually part of IProtocol (even 
> though ProcessProtocol doesn't implement IProtocol, it still adheres to its 
> API in this regard). Generally, all it does is set the .transport attribute 
> on the protocol instance and then call connectionMade. This might seem 
> pointless in the case of processes, but since it maintains consistency with 
> other kinds of transports, it is useful.

  So the Process class is the transport? In win32eventreactor, 3 threads are 
started that loop on reading stdout and stderr and writing data from the 
outQueue to stdin. It seems to me that I would not use these threads, but 
instead have each of these 3 file handles associated with the IOCP. Then the 
methods defined in ops.py would be used to handle events on those handles, 
resulting in transport methods being called. These transport methods would 
be methods on the Process class, which would result in methods on a single 
instance of the ProcessProtocol being called. This single instance of the 
ProcessProtocol would be shared by all of the 3 file handles. Am I 
understanding correctly? Are write and loseConnection the only methods the 
Process would need to implement from ITransport?

> 4. Receive data from stdout/err via the completion port by calling
> > GetQueuedCompletionStatus from within doIteration. Is this really 
> possible?
> > ProcessProtocol's methods won't get called appropriately by letting the
> > existing callbacks in ops.py make calls to the transport (e.g.
> > connectionDone, readDone)?
> >
> > Thanks for your help.
> >Justin
> > [1] http://www.amazon.com/exec/obidos/ASIN/0735615799
> >
> 
> Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050711/5b21c0a0/attachment.htm 

From fritcher at corp.earthlink.net  Mon Jul 11 14:10:26 2005
From: fritcher at corp.earthlink.net (Jason Fritcher)
Date: Mon, 11 Jul 2005 14:10:26 -0400
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <s2d061b0.031@gwcl-21.scu.edu>
References: <s2d061b0.031@gwcl-21.scu.edu>
Message-ID: <42D2B612.2020205@corp.earthlink.net>

Brian Granger wrote:
> I like this option as Apple's mDNS code is becoming very solid.  Are the
> python bindings you mention available somewhere?  I have thought about
> using mDNS with twisted for a project so any examples you can offer would
> be great.

I'm the one actually writing on the bindings. I'm trying to get
permission from the company to open source them. There isn't anything
proprietary there, but who knows what the legal department will say. :)

Currently, I have a straight through binding that ports the C API into
python. In the near future, I'm going to be overhauling it into an OO
API, and then integrating into Twisted. I'll be back with questions
about Twisted when I get to that point. ;)

-- 
Jason Fritcher
Software Engineer - Hosting Dev,
System Software Development
Earthlink, Inc
fritcher at corp.earthlink.net
(404) 748-7262, x22262
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 253 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050711/a1db6892/attachment.pgp 

From exarkun at divmod.com  Mon Jul 11 15:26:15 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 11 Jul 2005 15:26:15 -0400
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <94a776e705071110161e92d8a4@mail.gmail.com>
Message-ID: <20050711192615.26278.1879485730.divmod.quotient.9579@ohm>

On Mon, 11 Jul 2005 12:16:35 -0500, Justin Johnson <justinjohnson at gmail.com> wrote:
>On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote:
>>
> [snip]
>
>> 3. Notify the ProcessProtocol via protocol.makeConnection (not sure
>> > why, looking at win32eventreactor)
>>
>> makeConnection is the method that's actually part of IProtocol (even
>> though ProcessProtocol doesn't implement IProtocol, it still adheres to its
>> API in this regard). Generally, all it does is set the .transport attribute
>> on the protocol instance and then call connectionMade. This might seem
>> pointless in the case of processes, but since it maintains consistency with
>> other kinds of transports, it is useful.
>
>  So the Process class is the transport? In win32eventreactor, 3 threads are
>started that loop on reading stdout and stderr and writing data from the
>outQueue to stdin. It seems to me that I would not use these threads, but
>instead have each of these 3 file handles associated with the IOCP. Then the
>methods defined in ops.py would be used to handle events on those handles,
>resulting in transport methods being called. These transport methods would
>be methods on the Process class, which would result in methods on a single
>instance of the ProcessProtocol being called. This single instance of the
>ProcessProtocol would be shared by all of the 3 file handles. Am I
>understanding correctly? Are write and loseConnection the only methods the
>Process would need to implement from ITransport?

That mostly sounds correct, except the last bit.  What makes it a transport is that it implements /all/ of ITransport.  Moreover, ProcessProtocols expect their transport to be an IProcessTransport, which adds several methods on top of ITransport.  Everything in each of those interfaces needs to be implemented.

For reference, <http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html> and <http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IProcessTransport.html>.

Jp



From justinjohnson at gmail.com  Mon Jul 11 15:40:44 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 11 Jul 2005 14:40:44 -0500
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <20050711192615.26278.1879485730.divmod.quotient.9579@ohm>
References: <94a776e705071110161e92d8a4@mail.gmail.com>
	<20050711192615.26278.1879485730.divmod.quotient.9579@ohm>
Message-ID: <94a776e705071112402f4643d0@mail.gmail.com>

On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote: 
> 
> On Mon, 11 Jul 2005 12:16:35 -0500, Justin Johnson <
> justinjohnson at gmail.com> wrote:
> >On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote:
> >>
> > [snip]
> >
> >> 3. Notify the ProcessProtocol via protocol.makeConnection (not sure
> >> > why, looking at win32eventreactor)
> >>
> >> makeConnection is the method that's actually part of IProtocol (even
> >> though ProcessProtocol doesn't implement IProtocol, it still adheres to 
> its
> >> API in this regard). Generally, all it does is set the .transport 
> attribute
> >> on the protocol instance and then call connectionMade. This might seem
> >> pointless in the case of processes, but since it maintains consistency 
> with
> >> other kinds of transports, it is useful.
> >
> > So the Process class is the transport? In win32eventreactor, 3 threads 
> are
> >started that loop on reading stdout and stderr and writing data from the
> >outQueue to stdin. It seems to me that I would not use these threads, but
> >instead have each of these 3 file handles associated with the IOCP. Then 
> the
> >methods defined in ops.py would be used to handle events on those 
> handles,
> >resulting in transport methods being called. These transport methods 
> would
> >be methods on the Process class, which would result in methods on a 
> single
> >instance of the ProcessProtocol being called. This single instance of the
> >ProcessProtocol would be shared by all of the 3 file handles. Am I
> >understanding correctly? Are write and loseConnection the only methods 
> the
> >Process would need to implement from ITransport?
> 
> That mostly sounds correct, except the last bit. What makes it a transport 
> is that it implements /all/ of ITransport. Moreover, ProcessProtocols expect 
> their transport to be an IProcessTransport, which adds several methods on 
> top of ITransport. Everything in each of those interfaces needs to be 
> implemented.

 Ahh... I missed those interfaces because I was starting with 
win32eventreactor.Process, which doesn't implement either ITransport or 
IProcessTransport (either with an implements() or by defining all of those 
methods).
 After some more thought about this I think I will have to define new xxxOps 
methods for stdout and stderr (and maybe stdin as well). These ops' ovDone 
methods will call the methods on the transport (Process) appropriate for 
ProcessProtocols.

For reference, <
> http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html> 
> and <
> http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IProcessTransport.html
> >.
> 
> Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050711/c7f93eaf/attachment.htm 

From justinjohnson at gmail.com  Mon Jul 11 15:52:45 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 11 Jul 2005 14:52:45 -0500
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <94a776e705071112402f4643d0@mail.gmail.com>
References: <94a776e705071110161e92d8a4@mail.gmail.com>
	<20050711192615.26278.1879485730.divmod.quotient.9579@ohm>
	<94a776e705071112402f4643d0@mail.gmail.com>
Message-ID: <94a776e70507111252f590dcd@mail.gmail.com>

On 7/11/05, Justin Johnson <justinjohnson at gmail.com> wrote: 
> 
> On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote: 
> > 
> > On Mon, 11 Jul 2005 12:16:35 -0500, Justin Johnson <justinjohnson at gmail.com 
> > > wrote:
> > >On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote:
> > >>
> > > [snip]
> > 
> > That mostly sounds correct, except the last bit. What makes it a 
> > transport is that it implements /all/ of ITransport. Moreover, 
> > ProcessProtocols expect their transport to be an IProcessTransport, which 
> > adds several methods on top of ITransport. Everything in each of those 
> > interfaces needs to be implemented. 
> 
>  Ahh... I missed those interfaces because I was starting with 
> win32eventreactor.Process, which doesn't implement either ITransport or 
> IProcessTransport (either with an implements() or by defining all of those 
> methods). 
>  
 Hmm.. I somehow missed the obvious implements call. But I still don't see 
all methods defined (e.g. getPeer, getHost, writeSequence).

 After some more thought about this I think I will have to define new xxxOps 
> methods for stdout and stderr (and maybe stdin as well). These ops' ovDone 
> methods will call the methods on the transport (Process) appropriate for 
> ProcessProtocols. 
> 
> For reference, <http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html> 
> > and <http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IProcessTransport.html 
> > >.
> > 
> > Jp
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050711/8ee63609/attachment.htm 

From bob at redivi.com  Mon Jul 11 15:57:36 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 11 Jul 2005 09:57:36 -1000
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <42D2B612.2020205@corp.earthlink.net>
References: <s2d061b0.031@gwcl-21.scu.edu>
	<42D2B612.2020205@corp.earthlink.net>
Message-ID: <5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>


On Jul 11, 2005, at 8:10 AM, Jason Fritcher wrote:

> Brian Granger wrote:
>
>> I like this option as Apple's mDNS code is becoming very solid.   
>> Are the
>> python bindings you mention available somewhere?  I have thought  
>> about
>> using mDNS with twisted for a project so any examples you can  
>> offer would
>> be great.
>>
>
> I'm the one actually writing on the bindings. I'm trying to get
> permission from the company to open source them. There isn't anything
> proprietary there, but who knows what the legal department will  
> say. :)
>
> Currently, I have a straight through binding that ports the C API into
> python. In the near future, I'm going to be overhauling it into an OO
> API, and then integrating into Twisted. I'll be back with questions
> about Twisted when I get to that point. ;)

Alternatively, if you're using a Mac, it's pretty trivial to just use  
the NSNetService stuff.  You're more or less stuck supporting the OS  
X APIs anyway if you want OS X support, since only one mDNS responder  
can run on a given machine (well, IP address).

-bob




From pp64 at codelock.com  Mon Jul 11 16:49:04 2005
From: pp64 at codelock.com (Pavel Pergamenshchik)
Date: Mon, 11 Jul 2005 13:49:04 -0700
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <94a776e7050711085220094f1c@mail.gmail.com>
References: <94a776e7050711085220094f1c@mail.gmail.com>
Message-ID: <20050711134904.3555c1f6@dunce>

On Mon, 11 Jul 2005 10:52:14 -0500
Justin Johnson <justinjohnson at gmail.com> wrote:

> I am attempting to add spawnProcess to iocpreactor. In order to begin
this 
> task I've had to do a lot of reading on Windows network programming, 
> specifically the various Windows I/O methods, to attempt to understand
what 
> win32eventreactor and iocpreactor are doing, and also just increase my

> understanding of how reactors work in general. To understand the
various 
> Winsock 2 methods that both of these reactors rely upon, I read
chapters 1-5 
> of Network Programming for Microsoft Windows[1].
>  Before actually attempting to add spawnProcess, I would like to
present how 
> I think iocpreactor works and how I think I should add spawnProcess,
and 
> hopefully be corrected or confirmed in my understanding. If I'm too
vague 
> there's a good chance it's because I don't understand it very well.
Please 
> feel free to point out things that you might think are obvious but
aren't 
> sure I understand.
>  How iocpreactor works
> ---------------------------------
> 
>    1. Create an IO Completion Port. 
>    2. Create a socket and associate it with the IOCP. This is the
socket 
>    we will call AcceptEx (a non-blocking accept) on. The association
with the 
>    IOCP is made via CreateIoCompletionPort. 
>    3. Setup any scheduled tasks on the reactor. 
>    4. Call AcceptEx (which doesn't block) on the socket. AcceptEx
takes 
>    an overlapped structure as a parameter. Before making the call, we
set two 
>    attributes of the struct: the callback and callback_args which will
be 
>    called when an accept event completes on the socket. The Winsock 2
methods 
>    don't actually call the callback. The Winsock 2 methods handle
copying data 
>    related to the network event that occurred on the socket into the
overlapped 
>    structure and making that overlapped structure available to 
>    GetQueuedCompletionStatus. So when we handle events on sockets via 
>    GetQueuedCompletionStatus from within doIteration, we have access
to the 
>    data related to the event as well as the callback and callback_args
we call 
>    to handle that event. The callbacks are setup in the xxxOp classes
in 
>    ops.py and always result in some transport method getting called
(such 
>    as readDone, connectionDone, etc). 
>    5. From within doIteration, call GetQueuedCompletionStatus (which
does 
>    block) with a timeout of the time until the next scheduled task
needs to be 
>    run. If any event occurs on the sockets currently associated with
the IOCP 
>    before that time expires, GetQueuedCompletionStatus will return
(stop 
>    blocking). Now we have access to the overlapped structure
containing data 
>    associated with the event which was copied into the overlapped
structure's 
>    buffer, such as data received from WSARecv calls, as well as the
callback 
>    and callback_args. From within doIteration we call the callbacks
passing in 
>    the data related to the event. Depending on the events we are
handling, we 
>    may create new sockets (e.g. end point sockets in TCP connections)
and 
>    associate them with the IOCP as well. All Winsock 2 API calls made
are 
>    non-blocking accept for GetQueuedCompletionStatus. 
>    6. Step 5 continues until the reactor stops.

This sounds about right. Note how this is different from the usual
reactor thing -- iocp notifies you when the operation is _finished_,
not when it can success without blocking.

>   How to add spawnProcess
> ---------------------------------------
> 
>    1. Create the processes via Windows APIs and associate their 
>    stdout/err with with the IOCP via CreateIoCompletionPort calls. 
>    2. Close stdin. 
>    3. Notify the ProcessProtocol via protocol.makeConnection (not sure

>    why, looking at win32eventreactor) 
>    4. Receive data from stdout/err via the completion port by calling 
>    GetQueuedCompletionStatus from within doIteration. Is this really
possible? 
>    ProcessProtocol's methods won't get called appropriately by letting
the 
>    existing callbacks in ops.py make calls to the transport (e.g. 
>    connectionDone, readDone)?

Hrm. Not quite. In iocp, you always have a read call pending
(ReadFileEx, for stdout/err handles). When it completes, you get a
notification in GetQueuedCompletionStatus, pass the data to your
Protocol and schedule the read again.
Do that for stdout and stderr.
ops.py already has a wrapper for ReadFile, but it always calls readDone
and readErr on your transport. You'll need to fix that.



From fritcher at corp.earthlink.net  Mon Jul 11 16:56:49 2005
From: fritcher at corp.earthlink.net (Jason Fritcher)
Date: Mon, 11 Jul 2005 16:56:49 -0400
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>
References: <s2d061b0.031@gwcl-21.scu.edu>	<42D2B612.2020205@corp.earthlink.net>
	<5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>
Message-ID: <42D2DD11.50603@corp.earthlink.net>

Bob Ippolito wrote:
> Alternatively, if you're using a Mac, it's pretty trivial to just use 
> the NSNetService stuff.  You're more or less stuck supporting the OS  X
> APIs anyway if you want OS X support, since only one mDNS responder  can
> run on a given machine (well, IP address).

Not at all. I'm developing the bindings on a OS X box, and by wrapping
the DNSService API, it'll run on OS X, Linux, FreeBSD, Solaris and any
other platform that has the DNSService API. The only difference is on OS
X, I don't need to link with any extra libraries, its part of the main
system lib. On other platforms, I link against libdns_sd.

-- 
Jason Fritcher
Software Engineer - Hosting Dev,
System Software Development
Earthlink, Inc
fritcher at corp.earthlink.net
(404) 748-7262, x22262
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 253 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050711/f1664df7/attachment.pgp 

From justinjohnson at gmail.com  Mon Jul 11 16:57:39 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 11 Jul 2005 15:57:39 -0500
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <20050711134904.3555c1f6@dunce>
References: <94a776e7050711085220094f1c@mail.gmail.com>
	<20050711134904.3555c1f6@dunce>
Message-ID: <94a776e7050711135728931286@mail.gmail.com>

On 7/11/05, Pavel Pergamenshchik <pp64 at codelock.com> wrote: 
> 
> On Mon, 11 Jul 2005 10:52:14 -0500
> Justin Johnson <justinjohnson at gmail.com> wrote:
> 
> > I am attempting to add spawnProcess to iocpreactor. In order to begin
> this
> > task I've had to do a lot of reading on Windows network programming,
> > specifically the various Windows I/O methods, to attempt to understand
> what
> > win32eventreactor and iocpreactor are doing, and also just increase my
> 
> > understanding of how reactors work in general. To understand the
> various
> > Winsock 2 methods that both of these reactors rely upon, I read
> chapters 1-5
> > of Network Programming for Microsoft Windows[1].
> > Before actually attempting to add spawnProcess, I would like to
> present how
> > I think iocpreactor works and how I think I should add spawnProcess,
> and
> > hopefully be corrected or confirmed in my understanding. If I'm too
> vague
> > there's a good chance it's because I don't understand it very well.
> Please
> > feel free to point out things that you might think are obvious but
> aren't
> > sure I understand.
> > How iocpreactor works
> > ---------------------------------
> >
> > 1. Create an IO Completion Port.
> > 2. Create a socket and associate it with the IOCP. This is the
> socket
> > we will call AcceptEx (a non-blocking accept) on. The association
> with the
> > IOCP is made via CreateIoCompletionPort.
> > 3. Setup any scheduled tasks on the reactor.
> > 4. Call AcceptEx (which doesn't block) on the socket. AcceptEx
> takes
> > an overlapped structure as a parameter. Before making the call, we
> set two
> > attributes of the struct: the callback and callback_args which will
> be
> > called when an accept event completes on the socket. The Winsock 2
> methods
> > don't actually call the callback. The Winsock 2 methods handle
> copying data
> > related to the network event that occurred on the socket into the
> overlapped
> > structure and making that overlapped structure available to
> > GetQueuedCompletionStatus. So when we handle events on sockets via
> > GetQueuedCompletionStatus from within doIteration, we have access
> to the
> > data related to the event as well as the callback and callback_args
> we call
> > to handle that event. The callbacks are setup in the xxxOp classes
> in
> > ops.py and always result in some transport method getting called
> (such
> > as readDone, connectionDone, etc).
> > 5. From within doIteration, call GetQueuedCompletionStatus (which
> does
> > block) with a timeout of the time until the next scheduled task
> needs to be
> > run. If any event occurs on the sockets currently associated with
> the IOCP
> > before that time expires, GetQueuedCompletionStatus will return
> (stop
> > blocking). Now we have access to the overlapped structure
> containing data
> > associated with the event which was copied into the overlapped
> structure's
> > buffer, such as data received from WSARecv calls, as well as the
> callback
> > and callback_args. From within doIteration we call the callbacks
> passing in
> > the data related to the event. Depending on the events we are
> handling, we
> > may create new sockets (e.g. end point sockets in TCP connections)
> and
> > associate them with the IOCP as well. All Winsock 2 API calls made
> are
> > non-blocking accept for GetQueuedCompletionStatus.
> > 6. Step 5 continues until the reactor stops.
> 
> This sounds about right. Note how this is different from the usual
> reactor thing -- iocp notifies you when the operation is _finished_,
> not when it can success without blocking.

 Right. Understood.

> How to add spawnProcess
> > ---------------------------------------
> >
> > 1. Create the processes via Windows APIs and associate their
> > stdout/err with with the IOCP via CreateIoCompletionPort calls.
> > 2. Close stdin.
> > 3. Notify the ProcessProtocol via protocol.makeConnection (not sure
> 
> > why, looking at win32eventreactor)
> > 4. Receive data from stdout/err via the completion port by calling
> > GetQueuedCompletionStatus from within doIteration. Is this really
> possible?
> > ProcessProtocol's methods won't get called appropriately by letting
> the
> > existing callbacks in ops.py make calls to the transport (e.g.
> > connectionDone, readDone)?
> 
> Hrm. Not quite. In iocp, you always have a read call pending
> (ReadFileEx, for stdout/err handles). When it completes, you get a
> notification in GetQueuedCompletionStatus, pass the data to your
> Protocol and schedule the read again.
> Do that for stdout and stderr.
> ops.py already has a wrapper for ReadFile, but it always calls readDone
> and readErr on your transport. You'll need to fix that.

 I think we're on the same page here. See my previous emails correcting my 
original idea on how this would work. At this point I've defined custom 
xxxOp classes as follows.

class ReadOutOp(OverlappedOp):
def ovDone(self, ret, bytes, (handle, buffer)):
if ret or not bytes:
#self.transport.readErr(ret, bytes)
self.transport.outConnectionLost()
else:
#self.transport.readDone(bytes)
self.transport.protocol.outReceived(bytes)
 
def initiateOp(self, handle, buffer):
self.reactor.issueReadFile(handle, buffer, self.ovDone, (handle, buffer))

class ReadErrOp(OverlappedOp):
def ovDone(self, ret, bytes, (handle, buffer)):
if ret or not bytes:
#self.transport.readErr(ret, bytes)
self.transport.errConnectionLost()
else:
#self.transport.readDone(bytes)
self.transport.protocol.errReceived(bytes)

def initiateOp(self, handle, buffer):
self.reactor.issueReadFile(handle, buffer, self.ovDone, (handle, buffer))

class WriteInOp(OverlappedOp):
def ovDone(self, ret, bytes, (handle, buffer)):
# log.msg("WriteFileOp.ovDone", time.time())
if ret or not bytes:
#self.transport.writeErr(ret, bytes)
self.transport.inConnectionLost()
else:
#self.transport.writeDone(bytes)
pass

def initiateOp(self, handle, buffer):
# log.msg("WriteFileOp.initiateOp", time.time())
self.reactor.issueWriteFile(handle, buffer, self.ovDone, (handle, buffer))
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050711/3f095226/attachment.htm 

From screwtape at froup.com  Mon Jul 11 17:57:40 2005
From: screwtape at froup.com (Tim Allen)
Date: Tue, 12 Jul 2005 07:57:40 +1000
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>
References: <s2d061b0.031@gwcl-21.scu.edu>
	<42D2B612.2020205@corp.earthlink.net>
	<5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>
Message-ID: <fbabe38317706cf3710605dcdf39d940@froup.com>

On 12 Jul 2005, at 05:57, Bob Ippolito wrote:
> Alternatively, if you're using a Mac, it's pretty trivial to just use 
> the NSNetService stuff.  You're more or less stuck supporting the OS X 
> APIs anyway if you want OS X support, since only one mDNS responder 
> can run on a given machine (well, IP address).

You've got me worried now - I've been doing all my testing on this G5 
running Panther. I haven't tried serving any mDNS records yet, but I 
can certainly watch all the traffic to and from the system-wide mDNS 
responder.

If I've got this far, am I going to be OK or do you know of some other 
brick-wall I'll hit later on?




From dave at krondo.com  Mon Jul 11 21:45:58 2005
From: dave at krondo.com (Dave Peticolas)
Date: Mon, 11 Jul 2005 18:45:58 -0700
Subject: [Twisted-Python] exceptions in adbapi
In-Reply-To: <F92274058556DE42B94B148EEFB9183949E777@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB9183949E777@exchange-03.suedkurier.de>
Message-ID: <1121132758.22155.92.camel@oneiros>

On Mon, 2005-07-11 at 16:07 +0200, Henning.Ramm at mediapro-gmbh.de wrote:
> Hi there!
> 
> I've a twisted app as database proxy server that handles all database queries for my other apps (via a pb connection).
> Now I get thousands of exceptions that I can't trace back, two kind:
> 
> 2005-07-11 15:57:36,707	defer.328	[ERROR]
> [Failure instance: Traceback: _mysql_exceptions.Warning: Datens?tze gefunden: 1  Ge?ndert: 0  Warnungen: 1
> D:\Python\lib\threading.py:422:run
> D:\Python\lib\site-packages\twisted\python\threadpool.py:145:_worker
> D:\Python\lib\site-packages\twisted\python\context.py:52:callWithContext
> D:\Python\lib\site-packages\twisted\python\context.py:31:callWithContext
> --- <exception caught here> ---
> D:\Python\lib\site-packages\twisted\internet\threads.py:25:_putResultInDeferred
> D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:302:_runInteraction
> D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:311:_runQuery
> D:\Python\lib\site-packages\MySQLdb\cursors.py:95:execute
> D:\Python\lib\site-packages\MySQLdb\cursors.py:114:_execute
> D:\Python\lib\site-packages\MySQLdb\connections.py:33:defaulterrorhandler
> ]
> 2005-07-11 15:57:36,707	defer.328	[ERROR]
> [Failure instance: Traceback: _mysql_exceptions.IntegrityError: (1062, "Doppelter Eintrag 'TA_V_23_130705' f\xfcr Schl\xfcssel 1.")
> D:\Python\lib\threading.py:422:run
> D:\Python\lib\site-packages\twisted\python\threadpool.py:145:_worker
> D:\Python\lib\site-packages\twisted\python\context.py:52:callWithContext
> D:\Python\lib\site-packages\twisted\python\context.py:31:callWithContext
> --- <exception caught here> ---
> D:\Python\lib\site-packages\twisted\internet\threads.py:25:_putResultInDeferred
> D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:302:_runInteraction
> D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:311:_runQuery
> D:\Python\lib\site-packages\MySQLdb\cursors.py:95:execute
> D:\Python\lib\site-packages\MySQLdb\cursors.py:114:_execute
> D:\Python\lib\site-packages\MySQLdb\connections.py:33:defaulterrorhandler
> ]
> 
> The first one is absolutely useless - MySQL tells me only that it could process the query ("datasets found: 1, changed 0, warning: 1"); I'd like to block that completely.
> 
> The second one means that I tried an insert with an existing key ("Double entry '...' for key 1"); also no problem, if I could handle it and do an update query instead.
> 
> But as you can see, I can't trace the messages back to one of my methods (and I have already every function call in a try..except clause).
> 
> Any hints?

These exceptions are happening in your Deferred callbacks. You need to
attach an error handler (the asynchronous counterpart to an except: 
clause) to the deferred you get back as a result of your adbapi call.

See twisted.internet.defer for more details.

dave





From Henning.Ramm at mediapro-gmbh.de  Tue Jul 12 03:14:28 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 12 Jul 2005 09:14:28 +0200
Subject: [Twisted-Python] exceptions in adbapi
Message-ID: <F92274058556DE42B94B148EEFB9183949E779@exchange-03.suedkurier.de>

 
>> Any hints?
>
>These exceptions are happening in your Deferred callbacks. You need to
>attach an error handler (the asynchronous counterpart to an except: 
>clause) to the deferred you get back as a result of your adbapi call.

Sure, that's what I do everywhere where I see a Deferred.
But they don't catch these exceptions anyway.


Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From Henning.Ramm at mediapro-gmbh.de  Tue Jul 12 03:29:23 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 12 Jul 2005 09:29:23 +0200
Subject: [Twisted-Python] need help getting started with Twisted
Message-ID: <F92274058556DE42B94B148EEFB9183949E77A@exchange-03.suedkurier.de>

>Can anyone recommend other resources or tutorials for newbies?  The
>documentation on the Twisted website was confusing, in part because
>it's divided into many different projects and I don't know how those
>projects relate or if some of them have been superseded by newer ones.

You should work yourself through
http://twistedmatrix.com/projects/core/documentation/howto/index.html

And then perhaps tell us in detail what you want to achive so that
the wizards are able to point you in the right direction.

I can't tell if this is up to date:
http://www.itamarst.org/writings/etech04/twisted_internet-0.html


Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From bob at redivi.com  Tue Jul 12 07:09:24 2005
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 12 Jul 2005 01:09:24 -1000
Subject: [Twisted-Python] exceptions in adbapi
In-Reply-To: <F92274058556DE42B94B148EEFB9183949E779@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB9183949E779@exchange-03.suedkurier.de>
Message-ID: <2ED2873A-BB22-4ADD-B2AB-BBC520284C4C@redivi.com>


On Jul 11, 2005, at 9:14 PM, <Henning.Ramm at mediapro-gmbh.de>  
<Henning.Ramm at mediapro-gmbh.de> wrote:

>
>
>>> Any hints?
>>>
>>
>> These exceptions are happening in your Deferred callbacks. You  
>> need to
>> attach an error handler (the asynchronous counterpart to an except:
>> clause) to the deferred you get back as a result of your adbapi call.
>>
>
> Sure, that's what I do everywhere where I see a Deferred.
> But they don't catch these exceptions anyway.

errbacks catch exceptions attached to deferreds.  There are no  
exceptions that will skip over errbacks.  If your errbacks are not  
being triggered, you're not putting them in the correct location in  
the deferred callback chain.

-bob




From Henning.Ramm at mediapro-gmbh.de  Tue Jul 12 07:35:11 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 12 Jul 2005 13:35:11 +0200
Subject: [Twisted-Python] exceptions in adbapi
Message-ID: <F92274058556DE42B94B148EEFB9183949E77E@exchange-03.suedkurier.de>

>errbacks catch exceptions attached to deferreds.  There are no  
>exceptions that will skip over errbacks.  If your errbacks are not  
>being triggered, you're not putting them in the correct location in  
>the deferred callback chain.

My mistake was to set log.error as errback in some locations,
and that lead to the quoted messages without proper origin.
After some hours of analyzing and refactoring I got rid of those stuff.

Sorry for bothering you.

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.




From foom at fuhm.net  Tue Jul 12 10:41:00 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 12 Jul 2005 10:41:00 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <426B61E9-D6BD-49DD-BEB8-09CA32389BAA@fuhm.net>

Bug summary
______________________
Since 2005-07-06 04:28:36.250000:
Bugs opened: 3   Bugs closed: 0   Total open bugs: 401 (+3)
   Urgent: 9 (+0)
   Bug: 171 (+1)
   Feature: 144 (+1)
   Wish: 77 (+1)

New / Reopened Bugs
______________________
                     ==== Bug ====
[MAIL] IMAP Client does not seem to handle unsolicited server  
responses  (4 days ago)
        http://twistedmatrix.com/bugs/issue1105 opened by cablehead

                     ==== Feature ====
[PATCH] make example in howto/process.xhtml more clear  (yesterday)
        http://twistedmatrix.com/bugs/issue1106 opened by headly

                     ==== Wish ====
seconde in log format.  (6 days ago)
        http://twistedmatrix.com/bugs/issue1104 opened by stilly

Bugs Closed
______________________




From jarrod.roberson at gmail.com  Tue Jul 12 12:21:48 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Tue, 12 Jul 2005 12:21:48 -0400
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <fbabe38317706cf3710605dcdf39d940@froup.com>
References: <s2d061b0.031@gwcl-21.scu.edu>
	<42D2B612.2020205@corp.earthlink.net>
	<5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>
	<fbabe38317706cf3710605dcdf39d940@froup.com>
Message-ID: <2389d473050712092125528a2a@mail.gmail.com>

On 7/11/05, Tim Allen <screwtape at froup.com> wrote:
> 
> On 12 Jul 2005, at 05:57, Bob Ippolito wrote:
> > Alternatively, if you're using a Mac, it's pretty trivial to just use
> > the NSNetService stuff. You're more or less stuck supporting the OS X
> > APIs anyway if you want OS X support, since only one mDNS responder
> > can run on a given machine (well, IP address).
> 
> You've got me worried now - I've been doing all my testing on this G5
> running Panther. I haven't tried serving any mDNS records yet, but I
> can certainly watch all the traffic to and from the system-wide mDNS
> responder.
> 
> If I've got this far, am I going to be OK or do you know of some other
> brick-wall I'll hit later on?



it is multicast you have have multiple listeners on the same machine on the 
same group. 




-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050712/718d1c49/attachment.htm 

From sc at linux.it  Tue Jul 12 17:16:14 2005
From: sc at linux.it (Stefano Canepa)
Date: Tue, 12 Jul 2005 23:16:14 +0200
Subject: [Twisted-Python] need help getting started with Twisted
In-Reply-To: <253af2fb0507110847286b4723@mail.gmail.com>
References: <42C97646.3040203@fettig.net>
	<253af2fb0507110847286b4723@mail.gmail.com>
Message-ID: <1121202974.19567.4.camel@localhost.localdomain>

Il giorno lun, 11/07/2005 alle 11.47 -0400, Shimon Rura ha scritto:
> Hi all,
> 
> I'm starting to work on a new server application, and I think Twisted
> may be a useful platform to build on.  I've been having a hard time
> figuring out where to start, though, as my experience is mostly in
> database-backed web applications and Twisted seems rather large.  I
> found myself wishing there was an O'Reilly book on Twisted, and was
> happy to read the message below on the mailing list.
> 
> Abe, is there any way a newbie like me can get (or buy) a pre-print of
> your book?
> 
> Can anyone recommend other resources or tutorials for newbies?  The
> documentation on the Twisted website was confusing, in part because
> it's divided into many different projects and I don't know how those
> projects relate or if some of them have been superseded by newer ones.
> 
> thanks,
> Shimon Rura

Shimon,
	did you read
http://twistedmatrix.com/users/warner/doc-latest/core/howto/, it's a
little bit hard at start but it's worth reading.

I started using twisted two months ago and I realeasing its first
application based on it.

Bye
Stefano 
-- 
Stefano Canepa aka sc: sc at linux.it  http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virt? di un programmatore: pigrizia, impazienza e arroganza.
                                                              (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050712/d29b9ab7/attachment.pgp 

From richard at reticulatus.plus.com  Tue Jul 12 18:00:44 2005
From: richard at reticulatus.plus.com (Richard)
Date: Tue, 12 Jul 2005 23:00:44 +0100
Subject: [Twisted-Python] Twisted client to access proxy web server
Message-ID: <000b01c5872d$26b373a0$0201a8c0@blade>

I've used twisted.web.client.getPage() and downloadPage() to get pages from
a web server, but was wondering how to use Twisted to get pages from a proxy
web server.

Can anyone point me at some example Twisted code for a client to access a
proxy-server?




From z3p at twistedmatrix.com  Wed Jul 13 01:26:54 2005
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Wed, 13 Jul 2005 01:26:54 -0400
Subject: [Twisted-Python] conch example of sftp
In-Reply-To: <danjqf$qhv$1@sea.gmane.org>
References: <danjqf$qhv$1@sea.gmane.org>
Message-ID: <1121232414.5108.5.camel@petra>

On Sat, 2005-07-09 at 01:28 -0300, Gustavo Rahal wrote:
> Hi
> 
> Does anyone has or know where I can find sftp code examples? AFAIK conch
> is able of doing files transfers over a ssh connection.
> 
> I know it may appear that I'm laisy but I don't have much experience
> with twisted nor conch and the documentation is not that good.

The best examples are the cftp client, which lives in
twisted/conch/scripts/cftp.py, and the tests, which live in
twisted/conch/test/test_cftp.py and
twisted/conch/test/test_filetransfer.py

If you have any specific questions, feel free to ask here on the list.
-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/  _o)
//\    z3p at twistedmatrix.com        /\\
V_/_   AIM: z3penguin              _\_V->
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050713/e235c6dd/attachment.pgp 

From npk.gangadhar at gmail.com  Wed Jul 13 13:14:05 2005
From: npk.gangadhar at gmail.com (Gangadhar NPK)
Date: Wed, 13 Jul 2005 22:44:05 +0530
Subject: [Twisted-Python] Twisted client to access proxy web server
In-Reply-To: <000b01c5872d$26b373a0$0201a8c0@blade>
References: <000b01c5872d$26b373a0$0201a8c0@blade>
Message-ID: <61b4e70f05071310147316f801@mail.gmail.com>

I am not well versed in Twisted, but was wondering - is there a
difference (and if so what could it be) about where the page is being
serviced from. Apart from the caching considerations and may be the
date times, what can be different from a simple web server and a proxy
web server ?
Can someone please explain.

On 7/13/05, Richard <richard at reticulatus.plus.com> wrote:
> I've used twisted.web.client.getPage() and downloadPage() to get pages from
> a web server, but was wondering how to use Twisted to get pages from a proxy
> web server.
> 
> Can anyone point me at some example Twisted code for a client to access a
> proxy-server?
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at divmod.com  Wed Jul 13 13:40:28 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 13 Jul 2005 13:40:28 -0400
Subject: [Twisted-Python] Twisted client to access proxy web server
In-Reply-To: <61b4e70f05071310147316f801@mail.gmail.com>
Message-ID: <20050713174028.26278.545015153.divmod.quotient.11007@ohm>

On Wed, 13 Jul 2005 22:44:05 +0530, Gangadhar NPK <npk.gangadhar at gmail.com> wrote:
>I am not well versed in Twisted, but was wondering - is there a
>difference (and if so what could it be) about where the page is being
>serviced from. Apart from the caching considerations and may be the
>date times, what can be different from a simple web server and a proxy
>web server ?
>Can someone please explain.

The difference is that, normally, when retrieving http://hostA/foo/, you connect to hostA.  When using proxy server hostB to do the same thing, you connect to hostB.

>
>On 7/13/05, Richard <richard at reticulatus.plus.com> wrote:
>> I've used twisted.web.client.getPage() and downloadPage() to get pages from
>> a web server, but was wondering how to use Twisted to get pages from a proxy
>> web server.
>>
>> Can anyone point me at some example Twisted code for a client to access a
>> proxy-server?
>>

getPage() is a rather limited interface.  It does not support proxy servers.  The classes which it is implemented in terms of may be usable in constructing an API which does support proxy servers (as well as all sorts of other stuff, like connection caching).

You may want to pursue this topic further on the twisted web mailing list (<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web>).

Jp



From mary-twisted at puzzling.org  Thu Jul 14 02:38:03 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 14 Jul 2005 16:38:03 +1000
Subject: [Twisted-Python] Reminder: Australian Twisted Sprint #2: 19th -
	21st August 2005, Sydney
In-Reply-To: <20050711053344.GQ9691@sourdust.home.puzzling.org>
References: <20050711053344.GQ9691@sourdust.home.puzzling.org>
Message-ID: <20050714063803.GA20866@home.puzzling.org>

On Mon, Jul 11, 2005, Mary Gardiner wrote:
> Still no final word on exactly where in Sydney this sprint will be
> held, but it *will* be held and will be on these dates, so I'm posting
> again to give people time to book flights before they get expensive.

The location is now finalised: it will be held at the city campus of the
University of Technology Sydney (UTS). This is close to the business
district and a short walk from Central Station, Sydney's major train
interchange. It's also pretty convienient for buses and the like and
nice and near some of Sydney's better cheap eating.

I'll update the wiki with accommodation suggestions soon.

Many thanks to Matthew Beauregard of UTS ProgSoc[1] for organising the room
bookings for us.

-Mary

[1] http://www.progsoc.uts.edu.au/



From radeex at gmail.com  Thu Jul 14 02:43:31 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 14 Jul 2005 16:43:31 +1000
Subject: [Twisted-Python] Reminder: Australian Twisted Sprint #2: 19th -
	21st August 2005, Sydney
In-Reply-To: <20050714063803.GA20866@home.puzzling.org>
References: <20050711053344.GQ9691@sourdust.home.puzzling.org>
	<20050714063803.GA20866@home.puzzling.org>
Message-ID: <60ed19d405071323435b42cb43@mail.gmail.com>

On 7/14/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> The location is now finalised: it will be held at the city campus of the
> University of Technology Sydney (UTS). This is close to the business
> district and a short walk from Central Station, Sydney's major train
> interchange. It's also pretty convienient for buses and the like and
> nice and near some of Sydney's better cheap eating.
> 
> I'll update the wiki with accommodation suggestions soon.
> 
> Many thanks to Matthew Beauregard of UTS ProgSoc[1] for organising the room
> bookings for us.

Hooray! Looking forward to seeing everyone / meeting new people.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From nkeric at gmail.com  Thu Jul 14 22:37:04 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Fri, 15 Jul 2005 10:37:04 +0800
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
Message-ID: <43c0d2b50507141937100f0aca@mail.gmail.com>

Hi all!

This question may not be suitable to ask here, but please help me if
you can, thanks!

I have written a server with twisted. The server contains some classes
which are responsible for handling protocol related stuffs (e.g.
packing/unpacking messages).

We've already has an app which was written in delphi, we want to
extend it to be able to communicate with this server.

Here comes the question: is it possible to build the protocol related
classes from the server to be some kind of .dll, so that the app could
invoke them, reuse them to handle the protocol related stuffs?

Any infomation would be warmly welcome, thanks in advance!

- Eric



From bob at redivi.com  Thu Jul 14 23:04:26 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 14 Jul 2005 17:04:26 -1000
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
In-Reply-To: <43c0d2b50507141937100f0aca@mail.gmail.com>
References: <43c0d2b50507141937100f0aca@mail.gmail.com>
Message-ID: <1C1C9A85-EFF5-4E22-90EB-63AAB2E72BBB@redivi.com>


On Jul 14, 2005, at 4:37 PM, Eric Hsu wrote:

> This question may not be suitable to ask here, but please help me if
> you can, thanks!
>
> I have written a server with twisted. The server contains some classes
> which are responsible for handling protocol related stuffs (e.g.
> packing/unpacking messages).
>
> We've already has an app which was written in delphi, we want to
> extend it to be able to communicate with this server.
>
> Here comes the question: is it possible to build the protocol related
> classes from the server to be some kind of .dll, so that the app could
> invoke them, reuse them to handle the protocol related stuffs?
>
> Any infomation would be warmly welcome, thanks in advance!

The best way to do this is probably "server-side" COM.  See win32all  
and ctypes, doesn't really have much of anything to do with Twisted  
at that point.

-bob




From andrew-twisted at puzzling.org  Thu Jul 14 23:11:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 15 Jul 2005 13:11:53 +1000
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
In-Reply-To: <43c0d2b50507141937100f0aca@mail.gmail.com>
References: <43c0d2b50507141937100f0aca@mail.gmail.com>
Message-ID: <20050715031153.GB9898@trogdor.home.puzzling.org>

On Fri, Jul 15, 2005 at 10:37:04AM +0800, Eric Hsu wrote:
[...]
> 
> Here comes the question: is it possible to build the protocol related
> classes from the server to be some kind of .dll, so that the app could
> invoke them, reuse them to handle the protocol related stuffs?
> 
> Any infomation would be warmly welcome, thanks in advance!

On Windows, you could probably achieve this with the pythoncom facilities of
Mark Hammond's win32all package.  Delphi apparently works quite well with
COM.

I haven't touched Windows for quite a while though, so I can't really help
with the details of doing that.

-Andrew.




From flashbuster at gmail.com  Fri Jul 15 10:04:09 2005
From: flashbuster at gmail.com (Sebastian Schulze)
Date: Fri, 15 Jul 2005 16:04:09 +0200
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
In-Reply-To: <20050715031153.GB9898@trogdor.home.puzzling.org>
References: <43c0d2b50507141937100f0aca@mail.gmail.com>
	<20050715031153.GB9898@trogdor.home.puzzling.org>
Message-ID: <c2959a42050715070420e851be@mail.gmail.com>

It's just a guess, but i would think you could write a wrapper for this
with swig (www.swig.org) or boost
(http://www.boost.org/libs/python/doc/index.html)

greets, Sebastian

2005/7/15, Andrew Bennetts <andrew-twisted at puzzling.org>:
> On Fri, Jul 15, 2005 at 10:37:04AM +0800, Eric Hsu wrote:
> [...]
> >
> > Here comes the question: is it possible to build the protocol related
> > classes from the server to be some kind of .dll, so that the app could
> > invoke them, reuse them to handle the protocol related stuffs?
> >
> > Any infomation would be warmly welcome, thanks in advance!
> 
> On Windows, you could probably achieve this with the pythoncom facilities of
> Mark Hammond's win32all package.  Delphi apparently works quite well with
> COM.
> 
> I haven't touched Windows for quite a while though, so I can't really help
> with the details of doing that.
> 
> -Andrew.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From itamar at itamarst.org  Sat Jul 16 11:24:23 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 16 Jul 2005 11:24:23 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14171 - Simplify and fix
	horribly broken deferToThread tests
In-Reply-To: <E1DtoD6-0001Oa-00@wolfwood>
References: <E1DtoD6-0001Oa-00@wolfwood>
Message-ID: <1121527463.7870.19.camel@localhost.localdomain>

On Sat, 2005-07-16 at 09:04 -0600, Jp Calderone wrote:
> Author: exarkun
> Date: Sat Jul 16 09:04:11 2005
> New Revision: 14171
> 
> Modified:
>    trunk/twisted/test/test_threads.py
> Log:
> Simplify and fix horribly broken deferToThread tests

This won't catch bugs where the Deferred is never callback()ed.




From exarkun at divmod.com  Sat Jul 16 13:09:05 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 16 Jul 2005 13:09:05 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14171 - Simplify and fix
	horribly broken deferToThread tests
In-Reply-To: <1121527463.7870.19.camel@localhost.localdomain>
Message-ID: <20050716170905.26278.1006827823.divmod.quotient.13052@ohm>

On Sat, 16 Jul 2005 11:24:23 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Sat, 2005-07-16 at 09:04 -0600, Jp Calderone wrote:
>> Author: exarkun
>> Date: Sat Jul 16 09:04:11 2005
>> New Revision: 14171
>>
>> Modified:
>>    trunk/twisted/test/test_threads.py
>> Log:
>> Simplify and fix horribly broken deferToThread tests
>
>This won't catch bugs where the Deferred is never callback()ed.
>

Trial will eventually give up on the Deferred and fail the test.  It'll take a lot longer than the 1 second it previously took, but I still think it's a good change, since the previous version *always* took the full second (the loop never exited early), and probably wasn't doing threadpool initialization properly.

Jp



From andy at thecablelounge.com  Sat Jul 16 21:14:58 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Sun, 17 Jul 2005 11:14:58 +1000
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
In-Reply-To: <43c0d2b50507141937100f0aca@mail.gmail.com>
References: <43c0d2b50507141937100f0aca@mail.gmail.com>
Message-ID: <42D9B112.4000904@thecablelounge.com>

Eric Hsu wrote:

> Here comes the question: is it possible to build the protocol related
> classes from the server to be some kind of .dll, so that the app could
> invoke them, reuse them to handle the protocol related stuffs?

An alternative approach might be to expose your server's functionality 
via xmlrpc.  Not sure what writing xmlrpc clients in delphi is like; but 
it might be more pleasant than trying to generate dlls and makes other 
things possible.

good luck :)

Andy.



From nkeric at gmail.com  Sun Jul 17 23:32:38 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 18 Jul 2005 11:32:38 +0800
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
In-Reply-To: <42D9B112.4000904@thecablelounge.com>
References: <43c0d2b50507141937100f0aca@mail.gmail.com>
	<42D9B112.4000904@thecablelounge.com>
Message-ID: <43c0d2b50507172032653bdef4@mail.gmail.com>

Big thanks to Bob, Andrew, Sabastian and Andy!

I found the server-side com would be helpful to us: wrap the python
code to be a server-side com, and let other win32 programs to invoke
it.

It's very kind of you providing me so much helpful informations, thank
you all guys :D

Best regards!

- Eric



From nkeric at gmail.com  Sun Jul 17 23:46:42 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 18 Jul 2005 11:46:42 +0800
Subject: [Twisted-Python] Any tutorial/sample-code for khashmir or DHT?
Message-ID: <43c0d2b505071720467da10002@mail.gmail.com>

Hi all,

I'm trying to learn the DHT (distributed hash table) which could be
used to build up a decentralize network.

I knew khashmir (http://khashmir.sourceforge.net) which has
implemented DHT with twisted. However, the project page of khashmir
presents no release, no docs, no sample code, no tutorial... but, it
has be included into the Bittorrent sources to implement the
"trackless" feature.

I'm wondering if someone could provide me or point me to some
sample-code or tutorial helping me to learn khashmir? TIA :)

Best Regards

- Eric



From stanc at al.com.au  Mon Jul 18 01:51:14 2005
From: stanc at al.com.au (Astan Chee)
Date: Mon, 18 Jul 2005 15:51:14 +1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
Message-ID: <42DB4352.2020803@al.com.au>

Hi Guys,
Im trying to make a psudo SSH client GUI, but it seems that I although I 
can 'ls' to a remote machine using twisted.conch, I cant `ls -al`. Also 
I cant seem to to ssh commands that have spaces in them. Although Im 
using a windows environment to SSH, i dont think that is the problem.
Here is a snippet of my code. Obviously I've already called 
reactor.run() and included appropriate modules and variables. I dont 
understand why ls works and ls -al doesnt. Also I was wondering if there 
are any existing command line SSH clients written with twisted similar 
to putty, but written in python.
Thanks!

class SimpleTransport(transport.SSHClientTransport):
    def verifyHostKey(self, hostKey, fingerprint):
        print 'host key fingerprint: %s' % fingerprint
        return defer.succeed(1)

    def connectionSecure(self):
        self.requestService(
            SimpleUserAuth(USER,
                SimpleConnection()))

class SimpleUserAuth(userauth.SSHUserAuthClient):
    def getPassword(self):
        return defer.succeed(PASSWORD)

    def getGenericAnswers(self, name, instruction, questions):
        print 'Name %s' % name
        print 'Instruction %s' % instruction
        answers = []
        for prompt, echo in questions:
            if echo:
                answer = raw_input(prompt)
            else:
                answer = getpass.getpass(prompt)
            answers.append(answer)
        return defer.succeed(answers)
           
    def getPublicKey(self):
        path = os.path.expanduser('~/.ssh/id_dsa')
        # this works with rsa too
        # just change the name here and in getPrivateKey
        if not os.path.exists(path) or self.lastPublicKey:
            # the file doesn't exist, or we've tried a public key
            return
        return keys.getPublicKeyString(path+'.pub')

    def getPrivateKey(self):
        path = os.path.expanduser('~/.ssh/id_dsa')
        return defer.succeed(keys.getPrivateKeyObject(path))

class SimpleConnection(connection.SSHConnection):
    def serviceStarted(self):
        self.openChannel(TrueChannel(2**16, 2**15, self))
        self.openChannel(FalseChannel(2**16, 2**15, self))
        self.openChannel(LsChannel(2**16, 2**15, self))

class TrueChannel(channel.SSHChannel):
    name = 'session' # needed for commands

    def openFailed(self, reason):
        print 'true failed', reason
   
    def channelOpen(self, ignoredData):
        self.conn.sendRequest(self, 'exec', common.NS('true'))

    def request_exit_status(self, data):
        status = struct.unpack('>L', data)[0]
        #print 'true status was: %s' % status
        self.loseConnection()

class FalseChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'false failed', reason

    def channelOpen(self, ignoredData):
        self.conn.sendRequest(self, 'exec', common.NS('false'))

    def request_exit_status(self, data):
        status = struct.unpack('>L', data)[0]
        #print 'false status was: %s' % status
        self.loseConnection()
       
class LsChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'false failed', reason

    def channelOpen(self, ignoredData):
        self.conn.sendRequest(self, 'exec', common.NS('ls -al'))
        self.data = ''

    def dataReceived(self, data):
        self.data += data

    def closed(self):
        print 'got data from ls: %s' % repr(self.data)
        self.loseConnection()
        reactor.stop()
       
class CatChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'echo failed', reason

    def channelOpen(self, ignoredData):
        self.data = ''
        d = self.conn.sendRequest(self, 'exec', common.NS('cat'), 
wantReply = 1)
        d.addCallback(self._cbRequest)

    def _cbRequest(self, ignored):
        self.write('hello conch\n')
        self.conn.sendEOF(self)

    def dataReceived(self, data):
        self.data += data

    def closed(self):
        print 'got data from cat: %s' % repr(self.data)
        self.loseConnection()




From stanc at al.com.au  Mon Jul 18 03:02:52 2005
From: stanc at al.com.au (Astan Chee)
Date: Mon, 18 Jul 2005 17:02:52 +1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DB4352.2020803@al.com.au>
References: <42DB4352.2020803@al.com.au>
Message-ID: <42DB541C.20507@al.com.au>

Whoops,
I forgot to add the wantReply=1 there...
anyway, Another question I have is if the password is incorrect, quit 
the python script...

currently the getPassword function looks like this
RETRIES = 0
def getPassword(self):
        global RETRIES
        if RETRIES  == 0:
            RETRIES = 1
            return defer.succeed(PASSWORD)
        else:           
            sys.exit(0)

But it keeps on giving this error:
Traceback (most recent call last):
  File "c:\Python24\lib\site-packages\twisted\python\context.py", line 
31, in ca
llWithContext
    return func(*args,**kw)
  File 
"c:\Python24\lib\site-packages\twisted\internet\selectreactor.py", line 1
39, in _doReadOrWrite
    why = getattr(selectable, method)()
  File "c:\Python24\lib\site-packages\twisted\internet\tcp.py", line 
351, in doR
ead
    return self.protocol.dataReceived(data)
  File "c:\Python24\Lib\site-packages\twisted\conch\ssh\transport.py", 
line 189,
 in dataReceived
    ord(packet[0]), packet[1:])
--- <exception caught here> ---
  File "c:\Python24\lib\site-packages\twisted\python\log.py", line 56, 
in callWi
thLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File "c:\Python24\lib\site-packages\twisted\python\log.py", line 41, 
in callWi
thContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "c:\Python24\lib\site-packages\twisted\python\context.py", line 
52, in ca
llWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "c:\Python24\lib\site-packages\twisted\python\context.py", line 
31, in ca
llWithContext
    return func(*args,**kw)
  File "c:\Python24\Lib\site-packages\twisted\conch\ssh\service.py", 
line 42, in
 packetReceived
    f(packet)
  File "c:\Python24\Lib\site-packages\twisted\conch\ssh\userauth.py", 
line 259,
in ssh_USERAUTH_FAILURE
    if method not in self.authenticatedWith and self.tryAuth(method):
  File "c:\Python24\Lib\site-packages\twisted\conch\ssh\userauth.py", 
line 231,
in tryAuth
    return f()
  File "c:\Python24\Lib\site-packages\twisted\conch\ssh\userauth.py", 
line 344,
in auth_password
    d = self.getPassword()
  File "D:\stanc_vault\dev\WHIP\whip.py", line 67, in getPassword
    sys.exit(1)
exceptions.SystemExit: 1

Astan Chee wrote:

> Hi Guys,
> Im trying to make a psudo SSH client GUI, but it seems that I although 
> I can 'ls' to a remote machine using twisted.conch, I cant `ls -al`. 
> Also I cant seem to to ssh commands that have spaces in them. Although 
> Im using a windows environment to SSH, i dont think that is the problem.
> Here is a snippet of my code. Obviously I've already called 
> reactor.run() and included appropriate modules and variables. I dont 
> understand why ls works and ls -al doesnt. Also I was wondering if 
> there are any existing command line SSH clients written with twisted 
> similar to putty, but written in python.
> Thanks!
>
> class SimpleTransport(transport.SSHClientTransport):
>    def verifyHostKey(self, hostKey, fingerprint):
>        print 'host key fingerprint: %s' % fingerprint
>        return defer.succeed(1)
>
>    def connectionSecure(self):
>        self.requestService(
>            SimpleUserAuth(USER,
>                SimpleConnection()))
>
> class SimpleUserAuth(userauth.SSHUserAuthClient):
>    def getPassword(self):
>        return defer.succeed(PASSWORD)
>
>    def getGenericAnswers(self, name, instruction, questions):
>        print 'Name %s' % name
>        print 'Instruction %s' % instruction
>        answers = []
>        for prompt, echo in questions:
>            if echo:
>                answer = raw_input(prompt)
>            else:
>                answer = getpass.getpass(prompt)
>            answers.append(answer)
>        return defer.succeed(answers)
>              def getPublicKey(self):
>        path = os.path.expanduser('~/.ssh/id_dsa')
>        # this works with rsa too
>        # just change the name here and in getPrivateKey
>        if not os.path.exists(path) or self.lastPublicKey:
>            # the file doesn't exist, or we've tried a public key
>            return
>        return keys.getPublicKeyString(path+'.pub')
>
>    def getPrivateKey(self):
>        path = os.path.expanduser('~/.ssh/id_dsa')
>        return defer.succeed(keys.getPrivateKeyObject(path))
>
> class SimpleConnection(connection.SSHConnection):
>    def serviceStarted(self):
>        self.openChannel(TrueChannel(2**16, 2**15, self))
>        self.openChannel(FalseChannel(2**16, 2**15, self))
>        self.openChannel(LsChannel(2**16, 2**15, self))
>
> class TrueChannel(channel.SSHChannel):
>    name = 'session' # needed for commands
>
>    def openFailed(self, reason):
>        print 'true failed', reason
>      def channelOpen(self, ignoredData):
>        self.conn.sendRequest(self, 'exec', common.NS('true'))
>
>    def request_exit_status(self, data):
>        status = struct.unpack('>L', data)[0]
>        #print 'true status was: %s' % status
>        self.loseConnection()
>
> class FalseChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'false failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.conn.sendRequest(self, 'exec', common.NS('false'))
>
>    def request_exit_status(self, data):
>        status = struct.unpack('>L', data)[0]
>        #print 'false status was: %s' % status
>        self.loseConnection()
>       class LsChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'false failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.conn.sendRequest(self, 'exec', common.NS('ls -al'))
>        self.data = ''
>
>    def dataReceived(self, data):
>        self.data += data
>
>    def closed(self):
>        print 'got data from ls: %s' % repr(self.data)
>        self.loseConnection()
>        reactor.stop()
>       class CatChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'echo failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.data = ''
>        d = self.conn.sendRequest(self, 'exec', common.NS('cat'), 
> wantReply = 1)
>        d.addCallback(self._cbRequest)
>
>    def _cbRequest(self, ignored):
>        self.write('hello conch\n')
>        self.conn.sendEOF(self)
>
>    def dataReceived(self, data):
>        self.data += data
>
>    def closed(self):
>        print 'got data from cat: %s' % repr(self.data)
>        self.loseConnection()
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From andrew-twisted at puzzling.org  Mon Jul 18 03:22:11 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 18 Jul 2005 17:22:11 +1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DB541C.20507@al.com.au>
References: <42DB4352.2020803@al.com.au> <42DB541C.20507@al.com.au>
Message-ID: <20050718072211.GE9898@trogdor.home.puzzling.org>

On Mon, Jul 18, 2005 at 05:02:52PM +1000, Astan Chee wrote:
> Whoops,
> I forgot to add the wantReply=1 there...
> anyway, Another question I have is if the password is incorrect, quit 
> the python script...
> 
> currently the getPassword function looks like this
> RETRIES = 0
> def getPassword(self):
>        global RETRIES
>        if RETRIES  == 0:
>            RETRIES = 1
>            return defer.succeed(PASSWORD)
>        else:           
>            sys.exit(0)

Use reactor.stop() rather than sys.exit(0).

-Andrew.




From p.mayers at imperial.ac.uk  Mon Jul 18 03:29:33 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 18 Jul 2005 08:29:33 +0100
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DB541C.20507@al.com.au>
References: <42DB4352.2020803@al.com.au> <42DB541C.20507@al.com.au>
Message-ID: <42DB5A5D.9070708@imperial.ac.uk>

Astan Chee wrote:
> def getPassword(self):
>        global RETRIES
>        if RETRIES  == 0:
>            RETRIES = 1
>            return defer.succeed(PASSWORD)
>        else:                      sys.exit(0)
> 
> But it keeps on giving this error:
Yes, that's what sys.exit does, raise a SystemExit exception.

If you actually want a non-zero exit status, you need to reactor.stop 
and save your exit status somewhere, e.g.

exitstatus=0

def thing():
     global exitstatus
     if fail:
         exitstatus = 1
     reactor.stop()

reactor.run()
# We'll only get here once reactor.stop is called
sys.exit(exitstatus)

A trivial bit of thought can solve this more elegantly than a global (gak!)



From bob at redivi.com  Mon Jul 18 03:37:41 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 17 Jul 2005 21:37:41 -1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DB541C.20507@al.com.au>
References: <42DB4352.2020803@al.com.au> <42DB541C.20507@al.com.au>
Message-ID: <303DD736-E804-4C3E-B628-A164A07A749F@redivi.com>


On Jul 17, 2005, at 9:02 PM, Astan Chee wrote:

> Whoops,
> I forgot to add the wantReply=1 there...
> anyway, Another question I have is if the password is incorrect,  
> quit the python script...
>
> currently the getPassword function looks like this
> RETRIES = 0
> def getPassword(self):
>        global RETRIES
>        if RETRIES  == 0:
>            RETRIES = 1
>            return defer.succeed(PASSWORD)
>        else:                      sys.exit(0)

reactor.stop() is what you want here.

-bob




From tdickenson at devmail.geminidataloggers.co.uk  Mon Jul 18 05:54:57 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Mon, 18 Jul 2005 10:54:57 +0100
Subject: [Twisted-Python] threadedselectreactor - shutting down the foreign
	event loop
Message-ID: <200507181054.57558.tdickenson@devmail.geminidataloggers.co.uk>

Im looking at moving my PyQt app to threadedselectreactor. Previously I was 
keeping twisted and Qt in seperate threads. Avoiding the need to cross that 
thread boundary has been a great simplification, but Im having some problems 
relating to the shutdown of my foreign event loop.

The examples such as 
http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/threadedselect/pygamedemo.py?view=auto&rev=13596
handle this by:
a. Calling reactor.stop() when there is a GUI shutdown request, 
b. Using reactor.addSystemEventTrigger to shut down the foreign event loop 
after reactor shutdown.

That approach seems untenable for me, for several reasons:
1. Too invasive. I dont want to pollute Qt code with Twisted details.
2. If my app is runing as a COM server then Pythoncom handles the main loop, 
not Qt. More pollution.
3. The reactor doesnt get shutdown if the foreign event loop shuts down for 
some other reason. This leads to deadlocks when the threading module tries to 
join the threads managed by the threadpool module, because the threadpool 
does know to close those threads.

Im having moderate success with the following alternative structure which 
closes the reactor *after* whatever foreign event loop has exited, but it 
feels like I am relying on undocumented reactor implementation accidents 
here:

from twisted.internet.threadedselectreactor import install as twisted_install
reactor = twisted_install()
reactor.interleave(trigger)
try:
        my_event_loop_in_here()
finally:
	# Request that the reactor stops itself. Internally the
        # reactor uses self.callLater, so shutdown is not complete
        # when this method returns.
        reactor.stop()
        # One call to reactor.iterate is sufficient to complete
        # All reactor shutdown events. 
        reactor.iterate()
        # Reactor is now fully shutdown

Is there a better approach?

Should something like my finally block be included as a method of 
threadedselectreactor?

Is it right for reactor.stop to return before the shutdown is complete?

-- 
Toby Dickenson



From bob at redivi.com  Mon Jul 18 06:43:25 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 18 Jul 2005 00:43:25 -1000
Subject: [Twisted-Python] threadedselectreactor - shutting down the
	foreign event loop
In-Reply-To: <200507181054.57558.tdickenson@devmail.geminidataloggers.co.uk>
References: <200507181054.57558.tdickenson@devmail.geminidataloggers.co.uk>
Message-ID: <1B4260BA-FD53-44C7-926B-9E0ED67A694C@redivi.com>

On Jul 17, 2005, at 11:54 PM, Toby Dickenson wrote:

> Im looking at moving my PyQt app to threadedselectreactor.  
> Previously I was
> keeping twisted and Qt in seperate threads. Avoiding the need to  
> cross that
> thread boundary has been a great simplification, but Im having some  
> problems
> relating to the shutdown of my foreign event loop.
>
> The examples such as
> http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/ 
> threadedselect/pygamedemo.py?view=auto&rev=13596
> handle this by:
> a. Calling reactor.stop() when there is a GUI shutdown request,
> b. Using reactor.addSystemEventTrigger to shut down the foreign  
> event loop
> after reactor shutdown.

This is currently the only supported and recommended way.

> That approach seems untenable for me, for several reasons:
> 1. Too invasive. I dont want to pollute Qt code with Twisted details.
> 2. If my app is runing as a COM server then Pythoncom handles the  
> main loop,
> not Qt. More pollution.
> 3. The reactor doesnt get shutdown if the foreign event loop shuts  
> down for
> some other reason. This leads to deadlocks when the threading  
> module tries to
> join the threads managed by the threadpool module, because the  
> threadpool
> does know to close those threads.

1. I guess that's too bad, then.  It's less invasive than the  
alternatives (using an event-loop specific reactor, managing threads  
yourself).  It's also really the only reliable and correct way to do  
it, see below.

2. Each different style of foreign event loop is going to need a  
different waker function and shutdown code.  That's life.  There is  
no happy magical cross-platform-toolkit-API to solve this problem.   
It's amazing that threadedselectreactor can do what it does so  
generically with just two minor integration hooks.  In the same way  
your application can start up in two different modes, you're going to  
need different Twisted integration code.

3. The "pollution" is really quite minimal, you add a couple lines to  
defer shutdown of the foreign event loop until the reactor is has  
properly shut down.  If the foreign event loop shuts down out of your  
control, you probably have other issues.

> Im having moderate success with the following alternative structure  
> which
> closes the reactor *after* whatever foreign event loop has exited,  
> but it
> feels like I am relying on undocumented reactor implementation  
> accidents
> here:

You are relying on exactly implementation accidents here.  Even with  
the implementation accidents that make it appear to work, your  
proposed alternative has edge cases that will be rare and impossible  
to reproduce (yay threads).

> from twisted.internet.threadedselectreactor import install as  
> twisted_install
> reactor = twisted_install()
> reactor.interleave(trigger)
> try:
>         my_event_loop_in_here()
> finally:
>     # Request that the reactor stops itself. Internally the
>         # reactor uses self.callLater, so shutdown is not complete
>         # when this method returns.
>         reactor.stop()
>         # One call to reactor.iterate is sufficient to complete
>         # All reactor shutdown events.
>         reactor.iterate()
>         # Reactor is now fully shutdown
>
> Is there a better approach?

The problem is that the waker function (trigger in the above) can be  
called at any time -- and it's always called from another thread.  In  
order to shut down the reactor properly, the waker function needs to  
continue to work for the duration of shutdown.  reactor.stop() can  
take many runloop iterations to complete, as it can involve arbitrary  
deferreds and even new network I/O.  If the foreign event loop has  
shut down already, it probably won't work, and you won't be able to  
do a proper shutdown.

It's possible, I guess, use a proxy for the waker function that uses  
a thread lock so that you can reliably swap out the real waker at the  
right time.  However, you must somehow acquire that lock before your  
foreign event loop has shut down (which is of the same level of  
invasiveness as the recommended solution!) so that it will block the  
proxy call until a new waker is installed.  In the finally clause,  
you'd install a new trivial waker (the apply function would work) and  
release that lock so that any pending calls would complete.

With any naive solution, it's possible for a message between the  
threadedselectreactor's worker thread and the main thread could get  
lost, and then you have a reactor that is in an undefined state.  The  
waker function must work, or else the reactor won't.

Note that your above code has another problem: it calls  
reactor.interleave too early.  For the same reason you will have edge  
cases during shutdown, you can (in some circumstances) have edge  
cases during startup if the waker function does not work properly  
before you have entered the foreign event loop!  Note that in all of  
the examples, reactor.interleave(...) is called while the foreign  
event loop has already begun (yay threads, again).

> Should something like my finally block be included as a method of
> threadedselectreactor?

I doubt it, it's not really possible to make a correct one that's  
generic.  At least, I can't think of any correct way.  Correct  
patches accepted :)

> Is it right for reactor.stop to return before the shutdown is  
> complete?

Yes, always, even with the traditional reactors!  The reactor can not  
nest itself, nor can multiple reactors be used in the same process,  
so it wouldn't be possible for reactor.stop() to work correctly if it  
blocked.

-bob




From tdickenson at devmail.geminidataloggers.co.uk  Mon Jul 18 08:41:15 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Mon, 18 Jul 2005 13:41:15 +0100
Subject: [Twisted-Python] threadedselectreactor - shutting down the
	foreign event loop
In-Reply-To: <1B4260BA-FD53-44C7-926B-9E0ED67A694C@redivi.com>
References: <200507181054.57558.tdickenson@devmail.geminidataloggers.co.uk>
	<1B4260BA-FD53-44C7-926B-9E0ED67A694C@redivi.com>
Message-ID: <200507181341.15727.tdickenson@devmail.geminidataloggers.co.uk>

(resend)

On Monday 18 July 2005 11:43, Bob Ippolito wrote:
> On Jul 17, 2005, at 11:54 PM, Toby Dickenson wrote:

> > a. Calling reactor.stop() when there is a GUI shutdown request,
> > b. Using reactor.addSystemEventTrigger to shut down the foreign  
> > event loop
> > after reactor shutdown.
> 
> This is currently the only supported and recommended way.

Thanks for that clear statement.

> It's possible, I guess, use a proxy for the waker function that uses  
> a thread lock so that you can reliably swap out the real waker at the  
> right time.  However, you must somehow acquire that lock before your  
> foreign event loop has shut down (which is of the same level of  
> invasiveness as the recommended solution!) so that it will block the  
> proxy call until a new waker is installed.  In the finally clause,  
> you'd install a new trivial waker (the apply function would work) and  
> release that lock so that any pending calls would complete.

Yes, that is much neater.

My 'trigger' waker function is already queueing requests (it is used for more 
than just twisted integration) so I dont need to replace the waker - rather 
my finally clause needs to contain a new mini event loop that continues to 
processing my queue until the reactor is fully closed. As far as 
threadedselectreactor is concerned this looks no different to my normal event 
loop.

Thanks again,

-- 
Toby Dickenson



From hikenboots at gmail.com  Mon Jul 18 11:02:09 2005
From: hikenboots at gmail.com (J French)
Date: Mon, 18 Jul 2005 10:02:09 -0500
Subject: [Twisted-Python] High Level Twisted Question [Multiple Protocol
	Usage]
Message-ID: <35b7725f05071808029593c9e@mail.gmail.com>

I'm working with Twisted and getting my head around it but I still
have some general paradigm questions.

When using Twisted to create an application to run under twistd, is it
possible to implement more than one protocol?  For instance, If I
write a server which uses PB to interface with its python client, can
I then also check pop3 boxes from the same application / twistd process?

Put another way: When incorporating functionality into a server app
requiring multiple protocols (PB, SMTP, HTTP, etc.) what is the
standard way of effecting this?

Sorry for another newbie question and thanks for your time.



From jarrod.roberson at gmail.com  Mon Jul 18 12:09:02 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Mon, 18 Jul 2005 12:09:02 -0400
Subject: [Twisted-Python] High Level Twisted Question [Multiple Protocol
	Usage]
In-Reply-To: <35b7725f05071808029593c9e@mail.gmail.com>
References: <35b7725f05071808029593c9e@mail.gmail.com>
Message-ID: <2389d473050718090952a925dd@mail.gmail.com>

On 7/18/05, J French <hikenboots at gmail.com> wrote:
> 
> I'm working with Twisted and getting my head around it but I still
> have some general paradigm questions.
> 
> When using Twisted to create an application to run under twistd, is it
> possible to implement more than one protocol? For instance, If I
> write a server which uses PB to interface with its python client, can
> I then also check pop3 boxes from the same application / twistd process?
> 
> Put another way: When incorporating functionality into a server app
> requiring multiple protocols (PB, SMTP, HTTP, etc.) what is the
> standard way of effecting this?
> 
> Sorry for another newbie question and thanks for your time.
> 
> ______________________________________________



yes you use a Service and you can implement as many concurrent protocol 
interfaces as you like 




-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050718/cc424b39/attachment.htm 

From justinjohnson at gmail.com  Mon Jul 18 13:52:13 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 18 Jul 2005 12:52:13 -0500
Subject: [Twisted-Python] IOCP and CANCELLED asynchronous I/O operation
Message-ID: <94a776e705071810525c32e1c0@mail.gmail.com>

I am wondering if someone would be willing to assist me in debugging a 
problem I'm experiencing with my current attempt at an implementation of 
spawnProcess for the IOCP proactor.
 A patch with my implementation can be found at 
http://twistedmatrix.com/bugs/issue1008 along with comments and a log file 
describing my problem.
 The problem occurs sporadically when running 
twisted.test.test_process.ProcessTestCase.testProcesstwisted.test.test_process. 
First I create 3 pipes that will be used to write to the child process's 
stdin and read its stdout and stderr. Then I initiate a read on all 3 pipes. 
The reads makes sense for stdout and stderr. The stdin pipe is created in 
duplex mode and the read attempt on it from the parent is only there so we 
can detect when the child closes its end of the pipe so the parent can close 
its end as well.
 The problem is that occasionally (often, but not consistently) the read 
operations on stdin (and sometimes stderr) seem to not run at all and 
FileMon reports their status as CANCELLED when I get to the end of the 
program. If I run trial run through pdb and step through it, the result of 
CANCELLED for these 1 or 2 (if stderr fails as well) reads doesn't appear 
until the very end of the program. The callbacks (ReadInOp.ovDone and 
ReadErrOp.ovDone don't get called for either of these when the failure 
occurs, so FileMon's results seem to accurately reflect what is happening. 
However, from my print statements it is clear that the reads are initiated (
ReadInOp.initiateOp and ReadErrOp.initiateOp).
 The closest thing I can find to a description of what CANCELLED might mean 
is at http://www.cs.princeton.edu/~appel/smlnj/basis/posix-error.html which 
says it indicates that the associated asynchronous operation was cancelled 
before completion. This sounds correct, but doesn't help illuminate *why* 
this is happening.
 Does anyone have any suggestions as to why this is happening?
 Thanks in advance.
Justin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050718/ca6d9e4d/attachment.htm 

From jredburn at gmail.com  Mon Jul 18 14:05:20 2005
From: jredburn at gmail.com (Jeremy Redburn)
Date: Mon, 18 Jul 2005 14:05:20 -0400
Subject: [Twisted-Python] XMPP/Jabber server using Twisted
Message-ID: <1aed0a705071811054453a4cb@mail.gmail.com>

I am looking into coding up a simple XMPP server in Python to accept
simple XML-RPC calls. I was wondering if there was any sort of "Hello
World" client and server examples, or if there is active work being
done on XMPP support in Twisted?

Thanks much,
Jeremy



From twisted at ralphm.ik.nu  Mon Jul 18 14:32:23 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Mon, 18 Jul 2005 20:32:23 +0200
Subject: [Twisted-Python] XMPP/Jabber server using Twisted
In-Reply-To: <1aed0a705071811054453a4cb@mail.gmail.com>
References: <1aed0a705071811054453a4cb@mail.gmail.com>
Message-ID: <20050718183223.GA12031@ik.nu>

On Mon, Jul 18, 2005 at 02:05:20PM -0400, Jeremy Redburn wrote:
> I am looking into coding up a simple XMPP server in Python to accept
> simple XML-RPC calls. I was wondering if there was any sort of "Hello
> World" client and server examples,

Not yet, unfortunately, but I'm willing to help you out. Either in
#twisted or via Jabber (<xmpp:ralphm at ik.nu>).

> or if there is active work being done on XMPP support in Twisted?

Yes. I'm working on it. Currently, I'm busy reworking the interaction
between the Xish module and the Jabber module in Words. Then, I'll add
TLS and SASL support (using patches by Tofu), and hopefully work on
documentation afterwards.

-- 
Groetjes,

ralphm



From andy at thecablelounge.com  Mon Jul 18 18:47:15 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue, 19 Jul 2005 08:47:15 +1000
Subject: [Twisted-Python] High Level Twisted Question [Multiple Protocol
	Usage]
In-Reply-To: <2389d473050718090952a925dd@mail.gmail.com>
References: <35b7725f05071808029593c9e@mail.gmail.com>
	<2389d473050718090952a925dd@mail.gmail.com>
Message-ID: <42DC3173.1050700@thecablelounge.com>

> On 7/18/05, *J French* <hikenboots at gmail.com 
>>     Put another way: When incorporating functionality into a server app
>>     requiring multiple protocols (PB, SMTP, HTTP, etc.) what is the
>>     standard way of effecting this?

jarrod roberson wrote:
> yes you use a Service  and  you can implement as many concurrent  
> protocol interfaces as you like

If you stay with the finger example, it'll get you there:

http://twistedmatrix.com/projects/core/documentation/howto/tutorial/index.html

good luck,
Andy.



From stanc at al.com.au  Mon Jul 18 19:37:14 2005
From: stanc at al.com.au (Astan Chee)
Date: Tue, 19 Jul 2005 09:37:14 +1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DB5A5D.9070708@imperial.ac.uk>
References: <42DB4352.2020803@al.com.au> <42DB541C.20507@al.com.au>
	<42DB5A5D.9070708@imperial.ac.uk>
Message-ID: <42DC3D2A.8030408@al.com.au>

Thanks for the help.
Another thing I was wondering about is if any of the twisted components 
supports rsh? or is just using the` rsh` command easiest?
Also where can I find detailed documentation on twisted classes and its 
method? or is diving into the code my best way?
thanks again
Cheers

Phil Mayers wrote:

> Astan Chee wrote:
>
>> def getPassword(self):
>>        global RETRIES
>>        if RETRIES  == 0:
>>            RETRIES = 1
>>            return defer.succeed(PASSWORD)
>>        else:                      sys.exit(0)
>>
>> But it keeps on giving this error:
>
> Yes, that's what sys.exit does, raise a SystemExit exception.
>
> If you actually want a non-zero exit status, you need to reactor.stop 
> and save your exit status somewhere, e.g.
>
> exitstatus=0
>
> def thing():
>     global exitstatus
>     if fail:
>         exitstatus = 1
>     reactor.stop()
>
> reactor.run()
> # We'll only get here once reactor.stop is called
> sys.exit(exitstatus)
>
> A trivial bit of thought can solve this more elegantly than a global 
> (gak!)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From foom at fuhm.net  Mon Jul 18 20:13:30 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 18 Jul 2005 20:13:30 -0400
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DC3D2A.8030408@al.com.au>
References: <42DB4352.2020803@al.com.au> <42DB541C.20507@al.com.au>
	<42DB5A5D.9070708@imperial.ac.uk> <42DC3D2A.8030408@al.com.au>
Message-ID: <7AA1A616-441E-42A5-A00B-CB7B9E5C282F@fuhm.net>

On Jul 18, 2005, at 7:37 PM, Astan Chee wrote:
> Thanks for the help.
> Another thing I was wondering about is if any of the twisted  
> components supports rsh? or is just using the` rsh` command easiest?
> Also where can I find detailed documentation on twisted classes and  
> its method? or is diving into the code my best way?
> thanks again

Why would anybody use, never mind implement, rsh? It's a stupid  
broken insecure protocol.

James



From exarkun at divmod.com  Mon Jul 18 20:25:45 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 18 Jul 2005 20:25:45 -0400
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DC3D2A.8030408@al.com.au>
Message-ID: <20050719002545.26278.1265970742.divmod.quotient.14470@ohm>

On Tue, 19 Jul 2005 09:37:14 +1000, Astan Chee <stanc at al.com.au> wrote:
>Thanks for the help.
>Another thing I was wondering about is if any of the twisted components 
>supports rsh? or is just using the` rsh` command easiest?
>Also where can I find detailed documentation on twisted classes and its 
>method? or is diving into the code my best way?
>thanks again
>Cheers

rsh uses the rlogin protocol.  The rlogin protocol is immensely trivial.  A Twisted implementation would probably be less than 10 lines, but one is not included with Twisted.  Implementing it would probably be easier than shelling out to an rsh(1) binary.  Twisted *does* include an SSH implementation, though.  In most cases that is vastly preferable.

Twisted uses epydoc markup extensively.  The resulting automatically generated documentation is available at <http://twistedmatrix.com/documents/current/api/>.

Diving into the source is also a really good way to become familiar with what Twisted can do.  This can also give you a sense of the level of completion and polish a particular area of Twisted has, which is not always readily apparent from the API documentation.

Jp



From stanc at al.com.au  Mon Jul 18 20:47:40 2005
From: stanc at al.com.au (Astan Chee)
Date: Tue, 19 Jul 2005 10:47:40 +1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <20050719002545.26278.1265970742.divmod.quotient.14470@ohm>
References: <20050719002545.26278.1265970742.divmod.quotient.14470@ohm>
Message-ID: <42DC4DAC.50706@al.com.au>

Thanks for that, but since I've been using twisted's ssh, it doesnt 
disconnect me from the server whenever I exit. It seems that for some 
reason if I call the SimpleTransport class after I've called and 
destroyed(how do I destroy a protocol.ClientFactory() class anyway?)  it 
once, it becomes stuck. I wonder if this is an unresolved bug, oh well. 
The logs look something like this:

2005/07/19 10:41 AUS Eastern Standard Time [-] Log opened.
2005/07/19 10:41 AUS Eastern Standard Time [-] Starting factory 
<twisted.internet.protocol.ClientFactory instance at 0x01C9D580>
2005/07/19 10:41 AUS Eastern Standard Time [-] Enabling Multithreading.
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] kex 
alg, key alg: diffie-hellman-group-exchange-sha1 ssh-rsa
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] 
client->server: aes256-cbc hmac-sha1 none
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] 
server->client: aes256-cbc hmac-sha1 none
host key fingerprint: 3f:ae:08:ab:0a:79:c9:65:61:f0:ec:5e:1e:48:ee:69
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] 
starting service ssh-userauth
2005/07/19 10:41 AUS Eastern Standard Time [SSHService ssh-userauth on 
SimpleTransport,client] can continue with: ['publickey', 'password', 
'keyboard-in
2005/07/19 10:41 AUS Eastern Standard Time [SSHService ssh-userauth on 
SimpleTransport,client] trying to auth with publickey
2005/07/19 10:41 AUS Eastern Standard Time [SSHService ssh-userauth on 
SimpleTransport,client] trying to auth with password
2005/07/19 10:41 AUS Eastern Standard Time [SSHService ssh-userauth on 
SimpleTransport,client] starting service ssh-connection
2005/07/19 10:41 AUS Eastern Standard Time [SSHService ssh-userauth on 
SimpleTransport,client] opening channel 0 with 65536 32768
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] sending request exec
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] sending eof
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] remote eof
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] unhandled request 
for exit-st
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] remote close
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] sending close 0
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] 
connection lost
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] 
Stopping factory <twisted.internet.protocol.ClientFactory instance at 
0x01C9D580>
2005/07/19 10:41 AUS Eastern Standard Time [-] Main loop terminated.
2005/07/19 10:41 AUS Eastern Standard Time [-] Log opened.
2005/07/19 10:41 AUS Eastern Standard Time [-] Log opened.
2005/07/19 10:41 AUS Eastern Standard Time [-] Starting factory 
<twisted.internet.protocol.ClientFactory instance at 0x01CAB148>
2005/07/19 10:41 AUS Eastern Standard Time [-] Starting factory 
<twisted.internet.protocol.ClientFactory instance at 0x01CAB148>
2005/07/19 10:41 AUS Eastern Standard Time [-] Stopping factory 
<twisted.internet.protocol.ClientFactory instance at 0x01CAB148>
2005/07/19 10:41 AUS Eastern Standard Time [-] Stopping factory 
<twisted.internet.protocol.ClientFactory instance at 0x01CAB148>


Jp Calderone wrote:

> On Tue, 19 Jul 2005 09:37:14 +1000, Astan Chee <stanc at al.com.au> wrote:
>
>> Thanks for the help.
>> Another thing I was wondering about is if any of the twisted 
>> components supports rsh? or is just using the` rsh` command easiest?
>> Also where can I find detailed documentation on twisted classes and 
>> its method? or is diving into the code my best way?
>> thanks again
>> Cheers
>
>
> rsh uses the rlogin protocol.  The rlogin protocol is immensely 
> trivial.  A Twisted implementation would probably be less than 10 
> lines, but one is not included with Twisted.  Implementing it would 
> probably be easier than shelling out to an rsh(1) binary.  Twisted 
> *does* include an SSH implementation, though.  In most cases that is 
> vastly preferable.
>
> Twisted uses epydoc markup extensively.  The resulting automatically 
> generated documentation is available at 
> <http://twistedmatrix.com/documents/current/api/>.
>
> Diving into the source is also a really good way to become familiar 
> with what Twisted can do.  This can also give you a sense of the level 
> of completion and polish a particular area of Twisted has, which is 
> not always readily apparent from the API documentation.
>
> Jp
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From michele.petrazzo at unipex.it  Tue Jul 19 08:02:32 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Tue, 19 Jul 2005 14:02:32 +0200
Subject: [Twisted-Python] protocol.Protocol and transport.write
Message-ID: <42DCEBD8.1010502@unipex.it>

I have a very simple application that try to open a connection on a port
on the local computer and if it has no program listening, it execute a
program file, else if it find a answer program, it send a string ( about
50/80 characters ).

After the upgrade to 2.0.x, it don't want to work well, because if it
has no response, it open the program correctly, but if it has response,
it send the message, but the message don't arrive to the listener.

After some tries, I see that into my code, I call reactor.stop before, I
think, reactor has ended to send my message. I resolve this with a
simple code: reactor.callLater(1, reactor.stop).

My question is: when I call reactor.stop, it close all, also if there
are some communication in progress? Is there another method to close the
communication (and in my case the program) when I'm sure that all the
works are ended?

Thanks,
Michele

My code:

class ConneExist(protocol.Protocol):
   #The server is listening
   def connectionMade(self):
     self.transport.write(file_name_path)
     out()

def out():
  # reactor.stop() <- here is a problem
  reactor.callLater(1, reactor.stop)



From radeex at gmail.com  Tue Jul 19 08:13:30 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 19 Jul 2005 22:13:30 +1000
Subject: [Twisted-Python] protocol.Protocol and transport.write
In-Reply-To: <42DCEBD8.1010502@unipex.it>
References: <42DCEBD8.1010502@unipex.it>
Message-ID: <60ed19d4050719051334b45abf@mail.gmail.com>

On 7/19/05, Michele Petrazzo <michele.petrazzo at unipex.it> wrote:
> My question is: when I call reactor.stop, it close all, also if there
> are some communication in progress? Is there another method to close the
> communication (and in my case the program) when I'm sure that all the
> works are ended?
> 
> class ConneExist(protocol.Protocol):
>    def connectionMade(self):
...
>   # reactor.stop() <- here is a problem
>   reactor.callLater(1, reactor.stop)


Just call reactor.stop() from connectionLost instead of connectionMade.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From disen at geo.unizh.ch  Wed Jul 20 06:24:05 2005
From: disen at geo.unizh.ch (Daniel Isenegger)
Date: Wed, 20 Jul 2005 12:24:05 +0200
Subject: [Twisted-Python] how to invoke an action in twisted matrix from a
	process
Message-ID: <42DE2645.3090609@geo.unizh.ch>

Hi, a newby question:
i try to invoke an action in a twisted matrix program from a process 
running on my machine:
for example:
i start a program (test.py), which generates output. test.py should call 
the twisted matrix program (which is already running and waiting for 
input) and hand over its output to the twisted matrix program.

to do this i examined the examples process.py and quotes.py (on the 
HOWTO pages of the twisted matrix homepage).
quotes.py seems to be an example which is quite close. When i start it 
on the shell, nothing happens.

if i understand right, quotes.py waits for a tcp-connection on port 10999.
Is it also possible to read the data from test.py from stdout (like in 
process.py) without invoking this program in the twisted matrix program

Thanks
Dani




From natester at gmail.com  Wed Jul 20 11:14:36 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Wed, 20 Jul 2005 09:14:36 -0600
Subject: [Twisted-Python] spawnProcess and deferreds
Message-ID: <4adac7a3050720081470e22508@mail.gmail.com>

I would like to spawn seperate processes from the methods program. 
What's the equivalent of spawnProcess for internal functions?

Is it twisted threads?  

Nate



From leszczynscy at yahoo.com  Wed Jul 20 18:37:29 2005
From: leszczynscy at yahoo.com (Andrzej Leszczynski)
Date: Wed, 20 Jul 2005 15:37:29 -0700 (PDT)
Subject: [Twisted-Python] timers
Message-ID: <20050720223729.60039.qmail@web30503.mail.mud.yahoo.com>

Hi folks,

short question, I implement a very custom statefull
protocol which need to have some timers in it. Can
someone point me to examples how to do that?


A.



From dguaraglia at gmx.de  Wed Jul 20 18:49:43 2005
From: dguaraglia at gmx.de (David Guaraglia)
Date: Wed, 20 Jul 2005 19:49:43 -0300
Subject: [Twisted-Python] timers
In-Reply-To: <20050720223729.60039.qmail@web30503.mail.mud.yahoo.com>
References: <20050720223729.60039.qmail@web30503.mail.mud.yahoo.com>
Message-ID: <42DED507.4070407@gmx.de>

What will you exactly do with the timers? Depending on the use you could 
replace the timers with a thread, or a deferred, or a TimeoutMixin.

David

Andrzej Leszczynski wrote:

>Hi folks,
>
>short question, I implement a very custom statefull
>protocol which need to have some timers in it. Can
>someone point me to examples how to do that?
>
>
>A.
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>  
>




From nkeric at gmail.com  Wed Jul 20 22:53:27 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Thu, 21 Jul 2005 10:53:27 +0800
Subject: [Twisted-Python] timers
In-Reply-To: <20050720223729.60039.qmail@web30503.mail.mud.yahoo.com>
References: <20050720223729.60039.qmail@web30503.mail.mud.yahoo.com>
Message-ID: <43c0d2b505072019532052a1b5@mail.gmail.com>

2005/7/21, Andrzej Leszczynski <leszczynscy at yahoo.com>:
> Hi folks,
> 
> short question, I implement a very custom statefull
> protocol which need to have some timers in it. Can
> someone point me to examples how to do that?
> 

I've written a ResourceManager which check frequently and release
resources if necessary, may the following code snippet helpful to you
:)

[code]
from twisted.internet import task
class ResourceManager:
    def __init__(self):
        interval = 5                     # check every 5 seconds
        releaser = task.LoopingCall(self._releaseResources)
        releaser.start(interval)

    def _releaseResource(self):
        [snip]
        ...
[/code]



From thomas at apestaart.org  Thu Jul 21 06:51:46 2005
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Thu, 21 Jul 2005 12:51:46 +0200
Subject: [Twisted-Python] subclassing and class methods returning deferreds
Message-ID: <1121943106.13938.3.camel@thomas.amantes>

Hi,

I wanted to have a class hierarchy where .stop methods would make sure
everything is cleaned up properly before reactors get stopped and such.
The obvious way to do that was to return a deferred that gets fired when
everything else is done, and make sure that deferred is handled
correctly everywhere.

So I wrote up an example that does this:
http://thomas.apestaart.org/download/tmp/subclass-deferred.py

I'd appreciate it if someone who's interested would take a look at it to
suggest some improvements, as I'm sure I might have overthought things a
little, or maybe there are better ways to do something like this.

Thanks,
Thomas

Dave/Dina : future TV today ! - http://www.davedina.org/
<-*- thomas (dot) apestaart (dot) org -*->
Welcome to Hits City, Jeff K - Population: you
<-*- thomas (at) apestaart (dot) org -*->
URGent, best radio on the net - 24/7 ! - http://urgent.fm/






From antonykummel at yahoo.com  Thu Jul 21 08:16:01 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Thu, 21 Jul 2005 05:16:01 -0700 (PDT)
Subject: [Twisted-Python] communication idioms with Perspective Broker
Message-ID: <20050721121601.89338.qmail@web33907.mail.mud.yahoo.com>


Hello,

 

I am using Twisted for a distributed application, and currently I am designing the basic objects of the application that will be transferred from process to process via PB. I ran into some conceptual problems, and I wonder if there are either general solutions (patterns, etc.) or Twisted-specific ones, or general ones already adapted to Twisted, etc.

 

Problems:

 

1. Synchronization of events and state/data changes: I want clients to be able to receive notifications from a server when certain events occur. When such events are related to changes in state or data of the server that are also accessible to the user, I want the client?s interface for retrieving the data and getting notified of the event to be coherent.

 

Example of the problem: Let?s say I have a server that can be in a state of being associated with a user, and that I want the server both to provide notifications to clients when it becomes associated or disassociated with a user, and to provide an isAssociated method that says if it is currently associated or not. If I provide the isAssociated functionality using a remote method call (with a referenceable), and the notification functionality also using a remote method call from the server to the client, then it is possible, for example, for a client to call twice the isAssociated method, and get a different result, without having received the notification (it may simply have not yet arrived), or also it is possible for the client to call isAssociated,  receive a notification that the state has changed, and only then get the result from the deferred returned by isAssociated, which reflects the state prior to the change.

 

The solution I came up with is to always expose associated events and data using a single cacheable object, so that when there is a change in state/data that should also make an event fire, the data change is propagated to the remote cache, and the remote cache fires an event locally (at the client?s side). This way, the client?s representation of the server?s state is always coherent.

 

2. Synchronization of remote commands and remote events/data changes: I want clients to be able to issue commands to a server that make its state or associated data change, and also to have an up-to-date representation of the state or data (and possible events issued by changes in the state/data). The problem is how to synchronize the firing of the deferred returned by the remote method call with the change in the client?s representation of the server?s state/data (i.e. to make sure that when the deferred fires, the client?s representation of the state is coherent with the command, i.e. changed).

 

Presently I have no solution for this, but I?m pretty sure that it requires some combination of referenceable and cacheable that will insure one coherent interface to associated data, events and commands. I am thinking to achieve this with a copyable that will contain both a referenceable and a cacheable.

 

3. Wrapping remote objects for non-online representation. I want to be able to have objects that can be used locally, but may also provide an interface to one or more servers that have to do with the state of the object. Another reason for these wrappers is that I want to be able to pass them freely from process to process, without being dependent on the connection or on a specific server.

 

For example, there could be a User object that may have a username and password, etc. and also an event that fires when the user connects to the system, and a remote method for sending him messages. The username and password may be required by a process regardless of being connected to a server that can provide the other functions (for example, a process may want to display to a user a list of all of the users of the system, but may also not be connected to a presence server that provides the other functionality). I would say that what is needed is an anti-Avatar ? an object that represents some hyper-service entity that may be connected to servers that enable some of its functions and may also not.

 

The question is, how to represent this to the user of the object. Whether to allow access to cached remote data and subscription to events when not online, whether to return a deferred and try to connect in case we don?t have the data or throw an exception, etc. I suppose this is mostly a matter of style, but if anyone has done something like this before maybe they would have some insight


 

Cheers,

 

Antony Kummel

 


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050721/e355d62a/attachment.htm 

From itamar at itamarst.org  Thu Jul 21 11:15:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 21 Jul 2005 11:15:32 -0400
Subject: [Twisted-Python] subclassing and class methods returning deferreds
In-Reply-To: <1121943106.13938.3.camel@thomas.amantes>
References: <1121943106.13938.3.camel@thomas.amantes>
Message-ID: <1121958933.8759.19.camel@localhost.localdomain>

On Thu, 2005-07-21 at 12:51 +0200, Thomas Vander Stichele wrote:
> Hi,
> 
> I wanted to have a class hierarchy where .stop methods would make sure
> everything is cleaned up properly before reactors get stopped and such. 

That's what services (twisted.application.service) are for. The
stopService method of a service can return a Deferred. Since they're a
tree, all you need to do is hook up the root service to the reactor
(which is what twistd does for you) and all child services will get
shutdown as well.





From leszczynscy at yahoo.com  Thu Jul 21 11:24:09 2005
From: leszczynscy at yahoo.com (Andrzej Leszczynski)
Date: Thu, 21 Jul 2005 08:24:09 -0700 (PDT)
Subject: [Twisted-Python] timers
In-Reply-To: <43c0d2b505072019532052a1b5@mail.gmail.com>
Message-ID: <20050721152409.31341.qmail@web30505.mail.mud.yahoo.com>

--- Eric Hsu <nkeric at gmail.com> wrote:
> I've written a ResourceManager which check
> frequently and release
> resources if necessary, may the following code
> snippet helpful to you
> :)
[...]
>         releaser.start(interval)
[...]

I will try it out. Seems to be close to what I need.
One question thought?

How it is implemented under the hood, (I hope it does
not spawn any new threads).

A.



From leszczynscy at yahoo.com  Thu Jul 21 11:28:51 2005
From: leszczynscy at yahoo.com (Andrzej Leszczynski)
Date: Thu, 21 Jul 2005 08:28:51 -0700 (PDT)
Subject: [Twisted-Python] timers
In-Reply-To: <42DED507.4070407@gmx.de>
Message-ID: <20050721152852.91010.qmail@web30506.mail.mud.yahoo.com>


--- David Guaraglia <dguaraglia at gmx.de> wrote:

> What will you exactly do with the timers? Depending
> on the use you could 
> replace the timers with a thread, or a deferred, or
> a TimeoutMixin.

Threads are out of the question. There going to be a
clas deriving from a Protocol used over TCP/IP. E.g.
there is long lasting connection with the
client/server and a need to send kind of heart beat
messages every given period of time as well as pegging
some stat info.

A.



From dguaraglia at gmx.de  Thu Jul 21 11:49:21 2005
From: dguaraglia at gmx.de (David Guaraglia)
Date: Thu, 21 Jul 2005 12:49:21 -0300
Subject: [Twisted-Python] timers
In-Reply-To: <20050721152852.91010.qmail@web30506.mail.mud.yahoo.com>
References: <20050721152852.91010.qmail@web30506.mail.mud.yahoo.com>
Message-ID: <42DFC401.2050104@gmx.de>

Andrzej,

I've done something very similar using just one thread for the protocol. 
But I'm not really sure this is what you need. What I did was use a 
LoopingCall every 2 minutes that would call a method in my protocol's 
factory. Everytime I got a new connection (connectionMade event in the 
Protocol) I'd append the protocol to a list in the factory, and then I'd 
remove it when the protocol is closed.

So the sequence is:

1) add an empty list (connectionsList or whatever) to your factory
2) add "self.factory.connectionsList.append(self)" in connectionMade in 
your protocol
3) add "self.factory.connectionsList.remove(self)" in connectionLost in 
your protocol
4) add a method that sends your "keep alive" to every connection in 
connectionsList in your factory. (for x in self.connectionsList: 
x.sendKeepAlive())
5) create a LoopingCall in your factory __init__.

Maybe it's not the best solution, but it worked for me.

David

Andrzej Leszczynski wrote:

>--- David Guaraglia <dguaraglia at gmx.de> wrote:
>
>  
>
>>What will you exactly do with the timers? Depending
>>on the use you could 
>>replace the timers with a thread, or a deferred, or
>>a TimeoutMixin.
>>    
>>
>
>Threads are out of the question. There going to be a
>clas deriving from a Protocol used over TCP/IP. E.g.
>there is long lasting connection with the
>client/server and a need to send kind of heart beat
>messages every given period of time as well as pegging
>some stat info.
>
>A.
>
>  
>




From exarkun at divmod.com  Thu Jul 21 12:06:43 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 21 Jul 2005 12:06:43 -0400
Subject: [Twisted-Python] timers
In-Reply-To: <42DFC401.2050104@gmx.de>
Message-ID: <20050721160643.26278.400466749.divmod.quotient.15478@ohm>

On Thu, 21 Jul 2005 12:49:21 -0300, David Guaraglia <dguaraglia at gmx.de> wrote:
>Andrzej,
>
>I've done something very similar using just one thread for the protocol. But 
>I'm not really sure this is what you need. What I did was use a LoopingCall 
>every 2 minutes that would call a method in my protocol's factory. Everytime 
>I got a new connection (connectionMade event in the Protocol) I'd append the 
>protocol to a list in the factory, and then I'd remove it when the protocol 
>is closed.
>
>So the sequence is:
>
>1) add an empty list (connectionsList or whatever) to your factory
>2) add "self.factory.connectionsList.append(self)" in connectionMade in your 
>protocol
>3) add "self.factory.connectionsList.remove(self)" in connectionLost in your 
>protocol
>4) add a method that sends your "keep alive" to every connection in 
>connectionsList in your factory. (for x in self.connectionsList: 
>x.sendKeepAlive())
>5) create a LoopingCall in your factory __init__.
>
>Maybe it's not the best solution, but it worked for me.
>

Where's the thread?  (Hint: not in the LoopingCall)

Jp



From thomas at apestaart.org  Thu Jul 21 12:34:27 2005
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Thu, 21 Jul 2005 18:34:27 +0200
Subject: [Twisted-Python] subclassing and class methods returning deferreds
In-Reply-To: <1121958933.8759.19.camel@localhost.localdomain>
References: <1121943106.13938.3.camel@thomas.amantes>
	<1121958933.8759.19.camel@localhost.localdomain>
Message-ID: <1121963667.14368.3.camel@thomas.amantes>

On Thu, 2005-07-21 at 11:15 -0400, Itamar Shtull-Trauring wrote:
> On Thu, 2005-07-21 at 12:51 +0200, Thomas Vander Stichele wrote:
> > Hi,
> > 
> > I wanted to have a class hierarchy where .stop methods would make sure
> > everything is cleaned up properly before reactors get stopped and such. 
> 
> That's what services (twisted.application.service) are for. The
> stopService method of a service can return a Deferred. Since they're a
> tree, all you need to do is hook up the root service to the reactor
> (which is what twistd does for you) and all child services will get
> shutdown as well.

I'm looking into hooking up the whole application part into the service
framework, but stopService will then still need to tell these objects
that are performing tasks to stop and wait for that, so it will still
need to go up the hierarchy and process correctly.  Or am I missing
something ?

Btw, I only found a short introduction on services and .tac files, but
it doesn't really say what services are trying to solve, and when you
should use them.  Is there somewhere else I should look for that ?

Thanks
Thomas


Dave/Dina : future TV today ! - http://www.davedina.org/
<-*- thomas (dot) apestaart (dot) org -*->
Gotta keep moving on
lover you hide from me every time
<-*- thomas (at) apestaart (dot) org -*->
URGent, best radio on the net - 24/7 ! - http://urgent.fm/






From db3l at fitlinxx.com  Thu Jul 21 12:40:25 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 21 Jul 2005 12:40:25 -0400
Subject: [Twisted-Python] Re: communication idioms with Perspective Broker
References: <20050721121601.89338.qmail@web33907.mail.mud.yahoo.com>
Message-ID: <uoe8wyux2.fsf@fitlinxx.com>

Antony Kummel <antonykummel at yahoo.com> writes:

As a general comment, I would suggest that you may wish to consider if
what appears to be your goal of keeping asynchronous activities
completely in sync is really a constraint you must meet?

That is, your points seem concerned with ensuring that asynchronous
actions or state changes somehow are reflected to users of that state
in some atomic manner or on a transactional basis (no changes exposed
until everything is complete).  This is a non-trivial problem in a
distributed form, particularly if you start to consider network
failures that can interfere with communication mid-operation.  It
would appear you're looking for a ACID-like transactional layer.

Instead of trying to meet such a tough constraint, it may be better to
see if you can design your system to accept, from the beginning, that
there will be a period of latency between actions taken in the system
and resultant changes to state being apparent to users of that state.
Or, that different parts of the system may be operating with older
(but still valid) data at various points in time, and take more
explicit control of when they update to the latest data.  This has its
own form of complexity, but can yield a much more resiliant system.

> 1. Synchronization of events and state/data changes: I want clients
> to be able to receive notifications from a server when certain
> events occur. When such events are related to changes in state or
> data of the server that are also accessible to the user, I want the
> client's interface for retrieving the data and getting notified of
> the event to be coherent.

(...)

> The solution I came up with is to always expose associated events
> and data using a single cacheable object, so that when there is a
> change in state/data that should also make an event fire, the data
> change is propagated to the remote cache, and the remote cache fires
> an event locally (at the client's side). This way, the client's
> representation of the server's state is always coherent.

This seems reasonable to me, or at least as close as you can come to
your requirement of keeping a remote client's data/events in sync.
You would need to ensure that your state object managed changes to
itself such that it only reflected changes down the PB channel to any
cacheable observers at appropriate times when its own state was
consistent.  E.g., you wouldn't necessarily update on each field or
attribute change.

What you're effectively doing here is using the cacheable object as
your transaction manager, controlling what clients see.

Note that to ensure consistency between clients and server, you'd want
to have everyone working from cacheables of this object and nobody
(even on the server itself) working from the object itself.  Otherwise,
you'd need a mechanism (such as with point 2)

You still have an issue of network outages preventing updates from
making it to clients, but in that case you'd only have to deal with a
disconnected client being out of date with respect to the server and
other clients, but in a consistent way, and upon reconnecting it would
receive a new, but again consistent, set of state information.

> 2. Synchronization of remote commands and remote events/data
> changes: I want clients to be able to issue commands to a server
> that make its state or associated data change, and also to have an
> up-to-date representation of the state or data (and possible events
> issued by changes in the state/data). The problem is how to
> synchronize the firing of the deferred returned by the remote method
> call with the change in the client's representation of the server's
> state/data (i.e. to make sure that when the deferred fires, the
> client's representation of the state is coherent with the command,
> i.e. changed).

(...)

> Presently I have no solution for this, but I'm pretty sure that it
> requires some combination of referenceable and cacheable that will
> insure one coherent interface to associated data, events and
> commands. I am thinking to achieve this with a copyable that will
> contain both a referenceable and a cacheable.

I think you're going to have an uphill battle here to try to
synchronize what is inherently distributed and asynchronous behavior.

If I absolutely had to do this, it's probably along the lines of what
your considering - I'd consider having a transaction object that
encapsulated change requests and state updates under a single
umbrella.  Rather than a simple cacheable though, you'd probably need
to implement a two-phase commit protocol so that the state only
changed on both client/server or not at all.  If you didn't do that,
you'd leave yourself open to the operation occurring on the server,
but the network preventing the new state information from getting down
to the client, and the client not knowing what state the server was in.

But I'd much rather just assume that the client needed to work
properly with the state as it currently knew, and respond properly to
any state updates as they occurred, whether due to its own operation
or some other client's operation.  E.g., formally decouple the request
to perform an operation, from the state changes that would occur as
that operation was performed.

In other words, try to stick more to a model/controller approach,
where the model state is monitored by clients and they simply react to
its changes, but actions taken always flow through a distinct
controller path that is associated with but decoupled from the model.

> 3. Wrapping remote objects for non-online representation. I want to
> be able to have objects that can be used locally, but may also
> provide an interface to one or more servers that have to do with the
> state of the object. Another reason for these wrappers is that I
> want to be able to pass them freely from process to process, without
> being dependent on the connection or on a specific server.

(...)

> The question is, how to represent this to the user of the
> object. Whether to allow access to cached remote data and
> subscription to events when not online, whether to return a deferred
> and try to connect in case we don't have the data or throw an
> exception, etc. I suppose this is mostly a matter of style, but if
> anyone has done something like this before maybe they would have
> some insight

What we've done in a system of ours that is designed to be an
distributed data system is treat the core data objects in the system
as pure state objects as much as possible, generally falling into two
classes:

* Pure instance data (data objects) of which multiple copies may exist
  simultaneously throughout the system, but which operate locally
  (Copyable in twisted).  The only methods such objects have are to
  manipulate the local representation (also handled by direct
  attribute access).
* Shared state objects (model objects) of which multiple observers
  throughout the system may exist (Cacheable in twisted).  While these
  objects may have similar method and attribute access as the above
  instance data, they are only ever manipulated by controller objects,
  for which the original instance is only the same "node" as the
  original instance of the state object.  Any client needing to make
  changes must use a reference to that controller (a twisted
  Referenceable) and not the model itself, even on the local node
  where the model/controller are instantiated.

The choice between the two object types is not a hard and fast rule -
we've tended to use more of the former so far.

We then constructed a framework of "manager" objects which are
designed to provide access and manipulation of the above data objects.
The key attribute of a manager object is that it is both referenceable
(twisted Referenceable) and all of its methods are deferrable
interfaces - even if used locally.

Although I found I had a desire to try to somehow just always pass
object references (referenceable) around to everything and let PB
handle everything transparently - in practical terms I didn't find
that workable.  There are just too many nooks and crannies you can get
into as things get distributed that taking some more explicit control
became necessary to ensure robustness.  And you just can't always
assume that making changes to state on what is ostensibly a shared
object will magically get reflected everywhere reliably.  But that's
actually where we found PB to be just at the right level as it was
easy enough to wrap to behave how we wanted.

We provided an extra layer of wrapping for the networking, both for
the basic connection as well as our referenceables.  A Client object
encapsulates making a connection to a server, along with reconnecting
as necessary and generating local signals (we use pydispatcher) on
connection state changes.  A matching Server object provides client
access to local managers - through a simple Registry object - upon a
client's connection.

A general purpose wrapper object is used to wrap each manager
referenceable so that they appear to be local (it uses the manager's
interface definition to automatically translate method calls into
callRemote), as well as to automatically re-establish contact with the
remote manager if needed, by listening for the Client signals and on a
reconnect, re-obtaining the remote Registry handle and refetching
remote references to the manager it had previously wrapped.

The wrapping may be multi-layer.  This allows us for example, to have
a remote site have a master server, which maintains the client link to
a central server.  That site server, therefore, has what it considers
a local Registry with a whole set of local managers - all of which are
technically wrappers around the twisted referenceable to the main
central server.  But then other machines at the site themselves become
clients of the site server, with their own references to the site
server's references.  So when the other site machines make requests
they flow to the site server, and then up to the central server and
back down.  But the same source code works whether running on the
central server, or at any level of the site servers, without knowing
the difference (since all registry and manager interfaces are
deferrable anyway).
  
While the wrapper isolates users from need to worry about
reconnecting, we don't attempt to hide the fact that an outage is
occurring.  Attempts to make a call on a wrapped manager during an
outage generates normal PB exceptions, with one change that we modified
Twisted to always return exceptions up the deferred change (even for a
dead reference) so clients wouldn't have to deal with both local
exceptions and errbacks.

In practice, the client applications generally have some application
level object that is also listening to the Client objects connection
signals, and either blocking access to the user when the network is
(with an appropriate message), or adjusting behavior accordingly.

So, in operation, client code works something like:

* Instantiate a Client object, give it connection info and start the
  connection.  Request the registry from the client object (which is
  deferrable and only fires once the overall connection cycle is
  complete).
* Using the Registry object (which itself is a remote wrapper version
  on the client side), query references for any manager objects
  needed.
* Using the manager objects, retrieve any data objects needed.
  Changes to model objects occur through their controllers, while
  changes to data objects are performed locally and changes updated
  via explicit "save" calls to the managers.  

The last point is where we run into similar issues as yourself, I
think.  By choosing this route we do not provide for other clients of
that same data object to automatically see changes made by other
clients.  They would continue to run with the copy they had previously
received, although any subsequent retrieval would get a new copy with
the new data.

To handle crossing state changes, the originator (actual manager
object on whatever node it exists on) of the data object maintains an
internal tag (we use a UUID but it could also be a hash of the
contents) in the object representing its unique state and will raise a
SaveConflict exception of our own if someone else attempts to store
changes to an outdated copy.  It is up to clients to handle such
issues, should they occur (typically by requerying the information and
then re-applying their changes), although in practice we really don't
have scenarios where this happens yet due to typical usage patterns.

Some of this could change if we moved a data object to a model object,
but then we're requiring that even simple users of the data object
maintain a remote cacheable reference to the object, which is
relatively heavyweight.  Thus my comment about it being a grey area
above as to which sort of object we decide to place such state in.  In
our environment, our User object (which contains identifying and
control information about users) is just a data object, as the need
for simultaneous manipulation and monitoring of it is reasonably low.
We do expect to have many copies of it around, but mostly on a
read-only basis.

In your context, I would think that the user object itself need not be
something that constantly updates, but the state of which users were
currently online would fit better as a model (and the controller to
feed it would have methods for a given user to go online or offline).
In our structure, we would separate out the concept of generating a
system message - probably into a messaging manager - which would then
receive requests to transmit messages to identified users.  But I
don't think I'd try to tie those three things (current User object
contents, currently online user set, generating a message) into any
sort of guaranteed state ... I'd leave them very loosely coupled.

On the issue of distribute events, that's the area we're currently
working on, and to us the hardest part is how to handle events that
may be generated during outages for which the disconnected clients
have subscriptions.  If it's just for changes to state objects (such
as cacheables) that's not so bad, since the reconnection process will
re-query the current state information.  But if it's for more general
notifications (we might have our own bit for "user updated" like your
"user came online") you have a question of how long do you queue up
such events for clients that might never show up again.

Currently we are targetting such events being handled by a signal or
event manager, which will maintain an ongoing history of such events.
Subscribers to the event manager will get copies of appropriate
events.  When a client connects it's local wrapper for the remote
event manager will actually handle all local subscriptions,
maintaining a single remote set of subscriptions to minimize network
I/O.  It will also track the delivery of any events.  Upon being
disconnected/reconnecting (per the standard mechanisms), the client
event manager wrapper will request any signals that may have been
generated since the last event seen prior to the disconnect.  We'll
have to bound this somehow for prolonged outages.  But a key point is
still decoupling the event handling from other operations, and we
won't be trying to force everything to stay in sync with other clients
and/or servers at all times.

If you've put up with me until here, I hope that this at least gives
you some other approaches to think about, even if some or all of it
isn't directly applicable to your problem domain.

-- David




From dguaraglia at gmx.de  Thu Jul 21 13:03:13 2005
From: dguaraglia at gmx.de (David Guaraglia)
Date: Thu, 21 Jul 2005 14:03:13 -0300
Subject: [Twisted-Python] timers
In-Reply-To: <20050721160643.26278.400466749.divmod.quotient.15478@ohm>
References: <20050721160643.26278.400466749.divmod.quotient.15478@ohm>
Message-ID: <42DFD551.3080707@gmx.de>

LOL! (lols allowed here? or just not allowed as in #twisted?). Don't 
know why I used the word "thread" in there... I was just going to 
describe something I had made, then I remembered I had corrected it 
using a LoopingCall.

David

Jp Calderone wrote:

> On Thu, 21 Jul 2005 12:49:21 -0300, David Guaraglia 
> <dguaraglia at gmx.de> wrote:
>
>> Andrzej,
>>
>> I've done something very similar using just one thread for the 
>> protocol. But I'm not really sure this is what you need. What I did 
>> was use a LoopingCall every 2 minutes that would call a method in my 
>> protocol's factory. Everytime I got a new connection (connectionMade 
>> event in the Protocol) I'd append the protocol to a list in the 
>> factory, and then I'd remove it when the protocol is closed.
>>
>> So the sequence is:
>>
>> 1) add an empty list (connectionsList or whatever) to your factory
>> 2) add "self.factory.connectionsList.append(self)" in connectionMade 
>> in your protocol
>> 3) add "self.factory.connectionsList.remove(self)" in connectionLost 
>> in your protocol
>> 4) add a method that sends your "keep alive" to every connection in 
>> connectionsList in your factory. (for x in self.connectionsList: 
>> x.sendKeepAlive())
>> 5) create a LoopingCall in your factory __init__.
>>
>> Maybe it's not the best solution, but it worked for me.
>>
>
> Where's the thread?  (Hint: not in the LoopingCall)
>
> Jp
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>




From foom at fuhm.net  Thu Jul 21 16:49:45 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 21 Jul 2005 16:49:45 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <C9B88074-266B-4C30-BECD-B1AC36EC7FB9@fuhm.net>

Bug summary
______________________
Since 2005-07-12 14:40:23.400000:
Bugs opened: 15   Bugs closed: 4   Total open bugs: 412 (+11)
   Urgent: 9 (+0)
   Bug: 179 (+8)
   Feature: 147 (+3)
   Wish: 77 (+0)

New / Reopened Bugs
______________________
                     ==== Bug ====
[WEB] twisted.web.proxy doesn't reverse-map redirects like  
ProxyPassReverse  (6 days ago)
        http://twistedmatrix.com/bugs/issue1109 opened by kragen

OS-X vs PTYProcess, OSError vs IOError  (yesterday)
        http://twistedmatrix.com/bugs/issue1120 opened by warner

[FTP] FTPClient does not fire current commands errback on  
connectionLost  (1 week ago)
        http://twistedmatrix.com/bugs/issue1107 opened by orbitz

roundup exception when clicking "confirm password" link more than  
once  (4 months ago)
CLOSED http://twistedmatrix.com/bugs/issue919 opened by zooko

[WEB] twisted.web.proxy.ReverseProxyResource incorrectly sends host  
header with no port  (3 days ago)
        http://twistedmatrix.com/bugs/issue1117 opened by kragen

[WIN32] win32 spawnProcess should return something  (3 days ago)
        http://twistedmatrix.com/bugs/issue1116 opened by warner

[CORE] intermittent test failure in test_policies  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1114 opened by warner

[TRIAL] Trial fails with "signal number out of range" for signal 64   
(6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1110 opened by justinj

[CORE] intermittent test failures in threads  (5 days ago)
        http://twistedmatrix.com/bugs/issue1115 opened by warner

[CONCH] intermittent test failures in conch  (5 days ago)
        http://twistedmatrix.com/bugs/issue1111 opened by warner

[CORE] intermittent test failure in testCallLater  (5 days ago)
        http://twistedmatrix.com/bugs/issue1113 opened by warner

[FLOW] intermittent test failure in flow: testThreadedImmediate  (5  
days ago)
        http://twistedmatrix.com/bugs/issue1112 opened by warner

                     ==== Feature ====
[DOCUMENTATION] Document Services available in Twisted  (2 days ago)
        http://twistedmatrix.com/bugs/issue1119 opened by spiv

[DOCUMENTATION] Document how to write a Service correctly  (2 days ago)
        http://twistedmatrix.com/bugs/issue1118 opened by spiv

[WEB] web2 needs SOAP support  (7 days ago)
        http://twistedmatrix.com/bugs/issue1108 opened by jblocksom

Bugs Closed
______________________
                     ==== Bug ====
Stupid code needs removing from ftp.py  (1 month ago)
        http://twistedmatrix.com/bugs/issue1075 opened by orbitz,  
closed by exarkun

roundup exception when clicking "confirm password" link more than  
once  (4 months ago)
        http://twistedmatrix.com/bugs/issue919 opened by zooko,  
closed by kragen

[CORE] intermittent test failure in test_policies  (5 days ago)
        http://twistedmatrix.com/bugs/issue1114 opened by warner,  
closed by exarkun

[TRIAL] Trial fails with "signal number out of range" for signal 64   
(6 days ago)
        http://twistedmatrix.com/bugs/issue1110 opened by justinj,  
closed by exarkun





From ww at groovy.net  Fri Jul 22 10:56:47 2005
From: ww at groovy.net (William Waites)
Date: Fri, 22 Jul 2005 10:56:47 -0400
Subject: [Twisted-Python] PB waitingForAnswers KeyError
Message-ID: <20050722145647.GW27029@groovy.net>

This is with the Twisted Sumo tar, with threadedselectreactor dropped in:

          File "/usr/lib/python2.3/site-packages/twisted/internet/threadedselectreactor.py", line 252, in _doReadOrWrite
            why = getattr(selectable, method)()
          File "/usr/lib/python2.3/site-packages/twisted/internet/tcp.py", line 351, in doRead
            return self.protocol.dataReceived(data)
          File "/usr/lib/python2.3/site-packages/twisted/spread/banana.py", line 184, in dataReceived
            gotItem(item)
          File "/usr/lib/python2.3/site-packages/twisted/spread/banana.py", line 114, in gotItem
            self.callExpressionReceived(item)
          File "/usr/lib/python2.3/site-packages/twisted/spread/banana.py", line 81, in callExpressionReceived
            self.expressionReceived(obj)
          File "/usr/lib/python2.3/site-packages/twisted/spread/pb.py", line 561, in expressionReceived
            method(*sexp[1:])
          File "/usr/lib/python2.3/site-packages/twisted/spread/pb.py", line 919, in proto_answer
            d = self.waitingForAnswers[requestID]
        exceptions.KeyError: 19

What am I doing to make this happen? I am using a class derived from the threadedselect
blocking demo. This implementation is attached, and has a blocking run() method and
a blocking getDeferred() method. It takes interleaved' callbacks and puts them in a
queue. The run() method takes them out of the queue in a blocking way and calls them.
getDeferred() makes a threading.Event(), causes a CB to be queued, and then waits
on the event to return the result. This way there can be many threads using the blocking
getDeferred(), and many threads that just use the normal twisted stuff.

This is running inside Asterisk and implements a PB client. This error appears under
load (30-40 PB calls per second, 10-20 threads using getDeferred()).

The server works just fine, and I have verified with a non-threadedselectreactor dummy
client. A single threaded client is able to get several hundred PB calls per second
through, and running more than one single threaded client works as expected.

Looking at the spread/pb.py, I can't see how this KeyError should happen. 
waitingForAnswers[requestID] always gets set before the remote call, so I don't see
a race condition where we could get a response before the dictionary is populated.

Help?

-w
-------------- next part --------------
# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.

from twisted.internet.defer import Deferred
from twisted.python.failure import Failure
from twisted.internet import reactor
from twisted.python.runtime import seconds
from itertools import count
from Queue import Queue, Empty
from threading import Event

class TwistedManager(object):
    def __init__(self):
        self.twistedQueue = Queue()
        self.key = count()
        self.results = {}
        self.events = {}
        self.running = False
        
    def getKey(self):
        # get a unique identifier
        return self.key.next()

    def run(self):
        # start the reactor
        if self.running:
            return
        self.running = True

        reactor.interleave(self.twistedQueue.put)
        
        while True:
            callback = self.twistedQueue.get()
            callback()
            if not self.running and self.twistedQueue.empty():
                return
            
    def _stopIterating(self, value, key):
        e = self.events[key]
        del self.events[key]
        self.results[key] = value
        e.set()
            
    def stop(self):
        # stop the reactor
        key = self.getKey()
        e = Event()
        self.events[key] = e
        reactor.addSystemEventTrigger('after', 'shutdown',
            self._stopIterating, True, key)
        self.running = False
        reactor.stop()
        e.wait()
            
    def getDeferred(self, d):
        # get the result of a deferred or raise if it failed
        key = self.getKey()
        e = Event()
        self.events[key] = e
        d.addBoth(self._stopIterating, key)
        e.wait()
        res = self.results.pop(key)
        if isinstance(res, Failure):
            res.raiseException()
        return res

From bob at redivi.com  Fri Jul 22 15:19:50 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 22 Jul 2005 09:19:50 -1000
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <20050722145647.GW27029@groovy.net>
References: <20050722145647.GW27029@groovy.net>
Message-ID: <09913134-2BA7-4194-8864-99A5CDB46123@redivi.com>


On Jul 22, 2005, at 4:56 AM, William Waites wrote:

> This is with the Twisted Sumo tar, with threadedselectreactor  
> dropped in:
>
>           File "/usr/lib/python2.3/site-packages/twisted/internet/ 
> threadedselectreactor.py", line 252, in _doReadOrWrite
>             why = getattr(selectable, method)()
>           File "/usr/lib/python2.3/site-packages/twisted/internet/ 
> tcp.py", line 351, in doRead
>             return self.protocol.dataReceived(data)
>           File "/usr/lib/python2.3/site-packages/twisted/spread/ 
> banana.py", line 184, in dataReceived
>             gotItem(item)
>           File "/usr/lib/python2.3/site-packages/twisted/spread/ 
> banana.py", line 114, in gotItem
>             self.callExpressionReceived(item)
>           File "/usr/lib/python2.3/site-packages/twisted/spread/ 
> banana.py", line 81, in callExpressionReceived
>             self.expressionReceived(obj)
>           File "/usr/lib/python2.3/site-packages/twisted/spread/ 
> pb.py", line 561, in expressionReceived
>             method(*sexp[1:])
>           File "/usr/lib/python2.3/site-packages/twisted/spread/ 
> pb.py", line 919, in proto_answer
>             d = self.waitingForAnswers[requestID]
>         exceptions.KeyError: 19
>
> What am I doing to make this happen? I am using a class derived  
> from the threadedselect
> blocking demo. This implementation is attached, and has a blocking  
> run() method and
> a blocking getDeferred() method. It takes interleaved' callbacks  
> and puts them in a
> queue. The run() method takes them out of the queue in a blocking  
> way and calls them.
> getDeferred() makes a threading.Event(), causes a CB to be queued,  
> and then waits
> on the event to return the result. This way there can be many  
> threads using the blocking
> getDeferred(), and many threads that just use the normal twisted  
> stuff.

I expect that you're using TwistedManager incorrectly.  There doesn't  
appear to be anything wrong with the code you attached, but it also  
doesn't do anything on its own.  The problem is somewhere else.

-bob




From bob at redivi.com  Fri Jul 22 20:19:25 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 22 Jul 2005 14:19:25 -1000
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <20050722233232.GH27029@groovy.net>
References: <20050722145647.GW27029@groovy.net>
	<09913134-2BA7-4194-8864-99A5CDB46123@redivi.com>
	<20050722233232.GH27029@groovy.net>
Message-ID: <A5BC6FE6-6E6D-4F3F-A5C0-4690A7512211@redivi.com>


On Jul 22, 2005, at 1:32 PM, William Waites wrote:

> On Fri, Jul 22, 2005 at 09:19:50AM -1000, Bob Ippolito wrote:
>
>>
>> I expect that you're using TwistedManager incorrectly.  There doesn't
>> appear to be anything wrong with the code you attached, but it also
>> doesn't do anything on its own.
>>
>
> I'm trying to put together a minimal example that is supposed to  
> work and
> doesn't.
>
> How the bit driven by calls works; the embedded Python creates a  
> thread
> and does something like:
>
>   d = routeServer.callRemote("lookup", "somesource", "somedest")
>   rset = manager.getDeferred(d)

That's your problem, you can't call ANY Twisted code from anything  
but the reactor thread (the one that called interleave), unless  
explicitly stated that it's allowed to do so (callFromThread, for  
example).

You've misunderstood what the example is trying to demonstrate, it is  
not a magical "invert twisted" box.  It demonstrates how you can  
create a simple ostensibly single-threaded application using Twisted  
that has a blocking interface on top of Deferreds.  It's similar to  
how you would use any of the networking code in the standard library,  
only that there's asynchronous goodness somewhere behind the scenes  
making everything tick.

-bob




From ww at groovy.net  Sat Jul 23 01:33:45 2005
From: ww at groovy.net (William Waites)
Date: Sat, 23 Jul 2005 01:33:45 -0400
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <A5BC6FE6-6E6D-4F3F-A5C0-4690A7512211@redivi.com>
References: <20050722145647.GW27029@groovy.net>
	<09913134-2BA7-4194-8864-99A5CDB46123@redivi.com>
	<20050722233232.GH27029@groovy.net>
	<A5BC6FE6-6E6D-4F3F-A5C0-4690A7512211@redivi.com>
Message-ID: <20050723053345.GK27029@groovy.net>

On Fri, Jul 22, 2005 at 02:19:25PM -1000, Bob Ippolito wrote:
> 
> You've misunderstood what the example is trying to demonstrate, it is  
> not a magical "invert twisted" box. 

A magical "invert twisted" box... How about something like this?

def invert(f):
    def _i(f, *av, **kw)
        e = Event()
        result = []
        def _s(res):
            result.append(res)
            e.set()
        def _f():
            d = maybeDeferred(f, *av, **kw)
            d.addBoth(_s)
        reactor.callFromThread(_f, *av, **kw)
        e.wait()

        res = result[0]
        if isinstance(res, Exception):
            raise res
        return res
    return _i

class InvertedClass:
    def fooMethod(self, ...):
        ... do twisted stuff
    fooMethod = invert(fooMethod)

Maybe with magic getattr functions it could be made completely
transparent... Not sure if it is worth the bother though.

If I am careful to do this sort of manipulation to protect potentially
dangerous code, it seems like the problems with pb disappear...

Thanks for your insight.

-w



From ww at groovy.net  Sat Jul 23 01:56:29 2005
From: ww at groovy.net (William Waites)
Date: Sat, 23 Jul 2005 01:56:29 -0400
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <20050723053345.GK27029@groovy.net>
References: <20050722145647.GW27029@groovy.net>
	<09913134-2BA7-4194-8864-99A5CDB46123@redivi.com>
	<20050722233232.GH27029@groovy.net>
	<A5BC6FE6-6E6D-4F3F-A5C0-4690A7512211@redivi.com>
	<20050723053345.GK27029@groovy.net>
Message-ID: <20050723055629.GL27029@groovy.net>

or more correctly,

def invert(f):
    def _i(*av, **kw)
        e = Event()
        result = []
        def _s(res):
            result.append(res)
            e.set()
        def _f():
            d = maybeDeferred(f, *av, **kw)
            d.addBoth(_s)
        reactor.callFromThread(_f)
        e.wait()

        res = result[0]
        if isinstance(res, Exception):
            raise res
        return res
    return _i

should this function exist somewhere in twisted?

-w



From bob at redivi.com  Sat Jul 23 02:09:33 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 22 Jul 2005 20:09:33 -1000
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <20050723055629.GL27029@groovy.net>
References: <20050722145647.GW27029@groovy.net>
	<09913134-2BA7-4194-8864-99A5CDB46123@redivi.com>
	<20050722233232.GH27029@groovy.net>
	<A5BC6FE6-6E6D-4F3F-A5C0-4690A7512211@redivi.com>
	<20050723053345.GK27029@groovy.net>
	<20050723055629.GL27029@groovy.net>
Message-ID: <5EBA4DF7-AEE5-480E-9C68-F49A66009DD6@redivi.com>


On Jul 22, 2005, at 7:56 PM, William Waites wrote:

> or more correctly,
>
> def invert(f):
>     def _i(*av, **kw)
>         e = Event()
>         result = []
>         def _s(res):
>             result.append(res)
>             e.set()
>         def _f():
>             d = maybeDeferred(f, *av, **kw)
>             d.addBoth(_s)
>         reactor.callFromThread(_f)
>         e.wait()
>
>         res = result[0]
>         if isinstance(res, Exception):
>             raise res
>         return res
>     return _i
>
> should this function exist somewhere in twisted?

Maybe if you can provide a tested and documented implementation.

I don't have a use for it, because I keep threads sane and separate,  
so I'm not going to think too hard about whether what you've correct  
is right or not.

-bob




From exarkun at divmod.com  Sat Jul 23 02:28:01 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 23 Jul 2005 02:28:01 -0400
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <20050723055629.GL27029@groovy.net>
Message-ID: <20050723062801.26278.1721814453.divmod.quotient.16038@ohm>

On Sat, 23 Jul 2005 01:56:29 -0400, William Waites <ww at groovy.net> wrote:
>or more correctly,
>
>def invert(f):
>    def _i(*av, **kw)
>        e = Event()
>        result = []
>        def _s(res):
>            result.append(res)
>            e.set()
>        def _f():
>            d = maybeDeferred(f, *av, **kw)
>            d.addBoth(_s)
>        reactor.callFromThread(_f)
>        e.wait()
>
>        res = result[0]
>        if isinstance(res, Exception):
>            raise res
>        return res
>    return _i
>
>should this function exist somewhere in twisted?

One might take the position that if you are not experience enough to write it yourself, you are not experience enough to write a multithreaded program.

FWIW, this function has actually been written a handful of times, and at least a couple copies of it are in the list archives.  There's also an open issue in the bug tracker related to it.  I believe it is stalled on the submission of a reasonable set of unit tests.

Jp



From sflist at ihonk.com  Sat Jul 23 03:00:51 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Sat, 23 Jul 2005 01:00:51 -0600
Subject: [Twisted-Python] PB: New credentials checker?
Message-ID: <1122102051.6674.7.camel@localhost.localdomain>

Hi all,

I'm trying to invent my own checkers, with associated credentials, and
still use the pbClientFactory's login() function. I saw, however, that
the source in pb.py notes that, for now, login() only works with
IUsernamePassword: "Currently only credentials implementing
IUsernamePassword are supported." (twisted/spread/pb.py, line 1611).

So I started by subclassing the pbClientFactory, making my own login()
function, and _cbSendUsername() and _cbResponse(), and then as I
realized PB is using its own challenge response mechanism, it just
started getting more complicated than I thought it probably should.

So what's my best option -- continue on the path I'm on, or just
serialize the data I need into the username and password fields in the
standard checkers? Or is there an easier way I'm missing?

Thanks!

Steve




From disen at geo.unizh.ch  Sat Jul 23 07:27:46 2005
From: disen at geo.unizh.ch (Daniel Isenegger)
Date: Sat, 23 Jul 2005 13:27:46 +0200
Subject: [Twisted-Python] listen to a process and react to events
Message-ID: <42E229B2.4000401@geo.unizh.ch>

Hi,
is it possible within the TwistedMatrix framework to listen to processes 
(e.g. running on local HDs) like you can listen to a port?
For example, i have a GUI firing events. Now i want to listen from 
twistedmatrix to this process, catch the  output of the process and 
process them.
can anybody provide me a code example?

A somehow similar example is  quotes.py  from the TwistedMatrix Homepage 
howto's 
(http://twistedmatrix.com/projects/core/documentation/howto/process.html). 
But (as i understand it) there the reactor listen to a port, not to the 
process fortune itself.


Thanks dani




From paolo.veronelli at gmail.com  Sat Jul 23 11:52:17 2005
From: paolo.veronelli at gmail.com (Paolino)
Date: Sat, 23 Jul 2005 17:52:17 +0200
Subject: [Twisted-Python] Defgen explanation
Message-ID: <42E267B1.1020602@gmail.com>

Hello all,

I have the  next running script which cause me some questions.
I thought deferredGenerators tech could be easily reconverted to 
Deferreds ,but I'm having no success in doing it on the piece of code in 
Indexer.do method.

Particularly if I substitute the generator with
DeferredList([indexing() for indexing in 
indexings]).addCallback(self.do)  I fall in recursion.But the 
rescheduling has to happen really at the end of the indexing.

I think I miss something :(


Thanks for help


from twisted.internet import reactor
from twisted.internet.defer import waitForDeferred as 
wait,deferredGenerator as async,Deferred,DeferredList
import time

def deferredReady(value=False,later=0):
   deferred=Deferred()
   reactor.callLater(later,deferred.callback,value)
   return deferred

coop=lambda:wait(deferredReady())

class Indexer(object):
   def do(self,*_):
     indexings=self.indexings
     self.indexings=[] # a new queue
     ##### how to substitute this with non-generator deferring ?
     def _():
       yield wait(DeferredList([indexing() for indexing in indexings]))
       deferredReady().addCallback(self.do) # rescheduling
     async(_)()
     #######  end of substitution

   def __init__(self):
     self.indexings=[] # a queue
     self.do() # first scheduling
   def index(self,uri):# the interface for triggers
     def _():
       print 'indexing ',uri
       for i in range(10000): #adjust this higher to see the queue 
growing if your machine is faster
         yield coop()
       print 'indexed',uri
     self.indexings.append(async(_))
     print 'Queued indexings',len(self.indexings)

indexer=Indexer()

from twisted.internet import task

task.LoopingCall(lambda :indexer.index('ciao')).start(3)
task.LoopingCall(lambda :indexer.index('mamma')).start(4)
task.LoopingCall(lambda :indexer.index('papa')).start(5)

reactor.run()



From antonykummel at yahoo.com  Sun Jul 24 12:33:11 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Sun, 24 Jul 2005 09:33:11 -0700 (PDT)
Subject: [Twisted-Python] Re: communication idioms with Perspective Broker
In-Reply-To: <uoe8wyux2.fsf@fitlinxx.com>
Message-ID: <20050724163311.99502.qmail@web33904.mail.mud.yahoo.com>


Hi David,

 

Thanks a lot for your response. It seems that your solution fulfills most of what I wanted to achieve, so it was a great help.

 

This is how I understand the registry/manager/wrappers system:

   The meaning of the wrappers is that
      referenceables are transferable to third parties who get their flow pass through the middle process, and 
      that the wrappers get reconnected automatically

   If I understand correctly, the only purpose of the registry is to provide an interface to enable the re-connection of the wrappers.
   The purpose of managers is simply to dispense data and state objects.

 

Questions:

   Do managers only dispense state and data, or do they also provide state control?
   Do cacheables (state objects) re-connect? Is there any reason why they shouldn?t?
   Regarding multi-layer wrapping, how do cacheables go from the original server to the final client without becoming unjellyable in the middle?

 

Thanks,

 

Antony Kummel

 

 

P.S.

 

There are some things I am considering to do differently, and it would be interesting to hear your opinion.

 

The system I had in mind:

   I like and want to adhere to the data/state distinction you made.
   Events will be handled locally by remote caches, based on changes in the cached data (this may be accomplished degenerately, by not exposing anything other than the event).

 

Differences from your system:

   I would like all of my referenceables and cacheables in my system to be re-connecting. This to some extent cancels the need for managers, because any dynamically changing object is re-connecting.
   Instead of (or possibly in addition to) manager objects, I want to have what I call Seed objects, which represent a combination of state, data and referenceables (all optional). These seeds will be copyable, and will include the knowledge required to retrieve their components.
   The seed objects will represent the basic objects of the system (like users), and will provide control and access to their entire data/state.
   The main reasons for seeds are:
      I want state, data and control to be provided by the same object for clarity, and not have each of them require an individual query. For example, a user will have Name, email address, etc. as data, online/offline as state, and a send_message method.
      I want state objects, referenceables, and possibly data associated with a Seed to be retrievable from a Server different from the one who dispensed the Seed (for example, the database may provide a seed and the associated user-changeable data, but the state may be kept by a different server). For example, the user?s data may be stored in a database, his online/offline state retrieved from a presence server, and sending him a message may require connecting to his workstation.


 

		
---------------------------------
 Start your day with Yahoo! - make it your home page 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050724/fa7fdaad/attachment.htm 

From hikenboots at gmail.com  Mon Jul 25 11:53:22 2005
From: hikenboots at gmail.com (J French)
Date: Mon, 25 Jul 2005 10:53:22 -0500
Subject: [Twisted-Python] Getting peer IP address from Perspective Broker
Message-ID: <35b7725f05072508535ba3bd1a@mail.gmail.com>

Is there an accessible method to retrieve a peer's ip address from
within pb?  I just want to log it.

I read the Faq and see how to do it when subclassing protocol i.e.:
class MyProtocol(protocol.Protocol):
    def connectionMade(self):
        print "connection from", self.transport.getPeer()

I'd appreciate it if someone can point me in the right direction.

TIA



From exarkun at divmod.com  Mon Jul 25 17:55:56 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 25 Jul 2005 17:55:56 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14219 - Add LowLevel HTTP
 Client code (based on the OSAF zanshin),
 with support for Basic and Digest authentication. Documentations and
 unittests to come.
In-Reply-To: <E1Dx9A3-0005R4-00@wolfwood>
Message-ID: <20050725215556.26278.2099527179.divmod.quotient.16995@ohm>

On Mon, 25 Jul 2005 14:02:51 -0600, David Reid <dreid at wolfwood.twistedmatrix.com> wrote:
>Author: dreid
>Date: Mon Jul 25 14:02:50 2005
>New Revision: 14219
>
>Added:
>   trunk/twisted/web2/client/
>   trunk/twisted/web2/client/__init__.py
>   trunk/twisted/web2/client/auth.py
>   trunk/twisted/web2/client/http.py
>Modified:
>   trunk/twisted/web2/http_headers.py
>Log:
>Add LowLevel HTTP Client code (based on the OSAF zanshin), with support for Basic and Digest authentication.  Documentations and unittests to come.

I've reverted this, since it broke a couple of the existing web2 unit tests.

Just as a reminder, current Twisted development policy dictates that: new feature development should occur in a branch, not in trunk; branches should be reviewed by at least one other core developer before being merged into trunk; and all new features should come with unit tests.

If anyone needs any help figuring out the technical details (how to make or merge branches in svn, etc), #twisted and this mailing list are always around to help.

Not following this policy (or introducing test suite regressions) makes it highly likely that the commit will be reverted.

Thanks,

Jp



From db3l at fitlinxx.com  Mon Jul 25 18:42:39 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 25 Jul 2005 18:42:39 -0400
Subject: [Twisted-Python] Re: communication idioms with Perspective Broker
References: <uoe8wyux2.fsf@fitlinxx.com>
	<20050724163311.99502.qmail@web33904.mail.mud.yahoo.com>
Message-ID: <u3bq2pkww.fsf@fitlinxx.com>

Antony Kummel <antonykummel at yahoo.com> writes:

> This is how I understand the registry/manager/wrappers system:
>
> The meaning of the wrappers is that referenceables are
> transferable to third parties who get their flow pass through the
> middle process, and that the wrappers get reconnected automatically

Close (IMO) - the referenceable to the original object (which is
created as a result of passing that object through PB to a third
party) is placed in a wrapper which is then given to client code.
For example (in ASCII):

+---------+                      +---Wrapper-----+
| Manager |---[ PB transport ]---|[Referenceable]|<---- Client code
+---------+                      +---------------+

So the only reference most of the client code maintains is to the
wrapper object, which can remain consistent across outages.  It
handles reconnections to the original object when needed, which will
technically create a new referenceable (since PB referenceables can't
continue to be used across a disconnect/reconnect), but that is
transparent to the client code.

> If I understand correctly, the only purpose of the registry is to
> provide an interface to enable the re-connection of the wrappers.
> The purpose of managers is simply to dispense data and state
> objects.

The primary reason for the registry in our system is to act as a
single management object to retrieve references to our registerable
objects (such as managers), whether the request to locate a given
registerable object is coming locally or remotely.  Much as any other
central registry, it permits us to pass a single object reference
around to various parts in the system (including remote clients)
through which access to other official entry points can be retrieved.

But yes, it also simplifies the remote connection process since all we
need to do is provide a remote reference to a registry and through
that remote (wrapped) references to objects such as managers may be
retrieved through the same code that would be used if the registry was
local.

And yes, as I've described managers are largely data management
objects.  We do also have higher order registerables (we call them
packages) which implement high level functionality - generally to
simplify common operations that would otherwise need to interact with
several managers simultaneously.

> Questions:
>
> Do managers only dispense state and data, or do they also provide
> state control?

I suppose it depends on what you would consider covered by "state
control," but the general answer would be there's no single rule.
Some managers are almost entirely pure data storage/retrieval, while
others provide for the retrieval of objects that themselves are fairly
complex (such as our cacheable models/controllers).

> Do cacheables (state objects) re-connect? Is there any reason why
> they shouldn?t?

Yes, they can be wrapped as well.  To the server side instance of the
cacheable, a reconnection is just another "new" observer.

> Regarding multi-layer wrapping, how do cacheables go from the
> original server to the final client without becoming unjellyable in
> the middle?

(warning - this got very long after I started writing it...)

I'm not sure if you meant copyable here instead of cacheable since a
cacheable controls it's own transmission of state to the client, as
opposed to a copyable which has to be directly jellyable.

For the cacheable, as long as it implements the Cacheable support, it
controls what gets transmitted to any observer, so whether it's the
original instance or a client reference to the original instance, it's
transmitting the same data.

But we have to date handled cacheables with an additional layer.  Since
we use cacheables typically for models for which users need to monitor
changes, we needed something that works the same locally and remotely.
We tend to use pydispatcher for signals (or some of our older objects
handle the observer pattern directly), and implement our models using
that, so all monitoring is technically local.  We then have a generic
server side wrapper that is a pb.Cacheable, and can observe any such
model as its data for the cacheable clients.  This might also work by
just having the models be directly cacheable, but it's the way the
system has grown to date.

The key to most of this is that we built a structure where the remote
wrapped instance of an object uses the same class definition (directly
through inheritance) as the original instance, just with a wrapper
mixed-in.  Not only does the client side wrapped object "work" like the
local object, with the use of callRemote hidden behind the normal
interface, but it then can be remotely referenced itself and behave just
like the original reference.

To try to strip down to a simple example, we were able to encapsulate
pretty much everything about the distributed processing part of the
system into two package modules - remoteable.py for a server side
support, and remote.py for client side.

remoteable is thin - we've have copyable/referenceable/cacheable
subclasses just to isolate some custom code (lets classes define some
fields that should automatically pickle to avoid PB not knowing how to
transmit them) and for future expansion.  This also houses the server
side observer/cacheable wrapper I mentioned above.

remote handles the client side.  It defines the key wrapper classes (for
client side copyable copies, referenceable references, and cacheable
caches :-)).  These wrapper classes implement reconnections
(cacheable/referenceable) and other custom support (like unpickling for
copies).  They also themselves inherit from the remoteable classes so
they can also be passed over a PB session.

remote then defines classes that multiply inherit from each of the
original classes for those classes that may be distributed, as well as
the appropriate wrapper class.  In most cases these definitions are
simply "pass" but they sometimes define slightly custom functionality
for the client side.  The only really detailed one is the
remote.Registry, which has the knowledge to automatically wrap any
retrieved object in the appropriate wrapper.

An example may help.  Assuming the following classes in
remoteable/remote as mentioned above:

           - - - - - - - - - - - - - - - - - - - - - - - - -
remoteable.Copyable, Cacheable, Referenceable - subclasses of pb.*
remoteable.ModelCache - wraps an model as a cacheable.  We have
   subclasses of this for each model (so we can register the unjellying)

remote.CopyObject - mirror on the remote side for remoteable.Copyable.
   Is itself also a remoteable.Copyable
remote.RemoteWrapper - remote side wrapper for a Referenceable.
   Is itself also a remoteable.Referenceable.
           - - - - - - - - - - - - - - - - - - - - - - - - -

Then, if in a core module in our package (call it aurora.User) in the
system we defined some user related objects (that are meant to be
distributable), it might look like:

           - - - - - - - - - - - - - - - - - - - - - - - - -
class User(remoteable.Copyable):
    """A typical data object"""
    # Attributes and simple methods for manipulating as needed
    pass

class UserModel(remoteable.Cacheable):
    """A typical cached model"""
    # Attributes and signal support for notification on changes
    pass

class UserManager(interfaces.IUserManager, remotable.Referenceable):
    """A typical manager.  IUserManager is an interface definition for
    the public API"""
    # Methods for accessing/changing User and UserModel objects
    # Assume that getUser retrieves  user and getModel retrievs a UserModel
           - - - - - - - - - - - - - - - - - - - - - - - - -

As it stands above, the user objects would be fully usable in a local
context.  Access to the UserManager would be through a Registry in which
it had been registered, and the UserManager would provide access to
either User or UserModel objects.

To permit distribution, we'd first add appropriate remote_* (or view_*)
entry points to the UserManager.  Most would simply mirror their
original methods (leaving it up to pb to construct the references).  But
any methods that returned models would be adjusted so that instead of
just returning the model, they wrapped that model in an appropriate
remoteable.ModelCache subclass and returned that instead.  So something like:

           - - - - - - - - - - - - - - - - - - - - - - - - -
    remote_getUser = getUser

    def remote_getModel(self, *args, **kwargs):
        return remoteable.UserModel(self.getModel(*args, **kwargs))
           - - - - - - - - - - - - - - - - - - - - - - - - -

That's the extent to which original objects need to be touched.  The
only remote entry points are in managers (our referenceables), with data
objects being handled by PB as copyable or cacheable.

Then in the remote.py module we'd add the following:

           - - - - - - - - - - - - - - - - - - - - - - - - -
class User(aurora.User.User, CopyObject):
    # CopyObject is our own mirror to remoteable.Copyable
    pass

pb.setUnjellyableForClass(aurora.User.User, User)
# Note that a remote copy can be a copy of itself (this handles hops 2+)
pb.setUnjellyableForClass(User, User)

class UserModel(aurora.User.UserModel, pb.RemoteCache):
    # Depending on how the model detects state changes, you may need to
    # do some processing in setCopyableState or you may not.
    pass

pb.setUnjellyableForClass(remoteable.UserModel, UserModel)

class UserManager(RemoteWrapper, interfaces.IUserManager):
    exclude = "remote_getModel"

    # We still need to locally wrap as a cacheable for hops 2+
    def remote_getModel(self, *args, **kwargs):
        return remoteable.UserModel(self.getModel(*args, **kwargs))
           - - - - - - - - - - - - - - - - - - - - - - - - -

The last one could probably use some explaining.  Our RemoteWrapper
class intercepts attribute lookups, and based on any superclass that is
one of our interfaces, uses the interface definition to reflect method
calls (as well as remote_* versions of them) over callRemote.  We permit
certain methods to be excluded from the wrapping (via an "exclude"
attribute) which lets us handle them locally in the wrapper. In this
case, just as the original user object did, we need to wrap the local
cache of a UserModel in the cacheable before trying to return to any
further remote callers.  (This is where having our remote.UserModel be
directly a pb.Cacheable might simplify things).  But the getUser method
is basically for free, since PB will handle making a copyable of the
original user object which will end up coming across to the client
wrapped as a remote.User object.

Overall, we don't do that much overriding of the remote methods.  One
case where we do is for the remote.Registry since it's responsible for
always wrapping returned managers in the right remote class.  Since our
registry lookup method is given an interface to find a manager for, the
remote.Registry looks in the local module (remote) for a class
definition inheriting from the same interface and then uses that to wrap
the returned referenceable, thus more or less transparently making the
returned referenceable look just like the original object.

These remote.* objects are all themselves copy/cache/referenceable since
they also inherit from their remoteable counterparts (or are wrapped by
such as in the getModel call).  So this can go on for many hops.

Now let me see if I can put this together with a few other components.
For example, in a two hop setup, you'd get:

    Server [<--A-->] Client 1   [<---B--->]  Client 2
(a) Registry <------ remote.Registry <------ remote.Registry
(b) UserManager <--- remote.UserManager <--- remote.UserManager
(c) User <---------- remote.User <---------- remote.User
(d) UserModel <----- remote.UserModel <----- remote.UserModel  (etc...)

The connections "A" and "B" are actually paired Server and Client
objects of our own (that I mentioned in my last note).

During a startup sequence, Server creates the master registry (including
instantiating and registering any managers).  It then establishes a
Server object that provides access to the Registry for network clients.
Simultaneously the Registry may be used by local processing.

At some point, Client 1 uses its Client object to connect to Server's
Server object and retrieve a reference to Registry (a), which is wrapped
in a remote.Registry by the Client object.  That remote.Registry can
then be published by Client 1's Server object (the Server object just
knows it has a registry, but can't or needn't distinguish between
Registry and remote.Registry), which can be retrieved by Client 2's
Client object.  Client 2 also gets a remote.Registry, but it's an extra
"hop" removed from the original Registry instance.

Now sticking with 2 hops, say Client 2 needs some information.  First,
it'll ask its registry for a reference to the UserManager.  The call is
reflected by Client 2's remote.Registry up to Client 1, whose
remote.Registry reflects it up to Server's Registry.  That Registry
returns a reference to UserManager which PB sends as a referenceable
(shared only between Server and Client 1).  The remote.Registry on
Client 1 wraps that as a remote.UserManager and then returns it to
Client 2, which again causes PB to send a referenceable (shared only
between Client 1 and Client 2), which Client 2's remote.Registry again
wraps as a remote.UserManager.

Now, Client 2 asks its UserManager for a User object.  The call reflects
up to the Server the same way, but the response this time is a copyable,
so PB copies it across Server->Client 1 (which instantiates a
remote.User), which is then copied by PB from Client 1->Client 2
(creating another remote.User).

And perhaps now Client 2 wants a UserModel (asking the UserManager).
Call again reflects up to Server, but the remote entry point on the main
UserManager wraps the UserModel in a remoteable.UserModel to return to
PB, which then treats it as a cacheable down to Client 1, which
instantiates it as remote.UserModel.  Client 1's remote.UserManager then
wraps it in a local remoteable.UserModel to return (as a cacheable) to
Client 2, which gets a remote.UserModel.  From Server's perspective
there is a remoteable.UserModel instance (which is watching signals on
the original UserModel) which has Client 1 as a PB observer, and from
Client 1's perspective there is a remoteable.UserModel instance (which
is watching signals on the local remote.UserModel) which has Client 2 as
a PB observer.

Still with me?  :-)

Now let's say there's an outage - say between Server and Client 1.
Whatever the next attempt is to use callRemote in any wrapped object
will detect the problem and emit a disconnected signal.  We also have a
periodic Client->Server object "ping" that will pick up an outage in the
absence of other calls, which occurs periodically or is triggered
automatically upon receiving the disconnected signal from any wrapper object.

Upon detection by the Client object of the outage, it then emits its own
disconnected signal, upon which various application level operations may
take place, officially disconnects the PB socket, and starts attempting
to reconnect.

Any operations on wrapped objects past this point will generate the
normal PB DeadReferenceError exception since we shut down the connection.

When Client 1's Client object manages to reconnect, it will immediately
re-query the registry from the Server's Server object.  Once it has
successfully retrieved the new registry, it then emits a newly connected
signal which includes the new registry reference.

Our remote.Registry object (along with other application level stuff)
listens for this signal and upon receipt, updates its internal wrapped
reference, and automatically issues a requery to that reference for any
managers that had previously been queried through it.  When it gets new
references to them it updates its internal information, as well as any
wrappers that it had previously handed out (it keeps a cache).  Once
this final step is completed, any application code that had been
attempting to use those wrapped references will be working again.

The remote copyables don't need any special support since they are still
legitimate copies.  But remote cacheables also need to be re-connected,
and are trickier since it's harder to come up with a single way to
retrieve new cacheables, since they are less regular than manager
references retrieved through the registry.  To date we've handled this
on a case by case basis either through the wrapper of the responsible
manager, or via application level support for re-retrieving the model
upon receipt of the reconnection signal.

> P.S.
>
(...)
> The system I had in mind:
>
> I like and want to adhere to the data/state distinction you made.
> Events will be handled locally by remote caches, based on changes in
> the cached data (this may be accomplished degenerately, by not
> exposing anything other than the event).

As mentioned above, in our case we make use of pydispatcher for
signals/events within each local application space, using the PB
cacheable setup (with wrappers on each end) to reflect the data.  This
lets client code be written as if it was handling local signals
regardless of whether the model object is a cache of a remote object or
truly the local instance.

> Differences from your system:
>
> I would like all of my referenceables and cacheables in my system to
> be re-connecting. This to some extent cancels the need for managers,
> because any dynamically changing object is re-connecting.

We're pretty much auto-reconnecting (as above).  I think you'll probably
need something akin to a manager, or at least a registry to perform the
reconnection though, or else you won't have a well-defined point at the
original to which you can re-issue the original request to get a new
referenceable/cacheable on the reconnecting client.

> Instead of (or possibly in addition to) manager objects, I want to
> have what I call Seed objects, which represent a combination of state,
> data and referenceables (all optional). These seeds will be copyable,
> and will include the knowledge required to retrieve their components.

Sounds reasonable.  I still think you'll need a separate construct to
"own" access to these Seed objects, or else what is the remote seed
reference going to issue a query against in order to rebuild its remote
references following an outage?

(...)
>    The main reasons for seeds are:
> 
> I want state, data and control to be provided by the same object for
> clarity, and not have each of them require an individual query. For
> example, a user will have Name, email address, etc. as data,
> online/offline as state, and a send_message method.

One thing to consider is the creation of the information/state that the
seeds are encapsulating.  One of the reasons we ended up going more
heavily towards copyable objects (rather than references) is that we can
end up creating such objects at various points within the distributed
system.  So it's very convenient to be able to instantiate a local
object instance (say of a user object) in order to begin the process of
creating a user, and populating its information, without bringing in the
rest of the baggage of the remote connection until it comes time for the
"store" operation.  Likewise we found it much easier to manage
reconnections upon "active" objects with well-defined APIs as opposed to
the data objects such as a user record.

So even if you have the construct of a seed object to encapsulate remote
handling, you might want to consider separating out the data object
components into their own class for simpler manipulation, prior to
assigning that data to a seed object to become part of the distributed
system.

> I want state objects, referenceables, and possibly data associated
> with a Seed to be retrievable from a Server different from the one who
> dispensed the Seed (for example, the database may provide a seed and
> the associated user-changeable data, but the state may be kept by a
> different server). For example, the user?s data may be stored in a
> database, his online/offline state retrieved from a presence server,
> and sending him a message may require connecting to his workstation.

This sounds like more of a reason to split some of the functionality
into separable entities than trying to combine them all into a single
seed object, although I could probably see some argument for combining
in order to hide the origin of the data from the end user.  But then
you're going to have to keep a lot of information in that seed object
about where each of its information pieces originally came from and be
able to reconstitute the references when needed.  And handle what
happens if you lose contact with the owner of one piece of the
information but not another.

To a large extent, permitting this sort of breakout is where we headed
with our registry/manager structure.  To a client, it only has a
registry reference, and asks it for managers in order to
retrieve/manipulate state.  But it doesn't know how the registry locates
managers nor how the managers locate their state.  So when I ask my
"local" registry for a user manager, for all I know that request is
replicated across 5 hosts and I eventually get what appears to be a
local user manager but is a remote reference to an object instance 5
hosts away.  At the same time that same registry when asked for a
session manager, might return me a local object from my own local
process.

The decision about where the managers are located is up to top
level application code that instantiates the registry and makes it
available on the network (and we have various registry variants for
different ways of combining local and remote managers).  This lets each
"hop" along the way make some of its own decisions independent of other
parts of the system, with a given node running a registry in control of
what any nodes "behind" it sees, or even what managers are available.

This can certainly be incorporated into a single seed object, but I
think you'll have to make some decisions about how the original data
sources are configured (and does that itself need to be capable of being
distributed).  If you can own that configuration amongst various
centrally maintained servers, and you're operating from primarily a hub
and spoke system it'll probably work well.  But if you might end up with
independently operating clusters of nodes or want to distribute
administrative domains over various sorts of data, it might be more of a
challenge.

Hope this has spurred some more thoughts.  Best of luck with your
project!

-- David




From itamar at itamarst.org  Tue Jul 26 11:04:55 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 26 Jul 2005 11:04:55 -0400
Subject: [Twisted-Python] Getting peer IP address from Perspective Broker
In-Reply-To: <35b7725f05072508535ba3bd1a@mail.gmail.com>
References: <35b7725f05072508535ba3bd1a@mail.gmail.com>
Message-ID: <1122390295.8854.53.camel@localhost.localdomain>

On Mon, 2005-07-25 at 10:53 -0500, J French wrote:
> Is there an accessible method to retrieve a peer's ip address from
> within pb?  I just want to log it.
> 
> I read the Faq and see how to do it when subclassing protocol i.e.:
> class MyProtocol(protocol.Protocol):
>     def connectionMade(self):
>         print "connection from", self.transport.getPeer()
> 
> I'd appreciate it if someone can point me in the right direction.

remoteReference.broker.transport.getPeer() will do it. The broker
attribute of RemoteReferences is the protocol instance they are
connected to.




From natester at gmail.com  Tue Jul 26 19:44:59 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Tue, 26 Jul 2005 17:44:59 -0600
Subject: [Twisted-Python] CPU intensive threads
Message-ID: <4adac7a305072616446b6e13a@mail.gmail.com>

Is there anything twisted can do about CPU intensive threads?

When I run a CPU intensive method via threads.deferToThread it takes
all the CPU away and renders the twisted process unresponsive.  The
perspective broker for example will not make any connections until the
CPU intensive methods finish.

Is there a way to set the priority of the main part of twisted so that
it can run CPU intensive threads and still service connections.

Thanks,  
Nate



From ww at groovy.net  Tue Jul 26 19:51:46 2005
From: ww at groovy.net (William Waites)
Date: Tue, 26 Jul 2005 19:51:46 -0400
Subject: [Twisted-Python] CPU intensive threads
In-Reply-To: <4adac7a305072616446b6e13a@mail.gmail.com>
References: <4adac7a305072616446b6e13a@mail.gmail.com>
Message-ID: <20050726235146.GD20946@groovy.net>

you can yield or do a blocking operation like calling a syscall
every so often in the cpu intensive thread

On Tue, Jul 26, 2005 at 05:44:59PM -0600, Nathaniel Haggard wrote:
> Is there anything twisted can do about CPU intensive threads?
> 
> When I run a CPU intensive method via threads.deferToThread it takes
> all the CPU away and renders the twisted process unresponsive.  The
> perspective broker for example will not make any connections until the
> CPU intensive methods finish.
> 
> Is there a way to set the priority of the main part of twisted so that
> it can run CPU intensive threads and still service connections.
> 
> Thanks,  
> Nate
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From foom at fuhm.net  Wed Jul 27 08:21:43 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 27 Jul 2005 08:21:43 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <B2D9196C-3FFC-4E4C-9B2E-63924C3A1319@fuhm.net>

Bug summary
______________________
Since 2005-07-21 20:48:42.470000:
Bugs opened: 7   Bugs closed: 2   Total open bugs: 417 (+5)
   Urgent: 9 (+0)
   Bug: 181 (+2)
   Feature: 150 (+3)
   Wish: 77 (+0)

New / Reopened Bugs
______________________
                     ==== Bug ====
[WEB] web2 file upload and unit test problems  (3 days ago)
        http://twistedmatrix.com/bugs/issue1127 opened by exarkun

win32reactor spawnProcess incorrectly escapes cmd line  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1123 opened by justinj

pop3client needs to handle servers which do not implement CAPA  (4  
days ago)
        http://twistedmatrix.com/bugs/issue1125 opened by bkirsch

getHost and getPeer not needed for IProcessTransport  (4 days ago)
        http://twistedmatrix.com/bugs/issue1124 opened by justinj

                     ==== Feature ====
Package Twisted using Eggs/EasyInstall  (3 days ago)
        http://twistedmatrix.com/bugs/issue1126 opened by glyph

Twisted fork of pyOpenSSL (pyTLS ?)  (5 days ago)
        http://twistedmatrix.com/bugs/issue1121 opened by landonf

fix for gtk2reacton warnings  (5 days ago)
        http://twistedmatrix.com/bugs/issue1122 opened by libber

Bugs Closed
______________________
                     ==== Bug ====
[FTP] IFTPShell needs to be completely restructured  (3 months ago)
        http://twistedmatrix.com/bugs/issue983 opened by srichter,  
closed by itamarst

win32reactor spawnProcess incorrectly escapes cmd line  (4 days ago)
        http://twistedmatrix.com/bugs/issue1123 opened by justinj,  
closed by itamarst





From itamar at itamarst.org  Wed Jul 27 10:40:18 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 27 Jul 2005 10:40:18 -0400
Subject: [Twisted-Python] CPU intensive threads
In-Reply-To: <4adac7a305072616446b6e13a@mail.gmail.com>
References: <4adac7a305072616446b6e13a@mail.gmail.com>
Message-ID: <1122475219.8776.17.camel@localhost.localdomain>

On Tue, 2005-07-26 at 17:44 -0600, Nathaniel Haggard wrote:

> When I run a CPU intensive method via threads.deferToThread it takes
> all the CPU away and renders the twisted process unresponsive.  The
> perspective broker for example will not make any connections until the
> CPU intensive methods finish.

If it's a C extension you'll want to release the global interpreter lock
when possible, otherwise other threads will *never* run, regardless of
how much CPU you code uses.






From db3l at fitlinxx.com  Wed Jul 27 11:05:43 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 27 Jul 2005 11:05:43 -0400
Subject: [Twisted-Python] Re: CPU intensive threads
References: <4adac7a305072616446b6e13a@mail.gmail.com>
Message-ID: <uvf2wffw8.fsf@fitlinxx.com>

Nathaniel Haggard <natester at gmail.com> writes:

> Is there a way to set the priority of the main part of twisted so that
> it can run CPU intensive threads and still service connections.

Although you could try using OS-dependent methods for boosting the
priority of the main thread (or lowering the background threads) if
you're truly CPU bound in pure Python code, it probably won't help
much, since even if it gets preferential control, the main twisted
loop calls out to I/O operations so much it would just be releasing it
back pretty fast.  

While Python does use native threads, due to its GIL (global
interpreter lock), if you have a thread that is purely CPU bound in
Python code generally the only way other threads get time is during a
periodic byte-code interval.  (You can find many more discussions
about the GIL and its implications in the comp.lang.python archives)

As mentioned in another response, the simplest way to help force
context switches in a tight CPU thread is by performing some operation
that releases the GIL (a simple one is something like time.sleep(0)),
so if your routine is such that it has a tight loop or some repetitive
code path, putting something like that in there might help quite a
bit.

If not, you might try fiddling with sys.setcheckinterval(), which
represents the number of byte-codes before Python forces the potential
for a thread switch (explicitly releases/grabs the GIL).  It was
bumped higher in recent Python releases - I think it's 100 now - so
you could try dropping it down to 10 or something.  Doing so will
probably cause your process to burn slightly more cpu/time overall,
but it should permit individual threads to remain more responsive in
the presence of CPU-bound threads.

If that still doesn't give you enough resilience, another option would
probably be to offload the processing to a separate process,
maintaining a simple link to the other process and communicating
requests over there for processing.  This supposes that transmitting
requests and results won't be a terribly high burden in time/space.
Since you're already using PB for other stuff, having an internal
(same host) PB server with appropriate processing objects would
probably work really well.  For your own interprocess communication
you could also decide to do a simpler RPC protocol that just pickled
the information to minimize the performance/transport impact.  Such a
setup would also give you (mostly for free) the flexibility to scale
the processing to multiple hosts should the need arise, as well as
being more friendly to SMP systems (which Python's GIL also interferes
with).

If you can't afford the time to transfer requests and/or results to a
separate process over a normal channel, and are on a Posix platform,
you might also investigate POSH (http://poshmodule.sourceforge.net),
which implements object sharing in shared memory between processes,
which would eliminate the transport overhead but still let you
separate the processing into distinct processes.  It's an early
development project that I've only experimented with but if it fits
your needs it might do well.  (It comes with a simple
producer/consumer example that could probably be used as a starting
point)

-- David




From exarkun at divmod.com  Wed Jul 27 16:19:43 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 27 Jul 2005 16:19:43 -0400
Subject: [Twisted-Python] Re: CPU intensive threads
In-Reply-To: <uvf2wffw8.fsf@fitlinxx.com>
Message-ID: <20050727201943.7340.147520100.divmod.quotient.405@ohm>

On 27 Jul 2005 11:05:43 -0400, David Bolen <db3l at fitlinxx.com> wrote:
>Nathaniel Haggard <natester at gmail.com> writes:
>
>> Is there a way to set the priority of the main part of twisted so that
>> it can run CPU intensive threads and still service connections.
>
> [snip]
>
>If you can't afford the time to transfer requests and/or results to a
>separate process over a normal channel, and are on a Posix platform,
>you might also investigate POSH (http://poshmodule.sourceforge.net),
>which implements object sharing in shared memory between processes,
>which would eliminate the transport overhead but still let you
>separate the processing into distinct processes.  It's an early
>development project that I've only experimented with but if it fits
>your needs it might do well.  (It comes with a simple
>producer/consumer example that could probably be used as a starting
>point)
>

POSH doesn't elimate the transport overhead.  I've done some basic investigation, and it's incredibly slow.  mmap() is probably a better solution in most cases, although I am not convinced multiple processes are called for in this case.

A solution which hasn't been suggested yet is to drop the native thread and use a cooperative Python thread.  With this approach, you can choose to schedule it however you like, including /not/ scheduling it when you have other more important tasks to complete.

Jp



From db3l at fitlinxx.com  Wed Jul 27 17:10:42 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 27 Jul 2005 17:10:42 -0400
Subject: [Twisted-Python] Re: CPU intensive threads
References: <uvf2wffw8.fsf@fitlinxx.com>
	<20050727201943.7340.147520100.divmod.quotient.405@ohm>
Message-ID: <ur7dkeyzx.fsf@fitlinxx.com>

Jp Calderone <exarkun at divmod.com> writes:

> POSH doesn't elimate the transport overhead.  I've done some basic
> investigation, and it's incredibly slow.  mmap() is probably a
> better solution in most cases, although I am not convinced multiple
> processes are called for in this case.

Me neither, but it would be a logical way to progress if you couldn't
resolve things in the single process.  Good to know about POSH though.

> A solution which hasn't been suggested yet is to drop the native
> thread and use a cooperative Python thread.  With this approach, you
> can choose to schedule it however you like, including /not/
> scheduling it when you have other more important tasks to complete.

Well, but you'd still have the problem of ensuring that it was
yielding back at a reasonable frequency wouldn't you?  So it would be
similar to sprinkling in a time.sleep(0) in a non-cooperative thread,
and still subject to cases where it might not be that simple.

-- David




From natester at gmail.com  Wed Jul 27 19:02:39 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Wed, 27 Jul 2005 17:02:39 -0600
Subject: [Twisted-Python] Re: CPU intensive threads
In-Reply-To: <ur7dkeyzx.fsf@fitlinxx.com>
References: <uvf2wffw8.fsf@fitlinxx.com>
	<20050727201943.7340.147520100.divmod.quotient.405@ohm>
	<ur7dkeyzx.fsf@fitlinxx.com>
Message-ID: <4adac7a3050727160223619683@mail.gmail.com>

These CPU intensive threads are python/C extensions generated with
pyrex.  Instead of messing with the GIL I will use processes as David
suggests.  It would be nice to have a process pool implementation that
was as easy to use as deferToThread.

Evidently they use the perspective broker for inter process
communication in quotient.searchup, and that may be a good starting
place.

Thanks,
-Nate



On 27 Jul 2005 17:10:42 -0400, David Bolen <db3l at fitlinxx.com> wrote:
> Jp Calderone <exarkun at divmod.com> writes:
> 
> > POSH doesn't elimate the transport overhead.  I've done some basic
> > investigation, and it's incredibly slow.  mmap() is probably a
> > better solution in most cases, although I am not convinced multiple
> > processes are called for in this case.
> 
> Me neither, but it would be a logical way to progress if you couldn't
> resolve things in the single process.  Good to know about POSH though.
> 
> > A solution which hasn't been suggested yet is to drop the native
> > thread and use a cooperative Python thread.  With this approach, you
> > can choose to schedule it however you like, including /not/
> > scheduling it when you have other more important tasks to complete.
> 
> Well, but you'd still have the problem of ensuring that it was
> yielding back at a reasonable frequency wouldn't you?  So it would be
> similar to sprinkling in a time.sleep(0) in a non-cooperative thread,
> and still subject to cases where it might not be that simple.
> 
> -- David
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From sflist at ihonk.com  Thu Jul 28 00:22:50 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Wed, 27 Jul 2005 21:22:50 -0700
Subject: [Twisted-Python] PB checkers bug?
Message-ID: <1122524570.18904.33.camel@lothar>

Hi all,

I didn't get a reply to my earlier post about inventing mad crazy
checkers, so I decided to just use the IUsernamePassword interface, but
I'm stuck, because it appears PB won't allow me to use only that
interface. If I try, it dies like this:

Traceback (most recent call last):
Failure: twisted.cred.error.UnhandledCredentials: No checker for
twisted.cred.credentials.IUsernameHashedPassword,
twisted.spread.pb.IUsernameMD5Password,
twisted.spread.interfaces.IJellyable

To reproduce the error, all you have to do is tweak
InMemoryUsernamePasswordDatabaseDontUse to only implement
IUsernamePassword. I've prepared the code below for a client and a
server to demonstrate the issue. Am I just missing something? If not,
should the inability to use IUsernamePassword alone be filed as a bug?

Anybody?

Thanks,

Steve

-----------------

This is the server:

#!/usr/bin/python
from twisted.cred import checkers, credentials, portal
from twisted.internet import reactor
from twisted.spread import pb
from zope import interface

class MyRealm:
    __implements__ = portal.IRealm
    def requestAvatar(self, avatarId, mind, *interfaces):
        print "Success! We'll never get here. :-("
        return pb.IPerspective, pb.Avatar(), lambda: reactor.stop()

# So we use a simple checker...
the_checker = \
checkers.InMemoryUsernamePasswordDatabaseDontUse(client1='abc')
# ...and now let's perform the problematic modification:
the_checker.credentialInterfaces = (credentials.IUsernamePassword,)

the_realm = MyRealm()
the_portal = portal.Portal(the_realm)
the_portal.registerChecker(the_checker)
the_factory = pb.PBServerFactory(the_portal)
reactor.listenTCP(8800, the_factory)
reactor.run()

-----------------

This is the client:

#!/usr/bin/python
from twisted.spread import pb
from twisted.internet import reactor
from twisted.python import log
from twisted.cred import credentials
import sys
log.startLogging(sys.stdout, 0)

the_factory = pb.PBClientFactory()
reactor.connectTCP('localhost', 8800, the_factory)
d = the_factory.login(credentials.UsernamePassword('client1', 'abc'))
d.addCallback(lambda x: log.msg('Success! Won\'t happen.'))
d.addErrback(lambda x: log.msg('We died:', x))
reactor.run()

-- 
Steve Freitas <sflist at ihonk.com>




From exarkun at divmod.com  Thu Jul 28 01:09:33 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 28 Jul 2005 01:09:33 -0400
Subject: [Twisted-Python] PB checkers bug?
In-Reply-To: <1122524570.18904.33.camel@lothar>
Message-ID: <20050728050933.7340.455176814.divmod.quotient.549@ohm>

On Wed, 27 Jul 2005 21:22:50 -0700, Steve Freitas <sflist at ihonk.com> wrote:
>Hi all,
>
>I didn't get a reply to my earlier post about inventing mad crazy
>checkers, so I decided to just use the IUsernamePassword interface, but
>I'm stuck, because it appears PB won't allow me to use only that
>interface. If I try, it dies like this:
>

PBClientFactory's login method is a rotten lie.  It /does not/ take an IUsernamePassword credentials objects, nor does it log in with the server using an IUsernamePassword credentials object.  It takes an object with a username attribute and a password attribute, and logs in with an IUsernameHashedPassword.  Your credentials checker /must/ support checking the latter interface.

If you want to support some other authentication backend which is incapable of checking IUsernameHashedPassword credentials, you may need to implement an alternate login scheme for PB.  This is not difficult, but consider carefully whether you actually need it or not (because writing crypto code is always risky).

Jp



From sflist at ihonk.com  Thu Jul 28 01:23:00 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Wed, 27 Jul 2005 22:23:00 -0700
Subject: [Twisted-Python] PB checkers bug?
In-Reply-To: <20050728050933.7340.455176814.divmod.quotient.549@ohm>
References: <20050728050933.7340.455176814.divmod.quotient.549@ohm>
Message-ID: <1122528180.18904.37.camel@lothar>

Okay, good to know I'm not crazy. I'll file a bug with a patch to change
the docstring.

I'll just put up with a hashed login, as I'm getting impatient to move
on with my project; it'll still allow me to throw a bunch of metadata
into the username string, which gives me everything I need.

Thanks,

Steve

On Thu, 2005-07-28 at 01:09 -0400, Jp Calderone wrote:
> On Wed, 27 Jul 2005 21:22:50 -0700, Steve Freitas <sflist at ihonk.com> wrote:
> >Hi all,
> >
> >I didn't get a reply to my earlier post about inventing mad crazy
> >checkers, so I decided to just use the IUsernamePassword interface, but
> >I'm stuck, because it appears PB won't allow me to use only that
> >interface. If I try, it dies like this:
> >
> 
> PBClientFactory's login method is a rotten lie.  It /does not/ take an IUsernamePassword credentials objects, nor does it log in with the server using an IUsernamePassword credentials object.  It takes an object with a username attribute and a password attribute, and logs in with an IUsernameHashedPassword.  Your credentials checker /must/ support checking the latter interface.
> 
> If you want to support some other authentication backend which is incapable of checking IUsernameHashedPassword credentials, you may need to implement an alternate login scheme for PB.  This is not difficult, but consider carefully whether you actually need it or not (because writing crypto code is always risky).
> 
> Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
Steve Freitas <sflist at ihonk.com>




From Stephan.Popp at iisb.fraunhofer.de  Fri Jul 29 04:46:45 2005
From: Stephan.Popp at iisb.fraunhofer.de (Stephan Popp)
Date: Fri, 29 Jul 2005 10:46:45 +0200
Subject: [Twisted-Python] why insecureJelly
Message-ID: <200507291046.45817.Stephan.Popp@iisb.fraunhofer.de>

Hi,
I want to send objects accross the network and all I get is insecure Jelly.
My application looks like this:
-folder structure:
-dispyte
--common
--GACrysVUn
--baseclasses

in common is the declaration of the object which should be send:

from dispyte.baseclasses import Task #thats the abstract baseclass
from twisted.spread import pb

class SimpleTask(Task.Task, pb.Copyable, pb.RemoteCopy):
	def __init__(self):
		...

pb.setUnjellyableForClass(SimpleTask, SimpleTask)

these objects are created by a instance of a class located in GACrysVUn:

from dispyte.baseclasses import Producer
from dispyte.common import SimpleTask

class GACrysVUnProducer(Producer.Producer):

	def foo():  #just as examlpe of the structure
		task = SimpleTask.SimpleTask()

the task-object is given to another class instance lockated in common:
here the task object is send:

...
	factory = pb.PBClientFactory()
        reactor.connectTCP(parameters[0], parameters[1], factory)
	def0 = factory.getRootObject()
	...
        def2 = self.root.callRemote("fitness", task, self.taskDescription, 
self.ID)
        def2.addCallback(self.callback)
        def2.addErrback(self.errback, task, self)

the server looks like:

from twisted.spread import pb
from twisted.internet import reactor,threads
from dispyte.common import SimpleTask
from dispyte.common import ScriptedTaskDescription
import sys
class ServerObject(pb.Root):

	...

    def remote_fitness(self, task, taskDescription, serverID):
        """
        calls calc in seperate thread and return a deferred
        """
        self.ID = serverID
        print "ServerObject::remote_fitness ..."
        return threads.deferToThread(self.calc,task,serverID, taskDescription)

	...

if __name__ == '__main__':
    factory = pb.PBServerFactory(ServerObject(sys.argv[1]))
    reactor.listenTCP(eval(sys.argv[1]), factory)
    reactor.run()

I can't figure out, why insecureJelly is raised here. Can anyone help me?
And: Is there a possibility to turn off this feature, so that a server takes 
objects no matter what class?

Thanks in advance.

Stephan









From Stephan.Popp at iisb.fraunhofer.de  Fri Jul 29 05:01:02 2005
From: Stephan.Popp at iisb.fraunhofer.de (Stephan Popp)
Date: Fri, 29 Jul 2005 11:01:02 +0200
Subject: [Twisted-Python] why insecureJelly
In-Reply-To: <200507291046.45817.Stephan.Popp@iisb.fraunhofer.de>
References: <200507291046.45817.Stephan.Popp@iisb.fraunhofer.de>
Message-ID: <200507291101.02100.Stephan.Popp@iisb.fraunhofer.de>

On Friday 29 July 2005 10:46, Stephan Popp wrote:
> Hi,
> I want to send objects accross the network and all I get is insecure Jelly.
> My application looks like this:
> -folder structure:
> -dispyte
> --common
> --GACrysVUn
> --baseclasses
>
> in common is the declaration of the object which should be send:
>
> from dispyte.baseclasses import Task #thats the abstract baseclass
> from twisted.spread import pb
>
> class SimpleTask(Task.Task, pb.Copyable, pb.RemoteCopy):
> 	def __init__(self):
> 		...
>
> pb.setUnjellyableForClass(SimpleTask, SimpleTask)
>
> these objects are created by a instance of a class located in GACrysVUn:
>
> from dispyte.baseclasses import Producer
> from dispyte.common import SimpleTask
>
> class GACrysVUnProducer(Producer.Producer):
>
> 	def foo():  #just as examlpe of the structure
> 		task = SimpleTask.SimpleTask()
>
> the task-object is given to another class instance lockated in common:
> here the task object is send:
>
> ...
> 	factory = pb.PBClientFactory()
>         reactor.connectTCP(parameters[0], parameters[1], factory)
> 	def0 = factory.getRootObject()
> 	...
>         def2 = self.root.callRemote("fitness", task, self.taskDescription,
> self.ID)
>         def2.addCallback(self.callback)
>         def2.addErrback(self.errback, task, self)
>
> the server looks like:
>
> from twisted.spread import pb
> from twisted.internet import reactor,threads
> from dispyte.common import SimpleTask
> from dispyte.common import ScriptedTaskDescription
> import sys
> class ServerObject(pb.Root):
>
> 	...
>
>     def remote_fitness(self, task, taskDescription, serverID):
>         """
>         calls calc in seperate thread and return a deferred
>         """
>         self.ID = serverID
>         print "ServerObject::remote_fitness ..."
>         return threads.deferToThread(self.calc,task,serverID,
> taskDescription)
>
> 	...
>
> if __name__ == '__main__':
>     factory = pb.PBServerFactory(ServerObject(sys.argv[1]))
>     reactor.listenTCP(eval(sys.argv[1]), factory)
>     reactor.run()
>
> I can't figure out, why insecureJelly is raised here. Can anyone help me?
> And: Is there a possibility to turn off this feature, so that a server
> takes objects no matter what class?
>
> Thanks in advance.
>
> Stephan

PS: the error message is (from failue.getErrorMessage()):
Module dispyte.common.SimpleTask not allowed 
(in type dispyte.common.SimpleTask.SimpleTask)






From snacktime at gmail.com  Sun Jul 31 01:52:27 2005
From: snacktime at gmail.com (snacktime)
Date: Sat, 30 Jul 2005 22:52:27 -0700
Subject: [Twisted-Python] Errors after upgrading to 2.0.1
Message-ID: <1f060c4c0507302252592797d5@mail.gmail.com>

I'm testing out an application I wrote in 1.3.  In 2.0.1 I get a
warning and an exception.

The UserWarning about SSL I looked up on the list and I understand why
it's there, although I think it's a bad idea.  The warning is about a
bug in pyopenssl that hasn't been fixed in pyopenssl.  In addition
there is no reason to think it will ever be fixed after being ignored
for this long.  Maybe someone could find a better solution for this
warning other then leaving it to end user to find the patch on the
mailing list, which for all I know might not even work at this point. 
 Maybe put up a patched copy of pyopenssl on twistedmatrix.com?  Seems
better than having an unmaintained dependancy in twisted.

The exception I really have no clue about, maybe someone could point
out where the problem is?

Code:
----------------------------------------
#!/usr/local/bin/python
from OpenSSL import SSL
import sys
import time

from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver
from twisted.internet import ssl, reactor
from curses.ascii import STX,ETX,FS

STX =  chr(STX)
ETX =  chr(ETX)
FS =  chr(FS)


class EchoClient(LineReceiver):
    end="GoodBye"
    def connectionMade(self):
        transaction = self.factory.trans
        self.sendLine("%s" % transaction)

    def connectionLost(self, reason):
        #print 'connection lost (protocol)'
        reactor.stop()

    def lineReceived(self, line):
        print "receive:", line
        self.transport.loseConnection()

class EchoClientFactory(ClientFactory):
    protocol = EchoClient

    def clientConnectionFailed(self, connector, reason):
        print 'connection failed:', reason.getErrorMessage()
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        #print 'connection lost:', reason.getErrorMessage()
        reactor.stop()

    def SetTransaction(self,id,a,b,c,d,e,f,g,h,i,j,k,l):
      self.trans = STX + id + FS + a + FS + b + FS + c + FS + d + FS +
e + FS + f + FS + g + FS + h + FS + i + FS + j + FS + k + FS + l + ETX

    def GetTransaction(self):
      return self.trans

def main():
    factory = EchoClientFactory()
    factory.SetTransaction('id1','vital','VERIFY','poi2','4111111111111111','05','12','100','123
abc street','98034','','','id1')
    reactor.connectSSL('localhost', 8000, factory, ssl.ClientContextFactory())
    reactor.run()


if __name__ == '__main__':
    main()
-----------------------------------------------------------


Output:
-------------------------------------------------
receive: id1:APPROVED::TRANSACTION PRESENT:::0000123456789
/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py:216:
UserWarning: SSL connection shutdown possibly unreliable, please
upgrade to ver 0.XX
  "please upgrade to ver 0.XX", category=UserWarning)
Traceback (most recent call last):
  File "./error", line 55, in ?
    main()
  File "./error", line 51, in main
    reactor.run()
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py",
line 199, in run
    self.mainLoop()
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py",
line 207, in mainLoop
    self.runUntilCurrent()
--- <exception caught here> ---
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 533, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 389, in _continueSystemEvent
    for callList in sysEvtTriggers[1], sysEvtTriggers[2]:
exceptions.TypeError: unsubscriptable object



From exarkun at divmod.com  Sun Jul 31 11:31:23 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 31 Jul 2005 11:31:23 -0400
Subject: [Twisted-Python] Errors after upgrading to 2.0.1
In-Reply-To: <1f060c4c0507302252592797d5@mail.gmail.com>
Message-ID: <20050731153123.3914.1677534921.divmod.quotient.765@ohm>

On Sat, 30 Jul 2005 22:52:27 -0700, snacktime <snacktime at gmail.com> wrote:
>I'm testing out an application I wrote in 1.3.  In 2.0.1 I get a
>warning and an exception.
>

The exception is caused by calling reactor.stop() twice.

Jp



From snacktime at gmail.com  Sun Jul 31 13:22:49 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 31 Jul 2005 10:22:49 -0700
Subject: [Twisted-Python] Errors after upgrading to 2.0.1
In-Reply-To: <20050731153123.3914.1677534921.divmod.quotient.765@ohm>
References: <1f060c4c0507302252592797d5@mail.gmail.com>
	<20050731153123.3914.1677534921.divmod.quotient.765@ohm>
Message-ID: <1f060c4c05073110222bd44bfb@mail.gmail.com>

Yep that was it.  Thanks.

Chris

On 7/31/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Sat, 30 Jul 2005 22:52:27 -0700, snacktime <snacktime at gmail.com> wrote:
> >I'm testing out an application I wrote in 1.3.  In 2.0.1 I get a
> >warning and an exception.
> >
> 
> The exception is caused by calling reactor.stop() twice.
> 
> Jp



From matt at pollenation.net  Fri Jul  1 03:56:08 2005
From: matt at pollenation.net (Matt Goodall)
Date: Fri, 01 Jul 2005 10:56:08 +0100
Subject: [Twisted-Python] Event queue in the Python std lib
Message-ID: <42C51338.2040905@pollenation.net>

Hi,

I know some of you guys have already thinking about this but ...

A couple of weeks ago we had a bit of a chat (flame? ;-)) in #twisted 
about the idea of moving parts of Twisted, specifically the event loop, 
into the std lib. So, at Europython I had a quick chat with GvR about it 
too.

GvR would really, really like to get a simple, flexible event loop into 
the std lib and thinks that Twisted is likely the best starting point 
since Twisted probably integrates with more event driven toolkits than 
anything else.

Obviously, having the event loop part in the std lib has a number of 
benefits but it should also put pressure on all event driven toolkits to 
conform to the common API. Everything would then work together and the 
world would be a happier, shinier place ;-).

GvR suggested that someone should start a PEP to talk around, which 
seems like a sensible thing to do, although I don't know if anyone with 
enough knowledge of the reactor and working with other event loops has 
time right now.

Cheers, Matt

-- 
      __
     /  \__     Matt Goodall, Pollenation Internet Ltd
     \__/  \    w: http://www.pollenation.net
   __/  \__/    e: matt at pollenation.net
  /  \__/  \    t: +44 (0)113 2252500
  \__/  \__/
  /  \          Any views expressed are my own and do not necessarily
  \__/          reflect the views of my employer.



From itamar at itamarst.org  Fri Jul  1 08:53:21 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Jul 2005 10:53:21 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C51338.2040905@pollenation.net>
References: <42C51338.2040905@pollenation.net>
Message-ID: <1120229601.8891.30.camel@localhost.localdomain>

On Fri, 2005-07-01 at 10:56 +0100, Matt Goodall wrote:

> Obviously, having the event loop part in the std lib has a number of 
> benefits but it should also put pressure on all event driven toolkits to 
> conform to the common API. Everything would then work together and the 
> world would be a happier, shinier place ;-).

Which event driven toolkits are you talking about, besides Twisted?

> GvR suggested that someone should start a PEP to talk around, which 
> seems like a sensible thing to do, although I don't know if anyone with 
> enough knowledge of the reactor and working with other event loops has 
> time right now.

On the whole I don't think now, if ever, is the time to add Twisted or a
Twisted-based event loop to the Python standard library. There are a
number of issues:

1. Release cycles: Python releases on its own schedule, which may not
match up to the needs of bug fixes or feature additions to Twisted.

One solution is a separate Twisted package you can install, overriding
the stdlib's. Since Twisted, even split up, is quite large, this would
probably be necessary for most non-trivial functionality anyway, which
leads to:

2. Installing separate package issues. As PyXML has shown, having a
separate package which overrides or extends a built-in stdlib API works
terribly.  http://www.amk.ca/conceit/xmlplus.html covers some of the
issues, but there's also - 

3. Limited usefulness of minimal APIs: lets say we add Twisted to the
stdlib. Because it's large, we don't want to add *everything*. We can't
add SSL probably cause that depends on pyOpenSSL which is LGPLed,
probably don't want the pygtk reactor because that occasionally needs
updates for new pygtk releases, etc.. So Jane User decides to build a
network application, plays a bit with the TCP client code, and now says
"OK great, now to add a GUI and TLS support" - and suddenly she needs to
install the full Twisted framework to do that.


I would argue that Python needs less in the stdlib, not more; specific
external software packages will probably grow into de-facto standard
packages, but there's no reason for them to be in stdlib. PyXML is
usually installed separately because people need the extended features
the full package has, and the same would happen to Twisted. The only
real benefit to inclusion in the stdlib is ease of distribution, and a
better way to deal with that is to put more work into things like Eggs
(http://peak.telecommunity.com/DevCenter/PythonEggs).

-- 
Itamar Shtull-Trauring <itamar at itamarst.org>
http://itamarst.org




From itamar at itamarst.org  Fri Jul  1 09:02:28 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Jul 2005 11:02:28 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C51338.2040905@pollenation.net>
References: <42C51338.2040905@pollenation.net>
Message-ID: <1120230148.8891.37.camel@localhost.localdomain>

One more argument:

Inclusion in the stdlib requires more stringent backwards compatibility
in APIs. Now, on the whole this is a good thing, but it can have serious
long term consequences. Asyncore is the perfect example; Twisted's event
loop API started out being no better than asyncore's, whereas now it is
far superior (can work much better with stateful OS APIs like epoll(),
can support asynchronous rather than just non-blocking, supports
scheduling, much better TCP client support, etc..) 

The reason is years and years of working on improving it, whereas
asyncore was basically stuck where it was because it had to be backwards
compatible, and because adding major changes into the stdlib is harder.
So, for example, a number of people independently added scheduling to
the asyncore API, but it never made it into the stdlib. asyncore is now
almost identical to the way it was 5 years ago.




From natester at gmail.com  Fri Jul  1 09:37:46 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Fri, 1 Jul 2005 09:37:46 -0600
Subject: [Twisted-Python] jabber sasl and TLS
Message-ID: <4adac7a305070108376455c124@mail.gmail.com>

What is the status of the sasl TLS jabber authenticator?  There is
this code from about a month ago:
http://bfs.itlab.musc.edu/pubcvs/viewcvs.cgi/tofu/saslclient.py#rev1.6,
but it does not include TLS.

Nate



From Henning.Ramm at mediapro-gmbh.de  Fri Jul  1 10:54:46 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Fri, 1 Jul 2005 18:54:46 +0200
Subject: [Twisted-Python] Event queue in the Python std lib
Message-ID: <F92274058556DE42B94B148EEFB9183949E755@exchange-03.suedkurier.de>

>I would argue that Python needs less in the stdlib, not more; specific
>external software packages will probably grow into de-facto standard
>packages, but there's no reason for them to be in stdlib.

I agree, there are some rather, ehm, suboptimal modules in the stdlib
(e.g. ConfigParser, logging), and if one needs a good solution for
something, (s)he would always install some addition (or code it
her|himself). So perhaps a better way to handle "standard modules"
would be a standard package manager (like ActivePerl's ppm).

Otherwise it would be nice to declare Twisted "Python standard" this way.
(But perhaps it would frighten off Python newbies who are only looking
for a simple network library...)

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From glyph at divmod.com  Fri Jul  1 12:24:35 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 01 Jul 2005 14:24:35 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <1120229601.8891.30.camel@localhost.localdomain>
References: <42C51338.2040905@pollenation.net>
	<1120229601.8891.30.camel@localhost.localdomain>
Message-ID: <42C58A63.6020308@divmod.com>

Itamar Shtull-Trauring wrote:
> On Fri, 2005-07-01 at 10:56 +0100, Matt Goodall wrote:

>>GvR suggested that someone should start a PEP to talk around, which 
>>seems like a sensible thing to do, although I don't know if anyone with 
>>enough knowledge of the reactor and working with other event loops has 
>>time right now.

Well, it's a subject that comes up periodically, and I have some new 
thoughts, so let me play devil's advocate here:

> On the whole I don't think now, if ever, is the time to add Twisted or a
> Twisted-based event loop to the Python standard library. There are a
> number of issues:
> 
> 1. Release cycles: Python releases on its own schedule, which may not
> match up to the needs of bug fixes or feature additions to Twisted.

This will always be a concern, but Python manages to get releases out 
every so often, and the stdlib *does* change sometimes.  We've been 
pretty good about preserving compatibility for a release or two 
ourselves.  I think it is a reasonable concern but not a reason to stop 
this entirely.

> One solution is a separate Twisted package you can install, overriding
> the stdlib's. Since Twisted, even split up, is quite large, this would
> probably be necessary for most non-trivial functionality anyway, which
> leads to:

IMHO the point here is the trivial functionality.  As far as I can tell 
from the few examples of event-driven applications that I use which I 
didn't write :-), there is a progression that many event-driven Python 
programs go through these days:

	- Implement something with asyncore
	- realize asyncore's deficiencies, start enhancing it
	- discover Twisted, re-implement networking code (from scratch)

If the event loop in Python provided similar interfaces to the one in 
Twisted, the amount of work involved in stage 3 could be greatly reduced.

> 2. Installing separate package issues. As PyXML has shown, having a
> separate package which overrides or extends a built-in stdlib API works
> terribly.  http://www.amk.ca/conceit/xmlplus.html covers some of the
> issues, but there's also - 

So let's not pretend that they're the same thing.  'from eventloop 
import listenTCP' -> 'from twisted.internet import reactor'.  They can 
just share a set of common interfaces.  The big problem with xmlplus was 
that it changed the behavior of a built-in package, so let's not ever do 
that again.   amk's article specifically recommends this solution.

> 3. Limited usefulness of minimal APIs: lets say we add Twisted to the
> stdlib. Because it's large, we don't want to add *everything*. We can't
> add SSL probably cause that depends on pyOpenSSL which is LGPLed,
> probably don't want the pygtk reactor because that occasionally needs
> updates for new pygtk releases, etc.. So Jane User decides to build a
> network application, plays a bit with the TCP client code, and now says
> "OK great, now to add a GUI and TLS support" - and suddenly she needs to
> install the full Twisted framework to do that.

Right.  But, her code uses Twisted-like interfaces so she doesn't have 
to re-write it all.  Given that a lot of network applications are 
trivial one-offs, this step will not always happen.

> I would argue that Python needs less in the stdlib, not more; specific
> external software packages will probably grow into de-facto standard
> packages, but there's no reason for them to be in stdlib. PyXML is
> usually installed separately because people need the extended features
> the full package has, and the same would happen to Twisted. The only
> real benefit to inclusion in the stdlib is ease of distribution, and a
> better way to deal with that is to put more work into things like Eggs
> (http://peak.telecommunity.com/DevCenter/PythonEggs).

I don't think the issue is "less" or "more" but "better".  The Python 
standard library is of a highly non-uniform quality.  Whether or not 
Twisted gets added, I think asyncore should be removed, or at least 
strongly deprecated.



From bob at redivi.com  Fri Jul  1 12:50:24 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 1 Jul 2005 08:50:24 -1000
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C58A63.6020308@divmod.com>
References: <42C51338.2040905@pollenation.net>
	<1120229601.8891.30.camel@localhost.localdomain>
	<42C58A63.6020308@divmod.com>
Message-ID: <C88813C7-F1C1-4458-AC73-FE52A3DB97C1@redivi.com>


On Jul 1, 2005, at 8:24 AM, Glyph Lefkowitz wrote:

> Itamar Shtull-Trauring wrote:
>
>> On Fri, 2005-07-01 at 10:56 +0100, Matt Goodall wrote:
>>
>
>
>> One solution is a separate Twisted package you can install,  
>> overriding
>> the stdlib's. Since Twisted, even split up, is quite large, this  
>> would
>> probably be necessary for most non-trivial functionality anyway,  
>> which
>> leads to:
>>
>
> IMHO the point here is the trivial functionality.  As far as I can  
> tell from the few examples of event-driven applications that I use  
> which I didn't write :-), there is a progression that many event- 
> driven Python programs go through these days:
>
>     - Implement something with asyncore
>     - realize asyncore's deficiencies, start enhancing it
>     - discover Twisted, re-implement networking code (from scratch)
>
> If the event loop in Python provided similar interfaces to the one  
> in Twisted, the amount of work involved in stage 3 could be greatly  
> reduced.

A fringe benefit of having something reactor-like in the Python  
stdlib is that it gives Twisted more credibility (amongst those that  
don't already know that we're right).

>> 3. Limited usefulness of minimal APIs: lets say we add Twisted to the
>> stdlib. Because it's large, we don't want to add *everything*. We  
>> can't
>> add SSL probably cause that depends on pyOpenSSL which is LGPLed,
>> probably don't want the pygtk reactor because that occasionally needs
>> updates for new pygtk releases, etc.. So Jane User decides to build a
>> network application, plays a bit with the TCP client code, and now  
>> says
>> "OK great, now to add a GUI and TLS support" - and suddenly she  
>> needs to
>> install the full Twisted framework to do that.
>>
>
> Right.  But, her code uses Twisted-like interfaces so she doesn't  
> have to re-write it all.  Given that a lot of network applications  
> are trivial one-offs, this step will not always happen.

If something like threadedselectreactor made it into stdlib, then GUI  
integration (and integration with otherwise blocking code) would be  
easy enough.

Personally, since this is the 2.5+ timeframe we're talking about  
here, I would rather see something PEP-342 based on the outside, as  
that would require less brain enhancement for most people to use  
properly.

Deferreds are just as important as anything else.. I mean hell, I  
have implemented the Deferred API (with cancellation) in both  
JavaScript and ActionScript 2.0 for various purposes because it's the  
Right Way to represent that sort of thing given the language  
constraints.

(the JavaScript stuff, which should make a lot of Pythonistas very  
happy, will probably make it into open source in 2 weeks or so.. the  
AS2 stuff I have no immediate plans of releasing).

-bob




From foom at fuhm.net  Fri Jul  1 12:55:53 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 1 Jul 2005 14:55:53 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C51338.2040905@pollenation.net>
References: <42C51338.2040905@pollenation.net>
Message-ID: <1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>

On Jul 1, 2005, at 5:56 AM, Matt Goodall wrote:
> Hi,
>
> I know some of you guys have already thinking about this but ...
>
> A couple of weeks ago we had a bit of a chat (flame? ;-)) in  
> #twisted about the idea of moving parts of Twisted, specifically  
> the event loop, into the std lib. So, at Europython I had a quick  
> chat with GvR about it too.
>
> GvR would really, really like to get a simple, flexible event loop  
> into the std lib and thinks that Twisted is likely the best  
> starting point since Twisted probably integrates with more event  
> driven toolkits than anything else.
>
> Obviously, having the event loop part in the std lib has a number  
> of benefits but it should also put pressure on all event driven  
> toolkits to conform to the common API. Everything would then work  
> together and the world would be a happier, shinier place ;-).
>
> GvR suggested that someone should start a PEP to talk around, which  
> seems like a sensible thing to do, although I don't know if anyone  
> with enough knowledge of the reactor and working with other event  
> loops has time right now.

I think adding a subset of Twisted to the python stdlib would be a  
disservice to both the stdlib users and Twisted users, especially now  
that Python is on the cusp of having an easy way to distribute, find,  
and install 3rd party packages automatically. Saying that Twisted  
should be a "starting point" bothers me especially, as that seems to  
indicate that the two will diverge over time. That is worrisome. Who  
is going to maintain the stdlib fork?

I would suggest instead that python should distribute a selected set  
of "recommended extras" as part of the installer, which would  
basically be complete 3rd party packages, included just for  
convenience. Twisted core would make a good package to include there,  
as would many others.

James



From itamar at itamarst.org  Fri Jul  1 12:58:31 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 01 Jul 2005 14:58:31 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C58A63.6020308@divmod.com>
References: <42C51338.2040905@pollenation.net>
	<1120229601.8891.30.camel@localhost.localdomain>
	<42C58A63.6020308@divmod.com>
Message-ID: <1120244311.8891.63.camel@localhost.localdomain>

On Fri, 2005-07-01 at 14:24 -0400, Glyph Lefkowitz wrote:

> 	- Implement something with asyncore
> 	- realize asyncore's deficiencies, start enhancing it
> 	- discover Twisted, re-implement networking code (from scratch)
> 
> If the event loop in Python provided similar interfaces to the one in 
> Twisted, the amount of work involved in stage 3 could be greatly reduced.

Alternatively, asyncore could just be deprecated, which would be a lot
easier to do, and people would start from the correct solution :)

> > 2. Installing separate package issues. As PyXML has shown, having a
> > separate package which overrides or extends a built-in stdlib API works
> > terribly.  http://www.amk.ca/conceit/xmlplus.html covers some of the
> > issues, but there's also - 
> 
> So let's not pretend that they're the same thing.  'from eventloop 
> import listenTCP' -> 'from twisted.internet import reactor'.  They can 
> just share a set of common interfaces.  The big problem with xmlplus was 
> that it changed the behavior of a built-in package, so let's not ever do 
> that again.   amk's article specifically recommends this solution.

Hm. That's a lot better than moving parts of Twisted, yes. I still think
it's silly.

> I don't think the issue is "less" or "more" but "better".  The Python 
> standard library is of a highly non-uniform quality.  Whether or not 
> Twisted gets added, I think asyncore should be removed, or at least 
> strongly deprecated.

Adding yet another event loop would just continue the tradition, I'm
sure; it took us quite a while to get to the quality we have now just in
terms of platform support. I suppose you could butcher our code by
ripping features out... but you'd just get a crippled piece of software.
The motivation is "so then people can move to something less suck"? Why
not just have them start from something good to begin with?




From twisted at ralphm.ik.nu  Fri Jul  1 13:21:51 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Fri, 1 Jul 2005 21:21:51 +0200
Subject: [Twisted-Python] jabber sasl and TLS
In-Reply-To: <4adac7a305070108376455c124@mail.gmail.com>
References: <4adac7a305070108376455c124@mail.gmail.com>
Message-ID: <20050701192151.GA56738@ik.nu>

On Fri, Jul 01, 2005 at 09:37:46AM -0600, Nathaniel Haggard wrote:
> What is the status of the sasl TLS jabber authenticator?  There is
> this code from about a month ago:
> http://bfs.itlab.musc.edu/pubcvs/viewcvs.cgi/tofu/saslclient.py#rev1.6,
> but it does not include TLS.

Yes, tofu has submitted this code, and I, the maintainer of the Jabber
pieces in Twisted, am looking at integrating this. However, to do this
right, there are some fundamental changes necessary in Xish and the
Jabber module. I'm working on this, and will update the bug with
progress.

If you have any more questions, do ask in this list.

-- 
Groetjes,

ralphm



From natester at gmail.com  Fri Jul  1 13:35:39 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Fri, 1 Jul 2005 13:35:39 -0600
Subject: [Twisted-Python] jabber sasl and TLS
In-Reply-To: <20050701192151.GA56738@ik.nu>
References: <4adac7a305070108376455c124@mail.gmail.com>
	<20050701192151.GA56738@ik.nu>
Message-ID: <4adac7a3050701123513f2a10d@mail.gmail.com>

Where is the code now and can I help you by using it?

Nate

On 7/1/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> On Fri, Jul 01, 2005 at 09:37:46AM -0600, Nathaniel Haggard wrote:
> > What is the status of the sasl TLS jabber authenticator?  There is
> > this code from about a month ago:
> > http://bfs.itlab.musc.edu/pubcvs/viewcvs.cgi/tofu/saslclient.py#rev1.6,
> > but it does not include TLS.
> 
> Yes, tofu has submitted this code, and I, the maintainer of the Jabber
> pieces in Twisted, am looking at integrating this. However, to do this
> right, there are some fundamental changes necessary in Xish and the
> Jabber module. I'm working on this, and will update the bug with
> progress.
> 
> If you have any more questions, do ask in this list.
> 
> --
> Groetjes,
> 
> ralphm
>



From solipsis at pitrou.net  Fri Jul  1 13:39:36 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 01 Jul 2005 21:39:36 +0200
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C58A63.6020308@divmod.com>
References: <42C51338.2040905@pollenation.net>
	<1120229601.8891.30.camel@localhost.localdomain>
	<42C58A63.6020308@divmod.com>
Message-ID: <1120246776.9439.62.camel@fsol>


Hi,

> IMHO the point here is the trivial functionality.  As far as I can tell 
> from the few examples of event-driven applications that I use which I 
> didn't write :-), there is a progression that many event-driven Python 
> programs go through these days:
> 
> 	- Implement something with asyncore
> 	- realize asyncore's deficiencies, start enhancing it
> 	- discover Twisted, re-implement networking code (from scratch)
> 
> If the event loop in Python provided similar interfaces to the one in 
> Twisted, the amount of work involved in stage 3 could be greatly reduced.

As a humble lurker on this list, I just wanna say that this argument
rings a bell. I had to rewrite a P2P program which had chosen to
implement its own event loop instead of using Twisted... ;)

It would be nice if more people knew about Twisted.

Regards

Antoine.





From golux at comcast.net  Fri Jul  1 14:01:53 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 01 Jul 2005 16:01:53 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
References: <42C51338.2040905@pollenation.net>
	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
Message-ID: <42C5A131.708@comcast.net>

James Y Knight wrote:
> I would suggest instead that python should distribute a selected set  of 
> "recommended extras" as part of the installer, which would  basically be 
> complete 3rd party packages, included just for  convenience. Twisted 
> core would make a good package to include there,  as would many others.

I agree with James's position:  Twisted should be one of a number
of Python "recommended extras" (I also agree with Glyph and Itamar
that asyncore should be deprecated).

IMO, that approach accomplishes everything that could be hoped
for by incorporating a reactor-like event loop in the std library:
(1) makes Twisted more visible to anyone looking for a "simple,
flexible event loop", and (equally important) add the context of
the deferred api and some well-tested goodies with asynchronous
api's (like adbapi) and (2) does not create any gratuitous wrinkles
(like a potential stdlib fork) for the current well-oiled Twisted
development machine's minions to have to deal with.  ;)

Bob's point about "credibility" is well-taken, but I think having
Twisted designated as an official Python "recommended extra"
would accomplish that as well.

Cheers,
Steve



From bob at redivi.com  Fri Jul  1 14:26:20 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 1 Jul 2005 10:26:20 -1000
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <1120246776.9439.62.camel@fsol>
References: <42C51338.2040905@pollenation.net>
	<1120229601.8891.30.camel@localhost.localdomain>
	<42C58A63.6020308@divmod.com> <1120246776.9439.62.camel@fsol>
Message-ID: <A33760FE-AB9A-40B5-85DE-1AF2071B0980@redivi.com>


On Jul 1, 2005, at 9:39 AM, Antoine Pitrou wrote:

>> IMHO the point here is the trivial functionality.  As far as I can  
>> tell
>> from the few examples of event-driven applications that I use which I
>> didn't write :-), there is a progression that many event-driven  
>> Python
>> programs go through these days:
>>
>>     - Implement something with asyncore
>>     - realize asyncore's deficiencies, start enhancing it
>>     - discover Twisted, re-implement networking code (from scratch)
>>
>> If the event loop in Python provided similar interfaces to the one in
>> Twisted, the amount of work involved in stage 3 could be greatly  
>> reduced.
>>
>
> As a humble lurker on this list, I just wanna say that this argument
> rings a bell. I had to rewrite a P2P program which had chosen to
> implement its own event loop instead of using Twisted... ;)

I did this once too, s/P2P program/XML Socket Server/

It turned out that doing one in Twisted was so easy, that I never  
bothered to package another one again.  Everything else I had in  
there was more or less YAGNI because Twisted already did it, or made  
implementing the features so trivial as it wasn't worth including  
it.  These days I just whip up app-specific LineReceivers with a '\0'  
delimiter that parse/generate with ElementTree.. takes like 5 minutes.

-bob




From bob at redivi.com  Fri Jul  1 14:28:10 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 1 Jul 2005 10:28:10 -1000
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C5A131.708@comcast.net>
References: <42C51338.2040905@pollenation.net>
	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
	<42C5A131.708@comcast.net>
Message-ID: <A89582D5-B8B8-475C-BC84-3712AAF7DCB4@redivi.com>


On Jul 1, 2005, at 10:01 AM, Stephen Waterbury wrote:

> James Y Knight wrote:
>
>> I would suggest instead that python should distribute a selected  
>> set  of "recommended extras" as part of the installer, which  
>> would  basically be complete 3rd party packages, included just  
>> for  convenience. Twisted core would make a good package to  
>> include there,  as would many others.
>>
>
> I agree with James's position:  Twisted should be one of a number
> of Python "recommended extras" (I also agree with Glyph and Itamar
> that asyncore should be deprecated).
>
> IMO, that approach accomplishes everything that could be hoped
> for by incorporating a reactor-like event loop in the std library:
> (1) makes Twisted more visible to anyone looking for a "simple,
> flexible event loop", and (equally important) add the context of
> the deferred api and some well-tested goodies with asynchronous
> api's (like adbapi) and (2) does not create any gratuitous wrinkles
> (like a potential stdlib fork) for the current well-oiled Twisted
> development machine's minions to have to deal with.  ;)
>
> Bob's point about "credibility" is well-taken, but I think having
> Twisted designated as an official Python "recommended extra"
> would accomplish that as well.

I just wanted to point out that I agree with James' position too, but  
was speaking towards the "what if ideas from Twisted were to be  
included", rather than "what should actually happen".

Python's standard library should dissolve into just the bits required  
to support simple scripts and EasyInstall/eggs.

-bob




From golux at comcast.net  Fri Jul  1 15:12:56 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 01 Jul 2005 17:12:56 -0400
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <A89582D5-B8B8-475C-BC84-3712AAF7DCB4@redivi.com>
References: <42C51338.2040905@pollenation.net>	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>	<42C5A131.708@comcast.net>
	<A89582D5-B8B8-475C-BC84-3712AAF7DCB4@redivi.com>
Message-ID: <42C5B1D8.6060106@comcast.net>

Bob Ippolito wrote:
> I just wanted to point out that I agree with James' position too, but  
> was speaking towards the "what if ideas from Twisted were to be  
> included", rather than "what should actually happen".
> 
> Python's standard library should dissolve into just the bits required  
> to support simple scripts and EasyInstall/eggs.

Rat on!  And the library docs will hopefully evolve into a
nice distributed documentation system, too ... :)

Steve



From natester at gmail.com  Fri Jul  1 17:40:42 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Fri, 1 Jul 2005 17:40:42 -0600
Subject: [Twisted-Python] jabber sasl and TLS
In-Reply-To: <4adac7a3050701123513f2a10d@mail.gmail.com>
References: <4adac7a305070108376455c124@mail.gmail.com>
	<20050701192151.GA56738@ik.nu>
	<4adac7a3050701123513f2a10d@mail.gmail.com>
Message-ID: <4adac7a3050701164046710cb@mail.gmail.com>

Ok I patched the latest twisted with those patches from the bug, and
this is the code that I use to try to login.

from twisted.words.protocols import jabber
from twisted.xish import xmlstream
from twisted.words.protocols.jabber import client, jid
from twisted.internet import reactor, defer

class Connection:
    def __init__(self, who, myjid):
        self.jid = jid.JID(myjid)
        self.who = who

    def connect(self, passwd, port=5223):
        self.factory = client.jabberClientFactory(self.jid, passwd)
        
        self.factory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT,self.onAuthSuccess)
        self.factory.addBootstrap(client.XMPPAuthenticator.AUTH_FAILED_EVENT,self.onAuthFailed)
        
        self.connector = reactor.connectTCP(self.jid.host, port, self.factory)
    
    def onAuthSuccess(self, stream):
        print "%s: Successful connection" % (self.who)
        self.stream = stream

    def onAuthFailed(self, stream):
        print "%s: Failed connection" % (self.who)
        self.factory.stopTrying()
        self.connector.disconnect()

c1 = Connection('1', 'test at domain.com/res1')
c1.connect('pass')

reactor.run()

jabberd 2.0s8 (on linux with openssl 0.9.7d) complains with this error:

C2S : Fri Jul  1 17:20:55 2005 [notice] [6] [10.1.2.111, port=49443]
error: SSL handshake error (error:140760FC:SSL
routines:SSL23_GET_CLIENT_HELLO:unknown protocol)
C2S : sx (sx.c:55) allocated new sx for 6
C2S : Fri Jul  1 17:21:47 2005 [notice] [7] [10.1.2.111, port=49444] connect

The server is setup to do TLS auth only on port 5223. 

Nate

On 7/1/05, Nathaniel Haggard <natester at gmail.com> wrote:
> Where is the code now and can I help you by using it?
> 
> Nate
> 
> On 7/1/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> > On Fri, Jul 01, 2005 at 09:37:46AM -0600, Nathaniel Haggard wrote:
> > > What is the status of the sasl TLS jabber authenticator?  There is
> > > this code from about a month ago:
> > > http://bfs.itlab.musc.edu/pubcvs/viewcvs.cgi/tofu/saslclient.py#rev1.6,
> > > but it does not include TLS.
> >
> > Yes, tofu has submitted this code, and I, the maintainer of the Jabber
> > pieces in Twisted, am looking at integrating this. However, to do this
> > right, there are some fundamental changes necessary in Xish and the
> > Jabber module. I'm working on this, and will update the bug with
> > progress.
> >
> > If you have any more questions, do ask in this list.
> >
> > --
> > Groetjes,
> >
> > ralphm
> >
>



From dvkeeney at gmail.com  Fri Jul  1 19:54:26 2005
From: dvkeeney at gmail.com (David)
Date: Fri, 1 Jul 2005 20:54:26 -0500
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <42C5B1D8.6060106@comcast.net>
References: <42C51338.2040905@pollenation.net>
	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
	<42C5A131.708@comcast.net>
	<A89582D5-B8B8-475C-BC84-3712AAF7DCB4@redivi.com>
	<42C5B1D8.6060106@comcast.net>
Message-ID: <6e04113a050701185426225d0e@mail.gmail.com>

I am not yet a twisted programmer, so my contribution to this thread
has more to do with English interpretation than with twisted.

A principle problem with event mainloops is that each toolkit wants to
provide one, and the program can only have one running at a time
(barring multithreading fanciness).  When I read the original post
referring to the discussion with GvR, I thought, cool, a resolution to
the different-mainloops-for-different-tool kits problem: a mainloop
that can integrate various tool kits.

It seems that all other respondents have interpreted it as a call to
include twisted, or parts of it _as is_, in the stdlib.  I did not see
in the original post a call for twisted _networking_ inclusion at all.

When I read about twisted on other lists (the pygame list comes to
mind), the examples almost always use the poll() reactor method,
because it allows you to use twisted from your own mainloop; you can
then integrate other tool kits into that home-spun mainloop by
whatever provisions they allow for doing so.

We shouldn't have to be that creative.  There should be one std dist
mainloop that can accommodate, via callbacks perhaps, whatever
(multiple) services need a mainloop.   So a tkinter-twisted mainloop
and a gtk-twisted mainloop would not be needed as separate components.

I am too naive to write such a library, nor even to write a PEP, so I
won't be running with this, but is there something impossible about my
interpretation?

David



From andrea at cpushare.com  Fri Jul  1 20:20:44 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat, 2 Jul 2005 04:20:44 +0200
Subject: [Twisted-Python] how to tap a DelayedCall?
Message-ID: <20050702022044.GJ9987@g5.random>

Hello,

I'm still using my setup where I use mktap for the production system so
I tweak it with mktap -u/-g/Options() parameters
(twisted.python.usage.Options) and the tac -noy model for development
with default Option values, but I'm now having a problem with a delayed
call in the tap mode.

Somewhere inside the makeService hook I execute a reactor.callLater, and
that gives the following error:

WARNING: unserializing ephemeral twisted.internet.base.DelayedCall

(and of course it hangs too since that new callLater is now fundamental ;)

Now I think I can trivially move the callLater into the startFactory()
hook, and then it should work even with the tap file, but I wondered if
there was a more transparent way to make callLater work with tap files
like it does with the tac ones just fine.

I'm considering going away from the tap model, but first I'd like to see
the equivalent of mktap -u/-g and the other Option() parameters
available through tac files too (which isn't possible yet AFIK, twistd
doesn't take those params, and I don't want to reinvent locally yet
another getopt/Options mechanism, the Options configurable via mktap
were all I needed, except I don't need serialization just to pass
options, I only need the mktap option passing). Hints welcome.

Thanks and keep up the great work!



From bob at redivi.com  Fri Jul  1 21:23:45 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 1 Jul 2005 17:23:45 -1000
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <6e04113a050701185426225d0e@mail.gmail.com>
References: <42C51338.2040905@pollenation.net>
	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
	<42C5A131.708@comcast.net>
	<A89582D5-B8B8-475C-BC84-3712AAF7DCB4@redivi.com>
	<42C5B1D8.6060106@comcast.net>
	<6e04113a050701185426225d0e@mail.gmail.com>
Message-ID: <CF4FB2B0-C703-4E23-AC89-14C26E420CD8@redivi.com>


On Jul 1, 2005, at 3:54 PM, David wrote:

> I am not yet a twisted programmer, so my contribution to this thread
> has more to do with English interpretation than with twisted.
>
> A principle problem with event mainloops is that each toolkit wants to
> provide one, and the program can only have one running at a time
> (barring multithreading fanciness).  When I read the original post
> referring to the discussion with GvR, I thought, cool, a resolution to
> the different-mainloops-for-different-tool kits problem: a mainloop
> that can integrate various tool kits.
>
> It seems that all other respondents have interpreted it as a call to
> include twisted, or parts of it _as is_, in the stdlib.  I did not see
> in the original post a call for twisted _networking_ inclusion at all.
>
> When I read about twisted on other lists (the pygame list comes to
> mind), the examples almost always use the poll() reactor method,
> because it allows you to use twisted from your own mainloop; you can
> then integrate other tool kits into that home-spun mainloop by
> whatever provisions they allow for doing so.
>
> We shouldn't have to be that creative.  There should be one std dist
> mainloop that can accommodate, via callbacks perhaps, whatever
> (multiple) services need a mainloop.   So a tkinter-twisted mainloop
> and a gtk-twisted mainloop would not be needed as separate components.
>
> I am too naive to write such a library, nor even to write a PEP, so I
> won't be running with this, but is there something impossible about my
> interpretation?

That's a nice idea, but it can't possibly work.  If you want a  
general way to interoperate with different toolkits, you basically  
have to use multithreaded fanciness, because not many of them have  
timers or socket notifiers built in worth their salt.  Starting a  
single thread to sit around and wait for select() or equivalent is  
pretty sane, and makes the interface a lot more flexible and generic  
since you only need one facility in the toolkit -- namely a thread- 
safe way to call back into the main thread.

Fortunately, there is one in Twisted 2.1, threadedselectreactor,  
which DOES integrate with various runloops (pygame and wxPython  
included) without polling.  However, it's not the end of the road.   
threadedselectreactor should be refactored into a general interface  
(interleave) such that other backends (epoll, kqueue, windows junk,  
etc.) can be used rather than select.

-bob




From anthony at interlink.com.au  Fri Jul  1 23:12:59 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Sat, 2 Jul 2005 15:12:59 +1000
Subject: [Twisted-Python] Event queue in the Python std lib
In-Reply-To: <1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
References: <42C51338.2040905@pollenation.net>
	<1525256A-681F-43B8-A0A6-A78390ED8C4B@fuhm.net>
Message-ID: <200507021513.01756.anthony@interlink.com.au>

On Saturday 02 July 2005 04:55, James Y Knight wrote:
> I would suggest instead that python should distribute a selected set
> of "recommended extras" as part of the installer, which would
> basically be complete 3rd party packages, included just for
> convenience. Twisted core would make a good package to include there,
> as would many others.

I don't think this should be bundled into the base installer. 

a: The installer's already up around 10M - adding Twisted 
makes it that much larger
b: Shipping it as part of the Official Installer suggests
that Twisted will follow then standard Python release 
process, which means you have to worry about deprecations
and the like
c: There will be confusion for users with bugs - do they
submit an entry to the python bug tracker?

But I _would_ like to see asyncore more aggressively deprecated...

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From christopher.zorn at gmail.com  Sat Jul  2 06:53:57 2005
From: christopher.zorn at gmail.com (Christopher Zorn)
Date: Sat, 2 Jul 2005 08:53:57 -0400
Subject: [Twisted-Python] jabber sasl and TLS
In-Reply-To: <4adac7a3050701123513f2a10d@mail.gmail.com>
References: <4adac7a305070108376455c124@mail.gmail.com>
	<20050701192151.GA56738@ik.nu>
	<4adac7a3050701123513f2a10d@mail.gmail.com>
Message-ID: <149014b905070205534fc2fe5d@mail.gmail.com>

On 7/1/05, Nathaniel Haggard <natester at gmail.com> wrote:
> Where is the code now and can I help you by using it?
> 

http://twistedmatrix.com/bugs/issue1046

There is the issue/bug on the twisted tracker. It has patches
attached, but as ralph said, in order to do this right there needs to
be changes in xish. But for now those patches on the issue have TLS
support.


> Nate
> 
> On 7/1/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> > On Fri, Jul 01, 2005 at 09:37:46AM -0600, Nathaniel Haggard wrote:
> > > What is the status of the sasl TLS jabber authenticator?  There is
> > > this code from about a month ago:
> > > http://bfs.itlab.musc.edu/pubcvs/viewcvs.cgi/tofu/saslclient.py#rev1.6,
> > > but it does not include TLS.
> >
> > Yes, tofu has submitted this code, and I, the maintainer of the Jabber
> > pieces in Twisted, am looking at integrating this. However, to do this
> > right, there are some fundamental changes necessary in Xish and the
> > Jabber module. I'm working on this, and will update the bug with
> > progress.
> >
> > If you have any more questions, do ask in this list.
> >
> > --
> > Groetjes,
> >
> > ralphm
> >
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From andrea at cpushare.com  Sat Jul  2 11:34:42 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat, 2 Jul 2005 19:34:42 +0200
Subject: [Twisted-Python] how to tap a DelayedCall?
In-Reply-To: <20050702022044.GJ9987@g5.random>
References: <20050702022044.GJ9987@g5.random>
Message-ID: <20050702173442.GM9987@g5.random>

On Sat, Jul 02, 2005 at 04:20:44AM +0200, Andrea Arcangeli wrote:
> Now I think I can trivially move the callLater into the startFactory()
> hook, and then it should work even with the tap file, but I wondered if

Well, sounds like there was nothing as easy as to move it in
startFactory, I now arm the timer in startFactory and I cancel it in
stopFactory and it works fine as expected and I can still use the mktap
trick to pass the params and -u/-g dynamically on the command line ;)



From foom at fuhm.net  Sat Jul  2 12:40:21 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 2 Jul 2005 14:40:21 -0400
Subject: [Twisted-Python] how to tap a DelayedCall?
In-Reply-To: <20050702173442.GM9987@g5.random>
References: <20050702022044.GJ9987@g5.random> <20050702173442.GM9987@g5.random>
Message-ID: <68BDEC68-EC59-4EB5-891E-927A1B2F77E9@fuhm.net>


On Jul 2, 2005, at 1:34 PM, Andrea Arcangeli wrote:

> On Sat, Jul 02, 2005 at 04:20:44AM +0200, Andrea Arcangeli wrote:
>
>> Now I think I can trivially move the callLater into the  
>> startFactory()
>> hook, and then it should work even with the tap file, but I  
>> wondered if
>>
>
> Well, sounds like there was nothing as easy as to move it in
> startFactory, I now arm the timer in startFactory and I cancel it in
> stopFactory and it works fine as expected and I can still use the  
> mktap
> trick to pass the params and -u/-g dynamically on the command line ;)

FYI, the -u and -g arguments were added to twistd for 2.0,

James



From ww at groovy.net  Sat Jul  2 13:37:24 2005
From: ww at groovy.net (William Waites)
Date: Sat, 2 Jul 2005 15:37:24 -0400
Subject: [Twisted-Python] Fast RPC
Message-ID: <20050702193724.GB27071@groovy.net>

It looks like this has come up once or twice on the list under the
guyse of "how do I make synchronous calls to PB from another
application" with no clear answer. It seems to be hard to do
because of the design of PB. Use XMLRPC is the usual response.

Here's the situation. I have an embedded python interpreter
running inside of Yate. Because of the way Yate deals with
threads and signals, it seems to be hard to get a twisted
reactor to run inside the embedded interpreter. I also have a 
twisted process that wraps an API around a database and
exposes it over XMLRPC and PB. The embedded interpreter needs
to get at various bits of data by making RPC calls to this API.

Using XMLRPC works. But it is very slow. Especially since
xmlrpclib wants to make a new TCP connection for each call.

Using a test PB client, PB calls are much faster, since
there is a persistant TCP connection and simpler encoding.

I have toyed with the idea of using Sun RPC or something
similar to have the embedded interpreter talk to a local
twisted process that then would talk over the network, and
perhaps this is not a bad option.

Any suggestions for a way to make RPC calls over the network
with the speed of the PB and the synchronicity of XMLRPC?

Cheers,
-w



From bob at redivi.com  Sat Jul  2 14:27:28 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 2 Jul 2005 10:27:28 -1000
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <20050702193724.GB27071@groovy.net>
References: <20050702193724.GB27071@groovy.net>
Message-ID: <C764BA21-F36E-4117-8FA7-23537B071F77@redivi.com>


On Jul 2, 2005, at 9:37 AM, William Waites wrote:

> It looks like this has come up once or twice on the list under the
> guyse of "how do I make synchronous calls to PB from another
> application" with no clear answer. It seems to be hard to do
> because of the design of PB. Use XMLRPC is the usual response.
>
> Here's the situation. I have an embedded python interpreter
> running inside of Yate. Because of the way Yate deals with
> threads and signals, it seems to be hard to get a twisted
> reactor to run inside the embedded interpreter. I also have a
> twisted process that wraps an API around a database and
> exposes it over XMLRPC and PB. The embedded interpreter needs
> to get at various bits of data by making RPC calls to this API.

threadedselectreactor (in svn, will be in 2.1) runs the blocking part  
of the reactor in a separate thread, so you could do blocking PB- 
based RPC with that..

I just checked in an example of how you might be able to use it:
Twisted/trunk/doc/core/examples/threadedselect/blockingdemo.py

Not really tested or thought out very well, but it should work.

-bob




From itamar at itamarst.org  Sat Jul  2 22:49:20 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 03 Jul 2005 00:49:20 -0400
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <20050702193724.GB27071@groovy.net>
References: <20050702193724.GB27071@groovy.net>
Message-ID: <1120366160.7846.10.camel@localhost.localdomain>

On Sat, 2005-07-02 at 15:37 -0400, William Waites wrote:

> Because of the way Yate deals with
> threads and signals, it seems to be hard to get a twisted
> reactor to run inside the embedded interpreter.

reactor.run(installSignalHandlers=False) may fix that.




From jritter at bektel.com  Sun Jul  3 02:56:42 2005
From: jritter at bektel.com (Josh Ritter)
Date: Sun, 3 Jul 2005 03:56:42 -0500
Subject: [Twisted-Python] Minions of Mirth - Independent Persistent World
	RPG using Twisted
Message-ID: <006d01c57fad$227219e0$0400000a@spooge>

Hello all...

I thought this might be of interest to a few people... I know there are some 
game developers on this list... and we have a pretty good example of Twisted 
being used in a game :)

We just opened up the alpha on our RPG that uses Twisted for the bulk of 
it's "RPG Networking"... Twisted has been absolutely great to work with... 
it's used in our Master Server, World Server, Zone Servers, and Client... We 
also have an autopatching system it will be used in, though for now that 
uses *gulp* urllib :|

The alpha can be downloaded on both the Windows and OSX platforms.... some 
further information is below....

Oh, and here's an embedded web server in the world server running Nevow, 
hooray for Nevow! http://www.prairiegames.com/phpBB2/viewtopic.php?t=116

Vibes and THANKS!!!,
-Josh Ritter
Prairie Games
http://www.prairiegames.com

-----------------------------------------------------------

Minions of Mirth(tm) - "Truly Open Alpha"

Minions of Mirth(tm) is a massively single player, multiplayer, 3d MUD, 
Persistent World RPG, by Prairie Games.
We are currently in alpha testing on OSX and Windows and are extending an 
invitation to be a part of the game's creation.

You can DOWNLOAD the alpha test simply by registering on our forums: 
http://www.prairiegames.com/phpBB2/profile.php?mode=register

Once you've registered, the download information can be obtained in this 
thread: http://www.prairiegames.com/phpBB2/viewtopic.php?t=93

The Minions of Mirth "Truly Open Alpha" is a work in progress that features:

+ Windows and OSX support!

+ Easy access, only a forum registration is necessary to get in on the fun! 
http://www.prairiegames.com/phpBB2/profile.php?mode=register

+ Massively Single Player Gameplay(tm)!!!

+ Cooperative and Player vs Player Multiplayer

+ No monthly service fees for Multiplayer!

+ Autopatcher delivers immediate content and feature upgrades!!!

+ Host your own persistent worlds with your own original content!

+ Immortal access to your own world where you can control time, weather, 
spawns, items, etc

+ 10 playable races with distinct look, feel, and SIZE!!! Huge Drakken and 
tiny little Halflings!!!

+ 9 beautiful zones with huge playable area and vistas!  Dark dungeons and 
sprawling wilderness!

+ 2 hours of original music!

+ Masterfully animated 3d monster models with stunningly realistic textures

+ Spine-chilling sound effects!

+ Day/Night cycles with gameplay tied to time of day

+ Immersive weather effects based on zone climate

+ Multiclass your characters all the way to level 100 in up to 3 classes!

+ Material based clothing system

+ Over 50 3d weapon models

+ 100's of in game items with high resolution graphics and magical effects!

+ Political Factions

+ Quest Journal

+ Online Help

+ Vendors sell items and restock at regular intervals

+ Trade items and currency with other players!

+ 3d Automap

+ Versatile Spell System (invisibility, wind walking, Teleportation, 
Healing, Nukes, DoTs, etc)

+ Summon pets, equip them, and order them to destroy your foes!

+ Powerful Skills (Feign Death, Bloodletting, Rage, Volitation, Archery, 
Grecious Wound, Precise Shot, etc)

+ Form your own party of up to 6 characters

+ Form multiplayer alliances with up to 36 characters

+ Add, remove, or even create new characters at Inns, without ever leaving 
the game!

+ Powerful modding system including RPG Database (with live recompiles) and 
Realtime Zone Editing

+ Advanced users can SSH into their world and edit the game while it's 
running from an interactive Python shell.

+ Global, World, Zone, Area, Alliance, and Private chat channels

+ Global Chat system is hooked up to IRC, so you can chat with people in and 
out of the game, even spanning worlds!

Thanks!,
The Entire Team at Prairie Games 




From glyph at divmod.com  Sun Jul  3 12:55:48 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 3 Jul 2005 14:55:48 -0400
Subject: [Twisted-Python] Minions of Mirth - Independent Persistent World
In-Reply-To: <006d01c57fad$227219e0$0400000a@spooge>
Message-ID: <20050703185548.26278.1431338652.divmod.quotient.4958@ohm>

Josh, this is fabulous!  I'm signing up.  Just one thing:

>+ Advanced users can SSH into their world and edit the game while it's 
>running from an interactive Python shell.

I think you might find that it's a *bit* too easy to tank your whole game world using this feature...



From andrea at cpushare.com  Sun Jul  3 15:25:35 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 3 Jul 2005 23:25:35 +0200
Subject: [Twisted-Python] how to tap a DelayedCall?
In-Reply-To: <68BDEC68-EC59-4EB5-891E-927A1B2F77E9@fuhm.net>
References: <20050702022044.GJ9987@g5.random> <20050702173442.GM9987@g5.random>
	<68BDEC68-EC59-4EB5-891E-927A1B2F77E9@fuhm.net>
Message-ID: <20050703212535.GO9987@g5.random>

On Sat, Jul 02, 2005 at 02:40:21PM -0400, James Y Knight wrote:
> FYI, the -u and -g arguments were added to twistd for 2.0,

thanks for the info, so the only reason left to still use mktap are the
other params.



From nkeric at gmail.com  Sun Jul  3 20:31:08 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 4 Jul 2005 10:31:08 +0800
Subject: [Twisted-Python] How to implement bandwidth control for a UDP proxy
	server?
Message-ID: <43c0d2b5050703193162cde4e1@mail.gmail.com>

Hello!

Dose anyone have any experience in implementing bandwidth control for
UDP packets transferring with twisted? Please enlighten me if you
could, thank in advance!

: )

- Eric



From moof at metamoof.net  Mon Jul  4 08:53:58 2005
From: moof at metamoof.net (Moof)
Date: Mon, 04 Jul 2005 16:53:58 +0200
Subject: [Twisted-Python] Scheduling of modules
Message-ID: <42C94D86.2060008@metamoof.net>

Hiya,

I've more or less had twisted sold to me as the be-all and end-all in terms
of avoiding having to deal with threads, amongst other things, so I thought
I'd ask if twisted is the right thing to use for my problem.

I have a number of modules which use John J Lee's mechanize module to do
some web scraping to different web sites. Right now mechanize uses standard
urllib calls to do its thing, though it may be possible after much
refactoring to get it use something more asyncronous. So for the short term
rapid development thing, I'm more or less stuck with threads if I want to
get any vaguely concurrent running out of these modules.

Specifically, I'm going to need to poll a database every minute or so (or
write some form of SQL Server 2000 trigger which will call me when things
change) and if there are any changes in the database, potentially fire off
thirty of these web scraping modules at once. The modules are
self-contained, and don't communicate with anything other than the thing
that calls them by returning values, so I'm vaguely certain they're more or
less thread-safe, inasmuch as I ever can be.

My beef is that I can't have more than one scraping module modifying the
same site concurrently. This introduces race conditions on the site, rather
than in my code. Each module touches only one site, so I need to basically
have a module-level lock either in the module or in the thread scheduler to
ensure that I'm not running the same module more than once.

This makes me think of some sort of queue structure. I either need to have
one queue that just works through its requests ignoring any that are
currently running, or one queue per module with some sort of central
dispatcher that will place a request in the appropriate queue.

In real terms, these modules may take up to three minutes to complete the
web scraping they are required to do, though most take 20 seconds or so. I'd
rather not just have them called one after the other in a blocking manner,
as I'd sort of like to have a five or six minute response time whenever a
request is placed in the database to fire off a bunch of updates, rather
than the close to 20 minute response time I'm currently getting when I fire
a complete unittest suite off. These requests may come in several times a
day, most commonly hours apart, but I need to be able to react if I get two
or three different requests within a five minute period, which would mean
firing off the next request to the module as soon as it has completed the
current request.

Is this something Twisted can help me with? If so, what are my options
within Twisted, and what should I be reading up on how to use? I have a
vague idea that Twisted has a thread pool, but I'm not sure if it has an
event queue that would be suitable for this sort of control, or how I'd go
about modifying whatever's there to be useful for this sort of thing.

If not, any pointers to patterns that might help me code such a thing up?

I'm running on Windows. I need no GUI integration as such, though it will
need to run as an NT service. Any input other than though the database could
potentially be triggered off by a client programme going through something
like perspective broker, or the Windows NT service controller telling me to
start up or shut down.

Thanks for your help,

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From abe at fettig.net  Mon Jul  4 11:47:50 2005
From: abe at fettig.net (Abe Fettig)
Date: Mon, 04 Jul 2005 13:47:50 -0400
Subject: [Twisted-Python] O'Reilly book on Twisted coming in October
Message-ID: <42C97646.3040203@fettig.net>

Hi all,

I'm happy to announce that O'Reilly is going to publish my book on
Twisted. It's scheduled for release in October. The working title is
Twisted Network Programming Essentials.

I've been working on this book since the end of last year, but I've been
waiting to announce it until I knew that it was definitely going to be
published in the reasonably near future. At this point it's in the
editing stage, and O'Reilly has put it on their production schedule for
an October release. So spread the word - there's a Twisted book coming!

For a description of what the book covers (and what it doesn't), see
this post on my weblog:

http://fettig.net/weblog/2005/06/30/my-book-on-twisted/

Thanks to all the Twisted developers for creating such an amazing
framework. The more I learn about Twisted (and I learned a lot while
writing this book), the more I'm impressed. I hope this book helps many
more people to get started with Twisted, and that it's the first of many
more books to come.

Abe



From glyph at divmod.com  Mon Jul  4 12:01:40 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 4 Jul 2005 14:01:40 -0400
Subject: [Twisted-Python] O'Reilly book on Twisted coming in October
In-Reply-To: <42C97646.3040203@fettig.net>
Message-ID: <20050704180140.26278.427842379.divmod.quotient.5500@ohm>


On Mon, 04 Jul 2005 13:47:50 -0400, Abe Fettig <abe at fettig.net> wrote:
>Hi all,

>I'm happy to announce that O'Reilly is going to publish my book on
>Twisted. It's scheduled for release in October. The working title is
>Twisted Network Programming Essentials.

Congratulations, Abe!  This is wonderful news.  You know what would be better news, though?  My free, autographed copy arriving in the mail ;-)



From flashbuster at gmail.com  Mon Jul  4 12:22:15 2005
From: flashbuster at gmail.com (Sebastian Schulze)
Date: Mon, 4 Jul 2005 20:22:15 +0200
Subject: [Twisted-Python] O'Reilly book on Twisted coming in October
In-Reply-To: <42C97646.3040203@fettig.net>
References: <42C97646.3040203@fettig.net>
Message-ID: <c2959a4205070411225176a8e4@mail.gmail.com>

Whhee, what a good news! I'll definitly buy this one.
Please inform us when your book is avaiable on amazon.com (or elsewhere).

I have two questions: Does it cover all the changes done with Twisted 2.0 or
is it based on a prior version?
Is there a way of getting an autographed version, that would be nice :-)


On 7/4/05, Abe Fettig <abe at fettig.net> wrote:
> Hi all,
> 
> I'm happy to announce that O'Reilly is going to publish my book on
> Twisted. It's scheduled for release in October. The working title is
> Twisted Network Programming Essentials.
> 
> I've been working on this book since the end of last year, but I've been
> waiting to announce it until I knew that it was definitely going to be
> published in the reasonably near future. At this point it's in the
> editing stage, and O'Reilly has put it on their production schedule for
> an October release. So spread the word - there's a Twisted book coming!
> 
> For a description of what the book covers (and what it doesn't), see
> this post on my weblog:
> 
> http://fettig.net/weblog/2005/06/30/my-book-on-twisted/
> 
> Thanks to all the Twisted developers for creating such an amazing
> framework. The more I learn about Twisted (and I learned a lot while
> writing this book), the more I'm impressed. I hope this book helps many
> more people to get started with Twisted, and that it's the first of many
> more books to come.
> 
> Abe
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From general at eepatents.com  Mon Jul  4 16:20:36 2005
From: general at eepatents.com (Ed Suominen)
Date: Mon, 04 Jul 2005 15:20:36 -0700
Subject: [Twisted-Python] Re: O'Reilly book on Twisted coming in October
In-Reply-To: <E1DpVEj-0005kE-02@pyramid.twistedmatrix.com>
References: <E1DpVEj-0005kE-02@pyramid.twistedmatrix.com>
Message-ID: <1120515636.9253.52.camel@207-118-73-152.dyn.centurytel.net>

Abe, this is great to hear! Congratulations and very best of success to
you and the book. I for one will be looking to buy it ASAP.

P.S. - Apparently your blogging software is based on PHP rather than
Twisted. :-/ From your link, I just get an error "Error establishing a
database connection. This either means that the username and password
information in your wp-config.php file is incorrect or we can't contact
the database server at localhost." 

Best regards,
Ed Suominen

Abe Fettig wrote:
> Hi all,
> 
> I'm happy to announce that O'Reilly is going to publish my book on
> Twisted. It's scheduled for release in October. The working title is
> Twisted Network Programming Essentials.
> 
> I've been working on this book since the end of last year, but I've
> been
> waiting to announce it until I knew that it was definitely going to be
> published in the reasonably near future. At this point it's in the
> editing stage, and O'Reilly has put it on their production schedule
> for
> an October release. So spread the word - there's a Twisted book
> coming!
> 
> For a description of what the book covers (and what it doesn't), see
> this post on my weblog:
> 
> http://fettig.net/weblog/2005/06/30/my-book-on-twisted/
> 
> Thanks to all the Twisted developers for creating such an amazing
> framework. The more I learn about Twisted (and I learned a lot while
> writing this book), the more I'm impressed. I hope this book helps
> many
> more people to get started with Twisted, and that it's the first of
> many
> more books to come.
> 
> Abe




From iacovou at gmail.com  Tue Jul  5 06:16:57 2005
From: iacovou at gmail.com (kgi)
Date: Tue, 5 Jul 2005 15:16:57 +0300
Subject: [Twisted-Python] Questions regarding serviceCollection and
	Interfaces.
Message-ID: <491db6c9050705051673b82535@mail.gmail.com>

Hi all.

I'm in the process of moving a skeleton asyncore application to
Twisted, and need some help. I'm hoping that someone with much Twisted
Enlightenment can point me gently in the direction of understanding.

(Amusingly enough, another poster recently summarised my exact
experiences: start with asyncore, find its limitations, do a bit of
shoehorning and end up trying with Twisted).

Because this is new code I want to do The Right Thing vis-a-vis the
latest Twisted coding techniques. Everything was peachy until I reached
a certain step in the "Evolution of Finger" Tutorial.

Until a certain point I had completely grokked the approach that looks
like this:


  class Foo ( Protocol ):
      ....

  factory = ServerFactory()
  factory.protocol = Foo

  application = service.Application ( "fooserver" )
  internet.TCPServer ( port, factory ).setServiceParent ( application )


However, then I reached:

  http://twistedmatrix.com/projects/core/documentation/howto/tutorial/components.html

and the approach morphed into:

  application = service.Application ( "fooserver" )
  f = FooService()
  serviceCollection = service.IServiceCollection ( application )
  internet.TCPServer ( port, IFooFactory ( f ) ).setServiceParent (
serviceCollection )


Here are my questions:

1. I simply don't understand the third line of the new approach! :-)

   In twisted.application.service.py, I see:

    class IServiceCollection(components.Interface):
      ....

   So, "IServiceCollection" is an Interface; my (possibly outdated)
understanding
   is that an interface is simply a specification that you can check
against when
   something claims to implement it, hence all the "implements(Yadda)" calls
   everywhere (presumably, an exception is raised when something tells porkies
   about what it implements).

   But in this case, it looks like we're actually instantiating an
interface class.
   I can't grok what this "means", especially in light of the fact that there
   is "MultiService" below it that implements IServiceCollection.

2. Similarly, in the last line, "IFooFactory(f)" is taking a Service
(which isn't
   a factory) and passing it as a construction argument to IFooFactory (which
   also isn't a factory). The result is used as an argument to
internet.TCPServer(),
   which expects a factory!

3. What do I gain by using a serviceCollection over an application as the
   serviceParent of a TCPServer? Come to think of it, what did I gain in the
   first place with setServiceParent()?

4. Lastly, there are lots of examples floating around that describe
   how each Protocol example can reference its own Factory in order for
   connections to be able to talk to other connections (for example, in
   the chat server example). However, what approach should I take when I
   have a single server with multiple Protocols?

   For example, consider a simple cache: I have a server which accepts
   TCP connections from lots of clients, and handles queries from
   these clients. The server actually gets information from an
   upstream server, but caches the results that it has already seen.

   In this case in the server I need a Protocol/TCPServer server to
   handle the multiple clients, and a single Protocol/connectTCP
   client for the upstream connection. However, it's not clear to me
   how I would transfer the data from the lineReceived() method of the
   server Protocol to the sendLine() method of the client Protocol,
   since each Protocol can see its own Factory, but not the Factory of
   the other Protocol.


Many thanks for your time, and any assistance afforded!

Ricky



From abe at fettig.net  Tue Jul  5 07:32:48 2005
From: abe at fettig.net (Abe Fettig)
Date: Tue, 05 Jul 2005 09:32:48 -0400
Subject: [Twisted-Python] O'Reilly book on Twisted coming in October
In-Reply-To: <20050704180140.26278.427842379.divmod.quotient.5500@ohm>
References: <20050704180140.26278.427842379.divmod.quotient.5500@ohm>
Message-ID: <42CA8C00.4020308@fettig.net>

glyph at divmod.com wrote:

> Congratulations, Abe!  This is wonderful news.  You know what would be
> better news, though?  My free, autographed copy arriving in the mail ;-)

You got it! Send me your mailing address off-list and I'll see to it
that you get a copy. Same offer goes to any of the other twisted devs
(committers only, sorry but I've got to cut it off somewhere!), on a
first come, first served basis until I use up my free copies.

Abe



From itamar at itamarst.org  Tue Jul  5 07:50:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 05 Jul 2005 09:50:29 -0400
Subject: [Twisted-Python] Questions regarding serviceCollection and
	Interfaces.
In-Reply-To: <491db6c9050705051673b82535@mail.gmail.com>
References: <491db6c9050705051673b82535@mail.gmail.com>
Message-ID: <1120571429.8508.23.camel@localhost.localdomain>

On Tue, 2005-07-05 at 15:16 +0300, kgi wrote:

>    But in this case, it looks like we're actually instantiating an
> interface class.
>    I can't grok what this "means", especially in light of the fact that there
>    is "MultiService" below it that implements IServiceCollection.

This is interface adaptation, see
http://twistedmatrix.com/projects/core/documentation/howto/components.html for an expalantion.

> 3. What do I gain by using a serviceCollection over an application as the
>    serviceParent of a TCPServer? Come to think of it, what did I gain in the
>    first place with setServiceParent()?

Services are setup as a tree; the application is the root of the tree.
Services let you organize your code as pluggable self-contained parts
that get startup and shutdown events. Of course, for a simple TCP server
that doesn't give you much.

> 4. Lastly, there are lots of examples floating around that describe
>    how each Protocol example can reference its own Factory in order for
>    connections to be able to talk to other connections (for example, in
>    the chat server example). However, what approach should I take when I
>    have a single server with multiple Protocols?
> 
>    For example, consider a simple cache: I have a server which accepts
>    TCP connections from lots of clients, and handles queries from
>    these clients. The server actually gets information from an
>    upstream server, but caches the results that it has already seen.
> 
>    In this case in the server I need a Protocol/TCPServer server to
>    handle the multiple clients, and a single Protocol/connectTCP
>    client for the upstream connection. However, it's not clear to me
>    how I would transfer the data from the lineReceived() method of the
>    server Protocol to the sendLine() method of the client Protocol,
>    since each Protocol can see its own Factory, but not the Factory of
>    the other Protocol.

myServerFactory.clientFactory = myClientFactory 
# and now server Protocol instances can do self.factory.clientFactory





From abe at fettig.net  Tue Jul  5 07:53:03 2005
From: abe at fettig.net (Abe Fettig)
Date: Tue, 05 Jul 2005 09:53:03 -0400
Subject: [Twisted-Python] O'Reilly book on Twisted coming in October
In-Reply-To: <c2959a4205070411225176a8e4@mail.gmail.com>
References: <42C97646.3040203@fettig.net>
	<c2959a4205070411225176a8e4@mail.gmail.com>
Message-ID: <42CA90BF.20302@fettig.net>

Sebastian Schulze wrote:
> Whhee, what a good news! I'll definitly buy this one.
> Please inform us when your book is avaiable on amazon.com (or elsewhere).
> 
> I have two questions: Does it cover all the changes done with Twisted 2.0 or
> is it based on a prior version?

It's based on Twisted 2.0.

> Is there a way of getting an autographed version, that would be nice :-)

A lot of people seem to be asking for that :-). I've already promised to
give away my free author's copies to Twisted committers, but I'll try to
figure out a way to make autographed copies available for purchase for
everybody else who wants one.

Thanks for all the enthusiastic comments, everyone! I'm very excited.

Abe



From yanick at iotum.com  Tue Jul  5 10:06:50 2005
From: yanick at iotum.com (Yanick Dufresne)
Date: Tue, 5 Jul 2005 12:06:50 -0400
Subject: [Twisted-Python] Adbapi, cp_reconnect and MySQL
Message-ID: <48C76E56FDD0DF44B6585A82E5DD27AE06B901@iotum-sbs.IotumCorp.local>

Hi all, quick question:

In adbapi's Transaction.reopen:

    def reopen(self):
        if self._connection is None:
            self.reconnect()

        if self._cursor is not None:
            self.close()

        try:
            self._cursor = self._connection.cursor()
            return
        except:
            if not self._pool.reconnect:
                raise

My understand of the goal of cp_reconnect is to ensure that at the
beginning of a query, the connection be re-established if it timed out
since the last query (I understand that trying to reconnect in the
middle of an interaction could potentially have undesired and
unpredictable effects).

The code above seems to assume that self._connection.cursor() will raise
ConnectionLost if the connection has timed out.

My question is two-fold:
1) should it not specifically check for ConnectionLost rather than catch
everything?
2) I don't know about other backends, but MySQL will cheerfully give you
a cursor object whenever you ask for one, and only raises ConnectionLost
when you actually call execute on the cursor, making the code above
completely ineffective. Anyone has a clever solution to this, short of
inserting "            self._cursor.execute(self._pool.good_sql)" in the
try block? That works, but isn't exactly performance friendly...

Any help appreciated,

Yanick Dufresne
Iotum Corporation



From itamar at itamarst.org  Tue Jul  5 15:32:52 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 05 Jul 2005 17:32:52 -0400
Subject: [Twisted-Python] ANN: Coil v0.1, a configuration library
Message-ID: <1120599172.8508.61.camel@localhost.localdomain>

Coil is a configuration language, inspired by some of SmartFrog's
features (http://www.hpl.hp.com/research/smartfrog/papers.htm), aimed at
Python programs in general and Twisted in particular. Coil will at some
point become twisted.coil and form the basis for a new (but, of course,
completely optional) deployment system for Twisted.

You can download it at:
http://itamarst.org/software/coil-0.1.tar.gz

and read the documentation (also in the tarball) at:
http://svn.twistedmatrix.com/cvs/sandbox/itamar/coil/DOC.txt?view=auto&rev=14097

I forgot to add a license file, but it's licensed under same terms as
Twisted itself (i.e. MIT license).

Coil's development was sponsored by my employer, ITA Software (we're
hiring: <http://www.itasoftware.com/careers/>)

-- 
Itamar Shtull-Trauring <itamar at itamarst.org>
http://itamarst.org




From pelzlpj at eecs.umich.edu  Tue Jul  5 19:27:57 2005
From: pelzlpj at eecs.umich.edu (Paul Pelzl)
Date: Tue, 5 Jul 2005 21:27:57 -0400
Subject: [Twisted-Python] resolution failure after upgrade to twisted 2.0
Message-ID: <20050706012757.GW21233@edinburgh.eecs.umich.edu>


Hello,

I maintain a wxPython application that uses Twisted for the networking
back-end.  After upgrading from Twisted 1.3 to 2.0, the application
fails to connect to a given hostname (e.g. "localhost"), although
everything works fine if an explicit IP address is provided.  My
application runs the Twisted loop by polling with a timer, like so:

------------------------------------------------------------------------
class MyApp(wxApp):

   def OnInit(self):
      ...
      EVT_TIMER(self, TIMERID, self.OnTimer)
      self.timer = wxTimer(self, TIMERID)
      self.timer.Start(250, False)
      ...


   def OnTimer(self, event):
      reactor.runUntilCurrent()
      reactor.doIteration(0)


   def connect(self, event=None):
      ...
      reactor.connectTCP(hostname, portNum, MyClientFactory())


reactor.startRunning()
app = MyApp(0)
app.MainLoop()
------------------------------------------------------------------------

Any idea what's going on here?  I suspect this guy is dealing with a
related issue:
http://groups-beta.google.com/group/comp.lang.python/browse_frm/thread/1f0be1d57dfafe1c/2d84c0bc9cd4e4f6

Paul





From exarkun at divmod.com  Tue Jul  5 19:52:29 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 5 Jul 2005 21:52:29 -0400
Subject: [Twisted-Python] resolution failure after upgrade to twisted 2.0
In-Reply-To: <20050706012757.GW21233@edinburgh.eecs.umich.edu>
Message-ID: <20050706015229.26278.328283714.divmod.quotient.6249@ohm>

On Tue, 5 Jul 2005 21:27:57 -0400, Paul Pelzl <pelzlpj at eecs.umich.edu> wrote:
>
>Hello,
>
>I maintain a wxPython application that uses Twisted for the networking
>back-end.  After upgrading from Twisted 1.3 to 2.0, the application
>fails to connect to a given hostname (e.g. "localhost"), although
>everything works fine if an explicit IP address is provided.  My
>application runs the Twisted loop by polling with a timer, like so:
>

Your app doesn't seem to be starting the reactor via the public API.  This is probably causing the threadpool to never be started up.

Twisted 2.0 switched to doing name resolution using the threadpool, since it can block for significant amounts of time.  If the threadpool never starts up, no names will ever be resolvable.

Explicitly installing BlockingResolver or starting up the reactor in a way which starts the threadpool should fix the problem.

Jp



From ww at groovy.net  Tue Jul  5 21:11:52 2005
From: ww at groovy.net (William Waites)
Date: Tue, 5 Jul 2005 23:11:52 -0400
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <C764BA21-F36E-4117-8FA7-23537B071F77@redivi.com>
References: <20050702193724.GB27071@groovy.net>
	<C764BA21-F36E-4117-8FA7-23537B071F77@redivi.com>
Message-ID: <20050706031152.GA17576@groovy.net>

On Sat, Jul 02, 2005 at 10:27:28AM -1000, Bob Ippolito wrote:
> 
> threadedselectreactor (in svn, will be in 2.1) runs the blocking part  
> of the reactor in a separate thread, so you could do blocking PB- 
> based RPC with that..

This seems to work, even just taking that file
and adding it by hand to a 2.0.1 install.

Thanks!

-w



From ww at groovy.net  Tue Jul  5 21:17:32 2005
From: ww at groovy.net (William Waites)
Date: Tue, 5 Jul 2005 23:17:32 -0400
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <1120366160.7846.10.camel@localhost.localdomain>
References: <20050702193724.GB27071@groovy.net>
	<1120366160.7846.10.camel@localhost.localdomain>
Message-ID: <20050706031732.GB17576@groovy.net>

On Sun, Jul 03, 2005 at 12:49:20AM -0400, Itamar Shtull-Trauring wrote:
> On Sat, 2005-07-02 at 15:37 -0400, William Waites wrote:
> 
> > Because of the way Yate deals with
> > threads and signals, it seems to be hard to get a twisted
> > reactor to run inside the embedded interpreter.
> 
> reactor.run(installSignalHandlers=False) may fix that.

Hmmm. I tried that, but then the reactor stalls. No
reactor.callLater's actually seem to get called...

-w



From foom at fuhm.net  Tue Jul  5 22:29:53 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 6 Jul 2005 00:29:53 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <ABE552E5-22C4-4122-9E58-CA94A2A3867D@fuhm.net>

Bug summary
______________________
Since 2005-06-30 00:55:46.390000:
Bugs opened: 8   Bugs closed: 6   Total open bugs: 398 (+2)
   Urgent: 9 (+0)
   Bug: 170 (+2)
   Feature: 143 (+0)
   Wish: 76 (+0)

New / Reopened Bugs
______________________
                     ==== Bug ====
TypeError in Failure.raiseException when using  
defer.deferredGenerator and perspective broker  (8 hours ago)
        http://twistedmatrix.com/bugs/issue1103 opened by titty

[PB] _Dereferences showing up in cyclic data structures with pb,  
jelly, and Cacheable  (5 days ago)
        http://twistedmatrix.com/bugs/issue1102 opened by phenyx

twisted-bugs list is broken  (6 days ago)
        http://twistedmatrix.com/bugs/issue1101 opened by exarkun

Bugs Closed
______________________
                     ==== Bug ====
internet.py: self._port.stopListening() should check that self._port  
exists  (2 weeks ago)
        http://twistedmatrix.com/bugs/issue1088 opened by loic,  
closed by exarkun




From therve at free.fr  Wed Jul  6 02:18:23 2005
From: therve at free.fr (Thomas HERVE)
Date: Wed, 06 Jul 2005 10:18:23 +0200
Subject: [Twisted-Python] File Transfer/BitTorrent
Message-ID: <20050706101823.34qo14yhlj5wgkoo@itchy.wasabout.net>

Hi all,

I've seen a lot of threads talking around my problem but haven't found what I
was looking for.

My need : I want to have a file transfer application, with the following
functionnalities (for now) :
- Transfer from 1 to N
- Integrity control
- Failover/Resume
- Handle big files (up to 5Gb)
- Strong authentication/encryption (with client certificates)
- Automatic actions when upload/download finished

FTP is not really a possibility (mainly because of the nasty network
configuration it needs).

My first thought was : hey, it looks like BitTorrent could fit my needs, just a
little SSL could make it. Unfortunately, after some tests, I realized that the
reference implementation of BitTorrent is really messy : plugging a SSL part is
a challenge, resulting in something not so great. BitTornado is cleaner, but
also lacks documentation (yes, more than twisted !).

So why not implement BitTorrent with Twisted ? It could be something great for
the Twisted visibility. But as I don't care about BitTorrent compatibility, it
might be better to start a new protocol from scratch.

So :

1) Is there some people interested in BitTorrent client/server with Twisted ?

2) If not, does a draft/standard exist of good file transfer protocol, that
could be done with Twisted ?

Thanks for your opinions,

-- 
Thomas



From nkeric at gmail.com  Wed Jul  6 04:45:34 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Wed, 6 Jul 2005 18:45:34 +0800
Subject: [Twisted-Python] Can I get the interface's IP addr from where the
	datagram is received?
Message-ID: <43c0d2b5050706034524cffa8a@mail.gmail.com>

Hi all,

I'm writting a udp server which may have multiple instances listening
on multiple network interfaces, I need to get the network interface's
address when datagrame received:

class MyUdpServer(DatagramProtocol):
    def datagramReceived(self, data, addr):
        print "The client's addr is", addr
        print "My addr is", ???

How can I retrieve the IP?
Thanks in advance!

- Eric



From iacovou at gmail.com  Wed Jul  6 08:18:53 2005
From: iacovou at gmail.com (kgi)
Date: Wed, 6 Jul 2005 17:18:53 +0300
Subject: [Twisted-Python] Questions regarding serviceCollection and
	Interfaces.
In-Reply-To: <1120571429.8508.23.camel@localhost.localdomain>
References: <491db6c9050705051673b82535@mail.gmail.com>
	<1120571429.8508.23.camel@localhost.localdomain>
Message-ID: <200507061718.53389.iacovou@gmail.com>

On Tuesday 05 July 2005 16:50, Itamar Shtull-Trauring wrote:
> On Tue, 2005-07-05 at 15:16 +0300, kgi wrote:
> >    I can't grok what this "means", especially in light of the fact that
> > there is "MultiService" below it that implements IServiceCollection.
>
> This is interface adaptation, see
> http://twistedmatrix.com/projects/core/documentation/howto/components.html
> for an expalantion.

Thanks for your answer, Itamar.

I've read the information at the link, and I think I've moved a few rungs up 
the grokking ladder now. I had previously read the Zope Interface 
introduction at:

  http://svn.zope.org/Zope3/trunk/src/zope/interface/README.txt?view=markup

but this mostly just talks about the relationship between interfaces and 
objects (i.e. lots of .providedBy() and implementedBy() examples), and 
doesn't touch interface adaptation and components.

I do have one question arising from the Zope documentation, though. In the 
link above, it says (abridged):

"""
class IFoo(zope.interface.Interface):
    def bar(q, r=None):
        """bar blah blah"""
[...]
  Note that `bar` doesn't take a `self` argument.  Interfaces document
  how an object is *used*.  When calling instance methods, you don't
  pass a `self` argument, so a `self` argument isn't included in the
  interface signature.
"""

Yet all the examples I've seen in the Twisted documentation have interface 
methods that contain "self" parameters; for example, from the link you sent 
me:

from zope.interface import Interface

class IAmericanSocket(Interface):
    def voltage(self):
      """Return the voltage produced by this socket object, as an integer.
      """

Is this simply a cosmetic thing (i.e. no code actually looks at the function 
signature) or is the Zope Interface documentation out of date or wrong?

> > 3. What do I gain by using a serviceCollection over an application as the
> >    serviceParent of a TCPServer? Come to think of it, what did I gain in
> > the first place with setServiceParent()?
>
> Services are setup as a tree; the application is the root of the tree.
> Services let you organize your code as pluggable self-contained parts
> that get startup and shutdown events. Of course, for a simple TCP server
> that doesn't give you much.

Got you, thanks.

> >    In this case in the server I need a Protocol/TCPServer server to
> >    handle the multiple clients, and a single Protocol/connectTCP
> >    client for the upstream connection. However, it's not clear to me
> >    how I would transfer the data from the lineReceived() method of the
> >    server Protocol to the sendLine() method of the client Protocol,
> >    since each Protocol can see its own Factory, but not the Factory of
> >    the other Protocol.
>
> myServerFactory.clientFactory = myClientFactory
> # and now server Protocol instances can do self.factory.clientFactory

OK, so it's as simple as just boshing in a new attribute. I guess I had got so 
hung up on not understanding the "service" stuff previously I was convinced 
the right way to access other Factories was via the serviceCollection.

Again, thanks for your answer.

Ricky

P.S. I took so long in answering because I wanted to be able to answer 
maintaining the original message threading information (I know some people 
get really upset when you break threading), which eventually meant setting up 
a separate postfix server just for outgoing gmail email.

If anyone has any information on either (1) getting a single postfix instance 
to work with multiple relayhosts for multiple "identities", or (2) 
configuring kmail to send directly to gmail over TLS, I'd love to hear how 
you did it. I found lots of generic configuration info for kmail, but I 
couldn't get kmail to manage it whatever I did.



From tv at twistedmatrix.com  Wed Jul  6 09:21:26 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 06 Jul 2005 18:21:26 +0300
Subject: [Twisted-Python] Can I get the interface's IP addr from where
	the	datagram is received?
In-Reply-To: <43c0d2b5050706034524cffa8a@mail.gmail.com>
References: <43c0d2b5050706034524cffa8a@mail.gmail.com>
Message-ID: <42CBF6F6.2000306@twistedmatrix.com>

Eric Hsu wrote:
> I'm writting a udp server which may have multiple instances listening
> on multiple network interfaces, I need to get the network interface's
> address when datagrame received:
> 
> class MyUdpServer(DatagramProtocol):
>     def datagramReceived(self, data, addr):
>         print "The client's addr is", addr
>         print "My addr is", ???
> 
> How can I retrieve the IP?
> Thanks in advance!

Assumption: you really need to know the address the packet was sent to,
and not just "(one of) my IP address(es)".

1) the portable, ugly way: iterate all local addresses, bind to each
separately, map socket fd -> IP address when receiving. Note that
modern OSes allow more than one address per interface. Sucks a lot
if anything changes during runtime, too.

2) the Linux-specific, nice way: see IP_PKTINFO in ip(7), recvmsg(2),
cmsg(3), etc. For python, use eunuchs.recvmsg, see
http://www.inoi.fi/open/trac/eunuchs



From itamar at itamarst.org  Wed Jul  6 09:51:37 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 06 Jul 2005 11:51:37 -0400
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <20050706031732.GB17576@groovy.net>
References: <20050702193724.GB27071@groovy.net>
	<1120366160.7846.10.camel@localhost.localdomain>
	<20050706031732.GB17576@groovy.net>
Message-ID: <1120665097.8537.28.camel@localhost.localdomain>

On Tue, 2005-07-05 at 23:17 -0400, William Waites wrote:

> > reactor.run(installSignalHandlers=False) may fix that.
> 
> Hmmm. I tried that, but then the reactor stalls. No
> reactor.callLater's actually seem to get called...

That's how it's supposed to work: reactor.run() doesn't exit until you
stop the reactor. You need to setup scheduled calls before running the
reactor.




From itamar at itamarst.org  Wed Jul  6 09:53:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 06 Jul 2005 11:53:32 -0400
Subject: [Twisted-Python] Questions regarding serviceCollection and
	Interfaces.
In-Reply-To: <200507061718.53389.iacovou@gmail.com>
References: <491db6c9050705051673b82535@mail.gmail.com>
	<1120571429.8508.23.camel@localhost.localdomain>
	<200507061718.53389.iacovou@gmail.com>
Message-ID: <1120665212.8537.30.camel@localhost.localdomain>

On Wed, 2005-07-06 at 17:18 +0300, kgi wrote:

> Is this simply a cosmetic thing (i.e. no code actually looks at the function 
> signature) or is the Zope Interface documentation out of date or wrong?

Our code is wrong and needs the self removed; in practice though the
methods on interfaces only serve as documentation, so it doesn't
actually matter.





From ww at groovy.net  Wed Jul  6 10:11:43 2005
From: ww at groovy.net (William Waites)
Date: Wed, 6 Jul 2005 12:11:43 -0400
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <1120665097.8537.28.camel@localhost.localdomain>
References: <20050702193724.GB27071@groovy.net>
	<1120366160.7846.10.camel@localhost.localdomain>
	<20050706031732.GB17576@groovy.net>
	<1120665097.8537.28.camel@localhost.localdomain>
Message-ID: <20050706161143.GJ17576@groovy.net>

On Wed, Jul 06, 2005 at 11:51:37AM -0400, Itamar Shtull-Trauring wrote:
> On Tue, 2005-07-05 at 23:17 -0400, William Waites wrote:
> 
> > > reactor.run(installSignalHandlers=False) may fix that.
> > 
> > Hmmm. I tried that, but then the reactor stalls. No
> > reactor.callLater's actually seem to get called...
> 
> That's how it's supposed to work: reactor.run() doesn't exit until you
> stop the reactor. You need to setup scheduled calls before running the
> reactor.

I understand that. I had set up a couple of reactor.callLater's
before calling reactor.run(). They just don't actually seem to
get run.

For actual operation, control passes from a thread in the 
C++ method TelEngine::MessageHandler::received(Message &m)
to a python function softswitch.message(m) which then calls
into the reactor using callFromThread. Bit I'm not quite
there yet, first step was to get the reactor running, which
seems to work with threadedselectreactor.

Incidentally, I am running the standard reactor like so in
the block of code that runs when the Yate module is imported
after it initializes the interpreter:

from threading import Thread
t = Thread(target = reactor.run, kwargs = {'installSignalHandlers' : False})
t.start()

This is necessary because the Yate module's initialization 
method is expected to return. But is this expected to work
in your experience?

Alternatively the Yate module could run the main interpreter in
a separate thread itself that is not expected to return. This
is what the (corresponding) asterisk module does. That might be the
best way, but then it assumes a main-thread function in python
does not return, which is a nuisance if you want to do something
in the python module without using twisted.

-w



From foom at fuhm.net  Wed Jul  6 10:29:03 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 6 Jul 2005 12:29:03 -0400
Subject: [Twisted-Python] Questions regarding serviceCollection and
	Interfaces.
In-Reply-To: <200507061718.53389.iacovou@gmail.com>
References: <491db6c9050705051673b82535@mail.gmail.com>
	<1120571429.8508.23.camel@localhost.localdomain>
	<200507061718.53389.iacovou@gmail.com>
Message-ID: <6B638BAE-8EFE-4BDD-B51D-9B81DB0C5A08@fuhm.net>

On Jul 6, 2005, at 10:18 AM, kgi wrote:
> I do have one question arising from the Zope documentation, though.  
> In the
> link above, it says (abridged):
>
> """
> class IFoo(zope.interface.Interface):
>     def bar(q, r=None):
>         """bar blah blah"""
> [...]
>   Note that `bar` doesn't take a `self` argument.  Interfaces document
>   how an object is *used*.  When calling instance methods, you don't
>   pass a `self` argument, so a `self` argument isn't included in the
>   interface signature.
> """
>
> Yet all the examples I've seen in the Twisted documentation have  
> interface
> methods that contain "self" parameters



Twisted hasn't always used Zope Interfaces -- we used to have our  
own. In our implementation, we *did* use self as the first argument.  
Thus, the general rule is, if you inherit from  
twisted.python.components.Interface (our backwards compatibility  
wrapper), you should follow our rule and include self as the first  
argument. However, if you inherit directly from  
zope.interface.Interface, you should follow zope's rule and not  
include self.

That said, the signature isn't really used for anything at the  
moment. I've played around with an interface enforcement wrapper that  
does use the signature, but that's just playing around at the moment.

James



From milan at datagate.net.uk  Wed Jul  6 11:43:56 2005
From: milan at datagate.net.uk (Milan Avramovic)
Date: Wed, 6 Jul 2005 18:43:56 +0100
Subject: [Twisted-Python] SuxElementStream error
Message-ID: <200507061843.57134.milan@datagate.net.uk>

Hi,

I've got a problem with Twisted, and I haven't seen it mentioned on the list 
in the last year (some sort of search would definitely help tho...)

Anyway, when trying to run PyMSNt jabber transport, I get following error:

File "/usr/inet/jabberd/PyMSNt-0.9.3/src/utils.py", line 97, in parseString
    es = SuxElementStream()
TypeError: 'NoneType' object is not callable


Now, on PyMSNt some people started talking about missing libraries, so here's 
the question: 

Which libraries does Twisted rely upon?

I've got a Solaris box, manually patched up, so concrete library names will be 
much appreciated. Also, I've manually compiled python 2.4.1, however whole 
python build process seems to just swallow errors, so I'm a bit miffed here.

All help appreciated.


-- 
Kind regards,

Milan Avramovic, System Engineer
DataGate - http://www.DataGate.co.uk
Tel: +44 8700 119090, Fax: +44 8700 119080

____________________________________________________

This email is confidential and intended solely for the use of the
individual to whom it is addressed. Any views or opinions presented are
solely those of the author and do not necessarily represent those of
DataGate Network Solutions Ltd.

If you're not the intended recipient, be advised that you have received
this email in error and that any use, dissemination, forwarding,
printing, or copying of this email is strictly prohibited. If you have
received this email in error please notify the sender by telephone on
+44 (0)8700 11 90 90



From pp64 at codelock.com  Wed Jul  6 15:33:36 2005
From: pp64 at codelock.com (Pavel Pergamenshchik)
Date: Wed, 6 Jul 2005 14:33:36 -0700
Subject: [Twisted-Python] Fast RPC
In-Reply-To: <20050706161143.GJ17576@groovy.net>
References: <20050702193724.GB27071@groovy.net>
	<1120366160.7846.10.camel@localhost.localdomain>
	<20050706031732.GB17576@groovy.net>
	<1120665097.8537.28.camel@localhost.localdomain>
	<20050706161143.GJ17576@groovy.net>
Message-ID: <20050706143336.59812c91@dunce>

On Wed, 6 Jul 2005 12:11:43 -0400
William Waites <ww at groovy.net> wrote:

> On Wed, Jul 06, 2005 at 11:51:37AM -0400, Itamar Shtull-Trauring
wrote:
> > On Tue, 2005-07-05 at 23:17 -0400, William Waites wrote:
> > 
> > > > reactor.run(installSignalHandlers=False) may fix that.
> > > 
> > > Hmmm. I tried that, but then the reactor stalls. No
> > > reactor.callLater's actually seem to get called...
> > 
> > That's how it's supposed to work: reactor.run() doesn't exit until
you
> > stop the reactor. You need to setup scheduled calls before running
the
> > reactor.
> 
> I understand that. I had set up a couple of reactor.callLater's
> before calling reactor.run(). They just don't actually seem to
> get run.
> 
> For actual operation, control passes from a thread in the 
> C++ method TelEngine::MessageHandler::received(Message &m)
> to a python function softswitch.message(m) which then calls
> into the reactor using callFromThread. Bit I'm not quite
> there yet, first step was to get the reactor running, which
> seems to work with threadedselectreactor.

Please make sure you understand how to use threadedselectreactor.
Specifically, you should not call run() on it. You are supposed to call
reactor.interleave(func), where func is your waker function. You _must_
do that or threadedselectreactor will not work. See the examples in
Twisted/doc/core/examples/threadedselect.



From nkeric at gmail.com  Wed Jul  6 20:44:30 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Thu, 7 Jul 2005 10:44:30 +0800
Subject: [Twisted-Python] Can I get the interface's IP addr from where the
	datagram is received?
In-Reply-To: <42CBF6F6.2000306@twistedmatrix.com>
References: <43c0d2b5050706034524cffa8a@mail.gmail.com>
	<42CBF6F6.2000306@twistedmatrix.com>
Message-ID: <43c0d2b5050706194445f5579d@mail.gmail.com>

2005/7/6, Tommi Virtanen <tv at twistedmatrix.com>:
> Assumption: you really need to know the address the packet was sent to,
> and not just "(one of) my IP address(es)".

Hi Tommi, thank you for your reply!

I'm having my server running on a machine which has two ethernet
interfaces, one has an intranet ip address like "192.168.3.4", another
one has a public internet ip address like "202.71.3.4".

I want my server to provide public services to the outside. One of its
function is to allocate some ports for the clients, once the
allocation has been done, the server has to send back an address pair
(ip:port) to the client.

I have written a method:

def getServerIP():
    return socket.getaddrinfo(socket.gethostname(), None)[0][4][0]

It worked properly several days ago and returned me the public address
(202.71.3.4) of that machine, however, yesterday, it kept returning
the intranet address (192.168.3.4) which was useless for the clients
on the internet. I can't figure out why...

I've tried to use the self.transport.getHost(), however, the result
was something like this: IPv4Address(UDP, '0.0.0.0', 6677). What's
wrong with this method?

Is it so hard to know the ip address from which the data my server received?

I'm very new to twisted and not a native english speaker, so please
bear with me :p


- Eric



From andrea at cpushare.com  Thu Jul  7 06:22:56 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 7 Jul 2005 14:22:56 +0200
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
Message-ID: <20050707122256.GV3731@g5.random>

Hello,

I wrote the below code in my server:

from twisted.python import log

# local
from cpushare.mail import send_exception

class cpushare_logging_observer_class(object):
	def __init__(self, factory):
		self.factory = factory
	def start(self):
		if self.factory.production:
			log.addObserver(self.emit)
	def stop(self):
		if self.factory.production:
			log.removeObserver(self.emit)
	def emit(self, eventDict):
		edm = eventDict['message']
		if not edm:
			if eventDict['isError'] and eventDict.has_key('failure'):
				send_exception(eventDict['failure'])

to receive exceptions by email like the below if (send_exception sends me
an sms for the very first exception too). I do a very similar thing in
nevow, but in nevow I handle it through the nevow layer, not through
twisted.

Now to me it seems that the below exception isn't really interesting to
me, any client could generate it by injecting garbage in the ssl
connection.

Does anybody has suggestions on the best way to filter out all
OpenSSL.SSL.Error exceptions before calling send_exception in the above
code? Thanks!

(twisted is great ;)

----- Forwarded message from cpushare at cpushare.com -----

Date: Thu,  7 Jul 2005 14:14:08 +0200 (CEST)
From: cpushare at cpushare.com
To: andrea.kernel at tiscali.it
Subject: CPUShare Exception
X-Mailbox-Line: From nobody Thu Jul  7 14:14:07 2005

Traceback (most recent call last):
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/python/log.py", line 43, in callWithContext
    
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/python/context.py", line 59, in callWithContext
    
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/python/context.py", line 37, in callWithContext
    
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/internet/pollreactor.py", line 160, in _doReadOrWrite
    
--- <exception caught here> ---
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/internet/tcp.py", line 111, in doRead
    
  File "/home/build/bin/i686/python-20050707/lib/python2.4/site-packages/twisted/internet/tcp.py", line 339, in doRead
    
OpenSSL.SSL.Error: [('SSL routines', 'SSL3_READ_BYTES', 'ssl handshake failure')]

----- End forwarded message -----



From glyph at divmod.com  Thu Jul  7 06:44:04 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 7 Jul 2005 08:44:04 -0400
Subject: [Twisted-Python] File Transfer/BitTorrent
In-Reply-To: <20050706101823.34qo14yhlj5wgkoo@itchy.wasabout.net>
Message-ID: <20050707124404.26278.1921372994.divmod.quotient.7103@ohm>



On Wed, 06 Jul 2005 10:18:23 +0200, Thomas HERVE <therve at free.fr> wrote:

>1) Is there some people interested in BitTorrent client/server with Twisted ?

I'm sure lots of people would be interested in a bittorrent protocol implementation for Twisted :).  I know of at least 2 aborted attempts; I don't know if either ever produced any code.

>2) If not, does a draft/standard exist of good file transfer protocol, that
>could be done with Twisted ?

Personally I'm writing a different file-transfer protocol which might meet your requirements; it's called "sigma" and it's going to be based on a lower-level peer-to-peer system called Q2Q.  Watch this space: 
http://divmod.org/projects/q2q
for more information in the next couple of days.




From glyph at divmod.com  Thu Jul  7 06:48:59 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 7 Jul 2005 08:48:59 -0400
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
In-Reply-To: <20050707122256.GV3731@g5.random>
Message-ID: <20050707124859.26278.1398928648.divmod.quotient.7106@ohm>



On Thu, 7 Jul 2005 14:22:56 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:

>Does anybody has suggestions on the best way to filter out all
>OpenSSL.SSL.Error exceptions before calling send_exception in the above
>code? Thanks!

It seems like you might want to filter more than just OpenSSL.SSL.Error ;).  eventDict['failure'] is a twisted.python.failure.Failure object; see the API docs or the code for that class for details on introspecting them (they're designed to be easier to introspect than Python tuples).

For your particular request:

if not eventDict['failure'].check(OpenSSL.SSL.Error):
 send_exception(...)




From andrea at cpushare.com  Thu Jul  7 08:23:13 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 7 Jul 2005 16:23:13 +0200
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
In-Reply-To: <20050707124859.26278.1398928648.divmod.quotient.7106@ohm>
References: <20050707122256.GV3731@g5.random>
	<20050707124859.26278.1398928648.divmod.quotient.7106@ohm>
Message-ID: <20050707142313.GD8436@g5.random>

On Thu, Jul 07, 2005 at 08:48:59AM -0400, glyph at divmod.com wrote:
> It seems like you might want to filter more than just OpenSSL.SSL.Error ;). 

very likely ;), but I guess I can wait until some harmless annoyance
trigger like in this case.

The number of emails the server sends me has a maximum of 10, to avoid
getting the same exception too many times (and the max number of sms is
1). So even something goes wrong and I'm on vacation I don't risk to
fill the inbox ;)

> eventDict['failure'] is a twisted.python.failure.Failure object; see the 
> API docs or the code for that class for details on introspecting them 
> (they're designed to be easier to introspect than Python tuples).
> 
> For your particular request:
> 
> if not eventDict['failure'].check(OpenSSL.SSL.Error):
> send_exception(...)

cool, I updated it like this.

from OpenSSL import SSL
from twisted.python import log

# local
from cpushare.mail import send_exception

class cpushare_logging_observer_class(object):
	def __init__(self, factory):
		self.factory = factory
	def start(self):
		if self.factory.production:
			log.addObserver(self.emit)
	def stop(self):
		if self.factory.production:
			log.removeObserver(self.emit)
	def emit(self, eventDict):
		edm = eventDict['message']
		if not edm:
			if eventDict['isError'] and eventDict.has_key('failure'):
				failure = eventDict['failure']
				if not failure.check(SSL.Error):
					send_exception(failure)

Thanks.



From glyph at divmod.com  Thu Jul  7 08:42:12 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 7 Jul 2005 10:42:12 -0400
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
In-Reply-To: <20050707142313.GD8436@g5.random>
Message-ID: <20050707144212.26278.317575382.divmod.quotient.7154@ohm>



On Thu, 7 Jul 2005 16:23:13 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>On Thu, Jul 07, 2005 at 08:48:59AM -0400, glyph at divmod.com wrote:
>> It seems like you might want to filter more than just OpenSSL.SSL.Error ;).
>
>very likely ;), but I guess I can wait until some harmless annoyance
>trigger like in this case.
>
>The number of emails the server sends me has a maximum of 10, to avoid
>getting the same exception too many times (and the max number of sms is
>1). So even something goes wrong and I'm on vacation I don't risk to
>fill the inbox ;)

Rather than a simple counter, why not hash tracebacks so they are not sent more than once?  For example:

from twisted.python.failure import Failure
import sha

def a(): b()
def b(): c()
def c(): raise RuntimeError()

def fail():
    try:
        a()
    except:
        return Failure()

def fhash(f):
    return sha.new(
        f.getTraceback(elideFrameworkCode=1, detail='brief')).digest()

f1 = fail()
f2 = fail()

print fhash(f1) == fhash(f2)



From exarkun at divmod.com  Thu Jul  7 09:06:51 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 7 Jul 2005 11:06:51 -0400
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
In-Reply-To: <20050707144212.26278.317575382.divmod.quotient.7154@ohm>
Message-ID: <20050707150651.26278.1975198363.divmod.quotient.7165@ohm>

On Thu, 7 Jul 2005 10:42:12 -0400, glyph at divmod.com wrote:
>
>
>On Thu, 7 Jul 2005 16:23:13 +0200, Andrea Arcangeli <andrea at cpushare.com> 
>wrote:
>>On Thu, Jul 07, 2005 at 08:48:59AM -0400, glyph at divmod.com wrote:
>>>It seems like you might want to filter more than just OpenSSL.SSL.Error 
>>>;).
>>
>>very likely ;), but I guess I can wait until some harmless annoyance
>>trigger like in this case.
>>
>>The number of emails the server sends me has a maximum of 10, to avoid
>>getting the same exception too many times (and the max number of sms is
>>1). So even something goes wrong and I'm on vacation I don't risk to
>>fill the inbox ;)
>
>Rather than a simple counter, why not hash tracebacks so they are not sent 
>more than once?  For example:

This tends to work poorly for most tracebacks.  As soon as you have one that contains an object with a default repr, the ID section makes each hash different.

When I did this, I settled on hashing just the qual of the exception class and the brief string (failure.getErrorMessage()) version of it.  This has a similar problem, but seems to work ok in practice.

Jp



From tom.cocagne at gmail.com  Thu Jul  7 11:48:57 2005
From: tom.cocagne at gmail.com (Tom Cocagne)
Date: Thu, 7 Jul 2005 13:48:57 -0400
Subject: [Twisted-Python] Twisted communication with embedded C thread
Message-ID: <198edda9050707104832cd69f9@mail.gmail.com>

   Greetings all,

    I was wondering if anyone has suggestions for a good way to go
about setting up a message-passing communication channel between one
or more C threads and a single thread dedicated to running
Python/Twisted. I already have functional Python bindings accessing
the contents of the messages (basically C structures) but need some
way to exchange the messages between the C threads and the Python
thread.

    All I really need is a means by which to inform Twisted's reactor
that a C thread has sent a message.  My original plan was to use a
pair of pipes (via os.pipe()) to send pointers back and forth but it
didn't seem to work on Windows . I'm pretty sure this will work fine
for posix systems but it definitely didn't work on my first attempt
with Windows (though the problem may have been due to my library
configuration).

    I would imagine that something along these lines has been done
before. Does anyone know of an existing approach or have suggestions
for a better solution?

    Extra Details:
      I'm using Python 2.4.1, Twisted 2.0, and GLib 2.6

    Cheers,

    Tom



From itamar at itamarst.org  Thu Jul  7 12:02:12 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 07 Jul 2005 14:02:12 -0400
Subject: [Twisted-Python] Twisted communication with embedded C thread
In-Reply-To: <198edda9050707104832cd69f9@mail.gmail.com>
References: <198edda9050707104832cd69f9@mail.gmail.com>
Message-ID: <1120759332.8139.44.camel@localhost.localdomain>

On Thu, 2005-07-07 at 13:48 -0400, Tom Cocagne wrote:

>     I was wondering if anyone has suggestions for a good way to go
> about setting up a message-passing communication channel between one
> or more C threads and a single thread dedicated to running
> Python/Twisted. I already have functional Python bindings accessing
> the contents of the messages (basically C structures) but need some
> way to exchange the messages between the C threads and the Python
> thread.

Any reason you're using threads? You can run Twisted directly on the
glib event loop, so your whole program could run on the same loop.

In any case, Switching data from Twisted to C is just like passing data
from any Python program to C code: call a C extension function from
Python that calls into C code, and for reverse call a Python function
from C code. Thread safety is mostly orthogonal, so you can probably use
the standard Twisted reactor.callFromThread to have code run in the
Twisted thread.




From bob at redivi.com  Thu Jul  7 12:18:12 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 7 Jul 2005 08:18:12 -1000
Subject: [Twisted-Python] Twisted communication with embedded C thread
In-Reply-To: <198edda9050707104832cd69f9@mail.gmail.com>
References: <198edda9050707104832cd69f9@mail.gmail.com>
Message-ID: <3FCABFF0-42F9-4F44-838A-8426FDF007B6@redivi.com>


On Jul 7, 2005, at 7:48 AM, Tom Cocagne wrote:

>     I was wondering if anyone has suggestions for a good way to go
> about setting up a message-passing communication channel between one
> or more C threads and a single thread dedicated to running
> Python/Twisted. I already have functional Python bindings accessing
> the contents of the messages (basically C structures) but need some
> way to exchange the messages between the C threads and the Python
> thread.
>
>     All I really need is a means by which to inform Twisted's reactor
> that a C thread has sent a message.  My original plan was to use a
> pair of pipes (via os.pipe()) to send pointers back and forth but it
> didn't seem to work on Windows . I'm pretty sure this will work fine
> for posix systems but it definitely didn't work on my first attempt
> with Windows (though the problem may have been due to my library
> configuration).
>
>     I would imagine that something along these lines has been done
> before. Does anyone know of an existing approach or have suggestions
> for a better solution?

Acquire the GIL, call reactor.callFromThread, release the GIL.

-bob




From ww at groovy.net  Thu Jul  7 12:19:50 2005
From: ww at groovy.net (William Waites)
Date: Thu, 7 Jul 2005 14:19:50 -0400
Subject: [Twisted-Python] Twisted communication with embedded C thread
In-Reply-To: <198edda9050707104832cd69f9@mail.gmail.com>
References: <198edda9050707104832cd69f9@mail.gmail.com>
Message-ID: <20050707181950.GK1197@groovy.net>

On Thu, Jul 07, 2005 at 01:48:57PM -0400, Tom Cocagne wrote:
> 
>     All I really need is a means by which to inform Twisted's reactor
> that a C thread has sent a message.  My original plan was to use a
> pair of pipes (via os.pipe()) to send pointers back and forth but it
> didn't seem to work on Windows . I'm pretty sure this will work fine
> for posix systems but it definitely didn't work on my first attempt
> with Windows (though the problem may have been due to my library
> configuration).

#define MY_MODULE "foo.bar"
#define MY_FUNCTION "handle_message"

void send_message_to_python(message_t *message)
{
      PyObject *module_name, *module, *dict, *func, *args, *pymessage;

      module_name = PyString_FromString(MY_MODULE);
      module = PyImport_Import(module_name);
      dict = PyModule_GetDict(module)
      func = PyDict_GetItemString(MY_FUNCTION);

      args = PyTuple_New(1)
      pymessage = MyPythonWrappedMessage_New(message);
      PyTuple_SetItem(args, 0, pymessage);

      PyObject_CallObject(func, args);
}

(with appropriate error checking, of course)

This has the effect of doing

      from foo.bar import handle_message
      handle_message(m)

I'm not at all sure what would happen on Windows. I suppose this would
work there too.

But you also need to run the reactor, I guess which might be easier or
harder depending on the behaviour of the C program. The simplest way
is just to start a C thread and do the equivalent of the above for

	from twisted.internet import reactor
	reactor.run()

-w



From ww at groovy.net  Thu Jul  7 12:24:48 2005
From: ww at groovy.net (William Waites)
Date: Thu, 7 Jul 2005 14:24:48 -0400
Subject: [Twisted-Python] Twisted communication with embedded C thread
In-Reply-To: <3FCABFF0-42F9-4F44-838A-8426FDF007B6@redivi.com>
References: <198edda9050707104832cd69f9@mail.gmail.com>
	<3FCABFF0-42F9-4F44-838A-8426FDF007B6@redivi.com>
Message-ID: <20050707182448.GL1197@groovy.net>

On Thu, Jul 07, 2005 at 08:18:12AM -1000, Bob Ippolito wrote:
> 
> Acquire the GIL, call reactor.callFromThread, release the GIL.

Yeah, that too...

-w



From therve at free.fr  Thu Jul  7 14:10:47 2005
From: therve at free.fr (Thomas HERVE)
Date: Thu, 07 Jul 2005 22:10:47 +0200
Subject: [Twisted-Python] File Transfer/BitTorrent
In-Reply-To: <20050707124404.26278.1921372994.divmod.quotient.7103@ohm>
References: <20050707124404.26278.1921372994.divmod.quotient.7103@ohm>
Message-ID: <20050707221047.cuayi4stvdsg8w80@itchy.wasabout.net>

{Sorry glyph, reply-to ignored by f***** mail client]

Quoting glyph at divmod.com:
>> 1) Is there some people interested in BitTorrent client/server with 
>> Twisted ?
>
> I'm sure lots of people would be interested in a bittorrent protocol 
> implementation for Twisted :).  I know of at least 2 aborted 
> attempts; I don't know if either ever produced any code.

I don't know if it's good news or not... I don't have time to make it 
alone from
scratch, so any piece of code would be welcome.

>> 2) If not, does a draft/standard exist of good file transfer protocol, that
>> could be done with Twisted ?
>
> Personally I'm writing a different file-transfer protocol which might 
> meet your requirements; it's called "sigma" and it's going to be 
> based on a lower-level peer-to-peer system called Q2Q.  Watch this 
> space: http://divmod.org/projects/q2q
> for more information in the next couple of days.

It seems really promising ! I really enjoyed your slides :). I had a 
quick look
at q2q code and it seems pretty evolved yet. I'll try further in the 
next days,
if you need help (tests ?) I'm your man.

-- 
Thomas






From tom.cocagne at gmail.com  Thu Jul  7 14:18:35 2005
From: tom.cocagne at gmail.com (Tom Cocagne)
Date: Thu, 7 Jul 2005 16:18:35 -0400
Subject: [Twisted-Python] Twisted communication with embedded C thread
In-Reply-To: <1120759332.8139.44.camel@localhost.localdomain>
References: <198edda9050707104832cd69f9@mail.gmail.com>
	<1120759332.8139.44.camel@localhost.localdomain>
Message-ID: <198edda90507071318e93aaa7@mail.gmail.com>

    Thanks for the quick response guys. 

    A bit more of a description of what I'm working on may help.
Basically, I'm working on building a coordination library for use in
programs taking part in a distributed simulation. The simulations
themselves are written primarily in C++, run on a bunch of different
platforms, and are often optomized to use the specific hardware
they're running on top of (C-threads locked to specific CPUs, arcane
compiler flags, the whole shebang). The Python/Twisted side handles
all the high-level coordination stuff while the C++ code focuses on
numerics.

    As the library is supposed to be as generic as possible, I can't
make too many assumptions about how threading will be handled in any
particular application. So to keep things simple I'm creating a single
thread that is dedicated to running the Python interpreter and
allowing only that thread to touch the interpreter.

    I looked into the code for reactor.callFromThread that y'all
mentioned and it looks like the implementation for it exactly answers
the question I've been trying to ask. On posix systems the reactor's
'waker' is implemented as a pair of pipes and on Win32 systems it's
implemented as a pair of sockets. So it appears that my original
approach will work except that on Win32 systems I'll just have to use
a socket rather than a pipe.

    Thanks for the help,

    Tom

    BTW Itamar, I took a look at the SmartFrog/Coil documentation you
sent out yesterday and it looks very promising. Do you have any sort
of roadmap/timeline for Coil?

On 7/7/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> On Thu, 2005-07-07 at 13:48 -0400, Tom Cocagne wrote:
> 
> >     I was wondering if anyone has suggestions for a good way to go
> > about setting up a message-passing communication channel between one
> > or more C threads and a single thread dedicated to running
> > Python/Twisted. I already have functional Python bindings accessing
> > the contents of the messages (basically C structures) but need some
> > way to exchange the messages between the C threads and the Python
> > thread.
> 
> Any reason you're using threads? You can run Twisted directly on the
> glib event loop, so your whole program could run on the same loop.
> 
> In any case, Switching data from Twisted to C is just like passing data
> from any Python program to C code: call a C extension function from
> Python that calls into C code, and for reverse call a Python function
> from C code. Thread safety is mostly orthogonal, so you can probably use
> the standard Twisted reactor.callFromThread to have code run in the
> Twisted thread.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From andrea at cpushare.com  Thu Jul  7 21:13:27 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 8 Jul 2005 05:13:27 +0200
Subject: [Twisted-Python] [cpushare@cpushare.com: CPUShare Exception]
In-Reply-To: <20050707150651.26278.1975198363.divmod.quotient.7165@ohm>
References: <20050707144212.26278.317575382.divmod.quotient.7154@ohm>
	<20050707150651.26278.1975198363.divmod.quotient.7165@ohm>
Message-ID: <20050708031327.GT8436@g5.random>

On Thu, Jul 07, 2005 at 11:06:51AM -0400, Jp Calderone wrote:
> When I did this, I settled on hashing just the qual of the exception class 

I guess the qual would be failure.value.__class__.__module__ +
failure.value.__class__.__name__ or did I misunderstood?

Isn't it simpler to hash on failure.value.__class__ instead of the qual?

> and the brief string (failure.getErrorMessage()) version of it.  This has a 

That's neat too, the only disavantage compared to glyph's approach is
that the stack trace could be different but the exception the same,
stuff like AttributeError is quite common. gliph's example code wouldn't
risk to lose different stack traces.

The counter is good enough for now but I'll probably stack it on top of
glyph's appraoch in the future.

Thanks for the interesting hints!



From andy at thecablelounge.com  Fri Jul  8 00:46:03 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 08 Jul 2005 16:46:03 +1000
Subject: [Twisted-Python] Trouble with example imap client on unread messages
Message-ID: <42CE212B.4070901@thecablelounge.com>

I'm having trouble running Twisted/doc/mail/examples/imap4client.py on 
imap folders which have unread messages.  When the client issues:

proto.fetchSpecific('1:*',
	headerType='HEADER.FIELDS',
	headerArgs=['SUBJECT']
)

My server is returning:

  * 243 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {47}
  Subject: DELIVERY REPORTS ABOUT YOUR E-MAIL

  )
  * 244 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {42}
  Subject: AW: [syslinux] bug(?) in 2.11

  )
  * 244 FETCH (FLAGS (\Seen))

243 is a previously read message, 244 is an unread message.

The callback for the above fetchSpecific call is receiving:

{ 243 : [['BODY', ['HEADER.FIELDS', ['SUBJECT']], 'Subject: DELIVERY 
REPORTS ABOUT YOUR E-MAIL\r\n\r\n']], 244 : [['FLAGS', ['\\Seen']]] }

ie, I'm not getting the subject for unread messages.

Just wondering if this is a problem at twisted's end (is it incorrectly 
reducing the server response for 244 to [['FLAGS', ['\\Seen']]]?), my 
imap server (is it incorrect that my server is including the extra * 244 
FETCH (FLAGS (\Seen)) line ?  I'm using BincIMAP v1.2.12) or me :) (am I 
running something wrong here?)

cheers,
Andy.



From therve at free.fr  Fri Jul  8 02:36:32 2005
From: therve at free.fr (Thomas HERVE)
Date: Fri, 08 Jul 2005 10:36:32 +0200
Subject: [Twisted-Python] Trouble with example imap client on unread
	messages
In-Reply-To: <42CE212B.4070901@thecablelounge.com>
References: <42CE212B.4070901@thecablelounge.com>
Message-ID: <20050708103632.fketq9hm9u88o44o@itchy.wasabout.net>

Quoting Andy Gayton <andy at thecablelounge.com>:

> I'm having trouble running Twisted/doc/mail/examples/imap4client.py 
> on imap folders which have unread messages.  When the client issues:
>
> proto.fetchSpecific('1:*',
> 	headerType='HEADER.FIELDS',
> 	headerArgs=['SUBJECT']
> )
>
> My server is returning:
>
>  * 243 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {47}
>  Subject: DELIVERY REPORTS ABOUT YOUR E-MAIL
>
>  )
>  * 244 FETCH (BODY[HEADER.FIELDS ("SUBJECT")] {42}
>  Subject: AW: [syslinux] bug(?) in 2.11
>
>  )
>  * 244 FETCH (FLAGS (\Seen))

The problem I see is here : why does the server had this line ? It 
doesn't seem
to be an answer, but more the consequence of the fetch (which mark messages as
seen). This message should appeared *after* fetch called... Maybe Bincimap is
too fast :).

You could try this instead (which don't mark message seen) :

proto.fetchSpecific('1:*',
	headerType='HEADER.FIELDS',
	headerArgs=['SUBJECT'],
        peek=True
)

> 243 is a previously read message, 244 is an unread message.
>
> The callback for the above fetchSpecific call is receiving:
>
> { 243 : [['BODY', ['HEADER.FIELDS', ['SUBJECT']], 'Subject: DELIVERY 
> REPORTS ABOUT YOUR E-MAIL\r\n\r\n']], 244 : [['FLAGS', ['\\Seen']]] }
>
> ie, I'm not getting the subject for unread messages.

Well actually it's logical, because Twisted parses result in a dictionnary so
you have :
res[243] = < subject >, then res[244] = < subject >, but res[244] = < flags >
which overrides previous value.

> Just wondering if this is a problem at twisted's end (is it 
> incorrectly reducing the server response for 244 to [['FLAGS', 
> ['\\Seen']]]?), my imap server (is it incorrect that my server is 
> including the extra * 244 FETCH (FLAGS (\Seen)) line ?  I'm using 
> BincIMAP v1.2.12) or me :) (am I running something wrong here?)

I would say it's server fault, but if Twisted can cope with it it's better.

-- 
Thomas




From iko at cd.chalmers.se  Fri Jul  8 03:08:57 2005
From: iko at cd.chalmers.se (Anders Hammarquist)
Date: Fri, 08 Jul 2005 11:08:57 +0200
Subject: [Twisted-Python] Trouble with example imap client on unread
	messages 
In-Reply-To: <20050708103632.fketq9hm9u88o44o@itchy.wasabout.net> 
References: <42CE212B.4070901@thecablelounge.com>
	<20050708103632.fketq9hm9u88o44o@itchy.wasabout.net> 
Message-ID: <20050708090857.92969384C4@haddock.cd.chalmers.se>

In a message of Fri, 08 Jul 2005 10:36:32 +0200, Thomas HERVE writes:
>Quoting Andy Gayton <andy at thecablelounge.com>:
>>  * 244 FETCH (FLAGS (\Seen))
>
>The problem I see is here : why does the server had this line ?

The flags changed, and the server is telling you about it, as it
should.

>> The callback for the above fetchSpecific call is receiving:
>>
>> { 243 : [['BODY', ['HEADER.FIELDS', ['SUBJECT']], 'Subject: DELIVERY 
>> REPORTS ABOUT YOUR E-MAIL\r\n\r\n']], 244 : [['FLAGS', ['\\Seen']]] }
>>
>> ie, I'm not getting the subject for unread messages.
>
>Well actually it's logical, because Twisted parses result in a dictionnary so
>you have :
>res[243] = < subject >, then res[244] = < subject >, but res[244] = < flags >
>which overrides previous value.

This is bad, RFC-3501 says:
   A client MUST be prepared to accept any server response at all times.
   This includes server data that was not requested.  Server data SHOULD
   be recorded, so that the client can reference its recorded copy
   rather than sending a command to the server to request the data.  In
   the case of certain server data, the data MUST be recorded.

so I'd say twisted's IMAP-client is broken.

/Anders

-- 
 -- Of course I'm crazy, but that doesn't mean I'm wrong.
Anders Hammarquist                                  | iko at cd.chalmers.se
Physics student, Chalmers University of Technology, | Hem: +46 31 88 48 50
G|teborg, Sweden.           RADIO: SM6XMM and N2JGL | Mob: +46 707 27 86 87



From andy at thecablelounge.com  Fri Jul  8 05:51:19 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 08 Jul 2005 21:51:19 +1000
Subject: [Twisted-Python] Trouble with example imap client on
	unread	messages
In-Reply-To: <20050708103632.fketq9hm9u88o44o@itchy.wasabout.net>
References: <42CE212B.4070901@thecablelounge.com>
	<20050708103632.fketq9hm9u88o44o@itchy.wasabout.net>
Message-ID: <42CE68B7.6060300@thecablelounge.com>

> Quoting Andy Gayton <andy at thecablelounge.com>:
>> proto.fetchSpecific('1:*',
>>     headerType='HEADER.FIELDS',
>>     headerArgs=['SUBJECT']

Thomas HERVE wrote:
> The problem I see is here : why does the server had this line ? It 
> doesn't seem
> to be an answer, but more the consequence of the fetch (which mark 
> messages as
> seen). This message should appeared *after* fetch called... Maybe 
> Bincimap is
> too fast :).
> 
> You could try this instead (which don't mark message seen) :
> 
> proto.fetchSpecific('1:*',
>     headerType='HEADER.FIELDS',
>     headerArgs=['SUBJECT'],
>        peek=True
> )

Thanks Thomas, this workaround does work.  I'm sure there's going to be 
trouble down the track when I need my actions to change the state of the 
messages, but it at least confirms what you and Anders observed.

Anders wrote:
> This is bad, RFC-3501 says:
>    A client MUST be prepared to accept any server response at all times.
>    This includes server data that was not requested.  Server data SHOULD
>    be recorded, so that the client can reference its recorded copy
>    rather than sending a command to the server to request the data.  In
>    the case of certain server data, the data MUST be recorded.
> 
> so I'd say twisted's IMAP-client is broken.

I agree with Anders.  But man, what a bitch to handle :)

Actually this reminds me of a reply to an excellent intro to twisted 
clients thread which featured an imap client:

http://twistedmatrix.com/pipermail/twisted-python/2004-May/007781.html

Ideally I guess the message's subject should be passed to the callback, 
as expected, and a method call should be triggered for the change in the 
messages status.

I've raised a bug for it: http://twistedmatrix.com/bugs/issue1105

Hope this is ok ..

cheers,
Andy.



From luc.stepniewski at adelux.fr  Fri Jul  8 06:19:13 2005
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Fri, 8 Jul 2005 14:19:13 +0200
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
Message-ID: <200507081419.18207.luc.stepniewski@adelux.fr>

I've written a Twisted Windows Service which works perfectly with Twisted 1.3 
and Python 2.3. I've used the sandboxed ntsvc from moonfallen's svn.

I upgraded everything to Twisted 2.0.1 and Python 2.4.1 (even tried 
ActiveState's), and followed the information provided in moonfallen's 
README-service (that is, patch pywin32's boot_service.py).

It compiles correctly to a .exe, without any supplementary error and I can 
install it correctly as a service (using 'xxxxxx.exe -install'). But When I 
try to launch it (in the GUI Service), it dies immediately, putting the 
following message in the Windows Event Observer:

The instance's SvcRun() method failed
  File "win32serviceutil.pyc", line 742, in SvcRun
  File "ntsvc\runner.pyc", line 79, in SvcDoRun
  File "ntsvc\runner.pyc", line 48, in run
  File "twisted\application\app.pyc", line 31, in installReactor
  File "twisted\python\reflect.pyc", line 344, in namedModule
exceptions.ImportError: No module named default

I even cleaned my code to have just a .tac with 2 lines, and it does the same 
error. So I'm pretty sure it's not a problem in my code.

Has anyone managed to create and run a service with Python 2.4.1 & Twisted 
2.0.1? I'm using py2exe 0.5.4 and pywin32 204 both for python 2.4.

Thanks,
Luc
-- 
Luc Stepniewski <luc.stepniewski at adelux.fr>
Adelux - Securite, Linux  Public key: <http://lstep.free.fr/pubkey.txt>
Key BC0E3C2A fingerprint = A4FA466C68D27E46B427  07D083ED6340BC0E3C2A
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050708/369ff96b/attachment.sig>

From corydodt at twistedmatrix.com  Fri Jul  8 08:53:12 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Fri, 08 Jul 2005 07:53:12 -0700
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
In-Reply-To: <200507081419.18207.luc.stepniewski@adelux.fr>
References: <200507081419.18207.luc.stepniewski@adelux.fr>
Message-ID: <42CE9358.4090107@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Luc, it's very common to get these near code that uses namedAny or named* from
reflect.  Using these calls guarantees that py2exe's module finding algorithm
won't know to bundle the named module.

You just need an "includes" line in your setup for twisted.internet.default.

C


Luc Stepniewski wrote:
| I've written a Twisted Windows Service which works perfectly with Twisted 1.3
| and Python 2.3. I've used the sandboxed ntsvc from moonfallen's svn.
|
| I upgraded everything to Twisted 2.0.1 and Python 2.4.1 (even tried
| ActiveState's), and followed the information provided in moonfallen's
| README-service (that is, patch pywin32's boot_service.py).
|
| It compiles correctly to a .exe, without any supplementary error and I can
| install it correctly as a service (using 'xxxxxx.exe -install'). But When I
| try to launch it (in the GUI Service), it dies immediately, putting the
| following message in the Windows Event Observer:
|
| The instance's SvcRun() method failed
|   File "win32serviceutil.pyc", line 742, in SvcRun
|   File "ntsvc\runner.pyc", line 79, in SvcDoRun
|   File "ntsvc\runner.pyc", line 48, in run
|   File "twisted\application\app.pyc", line 31, in installReactor
|   File "twisted\python\reflect.pyc", line 344, in namedModule
| exceptions.ImportError: No module named default
|
| I even cleaned my code to have just a .tac with 2 lines, and it does the same
| error. So I'm pretty sure it's not a problem in my code.
|
| Has anyone managed to create and run a service with Python 2.4.1 & Twisted
| 2.0.1? I'm using py2exe 0.5.4 and pywin32 204 both for python 2.4.
|
| Thanks,
| Luc
|
|
| ------------------------------------------------------------------------
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCzpNY3A5SrXAiHQcRAqOpAKCGCIxf7rKe0m8Nz9uBjZ5DNzZHZQCfdFd8
lE+0kILxAevmGi2k5FBu/ms=
=drPM
-----END PGP SIGNATURE-----



From natester at gmail.com  Fri Jul  8 09:12:35 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Fri, 8 Jul 2005 09:12:35 -0600
Subject: [Twisted-Python] File Transfer/BitTorrent
In-Reply-To: <20050707221047.cuayi4stvdsg8w80@itchy.wasabout.net>
References: <20050707124404.26278.1921372994.divmod.quotient.7103@ohm>
	<20050707221047.cuayi4stvdsg8w80@itchy.wasabout.net>
Message-ID: <4adac7a3050708081240de7455@mail.gmail.com>

I'm interested in sending data over the internet too--mostly server to
server behind NATs.  Jabber looked like a good solution for it's IM
capabilities and security, but maybe q2q would be good too.

What's a QSP?

What presence protocol will you implement?

What keeps Frank from impersonating Bob?

Is it like an encrpyted proxy for [protocol]?  

Is it centralized or not?

-Nate 

On 7/7/05, Thomas HERVE <therve at free.fr> wrote:
> {Sorry glyph, reply-to ignored by f***** mail client]
> 
> Quoting glyph at divmod.com:
> >> 1) Is there some people interested in BitTorrent client/server with
> >> Twisted ?
> >
> > I'm sure lots of people would be interested in a bittorrent protocol
> > implementation for Twisted :).  I know of at least 2 aborted
> > attempts; I don't know if either ever produced any code.
> 
> I don't know if it's good news or not... I don't have time to make it
> alone from
> scratch, so any piece of code would be welcome.
> 
> >> 2) If not, does a draft/standard exist of good file transfer protocol, that
> >> could be done with Twisted ?
> >
> > Personally I'm writing a different file-transfer protocol which might
> > meet your requirements; it's called "sigma" and it's going to be
> > based on a lower-level peer-to-peer system called Q2Q.  Watch this
> > space: http://divmod.org/projects/q2q
> > for more information in the next couple of days.
> 
> It seems really promising ! I really enjoyed your slides :). I had a
> quick look
> at q2q code and it seems pretty evolved yet. I'll try further in the
> next days,
> if you need help (tests ?) I'm your man.
> 
> --
> Thomas
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From luc.stepniewski at adelux.fr  Fri Jul  8 10:59:36 2005
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Fri, 8 Jul 2005 18:59:36 +0200
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
In-Reply-To: <42CE9358.4090107@twistedmatrix.com>
References: <200507081419.18207.luc.stepniewski@adelux.fr>
	<42CE9358.4090107@twistedmatrix.com>
Message-ID: <200507081859.37248.luc.stepniewski@adelux.fr>

On Friday 08 July 2005 16:53, Cory Dodt wrote:
> Luc, it's very common to get these near code that uses namedAny or named*
> from reflect.  Using these calls guarantees that py2exe's module finding
> algorithm won't know to bundle the named module.
>
> You just need an "includes" line in your setup for
> twisted.internet.default.

Wow, you're right! It works. It's strange I didn't need this "includes" with 
Twisted 1.3. Anyway. I'll add this to the HOWTO, as soon as I can.

Thanks,
Luc
-- 
Luc Stepniewski <luc.stepniewski at adelux.fr>
Adelux - Securite, Linux  Public key: <http://lstep.free.fr/pubkey.txt>
Key BC0E3C2A fingerprint = A4FA466C68D27E46B427  07D083ED6340BC0E3C2A



From exarkun at divmod.com  Fri Jul  8 11:30:03 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 8 Jul 2005 13:30:03 -0400
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
In-Reply-To: <200507081859.37248.luc.stepniewski@adelux.fr>
Message-ID: <20050708173003.26278.777804699.divmod.quotient.7796@ohm>

On Fri, 8 Jul 2005 18:59:36 +0200, Luc Stepniewski <luc.stepniewski at adelux.fr> wrote:
>On Friday 08 July 2005 16:53, Cory Dodt wrote:
>> Luc, it's very common to get these near code that uses namedAny or named*
>> from reflect.  Using these calls guarantees that py2exe's module finding
>> algorithm won't know to bundle the named module.
>>
>> You just need an "includes" line in your setup for
>> twisted.internet.default.
>
>Wow, you're right! It works. It's strange I didn't need this "includes" with
>Twisted 1.3. Anyway. I'll add this to the HOWTO, as soon as I can.

twisted.internet.default was never really public anyway, and now it's deprecated.  The ideal solution would be to stop using it altogether. What's it being imported for?

Jp



From corydodt at twistedmatrix.com  Fri Jul  8 11:51:59 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Fri, 08 Jul 2005 10:51:59 -0700
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
In-Reply-To: <20050708173003.26278.777804699.divmod.quotient.7796@ohm>
References: <20050708173003.26278.777804699.divmod.quotient.7796@ohm>
Message-ID: <42CEBD3F.6070309@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

It's not being imported by user code, it's being imported by t.service.app.
Py2exe doesn't know that, so it loses it.

Luc, probably ntsvc should deal with this automatically. Let me think about it
before you put it in the HOWTO.

C


Jp Calderone wrote:
| On Fri, 8 Jul 2005 18:59:36 +0200, Luc Stepniewski
| <luc.stepniewski at adelux.fr> wrote:
|
|> On Friday 08 July 2005 16:53, Cory Dodt wrote:
|>
|>> Luc, it's very common to get these near code that uses namedAny or
|>> named*
|>> from reflect.  Using these calls guarantees that py2exe's module finding
|>> algorithm won't know to bundle the named module.
|>>
|>> You just need an "includes" line in your setup for
|>> twisted.internet.default.
|>
|>
|> Wow, you're right! It works. It's strange I didn't need this
|> "includes" with
|> Twisted 1.3. Anyway. I'll add this to the HOWTO, as soon as I can.
|
|
| twisted.internet.default was never really public anyway, and now it's
| deprecated.  The ideal solution would be to stop using it altogether.
| What's it being imported for?
|
| Jp
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCzr0/3A5SrXAiHQcRAop4AKCdAcMcQpEvFTrZbtsXIkoQoVQ5YwCePO+n
OSxJhzReqZbBDrOmSCynFDw=
=yRFv
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Fri Jul  8 19:29:41 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 8 Jul 2005 21:29:41 -0400
Subject: [Twisted-Python] Race condition in callInThread()
In-Reply-To: 0
Message-ID: <20050709012941.26278.2130080586.divmod.quotient.7981@ohm>

James kindly added a failing test for the nasty behavior of twisted.python.threadpool.ThreadPool._startSomeWorkers().  It seems this will be difficult to fix completely without making API-incompatible changes all the way up to reactor.callInThread, though.

Fixing it for *most* cases is straightforward enough:

Index: twisted/python/threadpool.py
===================================================================
--- twisted/python/threadpool.py        (revision 14112)
+++ twisted/python/threadpool.py        (working copy)
@@ -99,10 +99,10 @@
         return state
     
     def _startSomeWorkers(self):
-        if self.workers >= self.max:
-            return
-        # FIXME: Wait for any waiters to eat of the queue.
-        while self.workers < self.max and self.q.qsize() > 0:
+        while (
+            self.workers < self.max and # Don't create too many
+            len(self.waiters) < self.q.qsize() # but create enough
+            ):
             self.startAWorker()
 
     def dispatch(self, owner, func, *args, **kw):

But this isn't a complete fix.  Annoyingly, the area it doesn't cover very well is exactly what the unit test covers most aggressively.  The problem is the implementation of _worker: it calls back into user code before adjusting the ThreadPool's state to indicate that it is no longer busy.  Since the concept of result callback/errbacks isn't present in _worker, fixing this would involve expanding the API to pass callback/errback functions all the way down so that _worker can invoke them at the right time.

At least, as far as I can tell.

Another option is to loosen up the test, so that it passes even if the ThreadPool creates one extra thread.  Unfortunately, even though the unit test will only ever create one extra thread, user code could create as many as the ThreadPool allows to exist total, by just adding multiple work units to the queue in a single callback on the Deferred returned by deferToThread.

Thoughts?

Jp



From gustavo at grahal.net  Fri Jul  8 22:28:08 2005
From: gustavo at grahal.net (Gustavo Rahal)
Date: Sat, 09 Jul 2005 01:28:08 -0300
Subject: [Twisted-Python] conch example of sftp
Message-ID: <danjqf$qhv$1@sea.gmane.org>

Hi

Does anyone has or know where I can find sftp code examples? AFAIK conch
is able of doing files transfers over a ssh connection.

I know it may appear that I'm laisy but I don't have much experience
with twisted nor conch and the documentation is not that good.


Thanks
Gustavo




From screwtape at froup.com  Sat Jul  9 01:08:15 2005
From: screwtape at froup.com (Tim Allen)
Date: Sat, 9 Jul 2005 17:08:15 +1000
Subject: [Twisted-Python] twisted.names and multicast DNS
Message-ID: <0516cbe8d34da0d0de64f7c7a772cfdf@froup.com>

So after two years of leaving it alone, I decided to have another look 
at the multicast DNS module I was writing for Twisted, and lo and 
behold I discover a serious design flaw in my response cache. Here's 
the basic situation I'm dealing with:

Suppose I have two hosts on my network, called ford and arthur. I'm 
sitting at arthur, and I'm looking for SSH servers advertised via 
DNS-based Service Discovery and Multicast DNS. At the present moment, 
ford is switched off.

I turn on ford, and when the SSH server starts up, ford broadcasts an 
announcement DNS datagram that says, "In the zone '_ssh._tcp.local', 
there is a PTR record with the data 'Ford._ssh._tcp.local'. This 
information expires in 7200 seconds." (it mentions the class too, of 
course, but the class doesn't affect the discussion below so we'll 
ignore it from here on).

arthur receives the announcement, records the transmission time and the 
TTL, and caches the PTR record. Thereafter, any program on arthur that 
requests PTR records in '_ssh._tcp.local' will be given the PTR record 
about 'Ford._ssh._tcp.local'.

Now I turn off Ford, and when the SSH server shuts down, ford 
broadcasts a goodbye datagram that says, "In the zone 
'_ssh._tcp.local', there is a PTR record with the data 
'Ford._ssh._tcp.local'. This information expires in 0 seconds." - that 
is to say, exactly the same as the previous announcement but with a TTL 
of 0. The cache on arthur needs to compare this new record to its 
cache, see that it matches the definition of an existing record, and 
update the TTL of the existing record so that it will expire 
immediately.

I'm trying to implement the record cache on arthur at the moment. It 
needs to be queried by (name, type, class) tuples, so I use such a 
tuple as the key of a dictionary. Since there can be multiple records 
available for a particular (name, type, class), the value associated 
with this key is a list of resource records. Because the 
t.names.dns.DNSDatagramProtocol gives me instances of the various 
t.names.dns.Record_* classes, I figured that those instances would be a 
good representation of the resource records I need to store.

In psuedo-python, then, the ideal data structure would look like this:

cache = {
	('_ssh._tcp.local', PTR, IN): [
			(<Record_PTR name=Ford._ssh._tcp.local>, 7200),
	]
}

...then, when I get a new record from the network, I can look up its 
(name, type, class) tuple and get the list of records. Then I compare 
the new record to each of the records in the list: if it matches a 
record I update the TTL, otherwise I add the record to the list.

The problem is this: the Record_PTR class (just like all the other 
Record_* classes) in t.names.dns stores the TTL as an instance 
variable! Therefore, when I have an existing record and an updated 
record, they never match, and I wind up with two identical records in 
my data structure that differ only by TTL.

As far as I can tell, I have three options from here:

1. Write my own versions of all the Record_* classes that don't 
maintain a TTL value, and translate backwards and forwards whenever I 
need to talk to Twisted's DNS layer. I'd need to update this code 
whenever a new DNS record type was added.
2. Write a comparison function for comparing resource records that 
compares instance variables that aren't named 'ttl'. This would 
probably need to be updated less frequently, but is horribly hacky.
3. Complain on the twisted-list and hope that somebody has a better 
suggestion, or changes the code to be more mDNS-friendly.

As you can see, I'm trying Option 3 at the moment, but I'm open to 
suggestions. :)




From corydodt at twistedmatrix.com  Sat Jul  9 11:56:01 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Sat, 09 Jul 2005 10:56:01 -0700
Subject: [Twisted-Python] Could not create and run a Windows Service with
	Twisted 2.0.1 & Python 2.4.1
Message-ID: <42D00FB1.7080301@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Fixed in trunk.  I recommend you delete ntsvc.cfg and your dist
directory, then rerun setup.py twistedservice with svn trunk code.  Jp
was correct.

C



> It's not being imported by user code, it's being imported by t.service.app.
> Py2exe doesn't know that, so it loses it.
> 
> Luc, probably ntsvc should deal with this automatically. Let me think
> about it
> before you put it in the HOWTO.
> 
> C
> 
> 
> Jp Calderone wrote:
> | On Fri, 8 Jul 2005 18:59:36 +0200, Luc Stepniewski
> | <luc.stepniewski at adelux.fr> wrote:
> |
> |> On Friday 08 July 2005 16:53, Cory Dodt wrote:
> |>
> |>> Luc, it's very common to get these near code that uses namedAny or
> |>> named*
> |>> from reflect.  Using these calls guarantees that py2exe's module finding
> |>> algorithm won't know to bundle the named module.
> |>>
> |>> You just need an "includes" line in your setup for
> |>> twisted.internet.default.
> |>
> |>
> |> Wow, you're right! It works. It's strange I didn't need this
> |> "includes" with
> |> Twisted 1.3. Anyway. I'll add this to the HOWTO, as soon as I can.
> |
> |
> | twisted.internet.default was never really public anyway, and now it's
> | deprecated.  The ideal solution would be to stop using it altogether.
> | What's it being imported for?
> |
> | Jp
> |
> | _______________________________________________
> | Twisted-Python mailing list
> | Twisted-Python at twistedmatrix.com
> | http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFC0A+p3A5SrXAiHQcRAmo9AJ47RcWy5VZcAlBfcVEsz7bHOkbTNQCeO+nh
0n/Sl+TenS4gbyPSG8+G+Xw=
=5hWe
-----END PGP SIGNATURE-----



From mdmoin939 at yahoo.com  Sat Jul  9 12:48:57 2005
From: mdmoin939 at yahoo.com (Md Moin)
Date: Sat, 9 Jul 2005 11:48:57 -0700 (PDT)
Subject: [Twisted-Python] XML RPC
Message-ID: <20050709184857.8402.qmail@web40901.mail.yahoo.com>

I would like to setup a twisted XML RPC server with
authentication functionality based on username and
password.Is there any simple example available for XML
RPC server/client that uses username/password
authentication? I am a newbie thus if any of you guys
can post a simple example of xml rpc server and client
that uses authentication that will help me a lot. 
Thanx



		
____________________________________________________
Sell on Yahoo! Auctions  no fees. Bid on great items.  
http://auctions.yahoo.com/



From jarrod.roberson at gmail.com  Sat Jul  9 22:38:18 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Sun, 10 Jul 2005 00:38:18 -0400
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <0516cbe8d34da0d0de64f7c7a772cfdf@froup.com>
References: <0516cbe8d34da0d0de64f7c7a772cfdf@froup.com>
Message-ID: <2389d47305070921383f2ca9ac@mail.gmail.com>

On 7/9/05, Tim Allen <screwtape at froup.com> wrote

you forgot option number 4, which is what we ended up doing.

Put a python binding in over the Apple code and use it integrated into 
Twisted.
Plus you get to use it outside Twisted as well :-)

-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050710/40ddb5b5/attachment.html>

From bgranger at scu.edu  Sun Jul 10 00:45:39 2005
From: bgranger at scu.edu (Brian Granger)
Date: Sat, 09 Jul 2005 23:45:39 -0700
Subject: [Twisted-Python] twisted.names and multicast DNS
Message-ID: <s2d061b0.031@gwcl-21.scu.edu>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: </pipermail/twisted-python/attachments/20050709/1ca0b2e7/attachment.ksh>

From exarkun at divmod.com  Sun Jul 10 12:16:34 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 10 Jul 2005 14:16:34 -0400
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <0516cbe8d34da0d0de64f7c7a772cfdf@froup.com>
Message-ID: <20050710181634.26278.1403125390.divmod.quotient.9004@ohm>

On Sat, 9 Jul 2005 17:08:15 +1000, Tim Allen <screwtape at froup.com> wrote:
>So after two years of leaving it alone, I decided to have another look at 
>the multicast DNS module I was writing for Twisted, and lo and behold I 
>discover a serious design flaw in my response cache. Here's the basic 
>situation I'm dealing with:
>
> [snip]
>
>The problem is this: the Record_PTR class (just like all the other Record_* 
>classes) in t.names.dns stores the TTL as an instance variable! Therefore, 
>when I have an existing record and an updated record, they never match, and 
>I wind up with two identical records in my data structure that differ only 
>by TTL.
>
>As far as I can tell, I have three options from here:
>
>1. Write my own versions of all the Record_* classes that don't maintain a 
>TTL value, and translate backwards and forwards whenever I need to talk to 
>Twisted's DNS layer. I'd need to update this code whenever a new DNS record 
>type was added.
>2. Write a comparison function for comparing resource records that compares 
>instance variables that aren't named 'ttl'. This would probably need to be 
>updated less frequently, but is horribly hacky.

What's hacky about this?  It seems like a simple, straightforward solution.  Record classes have comparison defined one way, you want to compare them another way.  Comparison can only be defined one way using the "==" operator, so clearly one of these requirements has to resort to using something other than the "==" operator.

I think it's even nicer than you suggest, since the attributes which should be compared are all declared on each class.  eg, Record_NS.compareAttributes == ('name', 'ttl').  You should be able to write a comparison function that looks at this attribute and simply omits ttl.

Hope this helps,

Jp



From mary-twisted at puzzling.org  Sun Jul 10 23:33:44 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 11 Jul 2005 15:33:44 +1000
Subject: [Twisted-Python] Reminder: Australian Twisted Sprint #2: 19th -
	21st August 2005, Sydney
Message-ID: <20050711053344.GQ9691@sourdust.home.puzzling.org>

Hey folks,

Still no final word on exactly where in Sydney this sprint will be held,
but it *will* be held and will be on these dates, so I'm posting again
to give people time to book flights before they get expensive.

I've made a grant application to Linux Australia to fund some of the
sprint, but this is not guarenteed to go through. Watch this thread for
details:
http://lists.linux.org.au/archives/linux-aus/2005-July/msg00216.html

We would very much appreciate people letting us know via the wiki if
they are definitely or maybe coming so that we have a good idea of
numbers when scouring for venues.

--- Announcement ---

Following the success of the Twisted sprint in Hobart in April, we're
having a second sprint.

Dates: Friday 19th - Sunday 21st August 2005

Location: Sydney (venue not yet known)

As with last time, there will be no attendence charge and sprinters will
be taking care of their own accommodation and transport. Once we have a
venue we'll have some suggestions.

We'll be working on code and documentation hopefully destined for the
Twisted Subversion repository. People not really familiar with Twisted
are welcome but will probably at least want to have the basics down by
the time of the sprint.

More details will be announced here, also see the wiki at
http://users.puzzling.org/users/mary/TwistedSprint/moin.cgi/FrontPage
People interested in coming should update
http://users.puzzling.org/users/mary/TwistedSprint/moin.cgi/SprintAttendees
and email me, so that we have an idea of numbers.

-Mary



From glyph at divmod.com  Mon Jul 11 01:52:35 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 11 Jul 2005 03:52:35 -0400
Subject: [Twisted-Python] Questions regarding serviceCollection
	and	Interfaces.
In-Reply-To: <200507061718.53389.iacovou@gmail.com>
References: <491db6c9050705051673b82535@mail.gmail.com>	<1120571429.8508.23.camel@localhost.localdomain>
	<200507061718.53389.iacovou@gmail.com>
Message-ID: <42D22543.7080101@divmod.com>

kgi wrote:

> If anyone has any information on either (1) getting a single postfix instance 
> to work with multiple relayhosts for multiple "identities", or (2) 
> configuring kmail to send directly to gmail over TLS, I'd love to hear how 
> you did it. I found lots of generic configuration info for kmail, but I 
> couldn't get kmail to manage it whatever I did.

No, but I do know of an email services company that provides a 
kmail-compatible IMAPS and SMTP/TLS implementation (using Twisted, even) ;-)

http://divmod.com/; contact me privately for a ticket.



From naewe.s at atlas.de  Mon Jul 11 05:46:21 2005
From: naewe.s at atlas.de (=?ISO-8859-15?Q?Stefan_N=E4we?=)
Date: Mon, 11 Jul 2005 13:46:21 +0200
Subject: [Twisted-Python] Receiving large packets with TCP
Message-ID: <42D25C0D.8010607@atlas.de>

Hi.
I'm using Twisted (2.0.1) for a TCP-based receiver.
That receiver receives different telegrams sent by another process.
Those telegrams are sent on different ports (i.e. one telegram type
is sent on one port). The sizes of the telegram vary from ~16 bytes
to ~8 kB.

Everything works perfectly. I've really never been *that*
productive.

BUT:
I'm having trouble receiving the whole contents of large telegrams.
For example one telegram is exactly 7452 bytes long but I only get
2920 bytes.
My twisted receiver uses the reactor to setup the different ports
to listen on and creates 'message handler' objects on connect.
Those message handler objects 'dissect' the received telegram and
print some of its contents to STDOUT.

Some parts of my code:

class MyReceiver(Protocol):

    def dataReceived(self, data):
        if __debug__: log.msg("Received %d bytes" % len(data))
        try:
            # here the message handler gets created
            m = self.factory.msg[self.port](data)
            log.msg(m)
        except KeyError:
            # can this really happen ??
            log.msg("Unhandled connection from port %d" % self.port)

    def connectionMade(self):
        addr = self.transport.getHost()
        self.proto = addr.type
        self.peer = addr.host
        self.port = addr.port
        log.msg("Connection from %s" % self.transport.getPeer())


My 'main' function simply does 'reactor.listenTCP(port, MyFactory)'

So what do I need to do to get the whole telegram 'in one shot' ?
Do I need to re-assemble the telegrams myself ?

(I hope this Information is enough...Tell me, if not.)

TIA

Stefan
-- 
----------------------------------------------------------------------
Stefan Naewe                                     ATLAS Elektronik GmbH
                                                         Dept.: NUS T4
phone: +49-(0)421-457-3969                Sebaldsbruecker Heerstr. 235
fax:   +49-(0)421-457-3913                                28305 Bremen




From radeex at gmail.com  Mon Jul 11 05:58:44 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 11 Jul 2005 21:58:44 +1000
Subject: [Twisted-Python] Receiving large packets with TCP
In-Reply-To: <42D25C0D.8010607@atlas.de>
References: <42D25C0D.8010607@atlas.de>
Message-ID: <60ed19d4050711045868b641cd@mail.gmail.com>

On 7/11/05, Stefan Näwe <naewe.s at atlas.de> wrote:
> I'm having trouble receiving the whole contents of large telegrams.
> For example one telegram is exactly 7452 bytes long but I only get
> 2920 bytes.

...

> Some parts of my code:
> 
> class MyReceiver(Protocol):
> 
>     def dataReceived(self, data):
>         if __debug__: log.msg("Received %d bytes" % len(data))


dataReceived will be called with arbitrarily-sized chunks of data. You
can never assume how much data will be given to you. If you're
expecting more, buffer it until you receive everything you need.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From naewe.s at atlas.de  Mon Jul 11 06:03:06 2005
From: naewe.s at atlas.de (=?ISO-8859-15?Q?Stefan_N=E4we?=)
Date: Mon, 11 Jul 2005 14:03:06 +0200
Subject: [Twisted-Python] Receiving large packets with TCP
In-Reply-To: <42D25C0D.8010607@atlas.de>
References: <42D25C0D.8010607@atlas.de>
Message-ID: <42D25FFA.2060307@atlas.de>

Näwe, Stefan schrieb:
> Hi.
> I'm using Twisted (2.0.1) for a TCP-based receiver.
> That receiver receives different telegrams sent by another process.
> Those telegrams are sent on different ports (i.e. one telegram type
> is sent on one port). The sizes of the telegram vary from ~16 bytes
> to ~8 kB.
> 
> Everything works perfectly. I've really never been *that*
> productive.
> 
> BUT:
> I'm having trouble receiving the whole contents of large telegrams.
> For example one telegram is exactly 7452 bytes long but I only get
> 2920 bytes.
> My twisted receiver uses the reactor to setup the different ports
> to listen on and creates 'message handler' objects on connect.
> Those message handler objects 'dissect' the received telegram and
> print some of its contents to STDOUT.
> 
> Some parts of my code:
> 
> class MyReceiver(Protocol):
> 
>     def dataReceived(self, data):
>         if __debug__: log.msg("Received %d bytes" % len(data))
>         try:
>             # here the message handler gets created
>             m = self.factory.msg[self.port](data)
>             log.msg(m)
>         except KeyError:
>             # can this really happen ??
>             log.msg("Unhandled connection from port %d" % self.port)
> 
>     def connectionMade(self):
>         addr = self.transport.getHost()
>         self.proto = addr.type
>         self.peer = addr.host
>         self.port = addr.port
>         log.msg("Connection from %s" % self.transport.getPeer())
> 
> 
> My 'main' function simply does 'reactor.listenTCP(port, MyFactory)'
> 
> So what do I need to do to get the whole telegram 'in one shot' ?
> Do I need to re-assemble the telegrams myself ?
> 
> (I hope this Information is enough...Tell me, if not.)

I forgot:

The telegram sender (non twisted) sits on a Win32 box.
The telegram receiver (twisted) on a Linux box.

Thanks

Stefan
-- 
----------------------------------------------------------------------
Stefan Naewe                                     ATLAS Elektronik GmbH
                                                         Dept.: NUS T4
phone: +49-(0)421-457-3969                Sebaldsbruecker Heerstr. 235
fax:   +49-(0)421-457-3913                                28305 Bremen




From dguaraglia at gmx.de  Mon Jul 11 06:19:47 2005
From: dguaraglia at gmx.de (David Guaraglia)
Date: Mon, 11 Jul 2005 09:19:47 -0300
Subject: [Twisted-Python] Receiving large packets with TCP
In-Reply-To: <42D25C0D.8010607@atlas.de>
References: <42D25C0D.8010607@atlas.de>
Message-ID: <42D263E3.2040201@gmx.de>

Hi Stefan.

As Christopher said, you never know how much data you'll receive so you 
must buffer the data until you have what you expect. If you know your 
packets are going to be _exactly_ 16kb long, then you just read until 
you have 16kb+ of data in a buffer, and process that. Then you save the 
rest for the next packet. One of the best ways to do that is using an 
string, or a queue. I have some example code in case you are interested,

David

Stefan Näwe wrote:

>Hi.
>I'm using Twisted (2.0.1) for a TCP-based receiver.
>That receiver receives different telegrams sent by another process.
>Those telegrams are sent on different ports (i.e. one telegram type
>is sent on one port). The sizes of the telegram vary from ~16 bytes
>to ~8 kB.
>
>Everything works perfectly. I've really never been *that*
>productive.
>
>BUT:
>I'm having trouble receiving the whole contents of large telegrams.
>For example one telegram is exactly 7452 bytes long but I only get
>2920 bytes.
>My twisted receiver uses the reactor to setup the different ports
>to listen on and creates 'message handler' objects on connect.
>Those message handler objects 'dissect' the received telegram and
>print some of its contents to STDOUT.
>
>Some parts of my code:
>
>class MyReceiver(Protocol):
>
>    def dataReceived(self, data):
>        if __debug__: log.msg("Received %d bytes" % len(data))
>        try:
>            # here the message handler gets created
>            m = self.factory.msg[self.port](data)
>            log.msg(m)
>        except KeyError:
>            # can this really happen ??
>            log.msg("Unhandled connection from port %d" % self.port)
>
>    def connectionMade(self):
>        addr = self.transport.getHost()
>        self.proto = addr.type
>        self.peer = addr.host
>        self.port = addr.port
>        log.msg("Connection from %s" % self.transport.getPeer())
>
>
>My 'main' function simply does 'reactor.listenTCP(port, MyFactory)'
>
>So what do I need to do to get the whole telegram 'in one shot' ?
>Do I need to re-assemble the telegrams myself ?
>
>(I hope this Information is enough...Tell me, if not.)
>
>TIA
>
>Stefan
>  
>




From naewe.s at atlas.de  Mon Jul 11 06:33:20 2005
From: naewe.s at atlas.de (=?ISO-8859-15?Q?Stefan_N=E4we?=)
Date: Mon, 11 Jul 2005 14:33:20 +0200
Subject: [Twisted-Python] Receiving large packets with TCP (solved)
In-Reply-To: <42D25C0D.8010607@atlas.de>
References: <42D25C0D.8010607@atlas.de>
Message-ID: <42D26710.3080002@atlas.de>

Näwe, Stefan schrieb:
> Hi.
> I'm using Twisted (2.0.1) for a TCP-based receiver.
> That receiver receives different telegrams sent by another process.
> Those telegrams are sent on different ports (i.e. one telegram type
> is sent on one port). The sizes of the telegram vary from ~16 bytes
> to ~8 kB.
> 
> Everything works perfectly. I've really never been *that*
> productive.
> 
> BUT:
> I'm having trouble receiving the whole contents of large telegrams.
> For example one telegram is exactly 7452 bytes long but I only get
> 2920 bytes.
> [...]

Actually, after sending the message I came up with a working solution
that does exactly what Christopher and David suggested.

So I would say this is solved.


Thanks a lot!

Happy Twisting!



Stefan
-- 
----------------------------------------------------------------------
Stefan Naewe                                     ATLAS Elektronik GmbH
                                                         Dept.: NUS T4
phone: +49-(0)421-457-3969                Sebaldsbruecker Heerstr. 235
fax:   +49-(0)421-457-3913                                28305 Bremen




From screwtape at froup.com  Mon Jul 11 06:35:16 2005
From: screwtape at froup.com (Tim Allen)
Date: Mon, 11 Jul 2005 22:35:16 +1000
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <20050710181634.26278.1403125390.divmod.quotient.9004@ohm>
References: <20050710181634.26278.1403125390.divmod.quotient.9004@ohm>
Message-ID: <d8e0b4e81bd1ac3e2566a6c1638aa838@froup.com>

On 11 Jul 2005, at 04:16, Jp Calderone wrote:
> What's hacky about this?  It seems like a simple, straightforward 
> solution.  Record classes have comparison defined one way, you want to 
> compare them another way.  Comparison can only be defined one way 
> using the "==" operator, so clearly one of these requirements has to 
> resort to using something other than the "==" operator.

Well, it would be nicer still if the world would conform to my 
requirements. :)

I was sort of hoping that someone would pop their head out of the 
woodwork and say 'No, it was designed this way because it makes 
such-and-such a task much easier', or even 'Nobody much cares either 
way, we're taking patches'.

> I think it's even nicer than you suggest, since the attributes which 
> should be compared are all declared on each class.  eg, 
> Record_NS.compareAttributes == ('name', 'ttl').  You should be able to 
> write a comparison function that looks at this attribute and simply 
> omits ttl.

I was a bit nervous about relying on undocumented instance variables of 
a module marked as 'unstable', but I suppose since I'm already relying 
on an unstable module, one more assumption isn't going to hurt.

Thanks!




From Henning.Ramm at mediapro-gmbh.de  Mon Jul 11 08:07:26 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Mon, 11 Jul 2005 16:07:26 +0200
Subject: [Twisted-Python] exceptions in adbapi
Message-ID: <F92274058556DE42B94B148EEFB9183949E777@exchange-03.suedkurier.de>

Hi there!

I've a twisted app as database proxy server that handles all database queries for my other apps (via a pb connection).
Now I get thousands of exceptions that I can't trace back, two kind:

2005-07-11 15:57:36,707	defer.328	[ERROR]
[Failure instance: Traceback: _mysql_exceptions.Warning: Datensätze gefunden: 1  Geändert: 0  Warnungen: 1
D:\Python\lib\threading.py:422:run
D:\Python\lib\site-packages\twisted\python\threadpool.py:145:_worker
D:\Python\lib\site-packages\twisted\python\context.py:52:callWithContext
D:\Python\lib\site-packages\twisted\python\context.py:31:callWithContext
--- <exception caught here> ---
D:\Python\lib\site-packages\twisted\internet\threads.py:25:_putResultInDeferred
D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:302:_runInteraction
D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:311:_runQuery
D:\Python\lib\site-packages\MySQLdb\cursors.py:95:execute
D:\Python\lib\site-packages\MySQLdb\cursors.py:114:_execute
D:\Python\lib\site-packages\MySQLdb\connections.py:33:defaulterrorhandler
]
2005-07-11 15:57:36,707	defer.328	[ERROR]
[Failure instance: Traceback: _mysql_exceptions.IntegrityError: (1062, "Doppelter Eintrag 'TA_V_23_130705' f\xfcr Schl\xfcssel 1.")
D:\Python\lib\threading.py:422:run
D:\Python\lib\site-packages\twisted\python\threadpool.py:145:_worker
D:\Python\lib\site-packages\twisted\python\context.py:52:callWithContext
D:\Python\lib\site-packages\twisted\python\context.py:31:callWithContext
--- <exception caught here> ---
D:\Python\lib\site-packages\twisted\internet\threads.py:25:_putResultInDeferred
D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:302:_runInteraction
D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:311:_runQuery
D:\Python\lib\site-packages\MySQLdb\cursors.py:95:execute
D:\Python\lib\site-packages\MySQLdb\cursors.py:114:_execute
D:\Python\lib\site-packages\MySQLdb\connections.py:33:defaulterrorhandler
]

The first one is absolutely useless - MySQL tells me only that it could process the query ("datasets found: 1, changed 0, warning: 1"); I'd like to block that completely.

The second one means that I tried an insert with an existing key ("Double entry '...' for key 1"); also no problem, if I could handle it and do an update query instead.

But as you can see, I can't trace the messages back to one of my methods (and I have already every function call in a try..except clause).

Any hints?


Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From glyph at divmod.com  Mon Jul 11 09:30:50 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 11 Jul 2005 11:30:50 -0400
Subject: [Twisted-Python] Receiving large packets with TCP
In-Reply-To: <60ed19d4050711045868b641cd@mail.gmail.com>
References: <42D25C0D.8010607@atlas.de>
	<60ed19d4050711045868b641cd@mail.gmail.com>
Message-ID: <42D290AA.3080304@divmod.com>

Christopher Armstrong wrote:

> dataReceived will be called with arbitrarily-sized chunks of data. You
> can never assume how much data will be given to you. If you're
> expecting more, buffer it until you receive everything you need.

This phenomenon is called "packet fragmentation" and is well-documented 
in various places.  Google for that phrase and you will turn up quite a 
few references :).

In fact, you will notice there are some unit tests in Twisted that do 
something like this:

     for byte in data:
         myProtocol.dataReceived(byte)

just to test that the protocol is still robust in the face of the 
ultimate (1-byte-at-a-time) fragmentation.  (FWIW, no actually existing 
TCP implementation will never actually fragment packets _this_ far, but 
there is nothing saying that it can't.)



From shimonrura at gmail.com  Mon Jul 11 09:47:07 2005
From: shimonrura at gmail.com (Shimon Rura)
Date: Mon, 11 Jul 2005 11:47:07 -0400
Subject: [Twisted-Python] need help getting started with Twisted
In-Reply-To: <42C97646.3040203@fettig.net>
References: <42C97646.3040203@fettig.net>
Message-ID: <253af2fb0507110847286b4723@mail.gmail.com>

Hi all,

I'm starting to work on a new server application, and I think Twisted
may be a useful platform to build on.  I've been having a hard time
figuring out where to start, though, as my experience is mostly in
database-backed web applications and Twisted seems rather large.  I
found myself wishing there was an O'Reilly book on Twisted, and was
happy to read the message below on the mailing list.

Abe, is there any way a newbie like me can get (or buy) a pre-print of
your book?

Can anyone recommend other resources or tutorials for newbies?  The
documentation on the Twisted website was confusing, in part because
it's divided into many different projects and I don't know how those
projects relate or if some of them have been superseded by newer ones.

thanks,
Shimon Rura

On 7/4/05, Abe Fettig <abe at fettig.net> wrote:
> Hi all,
> 
> I'm happy to announce that O'Reilly is going to publish my book on
> Twisted. It's scheduled for release in October. The working title is
> Twisted Network Programming Essentials.
> 
> I've been working on this book since the end of last year, but I've been
> waiting to announce it until I knew that it was definitely going to be
> published in the reasonably near future. At this point it's in the
> editing stage, and O'Reilly has put it on their production schedule for
> an October release. So spread the word - there's a Twisted book coming!
> 
> For a description of what the book covers (and what it doesn't), see
> this post on my weblog:
> 
> http://fettig.net/weblog/2005/06/30/my-book-on-twisted/
> 
> Thanks to all the Twisted developers for creating such an amazing
> framework. The more I learn about Twisted (and I learned a lot while
> writing this book), the more I'm impressed. I hope this book helps many
> more people to get started with Twisted, and that it's the first of many
> more books to come.
> 
> Abe



From justinjohnson at gmail.com  Mon Jul 11 09:52:14 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 11 Jul 2005 10:52:14 -0500
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
Message-ID: <94a776e7050711085220094f1c@mail.gmail.com>

I am attempting to add spawnProcess to iocpreactor. In order to begin this 
task I've had to do a lot of reading on Windows network programming, 
specifically the various Windows I/O methods, to attempt to understand what 
win32eventreactor and iocpreactor are doing, and also just increase my 
understanding of how reactors work in general. To understand the various 
Winsock 2 methods that both of these reactors rely upon, I read chapters 1-5 
of Network Programming for Microsoft Windows[1].
 Before actually attempting to add spawnProcess, I would like to present how 
I think iocpreactor works and how I think I should add spawnProcess, and 
hopefully be corrected or confirmed in my understanding. If I'm too vague 
there's a good chance it's because I don't understand it very well. Please 
feel free to point out things that you might think are obvious but aren't 
sure I understand.
 How iocpreactor works
---------------------------------

   1. Create an IO Completion Port. 
   2. Create a socket and associate it with the IOCP. This is the socket 
   we will call AcceptEx (a non-blocking accept) on. The association with the 
   IOCP is made via CreateIoCompletionPort. 
   3. Setup any scheduled tasks on the reactor. 
   4. Call AcceptEx (which doesn't block) on the socket. AcceptEx takes 
   an overlapped structure as a parameter. Before making the call, we set two 
   attributes of the struct: the callback and callback_args which will be 
   called when an accept event completes on the socket. The Winsock 2 methods 
   don't actually call the callback. The Winsock 2 methods handle copying data 
   related to the network event that occurred on the socket into the overlapped 
   structure and making that overlapped structure available to 
   GetQueuedCompletionStatus. So when we handle events on sockets via 
   GetQueuedCompletionStatus from within doIteration, we have access to the 
   data related to the event as well as the callback and callback_args we call 
   to handle that event. The callbacks are setup in the xxxOp classes in 
   ops.py and always result in some transport method getting called (such 
   as readDone, connectionDone, etc). 
   5. From within doIteration, call GetQueuedCompletionStatus (which does 
   block) with a timeout of the time until the next scheduled task needs to be 
   run. If any event occurs on the sockets currently associated with the IOCP 
   before that time expires, GetQueuedCompletionStatus will return (stop 
   blocking). Now we have access to the overlapped structure containing data 
   associated with the event which was copied into the overlapped structure's 
   buffer, such as data received from WSARecv calls, as well as the callback 
   and callback_args. From within doIteration we call the callbacks passing in 
   the data related to the event. Depending on the events we are handling, we 
   may create new sockets (e.g. end point sockets in TCP connections) and 
   associate them with the IOCP as well. All Winsock 2 API calls made are 
   non-blocking accept for GetQueuedCompletionStatus. 
   6. Step 5 continues until the reactor stops.

  How to add spawnProcess
---------------------------------------

   1. Create the processes via Windows APIs and associate their 
   stdout/err with with the IOCP via CreateIoCompletionPort calls. 
   2. Close stdin. 
   3. Notify the ProcessProtocol via protocol.makeConnection (not sure 
   why, looking at win32eventreactor) 
   4. Receive data from stdout/err via the completion port by calling 
   GetQueuedCompletionStatus from within doIteration. Is this really possible? 
   ProcessProtocol's methods won't get called appropriately by letting the 
   existing callbacks in ops.py make calls to the transport (e.g. 
   connectionDone, readDone)?

  Thanks for your help.
Justin
 [1] http://www.amazon.com/exec/obidos/ASIN/0735615799
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050711/966328e8/attachment.html>

From exarkun at divmod.com  Mon Jul 11 10:34:55 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 11 Jul 2005 12:34:55 -0400
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <94a776e7050711085220094f1c@mail.gmail.com>
Message-ID: <20050711163455.26278.1912863786.divmod.quotient.9475@ohm>

On Mon, 11 Jul 2005 10:52:14 -0500, Justin Johnson <justinjohnson at gmail.com> wrote:
>I am attempting to add spawnProcess to iocpreactor. In order to begin this
>task I've had to do a lot of reading on Windows network programming,
>specifically the various Windows I/O methods, to attempt to understand what
>win32eventreactor and iocpreactor are doing, and also just increase my
>understanding of how reactors work in general. To understand the various
>Winsock 2 methods that both of these reactors rely upon, I read chapters 1-5
>of Network Programming for Microsoft Windows[1].
> Before actually attempting to add spawnProcess, I would like to present how
>I think iocpreactor works and how I think I should add spawnProcess, and
>hopefully be corrected or confirmed in my understanding. If I'm too vague
>there's a good chance it's because I don't understand it very well. Please
>feel free to point out things that you might think are obvious but aren't
>sure I understand.
> How iocpreactor works
>---------------------------------
>
> [snip]
>
>  How to add spawnProcess
>---------------------------------------
>
>   1. Create the processes via Windows APIs and associate their
>   stdout/err with with the IOCP via CreateIoCompletionPort calls.
>   2. Close stdin.

Why close stdin?  How will you write to the spawned process?

>   3. Notify the ProcessProtocol via protocol.makeConnection (not sure
>   why, looking at win32eventreactor)

makeConnection is the method that's actually part of IProtocol (even though ProcessProtocol doesn't implement IProtocol, it still adheres to its API in this regard).  Generally, all it does is set the .transport attribute on the protocol instance and then call connectionMade.  This might seem pointless in the case of processes, but since it maintains consistency with other kinds of transports, it is useful.

>   4. Receive data from stdout/err via the completion port by calling
>   GetQueuedCompletionStatus from within doIteration. Is this really possible?
>   ProcessProtocol's methods won't get called appropriately by letting the
>   existing callbacks in ops.py make calls to the transport (e.g.
>   connectionDone, readDone)?
>
>  Thanks for your help.
>Justin
> [1] http://www.amazon.com/exec/obidos/ASIN/0735615799
>

Jp



From justinjohnson at gmail.com  Mon Jul 11 11:16:35 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 11 Jul 2005 12:16:35 -0500
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <20050711163455.26278.1912863786.divmod.quotient.9475@ohm>
References: <94a776e7050711085220094f1c@mail.gmail.com>
	<20050711163455.26278.1912863786.divmod.quotient.9475@ohm>
Message-ID: <94a776e705071110161e92d8a4@mail.gmail.com>

See response below.

On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote: 
> 
> On Mon, 11 Jul 2005 10:52:14 -0500, Justin Johnson <
> justinjohnson at gmail.com> wrote:
> >I am attempting to add spawnProcess to iocpreactor. In order to begin 
> this
> >task I've had to do a lot of reading on Windows network programming,
> >specifically the various Windows I/O methods, to attempt to understand 
> what
> >win32eventreactor and iocpreactor are doing, and also just increase my
> >understanding of how reactors work in general. To understand the various
> >Winsock 2 methods that both of these reactors rely upon, I read chapters 
> 1-5
> >of Network Programming for Microsoft Windows[1].
> > Before actually attempting to add spawnProcess, I would like to present 
> how
> >I think iocpreactor works and how I think I should add spawnProcess, and
> >hopefully be corrected or confirmed in my understanding. If I'm too vague
> >there's a good chance it's because I don't understand it very well. 
> Please
> >feel free to point out things that you might think are obvious but aren't
> >sure I understand.
> > How iocpreactor works
> >---------------------------------
> >
> > [snip]
> >
> > How to add spawnProcess
> >---------------------------------------
> >
> > 1. Create the processes via Windows APIs and associate their
> > stdout/err with with the IOCP via CreateIoCompletionPort calls.
> > 2. Close stdin.
> 
> Why close stdin? How will you write to the spawned process?

 I see, so I won't close stdin and people can do that in their 
ProcessProtocol in connectionMade or something if they want.

> 3. Notify the ProcessProtocol via protocol.makeConnection (not sure
> > why, looking at win32eventreactor)
> 
> makeConnection is the method that's actually part of IProtocol (even 
> though ProcessProtocol doesn't implement IProtocol, it still adheres to its 
> API in this regard). Generally, all it does is set the .transport attribute 
> on the protocol instance and then call connectionMade. This might seem 
> pointless in the case of processes, but since it maintains consistency with 
> other kinds of transports, it is useful.

  So the Process class is the transport? In win32eventreactor, 3 threads are 
started that loop on reading stdout and stderr and writing data from the 
outQueue to stdin. It seems to me that I would not use these threads, but 
instead have each of these 3 file handles associated with the IOCP. Then the 
methods defined in ops.py would be used to handle events on those handles, 
resulting in transport methods being called. These transport methods would 
be methods on the Process class, which would result in methods on a single 
instance of the ProcessProtocol being called. This single instance of the 
ProcessProtocol would be shared by all of the 3 file handles. Am I 
understanding correctly? Are write and loseConnection the only methods the 
Process would need to implement from ITransport?

> 4. Receive data from stdout/err via the completion port by calling
> > GetQueuedCompletionStatus from within doIteration. Is this really 
> possible?
> > ProcessProtocol's methods won't get called appropriately by letting the
> > existing callbacks in ops.py make calls to the transport (e.g.
> > connectionDone, readDone)?
> >
> > Thanks for your help.
> >Justin
> > [1] http://www.amazon.com/exec/obidos/ASIN/0735615799
> >
> 
> Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050711/5b21c0a0/attachment.html>

From fritcher at corp.earthlink.net  Mon Jul 11 12:10:26 2005
From: fritcher at corp.earthlink.net (Jason Fritcher)
Date: Mon, 11 Jul 2005 14:10:26 -0400
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <s2d061b0.031@gwcl-21.scu.edu>
References: <s2d061b0.031@gwcl-21.scu.edu>
Message-ID: <42D2B612.2020205@corp.earthlink.net>

Brian Granger wrote:
> I like this option as Apple's mDNS code is becoming very solid.  Are the
> python bindings you mention available somewhere?  I have thought about
> using mDNS with twisted for a project so any examples you can offer would
> be great.

I'm the one actually writing on the bindings. I'm trying to get
permission from the company to open source them. There isn't anything
proprietary there, but who knows what the legal department will say. :)

Currently, I have a straight through binding that ports the C API into
python. In the near future, I'm going to be overhauling it into an OO
API, and then integrating into Twisted. I'll be back with questions
about Twisted when I get to that point. ;)

-- 
Jason Fritcher
Software Engineer - Hosting Dev,
System Software Development
Earthlink, Inc
fritcher at corp.earthlink.net
(404) 748-7262, x22262
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 253 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20050711/a1db6892/attachment.sig>

From exarkun at divmod.com  Mon Jul 11 13:26:15 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 11 Jul 2005 15:26:15 -0400
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <94a776e705071110161e92d8a4@mail.gmail.com>
Message-ID: <20050711192615.26278.1879485730.divmod.quotient.9579@ohm>

On Mon, 11 Jul 2005 12:16:35 -0500, Justin Johnson <justinjohnson at gmail.com> wrote:
>On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote:
>>
> [snip]
>
>> 3. Notify the ProcessProtocol via protocol.makeConnection (not sure
>> > why, looking at win32eventreactor)
>>
>> makeConnection is the method that's actually part of IProtocol (even
>> though ProcessProtocol doesn't implement IProtocol, it still adheres to its
>> API in this regard). Generally, all it does is set the .transport attribute
>> on the protocol instance and then call connectionMade. This might seem
>> pointless in the case of processes, but since it maintains consistency with
>> other kinds of transports, it is useful.
>
>  So the Process class is the transport? In win32eventreactor, 3 threads are
>started that loop on reading stdout and stderr and writing data from the
>outQueue to stdin. It seems to me that I would not use these threads, but
>instead have each of these 3 file handles associated with the IOCP. Then the
>methods defined in ops.py would be used to handle events on those handles,
>resulting in transport methods being called. These transport methods would
>be methods on the Process class, which would result in methods on a single
>instance of the ProcessProtocol being called. This single instance of the
>ProcessProtocol would be shared by all of the 3 file handles. Am I
>understanding correctly? Are write and loseConnection the only methods the
>Process would need to implement from ITransport?

That mostly sounds correct, except the last bit.  What makes it a transport is that it implements /all/ of ITransport.  Moreover, ProcessProtocols expect their transport to be an IProcessTransport, which adds several methods on top of ITransport.  Everything in each of those interfaces needs to be implemented.

For reference, <http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html> and <http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IProcessTransport.html>.

Jp



From justinjohnson at gmail.com  Mon Jul 11 13:40:44 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 11 Jul 2005 14:40:44 -0500
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <20050711192615.26278.1879485730.divmod.quotient.9579@ohm>
References: <94a776e705071110161e92d8a4@mail.gmail.com>
	<20050711192615.26278.1879485730.divmod.quotient.9579@ohm>
Message-ID: <94a776e705071112402f4643d0@mail.gmail.com>

On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote: 
> 
> On Mon, 11 Jul 2005 12:16:35 -0500, Justin Johnson <
> justinjohnson at gmail.com> wrote:
> >On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote:
> >>
> > [snip]
> >
> >> 3. Notify the ProcessProtocol via protocol.makeConnection (not sure
> >> > why, looking at win32eventreactor)
> >>
> >> makeConnection is the method that's actually part of IProtocol (even
> >> though ProcessProtocol doesn't implement IProtocol, it still adheres to 
> its
> >> API in this regard). Generally, all it does is set the .transport 
> attribute
> >> on the protocol instance and then call connectionMade. This might seem
> >> pointless in the case of processes, but since it maintains consistency 
> with
> >> other kinds of transports, it is useful.
> >
> > So the Process class is the transport? In win32eventreactor, 3 threads 
> are
> >started that loop on reading stdout and stderr and writing data from the
> >outQueue to stdin. It seems to me that I would not use these threads, but
> >instead have each of these 3 file handles associated with the IOCP. Then 
> the
> >methods defined in ops.py would be used to handle events on those 
> handles,
> >resulting in transport methods being called. These transport methods 
> would
> >be methods on the Process class, which would result in methods on a 
> single
> >instance of the ProcessProtocol being called. This single instance of the
> >ProcessProtocol would be shared by all of the 3 file handles. Am I
> >understanding correctly? Are write and loseConnection the only methods 
> the
> >Process would need to implement from ITransport?
> 
> That mostly sounds correct, except the last bit. What makes it a transport 
> is that it implements /all/ of ITransport. Moreover, ProcessProtocols expect 
> their transport to be an IProcessTransport, which adds several methods on 
> top of ITransport. Everything in each of those interfaces needs to be 
> implemented.

 Ahh... I missed those interfaces because I was starting with 
win32eventreactor.Process, which doesn't implement either ITransport or 
IProcessTransport (either with an implements() or by defining all of those 
methods).
 After some more thought about this I think I will have to define new xxxOps 
methods for stdout and stderr (and maybe stdin as well). These ops' ovDone 
methods will call the methods on the transport (Process) appropriate for 
ProcessProtocols.

For reference, <
> http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html> 
> and <
> http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IProcessTransport.html
> >.
> 
> Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050711/c7f93eaf/attachment.html>

From justinjohnson at gmail.com  Mon Jul 11 13:52:45 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 11 Jul 2005 14:52:45 -0500
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <94a776e705071112402f4643d0@mail.gmail.com>
References: <94a776e705071110161e92d8a4@mail.gmail.com>
	<20050711192615.26278.1879485730.divmod.quotient.9579@ohm>
	<94a776e705071112402f4643d0@mail.gmail.com>
Message-ID: <94a776e70507111252f590dcd@mail.gmail.com>

On 7/11/05, Justin Johnson <justinjohnson at gmail.com> wrote: 
> 
> On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote: 
> > 
> > On Mon, 11 Jul 2005 12:16:35 -0500, Justin Johnson <justinjohnson at gmail.com 
> > > wrote:
> > >On 7/11/05, Jp Calderone <exarkun at divmod.com> wrote:
> > >>
> > > [snip]
> > 
> > That mostly sounds correct, except the last bit. What makes it a 
> > transport is that it implements /all/ of ITransport. Moreover, 
> > ProcessProtocols expect their transport to be an IProcessTransport, which 
> > adds several methods on top of ITransport. Everything in each of those 
> > interfaces needs to be implemented. 
> 
>  Ahh... I missed those interfaces because I was starting with 
> win32eventreactor.Process, which doesn't implement either ITransport or 
> IProcessTransport (either with an implements() or by defining all of those 
> methods). 
>  
 Hmm.. I somehow missed the obvious implements call. But I still don't see 
all methods defined (e.g. getPeer, getHost, writeSequence).

 After some more thought about this I think I will have to define new xxxOps 
> methods for stdout and stderr (and maybe stdin as well). These ops' ovDone 
> methods will call the methods on the transport (Process) appropriate for 
> ProcessProtocols. 
> 
> For reference, <http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html> 
> > and <http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IProcessTransport.html 
> > >.
> > 
> > Jp
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> 
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050711/8ee63609/attachment.html>

From bob at redivi.com  Mon Jul 11 13:57:36 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 11 Jul 2005 09:57:36 -1000
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <42D2B612.2020205@corp.earthlink.net>
References: <s2d061b0.031@gwcl-21.scu.edu>
	<42D2B612.2020205@corp.earthlink.net>
Message-ID: <5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>


On Jul 11, 2005, at 8:10 AM, Jason Fritcher wrote:

> Brian Granger wrote:
>
>> I like this option as Apple's mDNS code is becoming very solid.   
>> Are the
>> python bindings you mention available somewhere?  I have thought  
>> about
>> using mDNS with twisted for a project so any examples you can  
>> offer would
>> be great.
>>
>
> I'm the one actually writing on the bindings. I'm trying to get
> permission from the company to open source them. There isn't anything
> proprietary there, but who knows what the legal department will  
> say. :)
>
> Currently, I have a straight through binding that ports the C API into
> python. In the near future, I'm going to be overhauling it into an OO
> API, and then integrating into Twisted. I'll be back with questions
> about Twisted when I get to that point. ;)

Alternatively, if you're using a Mac, it's pretty trivial to just use  
the NSNetService stuff.  You're more or less stuck supporting the OS  
X APIs anyway if you want OS X support, since only one mDNS responder  
can run on a given machine (well, IP address).

-bob




From pp64 at codelock.com  Mon Jul 11 14:49:04 2005
From: pp64 at codelock.com (Pavel Pergamenshchik)
Date: Mon, 11 Jul 2005 13:49:04 -0700
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <94a776e7050711085220094f1c@mail.gmail.com>
References: <94a776e7050711085220094f1c@mail.gmail.com>
Message-ID: <20050711134904.3555c1f6@dunce>

On Mon, 11 Jul 2005 10:52:14 -0500
Justin Johnson <justinjohnson at gmail.com> wrote:

> I am attempting to add spawnProcess to iocpreactor. In order to begin
this 
> task I've had to do a lot of reading on Windows network programming, 
> specifically the various Windows I/O methods, to attempt to understand
what 
> win32eventreactor and iocpreactor are doing, and also just increase my

> understanding of how reactors work in general. To understand the
various 
> Winsock 2 methods that both of these reactors rely upon, I read
chapters 1-5 
> of Network Programming for Microsoft Windows[1].
>  Before actually attempting to add spawnProcess, I would like to
present how 
> I think iocpreactor works and how I think I should add spawnProcess,
and 
> hopefully be corrected or confirmed in my understanding. If I'm too
vague 
> there's a good chance it's because I don't understand it very well.
Please 
> feel free to point out things that you might think are obvious but
aren't 
> sure I understand.
>  How iocpreactor works
> ---------------------------------
> 
>    1. Create an IO Completion Port. 
>    2. Create a socket and associate it with the IOCP. This is the
socket 
>    we will call AcceptEx (a non-blocking accept) on. The association
with the 
>    IOCP is made via CreateIoCompletionPort. 
>    3. Setup any scheduled tasks on the reactor. 
>    4. Call AcceptEx (which doesn't block) on the socket. AcceptEx
takes 
>    an overlapped structure as a parameter. Before making the call, we
set two 
>    attributes of the struct: the callback and callback_args which will
be 
>    called when an accept event completes on the socket. The Winsock 2
methods 
>    don't actually call the callback. The Winsock 2 methods handle
copying data 
>    related to the network event that occurred on the socket into the
overlapped 
>    structure and making that overlapped structure available to 
>    GetQueuedCompletionStatus. So when we handle events on sockets via 
>    GetQueuedCompletionStatus from within doIteration, we have access
to the 
>    data related to the event as well as the callback and callback_args
we call 
>    to handle that event. The callbacks are setup in the xxxOp classes
in 
>    ops.py and always result in some transport method getting called
(such 
>    as readDone, connectionDone, etc). 
>    5. From within doIteration, call GetQueuedCompletionStatus (which
does 
>    block) with a timeout of the time until the next scheduled task
needs to be 
>    run. If any event occurs on the sockets currently associated with
the IOCP 
>    before that time expires, GetQueuedCompletionStatus will return
(stop 
>    blocking). Now we have access to the overlapped structure
containing data 
>    associated with the event which was copied into the overlapped
structure's 
>    buffer, such as data received from WSARecv calls, as well as the
callback 
>    and callback_args. From within doIteration we call the callbacks
passing in 
>    the data related to the event. Depending on the events we are
handling, we 
>    may create new sockets (e.g. end point sockets in TCP connections)
and 
>    associate them with the IOCP as well. All Winsock 2 API calls made
are 
>    non-blocking accept for GetQueuedCompletionStatus. 
>    6. Step 5 continues until the reactor stops.

This sounds about right. Note how this is different from the usual
reactor thing -- iocp notifies you when the operation is _finished_,
not when it can success without blocking.

>   How to add spawnProcess
> ---------------------------------------
> 
>    1. Create the processes via Windows APIs and associate their 
>    stdout/err with with the IOCP via CreateIoCompletionPort calls. 
>    2. Close stdin. 
>    3. Notify the ProcessProtocol via protocol.makeConnection (not sure

>    why, looking at win32eventreactor) 
>    4. Receive data from stdout/err via the completion port by calling 
>    GetQueuedCompletionStatus from within doIteration. Is this really
possible? 
>    ProcessProtocol's methods won't get called appropriately by letting
the 
>    existing callbacks in ops.py make calls to the transport (e.g. 
>    connectionDone, readDone)?

Hrm. Not quite. In iocp, you always have a read call pending
(ReadFileEx, for stdout/err handles). When it completes, you get a
notification in GetQueuedCompletionStatus, pass the data to your
Protocol and schedule the read again.
Do that for stdout and stderr.
ops.py already has a wrapper for ReadFile, but it always calls readDone
and readErr on your transport. You'll need to fix that.



From fritcher at corp.earthlink.net  Mon Jul 11 14:56:49 2005
From: fritcher at corp.earthlink.net (Jason Fritcher)
Date: Mon, 11 Jul 2005 16:56:49 -0400
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>
References: <s2d061b0.031@gwcl-21.scu.edu>	<42D2B612.2020205@corp.earthlink.net>
	<5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>
Message-ID: <42D2DD11.50603@corp.earthlink.net>

Bob Ippolito wrote:
> Alternatively, if you're using a Mac, it's pretty trivial to just use 
> the NSNetService stuff.  You're more or less stuck supporting the OS  X
> APIs anyway if you want OS X support, since only one mDNS responder  can
> run on a given machine (well, IP address).

Not at all. I'm developing the bindings on a OS X box, and by wrapping
the DNSService API, it'll run on OS X, Linux, FreeBSD, Solaris and any
other platform that has the DNSService API. The only difference is on OS
X, I don't need to link with any extra libraries, its part of the main
system lib. On other platforms, I link against libdns_sd.

-- 
Jason Fritcher
Software Engineer - Hosting Dev,
System Software Development
Earthlink, Inc
fritcher at corp.earthlink.net
(404) 748-7262, x22262
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 253 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20050711/f1664df7/attachment.sig>

From justinjohnson at gmail.com  Mon Jul 11 14:57:39 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 11 Jul 2005 15:57:39 -0500
Subject: [Twisted-Python] Understanding the IOCP reactor and adding
	spawnProcess
In-Reply-To: <20050711134904.3555c1f6@dunce>
References: <94a776e7050711085220094f1c@mail.gmail.com>
	<20050711134904.3555c1f6@dunce>
Message-ID: <94a776e7050711135728931286@mail.gmail.com>

On 7/11/05, Pavel Pergamenshchik <pp64 at codelock.com> wrote: 
> 
> On Mon, 11 Jul 2005 10:52:14 -0500
> Justin Johnson <justinjohnson at gmail.com> wrote:
> 
> > I am attempting to add spawnProcess to iocpreactor. In order to begin
> this
> > task I've had to do a lot of reading on Windows network programming,
> > specifically the various Windows I/O methods, to attempt to understand
> what
> > win32eventreactor and iocpreactor are doing, and also just increase my
> 
> > understanding of how reactors work in general. To understand the
> various
> > Winsock 2 methods that both of these reactors rely upon, I read
> chapters 1-5
> > of Network Programming for Microsoft Windows[1].
> > Before actually attempting to add spawnProcess, I would like to
> present how
> > I think iocpreactor works and how I think I should add spawnProcess,
> and
> > hopefully be corrected or confirmed in my understanding. If I'm too
> vague
> > there's a good chance it's because I don't understand it very well.
> Please
> > feel free to point out things that you might think are obvious but
> aren't
> > sure I understand.
> > How iocpreactor works
> > ---------------------------------
> >
> > 1. Create an IO Completion Port.
> > 2. Create a socket and associate it with the IOCP. This is the
> socket
> > we will call AcceptEx (a non-blocking accept) on. The association
> with the
> > IOCP is made via CreateIoCompletionPort.
> > 3. Setup any scheduled tasks on the reactor.
> > 4. Call AcceptEx (which doesn't block) on the socket. AcceptEx
> takes
> > an overlapped structure as a parameter. Before making the call, we
> set two
> > attributes of the struct: the callback and callback_args which will
> be
> > called when an accept event completes on the socket. The Winsock 2
> methods
> > don't actually call the callback. The Winsock 2 methods handle
> copying data
> > related to the network event that occurred on the socket into the
> overlapped
> > structure and making that overlapped structure available to
> > GetQueuedCompletionStatus. So when we handle events on sockets via
> > GetQueuedCompletionStatus from within doIteration, we have access
> to the
> > data related to the event as well as the callback and callback_args
> we call
> > to handle that event. The callbacks are setup in the xxxOp classes
> in
> > ops.py and always result in some transport method getting called
> (such
> > as readDone, connectionDone, etc).
> > 5. From within doIteration, call GetQueuedCompletionStatus (which
> does
> > block) with a timeout of the time until the next scheduled task
> needs to be
> > run. If any event occurs on the sockets currently associated with
> the IOCP
> > before that time expires, GetQueuedCompletionStatus will return
> (stop
> > blocking). Now we have access to the overlapped structure
> containing data
> > associated with the event which was copied into the overlapped
> structure's
> > buffer, such as data received from WSARecv calls, as well as the
> callback
> > and callback_args. From within doIteration we call the callbacks
> passing in
> > the data related to the event. Depending on the events we are
> handling, we
> > may create new sockets (e.g. end point sockets in TCP connections)
> and
> > associate them with the IOCP as well. All Winsock 2 API calls made
> are
> > non-blocking accept for GetQueuedCompletionStatus.
> > 6. Step 5 continues until the reactor stops.
> 
> This sounds about right. Note how this is different from the usual
> reactor thing -- iocp notifies you when the operation is _finished_,
> not when it can success without blocking.

 Right. Understood.

> How to add spawnProcess
> > ---------------------------------------
> >
> > 1. Create the processes via Windows APIs and associate their
> > stdout/err with with the IOCP via CreateIoCompletionPort calls.
> > 2. Close stdin.
> > 3. Notify the ProcessProtocol via protocol.makeConnection (not sure
> 
> > why, looking at win32eventreactor)
> > 4. Receive data from stdout/err via the completion port by calling
> > GetQueuedCompletionStatus from within doIteration. Is this really
> possible?
> > ProcessProtocol's methods won't get called appropriately by letting
> the
> > existing callbacks in ops.py make calls to the transport (e.g.
> > connectionDone, readDone)?
> 
> Hrm. Not quite. In iocp, you always have a read call pending
> (ReadFileEx, for stdout/err handles). When it completes, you get a
> notification in GetQueuedCompletionStatus, pass the data to your
> Protocol and schedule the read again.
> Do that for stdout and stderr.
> ops.py already has a wrapper for ReadFile, but it always calls readDone
> and readErr on your transport. You'll need to fix that.

 I think we're on the same page here. See my previous emails correcting my 
original idea on how this would work. At this point I've defined custom 
xxxOp classes as follows.

class ReadOutOp(OverlappedOp):
def ovDone(self, ret, bytes, (handle, buffer)):
if ret or not bytes:
#self.transport.readErr(ret, bytes)
self.transport.outConnectionLost()
else:
#self.transport.readDone(bytes)
self.transport.protocol.outReceived(bytes)
 
def initiateOp(self, handle, buffer):
self.reactor.issueReadFile(handle, buffer, self.ovDone, (handle, buffer))

class ReadErrOp(OverlappedOp):
def ovDone(self, ret, bytes, (handle, buffer)):
if ret or not bytes:
#self.transport.readErr(ret, bytes)
self.transport.errConnectionLost()
else:
#self.transport.readDone(bytes)
self.transport.protocol.errReceived(bytes)

def initiateOp(self, handle, buffer):
self.reactor.issueReadFile(handle, buffer, self.ovDone, (handle, buffer))

class WriteInOp(OverlappedOp):
def ovDone(self, ret, bytes, (handle, buffer)):
# log.msg("WriteFileOp.ovDone", time.time())
if ret or not bytes:
#self.transport.writeErr(ret, bytes)
self.transport.inConnectionLost()
else:
#self.transport.writeDone(bytes)
pass

def initiateOp(self, handle, buffer):
# log.msg("WriteFileOp.initiateOp", time.time())
self.reactor.issueWriteFile(handle, buffer, self.ovDone, (handle, buffer))
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050711/3f095226/attachment.html>

From screwtape at froup.com  Mon Jul 11 15:57:40 2005
From: screwtape at froup.com (Tim Allen)
Date: Tue, 12 Jul 2005 07:57:40 +1000
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>
References: <s2d061b0.031@gwcl-21.scu.edu>
	<42D2B612.2020205@corp.earthlink.net>
	<5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>
Message-ID: <fbabe38317706cf3710605dcdf39d940@froup.com>

On 12 Jul 2005, at 05:57, Bob Ippolito wrote:
> Alternatively, if you're using a Mac, it's pretty trivial to just use 
> the NSNetService stuff.  You're more or less stuck supporting the OS X 
> APIs anyway if you want OS X support, since only one mDNS responder 
> can run on a given machine (well, IP address).

You've got me worried now - I've been doing all my testing on this G5 
running Panther. I haven't tried serving any mDNS records yet, but I 
can certainly watch all the traffic to and from the system-wide mDNS 
responder.

If I've got this far, am I going to be OK or do you know of some other 
brick-wall I'll hit later on?




From dave at krondo.com  Mon Jul 11 19:45:58 2005
From: dave at krondo.com (Dave Peticolas)
Date: Mon, 11 Jul 2005 18:45:58 -0700
Subject: [Twisted-Python] exceptions in adbapi
In-Reply-To: <F92274058556DE42B94B148EEFB9183949E777@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB9183949E777@exchange-03.suedkurier.de>
Message-ID: <1121132758.22155.92.camel@oneiros>

On Mon, 2005-07-11 at 16:07 +0200, Henning.Ramm at mediapro-gmbh.de wrote:
> Hi there!
> 
> I've a twisted app as database proxy server that handles all database queries for my other apps (via a pb connection).
> Now I get thousands of exceptions that I can't trace back, two kind:
> 
> 2005-07-11 15:57:36,707	defer.328	[ERROR]
> [Failure instance: Traceback: _mysql_exceptions.Warning: Datensätze gefunden: 1  Geändert: 0  Warnungen: 1
> D:\Python\lib\threading.py:422:run
> D:\Python\lib\site-packages\twisted\python\threadpool.py:145:_worker
> D:\Python\lib\site-packages\twisted\python\context.py:52:callWithContext
> D:\Python\lib\site-packages\twisted\python\context.py:31:callWithContext
> --- <exception caught here> ---
> D:\Python\lib\site-packages\twisted\internet\threads.py:25:_putResultInDeferred
> D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:302:_runInteraction
> D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:311:_runQuery
> D:\Python\lib\site-packages\MySQLdb\cursors.py:95:execute
> D:\Python\lib\site-packages\MySQLdb\cursors.py:114:_execute
> D:\Python\lib\site-packages\MySQLdb\connections.py:33:defaulterrorhandler
> ]
> 2005-07-11 15:57:36,707	defer.328	[ERROR]
> [Failure instance: Traceback: _mysql_exceptions.IntegrityError: (1062, "Doppelter Eintrag 'TA_V_23_130705' f\xfcr Schl\xfcssel 1.")
> D:\Python\lib\threading.py:422:run
> D:\Python\lib\site-packages\twisted\python\threadpool.py:145:_worker
> D:\Python\lib\site-packages\twisted\python\context.py:52:callWithContext
> D:\Python\lib\site-packages\twisted\python\context.py:31:callWithContext
> --- <exception caught here> ---
> D:\Python\lib\site-packages\twisted\internet\threads.py:25:_putResultInDeferred
> D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:302:_runInteraction
> D:\Python\lib\site-packages\twisted\enterprise\adbapi.py:311:_runQuery
> D:\Python\lib\site-packages\MySQLdb\cursors.py:95:execute
> D:\Python\lib\site-packages\MySQLdb\cursors.py:114:_execute
> D:\Python\lib\site-packages\MySQLdb\connections.py:33:defaulterrorhandler
> ]
> 
> The first one is absolutely useless - MySQL tells me only that it could process the query ("datasets found: 1, changed 0, warning: 1"); I'd like to block that completely.
> 
> The second one means that I tried an insert with an existing key ("Double entry '...' for key 1"); also no problem, if I could handle it and do an update query instead.
> 
> But as you can see, I can't trace the messages back to one of my methods (and I have already every function call in a try..except clause).
> 
> Any hints?

These exceptions are happening in your Deferred callbacks. You need to
attach an error handler (the asynchronous counterpart to an except: 
clause) to the deferred you get back as a result of your adbapi call.

See twisted.internet.defer for more details.

dave





From Henning.Ramm at mediapro-gmbh.de  Tue Jul 12 01:14:28 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 12 Jul 2005 09:14:28 +0200
Subject: [Twisted-Python] exceptions in adbapi
Message-ID: <F92274058556DE42B94B148EEFB9183949E779@exchange-03.suedkurier.de>

 
>> Any hints?
>
>These exceptions are happening in your Deferred callbacks. You need to
>attach an error handler (the asynchronous counterpart to an except: 
>clause) to the deferred you get back as a result of your adbapi call.

Sure, that's what I do everywhere where I see a Deferred.
But they don't catch these exceptions anyway.


Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From Henning.Ramm at mediapro-gmbh.de  Tue Jul 12 01:29:23 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 12 Jul 2005 09:29:23 +0200
Subject: [Twisted-Python] need help getting started with Twisted
Message-ID: <F92274058556DE42B94B148EEFB9183949E77A@exchange-03.suedkurier.de>

>Can anyone recommend other resources or tutorials for newbies?  The
>documentation on the Twisted website was confusing, in part because
>it's divided into many different projects and I don't know how those
>projects relate or if some of them have been superseded by newer ones.

You should work yourself through
http://twistedmatrix.com/projects/core/documentation/howto/index.html

And then perhaps tell us in detail what you want to achive so that
the wizards are able to point you in the right direction.

I can't tell if this is up to date:
http://www.itamarst.org/writings/etech04/twisted_internet-0.html


Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From bob at redivi.com  Tue Jul 12 05:09:24 2005
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 12 Jul 2005 01:09:24 -1000
Subject: [Twisted-Python] exceptions in adbapi
In-Reply-To: <F92274058556DE42B94B148EEFB9183949E779@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB9183949E779@exchange-03.suedkurier.de>
Message-ID: <2ED2873A-BB22-4ADD-B2AB-BBC520284C4C@redivi.com>


On Jul 11, 2005, at 9:14 PM, <Henning.Ramm at mediapro-gmbh.de>  
<Henning.Ramm at mediapro-gmbh.de> wrote:

>
>
>>> Any hints?
>>>
>>
>> These exceptions are happening in your Deferred callbacks. You  
>> need to
>> attach an error handler (the asynchronous counterpart to an except:
>> clause) to the deferred you get back as a result of your adbapi call.
>>
>
> Sure, that's what I do everywhere where I see a Deferred.
> But they don't catch these exceptions anyway.

errbacks catch exceptions attached to deferreds.  There are no  
exceptions that will skip over errbacks.  If your errbacks are not  
being triggered, you're not putting them in the correct location in  
the deferred callback chain.

-bob




From Henning.Ramm at mediapro-gmbh.de  Tue Jul 12 05:35:11 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Tue, 12 Jul 2005 13:35:11 +0200
Subject: [Twisted-Python] exceptions in adbapi
Message-ID: <F92274058556DE42B94B148EEFB9183949E77E@exchange-03.suedkurier.de>

>errbacks catch exceptions attached to deferreds.  There are no  
>exceptions that will skip over errbacks.  If your errbacks are not  
>being triggered, you're not putting them in the correct location in  
>the deferred callback chain.

My mistake was to set log.error as errback in some locations,
and that lead to the quoted messages without proper origin.
After some hours of analyzing and refactoring I got rid of those stuff.

Sorry for bothering you.

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.




From foom at fuhm.net  Tue Jul 12 08:41:00 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 12 Jul 2005 10:41:00 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <426B61E9-D6BD-49DD-BEB8-09CA32389BAA@fuhm.net>

Bug summary
______________________
Since 2005-07-06 04:28:36.250000:
Bugs opened: 3   Bugs closed: 0   Total open bugs: 401 (+3)
   Urgent: 9 (+0)
   Bug: 171 (+1)
   Feature: 144 (+1)
   Wish: 77 (+1)

New / Reopened Bugs
______________________
                     ==== Bug ====
[MAIL] IMAP Client does not seem to handle unsolicited server  
responses  (4 days ago)
        http://twistedmatrix.com/bugs/issue1105 opened by cablehead

                     ==== Feature ====
[PATCH] make example in howto/process.xhtml more clear  (yesterday)
        http://twistedmatrix.com/bugs/issue1106 opened by headly

                     ==== Wish ====
seconde in log format.  (6 days ago)
        http://twistedmatrix.com/bugs/issue1104 opened by stilly

Bugs Closed
______________________




From jarrod.roberson at gmail.com  Tue Jul 12 10:21:48 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Tue, 12 Jul 2005 12:21:48 -0400
Subject: [Twisted-Python] twisted.names and multicast DNS
In-Reply-To: <fbabe38317706cf3710605dcdf39d940@froup.com>
References: <s2d061b0.031@gwcl-21.scu.edu>
	<42D2B612.2020205@corp.earthlink.net>
	<5606E92F-B4E8-49A1-BBC3-8929CA6FD054@redivi.com>
	<fbabe38317706cf3710605dcdf39d940@froup.com>
Message-ID: <2389d473050712092125528a2a@mail.gmail.com>

On 7/11/05, Tim Allen <screwtape at froup.com> wrote:
> 
> On 12 Jul 2005, at 05:57, Bob Ippolito wrote:
> > Alternatively, if you're using a Mac, it's pretty trivial to just use
> > the NSNetService stuff. You're more or less stuck supporting the OS X
> > APIs anyway if you want OS X support, since only one mDNS responder
> > can run on a given machine (well, IP address).
> 
> You've got me worried now - I've been doing all my testing on this G5
> running Panther. I haven't tried serving any mDNS records yet, but I
> can certainly watch all the traffic to and from the system-wide mDNS
> responder.
> 
> If I've got this far, am I going to be OK or do you know of some other
> brick-wall I'll hit later on?



it is multicast you have have multiple listeners on the same machine on the 
same group. 




-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050712/718d1c49/attachment.html>

From sc at linux.it  Tue Jul 12 15:16:14 2005
From: sc at linux.it (Stefano Canepa)
Date: Tue, 12 Jul 2005 23:16:14 +0200
Subject: [Twisted-Python] need help getting started with Twisted
In-Reply-To: <253af2fb0507110847286b4723@mail.gmail.com>
References: <42C97646.3040203@fettig.net>
	<253af2fb0507110847286b4723@mail.gmail.com>
Message-ID: <1121202974.19567.4.camel@localhost.localdomain>

Il giorno lun, 11/07/2005 alle 11.47 -0400, Shimon Rura ha scritto:
> Hi all,
> 
> I'm starting to work on a new server application, and I think Twisted
> may be a useful platform to build on.  I've been having a hard time
> figuring out where to start, though, as my experience is mostly in
> database-backed web applications and Twisted seems rather large.  I
> found myself wishing there was an O'Reilly book on Twisted, and was
> happy to read the message below on the mailing list.
> 
> Abe, is there any way a newbie like me can get (or buy) a pre-print of
> your book?
> 
> Can anyone recommend other resources or tutorials for newbies?  The
> documentation on the Twisted website was confusing, in part because
> it's divided into many different projects and I don't know how those
> projects relate or if some of them have been superseded by newer ones.
> 
> thanks,
> Shimon Rura

Shimon,
	did you read
http://twistedmatrix.com/users/warner/doc-latest/core/howto/, it's a
little bit hard at start but it's worth reading.

I started using twisted two months ago and I realeasing its first
application based on it.

Bye
Stefano 
-- 
Stefano Canepa aka sc: sc at linux.it  http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virtù di un programmatore: pigrizia, impazienza e arroganza.
                                                              (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20050712/d29b9ab7/attachment.sig>

From richard at reticulatus.plus.com  Tue Jul 12 16:00:44 2005
From: richard at reticulatus.plus.com (Richard)
Date: Tue, 12 Jul 2005 23:00:44 +0100
Subject: [Twisted-Python] Twisted client to access proxy web server
Message-ID: <000b01c5872d$26b373a0$0201a8c0@blade>

I've used twisted.web.client.getPage() and downloadPage() to get pages from
a web server, but was wondering how to use Twisted to get pages from a proxy
web server.

Can anyone point me at some example Twisted code for a client to access a
proxy-server?




From z3p at twistedmatrix.com  Tue Jul 12 23:26:54 2005
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Wed, 13 Jul 2005 01:26:54 -0400
Subject: [Twisted-Python] conch example of sftp
In-Reply-To: <danjqf$qhv$1@sea.gmane.org>
References: <danjqf$qhv$1@sea.gmane.org>
Message-ID: <1121232414.5108.5.camel@petra>

On Sat, 2005-07-09 at 01:28 -0300, Gustavo Rahal wrote:
> Hi
> 
> Does anyone has or know where I can find sftp code examples? AFAIK conch
> is able of doing files transfers over a ssh connection.
> 
> I know it may appear that I'm laisy but I don't have much experience
> with twisted nor conch and the documentation is not that good.

The best examples are the cftp client, which lives in
twisted/conch/scripts/cftp.py, and the tests, which live in
twisted/conch/test/test_cftp.py and
twisted/conch/test/test_filetransfer.py

If you have any specific questions, feel free to ask here on the list.
-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/  _o)
//\    z3p at twistedmatrix.com        /\\
V_/_   AIM: z3penguin              _\_V->
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20050713/e235c6dd/attachment.sig>

From npk.gangadhar at gmail.com  Wed Jul 13 11:14:05 2005
From: npk.gangadhar at gmail.com (Gangadhar NPK)
Date: Wed, 13 Jul 2005 22:44:05 +0530
Subject: [Twisted-Python] Twisted client to access proxy web server
In-Reply-To: <000b01c5872d$26b373a0$0201a8c0@blade>
References: <000b01c5872d$26b373a0$0201a8c0@blade>
Message-ID: <61b4e70f05071310147316f801@mail.gmail.com>

I am not well versed in Twisted, but was wondering - is there a
difference (and if so what could it be) about where the page is being
serviced from. Apart from the caching considerations and may be the
date times, what can be different from a simple web server and a proxy
web server ?
Can someone please explain.

On 7/13/05, Richard <richard at reticulatus.plus.com> wrote:
> I've used twisted.web.client.getPage() and downloadPage() to get pages from
> a web server, but was wondering how to use Twisted to get pages from a proxy
> web server.
> 
> Can anyone point me at some example Twisted code for a client to access a
> proxy-server?
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at divmod.com  Wed Jul 13 11:40:28 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 13 Jul 2005 13:40:28 -0400
Subject: [Twisted-Python] Twisted client to access proxy web server
In-Reply-To: <61b4e70f05071310147316f801@mail.gmail.com>
Message-ID: <20050713174028.26278.545015153.divmod.quotient.11007@ohm>

On Wed, 13 Jul 2005 22:44:05 +0530, Gangadhar NPK <npk.gangadhar at gmail.com> wrote:
>I am not well versed in Twisted, but was wondering - is there a
>difference (and if so what could it be) about where the page is being
>serviced from. Apart from the caching considerations and may be the
>date times, what can be different from a simple web server and a proxy
>web server ?
>Can someone please explain.

The difference is that, normally, when retrieving http://hostA/foo/, you connect to hostA.  When using proxy server hostB to do the same thing, you connect to hostB.

>
>On 7/13/05, Richard <richard at reticulatus.plus.com> wrote:
>> I've used twisted.web.client.getPage() and downloadPage() to get pages from
>> a web server, but was wondering how to use Twisted to get pages from a proxy
>> web server.
>>
>> Can anyone point me at some example Twisted code for a client to access a
>> proxy-server?
>>

getPage() is a rather limited interface.  It does not support proxy servers.  The classes which it is implemented in terms of may be usable in constructing an API which does support proxy servers (as well as all sorts of other stuff, like connection caching).

You may want to pursue this topic further on the twisted web mailing list (<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web>).

Jp



From mary-twisted at puzzling.org  Thu Jul 14 00:38:03 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 14 Jul 2005 16:38:03 +1000
Subject: [Twisted-Python] Reminder: Australian Twisted Sprint #2: 19th -
	21st August 2005, Sydney
In-Reply-To: <20050711053344.GQ9691@sourdust.home.puzzling.org>
References: <20050711053344.GQ9691@sourdust.home.puzzling.org>
Message-ID: <20050714063803.GA20866@home.puzzling.org>

On Mon, Jul 11, 2005, Mary Gardiner wrote:
> Still no final word on exactly where in Sydney this sprint will be
> held, but it *will* be held and will be on these dates, so I'm posting
> again to give people time to book flights before they get expensive.

The location is now finalised: it will be held at the city campus of the
University of Technology Sydney (UTS). This is close to the business
district and a short walk from Central Station, Sydney's major train
interchange. It's also pretty convienient for buses and the like and
nice and near some of Sydney's better cheap eating.

I'll update the wiki with accommodation suggestions soon.

Many thanks to Matthew Beauregard of UTS ProgSoc[1] for organising the room
bookings for us.

-Mary

[1] http://www.progsoc.uts.edu.au/



From radeex at gmail.com  Thu Jul 14 00:43:31 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 14 Jul 2005 16:43:31 +1000
Subject: [Twisted-Python] Reminder: Australian Twisted Sprint #2: 19th -
	21st August 2005, Sydney
In-Reply-To: <20050714063803.GA20866@home.puzzling.org>
References: <20050711053344.GQ9691@sourdust.home.puzzling.org>
	<20050714063803.GA20866@home.puzzling.org>
Message-ID: <60ed19d405071323435b42cb43@mail.gmail.com>

On 7/14/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> The location is now finalised: it will be held at the city campus of the
> University of Technology Sydney (UTS). This is close to the business
> district and a short walk from Central Station, Sydney's major train
> interchange. It's also pretty convienient for buses and the like and
> nice and near some of Sydney's better cheap eating.
> 
> I'll update the wiki with accommodation suggestions soon.
> 
> Many thanks to Matthew Beauregard of UTS ProgSoc[1] for organising the room
> bookings for us.

Hooray! Looking forward to seeing everyone / meeting new people.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From nkeric at gmail.com  Thu Jul 14 20:37:04 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Fri, 15 Jul 2005 10:37:04 +0800
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
Message-ID: <43c0d2b50507141937100f0aca@mail.gmail.com>

Hi all!

This question may not be suitable to ask here, but please help me if
you can, thanks!

I have written a server with twisted. The server contains some classes
which are responsible for handling protocol related stuffs (e.g.
packing/unpacking messages).

We've already has an app which was written in delphi, we want to
extend it to be able to communicate with this server.

Here comes the question: is it possible to build the protocol related
classes from the server to be some kind of .dll, so that the app could
invoke them, reuse them to handle the protocol related stuffs?

Any infomation would be warmly welcome, thanks in advance!

- Eric



From bob at redivi.com  Thu Jul 14 21:04:26 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 14 Jul 2005 17:04:26 -1000
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
In-Reply-To: <43c0d2b50507141937100f0aca@mail.gmail.com>
References: <43c0d2b50507141937100f0aca@mail.gmail.com>
Message-ID: <1C1C9A85-EFF5-4E22-90EB-63AAB2E72BBB@redivi.com>


On Jul 14, 2005, at 4:37 PM, Eric Hsu wrote:

> This question may not be suitable to ask here, but please help me if
> you can, thanks!
>
> I have written a server with twisted. The server contains some classes
> which are responsible for handling protocol related stuffs (e.g.
> packing/unpacking messages).
>
> We've already has an app which was written in delphi, we want to
> extend it to be able to communicate with this server.
>
> Here comes the question: is it possible to build the protocol related
> classes from the server to be some kind of .dll, so that the app could
> invoke them, reuse them to handle the protocol related stuffs?
>
> Any infomation would be warmly welcome, thanks in advance!

The best way to do this is probably "server-side" COM.  See win32all  
and ctypes, doesn't really have much of anything to do with Twisted  
at that point.

-bob




From andrew-twisted at puzzling.org  Thu Jul 14 21:11:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 15 Jul 2005 13:11:53 +1000
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
In-Reply-To: <43c0d2b50507141937100f0aca@mail.gmail.com>
References: <43c0d2b50507141937100f0aca@mail.gmail.com>
Message-ID: <20050715031153.GB9898@trogdor.home.puzzling.org>

On Fri, Jul 15, 2005 at 10:37:04AM +0800, Eric Hsu wrote:
[...]
> 
> Here comes the question: is it possible to build the protocol related
> classes from the server to be some kind of .dll, so that the app could
> invoke them, reuse them to handle the protocol related stuffs?
> 
> Any infomation would be warmly welcome, thanks in advance!

On Windows, you could probably achieve this with the pythoncom facilities of
Mark Hammond's win32all package.  Delphi apparently works quite well with
COM.

I haven't touched Windows for quite a while though, so I can't really help
with the details of doing that.

-Andrew.




From flashbuster at gmail.com  Fri Jul 15 08:04:09 2005
From: flashbuster at gmail.com (Sebastian Schulze)
Date: Fri, 15 Jul 2005 16:04:09 +0200
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
In-Reply-To: <20050715031153.GB9898@trogdor.home.puzzling.org>
References: <43c0d2b50507141937100f0aca@mail.gmail.com>
	<20050715031153.GB9898@trogdor.home.puzzling.org>
Message-ID: <c2959a42050715070420e851be@mail.gmail.com>

It's just a guess, but i would think you could write a wrapper for this
with swig (www.swig.org) or boost
(http://www.boost.org/libs/python/doc/index.html)

greets, Sebastian

2005/7/15, Andrew Bennetts <andrew-twisted at puzzling.org>:
> On Fri, Jul 15, 2005 at 10:37:04AM +0800, Eric Hsu wrote:
> [...]
> >
> > Here comes the question: is it possible to build the protocol related
> > classes from the server to be some kind of .dll, so that the app could
> > invoke them, reuse them to handle the protocol related stuffs?
> >
> > Any infomation would be warmly welcome, thanks in advance!
> 
> On Windows, you could probably achieve this with the pythoncom facilities of
> Mark Hammond's win32all package.  Delphi apparently works quite well with
> COM.
> 
> I haven't touched Windows for quite a while though, so I can't really help
> with the details of doing that.
> 
> -Andrew.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From itamar at itamarst.org  Sat Jul 16 09:24:23 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 16 Jul 2005 11:24:23 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14171 - Simplify and fix
	horribly broken deferToThread tests
In-Reply-To: <E1DtoD6-0001Oa-00@wolfwood>
References: <E1DtoD6-0001Oa-00@wolfwood>
Message-ID: <1121527463.7870.19.camel@localhost.localdomain>

On Sat, 2005-07-16 at 09:04 -0600, Jp Calderone wrote:
> Author: exarkun
> Date: Sat Jul 16 09:04:11 2005
> New Revision: 14171
> 
> Modified:
>    trunk/twisted/test/test_threads.py
> Log:
> Simplify and fix horribly broken deferToThread tests

This won't catch bugs where the Deferred is never callback()ed.




From exarkun at divmod.com  Sat Jul 16 11:09:05 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 16 Jul 2005 13:09:05 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14171 - Simplify and fix
	horribly broken deferToThread tests
In-Reply-To: <1121527463.7870.19.camel@localhost.localdomain>
Message-ID: <20050716170905.26278.1006827823.divmod.quotient.13052@ohm>

On Sat, 16 Jul 2005 11:24:23 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Sat, 2005-07-16 at 09:04 -0600, Jp Calderone wrote:
>> Author: exarkun
>> Date: Sat Jul 16 09:04:11 2005
>> New Revision: 14171
>>
>> Modified:
>>    trunk/twisted/test/test_threads.py
>> Log:
>> Simplify and fix horribly broken deferToThread tests
>
>This won't catch bugs where the Deferred is never callback()ed.
>

Trial will eventually give up on the Deferred and fail the test.  It'll take a lot longer than the 1 second it previously took, but I still think it's a good change, since the previous version *always* took the full second (the loop never exited early), and probably wasn't doing threadpool initialization properly.

Jp



From andy at thecablelounge.com  Sat Jul 16 19:14:58 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Sun, 17 Jul 2005 11:14:58 +1000
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
In-Reply-To: <43c0d2b50507141937100f0aca@mail.gmail.com>
References: <43c0d2b50507141937100f0aca@mail.gmail.com>
Message-ID: <42D9B112.4000904@thecablelounge.com>

Eric Hsu wrote:

> Here comes the question: is it possible to build the protocol related
> classes from the server to be some kind of .dll, so that the app could
> invoke them, reuse them to handle the protocol related stuffs?

An alternative approach might be to expose your server's functionality 
via xmlrpc.  Not sure what writing xmlrpc clients in delphi is like; but 
it might be more pleasant than trying to generate dlls and makes other 
things possible.

good luck :)

Andy.



From nkeric at gmail.com  Sun Jul 17 21:32:38 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 18 Jul 2005 11:32:38 +0800
Subject: [Twisted-Python] Is it possible to build a .dll for other win32
	program/language to invoke?
In-Reply-To: <42D9B112.4000904@thecablelounge.com>
References: <43c0d2b50507141937100f0aca@mail.gmail.com>
	<42D9B112.4000904@thecablelounge.com>
Message-ID: <43c0d2b50507172032653bdef4@mail.gmail.com>

Big thanks to Bob, Andrew, Sabastian and Andy!

I found the server-side com would be helpful to us: wrap the python
code to be a server-side com, and let other win32 programs to invoke
it.

It's very kind of you providing me so much helpful informations, thank
you all guys :D

Best regards!

- Eric



From nkeric at gmail.com  Sun Jul 17 21:46:42 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 18 Jul 2005 11:46:42 +0800
Subject: [Twisted-Python] Any tutorial/sample-code for khashmir or DHT?
Message-ID: <43c0d2b505071720467da10002@mail.gmail.com>

Hi all,

I'm trying to learn the DHT (distributed hash table) which could be
used to build up a decentralize network.

I knew khashmir (http://khashmir.sourceforge.net) which has
implemented DHT with twisted. However, the project page of khashmir
presents no release, no docs, no sample code, no tutorial... but, it
has be included into the Bittorrent sources to implement the
"trackless" feature.

I'm wondering if someone could provide me or point me to some
sample-code or tutorial helping me to learn khashmir? TIA :)

Best Regards

- Eric



From stanc at al.com.au  Sun Jul 17 23:51:14 2005
From: stanc at al.com.au (Astan Chee)
Date: Mon, 18 Jul 2005 15:51:14 +1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
Message-ID: <42DB4352.2020803@al.com.au>

Hi Guys,
Im trying to make a psudo SSH client GUI, but it seems that I although I 
can 'ls' to a remote machine using twisted.conch, I cant `ls -al`. Also 
I cant seem to to ssh commands that have spaces in them. Although Im 
using a windows environment to SSH, i dont think that is the problem.
Here is a snippet of my code. Obviously I've already called 
reactor.run() and included appropriate modules and variables. I dont 
understand why ls works and ls -al doesnt. Also I was wondering if there 
are any existing command line SSH clients written with twisted similar 
to putty, but written in python.
Thanks!

class SimpleTransport(transport.SSHClientTransport):
    def verifyHostKey(self, hostKey, fingerprint):
        print 'host key fingerprint: %s' % fingerprint
        return defer.succeed(1)

    def connectionSecure(self):
        self.requestService(
            SimpleUserAuth(USER,
                SimpleConnection()))

class SimpleUserAuth(userauth.SSHUserAuthClient):
    def getPassword(self):
        return defer.succeed(PASSWORD)

    def getGenericAnswers(self, name, instruction, questions):
        print 'Name %s' % name
        print 'Instruction %s' % instruction
        answers = []
        for prompt, echo in questions:
            if echo:
                answer = raw_input(prompt)
            else:
                answer = getpass.getpass(prompt)
            answers.append(answer)
        return defer.succeed(answers)
           
    def getPublicKey(self):
        path = os.path.expanduser('~/.ssh/id_dsa')
        # this works with rsa too
        # just change the name here and in getPrivateKey
        if not os.path.exists(path) or self.lastPublicKey:
            # the file doesn't exist, or we've tried a public key
            return
        return keys.getPublicKeyString(path+'.pub')

    def getPrivateKey(self):
        path = os.path.expanduser('~/.ssh/id_dsa')
        return defer.succeed(keys.getPrivateKeyObject(path))

class SimpleConnection(connection.SSHConnection):
    def serviceStarted(self):
        self.openChannel(TrueChannel(2**16, 2**15, self))
        self.openChannel(FalseChannel(2**16, 2**15, self))
        self.openChannel(LsChannel(2**16, 2**15, self))

class TrueChannel(channel.SSHChannel):
    name = 'session' # needed for commands

    def openFailed(self, reason):
        print 'true failed', reason
   
    def channelOpen(self, ignoredData):
        self.conn.sendRequest(self, 'exec', common.NS('true'))

    def request_exit_status(self, data):
        status = struct.unpack('>L', data)[0]
        #print 'true status was: %s' % status
        self.loseConnection()

class FalseChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'false failed', reason

    def channelOpen(self, ignoredData):
        self.conn.sendRequest(self, 'exec', common.NS('false'))

    def request_exit_status(self, data):
        status = struct.unpack('>L', data)[0]
        #print 'false status was: %s' % status
        self.loseConnection()
       
class LsChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'false failed', reason

    def channelOpen(self, ignoredData):
        self.conn.sendRequest(self, 'exec', common.NS('ls -al'))
        self.data = ''

    def dataReceived(self, data):
        self.data += data

    def closed(self):
        print 'got data from ls: %s' % repr(self.data)
        self.loseConnection()
        reactor.stop()
       
class CatChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'echo failed', reason

    def channelOpen(self, ignoredData):
        self.data = ''
        d = self.conn.sendRequest(self, 'exec', common.NS('cat'), 
wantReply = 1)
        d.addCallback(self._cbRequest)

    def _cbRequest(self, ignored):
        self.write('hello conch\n')
        self.conn.sendEOF(self)

    def dataReceived(self, data):
        self.data += data

    def closed(self):
        print 'got data from cat: %s' % repr(self.data)
        self.loseConnection()




From stanc at al.com.au  Mon Jul 18 01:02:52 2005
From: stanc at al.com.au (Astan Chee)
Date: Mon, 18 Jul 2005 17:02:52 +1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DB4352.2020803@al.com.au>
References: <42DB4352.2020803@al.com.au>
Message-ID: <42DB541C.20507@al.com.au>

Whoops,
I forgot to add the wantReply=1 there...
anyway, Another question I have is if the password is incorrect, quit 
the python script...

currently the getPassword function looks like this
RETRIES = 0
def getPassword(self):
        global RETRIES
        if RETRIES  == 0:
            RETRIES = 1
            return defer.succeed(PASSWORD)
        else:           
            sys.exit(0)

But it keeps on giving this error:
Traceback (most recent call last):
  File "c:\Python24\lib\site-packages\twisted\python\context.py", line 
31, in ca
llWithContext
    return func(*args,**kw)
  File 
"c:\Python24\lib\site-packages\twisted\internet\selectreactor.py", line 1
39, in _doReadOrWrite
    why = getattr(selectable, method)()
  File "c:\Python24\lib\site-packages\twisted\internet\tcp.py", line 
351, in doR
ead
    return self.protocol.dataReceived(data)
  File "c:\Python24\Lib\site-packages\twisted\conch\ssh\transport.py", 
line 189,
 in dataReceived
    ord(packet[0]), packet[1:])
--- <exception caught here> ---
  File "c:\Python24\lib\site-packages\twisted\python\log.py", line 56, 
in callWi
thLogger
    return callWithContext({"system": lp}, func, *args, **kw)
  File "c:\Python24\lib\site-packages\twisted\python\log.py", line 41, 
in callWi
thContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "c:\Python24\lib\site-packages\twisted\python\context.py", line 
52, in ca
llWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "c:\Python24\lib\site-packages\twisted\python\context.py", line 
31, in ca
llWithContext
    return func(*args,**kw)
  File "c:\Python24\Lib\site-packages\twisted\conch\ssh\service.py", 
line 42, in
 packetReceived
    f(packet)
  File "c:\Python24\Lib\site-packages\twisted\conch\ssh\userauth.py", 
line 259,
in ssh_USERAUTH_FAILURE
    if method not in self.authenticatedWith and self.tryAuth(method):
  File "c:\Python24\Lib\site-packages\twisted\conch\ssh\userauth.py", 
line 231,
in tryAuth
    return f()
  File "c:\Python24\Lib\site-packages\twisted\conch\ssh\userauth.py", 
line 344,
in auth_password
    d = self.getPassword()
  File "D:\stanc_vault\dev\WHIP\whip.py", line 67, in getPassword
    sys.exit(1)
exceptions.SystemExit: 1

Astan Chee wrote:

> Hi Guys,
> Im trying to make a psudo SSH client GUI, but it seems that I although 
> I can 'ls' to a remote machine using twisted.conch, I cant `ls -al`. 
> Also I cant seem to to ssh commands that have spaces in them. Although 
> Im using a windows environment to SSH, i dont think that is the problem.
> Here is a snippet of my code. Obviously I've already called 
> reactor.run() and included appropriate modules and variables. I dont 
> understand why ls works and ls -al doesnt. Also I was wondering if 
> there are any existing command line SSH clients written with twisted 
> similar to putty, but written in python.
> Thanks!
>
> class SimpleTransport(transport.SSHClientTransport):
>    def verifyHostKey(self, hostKey, fingerprint):
>        print 'host key fingerprint: %s' % fingerprint
>        return defer.succeed(1)
>
>    def connectionSecure(self):
>        self.requestService(
>            SimpleUserAuth(USER,
>                SimpleConnection()))
>
> class SimpleUserAuth(userauth.SSHUserAuthClient):
>    def getPassword(self):
>        return defer.succeed(PASSWORD)
>
>    def getGenericAnswers(self, name, instruction, questions):
>        print 'Name %s' % name
>        print 'Instruction %s' % instruction
>        answers = []
>        for prompt, echo in questions:
>            if echo:
>                answer = raw_input(prompt)
>            else:
>                answer = getpass.getpass(prompt)
>            answers.append(answer)
>        return defer.succeed(answers)
>              def getPublicKey(self):
>        path = os.path.expanduser('~/.ssh/id_dsa')
>        # this works with rsa too
>        # just change the name here and in getPrivateKey
>        if not os.path.exists(path) or self.lastPublicKey:
>            # the file doesn't exist, or we've tried a public key
>            return
>        return keys.getPublicKeyString(path+'.pub')
>
>    def getPrivateKey(self):
>        path = os.path.expanduser('~/.ssh/id_dsa')
>        return defer.succeed(keys.getPrivateKeyObject(path))
>
> class SimpleConnection(connection.SSHConnection):
>    def serviceStarted(self):
>        self.openChannel(TrueChannel(2**16, 2**15, self))
>        self.openChannel(FalseChannel(2**16, 2**15, self))
>        self.openChannel(LsChannel(2**16, 2**15, self))
>
> class TrueChannel(channel.SSHChannel):
>    name = 'session' # needed for commands
>
>    def openFailed(self, reason):
>        print 'true failed', reason
>      def channelOpen(self, ignoredData):
>        self.conn.sendRequest(self, 'exec', common.NS('true'))
>
>    def request_exit_status(self, data):
>        status = struct.unpack('>L', data)[0]
>        #print 'true status was: %s' % status
>        self.loseConnection()
>
> class FalseChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'false failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.conn.sendRequest(self, 'exec', common.NS('false'))
>
>    def request_exit_status(self, data):
>        status = struct.unpack('>L', data)[0]
>        #print 'false status was: %s' % status
>        self.loseConnection()
>       class LsChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'false failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.conn.sendRequest(self, 'exec', common.NS('ls -al'))
>        self.data = ''
>
>    def dataReceived(self, data):
>        self.data += data
>
>    def closed(self):
>        print 'got data from ls: %s' % repr(self.data)
>        self.loseConnection()
>        reactor.stop()
>       class CatChannel(channel.SSHChannel):
>    name = 'session'
>
>    def openFailed(self, reason):
>        print 'echo failed', reason
>
>    def channelOpen(self, ignoredData):
>        self.data = ''
>        d = self.conn.sendRequest(self, 'exec', common.NS('cat'), 
> wantReply = 1)
>        d.addCallback(self._cbRequest)
>
>    def _cbRequest(self, ignored):
>        self.write('hello conch\n')
>        self.conn.sendEOF(self)
>
>    def dataReceived(self, data):
>        self.data += data
>
>    def closed(self):
>        print 'got data from cat: %s' % repr(self.data)
>        self.loseConnection()
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From andrew-twisted at puzzling.org  Mon Jul 18 01:22:11 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 18 Jul 2005 17:22:11 +1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DB541C.20507@al.com.au>
References: <42DB4352.2020803@al.com.au> <42DB541C.20507@al.com.au>
Message-ID: <20050718072211.GE9898@trogdor.home.puzzling.org>

On Mon, Jul 18, 2005 at 05:02:52PM +1000, Astan Chee wrote:
> Whoops,
> I forgot to add the wantReply=1 there...
> anyway, Another question I have is if the password is incorrect, quit 
> the python script...
> 
> currently the getPassword function looks like this
> RETRIES = 0
> def getPassword(self):
>        global RETRIES
>        if RETRIES  == 0:
>            RETRIES = 1
>            return defer.succeed(PASSWORD)
>        else:           
>            sys.exit(0)

Use reactor.stop() rather than sys.exit(0).

-Andrew.




From p.mayers at imperial.ac.uk  Mon Jul 18 01:29:33 2005
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 18 Jul 2005 08:29:33 +0100
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DB541C.20507@al.com.au>
References: <42DB4352.2020803@al.com.au> <42DB541C.20507@al.com.au>
Message-ID: <42DB5A5D.9070708@imperial.ac.uk>

Astan Chee wrote:
> def getPassword(self):
>        global RETRIES
>        if RETRIES  == 0:
>            RETRIES = 1
>            return defer.succeed(PASSWORD)
>        else:                      sys.exit(0)
> 
> But it keeps on giving this error:
Yes, that's what sys.exit does, raise a SystemExit exception.

If you actually want a non-zero exit status, you need to reactor.stop 
and save your exit status somewhere, e.g.

exitstatus=0

def thing():
     global exitstatus
     if fail:
         exitstatus = 1
     reactor.stop()

reactor.run()
# We'll only get here once reactor.stop is called
sys.exit(exitstatus)

A trivial bit of thought can solve this more elegantly than a global (gak!)



From bob at redivi.com  Mon Jul 18 01:37:41 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 17 Jul 2005 21:37:41 -1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DB541C.20507@al.com.au>
References: <42DB4352.2020803@al.com.au> <42DB541C.20507@al.com.au>
Message-ID: <303DD736-E804-4C3E-B628-A164A07A749F@redivi.com>


On Jul 17, 2005, at 9:02 PM, Astan Chee wrote:

> Whoops,
> I forgot to add the wantReply=1 there...
> anyway, Another question I have is if the password is incorrect,  
> quit the python script...
>
> currently the getPassword function looks like this
> RETRIES = 0
> def getPassword(self):
>        global RETRIES
>        if RETRIES  == 0:
>            RETRIES = 1
>            return defer.succeed(PASSWORD)
>        else:                      sys.exit(0)

reactor.stop() is what you want here.

-bob




From tdickenson at devmail.geminidataloggers.co.uk  Mon Jul 18 03:54:57 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Mon, 18 Jul 2005 10:54:57 +0100
Subject: [Twisted-Python] threadedselectreactor - shutting down the foreign
	event loop
Message-ID: <200507181054.57558.tdickenson@devmail.geminidataloggers.co.uk>

Im looking at moving my PyQt app to threadedselectreactor. Previously I was 
keeping twisted and Qt in seperate threads. Avoiding the need to cross that 
thread boundary has been a great simplification, but Im having some problems 
relating to the shutdown of my foreign event loop.

The examples such as 
http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/threadedselect/pygamedemo.py?view=auto&rev=13596
handle this by:
a. Calling reactor.stop() when there is a GUI shutdown request, 
b. Using reactor.addSystemEventTrigger to shut down the foreign event loop 
after reactor shutdown.

That approach seems untenable for me, for several reasons:
1. Too invasive. I dont want to pollute Qt code with Twisted details.
2. If my app is runing as a COM server then Pythoncom handles the main loop, 
not Qt. More pollution.
3. The reactor doesnt get shutdown if the foreign event loop shuts down for 
some other reason. This leads to deadlocks when the threading module tries to 
join the threads managed by the threadpool module, because the threadpool 
does know to close those threads.

Im having moderate success with the following alternative structure which 
closes the reactor *after* whatever foreign event loop has exited, but it 
feels like I am relying on undocumented reactor implementation accidents 
here:

from twisted.internet.threadedselectreactor import install as twisted_install
reactor = twisted_install()
reactor.interleave(trigger)
try:
        my_event_loop_in_here()
finally:
	# Request that the reactor stops itself. Internally the
        # reactor uses self.callLater, so shutdown is not complete
        # when this method returns.
        reactor.stop()
        # One call to reactor.iterate is sufficient to complete
        # All reactor shutdown events. 
        reactor.iterate()
        # Reactor is now fully shutdown

Is there a better approach?

Should something like my finally block be included as a method of 
threadedselectreactor?

Is it right for reactor.stop to return before the shutdown is complete?

-- 
Toby Dickenson



From bob at redivi.com  Mon Jul 18 04:43:25 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 18 Jul 2005 00:43:25 -1000
Subject: [Twisted-Python] threadedselectreactor - shutting down the
	foreign event loop
In-Reply-To: <200507181054.57558.tdickenson@devmail.geminidataloggers.co.uk>
References: <200507181054.57558.tdickenson@devmail.geminidataloggers.co.uk>
Message-ID: <1B4260BA-FD53-44C7-926B-9E0ED67A694C@redivi.com>

On Jul 17, 2005, at 11:54 PM, Toby Dickenson wrote:

> Im looking at moving my PyQt app to threadedselectreactor.  
> Previously I was
> keeping twisted and Qt in seperate threads. Avoiding the need to  
> cross that
> thread boundary has been a great simplification, but Im having some  
> problems
> relating to the shutdown of my foreign event loop.
>
> The examples such as
> http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/ 
> threadedselect/pygamedemo.py?view=auto&rev=13596
> handle this by:
> a. Calling reactor.stop() when there is a GUI shutdown request,
> b. Using reactor.addSystemEventTrigger to shut down the foreign  
> event loop
> after reactor shutdown.

This is currently the only supported and recommended way.

> That approach seems untenable for me, for several reasons:
> 1. Too invasive. I dont want to pollute Qt code with Twisted details.
> 2. If my app is runing as a COM server then Pythoncom handles the  
> main loop,
> not Qt. More pollution.
> 3. The reactor doesnt get shutdown if the foreign event loop shuts  
> down for
> some other reason. This leads to deadlocks when the threading  
> module tries to
> join the threads managed by the threadpool module, because the  
> threadpool
> does know to close those threads.

1. I guess that's too bad, then.  It's less invasive than the  
alternatives (using an event-loop specific reactor, managing threads  
yourself).  It's also really the only reliable and correct way to do  
it, see below.

2. Each different style of foreign event loop is going to need a  
different waker function and shutdown code.  That's life.  There is  
no happy magical cross-platform-toolkit-API to solve this problem.   
It's amazing that threadedselectreactor can do what it does so  
generically with just two minor integration hooks.  In the same way  
your application can start up in two different modes, you're going to  
need different Twisted integration code.

3. The "pollution" is really quite minimal, you add a couple lines to  
defer shutdown of the foreign event loop until the reactor is has  
properly shut down.  If the foreign event loop shuts down out of your  
control, you probably have other issues.

> Im having moderate success with the following alternative structure  
> which
> closes the reactor *after* whatever foreign event loop has exited,  
> but it
> feels like I am relying on undocumented reactor implementation  
> accidents
> here:

You are relying on exactly implementation accidents here.  Even with  
the implementation accidents that make it appear to work, your  
proposed alternative has edge cases that will be rare and impossible  
to reproduce (yay threads).

> from twisted.internet.threadedselectreactor import install as  
> twisted_install
> reactor = twisted_install()
> reactor.interleave(trigger)
> try:
>         my_event_loop_in_here()
> finally:
>     # Request that the reactor stops itself. Internally the
>         # reactor uses self.callLater, so shutdown is not complete
>         # when this method returns.
>         reactor.stop()
>         # One call to reactor.iterate is sufficient to complete
>         # All reactor shutdown events.
>         reactor.iterate()
>         # Reactor is now fully shutdown
>
> Is there a better approach?

The problem is that the waker function (trigger in the above) can be  
called at any time -- and it's always called from another thread.  In  
order to shut down the reactor properly, the waker function needs to  
continue to work for the duration of shutdown.  reactor.stop() can  
take many runloop iterations to complete, as it can involve arbitrary  
deferreds and even new network I/O.  If the foreign event loop has  
shut down already, it probably won't work, and you won't be able to  
do a proper shutdown.

It's possible, I guess, use a proxy for the waker function that uses  
a thread lock so that you can reliably swap out the real waker at the  
right time.  However, you must somehow acquire that lock before your  
foreign event loop has shut down (which is of the same level of  
invasiveness as the recommended solution!) so that it will block the  
proxy call until a new waker is installed.  In the finally clause,  
you'd install a new trivial waker (the apply function would work) and  
release that lock so that any pending calls would complete.

With any naive solution, it's possible for a message between the  
threadedselectreactor's worker thread and the main thread could get  
lost, and then you have a reactor that is in an undefined state.  The  
waker function must work, or else the reactor won't.

Note that your above code has another problem: it calls  
reactor.interleave too early.  For the same reason you will have edge  
cases during shutdown, you can (in some circumstances) have edge  
cases during startup if the waker function does not work properly  
before you have entered the foreign event loop!  Note that in all of  
the examples, reactor.interleave(...) is called while the foreign  
event loop has already begun (yay threads, again).

> Should something like my finally block be included as a method of
> threadedselectreactor?

I doubt it, it's not really possible to make a correct one that's  
generic.  At least, I can't think of any correct way.  Correct  
patches accepted :)

> Is it right for reactor.stop to return before the shutdown is  
> complete?

Yes, always, even with the traditional reactors!  The reactor can not  
nest itself, nor can multiple reactors be used in the same process,  
so it wouldn't be possible for reactor.stop() to work correctly if it  
blocked.

-bob




From tdickenson at devmail.geminidataloggers.co.uk  Mon Jul 18 06:41:15 2005
From: tdickenson at devmail.geminidataloggers.co.uk (Toby Dickenson)
Date: Mon, 18 Jul 2005 13:41:15 +0100
Subject: [Twisted-Python] threadedselectreactor - shutting down the
	foreign event loop
In-Reply-To: <1B4260BA-FD53-44C7-926B-9E0ED67A694C@redivi.com>
References: <200507181054.57558.tdickenson@devmail.geminidataloggers.co.uk>
	<1B4260BA-FD53-44C7-926B-9E0ED67A694C@redivi.com>
Message-ID: <200507181341.15727.tdickenson@devmail.geminidataloggers.co.uk>

(resend)

On Monday 18 July 2005 11:43, Bob Ippolito wrote:
> On Jul 17, 2005, at 11:54 PM, Toby Dickenson wrote:

> > a. Calling reactor.stop() when there is a GUI shutdown request,
> > b. Using reactor.addSystemEventTrigger to shut down the foreign  
> > event loop
> > after reactor shutdown.
> 
> This is currently the only supported and recommended way.

Thanks for that clear statement.

> It's possible, I guess, use a proxy for the waker function that uses  
> a thread lock so that you can reliably swap out the real waker at the  
> right time.  However, you must somehow acquire that lock before your  
> foreign event loop has shut down (which is of the same level of  
> invasiveness as the recommended solution!) so that it will block the  
> proxy call until a new waker is installed.  In the finally clause,  
> you'd install a new trivial waker (the apply function would work) and  
> release that lock so that any pending calls would complete.

Yes, that is much neater.

My 'trigger' waker function is already queueing requests (it is used for more 
than just twisted integration) so I dont need to replace the waker - rather 
my finally clause needs to contain a new mini event loop that continues to 
processing my queue until the reactor is fully closed. As far as 
threadedselectreactor is concerned this looks no different to my normal event 
loop.

Thanks again,

-- 
Toby Dickenson



From hikenboots at gmail.com  Mon Jul 18 09:02:09 2005
From: hikenboots at gmail.com (J French)
Date: Mon, 18 Jul 2005 10:02:09 -0500
Subject: [Twisted-Python] High Level Twisted Question [Multiple Protocol
	Usage]
Message-ID: <35b7725f05071808029593c9e@mail.gmail.com>

I'm working with Twisted and getting my head around it but I still
have some general paradigm questions.

When using Twisted to create an application to run under twistd, is it
possible to implement more than one protocol?  For instance, If I
write a server which uses PB to interface with its python client, can
I then also check pop3 boxes from the same application / twistd process?

Put another way: When incorporating functionality into a server app
requiring multiple protocols (PB, SMTP, HTTP, etc.) what is the
standard way of effecting this?

Sorry for another newbie question and thanks for your time.



From jarrod.roberson at gmail.com  Mon Jul 18 10:09:02 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Mon, 18 Jul 2005 12:09:02 -0400
Subject: [Twisted-Python] High Level Twisted Question [Multiple Protocol
	Usage]
In-Reply-To: <35b7725f05071808029593c9e@mail.gmail.com>
References: <35b7725f05071808029593c9e@mail.gmail.com>
Message-ID: <2389d473050718090952a925dd@mail.gmail.com>

On 7/18/05, J French <hikenboots at gmail.com> wrote:
> 
> I'm working with Twisted and getting my head around it but I still
> have some general paradigm questions.
> 
> When using Twisted to create an application to run under twistd, is it
> possible to implement more than one protocol? For instance, If I
> write a server which uses PB to interface with its python client, can
> I then also check pop3 boxes from the same application / twistd process?
> 
> Put another way: When incorporating functionality into a server app
> requiring multiple protocols (PB, SMTP, HTTP, etc.) what is the
> standard way of effecting this?
> 
> Sorry for another newbie question and thanks for your time.
> 
> ______________________________________________



yes you use a Service and you can implement as many concurrent protocol 
interfaces as you like 




-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050718/cc424b39/attachment.html>

From justinjohnson at gmail.com  Mon Jul 18 11:52:13 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Mon, 18 Jul 2005 12:52:13 -0500
Subject: [Twisted-Python] IOCP and CANCELLED asynchronous I/O operation
Message-ID: <94a776e705071810525c32e1c0@mail.gmail.com>

I am wondering if someone would be willing to assist me in debugging a 
problem I'm experiencing with my current attempt at an implementation of 
spawnProcess for the IOCP proactor.
 A patch with my implementation can be found at 
http://twistedmatrix.com/bugs/issue1008 along with comments and a log file 
describing my problem.
 The problem occurs sporadically when running 
twisted.test.test_process.ProcessTestCase.testProcesstwisted.test.test_process. 
First I create 3 pipes that will be used to write to the child process's 
stdin and read its stdout and stderr. Then I initiate a read on all 3 pipes. 
The reads makes sense for stdout and stderr. The stdin pipe is created in 
duplex mode and the read attempt on it from the parent is only there so we 
can detect when the child closes its end of the pipe so the parent can close 
its end as well.
 The problem is that occasionally (often, but not consistently) the read 
operations on stdin (and sometimes stderr) seem to not run at all and 
FileMon reports their status as CANCELLED when I get to the end of the 
program. If I run trial run through pdb and step through it, the result of 
CANCELLED for these 1 or 2 (if stderr fails as well) reads doesn't appear 
until the very end of the program. The callbacks (ReadInOp.ovDone and 
ReadErrOp.ovDone don't get called for either of these when the failure 
occurs, so FileMon's results seem to accurately reflect what is happening. 
However, from my print statements it is clear that the reads are initiated (
ReadInOp.initiateOp and ReadErrOp.initiateOp).
 The closest thing I can find to a description of what CANCELLED might mean 
is at http://www.cs.princeton.edu/~appel/smlnj/basis/posix-error.html which 
says it indicates that the associated asynchronous operation was cancelled 
before completion. This sounds correct, but doesn't help illuminate *why* 
this is happening.
 Does anyone have any suggestions as to why this is happening?
 Thanks in advance.
Justin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050718/ca6d9e4d/attachment.html>

From jredburn at gmail.com  Mon Jul 18 12:05:20 2005
From: jredburn at gmail.com (Jeremy Redburn)
Date: Mon, 18 Jul 2005 14:05:20 -0400
Subject: [Twisted-Python] XMPP/Jabber server using Twisted
Message-ID: <1aed0a705071811054453a4cb@mail.gmail.com>

I am looking into coding up a simple XMPP server in Python to accept
simple XML-RPC calls. I was wondering if there was any sort of "Hello
World" client and server examples, or if there is active work being
done on XMPP support in Twisted?

Thanks much,
Jeremy



From twisted at ralphm.ik.nu  Mon Jul 18 12:32:23 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Mon, 18 Jul 2005 20:32:23 +0200
Subject: [Twisted-Python] XMPP/Jabber server using Twisted
In-Reply-To: <1aed0a705071811054453a4cb@mail.gmail.com>
References: <1aed0a705071811054453a4cb@mail.gmail.com>
Message-ID: <20050718183223.GA12031@ik.nu>

On Mon, Jul 18, 2005 at 02:05:20PM -0400, Jeremy Redburn wrote:
> I am looking into coding up a simple XMPP server in Python to accept
> simple XML-RPC calls. I was wondering if there was any sort of "Hello
> World" client and server examples,

Not yet, unfortunately, but I'm willing to help you out. Either in
#twisted or via Jabber (<xmpp:ralphm at ik.nu>).

> or if there is active work being done on XMPP support in Twisted?

Yes. I'm working on it. Currently, I'm busy reworking the interaction
between the Xish module and the Jabber module in Words. Then, I'll add
TLS and SASL support (using patches by Tofu), and hopefully work on
documentation afterwards.

-- 
Groetjes,

ralphm



From andy at thecablelounge.com  Mon Jul 18 16:47:15 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue, 19 Jul 2005 08:47:15 +1000
Subject: [Twisted-Python] High Level Twisted Question [Multiple Protocol
	Usage]
In-Reply-To: <2389d473050718090952a925dd@mail.gmail.com>
References: <35b7725f05071808029593c9e@mail.gmail.com>
	<2389d473050718090952a925dd@mail.gmail.com>
Message-ID: <42DC3173.1050700@thecablelounge.com>

> On 7/18/05, *J French* <hikenboots at gmail.com 
>>     Put another way: When incorporating functionality into a server app
>>     requiring multiple protocols (PB, SMTP, HTTP, etc.) what is the
>>     standard way of effecting this?

jarrod roberson wrote:
> yes you use a Service  and  you can implement as many concurrent  
> protocol interfaces as you like

If you stay with the finger example, it'll get you there:

http://twistedmatrix.com/projects/core/documentation/howto/tutorial/index.html

good luck,
Andy.



From stanc at al.com.au  Mon Jul 18 17:37:14 2005
From: stanc at al.com.au (Astan Chee)
Date: Tue, 19 Jul 2005 09:37:14 +1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DB5A5D.9070708@imperial.ac.uk>
References: <42DB4352.2020803@al.com.au> <42DB541C.20507@al.com.au>
	<42DB5A5D.9070708@imperial.ac.uk>
Message-ID: <42DC3D2A.8030408@al.com.au>

Thanks for the help.
Another thing I was wondering about is if any of the twisted components 
supports rsh? or is just using the` rsh` command easiest?
Also where can I find detailed documentation on twisted classes and its 
method? or is diving into the code my best way?
thanks again
Cheers

Phil Mayers wrote:

> Astan Chee wrote:
>
>> def getPassword(self):
>>        global RETRIES
>>        if RETRIES  == 0:
>>            RETRIES = 1
>>            return defer.succeed(PASSWORD)
>>        else:                      sys.exit(0)
>>
>> But it keeps on giving this error:
>
> Yes, that's what sys.exit does, raise a SystemExit exception.
>
> If you actually want a non-zero exit status, you need to reactor.stop 
> and save your exit status somewhere, e.g.
>
> exitstatus=0
>
> def thing():
>     global exitstatus
>     if fail:
>         exitstatus = 1
>     reactor.stop()
>
> reactor.run()
> # We'll only get here once reactor.stop is called
> sys.exit(exitstatus)
>
> A trivial bit of thought can solve this more elegantly than a global 
> (gak!)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From foom at fuhm.net  Mon Jul 18 18:13:30 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 18 Jul 2005 20:13:30 -0400
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DC3D2A.8030408@al.com.au>
References: <42DB4352.2020803@al.com.au> <42DB541C.20507@al.com.au>
	<42DB5A5D.9070708@imperial.ac.uk> <42DC3D2A.8030408@al.com.au>
Message-ID: <7AA1A616-441E-42A5-A00B-CB7B9E5C282F@fuhm.net>

On Jul 18, 2005, at 7:37 PM, Astan Chee wrote:
> Thanks for the help.
> Another thing I was wondering about is if any of the twisted  
> components supports rsh? or is just using the` rsh` command easiest?
> Also where can I find detailed documentation on twisted classes and  
> its method? or is diving into the code my best way?
> thanks again

Why would anybody use, never mind implement, rsh? It's a stupid  
broken insecure protocol.

James



From exarkun at divmod.com  Mon Jul 18 18:25:45 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 18 Jul 2005 20:25:45 -0400
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <42DC3D2A.8030408@al.com.au>
Message-ID: <20050719002545.26278.1265970742.divmod.quotient.14470@ohm>

On Tue, 19 Jul 2005 09:37:14 +1000, Astan Chee <stanc at al.com.au> wrote:
>Thanks for the help.
>Another thing I was wondering about is if any of the twisted components 
>supports rsh? or is just using the` rsh` command easiest?
>Also where can I find detailed documentation on twisted classes and its 
>method? or is diving into the code my best way?
>thanks again
>Cheers

rsh uses the rlogin protocol.  The rlogin protocol is immensely trivial.  A Twisted implementation would probably be less than 10 lines, but one is not included with Twisted.  Implementing it would probably be easier than shelling out to an rsh(1) binary.  Twisted *does* include an SSH implementation, though.  In most cases that is vastly preferable.

Twisted uses epydoc markup extensively.  The resulting automatically generated documentation is available at <http://twistedmatrix.com/documents/current/api/>.

Diving into the source is also a really good way to become familiar with what Twisted can do.  This can also give you a sense of the level of completion and polish a particular area of Twisted has, which is not always readily apparent from the API documentation.

Jp



From stanc at al.com.au  Mon Jul 18 18:47:40 2005
From: stanc at al.com.au (Astan Chee)
Date: Tue, 19 Jul 2005 10:47:40 +1000
Subject: [Twisted-Python] question about twisted conch (SSH) and wxPython
In-Reply-To: <20050719002545.26278.1265970742.divmod.quotient.14470@ohm>
References: <20050719002545.26278.1265970742.divmod.quotient.14470@ohm>
Message-ID: <42DC4DAC.50706@al.com.au>

Thanks for that, but since I've been using twisted's ssh, it doesnt 
disconnect me from the server whenever I exit. It seems that for some 
reason if I call the SimpleTransport class after I've called and 
destroyed(how do I destroy a protocol.ClientFactory() class anyway?)  it 
once, it becomes stuck. I wonder if this is an unresolved bug, oh well. 
The logs look something like this:

2005/07/19 10:41 AUS Eastern Standard Time [-] Log opened.
2005/07/19 10:41 AUS Eastern Standard Time [-] Starting factory 
<twisted.internet.protocol.ClientFactory instance at 0x01C9D580>
2005/07/19 10:41 AUS Eastern Standard Time [-] Enabling Multithreading.
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] kex 
alg, key alg: diffie-hellman-group-exchange-sha1 ssh-rsa
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] 
client->server: aes256-cbc hmac-sha1 none
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] 
server->client: aes256-cbc hmac-sha1 none
host key fingerprint: 3f:ae:08:ab:0a:79:c9:65:61:f0:ec:5e:1e:48:ee:69
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] 
starting service ssh-userauth
2005/07/19 10:41 AUS Eastern Standard Time [SSHService ssh-userauth on 
SimpleTransport,client] can continue with: ['publickey', 'password', 
'keyboard-in
2005/07/19 10:41 AUS Eastern Standard Time [SSHService ssh-userauth on 
SimpleTransport,client] trying to auth with publickey
2005/07/19 10:41 AUS Eastern Standard Time [SSHService ssh-userauth on 
SimpleTransport,client] trying to auth with password
2005/07/19 10:41 AUS Eastern Standard Time [SSHService ssh-userauth on 
SimpleTransport,client] starting service ssh-connection
2005/07/19 10:41 AUS Eastern Standard Time [SSHService ssh-userauth on 
SimpleTransport,client] opening channel 0 with 65536 32768
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] sending request exec
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] sending eof
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] remote eof
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] unhandled request 
for exit-st
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] remote close
2005/07/19 10:41 AUS Eastern Standard Time [SSHChannel session (0) on 
SSHService ssh-connection on SimpleTransport,client] sending close 0
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] 
connection lost
2005/07/19 10:41 AUS Eastern Standard Time [SimpleTransport,client] 
Stopping factory <twisted.internet.protocol.ClientFactory instance at 
0x01C9D580>
2005/07/19 10:41 AUS Eastern Standard Time [-] Main loop terminated.
2005/07/19 10:41 AUS Eastern Standard Time [-] Log opened.
2005/07/19 10:41 AUS Eastern Standard Time [-] Log opened.
2005/07/19 10:41 AUS Eastern Standard Time [-] Starting factory 
<twisted.internet.protocol.ClientFactory instance at 0x01CAB148>
2005/07/19 10:41 AUS Eastern Standard Time [-] Starting factory 
<twisted.internet.protocol.ClientFactory instance at 0x01CAB148>
2005/07/19 10:41 AUS Eastern Standard Time [-] Stopping factory 
<twisted.internet.protocol.ClientFactory instance at 0x01CAB148>
2005/07/19 10:41 AUS Eastern Standard Time [-] Stopping factory 
<twisted.internet.protocol.ClientFactory instance at 0x01CAB148>


Jp Calderone wrote:

> On Tue, 19 Jul 2005 09:37:14 +1000, Astan Chee <stanc at al.com.au> wrote:
>
>> Thanks for the help.
>> Another thing I was wondering about is if any of the twisted 
>> components supports rsh? or is just using the` rsh` command easiest?
>> Also where can I find detailed documentation on twisted classes and 
>> its method? or is diving into the code my best way?
>> thanks again
>> Cheers
>
>
> rsh uses the rlogin protocol.  The rlogin protocol is immensely 
> trivial.  A Twisted implementation would probably be less than 10 
> lines, but one is not included with Twisted.  Implementing it would 
> probably be easier than shelling out to an rsh(1) binary.  Twisted 
> *does* include an SSH implementation, though.  In most cases that is 
> vastly preferable.
>
> Twisted uses epydoc markup extensively.  The resulting automatically 
> generated documentation is available at 
> <http://twistedmatrix.com/documents/current/api/>.
>
> Diving into the source is also a really good way to become familiar 
> with what Twisted can do.  This can also give you a sense of the level 
> of completion and polish a particular area of Twisted has, which is 
> not always readily apparent from the API documentation.
>
> Jp
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From michele.petrazzo at unipex.it  Tue Jul 19 06:02:32 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Tue, 19 Jul 2005 14:02:32 +0200
Subject: [Twisted-Python] protocol.Protocol and transport.write
Message-ID: <42DCEBD8.1010502@unipex.it>

I have a very simple application that try to open a connection on a port
on the local computer and if it has no program listening, it execute a
program file, else if it find a answer program, it send a string ( about
50/80 characters ).

After the upgrade to 2.0.x, it don't want to work well, because if it
has no response, it open the program correctly, but if it has response,
it send the message, but the message don't arrive to the listener.

After some tries, I see that into my code, I call reactor.stop before, I
think, reactor has ended to send my message. I resolve this with a
simple code: reactor.callLater(1, reactor.stop).

My question is: when I call reactor.stop, it close all, also if there
are some communication in progress? Is there another method to close the
communication (and in my case the program) when I'm sure that all the
works are ended?

Thanks,
Michele

My code:

class ConneExist(protocol.Protocol):
   #The server is listening
   def connectionMade(self):
     self.transport.write(file_name_path)
     out()

def out():
  # reactor.stop() <- here is a problem
  reactor.callLater(1, reactor.stop)



From radeex at gmail.com  Tue Jul 19 06:13:30 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 19 Jul 2005 22:13:30 +1000
Subject: [Twisted-Python] protocol.Protocol and transport.write
In-Reply-To: <42DCEBD8.1010502@unipex.it>
References: <42DCEBD8.1010502@unipex.it>
Message-ID: <60ed19d4050719051334b45abf@mail.gmail.com>

On 7/19/05, Michele Petrazzo <michele.petrazzo at unipex.it> wrote:
> My question is: when I call reactor.stop, it close all, also if there
> are some communication in progress? Is there another method to close the
> communication (and in my case the program) when I'm sure that all the
> works are ended?
> 
> class ConneExist(protocol.Protocol):
>    def connectionMade(self):
...
>   # reactor.stop() <- here is a problem
>   reactor.callLater(1, reactor.stop)


Just call reactor.stop() from connectionLost instead of connectionMade.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From disen at geo.unizh.ch  Wed Jul 20 04:24:05 2005
From: disen at geo.unizh.ch (Daniel Isenegger)
Date: Wed, 20 Jul 2005 12:24:05 +0200
Subject: [Twisted-Python] how to invoke an action in twisted matrix from a
	process
Message-ID: <42DE2645.3090609@geo.unizh.ch>

Hi, a newby question:
i try to invoke an action in a twisted matrix program from a process 
running on my machine:
for example:
i start a program (test.py), which generates output. test.py should call 
the twisted matrix program (which is already running and waiting for 
input) and hand over its output to the twisted matrix program.

to do this i examined the examples process.py and quotes.py (on the 
HOWTO pages of the twisted matrix homepage).
quotes.py seems to be an example which is quite close. When i start it 
on the shell, nothing happens.

if i understand right, quotes.py waits for a tcp-connection on port 10999.
Is it also possible to read the data from test.py from stdout (like in 
process.py) without invoking this program in the twisted matrix program

Thanks
Dani




From natester at gmail.com  Wed Jul 20 09:14:36 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Wed, 20 Jul 2005 09:14:36 -0600
Subject: [Twisted-Python] spawnProcess and deferreds
Message-ID: <4adac7a3050720081470e22508@mail.gmail.com>

I would like to spawn seperate processes from the methods program. 
What's the equivalent of spawnProcess for internal functions?

Is it twisted threads?  

Nate



From leszczynscy at yahoo.com  Wed Jul 20 16:37:29 2005
From: leszczynscy at yahoo.com (Andrzej Leszczynski)
Date: Wed, 20 Jul 2005 15:37:29 -0700 (PDT)
Subject: [Twisted-Python] timers
Message-ID: <20050720223729.60039.qmail@web30503.mail.mud.yahoo.com>

Hi folks,

short question, I implement a very custom statefull
protocol which need to have some timers in it. Can
someone point me to examples how to do that?


A.



From dguaraglia at gmx.de  Wed Jul 20 16:49:43 2005
From: dguaraglia at gmx.de (David Guaraglia)
Date: Wed, 20 Jul 2005 19:49:43 -0300
Subject: [Twisted-Python] timers
In-Reply-To: <20050720223729.60039.qmail@web30503.mail.mud.yahoo.com>
References: <20050720223729.60039.qmail@web30503.mail.mud.yahoo.com>
Message-ID: <42DED507.4070407@gmx.de>

What will you exactly do with the timers? Depending on the use you could 
replace the timers with a thread, or a deferred, or a TimeoutMixin.

David

Andrzej Leszczynski wrote:

>Hi folks,
>
>short question, I implement a very custom statefull
>protocol which need to have some timers in it. Can
>someone point me to examples how to do that?
>
>
>A.
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>  
>




From nkeric at gmail.com  Wed Jul 20 20:53:27 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Thu, 21 Jul 2005 10:53:27 +0800
Subject: [Twisted-Python] timers
In-Reply-To: <20050720223729.60039.qmail@web30503.mail.mud.yahoo.com>
References: <20050720223729.60039.qmail@web30503.mail.mud.yahoo.com>
Message-ID: <43c0d2b505072019532052a1b5@mail.gmail.com>

2005/7/21, Andrzej Leszczynski <leszczynscy at yahoo.com>:
> Hi folks,
> 
> short question, I implement a very custom statefull
> protocol which need to have some timers in it. Can
> someone point me to examples how to do that?
> 

I've written a ResourceManager which check frequently and release
resources if necessary, may the following code snippet helpful to you
:)

[code]
from twisted.internet import task
class ResourceManager:
    def __init__(self):
        interval = 5                     # check every 5 seconds
        releaser = task.LoopingCall(self._releaseResources)
        releaser.start(interval)

    def _releaseResource(self):
        [snip]
        ...
[/code]



From thomas at apestaart.org  Thu Jul 21 04:51:46 2005
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Thu, 21 Jul 2005 12:51:46 +0200
Subject: [Twisted-Python] subclassing and class methods returning deferreds
Message-ID: <1121943106.13938.3.camel@thomas.amantes>

Hi,

I wanted to have a class hierarchy where .stop methods would make sure
everything is cleaned up properly before reactors get stopped and such.
The obvious way to do that was to return a deferred that gets fired when
everything else is done, and make sure that deferred is handled
correctly everywhere.

So I wrote up an example that does this:
http://thomas.apestaart.org/download/tmp/subclass-deferred.py

I'd appreciate it if someone who's interested would take a look at it to
suggest some improvements, as I'm sure I might have overthought things a
little, or maybe there are better ways to do something like this.

Thanks,
Thomas

Dave/Dina : future TV today ! - http://www.davedina.org/
<-*- thomas (dot) apestaart (dot) org -*->
Welcome to Hits City, Jeff K - Population: you
<-*- thomas (at) apestaart (dot) org -*->
URGent, best radio on the net - 24/7 ! - http://urgent.fm/






From antonykummel at yahoo.com  Thu Jul 21 06:16:01 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Thu, 21 Jul 2005 05:16:01 -0700 (PDT)
Subject: [Twisted-Python] communication idioms with Perspective Broker
Message-ID: <20050721121601.89338.qmail@web33907.mail.mud.yahoo.com>


Hello,

 

I am using Twisted for a distributed application, and currently I am designing the basic objects of the application that will be transferred from process to process via PB. I ran into some conceptual problems, and I wonder if there are either general solutions (patterns, etc.) or Twisted-specific ones, or general ones already adapted to Twisted, etc.

 

Problems:

 

1. Synchronization of events and state/data changes: I want clients to be able to receive notifications from a server when certain events occur. When such events are related to changes in state or data of the server that are also accessible to the user, I want the clients interface for retrieving the data and getting notified of the event to be coherent.

 

Example of the problem: Lets say I have a server that can be in a state of being associated with a user, and that I want the server both to provide notifications to clients when it becomes associated or disassociated with a user, and to provide an isAssociated method that says if it is currently associated or not. If I provide the isAssociated functionality using a remote method call (with a referenceable), and the notification functionality also using a remote method call from the server to the client, then it is possible, for example, for a client to call twice the isAssociated method, and get a different result, without having received the notification (it may simply have not yet arrived), or also it is possible for the client to call isAssociated,  receive a notification that the state has changed, and only then get the result from the deferred returned by isAssociated, which reflects the state prior to the change.

 

The solution I came up with is to always expose associated events and data using a single cacheable object, so that when there is a change in state/data that should also make an event fire, the data change is propagated to the remote cache, and the remote cache fires an event locally (at the clients side). This way, the clients representation of the servers state is always coherent.

 

2. Synchronization of remote commands and remote events/data changes: I want clients to be able to issue commands to a server that make its state or associated data change, and also to have an up-to-date representation of the state or data (and possible events issued by changes in the state/data). The problem is how to synchronize the firing of the deferred returned by the remote method call with the change in the clients representation of the servers state/data (i.e. to make sure that when the deferred fires, the clients representation of the state is coherent with the command, i.e. changed).

 

Presently I have no solution for this, but Im pretty sure that it requires some combination of referenceable and cacheable that will insure one coherent interface to associated data, events and commands. I am thinking to achieve this with a copyable that will contain both a referenceable and a cacheable.

 

3. Wrapping remote objects for non-online representation. I want to be able to have objects that can be used locally, but may also provide an interface to one or more servers that have to do with the state of the object. Another reason for these wrappers is that I want to be able to pass them freely from process to process, without being dependent on the connection or on a specific server.

 

For example, there could be a User object that may have a username and password, etc. and also an event that fires when the user connects to the system, and a remote method for sending him messages. The username and password may be required by a process regardless of being connected to a server that can provide the other functions (for example, a process may want to display to a user a list of all of the users of the system, but may also not be connected to a presence server that provides the other functionality). I would say that what is needed is an anti-Avatar  an object that represents some hyper-service entity that may be connected to servers that enable some of its functions and may also not.

 

The question is, how to represent this to the user of the object. Whether to allow access to cached remote data and subscription to events when not online, whether to return a deferred and try to connect in case we dont have the data or throw an exception, etc. I suppose this is mostly a matter of style, but if anyone has done something like this before maybe they would have some insight


 

Cheers,

 

Antony Kummel

 


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050721/e355d62a/attachment.html>

From itamar at itamarst.org  Thu Jul 21 09:15:32 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 21 Jul 2005 11:15:32 -0400
Subject: [Twisted-Python] subclassing and class methods returning deferreds
In-Reply-To: <1121943106.13938.3.camel@thomas.amantes>
References: <1121943106.13938.3.camel@thomas.amantes>
Message-ID: <1121958933.8759.19.camel@localhost.localdomain>

On Thu, 2005-07-21 at 12:51 +0200, Thomas Vander Stichele wrote:
> Hi,
> 
> I wanted to have a class hierarchy where .stop methods would make sure
> everything is cleaned up properly before reactors get stopped and such. 

That's what services (twisted.application.service) are for. The
stopService method of a service can return a Deferred. Since they're a
tree, all you need to do is hook up the root service to the reactor
(which is what twistd does for you) and all child services will get
shutdown as well.





From leszczynscy at yahoo.com  Thu Jul 21 09:24:09 2005
From: leszczynscy at yahoo.com (Andrzej Leszczynski)
Date: Thu, 21 Jul 2005 08:24:09 -0700 (PDT)
Subject: [Twisted-Python] timers
In-Reply-To: <43c0d2b505072019532052a1b5@mail.gmail.com>
Message-ID: <20050721152409.31341.qmail@web30505.mail.mud.yahoo.com>

--- Eric Hsu <nkeric at gmail.com> wrote:
> I've written a ResourceManager which check
> frequently and release
> resources if necessary, may the following code
> snippet helpful to you
> :)
[...]
>         releaser.start(interval)
[...]

I will try it out. Seems to be close to what I need.
One question thought?

How it is implemented under the hood, (I hope it does
not spawn any new threads).

A.



From leszczynscy at yahoo.com  Thu Jul 21 09:28:51 2005
From: leszczynscy at yahoo.com (Andrzej Leszczynski)
Date: Thu, 21 Jul 2005 08:28:51 -0700 (PDT)
Subject: [Twisted-Python] timers
In-Reply-To: <42DED507.4070407@gmx.de>
Message-ID: <20050721152852.91010.qmail@web30506.mail.mud.yahoo.com>


--- David Guaraglia <dguaraglia at gmx.de> wrote:

> What will you exactly do with the timers? Depending
> on the use you could 
> replace the timers with a thread, or a deferred, or
> a TimeoutMixin.

Threads are out of the question. There going to be a
clas deriving from a Protocol used over TCP/IP. E.g.
there is long lasting connection with the
client/server and a need to send kind of heart beat
messages every given period of time as well as pegging
some stat info.

A.



From dguaraglia at gmx.de  Thu Jul 21 09:49:21 2005
From: dguaraglia at gmx.de (David Guaraglia)
Date: Thu, 21 Jul 2005 12:49:21 -0300
Subject: [Twisted-Python] timers
In-Reply-To: <20050721152852.91010.qmail@web30506.mail.mud.yahoo.com>
References: <20050721152852.91010.qmail@web30506.mail.mud.yahoo.com>
Message-ID: <42DFC401.2050104@gmx.de>

Andrzej,

I've done something very similar using just one thread for the protocol. 
But I'm not really sure this is what you need. What I did was use a 
LoopingCall every 2 minutes that would call a method in my protocol's 
factory. Everytime I got a new connection (connectionMade event in the 
Protocol) I'd append the protocol to a list in the factory, and then I'd 
remove it when the protocol is closed.

So the sequence is:

1) add an empty list (connectionsList or whatever) to your factory
2) add "self.factory.connectionsList.append(self)" in connectionMade in 
your protocol
3) add "self.factory.connectionsList.remove(self)" in connectionLost in 
your protocol
4) add a method that sends your "keep alive" to every connection in 
connectionsList in your factory. (for x in self.connectionsList: 
x.sendKeepAlive())
5) create a LoopingCall in your factory __init__.

Maybe it's not the best solution, but it worked for me.

David

Andrzej Leszczynski wrote:

>--- David Guaraglia <dguaraglia at gmx.de> wrote:
>
>  
>
>>What will you exactly do with the timers? Depending
>>on the use you could 
>>replace the timers with a thread, or a deferred, or
>>a TimeoutMixin.
>>    
>>
>
>Threads are out of the question. There going to be a
>clas deriving from a Protocol used over TCP/IP. E.g.
>there is long lasting connection with the
>client/server and a need to send kind of heart beat
>messages every given period of time as well as pegging
>some stat info.
>
>A.
>
>  
>




From exarkun at divmod.com  Thu Jul 21 10:06:43 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 21 Jul 2005 12:06:43 -0400
Subject: [Twisted-Python] timers
In-Reply-To: <42DFC401.2050104@gmx.de>
Message-ID: <20050721160643.26278.400466749.divmod.quotient.15478@ohm>

On Thu, 21 Jul 2005 12:49:21 -0300, David Guaraglia <dguaraglia at gmx.de> wrote:
>Andrzej,
>
>I've done something very similar using just one thread for the protocol. But 
>I'm not really sure this is what you need. What I did was use a LoopingCall 
>every 2 minutes that would call a method in my protocol's factory. Everytime 
>I got a new connection (connectionMade event in the Protocol) I'd append the 
>protocol to a list in the factory, and then I'd remove it when the protocol 
>is closed.
>
>So the sequence is:
>
>1) add an empty list (connectionsList or whatever) to your factory
>2) add "self.factory.connectionsList.append(self)" in connectionMade in your 
>protocol
>3) add "self.factory.connectionsList.remove(self)" in connectionLost in your 
>protocol
>4) add a method that sends your "keep alive" to every connection in 
>connectionsList in your factory. (for x in self.connectionsList: 
>x.sendKeepAlive())
>5) create a LoopingCall in your factory __init__.
>
>Maybe it's not the best solution, but it worked for me.
>

Where's the thread?  (Hint: not in the LoopingCall)

Jp



From thomas at apestaart.org  Thu Jul 21 10:34:27 2005
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Thu, 21 Jul 2005 18:34:27 +0200
Subject: [Twisted-Python] subclassing and class methods returning deferreds
In-Reply-To: <1121958933.8759.19.camel@localhost.localdomain>
References: <1121943106.13938.3.camel@thomas.amantes>
	<1121958933.8759.19.camel@localhost.localdomain>
Message-ID: <1121963667.14368.3.camel@thomas.amantes>

On Thu, 2005-07-21 at 11:15 -0400, Itamar Shtull-Trauring wrote:
> On Thu, 2005-07-21 at 12:51 +0200, Thomas Vander Stichele wrote:
> > Hi,
> > 
> > I wanted to have a class hierarchy where .stop methods would make sure
> > everything is cleaned up properly before reactors get stopped and such. 
> 
> That's what services (twisted.application.service) are for. The
> stopService method of a service can return a Deferred. Since they're a
> tree, all you need to do is hook up the root service to the reactor
> (which is what twistd does for you) and all child services will get
> shutdown as well.

I'm looking into hooking up the whole application part into the service
framework, but stopService will then still need to tell these objects
that are performing tasks to stop and wait for that, so it will still
need to go up the hierarchy and process correctly.  Or am I missing
something ?

Btw, I only found a short introduction on services and .tac files, but
it doesn't really say what services are trying to solve, and when you
should use them.  Is there somewhere else I should look for that ?

Thanks
Thomas


Dave/Dina : future TV today ! - http://www.davedina.org/
<-*- thomas (dot) apestaart (dot) org -*->
Gotta keep moving on
lover you hide from me every time
<-*- thomas (at) apestaart (dot) org -*->
URGent, best radio on the net - 24/7 ! - http://urgent.fm/






From db3l at fitlinxx.com  Thu Jul 21 10:40:25 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 21 Jul 2005 12:40:25 -0400
Subject: [Twisted-Python] Re: communication idioms with Perspective Broker
References: <20050721121601.89338.qmail@web33907.mail.mud.yahoo.com>
Message-ID: <uoe8wyux2.fsf@fitlinxx.com>

Antony Kummel <antonykummel at yahoo.com> writes:

As a general comment, I would suggest that you may wish to consider if
what appears to be your goal of keeping asynchronous activities
completely in sync is really a constraint you must meet?

That is, your points seem concerned with ensuring that asynchronous
actions or state changes somehow are reflected to users of that state
in some atomic manner or on a transactional basis (no changes exposed
until everything is complete).  This is a non-trivial problem in a
distributed form, particularly if you start to consider network
failures that can interfere with communication mid-operation.  It
would appear you're looking for a ACID-like transactional layer.

Instead of trying to meet such a tough constraint, it may be better to
see if you can design your system to accept, from the beginning, that
there will be a period of latency between actions taken in the system
and resultant changes to state being apparent to users of that state.
Or, that different parts of the system may be operating with older
(but still valid) data at various points in time, and take more
explicit control of when they update to the latest data.  This has its
own form of complexity, but can yield a much more resiliant system.

> 1. Synchronization of events and state/data changes: I want clients
> to be able to receive notifications from a server when certain
> events occur. When such events are related to changes in state or
> data of the server that are also accessible to the user, I want the
> client's interface for retrieving the data and getting notified of
> the event to be coherent.

(...)

> The solution I came up with is to always expose associated events
> and data using a single cacheable object, so that when there is a
> change in state/data that should also make an event fire, the data
> change is propagated to the remote cache, and the remote cache fires
> an event locally (at the client's side). This way, the client's
> representation of the server's state is always coherent.

This seems reasonable to me, or at least as close as you can come to
your requirement of keeping a remote client's data/events in sync.
You would need to ensure that your state object managed changes to
itself such that it only reflected changes down the PB channel to any
cacheable observers at appropriate times when its own state was
consistent.  E.g., you wouldn't necessarily update on each field or
attribute change.

What you're effectively doing here is using the cacheable object as
your transaction manager, controlling what clients see.

Note that to ensure consistency between clients and server, you'd want
to have everyone working from cacheables of this object and nobody
(even on the server itself) working from the object itself.  Otherwise,
you'd need a mechanism (such as with point 2)

You still have an issue of network outages preventing updates from
making it to clients, but in that case you'd only have to deal with a
disconnected client being out of date with respect to the server and
other clients, but in a consistent way, and upon reconnecting it would
receive a new, but again consistent, set of state information.

> 2. Synchronization of remote commands and remote events/data
> changes: I want clients to be able to issue commands to a server
> that make its state or associated data change, and also to have an
> up-to-date representation of the state or data (and possible events
> issued by changes in the state/data). The problem is how to
> synchronize the firing of the deferred returned by the remote method
> call with the change in the client's representation of the server's
> state/data (i.e. to make sure that when the deferred fires, the
> client's representation of the state is coherent with the command,
> i.e. changed).

(...)

> Presently I have no solution for this, but I'm pretty sure that it
> requires some combination of referenceable and cacheable that will
> insure one coherent interface to associated data, events and
> commands. I am thinking to achieve this with a copyable that will
> contain both a referenceable and a cacheable.

I think you're going to have an uphill battle here to try to
synchronize what is inherently distributed and asynchronous behavior.

If I absolutely had to do this, it's probably along the lines of what
your considering - I'd consider having a transaction object that
encapsulated change requests and state updates under a single
umbrella.  Rather than a simple cacheable though, you'd probably need
to implement a two-phase commit protocol so that the state only
changed on both client/server or not at all.  If you didn't do that,
you'd leave yourself open to the operation occurring on the server,
but the network preventing the new state information from getting down
to the client, and the client not knowing what state the server was in.

But I'd much rather just assume that the client needed to work
properly with the state as it currently knew, and respond properly to
any state updates as they occurred, whether due to its own operation
or some other client's operation.  E.g., formally decouple the request
to perform an operation, from the state changes that would occur as
that operation was performed.

In other words, try to stick more to a model/controller approach,
where the model state is monitored by clients and they simply react to
its changes, but actions taken always flow through a distinct
controller path that is associated with but decoupled from the model.

> 3. Wrapping remote objects for non-online representation. I want to
> be able to have objects that can be used locally, but may also
> provide an interface to one or more servers that have to do with the
> state of the object. Another reason for these wrappers is that I
> want to be able to pass them freely from process to process, without
> being dependent on the connection or on a specific server.

(...)

> The question is, how to represent this to the user of the
> object. Whether to allow access to cached remote data and
> subscription to events when not online, whether to return a deferred
> and try to connect in case we don't have the data or throw an
> exception, etc. I suppose this is mostly a matter of style, but if
> anyone has done something like this before maybe they would have
> some insight

What we've done in a system of ours that is designed to be an
distributed data system is treat the core data objects in the system
as pure state objects as much as possible, generally falling into two
classes:

* Pure instance data (data objects) of which multiple copies may exist
  simultaneously throughout the system, but which operate locally
  (Copyable in twisted).  The only methods such objects have are to
  manipulate the local representation (also handled by direct
  attribute access).
* Shared state objects (model objects) of which multiple observers
  throughout the system may exist (Cacheable in twisted).  While these
  objects may have similar method and attribute access as the above
  instance data, they are only ever manipulated by controller objects,
  for which the original instance is only the same "node" as the
  original instance of the state object.  Any client needing to make
  changes must use a reference to that controller (a twisted
  Referenceable) and not the model itself, even on the local node
  where the model/controller are instantiated.

The choice between the two object types is not a hard and fast rule -
we've tended to use more of the former so far.

We then constructed a framework of "manager" objects which are
designed to provide access and manipulation of the above data objects.
The key attribute of a manager object is that it is both referenceable
(twisted Referenceable) and all of its methods are deferrable
interfaces - even if used locally.

Although I found I had a desire to try to somehow just always pass
object references (referenceable) around to everything and let PB
handle everything transparently - in practical terms I didn't find
that workable.  There are just too many nooks and crannies you can get
into as things get distributed that taking some more explicit control
became necessary to ensure robustness.  And you just can't always
assume that making changes to state on what is ostensibly a shared
object will magically get reflected everywhere reliably.  But that's
actually where we found PB to be just at the right level as it was
easy enough to wrap to behave how we wanted.

We provided an extra layer of wrapping for the networking, both for
the basic connection as well as our referenceables.  A Client object
encapsulates making a connection to a server, along with reconnecting
as necessary and generating local signals (we use pydispatcher) on
connection state changes.  A matching Server object provides client
access to local managers - through a simple Registry object - upon a
client's connection.

A general purpose wrapper object is used to wrap each manager
referenceable so that they appear to be local (it uses the manager's
interface definition to automatically translate method calls into
callRemote), as well as to automatically re-establish contact with the
remote manager if needed, by listening for the Client signals and on a
reconnect, re-obtaining the remote Registry handle and refetching
remote references to the manager it had previously wrapped.

The wrapping may be multi-layer.  This allows us for example, to have
a remote site have a master server, which maintains the client link to
a central server.  That site server, therefore, has what it considers
a local Registry with a whole set of local managers - all of which are
technically wrappers around the twisted referenceable to the main
central server.  But then other machines at the site themselves become
clients of the site server, with their own references to the site
server's references.  So when the other site machines make requests
they flow to the site server, and then up to the central server and
back down.  But the same source code works whether running on the
central server, or at any level of the site servers, without knowing
the difference (since all registry and manager interfaces are
deferrable anyway).
  
While the wrapper isolates users from need to worry about
reconnecting, we don't attempt to hide the fact that an outage is
occurring.  Attempts to make a call on a wrapped manager during an
outage generates normal PB exceptions, with one change that we modified
Twisted to always return exceptions up the deferred change (even for a
dead reference) so clients wouldn't have to deal with both local
exceptions and errbacks.

In practice, the client applications generally have some application
level object that is also listening to the Client objects connection
signals, and either blocking access to the user when the network is
(with an appropriate message), or adjusting behavior accordingly.

So, in operation, client code works something like:

* Instantiate a Client object, give it connection info and start the
  connection.  Request the registry from the client object (which is
  deferrable and only fires once the overall connection cycle is
  complete).
* Using the Registry object (which itself is a remote wrapper version
  on the client side), query references for any manager objects
  needed.
* Using the manager objects, retrieve any data objects needed.
  Changes to model objects occur through their controllers, while
  changes to data objects are performed locally and changes updated
  via explicit "save" calls to the managers.  

The last point is where we run into similar issues as yourself, I
think.  By choosing this route we do not provide for other clients of
that same data object to automatically see changes made by other
clients.  They would continue to run with the copy they had previously
received, although any subsequent retrieval would get a new copy with
the new data.

To handle crossing state changes, the originator (actual manager
object on whatever node it exists on) of the data object maintains an
internal tag (we use a UUID but it could also be a hash of the
contents) in the object representing its unique state and will raise a
SaveConflict exception of our own if someone else attempts to store
changes to an outdated copy.  It is up to clients to handle such
issues, should they occur (typically by requerying the information and
then re-applying their changes), although in practice we really don't
have scenarios where this happens yet due to typical usage patterns.

Some of this could change if we moved a data object to a model object,
but then we're requiring that even simple users of the data object
maintain a remote cacheable reference to the object, which is
relatively heavyweight.  Thus my comment about it being a grey area
above as to which sort of object we decide to place such state in.  In
our environment, our User object (which contains identifying and
control information about users) is just a data object, as the need
for simultaneous manipulation and monitoring of it is reasonably low.
We do expect to have many copies of it around, but mostly on a
read-only basis.

In your context, I would think that the user object itself need not be
something that constantly updates, but the state of which users were
currently online would fit better as a model (and the controller to
feed it would have methods for a given user to go online or offline).
In our structure, we would separate out the concept of generating a
system message - probably into a messaging manager - which would then
receive requests to transmit messages to identified users.  But I
don't think I'd try to tie those three things (current User object
contents, currently online user set, generating a message) into any
sort of guaranteed state ... I'd leave them very loosely coupled.

On the issue of distribute events, that's the area we're currently
working on, and to us the hardest part is how to handle events that
may be generated during outages for which the disconnected clients
have subscriptions.  If it's just for changes to state objects (such
as cacheables) that's not so bad, since the reconnection process will
re-query the current state information.  But if it's for more general
notifications (we might have our own bit for "user updated" like your
"user came online") you have a question of how long do you queue up
such events for clients that might never show up again.

Currently we are targetting such events being handled by a signal or
event manager, which will maintain an ongoing history of such events.
Subscribers to the event manager will get copies of appropriate
events.  When a client connects it's local wrapper for the remote
event manager will actually handle all local subscriptions,
maintaining a single remote set of subscriptions to minimize network
I/O.  It will also track the delivery of any events.  Upon being
disconnected/reconnecting (per the standard mechanisms), the client
event manager wrapper will request any signals that may have been
generated since the last event seen prior to the disconnect.  We'll
have to bound this somehow for prolonged outages.  But a key point is
still decoupling the event handling from other operations, and we
won't be trying to force everything to stay in sync with other clients
and/or servers at all times.

If you've put up with me until here, I hope that this at least gives
you some other approaches to think about, even if some or all of it
isn't directly applicable to your problem domain.

-- David




From dguaraglia at gmx.de  Thu Jul 21 11:03:13 2005
From: dguaraglia at gmx.de (David Guaraglia)
Date: Thu, 21 Jul 2005 14:03:13 -0300
Subject: [Twisted-Python] timers
In-Reply-To: <20050721160643.26278.400466749.divmod.quotient.15478@ohm>
References: <20050721160643.26278.400466749.divmod.quotient.15478@ohm>
Message-ID: <42DFD551.3080707@gmx.de>

LOL! (lols allowed here? or just not allowed as in #twisted?). Don't 
know why I used the word "thread" in there... I was just going to 
describe something I had made, then I remembered I had corrected it 
using a LoopingCall.

David

Jp Calderone wrote:

> On Thu, 21 Jul 2005 12:49:21 -0300, David Guaraglia 
> <dguaraglia at gmx.de> wrote:
>
>> Andrzej,
>>
>> I've done something very similar using just one thread for the 
>> protocol. But I'm not really sure this is what you need. What I did 
>> was use a LoopingCall every 2 minutes that would call a method in my 
>> protocol's factory. Everytime I got a new connection (connectionMade 
>> event in the Protocol) I'd append the protocol to a list in the 
>> factory, and then I'd remove it when the protocol is closed.
>>
>> So the sequence is:
>>
>> 1) add an empty list (connectionsList or whatever) to your factory
>> 2) add "self.factory.connectionsList.append(self)" in connectionMade 
>> in your protocol
>> 3) add "self.factory.connectionsList.remove(self)" in connectionLost 
>> in your protocol
>> 4) add a method that sends your "keep alive" to every connection in 
>> connectionsList in your factory. (for x in self.connectionsList: 
>> x.sendKeepAlive())
>> 5) create a LoopingCall in your factory __init__.
>>
>> Maybe it's not the best solution, but it worked for me.
>>
>
> Where's the thread?  (Hint: not in the LoopingCall)
>
> Jp
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>




From foom at fuhm.net  Thu Jul 21 14:49:45 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 21 Jul 2005 16:49:45 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <C9B88074-266B-4C30-BECD-B1AC36EC7FB9@fuhm.net>

Bug summary
______________________
Since 2005-07-12 14:40:23.400000:
Bugs opened: 15   Bugs closed: 4   Total open bugs: 412 (+11)
   Urgent: 9 (+0)
   Bug: 179 (+8)
   Feature: 147 (+3)
   Wish: 77 (+0)

New / Reopened Bugs
______________________
                     ==== Bug ====
[WEB] twisted.web.proxy doesn't reverse-map redirects like  
ProxyPassReverse  (6 days ago)
        http://twistedmatrix.com/bugs/issue1109 opened by kragen

OS-X vs PTYProcess, OSError vs IOError  (yesterday)
        http://twistedmatrix.com/bugs/issue1120 opened by warner

[FTP] FTPClient does not fire current commands errback on  
connectionLost  (1 week ago)
        http://twistedmatrix.com/bugs/issue1107 opened by orbitz

roundup exception when clicking "confirm password" link more than  
once  (4 months ago)
CLOSED http://twistedmatrix.com/bugs/issue919 opened by zooko

[WEB] twisted.web.proxy.ReverseProxyResource incorrectly sends host  
header with no port  (3 days ago)
        http://twistedmatrix.com/bugs/issue1117 opened by kragen

[WIN32] win32 spawnProcess should return something  (3 days ago)
        http://twistedmatrix.com/bugs/issue1116 opened by warner

[CORE] intermittent test failure in test_policies  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1114 opened by warner

[TRIAL] Trial fails with "signal number out of range" for signal 64   
(6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1110 opened by justinj

[CORE] intermittent test failures in threads  (5 days ago)
        http://twistedmatrix.com/bugs/issue1115 opened by warner

[CONCH] intermittent test failures in conch  (5 days ago)
        http://twistedmatrix.com/bugs/issue1111 opened by warner

[CORE] intermittent test failure in testCallLater  (5 days ago)
        http://twistedmatrix.com/bugs/issue1113 opened by warner

[FLOW] intermittent test failure in flow: testThreadedImmediate  (5  
days ago)
        http://twistedmatrix.com/bugs/issue1112 opened by warner

                     ==== Feature ====
[DOCUMENTATION] Document Services available in Twisted  (2 days ago)
        http://twistedmatrix.com/bugs/issue1119 opened by spiv

[DOCUMENTATION] Document how to write a Service correctly  (2 days ago)
        http://twistedmatrix.com/bugs/issue1118 opened by spiv

[WEB] web2 needs SOAP support  (7 days ago)
        http://twistedmatrix.com/bugs/issue1108 opened by jblocksom

Bugs Closed
______________________
                     ==== Bug ====
Stupid code needs removing from ftp.py  (1 month ago)
        http://twistedmatrix.com/bugs/issue1075 opened by orbitz,  
closed by exarkun

roundup exception when clicking "confirm password" link more than  
once  (4 months ago)
        http://twistedmatrix.com/bugs/issue919 opened by zooko,  
closed by kragen

[CORE] intermittent test failure in test_policies  (5 days ago)
        http://twistedmatrix.com/bugs/issue1114 opened by warner,  
closed by exarkun

[TRIAL] Trial fails with "signal number out of range" for signal 64   
(6 days ago)
        http://twistedmatrix.com/bugs/issue1110 opened by justinj,  
closed by exarkun





From ww at groovy.net  Fri Jul 22 08:56:47 2005
From: ww at groovy.net (William Waites)
Date: Fri, 22 Jul 2005 10:56:47 -0400
Subject: [Twisted-Python] PB waitingForAnswers KeyError
Message-ID: <20050722145647.GW27029@groovy.net>

This is with the Twisted Sumo tar, with threadedselectreactor dropped in:

          File "/usr/lib/python2.3/site-packages/twisted/internet/threadedselectreactor.py", line 252, in _doReadOrWrite
            why = getattr(selectable, method)()
          File "/usr/lib/python2.3/site-packages/twisted/internet/tcp.py", line 351, in doRead
            return self.protocol.dataReceived(data)
          File "/usr/lib/python2.3/site-packages/twisted/spread/banana.py", line 184, in dataReceived
            gotItem(item)
          File "/usr/lib/python2.3/site-packages/twisted/spread/banana.py", line 114, in gotItem
            self.callExpressionReceived(item)
          File "/usr/lib/python2.3/site-packages/twisted/spread/banana.py", line 81, in callExpressionReceived
            self.expressionReceived(obj)
          File "/usr/lib/python2.3/site-packages/twisted/spread/pb.py", line 561, in expressionReceived
            method(*sexp[1:])
          File "/usr/lib/python2.3/site-packages/twisted/spread/pb.py", line 919, in proto_answer
            d = self.waitingForAnswers[requestID]
        exceptions.KeyError: 19

What am I doing to make this happen? I am using a class derived from the threadedselect
blocking demo. This implementation is attached, and has a blocking run() method and
a blocking getDeferred() method. It takes interleaved' callbacks and puts them in a
queue. The run() method takes them out of the queue in a blocking way and calls them.
getDeferred() makes a threading.Event(), causes a CB to be queued, and then waits
on the event to return the result. This way there can be many threads using the blocking
getDeferred(), and many threads that just use the normal twisted stuff.

This is running inside Asterisk and implements a PB client. This error appears under
load (30-40 PB calls per second, 10-20 threads using getDeferred()).

The server works just fine, and I have verified with a non-threadedselectreactor dummy
client. A single threaded client is able to get several hundred PB calls per second
through, and running more than one single threaded client works as expected.

Looking at the spread/pb.py, I can't see how this KeyError should happen. 
waitingForAnswers[requestID] always gets set before the remote call, so I don't see
a race condition where we could get a response before the dictionary is populated.

Help?

-w
-------------- next part --------------
# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.

from twisted.internet.defer import Deferred
from twisted.python.failure import Failure
from twisted.internet import reactor
from twisted.python.runtime import seconds
from itertools import count
from Queue import Queue, Empty
from threading import Event

class TwistedManager(object):
    def __init__(self):
        self.twistedQueue = Queue()
        self.key = count()
        self.results = {}
        self.events = {}
        self.running = False
        
    def getKey(self):
        # get a unique identifier
        return self.key.next()

    def run(self):
        # start the reactor
        if self.running:
            return
        self.running = True

        reactor.interleave(self.twistedQueue.put)
        
        while True:
            callback = self.twistedQueue.get()
            callback()
            if not self.running and self.twistedQueue.empty():
                return
            
    def _stopIterating(self, value, key):
        e = self.events[key]
        del self.events[key]
        self.results[key] = value
        e.set()
            
    def stop(self):
        # stop the reactor
        key = self.getKey()
        e = Event()
        self.events[key] = e
        reactor.addSystemEventTrigger('after', 'shutdown',
            self._stopIterating, True, key)
        self.running = False
        reactor.stop()
        e.wait()
            
    def getDeferred(self, d):
        # get the result of a deferred or raise if it failed
        key = self.getKey()
        e = Event()
        self.events[key] = e
        d.addBoth(self._stopIterating, key)
        e.wait()
        res = self.results.pop(key)
        if isinstance(res, Failure):
            res.raiseException()
        return res

From bob at redivi.com  Fri Jul 22 13:19:50 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 22 Jul 2005 09:19:50 -1000
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <20050722145647.GW27029@groovy.net>
References: <20050722145647.GW27029@groovy.net>
Message-ID: <09913134-2BA7-4194-8864-99A5CDB46123@redivi.com>


On Jul 22, 2005, at 4:56 AM, William Waites wrote:

> This is with the Twisted Sumo tar, with threadedselectreactor  
> dropped in:
>
>           File "/usr/lib/python2.3/site-packages/twisted/internet/ 
> threadedselectreactor.py", line 252, in _doReadOrWrite
>             why = getattr(selectable, method)()
>           File "/usr/lib/python2.3/site-packages/twisted/internet/ 
> tcp.py", line 351, in doRead
>             return self.protocol.dataReceived(data)
>           File "/usr/lib/python2.3/site-packages/twisted/spread/ 
> banana.py", line 184, in dataReceived
>             gotItem(item)
>           File "/usr/lib/python2.3/site-packages/twisted/spread/ 
> banana.py", line 114, in gotItem
>             self.callExpressionReceived(item)
>           File "/usr/lib/python2.3/site-packages/twisted/spread/ 
> banana.py", line 81, in callExpressionReceived
>             self.expressionReceived(obj)
>           File "/usr/lib/python2.3/site-packages/twisted/spread/ 
> pb.py", line 561, in expressionReceived
>             method(*sexp[1:])
>           File "/usr/lib/python2.3/site-packages/twisted/spread/ 
> pb.py", line 919, in proto_answer
>             d = self.waitingForAnswers[requestID]
>         exceptions.KeyError: 19
>
> What am I doing to make this happen? I am using a class derived  
> from the threadedselect
> blocking demo. This implementation is attached, and has a blocking  
> run() method and
> a blocking getDeferred() method. It takes interleaved' callbacks  
> and puts them in a
> queue. The run() method takes them out of the queue in a blocking  
> way and calls them.
> getDeferred() makes a threading.Event(), causes a CB to be queued,  
> and then waits
> on the event to return the result. This way there can be many  
> threads using the blocking
> getDeferred(), and many threads that just use the normal twisted  
> stuff.

I expect that you're using TwistedManager incorrectly.  There doesn't  
appear to be anything wrong with the code you attached, but it also  
doesn't do anything on its own.  The problem is somewhere else.

-bob




From bob at redivi.com  Fri Jul 22 18:19:25 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 22 Jul 2005 14:19:25 -1000
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <20050722233232.GH27029@groovy.net>
References: <20050722145647.GW27029@groovy.net>
	<09913134-2BA7-4194-8864-99A5CDB46123@redivi.com>
	<20050722233232.GH27029@groovy.net>
Message-ID: <A5BC6FE6-6E6D-4F3F-A5C0-4690A7512211@redivi.com>


On Jul 22, 2005, at 1:32 PM, William Waites wrote:

> On Fri, Jul 22, 2005 at 09:19:50AM -1000, Bob Ippolito wrote:
>
>>
>> I expect that you're using TwistedManager incorrectly.  There doesn't
>> appear to be anything wrong with the code you attached, but it also
>> doesn't do anything on its own.
>>
>
> I'm trying to put together a minimal example that is supposed to  
> work and
> doesn't.
>
> How the bit driven by calls works; the embedded Python creates a  
> thread
> and does something like:
>
>   d = routeServer.callRemote("lookup", "somesource", "somedest")
>   rset = manager.getDeferred(d)

That's your problem, you can't call ANY Twisted code from anything  
but the reactor thread (the one that called interleave), unless  
explicitly stated that it's allowed to do so (callFromThread, for  
example).

You've misunderstood what the example is trying to demonstrate, it is  
not a magical "invert twisted" box.  It demonstrates how you can  
create a simple ostensibly single-threaded application using Twisted  
that has a blocking interface on top of Deferreds.  It's similar to  
how you would use any of the networking code in the standard library,  
only that there's asynchronous goodness somewhere behind the scenes  
making everything tick.

-bob




From ww at groovy.net  Fri Jul 22 23:33:45 2005
From: ww at groovy.net (William Waites)
Date: Sat, 23 Jul 2005 01:33:45 -0400
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <A5BC6FE6-6E6D-4F3F-A5C0-4690A7512211@redivi.com>
References: <20050722145647.GW27029@groovy.net>
	<09913134-2BA7-4194-8864-99A5CDB46123@redivi.com>
	<20050722233232.GH27029@groovy.net>
	<A5BC6FE6-6E6D-4F3F-A5C0-4690A7512211@redivi.com>
Message-ID: <20050723053345.GK27029@groovy.net>

On Fri, Jul 22, 2005 at 02:19:25PM -1000, Bob Ippolito wrote:
> 
> You've misunderstood what the example is trying to demonstrate, it is  
> not a magical "invert twisted" box. 

A magical "invert twisted" box... How about something like this?

def invert(f):
    def _i(f, *av, **kw)
        e = Event()
        result = []
        def _s(res):
            result.append(res)
            e.set()
        def _f():
            d = maybeDeferred(f, *av, **kw)
            d.addBoth(_s)
        reactor.callFromThread(_f, *av, **kw)
        e.wait()

        res = result[0]
        if isinstance(res, Exception):
            raise res
        return res
    return _i

class InvertedClass:
    def fooMethod(self, ...):
        ... do twisted stuff
    fooMethod = invert(fooMethod)

Maybe with magic getattr functions it could be made completely
transparent... Not sure if it is worth the bother though.

If I am careful to do this sort of manipulation to protect potentially
dangerous code, it seems like the problems with pb disappear...

Thanks for your insight.

-w



From ww at groovy.net  Fri Jul 22 23:56:29 2005
From: ww at groovy.net (William Waites)
Date: Sat, 23 Jul 2005 01:56:29 -0400
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <20050723053345.GK27029@groovy.net>
References: <20050722145647.GW27029@groovy.net>
	<09913134-2BA7-4194-8864-99A5CDB46123@redivi.com>
	<20050722233232.GH27029@groovy.net>
	<A5BC6FE6-6E6D-4F3F-A5C0-4690A7512211@redivi.com>
	<20050723053345.GK27029@groovy.net>
Message-ID: <20050723055629.GL27029@groovy.net>

or more correctly,

def invert(f):
    def _i(*av, **kw)
        e = Event()
        result = []
        def _s(res):
            result.append(res)
            e.set()
        def _f():
            d = maybeDeferred(f, *av, **kw)
            d.addBoth(_s)
        reactor.callFromThread(_f)
        e.wait()

        res = result[0]
        if isinstance(res, Exception):
            raise res
        return res
    return _i

should this function exist somewhere in twisted?

-w



From bob at redivi.com  Sat Jul 23 00:09:33 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 22 Jul 2005 20:09:33 -1000
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <20050723055629.GL27029@groovy.net>
References: <20050722145647.GW27029@groovy.net>
	<09913134-2BA7-4194-8864-99A5CDB46123@redivi.com>
	<20050722233232.GH27029@groovy.net>
	<A5BC6FE6-6E6D-4F3F-A5C0-4690A7512211@redivi.com>
	<20050723053345.GK27029@groovy.net>
	<20050723055629.GL27029@groovy.net>
Message-ID: <5EBA4DF7-AEE5-480E-9C68-F49A66009DD6@redivi.com>


On Jul 22, 2005, at 7:56 PM, William Waites wrote:

> or more correctly,
>
> def invert(f):
>     def _i(*av, **kw)
>         e = Event()
>         result = []
>         def _s(res):
>             result.append(res)
>             e.set()
>         def _f():
>             d = maybeDeferred(f, *av, **kw)
>             d.addBoth(_s)
>         reactor.callFromThread(_f)
>         e.wait()
>
>         res = result[0]
>         if isinstance(res, Exception):
>             raise res
>         return res
>     return _i
>
> should this function exist somewhere in twisted?

Maybe if you can provide a tested and documented implementation.

I don't have a use for it, because I keep threads sane and separate,  
so I'm not going to think too hard about whether what you've correct  
is right or not.

-bob




From exarkun at divmod.com  Sat Jul 23 00:28:01 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 23 Jul 2005 02:28:01 -0400
Subject: [Twisted-Python] PB waitingForAnswers KeyError
In-Reply-To: <20050723055629.GL27029@groovy.net>
Message-ID: <20050723062801.26278.1721814453.divmod.quotient.16038@ohm>

On Sat, 23 Jul 2005 01:56:29 -0400, William Waites <ww at groovy.net> wrote:
>or more correctly,
>
>def invert(f):
>    def _i(*av, **kw)
>        e = Event()
>        result = []
>        def _s(res):
>            result.append(res)
>            e.set()
>        def _f():
>            d = maybeDeferred(f, *av, **kw)
>            d.addBoth(_s)
>        reactor.callFromThread(_f)
>        e.wait()
>
>        res = result[0]
>        if isinstance(res, Exception):
>            raise res
>        return res
>    return _i
>
>should this function exist somewhere in twisted?

One might take the position that if you are not experience enough to write it yourself, you are not experience enough to write a multithreaded program.

FWIW, this function has actually been written a handful of times, and at least a couple copies of it are in the list archives.  There's also an open issue in the bug tracker related to it.  I believe it is stalled on the submission of a reasonable set of unit tests.

Jp



From sflist at ihonk.com  Sat Jul 23 01:00:51 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Sat, 23 Jul 2005 01:00:51 -0600
Subject: [Twisted-Python] PB: New credentials checker?
Message-ID: <1122102051.6674.7.camel@localhost.localdomain>

Hi all,

I'm trying to invent my own checkers, with associated credentials, and
still use the pbClientFactory's login() function. I saw, however, that
the source in pb.py notes that, for now, login() only works with
IUsernamePassword: "Currently only credentials implementing
IUsernamePassword are supported." (twisted/spread/pb.py, line 1611).

So I started by subclassing the pbClientFactory, making my own login()
function, and _cbSendUsername() and _cbResponse(), and then as I
realized PB is using its own challenge response mechanism, it just
started getting more complicated than I thought it probably should.

So what's my best option -- continue on the path I'm on, or just
serialize the data I need into the username and password fields in the
standard checkers? Or is there an easier way I'm missing?

Thanks!

Steve




From disen at geo.unizh.ch  Sat Jul 23 05:27:46 2005
From: disen at geo.unizh.ch (Daniel Isenegger)
Date: Sat, 23 Jul 2005 13:27:46 +0200
Subject: [Twisted-Python] listen to a process and react to events
Message-ID: <42E229B2.4000401@geo.unizh.ch>

Hi,
is it possible within the TwistedMatrix framework to listen to processes 
(e.g. running on local HDs) like you can listen to a port?
For example, i have a GUI firing events. Now i want to listen from 
twistedmatrix to this process, catch the  output of the process and 
process them.
can anybody provide me a code example?

A somehow similar example is  quotes.py  from the TwistedMatrix Homepage 
howto's 
(http://twistedmatrix.com/projects/core/documentation/howto/process.html). 
But (as i understand it) there the reactor listen to a port, not to the 
process fortune itself.


Thanks dani




From paolo.veronelli at gmail.com  Sat Jul 23 09:52:17 2005
From: paolo.veronelli at gmail.com (Paolino)
Date: Sat, 23 Jul 2005 17:52:17 +0200
Subject: [Twisted-Python] Defgen explanation
Message-ID: <42E267B1.1020602@gmail.com>

Hello all,

I have the  next running script which cause me some questions.
I thought deferredGenerators tech could be easily reconverted to 
Deferreds ,but I'm having no success in doing it on the piece of code in 
Indexer.do method.

Particularly if I substitute the generator with
DeferredList([indexing() for indexing in 
indexings]).addCallback(self.do)  I fall in recursion.But the 
rescheduling has to happen really at the end of the indexing.

I think I miss something :(


Thanks for help


from twisted.internet import reactor
from twisted.internet.defer import waitForDeferred as 
wait,deferredGenerator as async,Deferred,DeferredList
import time

def deferredReady(value=False,later=0):
   deferred=Deferred()
   reactor.callLater(later,deferred.callback,value)
   return deferred

coop=lambda:wait(deferredReady())

class Indexer(object):
   def do(self,*_):
     indexings=self.indexings
     self.indexings=[] # a new queue
     ##### how to substitute this with non-generator deferring ?
     def _():
       yield wait(DeferredList([indexing() for indexing in indexings]))
       deferredReady().addCallback(self.do) # rescheduling
     async(_)()
     #######  end of substitution

   def __init__(self):
     self.indexings=[] # a queue
     self.do() # first scheduling
   def index(self,uri):# the interface for triggers
     def _():
       print 'indexing ',uri
       for i in range(10000): #adjust this higher to see the queue 
growing if your machine is faster
         yield coop()
       print 'indexed',uri
     self.indexings.append(async(_))
     print 'Queued indexings',len(self.indexings)

indexer=Indexer()

from twisted.internet import task

task.LoopingCall(lambda :indexer.index('ciao')).start(3)
task.LoopingCall(lambda :indexer.index('mamma')).start(4)
task.LoopingCall(lambda :indexer.index('papa')).start(5)

reactor.run()



From antonykummel at yahoo.com  Sun Jul 24 10:33:11 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Sun, 24 Jul 2005 09:33:11 -0700 (PDT)
Subject: [Twisted-Python] Re: communication idioms with Perspective Broker
In-Reply-To: <uoe8wyux2.fsf@fitlinxx.com>
Message-ID: <20050724163311.99502.qmail@web33904.mail.mud.yahoo.com>


Hi David,

 

Thanks a lot for your response. It seems that your solution fulfills most of what I wanted to achieve, so it was a great help.

 

This is how I understand the registry/manager/wrappers system:

   The meaning of the wrappers is that
      referenceables are transferable to third parties who get their flow pass through the middle process, and 
      that the wrappers get reconnected automatically

   If I understand correctly, the only purpose of the registry is to provide an interface to enable the re-connection of the wrappers.
   The purpose of managers is simply to dispense data and state objects.

 

Questions:

   Do managers only dispense state and data, or do they also provide state control?
   Do cacheables (state objects) re-connect? Is there any reason why they shouldnt?
   Regarding multi-layer wrapping, how do cacheables go from the original server to the final client without becoming unjellyable in the middle?

 

Thanks,

 

Antony Kummel

 

 

P.S.

 

There are some things I am considering to do differently, and it would be interesting to hear your opinion.

 

The system I had in mind:

   I like and want to adhere to the data/state distinction you made.
   Events will be handled locally by remote caches, based on changes in the cached data (this may be accomplished degenerately, by not exposing anything other than the event).

 

Differences from your system:

   I would like all of my referenceables and cacheables in my system to be re-connecting. This to some extent cancels the need for managers, because any dynamically changing object is re-connecting.
   Instead of (or possibly in addition to) manager objects, I want to have what I call Seed objects, which represent a combination of state, data and referenceables (all optional). These seeds will be copyable, and will include the knowledge required to retrieve their components.
   The seed objects will represent the basic objects of the system (like users), and will provide control and access to their entire data/state.
   The main reasons for seeds are:
      I want state, data and control to be provided by the same object for clarity, and not have each of them require an individual query. For example, a user will have Name, email address, etc. as data, online/offline as state, and a send_message method.
      I want state objects, referenceables, and possibly data associated with a Seed to be retrievable from a Server different from the one who dispensed the Seed (for example, the database may provide a seed and the associated user-changeable data, but the state may be kept by a different server). For example, the users data may be stored in a database, his online/offline state retrieved from a presence server, and sending him a message may require connecting to his workstation.


 

		
---------------------------------
 Start your day with Yahoo! - make it your home page 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050724/fa7fdaad/attachment.html>

From hikenboots at gmail.com  Mon Jul 25 09:53:22 2005
From: hikenboots at gmail.com (J French)
Date: Mon, 25 Jul 2005 10:53:22 -0500
Subject: [Twisted-Python] Getting peer IP address from Perspective Broker
Message-ID: <35b7725f05072508535ba3bd1a@mail.gmail.com>

Is there an accessible method to retrieve a peer's ip address from
within pb?  I just want to log it.

I read the Faq and see how to do it when subclassing protocol i.e.:
class MyProtocol(protocol.Protocol):
    def connectionMade(self):
        print "connection from", self.transport.getPeer()

I'd appreciate it if someone can point me in the right direction.

TIA



From exarkun at divmod.com  Mon Jul 25 15:55:56 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 25 Jul 2005 17:55:56 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14219 - Add LowLevel HTTP
 Client code (based on the OSAF zanshin),
 with support for Basic and Digest authentication. Documentations and
 unittests to come.
In-Reply-To: <E1Dx9A3-0005R4-00@wolfwood>
Message-ID: <20050725215556.26278.2099527179.divmod.quotient.16995@ohm>

On Mon, 25 Jul 2005 14:02:51 -0600, David Reid <dreid at wolfwood.twistedmatrix.com> wrote:
>Author: dreid
>Date: Mon Jul 25 14:02:50 2005
>New Revision: 14219
>
>Added:
>   trunk/twisted/web2/client/
>   trunk/twisted/web2/client/__init__.py
>   trunk/twisted/web2/client/auth.py
>   trunk/twisted/web2/client/http.py
>Modified:
>   trunk/twisted/web2/http_headers.py
>Log:
>Add LowLevel HTTP Client code (based on the OSAF zanshin), with support for Basic and Digest authentication.  Documentations and unittests to come.

I've reverted this, since it broke a couple of the existing web2 unit tests.

Just as a reminder, current Twisted development policy dictates that: new feature development should occur in a branch, not in trunk; branches should be reviewed by at least one other core developer before being merged into trunk; and all new features should come with unit tests.

If anyone needs any help figuring out the technical details (how to make or merge branches in svn, etc), #twisted and this mailing list are always around to help.

Not following this policy (or introducing test suite regressions) makes it highly likely that the commit will be reverted.

Thanks,

Jp



From db3l at fitlinxx.com  Mon Jul 25 16:42:39 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 25 Jul 2005 18:42:39 -0400
Subject: [Twisted-Python] Re: communication idioms with Perspective Broker
References: <uoe8wyux2.fsf@fitlinxx.com>
	<20050724163311.99502.qmail@web33904.mail.mud.yahoo.com>
Message-ID: <u3bq2pkww.fsf@fitlinxx.com>

Antony Kummel <antonykummel at yahoo.com> writes:

> This is how I understand the registry/manager/wrappers system:
>
> The meaning of the wrappers is that referenceables are
> transferable to third parties who get their flow pass through the
> middle process, and that the wrappers get reconnected automatically

Close (IMO) - the referenceable to the original object (which is
created as a result of passing that object through PB to a third
party) is placed in a wrapper which is then given to client code.
For example (in ASCII):

+---------+                      +---Wrapper-----+
| Manager |---[ PB transport ]---|[Referenceable]|<---- Client code
+---------+                      +---------------+

So the only reference most of the client code maintains is to the
wrapper object, which can remain consistent across outages.  It
handles reconnections to the original object when needed, which will
technically create a new referenceable (since PB referenceables can't
continue to be used across a disconnect/reconnect), but that is
transparent to the client code.

> If I understand correctly, the only purpose of the registry is to
> provide an interface to enable the re-connection of the wrappers.
> The purpose of managers is simply to dispense data and state
> objects.

The primary reason for the registry in our system is to act as a
single management object to retrieve references to our registerable
objects (such as managers), whether the request to locate a given
registerable object is coming locally or remotely.  Much as any other
central registry, it permits us to pass a single object reference
around to various parts in the system (including remote clients)
through which access to other official entry points can be retrieved.

But yes, it also simplifies the remote connection process since all we
need to do is provide a remote reference to a registry and through
that remote (wrapped) references to objects such as managers may be
retrieved through the same code that would be used if the registry was
local.

And yes, as I've described managers are largely data management
objects.  We do also have higher order registerables (we call them
packages) which implement high level functionality - generally to
simplify common operations that would otherwise need to interact with
several managers simultaneously.

> Questions:
>
> Do managers only dispense state and data, or do they also provide
> state control?

I suppose it depends on what you would consider covered by "state
control," but the general answer would be there's no single rule.
Some managers are almost entirely pure data storage/retrieval, while
others provide for the retrieval of objects that themselves are fairly
complex (such as our cacheable models/controllers).

> Do cacheables (state objects) re-connect? Is there any reason why
> they shouldnt?

Yes, they can be wrapped as well.  To the server side instance of the
cacheable, a reconnection is just another "new" observer.

> Regarding multi-layer wrapping, how do cacheables go from the
> original server to the final client without becoming unjellyable in
> the middle?

(warning - this got very long after I started writing it...)

I'm not sure if you meant copyable here instead of cacheable since a
cacheable controls it's own transmission of state to the client, as
opposed to a copyable which has to be directly jellyable.

For the cacheable, as long as it implements the Cacheable support, it
controls what gets transmitted to any observer, so whether it's the
original instance or a client reference to the original instance, it's
transmitting the same data.

But we have to date handled cacheables with an additional layer.  Since
we use cacheables typically for models for which users need to monitor
changes, we needed something that works the same locally and remotely.
We tend to use pydispatcher for signals (or some of our older objects
handle the observer pattern directly), and implement our models using
that, so all monitoring is technically local.  We then have a generic
server side wrapper that is a pb.Cacheable, and can observe any such
model as its data for the cacheable clients.  This might also work by
just having the models be directly cacheable, but it's the way the
system has grown to date.

The key to most of this is that we built a structure where the remote
wrapped instance of an object uses the same class definition (directly
through inheritance) as the original instance, just with a wrapper
mixed-in.  Not only does the client side wrapped object "work" like the
local object, with the use of callRemote hidden behind the normal
interface, but it then can be remotely referenced itself and behave just
like the original reference.

To try to strip down to a simple example, we were able to encapsulate
pretty much everything about the distributed processing part of the
system into two package modules - remoteable.py for a server side
support, and remote.py for client side.

remoteable is thin - we've have copyable/referenceable/cacheable
subclasses just to isolate some custom code (lets classes define some
fields that should automatically pickle to avoid PB not knowing how to
transmit them) and for future expansion.  This also houses the server
side observer/cacheable wrapper I mentioned above.

remote handles the client side.  It defines the key wrapper classes (for
client side copyable copies, referenceable references, and cacheable
caches :-)).  These wrapper classes implement reconnections
(cacheable/referenceable) and other custom support (like unpickling for
copies).  They also themselves inherit from the remoteable classes so
they can also be passed over a PB session.

remote then defines classes that multiply inherit from each of the
original classes for those classes that may be distributed, as well as
the appropriate wrapper class.  In most cases these definitions are
simply "pass" but they sometimes define slightly custom functionality
for the client side.  The only really detailed one is the
remote.Registry, which has the knowledge to automatically wrap any
retrieved object in the appropriate wrapper.

An example may help.  Assuming the following classes in
remoteable/remote as mentioned above:

           - - - - - - - - - - - - - - - - - - - - - - - - -
remoteable.Copyable, Cacheable, Referenceable - subclasses of pb.*
remoteable.ModelCache - wraps an model as a cacheable.  We have
   subclasses of this for each model (so we can register the unjellying)

remote.CopyObject - mirror on the remote side for remoteable.Copyable.
   Is itself also a remoteable.Copyable
remote.RemoteWrapper - remote side wrapper for a Referenceable.
   Is itself also a remoteable.Referenceable.
           - - - - - - - - - - - - - - - - - - - - - - - - -

Then, if in a core module in our package (call it aurora.User) in the
system we defined some user related objects (that are meant to be
distributable), it might look like:

           - - - - - - - - - - - - - - - - - - - - - - - - -
class User(remoteable.Copyable):
    """A typical data object"""
    # Attributes and simple methods for manipulating as needed
    pass

class UserModel(remoteable.Cacheable):
    """A typical cached model"""
    # Attributes and signal support for notification on changes
    pass

class UserManager(interfaces.IUserManager, remotable.Referenceable):
    """A typical manager.  IUserManager is an interface definition for
    the public API"""
    # Methods for accessing/changing User and UserModel objects
    # Assume that getUser retrieves  user and getModel retrievs a UserModel
           - - - - - - - - - - - - - - - - - - - - - - - - -

As it stands above, the user objects would be fully usable in a local
context.  Access to the UserManager would be through a Registry in which
it had been registered, and the UserManager would provide access to
either User or UserModel objects.

To permit distribution, we'd first add appropriate remote_* (or view_*)
entry points to the UserManager.  Most would simply mirror their
original methods (leaving it up to pb to construct the references).  But
any methods that returned models would be adjusted so that instead of
just returning the model, they wrapped that model in an appropriate
remoteable.ModelCache subclass and returned that instead.  So something like:

           - - - - - - - - - - - - - - - - - - - - - - - - -
    remote_getUser = getUser

    def remote_getModel(self, *args, **kwargs):
        return remoteable.UserModel(self.getModel(*args, **kwargs))
           - - - - - - - - - - - - - - - - - - - - - - - - -

That's the extent to which original objects need to be touched.  The
only remote entry points are in managers (our referenceables), with data
objects being handled by PB as copyable or cacheable.

Then in the remote.py module we'd add the following:

           - - - - - - - - - - - - - - - - - - - - - - - - -
class User(aurora.User.User, CopyObject):
    # CopyObject is our own mirror to remoteable.Copyable
    pass

pb.setUnjellyableForClass(aurora.User.User, User)
# Note that a remote copy can be a copy of itself (this handles hops 2+)
pb.setUnjellyableForClass(User, User)

class UserModel(aurora.User.UserModel, pb.RemoteCache):
    # Depending on how the model detects state changes, you may need to
    # do some processing in setCopyableState or you may not.
    pass

pb.setUnjellyableForClass(remoteable.UserModel, UserModel)

class UserManager(RemoteWrapper, interfaces.IUserManager):
    exclude = "remote_getModel"

    # We still need to locally wrap as a cacheable for hops 2+
    def remote_getModel(self, *args, **kwargs):
        return remoteable.UserModel(self.getModel(*args, **kwargs))
           - - - - - - - - - - - - - - - - - - - - - - - - -

The last one could probably use some explaining.  Our RemoteWrapper
class intercepts attribute lookups, and based on any superclass that is
one of our interfaces, uses the interface definition to reflect method
calls (as well as remote_* versions of them) over callRemote.  We permit
certain methods to be excluded from the wrapping (via an "exclude"
attribute) which lets us handle them locally in the wrapper. In this
case, just as the original user object did, we need to wrap the local
cache of a UserModel in the cacheable before trying to return to any
further remote callers.  (This is where having our remote.UserModel be
directly a pb.Cacheable might simplify things).  But the getUser method
is basically for free, since PB will handle making a copyable of the
original user object which will end up coming across to the client
wrapped as a remote.User object.

Overall, we don't do that much overriding of the remote methods.  One
case where we do is for the remote.Registry since it's responsible for
always wrapping returned managers in the right remote class.  Since our
registry lookup method is given an interface to find a manager for, the
remote.Registry looks in the local module (remote) for a class
definition inheriting from the same interface and then uses that to wrap
the returned referenceable, thus more or less transparently making the
returned referenceable look just like the original object.

These remote.* objects are all themselves copy/cache/referenceable since
they also inherit from their remoteable counterparts (or are wrapped by
such as in the getModel call).  So this can go on for many hops.

Now let me see if I can put this together with a few other components.
For example, in a two hop setup, you'd get:

    Server [<--A-->] Client 1   [<---B--->]  Client 2
(a) Registry <------ remote.Registry <------ remote.Registry
(b) UserManager <--- remote.UserManager <--- remote.UserManager
(c) User <---------- remote.User <---------- remote.User
(d) UserModel <----- remote.UserModel <----- remote.UserModel  (etc...)

The connections "A" and "B" are actually paired Server and Client
objects of our own (that I mentioned in my last note).

During a startup sequence, Server creates the master registry (including
instantiating and registering any managers).  It then establishes a
Server object that provides access to the Registry for network clients.
Simultaneously the Registry may be used by local processing.

At some point, Client 1 uses its Client object to connect to Server's
Server object and retrieve a reference to Registry (a), which is wrapped
in a remote.Registry by the Client object.  That remote.Registry can
then be published by Client 1's Server object (the Server object just
knows it has a registry, but can't or needn't distinguish between
Registry and remote.Registry), which can be retrieved by Client 2's
Client object.  Client 2 also gets a remote.Registry, but it's an extra
"hop" removed from the original Registry instance.

Now sticking with 2 hops, say Client 2 needs some information.  First,
it'll ask its registry for a reference to the UserManager.  The call is
reflected by Client 2's remote.Registry up to Client 1, whose
remote.Registry reflects it up to Server's Registry.  That Registry
returns a reference to UserManager which PB sends as a referenceable
(shared only between Server and Client 1).  The remote.Registry on
Client 1 wraps that as a remote.UserManager and then returns it to
Client 2, which again causes PB to send a referenceable (shared only
between Client 1 and Client 2), which Client 2's remote.Registry again
wraps as a remote.UserManager.

Now, Client 2 asks its UserManager for a User object.  The call reflects
up to the Server the same way, but the response this time is a copyable,
so PB copies it across Server->Client 1 (which instantiates a
remote.User), which is then copied by PB from Client 1->Client 2
(creating another remote.User).

And perhaps now Client 2 wants a UserModel (asking the UserManager).
Call again reflects up to Server, but the remote entry point on the main
UserManager wraps the UserModel in a remoteable.UserModel to return to
PB, which then treats it as a cacheable down to Client 1, which
instantiates it as remote.UserModel.  Client 1's remote.UserManager then
wraps it in a local remoteable.UserModel to return (as a cacheable) to
Client 2, which gets a remote.UserModel.  From Server's perspective
there is a remoteable.UserModel instance (which is watching signals on
the original UserModel) which has Client 1 as a PB observer, and from
Client 1's perspective there is a remoteable.UserModel instance (which
is watching signals on the local remote.UserModel) which has Client 2 as
a PB observer.

Still with me?  :-)

Now let's say there's an outage - say between Server and Client 1.
Whatever the next attempt is to use callRemote in any wrapped object
will detect the problem and emit a disconnected signal.  We also have a
periodic Client->Server object "ping" that will pick up an outage in the
absence of other calls, which occurs periodically or is triggered
automatically upon receiving the disconnected signal from any wrapper object.

Upon detection by the Client object of the outage, it then emits its own
disconnected signal, upon which various application level operations may
take place, officially disconnects the PB socket, and starts attempting
to reconnect.

Any operations on wrapped objects past this point will generate the
normal PB DeadReferenceError exception since we shut down the connection.

When Client 1's Client object manages to reconnect, it will immediately
re-query the registry from the Server's Server object.  Once it has
successfully retrieved the new registry, it then emits a newly connected
signal which includes the new registry reference.

Our remote.Registry object (along with other application level stuff)
listens for this signal and upon receipt, updates its internal wrapped
reference, and automatically issues a requery to that reference for any
managers that had previously been queried through it.  When it gets new
references to them it updates its internal information, as well as any
wrappers that it had previously handed out (it keeps a cache).  Once
this final step is completed, any application code that had been
attempting to use those wrapped references will be working again.

The remote copyables don't need any special support since they are still
legitimate copies.  But remote cacheables also need to be re-connected,
and are trickier since it's harder to come up with a single way to
retrieve new cacheables, since they are less regular than manager
references retrieved through the registry.  To date we've handled this
on a case by case basis either through the wrapper of the responsible
manager, or via application level support for re-retrieving the model
upon receipt of the reconnection signal.

> P.S.
>
(...)
> The system I had in mind:
>
> I like and want to adhere to the data/state distinction you made.
> Events will be handled locally by remote caches, based on changes in
> the cached data (this may be accomplished degenerately, by not
> exposing anything other than the event).

As mentioned above, in our case we make use of pydispatcher for
signals/events within each local application space, using the PB
cacheable setup (with wrappers on each end) to reflect the data.  This
lets client code be written as if it was handling local signals
regardless of whether the model object is a cache of a remote object or
truly the local instance.

> Differences from your system:
>
> I would like all of my referenceables and cacheables in my system to
> be re-connecting. This to some extent cancels the need for managers,
> because any dynamically changing object is re-connecting.

We're pretty much auto-reconnecting (as above).  I think you'll probably
need something akin to a manager, or at least a registry to perform the
reconnection though, or else you won't have a well-defined point at the
original to which you can re-issue the original request to get a new
referenceable/cacheable on the reconnecting client.

> Instead of (or possibly in addition to) manager objects, I want to
> have what I call Seed objects, which represent a combination of state,
> data and referenceables (all optional). These seeds will be copyable,
> and will include the knowledge required to retrieve their components.

Sounds reasonable.  I still think you'll need a separate construct to
"own" access to these Seed objects, or else what is the remote seed
reference going to issue a query against in order to rebuild its remote
references following an outage?

(...)
>    The main reasons for seeds are:
> 
> I want state, data and control to be provided by the same object for
> clarity, and not have each of them require an individual query. For
> example, a user will have Name, email address, etc. as data,
> online/offline as state, and a send_message method.

One thing to consider is the creation of the information/state that the
seeds are encapsulating.  One of the reasons we ended up going more
heavily towards copyable objects (rather than references) is that we can
end up creating such objects at various points within the distributed
system.  So it's very convenient to be able to instantiate a local
object instance (say of a user object) in order to begin the process of
creating a user, and populating its information, without bringing in the
rest of the baggage of the remote connection until it comes time for the
"store" operation.  Likewise we found it much easier to manage
reconnections upon "active" objects with well-defined APIs as opposed to
the data objects such as a user record.

So even if you have the construct of a seed object to encapsulate remote
handling, you might want to consider separating out the data object
components into their own class for simpler manipulation, prior to
assigning that data to a seed object to become part of the distributed
system.

> I want state objects, referenceables, and possibly data associated
> with a Seed to be retrievable from a Server different from the one who
> dispensed the Seed (for example, the database may provide a seed and
> the associated user-changeable data, but the state may be kept by a
> different server). For example, the users data may be stored in a
> database, his online/offline state retrieved from a presence server,
> and sending him a message may require connecting to his workstation.

This sounds like more of a reason to split some of the functionality
into separable entities than trying to combine them all into a single
seed object, although I could probably see some argument for combining
in order to hide the origin of the data from the end user.  But then
you're going to have to keep a lot of information in that seed object
about where each of its information pieces originally came from and be
able to reconstitute the references when needed.  And handle what
happens if you lose contact with the owner of one piece of the
information but not another.

To a large extent, permitting this sort of breakout is where we headed
with our registry/manager structure.  To a client, it only has a
registry reference, and asks it for managers in order to
retrieve/manipulate state.  But it doesn't know how the registry locates
managers nor how the managers locate their state.  So when I ask my
"local" registry for a user manager, for all I know that request is
replicated across 5 hosts and I eventually get what appears to be a
local user manager but is a remote reference to an object instance 5
hosts away.  At the same time that same registry when asked for a
session manager, might return me a local object from my own local
process.

The decision about where the managers are located is up to top
level application code that instantiates the registry and makes it
available on the network (and we have various registry variants for
different ways of combining local and remote managers).  This lets each
"hop" along the way make some of its own decisions independent of other
parts of the system, with a given node running a registry in control of
what any nodes "behind" it sees, or even what managers are available.

This can certainly be incorporated into a single seed object, but I
think you'll have to make some decisions about how the original data
sources are configured (and does that itself need to be capable of being
distributed).  If you can own that configuration amongst various
centrally maintained servers, and you're operating from primarily a hub
and spoke system it'll probably work well.  But if you might end up with
independently operating clusters of nodes or want to distribute
administrative domains over various sorts of data, it might be more of a
challenge.

Hope this has spurred some more thoughts.  Best of luck with your
project!

-- David




From itamar at itamarst.org  Tue Jul 26 09:04:55 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 26 Jul 2005 11:04:55 -0400
Subject: [Twisted-Python] Getting peer IP address from Perspective Broker
In-Reply-To: <35b7725f05072508535ba3bd1a@mail.gmail.com>
References: <35b7725f05072508535ba3bd1a@mail.gmail.com>
Message-ID: <1122390295.8854.53.camel@localhost.localdomain>

On Mon, 2005-07-25 at 10:53 -0500, J French wrote:
> Is there an accessible method to retrieve a peer's ip address from
> within pb?  I just want to log it.
> 
> I read the Faq and see how to do it when subclassing protocol i.e.:
> class MyProtocol(protocol.Protocol):
>     def connectionMade(self):
>         print "connection from", self.transport.getPeer()
> 
> I'd appreciate it if someone can point me in the right direction.

remoteReference.broker.transport.getPeer() will do it. The broker
attribute of RemoteReferences is the protocol instance they are
connected to.




From natester at gmail.com  Tue Jul 26 17:44:59 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Tue, 26 Jul 2005 17:44:59 -0600
Subject: [Twisted-Python] CPU intensive threads
Message-ID: <4adac7a305072616446b6e13a@mail.gmail.com>

Is there anything twisted can do about CPU intensive threads?

When I run a CPU intensive method via threads.deferToThread it takes
all the CPU away and renders the twisted process unresponsive.  The
perspective broker for example will not make any connections until the
CPU intensive methods finish.

Is there a way to set the priority of the main part of twisted so that
it can run CPU intensive threads and still service connections.

Thanks,  
Nate



From ww at groovy.net  Tue Jul 26 17:51:46 2005
From: ww at groovy.net (William Waites)
Date: Tue, 26 Jul 2005 19:51:46 -0400
Subject: [Twisted-Python] CPU intensive threads
In-Reply-To: <4adac7a305072616446b6e13a@mail.gmail.com>
References: <4adac7a305072616446b6e13a@mail.gmail.com>
Message-ID: <20050726235146.GD20946@groovy.net>

you can yield or do a blocking operation like calling a syscall
every so often in the cpu intensive thread

On Tue, Jul 26, 2005 at 05:44:59PM -0600, Nathaniel Haggard wrote:
> Is there anything twisted can do about CPU intensive threads?
> 
> When I run a CPU intensive method via threads.deferToThread it takes
> all the CPU away and renders the twisted process unresponsive.  The
> perspective broker for example will not make any connections until the
> CPU intensive methods finish.
> 
> Is there a way to set the priority of the main part of twisted so that
> it can run CPU intensive threads and still service connections.
> 
> Thanks,  
> Nate
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From foom at fuhm.net  Wed Jul 27 06:21:43 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 27 Jul 2005 08:21:43 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <B2D9196C-3FFC-4E4C-9B2E-63924C3A1319@fuhm.net>

Bug summary
______________________
Since 2005-07-21 20:48:42.470000:
Bugs opened: 7   Bugs closed: 2   Total open bugs: 417 (+5)
   Urgent: 9 (+0)
   Bug: 181 (+2)
   Feature: 150 (+3)
   Wish: 77 (+0)

New / Reopened Bugs
______________________
                     ==== Bug ====
[WEB] web2 file upload and unit test problems  (3 days ago)
        http://twistedmatrix.com/bugs/issue1127 opened by exarkun

win32reactor spawnProcess incorrectly escapes cmd line  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1123 opened by justinj

pop3client needs to handle servers which do not implement CAPA  (4  
days ago)
        http://twistedmatrix.com/bugs/issue1125 opened by bkirsch

getHost and getPeer not needed for IProcessTransport  (4 days ago)
        http://twistedmatrix.com/bugs/issue1124 opened by justinj

                     ==== Feature ====
Package Twisted using Eggs/EasyInstall  (3 days ago)
        http://twistedmatrix.com/bugs/issue1126 opened by glyph

Twisted fork of pyOpenSSL (pyTLS ?)  (5 days ago)
        http://twistedmatrix.com/bugs/issue1121 opened by landonf

fix for gtk2reacton warnings  (5 days ago)
        http://twistedmatrix.com/bugs/issue1122 opened by libber

Bugs Closed
______________________
                     ==== Bug ====
[FTP] IFTPShell needs to be completely restructured  (3 months ago)
        http://twistedmatrix.com/bugs/issue983 opened by srichter,  
closed by itamarst

win32reactor spawnProcess incorrectly escapes cmd line  (4 days ago)
        http://twistedmatrix.com/bugs/issue1123 opened by justinj,  
closed by itamarst





From itamar at itamarst.org  Wed Jul 27 08:40:18 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 27 Jul 2005 10:40:18 -0400
Subject: [Twisted-Python] CPU intensive threads
In-Reply-To: <4adac7a305072616446b6e13a@mail.gmail.com>
References: <4adac7a305072616446b6e13a@mail.gmail.com>
Message-ID: <1122475219.8776.17.camel@localhost.localdomain>

On Tue, 2005-07-26 at 17:44 -0600, Nathaniel Haggard wrote:

> When I run a CPU intensive method via threads.deferToThread it takes
> all the CPU away and renders the twisted process unresponsive.  The
> perspective broker for example will not make any connections until the
> CPU intensive methods finish.

If it's a C extension you'll want to release the global interpreter lock
when possible, otherwise other threads will *never* run, regardless of
how much CPU you code uses.






From db3l at fitlinxx.com  Wed Jul 27 09:05:43 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 27 Jul 2005 11:05:43 -0400
Subject: [Twisted-Python] Re: CPU intensive threads
References: <4adac7a305072616446b6e13a@mail.gmail.com>
Message-ID: <uvf2wffw8.fsf@fitlinxx.com>

Nathaniel Haggard <natester at gmail.com> writes:

> Is there a way to set the priority of the main part of twisted so that
> it can run CPU intensive threads and still service connections.

Although you could try using OS-dependent methods for boosting the
priority of the main thread (or lowering the background threads) if
you're truly CPU bound in pure Python code, it probably won't help
much, since even if it gets preferential control, the main twisted
loop calls out to I/O operations so much it would just be releasing it
back pretty fast.  

While Python does use native threads, due to its GIL (global
interpreter lock), if you have a thread that is purely CPU bound in
Python code generally the only way other threads get time is during a
periodic byte-code interval.  (You can find many more discussions
about the GIL and its implications in the comp.lang.python archives)

As mentioned in another response, the simplest way to help force
context switches in a tight CPU thread is by performing some operation
that releases the GIL (a simple one is something like time.sleep(0)),
so if your routine is such that it has a tight loop or some repetitive
code path, putting something like that in there might help quite a
bit.

If not, you might try fiddling with sys.setcheckinterval(), which
represents the number of byte-codes before Python forces the potential
for a thread switch (explicitly releases/grabs the GIL).  It was
bumped higher in recent Python releases - I think it's 100 now - so
you could try dropping it down to 10 or something.  Doing so will
probably cause your process to burn slightly more cpu/time overall,
but it should permit individual threads to remain more responsive in
the presence of CPU-bound threads.

If that still doesn't give you enough resilience, another option would
probably be to offload the processing to a separate process,
maintaining a simple link to the other process and communicating
requests over there for processing.  This supposes that transmitting
requests and results won't be a terribly high burden in time/space.
Since you're already using PB for other stuff, having an internal
(same host) PB server with appropriate processing objects would
probably work really well.  For your own interprocess communication
you could also decide to do a simpler RPC protocol that just pickled
the information to minimize the performance/transport impact.  Such a
setup would also give you (mostly for free) the flexibility to scale
the processing to multiple hosts should the need arise, as well as
being more friendly to SMP systems (which Python's GIL also interferes
with).

If you can't afford the time to transfer requests and/or results to a
separate process over a normal channel, and are on a Posix platform,
you might also investigate POSH (http://poshmodule.sourceforge.net),
which implements object sharing in shared memory between processes,
which would eliminate the transport overhead but still let you
separate the processing into distinct processes.  It's an early
development project that I've only experimented with but if it fits
your needs it might do well.  (It comes with a simple
producer/consumer example that could probably be used as a starting
point)

-- David




From exarkun at divmod.com  Wed Jul 27 14:19:43 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 27 Jul 2005 16:19:43 -0400
Subject: [Twisted-Python] Re: CPU intensive threads
In-Reply-To: <uvf2wffw8.fsf@fitlinxx.com>
Message-ID: <20050727201943.7340.147520100.divmod.quotient.405@ohm>

On 27 Jul 2005 11:05:43 -0400, David Bolen <db3l at fitlinxx.com> wrote:
>Nathaniel Haggard <natester at gmail.com> writes:
>
>> Is there a way to set the priority of the main part of twisted so that
>> it can run CPU intensive threads and still service connections.
>
> [snip]
>
>If you can't afford the time to transfer requests and/or results to a
>separate process over a normal channel, and are on a Posix platform,
>you might also investigate POSH (http://poshmodule.sourceforge.net),
>which implements object sharing in shared memory between processes,
>which would eliminate the transport overhead but still let you
>separate the processing into distinct processes.  It's an early
>development project that I've only experimented with but if it fits
>your needs it might do well.  (It comes with a simple
>producer/consumer example that could probably be used as a starting
>point)
>

POSH doesn't elimate the transport overhead.  I've done some basic investigation, and it's incredibly slow.  mmap() is probably a better solution in most cases, although I am not convinced multiple processes are called for in this case.

A solution which hasn't been suggested yet is to drop the native thread and use a cooperative Python thread.  With this approach, you can choose to schedule it however you like, including /not/ scheduling it when you have other more important tasks to complete.

Jp



From db3l at fitlinxx.com  Wed Jul 27 15:10:42 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 27 Jul 2005 17:10:42 -0400
Subject: [Twisted-Python] Re: CPU intensive threads
References: <uvf2wffw8.fsf@fitlinxx.com>
	<20050727201943.7340.147520100.divmod.quotient.405@ohm>
Message-ID: <ur7dkeyzx.fsf@fitlinxx.com>

Jp Calderone <exarkun at divmod.com> writes:

> POSH doesn't elimate the transport overhead.  I've done some basic
> investigation, and it's incredibly slow.  mmap() is probably a
> better solution in most cases, although I am not convinced multiple
> processes are called for in this case.

Me neither, but it would be a logical way to progress if you couldn't
resolve things in the single process.  Good to know about POSH though.

> A solution which hasn't been suggested yet is to drop the native
> thread and use a cooperative Python thread.  With this approach, you
> can choose to schedule it however you like, including /not/
> scheduling it when you have other more important tasks to complete.

Well, but you'd still have the problem of ensuring that it was
yielding back at a reasonable frequency wouldn't you?  So it would be
similar to sprinkling in a time.sleep(0) in a non-cooperative thread,
and still subject to cases where it might not be that simple.

-- David




From natester at gmail.com  Wed Jul 27 17:02:39 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Wed, 27 Jul 2005 17:02:39 -0600
Subject: [Twisted-Python] Re: CPU intensive threads
In-Reply-To: <ur7dkeyzx.fsf@fitlinxx.com>
References: <uvf2wffw8.fsf@fitlinxx.com>
	<20050727201943.7340.147520100.divmod.quotient.405@ohm>
	<ur7dkeyzx.fsf@fitlinxx.com>
Message-ID: <4adac7a3050727160223619683@mail.gmail.com>

These CPU intensive threads are python/C extensions generated with
pyrex.  Instead of messing with the GIL I will use processes as David
suggests.  It would be nice to have a process pool implementation that
was as easy to use as deferToThread.

Evidently they use the perspective broker for inter process
communication in quotient.searchup, and that may be a good starting
place.

Thanks,
-Nate



On 27 Jul 2005 17:10:42 -0400, David Bolen <db3l at fitlinxx.com> wrote:
> Jp Calderone <exarkun at divmod.com> writes:
> 
> > POSH doesn't elimate the transport overhead.  I've done some basic
> > investigation, and it's incredibly slow.  mmap() is probably a
> > better solution in most cases, although I am not convinced multiple
> > processes are called for in this case.
> 
> Me neither, but it would be a logical way to progress if you couldn't
> resolve things in the single process.  Good to know about POSH though.
> 
> > A solution which hasn't been suggested yet is to drop the native
> > thread and use a cooperative Python thread.  With this approach, you
> > can choose to schedule it however you like, including /not/
> > scheduling it when you have other more important tasks to complete.
> 
> Well, but you'd still have the problem of ensuring that it was
> yielding back at a reasonable frequency wouldn't you?  So it would be
> similar to sprinkling in a time.sleep(0) in a non-cooperative thread,
> and still subject to cases where it might not be that simple.
> 
> -- David
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From sflist at ihonk.com  Wed Jul 27 22:22:50 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Wed, 27 Jul 2005 21:22:50 -0700
Subject: [Twisted-Python] PB checkers bug?
Message-ID: <1122524570.18904.33.camel@lothar>

Hi all,

I didn't get a reply to my earlier post about inventing mad crazy
checkers, so I decided to just use the IUsernamePassword interface, but
I'm stuck, because it appears PB won't allow me to use only that
interface. If I try, it dies like this:

Traceback (most recent call last):
Failure: twisted.cred.error.UnhandledCredentials: No checker for
twisted.cred.credentials.IUsernameHashedPassword,
twisted.spread.pb.IUsernameMD5Password,
twisted.spread.interfaces.IJellyable

To reproduce the error, all you have to do is tweak
InMemoryUsernamePasswordDatabaseDontUse to only implement
IUsernamePassword. I've prepared the code below for a client and a
server to demonstrate the issue. Am I just missing something? If not,
should the inability to use IUsernamePassword alone be filed as a bug?

Anybody?

Thanks,

Steve

-----------------

This is the server:

#!/usr/bin/python
from twisted.cred import checkers, credentials, portal
from twisted.internet import reactor
from twisted.spread import pb
from zope import interface

class MyRealm:
    __implements__ = portal.IRealm
    def requestAvatar(self, avatarId, mind, *interfaces):
        print "Success! We'll never get here. :-("
        return pb.IPerspective, pb.Avatar(), lambda: reactor.stop()

# So we use a simple checker...
the_checker = \
checkers.InMemoryUsernamePasswordDatabaseDontUse(client1='abc')
# ...and now let's perform the problematic modification:
the_checker.credentialInterfaces = (credentials.IUsernamePassword,)

the_realm = MyRealm()
the_portal = portal.Portal(the_realm)
the_portal.registerChecker(the_checker)
the_factory = pb.PBServerFactory(the_portal)
reactor.listenTCP(8800, the_factory)
reactor.run()

-----------------

This is the client:

#!/usr/bin/python
from twisted.spread import pb
from twisted.internet import reactor
from twisted.python import log
from twisted.cred import credentials
import sys
log.startLogging(sys.stdout, 0)

the_factory = pb.PBClientFactory()
reactor.connectTCP('localhost', 8800, the_factory)
d = the_factory.login(credentials.UsernamePassword('client1', 'abc'))
d.addCallback(lambda x: log.msg('Success! Won\'t happen.'))
d.addErrback(lambda x: log.msg('We died:', x))
reactor.run()

-- 
Steve Freitas <sflist at ihonk.com>




From exarkun at divmod.com  Wed Jul 27 23:09:33 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 28 Jul 2005 01:09:33 -0400
Subject: [Twisted-Python] PB checkers bug?
In-Reply-To: <1122524570.18904.33.camel@lothar>
Message-ID: <20050728050933.7340.455176814.divmod.quotient.549@ohm>

On Wed, 27 Jul 2005 21:22:50 -0700, Steve Freitas <sflist at ihonk.com> wrote:
>Hi all,
>
>I didn't get a reply to my earlier post about inventing mad crazy
>checkers, so I decided to just use the IUsernamePassword interface, but
>I'm stuck, because it appears PB won't allow me to use only that
>interface. If I try, it dies like this:
>

PBClientFactory's login method is a rotten lie.  It /does not/ take an IUsernamePassword credentials objects, nor does it log in with the server using an IUsernamePassword credentials object.  It takes an object with a username attribute and a password attribute, and logs in with an IUsernameHashedPassword.  Your credentials checker /must/ support checking the latter interface.

If you want to support some other authentication backend which is incapable of checking IUsernameHashedPassword credentials, you may need to implement an alternate login scheme for PB.  This is not difficult, but consider carefully whether you actually need it or not (because writing crypto code is always risky).

Jp



From sflist at ihonk.com  Wed Jul 27 23:23:00 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Wed, 27 Jul 2005 22:23:00 -0700
Subject: [Twisted-Python] PB checkers bug?
In-Reply-To: <20050728050933.7340.455176814.divmod.quotient.549@ohm>
References: <20050728050933.7340.455176814.divmod.quotient.549@ohm>
Message-ID: <1122528180.18904.37.camel@lothar>

Okay, good to know I'm not crazy. I'll file a bug with a patch to change
the docstring.

I'll just put up with a hashed login, as I'm getting impatient to move
on with my project; it'll still allow me to throw a bunch of metadata
into the username string, which gives me everything I need.

Thanks,

Steve

On Thu, 2005-07-28 at 01:09 -0400, Jp Calderone wrote:
> On Wed, 27 Jul 2005 21:22:50 -0700, Steve Freitas <sflist at ihonk.com> wrote:
> >Hi all,
> >
> >I didn't get a reply to my earlier post about inventing mad crazy
> >checkers, so I decided to just use the IUsernamePassword interface, but
> >I'm stuck, because it appears PB won't allow me to use only that
> >interface. If I try, it dies like this:
> >
> 
> PBClientFactory's login method is a rotten lie.  It /does not/ take an IUsernamePassword credentials objects, nor does it log in with the server using an IUsernamePassword credentials object.  It takes an object with a username attribute and a password attribute, and logs in with an IUsernameHashedPassword.  Your credentials checker /must/ support checking the latter interface.
> 
> If you want to support some other authentication backend which is incapable of checking IUsernameHashedPassword credentials, you may need to implement an alternate login scheme for PB.  This is not difficult, but consider carefully whether you actually need it or not (because writing crypto code is always risky).
> 
> Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
Steve Freitas <sflist at ihonk.com>




From Stephan.Popp at iisb.fraunhofer.de  Fri Jul 29 02:46:45 2005
From: Stephan.Popp at iisb.fraunhofer.de (Stephan Popp)
Date: Fri, 29 Jul 2005 10:46:45 +0200
Subject: [Twisted-Python] why insecureJelly
Message-ID: <200507291046.45817.Stephan.Popp@iisb.fraunhofer.de>

Hi,
I want to send objects accross the network and all I get is insecure Jelly.
My application looks like this:
-folder structure:
-dispyte
--common
--GACrysVUn
--baseclasses

in common is the declaration of the object which should be send:

from dispyte.baseclasses import Task #thats the abstract baseclass
from twisted.spread import pb

class SimpleTask(Task.Task, pb.Copyable, pb.RemoteCopy):
	def __init__(self):
		...

pb.setUnjellyableForClass(SimpleTask, SimpleTask)

these objects are created by a instance of a class located in GACrysVUn:

from dispyte.baseclasses import Producer
from dispyte.common import SimpleTask

class GACrysVUnProducer(Producer.Producer):

	def foo():  #just as examlpe of the structure
		task = SimpleTask.SimpleTask()

the task-object is given to another class instance lockated in common:
here the task object is send:

...
	factory = pb.PBClientFactory()
        reactor.connectTCP(parameters[0], parameters[1], factory)
	def0 = factory.getRootObject()
	...
        def2 = self.root.callRemote("fitness", task, self.taskDescription, 
self.ID)
        def2.addCallback(self.callback)
        def2.addErrback(self.errback, task, self)

the server looks like:

from twisted.spread import pb
from twisted.internet import reactor,threads
from dispyte.common import SimpleTask
from dispyte.common import ScriptedTaskDescription
import sys
class ServerObject(pb.Root):

	...

    def remote_fitness(self, task, taskDescription, serverID):
        """
        calls calc in seperate thread and return a deferred
        """
        self.ID = serverID
        print "ServerObject::remote_fitness ..."
        return threads.deferToThread(self.calc,task,serverID, taskDescription)

	...

if __name__ == '__main__':
    factory = pb.PBServerFactory(ServerObject(sys.argv[1]))
    reactor.listenTCP(eval(sys.argv[1]), factory)
    reactor.run()

I can't figure out, why insecureJelly is raised here. Can anyone help me?
And: Is there a possibility to turn off this feature, so that a server takes 
objects no matter what class?

Thanks in advance.

Stephan









From Stephan.Popp at iisb.fraunhofer.de  Fri Jul 29 03:01:02 2005
From: Stephan.Popp at iisb.fraunhofer.de (Stephan Popp)
Date: Fri, 29 Jul 2005 11:01:02 +0200
Subject: [Twisted-Python] why insecureJelly
In-Reply-To: <200507291046.45817.Stephan.Popp@iisb.fraunhofer.de>
References: <200507291046.45817.Stephan.Popp@iisb.fraunhofer.de>
Message-ID: <200507291101.02100.Stephan.Popp@iisb.fraunhofer.de>

On Friday 29 July 2005 10:46, Stephan Popp wrote:
> Hi,
> I want to send objects accross the network and all I get is insecure Jelly.
> My application looks like this:
> -folder structure:
> -dispyte
> --common
> --GACrysVUn
> --baseclasses
>
> in common is the declaration of the object which should be send:
>
> from dispyte.baseclasses import Task #thats the abstract baseclass
> from twisted.spread import pb
>
> class SimpleTask(Task.Task, pb.Copyable, pb.RemoteCopy):
> 	def __init__(self):
> 		...
>
> pb.setUnjellyableForClass(SimpleTask, SimpleTask)
>
> these objects are created by a instance of a class located in GACrysVUn:
>
> from dispyte.baseclasses import Producer
> from dispyte.common import SimpleTask
>
> class GACrysVUnProducer(Producer.Producer):
>
> 	def foo():  #just as examlpe of the structure
> 		task = SimpleTask.SimpleTask()
>
> the task-object is given to another class instance lockated in common:
> here the task object is send:
>
> ...
> 	factory = pb.PBClientFactory()
>         reactor.connectTCP(parameters[0], parameters[1], factory)
> 	def0 = factory.getRootObject()
> 	...
>         def2 = self.root.callRemote("fitness", task, self.taskDescription,
> self.ID)
>         def2.addCallback(self.callback)
>         def2.addErrback(self.errback, task, self)
>
> the server looks like:
>
> from twisted.spread import pb
> from twisted.internet import reactor,threads
> from dispyte.common import SimpleTask
> from dispyte.common import ScriptedTaskDescription
> import sys
> class ServerObject(pb.Root):
>
> 	...
>
>     def remote_fitness(self, task, taskDescription, serverID):
>         """
>         calls calc in seperate thread and return a deferred
>         """
>         self.ID = serverID
>         print "ServerObject::remote_fitness ..."
>         return threads.deferToThread(self.calc,task,serverID,
> taskDescription)
>
> 	...
>
> if __name__ == '__main__':
>     factory = pb.PBServerFactory(ServerObject(sys.argv[1]))
>     reactor.listenTCP(eval(sys.argv[1]), factory)
>     reactor.run()
>
> I can't figure out, why insecureJelly is raised here. Can anyone help me?
> And: Is there a possibility to turn off this feature, so that a server
> takes objects no matter what class?
>
> Thanks in advance.
>
> Stephan

PS: the error message is (from failue.getErrorMessage()):
Module dispyte.common.SimpleTask not allowed 
(in type dispyte.common.SimpleTask.SimpleTask)






From snacktime at gmail.com  Sat Jul 30 23:52:27 2005
From: snacktime at gmail.com (snacktime)
Date: Sat, 30 Jul 2005 22:52:27 -0700
Subject: [Twisted-Python] Errors after upgrading to 2.0.1
Message-ID: <1f060c4c0507302252592797d5@mail.gmail.com>

I'm testing out an application I wrote in 1.3.  In 2.0.1 I get a
warning and an exception.

The UserWarning about SSL I looked up on the list and I understand why
it's there, although I think it's a bad idea.  The warning is about a
bug in pyopenssl that hasn't been fixed in pyopenssl.  In addition
there is no reason to think it will ever be fixed after being ignored
for this long.  Maybe someone could find a better solution for this
warning other then leaving it to end user to find the patch on the
mailing list, which for all I know might not even work at this point. 
 Maybe put up a patched copy of pyopenssl on twistedmatrix.com?  Seems
better than having an unmaintained dependancy in twisted.

The exception I really have no clue about, maybe someone could point
out where the problem is?

Code:
----------------------------------------
#!/usr/local/bin/python
from OpenSSL import SSL
import sys
import time

from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver
from twisted.internet import ssl, reactor
from curses.ascii import STX,ETX,FS

STX =  chr(STX)
ETX =  chr(ETX)
FS =  chr(FS)


class EchoClient(LineReceiver):
    end="GoodBye"
    def connectionMade(self):
        transaction = self.factory.trans
        self.sendLine("%s" % transaction)

    def connectionLost(self, reason):
        #print 'connection lost (protocol)'
        reactor.stop()

    def lineReceived(self, line):
        print "receive:", line
        self.transport.loseConnection()

class EchoClientFactory(ClientFactory):
    protocol = EchoClient

    def clientConnectionFailed(self, connector, reason):
        print 'connection failed:', reason.getErrorMessage()
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        #print 'connection lost:', reason.getErrorMessage()
        reactor.stop()

    def SetTransaction(self,id,a,b,c,d,e,f,g,h,i,j,k,l):
      self.trans = STX + id + FS + a + FS + b + FS + c + FS + d + FS +
e + FS + f + FS + g + FS + h + FS + i + FS + j + FS + k + FS + l + ETX

    def GetTransaction(self):
      return self.trans

def main():
    factory = EchoClientFactory()
    factory.SetTransaction('id1','vital','VERIFY','poi2','4111111111111111','05','12','100','123
abc street','98034','','','id1')
    reactor.connectSSL('localhost', 8000, factory, ssl.ClientContextFactory())
    reactor.run()


if __name__ == '__main__':
    main()
-----------------------------------------------------------


Output:
-------------------------------------------------
receive: id1:APPROVED::TRANSACTION PRESENT:::0000123456789
/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py:216:
UserWarning: SSL connection shutdown possibly unreliable, please
upgrade to ver 0.XX
  "please upgrade to ver 0.XX", category=UserWarning)
Traceback (most recent call last):
  File "./error", line 55, in ?
    main()
  File "./error", line 51, in main
    reactor.run()
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py",
line 199, in run
    self.mainLoop()
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py",
line 207, in mainLoop
    self.runUntilCurrent()
--- <exception caught here> ---
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 533, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py",
line 389, in _continueSystemEvent
    for callList in sysEvtTriggers[1], sysEvtTriggers[2]:
exceptions.TypeError: unsubscriptable object



From exarkun at divmod.com  Sun Jul 31 09:31:23 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 31 Jul 2005 11:31:23 -0400
Subject: [Twisted-Python] Errors after upgrading to 2.0.1
In-Reply-To: <1f060c4c0507302252592797d5@mail.gmail.com>
Message-ID: <20050731153123.3914.1677534921.divmod.quotient.765@ohm>

On Sat, 30 Jul 2005 22:52:27 -0700, snacktime <snacktime at gmail.com> wrote:
>I'm testing out an application I wrote in 1.3.  In 2.0.1 I get a
>warning and an exception.
>

The exception is caused by calling reactor.stop() twice.

Jp



From snacktime at gmail.com  Sun Jul 31 11:22:49 2005
From: snacktime at gmail.com (snacktime)
Date: Sun, 31 Jul 2005 10:22:49 -0700
Subject: [Twisted-Python] Errors after upgrading to 2.0.1
In-Reply-To: <20050731153123.3914.1677534921.divmod.quotient.765@ohm>
References: <1f060c4c0507302252592797d5@mail.gmail.com>
	<20050731153123.3914.1677534921.divmod.quotient.765@ohm>
Message-ID: <1f060c4c05073110222bd44bfb@mail.gmail.com>

Yep that was it.  Thanks.

Chris

On 7/31/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Sat, 30 Jul 2005 22:52:27 -0700, snacktime <snacktime at gmail.com> wrote:
> >I'm testing out an application I wrote in 1.3.  In 2.0.1 I get a
> >warning and an exception.
> >
> 
> The exception is caused by calling reactor.stop() twice.
> 
> Jp



