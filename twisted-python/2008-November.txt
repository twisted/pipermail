From cayson.z at gmail.com  Sat Nov  1 00:03:48 2008
From: cayson.z at gmail.com (Boern)
Date: Sat, 1 Nov 2008 12:03:48 +0800
Subject: [Twisted-Python] anybody can recommend the projects based on
	twisted, I need refer, please!
Message-ID: <be0f6540810312103r3bd04463l5d64100f6c4393f1@mail.gmail.com>

Hi,all:
   I am ready to develop a simple network app that the server will be based
on twisted and client will be C???QT GUI?,so there`s any corresponding
resource or open source projects to refer,thanks!

-- 
Boern Parx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081101/ca62f460/attachment.htm 

From glyph at divmod.com  Sat Nov  1 01:26:14 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 01 Nov 2008 05:26:14 -0000
Subject: [Twisted-Python] Event notification and general RPC in Twisted...
In-Reply-To: <20081031161410.GA6794@vidar.dreamhost.com>
References: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
	<20081031161410.GA6794@vidar.dreamhost.com>
Message-ID: <20081101052614.6400.1024818287.divmod.xquotient.538@weber.divmod.com>


On 31 Oct, 04:14 pm, dripton at ripton.net wrote:
>On 2008.10.31 16:52:26 +1100, Blair Bethwaite wrote:

>If not for the Java requirement, I would say that Twisted is a good 
>fit,
>and that you could use either PB or AMP, depending on whether you want
>to pass around complex types or simple ones.  But if you need Java,
>I don't know.

AMP is specifically designed to be easy to implement and extend in 
different languages.  I've already done a basic Java implementation, 
<http://bit.ly/3AGNhs>.  It's not particularly well packaged or 
maintained, but that's mainly because nobody has voiced an interest in 
it yet; the code does work and has been used in production.

If you're voicing such an interest then perhaps someone will step 
forward to clean it up :).



From esteve at sindominio.net  Sat Nov  1 05:55:48 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Sat, 1 Nov 2008 10:55:48 +0100
Subject: [Twisted-Python] Event notification and general RPC in Twisted...
In-Reply-To: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
References: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
Message-ID: <200811011055.48475.esteve@sindominio.net>

On Friday 31 October 2008 06:52:26 Blair Bethwaite wrote:
> - we'd like to use a persistent stream/connection, at least between
> the JobServer and Proxy (traffic frequency will be reasonably high)
> - it needs to be interoperable with java (is there PB for java?)
> - sometimes the Proxy might be behind a firewall and only able to
> connect out, we need to be able to use that connection to go back as
> above

<ad>
You can use Thrift [1] instead, which already supports Java and has a nifty 
patch which adds support for Twisted [2]
</ad>

I've tested it in an heterogeneous environment (Python, Java and Ruby) and it 
works fine.

Cheers.

1 - http://incubator.apache.org/thrift/
2 - https://issues.apache.org/jira/browse/THRIFT-148



From exarkun at twistedmatrix.com  Sun Nov  2 00:05:14 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 Nov 2008 04:05:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1225598714.83.1630291617@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081102/daae21db/attachment.htm 

From paul at subsignal.org  Sun Nov  2 16:20:19 2008
From: paul at subsignal.org (paul)
Date: Sun, 02 Nov 2008 22:20:19 +0100
Subject: [Twisted-Python] Re: anybody can recommend the projects based on
 twisted, I need refer, please!
In-Reply-To: <be0f6540810312103r3bd04463l5d64100f6c4393f1@mail.gmail.com>
References: <be0f6540810312103r3bd04463l5d64100f6c4393f1@mail.gmail.com>
Message-ID: <gel5k4$h6b$1@ger.gmane.org>

Boern schrieb:
> Hi,all:
>    I am ready to develop a simple network app that the server will be based
> on twisted and client will be C???QT GUI?,so there`s any corresponding
> resource or open source projects to refer,thanks!
http://trac.calendarserver.org/

cheers
 Paul




From terry at jon.es  Sun Nov  2 18:48:20 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 00:48:20 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
Message-ID: <18702.15428.547828.694260@jon.es>

I just posted a blog article with title as above: http://bit.ly/1whZUK

Very briefly, I wrote a metaclass to allow you to write classes whose
__init__ method uses deferreds. Your __init__ can create deferreds, call
functions that return deferreds, and of course return a deferred itself
(that's the whole point). Your class instance wont be available until after
the deferred your __init__ returns has fired.

You use it like this:

    from txDeferredInitMeta import TxDeferredInitMeta

    class MyClass(object):
        __metaclass__ = TxDeferredInitMeta
        def __init__(self):
            d = aFuncReturningADeferred()
            return d

    def cb((instance, result)):
        # instance is an instance of MyClass
        # result is from the callback chain of aFuncReturningADeferred
        pass

    d = MyClass()
    d.__instantiate__()
    d.addCallback(cb)

Metaclass code & test suite at http://foss.fluidinfo.com/txDeferredInitMeta.zip

For more details on how it works see http://bit.ly/1whZUK

I'll be happy to explain why this is useful if anyone cares. Or maybe
there's a better way to do this that I don't know about. I always have the
feeling that I know just the barest amount about what's out there in the
Twisted codebase, and that every problem I run into must have already been
encountered by many and solved in some insanely elegant and general way.
In any case, I had fun.

Terry



From exarkun at divmod.com  Sun Nov  2 18:54:44 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 2 Nov 2008 18:54:44 -0500
Subject: [Twisted-Python] A Python metaclass for Twisted allowing
	__init__ to return a Deferred
In-Reply-To: <18702.15428.547828.694260@jon.es>
Message-ID: <20081102235444.29191.1397827627.divmod.quotient.48635@ohm>

On Mon, 3 Nov 2008 00:48:20 +0100, Terry Jones <terry at jon.es> wrote:
>I just posted a blog article with title as above: http://bit.ly/1whZUK
>
>Very briefly, I wrote a metaclass to allow you to write classes whose
>__init__ method uses deferreds. Your __init__ can create deferreds, call
>functions that return deferreds, and of course return a deferred itself
>(that's the whole point). Your class instance wont be available until after
>the deferred your __init__ returns has fired.
>
>You use it like this:
>
>    from txDeferredInitMeta import TxDeferredInitMeta
>
>    class MyClass(object):
>        __metaclass__ = TxDeferredInitMeta
>        def __init__(self):
>            d = aFuncReturningADeferred()
>            return d
>
>    def cb((instance, result)):
>        # instance is an instance of MyClass
>        # result is from the callback chain of aFuncReturningADeferred
>        pass
>
>    d = MyClass()
>    d.__instantiate__()
>    d.addCallback(cb)
>
>Metaclass code & test suite at http://foss.fluidinfo.com/txDeferredInitMeta.zip
>
>For more details on how it works see http://bit.ly/1whZUK
>
>I'll be happy to explain why this is useful if anyone cares. Or maybe
>there's a better way to do this that I don't know about. I always have the
>feeling that I know just the barest amount about what's out there in the
>Twisted codebase, and that every problem I run into must have already been
>encountered by many and solved in some insanely elegant and general way.
>In any case, I had fun.

I usually solve this kind of problem like this:

    d = aFuncReturningADeferred()
    d.addCallback(MyClass)
    d.addCallback(cb)

I'll not try to claim anything about the level of elegance, though. :)

For less surprisiness, I'd suggest that you at least restrict the result
of the Deferred returned from __init__ to firing with None or self and
make the argument to the first callback on the Deferred returned by
MyClass() just be the new instance.

Jean-Paul



From terry at jon.es  Sun Nov  2 19:16:50 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 01:16:50 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing
	__init__ to return a Deferred
In-Reply-To: Your message at 18:54:44 on Sunday, 2 November 2008
References: <18702.15428.547828.694260@jon.es>
	<20081102235444.29191.1397827627.divmod.quotient.48635@ohm>
Message-ID: <18702.17138.245542.16472@jon.es>

Hi JP

> I usually solve this kind of problem like this:
> 
>     d = aFuncReturningADeferred()
>     d.addCallback(MyClass)
>     d.addCallback(cb)

See? I knew there'd be a 3-line solution somewhere :-)

That's very cute, I'd never have thought of that...  Python is so nice.

My (weak?) response is that your solution isn't quite so general. What if I
want __init__ to generate the deferred based on its args, or on the result
of other functions called based on its args? Yes, I can do all that work
before using your lovely d.addCallback(MyClass), but then the logic of what
the class does is starting to leak out into the code that should be calling
the class. And you can't encapsulate THAT code into another class, because
its __init__ would in turn have to return a deferred.

BTW, I sometimes have the feeling that Deferreds are like how M$
characterizes the GPL. Viral. Once you call anything creating a Deferred,
you're hooked - whatcha gonna do with that Deferred boy? Take one sip of
the Deferred Kool Aid and the next thing you know you're on a drip.

> I'll not try to claim anything about the level of elegance, though. :)

History will smile on you JP.

> For less surprisiness, I'd suggest that you at least restrict the result
> of the Deferred returned from __init__ to firing with None or self and
> make the argument to the first callback on the Deferred returned by
> MyClass() just be the new instance.

Hmmm. OK. I think you're right. The caller has no business knowing what the
Deferred returned in any case. And if the class itself wants the result it
can add a callback and stick it on self.  That's good, I had been hoping to
return just the instance, but then it occurred to me to send back the
result too.

BTW, I started out trying to think of a way to just say

  x = MyClass(...)

and have that result in the instance. But the only ways I could think of
doing that were disgusting and broken (e.g., make a *function* called
MyClass and use inlineCallbacks and some other class the metaclass would
build). So the __instantiate__ call seemed like a big win, even though I
don't like it much either.

Thanks!

Terry



From mithrandi at mithrandi.net  Sun Nov  2 19:41:56 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 3 Nov 2008 02:41:56 +0200
Subject: [Twisted-Python] A Python metaclass for Twisted allowing
	__init__ to return a Deferred
In-Reply-To: <18702.17138.245542.16472@jon.es>
References: <18702.15428.547828.694260@jon.es>
	<20081102235444.29191.1397827627.divmod.quotient.48635@ohm>
	<18702.17138.245542.16472@jon.es>
Message-ID: <20081103004156.GC22777@mithrandi.net>

* Terry Jones <terry at jon.es> [2008-11-03 01:16:50 +0100]:

> > I usually solve this kind of problem like this:
> > 
> >     d = aFuncReturningADeferred()
> >     d.addCallback(MyClass)
> >     d.addCallback(cb)
> 
> See? I knew there'd be a 3-line solution somewhere :-)
> 
> That's very cute, I'd never have thought of that...  Python is so nice.
> 
> My (weak?) response is that your solution isn't quite so general. What if I
> want __init__ to generate the deferred based on its args, or on the result
> of other functions called based on its args? Yes, I can do all that work
> before using your lovely d.addCallback(MyClass), but then the logic of what
> the class does is starting to leak out into the code that should be calling
> the class. And you can't encapsulate THAT code into another class, because
> its __init__ would in turn have to return a deferred.

You can, however, encapsulate it into a classmethod or free function
that you call to get an instance of MyClass. This is a pattern often
seen when there are various ways to build an instance of some class;
you'll have a very basic __init__, and then a bunch of factory
functions or classmethods that do more complicated work before passing
the results in to the class's constructor.

> BTW, I sometimes have the feeling that Deferreds are like how M$
> characterizes the GPL. Viral. Once you call anything creating a Deferred,
> you're hooked - whatcha gonna do with that Deferred boy? Take one sip of
> the Deferred Kool Aid and the next thing you know you're on a drip.

Just wait until you start trying to combine iterators and deferreds ;)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081103/06835580/attachment.pgp 

From terry at jon.es  Sun Nov  2 20:01:08 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 02:01:08 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing
	__init__ to return a Deferred
In-Reply-To: Your message at 02:41:56 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
	<20081102235444.29191.1397827627.divmod.quotient.48635@ohm>
	<18702.17138.245542.16472@jon.es>
	<20081103004156.GC22777@mithrandi.net>
Message-ID: <18702.19796.941377.429114@jon.es>

Hi Tristan

>>>>> "Tristan" == Tristan Seligmann <mithrandi at mithrandi.net> writes:
Tristan> You can, however, encapsulate it into a classmethod or free
Tristan> function that you call to get an instance of MyClass. This is a
Tristan> pattern often seen when there are various ways to build an
Tristan> instance of some class; you'll have a very basic __init__, and
Tristan> then a bunch of factory functions or classmethods that do more
Tristan> complicated work before passing the results in to the class's
Tristan> constructor.

OK, thanks.

It feels to me (please correct me if I'm wrong) that the main reason you'd
want to follow this pattern is because you can't deal with Deferreds in an
__init__ method.

If you weren't dealing with Deferreds, you could just pass args to __init__
and have it figure out what to do. While it might be simpler to do as you
describe, and have various external factories, it feels (to me anyway) like
you're taking behavior that's class-dependent and putting it outside the
class.

__init__ can't return a result, presumably because if it has something it
wants to remember, or give you access to, it can put it on self, provide
you with a method, etc.

But in the Twisted world, I think it makes sense that there is some
provision for what's essentially a two-phase __init__.  I quite like my
approach, because the programmer wanting to write "normal" Twisted code
will likely find it natural that __init__ could work with Deferreds,
including returning one. To me that feels very natural.

Having said that, I don't particularly like the fact that there's a
special-case metaclass creating my classes, even though I wrote the code
myself :-)

>> BTW, I sometimes have the feeling that Deferreds are like how M$
>> characterizes the GPL. Viral. Once you call anything creating a Deferred,
>> you're hooked - whatcha gonna do with that Deferred boy? Take one sip of
>> the Deferred Kool Aid and the next thing you know you're on a drip.

Tristan> Just wait until you start trying to combine iterators and deferreds ;)

Oh yeah... I tried that too :-)

  http://www.twistedmatrix.com/pipermail/twisted-python/2008-June/017984.html

Comments on that code very welcome too!

Terry



From terry at jon.es  Sun Nov  2 21:06:17 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 03:06:17 +0100
Subject: [Twisted-Python] DeferredDict, defaultdict, map/reduce, silliness
Message-ID: <18702.23705.748433.94046@jon.es>

This isn't meant to be taken too seriously - perhaps just food for someone
else to chew on while trying to relax...

I was thinking the other night about what a DeferredDict might look like,
what it might be useful for, if anything, etc. We have DeferredList of
course, so why not a dict?  Then I also remembered collections.defaultdict
and couldn't resist the appeal of trying defaultdict(defer.Deferred).  That
thinking led to the map/reduce silliness below. I don't know that it leads
anywhere - I was just playing around.

Terry


import sys
from collections import defaultdict
from twisted.internet import defer, reactor

class MapReduce(object):
    def __init__(self, init, cb):
        self.init = init
        self.cb = cb
        self.d = defaultdict(defer.Deferred)

    def map(self, *keys):
        for key in keys:
            self.d[key].addCallback(self.cb)

    def reduce(self):
        def finalize(result, key):
            return (key, result)
        deferreds = []
        for key, d in self.d.iteritems():
            d.addCallback(finalize, key)
            deferreds.append(d)
            d.callback(self.init)
        return defer.gatherResults(deferreds)

def main():
    def printResult(result):
        print result
        reactor.stop()
        
    mr = MapReduce(0, lambda x: x + 1)
    for line in sys.stdin.readlines():
        mr.map(*line.split())
    d = mr.reduce().addCallback(printResult)
    
if __name__ == '__main__':
    reactor.callLater(0, main)
    reactor.run()



From py.adriano at gmail.com  Mon Nov  3 03:03:54 2008
From: py.adriano at gmail.com (Adriano Marques)
Date: Mon, 3 Nov 2008 09:03:54 +0100
Subject: [Twisted-Python] Passing arguments while running a twistd
	application
In-Reply-To: <20081031131219.29191.45950424.divmod.quotient.47384@ohm>
References: <18698.61244.704425.437134@jon.es>
	<20081031131219.29191.45950424.divmod.quotient.47384@ohm>
Message-ID: <29ec21540811030003v51af24c5n4ef28ec7a231e021@mail.gmail.com>

Ok guys, I'll be porting my app to plugin instead. Thanks for the answers.


Kind Regards,

-- 
Adriano Monteiro Marques

http://adriano-marques.blogspot.com
http://www.umitproject.org
http://www.pythonbenelux.org

"Don't stay in bed, unless you can make money in bed." - George Burns



From daniel.cuesta at iavante.es  Mon Nov  3 03:40:14 2008
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Mon, 03 Nov 2008 09:40:14 +0100
Subject: [Twisted-Python] Persistent Queue with subscriber worker
Message-ID: <490EB8EE.7000409@iavante.es>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081103/fae0041f/attachment.htm 

From esteve at sindominio.net  Mon Nov  3 05:20:25 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 3 Nov 2008 11:20:25 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18702.15428.547828.694260@jon.es>
References: <18702.15428.547828.694260@jon.es>
Message-ID: <200811031120.26044.esteve@sindominio.net>

On Monday 03 November 2008 00:48:20 Terry Jones wrote:
> I just posted a blog article with title as above: http://bit.ly/1whZUK

I'm going to jump in. How about this:

from twisted.internet import defer, reactor

def aFuncReturningADeferred(value):
    d = defer.Deferred()
    reactor.callLater(5, d.callback, value[::-1])
    return d

class Foo(object):

    def __new__(cls, value):
        def cb(x):
            obj = object.__new__(cls, x)
            obj.__init__(x)
            return obj
        return aFuncReturningADeferred(value).addCallback(cb)

    def __init__(self, value):
        self.value = value

def printFoo(obj):
    print obj.value
    reactor.stop()

d = Foo("Some value")
d.addCallback(printFoo)

reactor.run()

Instead of returning a deferred from the __init__ method (which is 
non-standard), you return it from __new__

It's clearer, since __init__ is meant for configuring instances, and __new__ 
for instantiating objects.

Cheers.



From p.mayers at imperial.ac.uk  Mon Nov  3 05:31:57 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 03 Nov 2008 10:31:57 +0000
Subject: [Twisted-Python] Persistent Queue with subscriber worker
In-Reply-To: <490EB8EE.7000409@iavante.es>
References: <490EB8EE.7000409@iavante.es>
Message-ID: <490ED31D.8060805@imperial.ac.uk>

Daniel de la Cuesta wrote:
> Hi,
> 
> I want to develop a video conversion service. My idea is to offer a REST 
> api and save all the conversion request in a database to track the state 
> of each process (pending, doing, done, error, etc.)
> 
> I want to use this database table as a persistent queue and a twisted 
> daemon that takes its task from this table. This daemon has to take the 
> task, update the state of the task and do the work.
> 
> How can I subscribe the twisted daemon to the database inserts?

The easiest way is to use twisted.internet.task.LoopingCall and check 
for new entries every N seconds (e.g. n=1, n=30)

If your database supports things like postgres' NOTIFY and you have an 
async-aware db adapter (e.g. pgasync) you could use a trigger on the 
table to issue a NOTIFY and respond immediately, but it's been my 
experience that's more trouble than it's worth.

> 
> Is the thread pool a good approach to this problem?

Since most DB adapters are blocking you'll want to use something like a 
thread pool to access them - twisted's adbapi module does this for you.



From esteve at sindominio.net  Mon Nov  3 07:32:50 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 3 Nov 2008 13:32:50 +0100
Subject: [Twisted-Python] Persistent Queue with subscriber worker
In-Reply-To: <490EB8EE.7000409@iavante.es>
References: <490EB8EE.7000409@iavante.es>
Message-ID: <200811031332.50581.esteve@sindominio.net>

Hi Daniel

On Monday 03 November 2008 09:40:14 Daniel de la Cuesta wrote:
>  I want to develop a video conversion service. My idea is to offer a REST
> api and save all the conversion request in a database to track the state of
> each process (pending, doing, done, error, etc.)

Do you plan to expose this REST api using Twisted?

>  I want to use this database table as a persistent queue and a twisted
> daemon that takes its task from this table. This daemon has to take the
> task, update the state of the task and do the work.
>
>  How can I subscribe the twisted daemon to the database inserts?
>
>  Is the thread pool a good approach to this problem?
>
>  Do you know a more simple solution to this problem?

Well, I wouldn't use a database at all (except for logging purposes only 
maybe). Actually you're already using the proper terms (queue, subscriber, 
etc.), so I would use a message-driven architecture:

- A messaging broker, either using AMQP (RabbitMQ, Qpid and OpenAMQ) or Stomp 
(RabbitMQ, ActiveMQ)
- You have a subscriber (waiting for messages on a queue), which dispatches 
tasks from the queue
- The web application sends messages to the messaging broker, which will route 
them to the right subscriber

One of the advantages of this scenario is that you can add more subscribers at 
runtime if needed, which will distribute the load between several conversion 
servers.

You can choose either AMQP [1] or Stomp [2], each has its strengths and 
weaknesses.

Cheers.

1 - https://launchpad.net/txamqp (disclaimer, I'm one of the developers)
2 - http://code.google.com/p/stomper/



From glyph at divmod.com  Mon Nov  3 07:49:12 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 03 Nov 2008 12:49:12 -0000
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18702.15428.547828.694260@jon.es>
References: <18702.15428.547828.694260@jon.es>
Message-ID: <20081103124912.6400.1267186575.divmod.xquotient.613@weber.divmod.com>

On 2 Nov, 11:48 pm, terry at jon.es wrote:
>Very briefly, I wrote a metaclass to allow you to write classes whose
>__init__ method uses deferreds. Your __init__ can create deferreds, 
>call
>functions that return deferreds, and of course return a deferred itself
>(that's the whole point). Your class instance wont be available until 
>after
>the deferred your __init__ returns has fired.

As a general stylistic thing, I've been writing a lot more classmethods 
lately to determine arguments to __init__, rather than trying to make 
__init__ itself do interesting tricks.  I can't find a name for this 
"design pattern", so let me describe it:

One very common use-case is that we have some object - let's say an RFC 
5322 email address - which is typically created from a string.  An 
idiomatic way to do that might be like this:


    import rfc822

    class Address:
        def __init__(self, addrstr):
            l = list(rfc822.AddressList(addrstr))
            if len(l) != 1:
                raise ValueError("Too many or too few addresses.")
            else:
                desc, addr = l[0]
                self.description = desc
                self.localpart, self.domain = addr.split("@")

But this is problematic.  With this class, it's hard to convert from a 
different format of storing email addresses that has already been 
parsed.  In order to create an Address from, i.e., a database record 
containing a description, localpart, and domain, I now need to smash 
everything back into a string, worrying about trivia like quoting; or I 
need to resort to hacks like calling __new__ instead of __init__.  It 
makes testing more difficult: in my tests I need to start having 
formatted email addresses in strings instead of simply creating Address 
objects.  If this class were hypothetically a bit smarter and dealt 
nicely with unicode, my tests would need to learn about email-address 
quoting rules in order to generate addresses with non-ASCII characters, 
rather than leaving that logic entirely in the Address class.  Ugly all 
around.

However, I can pull the parsing logic out and separate it from the 
initialization logic, and all of that gets much easier:

    class Address:
        def __init__(self, localpart, domain, description):
            self.localpart = localpart
            self.domain = domain
            self.description = description

        @classmethod
        def fromString(cls, addrstr):
            l = list(rfc822.AddressList(addrstr))
            if len(l) != 1:
                raise ValueError("Too many or too few addresses.")
            else:
                desc, addr = l[0]
                loc, dom = addr.split("@")
                return cls(loc, dom, desc)

With this improved class, I can easily create Address objects in other 
ways from other code.  Since it's a classmethod rather than a function, 
it's just as friendly to inheritance as a constructor; perhaps even 
moreso.  It opens the door to the evolution of other creation methods, 
fromXXX classmethods, without breaking the constructor's signature or 
changing the fromString method.

You don't give a concrete example in your blog post, but I can imagine 
that all these points apply twice over to any code that would use 
Deferreds.  An __init__ that returns a Deferred means that in the 
testing case, not only is there no way to directly construct the object 
you want, there might be no way to even get one without spinning the 
reactor.  What is that Deferred doing?  Maybe there's no way to get one 
without actually generating network traffic!  Obviously, not an ideal 
scenario.  For the tests for the code making the deferred request 
itself, there will obviously need to be fake sources of data, but for 
other tests that just want to interact with one of your objects, direct 
construction is pretty much always easier.

However, thanks for sharing nonetheless.  Although I wouldn't use it 
personally, your code makes an interesting rhetorical point.  There's a 
great deal of whinging that goes on around Deferreds being hard to work 
with.  This metaclass is just another in a long line of tools that says 
"see?  it really isn't so hard to deal with a Deferred if you need to."



From terry at jon.es  Mon Nov  3 08:11:05 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 14:11:05 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 11:20:25 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
	<200811031120.26044.esteve@sindominio.net>
Message-ID: <18702.63593.938808.482176@jon.es>

>>>>> "Esteve" == Esteve Fernandez <esteve at sindominio.net> writes:
Esteve> I'm going to jump in. How about this:

That's nice. But you've coupled the args to aFuncReturningADeferred and
what it's Deferred ends up returning to the args for __init__ of the class.
I think you meant this:

    from twisted.internet import defer, reactor

    def aFuncReturningADeferred(value):
        d = defer.Deferred()
        reactor.callLater(5, d.callback, value[::-1])
        return d

    class Foo(object):
        def __new__(cls, *args, **kw):
            def cb(x):
                obj = object.__new__(cls)
                obj.__init__(*args, **kw)
                return obj
            return aFuncReturningADeferred("Some value").addCallback(cb)

        def __init__(self, value):
            self.value = value

    def printFoo(obj):
        print obj.value
        reactor.stop()

    d = Foo("Some other value")
    d.addCallback(printFoo)
    reactor.run()


I.e., __new__ can do whatever it likes with preparing args for
aFuncReturningADeferred (including using args and kw), and all of the args
to __new__ are passed to __init__, as the caller would expect from a normal
class. You're passing the return result of the Deferred as the single arg
to __init__.

Anyway, I like it more than my solution.

Terry



From esteve at sindominio.net  Mon Nov  3 08:53:24 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 3 Nov 2008 14:53:24 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18702.63593.938808.482176@jon.es>
References: <18702.15428.547828.694260@jon.es>
	<200811031120.26044.esteve@sindominio.net>
	<18702.63593.938808.482176@jon.es>
Message-ID: <200811031453.24955.esteve@sindominio.net>

On Monday 03 November 2008 14:11:05 Terry Jones wrote:
> >>>>> "Esteve" == Esteve Fernandez <esteve at sindominio.net> writes:
>
> Esteve> I'm going to jump in. How about this:
>
> That's nice. But you've coupled the args to aFuncReturningADeferred and
> what it's Deferred ends up returning to the args for __init__ of the class.

Yep, that's what I meant. I wanted to show how to pass an argument to Foo, 
which will be used to call a function (that may take a considerable amount of 
time) and whose return value will be stored in a Foo instance.

Following your example at http://bit.ly/1whZUK, you may pass the database name 
as an argument to DatabaseClass, call prepareConnection (a function that 
returns a Deferred) in the __new__ method to create the necessary tables and 
pass a ConnectionPool in the Deferred chain, so it can end up being stored as 
an instance variable of a DatabaseClass object.

Cheers.



From esteve at sindominio.net  Mon Nov  3 09:03:42 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 3 Nov 2008 15:03:42 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <200811031453.24955.esteve@sindominio.net>
References: <18702.15428.547828.694260@jon.es>
	<18702.63593.938808.482176@jon.es>
	<200811031453.24955.esteve@sindominio.net>
Message-ID: <200811031503.42724.esteve@sindominio.net>

On Monday 03 November 2008 14:53:24 Esteve Fernandez wrote:
> On Monday 03 November 2008 14:11:05 Terry Jones wrote:
> > >>>>> "Esteve" == Esteve Fernandez <esteve at sindominio.net> writes:
> >
> > Esteve> I'm going to jump in. How about this:
> >
> > That's nice. But you've coupled the args to aFuncReturningADeferred and
> > what it's Deferred ends up returning to the args for __init__ of the
> > class.
>
> Yep, that's what I meant. I wanted to show how to pass an argument to Foo,
> which will be used to call a function (that may take a considerable amount
> of time) and whose return value will be stored in a Foo instance.

Alternatively a function would suffice:

from twisted.internet import defer, reactor

def aFuncReturningADeferred(value):
    d = defer.Deferred()
    reactor.callLater(5, d.callback, value[::-1])
    return d

class SimpleFoo(object):

    def __init__(self, value):
        self.value = value

def printFoo(obj):
    print obj.value
    reactor.stop()

def FooFactory(value):
    return aFuncReturningADeferred(value).addCallback(SimpleFoo)

d = FooFactory("Some value")
d.addCallback(printFoo)

reactor.run()



From terry at jon.es  Mon Nov  3 09:20:22 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 15:20:22 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 15:03:42 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
	<18702.63593.938808.482176@jon.es>
	<200811031453.24955.esteve@sindominio.net>
	<200811031503.42724.esteve@sindominio.net>
Message-ID: <18703.2214.64127.275374@jon.es>

>>>>> "Esteve" == Esteve Fernandez <esteve at sindominio.net> writes:
Esteve> Alternatively a function would suffice:
[snip]
Esteve> def FooFactory(value):
Esteve> return aFuncReturningADeferred(value).addCallback(SimpleFoo)

Right. That's JP's solution (though he didn't bother wrapping it in a
func): pass the result of the Deferred to the constructor of the class.

But I like your __new__ approach better, as it puts the logic for creating
deferreds, adding callbacks to them, doing other stuff etc., into the class
itself. It's in __new__ instead of __init__, but that seems perfect to me.

My approach, like all of them (and necessarily so) was two-phase, but my
second phase required the calling of __instantiate__. By using __new__ and
__init__ instead of my __init__ and __instantiate__, you moved the phases
back and just hitch-hike on Python's existing machinery. That's why I like
that approach, plus, as I keep saying, it keeps the Deferred logic inside
the class where it belongs.

T



From glyph at divmod.com  Mon Nov  3 10:23:45 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 03 Nov 2008 15:23:45 -0000
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18703.2214.64127.275374@jon.es>
References: <18702.15428.547828.694260@jon.es>
	<18702.63593.938808.482176@jon.es>
	<200811031453.24955.esteve@sindominio.net>
	<200811031503.42724.esteve@sindominio.net>
	<18703.2214.64127.275374@jon.es>
Message-ID: <20081103152345.6400.778006654.divmod.xquotient.655@weber.divmod.com>

On 02:20 pm, terry at jon.es wrote:
>But I like your __new__ approach better, as it puts the logic for 
>creating
>deferreds, adding callbacks to them, doing other stuff etc., into the 
>class
>itself. It's in __new__ instead of __init__, but that seems perfect to 
>me.

In my humble (but correct) opinion, this is actually a lot worse than 
using __init__ :).  I'd like to discourage you from using it.

Using __new__ like this is violating its implicit metaprogramming 
contract within Python.  __new__ is really supposed to be about 
allocation; it means, give me an uninitialized instance of this thing 
(which I will then initialize using __init__).  It is best used to 
implement things like token interning or free lists for small value 
objects.

Keeping __new__ doing what it's supposed to is important to libraries 
which use introspection.  Serialization libraries, twisted.spread.jelly 
being an obvious example, may need to use __new__ as an API in order to 
create cyclic relationships.  Consider the output of this program:

    class Something(object):
        def __new__(cls, *a, **k):
            self = object.__new__(cls, *a, **k)
            oself = SomethingElse(self)
            return oself

    class SomethingElse(object):
        def __init__(self, sth):
            self.sth = sth

    from twisted.spread.jelly import jelly, unjelly

    print unjelly(jelly(Something())).sth

Using __new__ is functionally equivalent to defining a classmethod, as I 
suggested, but rather than using the "classmethod" decorator it relies 
on implicitly hacking into bits of the Python object model.  Explicit is 
better ... well, you know the rest :).



From daniel.cuesta at iavante.es  Mon Nov  3 10:35:17 2008
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Mon, 03 Nov 2008 16:35:17 +0100
Subject: [Twisted-Python] Persistent Queue with subscriber worker
In-Reply-To: <200811031332.50581.esteve@sindominio.net>
References: <490EB8EE.7000409@iavante.es>
	<200811031332.50581.esteve@sindominio.net>
Message-ID: <490F1A35.90402@iavante.es>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081103/e8e40884/attachment.htm 

From terry at jon.es  Mon Nov  3 10:56:58 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 16:56:58 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 00:48:20 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
Message-ID: <18703.8010.379291.213184@jon.es>

[I'm replying the original because I want to comment on comments by all of
JP, Esteve and Glyph]

Glyph - I appreciate your comments on testing, and agree that's
problematic. I also like your pattern, have run into it myself, and will
use it - thanks.

Glyph also said I didn't really provide a use-case, so I'll do that a bit
more clearly now. That leads me back in the direction of preferring my
metaclass solution.

    from my.project.code import database

    class CoordinatorHandler(object):
        def __init__(self, tableName, tableSpec, dbURI):
            def setDb(db):
                self.db = db
            d = database.getDB(dbURI)
            d.addCallback(setDb)
            d.addCallback(self.createDBTable, tableName, tableSpec)
            return d

        def _createDBTable(self, txn, tableName, tableSpec):
            txn.execute('CREATE TABLE %s(%s)' % (tableName, tableSpec))

        def createDBTable(self, result, tableName, tableSpec):
            assert result is None
            return self.db.runInteraction(self._createDBTable,
                                          tableName, tableSpec)


Here database.getDB returns a Deferred, as does self.createDBTable.

The problem with approaches that don't actually create the class instance,
is that __init__ is calling self.createDBTable, but self doesn't exist
yet. So putting code to deal with Deferreds into __new__ wont help unless
that code has nothing to do with the instance of the class.

But using a metaclass makes it really easy. You just write your code
completely as usual, using whatever Twisted/Deferred calls you want
(including digging around in self), and return the Deferred result. You can
wrap your __init__ in inlineCallbacks if you like.

The difference is that my metaclass approach does create an instanced of
the class. It just moves __init__ out of the way (into the __hidden__ dict,
along with the args and kwargs) and calls it when you call __instantiate__.

So I find the metaclass approach more general, though of course I don't
like the clutter of __hidden__ or __instantiate__.

With JP's suggestion of cleaning up the return result of __instantiate__ to
just return the instance, I think it's a pretty clean solution - from the
POV of the caller. You just act as normal in writing your class, but stick
in a __metaclass__. Then calling gets you a Deferred, which is perfectly
normal in the Twisted world.

I guess what you should do depends on how complex your situation is, and
also on whether you've already written your class code when you realize you
need __init__ to somehow deal with Deferreds (in which case it may be
easier to just add __metaclass__).


If you do have the simpler situation, in which the Deferred is coming from
the outside world (i.e., not from calling methods on self), then Glyph's
approach is probably the nicest (the following is untested):

    class X:
        def __init__(self, *args, dResult=None, **kw):
            # do something

        @classmethod
        def fromDeferred(cls, d, *args, **kw):
            def cb(result):
                return cls(*args, dResult=result, **kw)
            return d.addCallback(cb)


Which lets you create an object directly (no deferred involved), lets you
create it after a deferred fires, and also lets you directly send in a fake
deferred result.

Terry



From glyph at divmod.com  Mon Nov  3 15:17:09 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 03 Nov 2008 20:17:09 -0000
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18703.8010.379291.213184@jon.es>
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
Message-ID: <20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>


On 03:56 pm, terry at jon.es wrote:
>Glyph - I appreciate your comments on testing, and agree that's
>problematic. I also like your pattern, have run into it myself, and 
>will
>use it - thanks.

OK, cool :).
>Glyph also said I didn't really provide a use-case, so I'll do that a 
>bit
>more clearly now. That leads me back in the direction of preferring my
>metaclass solution.

(snip example)
>The problem with approaches that don't actually create the class 
>instance,
>is that __init__ is calling self.createDBTable, but self doesn't exist
>yet. So putting code to deal with Deferreds into __new__ wont help 
>unless
>that code has nothing to do with the instance of the class.

Given that this provides a good object lesson for other folks writing 
Twisted-based code and potential contributors to Twisted to write code 
for Twisted itself, I will continue on with my critique.  I hope you 
find it helpful.

In this specific example, it doesn't seem like there's really any good 
reason for _createDBTable and createDBTable to be instance methods.  If 
I understand the thing you're implementing properly, you're not going to 
be calling those methods again once the instance is fully initialized 
(to create the table twice would be an error), so they arguably 
shouldn't even be public.  Assuming they should be public, though, they 
could easily be class methods - or even static methods or free 
functions.  The only attribute of 'self' accessed by either method is 
'db'; so why not just have a function that gets passed 'db' rather than 
'self'?

But, I'll take a step back and make the problem harder - let's assume 
you have lots of state on 'self' that these methods want to access, and 
there really is a complex multi-stage initialization process.  There are 
a number of simple solutions that don't involve metaclasses or __init__ 
returning a Deferred.

The simplest is to simply make your class's constructor just take a 'db' 
object.  Then you can do this:

    class CoordinatorHandler(object):
        @inlineCallbacks
        @classmethod
        # Untested, not totally sure that's the right stacking order...
        def fromSpec(cls, tableName, tableSpec, dbURI):
            self = cls(yield database.getDB(dbURI))
            yield self.createDBTable(tableName, tableSpec)
            returnValue(self)

        def __init__(self, db):
            self.db = db
        # ...

Now, that's a bit of a cop-out: __init__ hands back a partially- 
initialized object to application code.  The table might not yet be 
created.  Although your __metaclass__ pattern idea does that as well, 
what *I'd* want in this situation is a fully-initialized object from 
__init__, allowing only the internal multi-phase initialization code to 
see the partially-initialized object, since only that code really knows 
what methods you can and can't call before the object is fully ready.

The reality of RDBMSes is pretty crummy; it's (by definition) a big pile 
of global mutable state that you have very little control over and no 
way[1] of getting notified of changes to.  For example, you can't really 
know if a table exists or not, hypothetically somebody could come along 
at any moment and DROP TABLE on you and your whole application will 
break.  But, let's engage in a bit of fantasy for a moment (as all 
modern systems which interact with RDBMSes must do) and pretend that 
rather than spitting a string into a CREATE TABLE statement with no 
knowledge of success, the database (or some abstraction layer thereof) 
returns some kind of object to represent the table.

I say that because in this example, there's nothing you can pass to 
__init__ that will satisfy the object's idea of "fully initialized".  It 
just has to perform a bunch of potentially destructive operations on the 
"universe" object ('db'), then, once the results of those operations has 
taken effect, return an object.  So we need some kind of marker to say 
"we have performed those potentially destructive operations and they 
worked".  Code will probably be clearer than more prose at this point:

    class CoordinatorHandler(object):
        def __init__(self, db, tableHandle, otherStuff):
            "Do you know where to get a tableHandle from?  I do!  Call 
fromSpec."
            self.db = db
            self.tableHandle = tableHandle
            self.otherStuff = otherStuff

        @inlineCallbacks
        @classmethod
        def fromSpec(cls, tableName, tableSpec, dbURI, stuffFactory):
            # not fully initialized, but we're not handing this back to 
application
            # code yet...
            self = cls.__new__()
            # initialize juuuust enough to call that one method we want 
to call...
            self.db = yield database.getDB(dbURI)
            self.__init__(self.db, yield self.createDBTable(tableName, 
tableSpec),
                          yield stuffFactory.moreDeferredStuff())
            returnValue(self)

        def createDBTable(self, tableName, tableSpec):
            "We know this method only uses 'db' to do its work, so we're 
fine."
            return self.db.execute("CREATE TABLE ...").addCallback(
                lambda nothingUseful: TableHandle(tableName))


Here, you can't synchronously create a CoordinatorHandler unless you've 
got an object to stuff into its tableHandle slot from somewhere.  This 
provides a useful point at which to document the required type of the 
tableHandle, how one might create one (a pointer to some test utility 
classes, perhaps?).

This class also provides a nice factory function for you to generate one 
from a database, so you still get the same practical effect, but you 
still get all the benefits of testability that separated initialization 
can give you.  And your subclasses can still do interesting stuff in 
__init__ if they want to, since it will get invoked; it's just that 
there may be some pre-initialization variables present at that point.

This comes at the expense of one redundant line of code - the two times 
that 'db' is set - but I think the benefits are well worth that almost 
unmeasurably small cost :).  Plus, if that concerns you, you can factor 
the table-creation logic somewhere else so you don't need partial 
initialization.  In most cases, that's a better idea anyway (although 
I've very rarely seen code where I couldn't figure out how to cleanly do 
it).


[1]: I do know about http://www.postgresql.org/docs/8.1/static/sql- 
notify.html, but it's a pretty obscure feature that most databases don't 
have and that's apparently pretty difficult to use.  I hope it becomes 
more popular in the future though, rarara event-driven etc...



From andrewfr_ice at yahoo.com  Mon Nov  3 16:21:20 2008
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Mon, 3 Nov 2008 13:21:20 -0800 (PST)
Subject: [Twisted-Python] RPython and Twisted
Message-ID: <605543.14506.qm@web34205.mail.mud.yahoo.com>

Hi Folks:

This is new to me so here goes.....

I am taking my first baby steps with PyPy. I wish to start experimenting by re-writing an example (the programme I posted in RPtyhon and converting it to C. However I want to still use Twisted for networking.

One approach I was thinking about was to somehow compile the program as a C extension library and somehow have it talk to Twisted - I would like to keep my code and Twisted in the same process. Am I on the right track?

Any hints would be appreciated. If there is interest I can summarise my findings.

Cheers,
Andrew


      



From exarkun at divmod.com  Mon Nov  3 17:25:33 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 3 Nov 2008 17:25:33 -0500
Subject: [Twisted-Python] RPython and Twisted
In-Reply-To: <605543.14506.qm@web34205.mail.mud.yahoo.com>
Message-ID: <20081103222533.29191.533971156.divmod.quotient.49187@ohm>

On Mon, 3 Nov 2008 13:21:20 -0800 (PST), Andrew Francis <andrewfr_ice at yahoo.com> wrote:
>Hi Folks:
>
>This is new to me so here goes.....
>
>I am taking my first baby steps with PyPy. I wish to start experimenting by re-writing an example (the programme I posted in RPtyhon and converting it to C. However I want to still use Twisted for networking.
>
>One approach I was thinking about was to somehow compile the program as a C extension library and somehow have it talk to Twisted - I would like to keep my code and Twisted in the same process. Am I on the right track?
>
>Any hints would be appreciated. If there is interest I can summarise my findings.

Since the RPython/PyPy toolchain currently has better support for generating
standalone executables than for doing much else, I'd suggest taking that
approach.  Compile your RPython to a standalone executable, run it from a
Twisted-based process and do some simple RPC over stdio.  It's a bit heavy
handed, but I think it's the most straightforward approach given the state
of RPython.  The PyPy developers can probably give you better ideas about
what long-term direction might be best, though.  There's probably nothing
special about using RPython with Twisted - from the RPython perspective,
Twisted is just another pile of Python code that you need to figure out an
integration strategy for.  Whatever the generally correct approach is is
probably the approach that makes sense for using Twisted.

Jean-Paul



From exarkun at divmod.com  Mon Nov  3 18:55:55 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 3 Nov 2008 18:55:55 -0500
Subject: [Twisted-Python] October Sponsored Development
In-Reply-To: 0
Message-ID: <20081103235555.29191.187345499.divmod.quotient.49230@ohm>

Hey all,

Just wanted to let everyone know that the summary of the latest round of sponsored Twisted development is up on the labs blog:

http://labs.twistedmatrix.com/2008/11/summary-of-october-sponsored-twisted.html

Jean-Paul



From terry at jon.es  Mon Nov  3 19:48:38 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Nov 2008 01:48:38 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 20:17:09 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
Message-ID: <18703.39910.249634.406974@jon.es>

Hi Glyph

Thanks for the further examples. I agree that the classmethod approach is
both flexible and powerful.  It's probably the most useful thing I've
picked up out of thinking about and playing with all this.

Terry



From terry at jon.es  Mon Nov  3 21:33:59 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Nov 2008 03:33:59 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 20:17:09 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
Message-ID: <18703.46231.594938.56742@jon.es>

Hi again.

Despite all the useful suggestions, I've just realized that I still can't
complete what I was originally trying to do...

I'm trying to make a Twisted service. In my twisted/plugins/myService.py
file I have something like this:

    from zope.interface import implements
    from twisted.plugin import IPlugin
    from twisted.application.service import IServiceMaker
    from twisted.python import usage
    from my.application import myservice

    class Options(usage.Options):
        optParameters = [ ['db-uri', None, None, 'A db URI'], ]

    class MyServiceMaker(object):
        implements(IServiceMaker, IPlugin)
        tapname = 'My service'
        description = 'Desc.'
        options = Options

        def makeService(self, options):
            return myservice.MyService(dbURI=options['db-uri'])

    myServiceMaker = MyServiceMaker()


The problem here is that the service class I want to instantiate and return
from makeService calls something that returns a Deferred.

In Glyph's classmethod, Esteve's __new__, and my metaclass code, the thing
you get back when you go to use class is a Deferred. You have to wait for
that Deferred to fire before you get your instance. In JP's approach you
also wait for a Deferred before instantiating your class.

That would be fine if makeService could in turn return a Deferred that
would result in an object implementing IServiceMaker, but as far as I can
tell, makeService does not allow this. And in the context of a Twisted
plugin file like the above I'm even less clear on how to go about it.

Am I missing something here?

If not, wouldn't it be nice if makeService allowed you to return a Deferred?
AKA teaching your grandmother to suck eggs :-)

Terry



From erik at erikwickstrom.com  Tue Nov  4 02:06:50 2008
From: erik at erikwickstrom.com (Erik Wickstrom)
Date: Mon, 3 Nov 2008 23:06:50 -0800
Subject: [Twisted-Python] Trying to proxy through multiple IPs
Message-ID: <3d381e170811032306j7debe380hd54c1dc86d63d143@mail.gmail.com>

Hi all,

I'm trying to write a proxy server that accepts connections on
multiple ports, and depending on the port, using a different IP for
the outgoing connection.  My code works except that adding additional
reactor.listenTCP(...)s overwrite the IP of the previous listenTCPs.
So the proxy accepts connections on all the desired ports, but only
uses the last IP address for outgoing connections.

The ip (bindIP) is somehow being overwritten.  Based on advice from
IRC (exarkun --thanks!), I've tried a couple attempts at using
closures to solve the problem, but non of my implementations have done
the trick.

Can anyone see any other changes that might get this working?

# Also pasted at http://dpaste.com/88623/ incase of email garbling...

#from twisted.web import proxy, http

import urlparse
from urllib import quote as urlquote

from twisted.internet import reactor
from twisted.internet.protocol import ClientFactory
from twisted.web.resource import Resource
from twisted.web.server import NOT_DONE_YET
from twisted.web.http import HTTPClient, Request, HTTPChannel
from twisted.web.proxy import ProxyClient, ProxyClientFactory
from twisted.web import http
from twisted.internet import reactor
from twisted.python import log
import sys
log.startLogging(sys.stdout)



class ProxyRequest(Request):
    """
    Used by Proxy to implement a simple web proxy.

    @ivar reactor: the reactor used to create connections.
    @type reactor: object providing L{twisted.internet.interfaces.IReactorTCP}
    """

    protocols = {'http': ProxyClientFactory}
    ports = {'http': 80}

    def __init__(self, channel, queued, reactor=reactor):
        Request.__init__(self, channel, queued)
        self.reactor = reactor


    def process(self):
        parsed = urlparse.urlparse(self.uri)
        protocol = parsed[0]
        host = parsed[1]
        port = self.ports[protocol]
        if ':' in host:
            host, port = host.split(':')
            port = int(port)
        rest = urlparse.urlunparse(('', '') + parsed[2:])
        if not rest:
            rest = rest + '/'
        class_ = self.protocols[protocol]
        headers = self.getAllHeaders().copy()
        if 'host' not in headers:
            headers['host'] = host
        self.content.seek(0, 0)
        s = self.content.read()
        clientFactory = class_(self.method, rest, self.clientproto, headers,
                               s, self)
        self.reactor.connectTCP(host, port, clientFactory,
bindAddress=(self.bindIP,0))

class Proxy(HTTPChannel):
    requestFactory = ProxyRequest

class ProxyFactory(http.HTTPFactory):
    def class_factory(self, bindIP):
        def closure(ip):
            klass2 = ProxyRequest
            setattr(klass2, 'bindIP', ip)
            return klass2
        klass = Proxy
        setattr(klass, 'requestFactory', closure(bindIP))
        return klass

    def __init__(self, ip):
        http.HTTPFactory.__init__(self)
        self.ip = ip
        #self.protocol = proxy.Proxy
        self.protocol = self.class_factory(ip)


reactor.listenTCP(8080, ProxyFactory('192.168.168.101'),
interface="192.168.168.1")

reactor.listenTCP(8081, ProxyFactory('192.168.168.102'),
interface="192.168.168.1")
reactor.run()


##
Thanks!
Erik



From dialtone at gmail.com  Tue Nov  4 02:49:05 2008
From: dialtone at gmail.com (Valentino Volonghi)
Date: Mon, 3 Nov 2008 23:49:05 -0800
Subject: [Twisted-Python] DeferredDict, defaultdict, map/reduce, silliness
In-Reply-To: <18702.23705.748433.94046@jon.es>
References: <18702.23705.748433.94046@jon.es>
Message-ID: <0DE1BA14-0B1E-4140-89BE-B29B28524D81@gmail.com>


On Nov 2, 2008, at 6:06 PM, Terry Jones wrote:

> This isn't meant to be taken too seriously - perhaps just food for  
> someone
> else to chew on while trying to relax...
>
> I was thinking the other night about what a DeferredDict might look  
> like,
> what it might be useful for, if anything, etc. We have DeferredList of
> course, so why not a dict?  Then I also remembered  
> collections.defaultdict
> and couldn't resist the appeal of trying  
> defaultdict(defer.Deferred).  That
> thinking led to the map/reduce silliness below. I don't know that it  
> leads
> anywhere - I was just playing around.


This is actually a very very nice pattern. I can see it making my  
mapreduce
"example" code
<http://bazaar.launchpad.net/%7Edialtone/ampoule/main/annotate/16?file_id=client.py-20081029001234-rlmor7coth4g8s5d-3 
 >  (line 98 and following) a bit easier and maybe even generic enough
that I can package it as a library.

-- 
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081103/53135425/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081103/53135425/attachment.pgp 

From terry at jon.es  Tue Nov  4 04:01:57 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Nov 2008 10:01:57 +0100
Subject: [Twisted-Python] DeferredDict, defaultdict, map/reduce, silliness
In-Reply-To: Your message at 23:49:05 on Monday, 3 November 2008
References: <18702.23705.748433.94046@jon.es>
	<0DE1BA14-0B1E-4140-89BE-B29B28524D81@gmail.com>
Message-ID: <18704.3973.755388.623779@jon.es>

Hi Valentino

>>>>> "Valentino" == Valentino Volonghi <dialtone at gmail.com> writes:
Valentino> This is actually a very very nice pattern.

I thought it was too cute not to post, though I didn't really know what to
do with it. Something along the lines of map/reduce occurred to me quite
late. I bet there are other nice things you could do, mainly along the
lines of processing/bucketing a bunch of unpredictable input.

One thing I'd (probably) change would be to not use Deferred as the
argument to default dict, but to use a class that looked like it but with
the Deferred already called. That way you don't have the potentially very
long chain of callbacks building up. It's also partly a question of when
you want to do the work - each time you call addCallback, or at the end
when you've accumulated all the input and sent it off to its respective
callback chain.

So you could do something like this:

    def getDefault(init):
        def x():
            return defer.succeed(init)
        return x

and then the MapReduce class would look like

    class MapReduce(object):
        def __init__(self, init, cb):
            self.cb = cb
            self.d = defaultdict(getDefault(init))

Or, more flexibly, pass the defaultdict into the MapReduce class, giving
you the option of not having the callback chain already called, etc.

Anyway, I'm glad you like it, and hope you can do something nice with it.

Terry



From andrew-twisted at puzzling.org  Tue Nov  4 05:04:43 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 4 Nov 2008 21:04:43 +1100
Subject: [Twisted-Python] Trying to proxy through multiple IPs
In-Reply-To: <3d381e170811032306j7debe380hd54c1dc86d63d143@mail.gmail.com>
References: <3d381e170811032306j7debe380hd54c1dc86d63d143@mail.gmail.com>
Message-ID: <20081104100443.GI12038@steerpike.home.puzzling.org>

Erik Wickstrom wrote:
> Hi all,
> 
> I'm trying to write a proxy server that accepts connections on
> multiple ports, and depending on the port, using a different IP for
> the outgoing connection.  My code works except that adding additional
> reactor.listenTCP(...)s overwrite the IP of the previous listenTCPs.
> So the proxy accepts connections on all the desired ports, but only
> uses the last IP address for outgoing connections.
> 
> The ip (bindIP) is somehow being overwritten.  Based on advice from
> IRC (exarkun --thanks!), I've tried a couple attempts at using
> closures to solve the problem, but non of my implementations have done
> the trick.

I doesn't look like you understand how to write closures in Python.  Consider
this snippet of your code:

> class ProxyFactory(http.HTTPFactory):
>     def class_factory(self, bindIP):
>         def closure(ip):
>             klass2 = ProxyRequest
>             setattr(klass2, 'bindIP', ip)
>             return klass2
>         klass = Proxy
>         setattr(klass, 'requestFactory', closure(bindIP))
>         return klass
> 
>     def __init__(self, ip):
>         http.HTTPFactory.__init__(self)
>         self.ip = ip
>         #self.protocol = proxy.Proxy
>         self.protocol = self.class_factory(ip)

These lines are equivalent to the much simpler:

class ProxyFactory(http.HTTPFactory):

    def __init__(self, ip):
         self.protocol = Proxy
         self.protocol.requestFactory = ProxyRequest
         self.protocol.requestFactory.bindIP = ip

In particular, even though you define a function you call ?closure?, because you
always invoke it immediately after defining it (and do nothing else with it) you
don't gain any difference in behaviour by making a function.

So the problem is you have just a single global requestFactory for all ProxyFactory's
(the ProxyRequest class), but you're mutating that as if it's not global.

The solution is to either,

  a) actually have a different requestFactory, or
  b) pass the bindIP to the ProxyRequest (the object that cares about it) some
     other way.

a) is a bit messy, even when done correctly.  The simpler way is b):

    class ProxyRequest(Request):

        protocols = {'http': ProxyClientFactory}
        ports = {'http': 80}
    
        def __init__(self, channel, queued, reactor=reactor):
            Request.__init__(self, channel, queued)
            self.reactor = reactor
            self.bindIP = self.channel.factory.ip

        # ...the rest of ProxyRequest as you had it...

    class Proxy(HTTPChannel):
        requestFactory = ProxyRequest
    
    class ProxyFactory(http.HTTPFactory):

        def __init__(self, ip):
             http.HTTPFactory.__init__(self)
             self.ip = ip

-Andrew.




From glyph at divmod.com  Tue Nov  4 06:11:27 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 04 Nov 2008 11:11:27 -0000
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18703.46231.594938.56742@jon.es>
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
	<18703.46231.594938.56742@jon.es>
Message-ID: <20081104111127.6400.342806414.divmod.xquotient.903@weber.divmod.com>

On 02:33 am, terry at jon.es wrote:
>That would be fine if makeService could in turn return a Deferred that
>would result in an object implementing IServiceMaker, but as far as I 
>can
>tell, makeService does not allow this. And in the context of a Twisted
>plugin file like the above I'm even less clear on how to go about it.
>
>Am I missing something here?

As a matter of fact, yes :).

A Service instance is effectively a piece of static configuration.  In 
your example, you need to do reactor work; communicate with a remote 
database in a thread.  Services very definitely should _not_ be 
generating network traffic, scheduling timed calls, or otherwise talking 
to the reactor until "startService" has been called.  The idea with a 
Service is that you should be able to write a serialization mechanism 
that loads it out of a text file, a string in memory, or in your case a 
set of command line arguments, without touching any other objects, so 
that it can be re-configured and re-serialized by configuration tools.

You may want to create some _other_ configuration object, loaded from 
the remote database, in the middle of startService.  You may even want 
to have a multi-phase internal startup procedure to generate that 
object.  But you need to keep track of what state those things are in so 
that the infrastructure can come around and say stopService to you in 
the middle of that procedure and still get a clean, ordered shutdown. 
If the infrastructure were to get back a Deferred, there's nothing to 
call stopService on.



From ms at cerenity.org  Tue Nov  4 06:25:28 2008
From: ms at cerenity.org (Michael)
Date: Tue, 4 Nov 2008 11:25:28 +0000
Subject: [Twisted-Python] Trying to proxy through multiple IPs
In-Reply-To: <20081104100443.GI12038@steerpike.home.puzzling.org>
References: <3d381e170811032306j7debe380hd54c1dc86d63d143@mail.gmail.com>
	<20081104100443.GI12038@steerpike.home.puzzling.org>
Message-ID: <200811041125.29934.ms@cerenity.org>

Just going back to the closure issue, it's probably worth mentioning an issue 
with closures that people used to them in other languages sometimes get 
caught by.

On Tuesday 04 November 2008 10:04:43 Andrew Bennetts wrote:
> class ProxyFactory(http.HTTPFactory):
>
> ? ? def __init__(self, ip):
> ? ? ? ? ?self.protocol = Proxy
>          self.protocol.requestFactory = ProxyRequest
> ? ? ? ? ?self.protocol.requestFactory.bindIP = ip

This is also safer than using what python views as a closure - because 
closures in python don't capture all the free variables unlike closures in 
other languages. 

The original poster's code...

> class ProxyFactory(http.HTTPFactory):
>     def class_factory(self, bindIP):
>         def closure(ip):
>             klass2 = ProxyRequest

... is not safe, due to the ProxyRequest free variable.


Example:

def ProxyRequest(who): print "hello", who

class demo(object):
    def __init__(self, f="world"):
        def mkClosure(f):
            def X():
                ProxyRequest(f)
            return X
        self._C = mkClosure(f)
    def C(self):
        (self._C)()

X=demo()
X.C()

def ProxyRequest(who):
   print "game over"

X.C()

Running this results in:
hello world
game over

In most other languages with closures I've used this would result in:

hello world
hello world

This issue remains in python 3.0, for those wondering.

The only safe way of doing this is to capture a local value and use that 
instead:

class demo(object):
    def __init__(self, f="world"):
        pr = proxyRequest
        def closure(f):
            def X():
                pr(f)
            return X
        self._C = closure(f)

... if you have to use a closure.


Michael.
-- 
http://yeoldeclue.com/blog



From terry at jon.es  Tue Nov  4 10:47:54 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Nov 2008 16:47:54 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 11:11:27 on Tuesday, 4 November 2008
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
	<18703.46231.594938.56742@jon.es>
	<20081104111127.6400.342806414.divmod.xquotient.903@weber.divmod.com>
Message-ID: <18704.28330.986594.539860@jon.es>

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> On 02:33 am, terry at jon.es wrote:
>> Am I missing something here?
glyph> As a matter of fact, yes :).

OK, thanks, I get it. That should have been obvious.


BTW, I spent an interesting morning getting my head around *exactly* how
inlineCallbacks does its thing... No summary of my thoughts could do it
justice. I wonder how many people on the planet have been down that rabbit
hole.

Was the Twisted project always called Twisted? I was thinking it's a really
good thing you picked that name - cause you definitely would have had to
rename it :-)

I hope people don't mind my peanut gallery commentary. We're all in this
together, after all. A little gallows humor occasionally seems in order.

Thanks again,
Terry



From general at eepatents.com  Tue Nov  4 12:32:50 2008
From: general at eepatents.com (Ed Suominen)
Date: Tue, 04 Nov 2008 09:32:50 -0800
Subject: [Twisted-Python] DeferredDict, defaultdict, map/reduce, silliness
In-Reply-To: <18702.23705.748433.94046@jon.es>
References: <18702.23705.748433.94046@jon.es>
Message-ID: <49108742.4030407@eepatents.com>

Terry,

I wrote something like what you're talking about for sAsync. It is a 
database-persisted store for named items.

http://foss.eepatents.com/api/sAsync/sasync.items.Items.html

Best regards, Ed

Terry Jones wrote:
> This isn't meant to be taken too seriously - perhaps just food for someone
> else to chew on while trying to relax...
> 
> I was thinking the other night about what a DeferredDict might look like,
> what it might be useful for, if anything, etc. We have DeferredList of
> course, so why not a dict?  Then I also remembered collections.defaultdict
> and couldn't resist the appeal of trying defaultdict(defer.Deferred).  That
> thinking led to the map/reduce silliness below. I don't know that it leads
> anywhere - I was just playing around.
> 
> Terry
> 
> 
> import sys
> from collections import defaultdict
> from twisted.internet import defer, reactor
> 
> class MapReduce(object):
>     def __init__(self, init, cb):
>         self.init = init
>         self.cb = cb
>         self.d = defaultdict(defer.Deferred)
> 
>     def map(self, *keys):
>         for key in keys:
>             self.d[key].addCallback(self.cb)
> 
>     def reduce(self):
>         def finalize(result, key):
>             return (key, result)
>         deferreds = []
>         for key, d in self.d.iteritems():
>             d.addCallback(finalize, key)
>             deferreds.append(d)
>             d.callback(self.init)
>         return defer.gatherResults(deferreds)
> 
> def main():
>     def printResult(result):
>         print result
>         reactor.stop()
>         
>     mr = MapReduce(0, lambda x: x + 1)
>     for line in sys.stdin.readlines():
>         mr.map(*line.split())
>     d = mr.reduce().addCallback(printResult)
>     
> if __name__ == '__main__':
>     reactor.callLater(0, main)
>     reactor.run()
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 



From general at eepatents.com  Tue Nov  4 12:35:19 2008
From: general at eepatents.com (Ed Suominen)
Date: Tue, 04 Nov 2008 09:35:19 -0800
Subject: [Twisted-Python] DeferredDict, defaultdict, map/reduce, silliness
In-Reply-To: <18702.23705.748433.94046@jon.es>
References: <18702.23705.748433.94046@jon.es>
Message-ID: <491087D7.4020601@eepatents.com>

Sorry about the dupe, but the link I sent in the earlier post was for a 
more general name:item class. My persistent async dictionary is built on 
that:

http://foss.eepatents.com/api/sAsync/sasync.pdict.PersistentDict.html

--------------------------------------------------------------------------

Terry,

I wrote something like what you're talking about for sAsync. It is a
database-persisted store for named items.

http://foss.eepatents.com/api/sAsync/sasync.items.Items.html

Best regards, Ed

Terry Jones wrote:
> This isn't meant to be taken too seriously - perhaps just food for someone
> else to chew on while trying to relax...
> 
> I was thinking the other night about what a DeferredDict might look like,
> what it might be useful for, if anything, etc. We have DeferredList of
> course, so why not a dict?  Then I also remembered collections.defaultdict
> and couldn't resist the appeal of trying defaultdict(defer.Deferred).  That
> thinking led to the map/reduce silliness below. I don't know that it leads
> anywhere - I was just playing around.
> 
> Terry
> 
> 
> import sys
> from collections import defaultdict
> from twisted.internet import defer, reactor
> 
> class MapReduce(object):
>     def __init__(self, init, cb):
>         self.init = init
>         self.cb = cb
>         self.d = defaultdict(defer.Deferred)
> 
>     def map(self, *keys):
>         for key in keys:
>             self.d[key].addCallback(self.cb)
> 
>     def reduce(self):
>         def finalize(result, key):
>             return (key, result)
>         deferreds = []
>         for key, d in self.d.iteritems():
>             d.addCallback(finalize, key)
>             deferreds.append(d)
>             d.callback(self.init)
>         return defer.gatherResults(deferreds)
> 
> def main():
>     def printResult(result):
>         print result
>         reactor.stop()
>         
>     mr = MapReduce(0, lambda x: x + 1)
>     for line in sys.stdin.readlines():
>         mr.map(*line.split())
>     d = mr.reduce().addCallback(printResult)
>     
> if __name__ == '__main__':
>     reactor.callLater(0, main)
>     reactor.run()
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 




From terry at jon.es  Tue Nov  4 12:41:50 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Nov 2008 18:41:50 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 11:11:27 on Tuesday, 4 November 2008
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
	<18703.46231.594938.56742@jon.es>
	<20081104111127.6400.342806414.divmod.xquotient.903@weber.divmod.com>
Message-ID: <18704.35166.505202.308830@jon.es>

Hi again Glyph

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:

glyph> You may want to create some _other_ configuration object, loaded
glyph> from the remote database, in the middle of startService.  You may
glyph> even want to have a multi-phase internal startup procedure to
glyph> generate that object.  But you need to keep track of what state
glyph> those things are in so that the infrastructure can come around and
glyph> say stopService to you in the middle of that procedure and still get
glyph> a clean, ordered shutdown.  If the infrastructure were to get back a
glyph> Deferred, there's nothing to call stopService on.

Sorry to post so much on this - I do hope it's useful to other people.

Here's what I think you were saying, but in my own words:

I could do more complex work in startService, including dealing with
Deferreds. So to give a simple (non-working) example based on your earlier
classmethod suggestion, here's some sample code:

    from myservice import myhandler

    class MyService(internet.TCPServer):
        def __init__(self, port, dbURI):
            self.port = port
            self.dbURI = dbURI

        @defer.inlineCallbacks
        def startService(self):
            self.handler = yield myhandler.Handler.fromDbURI(self.dbURI)
            internet.TCPServer.__init__(self, self.port, self.handler.getFactory())
            yield self.handler.startDB()
            yield self.handler.createTables()
            # Perhaps do other init things...
            internet.TCPServer.startService(self)

        def stopService(self):
            self.handler.exit()
            return internet.TCPServer.stopService(self)

As you suggested, myhandler.Handler.fromDbURI is a classmethod that gets a
Deferred and adds a callback to it that will return an instance of
myhandler.Handler. Then I do a couple of other Deferred-producing
operations and finally start a TCP server.

The problem with this is that the caller of startService gets a Deferred
back immediately after myhandler.Handler.fromDbURI returns its Deferred.
As far as I can see, no-one looks at the return result of startService. So
the calling code may proceed willy nilly on the assumption that the service
has started, when in fact it hasn't. I.e., when startService returns its
Deferred, the myhandler.Handler.fromDbURI likely wont have completed, and
the subsequent calls (startDB, createTables) wont have even started.

You went on to say:

glyph> You may even want to have a multi-phase internal startup procedure
glyph> to generate that object.  But you need to keep track of what state
glyph> those things are in so that the infrastructure can come around and
glyph> say stopService to you in the middle of that procedure and still get
glyph> a clean, ordered shutdown.

Which I guess you'd just repeat again now?

IOW, if my startService is going to do various operations with Deferreds,
then as those things happen I should be (for example) updating
handler.state to indicate whether the handler is actually ready. And if a
stopService call comes along, I have the handler object and can examine its
state to shut things down properly, depending on where I am in setting
things up.  To close a further hole, I'd put an attribute onto the
MyService instance to indicate when the yield that will result in
self.handler being assigned is still awaiting the generator send in
inlineCallbacks.

Unfortunately this seems to imply that I also then need to put checks into
handler methods to make sure it's actually ready before trying anything. I
suppose I'd just log and ignore those early calls, maybe checking that they
actually were early. And/or add a timer. What an involved mess!

Is all this a reasonable summary of what you were imagining / describing?

Thanks again, and apologies for so many mails.

Terry



From ddwiggins at advpubtech.com  Tue Nov  4 13:05:42 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 04 Nov 2008 10:05:42 -0800
Subject: [Twisted-Python] Re: A Python metaclass for Twisted allowing
 __init__ to return a Deferred
In-Reply-To: <20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
References: <18702.15428.547828.694260@jon.es>	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
Message-ID: <geq2tn$5q2$1@ger.gmane.org>

Glyph's very nice critique reminds me a bit of wxPython's 2 stage 
creation of widgets (described for example in 
http://wiki.wxpython.org/TwoStageCreation); there, as here, the idea is 
to "initialize juuuust enough" to allow setting the context for creating 
the actual widget.  I don't know if that technique would be adaptable to 
this situation, but FWIW...

-- 
Don Dwiggins
Advanced Publishing Technology




From daedalus at eigenmagic.com  Tue Nov  4 19:58:41 2008
From: daedalus at eigenmagic.com (Justin Warren)
Date: Wed, 05 Nov 2008 11:58:41 +1100
Subject: [Twisted-Python] FirstError handling from defer.gatherResults()?
Message-ID: <1225846721.6711.40.camel@localhost>

I'm missing something obvious, so I must consult the gurus of the list:

I have some code that gets info from remote devices, a little like this:

def get_thing_info():
  dlist = []
  for thing in thinglist:
    d = thing.fetch_info()
    dlist.append(d)

  return defer.gatherResults(dlist)

If an error occurs, gatherResults() behaves like
DeferredList(fireOnOneErrback=True), but the errback will receive a
FirstError object, not a Failure.

Normally, I'd do something like this in an Errback:

def cb_handle_failure(failure):
  e = failure.trap(MyNonFatalException)
  if e:
    log.debug("Not a fatal failure. Getting info again.")
    return get_thing_info()

But what is the right way to do this when I receive a FirstError?

-- 
Justin Warren <daedalus at eigenmagic.com>




From terry at jon.es  Tue Nov  4 20:51:56 2008
From: terry at jon.es (Terry Jones)
Date: Wed, 5 Nov 2008 02:51:56 +0100
Subject: [Twisted-Python] FirstError handling from defer.gatherResults()?
In-Reply-To: Your message at 11:58:41 on Wednesday, 5 November 2008
References: <1225846721.6711.40.camel@localhost>
Message-ID: <18704.64572.699719.416918@jon.es>

Hi Justin

>>>>> "Justin" == Justin Warren <daedalus at eigenmagic.com> writes:
Justin> If an error occurs, gatherResults() behaves like
Justin> DeferredList(fireOnOneErrback=True), but the errback will receive a
Justin> FirstError object, not a Failure.

Justin> Normally, I'd do something like this in an Errback:

Justin> def cb_handle_failure(failure):
Justin>   e = failure.trap(MyNonFatalException)

Justin> But what is the right way to do this when I receive a FirstError?

The FirstError holds the original failure in an attribute called
subFailure. So you should be able to do

    e = failure.value.subFailure.trap(MyNonFatalException)

Terry



From daedalus at eigenmagic.com  Tue Nov  4 22:00:56 2008
From: daedalus at eigenmagic.com (Justin Warren)
Date: Wed, 05 Nov 2008 14:00:56 +1100
Subject: [Twisted-Python] FirstError handling from defer.gatherResults()?
In-Reply-To: <18704.64572.699719.416918@jon.es>
References: <1225846721.6711.40.camel@localhost>
	<18704.64572.699719.416918@jon.es>
Message-ID: <1225854056.6711.46.camel@localhost>

On Wed, 2008-11-05 at 02:51 +0100, Terry Jones wrote:
> Hi Justin
> 
> >>>>> "Justin" == Justin Warren <daedalus at eigenmagic.com> writes:
> Justin> If an error occurs, gatherResults() behaves like
> Justin> DeferredList(fireOnOneErrback=True), but the errback will receive a
> Justin> FirstError object, not a Failure.
> 
> Justin> Normally, I'd do something like this in an Errback:
> 
> Justin> def cb_handle_failure(failure):
> Justin>   e = failure.trap(MyNonFatalException)
> 
> Justin> But what is the right way to do this when I receive a FirstError?
> 
> The FirstError holds the original failure in an attribute called
> subFailure. So you should be able to do
> 
>     e = failure.value.subFailure.trap(MyNonFatalException)

Yes, ok. That's what I thought I should be doing, however trial appears
to still think that the error I've trapped has occurred, and ERRORs the
test. Am I not clearing state somewhere? I thought that simply handling
the failure (and not returning a Failure from the errback) would stop
this?

-- 
Justin Warren <daedalus at eigenmagic.com>




From exarkun at divmod.com  Wed Nov  5 00:36:24 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 5 Nov 2008 00:36:24 -0500
Subject: [Twisted-Python] FirstError handling from defer.gatherResults()?
In-Reply-To: <1225854056.6711.46.camel@localhost>
Message-ID: <20081105053624.29191.578608441.divmod.quotient.49920@ohm>

On Wed, 05 Nov 2008 14:00:56 +1100, Justin Warren <daedalus at eigenmagic.com> wrote:
>On Wed, 2008-11-05 at 02:51 +0100, Terry Jones wrote:
>> Hi Justin
>>
>> >>>>> "Justin" == Justin Warren <daedalus at eigenmagic.com> writes:
>> Justin> If an error occurs, gatherResults() behaves like
>> Justin> DeferredList(fireOnOneErrback=True), but the errback will receive a
>> Justin> FirstError object, not a Failure.
>>
>> Justin> Normally, I'd do something like this in an Errback:
>>
>> Justin> def cb_handle_failure(failure):
>> Justin>   e = failure.trap(MyNonFatalException)
>>
>> Justin> But what is the right way to do this when I receive a FirstError?
>>
>> The FirstError holds the original failure in an attribute called
>> subFailure. So you should be able to do
>>
>>     e = failure.value.subFailure.trap(MyNonFatalException)
>
>Yes, ok. That's what I thought I should be doing, however trial appears
>to still think that the error I've trapped has occurred, and ERRORs the
>test. Am I not clearing state somewhere? I thought that simply handling
>the failure (and not returning a Failure from the errback) would stop
>this?

The Deferred in the list you passed to gatherResults still failed
because gatherResults doesn't pass consumeErrors=True to the DeferredList
it created.  So even though you trapped the failure from the Deferred
gatherResults returned, the original Deferred still has an unhandled
failure and your test gets an error.

To fix this, use DeferredList instead of gatherResults (or your own
version of gatherResults that does pass consumeErrors=True) or add
your own errbacks to all the Deferreds in the list after you've
passed the list to gatherResults.

Jean-Paul



From blair.bethwaite at gmail.com  Wed Nov  5 01:18:28 2008
From: blair.bethwaite at gmail.com (Blair Bethwaite)
Date: Wed, 5 Nov 2008 17:18:28 +1100
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
References: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
Message-ID: <ab42a7c0811042218obfaafc8q7031a37126d7e5e2@mail.gmail.com>

David, thanks for your response, it's great when people take the time
to read a lengthy question and then respond with some insight!

David Ripton wrote:
> PB allows both ends of the connection to send and receive at any time,
> over a single connection.  I use it for a game where multiple clients
> connect via TCP to a server, and then the clients send messages to the
> server whenever they want, and the server sends messages to one or more
> clients whenever it wants (over the original connections initiated by
> the clients, so the clients don't need to open any holes in their
> firewalls), and everything just stinking works.

I ended up sort of answering this one for myself by just playing with
a basic chat server example and sniffing packets - only saw
SYN,SYN-ACK,ACK once for each client. Though it would be nice if the
documentation gave this level of detail, presumably this is something
that belongs with the different transports.

> That's not the way XML-RPC is typically done.  Clearly you could make a
> protocol that uses XML-RPC payload over a persistent connection.  But
> you'd lose the ability to use arbitrary XML-RPC libraries unmodified,
> which is probably the main benefit of choosing XML-RPC.

Duh, good point! Guess I was kinda trying to map our requirements onto
an example that looked easy (from the book).

> If not for the Java requirement, I would say that Twisted is a good fit,
> and that you could use either PB or AMP, depending on whether you want
> to pass around complex types or simple ones.  But if you need Java,
> I don't know.

Guess I'll have to take a closer look at the Java implementation. Not
sure why I didn't stumble across AMP before but looks promising...

Thanks,
-Blair

--
In science one tries to tell people, in such a way
as to be understood by everyone, something that
no one ever knew before. But in poetry, it's the
exact opposite.
- Paul Dirac



From daedalus at eigenmagic.com  Wed Nov  5 01:22:23 2008
From: daedalus at eigenmagic.com (Justin Warren)
Date: Wed, 05 Nov 2008 17:22:23 +1100
Subject: [Twisted-Python] FirstError handling from defer.gatherResults()?
In-Reply-To: <20081105053624.29191.578608441.divmod.quotient.49920@ohm>
References: <20081105053624.29191.578608441.divmod.quotient.49920@ohm>
Message-ID: <1225866143.6711.49.camel@localhost>

On Wed, 2008-11-05 at 00:36 -0500, Jean-Paul Calderone wrote:

> >Yes, ok. That's what I thought I should be doing, however trial appears
> >to still think that the error I've trapped has occurred, and ERRORs the
> >test. Am I not clearing state somewhere? I thought that simply handling
> >the failure (and not returning a Failure from the errback) would stop
> >this?
> 
> The Deferred in the list you passed to gatherResults still failed
> because gatherResults doesn't pass consumeErrors=True to the DeferredList
> it created.  So even though you trapped the failure from the Deferred
> gatherResults returned, the original Deferred still has an unhandled
> failure and your test gets an error.
> 
> To fix this, use DeferredList instead of gatherResults (or your own
> version of gatherResults that does pass consumeErrors=True) or add
> your own errbacks to all the Deferreds in the list after you've
> passed the list to gatherResults.

Awesome! Thanks Jean-Paul.

To the code!

-- 
Justin Warren <daedalus at eigenmagic.com>




From andrewfr_ice at yahoo.com  Wed Nov  5 09:11:41 2008
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 5 Nov 2008 06:11:41 -0800 (PST)
Subject: [Twisted-Python] RPython and Twisted
Message-ID: <378319.53548.qm@web34203.mail.mud.yahoo.com>

Hi J.P:

AF>I wish to start experimenting by re-writing an example (the programme I AF>posted in RPtyhon and converting it to C.

Oops. I meant Stackless Python not RPython.

>Since the RPython/PyPy toolchain currently has better support for >generating standalone executables than for doing much else, I'd suggest >taking that approach.  Compile your RPython to a standalone executable, >run it from a Twisted-based process and do some simple RPC over stdio.
> It's a bit heavy handed, but I think it's the most straightforward >approach given the state of RPython. 

It is a good approach. Bear with me, I am still reading up but let me run this one by you: compile a RPython programme to C. Embed a Python interpreter running Twisted. Still heavy handed but I think that brings us closer to understanding integration issues (and getting something to work).

>There's probably nothing special about using RPython with Twisted -

Again, I am not sure - if the Twisted parts could not be converted, I believe the programme would run as a regular Python programme.

Then is the question of how difficult would it be to write Twisted in RPython? Would it be worth it? I suspect that the I/O would still be bottleneck.

>from the RPython perspective, Twisted is just another pile of Python >code that you need to figure out an integration strategy for. 

I don't know about this. I am reading the FAQ:

[blockquote]
Can I use PyPy and RPython to compile smaller parts of my Python program?

No. That would be possible, and we played with early attempts in that direction, but there are many delicate issues: for example, how the compiled and the non-compiled parts exchange data. Supporting this in a nice way would be a lot of work.
[/blocquote]

J.P thanks for the suggestion. I guess it is time to write some tests :-)

Cheers,
Andrew




      



From python at blackslens.com  Wed Nov  5 10:52:46 2008
From: python at blackslens.com (Black)
Date: Wed, 5 Nov 2008 10:52:46 -0500
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <ab42a7c0811042218obfaafc8q7031a37126d7e5e2@mail.gmail.com>
References: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
	<ab42a7c0811042218obfaafc8q7031a37126d7e5e2@mail.gmail.com>
Message-ID: <CD5FB5F4-EFEC-45E2-9F06-688A98D4E5E0@blackslens.com>

I'm going to chime in here with a pretty general comment...


On Nov 5, 2008, at 1:18 AM, Blair Bethwaite wrote:
>>
>
> Guess I'll have to take a closer look at the Java implementation. Not
> sure why I didn't stumble across AMP before but looks promising...
>


I can probably guess why you didn't stumble across AMP, because it  
took me a long time to discover it as well. The problem is that ti  
isn't really discussed anywhere in the Twisted documentation (other  
than in the API description). It is, I think, one of the better kept  
secrets in the Twisted arsenal. The only exception is on this list,  
where it comes up frequently as the solution to a lot of problems  
(though without much detail). I wonder if there wouldn't be some  
benefit to adding a section in the core documentation near the section  
on the PB... I would write some myself, but I didn't find AMP in time  
and wrote the apps I currently work with using PB or custom protocols  
and I just haven't had the time to learn AMP and work with it...




From exarkun at divmod.com  Wed Nov  5 11:19:21 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 5 Nov 2008 11:19:21 -0500
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <CD5FB5F4-EFEC-45E2-9F06-688A98D4E5E0@blackslens.com>
Message-ID: <20081105161921.29191.1446923850.divmod.quotient.50181@ohm>

On Wed, 5 Nov 2008 10:52:46 -0500, Black <python at blackslens.com> wrote:
>I'm going to chime in here with a pretty general comment...
>
>
>On Nov 5, 2008, at 1:18 AM, Blair Bethwaite wrote:
>>>
>>
>>Guess I'll have to take a closer look at the Java implementation. Not
>>sure why I didn't stumble across AMP before but looks promising...
>I can probably guess why you didn't stumble across AMP, because it  took me 
>a long time to discover it as well. The problem is that ti  isn't really 
>discussed anywhere in the Twisted documentation (other  than in the API 
>description). It is, I think, one of the better kept  secrets in the Twisted 
>arsenal.

One reason for that is that AMP is about two years old; PB is at least 7,
probably a little bit older.

Of course, it'd be great to have some howto-style documentation for AMP.

Jean-Paul



From ellisonbg.net at gmail.com  Wed Nov  5 12:18:52 2008
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 5 Nov 2008 09:18:52 -0800
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <20081105161921.29191.1446923850.divmod.quotient.50181@ohm>
References: <CD5FB5F4-EFEC-45E2-9F06-688A98D4E5E0@blackslens.com>
	<20081105161921.29191.1446923850.divmod.quotient.50181@ohm>
Message-ID: <6ce0ac130811050918xb57294fv4f5da0ef05b489a1@mail.gmail.com>

I also highly recommend Foolscap (http://foolscap.lothar.com/trac),
which was designed as a next generation PB-like RPC protocol.  Some
advantages of Foolscap:

* Security is built-in and easy to use.  The security model of
Foolscap is based on the object capability model and is really nice.
If you need security (encryption+authentication) Foolscap is the way
to go.  PB can be made secure, but it is not straighforward.

* Much better support for streaming large objects than PB or AMP has.

We have used PB extensively as well though and if you don't need
security or the ability to handle large objects, it it great.

Bran

On Wed, Nov 5, 2008 at 8:19 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 5 Nov 2008 10:52:46 -0500, Black <python at blackslens.com> wrote:
>>
>> I'm going to chime in here with a pretty general comment...
>>
>>
>> On Nov 5, 2008, at 1:18 AM, Blair Bethwaite wrote:
>>>>
>>>
>>> Guess I'll have to take a closer look at the Java implementation. Not
>>> sure why I didn't stumble across AMP before but looks promising...
>>
>> I can probably guess why you didn't stumble across AMP, because it  took
>> me a long time to discover it as well. The problem is that ti  isn't really
>> discussed anywhere in the Twisted documentation (other  than in the API
>> description). It is, I think, one of the better kept  secrets in the Twisted
>> arsenal.
>
> One reason for that is that AMP is about two years old; PB is at least 7,
> probably a little bit older.
>
> Of course, it'd be great to have some howto-style documentation for AMP.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From dripton at ripton.net  Wed Nov  5 16:49:31 2008
From: dripton at ripton.net (David Ripton)
Date: Wed, 5 Nov 2008 13:49:31 -0800
Subject: [Twisted-Python] AMP port to C?
Message-ID: <20081105214931.GA26643@vidar.dreamhost.com>

Has anyone ported Twisted AMP to C?

If so, is the code publicly available?  

Thanks.

-- 
David Ripton    dripton at ripton.net



From reza at getpeer.com  Thu Nov  6 09:31:44 2008
From: reza at getpeer.com (Reza Lotun)
Date: Thu, 6 Nov 2008 14:31:44 +0000
Subject: [Twisted-Python] Silencing PotentialZombieWarning
In-Reply-To: <356e30830811060625g1827df65g59d60185b6257d5e@mail.gmail.com>
References: <356e30830811060625g1827df65g59d60185b6257d5e@mail.gmail.com>
Message-ID: <356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>

Hi All,

I'm working on a multi-platform (win32 and os x) wx + Twisted app,
where I've found the best solution is to run both in a separate thread
- the main thread is wx, and the other is Twisted. It basically works
like a charm (though I'd be interested in hearing about other
approaches. I've also played with wxreactor way back, but didn't find
it as stable).

Because I spawn a few processes (using spawnProcess), and must run my
reactor with installSignalHandlers=0, I get PotentialZombieWarning
errors every time I spawn. Now, I handle reaping of my processes
manually for various reasons, and also install my own signal handlers
(in the main thread; I also pass clearSigInt=False to wx). Is there
any way I can silence these warnings?

Thanks,
Reza


--
Reza Lotun
Senior Software Engineer
GetPeer Limited
reza at getpeer.com



From exarkun at divmod.com  Thu Nov  6 09:44:24 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 6 Nov 2008 09:44:24 -0500
Subject: [Twisted-Python] Silencing PotentialZombieWarning
In-Reply-To: <356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>
Message-ID: <20081106144424.29191.2116200826.divmod.quotient.50683@ohm>

On Thu, 6 Nov 2008 14:31:44 +0000, Reza Lotun <reza at getpeer.com> wrote:
>Hi All,
>
>I'm working on a multi-platform (win32 and os x) wx + Twisted app,
>where I've found the best solution is to run both in a separate thread
>- the main thread is wx, and the other is Twisted. It basically works
>like a charm (though I'd be interested in hearing about other
>approaches. I've also played with wxreactor way back, but didn't find
>it as stable).
>
>Because I spawn a few processes (using spawnProcess), and must run my
>reactor with installSignalHandlers=0, I get PotentialZombieWarning
>errors every time I spawn. Now, I handle reaping of my processes
>manually for various reasons, and also install my own signal handlers
>(in the main thread; I also pass clearSigInt=False to wx). Is there
>any way I can silence these warnings?

Sure.  See the Python documentation for warnings.filterwarnings.

Jean-Paul



From reza at getpeer.com  Thu Nov  6 10:17:28 2008
From: reza at getpeer.com (Reza Lotun)
Date: Thu, 6 Nov 2008 15:17:28 +0000
Subject: [Twisted-Python] Silencing PotentialZombieWarning
In-Reply-To: <20081106144424.29191.2116200826.divmod.quotient.50683@ohm>
References: <356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>
	<20081106144424.29191.2116200826.divmod.quotient.50683@ohm>
Message-ID: <356e30830811060717k16413f0exd498e983e5659aec@mail.gmail.com>

Thanks Jean-Paul, I didn't know about the warnings module!

Cheers,
Reza

On Thu, Nov 6, 2008 at 2:44 PM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>
> Sure.  See the Python documentation for warnings.filterwarnings.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Reza Lotun
Senior Software Engineer
GetPeer Limited
reza at getpeer.com



From dialtone at gmail.com  Thu Nov  6 14:51:26 2008
From: dialtone at gmail.com (Valentino Volonghi)
Date: Thu, 6 Nov 2008 11:51:26 -0800
Subject: [Twisted-Python] AMP port to C?
In-Reply-To: <20081105214931.GA26643@vidar.dreamhost.com>
References: <20081105214931.GA26643@vidar.dreamhost.com>
Message-ID: <212ED43F-3F4F-463E-BD8B-89743DAD62C7@gmail.com>


On Nov 5, 2008, at 1:49 PM, David Ripton wrote:

> Has anyone ported Twisted AMP to C?
>
> If so, is the code publicly available?


Would be cool, I'd like to have serializers/deserializers in C.

-- 
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081106/6adfb497/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081106/6adfb497/attachment.pgp 

From glyph at divmod.com  Thu Nov  6 15:22:53 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 06 Nov 2008 20:22:53 -0000
Subject: [Twisted-Python] making twisted provide good feedback (was Re:
	Having reactor run at the main thread...)
In-Reply-To: <d06a5cd30811060148q1cccf144g438dc29b70bb7bcf@mail.gmail.com>
References: <2f5ea7490811041220j64d2ad63h3b09e35f14680048@mail.gmail.com>
	<20081104224833.GJ12038@steerpike.home.puzzling.org>
	<2f5ea7490811041959k436c6a63he6b5a88d0cb4e75d@mail.gmail.com>
	<20081105041108.GL12038@steerpike.home.puzzling.org>
	<20081105150823.GB2561@mcnabbs.org>
	<20081105192431.6400.884481684.divmod.xquotient.1050@weber.divmod.com>
	<20081105211925.GC3797@mcnabbs.org>
	<20081106025537.6400.378398420.divmod.xquotient.1281@weber.divmod.com>
	<d06a5cd30811060148q1cccf144g438dc29b70bb7bcf@mail.gmail.com>
Message-ID: <20081106202253.6400.1138909160.divmod.xquotient.1335@weber.divmod.com>

(Moving this off the twisted-web list because it is of more general 
interest and contains nothing web-specific.)

On 09:48 am, jml at mumak.net wrote:
>On the other hand, there's a related invalid argument that gets used a
>lot by library and framework authors: "if we provide X, people might
>misuse it, so we should not provide X". This argument is also bogus
>(that way lies Java). Provide safe, well-documented alternatives for
>the abusers and let those who want to shoot themselves in the foot do
>so: sometimes they might actually know better than you.

I find it peculiar that you think this is Java's disease.  My 
perspective is that Java is unpleasant because it is remarkably tedious, 
redundant, and inconsistent, not because it lacks functionality.  If 
anything, it's a mess of functionality, and there are too many ways to 
do the same thing.

If you want to shoot yourself in the foot (or face, as the case may be) 
there's always the com.sun hierarchy, which despite being full of 
warnings signs and sparsely documented, is all public (at the language 
level) and accessible from Java programs which wish to go that way.  In 
that sense it's relatively hacker friendly.  For more fun with foot- 
shooting there's also AccessibleObject, which lets you call private 
methods and access private fields.

I think the whole issue here is very complex, and so I'd like to repeat 
and perhaps more clearly explain my own views.

I work at the bleeding edge of lots of software and am frequently 
frustrated when the authors of libraries that I use don't bother with 
"edge" cases that are necessary to the applications that I write. 
Twisted should provide excellent support for valid use-cases, no matter 
how obscure.

On the other hand, it's equally frustrating to use a library where the 
incredibly obscure "you probably don't need this" and the 99%-of-the- 
time positive-path APIs are listed, without any particular ordering, in 
one giant flat list.  It's particularly frustrating to google for "How 
do I (X)" and get a solution which uses an apparently reasonable API to 
do (X), only to discover months after using it that it's actually 
unsupported and you're not supposed to touch it and now your program is 
going to break horribly with the next minor version of the library.

This isn't just a problem with documentation, because in reality nobody 
reads documentation.  If you're writing a program, you're going to read 
_just_ enough of the API doc and do just enough groveling around with 
dir() and pydoc to get yourself to the point where something works. 
When it works, you will probably consider that sufficient proof that you 
used the APIs correctly, unless you had to type something that _looked_ 
particularly gross in the course of doing it, or you got a bunch of 
warnings out of your program when you ran it.  This is the whole point 
of DeprecationWarning: somehow, your library code itself has to 
communicate with the the developer who is invoking it and tell them 
useful things about their use or misuse.

I feel like Twisted has more of the latter problem than the former. 
There are a lot of methods which aren't really private 
(addReader/removeReader) that don't differentiate themselves as more or 
less private or refer you to the more portable and general APIs that you 
probably want (pauseProducing/resumeProducing).  However, (modulo global 
reactors, of course) Twisted does support a lot of edge cases very 
nicely.

Speaking from personal experience, there are a lot of people who show up 
in #twisted looking at 
<http://twistedmatrix.com/documents/8.1.0/api/twisted.internet._sslverify.html> 
when they should be looking at 
<http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.ssl.html>, 
or 
<http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.iocpreactor.tcp.Server.html> 
when they should be looking at 
<http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.interfaces.IReactorTCP.html>. 
In the long term, we need to write both better documentation and more 
code that gets these people back onto the right track.

I know I've used a few libraries which provided exactly this kind of 
feedback and it was very satisfying and educational.  It's really an 
art, one that's difficult to master, and I don't know that I really know 
the right way to do it in the general case.  The danger that comes along 
with doing it wrong is very nicely explained here: 
http://blogs.msdn.com/oldnewthing/archive/2008/10/06/8969399.aspx - if 
you make an API which doesn't work except for the "special" cases, then 
everyone just starts using the "special" version.



From stephen.c.waterbury at nasa.gov  Thu Nov  6 16:30:34 2008
From: stephen.c.waterbury at nasa.gov (Stephen Waterbury)
Date: Thu, 06 Nov 2008 16:30:34 -0500
Subject: wxreactor [was Re: [Twisted-Python] Silencing PotentialZombieWarning]
In-Reply-To: <356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>
References: <356e30830811060625g1827df65g59d60185b6257d5e@mail.gmail.com>
	<356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>
Message-ID: <491361FA.80105@nasa.gov>

Reza Lotun wrote:
> I'm working on a multi-platform (win32 and os x) wx + Twisted app,
> where I've found the best solution is to run both in a separate thread
> - the main thread is wx, and the other is Twisted. It basically works
> like a charm (though I'd be interested in hearing about other
> approaches. I've also played with wxreactor way back, but didn't find
> it as stable).

I'd be interested to know what wxreactor symptoms of non-stability
you saw.

A few months ago, the wxreactor apps wxdemo.py and wxacceptance.py on
ubuntu worked, but if I added a file dialog to wxacceptance.py, invoking
the file dialog caused the application to hang.

In my most recent experiments, wxdemo.py just hangs but
wxacceptance.py works fine, even with the addition of a file dialog
-- presumably due to some recent change in wx, since wxreactor has not
been modified recently.  The environment I'm using is:

* ubuntu hardy, fully updated
* Python 2.5.2
* wxPython 2.8.9.1-0 (python-wxgtk2.8 from http://apt.wxwidgets.org/)
* Twisted svn trunk rev 25323.

I've attached an example (wxacceptancemod.py) that has the
file dialog that used to cause the lock-up, sets the helloWorld loop
interval to 4 seconds, and closes the gui window immediately when
it receives the DoExit event (by calling self.Show(False)) --
a friendlier behavior than the original wxacceptance.py, which
leaves the gui window hanging until the last reactor iteration
completes (kinda misses the point of being asynchronous ;),
although this only becomes noticeable if the helloWorld loop interval
is set to more than a second or two.

Interestingly, wxdemo.py works if the helloWorld loop from
wxacceptance.py is added to it, and wxacceptance.py ceases to work
if the callLater loop is removed.  The looping interval used is
arbitrary, so it seems the reactor stack needs to stay loaded with 
something or it hangs.

Although it's not pretty, I don't mind adding a non-printing callLater
loop to my code so that wxreactor works, but of course it would be
nice to know what's going on. ;)

Do others see these behaviors if you run these examples?

Steve
-------------- next part --------------
A non-text attachment was scrubbed...
Name: wxacceptancemod.py
Type: text/x-python
Size: 3619 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081106/d6988e4a/attachment.py 

From stephen.c.waterbury at nasa.gov  Thu Nov  6 16:35:38 2008
From: stephen.c.waterbury at nasa.gov (Stephen Waterbury)
Date: Thu, 06 Nov 2008 16:35:38 -0500
Subject: wxreactor [was Re: [Twisted-Python] Silencing
	PotentialZombieWarning]
In-Reply-To: <491361FA.80105@nasa.gov>
References: <356e30830811060625g1827df65g59d60185b6257d5e@mail.gmail.com>	<356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>
	<491361FA.80105@nasa.gov>
Message-ID: <4913632A.60802@nasa.gov>

Stephen Waterbury wrote:
> A few months ago, the wxreactor apps wxdemo.py and wxacceptance.py on
> ubuntu worked ...

I meant "worked on ubuntu", not "on ubuntu worked" -- the examples
are in twisted's doc/core/examples, nothing unique to ubuntu. ;)

Steve




From jml at mumak.net  Fri Nov  7 05:30:43 2008
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 7 Nov 2008 11:30:43 +0100
Subject: [Twisted-Python] making twisted provide good feedback (was Re:
	Having reactor run at the main thread...)
In-Reply-To: <20081106202253.6400.1138909160.divmod.xquotient.1335@weber.divmod.com>
References: <2f5ea7490811041220j64d2ad63h3b09e35f14680048@mail.gmail.com>
	<20081104224833.GJ12038@steerpike.home.puzzling.org>
	<2f5ea7490811041959k436c6a63he6b5a88d0cb4e75d@mail.gmail.com>
	<20081105041108.GL12038@steerpike.home.puzzling.org>
	<20081105150823.GB2561@mcnabbs.org>
	<20081105192431.6400.884481684.divmod.xquotient.1050@weber.divmod.com>
	<20081105211925.GC3797@mcnabbs.org>
	<20081106025537.6400.378398420.divmod.xquotient.1281@weber.divmod.com>
	<d06a5cd30811060148q1cccf144g438dc29b70bb7bcf@mail.gmail.com>
	<20081106202253.6400.1138909160.divmod.xquotient.1335@weber.divmod.com>
Message-ID: <d06a5cd30811070230w1e4156aao3f23cdd9b92b125d@mail.gmail.com>

On Thu, Nov 6, 2008 at 9:22 PM,  <glyph at divmod.com> wrote:
> (Moving this off the twisted-web list because it is of more general interest
> and contains nothing web-specific.)
>
> On 09:48 am, jml at mumak.net wrote:
>>
>> On the other hand, there's a related invalid argument that gets used a
>> lot by library and framework authors: "if we provide X, people might
>> misuse it, so we should not provide X". This argument is also bogus
>> (that way lies Java). Provide safe, well-documented alternatives for
>> the abusers and let those who want to shoot themselves in the foot do
>> so: sometimes they might actually know better than you.
>
> I find it peculiar that you think this is Java's disease.  My perspective is
> that Java is unpleasant because it is remarkably tedious, redundant, and
> inconsistent, not because it lacks functionality.  If anything, it's a mess
> of functionality, and there are too many ways to do the same thing.
>

I was thinking of operator overloading and multiple inheritance,
actually. The rationale for not including them in the language was
that they are often abused. {{fact}}

> Twisted should provide excellent support for valid use-cases, no matter how obscure.

+1

> On the other hand, it's equally frustrating to use a library where the
> incredibly obscure "you probably don't need this" and the 99%-of-the- time
> positive-path APIs are listed, without any particular ordering, in one giant
> flat list.

Yes. This is a documentation (or perhaps a navigation) problem. I
simply wanted to make the point that I find "don't provide X because
people might abuse it" unconvincing. I don't even think you were
making that point, but I really really want to be clear that it's not
a good one.

Also, if you haven't read it, you might enjoy Rusty's interface guide:
http://sourcefrog.net/weblog/software/aesthetics/interface-levels.html

jml



From jeff.dyke at gmail.com  Fri Nov  7 08:29:50 2008
From: jeff.dyke at gmail.com (Jeff Dyke)
Date: Fri, 7 Nov 2008 08:29:50 -0500
Subject: [Twisted-Python] freeing the reactor to do other jobs
Message-ID: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>

I'm using the XMLRPC server in twisted and a few methods call other,
sometimes long running, functions/methods.  I'm trying to get my brain
around how to free the reactor to respond to other requests while this
is happening.

A scenario.  A call is made to the server, which selects say 10K rows
from a db and needs to check each row against a table and if they do
not exist, insert them.

""" Oversimplified version of the process """
def getData(self,user_id):
    rows = self.getUserData(user_id)
    for row in rows:
        if self.existsInQueue(row['some_id']):
            continue
        else:
             self.insertQueue(row)


I want the caller to wait on a result from this process, but I also
want the reactor to be able to handle other requests as they come in.
This function is not directly registered in the xmlrpc server with
xmlrpc_getData, but is called by that type of method after validation
that it is allowed to run in this context.

What i've seen when this has thousands of rows to process is that the
reactor is tied up and can not respond to requests until complete.
Which obviously leads to me believe that I'm not using twisted
correctly/to its potential.  I have read the deferred/asynchronous doc
pages...but am having a hard time getting my head around it and would
appreciate any advice.

When i don't specifically need the caller to get the final result,
i've been suing deferToThread, but feel in some of those instances i
could possibly write better code, rather then sending to a thread.

Thanks
jd



From reza at getpeer.com  Fri Nov  7 08:56:53 2008
From: reza at getpeer.com (Reza Lotun)
Date: Fri, 7 Nov 2008 13:56:53 +0000
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
References: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
Message-ID: <356e30830811070556v3c99a8bn1974c44054d5cb4f@mail.gmail.com>

On Fri, Nov 7, 2008 at 1:29 PM, Jeff Dyke <jeff.dyke at gmail.com> wrote:
> I want the caller to wait on a result from this process, but I also
> want the reactor to be able to handle other requests as they come in.
> This function is not directly registered in the xmlrpc server with
> xmlrpc_getData, but is called by that type of method after validation
> that it is allowed to run in this context.

Hi Jeff,

I'll let others tackle your specific twisted-database integration
problem, but here are a few general rules of them I've found useful
when working with twisted, sqlite and wx.

- Any long-computations will block your app in general because of the
GIL. Threading won't solve this (unless you move the compute intensive
code into a C-module which explicitly releases the GIL, which can be
hairy). Investigate using reactor.spawnProcess to spawn external
processes to do any compute intensive stuff.

- Try using a database library which releases the GIL - I've found
great gains by using apsw instead of the built-in sqlite3 library

- To integrate I/O blocking operations, it's useful to use
deferToThread - which will block on the operation in another thread in
Twisted's threadpool. Just make sure if you're in other threads you
*schedule* calls to the main twisted thread via reactor.callFromThread
(and similarly in you're running wx and twisted in separate threads
via wx.CallAfter)

I hope this is useful.

Cheers,
Reza


-- 
Reza Lotun
Senior Software Engineer
GetPeer Limited
reza at getpeer.com



From exarkun at divmod.com  Fri Nov  7 08:59:23 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 7 Nov 2008 08:59:23 -0500
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
Message-ID: <20081107135923.29191.699130987.divmod.quotient.51279@ohm>

On Fri, 7 Nov 2008 08:29:50 -0500, Jeff Dyke <jeff.dyke at gmail.com> wrote:
>I'm using the XMLRPC server in twisted and a few methods call other,
>sometimes long running, functions/methods.  I'm trying to get my brain
>around how to free the reactor to respond to other requests while this
>is happening.
>
>A scenario.  A call is made to the server, which selects say 10K rows
>from a db and needs to check each row against a table and if they do
>not exist, insert them.
>
>""" Oversimplified version of the process """
>def getData(self,user_id):
>    rows = self.getUserData(user_id)
>    for row in rows:
>        if self.existsInQueue(row['some_id']):
>            continue
>        else:
>             self.insertQueue(row)
>
>
>I want the caller to wait on a result from this process, but I also
>want the reactor to be able to handle other requests as they come in.
>This function is not directly registered in the xmlrpc server with
>xmlrpc_getData, but is called by that type of method after validation
>that it is allowed to run in this context.
>
>What i've seen when this has thousands of rows to process is that the
>reactor is tied up and can not respond to requests until complete.
>Which obviously leads to me believe that I'm not using twisted
>correctly/to its potential.  I have read the deferred/asynchronous doc
>pages...but am having a hard time getting my head around it and would
>appreciate any advice.
>
>When i don't specifically need the caller to get the final result,
>i've been suing deferToThread, but feel in some of those instances i
>could possibly write better code, rather then sending to a thread.

One thing you might not have discovered yet is that even if you use
deferToThread, you can still give the final result to the caller.  The
XML-RPC support in Twisted supports Deferreds - meaning that if an
xmlrpc_ method returns a Deferred, then no response is sent to the
XML-RPC request until that Deferred fires, and then the result is sent
as the XML-RPC response.

Since most libraries for interacting with RDBMs using SQL present a
blocking interface, Twisted includes twisted.internet.adbapi, a thin
layer on top of DB-API 2.0 which runs all of the blocking stuff in a
threadpool.  If most of your time is being spent waiting for rows from
a database, then adbapi might help you out, and since adbapi gives you
Deferreds, this is trivial to integrate into an XML-RPC server.

For other blocking tasks - it depends.  If the task is blocking on an
event, then transforming that event into a callback (probably using a
Deferred, since Deferreds are a good tool to use to manage callbacks)
and then putting your code into a callback instead of blocking on the
event is the right thing to do.  How exactly you turn a particular
event into a callback depends on the details of the event, though.  If
the blocking task is CPU bound, then running it in another thread or
another process can make sense.  It's also possible to insert explicit
control-flow yields into the implementation of the CPU bound task (at
least, sometimes) so that the reactor can service other event sources
as the calculation progresses.

Jean-Paul



From p.mayers at imperial.ac.uk  Fri Nov  7 09:00:14 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 07 Nov 2008 14:00:14 +0000
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
References: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
Message-ID: <491449EE.5010408@imperial.ac.uk>

Jeff Dyke wrote:
> I'm using the XMLRPC server in twisted and a few methods call other,
> sometimes long running, functions/methods.  I'm trying to get my brain
> around how to free the reactor to respond to other requests while this
> is happening.
> 
> A scenario.  A call is made to the server, which selects say 10K rows
> from a db and needs to check each row against a table and if they do
> not exist, insert them.
> 
> """ Oversimplified version of the process """
> def getData(self,user_id):
>     rows = self.getUserData(user_id)
>     for row in rows:
>         if self.existsInQueue(row['some_id']):
>             continue
>         else:
>              self.insertQueue(row)

You could do something like this, using twisted.internet.task.Cooperator


def batch(iterable, size):
     sourceiter = iter(iterable)
     while True:
         batchiter = itertools.islice(sourceiter, size)
         yield itertools.chain([batchiter.next()], batchiter)

coop = twisted.internet.task.Cooperator()

def _gotdata(rows):
     d = defer.Deferred()
     def worker():
         # only do 10 rows at a time, then yield control
         for rowg in batch(rows, 10):
             for row in rowg:
                 # do something
             yield
         d.callback(True)
     coop.coiterate(worker())
     return d

class foo:
     def xmlrpc_thing(self, userid):
         d = getUserData(userid)
         d.addCallback(_gotdata)
         return d

You can so similar things with defer.inlineCallbacks, or even just plain 
deferreds if you want to work hard at it.



From exarkun at divmod.com  Fri Nov  7 09:07:10 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 7 Nov 2008 09:07:10 -0500
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <356e30830811070556v3c99a8bn1974c44054d5cb4f@mail.gmail.com>
Message-ID: <20081107140710.29191.172519003.divmod.quotient.51284@ohm>

On Fri, 7 Nov 2008 13:56:53 +0000, Reza Lotun <reza at getpeer.com> wrote:
>On Fri, Nov 7, 2008 at 1:29 PM, Jeff Dyke <jeff.dyke at gmail.com> wrote:
>> I want the caller to wait on a result from this process, but I also
>> want the reactor to be able to handle other requests as they come in.
>> This function is not directly registered in the xmlrpc server with
>> xmlrpc_getData, but is called by that type of method after validation
>> that it is allowed to run in this context.
>
>Hi Jeff,
>
>I'll let others tackle your specific twisted-database integration
>problem, but here are a few general rules of them I've found useful
>when working with twisted, sqlite and wx.
>
>- Any long-computations will block your app in general because of the
>GIL. Threading won't solve this (unless you move the compute intensive
>code into a C-module which explicitly releases the GIL, which can be
>hairy). Investigate using reactor.spawnProcess to spawn external
>processes to do any compute intensive stuff.

Long-running computations generally only block the thread they're
running in.  This shouldn't be surprising, since there's not really
any difference between a function that does a "computation" and a
function which is somehow just "regular" Python code and isn't a
"computation".  You can find details of how threading works in
Python in the Python documentation, but briefly, after N bytecodes
are executed, the VM running in thread A releases the GIL (required
to execute bytecode) and any other thread has a chance to acquire it.
By default, N is 100 (enough to multiply about 30 numbers together).

It's only when you bring C into the picture that you have to think
about explicitly releasing the GIL to prevent one thread from blocking
all the rest.  As long as your program is all Python, all your threads
will basically play nicely together (an exception to this seems to be
time.sleep() on Windows sometimes, which many people find blocks all
threads inexplicably - but time.time is implemented in C, so this really
just proves the point :).

Jean-Paul



From dripton at ripton.net  Fri Nov  7 10:26:17 2008
From: dripton at ripton.net (David Ripton)
Date: Fri, 7 Nov 2008 07:26:17 -0800
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
References: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
Message-ID: <20081107152617.GA17614@vidar.dreamhost.com>

On 2008.11.07 08:29:50 -0500, Jeff Dyke wrote:
> I'm using the XMLRPC server in twisted and a few methods call other,
> sometimes long running, functions/methods.  I'm trying to get my brain
> around how to free the reactor to respond to other requests while this
> is happening.

There are two ways:

1. Instead, write functions that don't block for long, but instead do a
little bit of work, schedule a call to do the rest of the work, and then
return, so the reactor can have the CPU back.

2. Farm out big chunks of work that you can't or don't want to split up
to a subprocess or thread.

> A scenario.  A call is made to the server, which selects say 10K rows
> from a db and needs to check each row against a table and if they do
> not exist, insert them.
> 
> """ Oversimplified version of the process """
> def getData(self,user_id):
>     rows = self.getUserData(user_id)
>     for row in rows:
>         if self.existsInQueue(row['some_id']):
>             continue
>         else:
>              self.insertQueue(row)

If the long-running work is in a blocking database call, and the
database does not support a less-blocking version and you can't change
the database, then you probably want to use deferToThread for that part.

And then move the rest of getData into a separate function, that gets
called in a callback after getUserData finishes.

def getData(self,user_id):
    deferred1 = reactor.deferToThread(self.getUserData, user_id)
    deferred1.addCallback(self._addRowsToQueue)
    deferred1.addErrback(self._getUserDataFailed)

If adding the rows to the queue is fast, then you're done.  Just move
everything after getUserData into _addRowsToQueue.

def _addRowsToQueue(self, rows):
    for row in rows:
        if not self.existsInQueue(row['some_id']):
            self.insertQueue(row)

But if adding all the rows to the queue in one function call is too
slow, then you need to split it up.  It's a loop, so splitting it up is
easy.  Here's the simple scheduling-only version:

def _addSomeRowsToQueue(self, rows):
    if rows:
        row = rows.pop(0)
        if not self.existsInQueue(row['some_id']):
            self.insertQueue(row)
        reactor.callLater(0, self._addSomeRowsToQueue, rows)

Adding deferreds to the mix so that a callback function is called when
all the rows are added to the queue is the next step, after you
understand how this much works.

> I want the caller to wait on a result from this process, but I also
> want the reactor to be able to handle other requests as they come in.

I hope you can live with "I want something to happen using the results
from this process", rather than "I want the caller to wait on a result
from this process."

You can simulate blocking flow somewhat with deferredGenerator or
inlineCallbacks, but I recommend sticking to the old way at first.
It's simpler and less magical.

-- 
David Ripton    dripton at ripton.net



From nathan.stocks at gmail.com  Fri Nov  7 12:08:18 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Fri, 7 Nov 2008 10:08:18 -0700
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <6ce0ac130811050918xb57294fv4f5da0ef05b489a1@mail.gmail.com>
References: <CD5FB5F4-EFEC-45E2-9F06-688A98D4E5E0@blackslens.com>
	<20081105161921.29191.1446923850.divmod.quotient.50181@ohm>
	<6ce0ac130811050918xb57294fv4f5da0ef05b489a1@mail.gmail.com>
Message-ID: <96c9d6a80811070908w5f7573e3ief969c9ce86001f7@mail.gmail.com>

On Wed, Nov 5, 2008 at 10:18 AM, Brian Granger <ellisonbg.net at gmail.com> wrote:
> I also highly recommend Foolscap (http://foolscap.lothar.com/trac),
> which was designed as a next generation PB-like RPC protocol.  Some
> advantages of Foolscap:

Is Foolscap actually going to be pulled into the actual Twisted tree
any time soon?  I've wanted to try it out for some of our projects,
but one of our project goals is minimizing external dependencies...

~ Nathan



From exarkun at divmod.com  Fri Nov  7 12:22:05 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 7 Nov 2008 12:22:05 -0500
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <96c9d6a80811070908w5f7573e3ief969c9ce86001f7@mail.gmail.com>
Message-ID: <20081107172205.20272.1272249608.divmod.quotient.53@ohm>

On Fri, 7 Nov 2008 10:08:18 -0700, Nathan <nathan.stocks at gmail.com> wrote:
>On Wed, Nov 5, 2008 at 10:18 AM, Brian Granger <ellisonbg.net at gmail.com> wrote:
>> I also highly recommend Foolscap (http://foolscap.lothar.com/trac),
>> which was designed as a next generation PB-like RPC protocol.  Some
>> advantages of Foolscap:
>
>Is Foolscap actually going to be pulled into the actual Twisted tree
>any time soon?  I've wanted to try it out for some of our projects,
>but one of our project goals is minimizing external dependencies...

As yet, there has been no discussion about doing this.  That probably
precludes it from happning "soon", at least.

Jean-Paul



From jeff.dyke at gmail.com  Fri Nov  7 12:59:52 2008
From: jeff.dyke at gmail.com (Jeff Dyke)
Date: Fri, 7 Nov 2008 12:59:52 -0500
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <20081107152617.GA17614@vidar.dreamhost.com>
References: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
	<20081107152617.GA17614@vidar.dreamhost.com>
Message-ID: <8496caf30811070959i78263341i5517e38f83357fac@mail.gmail.com>

On Fri, Nov 7, 2008 at 10:26 AM, David Ripton <dripton at ripton.net> wrote:
> On 2008.11.07 08:29:50 -0500, Jeff Dyke wrote:
>> I'm using the XMLRPC server in twisted and a few methods call other,
>> sometimes long running, functions/methods.  I'm trying to get my brain
>> around how to free the reactor to respond to other requests while this
>> is happening.
>
> There are two ways:
>
> 1. Instead, write functions that don't block for long, but instead do a
> little bit of work, schedule a call to do the rest of the work, and then
> return, so the reactor can have the CPU back.
>
> 2. Farm out big chunks of work that you can't or don't want to split up
> to a subprocess or thread.
>
>> A scenario.  A call is made to the server, which selects say 10K rows
>> from a db and needs to check each row against a table and if they do
>> not exist, insert them.
>>
>> """ Oversimplified version of the process """
>> def getData(self,user_id):
>>     rows = self.getUserData(user_id)
>>     for row in rows:
>>         if self.existsInQueue(row['some_id']):
>>             continue
>>         else:
>>              self.insertQueue(row)
>
> If the long-running work is in a blocking database call, and the
> database does not support a less-blocking version and you can't change
> the database, then you probably want to use deferToThread for that part.
>
> And then move the rest of getData into a separate function, that gets
> called in a callback after getUserData finishes.
>
> def getData(self,user_id):
>    deferred1 = reactor.deferToThread(self.getUserData, user_id)
>    deferred1.addCallback(self._addRowsToQueue)
>    deferred1.addErrback(self._getUserDataFailed)
>
> If adding the rows to the queue is fast, then you're done.  Just move
> everything after getUserData into _addRowsToQueue.
>
> def _addRowsToQueue(self, rows):
>    for row in rows:
>        if not self.existsInQueue(row['some_id']):
>            self.insertQueue(row)
>
> But if adding all the rows to the queue in one function call is too
> slow, then you need to split it up.  It's a loop, so splitting it up is
> easy.  Here's the simple scheduling-only version:
>
> def _addSomeRowsToQueue(self, rows):
>    if rows:
>        row = rows.pop(0)
>        if not self.existsInQueue(row['some_id']):
>            self.insertQueue(row)
>        reactor.callLater(0, self._addSomeRowsToQueue, rows)
>
> Adding deferreds to the mix so that a callback function is called when
> all the rows are added to the queue is the next step, after you
> understand how this much works.
>
>> I want the caller to wait on a result from this process, but I also
>> want the reactor to be able to handle other requests as they come in.
>
> I hope you can live with "I want something to happen using the results
> from this process", rather than "I want the caller to wait on a result
> from this process."
>
> You can simulate blocking flow somewhat with deferredGenerator or
> inlineCallbacks, but I recommend sticking to the old way at first.
> It's simpler and less magical.
>
> --
> David Ripton    dripton at ripton.net


Thanks all for the input... this will be a great help.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From nathan.stocks at gmail.com  Fri Nov  7 16:12:57 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Fri, 7 Nov 2008 14:12:57 -0700
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <20081107172205.20272.1272249608.divmod.quotient.53@ohm>
References: <96c9d6a80811070908w5f7573e3ief969c9ce86001f7@mail.gmail.com>
	<20081107172205.20272.1272249608.divmod.quotient.53@ohm>
Message-ID: <96c9d6a80811071312i762ada13raff15fbe2d75b293@mail.gmail.com>

On Fri, Nov 7, 2008 at 10:22 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Fri, 7 Nov 2008 10:08:18 -0700, Nathan <nathan.stocks at gmail.com> wrote:
>> Is Foolscap actually going to be pulled into the actual Twisted tree
>> any time soon?  I've wanted to try it out for some of our projects,
>> but one of our project goals is minimizing external dependencies...
>
> As yet, there has been no discussion about doing this.  That probably
> precludes it from happning "soon", at least.
>
> Jean-Paul

Ok, that's good to know.  I may just have to buckle-down and accept
one more dependency then, because I want to try out that large-object
support ...

~ Nathan



From andrew at fluther.com  Sat Nov  8 03:27:27 2008
From: andrew at fluther.com (Andrew McClain)
Date: Sat, 8 Nov 2008 00:27:27 -0800
Subject: [Twisted-Python] Running a client within a thread... do I need to
	rewrite?
Message-ID: <946e65500811080027l4431ef0fre3305ee44c5188ed@mail.gmail.com>

I have an existing twisted client connecting to a jabber server in order to
send notifications for our web app.
I'd like to fold in a STOMP message client into the my existing code, so I
can do something like this:

web app --> STOMP queue --> STOMP client --> jabber client --> jabber server

Problem is, the STOMP client library I'm using creates a socket, spawns a
thread, and listens, calling a callback method when it gets information.

In order to integrate this with my twisted jabber client, do I need to
rewrite the whole client using deferreds? Or could I use something like
defertothread to encapsulate the STOMP client?

Best, Andrew
-- 
--------
Tap the collective.
http://www.fluther.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081108/7084e269/attachment.htm 

From thejayjay at gmail.com  Sat Nov  8 22:15:39 2008
From: thejayjay at gmail.com (James Joplin)
Date: Sat, 8 Nov 2008 22:15:39 -0500
Subject: [Twisted-Python] Import TypeError
Message-ID: <d9b9b1220811081915sab5f990v3eae011e7f11ac93@mail.gmail.com>

I've been doing some embedded python work and everything has been working
like a charm thusfar!  Twisted has saved us tons of work, hats off to the
development team.

I have been having issues with shutting down twisted completely (I think).
 Even upon executing Py_Finalize or Py_EndInterpreter as necessary upon
re-entering our browser plugin we hit an exception during twisted import.


Here is my traceback :

Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "ourCode.py", line 8, in <module>
    from twisted.spread import pb
  File "C:\Python25\lib\site-packages\twisted\spread\pb.py", line 69, in
<module>
    from zope.interface import implements, Interface
  File "C:\Python25\lib\site-packages\zope\interface\__init__.py", line 58,
in <module>
    _wire()
  File "C:\Python25\lib\site-packages\zope\interface\interface.py", line
809, in _wire
    classImplements(Attribute, IAttribute)
  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
461, in classImplements
    spec = implementedBy(cls)
  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
332, in implementedByFallback
    if isinstance(spec, Implements):
TypeError: 'NoneType' object is not callable


Changing the order of imports hasn't seemed to matter, looks to me like
something in zope init blows up if it's already loaded.

Is there a safe way to make sure the threads are dead?  To clean imports
out?  Anything?  I haven't been able to find much documentation to help me
overcome the problem and I CANNOT forcibly unload our app from browser
memory.

If the C++ code we are using for startup / shutdown let me know and I will
post it as well.


Regards,

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081108/0307e212/attachment.htm 

From exarkun at twistedmatrix.com  Sun Nov  9 00:05:25 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Nov 2008 05:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1226207125.18.1692109534@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081109/54e50d34/attachment.htm 

From twisted at ralphm.ik.nu  Sun Nov  9 01:55:04 2008
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Sun, 9 Nov 2008 07:55:04 +0100
Subject: [Twisted-Python] Running a client within a thread... do I need to
	rewrite?
In-Reply-To: <946e65500811080027l4431ef0fre3305ee44c5188ed@mail.gmail.com>
References: <946e65500811080027l4431ef0fre3305ee44c5188ed@mail.gmail.com>
Message-ID: <20081109065504.GA17695@ik.nu>

On Sat, Nov 08, 2008 at 12:27:27AM -0800, Andrew McClain wrote:
> [..]
> 
> In order to integrate this with my twisted jabber client, do I need to rewrite
> the whole client using deferreds? Or could I use something like defertothread
> to encapsulate the STOMP client?

Maybe you can use txStomp, a Twisted implementation of Stomp.

-- 
Groetjes,

ralphm



From exarkun at divmod.com  Sun Nov  9 08:52:30 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 9 Nov 2008 08:52:30 -0500
Subject: [Twisted-Python] Import TypeError
In-Reply-To: <d9b9b1220811081915sab5f990v3eae011e7f11ac93@mail.gmail.com>
Message-ID: <20081109135230.20272.1887878769.divmod.quotient.1011@ohm>

On Sat, 8 Nov 2008 22:15:39 -0500, James Joplin <thejayjay at gmail.com> wrote:
>I've been doing some embedded python work and everything has been working
>like a charm thusfar!  Twisted has saved us tons of work, hats off to the
>development team.
>
>I have been having issues with shutting down twisted completely (I think).
> Even upon executing Py_Finalize or Py_EndInterpreter as necessary upon
>re-entering our browser plugin we hit an exception during twisted import.
>
>
>Here is my traceback :
>
>Traceback (most recent call last):
>  File "<string>", line 1, in <module>
>  File "ourCode.py", line 8, in <module>
>    from twisted.spread import pb
>  File "C:\Python25\lib\site-packages\twisted\spread\pb.py", line 69, in
><module>
>    from zope.interface import implements, Interface
>  File "C:\Python25\lib\site-packages\zope\interface\__init__.py", line 58,
>in <module>
>    _wire()
>  File "C:\Python25\lib\site-packages\zope\interface\interface.py", line
>809, in _wire
>    classImplements(Attribute, IAttribute)
>  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
>461, in classImplements
>    spec = implementedBy(cls)
>  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
>332, in implementedByFallback
>    if isinstance(spec, Implements):
>TypeError: 'NoneType' object is not callable
>
>
>Changing the order of imports hasn't seemed to matter, looks to me like
>something in zope init blows up if it's already loaded.
>
>Is there a safe way to make sure the threads are dead?  To clean imports
>out?  Anything?  I haven't been able to find much documentation to help me
>overcome the problem and I CANNOT forcibly unload our app from browser
>memory.

Does CPython even support what you're trying to do?  As I recall, while
the interpreter finalization APIs mostly clean things up, they do leak
some resources.  On top of that, application-level finalization semantics
in CPython (that is, what happens to the Python code) are very unfriendly
and not very well defined.  For example, as you see, the globals of every
module are all reset to None, so any code that uses globals will probably
break.

>
>If the C++ code we are using for startup / shutdown let me know and I will
>post it as well.
>

I'm not sure, but I don't think the problem you're seeing actually has
anything in particular to do with Twisted or Zope Interface.  I think it's
due to CPython's initialization and finalization behavior.  Can you produce
a similar exception by importing some trivial stand-alone Python code that
uses globals in a similar way?

Jean-Paul



From thejayjay at gmail.com  Sun Nov  9 14:05:32 2008
From: thejayjay at gmail.com (James Joplin)
Date: Sun, 9 Nov 2008 14:05:32 -0500
Subject: [Twisted-Python] Import TypeError
In-Reply-To: <20081109135230.20272.1887878769.divmod.quotient.1011@ohm>
References: <d9b9b1220811081915sab5f990v3eae011e7f11ac93@mail.gmail.com>
	<20081109135230.20272.1887878769.divmod.quotient.1011@ohm>
Message-ID: <d9b9b1220811091105u407dc5dbsd1e7d469dd8e6be@mail.gmail.com>

I believe you are correct.  From what literature and other forms of
documentation I could find online counting on py_finalize() to cleanup
everything for you is not reliable at all.  Static members, globals, and
other "things" may stick around if threads aren't done and who knows what
else.  From what I could gather py_finalize() doesn't even kill child
threads, yikes.
I had done a basic test case with other modules than twisted included and I
was not getting import errors.

I ended up just engineering around the problem and left the
python interpreter running.  I had several python exports that needed to be
visible to c and my scripting language and I just used a data structure to
tie the callable python functions to what I exported them as.  Upon
re-entering the dll I just check to see if we have loaded python and if we
have just re-populate my scripting language name space.  Works like a charm.


Thanks for the help!  I didn't think this was your fault to begin with but
it was nice to have some re-assurance.


Regards,

James


On Sun, Nov 9, 2008 at 8:52 AM, Jean-Paul Calderone <exarkun at divmod.com>wrote:

> On Sat, 8 Nov 2008 22:15:39 -0500, James Joplin <thejayjay at gmail.com>
> wrote:
>
>> I've been doing some embedded python work and everything has been working
>> like a charm thusfar!  Twisted has saved us tons of work, hats off to the
>> development team.
>>
>> I have been having issues with shutting down twisted completely (I think).
>> Even upon executing Py_Finalize or Py_EndInterpreter as necessary upon
>> re-entering our browser plugin we hit an exception during twisted import.
>>
>>
>> Here is my traceback :
>>
>> Traceback (most recent call last):
>>  File "<string>", line 1, in <module>
>>  File "ourCode.py", line 8, in <module>
>>   from twisted.spread import pb
>>  File "C:\Python25\lib\site-packages\twisted\spread\pb.py", line 69, in
>> <module>
>>   from zope.interface import implements, Interface
>>  File "C:\Python25\lib\site-packages\zope\interface\__init__.py", line 58,
>> in <module>
>>   _wire()
>>  File "C:\Python25\lib\site-packages\zope\interface\interface.py", line
>> 809, in _wire
>>   classImplements(Attribute, IAttribute)
>>  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
>> 461, in classImplements
>>   spec = implementedBy(cls)
>>  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
>> 332, in implementedByFallback
>>   if isinstance(spec, Implements):
>> TypeError: 'NoneType' object is not callable
>>
>>
>> Changing the order of imports hasn't seemed to matter, looks to me like
>> something in zope init blows up if it's already loaded.
>>
>> Is there a safe way to make sure the threads are dead?  To clean imports
>> out?  Anything?  I haven't been able to find much documentation to help me
>> overcome the problem and I CANNOT forcibly unload our app from browser
>> memory.
>>
>
> Does CPython even support what you're trying to do?  As I recall, while
> the interpreter finalization APIs mostly clean things up, they do leak
> some resources.  On top of that, application-level finalization semantics
> in CPython (that is, what happens to the Python code) are very unfriendly
> and not very well defined.  For example, as you see, the globals of every
> module are all reset to None, so any code that uses globals will probably
> break.
>
>
>> If the C++ code we are using for startup / shutdown let me know and I will
>> post it as well.
>>
>>
> I'm not sure, but I don't think the problem you're seeing actually has
> anything in particular to do with Twisted or Zope Interface.  I think it's
> due to CPython's initialization and finalization behavior.  Can you produce
> a similar exception by importing some trivial stand-alone Python code that
> uses globals in a similar way?
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081109/72f23ef8/attachment.htm 

From nebpro at gmail.com  Tue Nov 11 12:42:07 2008
From: nebpro at gmail.com (Benny)
Date: Tue, 11 Nov 2008 12:42:07 -0500
Subject: [Twisted-Python] checking connection
Message-ID: <e5f41cb30811110942w33ae263crb05e3b2b53a33cf4@mail.gmail.com>

Hi,
I have been trying to find out how to keep checking the connection once the
connection is made. Says I have successfully connected to the server, and i
want to maintain and check that connection. How can i do that?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081111/5d5feddb/attachment.htm 

From exarkun at divmod.com  Tue Nov 11 13:43:13 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 11 Nov 2008 13:43:13 -0500
Subject: [Twisted-Python] checking connection
In-Reply-To: <e5f41cb30811110942w33ae263crb05e3b2b53a33cf4@mail.gmail.com>
Message-ID: <20081111184313.20272.1718049994.divmod.quotient.3762@ohm>

On Tue, 11 Nov 2008 12:42:07 -0500, Benny <nebpro at gmail.com> wrote:
>Hi,
>I have been trying to find out how to keep checking the connection once the
>connection is made. Says I have successfully connected to the server, and i
>want to maintain and check that connection. How can i do that?
>

What does it mean to "check" a connection?

Jean-Paul



From nebpro at gmail.com  Tue Nov 11 15:41:37 2008
From: nebpro at gmail.com (Benny)
Date: Tue, 11 Nov 2008 15:41:37 -0500
Subject: [Twisted-Python] checking connection
In-Reply-To: <20081111184313.20272.1718049994.divmod.quotient.3762@ohm>
References: <e5f41cb30811110942w33ae263crb05e3b2b53a33cf4@mail.gmail.com>
	<20081111184313.20272.1718049994.divmod.quotient.3762@ohm>
Message-ID: <e5f41cb30811111241p175cd2f9pd0f24db520fb0355@mail.gmail.com>

Thank you very much for the response. I am still new with twisted so please
bare with me.
What I mean by checking connection is something like instant messenger (i.e.
pidgin) do in some interval time. Pidgin is checking for internet connection
every xx minutes to see if the computer still connected to the internet. So
I am wondering if twisted can do the same thing. Once it is connected (i.e.
connectionMade), can we tell if that connection still alive or not every xx
minutes? Is twisted maintain persistent connection?



On Tue, Nov 11, 2008 at 1:43 PM, Jean-Paul Calderone <exarkun at divmod.com>wrote:

> On Tue, 11 Nov 2008 12:42:07 -0500, Benny <nebpro at gmail.com> wrote:
>
>> Hi,
>> I have been trying to find out how to keep checking the connection once
>> the
>> connection is made. Says I have successfully connected to the server, and
>> i
>> want to maintain and check that connection. How can i do that?
>>
>>
> What does it mean to "check" a connection?
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081111/b280a5a1/attachment.htm 

From exarkun at divmod.com  Tue Nov 11 17:08:26 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 11 Nov 2008 17:08:26 -0500
Subject: [Twisted-Python] checking connection
In-Reply-To: <e5f41cb30811111241p175cd2f9pd0f24db520fb0355@mail.gmail.com>
Message-ID: <20081111220826.20272.1309200409.divmod.quotient.3853@ohm>

On Tue, 11 Nov 2008 15:41:37 -0500, Benny <nebpro at gmail.com> wrote:
>Thank you very much for the response. I am still new with twisted so please
>bare with me.
>What I mean by checking connection is something like instant messenger (i.e.
>pidgin) do in some interval time. Pidgin is checking for internet connection
>every xx minutes to see if the computer still connected to the internet. So
>I am wondering if twisted can do the same thing. Once it is connected (i.e.
>connectionMade), can we tell if that connection still alive or not every xx
>minutes? Is twisted maintain persistent connection?
>

Just as `connectionMade? is called when the connection is created, there
is another method - `connectionLost? which is called when the connection
goes away.  You don't need to do any checking.

The only caveat is that because of the way TCP works, if no attempt is
made to send traffic over a connection, it's possible for the connection
to be lost but for your application to never be notified of this.  However,
as long as you're trying to send traffic, you won't encounter this case.

If your application needs to be idle for a long period of time, then you
might want to send "keep alives" - any kind of allowed traffic which has
no actual consequence other than to send some traffic.  This way you'll
get `connectionLost? even if you're otherwise idle.

Jean-Paul



From glyph at divmod.com  Tue Nov 11 18:28:08 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 11 Nov 2008 23:28:08 -0000
Subject: [Twisted-Python] checking connection
In-Reply-To: <e5f41cb30811111241p175cd2f9pd0f24db520fb0355@mail.gmail.com>
References: <e5f41cb30811110942w33ae263crb05e3b2b53a33cf4@mail.gmail.com>
	<20081111184313.20272.1718049994.divmod.quotient.3762@ohm>
	<e5f41cb30811111241p175cd2f9pd0f24db520fb0355@mail.gmail.com>
Message-ID: <20081111232808.6400.1941067201.divmod.xquotient.1435@weber.divmod.com>

On 08:41 pm, nebpro at gmail.com wrote:
>Thank you very much for the response. I am still new with twisted so 
>please
>bare with me.

>What I mean by checking connection is something like instant messenger 
>(i.e.
>pidgin) do in some interval time. Pidgin is checking for internet 
>connection
>every xx minutes to see if the computer still connected to the 
>internet. So
>I am wondering if twisted can do the same thing. Once it is connected 
>(i.e.
>connectionMade), can we tell if that connection still alive or not 
>every xx
>minutes? Is twisted maintain persistent connection?

You're confusing two mostly unrelated things.  Pidgin tracks the state 
of your network interfaces by way of dbus notifications from 
NetworkManager, not by "checking every XX minutes".  You could do this 
with Twisted by using the glib2 reactor and the dbus bindings, but 
that's more of a dbus/NetworkManager question than a twisted question. 
I would strongly recommend that you don't bother with this kind of 
connection-tracking.  My personal experience of applications trying to 
use this information (Pidgin included) is mostly that they are buggy and 
have a broken idea of the machine's network interface state because it's 
very hard to understand how this information can be effectively used 
(and NetworkManager itself is not perfect, sometimes reporting incorrect 
results).

Pidgin (and every other networking application in the world) also tracks 
the state of individual network connections (i.e. your connection to an 
IRC server, or to AOL's AIM server) by waiting for notifications from 
their respective sockets.  In Twisted, this is the stuff related to 
connectionLost that JP Calderone already mentioned in his reply to you. 
This is what you should be relying on in your Twisted application.  Even 
if you implement "internet connection" checking with NetworkManager or 
some other platform's equivalent, that's just a hint; you still have to 
pay attention to connectionLost.



From nebpro at gmail.com  Tue Nov 11 22:03:27 2008
From: nebpro at gmail.com (Benny)
Date: Tue, 11 Nov 2008 22:03:27 -0500
Subject: [Twisted-Python] checking connection
In-Reply-To: <20081111232808.6400.1941067201.divmod.xquotient.1435@weber.divmod.com>
References: <e5f41cb30811110942w33ae263crb05e3b2b53a33cf4@mail.gmail.com>
	<20081111184313.20272.1718049994.divmod.quotient.3762@ohm>
	<e5f41cb30811111241p175cd2f9pd0f24db520fb0355@mail.gmail.com>
	<20081111232808.6400.1941067201.divmod.xquotient.1435@weber.divmod.com>
Message-ID: <e5f41cb30811111903y38ab954et6b22f35485006498@mail.gmail.com>

Thank you very much for your explanation. I did pay attention to the
behavior, and I did noticed that when there is no traffic connection, the
connectionLost will be called and it will also called the
clientConnectionLost too. I used ReconnectingClientFactory in the
clientConnectionLost to ensure that the connection is established, and used
the reactor.stop() when i have to stop my application. I really appreciate
everyone helps. Thank you very much.


On Tue, Nov 11, 2008 at 6:28 PM, <glyph at divmod.com> wrote:

> On 08:41 pm, nebpro at gmail.com wrote:
>
>> Thank you very much for the response. I am still new with twisted so
>> please
>> bare with me.
>>
>
>  What I mean by checking connection is something like instant messenger
>> (i.e.
>> pidgin) do in some interval time. Pidgin is checking for internet
>> connection
>> every xx minutes to see if the computer still connected to the internet.
>> So
>> I am wondering if twisted can do the same thing. Once it is connected
>> (i.e.
>> connectionMade), can we tell if that connection still alive or not every
>> xx
>> minutes? Is twisted maintain persistent connection?
>>
>
> You're confusing two mostly unrelated things.  Pidgin tracks the state of
> your network interfaces by way of dbus notifications from NetworkManager,
> not by "checking every XX minutes".  You could do this with Twisted by using
> the glib2 reactor and the dbus bindings, but that's more of a
> dbus/NetworkManager question than a twisted question. I would strongly
> recommend that you don't bother with this kind of connection-tracking.  My
> personal experience of applications trying to use this information (Pidgin
> included) is mostly that they are buggy and have a broken idea of the
> machine's network interface state because it's very hard to understand how
> this information can be effectively used (and NetworkManager itself is not
> perfect, sometimes reporting incorrect results).
>
> Pidgin (and every other networking application in the world) also tracks
> the state of individual network connections (i.e. your connection to an IRC
> server, or to AOL's AIM server) by waiting for notifications from their
> respective sockets.  In Twisted, this is the stuff related to connectionLost
> that JP Calderone already mentioned in his reply to you. This is what you
> should be relying on in your Twisted application.  Even if you implement
> "internet connection" checking with NetworkManager or some other platform's
> equivalent, that's just a hint; you still have to pay attention to
> connectionLost.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081111/8a728c00/attachment.htm 

From adigeaydin at gmail.com  Wed Nov 12 05:33:55 2008
From: adigeaydin at gmail.com (=?ISO-8859-9?Q?Ayd=FDn_=DEEN?=)
Date: Wed, 12 Nov 2008 12:33:55 +0200
Subject: [Twisted-Python] client send twice but server reads once
Message-ID: <2196d7e0811120233y255e7e58i5e90331b5902ab17@mail.gmail.com>

Hi,

In my code i'm sending sequential data from client like;

self.transport.write('aydin')
self.transport.write('adige')

but server reads data like *'aydinadige'

*How can i solve this, actually it is not clear how does dataReceived work
for me

best regards..
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081112/1dbb6e2e/attachment.htm 

From p.mayers at imperial.ac.uk  Wed Nov 12 06:12:52 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 12 Nov 2008 11:12:52 +0000
Subject: [Twisted-Python] client send twice but server reads once
In-Reply-To: <2196d7e0811120233y255e7e58i5e90331b5902ab17@mail.gmail.com>
References: <2196d7e0811120233y255e7e58i5e90331b5902ab17@mail.gmail.com>
Message-ID: <491ABA34.7010106@imperial.ac.uk>

Ayd?n ?EN wrote:
> Hi,
> 
> In my code i'm sending sequential data from client like;
> 
> self.transport.write('aydin')
> self.transport.write('adige')
> 
> but server reads data like *'aydinadige'
> 
> *How can i solve this, actually it is not clear how does dataReceived 
> work for me
> 

You can't, TCP will deliver the messages and re-assemble them at will.

If you want message framing on top of TCP, you need to add it. Twisted 
comes with some several e.g. in twisted.protocols.basic you have 
LineReceiver, NetstringReceiver

> best regards..
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From adigeaydin at gmail.com  Wed Nov 12 07:34:30 2008
From: adigeaydin at gmail.com (=?ISO-8859-9?Q?Ayd=FDn_=DEEN?=)
Date: Wed, 12 Nov 2008 14:34:30 +0200
Subject: [Twisted-Python] client send twice but server reads once
In-Reply-To: <491ABA34.7010106@imperial.ac.uk>
References: <2196d7e0811120233y255e7e58i5e90331b5902ab17@mail.gmail.com>
	<491ABA34.7010106@imperial.ac.uk>
Message-ID: <2196d7e0811120434i73431078p337d3858197db6fd@mail.gmail.com>

yeap, LineReceiver is the point for me.

thanks.

2008/11/12 Phil Mayers <p.mayers at imperial.ac.uk>

> Ayd?n ?EN wrote:
>
>> Hi,
>>
>> In my code i'm sending sequential data from client like;
>>
>> self.transport.write('aydin')
>> self.transport.write('adige')
>>
>> but server reads data like *'aydinadige'
>>
>> *How can i solve this, actually it is not clear how does dataReceived work
>> for me
>>
>>
> You can't, TCP will deliver the messages and re-assemble them at will.
>
> If you want message framing on top of TCP, you need to add it. Twisted
> comes with some several e.g. in twisted.protocols.basic you have
> LineReceiver, NetstringReceiver
>
>  best regards..
>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Ayd?n ?EN

         Ege ?niversitesi
Uluslararas? Bilgisayar Enstit?s?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081112/45dac9b5/attachment.htm 

From warner at lothar.com  Wed Nov 12 14:42:27 2008
From: warner at lothar.com (Brian Warner)
Date: Wed, 12 Nov 2008 11:42:27 -0800
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <96c9d6a80811071312i762ada13raff15fbe2d75b293@mail.gmail.com>
References: <96c9d6a80811070908w5f7573e3ief969c9ce86001f7@mail.gmail.com>
	<20081107172205.20272.1272249608.divmod.quotient.53@ohm>
	<96c9d6a80811071312i762ada13raff15fbe2d75b293@mail.gmail.com>
Message-ID: <20081112114227.719721fc@fluxx.allmydata.com>

> > As yet, there has been no discussion about doing this.  That probably
> > precludes it from happning "soon", at least.

Yeah, I'm not pushing to get Foolscap into the core any time soon. The
release cycles are just too different.

cheers,
 -Brian

BTW: foolscap-0.3.2 is the latest version, at http://foolscap.lothar.com . I
keep forgetting to email the release announcements.



From dialtone at gmail.com  Wed Nov 12 15:09:56 2008
From: dialtone at gmail.com (Valentino Volonghi)
Date: Wed, 12 Nov 2008 12:09:56 -0800
Subject: [Twisted-Python] Released Ampoule - 0.0.5
Message-ID: <FF60F438-2926-48C8-A492-9215AEF10EFD@gmail.com>

Ampoule is a process pool implementation written on top of Twisted
Matrix. Its name comes from the use of AMP as the default
communication protocol between the pool and all its children.

It's different from other alternative solutions because it provides an
API very close to that of the Twisted ThreadPool. As an helper
function it also provides a deferToAMPProcess function that creates
the ProcessPool and submits jobs to it.

There has been 2 released since the last announce so I'm going
to report both of them here.

Ampoule 0.0.5 (2008-11-12)
==========================

Changes
--------
  - Fixed bug #259264, this fix introduces a number of changes in the
    architecture of the project:
     1. Removed childReactor argument form the process pool and added
        a starter argument.
     2. Introduced the concept of a starter object whose role is to
        start subprocesses with given parameters. This makes it easier
        to specify particular parameters (eg. new env variables) to the
        child processes without needing to override many methods in the
        pool using closures.
     3. main.py is completely changed and now provides the  
ProcessStarter
        object which is a default implementation of IStarter.
     4. IStarter interface currently documents only 2 methods:
             startAMPProcess
             startPythonProcess
         in the future it's possible that we will add an additional:
             startProcess
         that starts whichever process we want without requiring python,
         also this might end up with the separation of ProcessPool in at
         least 2 logical levels: the ProcessPool and a dispatcher that
         talks with the children, in this way it would be possible to
         create custom ProcessPools without changing much code or  
requiring
         any special requirement on the children.

  - Introduced a callRemote method on the ProcessPool that is basically
    the same as doWork. Introduced for symmetry between all the RPC  
libraries
    in Twisted.

  - reactor short name and ampoule child class are now passed as the 2
    last arguments rather than the first 2. So if you have written any
    custom bootstrap code be sure to change sys.argv[1] and sys.argv[2]
    into sys.argv[-2] and sys.argv[-1] respectively.

Ampoule 0.0.4 (2008-11-03)
==========================

Changes
--------
  - Ampoule parent process and child processes now talk using FDs 3 (in)
    and 4 (out) in order to avoid problems with libraries that  
mistakenly
    send error lines to stdout (yes, I'm looking at you gtk+)


-- 
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081112/0238112e/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081112/0238112e/attachment.pgp 

From donwsmith at gmail.com  Wed Nov 12 22:51:16 2008
From: donwsmith at gmail.com (Don Smith)
Date: Wed, 12 Nov 2008 19:51:16 -0800
Subject: [Twisted-Python] Released Ampoule - 0.0.5
In-Reply-To: <FF60F438-2926-48C8-A492-9215AEF10EFD@gmail.com>
References: <FF60F438-2926-48C8-A492-9215AEF10EFD@gmail.com>
Message-ID: <24f63c200811121951i45581bbbm4b88c50818f4da02@mail.gmail.com>

Hmm, this sounds interesting. I'm wondering about a use case for it. Would
Ampoule be a way to take advantage of multi-core processors?

Thanks,

Don

On Wed, Nov 12, 2008 at 12:09 PM, Valentino Volonghi <dialtone at gmail.com>wrote:

> Ampoule is a process pool implementation written on top of Twisted
> Matrix. Its name comes from the use of AMP as the default
> communication protocol between the pool and all its children.
>
> It's different from other alternative solutions because it provides an
> API very close to that of the Twisted ThreadPool. As an helper
> function it also provides a deferToAMPProcess function that creates
> the ProcessPool and submits jobs to it.
>
> There has been 2 released since the last announce so I'm going
> to report both of them here.
>
> Ampoule 0.0.5 (2008-11-12)
> ==========================
>
> Changes
> --------
>  - Fixed bug #259264, this fix introduces a number of changes in the
>    architecture of the project:
>     1. Removed childReactor argument form the process pool and added
>        a starter argument.
>     2. Introduced the concept of a starter object whose role is to
>        start subprocesses with given parameters. This makes it easier
>        to specify particular parameters (eg. new env variables) to the
>        child processes without needing to override many methods in the
>        pool using closures.
>     3. main.py is completely changed and now provides the ProcessStarter
>        object which is a default implementation of IStarter.
>     4. IStarter interface currently documents only 2 methods:
>             startAMPProcess
>             startPythonProcess
>         in the future it's possible that we will add an additional:
>             startProcess
>         that starts whichever process we want without requiring python,
>         also this might end up with the separation of ProcessPool in at
>         least 2 logical levels: the ProcessPool and a dispatcher that
>         talks with the children, in this way it would be possible to
>         create custom ProcessPools without changing much code or requiring
>         any special requirement on the children.
>
>  - Introduced a callRemote method on the ProcessPool that is basically
>    the same as doWork. Introduced for symmetry between all the RPC
> libraries
>    in Twisted.
>
>  - reactor short name and ampoule child class are now passed as the 2
>    last arguments rather than the first 2. So if you have written any
>    custom bootstrap code be sure to change sys.argv[1] and sys.argv[2]
>    into sys.argv[-2] and sys.argv[-1] respectively.
>
> Ampoule 0.0.4 (2008-11-03)
> ==========================
>
> Changes
> --------
>  - Ampoule parent process and child processes now talk using FDs 3 (in)
>    and 4 (out) in order to avoid problems with libraries that mistakenly
>    send error lines to stdout (yes, I'm looking at you gtk+)
>
>
> --
> Valentino Volonghi aka Dialtone
> Now running MacOS X 10.5
> Home Page: http://www.twisted.it
> http://www.adroll.com
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081112/a7ab2a95/attachment.htm 

From ivaturi at gmail.com  Thu Nov 13 14:43:46 2008
From: ivaturi at gmail.com (Turi)
Date: Thu, 13 Nov 2008 11:43:46 -0800
Subject: [Twisted-Python] ssh and python shell with twisted
Message-ID: <ad8c8e3d0811131143u6a221619p21523c9cf83d00a6@mail.gmail.com>

Let me preface by saying, I am new to python and of course Twisted. I
am trying to play with the examples already available
http://www.devshed.com/c/a/Python/SSH-with-Twisted/. I believe that is
the example from Oreilly book on Twisted. I looked at the custom ssh
server script and then the providing python shell over ssh script
http://www.devshed.com/c/a/Python/SSH-with-Twisted/3/. What I am
curious about is how to combine these two? So I want to be able to set
up the custom ssh server, which the first example explains, but have
support for a command in the SSHDemoProtocol Class (like
do_python_shell) which will invoke python shell over the existing ssh
session. I am assuming you have to somehow do that over the existing
channel, but how? Does my question make sense?

--Turi



From newptcai at gmail.com  Fri Nov 14 00:49:04 2008
From: newptcai at gmail.com (Peter Cai)
Date: Fri, 14 Nov 2008 13:49:04 +0800
Subject: [Twisted-Python] How to stop a twisted daemon application.
Message-ID: <befee6d80811132149h2adb814cxb0e68906da021f00@mail.gmail.com>

Hi,

After I have run "twistd -y xxx.py"

How can I stop it?  I've read through twistd manual and didn't find
anything about this.

I have to find the process and kill it.

Any better approach?



From screwtape at froup.com  Fri Nov 14 01:06:31 2008
From: screwtape at froup.com (Tim Allen)
Date: Fri, 14 Nov 2008 17:06:31 +1100
Subject: [Twisted-Python] How to stop a twisted daemon application.
In-Reply-To: <befee6d80811132149h2adb814cxb0e68906da021f00@mail.gmail.com>
References: <befee6d80811132149h2adb814cxb0e68906da021f00@mail.gmail.com>
Message-ID: <20081114060631.GO29470@thristian.org>

On Fri, Nov 14, 2008 at 01:49:04PM +0800, Peter Cai wrote:
> After I have run "twistd -y xxx.py"
> 
> How can I stop it?  I've read through twistd manual and didn't find
> anything about this.
> 
> I have to find the process and kill it.

When you run twistd, it should create a 'twistd.pid' file in the current
directory containing the process-ID of the twistd process.

I believe the standard method of stopping a background twistd is:

    kill $(cat twistd.pid)

Also note the -n/--nodaemon command-line option which stops twistd from
vanishing into the background at all. If start twistd like this:

    twistd -n -y xxx.py

...then you will get the log output written to the screen (rather than
to a logfile) and you can kill the server with Ctrl-C instead of having
to mess around with pid files.




From pthomas at spongelava.com  Fri Nov 14 03:59:31 2008
From: pthomas at spongelava.com (Paul Thomas)
Date: Fri, 14 Nov 2008 08:59:31 +0000
Subject: [Twisted-Python] Opening a fifo
Message-ID: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>

Hi,

I've run into a small problem where my twisted application needs to  
open a fifo to talk to another process. On Linux at least, the open  
blocks until the other end of the fifo is opened and this is blocking  
my reactor.

Is there a straight-forward mechanism to asynchronously open the fifo?  
Or will I have to do something with threads?

Thanks,
pt.



From p.mayers at imperial.ac.uk  Fri Nov 14 04:47:35 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 14 Nov 2008 09:47:35 +0000
Subject: [Twisted-Python] Opening a fifo
In-Reply-To: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>
References: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>
Message-ID: <491D4937.7020101@imperial.ac.uk>

Paul Thomas wrote:
> Hi,
> 
> I've run into a small problem where my twisted application needs to open 
> a fifo to talk to another process. On Linux at least, the open blocks 
> until the other end of the fifo is opened and this is blocking my reactor.

Either of:

fd = os.open('thefifo', os.O_RDONLY | os.O_NONBLOCK)
fd = os.open('thefifo', os.O_RDWR)

...will return immediately,

Try "man fifo" for a description of the vagaries.


A listenFIFO would be handy in Twisted. It's tedious doing this manually.



From pthomas at spongelava.com  Fri Nov 14 04:52:27 2008
From: pthomas at spongelava.com (Paul Thomas)
Date: Fri, 14 Nov 2008 09:52:27 +0000
Subject: [Twisted-Python] Opening a fifo
In-Reply-To: <491D4937.7020101@imperial.ac.uk>
References: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>
	<491D4937.7020101@imperial.ac.uk>
Message-ID: <5D3577ED-E6C4-4F67-93D6-03B7B6BDDEDD@spongelava.com>


On 14 Nov 2008, at 09:47, Phil Mayers wrote:

> Paul Thomas wrote:
>> Hi,
>> I've run into a small problem where my twisted application needs to  
>> open a fifo to talk to another process. On Linux at least, the open  
>> blocks until the other end of the fifo is opened and this is  
>> blocking my reactor.
>
> Either of:
>
> fd = os.open('thefifo', os.O_RDONLY | os.O_NONBLOCK)
> fd = os.open('thefifo', os.O_RDWR)
>
> ...will return immediately,
>
> Try "man fifo" for a description of the vagaries.

I've tried RDWR and I get errors in writing. I really need O_WRONLY,  
and that fails with O_NONBLOCK unless the other end is open. Maybe  
I'll chase down the RDWR problem again.

Ta.



From p.mayers at imperial.ac.uk  Fri Nov 14 06:00:33 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 14 Nov 2008 11:00:33 +0000
Subject: [Twisted-Python] Opening a fifo
In-Reply-To: <5D3577ED-E6C4-4F67-93D6-03B7B6BDDEDD@spongelava.com>
References: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>	<491D4937.7020101@imperial.ac.uk>
	<5D3577ED-E6C4-4F67-93D6-03B7B6BDDEDD@spongelava.com>
Message-ID: <491D5A51.3080802@imperial.ac.uk>

Paul Thomas wrote:
> 
> On 14 Nov 2008, at 09:47, Phil Mayers wrote:
> 
>> Paul Thomas wrote:
>>> Hi,
>>> I've run into a small problem where my twisted application needs to 
>>> open a fifo to talk to another process. On Linux at least, the open 
>>> blocks until the other end of the fifo is opened and this is blocking 
>>> my reactor.
>>
>> Either of:
>>
>> fd = os.open('thefifo', os.O_RDONLY | os.O_NONBLOCK)
>> fd = os.open('thefifo', os.O_RDWR)
>>
>> ...will return immediately,
>>
>> Try "man fifo" for a description of the vagaries.
> 
> I've tried RDWR and I get errors in writing. I really need O_WRONLY, and 
> that fails with O_NONBLOCK unless the other end is open. Maybe I'll 
> chase down the RDWR problem again.

Really? It works for me in a repl:

[pjm3 at wildfire ~]$ mkfifo blah
[pjm3 at wildfire ~]$ python
 >>> import os
 >>> fd = os.open('blah', os.O_RDWR)
 >>> os.write(fd, 'a')
1

What errors are you getting? Possibly Twisted is getting confused 
because the fd is "readable" as well as "writeable".

Do you have sample code that's failing?



From pthomas at spongelava.com  Fri Nov 14 06:39:19 2008
From: pthomas at spongelava.com (Paul Thomas)
Date: Fri, 14 Nov 2008 11:39:19 +0000
Subject: [Twisted-Python] Opening a fifo
In-Reply-To: <491D5A51.3080802@imperial.ac.uk>
References: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>	<491D4937.7020101@imperial.ac.uk>
	<5D3577ED-E6C4-4F67-93D6-03B7B6BDDEDD@spongelava.com>
	<491D5A51.3080802@imperial.ac.uk>
Message-ID: <6C0543AA-C607-448C-AEFD-624AF56AA2F0@spongelava.com>


On 14 Nov 2008, at 11:00, Phil Mayers wrote:

> Paul Thomas wrote:
>> On 14 Nov 2008, at 09:47, Phil Mayers wrote:
>>> Paul Thomas wrote:
>>>> Hi,
>>>> I've run into a small problem where my twisted application needs  
>>>> to open a fifo to talk to another process. On Linux at least, the  
>>>> open blocks until the other end of the fifo is opened and this is  
>>>> blocking my reactor.
>>>
>>> Either of:
>>>
>>> fd = os.open('thefifo', os.O_RDONLY | os.O_NONBLOCK)
>>> fd = os.open('thefifo', os.O_RDWR)
>>>
>>> ...will return immediately,
>>>
>>> Try "man fifo" for a description of the vagaries.
>> I've tried RDWR and I get errors in writing. I really need  
>> O_WRONLY, and that fails with O_NONBLOCK unless the other end is  
>> open. Maybe I'll chase down the RDWR problem again.
>
> Really? It works for me in a repl:
>
> [pjm3 at wildfire ~]$ mkfifo blah
> [pjm3 at wildfire ~]$ python
> >>> import os
> >>> fd = os.open('blah', os.O_RDWR)
> >>> os.write(fd, 'a')
> 1
>
> What errors are you getting? Possibly Twisted is getting confused  
> because the fd is "readable" as well as "writeable".
>
> Do you have sample code that's failing?

I'll have to wait til Monday to try it out again. I thought the  
problem was to do with the other process opening the read end between  
the open and the write. But maybe it was a case of not testing what I  
thought I was testing.

Still, so long as I know that twisted doesn't provide anything I might  
have missed, and that you think it should work, I can focus on fixing  
it instead of working around it.

Thanks.




From dialtone at gmail.com  Fri Nov 14 12:35:29 2008
From: dialtone at gmail.com (Valentino Volonghi)
Date: Fri, 14 Nov 2008 09:35:29 -0800
Subject: [Twisted-Python] Released Ampoule - 0.0.5
In-Reply-To: <24f63c200811121951i45581bbbm4b88c50818f4da02@mail.gmail.com>
References: <FF60F438-2926-48C8-A492-9215AEF10EFD@gmail.com>
	<24f63c200811121951i45581bbbm4b88c50818f4da02@mail.gmail.com>
Message-ID: <2E853739-E941-45F2-8711-EDA5249D328C@gmail.com>


On Nov 12, 2008, at 7:51 PM, Don Smith wrote:

> Hmm, this sounds interesting. I'm wondering about a use case for it.  
> Would Ampoule be a way to take advantage of multi-core processors?


Yes, multi-process programming is a way to achieve that advantage, it  
also supports
remote process pools so you can actually take advantage of multiple  
computers.

-- 
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081114/d5c12c58/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081114/d5c12c58/attachment.pgp 

From mk.fraggod at gmail.com  Fri Nov 14 15:44:41 2008
From: mk.fraggod at gmail.com (Mike Kazantsev)
Date: Sat, 15 Nov 2008 01:44:41 +0500
Subject: [Twisted-Python] How to stop a twisted daemon application.
In-Reply-To: <20081114060631.GO29470@thristian.org>
References: <befee6d80811132149h2adb814cxb0e68906da021f00@mail.gmail.com>
	<20081114060631.GO29470@thristian.org>
Message-ID: <20081115014441.111a4cfb@gmail.com>

On Fri, 14 Nov 2008 17:06:31 +1100
Tim Allen <screwtape at froup.com> wrote:

> On Fri, Nov 14, 2008 at 01:49:04PM +0800, Peter Cai wrote:
> > How can I stop it?  I've read through twistd manual and didn't find
> > anything about this.
> > 
> > I have to find the process and kill it.
> 
> I believe the standard method of stopping a background twistd is:
> 
>     kill $(cat twistd.pid)

I can suggest using "pkill -F twistd.pid" as a cleaner alternative.

You can also define your own handlers for received signals (via
signal module), to implement some custom shutdown sequence, for
instance.

-- 
Mike Kazantsev // fraggod.net
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081115/38ac5f35/attachment.pgp 

From warner at lothar.com  Fri Nov 14 21:55:00 2008
From: warner at lothar.com (Brian Warner)
Date: Fri, 14 Nov 2008 18:55:00 -0800
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
Message-ID: <20081114185500.301cc10f@fluxx.allmydata.com>

About once every six months, I wind up debugging a python stack
overflow in my Deferred-using code. The symptom is usually a log
message that ends with:

  File "/usr/lib/python2.5/site-packages/twisted/internet/defer.py", line 344, in _runCallbacks
    self.result = failure.Failure()
  File "/usr/lib/python2.5/site-packages/twisted/python/failure.py", line 265, in __init__
    parentCs = reflect.allYourBase(self.type)
  File "/usr/lib/python2.5/site-packages/twisted/python/reflect.py", line 542, in allYourBase
    accumulateBases(classObj, l, baseClass)
  File "/usr/lib/python2.5/site-packages/twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "/usr/lib/python2.5/site-packages/twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "/usr/lib/python2.5/site-packages/twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "/usr/lib/python2.5/site-packages/twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
exceptions.RuntimeError: maximum recursion depth exceeded

It's always something weird. This time, I took notes. I offer these hints to
help future searchers find a starting point in their own debugging efforts.
The executive summary:

 Certain patterns of using Deferreds work fine while testing, but will fail
 in mysterious ways later on as the application's workload grows larger.

These notes are formatted for Trac, as they were originally written as a
comment for http://allmydata.org/trac/tahoe/ticket/237 . Also, the
"solutions" suggested require the eventual-send operator as provided by
Foolscap, and until/unless reactor.eventually() makes it into Twisted proper,
these solutions may not be convenient for projects that aren't already using
Foolscap.

cheers,
 -Brian


== Problem One: long list of callbacks, all of them are ready ==

Each Deferred (we'll call the first one Deferred A) has a list of callback
functions. Each time you do d.addCallback(), this list grows by one element.

When Deferred A fires, the list is executed in a 'while' loop, in
Deferred._runCallbacks. If the callbacks all return either a normal value or
a Failure, then the list is completely consumed during the one call to
_runCallbacks, and everything is fine.

However, when a callback returns another Deferred B (chaining), the first
Deferred A must wait for the second to finish. The code that does this looks
like:

{{{
    if isinstance(self.result, Deferred):
        self.pause()
        self.result.addBoth(self._continue)
        break
}}}

The second Deferred B might have already been fired by this point, either
because it was born ready (created with defer.succeed, or
defer.maybeDeferred), or because whatever was being waited upon has already
occurred.

If this occurs, the subsequent callback in Deferred A's chain will fire (with
B's result), but it will fire through a 6-frame recursive loop instead of
firing on the next pass of the 'while' loop. As a result, each such
ready-to-fire Deferred will add 6 stack frames. 166 such loops are enough to
put more than 1000 frames on the stack, which will exceed Python's default
sys.getrecursionlimit() .

The 6-frame cycle is:

{{{
  File "twisted/internet/defer.py", line 214, in addBoth
    callbackKeywords=kw, errbackKeywords=kw)
  File "twisted/internet/defer.py", line 186, in addCallbacks
    self._runCallbacks()
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
  File "twisted/internet/defer.py", line 341, in _runCallbacks
    self.result.addBoth(self._continue)
}}}


The following sample code will cause this situation:

{{{
import traceback
from twisted.internet import defer

def fire(res, which):
    #print "FIRE", which, "stack:", len(traceback.extract_stack())
    #if which == 2:
    #    traceback.print_stack()
    return defer.succeed(None)

d = defer.Deferred()
for i in range(170):
    d.addCallback(fire, i)

d.callback("go")
}}}

The exception that this provokes is caught by the Deferred's Failure
mechanisms, but then Twisted has an internal failure while trying to capture
it. The actual Unhandled error in Deferred that gets put into the logs is:

{{{
Unhandled error in Deferred:
Traceback (most recent call last):
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
  File "twisted/internet/defer.py", line 341, in _runCallbacks
    self.result.addBoth(self._continue)
  File "twisted/internet/defer.py", line 214, in addBoth
    callbackKeywords=kw, errbackKeywords=kw)
  File "twisted/internet/defer.py", line 186, in addCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
  File "twisted/internet/defer.py", line 344, in _runCallbacks
    self.result = failure.Failure()
  File "twisted/python/failure.py", line 265, in __init__
    parentCs = reflect.allYourBase(self.type)
  File "twisted/python/reflect.py", line 542, in allYourBase
    accumulateBases(classObj, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
exceptions.RuntimeError: maximum recursion depth exceeded
}}}

This problem frequently shows up in code which returns a Deferred for
generality (i.e. some day it might be async), but is using defer.succeed() or
defer.maybeDeferred(some_immediate_call) in the meanwhile.

== Problem Two: deep chain of callbacks, e.g. recursive delayed polling ==

The other kind of recursion-limit-violation failures that occurs with
Deferreds involves a long chain that finally fires. The most common way to
generate such a chain is with a recursive method that separates each call
with a Deferred, such as a polling function that returns a Deferred:

{{{
   def wait_until_done(self, ignored=None):
       if self.done:
          return True
       else:
          d = Deferred()
          reactor.callLater(1.0, d.callback, None)
          d.addCallback(self.wait_until_done)
          return d
}}}

If this function must poll more than 331 times, the reactor tick which
notices the expired timer and fires d.callback will see a
recursion-depth-exceeded exception. The last Deferred fires, which triggers
the _continue callback on the next-to-last Deferred, which allows it to fire,
which triggers the {{{[-2]}}} Deferred, etc. This recursive cycle is of
length 3 and has the following frames:

{{{
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
}}}

This one is trickier to find, because the root of the stack will be some
internal reactor call rather than application code. In particular, the bottom
of the stack will look like:

{{{
  File "/tmp/t.py", line 26, in <module>
    reactor.run()
  File "twisted/internet/base.py", line 1048, in run
    self.mainLoop()
  File "twisted/internet/base.py", line 1057, in mainLoop
    self.runUntilCurrent()
  File "twisted/internet/base.py", line 705, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "twisted/internet/defer.py", line 243, in callback
    self._startRunCallbacks(result)
  File "twisted/internet/defer.py", line 312, in _startRunCallbacks
    self._runCallbacks()
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
}}}

The other tricky thing about this failure is that the application code is
sitting on the end of the stack: any callback that is attached to the
Deferred that {{{wait_until_done}}} returns will run in a low-stack
environment. As a result, recursion-depth-exceeded exceptions will be
triggered by seemingly innocent application code. Note how the "DONE" number
changes as you modify the self.count comparsion value in this example:

{{{
#! /usr/bin/python

import traceback
from twisted.internet import reactor
from twisted.internet.defer import Deferred

class Poller:
    count = 0
    def wait_until_done(self, ignored=None):
        self.count += 1
        if self.count > 301: # 331 works, 332 fails.
            return True
        else:
            d = Deferred()
            reactor.callLater(0.0, d.callback, None)
            d.addCallback(self.wait_until_done)
            return d

p = Poller()
def done(res):
    #traceback.print_stack()
    print "DONE", len(traceback.extract_stack())
d = p.wait_until_done()
d.addCallback(done)
reactor.run()
}}}



When this fails, the traceback that shows up in the logs looks like:

{{{
Unhandled error in Deferred:
Traceback (most recent call last):
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
--- <exception caught here> ---
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
  File "twisted/internet/defer.py", line 344, in _runCallbacks
    self.result = failure.Failure()
  File "twisted/python/failure.py", line 265, in __init__
    parentCs = reflect.allYourBase(self.type)
  File "twisted/python/reflect.py", line 542, in allYourBase
    accumulateBases(classObj, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
exceptions.RuntimeError: maximum recursion depth exceeded
}}}

== Combinations ==

Note that these two problems can interact. Each ready-to-fire callback
attached to a single Deferred uses 6 stack frames, and each chained callback
uses 3 stack frames. If X*6+Y*3 > 1000, the code will fail.

== Solutions ==

For problem one, the requirement is that Deferreds never wind up with more
than 166 callbacks that are ready to fire. In other words, there must be at
least one not-ready-to-fire Deferred in each span of 166 callbacks.

One way to accomplish this is to have every 100th call return
{{{foolscap.eventual.fireEventually(result)}}} instead of
{{{defer.succeed(result)}}}. Having every call do this works too, it just
slows things down a bit. (note that the reactor must be running for
fireEventually to work)

{{{
def fire(res, which):
    return defer.fireEventually(None)

d = defer.Deferred()
for i in range(170):
    d.addCallback(fire, i)
}}}


For problem two, the requirement is that the depth of the tail-recursion
chain not exceed 331 cycles, minus some room for the code you're eventually
going to attach to the end. One way to accomplish this is to have every 300th
call (or every single call, if you are willing to accept the slowdown) add an
additional {{{fireEventually}}} to break up the stack.

{{{
    def wait_until_done(self, ignored=None):
        self.count += 1
        if self.count > 301: # 331 works, 332 fails.
            return True
        else:
            d = Deferred()
            reactor.callLater(0.0, d.callback, None)
            d.addCallback(self.wait_until_done)
            d.addCallback(lambda res: fireEventually(res))
            return d
}}}




From warner at lothar.com  Fri Nov 14 23:06:06 2008
From: warner at lothar.com (Brian Warner)
Date: Fri, 14 Nov 2008 20:06:06 -0800
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <20081114185500.301cc10f@fluxx.allmydata.com>
References: <20081114185500.301cc10f@fluxx.allmydata.com>
Message-ID: <20081114200606.7638caa9@fluxx.allmydata.com>

> It's always something weird. This time, I took notes. I offer these hints to
> help future searchers find a starting point in their own debugging efforts.

And as a followup (since the problem I encountered today happened to be a
third case):


The first step to tracking down these problems is to temporarily apply the
following patch to your twisted/internet/defer.py:

Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 24958)
+++ twisted/internet/defer.py	(working copy)
@@ -325,6 +325,12 @@
                 try:
                     self._runningCallbacks = True
                     try:
+                        if len(traceback.extract_stack()) > 900:
+                            print "running", len(traceback.extract_stack())
+                            traceback.print_stack()
+                            print "running", len(traceback.extract_stack())
+                            import os
+                            os.abort()
                         self.result = callback(self.result, *args, **kw)
                     finally:
                         self._runningCallbacks = False
@@ -337,6 +343,12 @@
                         # self.callbacks until it is empty, then return here,
                         # where there is no more work to be done, so this call
                         # will return as well.
+                        if len(traceback.extract_stack()) > 900:
+                            print "chaining", len(traceback.extract_stack())
+                            traceback.print_stack()
+                            print "chaining", len(traceback.extract_stack())
+                            import os
+                            os.abort()
                         self.pause()
                         self.result.addBoth(self._continue)
                         break

That will let you know when the stack is getting close to exhaustion. By
looking at the trace that it prints out, you can find out what other code to
investigate. It is then useful to add the same traceback.extract_stack()
-using instrumentation to that code.

The two problems I described in my previous message were confined to the
methods of Deferred: even though the problems were set up by my application
code, the actual cycle/loop was entirely inside defer.py . The third problem
(that I just finished debugging) had a cycle that passed through my own
application code. In this case, the troublesome class looked like:


class ConcurrencyLimiter:
    """I implement a basic concurrency limiter. Add work to it in the form of
    (callable, args, kwargs) tuples. No more than LIMIT callables will be
    outstanding at any one time.
    """

    def __init__(self, limit=10):
        self.limit = limit
        self.pending = []
        self.active = 0

    def add(self, cb, *args, **kwargs):
        d = defer.Deferred()
        task = (cb, args, kwargs, d)
        self.pending.append(task)
        self.maybe_start_task()
        return d

    def maybe_start_task(self):
        if self.active >= self.limit:
            return
        if not self.pending:
            return
        (cb, args, kwargs, done_d) = self.pending.pop(0)
        self.active += 1
        d = defer.maybeDeferred(cb, *args, **kwargs)
        d.addBoth(self._done, done_d)

    def _done(self, res, done_d):
        self.active -= 1
        eventually(done_d.callback, res)
        self.maybe_start_task()

(you can safely ignore the eventually() call there.. that done_d callback was
not involved in this problem)

In this case, I had a Limiter instance with somewhere around 200 items in the
self.pending queue. All of those items were immediate functions: the call to
defer.maybeDeferred returns a Deferred that was already in the 'fired' state.
That means the d.addBoth() fires the callback right away, synchronously,
leading to a recursive cycle that looked like:

 self.maybe_start_task()
  d.addBoth(self._done, done_d)
   Deferred.addCallbacks(self._done,self._done)
   Deferred._continue
 self._done()
  self.maybe_start_task()

Giving 5 frames per cycle, so 200 items is enough to hit the 1000-frame
default recursion limit.


As before, the fix was to break up the stack by using Foolscap's
eventual-send operation:

    def _done(self, res, done_d):
        self.active -= 1
        eventually(done_d.callback, res)
        eventually(self.maybe_start_task)



hope someone eventually (hah!) finds this useful,
 -Brian



From terry at jon.es  Sat Nov 15 11:04:17 2008
From: terry at jon.es (Terry Jones)
Date: Sat, 15 Nov 2008 17:04:17 +0100
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: Your message at 20:06:06 on Friday, 14 November 2008
References: <20081114185500.301cc10f@fluxx.allmydata.com>
	<20081114200606.7638caa9@fluxx.allmydata.com>
Message-ID: <18718.62209.835262.449928@jon.es>

Hi Brian!

Thanks for posting all the details digging into this.  I've not run into
those things, but you never know. Anyway I really appreciate you taking the
time to spell it all out so clearly.

Terry



From tarjei at nu.no  Sat Nov 15 11:35:42 2008
From: tarjei at nu.no (tarjei)
Date: Sat, 15 Nov 2008 17:35:42 +0100
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <20081114200606.7638caa9@fluxx.allmydata.com>
References: <20081114185500.301cc10f@fluxx.allmydata.com>
	<20081114200606.7638caa9@fluxx.allmydata.com>
Message-ID: <491EFA5E.6000505@nu.no>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi,
> hope someone eventually (hah!) finds this useful,
I've been battling with errors like this quite a lot when using Twisted
to do batch processing of large numbers of files.

Your writeup is a very clear entry into the "Twisted documenter of the
year award". IMHO the whole writeup should be added to the Twisted
documentation right away.

Great work!
Regards,
Tarjei
>  -Brian
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFJHvpeYVRKCnSvzfIRAg8hAKCXkvMdS2ZybgbA2vQM8N/iJTOh+QCdH7vL
bEB330ANcqm6HyZjuukpWcI=
=79qM
-----END PGP SIGNATURE-----



From glyph at divmod.com  Sat Nov 15 18:26:24 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 15 Nov 2008 23:26:24 -0000
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <491EFA5E.6000505@nu.no>
References: <20081114185500.301cc10f@fluxx.allmydata.com>
	<20081114200606.7638caa9@fluxx.allmydata.com>
	<491EFA5E.6000505@nu.no>
Message-ID: <20081115232624.12555.987093130.divmod.xquotient.53@weber.divmod.com>

On 04:35 pm, tarjei at nu.no wrote:
>Your writeup is a very clear entry into the "Twisted documenter of the
>year award". IMHO the whole writeup should be added to the Twisted
>documentation right away.

While this is an excellent writeup of a problem, and Brian definitely 
deserves much praise for doing it with such thoroughness and depth, I 
don't think we should do that ;).

I've reopened an old ticket about this problem which was closed because 
the specific proposed fix didn't really work.

Ideally, Deferred just shouldn't have this problem.  If we can't 
eliminate the problem entirely, then we can at least add a more useful 
error message which can explain how you can start debugging.

The ticket in question (and my comment on it) is here:

    http://twistedmatrix.com/trac/ticket/411#comment:12

If you'd like to add a link from the FAQ, or some other more informal 
resource, please feel free.  However, this is not something that we 
should have permanently enshrined as official documentation.  It's an 
unfortunate workaround for a problem which should really just be fixed.



From dialtone at gmail.com  Sat Nov 15 18:43:55 2008
From: dialtone at gmail.com (Valentino Volonghi)
Date: Sat, 15 Nov 2008 15:43:55 -0800
Subject: [Twisted-Python] Released Ampoule - 0.1
Message-ID: <17732E5E-EFC0-4B00-9750-BBAA958B028E@gmail.com>

Here we go with Ampoule 0.1, the first beta release after 5 alphas.  
Featuring
this release is simply support for a timeout time to avoid having all  
processes
in the pool stuck on some commands.

Unfortunately today PyPI is a bit broken and I can't upload the  
release there yet,
however it's available on launchpad:
https://launchpad.net/ampoule/ampoule/0.1

Right now my launchpad issue tracker is empty, which means that I've now
implemented all the features that I was originally  looking for in a  
process pool.
Now the ball is in your hands dear users! :). Give me features to  
implement and
I'll be glad to work on them.

For the bunch of you worried about maturity of the project: it's  
obviously very young
but at adroll.com we are using it in production systems, specifically  
to drive a pool
of gtkWebKit processes that take screenshots of web pages. In my view  
this is one
of the worst cases for worker processes because web sites leak like  
hell, so far it's
been working flawlessly for over a week. Maybe soon we'll release also  
that project
as open source.

So, have fun using it. Below a more detailed changeset.

This release was sponsored by Super Happy Dev House ;P.
Ampoule 0.1 (2008-11-15)
==========================

Changes
--------

   - Fixed bug #276841: Add timeout for subprocess calls.
      The ProcessPool constructor now supports an additional timeout
      argument that specifies a pool level timeout, in seconds, before
      which every call ever made should return. Alternatively there is
      also a per-call mechanism. Currently this second per-call system
      is not available when using the remote pool service, so be sure
      to set the timeout command line parameter at an high enough level
      to satisfy all the possible commands. If a command doesn't require
      an answer the timeout doesn't apply, of course.

      The error returned when a call is timedout is  
'error.ProcessTerminated'.
      On *nix systems the process is terminated with signal 9, on  
windows
      ampoule uses SIGTERM and returns error code 255.


-- 
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081115/29501c14/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081115/29501c14/attachment.pgp 

From exarkun at twistedmatrix.com  Sun Nov 16 09:41:58 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Nov 2008 14:41:58 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1226846518.22.1409719833@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081116/66e06bac/attachment.htm 

From jml at mumak.net  Sun Nov 16 16:09:53 2008
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 17 Nov 2008 08:09:53 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r25381 - oh my GOD a news
	file
In-Reply-To: <E1L1olt-0004CJ-00@wolfwood.twistedmatrix.com>
References: <E1L1olt-0004CJ-00@wolfwood.twistedmatrix.com>
Message-ID: <d06a5cd30811161309m660f8acfq366274cbecdd3e20@mail.gmail.com>

On Mon, Nov 17, 2008 at 8:03 AM, Christopher Armstrong
<radix at wolfwood.twistedmatrix.com> wrote:
> Author: radix
> Date: Sun Nov 16 14:03:04 2008
> New Revision: 25381
>
> Modified:
>   branches/releases/release-8.2.x-3540/NEWS
>
> Log:
> oh my GOD a news file
>
>

I didn't know we had one :)

Would life be easier if we updated the NEWS file incrementally, on
each trunk commit?

jml



From radix at twistedmatrix.com  Sun Nov 16 20:57:42 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 16 Nov 2008 20:57:42 -0500
Subject: [Twisted-Python] ANN: 8.2.0pre1
Message-ID: <60ed19d40811161757u71913b3es1a338615ff8abb2@mail.gmail.com>

Hi everybody,

Please check out the first pre-release of Twisted 8.2.0, the first
release since April. The downloads are available at:

    http://twistedmatrix.com/users/radix/8.2.0pre1/

And the NEWS file is available at:

    http://twistedmatrix.com/users/radix/8.2.0pre1/NEWS.txt

If there are no problems reported with this pre-release, it will be
re-cut as Twisted 8.2.0.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From newptcai at gmail.com  Mon Nov 17 02:47:29 2008
From: newptcai at gmail.com (Peter Cai)
Date: Mon, 17 Nov 2008 15:47:29 +0800
Subject: [Twisted-Python] Non-blocking UDP output?
Message-ID: <befee6d80811162347o29a0a5f0yb45c26526b7b0bd4@mail.gmail.com>

Hi all,

Today I read this line in "Unix Networking Programming".  It seems
that UDP output might be blocking.

          We also said in Section 2.11 that there is no actual UDP
socket send buffer. The kernel just copies the application data and
moves it down the stack, prepending the UDP and IP headers. Therefore,
an output operation on a blocking UDP socket (the default) will not
block for the same reason as a TCP socket, but it is possible for
output operations to block on some systems due to the buffering and
flow control that happens within the networking code in the kernel.

But as far as I know,  when I write "transport.write" in twisted code,
 it actually called "sendto" on the socket without using "select".

Doesn't this conflict with the "non-blocking" philosophy of twisted?



From exarkun at divmod.com  Mon Nov 17 09:46:14 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 17 Nov 2008 09:46:14 -0500
Subject: [Twisted-Python] Non-blocking UDP output?
In-Reply-To: <befee6d80811162347o29a0a5f0yb45c26526b7b0bd4@mail.gmail.com>
Message-ID: <20081117144614.20272.1991123399.divmod.quotient.6712@ohm>

On Mon, 17 Nov 2008 15:47:29 +0800, Peter Cai <newptcai at gmail.com> wrote:
>Hi all,
>
>Today I read this line in "Unix Networking Programming".  It seems
>that UDP output might be blocking.
>
>          We also said in Section 2.11 that there is no actual UDP
>socket send buffer. The kernel just copies the application data and
>moves it down the stack, prepending the UDP and IP headers. Therefore,
>an output operation on a blocking UDP socket (the default) will not
>block for the same reason as a TCP socket, but it is possible for
>output operations to block on some systems due to the buffering and
>flow control that happens within the networking code in the kernel.
>
>But as far as I know,  when I write "transport.write" in twisted code,
> it actually called "sendto" on the socket without using "select".
>
>Doesn't this conflict with the "non-blocking" philosophy of twisted?
>

The UDP socket is in non-blocking mode, so writing to it will not block.

However,

http://twistedmatrix.com/trac/ticket/3396
http://twistedmatrix.com/trac/ticket/3364
http://twistedmatrix.com/trac/ticket/2802
http://twistedmatrix.com/trac/ticket/2790
http://twistedmatrix.com/trac/ticket/2627
http://twistedmatrix.com/trac/ticket/2513
http://twistedmatrix.com/trac/ticket/2493


Jean-Paul



From radix at twistedmatrix.com  Mon Nov 17 10:09:45 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 17 Nov 2008 10:09:45 -0500
Subject: [Twisted-Python] Re: ANN: 8.2.0pre1
In-Reply-To: <60ed19d40811161757u71913b3es1a338615ff8abb2@mail.gmail.com>
References: <60ed19d40811161757u71913b3es1a338615ff8abb2@mail.gmail.com>
Message-ID: <60ed19d40811170709h6c610c2cp8f3ff312f806362f@mail.gmail.com>

On Sun, Nov 16, 2008 at 8:57 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> Hi everybody,
>
> Please check out the first pre-release of Twisted 8.2.0, the first
> release since April. The downloads are available at:
>
>    http://twistedmatrix.com/users/radix/8.2.0pre1/
>
> And the NEWS file is available at:
>
>    http://twistedmatrix.com/users/radix/8.2.0pre1/NEWS.txt
>
> If there are no problems reported with this pre-release, it will be
> re-cut as Twisted 8.2.0.

Thomas Herv? has put together some Windows installers at

http://twistedmatrix.com/users/therve/

please give them a try if you're on Windows. There is one for Python 2.6.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/

From pthomas at spongelava.com  Mon Nov 17 14:11:56 2008
From: pthomas at spongelava.com (Paul Thomas)
Date: Mon, 17 Nov 2008 19:11:56 +0000
Subject: [Twisted-Python] Opening a fifo
In-Reply-To: <6C0543AA-C607-448C-AEFD-624AF56AA2F0@spongelava.com>
References: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>	<491D4937.7020101@imperial.ac.uk>
	<5D3577ED-E6C4-4F67-93D6-03B7B6BDDEDD@spongelava.com>
	<491D5A51.3080802@imperial.ac.uk>
	<6C0543AA-C607-448C-AEFD-624AF56AA2F0@spongelava.com>
Message-ID: <0DA4DFCD-4EBC-4826-9633-41A5F6FE1ADE@spongelava.com>


On 14 Nov 2008, at 11:39, Paul Thomas wrote:
>
> On 14 Nov 2008, at 11:00, Phil Mayers wrote:
>
>> Paul Thomas wrote:
>>> On 14 Nov 2008, at 09:47, Phil Mayers wrote:
>>>> Paul Thomas wrote:
>>>>> Hi,
>>>>> I've run into a small problem where my twisted application needs  
>>>>> to open a fifo to talk to another process. On Linux at least,  
>>>>> the open blocks until the other end of the fifo is opened and  
>>>>> this is blocking my reactor.
>>>>
>>

[snip]

>>>> fd = os.open('thefifo', os.O_RDWR)
>>>>
>>>> ...will return immediately,
>>>>

[snip]

> I'll have to wait til Monday to try it out again. I thought the  
> problem was to do with the other process opening the read end  
> between the open and the write. But maybe it was a case of not  
> testing what I thought I was testing.

This works just fine:

fd = os.open('thefifo', os.O_RDWR | os.O_NONBLOCK)

thanks for your help.

Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081117/b2f0bce0/attachment.htm 

From warner at lothar.com  Mon Nov 17 18:49:41 2008
From: warner at lothar.com (Brian Warner)
Date: Mon, 17 Nov 2008 15:49:41 -0800
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <20081115232624.12555.987093130.divmod.xquotient.53@weber.divmod.com>
References: <20081114185500.301cc10f@fluxx.allmydata.com>
	<20081114200606.7638caa9@fluxx.allmydata.com>
	<491EFA5E.6000505@nu.no>
	<20081115232624.12555.987093130.divmod.xquotient.53@weber.divmod.com>
Message-ID: <20081117154941.7f13d449@fluxx.allmydata.com>

> Ideally, Deferred just shouldn't have this problem. If we can't eliminate
> the problem entirely, then we can at least add a more useful error message
> which can explain how you can start debugging.

Yeah, when I last looked into this (a couple years ago), I figured that the
Deferred doesn't have enough information to safely optimize out the
tail-call. You never know who else might have a handle on the Deferred and
might add a new callback to it. It once occurred to me that it might be
easier to do this safely if Deferred were broken up into two pieces (like E's
Promise/Resolver pair: basically one side would get .callback and .errback,
while the other side would get .addCallbacks/etc), but I didn't pursue that
thought very far.

Using an eventual-send is unfortunate but correct (in that it will reliably
avoid the problem, but it's probably a noticable performance hit to blow away
the entire stack for each call). An unwise-but-less-unfortunate approach
would be to use an eventual-send only when it appears necessary, as in the
following strawman:

class Deferred:
    def _continue(self, result):
        self.result = result
        if len(traceback.extract_stack()) > sys.getrecursionlimit() - 100:
            eventually(self.unpause)
        else:
            self.unpause()


It might be enough to have Defer._runCallbacks() look to see if the result of
callback() is a recursion-depth-exceeded RuntimeError and do something
special in response to it. Zooko showed me some code that would temporarily
raise sys.setrecursionlimit() so that the error could be Failure-ized
properly.. maybe that would be enough. A lot of the frustration cause by this
sort of problem is that the Failure-rendering code runs out of stack space
too.

cheers,
 -Brian



From exarkun at divmod.com  Mon Nov 17 19:04:05 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 17 Nov 2008 19:04:05 -0500
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <20081117154941.7f13d449@fluxx.allmydata.com>
Message-ID: <20081118000405.20272.1013994295.divmod.quotient.6912@ohm>

On Mon, 17 Nov 2008 15:49:41 -0800, Brian Warner <warner at lothar.com> wrote:
>> Ideally, Deferred just shouldn't have this problem. If we can't eliminate
>> the problem entirely, then we can at least add a more useful error message
>> which can explain how you can start debugging.
>
>Yeah, when I last looked into this (a couple years ago), I figured that the
>Deferred doesn't have enough information to safely optimize out the
>tail-call. You never know who else might have a handle on the Deferred and
>might add a new callback to it. It once occurred to me that it might be
>easier to do this safely if Deferred were broken up into two pieces (like E's
>Promise/Resolver pair: basically one side would get .callback and .errback,
>while the other side would get .addCallbacks/etc), but I didn't pursue that
>thought very far.

Of course, the best response to this would be an implementation of the
iterative version of _runCallbacks.  However, I do think it is possible
to get rid of this recursion.  It doesn't really matter who else might
have a reference to either Deferred involved.  The new frame going onto
the stack is just another Deferred._runCallbacks (unless a subclass
overrides it, but DeferredList is the only subclass in Twisted, and we
should really deprecated it, and continue to discourage people from
subclassing Deferred, and _runCallbacks is private anyway so there).
The recurser (ie, the Deferred._runCallbacks doing the `self.result.addBoth(
self._continue)? knows how the recursee (ie, the Deferred having addBoth
called on it) behaves - just like itself.  The obvious transformation
(inlining a bunch of code from outside of _runCallbacks into _runCallbacks)
will result in something that's really ugly, but it should work.  And I
think there is probably an approach that's less ugly, too.

This addresses only one of the problems you raised, but it's the one I
think Glyph was talking about eliminating by changing the implementation
of Deferred.

It's possible there's a way to remove the other one with an implementation
change to Deferred as well (but it's not as clear to me what that change is
yet).  However, it's much easier to avoid that one by writing code in a
slightly different way.

eventual-send is one different way, but there are also other more efficient
approaches which are also always correct.  These generally take the form
of avoiding creating a giant stack of Deferreds in the first place by only
changing each Deferred which would have been "interior" on that stack to
the one immediately beneath it and chaining the bottom directly to the top.

Jean-Paul



From newptcai at gmail.com  Mon Nov 17 20:52:41 2008
From: newptcai at gmail.com (Peter Cai)
Date: Tue, 18 Nov 2008 09:52:41 +0800
Subject: [Twisted-Python] Non-blocking UDP output?
In-Reply-To: <20081117144614.20272.1991123399.divmod.quotient.6712@ohm>
References: <befee6d80811162347o29a0a5f0yb45c26526b7b0bd4@mail.gmail.com>
	<20081117144614.20272.1991123399.divmod.quotient.6712@ohm>
Message-ID: <befee6d80811171752g75da0233w50ae84d702a6a4e0@mail.gmail.com>

I know.  But write to UDP socket might fail.  And I didn't see any
error handle code.

Seems that twisted amuse that calling sendto on UDP would never fail.

On Mon, Nov 17, 2008 at 10:46 PM, Jean-Paul Calderone
<exarkun at divmod.com> wrote:
> On Mon, 17 Nov 2008 15:47:29 +0800, Peter Cai <newptcai at gmail.com> wrote:
>>
>> Hi all,
>>
>> Today I read this line in "Unix Networking Programming".  It seems
>> that UDP output might be blocking.
>>
>>         We also said in Section 2.11 that there is no actual UDP
>> socket send buffer. The kernel just copies the application data and
>> moves it down the stack, prepending the UDP and IP headers. Therefore,
>> an output operation on a blocking UDP socket (the default) will not
>> block for the same reason as a TCP socket, but it is possible for
>> output operations to block on some systems due to the buffering and
>> flow control that happens within the networking code in the kernel.
>>
>> But as far as I know,  when I write "transport.write" in twisted code,
>> it actually called "sendto" on the socket without using "select".
>>
>> Doesn't this conflict with the "non-blocking" philosophy of twisted?
>>
>
> The UDP socket is in non-blocking mode, so writing to it will not block.
>
> However,
>
> http://twistedmatrix.com/trac/ticket/3396
> http://twistedmatrix.com/trac/ticket/3364
> http://twistedmatrix.com/trac/ticket/2802
> http://twistedmatrix.com/trac/ticket/2790
> http://twistedmatrix.com/trac/ticket/2627
> http://twistedmatrix.com/trac/ticket/2513
> http://twistedmatrix.com/trac/ticket/2493
>
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

From andrew-twisted at puzzling.org  Mon Nov 17 22:06:21 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 18 Nov 2008 14:06:21 +1100
Subject: [Twisted-Python] Non-blocking UDP output?
In-Reply-To: <befee6d80811171752g75da0233w50ae84d702a6a4e0@mail.gmail.com>
References: <befee6d80811162347o29a0a5f0yb45c26526b7b0bd4@mail.gmail.com>
	<20081117144614.20272.1991123399.divmod.quotient.6712@ohm>
	<befee6d80811171752g75da0233w50ae84d702a6a4e0@mail.gmail.com>
Message-ID: <20081118030621.GJ15633@steerpike.home.puzzling.org>

Peter Cai wrote:
> I know.  But write to UDP socket might fail.  And I didn't see any
> error handle code.

Here's the code in twisted/internet/udp.py that calls sendto:

            try:
                return self.socket.sendto(datagram, addr)
            except socket.error, se:
                # [snipped; a whole bunch of error handling]

> Seems that twisted amuse that calling sendto on UDP would never fail.

I don't know why you think that Twisted assumes that, as the code clearly
does expect to handle errors from sendto, including EINTR.

-Andrew.



From wthie at thiengineering.ch  Tue Nov 18 03:39:50 2008
From: wthie at thiengineering.ch (Werner Thie)
Date: Tue, 18 Nov 2008 09:39:50 +0100
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <20081114185500.301cc10f@fluxx.allmydata.com>
References: <20081114185500.301cc10f@fluxx.allmydata.com>
Message-ID: <49227F56.9090109@thiengineering.ch>

Just to add my 2cts:

a quick solution to the problem is using stackless and setting 
sys.setrecursionlimit(sys.maxint). Your test code runs no problem with

            :
for i in range(100000):
     d.addCallback(fire, i)
            :

on a lousy Athlon dualcore with stackless compiled in:

Python 2.5.2 Stackless 3.1b3 060516 (release25-maint, Sep 26 2008, 
10:22:13) [MSC v.1310 32 bit (Intel)] on win32

For more than a year now I'm using stackless for all my Python projects 
without resorting to tasklets and the stuff stackless is really aiming 
at. I do so because getting rid of the C-stack is a major point in 
modern language design and implementation and in my opinion Python lags 
somewhat in this particular area.

It is of course true that one must be able to rebuild all the C based 
stuff you're using in a project but doing so is and was always at the 
center of my projects.

HTH, Werner


Brian Warner wrote:
> About once every six months, I wind up debugging a python stack
> overflow in my Deferred-using code. The symptom is usually a log
> message that ends with:
snip...



From gabriel.rossetti at arimaz.com  Wed Nov 19 09:43:36 2008
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Wed, 19 Nov 2008 15:43:36 +0100
Subject: [Twisted-Python] trial testing messages
Message-ID: <49242618.9070300@arimaz.com>

Hello,

I am writing unit tests using trial. I am trying to make sure that the 
received messages are processed correctly and the output messages are 
correct. I tried using toXml(), but the XML attributes aren't 
necessaraly in the correct order, so a string comparison doesn't work. I 
had originally submitted a patch to allow domish.Element to be compared 
(ticket #3344), but my patch isn't liked. So my question is, how may I 
test this?

Thank you,
Gabriel



From exarkun at divmod.com  Wed Nov 19 11:01:35 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 19 Nov 2008 11:01:35 -0500
Subject: [Twisted-Python] trial testing messages
In-Reply-To: <49242618.9070300@arimaz.com>
Message-ID: <20081119160135.20272.946054504.divmod.quotient.7826@ohm>

On Wed, 19 Nov 2008 15:43:36 +0100, Gabriel Rossetti <gabriel.rossetti at arimaz.com> wrote:
>Hello,
>
>I am writing unit tests using trial. I am trying to make sure that the 
>received messages are processed correctly and the output messages are 
>correct. I tried using toXml(), but the XML attributes aren't necessaraly in 
>the correct order, so a string comparison doesn't work. I had originally 
>submitted a patch to allow domish.Element to be compared (ticket #3344), but 
>my patch isn't liked. So my question is, how may I test this?

If you keep agitating about #3344, then it should get resolved eventually.
Commenting on the ticket is good, but if that doesn't get you anywhere, you
might want to find people on IRC or follow up on the mailing list.

That aside, you should be able to use the solution you proposed for
inclusion in Twisted without actually having Twisted change.  You can
just implement comparison as a free function which takes two elements
and implements the logic you're interested in.  You'll have to use
TestCase.assertTrue(equals(a, b)) instead of TestCase.assertEqual(a, b)
but that's a pretty minor difference.  Hopefully this will be an interim
solution until domish.Elements gain the feature you want, but this might
serve you elsewhere in a more long-term fashion.  There can only be one
definition of equality for a particular type.  It is necessarily the case
that this definition won't always be what everyone wants to use.

Jean-Paul



From ddwiggins at advpubtech.com  Wed Nov 19 19:38:54 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Wed, 19 Nov 2008 16:38:54 -0800
Subject: [Twisted-Python] Exception handling in t.e.adbapi
Message-ID: <gg2biv$gi9$1@ger.gmane.org>

I've been using adbapi (with pyodbc talking to MS SQL Server) 
successfully in a Windows service.  I've discovered that occasionally, 
the network between the service and the database machine goes down and 
comes back up (either that or the database server itself cycles down and 
back up).  When this happens, any pyodbc connections hanging around are 
corrupted, so that the next query gets an exception (class 
pyodbc.Error).  Currently, the best thing I can do is to restart the 
service.

I'm trying to rewrite the service to be able to catch, analyze, and 
respond to exceptions from pyodbc.  In particular, in the case above, 
it's possible to reconnect and retry the query.  If the network 
connection is still down, I'd like to log it, send a message to alert 
someone, or whatever.

I've rewritten a ConnectionPool.runQuery call to use runInteraction to 
call a function (in a thread) that works with the cursor created in 
runInteraction to execute the query.  The function wraps the 
cursor.execute(...) in a try-except.  I can successfully catch the 
exception, and I try to recover by doing cursor.reconnect(), then 
cursor.reopen(), and finally cursor.execute(...) again.  I'm finding 
that this fails with a "wrong connection for thread" exception.  I 
haven't been able to figure out why that should happen; more 
importantly, I'm not sure that I'm going about this in the right way. 
Any insights or pointers to code that does this kind of thing would be 
appreciated.

Thanks,
-- 
Don Dwiggins
Advanced Publishing Technology




From exarkun at divmod.com  Wed Nov 19 19:45:42 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 19 Nov 2008 19:45:42 -0500
Subject: [Twisted-Python] Exception handling in t.e.adbapi
In-Reply-To: <gg2biv$gi9$1@ger.gmane.org>
Message-ID: <20081120004542.20272.1393426497.divmod.quotient.8037@ohm>

On Wed, 19 Nov 2008 16:38:54 -0800, Don Dwiggins <ddwiggins at advpubtech.com> wrote:
>I've been using adbapi (with pyodbc talking to MS SQL Server) successfully 
>in a Windows service.  I've discovered that occasionally, the network 
>between the service and the database machine goes down and comes back up 
>(either that or the database server itself cycles down and back up).  When 
>this happens, any pyodbc connections hanging around are corrupted, so that 
>the next query gets an exception (class pyodbc.Error).  Currently, the best 
>thing I can do is to restart the service.
>
>I'm trying to rewrite the service to be able to catch, analyze, and respond 
>to exceptions from pyodbc.  In particular, in the case above, it's possible 
>to reconnect and retry the query.  If the network connection is still down, 
>I'd like to log it, send a message to alert someone, or whatever.

How do you tell the difference between a network error which prevented a
statement from being executed by the SQL server and a network error which
only prevented the response indicating that the statement was successfully
executed from being returned to you?  If you can't tell the difference, how
do you ensure that you don't re-execute statements which modify the database
causing corruption of your data?

>I've rewritten a ConnectionPool.runQuery call to use runInteraction to call 
>a function (in a thread) that works with the cursor created in 
>runInteraction to execute the query.  The function wraps the 
>cursor.execute(...) in a try-except.  I can successfully catch the 
>exception, and I try to recover by doing cursor.reconnect(), then 
>cursor.reopen(), and finally cursor.execute(...) again.  I'm finding that 
>this fails with a "wrong connection for thread" exception.  I haven't been 
>able to figure out why that should happen; more importantly, I'm not sure 
>that I'm going about this in the right way. Any insights or pointers to code 
>that does this kind of thing would be appreciated.

I've never used pyodbc, but presumably the exception indicates you're
using the objects in a thread where they're not allowed to be used.  You
should find out what the threading restrictions of the module are and
then see where you're violating them.  One thing to keep in mind is that
ConnectionPool uses a ThreadPool.  That means you're never guaranteed that
two different functions will run in the same thread.  Whichever thread in
the pool is free will run the next task.

Jean-Paul



From gabriel.rossetti at arimaz.com  Thu Nov 20 02:03:26 2008
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 20 Nov 2008 08:03:26 +0100
Subject: [Twisted-Python] trial testing messages
In-Reply-To: <20081119160135.20272.946054504.divmod.quotient.7826@ohm>
References: <20081119160135.20272.946054504.divmod.quotient.7826@ohm>
Message-ID: <49250BBE.5050903@arimaz.com>

Jean-Paul Calderone wrote:
> On Wed, 19 Nov 2008 15:43:36 +0100, Gabriel Rossetti 
> <gabriel.rossetti at arimaz.com> wrote:
>> Hello,
>>
>> I am writing unit tests using trial. I am trying to make sure that 
>> the received messages are processed correctly and the output messages 
>> are correct. I tried using toXml(), but the XML attributes aren't 
>> necessaraly in the correct order, so a string comparison doesn't 
>> work. I had originally submitted a patch to allow domish.Element to 
>> be compared (ticket #3344), but my patch isn't liked. So my question 
>> is, how may I test this?
>
> If you keep agitating about #3344, then it should get resolved 
> eventually.
> Commenting on the ticket is good, but if that doesn't get you 
> anywhere, you
> might want to find people on IRC or follow up on the mailing list.
>
Ok, thanks for the tip, I didn't want to be annoying
> That aside, you should be able to use the solution you proposed for
> inclusion in Twisted without actually having Twisted change.  You can
> just implement comparison as a free function which takes two elements
> and implements the logic you're interested in.  You'll have to use
> TestCase.assertTrue(equals(a, b)) instead of TestCase.assertEqual(a, b)
> but that's a pretty minor difference.  Hopefully this will be an interim
> solution until domish.Elements gain the feature you want, but this might
> serve you elsewhere in a more long-term fashion.  There can only be one
> definition of equality for a particular type.  It is necessarily the case
> that this definition won't always be what everyone wants to use.
>
> Jean-Paul

Ok, I'll do that then for now, you're right, thanks Jean-Paul.

Gabriel



From peter at sabaini.at  Thu Nov 20 11:58:32 2008
From: peter at sabaini.at (Peter Sabaini)
Date: Thu, 20 Nov 2008 17:58:32 +0100
Subject: [Twisted-Python] Connectionless AMP?
Message-ID: <200811201758.38700.peter@sabaini.at>

Hello,

I want to implement a messageing protocol running on top of TIPC / SOCK_RDM to 
be able to do multicasting; ie. send messages in a connectionless manner. 

I implemented some TIPC support, but I now wonder how to go about the 
protocol. Originally, I thought about using AMP, but this seems to assume a 
connection-oriented transport. 

How would you go about this? Should it be possible to use a datagram-like, 
connection-less transport with AMP? Or should I rather take a more low-level 
approach, eg. by using IntNStringReceiver and roll my own?

Thanks for any advice.

peter.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081120/43ae8211/attachment.pgp 

From wthie at thiengineering.ch  Thu Nov 20 12:50:07 2008
From: wthie at thiengineering.ch (Werner Thie)
Date: Thu, 20 Nov 2008 18:50:07 +0100
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <200811201758.38700.peter@sabaini.at>
References: <200811201758.38700.peter@sabaini.at>
Message-ID: <4925A34F.7060406@thiengineering.ch>

Hi

I tried to enhance my test.tac file with

              :
application = service.Application("test")
application.setComponent(ILogObserver, LogFile('test.log', '/var/log/', 
rotateLength=10000).write)
              :

The logfile is created but the log messages vanish into thin air, log 
file size remains at zero.

What am I doing wrong?

TIA, Werner



From ddwiggins at advpubtech.com  Thu Nov 20 14:44:30 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Thu, 20 Nov 2008 11:44:30 -0800
Subject: [Twisted-Python] Re: Exception handling in t.e.adbapi
In-Reply-To: <20081120004542.20272.1393426497.divmod.quotient.8037@ohm>
References: <gg2biv$gi9$1@ger.gmane.org>
	<20081120004542.20272.1393426497.divmod.quotient.8037@ohm>
Message-ID: <gg4emv$2fm$1@ger.gmane.org>

Jean-Paul, thanks for the reply:
  > How do you tell the difference between a network error which prevented a
> statement from being executed by the SQL server and a network error which
> only prevented the response indicating that the statement was successfully
> executed from being returned to you?  If you can't tell the difference, how
> do you ensure that you don't re-execute statements which modify the 
> database causing corruption of your data?

Well, I was a bit cryptic in my description.  Based on experience with 
SQL Server and experimentation with different conditions, I'm pretty 
sure I can tell from the exception data whether the statement completed 
successfully.  You're right, though, I do need to be careful about this.

> I've never used pyodbc, but presumably the exception indicates you're
> using the objects in a thread where they're not allowed to be used.

By tracing through the operation of adbapi, I figured out why I was 
getting that message when the network is down:  Connection.reconnect 
does a ConnectionPool.disconnect followed by a ConnectionPool.connect, 
which does a dbapi.connect; this fails, since the network is still down. 
  The exception is caught in _runInteraction, which tries to do a 
conn.rollback, which calls ConnectionPool.disconnect.  Since there's no 
connection at this point, I get the "wrong connection" exception.

The moral of the story seems to be that I need to rethink how to detect 
the difference between a "stale" connection with the network back up, 
and a network down condition.  Another possibility would be to adapt 
adbapi to work in one-connection-per-operation mode, so there'd never be 
an open connection hanging around.  (This sort of defeats the point of 
ConnectionPool, but the API of the module would be preserved.)

-- 
Don Dwiggins
Advanced Publishing Technology




From exarkun at divmod.com  Thu Nov 20 14:53:04 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 20 Nov 2008 14:53:04 -0500
Subject: [Twisted-Python] Connectionless AMP?
In-Reply-To: <200811201758.38700.peter@sabaini.at>
Message-ID: <20081120195304.20272.129619320.divmod.quotient.8396@ohm>

On Thu, 20 Nov 2008 17:58:32 +0100, Peter Sabaini <peter at sabaini.at> wrote:
>Hello,
>
>I want to implement a messageing protocol running on top of TIPC / SOCK_RDM to
>be able to do multicasting; ie. send messages in a connectionless manner.
>
>I implemented some TIPC support, but I now wonder how to go about the
>protocol. Originally, I thought about using AMP, but this seems to assume a
>connection-oriented transport.
>
>How would you go about this? Should it be possible to use a datagram-like,
>connection-less transport with AMP? Or should I rather take a more low-level
>approach, eg. by using IntNStringReceiver and roll my own?
>
>Thanks for any advice.

You can use AMP to format your datagrams, but you'll have to do extra work
if you want any of the command-related functionality to work, since it
assumes a reliable transport.

`AmpBox? has a `serialize? method and `twisted.protocols.amp? has the free
function `parseString?.

Jean-Paul



From exarkun at divmod.com  Thu Nov 20 14:54:44 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 20 Nov 2008 14:54:44 -0500
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <4925A34F.7060406@thiengineering.ch>
Message-ID: <20081120195444.20272.735994427.divmod.quotient.8399@ohm>

On Thu, 20 Nov 2008 18:50:07 +0100, Werner Thie <wthie at thiengineering.ch> wrote:
>Hi
>
>I tried to enhance my test.tac file with
>
>              :
>application = service.Application("test")
>application.setComponent(ILogObserver, LogFile('test.log', '/var/log/', 
>rotateLength=10000).write)
>              :
>
>The logfile is created but the log messages vanish into thin air, log file 
>size remains at zero.
>
>What am I doing wrong?

Are you using trunk at 25379 or newer?

Jean-Paul



From radix at twistedmatrix.com  Thu Nov 20 14:58:12 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 Nov 2008 14:58:12 -0500
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <4925A34F.7060406@thiengineering.ch>
References: <200811201758.38700.peter@sabaini.at>
	<4925A34F.7060406@thiengineering.ch>
Message-ID: <60ed19d40811201158m592ef595g793206e8dfc597be@mail.gmail.com>

On Thu, Nov 20, 2008 at 12:50 PM, Werner Thie <wthie at thiengineering.ch> wrote:
> Hi
>
> I tried to enhance my test.tac file with
>
>             :
> application = service.Application("test")
> application.setComponent(ILogObserver, LogFile('test.log', '/var/log/',
> rotateLength=10000).write)

You should not pass the write method as an observer: an observer must
be a callable that takes a dict.

You probably want to import FileLogObserver from twisted.python.log,
and pass an instance of that:

application.setComponent(ILogObserver,
FileLogObserver(LogFile("test.log", "/var/log", rotateLength=10000)))


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From peter at sabaini.at  Thu Nov 20 15:17:55 2008
From: peter at sabaini.at (Peter Sabaini)
Date: Thu, 20 Nov 2008 21:17:55 +0100
Subject: [Twisted-Python] Connectionless AMP?
In-Reply-To: <20081120195304.20272.129619320.divmod.quotient.8396@ohm>
References: <20081120195304.20272.129619320.divmod.quotient.8396@ohm>
Message-ID: <200811202118.12613.peter@sabaini.at>

On Thursday 20 November 2008 20:53:04 Jean-Paul Calderone wrote:
> On Thu, 20 Nov 2008 17:58:32 +0100, Peter Sabaini <peter at sabaini.at> wrote:
> >Hello,
> >
> >I want to implement a messageing protocol running on top of TIPC /
> > SOCK_RDM to be able to do multicasting; ie. send messages in a
> > connectionless manner.
> >
> >I implemented some TIPC support, but I now wonder how to go about the
> >protocol. Originally, I thought about using AMP, but this seems to assume
> > a connection-oriented transport.
> >
> >How would you go about this? Should it be possible to use a datagram-like,
> >connection-less transport with AMP? Or should I rather take a more
> > low-level approach, eg. by using IntNStringReceiver and roll my own?
> >
> >Thanks for any advice.
>
> You can use AMP to format your datagrams, but you'll have to do extra work
> if you want any of the command-related functionality to work, since it
> assumes a reliable transport.
>
> `AmpBox? has a `serialize? method and `twisted.protocols.amp? has the free
> function `parseString?.

Thanks, I'll try that!

peter.

>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081120/fbe84f26/attachment.pgp 

From radix at twistedmatrix.com  Thu Nov 20 15:33:09 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 Nov 2008 15:33:09 -0500
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <60ed19d40811201158m592ef595g793206e8dfc597be@mail.gmail.com>
References: <200811201758.38700.peter@sabaini.at>
	<4925A34F.7060406@thiengineering.ch>
	<60ed19d40811201158m592ef595g793206e8dfc597be@mail.gmail.com>
Message-ID: <60ed19d40811201233n73dec59ele8158cdca9efbcd7@mail.gmail.com>

On Thu, Nov 20, 2008 at 2:58 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> On Thu, Nov 20, 2008 at 12:50 PM, Werner Thie <wthie at thiengineering.ch> wrote:
>> Hi
>>
>> I tried to enhance my test.tac file with
>>
>>             :
>> application = service.Application("test")
>> application.setComponent(ILogObserver, LogFile('test.log', '/var/log/',
>> rotateLength=10000).write)
>
> You should not pass the write method as an observer: an observer must
> be a callable that takes a dict.
>
> You probably want to import FileLogObserver from twisted.python.log,
> and pass an instance of that:
>
> application.setComponent(ILogObserver,
> FileLogObserver(LogFile("test.log", "/var/log", rotateLength=10000)))

Sorry, I didn't test this code. Change that to...

application.setComponent(ILogObserver,
FileLogObserver(LogFile("test.log", "/var/log",
rotateLength=10000)).emit)

maybe that code will work.


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From reza at getpeer.com  Thu Nov 20 18:25:06 2008
From: reza at getpeer.com (Reza Lotun)
Date: Thu, 20 Nov 2008 23:25:06 +0000
Subject: [Twisted-Python] Connection Manager
Message-ID: <356e30830811201525x7f8dc2f3meab158774916d4b7@mail.gmail.com>

Hi All,

I've been thinking of implementing a connection manager in twisted. The app
I'm working on has various parts or "modules" that individually make
separate connections to various services and what not. They basically act
independently of each other - as in they're all scheduled connection calls
and what not.

I'm interested in mediating these connections through a "Dispatcher" of
sorts - what I'm thinking would be a thin wrapper over the reactor, with
extra state. One of the things the Dispatcher would do is gauge network
connection health - something like periodically attempting to ping/connect
to well known internet sites. If the connection ever degrades or fails, the
Dispatcher would change state. Fairly straightforward, conceptually at
least.

My questions are twofold - is the general idea sound - how is such a thing
implemented elsewhere? Also, what would be the best strategy to implement
the above, if the idea is sane?

I was thinking something like this: my Dispatcher would have something like
a connectTCP call which would in turn call the reactor.connectTCP with a
special DispatcherFactory. As the returned IConnector calls
startedConnecting on the DispatcherFactory, it would check internal state,
figure out a policy and decide whether to continue with the connection and
call the passed in factory's buildProctol, or call the IConnector
stopConnecting to pause the connection attempt. If the situation improves
later on, the IConnector.connect can be called to "resume" the connection
attempt.

Any feedback would be greatly appreciated.

Thanks,
Reza

-- 
Reza Lotun
Senior Software Engineer
GetPeer Limited
reza at getpeer.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081120/34f4aa8a/attachment.htm 

From jack at chesspark.com  Thu Nov 20 19:00:33 2008
From: jack at chesspark.com (Jack Moffitt)
Date: Thu, 20 Nov 2008 17:00:33 -0700
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
Message-ID: <9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>

I would like to propose that #3463
(http://twistedmatrix.com/trac/ticket/3463) be additionally committed
to the 8.1 branch and any other branches that still get point
releases.  It is a pretty critical workaround which fixes the fact
that recent OpenSSL libraries cannot connect to Java based services.
This means that most of the packaged versions of Twisted cannot talk
to Google Talk or any Tigase or Openfire XMPP servers.  Since
packagers are often reluctant to upgrade very far in a particular
distribution, I would like to get bug fix releases out for Twisted
8.1, etc, so that we have some hope that this problem will go away as
soon as possible.

jack.



From radix at twistedmatrix.com  Thu Nov 20 20:11:33 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 Nov 2008 20:11:33 -0500
Subject: [Twisted-Python] Please test Twisted 8.2.0pre2 and tell me whether
	it works
Message-ID: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>

I just uploaded 8.2.0pre2 tarballs, which include one bugfix since
8.2.0pre1 which was deemed important enough to be backported:

 - TLS Session Tickets are now disabled by default, allowing connections to
   certain servers which hang when an empty session ticket is received (like
   GTalk) (#3463)


The tarballs are at

    http://twistedmatrix.com/users/radix/8.2.0pre2/

If you want to test 8.2.0pre2 on Windows, Thomas Herv? may be able to
build installers some time tomorrow.


Please test it out - I haven't heard any results from the pre1 release
yet. If you don't test it then 8.2.0 will be horrible, and it will be
your fault. You know, I've heard some people are using Twisted to
manage puppy incubators. Think of the puppies.

http://www.ustream.tv/channel/shiba-inu-puppy-cam




-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/

From wthie at thiengineering.ch  Fri Nov 21 01:15:18 2008
From: wthie at thiengineering.ch (Werner Thie)
Date: Fri, 21 Nov 2008 07:15:18 +0100
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <60ed19d40811201233n73dec59ele8158cdca9efbcd7@mail.gmail.com>
References: <200811201758.38700.peter@sabaini.at>	<4925A34F.7060406@thiengineering.ch>	<60ed19d40811201158m592ef595g793206e8dfc597be@mail.gmail.com>
	<60ed19d40811201233n73dec59ele8158cdca9efbcd7@mail.gmail.com>
Message-ID: <492651F6.60904@thiengineering.ch>

Thank you so much, works like a charm!

Isn't this a snippet which could go into the FAQ about twistd? Or should 
there be a WIKI page about logging in general?

Werner

Christopher Armstrong wrote:
> On Thu, Nov 20, 2008 at 2:58 PM, Christopher Armstrong
> <radix at twistedmatrix.com> wrote:
>> On Thu, Nov 20, 2008 at 12:50 PM, Werner Thie <wthie at thiengineering.ch> wrote:
>>> Hi
>>>
>>> I tried to enhance my test.tac file with
>>>
>>>             :
>>> application = service.Application("test")
>>> application.setComponent(ILogObserver, LogFile('test.log', '/var/log/',
>>> rotateLength=10000).write)
>> You should not pass the write method as an observer: an observer must
>> be a callable that takes a dict.
>>
>> You probably want to import FileLogObserver from twisted.python.log,
>> and pass an instance of that:
>>
>> application.setComponent(ILogObserver,
>> FileLogObserver(LogFile("test.log", "/var/log", rotateLength=10000)))
> 
> Sorry, I didn't test this code. Change that to...
> 
> application.setComponent(ILogObserver,
> FileLogObserver(LogFile("test.log", "/var/log",
> rotateLength=10000)).emit)
> 
> maybe that code will work.
> 
> 



From therve at free.fr  Fri Nov 21 05:01:49 2008
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Fri, 21 Nov 2008 11:01:49 +0100
Subject: [Twisted-Python] Please test Twisted 8.2.0pre2 and tell me
	whether it works
In-Reply-To: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
References: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
Message-ID: <1227261709.6359.5.camel@brainwave>

Le jeudi 20 novembre 2008 ? 20:11 -0500, Christopher Armstrong a ?crit :
> I just uploaded 8.2.0pre2 tarballs, which include one bugfix since
> 8.2.0pre1 which was deemed important enough to be backported:
> 
>  - TLS Session Tickets are now disabled by default, allowing connections to
>    certain servers which hang when an empty session ticket is received (like
>    GTalk) (#3463)
> 
> 
> The tarballs are at
> 
>     http://twistedmatrix.com/users/radix/8.2.0pre2/
> 
> If you want to test 8.2.0pre2 on Windows, Thomas Herv? may be able to
> build installers some time tomorrow.

And indeed here they are:

      http://twistedmatrix.com/users/therve/


> Please test it out - I haven't heard any results from the pre1 release
> yet. If you don't test it then 8.2.0 will be horrible, and it will be
> your fault. You know, I've heard some people are using Twisted to
> manage puppy incubators. Think of the puppies.
> 
> http://www.ustream.tv/channel/shiba-inu-puppy-cam


Everytime a tarball is tested, a puppy is born!

-- 
Thomas




From radix at twistedmatrix.com  Fri Nov 21 09:55:19 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 21 Nov 2008 09:55:19 -0500
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <492651F6.60904@thiengineering.ch>
References: <200811201758.38700.peter@sabaini.at>
	<4925A34F.7060406@thiengineering.ch>
	<60ed19d40811201158m592ef595g793206e8dfc597be@mail.gmail.com>
	<60ed19d40811201233n73dec59ele8158cdca9efbcd7@mail.gmail.com>
	<492651F6.60904@thiengineering.ch>
Message-ID: <60ed19d40811210655n7dd0b9d1o843a1f41313f300@mail.gmail.com>

On Fri, Nov 21, 2008 at 1:15 AM, Werner Thie <wthie at thiengineering.ch> wrote:
> Thank you so much, works like a charm!
>
> Isn't this a snippet which could go into the FAQ about twistd? Or should
> there be a WIKI page about logging in general?

It's already documented in "Using the Twisted Application Framework",
which will be published to the web site as soon as the version of
Twisted which includes this new ILogObserver API is released. The
document is hosted in SVN at doc/core/howto/application.xhtml.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From terry at jon.es  Fri Nov 21 13:04:42 2008
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Nov 2008 19:04:42 +0100
Subject: [Twisted-Python] A kinder and more consistent defer.inlineCallbacks
Message-ID: <18726.63546.421944.685251@jon.es>

Here's a suggestion for making inlineCallbacks more consistent and less
confusing.  Let's suppose you're writing something like this:

    @inlineCallbacks
    def func():
        ....

    result = func()

There are 2 things that could be better, IMO:

1. func may not yield. In that case, you either get an AttributeError when
inlineCallbacks tries to send(). Or worse, the call to send might actually
work, and do who knows what. I.e., func() could return an object with a
send method but which is not a generator. For some fun, run some code that
calls the following decorated function (see if you can figure out what will
happen before you do):

    @defer.inlineCallbacks
    def f():
        class yes():
            def send(x, y):
                print 'yes'
                # accidentally_destroy_the_universe_too()
        return yes()

2. func might raise before it get to its first yield. In that case you'll
get an exception thrown when the inlineCallbacks decorator tries to create
the wrapper function:

    File "/usr/lib/python2.5/site-packages/twisted/internet/defer.py", line 813, in unwindGenerator
      return _inlineCallbacks(None, f(*args, **kwargs), Deferred())


There's a simple and consistent way to handle both of these. Just have
inlineCallbacks do some initial work based on what it has been passed:

    def altInlineCallbacks(f):
        def unwindGenerator(*args, **kwargs):
            deferred = defer.Deferred()
            try:
                result = f(*args, **kwargs)
            except Exception, e:
                deferred.errback(e)
                return deferred
            if isinstance(result, types.GeneratorType):
                return defer._inlineCallbacks(None, result, deferred)
            deferred.callback(result)
            return deferred

        return mergeFunctionMetadata(f, unwindGenerator)

This has the advantage that (barring e.g., a KeyboardInterrupt in the
middle of things) you'll *always* get a deferred back when you call an
inlineCallbacks decorated function. That deferred might have already called
or erred back (corresponding to cases 1 and 2 above).

I'm going to use this version of inlineCallbacks in my code.  There's a
case for it making it into Twisted itself: inlinecallbacks is already
cryptic enough in its operation that anything we can do to make its
operation more uniform and less surprising, the better.

You might think that case 1 rarely comes up. But I've hit it a few times,
usually when commenting out sections of code for testing. If you
accidentally comment out the last yield in func, it no longer returns a
generator and that causes a different error.

And case 2 happens to me too. Having inlinecallbacks try/except the call to
func is nicer because it means I don't have to be quite so defensive in
coding. So instead of me having to write

    try:
        d = func()
    except Exception:
        # ???

and try to figure out what happened if an exception fired, I can just write
d = func() and add errbacks as I please (they then have to figure out what
happened).  The (slight?) disadvantage to my suggestion is that with the
above try/except fragment you can tell if the call to func() raised before
ever yielding. You can detect that, if you need to, with my approach if
you're not offended by looking at d.called immediately after calling func.

The alternate approach also helps if you're a novice, or simply being
lazy/careless/forgetful, and writing:

    d = func()
    d.addCallback(ok)
    d.addErrback(not_ok)

thinking you have your ass covered, but you actually don't (due to case 2).

There's some test code attached that illustrates all this.

Terry

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: altInlineCallbacks.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081121/ab91d7f8/attachment.txt 

From itamar at itamarst.org  Fri Nov 21 13:20:59 2008
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 21 Nov 2008 13:20:59 -0500
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
Message-ID: <1227291659.16031.110.camel@pintsize>

On Thu, 2008-11-20 at 17:00 -0700, Jack Moffitt wrote:
> I would like to propose that #3463
> (http://twistedmatrix.com/trac/ticket/3463) be additionally committed
> to the 8.1 branch and any other branches that still get point
> releases.  It is a pretty critical workaround which fixes the fact
> that recent OpenSSL libraries cannot connect to Java based services.

Why not request relevant distros to do an openssl bugfix and backport?
It'd help more people than just twisted users.




From drew.smathers at gmail.com  Fri Nov 21 14:20:33 2008
From: drew.smathers at gmail.com (Drew Smathers)
Date: Fri, 21 Nov 2008 14:20:33 -0500
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: <18726.63546.421944.685251@jon.es>
References: <18726.63546.421944.685251@jon.es>
Message-ID: <368574aa0811211120l32b2df66j8031199aa17f7850@mail.gmail.com>

On Fri, Nov 21, 2008 at 1:04 PM, Terry Jones <terry at jon.es> wrote:
> Here's a suggestion for making inlineCallbacks more consistent and less
> confusing.  Let's suppose you're writing something like this:
>
>    @inlineCallbacks
>    def func():
>        ....
>
>    result = func()
>
> There are 2 things that could be better, IMO:
>
> 1. func may not yield. In that case, you either get an AttributeError when
> inlineCallbacks tries to send(). Or worse, the call to send might actually
> work, and do who knows what. I.e., func() could return an object with a
> send method but which is not a generator. For some fun, run some code that
> calls the following decorated function (see if you can figure out what will
> happen before you do):
>
>    @defer.inlineCallbacks
>    def f():
>        class yes():
>            def send(x, y):
>                print 'yes'
>                # accidentally_destroy_the_universe_too()
>        return yes()
>

Why not just return a Deferred from the function and not decorate it.
Or document the function as returning a value if it doesn't block.

> 2. func might raise before it get to its first yield. In that case you'll
> get an exception thrown when the inlineCallbacks decorator tries to create
> the wrapper function:
>
>    File "/usr/lib/python2.5/site-packages/twisted/internet/defer.py", line 813, in unwindGenerator
>      return _inlineCallbacks(None, f(*args, **kwargs), Deferred())
>
>
> There's a simple and consistent way to handle both of these. Just have
> inlineCallbacks do some initial work based on what it has been passed:
>
>    def altInlineCallbacks(f):
>        def unwindGenerator(*args, **kwargs):
>            deferred = defer.Deferred()
>            try:
>                result = f(*args, **kwargs)
>            except Exception, e:
>                deferred.errback(e)
>                return deferred
>            if isinstance(result, types.GeneratorType):
>                return defer._inlineCallbacks(None, result, deferred)
>            deferred.callback(result)
>            return deferred
>
>        return mergeFunctionMetadata(f, unwindGenerator)

Essentially this is equivalent to _not_ decorating your function and
returning a Deferred via defer.succeed(value) or defer.fail(error).
I'm still not sure why it's necessary to stitch this kind of behavior
into inlineCallbacks().  From my perspective inlineCallbacks() simply
equates: "I want to do more than one asynchronous operation inline and
here's some syntactic sugar using yield as an expression."

>
> This has the advantage that (barring e.g., a KeyboardInterrupt in the
> middle of things) you'll *always* get a deferred back when you call an
> inlineCallbacks decorated function. That deferred might have already called
> or erred back (corresponding to cases 1 and 2 above).
>

You will always get a Deferred  back if the function is a generator.

> I'm going to use this version of inlineCallbacks in my code.  There's a
> case for it making it into Twisted itself: inlinecallbacks is already
> cryptic enough in its operation that anything we can do to make its
> operation more uniform and less surprising, the better.
>
> You might think that case 1 rarely comes up. But I've hit it a few times,
> usually when commenting out sections of code for testing. If you
> accidentally comment out the last yield in func, it no longer returns a
> generator and that causes a different error.

That's what unit tests are for :)  But I'm not sure how you could
easily wind up in this scenario considering generators don't allow
return with an argument.

Drew



From twisted at ralphm.ik.nu  Fri Nov 21 15:00:44 2008
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Fri, 21 Nov 2008 21:00:44 +0100
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <1227291659.16031.110.camel@pintsize>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize>
Message-ID: <20081121200044.GA3342@ik.nu>

On Fri, Nov 21, 2008 at 01:20:59PM -0500, Itamar Shtull-Trauring wrote:
> On Thu, 2008-11-20 at 17:00 -0700, Jack Moffitt wrote:
> > I would like to propose that #3463
> > (http://twistedmatrix.com/trac/ticket/3463) be additionally committed
> > to the 8.1 branch and any other branches that still get point
> > releases.  It is a pretty critical workaround which fixes the fact
> > that recent OpenSSL libraries cannot connect to Java based services.
> 
> Why not request relevant distros to do an openssl bugfix and backport?
> It'd help more people than just twisted users.

Because it is actually a bug in Java, not in OpenSSL. It is just that
recent OpenSSL versions enable a feature (Session Tickets) that is
standards-wise backwards compatible.  Arguably, distributions could
choose to not enable the feature by default, but that doesn't have my
preference.

This change adds a option to choose if the feature is used, and disables
it by default because there is no further support in our SSL code for
it and it immediately helps fix a problem that I don't think will be
resolved server-side any time soon.

-- 
Groetjes,

ralphm



From terry at jon.es  Fri Nov 21 16:17:23 2008
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Nov 2008 22:17:23 +0100
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: Your message at 14:20:33 on Friday, 21 November 2008
References: <18726.63546.421944.685251@jon.es>
	<368574aa0811211120l32b2df66j8031199aa17f7850@mail.gmail.com>
Message-ID: <18727.9571.946049.640024@jon.es>

>>>>> "Drew" == Drew Smathers <drew.smathers at gmail.com> writes:
Drew> On Fri, Nov 21, 2008 at 1:04 PM, Terry Jones <terry at jon.es> wrote:

Drew> Why not just return a Deferred from the function and not decorate it.
Drew> Or document the function as returning a value if it doesn't block.

In that case (1) I'm considering what happens if you take the last yield
out of a function decorated with inlineCallbacks. You might do it via
commenting something out for testing, or you might do it just as a matter
of course in changing the behavior of the function.

If you do either of those, inlineCallbacks will raise an exception. With
the suggestion I sent, it will just run as expected: the original function
will be called, and you'll get the value it returns back as the result of
the returned deferred.

Drew> Essentially this is equivalent to _not_ decorating your function and
Drew> returning a Deferred via defer.succeed(value) or defer.fail(error).
Drew> I'm still not sure why it's necessary to stitch this kind of behavior
Drew> into inlineCallbacks().

It's not necessary, it just makes inlineCallbacks gracefully cover two
cases that it currently throws exceptions on, and it makes inlineCallbacks
always return a deferred, which is arguably also an advantage.

Drew> From my perspective inlineCallbacks() simply equates: "I want to do
Drew> more than one asynchronous operation inline and here's some syntactic
Drew> sugar using yield as an expression."

Right. I'm just making what's happening underneath a little more forgiving
and consistent in these two edge cases where things go awry.

The main point, to me, is that code changes over time. So you write a
function and use inlineCallbacks decorator for syntactic sugar. Then you,
or someone else, comes along a while later and change a few things. If you
take out the last yield without noticing, or your change throws an
exception before the first yield, then you've broken things and it may not
be clear why. In the first case, you get an exception thrown from deep
inside inlineCallbacks, and many/most people would have some trouble
figuring out what's going on. There's no need for that though.

>> This has the advantage that (barring e.g., a KeyboardInterrupt in the
>> middle of things) you'll *always* get a deferred back when you call an
>> inlineCallbacks decorated function. That deferred might have already
>> called or erred back (corresponding to cases 1 and 2 above).

Drew> You will always get a Deferred  back if the function is a generator.

But if you take out the last deferred, it's no longer a generator. And if
an exception happens before the first yield you don't get a deferred back
because the exception is raised before the inlineCallbacks created function
gets its first value from your generator.

They're just two simple scenarios that can be dealt with more cleanly.  If
it wasn't clear, the inlineCallbacks created function is identical. Your
code is still run identically. There's just a little pre-processing to see
if it even needs to be run.

Drew> That's what unit tests are for :) But I'm not sure how you could
Drew> easily wind up in this scenario considering generators don't allow
Drew> return with an argument.

Right. But a function can just fall off the end, implicitly returning
None.

And I gave two examples, plus simple code, that illustrates how both of the
problems I'm addressing can arise. It's not about having return in a
function. One part is about turning a generator into a non-generator by
removing the final yield. The other's just about introducing an exception
into your code. I've run into both situations, more than once, and in both
had the reaction that inlineCallbacks could have been more accomodating or
helpful in how it behaves.

Fortunately I can just use my own version!  :-)

Sorry if I wasn't being clear enough first time round.

Regards,
Terry



From terry at jon.es  Fri Nov 21 16:32:24 2008
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Nov 2008 22:32:24 +0100
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: Your message at 14:20:33 on Friday, 21 November 2008
References: <18726.63546.421944.685251@jon.es>
	<368574aa0811211120l32b2df66j8031199aa17f7850@mail.gmail.com>
Message-ID: <18727.10472.165444.631503@jon.es>

Here's another way of looking at what I proposed.

When you call a function, you can divide what happens into 3 possibilities:

 1) An exception is raised
 2) You get back a generator
 3) You get back something else

(Yes, I'm ignoring aborts, sys.exit, etc).


As it stands, all three of these are handled inside _inlineCallbacks (not
in inlineCallbacks). With the code I suggested, the call to f is made
before _inlineCallbacks is called. Only in case 2, where we actually have a
generator, do we ask _inlineCallbacks to deal with unwinding it. In case 1
we pass the exception back via a deferred errback with a failure and in
case 2 we pass the result back in a deferred whose callback is already
called.  There's a good case (perhaps a stronger one) for just letting the
Exception go on its merry way and raise back in the calling code. But it's
hard to argue that knowing that we don't even have a generator result that
passing it on to _inlineCallbacks in the knowledge that it's going to
cryptically raise is better than just returning the result of the user's
function, especially seeing as it has just successfully run to completion!

Terry



From glyph at divmod.com  Fri Nov 21 21:57:41 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 22 Nov 2008 02:57:41 -0000
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081121200044.GA3342@ik.nu>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
Message-ID: <20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>

On 21 Nov, 08:00 pm, twisted at ralphm.ik.nu wrote:
>On Fri, Nov 21, 2008 at 01:20:59PM -0500, Itamar Shtull-Trauring wrote:
>>On Thu, 2008-11-20 at 17:00 -0700, Jack Moffitt wrote:
>> > I would like to propose that #3463
>> > (http://twistedmatrix.com/trac/ticket/3463) be additionally 
>>committed
>> > to the 8.1 branch and any other branches that still get point
>> > releases.  It is a pretty critical workaround which fixes the fact
>> > that recent OpenSSL libraries cannot connect to Java based services.
>>
>>Why not request relevant distros to do an openssl bugfix and backport?
>>It'd help more people than just twisted users.
>
>Because it is actually a bug in Java, not in OpenSSL. It is just that
>recent OpenSSL versions enable a feature (Session Tickets) that is
>standards-wise backwards compatible.  Arguably, distributions could
>choose to not enable the feature by default, but that doesn't have my
>preference.
>
>This change adds a option to choose if the feature is used, and 
>disables
>it by default because there is no further support in our SSL code for
>it and it immediately helps fix a problem that I don't think will be
>resolved server-side any time soon.

If the "fix" for Twisted is to just disable this feature by default, 
then it should remain disabled by default for everybody.  Including it 
in the build so that people who want it can enable it is fine, but 
leaving it on by default for other libraries besides Twisted seems 
wrong.

In other words, this really has nothing to do with Twisted, and 
everything to do with the fact that Debian should not be screwing around 
with OpenSSL.  Have they already forgotten what happened last time?



From glyph at divmod.com  Fri Nov 21 22:18:06 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 22 Nov 2008 03:18:06 -0000
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: <18726.63546.421944.685251@jon.es>
References: <18726.63546.421944.685251@jon.es>
Message-ID: <20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>


On 21 Nov, 06:04 pm, terry at jon.es wrote:
>Here's a suggestion for making inlineCallbacks more consistent and less
>confusing.  Let's suppose you're writing something like this:

Let's put this a bit less vaguely: inlineCallbacks appears to have a 
bug: 'raise' before 'yield' in a generator results in a synchronous 
exception rather than an errback, although its documentation does not 
explain this.

inlineCallbacks is also unhelpful in debugging a particular type of 
error - it doesn't tell you what happened if you unintentionally 
returned something other than a generator, it just blows up without your 
code on the stack, and no mention of your code in the error message.

These are definitely interesting problems.  I think there should 
probably be a ticket for each one.  I don't like your solution, though.
>1. func may not yield. In that case, you either get an AttributeError 
>when
>inlineCallbacks tries to send().

Following you so far.
>Or worse, the call to send might actually
>work, and do who knows what. I.e., func() could return an object with a
>send method but which is not a generator.

Now I'm not sure what you're talking about.  Do you have a lot of very 
dangerous objects lying around with methods called 'send'?  ;-)

This is an important behavior which should continue to be supported.  If 
we don't, then users will get surprising behavior if they try to mix 
inlineCallbacks with other decorators that modify generators.  A 
"generator-like" object (iterable with 'send') should be good enough.
>For some fun, run some code that
>calls the following decorated function

In this particular case, there may be a third ticket to file, i.e. to 
refuse to accept objects that implement __call__ and send but not 
__iter__ and next; however, this infinite loop seems really, really 
obscure.  Have you actually hit it in real life?
>2. func might raise before it get to its first yield. In that case 
>you'll
>get an exception thrown when the inlineCallbacks decorator tries to 
>create
>the wrapper function:

Definitely problematic.  Code expecting to handle errors with an errback 
should not need to have an except: block as well.
>There's a simple and consistent way to handle both of these. Just have
>inlineCallbacks do some initial work based on what it has been passed:

isinstance() is bad for the reasons I mentioned above.
>This has the advantage that (barring e.g., a KeyboardInterrupt in the
>middle of things) you'll *always* get a deferred back when you call an
>inlineCallbacks decorated function. That deferred might have already 
>called
>or erred back (corresponding to cases 1 and 2 above).

This property, however, I definitely think is a desirable one.
>And case 2 happens to me too. Having inlinecallbacks try/except the 
>call to
>func is nicer because it means I don't have to be quite so defensive in
>coding. So instead of me having to write
>
>    try:
>        d = func()
>    except Exception:
>        # ???

IMHO the most important thing discussed here.  Not quite sure how to do 
this change in a compatible way; some people might be depending on this 
weird behavior.  @inlineCallbacks2?  @inlineCallbacks(beGood=YES)? 
Suggestions are appreciated.



From glyph at divmod.com  Fri Nov 21 22:27:52 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 22 Nov 2008 03:27:52 -0000
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: <20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>
References: <18726.63546.421944.685251@jon.es>
	<20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>
Message-ID: <20081122032752.12555.1107286101.divmod.xquotient.272@weber.divmod.com>

On 03:18 am, glyph at divmod.com wrote:
>
>On 21 Nov, 06:04 pm, terry at jon.es wrote:
>>Here's a suggestion for making inlineCallbacks more consistent and 
>>less
>>confusing.  Let's suppose you're writing something like this:
>
>inlineCallbacks appears to have a bug: 'raise' before 'yield' in a 
>generator results in a synchronous exception rather than an errback, 
>although its documentation does not explain this.

Ugh, scratch that.  No, it doesn't have this bug.  When I read this:
>>2. func might raise before it get to its first yield. In that case 
>>you'll
>>get an exception thrown when the inlineCallbacks decorator tries to 
>>create
>>the wrapper function:

I did some quick testing and saw some tracebacks, but apparently wasn't 
paying very close attention to them; they were unhandled-traceback-in- 
deferred tracebacks, and they *did* have the application code in 
question on the stack.  Run this and observe:

    from twisted.internet.defer import succeed, inlineCallbacks, 
returnValue
    @inlineCallbacks
    def f():
        result = 1 / 0
        yield returnValue(succeed(result))
    print f().addErrback(lambda err: err.trap(ZeroDivisionError) and 2)

If func "raises before it gets to its first yield", we get the right 
behavior.  If it just raises and doesn't yield *anywhere*, then it's not 
a generator and that's the same as your other case of accidentally-not- 
returning-a-generator.  Still worth debugging, but not as serious.



From mithrandi at mithrandi.net  Sat Nov 22 04:05:00 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 22 Nov 2008 11:05:00 +0200
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
Message-ID: <20081122090500.GC30443@mithrandi.net>

* glyph at divmod.com <glyph at divmod.com> [2008-11-22 02:57:41 -0000]:

> In other words, this really has nothing to do with Twisted, and  
> everything to do with the fact that Debian should not be screwing around  
> with OpenSSL.  Have they already forgotten what happened last time?

Isn't this an upstream change?

> OpenSSL CHANGES
> _______________
>
>  Changes between 0.9.8e and 0.9.8f  [11 Oct 2007]
[...]
>   *) Add RFC4507 support to OpenSSL. This includes the corrections in
>      RFC4507bis. The encrypted ticket format is an encrypted encoded
>      SSL_SESSION structure, that way new session features are automatically
>      supported.
> 
>      If a client application caches session in an SSL_SESSION structure
>      support is transparent because tickets are now stored in the encoded
>      SSL_SESSION.
> 
>      The SSL_CTX structure automatically generates keys for ticket
>      protection in servers so again support should be possible
>      with no application modification.
> 
>      If a client or server wishes to disable RFC4507 support then the option
>      SSL_OP_NO_TICKET can be set.
> 
>      Add a TLS extension debugging callback to allow the contents of any client
>      or server extensions to be examined.
> 
>      This work was sponsored by Google.
>      [Steve Henson]

I'll admit to lack of familiarity with OpenSSL, and this functionality
in particular, so maybe I'm just confused.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081122/e9e8bd20/attachment.pgp 

From therve at free.fr  Sat Nov 22 10:06:47 2008
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Sat, 22 Nov 2008 16:06:47 +0100
Subject: [Twisted-Python] Libevent bindings and reactor
Message-ID: <1227366407.6411.19.camel@brainwave>

Hi all!

I've been working on a Libevent reactor for quite a long time now:
http://twistedmatrix.com/trac/ticket/1930 (sheesh, 2 years). For
different reasons I didn't manage (yet) to include something within
Twisted itself, so I (re)started an external project to do it.

For those who don't know libevent, it's an abstraction layer around
select/poll/epoll/... to write portable applications. See
http://www.monkey.org/~provos/libevent/.

I thought it'll be easier for people who just want to use the libevent
bindings to have an external project, and it's also a way to make people
test it and get some feedback, without having to checkout a SVN branch.

The project is now accessible on launchpad:
https://launchpad.net/python-libevent (original project is recorded
there: http://pypi.python.org/pypi/libevent-python). The latest version,
0.3, includes a libevent reactor, and a twisted plugins so that it's
easily usable with trial and twistd (just pass -r libevent to both once
installed).

Note that these bindings only work with a recent enough version of
Libevent itself (1.4). My PPA (https://launchpad.net/~therve/+archive)
should help users of Hardy (although for some reasons the twisted plugin
doesn't install correctly).

Thanks for any comment/feedback.

-- 
Thomas




From terry at jon.es  Sat Nov 22 12:50:11 2008
From: terry at jon.es (Terry Jones)
Date: Sat, 22 Nov 2008 18:50:11 +0100
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: Your message at 03:27:52 on Saturday, 22 November 2008
References: <18726.63546.421944.685251@jon.es>
	<20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>
	<20081122032752.12555.1107286101.divmod.xquotient.272@weber.divmod.com>
Message-ID: <18728.18003.274698.614115@jon.es>

Hi Glyph

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:

>> inlineCallbacks appears to have a bug: 'raise' before 'yield' in a
>> generator results in a synchronous exception rather than an errback,
>> although its documentation does not explain this.

glyph> Ugh, scratch that.  No, it doesn't have this bug.

Yes, you're right.

glyph> I did some quick testing and saw some tracebacks, but apparently
glyph> wasn't paying very close attention to them

Nor was I, sorry!

glyph> If func "raises before it gets to its first yield", we get the right
glyph> behavior.  If it just raises and doesn't yield *anywhere*, then it's
glyph> not a generator and that's the same as your other case of
glyph> accidentally-not- returning-a-generator.  Still worth debugging, but
glyph> not as serious.

Agreed.  I also agree with your earlier remarks about dropping the
isinstance(result, GeneratorType). That leaves me with an alternative:

    def altInlineCallbacks(f):
        def unwindGenerator(*args, **kwargs):
            try:
                result = f(*args, **kwargs)
            except Exception, e:
                # f was not a generator.
                return failure.Failure()
            return _inlineCallbacks(None, result, Deferred())
        return mergeFunctionMetadata(f, unwindGenerator)

and still the problem that _inlineCallbacks raises if result doesn't have a
send() method, etc. I'm also not sure of the best way to check for that,
but don't think it should be in the _inlineCallbacks loop.

---

BTW, there is a coding lesson here (at least for me):

The reason I started to think there was a problem with Exceptions,
tracebacks and _inlineCallbacks was from running code like this:

    @inlineCallbacks
    def f():
        try:
            # something
        except Exception:
            # clean up
            raise

When I ran it, the traceback of the Exception that propagated back to the
attached errback would (sometimes) show the exception as having being
triggered in _inlineCallbacks, like this:

    2008/11/22 17:29 +0200 [-]   File "/usr/lib/python2.5/site-packages/twisted/internet/defer.py", line 726, in _inlineCallbacks
    2008/11/22 17:29 +0200 [-]     result = g.send(result)

The problem, as I guess will be obvious, is that my raise was delivering
whatever sys.exc_info returned after the clean-up was done. In my case this
was confusing as although the clean-up code had succeeded, it had called
things that also made use of inlineCallbacks and the exception I was
finally raising, and whose traceback I was printing, was a StopIteration
raised inside *another* call of _inlineCallbacks! So it looked like
_inlineCallbacks was somehow raising instead of sending a failure back to
the errback...

Re-raising the original exception made everything make sense.

Thanks a lot for taking a look.

Terry



From jack at chesspark.com  Sat Nov 22 13:02:01 2008
From: jack at chesspark.com (Jack Moffitt)
Date: Sat, 22 Nov 2008 11:02:01 -0700
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
Message-ID: <9b58f4550811221002o7b1c2ee0w619f53608735afe3@mail.gmail.com>

> In other words, this really has nothing to do with Twisted, and everything
> to do with the fact that Debian should not be screwing around with OpenSSL.
>  Have they already forgotten what happened last time?

Nothing to do with Twisted, yet this means that all my users attempt
to use my code will likely fail unless they recompile their distro's
openssl or upgrade to the next  version (if it gets fixed upstream in
a next verison).

This essentially makes my code useless to many, not to mention a pain
in the ass for myself.

You've already committed the fix to 8.2 and trunk.  All I'm asking is
for a bugfix release for 8.1 and possibily 8.0.  I don't understand
why we are arguing about whether the fix is correct when the question
is whether to backport it; it is already accepted and committed.

jack.



From bg at capitalmarketsp.com  Sat Nov 22 15:31:05 2008
From: bg at capitalmarketsp.com (Beau Gould)
Date: Sat, 22 Nov 2008 15:31:05 -0500
Subject: [Twisted-Python] [JOB] Sr. Backend Developer,
	Eugene or Portland | 60-90k
Message-ID: <545875B62E3E443A999DB9817A08D21F@EMACHINE>

Responsibilities: 
* Work in a team building scalable web applications 
* Use test-driven development practices to ensure code correctness 
* Document code, track and fix bugs, respond rapidly to emergencies in
production environment 
* Work with product group throughout development cycle to ensure quality
of end product 
* Networking protocols such as TCP, UDP, HTTP, DNS, NAT, etc 
* Clustering and load balancing solutions for redundancy, high
availability, scalability 
* Network programming (event-driven, asynchronous) 
* Experience analyzing large and complex systems for performance
bottlenecks 
* Python, AJAX, PHP, C/C++ 
* LAMP 
* Scalable MySQL schema designs 
* Jabber/XMPP 
* Twisted Python 
* Spread Toolkit 

Requirements for this position: 
* Bachelors in Computer Science or related work experience. Masters
degree is a plus 
* Ability to work on-site in Eugene, Oregon (preferred) or Portland,
Oregon 
* 5+ years experience developing large scale software systems (10K+
concurrent users) 

To be considered, please submit your resume along with your salary
requirements to bg @ capitalmarketsp.com 

Beau Gould 
Executive Advisor 
Capital Markets Placement 
www.cmp.jobs 
bg @ capitalmarketsp.com




From glyph at divmod.com  Sat Nov 22 22:18:46 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 23 Nov 2008 03:18:46 -0000
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <9b58f4550811221002o7b1c2ee0w619f53608735afe3@mail.gmail.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
	<9b58f4550811221002o7b1c2ee0w619f53608735afe3@mail.gmail.com>
Message-ID: <20081123031846.12555.871620718.divmod.xquotient.361@weber.divmod.com>


On 22 Nov, 06:02 pm, jack at chesspark.com wrote:
>>In other words, this really has nothing to do with Twisted, and 
>>everything
>>to do with the fact that Debian should not be screwing around with 
>>OpenSSL.
>>  Have they already forgotten what happened last time?
>
>Nothing to do with Twisted, yet this means that all my users attempt
>to use my code will likely fail unless they recompile their distro's
>openssl or upgrade to the next  version (if it gets fixed upstream in
>a next verison).

Sorry, you seem to have misunderstood me.  I'm not saying "let's not 
backport this fix".  I'm saying that backporting the fix is a band-aid; 
the real issue is in the openssl package.  Some effort should be devoted 
to fixing it there.

Also, you could apply an equally band-aid solution to your own code 
immediately.  It shouldn't interfere with the band-aid in Twisted.
>This essentially makes my code useless to many, not to mention a pain
>in the ass for myself.

You're not the only one.  The only reason that a zillion people haven't 
noticed this already is that pidgin uses nspr/nss to talk to gtalk, not 
openssl.
>You've already committed the fix to 8.2 and trunk.  All I'm asking is
>for a bugfix release for 8.1 and possibily 8.0.  I don't understand
>why we are arguing about whether the fix is correct when the question
>is whether to backport it; it is already accepted and committed.

As far as I'm concerned this is entirely up to the discretion of the 
release manager, Christopher Armstrong.  For my part I'm +0, unless 
doing a maintenance release will actually get Ubuntu to include the 
fixed 8.1 in an update, in which case I'm +1.

And again, I'm not against it, but I don't see the point of backporting 
to 8.0; who will have both twisted 8.0 and a system affected by this 
issue?



From glyph at divmod.com  Sat Nov 22 22:25:37 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 23 Nov 2008 03:25:37 -0000
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081122090500.GC30443@mithrandi.net>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
	<20081122090500.GC30443@mithrandi.net>
Message-ID: <20081123032537.12555.389456649.divmod.xquotient.375@weber.divmod.com>

On 22 Nov, 09:05 am, mithrandi at mithrandi.net wrote:
>* glyph at divmod.com <glyph at divmod.com> [2008-11-22 02:57:41 -0000]:
>>In other words, this really has nothing to do with Twisted, and
>>everything to do with the fact that Debian should not be screwing 
>>around
>>with OpenSSL.  Have they already forgotten what happened last time?
>
>Isn't this an upstream change?

Hrm.  I gleaned this from looking at some diffs to makefiles that were 
added to the debian package.  My understanding was that the feature was 
disabled by default, though.  Hardy, for example, already has a 'g' 
version of openssl as well, and the feature is not enabled there.

My understanding is that upstream added the feature, but left it 
disabled by default, then debian turned it on in their build 
configuration.
>>OpenSSL CHANGES
(...)
>>      This work was sponsored by Google.
>>      [Steve Henson]

That particular line was a little funny though.
>I'll admit to lack of familiarity with OpenSSL, and this functionality
>in particular, so maybe I'm just confused.

Equally possible that I'm confused, though.  I'm not 100% sure where the 
makefile that I'm loooking at diffs to came from.



From glyph at divmod.com  Sat Nov 22 22:40:46 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 23 Nov 2008 03:40:46 -0000
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: <18728.18003.274698.614115@jon.es>
References: <18726.63546.421944.685251@jon.es>
	<20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>
	<20081122032752.12555.1107286101.divmod.xquotient.272@weber.divmod.com>
	<18728.18003.274698.614115@jon.es>
Message-ID: <20081123034046.12555.221437023.divmod.xquotient.391@weber.divmod.com>

On 22 Nov, 05:50 pm, terry at jon.es wrote:
>Agreed.  I also agree with your earlier remarks about dropping the
>isinstance(result, GeneratorType). That leaves me with an alternative:
>
>    def altInlineCallbacks(f):
>        def unwindGenerator(*args, **kwargs):
>            try:
>                result = f(*args, **kwargs)
>            except Exception, e:
>                # f was not a generator.
>                return failure.Failure()
                        ^
I hope you mean "defer.fail()".
>and still the problem that _inlineCallbacks raises if result doesn't 
>have a
>send() method, etc. I'm also not sure of the best way to check for 
>that,
>but don't think it should be in the _inlineCallbacks loop.

As with the other case we mistakenly diagnosed here, it doesn't actually 
raise.  It returns a failed Deferred.  Consider:

    from twisted.internet.defer import inlineCallbacks
    @inlineCallbacks
    def notDeferred():
        return object()
    def ok(result):
        ae = result.trap(AttributeError)
        print 'OK', ae
    notDeferred().addErrback(ok)

The only thing that (potentially) needs to be done here is to produce a 
more useful error message.  The other case, where inlineCallbacks 
decorates a function that itself raises an exception rather than returns 
an object, is the only way you won't get a Deferred.



From mithrandi at mithrandi.net  Sat Nov 22 22:44:18 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 23 Nov 2008 05:44:18 +0200
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081123032537.12555.389456649.divmod.xquotient.375@weber.divmod.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
	<20081122090500.GC30443@mithrandi.net>
	<20081123032537.12555.389456649.divmod.xquotient.375@weber.divmod.com>
Message-ID: <20081123034417.GC27768@mithrandi.net>

* glyph at divmod.com <glyph at divmod.com> [2008-11-23 03:25:37 -0000]:

> My understanding is that upstream added the feature, but left it  
> disabled by default, then debian turned it on in their build  
> configuration.

I guess maybe this is the problem, then:

openssl (0.9.8g-7) unstable; urgency=low

  * Upload to unstable.

 -- Kurt Roeckx <kurt at roeckx.be>  Wed, 13 Feb 2008 22:22:29 +0000

[...]

openssl (0.9.8g-5) experimental; urgency=low

  * Enable tlsext.  This changes the ABI, but should hopefully
    not cause any problems. (Closes: #462596)

 -- Kurt Roeckx <kurt at roeckx.be>  Sat, 09 Feb 2008 13:32:49 +0100

#462596 is "openssl: Please include support for tls extensions / server
name indication", which provides this motivation:

Apache will probably start to support server name indication (SNI) in
one of the next 2.2.x releases. To use it,  TLS extension support needs
to be compiled into openssl. This has been added to openssl 0.9.8f but
is not activated by default.

>>> OpenSSL CHANGES
> (...)
>>>      This work was sponsored by Google.
>>>      [Steve Henson]
>
> That particular line was a little funny though.

Teehee :)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081123/5c1a0278/attachment.pgp 

From mithrandi at mithrandi.net  Sat Nov 22 22:53:03 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 23 Nov 2008 05:53:03 +0200
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081123034417.GC27768@mithrandi.net>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
	<20081122090500.GC30443@mithrandi.net>
	<20081123032537.12555.389456649.divmod.xquotient.375@weber.divmod.com>
	<20081123034417.GC27768@mithrandi.net>
Message-ID: <20081123035303.GD27768@mithrandi.net>

* Tristan Seligmann <mithrandi at mithrandi.net> [2008-11-23 05:44:18 +0200]:

> I guess maybe this is the problem, then:

I also noticed this:

> openssl (0.9.8g-8) unstable; urgency=high
> 
>   * Don't add extentions to ssl v3 connections.  It breaks with some
>     other software.  (Closes: #471681)
> 
>  -- Kurt Roeckx <kurt at roeckx.be>  Sun, 23 Mar 2008 17:50:04 +0000
> 
> #471681
> libssl0.9.8: XChat cannot connect to irc.mozilla.org:6697
> 
> When libssl0.9.8 0.9.8g-7 is installed xchat 2.8.2-1 (custom build with
> a ping timeout patch) and 2.8.4-2 fail to
> connect to irc.mozilla.org/6697 using SSL with the following message:
> 
> * Connection failed. Error: (336151568) error:14094410:SSL
> * routines:SSL3_READ_BYTES:sslv3 alert handshake failure

[...]

> I can reproduce your problem.  It's the change between 0.9.8g-4 and 
> 0.9.8g-5 that causes the problem that we didn't expect to break
> anything.

Tee hee.

> [...]

> So it seems that openssl is sending something different while
> I can't see a reason why it should be sending something different.

I guess he figured it out in the end, though.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20081123/b998c837/attachment.pgp 

From terry at jon.es  Sat Nov 22 22:58:54 2008
From: terry at jon.es (Terry Jones)
Date: Sun, 23 Nov 2008 04:58:54 +0100
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: Your message at 03:40:46 on Sunday, 23 November 2008
References: <18726.63546.421944.685251@jon.es>
	<20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>
	<20081122032752.12555.1107286101.divmod.xquotient.272@weber.divmod.com>
	<18728.18003.274698.614115@jon.es>
	<20081123034046.12555.221437023.divmod.xquotient.391@weber.divmod.com>
Message-ID: <18728.54526.64709.788597@jon.es>

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> On 22 Nov, 05:50 pm, terry at jon.es wrote:
>> def altInlineCallbacks(f):
>>   def unwindGenerator(*args, **kwargs):
>>     try:
>>       result = f(*args, **kwargs)
>>     except Exception, e:
>>       # f was not a generator.
>>       return failure.Failure()

glyph> I hope you mean "defer.fail()".

Yes, sorry.

glyph> As with the other case we mistakenly diagnosed here, it doesn't
glyph> actually raise.  It returns a failed Deferred.  Consider:

Yes, that was my original case, passing a non-generator and getting an
attribute error when _inlineCallbacks calls send. That one I knew goes back
via the Deferred.

glyph> The only thing that (potentially) needs to be done here is to
glyph> produce a more useful error message.

glyph> The other case, where inlineCallbacks decorates a function that
glyph> itself raises an exception rather than returns an object, is the
glyph> only way you won't get a Deferred.

That's what I was addressing in the code above. If you call the function in
unwindGenerator and you get an exception, you 1) know it's not a generator
(that's what I didn't understand earlier - calling a function with a yield
in it can never give you an exception, Python builds you a generator and
gives you that) and 2) can immediately give the exception back via
defer.fail (your correction above).  That's a simple change and makes sure
you always get a Deferred back.

Terry



From exarkun at twistedmatrix.com  Sun Nov 23 00:05:12 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 Nov 2008 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1227416712.45.1450190161@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081123/33fd93ab/attachment.htm 

From nahueldefosse at yahoo.com.ar  Mon Nov 24 03:37:34 2008
From: nahueldefosse at yahoo.com.ar (Nahuel =?utf-8?q?Defoss=C3=A9?=)
Date: Mon, 24 Nov 2008 06:37:34 -0200
Subject: [Twisted-Python] Running a GUI application based on PyQt
Message-ID: <200811240637.34481.nahueldefosse@yahoo.com.ar>

Hi,
I'm trying to use a simple application based in twisted.internet.Protocol with 
PyQt4.
PyQt has its own way of dealing with events, I've tried to run the reactor in 
a thread, but it says it only can acquire SIGINT from the main thread :(
I've tried the code posted in qt4reactor.py but it doesn't work. It fails 
telling that a reactor's been already installed.
Is it possible to use PyQt4 (v.4.4) with twisted?

Thanks
Nahuel



From reza at getpeer.com  Mon Nov 24 04:38:29 2008
From: reza at getpeer.com (Reza Lotun)
Date: Mon, 24 Nov 2008 09:38:29 +0000
Subject: [Twisted-Python] Running a GUI application based on PyQt
In-Reply-To: <200811240637.34481.nahueldefosse@yahoo.com.ar>
References: <200811240637.34481.nahueldefosse@yahoo.com.ar>
Message-ID: <356e30830811240138u3588cf5dxfcea77e4450a14e8@mail.gmail.com>

On Mon, Nov 24, 2008 at 8:37 AM, Nahuel Defoss?
<nahueldefosse at yahoo.com.ar>wrote:

> Hi,
> I'm trying to use a simple application based in twisted.internet.Protocol
> with
> PyQt4.
> PyQt has its own way of dealing with events, I've tried to run the reactor
> in
> a thread, but it says it only can acquire SIGINT from the main thread :(
>
>
Hi Nahuel,

I don't have any way of testing qt4reactor.py easily, but if you run your
reactor in a separate thread, make sure to instruct twisted not to install
its signal handlers with a:

reactor.run(installSignalHandlers=0)

Hope that helps,
Reza


-- 
Reza Lotun
Senior Software Engineer
GetPeer Limited
reza at getpeer.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081124/b9ce0620/attachment.htm 

From itamar at itamarst.org  Mon Nov 24 08:28:18 2008
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Nov 2008 08:28:18 -0500
Subject: [Twisted-Python] Running a GUI application based on PyQt
In-Reply-To: <200811240637.34481.nahueldefosse@yahoo.com.ar>
References: <200811240637.34481.nahueldefosse@yahoo.com.ar>
Message-ID: <1227533298.16031.121.camel@pintsize>

On Mon, 2008-11-24 at 06:37 -0200, Nahuel Defoss? wrote:
> I've tried the code posted in qt4reactor.py but it doesn't work. It fails 
> telling that a reactor's been already installed.
> Is it possible to use PyQt4 (v.4.4) with twisted?

Only import "twisted.internet.reactor" *after* you've installed
qt4reactor. Importing auto-installs reactor if one hasn't already been
installed.




From exarkun at divmod.com  Mon Nov 24 13:07:17 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 24 Nov 2008 13:07:17 -0500
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: <18728.54526.64709.788597@jon.es>
Message-ID: <20081124180717.20272.92083444.divmod.quotient.10383@ohm>

On Sun, 23 Nov 2008 04:58:54 +0100, Terry Jones <terry at jon.es> wrote:
> [snip]
>
>That's what I was addressing in the code above. If you call the function in
>unwindGenerator and you get an exception, you 1) know it's not a generator
>(that's what I didn't understand earlier - calling a function with a yield
>in it can never give you an exception, Python builds you a generator and
>gives you that)

Not quite:

  >>> def f():
  ...     yield None
  ... 
  >>> f(1, 2, 3)
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  TypeError: f() takes no arguments (3 given)
  >>> 

And unfortunately, there is essentially no way to differentiate this case
from a case where the call to `f? succeeded but some code executed as a
result of that raised a `TypeError?.

See also <http://twistedmatrix.com/trac/ticket/2501>.

Jean-Paul



From asset at impactdamage.com  Mon Nov 24 19:19:59 2008
From: asset at impactdamage.com (asset)
Date: Mon, 24 Nov 2008 17:19:59 -0700
Subject: [Twisted-Python] Blocking reactor.connectSSL()
Message-ID: <db24c893d147434897b580c2bc1e90fd@maila5.webcontrolcenter.com>

Is there a workaround for reactor.connectSSL() blocking during the SSL handshake?

I dug around and found some indications that it could be a problem fixed in Python 2.6 and 3.0, but also that its something that is worked around in Twisted, but I havent been able to find any reference to the issue with Twisted specifically.

TKiel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081124/5888e61f/attachment.htm 

From exarkun at divmod.com  Mon Nov 24 22:05:53 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 24 Nov 2008 22:05:53 -0500
Subject: [Twisted-Python] Blocking reactor.connectSSL()
In-Reply-To: <db24c893d147434897b580c2bc1e90fd@maila5.webcontrolcenter.com>
Message-ID: <20081125030553.20272.2107940106.divmod.quotient.10593@ohm>

On Mon, 24 Nov 2008 17:19:59 -0700, asset <asset at impactdamage.com> wrote:
>Is there a workaround for reactor.connectSSL() blocking during the SSL handshake?

It only blocks while it is performing the calculations for the crypto.  It
does not block on I/O during the crypto.  Generally, this isn't a problem.
If you have a large number of handshakes happening all the time and you
have another CPU, then you might get better resource utilization if you
offload the handshake crypto to the other processor, but you might also
get a win by using SSL sessions to reduce the connection setup overhead.

>
>I dug around and found some indications that it could be a problem fixed in Python 2.6 and 3.0, but also that its something that is worked around in Twisted, but I havent been able to find any reference to the issue with Twisted specifically.

I'm not sure what indications these would have been.  There are no significant
changes in Twisted's SSL support for Python 2.6 and Python 3.0 is not supported
by Twisted.

Jean-Paul



From adigeaydin at gmail.com  Tue Nov 25 05:41:46 2008
From: adigeaydin at gmail.com (=?ISO-8859-9?Q?Ayd=FDn_=DEEN?=)
Date: Tue, 25 Nov 2008 12:41:46 +0200
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
Message-ID: <2196d7e0811250241w1da57ddar9bf246eec74c1ced@mail.gmail.com>

Hi,
I am trying to send file which is in the client's disk, i am using
LineReceiver in the server side. I am sending and receiving data like login
stuff but when i start to read & send file LineReceiver method doesnt run in
the server side. Sending file code part is below, what can be cause of this?

* i am reading 100 kb parts of file and send it, is it best choice? or
reading file once and send it better?

   KB = 1024 * 100
   while True:

                    if (KB > file_size) | (KB == file_size):

                        data = self.file.read(file_size)
                        self.send_data(data)
                        self.sended += file_size
                        self.file.close()
                        break

                    else:
                            data = self.file.read(KB)
                            file_size -= KB
                            self.send_data(data)
                            self.sended += KB

def send_data(self, data):

   self.transport.write(data + '\r\n')
-- 
Ayd?n ?EN

         Ege ?niversitesi
Uluslararas? Bilgisayar Enstit?s?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081125/acbd2a2b/attachment.htm 

From exarkun at divmod.com  Tue Nov 25 09:17:52 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Nov 2008 09:17:52 -0500
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
In-Reply-To: <2196d7e0811250241w1da57ddar9bf246eec74c1ced@mail.gmail.com>
Message-ID: <20081125141752.20272.2066735657.divmod.quotient.10698@ohm>

On Tue, 25 Nov 2008 12:41:46 +0200, Ayd?n ?EN <adigeaydin at gmail.com> wrote:
>Hi,
>I am trying to send file which is in the client's disk, i am using
>LineReceiver in the server side. I am sending and receiving data like login
>stuff but when i start to read & send file LineReceiver method doesnt run in
>the server side. Sending file code part is below, what can be cause of this?

File transfers are not best done using a line-oriented protocol.  Have a look
at the "Protocol Design" articles linked from <http://itamarst.org/>.

Jean-Paul



From amauryfa at gmail.com  Tue Nov 25 09:51:27 2008
From: amauryfa at gmail.com (Amaury Forgeot d'Arc)
Date: Tue, 25 Nov 2008 15:51:27 +0100
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
In-Reply-To: <20081125141752.20272.2066735657.divmod.quotient.10698@ohm>
References: <2196d7e0811250241w1da57ddar9bf246eec74c1ced@mail.gmail.com>
	<20081125141752.20272.2066735657.divmod.quotient.10698@ohm>
Message-ID: <e27efe130811250651r47ec8566pa1eea8936b86e967@mail.gmail.com>

Hello,

On Tue, Nov 25, 2008 at 15:17, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Tue, 25 Nov 2008 12:41:46 +0200, Ayd?n ?EN <adigeaydin at gmail.com> wrote:
>>
>> Hi,
>> I am trying to send file which is in the client's disk, i am using
>> LineReceiver in the server side. I am sending and receiving data like
>> login
>> stuff but when i start to read & send file LineReceiver method doesnt run
>> in
>> the server side. Sending file code part is below, what can be cause of
>> this?

The LineReceiver implements a limit of MAX_LENGTH = 16384 bytes per "line".
When you send 100KB in a row, it calls it lineLengthExceeded() method
and loses its connection...

> File transfers are not best done using a line-oriented protocol.  Have a
> look
> at the "Protocol Design" articles linked from <http://itamarst.org/>.
>
> Jean-Paul

Indeed.

-- 
Amaury Forgeot d'Arc

From adigeaydin at gmail.com  Tue Nov 25 10:29:16 2008
From: adigeaydin at gmail.com (=?ISO-8859-9?Q?Ayd=FDn_=DEEN?=)
Date: Tue, 25 Nov 2008 17:29:16 +0200
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
In-Reply-To: <e27efe130811250651r47ec8566pa1eea8936b86e967@mail.gmail.com>
References: <2196d7e0811250241w1da57ddar9bf246eec74c1ced@mail.gmail.com>
	<20081125141752.20272.2066735657.divmod.quotient.10698@ohm>
	<e27efe130811250651r47ec8566pa1eea8936b86e967@mail.gmail.com>
Message-ID: <2196d7e0811250729r6bb36e85x8ea7fd8bed020fdc@mail.gmail.com>

Thank you very much..

if i send file per 1KB does it cause lack of performance?

25 Kas?m 2008 Sal? 16:51 tarihinde Amaury Forgeot d'Arc
<amauryfa at gmail.com>yazd?:

> Hello,
>
> On Tue, Nov 25, 2008 at 15:17, Jean-Paul Calderone <exarkun at divmod.com>
> wrote:
> > On Tue, 25 Nov 2008 12:41:46 +0200, Ayd?n ?EN <adigeaydin at gmail.com>
> wrote:
> >>
> >> Hi,
> >> I am trying to send file which is in the client's disk, i am using
> >> LineReceiver in the server side. I am sending and receiving data like
> >> login
> >> stuff but when i start to read & send file LineReceiver method doesnt
> run
> >> in
> >> the server side. Sending file code part is below, what can be cause of
> >> this?
>
> The LineReceiver implements a limit of MAX_LENGTH = 16384 bytes per "line".
> When you send 100KB in a row, it calls it lineLengthExceeded() method
> and loses its connection...
>
> > File transfers are not best done using a line-oriented protocol.  Have a
> > look
> > at the "Protocol Design" articles linked from <http://itamarst.org/>.
> >
> > Jean-Paul
>
> Indeed.
>
> --
> Amaury Forgeot d'Arc
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Ayd?n ?EN

         Ege ?niversitesi
Uluslararas? Bilgisayar Enstit?s?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081125/6470eed6/attachment.htm 

From exarkun at divmod.com  Tue Nov 25 10:38:19 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Nov 2008 10:38:19 -0500
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
In-Reply-To: <2196d7e0811250729r6bb36e85x8ea7fd8bed020fdc@mail.gmail.com>
Message-ID: <20081125153819.20272.1384825410.divmod.quotient.10707@ohm>

On Tue, 25 Nov 2008 17:29:16 +0200, Ayd?n ?EN <adigeaydin at gmail.com> wrote:
>Thank you very much..
>
>if i send file per 1KB does it cause lack of performance?
>

If you try to send a file like this, then any newlines it contains will
be lost.  Performance doesn't matter much if your results are wrong.  You
should not try to send a file with a line protocol.  Read the "Protocol
Design" articles linked from <http://itamarst.org/>.

Jean-Paul



From adigeaydin at gmail.com  Tue Nov 25 11:16:39 2008
From: adigeaydin at gmail.com (=?ISO-8859-9?Q?Ayd=FDn_=DEEN?=)
Date: Tue, 25 Nov 2008 18:16:39 +0200
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
In-Reply-To: <20081125153819.20272.1384825410.divmod.quotient.10707@ohm>
References: <2196d7e0811250729r6bb36e85x8ea7fd8bed020fdc@mail.gmail.com>
	<20081125153819.20272.1384825410.divmod.quotient.10707@ohm>
Message-ID: <2196d7e0811250816s283055bfo7b61682e7967599e@mail.gmail.com>

> If you try to send a file like this, then any newlines it contains will
> be lost.


yeap, i got it what you mean..


>  Performance doesn't matter much if your results are wrong.  You
> should not try to send a file with a line protocol.  Read the "Protocol


reading..
thanks again

-- 
Ayd?n ?EN

         Ege ?niversitesi
Uluslararas? Bilgisayar Enstit?s?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081125/1ed3e24f/attachment.htm 

From waldemar.osuch at gmail.com  Tue Nov 25 12:16:47 2008
From: waldemar.osuch at gmail.com (Waldemar Osuch)
Date: Tue, 25 Nov 2008 17:16:47 +0000 (UTC)
Subject: [Twisted-Python] Re: Please test Twisted 8.2.0pre2 and tell me
	whether	it works
References: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
Message-ID: <loom.20081125T170334-268@post.gmane.org>

Christopher Armstrong <radix <at> twistedmatrix.com> writes:

> 
> The tarballs are at
> 
>     http://twistedmatrix.com/users/radix/8.2.0pre2/
> 
> If you want to test 8.2.0pre2 on Windows, Thomas Herv? may be able to
> build installers some time tomorrow.
> 

The Windows installer by Thomas assumes that Python is installed
in c:\Python25 and dumps the library into C:\Python25\lib\site-packages
regardless of where the actual Python installation is.









From drew.smathers at gmail.com  Tue Nov 25 13:16:30 2008
From: drew.smathers at gmail.com (Drew Smathers)
Date: Tue, 25 Nov 2008 13:16:30 -0500
Subject: [Twisted-Python] Please test Twisted 8.2.0pre2 and tell me
	whether it works
In-Reply-To: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
References: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
Message-ID: <368574aa0811251016o5d6513a4n322af9de665b3646@mail.gmail.com>

On Thu, Nov 20, 2008 at 8:11 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> I just uploaded 8.2.0pre2 tarballs, which include one bugfix since
> 8.2.0pre1 which was deemed important enough to be backported:
>
>  - TLS Session Tickets are now disabled by default, allowing connections to
>   certain servers which hang when an empty session ticket is received (like
>   GTalk) (#3463)
>
>
> The tarballs are at
>
>    http://twistedmatrix.com/users/radix/8.2.0pre2/
>
> If you want to test 8.2.0pre2 on Windows, Thomas Herv? may be able to
> build installers some time tomorrow.
>
>
> Please test it out - I haven't heard any results from the pre1 release
> yet. If you don't test it then 8.2.0 will be horrible, and it will be
> your fault. You know, I've heard some people are using Twisted to
> manage puppy incubators. Think of the puppies.
>
> http://www.ustream.tv/channel/shiba-inu-puppy-cam
>
>
>
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> http://canonical.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>

It works!

-Drew

From asset at impactdamage.com  Tue Nov 25 14:09:19 2008
From: asset at impactdamage.com (asset)
Date: Tue, 25 Nov 2008 12:09:19 -0700
Subject: [Twisted-Python] SSL Client Certificates?
Message-ID: <73a34888f8074470b53235338e53c8c6@maila5.webcontrolcenter.com>

Would I be right in assuming that the example echoserv_ssl.py and echoclient_ssl.py will only result in encryption from the client to server and not from the server back to the client?

Im referencing these examples specifically,
http://twistedmatrix.com/projects/core/documentation/examples/echoclient_ssl.py
http://twistedmatrix.com/projects/core/documentation/examples/echoclient_ssl.py

From what I know of SSL, the client connects to the server, and after the handshake it uses the cert to encrypt its communication to the server and the server uses the private key to decrypt it; but the server's traffic back to the client will not be encrypted without having to use a client certificate.

So my question is how wrong am I on this? And if needed, how do I setup a client certificate to succeed in two way encryption?

Thanks!

TKiel


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081125/f617cb66/attachment.htm 

From exarkun at divmod.com  Tue Nov 25 14:24:43 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Nov 2008 14:24:43 -0500
Subject: [Twisted-Python] SSL Client Certificates?
In-Reply-To: <73a34888f8074470b53235338e53c8c6@maila5.webcontrolcenter.com>
Message-ID: <20081125192443.20272.974263597.divmod.quotient.10742@ohm>

On Tue, 25 Nov 2008 12:09:19 -0700, asset <asset at impactdamage.com> wrote:
>Would I be right in assuming that the example echoserv_ssl.py and echoclient_ssl.py will only result in encryption from the client to server and not from the server back to the client?
>
>Im referencing these examples specifically,
>http://twistedmatrix.com/projects/core/documentation/examples/echoclient_ssl.py
>http://twistedmatrix.com/projects/core/documentation/examples/echoclient_ssl.py
>
>From what I know of SSL, the client connects to the server, and after the handshake it uses the cert to encrypt its communication to the server and the server uses the private key to decrypt it; but the server's traffic back to the client will not be encrypted without having to use a client certificate.
>
>So my question is how wrong am I on this? And if needed, how do I setup a client certificate to succeed in two way encryption?

You are indeed mistaken.  The use or non-use of a certificate is orthogonal
to whether traffic is encrypted.  The primary purpose of the certificate is
identification of the endpoint.  Encryption can happen without a certificate
(it can also not happen, even with a certificate).

http://en.wikipedia.org/wiki/Transport_Layer_Security gives a reasonable
overview.

If you need identification in both directions, you can set up the server
to require a certificate using the same APIs you use to have a client
require one and you can use the same APIs on the client to use a certificate
as you use on the server to do that.

Jean-Paul



From nahueldefosse at yahoo.com.ar  Wed Nov 26 00:31:14 2008
From: nahueldefosse at yahoo.com.ar (Nahuel =?iso-8859-1?q?Defoss=E9?=)
Date: Wed, 26 Nov 2008 03:31:14 -0200
Subject: [Twisted-Python] Running a GUI application based on PyQt
In-Reply-To: <1227533298.16031.121.camel@pintsize>
References: <200811240637.34481.nahueldefosse@yahoo.com.ar>
	<1227533298.16031.121.camel@pintsize>
Message-ID: <200811260331.15035.nahueldefosse@yahoo.com.ar>


Thanks both quick and helpful responses!
I was messing with the order, but finally it worked, though I've just tested a 
very basic piece of code. The non-threading nature in a pyqt app sacres me a 
bit, but I hope it's temporal :)
Now it's time for me to merge the whole thing, sqlalchemy via sAsync, my 
protocol and the GUI.

Regards

El Monday 24 November 2008 11:28:18 Itamar Shtull-Trauring escribi?:
> On Mon, 2008-11-24 at 06:37 -0200, Nahuel Defoss? wrote:
> > I've tried the code posted in qt4reactor.py but it doesn't work. It fails
> > telling that a reactor's been already installed.
> > Is it possible to use PyQt4 (v.4.4) with twisted?
>
> Only import "twisted.internet.reactor" *after* you've installed
> qt4reactor. Importing auto-installs reactor if one hasn't already been
> installed.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From patrice.renaud at obs-nancay.fr  Wed Nov 26 02:59:54 2008
From: patrice.renaud at obs-nancay.fr (Patrice RENAUD)
Date: Wed, 26 Nov 2008 08:59:54 +0100
Subject: [Twisted-Python] Twisted on Windows: "Python does not appear to be
	installed"
Message-ID: <492D01FA.1010303@obs-nancay.fr>

Hi all,

Twisted does not install on my windows XP /python 2.6 computer.
Twisted installer says: "Python does not appear to be installed"

but python is really installed and runs well on my computer !

What is the solution ?

thanks

Patrice

-- 
Patrice RENAUD
Observatoire de Paris - Station de Radioastronomie de Nancay
Tel: 02 48 51 87 21	Fax: 02 48 51 83 18 
Email: Patrice.Renaud at obs-nancay.fr





From therve at free.fr  Wed Nov 26 03:31:38 2008
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Wed, 26 Nov 2008 09:31:38 +0100
Subject: [Twisted-Python] Re: Please test Twisted 8.2.0pre2 and tell me
	whether	it works
In-Reply-To: <loom.20081125T170334-268@post.gmane.org>
References: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
	<loom.20081125T170334-268@post.gmane.org>
Message-ID: <1227688298.6456.2.camel@brainwave>

Le mardi 25 novembre 2008 ? 17:16 +0000, Waldemar Osuch a ?crit :
> Christopher Armstrong <radix <at> twistedmatrix.com> writes:
> 
> > 
> > The tarballs are at
> > 
> >     http://twistedmatrix.com/users/radix/8.2.0pre2/
> > 
> > If you want to test 8.2.0pre2 on Windows, Thomas Herv? may be able to
> > build installers some time tomorrow.
> > 
> 
> The Windows installer by Thomas assumes that Python is installed
> in c:\Python25 and dumps the library into C:\Python25\lib\site-packages
> regardless of where the actual Python installation is.

Thanks for testing, I'll have a look at it and check what's the problem.
Theoritically it should check where Python installed using register
keys. Did it work with previous installers?

Could you open a bug report, with information about your system (Windows
version). 

Thanks,

-- 
Thomas




From tarjei at nu.no  Wed Nov 26 03:45:16 2008
From: tarjei at nu.no (tarjei)
Date: Wed, 26 Nov 2008 09:45:16 +0100
Subject: [Twisted-Python] Twisted on Windows: "Python does not appear
	to be	installed"
In-Reply-To: <492D01FA.1010303@obs-nancay.fr>
References: <492D01FA.1010303@obs-nancay.fr>
Message-ID: <492D0C9C.1010901@nu.no>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Patrice RENAUD wrote:
> Hi all,
> 
> Twisted does not install on my windows XP /python 2.6 computer.
> Twisted installer says: "Python does not appear to be installed"
> 
> but python is really installed and runs well on my computer !
> 
> What is the solution ?

Have you checked that python is in your path?

Regards,
Tarjei
> 
> thanks
> 
> Patrice
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFJLQycYVRKCnSvzfIRAjt2AJsF6Ftib9PG08RAypQKhLRIInQj0gCeNVzr
l0STWEG/vdkOogQgly00c6E=
=1Tiy
-----END PGP SIGNATURE-----



From terry at jon.es  Thu Nov 27 12:16:44 2008
From: terry at jon.es (Terry Jones)
Date: Thu, 27 Nov 2008 18:16:44 +0100
Subject: [Twisted-Python] What to do when a service fails to start, also,
	deferred and startService
Message-ID: <18734.54780.97710.644648@jon.es>

I've another of my pesky beginner questions. Note that this subject is
somewhat covered in the thread started by Matt Goodall in Jan 2006:

  http://twistedmatrix.com/pipermail/twisted-python/2006-January/012380.html


I imagine that it must be common that people write services that don't just
simply launch things listening on sockets, but instead need to do a couple
of things, one after another, in order to get going and to be ready to
provide their service (or multiservice).

If you do need to write something like that, it seems the chances are
pretty high you're going to be calling code somewhere along the way that
returns a deferred. And because the twisted/application/service.py code
that calls startService doesn't handle deferreds being returned, this
creates a real problem. At least as far as I understand things - which, as
usual, may not be very far.

If nothing goes wrong with the deferreds that startService is creating (via
whatever its calling), then you'll probably get away with things even
though your service will not really be up until after the deferreds fire,
which can be some time after the code calling startService gets its
deferred back (and ignores it).

But if something does go wrong, you've got a failure propagating its way
down a errback chain, eventually (unless an errback switches you back to
the callback chain) popping out the end and causing the reactor to issue an
Unhandled Error message. So you can't indicate that the service has failed
to start by throwing, because the exception is going to pop harmlessly out
the end of the deferred chain as a generic unhandled error and will not
cause Twisted to know that the service couldn't start.

This all feels quite ironic :-) Twisted leads you coyly into the dark and
powerful world of working with and heavily depending on Deferreds. But
then, right when you expect it to be there for you, covering your back, it
throws up its hands as if to say "What!!? You expect me to deal with you
returning a Deferred? You gotta be kidding, sucker."

I could follow Moof's approach (last poster in the above thread), but that
seems to just pass the problem on to a higher level, where something else
is calling startService (or something earlier) and so on up until we reach
the topmost point at which something is not allowing/expecting a deferred
to come back. Should I track down and subclass all these things?  That
would seem cruel and unusual punishment to the faithful Deferred user,
having to go in and subclass core classes because they don't deal with
Deferreds.

I could do something dramatic, like call reactor.stop or sys.exit in my
errback chain, but those seem completely wrong. Apart from the (remote?)
possibility that something other than Twisted plugin code is trying to
start my service, it's also anachronistic because it will happen at some
unpredictable time after startService has gotten back (and ignored) the
deferred and Twisted has moved on (perhaps even to start other services).

Terry



From waldemar.osuch at gmail.com  Fri Nov 28 00:53:31 2008
From: waldemar.osuch at gmail.com (Waldemar Osuch)
Date: Fri, 28 Nov 2008 05:53:31 +0000 (UTC)
Subject: [Twisted-Python] Re: Please test Twisted 8.2.0pre2 and tell
	me	whether	it works
References: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
	<loom.20081125T170334-268@post.gmane.org>
	<1227688298.6456.2.camel@brainwave>
Message-ID: <loom.20081128T055024-729@post.gmane.org>

Thomas Herv? <therve <at> free.fr> writes:

> Thanks for testing, I'll have a look at it and check what's the problem.
> Theoritically it should check where Python installed using register
> keys. Did it work with previous installers?
> 
> Could you open a bug report, with information about your system (Windows
> version). 

Done in http://twistedmatrix.com/trac/ticket/3556
I just tried the 8.1 and it behaves the same way







From glyph at divmod.com  Fri Nov 28 09:02:17 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 28 Nov 2008 14:02:17 -0000
Subject: [Twisted-Python] What to do when a service fails to start, also, 
	deferred and startService
In-Reply-To: <18734.54780.97710.644648@jon.es>
References: <18734.54780.97710.644648@jon.es>
Message-ID: <20081128140217.12555.360367893.divmod.xquotient.628@weber.divmod.com>

On 27 Nov, 05:16 pm, terry at jon.es wrote:
>I imagine that it must be common that people write services that don't 
>just
>simply launch things listening on sockets, but instead need to do a 
>couple
>of things, one after another, in order to get going and to be ready to
>provide their service (or multiservice).

I can't speak to how common it is, but I don't do it and I've actually 
seen it fairly rarely; although I have heard people asking about it a 
number of times.

For me, baroque and elaborate start-up dances are a code smell. 
Services should be as independent as possible.  Of course, sometimes 
some kind of initialization conversation is unavoidable, but I do like 
to try to keep it as short as possible.
>If you do need to write something like that, it seems the chances are
>pretty high you're going to be calling code somewhere along the way 
>that
>returns a deferred. And because the twisted/application/service.py code
>that calls startService doesn't handle deferreds being returned, this
>creates a real problem. At least as far as I understand things - which, 
>as
>usual, may not be very far.

I think you're misunderstanding what a "service" is.  The word is, 
perhaps, a bit to lofty for its humble job.  A service is just an event 
notification mechanism that tells you when it's time to start up, and 
when it's time to shut down.

I can understand why it would be attractive to misunderstand in this 
way, though: IService doesn't do very much, you have requirements that 
it doesn't cover, and if it were the thing you understand it to be then 
it would cover those requirements.  I'm sure that would be nicer for you 
:).

This might seem a bit inconsistent, since stopService uses the return of 
a Deferred.  However, this is for a very specific reason, not a 
generalized error-handling case: you may need to prevent the *rest* of 
the system (specifically, the reactor) from completely shutting down 
until you've managed to cleanly shut down whatever you're trying to shut 
down on potentially remote systems.  startService has no such problem 
though; the service subsystem has told you "It's time to start up!" - 
its job is done, and the reactor isn't going away as part of service 
startup, so it's your responsibility as an application author to make 
sure your other dependencies are properly initialized.
>But if something does go wrong, you've got a failure propagating its 
>way
>down a errback chain, eventually (unless an errback switches you back 
>to
>the callback chain) popping out the end and causing the reactor to 
>issue an
>Unhandled Error message. So you can't indicate that the service has 
>failed
>to start by throwing, because the exception is going to pop harmlessly 
>out
>the end of the deferred chain as a generic unhandled error and will not
>cause Twisted to know that the service couldn't start.

The key question here is: indicate to whom?  If you want to indicate it 
to some other object, well, try:except: or addErrback and call a method 
on that object.  Nothing magic about it.

There is no general-purpose object in Twisted who would be interested in 
any and all kinds of failures.  Except, of course, the logging system, 
which, as you say, has already been told about this.
>This all feels quite ironic :-) Twisted leads you coyly into the dark 
>and
>powerful world of working with and heavily depending on Deferreds. But
>then, right when you expect it to be there for you, covering your back, 
>it
>throws up its hands as if to say "What!!? You expect me to deal with 
>you
>returning a Deferred? You gotta be kidding, sucker."

This begs the question, again, of what does it mean to "deal with" 
returning a Deferred?  Pause the service startup chain?  As exarkun 
noted in the thread you referenced, we *can't* stop and do that in 
privilegedStartService, so it would be a bit asymmetric to do so in 
startService.

In what way would you expect the service mechanism to "deal with" 
returning a Deferred?  Stop starting other services?  Print out some 
different log message?

The options I can come up with are generally undesirable.  Service order 
is somewhat arbitrary.  If you have a debugging service (like manhole) 
that happens to start up after your failed startup, then you won't be 
able to log in and inspect your failed-to-start service if it fails.  If 
you amend the log message in some way, chances are good that you will 
remove information (stack frames) that would be useful for debugging. 
These are equally good reasons not to pause the service startup chain in 
MultiService, too: one service should be able to inspect another to see 
why it's hung.
>I could follow Moof's approach (last poster in the above thread), but 
>that
>seems to just pass the problem on to a higher level, where something 
>else
>is calling startService (or something earlier) and so on up until we 
>reach
>the topmost point at which something is not allowing/expecting a 
>deferred
>to come back. Should I track down and subclass all these things?  That
>would seem cruel and unusual punishment to the faithful Deferred user,
>having to go in and subclass core classes because they don't deal with
>Deferreds.

Indeed.  This problem is left to a higher level because it is a higher 
level problem.  There is certainly a case to be made that the higher 
level should be somewhere in Twisted itself, but let's not complicate 
IService further.

IService is a very, very simple interface.  If you want to respond to 
failures from startService (deferred failures, exceptions, or whatever 
else) in a useful way, then you can write your own implementation of it 
which manages startup order, keeps track of dependencies, and maintains 
a state machine that handles stopService appropriately if called in mid- 
startup.

I don't think that having to implement an interface with 6 methods on it 
could be considered "cruel and unusual".  If you think so you may want 
to investigate options other than Twisted: you will frequently be 
expected to implement interfaces with methods on them ;-).

There's no need to "track down and subclass" lots of things.  Your 
IService wants the things that it contains to have a richer interface 
which allows for error handling, dependencies, and propagation, so 
simply write a single wrapper for simpler IService objects that expands 
the interface to do the other things that you're interested in.

This all strikes me as totally straightforward and easy, and I don't 
think I'm any kind of super-genius for being able to write a few Python 
classes that call a few simple start/stop methods in the order that I 
want them to run in :).
>I could do something dramatic, like call reactor.stop or sys.exit in my
>errback chain, but those seem completely wrong. Apart from the 
>(remote?)
>possibility that something other than Twisted plugin code is trying to
>start my service, it's also anachronistic because it will happen at 
>some
>unpredictable time after startService has gotten back (and ignored) the
>deferred and Twisted has moved on (perhaps even to start other 
>services).

Doing either of those things would definitely be wrong.  There's no 
reason to sys.exit or reactor.stop if your application can't start up, 
unless your management system specifically calls for such a thing.  In 
the future, even the Twisted plugin code might be starting some things 
in addition to your application.  As I mentioned above, a good reason to 
do that is to perform diagnostics on failed startups :).



From terry at jon.es  Fri Nov 28 09:00:37 2008
From: terry at jon.es (Terry Jones)
Date: Fri, 28 Nov 2008 15:00:37 +0100
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: Your message at 13:07:17 on Monday, 24 November 2008
References: <18728.54526.64709.788597@jon.es>
	<20081124180717.20272.92083444.divmod.quotient.10383@ohm>
Message-ID: <18735.63877.727580.952327@jon.es>

Hi JP

> Not quite:
> 
>   >>> def f():
>   ...     yield None
>   ... 
>   >>> f(1, 2, 3)
>   Traceback (most recent call last):
>     File "<stdin>", line 1, in <module>
>   TypeError: f() takes no arguments (3 given)
>   >>> 

Ah... thanks.

> And unfortunately, there is essentially no way to differentiate this case
> from a case where the call to `f? succeeded but some code executed as a
> result of that raised a `TypeError?.

Right, not without looking at the text of the exception, which, apart from
being extremely would be unreliable. Too bad there's not a Python exception
for incorrect function/method arg passing.

> See also <http://twistedmatrix.com/trac/ticket/2501>.

Ha!  There's pretty much the whole of this thread in there. I'll look more
carefully in trac next time. I did look at some point, and saw another
issue discussing what to do if a non-deferred is yielded.

Thanks again.

Terry



From terry at jon.es  Fri Nov 28 10:38:33 2008
From: terry at jon.es (Terry Jones)
Date: Fri, 28 Nov 2008 16:38:33 +0100
Subject: [Twisted-Python] What to do when a service fails to start, also, 
	deferred and startService
In-Reply-To: Your message at 14:02:17 on Friday, 28 November 2008
References: <18734.54780.97710.644648@jon.es>
	<20081128140217.12555.360367893.divmod.xquotient.628@weber.divmod.com>
Message-ID: <18736.4217.759501.381840@jon.es>

Hi Glyph

Thanks for the detailed reply.

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> On 27 Nov, 05:16 pm, terry at jon.es wrote:

glyph> For me, baroque and elaborate start-up dances are a code smell.
glyph> Services should be as independent as possible.  Of course, sometimes
glyph> some kind of initialization conversation is unavoidable, but I do
glyph> like to try to keep it as short as possible.

I do too. Sometimes it takes (me at least) a few iterations before you see
how best to do that.

glyph> I think you're misunderstanding what a "service" is.  The word is,
glyph> perhaps, a bit to lofty for its humble job.  A service is just an
glyph> event notification mechanism that tells you when it's time to start
glyph> up, and when it's time to shut down.

glyph> I can understand why it would be attractive to misunderstand in this
glyph> way, though: IService doesn't do very much, you have requirements
glyph> that it doesn't cover, and if it were the thing you understand it to
glyph> be then it would cover those requirements.  I'm sure that would be
glyph> nicer for you :).

glyph> This might seem a bit inconsistent, since stopService uses the
glyph> return of a Deferred.  However, this is for a very specific reason,
glyph> not a generalized error-handling case: you may need to prevent the
glyph> *rest* of the system (specifically, the reactor) from completely
glyph> shutting down until you've managed to cleanly shut down whatever
glyph> you're trying to shut down on potentially remote systems.
glyph> startService has no such problem though; the service subsystem has
glyph> told you "It's time to start up!" - its job is done, and the reactor
glyph> isn't going away as part of service startup, so it's your
glyph> responsibility as an application author to make sure your other
glyph> dependencies are properly initialized.

OK, this is helpful - I have been looking at it from a different point of
view, as you've guessed.

>> But if something does go wrong, you've got a failure propagating its way
>> down a errback chain, eventually (unless an errback switches you back to
>> the callback chain) popping out the end and causing the reactor to issue
>> an Unhandled Error message. So you can't indicate that the service has
>> failed to start by throwing, because the exception is going to pop
>> harmlessly out the end of the deferred chain as a generic unhandled
>> error and will not cause Twisted to know that the service couldn't
>> start.

glyph> The key question here is: indicate to whom?  If you want to indicate
glyph> it to some other object, well, try:except: or addErrback and call a
glyph> method on that object.  Nothing magic about it.

I have code written as a Twisted plugin. So I have a class implementing
IServiceMaker and IPlugin, and I create an instance of that class which
gets found when I invoke twistd from the command line.

So in my case I want to indicate to twistd that the service that my class
creates a makeService method to create, but which I do not set in motion,
has failed to start and that twistd should exit, or do something other than
cheerfully tell me that there's been an Unhandled Error.

Does that make more sense? Sorry, I should have said I was using twistd.

glyph> In what way would you expect the service mechanism to "deal with"
glyph> returning a Deferred?  Stop starting other services?  Print out some
glyph> different log message?

I'm not sure what should happen. I'm sitting at the command line, I've
asked twistd to start something for me, there's clearly been a problem
doing so (and this doesn't have to be baroque, maybe I just couldn't listen
on a specific port I wanted, or maybe my code somehow raised an Exception),
but I don't seem to have a mechanism for having twistd take any notice at
all.

I'm just talking about the case where startService calls something that
returns a deferred and there's an Exception that comes back down the
Deferred chain as a failure. I suppose if startService raises an Exception
itself directly, something else happens - maybe twistd exits.

glyph> IService is a very, very simple interface.  If you want to respond
glyph> to failures from startService (deferred failures, exceptions, or
glyph> whatever else) in a useful way, then you can write your own
glyph> implementation of it which manages startup order, keeps track of
glyph> dependencies, and maintains a state machine that handles stopService
glyph> appropriately if called in mid- startup.

glyph> I don't think that having to implement an interface with 6 methods
glyph> on it could be considered "cruel and unusual".  If you think so you
glyph> may want to investigate options other than Twisted: you will
glyph> frequently be expected to implement interfaces with methods on them
glyph> ;-).

:-)

glyph> There's no need to "track down and subclass" lots of things.  Your
glyph> IService wants the things that it contains to have a richer
glyph> interface which allows for error handling, dependencies, and
glyph> propagation, so simply write a single wrapper for simpler IService
glyph> objects that expands the interface to do the other things that
glyph> you're interested in.

In the case of a service being started by twistd, it doesn't seem as simple
as you describe, but maybe that's my lack of understanding again. I can
easily subclass IService, but something else is calling the startService
method of that subclass. And that thing, whatever it is, is not expecting
me to return a deferred. So if my startService has for some reason got its
hands on a deferred, it can't simply hand it back to its caller and have
something (twistd in my case) see that an error occurred.

It does feel like I have to track down what this something else might
be. Either working from my IServiceMaker implementation or working from
/usr/bin/twistd to find where startService is not trivial (you guys wrote
it, I'm sure the logic is all much clearer to you). After looking through a
few files I wind up at twisted/application/app.py, which has a
startApplication function that calls
service.IService(application).startService(). So I guess that's what is
calling my startService. So I could make my own startApplication function,
but I then have the same problem, I wind up with a deferred on my hands and
my caller is not expecting me to return it. Plus, the startApplication
function sits at the top level of twisted/application/app.py, so I have to
find whatever is calling that. That seems to be
twisted/scripts/_twistd_unix.py, which imports twisted.application.app and
has a top-level startApplication that calls app.startApplication. But who
is calling that? Looks like twisted/scripts/twistd.py is, and that's called
by /usr/bin/twistd.

So should I write my own twistd? All this doesn't seem to be a matter of
simple subclassing. Plus, I can't just go in and start editing the
top-level functions in twisted/application/app.py and
twisted/scripts/_twistd_unix.py or code that imports app, etc.

Sorry for so many questions - I really don't know if I'm missing something
simple here. I do enjoy digging into all this, and I appreciate your
apparently limitless patience. I wish I knew it all better. Twisted is
complex and it's a pretty good bet that anything you think of or run into
as a n00b has been thought of or encountered before, and that whatever way
you think of to solve it will probably be non-optimal, or plain wrong, or
in ignorance of a solution someone much more experienced has already
implemented, or... etc.  Hence my many questions.

glyph> This all strikes me as totally straightforward and easy, and I don't
glyph> think I'm any kind of super-genius for being able to write a few
glyph> Python classes that call a few simple start/stop methods in the
glyph> order that I want them to run in :).

I should have mentioned that I want to use twistd.

In fact I have something like a process pool running in one service and I
talk to it from another machine. I say "hey, process pool, start me up the
following service (a twistd service)" and I would then like to know if that
service started, and if not then why not. So having twistd fail or report
an error if it can't start a service would be useful.

glyph> Doing either of those things would definitely be wrong.  There's no
glyph> reason to sys.exit or reactor.stop if your application can't start
glyph> up, unless your management system specifically calls for such a
glyph> thing.

Maybe this is a case where it's (semi-)justified. At least if I called
sys.exit the twistd process would go away, instead of sitting there acting
as though nothing's wrong :-) I can also, of course, try interacting with
the service I think I just started on the remote machine, and if I can't
then I can tell the original process pool to kill the twistd process. But
that seems a pretty roundabout alternative to just having twistd notice
that something went awry when calling startService.

glyph> In the future, even the Twisted plugin code might be starting some
glyph> things in addition to your application.  As I mentioned above, a
glyph> good reason to do that is to perform diagnostics on failed startups
glyph> :).

I assume you really mean "startups" and not "services". In which case, I'm
100% sure there's something funny here, but I can't figure it out. I'd love
to know, and I'm smiling broadly in any case. Too bad email loses so much
humor.....  we can always try though.

Thanks again,
Terry



From exarkun at twistedmatrix.com  Sun Nov 30 07:52:14 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 Nov 2008 12:52:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1228049534.65.559757853@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081130/ec453377/attachment.htm 

From davefowler at gmail.com  Sun Nov 30 22:54:17 2008
From: davefowler at gmail.com (dave fowler)
Date: Sun, 30 Nov 2008 21:54:17 -0600
Subject: [Twisted-Python] twisted reverse proxy for web filtering
Message-ID: <5acf0ea80811301954q6a3f6938o6d7d3d207b1f7719@mail.gmail.com>

I'm making a simple app that will run a local proxy and redirect me away
from distracting websites.  For example, if I go to facebook.com I'd like it
to instead send me to google.com

I'd like to use python and in my research I think a twisted reverse proxy is
what I want.  I've done the examples for setting up a proxy, including one
that counts the words on the pages you visit, but i cannot find anything on
fetching the destination and re-directing.  I've been sifting through the
many classes of the proxy examples and am pretty lost.  Does anyone have
some example code for something like this?

Thanks

Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20081130/d40ac679/attachment.htm 

From esteve at sindominio.net  Sat Nov  1 03:55:48 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Sat, 1 Nov 2008 10:55:48 +0100
Subject: [Twisted-Python] Event notification and general RPC in Twisted...
In-Reply-To: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
References: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
Message-ID: <200811011055.48475.esteve@sindominio.net>

On Friday 31 October 2008 06:52:26 Blair Bethwaite wrote:
> - we'd like to use a persistent stream/connection, at least between
> the JobServer and Proxy (traffic frequency will be reasonably high)
> - it needs to be interoperable with java (is there PB for java?)
> - sometimes the Proxy might be behind a firewall and only able to
> connect out, we need to be able to use that connection to go back as
> above

<ad>
You can use Thrift [1] instead, which already supports Java and has a nifty 
patch which adds support for Twisted [2]
</ad>

I've tested it in an heterogeneous environment (Python, Java and Ruby) and it 
works fine.

Cheers.

1 - http://incubator.apache.org/thrift/
2 - https://issues.apache.org/jira/browse/THRIFT-148



From exarkun at twistedmatrix.com  Sat Nov  1 22:05:14 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 Nov 2008 04:05:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1225598714.83.1630291617@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081102/daae21db/attachment.html>

From paul at subsignal.org  Sun Nov  2 14:20:19 2008
From: paul at subsignal.org (paul)
Date: Sun, 02 Nov 2008 22:20:19 +0100
Subject: [Twisted-Python] Re: anybody can recommend the projects based on
 twisted, I need refer, please!
In-Reply-To: <be0f6540810312103r3bd04463l5d64100f6c4393f1@mail.gmail.com>
References: <be0f6540810312103r3bd04463l5d64100f6c4393f1@mail.gmail.com>
Message-ID: <gel5k4$h6b$1@ger.gmane.org>

Boern schrieb:
> Hi,all:
>    I am ready to develop a simple network app that the server will be based
> on twisted and client will be C＋＋（QT GUI）,so there`s any corresponding
> resource or open source projects to refer,thanks!
http://trac.calendarserver.org/

cheers
 Paul




From terry at jon.es  Sun Nov  2 16:48:20 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 00:48:20 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
Message-ID: <18702.15428.547828.694260@jon.es>

I just posted a blog article with title as above: http://bit.ly/1whZUK

Very briefly, I wrote a metaclass to allow you to write classes whose
__init__ method uses deferreds. Your __init__ can create deferreds, call
functions that return deferreds, and of course return a deferred itself
(that's the whole point). Your class instance wont be available until after
the deferred your __init__ returns has fired.

You use it like this:

    from txDeferredInitMeta import TxDeferredInitMeta

    class MyClass(object):
        __metaclass__ = TxDeferredInitMeta
        def __init__(self):
            d = aFuncReturningADeferred()
            return d

    def cb((instance, result)):
        # instance is an instance of MyClass
        # result is from the callback chain of aFuncReturningADeferred
        pass

    d = MyClass()
    d.__instantiate__()
    d.addCallback(cb)

Metaclass code & test suite at http://foss.fluidinfo.com/txDeferredInitMeta.zip

For more details on how it works see http://bit.ly/1whZUK

I'll be happy to explain why this is useful if anyone cares. Or maybe
there's a better way to do this that I don't know about. I always have the
feeling that I know just the barest amount about what's out there in the
Twisted codebase, and that every problem I run into must have already been
encountered by many and solved in some insanely elegant and general way.
In any case, I had fun.

Terry



From exarkun at divmod.com  Sun Nov  2 16:54:44 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 2 Nov 2008 18:54:44 -0500
Subject: [Twisted-Python] A Python metaclass for Twisted allowing
	__init__ to return a Deferred
In-Reply-To: <18702.15428.547828.694260@jon.es>
Message-ID: <20081102235444.29191.1397827627.divmod.quotient.48635@ohm>

On Mon, 3 Nov 2008 00:48:20 +0100, Terry Jones <terry at jon.es> wrote:
>I just posted a blog article with title as above: http://bit.ly/1whZUK
>
>Very briefly, I wrote a metaclass to allow you to write classes whose
>__init__ method uses deferreds. Your __init__ can create deferreds, call
>functions that return deferreds, and of course return a deferred itself
>(that's the whole point). Your class instance wont be available until after
>the deferred your __init__ returns has fired.
>
>You use it like this:
>
>    from txDeferredInitMeta import TxDeferredInitMeta
>
>    class MyClass(object):
>        __metaclass__ = TxDeferredInitMeta
>        def __init__(self):
>            d = aFuncReturningADeferred()
>            return d
>
>    def cb((instance, result)):
>        # instance is an instance of MyClass
>        # result is from the callback chain of aFuncReturningADeferred
>        pass
>
>    d = MyClass()
>    d.__instantiate__()
>    d.addCallback(cb)
>
>Metaclass code & test suite at http://foss.fluidinfo.com/txDeferredInitMeta.zip
>
>For more details on how it works see http://bit.ly/1whZUK
>
>I'll be happy to explain why this is useful if anyone cares. Or maybe
>there's a better way to do this that I don't know about. I always have the
>feeling that I know just the barest amount about what's out there in the
>Twisted codebase, and that every problem I run into must have already been
>encountered by many and solved in some insanely elegant and general way.
>In any case, I had fun.

I usually solve this kind of problem like this:

    d = aFuncReturningADeferred()
    d.addCallback(MyClass)
    d.addCallback(cb)

I'll not try to claim anything about the level of elegance, though. :)

For less surprisiness, I'd suggest that you at least restrict the result
of the Deferred returned from __init__ to firing with None or self and
make the argument to the first callback on the Deferred returned by
MyClass() just be the new instance.

Jean-Paul



From terry at jon.es  Sun Nov  2 17:16:50 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 01:16:50 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing
	__init__ to return a Deferred
In-Reply-To: Your message at 18:54:44 on Sunday, 2 November 2008
References: <18702.15428.547828.694260@jon.es>
	<20081102235444.29191.1397827627.divmod.quotient.48635@ohm>
Message-ID: <18702.17138.245542.16472@jon.es>

Hi JP

> I usually solve this kind of problem like this:
> 
>     d = aFuncReturningADeferred()
>     d.addCallback(MyClass)
>     d.addCallback(cb)

See? I knew there'd be a 3-line solution somewhere :-)

That's very cute, I'd never have thought of that...  Python is so nice.

My (weak?) response is that your solution isn't quite so general. What if I
want __init__ to generate the deferred based on its args, or on the result
of other functions called based on its args? Yes, I can do all that work
before using your lovely d.addCallback(MyClass), but then the logic of what
the class does is starting to leak out into the code that should be calling
the class. And you can't encapsulate THAT code into another class, because
its __init__ would in turn have to return a deferred.

BTW, I sometimes have the feeling that Deferreds are like how M$
characterizes the GPL. Viral. Once you call anything creating a Deferred,
you're hooked - whatcha gonna do with that Deferred boy? Take one sip of
the Deferred Kool Aid and the next thing you know you're on a drip.

> I'll not try to claim anything about the level of elegance, though. :)

History will smile on you JP.

> For less surprisiness, I'd suggest that you at least restrict the result
> of the Deferred returned from __init__ to firing with None or self and
> make the argument to the first callback on the Deferred returned by
> MyClass() just be the new instance.

Hmmm. OK. I think you're right. The caller has no business knowing what the
Deferred returned in any case. And if the class itself wants the result it
can add a callback and stick it on self.  That's good, I had been hoping to
return just the instance, but then it occurred to me to send back the
result too.

BTW, I started out trying to think of a way to just say

  x = MyClass(...)

and have that result in the instance. But the only ways I could think of
doing that were disgusting and broken (e.g., make a *function* called
MyClass and use inlineCallbacks and some other class the metaclass would
build). So the __instantiate__ call seemed like a big win, even though I
don't like it much either.

Thanks!

Terry



From mithrandi at mithrandi.net  Sun Nov  2 17:41:56 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 3 Nov 2008 02:41:56 +0200
Subject: [Twisted-Python] A Python metaclass for Twisted allowing
	__init__ to return a Deferred
In-Reply-To: <18702.17138.245542.16472@jon.es>
References: <18702.15428.547828.694260@jon.es>
	<20081102235444.29191.1397827627.divmod.quotient.48635@ohm>
	<18702.17138.245542.16472@jon.es>
Message-ID: <20081103004156.GC22777@mithrandi.net>

* Terry Jones <terry at jon.es> [2008-11-03 01:16:50 +0100]:

> > I usually solve this kind of problem like this:
> > 
> >     d = aFuncReturningADeferred()
> >     d.addCallback(MyClass)
> >     d.addCallback(cb)
> 
> See? I knew there'd be a 3-line solution somewhere :-)
> 
> That's very cute, I'd never have thought of that...  Python is so nice.
> 
> My (weak?) response is that your solution isn't quite so general. What if I
> want __init__ to generate the deferred based on its args, or on the result
> of other functions called based on its args? Yes, I can do all that work
> before using your lovely d.addCallback(MyClass), but then the logic of what
> the class does is starting to leak out into the code that should be calling
> the class. And you can't encapsulate THAT code into another class, because
> its __init__ would in turn have to return a deferred.

You can, however, encapsulate it into a classmethod or free function
that you call to get an instance of MyClass. This is a pattern often
seen when there are various ways to build an instance of some class;
you'll have a very basic __init__, and then a bunch of factory
functions or classmethods that do more complicated work before passing
the results in to the class's constructor.

> BTW, I sometimes have the feeling that Deferreds are like how M$
> characterizes the GPL. Viral. Once you call anything creating a Deferred,
> you're hooked - whatcha gonna do with that Deferred boy? Take one sip of
> the Deferred Kool Aid and the next thing you know you're on a drip.

Just wait until you start trying to combine iterators and deferreds ;)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20081103/06835580/attachment.sig>

From terry at jon.es  Sun Nov  2 18:01:08 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 02:01:08 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing
	__init__ to return a Deferred
In-Reply-To: Your message at 02:41:56 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
	<20081102235444.29191.1397827627.divmod.quotient.48635@ohm>
	<18702.17138.245542.16472@jon.es>
	<20081103004156.GC22777@mithrandi.net>
Message-ID: <18702.19796.941377.429114@jon.es>

Hi Tristan

>>>>> "Tristan" == Tristan Seligmann <mithrandi at mithrandi.net> writes:
Tristan> You can, however, encapsulate it into a classmethod or free
Tristan> function that you call to get an instance of MyClass. This is a
Tristan> pattern often seen when there are various ways to build an
Tristan> instance of some class; you'll have a very basic __init__, and
Tristan> then a bunch of factory functions or classmethods that do more
Tristan> complicated work before passing the results in to the class's
Tristan> constructor.

OK, thanks.

It feels to me (please correct me if I'm wrong) that the main reason you'd
want to follow this pattern is because you can't deal with Deferreds in an
__init__ method.

If you weren't dealing with Deferreds, you could just pass args to __init__
and have it figure out what to do. While it might be simpler to do as you
describe, and have various external factories, it feels (to me anyway) like
you're taking behavior that's class-dependent and putting it outside the
class.

__init__ can't return a result, presumably because if it has something it
wants to remember, or give you access to, it can put it on self, provide
you with a method, etc.

But in the Twisted world, I think it makes sense that there is some
provision for what's essentially a two-phase __init__.  I quite like my
approach, because the programmer wanting to write "normal" Twisted code
will likely find it natural that __init__ could work with Deferreds,
including returning one. To me that feels very natural.

Having said that, I don't particularly like the fact that there's a
special-case metaclass creating my classes, even though I wrote the code
myself :-)

>> BTW, I sometimes have the feeling that Deferreds are like how M$
>> characterizes the GPL. Viral. Once you call anything creating a Deferred,
>> you're hooked - whatcha gonna do with that Deferred boy? Take one sip of
>> the Deferred Kool Aid and the next thing you know you're on a drip.

Tristan> Just wait until you start trying to combine iterators and deferreds ;)

Oh yeah... I tried that too :-)

  http://www.twistedmatrix.com/pipermail/twisted-python/2008-June/017984.html

Comments on that code very welcome too!

Terry



From terry at jon.es  Sun Nov  2 19:06:17 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 03:06:17 +0100
Subject: [Twisted-Python] DeferredDict, defaultdict, map/reduce, silliness
Message-ID: <18702.23705.748433.94046@jon.es>

This isn't meant to be taken too seriously - perhaps just food for someone
else to chew on while trying to relax...

I was thinking the other night about what a DeferredDict might look like,
what it might be useful for, if anything, etc. We have DeferredList of
course, so why not a dict?  Then I also remembered collections.defaultdict
and couldn't resist the appeal of trying defaultdict(defer.Deferred).  That
thinking led to the map/reduce silliness below. I don't know that it leads
anywhere - I was just playing around.

Terry


import sys
from collections import defaultdict
from twisted.internet import defer, reactor

class MapReduce(object):
    def __init__(self, init, cb):
        self.init = init
        self.cb = cb
        self.d = defaultdict(defer.Deferred)

    def map(self, *keys):
        for key in keys:
            self.d[key].addCallback(self.cb)

    def reduce(self):
        def finalize(result, key):
            return (key, result)
        deferreds = []
        for key, d in self.d.iteritems():
            d.addCallback(finalize, key)
            deferreds.append(d)
            d.callback(self.init)
        return defer.gatherResults(deferreds)

def main():
    def printResult(result):
        print result
        reactor.stop()
        
    mr = MapReduce(0, lambda x: x + 1)
    for line in sys.stdin.readlines():
        mr.map(*line.split())
    d = mr.reduce().addCallback(printResult)
    
if __name__ == '__main__':
    reactor.callLater(0, main)
    reactor.run()



From py.adriano at gmail.com  Mon Nov  3 01:03:54 2008
From: py.adriano at gmail.com (Adriano Marques)
Date: Mon, 3 Nov 2008 09:03:54 +0100
Subject: [Twisted-Python] Passing arguments while running a twistd
	application
In-Reply-To: <20081031131219.29191.45950424.divmod.quotient.47384@ohm>
References: <18698.61244.704425.437134@jon.es>
	<20081031131219.29191.45950424.divmod.quotient.47384@ohm>
Message-ID: <29ec21540811030003v51af24c5n4ef28ec7a231e021@mail.gmail.com>

Ok guys, I'll be porting my app to plugin instead. Thanks for the answers.


Kind Regards,

-- 
Adriano Monteiro Marques

http://adriano-marques.blogspot.com
http://www.umitproject.org
http://www.pythonbenelux.org

"Don't stay in bed, unless you can make money in bed." - George Burns



From daniel.cuesta at iavante.es  Mon Nov  3 01:40:14 2008
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Mon, 03 Nov 2008 09:40:14 +0100
Subject: [Twisted-Python] Persistent Queue with subscriber worker
Message-ID: <490EB8EE.7000409@iavante.es>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081103/fae0041f/attachment.html>

From esteve at sindominio.net  Mon Nov  3 03:20:25 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 3 Nov 2008 11:20:25 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18702.15428.547828.694260@jon.es>
References: <18702.15428.547828.694260@jon.es>
Message-ID: <200811031120.26044.esteve@sindominio.net>

On Monday 03 November 2008 00:48:20 Terry Jones wrote:
> I just posted a blog article with title as above: http://bit.ly/1whZUK

I'm going to jump in. How about this:

from twisted.internet import defer, reactor

def aFuncReturningADeferred(value):
    d = defer.Deferred()
    reactor.callLater(5, d.callback, value[::-1])
    return d

class Foo(object):

    def __new__(cls, value):
        def cb(x):
            obj = object.__new__(cls, x)
            obj.__init__(x)
            return obj
        return aFuncReturningADeferred(value).addCallback(cb)

    def __init__(self, value):
        self.value = value

def printFoo(obj):
    print obj.value
    reactor.stop()

d = Foo("Some value")
d.addCallback(printFoo)

reactor.run()

Instead of returning a deferred from the __init__ method (which is 
non-standard), you return it from __new__

It's clearer, since __init__ is meant for configuring instances, and __new__ 
for instantiating objects.

Cheers.



From p.mayers at imperial.ac.uk  Mon Nov  3 03:31:57 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 03 Nov 2008 10:31:57 +0000
Subject: [Twisted-Python] Persistent Queue with subscriber worker
In-Reply-To: <490EB8EE.7000409@iavante.es>
References: <490EB8EE.7000409@iavante.es>
Message-ID: <490ED31D.8060805@imperial.ac.uk>

Daniel de la Cuesta wrote:
> Hi,
> 
> I want to develop a video conversion service. My idea is to offer a REST 
> api and save all the conversion request in a database to track the state 
> of each process (pending, doing, done, error, etc.)
> 
> I want to use this database table as a persistent queue and a twisted 
> daemon that takes its task from this table. This daemon has to take the 
> task, update the state of the task and do the work.
> 
> How can I subscribe the twisted daemon to the database inserts?

The easiest way is to use twisted.internet.task.LoopingCall and check 
for new entries every N seconds (e.g. n=1, n=30)

If your database supports things like postgres' NOTIFY and you have an 
async-aware db adapter (e.g. pgasync) you could use a trigger on the 
table to issue a NOTIFY and respond immediately, but it's been my 
experience that's more trouble than it's worth.

> 
> Is the thread pool a good approach to this problem?

Since most DB adapters are blocking you'll want to use something like a 
thread pool to access them - twisted's adbapi module does this for you.



From esteve at sindominio.net  Mon Nov  3 05:32:50 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 3 Nov 2008 13:32:50 +0100
Subject: [Twisted-Python] Persistent Queue with subscriber worker
In-Reply-To: <490EB8EE.7000409@iavante.es>
References: <490EB8EE.7000409@iavante.es>
Message-ID: <200811031332.50581.esteve@sindominio.net>

Hi Daniel

On Monday 03 November 2008 09:40:14 Daniel de la Cuesta wrote:
>  I want to develop a video conversion service. My idea is to offer a REST
> api and save all the conversion request in a database to track the state of
> each process (pending, doing, done, error, etc.)

Do you plan to expose this REST api using Twisted?

>  I want to use this database table as a persistent queue and a twisted
> daemon that takes its task from this table. This daemon has to take the
> task, update the state of the task and do the work.
>
>  How can I subscribe the twisted daemon to the database inserts?
>
>  Is the thread pool a good approach to this problem?
>
>  Do you know a more simple solution to this problem?

Well, I wouldn't use a database at all (except for logging purposes only 
maybe). Actually you're already using the proper terms (queue, subscriber, 
etc.), so I would use a message-driven architecture:

- A messaging broker, either using AMQP (RabbitMQ, Qpid and OpenAMQ) or Stomp 
(RabbitMQ, ActiveMQ)
- You have a subscriber (waiting for messages on a queue), which dispatches 
tasks from the queue
- The web application sends messages to the messaging broker, which will route 
them to the right subscriber

One of the advantages of this scenario is that you can add more subscribers at 
runtime if needed, which will distribute the load between several conversion 
servers.

You can choose either AMQP [1] or Stomp [2], each has its strengths and 
weaknesses.

Cheers.

1 - https://launchpad.net/txamqp (disclaimer, I'm one of the developers)
2 - http://code.google.com/p/stomper/



From glyph at divmod.com  Mon Nov  3 05:49:12 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 03 Nov 2008 12:49:12 -0000
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18702.15428.547828.694260@jon.es>
References: <18702.15428.547828.694260@jon.es>
Message-ID: <20081103124912.6400.1267186575.divmod.xquotient.613@weber.divmod.com>

On 2 Nov, 11:48 pm, terry at jon.es wrote:
>Very briefly, I wrote a metaclass to allow you to write classes whose
>__init__ method uses deferreds. Your __init__ can create deferreds, 
>call
>functions that return deferreds, and of course return a deferred itself
>(that's the whole point). Your class instance wont be available until 
>after
>the deferred your __init__ returns has fired.

As a general stylistic thing, I've been writing a lot more classmethods 
lately to determine arguments to __init__, rather than trying to make 
__init__ itself do interesting tricks.  I can't find a name for this 
"design pattern", so let me describe it:

One very common use-case is that we have some object - let's say an RFC 
5322 email address - which is typically created from a string.  An 
idiomatic way to do that might be like this:


    import rfc822

    class Address:
        def __init__(self, addrstr):
            l = list(rfc822.AddressList(addrstr))
            if len(l) != 1:
                raise ValueError("Too many or too few addresses.")
            else:
                desc, addr = l[0]
                self.description = desc
                self.localpart, self.domain = addr.split("@")

But this is problematic.  With this class, it's hard to convert from a 
different format of storing email addresses that has already been 
parsed.  In order to create an Address from, i.e., a database record 
containing a description, localpart, and domain, I now need to smash 
everything back into a string, worrying about trivia like quoting; or I 
need to resort to hacks like calling __new__ instead of __init__.  It 
makes testing more difficult: in my tests I need to start having 
formatted email addresses in strings instead of simply creating Address 
objects.  If this class were hypothetically a bit smarter and dealt 
nicely with unicode, my tests would need to learn about email-address 
quoting rules in order to generate addresses with non-ASCII characters, 
rather than leaving that logic entirely in the Address class.  Ugly all 
around.

However, I can pull the parsing logic out and separate it from the 
initialization logic, and all of that gets much easier:

    class Address:
        def __init__(self, localpart, domain, description):
            self.localpart = localpart
            self.domain = domain
            self.description = description

        @classmethod
        def fromString(cls, addrstr):
            l = list(rfc822.AddressList(addrstr))
            if len(l) != 1:
                raise ValueError("Too many or too few addresses.")
            else:
                desc, addr = l[0]
                loc, dom = addr.split("@")
                return cls(loc, dom, desc)

With this improved class, I can easily create Address objects in other 
ways from other code.  Since it's a classmethod rather than a function, 
it's just as friendly to inheritance as a constructor; perhaps even 
moreso.  It opens the door to the evolution of other creation methods, 
fromXXX classmethods, without breaking the constructor's signature or 
changing the fromString method.

You don't give a concrete example in your blog post, but I can imagine 
that all these points apply twice over to any code that would use 
Deferreds.  An __init__ that returns a Deferred means that in the 
testing case, not only is there no way to directly construct the object 
you want, there might be no way to even get one without spinning the 
reactor.  What is that Deferred doing?  Maybe there's no way to get one 
without actually generating network traffic!  Obviously, not an ideal 
scenario.  For the tests for the code making the deferred request 
itself, there will obviously need to be fake sources of data, but for 
other tests that just want to interact with one of your objects, direct 
construction is pretty much always easier.

However, thanks for sharing nonetheless.  Although I wouldn't use it 
personally, your code makes an interesting rhetorical point.  There's a 
great deal of whinging that goes on around Deferreds being hard to work 
with.  This metaclass is just another in a long line of tools that says 
"see?  it really isn't so hard to deal with a Deferred if you need to."



From terry at jon.es  Mon Nov  3 06:11:05 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 14:11:05 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 11:20:25 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
	<200811031120.26044.esteve@sindominio.net>
Message-ID: <18702.63593.938808.482176@jon.es>

>>>>> "Esteve" == Esteve Fernandez <esteve at sindominio.net> writes:
Esteve> I'm going to jump in. How about this:

That's nice. But you've coupled the args to aFuncReturningADeferred and
what it's Deferred ends up returning to the args for __init__ of the class.
I think you meant this:

    from twisted.internet import defer, reactor

    def aFuncReturningADeferred(value):
        d = defer.Deferred()
        reactor.callLater(5, d.callback, value[::-1])
        return d

    class Foo(object):
        def __new__(cls, *args, **kw):
            def cb(x):
                obj = object.__new__(cls)
                obj.__init__(*args, **kw)
                return obj
            return aFuncReturningADeferred("Some value").addCallback(cb)

        def __init__(self, value):
            self.value = value

    def printFoo(obj):
        print obj.value
        reactor.stop()

    d = Foo("Some other value")
    d.addCallback(printFoo)
    reactor.run()


I.e., __new__ can do whatever it likes with preparing args for
aFuncReturningADeferred (including using args and kw), and all of the args
to __new__ are passed to __init__, as the caller would expect from a normal
class. You're passing the return result of the Deferred as the single arg
to __init__.

Anyway, I like it more than my solution.

Terry



From esteve at sindominio.net  Mon Nov  3 06:53:24 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 3 Nov 2008 14:53:24 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18702.63593.938808.482176@jon.es>
References: <18702.15428.547828.694260@jon.es>
	<200811031120.26044.esteve@sindominio.net>
	<18702.63593.938808.482176@jon.es>
Message-ID: <200811031453.24955.esteve@sindominio.net>

On Monday 03 November 2008 14:11:05 Terry Jones wrote:
> >>>>> "Esteve" == Esteve Fernandez <esteve at sindominio.net> writes:
>
> Esteve> I'm going to jump in. How about this:
>
> That's nice. But you've coupled the args to aFuncReturningADeferred and
> what it's Deferred ends up returning to the args for __init__ of the class.

Yep, that's what I meant. I wanted to show how to pass an argument to Foo, 
which will be used to call a function (that may take a considerable amount of 
time) and whose return value will be stored in a Foo instance.

Following your example at http://bit.ly/1whZUK, you may pass the database name 
as an argument to DatabaseClass, call prepareConnection (a function that 
returns a Deferred) in the __new__ method to create the necessary tables and 
pass a ConnectionPool in the Deferred chain, so it can end up being stored as 
an instance variable of a DatabaseClass object.

Cheers.



From esteve at sindominio.net  Mon Nov  3 07:03:42 2008
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 3 Nov 2008 15:03:42 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <200811031453.24955.esteve@sindominio.net>
References: <18702.15428.547828.694260@jon.es>
	<18702.63593.938808.482176@jon.es>
	<200811031453.24955.esteve@sindominio.net>
Message-ID: <200811031503.42724.esteve@sindominio.net>

On Monday 03 November 2008 14:53:24 Esteve Fernandez wrote:
> On Monday 03 November 2008 14:11:05 Terry Jones wrote:
> > >>>>> "Esteve" == Esteve Fernandez <esteve at sindominio.net> writes:
> >
> > Esteve> I'm going to jump in. How about this:
> >
> > That's nice. But you've coupled the args to aFuncReturningADeferred and
> > what it's Deferred ends up returning to the args for __init__ of the
> > class.
>
> Yep, that's what I meant. I wanted to show how to pass an argument to Foo,
> which will be used to call a function (that may take a considerable amount
> of time) and whose return value will be stored in a Foo instance.

Alternatively a function would suffice:

from twisted.internet import defer, reactor

def aFuncReturningADeferred(value):
    d = defer.Deferred()
    reactor.callLater(5, d.callback, value[::-1])
    return d

class SimpleFoo(object):

    def __init__(self, value):
        self.value = value

def printFoo(obj):
    print obj.value
    reactor.stop()

def FooFactory(value):
    return aFuncReturningADeferred(value).addCallback(SimpleFoo)

d = FooFactory("Some value")
d.addCallback(printFoo)

reactor.run()



From terry at jon.es  Mon Nov  3 07:20:22 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 15:20:22 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 15:03:42 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
	<18702.63593.938808.482176@jon.es>
	<200811031453.24955.esteve@sindominio.net>
	<200811031503.42724.esteve@sindominio.net>
Message-ID: <18703.2214.64127.275374@jon.es>

>>>>> "Esteve" == Esteve Fernandez <esteve at sindominio.net> writes:
Esteve> Alternatively a function would suffice:
[snip]
Esteve> def FooFactory(value):
Esteve> return aFuncReturningADeferred(value).addCallback(SimpleFoo)

Right. That's JP's solution (though he didn't bother wrapping it in a
func): pass the result of the Deferred to the constructor of the class.

But I like your __new__ approach better, as it puts the logic for creating
deferreds, adding callbacks to them, doing other stuff etc., into the class
itself. It's in __new__ instead of __init__, but that seems perfect to me.

My approach, like all of them (and necessarily so) was two-phase, but my
second phase required the calling of __instantiate__. By using __new__ and
__init__ instead of my __init__ and __instantiate__, you moved the phases
back and just hitch-hike on Python's existing machinery. That's why I like
that approach, plus, as I keep saying, it keeps the Deferred logic inside
the class where it belongs.

T



From glyph at divmod.com  Mon Nov  3 08:23:45 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 03 Nov 2008 15:23:45 -0000
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18703.2214.64127.275374@jon.es>
References: <18702.15428.547828.694260@jon.es>
	<18702.63593.938808.482176@jon.es>
	<200811031453.24955.esteve@sindominio.net>
	<200811031503.42724.esteve@sindominio.net>
	<18703.2214.64127.275374@jon.es>
Message-ID: <20081103152345.6400.778006654.divmod.xquotient.655@weber.divmod.com>

On 02:20 pm, terry at jon.es wrote:
>But I like your __new__ approach better, as it puts the logic for 
>creating
>deferreds, adding callbacks to them, doing other stuff etc., into the 
>class
>itself. It's in __new__ instead of __init__, but that seems perfect to 
>me.

In my humble (but correct) opinion, this is actually a lot worse than 
using __init__ :).  I'd like to discourage you from using it.

Using __new__ like this is violating its implicit metaprogramming 
contract within Python.  __new__ is really supposed to be about 
allocation; it means, give me an uninitialized instance of this thing 
(which I will then initialize using __init__).  It is best used to 
implement things like token interning or free lists for small value 
objects.

Keeping __new__ doing what it's supposed to is important to libraries 
which use introspection.  Serialization libraries, twisted.spread.jelly 
being an obvious example, may need to use __new__ as an API in order to 
create cyclic relationships.  Consider the output of this program:

    class Something(object):
        def __new__(cls, *a, **k):
            self = object.__new__(cls, *a, **k)
            oself = SomethingElse(self)
            return oself

    class SomethingElse(object):
        def __init__(self, sth):
            self.sth = sth

    from twisted.spread.jelly import jelly, unjelly

    print unjelly(jelly(Something())).sth

Using __new__ is functionally equivalent to defining a classmethod, as I 
suggested, but rather than using the "classmethod" decorator it relies 
on implicitly hacking into bits of the Python object model.  Explicit is 
better ... well, you know the rest :).



From daniel.cuesta at iavante.es  Mon Nov  3 08:35:17 2008
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Mon, 03 Nov 2008 16:35:17 +0100
Subject: [Twisted-Python] Persistent Queue with subscriber worker
In-Reply-To: <200811031332.50581.esteve@sindominio.net>
References: <490EB8EE.7000409@iavante.es>
	<200811031332.50581.esteve@sindominio.net>
Message-ID: <490F1A35.90402@iavante.es>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081103/e8e40884/attachment.html>

From terry at jon.es  Mon Nov  3 08:56:58 2008
From: terry at jon.es (Terry Jones)
Date: Mon, 3 Nov 2008 16:56:58 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 00:48:20 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
Message-ID: <18703.8010.379291.213184@jon.es>

[I'm replying the original because I want to comment on comments by all of
JP, Esteve and Glyph]

Glyph - I appreciate your comments on testing, and agree that's
problematic. I also like your pattern, have run into it myself, and will
use it - thanks.

Glyph also said I didn't really provide a use-case, so I'll do that a bit
more clearly now. That leads me back in the direction of preferring my
metaclass solution.

    from my.project.code import database

    class CoordinatorHandler(object):
        def __init__(self, tableName, tableSpec, dbURI):
            def setDb(db):
                self.db = db
            d = database.getDB(dbURI)
            d.addCallback(setDb)
            d.addCallback(self.createDBTable, tableName, tableSpec)
            return d

        def _createDBTable(self, txn, tableName, tableSpec):
            txn.execute('CREATE TABLE %s(%s)' % (tableName, tableSpec))

        def createDBTable(self, result, tableName, tableSpec):
            assert result is None
            return self.db.runInteraction(self._createDBTable,
                                          tableName, tableSpec)


Here database.getDB returns a Deferred, as does self.createDBTable.

The problem with approaches that don't actually create the class instance,
is that __init__ is calling self.createDBTable, but self doesn't exist
yet. So putting code to deal with Deferreds into __new__ wont help unless
that code has nothing to do with the instance of the class.

But using a metaclass makes it really easy. You just write your code
completely as usual, using whatever Twisted/Deferred calls you want
(including digging around in self), and return the Deferred result. You can
wrap your __init__ in inlineCallbacks if you like.

The difference is that my metaclass approach does create an instanced of
the class. It just moves __init__ out of the way (into the __hidden__ dict,
along with the args and kwargs) and calls it when you call __instantiate__.

So I find the metaclass approach more general, though of course I don't
like the clutter of __hidden__ or __instantiate__.

With JP's suggestion of cleaning up the return result of __instantiate__ to
just return the instance, I think it's a pretty clean solution - from the
POV of the caller. You just act as normal in writing your class, but stick
in a __metaclass__. Then calling gets you a Deferred, which is perfectly
normal in the Twisted world.

I guess what you should do depends on how complex your situation is, and
also on whether you've already written your class code when you realize you
need __init__ to somehow deal with Deferreds (in which case it may be
easier to just add __metaclass__).


If you do have the simpler situation, in which the Deferred is coming from
the outside world (i.e., not from calling methods on self), then Glyph's
approach is probably the nicest (the following is untested):

    class X:
        def __init__(self, *args, dResult=None, **kw):
            # do something

        @classmethod
        def fromDeferred(cls, d, *args, **kw):
            def cb(result):
                return cls(*args, dResult=result, **kw)
            return d.addCallback(cb)


Which lets you create an object directly (no deferred involved), lets you
create it after a deferred fires, and also lets you directly send in a fake
deferred result.

Terry



From glyph at divmod.com  Mon Nov  3 13:17:09 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 03 Nov 2008 20:17:09 -0000
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18703.8010.379291.213184@jon.es>
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
Message-ID: <20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>


On 03:56 pm, terry at jon.es wrote:
>Glyph - I appreciate your comments on testing, and agree that's
>problematic. I also like your pattern, have run into it myself, and 
>will
>use it - thanks.

OK, cool :).
>Glyph also said I didn't really provide a use-case, so I'll do that a 
>bit
>more clearly now. That leads me back in the direction of preferring my
>metaclass solution.

(snip example)
>The problem with approaches that don't actually create the class 
>instance,
>is that __init__ is calling self.createDBTable, but self doesn't exist
>yet. So putting code to deal with Deferreds into __new__ wont help 
>unless
>that code has nothing to do with the instance of the class.

Given that this provides a good object lesson for other folks writing 
Twisted-based code and potential contributors to Twisted to write code 
for Twisted itself, I will continue on with my critique.  I hope you 
find it helpful.

In this specific example, it doesn't seem like there's really any good 
reason for _createDBTable and createDBTable to be instance methods.  If 
I understand the thing you're implementing properly, you're not going to 
be calling those methods again once the instance is fully initialized 
(to create the table twice would be an error), so they arguably 
shouldn't even be public.  Assuming they should be public, though, they 
could easily be class methods - or even static methods or free 
functions.  The only attribute of 'self' accessed by either method is 
'db'; so why not just have a function that gets passed 'db' rather than 
'self'?

But, I'll take a step back and make the problem harder - let's assume 
you have lots of state on 'self' that these methods want to access, and 
there really is a complex multi-stage initialization process.  There are 
a number of simple solutions that don't involve metaclasses or __init__ 
returning a Deferred.

The simplest is to simply make your class's constructor just take a 'db' 
object.  Then you can do this:

    class CoordinatorHandler(object):
        @inlineCallbacks
        @classmethod
        # Untested, not totally sure that's the right stacking order...
        def fromSpec(cls, tableName, tableSpec, dbURI):
            self = cls(yield database.getDB(dbURI))
            yield self.createDBTable(tableName, tableSpec)
            returnValue(self)

        def __init__(self, db):
            self.db = db
        # ...

Now, that's a bit of a cop-out: __init__ hands back a partially- 
initialized object to application code.  The table might not yet be 
created.  Although your __metaclass__ pattern idea does that as well, 
what *I'd* want in this situation is a fully-initialized object from 
__init__, allowing only the internal multi-phase initialization code to 
see the partially-initialized object, since only that code really knows 
what methods you can and can't call before the object is fully ready.

The reality of RDBMSes is pretty crummy; it's (by definition) a big pile 
of global mutable state that you have very little control over and no 
way[1] of getting notified of changes to.  For example, you can't really 
know if a table exists or not, hypothetically somebody could come along 
at any moment and DROP TABLE on you and your whole application will 
break.  But, let's engage in a bit of fantasy for a moment (as all 
modern systems which interact with RDBMSes must do) and pretend that 
rather than spitting a string into a CREATE TABLE statement with no 
knowledge of success, the database (or some abstraction layer thereof) 
returns some kind of object to represent the table.

I say that because in this example, there's nothing you can pass to 
__init__ that will satisfy the object's idea of "fully initialized".  It 
just has to perform a bunch of potentially destructive operations on the 
"universe" object ('db'), then, once the results of those operations has 
taken effect, return an object.  So we need some kind of marker to say 
"we have performed those potentially destructive operations and they 
worked".  Code will probably be clearer than more prose at this point:

    class CoordinatorHandler(object):
        def __init__(self, db, tableHandle, otherStuff):
            "Do you know where to get a tableHandle from?  I do!  Call 
fromSpec."
            self.db = db
            self.tableHandle = tableHandle
            self.otherStuff = otherStuff

        @inlineCallbacks
        @classmethod
        def fromSpec(cls, tableName, tableSpec, dbURI, stuffFactory):
            # not fully initialized, but we're not handing this back to 
application
            # code yet...
            self = cls.__new__()
            # initialize juuuust enough to call that one method we want 
to call...
            self.db = yield database.getDB(dbURI)
            self.__init__(self.db, yield self.createDBTable(tableName, 
tableSpec),
                          yield stuffFactory.moreDeferredStuff())
            returnValue(self)

        def createDBTable(self, tableName, tableSpec):
            "We know this method only uses 'db' to do its work, so we're 
fine."
            return self.db.execute("CREATE TABLE ...").addCallback(
                lambda nothingUseful: TableHandle(tableName))


Here, you can't synchronously create a CoordinatorHandler unless you've 
got an object to stuff into its tableHandle slot from somewhere.  This 
provides a useful point at which to document the required type of the 
tableHandle, how one might create one (a pointer to some test utility 
classes, perhaps?).

This class also provides a nice factory function for you to generate one 
from a database, so you still get the same practical effect, but you 
still get all the benefits of testability that separated initialization 
can give you.  And your subclasses can still do interesting stuff in 
__init__ if they want to, since it will get invoked; it's just that 
there may be some pre-initialization variables present at that point.

This comes at the expense of one redundant line of code - the two times 
that 'db' is set - but I think the benefits are well worth that almost 
unmeasurably small cost :).  Plus, if that concerns you, you can factor 
the table-creation logic somewhere else so you don't need partial 
initialization.  In most cases, that's a better idea anyway (although 
I've very rarely seen code where I couldn't figure out how to cleanly do 
it).


[1]: I do know about http://www.postgresql.org/docs/8.1/static/sql- 
notify.html, but it's a pretty obscure feature that most databases don't 
have and that's apparently pretty difficult to use.  I hope it becomes 
more popular in the future though, rarara event-driven etc...



From andrewfr_ice at yahoo.com  Mon Nov  3 14:21:20 2008
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Mon, 3 Nov 2008 13:21:20 -0800 (PST)
Subject: [Twisted-Python] RPython and Twisted
Message-ID: <605543.14506.qm@web34205.mail.mud.yahoo.com>

Hi Folks:

This is new to me so here goes.....

I am taking my first baby steps with PyPy. I wish to start experimenting by re-writing an example (the programme I posted in RPtyhon and converting it to C. However I want to still use Twisted for networking.

One approach I was thinking about was to somehow compile the program as a C extension library and somehow have it talk to Twisted - I would like to keep my code and Twisted in the same process. Am I on the right track?

Any hints would be appreciated. If there is interest I can summarise my findings.

Cheers,
Andrew


      



From exarkun at divmod.com  Mon Nov  3 15:25:33 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 3 Nov 2008 17:25:33 -0500
Subject: [Twisted-Python] RPython and Twisted
In-Reply-To: <605543.14506.qm@web34205.mail.mud.yahoo.com>
Message-ID: <20081103222533.29191.533971156.divmod.quotient.49187@ohm>

On Mon, 3 Nov 2008 13:21:20 -0800 (PST), Andrew Francis <andrewfr_ice at yahoo.com> wrote:
>Hi Folks:
>
>This is new to me so here goes.....
>
>I am taking my first baby steps with PyPy. I wish to start experimenting by re-writing an example (the programme I posted in RPtyhon and converting it to C. However I want to still use Twisted for networking.
>
>One approach I was thinking about was to somehow compile the program as a C extension library and somehow have it talk to Twisted - I would like to keep my code and Twisted in the same process. Am I on the right track?
>
>Any hints would be appreciated. If there is interest I can summarise my findings.

Since the RPython/PyPy toolchain currently has better support for generating
standalone executables than for doing much else, I'd suggest taking that
approach.  Compile your RPython to a standalone executable, run it from a
Twisted-based process and do some simple RPC over stdio.  It's a bit heavy
handed, but I think it's the most straightforward approach given the state
of RPython.  The PyPy developers can probably give you better ideas about
what long-term direction might be best, though.  There's probably nothing
special about using RPython with Twisted - from the RPython perspective,
Twisted is just another pile of Python code that you need to figure out an
integration strategy for.  Whatever the generally correct approach is is
probably the approach that makes sense for using Twisted.

Jean-Paul



From exarkun at divmod.com  Mon Nov  3 16:55:55 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 3 Nov 2008 18:55:55 -0500
Subject: [Twisted-Python] October Sponsored Development
In-Reply-To: 0
Message-ID: <20081103235555.29191.187345499.divmod.quotient.49230@ohm>

Hey all,

Just wanted to let everyone know that the summary of the latest round of sponsored Twisted development is up on the labs blog:

http://labs.twistedmatrix.com/2008/11/summary-of-october-sponsored-twisted.html

Jean-Paul



From terry at jon.es  Mon Nov  3 17:48:38 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Nov 2008 01:48:38 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 20:17:09 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
Message-ID: <18703.39910.249634.406974@jon.es>

Hi Glyph

Thanks for the further examples. I agree that the classmethod approach is
both flexible and powerful.  It's probably the most useful thing I've
picked up out of thinking about and playing with all this.

Terry



From terry at jon.es  Mon Nov  3 19:33:59 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Nov 2008 03:33:59 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 20:17:09 on Monday, 3 November 2008
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
Message-ID: <18703.46231.594938.56742@jon.es>

Hi again.

Despite all the useful suggestions, I've just realized that I still can't
complete what I was originally trying to do...

I'm trying to make a Twisted service. In my twisted/plugins/myService.py
file I have something like this:

    from zope.interface import implements
    from twisted.plugin import IPlugin
    from twisted.application.service import IServiceMaker
    from twisted.python import usage
    from my.application import myservice

    class Options(usage.Options):
        optParameters = [ ['db-uri', None, None, 'A db URI'], ]

    class MyServiceMaker(object):
        implements(IServiceMaker, IPlugin)
        tapname = 'My service'
        description = 'Desc.'
        options = Options

        def makeService(self, options):
            return myservice.MyService(dbURI=options['db-uri'])

    myServiceMaker = MyServiceMaker()


The problem here is that the service class I want to instantiate and return
from makeService calls something that returns a Deferred.

In Glyph's classmethod, Esteve's __new__, and my metaclass code, the thing
you get back when you go to use class is a Deferred. You have to wait for
that Deferred to fire before you get your instance. In JP's approach you
also wait for a Deferred before instantiating your class.

That would be fine if makeService could in turn return a Deferred that
would result in an object implementing IServiceMaker, but as far as I can
tell, makeService does not allow this. And in the context of a Twisted
plugin file like the above I'm even less clear on how to go about it.

Am I missing something here?

If not, wouldn't it be nice if makeService allowed you to return a Deferred?
AKA teaching your grandmother to suck eggs :-)

Terry



From erik at erikwickstrom.com  Tue Nov  4 00:06:50 2008
From: erik at erikwickstrom.com (Erik Wickstrom)
Date: Mon, 3 Nov 2008 23:06:50 -0800
Subject: [Twisted-Python] Trying to proxy through multiple IPs
Message-ID: <3d381e170811032306j7debe380hd54c1dc86d63d143@mail.gmail.com>

Hi all,

I'm trying to write a proxy server that accepts connections on
multiple ports, and depending on the port, using a different IP for
the outgoing connection.  My code works except that adding additional
reactor.listenTCP(...)s overwrite the IP of the previous listenTCPs.
So the proxy accepts connections on all the desired ports, but only
uses the last IP address for outgoing connections.

The ip (bindIP) is somehow being overwritten.  Based on advice from
IRC (exarkun --thanks!), I've tried a couple attempts at using
closures to solve the problem, but non of my implementations have done
the trick.

Can anyone see any other changes that might get this working?

# Also pasted at http://dpaste.com/88623/ incase of email garbling...

#from twisted.web import proxy, http

import urlparse
from urllib import quote as urlquote

from twisted.internet import reactor
from twisted.internet.protocol import ClientFactory
from twisted.web.resource import Resource
from twisted.web.server import NOT_DONE_YET
from twisted.web.http import HTTPClient, Request, HTTPChannel
from twisted.web.proxy import ProxyClient, ProxyClientFactory
from twisted.web import http
from twisted.internet import reactor
from twisted.python import log
import sys
log.startLogging(sys.stdout)



class ProxyRequest(Request):
    """
    Used by Proxy to implement a simple web proxy.

    @ivar reactor: the reactor used to create connections.
    @type reactor: object providing L{twisted.internet.interfaces.IReactorTCP}
    """

    protocols = {'http': ProxyClientFactory}
    ports = {'http': 80}

    def __init__(self, channel, queued, reactor=reactor):
        Request.__init__(self, channel, queued)
        self.reactor = reactor


    def process(self):
        parsed = urlparse.urlparse(self.uri)
        protocol = parsed[0]
        host = parsed[1]
        port = self.ports[protocol]
        if ':' in host:
            host, port = host.split(':')
            port = int(port)
        rest = urlparse.urlunparse(('', '') + parsed[2:])
        if not rest:
            rest = rest + '/'
        class_ = self.protocols[protocol]
        headers = self.getAllHeaders().copy()
        if 'host' not in headers:
            headers['host'] = host
        self.content.seek(0, 0)
        s = self.content.read()
        clientFactory = class_(self.method, rest, self.clientproto, headers,
                               s, self)
        self.reactor.connectTCP(host, port, clientFactory,
bindAddress=(self.bindIP,0))

class Proxy(HTTPChannel):
    requestFactory = ProxyRequest

class ProxyFactory(http.HTTPFactory):
    def class_factory(self, bindIP):
        def closure(ip):
            klass2 = ProxyRequest
            setattr(klass2, 'bindIP', ip)
            return klass2
        klass = Proxy
        setattr(klass, 'requestFactory', closure(bindIP))
        return klass

    def __init__(self, ip):
        http.HTTPFactory.__init__(self)
        self.ip = ip
        #self.protocol = proxy.Proxy
        self.protocol = self.class_factory(ip)


reactor.listenTCP(8080, ProxyFactory('192.168.168.101'),
interface="192.168.168.1")

reactor.listenTCP(8081, ProxyFactory('192.168.168.102'),
interface="192.168.168.1")
reactor.run()


##
Thanks!
Erik



From dialtone at gmail.com  Tue Nov  4 00:49:05 2008
From: dialtone at gmail.com (Valentino Volonghi)
Date: Mon, 3 Nov 2008 23:49:05 -0800
Subject: [Twisted-Python] DeferredDict, defaultdict, map/reduce, silliness
In-Reply-To: <18702.23705.748433.94046@jon.es>
References: <18702.23705.748433.94046@jon.es>
Message-ID: <0DE1BA14-0B1E-4140-89BE-B29B28524D81@gmail.com>


On Nov 2, 2008, at 6:06 PM, Terry Jones wrote:

> This isn't meant to be taken too seriously - perhaps just food for  
> someone
> else to chew on while trying to relax...
>
> I was thinking the other night about what a DeferredDict might look  
> like,
> what it might be useful for, if anything, etc. We have DeferredList of
> course, so why not a dict?  Then I also remembered  
> collections.defaultdict
> and couldn't resist the appeal of trying  
> defaultdict(defer.Deferred).  That
> thinking led to the map/reduce silliness below. I don't know that it  
> leads
> anywhere - I was just playing around.


This is actually a very very nice pattern. I can see it making my  
mapreduce
"example" code
<http://bazaar.launchpad.net/%7Edialtone/ampoule/main/annotate/16?file_id=client.py-20081029001234-rlmor7coth4g8s5d-3 
 >  (line 98 and following) a bit easier and maybe even generic enough
that I can package it as a library.

-- 
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081103/53135425/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20081103/53135425/attachment.sig>

From terry at jon.es  Tue Nov  4 02:01:57 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Nov 2008 10:01:57 +0100
Subject: [Twisted-Python] DeferredDict, defaultdict, map/reduce, silliness
In-Reply-To: Your message at 23:49:05 on Monday, 3 November 2008
References: <18702.23705.748433.94046@jon.es>
	<0DE1BA14-0B1E-4140-89BE-B29B28524D81@gmail.com>
Message-ID: <18704.3973.755388.623779@jon.es>

Hi Valentino

>>>>> "Valentino" == Valentino Volonghi <dialtone at gmail.com> writes:
Valentino> This is actually a very very nice pattern.

I thought it was too cute not to post, though I didn't really know what to
do with it. Something along the lines of map/reduce occurred to me quite
late. I bet there are other nice things you could do, mainly along the
lines of processing/bucketing a bunch of unpredictable input.

One thing I'd (probably) change would be to not use Deferred as the
argument to default dict, but to use a class that looked like it but with
the Deferred already called. That way you don't have the potentially very
long chain of callbacks building up. It's also partly a question of when
you want to do the work - each time you call addCallback, or at the end
when you've accumulated all the input and sent it off to its respective
callback chain.

So you could do something like this:

    def getDefault(init):
        def x():
            return defer.succeed(init)
        return x

and then the MapReduce class would look like

    class MapReduce(object):
        def __init__(self, init, cb):
            self.cb = cb
            self.d = defaultdict(getDefault(init))

Or, more flexibly, pass the defaultdict into the MapReduce class, giving
you the option of not having the callback chain already called, etc.

Anyway, I'm glad you like it, and hope you can do something nice with it.

Terry



From andrew-twisted at puzzling.org  Tue Nov  4 03:04:43 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 4 Nov 2008 21:04:43 +1100
Subject: [Twisted-Python] Trying to proxy through multiple IPs
In-Reply-To: <3d381e170811032306j7debe380hd54c1dc86d63d143@mail.gmail.com>
References: <3d381e170811032306j7debe380hd54c1dc86d63d143@mail.gmail.com>
Message-ID: <20081104100443.GI12038@steerpike.home.puzzling.org>

Erik Wickstrom wrote:
> Hi all,
> 
> I'm trying to write a proxy server that accepts connections on
> multiple ports, and depending on the port, using a different IP for
> the outgoing connection.  My code works except that adding additional
> reactor.listenTCP(...)s overwrite the IP of the previous listenTCPs.
> So the proxy accepts connections on all the desired ports, but only
> uses the last IP address for outgoing connections.
> 
> The ip (bindIP) is somehow being overwritten.  Based on advice from
> IRC (exarkun --thanks!), I've tried a couple attempts at using
> closures to solve the problem, but non of my implementations have done
> the trick.

I doesn't look like you understand how to write closures in Python.  Consider
this snippet of your code:

> class ProxyFactory(http.HTTPFactory):
>     def class_factory(self, bindIP):
>         def closure(ip):
>             klass2 = ProxyRequest
>             setattr(klass2, 'bindIP', ip)
>             return klass2
>         klass = Proxy
>         setattr(klass, 'requestFactory', closure(bindIP))
>         return klass
> 
>     def __init__(self, ip):
>         http.HTTPFactory.__init__(self)
>         self.ip = ip
>         #self.protocol = proxy.Proxy
>         self.protocol = self.class_factory(ip)

These lines are equivalent to the much simpler:

class ProxyFactory(http.HTTPFactory):

    def __init__(self, ip):
         self.protocol = Proxy
         self.protocol.requestFactory = ProxyRequest
         self.protocol.requestFactory.bindIP = ip

In particular, even though you define a function you call “closure”, because you
always invoke it immediately after defining it (and do nothing else with it) you
don't gain any difference in behaviour by making a function.

So the problem is you have just a single global requestFactory for all ProxyFactory's
(the ProxyRequest class), but you're mutating that as if it's not global.

The solution is to either,

  a) actually have a different requestFactory, or
  b) pass the bindIP to the ProxyRequest (the object that cares about it) some
     other way.

a) is a bit messy, even when done correctly.  The simpler way is b):

    class ProxyRequest(Request):

        protocols = {'http': ProxyClientFactory}
        ports = {'http': 80}
    
        def __init__(self, channel, queued, reactor=reactor):
            Request.__init__(self, channel, queued)
            self.reactor = reactor
            self.bindIP = self.channel.factory.ip

        # ...the rest of ProxyRequest as you had it...

    class Proxy(HTTPChannel):
        requestFactory = ProxyRequest
    
    class ProxyFactory(http.HTTPFactory):

        def __init__(self, ip):
             http.HTTPFactory.__init__(self)
             self.ip = ip

-Andrew.




From glyph at divmod.com  Tue Nov  4 04:11:27 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 04 Nov 2008 11:11:27 -0000
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: <18703.46231.594938.56742@jon.es>
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
	<18703.46231.594938.56742@jon.es>
Message-ID: <20081104111127.6400.342806414.divmod.xquotient.903@weber.divmod.com>

On 02:33 am, terry at jon.es wrote:
>That would be fine if makeService could in turn return a Deferred that
>would result in an object implementing IServiceMaker, but as far as I 
>can
>tell, makeService does not allow this. And in the context of a Twisted
>plugin file like the above I'm even less clear on how to go about it.
>
>Am I missing something here?

As a matter of fact, yes :).

A Service instance is effectively a piece of static configuration.  In 
your example, you need to do reactor work; communicate with a remote 
database in a thread.  Services very definitely should _not_ be 
generating network traffic, scheduling timed calls, or otherwise talking 
to the reactor until "startService" has been called.  The idea with a 
Service is that you should be able to write a serialization mechanism 
that loads it out of a text file, a string in memory, or in your case a 
set of command line arguments, without touching any other objects, so 
that it can be re-configured and re-serialized by configuration tools.

You may want to create some _other_ configuration object, loaded from 
the remote database, in the middle of startService.  You may even want 
to have a multi-phase internal startup procedure to generate that 
object.  But you need to keep track of what state those things are in so 
that the infrastructure can come around and say stopService to you in 
the middle of that procedure and still get a clean, ordered shutdown. 
If the infrastructure were to get back a Deferred, there's nothing to 
call stopService on.



From ms at cerenity.org  Tue Nov  4 04:25:28 2008
From: ms at cerenity.org (Michael)
Date: Tue, 4 Nov 2008 11:25:28 +0000
Subject: [Twisted-Python] Trying to proxy through multiple IPs
In-Reply-To: <20081104100443.GI12038@steerpike.home.puzzling.org>
References: <3d381e170811032306j7debe380hd54c1dc86d63d143@mail.gmail.com>
	<20081104100443.GI12038@steerpike.home.puzzling.org>
Message-ID: <200811041125.29934.ms@cerenity.org>

Just going back to the closure issue, it's probably worth mentioning an issue 
with closures that people used to them in other languages sometimes get 
caught by.

On Tuesday 04 November 2008 10:04:43 Andrew Bennetts wrote:
> class ProxyFactory(http.HTTPFactory):
>
>     def __init__(self, ip):
>          self.protocol = Proxy
>          self.protocol.requestFactory = ProxyRequest
>          self.protocol.requestFactory.bindIP = ip

This is also safer than using what python views as a closure - because 
closures in python don't capture all the free variables unlike closures in 
other languages. 

The original poster's code...

> class ProxyFactory(http.HTTPFactory):
>     def class_factory(self, bindIP):
>         def closure(ip):
>             klass2 = ProxyRequest

... is not safe, due to the ProxyRequest free variable.


Example:

def ProxyRequest(who): print "hello", who

class demo(object):
    def __init__(self, f="world"):
        def mkClosure(f):
            def X():
                ProxyRequest(f)
            return X
        self._C = mkClosure(f)
    def C(self):
        (self._C)()

X=demo()
X.C()

def ProxyRequest(who):
   print "game over"

X.C()

Running this results in:
hello world
game over

In most other languages with closures I've used this would result in:

hello world
hello world

This issue remains in python 3.0, for those wondering.

The only safe way of doing this is to capture a local value and use that 
instead:

class demo(object):
    def __init__(self, f="world"):
        pr = proxyRequest
        def closure(f):
            def X():
                pr(f)
            return X
        self._C = closure(f)

... if you have to use a closure.


Michael.
-- 
http://yeoldeclue.com/blog



From terry at jon.es  Tue Nov  4 08:47:54 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Nov 2008 16:47:54 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 11:11:27 on Tuesday, 4 November 2008
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
	<18703.46231.594938.56742@jon.es>
	<20081104111127.6400.342806414.divmod.xquotient.903@weber.divmod.com>
Message-ID: <18704.28330.986594.539860@jon.es>

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> On 02:33 am, terry at jon.es wrote:
>> Am I missing something here?
glyph> As a matter of fact, yes :).

OK, thanks, I get it. That should have been obvious.


BTW, I spent an interesting morning getting my head around *exactly* how
inlineCallbacks does its thing... No summary of my thoughts could do it
justice. I wonder how many people on the planet have been down that rabbit
hole.

Was the Twisted project always called Twisted? I was thinking it's a really
good thing you picked that name - cause you definitely would have had to
rename it :-)

I hope people don't mind my peanut gallery commentary. We're all in this
together, after all. A little gallows humor occasionally seems in order.

Thanks again,
Terry



From general at eepatents.com  Tue Nov  4 10:32:50 2008
From: general at eepatents.com (Ed Suominen)
Date: Tue, 04 Nov 2008 09:32:50 -0800
Subject: [Twisted-Python] DeferredDict, defaultdict, map/reduce, silliness
In-Reply-To: <18702.23705.748433.94046@jon.es>
References: <18702.23705.748433.94046@jon.es>
Message-ID: <49108742.4030407@eepatents.com>

Terry,

I wrote something like what you're talking about for sAsync. It is a 
database-persisted store for named items.

http://foss.eepatents.com/api/sAsync/sasync.items.Items.html

Best regards, Ed

Terry Jones wrote:
> This isn't meant to be taken too seriously - perhaps just food for someone
> else to chew on while trying to relax...
> 
> I was thinking the other night about what a DeferredDict might look like,
> what it might be useful for, if anything, etc. We have DeferredList of
> course, so why not a dict?  Then I also remembered collections.defaultdict
> and couldn't resist the appeal of trying defaultdict(defer.Deferred).  That
> thinking led to the map/reduce silliness below. I don't know that it leads
> anywhere - I was just playing around.
> 
> Terry
> 
> 
> import sys
> from collections import defaultdict
> from twisted.internet import defer, reactor
> 
> class MapReduce(object):
>     def __init__(self, init, cb):
>         self.init = init
>         self.cb = cb
>         self.d = defaultdict(defer.Deferred)
> 
>     def map(self, *keys):
>         for key in keys:
>             self.d[key].addCallback(self.cb)
> 
>     def reduce(self):
>         def finalize(result, key):
>             return (key, result)
>         deferreds = []
>         for key, d in self.d.iteritems():
>             d.addCallback(finalize, key)
>             deferreds.append(d)
>             d.callback(self.init)
>         return defer.gatherResults(deferreds)
> 
> def main():
>     def printResult(result):
>         print result
>         reactor.stop()
>         
>     mr = MapReduce(0, lambda x: x + 1)
>     for line in sys.stdin.readlines():
>         mr.map(*line.split())
>     d = mr.reduce().addCallback(printResult)
>     
> if __name__ == '__main__':
>     reactor.callLater(0, main)
>     reactor.run()
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 



From general at eepatents.com  Tue Nov  4 10:35:19 2008
From: general at eepatents.com (Ed Suominen)
Date: Tue, 04 Nov 2008 09:35:19 -0800
Subject: [Twisted-Python] DeferredDict, defaultdict, map/reduce, silliness
In-Reply-To: <18702.23705.748433.94046@jon.es>
References: <18702.23705.748433.94046@jon.es>
Message-ID: <491087D7.4020601@eepatents.com>

Sorry about the dupe, but the link I sent in the earlier post was for a 
more general name:item class. My persistent async dictionary is built on 
that:

http://foss.eepatents.com/api/sAsync/sasync.pdict.PersistentDict.html

--------------------------------------------------------------------------

Terry,

I wrote something like what you're talking about for sAsync. It is a
database-persisted store for named items.

http://foss.eepatents.com/api/sAsync/sasync.items.Items.html

Best regards, Ed

Terry Jones wrote:
> This isn't meant to be taken too seriously - perhaps just food for someone
> else to chew on while trying to relax...
> 
> I was thinking the other night about what a DeferredDict might look like,
> what it might be useful for, if anything, etc. We have DeferredList of
> course, so why not a dict?  Then I also remembered collections.defaultdict
> and couldn't resist the appeal of trying defaultdict(defer.Deferred).  That
> thinking led to the map/reduce silliness below. I don't know that it leads
> anywhere - I was just playing around.
> 
> Terry
> 
> 
> import sys
> from collections import defaultdict
> from twisted.internet import defer, reactor
> 
> class MapReduce(object):
>     def __init__(self, init, cb):
>         self.init = init
>         self.cb = cb
>         self.d = defaultdict(defer.Deferred)
> 
>     def map(self, *keys):
>         for key in keys:
>             self.d[key].addCallback(self.cb)
> 
>     def reduce(self):
>         def finalize(result, key):
>             return (key, result)
>         deferreds = []
>         for key, d in self.d.iteritems():
>             d.addCallback(finalize, key)
>             deferreds.append(d)
>             d.callback(self.init)
>         return defer.gatherResults(deferreds)
> 
> def main():
>     def printResult(result):
>         print result
>         reactor.stop()
>         
>     mr = MapReduce(0, lambda x: x + 1)
>     for line in sys.stdin.readlines():
>         mr.map(*line.split())
>     d = mr.reduce().addCallback(printResult)
>     
> if __name__ == '__main__':
>     reactor.callLater(0, main)
>     reactor.run()
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 




From terry at jon.es  Tue Nov  4 10:41:50 2008
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Nov 2008 18:41:50 +0100
Subject: [Twisted-Python] A Python metaclass for Twisted allowing __init__
	to return a Deferred
In-Reply-To: Your message at 11:11:27 on Tuesday, 4 November 2008
References: <18702.15428.547828.694260@jon.es>
	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
	<18703.46231.594938.56742@jon.es>
	<20081104111127.6400.342806414.divmod.xquotient.903@weber.divmod.com>
Message-ID: <18704.35166.505202.308830@jon.es>

Hi again Glyph

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:

glyph> You may want to create some _other_ configuration object, loaded
glyph> from the remote database, in the middle of startService.  You may
glyph> even want to have a multi-phase internal startup procedure to
glyph> generate that object.  But you need to keep track of what state
glyph> those things are in so that the infrastructure can come around and
glyph> say stopService to you in the middle of that procedure and still get
glyph> a clean, ordered shutdown.  If the infrastructure were to get back a
glyph> Deferred, there's nothing to call stopService on.

Sorry to post so much on this - I do hope it's useful to other people.

Here's what I think you were saying, but in my own words:

I could do more complex work in startService, including dealing with
Deferreds. So to give a simple (non-working) example based on your earlier
classmethod suggestion, here's some sample code:

    from myservice import myhandler

    class MyService(internet.TCPServer):
        def __init__(self, port, dbURI):
            self.port = port
            self.dbURI = dbURI

        @defer.inlineCallbacks
        def startService(self):
            self.handler = yield myhandler.Handler.fromDbURI(self.dbURI)
            internet.TCPServer.__init__(self, self.port, self.handler.getFactory())
            yield self.handler.startDB()
            yield self.handler.createTables()
            # Perhaps do other init things...
            internet.TCPServer.startService(self)

        def stopService(self):
            self.handler.exit()
            return internet.TCPServer.stopService(self)

As you suggested, myhandler.Handler.fromDbURI is a classmethod that gets a
Deferred and adds a callback to it that will return an instance of
myhandler.Handler. Then I do a couple of other Deferred-producing
operations and finally start a TCP server.

The problem with this is that the caller of startService gets a Deferred
back immediately after myhandler.Handler.fromDbURI returns its Deferred.
As far as I can see, no-one looks at the return result of startService. So
the calling code may proceed willy nilly on the assumption that the service
has started, when in fact it hasn't. I.e., when startService returns its
Deferred, the myhandler.Handler.fromDbURI likely wont have completed, and
the subsequent calls (startDB, createTables) wont have even started.

You went on to say:

glyph> You may even want to have a multi-phase internal startup procedure
glyph> to generate that object.  But you need to keep track of what state
glyph> those things are in so that the infrastructure can come around and
glyph> say stopService to you in the middle of that procedure and still get
glyph> a clean, ordered shutdown.

Which I guess you'd just repeat again now?

IOW, if my startService is going to do various operations with Deferreds,
then as those things happen I should be (for example) updating
handler.state to indicate whether the handler is actually ready. And if a
stopService call comes along, I have the handler object and can examine its
state to shut things down properly, depending on where I am in setting
things up.  To close a further hole, I'd put an attribute onto the
MyService instance to indicate when the yield that will result in
self.handler being assigned is still awaiting the generator send in
inlineCallbacks.

Unfortunately this seems to imply that I also then need to put checks into
handler methods to make sure it's actually ready before trying anything. I
suppose I'd just log and ignore those early calls, maybe checking that they
actually were early. And/or add a timer. What an involved mess!

Is all this a reasonable summary of what you were imagining / describing?

Thanks again, and apologies for so many mails.

Terry



From ddwiggins at advpubtech.com  Tue Nov  4 11:05:42 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 04 Nov 2008 10:05:42 -0800
Subject: [Twisted-Python] Re: A Python metaclass for Twisted allowing
 __init__ to return a Deferred
In-Reply-To: <20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
References: <18702.15428.547828.694260@jon.es>	<18703.8010.379291.213184@jon.es>
	<20081103201709.6400.1212227518.divmod.xquotient.746@weber.divmod.com>
Message-ID: <geq2tn$5q2$1@ger.gmane.org>

Glyph's very nice critique reminds me a bit of wxPython's 2 stage 
creation of widgets (described for example in 
http://wiki.wxpython.org/TwoStageCreation); there, as here, the idea is 
to "initialize juuuust enough" to allow setting the context for creating 
the actual widget.  I don't know if that technique would be adaptable to 
this situation, but FWIW...

-- 
Don Dwiggins
Advanced Publishing Technology




From daedalus at eigenmagic.com  Tue Nov  4 17:58:41 2008
From: daedalus at eigenmagic.com (Justin Warren)
Date: Wed, 05 Nov 2008 11:58:41 +1100
Subject: [Twisted-Python] FirstError handling from defer.gatherResults()?
Message-ID: <1225846721.6711.40.camel@localhost>

I'm missing something obvious, so I must consult the gurus of the list:

I have some code that gets info from remote devices, a little like this:

def get_thing_info():
  dlist = []
  for thing in thinglist:
    d = thing.fetch_info()
    dlist.append(d)

  return defer.gatherResults(dlist)

If an error occurs, gatherResults() behaves like
DeferredList(fireOnOneErrback=True), but the errback will receive a
FirstError object, not a Failure.

Normally, I'd do something like this in an Errback:

def cb_handle_failure(failure):
  e = failure.trap(MyNonFatalException)
  if e:
    log.debug("Not a fatal failure. Getting info again.")
    return get_thing_info()

But what is the right way to do this when I receive a FirstError?

-- 
Justin Warren <daedalus at eigenmagic.com>




From terry at jon.es  Tue Nov  4 18:51:56 2008
From: terry at jon.es (Terry Jones)
Date: Wed, 5 Nov 2008 02:51:56 +0100
Subject: [Twisted-Python] FirstError handling from defer.gatherResults()?
In-Reply-To: Your message at 11:58:41 on Wednesday, 5 November 2008
References: <1225846721.6711.40.camel@localhost>
Message-ID: <18704.64572.699719.416918@jon.es>

Hi Justin

>>>>> "Justin" == Justin Warren <daedalus at eigenmagic.com> writes:
Justin> If an error occurs, gatherResults() behaves like
Justin> DeferredList(fireOnOneErrback=True), but the errback will receive a
Justin> FirstError object, not a Failure.

Justin> Normally, I'd do something like this in an Errback:

Justin> def cb_handle_failure(failure):
Justin>   e = failure.trap(MyNonFatalException)

Justin> But what is the right way to do this when I receive a FirstError?

The FirstError holds the original failure in an attribute called
subFailure. So you should be able to do

    e = failure.value.subFailure.trap(MyNonFatalException)

Terry



From daedalus at eigenmagic.com  Tue Nov  4 20:00:56 2008
From: daedalus at eigenmagic.com (Justin Warren)
Date: Wed, 05 Nov 2008 14:00:56 +1100
Subject: [Twisted-Python] FirstError handling from defer.gatherResults()?
In-Reply-To: <18704.64572.699719.416918@jon.es>
References: <1225846721.6711.40.camel@localhost>
	<18704.64572.699719.416918@jon.es>
Message-ID: <1225854056.6711.46.camel@localhost>

On Wed, 2008-11-05 at 02:51 +0100, Terry Jones wrote:
> Hi Justin
> 
> >>>>> "Justin" == Justin Warren <daedalus at eigenmagic.com> writes:
> Justin> If an error occurs, gatherResults() behaves like
> Justin> DeferredList(fireOnOneErrback=True), but the errback will receive a
> Justin> FirstError object, not a Failure.
> 
> Justin> Normally, I'd do something like this in an Errback:
> 
> Justin> def cb_handle_failure(failure):
> Justin>   e = failure.trap(MyNonFatalException)
> 
> Justin> But what is the right way to do this when I receive a FirstError?
> 
> The FirstError holds the original failure in an attribute called
> subFailure. So you should be able to do
> 
>     e = failure.value.subFailure.trap(MyNonFatalException)

Yes, ok. That's what I thought I should be doing, however trial appears
to still think that the error I've trapped has occurred, and ERRORs the
test. Am I not clearing state somewhere? I thought that simply handling
the failure (and not returning a Failure from the errback) would stop
this?

-- 
Justin Warren <daedalus at eigenmagic.com>




From exarkun at divmod.com  Tue Nov  4 22:36:24 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 5 Nov 2008 00:36:24 -0500
Subject: [Twisted-Python] FirstError handling from defer.gatherResults()?
In-Reply-To: <1225854056.6711.46.camel@localhost>
Message-ID: <20081105053624.29191.578608441.divmod.quotient.49920@ohm>

On Wed, 05 Nov 2008 14:00:56 +1100, Justin Warren <daedalus at eigenmagic.com> wrote:
>On Wed, 2008-11-05 at 02:51 +0100, Terry Jones wrote:
>> Hi Justin
>>
>> >>>>> "Justin" == Justin Warren <daedalus at eigenmagic.com> writes:
>> Justin> If an error occurs, gatherResults() behaves like
>> Justin> DeferredList(fireOnOneErrback=True), but the errback will receive a
>> Justin> FirstError object, not a Failure.
>>
>> Justin> Normally, I'd do something like this in an Errback:
>>
>> Justin> def cb_handle_failure(failure):
>> Justin>   e = failure.trap(MyNonFatalException)
>>
>> Justin> But what is the right way to do this when I receive a FirstError?
>>
>> The FirstError holds the original failure in an attribute called
>> subFailure. So you should be able to do
>>
>>     e = failure.value.subFailure.trap(MyNonFatalException)
>
>Yes, ok. That's what I thought I should be doing, however trial appears
>to still think that the error I've trapped has occurred, and ERRORs the
>test. Am I not clearing state somewhere? I thought that simply handling
>the failure (and not returning a Failure from the errback) would stop
>this?

The Deferred in the list you passed to gatherResults still failed
because gatherResults doesn't pass consumeErrors=True to the DeferredList
it created.  So even though you trapped the failure from the Deferred
gatherResults returned, the original Deferred still has an unhandled
failure and your test gets an error.

To fix this, use DeferredList instead of gatherResults (or your own
version of gatherResults that does pass consumeErrors=True) or add
your own errbacks to all the Deferreds in the list after you've
passed the list to gatherResults.

Jean-Paul



From blair.bethwaite at gmail.com  Tue Nov  4 23:18:28 2008
From: blair.bethwaite at gmail.com (Blair Bethwaite)
Date: Wed, 5 Nov 2008 17:18:28 +1100
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
References: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
Message-ID: <ab42a7c0811042218obfaafc8q7031a37126d7e5e2@mail.gmail.com>

David, thanks for your response, it's great when people take the time
to read a lengthy question and then respond with some insight!

David Ripton wrote:
> PB allows both ends of the connection to send and receive at any time,
> over a single connection.  I use it for a game where multiple clients
> connect via TCP to a server, and then the clients send messages to the
> server whenever they want, and the server sends messages to one or more
> clients whenever it wants (over the original connections initiated by
> the clients, so the clients don't need to open any holes in their
> firewalls), and everything just stinking works.

I ended up sort of answering this one for myself by just playing with
a basic chat server example and sniffing packets - only saw
SYN,SYN-ACK,ACK once for each client. Though it would be nice if the
documentation gave this level of detail, presumably this is something
that belongs with the different transports.

> That's not the way XML-RPC is typically done.  Clearly you could make a
> protocol that uses XML-RPC payload over a persistent connection.  But
> you'd lose the ability to use arbitrary XML-RPC libraries unmodified,
> which is probably the main benefit of choosing XML-RPC.

Duh, good point! Guess I was kinda trying to map our requirements onto
an example that looked easy (from the book).

> If not for the Java requirement, I would say that Twisted is a good fit,
> and that you could use either PB or AMP, depending on whether you want
> to pass around complex types or simple ones.  But if you need Java,
> I don't know.

Guess I'll have to take a closer look at the Java implementation. Not
sure why I didn't stumble across AMP before but looks promising...

Thanks,
-Blair

--
In science one tries to tell people, in such a way
as to be understood by everyone, something that
no one ever knew before. But in poetry, it's the
exact opposite.
- Paul Dirac



From daedalus at eigenmagic.com  Tue Nov  4 23:22:23 2008
From: daedalus at eigenmagic.com (Justin Warren)
Date: Wed, 05 Nov 2008 17:22:23 +1100
Subject: [Twisted-Python] FirstError handling from defer.gatherResults()?
In-Reply-To: <20081105053624.29191.578608441.divmod.quotient.49920@ohm>
References: <20081105053624.29191.578608441.divmod.quotient.49920@ohm>
Message-ID: <1225866143.6711.49.camel@localhost>

On Wed, 2008-11-05 at 00:36 -0500, Jean-Paul Calderone wrote:

> >Yes, ok. That's what I thought I should be doing, however trial appears
> >to still think that the error I've trapped has occurred, and ERRORs the
> >test. Am I not clearing state somewhere? I thought that simply handling
> >the failure (and not returning a Failure from the errback) would stop
> >this?
> 
> The Deferred in the list you passed to gatherResults still failed
> because gatherResults doesn't pass consumeErrors=True to the DeferredList
> it created.  So even though you trapped the failure from the Deferred
> gatherResults returned, the original Deferred still has an unhandled
> failure and your test gets an error.
> 
> To fix this, use DeferredList instead of gatherResults (or your own
> version of gatherResults that does pass consumeErrors=True) or add
> your own errbacks to all the Deferreds in the list after you've
> passed the list to gatherResults.

Awesome! Thanks Jean-Paul.

To the code!

-- 
Justin Warren <daedalus at eigenmagic.com>




From andrewfr_ice at yahoo.com  Wed Nov  5 07:11:41 2008
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 5 Nov 2008 06:11:41 -0800 (PST)
Subject: [Twisted-Python] RPython and Twisted
Message-ID: <378319.53548.qm@web34203.mail.mud.yahoo.com>

Hi J.P:

AF>I wish to start experimenting by re-writing an example (the programme I AF>posted in RPtyhon and converting it to C.

Oops. I meant Stackless Python not RPython.

>Since the RPython/PyPy toolchain currently has better support for >generating standalone executables than for doing much else, I'd suggest >taking that approach.  Compile your RPython to a standalone executable, >run it from a Twisted-based process and do some simple RPC over stdio.
> It's a bit heavy handed, but I think it's the most straightforward >approach given the state of RPython. 

It is a good approach. Bear with me, I am still reading up but let me run this one by you: compile a RPython programme to C. Embed a Python interpreter running Twisted. Still heavy handed but I think that brings us closer to understanding integration issues (and getting something to work).

>There's probably nothing special about using RPython with Twisted -

Again, I am not sure - if the Twisted parts could not be converted, I believe the programme would run as a regular Python programme.

Then is the question of how difficult would it be to write Twisted in RPython? Would it be worth it? I suspect that the I/O would still be bottleneck.

>from the RPython perspective, Twisted is just another pile of Python >code that you need to figure out an integration strategy for. 

I don't know about this. I am reading the FAQ:

[blockquote]
Can I use PyPy and RPython to compile smaller parts of my Python program?

No. That would be possible, and we played with early attempts in that direction, but there are many delicate issues: for example, how the compiled and the non-compiled parts exchange data. Supporting this in a nice way would be a lot of work.
[/blocquote]

J.P thanks for the suggestion. I guess it is time to write some tests :-)

Cheers,
Andrew




      



From python at blackslens.com  Wed Nov  5 08:52:46 2008
From: python at blackslens.com (Black)
Date: Wed, 5 Nov 2008 10:52:46 -0500
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <ab42a7c0811042218obfaafc8q7031a37126d7e5e2@mail.gmail.com>
References: <ab42a7c0810302252k576137d1ub2a39246ef6cdac4@mail.gmail.com>
	<ab42a7c0811042218obfaafc8q7031a37126d7e5e2@mail.gmail.com>
Message-ID: <CD5FB5F4-EFEC-45E2-9F06-688A98D4E5E0@blackslens.com>

I'm going to chime in here with a pretty general comment...


On Nov 5, 2008, at 1:18 AM, Blair Bethwaite wrote:
>>
>
> Guess I'll have to take a closer look at the Java implementation. Not
> sure why I didn't stumble across AMP before but looks promising...
>


I can probably guess why you didn't stumble across AMP, because it  
took me a long time to discover it as well. The problem is that ti  
isn't really discussed anywhere in the Twisted documentation (other  
than in the API description). It is, I think, one of the better kept  
secrets in the Twisted arsenal. The only exception is on this list,  
where it comes up frequently as the solution to a lot of problems  
(though without much detail). I wonder if there wouldn't be some  
benefit to adding a section in the core documentation near the section  
on the PB... I would write some myself, but I didn't find AMP in time  
and wrote the apps I currently work with using PB or custom protocols  
and I just haven't had the time to learn AMP and work with it...




From exarkun at divmod.com  Wed Nov  5 09:19:21 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 5 Nov 2008 11:19:21 -0500
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <CD5FB5F4-EFEC-45E2-9F06-688A98D4E5E0@blackslens.com>
Message-ID: <20081105161921.29191.1446923850.divmod.quotient.50181@ohm>

On Wed, 5 Nov 2008 10:52:46 -0500, Black <python at blackslens.com> wrote:
>I'm going to chime in here with a pretty general comment...
>
>
>On Nov 5, 2008, at 1:18 AM, Blair Bethwaite wrote:
>>>
>>
>>Guess I'll have to take a closer look at the Java implementation. Not
>>sure why I didn't stumble across AMP before but looks promising...
>I can probably guess why you didn't stumble across AMP, because it  took me 
>a long time to discover it as well. The problem is that ti  isn't really 
>discussed anywhere in the Twisted documentation (other  than in the API 
>description). It is, I think, one of the better kept  secrets in the Twisted 
>arsenal.

One reason for that is that AMP is about two years old; PB is at least 7,
probably a little bit older.

Of course, it'd be great to have some howto-style documentation for AMP.

Jean-Paul



From ellisonbg.net at gmail.com  Wed Nov  5 10:18:52 2008
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 5 Nov 2008 09:18:52 -0800
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <20081105161921.29191.1446923850.divmod.quotient.50181@ohm>
References: <CD5FB5F4-EFEC-45E2-9F06-688A98D4E5E0@blackslens.com>
	<20081105161921.29191.1446923850.divmod.quotient.50181@ohm>
Message-ID: <6ce0ac130811050918xb57294fv4f5da0ef05b489a1@mail.gmail.com>

I also highly recommend Foolscap (http://foolscap.lothar.com/trac),
which was designed as a next generation PB-like RPC protocol.  Some
advantages of Foolscap:

* Security is built-in and easy to use.  The security model of
Foolscap is based on the object capability model and is really nice.
If you need security (encryption+authentication) Foolscap is the way
to go.  PB can be made secure, but it is not straighforward.

* Much better support for streaming large objects than PB or AMP has.

We have used PB extensively as well though and if you don't need
security or the ability to handle large objects, it it great.

Bran

On Wed, Nov 5, 2008 at 8:19 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 5 Nov 2008 10:52:46 -0500, Black <python at blackslens.com> wrote:
>>
>> I'm going to chime in here with a pretty general comment...
>>
>>
>> On Nov 5, 2008, at 1:18 AM, Blair Bethwaite wrote:
>>>>
>>>
>>> Guess I'll have to take a closer look at the Java implementation. Not
>>> sure why I didn't stumble across AMP before but looks promising...
>>
>> I can probably guess why you didn't stumble across AMP, because it  took
>> me a long time to discover it as well. The problem is that ti  isn't really
>> discussed anywhere in the Twisted documentation (other  than in the API
>> description). It is, I think, one of the better kept  secrets in the Twisted
>> arsenal.
>
> One reason for that is that AMP is about two years old; PB is at least 7,
> probably a little bit older.
>
> Of course, it'd be great to have some howto-style documentation for AMP.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From dripton at ripton.net  Wed Nov  5 14:49:31 2008
From: dripton at ripton.net (David Ripton)
Date: Wed, 5 Nov 2008 13:49:31 -0800
Subject: [Twisted-Python] AMP port to C?
Message-ID: <20081105214931.GA26643@vidar.dreamhost.com>

Has anyone ported Twisted AMP to C?

If so, is the code publicly available?  

Thanks.

-- 
David Ripton    dripton at ripton.net



From reza at getpeer.com  Thu Nov  6 07:31:44 2008
From: reza at getpeer.com (Reza Lotun)
Date: Thu, 6 Nov 2008 14:31:44 +0000
Subject: [Twisted-Python] Silencing PotentialZombieWarning
In-Reply-To: <356e30830811060625g1827df65g59d60185b6257d5e@mail.gmail.com>
References: <356e30830811060625g1827df65g59d60185b6257d5e@mail.gmail.com>
Message-ID: <356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>

Hi All,

I'm working on a multi-platform (win32 and os x) wx + Twisted app,
where I've found the best solution is to run both in a separate thread
- the main thread is wx, and the other is Twisted. It basically works
like a charm (though I'd be interested in hearing about other
approaches. I've also played with wxreactor way back, but didn't find
it as stable).

Because I spawn a few processes (using spawnProcess), and must run my
reactor with installSignalHandlers=0, I get PotentialZombieWarning
errors every time I spawn. Now, I handle reaping of my processes
manually for various reasons, and also install my own signal handlers
(in the main thread; I also pass clearSigInt=False to wx). Is there
any way I can silence these warnings?

Thanks,
Reza


--
Reza Lotun
Senior Software Engineer
GetPeer Limited
reza at getpeer.com



From exarkun at divmod.com  Thu Nov  6 07:44:24 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 6 Nov 2008 09:44:24 -0500
Subject: [Twisted-Python] Silencing PotentialZombieWarning
In-Reply-To: <356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>
Message-ID: <20081106144424.29191.2116200826.divmod.quotient.50683@ohm>

On Thu, 6 Nov 2008 14:31:44 +0000, Reza Lotun <reza at getpeer.com> wrote:
>Hi All,
>
>I'm working on a multi-platform (win32 and os x) wx + Twisted app,
>where I've found the best solution is to run both in a separate thread
>- the main thread is wx, and the other is Twisted. It basically works
>like a charm (though I'd be interested in hearing about other
>approaches. I've also played with wxreactor way back, but didn't find
>it as stable).
>
>Because I spawn a few processes (using spawnProcess), and must run my
>reactor with installSignalHandlers=0, I get PotentialZombieWarning
>errors every time I spawn. Now, I handle reaping of my processes
>manually for various reasons, and also install my own signal handlers
>(in the main thread; I also pass clearSigInt=False to wx). Is there
>any way I can silence these warnings?

Sure.  See the Python documentation for warnings.filterwarnings.

Jean-Paul



From reza at getpeer.com  Thu Nov  6 08:17:28 2008
From: reza at getpeer.com (Reza Lotun)
Date: Thu, 6 Nov 2008 15:17:28 +0000
Subject: [Twisted-Python] Silencing PotentialZombieWarning
In-Reply-To: <20081106144424.29191.2116200826.divmod.quotient.50683@ohm>
References: <356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>
	<20081106144424.29191.2116200826.divmod.quotient.50683@ohm>
Message-ID: <356e30830811060717k16413f0exd498e983e5659aec@mail.gmail.com>

Thanks Jean-Paul, I didn't know about the warnings module!

Cheers,
Reza

On Thu, Nov 6, 2008 at 2:44 PM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>
> Sure.  See the Python documentation for warnings.filterwarnings.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Reza Lotun
Senior Software Engineer
GetPeer Limited
reza at getpeer.com



From dialtone at gmail.com  Thu Nov  6 12:51:26 2008
From: dialtone at gmail.com (Valentino Volonghi)
Date: Thu, 6 Nov 2008 11:51:26 -0800
Subject: [Twisted-Python] AMP port to C?
In-Reply-To: <20081105214931.GA26643@vidar.dreamhost.com>
References: <20081105214931.GA26643@vidar.dreamhost.com>
Message-ID: <212ED43F-3F4F-463E-BD8B-89743DAD62C7@gmail.com>


On Nov 5, 2008, at 1:49 PM, David Ripton wrote:

> Has anyone ported Twisted AMP to C?
>
> If so, is the code publicly available?


Would be cool, I'd like to have serializers/deserializers in C.

-- 
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081106/6adfb497/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20081106/6adfb497/attachment.sig>

From glyph at divmod.com  Thu Nov  6 13:22:53 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 06 Nov 2008 20:22:53 -0000
Subject: [Twisted-Python] making twisted provide good feedback (was Re:
	Having reactor run at the main thread...)
In-Reply-To: <d06a5cd30811060148q1cccf144g438dc29b70bb7bcf@mail.gmail.com>
References: <2f5ea7490811041220j64d2ad63h3b09e35f14680048@mail.gmail.com>
	<20081104224833.GJ12038@steerpike.home.puzzling.org>
	<2f5ea7490811041959k436c6a63he6b5a88d0cb4e75d@mail.gmail.com>
	<20081105041108.GL12038@steerpike.home.puzzling.org>
	<20081105150823.GB2561@mcnabbs.org>
	<20081105192431.6400.884481684.divmod.xquotient.1050@weber.divmod.com>
	<20081105211925.GC3797@mcnabbs.org>
	<20081106025537.6400.378398420.divmod.xquotient.1281@weber.divmod.com>
	<d06a5cd30811060148q1cccf144g438dc29b70bb7bcf@mail.gmail.com>
Message-ID: <20081106202253.6400.1138909160.divmod.xquotient.1335@weber.divmod.com>

(Moving this off the twisted-web list because it is of more general 
interest and contains nothing web-specific.)

On 09:48 am, jml at mumak.net wrote:
>On the other hand, there's a related invalid argument that gets used a
>lot by library and framework authors: "if we provide X, people might
>misuse it, so we should not provide X". This argument is also bogus
>(that way lies Java). Provide safe, well-documented alternatives for
>the abusers and let those who want to shoot themselves in the foot do
>so: sometimes they might actually know better than you.

I find it peculiar that you think this is Java's disease.  My 
perspective is that Java is unpleasant because it is remarkably tedious, 
redundant, and inconsistent, not because it lacks functionality.  If 
anything, it's a mess of functionality, and there are too many ways to 
do the same thing.

If you want to shoot yourself in the foot (or face, as the case may be) 
there's always the com.sun hierarchy, which despite being full of 
warnings signs and sparsely documented, is all public (at the language 
level) and accessible from Java programs which wish to go that way.  In 
that sense it's relatively hacker friendly.  For more fun with foot- 
shooting there's also AccessibleObject, which lets you call private 
methods and access private fields.

I think the whole issue here is very complex, and so I'd like to repeat 
and perhaps more clearly explain my own views.

I work at the bleeding edge of lots of software and am frequently 
frustrated when the authors of libraries that I use don't bother with 
"edge" cases that are necessary to the applications that I write. 
Twisted should provide excellent support for valid use-cases, no matter 
how obscure.

On the other hand, it's equally frustrating to use a library where the 
incredibly obscure "you probably don't need this" and the 99%-of-the- 
time positive-path APIs are listed, without any particular ordering, in 
one giant flat list.  It's particularly frustrating to google for "How 
do I (X)" and get a solution which uses an apparently reasonable API to 
do (X), only to discover months after using it that it's actually 
unsupported and you're not supposed to touch it and now your program is 
going to break horribly with the next minor version of the library.

This isn't just a problem with documentation, because in reality nobody 
reads documentation.  If you're writing a program, you're going to read 
_just_ enough of the API doc and do just enough groveling around with 
dir() and pydoc to get yourself to the point where something works. 
When it works, you will probably consider that sufficient proof that you 
used the APIs correctly, unless you had to type something that _looked_ 
particularly gross in the course of doing it, or you got a bunch of 
warnings out of your program when you ran it.  This is the whole point 
of DeprecationWarning: somehow, your library code itself has to 
communicate with the the developer who is invoking it and tell them 
useful things about their use or misuse.

I feel like Twisted has more of the latter problem than the former. 
There are a lot of methods which aren't really private 
(addReader/removeReader) that don't differentiate themselves as more or 
less private or refer you to the more portable and general APIs that you 
probably want (pauseProducing/resumeProducing).  However, (modulo global 
reactors, of course) Twisted does support a lot of edge cases very 
nicely.

Speaking from personal experience, there are a lot of people who show up 
in #twisted looking at 
<http://twistedmatrix.com/documents/8.1.0/api/twisted.internet._sslverify.html> 
when they should be looking at 
<http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.ssl.html>, 
or 
<http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.iocpreactor.tcp.Server.html> 
when they should be looking at 
<http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.interfaces.IReactorTCP.html>. 
In the long term, we need to write both better documentation and more 
code that gets these people back onto the right track.

I know I've used a few libraries which provided exactly this kind of 
feedback and it was very satisfying and educational.  It's really an 
art, one that's difficult to master, and I don't know that I really know 
the right way to do it in the general case.  The danger that comes along 
with doing it wrong is very nicely explained here: 
http://blogs.msdn.com/oldnewthing/archive/2008/10/06/8969399.aspx - if 
you make an API which doesn't work except for the "special" cases, then 
everyone just starts using the "special" version.



From stephen.c.waterbury at nasa.gov  Thu Nov  6 14:30:34 2008
From: stephen.c.waterbury at nasa.gov (Stephen Waterbury)
Date: Thu, 06 Nov 2008 16:30:34 -0500
Subject: wxreactor [was Re: [Twisted-Python] Silencing PotentialZombieWarning]
In-Reply-To: <356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>
References: <356e30830811060625g1827df65g59d60185b6257d5e@mail.gmail.com>
	<356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>
Message-ID: <491361FA.80105@nasa.gov>

Reza Lotun wrote:
> I'm working on a multi-platform (win32 and os x) wx + Twisted app,
> where I've found the best solution is to run both in a separate thread
> - the main thread is wx, and the other is Twisted. It basically works
> like a charm (though I'd be interested in hearing about other
> approaches. I've also played with wxreactor way back, but didn't find
> it as stable).

I'd be interested to know what wxreactor symptoms of non-stability
you saw.

A few months ago, the wxreactor apps wxdemo.py and wxacceptance.py on
ubuntu worked, but if I added a file dialog to wxacceptance.py, invoking
the file dialog caused the application to hang.

In my most recent experiments, wxdemo.py just hangs but
wxacceptance.py works fine, even with the addition of a file dialog
-- presumably due to some recent change in wx, since wxreactor has not
been modified recently.  The environment I'm using is:

* ubuntu hardy, fully updated
* Python 2.5.2
* wxPython 2.8.9.1-0 (python-wxgtk2.8 from http://apt.wxwidgets.org/)
* Twisted svn trunk rev 25323.

I've attached an example (wxacceptancemod.py) that has the
file dialog that used to cause the lock-up, sets the helloWorld loop
interval to 4 seconds, and closes the gui window immediately when
it receives the DoExit event (by calling self.Show(False)) --
a friendlier behavior than the original wxacceptance.py, which
leaves the gui window hanging until the last reactor iteration
completes (kinda misses the point of being asynchronous ;),
although this only becomes noticeable if the helloWorld loop interval
is set to more than a second or two.

Interestingly, wxdemo.py works if the helloWorld loop from
wxacceptance.py is added to it, and wxacceptance.py ceases to work
if the callLater loop is removed.  The looping interval used is
arbitrary, so it seems the reactor stack needs to stay loaded with 
something or it hangs.

Although it's not pretty, I don't mind adding a non-printing callLater
loop to my code so that wxreactor works, but of course it would be
nice to know what's going on. ;)

Do others see these behaviors if you run these examples?

Steve
-------------- next part --------------
A non-text attachment was scrubbed...
Name: wxacceptancemod.py
Type: text/x-python
Size: 3619 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20081106/d6988e4a/attachment-0002.py>

From stephen.c.waterbury at nasa.gov  Thu Nov  6 14:35:38 2008
From: stephen.c.waterbury at nasa.gov (Stephen Waterbury)
Date: Thu, 06 Nov 2008 16:35:38 -0500
Subject: wxreactor [was Re: [Twisted-Python] Silencing
	PotentialZombieWarning]
In-Reply-To: <491361FA.80105@nasa.gov>
References: <356e30830811060625g1827df65g59d60185b6257d5e@mail.gmail.com>	<356e30830811060631o25c620b6nf9f2d036db870ebf@mail.gmail.com>
	<491361FA.80105@nasa.gov>
Message-ID: <4913632A.60802@nasa.gov>

Stephen Waterbury wrote:
> A few months ago, the wxreactor apps wxdemo.py and wxacceptance.py on
> ubuntu worked ...

I meant "worked on ubuntu", not "on ubuntu worked" -- the examples
are in twisted's doc/core/examples, nothing unique to ubuntu. ;)

Steve




From jml at mumak.net  Fri Nov  7 03:30:43 2008
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 7 Nov 2008 11:30:43 +0100
Subject: [Twisted-Python] making twisted provide good feedback (was Re:
	Having reactor run at the main thread...)
In-Reply-To: <20081106202253.6400.1138909160.divmod.xquotient.1335@weber.divmod.com>
References: <2f5ea7490811041220j64d2ad63h3b09e35f14680048@mail.gmail.com>
	<20081104224833.GJ12038@steerpike.home.puzzling.org>
	<2f5ea7490811041959k436c6a63he6b5a88d0cb4e75d@mail.gmail.com>
	<20081105041108.GL12038@steerpike.home.puzzling.org>
	<20081105150823.GB2561@mcnabbs.org>
	<20081105192431.6400.884481684.divmod.xquotient.1050@weber.divmod.com>
	<20081105211925.GC3797@mcnabbs.org>
	<20081106025537.6400.378398420.divmod.xquotient.1281@weber.divmod.com>
	<d06a5cd30811060148q1cccf144g438dc29b70bb7bcf@mail.gmail.com>
	<20081106202253.6400.1138909160.divmod.xquotient.1335@weber.divmod.com>
Message-ID: <d06a5cd30811070230w1e4156aao3f23cdd9b92b125d@mail.gmail.com>

On Thu, Nov 6, 2008 at 9:22 PM,  <glyph at divmod.com> wrote:
> (Moving this off the twisted-web list because it is of more general interest
> and contains nothing web-specific.)
>
> On 09:48 am, jml at mumak.net wrote:
>>
>> On the other hand, there's a related invalid argument that gets used a
>> lot by library and framework authors: "if we provide X, people might
>> misuse it, so we should not provide X". This argument is also bogus
>> (that way lies Java). Provide safe, well-documented alternatives for
>> the abusers and let those who want to shoot themselves in the foot do
>> so: sometimes they might actually know better than you.
>
> I find it peculiar that you think this is Java's disease.  My perspective is
> that Java is unpleasant because it is remarkably tedious, redundant, and
> inconsistent, not because it lacks functionality.  If anything, it's a mess
> of functionality, and there are too many ways to do the same thing.
>

I was thinking of operator overloading and multiple inheritance,
actually. The rationale for not including them in the language was
that they are often abused. {{fact}}

> Twisted should provide excellent support for valid use-cases, no matter how obscure.

+1

> On the other hand, it's equally frustrating to use a library where the
> incredibly obscure "you probably don't need this" and the 99%-of-the- time
> positive-path APIs are listed, without any particular ordering, in one giant
> flat list.

Yes. This is a documentation (or perhaps a navigation) problem. I
simply wanted to make the point that I find "don't provide X because
people might abuse it" unconvincing. I don't even think you were
making that point, but I really really want to be clear that it's not
a good one.

Also, if you haven't read it, you might enjoy Rusty's interface guide:
http://sourcefrog.net/weblog/software/aesthetics/interface-levels.html

jml



From jeff.dyke at gmail.com  Fri Nov  7 06:29:50 2008
From: jeff.dyke at gmail.com (Jeff Dyke)
Date: Fri, 7 Nov 2008 08:29:50 -0500
Subject: [Twisted-Python] freeing the reactor to do other jobs
Message-ID: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>

I'm using the XMLRPC server in twisted and a few methods call other,
sometimes long running, functions/methods.  I'm trying to get my brain
around how to free the reactor to respond to other requests while this
is happening.

A scenario.  A call is made to the server, which selects say 10K rows
from a db and needs to check each row against a table and if they do
not exist, insert them.

""" Oversimplified version of the process """
def getData(self,user_id):
    rows = self.getUserData(user_id)
    for row in rows:
        if self.existsInQueue(row['some_id']):
            continue
        else:
             self.insertQueue(row)


I want the caller to wait on a result from this process, but I also
want the reactor to be able to handle other requests as they come in.
This function is not directly registered in the xmlrpc server with
xmlrpc_getData, but is called by that type of method after validation
that it is allowed to run in this context.

What i've seen when this has thousands of rows to process is that the
reactor is tied up and can not respond to requests until complete.
Which obviously leads to me believe that I'm not using twisted
correctly/to its potential.  I have read the deferred/asynchronous doc
pages...but am having a hard time getting my head around it and would
appreciate any advice.

When i don't specifically need the caller to get the final result,
i've been suing deferToThread, but feel in some of those instances i
could possibly write better code, rather then sending to a thread.

Thanks
jd



From reza at getpeer.com  Fri Nov  7 06:56:53 2008
From: reza at getpeer.com (Reza Lotun)
Date: Fri, 7 Nov 2008 13:56:53 +0000
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
References: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
Message-ID: <356e30830811070556v3c99a8bn1974c44054d5cb4f@mail.gmail.com>

On Fri, Nov 7, 2008 at 1:29 PM, Jeff Dyke <jeff.dyke at gmail.com> wrote:
> I want the caller to wait on a result from this process, but I also
> want the reactor to be able to handle other requests as they come in.
> This function is not directly registered in the xmlrpc server with
> xmlrpc_getData, but is called by that type of method after validation
> that it is allowed to run in this context.

Hi Jeff,

I'll let others tackle your specific twisted-database integration
problem, but here are a few general rules of them I've found useful
when working with twisted, sqlite and wx.

- Any long-computations will block your app in general because of the
GIL. Threading won't solve this (unless you move the compute intensive
code into a C-module which explicitly releases the GIL, which can be
hairy). Investigate using reactor.spawnProcess to spawn external
processes to do any compute intensive stuff.

- Try using a database library which releases the GIL - I've found
great gains by using apsw instead of the built-in sqlite3 library

- To integrate I/O blocking operations, it's useful to use
deferToThread - which will block on the operation in another thread in
Twisted's threadpool. Just make sure if you're in other threads you
*schedule* calls to the main twisted thread via reactor.callFromThread
(and similarly in you're running wx and twisted in separate threads
via wx.CallAfter)

I hope this is useful.

Cheers,
Reza


-- 
Reza Lotun
Senior Software Engineer
GetPeer Limited
reza at getpeer.com



From exarkun at divmod.com  Fri Nov  7 06:59:23 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 7 Nov 2008 08:59:23 -0500
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
Message-ID: <20081107135923.29191.699130987.divmod.quotient.51279@ohm>

On Fri, 7 Nov 2008 08:29:50 -0500, Jeff Dyke <jeff.dyke at gmail.com> wrote:
>I'm using the XMLRPC server in twisted and a few methods call other,
>sometimes long running, functions/methods.  I'm trying to get my brain
>around how to free the reactor to respond to other requests while this
>is happening.
>
>A scenario.  A call is made to the server, which selects say 10K rows
>from a db and needs to check each row against a table and if they do
>not exist, insert them.
>
>""" Oversimplified version of the process """
>def getData(self,user_id):
>    rows = self.getUserData(user_id)
>    for row in rows:
>        if self.existsInQueue(row['some_id']):
>            continue
>        else:
>             self.insertQueue(row)
>
>
>I want the caller to wait on a result from this process, but I also
>want the reactor to be able to handle other requests as they come in.
>This function is not directly registered in the xmlrpc server with
>xmlrpc_getData, but is called by that type of method after validation
>that it is allowed to run in this context.
>
>What i've seen when this has thousands of rows to process is that the
>reactor is tied up and can not respond to requests until complete.
>Which obviously leads to me believe that I'm not using twisted
>correctly/to its potential.  I have read the deferred/asynchronous doc
>pages...but am having a hard time getting my head around it and would
>appreciate any advice.
>
>When i don't specifically need the caller to get the final result,
>i've been suing deferToThread, but feel in some of those instances i
>could possibly write better code, rather then sending to a thread.

One thing you might not have discovered yet is that even if you use
deferToThread, you can still give the final result to the caller.  The
XML-RPC support in Twisted supports Deferreds - meaning that if an
xmlrpc_ method returns a Deferred, then no response is sent to the
XML-RPC request until that Deferred fires, and then the result is sent
as the XML-RPC response.

Since most libraries for interacting with RDBMs using SQL present a
blocking interface, Twisted includes twisted.internet.adbapi, a thin
layer on top of DB-API 2.0 which runs all of the blocking stuff in a
threadpool.  If most of your time is being spent waiting for rows from
a database, then adbapi might help you out, and since adbapi gives you
Deferreds, this is trivial to integrate into an XML-RPC server.

For other blocking tasks - it depends.  If the task is blocking on an
event, then transforming that event into a callback (probably using a
Deferred, since Deferreds are a good tool to use to manage callbacks)
and then putting your code into a callback instead of blocking on the
event is the right thing to do.  How exactly you turn a particular
event into a callback depends on the details of the event, though.  If
the blocking task is CPU bound, then running it in another thread or
another process can make sense.  It's also possible to insert explicit
control-flow yields into the implementation of the CPU bound task (at
least, sometimes) so that the reactor can service other event sources
as the calculation progresses.

Jean-Paul



From p.mayers at imperial.ac.uk  Fri Nov  7 07:00:14 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 07 Nov 2008 14:00:14 +0000
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
References: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
Message-ID: <491449EE.5010408@imperial.ac.uk>

Jeff Dyke wrote:
> I'm using the XMLRPC server in twisted and a few methods call other,
> sometimes long running, functions/methods.  I'm trying to get my brain
> around how to free the reactor to respond to other requests while this
> is happening.
> 
> A scenario.  A call is made to the server, which selects say 10K rows
> from a db and needs to check each row against a table and if they do
> not exist, insert them.
> 
> """ Oversimplified version of the process """
> def getData(self,user_id):
>     rows = self.getUserData(user_id)
>     for row in rows:
>         if self.existsInQueue(row['some_id']):
>             continue
>         else:
>              self.insertQueue(row)

You could do something like this, using twisted.internet.task.Cooperator


def batch(iterable, size):
     sourceiter = iter(iterable)
     while True:
         batchiter = itertools.islice(sourceiter, size)
         yield itertools.chain([batchiter.next()], batchiter)

coop = twisted.internet.task.Cooperator()

def _gotdata(rows):
     d = defer.Deferred()
     def worker():
         # only do 10 rows at a time, then yield control
         for rowg in batch(rows, 10):
             for row in rowg:
                 # do something
             yield
         d.callback(True)
     coop.coiterate(worker())
     return d

class foo:
     def xmlrpc_thing(self, userid):
         d = getUserData(userid)
         d.addCallback(_gotdata)
         return d

You can so similar things with defer.inlineCallbacks, or even just plain 
deferreds if you want to work hard at it.



From exarkun at divmod.com  Fri Nov  7 07:07:10 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 7 Nov 2008 09:07:10 -0500
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <356e30830811070556v3c99a8bn1974c44054d5cb4f@mail.gmail.com>
Message-ID: <20081107140710.29191.172519003.divmod.quotient.51284@ohm>

On Fri, 7 Nov 2008 13:56:53 +0000, Reza Lotun <reza at getpeer.com> wrote:
>On Fri, Nov 7, 2008 at 1:29 PM, Jeff Dyke <jeff.dyke at gmail.com> wrote:
>> I want the caller to wait on a result from this process, but I also
>> want the reactor to be able to handle other requests as they come in.
>> This function is not directly registered in the xmlrpc server with
>> xmlrpc_getData, but is called by that type of method after validation
>> that it is allowed to run in this context.
>
>Hi Jeff,
>
>I'll let others tackle your specific twisted-database integration
>problem, but here are a few general rules of them I've found useful
>when working with twisted, sqlite and wx.
>
>- Any long-computations will block your app in general because of the
>GIL. Threading won't solve this (unless you move the compute intensive
>code into a C-module which explicitly releases the GIL, which can be
>hairy). Investigate using reactor.spawnProcess to spawn external
>processes to do any compute intensive stuff.

Long-running computations generally only block the thread they're
running in.  This shouldn't be surprising, since there's not really
any difference between a function that does a "computation" and a
function which is somehow just "regular" Python code and isn't a
"computation".  You can find details of how threading works in
Python in the Python documentation, but briefly, after N bytecodes
are executed, the VM running in thread A releases the GIL (required
to execute bytecode) and any other thread has a chance to acquire it.
By default, N is 100 (enough to multiply about 30 numbers together).

It's only when you bring C into the picture that you have to think
about explicitly releasing the GIL to prevent one thread from blocking
all the rest.  As long as your program is all Python, all your threads
will basically play nicely together (an exception to this seems to be
time.sleep() on Windows sometimes, which many people find blocks all
threads inexplicably - but time.time is implemented in C, so this really
just proves the point :).

Jean-Paul



From dripton at ripton.net  Fri Nov  7 08:26:17 2008
From: dripton at ripton.net (David Ripton)
Date: Fri, 7 Nov 2008 07:26:17 -0800
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
References: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
Message-ID: <20081107152617.GA17614@vidar.dreamhost.com>

On 2008.11.07 08:29:50 -0500, Jeff Dyke wrote:
> I'm using the XMLRPC server in twisted and a few methods call other,
> sometimes long running, functions/methods.  I'm trying to get my brain
> around how to free the reactor to respond to other requests while this
> is happening.

There are two ways:

1. Instead, write functions that don't block for long, but instead do a
little bit of work, schedule a call to do the rest of the work, and then
return, so the reactor can have the CPU back.

2. Farm out big chunks of work that you can't or don't want to split up
to a subprocess or thread.

> A scenario.  A call is made to the server, which selects say 10K rows
> from a db and needs to check each row against a table and if they do
> not exist, insert them.
> 
> """ Oversimplified version of the process """
> def getData(self,user_id):
>     rows = self.getUserData(user_id)
>     for row in rows:
>         if self.existsInQueue(row['some_id']):
>             continue
>         else:
>              self.insertQueue(row)

If the long-running work is in a blocking database call, and the
database does not support a less-blocking version and you can't change
the database, then you probably want to use deferToThread for that part.

And then move the rest of getData into a separate function, that gets
called in a callback after getUserData finishes.

def getData(self,user_id):
    deferred1 = reactor.deferToThread(self.getUserData, user_id)
    deferred1.addCallback(self._addRowsToQueue)
    deferred1.addErrback(self._getUserDataFailed)

If adding the rows to the queue is fast, then you're done.  Just move
everything after getUserData into _addRowsToQueue.

def _addRowsToQueue(self, rows):
    for row in rows:
        if not self.existsInQueue(row['some_id']):
            self.insertQueue(row)

But if adding all the rows to the queue in one function call is too
slow, then you need to split it up.  It's a loop, so splitting it up is
easy.  Here's the simple scheduling-only version:

def _addSomeRowsToQueue(self, rows):
    if rows:
        row = rows.pop(0)
        if not self.existsInQueue(row['some_id']):
            self.insertQueue(row)
        reactor.callLater(0, self._addSomeRowsToQueue, rows)

Adding deferreds to the mix so that a callback function is called when
all the rows are added to the queue is the next step, after you
understand how this much works.

> I want the caller to wait on a result from this process, but I also
> want the reactor to be able to handle other requests as they come in.

I hope you can live with "I want something to happen using the results
from this process", rather than "I want the caller to wait on a result
from this process."

You can simulate blocking flow somewhat with deferredGenerator or
inlineCallbacks, but I recommend sticking to the old way at first.
It's simpler and less magical.

-- 
David Ripton    dripton at ripton.net



From nathan.stocks at gmail.com  Fri Nov  7 10:08:18 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Fri, 7 Nov 2008 10:08:18 -0700
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <6ce0ac130811050918xb57294fv4f5da0ef05b489a1@mail.gmail.com>
References: <CD5FB5F4-EFEC-45E2-9F06-688A98D4E5E0@blackslens.com>
	<20081105161921.29191.1446923850.divmod.quotient.50181@ohm>
	<6ce0ac130811050918xb57294fv4f5da0ef05b489a1@mail.gmail.com>
Message-ID: <96c9d6a80811070908w5f7573e3ief969c9ce86001f7@mail.gmail.com>

On Wed, Nov 5, 2008 at 10:18 AM, Brian Granger <ellisonbg.net at gmail.com> wrote:
> I also highly recommend Foolscap (http://foolscap.lothar.com/trac),
> which was designed as a next generation PB-like RPC protocol.  Some
> advantages of Foolscap:

Is Foolscap actually going to be pulled into the actual Twisted tree
any time soon?  I've wanted to try it out for some of our projects,
but one of our project goals is minimizing external dependencies...

~ Nathan



From exarkun at divmod.com  Fri Nov  7 10:22:05 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 7 Nov 2008 12:22:05 -0500
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <96c9d6a80811070908w5f7573e3ief969c9ce86001f7@mail.gmail.com>
Message-ID: <20081107172205.20272.1272249608.divmod.quotient.53@ohm>

On Fri, 7 Nov 2008 10:08:18 -0700, Nathan <nathan.stocks at gmail.com> wrote:
>On Wed, Nov 5, 2008 at 10:18 AM, Brian Granger <ellisonbg.net at gmail.com> wrote:
>> I also highly recommend Foolscap (http://foolscap.lothar.com/trac),
>> which was designed as a next generation PB-like RPC protocol.  Some
>> advantages of Foolscap:
>
>Is Foolscap actually going to be pulled into the actual Twisted tree
>any time soon?  I've wanted to try it out for some of our projects,
>but one of our project goals is minimizing external dependencies...

As yet, there has been no discussion about doing this.  That probably
precludes it from happning "soon", at least.

Jean-Paul



From jeff.dyke at gmail.com  Fri Nov  7 10:59:52 2008
From: jeff.dyke at gmail.com (Jeff Dyke)
Date: Fri, 7 Nov 2008 12:59:52 -0500
Subject: [Twisted-Python] freeing the reactor to do other jobs
In-Reply-To: <20081107152617.GA17614@vidar.dreamhost.com>
References: <8496caf30811070529t70a999acx96711d1af63eb12b@mail.gmail.com>
	<20081107152617.GA17614@vidar.dreamhost.com>
Message-ID: <8496caf30811070959i78263341i5517e38f83357fac@mail.gmail.com>

On Fri, Nov 7, 2008 at 10:26 AM, David Ripton <dripton at ripton.net> wrote:
> On 2008.11.07 08:29:50 -0500, Jeff Dyke wrote:
>> I'm using the XMLRPC server in twisted and a few methods call other,
>> sometimes long running, functions/methods.  I'm trying to get my brain
>> around how to free the reactor to respond to other requests while this
>> is happening.
>
> There are two ways:
>
> 1. Instead, write functions that don't block for long, but instead do a
> little bit of work, schedule a call to do the rest of the work, and then
> return, so the reactor can have the CPU back.
>
> 2. Farm out big chunks of work that you can't or don't want to split up
> to a subprocess or thread.
>
>> A scenario.  A call is made to the server, which selects say 10K rows
>> from a db and needs to check each row against a table and if they do
>> not exist, insert them.
>>
>> """ Oversimplified version of the process """
>> def getData(self,user_id):
>>     rows = self.getUserData(user_id)
>>     for row in rows:
>>         if self.existsInQueue(row['some_id']):
>>             continue
>>         else:
>>              self.insertQueue(row)
>
> If the long-running work is in a blocking database call, and the
> database does not support a less-blocking version and you can't change
> the database, then you probably want to use deferToThread for that part.
>
> And then move the rest of getData into a separate function, that gets
> called in a callback after getUserData finishes.
>
> def getData(self,user_id):
>    deferred1 = reactor.deferToThread(self.getUserData, user_id)
>    deferred1.addCallback(self._addRowsToQueue)
>    deferred1.addErrback(self._getUserDataFailed)
>
> If adding the rows to the queue is fast, then you're done.  Just move
> everything after getUserData into _addRowsToQueue.
>
> def _addRowsToQueue(self, rows):
>    for row in rows:
>        if not self.existsInQueue(row['some_id']):
>            self.insertQueue(row)
>
> But if adding all the rows to the queue in one function call is too
> slow, then you need to split it up.  It's a loop, so splitting it up is
> easy.  Here's the simple scheduling-only version:
>
> def _addSomeRowsToQueue(self, rows):
>    if rows:
>        row = rows.pop(0)
>        if not self.existsInQueue(row['some_id']):
>            self.insertQueue(row)
>        reactor.callLater(0, self._addSomeRowsToQueue, rows)
>
> Adding deferreds to the mix so that a callback function is called when
> all the rows are added to the queue is the next step, after you
> understand how this much works.
>
>> I want the caller to wait on a result from this process, but I also
>> want the reactor to be able to handle other requests as they come in.
>
> I hope you can live with "I want something to happen using the results
> from this process", rather than "I want the caller to wait on a result
> from this process."
>
> You can simulate blocking flow somewhat with deferredGenerator or
> inlineCallbacks, but I recommend sticking to the old way at first.
> It's simpler and less magical.
>
> --
> David Ripton    dripton at ripton.net


Thanks all for the input... this will be a great help.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From nathan.stocks at gmail.com  Fri Nov  7 14:12:57 2008
From: nathan.stocks at gmail.com (Nathan)
Date: Fri, 7 Nov 2008 14:12:57 -0700
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <20081107172205.20272.1272249608.divmod.quotient.53@ohm>
References: <96c9d6a80811070908w5f7573e3ief969c9ce86001f7@mail.gmail.com>
	<20081107172205.20272.1272249608.divmod.quotient.53@ohm>
Message-ID: <96c9d6a80811071312i762ada13raff15fbe2d75b293@mail.gmail.com>

On Fri, Nov 7, 2008 at 10:22 AM, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Fri, 7 Nov 2008 10:08:18 -0700, Nathan <nathan.stocks at gmail.com> wrote:
>> Is Foolscap actually going to be pulled into the actual Twisted tree
>> any time soon?  I've wanted to try it out for some of our projects,
>> but one of our project goals is minimizing external dependencies...
>
> As yet, there has been no discussion about doing this.  That probably
> precludes it from happning "soon", at least.
>
> Jean-Paul

Ok, that's good to know.  I may just have to buckle-down and accept
one more dependency then, because I want to try out that large-object
support ...

~ Nathan



From andrew at fluther.com  Sat Nov  8 01:27:27 2008
From: andrew at fluther.com (Andrew McClain)
Date: Sat, 8 Nov 2008 00:27:27 -0800
Subject: [Twisted-Python] Running a client within a thread... do I need to
	rewrite?
Message-ID: <946e65500811080027l4431ef0fre3305ee44c5188ed@mail.gmail.com>

I have an existing twisted client connecting to a jabber server in order to
send notifications for our web app.
I'd like to fold in a STOMP message client into the my existing code, so I
can do something like this:

web app --> STOMP queue --> STOMP client --> jabber client --> jabber server

Problem is, the STOMP client library I'm using creates a socket, spawns a
thread, and listens, calling a callback method when it gets information.

In order to integrate this with my twisted jabber client, do I need to
rewrite the whole client using deferreds? Or could I use something like
defertothread to encapsulate the STOMP client?

Best, Andrew
-- 
--------
Tap the collective.
http://www.fluther.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081108/7084e269/attachment.html>

From thejayjay at gmail.com  Sat Nov  8 20:15:39 2008
From: thejayjay at gmail.com (James Joplin)
Date: Sat, 8 Nov 2008 22:15:39 -0500
Subject: [Twisted-Python] Import TypeError
Message-ID: <d9b9b1220811081915sab5f990v3eae011e7f11ac93@mail.gmail.com>

I've been doing some embedded python work and everything has been working
like a charm thusfar!  Twisted has saved us tons of work, hats off to the
development team.

I have been having issues with shutting down twisted completely (I think).
 Even upon executing Py_Finalize or Py_EndInterpreter as necessary upon
re-entering our browser plugin we hit an exception during twisted import.


Here is my traceback :

Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "ourCode.py", line 8, in <module>
    from twisted.spread import pb
  File "C:\Python25\lib\site-packages\twisted\spread\pb.py", line 69, in
<module>
    from zope.interface import implements, Interface
  File "C:\Python25\lib\site-packages\zope\interface\__init__.py", line 58,
in <module>
    _wire()
  File "C:\Python25\lib\site-packages\zope\interface\interface.py", line
809, in _wire
    classImplements(Attribute, IAttribute)
  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
461, in classImplements
    spec = implementedBy(cls)
  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
332, in implementedByFallback
    if isinstance(spec, Implements):
TypeError: 'NoneType' object is not callable


Changing the order of imports hasn't seemed to matter, looks to me like
something in zope init blows up if it's already loaded.

Is there a safe way to make sure the threads are dead?  To clean imports
out?  Anything?  I haven't been able to find much documentation to help me
overcome the problem and I CANNOT forcibly unload our app from browser
memory.

If the C++ code we are using for startup / shutdown let me know and I will
post it as well.


Regards,

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081108/0307e212/attachment.html>

From exarkun at twistedmatrix.com  Sat Nov  8 22:05:25 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Nov 2008 05:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1226207125.18.1692109534@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081109/54e50d34/attachment.html>

From twisted at ralphm.ik.nu  Sat Nov  8 23:55:04 2008
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Sun, 9 Nov 2008 07:55:04 +0100
Subject: [Twisted-Python] Running a client within a thread... do I need to
	rewrite?
In-Reply-To: <946e65500811080027l4431ef0fre3305ee44c5188ed@mail.gmail.com>
References: <946e65500811080027l4431ef0fre3305ee44c5188ed@mail.gmail.com>
Message-ID: <20081109065504.GA17695@ik.nu>

On Sat, Nov 08, 2008 at 12:27:27AM -0800, Andrew McClain wrote:
> [..]
> 
> In order to integrate this with my twisted jabber client, do I need to rewrite
> the whole client using deferreds? Or could I use something like defertothread
> to encapsulate the STOMP client?

Maybe you can use txStomp, a Twisted implementation of Stomp.

-- 
Groetjes,

ralphm



From exarkun at divmod.com  Sun Nov  9 06:52:30 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 9 Nov 2008 08:52:30 -0500
Subject: [Twisted-Python] Import TypeError
In-Reply-To: <d9b9b1220811081915sab5f990v3eae011e7f11ac93@mail.gmail.com>
Message-ID: <20081109135230.20272.1887878769.divmod.quotient.1011@ohm>

On Sat, 8 Nov 2008 22:15:39 -0500, James Joplin <thejayjay at gmail.com> wrote:
>I've been doing some embedded python work and everything has been working
>like a charm thusfar!  Twisted has saved us tons of work, hats off to the
>development team.
>
>I have been having issues with shutting down twisted completely (I think).
> Even upon executing Py_Finalize or Py_EndInterpreter as necessary upon
>re-entering our browser plugin we hit an exception during twisted import.
>
>
>Here is my traceback :
>
>Traceback (most recent call last):
>  File "<string>", line 1, in <module>
>  File "ourCode.py", line 8, in <module>
>    from twisted.spread import pb
>  File "C:\Python25\lib\site-packages\twisted\spread\pb.py", line 69, in
><module>
>    from zope.interface import implements, Interface
>  File "C:\Python25\lib\site-packages\zope\interface\__init__.py", line 58,
>in <module>
>    _wire()
>  File "C:\Python25\lib\site-packages\zope\interface\interface.py", line
>809, in _wire
>    classImplements(Attribute, IAttribute)
>  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
>461, in classImplements
>    spec = implementedBy(cls)
>  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
>332, in implementedByFallback
>    if isinstance(spec, Implements):
>TypeError: 'NoneType' object is not callable
>
>
>Changing the order of imports hasn't seemed to matter, looks to me like
>something in zope init blows up if it's already loaded.
>
>Is there a safe way to make sure the threads are dead?  To clean imports
>out?  Anything?  I haven't been able to find much documentation to help me
>overcome the problem and I CANNOT forcibly unload our app from browser
>memory.

Does CPython even support what you're trying to do?  As I recall, while
the interpreter finalization APIs mostly clean things up, they do leak
some resources.  On top of that, application-level finalization semantics
in CPython (that is, what happens to the Python code) are very unfriendly
and not very well defined.  For example, as you see, the globals of every
module are all reset to None, so any code that uses globals will probably
break.

>
>If the C++ code we are using for startup / shutdown let me know and I will
>post it as well.
>

I'm not sure, but I don't think the problem you're seeing actually has
anything in particular to do with Twisted or Zope Interface.  I think it's
due to CPython's initialization and finalization behavior.  Can you produce
a similar exception by importing some trivial stand-alone Python code that
uses globals in a similar way?

Jean-Paul



From thejayjay at gmail.com  Sun Nov  9 12:05:32 2008
From: thejayjay at gmail.com (James Joplin)
Date: Sun, 9 Nov 2008 14:05:32 -0500
Subject: [Twisted-Python] Import TypeError
In-Reply-To: <20081109135230.20272.1887878769.divmod.quotient.1011@ohm>
References: <d9b9b1220811081915sab5f990v3eae011e7f11ac93@mail.gmail.com>
	<20081109135230.20272.1887878769.divmod.quotient.1011@ohm>
Message-ID: <d9b9b1220811091105u407dc5dbsd1e7d469dd8e6be@mail.gmail.com>

I believe you are correct.  From what literature and other forms of
documentation I could find online counting on py_finalize() to cleanup
everything for you is not reliable at all.  Static members, globals, and
other "things" may stick around if threads aren't done and who knows what
else.  From what I could gather py_finalize() doesn't even kill child
threads, yikes.
I had done a basic test case with other modules than twisted included and I
was not getting import errors.

I ended up just engineering around the problem and left the
python interpreter running.  I had several python exports that needed to be
visible to c and my scripting language and I just used a data structure to
tie the callable python functions to what I exported them as.  Upon
re-entering the dll I just check to see if we have loaded python and if we
have just re-populate my scripting language name space.  Works like a charm.


Thanks for the help!  I didn't think this was your fault to begin with but
it was nice to have some re-assurance.


Regards,

James


On Sun, Nov 9, 2008 at 8:52 AM, Jean-Paul Calderone <exarkun at divmod.com>wrote:

> On Sat, 8 Nov 2008 22:15:39 -0500, James Joplin <thejayjay at gmail.com>
> wrote:
>
>> I've been doing some embedded python work and everything has been working
>> like a charm thusfar!  Twisted has saved us tons of work, hats off to the
>> development team.
>>
>> I have been having issues with shutting down twisted completely (I think).
>> Even upon executing Py_Finalize or Py_EndInterpreter as necessary upon
>> re-entering our browser plugin we hit an exception during twisted import.
>>
>>
>> Here is my traceback :
>>
>> Traceback (most recent call last):
>>  File "<string>", line 1, in <module>
>>  File "ourCode.py", line 8, in <module>
>>   from twisted.spread import pb
>>  File "C:\Python25\lib\site-packages\twisted\spread\pb.py", line 69, in
>> <module>
>>   from zope.interface import implements, Interface
>>  File "C:\Python25\lib\site-packages\zope\interface\__init__.py", line 58,
>> in <module>
>>   _wire()
>>  File "C:\Python25\lib\site-packages\zope\interface\interface.py", line
>> 809, in _wire
>>   classImplements(Attribute, IAttribute)
>>  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
>> 461, in classImplements
>>   spec = implementedBy(cls)
>>  File "C:\Python25\lib\site-packages\zope\interface\declarations.py", line
>> 332, in implementedByFallback
>>   if isinstance(spec, Implements):
>> TypeError: 'NoneType' object is not callable
>>
>>
>> Changing the order of imports hasn't seemed to matter, looks to me like
>> something in zope init blows up if it's already loaded.
>>
>> Is there a safe way to make sure the threads are dead?  To clean imports
>> out?  Anything?  I haven't been able to find much documentation to help me
>> overcome the problem and I CANNOT forcibly unload our app from browser
>> memory.
>>
>
> Does CPython even support what you're trying to do?  As I recall, while
> the interpreter finalization APIs mostly clean things up, they do leak
> some resources.  On top of that, application-level finalization semantics
> in CPython (that is, what happens to the Python code) are very unfriendly
> and not very well defined.  For example, as you see, the globals of every
> module are all reset to None, so any code that uses globals will probably
> break.
>
>
>> If the C++ code we are using for startup / shutdown let me know and I will
>> post it as well.
>>
>>
> I'm not sure, but I don't think the problem you're seeing actually has
> anything in particular to do with Twisted or Zope Interface.  I think it's
> due to CPython's initialization and finalization behavior.  Can you produce
> a similar exception by importing some trivial stand-alone Python code that
> uses globals in a similar way?
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081109/72f23ef8/attachment.html>

From nebpro at gmail.com  Tue Nov 11 10:42:07 2008
From: nebpro at gmail.com (Benny)
Date: Tue, 11 Nov 2008 12:42:07 -0500
Subject: [Twisted-Python] checking connection
Message-ID: <e5f41cb30811110942w33ae263crb05e3b2b53a33cf4@mail.gmail.com>

Hi,
I have been trying to find out how to keep checking the connection once the
connection is made. Says I have successfully connected to the server, and i
want to maintain and check that connection. How can i do that?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081111/5d5feddb/attachment.html>

From exarkun at divmod.com  Tue Nov 11 11:43:13 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 11 Nov 2008 13:43:13 -0500
Subject: [Twisted-Python] checking connection
In-Reply-To: <e5f41cb30811110942w33ae263crb05e3b2b53a33cf4@mail.gmail.com>
Message-ID: <20081111184313.20272.1718049994.divmod.quotient.3762@ohm>

On Tue, 11 Nov 2008 12:42:07 -0500, Benny <nebpro at gmail.com> wrote:
>Hi,
>I have been trying to find out how to keep checking the connection once the
>connection is made. Says I have successfully connected to the server, and i
>want to maintain and check that connection. How can i do that?
>

What does it mean to "check" a connection?

Jean-Paul



From nebpro at gmail.com  Tue Nov 11 13:41:37 2008
From: nebpro at gmail.com (Benny)
Date: Tue, 11 Nov 2008 15:41:37 -0500
Subject: [Twisted-Python] checking connection
In-Reply-To: <20081111184313.20272.1718049994.divmod.quotient.3762@ohm>
References: <e5f41cb30811110942w33ae263crb05e3b2b53a33cf4@mail.gmail.com>
	<20081111184313.20272.1718049994.divmod.quotient.3762@ohm>
Message-ID: <e5f41cb30811111241p175cd2f9pd0f24db520fb0355@mail.gmail.com>

Thank you very much for the response. I am still new with twisted so please
bare with me.
What I mean by checking connection is something like instant messenger (i.e.
pidgin) do in some interval time. Pidgin is checking for internet connection
every xx minutes to see if the computer still connected to the internet. So
I am wondering if twisted can do the same thing. Once it is connected (i.e.
connectionMade), can we tell if that connection still alive or not every xx
minutes? Is twisted maintain persistent connection?



On Tue, Nov 11, 2008 at 1:43 PM, Jean-Paul Calderone <exarkun at divmod.com>wrote:

> On Tue, 11 Nov 2008 12:42:07 -0500, Benny <nebpro at gmail.com> wrote:
>
>> Hi,
>> I have been trying to find out how to keep checking the connection once
>> the
>> connection is made. Says I have successfully connected to the server, and
>> i
>> want to maintain and check that connection. How can i do that?
>>
>>
> What does it mean to "check" a connection?
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081111/b280a5a1/attachment.html>

From exarkun at divmod.com  Tue Nov 11 15:08:26 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 11 Nov 2008 17:08:26 -0500
Subject: [Twisted-Python] checking connection
In-Reply-To: <e5f41cb30811111241p175cd2f9pd0f24db520fb0355@mail.gmail.com>
Message-ID: <20081111220826.20272.1309200409.divmod.quotient.3853@ohm>

On Tue, 11 Nov 2008 15:41:37 -0500, Benny <nebpro at gmail.com> wrote:
>Thank you very much for the response. I am still new with twisted so please
>bare with me.
>What I mean by checking connection is something like instant messenger (i.e.
>pidgin) do in some interval time. Pidgin is checking for internet connection
>every xx minutes to see if the computer still connected to the internet. So
>I am wondering if twisted can do the same thing. Once it is connected (i.e.
>connectionMade), can we tell if that connection still alive or not every xx
>minutes? Is twisted maintain persistent connection?
>

Just as `connectionMade´ is called when the connection is created, there
is another method - `connectionLost´ which is called when the connection
goes away.  You don't need to do any checking.

The only caveat is that because of the way TCP works, if no attempt is
made to send traffic over a connection, it's possible for the connection
to be lost but for your application to never be notified of this.  However,
as long as you're trying to send traffic, you won't encounter this case.

If your application needs to be idle for a long period of time, then you
might want to send "keep alives" - any kind of allowed traffic which has
no actual consequence other than to send some traffic.  This way you'll
get `connectionLost´ even if you're otherwise idle.

Jean-Paul



From glyph at divmod.com  Tue Nov 11 16:28:08 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 11 Nov 2008 23:28:08 -0000
Subject: [Twisted-Python] checking connection
In-Reply-To: <e5f41cb30811111241p175cd2f9pd0f24db520fb0355@mail.gmail.com>
References: <e5f41cb30811110942w33ae263crb05e3b2b53a33cf4@mail.gmail.com>
	<20081111184313.20272.1718049994.divmod.quotient.3762@ohm>
	<e5f41cb30811111241p175cd2f9pd0f24db520fb0355@mail.gmail.com>
Message-ID: <20081111232808.6400.1941067201.divmod.xquotient.1435@weber.divmod.com>

On 08:41 pm, nebpro at gmail.com wrote:
>Thank you very much for the response. I am still new with twisted so 
>please
>bare with me.

>What I mean by checking connection is something like instant messenger 
>(i.e.
>pidgin) do in some interval time. Pidgin is checking for internet 
>connection
>every xx minutes to see if the computer still connected to the 
>internet. So
>I am wondering if twisted can do the same thing. Once it is connected 
>(i.e.
>connectionMade), can we tell if that connection still alive or not 
>every xx
>minutes? Is twisted maintain persistent connection?

You're confusing two mostly unrelated things.  Pidgin tracks the state 
of your network interfaces by way of dbus notifications from 
NetworkManager, not by "checking every XX minutes".  You could do this 
with Twisted by using the glib2 reactor and the dbus bindings, but 
that's more of a dbus/NetworkManager question than a twisted question. 
I would strongly recommend that you don't bother with this kind of 
connection-tracking.  My personal experience of applications trying to 
use this information (Pidgin included) is mostly that they are buggy and 
have a broken idea of the machine's network interface state because it's 
very hard to understand how this information can be effectively used 
(and NetworkManager itself is not perfect, sometimes reporting incorrect 
results).

Pidgin (and every other networking application in the world) also tracks 
the state of individual network connections (i.e. your connection to an 
IRC server, or to AOL's AIM server) by waiting for notifications from 
their respective sockets.  In Twisted, this is the stuff related to 
connectionLost that JP Calderone already mentioned in his reply to you. 
This is what you should be relying on in your Twisted application.  Even 
if you implement "internet connection" checking with NetworkManager or 
some other platform's equivalent, that's just a hint; you still have to 
pay attention to connectionLost.



From nebpro at gmail.com  Tue Nov 11 20:03:27 2008
From: nebpro at gmail.com (Benny)
Date: Tue, 11 Nov 2008 22:03:27 -0500
Subject: [Twisted-Python] checking connection
In-Reply-To: <20081111232808.6400.1941067201.divmod.xquotient.1435@weber.divmod.com>
References: <e5f41cb30811110942w33ae263crb05e3b2b53a33cf4@mail.gmail.com>
	<20081111184313.20272.1718049994.divmod.quotient.3762@ohm>
	<e5f41cb30811111241p175cd2f9pd0f24db520fb0355@mail.gmail.com>
	<20081111232808.6400.1941067201.divmod.xquotient.1435@weber.divmod.com>
Message-ID: <e5f41cb30811111903y38ab954et6b22f35485006498@mail.gmail.com>

Thank you very much for your explanation. I did pay attention to the
behavior, and I did noticed that when there is no traffic connection, the
connectionLost will be called and it will also called the
clientConnectionLost too. I used ReconnectingClientFactory in the
clientConnectionLost to ensure that the connection is established, and used
the reactor.stop() when i have to stop my application. I really appreciate
everyone helps. Thank you very much.


On Tue, Nov 11, 2008 at 6:28 PM, <glyph at divmod.com> wrote:

> On 08:41 pm, nebpro at gmail.com wrote:
>
>> Thank you very much for the response. I am still new with twisted so
>> please
>> bare with me.
>>
>
>  What I mean by checking connection is something like instant messenger
>> (i.e.
>> pidgin) do in some interval time. Pidgin is checking for internet
>> connection
>> every xx minutes to see if the computer still connected to the internet.
>> So
>> I am wondering if twisted can do the same thing. Once it is connected
>> (i.e.
>> connectionMade), can we tell if that connection still alive or not every
>> xx
>> minutes? Is twisted maintain persistent connection?
>>
>
> You're confusing two mostly unrelated things.  Pidgin tracks the state of
> your network interfaces by way of dbus notifications from NetworkManager,
> not by "checking every XX minutes".  You could do this with Twisted by using
> the glib2 reactor and the dbus bindings, but that's more of a
> dbus/NetworkManager question than a twisted question. I would strongly
> recommend that you don't bother with this kind of connection-tracking.  My
> personal experience of applications trying to use this information (Pidgin
> included) is mostly that they are buggy and have a broken idea of the
> machine's network interface state because it's very hard to understand how
> this information can be effectively used (and NetworkManager itself is not
> perfect, sometimes reporting incorrect results).
>
> Pidgin (and every other networking application in the world) also tracks
> the state of individual network connections (i.e. your connection to an IRC
> server, or to AOL's AIM server) by waiting for notifications from their
> respective sockets.  In Twisted, this is the stuff related to connectionLost
> that JP Calderone already mentioned in his reply to you. This is what you
> should be relying on in your Twisted application.  Even if you implement
> "internet connection" checking with NetworkManager or some other platform's
> equivalent, that's just a hint; you still have to pay attention to
> connectionLost.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081111/8a728c00/attachment.html>

From adigeaydin at gmail.com  Wed Nov 12 03:33:55 2008
From: adigeaydin at gmail.com (=?ISO-8859-9?Q?Ayd=FDn_=DEEN?=)
Date: Wed, 12 Nov 2008 12:33:55 +0200
Subject: [Twisted-Python] client send twice but server reads once
Message-ID: <2196d7e0811120233y255e7e58i5e90331b5902ab17@mail.gmail.com>

Hi,

In my code i'm sending sequential data from client like;

self.transport.write('aydin')
self.transport.write('adige')

but server reads data like *'aydinadige'

*How can i solve this, actually it is not clear how does dataReceived work
for me

best regards..
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081112/1dbb6e2e/attachment.html>

From p.mayers at imperial.ac.uk  Wed Nov 12 04:12:52 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 12 Nov 2008 11:12:52 +0000
Subject: [Twisted-Python] client send twice but server reads once
In-Reply-To: <2196d7e0811120233y255e7e58i5e90331b5902ab17@mail.gmail.com>
References: <2196d7e0811120233y255e7e58i5e90331b5902ab17@mail.gmail.com>
Message-ID: <491ABA34.7010106@imperial.ac.uk>

Aydın ŞEN wrote:
> Hi,
> 
> In my code i'm sending sequential data from client like;
> 
> self.transport.write('aydin')
> self.transport.write('adige')
> 
> but server reads data like *'aydinadige'
> 
> *How can i solve this, actually it is not clear how does dataReceived 
> work for me
> 

You can't, TCP will deliver the messages and re-assemble them at will.

If you want message framing on top of TCP, you need to add it. Twisted 
comes with some several e.g. in twisted.protocols.basic you have 
LineReceiver, NetstringReceiver

> best regards..
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From adigeaydin at gmail.com  Wed Nov 12 05:34:30 2008
From: adigeaydin at gmail.com (=?ISO-8859-9?Q?Ayd=FDn_=DEEN?=)
Date: Wed, 12 Nov 2008 14:34:30 +0200
Subject: [Twisted-Python] client send twice but server reads once
In-Reply-To: <491ABA34.7010106@imperial.ac.uk>
References: <2196d7e0811120233y255e7e58i5e90331b5902ab17@mail.gmail.com>
	<491ABA34.7010106@imperial.ac.uk>
Message-ID: <2196d7e0811120434i73431078p337d3858197db6fd@mail.gmail.com>

yeap, LineReceiver is the point for me.

thanks.

2008/11/12 Phil Mayers <p.mayers at imperial.ac.uk>

> Aydın ŞEN wrote:
>
>> Hi,
>>
>> In my code i'm sending sequential data from client like;
>>
>> self.transport.write('aydin')
>> self.transport.write('adige')
>>
>> but server reads data like *'aydinadige'
>>
>> *How can i solve this, actually it is not clear how does dataReceived work
>> for me
>>
>>
> You can't, TCP will deliver the messages and re-assemble them at will.
>
> If you want message framing on top of TCP, you need to add it. Twisted
> comes with some several e.g. in twisted.protocols.basic you have
> LineReceiver, NetstringReceiver
>
>  best regards..
>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Aydın ŞEN

         Ege Üniversitesi
Uluslararası Bilgisayar Enstitüsü
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081112/45dac9b5/attachment.html>

From warner at lothar.com  Wed Nov 12 12:42:27 2008
From: warner at lothar.com (Brian Warner)
Date: Wed, 12 Nov 2008 11:42:27 -0800
Subject: [Twisted-Python] Re: Event notification and general RPC in
	Twisted...
In-Reply-To: <96c9d6a80811071312i762ada13raff15fbe2d75b293@mail.gmail.com>
References: <96c9d6a80811070908w5f7573e3ief969c9ce86001f7@mail.gmail.com>
	<20081107172205.20272.1272249608.divmod.quotient.53@ohm>
	<96c9d6a80811071312i762ada13raff15fbe2d75b293@mail.gmail.com>
Message-ID: <20081112114227.719721fc@fluxx.allmydata.com>

> > As yet, there has been no discussion about doing this.  That probably
> > precludes it from happning "soon", at least.

Yeah, I'm not pushing to get Foolscap into the core any time soon. The
release cycles are just too different.

cheers,
 -Brian

BTW: foolscap-0.3.2 is the latest version, at http://foolscap.lothar.com . I
keep forgetting to email the release announcements.



From dialtone at gmail.com  Wed Nov 12 13:09:56 2008
From: dialtone at gmail.com (Valentino Volonghi)
Date: Wed, 12 Nov 2008 12:09:56 -0800
Subject: [Twisted-Python] Released Ampoule - 0.0.5
Message-ID: <FF60F438-2926-48C8-A492-9215AEF10EFD@gmail.com>

Ampoule is a process pool implementation written on top of Twisted
Matrix. Its name comes from the use of AMP as the default
communication protocol between the pool and all its children.

It's different from other alternative solutions because it provides an
API very close to that of the Twisted ThreadPool. As an helper
function it also provides a deferToAMPProcess function that creates
the ProcessPool and submits jobs to it.

There has been 2 released since the last announce so I'm going
to report both of them here.

Ampoule 0.0.5 (2008-11-12)
==========================

Changes
--------
  - Fixed bug #259264, this fix introduces a number of changes in the
    architecture of the project:
     1. Removed childReactor argument form the process pool and added
        a starter argument.
     2. Introduced the concept of a starter object whose role is to
        start subprocesses with given parameters. This makes it easier
        to specify particular parameters (eg. new env variables) to the
        child processes without needing to override many methods in the
        pool using closures.
     3. main.py is completely changed and now provides the  
ProcessStarter
        object which is a default implementation of IStarter.
     4. IStarter interface currently documents only 2 methods:
             startAMPProcess
             startPythonProcess
         in the future it's possible that we will add an additional:
             startProcess
         that starts whichever process we want without requiring python,
         also this might end up with the separation of ProcessPool in at
         least 2 logical levels: the ProcessPool and a dispatcher that
         talks with the children, in this way it would be possible to
         create custom ProcessPools without changing much code or  
requiring
         any special requirement on the children.

  - Introduced a callRemote method on the ProcessPool that is basically
    the same as doWork. Introduced for symmetry between all the RPC  
libraries
    in Twisted.

  - reactor short name and ampoule child class are now passed as the 2
    last arguments rather than the first 2. So if you have written any
    custom bootstrap code be sure to change sys.argv[1] and sys.argv[2]
    into sys.argv[-2] and sys.argv[-1] respectively.

Ampoule 0.0.4 (2008-11-03)
==========================

Changes
--------
  - Ampoule parent process and child processes now talk using FDs 3 (in)
    and 4 (out) in order to avoid problems with libraries that  
mistakenly
    send error lines to stdout (yes, I'm looking at you gtk+)


-- 
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081112/0238112e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20081112/0238112e/attachment.sig>

From donwsmith at gmail.com  Wed Nov 12 20:51:16 2008
From: donwsmith at gmail.com (Don Smith)
Date: Wed, 12 Nov 2008 19:51:16 -0800
Subject: [Twisted-Python] Released Ampoule - 0.0.5
In-Reply-To: <FF60F438-2926-48C8-A492-9215AEF10EFD@gmail.com>
References: <FF60F438-2926-48C8-A492-9215AEF10EFD@gmail.com>
Message-ID: <24f63c200811121951i45581bbbm4b88c50818f4da02@mail.gmail.com>

Hmm, this sounds interesting. I'm wondering about a use case for it. Would
Ampoule be a way to take advantage of multi-core processors?

Thanks,

Don

On Wed, Nov 12, 2008 at 12:09 PM, Valentino Volonghi <dialtone at gmail.com>wrote:

> Ampoule is a process pool implementation written on top of Twisted
> Matrix. Its name comes from the use of AMP as the default
> communication protocol between the pool and all its children.
>
> It's different from other alternative solutions because it provides an
> API very close to that of the Twisted ThreadPool. As an helper
> function it also provides a deferToAMPProcess function that creates
> the ProcessPool and submits jobs to it.
>
> There has been 2 released since the last announce so I'm going
> to report both of them here.
>
> Ampoule 0.0.5 (2008-11-12)
> ==========================
>
> Changes
> --------
>  - Fixed bug #259264, this fix introduces a number of changes in the
>    architecture of the project:
>     1. Removed childReactor argument form the process pool and added
>        a starter argument.
>     2. Introduced the concept of a starter object whose role is to
>        start subprocesses with given parameters. This makes it easier
>        to specify particular parameters (eg. new env variables) to the
>        child processes without needing to override many methods in the
>        pool using closures.
>     3. main.py is completely changed and now provides the ProcessStarter
>        object which is a default implementation of IStarter.
>     4. IStarter interface currently documents only 2 methods:
>             startAMPProcess
>             startPythonProcess
>         in the future it's possible that we will add an additional:
>             startProcess
>         that starts whichever process we want without requiring python,
>         also this might end up with the separation of ProcessPool in at
>         least 2 logical levels: the ProcessPool and a dispatcher that
>         talks with the children, in this way it would be possible to
>         create custom ProcessPools without changing much code or requiring
>         any special requirement on the children.
>
>  - Introduced a callRemote method on the ProcessPool that is basically
>    the same as doWork. Introduced for symmetry between all the RPC
> libraries
>    in Twisted.
>
>  - reactor short name and ampoule child class are now passed as the 2
>    last arguments rather than the first 2. So if you have written any
>    custom bootstrap code be sure to change sys.argv[1] and sys.argv[2]
>    into sys.argv[-2] and sys.argv[-1] respectively.
>
> Ampoule 0.0.4 (2008-11-03)
> ==========================
>
> Changes
> --------
>  - Ampoule parent process and child processes now talk using FDs 3 (in)
>    and 4 (out) in order to avoid problems with libraries that mistakenly
>    send error lines to stdout (yes, I'm looking at you gtk+)
>
>
> --
> Valentino Volonghi aka Dialtone
> Now running MacOS X 10.5
> Home Page: http://www.twisted.it
> http://www.adroll.com
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081112/a7ab2a95/attachment.html>

From ivaturi at gmail.com  Thu Nov 13 12:43:46 2008
From: ivaturi at gmail.com (Turi)
Date: Thu, 13 Nov 2008 11:43:46 -0800
Subject: [Twisted-Python] ssh and python shell with twisted
Message-ID: <ad8c8e3d0811131143u6a221619p21523c9cf83d00a6@mail.gmail.com>

Let me preface by saying, I am new to python and of course Twisted. I
am trying to play with the examples already available
http://www.devshed.com/c/a/Python/SSH-with-Twisted/. I believe that is
the example from Oreilly book on Twisted. I looked at the custom ssh
server script and then the providing python shell over ssh script
http://www.devshed.com/c/a/Python/SSH-with-Twisted/3/. What I am
curious about is how to combine these two? So I want to be able to set
up the custom ssh server, which the first example explains, but have
support for a command in the SSHDemoProtocol Class (like
do_python_shell) which will invoke python shell over the existing ssh
session. I am assuming you have to somehow do that over the existing
channel, but how? Does my question make sense?

--Turi



From newptcai at gmail.com  Thu Nov 13 22:49:04 2008
From: newptcai at gmail.com (Peter Cai)
Date: Fri, 14 Nov 2008 13:49:04 +0800
Subject: [Twisted-Python] How to stop a twisted daemon application.
Message-ID: <befee6d80811132149h2adb814cxb0e68906da021f00@mail.gmail.com>

Hi,

After I have run "twistd -y xxx.py"

How can I stop it?  I've read through twistd manual and didn't find
anything about this.

I have to find the process and kill it.

Any better approach?



From screwtape at froup.com  Thu Nov 13 23:06:31 2008
From: screwtape at froup.com (Tim Allen)
Date: Fri, 14 Nov 2008 17:06:31 +1100
Subject: [Twisted-Python] How to stop a twisted daemon application.
In-Reply-To: <befee6d80811132149h2adb814cxb0e68906da021f00@mail.gmail.com>
References: <befee6d80811132149h2adb814cxb0e68906da021f00@mail.gmail.com>
Message-ID: <20081114060631.GO29470@thristian.org>

On Fri, Nov 14, 2008 at 01:49:04PM +0800, Peter Cai wrote:
> After I have run "twistd -y xxx.py"
> 
> How can I stop it?  I've read through twistd manual and didn't find
> anything about this.
> 
> I have to find the process and kill it.

When you run twistd, it should create a 'twistd.pid' file in the current
directory containing the process-ID of the twistd process.

I believe the standard method of stopping a background twistd is:

    kill $(cat twistd.pid)

Also note the -n/--nodaemon command-line option which stops twistd from
vanishing into the background at all. If start twistd like this:

    twistd -n -y xxx.py

...then you will get the log output written to the screen (rather than
to a logfile) and you can kill the server with Ctrl-C instead of having
to mess around with pid files.




From pthomas at spongelava.com  Fri Nov 14 01:59:31 2008
From: pthomas at spongelava.com (Paul Thomas)
Date: Fri, 14 Nov 2008 08:59:31 +0000
Subject: [Twisted-Python] Opening a fifo
Message-ID: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>

Hi,

I've run into a small problem where my twisted application needs to  
open a fifo to talk to another process. On Linux at least, the open  
blocks until the other end of the fifo is opened and this is blocking  
my reactor.

Is there a straight-forward mechanism to asynchronously open the fifo?  
Or will I have to do something with threads?

Thanks,
pt.



From p.mayers at imperial.ac.uk  Fri Nov 14 02:47:35 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 14 Nov 2008 09:47:35 +0000
Subject: [Twisted-Python] Opening a fifo
In-Reply-To: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>
References: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>
Message-ID: <491D4937.7020101@imperial.ac.uk>

Paul Thomas wrote:
> Hi,
> 
> I've run into a small problem where my twisted application needs to open 
> a fifo to talk to another process. On Linux at least, the open blocks 
> until the other end of the fifo is opened and this is blocking my reactor.

Either of:

fd = os.open('thefifo', os.O_RDONLY | os.O_NONBLOCK)
fd = os.open('thefifo', os.O_RDWR)

...will return immediately,

Try "man fifo" for a description of the vagaries.


A listenFIFO would be handy in Twisted. It's tedious doing this manually.



From pthomas at spongelava.com  Fri Nov 14 02:52:27 2008
From: pthomas at spongelava.com (Paul Thomas)
Date: Fri, 14 Nov 2008 09:52:27 +0000
Subject: [Twisted-Python] Opening a fifo
In-Reply-To: <491D4937.7020101@imperial.ac.uk>
References: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>
	<491D4937.7020101@imperial.ac.uk>
Message-ID: <5D3577ED-E6C4-4F67-93D6-03B7B6BDDEDD@spongelava.com>


On 14 Nov 2008, at 09:47, Phil Mayers wrote:

> Paul Thomas wrote:
>> Hi,
>> I've run into a small problem where my twisted application needs to  
>> open a fifo to talk to another process. On Linux at least, the open  
>> blocks until the other end of the fifo is opened and this is  
>> blocking my reactor.
>
> Either of:
>
> fd = os.open('thefifo', os.O_RDONLY | os.O_NONBLOCK)
> fd = os.open('thefifo', os.O_RDWR)
>
> ...will return immediately,
>
> Try "man fifo" for a description of the vagaries.

I've tried RDWR and I get errors in writing. I really need O_WRONLY,  
and that fails with O_NONBLOCK unless the other end is open. Maybe  
I'll chase down the RDWR problem again.

Ta.



From p.mayers at imperial.ac.uk  Fri Nov 14 04:00:33 2008
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 14 Nov 2008 11:00:33 +0000
Subject: [Twisted-Python] Opening a fifo
In-Reply-To: <5D3577ED-E6C4-4F67-93D6-03B7B6BDDEDD@spongelava.com>
References: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>	<491D4937.7020101@imperial.ac.uk>
	<5D3577ED-E6C4-4F67-93D6-03B7B6BDDEDD@spongelava.com>
Message-ID: <491D5A51.3080802@imperial.ac.uk>

Paul Thomas wrote:
> 
> On 14 Nov 2008, at 09:47, Phil Mayers wrote:
> 
>> Paul Thomas wrote:
>>> Hi,
>>> I've run into a small problem where my twisted application needs to 
>>> open a fifo to talk to another process. On Linux at least, the open 
>>> blocks until the other end of the fifo is opened and this is blocking 
>>> my reactor.
>>
>> Either of:
>>
>> fd = os.open('thefifo', os.O_RDONLY | os.O_NONBLOCK)
>> fd = os.open('thefifo', os.O_RDWR)
>>
>> ...will return immediately,
>>
>> Try "man fifo" for a description of the vagaries.
> 
> I've tried RDWR and I get errors in writing. I really need O_WRONLY, and 
> that fails with O_NONBLOCK unless the other end is open. Maybe I'll 
> chase down the RDWR problem again.

Really? It works for me in a repl:

[pjm3 at wildfire ~]$ mkfifo blah
[pjm3 at wildfire ~]$ python
 >>> import os
 >>> fd = os.open('blah', os.O_RDWR)
 >>> os.write(fd, 'a')
1

What errors are you getting? Possibly Twisted is getting confused 
because the fd is "readable" as well as "writeable".

Do you have sample code that's failing?



From pthomas at spongelava.com  Fri Nov 14 04:39:19 2008
From: pthomas at spongelava.com (Paul Thomas)
Date: Fri, 14 Nov 2008 11:39:19 +0000
Subject: [Twisted-Python] Opening a fifo
In-Reply-To: <491D5A51.3080802@imperial.ac.uk>
References: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>	<491D4937.7020101@imperial.ac.uk>
	<5D3577ED-E6C4-4F67-93D6-03B7B6BDDEDD@spongelava.com>
	<491D5A51.3080802@imperial.ac.uk>
Message-ID: <6C0543AA-C607-448C-AEFD-624AF56AA2F0@spongelava.com>


On 14 Nov 2008, at 11:00, Phil Mayers wrote:

> Paul Thomas wrote:
>> On 14 Nov 2008, at 09:47, Phil Mayers wrote:
>>> Paul Thomas wrote:
>>>> Hi,
>>>> I've run into a small problem where my twisted application needs  
>>>> to open a fifo to talk to another process. On Linux at least, the  
>>>> open blocks until the other end of the fifo is opened and this is  
>>>> blocking my reactor.
>>>
>>> Either of:
>>>
>>> fd = os.open('thefifo', os.O_RDONLY | os.O_NONBLOCK)
>>> fd = os.open('thefifo', os.O_RDWR)
>>>
>>> ...will return immediately,
>>>
>>> Try "man fifo" for a description of the vagaries.
>> I've tried RDWR and I get errors in writing. I really need  
>> O_WRONLY, and that fails with O_NONBLOCK unless the other end is  
>> open. Maybe I'll chase down the RDWR problem again.
>
> Really? It works for me in a repl:
>
> [pjm3 at wildfire ~]$ mkfifo blah
> [pjm3 at wildfire ~]$ python
> >>> import os
> >>> fd = os.open('blah', os.O_RDWR)
> >>> os.write(fd, 'a')
> 1
>
> What errors are you getting? Possibly Twisted is getting confused  
> because the fd is "readable" as well as "writeable".
>
> Do you have sample code that's failing?

I'll have to wait til Monday to try it out again. I thought the  
problem was to do with the other process opening the read end between  
the open and the write. But maybe it was a case of not testing what I  
thought I was testing.

Still, so long as I know that twisted doesn't provide anything I might  
have missed, and that you think it should work, I can focus on fixing  
it instead of working around it.

Thanks.




From dialtone at gmail.com  Fri Nov 14 10:35:29 2008
From: dialtone at gmail.com (Valentino Volonghi)
Date: Fri, 14 Nov 2008 09:35:29 -0800
Subject: [Twisted-Python] Released Ampoule - 0.0.5
In-Reply-To: <24f63c200811121951i45581bbbm4b88c50818f4da02@mail.gmail.com>
References: <FF60F438-2926-48C8-A492-9215AEF10EFD@gmail.com>
	<24f63c200811121951i45581bbbm4b88c50818f4da02@mail.gmail.com>
Message-ID: <2E853739-E941-45F2-8711-EDA5249D328C@gmail.com>


On Nov 12, 2008, at 7:51 PM, Don Smith wrote:

> Hmm, this sounds interesting. I'm wondering about a use case for it.  
> Would Ampoule be a way to take advantage of multi-core processors?


Yes, multi-process programming is a way to achieve that advantage, it  
also supports
remote process pools so you can actually take advantage of multiple  
computers.

-- 
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081114/d5c12c58/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20081114/d5c12c58/attachment.sig>

From mk.fraggod at gmail.com  Fri Nov 14 13:44:41 2008
From: mk.fraggod at gmail.com (Mike Kazantsev)
Date: Sat, 15 Nov 2008 01:44:41 +0500
Subject: [Twisted-Python] How to stop a twisted daemon application.
In-Reply-To: <20081114060631.GO29470@thristian.org>
References: <befee6d80811132149h2adb814cxb0e68906da021f00@mail.gmail.com>
	<20081114060631.GO29470@thristian.org>
Message-ID: <20081115014441.111a4cfb@gmail.com>

On Fri, 14 Nov 2008 17:06:31 +1100
Tim Allen <screwtape at froup.com> wrote:

> On Fri, Nov 14, 2008 at 01:49:04PM +0800, Peter Cai wrote:
> > How can I stop it?  I've read through twistd manual and didn't find
> > anything about this.
> > 
> > I have to find the process and kill it.
> 
> I believe the standard method of stopping a background twistd is:
> 
>     kill $(cat twistd.pid)

I can suggest using "pkill -F twistd.pid" as a cleaner alternative.

You can also define your own handlers for received signals (via
signal module), to implement some custom shutdown sequence, for
instance.

-- 
Mike Kazantsev // fraggod.net
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20081115/38ac5f35/attachment.sig>

From warner at lothar.com  Fri Nov 14 19:55:00 2008
From: warner at lothar.com (Brian Warner)
Date: Fri, 14 Nov 2008 18:55:00 -0800
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
Message-ID: <20081114185500.301cc10f@fluxx.allmydata.com>

About once every six months, I wind up debugging a python stack
overflow in my Deferred-using code. The symptom is usually a log
message that ends with:

  File "/usr/lib/python2.5/site-packages/twisted/internet/defer.py", line 344, in _runCallbacks
    self.result = failure.Failure()
  File "/usr/lib/python2.5/site-packages/twisted/python/failure.py", line 265, in __init__
    parentCs = reflect.allYourBase(self.type)
  File "/usr/lib/python2.5/site-packages/twisted/python/reflect.py", line 542, in allYourBase
    accumulateBases(classObj, l, baseClass)
  File "/usr/lib/python2.5/site-packages/twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "/usr/lib/python2.5/site-packages/twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "/usr/lib/python2.5/site-packages/twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "/usr/lib/python2.5/site-packages/twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
exceptions.RuntimeError: maximum recursion depth exceeded

It's always something weird. This time, I took notes. I offer these hints to
help future searchers find a starting point in their own debugging efforts.
The executive summary:

 Certain patterns of using Deferreds work fine while testing, but will fail
 in mysterious ways later on as the application's workload grows larger.

These notes are formatted for Trac, as they were originally written as a
comment for http://allmydata.org/trac/tahoe/ticket/237 . Also, the
"solutions" suggested require the eventual-send operator as provided by
Foolscap, and until/unless reactor.eventually() makes it into Twisted proper,
these solutions may not be convenient for projects that aren't already using
Foolscap.

cheers,
 -Brian


== Problem One: long list of callbacks, all of them are ready ==

Each Deferred (we'll call the first one Deferred A) has a list of callback
functions. Each time you do d.addCallback(), this list grows by one element.

When Deferred A fires, the list is executed in a 'while' loop, in
Deferred._runCallbacks. If the callbacks all return either a normal value or
a Failure, then the list is completely consumed during the one call to
_runCallbacks, and everything is fine.

However, when a callback returns another Deferred B (chaining), the first
Deferred A must wait for the second to finish. The code that does this looks
like:

{{{
    if isinstance(self.result, Deferred):
        self.pause()
        self.result.addBoth(self._continue)
        break
}}}

The second Deferred B might have already been fired by this point, either
because it was born ready (created with defer.succeed, or
defer.maybeDeferred), or because whatever was being waited upon has already
occurred.

If this occurs, the subsequent callback in Deferred A's chain will fire (with
B's result), but it will fire through a 6-frame recursive loop instead of
firing on the next pass of the 'while' loop. As a result, each such
ready-to-fire Deferred will add 6 stack frames. 166 such loops are enough to
put more than 1000 frames on the stack, which will exceed Python's default
sys.getrecursionlimit() .

The 6-frame cycle is:

{{{
  File "twisted/internet/defer.py", line 214, in addBoth
    callbackKeywords=kw, errbackKeywords=kw)
  File "twisted/internet/defer.py", line 186, in addCallbacks
    self._runCallbacks()
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
  File "twisted/internet/defer.py", line 341, in _runCallbacks
    self.result.addBoth(self._continue)
}}}


The following sample code will cause this situation:

{{{
import traceback
from twisted.internet import defer

def fire(res, which):
    #print "FIRE", which, "stack:", len(traceback.extract_stack())
    #if which == 2:
    #    traceback.print_stack()
    return defer.succeed(None)

d = defer.Deferred()
for i in range(170):
    d.addCallback(fire, i)

d.callback("go")
}}}

The exception that this provokes is caught by the Deferred's Failure
mechanisms, but then Twisted has an internal failure while trying to capture
it. The actual Unhandled error in Deferred that gets put into the logs is:

{{{
Unhandled error in Deferred:
Traceback (most recent call last):
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
  File "twisted/internet/defer.py", line 341, in _runCallbacks
    self.result.addBoth(self._continue)
  File "twisted/internet/defer.py", line 214, in addBoth
    callbackKeywords=kw, errbackKeywords=kw)
  File "twisted/internet/defer.py", line 186, in addCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
  File "twisted/internet/defer.py", line 344, in _runCallbacks
    self.result = failure.Failure()
  File "twisted/python/failure.py", line 265, in __init__
    parentCs = reflect.allYourBase(self.type)
  File "twisted/python/reflect.py", line 542, in allYourBase
    accumulateBases(classObj, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
exceptions.RuntimeError: maximum recursion depth exceeded
}}}

This problem frequently shows up in code which returns a Deferred for
generality (i.e. some day it might be async), but is using defer.succeed() or
defer.maybeDeferred(some_immediate_call) in the meanwhile.

== Problem Two: deep chain of callbacks, e.g. recursive delayed polling ==

The other kind of recursion-limit-violation failures that occurs with
Deferreds involves a long chain that finally fires. The most common way to
generate such a chain is with a recursive method that separates each call
with a Deferred, such as a polling function that returns a Deferred:

{{{
   def wait_until_done(self, ignored=None):
       if self.done:
          return True
       else:
          d = Deferred()
          reactor.callLater(1.0, d.callback, None)
          d.addCallback(self.wait_until_done)
          return d
}}}

If this function must poll more than 331 times, the reactor tick which
notices the expired timer and fires d.callback will see a
recursion-depth-exceeded exception. The last Deferred fires, which triggers
the _continue callback on the next-to-last Deferred, which allows it to fire,
which triggers the {{{[-2]}}} Deferred, etc. This recursive cycle is of
length 3 and has the following frames:

{{{
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
}}}

This one is trickier to find, because the root of the stack will be some
internal reactor call rather than application code. In particular, the bottom
of the stack will look like:

{{{
  File "/tmp/t.py", line 26, in <module>
    reactor.run()
  File "twisted/internet/base.py", line 1048, in run
    self.mainLoop()
  File "twisted/internet/base.py", line 1057, in mainLoop
    self.runUntilCurrent()
  File "twisted/internet/base.py", line 705, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "twisted/internet/defer.py", line 243, in callback
    self._startRunCallbacks(result)
  File "twisted/internet/defer.py", line 312, in _startRunCallbacks
    self._runCallbacks()
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
}}}

The other tricky thing about this failure is that the application code is
sitting on the end of the stack: any callback that is attached to the
Deferred that {{{wait_until_done}}} returns will run in a low-stack
environment. As a result, recursion-depth-exceeded exceptions will be
triggered by seemingly innocent application code. Note how the "DONE" number
changes as you modify the self.count comparsion value in this example:

{{{
#! /usr/bin/python

import traceback
from twisted.internet import reactor
from twisted.internet.defer import Deferred

class Poller:
    count = 0
    def wait_until_done(self, ignored=None):
        self.count += 1
        if self.count > 301: # 331 works, 332 fails.
            return True
        else:
            d = Deferred()
            reactor.callLater(0.0, d.callback, None)
            d.addCallback(self.wait_until_done)
            return d

p = Poller()
def done(res):
    #traceback.print_stack()
    print "DONE", len(traceback.extract_stack())
d = p.wait_until_done()
d.addCallback(done)
reactor.run()
}}}



When this fails, the traceback that shows up in the logs looks like:

{{{
Unhandled error in Deferred:
Traceback (most recent call last):
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
--- <exception caught here> ---
  File "twisted/internet/defer.py", line 328, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "twisted/internet/defer.py", line 289, in _continue
    self.unpause()
  File "twisted/internet/defer.py", line 285, in unpause
    self._runCallbacks()
  File "twisted/internet/defer.py", line 344, in _runCallbacks
    self.result = failure.Failure()
  File "twisted/python/failure.py", line 265, in __init__
    parentCs = reflect.allYourBase(self.type)
  File "twisted/python/reflect.py", line 542, in allYourBase
    accumulateBases(classObj, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
  File "twisted/python/reflect.py", line 550, in accumulateBases
    accumulateBases(base, l, baseClass)
exceptions.RuntimeError: maximum recursion depth exceeded
}}}

== Combinations ==

Note that these two problems can interact. Each ready-to-fire callback
attached to a single Deferred uses 6 stack frames, and each chained callback
uses 3 stack frames. If X*6+Y*3 > 1000, the code will fail.

== Solutions ==

For problem one, the requirement is that Deferreds never wind up with more
than 166 callbacks that are ready to fire. In other words, there must be at
least one not-ready-to-fire Deferred in each span of 166 callbacks.

One way to accomplish this is to have every 100th call return
{{{foolscap.eventual.fireEventually(result)}}} instead of
{{{defer.succeed(result)}}}. Having every call do this works too, it just
slows things down a bit. (note that the reactor must be running for
fireEventually to work)

{{{
def fire(res, which):
    return defer.fireEventually(None)

d = defer.Deferred()
for i in range(170):
    d.addCallback(fire, i)
}}}


For problem two, the requirement is that the depth of the tail-recursion
chain not exceed 331 cycles, minus some room for the code you're eventually
going to attach to the end. One way to accomplish this is to have every 300th
call (or every single call, if you are willing to accept the slowdown) add an
additional {{{fireEventually}}} to break up the stack.

{{{
    def wait_until_done(self, ignored=None):
        self.count += 1
        if self.count > 301: # 331 works, 332 fails.
            return True
        else:
            d = Deferred()
            reactor.callLater(0.0, d.callback, None)
            d.addCallback(self.wait_until_done)
            d.addCallback(lambda res: fireEventually(res))
            return d
}}}




From warner at lothar.com  Fri Nov 14 21:06:06 2008
From: warner at lothar.com (Brian Warner)
Date: Fri, 14 Nov 2008 20:06:06 -0800
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <20081114185500.301cc10f@fluxx.allmydata.com>
References: <20081114185500.301cc10f@fluxx.allmydata.com>
Message-ID: <20081114200606.7638caa9@fluxx.allmydata.com>

> It's always something weird. This time, I took notes. I offer these hints to
> help future searchers find a starting point in their own debugging efforts.

And as a followup (since the problem I encountered today happened to be a
third case):


The first step to tracking down these problems is to temporarily apply the
following patch to your twisted/internet/defer.py:

Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 24958)
+++ twisted/internet/defer.py	(working copy)
@@ -325,6 +325,12 @@
                 try:
                     self._runningCallbacks = True
                     try:
+                        if len(traceback.extract_stack()) > 900:
+                            print "running", len(traceback.extract_stack())
+                            traceback.print_stack()
+                            print "running", len(traceback.extract_stack())
+                            import os
+                            os.abort()
                         self.result = callback(self.result, *args, **kw)
                     finally:
                         self._runningCallbacks = False
@@ -337,6 +343,12 @@
                         # self.callbacks until it is empty, then return here,
                         # where there is no more work to be done, so this call
                         # will return as well.
+                        if len(traceback.extract_stack()) > 900:
+                            print "chaining", len(traceback.extract_stack())
+                            traceback.print_stack()
+                            print "chaining", len(traceback.extract_stack())
+                            import os
+                            os.abort()
                         self.pause()
                         self.result.addBoth(self._continue)
                         break

That will let you know when the stack is getting close to exhaustion. By
looking at the trace that it prints out, you can find out what other code to
investigate. It is then useful to add the same traceback.extract_stack()
-using instrumentation to that code.

The two problems I described in my previous message were confined to the
methods of Deferred: even though the problems were set up by my application
code, the actual cycle/loop was entirely inside defer.py . The third problem
(that I just finished debugging) had a cycle that passed through my own
application code. In this case, the troublesome class looked like:


class ConcurrencyLimiter:
    """I implement a basic concurrency limiter. Add work to it in the form of
    (callable, args, kwargs) tuples. No more than LIMIT callables will be
    outstanding at any one time.
    """

    def __init__(self, limit=10):
        self.limit = limit
        self.pending = []
        self.active = 0

    def add(self, cb, *args, **kwargs):
        d = defer.Deferred()
        task = (cb, args, kwargs, d)
        self.pending.append(task)
        self.maybe_start_task()
        return d

    def maybe_start_task(self):
        if self.active >= self.limit:
            return
        if not self.pending:
            return
        (cb, args, kwargs, done_d) = self.pending.pop(0)
        self.active += 1
        d = defer.maybeDeferred(cb, *args, **kwargs)
        d.addBoth(self._done, done_d)

    def _done(self, res, done_d):
        self.active -= 1
        eventually(done_d.callback, res)
        self.maybe_start_task()

(you can safely ignore the eventually() call there.. that done_d callback was
not involved in this problem)

In this case, I had a Limiter instance with somewhere around 200 items in the
self.pending queue. All of those items were immediate functions: the call to
defer.maybeDeferred returns a Deferred that was already in the 'fired' state.
That means the d.addBoth() fires the callback right away, synchronously,
leading to a recursive cycle that looked like:

 self.maybe_start_task()
  d.addBoth(self._done, done_d)
   Deferred.addCallbacks(self._done,self._done)
   Deferred._continue
 self._done()
  self.maybe_start_task()

Giving 5 frames per cycle, so 200 items is enough to hit the 1000-frame
default recursion limit.


As before, the fix was to break up the stack by using Foolscap's
eventual-send operation:

    def _done(self, res, done_d):
        self.active -= 1
        eventually(done_d.callback, res)
        eventually(self.maybe_start_task)



hope someone eventually (hah!) finds this useful,
 -Brian



From terry at jon.es  Sat Nov 15 09:04:17 2008
From: terry at jon.es (Terry Jones)
Date: Sat, 15 Nov 2008 17:04:17 +0100
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: Your message at 20:06:06 on Friday, 14 November 2008
References: <20081114185500.301cc10f@fluxx.allmydata.com>
	<20081114200606.7638caa9@fluxx.allmydata.com>
Message-ID: <18718.62209.835262.449928@jon.es>

Hi Brian!

Thanks for posting all the details digging into this.  I've not run into
those things, but you never know. Anyway I really appreciate you taking the
time to spell it all out so clearly.

Terry



From tarjei at nu.no  Sat Nov 15 09:35:42 2008
From: tarjei at nu.no (tarjei)
Date: Sat, 15 Nov 2008 17:35:42 +0100
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <20081114200606.7638caa9@fluxx.allmydata.com>
References: <20081114185500.301cc10f@fluxx.allmydata.com>
	<20081114200606.7638caa9@fluxx.allmydata.com>
Message-ID: <491EFA5E.6000505@nu.no>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi,
> hope someone eventually (hah!) finds this useful,
I've been battling with errors like this quite a lot when using Twisted
to do batch processing of large numbers of files.

Your writeup is a very clear entry into the "Twisted documenter of the
year award". IMHO the whole writeup should be added to the Twisted
documentation right away.

Great work!
Regards,
Tarjei
>  -Brian
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFJHvpeYVRKCnSvzfIRAg8hAKCXkvMdS2ZybgbA2vQM8N/iJTOh+QCdH7vL
bEB330ANcqm6HyZjuukpWcI=
=79qM
-----END PGP SIGNATURE-----



From glyph at divmod.com  Sat Nov 15 16:26:24 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 15 Nov 2008 23:26:24 -0000
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <491EFA5E.6000505@nu.no>
References: <20081114185500.301cc10f@fluxx.allmydata.com>
	<20081114200606.7638caa9@fluxx.allmydata.com>
	<491EFA5E.6000505@nu.no>
Message-ID: <20081115232624.12555.987093130.divmod.xquotient.53@weber.divmod.com>

On 04:35 pm, tarjei at nu.no wrote:
>Your writeup is a very clear entry into the "Twisted documenter of the
>year award". IMHO the whole writeup should be added to the Twisted
>documentation right away.

While this is an excellent writeup of a problem, and Brian definitely 
deserves much praise for doing it with such thoroughness and depth, I 
don't think we should do that ;).

I've reopened an old ticket about this problem which was closed because 
the specific proposed fix didn't really work.

Ideally, Deferred just shouldn't have this problem.  If we can't 
eliminate the problem entirely, then we can at least add a more useful 
error message which can explain how you can start debugging.

The ticket in question (and my comment on it) is here:

    http://twistedmatrix.com/trac/ticket/411#comment:12

If you'd like to add a link from the FAQ, or some other more informal 
resource, please feel free.  However, this is not something that we 
should have permanently enshrined as official documentation.  It's an 
unfortunate workaround for a problem which should really just be fixed.



From dialtone at gmail.com  Sat Nov 15 16:43:55 2008
From: dialtone at gmail.com (Valentino Volonghi)
Date: Sat, 15 Nov 2008 15:43:55 -0800
Subject: [Twisted-Python] Released Ampoule - 0.1
Message-ID: <17732E5E-EFC0-4B00-9750-BBAA958B028E@gmail.com>

Here we go with Ampoule 0.1, the first beta release after 5 alphas.  
Featuring
this release is simply support for a timeout time to avoid having all  
processes
in the pool stuck on some commands.

Unfortunately today PyPI is a bit broken and I can't upload the  
release there yet,
however it's available on launchpad:
https://launchpad.net/ampoule/ampoule/0.1

Right now my launchpad issue tracker is empty, which means that I've now
implemented all the features that I was originally  looking for in a  
process pool.
Now the ball is in your hands dear users! :). Give me features to  
implement and
I'll be glad to work on them.

For the bunch of you worried about maturity of the project: it's  
obviously very young
but at adroll.com we are using it in production systems, specifically  
to drive a pool
of gtkWebKit processes that take screenshots of web pages. In my view  
this is one
of the worst cases for worker processes because web sites leak like  
hell, so far it's
been working flawlessly for over a week. Maybe soon we'll release also  
that project
as open source.

So, have fun using it. Below a more detailed changeset.

This release was sponsored by Super Happy Dev House ;P.
Ampoule 0.1 (2008-11-15)
==========================

Changes
--------

   - Fixed bug #276841: Add timeout for subprocess calls.
      The ProcessPool constructor now supports an additional timeout
      argument that specifies a pool level timeout, in seconds, before
      which every call ever made should return. Alternatively there is
      also a per-call mechanism. Currently this second per-call system
      is not available when using the remote pool service, so be sure
      to set the timeout command line parameter at an high enough level
      to satisfy all the possible commands. If a command doesn't require
      an answer the timeout doesn't apply, of course.

      The error returned when a call is timedout is  
'error.ProcessTerminated'.
      On *nix systems the process is terminated with signal 9, on  
windows
      ampoule uses SIGTERM and returns error code 255.


-- 
Valentino Volonghi aka Dialtone
Now running MacOS X 10.5
Home Page: http://www.twisted.it
http://www.adroll.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081115/29501c14/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 194 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20081115/29501c14/attachment.sig>

From exarkun at twistedmatrix.com  Sun Nov 16 07:41:58 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Nov 2008 14:41:58 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1226846518.22.1409719833@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081116/66e06bac/attachment.html>

From jml at mumak.net  Sun Nov 16 14:09:53 2008
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 17 Nov 2008 08:09:53 +1100
Subject: [Twisted-Python] Re: [Twisted-commits] r25381 - oh my GOD a news
	file
In-Reply-To: <E1L1olt-0004CJ-00@wolfwood.twistedmatrix.com>
References: <E1L1olt-0004CJ-00@wolfwood.twistedmatrix.com>
Message-ID: <d06a5cd30811161309m660f8acfq366274cbecdd3e20@mail.gmail.com>

On Mon, Nov 17, 2008 at 8:03 AM, Christopher Armstrong
<radix at wolfwood.twistedmatrix.com> wrote:
> Author: radix
> Date: Sun Nov 16 14:03:04 2008
> New Revision: 25381
>
> Modified:
>   branches/releases/release-8.2.x-3540/NEWS
>
> Log:
> oh my GOD a news file
>
>

I didn't know we had one :)

Would life be easier if we updated the NEWS file incrementally, on
each trunk commit?

jml



From radix at twistedmatrix.com  Sun Nov 16 18:57:42 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 16 Nov 2008 20:57:42 -0500
Subject: [Twisted-Python] ANN: 8.2.0pre1
Message-ID: <60ed19d40811161757u71913b3es1a338615ff8abb2@mail.gmail.com>

Hi everybody,

Please check out the first pre-release of Twisted 8.2.0, the first
release since April. The downloads are available at:

    http://twistedmatrix.com/users/radix/8.2.0pre1/

And the NEWS file is available at:

    http://twistedmatrix.com/users/radix/8.2.0pre1/NEWS.txt

If there are no problems reported with this pre-release, it will be
re-cut as Twisted 8.2.0.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From newptcai at gmail.com  Mon Nov 17 00:47:29 2008
From: newptcai at gmail.com (Peter Cai)
Date: Mon, 17 Nov 2008 15:47:29 +0800
Subject: [Twisted-Python] Non-blocking UDP output?
Message-ID: <befee6d80811162347o29a0a5f0yb45c26526b7b0bd4@mail.gmail.com>

Hi all,

Today I read this line in "Unix Networking Programming".  It seems
that UDP output might be blocking.

          We also said in Section 2.11 that there is no actual UDP
socket send buffer. The kernel just copies the application data and
moves it down the stack, prepending the UDP and IP headers. Therefore,
an output operation on a blocking UDP socket (the default) will not
block for the same reason as a TCP socket, but it is possible for
output operations to block on some systems due to the buffering and
flow control that happens within the networking code in the kernel.

But as far as I know,  when I write "transport.write" in twisted code,
 it actually called "sendto" on the socket without using "select".

Doesn't this conflict with the "non-blocking" philosophy of twisted?



From exarkun at divmod.com  Mon Nov 17 07:46:14 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 17 Nov 2008 09:46:14 -0500
Subject: [Twisted-Python] Non-blocking UDP output?
In-Reply-To: <befee6d80811162347o29a0a5f0yb45c26526b7b0bd4@mail.gmail.com>
Message-ID: <20081117144614.20272.1991123399.divmod.quotient.6712@ohm>

On Mon, 17 Nov 2008 15:47:29 +0800, Peter Cai <newptcai at gmail.com> wrote:
>Hi all,
>
>Today I read this line in "Unix Networking Programming".  It seems
>that UDP output might be blocking.
>
>          We also said in Section 2.11 that there is no actual UDP
>socket send buffer. The kernel just copies the application data and
>moves it down the stack, prepending the UDP and IP headers. Therefore,
>an output operation on a blocking UDP socket (the default) will not
>block for the same reason as a TCP socket, but it is possible for
>output operations to block on some systems due to the buffering and
>flow control that happens within the networking code in the kernel.
>
>But as far as I know,  when I write "transport.write" in twisted code,
> it actually called "sendto" on the socket without using "select".
>
>Doesn't this conflict with the "non-blocking" philosophy of twisted?
>

The UDP socket is in non-blocking mode, so writing to it will not block.

However,

http://twistedmatrix.com/trac/ticket/3396
http://twistedmatrix.com/trac/ticket/3364
http://twistedmatrix.com/trac/ticket/2802
http://twistedmatrix.com/trac/ticket/2790
http://twistedmatrix.com/trac/ticket/2627
http://twistedmatrix.com/trac/ticket/2513
http://twistedmatrix.com/trac/ticket/2493


Jean-Paul



From radix at twistedmatrix.com  Mon Nov 17 08:09:45 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 17 Nov 2008 10:09:45 -0500
Subject: [Twisted-Python] Re: ANN: 8.2.0pre1
In-Reply-To: <60ed19d40811161757u71913b3es1a338615ff8abb2@mail.gmail.com>
References: <60ed19d40811161757u71913b3es1a338615ff8abb2@mail.gmail.com>
Message-ID: <60ed19d40811170709h6c610c2cp8f3ff312f806362f@mail.gmail.com>

On Sun, Nov 16, 2008 at 8:57 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> Hi everybody,
>
> Please check out the first pre-release of Twisted 8.2.0, the first
> release since April. The downloads are available at:
>
>    http://twistedmatrix.com/users/radix/8.2.0pre1/
>
> And the NEWS file is available at:
>
>    http://twistedmatrix.com/users/radix/8.2.0pre1/NEWS.txt
>
> If there are no problems reported with this pre-release, it will be
> re-cut as Twisted 8.2.0.

Thomas Hervé has put together some Windows installers at

http://twistedmatrix.com/users/therve/

please give them a try if you're on Windows. There is one for Python 2.6.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/

From pthomas at spongelava.com  Mon Nov 17 12:11:56 2008
From: pthomas at spongelava.com (Paul Thomas)
Date: Mon, 17 Nov 2008 19:11:56 +0000
Subject: [Twisted-Python] Opening a fifo
In-Reply-To: <6C0543AA-C607-448C-AEFD-624AF56AA2F0@spongelava.com>
References: <05628A73-95C9-4DB9-BE11-9EDA8B93EE8D@spongelava.com>	<491D4937.7020101@imperial.ac.uk>
	<5D3577ED-E6C4-4F67-93D6-03B7B6BDDEDD@spongelava.com>
	<491D5A51.3080802@imperial.ac.uk>
	<6C0543AA-C607-448C-AEFD-624AF56AA2F0@spongelava.com>
Message-ID: <0DA4DFCD-4EBC-4826-9633-41A5F6FE1ADE@spongelava.com>


On 14 Nov 2008, at 11:39, Paul Thomas wrote:
>
> On 14 Nov 2008, at 11:00, Phil Mayers wrote:
>
>> Paul Thomas wrote:
>>> On 14 Nov 2008, at 09:47, Phil Mayers wrote:
>>>> Paul Thomas wrote:
>>>>> Hi,
>>>>> I've run into a small problem where my twisted application needs  
>>>>> to open a fifo to talk to another process. On Linux at least,  
>>>>> the open blocks until the other end of the fifo is opened and  
>>>>> this is blocking my reactor.
>>>>
>>

[snip]

>>>> fd = os.open('thefifo', os.O_RDWR)
>>>>
>>>> ...will return immediately,
>>>>

[snip]

> I'll have to wait til Monday to try it out again. I thought the  
> problem was to do with the other process opening the read end  
> between the open and the write. But maybe it was a case of not  
> testing what I thought I was testing.

This works just fine:

fd = os.open('thefifo', os.O_RDWR | os.O_NONBLOCK)

thanks for your help.

Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081117/b2f0bce0/attachment.html>

From warner at lothar.com  Mon Nov 17 16:49:41 2008
From: warner at lothar.com (Brian Warner)
Date: Mon, 17 Nov 2008 15:49:41 -0800
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <20081115232624.12555.987093130.divmod.xquotient.53@weber.divmod.com>
References: <20081114185500.301cc10f@fluxx.allmydata.com>
	<20081114200606.7638caa9@fluxx.allmydata.com>
	<491EFA5E.6000505@nu.no>
	<20081115232624.12555.987093130.divmod.xquotient.53@weber.divmod.com>
Message-ID: <20081117154941.7f13d449@fluxx.allmydata.com>

> Ideally, Deferred just shouldn't have this problem. If we can't eliminate
> the problem entirely, then we can at least add a more useful error message
> which can explain how you can start debugging.

Yeah, when I last looked into this (a couple years ago), I figured that the
Deferred doesn't have enough information to safely optimize out the
tail-call. You never know who else might have a handle on the Deferred and
might add a new callback to it. It once occurred to me that it might be
easier to do this safely if Deferred were broken up into two pieces (like E's
Promise/Resolver pair: basically one side would get .callback and .errback,
while the other side would get .addCallbacks/etc), but I didn't pursue that
thought very far.

Using an eventual-send is unfortunate but correct (in that it will reliably
avoid the problem, but it's probably a noticable performance hit to blow away
the entire stack for each call). An unwise-but-less-unfortunate approach
would be to use an eventual-send only when it appears necessary, as in the
following strawman:

class Deferred:
    def _continue(self, result):
        self.result = result
        if len(traceback.extract_stack()) > sys.getrecursionlimit() - 100:
            eventually(self.unpause)
        else:
            self.unpause()


It might be enough to have Defer._runCallbacks() look to see if the result of
callback() is a recursion-depth-exceeded RuntimeError and do something
special in response to it. Zooko showed me some code that would temporarily
raise sys.setrecursionlimit() so that the error could be Failure-ized
properly.. maybe that would be enough. A lot of the frustration cause by this
sort of problem is that the Failure-rendering code runs out of stack space
too.

cheers,
 -Brian



From exarkun at divmod.com  Mon Nov 17 17:04:05 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 17 Nov 2008 19:04:05 -0500
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <20081117154941.7f13d449@fluxx.allmydata.com>
Message-ID: <20081118000405.20272.1013994295.divmod.quotient.6912@ohm>

On Mon, 17 Nov 2008 15:49:41 -0800, Brian Warner <warner at lothar.com> wrote:
>> Ideally, Deferred just shouldn't have this problem. If we can't eliminate
>> the problem entirely, then we can at least add a more useful error message
>> which can explain how you can start debugging.
>
>Yeah, when I last looked into this (a couple years ago), I figured that the
>Deferred doesn't have enough information to safely optimize out the
>tail-call. You never know who else might have a handle on the Deferred and
>might add a new callback to it. It once occurred to me that it might be
>easier to do this safely if Deferred were broken up into two pieces (like E's
>Promise/Resolver pair: basically one side would get .callback and .errback,
>while the other side would get .addCallbacks/etc), but I didn't pursue that
>thought very far.

Of course, the best response to this would be an implementation of the
iterative version of _runCallbacks.  However, I do think it is possible
to get rid of this recursion.  It doesn't really matter who else might
have a reference to either Deferred involved.  The new frame going onto
the stack is just another Deferred._runCallbacks (unless a subclass
overrides it, but DeferredList is the only subclass in Twisted, and we
should really deprecated it, and continue to discourage people from
subclassing Deferred, and _runCallbacks is private anyway so there).
The recurser (ie, the Deferred._runCallbacks doing the `self.result.addBoth(
self._continue)´ knows how the recursee (ie, the Deferred having addBoth
called on it) behaves - just like itself.  The obvious transformation
(inlining a bunch of code from outside of _runCallbacks into _runCallbacks)
will result in something that's really ugly, but it should work.  And I
think there is probably an approach that's less ugly, too.

This addresses only one of the problems you raised, but it's the one I
think Glyph was talking about eliminating by changing the implementation
of Deferred.

It's possible there's a way to remove the other one with an implementation
change to Deferred as well (but it's not as clear to me what that change is
yet).  However, it's much easier to avoid that one by writing code in a
slightly different way.

eventual-send is one different way, but there are also other more efficient
approaches which are also always correct.  These generally take the form
of avoiding creating a giant stack of Deferreds in the first place by only
changing each Deferred which would have been "interior" on that stack to
the one immediately beneath it and chaining the bottom directly to the top.

Jean-Paul



From newptcai at gmail.com  Mon Nov 17 18:52:41 2008
From: newptcai at gmail.com (Peter Cai)
Date: Tue, 18 Nov 2008 09:52:41 +0800
Subject: [Twisted-Python] Non-blocking UDP output?
In-Reply-To: <20081117144614.20272.1991123399.divmod.quotient.6712@ohm>
References: <befee6d80811162347o29a0a5f0yb45c26526b7b0bd4@mail.gmail.com>
	<20081117144614.20272.1991123399.divmod.quotient.6712@ohm>
Message-ID: <befee6d80811171752g75da0233w50ae84d702a6a4e0@mail.gmail.com>

I know.  But write to UDP socket might fail.  And I didn't see any
error handle code.

Seems that twisted amuse that calling sendto on UDP would never fail.

On Mon, Nov 17, 2008 at 10:46 PM, Jean-Paul Calderone
<exarkun at divmod.com> wrote:
> On Mon, 17 Nov 2008 15:47:29 +0800, Peter Cai <newptcai at gmail.com> wrote:
>>
>> Hi all,
>>
>> Today I read this line in "Unix Networking Programming".  It seems
>> that UDP output might be blocking.
>>
>>         We also said in Section 2.11 that there is no actual UDP
>> socket send buffer. The kernel just copies the application data and
>> moves it down the stack, prepending the UDP and IP headers. Therefore,
>> an output operation on a blocking UDP socket (the default) will not
>> block for the same reason as a TCP socket, but it is possible for
>> output operations to block on some systems due to the buffering and
>> flow control that happens within the networking code in the kernel.
>>
>> But as far as I know,  when I write "transport.write" in twisted code,
>> it actually called "sendto" on the socket without using "select".
>>
>> Doesn't this conflict with the "non-blocking" philosophy of twisted?
>>
>
> The UDP socket is in non-blocking mode, so writing to it will not block.
>
> However,
>
> http://twistedmatrix.com/trac/ticket/3396
> http://twistedmatrix.com/trac/ticket/3364
> http://twistedmatrix.com/trac/ticket/2802
> http://twistedmatrix.com/trac/ticket/2790
> http://twistedmatrix.com/trac/ticket/2627
> http://twistedmatrix.com/trac/ticket/2513
> http://twistedmatrix.com/trac/ticket/2493
>
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
而如何让自己的内心产生力量，在于自己而不在于别人。等到一跃而过，回头去看的时候，一个人因此获得了宝贵的经验和自信，下一次就可以面对更宽更深的壕沟。关键在于有多少意愿去面对这种犹豫时刻，因为大部分情况下，我们可以选择绕路的方法而回避这种艰难的选择。

From andrew-twisted at puzzling.org  Mon Nov 17 20:06:21 2008
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 18 Nov 2008 14:06:21 +1100
Subject: [Twisted-Python] Non-blocking UDP output?
In-Reply-To: <befee6d80811171752g75da0233w50ae84d702a6a4e0@mail.gmail.com>
References: <befee6d80811162347o29a0a5f0yb45c26526b7b0bd4@mail.gmail.com>
	<20081117144614.20272.1991123399.divmod.quotient.6712@ohm>
	<befee6d80811171752g75da0233w50ae84d702a6a4e0@mail.gmail.com>
Message-ID: <20081118030621.GJ15633@steerpike.home.puzzling.org>

Peter Cai wrote:
> I know.  But write to UDP socket might fail.  And I didn't see any
> error handle code.

Here's the code in twisted/internet/udp.py that calls sendto:

            try:
                return self.socket.sendto(datagram, addr)
            except socket.error, se:
                # [snipped; a whole bunch of error handling]

> Seems that twisted amuse that calling sendto on UDP would never fail.

I don't know why you think that Twisted assumes that, as the code clearly
does expect to handle errors from sendto, including EINTR.

-Andrew.



From wthie at thiengineering.ch  Tue Nov 18 01:39:50 2008
From: wthie at thiengineering.ch (Werner Thie)
Date: Tue, 18 Nov 2008 09:39:50 +0100
Subject: [Twisted-Python] Deferreds vs sys.getrecursionlimit()
In-Reply-To: <20081114185500.301cc10f@fluxx.allmydata.com>
References: <20081114185500.301cc10f@fluxx.allmydata.com>
Message-ID: <49227F56.9090109@thiengineering.ch>

Just to add my 2cts:

a quick solution to the problem is using stackless and setting 
sys.setrecursionlimit(sys.maxint). Your test code runs no problem with

            :
for i in range(100000):
     d.addCallback(fire, i)
            :

on a lousy Athlon dualcore with stackless compiled in:

Python 2.5.2 Stackless 3.1b3 060516 (release25-maint, Sep 26 2008, 
10:22:13) [MSC v.1310 32 bit (Intel)] on win32

For more than a year now I'm using stackless for all my Python projects 
without resorting to tasklets and the stuff stackless is really aiming 
at. I do so because getting rid of the C-stack is a major point in 
modern language design and implementation and in my opinion Python lags 
somewhat in this particular area.

It is of course true that one must be able to rebuild all the C based 
stuff you're using in a project but doing so is and was always at the 
center of my projects.

HTH, Werner


Brian Warner wrote:
> About once every six months, I wind up debugging a python stack
> overflow in my Deferred-using code. The symptom is usually a log
> message that ends with:
snip...



From gabriel.rossetti at arimaz.com  Wed Nov 19 07:43:36 2008
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Wed, 19 Nov 2008 15:43:36 +0100
Subject: [Twisted-Python] trial testing messages
Message-ID: <49242618.9070300@arimaz.com>

Hello,

I am writing unit tests using trial. I am trying to make sure that the 
received messages are processed correctly and the output messages are 
correct. I tried using toXml(), but the XML attributes aren't 
necessaraly in the correct order, so a string comparison doesn't work. I 
had originally submitted a patch to allow domish.Element to be compared 
(ticket #3344), but my patch isn't liked. So my question is, how may I 
test this?

Thank you,
Gabriel



From exarkun at divmod.com  Wed Nov 19 09:01:35 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 19 Nov 2008 11:01:35 -0500
Subject: [Twisted-Python] trial testing messages
In-Reply-To: <49242618.9070300@arimaz.com>
Message-ID: <20081119160135.20272.946054504.divmod.quotient.7826@ohm>

On Wed, 19 Nov 2008 15:43:36 +0100, Gabriel Rossetti <gabriel.rossetti at arimaz.com> wrote:
>Hello,
>
>I am writing unit tests using trial. I am trying to make sure that the 
>received messages are processed correctly and the output messages are 
>correct. I tried using toXml(), but the XML attributes aren't necessaraly in 
>the correct order, so a string comparison doesn't work. I had originally 
>submitted a patch to allow domish.Element to be compared (ticket #3344), but 
>my patch isn't liked. So my question is, how may I test this?

If you keep agitating about #3344, then it should get resolved eventually.
Commenting on the ticket is good, but if that doesn't get you anywhere, you
might want to find people on IRC or follow up on the mailing list.

That aside, you should be able to use the solution you proposed for
inclusion in Twisted without actually having Twisted change.  You can
just implement comparison as a free function which takes two elements
and implements the logic you're interested in.  You'll have to use
TestCase.assertTrue(equals(a, b)) instead of TestCase.assertEqual(a, b)
but that's a pretty minor difference.  Hopefully this will be an interim
solution until domish.Elements gain the feature you want, but this might
serve you elsewhere in a more long-term fashion.  There can only be one
definition of equality for a particular type.  It is necessarily the case
that this definition won't always be what everyone wants to use.

Jean-Paul



From ddwiggins at advpubtech.com  Wed Nov 19 17:38:54 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Wed, 19 Nov 2008 16:38:54 -0800
Subject: [Twisted-Python] Exception handling in t.e.adbapi
Message-ID: <gg2biv$gi9$1@ger.gmane.org>

I've been using adbapi (with pyodbc talking to MS SQL Server) 
successfully in a Windows service.  I've discovered that occasionally, 
the network between the service and the database machine goes down and 
comes back up (either that or the database server itself cycles down and 
back up).  When this happens, any pyodbc connections hanging around are 
corrupted, so that the next query gets an exception (class 
pyodbc.Error).  Currently, the best thing I can do is to restart the 
service.

I'm trying to rewrite the service to be able to catch, analyze, and 
respond to exceptions from pyodbc.  In particular, in the case above, 
it's possible to reconnect and retry the query.  If the network 
connection is still down, I'd like to log it, send a message to alert 
someone, or whatever.

I've rewritten a ConnectionPool.runQuery call to use runInteraction to 
call a function (in a thread) that works with the cursor created in 
runInteraction to execute the query.  The function wraps the 
cursor.execute(...) in a try-except.  I can successfully catch the 
exception, and I try to recover by doing cursor.reconnect(), then 
cursor.reopen(), and finally cursor.execute(...) again.  I'm finding 
that this fails with a "wrong connection for thread" exception.  I 
haven't been able to figure out why that should happen; more 
importantly, I'm not sure that I'm going about this in the right way. 
Any insights or pointers to code that does this kind of thing would be 
appreciated.

Thanks,
-- 
Don Dwiggins
Advanced Publishing Technology




From exarkun at divmod.com  Wed Nov 19 17:45:42 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 19 Nov 2008 19:45:42 -0500
Subject: [Twisted-Python] Exception handling in t.e.adbapi
In-Reply-To: <gg2biv$gi9$1@ger.gmane.org>
Message-ID: <20081120004542.20272.1393426497.divmod.quotient.8037@ohm>

On Wed, 19 Nov 2008 16:38:54 -0800, Don Dwiggins <ddwiggins at advpubtech.com> wrote:
>I've been using adbapi (with pyodbc talking to MS SQL Server) successfully 
>in a Windows service.  I've discovered that occasionally, the network 
>between the service and the database machine goes down and comes back up 
>(either that or the database server itself cycles down and back up).  When 
>this happens, any pyodbc connections hanging around are corrupted, so that 
>the next query gets an exception (class pyodbc.Error).  Currently, the best 
>thing I can do is to restart the service.
>
>I'm trying to rewrite the service to be able to catch, analyze, and respond 
>to exceptions from pyodbc.  In particular, in the case above, it's possible 
>to reconnect and retry the query.  If the network connection is still down, 
>I'd like to log it, send a message to alert someone, or whatever.

How do you tell the difference between a network error which prevented a
statement from being executed by the SQL server and a network error which
only prevented the response indicating that the statement was successfully
executed from being returned to you?  If you can't tell the difference, how
do you ensure that you don't re-execute statements which modify the database
causing corruption of your data?

>I've rewritten a ConnectionPool.runQuery call to use runInteraction to call 
>a function (in a thread) that works with the cursor created in 
>runInteraction to execute the query.  The function wraps the 
>cursor.execute(...) in a try-except.  I can successfully catch the 
>exception, and I try to recover by doing cursor.reconnect(), then 
>cursor.reopen(), and finally cursor.execute(...) again.  I'm finding that 
>this fails with a "wrong connection for thread" exception.  I haven't been 
>able to figure out why that should happen; more importantly, I'm not sure 
>that I'm going about this in the right way. Any insights or pointers to code 
>that does this kind of thing would be appreciated.

I've never used pyodbc, but presumably the exception indicates you're
using the objects in a thread where they're not allowed to be used.  You
should find out what the threading restrictions of the module are and
then see where you're violating them.  One thing to keep in mind is that
ConnectionPool uses a ThreadPool.  That means you're never guaranteed that
two different functions will run in the same thread.  Whichever thread in
the pool is free will run the next task.

Jean-Paul



From gabriel.rossetti at arimaz.com  Thu Nov 20 00:03:26 2008
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 20 Nov 2008 08:03:26 +0100
Subject: [Twisted-Python] trial testing messages
In-Reply-To: <20081119160135.20272.946054504.divmod.quotient.7826@ohm>
References: <20081119160135.20272.946054504.divmod.quotient.7826@ohm>
Message-ID: <49250BBE.5050903@arimaz.com>

Jean-Paul Calderone wrote:
> On Wed, 19 Nov 2008 15:43:36 +0100, Gabriel Rossetti 
> <gabriel.rossetti at arimaz.com> wrote:
>> Hello,
>>
>> I am writing unit tests using trial. I am trying to make sure that 
>> the received messages are processed correctly and the output messages 
>> are correct. I tried using toXml(), but the XML attributes aren't 
>> necessaraly in the correct order, so a string comparison doesn't 
>> work. I had originally submitted a patch to allow domish.Element to 
>> be compared (ticket #3344), but my patch isn't liked. So my question 
>> is, how may I test this?
>
> If you keep agitating about #3344, then it should get resolved 
> eventually.
> Commenting on the ticket is good, but if that doesn't get you 
> anywhere, you
> might want to find people on IRC or follow up on the mailing list.
>
Ok, thanks for the tip, I didn't want to be annoying
> That aside, you should be able to use the solution you proposed for
> inclusion in Twisted without actually having Twisted change.  You can
> just implement comparison as a free function which takes two elements
> and implements the logic you're interested in.  You'll have to use
> TestCase.assertTrue(equals(a, b)) instead of TestCase.assertEqual(a, b)
> but that's a pretty minor difference.  Hopefully this will be an interim
> solution until domish.Elements gain the feature you want, but this might
> serve you elsewhere in a more long-term fashion.  There can only be one
> definition of equality for a particular type.  It is necessarily the case
> that this definition won't always be what everyone wants to use.
>
> Jean-Paul

Ok, I'll do that then for now, you're right, thanks Jean-Paul.

Gabriel



From peter at sabaini.at  Thu Nov 20 09:58:32 2008
From: peter at sabaini.at (Peter Sabaini)
Date: Thu, 20 Nov 2008 17:58:32 +0100
Subject: [Twisted-Python] Connectionless AMP?
Message-ID: <200811201758.38700.peter@sabaini.at>

Hello,

I want to implement a messageing protocol running on top of TIPC / SOCK_RDM to 
be able to do multicasting; ie. send messages in a connectionless manner. 

I implemented some TIPC support, but I now wonder how to go about the 
protocol. Originally, I thought about using AMP, but this seems to assume a 
connection-oriented transport. 

How would you go about this? Should it be possible to use a datagram-like, 
connection-less transport with AMP? Or should I rather take a more low-level 
approach, eg. by using IntNStringReceiver and roll my own?

Thanks for any advice.

peter.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20081120/43ae8211/attachment.sig>

From wthie at thiengineering.ch  Thu Nov 20 10:50:07 2008
From: wthie at thiengineering.ch (Werner Thie)
Date: Thu, 20 Nov 2008 18:50:07 +0100
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <200811201758.38700.peter@sabaini.at>
References: <200811201758.38700.peter@sabaini.at>
Message-ID: <4925A34F.7060406@thiengineering.ch>

Hi

I tried to enhance my test.tac file with

              :
application = service.Application("test")
application.setComponent(ILogObserver, LogFile('test.log', '/var/log/', 
rotateLength=10000).write)
              :

The logfile is created but the log messages vanish into thin air, log 
file size remains at zero.

What am I doing wrong?

TIA, Werner



From ddwiggins at advpubtech.com  Thu Nov 20 12:44:30 2008
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Thu, 20 Nov 2008 11:44:30 -0800
Subject: [Twisted-Python] Re: Exception handling in t.e.adbapi
In-Reply-To: <20081120004542.20272.1393426497.divmod.quotient.8037@ohm>
References: <gg2biv$gi9$1@ger.gmane.org>
	<20081120004542.20272.1393426497.divmod.quotient.8037@ohm>
Message-ID: <gg4emv$2fm$1@ger.gmane.org>

Jean-Paul, thanks for the reply:
  > How do you tell the difference between a network error which prevented a
> statement from being executed by the SQL server and a network error which
> only prevented the response indicating that the statement was successfully
> executed from being returned to you?  If you can't tell the difference, how
> do you ensure that you don't re-execute statements which modify the 
> database causing corruption of your data?

Well, I was a bit cryptic in my description.  Based on experience with 
SQL Server and experimentation with different conditions, I'm pretty 
sure I can tell from the exception data whether the statement completed 
successfully.  You're right, though, I do need to be careful about this.

> I've never used pyodbc, but presumably the exception indicates you're
> using the objects in a thread where they're not allowed to be used.

By tracing through the operation of adbapi, I figured out why I was 
getting that message when the network is down:  Connection.reconnect 
does a ConnectionPool.disconnect followed by a ConnectionPool.connect, 
which does a dbapi.connect; this fails, since the network is still down. 
  The exception is caught in _runInteraction, which tries to do a 
conn.rollback, which calls ConnectionPool.disconnect.  Since there's no 
connection at this point, I get the "wrong connection" exception.

The moral of the story seems to be that I need to rethink how to detect 
the difference between a "stale" connection with the network back up, 
and a network down condition.  Another possibility would be to adapt 
adbapi to work in one-connection-per-operation mode, so there'd never be 
an open connection hanging around.  (This sort of defeats the point of 
ConnectionPool, but the API of the module would be preserved.)

-- 
Don Dwiggins
Advanced Publishing Technology




From exarkun at divmod.com  Thu Nov 20 12:53:04 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 20 Nov 2008 14:53:04 -0500
Subject: [Twisted-Python] Connectionless AMP?
In-Reply-To: <200811201758.38700.peter@sabaini.at>
Message-ID: <20081120195304.20272.129619320.divmod.quotient.8396@ohm>

On Thu, 20 Nov 2008 17:58:32 +0100, Peter Sabaini <peter at sabaini.at> wrote:
>Hello,
>
>I want to implement a messageing protocol running on top of TIPC / SOCK_RDM to
>be able to do multicasting; ie. send messages in a connectionless manner.
>
>I implemented some TIPC support, but I now wonder how to go about the
>protocol. Originally, I thought about using AMP, but this seems to assume a
>connection-oriented transport.
>
>How would you go about this? Should it be possible to use a datagram-like,
>connection-less transport with AMP? Or should I rather take a more low-level
>approach, eg. by using IntNStringReceiver and roll my own?
>
>Thanks for any advice.

You can use AMP to format your datagrams, but you'll have to do extra work
if you want any of the command-related functionality to work, since it
assumes a reliable transport.

`AmpBox´ has a `serialize´ method and `twisted.protocols.amp´ has the free
function `parseString´.

Jean-Paul



From exarkun at divmod.com  Thu Nov 20 12:54:44 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 20 Nov 2008 14:54:44 -0500
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <4925A34F.7060406@thiengineering.ch>
Message-ID: <20081120195444.20272.735994427.divmod.quotient.8399@ohm>

On Thu, 20 Nov 2008 18:50:07 +0100, Werner Thie <wthie at thiengineering.ch> wrote:
>Hi
>
>I tried to enhance my test.tac file with
>
>              :
>application = service.Application("test")
>application.setComponent(ILogObserver, LogFile('test.log', '/var/log/', 
>rotateLength=10000).write)
>              :
>
>The logfile is created but the log messages vanish into thin air, log file 
>size remains at zero.
>
>What am I doing wrong?

Are you using trunk at 25379 or newer?

Jean-Paul



From radix at twistedmatrix.com  Thu Nov 20 12:58:12 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 Nov 2008 14:58:12 -0500
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <4925A34F.7060406@thiengineering.ch>
References: <200811201758.38700.peter@sabaini.at>
	<4925A34F.7060406@thiengineering.ch>
Message-ID: <60ed19d40811201158m592ef595g793206e8dfc597be@mail.gmail.com>

On Thu, Nov 20, 2008 at 12:50 PM, Werner Thie <wthie at thiengineering.ch> wrote:
> Hi
>
> I tried to enhance my test.tac file with
>
>             :
> application = service.Application("test")
> application.setComponent(ILogObserver, LogFile('test.log', '/var/log/',
> rotateLength=10000).write)

You should not pass the write method as an observer: an observer must
be a callable that takes a dict.

You probably want to import FileLogObserver from twisted.python.log,
and pass an instance of that:

application.setComponent(ILogObserver,
FileLogObserver(LogFile("test.log", "/var/log", rotateLength=10000)))


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From peter at sabaini.at  Thu Nov 20 13:17:55 2008
From: peter at sabaini.at (Peter Sabaini)
Date: Thu, 20 Nov 2008 21:17:55 +0100
Subject: [Twisted-Python] Connectionless AMP?
In-Reply-To: <20081120195304.20272.129619320.divmod.quotient.8396@ohm>
References: <20081120195304.20272.129619320.divmod.quotient.8396@ohm>
Message-ID: <200811202118.12613.peter@sabaini.at>

On Thursday 20 November 2008 20:53:04 Jean-Paul Calderone wrote:
> On Thu, 20 Nov 2008 17:58:32 +0100, Peter Sabaini <peter at sabaini.at> wrote:
> >Hello,
> >
> >I want to implement a messageing protocol running on top of TIPC /
> > SOCK_RDM to be able to do multicasting; ie. send messages in a
> > connectionless manner.
> >
> >I implemented some TIPC support, but I now wonder how to go about the
> >protocol. Originally, I thought about using AMP, but this seems to assume
> > a connection-oriented transport.
> >
> >How would you go about this? Should it be possible to use a datagram-like,
> >connection-less transport with AMP? Or should I rather take a more
> > low-level approach, eg. by using IntNStringReceiver and roll my own?
> >
> >Thanks for any advice.
>
> You can use AMP to format your datagrams, but you'll have to do extra work
> if you want any of the command-related functionality to work, since it
> assumes a reliable transport.
>
> `AmpBox´ has a `serialize´ method and `twisted.protocols.amp´ has the free
> function `parseString´.

Thanks, I'll try that!

peter.

>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20081120/fbe84f26/attachment.sig>

From radix at twistedmatrix.com  Thu Nov 20 13:33:09 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 Nov 2008 15:33:09 -0500
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <60ed19d40811201158m592ef595g793206e8dfc597be@mail.gmail.com>
References: <200811201758.38700.peter@sabaini.at>
	<4925A34F.7060406@thiengineering.ch>
	<60ed19d40811201158m592ef595g793206e8dfc597be@mail.gmail.com>
Message-ID: <60ed19d40811201233n73dec59ele8158cdca9efbcd7@mail.gmail.com>

On Thu, Nov 20, 2008 at 2:58 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> On Thu, Nov 20, 2008 at 12:50 PM, Werner Thie <wthie at thiengineering.ch> wrote:
>> Hi
>>
>> I tried to enhance my test.tac file with
>>
>>             :
>> application = service.Application("test")
>> application.setComponent(ILogObserver, LogFile('test.log', '/var/log/',
>> rotateLength=10000).write)
>
> You should not pass the write method as an observer: an observer must
> be a callable that takes a dict.
>
> You probably want to import FileLogObserver from twisted.python.log,
> and pass an instance of that:
>
> application.setComponent(ILogObserver,
> FileLogObserver(LogFile("test.log", "/var/log", rotateLength=10000)))

Sorry, I didn't test this code. Change that to...

application.setComponent(ILogObserver,
FileLogObserver(LogFile("test.log", "/var/log",
rotateLength=10000)).emit)

maybe that code will work.


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From reza at getpeer.com  Thu Nov 20 16:25:06 2008
From: reza at getpeer.com (Reza Lotun)
Date: Thu, 20 Nov 2008 23:25:06 +0000
Subject: [Twisted-Python] Connection Manager
Message-ID: <356e30830811201525x7f8dc2f3meab158774916d4b7@mail.gmail.com>

Hi All,

I've been thinking of implementing a connection manager in twisted. The app
I'm working on has various parts or "modules" that individually make
separate connections to various services and what not. They basically act
independently of each other - as in they're all scheduled connection calls
and what not.

I'm interested in mediating these connections through a "Dispatcher" of
sorts - what I'm thinking would be a thin wrapper over the reactor, with
extra state. One of the things the Dispatcher would do is gauge network
connection health - something like periodically attempting to ping/connect
to well known internet sites. If the connection ever degrades or fails, the
Dispatcher would change state. Fairly straightforward, conceptually at
least.

My questions are twofold - is the general idea sound - how is such a thing
implemented elsewhere? Also, what would be the best strategy to implement
the above, if the idea is sane?

I was thinking something like this: my Dispatcher would have something like
a connectTCP call which would in turn call the reactor.connectTCP with a
special DispatcherFactory. As the returned IConnector calls
startedConnecting on the DispatcherFactory, it would check internal state,
figure out a policy and decide whether to continue with the connection and
call the passed in factory's buildProctol, or call the IConnector
stopConnecting to pause the connection attempt. If the situation improves
later on, the IConnector.connect can be called to "resume" the connection
attempt.

Any feedback would be greatly appreciated.

Thanks,
Reza

-- 
Reza Lotun
Senior Software Engineer
GetPeer Limited
reza at getpeer.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081120/34f4aa8a/attachment.html>

From jack at chesspark.com  Thu Nov 20 17:00:33 2008
From: jack at chesspark.com (Jack Moffitt)
Date: Thu, 20 Nov 2008 17:00:33 -0700
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
Message-ID: <9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>

I would like to propose that #3463
(http://twistedmatrix.com/trac/ticket/3463) be additionally committed
to the 8.1 branch and any other branches that still get point
releases.  It is a pretty critical workaround which fixes the fact
that recent OpenSSL libraries cannot connect to Java based services.
This means that most of the packaged versions of Twisted cannot talk
to Google Talk or any Tigase or Openfire XMPP servers.  Since
packagers are often reluctant to upgrade very far in a particular
distribution, I would like to get bug fix releases out for Twisted
8.1, etc, so that we have some hope that this problem will go away as
soon as possible.

jack.



From radix at twistedmatrix.com  Thu Nov 20 18:11:33 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 Nov 2008 20:11:33 -0500
Subject: [Twisted-Python] Please test Twisted 8.2.0pre2 and tell me whether
	it works
Message-ID: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>

I just uploaded 8.2.0pre2 tarballs, which include one bugfix since
8.2.0pre1 which was deemed important enough to be backported:

 - TLS Session Tickets are now disabled by default, allowing connections to
   certain servers which hang when an empty session ticket is received (like
   GTalk) (#3463)


The tarballs are at

    http://twistedmatrix.com/users/radix/8.2.0pre2/

If you want to test 8.2.0pre2 on Windows, Thomas Hervé may be able to
build installers some time tomorrow.


Please test it out - I haven't heard any results from the pre1 release
yet. If you don't test it then 8.2.0 will be horrible, and it will be
your fault. You know, I've heard some people are using Twisted to
manage puppy incubators. Think of the puppies.

http://www.ustream.tv/channel/shiba-inu-puppy-cam




-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/

From wthie at thiengineering.ch  Thu Nov 20 23:15:18 2008
From: wthie at thiengineering.ch (Werner Thie)
Date: Fri, 21 Nov 2008 07:15:18 +0100
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <60ed19d40811201233n73dec59ele8158cdca9efbcd7@mail.gmail.com>
References: <200811201758.38700.peter@sabaini.at>	<4925A34F.7060406@thiengineering.ch>	<60ed19d40811201158m592ef595g793206e8dfc597be@mail.gmail.com>
	<60ed19d40811201233n73dec59ele8158cdca9efbcd7@mail.gmail.com>
Message-ID: <492651F6.60904@thiengineering.ch>

Thank you so much, works like a charm!

Isn't this a snippet which could go into the FAQ about twistd? Or should 
there be a WIKI page about logging in general?

Werner

Christopher Armstrong wrote:
> On Thu, Nov 20, 2008 at 2:58 PM, Christopher Armstrong
> <radix at twistedmatrix.com> wrote:
>> On Thu, Nov 20, 2008 at 12:50 PM, Werner Thie <wthie at thiengineering.ch> wrote:
>>> Hi
>>>
>>> I tried to enhance my test.tac file with
>>>
>>>             :
>>> application = service.Application("test")
>>> application.setComponent(ILogObserver, LogFile('test.log', '/var/log/',
>>> rotateLength=10000).write)
>> You should not pass the write method as an observer: an observer must
>> be a callable that takes a dict.
>>
>> You probably want to import FileLogObserver from twisted.python.log,
>> and pass an instance of that:
>>
>> application.setComponent(ILogObserver,
>> FileLogObserver(LogFile("test.log", "/var/log", rotateLength=10000)))
> 
> Sorry, I didn't test this code. Change that to...
> 
> application.setComponent(ILogObserver,
> FileLogObserver(LogFile("test.log", "/var/log",
> rotateLength=10000)).emit)
> 
> maybe that code will work.
> 
> 



From therve at free.fr  Fri Nov 21 03:01:49 2008
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Fri, 21 Nov 2008 11:01:49 +0100
Subject: [Twisted-Python] Please test Twisted 8.2.0pre2 and tell me
	whether it works
In-Reply-To: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
References: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
Message-ID: <1227261709.6359.5.camel@brainwave>

Le jeudi 20 novembre 2008 à 20:11 -0500, Christopher Armstrong a écrit :
> I just uploaded 8.2.0pre2 tarballs, which include one bugfix since
> 8.2.0pre1 which was deemed important enough to be backported:
> 
>  - TLS Session Tickets are now disabled by default, allowing connections to
>    certain servers which hang when an empty session ticket is received (like
>    GTalk) (#3463)
> 
> 
> The tarballs are at
> 
>     http://twistedmatrix.com/users/radix/8.2.0pre2/
> 
> If you want to test 8.2.0pre2 on Windows, Thomas Hervé may be able to
> build installers some time tomorrow.

And indeed here they are:

      http://twistedmatrix.com/users/therve/


> Please test it out - I haven't heard any results from the pre1 release
> yet. If you don't test it then 8.2.0 will be horrible, and it will be
> your fault. You know, I've heard some people are using Twisted to
> manage puppy incubators. Think of the puppies.
> 
> http://www.ustream.tv/channel/shiba-inu-puppy-cam


Everytime a tarball is tested, a puppy is born!

-- 
Thomas




From radix at twistedmatrix.com  Fri Nov 21 07:55:19 2008
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 21 Nov 2008 09:55:19 -0500
Subject: [Twisted-Python] twistd .tac and ILogObserver
In-Reply-To: <492651F6.60904@thiengineering.ch>
References: <200811201758.38700.peter@sabaini.at>
	<4925A34F.7060406@thiengineering.ch>
	<60ed19d40811201158m592ef595g793206e8dfc597be@mail.gmail.com>
	<60ed19d40811201233n73dec59ele8158cdca9efbcd7@mail.gmail.com>
	<492651F6.60904@thiengineering.ch>
Message-ID: <60ed19d40811210655n7dd0b9d1o843a1f41313f300@mail.gmail.com>

On Fri, Nov 21, 2008 at 1:15 AM, Werner Thie <wthie at thiengineering.ch> wrote:
> Thank you so much, works like a charm!
>
> Isn't this a snippet which could go into the FAQ about twistd? Or should
> there be a WIKI page about logging in general?

It's already documented in "Using the Twisted Application Framework",
which will be published to the web site as soon as the version of
Twisted which includes this new ILogObserver API is released. The
document is hosted in SVN at doc/core/howto/application.xhtml.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
http://canonical.com/



From terry at jon.es  Fri Nov 21 11:04:42 2008
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Nov 2008 19:04:42 +0100
Subject: [Twisted-Python] A kinder and more consistent defer.inlineCallbacks
Message-ID: <18726.63546.421944.685251@jon.es>

Here's a suggestion for making inlineCallbacks more consistent and less
confusing.  Let's suppose you're writing something like this:

    @inlineCallbacks
    def func():
        ....

    result = func()

There are 2 things that could be better, IMO:

1. func may not yield. In that case, you either get an AttributeError when
inlineCallbacks tries to send(). Or worse, the call to send might actually
work, and do who knows what. I.e., func() could return an object with a
send method but which is not a generator. For some fun, run some code that
calls the following decorated function (see if you can figure out what will
happen before you do):

    @defer.inlineCallbacks
    def f():
        class yes():
            def send(x, y):
                print 'yes'
                # accidentally_destroy_the_universe_too()
        return yes()

2. func might raise before it get to its first yield. In that case you'll
get an exception thrown when the inlineCallbacks decorator tries to create
the wrapper function:

    File "/usr/lib/python2.5/site-packages/twisted/internet/defer.py", line 813, in unwindGenerator
      return _inlineCallbacks(None, f(*args, **kwargs), Deferred())


There's a simple and consistent way to handle both of these. Just have
inlineCallbacks do some initial work based on what it has been passed:

    def altInlineCallbacks(f):
        def unwindGenerator(*args, **kwargs):
            deferred = defer.Deferred()
            try:
                result = f(*args, **kwargs)
            except Exception, e:
                deferred.errback(e)
                return deferred
            if isinstance(result, types.GeneratorType):
                return defer._inlineCallbacks(None, result, deferred)
            deferred.callback(result)
            return deferred

        return mergeFunctionMetadata(f, unwindGenerator)

This has the advantage that (barring e.g., a KeyboardInterrupt in the
middle of things) you'll *always* get a deferred back when you call an
inlineCallbacks decorated function. That deferred might have already called
or erred back (corresponding to cases 1 and 2 above).

I'm going to use this version of inlineCallbacks in my code.  There's a
case for it making it into Twisted itself: inlinecallbacks is already
cryptic enough in its operation that anything we can do to make its
operation more uniform and less surprising, the better.

You might think that case 1 rarely comes up. But I've hit it a few times,
usually when commenting out sections of code for testing. If you
accidentally comment out the last yield in func, it no longer returns a
generator and that causes a different error.

And case 2 happens to me too. Having inlinecallbacks try/except the call to
func is nicer because it means I don't have to be quite so defensive in
coding. So instead of me having to write

    try:
        d = func()
    except Exception:
        # ???

and try to figure out what happened if an exception fired, I can just write
d = func() and add errbacks as I please (they then have to figure out what
happened).  The (slight?) disadvantage to my suggestion is that with the
above try/except fragment you can tell if the call to func() raised before
ever yielding. You can detect that, if you need to, with my approach if
you're not offended by looking at d.called immediately after calling func.

The alternate approach also helps if you're a novice, or simply being
lazy/careless/forgetful, and writing:

    d = func()
    d.addCallback(ok)
    d.addErrback(not_ok)

thinking you have your ass covered, but you actually don't (due to case 2).

There's some test code attached that illustrates all this.

Terry

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: altInlineCallbacks.py
URL: </pipermail/twisted-python/attachments/20081121/ab91d7f8/attachment.ksh>

From itamar at itamarst.org  Fri Nov 21 11:20:59 2008
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 21 Nov 2008 13:20:59 -0500
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
Message-ID: <1227291659.16031.110.camel@pintsize>

On Thu, 2008-11-20 at 17:00 -0700, Jack Moffitt wrote:
> I would like to propose that #3463
> (http://twistedmatrix.com/trac/ticket/3463) be additionally committed
> to the 8.1 branch and any other branches that still get point
> releases.  It is a pretty critical workaround which fixes the fact
> that recent OpenSSL libraries cannot connect to Java based services.

Why not request relevant distros to do an openssl bugfix and backport?
It'd help more people than just twisted users.




From drew.smathers at gmail.com  Fri Nov 21 12:20:33 2008
From: drew.smathers at gmail.com (Drew Smathers)
Date: Fri, 21 Nov 2008 14:20:33 -0500
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: <18726.63546.421944.685251@jon.es>
References: <18726.63546.421944.685251@jon.es>
Message-ID: <368574aa0811211120l32b2df66j8031199aa17f7850@mail.gmail.com>

On Fri, Nov 21, 2008 at 1:04 PM, Terry Jones <terry at jon.es> wrote:
> Here's a suggestion for making inlineCallbacks more consistent and less
> confusing.  Let's suppose you're writing something like this:
>
>    @inlineCallbacks
>    def func():
>        ....
>
>    result = func()
>
> There are 2 things that could be better, IMO:
>
> 1. func may not yield. In that case, you either get an AttributeError when
> inlineCallbacks tries to send(). Or worse, the call to send might actually
> work, and do who knows what. I.e., func() could return an object with a
> send method but which is not a generator. For some fun, run some code that
> calls the following decorated function (see if you can figure out what will
> happen before you do):
>
>    @defer.inlineCallbacks
>    def f():
>        class yes():
>            def send(x, y):
>                print 'yes'
>                # accidentally_destroy_the_universe_too()
>        return yes()
>

Why not just return a Deferred from the function and not decorate it.
Or document the function as returning a value if it doesn't block.

> 2. func might raise before it get to its first yield. In that case you'll
> get an exception thrown when the inlineCallbacks decorator tries to create
> the wrapper function:
>
>    File "/usr/lib/python2.5/site-packages/twisted/internet/defer.py", line 813, in unwindGenerator
>      return _inlineCallbacks(None, f(*args, **kwargs), Deferred())
>
>
> There's a simple and consistent way to handle both of these. Just have
> inlineCallbacks do some initial work based on what it has been passed:
>
>    def altInlineCallbacks(f):
>        def unwindGenerator(*args, **kwargs):
>            deferred = defer.Deferred()
>            try:
>                result = f(*args, **kwargs)
>            except Exception, e:
>                deferred.errback(e)
>                return deferred
>            if isinstance(result, types.GeneratorType):
>                return defer._inlineCallbacks(None, result, deferred)
>            deferred.callback(result)
>            return deferred
>
>        return mergeFunctionMetadata(f, unwindGenerator)

Essentially this is equivalent to _not_ decorating your function and
returning a Deferred via defer.succeed(value) or defer.fail(error).
I'm still not sure why it's necessary to stitch this kind of behavior
into inlineCallbacks().  From my perspective inlineCallbacks() simply
equates: "I want to do more than one asynchronous operation inline and
here's some syntactic sugar using yield as an expression."

>
> This has the advantage that (barring e.g., a KeyboardInterrupt in the
> middle of things) you'll *always* get a deferred back when you call an
> inlineCallbacks decorated function. That deferred might have already called
> or erred back (corresponding to cases 1 and 2 above).
>

You will always get a Deferred  back if the function is a generator.

> I'm going to use this version of inlineCallbacks in my code.  There's a
> case for it making it into Twisted itself: inlinecallbacks is already
> cryptic enough in its operation that anything we can do to make its
> operation more uniform and less surprising, the better.
>
> You might think that case 1 rarely comes up. But I've hit it a few times,
> usually when commenting out sections of code for testing. If you
> accidentally comment out the last yield in func, it no longer returns a
> generator and that causes a different error.

That's what unit tests are for :)  But I'm not sure how you could
easily wind up in this scenario considering generators don't allow
return with an argument.

Drew



From twisted at ralphm.ik.nu  Fri Nov 21 13:00:44 2008
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Fri, 21 Nov 2008 21:00:44 +0100
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <1227291659.16031.110.camel@pintsize>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize>
Message-ID: <20081121200044.GA3342@ik.nu>

On Fri, Nov 21, 2008 at 01:20:59PM -0500, Itamar Shtull-Trauring wrote:
> On Thu, 2008-11-20 at 17:00 -0700, Jack Moffitt wrote:
> > I would like to propose that #3463
> > (http://twistedmatrix.com/trac/ticket/3463) be additionally committed
> > to the 8.1 branch and any other branches that still get point
> > releases.  It is a pretty critical workaround which fixes the fact
> > that recent OpenSSL libraries cannot connect to Java based services.
> 
> Why not request relevant distros to do an openssl bugfix and backport?
> It'd help more people than just twisted users.

Because it is actually a bug in Java, not in OpenSSL. It is just that
recent OpenSSL versions enable a feature (Session Tickets) that is
standards-wise backwards compatible.  Arguably, distributions could
choose to not enable the feature by default, but that doesn't have my
preference.

This change adds a option to choose if the feature is used, and disables
it by default because there is no further support in our SSL code for
it and it immediately helps fix a problem that I don't think will be
resolved server-side any time soon.

-- 
Groetjes,

ralphm



From terry at jon.es  Fri Nov 21 14:17:23 2008
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Nov 2008 22:17:23 +0100
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: Your message at 14:20:33 on Friday, 21 November 2008
References: <18726.63546.421944.685251@jon.es>
	<368574aa0811211120l32b2df66j8031199aa17f7850@mail.gmail.com>
Message-ID: <18727.9571.946049.640024@jon.es>

>>>>> "Drew" == Drew Smathers <drew.smathers at gmail.com> writes:
Drew> On Fri, Nov 21, 2008 at 1:04 PM, Terry Jones <terry at jon.es> wrote:

Drew> Why not just return a Deferred from the function and not decorate it.
Drew> Or document the function as returning a value if it doesn't block.

In that case (1) I'm considering what happens if you take the last yield
out of a function decorated with inlineCallbacks. You might do it via
commenting something out for testing, or you might do it just as a matter
of course in changing the behavior of the function.

If you do either of those, inlineCallbacks will raise an exception. With
the suggestion I sent, it will just run as expected: the original function
will be called, and you'll get the value it returns back as the result of
the returned deferred.

Drew> Essentially this is equivalent to _not_ decorating your function and
Drew> returning a Deferred via defer.succeed(value) or defer.fail(error).
Drew> I'm still not sure why it's necessary to stitch this kind of behavior
Drew> into inlineCallbacks().

It's not necessary, it just makes inlineCallbacks gracefully cover two
cases that it currently throws exceptions on, and it makes inlineCallbacks
always return a deferred, which is arguably also an advantage.

Drew> From my perspective inlineCallbacks() simply equates: "I want to do
Drew> more than one asynchronous operation inline and here's some syntactic
Drew> sugar using yield as an expression."

Right. I'm just making what's happening underneath a little more forgiving
and consistent in these two edge cases where things go awry.

The main point, to me, is that code changes over time. So you write a
function and use inlineCallbacks decorator for syntactic sugar. Then you,
or someone else, comes along a while later and change a few things. If you
take out the last yield without noticing, or your change throws an
exception before the first yield, then you've broken things and it may not
be clear why. In the first case, you get an exception thrown from deep
inside inlineCallbacks, and many/most people would have some trouble
figuring out what's going on. There's no need for that though.

>> This has the advantage that (barring e.g., a KeyboardInterrupt in the
>> middle of things) you'll *always* get a deferred back when you call an
>> inlineCallbacks decorated function. That deferred might have already
>> called or erred back (corresponding to cases 1 and 2 above).

Drew> You will always get a Deferred  back if the function is a generator.

But if you take out the last deferred, it's no longer a generator. And if
an exception happens before the first yield you don't get a deferred back
because the exception is raised before the inlineCallbacks created function
gets its first value from your generator.

They're just two simple scenarios that can be dealt with more cleanly.  If
it wasn't clear, the inlineCallbacks created function is identical. Your
code is still run identically. There's just a little pre-processing to see
if it even needs to be run.

Drew> That's what unit tests are for :) But I'm not sure how you could
Drew> easily wind up in this scenario considering generators don't allow
Drew> return with an argument.

Right. But a function can just fall off the end, implicitly returning
None.

And I gave two examples, plus simple code, that illustrates how both of the
problems I'm addressing can arise. It's not about having return in a
function. One part is about turning a generator into a non-generator by
removing the final yield. The other's just about introducing an exception
into your code. I've run into both situations, more than once, and in both
had the reaction that inlineCallbacks could have been more accomodating or
helpful in how it behaves.

Fortunately I can just use my own version!  :-)

Sorry if I wasn't being clear enough first time round.

Regards,
Terry



From terry at jon.es  Fri Nov 21 14:32:24 2008
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Nov 2008 22:32:24 +0100
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: Your message at 14:20:33 on Friday, 21 November 2008
References: <18726.63546.421944.685251@jon.es>
	<368574aa0811211120l32b2df66j8031199aa17f7850@mail.gmail.com>
Message-ID: <18727.10472.165444.631503@jon.es>

Here's another way of looking at what I proposed.

When you call a function, you can divide what happens into 3 possibilities:

 1) An exception is raised
 2) You get back a generator
 3) You get back something else

(Yes, I'm ignoring aborts, sys.exit, etc).


As it stands, all three of these are handled inside _inlineCallbacks (not
in inlineCallbacks). With the code I suggested, the call to f is made
before _inlineCallbacks is called. Only in case 2, where we actually have a
generator, do we ask _inlineCallbacks to deal with unwinding it. In case 1
we pass the exception back via a deferred errback with a failure and in
case 2 we pass the result back in a deferred whose callback is already
called.  There's a good case (perhaps a stronger one) for just letting the
Exception go on its merry way and raise back in the calling code. But it's
hard to argue that knowing that we don't even have a generator result that
passing it on to _inlineCallbacks in the knowledge that it's going to
cryptically raise is better than just returning the result of the user's
function, especially seeing as it has just successfully run to completion!

Terry



From glyph at divmod.com  Fri Nov 21 19:57:41 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 22 Nov 2008 02:57:41 -0000
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081121200044.GA3342@ik.nu>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
Message-ID: <20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>

On 21 Nov, 08:00 pm, twisted at ralphm.ik.nu wrote:
>On Fri, Nov 21, 2008 at 01:20:59PM -0500, Itamar Shtull-Trauring wrote:
>>On Thu, 2008-11-20 at 17:00 -0700, Jack Moffitt wrote:
>> > I would like to propose that #3463
>> > (http://twistedmatrix.com/trac/ticket/3463) be additionally 
>>committed
>> > to the 8.1 branch and any other branches that still get point
>> > releases.  It is a pretty critical workaround which fixes the fact
>> > that recent OpenSSL libraries cannot connect to Java based services.
>>
>>Why not request relevant distros to do an openssl bugfix and backport?
>>It'd help more people than just twisted users.
>
>Because it is actually a bug in Java, not in OpenSSL. It is just that
>recent OpenSSL versions enable a feature (Session Tickets) that is
>standards-wise backwards compatible.  Arguably, distributions could
>choose to not enable the feature by default, but that doesn't have my
>preference.
>
>This change adds a option to choose if the feature is used, and 
>disables
>it by default because there is no further support in our SSL code for
>it and it immediately helps fix a problem that I don't think will be
>resolved server-side any time soon.

If the "fix" for Twisted is to just disable this feature by default, 
then it should remain disabled by default for everybody.  Including it 
in the build so that people who want it can enable it is fine, but 
leaving it on by default for other libraries besides Twisted seems 
wrong.

In other words, this really has nothing to do with Twisted, and 
everything to do with the fact that Debian should not be screwing around 
with OpenSSL.  Have they already forgotten what happened last time?



From glyph at divmod.com  Fri Nov 21 20:18:06 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 22 Nov 2008 03:18:06 -0000
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: <18726.63546.421944.685251@jon.es>
References: <18726.63546.421944.685251@jon.es>
Message-ID: <20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>


On 21 Nov, 06:04 pm, terry at jon.es wrote:
>Here's a suggestion for making inlineCallbacks more consistent and less
>confusing.  Let's suppose you're writing something like this:

Let's put this a bit less vaguely: inlineCallbacks appears to have a 
bug: 'raise' before 'yield' in a generator results in a synchronous 
exception rather than an errback, although its documentation does not 
explain this.

inlineCallbacks is also unhelpful in debugging a particular type of 
error - it doesn't tell you what happened if you unintentionally 
returned something other than a generator, it just blows up without your 
code on the stack, and no mention of your code in the error message.

These are definitely interesting problems.  I think there should 
probably be a ticket for each one.  I don't like your solution, though.
>1. func may not yield. In that case, you either get an AttributeError 
>when
>inlineCallbacks tries to send().

Following you so far.
>Or worse, the call to send might actually
>work, and do who knows what. I.e., func() could return an object with a
>send method but which is not a generator.

Now I'm not sure what you're talking about.  Do you have a lot of very 
dangerous objects lying around with methods called 'send'?  ;-)

This is an important behavior which should continue to be supported.  If 
we don't, then users will get surprising behavior if they try to mix 
inlineCallbacks with other decorators that modify generators.  A 
"generator-like" object (iterable with 'send') should be good enough.
>For some fun, run some code that
>calls the following decorated function

In this particular case, there may be a third ticket to file, i.e. to 
refuse to accept objects that implement __call__ and send but not 
__iter__ and next; however, this infinite loop seems really, really 
obscure.  Have you actually hit it in real life?
>2. func might raise before it get to its first yield. In that case 
>you'll
>get an exception thrown when the inlineCallbacks decorator tries to 
>create
>the wrapper function:

Definitely problematic.  Code expecting to handle errors with an errback 
should not need to have an except: block as well.
>There's a simple and consistent way to handle both of these. Just have
>inlineCallbacks do some initial work based on what it has been passed:

isinstance() is bad for the reasons I mentioned above.
>This has the advantage that (barring e.g., a KeyboardInterrupt in the
>middle of things) you'll *always* get a deferred back when you call an
>inlineCallbacks decorated function. That deferred might have already 
>called
>or erred back (corresponding to cases 1 and 2 above).

This property, however, I definitely think is a desirable one.
>And case 2 happens to me too. Having inlinecallbacks try/except the 
>call to
>func is nicer because it means I don't have to be quite so defensive in
>coding. So instead of me having to write
>
>    try:
>        d = func()
>    except Exception:
>        # ???

IMHO the most important thing discussed here.  Not quite sure how to do 
this change in a compatible way; some people might be depending on this 
weird behavior.  @inlineCallbacks2?  @inlineCallbacks(beGood=YES)? 
Suggestions are appreciated.



From glyph at divmod.com  Fri Nov 21 20:27:52 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 22 Nov 2008 03:27:52 -0000
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: <20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>
References: <18726.63546.421944.685251@jon.es>
	<20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>
Message-ID: <20081122032752.12555.1107286101.divmod.xquotient.272@weber.divmod.com>

On 03:18 am, glyph at divmod.com wrote:
>
>On 21 Nov, 06:04 pm, terry at jon.es wrote:
>>Here's a suggestion for making inlineCallbacks more consistent and 
>>less
>>confusing.  Let's suppose you're writing something like this:
>
>inlineCallbacks appears to have a bug: 'raise' before 'yield' in a 
>generator results in a synchronous exception rather than an errback, 
>although its documentation does not explain this.

Ugh, scratch that.  No, it doesn't have this bug.  When I read this:
>>2. func might raise before it get to its first yield. In that case 
>>you'll
>>get an exception thrown when the inlineCallbacks decorator tries to 
>>create
>>the wrapper function:

I did some quick testing and saw some tracebacks, but apparently wasn't 
paying very close attention to them; they were unhandled-traceback-in- 
deferred tracebacks, and they *did* have the application code in 
question on the stack.  Run this and observe:

    from twisted.internet.defer import succeed, inlineCallbacks, 
returnValue
    @inlineCallbacks
    def f():
        result = 1 / 0
        yield returnValue(succeed(result))
    print f().addErrback(lambda err: err.trap(ZeroDivisionError) and 2)

If func "raises before it gets to its first yield", we get the right 
behavior.  If it just raises and doesn't yield *anywhere*, then it's not 
a generator and that's the same as your other case of accidentally-not- 
returning-a-generator.  Still worth debugging, but not as serious.



From mithrandi at mithrandi.net  Sat Nov 22 02:05:00 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 22 Nov 2008 11:05:00 +0200
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
Message-ID: <20081122090500.GC30443@mithrandi.net>

* glyph at divmod.com <glyph at divmod.com> [2008-11-22 02:57:41 -0000]:

> In other words, this really has nothing to do with Twisted, and  
> everything to do with the fact that Debian should not be screwing around  
> with OpenSSL.  Have they already forgotten what happened last time?

Isn't this an upstream change?

> OpenSSL CHANGES
> _______________
>
>  Changes between 0.9.8e and 0.9.8f  [11 Oct 2007]
[...]
>   *) Add RFC4507 support to OpenSSL. This includes the corrections in
>      RFC4507bis. The encrypted ticket format is an encrypted encoded
>      SSL_SESSION structure, that way new session features are automatically
>      supported.
> 
>      If a client application caches session in an SSL_SESSION structure
>      support is transparent because tickets are now stored in the encoded
>      SSL_SESSION.
> 
>      The SSL_CTX structure automatically generates keys for ticket
>      protection in servers so again support should be possible
>      with no application modification.
> 
>      If a client or server wishes to disable RFC4507 support then the option
>      SSL_OP_NO_TICKET can be set.
> 
>      Add a TLS extension debugging callback to allow the contents of any client
>      or server extensions to be examined.
> 
>      This work was sponsored by Google.
>      [Steve Henson]

I'll admit to lack of familiarity with OpenSSL, and this functionality
in particular, so maybe I'm just confused.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20081122/e9e8bd20/attachment.sig>

From therve at free.fr  Sat Nov 22 08:06:47 2008
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Sat, 22 Nov 2008 16:06:47 +0100
Subject: [Twisted-Python] Libevent bindings and reactor
Message-ID: <1227366407.6411.19.camel@brainwave>

Hi all!

I've been working on a Libevent reactor for quite a long time now:
http://twistedmatrix.com/trac/ticket/1930 (sheesh, 2 years). For
different reasons I didn't manage (yet) to include something within
Twisted itself, so I (re)started an external project to do it.

For those who don't know libevent, it's an abstraction layer around
select/poll/epoll/... to write portable applications. See
http://www.monkey.org/~provos/libevent/.

I thought it'll be easier for people who just want to use the libevent
bindings to have an external project, and it's also a way to make people
test it and get some feedback, without having to checkout a SVN branch.

The project is now accessible on launchpad:
https://launchpad.net/python-libevent (original project is recorded
there: http://pypi.python.org/pypi/libevent-python). The latest version,
0.3, includes a libevent reactor, and a twisted plugins so that it's
easily usable with trial and twistd (just pass -r libevent to both once
installed).

Note that these bindings only work with a recent enough version of
Libevent itself (1.4). My PPA (https://launchpad.net/~therve/+archive)
should help users of Hardy (although for some reasons the twisted plugin
doesn't install correctly).

Thanks for any comment/feedback.

-- 
Thomas




From terry at jon.es  Sat Nov 22 10:50:11 2008
From: terry at jon.es (Terry Jones)
Date: Sat, 22 Nov 2008 18:50:11 +0100
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: Your message at 03:27:52 on Saturday, 22 November 2008
References: <18726.63546.421944.685251@jon.es>
	<20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>
	<20081122032752.12555.1107286101.divmod.xquotient.272@weber.divmod.com>
Message-ID: <18728.18003.274698.614115@jon.es>

Hi Glyph

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:

>> inlineCallbacks appears to have a bug: 'raise' before 'yield' in a
>> generator results in a synchronous exception rather than an errback,
>> although its documentation does not explain this.

glyph> Ugh, scratch that.  No, it doesn't have this bug.

Yes, you're right.

glyph> I did some quick testing and saw some tracebacks, but apparently
glyph> wasn't paying very close attention to them

Nor was I, sorry!

glyph> If func "raises before it gets to its first yield", we get the right
glyph> behavior.  If it just raises and doesn't yield *anywhere*, then it's
glyph> not a generator and that's the same as your other case of
glyph> accidentally-not- returning-a-generator.  Still worth debugging, but
glyph> not as serious.

Agreed.  I also agree with your earlier remarks about dropping the
isinstance(result, GeneratorType). That leaves me with an alternative:

    def altInlineCallbacks(f):
        def unwindGenerator(*args, **kwargs):
            try:
                result = f(*args, **kwargs)
            except Exception, e:
                # f was not a generator.
                return failure.Failure()
            return _inlineCallbacks(None, result, Deferred())
        return mergeFunctionMetadata(f, unwindGenerator)

and still the problem that _inlineCallbacks raises if result doesn't have a
send() method, etc. I'm also not sure of the best way to check for that,
but don't think it should be in the _inlineCallbacks loop.

---

BTW, there is a coding lesson here (at least for me):

The reason I started to think there was a problem with Exceptions,
tracebacks and _inlineCallbacks was from running code like this:

    @inlineCallbacks
    def f():
        try:
            # something
        except Exception:
            # clean up
            raise

When I ran it, the traceback of the Exception that propagated back to the
attached errback would (sometimes) show the exception as having being
triggered in _inlineCallbacks, like this:

    2008/11/22 17:29 +0200 [-]   File "/usr/lib/python2.5/site-packages/twisted/internet/defer.py", line 726, in _inlineCallbacks
    2008/11/22 17:29 +0200 [-]     result = g.send(result)

The problem, as I guess will be obvious, is that my raise was delivering
whatever sys.exc_info returned after the clean-up was done. In my case this
was confusing as although the clean-up code had succeeded, it had called
things that also made use of inlineCallbacks and the exception I was
finally raising, and whose traceback I was printing, was a StopIteration
raised inside *another* call of _inlineCallbacks! So it looked like
_inlineCallbacks was somehow raising instead of sending a failure back to
the errback...

Re-raising the original exception made everything make sense.

Thanks a lot for taking a look.

Terry



From jack at chesspark.com  Sat Nov 22 11:02:01 2008
From: jack at chesspark.com (Jack Moffitt)
Date: Sat, 22 Nov 2008 11:02:01 -0700
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
Message-ID: <9b58f4550811221002o7b1c2ee0w619f53608735afe3@mail.gmail.com>

> In other words, this really has nothing to do with Twisted, and everything
> to do with the fact that Debian should not be screwing around with OpenSSL.
>  Have they already forgotten what happened last time?

Nothing to do with Twisted, yet this means that all my users attempt
to use my code will likely fail unless they recompile their distro's
openssl or upgrade to the next  version (if it gets fixed upstream in
a next verison).

This essentially makes my code useless to many, not to mention a pain
in the ass for myself.

You've already committed the fix to 8.2 and trunk.  All I'm asking is
for a bugfix release for 8.1 and possibily 8.0.  I don't understand
why we are arguing about whether the fix is correct when the question
is whether to backport it; it is already accepted and committed.

jack.



From bg at capitalmarketsp.com  Sat Nov 22 13:31:05 2008
From: bg at capitalmarketsp.com (Beau Gould)
Date: Sat, 22 Nov 2008 15:31:05 -0500
Subject: [Twisted-Python] [JOB] Sr. Backend Developer,
	Eugene or Portland | 60-90k
Message-ID: <545875B62E3E443A999DB9817A08D21F@EMACHINE>

Responsibilities: 
* Work in a team building scalable web applications 
* Use test-driven development practices to ensure code correctness 
* Document code, track and fix bugs, respond rapidly to emergencies in
production environment 
* Work with product group throughout development cycle to ensure quality
of end product 
* Networking protocols such as TCP, UDP, HTTP, DNS, NAT, etc 
* Clustering and load balancing solutions for redundancy, high
availability, scalability 
* Network programming (event-driven, asynchronous) 
* Experience analyzing large and complex systems for performance
bottlenecks 
* Python, AJAX, PHP, C/C++ 
* LAMP 
* Scalable MySQL schema designs 
* Jabber/XMPP 
* Twisted Python 
* Spread Toolkit 

Requirements for this position: 
* Bachelors in Computer Science or related work experience. Masters
degree is a plus 
* Ability to work on-site in Eugene, Oregon (preferred) or Portland,
Oregon 
* 5+ years experience developing large scale software systems (10K+
concurrent users) 

To be considered, please submit your resume along with your salary
requirements to bg @ capitalmarketsp.com 

Beau Gould 
Executive Advisor 
Capital Markets Placement 
www.cmp.jobs 
bg @ capitalmarketsp.com




From glyph at divmod.com  Sat Nov 22 20:18:46 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 23 Nov 2008 03:18:46 -0000
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <9b58f4550811221002o7b1c2ee0w619f53608735afe3@mail.gmail.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
	<9b58f4550811221002o7b1c2ee0w619f53608735afe3@mail.gmail.com>
Message-ID: <20081123031846.12555.871620718.divmod.xquotient.361@weber.divmod.com>


On 22 Nov, 06:02 pm, jack at chesspark.com wrote:
>>In other words, this really has nothing to do with Twisted, and 
>>everything
>>to do with the fact that Debian should not be screwing around with 
>>OpenSSL.
>>  Have they already forgotten what happened last time?
>
>Nothing to do with Twisted, yet this means that all my users attempt
>to use my code will likely fail unless they recompile their distro's
>openssl or upgrade to the next  version (if it gets fixed upstream in
>a next verison).

Sorry, you seem to have misunderstood me.  I'm not saying "let's not 
backport this fix".  I'm saying that backporting the fix is a band-aid; 
the real issue is in the openssl package.  Some effort should be devoted 
to fixing it there.

Also, you could apply an equally band-aid solution to your own code 
immediately.  It shouldn't interfere with the band-aid in Twisted.
>This essentially makes my code useless to many, not to mention a pain
>in the ass for myself.

You're not the only one.  The only reason that a zillion people haven't 
noticed this already is that pidgin uses nspr/nss to talk to gtalk, not 
openssl.
>You've already committed the fix to 8.2 and trunk.  All I'm asking is
>for a bugfix release for 8.1 and possibily 8.0.  I don't understand
>why we are arguing about whether the fix is correct when the question
>is whether to backport it; it is already accepted and committed.

As far as I'm concerned this is entirely up to the discretion of the 
release manager, Christopher Armstrong.  For my part I'm +0, unless 
doing a maintenance release will actually get Ubuntu to include the 
fixed 8.1 in an update, in which case I'm +1.

And again, I'm not against it, but I don't see the point of backporting 
to 8.0; who will have both twisted 8.0 and a system affected by this 
issue?



From glyph at divmod.com  Sat Nov 22 20:25:37 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 23 Nov 2008 03:25:37 -0000
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081122090500.GC30443@mithrandi.net>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
	<20081122090500.GC30443@mithrandi.net>
Message-ID: <20081123032537.12555.389456649.divmod.xquotient.375@weber.divmod.com>

On 22 Nov, 09:05 am, mithrandi at mithrandi.net wrote:
>* glyph at divmod.com <glyph at divmod.com> [2008-11-22 02:57:41 -0000]:
>>In other words, this really has nothing to do with Twisted, and
>>everything to do with the fact that Debian should not be screwing 
>>around
>>with OpenSSL.  Have they already forgotten what happened last time?
>
>Isn't this an upstream change?

Hrm.  I gleaned this from looking at some diffs to makefiles that were 
added to the debian package.  My understanding was that the feature was 
disabled by default, though.  Hardy, for example, already has a 'g' 
version of openssl as well, and the feature is not enabled there.

My understanding is that upstream added the feature, but left it 
disabled by default, then debian turned it on in their build 
configuration.
>>OpenSSL CHANGES
(...)
>>      This work was sponsored by Google.
>>      [Steve Henson]

That particular line was a little funny though.
>I'll admit to lack of familiarity with OpenSSL, and this functionality
>in particular, so maybe I'm just confused.

Equally possible that I'm confused, though.  I'm not 100% sure where the 
makefile that I'm loooking at diffs to came from.



From glyph at divmod.com  Sat Nov 22 20:40:46 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 23 Nov 2008 03:40:46 -0000
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: <18728.18003.274698.614115@jon.es>
References: <18726.63546.421944.685251@jon.es>
	<20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>
	<20081122032752.12555.1107286101.divmod.xquotient.272@weber.divmod.com>
	<18728.18003.274698.614115@jon.es>
Message-ID: <20081123034046.12555.221437023.divmod.xquotient.391@weber.divmod.com>

On 22 Nov, 05:50 pm, terry at jon.es wrote:
>Agreed.  I also agree with your earlier remarks about dropping the
>isinstance(result, GeneratorType). That leaves me with an alternative:
>
>    def altInlineCallbacks(f):
>        def unwindGenerator(*args, **kwargs):
>            try:
>                result = f(*args, **kwargs)
>            except Exception, e:
>                # f was not a generator.
>                return failure.Failure()
                        ^
I hope you mean "defer.fail()".
>and still the problem that _inlineCallbacks raises if result doesn't 
>have a
>send() method, etc. I'm also not sure of the best way to check for 
>that,
>but don't think it should be in the _inlineCallbacks loop.

As with the other case we mistakenly diagnosed here, it doesn't actually 
raise.  It returns a failed Deferred.  Consider:

    from twisted.internet.defer import inlineCallbacks
    @inlineCallbacks
    def notDeferred():
        return object()
    def ok(result):
        ae = result.trap(AttributeError)
        print 'OK', ae
    notDeferred().addErrback(ok)

The only thing that (potentially) needs to be done here is to produce a 
more useful error message.  The other case, where inlineCallbacks 
decorates a function that itself raises an exception rather than returns 
an object, is the only way you won't get a Deferred.



From mithrandi at mithrandi.net  Sat Nov 22 20:44:18 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 23 Nov 2008 05:44:18 +0200
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081123032537.12555.389456649.divmod.xquotient.375@weber.divmod.com>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
	<20081122090500.GC30443@mithrandi.net>
	<20081123032537.12555.389456649.divmod.xquotient.375@weber.divmod.com>
Message-ID: <20081123034417.GC27768@mithrandi.net>

* glyph at divmod.com <glyph at divmod.com> [2008-11-23 03:25:37 -0000]:

> My understanding is that upstream added the feature, but left it  
> disabled by default, then debian turned it on in their build  
> configuration.

I guess maybe this is the problem, then:

openssl (0.9.8g-7) unstable; urgency=low

  * Upload to unstable.

 -- Kurt Roeckx <kurt at roeckx.be>  Wed, 13 Feb 2008 22:22:29 +0000

[...]

openssl (0.9.8g-5) experimental; urgency=low

  * Enable tlsext.  This changes the ABI, but should hopefully
    not cause any problems. (Closes: #462596)

 -- Kurt Roeckx <kurt at roeckx.be>  Sat, 09 Feb 2008 13:32:49 +0100

#462596 is "openssl: Please include support for tls extensions / server
name indication", which provides this motivation:

Apache will probably start to support server name indication (SNI) in
one of the next 2.2.x releases. To use it,  TLS extension support needs
to be compiled into openssl. This has been added to openssl 0.9.8f but
is not activated by default.

>>> OpenSSL CHANGES
> (...)
>>>      This work was sponsored by Google.
>>>      [Steve Henson]
>
> That particular line was a little funny though.

Teehee :)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20081123/5c1a0278/attachment.sig>

From mithrandi at mithrandi.net  Sat Nov 22 20:53:03 2008
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 23 Nov 2008 05:53:03 +0200
Subject: [Twisted-Python] TLS broken with twisted.words.protocols.jabber
In-Reply-To: <20081123034417.GC27768@mithrandi.net>
References: <9b58f4550811201055qaca4835k20d18266c973c9ab@mail.gmail.com>
	<9b58f4550811201600t1c048250oe289b10d5ea632fc@mail.gmail.com>
	<1227291659.16031.110.camel@pintsize> <20081121200044.GA3342@ik.nu>
	<20081122025741.12555.111351870.divmod.xquotient.236@weber.divmod.com>
	<20081122090500.GC30443@mithrandi.net>
	<20081123032537.12555.389456649.divmod.xquotient.375@weber.divmod.com>
	<20081123034417.GC27768@mithrandi.net>
Message-ID: <20081123035303.GD27768@mithrandi.net>

* Tristan Seligmann <mithrandi at mithrandi.net> [2008-11-23 05:44:18 +0200]:

> I guess maybe this is the problem, then:

I also noticed this:

> openssl (0.9.8g-8) unstable; urgency=high
> 
>   * Don't add extentions to ssl v3 connections.  It breaks with some
>     other software.  (Closes: #471681)
> 
>  -- Kurt Roeckx <kurt at roeckx.be>  Sun, 23 Mar 2008 17:50:04 +0000
> 
> #471681
> libssl0.9.8: XChat cannot connect to irc.mozilla.org:6697
> 
> When libssl0.9.8 0.9.8g-7 is installed xchat 2.8.2-1 (custom build with
> a ping timeout patch) and 2.8.4-2 fail to
> connect to irc.mozilla.org/6697 using SSL with the following message:
> 
> * Connection failed. Error: (336151568) error:14094410:SSL
> * routines:SSL3_READ_BYTES:sslv3 alert handshake failure

[...]

> I can reproduce your problem.  It's the change between 0.9.8g-4 and 
> 0.9.8g-5 that causes the problem that we didn't expect to break
> anything.

Tee hee.

> [...]

> So it seems that openssl is sending something different while
> I can't see a reason why it should be sending something different.

I guess he figured it out in the end, though.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20081123/b998c837/attachment.sig>

From terry at jon.es  Sat Nov 22 20:58:54 2008
From: terry at jon.es (Terry Jones)
Date: Sun, 23 Nov 2008 04:58:54 +0100
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: Your message at 03:40:46 on Sunday, 23 November 2008
References: <18726.63546.421944.685251@jon.es>
	<20081122031806.12555.99781244.divmod.xquotient.260@weber.divmod.com>
	<20081122032752.12555.1107286101.divmod.xquotient.272@weber.divmod.com>
	<18728.18003.274698.614115@jon.es>
	<20081123034046.12555.221437023.divmod.xquotient.391@weber.divmod.com>
Message-ID: <18728.54526.64709.788597@jon.es>

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> On 22 Nov, 05:50 pm, terry at jon.es wrote:
>> def altInlineCallbacks(f):
>>   def unwindGenerator(*args, **kwargs):
>>     try:
>>       result = f(*args, **kwargs)
>>     except Exception, e:
>>       # f was not a generator.
>>       return failure.Failure()

glyph> I hope you mean "defer.fail()".

Yes, sorry.

glyph> As with the other case we mistakenly diagnosed here, it doesn't
glyph> actually raise.  It returns a failed Deferred.  Consider:

Yes, that was my original case, passing a non-generator and getting an
attribute error when _inlineCallbacks calls send. That one I knew goes back
via the Deferred.

glyph> The only thing that (potentially) needs to be done here is to
glyph> produce a more useful error message.

glyph> The other case, where inlineCallbacks decorates a function that
glyph> itself raises an exception rather than returns an object, is the
glyph> only way you won't get a Deferred.

That's what I was addressing in the code above. If you call the function in
unwindGenerator and you get an exception, you 1) know it's not a generator
(that's what I didn't understand earlier - calling a function with a yield
in it can never give you an exception, Python builds you a generator and
gives you that) and 2) can immediately give the exception back via
defer.fail (your correction above).  That's a simple change and makes sure
you always get a Deferred back.

Terry



From exarkun at twistedmatrix.com  Sat Nov 22 22:05:12 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 Nov 2008 05:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1227416712.45.1450190161@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081123/33fd93ab/attachment.html>

From nahueldefosse at yahoo.com.ar  Mon Nov 24 01:37:34 2008
From: nahueldefosse at yahoo.com.ar (Nahuel =?utf-8?q?Defoss=C3=A9?=)
Date: Mon, 24 Nov 2008 06:37:34 -0200
Subject: [Twisted-Python] Running a GUI application based on PyQt
Message-ID: <200811240637.34481.nahueldefosse@yahoo.com.ar>

Hi,
I'm trying to use a simple application based in twisted.internet.Protocol with 
PyQt4.
PyQt has its own way of dealing with events, I've tried to run the reactor in 
a thread, but it says it only can acquire SIGINT from the main thread :(
I've tried the code posted in qt4reactor.py but it doesn't work. It fails 
telling that a reactor's been already installed.
Is it possible to use PyQt4 (v.4.4) with twisted?

Thanks
Nahuel



From reza at getpeer.com  Mon Nov 24 02:38:29 2008
From: reza at getpeer.com (Reza Lotun)
Date: Mon, 24 Nov 2008 09:38:29 +0000
Subject: [Twisted-Python] Running a GUI application based on PyQt
In-Reply-To: <200811240637.34481.nahueldefosse@yahoo.com.ar>
References: <200811240637.34481.nahueldefosse@yahoo.com.ar>
Message-ID: <356e30830811240138u3588cf5dxfcea77e4450a14e8@mail.gmail.com>

On Mon, Nov 24, 2008 at 8:37 AM, Nahuel Defossé
<nahueldefosse at yahoo.com.ar>wrote:

> Hi,
> I'm trying to use a simple application based in twisted.internet.Protocol
> with
> PyQt4.
> PyQt has its own way of dealing with events, I've tried to run the reactor
> in
> a thread, but it says it only can acquire SIGINT from the main thread :(
>
>
Hi Nahuel,

I don't have any way of testing qt4reactor.py easily, but if you run your
reactor in a separate thread, make sure to instruct twisted not to install
its signal handlers with a:

reactor.run(installSignalHandlers=0)

Hope that helps,
Reza


-- 
Reza Lotun
Senior Software Engineer
GetPeer Limited
reza at getpeer.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081124/b9ce0620/attachment.html>

From itamar at itamarst.org  Mon Nov 24 06:28:18 2008
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Nov 2008 08:28:18 -0500
Subject: [Twisted-Python] Running a GUI application based on PyQt
In-Reply-To: <200811240637.34481.nahueldefosse@yahoo.com.ar>
References: <200811240637.34481.nahueldefosse@yahoo.com.ar>
Message-ID: <1227533298.16031.121.camel@pintsize>

On Mon, 2008-11-24 at 06:37 -0200, Nahuel Defossé wrote:
> I've tried the code posted in qt4reactor.py but it doesn't work. It fails 
> telling that a reactor's been already installed.
> Is it possible to use PyQt4 (v.4.4) with twisted?

Only import "twisted.internet.reactor" *after* you've installed
qt4reactor. Importing auto-installs reactor if one hasn't already been
installed.




From exarkun at divmod.com  Mon Nov 24 11:07:17 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 24 Nov 2008 13:07:17 -0500
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: <18728.54526.64709.788597@jon.es>
Message-ID: <20081124180717.20272.92083444.divmod.quotient.10383@ohm>

On Sun, 23 Nov 2008 04:58:54 +0100, Terry Jones <terry at jon.es> wrote:
> [snip]
>
>That's what I was addressing in the code above. If you call the function in
>unwindGenerator and you get an exception, you 1) know it's not a generator
>(that's what I didn't understand earlier - calling a function with a yield
>in it can never give you an exception, Python builds you a generator and
>gives you that)

Not quite:

  >>> def f():
  ...     yield None
  ... 
  >>> f(1, 2, 3)
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  TypeError: f() takes no arguments (3 given)
  >>> 

And unfortunately, there is essentially no way to differentiate this case
from a case where the call to `f´ succeeded but some code executed as a
result of that raised a `TypeError´.

See also <http://twistedmatrix.com/trac/ticket/2501>.

Jean-Paul



From asset at impactdamage.com  Mon Nov 24 17:19:59 2008
From: asset at impactdamage.com (asset)
Date: Mon, 24 Nov 2008 17:19:59 -0700
Subject: [Twisted-Python] Blocking reactor.connectSSL()
Message-ID: <db24c893d147434897b580c2bc1e90fd@maila5.webcontrolcenter.com>

Is there a workaround for reactor.connectSSL() blocking during the SSL handshake?

I dug around and found some indications that it could be a problem fixed in Python 2.6 and 3.0, but also that its something that is worked around in Twisted, but I havent been able to find any reference to the issue with Twisted specifically.

TKiel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081124/5888e61f/attachment.html>

From exarkun at divmod.com  Mon Nov 24 20:05:53 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 24 Nov 2008 22:05:53 -0500
Subject: [Twisted-Python] Blocking reactor.connectSSL()
In-Reply-To: <db24c893d147434897b580c2bc1e90fd@maila5.webcontrolcenter.com>
Message-ID: <20081125030553.20272.2107940106.divmod.quotient.10593@ohm>

On Mon, 24 Nov 2008 17:19:59 -0700, asset <asset at impactdamage.com> wrote:
>Is there a workaround for reactor.connectSSL() blocking during the SSL handshake?

It only blocks while it is performing the calculations for the crypto.  It
does not block on I/O during the crypto.  Generally, this isn't a problem.
If you have a large number of handshakes happening all the time and you
have another CPU, then you might get better resource utilization if you
offload the handshake crypto to the other processor, but you might also
get a win by using SSL sessions to reduce the connection setup overhead.

>
>I dug around and found some indications that it could be a problem fixed in Python 2.6 and 3.0, but also that its something that is worked around in Twisted, but I havent been able to find any reference to the issue with Twisted specifically.

I'm not sure what indications these would have been.  There are no significant
changes in Twisted's SSL support for Python 2.6 and Python 3.0 is not supported
by Twisted.

Jean-Paul



From adigeaydin at gmail.com  Tue Nov 25 03:41:46 2008
From: adigeaydin at gmail.com (=?ISO-8859-9?Q?Ayd=FDn_=DEEN?=)
Date: Tue, 25 Nov 2008 12:41:46 +0200
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
Message-ID: <2196d7e0811250241w1da57ddar9bf246eec74c1ced@mail.gmail.com>

Hi,
I am trying to send file which is in the client's disk, i am using
LineReceiver in the server side. I am sending and receiving data like login
stuff but when i start to read & send file LineReceiver method doesnt run in
the server side. Sending file code part is below, what can be cause of this?

* i am reading 100 kb parts of file and send it, is it best choice? or
reading file once and send it better?

   KB = 1024 * 100
   while True:

                    if (KB > file_size) | (KB == file_size):

                        data = self.file.read(file_size)
                        self.send_data(data)
                        self.sended += file_size
                        self.file.close()
                        break

                    else:
                            data = self.file.read(KB)
                            file_size -= KB
                            self.send_data(data)
                            self.sended += KB

def send_data(self, data):

   self.transport.write(data + '\r\n')
-- 
Aydın ŞEN

         Ege Üniversitesi
Uluslararası Bilgisayar Enstitüsü
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081125/acbd2a2b/attachment.html>

From exarkun at divmod.com  Tue Nov 25 07:17:52 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Nov 2008 09:17:52 -0500
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
In-Reply-To: <2196d7e0811250241w1da57ddar9bf246eec74c1ced@mail.gmail.com>
Message-ID: <20081125141752.20272.2066735657.divmod.quotient.10698@ohm>

On Tue, 25 Nov 2008 12:41:46 +0200, Aydın ŞEN <adigeaydin at gmail.com> wrote:
>Hi,
>I am trying to send file which is in the client's disk, i am using
>LineReceiver in the server side. I am sending and receiving data like login
>stuff but when i start to read & send file LineReceiver method doesnt run in
>the server side. Sending file code part is below, what can be cause of this?

File transfers are not best done using a line-oriented protocol.  Have a look
at the "Protocol Design" articles linked from <http://itamarst.org/>.

Jean-Paul



From amauryfa at gmail.com  Tue Nov 25 07:51:27 2008
From: amauryfa at gmail.com (Amaury Forgeot d'Arc)
Date: Tue, 25 Nov 2008 15:51:27 +0100
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
In-Reply-To: <20081125141752.20272.2066735657.divmod.quotient.10698@ohm>
References: <2196d7e0811250241w1da57ddar9bf246eec74c1ced@mail.gmail.com>
	<20081125141752.20272.2066735657.divmod.quotient.10698@ohm>
Message-ID: <e27efe130811250651r47ec8566pa1eea8936b86e967@mail.gmail.com>

Hello,

On Tue, Nov 25, 2008 at 15:17, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Tue, 25 Nov 2008 12:41:46 +0200, Aydın ŞEN <adigeaydin at gmail.com> wrote:
>>
>> Hi,
>> I am trying to send file which is in the client's disk, i am using
>> LineReceiver in the server side. I am sending and receiving data like
>> login
>> stuff but when i start to read & send file LineReceiver method doesnt run
>> in
>> the server side. Sending file code part is below, what can be cause of
>> this?

The LineReceiver implements a limit of MAX_LENGTH = 16384 bytes per "line".
When you send 100KB in a row, it calls it lineLengthExceeded() method
and loses its connection...

> File transfers are not best done using a line-oriented protocol.  Have a
> look
> at the "Protocol Design" articles linked from <http://itamarst.org/>.
>
> Jean-Paul

Indeed.

-- 
Amaury Forgeot d'Arc

From adigeaydin at gmail.com  Tue Nov 25 08:29:16 2008
From: adigeaydin at gmail.com (=?ISO-8859-9?Q?Ayd=FDn_=DEEN?=)
Date: Tue, 25 Nov 2008 17:29:16 +0200
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
In-Reply-To: <e27efe130811250651r47ec8566pa1eea8936b86e967@mail.gmail.com>
References: <2196d7e0811250241w1da57ddar9bf246eec74c1ced@mail.gmail.com>
	<20081125141752.20272.2066735657.divmod.quotient.10698@ohm>
	<e27efe130811250651r47ec8566pa1eea8936b86e967@mail.gmail.com>
Message-ID: <2196d7e0811250729r6bb36e85x8ea7fd8bed020fdc@mail.gmail.com>

Thank you very much..

if i send file per 1KB does it cause lack of performance?

25 Kasım 2008 Salı 16:51 tarihinde Amaury Forgeot d'Arc
<amauryfa at gmail.com>yazdı:

> Hello,
>
> On Tue, Nov 25, 2008 at 15:17, Jean-Paul Calderone <exarkun at divmod.com>
> wrote:
> > On Tue, 25 Nov 2008 12:41:46 +0200, Aydın ŞEN <adigeaydin at gmail.com>
> wrote:
> >>
> >> Hi,
> >> I am trying to send file which is in the client's disk, i am using
> >> LineReceiver in the server side. I am sending and receiving data like
> >> login
> >> stuff but when i start to read & send file LineReceiver method doesnt
> run
> >> in
> >> the server side. Sending file code part is below, what can be cause of
> >> this?
>
> The LineReceiver implements a limit of MAX_LENGTH = 16384 bytes per "line".
> When you send 100KB in a row, it calls it lineLengthExceeded() method
> and loses its connection...
>
> > File transfers are not best done using a line-oriented protocol.  Have a
> > look
> > at the "Protocol Design" articles linked from <http://itamarst.org/>.
> >
> > Jean-Paul
>
> Indeed.
>
> --
> Amaury Forgeot d'Arc
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Aydın ŞEN

         Ege Üniversitesi
Uluslararası Bilgisayar Enstitüsü
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081125/6470eed6/attachment.html>

From exarkun at divmod.com  Tue Nov 25 08:38:19 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Nov 2008 10:38:19 -0500
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
In-Reply-To: <2196d7e0811250729r6bb36e85x8ea7fd8bed020fdc@mail.gmail.com>
Message-ID: <20081125153819.20272.1384825410.divmod.quotient.10707@ohm>

On Tue, 25 Nov 2008 17:29:16 +0200, Aydın ŞEN <adigeaydin at gmail.com> wrote:
>Thank you very much..
>
>if i send file per 1KB does it cause lack of performance?
>

If you try to send a file like this, then any newlines it contains will
be lost.  Performance doesn't matter much if your results are wrong.  You
should not try to send a file with a line protocol.  Read the "Protocol
Design" articles linked from <http://itamarst.org/>.

Jean-Paul



From adigeaydin at gmail.com  Tue Nov 25 09:16:39 2008
From: adigeaydin at gmail.com (=?ISO-8859-9?Q?Ayd=FDn_=DEEN?=)
Date: Tue, 25 Nov 2008 18:16:39 +0200
Subject: [Twisted-Python] sending file but LineReceiver doesnt run
In-Reply-To: <20081125153819.20272.1384825410.divmod.quotient.10707@ohm>
References: <2196d7e0811250729r6bb36e85x8ea7fd8bed020fdc@mail.gmail.com>
	<20081125153819.20272.1384825410.divmod.quotient.10707@ohm>
Message-ID: <2196d7e0811250816s283055bfo7b61682e7967599e@mail.gmail.com>

> If you try to send a file like this, then any newlines it contains will
> be lost.


yeap, i got it what you mean..


>  Performance doesn't matter much if your results are wrong.  You
> should not try to send a file with a line protocol.  Read the "Protocol


reading..
thanks again

-- 
Aydın ŞEN

         Ege Üniversitesi
Uluslararası Bilgisayar Enstitüsü
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081125/1ed3e24f/attachment.html>

From waldemar.osuch at gmail.com  Tue Nov 25 10:16:47 2008
From: waldemar.osuch at gmail.com (Waldemar Osuch)
Date: Tue, 25 Nov 2008 17:16:47 +0000 (UTC)
Subject: [Twisted-Python] Re: Please test Twisted 8.2.0pre2 and tell me
	whether	it works
References: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
Message-ID: <loom.20081125T170334-268@post.gmane.org>

Christopher Armstrong <radix <at> twistedmatrix.com> writes:

> 
> The tarballs are at
> 
>     http://twistedmatrix.com/users/radix/8.2.0pre2/
> 
> If you want to test 8.2.0pre2 on Windows, Thomas Hervé may be able to
> build installers some time tomorrow.
> 

The Windows installer by Thomas assumes that Python is installed
in c:\Python25 and dumps the library into C:\Python25\lib\site-packages
regardless of where the actual Python installation is.









From drew.smathers at gmail.com  Tue Nov 25 11:16:30 2008
From: drew.smathers at gmail.com (Drew Smathers)
Date: Tue, 25 Nov 2008 13:16:30 -0500
Subject: [Twisted-Python] Please test Twisted 8.2.0pre2 and tell me
	whether it works
In-Reply-To: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
References: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
Message-ID: <368574aa0811251016o5d6513a4n322af9de665b3646@mail.gmail.com>

On Thu, Nov 20, 2008 at 8:11 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> I just uploaded 8.2.0pre2 tarballs, which include one bugfix since
> 8.2.0pre1 which was deemed important enough to be backported:
>
>  - TLS Session Tickets are now disabled by default, allowing connections to
>   certain servers which hang when an empty session ticket is received (like
>   GTalk) (#3463)
>
>
> The tarballs are at
>
>    http://twistedmatrix.com/users/radix/8.2.0pre2/
>
> If you want to test 8.2.0pre2 on Windows, Thomas Hervé may be able to
> build installers some time tomorrow.
>
>
> Please test it out - I haven't heard any results from the pre1 release
> yet. If you don't test it then 8.2.0 will be horrible, and it will be
> your fault. You know, I've heard some people are using Twisted to
> manage puppy incubators. Think of the puppies.
>
> http://www.ustream.tv/channel/shiba-inu-puppy-cam
>
>
>
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> http://canonical.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>

It works!

-Drew

From asset at impactdamage.com  Tue Nov 25 12:09:19 2008
From: asset at impactdamage.com (asset)
Date: Tue, 25 Nov 2008 12:09:19 -0700
Subject: [Twisted-Python] SSL Client Certificates?
Message-ID: <73a34888f8074470b53235338e53c8c6@maila5.webcontrolcenter.com>

Would I be right in assuming that the example echoserv_ssl.py and echoclient_ssl.py will only result in encryption from the client to server and not from the server back to the client?

Im referencing these examples specifically,
http://twistedmatrix.com/projects/core/documentation/examples/echoclient_ssl.py
http://twistedmatrix.com/projects/core/documentation/examples/echoclient_ssl.py

From what I know of SSL, the client connects to the server, and after the handshake it uses the cert to encrypt its communication to the server and the server uses the private key to decrypt it; but the server's traffic back to the client will not be encrypted without having to use a client certificate.

So my question is how wrong am I on this? And if needed, how do I setup a client certificate to succeed in two way encryption?

Thanks!

TKiel


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081125/f617cb66/attachment.html>

From exarkun at divmod.com  Tue Nov 25 12:24:43 2008
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 25 Nov 2008 14:24:43 -0500
Subject: [Twisted-Python] SSL Client Certificates?
In-Reply-To: <73a34888f8074470b53235338e53c8c6@maila5.webcontrolcenter.com>
Message-ID: <20081125192443.20272.974263597.divmod.quotient.10742@ohm>

On Tue, 25 Nov 2008 12:09:19 -0700, asset <asset at impactdamage.com> wrote:
>Would I be right in assuming that the example echoserv_ssl.py and echoclient_ssl.py will only result in encryption from the client to server and not from the server back to the client?
>
>Im referencing these examples specifically,
>http://twistedmatrix.com/projects/core/documentation/examples/echoclient_ssl.py
>http://twistedmatrix.com/projects/core/documentation/examples/echoclient_ssl.py
>
>From what I know of SSL, the client connects to the server, and after the handshake it uses the cert to encrypt its communication to the server and the server uses the private key to decrypt it; but the server's traffic back to the client will not be encrypted without having to use a client certificate.
>
>So my question is how wrong am I on this? And if needed, how do I setup a client certificate to succeed in two way encryption?

You are indeed mistaken.  The use or non-use of a certificate is orthogonal
to whether traffic is encrypted.  The primary purpose of the certificate is
identification of the endpoint.  Encryption can happen without a certificate
(it can also not happen, even with a certificate).

http://en.wikipedia.org/wiki/Transport_Layer_Security gives a reasonable
overview.

If you need identification in both directions, you can set up the server
to require a certificate using the same APIs you use to have a client
require one and you can use the same APIs on the client to use a certificate
as you use on the server to do that.

Jean-Paul



From nahueldefosse at yahoo.com.ar  Tue Nov 25 22:31:14 2008
From: nahueldefosse at yahoo.com.ar (Nahuel =?iso-8859-1?q?Defoss=E9?=)
Date: Wed, 26 Nov 2008 03:31:14 -0200
Subject: [Twisted-Python] Running a GUI application based on PyQt
In-Reply-To: <1227533298.16031.121.camel@pintsize>
References: <200811240637.34481.nahueldefosse@yahoo.com.ar>
	<1227533298.16031.121.camel@pintsize>
Message-ID: <200811260331.15035.nahueldefosse@yahoo.com.ar>


Thanks both quick and helpful responses!
I was messing with the order, but finally it worked, though I've just tested a 
very basic piece of code. The non-threading nature in a pyqt app sacres me a 
bit, but I hope it's temporal :)
Now it's time for me to merge the whole thing, sqlalchemy via sAsync, my 
protocol and the GUI.

Regards

El Monday 24 November 2008 11:28:18 Itamar Shtull-Trauring escribió:
> On Mon, 2008-11-24 at 06:37 -0200, Nahuel Defossé wrote:
> > I've tried the code posted in qt4reactor.py but it doesn't work. It fails
> > telling that a reactor's been already installed.
> > Is it possible to use PyQt4 (v.4.4) with twisted?
>
> Only import "twisted.internet.reactor" *after* you've installed
> qt4reactor. Importing auto-installs reactor if one hasn't already been
> installed.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From patrice.renaud at obs-nancay.fr  Wed Nov 26 00:59:54 2008
From: patrice.renaud at obs-nancay.fr (Patrice RENAUD)
Date: Wed, 26 Nov 2008 08:59:54 +0100
Subject: [Twisted-Python] Twisted on Windows: "Python does not appear to be
	installed"
Message-ID: <492D01FA.1010303@obs-nancay.fr>

Hi all,

Twisted does not install on my windows XP /python 2.6 computer.
Twisted installer says: "Python does not appear to be installed"

but python is really installed and runs well on my computer !

What is the solution ?

thanks

Patrice

-- 
Patrice RENAUD
Observatoire de Paris - Station de Radioastronomie de Nancay
Tel: 02 48 51 87 21	Fax: 02 48 51 83 18 
Email: Patrice.Renaud at obs-nancay.fr





From therve at free.fr  Wed Nov 26 01:31:38 2008
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Wed, 26 Nov 2008 09:31:38 +0100
Subject: [Twisted-Python] Re: Please test Twisted 8.2.0pre2 and tell me
	whether	it works
In-Reply-To: <loom.20081125T170334-268@post.gmane.org>
References: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
	<loom.20081125T170334-268@post.gmane.org>
Message-ID: <1227688298.6456.2.camel@brainwave>

Le mardi 25 novembre 2008 à 17:16 +0000, Waldemar Osuch a écrit :
> Christopher Armstrong <radix <at> twistedmatrix.com> writes:
> 
> > 
> > The tarballs are at
> > 
> >     http://twistedmatrix.com/users/radix/8.2.0pre2/
> > 
> > If you want to test 8.2.0pre2 on Windows, Thomas Hervé may be able to
> > build installers some time tomorrow.
> > 
> 
> The Windows installer by Thomas assumes that Python is installed
> in c:\Python25 and dumps the library into C:\Python25\lib\site-packages
> regardless of where the actual Python installation is.

Thanks for testing, I'll have a look at it and check what's the problem.
Theoritically it should check where Python installed using register
keys. Did it work with previous installers?

Could you open a bug report, with information about your system (Windows
version). 

Thanks,

-- 
Thomas




From tarjei at nu.no  Wed Nov 26 01:45:16 2008
From: tarjei at nu.no (tarjei)
Date: Wed, 26 Nov 2008 09:45:16 +0100
Subject: [Twisted-Python] Twisted on Windows: "Python does not appear
	to be	installed"
In-Reply-To: <492D01FA.1010303@obs-nancay.fr>
References: <492D01FA.1010303@obs-nancay.fr>
Message-ID: <492D0C9C.1010901@nu.no>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Patrice RENAUD wrote:
> Hi all,
> 
> Twisted does not install on my windows XP /python 2.6 computer.
> Twisted installer says: "Python does not appear to be installed"
> 
> but python is really installed and runs well on my computer !
> 
> What is the solution ?

Have you checked that python is in your path?

Regards,
Tarjei
> 
> thanks
> 
> Patrice
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFJLQycYVRKCnSvzfIRAjt2AJsF6Ftib9PG08RAypQKhLRIInQj0gCeNVzr
l0STWEG/vdkOogQgly00c6E=
=1Tiy
-----END PGP SIGNATURE-----



From terry at jon.es  Thu Nov 27 10:16:44 2008
From: terry at jon.es (Terry Jones)
Date: Thu, 27 Nov 2008 18:16:44 +0100
Subject: [Twisted-Python] What to do when a service fails to start, also,
	deferred and startService
Message-ID: <18734.54780.97710.644648@jon.es>

I've another of my pesky beginner questions. Note that this subject is
somewhat covered in the thread started by Matt Goodall in Jan 2006:

  http://twistedmatrix.com/pipermail/twisted-python/2006-January/012380.html


I imagine that it must be common that people write services that don't just
simply launch things listening on sockets, but instead need to do a couple
of things, one after another, in order to get going and to be ready to
provide their service (or multiservice).

If you do need to write something like that, it seems the chances are
pretty high you're going to be calling code somewhere along the way that
returns a deferred. And because the twisted/application/service.py code
that calls startService doesn't handle deferreds being returned, this
creates a real problem. At least as far as I understand things - which, as
usual, may not be very far.

If nothing goes wrong with the deferreds that startService is creating (via
whatever its calling), then you'll probably get away with things even
though your service will not really be up until after the deferreds fire,
which can be some time after the code calling startService gets its
deferred back (and ignores it).

But if something does go wrong, you've got a failure propagating its way
down a errback chain, eventually (unless an errback switches you back to
the callback chain) popping out the end and causing the reactor to issue an
Unhandled Error message. So you can't indicate that the service has failed
to start by throwing, because the exception is going to pop harmlessly out
the end of the deferred chain as a generic unhandled error and will not
cause Twisted to know that the service couldn't start.

This all feels quite ironic :-) Twisted leads you coyly into the dark and
powerful world of working with and heavily depending on Deferreds. But
then, right when you expect it to be there for you, covering your back, it
throws up its hands as if to say "What!!? You expect me to deal with you
returning a Deferred? You gotta be kidding, sucker."

I could follow Moof's approach (last poster in the above thread), but that
seems to just pass the problem on to a higher level, where something else
is calling startService (or something earlier) and so on up until we reach
the topmost point at which something is not allowing/expecting a deferred
to come back. Should I track down and subclass all these things?  That
would seem cruel and unusual punishment to the faithful Deferred user,
having to go in and subclass core classes because they don't deal with
Deferreds.

I could do something dramatic, like call reactor.stop or sys.exit in my
errback chain, but those seem completely wrong. Apart from the (remote?)
possibility that something other than Twisted plugin code is trying to
start my service, it's also anachronistic because it will happen at some
unpredictable time after startService has gotten back (and ignored) the
deferred and Twisted has moved on (perhaps even to start other services).

Terry



From waldemar.osuch at gmail.com  Thu Nov 27 22:53:31 2008
From: waldemar.osuch at gmail.com (Waldemar Osuch)
Date: Fri, 28 Nov 2008 05:53:31 +0000 (UTC)
Subject: [Twisted-Python] Re: Please test Twisted 8.2.0pre2 and tell
	me	whether	it works
References: <60ed19d40811201711m5bdde763udcea946d796129e7@mail.gmail.com>
	<loom.20081125T170334-268@post.gmane.org>
	<1227688298.6456.2.camel@brainwave>
Message-ID: <loom.20081128T055024-729@post.gmane.org>

Thomas Hervé <therve <at> free.fr> writes:

> Thanks for testing, I'll have a look at it and check what's the problem.
> Theoritically it should check where Python installed using register
> keys. Did it work with previous installers?
> 
> Could you open a bug report, with information about your system (Windows
> version). 

Done in http://twistedmatrix.com/trac/ticket/3556
I just tried the 8.1 and it behaves the same way







From glyph at divmod.com  Fri Nov 28 07:02:17 2008
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 28 Nov 2008 14:02:17 -0000
Subject: [Twisted-Python] What to do when a service fails to start, also, 
	deferred and startService
In-Reply-To: <18734.54780.97710.644648@jon.es>
References: <18734.54780.97710.644648@jon.es>
Message-ID: <20081128140217.12555.360367893.divmod.xquotient.628@weber.divmod.com>

On 27 Nov, 05:16 pm, terry at jon.es wrote:
>I imagine that it must be common that people write services that don't 
>just
>simply launch things listening on sockets, but instead need to do a 
>couple
>of things, one after another, in order to get going and to be ready to
>provide their service (or multiservice).

I can't speak to how common it is, but I don't do it and I've actually 
seen it fairly rarely; although I have heard people asking about it a 
number of times.

For me, baroque and elaborate start-up dances are a code smell. 
Services should be as independent as possible.  Of course, sometimes 
some kind of initialization conversation is unavoidable, but I do like 
to try to keep it as short as possible.
>If you do need to write something like that, it seems the chances are
>pretty high you're going to be calling code somewhere along the way 
>that
>returns a deferred. And because the twisted/application/service.py code
>that calls startService doesn't handle deferreds being returned, this
>creates a real problem. At least as far as I understand things - which, 
>as
>usual, may not be very far.

I think you're misunderstanding what a "service" is.  The word is, 
perhaps, a bit to lofty for its humble job.  A service is just an event 
notification mechanism that tells you when it's time to start up, and 
when it's time to shut down.

I can understand why it would be attractive to misunderstand in this 
way, though: IService doesn't do very much, you have requirements that 
it doesn't cover, and if it were the thing you understand it to be then 
it would cover those requirements.  I'm sure that would be nicer for you 
:).

This might seem a bit inconsistent, since stopService uses the return of 
a Deferred.  However, this is for a very specific reason, not a 
generalized error-handling case: you may need to prevent the *rest* of 
the system (specifically, the reactor) from completely shutting down 
until you've managed to cleanly shut down whatever you're trying to shut 
down on potentially remote systems.  startService has no such problem 
though; the service subsystem has told you "It's time to start up!" - 
its job is done, and the reactor isn't going away as part of service 
startup, so it's your responsibility as an application author to make 
sure your other dependencies are properly initialized.
>But if something does go wrong, you've got a failure propagating its 
>way
>down a errback chain, eventually (unless an errback switches you back 
>to
>the callback chain) popping out the end and causing the reactor to 
>issue an
>Unhandled Error message. So you can't indicate that the service has 
>failed
>to start by throwing, because the exception is going to pop harmlessly 
>out
>the end of the deferred chain as a generic unhandled error and will not
>cause Twisted to know that the service couldn't start.

The key question here is: indicate to whom?  If you want to indicate it 
to some other object, well, try:except: or addErrback and call a method 
on that object.  Nothing magic about it.

There is no general-purpose object in Twisted who would be interested in 
any and all kinds of failures.  Except, of course, the logging system, 
which, as you say, has already been told about this.
>This all feels quite ironic :-) Twisted leads you coyly into the dark 
>and
>powerful world of working with and heavily depending on Deferreds. But
>then, right when you expect it to be there for you, covering your back, 
>it
>throws up its hands as if to say "What!!? You expect me to deal with 
>you
>returning a Deferred? You gotta be kidding, sucker."

This begs the question, again, of what does it mean to "deal with" 
returning a Deferred?  Pause the service startup chain?  As exarkun 
noted in the thread you referenced, we *can't* stop and do that in 
privilegedStartService, so it would be a bit asymmetric to do so in 
startService.

In what way would you expect the service mechanism to "deal with" 
returning a Deferred?  Stop starting other services?  Print out some 
different log message?

The options I can come up with are generally undesirable.  Service order 
is somewhat arbitrary.  If you have a debugging service (like manhole) 
that happens to start up after your failed startup, then you won't be 
able to log in and inspect your failed-to-start service if it fails.  If 
you amend the log message in some way, chances are good that you will 
remove information (stack frames) that would be useful for debugging. 
These are equally good reasons not to pause the service startup chain in 
MultiService, too: one service should be able to inspect another to see 
why it's hung.
>I could follow Moof's approach (last poster in the above thread), but 
>that
>seems to just pass the problem on to a higher level, where something 
>else
>is calling startService (or something earlier) and so on up until we 
>reach
>the topmost point at which something is not allowing/expecting a 
>deferred
>to come back. Should I track down and subclass all these things?  That
>would seem cruel and unusual punishment to the faithful Deferred user,
>having to go in and subclass core classes because they don't deal with
>Deferreds.

Indeed.  This problem is left to a higher level because it is a higher 
level problem.  There is certainly a case to be made that the higher 
level should be somewhere in Twisted itself, but let's not complicate 
IService further.

IService is a very, very simple interface.  If you want to respond to 
failures from startService (deferred failures, exceptions, or whatever 
else) in a useful way, then you can write your own implementation of it 
which manages startup order, keeps track of dependencies, and maintains 
a state machine that handles stopService appropriately if called in mid- 
startup.

I don't think that having to implement an interface with 6 methods on it 
could be considered "cruel and unusual".  If you think so you may want 
to investigate options other than Twisted: you will frequently be 
expected to implement interfaces with methods on them ;-).

There's no need to "track down and subclass" lots of things.  Your 
IService wants the things that it contains to have a richer interface 
which allows for error handling, dependencies, and propagation, so 
simply write a single wrapper for simpler IService objects that expands 
the interface to do the other things that you're interested in.

This all strikes me as totally straightforward and easy, and I don't 
think I'm any kind of super-genius for being able to write a few Python 
classes that call a few simple start/stop methods in the order that I 
want them to run in :).
>I could do something dramatic, like call reactor.stop or sys.exit in my
>errback chain, but those seem completely wrong. Apart from the 
>(remote?)
>possibility that something other than Twisted plugin code is trying to
>start my service, it's also anachronistic because it will happen at 
>some
>unpredictable time after startService has gotten back (and ignored) the
>deferred and Twisted has moved on (perhaps even to start other 
>services).

Doing either of those things would definitely be wrong.  There's no 
reason to sys.exit or reactor.stop if your application can't start up, 
unless your management system specifically calls for such a thing.  In 
the future, even the Twisted plugin code might be starting some things 
in addition to your application.  As I mentioned above, a good reason to 
do that is to perform diagnostics on failed startups :).



From terry at jon.es  Fri Nov 28 07:00:37 2008
From: terry at jon.es (Terry Jones)
Date: Fri, 28 Nov 2008 15:00:37 +0100
Subject: [Twisted-Python] A kinder and more consistent
	defer.inlineCallbacks
In-Reply-To: Your message at 13:07:17 on Monday, 24 November 2008
References: <18728.54526.64709.788597@jon.es>
	<20081124180717.20272.92083444.divmod.quotient.10383@ohm>
Message-ID: <18735.63877.727580.952327@jon.es>

Hi JP

> Not quite:
> 
>   >>> def f():
>   ...     yield None
>   ... 
>   >>> f(1, 2, 3)
>   Traceback (most recent call last):
>     File "<stdin>", line 1, in <module>
>   TypeError: f() takes no arguments (3 given)
>   >>> 

Ah... thanks.

> And unfortunately, there is essentially no way to differentiate this case
> from a case where the call to `f´ succeeded but some code executed as a
> result of that raised a `TypeError´.

Right, not without looking at the text of the exception, which, apart from
being extremely would be unreliable. Too bad there's not a Python exception
for incorrect function/method arg passing.

> See also <http://twistedmatrix.com/trac/ticket/2501>.

Ha!  There's pretty much the whole of this thread in there. I'll look more
carefully in trac next time. I did look at some point, and saw another
issue discussing what to do if a non-deferred is yielded.

Thanks again.

Terry



From terry at jon.es  Fri Nov 28 08:38:33 2008
From: terry at jon.es (Terry Jones)
Date: Fri, 28 Nov 2008 16:38:33 +0100
Subject: [Twisted-Python] What to do when a service fails to start, also, 
	deferred and startService
In-Reply-To: Your message at 14:02:17 on Friday, 28 November 2008
References: <18734.54780.97710.644648@jon.es>
	<20081128140217.12555.360367893.divmod.xquotient.628@weber.divmod.com>
Message-ID: <18736.4217.759501.381840@jon.es>

Hi Glyph

Thanks for the detailed reply.

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> On 27 Nov, 05:16 pm, terry at jon.es wrote:

glyph> For me, baroque and elaborate start-up dances are a code smell.
glyph> Services should be as independent as possible.  Of course, sometimes
glyph> some kind of initialization conversation is unavoidable, but I do
glyph> like to try to keep it as short as possible.

I do too. Sometimes it takes (me at least) a few iterations before you see
how best to do that.

glyph> I think you're misunderstanding what a "service" is.  The word is,
glyph> perhaps, a bit to lofty for its humble job.  A service is just an
glyph> event notification mechanism that tells you when it's time to start
glyph> up, and when it's time to shut down.

glyph> I can understand why it would be attractive to misunderstand in this
glyph> way, though: IService doesn't do very much, you have requirements
glyph> that it doesn't cover, and if it were the thing you understand it to
glyph> be then it would cover those requirements.  I'm sure that would be
glyph> nicer for you :).

glyph> This might seem a bit inconsistent, since stopService uses the
glyph> return of a Deferred.  However, this is for a very specific reason,
glyph> not a generalized error-handling case: you may need to prevent the
glyph> *rest* of the system (specifically, the reactor) from completely
glyph> shutting down until you've managed to cleanly shut down whatever
glyph> you're trying to shut down on potentially remote systems.
glyph> startService has no such problem though; the service subsystem has
glyph> told you "It's time to start up!" - its job is done, and the reactor
glyph> isn't going away as part of service startup, so it's your
glyph> responsibility as an application author to make sure your other
glyph> dependencies are properly initialized.

OK, this is helpful - I have been looking at it from a different point of
view, as you've guessed.

>> But if something does go wrong, you've got a failure propagating its way
>> down a errback chain, eventually (unless an errback switches you back to
>> the callback chain) popping out the end and causing the reactor to issue
>> an Unhandled Error message. So you can't indicate that the service has
>> failed to start by throwing, because the exception is going to pop
>> harmlessly out the end of the deferred chain as a generic unhandled
>> error and will not cause Twisted to know that the service couldn't
>> start.

glyph> The key question here is: indicate to whom?  If you want to indicate
glyph> it to some other object, well, try:except: or addErrback and call a
glyph> method on that object.  Nothing magic about it.

I have code written as a Twisted plugin. So I have a class implementing
IServiceMaker and IPlugin, and I create an instance of that class which
gets found when I invoke twistd from the command line.

So in my case I want to indicate to twistd that the service that my class
creates a makeService method to create, but which I do not set in motion,
has failed to start and that twistd should exit, or do something other than
cheerfully tell me that there's been an Unhandled Error.

Does that make more sense? Sorry, I should have said I was using twistd.

glyph> In what way would you expect the service mechanism to "deal with"
glyph> returning a Deferred?  Stop starting other services?  Print out some
glyph> different log message?

I'm not sure what should happen. I'm sitting at the command line, I've
asked twistd to start something for me, there's clearly been a problem
doing so (and this doesn't have to be baroque, maybe I just couldn't listen
on a specific port I wanted, or maybe my code somehow raised an Exception),
but I don't seem to have a mechanism for having twistd take any notice at
all.

I'm just talking about the case where startService calls something that
returns a deferred and there's an Exception that comes back down the
Deferred chain as a failure. I suppose if startService raises an Exception
itself directly, something else happens - maybe twistd exits.

glyph> IService is a very, very simple interface.  If you want to respond
glyph> to failures from startService (deferred failures, exceptions, or
glyph> whatever else) in a useful way, then you can write your own
glyph> implementation of it which manages startup order, keeps track of
glyph> dependencies, and maintains a state machine that handles stopService
glyph> appropriately if called in mid- startup.

glyph> I don't think that having to implement an interface with 6 methods
glyph> on it could be considered "cruel and unusual".  If you think so you
glyph> may want to investigate options other than Twisted: you will
glyph> frequently be expected to implement interfaces with methods on them
glyph> ;-).

:-)

glyph> There's no need to "track down and subclass" lots of things.  Your
glyph> IService wants the things that it contains to have a richer
glyph> interface which allows for error handling, dependencies, and
glyph> propagation, so simply write a single wrapper for simpler IService
glyph> objects that expands the interface to do the other things that
glyph> you're interested in.

In the case of a service being started by twistd, it doesn't seem as simple
as you describe, but maybe that's my lack of understanding again. I can
easily subclass IService, but something else is calling the startService
method of that subclass. And that thing, whatever it is, is not expecting
me to return a deferred. So if my startService has for some reason got its
hands on a deferred, it can't simply hand it back to its caller and have
something (twistd in my case) see that an error occurred.

It does feel like I have to track down what this something else might
be. Either working from my IServiceMaker implementation or working from
/usr/bin/twistd to find where startService is not trivial (you guys wrote
it, I'm sure the logic is all much clearer to you). After looking through a
few files I wind up at twisted/application/app.py, which has a
startApplication function that calls
service.IService(application).startService(). So I guess that's what is
calling my startService. So I could make my own startApplication function,
but I then have the same problem, I wind up with a deferred on my hands and
my caller is not expecting me to return it. Plus, the startApplication
function sits at the top level of twisted/application/app.py, so I have to
find whatever is calling that. That seems to be
twisted/scripts/_twistd_unix.py, which imports twisted.application.app and
has a top-level startApplication that calls app.startApplication. But who
is calling that? Looks like twisted/scripts/twistd.py is, and that's called
by /usr/bin/twistd.

So should I write my own twistd? All this doesn't seem to be a matter of
simple subclassing. Plus, I can't just go in and start editing the
top-level functions in twisted/application/app.py and
twisted/scripts/_twistd_unix.py or code that imports app, etc.

Sorry for so many questions - I really don't know if I'm missing something
simple here. I do enjoy digging into all this, and I appreciate your
apparently limitless patience. I wish I knew it all better. Twisted is
complex and it's a pretty good bet that anything you think of or run into
as a n00b has been thought of or encountered before, and that whatever way
you think of to solve it will probably be non-optimal, or plain wrong, or
in ignorance of a solution someone much more experienced has already
implemented, or... etc.  Hence my many questions.

glyph> This all strikes me as totally straightforward and easy, and I don't
glyph> think I'm any kind of super-genius for being able to write a few
glyph> Python classes that call a few simple start/stop methods in the
glyph> order that I want them to run in :).

I should have mentioned that I want to use twistd.

In fact I have something like a process pool running in one service and I
talk to it from another machine. I say "hey, process pool, start me up the
following service (a twistd service)" and I would then like to know if that
service started, and if not then why not. So having twistd fail or report
an error if it can't start a service would be useful.

glyph> Doing either of those things would definitely be wrong.  There's no
glyph> reason to sys.exit or reactor.stop if your application can't start
glyph> up, unless your management system specifically calls for such a
glyph> thing.

Maybe this is a case where it's (semi-)justified. At least if I called
sys.exit the twistd process would go away, instead of sitting there acting
as though nothing's wrong :-) I can also, of course, try interacting with
the service I think I just started on the remote machine, and if I can't
then I can tell the original process pool to kill the twistd process. But
that seems a pretty roundabout alternative to just having twistd notice
that something went awry when calling startService.

glyph> In the future, even the Twisted plugin code might be starting some
glyph> things in addition to your application.  As I mentioned above, a
glyph> good reason to do that is to perform diagnostics on failed startups
glyph> :).

I assume you really mean "startups" and not "services". In which case, I'm
100% sure there's something funny here, but I can't figure it out. I'd love
to know, and I'm smiling broadly in any case. Too bad email loses so much
humor.....  we can always try though.

Thanks again,
Terry



From exarkun at twistedmatrix.com  Sun Nov 30 05:52:14 2008
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 Nov 2008 12:52:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1228049534.65.559757853@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081130/ec453377/attachment.html>

From davefowler at gmail.com  Sun Nov 30 20:54:17 2008
From: davefowler at gmail.com (dave fowler)
Date: Sun, 30 Nov 2008 21:54:17 -0600
Subject: [Twisted-Python] twisted reverse proxy for web filtering
Message-ID: <5acf0ea80811301954q6a3f6938o6d7d3d207b1f7719@mail.gmail.com>

I'm making a simple app that will run a local proxy and redirect me away
from distracting websites.  For example, if I go to facebook.com I'd like it
to instead send me to google.com

I'd like to use python and in my research I think a twisted reverse proxy is
what I want.  I've done the examples for setting up a proxy, including one
that counts the words on the pages you visit, but i cannot find anything on
fetching the destination and re-directing.  I've been sifting through the
many classes of the proxy examples and am pretty lost.  Does anyone have
some example code for something like this?

Thanks

Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20081130/d40ac679/attachment.html>

