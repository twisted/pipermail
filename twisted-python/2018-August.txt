From barry.scott at forcepoint.com  Wed Aug  1 10:34:46 2018
From: barry.scott at forcepoint.com (Barry Scott)
Date: Wed, 01 Aug 2018 17:34:46 +0100
Subject: [Twisted-Python] I preparing a patch but the buildbot OSX seems to
 be broken.
Message-ID: <1675085.KhK6Q9J0iJ@barry-scott-desktop>

I'm working on my first path for twisted and learning your workflow.

https://github.com/twisted/twisted/pull/1044

The CI pipe line has been helpful in spotting things I missed but for the last 
few hours this job is not completing.

buildbot/osx10.11-py2.7-coverage Expected — Waiting for status to be reported 

Is this something you can fix?

Barry




From hawkowl at atleastfornow.net  Wed Aug  1 11:30:53 2018
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Thu, 2 Aug 2018 03:30:53 +1000
Subject: [Twisted-Python] I preparing a patch but the buildbot OSX seems
 to be broken.
In-Reply-To: <1675085.KhK6Q9J0iJ@barry-scott-desktop>
References: <1675085.KhK6Q9J0iJ@barry-scott-desktop>
Message-ID: <4df58218-3f0e-4858-debc-b8bda3ab1fa6@atleastfornow.net>

Hi Barry,

That builder is on our buildbot infrastructure, which doesn't run 
automatically. When your patch undergoes review, we push it up to our 
buildbot for tests more thorough than we can get on public CI (different 
distros, etc). We don't run code we haven't looked at first on them, so 
it has to be a manual push.

So, don't worry about that builder for now. It's mainly just set as 
required so us committers remember to push up non-committer changes to 
our buildbots before we merge patches, as GitHub will collapse it into 
an "all tests passed" otherwise.

- Amber


On 08/02/2018 02:34 AM, Barry Scott wrote:
> I'm working on my first path for twisted and learning your workflow.
>
> https://github.com/twisted/twisted/pull/1044
>
> The CI pipe line has been helpful in spotting things I missed but for the last
> few hours this job is not completing.
>
> buildbot/osx10.11-py2.7-coverage Expected — Waiting for status to be reported
>
> Is this something you can fix?
>
> Barry
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From barry.scott at forcepoint.com  Fri Aug  3 05:11:16 2018
From: barry.scott at forcepoint.com (Barry Scott)
Date: Fri, 03 Aug 2018 12:11:16 +0100
Subject: [Twisted-Python] Why you are starting to see patch from me
Message-ID: <7049303.WjQMQ1R8VM@barry-scott-desktop>

I thought you might like a little background on why I'm starting to
send in patches.

The code base I'm working on uses Twisted 2.0 with lots of patches
and some back ports for newer Twisted. We also use Nevow.
The code started life a long time ago.

I have been porting the code to use current Twisted. I have only 
needed to make two small patches to Twisted itself to port to 18.4.
Tickets #9503 and #9504.

Our code does use a lot of the private interfaces in Twisted.
We know we are at risk of internals changing and breaking us,
but the public interfaces do not allow us to implement the features
of the product.

Barry




From barry.scott at forcepoint.com  Fri Aug  3 08:20:53 2018
From: barry.scott at forcepoint.com (Barry Scott)
Date: Fri, 03 Aug 2018 15:20:53 +0100
Subject: [Twisted-Python] How do recommend I run epytext?
Message-ID: <4704851.Gm61i9jL3o@barry-scott-desktop>

The tox checking does not cover the epytext checks it seems.

How do you recommend I have epytext checked for a patch?

Barry




From mithrandi at mithrandi.net  Fri Aug  3 09:17:15 2018
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 3 Aug 2018 17:17:15 +0200
Subject: [Twisted-Python] How do recommend I run epytext?
In-Reply-To: <4704851.Gm61i9jL3o@barry-scott-desktop>
References: <4704851.Gm61i9jL3o@barry-scott-desktop>
Message-ID: <CAMcKhMRd7FkD6COy-vPA_nXWVX6GNCJ6cO57pCChPShhMZ0deg@mail.gmail.com>

On Fri, 3 Aug 2018 at 16:25 Barry Scott <barry.scott at forcepoint.com> wrote:

> The tox checking does not cover the epytext checks it seems.
>
> How do you recommend I have epytext checked for a patch?
>

Twisted uses pydoctor for generating API documentation; I believe tox -e
apidocs is what you want to run it:

https://github.com/twisted/twisted/blob/ee535041258e7ef0b3223d2e12cd9aaa0bc2289f/tox.ini#L124
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180803/96a331bd/attachment.html>

From glyph at twistedmatrix.com  Sat Aug  4 03:16:58 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 4 Aug 2018 02:16:58 -0700
Subject: [Twisted-Python] Why you are starting to see patch from me
In-Reply-To: <7049303.WjQMQ1R8VM@barry-scott-desktop>
References: <7049303.WjQMQ1R8VM@barry-scott-desktop>
Message-ID: <D4C4D781-ADE3-458F-BE58-A4A71ECFA398@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180804/8c63357c/attachment.html>

From trac at twistedmatrix.com  Sun Aug  5 00:05:18 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 05 Aug 2018 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1533449118.1.2249579942360433723@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180805/111b85c3/attachment.html>

From exarkun at twistedmatrix.com  Wed Aug  8 07:05:54 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2018 09:05:54 -0400
Subject: [Twisted-Python] [ANN] txkube 0.3.0
Message-ID: <CAEeXt4PBeGC4_=BPkOT2kS1cbXQrOUe0Wr9rf-aCmFW5iBF3Mw@mail.gmail.com>

Hello all,

I'm pleased to announce a new release of txkube, a Twisted-based library
for interacting with Kubernetes using the HTTP API.  The big news for this
release is support for Python 3.6.  Also included is support for multiple
configuration files in the KUBECONFIG environment variable which allows for
better configuration management practices.

Here is an example of txkube usage, taken from the README:

   from __future__ import print_function
   from twisted.internet.task import react

   from txkube import network_kubernetes_from_context

   @react
   def main(reactor):
       k8s = network_kubernetes_from_context(reactor, u"minikube")
       d = k8s.versioned_client()
       d.addCallback(
           lambda client: client.list(client.model.v1.Namespace)
       )
       d.addCallback(print)
       return d

You can download txkube from PyPI <https://pypi.python.org/pypi>
You can contribute to its development on GitHub
<https://github.com/LeastAuthority/txkube>.

Thanks to Least Authority TFA GmbH <https://leastauthority.com/> for
sponsoring this development and to Craig Rodrigues for his efforts on
Python 3 porting work.

Jean-Paul Calderone
<https://as.ynchrono.us/>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180808/e7c3b804/attachment.html>

From alex at seedanddew.com  Wed Aug  8 10:40:36 2018
From: alex at seedanddew.com (Alex Georgie)
Date: Wed, 8 Aug 2018 09:40:36 -0700
Subject: [Twisted-Python] Partnership possibility with Twisted
Message-ID: <CAM=0JLLSAWE+Esw5xWdpwAxD2jz2b4fzB6Ddop3Grp=hvDRpdA@mail.gmail.com>

Hi everyone,

I'm Alex from SeedAndDew. I was chatting with Moshe about SeedAndDew and
whether Twisted would like to participate and he mentioned bringing it to
the mailing list to get your opinions.

SeedAndDew is a common subscription platform that allows users to
contribute to a number of open source projects with a single subscription.
The idea here is that it's a lot easier to get people to contribute
$10/month to every open source project they work with than it is to get
them to contribute $5/month for a specific project. The subscription
revenue will be distributed based on the amount of time users spend reading
documentation of the respective project which I anticipate will correspond
well with actual use. So if a user spends 10% of their time reading the
Twisted documentation, you get 10% of the subscription revenue.

Our goal is to increase the pool of people who contribute to open source by
removing the friction of having to manage subscriptions paid to specific
projects and changing it as your stack and interests change. This would be
a passive income source that doesn't require any further work outside of
the initial integration.

So far we have 10 projects including SQL Alchemy, RSpec, Bundler, Browsh
and Parse. Does this seem like something you would be interested in?

Thanks,

Alex

<http://mailstat.us/tr/opt-out?guid=yohzugwjkld0u3s>
<http://mailstat.us/tr/t/dummy>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180808/55f2c535/attachment.html>

From rodrigc at crodrigues.org  Wed Aug  8 10:52:49 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 8 Aug 2018 09:52:49 -0700
Subject: [Twisted-Python] subunitreporter 18.7.5
In-Reply-To: <CAEeXt4O8iDEWkPb558kX2hmiMCe4FygELO8kFLB3LJazw8-JEA@mail.gmail.com>
References: <CAEeXt4O8iDEWkPb558kX2hmiMCe4FygELO8kFLB3LJazw8-JEA@mail.gmail.com>
Message-ID: <CAG=rPVf7ppnAzE+0d+-y7MyRLUnpbbs042XObbqjoy6vazxchA@mail.gmail.com>

On Mon, Jul 9, 2018 at 12:03 PM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

>
> One useful thing to do with a subunit v2 stream is convert it to junitxml
> and let CircleCI ingest it.  This is precisely the reason I've written this
>

Jenkins also uses junitxml to parse test results.  This is highly useful.
Would it be worth modifying twisted's setup.py to pull in subunitreporter
as an optional module?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180808/a055c34f/attachment.html>

From meejah at meejah.ca  Wed Aug  8 17:21:02 2018
From: meejah at meejah.ca (meejah)
Date: Thu, 09 Aug 2018 03:21:02 +0400
Subject: [Twisted-Python] Tahoe 1.13.0
Message-ID: <86va8kbg2p.fsf@atlantis.meejah.ca>


ANNOUNCING Tahoe, the Least-Authority File Store, v1.13.0

The Tahoe-LAFS team is pleased to announce version 1.13.0 of
Tahoe-LAFS, an extremely reliable decentralized storage
system. Get it with "pip install tahoe-lafs", or download a
tarball here:

  https://tahoe-lafs.org/downloads

Tahoe-LAFS is the first distributed storage system to offer
"provider-independent security" — meaning that not even the
operators of your storage servers can read or alter your data
without your consent. Here is the one-page explanation of its
unique security and fault-tolerance properties:

  https://tahoe-lafs.readthedocs.org/en/latest/about.html

The previous stable release of Tahoe-LAFS was v1.12.1,
released on January 18, 2017.

v1.13.0 fixes several problems with the magic-folder frontend, adds
--json to more commands, adds the "tahoe status" and "tahoe
magic-folder status" commands and some internal refactoring. It is
also now possible to have multiple magic folders in a single Tahoe
client.

A long-standing feature to improve the share-placement algorithm
("servers of happiness") has been updated and merged. "tahoe backup"
now reports progress.

New clients can now be added to a grid using "magic wormhole" [14], a
SPAKE2-based method of securely connecting two computers. This adds
the "tahoe invite" command for a current grid-participant to invite a
new client and a corresponding option "tahoe create-client --join" for
the other side. These use a server at ``wormhole.tahoe-lafs.org``
currently operated by Least Authority.

Please see ``NEWS.rst`` for a more complete list of changes.


WHAT IS IT GOOD FOR?

With Tahoe-LAFS, you distribute your data across multiple
servers. Even if some of the servers fail or are taken over
by an attacker, the entire file store continues to function
correctly, preserving your privacy and security. You can
easily share specific files and directories with other people.

In addition to the core storage system itself, volunteers
have built other projects on top of Tahoe-LAFS and have
integrated Tahoe-LAFS with existing systems, including
Windows, JavaScript, iPhone, Android, Hadoop, Flume, Django,
Puppet, bzr, mercurial, perforce, duplicity, TiddlyWiki, and
more. See the Related Projects page on the wiki [3].

We believe that strong cryptography, Free and Open Source
Software, erasure coding, and principled engineering practices
make Tahoe-LAFS safer than RAID, removable drive, tape,
on-line backup or cloud storage.

This software is developed under test-driven development, and
there are no known bugs or security flaws which would
compromise confidentiality or data integrity under recommended
use. (For all important issues that we are currently aware of
please see the known_issues.rst file [2].)


COMPATIBILITY

This release should be compatible with the version 1 series of
Tahoe-LAFS. Clients from this release can write files and
directories in the format used by clients of all versions back
to v1.0 (which was released March 25, 2008). Clients from this
release can read files and directories produced by clients of
all versions since v1.0.

Network connections are limited by the Introducer protocol in
use. If the Introducer is running v1.10 or v1.11, then servers
from this release (v1.12) can serve clients of all versions
back to v1.0 . If it is running v1.12, then they can only
serve clients back to v1.10. Clients from this release can use
servers back to v1.10, but not older servers.

Except for the new optional MDMF format, we have not made any
intentional compatibility changes. However we do not yet have
the test infrastructure to continuously verify that all new
versions are interoperable with previous versions. We intend
to build such an infrastructure in the future.

This is the twenty-first release in the version 1 series. This
series of Tahoe-LAFS will be actively supported and maintained
for the foreseeable future, and future versions of Tahoe-LAFS
will retain the ability to read and write files compatible
with this series.


LICENCE

You may use this package under the GNU General Public License,
version 2 or, at your option, any later version. See the file
"COPYING.GPL" [4] for the terms of the GNU General Public
License, version 2.

You may use this package under the Transitive Grace Period
Public Licence, version 1 or, at your option, any later
version. (The Transitive Grace Period Public Licence has
requirements similar to the GPL except that it allows you to
delay for up to twelve months after you redistribute a derived
work before releasing the source code of your derived work.)
See the file "COPYING.TGPPL.rst" [5] for the terms of the
Transitive Grace Period Public Licence, version 1.

(You may choose to use this package under the terms of either
licence, at your option.)


INSTALLATION

Tahoe-LAFS works on Linux, Mac OS X, Windows, Solaris, *BSD,
and probably most other systems. Start with "docs/INSTALL.rst"
[6].


HACKING AND COMMUNITY

Please join us on the mailing list [7]. Patches are gratefully
accepted -- the Roadmap page [8] shows the next improvements
that we plan to make and CREDITS [9] lists the names of people
who've contributed to the project. The Dev page [10] contains
resources for hackers.


SPONSORSHIP

A special thanks goes out to Least Authority Enterprises [12],
which employs several Tahoe-LAFS developers, for their
continued support.

HACK TAHOE-LAFS!

If you can find a security flaw in Tahoe-LAFS which is serious
enough that we feel compelled to warn our users and issue a fix,
then we will award you with a customized t-shirt with your
exploit printed on it and add you to the "Hack Tahoe-LAFS Hall
Of Fame" [13].


ACKNOWLEDGEMENTS

This is the eighteenth release of Tahoe-LAFS to be created
solely as a labor of love by volunteers. Thank you very much
to the team of "hackers in the public interest" who make
Tahoe-LAFS possible.

meejah
on behalf of the Tahoe-LAFS team

August 5, 2018


[1] https://github.com/tahoe-lafs/tahoe-lafs/blob/tahoe-lafs-1.13.0/NEWS.rst
[2] https://github.com/tahoe-lafs/tahoe-lafs/blob/master/docs/known_issues.rst
[3] https://tahoe-lafs.org/trac/tahoe-lafs/wiki/RelatedProjects
[4] https://github.com/tahoe-lafs/tahoe-lafs/blob/tahoe-lafs-1.13.0/COPYING.GPL
[5] https://github.com/tahoe-lafs/tahoe-lafs/blob/tahoe-lafs-1.13.0/COPYING.TGPPL.rst
[6] https://tahoe-lafs.readthedocs.org/en/tahoe-lafs-1.13.0/INSTALL.html
[7] https://tahoe-lafs.org/cgi-bin/mailman/listinfo/tahoe-dev
[8] https://tahoe-lafs.org/trac/tahoe-lafs/roadmap
[9] https://github.com/tahoe-lafs/tahoe-lafs/blob/master/CREDITS
[10] https://tahoe-lafs.org/trac/tahoe-lafs/wiki/Dev
[12] https://leastauthority.com/
[13] https://tahoe-lafs.org/hacktahoelafs/
[14] https://github.com/warner/magic-wormhole


From glyph at twistedmatrix.com  Sat Aug 11 18:01:23 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 11 Aug 2018 17:01:23 -0700
Subject: [Twisted-Python] Partnership possibility with Twisted
In-Reply-To: <CAM=0JLLSAWE+Esw5xWdpwAxD2jz2b4fzB6Ddop3Grp=hvDRpdA@mail.gmail.com>
References: <CAM=0JLLSAWE+Esw5xWdpwAxD2jz2b4fzB6Ddop3Grp=hvDRpdA@mail.gmail.com>
Message-ID: <8607C338-53DB-4099-BFE2-2F10A6921A5A@twistedmatrix.com>

On Aug 8, 2018, at 9:40 AM, Alex Georgie <alex at seedanddew.com> wrote:
> 
> Hi everyone,
> 
> I'm Alex from SeedAndDew. I was chatting with Moshe about SeedAndDew and whether Twisted would like to participate and he mentioned bringing it to the mailing list to get your opinions.
> 
> SeedAndDew is a common subscription platform that allows users to contribute to a number of open source projects with a single subscription. The idea here is that it's a lot easier to get people to contribute $10/month to every open source  project they work with than it is to get them to contribute $5/month for a specific project. The subscription revenue will be distributed based on the amount of time users spend reading documentation of the respective project which I anticipate will correspond well with actual use. So if a user spends 10% of their time reading the Twisted documentation, you get 10% of the subscription revenue.
> 
> Our goal is to increase the pool of people who contribute to open source by removing the friction of having to manage subscriptions paid to specific projects and changing it as your stack and interests change. This would be a passive income source that doesn't require any further work outside of the initial integration.
> 
> So far we have 10 projects including SQL Alchemy, RSpec, Bundler, Browsh and Parse. Does this seem like something you would be interested in?

We'd definitely be interested in this, but you probably want to contact the Software Freedom Conservancy - https://sfconservancy.org/about/contact/ <https://sfconservancy.org/about/contact/> - to work out the details of how this might work financially.

Thanks for reaching out!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180811/7ac857a3/attachment.html>

From trac at twistedmatrix.com  Sun Aug 12 00:05:19 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 12 Aug 2018 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1534053919.78.4789536637416479460@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180812/cdbe4030/attachment.html>

From alex at seedanddew.com  Mon Aug 13 10:05:05 2018
From: alex at seedanddew.com (Alex Georgie)
Date: Mon, 13 Aug 2018 09:05:05 -0700
Subject: [Twisted-Python] Partnership possibility with Twisted
In-Reply-To: <8607C338-53DB-4099-BFE2-2F10A6921A5A@twistedmatrix.com>
References: <CAM=0JLLSAWE+Esw5xWdpwAxD2jz2b4fzB6Ddop3Grp=hvDRpdA@mail.gmail.com>
 <8607C338-53DB-4099-BFE2-2F10A6921A5A@twistedmatrix.com>
Message-ID: <CAM=0JL+63QymnCf1d1UMhrqag39YJti=G7Y_33-NHj+A9T+7Ng@mail.gmail.com>

Thanks Glyph! Shooting them an email now.

On Sat, Aug 11, 2018 at 5:01 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Aug 8, 2018, at 9:40 AM, Alex Georgie <alex at seedanddew.com> wrote:
>
>
> Hi everyone,
>
> I'm Alex from SeedAndDew. I was chatting with Moshe about SeedAndDew and
> whether Twisted would like to participate and he mentioned bringing it to
> the mailing list to get your opinions.
>
> SeedAndDew is a common subscription platform that allows users to
> contribute to a number of open source projects with a single subscription.
> The idea here is that it's a lot easier to get people to contribute
> $10/month to every open source project they work with than it is to get
> them to contribute $5/month for a specific project. The subscription
> revenue will be distributed based on the amount of time users spend reading
> documentation of the respective project which I anticipate will correspond
> well with actual use. So if a user spends 10% of their time reading the
> Twisted documentation, you get 10% of the subscription revenue.
>
> Our goal is to increase the pool of people who contribute to open source
> by removing the friction of having to manage subscriptions paid to specific
> projects and changing it as your stack and interests change. This would be
> a passive income source that doesn't require any further work outside of
> the initial integration.
>
> So far we have 10 projects including SQL Alchemy, RSpec, Bundler, Browsh
> and Parse. Does this seem like something you would be interested in?
>
>
> We'd definitely be interested in this, but you probably want to contact
> the Software Freedom Conservancy - https://sfconservancy.org/
> about/contact/ - to work out the details of how this might work
> financially.
>
> Thanks for reaching out!
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180813/d9ea5e03/attachment.html>

From sean.dizazzo at gmail.com  Thu Aug 16 18:25:25 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 16 Aug 2018 17:25:25 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of IP
 address?
Message-ID: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>

Hi all!

After I start a reactor connecting to a specific hostname and port, I do my
thing and then call transport.write() to send the data to the peer.

>From what I can tell, though, the hostname is resolved, and the data is
written back to the ip address itself, instead of the hostname I started
the reactor with.

This is a problem in my case because we are using nginx's ssl_preread
server_name directive to route several different streams all coming in on
the same ip address.

So the write() method needs to explicitly use the hostname to route the
packet properly.

So... Is there any way to have transport.write() use the hostname given
instead of it's resolved IP address? Or am I missing something?


Crossposted on StackOverflow:
https://stackoverflow.com/questions/51886720/is-there-a-way-to-force-twisted-internet-interfaces-itransport-to-write-to-a-g

Thank you for any insight you may have!

~Sean
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/ebec54c1/attachment.html>

From adi at roiban.ro  Thu Aug 16 18:49:49 2018
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 17 Aug 2018 01:49:49 +0100
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
Message-ID: <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>

On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
>
> Hi all!
>
> After I start a reactor connecting to a specific hostname and port, I do my thing and then call transport.write() to send the data to the peer.
>
> From what I can tell, though, the hostname is resolved, and the data is written back to the ip address itself, instead of the hostname I started the reactor with.
>
> This is a problem in my case because we are using nginx's ssl_preread server_name directive to route several different streams all coming in on the same ip address.
>
> So the write() method needs to explicitly use the hostname to route the packet properly.
>
> So... Is there any way to have transport.write() use the hostname given instead of it's resolved IP address? Or am I missing something?
>

I assume you are using TCP here.

I guess that you are missing something.

If you want each write to go over its own way / route and have the
hostname re-resolved you should open + write + close a connection for
each write.

But I think that there is something else there and this is now what you want :)
Do you use HTTP or have a custom protocol?

Cheers,

Adi Roiban


From sean.dizazzo at gmail.com  Thu Aug 16 19:14:59 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 16 Aug 2018 18:14:59 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
Message-ID: <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>

Thanks for responding, Adi!

I don't want each packet to go it's own way from Twisted.  They all go to
the same place from each instance of the server/protocol.  They go to my
custom protocol listening on another local port.

It's just that I'm serving up several different ssl apps on the same nginx
server, and nginx uses the hostname to route the packets.  So in this case,
traffic coming in on http.example.com:443 might be routed to an https app
listening on a socket, and traffic coming in to myprotocol.example.com:443
should be routed to my own protocol listening on port 9999.  So if nginx
doesn't get the hostname, it doesn't know to route the packet to my custom
protocol instead of the web server.  Does that make sense?

It seems that the transport is resolving the hostname to an ip address and
then sending the traffic to the generic ip which is not enough info for
nginx to route the packet correctly.

On Thu, Aug 16, 2018 at 5:49 PM, Adi Roiban <adi at roiban.ro> wrote:

> On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
> >
> > Hi all!
> >
> > After I start a reactor connecting to a specific hostname and port, I do
> my thing and then call transport.write() to send the data to the peer.
> >
> > From what I can tell, though, the hostname is resolved, and the data is
> written back to the ip address itself, instead of the hostname I started
> the reactor with.
> >
> > This is a problem in my case because we are using nginx's ssl_preread
> server_name directive to route several different streams all coming in on
> the same ip address.
> >
> > So the write() method needs to explicitly use the hostname to route the
> packet properly.
> >
> > So... Is there any way to have transport.write() use the hostname given
> instead of it's resolved IP address? Or am I missing something?
> >
>
> I assume you are using TCP here.
>
> I guess that you are missing something.
>
> If you want each write to go over its own way / route and have the
> hostname re-resolved you should open + write + close a connection for
> each write.
>
> But I think that there is something else there and this is now what you
> want :)
> Do you use HTTP or have a custom protocol?
>
> Cheers,
>
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/57152a01/attachment.html>

From sean.dizazzo at gmail.com  Thu Aug 16 19:44:35 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 16 Aug 2018 18:44:35 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
Message-ID: <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>

I guess thats still kind of confusing without making something more clear...

In my example, both myprotocol.example.com and test.example.com DNS records
would point to the same IP address.  One nginx instance then listens on
that IP and serves up several ssl apps. They go through a "mapper" that
uses the SNI and the ssl_preread directive to read the destination hostname
of the packet to determine which app to route the traffic to.

I just want transport.write() to not resolve the ip address of the host I
pass in.  Everything will work if it connects and sends packets to
myprotocol.example.com:443 instead of 23.23.23.23:443.

Nginx reference:
http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html

On Thu, Aug 16, 2018 at 6:14 PM, Sean DiZazzo <sean.dizazzo at gmail.com>
wrote:

> Thanks for responding, Adi!
>
> I don't want each packet to go it's own way from Twisted.  They all go to
> the same place from each instance of the server/protocol.  They go to my
> custom protocol listening on another local port.
>
> It's just that I'm serving up several different ssl apps on the same nginx
> server, and nginx uses the hostname to route the packets.  So in this case,
> traffic coming in on http.example.com:443 might be routed to an https app
> listening on a socket, and traffic coming in to myprotocol.example.com:443
> should be routed to my own protocol listening on port 9999.  So if nginx
> doesn't get the hostname, it doesn't know to route the packet to my custom
> protocol instead of the web server.  Does that make sense?
>
> It seems that the transport is resolving the hostname to an ip address and
> then sending the traffic to the generic ip which is not enough info for
> nginx to route the packet correctly.
>
> On Thu, Aug 16, 2018 at 5:49 PM, Adi Roiban <adi at roiban.ro> wrote:
>
>> On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com>
>> wrote:
>> >
>> > Hi all!
>> >
>> > After I start a reactor connecting to a specific hostname and port, I
>> do my thing and then call transport.write() to send the data to the peer.
>> >
>> > From what I can tell, though, the hostname is resolved, and the data is
>> written back to the ip address itself, instead of the hostname I started
>> the reactor with.
>> >
>> > This is a problem in my case because we are using nginx's ssl_preread
>> server_name directive to route several different streams all coming in on
>> the same ip address.
>> >
>> > So the write() method needs to explicitly use the hostname to route the
>> packet properly.
>> >
>> > So... Is there any way to have transport.write() use the hostname given
>> instead of it's resolved IP address? Or am I missing something?
>> >
>>
>> I assume you are using TCP here.
>>
>> I guess that you are missing something.
>>
>> If you want each write to go over its own way / route and have the
>> hostname re-resolved you should open + write + close a connection for
>> each write.
>>
>> But I think that there is something else there and this is now what you
>> want :)
>> Do you use HTTP or have a custom protocol?
>>
>> Cheers,
>>
>> Adi Roiban
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/a0b346f3/attachment-0001.html>

From twm at freecog.net  Thu Aug 16 21:18:46 2018
From: twm at freecog.net (Tom Most)
Date: Thu, 16 Aug 2018 20:18:46 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
Message-ID: <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>

Hi Sean,

To summarize, you are writing a client application using Twisted which
needs to talk with a service behind an Nginx reverse proxy. The reverse
proxy requires use of TLS (a.k.a. SSL) and SNI to identify the
appropriate backend service.
If you were using HTTP, Twisted's twisted.web.client.Agent[1] API
already does the right thing here -- it takes the hostname from the URL
it is given and populates SNI.
For your custom protocol on top of TLS, you should use a TLS endpoint to
connect to the server from your client. This is a little difficult to
discover because there isn't a TLS endpoint per se -- instead, there is
a function which wraps another endpoint. See the TLS section in the
endpoint documentation[2], which includes this example:
wrapped = HostnameEndpoint('example.com', 443) contextFactory =
optionsForClientTLS(hostname=u'example.com') endpoint =
wrapClientTLS(contextFactory, wrapped) conn =
endpoint.connect(Factory.forProtocol(Protocol))
I'll break this down:

1. HostnameEndpoint will resolve the hostname to an IP address and
   creates a TCP connection to port 443.2. The optionsForClientTLS[3] function generates an object which
   represents the TLS connection options. Importantly, it enables SNI
   based on the hostname passed to it.3. wrapClientTLS[4] returns an endpoint which layers TLS on top of the
   plain TCP connection generated by HostnameEndpoint. It also takes the
   TLS options as an argument.4. conn is a Deferred which will fire with a protocol instance generated
   by the factory passed to connect().
This is basically what Agent does internally, as I understand it.

Hope this helps,
Tom

On Thu, Aug 16, 2018, at 6:44 PM, Sean DiZazzo wrote:
> I guess thats still kind of confusing without making something more
> clear...> 
> In my example, both myprotocol.example.com and test.example.com DNS
> records would point to the same IP address.  One nginx instance then
> listens on that IP and serves up several ssl apps. They go through a
> "mapper" that uses the SNI and the ssl_preread directive to read the
> destination hostname of the packet to determine which app to route the
> traffic to.> 
> I just want transport.write() to not resolve the ip address of the
> host I pass in.  Everything will work if it connects and sends packets
> to myprotocol.example.com:443[5] instead of 23.23.23.23:443.> 
> Nginx reference:
> http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html
> 
> On Thu, Aug 16, 2018 at 6:14 PM, Sean DiZazzo
> <sean.dizazzo at gmail.com> wrote:>> Thanks for responding, Adi!
>> 
>> I don't want each packet to go it's own way from Twisted.  They all
>> go to the same place from each instance of the server/protocol.  They
>> go to my custom protocol listening on another local port.>> 
>> It's just that I'm serving up several different ssl apps on the same
>> nginx server, and nginx uses the hostname to route the packets.  So
>> in this case, traffic coming in on http.example.com:443 might be
>> routed to an https app listening on a socket, and traffic coming in
>> to myprotocol.example.com:443 should be routed to my own protocol
>> listening on port 9999.  So if nginx doesn't get the hostname, it
>> doesn't know to route the packet to my custom protocol instead of the
>> web server.  Does that make sense?>> 
>> It seems that the transport is resolving the hostname to an ip
>> address and then sending the traffic to the generic ip which is not
>> enough info for nginx to route the packet correctly.>> 
>> On Thu, Aug 16, 2018 at 5:49 PM, Adi Roiban <adi at roiban.ro> wrote:
>>> On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com>
>>> wrote:
>>>  >
>>>  > Hi all!
>>>  >
>>>  > After I start a reactor connecting to a specific hostname and
>>>  > port, I do my thing and then call transport.write() to send the
>>>  > data to the peer.
>>>  >
>>>  > From what I can tell, though, the hostname is resolved, and the
>>>  > data is written back to the ip address itself, instead of the
>>>  > hostname I started the reactor with.
>>>  >
>>>  > This is a problem in my case because we are using nginx's
>>>  > ssl_preread server_name directive to route several different
>>>  > streams all coming in on the same ip address.
>>>  >
>>>  > So the write() method needs to explicitly use the hostname to
>>>  > route the packet properly.
>>>  >
>>>  > So... Is there any way to have transport.write() use the hostname
>>>  > given instead of it's resolved IP address? Or am I missing
>>>  > something?
>>>  >
>>>
>>> I assume you are using TCP here.>>> 
>>>  I guess that you are missing something.
>>> 
>>>  If you want each write to go over its own way / route and have the>>>  hostname re-resolved you should open + write + close a
>>>  connection for>>>  each write.
>>> 
>>>  But I think that there is something else there and this is now what
>>>  you want :)>>>  Do you use HTTP or have a custom protocol?
>>> 
>>>  Cheers,
>>> 
>>>  Adi Roiban
>>> 
>>>  _______________________________________________
>>>  Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _________________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


Links:

  1. https://twistedmatrix.com/documents/current/api/twisted.web.client.Agent.html
  2. https://twistedmatrix.com/documents/current/core/howto/endpoints.html#endpoint-types-included-with-twisted
  3. https://twistedmatrix.com/documents/18.7.0/api/twisted.internet.ssl.optionsForClientTLS.html
  4. https://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#wrapClientTLS
  5. http://myprotocol.example.com:443/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/7159fed4/attachment.html>

From sean.dizazzo at gmail.com  Thu Aug 16 22:06:40 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 16 Aug 2018 21:06:40 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
 <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
Message-ID: <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>

>
> To summarize, you are writing a client application using Twisted which
> needs to talk with a service behind an Nginx reverse proxy. The reverse
> proxy requires use of TLS (a.k.a. SSL) and SNI to identify the appropriate
> backend service.


Why was that so difficult for me?  lol.

This is all great, Tom.  Thank you.  I guess I didn't find this because up
until now I have only played around with endpoints.  The twisted servers I
have running are all using the older interfaces for setting up and handling
connections.  I balked at learning endpoints after struggling to figure out
Twisted the first time.  I guess I'm a holdout.  I had barely even looked
at python 3 until the last few months.  Now I love it.  ;P  Its time for
endpoints to get their turn in the sun.

It will take some rethinking and rewriting, but at least now I have a way
forward.  Thank you!

On Thu, Aug 16, 2018 at 8:18 PM, Tom Most <twm at freecog.net> wrote:

> Hi Sean,
>
> To summarize, you are writing a client application using Twisted which
> needs to talk with a service behind an Nginx reverse proxy. The reverse
> proxy requires use of TLS (a.k.a. SSL) and SNI to identify the appropriate
> backend service.
>
> If you were using HTTP, Twisted's twisted.web.client.Agent
> <https://twistedmatrix.com/documents/current/api/twisted.web.client.Agent.html>
> API already does the right thing here -- it takes the hostname from the URL
> it is given and populates SNI.
>
> For your custom protocol on top of TLS, you should use a TLS endpoint to
> connect to the server from your client. This is a little difficult to
> discover because there isn't a TLS endpoint per se -- instead, there is a
> function which wraps another endpoint. See the TLS section in the
> endpoint documentation
> <https://twistedmatrix.com/documents/current/core/howto/endpoints.html#endpoint-types-included-with-twisted>,
> which includes this example:
>
> wrapped = HostnameEndpoint('example.com', 443)contextFactory = optionsForClientTLS(hostname=u'example.com')endpoint = wrapClientTLS(contextFactory, wrapped)conn = endpoint.connect(Factory.forProtocol(Protocol))
>
>
> I'll break this down:
>
> 1. HostnameEndpoint will resolve the hostname to an IP address and creates
> a TCP connection to port 443.
> 2. The optionsForClientTLS
> <https://twistedmatrix.com/documents/18.7.0/api/twisted.internet.ssl.optionsForClientTLS.html>
> function generates an object which represents the TLS connection options.
> Importantly, it enables SNI based on the hostname passed to it.
> 3. wrapClientTLS
> <https://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#wrapClientTLS>
> returns an endpoint which layers TLS on top of the plain TCP connection
> generated by HostnameEndpoint. It also takes the TLS options as an argument.
> 4. conn is a Deferred which will fire with a protocol instance generated
> by the factory passed to connect().
>
> This is basically what Agent does internally, as I understand it.
>
> Hope this helps,
> Tom
>
> On Thu, Aug 16, 2018, at 6:44 PM, Sean DiZazzo wrote:
>
> I guess thats still kind of confusing without making something more
> clear...
>
> In my example, both myprotocol.example.com and test.example.com DNS
> records would point to the same IP address.  One nginx instance then
> listens on that IP and serves up several ssl apps. They go through a
> "mapper" that uses the SNI and the ssl_preread directive to read the
> destination hostname of the packet to determine which app to route the
> traffic to.
>
> I just want transport.write() to not resolve the ip address of the host I
> pass in.  Everything will work if it connects and sends packets to
> myprotocol.example.com:443 instead of 23.23.23.23:443.
>
> Nginx reference:
> http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html
>
> On Thu, Aug 16, 2018 at 6:14 PM, Sean DiZazzo <sean.dizazzo at gmail.com>
> wrote:
>
> Thanks for responding, Adi!
>
> I don't want each packet to go it's own way from Twisted.  They all go to
> the same place from each instance of the server/protocol.  They go to my
> custom protocol listening on another local port.
>
> It's just that I'm serving up several different ssl apps on the same nginx
> server, and nginx uses the hostname to route the packets.  So in this case,
> traffic coming in on http.example.com:443 might be routed to an https app
> listening on a socket, and traffic coming in to myprotocol.example.com:443
> should be routed to my own protocol listening on port 9999.  So if nginx
> doesn't get the hostname, it doesn't know to route the packet to my custom
> protocol instead of the web server.  Does that make sense?
>
> It seems that the transport is resolving the hostname to an ip address and
> then sending the traffic to the generic ip which is not enough info for
> nginx to route the packet correctly.
>
> On Thu, Aug 16, 2018 at 5:49 PM, Adi Roiban <adi at roiban.ro> wrote:
>
> On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
> >
> > Hi all!
> >
> > After I start a reactor connecting to a specific hostname and port, I do
> my thing and then call transport.write() to send the data to the peer.
> >
> > From what I can tell, though, the hostname is resolved, and the data is
> written back to the ip address itself, instead of the hostname I started
> the reactor with.
> >
> > This is a problem in my case because we are using nginx's ssl_preread
> server_name directive to route several different streams all coming in on
> the same ip address.
> >
> > So the write() method needs to explicitly use the hostname to route the
> packet properly.
> >
> > So... Is there any way to have transport.write() use the hostname given
> instead of it's resolved IP address? Or am I missing something?
> >
>
> I assume you are using TCP here.
>
> I guess that you are missing something.
>
> If you want each write to go over its own way / route and have the
> hostname re-resolved you should open + write + close a connection for
> each write.
>
> But I think that there is something else there and this is now what you
> want :)
> Do you use HTTP or have a custom protocol?
>
> Cheers,
>
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> *_______________________________________________*
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/9bf5c311/attachment-0001.html>

From rodrigc at crodrigues.org  Fri Aug 17 00:43:58 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 16 Aug 2018 23:43:58 -0700
Subject: [Twisted-Python] Fix link on trac for logging in
In-Reply-To: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>
References: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>
Message-ID: <CAG=rPVe958ggEDsDecGt72jzJ41bo_4sd9fN6pXr282CstyCEA@mail.gmail.com>

Is there someone with access to the twistedmatrix Trac source code
who can fix the text at the place where it says *You are not logged in* aftr
clicking on
https://twistedmatrix.com/trac/newticket ?

--
Craig

On Thu, Jun 14, 2018 at 11:21 AM Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Hi,
>
> If a user clicks on this link:
> https://twistedmatrix.com/trac/newticket
>
> They see this text:
>
> You are currently not logged in. You may want to do so
> <https://twistedmatrix.com/trac/login> now.
>
> The link on "do so" is wrong.
>
> *Can someone fix that link to point to the Github login link?*
>
> Ideally, this link:
> https://twistedmatrix.com/trac/login
>
> should redirect to:
> https://twistedmatrix.com/trac/github/login
>
> Because there seem to be various paths that users are hitting the
> first link and then getting confused when they can't log into Trac.
> --
> Craig
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/07b57386/attachment.html>

From sean.dizazzo at gmail.com  Fri Aug 17 10:24:48 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Fri, 17 Aug 2018 09:24:48 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
 <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
 <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>
Message-ID: <CANzH6eunH=zV2oh01QE-DOFXSU+TzhG6dhhMzedDPvtF4eK0bQ@mail.gmail.com>

Starting to look over the docs and I realize I might have just been able to
incorporate the `optionsForClientTLS` into what I was already using.

I was using `reactor.connectSSL()` with a default
``ssl.ClientContextFactory()` so I think I can make my own
sslClientContextFactory with `optionsForClientTLS(hostname=host)` and pass
that in to connectSSL instead.

It would look something like this:

reactor.connectSSL(hostname, port, MyProtocolClientFactory(),
optionsForClientTLS(hostname=hostname))

I'll give it a try and play around with it.  If it doesn't work, I'll head
back over to the endpoint examples.

Thanks again!

On Thu, Aug 16, 2018 at 9:06 PM, Sean DiZazzo <sean.dizazzo at gmail.com>
wrote:

> To summarize, you are writing a client application using Twisted which
>> needs to talk with a service behind an Nginx reverse proxy. The reverse
>> proxy requires use of TLS (a.k.a. SSL) and SNI to identify the appropriate
>> backend service.
>
>
> Why was that so difficult for me?  lol.
>
> This is all great, Tom.  Thank you.  I guess I didn't find this because up
> until now I have only played around with endpoints.  The twisted servers I
> have running are all using the older interfaces for setting up and handling
> connections.  I balked at learning endpoints after struggling to figure out
> Twisted the first time.  I guess I'm a holdout.  I had barely even looked
> at python 3 until the last few months.  Now I love it.  ;P  Its time for
> endpoints to get their turn in the sun.
>
> It will take some rethinking and rewriting, but at least now I have a way
> forward.  Thank you!
>
> On Thu, Aug 16, 2018 at 8:18 PM, Tom Most <twm at freecog.net> wrote:
>
>> Hi Sean,
>>
>> To summarize, you are writing a client application using Twisted which
>> needs to talk with a service behind an Nginx reverse proxy. The reverse
>> proxy requires use of TLS (a.k.a. SSL) and SNI to identify the appropriate
>> backend service.
>>
>> If you were using HTTP, Twisted's twisted.web.client.Agent
>> <https://twistedmatrix.com/documents/current/api/twisted.web.client.Agent.html>
>> API already does the right thing here -- it takes the hostname from the URL
>> it is given and populates SNI.
>>
>> For your custom protocol on top of TLS, you should use a TLS endpoint to
>> connect to the server from your client. This is a little difficult to
>> discover because there isn't a TLS endpoint per se -- instead, there is a
>> function which wraps another endpoint. See the TLS section in the
>> endpoint documentation
>> <https://twistedmatrix.com/documents/current/core/howto/endpoints.html#endpoint-types-included-with-twisted>,
>> which includes this example:
>>
>> wrapped = HostnameEndpoint('example.com', 443)contextFactory = optionsForClientTLS(hostname=u'example.com')endpoint = wrapClientTLS(contextFactory, wrapped)conn = endpoint.connect(Factory.forProtocol(Protocol))
>>
>>
>> I'll break this down:
>>
>> 1. HostnameEndpoint will resolve the hostname to an IP address and
>> creates a TCP connection to port 443.
>> 2. The optionsForClientTLS
>> <https://twistedmatrix.com/documents/18.7.0/api/twisted.internet.ssl.optionsForClientTLS.html>
>> function generates an object which represents the TLS connection options.
>> Importantly, it enables SNI based on the hostname passed to it.
>> 3. wrapClientTLS
>> <https://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#wrapClientTLS>
>> returns an endpoint which layers TLS on top of the plain TCP connection
>> generated by HostnameEndpoint. It also takes the TLS options as an argument.
>> 4. conn is a Deferred which will fire with a protocol instance generated
>> by the factory passed to connect().
>>
>> This is basically what Agent does internally, as I understand it.
>>
>> Hope this helps,
>> Tom
>>
>> On Thu, Aug 16, 2018, at 6:44 PM, Sean DiZazzo wrote:
>>
>> I guess thats still kind of confusing without making something more
>> clear...
>>
>> In my example, both myprotocol.example.com and test.example.com DNS
>> records would point to the same IP address.  One nginx instance then
>> listens on that IP and serves up several ssl apps. They go through a
>> "mapper" that uses the SNI and the ssl_preread directive to read the
>> destination hostname of the packet to determine which app to route the
>> traffic to.
>>
>> I just want transport.write() to not resolve the ip address of the host I
>> pass in.  Everything will work if it connects and sends packets to
>> myprotocol.example.com:443 instead of 23.23.23.23:443.
>>
>> Nginx reference:
>> http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html
>>
>> On Thu, Aug 16, 2018 at 6:14 PM, Sean DiZazzo <sean.dizazzo at gmail.com>
>> wrote:
>>
>> Thanks for responding, Adi!
>>
>> I don't want each packet to go it's own way from Twisted.  They all go to
>> the same place from each instance of the server/protocol.  They go to my
>> custom protocol listening on another local port.
>>
>> It's just that I'm serving up several different ssl apps on the same
>> nginx server, and nginx uses the hostname to route the packets.  So in this
>> case, traffic coming in on http.example.com:443 might be routed to an
>> https app listening on a socket, and traffic coming in to
>> myprotocol.example.com:443 should be routed to my own protocol listening
>> on port 9999.  So if nginx doesn't get the hostname, it doesn't know to
>> route the packet to my custom protocol instead of the web server.  Does
>> that make sense?
>>
>> It seems that the transport is resolving the hostname to an ip address
>> and then sending the traffic to the generic ip which is not enough info for
>> nginx to route the packet correctly.
>>
>> On Thu, Aug 16, 2018 at 5:49 PM, Adi Roiban <adi at roiban.ro> wrote:
>>
>> On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com>
>> wrote:
>> >
>> > Hi all!
>> >
>> > After I start a reactor connecting to a specific hostname and port, I
>> do my thing and then call transport.write() to send the data to the peer.
>> >
>> > From what I can tell, though, the hostname is resolved, and the data is
>> written back to the ip address itself, instead of the hostname I started
>> the reactor with.
>> >
>> > This is a problem in my case because we are using nginx's ssl_preread
>> server_name directive to route several different streams all coming in on
>> the same ip address.
>> >
>> > So the write() method needs to explicitly use the hostname to route the
>> packet properly.
>> >
>> > So... Is there any way to have transport.write() use the hostname given
>> instead of it's resolved IP address? Or am I missing something?
>> >
>>
>> I assume you are using TCP here.
>>
>> I guess that you are missing something.
>>
>> If you want each write to go over its own way / route and have the
>> hostname re-resolved you should open + write + close a connection for
>> each write.
>>
>> But I think that there is something else there and this is now what you
>> want :)
>> Do you use HTTP or have a custom protocol?
>>
>> Cheers,
>>
>> Adi Roiban
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> *_______________________________________________*
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180817/539a322a/attachment-0001.html>

From glyph at twistedmatrix.com  Sat Aug 18 13:17:02 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 18 Aug 2018 12:17:02 -0700
Subject: [Twisted-Python] Fix link on trac for logging in
In-Reply-To: <CAG=rPVe958ggEDsDecGt72jzJ41bo_4sd9fN6pXr282CstyCEA@mail.gmail.com>
References: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>
 <CAG=rPVe958ggEDsDecGt72jzJ41bo_4sd9fN6pXr282CstyCEA@mail.gmail.com>
Message-ID: <E778CAA0-043F-4BB9-B1AC-DAE11C8F75CD@twistedmatrix.com>

The twisted trac source code is here: https://github.com/twisted-infra/twisted-trac-source <https://github.com/twisted-infra/twisted-trac-source> 

I think the relevant bit of code is https://github.com/twisted-infra/twisted-trac-source/blob/6b7b4156a50c05f28437eba506177a9f3bcccac6/trac/web/main.py#L481 <https://github.com/twisted-infra/twisted-trac-source/blob/6b7b4156a50c05f28437eba506177a9f3bcccac6/trac/web/main.py#L481> here, but I'm not quite sure how to change it.

If you can make a PR we can probably get it deployed though, this is definitely an annoying bug.

(Alternately, maybe just make /trac/login a redirect in the web server?)

-g

> On Aug 16, 2018, at 11:43 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Is there someone with access to the twistedmatrix Trac source code
> who can fix the text at the place where it says You are not logged in aftr clicking on
> https://twistedmatrix.com/trac/newticket <https://twistedmatrix.com/trac/newticket> ?
> 
> --
> Craig
> 
> On Thu, Jun 14, 2018 at 11:21 AM Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
> Hi,
> 
> If a user clicks on this link:
> https://twistedmatrix.com/trac/newticket <https://twistedmatrix.com/trac/newticket>
> 
> They see this text:
> 
> You are currently not logged in. You may want to do so <https://twistedmatrix.com/trac/login> now. 
> 
> The link on "do so" is wrong.  
> 
> Can someone fix that link to point to the Github login link?
> 
> Ideally, this link:
> https://twistedmatrix.com/trac/login <https://twistedmatrix.com/trac/login>
> 
> should redirect to:
> https://twistedmatrix.com/trac/github/login <https://twistedmatrix.com/trac/github/login>
> 
> Because there seem to be various paths that users are hitting the
> first link and then getting confused when they can't log into Trac.
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180818/66f3ea1e/attachment.html>

From rodrigc at crodrigues.org  Sat Aug 18 13:27:39 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 18 Aug 2018 12:27:39 -0700
Subject: [Twisted-Python] Fix link on trac for logging in
In-Reply-To: <E778CAA0-043F-4BB9-B1AC-DAE11C8F75CD@twistedmatrix.com>
References: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>
 <CAG=rPVe958ggEDsDecGt72jzJ41bo_4sd9fN6pXr282CstyCEA@mail.gmail.com>
 <E778CAA0-043F-4BB9-B1AC-DAE11C8F75CD@twistedmatrix.com>
Message-ID: <CAG=rPVfofwuM=WS3sGRSRRg41Ugzbv4-+7KmR3mG=jY9cQj2rA@mail.gmail.com>

Where is the Twisted Web config for specifying redirects of
twistedmatrix.com?  For this case, adding a redirect seems better than
modifying the Trac code.

--
Craig

On Saturday, August 18, 2018, Glyph <glyph at twistedmatrix.com> wrote:

>
> (Alternately, maybe just make /trac/login a redirect in the web server?)
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180818/f47dc0e8/attachment.html>

From glyph at twistedmatrix.com  Sat Aug 18 15:12:02 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 18 Aug 2018 14:12:02 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6eunH=zV2oh01QE-DOFXSU+TzhG6dhhMzedDPvtF4eK0bQ@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
 <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
 <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>
 <CANzH6eunH=zV2oh01QE-DOFXSU+TzhG6dhhMzedDPvtF4eK0bQ@mail.gmail.com>
Message-ID: <D32708D0-CCF8-477B-A52F-0E2F2C3C1645@twistedmatrix.com>

On Aug 17, 2018, at 9:24 AM, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
> 
> Starting to look over the docs and I realize I might have just been able to incorporate the `optionsForClientTLS` into what I was already using. 
> 
> I was using `reactor.connectSSL()` with a default ``ssl.ClientContextFactory()` so I think I can make my own sslClientContextFactory with `optionsForClientTLS(hostname=host)` and pass that in to connectSSL instead.
> 
> It would look something like this:
> 
> reactor.connectSSL(hostname, port, MyProtocolClientFactory(), optionsForClientTLS(hostname=hostname))
> 
> I'll give it a try and play around with it.  If it doesn't work, I'll head back over to the endpoint examples.

This should indeed work for now, but adopting endpoints is a more forward-looking approach; "connectSSL" is a much less flexible API, and will hopefully someday be removed.

For example:

You can't use connectSSL in combination with UNIX sockets
When we (one day) have a client version of the PROXY endpoint, you won't be able to use that with connectSSL
You can't do TLS-in-TLS tunneling with connectSSL for backhaul connections

It's just generally harder to switch to other secure transports if you're not using the endpoint APIs.

Thanks for using Twisted,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180818/5ead7e09/attachment.html>

From glyph at twistedmatrix.com  Sat Aug 18 15:18:41 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 18 Aug 2018 14:18:41 -0700
Subject: [Twisted-Python] Fix link on trac for logging in
In-Reply-To: <CAG=rPVfofwuM=WS3sGRSRRg41Ugzbv4-+7KmR3mG=jY9cQj2rA@mail.gmail.com>
References: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>
 <CAG=rPVe958ggEDsDecGt72jzJ41bo_4sd9fN6pXr282CstyCEA@mail.gmail.com>
 <E778CAA0-043F-4BB9-B1AC-DAE11C8F75CD@twistedmatrix.com>
 <CAG=rPVfofwuM=WS3sGRSRRg41Ugzbv4-+7KmR3mG=jY9cQj2rA@mail.gmail.com>
Message-ID: <0B797B34-21A9-40C2-B4A1-B044A8D5D3A4@twistedmatrix.com>

The Twisted website is constructed here:

https://github.com/twisted-infra/braid/blob/master/services/t-web/twisted-web/twisted-web <https://github.com/twisted-infra/braid/blob/master/services/t-web/twisted-web/twisted-web>

and of course it's a twisted.web resource, so you can make it do whatever you like :).

-glyph

> On Aug 18, 2018, at 12:27 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Where is the Twisted Web config for specifying redirects of twistedmatrix.com <http://twistedmatrix.com/>?  For this case, adding a redirect seems better than modifying the Trac code.
> 
> --
> Craig
> 
> On Saturday, August 18, 2018, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> (Alternately, maybe just make /trac/login a redirect in the web server?)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180818/41bf065c/attachment-0001.html>

From trac at twistedmatrix.com  Sun Aug 19 00:05:21 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 19 Aug 2018 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1534658721.02.4279128667015542489@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180819/4e90724a/attachment.html>

From trac at twistedmatrix.com  Sun Aug 26 00:05:26 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 26 Aug 2018 06:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1535263526.36.4385966678097756855@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180826/99a846ba/attachment.html>

From rshea at thecubagroup.com  Mon Aug 27 18:10:22 2018
From: rshea at thecubagroup.com (Richard Shea)
Date: Tue, 28 Aug 2018 12:10:22 +1200
Subject: [Twisted-Python] Using twistd with -c option causes permission error
Message-ID: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>

I'm trying to use the -c option of twistd like this :

twistd web --wsgi bar.app -c foo.cer  -k privkey.pem --https=4433

I'm pointing it at a cert with perms like this "-rw-r--r-- 1 root root" but twistd complains about a permission error . 

I'm puzzled ... surely twistd only needs to read that file ?

Thanks

.






From maarten at treewalker.org  Mon Aug 27 22:01:13 2018
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Tue, 28 Aug 2018 06:01:13 +0200
Subject: [Twisted-Python] Using twistd with -c option causes permission
 error
In-Reply-To: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
References: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
Message-ID: <2380012.1niq0D0mgj@hyperion>

On Tuesday, August 28, 2018 2:10:22 AM CEST Richard Shea wrote:
> I'm trying to use the -c option of twistd like this :
> 
> twistd web --wsgi bar.app -c foo.cer  -k privkey.pem --https=4433
> 
> I'm pointing it at a cert with perms like this "-rw-r--r-- 1 root root" but
> twistd complains about a permission error .
> 
> I'm puzzled ... surely twistd only needs to read that file ?

Is it complaining about the permissions on the cert or on the private key? 
Some applications (like SSH) reject private keys if they are world-readable, 
as a precaution.

Bye,
		Maarten




From davidfstr at gmail.com  Mon Aug 27 22:12:57 2018
From: davidfstr at gmail.com (David Foster)
Date: Mon, 27 Aug 2018 21:12:57 -0700
Subject: [Twisted-Python] Forking after starting AsyncioSelectorReactor:
 Supported?
Message-ID: <dd680f21-22ea-b3b6-1a7c-9c490b31140b@gmail.com>

Hi Twisted list!

I have a library that is attempting to start an AsyncioSelectorReactor, 
fork the process, and then open a network socket on macOS. When the 
network socket is opened, Twisted throws an [Errno 9] "Bad file 
descriptor" exception at me. I get no such exception on Ubuntu.

If I change the sequence from:
     setup_reactor('AsyncioSelectorReactor')
     fork_and_continue_in_child()
     run_server()
to:
     fork_and_continue_in_child()             # fork first
     setup_reactor('AsyncioSelectorReactor')
     run_server()
Then everything works okay.

Also if I use SelectReactor rather than AsyncioSelectorReactor then it 
doesn't matter which order I fork in.

So my question is, does Twisted support being forked after starting a 
reactor or not?

-- 
David Foster | Seattle, WA, USA


P.S. For more details see this Django Channels thread: 
https://github.com/django/channels/issues/962#issuecomment-414103367


From screwtape at froup.com  Mon Aug 27 22:47:50 2018
From: screwtape at froup.com (Tim Allen)
Date: Tue, 28 Aug 2018 14:47:50 +1000
Subject: [Twisted-Python] Forking after starting AsyncioSelectorReactor:
 Supported?
In-Reply-To: <dd680f21-22ea-b3b6-1a7c-9c490b31140b@gmail.com>
References: <dd680f21-22ea-b3b6-1a7c-9c490b31140b@gmail.com>
Message-ID: <20180828044750.GA21465@boombah.thristian.org>

On Mon, Aug 27, 2018 at 09:12:57PM -0700, David Foster wrote:
> So my question is, does Twisted support being forked after starting a
> reactor or not?

I haven't used Twisted with the AsyncioSelectorReactor on macOS myself, but
the `asyncio` docs suggest[1] that the default macOS event loop uses the
`kqueue` system call. Searching for "macos fork kqueue" finds a report[2]
of the same behaviour in the C++ Boost asyncio library. Apple doesn't seem
to publish manpages publically anymore, but the `kqueue` system call was
borrowed from FreeBSD which does[3]:

# The kqueue() system call creates a new kernel event queue and returns a
# descriptor. The queue is not inherited by a child created with fork(2).

So, my guess is that `kqueue` just can't be used with `fork` in that way.
If you really need to set up a reactor and then fork, perhaps you
can configure `asyncio` to use the `selectors.SelectSelector` or
`selectors.PollSelector` event loops instead; they're less efficient,
but they should work after a fork.

This behaviour doesn't occur on Ubuntu because Linux provides the `epoll`
system call instead of `kqueue`, which behaves differently.

[1]: https://docs.python.org/3.6/library/asyncio-eventloops.html#mac-os-x
[2]: https://svn.boost.org/trac10/ticket/3238
[3]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&manpath=FreeBSD+11.2-RELEASE+and+Ports


From rshea at thecubagroup.com  Tue Aug 28 03:54:39 2018
From: rshea at thecubagroup.com (Richard Shea)
Date: Tue, 28 Aug 2018 21:54:39 +1200
Subject: [Twisted-Python] Using twistd with -c option causes permission
 error
In-Reply-To: <2380012.1niq0D0mgj@hyperion>
References: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
 <2380012.1niq0D0mgj@hyperion>
Message-ID: <1535450079.1972483.1488535536.757AFFB3@webmail.messagingengine.com>



On Tue, 28 Aug 2018, at 4:01 PM, Maarten ter Huurne wrote:
> On Tuesday, August 28, 2018 2:10:22 AM CEST Richard Shea wrote:
> > I'm trying to use the -c option of twistd like this :
> > 
> > twistd web --wsgi bar.app -c foo.cer  -k privkey.pem --https=4433
> > 
> > I'm pointing it at a cert with perms like this "-rw-r--r-- 1 root root" but
> > twistd complains about a permission error .
> > 
> > I'm puzzled ... surely twistd only needs to read that file ?
> 
> Is it complaining about the permissions on the cert or on the private key? 
> Some applications (like SSH) reject private keys if they are world-readable, 
> as a precaution.
> 
Thanks Maarten it was the certificate that was being complained about but I think I now understand what the problem was. 

Although I showed the certificate as being in the same directory in fact it was deep in a path and although the user running twisted had read on the file they didn't have execute on some of the intermediate directories (and so I assume this was the cause of the access error ... I haven't yet had time to check this out).

This does raise a more general question .... what perms should the key used by twistd have ? Ideally a key would only be readable by root but running twistd as root is clearly undesireable. Anyone wish to give their opinion on that ?

With Apache the process starts as root, reads the key and then makes the apache process run as a different, less powerful, user  but I can't see how you can do the equivalent for twistd ? Am I overlooking something ?


Thanks


From davidfstr at gmail.com  Tue Aug 28 08:49:46 2018
From: davidfstr at gmail.com (David Foster)
Date: Tue, 28 Aug 2018 07:49:46 -0700
Subject: [Twisted-Python] Forking after starting AsyncioSelectorReactor:
 Supported?
In-Reply-To: <20180828044750.GA21465@boombah.thristian.org>
References: <dd680f21-22ea-b3b6-1a7c-9c490b31140b@gmail.com>
 <20180828044750.GA21465@boombah.thristian.org>
Message-ID: <49A9893B-EB9C-4B9D-B97C-12D8708A5782@gmail.com>

Thank you for the detailed research Tim.

Indeed it seems we’ll have to either change the order of {start reactor, fork} or use a different reactor type, since this problem seems likely to remain so long as asyncio uses the kqueue primitive on macOS, which seems unlikely to change.

- David

> On Aug 27, 2018, at 9:47 PM, Tim Allen <screwtape at froup.com> wrote:
> 
>> On Mon, Aug 27, 2018 at 09:12:57PM -0700, David Foster wrote:
>> So my question is, does Twisted support being forked after starting a
>> reactor or not?
> 
> I haven't used Twisted with the AsyncioSelectorReactor on macOS myself, but
> the `asyncio` docs suggest[1] that the default macOS event loop uses the
> `kqueue` system call. Searching for "macos fork kqueue" finds a report[2]
> of the same behaviour in the C++ Boost asyncio library. Apple doesn't seem
> to publish manpages publically anymore, but the `kqueue` system call was
> borrowed from FreeBSD which does[3]:
> 
> # The kqueue() system call creates a new kernel event queue and returns a
> # descriptor. The queue is not inherited by a child created with fork(2).
> 
> So, my guess is that `kqueue` just can't be used with `fork` in that way.
> If you really need to set up a reactor and then fork, perhaps you
> can configure `asyncio` to use the `selectors.SelectSelector` or
> `selectors.PollSelector` event loops instead; they're less efficient,
> but they should work after a fork.
> 
> This behaviour doesn't occur on Ubuntu because Linux provides the `epoll`
> system call instead of `kqueue`, which behaves differently.
> 
> [1]: https://docs.python.org/3.6/library/asyncio-eventloops.html#mac-os-x
> [2]: https://svn.boost.org/trac10/ticket/3238
> [3]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&manpath=FreeBSD+11.2-RELEASE+and+Ports
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Wed Aug 29 05:04:43 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 29 Aug 2018 07:04:43 -0400
Subject: [Twisted-Python] Using twistd with -c option causes permission
 error
In-Reply-To: <1535450079.1972483.1488535536.757AFFB3@webmail.messagingengine.com>
References: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
 <2380012.1niq0D0mgj@hyperion>
 <1535450079.1972483.1488535536.757AFFB3@webmail.messagingengine.com>
Message-ID: <CAEeXt4NVJ_RmcMeLJ+M11hpc_fi33TCqhM6+rt+DbdxzhC+1ZA@mail.gmail.com>

On Tue, Aug 28, 2018 at 5:54 AM Richard Shea <rshea at thecubagroup.com> wrote:

>
> With Apache the process starts as root, reads the key and then makes the
> apache process run as a different, less powerful, user  but I can't see how
> you can do the equivalent for twistd ? Am I overlooking something ?
>
>
twistd has `--uid` and `--gid` options for switching to another user after
`privilegedStartService` runs.  However, I'm not sure how much help this
will be since there is a strong desire to replace twistd with twist and
twist does not have these features.  Perhaps someone who has been working
on twist can explain the preferred workflow using that tool.


>
> Thanks
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180829/249220b1/attachment.html>

From sda at fstab.net  Wed Aug 29 11:13:25 2018
From: sda at fstab.net (Kyle Altendorf)
Date: Wed, 29 Aug 2018 13:13:25 -0400
Subject: [Twisted-Python] T9217 / PR1052: Wheels, wheels, and more wheels
Message-ID: <9d085475b70a1ff9846690ed9c82d13c@fstab.net>

Hi All,

I am working on ticket #9217 / PR #1051 to add lots more wheel 
generation to the Twisted CI.  I decided to give the cibuildwheel 
package a try and it made this process almost too easy (well... sort of 
:] ).  I've got AppVeyor-Windows, Travis-Linux, and Circle-OSX all 
building a variety of wheels for the supported Python versions and bit 
depths.  Travis doesn't save artifacts 'easily' so I went ahead and 
doubled up on Linux on Circle for now, though it's having some Docker 
issues at the moment and hasn't been successful yet.  For some reason in 
this one case the project directory isn't getting mounted into the 
container as expected.

wheel links:
https://github.com/twisted/twisted/pull/1051#issuecomment-416743261 (and 
next comment)

Now that I've got the wheel builds happening I figured it'd be good to 
try them out on 'real' machines.  Turns out we get a failure on 
twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker for at 
least the two checks I've done so far (Windows and OSX).  I haven't done 
more than a cursory look at that yet, but it's on the list to understand 
and resolve.  More testing would of course be welcome.  Real world, just 
trial Twisted's own tests, whatever would be appreciated if you are 
interested.

failures with wheels:
https://github.com/twisted/twisted/pull/1051#issuecomment-416977723

Overall, it's a bit unclear what the intended use of the various CI 
hosts are for Twisted.  I hear that Travis OSX builds were really slow, 
but from what I can see Circle isn't doing any OSX (other than what I 
added).  There wasn't any artifact storage being used on Circle either.  
So, I'm not sure if there was a reason to use Circle that went away, 
or...  But, not having to hook Travis up to S3 or somesuch for storage 
is quite nice so Circle wins at least in that category.

Now that I've got something rough in place, are there any opinions about 
how this should work?  I don't know the present release workflow so I 
don't know if we'd want an automatic push to PyPI on tags (probably 
not), or just artifacts on the build server to grab manually (would need 
some S3 or such for Travis, or Circle for Linux builds as well).  
Anything else?  Do we want automated tests against the wheels?  
cibuildwheel does have a feature for that though I haven't done anything 
with it yet.

Anyways...  hello, thanks for Twisted, and I hope this work ends up 
saving some people some time.

Cheers,
-kyle


From grimmtooth at gmail.com  Wed Aug 29 16:48:19 2018
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Wed, 29 Aug 2018 18:48:19 -0400
Subject: [Twisted-Python] Keeping logger from snatching stdout?
Message-ID: <CA+1iZEcfQOcSuZAYzjafbCEDh-dsONUTjOx8v4e8PR=HPt+tsQ@mail.gmail.com>

I'm working on a Flask project using the flask_twisted package from PyPI
and have encountered a mystery.  I don't *have* to solve it to move on, but
darn it, I can't let it go :)

https://pypi.org/project/Flask-Twisted/
https://github.com/cravler/flask-twisted/

So here's the breakdown: when use the standard logging module to output to
a logfile + stdout, everything is fine.  I do see some logging output from
Twisted as well (the web server part) but for the most part life is groovy.

I'm going to be integrating in a wxPython windows app to this (previously
it's been a shell app) and step 1 was to make my own stdout handler that
eventually would pipe all that stuff to a window in the wx app.  The first
step of THAT (step 1.a) was to replace all the logging stuff with print()
placeholders.

At that point, things got confusing, as now ALL of my print()s are being
handled by Twisted's logging handler.

I brought flask-twisted in local to my code so I could monkey around with
it. First thing I noticed was that it was using twisted.python.log. I
messed around with that - commented it out, and now I get no stdout output
at all.  Set the parameter setStdout to False, same thing.

The adapter code uses twisted.internet.reactor,  threads,
twisted.web.server.Site, twisted.web.wsgi.WSGIResource, and
twisted.web.resource.Resource, any one which might be responsible. I spent
yesterday evening digging around but haven't found anything yet.

Any guidance / ideas?

Regards,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180829/ee0f7b76/attachment.html>

From robert.difalco at gmail.com  Thu Aug 30 11:14:03 2018
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Thu, 30 Aug 2018 10:14:03 -0700
Subject: [Twisted-Python] Issue with TLS failure modes
Message-ID: <CAAXGW-xFq9UgBZdY+p0wjKxBW4z9P6a=CSc6Hspq3oV+TgBTJg@mail.gmail.com>

I'm having an issue properly handling TLS failure modes. For example
consider the EchoServer and EchoClient code. If I use a TLS client with a
TCP4 server, I do not get a handshake exception until I abort the
connection. But I don't want to abort the connection unless I get a
handshake error.

What I'd like to do is to check the handshake status in my protocol before
my client sends bytes to the server. I'd like my send message to be able to
raise the <class 'OpenSSL.SSL.Error'>: [('SSL routines', 'ssl23_read', 'ssl
handshake failure'). But for some reason it seems to get lost until I abort
the connection. Does this sound familiar to anyone?

What I've done for now is setup a Timeout mixin so that after my
client.send, if I do not get an ACK back (which my particular protocol
does) within two minutes, I just abort the connection. This then calls
connectionLost with the correct SSL.Error. But if it's in the error queue
(and found during the course of abortConnection then isn't there a way to
find it sooner? Like before my timeout and before I call send on the client
protocol?

Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180830/16255fd6/attachment.html>

From sean.dizazzo at gmail.com  Thu Aug 30 14:22:14 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 30 Aug 2018 13:22:14 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <D32708D0-CCF8-477B-A52F-0E2F2C3C1645@twistedmatrix.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
 <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
 <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>
 <CANzH6eunH=zV2oh01QE-DOFXSU+TzhG6dhhMzedDPvtF4eK0bQ@mail.gmail.com>
 <D32708D0-CCF8-477B-A52F-0E2F2C3C1645@twistedmatrix.com>
Message-ID: <CANzH6etqY4F6i_rJ2VSd=zotE0NPJB29ifvckg6JdENGrtGZyg@mail.gmail.com>

>>You can't use connectSSL in combination with UNIX sockets

I'm working on a rewrite of this system which will use endpoints once
complete.  So far I've got basic server and client endpoints running over
TLS through our reverse proxy.  Its working as expected on a given port,
but I'd rather have the server listen on a unix socket.  Based on your
comment it sounds possible for a client to connect to a socket over TLS,
but is it possible for a server to listen on one over TLS?  I've tried
several different approaches and can't seem to find a way.

I tried wrapping a UnixServerEndpoint with my CertificateOptions, then
tried to find a way to pass a socket path into a SSL4ServerEndpoint
Can't seem to find a corresponding wraperServerTLS to the client function
Tim posted.

Thanks for your help, and thanks for writing Twisted.  :)

~Sean

On Sat, Aug 18, 2018 at 2:12 PM Glyph <glyph at twistedmatrix.com> wrote:

> On Aug 17, 2018, at 9:24 AM, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
>
>
> Starting to look over the docs and I realize I might have just been able
> to incorporate the `optionsForClientTLS` into what I was already using.
>
> I was using `reactor.connectSSL()` with a default
> ``ssl.ClientContextFactory()` so I think I can make my own
> sslClientContextFactory with `optionsForClientTLS(hostname=host)` and pass
> that in to connectSSL instead.
>
> It would look something like this:
>
> reactor.connectSSL(hostname, port, MyProtocolClientFactory(),
> optionsForClientTLS(hostname=hostname))
>
> I'll give it a try and play around with it.  If it doesn't work, I'll head
> back over to the endpoint examples.
>
>
> This should indeed work for now, but adopting endpoints is a more
> forward-looking approach; "connectSSL" is a much less flexible API, and
> will hopefully someday be removed.
>
> For example:
>
>
>    1. You can't use connectSSL in combination with UNIX sockets
>    2. When we (one day) have a client version of the PROXY endpoint, you
>    won't be able to use that with connectSSL
>    3. You can't do TLS-in-TLS tunneling with connectSSL for backhaul
>    connections
>
>
> It's just generally harder to switch to other secure transports if you're
> not using the endpoint APIs.
>
> Thanks for using Twisted,
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180830/d5b98d1c/attachment.html>

From rshea at thecubagroup.com  Thu Aug 30 17:41:55 2018
From: rshea at thecubagroup.com (Richard Shea)
Date: Fri, 31 Aug 2018 11:41:55 +1200
Subject: [Twisted-Python] Using twistd with -c option causes permission
 error
In-Reply-To: <CAEeXt4NVJ_RmcMeLJ+M11hpc_fi33TCqhM6+rt+DbdxzhC+1ZA@mail.gmail.com>
References: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
 <2380012.1niq0D0mgj@hyperion>
 <1535450079.1972483.1488535536.757AFFB3@webmail.messagingengine.com>
 <CAEeXt4NVJ_RmcMeLJ+M11hpc_fi33TCqhM6+rt+DbdxzhC+1ZA@mail.gmail.com>
Message-ID: <1535672515.2448340.1491920192.2D87259D@webmail.messagingengine.com>

On Wed, 29 Aug 2018, at 11:04 PM, Jean-Paul Calderone wrote:
> On Tue, Aug 28, 2018 at 5:54 AM Richard Shea
> <rshea at thecubagroup.com> wrote:>> 
>> With Apache the process starts as root, reads the key and then makes
>> the apache process run as a different, less powerful, user  but I
>> can't see how you can do the equivalent for twistd ? Am I overlooking
>> something ?>> 
> 
> twistd has `--uid` and `--gid` options for switching to another user
> after `privilegedStartService` runs.  However, I'm not sure how much
> help this will be since there is a strong desire to replace twistd
> with twist and twist does not have these features.  Perhaps someone
> who has been working on twist can explain the preferred workflow using
> that tool.
Thanks. I had no idea that --uid/--gid did anything other than run
entirely as that user/group.
Unfortunately I'm using twistd to just run a wsgi app (Flask) and so, I
assume, that whatever I provide as 'uid' / 'gid' to twistd will just be
what it runs as .
However i'm writing this without having had a chance to try it, maybe
it reads the cert/key stuff as the user who started the process and
then drops down to 'uid/'gid' ... like I way I haven't yet had a
chance to try.
Thanks for your reply.


>  
>> 
>> Thanks
>> 
>>  _______________________________________________
>>  Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _________________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180831/b58afee0/attachment.html>

From glyph at twistedmatrix.com  Fri Aug 31 00:53:17 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 30 Aug 2018 23:53:17 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6etqY4F6i_rJ2VSd=zotE0NPJB29ifvckg6JdENGrtGZyg@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
 <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
 <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>
 <CANzH6eunH=zV2oh01QE-DOFXSU+TzhG6dhhMzedDPvtF4eK0bQ@mail.gmail.com>
 <D32708D0-CCF8-477B-A52F-0E2F2C3C1645@twistedmatrix.com>
 <CANzH6etqY4F6i_rJ2VSd=zotE0NPJB29ifvckg6JdENGrtGZyg@mail.gmail.com>
Message-ID: <3CD87D92-3F75-48A4-996C-2F0D7F47852E@twistedmatrix.com>

On Aug 30, 2018, at 1:22 PM, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
> Can't seem to find a corresponding wraperServerTLS to the client function Tim posted.

There is no wrapServerTLS right now in Twisted itself.

https://github.com/glyph/txsni/blob/master/txsni/tlsendpoint.py <https://github.com/glyph/txsni/blob/master/txsni/tlsendpoint.py> is available in txsni though; arguably all of txsni should be in Twisted, but certainly this should be.  If you wanted to write a PR that added some docstrings and unit tests that would be great :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180830/31655f5d/attachment.html>

From glyph at twistedmatrix.com  Fri Aug 31 01:04:37 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 31 Aug 2018 00:04:37 -0700
Subject: [Twisted-Python] Using twistd with -c option causes permission
 error
In-Reply-To: <CAEeXt4NVJ_RmcMeLJ+M11hpc_fi33TCqhM6+rt+DbdxzhC+1ZA@mail.gmail.com>
References: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
 <2380012.1niq0D0mgj@hyperion>
 <1535450079.1972483.1488535536.757AFFB3@webmail.messagingengine.com>
 <CAEeXt4NVJ_RmcMeLJ+M11hpc_fi33TCqhM6+rt+DbdxzhC+1ZA@mail.gmail.com>
Message-ID: <8FFE3993-2742-40B2-89C3-D15763F1BECE@twistedmatrix.com>



> On Aug 29, 2018, at 4:04 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Tue, Aug 28, 2018 at 5:54 AM Richard Shea <rshea at thecubagroup.com <mailto:rshea at thecubagroup.com>> wrote:
> 
> With Apache the process starts as root, reads the key and then makes the apache process run as a different, less powerful, user  but I can't see how you can do the equivalent for twistd ? Am I overlooking something ?
> 
> 
> twistd has `--uid` and `--gid` options for switching to another user after `privilegedStartService` runs.  However, I'm not sure how much help this will be since there is a strong desire to replace twistd with twist and twist does not have these features.  Perhaps someone who has been working on twist can explain the preferred workflow using that tool.

The origin of the desire to replace twistd with twist is that twistd represents an older, and worse, generation of UNIX administration practices.

twistd assumes privilege separation is accomplished via daemons that start up (and, implicitly, import all their code) as root, and then carefully shed privileges on their own.  this assumption was based in large part on the idea that twistd will want to bind privileged ports, and only root can bind privileged ports.  twist assumes privilege separation is accomplished by starting your process in a container, or under a process supervision regime (such as systemd) which can hand it a privileged listening port.
twistd assumes that process supervision is accomplished by an elaborate and frankly never quite fully specified dance involving PID files, self-truncation of logs, signal handling, and thus, writes pidfiles and daemonizes by default.  twist assumes that process supervision is accomplished by using a process supervisor; either a container runtime, or systemd, or something like supervisord or ncolony.

However, use of `twist` is gently encouraged, not mandated, as there are lots of old/bad systems where new versions of Twisted run, and will continue to run for some time.  If your deployment constraints are better satisfied by twistd, by all means continue using it, report bugs in it, file PRs that fix those bugs.

However, there are a long list of reasons why this new idiom is a lot better than the older one.  One specific problem with read-certs-then-shed-privileges is that it means your process can never receive a new certificate without restarting; so no certificate rotation, no adding new subdomains on the fly.  If your process has permissions to read and act on the certificate in memory, what benefit is there to making sure that it can't read it out of the filesystem a second time?  If it's bound to a privileged port, a compromised node could provision its own certificate via Let's Encrypt anyway.

So my suggestion would be to just provide the process long-lived read access to the certificates, via whatever access control mechanisms are available to you.  If all you've got are filesystem permissions, u+rw g+r should do the trick, and then just put the user running `twistd` into the appropriate group.

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180831/2cc6a82c/attachment-0001.html>

From barry.scott at forcepoint.com  Wed Aug  1 10:34:46 2018
From: barry.scott at forcepoint.com (Barry Scott)
Date: Wed, 01 Aug 2018 17:34:46 +0100
Subject: [Twisted-Python] I preparing a patch but the buildbot OSX seems to
 be broken.
Message-ID: <1675085.KhK6Q9J0iJ@barry-scott-desktop>

I'm working on my first path for twisted and learning your workflow.

https://github.com/twisted/twisted/pull/1044

The CI pipe line has been helpful in spotting things I missed but for the last 
few hours this job is not completing.

buildbot/osx10.11-py2.7-coverage Expected — Waiting for status to be reported 

Is this something you can fix?

Barry





From hawkowl at atleastfornow.net  Wed Aug  1 11:30:53 2018
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Thu, 2 Aug 2018 03:30:53 +1000
Subject: [Twisted-Python] I preparing a patch but the buildbot OSX seems
 to be broken.
In-Reply-To: <1675085.KhK6Q9J0iJ@barry-scott-desktop>
References: <1675085.KhK6Q9J0iJ@barry-scott-desktop>
Message-ID: <4df58218-3f0e-4858-debc-b8bda3ab1fa6@atleastfornow.net>

Hi Barry,

That builder is on our buildbot infrastructure, which doesn't run 
automatically. When your patch undergoes review, we push it up to our 
buildbot for tests more thorough than we can get on public CI (different 
distros, etc). We don't run code we haven't looked at first on them, so 
it has to be a manual push.

So, don't worry about that builder for now. It's mainly just set as 
required so us committers remember to push up non-committer changes to 
our buildbots before we merge patches, as GitHub will collapse it into 
an "all tests passed" otherwise.

- Amber


On 08/02/2018 02:34 AM, Barry Scott wrote:
> I'm working on my first path for twisted and learning your workflow.
>
> https://github.com/twisted/twisted/pull/1044
>
> The CI pipe line has been helpful in spotting things I missed but for the last
> few hours this job is not completing.
>
> buildbot/osx10.11-py2.7-coverage Expected — Waiting for status to be reported
>
> Is this something you can fix?
>
> Barry
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From barry.scott at forcepoint.com  Fri Aug  3 05:11:16 2018
From: barry.scott at forcepoint.com (Barry Scott)
Date: Fri, 03 Aug 2018 12:11:16 +0100
Subject: [Twisted-Python] Why you are starting to see patch from me
Message-ID: <7049303.WjQMQ1R8VM@barry-scott-desktop>

I thought you might like a little background on why I'm starting to
send in patches.

The code base I'm working on uses Twisted 2.0 with lots of patches
and some back ports for newer Twisted. We also use Nevow.
The code started life a long time ago.

I have been porting the code to use current Twisted. I have only 
needed to make two small patches to Twisted itself to port to 18.4.
Tickets #9503 and #9504.

Our code does use a lot of the private interfaces in Twisted.
We know we are at risk of internals changing and breaking us,
but the public interfaces do not allow us to implement the features
of the product.

Barry





From barry.scott at forcepoint.com  Fri Aug  3 08:20:53 2018
From: barry.scott at forcepoint.com (Barry Scott)
Date: Fri, 03 Aug 2018 15:20:53 +0100
Subject: [Twisted-Python] How do recommend I run epytext?
Message-ID: <4704851.Gm61i9jL3o@barry-scott-desktop>

The tox checking does not cover the epytext checks it seems.

How do you recommend I have epytext checked for a patch?

Barry





From mithrandi at mithrandi.net  Fri Aug  3 09:17:15 2018
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 3 Aug 2018 17:17:15 +0200
Subject: [Twisted-Python] How do recommend I run epytext?
In-Reply-To: <4704851.Gm61i9jL3o@barry-scott-desktop>
References: <4704851.Gm61i9jL3o@barry-scott-desktop>
Message-ID: <CAMcKhMRd7FkD6COy-vPA_nXWVX6GNCJ6cO57pCChPShhMZ0deg@mail.gmail.com>

On Fri, 3 Aug 2018 at 16:25 Barry Scott <barry.scott at forcepoint.com> wrote:

> The tox checking does not cover the epytext checks it seems.
>
> How do you recommend I have epytext checked for a patch?
>

Twisted uses pydoctor for generating API documentation; I believe tox -e
apidocs is what you want to run it:

https://github.com/twisted/twisted/blob/ee535041258e7ef0b3223d2e12cd9aaa0bc2289f/tox.ini#L124
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180803/96a331bd/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Aug  4 03:16:58 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 4 Aug 2018 02:16:58 -0700
Subject: [Twisted-Python] Why you are starting to see patch from me
In-Reply-To: <7049303.WjQMQ1R8VM@barry-scott-desktop>
References: <7049303.WjQMQ1R8VM@barry-scott-desktop>
Message-ID: <D4C4D781-ADE3-458F-BE58-A4A71ECFA398@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180804/8c63357c/attachment-0002.html>

From trac at twistedmatrix.com  Sun Aug  5 00:05:18 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 05 Aug 2018 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1533449118.1.2249579942360433723@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180805/111b85c3/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Aug  8 07:05:54 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2018 09:05:54 -0400
Subject: [Twisted-Python] [ANN] txkube 0.3.0
Message-ID: <CAEeXt4PBeGC4_=BPkOT2kS1cbXQrOUe0Wr9rf-aCmFW5iBF3Mw@mail.gmail.com>

Hello all,

I'm pleased to announce a new release of txkube, a Twisted-based library
for interacting with Kubernetes using the HTTP API.  The big news for this
release is support for Python 3.6.  Also included is support for multiple
configuration files in the KUBECONFIG environment variable which allows for
better configuration management practices.

Here is an example of txkube usage, taken from the README:

   from __future__ import print_function
   from twisted.internet.task import react

   from txkube import network_kubernetes_from_context

   @react
   def main(reactor):
       k8s = network_kubernetes_from_context(reactor, u"minikube")
       d = k8s.versioned_client()
       d.addCallback(
           lambda client: client.list(client.model.v1.Namespace)
       )
       d.addCallback(print)
       return d

You can download txkube from PyPI <https://pypi.python.org/pypi>
You can contribute to its development on GitHub
<https://github.com/LeastAuthority/txkube>.

Thanks to Least Authority TFA GmbH <https://leastauthority.com/> for
sponsoring this development and to Craig Rodrigues for his efforts on
Python 3 porting work.

Jean-Paul Calderone
<https://as.ynchrono.us/>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180808/e7c3b804/attachment-0002.html>

From alex at seedanddew.com  Wed Aug  8 10:40:36 2018
From: alex at seedanddew.com (Alex Georgie)
Date: Wed, 8 Aug 2018 09:40:36 -0700
Subject: [Twisted-Python] Partnership possibility with Twisted
Message-ID: <CAM=0JLLSAWE+Esw5xWdpwAxD2jz2b4fzB6Ddop3Grp=hvDRpdA@mail.gmail.com>

Hi everyone,

I'm Alex from SeedAndDew. I was chatting with Moshe about SeedAndDew and
whether Twisted would like to participate and he mentioned bringing it to
the mailing list to get your opinions.

SeedAndDew is a common subscription platform that allows users to
contribute to a number of open source projects with a single subscription.
The idea here is that it's a lot easier to get people to contribute
$10/month to every open source project they work with than it is to get
them to contribute $5/month for a specific project. The subscription
revenue will be distributed based on the amount of time users spend reading
documentation of the respective project which I anticipate will correspond
well with actual use. So if a user spends 10% of their time reading the
Twisted documentation, you get 10% of the subscription revenue.

Our goal is to increase the pool of people who contribute to open source by
removing the friction of having to manage subscriptions paid to specific
projects and changing it as your stack and interests change. This would be
a passive income source that doesn't require any further work outside of
the initial integration.

So far we have 10 projects including SQL Alchemy, RSpec, Bundler, Browsh
and Parse. Does this seem like something you would be interested in?

Thanks,

Alex

<http://mailstat.us/tr/opt-out?guid=yohzugwjkld0u3s>
<http://mailstat.us/tr/t/dummy>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180808/55f2c535/attachment-0002.html>

From rodrigc at crodrigues.org  Wed Aug  8 10:52:49 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 8 Aug 2018 09:52:49 -0700
Subject: [Twisted-Python] subunitreporter 18.7.5
In-Reply-To: <CAEeXt4O8iDEWkPb558kX2hmiMCe4FygELO8kFLB3LJazw8-JEA@mail.gmail.com>
References: <CAEeXt4O8iDEWkPb558kX2hmiMCe4FygELO8kFLB3LJazw8-JEA@mail.gmail.com>
Message-ID: <CAG=rPVf7ppnAzE+0d+-y7MyRLUnpbbs042XObbqjoy6vazxchA@mail.gmail.com>

On Mon, Jul 9, 2018 at 12:03 PM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

>
> One useful thing to do with a subunit v2 stream is convert it to junitxml
> and let CircleCI ingest it.  This is precisely the reason I've written this
>

Jenkins also uses junitxml to parse test results.  This is highly useful.
Would it be worth modifying twisted's setup.py to pull in subunitreporter
as an optional module?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180808/a055c34f/attachment-0002.html>

From meejah at meejah.ca  Wed Aug  8 17:21:02 2018
From: meejah at meejah.ca (meejah)
Date: Thu, 09 Aug 2018 03:21:02 +0400
Subject: [Twisted-Python] Tahoe 1.13.0
Message-ID: <86va8kbg2p.fsf@atlantis.meejah.ca>


ANNOUNCING Tahoe, the Least-Authority File Store, v1.13.0

The Tahoe-LAFS team is pleased to announce version 1.13.0 of
Tahoe-LAFS, an extremely reliable decentralized storage
system. Get it with "pip install tahoe-lafs", or download a
tarball here:

  https://tahoe-lafs.org/downloads

Tahoe-LAFS is the first distributed storage system to offer
"provider-independent security" — meaning that not even the
operators of your storage servers can read or alter your data
without your consent. Here is the one-page explanation of its
unique security and fault-tolerance properties:

  https://tahoe-lafs.readthedocs.org/en/latest/about.html

The previous stable release of Tahoe-LAFS was v1.12.1,
released on January 18, 2017.

v1.13.0 fixes several problems with the magic-folder frontend, adds
--json to more commands, adds the "tahoe status" and "tahoe
magic-folder status" commands and some internal refactoring. It is
also now possible to have multiple magic folders in a single Tahoe
client.

A long-standing feature to improve the share-placement algorithm
("servers of happiness") has been updated and merged. "tahoe backup"
now reports progress.

New clients can now be added to a grid using "magic wormhole" [14], a
SPAKE2-based method of securely connecting two computers. This adds
the "tahoe invite" command for a current grid-participant to invite a
new client and a corresponding option "tahoe create-client --join" for
the other side. These use a server at ``wormhole.tahoe-lafs.org``
currently operated by Least Authority.

Please see ``NEWS.rst`` for a more complete list of changes.


WHAT IS IT GOOD FOR?

With Tahoe-LAFS, you distribute your data across multiple
servers. Even if some of the servers fail or are taken over
by an attacker, the entire file store continues to function
correctly, preserving your privacy and security. You can
easily share specific files and directories with other people.

In addition to the core storage system itself, volunteers
have built other projects on top of Tahoe-LAFS and have
integrated Tahoe-LAFS with existing systems, including
Windows, JavaScript, iPhone, Android, Hadoop, Flume, Django,
Puppet, bzr, mercurial, perforce, duplicity, TiddlyWiki, and
more. See the Related Projects page on the wiki [3].

We believe that strong cryptography, Free and Open Source
Software, erasure coding, and principled engineering practices
make Tahoe-LAFS safer than RAID, removable drive, tape,
on-line backup or cloud storage.

This software is developed under test-driven development, and
there are no known bugs or security flaws which would
compromise confidentiality or data integrity under recommended
use. (For all important issues that we are currently aware of
please see the known_issues.rst file [2].)


COMPATIBILITY

This release should be compatible with the version 1 series of
Tahoe-LAFS. Clients from this release can write files and
directories in the format used by clients of all versions back
to v1.0 (which was released March 25, 2008). Clients from this
release can read files and directories produced by clients of
all versions since v1.0.

Network connections are limited by the Introducer protocol in
use. If the Introducer is running v1.10 or v1.11, then servers
from this release (v1.12) can serve clients of all versions
back to v1.0 . If it is running v1.12, then they can only
serve clients back to v1.10. Clients from this release can use
servers back to v1.10, but not older servers.

Except for the new optional MDMF format, we have not made any
intentional compatibility changes. However we do not yet have
the test infrastructure to continuously verify that all new
versions are interoperable with previous versions. We intend
to build such an infrastructure in the future.

This is the twenty-first release in the version 1 series. This
series of Tahoe-LAFS will be actively supported and maintained
for the foreseeable future, and future versions of Tahoe-LAFS
will retain the ability to read and write files compatible
with this series.


LICENCE

You may use this package under the GNU General Public License,
version 2 or, at your option, any later version. See the file
"COPYING.GPL" [4] for the terms of the GNU General Public
License, version 2.

You may use this package under the Transitive Grace Period
Public Licence, version 1 or, at your option, any later
version. (The Transitive Grace Period Public Licence has
requirements similar to the GPL except that it allows you to
delay for up to twelve months after you redistribute a derived
work before releasing the source code of your derived work.)
See the file "COPYING.TGPPL.rst" [5] for the terms of the
Transitive Grace Period Public Licence, version 1.

(You may choose to use this package under the terms of either
licence, at your option.)


INSTALLATION

Tahoe-LAFS works on Linux, Mac OS X, Windows, Solaris, *BSD,
and probably most other systems. Start with "docs/INSTALL.rst"
[6].


HACKING AND COMMUNITY

Please join us on the mailing list [7]. Patches are gratefully
accepted -- the Roadmap page [8] shows the next improvements
that we plan to make and CREDITS [9] lists the names of people
who've contributed to the project. The Dev page [10] contains
resources for hackers.


SPONSORSHIP

A special thanks goes out to Least Authority Enterprises [12],
which employs several Tahoe-LAFS developers, for their
continued support.

HACK TAHOE-LAFS!

If you can find a security flaw in Tahoe-LAFS which is serious
enough that we feel compelled to warn our users and issue a fix,
then we will award you with a customized t-shirt with your
exploit printed on it and add you to the "Hack Tahoe-LAFS Hall
Of Fame" [13].


ACKNOWLEDGEMENTS

This is the eighteenth release of Tahoe-LAFS to be created
solely as a labor of love by volunteers. Thank you very much
to the team of "hackers in the public interest" who make
Tahoe-LAFS possible.

meejah
on behalf of the Tahoe-LAFS team

August 5, 2018


[1] https://github.com/tahoe-lafs/tahoe-lafs/blob/tahoe-lafs-1.13.0/NEWS.rst
[2] https://github.com/tahoe-lafs/tahoe-lafs/blob/master/docs/known_issues.rst
[3] https://tahoe-lafs.org/trac/tahoe-lafs/wiki/RelatedProjects
[4] https://github.com/tahoe-lafs/tahoe-lafs/blob/tahoe-lafs-1.13.0/COPYING.GPL
[5] https://github.com/tahoe-lafs/tahoe-lafs/blob/tahoe-lafs-1.13.0/COPYING.TGPPL.rst
[6] https://tahoe-lafs.readthedocs.org/en/tahoe-lafs-1.13.0/INSTALL.html
[7] https://tahoe-lafs.org/cgi-bin/mailman/listinfo/tahoe-dev
[8] https://tahoe-lafs.org/trac/tahoe-lafs/roadmap
[9] https://github.com/tahoe-lafs/tahoe-lafs/blob/master/CREDITS
[10] https://tahoe-lafs.org/trac/tahoe-lafs/wiki/Dev
[12] https://leastauthority.com/
[13] https://tahoe-lafs.org/hacktahoelafs/
[14] https://github.com/warner/magic-wormhole



From glyph at twistedmatrix.com  Sat Aug 11 18:01:23 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 11 Aug 2018 17:01:23 -0700
Subject: [Twisted-Python] Partnership possibility with Twisted
In-Reply-To: <CAM=0JLLSAWE+Esw5xWdpwAxD2jz2b4fzB6Ddop3Grp=hvDRpdA@mail.gmail.com>
References: <CAM=0JLLSAWE+Esw5xWdpwAxD2jz2b4fzB6Ddop3Grp=hvDRpdA@mail.gmail.com>
Message-ID: <8607C338-53DB-4099-BFE2-2F10A6921A5A@twistedmatrix.com>

On Aug 8, 2018, at 9:40 AM, Alex Georgie <alex at seedanddew.com> wrote:
> 
> Hi everyone,
> 
> I'm Alex from SeedAndDew. I was chatting with Moshe about SeedAndDew and whether Twisted would like to participate and he mentioned bringing it to the mailing list to get your opinions.
> 
> SeedAndDew is a common subscription platform that allows users to contribute to a number of open source projects with a single subscription. The idea here is that it's a lot easier to get people to contribute $10/month to every open source  project they work with than it is to get them to contribute $5/month for a specific project. The subscription revenue will be distributed based on the amount of time users spend reading documentation of the respective project which I anticipate will correspond well with actual use. So if a user spends 10% of their time reading the Twisted documentation, you get 10% of the subscription revenue.
> 
> Our goal is to increase the pool of people who contribute to open source by removing the friction of having to manage subscriptions paid to specific projects and changing it as your stack and interests change. This would be a passive income source that doesn't require any further work outside of the initial integration.
> 
> So far we have 10 projects including SQL Alchemy, RSpec, Bundler, Browsh and Parse. Does this seem like something you would be interested in?

We'd definitely be interested in this, but you probably want to contact the Software Freedom Conservancy - https://sfconservancy.org/about/contact/ <https://sfconservancy.org/about/contact/> - to work out the details of how this might work financially.

Thanks for reaching out!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180811/7ac857a3/attachment-0002.html>

From trac at twistedmatrix.com  Sun Aug 12 00:05:19 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 12 Aug 2018 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1534053919.78.4789536637416479460@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180812/cdbe4030/attachment-0002.html>

From alex at seedanddew.com  Mon Aug 13 10:05:05 2018
From: alex at seedanddew.com (Alex Georgie)
Date: Mon, 13 Aug 2018 09:05:05 -0700
Subject: [Twisted-Python] Partnership possibility with Twisted
In-Reply-To: <8607C338-53DB-4099-BFE2-2F10A6921A5A@twistedmatrix.com>
References: <CAM=0JLLSAWE+Esw5xWdpwAxD2jz2b4fzB6Ddop3Grp=hvDRpdA@mail.gmail.com>
 <8607C338-53DB-4099-BFE2-2F10A6921A5A@twistedmatrix.com>
Message-ID: <CAM=0JL+63QymnCf1d1UMhrqag39YJti=G7Y_33-NHj+A9T+7Ng@mail.gmail.com>

Thanks Glyph! Shooting them an email now.

On Sat, Aug 11, 2018 at 5:01 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Aug 8, 2018, at 9:40 AM, Alex Georgie <alex at seedanddew.com> wrote:
>
>
> Hi everyone,
>
> I'm Alex from SeedAndDew. I was chatting with Moshe about SeedAndDew and
> whether Twisted would like to participate and he mentioned bringing it to
> the mailing list to get your opinions.
>
> SeedAndDew is a common subscription platform that allows users to
> contribute to a number of open source projects with a single subscription.
> The idea here is that it's a lot easier to get people to contribute
> $10/month to every open source project they work with than it is to get
> them to contribute $5/month for a specific project. The subscription
> revenue will be distributed based on the amount of time users spend reading
> documentation of the respective project which I anticipate will correspond
> well with actual use. So if a user spends 10% of their time reading the
> Twisted documentation, you get 10% of the subscription revenue.
>
> Our goal is to increase the pool of people who contribute to open source
> by removing the friction of having to manage subscriptions paid to specific
> projects and changing it as your stack and interests change. This would be
> a passive income source that doesn't require any further work outside of
> the initial integration.
>
> So far we have 10 projects including SQL Alchemy, RSpec, Bundler, Browsh
> and Parse. Does this seem like something you would be interested in?
>
>
> We'd definitely be interested in this, but you probably want to contact
> the Software Freedom Conservancy - https://sfconservancy.org/
> about/contact/ - to work out the details of how this might work
> financially.
>
> Thanks for reaching out!
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180813/d9ea5e03/attachment-0002.html>

From sean.dizazzo at gmail.com  Thu Aug 16 18:25:25 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 16 Aug 2018 17:25:25 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of IP
 address?
Message-ID: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>

Hi all!

After I start a reactor connecting to a specific hostname and port, I do my
thing and then call transport.write() to send the data to the peer.

>From what I can tell, though, the hostname is resolved, and the data is
written back to the ip address itself, instead of the hostname I started
the reactor with.

This is a problem in my case because we are using nginx's ssl_preread
server_name directive to route several different streams all coming in on
the same ip address.

So the write() method needs to explicitly use the hostname to route the
packet properly.

So... Is there any way to have transport.write() use the hostname given
instead of it's resolved IP address? Or am I missing something?


Crossposted on StackOverflow:
https://stackoverflow.com/questions/51886720/is-there-a-way-to-force-twisted-internet-interfaces-itransport-to-write-to-a-g

Thank you for any insight you may have!

~Sean
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/ebec54c1/attachment-0002.html>

From adi at roiban.ro  Thu Aug 16 18:49:49 2018
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 17 Aug 2018 01:49:49 +0100
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
Message-ID: <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>

On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
>
> Hi all!
>
> After I start a reactor connecting to a specific hostname and port, I do my thing and then call transport.write() to send the data to the peer.
>
> From what I can tell, though, the hostname is resolved, and the data is written back to the ip address itself, instead of the hostname I started the reactor with.
>
> This is a problem in my case because we are using nginx's ssl_preread server_name directive to route several different streams all coming in on the same ip address.
>
> So the write() method needs to explicitly use the hostname to route the packet properly.
>
> So... Is there any way to have transport.write() use the hostname given instead of it's resolved IP address? Or am I missing something?
>

I assume you are using TCP here.

I guess that you are missing something.

If you want each write to go over its own way / route and have the
hostname re-resolved you should open + write + close a connection for
each write.

But I think that there is something else there and this is now what you want :)
Do you use HTTP or have a custom protocol?

Cheers,

Adi Roiban



From sean.dizazzo at gmail.com  Thu Aug 16 19:14:59 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 16 Aug 2018 18:14:59 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
Message-ID: <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>

Thanks for responding, Adi!

I don't want each packet to go it's own way from Twisted.  They all go to
the same place from each instance of the server/protocol.  They go to my
custom protocol listening on another local port.

It's just that I'm serving up several different ssl apps on the same nginx
server, and nginx uses the hostname to route the packets.  So in this case,
traffic coming in on http.example.com:443 might be routed to an https app
listening on a socket, and traffic coming in to myprotocol.example.com:443
should be routed to my own protocol listening on port 9999.  So if nginx
doesn't get the hostname, it doesn't know to route the packet to my custom
protocol instead of the web server.  Does that make sense?

It seems that the transport is resolving the hostname to an ip address and
then sending the traffic to the generic ip which is not enough info for
nginx to route the packet correctly.

On Thu, Aug 16, 2018 at 5:49 PM, Adi Roiban <adi at roiban.ro> wrote:

> On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
> >
> > Hi all!
> >
> > After I start a reactor connecting to a specific hostname and port, I do
> my thing and then call transport.write() to send the data to the peer.
> >
> > From what I can tell, though, the hostname is resolved, and the data is
> written back to the ip address itself, instead of the hostname I started
> the reactor with.
> >
> > This is a problem in my case because we are using nginx's ssl_preread
> server_name directive to route several different streams all coming in on
> the same ip address.
> >
> > So the write() method needs to explicitly use the hostname to route the
> packet properly.
> >
> > So... Is there any way to have transport.write() use the hostname given
> instead of it's resolved IP address? Or am I missing something?
> >
>
> I assume you are using TCP here.
>
> I guess that you are missing something.
>
> If you want each write to go over its own way / route and have the
> hostname re-resolved you should open + write + close a connection for
> each write.
>
> But I think that there is something else there and this is now what you
> want :)
> Do you use HTTP or have a custom protocol?
>
> Cheers,
>
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/57152a01/attachment-0002.html>

From sean.dizazzo at gmail.com  Thu Aug 16 19:44:35 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 16 Aug 2018 18:44:35 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
Message-ID: <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>

I guess thats still kind of confusing without making something more clear...

In my example, both myprotocol.example.com and test.example.com DNS records
would point to the same IP address.  One nginx instance then listens on
that IP and serves up several ssl apps. They go through a "mapper" that
uses the SNI and the ssl_preread directive to read the destination hostname
of the packet to determine which app to route the traffic to.

I just want transport.write() to not resolve the ip address of the host I
pass in.  Everything will work if it connects and sends packets to
myprotocol.example.com:443 instead of 23.23.23.23:443.

Nginx reference:
http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html

On Thu, Aug 16, 2018 at 6:14 PM, Sean DiZazzo <sean.dizazzo at gmail.com>
wrote:

> Thanks for responding, Adi!
>
> I don't want each packet to go it's own way from Twisted.  They all go to
> the same place from each instance of the server/protocol.  They go to my
> custom protocol listening on another local port.
>
> It's just that I'm serving up several different ssl apps on the same nginx
> server, and nginx uses the hostname to route the packets.  So in this case,
> traffic coming in on http.example.com:443 might be routed to an https app
> listening on a socket, and traffic coming in to myprotocol.example.com:443
> should be routed to my own protocol listening on port 9999.  So if nginx
> doesn't get the hostname, it doesn't know to route the packet to my custom
> protocol instead of the web server.  Does that make sense?
>
> It seems that the transport is resolving the hostname to an ip address and
> then sending the traffic to the generic ip which is not enough info for
> nginx to route the packet correctly.
>
> On Thu, Aug 16, 2018 at 5:49 PM, Adi Roiban <adi at roiban.ro> wrote:
>
>> On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com>
>> wrote:
>> >
>> > Hi all!
>> >
>> > After I start a reactor connecting to a specific hostname and port, I
>> do my thing and then call transport.write() to send the data to the peer.
>> >
>> > From what I can tell, though, the hostname is resolved, and the data is
>> written back to the ip address itself, instead of the hostname I started
>> the reactor with.
>> >
>> > This is a problem in my case because we are using nginx's ssl_preread
>> server_name directive to route several different streams all coming in on
>> the same ip address.
>> >
>> > So the write() method needs to explicitly use the hostname to route the
>> packet properly.
>> >
>> > So... Is there any way to have transport.write() use the hostname given
>> instead of it's resolved IP address? Or am I missing something?
>> >
>>
>> I assume you are using TCP here.
>>
>> I guess that you are missing something.
>>
>> If you want each write to go over its own way / route and have the
>> hostname re-resolved you should open + write + close a connection for
>> each write.
>>
>> But I think that there is something else there and this is now what you
>> want :)
>> Do you use HTTP or have a custom protocol?
>>
>> Cheers,
>>
>> Adi Roiban
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/a0b346f3/attachment-0002.html>

From twm at freecog.net  Thu Aug 16 21:18:46 2018
From: twm at freecog.net (Tom Most)
Date: Thu, 16 Aug 2018 20:18:46 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
Message-ID: <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>

Hi Sean,

To summarize, you are writing a client application using Twisted which
needs to talk with a service behind an Nginx reverse proxy. The reverse
proxy requires use of TLS (a.k.a. SSL) and SNI to identify the
appropriate backend service.
If you were using HTTP, Twisted's twisted.web.client.Agent[1] API
already does the right thing here -- it takes the hostname from the URL
it is given and populates SNI.
For your custom protocol on top of TLS, you should use a TLS endpoint to
connect to the server from your client. This is a little difficult to
discover because there isn't a TLS endpoint per se -- instead, there is
a function which wraps another endpoint. See the TLS section in the
endpoint documentation[2], which includes this example:
wrapped = HostnameEndpoint('example.com', 443) contextFactory =
optionsForClientTLS(hostname=u'example.com') endpoint =
wrapClientTLS(contextFactory, wrapped) conn =
endpoint.connect(Factory.forProtocol(Protocol))
I'll break this down:

1. HostnameEndpoint will resolve the hostname to an IP address and
   creates a TCP connection to port 443.2. The optionsForClientTLS[3] function generates an object which
   represents the TLS connection options. Importantly, it enables SNI
   based on the hostname passed to it.3. wrapClientTLS[4] returns an endpoint which layers TLS on top of the
   plain TCP connection generated by HostnameEndpoint. It also takes the
   TLS options as an argument.4. conn is a Deferred which will fire with a protocol instance generated
   by the factory passed to connect().
This is basically what Agent does internally, as I understand it.

Hope this helps,
Tom

On Thu, Aug 16, 2018, at 6:44 PM, Sean DiZazzo wrote:
> I guess thats still kind of confusing without making something more
> clear...> 
> In my example, both myprotocol.example.com and test.example.com DNS
> records would point to the same IP address.  One nginx instance then
> listens on that IP and serves up several ssl apps. They go through a
> "mapper" that uses the SNI and the ssl_preread directive to read the
> destination hostname of the packet to determine which app to route the
> traffic to.> 
> I just want transport.write() to not resolve the ip address of the
> host I pass in.  Everything will work if it connects and sends packets
> to myprotocol.example.com:443[5] instead of 23.23.23.23:443.> 
> Nginx reference:
> http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html
> 
> On Thu, Aug 16, 2018 at 6:14 PM, Sean DiZazzo
> <sean.dizazzo at gmail.com> wrote:>> Thanks for responding, Adi!
>> 
>> I don't want each packet to go it's own way from Twisted.  They all
>> go to the same place from each instance of the server/protocol.  They
>> go to my custom protocol listening on another local port.>> 
>> It's just that I'm serving up several different ssl apps on the same
>> nginx server, and nginx uses the hostname to route the packets.  So
>> in this case, traffic coming in on http.example.com:443 might be
>> routed to an https app listening on a socket, and traffic coming in
>> to myprotocol.example.com:443 should be routed to my own protocol
>> listening on port 9999.  So if nginx doesn't get the hostname, it
>> doesn't know to route the packet to my custom protocol instead of the
>> web server.  Does that make sense?>> 
>> It seems that the transport is resolving the hostname to an ip
>> address and then sending the traffic to the generic ip which is not
>> enough info for nginx to route the packet correctly.>> 
>> On Thu, Aug 16, 2018 at 5:49 PM, Adi Roiban <adi at roiban.ro> wrote:
>>> On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com>
>>> wrote:
>>>  >
>>>  > Hi all!
>>>  >
>>>  > After I start a reactor connecting to a specific hostname and
>>>  > port, I do my thing and then call transport.write() to send the
>>>  > data to the peer.
>>>  >
>>>  > From what I can tell, though, the hostname is resolved, and the
>>>  > data is written back to the ip address itself, instead of the
>>>  > hostname I started the reactor with.
>>>  >
>>>  > This is a problem in my case because we are using nginx's
>>>  > ssl_preread server_name directive to route several different
>>>  > streams all coming in on the same ip address.
>>>  >
>>>  > So the write() method needs to explicitly use the hostname to
>>>  > route the packet properly.
>>>  >
>>>  > So... Is there any way to have transport.write() use the hostname
>>>  > given instead of it's resolved IP address? Or am I missing
>>>  > something?
>>>  >
>>>
>>> I assume you are using TCP here.>>> 
>>>  I guess that you are missing something.
>>> 
>>>  If you want each write to go over its own way / route and have the>>>  hostname re-resolved you should open + write + close a
>>>  connection for>>>  each write.
>>> 
>>>  But I think that there is something else there and this is now what
>>>  you want :)>>>  Do you use HTTP or have a custom protocol?
>>> 
>>>  Cheers,
>>> 
>>>  Adi Roiban
>>> 
>>>  _______________________________________________
>>>  Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _________________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


Links:

  1. https://twistedmatrix.com/documents/current/api/twisted.web.client.Agent.html
  2. https://twistedmatrix.com/documents/current/core/howto/endpoints.html#endpoint-types-included-with-twisted
  3. https://twistedmatrix.com/documents/18.7.0/api/twisted.internet.ssl.optionsForClientTLS.html
  4. https://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#wrapClientTLS
  5. http://myprotocol.example.com:443/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/7159fed4/attachment-0002.html>

From sean.dizazzo at gmail.com  Thu Aug 16 22:06:40 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 16 Aug 2018 21:06:40 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
 <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
Message-ID: <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>

>
> To summarize, you are writing a client application using Twisted which
> needs to talk with a service behind an Nginx reverse proxy. The reverse
> proxy requires use of TLS (a.k.a. SSL) and SNI to identify the appropriate
> backend service.


Why was that so difficult for me?  lol.

This is all great, Tom.  Thank you.  I guess I didn't find this because up
until now I have only played around with endpoints.  The twisted servers I
have running are all using the older interfaces for setting up and handling
connections.  I balked at learning endpoints after struggling to figure out
Twisted the first time.  I guess I'm a holdout.  I had barely even looked
at python 3 until the last few months.  Now I love it.  ;P  Its time for
endpoints to get their turn in the sun.

It will take some rethinking and rewriting, but at least now I have a way
forward.  Thank you!

On Thu, Aug 16, 2018 at 8:18 PM, Tom Most <twm at freecog.net> wrote:

> Hi Sean,
>
> To summarize, you are writing a client application using Twisted which
> needs to talk with a service behind an Nginx reverse proxy. The reverse
> proxy requires use of TLS (a.k.a. SSL) and SNI to identify the appropriate
> backend service.
>
> If you were using HTTP, Twisted's twisted.web.client.Agent
> <https://twistedmatrix.com/documents/current/api/twisted.web.client.Agent.html>
> API already does the right thing here -- it takes the hostname from the URL
> it is given and populates SNI.
>
> For your custom protocol on top of TLS, you should use a TLS endpoint to
> connect to the server from your client. This is a little difficult to
> discover because there isn't a TLS endpoint per se -- instead, there is a
> function which wraps another endpoint. See the TLS section in the
> endpoint documentation
> <https://twistedmatrix.com/documents/current/core/howto/endpoints.html#endpoint-types-included-with-twisted>,
> which includes this example:
>
> wrapped = HostnameEndpoint('example.com', 443)contextFactory = optionsForClientTLS(hostname=u'example.com')endpoint = wrapClientTLS(contextFactory, wrapped)conn = endpoint.connect(Factory.forProtocol(Protocol))
>
>
> I'll break this down:
>
> 1. HostnameEndpoint will resolve the hostname to an IP address and creates
> a TCP connection to port 443.
> 2. The optionsForClientTLS
> <https://twistedmatrix.com/documents/18.7.0/api/twisted.internet.ssl.optionsForClientTLS.html>
> function generates an object which represents the TLS connection options.
> Importantly, it enables SNI based on the hostname passed to it.
> 3. wrapClientTLS
> <https://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#wrapClientTLS>
> returns an endpoint which layers TLS on top of the plain TCP connection
> generated by HostnameEndpoint. It also takes the TLS options as an argument.
> 4. conn is a Deferred which will fire with a protocol instance generated
> by the factory passed to connect().
>
> This is basically what Agent does internally, as I understand it.
>
> Hope this helps,
> Tom
>
> On Thu, Aug 16, 2018, at 6:44 PM, Sean DiZazzo wrote:
>
> I guess thats still kind of confusing without making something more
> clear...
>
> In my example, both myprotocol.example.com and test.example.com DNS
> records would point to the same IP address.  One nginx instance then
> listens on that IP and serves up several ssl apps. They go through a
> "mapper" that uses the SNI and the ssl_preread directive to read the
> destination hostname of the packet to determine which app to route the
> traffic to.
>
> I just want transport.write() to not resolve the ip address of the host I
> pass in.  Everything will work if it connects and sends packets to
> myprotocol.example.com:443 instead of 23.23.23.23:443.
>
> Nginx reference:
> http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html
>
> On Thu, Aug 16, 2018 at 6:14 PM, Sean DiZazzo <sean.dizazzo at gmail.com>
> wrote:
>
> Thanks for responding, Adi!
>
> I don't want each packet to go it's own way from Twisted.  They all go to
> the same place from each instance of the server/protocol.  They go to my
> custom protocol listening on another local port.
>
> It's just that I'm serving up several different ssl apps on the same nginx
> server, and nginx uses the hostname to route the packets.  So in this case,
> traffic coming in on http.example.com:443 might be routed to an https app
> listening on a socket, and traffic coming in to myprotocol.example.com:443
> should be routed to my own protocol listening on port 9999.  So if nginx
> doesn't get the hostname, it doesn't know to route the packet to my custom
> protocol instead of the web server.  Does that make sense?
>
> It seems that the transport is resolving the hostname to an ip address and
> then sending the traffic to the generic ip which is not enough info for
> nginx to route the packet correctly.
>
> On Thu, Aug 16, 2018 at 5:49 PM, Adi Roiban <adi at roiban.ro> wrote:
>
> On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
> >
> > Hi all!
> >
> > After I start a reactor connecting to a specific hostname and port, I do
> my thing and then call transport.write() to send the data to the peer.
> >
> > From what I can tell, though, the hostname is resolved, and the data is
> written back to the ip address itself, instead of the hostname I started
> the reactor with.
> >
> > This is a problem in my case because we are using nginx's ssl_preread
> server_name directive to route several different streams all coming in on
> the same ip address.
> >
> > So the write() method needs to explicitly use the hostname to route the
> packet properly.
> >
> > So... Is there any way to have transport.write() use the hostname given
> instead of it's resolved IP address? Or am I missing something?
> >
>
> I assume you are using TCP here.
>
> I guess that you are missing something.
>
> If you want each write to go over its own way / route and have the
> hostname re-resolved you should open + write + close a connection for
> each write.
>
> But I think that there is something else there and this is now what you
> want :)
> Do you use HTTP or have a custom protocol?
>
> Cheers,
>
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> *_______________________________________________*
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/9bf5c311/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Aug 17 00:43:58 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 16 Aug 2018 23:43:58 -0700
Subject: [Twisted-Python] Fix link on trac for logging in
In-Reply-To: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>
References: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>
Message-ID: <CAG=rPVe958ggEDsDecGt72jzJ41bo_4sd9fN6pXr282CstyCEA@mail.gmail.com>

Is there someone with access to the twistedmatrix Trac source code
who can fix the text at the place where it says *You are not logged in* aftr
clicking on
https://twistedmatrix.com/trac/newticket ?

--
Craig

On Thu, Jun 14, 2018 at 11:21 AM Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Hi,
>
> If a user clicks on this link:
> https://twistedmatrix.com/trac/newticket
>
> They see this text:
>
> You are currently not logged in. You may want to do so
> <https://twistedmatrix.com/trac/login> now.
>
> The link on "do so" is wrong.
>
> *Can someone fix that link to point to the Github login link?*
>
> Ideally, this link:
> https://twistedmatrix.com/trac/login
>
> should redirect to:
> https://twistedmatrix.com/trac/github/login
>
> Because there seem to be various paths that users are hitting the
> first link and then getting confused when they can't log into Trac.
> --
> Craig
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180816/07b57386/attachment-0002.html>

From sean.dizazzo at gmail.com  Fri Aug 17 10:24:48 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Fri, 17 Aug 2018 09:24:48 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
 <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
 <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>
Message-ID: <CANzH6eunH=zV2oh01QE-DOFXSU+TzhG6dhhMzedDPvtF4eK0bQ@mail.gmail.com>

Starting to look over the docs and I realize I might have just been able to
incorporate the `optionsForClientTLS` into what I was already using.

I was using `reactor.connectSSL()` with a default
``ssl.ClientContextFactory()` so I think I can make my own
sslClientContextFactory with `optionsForClientTLS(hostname=host)` and pass
that in to connectSSL instead.

It would look something like this:

reactor.connectSSL(hostname, port, MyProtocolClientFactory(),
optionsForClientTLS(hostname=hostname))

I'll give it a try and play around with it.  If it doesn't work, I'll head
back over to the endpoint examples.

Thanks again!

On Thu, Aug 16, 2018 at 9:06 PM, Sean DiZazzo <sean.dizazzo at gmail.com>
wrote:

> To summarize, you are writing a client application using Twisted which
>> needs to talk with a service behind an Nginx reverse proxy. The reverse
>> proxy requires use of TLS (a.k.a. SSL) and SNI to identify the appropriate
>> backend service.
>
>
> Why was that so difficult for me?  lol.
>
> This is all great, Tom.  Thank you.  I guess I didn't find this because up
> until now I have only played around with endpoints.  The twisted servers I
> have running are all using the older interfaces for setting up and handling
> connections.  I balked at learning endpoints after struggling to figure out
> Twisted the first time.  I guess I'm a holdout.  I had barely even looked
> at python 3 until the last few months.  Now I love it.  ;P  Its time for
> endpoints to get their turn in the sun.
>
> It will take some rethinking and rewriting, but at least now I have a way
> forward.  Thank you!
>
> On Thu, Aug 16, 2018 at 8:18 PM, Tom Most <twm at freecog.net> wrote:
>
>> Hi Sean,
>>
>> To summarize, you are writing a client application using Twisted which
>> needs to talk with a service behind an Nginx reverse proxy. The reverse
>> proxy requires use of TLS (a.k.a. SSL) and SNI to identify the appropriate
>> backend service.
>>
>> If you were using HTTP, Twisted's twisted.web.client.Agent
>> <https://twistedmatrix.com/documents/current/api/twisted.web.client.Agent.html>
>> API already does the right thing here -- it takes the hostname from the URL
>> it is given and populates SNI.
>>
>> For your custom protocol on top of TLS, you should use a TLS endpoint to
>> connect to the server from your client. This is a little difficult to
>> discover because there isn't a TLS endpoint per se -- instead, there is a
>> function which wraps another endpoint. See the TLS section in the
>> endpoint documentation
>> <https://twistedmatrix.com/documents/current/core/howto/endpoints.html#endpoint-types-included-with-twisted>,
>> which includes this example:
>>
>> wrapped = HostnameEndpoint('example.com', 443)contextFactory = optionsForClientTLS(hostname=u'example.com')endpoint = wrapClientTLS(contextFactory, wrapped)conn = endpoint.connect(Factory.forProtocol(Protocol))
>>
>>
>> I'll break this down:
>>
>> 1. HostnameEndpoint will resolve the hostname to an IP address and
>> creates a TCP connection to port 443.
>> 2. The optionsForClientTLS
>> <https://twistedmatrix.com/documents/18.7.0/api/twisted.internet.ssl.optionsForClientTLS.html>
>> function generates an object which represents the TLS connection options.
>> Importantly, it enables SNI based on the hostname passed to it.
>> 3. wrapClientTLS
>> <https://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#wrapClientTLS>
>> returns an endpoint which layers TLS on top of the plain TCP connection
>> generated by HostnameEndpoint. It also takes the TLS options as an argument.
>> 4. conn is a Deferred which will fire with a protocol instance generated
>> by the factory passed to connect().
>>
>> This is basically what Agent does internally, as I understand it.
>>
>> Hope this helps,
>> Tom
>>
>> On Thu, Aug 16, 2018, at 6:44 PM, Sean DiZazzo wrote:
>>
>> I guess thats still kind of confusing without making something more
>> clear...
>>
>> In my example, both myprotocol.example.com and test.example.com DNS
>> records would point to the same IP address.  One nginx instance then
>> listens on that IP and serves up several ssl apps. They go through a
>> "mapper" that uses the SNI and the ssl_preread directive to read the
>> destination hostname of the packet to determine which app to route the
>> traffic to.
>>
>> I just want transport.write() to not resolve the ip address of the host I
>> pass in.  Everything will work if it connects and sends packets to
>> myprotocol.example.com:443 instead of 23.23.23.23:443.
>>
>> Nginx reference:
>> http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html
>>
>> On Thu, Aug 16, 2018 at 6:14 PM, Sean DiZazzo <sean.dizazzo at gmail.com>
>> wrote:
>>
>> Thanks for responding, Adi!
>>
>> I don't want each packet to go it's own way from Twisted.  They all go to
>> the same place from each instance of the server/protocol.  They go to my
>> custom protocol listening on another local port.
>>
>> It's just that I'm serving up several different ssl apps on the same
>> nginx server, and nginx uses the hostname to route the packets.  So in this
>> case, traffic coming in on http.example.com:443 might be routed to an
>> https app listening on a socket, and traffic coming in to
>> myprotocol.example.com:443 should be routed to my own protocol listening
>> on port 9999.  So if nginx doesn't get the hostname, it doesn't know to
>> route the packet to my custom protocol instead of the web server.  Does
>> that make sense?
>>
>> It seems that the transport is resolving the hostname to an ip address
>> and then sending the traffic to the generic ip which is not enough info for
>> nginx to route the packet correctly.
>>
>> On Thu, Aug 16, 2018 at 5:49 PM, Adi Roiban <adi at roiban.ro> wrote:
>>
>> On Fri, 17 Aug 2018 at 01:25, Sean DiZazzo <sean.dizazzo at gmail.com>
>> wrote:
>> >
>> > Hi all!
>> >
>> > After I start a reactor connecting to a specific hostname and port, I
>> do my thing and then call transport.write() to send the data to the peer.
>> >
>> > From what I can tell, though, the hostname is resolved, and the data is
>> written back to the ip address itself, instead of the hostname I started
>> the reactor with.
>> >
>> > This is a problem in my case because we are using nginx's ssl_preread
>> server_name directive to route several different streams all coming in on
>> the same ip address.
>> >
>> > So the write() method needs to explicitly use the hostname to route the
>> packet properly.
>> >
>> > So... Is there any way to have transport.write() use the hostname given
>> instead of it's resolved IP address? Or am I missing something?
>> >
>>
>> I assume you are using TCP here.
>>
>> I guess that you are missing something.
>>
>> If you want each write to go over its own way / route and have the
>> hostname re-resolved you should open + write + close a connection for
>> each write.
>>
>> But I think that there is something else there and this is now what you
>> want :)
>> Do you use HTTP or have a custom protocol?
>>
>> Cheers,
>>
>> Adi Roiban
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> *_______________________________________________*
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180817/539a322a/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Aug 18 13:17:02 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 18 Aug 2018 12:17:02 -0700
Subject: [Twisted-Python] Fix link on trac for logging in
In-Reply-To: <CAG=rPVe958ggEDsDecGt72jzJ41bo_4sd9fN6pXr282CstyCEA@mail.gmail.com>
References: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>
 <CAG=rPVe958ggEDsDecGt72jzJ41bo_4sd9fN6pXr282CstyCEA@mail.gmail.com>
Message-ID: <E778CAA0-043F-4BB9-B1AC-DAE11C8F75CD@twistedmatrix.com>

The twisted trac source code is here: https://github.com/twisted-infra/twisted-trac-source <https://github.com/twisted-infra/twisted-trac-source> 

I think the relevant bit of code is https://github.com/twisted-infra/twisted-trac-source/blob/6b7b4156a50c05f28437eba506177a9f3bcccac6/trac/web/main.py#L481 <https://github.com/twisted-infra/twisted-trac-source/blob/6b7b4156a50c05f28437eba506177a9f3bcccac6/trac/web/main.py#L481> here, but I'm not quite sure how to change it.

If you can make a PR we can probably get it deployed though, this is definitely an annoying bug.

(Alternately, maybe just make /trac/login a redirect in the web server?)

-g

> On Aug 16, 2018, at 11:43 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Is there someone with access to the twistedmatrix Trac source code
> who can fix the text at the place where it says You are not logged in aftr clicking on
> https://twistedmatrix.com/trac/newticket <https://twistedmatrix.com/trac/newticket> ?
> 
> --
> Craig
> 
> On Thu, Jun 14, 2018 at 11:21 AM Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
> Hi,
> 
> If a user clicks on this link:
> https://twistedmatrix.com/trac/newticket <https://twistedmatrix.com/trac/newticket>
> 
> They see this text:
> 
> You are currently not logged in. You may want to do so <https://twistedmatrix.com/trac/login> now. 
> 
> The link on "do so" is wrong.  
> 
> Can someone fix that link to point to the Github login link?
> 
> Ideally, this link:
> https://twistedmatrix.com/trac/login <https://twistedmatrix.com/trac/login>
> 
> should redirect to:
> https://twistedmatrix.com/trac/github/login <https://twistedmatrix.com/trac/github/login>
> 
> Because there seem to be various paths that users are hitting the
> first link and then getting confused when they can't log into Trac.
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180818/66f3ea1e/attachment-0002.html>

From rodrigc at crodrigues.org  Sat Aug 18 13:27:39 2018
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 18 Aug 2018 12:27:39 -0700
Subject: [Twisted-Python] Fix link on trac for logging in
In-Reply-To: <E778CAA0-043F-4BB9-B1AC-DAE11C8F75CD@twistedmatrix.com>
References: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>
 <CAG=rPVe958ggEDsDecGt72jzJ41bo_4sd9fN6pXr282CstyCEA@mail.gmail.com>
 <E778CAA0-043F-4BB9-B1AC-DAE11C8F75CD@twistedmatrix.com>
Message-ID: <CAG=rPVfofwuM=WS3sGRSRRg41Ugzbv4-+7KmR3mG=jY9cQj2rA@mail.gmail.com>

Where is the Twisted Web config for specifying redirects of
twistedmatrix.com?  For this case, adding a redirect seems better than
modifying the Trac code.

--
Craig

On Saturday, August 18, 2018, Glyph <glyph at twistedmatrix.com> wrote:

>
> (Alternately, maybe just make /trac/login a redirect in the web server?)
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180818/f47dc0e8/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Aug 18 15:12:02 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 18 Aug 2018 14:12:02 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6eunH=zV2oh01QE-DOFXSU+TzhG6dhhMzedDPvtF4eK0bQ@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
 <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
 <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>
 <CANzH6eunH=zV2oh01QE-DOFXSU+TzhG6dhhMzedDPvtF4eK0bQ@mail.gmail.com>
Message-ID: <D32708D0-CCF8-477B-A52F-0E2F2C3C1645@twistedmatrix.com>

On Aug 17, 2018, at 9:24 AM, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
> 
> Starting to look over the docs and I realize I might have just been able to incorporate the `optionsForClientTLS` into what I was already using. 
> 
> I was using `reactor.connectSSL()` with a default ``ssl.ClientContextFactory()` so I think I can make my own sslClientContextFactory with `optionsForClientTLS(hostname=host)` and pass that in to connectSSL instead.
> 
> It would look something like this:
> 
> reactor.connectSSL(hostname, port, MyProtocolClientFactory(), optionsForClientTLS(hostname=hostname))
> 
> I'll give it a try and play around with it.  If it doesn't work, I'll head back over to the endpoint examples.

This should indeed work for now, but adopting endpoints is a more forward-looking approach; "connectSSL" is a much less flexible API, and will hopefully someday be removed.

For example:

You can't use connectSSL in combination with UNIX sockets
When we (one day) have a client version of the PROXY endpoint, you won't be able to use that with connectSSL
You can't do TLS-in-TLS tunneling with connectSSL for backhaul connections

It's just generally harder to switch to other secure transports if you're not using the endpoint APIs.

Thanks for using Twisted,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180818/5ead7e09/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Aug 18 15:18:41 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 18 Aug 2018 14:18:41 -0700
Subject: [Twisted-Python] Fix link on trac for logging in
In-Reply-To: <CAG=rPVfofwuM=WS3sGRSRRg41Ugzbv4-+7KmR3mG=jY9cQj2rA@mail.gmail.com>
References: <CAG=rPVeDUMex7FD=kJTVc2x3fePPi2RzqT=YdhnhhS24Oai9gw@mail.gmail.com>
 <CAG=rPVe958ggEDsDecGt72jzJ41bo_4sd9fN6pXr282CstyCEA@mail.gmail.com>
 <E778CAA0-043F-4BB9-B1AC-DAE11C8F75CD@twistedmatrix.com>
 <CAG=rPVfofwuM=WS3sGRSRRg41Ugzbv4-+7KmR3mG=jY9cQj2rA@mail.gmail.com>
Message-ID: <0B797B34-21A9-40C2-B4A1-B044A8D5D3A4@twistedmatrix.com>

The Twisted website is constructed here:

https://github.com/twisted-infra/braid/blob/master/services/t-web/twisted-web/twisted-web <https://github.com/twisted-infra/braid/blob/master/services/t-web/twisted-web/twisted-web>

and of course it's a twisted.web resource, so you can make it do whatever you like :).

-glyph

> On Aug 18, 2018, at 12:27 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Where is the Twisted Web config for specifying redirects of twistedmatrix.com <http://twistedmatrix.com/>?  For this case, adding a redirect seems better than modifying the Trac code.
> 
> --
> Craig
> 
> On Saturday, August 18, 2018, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> (Alternately, maybe just make /trac/login a redirect in the web server?)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180818/41bf065c/attachment-0002.html>

From trac at twistedmatrix.com  Sun Aug 19 00:05:21 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 19 Aug 2018 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1534658721.02.4279128667015542489@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180819/4e90724a/attachment-0002.html>

From trac at twistedmatrix.com  Sun Aug 26 00:05:26 2018
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 26 Aug 2018 06:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1535263526.36.4385966678097756855@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180826/99a846ba/attachment-0002.html>

From rshea at thecubagroup.com  Mon Aug 27 18:10:22 2018
From: rshea at thecubagroup.com (Richard Shea)
Date: Tue, 28 Aug 2018 12:10:22 +1200
Subject: [Twisted-Python] Using twistd with -c option causes permission error
Message-ID: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>

I'm trying to use the -c option of twistd like this :

twistd web --wsgi bar.app -c foo.cer  -k privkey.pem --https=4433

I'm pointing it at a cert with perms like this "-rw-r--r-- 1 root root" but twistd complains about a permission error . 

I'm puzzled ... surely twistd only needs to read that file ?

Thanks

.







From maarten at treewalker.org  Mon Aug 27 22:01:13 2018
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Tue, 28 Aug 2018 06:01:13 +0200
Subject: [Twisted-Python] Using twistd with -c option causes permission
 error
In-Reply-To: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
References: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
Message-ID: <2380012.1niq0D0mgj@hyperion>

On Tuesday, August 28, 2018 2:10:22 AM CEST Richard Shea wrote:
> I'm trying to use the -c option of twistd like this :
> 
> twistd web --wsgi bar.app -c foo.cer  -k privkey.pem --https=4433
> 
> I'm pointing it at a cert with perms like this "-rw-r--r-- 1 root root" but
> twistd complains about a permission error .
> 
> I'm puzzled ... surely twistd only needs to read that file ?

Is it complaining about the permissions on the cert or on the private key? 
Some applications (like SSH) reject private keys if they are world-readable, 
as a precaution.

Bye,
		Maarten





From davidfstr at gmail.com  Mon Aug 27 22:12:57 2018
From: davidfstr at gmail.com (David Foster)
Date: Mon, 27 Aug 2018 21:12:57 -0700
Subject: [Twisted-Python] Forking after starting AsyncioSelectorReactor:
 Supported?
Message-ID: <dd680f21-22ea-b3b6-1a7c-9c490b31140b@gmail.com>

Hi Twisted list!

I have a library that is attempting to start an AsyncioSelectorReactor, 
fork the process, and then open a network socket on macOS. When the 
network socket is opened, Twisted throws an [Errno 9] "Bad file 
descriptor" exception at me. I get no such exception on Ubuntu.

If I change the sequence from:
     setup_reactor('AsyncioSelectorReactor')
     fork_and_continue_in_child()
     run_server()
to:
     fork_and_continue_in_child()             # fork first
     setup_reactor('AsyncioSelectorReactor')
     run_server()
Then everything works okay.

Also if I use SelectReactor rather than AsyncioSelectorReactor then it 
doesn't matter which order I fork in.

So my question is, does Twisted support being forked after starting a 
reactor or not?

-- 
David Foster | Seattle, WA, USA


P.S. For more details see this Django Channels thread: 
https://github.com/django/channels/issues/962#issuecomment-414103367



From screwtape at froup.com  Mon Aug 27 22:47:50 2018
From: screwtape at froup.com (Tim Allen)
Date: Tue, 28 Aug 2018 14:47:50 +1000
Subject: [Twisted-Python] Forking after starting AsyncioSelectorReactor:
 Supported?
In-Reply-To: <dd680f21-22ea-b3b6-1a7c-9c490b31140b@gmail.com>
References: <dd680f21-22ea-b3b6-1a7c-9c490b31140b@gmail.com>
Message-ID: <20180828044750.GA21465@boombah.thristian.org>

On Mon, Aug 27, 2018 at 09:12:57PM -0700, David Foster wrote:
> So my question is, does Twisted support being forked after starting a
> reactor or not?

I haven't used Twisted with the AsyncioSelectorReactor on macOS myself, but
the `asyncio` docs suggest[1] that the default macOS event loop uses the
`kqueue` system call. Searching for "macos fork kqueue" finds a report[2]
of the same behaviour in the C++ Boost asyncio library. Apple doesn't seem
to publish manpages publically anymore, but the `kqueue` system call was
borrowed from FreeBSD which does[3]:

# The kqueue() system call creates a new kernel event queue and returns a
# descriptor. The queue is not inherited by a child created with fork(2).

So, my guess is that `kqueue` just can't be used with `fork` in that way.
If you really need to set up a reactor and then fork, perhaps you
can configure `asyncio` to use the `selectors.SelectSelector` or
`selectors.PollSelector` event loops instead; they're less efficient,
but they should work after a fork.

This behaviour doesn't occur on Ubuntu because Linux provides the `epoll`
system call instead of `kqueue`, which behaves differently.

[1]: https://docs.python.org/3.6/library/asyncio-eventloops.html#mac-os-x
[2]: https://svn.boost.org/trac10/ticket/3238
[3]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&manpath=FreeBSD+11.2-RELEASE+and+Ports



From rshea at thecubagroup.com  Tue Aug 28 03:54:39 2018
From: rshea at thecubagroup.com (Richard Shea)
Date: Tue, 28 Aug 2018 21:54:39 +1200
Subject: [Twisted-Python] Using twistd with -c option causes permission
 error
In-Reply-To: <2380012.1niq0D0mgj@hyperion>
References: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
 <2380012.1niq0D0mgj@hyperion>
Message-ID: <1535450079.1972483.1488535536.757AFFB3@webmail.messagingengine.com>



On Tue, 28 Aug 2018, at 4:01 PM, Maarten ter Huurne wrote:
> On Tuesday, August 28, 2018 2:10:22 AM CEST Richard Shea wrote:
> > I'm trying to use the -c option of twistd like this :
> > 
> > twistd web --wsgi bar.app -c foo.cer  -k privkey.pem --https=4433
> > 
> > I'm pointing it at a cert with perms like this "-rw-r--r-- 1 root root" but
> > twistd complains about a permission error .
> > 
> > I'm puzzled ... surely twistd only needs to read that file ?
> 
> Is it complaining about the permissions on the cert or on the private key? 
> Some applications (like SSH) reject private keys if they are world-readable, 
> as a precaution.
> 
Thanks Maarten it was the certificate that was being complained about but I think I now understand what the problem was. 

Although I showed the certificate as being in the same directory in fact it was deep in a path and although the user running twisted had read on the file they didn't have execute on some of the intermediate directories (and so I assume this was the cause of the access error ... I haven't yet had time to check this out).

This does raise a more general question .... what perms should the key used by twistd have ? Ideally a key would only be readable by root but running twistd as root is clearly undesireable. Anyone wish to give their opinion on that ?

With Apache the process starts as root, reads the key and then makes the apache process run as a different, less powerful, user  but I can't see how you can do the equivalent for twistd ? Am I overlooking something ?


Thanks



From davidfstr at gmail.com  Tue Aug 28 08:49:46 2018
From: davidfstr at gmail.com (David Foster)
Date: Tue, 28 Aug 2018 07:49:46 -0700
Subject: [Twisted-Python] Forking after starting AsyncioSelectorReactor:
 Supported?
In-Reply-To: <20180828044750.GA21465@boombah.thristian.org>
References: <dd680f21-22ea-b3b6-1a7c-9c490b31140b@gmail.com>
 <20180828044750.GA21465@boombah.thristian.org>
Message-ID: <49A9893B-EB9C-4B9D-B97C-12D8708A5782@gmail.com>

Thank you for the detailed research Tim.

Indeed it seems we’ll have to either change the order of {start reactor, fork} or use a different reactor type, since this problem seems likely to remain so long as asyncio uses the kqueue primitive on macOS, which seems unlikely to change.

- David

> On Aug 27, 2018, at 9:47 PM, Tim Allen <screwtape at froup.com> wrote:
> 
>> On Mon, Aug 27, 2018 at 09:12:57PM -0700, David Foster wrote:
>> So my question is, does Twisted support being forked after starting a
>> reactor or not?
> 
> I haven't used Twisted with the AsyncioSelectorReactor on macOS myself, but
> the `asyncio` docs suggest[1] that the default macOS event loop uses the
> `kqueue` system call. Searching for "macos fork kqueue" finds a report[2]
> of the same behaviour in the C++ Boost asyncio library. Apple doesn't seem
> to publish manpages publically anymore, but the `kqueue` system call was
> borrowed from FreeBSD which does[3]:
> 
> # The kqueue() system call creates a new kernel event queue and returns a
> # descriptor. The queue is not inherited by a child created with fork(2).
> 
> So, my guess is that `kqueue` just can't be used with `fork` in that way.
> If you really need to set up a reactor and then fork, perhaps you
> can configure `asyncio` to use the `selectors.SelectSelector` or
> `selectors.PollSelector` event loops instead; they're less efficient,
> but they should work after a fork.
> 
> This behaviour doesn't occur on Ubuntu because Linux provides the `epoll`
> system call instead of `kqueue`, which behaves differently.
> 
> [1]: https://docs.python.org/3.6/library/asyncio-eventloops.html#mac-os-x
> [2]: https://svn.boost.org/trac10/ticket/3238
> [3]: https://www.freebsd.org/cgi/man.cgi?query=kqueue&manpath=FreeBSD+11.2-RELEASE+and+Ports
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Wed Aug 29 05:04:43 2018
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 29 Aug 2018 07:04:43 -0400
Subject: [Twisted-Python] Using twistd with -c option causes permission
 error
In-Reply-To: <1535450079.1972483.1488535536.757AFFB3@webmail.messagingengine.com>
References: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
 <2380012.1niq0D0mgj@hyperion>
 <1535450079.1972483.1488535536.757AFFB3@webmail.messagingengine.com>
Message-ID: <CAEeXt4NVJ_RmcMeLJ+M11hpc_fi33TCqhM6+rt+DbdxzhC+1ZA@mail.gmail.com>

On Tue, Aug 28, 2018 at 5:54 AM Richard Shea <rshea at thecubagroup.com> wrote:

>
> With Apache the process starts as root, reads the key and then makes the
> apache process run as a different, less powerful, user  but I can't see how
> you can do the equivalent for twistd ? Am I overlooking something ?
>
>
twistd has `--uid` and `--gid` options for switching to another user after
`privilegedStartService` runs.  However, I'm not sure how much help this
will be since there is a strong desire to replace twistd with twist and
twist does not have these features.  Perhaps someone who has been working
on twist can explain the preferred workflow using that tool.


>
> Thanks
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180829/249220b1/attachment-0002.html>

From sda at fstab.net  Wed Aug 29 11:13:25 2018
From: sda at fstab.net (Kyle Altendorf)
Date: Wed, 29 Aug 2018 13:13:25 -0400
Subject: [Twisted-Python] T9217 / PR1052: Wheels, wheels, and more wheels
Message-ID: <9d085475b70a1ff9846690ed9c82d13c@fstab.net>

Hi All,

I am working on ticket #9217 / PR #1051 to add lots more wheel 
generation to the Twisted CI.  I decided to give the cibuildwheel 
package a try and it made this process almost too easy (well... sort of 
:] ).  I've got AppVeyor-Windows, Travis-Linux, and Circle-OSX all 
building a variety of wheels for the supported Python versions and bit 
depths.  Travis doesn't save artifacts 'easily' so I went ahead and 
doubled up on Linux on Circle for now, though it's having some Docker 
issues at the moment and hasn't been successful yet.  For some reason in 
this one case the project directory isn't getting mounted into the 
container as expected.

wheel links:
https://github.com/twisted/twisted/pull/1051#issuecomment-416743261 (and 
next comment)

Now that I've got the wheel builds happening I figured it'd be good to 
try them out on 'real' machines.  Turns out we get a failure on 
twisted.cred.test.test_strcred.SSHCheckerTests.test_isChecker for at 
least the two checks I've done so far (Windows and OSX).  I haven't done 
more than a cursory look at that yet, but it's on the list to understand 
and resolve.  More testing would of course be welcome.  Real world, just 
trial Twisted's own tests, whatever would be appreciated if you are 
interested.

failures with wheels:
https://github.com/twisted/twisted/pull/1051#issuecomment-416977723

Overall, it's a bit unclear what the intended use of the various CI 
hosts are for Twisted.  I hear that Travis OSX builds were really slow, 
but from what I can see Circle isn't doing any OSX (other than what I 
added).  There wasn't any artifact storage being used on Circle either.  
So, I'm not sure if there was a reason to use Circle that went away, 
or...  But, not having to hook Travis up to S3 or somesuch for storage 
is quite nice so Circle wins at least in that category.

Now that I've got something rough in place, are there any opinions about 
how this should work?  I don't know the present release workflow so I 
don't know if we'd want an automatic push to PyPI on tags (probably 
not), or just artifacts on the build server to grab manually (would need 
some S3 or such for Travis, or Circle for Linux builds as well).  
Anything else?  Do we want automated tests against the wheels?  
cibuildwheel does have a feature for that though I haven't done anything 
with it yet.

Anyways...  hello, thanks for Twisted, and I hope this work ends up 
saving some people some time.

Cheers,
-kyle



From grimmtooth at gmail.com  Wed Aug 29 16:48:19 2018
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Wed, 29 Aug 2018 18:48:19 -0400
Subject: [Twisted-Python] Keeping logger from snatching stdout?
Message-ID: <CA+1iZEcfQOcSuZAYzjafbCEDh-dsONUTjOx8v4e8PR=HPt+tsQ@mail.gmail.com>

I'm working on a Flask project using the flask_twisted package from PyPI
and have encountered a mystery.  I don't *have* to solve it to move on, but
darn it, I can't let it go :)

https://pypi.org/project/Flask-Twisted/
https://github.com/cravler/flask-twisted/

So here's the breakdown: when use the standard logging module to output to
a logfile + stdout, everything is fine.  I do see some logging output from
Twisted as well (the web server part) but for the most part life is groovy.

I'm going to be integrating in a wxPython windows app to this (previously
it's been a shell app) and step 1 was to make my own stdout handler that
eventually would pipe all that stuff to a window in the wx app.  The first
step of THAT (step 1.a) was to replace all the logging stuff with print()
placeholders.

At that point, things got confusing, as now ALL of my print()s are being
handled by Twisted's logging handler.

I brought flask-twisted in local to my code so I could monkey around with
it. First thing I noticed was that it was using twisted.python.log. I
messed around with that - commented it out, and now I get no stdout output
at all.  Set the parameter setStdout to False, same thing.

The adapter code uses twisted.internet.reactor,  threads,
twisted.web.server.Site, twisted.web.wsgi.WSGIResource, and
twisted.web.resource.Resource, any one which might be responsible. I spent
yesterday evening digging around but haven't found anything yet.

Any guidance / ideas?

Regards,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180829/ee0f7b76/attachment-0002.html>

From robert.difalco at gmail.com  Thu Aug 30 11:14:03 2018
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Thu, 30 Aug 2018 10:14:03 -0700
Subject: [Twisted-Python] Issue with TLS failure modes
Message-ID: <CAAXGW-xFq9UgBZdY+p0wjKxBW4z9P6a=CSc6Hspq3oV+TgBTJg@mail.gmail.com>

I'm having an issue properly handling TLS failure modes. For example
consider the EchoServer and EchoClient code. If I use a TLS client with a
TCP4 server, I do not get a handshake exception until I abort the
connection. But I don't want to abort the connection unless I get a
handshake error.

What I'd like to do is to check the handshake status in my protocol before
my client sends bytes to the server. I'd like my send message to be able to
raise the <class 'OpenSSL.SSL.Error'>: [('SSL routines', 'ssl23_read', 'ssl
handshake failure'). But for some reason it seems to get lost until I abort
the connection. Does this sound familiar to anyone?

What I've done for now is setup a Timeout mixin so that after my
client.send, if I do not get an ACK back (which my particular protocol
does) within two minutes, I just abort the connection. This then calls
connectionLost with the correct SSL.Error. But if it's in the error queue
(and found during the course of abortConnection then isn't there a way to
find it sooner? Like before my timeout and before I call send on the client
protocol?

Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180830/16255fd6/attachment-0002.html>

From sean.dizazzo at gmail.com  Thu Aug 30 14:22:14 2018
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Thu, 30 Aug 2018 13:22:14 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <D32708D0-CCF8-477B-A52F-0E2F2C3C1645@twistedmatrix.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
 <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
 <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>
 <CANzH6eunH=zV2oh01QE-DOFXSU+TzhG6dhhMzedDPvtF4eK0bQ@mail.gmail.com>
 <D32708D0-CCF8-477B-A52F-0E2F2C3C1645@twistedmatrix.com>
Message-ID: <CANzH6etqY4F6i_rJ2VSd=zotE0NPJB29ifvckg6JdENGrtGZyg@mail.gmail.com>

>>You can't use connectSSL in combination with UNIX sockets

I'm working on a rewrite of this system which will use endpoints once
complete.  So far I've got basic server and client endpoints running over
TLS through our reverse proxy.  Its working as expected on a given port,
but I'd rather have the server listen on a unix socket.  Based on your
comment it sounds possible for a client to connect to a socket over TLS,
but is it possible for a server to listen on one over TLS?  I've tried
several different approaches and can't seem to find a way.

I tried wrapping a UnixServerEndpoint with my CertificateOptions, then
tried to find a way to pass a socket path into a SSL4ServerEndpoint
Can't seem to find a corresponding wraperServerTLS to the client function
Tim posted.

Thanks for your help, and thanks for writing Twisted.  :)

~Sean

On Sat, Aug 18, 2018 at 2:12 PM Glyph <glyph at twistedmatrix.com> wrote:

> On Aug 17, 2018, at 9:24 AM, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
>
>
> Starting to look over the docs and I realize I might have just been able
> to incorporate the `optionsForClientTLS` into what I was already using.
>
> I was using `reactor.connectSSL()` with a default
> ``ssl.ClientContextFactory()` so I think I can make my own
> sslClientContextFactory with `optionsForClientTLS(hostname=host)` and pass
> that in to connectSSL instead.
>
> It would look something like this:
>
> reactor.connectSSL(hostname, port, MyProtocolClientFactory(),
> optionsForClientTLS(hostname=hostname))
>
> I'll give it a try and play around with it.  If it doesn't work, I'll head
> back over to the endpoint examples.
>
>
> This should indeed work for now, but adopting endpoints is a more
> forward-looking approach; "connectSSL" is a much less flexible API, and
> will hopefully someday be removed.
>
> For example:
>
>
>    1. You can't use connectSSL in combination with UNIX sockets
>    2. When we (one day) have a client version of the PROXY endpoint, you
>    won't be able to use that with connectSSL
>    3. You can't do TLS-in-TLS tunneling with connectSSL for backhaul
>    connections
>
>
> It's just generally harder to switch to other secure transports if you're
> not using the endpoint APIs.
>
> Thanks for using Twisted,
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180830/d5b98d1c/attachment-0002.html>

From rshea at thecubagroup.com  Thu Aug 30 17:41:55 2018
From: rshea at thecubagroup.com (Richard Shea)
Date: Fri, 31 Aug 2018 11:41:55 +1200
Subject: [Twisted-Python] Using twistd with -c option causes permission
 error
In-Reply-To: <CAEeXt4NVJ_RmcMeLJ+M11hpc_fi33TCqhM6+rt+DbdxzhC+1ZA@mail.gmail.com>
References: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
 <2380012.1niq0D0mgj@hyperion>
 <1535450079.1972483.1488535536.757AFFB3@webmail.messagingengine.com>
 <CAEeXt4NVJ_RmcMeLJ+M11hpc_fi33TCqhM6+rt+DbdxzhC+1ZA@mail.gmail.com>
Message-ID: <1535672515.2448340.1491920192.2D87259D@webmail.messagingengine.com>

On Wed, 29 Aug 2018, at 11:04 PM, Jean-Paul Calderone wrote:
> On Tue, Aug 28, 2018 at 5:54 AM Richard Shea
> <rshea at thecubagroup.com> wrote:>> 
>> With Apache the process starts as root, reads the key and then makes
>> the apache process run as a different, less powerful, user  but I
>> can't see how you can do the equivalent for twistd ? Am I overlooking
>> something ?>> 
> 
> twistd has `--uid` and `--gid` options for switching to another user
> after `privilegedStartService` runs.  However, I'm not sure how much
> help this will be since there is a strong desire to replace twistd
> with twist and twist does not have these features.  Perhaps someone
> who has been working on twist can explain the preferred workflow using
> that tool.
Thanks. I had no idea that --uid/--gid did anything other than run
entirely as that user/group.
Unfortunately I'm using twistd to just run a wsgi app (Flask) and so, I
assume, that whatever I provide as 'uid' / 'gid' to twistd will just be
what it runs as .
However i'm writing this without having had a chance to try it, maybe
it reads the cert/key stuff as the user who started the process and
then drops down to 'uid/'gid' ... like I way I haven't yet had a
chance to try.
Thanks for your reply.


>  
>> 
>> Thanks
>> 
>>  _______________________________________________
>>  Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _________________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180831/b58afee0/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Aug 31 00:53:17 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 30 Aug 2018 23:53:17 -0700
Subject: [Twisted-Python] Can transport.write() to hostname instead of
 IP address?
In-Reply-To: <CANzH6etqY4F6i_rJ2VSd=zotE0NPJB29ifvckg6JdENGrtGZyg@mail.gmail.com>
References: <CANzH6ev5AA_btD1w9_sysq4nTmP3jBkxNquPcznv1pebVyBadQ@mail.gmail.com>
 <CAFycZ9dMwU5Xd7wQNOVrs32Zvh5+hL5gvdNr-+NtbLVRFiOH=w@mail.gmail.com>
 <CANzH6esz5ygL7iSZ-8HUL6M+eE-jFj4PKzWhaJFDbptjK_hTuw@mail.gmail.com>
 <CANzH6evc9dxfD=bwiZuQtUw1r6f4ni9o_f62AVU07bc-5vsN+A@mail.gmail.com>
 <1534475926.1251419.1476954408.11D68B31@webmail.messagingengine.com>
 <CANzH6etw2d7LA+XY8sGy_JVNkcvEPAvy5cQbarzWQ35YQEp+gw@mail.gmail.com>
 <CANzH6eunH=zV2oh01QE-DOFXSU+TzhG6dhhMzedDPvtF4eK0bQ@mail.gmail.com>
 <D32708D0-CCF8-477B-A52F-0E2F2C3C1645@twistedmatrix.com>
 <CANzH6etqY4F6i_rJ2VSd=zotE0NPJB29ifvckg6JdENGrtGZyg@mail.gmail.com>
Message-ID: <3CD87D92-3F75-48A4-996C-2F0D7F47852E@twistedmatrix.com>

On Aug 30, 2018, at 1:22 PM, Sean DiZazzo <sean.dizazzo at gmail.com> wrote:
> Can't seem to find a corresponding wraperServerTLS to the client function Tim posted.

There is no wrapServerTLS right now in Twisted itself.

https://github.com/glyph/txsni/blob/master/txsni/tlsendpoint.py <https://github.com/glyph/txsni/blob/master/txsni/tlsendpoint.py> is available in txsni though; arguably all of txsni should be in Twisted, but certainly this should be.  If you wanted to write a PR that added some docstrings and unit tests that would be great :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180830/31655f5d/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Aug 31 01:04:37 2018
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 31 Aug 2018 00:04:37 -0700
Subject: [Twisted-Python] Using twistd with -c option causes permission
 error
In-Reply-To: <CAEeXt4NVJ_RmcMeLJ+M11hpc_fi33TCqhM6+rt+DbdxzhC+1ZA@mail.gmail.com>
References: <1535415022.1838085.1488124616.23B7D239@webmail.messagingengine.com>
 <2380012.1niq0D0mgj@hyperion>
 <1535450079.1972483.1488535536.757AFFB3@webmail.messagingengine.com>
 <CAEeXt4NVJ_RmcMeLJ+M11hpc_fi33TCqhM6+rt+DbdxzhC+1ZA@mail.gmail.com>
Message-ID: <8FFE3993-2742-40B2-89C3-D15763F1BECE@twistedmatrix.com>



> On Aug 29, 2018, at 4:04 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Tue, Aug 28, 2018 at 5:54 AM Richard Shea <rshea at thecubagroup.com <mailto:rshea at thecubagroup.com>> wrote:
> 
> With Apache the process starts as root, reads the key and then makes the apache process run as a different, less powerful, user  but I can't see how you can do the equivalent for twistd ? Am I overlooking something ?
> 
> 
> twistd has `--uid` and `--gid` options for switching to another user after `privilegedStartService` runs.  However, I'm not sure how much help this will be since there is a strong desire to replace twistd with twist and twist does not have these features.  Perhaps someone who has been working on twist can explain the preferred workflow using that tool.

The origin of the desire to replace twistd with twist is that twistd represents an older, and worse, generation of UNIX administration practices.

twistd assumes privilege separation is accomplished via daemons that start up (and, implicitly, import all their code) as root, and then carefully shed privileges on their own.  this assumption was based in large part on the idea that twistd will want to bind privileged ports, and only root can bind privileged ports.  twist assumes privilege separation is accomplished by starting your process in a container, or under a process supervision regime (such as systemd) which can hand it a privileged listening port.
twistd assumes that process supervision is accomplished by an elaborate and frankly never quite fully specified dance involving PID files, self-truncation of logs, signal handling, and thus, writes pidfiles and daemonizes by default.  twist assumes that process supervision is accomplished by using a process supervisor; either a container runtime, or systemd, or something like supervisord or ncolony.

However, use of `twist` is gently encouraged, not mandated, as there are lots of old/bad systems where new versions of Twisted run, and will continue to run for some time.  If your deployment constraints are better satisfied by twistd, by all means continue using it, report bugs in it, file PRs that fix those bugs.

However, there are a long list of reasons why this new idiom is a lot better than the older one.  One specific problem with read-certs-then-shed-privileges is that it means your process can never receive a new certificate without restarting; so no certificate rotation, no adding new subdomains on the fly.  If your process has permissions to read and act on the certificate in memory, what benefit is there to making sure that it can't read it out of the filesystem a second time?  If it's bound to a privileged port, a compromised node could provision its own certificate via Let's Encrypt anyway.

So my suggestion would be to just provide the process long-lived read access to the certificates, via whatever access control mechanisms are available to you.  If all you've got are filesystem permissions, u+rw g+r should do the trick, and then just put the user running `twistd` into the appropriate group.

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20180831/2cc6a82c/attachment-0002.html>

