From kevin.horn at gmail.com  Wed Jan  2 12:19:20 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 2 Jan 2013 11:19:20 -0600
Subject: [Twisted-Python] Need help using FTPClient
In-Reply-To: <CANtgJyGtd8bQQeJXkwHKU0tSwbsNRyuppZTZkQK1XYCbRmjDEw@mail.gmail.com>
References: <CANtgJyHV32YBxnBBFxoN_KF3yKbe=X_ohWtJZ2MhxsexVvd9tg@mail.gmail.com>
	<CED11AA4-9786-4348-B2B2-DB7A7D7030B1@twistedmatrix.com>
	<CAOp9P3qipU1mZujSixO3TC=64yiShG9MzXJN6d_dNRex9f7_eg@mail.gmail.com>
	<CANtgJyGtd8bQQeJXkwHKU0tSwbsNRyuppZTZkQK1XYCbRmjDEw@mail.gmail.com>
Message-ID: <CA+U=zK2oiYpLFu3zk1jHFp9HyU3D+SK0Kn9+R4SvNhBFK1DJnw@mail.gmail.com>

On Fri, Dec 28, 2012 at 11:21 AM, Master Corp <corpmasters at gmail.com> wrote:

> OK, thank you for your help
>
> 2012/12/28 Itamar Turner-Trauring <itamar at futurefoundries.com>
>
>>
>>
>> On Thu, Dec 27, 2012 at 11:48 PM, Glyph <glyph at twistedmatrix.com> wrote:
>>
>>>
>>>
>>> Is there any reason you want to use Twisted to do your SOCKS proxying?
>>>  Programs like 'socksify' typically do what you need in a general way that
>>> does not require any awareness from your application.  (Twisted does have a
>>> SOCKS implementation, but it's rarely worth the trouble to plug it in.)
>>>
>>
>> Twisted does not have a SOCKS client, actually, only a server AFAIK.
>>
>> IIRC there's a 3rd party client library, but on github so therefore
>> impossible to find.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
There is a SOCKS5 client in a Twisted ticket, but it hasn't been merged
into trunk yet (for lack of tests IIRC).  I don't know whether it still
works, but it did at one time.

Here's the ticket:
http://twistedmatrix.com/trac/ticket/1330

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130102/4735a081/attachment.htm 

From f at rtfs.org  Sat Jan  5 15:22:49 2013
From: f at rtfs.org (Fabian Sturm)
Date: Sat, 05 Jan 2013 21:22:49 +0100
Subject: [Twisted-Python] Using telnet or linereceiver protocol over ssh
In-Reply-To: <0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
Message-ID: <1357417369.2969.11.camel@krypton>

Hi Glyph

Am Montag, den 31.12.2012, 00:54 -0800 schrieb Glyph:

> Have you looked at HistoricRecvLine <https://twistedmatrix.com/documents/current/api/twisted.conch.recvline.HistoricRecvLine.html>?

No I didn't find that! This is exaclty what I was looking for :-) I knew
there had to be something better then writing this myself.

I just had some trouble wiring it up, but it now finally works. For
reference, what I did was to add this code to the openSSH method:

    def openShell(self, protocol):
        serverProtocol = ServerProtocol(MyRecvLine, self)
        serverProtocol.makeConnection(protocol)
        protocol.makeConnection(session.wrapProtocol(serverProtocol))

And MyRecvLine is a subclass of HistoricRecvLine.

> It's not the easiest class to use, but it should do basically what you need, with various line-editing niceties.

> This is also an area that could really benefit from some more maintenance, both in the code and the documentation; writing a command-line interface to Twisted should be a lot easier and more obvious.  So if you'd like to contribute to Twisted this is a good place to start :).

Yeah definitively, documentation is sorely needed. For this I already
bought the upcoming Twisted book. I hope that this will give me some
more insight why I have to do some of the things the way they are.
Unfortunately I am not sure if I am the right one for documentation
since I still struggle with some of the concepts. But I would like to
publish this combined sftp and command server as a reference.

Sincerely,
Fabian



From exarkun at twistedmatrix.com  Sun Jan  6 00:05:24 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Jan 2013 05:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1357448724.95.656937387@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130106/50984303/attachment.htm 

From glyph at twistedmatrix.com  Sun Jan  6 21:23:33 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 6 Jan 2013 18:23:33 -0800
Subject: [Twisted-Python] Using telnet or linereceiver protocol over ssh
In-Reply-To: <1357417369.2969.11.camel@krypton>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
	<1357417369.2969.11.camel@krypton>
Message-ID: <DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>


On Jan 5, 2013, at 12:22 PM, Fabian Sturm <f at rtfs.org> wrote:

> Unfortunately I am not sure if I am the right one for documentation
> since I still struggle with some of the concepts. But I would like to
> publish this combined sftp and command server as a reference.

In a way, it is best to work on documentation when you don't yet fully understand, because if you fully understand you yourself don't need the documentation any more :).

Obviously you don't want to write documentation that is incorrect or doesn't make sense, but the code-review process should prevent that from being published.  Plus, if you are going to work on documenting something, you can always ask for help either on this mailing list, or on the IRC channel (#twisted or #twisted-dev on Freenode depending on whether your questions are about help with Twisted or help with contributing to Twisted itself).

Glad I could point you in the right direction, and hope to hear more from you in the future,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130106/ba9aaf06/attachment.htm 

From exarkun at twistedmatrix.com  Sun Jan  6 22:57:15 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jan 2013 03:57:15 -0000
Subject: [Twisted-Python] Using telnet or linereceiver protocol over ssh
In-Reply-To: <DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
	<1357417369.2969.11.camel@krypton>
	<DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>
Message-ID: <20130107035715.4649.84365378.divmod.xquotient.147@localhost6.localdomain6>

On 02:23 am, glyph at twistedmatrix.com wrote:
>
>On Jan 5, 2013, at 12:22 PM, Fabian Sturm <f at rtfs.org> wrote:
>>Unfortunately I am not sure if I am the right one for documentation
>>since I still struggle with some of the concepts. But I would like to
>>publish this combined sftp and command server as a reference.
>
>In a way, it is best to work on documentation when you don't yet fully 
>understand, because if you fully understand you yourself don't need the 
>documentation any more :).

As I may have mentioned before, I strongly disagree with this.

It is much easier to (*correctly*) explain something you already 
understand, all other things being equal.

The factor that seems to lead people to suggest that people who don't 
understand a thing write documentation for that thing is that once you 
understand it, you don't *want* the documentation *for yourself* 
anymore, which removes one possible motivation for creating it.

But no matter how much we might want to exploit this motivation in 
people, it doesn't mean that the result will be good documentation.

Jean-Paul


From radix at twistedmatrix.com  Sun Jan  6 23:44:46 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Jan 2013 22:44:46 -0600
Subject: [Twisted-Python] Using telnet or linereceiver protocol over ssh
In-Reply-To: <20130107035715.4649.84365378.divmod.xquotient.147@localhost6.localdomain6>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
	<1357417369.2969.11.camel@krypton>
	<DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>
	<20130107035715.4649.84365378.divmod.xquotient.147@localhost6.localdomain6>
Message-ID: <CAPkRfUTWV3deDRYNiG895apGEoQz063TqM63ZykTFdjeZHGnqA@mail.gmail.com>

On Sun, Jan 6, 2013 at 9:57 PM, <exarkun at twistedmatrix.com> wrote:

> On 02:23 am, glyph at twistedmatrix.com wrote:
>
> >In a way, it is best to work on documentation when you don't yet fully
> >understand, because if you fully understand you yourself don't need the
> >documentation any more :).
>
> As I may have mentioned before, I strongly disagree with this.
>
> It is much easier to (*correctly*) explain something you already
> understand, all other things being equal.
>
> The factor that seems to lead people to suggest that people who don't
> understand a thing write documentation for that thing is that once you
> understand it, you don't *want* the documentation *for yourself*
> anymore, which removes one possible motivation for creating it.
>
> But no matter how much we might want to exploit this motivation in
> people, it doesn't mean that the result will be good documentation.
>
> Jean-Paul
>
>
I agree with Jean-Paul. Writing documentation in ignorance (no offense
intended to any party) is not a good way to write good documentation. I
think we've seen a number of attempts at this that have resulted in pretty
shoddy documentation. I do think, however, that *right after you learn*
something you are in a good position to benefit the documentation of the
project.

The argument has also been made (not in this thread; I mean in general)
that the process of learning something allows one to structure
documentation about it in a way that applies well to another person
learning something, but I think that concept has flaws as well. I think
that a common result of such attempts is that someone will hit a common
blocker in understanding their subject and then go off on a number of
misguided tangents, and then when they finally come to understand the
subject their sudden insight becomes associated in their mind with the
resolution of the misguided attempts.

But that's all just conjecture and isn't really core to my point.

I think despite all these problems with writing as one learns, it's
valuable to make an attempt at writing some documentation as one learns
something, as long as there is a sincere modesty on one's part and a
willingness to let their documentation be seriously overhauled or at least
critiqued by the real experts on the subject (assuming those experts can
muster the time to do the critiquing or overhauling).

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130106/4156c055/attachment.htm 

From glyph at twistedmatrix.com  Mon Jan  7 00:47:21 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 6 Jan 2013 21:47:21 -0800
Subject: [Twisted-Python] Documentation by newcomers (was Re: Using telnet
	or linereceiver protocol over ssh)
In-Reply-To: <CAPkRfUTWV3deDRYNiG895apGEoQz063TqM63ZykTFdjeZHGnqA@mail.gmail.com>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
	<1357417369.2969.11.camel@krypton>
	<DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>
	<20130107035715.4649.84365378.divmod.xquotient.147@localhost6.localdomain6>
	<CAPkRfUTWV3deDRYNiG895apGEoQz063TqM63ZykTFdjeZHGnqA@mail.gmail.com>
Message-ID: <FE02A5AF-4BE9-465B-8E4D-BF95C2021451@twistedmatrix.com>


On Jan 6, 2013, at 8:44 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On Sun, Jan 6, 2013 at 9:57 PM, <exarkun at twistedmatrix.com> wrote:
> On 02:23 am, glyph at twistedmatrix.com wrote:
> 
> >In a way, it is best to work on documentation when you don't yet fully
> >understand, because if you fully understand you yourself don't need the
> >documentation any more :).
> 
> As I may have mentioned before, I strongly disagree with this.
> 
> It is much easier to (*correctly*) explain something you already
> understand, all other things being equal.
> 
> The factor that seems to lead people to suggest that people who don't
> understand a thing write documentation for that thing is that once you
> understand it, you don't *want* the documentation *for yourself*
> anymore, which removes one possible motivation for creating it.
> 
> But no matter how much we might want to exploit this motivation in
> people, it doesn't mean that the result will be good documentation.
> 
> Jean-Paul
> 
> 
> I agree with Jean-Paul. Writing documentation in ignorance (no offense intended to any party) is not a good way to write good documentation. I think we've seen a number of attempts at this that have resulted in pretty shoddy documentation. I do think, however, that *right after you learn* something you are in a good position to benefit the documentation of the project.
> 
> The argument has also been made (not in this thread; I mean in general) that the process of learning something allows one to structure documentation about it in a way that applies well to another person learning something, but I think that concept has flaws as well. I think that a common result of such attempts is that someone will hit a common blocker in understanding their subject and then go off on a number of misguided tangents, and then when they finally come to understand the subject their sudden insight becomes associated in their mind with the resolution of the misguided attempts.
> 
> But that's all just conjecture and isn't really core to my point.
> 
> I think despite all these problems with writing as one learns, it's valuable to make an attempt at writing some documentation as one learns something, as long as there is a sincere modesty on one's part and a willingness to let their documentation be seriously overhauled or at least critiqued by the real experts on the subject (assuming those experts can muster the time to do the critiquing or overhauling).

I think I agree with all of that, Chris, although obviously my opinions differ from Jean-Paul's on this topic :).

To be fair I believe that it's not really feasible for someone new to the topic to write anything useful entirely, or even mostly, by themselves.  But if they write something basically sensible but with errors, it's easier for the experts to correct those flaws than to write something original.  (Assuming, of course, that the author has put enough effort into their writing that it basically hangs together and makes sense, even if it's not entirely correct or perfectly structured.)

The value of just prompting the experts to do something cannot be underestimated :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130106/e21c7eaa/attachment.htm 

From exarkun at twistedmatrix.com  Mon Jan  7 10:41:40 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jan 2013 15:41:40 -0000
Subject: [Twisted-Python] Documentation by newcomers
In-Reply-To: <FE02A5AF-4BE9-465B-8E4D-BF95C2021451@twistedmatrix.com>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
	<1357417369.2969.11.camel@krypton>
	<DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>
	<20130107035715.4649.84365378.divmod.xquotient.147@localhost6.localdomain6>
	<CAPkRfUTWV3deDRYNiG895apGEoQz063TqM63ZykTFdjeZHGnqA@mail.gmail.com>
	<FE02A5AF-4BE9-465B-8E4D-BF95C2021451@twistedmatrix.com>
Message-ID: <20130107154140.4649.2093260712.divmod.xquotient.162@localhost6.localdomain6>

On 05:47 am, glyph at twistedmatrix.com wrote:
>
>To be fair I believe that it's not really feasible for someone new to 
>the topic to write anything useful entirely, or even mostly, by 
>themselves.  But if they write something basically sensible but with 
>errors, it's easier for the experts to correct those flaws than to 
>write something original.  (Assuming, of course, that the author has 
>put enough effort into their writing that it basically hangs together 
>and makes sense, even if it's not entirely correct or perfectly 
>structured.)

"Easier" is in the eye of the beholder.
>The value of just prompting the experts to do something cannot be 
>underestimated :).

Yes, so become a 2013 Twisted sponsor today!

   http://twistedmatrix.com/trac/wiki/TwistedSponsors

Jean-Paul


From himself at vye.me  Tue Jan  8 19:11:27 2013
From: himself at vye.me (Vye Wilson)
Date: Tue, 8 Jan 2013 16:11:27 -0800
Subject: [Twisted-Python] What is The Correct Way to Close a Twisted Conch
	SSH Connection?
Message-ID: <CAGT69bPJqTiVtkOECrpEb68z=LwCsSeRcVpcYuibYVf0=SpvwA@mail.gmail.com>

Hi all,

I've got an application that moves files around between hosts and SFTP is
one of the protocols it needs to support. I'm currently using Twisted Conch
for the SFTP implementation but have come across a problem where I'm not
able to gracefully close SSH connections.

I am new to Twisted so I don't feel confident that I'm going about this the
correct way. I've asked in #twisted, SO, and exhausted as many tutorials as
I could find, but I still haven't been able to find the correct way to
close SSH connections.

If someone could take a peak at my SO post and point me in the right
direction I would greatly appreciate it.

http://stackoverflow.com/questions/13920962/what-is-the-correct-way-to-close-a-twisted-conch-ssh-connection

I'm using Twisted 12.3.0.

Thanks a ton!

--Vye
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130108/777222f6/attachment.htm 

From peter.westlake at pobox.com  Wed Jan  9 07:49:05 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 09 Jan 2013 12:49:05 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
Message-ID: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>

http://twistedmatrix.com/documents/current/core/howto/cred.html says
that the avatarId parameter to IRealm.requestAvatar must be a string,
not even a Unicode string. I'm using LDAP for authentication, and the
checker retrieves the full LDAP entry for the user as a side-effect of
authentication. Until I read that doc I was happily passing back the
tuple of LDAP details as an avatarId, and it all works perfectly well.
Is it really wrong, and if so, how will it fail? And what should I do
instead to pass back the details?

Peter.



From wulczer at wulczer.org  Wed Jan  9 08:04:40 2013
From: wulczer at wulczer.org (=?UTF-8?B?SmFuIFVyYmHFhHNraQ==?=)
Date: Wed, 09 Jan 2013 14:04:40 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
Message-ID: <50ED6AE8.5070200@wulczer.org>

On 09/01/13 13:49, Peter Westlake wrote:
> http://twistedmatrix.com/documents/current/core/howto/cred.html says
> that the avatarId parameter to IRealm.requestAvatar must be a string,
> not even a Unicode string. I'm using LDAP for authentication, and the
> checker retrieves the full LDAP entry for the user as a side-effect of
> authentication.

I remember discussing this on IRC with someone not long ago and he 
pointed me to this thread:

http://twistedmatrix.com/pipermail/twisted-python/2010-September/022826.html

I have faced a similar problem myself and after reading the code I've 
resolved to wilfully disregarding the documentation and passing tuples 
around, accepting that if it breaks, I get to keep both pieces.

Cheers,
Jan


From adi at roiban.ro  Wed Jan  9 09:40:26 2013
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 9 Jan 2013 16:40:26 +0200
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <50ED6AE8.5070200@wulczer.org>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
Message-ID: <CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>

On 9 January 2013 15:04, Jan Urba?ski <wulczer at wulczer.org> wrote:
> On 09/01/13 13:49, Peter Westlake wrote:
>> http://twistedmatrix.com/documents/current/core/howto/cred.html says
>> that the avatarId parameter to IRealm.requestAvatar must be a string,
>> not even a Unicode string. I'm using LDAP for authentication, and the
>> checker retrieves the full LDAP entry for the user as a side-effect of
>> authentication.
>
> I remember discussing this on IRC with someone not long ago and he
> pointed me to this thread:
>
> http://twistedmatrix.com/pipermail/twisted-python/2010-September/022826.html
>
> I have faced a similar problem myself and after reading the code I've
> resolved to wilfully disregarding the documentation and passing tuples
> around, accepting that if it breaks, I get to keep both pieces.

I am not an expert in Twisted, but from my understanding, the "string"
requirement is there to provide a plugable interface. So that you can
have generic credentials checkers, working with generic realms.
Having simple "strings" could also help with AvatarId serialization,
in case you have the CredentialsChecker on one computer and the you
will pass them over network/socket to a remote Realm.

I have also asked over IRC and I got the good to go answer for using
anything as AvatarID.

As long as you are only using your custom credentials checkers and
your custom realm, everything should be ok.

I am using Objects as AvatarID without any problems.

Cheers,
-- 
Adi Roiban


From ralphm at ik.nu  Wed Jan  9 10:43:45 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Wed, 09 Jan 2013 16:43:45 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
Message-ID: <50ED9031.7010603@ik.nu>

On 2013-01-09 15:40, Adi Roiban wrote:
> On 9 January 2013 15:04, Jan Urba?ski <wulczer at wulczer.org> wrote:
>> On 09/01/13 13:49, Peter Westlake wrote:
>>> http://twistedmatrix.com/documents/current/core/howto/cred.html says
>>> that the avatarId parameter to IRealm.requestAvatar must be a string,
>>> not even a Unicode string. I'm using LDAP for authentication, and the
>>> checker retrieves the full LDAP entry for the user as a side-effect of
>>> authentication.
>>
>> I remember discussing this on IRC with someone not long ago and he
>> pointed me to this thread:
>>
>> http://twistedmatrix.com/pipermail/twisted-python/2010-September/022826.html
>>
>> I have faced a similar problem myself and after reading the code I've
>> resolved to wilfully disregarding the documentation and passing tuples
>> around, accepting that if it breaks, I get to keep both pieces.
>
> I am not an expert in Twisted, but from my understanding, the "string"
> requirement is there to provide a plugable interface. So that you can
> have generic credentials checkers, working with generic realms.
> Having simple "strings" could also help with AvatarId serialization,
> in case you have the CredentialsChecker on one computer and the you
> will pass them over network/socket to a remote Realm.
>
> I have also asked over IRC and I got the good to go answer for using
> anything as AvatarID.
>
> As long as you are only using your custom credentials checkers and
> your custom realm, everything should be ok.
>
> I am using Objects as AvatarID without any problems.

I want to add here that the special avatarID for anonymous 
authenticationm, twisted.cred.checkers.ANONYMOUS, is defined as the 
empty tuple.

-- 
ralphm


From peter.westlake at pobox.com  Wed Jan  9 12:26:51 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 09 Jan 2013 17:26:51 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
Message-ID: <1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>

On Wed, Jan 9, 2013, at 14:40, Adi Roiban wrote:
> On 9 January 2013 15:04, Jan Urba?ski <wulczer at wulczer.org> wrote:
...
> > I have faced a similar problem myself and after reading the code I've
> > resolved to wilfully disregarding the documentation and passing tuples
> > around, accepting that if it breaks, I get to keep both pieces.
> 
> I am not an expert in Twisted, but from my understanding, the "string"
> requirement is there to provide a plugable interface. So that you can
> have generic credentials checkers, working with generic realms.
> Having simple "strings" could also help with AvatarId serialization,
> in case you have the CredentialsChecker on one computer and the you
> will pass them over network/socket to a remote Realm.

Those are both good points! I'll leave it this way until there's
a more official way of doing it.

> I have also asked over IRC and I got the good to go answer for using
> anything as AvatarID.
> 
> As long as you are only using your custom credentials checkers and
> your custom realm, everything should be ok.
> 
> I am using Objects as AvatarID without any problems.

Thanks to all who replied.

Peter.
 
> Cheers,
> -- 
> Adi Roiban
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Wed Jan  9 13:02:53 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 9 Jan 2013 10:02:53 -0800
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
Message-ID: <6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>

On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

>> I am not an expert in Twisted, but from my understanding, the "string"
>> requirement is there to provide a plugable interface. So that you can
>> have generic credentials checkers, working with generic realms.
>> Having simple "strings" could also help with AvatarId serialization,
>> in case you have the CredentialsChecker on one computer and the you
>> will pass them over network/socket to a remote Realm.
> 
> Those are both good points! I'll leave it this way until there's
> a more official way of doing it.

I hope it's clear that just hard-coding your avatars and realms to work only with each other is a sub-optimal solution :).

The architecture of cred is supposed to be that you can plug realms and checkers together so that a change to your authentication backend doesn't completely change your application.  Of course, that architecture is flawed in the sense that a string is a bit too narrow of a communication channel to get information about the authenticated user from one to the other, especially in cases where the application needs information from a directory service to function.

If you're interested in an improved, official way to deal with this use-case, the best way to do that would be to get involved and actively try to specify what you need.  I've got similar use-cases at work, as you can see here: <http://trac.calendarserver.org/browser/CalendarServer/trunk/twistedcaldav/directory/idirectory.py> so I'd be happy to talk to you about some ideas.

The best way to predict the future is to invent it. :)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130109/dae87c53/attachment.htm 

From hs at ox.cx  Wed Jan  9 13:04:05 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Wed, 9 Jan 2013 19:04:05 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <50ED6AE8.5070200@wulczer.org>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
Message-ID: <27644255-AA4E-4741-BAAB-FA625498ED0A@ox.cx>


Am 09.01.2013 um 14:04 schrieb Jan Urba?ski <wulczer at wulczer.org>:

>> http://twistedmatrix.com/documents/current/core/howto/cred.html says
>> that the avatarId parameter to IRealm.requestAvatar must be a string,
>> not even a Unicode string. I'm using LDAP for authentication, and the
>> checker retrieves the full LDAP entry for the user as a side-effect of
>> authentication.
> I remember discussing this on IRC with someone

;)

> not long ago and he 
> pointed me to this thread:
> 
> http://twistedmatrix.com/pipermail/twisted-python/2010-September/022826.html
> 
> I have faced a similar problem myself and after reading the code I've 
> resolved to wilfully disregarding the documentation and passing tuples 
> around, accepting that if it breaks, I get to keep both pieces.

Since my final approach wasn?t mentioned yet: I found it semantically weird to pass the full data in a variable called ?avatarId?, so I went with a dict as a cache that both the checker and the realm get passed in on construction. Not pretty but in my eyes still prettier. :)

From rodrigc at crodrigues.org  Wed Jan  9 13:19:43 2013
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 9 Jan 2013 10:19:43 -0800
Subject: [Twisted-Python] How to tell when SSH command has finished in Conch?
Message-ID: <CAG=rPVfvBKV_BiEJcF6+aA0V+gHqNJvvPpA_nGh63DSgx2JYrg@mail.gmail.com>

Hi,

I have a very similar question to the one that Vye Wilson
recently asked, "Subject: What is The Correct Way to Close a Twisted Conch
SSH Connection?"

I am using Twisted Conch to write a program that
ssh's into multiple machines and executes a single command.

I am basically trying to do the equivalent of:

for host in host1 host2 host3
do
     ssh  user at host "cat /etc/hosts"
done


To start things off, I took
http://twistedmatrix.com/documents/current/conch/examples/sshsimpleclient.py
and started modifying it.  Here is the code which I have:

http://pastebin.com/RXhjUcrS

The problem is, I can't figure out how to tell when a command has
completed, so that I can call reactor.stop().

Not in the code example I posted above, I tried to use a DeferredList by
following the example code in this blog
post:

http://technicae.cogitat.io/2008/06/async-batching-with-twisted-walkthrough.html

but I ran into the same problem where I couldn't figure out how
to tell when my command over SSH had terminated.

As a kluge, I called reactor.callLater() with a timeout of
20 seconds, and then called reactor.stop().

Any ideas as to what I am doing wrong?
Where in the Conch framework can I tell when a command
over SSH has finished?

Thanks.

--
Craig Rodrigues
rodrigc at crodrigues.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130109/cc6061ec/attachment.htm 

From exarkun at twistedmatrix.com  Wed Jan  9 13:46:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 09 Jan 2013 18:46:25 -0000
Subject: [Twisted-Python] How to tell when SSH command has finished in
 Conch?
In-Reply-To: <CAG=rPVfvBKV_BiEJcF6+aA0V+gHqNJvvPpA_nGh63DSgx2JYrg@mail.gmail.com>
References: <CAG=rPVfvBKV_BiEJcF6+aA0V+gHqNJvvPpA_nGh63DSgx2JYrg@mail.gmail.com>
Message-ID: <20130109184625.8691.1493248300.divmod.xquotient.20@top>

On 06:19 pm, rodrigc at crodrigues.org wrote:
>Hi,
>
>I have a very similar question to the one that Vye Wilson
>recently asked, "Subject: What is The Correct Way to Close a Twisted 
>Conch
>SSH Connection?"
>
>I am using Twisted Conch to write a program that
>ssh's into multiple machines and executes a single command.
>
>I am basically trying to do the equivalent of:
>
>for host in host1 host2 host3
>do
>     ssh  user at host "cat /etc/hosts"
>done
>
>
>To start things off, I took
>http://twistedmatrix.com/documents/current/conch/examples/sshsimpleclient.py
>and started modifying it.  Here is the code which I have:
>
>http://pastebin.com/RXhjUcrS
>
>The problem is, I can't figure out how to tell when a command has
>completed, so that I can call reactor.stop().
>
>Not in the code example I posted above, I tried to use a DeferredList 
>by
>following the example code in this blog
>post:
>
>http://technicae.cogitat.io/2008/06/async-batching-with-twisted- 
>walkthrough.html
>
>but I ran into the same problem where I couldn't figure out how
>to tell when my command over SSH had terminated.
>
>As a kluge, I called reactor.callLater() with a timeout of
>20 seconds, and then called reactor.stop().
>
>Any ideas as to what I am doing wrong?
>Where in the Conch framework can I tell when a command
>over SSH has finished?

You can't tell when a command has finished.  Commands are run in the 
context of a channel.  You can tell when a channel has closed because 
its `closed` method is called.

You might find this spike of an SSH command endpoint interesting:

    http://twistedmatrix.com/~exarkun/sshendpoint.py

Also note this is something that I would like to be better supported in 
Conch:

    http://twistedmatrix.com/trac/ticket/4698

Jean-Paul


From abhishekbhat at hotmail.com  Wed Jan  9 15:06:48 2013
From: abhishekbhat at hotmail.com (ABHISHEK BHAT)
Date: Wed, 9 Jan 2013 13:06:48 -0700
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3.
Message-ID: <BLU002-W25E0BA2254D9D770B08198C72B0@phx.gbl>

Hi
I am trying to use Twisted and PB but running into the below error in the zope.interface module.

I am running Python 3.3 and zope.interface version 4.0.3. I am running this on a RedHat system.

Does anybody know how to get around this problem?





bash-3.2$ python pb_client.py


Traceback (most recent call last):

  File
"pb_client.py", line 2, in <module>

    from
twisted.spread import pb


  File
"/home/abhat1/python3.3/lib/python3.3/site-packages/twisted/spread/pb.py",
line 40, in <module>

    from
twisted.cred.credentials import IAnonymous, ICredentials


  File
"/home/abhat1/python3.3/lib/python3.3/site-packages/twisted/cred/credentials.py",
line 111, in <module>

    class
DigestedCredentials(object):


  File
"/home/abhat1/python3.3/lib/python3.3/site-packages/twisted/cred/credentials.py",
line 115, in DigestedCredentials

   
implements(IUsernameHashedPassword, IUsernameDigestHash)


  File
"/home/abhat1/python3.3/lib/python3.3/site-packages/zope/interface/declarations.py",
line 405, in implements

    raise
TypeError(_ADVICE_ERROR % 'implementer')

TypeError: Class advice impossible in Python3.  Use the @implementer class decorator instead.


 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130109/26bf6ea5/attachment-0001.htm 

From itamar at futurefoundries.com  Wed Jan  9 15:31:00 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Wed, 9 Jan 2013 15:31:00 -0500
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3.
In-Reply-To: <BLU002-W25E0BA2254D9D770B08198C72B0@phx.gbl>
References: <BLU002-W25E0BA2254D9D770B08198C72B0@phx.gbl>
Message-ID: <CAOp9P3r--TqyHbQBAbbZ66BTJxG8-x32e9VRkS2+qkzmqoSENw@mail.gmail.com>

On Wed, Jan 9, 2013 at 3:06 PM, ABHISHEK BHAT <abhishekbhat at hotmail.com>wrote:

> Hi
> I am trying to use Twisted and PB but running into the below error in the
> zope.interface module.
>
> I am running Python 3.3 and zope.interface version 4.0.3. I am running
> this on a RedHat system.
>
> Does anybody know how to get around this problem?
>

twisted.spread has not yet been ported to Python 3.3. You can see the full
list of ported modules in admin/_twistedpython3.py in a checkout of
Twisted.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130109/63c34b6a/attachment.htm 

From barry at python.org  Wed Jan  9 16:53:55 2013
From: barry at python.org (Barry Warsaw)
Date: Wed, 9 Jan 2013 16:53:55 -0500
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3.
References: <BLU002-W25E0BA2254D9D770B08198C72B0@phx.gbl>
Message-ID: <20130109165355.5aa028d6@anarchist.wooz.org>

On Jan 09, 2013, at 01:06 PM, ABHISHEK BHAT wrote:

>  File
>"/home/abhat1/python3.3/lib/python3.3/site-packages/twisted/cred/credentials.py",
>line 115, in DigestedCredentials
>
>   
>implements(IUsernameHashedPassword, IUsernameDigestHash)

FWIW, you should use the @implementer class decorator instead.  This will work
in Python 3, 2.6, and 2.7.

Cheers,
-Barry
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20130109/d9a3aaaf/attachment.pgp 

From adi at roiban.ro  Wed Jan  9 17:27:04 2013
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 10 Jan 2013 00:27:04 +0200
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
Message-ID: <CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>

On 9 January 2013 20:02, Glyph <glyph at twistedmatrix.com> wrote:
> On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
>
> I am not an expert in Twisted, but from my understanding, the "string"
> requirement is there to provide a plugable interface. So that you can
> have generic credentials checkers, working with generic realms.
> Having simple "strings" could also help with AvatarId serialization,
> in case you have the CredentialsChecker on one computer and the you
> will pass them over network/socket to a remote Realm.

[snip]

> I hope it's clear that just hard-coding your avatars and realms to work only
> with each other is a sub-optimal solution :).

It is very clear :)

> The architecture of cred is supposed to be that you can plug realms and
> checkers together so that a change to your authentication backend doesn't
> completely change your application.  Of course, that architecture is flawed
> in the sense that a string is a bit too narrow of a communication channel to
> get information about the authenticated user from one to the other,
> especially in cases where the application needs information from a directory
> service to function.
>
> If you're interested in an improved, official way to deal with this
> use-case, the best way to do that would be to get involved and actively try
> to specify what you need.  I've got similar use-cases at work, as you can
> see here:
> <http://trac.calendarserver.org/browser/CalendarServer/trunk/twistedcaldav/directory/idirectory.py>
> so I'd be happy to talk to you about some ideas.
>
> The best way to predict the future is to invent it. :)

My AvatarID Object is just for data.

Let me describe one of my usage/requirement:

I have a portal with credentialsChecker for both OS accounts and
application specific accounts.
One can have user "john" both as a local account and/or an application account.
If my credentialsChecker returns only 'john', the Realm will not know
from where to get user's home folder, so the returned AvatarID needs
to signal the "source" of avatarID login so that it can use the same
source for getting account configuration.

I know that a solution is to have unique ID across all system, but in
my case, this is not possible, and I have a priority list.

I can encode the source in the avatar id like: john at os or
john at application, but I don't see why this is better than ('john',
'os') / ('john', 'application')

----

A formal description would be:

There are N authentication services and for each authentication
service, there is an associated account configuration service.
When an account is allowed by authentication service X, the server
will retrieve account configuration from the configuration service X.

-----

Another use case:

I have user X with password Y. If user X is authenticated from local
LAN it gets avatar Z, otherwise it gets avatar W.

Here a simple AvatarID is not enough, since I also need to pass the
remote peer from the transport.


I keep a reference to remote peer in the Avatar. Doing this I don't
need to always pass the transport, and just use the avatar. I do this
to keep track of "sessions" in logs.

-----

Since I don't know much about Twisted, this might be just bad
design/architecture and there is some way of doing this while still
using a simple avatarid.

----

I am not sure I fully understood the idirectory.py example, but rather
than verifying credentials for each resource, I prefer to validate the
credentials once (do one authentication) and then have a different
authorization process.

In some cases the credentialsChecker can do authentication and
authorization in the same step.
In my usage, the credentialsChecker only does autentication, and then
an initial authorization is done in the realm.

-----

I can discuss this in private, write a wiki page or add more details,
if required.

Thanks!
-- 
Adi Roiban


From marco.giusti at gmail.com  Thu Jan 10 05:00:06 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Thu, 10 Jan 2013 11:00:06 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>
Message-ID: <20130110100006.GA31409@murdoc>

On Thu, Jan 10, 2013 at 12:27:04AM +0200, Adi Roiban wrote:
> On 9 January 2013 20:02, Glyph <glyph at twistedmatrix.com> wrote:
> > On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
> >
> > I am not an expert in Twisted, but from my understanding, the "string"
> > requirement is there to provide a plugable interface. So that you can
> > have generic credentials checkers, working with generic realms.
> > Having simple "strings" could also help with AvatarId serialization,
> > in case you have the CredentialsChecker on one computer and the you
> > will pass them over network/socket to a remote Realm.
> 
> [snip]
> 
> > I hope it's clear that just hard-coding your avatars and realms to work only
> > with each other is a sub-optimal solution :).
> 
> It is very clear :)
> 
> > The architecture of cred is supposed to be that you can plug realms and
> > checkers together so that a change to your authentication backend doesn't
> > completely change your application.  Of course, that architecture is flawed
> > in the sense that a string is a bit too narrow of a communication channel to
> > get information about the authenticated user from one to the other,
> > especially in cases where the application needs information from a directory
> > service to function.
> >
> > If you're interested in an improved, official way to deal with this
> > use-case, the best way to do that would be to get involved and actively try
> > to specify what you need.  I've got similar use-cases at work, as you can
> > see here:
> > <http://trac.calendarserver.org/browser/CalendarServer/trunk/twistedcaldav/directory/idirectory.py>
> > so I'd be happy to talk to you about some ideas.
> >
> > The best way to predict the future is to invent it. :)
> 
> My AvatarID Object is just for data.
> 
> Let me describe one of my usage/requirement:
> 
> I have a portal with credentialsChecker for both OS accounts and
> application specific accounts.
> One can have user "john" both as a local account and/or an application account.
> If my credentialsChecker returns only 'john', the Realm will not know
> from where to get user's home folder, so the returned AvatarID needs
> to signal the "source" of avatarID login so that it can use the same
> source for getting account configuration.

Can't you use `Portal.login` interfaces paramenter? I think you have two
different entry points for local and application accounts, so:

	# login as local account
	portal.login('john', None, ILocalHomeFolder)
	# login as application account
	portal.login('john', None, IApplicationLogic)


	class Realm:

		def requestAvatar(avatarId, mind, *interfaces):
			getAvatar = AFactory(interfaces)
			avatar = getAvatar(avatarId, mind)
			return avatar

> I know that a solution is to have unique ID across all system, but in
> my case, this is not possible, and I have a priority list.
> 
> I can encode the source in the avatar id like: john at os or
> john at application, but I don't see why this is better than ('john',
> 'os') / ('john', 'application')

well actually tuples are not modifiable, so they are strings, then
('john', 'os') is an unique identifier across all system with no much
more information than 'john at os'. The advantage of using plain string is
that they don't break the interface.

> A formal description would be:
> 
> There are N authentication services and for each authentication
> service, there is an associated account configuration service.
> When an account is allowed by authentication service X, the server
> will retrieve account configuration from the configuration service X.
> 
> -----
> 
> Another use case:
> 
> I have user X with password Y. If user X is authenticated from local
> LAN it gets avatar Z, otherwise it gets avatar W.
> 
> Here a simple AvatarID is not enough, since I also need to pass the
> remote peer from the transport.
> 
> 
> I keep a reference to remote peer in the Avatar. Doing this I don't
> need to always pass the transport, and just use the avatar. I do this
> to keep track of "sessions" in logs.

take a look at mind parameter and at twisted.words.service on how you
can use it.

> In some cases the credentialsChecker can do authentication and
> authorization in the same step.
> In my usage, the credentialsChecker only does autentication, and then
> an initial authorization is done in the realm.

just my 2c.


From marco.giusti at gmail.com  Thu Jan 10 05:05:32 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Thu, 10 Jan 2013 11:05:32 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <20130110100006.GA31409@murdoc>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>
	<20130110100006.GA31409@murdoc>
Message-ID: <20130110100532.GB31409@murdoc>

On Thu, Jan 10, 2013 at 11:00:06AM +0100, Marco Giusti wrote:
[cut]
> 
> Can't you use `Portal.login` interfaces paramenter? I think you have two
> different entry points for local and application accounts, so:
> 
> 	# login as local account
> 	portal.login('john', None, ILocalHomeFolder)
> 	# login as application account
> 	portal.login('john', None, IApplicationLogic)

here the credentials are not just a plain string, but an object that
provides ICredentials.


From adi at roiban.ro  Thu Jan 10 05:34:57 2013
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 10 Jan 2013 12:34:57 +0200
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <20130110100006.GA31409@murdoc>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>
	<20130110100006.GA31409@murdoc>
Message-ID: <CAFycZ9f4mhDSExDqGXj8zCrkttDBWeSU9OvER+1xyZRMn0zweg@mail.gmail.com>

On 10 January 2013 12:00, Marco Giusti <marco.giusti at gmail.com> wrote:
[snip]
>> My AvatarID Object is just for data.
>>
>> Let me describe one of my usage/requirement:
>>
>> I have a portal with credentialsChecker for both OS accounts and
>> application specific accounts.
>> One can have user "john" both as a local account and/or an application account.
>> If my credentialsChecker returns only 'john', the Realm will not know
>> from where to get user's home folder, so the returned AvatarID needs
>> to signal the "source" of avatarID login so that it can use the same
>> source for getting account configuration.
>
> Can't you use `Portal.login` interfaces paramenter? I think you have two
> different entry points for local and application accounts, so:

I can not do portal.login('john', None, ILocalHomeFolder) since at log
in time I don't know if john is an os or application account... The
credential checker will find out what kind of account is John.

[snip]

> well actually tuples are not modifiable, so they are strings, then
> ('john', 'os') is an unique identifier across all system with no much
> more information than 'john at os'. The advantage of using plain string is
> that they don't break the interface.

Later I would like to extract the provider from the AvatatID and doing
(user, provider) = AvatarID.split('@', 2) is a bit more complicated
and error prone.


Thanks for the notes.

Cheers
-- 
Adi Roiban


From marco.giusti at gmail.com  Thu Jan 10 06:14:36 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Thu, 10 Jan 2013 12:14:36 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAFycZ9f4mhDSExDqGXj8zCrkttDBWeSU9OvER+1xyZRMn0zweg@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>
	<20130110100006.GA31409@murdoc>
	<CAFycZ9f4mhDSExDqGXj8zCrkttDBWeSU9OvER+1xyZRMn0zweg@mail.gmail.com>
Message-ID: <20130110111436.GC31409@murdoc>

On Thu, Jan 10, 2013 at 12:34:57PM +0200, Adi Roiban wrote:
> On 10 January 2013 12:00, Marco Giusti <marco.giusti at gmail.com> wrote:
> [snip]
> >> My AvatarID Object is just for data.
> >>
> >> Let me describe one of my usage/requirement:
> >>
> >> I have a portal with credentialsChecker for both OS accounts and
> >> application specific accounts.
> >> One can have user "john" both as a local account and/or an application account.
> >> If my credentialsChecker returns only 'john', the Realm will not know
> >> from where to get user's home folder, so the returned AvatarID needs
> >> to signal the "source" of avatarID login so that it can use the same
> >> source for getting account configuration.
[cut]

This could be an overshoot but you can have two portals, use one as
the default and the second one as a fallback. I think the code will be
a little bit cleaner at the checker/realm side at the price of a little
bit of complexity at the login side:

	portal1.login(credentials, None).addErrback(lambda _:
		portal2.login(credentials, peer)).addCallbacks(...)

But I don't know if it is worth the candle.

m.


From peter.westlake at pobox.com  Thu Jan 10 09:41:54 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Thu, 10 Jan 2013 14:41:54 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
Message-ID: <1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>

On Wed, Jan 9, 2013, at 18:02, Glyph wrote
> On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com>
> wrote:
> > On Jan 9, Adi wrote:
> >> I am not an expert in Twisted, but from my understanding, the "string"
> >> requirement is there to provide a plugable interface. So that you can
> >> have generic credentials checkers, working with generic realms.
> >> Having simple "strings" could also help with AvatarId serialization,
> >> in case you have the CredentialsChecker on one computer and the you
> >> will pass them over network/socket to a remote Realm.
> > 
> > Those are both good points! I'll leave it this way until there's
> > a more official way of doing it.
> 
> I hope it's clear that just hard-coding your avatars and realms to work
> only with each other is a sub-optimal solution :).

Indeed :-)

> The architecture of cred is supposed to be that you can plug realms and
> checkers together so that a change to your authentication backend doesn't
> completely change your application.  Of course, that architecture is
> flawed in the sense that a string is a bit too narrow of a communication
> channel to get information about the authenticated user from one to the
> other, especially in cases where the application needs information from a
> directory service to function.
> 
> If you're interested in an improved, official way to deal with this
> use-case, the best way to do that would be to get involved and actively
> try to specify what you need.

Here's my use case. The CredentialsChecker takes a login name,
e.g. "pwest", and looks it up in LDAP. It gets back an LDAP record
something like this:

{
   'distinguishedName': 'CN=Peter Westlake,OU=User
   Accounts,OU=EMEA,DC=example,DC=com',
   'cn': 'Peter Westlake',
   'name': 'Peter Westlake',
   'sn': 'Westlake',
   'mail': 'Peter.Westlake at example.com',
   'givenName': 'Peter',
   'sAMAccountName': 'pwest'
}

It passes the distinguishedName and the supplied password
to the LDAP password checker function for authorization.

At this point the correct thing to do would be to return "pwest"
as the avatarId. But I've got all that other useful information
available, and it seems a shame to have to get it again in
the Realm, so I return the whole dictionary.

Some points to note:

1. Converting the dict to a string would make
   the avatarId conform to the interface, but
   it still wouldn't be pluggable, because other
   checkers wouldn't return the extra information.

   This strikes me as a general problem. If the
   checker returns more than an avatarId, whether
   directly or through some official-sanctioned channel,
   it will only be interchangeable with other
   checkers that also return the extra information.

2. The application knows about LDAP, and uses it
   to find things like your manager and your email
   address. Some of this information is in the
   avatarId, but some of it isn't, so some LDAP
   calls will have to be made. This weakens the
   argument against duplicating the lookup.

The correct thing to do in this case would undoubtedly
be to accept that an LDAP call isn't very expensive,
and repeat it in the Realm. In other words, my use
case isn't very compelling. You have shamed me into
changing it :-)   In one way this is a good result,
though it doesn't help with the design.

Having made that change, I can use a password file
or an in-memory database for testing, and write
test scripts that don't need a real password. That's
well worth the /completely unnoticeable/ expense
of an extra LDAP call!

BUT:
This only works because it doesn't use the user's
password for binding to LDAP. If it did, then either
the password or the LDAP session would have
to be made available to the Realm, and we're
back at square 1.

Peter.


From itamar at futurefoundries.com  Thu Jan 10 12:40:12 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Thu, 10 Jan 2013 12:40:12 -0500
Subject: [Twisted-Python] Two-day Twisted class in San Francisco (right
	before PyCon)
Message-ID: <CAOp9P3r6WPrTGGFEoUfdM6vUX6sTvjexiZVXJg9TzQzCxTQt0g@mail.gmail.com>

On the Monday and Tuesday before PyCon, Jean-Paul Calderone and I will be
teaching a two-day introduction to Twisted in San Francisco. We'll be
covering the basics of the event loop, Deferreds, and other core APIs, with
lots of hands-on exercises. (The 3-hour tutorial I'll be teaching at PyCon
includes a small part of this material.)

You can learn more here:
http://blog.futurefoundries.com/2013/01/2-day-twisted-class-in-san-francisco.html

Or sign up here:
http://futurefoundries.eventbrite.com/

Regards,
-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130110/2c2ccaa9/attachment.htm 

From fabian.rothfuchs at googlemail.com  Thu Jan 10 14:58:04 2013
From: fabian.rothfuchs at googlemail.com (F Rothfuchs)
Date: Thu, 10 Jan 2013 20:58:04 +0100
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
Message-ID: <CAEaBPB3J82OE4_tguv3Xw_cT=x7-DYqLdfxUbGMiEqGsd31cYA@mail.gmail.com>

Hey there,


I'm trying to start and stop a twisted server in a unittest:
http://dpaste.org/qwaUt/ .

Calling reactor.stop() in the callback causes a KeyboardInterrupt
exception, and tearDown gets never executed, as it's probably waiting for
the test to finish.

After calling `trial d.py` you need to run a `telnet localhost 8007`
manually to stimulate the connectionMade() method.


I'm totally stuck and would appreciate any help.


Thanks

Fabian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130110/2c7c5259/attachment.htm 

From exarkun at twistedmatrix.com  Thu Jan 10 15:51:34 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 10 Jan 2013 20:51:34 -0000
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CAEaBPB3J82OE4_tguv3Xw_cT=x7-DYqLdfxUbGMiEqGsd31cYA@mail.gmail.com>
References: <CAEaBPB3J82OE4_tguv3Xw_cT=x7-DYqLdfxUbGMiEqGsd31cYA@mail.gmail.com>
Message-ID: <20130110205134.4510.1663267078.divmod.xquotient.4@localhost6.localdomain6>

On 07:58 pm, fabian.rothfuchs at googlemail.com wrote:
>Hey there,
>
>
>I'm trying to start and stop a twisted server in a unittest:
>http://dpaste.org/qwaUt/ .

Why?  This isn't the typical way to write unit tests for Twisted-based 
code.  The reactor is started and stopped by trial as necessary.  Your 
code should just expect that it is running and let trial stop it when it 
is time to stop.

If you have asynchronous code to test, you return a Deferred from a test 
method and the test completes when the Deferred fires.  Not when the 
reactor stops.

Also, a lot of people have come to dislike this style of test, instead 
preferring to use test doubles that don't involve real I/O or time so 
that they can completely test the logic of their code deterministically 
- thus also without ever running a real reactor or needing to use the 
"return a Deferred from a test method" feature of trial.

Jean-Paul


From stephane_brault at yahoo.fr  Fri Jan 11 17:43:46 2013
From: stephane_brault at yahoo.fr (St&#xE9;phane Brault)
Date: Fri, 11 Jan 2013 22:43:46 +0000 (GMT)
Subject: [Twisted-Python] (no subject)
Message-ID: <1357944226.43784.BPMail_high_noncarrier@web171906.mail.ir2.yahoo.com>


Garcinia Cambogia Extract are the newest painless solution to Weightloss http://nuevolaredoexpress.com/coveralphabetjasonbennett/


From fabian.rothfuchs at googlemail.com  Sat Jan 12 09:00:17 2013
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Sat, 12 Jan 2013 15:00:17 +0100
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <20130110205134.4510.1663267078.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <CD1729CF.41840%fabian.rothfuchs@googmail.com>

I'm in the dilemma of using both - Django and Twisted.
My goal is to have Django initialising the test (python manage.py test
<appname>), instead of trial, as it will setup the whole test environment
(I.e. Creates a db copy, allows per-model testing, follows certain
conventions, etc).

As to that I'm trying to find a way how to start/stop the reactor from the
test, as trial is not executed.
Do you have an idea or an approach how this could be realised?

Thanks
Fabian


On 1/10/13 9:51 PM, "exarkun at twistedmatrix.com"
<exarkun at twistedmatrix.com> wrote:

>On 07:58 pm, fabian.rothfuchs at googlemail.com wrote:
>>Hey there,
>>
>>
>>I'm trying to start and stop a twisted server in a unittest:
>>http://dpaste.org/qwaUt/ .
>
>Why?  This isn't the typical way to write unit tests for Twisted-based
>code.  The reactor is started and stopped by trial as necessary.  Your
>code should just expect that it is running and let trial stop it when it
>is time to stop.
>
>If you have asynchronous code to test, you return a Deferred from a test
>method and the test completes when the Deferred fires.  Not when the
>reactor stops.
>
>Also, a lot of people have come to dislike this style of test, instead
>preferring to use test doubles that don't involve real I/O or time so
>that they can completely test the logic of their code deterministically
>- thus also without ever running a real reactor or needing to use the
>"return a Deferred from a test method" feature of trial.
>
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From jml at mumak.net  Sat Jan 12 09:26:04 2013
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 12 Jan 2013 14:26:04 +0000
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CD1729CF.41840%fabian.rothfuchs@googmail.com>
References: <20130110205134.4510.1663267078.divmod.xquotient.4@localhost6.localdomain6>
	<CD1729CF.41840%fabian.rothfuchs@googmail.com>
Message-ID: <CAHZ8tnb==shhbhAEvt544YTD1W4Cu1qan5_Q2cmt7XBd4OaEaQ@mail.gmail.com>

On Sat, Jan 12, 2013 at 2:00 PM, Fabian Rothfuchs
<fabian.rothfuchs at googlemail.com> wrote:
> I'm in the dilemma of using both - Django and Twisted.
> My goal is to have Django initialising the test (python manage.py test
> <appname>), instead of trial, as it will setup the whole test environment
> (I.e. Creates a db copy, allows per-model testing, follows certain
> conventions, etc).
>
> As to that I'm trying to find a way how to start/stop the reactor from the
> test, as trial is not executed.
> Do you have an idea or an approach how this could be realised?
>

One thing that works for us is to have our Twisted-using tests
subclass testtools.TestCase[1], and declare that they are asynchronous
Twisted tests.

e.g.

    class TestTwistedAPI(testtools.TestCase):
        run_tests_with = AsynchronousDeferredRunTest
        def test_foo(self):
            d = foo.some_api()
            d.addCallback(self.assertEqual, "bar")
            return d

Of course, not inheriting from Django's TestCase means you lose a lot
of its implicit set-up, but most of that can be called from public
APIs. We have a very rough project that does some of the
necessaries.[2]

You could probably use twisted.trial.unittest.TestCase instead of
testtools.TestCase.

cheers,
jml

[1] http://pypi.python.org/pypi/testtools
[2] http://pypi.python.org/pypi/djangofixture


From ralphm at ik.nu  Sat Jan 12 16:26:43 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Sat, 12 Jan 2013 22:26:43 +0100
Subject: [Twisted-Python] [Twisted-Jabber]  [ANNOUNCE] Wokkel 0.7.1
Message-ID: <50F1D513.2010009@ik.nu>

Hi!

I am proud to announce version 0.7.1 of Wokkel, a set of enhancements on 
the Jabber/XMPP support in Twisted Words.

    http://wokkel.ik.nu/releases/0.7.1/wokkel-0.7.1.tar.gz


The highlights:

  * This release addresses an incompatibility with Twisted 12.3.0,
    which made it impossible for clients to connect to a server, and
    for servers to connect to other servers. As a bonus, connecting to
    servers with an Internationalized Domain Name is now supported.

  * Several improvements to client-side roster handling, including
    support for roster versioning, rejecting unauthorized roster pushes
    and adding roster items.

  * Server-side components will now try to reconnect to the server
    if the first attempt failed.

Besides those, a few minor bugs have been resolved. See the complete 
news file at:

    http://wokkel.ik.nu/releases/0.7.1/NEWS

Jabber on!

-- 
ralphm


From itamar at futurefoundries.com  Sat Jan 12 18:31:13 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sat, 12 Jan 2013 18:31:13 -0500
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CD1729CF.41840%fabian.rothfuchs@googmail.com>
References: <20130110205134.4510.1663267078.divmod.xquotient.4@localhost6.localdomain6>
	<CD1729CF.41840%fabian.rothfuchs@googmail.com>
Message-ID: <CAOp9P3pvdDUKi3dJsct0n4JOTpV9ECNH5WZxM12MD7muhkuXAw@mail.gmail.com>

On Sat, Jan 12, 2013 at 9:00 AM, Fabian Rothfuchs <
fabian.rothfuchs at googlemail.com> wrote:

> I'm in the dilemma of using both - Django and Twisted.
> My goal is to have Django initialising the test (python manage.py test
> <appname>), instead of trial, as it will setup the whole test environment
> (I.e. Creates a db copy, allows per-model testing, follows certain
> conventions, etc).
>
> As to that I'm trying to find a way how to start/stop the reactor from the
> test, as trial is not executed.
> Do you have an idea or an approach how this could be realised?
>

The functionality to start/stop the reactor when a test returns a Deferred
is part of twisted.trial.unittest.TestCase, which subclasses Python's
unittest.TestCase. As a result you don't need to use the trial command-line
tool, you can use any Python test runner that knows about Python's
TestCase; just make sure to subclass twisted.trial.unittest.TestCase, and
your test will support running the reactor for you when you return a
Deferred.

Or, if possible, you can avoid using the reactor at all; some approaches
(as mentioned by Jean-Paul) are described in the trial documentation:
http://twistedmatrix.com/documents/current/core/howto/trial.html

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130112/261e8a5b/attachment.htm 

From abhishekbhat at hotmail.com  Sat Jan 12 22:15:54 2013
From: abhishekbhat at hotmail.com (ABHISHEK BHAT)
Date: Sat, 12 Jan 2013 20:15:54 -0700
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
Message-ID: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>

Itamar
Is there some sort of upper bound on when PB would be available for Python3.3? I am hoping to use it for a Python3 project.

Any proposals to switch from PB to Foolscap in the upcoming releases of Twisted?
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130112/9c29d394/attachment.htm 

From exarkun at twistedmatrix.com  Sat Jan 12 22:29:54 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Jan 2013 03:29:54 -0000
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
In-Reply-To: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
References: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
Message-ID: <20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>

On 03:15 am, abhishekbhat at hotmail.com wrote:
>Itamar
>Is there some sort of upper bound on when PB would be available for 
>Python3.3? I am hoping to use it for a Python3 project.

As with any development, it will happen when people do it. :)  Twisted 
development is almost entirely on a volunteer basis, and people mostly 
work on what they personally want to work on.

If you're wondering who's currently working on porting PB to Python 3, I 
don't think anyone is.
>Any proposals to switch from PB to Foolscap in the upcoming releases of 
>Twisted?

No.  Foolscap is not backwards compatible with PB, so there won't be a 
switch from one to the other.  Fortunately, there's nothing that 
prevents you from ignoring PB and instead using Foolscap in any of your 
Twisted-based projects.

Jean-Paul


From exarkun at twistedmatrix.com  Sun Jan 13 00:05:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Jan 2013 05:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1358053525.77.496427078@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130113/a36472c8/attachment.htm 

From glyph at twistedmatrix.com  Sun Jan 13 00:48:26 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 12 Jan 2013 21:48:26 -0800
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
In-Reply-To: <20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>
References: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
	<20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>
Message-ID: <79EF0037-6602-423B-A8EF-904231FF73E5@twistedmatrix.com>


On Jan 12, 2013, at 7:29 PM, exarkun at twistedmatrix.com wrote:

> On 03:15 am, abhishekbhat at hotmail.com wrote:
>> Itamar
>> Is there some sort of upper bound on when PB would be available for 
>> Python3.3? I am hoping to use it for a Python3 project.
> 
> As with any development, it will happen when people do it. :)  Twisted 
> development is almost entirely on a volunteer basis, and people mostly 
> work on what they personally want to work on.
> 
> If you're wondering who's currently working on porting PB to Python 3, I 
> don't think anyone is.

Hi Abhishek,

_You_ could always contribute a port of PB to Python 3.  PB is itself a pretty self-contained module with not many dependencies outside of what's already been ported.  Porting it to Python 3 should be relatively straightforward, and the existing python 3 ports should provide a good example of how to do it.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130112/4f46e6a1/attachment-0001.htm 

From glyph at twistedmatrix.com  Sun Jan 13 01:39:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 12 Jan 2013 22:39:31 -0800
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
Message-ID: <3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>


On Jan 10, 2013, at 6:41 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

> On Wed, Jan 9, 2013, at 18:02, Glyph wrote
>> On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com>
>> wrote:
>>> On Jan 9, Adi wrote:
>>>> I am not an expert in Twisted, but from my understanding, the "string"
>>>> requirement is there to provide a plugable interface. So that you can
>>>> have generic credentials checkers, working with generic realms.
>>>> Having simple "strings" could also help with AvatarId serialization,
>>>> in case you have the CredentialsChecker on one computer and the you
>>>> will pass them over network/socket to a remote Realm.
>>> 
>>> Those are both good points! I'll leave it this way until there's
>>> a more official way of doing it.
>> 
>> I hope it's clear that just hard-coding your avatars and realms to work
>> only with each other is a sub-optimal solution :).
> 
> Indeed :-)
> 
>> The architecture of cred is supposed to be that you can plug realms and
>> checkers together so that a change to your authentication backend doesn't
>> completely change your application.  Of course, that architecture is
>> flawed in the sense that a string is a bit too narrow of a communication
>> channel to get information about the authenticated user from one to the
>> other, especially in cases where the application needs information from a
>> directory service to function.
>> 
>> If you're interested in an improved, official way to deal with this
>> use-case, the best way to do that would be to get involved and actively
>> try to specify what you need.
> 
> Here's my use case. The CredentialsChecker takes a login name,
> e.g. "pwest", and looks it up in LDAP. It gets back an LDAP record
> something like this:
> 
> {
>   'distinguishedName': 'CN=Peter Westlake,OU=User
>   Accounts,OU=EMEA,DC=example,DC=com',
>   'cn': 'Peter Westlake',
>   'name': 'Peter Westlake',
>   'sn': 'Westlake',
>   'mail': 'Peter.Westlake at example.com',
>   'givenName': 'Peter',
>   'sAMAccountName': 'pwest'
> }
> 
> It passes the distinguishedName and the supplied password
> to the LDAP password checker function for authorization.
> 
> At this point the correct thing to do would be to return "pwest"
> as the avatarId. But I've got all that other useful information
> available, and it seems a shame to have to get it again in
> the Realm, so I return the whole dictionary.

One potentially interesting question here, as well, is "why sAMAccountName" as the avatarID?  Isn't there a UID or UUID in there somewhere?  In my application, all the user identifiers are opaque, and that makes a bit more sense, since those values don't change, although any other part of the user's record could change as information evolves over time.  For example, if someone gets married and changes their name, they might find it annoying to have to log in with a username that references their maiden name all the time.

> Some points to note:
> 
> 1. Converting the dict to a string would make
>   the avatarId conform to the interface, but
>   it still wouldn't be pluggable, because other
>   checkers wouldn't return the extra information.
> 
>   This strikes me as a general problem. If the
>   checker returns more than an avatarId, whether
>   directly or through some official-sanctioned channel,
>   it will only be interchangeable with other
>   checkers that also return the extra information.
> 
> 2. The application knows about LDAP, and uses it
>   to find things like your manager and your email
>   address. Some of this information is in the
>   avatarId, but some of it isn't, so some LDAP
>   calls will have to be made. This weakens the
>   argument against duplicating the lookup.
> 
> The correct thing to do in this case would undoubtedly
> be to accept that an LDAP call isn't very expensive,
> and repeat it in the Realm. In other words, my use
> case isn't very compelling. You have shamed me into
> changing it :-)   In one way this is a good result,
> though it doesn't help with the design.
> 
> Having made that change, I can use a password file
> or an in-memory database for testing, and write
> test scripts that don't need a real password. That's
> well worth the /completely unnoticeable/ expense
> of an extra LDAP call!

As other posters have already said, you can also have your realm and your checker share a reference to an object that caches credentials.  This would also let you cache other calls that are made later, too.

> BUT:
> This only works because it doesn't use the user's
> password for binding to LDAP. If it did, then either
> the password or the LDAP session would have
> to be made available to the Realm, and we're
> back at square 1.

It seems like the "shared caching reference" would solve this problem as well?

-glyph



From itamar at futurefoundries.com  Sun Jan 13 09:08:38 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 13 Jan 2013 09:08:38 -0500
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
Message-ID: <CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>

It's possible that in some of the cases discussed above, what you want is a
custom *Portal*. For example, if you want to try a sequence of logins, and
choose the first that succeeds:

class MultiPortal(object):
    def __init__(self, portals):
        self.portals = portals

    @inlineCallbacks
    def login(self, *args, **kwargs):
        for portal in self.portals:
            try:
                return portal.login(*args, **kwargs)
            except:
                continue
        # Ran out of portals, failed to login:
        raise Unauthorized()

Or, let's say you're writing a backend that is a combination checker and
realm, where separating that two doesn't make sense. E.g. a backend for a
POP3 server that is a proxy to another POP3 server. In this case there's no
point in writing separate checker and realm, just write a new Portal:

class POP3ProxyPortal(object):
    def __init__(self, endpoint):
        self.endpoint = endpoint

    @defer.inlineCallbacks
    def login(self, credentials, mind, *interfaces):
        pop3client = yield self.endpoint.connect(POP3ClientFactory())
        yield pop3client.login(credentials.username, credentials.password)
        defer.returnValue((IMailbox, MailboxProxy(pop3client),
pop3client.quit))


-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130113/1fc55900/attachment.htm 

From itamar at futurefoundries.com  Sun Jan 13 09:10:57 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 13 Jan 2013 09:10:57 -0500
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>
Message-ID: <CAOp9P3qsKq71SUqKNnkchiTAkrgBZu7oVB-HMvaw=J5TiD2neA@mail.gmail.com>

On Sun, Jan 13, 2013 at 9:08 AM, Itamar Turner-Trauring <
itamar at futurefoundries.com> wrote:

>
>     @inlineCallbacks
>     def login(self, *args, **kwargs):
>         for portal in self.portals:
>             try:
>                 return portal.login(*args, **kwargs)
>             except:
>                 continue
>         # Ran out of portals, failed to login:
>         raise Unauthorized()
>

Sigh. Make that:

    @inlineCallbacks
    def login(self, *args, **kwargs):
        for portal in self.portals:
            try:
                returnValue(yield portal.login(*args, **kwargs))
            except:
                continue
        # Ran out of portals, failed to login:
        raise Unauthorized()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130113/62916a0d/attachment.htm 

From _ at lvh.cc  Sun Jan 13 15:54:14 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sun, 13 Jan 2013 21:54:14 +0100
Subject: [Twisted-Python] Appropriate exception for AMP types receiving
	garbage?
In-Reply-To: <5B523109-A533-4820-8D32-2BC0D155CACC@twistedmatrix.com>
References: <CAE_Hg6bK5XEKf3c++KvfCriSnhrFFk0Nc1MWL1wRtBD=sSuzFQ@mail.gmail.com>
	<5B523109-A533-4820-8D32-2BC0D155CACC@twistedmatrix.com>
Message-ID: <CAE_Hg6arQ6BjcGnxZXge4ffbP3Z6z6j77U8aD1TbGR4r8AFmMQ@mail.gmail.com>

How about something like {_error: 1, _error_code: BAD_ARGUMENT_VALUE, ...}?


I was writing something to constrain AMP Argument's in- and output values:

https://github.com/lvh/txampext/blob/master/txampext/constrained.py

... and my users getting a real exception as opposed to a disconnected
transport would be nice :)

Any ticket suggestions welcome.



On Thu, Dec 27, 2012 at 8:02 AM, Glyph <glyph at twistedmatrix.com> wrote:

> On Dec 26, 2012, at 1:43 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
>
> I'm writing a custom AMP type. I noticed that when writing the unit test
> for garbage input, I didn't really know what exception to check for.
>
> I couldn't find any place where this was formally defined, so I checked
> for implementation behavior. Boolean explicitly raises TypeError. Integer
> raises ValueError, but that appears to only be an implementation detail of
> int.
>
> It could also be that it doesn't matter at all, but it does seem a little
> strange that Integer and Boolean raise different exceptions when fed
> garbage...
>
>
> Hey Laurens,
>
> This is basically a feature request :).  There's no particular defined
> error type for argument parse errors in AMP.  It's not a bad feature
> though.  The exception also doesn't go anywhere useful - the only contract
> is basically that it'll bubble up and break the connection if you get some
> bad data.  A more sophisticated and trappable / trackable way to propagate
> this sort of error would be useful.
>
> (I would personally consider it a compatible change if the behavior of the
> error cases changed here, on the grounds that anything that uncontrollably
> logs a traceback in response to network input is a gross spec violation of
> a sort.  Maybe we should add an explicit exemption for that case.)
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130113/1da5fe71/attachment.htm 

From lacrima.maxim at gmail.com  Mon Jan 14 03:53:51 2013
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Mon, 14 Jan 2013 10:53:51 +0200
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
In-Reply-To: <79EF0037-6602-423B-A8EF-904231FF73E5@twistedmatrix.com>
References: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
	<20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>
	<79EF0037-6602-423B-A8EF-904231FF73E5@twistedmatrix.com>
Message-ID: <CAKef57NWDTDrJae-4LW8-npTXeJP-mVRdYXCJGk-e0__xH+zRA@mail.gmail.com>

Hi!

Sorry for off-topic.

What is the motivation behind creation of Foolscap (newpb)? What does it
solve that can't be solved by old PB?

Thank you


On 13 January 2013 07:48, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jan 12, 2013, at 7:29 PM, exarkun at twistedmatrix.com wrote:
>
> On 03:15 am, abhishekbhat at hotmail.com wrote:
>
> Itamar
> Is there some sort of upper bound on when PB would be available for
> Python3.3? I am hoping to use it for a Python3 project.
>
>
> As with any development, it will happen when people do it. :)  Twisted
> development is almost entirely on a volunteer basis, and people mostly
> work on what they personally want to work on.
>
> If you're wondering who's currently working on porting PB to Python 3, I
> don't think anyone is.
>
>
> Hi Abhishek,
>
> _You_ could always contribute a port of PB to Python 3.  PB is itself a
> pretty self-contained module with not many dependencies outside of what's
> already been ported.  Porting it to Python 3 should be relatively
> straightforward, and the existing python 3 ports should provide a good
> example of how to do it.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130114/d60b6a91/attachment.htm 

From peter.westlake at pobox.com  Mon Jan 14 06:18:55 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 14 Jan 2013 11:18:55 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
Message-ID: <1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>

On Sun, Jan 13, 2013, at 6:39, Glyph wrote:
> 
> On Jan 10, 2013, at 6:41 AM, Peter Westlake <peter.westlake at pobox.com>
> wrote:
> 
> > On Wed, Jan 9, 2013, at 18:02, Glyph wrote
> >> On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com>
> >> wrote:
> >>> On Jan 9, Adi wrote:
> >>>> I am not an expert in Twisted, but from my understanding, the "string"
> >>>> requirement is there to provide a plugable interface. So that you can
> >>>> have generic credentials checkers, working with generic realms.
> >>>> Having simple "strings" could also help with AvatarId serialization,
> >>>> in case you have the CredentialsChecker on one computer and the you
> >>>> will pass them over network/socket to a remote Realm.
> >>> 
> >>> Those are both good points! I'll leave it this way until there's
> >>> a more official way of doing it.
> >> 
> >> I hope it's clear that just hard-coding your avatars and realms to work
> >> only with each other is a sub-optimal solution :).
> > 
> > Indeed :-)
> > 
> >> The architecture of cred is supposed to be that you can plug realms and
> >> checkers together so that a change to your authentication backend doesn't
> >> completely change your application.  Of course, that architecture is
> >> flawed in the sense that a string is a bit too narrow of a communication
> >> channel to get information about the authenticated user from one to the
> >> other, especially in cases where the application needs information from a
> >> directory service to function.
> >> 
> >> If you're interested in an improved, official way to deal with this
> >> use-case, the best way to do that would be to get involved and actively
> >> try to specify what you need.
> > 
> > Here's my use case. The CredentialsChecker takes a login name,
> > e.g. "pwest", and looks it up in LDAP. It gets back an LDAP record
> > something like this:
> > 
> > {
> >   'distinguishedName': 'CN=Peter Westlake,OU=User
> >   Accounts,OU=EMEA,DC=example,DC=com',
> >   'cn': 'Peter Westlake',
> >   'name': 'Peter Westlake',
> >   'sn': 'Westlake',
> >   'mail': 'Peter.Westlake at example.com',
> >   'givenName': 'Peter',
> >   'sAMAccountName': 'pwest'
> > }
> > 
> > It passes the distinguishedName and the supplied password
> > to the LDAP password checker function for authorization.
> > 
> > At this point the correct thing to do would be to return "pwest"
> > as the avatarId. But I've got all that other useful information
> > available, and it seems a shame to have to get it again in
> > the Realm, so I return the whole dictionary.
> 
> One potentially interesting question here, as well, is "why
> sAMAccountName" as the avatarID?  Isn't there a UID or UUID in there
> somewhere?  In my application, all the user identifiers are opaque, and
> that makes a bit more sense, since those values don't change, although
> any other part of the user's record could change as information evolves
> over time.  For example, if someone gets married and changes their name,
> they might find it annoying to have to log in with a username that
> references their maiden name all the time.

That would be a good design, yes, and I'll bear it in mind for future
use.
But for now I'm stuck with a system that has no way to change usernames,
as I discovered the hard way when my original employer was acquired. To
this day I have different logins for Unix and the rest of the corporate
infrastructure. (In case someone asks: the Unix name would be easy
enough to change, but it's used in a lot of places. One day, maybe.)
The account name is the closest thing to a unique id that's available.

> > Some points to note:
> > 
> > 1. Converting the dict to a string would make
> >   the avatarId conform to the interface, but
> >   it still wouldn't be pluggable, because other
> >   checkers wouldn't return the extra information.
> > 
> >   This strikes me as a general problem. If the
> >   checker returns more than an avatarId, whether
> >   directly or through some official-sanctioned channel,
> >   it will only be interchangeable with other
> >   checkers that also return the extra information.
> > 
> > 2. The application knows about LDAP, and uses it
> >   to find things like your manager and your email
> >   address. Some of this information is in the
> >   avatarId, but some of it isn't, so some LDAP
> >   calls will have to be made. This weakens the
> >   argument against duplicating the lookup.
> > 
> > The correct thing to do in this case would undoubtedly
> > be to accept that an LDAP call isn't very expensive,
> > and repeat it in the Realm. In other words, my use
> > case isn't very compelling. You have shamed me into
> > changing it :-)   In one way this is a good result,
> > though it doesn't help with the design.
> > 
> > Having made that change, I can use a password file
> > or an in-memory database for testing, and write
> > test scripts that don't need a real password. That's
> > well worth the /completely unnoticeable/ expense
> > of an extra LDAP call!
> 
> As other posters have already said, you can also have your realm and your
> checker share a reference to an object that caches credentials.  This
> would also let you cache other calls that are made later, too.
> 
> > BUT:
> > This only works because it doesn't use the user's
> > password for binding to LDAP. If it did, then either
> > the password or the LDAP session would have
> > to be made available to the Realm, and we're
> > back at square 1.
> 
> It seems like the "shared caching reference" would solve this problem
> as well?

Yes, I think that's the right answer. It's certainly the right design
in my case, and perhaps in the general case too.

Thanks for looking into this,

Peter.


From peter.westlake at pobox.com  Mon Jan 14 06:27:33 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 14 Jan 2013 11:27:33 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>
Message-ID: <1358162853.29762.140661177294609.14707AF7@webmail.messagingengine.com>

Interesting... those portals could be on different Realms too. It would
also allow more than one checker to be tried per interface, which would
allow (say) a credentials.IUsernamePassword to be tried against
different checkers.

Peter.

On Sun, Jan 13, 2013, at 14:08, Itamar Turner-Trauring wrote:

It's possible that in some of the cases discussed above, what you want
is a custom Portal. For example, if you want to try a sequence of
logins, and choose the first that succeeds:



class MultiPortal(object):

    def __init__(self, portals):

        self.portals = portals



    @inlineCallbacks

    def login(self, *args, **kwargs):

        for portal in self.portals:

            try:

                return portal.login(*args, **kwargs)

            except:

                continue

        # Ran out of portals, failed to login:

        raise Unauthorized()



Or, let's say you're writing a backend that is a combination checker
and realm, where separating that two doesn't make sense. E.g. a backend
for a POP3 server that is a proxy to another POP3 server. In this case
there's no point in writing separate checker and realm, just write a
new Portal:



class POP3ProxyPortal(object):

    def __init__(self, endpoint):

        self.endpoint = endpoint



    @defer.inlineCallbacks

    def login(self, credentials, mind, *interfaces):

        pop3client = yield self.endpoint.connect(POP3ClientFactory())

        yield pop3client.login(credentials.username,
credentials.password)

        defer.returnValue((IMailbox, MailboxProxy(pop3client),
pop3client.quit))


--
Itamar Turner-Trauring, Future Foundries LLC
[1]http://futurefoundries.com/ ? Twisted consulting, training and
support.

_______________________________________________

Twisted-Python mailing list

[2]Twisted-Python at twistedmatrix.com

[3]http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

References

1. http://futurefoundries.com/
2. mailto:Twisted-Python at twistedmatrix.com
3. http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130114/1adecdc3/attachment-0001.htm 

From itamar at futurefoundries.com  Mon Jan 14 06:55:48 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Mon, 14 Jan 2013 06:55:48 -0500
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1358162853.29762.140661177294609.14707AF7@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>
	<1358162853.29762.140661177294609.14707AF7@webmail.messagingengine.com>
Message-ID: <CAOp9P3pfN5FH-ex36yk=c-+kaCRZkZRTBZR7+KV_Wf+gMv9F6Q@mail.gmail.com>

On Mon, Jan 14, 2013 at 6:27 AM, Peter Westlake <peter.westlake at pobox.com>wrote:

>   Interesting... those portals could be on different Realms too. It would
> also allow more than one checker to be tried per interface, which would
> allow (say) a credentials.IUsernamePassword to be tried against different
> checkers.
>

In the first case, yes. In the second case there'd be no realm or checker
at all, just a (custom) portal. Which is possible since the code using the
portal doesn't know about the existence of checkers or realms.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130114/d9c4c88e/attachment.htm 

From _ at lvh.cc  Mon Jan 14 08:40:57 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Mon, 14 Jan 2013 14:40:57 +0100
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
In-Reply-To: <CAKef57NWDTDrJae-4LW8-npTXeJP-mVRdYXCJGk-e0__xH+zRA@mail.gmail.com>
References: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
	<20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>
	<79EF0037-6602-423B-A8EF-904231FF73E5@twistedmatrix.com>
	<CAKef57NWDTDrJae-4LW8-npTXeJP-mVRdYXCJGk-e0__xH+zRA@mail.gmail.com>
Message-ID: <CAE_Hg6auQ16SgW762syj3hi1_5oVLu4+TLRZO5Yf8=GXm0JzLg@mail.gmail.com>

The Foolscap website describes the principal features (as differences to
PB):

http://foolscap.lothar.com/trac/wiki/FoolscapFeatures


On Mon, Jan 14, 2013 at 9:53 AM, Maxim Lacrima <lacrima.maxim at gmail.com>wrote:

> Hi!
>
> Sorry for off-topic.
>
> What is the motivation behind creation of Foolscap (newpb)? What does it
> solve that can't be solved by old PB?
>
> Thank you
>
>
> On 13 January 2013 07:48, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On Jan 12, 2013, at 7:29 PM, exarkun at twistedmatrix.com wrote:
>>
>> On 03:15 am, abhishekbhat at hotmail.com wrote:
>>
>> Itamar
>> Is there some sort of upper bound on when PB would be available for
>> Python3.3? I am hoping to use it for a Python3 project.
>>
>>
>> As with any development, it will happen when people do it. :)  Twisted
>> development is almost entirely on a volunteer basis, and people mostly
>> work on what they personally want to work on.
>>
>> If you're wondering who's currently working on porting PB to Python 3, I
>> don't think anyone is.
>>
>>
>> Hi Abhishek,
>>
>> _You_ could always contribute a port of PB to Python 3.  PB is itself a
>> pretty self-contained module with not many dependencies outside of what's
>> already been ported.  Porting it to Python 3 should be relatively
>> straightforward, and the existing python 3 ports should provide a good
>> example of how to do it.
>>
>> -glyph
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> with regards,
> Maxim
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130114/d63c185e/attachment.htm 

From lacrima.maxim at gmail.com  Mon Jan 14 10:04:51 2013
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Mon, 14 Jan 2013 17:04:51 +0200
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
In-Reply-To: <CAE_Hg6auQ16SgW762syj3hi1_5oVLu4+TLRZO5Yf8=GXm0JzLg@mail.gmail.com>
References: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
	<20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>
	<79EF0037-6602-423B-A8EF-904231FF73E5@twistedmatrix.com>
	<CAKef57NWDTDrJae-4LW8-npTXeJP-mVRdYXCJGk-e0__xH+zRA@mail.gmail.com>
	<CAE_Hg6auQ16SgW762syj3hi1_5oVLu4+TLRZO5Yf8=GXm0JzLg@mail.gmail.com>
Message-ID: <CAKef57M7PWOT5XKc9hHKzfZxdHSXXGnmQtiC=3nwB1-=oG+6TA@mail.gmail.com>

On 14 January 2013 15:40, Laurens Van Houtven <_ at lvh.cc> wrote:

> The Foolscap website describes the principal features (as differences to
> PB):
>
> http://foolscap.lothar.com/trac/wiki/FoolscapFeatures
>
>
Thank you!

-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130114/90d7402c/attachment.htm 

From glyph at twistedmatrix.com  Mon Jan 14 17:58:13 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 14 Jan 2013 14:58:13 -0800
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
Message-ID: <443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>

On Jan 14, 2013, at 3:18 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

>> It seems like the "shared caching reference" would solve this problem
>> as well?
> 
> Yes, I think that's the right answer. It's certainly the right design
> in my case, and perhaps in the general case too.

I think that this is the right design for now, given the constraints of the current cred API; however, it's certainly possible we could think up an extension to the cred API that would make this case easier to deal with.  It also leaves open some not-quite-trivial questions like "how do you know when to expire the cache, which are usually easy to work out for a particular application but do not generalize easily.

I hope you don't give up on thinking about a nicer and more general API just because the immediate problem is solved :).  Glad I could offer useful advice, though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130114/0f563eac/attachment.htm 

From peter.westlake at pobox.com  Mon Jan 14 20:10:08 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 15 Jan 2013 01:10:08 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
	<443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
Message-ID: <1358212208.23140.140661177616037.0DDCE0AA@webmail.messagingengine.com>

On Mon, Jan 14, 2013, at 22:58, Glyph wrote:
> On Jan 14, 2013, at 3:18 AM, Peter Westlake <peter.westlake at pobox.com>
> wrote:
> 
> >> It seems like the "shared caching reference" would solve this problem
> >> as well?
> > 
> > Yes, I think that's the right answer. It's certainly the right design
> > in my case, and perhaps in the general case too.
> 
> I think that this is the right design for now, given the constraints of
> the current cred API; however, it's certainly possible we could think up
> an extension to the cred API that would make this case easier to deal
> with.  It also leaves open some not-quite-trivial questions like "how do
> you know when to expire the cache, which are usually easy to work out for
> a particular application but do not generalize easily.

That was the main reason I didn't actually implement a cache :-)
Plus I have a nice solution that works, and only costs one LDAP call.

> I hope you don't give up on thinking about a nicer and more general API
> just because the immediate problem is solved :).  Glad I could offer
> useful advice, though.

Thank you!

The main question left in my mind is about the degree of dependency
between the checker and the realm if extra information is passed,
by whatever method. If the realm expects the checker to pass it
(for instance) an LDAP session, then it's pretty much committed
to one particular checker. That means abandoning pluggability -
which admittedly isn't very sensible in that case - and once you
do that, simply passing back a complex structure as an avatarId
seems as good a method as any. It's simple, and it works now.
Likewise Itamar's special-purpose portal suggestion.

Peter.


From glyph at twistedmatrix.com  Tue Jan 15 00:30:39 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 14 Jan 2013 21:30:39 -0800
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1358212208.23140.140661177616037.0DDCE0AA@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
	<443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
	<1358212208.23140.140661177616037.0DDCE0AA@webmail.messagingengine.com>
Message-ID: <61C4A6AF-6E5B-4396-BAA9-5F58B03AB03C@twistedmatrix.com>


On Jan 14, 2013, at 5:10 PM, Peter Westlake <peter.westlake at pobox.com> wrote:

> The main question left in my mind is about the degree of dependency
> between the checker and the realm if extra information is passed,
> by whatever method. If the realm expects the checker to pass it
> (for instance) an LDAP session, then it's pretty much committed
> to one particular checker. That means abandoning pluggability -
> which admittedly isn't very sensible in that case - and once you
> do that, simply passing back a complex structure as an avatarId
> seems as good a method as any. It's simple, and it works now.
> Likewise Itamar's special-purpose portal suggestion.

The problem is not so much that pluggability is no longer possible if the realm requires something that not all checkers can provide, but that the failure mode is incoherent.  For example, checkers specify the credential interfaces that they can check specifically so that they can be slotted together with a protocol seamlessly; if a protocol offers credentials that can't be checked by any of the checkers on its portal, it will try not to offer those mechanisms to its peer.  Ultimately, if it tries to shove the wrong credentials in, it will still get a sensible authentication failure, not a random exception.

This is important because, for example, credentials checkers are pluggable via the --auth= option to certain twistd plugins; in the future, hopefully realms could be as well.

If the realm could declare what it needed from the avatar ID (or, probably, we'd want to call it something other than "ID" if it does more than identify the avatar) and it could sensibly report errors when those things were not provided, then we could have a mechanism that nicely integrated everything.

(Also, stuff like this is why we use zope.interface - it makes describing the way these bits fit together relatively straightforward.)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130114/7738811e/attachment.htm 

From hs at ox.cx  Tue Jan 15 02:39:21 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 15 Jan 2013 08:39:21 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
	<443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
Message-ID: <0EA0B303-791E-461B-93CC-6B4175242D47@ox.cx>


Am 14.01.2013 um 23:58 schrieb Glyph <glyph at twistedmatrix.com>:

>>> It seems like the "shared caching reference" would solve this problem
>>> as well?
>> 
>> Yes, I think that's the right answer. It's certainly the right design
>> in my case, and perhaps in the general case too.
> 
> I think that this is the right design for now, given the constraints of the current cred API; however, it's certainly possible we could think up an extension to the cred API that would make this case easier to deal with.  It also leaves open some not-quite-trivial questions like "how do you know when to expire the cache, which are usually easy to work out for a particular application but do not generalize easily.

I was under the impression that the IRealm.requestAvatar() is *always* called *once* after ICredentialsChecker.requestAvatarId() so I simply delete the data from the cache once my avatar is created (and it works fine).

Am I presuming something I shouldn?t?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130115/ae6f7f11/attachment-0001.htm 

From fabian.rothfuchs at googlemail.com  Tue Jan 15 10:26:19 2013
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Tue, 15 Jan 2013 16:26:19 +0100
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CAOp9P3pvdDUKi3dJsct0n4JOTpV9ECNH5WZxM12MD7muhkuXAw@mail.gmail.com>
Message-ID: <CD1B33AB.41B9A%fabian.rothfuchs@googmail.com>

Yes, I thought so, too. Indeed it happens that the reactor is started
automatically, but after the test succeeds, it's not being stopped (only
chance is to kill ?9 it).
I'm afraid I need to use the reactor, as I'd like to make automatic
end-to-end tests within my application, going from the workflow until a
dummy server, returning the data that was sent by the protocol back to the
test-callback.

From:  Itamar Turner-Trauring <itamar at futurefoundries.com>
Reply-To:  Twisted general discussion <twisted-python at twistedmatrix.com>
Date:  Sunday, January 13, 2013 12:31 AM
To:  Twisted general discussion <twisted-python at twistedmatrix.com>
Subject:  Re: [Twisted-Python] Stopping Reactor in UnitTest Callback



On Sat, Jan 12, 2013 at 9:00 AM, Fabian Rothfuchs
<fabian.rothfuchs at googlemail.com> wrote:
> I'm in the dilemma of using both - Django and Twisted.
> My goal is to have Django initialising the test (python manage.py test
> <appname>), instead of trial, as it will setup the whole test environment
> (I.e. Creates a db copy, allows per-model testing, follows certain
> conventions, etc).
> 
> As to that I'm trying to find a way how to start/stop the reactor from the
> test, as trial is not executed.
> Do you have an idea or an approach how this could be realised?

The functionality to start/stop the reactor when a test returns a Deferred
is part of twisted.trial.unittest.TestCase, which subclasses Python's
unittest.TestCase. As a result you don't need to use the trial command-line
tool, you can use any Python test runner that knows about Python's TestCase;
just make sure to subclass twisted.trial.unittest.TestCase, and your test
will support running the reactor for you when you return a Deferred.

Or, if possible, you can avoid using the reactor at all; some approaches (as
mentioned by Jean-Paul) are described in the trial documentation:
http://twistedmatrix.com/documents/current/core/howto/trial.html

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
_______________________________________________ Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130115/a325f34f/attachment.htm 

From itamar at futurefoundries.com  Tue Jan 15 12:22:37 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Tue, 15 Jan 2013 12:22:37 -0500
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CD1B33AB.41B9A%fabian.rothfuchs@googmail.com>
References: <CAOp9P3pvdDUKi3dJsct0n4JOTpV9ECNH5WZxM12MD7muhkuXAw@mail.gmail.com>
	<CD1B33AB.41B9A%fabian.rothfuchs@googmail.com>
Message-ID: <CAOp9P3rnSMkk20oW5fF91oWgMBaErYDhvH_WGd3HNjFHR5w6zA@mail.gmail.com>

On Tue, Jan 15, 2013 at 10:26 AM, Fabian Rothfuchs <
fabian.rothfuchs at googlemail.com> wrote:

> Yes, I thought so, too. Indeed it happens that the reactor is started
> automatically, but after the test succeeds, it's not being stopped (only
> chance is to kill ?9 it).
>

Perhaps the problem isn't with the test framework, but with your test. Can
you show us a minimal piece of code that reproduces the problem?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130115/dc20c345/attachment.htm 

From james.voip+twisted at gmail.com  Tue Jan 15 12:38:44 2013
From: james.voip+twisted at gmail.com (outcast)
Date: Tue, 15 Jan 2013 12:38:44 -0500
Subject: [Twisted-Python] Layer 2 and Twitsted
Message-ID: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>

Greetings,

Has anyone done any work around using twisted for layer 2 traffic?

-James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130115/a22bf981/attachment.htm 

From mithrandi at mithrandi.net  Tue Jan 15 12:47:02 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 15 Jan 2013 19:47:02 +0200
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
References: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
Message-ID: <CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>

On 15 Jan 2013 7:41 PM, "outcast" <james.voip+twisted at gmail.com> wrote:
>
> Greetings,
>
> Has anyone done any work around using twisted for layer 2 traffic?

Layer 2 traffic would be the domain of twisted.pair; I'm not aware of
anyone using this in a "real" project, though, and I'd wager it needs some
extra work before it'll be useful for most purposes.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130115/e3a6c243/attachment.htm 

From james.voip+twisted at gmail.com  Tue Jan 15 12:58:09 2013
From: james.voip+twisted at gmail.com (outcast)
Date: Tue, 15 Jan 2013 12:58:09 -0500
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>
References: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
	<CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>
Message-ID: <CALcVfM3uBjSRq0aTxEvJjMrAEMjA=Y0Mks1Mc7XMj-PZ3KtwEg@mail.gmail.com>

On Tue, Jan 15, 2013 at 12:47 PM, Tristan Seligmann <mithrandi at mithrandi.net
> wrote:

>
> On 15 Jan 2013 7:41 PM, "outcast" <james.voip+twisted at gmail.com> wrote:
> >
> > Greetings,
> >
> > Has anyone done any work around using twisted for layer 2 traffic?
>
> Layer 2 traffic would be the domain of twisted.pair; I'm not aware of
> anyone using this in a "real" project, though, and I'd wager it needs some
> extra work before it'll be useful for most purposes.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


I have been working on a kernel module to allow me to get the packets out
of kernel land and into user space ATM. Not sure how twisted.pair does
that. I will go and google but the ultimate goal is to have a complete
network stack in python. So any information would be greatly appreciated.
If I can get some good traction I might bring it to the next hack-a-thon
just learning ATM but I have purpose in mind.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130115/190f6ad2/attachment.htm 

From james.voip+twisted at gmail.com  Tue Jan 15 13:06:00 2013
From: james.voip+twisted at gmail.com (outcast)
Date: Tue, 15 Jan 2013 13:06:00 -0500
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <CALcVfM3uBjSRq0aTxEvJjMrAEMjA=Y0Mks1Mc7XMj-PZ3KtwEg@mail.gmail.com>
References: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
	<CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>
	<CALcVfM3uBjSRq0aTxEvJjMrAEMjA=Y0Mks1Mc7XMj-PZ3KtwEg@mail.gmail.com>
Message-ID: <CALcVfM0kxu9nU_VAVFDJTOiWdqHk-9YiW=yoEtYGYTuRTt0xJw@mail.gmail.com>

On Tue, Jan 15, 2013 at 12:58 PM, outcast <james.voip+twisted at gmail.com>wrote:

> On Tue, Jan 15, 2013 at 12:47 PM, Tristan Seligmann <
> mithrandi at mithrandi.net> wrote:
>
>>
>> On 15 Jan 2013 7:41 PM, "outcast" <james.voip+twisted at gmail.com> wrote:
>> >
>> > Greetings,
>> >
>> > Has anyone done any work around using twisted for layer 2 traffic?
>>
>> Layer 2 traffic would be the domain of twisted.pair; I'm not aware of
>> anyone using this in a "real" project, though, and I'd wager it needs some
>> extra work before it'll be useful for most purposes.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> I have been working on a kernel module to allow me to get the packets out
> of kernel land and into user space ATM. Not sure how twisted.pair does
> that. I will go and google but the ultimate goal is to have a complete
> network stack in python. So any information would be greatly appreciated.
> If I can get some good traction I might bring it to the next hack-a-thon
> just learning ATM but I have purpose in mind.
>
>
>
>
>
> Just looked at the documentation. it looks like it using libpcap and tun
interface. No real hooks into ethX type devices.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130115/1c696284/attachment.htm 

From glyph at twistedmatrix.com  Tue Jan 15 14:13:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 15 Jan 2013 11:13:31 -0800
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <0EA0B303-791E-461B-93CC-6B4175242D47@ox.cx>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
	<443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
	<0EA0B303-791E-461B-93CC-6B4175242D47@ox.cx>
Message-ID: <6BDDEE6D-61CD-4DFE-9472-A291271E03E4@twistedmatrix.com>


On Jan 14, 2013, at 11:39 PM, Hynek Schlawack <hs at ox.cx> wrote:

> 
> Am 14.01.2013 um 23:58 schrieb Glyph <glyph at twistedmatrix.com>:
> 
>>>> It seems like the "shared caching reference" would solve this problem
>>>> as well?
>>> 
>>> Yes, I think that's the right answer. It's certainly the right design
>>> in my case, and perhaps in the general case too.
>> 
>> I think that this is the right design for now, given the constraints of the current cred API; however, it's certainly possible we could think up an extension to the cred API that would make this case easier to deal with.  It also leaves open some not-quite-trivial questions like "how do you know when to expire the cache, which are usually easy to work out for a particular application but do not generalize easily.
> 
> I was under the impression that the IRealm.requestAvatar() is *always* called *once* after ICredentialsChecker.requestAvatarId() so I simply delete the data from the cache once my avatar is created (and it works fine).
> 
> Am I presuming something I shouldn?t?

No, you're correct.  But, if you're using directory information for other purposes, perhaps you would want to expire it later.  Hence, hard to generalize.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130115/17cfa171/attachment.htm 

From exarkun at twistedmatrix.com  Tue Jan 15 14:19:27 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 15 Jan 2013 19:19:27 -0000
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <CALcVfM0kxu9nU_VAVFDJTOiWdqHk-9YiW=yoEtYGYTuRTt0xJw@mail.gmail.com>
References: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
	<CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>
	<CALcVfM3uBjSRq0aTxEvJjMrAEMjA=Y0Mks1Mc7XMj-PZ3KtwEg@mail.gmail.com>
	<CALcVfM0kxu9nU_VAVFDJTOiWdqHk-9YiW=yoEtYGYTuRTt0xJw@mail.gmail.com>
Message-ID: <20130115191927.9595.738732781.divmod.xquotient.1@localhost6.localdomain6>

On 06:06 pm, james.voip+twisted at gmail.com wrote:
>On Tue, Jan 15, 2013 at 12:58 PM, outcast 
><james.voip+twisted at gmail.com>wrote:
>>
>>I have been working on a kernel module to allow me to get the packets 
>>out
>>of kernel land and into user space ATM. Not sure how twisted.pair does
>>that. I will go and google but the ultimate goal is to have a complete
>>network stack in python. So any information would be greatly 
>>appreciated.
>>If I can get some good traction I might bring it to the next 
>>hack-a-thon
>>just learning ATM but I have purpose in mind.
>>
>>
>>
>>
>>
>>Just looked at the documentation. it looks like it using libpcap and 
>>tun
>interface. No real hooks into ethX type devices.

How is that different from what you want?  Are you looking to get 
ethernet frames instead of IP datagrams?  You can do that with tun 
devices too (perhaps they're called "tap" devices when used in that 
context, though there's basically no difference in how they are set up 
and used).

Jean-Paul


From james.voip+twisted at gmail.com  Tue Jan 15 14:38:47 2013
From: james.voip+twisted at gmail.com (outcast)
Date: Tue, 15 Jan 2013 14:38:47 -0500
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <20130115191927.9595.738732781.divmod.xquotient.1@localhost6.localdomain6>
References: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
	<CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>
	<CALcVfM3uBjSRq0aTxEvJjMrAEMjA=Y0Mks1Mc7XMj-PZ3KtwEg@mail.gmail.com>
	<CALcVfM0kxu9nU_VAVFDJTOiWdqHk-9YiW=yoEtYGYTuRTt0xJw@mail.gmail.com>
	<20130115191927.9595.738732781.divmod.xquotient.1@localhost6.localdomain6>
Message-ID: <CALcVfM1QVXpyJ+aeRit_UjDC+uQQ2Kvmh2ZJU6bFb5Jb8oDLWA@mail.gmail.com>

On Tue, Jan 15, 2013 at 2:19 PM, <exarkun at twistedmatrix.com> wrote:

> On 06:06 pm, james.voip+twisted at gmail.com wrote:
> >On Tue, Jan 15, 2013 at 12:58 PM, outcast
> ><james.voip+twisted at gmail.com>wrote:
> >>
> >>I have been working on a kernel module to allow me to get the packets
> >>out
> >>of kernel land and into user space ATM. Not sure how twisted.pair does
> >>that. I will go and google but the ultimate goal is to have a complete
> >>network stack in python. So any information would be greatly
> >>appreciated.
> >>If I can get some good traction I might bring it to the next
> >>hack-a-thon
> >>just learning ATM but I have purpose in mind.
> >>
> >>
> >>
> >>
> >>
> >>Just looked at the documentation. it looks like it using libpcap and
> >>tun
> >interface. No real hooks into ethX type devices.
>
> How is that different from what you want?  Are you looking to get
> ethernet frames instead of IP datagrams?  You can do that with tun
> devices too (perhaps they're called "tap" devices when used in that
> context, though there's basically no difference in how they are set up
> and used).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


Don't want to use tap type of devices. Want to be able to handle packets
natively from the interface with minimal amount of overhead. Basically want
my own rx_handler to python call back. Yes I want the raw ethernet frames.
Looking at an embedded solution so its a case of less is more.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130115/5d20ada7/attachment.htm 

From adi at roiban.ro  Wed Jan 16 10:47:17 2013
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 16 Jan 2013 17:47:17 +0200
Subject: [Twisted-Python] TLSMemoryBIOProtocol _shutdownTLS what to do when
	not successfull
Message-ID: <CAFycZ9fa3Wj5mc+OucCngXCiJju0z6mkUUdNihuiVS7dNGdTXg@mail.gmail.com>

Hi,

Here is this code in t.p.t.TLSMemoryBIOProtocol

    def _shutdownTLS(self):
        """
        Initiate, or reply to, the shutdown handshake of the TLS layer.
        """
        self._flushSendBIO()
        shutdownSuccess = self._tlsConnection.shutdown()
        self._flushSendBIO()
        if shutdownSuccess:
            # Both sides have shutdown, so we can start closing lower-level
            # transport. This will also happen if we haven't started
            # negotiation at all yet, in which case shutdown succeeds
            # immediately.
            self.transport.loseConnection()



From exarkun at twistedmatrix.com  Wed Jan 16 12:03:45 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 16 Jan 2013 17:03:45 -0000
Subject: [Twisted-Python] TLSMemoryBIOProtocol _shutdownTLS what to do
 when not successfull
In-Reply-To: <CAFycZ9fa3Wj5mc+OucCngXCiJju0z6mkUUdNihuiVS7dNGdTXg@mail.gmail.com>
References: <CAFycZ9fa3Wj5mc+OucCngXCiJju0z6mkUUdNihuiVS7dNGdTXg@mail.gmail.com>
Message-ID: <20130116170345.3644.2102619719.divmod.xquotient.12@localhost6.localdomain6>

On 03:47 pm, adi at roiban.ro wrote:
>Hi,
>
>Here is this code in t.p.t.TLSMemoryBIOProtocol
>
>    def _shutdownTLS(self):
>        """
>        Initiate, or reply to, the shutdown handshake of the TLS layer.
>        """
>        self._flushSendBIO()
>        shutdownSuccess = self._tlsConnection.shutdown()
>        self._flushSendBIO()

This isn't actually how this method is implemented in trunk at HEAD.  I 
didn't search through its entire revision history to see if it was ever 
implemented this way, but I don't think it was. :)

Can you produce this behavior with the latest Twisted release, 
unmodified?
>        if shutdownSuccess:
>            # Both sides have shutdown, so we can start closing lower- 
>level
>            # transport. This will also happen if we haven't started
>            # negotiation at all yet, in which case shutdown succeeds
>            # immediately.
>            self.transport.loseConnection()
>> From my tests using Curl as a client, self._tlsConnection.shutdown()
>always returns False.

Can you share a minimal server which demonstrates this?  Also, an exact 
curl command line would be handy.
>-----
>
>I need to call
>
>self._tlsConnection.set_shutdown(SENT_SHUTDOWN | RECEIVED_SHUTDOWN)

Just so everyone's clear, this isn't really a solution.  It's roughly 
the same as not calling shutdown at all, just calling loseConnection.
>
>How should the connection be handled when
>self._tlsConnection.shutdown() returns False?

The connection should wait for the peer to call shutdown as well and 
then close the connection.  This is what the `ZeroReturnError` handling 
in `dataReceived` is for.
>> From my tests, it looks like when shutdownSuccess is False, the
>self.transport.loseConnection() is never closed.

That's right.  But shutdownSuccess is sometimes expected to be true.

Jean-Paul


From dbs at nimbula.com  Wed Jan 16 13:05:33 2013
From: dbs at nimbula.com (David Serafini)
Date: Wed, 16 Jan 2013 10:05:33 -0800
Subject: [Twisted-Python] Layer 2 and Twitsted
Message-ID: <CAJy_jQQi9r_R2wAj+TCeJhaoFpnaX3t2uuXcuFjeveJ-2V-gVw@mail.gmail.com>

> Date: Tue, 15 Jan 2013 14:38:47 -0500
> From: outcast <james.voip+twisted at gmail.com>
>
> Don't want to use tap type of devices. Want to be able to handle packets
> natively from the interface with minimal amount of overhead. Basically want
> my own rx_handler to python call back. Yes I want the raw ethernet frames.
> Looking at an embedded solution so its a case of less is more.

What about a kernel bypass solution like Solarflare?
You'd have to write a Python-C interface and use a special NIC, but it
would give you raw access to the packets straight off the NIC.

<dbs>


From james.voip+twisted at gmail.com  Wed Jan 16 13:18:31 2013
From: james.voip+twisted at gmail.com (outcast)
Date: Wed, 16 Jan 2013 13:18:31 -0500
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <CAJy_jQQi9r_R2wAj+TCeJhaoFpnaX3t2uuXcuFjeveJ-2V-gVw@mail.gmail.com>
References: <CAJy_jQQi9r_R2wAj+TCeJhaoFpnaX3t2uuXcuFjeveJ-2V-gVw@mail.gmail.com>
Message-ID: <CALcVfM1-Eb3NkefFzpxQ_niUT=yB2QSa0NDBaU5PqvoYA1dbKA@mail.gmail.com>

Understood.....trying to see if I can get something that works with all
interface types right  I am having a little trouble with getting my
rx_handler to trigger even though it has been registered.

-James
On Wed, Jan 16, 2013 at 1:05 PM, David Serafini <dbs at nimbula.com> wrote:

> Solarflare
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130116/92606cfc/attachment.htm 

From angelo.dellaera at gmail.com  Thu Jan 17 11:22:26 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Thu, 17 Jan 2013 17:22:26 +0100
Subject: [Twisted-Python] Twisted Names strings
Message-ID: <20130117172226.643a8b42@saiph.darkstar.net>


After updating Twisted to 12.3.0 I started getting errors like the following one

2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site-packages/twisted/names/common.py", line 93, in lookupAddress
2013-01-17 14:38:23+0100 [-]     return self._lookup(name, dns.IN, dns.A, timeout)
2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site-packages/twisted/names/client.py", line 384, in _lookup
2013-01-17 14:38:23+0100 [-]     d = self.queryUDP([dns.Query(name, type, cls)], timeout)
2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site-packages/twisted/names/dns.py", line 484, in __init__
2013-01-17 14:38:23+0100 [-]     self.name = Name(name)
2013-01-17 14:38:23+0100 [-]   File"/usr/lib64/python2.7/site-packages/twisted/names/dns.py", line 357, in __init__ 
2013-01-17 14:38:23+0100 [-]     raise TypeError("%r is not a byte string" % (name,)) 
2013-01-17 14:38:23+0100 [-] TypeError: u'example.com' is not a byte string

Taking a look at documentation I found this document

http://twistedmatrix.com/documents/current/core/howto/python3.html

which states

"twisted.names.dns deals with strings with a wide range of meanings,
often several for each DNS record type. Most of these strings have
remained as byte strings, which will probably require application
updates (for the reason given in the FilePath section above). Some
strings have changed to text strings, though. Any string representing a
human readable address (for example, Record_A's address parameter) is
now a text string. Additionally, time-to-live (ttl) values given as
strings must now be given as text strings."

which seems to describe the problem I'm experiencing. 

But let me say that I'm currently using Python 2.7.3 and I was surprised in realizing 
that a simple update from a minor 12.x release was enough to disrupt my application. 

Don't you think that a kind of compatibility mechanism (maybe with a warning message) 
would have been a more gentle way of doing this transition especially for those who
are still using Python 2?

Thanks and regards,
  
-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org


From exarkun at twistedmatrix.com  Thu Jan 17 12:19:01 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 17 Jan 2013 17:19:01 -0000
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130117172226.643a8b42@saiph.darkstar.net>
References: <20130117172226.643a8b42@saiph.darkstar.net>
Message-ID: <20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>

On 04:22 pm, angelo.dellaera at gmail.com wrote:
>
>After updating Twisted to 12.3.0 I started getting errors like the 
>following one
>
>2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site- 
>packages/twisted/names/common.py", line 93, in lookupAddress
>2013-01-17 14:38:23+0100 [-]     return self._lookup(name, dns.IN, 
>dns.A, timeout)
>2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site- 
>packages/twisted/names/client.py", line 384, in _lookup
>2013-01-17 14:38:23+0100 [-]     d = self.queryUDP([dns.Query(name, 
>type, cls)], timeout)
>2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site- 
>packages/twisted/names/dns.py", line 484, in __init__
>2013-01-17 14:38:23+0100 [-]     self.name = Name(name)
>2013-01-17 14:38:23+0100 [-]   File"/usr/lib64/python2.7/site- 
>packages/twisted/names/dns.py", line 357, in __init__
>2013-01-17 14:38:23+0100 [-]     raise TypeError("%r is not a byte 
>string" % (name,))
>2013-01-17 14:38:23+0100 [-] TypeError: u'example.com' is not a byte 
>string
>
>Taking a look at documentation I found this document
>
>http://twistedmatrix.com/documents/current/core/howto/python3.html
>
>which states
>
>"twisted.names.dns deals with strings with a wide range of meanings,
>often several for each DNS record type. Most of these strings have
>remained as byte strings, which will probably require application
>updates (for the reason given in the FilePath section above). Some
>strings have changed to text strings, though. Any string representing a
>human readable address (for example, Record_A's address parameter) is
>now a text string. Additionally, time-to-live (ttl) values given as
>strings must now be given as text strings."
>
>which seems to describe the problem I'm experiencing.
>
>But let me say that I'm currently using Python 2.7.3 and I was 
>surprised in realizing
>that a simple update from a minor 12.x release was enough to disrupt my 
>application.
>
>Don't you think that a kind of compatibility mechanism (maybe with a 
>warning message)
>would have been a more gentle way of doing this transition especially 
>for those who
>are still using Python 2?

Absolutely.  This issue has been reported in connection to Wokkel 
already:

  http://twistedmatrix.com/trac/ticket/6245

There is currently a fix proposed and waiting review, and there has been 
some discussion about doing a maintenance release of 12.3 to distribute 
the fix.  Thank you for reporting your experience with 12.3.0 (although 
testing during the /pre/-release period would have saved everyone some 
trouble :).

It would be great if you could try out the proposed fix and let us know 
if it also addresses the problem with your application.

Since some concern has been voiced over the effort necessary to do a 
12.3.1 release (as opposed to just including this fix in 13.0), I'd also 
be interested to know whether one or the other of those would be more 
helpful for you - does anything prevent you (or your users) from 
upgrading to 13.0 once it is released?

Thanks,
Jean-Paul


From _ at lvh.cc  Thu Jan 17 12:24:21 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 17 Jan 2013 18:24:21 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130117172226.643a8b42@saiph.darkstar.net>
References: <20130117172226.643a8b42@saiph.darkstar.net>
Message-ID: <CAE_Hg6YA3jMVgC7HvwGrt_Km9Nggb7LzLBJ0kR75bQh6Hbuu=g@mail.gmail.com>

FYI, this change also broke wokkel, too, so at least you're not alone, it
seems...

https://twistedmatrix.com/trac/ticket/6245


On Thu, Jan 17, 2013 at 5:22 PM, Angelo Dell'Aera <angelo.dellaera at gmail.com
> wrote:

>
> After updating Twisted to 12.3.0 I started getting errors like the
> following one
>
> 2013-01-17 14:38:23+0100 [-]   File
> "/usr/lib64/python2.7/site-packages/twisted/names/common.py", line 93, in
> lookupAddress
> 2013-01-17 14:38:23+0100 [-]     return self._lookup(name, dns.IN, dns.A,
> timeout)
> 2013-01-17 14:38:23+0100 [-]   File
> "/usr/lib64/python2.7/site-packages/twisted/names/client.py", line 384, in
> _lookup
> 2013-01-17 14:38:23+0100 [-]     d = self.queryUDP([dns.Query(name, type,
> cls)], timeout)
> 2013-01-17 14:38:23+0100 [-]   File
> "/usr/lib64/python2.7/site-packages/twisted/names/dns.py", line 484, in
> __init__
> 2013-01-17 14:38:23+0100 [-]     self.name = Name(name)
> 2013-01-17 14:38:23+0100 [-]
> File"/usr/lib64/python2.7/site-packages/twisted/names/dns.py", line 357, in
> __init__
> 2013-01-17 14:38:23+0100 [-]     raise TypeError("%r is not a byte string"
> % (name,))
> 2013-01-17 14:38:23+0100 [-] TypeError: u'example.com' is not a byte
> string
>
> Taking a look at documentation I found this document
>
> http://twistedmatrix.com/documents/current/core/howto/python3.html
>
> which states
>
> "twisted.names.dns deals with strings with a wide range of meanings,
> often several for each DNS record type. Most of these strings have
> remained as byte strings, which will probably require application
> updates (for the reason given in the FilePath section above). Some
> strings have changed to text strings, though. Any string representing a
> human readable address (for example, Record_A's address parameter) is
> now a text string. Additionally, time-to-live (ttl) values given as
> strings must now be given as text strings."
>
> which seems to describe the problem I'm experiencing.
>
> But let me say that I'm currently using Python 2.7.3 and I was surprised
> in realizing
> that a simple update from a minor 12.x release was enough to disrupt my
> application.
>
> Don't you think that a kind of compatibility mechanism (maybe with a
> warning message)
> would have been a more gentle way of doing this transition especially for
> those who
> are still using Python 2?
>
> Thanks and regards,
>
> --
>
> Angelo Dell'Aera 'buffer'
> Antifork Research, Inc.         http://buffer.antifork.org
> Sysenter Honeynet Project       http://www.sysenter-honeynet.org
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130117/be9f9e57/attachment.htm 

From glyph at twistedmatrix.com  Thu Jan 17 15:15:03 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 17 Jan 2013 12:15:03 -0800
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>


On Jan 17, 2013, at 9:19 AM, exarkun at twistedmatrix.com wrote:

> (although testing during the /pre/-release period would have saved everyone some 
> trouble :).

This bears repeating!  Not to harass you, Angelo - dealing with a regression in Twisted that breaks your app is punishment enough :) - but to remind everyone that this is exactly why we have the pre-release testing period.

When you get the 13.0 release announcement, please remember that you only have a week!  All you need to do is to run your respective test suite and send a short email saying if you found any issues.  (Filing a ticket would be nice, but if that's too much work, don't worry about it: for pre-release regressions, we'll file tickets and work on patches for you.)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130117/2d0c9b43/attachment.htm 

From dreid at dreid.org  Thu Jan 17 15:57:13 2013
From: dreid at dreid.org (David Reid)
Date: Thu, 17 Jan 2013 12:57:13 -0800
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
Message-ID: <CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>

Honestly, if you have comprehensive automated testing and plan to upgrade
Twisted regularly or to try and support the latest release it is worth the
effort to setup testing against Twisted trunk.

https://github.com/dreid/treq/blob/master/.travis.yml shows how I do this
with travis-ci.

-David


On Thu, Jan 17, 2013 at 12:15 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jan 17, 2013, at 9:19 AM, exarkun at twistedmatrix.com wrote:
>
> (although testing during the /pre/-release period would have saved
> everyone some
> trouble :).
>
>
> This bears repeating!  Not to harass you, Angelo - dealing with a
> regression in Twisted that breaks your app is punishment enough :) - but to
> remind everyone that this is exactly why we have the pre-release testing
> period.
>
> When you get the 13.0 release announcement, please remember that you only
> have a week!  All you need to do is to run your respective test suite and
> send a short email saying if you found any issues.  (Filing a ticket would
> be nice, but if that's too much work, don't worry about it: for pre-release
> regressions, we'll file tickets and work on patches for you.)
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130117/b23a0f37/attachment.htm 

From glyph at twistedmatrix.com  Thu Jan 17 16:07:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 17 Jan 2013 13:07:27 -0800
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
	<CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>
Message-ID: <683C73E2-8857-4C89-ACEB-F1CEFD9EE7F6@twistedmatrix.com>


On Jan 17, 2013, at 12:57 PM, David Reid <dreid at dreid.org> wrote:

> Honestly, if you have comprehensive automated testing and plan to upgrade Twisted regularly or to try and support the latest release it is worth the effort to setup testing against Twisted trunk.
> 
> https://github.com/dreid/treq/blob/master/.travis.yml shows how I do this with travis-ci.

Thanks for the pointer, David.  I will disseminate this more widely.

It's also important for the Twisted team to find out about failures though, so it's still important to _look_ at your travis-ci build results in the pre-release week to make sure that everything is still working, and let us know if it isn't.

It would be great if we could automate that, too; would it be possible to set up a page that just has at-a-glance build results for 3rd-party projects against twisted trunk?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130117/69663fc2/attachment-0001.htm 

From ralphm at ik.nu  Thu Jan 17 17:09:01 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Thu, 17 Jan 2013 23:09:01 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
	<CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>
Message-ID: <c6b7b77b-136d-46ff-8be5-5ac259884551@email.android.com>

David Reid <dreid at dreid.org> wrote:

>Honestly, if you have comprehensive automated testing and plan to
>upgrade
>Twisted regularly or to try and support the latest release it is worth
>the
>effort to setup testing against Twisted trunk.
>
>https://github.com/dreid/treq/blob/master/.travis.yml shows how I do
>this
>with travis-ci.

In this particular case, the problem was an integration issue. All Wokkel's test cases passed (over at travis-ci), but the code setting up clients was calling SRVConnect with a value that is now being rejected. I.e. it used to happily, but erroneously, take unicode strings with ASCII compatible code points. Apart from actually using a client, no unit tests would have caught this, I believe.

That said, I fully take blame for not making time to test Wokkel against the pre-release.


-- 
ralphm
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130117/379f2875/attachment.htm 

From ralphm at ik.nu  Thu Jan 17 18:09:02 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Fri, 18 Jan 2013 00:09:02 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <c6b7b77b-136d-46ff-8be5-5ac259884551@email.android.com>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
	<CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>
	<c6b7b77b-136d-46ff-8be5-5ac259884551@email.android.com>
Message-ID: <50F8848E.4090106@ik.nu>

On 2013-01-17 23:09, Ralph Meijer wrote:
> David Reid <dreid at dreid.org> wrote:
>
>     Honestly, if you have comprehensive automated testing and plan to
>     upgrade Twisted regularly or to try and support the latest release
>     it is worth the effort to setup testing against Twisted trunk.
>
>     https://github.com/dreid/treq/blob/master/.travis.yml shows how I do
>     this with travis-ci.

(interestingly, K-9 only sent my reply in the plain-text version:)

In this particular case, the problem was an integration issue. All 
Wokkel's test cases passed (over at travis-ci), but the code setting up 
clients was calling SRVConnect with a value that is now being rejected. 
I.e. it used to happily, but erroneously, take unicode strings with 
ASCII compatible code points. Apart from actually using a client, no 
unit tests would have caught this, I believe.

That said, I fully take blame for not making time to test Wokkel against 
the pre-release.

-- 
ralphm


From angelo.dellaera at gmail.com  Fri Jan 18 08:58:45 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Fri, 18 Jan 2013 14:58:45 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <20130118145845.1793625f@saiph.darkstar.net>

On Thu, 17 Jan 2013 17:19:01 -0000
exarkun at twistedmatrix.com wrote:

> Absolutely.  This issue has been reported in connection to Wokkel 
> already:
> 
>   http://twistedmatrix.com/trac/ticket/6245
> 
> There is currently a fix proposed and waiting review, and there has
> been some discussion about doing a maintenance release of 12.3 to
> distribute the fix.  Thank you for reporting your experience with
> 12.3.0 (although testing during the /pre/-release period would have
> saved everyone some trouble :).
> 
> It would be great if you could try out the proposed fix and let us
> know if it also addresses the problem with your application.

Sure. I'll test it during this weekend and let you know if it solves
the problem.


> Since some concern has been voiced over the effort necessary to do a 
> 12.3.1 release (as opposed to just including this fix in 13.0), I'd
> also be interested to know whether one or the other of those would be
> more helpful for you - does anything prevent you (or your users) from 
> upgrading to 13.0 once it is released?

There's nothing which prevents me from upgrading from 12.x to 13.0 so 
I think that after testing the proposed patch properly fixes the issue I
can just wait for the 13.0 release.

Thanks,

-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org


From angelo.dellaera at gmail.com  Fri Jan 18 09:23:30 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Fri, 18 Jan 2013 15:23:30 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
Message-ID: <20130118152330.439be3c2@saiph.darkstar.net>

On Thu, 17 Jan 2013 12:15:03 -0800
Glyph <glyph at twistedmatrix.com> wrote:

> 
> On Jan 17, 2013, at 9:19 AM, exarkun at twistedmatrix.com wrote:
> 
> > (although testing during the /pre/-release period would have saved
> > everyone some trouble :).
> 
> This bears repeating!  Not to harass you, Angelo - dealing with a
> regression in Twisted that breaks your app is punishment enough :) -
> but to remind everyone that this is exactly why we have the
> pre-release testing period.
> 
> When you get the 13.0 release announcement, please remember that you
> only have a week!  All you need to do is to run your respective test
> suite and send a short email saying if you found any issues.  (Filing
> a ticket would be nice, but if that's too much work, don't worry
> about it: for pre-release regressions, we'll file tickets and work on
> patches for you.)


Hi Glyph,
you're absolutely right and I'll try to do the best I can to contribute to such 
effort from now on. 

But let me say that I usually take a look at NEWS.txt before upgrading in 
order to understand if the changes can impact my code and act properly in 
such case. I think this case is quite different because I see no attempts to 
properly handle code which worked perfectly fine in 12.2.0 (if the string is 
not a bytestring raise TypeError and game over) and the new bytestring
requirement is not mentioned at all in NEWS.txt. 

Just thinking that maybe being a little more backward-compatible and/or 
verbose in ChangeLog when introducing potentially disrupting changes
could greatly help in identifying issues like this one.

Thanks,

-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org


From glyph at twistedmatrix.com  Sat Jan 19 02:12:20 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 18 Jan 2013 23:12:20 -0800
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130118152330.439be3c2@saiph.darkstar.net>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
	<20130118152330.439be3c2@saiph.darkstar.net>
Message-ID: <8BFE70CC-63D8-417F-84A4-147C06EB9E31@twistedmatrix.com>


On Jan 18, 2013, at 6:23 AM, Angelo Dell'Aera <angelo.dellaera at gmail.com> wrote:

> On Thu, 17 Jan 2013 12:15:03 -0800
> Glyph <glyph at twistedmatrix.com> wrote:
> 
>> 
>> On Jan 17, 2013, at 9:19 AM, exarkun at twistedmatrix.com wrote:
>> 
>>> (although testing during the /pre/-release period would have saved
>>> everyone some trouble :).
>> 
>> This bears repeating!  Not to harass you, Angelo - dealing with a
>> regression in Twisted that breaks your app is punishment enough :) -
>> but to remind everyone that this is exactly why we have the
>> pre-release testing period.
>> 
>> When you get the 13.0 release announcement, please remember that you
>> only have a week!  All you need to do is to run your respective test
>> suite and send a short email saying if you found any issues.  (Filing
>> a ticket would be nice, but if that's too much work, don't worry
>> about it: for pre-release regressions, we'll file tickets and work on
>> patches for you.)
> 
> 
> Hi Glyph,
> you're absolutely right and I'll try to do the best I can to contribute to such 
> effort from now on. 

Thanks, I appreciate that :).

> But let me say that I usually take a look at NEWS.txt before upgrading in 
> order to understand if the changes can impact my code and act properly in 
> such case. I think this case is quite different because I see no attempts to 
> properly handle code which worked perfectly fine in 12.2.0 (if the string is 
> not a bytestring raise TypeError and game over) and the new bytestring
> requirement is not mentioned at all in NEWS.txt. 
> 
> Just thinking that maybe being a little more backward-compatible and/or 
> verbose in ChangeLog when introducing potentially disrupting changes
> could greatly help in identifying issues like this one.

The problem is not that we knew it was going to break things and we didn't care - it's that we didn't notice that the backwards compatibility problem had crept in, and we mistakenly believed that existing users would be using byte strings, or that existing users using unicode strings would already have been broken.  Or we simply forgot.

The reason we need you to test your programs is so that we notice that there is a mistake that needs fixing.  If we already knew about the compatibility problem, we would not have written release notes about it, we would have fixed it before the release :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130118/65e593dd/attachment.htm 

From exarkun at twistedmatrix.com  Sun Jan 20 00:05:24 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Jan 2013 05:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1358658324.98.416160386@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130120/29e1f643/attachment.htm 

From adi at roiban.ro  Sun Jan 20 09:35:45 2013
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 20 Jan 2013 16:35:45 +0200
Subject: [Twisted-Python] Testing Twisted code without trial
Message-ID: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>

Hi,

I start my pet project using Python Nose as test runner. At the start,
Twisted not used at all.
Later I discovered Twisted and start using it... but testing Twisted
requires trial.

I resist migrating to Trial and ended up with a custom code for
running Twisted tests together with Nose:

https://github.com/chevah/chevah-rhinoplasty


I though I can share this code on the list, in case there is someone
else wrestling with deferres testing outside of Trial.

Any feedback or comments is much appreciated.

Cheers,
-- 
Adi Roiban


From itamar at itamarst.org  Sun Jan 20 09:47:04 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 20 Jan 2013 09:47:04 -0500
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
Message-ID: <50FC0368.7040100@itamarst.org>

On 01/20/2013 09:35 AM, Adi Roiban wrote:
> Hi,
>
> I start my pet project using Python Nose as test runner. At the start,
> Twisted not used at all.
> Later I discovered Twisted and start using it... but testing Twisted
> requires trial.
>
Testing Twisted doesn't actually require trial; if you are using 
Twisted-specific testing features, it requires subclassing 
twisted.trial.unittest.TestCase. You can however still run the resulting 
tests with nose, I would guess.


From exarkun at twistedmatrix.com  Mon Jan 21 19:21:32 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 22 Jan 2013 00:21:32 -0000
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
Message-ID: <20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>

On 20 Jan, 02:35 pm, adi at roiban.ro wrote:
>Hi,
>
>I start my pet project using Python Nose as test runner. At the start,
>Twisted not used at all.
>Later I discovered Twisted and start using it... but testing Twisted
>requires trial.
>
>I resist migrating to Trial and ended up with a custom code for
>running Twisted tests together with Nose:
>
>https://github.com/chevah/chevah-rhinoplasty
>
>
>I though I can share this code on the list, in case there is someone
>else wrestling with deferres testing outside of Trial.
>
>Any feedback or comments is much appreciated.

The implementation is somewhat saddening in its use of Twisted internals 
(which makes it fragile and subject to easy breakage by new Twisted 
releases) and limited platform support (it won't work on Windows, 
afaik).

You may also find problems with direct use of `reactor.iterate`, since 
use of this API is highly discouraged due to re-entrancy issues and its 
implementation is not all that well tested by Twisted's own test suite.

If it works for you, great, but I would hesitate to recommend it to new 
projects as a testing tool.  As Itamar suggests, nose should be able to 
run xUnit-style tests.

Jean-Paul


From adi at roiban.ro  Tue Jan 22 04:29:15 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 22 Jan 2013 11:29:15 +0200
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
Message-ID: <CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>

On 22 January 2013 02:21,  <exarkun at twistedmatrix.com> wrote:
> On 20 Jan, 02:35 pm, adi at roiban.ro wrote:
>>Hi,
>>
>>I start my pet project using Python Nose as test runner. At the start,
>>Twisted not used at all.
>>Later I discovered Twisted and start using it... but testing Twisted
>>requires trial.
>>
>>I resist migrating to Trial and ended up with a custom code for
>>running Twisted tests together with Nose:
>>
>>https://github.com/chevah/chevah-rhinoplasty
>>
>>
>>I though I can share this code on the list, in case there is someone
>>else wrestling with deferres testing outside of Trial.
>>
>>Any feedback or comments is much appreciated.
>
> The implementation is somewhat saddening in its use of Twisted internals
> (which makes it fragile and subject to easy breakage by new Twisted
> releases) and limited platform support (it won't work on Windows,
> afaik).
>
> You may also find problems with direct use of `reactor.iterate`, since
> use of this API is highly discouraged due to re-entrancy issues and its
> implementation is not all that well tested by Twisted's own test suite.
>
> If it works for you, great, but I would hesitate to recommend it to new
> projects as a testing tool.  As Itamar suggests, nose should be able to
> run xUnit-style tests.
>
> Jean-Paul

Thanks for your feedback.


This code also works on Windows and on other Unix systems (OSX, Solaris)

----

The new methods successResultOf and failureResultOf looks good, but I
think they only work with deferred that already have a result.

----

I am aware that the whole thing is fragile... and I am aware of the
consequences of using internal non-public methods.

I checked the code from twisted.trial.unittest.TestCase but I could
not spot how it waits for deferreds execution.

What part of twisted.trial.unittest.TestCase executes and waits for
the deferred?

Can I use that code to implement something similar to successResultOf
and failureResultOf but which also executes the deferred?

Thanks!
-- 
Adi Roiban


From diego at woitasen.com.ar  Tue Jan 22 08:06:44 2013
From: diego at woitasen.com.ar (Diego Woitasen)
Date: Tue, 22 Jan 2013 10:06:44 -0300
Subject: [Twisted-Python] Twisted client memory leak
Message-ID: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>

I have an Twisted client app that makes hundreds of connections per
minute. I discover that I have a memory leak un my app and I'm almost
sure that is related to the ClientFactory() derived class that is
never deleted.

I reproduce the problem with a modification of Echo client example
from Twisted documentation:

    from twisted.internet.protocol import Protocol, ClientFactory
    from twisted.internet import reactor
    from twisted.internet.task import LoopingCall

    from sys import stdout

    class Echo(Protocol):
        def connectionMade(self):
            print 'MADE'
            self.transport.write('XXXX')

        def dataReceived(self, data):
            print 'RECV', data
            self.transport.loseConnection()

        def __del__(self):
            print 'DEL PROTOCOL'

    class EchoClientFactory(ClientFactory):
        def startedConnecting(self, connector):
            print 'Started to connect.'

        def buildProtocol(self, addr):
            print 'Connected.'
            return Echo()

        def clientConnectionLost(self, connector, reason):
            print 'Lost connection.  Reason:', reason

        def clientConnectionFailed(self, connector, reason):
            print 'Connection failed. Reason:', reason

        def __del__(self):
            print 'DEL FACTORY'

    def connector():
        print 'CONNECTOR'
        factory = EchoClientFactory()
        reactor.connectTCP('localhost', 7, factory)

    #reactor.callLater(2, connector)
    register_loop = LoopingCall(connector)
    register_loop.start(1)

    reactor.run()

With this code I discover that the instances of EchoClientFactory()
are only deleted when the program shutdowns. They are not deleted when
the connections finish. I haven't found in the documentation if I need
to do some to get factory instances deleted.

--
Diego Woitasen


From diego at woitasen.com.ar  Tue Jan 22 08:18:13 2013
From: diego at woitasen.com.ar (Diego Woitasen)
Date: Tue, 22 Jan 2013 10:18:13 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
Message-ID: <CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>

Here is the server code if you want to have a test:

from twisted.internet.protocol import Protocol
from twisted.internet.protocol import Factory
from twisted.internet import reactor


class Echo(Protocol):

    def __init__(self, factory):
        self.factory = factory

    def connectionMade(self):
        print 'MADE'

    def connectionLost(self, reason):
        print 'LOST'

    def dataReceived(self, data):
        self.transport.write(data)

class EchoFactory(Factory):
    def buildProtocol(self, addr):
        return Echo(self)

reactor.listenTCP(8007, EchoFactory())

reactor.run()

Thanks!

On Tue, Jan 22, 2013 at 10:06 AM, Diego Woitasen <diego at woitasen.com.ar> wrote:
> I have an Twisted client app that makes hundreds of connections per
> minute. I discover that I have a memory leak un my app and I'm almost
> sure that is related to the ClientFactory() derived class that is
> never deleted.
>
> I reproduce the problem with a modification of Echo client example
> from Twisted documentation:
>
>     from twisted.internet.protocol import Protocol, ClientFactory
>     from twisted.internet import reactor
>     from twisted.internet.task import LoopingCall
>
>     from sys import stdout
>
>     class Echo(Protocol):
>         def connectionMade(self):
>             print 'MADE'
>             self.transport.write('XXXX')
>
>         def dataReceived(self, data):
>             print 'RECV', data
>             self.transport.loseConnection()
>
>         def __del__(self):
>             print 'DEL PROTOCOL'
>
>     class EchoClientFactory(ClientFactory):
>         def startedConnecting(self, connector):
>             print 'Started to connect.'
>
>         def buildProtocol(self, addr):
>             print 'Connected.'
>             return Echo()
>
>         def clientConnectionLost(self, connector, reason):
>             print 'Lost connection.  Reason:', reason
>
>         def clientConnectionFailed(self, connector, reason):
>             print 'Connection failed. Reason:', reason
>
>         def __del__(self):
>             print 'DEL FACTORY'
>
>     def connector():
>         print 'CONNECTOR'
>         factory = EchoClientFactory()
>         reactor.connectTCP('localhost', 7, factory)
>
>     #reactor.callLater(2, connector)
>     register_loop = LoopingCall(connector)
>     register_loop.start(1)
>
>     reactor.run()
>
> With this code I discover that the instances of EchoClientFactory()
> are only deleted when the program shutdowns. They are not deleted when
> the connections finish. I haven't found in the documentation if I need
> to do some to get factory instances deleted.
>
> --
> Diego Woitasen



-- 
Diego Woitasen


From marco.giusti at gmail.com  Tue Jan 22 08:38:10 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Tue, 22 Jan 2013 14:38:10 +0100
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>
Message-ID: <20130122133810.GB3909@murdoc>

On Tue, Jan 22, 2013 at 10:18:13AM -0300, Diego Woitasen wrote:
> Here is the server code if you want to have a test:
[cut]
> 
> Thanks!
> 
> On Tue, Jan 22, 2013 at 10:06 AM, Diego Woitasen <diego at woitasen.com.ar> wrote:
> > I have an Twisted client app that makes hundreds of connections per
> > minute. I discover that I have a memory leak un my app and I'm almost
> > sure that is related to the ClientFactory() derived class that is
> > never deleted.
> >
> > I reproduce the problem with a modification of Echo client example
> > from Twisted documentation:
> >
[cut]
> >
> > With this code I discover that the instances of EchoClientFactory()
> > are only deleted when the program shutdowns. They are not deleted when
> > the connections finish. I haven't found in the documentation if I need
> > to do some to get factory instances deleted.

Add the following lines and see yourself, the factories are deleted as
aspected:

	import gc

	def collect():
	    gc.collect()
	
	signal.signal(signal.SIGUSR1,
		lambda s, f: reactor.callLater(0.001, collect)

m.


From diego at woitasen.com.ar  Tue Jan 22 08:54:27 2013
From: diego at woitasen.com.ar (Diego Woitasen)
Date: Tue, 22 Jan 2013 10:54:27 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <20130122133810.GB3909@murdoc>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>
	<20130122133810.GB3909@murdoc>
Message-ID: <CAA7UhcnMSUQg4wttp9+chTcE=i9BWi0Sv0-aWRtkHOEZ7kgSGQ@mail.gmail.com>

On Tue, Jan 22, 2013 at 10:38 AM, Marco Giusti <marco.giusti at gmail.com> wrote:
> On Tue, Jan 22, 2013 at 10:18:13AM -0300, Diego Woitasen wrote:
>> Here is the server code if you want to have a test:
> [cut]
>>
>> Thanks!
>>
>> On Tue, Jan 22, 2013 at 10:06 AM, Diego Woitasen <diego at woitasen.com.ar> wrote:
>> > I have an Twisted client app that makes hundreds of connections per
>> > minute. I discover that I have a memory leak un my app and I'm almost
>> > sure that is related to the ClientFactory() derived class that is
>> > never deleted.
>> >
>> > I reproduce the problem with a modification of Echo client example
>> > from Twisted documentation:
>> >
> [cut]
>> >
>> > With this code I discover that the instances of EchoClientFactory()
>> > are only deleted when the program shutdowns. They are not deleted when
>> > the connections finish. I haven't found in the documentation if I need
>> > to do some to get factory instances deleted.
>
> Add the following lines and see yourself, the factories are deleted as
> aspected:
>
>         import gc
>
>         def collect():
>             gc.collect()
>
>         signal.signal(signal.SIGUSR1,
>                 lambda s, f: reactor.callLater(0.001, collect)
>
> m.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


Ok, that's work. Thanks.

My question is now, why is this done automatically for EchoProtocol()
and not for EchoFactory()? Looks like the references are dropped why
Python is taking too much time to frees the memory.

An explanation around this is welcome :)

Regards,
   Diego

--
Diego Woitasen


From p.mayers at imperial.ac.uk  Tue Jan 22 09:03:00 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Jan 2013 14:03:00 +0000
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAA7UhcnMSUQg4wttp9+chTcE=i9BWi0Sv0-aWRtkHOEZ7kgSGQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>
	<20130122133810.GB3909@murdoc>
	<CAA7UhcnMSUQg4wttp9+chTcE=i9BWi0Sv0-aWRtkHOEZ7kgSGQ@mail.gmail.com>
Message-ID: <50FE9C14.5090802@imperial.ac.uk>

On 22/01/13 13:54, Diego Woitasen wrote:

> Ok, that's work. Thanks.
>
> My question is now, why is this done automatically for EchoProtocol()
> and not for EchoFactory()? Looks like the references are dropped why
> Python is taking too much time to frees the memory.
>
> An explanation around this is welcome :)

This kind of thing has been discussed on the list before, I think. If I 
recall, it's due to the behaviour of the Python GC under load.

It would help if you could say which version of Python and Twisted 
you're using.


From diego at woitasen.com.ar  Tue Jan 22 09:08:54 2013
From: diego at woitasen.com.ar (Diego Woitasen)
Date: Tue, 22 Jan 2013 11:08:54 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <50FE9C14.5090802@imperial.ac.uk>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>
	<20130122133810.GB3909@murdoc>
	<CAA7UhcnMSUQg4wttp9+chTcE=i9BWi0Sv0-aWRtkHOEZ7kgSGQ@mail.gmail.com>
	<50FE9C14.5090802@imperial.ac.uk>
Message-ID: <CAA7Uhcn3uGxJ0jFKQZ7g32A6y283K+PwBbsWaR6Jt5DsUW0Nvg@mail.gmail.com>

On Tue, Jan 22, 2013 at 11:03 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 22/01/13 13:54, Diego Woitasen wrote:
>
>> Ok, that's work. Thanks.
>>
>> My question is now, why is this done automatically for EchoProtocol()
>> and not for EchoFactory()? Looks like the references are dropped why
>> Python is taking too much time to frees the memory.
>>
>> An explanation around this is welcome :)
>
> This kind of thing has been discussed on the list before, I think. If I
> recall, it's due to the behaviour of the Python GC under load.
>
> It would help if you could say which version of Python and Twisted
> you're using.
>


I'm using Python 2.7.3 and Twisted 12.2.0.

--
Diego Woitasen


From mithrandi at mithrandi.net  Tue Jan 22 10:15:27 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 22 Jan 2013 17:15:27 +0200
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
Message-ID: <CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>

On Tue, Jan 22, 2013 at 3:06 PM, Diego Woitasen <diego at woitasen.com.ar> wrote:
> I reproduce the problem with a modification of Echo client example
> from Twisted documentation:

Adding __del__ methods causes the object to become uncollectable if it
forms part of a reference cycle. Thus it is almost always a bad idea
to add __del__ methods when attempting to debug a space leak, as the
most likely outcome is that you introduce a _new_, _different_ leak to
the one you are trying to debug.
--
mithrandi, i Ainil en-Balandor, a faer Ambar


From angelo.dellaera at gmail.com  Tue Jan 22 10:37:12 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Tue, 22 Jan 2013 16:37:12 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <20130122163712.27810643@saiph.darkstar.net>

On Thu, 17 Jan 2013 17:19:01 -0000
exarkun at twistedmatrix.com wrote:

> Absolutely.  This issue has been reported in connection to Wokkel 
> already:
> 
>   http://twistedmatrix.com/trac/ticket/6245
> 
> There is currently a fix proposed and waiting review, and there has
> been some discussion about doing a maintenance release of 12.3 to
> distribute the fix.  Thank you for reporting your experience with
> 12.3.0 (although testing during the /pre/-release period would have
> saved everyone some trouble :).
> 
> It would be great if you could try out the proposed fix and let us
> know if it also addresses the problem with your application.

Hi,
I didn't have the possibility to test the fix during the last days (hopefully will do 
in the next hours) but taking a look at the fix proposed by ralphm 

http://twistedmatrix.com/trac/changeset/36867

it seems like the patch is not complete because a similar check (and potential 
conversion) should be inserted in the twisted.names.dns.Name __init__ method 
too. Am I wrong?

Ciao,

-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org


From radix at twistedmatrix.com  Tue Jan 22 10:41:23 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 22 Jan 2013 09:41:23 -0600
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
Message-ID: <CAPkRfURbB82fcYH=YYRnaHVecEeQG9VXnq89EugUgHBtmtGi5A@mail.gmail.com>

On Tue, Jan 22, 2013 at 9:15 AM, Tristan Seligmann
<mithrandi at mithrandi.net>wrote:

> On Tue, Jan 22, 2013 at 3:06 PM, Diego Woitasen <diego at woitasen.com.ar>
> wrote:
> > I reproduce the problem with a modification of Echo client example
> > from Twisted documentation:
>
> Adding __del__ methods causes the object to become uncollectable if it
> forms part of a reference cycle. Thus it is almost always a bad idea
> to add __del__ methods when attempting to debug a space leak, as the
> most likely outcome is that you introduce a _new_, _different_ leak to
> the one you are trying to debug.
> --
> mithrandi, i Ainil en-Balandor, a faer Ambar
>
>

 Thanks for pointing this out. I was reading through this whole thread and
going "why hasn't anyone else pointed out how wrong it is to add __del__ to
debug this yet???".


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130122/b5002961/attachment.htm 

From p.mayers at imperial.ac.uk  Tue Jan 22 10:54:24 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Jan 2013 15:54:24 +0000
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
Message-ID: <50FEB630.3040405@imperial.ac.uk>

On 22/01/13 15:15, Tristan Seligmann wrote:
> On Tue, Jan 22, 2013 at 3:06 PM, Diego Woitasen <diego at woitasen.com.ar> wrote:
>> I reproduce the problem with a modification of Echo client example
>> from Twisted documentation:
>
> Adding __del__ methods causes the object to become uncollectable if it

Ah yes, well spotted.

Personally I tend to avoid __del__ in almost all circumstances, but 
particularly using Twisted (not because of anything Twisted-specific, 
but because my Twisted code tends to be *very* long-running, and because 
it's got sane "died" callbacks on most interfaces).


From diego at woitasen.com.ar  Tue Jan 22 11:12:44 2013
From: diego at woitasen.com.ar (Diego Woitasen)
Date: Tue, 22 Jan 2013 13:12:44 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
Message-ID: <CAA7UhcmSZzyos1tVMnZg7upU43BiWVHwtFKtgjTsupr9vpMGxQ@mail.gmail.com>

El 22/01/2013 12:22, "Tristan Seligmann" <mithrandi at mithrandi.net> escribi?:
>
> On Tue, Jan 22, 2013 at 3:
>
> On Tue, Jan 22, 2013 at 3:06 PM, Diego Woitasen <diego at woitasen.com.ar>
> wrote:
> > I reproduce the problem with a modification of Echo client example
> > from Twisted documentation:
>
> Adding __del__ methods causes the object to become uncollectable if it
> forms part of a reference cycle. Thus it is almost always a bad idea
> to add __del__ methods when attempting to debug a space leak, as the
> most likely outcome is that you introduce a _new_, _different_ leak to
> the one you are trying to debug.
> --
> mithrandi, i Ainil en-Balandor, a faer Ambar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130122/3ef5d946/attachment.htm 

From facundobatista at gmail.com  Tue Jan 22 11:45:50 2013
From: facundobatista at gmail.com (Facundo Batista)
Date: Tue, 22 Jan 2013 13:45:50 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
Message-ID: <CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>

On Tue, Jan 22, 2013 at 12:15 PM, Tristan Seligmann
<mithrandi at mithrandi.net> wrote:

> Adding __del__ methods causes the object to become uncollectable if it
> forms part of a reference cycle. Thus it is almost always a bad idea
> to add __del__ methods when attempting to debug a space leak, as the
> most likely outcome is that you introduce a _new_, _different_ leak to
> the one you are trying to debug.

Yes, but note that without the __del__ it had the same behaviour...

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/
Twitter: @facundobatista


From p.mayers at imperial.ac.uk  Tue Jan 22 12:02:05 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Jan 2013 17:02:05 +0000
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
	<CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>
Message-ID: <50FEC60D.3050502@imperial.ac.uk>

On 22/01/13 16:45, Facundo Batista wrote:
>
> Yes, but note that without the __del__ it had the same behaviour...
>

Not quite. The OP said that:

  a) He had a problem with a Twisted app not freeing memory under load
  b) He had reproduced that problem with his example, that included __del__

Nowhere did he say "it does the same without __del__". He was in fact 
not specific about whether the original/real code uses __del__ or not.


From facundobatista at gmail.com  Tue Jan 22 12:06:40 2013
From: facundobatista at gmail.com (Facundo Batista)
Date: Tue, 22 Jan 2013 14:06:40 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <50FEC60D.3050502@imperial.ac.uk>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
	<CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>
	<50FEC60D.3050502@imperial.ac.uk>
Message-ID: <CAM09pzRRUzBtyeOE636ipkA6SU9ZxLEQoUOZVBwLtY8d5+7Y5w@mail.gmail.com>

On Tue, Jan 22, 2013 at 2:02 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 22/01/13 16:45, Facundo Batista wrote:
>>
>> Yes, but note that without the __del__ it had the same behaviour...
>>
>
> Not quite. The OP said that:
>
>   a) He had a problem with a Twisted app not freeing memory under load
>   b) He had reproduced that problem with his example, that included __del__
>
> Nowhere did he say "it does the same without __del__". He was in fact
> not specific about whether the original/real code uses __del__ or not.

He didn't say it. I'm saying it, after testing it.

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/
Twitter: @facundobatista


From p.mayers at imperial.ac.uk  Tue Jan 22 12:37:54 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Jan 2013 17:37:54 +0000
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAM09pzRRUzBtyeOE636ipkA6SU9ZxLEQoUOZVBwLtY8d5+7Y5w@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
	<CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>
	<50FEC60D.3050502@imperial.ac.uk>
	<CAM09pzRRUzBtyeOE636ipkA6SU9ZxLEQoUOZVBwLtY8d5+7Y5w@mail.gmail.com>
Message-ID: <50FECE72.2060003@imperial.ac.uk>

On 22/01/13 17:06, Facundo Batista wrote:
> On Tue, Jan 22, 2013 at 2:02 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>
>> On 22/01/13 16:45, Facundo Batista wrote:
>>>
>>> Yes, but note that without the __del__ it had the same behaviour...
>>>
>>
>> Not quite. The OP said that:
>>
>>    a) He had a problem with a Twisted app not freeing memory under load
>>    b) He had reproduced that problem with his example, that included __del__
>>
>> Nowhere did he say "it does the same without __del__". He was in fact
>> not specific about whether the original/real code uses __del__ or not.
>
> He didn't say it. I'm saying it, after testing it.
>

When you say "it", you mean his example code as posted to the list, right?

Because having just tested it, I don't see any problem - his example 
code has stable memory usage for both client/server processes, and with 
the client making 1, 100 or 1000 connections/sec, and the debug shows 
protocol and factory instances being freed as I would expect i.e. in a 
timely fashion, not just at process close.

Tested on both:

Python 2.7.3 / Twisted 11.1.0 / Linux 64-bit
Python 2.6.8 / Twisted 12.2.0 / Linux 64-bit

Odd...


From facundobatista at gmail.com  Tue Jan 22 13:40:15 2013
From: facundobatista at gmail.com (Facundo Batista)
Date: Tue, 22 Jan 2013 15:40:15 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <50FECE72.2060003@imperial.ac.uk>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
	<CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>
	<50FEC60D.3050502@imperial.ac.uk>
	<CAM09pzRRUzBtyeOE636ipkA6SU9ZxLEQoUOZVBwLtY8d5+7Y5w@mail.gmail.com>
	<50FECE72.2060003@imperial.ac.uk>
Message-ID: <CAM09pzQYz+0GSH_WAtVQGCTEki89cpOHju4HxEZCjaAU6CBumg@mail.gmail.com>

On Tue, Jan 22, 2013 at 2:37 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> Because having just tested it, I don't see any problem - his example
> code has stable memory usage for both client/server processes, and with
> the client making 1, 100 or 1000 connections/sec, and the debug shows
> protocol and factory instances being freed as I would expect i.e. in a
> timely fashion, not just at process close.
>
> Tested on both:
>
> Python 2.7.3 / Twisted 11.1.0 / Linux 64-bit
> Python 2.6.8 / Twisted 12.2.0 / Linux 64-bit

I tested the original example, with the change of doing a loop each .1
seconds instead 1 second, and it shown a memory growth, with and
without the __del__ in the Factory.

It was using Twisted 12.2.0 under Python 2.7.3, on a Linux 32b. I
measured the memory usage with top.

Regards,

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/
Twitter: @facundobatista


From exarkun at twistedmatrix.com  Tue Jan 22 14:36:49 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 22 Jan 2013 19:36:49 -0000
Subject: [Twisted-Python] Twisted Names strings
Message-ID: <20130122193649.3644.1807670358.divmod.xquotient.88@localhost6.localdomain6>

On 03:37 pm, angelo.dellaera at gmail.com wrote:
>
>Hi,
>I didn't have the possibility to test the fix during the last days 
>(hopefully will do
>in the next hours) but taking a look at the fix proposed by ralphm
>
>http://twistedmatrix.com/trac/changeset/36867
>
>it seems like the patch is not complete because a similar check (and 
>potential
>conversion) should be inserted in the twisted.names.dns.Name __init__ 
>method
>too. Am I wrong?

Hi Angelo,

Thanks for taking a look at the changeset, at least!  I think that you 
are correct.  I would even go so far as to say that the change should be 
reverted, as it does not actually fix the *regression*, it works around 
it in a higher-level API.  As you say, this results in an incomplete fix 
for the issue since many applications may (and likely are) using `Name` 
directly rather than via SRVConnector.

I hope Ralph or Tom will chime in with their thoughts on this.

Jean-Paul


From exarkun at twistedmatrix.com  Tue Jan 22 15:03:29 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 22 Jan 2013 20:03:29 -0000
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
Message-ID: <20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>

On 09:29 am, adi at roiban.ro wrote:
>On 22 January 2013 02:21,  <exarkun at twistedmatrix.com> wrote:
>>On 20 Jan, 02:35 pm, adi at roiban.ro wrote:
>>>Hi,
>>>
>>>I start my pet project using Python Nose as test runner. At the 
>>>start,
>>>Twisted not used at all.
>>>Later I discovered Twisted and start using it... but testing Twisted
>>>requires trial.
>>>
>>>I resist migrating to Trial and ended up with a custom code for
>>>running Twisted tests together with Nose:
>>>
>>>https://github.com/chevah/chevah-rhinoplasty
>>>
>>>
>>>I though I can share this code on the list, in case there is someone
>>>else wrestling with deferres testing outside of Trial.
>>>
>>>Any feedback or comments is much appreciated.
>>
>>The implementation is somewhat saddening in its use of Twisted 
>>internals
>>(which makes it fragile and subject to easy breakage by new Twisted
>>releases) and limited platform support (it won't work on Windows,
>>afaik).
>>
>>You may also find problems with direct use of `reactor.iterate`, since
>>use of this API is highly discouraged due to re-entrancy issues and 
>>its
>>implementation is not all that well tested by Twisted's own test 
>>suite.
>>
>>If it works for you, great, but I would hesitate to recommend it to 
>>new
>>projects as a testing tool.  As Itamar suggests, nose should be able 
>>to
>>run xUnit-style tests.
>>
>>Jean-Paul
>
>Thanks for your feedback.
>
>----
>
>The new methods successResultOf and failureResultOf looks good, but I
>think they only work with deferred that already have a result.
>
>----
>
>I am aware that the whole thing is fragile... and I am aware of the
>consequences of using internal non-public methods.
>
>I checked the code from twisted.trial.unittest.TestCase but I could
>not spot how it waits for deferreds execution.
>
>What part of twisted.trial.unittest.TestCase executes and waits for
>the deferred?
>
>Can I use that code to implement something similar to successResultOf
>and failureResultOf but which also executes the deferred?

Hi Adi,

trial does what it does by touching a lot of internal stuff as well. 
This is still bad, but at least it's our fault if it ever breaks instead 
of yours.  There's also a long term plan (or "plan" may be putting it 
too strongly, perhaps I should say "hope") that this part of trial will 
change to only use public interfaces.  This will probably require 
reactors actually implementing restartability, or it will require 
changing the trial feature slightly (eg, so it starts a reactor, runs 
all tests, then stops the reactor - if it did this, I'm sure you can 
imagine how "waiting" for a Deferred would just be adding a callback to 
the right place, as in any other Twisted-based application).

Are you interested in helping out with making reactors restartable? :)
>
>
>This code also works on Windows and on other Unix systems (OSX, 
>Solaris)

Okay.  I expected otherwise when I saw `_UnixWaker` in the 
implementation, but reading more carefully I now see that the code 
doesn't ever try to instantiate or use one of these, it just needs it 
for type checking.  My mistake!

Jean-Paul


From fabian.rothfuchs at googlemail.com  Thu Jan 24 09:34:45 2013
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Thu, 24 Jan 2013 15:34:45 +0100
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CD1D90D8.41CAB%fabian.rothfuchs@googmail.com>
Message-ID: <CD270515.24C41%fabian.rothfuchs@googlemail.com>

Hey again!
Having the setup doing quite well so far, I just ran into a problem that I
do not know how to debug:

Testcase `setUp()` starts a server that subclasses
`twisted.web.resource.Resource` , as it's going to be a lightweight SOAP
server, responding with hard-coded xml strings.
Purpose is to check the request for validity.

The Testcase's `test_*()` function initiates a client request by using the
suds module. I now discovered that the server process started in `setUp()`
hangs as long as the suds connection did not finish.
Which is a deadlock, as it cannot finish unless the server sent the
response.

When trying to connect to the server via telnet, I do not get any response
unless the suds connection is lost.

Snippets:
TestCase: http://dpaste.org/pmg6Y/
TestServer: http://dpaste.org/NOLb8/
Client: http://dpaste.org/2wxIV/

Thanks for any help!
Fabian


From:  Fabian Rothfuchs <fabian.rothfuchs at googmail.com>
Date:  Thursday, January 17, 2013 11:27 AM
To:  Twisted general discussion <twisted-python at twistedmatrix.com>
Subject:  Re: [Twisted-Python] Stopping Reactor in UnitTest Callback

While trying to minimalize my code, I discovered that the following line
somewhere down deep the code is causing the whole test to hang:
> adbapi.ConnectionPool('MySQLdb', system.host, system.username,
> system.password, system.database)
> 
> 
It seems that the connection is not being closed properly, causing the whole
test chain to hang.


From:  Itamar Turner-Trauring <itamar at futurefoundries.com>
Reply-To:  Twisted general discussion <twisted-python at twistedmatrix.com>
Date:  Tuesday, January 15, 2013 6:22 PM
To:  Twisted general discussion <twisted-python at twistedmatrix.com>
Subject:  Re: [Twisted-Python] Stopping Reactor in UnitTest Callback



On Tue, Jan 15, 2013 at 10:26 AM, Fabian Rothfuchs
<fabian.rothfuchs at googlemail.com> wrote:
> Yes, I thought so, too. Indeed it happens that the reactor is started
> automatically, but after the test succeeds, it's not being stopped (only
> chance is to kill ?9 it).

Perhaps the problem isn't with the test framework, but with your test. Can
you show us a minimal piece of code that reproduces the problem?
_______________________________________________ Twisted-Python mailing list
Twisted-Python at twistedmatrix.comhttp://twistedmatrix.com/cgi-bin/mailman/lis
tinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130124/fc3e0e50/attachment.htm 

From exarkun at twistedmatrix.com  Thu Jan 24 11:00:06 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 24 Jan 2013 16:00:06 -0000
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CD270515.24C41%fabian.rothfuchs@googlemail.com>
References: <CD1D90D8.41CAB%fabian.rothfuchs@googmail.com>
	<CD270515.24C41%fabian.rothfuchs@googlemail.com>
Message-ID: <20130124160006.3644.360009842.divmod.xquotient.166@localhost6.localdomain6>

On 02:34 pm, fabian.rothfuchs at googlemail.com wrote:
>Hey again!
>Having the setup doing quite well so far, I just ran into a problem 
>that I
>do not know how to debug:
>
>Testcase `setUp()` starts a server that subclasses
>`twisted.web.resource.Resource` , as it's going to be a lightweight 
>SOAP
>server, responding with hard-coded xml strings.
>Purpose is to check the request for validity.
>
>The Testcase's `test_*()` function initiates a client request by using 
>the
>suds module. I now discovered that the server process started in 
>`setUp()`
>hangs as long as the suds connection did not finish.

It looks like you're using `deferLater` as though it turns the SUDS 
client from a blocking, synchronous API into a non-blocking, 
asynchronous API.  This is not what `deferLater` does.  `deferLater` 
just schedules a function call to happen at a later time.

Your SUDS *client* is blocking the process from doing anything.  You 
need a non-blocking, asynchronous SUDS client.  You could use SUDS in a 
thread (if it is thread-safe) or you could find a different client.

Jean-Paul
>Which is a deadlock, as it cannot finish unless the server sent the
>response.
>
>When trying to connect to the server via telnet, I do not get any 
>response
>unless the suds connection is lost.
>
>Snippets:
>TestCase: http://dpaste.org/pmg6Y/
>TestServer: http://dpaste.org/NOLb8/
>Client: http://dpaste.org/2wxIV/
>
>Thanks for any help!
>Fabian


From fabian.rothfuchs at googlemail.com  Fri Jan 25 04:15:07 2013
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Fri, 25 Jan 2013 10:15:07 +0100
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <20130124160006.3644.360009842.divmod.xquotient.166@localhost6.localdomain6>
Message-ID: <CD280BAB.3EA80%fabian.rothfuchs@googlemail.com>

Hey Jean-Paul (and all the others in this thread),

Thank you very much for your help so far - I do really appreciate it!

I'm well aware of the fact that `deferLater` does not magically turn
blocking apps to non-blocking ones.
The idea is, whatever SUDS does, in the end it should send a SOAP request
to my
TestServer.
My problem is, that SUDS indeed sends the request, but wants to get an
immediate response, which causes a deadlock.

I just came across the very same question asked a couple of years ago:
http://stackoverflow.com/questions/2671228/python-how-can-i-use-twisted-as-
the-transport-for-suds

This should help me out of this.

Cheers
Fabian



On 1/24/13 5:00 PM, "exarkun at twistedmatrix.com"
<exarkun at twistedmatrix.com> wrote:

>On 02:34 pm, fabian.rothfuchs at googlemail.com wrote:
>>Hey again!
>>Having the setup doing quite well so far, I just ran into a problem
>>that I
>>do not know how to debug:
>>
>>Testcase `setUp()` starts a server that subclasses
>>`twisted.web.resource.Resource` , as it's going to be a lightweight
>>SOAP
>>server, responding with hard-coded xml strings.
>>Purpose is to check the request for validity.
>>
>>The Testcase's `test_*()` function initiates a client request by using
>>the
>>suds module. I now discovered that the server process started in
>>`setUp()`
>>hangs as long as the suds connection did not finish.
>
>It looks like you're using `deferLater` as though it turns the SUDS
>client from a blocking, synchronous API into a non-blocking,
>asynchronous API.  This is not what `deferLater` does.  `deferLater`
>just schedules a function call to happen at a later time.
>
>Your SUDS *client* is blocking the process from doing anything.  You
>need a non-blocking, asynchronous SUDS client.  You could use SUDS in a
>thread (if it is thread-safe) or you could find a different client.
>
>Jean-Paul
>>Which is a deadlock, as it cannot finish unless the server sent the
>>response.
>>
>>When trying to connect to the server via telnet, I do not get any
>>response
>>unless the suds connection is lost.
>>
>>Snippets:
>>TestCase: http://dpaste.org/pmg6Y/
>>TestServer: http://dpaste.org/NOLb8/
>>Client: http://dpaste.org/2wxIV/
>>
>>Thanks for any help!
>>Fabian
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From poisonoff at gmail.com  Fri Jan 25 11:35:17 2013
From: poisonoff at gmail.com (=?UTF-8?B?0JDRgNC60LDQtNC40Lkg0JvQtdCy0LjQvQ==?=)
Date: Fri, 25 Jan 2013 22:35:17 +0600
Subject: [Twisted-Python] Amazing exception "GeneratorExit"
Message-ID: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>

Hi all, i got strange error

If run this:

# -*- coding: UTF-8 -*-

import os
import sys

from twisted.python import log
from twisted.internet import reactor
from twisted.internet.defer import Deferred, inlineCallbacks

@inlineCallbacks
def _():

	try:
		(yield Deferred())
	except:
		log.err()

reactor.callLater(0, _)
reactor.run()

i got exception  "GeneratorExit" Why?!

... this code work:

# -*- coding: UTF-8 -*-

import os
import sys

from twisted.python import log
from twisted.internet import reactor
from twisted.internet.defer import Deferred, inlineCallbacks

@inlineCallbacks
def _():

	deferred = Deferred()

	try:
		(yield deferred)
	except:
		log.err()

reactor.callLater(0, _)
reactor.run()

Change "Deferred()" to "deferred = Deferred()"


From poisonoff at gmail.com  Fri Jan 25 11:50:58 2013
From: poisonoff at gmail.com (=?UTF-8?B?0JDRgNC60LDQtNC40Lkg0JvQtdCy0LjQvQ==?=)
Date: Fri, 25 Jan 2013 22:50:58 +0600
Subject: [Twisted-Python] Amazing exception "GeneratorExit"
In-Reply-To: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>
References: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>
Message-ID: <CACgbmJn-8JY1hne7Zq6Qvj00VXf4YeBgoR=mhyT5EqwhkcL4HQ@mail.gmail.com>

I try answer myself, reason for this error broken reference?

On Fri, Jan 25, 2013 at 10:35 PM, ??????? ????? <poisonoff at gmail.com> wrote:
> Hi all, i got strange error
>
> If run this:
>
> # -*- coding: UTF-8 -*-
>
> import os
> import sys
>
> from twisted.python import log
> from twisted.internet import reactor
> from twisted.internet.defer import Deferred, inlineCallbacks
>
> @inlineCallbacks
> def _():
>
>         try:
>                 (yield Deferred())
>         except:
>                 log.err()
>
> reactor.callLater(0, _)
> reactor.run()
>
> i got exception  "GeneratorExit" Why?!
>
> ... this code work:
>
> # -*- coding: UTF-8 -*-
>
> import os
> import sys
>
> from twisted.python import log
> from twisted.internet import reactor
> from twisted.internet.defer import Deferred, inlineCallbacks
>
> @inlineCallbacks
> def _():
>
>         deferred = Deferred()
>
>         try:
>                 (yield deferred)
>         except:
>                 log.err()
>
> reactor.callLater(0, _)
> reactor.run()
>
> Change "Deferred()" to "deferred = Deferred()"


From radix at twistedmatrix.com  Fri Jan 25 12:49:09 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 25 Jan 2013 11:49:09 -0600
Subject: [Twisted-Python] Amazing exception "GeneratorExit"
In-Reply-To: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>
References: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>
Message-ID: <CAPkRfUSbNTs8BnV7Yu-xwW6gFgUwN_vXNaSmkKftanTPpHF3nA@mail.gmail.com>

On Fri, Jan 25, 2013 at 10:35 AM, ??????? ????? <poisonoff at gmail.com> wrote:

> Hi all, i got strange error
>
> If run this:
>
> # -*- coding: UTF-8 -*-
>
> import os
> import sys
>
> from twisted.python import log
> from twisted.internet import reactor
> from twisted.internet.defer import Deferred, inlineCallbacks
>
> @inlineCallbacks
> def _():
>
>         try:
>                 (yield Deferred())
>         except:
>                 log.err()
>
> reactor.callLater(0, _)
> reactor.run()
>
> i got exception  "GeneratorExit" Why?!
>


This behavior isn't specific to inlineCallbacks. If you get rid of the
reactor usage and the @inlineCallbacks decorator, and just call _().next(),
you'll see the same behavior.

http://docs.python.org/2.7/reference/expressions.html?highlight=yield%20expression#generator-iterator-methods

See the stuff about how .close() throws GeneratorExit into the generator.

It is related to garbage collection. When a generator is garbage collected,
its .close() method is called. Since you're keeping a reference to the
Deferred in the generator itself in the working version, it's not being
immediately closed because there's a circular reference. (I think?)

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130125/910dc148/attachment.htm 

From poisonoff at gmail.com  Fri Jan 25 13:01:37 2013
From: poisonoff at gmail.com (=?UTF-8?B?0JDRgNC60LDQtNC40Lkg0JvQtdCy0LjQvQ==?=)
Date: Sat, 26 Jan 2013 00:01:37 +0600
Subject: [Twisted-Python] Amazing exception "GeneratorExit"
In-Reply-To: <CAPkRfUSbNTs8BnV7Yu-xwW6gFgUwN_vXNaSmkKftanTPpHF3nA@mail.gmail.com>
References: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>
	<CAPkRfUSbNTs8BnV7Yu-xwW6gFgUwN_vXNaSmkKftanTPpHF3nA@mail.gmail.com>
Message-ID: <CACgbmJn8SkmyNt3cOsTJwBCqDBHBCG5RupJHsdAHo80zUYHUEQ@mail.gmail.com>

Christopher, thank you.


From exarkun at twistedmatrix.com  Sun Jan 27 00:05:26 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Jan 2013 05:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1359263126.58.84001006@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130127/19ac596b/attachment.htm 

From sergun at gmail.com  Mon Jan 28 02:47:48 2013
From: sergun at gmail.com (Sergey V. Gerasimov)
Date: Mon, 28 Jan 2013 11:47:48 +0400
Subject: [Twisted-Python] inlineCallbacks: multiple yielding same Defferred
	behaviour
Message-ID: <069f01cdfd2b$c5660130$50320390$@gmail.com>

It's not intuitively clear why multiple yielding the same Defferred in
function decorated with defer.inlineCallbacks get different results:

 

@defer.inlineCallbacks

def f():

                d = defer.succeed(1)

                result = yield d

print result

                result = yield d

print result

 

Output:

1

None

 

Probably we SHOULD NOT think if "d" was or was not yielded before when using
inlineCallbacks..

 

Are they some workarounds?

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130128/9d6e220d/attachment.htm 

From _ at lvh.cc  Mon Jan 28 03:47:12 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Mon, 28 Jan 2013 09:47:12 +0100
Subject: [Twisted-Python] inlineCallbacks: multiple yielding same
 Defferred behaviour
In-Reply-To: <069f01cdfd2b$c5660130$50320390$@gmail.com>
References: <069f01cdfd2b$c5660130$50320390$@gmail.com>
Message-ID: <CAE_Hg6aMRUYyrtvL3-Ki9fWd9FTbnUidZjnT-rPA7sk7eMKR4g@mail.gmail.com>

I'm not entirely sure why you feel this is unintuitive or why you should
need a workaround; in any other case, deferreds work pretty much the same
way.

When reading this code, the first question that pops up in my head is: why
are you doing this instead of just using the result that you already have
(and assigned to a name)? How did this  waiting-twice-on-one-deferred
happen?


On Mon, Jan 28, 2013 at 8:47 AM, Sergey V. Gerasimov <sergun at gmail.com>wrote:

> It?s not intuitively clear why multiple yielding the same Defferred in
> function decorated with defer.inlineCallbacks get different results:****
>
> ** **
>
> @defer.inlineCallbacks****
>
> def f():****
>
>                 d = defer.succeed(1)****
>
>                 result = yield d****
>
> print result****
>
>                 result = yield d****
>
> print result****
>
> ** **
>
> Output:****
>
> 1****
>
> None****
>
> ** **
>
> Probably we SHOULD NOT think if ?d? was or was not yielded before when
> using inlineCallbacks..****
>
> ** **
>
> Are they some workarounds?****
>
> ** **
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130128/61ed4edf/attachment.htm 

From sergun at gmail.com  Mon Jan 28 04:37:36 2013
From: sergun at gmail.com (Sergey V. Gerasimov)
Date: Mon, 28 Jan 2013 13:37:36 +0400
Subject: [Twisted-Python] inlineCallbacks: multiple yielding same
	Defferred behaviour
In-Reply-To: <CAE_Hg6aMRUYyrtvL3-Ki9fWd9FTbnUidZjnT-rPA7sk7eMKR4g@mail.gmail.com>
References: <069f01cdfd2b$c5660130$50320390$@gmail.com>
	<CAE_Hg6aMRUYyrtvL3-Ki9fWd9FTbnUidZjnT-rPA7sk7eMKR4g@mail.gmail.com>
Message-ID: <06bf01cdfd3b$1c3cb210$54b61630$@gmail.com>

Hi Laurens,

 

Thanks for your reply!

 

I need something like this.

A server that processes requests and handles situation when there are 2
requests with same key.

 

class Server(object):

                def __init__(self):

                                self.requestsInProgress = {} # dict: key ->
Deferred with result

 

                @defer.inlineCallbacks

                def request(self, key):

                               in_progress = key in self.requests

                               if in_progress:

                                               d = self.requestsInProgress
[key]

                                               result = yield d

                               else:

                                               d = process_request(key)

                                               self.requests[key] = d

                                               result = yield d

                                               del self.requestsInProgress
[key]

                               defer.returnValue(result)

 

How can I implement the logic correctly?

 

In my opinion it's very simple and clear concept to consider Deferred just
like deferred execution of some action. In this case you should be able to
get it's result (doing yield) many times (why not?).

 

 

I have deal with Task-based programming and async functions (mechanism
similar to Deferred and inlineCallbacks decorated functions in Twisted) in
Microsoft  .NET.

MS people have implemented Task (analogue of Deferred) in the way I
described.

 

 

From: Laurens Van Houtven [mailto:_ at lvh.cc] 
Sent: Monday, January 28, 2013 12:47 PM
To: sergun at gmail.com; Twisted general discussion
Subject: Re: [Twisted-Python] inlineCallbacks: multiple yielding same
Defferred behaviour

 

I'm not entirely sure why you feel this is unintuitive or why you should
need a workaround; in any other case, deferreds work pretty much the same
way.

When reading this code, the first question that pops up in my head is: why
are you doing this instead of just using the result that you already have
(and assigned to a name)? How did this  waiting-twice-on-one-deferred
happen?

 

On Mon, Jan 28, 2013 at 8:47 AM, Sergey V. Gerasimov <sergun at gmail.com>
wrote:

It's not intuitively clear why multiple yielding the same Defferred in
function decorated with defer.inlineCallbacks get different results:

 

@defer.inlineCallbacks

def f():

                d = defer.succeed(1)

                result = yield d

print result

                result = yield d

print result

 

Output:

1

None

 

Probably we SHOULD NOT think if "d" was or was not yielded before when using
inlineCallbacks..

 

Are they some workarounds?

 


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




-- 

cheers

lvh

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130128/7c276bff/attachment-0001.htm 

From sergun at gmail.com  Mon Jan 28 04:52:58 2013
From: sergun at gmail.com (Sergey V. Gerasimov)
Date: Mon, 28 Jan 2013 13:52:58 +0400
Subject: [Twisted-Python] inlineCallbacks: multiple yielding same
	Defferred behaviour
In-Reply-To: <CAE_Hg6aus1gjAGfB8seguqO+RM-3XVVtPi9DRaB3qBz+v+bfxg@mail.gmail.com>
References: <069f01cdfd2b$c5660130$50320390$@gmail.com>
	<CAE_Hg6aMRUYyrtvL3-Ki9fWd9FTbnUidZjnT-rPA7sk7eMKR4g@mail.gmail.com>
	<06b201cdfd3a$f7acf450$e706dcf0$@gmail.com>
	<CAE_Hg6aus1gjAGfB8seguqO+RM-3XVVtPi9DRaB3qBz+v+bfxg@mail.gmail.com>
Message-ID: <06e201cdfd3d$41dedf50$c59c9df0$@gmail.com>

My target is just to deny request duplications.

 

Reg. inlineCallbacks.. What do you think is it possible to implement
inlineCallbacks generator in the way allows multiple yields? (but do not
modify Defferred)

 

From: Laurens Van Houtven [mailto:_ at lvh.cc] 
Sent: Monday, January 28, 2013 1:43 PM
To: sergun at gmail.com
Subject: Re: [Twisted-Python] inlineCallbacks: multiple yielding same
Defferred behaviour

 

The short answer is that those models don't support chaining the way
Deferreds do, IIUC.

I think a very similar thing was a bonus question at the tutorial Stephen
Thorne and I gave at EuroPython last year. Do you want to cache results as
well, or only not make duplicate requests when one is in-flight?

 

On Mon, Jan 28, 2013 at 10:36 AM, Sergey V. Gerasimov <sergun at gmail.com>
wrote:

Hi Laurens,

 

Thanks for your reply!

 

I need something like this.

A server that processes requests and handles situation when there are 2
requests with same key.

 

class Server(object):

                def __init__(self):

                                self.requestsInProgress = {} # dict: key ->
Deferred with result

 

                @defer.inlineCallbacks

                def request(self, key):

                               in_progress = key in self.requests

                               if in_progress:

                                               d = self.requestsInProgress
[key]

                                               result = yield d

                               else:

                                               d = process_request(key)

                                               self.requests[key] = d

                                               result = yield d

                                               del self.requestsInProgress
[key]

                               defer.returnValue(result)

 

How can I implement the logic correctly?

 

In my opinion it's very simple and clear concept to consider Deferred just
like deferred execution of some action. In this case you should be able to
get it's result (doing yield) many times (why not?).

 

 

I have deal with Task-based programming and async functions (mechanism
similar to Deferred and inlineCallbacks decorated functions in Twisted) in
Microsoft  .NET.

MS people have implemented Task (analogue of Deferred) in the way I
described.

 

 

 

From: Laurens Van Houtven [mailto:_ at lvh.cc] 
Sent: Monday, January 28, 2013 12:47 PM
To: sergun at gmail.com; Twisted general discussion
Subject: Re: [Twisted-Python] inlineCallbacks: multiple yielding same
Defferred behaviour

 

I'm not entirely sure why you feel this is unintuitive or why you should
need a workaround; in any other case, deferreds work pretty much the same
way.

When reading this code, the first question that pops up in my head is: why
are you doing this instead of just using the result that you already have
(and assigned to a name)? How did this  waiting-twice-on-one-deferred
happen?

 

On Mon, Jan 28, 2013 at 8:47 AM, Sergey V. Gerasimov <sergun at gmail.com>
wrote:

It's not intuitively clear why multiple yielding the same Defferred in
function decorated with defer.inlineCallbacks get different results:

 

@defer.inlineCallbacks

def f():

                d = defer.succeed(1)

                result = yield d

print result

                result = yield d

print result

 

Output:

1

None

 

Probably we SHOULD NOT think if "d" was or was not yielded before when using
inlineCallbacks..

 

Are they some workarounds?

 


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




-- 

cheers

lvh




-- 

cheers

lvh

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130128/79222f01/attachment.htm 

From itamar at futurefoundries.com  Mon Jan 28 09:56:57 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Mon, 28 Jan 2013 09:56:57 -0500
Subject: [Twisted-Python] Twisted-related talks and tutorials at PyCon
Message-ID: <CAOp9P3p92Kp1DndQqyrAgEBySis26E+5Wdh-KbDUbxajPKFEvA@mail.gmail.com>

Hi,

Thought I'd point out some Twisted-related talks at PyCon; I may have
missed a few.


*Tutorials*

Jessica "jesstess" McKellar is teaching two tutorials, one of which teaches
the basics of contributing to open source projects, in case you've wanted
to contribute to Twisted but haven't yet figured out the process:
https://us.pycon.org/2013/schedule/presentation/4/.

I will be teaching a tutorial on test-driven development with Twisted,
explaining how to build robust, well-tested applications:
https://us.pycon.org/2013/schedule/presentation/15/


*Talks*
*
*
Jessica McKellar will be giving a talk on "How the Internet Works", which
will be including some demonstrations using Twisted:
https://us.pycon.org/2013/schedule/presentation/50/.

Ashwini "ashfall" Oruganti, one of our Google Summer of Code interns, will
be talking about endpoints, Deferreds and more:
https://us.pycon.org/2013/schedule/presentation/40/

Glyph Lefkowitz will be rudely-yet-jokingly insulting Javascript
programmers in his talk on event-driven programming:
https://us.pycon.org/2013/schedule/presentation/120/

Armin Rigo will be talking about Software Transactional Memory and removing
the GIL from PyPy (we will hopefully have a multi-core reactor soon after
this becomes usable): https://us.pycon.org/2013/schedule/presentation/37/

Allen "dash" Short will be talking about Parsley, his parsing library:
https://us.pycon.org/2013/schedule/presentation/84/

Laurens "lvh" Van Houtven will be teaching Crypto 101:
https://us.pycon.org/2013/schedule/presentation/74/

Brad Kuhn, of the Software Freedom Conservancy (Twisted's non-profit
sponsor), will be talking about funding open source projects, using among
others Twisted as an example:
https://us.pycon.org/2013/schedule/presentation/48/


*Other*
*
*
Jessica McKellar will be giving one of the keynote addresses, though it
probably has nothing to do with Twisted. (The posters list isn't up yet,
but I'm betting Jessica will also have a poster.)
*
*
I believe that as with every year we will be having a development sprint
after the main conference, and a birds-of-feather session at some point.


-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130128/8380c2fc/attachment-0001.htm 

From _ at lvh.cc  Mon Jan 28 10:15:34 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Mon, 28 Jan 2013 16:15:34 +0100
Subject: [Twisted-Python] Twisted-related talks and tutorials at PyCon
In-Reply-To: <CAOp9P3p92Kp1DndQqyrAgEBySis26E+5Wdh-KbDUbxajPKFEvA@mail.gmail.com>
References: <CAOp9P3p92Kp1DndQqyrAgEBySis26E+5Wdh-KbDUbxajPKFEvA@mail.gmail.com>
Message-ID: <CAE_Hg6Yv-QJp+bfHjobmqkL4kzV8AJRsM8x4=4+uEc45Wzao=w@mail.gmail.com>

My crypto 101 talk is probably going to be pretty light on the twisted:
right now there's nothing in it, I'm considering adding some, but I'm also
strapped for time :(


On Mon, Jan 28, 2013 at 3:56 PM, Itamar Turner-Trauring <
itamar at futurefoundries.com> wrote:

> Hi,
>
> Thought I'd point out some Twisted-related talks at PyCon; I may have
> missed a few.
>
>
> *Tutorials*
>
> Jessica "jesstess" McKellar is teaching two tutorials, one of which
> teaches the basics of contributing to open source projects, in case you've
> wanted to contribute to Twisted but haven't yet figured out the process:
> https://us.pycon.org/2013/schedule/presentation/4/.
>
> I will be teaching a tutorial on test-driven development with Twisted,
> explaining how to build robust, well-tested applications:
> https://us.pycon.org/2013/schedule/presentation/15/
>
>
> *Talks*
> *
> *
> Jessica McKellar will be giving a talk on "How the Internet Works", which
> will be including some demonstrations using Twisted:
> https://us.pycon.org/2013/schedule/presentation/50/.
>
> Ashwini "ashfall" Oruganti, one of our Google Summer of Code interns, will
> be talking about endpoints, Deferreds and more:
> https://us.pycon.org/2013/schedule/presentation/40/
>
> Glyph Lefkowitz will be rudely-yet-jokingly insulting Javascript
> programmers in his talk on event-driven programming:
> https://us.pycon.org/2013/schedule/presentation/120/
>
> Armin Rigo will be talking about Software Transactional Memory and
> removing the GIL from PyPy (we will hopefully have a multi-core reactor
> soon after this becomes usable):
> https://us.pycon.org/2013/schedule/presentation/37/
>
> Allen "dash" Short will be talking about Parsley, his parsing library:
> https://us.pycon.org/2013/schedule/presentation/84/
>
> Laurens "lvh" Van Houtven will be teaching Crypto 101:
> https://us.pycon.org/2013/schedule/presentation/74/
>
> Brad Kuhn, of the Software Freedom Conservancy (Twisted's non-profit
> sponsor), will be talking about funding open source projects, using among
> others Twisted as an example:
> https://us.pycon.org/2013/schedule/presentation/48/
>
>
> *Other*
> *
> *
> Jessica McKellar will be giving one of the keynote addresses, though it
> probably has nothing to do with Twisted. (The posters list isn't up yet,
> but I'm betting Jessica will also have a poster.)
> *
> *
> I believe that as with every year we will be having a development sprint
> after the main conference, and a birds-of-feather session at some point.
>
>
> -Itamar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130128/061c6e33/attachment.htm 

From exarkun at twistedmatrix.com  Mon Jan 28 10:33:06 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 28 Jan 2013 15:33:06 -0000
Subject: [Twisted-Python] inlineCallbacks: multiple yielding same
 Defferred behaviour
In-Reply-To: <06e201cdfd3d$41dedf50$c59c9df0$@gmail.com>
References: <069f01cdfd2b$c5660130$50320390$@gmail.com>
	<CAE_Hg6aMRUYyrtvL3-Ki9fWd9FTbnUidZjnT-rPA7sk7eMKR4g@mail.gmail.com>
	<06b201cdfd3a$f7acf450$e706dcf0$@gmail.com>
	<CAE_Hg6aus1gjAGfB8seguqO+RM-3XVVtPi9DRaB3qBz+v+bfxg@mail.gmail.com>
	<06e201cdfd3d$41dedf50$c59c9df0$@gmail.com>
Message-ID: <20130128153306.31543.595608386.divmod.xquotient.19@localhost6.localdomain6>

On 09:52 am, sergun at gmail.com wrote:
>My target is just to deny request duplications.
>
>Reg. inlineCallbacks.. What do you think is it possible to implement
>inlineCallbacks generator in the way allows multiple yields? (but do 
>not
>modify Defferred)

No, this isn't possible.  Single-use is a fundamental aspect of 
Deferred.

Instead, you can make a second (and third, etc) Deferred that has the 
same result as the first.

Jean-Paul
>
>
>From: Laurens Van Houtven [mailto:_ at lvh.cc]
>Sent: Monday, January 28, 2013 1:43 PM
>To: sergun at gmail.com
>Subject: Re: [Twisted-Python] inlineCallbacks: multiple yielding same
>Defferred behaviour
>
>
>
>The short answer is that those models don't support chaining the way
>Deferreds do, IIUC.
>
>I think a very similar thing was a bonus question at the tutorial 
>Stephen
>Thorne and I gave at EuroPython last year. Do you want to cache results 
>as
>well, or only not make duplicate requests when one is in-flight?
>
>
>
>On Mon, Jan 28, 2013 at 10:36 AM, Sergey V. Gerasimov 
><sergun at gmail.com>
>wrote:
>
>Hi Laurens,
>
>
>
>Thanks for your reply!
>
>
>
>I need something like this.
>
>A server that processes requests and handles situation when there are 2
>requests with same key.
>
>
>
>class Server(object):
>
>                def __init__(self):
>
>                                self.requestsInProgress = {} # dict: key 
>->
>Deferred with result
>
>
>
>                @defer.inlineCallbacks
>
>                def request(self, key):
>
>                               in_progress = key in self.requests
>
>                               if in_progress:
>
>                                               d = 
>self.requestsInProgress
>[key]
>
>                                               result = yield d
>
>                               else:
>
>                                               d = process_request(key)
>
>                                               self.requests[key] = d
>
>                                               result = yield d
>
>                                               del 
>self.requestsInProgress
>[key]
>
>                               defer.returnValue(result)
>
>
>
>How can I implement the logic correctly?
>
>
>
>In my opinion it's very simple and clear concept to consider Deferred 
>just
>like deferred execution of some action. In this case you should be able 
>to
>get it's result (doing yield) many times (why not?).
>
>
>
>
>
>I have deal with Task-based programming and async functions (mechanism
>similar to Deferred and inlineCallbacks decorated functions in Twisted) 
>in
>Microsoft  .NET.
>
>MS people have implemented Task (analogue of Deferred) in the way I
>described.
>
>
>
>
>
>
>
>From: Laurens Van Houtven [mailto:_ at lvh.cc]
>Sent: Monday, January 28, 2013 12:47 PM
>To: sergun at gmail.com; Twisted general discussion
>Subject: Re: [Twisted-Python] inlineCallbacks: multiple yielding same
>Defferred behaviour
>
>
>
>I'm not entirely sure why you feel this is unintuitive or why you 
>should
>need a workaround; in any other case, deferreds work pretty much the 
>same
>way.
>
>When reading this code, the first question that pops up in my head is: 
>why
>are you doing this instead of just using the result that you already 
>have
>(and assigned to a name)? How did this  waiting-twice-on-one-deferred
>happen?
>
>
>
>On Mon, Jan 28, 2013 at 8:47 AM, Sergey V. Gerasimov <sergun at gmail.com>
>wrote:
>
>It's not intuitively clear why multiple yielding the same Defferred in
>function decorated with defer.inlineCallbacks get different results:
>
>
>
>@defer.inlineCallbacks
>
>def f():
>
>                d = defer.succeed(1)
>
>                result = yield d
>
>print result
>
>                result = yield d
>
>print result
>
>
>
>Output:
>
>1
>
>None
>
>
>
>Probably we SHOULD NOT think if "d" was or was not yielded before when 
>using
>inlineCallbacks..
>
>
>
>Are they some workarounds?
>
>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
>--
>
>cheers
>
>lvh
>
>
>
>
>--
>
>cheers
>
>lvh


From itamar at futurefoundries.com  Mon Jan 28 10:33:12 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Mon, 28 Jan 2013 10:33:12 -0500
Subject: [Twisted-Python] Twisted-related talks and tutorials at PyCon
In-Reply-To: <CAE_Hg6Yv-QJp+bfHjobmqkL4kzV8AJRsM8x4=4+uEc45Wzao=w@mail.gmail.com>
References: <CAOp9P3p92Kp1DndQqyrAgEBySis26E+5Wdh-KbDUbxajPKFEvA@mail.gmail.com>
	<CAE_Hg6Yv-QJp+bfHjobmqkL4kzV8AJRsM8x4=4+uEc45Wzao=w@mail.gmail.com>
Message-ID: <CAOp9P3oiR5UfjzS4_UYePpv5Tx-sSuZ9nkKB8KUimz32idksGA@mail.gmail.com>

On Mon, Jan 28, 2013 at 10:15 AM, Laurens Van Houtven <_ at lvh.cc> wrote:

> My crypto 101 talk is probably going to be pretty light on the twisted:
> right now there's nothing in it, I'm considering adding some, but I'm also
> strapped for time :(
>

I should clarify that some of these talks may not even mention Twisted, but
I mentioned them since either the speakers were Twisted developers and/or
they might be of interest to Twisted users.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130128/93868293/attachment.htm 

From glyph at twistedmatrix.com  Wed Jan 30 14:04:36 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 30 Jan 2013 11:04:36 -0800
Subject: [Twisted-Python] maintenance release - a security issue and a
	regression
Message-ID: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>

I think it might be time to have a maintenance release.  Two issues in particular stand out which might be suitable for inclusion in a 12.3.1:

<http://twistedmatrix.com/trac/ticket/6275> - This is a potential security issue which affects any twisted.web.template that uses the (recommended!) method of using a <t:attr> tag to render an attribute within a template.  This might even be suitable for maintenance releases of older versions, if anyone is using them.
<http://twistedmatrix.com/trac/ticket/6245> - This is a regression which affects anyone using twisted.names with 'unicode'-typed hostnames.  This used to work, and, some of our own examples as well as some in-the-wild applications - mostly those using XMPP - actually relied upon it.  IDNA hostnames never worked, but Python unicode-typed ASCII used to work and now it doesn't.

Of course, in order to have a maintenance release with these bug fixes, several things need to happen.

Someone needs to actually fix the issues. (I've written the code for #6275 but it is awaiting review; #6245 still needs to be fixed.)
Someone needs to back-port those fixes to a release branch, based on the 12.3.0 tag, and file tickets for those backports.
Someone needs to review the backports and get the committed to said branch.
Someone needs to volunteer to be the release manager for 12.3.0.

We apparently  don't have any official process documentation for doing patch releases, but most of what's in <http://twistedmatrix.com/trac/wiki/ReleaseProcess> should apply.

Any volunteers for parts of this process?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130130/cbf5d1a1/attachment.htm 

From exarkun at twistedmatrix.com  Wed Jan 30 15:07:42 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 30 Jan 2013 20:07:42 -0000
Subject: [Twisted-Python] maintenance release - a security issue and a
 regression
In-Reply-To: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
Message-ID: <20130130200742.4522.1950789235.divmod.xquotient.16@localhost6.localdomain6>

On 07:04 pm, glyph at twistedmatrix.com wrote:
>[snip]
>
>Of course, in order to have a maintenance release with these bug fixes, 
>several things need to happen.
>
>Someone needs to actually fix the issues. (I've written the code for 
>#6275 but it is awaiting review; #6245 still needs to be fixed.)

#6275 looks resolved to me.

I suggest considering http://twistedmatrix.com/trac/ticket/6259 as well.

Jean-Paul
>Someone needs to back-port those fixes to a release branch, based on 
>the 12.3.0 tag, and file tickets for those backports.
>Someone needs to review the backports and get the committed to said 
>branch.
>Someone needs to volunteer to be the release manager for 12.3.0.

Not 12.3.0 - 12.3.1.
>
>We apparently  don't have any official process documentation for doing 
>patch releases, but most of what's in 
><http://twistedmatrix.com/trac/wiki/ReleaseProcess> should apply.

The other output should be documentation for the process for such a 
release.

Jean-Paul


From cam.turn at gmail.com  Wed Jan 30 15:25:34 2013
From: cam.turn at gmail.com (Shell)
Date: Wed, 30 Jan 2013 20:25:34 -0000
Subject: [Twisted-Python] maintenance release - a security issue and a
	regression
In-Reply-To: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
Message-ID: <fMZzBlt5s8dGQsNb1ECeOKOZlVflbC03-w902UUDe1-AmLoHo@smtp.gmail.com>


I'd like to volunteer to be release manager for Twisted 12.3.1, and
help work on the other parts of the backporting/release process as I
can.

I found and reported bug #6275 while working on a Twisted-based
project, and Glyph subsequently asked on IRC whether I'd like to be
involved in the release.


Shell


Glyph wrote:





I think it might be time to have a maintenance release.  Two issues in
particular stand out which might be suitable for inclusion in a
12.3.1:


  * <[http://twistedmatrix.com/trac/ticket/6275:
  <http://twistedmatrix.com/trac/ticket/6275>]> - This is a potential
  security issue which affects any twisted.web.template that uses the
  (recommended!) method of using a <t:attr> tag to render an attribute
  within a template.  This might even be suitable for maintenance
  releases of older versions, if anyone is using them.

  * <[http://twistedmatrix.com/trac/ticket/6245:
  <http://twistedmatrix.com/trac/ticket/6245>]> - This is a regression
  which affects anyone using twisted.names with 'unicode'-typed
  hostnames.  This used to work, and, some of our own examples as well
  as some in-the-wild applications - mostly those using XMPP -
  actually relied upon it.  IDNA hostnames never worked, but Python
  unicode-typed ASCII used to work and now it doesn't.

Of course, in order to have a maintenance release with these bug
fixes, several things need to happen.



  1) Someone needs to actually fix the issues. (I've written the code
  for #6275 but it is awaiting review; #6245 still needs to be fixed.)

  2) Someone needs to back-port those fixes to a release branch, based
  on the 12.3.0 tag, and file tickets for those backports.

  3) Someone needs to review the backports and get the committed to
  said branch.

  4) Someone needs to volunteer to be the release manager for 12.3.0.

We apparently  don't have any official process documentation for doing
patch releases, but most of what's in
<[http://twistedmatrix.com/trac/wiki/ReleaseProcess:
<http://twistedmatrix.com/trac/wiki/ReleaseProcess>]> should apply.

Any volunteers for parts of this process?

-glyph

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130130/ac2defd6/attachment.htm 

From ralphm at ik.nu  Wed Jan 30 17:13:35 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Wed, 30 Jan 2013 23:13:35 +0100
Subject: [Twisted-Python] maintenance release - a security issue and a
 regression
In-Reply-To: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
Message-ID: <51099B0F.4010404@ik.nu>

I'll look at #6245 again tomorrow.

-- 
ralphm


From angelo.dellaera at gmail.com  Wed Jan 30 17:32:34 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Wed, 30 Jan 2013 23:32:34 +0100
Subject: [Twisted-Python] maintenance release - a security issue and a
 regression
In-Reply-To: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
Message-ID: <20130130233234.56c54ad2@saiph.darkstar.net>

On Wed, 30 Jan 2013 11:04:36 -0800
Glyph <glyph at twistedmatrix.com> wrote:

> Any volunteers for parts of this process?

I'm not familiar with Twisted patching process and for this reason I'm just attaching
a small patch here for #6245 because I'd like to discuss about the approach. If 
correct I will move on in the process (hopefully in the right way)

The patch simply tries to encode the name argument properly if unicode. This is
the same approach used by ralphm but applied to Name class initialization so it
should be really generic.

Just about a doubt about how to handle an exception potentially raised during the
name encoding. Any idea?

Ciao.

PS Attached a simple test code which forces the name to resolve to be unicode.
It fails against 12.3.0 while it is correclty executed after patching.

-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: gethostbyname.py
Type: text/x-python
Size: 569 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20130130/d9bd7167/attachment.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: patch.diff
Type: text/x-patch
Size: 642 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20130130/d9bd7167/attachment.bin 

From angelo.dellaera at gmail.com  Thu Jan 31 09:07:25 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Thu, 31 Jan 2013 15:07:25 +0100
Subject: [Twisted-Python] maintenance release - a security issue and a
 regression
In-Reply-To: <20130130233234.56c54ad2@saiph.darkstar.net>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
	<20130130233234.56c54ad2@saiph.darkstar.net>
Message-ID: <20130131150725.7db9cf7b@saiph.darkstar.net>

On Wed, 30 Jan 2013 23:32:34 +0100
Angelo Dell'Aera <angelo.dellaera at gmail.com> wrote:

> On Wed, 30 Jan 2013 11:04:36 -0800
> Glyph <glyph at twistedmatrix.com> wrote:
> 
> > Any volunteers for parts of this process?
> 
> I'm not familiar with Twisted patching process and for this reason
> I'm just attaching a small patch here for #6245 because I'd like to
> discuss about the approach. If correct I will move on in the process
> (hopefully in the right way)
> 
> The patch simply tries to encode the name argument properly if
> unicode. This is the same approach used by ralphm but applied to Name
> class initialization so it should be really generic.
> 
> Just about a doubt about how to handle an exception potentially
> raised during the name encoding. Any idea?
> 
> Ciao.
> 
> PS Attached a simple test code which forces the name to resolve to be
> unicode. It fails against 12.3.0 while it is correclty executed after
> patching.


I read documentation about Twisted testing and tested if the suggested patch 
introduces some regressions in the existing code

buffer at saiph ~/Twisted-12.3.0/twisted $ trial twisted.names
[..]
Ran 271 tests in 0.425s

PASSED (successes=271)

which seems like it's not happening.

Obviously this is not exhaustive because seems like there are no specific tests 
for that code path (name is always passed as byte) but I can try writing some 
additional ones if needed. 

Ciao,

-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org


From mgwilliams at gmail.com  Thu Jan 31 10:43:58 2013
From: mgwilliams at gmail.com (Matthew Williams)
Date: Thu, 31 Jan 2013 10:43:58 -0500
Subject: [Twisted-Python] txjsonrpc
Message-ID: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>

I have a couple questions regarding txjsonrpc (
https://github.com/oubiwann/txjsonrpc/) in connection with the recent
addition of version 2.0 support.

* How complete is the version 2.0 support? I had actually tried some years
ago to add v2.0 support, but gave up due to some issues I no longer fully
recall. Are there any known issues with the present implementation?

* I noticed that all results are wrapped in an array (see netstring version
at
https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64,
but the web implementation has the same code.). This seems odd, as a
jsonrpc result can be any valid json value, including a string, integer,
array, or dict. The result is that on the client end, what I return from
the function call as {"a": "b"} is received as [{"a": "b"}]. Is there some
reason for this? Would a patch altering this behavior (perhaps optionally)
be accepted?

Thanks in advance for any help on these two questions.

Matthew Williams
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130131/05b6e18e/attachment-0001.htm 

From _ at lvh.cc  Thu Jan 31 13:45:05 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 31 Jan 2013 19:45:05 +0100
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
References: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
Message-ID: <CAE_Hg6b2u4GcB3ziHwOo4ex8BZgy=xBJmS-U=rd8FDduFF9xqw@mail.gmail.com>

On Thu, Jan 31, 2013 at 4:43 PM, Matthew Williams <mgwilliams at gmail.com>wrote:

> I have a couple questions regarding txjsonrpc (
> https://github.com/oubiwann/txjsonrpc/) in connection with the recent
> addition of version 2.0 support.
>
> * How complete is the version 2.0 support? I had actually tried some years
> ago to add v2.0 support, but gave up due to some issues I no longer fully
> recall. Are there any known issues with the present implementation?
>

Not that I know of.


> * I noticed that all results are wrapped in an array (see netstring
> version at
> https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64,
> but the web implementation has the same code.). This seems odd, as a
> jsonrpc result can be any valid json value, including a string, integer,
> array, or dict. The result is that on the client end, what I return from
> the function call as {"a": "b"} is received as [{"a": "b"}]. Is there some
> reason for this? Would a patch altering this behavior (perhaps optionally)
> be accepted?
>

Huh, that's weird. I knew the params had to be an array in some version of
JSONRPC (although this limitation appears to have been lifted right now). I
can't find anything like that in the spec, so I do wonder why that was ever
added :)


> Thanks in advance for any help on these two questions.
>
> Matthew Williams
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130131/df5c45ee/attachment.htm 

From mgwilliams at gmail.com  Thu Jan 31 14:04:46 2013
From: mgwilliams at gmail.com (Matthew Williams)
Date: Thu, 31 Jan 2013 14:04:46 -0500
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CAE_Hg6b2u4GcB3ziHwOo4ex8BZgy=xBJmS-U=rd8FDduFF9xqw@mail.gmail.com>
References: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
	<CAE_Hg6b2u4GcB3ziHwOo4ex8BZgy=xBJmS-U=rd8FDduFF9xqw@mail.gmail.com>
Message-ID: <CAD6uV8Anc9NmdjwAGgvxL2hd-xKJenC3B_yaorXu4ke3e5uFQg@mail.gmail.com>

In that case, should there be a patch that skips that for v2? Or perhaps
just raise an error for versions < v2 if the function does not return a
list? Of course, this wouldn't be backwards compatible which might be
problematic.

On Thu, Jan 31, 2013 at 1:45 PM, Laurens Van Houtven <_ at lvh.cc> wrote:

> On Thu, Jan 31, 2013 at 4:43 PM, Matthew Williams <mgwilliams at gmail.com>wrote:
>
>> I have a couple questions regarding txjsonrpc (
>> https://github.com/oubiwann/txjsonrpc/) in connection with the recent
>> addition of version 2.0 support.
>>
>> * How complete is the version 2.0 support? I had actually tried some
>> years ago to add v2.0 support, but gave up due to some issues I no longer
>> fully recall. Are there any known issues with the present implementation?
>>
>
> Not that I know of.
>
>
>> * I noticed that all results are wrapped in an array (see netstring
>> version at
>> https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64,
>> but the web implementation has the same code.). This seems odd, as a
>> jsonrpc result can be any valid json value, including a string, integer,
>> array, or dict. The result is that on the client end, what I return from
>> the function call as {"a": "b"} is received as [{"a": "b"}]. Is there some
>> reason for this? Would a patch altering this behavior (perhaps optionally)
>> be accepted?
>>
>
> Huh, that's weird. I knew the params had to be an array in some version of
> JSONRPC (although this limitation appears to have been lifted right now). I
> can't find anything like that in the spec, so I do wonder why that was ever
> added :)
>
>
>> Thanks in advance for any help on these two questions.
>>
>> Matthew Williams
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> cheers
> lvh
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130131/176acfe5/attachment.htm 

From mgwilliams at gmail.com  Thu Jan 31 14:43:23 2013
From: mgwilliams at gmail.com (Matthew Williams)
Date: Thu, 31 Jan 2013 14:43:23 -0500
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CAD6uV8Anc9NmdjwAGgvxL2hd-xKJenC3B_yaorXu4ke3e5uFQg@mail.gmail.com>
References: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
	<CAE_Hg6b2u4GcB3ziHwOo4ex8BZgy=xBJmS-U=rd8FDduFF9xqw@mail.gmail.com>
	<CAD6uV8Anc9NmdjwAGgvxL2hd-xKJenC3B_yaorXu4ke3e5uFQg@mail.gmail.com>
Message-ID: <CAD6uV8BoOfXH01sagyzKTYiGm3ZekDeGM-bNg_sXtLjkra6YwA@mail.gmail.com>

It appears that even 1.0 spec (http://json-rpc.org/wiki/specification)
allows for non-array result values. Maybe there was a confusion with the
fact that in v1 only a list is valid for the request parameters.

On Thu, Jan 31, 2013 at 2:04 PM, Matthew Williams <mgwilliams at gmail.com>wrote:

> In that case, should there be a patch that skips that for v2? Or perhaps
> just raise an error for versions < v2 if the function does not return a
> list? Of course, this wouldn't be backwards compatible which might be
> problematic.
>
>
> On Thu, Jan 31, 2013 at 1:45 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
>
>> On Thu, Jan 31, 2013 at 4:43 PM, Matthew Williams <mgwilliams at gmail.com>wrote:
>>
>>> I have a couple questions regarding txjsonrpc (
>>> https://github.com/oubiwann/txjsonrpc/) in connection with the recent
>>> addition of version 2.0 support.
>>>
>>> * How complete is the version 2.0 support? I had actually tried some
>>> years ago to add v2.0 support, but gave up due to some issues I no longer
>>> fully recall. Are there any known issues with the present implementation?
>>>
>>
>> Not that I know of.
>>
>>
>>> * I noticed that all results are wrapped in an array (see netstring
>>> version at
>>> https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64,
>>> but the web implementation has the same code.). This seems odd, as a
>>> jsonrpc result can be any valid json value, including a string, integer,
>>> array, or dict. The result is that on the client end, what I return from
>>> the function call as {"a": "b"} is received as [{"a": "b"}]. Is there some
>>> reason for this? Would a patch altering this behavior (perhaps optionally)
>>> be accepted?
>>>
>>
>> Huh, that's weird. I knew the params had to be an array in some version
>> of JSONRPC (although this limitation appears to have been lifted right
>> now). I can't find anything like that in the spec, so I do wonder why that
>> was ever added :)
>>
>>
>>> Thanks in advance for any help on these two questions.
>>>
>>> Matthew Williams
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>>
>> --
>> cheers
>> lvh
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20130131/bcd92920/attachment.htm 

From kevin.horn at gmail.com  Wed Jan  2 10:19:20 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 2 Jan 2013 11:19:20 -0600
Subject: [Twisted-Python] Need help using FTPClient
In-Reply-To: <CANtgJyGtd8bQQeJXkwHKU0tSwbsNRyuppZTZkQK1XYCbRmjDEw@mail.gmail.com>
References: <CANtgJyHV32YBxnBBFxoN_KF3yKbe=X_ohWtJZ2MhxsexVvd9tg@mail.gmail.com>
	<CED11AA4-9786-4348-B2B2-DB7A7D7030B1@twistedmatrix.com>
	<CAOp9P3qipU1mZujSixO3TC=64yiShG9MzXJN6d_dNRex9f7_eg@mail.gmail.com>
	<CANtgJyGtd8bQQeJXkwHKU0tSwbsNRyuppZTZkQK1XYCbRmjDEw@mail.gmail.com>
Message-ID: <CA+U=zK2oiYpLFu3zk1jHFp9HyU3D+SK0Kn9+R4SvNhBFK1DJnw@mail.gmail.com>

On Fri, Dec 28, 2012 at 11:21 AM, Master Corp <corpmasters at gmail.com> wrote:

> OK, thank you for your help
>
> 2012/12/28 Itamar Turner-Trauring <itamar at futurefoundries.com>
>
>>
>>
>> On Thu, Dec 27, 2012 at 11:48 PM, Glyph <glyph at twistedmatrix.com> wrote:
>>
>>>
>>>
>>> Is there any reason you want to use Twisted to do your SOCKS proxying?
>>>  Programs like 'socksify' typically do what you need in a general way that
>>> does not require any awareness from your application.  (Twisted does have a
>>> SOCKS implementation, but it's rarely worth the trouble to plug it in.)
>>>
>>
>> Twisted does not have a SOCKS client, actually, only a server AFAIK.
>>
>> IIRC there's a 3rd party client library, but on github so therefore
>> impossible to find.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
There is a SOCKS5 client in a Twisted ticket, but it hasn't been merged
into trunk yet (for lack of tests IIRC).  I don't know whether it still
works, but it did at one time.

Here's the ticket:
http://twistedmatrix.com/trac/ticket/1330

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130102/4735a081/attachment-0001.html>

From f at rtfs.org  Sat Jan  5 13:22:49 2013
From: f at rtfs.org (Fabian Sturm)
Date: Sat, 05 Jan 2013 21:22:49 +0100
Subject: [Twisted-Python] Using telnet or linereceiver protocol over ssh
In-Reply-To: <0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
Message-ID: <1357417369.2969.11.camel@krypton>

Hi Glyph

Am Montag, den 31.12.2012, 00:54 -0800 schrieb Glyph:

> Have you looked at HistoricRecvLine <https://twistedmatrix.com/documents/current/api/twisted.conch.recvline.HistoricRecvLine.html>?

No I didn't find that! This is exaclty what I was looking for :-) I knew
there had to be something better then writing this myself.

I just had some trouble wiring it up, but it now finally works. For
reference, what I did was to add this code to the openSSH method:

    def openShell(self, protocol):
        serverProtocol = ServerProtocol(MyRecvLine, self)
        serverProtocol.makeConnection(protocol)
        protocol.makeConnection(session.wrapProtocol(serverProtocol))

And MyRecvLine is a subclass of HistoricRecvLine.

> It's not the easiest class to use, but it should do basically what you need, with various line-editing niceties.

> This is also an area that could really benefit from some more maintenance, both in the code and the documentation; writing a command-line interface to Twisted should be a lot easier and more obvious.  So if you'd like to contribute to Twisted this is a good place to start :).

Yeah definitively, documentation is sorely needed. For this I already
bought the upcoming Twisted book. I hope that this will give me some
more insight why I have to do some of the things the way they are.
Unfortunately I am not sure if I am the right one for documentation
since I still struggle with some of the concepts. But I would like to
publish this combined sftp and command server as a reference.

Sincerely,
Fabian




From exarkun at twistedmatrix.com  Sat Jan  5 22:05:24 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Jan 2013 05:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1357448724.95.656937387@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130106/50984303/attachment-0001.html>

From glyph at twistedmatrix.com  Sun Jan  6 19:23:33 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 6 Jan 2013 18:23:33 -0800
Subject: [Twisted-Python] Using telnet or linereceiver protocol over ssh
In-Reply-To: <1357417369.2969.11.camel@krypton>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
	<1357417369.2969.11.camel@krypton>
Message-ID: <DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>


On Jan 5, 2013, at 12:22 PM, Fabian Sturm <f at rtfs.org> wrote:

> Unfortunately I am not sure if I am the right one for documentation
> since I still struggle with some of the concepts. But I would like to
> publish this combined sftp and command server as a reference.

In a way, it is best to work on documentation when you don't yet fully understand, because if you fully understand you yourself don't need the documentation any more :).

Obviously you don't want to write documentation that is incorrect or doesn't make sense, but the code-review process should prevent that from being published.  Plus, if you are going to work on documenting something, you can always ask for help either on this mailing list, or on the IRC channel (#twisted or #twisted-dev on Freenode depending on whether your questions are about help with Twisted or help with contributing to Twisted itself).

Glad I could point you in the right direction, and hope to hear more from you in the future,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130106/ba9aaf06/attachment.html>

From exarkun at twistedmatrix.com  Sun Jan  6 20:57:15 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jan 2013 03:57:15 -0000
Subject: [Twisted-Python] Using telnet or linereceiver protocol over ssh
In-Reply-To: <DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
	<1357417369.2969.11.camel@krypton>
	<DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>
Message-ID: <20130107035715.4649.84365378.divmod.xquotient.147@localhost6.localdomain6>

On 02:23 am, glyph at twistedmatrix.com wrote:
>
>On Jan 5, 2013, at 12:22 PM, Fabian Sturm <f at rtfs.org> wrote:
>>Unfortunately I am not sure if I am the right one for documentation
>>since I still struggle with some of the concepts. But I would like to
>>publish this combined sftp and command server as a reference.
>
>In a way, it is best to work on documentation when you don't yet fully 
>understand, because if you fully understand you yourself don't need the 
>documentation any more :).

As I may have mentioned before, I strongly disagree with this.

It is much easier to (*correctly*) explain something you already 
understand, all other things being equal.

The factor that seems to lead people to suggest that people who don't 
understand a thing write documentation for that thing is that once you 
understand it, you don't *want* the documentation *for yourself* 
anymore, which removes one possible motivation for creating it.

But no matter how much we might want to exploit this motivation in 
people, it doesn't mean that the result will be good documentation.

Jean-Paul



From radix at twistedmatrix.com  Sun Jan  6 21:44:46 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Jan 2013 22:44:46 -0600
Subject: [Twisted-Python] Using telnet or linereceiver protocol over ssh
In-Reply-To: <20130107035715.4649.84365378.divmod.xquotient.147@localhost6.localdomain6>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
	<1357417369.2969.11.camel@krypton>
	<DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>
	<20130107035715.4649.84365378.divmod.xquotient.147@localhost6.localdomain6>
Message-ID: <CAPkRfUTWV3deDRYNiG895apGEoQz063TqM63ZykTFdjeZHGnqA@mail.gmail.com>

On Sun, Jan 6, 2013 at 9:57 PM, <exarkun at twistedmatrix.com> wrote:

> On 02:23 am, glyph at twistedmatrix.com wrote:
>
> >In a way, it is best to work on documentation when you don't yet fully
> >understand, because if you fully understand you yourself don't need the
> >documentation any more :).
>
> As I may have mentioned before, I strongly disagree with this.
>
> It is much easier to (*correctly*) explain something you already
> understand, all other things being equal.
>
> The factor that seems to lead people to suggest that people who don't
> understand a thing write documentation for that thing is that once you
> understand it, you don't *want* the documentation *for yourself*
> anymore, which removes one possible motivation for creating it.
>
> But no matter how much we might want to exploit this motivation in
> people, it doesn't mean that the result will be good documentation.
>
> Jean-Paul
>
>
I agree with Jean-Paul. Writing documentation in ignorance (no offense
intended to any party) is not a good way to write good documentation. I
think we've seen a number of attempts at this that have resulted in pretty
shoddy documentation. I do think, however, that *right after you learn*
something you are in a good position to benefit the documentation of the
project.

The argument has also been made (not in this thread; I mean in general)
that the process of learning something allows one to structure
documentation about it in a way that applies well to another person
learning something, but I think that concept has flaws as well. I think
that a common result of such attempts is that someone will hit a common
blocker in understanding their subject and then go off on a number of
misguided tangents, and then when they finally come to understand the
subject their sudden insight becomes associated in their mind with the
resolution of the misguided attempts.

But that's all just conjecture and isn't really core to my point.

I think despite all these problems with writing as one learns, it's
valuable to make an attempt at writing some documentation as one learns
something, as long as there is a sincere modesty on one's part and a
willingness to let their documentation be seriously overhauled or at least
critiqued by the real experts on the subject (assuming those experts can
muster the time to do the critiquing or overhauling).

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130106/4156c055/attachment.html>

From glyph at twistedmatrix.com  Sun Jan  6 22:47:21 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 6 Jan 2013 21:47:21 -0800
Subject: [Twisted-Python] Documentation by newcomers (was Re: Using telnet
	or linereceiver protocol over ssh)
In-Reply-To: <CAPkRfUTWV3deDRYNiG895apGEoQz063TqM63ZykTFdjeZHGnqA@mail.gmail.com>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
	<1357417369.2969.11.camel@krypton>
	<DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>
	<20130107035715.4649.84365378.divmod.xquotient.147@localhost6.localdomain6>
	<CAPkRfUTWV3deDRYNiG895apGEoQz063TqM63ZykTFdjeZHGnqA@mail.gmail.com>
Message-ID: <FE02A5AF-4BE9-465B-8E4D-BF95C2021451@twistedmatrix.com>


On Jan 6, 2013, at 8:44 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On Sun, Jan 6, 2013 at 9:57 PM, <exarkun at twistedmatrix.com> wrote:
> On 02:23 am, glyph at twistedmatrix.com wrote:
> 
> >In a way, it is best to work on documentation when you don't yet fully
> >understand, because if you fully understand you yourself don't need the
> >documentation any more :).
> 
> As I may have mentioned before, I strongly disagree with this.
> 
> It is much easier to (*correctly*) explain something you already
> understand, all other things being equal.
> 
> The factor that seems to lead people to suggest that people who don't
> understand a thing write documentation for that thing is that once you
> understand it, you don't *want* the documentation *for yourself*
> anymore, which removes one possible motivation for creating it.
> 
> But no matter how much we might want to exploit this motivation in
> people, it doesn't mean that the result will be good documentation.
> 
> Jean-Paul
> 
> 
> I agree with Jean-Paul. Writing documentation in ignorance (no offense intended to any party) is not a good way to write good documentation. I think we've seen a number of attempts at this that have resulted in pretty shoddy documentation. I do think, however, that *right after you learn* something you are in a good position to benefit the documentation of the project.
> 
> The argument has also been made (not in this thread; I mean in general) that the process of learning something allows one to structure documentation about it in a way that applies well to another person learning something, but I think that concept has flaws as well. I think that a common result of such attempts is that someone will hit a common blocker in understanding their subject and then go off on a number of misguided tangents, and then when they finally come to understand the subject their sudden insight becomes associated in their mind with the resolution of the misguided attempts.
> 
> But that's all just conjecture and isn't really core to my point.
> 
> I think despite all these problems with writing as one learns, it's valuable to make an attempt at writing some documentation as one learns something, as long as there is a sincere modesty on one's part and a willingness to let their documentation be seriously overhauled or at least critiqued by the real experts on the subject (assuming those experts can muster the time to do the critiquing or overhauling).

I think I agree with all of that, Chris, although obviously my opinions differ from Jean-Paul's on this topic :).

To be fair I believe that it's not really feasible for someone new to the topic to write anything useful entirely, or even mostly, by themselves.  But if they write something basically sensible but with errors, it's easier for the experts to correct those flaws than to write something original.  (Assuming, of course, that the author has put enough effort into their writing that it basically hangs together and makes sense, even if it's not entirely correct or perfectly structured.)

The value of just prompting the experts to do something cannot be underestimated :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130106/e21c7eaa/attachment.html>

From exarkun at twistedmatrix.com  Mon Jan  7 08:41:40 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jan 2013 15:41:40 -0000
Subject: [Twisted-Python] Documentation by newcomers
In-Reply-To: <FE02A5AF-4BE9-465B-8E4D-BF95C2021451@twistedmatrix.com>
References: <1356872971.4376.8.camel@krypton>
	<0F338E23-CE9C-4CC8-9ED5-784545605996@twistedmatrix.com>
	<1357417369.2969.11.camel@krypton>
	<DBD15A19-EC5B-4E97-BD3F-C1F71150CE6F@twistedmatrix.com>
	<20130107035715.4649.84365378.divmod.xquotient.147@localhost6.localdomain6>
	<CAPkRfUTWV3deDRYNiG895apGEoQz063TqM63ZykTFdjeZHGnqA@mail.gmail.com>
	<FE02A5AF-4BE9-465B-8E4D-BF95C2021451@twistedmatrix.com>
Message-ID: <20130107154140.4649.2093260712.divmod.xquotient.162@localhost6.localdomain6>

On 05:47 am, glyph at twistedmatrix.com wrote:
>
>To be fair I believe that it's not really feasible for someone new to 
>the topic to write anything useful entirely, or even mostly, by 
>themselves.  But if they write something basically sensible but with 
>errors, it's easier for the experts to correct those flaws than to 
>write something original.  (Assuming, of course, that the author has 
>put enough effort into their writing that it basically hangs together 
>and makes sense, even if it's not entirely correct or perfectly 
>structured.)

"Easier" is in the eye of the beholder.
>The value of just prompting the experts to do something cannot be 
>underestimated :).

Yes, so become a 2013 Twisted sponsor today!

   http://twistedmatrix.com/trac/wiki/TwistedSponsors

Jean-Paul



From himself at vye.me  Tue Jan  8 17:11:27 2013
From: himself at vye.me (Vye Wilson)
Date: Tue, 8 Jan 2013 16:11:27 -0800
Subject: [Twisted-Python] What is The Correct Way to Close a Twisted Conch
	SSH Connection?
Message-ID: <CAGT69bPJqTiVtkOECrpEb68z=LwCsSeRcVpcYuibYVf0=SpvwA@mail.gmail.com>

Hi all,

I've got an application that moves files around between hosts and SFTP is
one of the protocols it needs to support. I'm currently using Twisted Conch
for the SFTP implementation but have come across a problem where I'm not
able to gracefully close SSH connections.

I am new to Twisted so I don't feel confident that I'm going about this the
correct way. I've asked in #twisted, SO, and exhausted as many tutorials as
I could find, but I still haven't been able to find the correct way to
close SSH connections.

If someone could take a peak at my SO post and point me in the right
direction I would greatly appreciate it.

http://stackoverflow.com/questions/13920962/what-is-the-correct-way-to-close-a-twisted-conch-ssh-connection

I'm using Twisted 12.3.0.

Thanks a ton!

--Vye
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130108/777222f6/attachment.html>

From peter.westlake at pobox.com  Wed Jan  9 05:49:05 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 09 Jan 2013 12:49:05 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
Message-ID: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>

http://twistedmatrix.com/documents/current/core/howto/cred.html says
that the avatarId parameter to IRealm.requestAvatar must be a string,
not even a Unicode string. I'm using LDAP for authentication, and the
checker retrieves the full LDAP entry for the user as a side-effect of
authentication. Until I read that doc I was happily passing back the
tuple of LDAP details as an avatarId, and it all works perfectly well.
Is it really wrong, and if so, how will it fail? And what should I do
instead to pass back the details?

Peter.




From wulczer at wulczer.org  Wed Jan  9 06:04:40 2013
From: wulczer at wulczer.org (=?UTF-8?B?SmFuIFVyYmHFhHNraQ==?=)
Date: Wed, 09 Jan 2013 14:04:40 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
Message-ID: <50ED6AE8.5070200@wulczer.org>

On 09/01/13 13:49, Peter Westlake wrote:
> http://twistedmatrix.com/documents/current/core/howto/cred.html says
> that the avatarId parameter to IRealm.requestAvatar must be a string,
> not even a Unicode string. I'm using LDAP for authentication, and the
> checker retrieves the full LDAP entry for the user as a side-effect of
> authentication.

I remember discussing this on IRC with someone not long ago and he 
pointed me to this thread:

http://twistedmatrix.com/pipermail/twisted-python/2010-September/022826.html

I have faced a similar problem myself and after reading the code I've 
resolved to wilfully disregarding the documentation and passing tuples 
around, accepting that if it breaks, I get to keep both pieces.

Cheers,
Jan



From adi at roiban.ro  Wed Jan  9 07:40:26 2013
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 9 Jan 2013 16:40:26 +0200
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <50ED6AE8.5070200@wulczer.org>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
Message-ID: <CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>

On 9 January 2013 15:04, Jan Urbański <wulczer at wulczer.org> wrote:
> On 09/01/13 13:49, Peter Westlake wrote:
>> http://twistedmatrix.com/documents/current/core/howto/cred.html says
>> that the avatarId parameter to IRealm.requestAvatar must be a string,
>> not even a Unicode string. I'm using LDAP for authentication, and the
>> checker retrieves the full LDAP entry for the user as a side-effect of
>> authentication.
>
> I remember discussing this on IRC with someone not long ago and he
> pointed me to this thread:
>
> http://twistedmatrix.com/pipermail/twisted-python/2010-September/022826.html
>
> I have faced a similar problem myself and after reading the code I've
> resolved to wilfully disregarding the documentation and passing tuples
> around, accepting that if it breaks, I get to keep both pieces.

I am not an expert in Twisted, but from my understanding, the "string"
requirement is there to provide a plugable interface. So that you can
have generic credentials checkers, working with generic realms.
Having simple "strings" could also help with AvatarId serialization,
in case you have the CredentialsChecker on one computer and the you
will pass them over network/socket to a remote Realm.

I have also asked over IRC and I got the good to go answer for using
anything as AvatarID.

As long as you are only using your custom credentials checkers and
your custom realm, everything should be ok.

I am using Objects as AvatarID without any problems.

Cheers,
-- 
Adi Roiban



From ralphm at ik.nu  Wed Jan  9 08:43:45 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Wed, 09 Jan 2013 16:43:45 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
Message-ID: <50ED9031.7010603@ik.nu>

On 2013-01-09 15:40, Adi Roiban wrote:
> On 9 January 2013 15:04, Jan Urbański <wulczer at wulczer.org> wrote:
>> On 09/01/13 13:49, Peter Westlake wrote:
>>> http://twistedmatrix.com/documents/current/core/howto/cred.html says
>>> that the avatarId parameter to IRealm.requestAvatar must be a string,
>>> not even a Unicode string. I'm using LDAP for authentication, and the
>>> checker retrieves the full LDAP entry for the user as a side-effect of
>>> authentication.
>>
>> I remember discussing this on IRC with someone not long ago and he
>> pointed me to this thread:
>>
>> http://twistedmatrix.com/pipermail/twisted-python/2010-September/022826.html
>>
>> I have faced a similar problem myself and after reading the code I've
>> resolved to wilfully disregarding the documentation and passing tuples
>> around, accepting that if it breaks, I get to keep both pieces.
>
> I am not an expert in Twisted, but from my understanding, the "string"
> requirement is there to provide a plugable interface. So that you can
> have generic credentials checkers, working with generic realms.
> Having simple "strings" could also help with AvatarId serialization,
> in case you have the CredentialsChecker on one computer and the you
> will pass them over network/socket to a remote Realm.
>
> I have also asked over IRC and I got the good to go answer for using
> anything as AvatarID.
>
> As long as you are only using your custom credentials checkers and
> your custom realm, everything should be ok.
>
> I am using Objects as AvatarID without any problems.

I want to add here that the special avatarID for anonymous 
authenticationm, twisted.cred.checkers.ANONYMOUS, is defined as the 
empty tuple.

-- 
ralphm



From peter.westlake at pobox.com  Wed Jan  9 10:26:51 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 09 Jan 2013 17:26:51 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
Message-ID: <1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>

On Wed, Jan 9, 2013, at 14:40, Adi Roiban wrote:
> On 9 January 2013 15:04, Jan Urbański <wulczer at wulczer.org> wrote:
...
> > I have faced a similar problem myself and after reading the code I've
> > resolved to wilfully disregarding the documentation and passing tuples
> > around, accepting that if it breaks, I get to keep both pieces.
> 
> I am not an expert in Twisted, but from my understanding, the "string"
> requirement is there to provide a plugable interface. So that you can
> have generic credentials checkers, working with generic realms.
> Having simple "strings" could also help with AvatarId serialization,
> in case you have the CredentialsChecker on one computer and the you
> will pass them over network/socket to a remote Realm.

Those are both good points! I'll leave it this way until there's
a more official way of doing it.

> I have also asked over IRC and I got the good to go answer for using
> anything as AvatarID.
> 
> As long as you are only using your custom credentials checkers and
> your custom realm, everything should be ok.
> 
> I am using Objects as AvatarID without any problems.

Thanks to all who replied.

Peter.
 
> Cheers,
> -- 
> Adi Roiban
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Wed Jan  9 11:02:53 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 9 Jan 2013 10:02:53 -0800
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
Message-ID: <6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>

On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

>> I am not an expert in Twisted, but from my understanding, the "string"
>> requirement is there to provide a plugable interface. So that you can
>> have generic credentials checkers, working with generic realms.
>> Having simple "strings" could also help with AvatarId serialization,
>> in case you have the CredentialsChecker on one computer and the you
>> will pass them over network/socket to a remote Realm.
> 
> Those are both good points! I'll leave it this way until there's
> a more official way of doing it.

I hope it's clear that just hard-coding your avatars and realms to work only with each other is a sub-optimal solution :).

The architecture of cred is supposed to be that you can plug realms and checkers together so that a change to your authentication backend doesn't completely change your application.  Of course, that architecture is flawed in the sense that a string is a bit too narrow of a communication channel to get information about the authenticated user from one to the other, especially in cases where the application needs information from a directory service to function.

If you're interested in an improved, official way to deal with this use-case, the best way to do that would be to get involved and actively try to specify what you need.  I've got similar use-cases at work, as you can see here: <http://trac.calendarserver.org/browser/CalendarServer/trunk/twistedcaldav/directory/idirectory.py> so I'd be happy to talk to you about some ideas.

The best way to predict the future is to invent it. :)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130109/dae87c53/attachment.html>

From hs at ox.cx  Wed Jan  9 11:04:05 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Wed, 9 Jan 2013 19:04:05 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <50ED6AE8.5070200@wulczer.org>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
Message-ID: <27644255-AA4E-4741-BAAB-FA625498ED0A@ox.cx>


Am 09.01.2013 um 14:04 schrieb Jan Urbański <wulczer at wulczer.org>:

>> http://twistedmatrix.com/documents/current/core/howto/cred.html says
>> that the avatarId parameter to IRealm.requestAvatar must be a string,
>> not even a Unicode string. I'm using LDAP for authentication, and the
>> checker retrieves the full LDAP entry for the user as a side-effect of
>> authentication.
> I remember discussing this on IRC with someone

;)

> not long ago and he 
> pointed me to this thread:
> 
> http://twistedmatrix.com/pipermail/twisted-python/2010-September/022826.html
> 
> I have faced a similar problem myself and after reading the code I've 
> resolved to wilfully disregarding the documentation and passing tuples 
> around, accepting that if it breaks, I get to keep both pieces.

Since my final approach wasn’t mentioned yet: I found it semantically weird to pass the full data in a variable called “avatarId”, so I went with a dict as a cache that both the checker and the realm get passed in on construction. Not pretty but in my eyes still prettier. :)


From rodrigc at crodrigues.org  Wed Jan  9 11:19:43 2013
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 9 Jan 2013 10:19:43 -0800
Subject: [Twisted-Python] How to tell when SSH command has finished in Conch?
Message-ID: <CAG=rPVfvBKV_BiEJcF6+aA0V+gHqNJvvPpA_nGh63DSgx2JYrg@mail.gmail.com>

Hi,

I have a very similar question to the one that Vye Wilson
recently asked, "Subject: What is The Correct Way to Close a Twisted Conch
SSH Connection?"

I am using Twisted Conch to write a program that
ssh's into multiple machines and executes a single command.

I am basically trying to do the equivalent of:

for host in host1 host2 host3
do
     ssh  user at host "cat /etc/hosts"
done


To start things off, I took
http://twistedmatrix.com/documents/current/conch/examples/sshsimpleclient.py
and started modifying it.  Here is the code which I have:

http://pastebin.com/RXhjUcrS

The problem is, I can't figure out how to tell when a command has
completed, so that I can call reactor.stop().

Not in the code example I posted above, I tried to use a DeferredList by
following the example code in this blog
post:

http://technicae.cogitat.io/2008/06/async-batching-with-twisted-walkthrough.html

but I ran into the same problem where I couldn't figure out how
to tell when my command over SSH had terminated.

As a kluge, I called reactor.callLater() with a timeout of
20 seconds, and then called reactor.stop().

Any ideas as to what I am doing wrong?
Where in the Conch framework can I tell when a command
over SSH has finished?

Thanks.

--
Craig Rodrigues
rodrigc at crodrigues.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130109/cc6061ec/attachment.html>

From exarkun at twistedmatrix.com  Wed Jan  9 11:46:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 09 Jan 2013 18:46:25 -0000
Subject: [Twisted-Python] How to tell when SSH command has finished in
 Conch?
In-Reply-To: <CAG=rPVfvBKV_BiEJcF6+aA0V+gHqNJvvPpA_nGh63DSgx2JYrg@mail.gmail.com>
References: <CAG=rPVfvBKV_BiEJcF6+aA0V+gHqNJvvPpA_nGh63DSgx2JYrg@mail.gmail.com>
Message-ID: <20130109184625.8691.1493248300.divmod.xquotient.20@top>

On 06:19 pm, rodrigc at crodrigues.org wrote:
>Hi,
>
>I have a very similar question to the one that Vye Wilson
>recently asked, "Subject: What is The Correct Way to Close a Twisted 
>Conch
>SSH Connection?"
>
>I am using Twisted Conch to write a program that
>ssh's into multiple machines and executes a single command.
>
>I am basically trying to do the equivalent of:
>
>for host in host1 host2 host3
>do
>     ssh  user at host "cat /etc/hosts"
>done
>
>
>To start things off, I took
>http://twistedmatrix.com/documents/current/conch/examples/sshsimpleclient.py
>and started modifying it.  Here is the code which I have:
>
>http://pastebin.com/RXhjUcrS
>
>The problem is, I can't figure out how to tell when a command has
>completed, so that I can call reactor.stop().
>
>Not in the code example I posted above, I tried to use a DeferredList 
>by
>following the example code in this blog
>post:
>
>http://technicae.cogitat.io/2008/06/async-batching-with-twisted- 
>walkthrough.html
>
>but I ran into the same problem where I couldn't figure out how
>to tell when my command over SSH had terminated.
>
>As a kluge, I called reactor.callLater() with a timeout of
>20 seconds, and then called reactor.stop().
>
>Any ideas as to what I am doing wrong?
>Where in the Conch framework can I tell when a command
>over SSH has finished?

You can't tell when a command has finished.  Commands are run in the 
context of a channel.  You can tell when a channel has closed because 
its `closed` method is called.

You might find this spike of an SSH command endpoint interesting:

    http://twistedmatrix.com/~exarkun/sshendpoint.py

Also note this is something that I would like to be better supported in 
Conch:

    http://twistedmatrix.com/trac/ticket/4698

Jean-Paul



From abhishekbhat at hotmail.com  Wed Jan  9 13:06:48 2013
From: abhishekbhat at hotmail.com (ABHISHEK BHAT)
Date: Wed, 9 Jan 2013 13:06:48 -0700
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3.
Message-ID: <BLU002-W25E0BA2254D9D770B08198C72B0@phx.gbl>

Hi
I am trying to use Twisted and PB but running into the below error in the zope.interface module.

I am running Python 3.3 and zope.interface version 4.0.3. I am running this on a RedHat system.

Does anybody know how to get around this problem?





bash-3.2$ python pb_client.py


Traceback (most recent call last):

  File
"pb_client.py", line 2, in <module>

    from
twisted.spread import pb


  File
"/home/abhat1/python3.3/lib/python3.3/site-packages/twisted/spread/pb.py",
line 40, in <module>

    from
twisted.cred.credentials import IAnonymous, ICredentials


  File
"/home/abhat1/python3.3/lib/python3.3/site-packages/twisted/cred/credentials.py",
line 111, in <module>

    class
DigestedCredentials(object):


  File
"/home/abhat1/python3.3/lib/python3.3/site-packages/twisted/cred/credentials.py",
line 115, in DigestedCredentials

   
implements(IUsernameHashedPassword, IUsernameDigestHash)


  File
"/home/abhat1/python3.3/lib/python3.3/site-packages/zope/interface/declarations.py",
line 405, in implements

    raise
TypeError(_ADVICE_ERROR % 'implementer')

TypeError: Class advice impossible in Python3.  Use the @implementer class decorator instead.


 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130109/26bf6ea5/attachment.html>

From itamar at futurefoundries.com  Wed Jan  9 13:31:00 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Wed, 9 Jan 2013 15:31:00 -0500
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3.
In-Reply-To: <BLU002-W25E0BA2254D9D770B08198C72B0@phx.gbl>
References: <BLU002-W25E0BA2254D9D770B08198C72B0@phx.gbl>
Message-ID: <CAOp9P3r--TqyHbQBAbbZ66BTJxG8-x32e9VRkS2+qkzmqoSENw@mail.gmail.com>

On Wed, Jan 9, 2013 at 3:06 PM, ABHISHEK BHAT <abhishekbhat at hotmail.com>wrote:

> Hi
> I am trying to use Twisted and PB but running into the below error in the
> zope.interface module.
>
> I am running Python 3.3 and zope.interface version 4.0.3. I am running
> this on a RedHat system.
>
> Does anybody know how to get around this problem?
>

twisted.spread has not yet been ported to Python 3.3. You can see the full
list of ported modules in admin/_twistedpython3.py in a checkout of
Twisted.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130109/63c34b6a/attachment.html>

From barry at python.org  Wed Jan  9 14:53:55 2013
From: barry at python.org (Barry Warsaw)
Date: Wed, 9 Jan 2013 16:53:55 -0500
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3.
References: <BLU002-W25E0BA2254D9D770B08198C72B0@phx.gbl>
Message-ID: <20130109165355.5aa028d6@anarchist.wooz.org>

On Jan 09, 2013, at 01:06 PM, ABHISHEK BHAT wrote:

>  File
>"/home/abhat1/python3.3/lib/python3.3/site-packages/twisted/cred/credentials.py",
>line 115, in DigestedCredentials
>
>   
>implements(IUsernameHashedPassword, IUsernameDigestHash)

FWIW, you should use the @implementer class decorator instead.  This will work
in Python 3, 2.6, and 2.7.

Cheers,
-Barry
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130109/d9a3aaaf/attachment.sig>

From adi at roiban.ro  Wed Jan  9 15:27:04 2013
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 10 Jan 2013 00:27:04 +0200
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
Message-ID: <CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>

On 9 January 2013 20:02, Glyph <glyph at twistedmatrix.com> wrote:
> On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
>
> I am not an expert in Twisted, but from my understanding, the "string"
> requirement is there to provide a plugable interface. So that you can
> have generic credentials checkers, working with generic realms.
> Having simple "strings" could also help with AvatarId serialization,
> in case you have the CredentialsChecker on one computer and the you
> will pass them over network/socket to a remote Realm.

[snip]

> I hope it's clear that just hard-coding your avatars and realms to work only
> with each other is a sub-optimal solution :).

It is very clear :)

> The architecture of cred is supposed to be that you can plug realms and
> checkers together so that a change to your authentication backend doesn't
> completely change your application.  Of course, that architecture is flawed
> in the sense that a string is a bit too narrow of a communication channel to
> get information about the authenticated user from one to the other,
> especially in cases where the application needs information from a directory
> service to function.
>
> If you're interested in an improved, official way to deal with this
> use-case, the best way to do that would be to get involved and actively try
> to specify what you need.  I've got similar use-cases at work, as you can
> see here:
> <http://trac.calendarserver.org/browser/CalendarServer/trunk/twistedcaldav/directory/idirectory.py>
> so I'd be happy to talk to you about some ideas.
>
> The best way to predict the future is to invent it. :)

My AvatarID Object is just for data.

Let me describe one of my usage/requirement:

I have a portal with credentialsChecker for both OS accounts and
application specific accounts.
One can have user "john" both as a local account and/or an application account.
If my credentialsChecker returns only 'john', the Realm will not know
from where to get user's home folder, so the returned AvatarID needs
to signal the "source" of avatarID login so that it can use the same
source for getting account configuration.

I know that a solution is to have unique ID across all system, but in
my case, this is not possible, and I have a priority list.

I can encode the source in the avatar id like: john at os or
john at application, but I don't see why this is better than ('john',
'os') / ('john', 'application')

----

A formal description would be:

There are N authentication services and for each authentication
service, there is an associated account configuration service.
When an account is allowed by authentication service X, the server
will retrieve account configuration from the configuration service X.

-----

Another use case:

I have user X with password Y. If user X is authenticated from local
LAN it gets avatar Z, otherwise it gets avatar W.

Here a simple AvatarID is not enough, since I also need to pass the
remote peer from the transport.


I keep a reference to remote peer in the Avatar. Doing this I don't
need to always pass the transport, and just use the avatar. I do this
to keep track of "sessions" in logs.

-----

Since I don't know much about Twisted, this might be just bad
design/architecture and there is some way of doing this while still
using a simple avatarid.

----

I am not sure I fully understood the idirectory.py example, but rather
than verifying credentials for each resource, I prefer to validate the
credentials once (do one authentication) and then have a different
authorization process.

In some cases the credentialsChecker can do authentication and
authorization in the same step.
In my usage, the credentialsChecker only does autentication, and then
an initial authorization is done in the realm.

-----

I can discuss this in private, write a wiki page or add more details,
if required.

Thanks!
-- 
Adi Roiban



From marco.giusti at gmail.com  Thu Jan 10 03:00:06 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Thu, 10 Jan 2013 11:00:06 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>
Message-ID: <20130110100006.GA31409@murdoc>

On Thu, Jan 10, 2013 at 12:27:04AM +0200, Adi Roiban wrote:
> On 9 January 2013 20:02, Glyph <glyph at twistedmatrix.com> wrote:
> > On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
> >
> > I am not an expert in Twisted, but from my understanding, the "string"
> > requirement is there to provide a plugable interface. So that you can
> > have generic credentials checkers, working with generic realms.
> > Having simple "strings" could also help with AvatarId serialization,
> > in case you have the CredentialsChecker on one computer and the you
> > will pass them over network/socket to a remote Realm.
> 
> [snip]
> 
> > I hope it's clear that just hard-coding your avatars and realms to work only
> > with each other is a sub-optimal solution :).
> 
> It is very clear :)
> 
> > The architecture of cred is supposed to be that you can plug realms and
> > checkers together so that a change to your authentication backend doesn't
> > completely change your application.  Of course, that architecture is flawed
> > in the sense that a string is a bit too narrow of a communication channel to
> > get information about the authenticated user from one to the other,
> > especially in cases where the application needs information from a directory
> > service to function.
> >
> > If you're interested in an improved, official way to deal with this
> > use-case, the best way to do that would be to get involved and actively try
> > to specify what you need.  I've got similar use-cases at work, as you can
> > see here:
> > <http://trac.calendarserver.org/browser/CalendarServer/trunk/twistedcaldav/directory/idirectory.py>
> > so I'd be happy to talk to you about some ideas.
> >
> > The best way to predict the future is to invent it. :)
> 
> My AvatarID Object is just for data.
> 
> Let me describe one of my usage/requirement:
> 
> I have a portal with credentialsChecker for both OS accounts and
> application specific accounts.
> One can have user "john" both as a local account and/or an application account.
> If my credentialsChecker returns only 'john', the Realm will not know
> from where to get user's home folder, so the returned AvatarID needs
> to signal the "source" of avatarID login so that it can use the same
> source for getting account configuration.

Can't you use `Portal.login` interfaces paramenter? I think you have two
different entry points for local and application accounts, so:

	# login as local account
	portal.login('john', None, ILocalHomeFolder)
	# login as application account
	portal.login('john', None, IApplicationLogic)


	class Realm:

		def requestAvatar(avatarId, mind, *interfaces):
			getAvatar = AFactory(interfaces)
			avatar = getAvatar(avatarId, mind)
			return avatar

> I know that a solution is to have unique ID across all system, but in
> my case, this is not possible, and I have a priority list.
> 
> I can encode the source in the avatar id like: john at os or
> john at application, but I don't see why this is better than ('john',
> 'os') / ('john', 'application')

well actually tuples are not modifiable, so they are strings, then
('john', 'os') is an unique identifier across all system with no much
more information than 'john at os'. The advantage of using plain string is
that they don't break the interface.

> A formal description would be:
> 
> There are N authentication services and for each authentication
> service, there is an associated account configuration service.
> When an account is allowed by authentication service X, the server
> will retrieve account configuration from the configuration service X.
> 
> -----
> 
> Another use case:
> 
> I have user X with password Y. If user X is authenticated from local
> LAN it gets avatar Z, otherwise it gets avatar W.
> 
> Here a simple AvatarID is not enough, since I also need to pass the
> remote peer from the transport.
> 
> 
> I keep a reference to remote peer in the Avatar. Doing this I don't
> need to always pass the transport, and just use the avatar. I do this
> to keep track of "sessions" in logs.

take a look at mind parameter and at twisted.words.service on how you
can use it.

> In some cases the credentialsChecker can do authentication and
> authorization in the same step.
> In my usage, the credentialsChecker only does autentication, and then
> an initial authorization is done in the realm.

just my 2c.



From marco.giusti at gmail.com  Thu Jan 10 03:05:32 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Thu, 10 Jan 2013 11:05:32 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <20130110100006.GA31409@murdoc>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>
	<20130110100006.GA31409@murdoc>
Message-ID: <20130110100532.GB31409@murdoc>

On Thu, Jan 10, 2013 at 11:00:06AM +0100, Marco Giusti wrote:
[cut]
> 
> Can't you use `Portal.login` interfaces paramenter? I think you have two
> different entry points for local and application accounts, so:
> 
> 	# login as local account
> 	portal.login('john', None, ILocalHomeFolder)
> 	# login as application account
> 	portal.login('john', None, IApplicationLogic)

here the credentials are not just a plain string, but an object that
provides ICredentials.



From adi at roiban.ro  Thu Jan 10 03:34:57 2013
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 10 Jan 2013 12:34:57 +0200
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <20130110100006.GA31409@murdoc>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>
	<20130110100006.GA31409@murdoc>
Message-ID: <CAFycZ9f4mhDSExDqGXj8zCrkttDBWeSU9OvER+1xyZRMn0zweg@mail.gmail.com>

On 10 January 2013 12:00, Marco Giusti <marco.giusti at gmail.com> wrote:
[snip]
>> My AvatarID Object is just for data.
>>
>> Let me describe one of my usage/requirement:
>>
>> I have a portal with credentialsChecker for both OS accounts and
>> application specific accounts.
>> One can have user "john" both as a local account and/or an application account.
>> If my credentialsChecker returns only 'john', the Realm will not know
>> from where to get user's home folder, so the returned AvatarID needs
>> to signal the "source" of avatarID login so that it can use the same
>> source for getting account configuration.
>
> Can't you use `Portal.login` interfaces paramenter? I think you have two
> different entry points for local and application accounts, so:

I can not do portal.login('john', None, ILocalHomeFolder) since at log
in time I don't know if john is an os or application account... The
credential checker will find out what kind of account is John.

[snip]

> well actually tuples are not modifiable, so they are strings, then
> ('john', 'os') is an unique identifier across all system with no much
> more information than 'john at os'. The advantage of using plain string is
> that they don't break the interface.

Later I would like to extract the provider from the AvatatID and doing
(user, provider) = AvatarID.split('@', 2) is a bit more complicated
and error prone.


Thanks for the notes.

Cheers
-- 
Adi Roiban



From marco.giusti at gmail.com  Thu Jan 10 04:14:36 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Thu, 10 Jan 2013 12:14:36 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAFycZ9f4mhDSExDqGXj8zCrkttDBWeSU9OvER+1xyZRMn0zweg@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<CAFycZ9dstngkWGVh2PTi3VrG+nxxE=gF228vPmd+36MxstSrXA@mail.gmail.com>
	<20130110100006.GA31409@murdoc>
	<CAFycZ9f4mhDSExDqGXj8zCrkttDBWeSU9OvER+1xyZRMn0zweg@mail.gmail.com>
Message-ID: <20130110111436.GC31409@murdoc>

On Thu, Jan 10, 2013 at 12:34:57PM +0200, Adi Roiban wrote:
> On 10 January 2013 12:00, Marco Giusti <marco.giusti at gmail.com> wrote:
> [snip]
> >> My AvatarID Object is just for data.
> >>
> >> Let me describe one of my usage/requirement:
> >>
> >> I have a portal with credentialsChecker for both OS accounts and
> >> application specific accounts.
> >> One can have user "john" both as a local account and/or an application account.
> >> If my credentialsChecker returns only 'john', the Realm will not know
> >> from where to get user's home folder, so the returned AvatarID needs
> >> to signal the "source" of avatarID login so that it can use the same
> >> source for getting account configuration.
[cut]

This could be an overshoot but you can have two portals, use one as
the default and the second one as a fallback. I think the code will be
a little bit cleaner at the checker/realm side at the price of a little
bit of complexity at the login side:

	portal1.login(credentials, None).addErrback(lambda _:
		portal2.login(credentials, peer)).addCallbacks(...)

But I don't know if it is worth the candle.

m.



From peter.westlake at pobox.com  Thu Jan 10 07:41:54 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Thu, 10 Jan 2013 14:41:54 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
Message-ID: <1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>

On Wed, Jan 9, 2013, at 18:02, Glyph wrote
> On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com>
> wrote:
> > On Jan 9, Adi wrote:
> >> I am not an expert in Twisted, but from my understanding, the "string"
> >> requirement is there to provide a plugable interface. So that you can
> >> have generic credentials checkers, working with generic realms.
> >> Having simple "strings" could also help with AvatarId serialization,
> >> in case you have the CredentialsChecker on one computer and the you
> >> will pass them over network/socket to a remote Realm.
> > 
> > Those are both good points! I'll leave it this way until there's
> > a more official way of doing it.
> 
> I hope it's clear that just hard-coding your avatars and realms to work
> only with each other is a sub-optimal solution :).

Indeed :-)

> The architecture of cred is supposed to be that you can plug realms and
> checkers together so that a change to your authentication backend doesn't
> completely change your application.  Of course, that architecture is
> flawed in the sense that a string is a bit too narrow of a communication
> channel to get information about the authenticated user from one to the
> other, especially in cases where the application needs information from a
> directory service to function.
> 
> If you're interested in an improved, official way to deal with this
> use-case, the best way to do that would be to get involved and actively
> try to specify what you need.

Here's my use case. The CredentialsChecker takes a login name,
e.g. "pwest", and looks it up in LDAP. It gets back an LDAP record
something like this:

{
   'distinguishedName': 'CN=Peter Westlake,OU=User
   Accounts,OU=EMEA,DC=example,DC=com',
   'cn': 'Peter Westlake',
   'name': 'Peter Westlake',
   'sn': 'Westlake',
   'mail': 'Peter.Westlake at example.com',
   'givenName': 'Peter',
   'sAMAccountName': 'pwest'
}

It passes the distinguishedName and the supplied password
to the LDAP password checker function for authorization.

At this point the correct thing to do would be to return "pwest"
as the avatarId. But I've got all that other useful information
available, and it seems a shame to have to get it again in
the Realm, so I return the whole dictionary.

Some points to note:

1. Converting the dict to a string would make
   the avatarId conform to the interface, but
   it still wouldn't be pluggable, because other
   checkers wouldn't return the extra information.

   This strikes me as a general problem. If the
   checker returns more than an avatarId, whether
   directly or through some official-sanctioned channel,
   it will only be interchangeable with other
   checkers that also return the extra information.

2. The application knows about LDAP, and uses it
   to find things like your manager and your email
   address. Some of this information is in the
   avatarId, but some of it isn't, so some LDAP
   calls will have to be made. This weakens the
   argument against duplicating the lookup.

The correct thing to do in this case would undoubtedly
be to accept that an LDAP call isn't very expensive,
and repeat it in the Realm. In other words, my use
case isn't very compelling. You have shamed me into
changing it :-)   In one way this is a good result,
though it doesn't help with the design.

Having made that change, I can use a password file
or an in-memory database for testing, and write
test scripts that don't need a real password. That's
well worth the /completely unnoticeable/ expense
of an extra LDAP call!

BUT:
This only works because it doesn't use the user's
password for binding to LDAP. If it did, then either
the password or the LDAP session would have
to be made available to the Realm, and we're
back at square 1.

Peter.



From itamar at futurefoundries.com  Thu Jan 10 10:40:12 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Thu, 10 Jan 2013 12:40:12 -0500
Subject: [Twisted-Python] Two-day Twisted class in San Francisco (right
	before PyCon)
Message-ID: <CAOp9P3r6WPrTGGFEoUfdM6vUX6sTvjexiZVXJg9TzQzCxTQt0g@mail.gmail.com>

On the Monday and Tuesday before PyCon, Jean-Paul Calderone and I will be
teaching a two-day introduction to Twisted in San Francisco. We'll be
covering the basics of the event loop, Deferreds, and other core APIs, with
lots of hands-on exercises. (The 3-hour tutorial I'll be teaching at PyCon
includes a small part of this material.)

You can learn more here:
http://blog.futurefoundries.com/2013/01/2-day-twisted-class-in-san-francisco.html

Or sign up here:
http://futurefoundries.eventbrite.com/

Regards,
-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130110/2c2ccaa9/attachment-0001.html>

From fabian.rothfuchs at googlemail.com  Thu Jan 10 12:58:04 2013
From: fabian.rothfuchs at googlemail.com (F Rothfuchs)
Date: Thu, 10 Jan 2013 20:58:04 +0100
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
Message-ID: <CAEaBPB3J82OE4_tguv3Xw_cT=x7-DYqLdfxUbGMiEqGsd31cYA@mail.gmail.com>

Hey there,


I'm trying to start and stop a twisted server in a unittest:
http://dpaste.org/qwaUt/ .

Calling reactor.stop() in the callback causes a KeyboardInterrupt
exception, and tearDown gets never executed, as it's probably waiting for
the test to finish.

After calling `trial d.py` you need to run a `telnet localhost 8007`
manually to stimulate the connectionMade() method.


I'm totally stuck and would appreciate any help.


Thanks

Fabian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130110/2c7c5259/attachment.html>

From exarkun at twistedmatrix.com  Thu Jan 10 13:51:34 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 10 Jan 2013 20:51:34 -0000
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CAEaBPB3J82OE4_tguv3Xw_cT=x7-DYqLdfxUbGMiEqGsd31cYA@mail.gmail.com>
References: <CAEaBPB3J82OE4_tguv3Xw_cT=x7-DYqLdfxUbGMiEqGsd31cYA@mail.gmail.com>
Message-ID: <20130110205134.4510.1663267078.divmod.xquotient.4@localhost6.localdomain6>

On 07:58 pm, fabian.rothfuchs at googlemail.com wrote:
>Hey there,
>
>
>I'm trying to start and stop a twisted server in a unittest:
>http://dpaste.org/qwaUt/ .

Why?  This isn't the typical way to write unit tests for Twisted-based 
code.  The reactor is started and stopped by trial as necessary.  Your 
code should just expect that it is running and let trial stop it when it 
is time to stop.

If you have asynchronous code to test, you return a Deferred from a test 
method and the test completes when the Deferred fires.  Not when the 
reactor stops.

Also, a lot of people have come to dislike this style of test, instead 
preferring to use test doubles that don't involve real I/O or time so 
that they can completely test the logic of their code deterministically 
- thus also without ever running a real reactor or needing to use the 
"return a Deferred from a test method" feature of trial.

Jean-Paul



From stephane_brault at yahoo.fr  Fri Jan 11 15:43:46 2013
From: stephane_brault at yahoo.fr (St&#xE9;phane Brault)
Date: Fri, 11 Jan 2013 22:43:46 +0000 (GMT)
Subject: [Twisted-Python] (no subject)
Message-ID: <1357944226.43784.BPMail_high_noncarrier@web171906.mail.ir2.yahoo.com>


Garcinia Cambogia Extract are the newest painless solution to Weightloss http://nuevolaredoexpress.com/coveralphabetjasonbennett/



From fabian.rothfuchs at googlemail.com  Sat Jan 12 07:00:17 2013
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Sat, 12 Jan 2013 15:00:17 +0100
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <20130110205134.4510.1663267078.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <CD1729CF.41840%fabian.rothfuchs@googmail.com>

I'm in the dilemma of using both - Django and Twisted.
My goal is to have Django initialising the test (python manage.py test
<appname>), instead of trial, as it will setup the whole test environment
(I.e. Creates a db copy, allows per-model testing, follows certain
conventions, etc).

As to that I'm trying to find a way how to start/stop the reactor from the
test, as trial is not executed.
Do you have an idea or an approach how this could be realised?

Thanks
Fabian


On 1/10/13 9:51 PM, "exarkun at twistedmatrix.com"
<exarkun at twistedmatrix.com> wrote:

>On 07:58 pm, fabian.rothfuchs at googlemail.com wrote:
>>Hey there,
>>
>>
>>I'm trying to start and stop a twisted server in a unittest:
>>http://dpaste.org/qwaUt/ .
>
>Why?  This isn't the typical way to write unit tests for Twisted-based
>code.  The reactor is started and stopped by trial as necessary.  Your
>code should just expect that it is running and let trial stop it when it
>is time to stop.
>
>If you have asynchronous code to test, you return a Deferred from a test
>method and the test completes when the Deferred fires.  Not when the
>reactor stops.
>
>Also, a lot of people have come to dislike this style of test, instead
>preferring to use test doubles that don't involve real I/O or time so
>that they can completely test the logic of their code deterministically
>- thus also without ever running a real reactor or needing to use the
>"return a Deferred from a test method" feature of trial.
>
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From jml at mumak.net  Sat Jan 12 07:26:04 2013
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 12 Jan 2013 14:26:04 +0000
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CD1729CF.41840%fabian.rothfuchs@googmail.com>
References: <20130110205134.4510.1663267078.divmod.xquotient.4@localhost6.localdomain6>
	<CD1729CF.41840%fabian.rothfuchs@googmail.com>
Message-ID: <CAHZ8tnb==shhbhAEvt544YTD1W4Cu1qan5_Q2cmt7XBd4OaEaQ@mail.gmail.com>

On Sat, Jan 12, 2013 at 2:00 PM, Fabian Rothfuchs
<fabian.rothfuchs at googlemail.com> wrote:
> I'm in the dilemma of using both - Django and Twisted.
> My goal is to have Django initialising the test (python manage.py test
> <appname>), instead of trial, as it will setup the whole test environment
> (I.e. Creates a db copy, allows per-model testing, follows certain
> conventions, etc).
>
> As to that I'm trying to find a way how to start/stop the reactor from the
> test, as trial is not executed.
> Do you have an idea or an approach how this could be realised?
>

One thing that works for us is to have our Twisted-using tests
subclass testtools.TestCase[1], and declare that they are asynchronous
Twisted tests.

e.g.

    class TestTwistedAPI(testtools.TestCase):
        run_tests_with = AsynchronousDeferredRunTest
        def test_foo(self):
            d = foo.some_api()
            d.addCallback(self.assertEqual, "bar")
            return d

Of course, not inheriting from Django's TestCase means you lose a lot
of its implicit set-up, but most of that can be called from public
APIs. We have a very rough project that does some of the
necessaries.[2]

You could probably use twisted.trial.unittest.TestCase instead of
testtools.TestCase.

cheers,
jml

[1] http://pypi.python.org/pypi/testtools
[2] http://pypi.python.org/pypi/djangofixture



From ralphm at ik.nu  Sat Jan 12 14:26:43 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Sat, 12 Jan 2013 22:26:43 +0100
Subject: [Twisted-Python] [Twisted-Jabber]  [ANNOUNCE] Wokkel 0.7.1
Message-ID: <50F1D513.2010009@ik.nu>

Hi!

I am proud to announce version 0.7.1 of Wokkel, a set of enhancements on 
the Jabber/XMPP support in Twisted Words.

    http://wokkel.ik.nu/releases/0.7.1/wokkel-0.7.1.tar.gz


The highlights:

  * This release addresses an incompatibility with Twisted 12.3.0,
    which made it impossible for clients to connect to a server, and
    for servers to connect to other servers. As a bonus, connecting to
    servers with an Internationalized Domain Name is now supported.

  * Several improvements to client-side roster handling, including
    support for roster versioning, rejecting unauthorized roster pushes
    and adding roster items.

  * Server-side components will now try to reconnect to the server
    if the first attempt failed.

Besides those, a few minor bugs have been resolved. See the complete 
news file at:

    http://wokkel.ik.nu/releases/0.7.1/NEWS

Jabber on!

-- 
ralphm



From itamar at futurefoundries.com  Sat Jan 12 16:31:13 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sat, 12 Jan 2013 18:31:13 -0500
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CD1729CF.41840%fabian.rothfuchs@googmail.com>
References: <20130110205134.4510.1663267078.divmod.xquotient.4@localhost6.localdomain6>
	<CD1729CF.41840%fabian.rothfuchs@googmail.com>
Message-ID: <CAOp9P3pvdDUKi3dJsct0n4JOTpV9ECNH5WZxM12MD7muhkuXAw@mail.gmail.com>

On Sat, Jan 12, 2013 at 9:00 AM, Fabian Rothfuchs <
fabian.rothfuchs at googlemail.com> wrote:

> I'm in the dilemma of using both - Django and Twisted.
> My goal is to have Django initialising the test (python manage.py test
> <appname>), instead of trial, as it will setup the whole test environment
> (I.e. Creates a db copy, allows per-model testing, follows certain
> conventions, etc).
>
> As to that I'm trying to find a way how to start/stop the reactor from the
> test, as trial is not executed.
> Do you have an idea or an approach how this could be realised?
>

The functionality to start/stop the reactor when a test returns a Deferred
is part of twisted.trial.unittest.TestCase, which subclasses Python's
unittest.TestCase. As a result you don't need to use the trial command-line
tool, you can use any Python test runner that knows about Python's
TestCase; just make sure to subclass twisted.trial.unittest.TestCase, and
your test will support running the reactor for you when you return a
Deferred.

Or, if possible, you can avoid using the reactor at all; some approaches
(as mentioned by Jean-Paul) are described in the trial documentation:
http://twistedmatrix.com/documents/current/core/howto/trial.html

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130112/261e8a5b/attachment.html>

From abhishekbhat at hotmail.com  Sat Jan 12 20:15:54 2013
From: abhishekbhat at hotmail.com (ABHISHEK BHAT)
Date: Sat, 12 Jan 2013 20:15:54 -0700
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
Message-ID: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>

Itamar
Is there some sort of upper bound on when PB would be available for Python3.3? I am hoping to use it for a Python3 project.

Any proposals to switch from PB to Foolscap in the upcoming releases of Twisted?
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130112/9c29d394/attachment.html>

From exarkun at twistedmatrix.com  Sat Jan 12 20:29:54 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Jan 2013 03:29:54 -0000
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
In-Reply-To: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
References: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
Message-ID: <20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>

On 03:15 am, abhishekbhat at hotmail.com wrote:
>Itamar
>Is there some sort of upper bound on when PB would be available for 
>Python3.3? I am hoping to use it for a Python3 project.

As with any development, it will happen when people do it. :)  Twisted 
development is almost entirely on a volunteer basis, and people mostly 
work on what they personally want to work on.

If you're wondering who's currently working on porting PB to Python 3, I 
don't think anyone is.
>Any proposals to switch from PB to Foolscap in the upcoming releases of 
>Twisted?

No.  Foolscap is not backwards compatible with PB, so there won't be a 
switch from one to the other.  Fortunately, there's nothing that 
prevents you from ignoring PB and instead using Foolscap in any of your 
Twisted-based projects.

Jean-Paul



From exarkun at twistedmatrix.com  Sat Jan 12 22:05:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Jan 2013 05:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1358053525.77.496427078@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130113/a36472c8/attachment.html>

From glyph at twistedmatrix.com  Sat Jan 12 22:48:26 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 12 Jan 2013 21:48:26 -0800
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
In-Reply-To: <20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>
References: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
	<20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>
Message-ID: <79EF0037-6602-423B-A8EF-904231FF73E5@twistedmatrix.com>


On Jan 12, 2013, at 7:29 PM, exarkun at twistedmatrix.com wrote:

> On 03:15 am, abhishekbhat at hotmail.com wrote:
>> Itamar
>> Is there some sort of upper bound on when PB would be available for 
>> Python3.3? I am hoping to use it for a Python3 project.
> 
> As with any development, it will happen when people do it. :)  Twisted 
> development is almost entirely on a volunteer basis, and people mostly 
> work on what they personally want to work on.
> 
> If you're wondering who's currently working on porting PB to Python 3, I 
> don't think anyone is.

Hi Abhishek,

_You_ could always contribute a port of PB to Python 3.  PB is itself a pretty self-contained module with not many dependencies outside of what's already been ported.  Porting it to Python 3 should be relatively straightforward, and the existing python 3 ports should provide a good example of how to do it.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130112/4f46e6a1/attachment.html>

From glyph at twistedmatrix.com  Sat Jan 12 23:39:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 12 Jan 2013 22:39:31 -0800
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
Message-ID: <3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>


On Jan 10, 2013, at 6:41 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

> On Wed, Jan 9, 2013, at 18:02, Glyph wrote
>> On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com>
>> wrote:
>>> On Jan 9, Adi wrote:
>>>> I am not an expert in Twisted, but from my understanding, the "string"
>>>> requirement is there to provide a plugable interface. So that you can
>>>> have generic credentials checkers, working with generic realms.
>>>> Having simple "strings" could also help with AvatarId serialization,
>>>> in case you have the CredentialsChecker on one computer and the you
>>>> will pass them over network/socket to a remote Realm.
>>> 
>>> Those are both good points! I'll leave it this way until there's
>>> a more official way of doing it.
>> 
>> I hope it's clear that just hard-coding your avatars and realms to work
>> only with each other is a sub-optimal solution :).
> 
> Indeed :-)
> 
>> The architecture of cred is supposed to be that you can plug realms and
>> checkers together so that a change to your authentication backend doesn't
>> completely change your application.  Of course, that architecture is
>> flawed in the sense that a string is a bit too narrow of a communication
>> channel to get information about the authenticated user from one to the
>> other, especially in cases where the application needs information from a
>> directory service to function.
>> 
>> If you're interested in an improved, official way to deal with this
>> use-case, the best way to do that would be to get involved and actively
>> try to specify what you need.
> 
> Here's my use case. The CredentialsChecker takes a login name,
> e.g. "pwest", and looks it up in LDAP. It gets back an LDAP record
> something like this:
> 
> {
>   'distinguishedName': 'CN=Peter Westlake,OU=User
>   Accounts,OU=EMEA,DC=example,DC=com',
>   'cn': 'Peter Westlake',
>   'name': 'Peter Westlake',
>   'sn': 'Westlake',
>   'mail': 'Peter.Westlake at example.com',
>   'givenName': 'Peter',
>   'sAMAccountName': 'pwest'
> }
> 
> It passes the distinguishedName and the supplied password
> to the LDAP password checker function for authorization.
> 
> At this point the correct thing to do would be to return "pwest"
> as the avatarId. But I've got all that other useful information
> available, and it seems a shame to have to get it again in
> the Realm, so I return the whole dictionary.

One potentially interesting question here, as well, is "why sAMAccountName" as the avatarID?  Isn't there a UID or UUID in there somewhere?  In my application, all the user identifiers are opaque, and that makes a bit more sense, since those values don't change, although any other part of the user's record could change as information evolves over time.  For example, if someone gets married and changes their name, they might find it annoying to have to log in with a username that references their maiden name all the time.

> Some points to note:
> 
> 1. Converting the dict to a string would make
>   the avatarId conform to the interface, but
>   it still wouldn't be pluggable, because other
>   checkers wouldn't return the extra information.
> 
>   This strikes me as a general problem. If the
>   checker returns more than an avatarId, whether
>   directly or through some official-sanctioned channel,
>   it will only be interchangeable with other
>   checkers that also return the extra information.
> 
> 2. The application knows about LDAP, and uses it
>   to find things like your manager and your email
>   address. Some of this information is in the
>   avatarId, but some of it isn't, so some LDAP
>   calls will have to be made. This weakens the
>   argument against duplicating the lookup.
> 
> The correct thing to do in this case would undoubtedly
> be to accept that an LDAP call isn't very expensive,
> and repeat it in the Realm. In other words, my use
> case isn't very compelling. You have shamed me into
> changing it :-)   In one way this is a good result,
> though it doesn't help with the design.
> 
> Having made that change, I can use a password file
> or an in-memory database for testing, and write
> test scripts that don't need a real password. That's
> well worth the /completely unnoticeable/ expense
> of an extra LDAP call!

As other posters have already said, you can also have your realm and your checker share a reference to an object that caches credentials.  This would also let you cache other calls that are made later, too.

> BUT:
> This only works because it doesn't use the user's
> password for binding to LDAP. If it did, then either
> the password or the LDAP session would have
> to be made available to the Realm, and we're
> back at square 1.

It seems like the "shared caching reference" would solve this problem as well?

-glyph




From itamar at futurefoundries.com  Sun Jan 13 07:08:38 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 13 Jan 2013 09:08:38 -0500
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
Message-ID: <CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>

It's possible that in some of the cases discussed above, what you want is a
custom *Portal*. For example, if you want to try a sequence of logins, and
choose the first that succeeds:

class MultiPortal(object):
    def __init__(self, portals):
        self.portals = portals

    @inlineCallbacks
    def login(self, *args, **kwargs):
        for portal in self.portals:
            try:
                return portal.login(*args, **kwargs)
            except:
                continue
        # Ran out of portals, failed to login:
        raise Unauthorized()

Or, let's say you're writing a backend that is a combination checker and
realm, where separating that two doesn't make sense. E.g. a backend for a
POP3 server that is a proxy to another POP3 server. In this case there's no
point in writing separate checker and realm, just write a new Portal:

class POP3ProxyPortal(object):
    def __init__(self, endpoint):
        self.endpoint = endpoint

    @defer.inlineCallbacks
    def login(self, credentials, mind, *interfaces):
        pop3client = yield self.endpoint.connect(POP3ClientFactory())
        yield pop3client.login(credentials.username, credentials.password)
        defer.returnValue((IMailbox, MailboxProxy(pop3client),
pop3client.quit))


-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130113/1fc55900/attachment.html>

From itamar at futurefoundries.com  Sun Jan 13 07:10:57 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 13 Jan 2013 09:10:57 -0500
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>
Message-ID: <CAOp9P3qsKq71SUqKNnkchiTAkrgBZu7oVB-HMvaw=J5TiD2neA@mail.gmail.com>

On Sun, Jan 13, 2013 at 9:08 AM, Itamar Turner-Trauring <
itamar at futurefoundries.com> wrote:

>
>     @inlineCallbacks
>     def login(self, *args, **kwargs):
>         for portal in self.portals:
>             try:
>                 return portal.login(*args, **kwargs)
>             except:
>                 continue
>         # Ran out of portals, failed to login:
>         raise Unauthorized()
>

Sigh. Make that:

    @inlineCallbacks
    def login(self, *args, **kwargs):
        for portal in self.portals:
            try:
                returnValue(yield portal.login(*args, **kwargs))
            except:
                continue
        # Ran out of portals, failed to login:
        raise Unauthorized()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130113/62916a0d/attachment.html>

From _ at lvh.cc  Sun Jan 13 13:54:14 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sun, 13 Jan 2013 21:54:14 +0100
Subject: [Twisted-Python] Appropriate exception for AMP types receiving
	garbage?
In-Reply-To: <5B523109-A533-4820-8D32-2BC0D155CACC@twistedmatrix.com>
References: <CAE_Hg6bK5XEKf3c++KvfCriSnhrFFk0Nc1MWL1wRtBD=sSuzFQ@mail.gmail.com>
	<5B523109-A533-4820-8D32-2BC0D155CACC@twistedmatrix.com>
Message-ID: <CAE_Hg6arQ6BjcGnxZXge4ffbP3Z6z6j77U8aD1TbGR4r8AFmMQ@mail.gmail.com>

How about something like {_error: 1, _error_code: BAD_ARGUMENT_VALUE, ...}?


I was writing something to constrain AMP Argument's in- and output values:

https://github.com/lvh/txampext/blob/master/txampext/constrained.py

... and my users getting a real exception as opposed to a disconnected
transport would be nice :)

Any ticket suggestions welcome.



On Thu, Dec 27, 2012 at 8:02 AM, Glyph <glyph at twistedmatrix.com> wrote:

> On Dec 26, 2012, at 1:43 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
>
> I'm writing a custom AMP type. I noticed that when writing the unit test
> for garbage input, I didn't really know what exception to check for.
>
> I couldn't find any place where this was formally defined, so I checked
> for implementation behavior. Boolean explicitly raises TypeError. Integer
> raises ValueError, but that appears to only be an implementation detail of
> int.
>
> It could also be that it doesn't matter at all, but it does seem a little
> strange that Integer and Boolean raise different exceptions when fed
> garbage...
>
>
> Hey Laurens,
>
> This is basically a feature request :).  There's no particular defined
> error type for argument parse errors in AMP.  It's not a bad feature
> though.  The exception also doesn't go anywhere useful - the only contract
> is basically that it'll bubble up and break the connection if you get some
> bad data.  A more sophisticated and trappable / trackable way to propagate
> this sort of error would be useful.
>
> (I would personally consider it a compatible change if the behavior of the
> error cases changed here, on the grounds that anything that uncontrollably
> logs a traceback in response to network input is a gross spec violation of
> a sort.  Maybe we should add an explicit exemption for that case.)
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130113/1da5fe71/attachment.html>

From lacrima.maxim at gmail.com  Mon Jan 14 01:53:51 2013
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Mon, 14 Jan 2013 10:53:51 +0200
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
In-Reply-To: <79EF0037-6602-423B-A8EF-904231FF73E5@twistedmatrix.com>
References: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
	<20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>
	<79EF0037-6602-423B-A8EF-904231FF73E5@twistedmatrix.com>
Message-ID: <CAKef57NWDTDrJae-4LW8-npTXeJP-mVRdYXCJGk-e0__xH+zRA@mail.gmail.com>

Hi!

Sorry for off-topic.

What is the motivation behind creation of Foolscap (newpb)? What does it
solve that can't be solved by old PB?

Thank you


On 13 January 2013 07:48, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jan 12, 2013, at 7:29 PM, exarkun at twistedmatrix.com wrote:
>
> On 03:15 am, abhishekbhat at hotmail.com wrote:
>
> Itamar
> Is there some sort of upper bound on when PB would be available for
> Python3.3? I am hoping to use it for a Python3 project.
>
>
> As with any development, it will happen when people do it. :)  Twisted
> development is almost entirely on a volunteer basis, and people mostly
> work on what they personally want to work on.
>
> If you're wondering who's currently working on porting PB to Python 3, I
> don't think anyone is.
>
>
> Hi Abhishek,
>
> _You_ could always contribute a port of PB to Python 3.  PB is itself a
> pretty self-contained module with not many dependencies outside of what's
> already been ported.  Porting it to Python 3 should be relatively
> straightforward, and the existing python 3 ports should provide a good
> example of how to do it.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130114/d60b6a91/attachment.html>

From peter.westlake at pobox.com  Mon Jan 14 04:18:55 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 14 Jan 2013 11:18:55 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
Message-ID: <1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>

On Sun, Jan 13, 2013, at 6:39, Glyph wrote:
> 
> On Jan 10, 2013, at 6:41 AM, Peter Westlake <peter.westlake at pobox.com>
> wrote:
> 
> > On Wed, Jan 9, 2013, at 18:02, Glyph wrote
> >> On Jan 9, 2013, at 9:26 AM, Peter Westlake <peter.westlake at pobox.com>
> >> wrote:
> >>> On Jan 9, Adi wrote:
> >>>> I am not an expert in Twisted, but from my understanding, the "string"
> >>>> requirement is there to provide a plugable interface. So that you can
> >>>> have generic credentials checkers, working with generic realms.
> >>>> Having simple "strings" could also help with AvatarId serialization,
> >>>> in case you have the CredentialsChecker on one computer and the you
> >>>> will pass them over network/socket to a remote Realm.
> >>> 
> >>> Those are both good points! I'll leave it this way until there's
> >>> a more official way of doing it.
> >> 
> >> I hope it's clear that just hard-coding your avatars and realms to work
> >> only with each other is a sub-optimal solution :).
> > 
> > Indeed :-)
> > 
> >> The architecture of cred is supposed to be that you can plug realms and
> >> checkers together so that a change to your authentication backend doesn't
> >> completely change your application.  Of course, that architecture is
> >> flawed in the sense that a string is a bit too narrow of a communication
> >> channel to get information about the authenticated user from one to the
> >> other, especially in cases where the application needs information from a
> >> directory service to function.
> >> 
> >> If you're interested in an improved, official way to deal with this
> >> use-case, the best way to do that would be to get involved and actively
> >> try to specify what you need.
> > 
> > Here's my use case. The CredentialsChecker takes a login name,
> > e.g. "pwest", and looks it up in LDAP. It gets back an LDAP record
> > something like this:
> > 
> > {
> >   'distinguishedName': 'CN=Peter Westlake,OU=User
> >   Accounts,OU=EMEA,DC=example,DC=com',
> >   'cn': 'Peter Westlake',
> >   'name': 'Peter Westlake',
> >   'sn': 'Westlake',
> >   'mail': 'Peter.Westlake at example.com',
> >   'givenName': 'Peter',
> >   'sAMAccountName': 'pwest'
> > }
> > 
> > It passes the distinguishedName and the supplied password
> > to the LDAP password checker function for authorization.
> > 
> > At this point the correct thing to do would be to return "pwest"
> > as the avatarId. But I've got all that other useful information
> > available, and it seems a shame to have to get it again in
> > the Realm, so I return the whole dictionary.
> 
> One potentially interesting question here, as well, is "why
> sAMAccountName" as the avatarID?  Isn't there a UID or UUID in there
> somewhere?  In my application, all the user identifiers are opaque, and
> that makes a bit more sense, since those values don't change, although
> any other part of the user's record could change as information evolves
> over time.  For example, if someone gets married and changes their name,
> they might find it annoying to have to log in with a username that
> references their maiden name all the time.

That would be a good design, yes, and I'll bear it in mind for future
use.
But for now I'm stuck with a system that has no way to change usernames,
as I discovered the hard way when my original employer was acquired. To
this day I have different logins for Unix and the rest of the corporate
infrastructure. (In case someone asks: the Unix name would be easy
enough to change, but it's used in a lot of places. One day, maybe.)
The account name is the closest thing to a unique id that's available.

> > Some points to note:
> > 
> > 1. Converting the dict to a string would make
> >   the avatarId conform to the interface, but
> >   it still wouldn't be pluggable, because other
> >   checkers wouldn't return the extra information.
> > 
> >   This strikes me as a general problem. If the
> >   checker returns more than an avatarId, whether
> >   directly or through some official-sanctioned channel,
> >   it will only be interchangeable with other
> >   checkers that also return the extra information.
> > 
> > 2. The application knows about LDAP, and uses it
> >   to find things like your manager and your email
> >   address. Some of this information is in the
> >   avatarId, but some of it isn't, so some LDAP
> >   calls will have to be made. This weakens the
> >   argument against duplicating the lookup.
> > 
> > The correct thing to do in this case would undoubtedly
> > be to accept that an LDAP call isn't very expensive,
> > and repeat it in the Realm. In other words, my use
> > case isn't very compelling. You have shamed me into
> > changing it :-)   In one way this is a good result,
> > though it doesn't help with the design.
> > 
> > Having made that change, I can use a password file
> > or an in-memory database for testing, and write
> > test scripts that don't need a real password. That's
> > well worth the /completely unnoticeable/ expense
> > of an extra LDAP call!
> 
> As other posters have already said, you can also have your realm and your
> checker share a reference to an object that caches credentials.  This
> would also let you cache other calls that are made later, too.
> 
> > BUT:
> > This only works because it doesn't use the user's
> > password for binding to LDAP. If it did, then either
> > the password or the LDAP session would have
> > to be made available to the Realm, and we're
> > back at square 1.
> 
> It seems like the "shared caching reference" would solve this problem
> as well?

Yes, I think that's the right answer. It's certainly the right design
in my case, and perhaps in the general case too.

Thanks for looking into this,

Peter.



From peter.westlake at pobox.com  Mon Jan 14 04:27:33 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 14 Jan 2013 11:27:33 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>
Message-ID: <1358162853.29762.140661177294609.14707AF7@webmail.messagingengine.com>

Interesting... those portals could be on different Realms too. It would
also allow more than one checker to be tried per interface, which would
allow (say) a credentials.IUsernamePassword to be tried against
different checkers.

Peter.

On Sun, Jan 13, 2013, at 14:08, Itamar Turner-Trauring wrote:

It's possible that in some of the cases discussed above, what you want
is a custom Portal. For example, if you want to try a sequence of
logins, and choose the first that succeeds:



class MultiPortal(object):

    def __init__(self, portals):

        self.portals = portals



    @inlineCallbacks

    def login(self, *args, **kwargs):

        for portal in self.portals:

            try:

                return portal.login(*args, **kwargs)

            except:

                continue

        # Ran out of portals, failed to login:

        raise Unauthorized()



Or, let's say you're writing a backend that is a combination checker
and realm, where separating that two doesn't make sense. E.g. a backend
for a POP3 server that is a proxy to another POP3 server. In this case
there's no point in writing separate checker and realm, just write a
new Portal:



class POP3ProxyPortal(object):

    def __init__(self, endpoint):

        self.endpoint = endpoint



    @defer.inlineCallbacks

    def login(self, credentials, mind, *interfaces):

        pop3client = yield self.endpoint.connect(POP3ClientFactory())

        yield pop3client.login(credentials.username,
credentials.password)

        defer.returnValue((IMailbox, MailboxProxy(pop3client),
pop3client.quit))


--
Itamar Turner-Trauring, Future Foundries LLC
[1]http://futurefoundries.com/ — Twisted consulting, training and
support.

_______________________________________________

Twisted-Python mailing list

[2]Twisted-Python at twistedmatrix.com

[3]http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

References

1. http://futurefoundries.com/
2. mailto:Twisted-Python at twistedmatrix.com
3. http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130114/1adecdc3/attachment.html>

From itamar at futurefoundries.com  Mon Jan 14 04:55:48 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Mon, 14 Jan 2013 06:55:48 -0500
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1358162853.29762.140661177294609.14707AF7@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<CAOp9P3rLhA87JXNt000LB7ad_dsW981NU7scnBLCXDv57=+JCg@mail.gmail.com>
	<1358162853.29762.140661177294609.14707AF7@webmail.messagingengine.com>
Message-ID: <CAOp9P3pfN5FH-ex36yk=c-+kaCRZkZRTBZR7+KV_Wf+gMv9F6Q@mail.gmail.com>

On Mon, Jan 14, 2013 at 6:27 AM, Peter Westlake <peter.westlake at pobox.com>wrote:

>   Interesting... those portals could be on different Realms too. It would
> also allow more than one checker to be tried per interface, which would
> allow (say) a credentials.IUsernamePassword to be tried against different
> checkers.
>

In the first case, yes. In the second case there'd be no realm or checker
at all, just a (custom) portal. Which is possible since the code using the
portal doesn't know about the existence of checkers or realms.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130114/d9c4c88e/attachment-0001.html>

From _ at lvh.cc  Mon Jan 14 06:40:57 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Mon, 14 Jan 2013 14:40:57 +0100
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
In-Reply-To: <CAKef57NWDTDrJae-4LW8-npTXeJP-mVRdYXCJGk-e0__xH+zRA@mail.gmail.com>
References: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
	<20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>
	<79EF0037-6602-423B-A8EF-904231FF73E5@twistedmatrix.com>
	<CAKef57NWDTDrJae-4LW8-npTXeJP-mVRdYXCJGk-e0__xH+zRA@mail.gmail.com>
Message-ID: <CAE_Hg6auQ16SgW762syj3hi1_5oVLu4+TLRZO5Yf8=GXm0JzLg@mail.gmail.com>

The Foolscap website describes the principal features (as differences to
PB):

http://foolscap.lothar.com/trac/wiki/FoolscapFeatures


On Mon, Jan 14, 2013 at 9:53 AM, Maxim Lacrima <lacrima.maxim at gmail.com>wrote:

> Hi!
>
> Sorry for off-topic.
>
> What is the motivation behind creation of Foolscap (newpb)? What does it
> solve that can't be solved by old PB?
>
> Thank you
>
>
> On 13 January 2013 07:48, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On Jan 12, 2013, at 7:29 PM, exarkun at twistedmatrix.com wrote:
>>
>> On 03:15 am, abhishekbhat at hotmail.com wrote:
>>
>> Itamar
>> Is there some sort of upper bound on when PB would be available for
>> Python3.3? I am hoping to use it for a Python3 project.
>>
>>
>> As with any development, it will happen when people do it. :)  Twisted
>> development is almost entirely on a volunteer basis, and people mostly
>> work on what they personally want to work on.
>>
>> If you're wondering who's currently working on porting PB to Python 3, I
>> don't think anyone is.
>>
>>
>> Hi Abhishek,
>>
>> _You_ could always contribute a port of PB to Python 3.  PB is itself a
>> pretty self-contained module with not many dependencies outside of what's
>> already been ported.  Porting it to Python 3 should be relatively
>> straightforward, and the existing python 3 ports should provide a good
>> example of how to do it.
>>
>> -glyph
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> with regards,
> Maxim
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130114/d63c185e/attachment.html>

From lacrima.maxim at gmail.com  Mon Jan 14 08:04:51 2013
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Mon, 14 Jan 2013 17:04:51 +0200
Subject: [Twisted-Python] TypeError: Class advice impossible in Python3
In-Reply-To: <CAE_Hg6auQ16SgW762syj3hi1_5oVLu4+TLRZO5Yf8=GXm0JzLg@mail.gmail.com>
References: <BLU002-W4771122E643ED5B905FC5BC72F0@phx.gbl>
	<20130113032954.4432.1441137642.divmod.xquotient.27@localhost6.localdomain6>
	<79EF0037-6602-423B-A8EF-904231FF73E5@twistedmatrix.com>
	<CAKef57NWDTDrJae-4LW8-npTXeJP-mVRdYXCJGk-e0__xH+zRA@mail.gmail.com>
	<CAE_Hg6auQ16SgW762syj3hi1_5oVLu4+TLRZO5Yf8=GXm0JzLg@mail.gmail.com>
Message-ID: <CAKef57M7PWOT5XKc9hHKzfZxdHSXXGnmQtiC=3nwB1-=oG+6TA@mail.gmail.com>

On 14 January 2013 15:40, Laurens Van Houtven <_ at lvh.cc> wrote:

> The Foolscap website describes the principal features (as differences to
> PB):
>
> http://foolscap.lothar.com/trac/wiki/FoolscapFeatures
>
>
Thank you!

-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130114/90d7402c/attachment.html>

From glyph at twistedmatrix.com  Mon Jan 14 15:58:13 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 14 Jan 2013 14:58:13 -0800
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
Message-ID: <443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>

On Jan 14, 2013, at 3:18 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

>> It seems like the "shared caching reference" would solve this problem
>> as well?
> 
> Yes, I think that's the right answer. It's certainly the right design
> in my case, and perhaps in the general case too.

I think that this is the right design for now, given the constraints of the current cred API; however, it's certainly possible we could think up an extension to the cred API that would make this case easier to deal with.  It also leaves open some not-quite-trivial questions like "how do you know when to expire the cache, which are usually easy to work out for a particular application but do not generalize easily.

I hope you don't give up on thinking about a nicer and more general API just because the immediate problem is solved :).  Glad I could offer useful advice, though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130114/0f563eac/attachment.html>

From peter.westlake at pobox.com  Mon Jan 14 18:10:08 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 15 Jan 2013 01:10:08 +0000
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
	<443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
Message-ID: <1358212208.23140.140661177616037.0DDCE0AA@webmail.messagingengine.com>

On Mon, Jan 14, 2013, at 22:58, Glyph wrote:
> On Jan 14, 2013, at 3:18 AM, Peter Westlake <peter.westlake at pobox.com>
> wrote:
> 
> >> It seems like the "shared caching reference" would solve this problem
> >> as well?
> > 
> > Yes, I think that's the right answer. It's certainly the right design
> > in my case, and perhaps in the general case too.
> 
> I think that this is the right design for now, given the constraints of
> the current cred API; however, it's certainly possible we could think up
> an extension to the cred API that would make this case easier to deal
> with.  It also leaves open some not-quite-trivial questions like "how do
> you know when to expire the cache, which are usually easy to work out for
> a particular application but do not generalize easily.

That was the main reason I didn't actually implement a cache :-)
Plus I have a nice solution that works, and only costs one LDAP call.

> I hope you don't give up on thinking about a nicer and more general API
> just because the immediate problem is solved :).  Glad I could offer
> useful advice, though.

Thank you!

The main question left in my mind is about the degree of dependency
between the checker and the realm if extra information is passed,
by whatever method. If the realm expects the checker to pass it
(for instance) an LDAP session, then it's pretty much committed
to one particular checker. That means abandoning pluggability -
which admittedly isn't very sensible in that case - and once you
do that, simply passing back a complex structure as an avatarId
seems as good a method as any. It's simple, and it works now.
Likewise Itamar's special-purpose portal suggestion.

Peter.



From glyph at twistedmatrix.com  Mon Jan 14 22:30:39 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 14 Jan 2013 21:30:39 -0800
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <1358212208.23140.140661177616037.0DDCE0AA@webmail.messagingengine.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
	<443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
	<1358212208.23140.140661177616037.0DDCE0AA@webmail.messagingengine.com>
Message-ID: <61C4A6AF-6E5B-4396-BAA9-5F58B03AB03C@twistedmatrix.com>


On Jan 14, 2013, at 5:10 PM, Peter Westlake <peter.westlake at pobox.com> wrote:

> The main question left in my mind is about the degree of dependency
> between the checker and the realm if extra information is passed,
> by whatever method. If the realm expects the checker to pass it
> (for instance) an LDAP session, then it's pretty much committed
> to one particular checker. That means abandoning pluggability -
> which admittedly isn't very sensible in that case - and once you
> do that, simply passing back a complex structure as an avatarId
> seems as good a method as any. It's simple, and it works now.
> Likewise Itamar's special-purpose portal suggestion.

The problem is not so much that pluggability is no longer possible if the realm requires something that not all checkers can provide, but that the failure mode is incoherent.  For example, checkers specify the credential interfaces that they can check specifically so that they can be slotted together with a protocol seamlessly; if a protocol offers credentials that can't be checked by any of the checkers on its portal, it will try not to offer those mechanisms to its peer.  Ultimately, if it tries to shove the wrong credentials in, it will still get a sensible authentication failure, not a random exception.

This is important because, for example, credentials checkers are pluggable via the --auth= option to certain twistd plugins; in the future, hopefully realms could be as well.

If the realm could declare what it needed from the avatar ID (or, probably, we'd want to call it something other than "ID" if it does more than identify the avatar) and it could sensibly report errors when those things were not provided, then we could have a mechanism that nicely integrated everything.

(Also, stuff like this is why we use zope.interface - it makes describing the way these bits fit together relatively straightforward.)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130114/7738811e/attachment.html>

From hs at ox.cx  Tue Jan 15 00:39:21 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 15 Jan 2013 08:39:21 +0100
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
	<443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
Message-ID: <0EA0B303-791E-461B-93CC-6B4175242D47@ox.cx>


Am 14.01.2013 um 23:58 schrieb Glyph <glyph at twistedmatrix.com>:

>>> It seems like the "shared caching reference" would solve this problem
>>> as well?
>> 
>> Yes, I think that's the right answer. It's certainly the right design
>> in my case, and perhaps in the general case too.
> 
> I think that this is the right design for now, given the constraints of the current cred API; however, it's certainly possible we could think up an extension to the cred API that would make this case easier to deal with.  It also leaves open some not-quite-trivial questions like "how do you know when to expire the cache, which are usually easy to work out for a particular application but do not generalize easily.

I was under the impression that the IRealm.requestAvatar() is *always* called *once* after ICredentialsChecker.requestAvatarId() so I simply delete the data from the cache once my avatar is created (and it works fine).

Am I presuming something I shouldn’t?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130115/ae6f7f11/attachment.html>

From fabian.rothfuchs at googlemail.com  Tue Jan 15 08:26:19 2013
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Tue, 15 Jan 2013 16:26:19 +0100
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CAOp9P3pvdDUKi3dJsct0n4JOTpV9ECNH5WZxM12MD7muhkuXAw@mail.gmail.com>
Message-ID: <CD1B33AB.41B9A%fabian.rothfuchs@googmail.com>

Yes, I thought so, too. Indeed it happens that the reactor is started
automatically, but after the test succeeds, it's not being stopped (only
chance is to kill ­9 it).
I'm afraid I need to use the reactor, as I'd like to make automatic
end-to-end tests within my application, going from the workflow until a
dummy server, returning the data that was sent by the protocol back to the
test-callback.

From:  Itamar Turner-Trauring <itamar at futurefoundries.com>
Reply-To:  Twisted general discussion <twisted-python at twistedmatrix.com>
Date:  Sunday, January 13, 2013 12:31 AM
To:  Twisted general discussion <twisted-python at twistedmatrix.com>
Subject:  Re: [Twisted-Python] Stopping Reactor in UnitTest Callback



On Sat, Jan 12, 2013 at 9:00 AM, Fabian Rothfuchs
<fabian.rothfuchs at googlemail.com> wrote:
> I'm in the dilemma of using both - Django and Twisted.
> My goal is to have Django initialising the test (python manage.py test
> <appname>), instead of trial, as it will setup the whole test environment
> (I.e. Creates a db copy, allows per-model testing, follows certain
> conventions, etc).
> 
> As to that I'm trying to find a way how to start/stop the reactor from the
> test, as trial is not executed.
> Do you have an idea or an approach how this could be realised?

The functionality to start/stop the reactor when a test returns a Deferred
is part of twisted.trial.unittest.TestCase, which subclasses Python's
unittest.TestCase. As a result you don't need to use the trial command-line
tool, you can use any Python test runner that knows about Python's TestCase;
just make sure to subclass twisted.trial.unittest.TestCase, and your test
will support running the reactor for you when you return a Deferred.

Or, if possible, you can avoid using the reactor at all; some approaches (as
mentioned by Jean-Paul) are described in the trial documentation:
http://twistedmatrix.com/documents/current/core/howto/trial.html

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/  Twisted consulting, training and support.
_______________________________________________ Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130115/a325f34f/attachment.html>

From itamar at futurefoundries.com  Tue Jan 15 10:22:37 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Tue, 15 Jan 2013 12:22:37 -0500
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CD1B33AB.41B9A%fabian.rothfuchs@googmail.com>
References: <CAOp9P3pvdDUKi3dJsct0n4JOTpV9ECNH5WZxM12MD7muhkuXAw@mail.gmail.com>
	<CD1B33AB.41B9A%fabian.rothfuchs@googmail.com>
Message-ID: <CAOp9P3rnSMkk20oW5fF91oWgMBaErYDhvH_WGd3HNjFHR5w6zA@mail.gmail.com>

On Tue, Jan 15, 2013 at 10:26 AM, Fabian Rothfuchs <
fabian.rothfuchs at googlemail.com> wrote:

> Yes, I thought so, too. Indeed it happens that the reactor is started
> automatically, but after the test succeeds, it's not being stopped (only
> chance is to kill –9 it).
>

Perhaps the problem isn't with the test framework, but with your test. Can
you show us a minimal piece of code that reproduces the problem?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130115/dc20c345/attachment.html>

From james.voip+twisted at gmail.com  Tue Jan 15 10:38:44 2013
From: james.voip+twisted at gmail.com (outcast)
Date: Tue, 15 Jan 2013 12:38:44 -0500
Subject: [Twisted-Python] Layer 2 and Twitsted
Message-ID: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>

Greetings,

Has anyone done any work around using twisted for layer 2 traffic?

-James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130115/a22bf981/attachment.html>

From mithrandi at mithrandi.net  Tue Jan 15 10:47:02 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 15 Jan 2013 19:47:02 +0200
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
References: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
Message-ID: <CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>

On 15 Jan 2013 7:41 PM, "outcast" <james.voip+twisted at gmail.com> wrote:
>
> Greetings,
>
> Has anyone done any work around using twisted for layer 2 traffic?

Layer 2 traffic would be the domain of twisted.pair; I'm not aware of
anyone using this in a "real" project, though, and I'd wager it needs some
extra work before it'll be useful for most purposes.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130115/e3a6c243/attachment.html>

From james.voip+twisted at gmail.com  Tue Jan 15 10:58:09 2013
From: james.voip+twisted at gmail.com (outcast)
Date: Tue, 15 Jan 2013 12:58:09 -0500
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>
References: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
	<CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>
Message-ID: <CALcVfM3uBjSRq0aTxEvJjMrAEMjA=Y0Mks1Mc7XMj-PZ3KtwEg@mail.gmail.com>

On Tue, Jan 15, 2013 at 12:47 PM, Tristan Seligmann <mithrandi at mithrandi.net
> wrote:

>
> On 15 Jan 2013 7:41 PM, "outcast" <james.voip+twisted at gmail.com> wrote:
> >
> > Greetings,
> >
> > Has anyone done any work around using twisted for layer 2 traffic?
>
> Layer 2 traffic would be the domain of twisted.pair; I'm not aware of
> anyone using this in a "real" project, though, and I'd wager it needs some
> extra work before it'll be useful for most purposes.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


I have been working on a kernel module to allow me to get the packets out
of kernel land and into user space ATM. Not sure how twisted.pair does
that. I will go and google but the ultimate goal is to have a complete
network stack in python. So any information would be greatly appreciated.
If I can get some good traction I might bring it to the next hack-a-thon
just learning ATM but I have purpose in mind.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130115/190f6ad2/attachment.html>

From james.voip+twisted at gmail.com  Tue Jan 15 11:06:00 2013
From: james.voip+twisted at gmail.com (outcast)
Date: Tue, 15 Jan 2013 13:06:00 -0500
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <CALcVfM3uBjSRq0aTxEvJjMrAEMjA=Y0Mks1Mc7XMj-PZ3KtwEg@mail.gmail.com>
References: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
	<CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>
	<CALcVfM3uBjSRq0aTxEvJjMrAEMjA=Y0Mks1Mc7XMj-PZ3KtwEg@mail.gmail.com>
Message-ID: <CALcVfM0kxu9nU_VAVFDJTOiWdqHk-9YiW=yoEtYGYTuRTt0xJw@mail.gmail.com>

On Tue, Jan 15, 2013 at 12:58 PM, outcast <james.voip+twisted at gmail.com>wrote:

> On Tue, Jan 15, 2013 at 12:47 PM, Tristan Seligmann <
> mithrandi at mithrandi.net> wrote:
>
>>
>> On 15 Jan 2013 7:41 PM, "outcast" <james.voip+twisted at gmail.com> wrote:
>> >
>> > Greetings,
>> >
>> > Has anyone done any work around using twisted for layer 2 traffic?
>>
>> Layer 2 traffic would be the domain of twisted.pair; I'm not aware of
>> anyone using this in a "real" project, though, and I'd wager it needs some
>> extra work before it'll be useful for most purposes.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> I have been working on a kernel module to allow me to get the packets out
> of kernel land and into user space ATM. Not sure how twisted.pair does
> that. I will go and google but the ultimate goal is to have a complete
> network stack in python. So any information would be greatly appreciated.
> If I can get some good traction I might bring it to the next hack-a-thon
> just learning ATM but I have purpose in mind.
>
>
>
>
>
> Just looked at the documentation. it looks like it using libpcap and tun
interface. No real hooks into ethX type devices.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130115/1c696284/attachment.html>

From glyph at twistedmatrix.com  Tue Jan 15 12:13:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 15 Jan 2013 11:13:31 -0800
Subject: [Twisted-Python] Must avatarId always be a string?
In-Reply-To: <0EA0B303-791E-461B-93CC-6B4175242D47@ox.cx>
References: <1357735745.32129.140661175341881.45B757BD@webmail.messagingengine.com>
	<50ED6AE8.5070200@wulczer.org>
	<CAFycZ9c6S9JDi6Uuasuubo8wwp0FxqYspr=WKAwihFL46N8yKw@mail.gmail.com>
	<1357752411.9538.140661175452317.30438F89@webmail.messagingengine.com>
	<6395EDED-528D-40E1-BCBC-73912E0EC62C@twistedmatrix.com>
	<1357828914.29545.140661175828693.55A45495@webmail.messagingengine.com>
	<3268330C-2763-4673-B84C-3E8F8F9CF606@twistedmatrix.com>
	<1358162335.26544.140661177288881.35A3F53F@webmail.messagingengine.com>
	<443FD971-8DA7-4ACA-891E-7B66C11BD7FB@twistedmatrix.com>
	<0EA0B303-791E-461B-93CC-6B4175242D47@ox.cx>
Message-ID: <6BDDEE6D-61CD-4DFE-9472-A291271E03E4@twistedmatrix.com>


On Jan 14, 2013, at 11:39 PM, Hynek Schlawack <hs at ox.cx> wrote:

> 
> Am 14.01.2013 um 23:58 schrieb Glyph <glyph at twistedmatrix.com>:
> 
>>>> It seems like the "shared caching reference" would solve this problem
>>>> as well?
>>> 
>>> Yes, I think that's the right answer. It's certainly the right design
>>> in my case, and perhaps in the general case too.
>> 
>> I think that this is the right design for now, given the constraints of the current cred API; however, it's certainly possible we could think up an extension to the cred API that would make this case easier to deal with.  It also leaves open some not-quite-trivial questions like "how do you know when to expire the cache, which are usually easy to work out for a particular application but do not generalize easily.
> 
> I was under the impression that the IRealm.requestAvatar() is *always* called *once* after ICredentialsChecker.requestAvatarId() so I simply delete the data from the cache once my avatar is created (and it works fine).
> 
> Am I presuming something I shouldn’t?

No, you're correct.  But, if you're using directory information for other purposes, perhaps you would want to expire it later.  Hence, hard to generalize.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130115/17cfa171/attachment.html>

From exarkun at twistedmatrix.com  Tue Jan 15 12:19:27 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 15 Jan 2013 19:19:27 -0000
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <CALcVfM0kxu9nU_VAVFDJTOiWdqHk-9YiW=yoEtYGYTuRTt0xJw@mail.gmail.com>
References: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
	<CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>
	<CALcVfM3uBjSRq0aTxEvJjMrAEMjA=Y0Mks1Mc7XMj-PZ3KtwEg@mail.gmail.com>
	<CALcVfM0kxu9nU_VAVFDJTOiWdqHk-9YiW=yoEtYGYTuRTt0xJw@mail.gmail.com>
Message-ID: <20130115191927.9595.738732781.divmod.xquotient.1@localhost6.localdomain6>

On 06:06 pm, james.voip+twisted at gmail.com wrote:
>On Tue, Jan 15, 2013 at 12:58 PM, outcast 
><james.voip+twisted at gmail.com>wrote:
>>
>>I have been working on a kernel module to allow me to get the packets 
>>out
>>of kernel land and into user space ATM. Not sure how twisted.pair does
>>that. I will go and google but the ultimate goal is to have a complete
>>network stack in python. So any information would be greatly 
>>appreciated.
>>If I can get some good traction I might bring it to the next 
>>hack-a-thon
>>just learning ATM but I have purpose in mind.
>>
>>
>>
>>
>>
>>Just looked at the documentation. it looks like it using libpcap and 
>>tun
>interface. No real hooks into ethX type devices.

How is that different from what you want?  Are you looking to get 
ethernet frames instead of IP datagrams?  You can do that with tun 
devices too (perhaps they're called "tap" devices when used in that 
context, though there's basically no difference in how they are set up 
and used).

Jean-Paul



From james.voip+twisted at gmail.com  Tue Jan 15 12:38:47 2013
From: james.voip+twisted at gmail.com (outcast)
Date: Tue, 15 Jan 2013 14:38:47 -0500
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <20130115191927.9595.738732781.divmod.xquotient.1@localhost6.localdomain6>
References: <CALcVfM0YzjZdJ096=8EUShmiN8NuYhMPvDQ2x6khggSKYaCupQ@mail.gmail.com>
	<CAMcKhMThR6iabsC76HND75tdNbw3F0JBbvE+Dz0pyMdzt9w_Og@mail.gmail.com>
	<CALcVfM3uBjSRq0aTxEvJjMrAEMjA=Y0Mks1Mc7XMj-PZ3KtwEg@mail.gmail.com>
	<CALcVfM0kxu9nU_VAVFDJTOiWdqHk-9YiW=yoEtYGYTuRTt0xJw@mail.gmail.com>
	<20130115191927.9595.738732781.divmod.xquotient.1@localhost6.localdomain6>
Message-ID: <CALcVfM1QVXpyJ+aeRit_UjDC+uQQ2Kvmh2ZJU6bFb5Jb8oDLWA@mail.gmail.com>

On Tue, Jan 15, 2013 at 2:19 PM, <exarkun at twistedmatrix.com> wrote:

> On 06:06 pm, james.voip+twisted at gmail.com wrote:
> >On Tue, Jan 15, 2013 at 12:58 PM, outcast
> ><james.voip+twisted at gmail.com>wrote:
> >>
> >>I have been working on a kernel module to allow me to get the packets
> >>out
> >>of kernel land and into user space ATM. Not sure how twisted.pair does
> >>that. I will go and google but the ultimate goal is to have a complete
> >>network stack in python. So any information would be greatly
> >>appreciated.
> >>If I can get some good traction I might bring it to the next
> >>hack-a-thon
> >>just learning ATM but I have purpose in mind.
> >>
> >>
> >>
> >>
> >>
> >>Just looked at the documentation. it looks like it using libpcap and
> >>tun
> >interface. No real hooks into ethX type devices.
>
> How is that different from what you want?  Are you looking to get
> ethernet frames instead of IP datagrams?  You can do that with tun
> devices too (perhaps they're called "tap" devices when used in that
> context, though there's basically no difference in how they are set up
> and used).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


Don't want to use tap type of devices. Want to be able to handle packets
natively from the interface with minimal amount of overhead. Basically want
my own rx_handler to python call back. Yes I want the raw ethernet frames.
Looking at an embedded solution so its a case of less is more.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130115/5d20ada7/attachment.html>

From adi at roiban.ro  Wed Jan 16 08:47:17 2013
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 16 Jan 2013 17:47:17 +0200
Subject: [Twisted-Python] TLSMemoryBIOProtocol _shutdownTLS what to do when
	not successfull
Message-ID: <CAFycZ9fa3Wj5mc+OucCngXCiJju0z6mkUUdNihuiVS7dNGdTXg@mail.gmail.com>

Hi,

Here is this code in t.p.t.TLSMemoryBIOProtocol

    def _shutdownTLS(self):
        """
        Initiate, or reply to, the shutdown handshake of the TLS layer.
        """
        self._flushSendBIO()
        shutdownSuccess = self._tlsConnection.shutdown()
        self._flushSendBIO()
        if shutdownSuccess:
            # Both sides have shutdown, so we can start closing lower-level
            # transport. This will also happen if we haven't started
            # negotiation at all yet, in which case shutdown succeeds
            # immediately.
            self.transport.loseConnection()


>From my tests using Curl as a client, self._tlsConnection.shutdown()
always returns False.

-----

I need to call

self._tlsConnection.set_shutdown(SENT_SHUTDOWN | RECEIVED_SHUTDOWN)

before calling

shutdownSuccess = self._tlsConnection.shutdown()

and then  self._tlsConnection.shutdown() returns True, otherwise it
returns False.

    def loseConnection(self):
        """
        Send a TLS close alert and close the underlying connection.
        """
        if self.disconnecting:
            return
        self.disconnecting = True
        if not self._writeBlockedOnRead and self._producer is None:
            from OpenSSL.SSL import RECEIVED_SHUTDOWN
            self._tlsConnection.set_shutdown(RECEIVED_SHUTDOWN)
            self._shutdownTLS()

    def _shutdownTLS(self):
        """
        Initiate, or reply to, the shutdown handshake of the TLS layer.
        """
        self._flushSendBIO()
        shutdownSuccess = self._tlsConnection.shutdown()
        self._flushSendBIO()
        if shutdownSuccess:
            # Both sides have shutdown, so we can start closing lower-level
            # transport. This will also happen if we haven't started
            # negotiation at all yet, in which case shutdown succeeds
            # immediately.
            self.transport.loseConnection()


----


How should the connection be handled when
self._tlsConnection.shutdown() returns False?

>From my tests, it looks like when shutdownSuccess is False, the
self.transport.loseConnection() is never closed.

Many thanks,
Adi

-- 
Adi Roiban



From exarkun at twistedmatrix.com  Wed Jan 16 10:03:45 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 16 Jan 2013 17:03:45 -0000
Subject: [Twisted-Python] TLSMemoryBIOProtocol _shutdownTLS what to do
 when not successfull
In-Reply-To: <CAFycZ9fa3Wj5mc+OucCngXCiJju0z6mkUUdNihuiVS7dNGdTXg@mail.gmail.com>
References: <CAFycZ9fa3Wj5mc+OucCngXCiJju0z6mkUUdNihuiVS7dNGdTXg@mail.gmail.com>
Message-ID: <20130116170345.3644.2102619719.divmod.xquotient.12@localhost6.localdomain6>

On 03:47 pm, adi at roiban.ro wrote:
>Hi,
>
>Here is this code in t.p.t.TLSMemoryBIOProtocol
>
>    def _shutdownTLS(self):
>        """
>        Initiate, or reply to, the shutdown handshake of the TLS layer.
>        """
>        self._flushSendBIO()
>        shutdownSuccess = self._tlsConnection.shutdown()
>        self._flushSendBIO()

This isn't actually how this method is implemented in trunk at HEAD.  I 
didn't search through its entire revision history to see if it was ever 
implemented this way, but I don't think it was. :)

Can you produce this behavior with the latest Twisted release, 
unmodified?
>        if shutdownSuccess:
>            # Both sides have shutdown, so we can start closing lower- 
>level
>            # transport. This will also happen if we haven't started
>            # negotiation at all yet, in which case shutdown succeeds
>            # immediately.
>            self.transport.loseConnection()
>> From my tests using Curl as a client, self._tlsConnection.shutdown()
>always returns False.

Can you share a minimal server which demonstrates this?  Also, an exact 
curl command line would be handy.
>-----
>
>I need to call
>
>self._tlsConnection.set_shutdown(SENT_SHUTDOWN | RECEIVED_SHUTDOWN)

Just so everyone's clear, this isn't really a solution.  It's roughly 
the same as not calling shutdown at all, just calling loseConnection.
>
>How should the connection be handled when
>self._tlsConnection.shutdown() returns False?

The connection should wait for the peer to call shutdown as well and 
then close the connection.  This is what the `ZeroReturnError` handling 
in `dataReceived` is for.
>> From my tests, it looks like when shutdownSuccess is False, the
>self.transport.loseConnection() is never closed.

That's right.  But shutdownSuccess is sometimes expected to be true.

Jean-Paul



From dbs at nimbula.com  Wed Jan 16 11:05:33 2013
From: dbs at nimbula.com (David Serafini)
Date: Wed, 16 Jan 2013 10:05:33 -0800
Subject: [Twisted-Python] Layer 2 and Twitsted
Message-ID: <CAJy_jQQi9r_R2wAj+TCeJhaoFpnaX3t2uuXcuFjeveJ-2V-gVw@mail.gmail.com>

> Date: Tue, 15 Jan 2013 14:38:47 -0500
> From: outcast <james.voip+twisted at gmail.com>
>
> Don't want to use tap type of devices. Want to be able to handle packets
> natively from the interface with minimal amount of overhead. Basically want
> my own rx_handler to python call back. Yes I want the raw ethernet frames.
> Looking at an embedded solution so its a case of less is more.

What about a kernel bypass solution like Solarflare?
You'd have to write a Python-C interface and use a special NIC, but it
would give you raw access to the packets straight off the NIC.

<dbs>



From james.voip+twisted at gmail.com  Wed Jan 16 11:18:31 2013
From: james.voip+twisted at gmail.com (outcast)
Date: Wed, 16 Jan 2013 13:18:31 -0500
Subject: [Twisted-Python] Layer 2 and Twitsted
In-Reply-To: <CAJy_jQQi9r_R2wAj+TCeJhaoFpnaX3t2uuXcuFjeveJ-2V-gVw@mail.gmail.com>
References: <CAJy_jQQi9r_R2wAj+TCeJhaoFpnaX3t2uuXcuFjeveJ-2V-gVw@mail.gmail.com>
Message-ID: <CALcVfM1-Eb3NkefFzpxQ_niUT=yB2QSa0NDBaU5PqvoYA1dbKA@mail.gmail.com>

Understood.....trying to see if I can get something that works with all
interface types right  I am having a little trouble with getting my
rx_handler to trigger even though it has been registered.

-James
On Wed, Jan 16, 2013 at 1:05 PM, David Serafini <dbs at nimbula.com> wrote:

> Solarflare
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130116/92606cfc/attachment.html>

From angelo.dellaera at gmail.com  Thu Jan 17 09:22:26 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Thu, 17 Jan 2013 17:22:26 +0100
Subject: [Twisted-Python] Twisted Names strings
Message-ID: <20130117172226.643a8b42@saiph.darkstar.net>


After updating Twisted to 12.3.0 I started getting errors like the following one

2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site-packages/twisted/names/common.py", line 93, in lookupAddress
2013-01-17 14:38:23+0100 [-]     return self._lookup(name, dns.IN, dns.A, timeout)
2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site-packages/twisted/names/client.py", line 384, in _lookup
2013-01-17 14:38:23+0100 [-]     d = self.queryUDP([dns.Query(name, type, cls)], timeout)
2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site-packages/twisted/names/dns.py", line 484, in __init__
2013-01-17 14:38:23+0100 [-]     self.name = Name(name)
2013-01-17 14:38:23+0100 [-]   File"/usr/lib64/python2.7/site-packages/twisted/names/dns.py", line 357, in __init__ 
2013-01-17 14:38:23+0100 [-]     raise TypeError("%r is not a byte string" % (name,)) 
2013-01-17 14:38:23+0100 [-] TypeError: u'example.com' is not a byte string

Taking a look at documentation I found this document

http://twistedmatrix.com/documents/current/core/howto/python3.html

which states

"twisted.names.dns deals with strings with a wide range of meanings,
often several for each DNS record type. Most of these strings have
remained as byte strings, which will probably require application
updates (for the reason given in the FilePath section above). Some
strings have changed to text strings, though. Any string representing a
human readable address (for example, Record_A's address parameter) is
now a text string. Additionally, time-to-live (ttl) values given as
strings must now be given as text strings."

which seems to describe the problem I'm experiencing. 

But let me say that I'm currently using Python 2.7.3 and I was surprised in realizing 
that a simple update from a minor 12.x release was enough to disrupt my application. 

Don't you think that a kind of compatibility mechanism (maybe with a warning message) 
would have been a more gentle way of doing this transition especially for those who
are still using Python 2?

Thanks and regards,
  
-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org



From exarkun at twistedmatrix.com  Thu Jan 17 10:19:01 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 17 Jan 2013 17:19:01 -0000
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130117172226.643a8b42@saiph.darkstar.net>
References: <20130117172226.643a8b42@saiph.darkstar.net>
Message-ID: <20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>

On 04:22 pm, angelo.dellaera at gmail.com wrote:
>
>After updating Twisted to 12.3.0 I started getting errors like the 
>following one
>
>2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site- 
>packages/twisted/names/common.py", line 93, in lookupAddress
>2013-01-17 14:38:23+0100 [-]     return self._lookup(name, dns.IN, 
>dns.A, timeout)
>2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site- 
>packages/twisted/names/client.py", line 384, in _lookup
>2013-01-17 14:38:23+0100 [-]     d = self.queryUDP([dns.Query(name, 
>type, cls)], timeout)
>2013-01-17 14:38:23+0100 [-]   File "/usr/lib64/python2.7/site- 
>packages/twisted/names/dns.py", line 484, in __init__
>2013-01-17 14:38:23+0100 [-]     self.name = Name(name)
>2013-01-17 14:38:23+0100 [-]   File"/usr/lib64/python2.7/site- 
>packages/twisted/names/dns.py", line 357, in __init__
>2013-01-17 14:38:23+0100 [-]     raise TypeError("%r is not a byte 
>string" % (name,))
>2013-01-17 14:38:23+0100 [-] TypeError: u'example.com' is not a byte 
>string
>
>Taking a look at documentation I found this document
>
>http://twistedmatrix.com/documents/current/core/howto/python3.html
>
>which states
>
>"twisted.names.dns deals with strings with a wide range of meanings,
>often several for each DNS record type. Most of these strings have
>remained as byte strings, which will probably require application
>updates (for the reason given in the FilePath section above). Some
>strings have changed to text strings, though. Any string representing a
>human readable address (for example, Record_A's address parameter) is
>now a text string. Additionally, time-to-live (ttl) values given as
>strings must now be given as text strings."
>
>which seems to describe the problem I'm experiencing.
>
>But let me say that I'm currently using Python 2.7.3 and I was 
>surprised in realizing
>that a simple update from a minor 12.x release was enough to disrupt my 
>application.
>
>Don't you think that a kind of compatibility mechanism (maybe with a 
>warning message)
>would have been a more gentle way of doing this transition especially 
>for those who
>are still using Python 2?

Absolutely.  This issue has been reported in connection to Wokkel 
already:

  http://twistedmatrix.com/trac/ticket/6245

There is currently a fix proposed and waiting review, and there has been 
some discussion about doing a maintenance release of 12.3 to distribute 
the fix.  Thank you for reporting your experience with 12.3.0 (although 
testing during the /pre/-release period would have saved everyone some 
trouble :).

It would be great if you could try out the proposed fix and let us know 
if it also addresses the problem with your application.

Since some concern has been voiced over the effort necessary to do a 
12.3.1 release (as opposed to just including this fix in 13.0), I'd also 
be interested to know whether one or the other of those would be more 
helpful for you - does anything prevent you (or your users) from 
upgrading to 13.0 once it is released?

Thanks,
Jean-Paul



From _ at lvh.cc  Thu Jan 17 10:24:21 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 17 Jan 2013 18:24:21 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130117172226.643a8b42@saiph.darkstar.net>
References: <20130117172226.643a8b42@saiph.darkstar.net>
Message-ID: <CAE_Hg6YA3jMVgC7HvwGrt_Km9Nggb7LzLBJ0kR75bQh6Hbuu=g@mail.gmail.com>

FYI, this change also broke wokkel, too, so at least you're not alone, it
seems...

https://twistedmatrix.com/trac/ticket/6245


On Thu, Jan 17, 2013 at 5:22 PM, Angelo Dell'Aera <angelo.dellaera at gmail.com
> wrote:

>
> After updating Twisted to 12.3.0 I started getting errors like the
> following one
>
> 2013-01-17 14:38:23+0100 [-]   File
> "/usr/lib64/python2.7/site-packages/twisted/names/common.py", line 93, in
> lookupAddress
> 2013-01-17 14:38:23+0100 [-]     return self._lookup(name, dns.IN, dns.A,
> timeout)
> 2013-01-17 14:38:23+0100 [-]   File
> "/usr/lib64/python2.7/site-packages/twisted/names/client.py", line 384, in
> _lookup
> 2013-01-17 14:38:23+0100 [-]     d = self.queryUDP([dns.Query(name, type,
> cls)], timeout)
> 2013-01-17 14:38:23+0100 [-]   File
> "/usr/lib64/python2.7/site-packages/twisted/names/dns.py", line 484, in
> __init__
> 2013-01-17 14:38:23+0100 [-]     self.name = Name(name)
> 2013-01-17 14:38:23+0100 [-]
> File"/usr/lib64/python2.7/site-packages/twisted/names/dns.py", line 357, in
> __init__
> 2013-01-17 14:38:23+0100 [-]     raise TypeError("%r is not a byte string"
> % (name,))
> 2013-01-17 14:38:23+0100 [-] TypeError: u'example.com' is not a byte
> string
>
> Taking a look at documentation I found this document
>
> http://twistedmatrix.com/documents/current/core/howto/python3.html
>
> which states
>
> "twisted.names.dns deals with strings with a wide range of meanings,
> often several for each DNS record type. Most of these strings have
> remained as byte strings, which will probably require application
> updates (for the reason given in the FilePath section above). Some
> strings have changed to text strings, though. Any string representing a
> human readable address (for example, Record_A's address parameter) is
> now a text string. Additionally, time-to-live (ttl) values given as
> strings must now be given as text strings."
>
> which seems to describe the problem I'm experiencing.
>
> But let me say that I'm currently using Python 2.7.3 and I was surprised
> in realizing
> that a simple update from a minor 12.x release was enough to disrupt my
> application.
>
> Don't you think that a kind of compatibility mechanism (maybe with a
> warning message)
> would have been a more gentle way of doing this transition especially for
> those who
> are still using Python 2?
>
> Thanks and regards,
>
> --
>
> Angelo Dell'Aera 'buffer'
> Antifork Research, Inc.         http://buffer.antifork.org
> Sysenter Honeynet Project       http://www.sysenter-honeynet.org
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130117/be9f9e57/attachment.html>

From glyph at twistedmatrix.com  Thu Jan 17 13:15:03 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 17 Jan 2013 12:15:03 -0800
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>


On Jan 17, 2013, at 9:19 AM, exarkun at twistedmatrix.com wrote:

> (although testing during the /pre/-release period would have saved everyone some 
> trouble :).

This bears repeating!  Not to harass you, Angelo - dealing with a regression in Twisted that breaks your app is punishment enough :) - but to remind everyone that this is exactly why we have the pre-release testing period.

When you get the 13.0 release announcement, please remember that you only have a week!  All you need to do is to run your respective test suite and send a short email saying if you found any issues.  (Filing a ticket would be nice, but if that's too much work, don't worry about it: for pre-release regressions, we'll file tickets and work on patches for you.)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130117/2d0c9b43/attachment.html>

From dreid at dreid.org  Thu Jan 17 13:57:13 2013
From: dreid at dreid.org (David Reid)
Date: Thu, 17 Jan 2013 12:57:13 -0800
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
Message-ID: <CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>

Honestly, if you have comprehensive automated testing and plan to upgrade
Twisted regularly or to try and support the latest release it is worth the
effort to setup testing against Twisted trunk.

https://github.com/dreid/treq/blob/master/.travis.yml shows how I do this
with travis-ci.

-David


On Thu, Jan 17, 2013 at 12:15 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jan 17, 2013, at 9:19 AM, exarkun at twistedmatrix.com wrote:
>
> (although testing during the /pre/-release period would have saved
> everyone some
> trouble :).
>
>
> This bears repeating!  Not to harass you, Angelo - dealing with a
> regression in Twisted that breaks your app is punishment enough :) - but to
> remind everyone that this is exactly why we have the pre-release testing
> period.
>
> When you get the 13.0 release announcement, please remember that you only
> have a week!  All you need to do is to run your respective test suite and
> send a short email saying if you found any issues.  (Filing a ticket would
> be nice, but if that's too much work, don't worry about it: for pre-release
> regressions, we'll file tickets and work on patches for you.)
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130117/b23a0f37/attachment.html>

From glyph at twistedmatrix.com  Thu Jan 17 14:07:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 17 Jan 2013 13:07:27 -0800
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
	<CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>
Message-ID: <683C73E2-8857-4C89-ACEB-F1CEFD9EE7F6@twistedmatrix.com>


On Jan 17, 2013, at 12:57 PM, David Reid <dreid at dreid.org> wrote:

> Honestly, if you have comprehensive automated testing and plan to upgrade Twisted regularly or to try and support the latest release it is worth the effort to setup testing against Twisted trunk.
> 
> https://github.com/dreid/treq/blob/master/.travis.yml shows how I do this with travis-ci.

Thanks for the pointer, David.  I will disseminate this more widely.

It's also important for the Twisted team to find out about failures though, so it's still important to _look_ at your travis-ci build results in the pre-release week to make sure that everything is still working, and let us know if it isn't.

It would be great if we could automate that, too; would it be possible to set up a page that just has at-a-glance build results for 3rd-party projects against twisted trunk?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130117/69663fc2/attachment.html>

From ralphm at ik.nu  Thu Jan 17 15:09:01 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Thu, 17 Jan 2013 23:09:01 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
	<CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>
Message-ID: <c6b7b77b-136d-46ff-8be5-5ac259884551@email.android.com>

David Reid <dreid at dreid.org> wrote:

>Honestly, if you have comprehensive automated testing and plan to
>upgrade
>Twisted regularly or to try and support the latest release it is worth
>the
>effort to setup testing against Twisted trunk.
>
>https://github.com/dreid/treq/blob/master/.travis.yml shows how I do
>this
>with travis-ci.

In this particular case, the problem was an integration issue. All Wokkel's test cases passed (over at travis-ci), but the code setting up clients was calling SRVConnect with a value that is now being rejected. I.e. it used to happily, but erroneously, take unicode strings with ASCII compatible code points. Apart from actually using a client, no unit tests would have caught this, I believe.

That said, I fully take blame for not making time to test Wokkel against the pre-release.


-- 
ralphm
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130117/379f2875/attachment-0001.html>

From ralphm at ik.nu  Thu Jan 17 16:09:02 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Fri, 18 Jan 2013 00:09:02 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <c6b7b77b-136d-46ff-8be5-5ac259884551@email.android.com>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
	<CA+t4pazPep=Pu90-FP6LQS5yRdPOkC5+bLjeiBhB5LXrTvhXYg@mail.gmail.com>
	<c6b7b77b-136d-46ff-8be5-5ac259884551@email.android.com>
Message-ID: <50F8848E.4090106@ik.nu>

On 2013-01-17 23:09, Ralph Meijer wrote:
> David Reid <dreid at dreid.org> wrote:
>
>     Honestly, if you have comprehensive automated testing and plan to
>     upgrade Twisted regularly or to try and support the latest release
>     it is worth the effort to setup testing against Twisted trunk.
>
>     https://github.com/dreid/treq/blob/master/.travis.yml shows how I do
>     this with travis-ci.

(interestingly, K-9 only sent my reply in the plain-text version:)

In this particular case, the problem was an integration issue. All 
Wokkel's test cases passed (over at travis-ci), but the code setting up 
clients was calling SRVConnect with a value that is now being rejected. 
I.e. it used to happily, but erroneously, take unicode strings with 
ASCII compatible code points. Apart from actually using a client, no 
unit tests would have caught this, I believe.

That said, I fully take blame for not making time to test Wokkel against 
the pre-release.

-- 
ralphm



From angelo.dellaera at gmail.com  Fri Jan 18 06:58:45 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Fri, 18 Jan 2013 14:58:45 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <20130118145845.1793625f@saiph.darkstar.net>

On Thu, 17 Jan 2013 17:19:01 -0000
exarkun at twistedmatrix.com wrote:

> Absolutely.  This issue has been reported in connection to Wokkel 
> already:
> 
>   http://twistedmatrix.com/trac/ticket/6245
> 
> There is currently a fix proposed and waiting review, and there has
> been some discussion about doing a maintenance release of 12.3 to
> distribute the fix.  Thank you for reporting your experience with
> 12.3.0 (although testing during the /pre/-release period would have
> saved everyone some trouble :).
> 
> It would be great if you could try out the proposed fix and let us
> know if it also addresses the problem with your application.

Sure. I'll test it during this weekend and let you know if it solves
the problem.


> Since some concern has been voiced over the effort necessary to do a 
> 12.3.1 release (as opposed to just including this fix in 13.0), I'd
> also be interested to know whether one or the other of those would be
> more helpful for you - does anything prevent you (or your users) from 
> upgrading to 13.0 once it is released?

There's nothing which prevents me from upgrading from 12.x to 13.0 so 
I think that after testing the proposed patch properly fixes the issue I
can just wait for the 13.0 release.

Thanks,

-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org



From angelo.dellaera at gmail.com  Fri Jan 18 07:23:30 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Fri, 18 Jan 2013 15:23:30 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
Message-ID: <20130118152330.439be3c2@saiph.darkstar.net>

On Thu, 17 Jan 2013 12:15:03 -0800
Glyph <glyph at twistedmatrix.com> wrote:

> 
> On Jan 17, 2013, at 9:19 AM, exarkun at twistedmatrix.com wrote:
> 
> > (although testing during the /pre/-release period would have saved
> > everyone some trouble :).
> 
> This bears repeating!  Not to harass you, Angelo - dealing with a
> regression in Twisted that breaks your app is punishment enough :) -
> but to remind everyone that this is exactly why we have the
> pre-release testing period.
> 
> When you get the 13.0 release announcement, please remember that you
> only have a week!  All you need to do is to run your respective test
> suite and send a short email saying if you found any issues.  (Filing
> a ticket would be nice, but if that's too much work, don't worry
> about it: for pre-release regressions, we'll file tickets and work on
> patches for you.)


Hi Glyph,
you're absolutely right and I'll try to do the best I can to contribute to such 
effort from now on. 

But let me say that I usually take a look at NEWS.txt before upgrading in 
order to understand if the changes can impact my code and act properly in 
such case. I think this case is quite different because I see no attempts to 
properly handle code which worked perfectly fine in 12.2.0 (if the string is 
not a bytestring raise TypeError and game over) and the new bytestring
requirement is not mentioned at all in NEWS.txt. 

Just thinking that maybe being a little more backward-compatible and/or 
verbose in ChangeLog when introducing potentially disrupting changes
could greatly help in identifying issues like this one.

Thanks,

-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org



From glyph at twistedmatrix.com  Sat Jan 19 00:12:20 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 18 Jan 2013 23:12:20 -0800
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130118152330.439be3c2@saiph.darkstar.net>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
	<BE9F2C56-0998-4396-80C0-7B02155C3D6E@twistedmatrix.com>
	<20130118152330.439be3c2@saiph.darkstar.net>
Message-ID: <8BFE70CC-63D8-417F-84A4-147C06EB9E31@twistedmatrix.com>


On Jan 18, 2013, at 6:23 AM, Angelo Dell'Aera <angelo.dellaera at gmail.com> wrote:

> On Thu, 17 Jan 2013 12:15:03 -0800
> Glyph <glyph at twistedmatrix.com> wrote:
> 
>> 
>> On Jan 17, 2013, at 9:19 AM, exarkun at twistedmatrix.com wrote:
>> 
>>> (although testing during the /pre/-release period would have saved
>>> everyone some trouble :).
>> 
>> This bears repeating!  Not to harass you, Angelo - dealing with a
>> regression in Twisted that breaks your app is punishment enough :) -
>> but to remind everyone that this is exactly why we have the
>> pre-release testing period.
>> 
>> When you get the 13.0 release announcement, please remember that you
>> only have a week!  All you need to do is to run your respective test
>> suite and send a short email saying if you found any issues.  (Filing
>> a ticket would be nice, but if that's too much work, don't worry
>> about it: for pre-release regressions, we'll file tickets and work on
>> patches for you.)
> 
> 
> Hi Glyph,
> you're absolutely right and I'll try to do the best I can to contribute to such 
> effort from now on. 

Thanks, I appreciate that :).

> But let me say that I usually take a look at NEWS.txt before upgrading in 
> order to understand if the changes can impact my code and act properly in 
> such case. I think this case is quite different because I see no attempts to 
> properly handle code which worked perfectly fine in 12.2.0 (if the string is 
> not a bytestring raise TypeError and game over) and the new bytestring
> requirement is not mentioned at all in NEWS.txt. 
> 
> Just thinking that maybe being a little more backward-compatible and/or 
> verbose in ChangeLog when introducing potentially disrupting changes
> could greatly help in identifying issues like this one.

The problem is not that we knew it was going to break things and we didn't care - it's that we didn't notice that the backwards compatibility problem had crept in, and we mistakenly believed that existing users would be using byte strings, or that existing users using unicode strings would already have been broken.  Or we simply forgot.

The reason we need you to test your programs is so that we notice that there is a mistake that needs fixing.  If we already knew about the compatibility problem, we would not have written release notes about it, we would have fixed it before the release :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130118/65e593dd/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Jan 19 22:05:24 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Jan 2013 05:05:24 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1358658324.98.416160386@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130120/29e1f643/attachment-0001.html>

From adi at roiban.ro  Sun Jan 20 07:35:45 2013
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 20 Jan 2013 16:35:45 +0200
Subject: [Twisted-Python] Testing Twisted code without trial
Message-ID: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>

Hi,

I start my pet project using Python Nose as test runner. At the start,
Twisted not used at all.
Later I discovered Twisted and start using it... but testing Twisted
requires trial.

I resist migrating to Trial and ended up with a custom code for
running Twisted tests together with Nose:

https://github.com/chevah/chevah-rhinoplasty


I though I can share this code on the list, in case there is someone
else wrestling with deferres testing outside of Trial.

Any feedback or comments is much appreciated.

Cheers,
-- 
Adi Roiban



From itamar at itamarst.org  Sun Jan 20 07:47:04 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 20 Jan 2013 09:47:04 -0500
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
Message-ID: <50FC0368.7040100@itamarst.org>

On 01/20/2013 09:35 AM, Adi Roiban wrote:
> Hi,
>
> I start my pet project using Python Nose as test runner. At the start,
> Twisted not used at all.
> Later I discovered Twisted and start using it... but testing Twisted
> requires trial.
>
Testing Twisted doesn't actually require trial; if you are using 
Twisted-specific testing features, it requires subclassing 
twisted.trial.unittest.TestCase. You can however still run the resulting 
tests with nose, I would guess.



From exarkun at twistedmatrix.com  Mon Jan 21 17:21:32 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 22 Jan 2013 00:21:32 -0000
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
Message-ID: <20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>

On 20 Jan, 02:35 pm, adi at roiban.ro wrote:
>Hi,
>
>I start my pet project using Python Nose as test runner. At the start,
>Twisted not used at all.
>Later I discovered Twisted and start using it... but testing Twisted
>requires trial.
>
>I resist migrating to Trial and ended up with a custom code for
>running Twisted tests together with Nose:
>
>https://github.com/chevah/chevah-rhinoplasty
>
>
>I though I can share this code on the list, in case there is someone
>else wrestling with deferres testing outside of Trial.
>
>Any feedback or comments is much appreciated.

The implementation is somewhat saddening in its use of Twisted internals 
(which makes it fragile and subject to easy breakage by new Twisted 
releases) and limited platform support (it won't work on Windows, 
afaik).

You may also find problems with direct use of `reactor.iterate`, since 
use of this API is highly discouraged due to re-entrancy issues and its 
implementation is not all that well tested by Twisted's own test suite.

If it works for you, great, but I would hesitate to recommend it to new 
projects as a testing tool.  As Itamar suggests, nose should be able to 
run xUnit-style tests.

Jean-Paul



From adi at roiban.ro  Tue Jan 22 02:29:15 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 22 Jan 2013 11:29:15 +0200
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
Message-ID: <CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>

On 22 January 2013 02:21,  <exarkun at twistedmatrix.com> wrote:
> On 20 Jan, 02:35 pm, adi at roiban.ro wrote:
>>Hi,
>>
>>I start my pet project using Python Nose as test runner. At the start,
>>Twisted not used at all.
>>Later I discovered Twisted and start using it... but testing Twisted
>>requires trial.
>>
>>I resist migrating to Trial and ended up with a custom code for
>>running Twisted tests together with Nose:
>>
>>https://github.com/chevah/chevah-rhinoplasty
>>
>>
>>I though I can share this code on the list, in case there is someone
>>else wrestling with deferres testing outside of Trial.
>>
>>Any feedback or comments is much appreciated.
>
> The implementation is somewhat saddening in its use of Twisted internals
> (which makes it fragile and subject to easy breakage by new Twisted
> releases) and limited platform support (it won't work on Windows,
> afaik).
>
> You may also find problems with direct use of `reactor.iterate`, since
> use of this API is highly discouraged due to re-entrancy issues and its
> implementation is not all that well tested by Twisted's own test suite.
>
> If it works for you, great, but I would hesitate to recommend it to new
> projects as a testing tool.  As Itamar suggests, nose should be able to
> run xUnit-style tests.
>
> Jean-Paul

Thanks for your feedback.


This code also works on Windows and on other Unix systems (OSX, Solaris)

----

The new methods successResultOf and failureResultOf looks good, but I
think they only work with deferred that already have a result.

----

I am aware that the whole thing is fragile... and I am aware of the
consequences of using internal non-public methods.

I checked the code from twisted.trial.unittest.TestCase but I could
not spot how it waits for deferreds execution.

What part of twisted.trial.unittest.TestCase executes and waits for
the deferred?

Can I use that code to implement something similar to successResultOf
and failureResultOf but which also executes the deferred?

Thanks!
-- 
Adi Roiban



From diego at woitasen.com.ar  Tue Jan 22 06:06:44 2013
From: diego at woitasen.com.ar (Diego Woitasen)
Date: Tue, 22 Jan 2013 10:06:44 -0300
Subject: [Twisted-Python] Twisted client memory leak
Message-ID: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>

I have an Twisted client app that makes hundreds of connections per
minute. I discover that I have a memory leak un my app and I'm almost
sure that is related to the ClientFactory() derived class that is
never deleted.

I reproduce the problem with a modification of Echo client example
from Twisted documentation:

    from twisted.internet.protocol import Protocol, ClientFactory
    from twisted.internet import reactor
    from twisted.internet.task import LoopingCall

    from sys import stdout

    class Echo(Protocol):
        def connectionMade(self):
            print 'MADE'
            self.transport.write('XXXX')

        def dataReceived(self, data):
            print 'RECV', data
            self.transport.loseConnection()

        def __del__(self):
            print 'DEL PROTOCOL'

    class EchoClientFactory(ClientFactory):
        def startedConnecting(self, connector):
            print 'Started to connect.'

        def buildProtocol(self, addr):
            print 'Connected.'
            return Echo()

        def clientConnectionLost(self, connector, reason):
            print 'Lost connection.  Reason:', reason

        def clientConnectionFailed(self, connector, reason):
            print 'Connection failed. Reason:', reason

        def __del__(self):
            print 'DEL FACTORY'

    def connector():
        print 'CONNECTOR'
        factory = EchoClientFactory()
        reactor.connectTCP('localhost', 7, factory)

    #reactor.callLater(2, connector)
    register_loop = LoopingCall(connector)
    register_loop.start(1)

    reactor.run()

With this code I discover that the instances of EchoClientFactory()
are only deleted when the program shutdowns. They are not deleted when
the connections finish. I haven't found in the documentation if I need
to do some to get factory instances deleted.

--
Diego Woitasen



From diego at woitasen.com.ar  Tue Jan 22 06:18:13 2013
From: diego at woitasen.com.ar (Diego Woitasen)
Date: Tue, 22 Jan 2013 10:18:13 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
Message-ID: <CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>

Here is the server code if you want to have a test:

from twisted.internet.protocol import Protocol
from twisted.internet.protocol import Factory
from twisted.internet import reactor


class Echo(Protocol):

    def __init__(self, factory):
        self.factory = factory

    def connectionMade(self):
        print 'MADE'

    def connectionLost(self, reason):
        print 'LOST'

    def dataReceived(self, data):
        self.transport.write(data)

class EchoFactory(Factory):
    def buildProtocol(self, addr):
        return Echo(self)

reactor.listenTCP(8007, EchoFactory())

reactor.run()

Thanks!

On Tue, Jan 22, 2013 at 10:06 AM, Diego Woitasen <diego at woitasen.com.ar> wrote:
> I have an Twisted client app that makes hundreds of connections per
> minute. I discover that I have a memory leak un my app and I'm almost
> sure that is related to the ClientFactory() derived class that is
> never deleted.
>
> I reproduce the problem with a modification of Echo client example
> from Twisted documentation:
>
>     from twisted.internet.protocol import Protocol, ClientFactory
>     from twisted.internet import reactor
>     from twisted.internet.task import LoopingCall
>
>     from sys import stdout
>
>     class Echo(Protocol):
>         def connectionMade(self):
>             print 'MADE'
>             self.transport.write('XXXX')
>
>         def dataReceived(self, data):
>             print 'RECV', data
>             self.transport.loseConnection()
>
>         def __del__(self):
>             print 'DEL PROTOCOL'
>
>     class EchoClientFactory(ClientFactory):
>         def startedConnecting(self, connector):
>             print 'Started to connect.'
>
>         def buildProtocol(self, addr):
>             print 'Connected.'
>             return Echo()
>
>         def clientConnectionLost(self, connector, reason):
>             print 'Lost connection.  Reason:', reason
>
>         def clientConnectionFailed(self, connector, reason):
>             print 'Connection failed. Reason:', reason
>
>         def __del__(self):
>             print 'DEL FACTORY'
>
>     def connector():
>         print 'CONNECTOR'
>         factory = EchoClientFactory()
>         reactor.connectTCP('localhost', 7, factory)
>
>     #reactor.callLater(2, connector)
>     register_loop = LoopingCall(connector)
>     register_loop.start(1)
>
>     reactor.run()
>
> With this code I discover that the instances of EchoClientFactory()
> are only deleted when the program shutdowns. They are not deleted when
> the connections finish. I haven't found in the documentation if I need
> to do some to get factory instances deleted.
>
> --
> Diego Woitasen



-- 
Diego Woitasen



From marco.giusti at gmail.com  Tue Jan 22 06:38:10 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Tue, 22 Jan 2013 14:38:10 +0100
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>
Message-ID: <20130122133810.GB3909@murdoc>

On Tue, Jan 22, 2013 at 10:18:13AM -0300, Diego Woitasen wrote:
> Here is the server code if you want to have a test:
[cut]
> 
> Thanks!
> 
> On Tue, Jan 22, 2013 at 10:06 AM, Diego Woitasen <diego at woitasen.com.ar> wrote:
> > I have an Twisted client app that makes hundreds of connections per
> > minute. I discover that I have a memory leak un my app and I'm almost
> > sure that is related to the ClientFactory() derived class that is
> > never deleted.
> >
> > I reproduce the problem with a modification of Echo client example
> > from Twisted documentation:
> >
[cut]
> >
> > With this code I discover that the instances of EchoClientFactory()
> > are only deleted when the program shutdowns. They are not deleted when
> > the connections finish. I haven't found in the documentation if I need
> > to do some to get factory instances deleted.

Add the following lines and see yourself, the factories are deleted as
aspected:

	import gc

	def collect():
	    gc.collect()
	
	signal.signal(signal.SIGUSR1,
		lambda s, f: reactor.callLater(0.001, collect)

m.



From diego at woitasen.com.ar  Tue Jan 22 06:54:27 2013
From: diego at woitasen.com.ar (Diego Woitasen)
Date: Tue, 22 Jan 2013 10:54:27 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <20130122133810.GB3909@murdoc>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>
	<20130122133810.GB3909@murdoc>
Message-ID: <CAA7UhcnMSUQg4wttp9+chTcE=i9BWi0Sv0-aWRtkHOEZ7kgSGQ@mail.gmail.com>

On Tue, Jan 22, 2013 at 10:38 AM, Marco Giusti <marco.giusti at gmail.com> wrote:
> On Tue, Jan 22, 2013 at 10:18:13AM -0300, Diego Woitasen wrote:
>> Here is the server code if you want to have a test:
> [cut]
>>
>> Thanks!
>>
>> On Tue, Jan 22, 2013 at 10:06 AM, Diego Woitasen <diego at woitasen.com.ar> wrote:
>> > I have an Twisted client app that makes hundreds of connections per
>> > minute. I discover that I have a memory leak un my app and I'm almost
>> > sure that is related to the ClientFactory() derived class that is
>> > never deleted.
>> >
>> > I reproduce the problem with a modification of Echo client example
>> > from Twisted documentation:
>> >
> [cut]
>> >
>> > With this code I discover that the instances of EchoClientFactory()
>> > are only deleted when the program shutdowns. They are not deleted when
>> > the connections finish. I haven't found in the documentation if I need
>> > to do some to get factory instances deleted.
>
> Add the following lines and see yourself, the factories are deleted as
> aspected:
>
>         import gc
>
>         def collect():
>             gc.collect()
>
>         signal.signal(signal.SIGUSR1,
>                 lambda s, f: reactor.callLater(0.001, collect)
>
> m.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


Ok, that's work. Thanks.

My question is now, why is this done automatically for EchoProtocol()
and not for EchoFactory()? Looks like the references are dropped why
Python is taking too much time to frees the memory.

An explanation around this is welcome :)

Regards,
   Diego

--
Diego Woitasen



From p.mayers at imperial.ac.uk  Tue Jan 22 07:03:00 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Jan 2013 14:03:00 +0000
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAA7UhcnMSUQg4wttp9+chTcE=i9BWi0Sv0-aWRtkHOEZ7kgSGQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>
	<20130122133810.GB3909@murdoc>
	<CAA7UhcnMSUQg4wttp9+chTcE=i9BWi0Sv0-aWRtkHOEZ7kgSGQ@mail.gmail.com>
Message-ID: <50FE9C14.5090802@imperial.ac.uk>

On 22/01/13 13:54, Diego Woitasen wrote:

> Ok, that's work. Thanks.
>
> My question is now, why is this done automatically for EchoProtocol()
> and not for EchoFactory()? Looks like the references are dropped why
> Python is taking too much time to frees the memory.
>
> An explanation around this is welcome :)

This kind of thing has been discussed on the list before, I think. If I 
recall, it's due to the behaviour of the Python GC under load.

It would help if you could say which version of Python and Twisted 
you're using.



From diego at woitasen.com.ar  Tue Jan 22 07:08:54 2013
From: diego at woitasen.com.ar (Diego Woitasen)
Date: Tue, 22 Jan 2013 11:08:54 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <50FE9C14.5090802@imperial.ac.uk>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAA7Uhcma3F5D-X2pA69BALEo4U06i6w9y23WCu8ivfAqLtD3uQ@mail.gmail.com>
	<20130122133810.GB3909@murdoc>
	<CAA7UhcnMSUQg4wttp9+chTcE=i9BWi0Sv0-aWRtkHOEZ7kgSGQ@mail.gmail.com>
	<50FE9C14.5090802@imperial.ac.uk>
Message-ID: <CAA7Uhcn3uGxJ0jFKQZ7g32A6y283K+PwBbsWaR6Jt5DsUW0Nvg@mail.gmail.com>

On Tue, Jan 22, 2013 at 11:03 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 22/01/13 13:54, Diego Woitasen wrote:
>
>> Ok, that's work. Thanks.
>>
>> My question is now, why is this done automatically for EchoProtocol()
>> and not for EchoFactory()? Looks like the references are dropped why
>> Python is taking too much time to frees the memory.
>>
>> An explanation around this is welcome :)
>
> This kind of thing has been discussed on the list before, I think. If I
> recall, it's due to the behaviour of the Python GC under load.
>
> It would help if you could say which version of Python and Twisted
> you're using.
>


I'm using Python 2.7.3 and Twisted 12.2.0.

--
Diego Woitasen



From mithrandi at mithrandi.net  Tue Jan 22 08:15:27 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 22 Jan 2013 17:15:27 +0200
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
Message-ID: <CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>

On Tue, Jan 22, 2013 at 3:06 PM, Diego Woitasen <diego at woitasen.com.ar> wrote:
> I reproduce the problem with a modification of Echo client example
> from Twisted documentation:

Adding __del__ methods causes the object to become uncollectable if it
forms part of a reference cycle. Thus it is almost always a bad idea
to add __del__ methods when attempting to debug a space leak, as the
most likely outcome is that you introduce a _new_, _different_ leak to
the one you are trying to debug.
--
mithrandi, i Ainil en-Balandor, a faer Ambar



From angelo.dellaera at gmail.com  Tue Jan 22 08:37:12 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Tue, 22 Jan 2013 16:37:12 +0100
Subject: [Twisted-Python] Twisted Names strings
In-Reply-To: <20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
References: <20130117172226.643a8b42@saiph.darkstar.net>
	<20130117171901.3644.1849429884.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <20130122163712.27810643@saiph.darkstar.net>

On Thu, 17 Jan 2013 17:19:01 -0000
exarkun at twistedmatrix.com wrote:

> Absolutely.  This issue has been reported in connection to Wokkel 
> already:
> 
>   http://twistedmatrix.com/trac/ticket/6245
> 
> There is currently a fix proposed and waiting review, and there has
> been some discussion about doing a maintenance release of 12.3 to
> distribute the fix.  Thank you for reporting your experience with
> 12.3.0 (although testing during the /pre/-release period would have
> saved everyone some trouble :).
> 
> It would be great if you could try out the proposed fix and let us
> know if it also addresses the problem with your application.

Hi,
I didn't have the possibility to test the fix during the last days (hopefully will do 
in the next hours) but taking a look at the fix proposed by ralphm 

http://twistedmatrix.com/trac/changeset/36867

it seems like the patch is not complete because a similar check (and potential 
conversion) should be inserted in the twisted.names.dns.Name __init__ method 
too. Am I wrong?

Ciao,

-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org



From radix at twistedmatrix.com  Tue Jan 22 08:41:23 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 22 Jan 2013 09:41:23 -0600
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
Message-ID: <CAPkRfURbB82fcYH=YYRnaHVecEeQG9VXnq89EugUgHBtmtGi5A@mail.gmail.com>

On Tue, Jan 22, 2013 at 9:15 AM, Tristan Seligmann
<mithrandi at mithrandi.net>wrote:

> On Tue, Jan 22, 2013 at 3:06 PM, Diego Woitasen <diego at woitasen.com.ar>
> wrote:
> > I reproduce the problem with a modification of Echo client example
> > from Twisted documentation:
>
> Adding __del__ methods causes the object to become uncollectable if it
> forms part of a reference cycle. Thus it is almost always a bad idea
> to add __del__ methods when attempting to debug a space leak, as the
> most likely outcome is that you introduce a _new_, _different_ leak to
> the one you are trying to debug.
> --
> mithrandi, i Ainil en-Balandor, a faer Ambar
>
>

 Thanks for pointing this out. I was reading through this whole thread and
going "why hasn't anyone else pointed out how wrong it is to add __del__ to
debug this yet???".


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130122/b5002961/attachment.html>

From p.mayers at imperial.ac.uk  Tue Jan 22 08:54:24 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Jan 2013 15:54:24 +0000
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
Message-ID: <50FEB630.3040405@imperial.ac.uk>

On 22/01/13 15:15, Tristan Seligmann wrote:
> On Tue, Jan 22, 2013 at 3:06 PM, Diego Woitasen <diego at woitasen.com.ar> wrote:
>> I reproduce the problem with a modification of Echo client example
>> from Twisted documentation:
>
> Adding __del__ methods causes the object to become uncollectable if it

Ah yes, well spotted.

Personally I tend to avoid __del__ in almost all circumstances, but 
particularly using Twisted (not because of anything Twisted-specific, 
but because my Twisted code tends to be *very* long-running, and because 
it's got sane "died" callbacks on most interfaces).



From diego at woitasen.com.ar  Tue Jan 22 09:12:44 2013
From: diego at woitasen.com.ar (Diego Woitasen)
Date: Tue, 22 Jan 2013 13:12:44 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
Message-ID: <CAA7UhcmSZzyos1tVMnZg7upU43BiWVHwtFKtgjTsupr9vpMGxQ@mail.gmail.com>

El 22/01/2013 12:22, "Tristan Seligmann" <mithrandi at mithrandi.net> escribió:
>
> On Tue, Jan 22, 2013 at 3:
>
> On Tue, Jan 22, 2013 at 3:06 PM, Diego Woitasen <diego at woitasen.com.ar>
> wrote:
> > I reproduce the problem with a modification of Echo client example
> > from Twisted documentation:
>
> Adding __del__ methods causes the object to become uncollectable if it
> forms part of a reference cycle. Thus it is almost always a bad idea
> to add __del__ methods when attempting to debug a space leak, as the
> most likely outcome is that you introduce a _new_, _different_ leak to
> the one you are trying to debug.
> --
> mithrandi, i Ainil en-Balandor, a faer Ambar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130122/3ef5d946/attachment.html>

From facundobatista at gmail.com  Tue Jan 22 09:45:50 2013
From: facundobatista at gmail.com (Facundo Batista)
Date: Tue, 22 Jan 2013 13:45:50 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
Message-ID: <CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>

On Tue, Jan 22, 2013 at 12:15 PM, Tristan Seligmann
<mithrandi at mithrandi.net> wrote:

> Adding __del__ methods causes the object to become uncollectable if it
> forms part of a reference cycle. Thus it is almost always a bad idea
> to add __del__ methods when attempting to debug a space leak, as the
> most likely outcome is that you introduce a _new_, _different_ leak to
> the one you are trying to debug.

Yes, but note that without the __del__ it had the same behaviour...

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/
Twitter: @facundobatista



From p.mayers at imperial.ac.uk  Tue Jan 22 10:02:05 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Jan 2013 17:02:05 +0000
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
	<CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>
Message-ID: <50FEC60D.3050502@imperial.ac.uk>

On 22/01/13 16:45, Facundo Batista wrote:
>
> Yes, but note that without the __del__ it had the same behaviour...
>

Not quite. The OP said that:

  a) He had a problem with a Twisted app not freeing memory under load
  b) He had reproduced that problem with his example, that included __del__

Nowhere did he say "it does the same without __del__". He was in fact 
not specific about whether the original/real code uses __del__ or not.



From facundobatista at gmail.com  Tue Jan 22 10:06:40 2013
From: facundobatista at gmail.com (Facundo Batista)
Date: Tue, 22 Jan 2013 14:06:40 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <50FEC60D.3050502@imperial.ac.uk>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
	<CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>
	<50FEC60D.3050502@imperial.ac.uk>
Message-ID: <CAM09pzRRUzBtyeOE636ipkA6SU9ZxLEQoUOZVBwLtY8d5+7Y5w@mail.gmail.com>

On Tue, Jan 22, 2013 at 2:02 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 22/01/13 16:45, Facundo Batista wrote:
>>
>> Yes, but note that without the __del__ it had the same behaviour...
>>
>
> Not quite. The OP said that:
>
>   a) He had a problem with a Twisted app not freeing memory under load
>   b) He had reproduced that problem with his example, that included __del__
>
> Nowhere did he say "it does the same without __del__". He was in fact
> not specific about whether the original/real code uses __del__ or not.

He didn't say it. I'm saying it, after testing it.

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/
Twitter: @facundobatista



From p.mayers at imperial.ac.uk  Tue Jan 22 10:37:54 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Jan 2013 17:37:54 +0000
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <CAM09pzRRUzBtyeOE636ipkA6SU9ZxLEQoUOZVBwLtY8d5+7Y5w@mail.gmail.com>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
	<CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>
	<50FEC60D.3050502@imperial.ac.uk>
	<CAM09pzRRUzBtyeOE636ipkA6SU9ZxLEQoUOZVBwLtY8d5+7Y5w@mail.gmail.com>
Message-ID: <50FECE72.2060003@imperial.ac.uk>

On 22/01/13 17:06, Facundo Batista wrote:
> On Tue, Jan 22, 2013 at 2:02 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>
>> On 22/01/13 16:45, Facundo Batista wrote:
>>>
>>> Yes, but note that without the __del__ it had the same behaviour...
>>>
>>
>> Not quite. The OP said that:
>>
>>    a) He had a problem with a Twisted app not freeing memory under load
>>    b) He had reproduced that problem with his example, that included __del__
>>
>> Nowhere did he say "it does the same without __del__". He was in fact
>> not specific about whether the original/real code uses __del__ or not.
>
> He didn't say it. I'm saying it, after testing it.
>

When you say "it", you mean his example code as posted to the list, right?

Because having just tested it, I don't see any problem - his example 
code has stable memory usage for both client/server processes, and with 
the client making 1, 100 or 1000 connections/sec, and the debug shows 
protocol and factory instances being freed as I would expect i.e. in a 
timely fashion, not just at process close.

Tested on both:

Python 2.7.3 / Twisted 11.1.0 / Linux 64-bit
Python 2.6.8 / Twisted 12.2.0 / Linux 64-bit

Odd...



From facundobatista at gmail.com  Tue Jan 22 11:40:15 2013
From: facundobatista at gmail.com (Facundo Batista)
Date: Tue, 22 Jan 2013 15:40:15 -0300
Subject: [Twisted-Python] Twisted client memory leak
In-Reply-To: <50FECE72.2060003@imperial.ac.uk>
References: <CAA7Uhc=GjYhCsjCBHm_rfFc-cDESeRNPUz7fpnSL5GhxurEV4A@mail.gmail.com>
	<CAMcKhMTBfvwYWxHbZUbz8y5bm+C4Y8phNM5czrDbZHnLEqETpQ@mail.gmail.com>
	<CAM09pzQsefWQ8T3vN3XMrgJRFfxb3xM1qc3sv_-TO3oXZOH4kQ@mail.gmail.com>
	<50FEC60D.3050502@imperial.ac.uk>
	<CAM09pzRRUzBtyeOE636ipkA6SU9ZxLEQoUOZVBwLtY8d5+7Y5w@mail.gmail.com>
	<50FECE72.2060003@imperial.ac.uk>
Message-ID: <CAM09pzQYz+0GSH_WAtVQGCTEki89cpOHju4HxEZCjaAU6CBumg@mail.gmail.com>

On Tue, Jan 22, 2013 at 2:37 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> Because having just tested it, I don't see any problem - his example
> code has stable memory usage for both client/server processes, and with
> the client making 1, 100 or 1000 connections/sec, and the debug shows
> protocol and factory instances being freed as I would expect i.e. in a
> timely fashion, not just at process close.
>
> Tested on both:
>
> Python 2.7.3 / Twisted 11.1.0 / Linux 64-bit
> Python 2.6.8 / Twisted 12.2.0 / Linux 64-bit

I tested the original example, with the change of doing a loop each .1
seconds instead 1 second, and it shown a memory growth, with and
without the __del__ in the Factory.

It was using Twisted 12.2.0 under Python 2.7.3, on a Linux 32b. I
measured the memory usage with top.

Regards,

-- 
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/
Twitter: @facundobatista



From exarkun at twistedmatrix.com  Tue Jan 22 12:36:49 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 22 Jan 2013 19:36:49 -0000
Subject: [Twisted-Python] Twisted Names strings
Message-ID: <20130122193649.3644.1807670358.divmod.xquotient.88@localhost6.localdomain6>

On 03:37 pm, angelo.dellaera at gmail.com wrote:
>
>Hi,
>I didn't have the possibility to test the fix during the last days 
>(hopefully will do
>in the next hours) but taking a look at the fix proposed by ralphm
>
>http://twistedmatrix.com/trac/changeset/36867
>
>it seems like the patch is not complete because a similar check (and 
>potential
>conversion) should be inserted in the twisted.names.dns.Name __init__ 
>method
>too. Am I wrong?

Hi Angelo,

Thanks for taking a look at the changeset, at least!  I think that you 
are correct.  I would even go so far as to say that the change should be 
reverted, as it does not actually fix the *regression*, it works around 
it in a higher-level API.  As you say, this results in an incomplete fix 
for the issue since many applications may (and likely are) using `Name` 
directly rather than via SRVConnector.

I hope Ralph or Tom will chime in with their thoughts on this.

Jean-Paul



From exarkun at twistedmatrix.com  Tue Jan 22 13:03:29 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 22 Jan 2013 20:03:29 -0000
Subject: [Twisted-Python] Testing Twisted code without trial
In-Reply-To: <CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
References: <CAFycZ9fHmmVZMUHUzBeQiTskAkUM79otccWwsBCSgBwmQgcY3w@mail.gmail.com>
	<20130122002132.3644.1406992240.divmod.xquotient.82@localhost6.localdomain6>
	<CAFycZ9fZfn7LEZWdu4-bqd6rJFUY7N6op8zoMdfYZX=rHkYbtQ@mail.gmail.com>
Message-ID: <20130122200329.3644.47433100.divmod.xquotient.99@localhost6.localdomain6>

On 09:29 am, adi at roiban.ro wrote:
>On 22 January 2013 02:21,  <exarkun at twistedmatrix.com> wrote:
>>On 20 Jan, 02:35 pm, adi at roiban.ro wrote:
>>>Hi,
>>>
>>>I start my pet project using Python Nose as test runner. At the 
>>>start,
>>>Twisted not used at all.
>>>Later I discovered Twisted and start using it... but testing Twisted
>>>requires trial.
>>>
>>>I resist migrating to Trial and ended up with a custom code for
>>>running Twisted tests together with Nose:
>>>
>>>https://github.com/chevah/chevah-rhinoplasty
>>>
>>>
>>>I though I can share this code on the list, in case there is someone
>>>else wrestling with deferres testing outside of Trial.
>>>
>>>Any feedback or comments is much appreciated.
>>
>>The implementation is somewhat saddening in its use of Twisted 
>>internals
>>(which makes it fragile and subject to easy breakage by new Twisted
>>releases) and limited platform support (it won't work on Windows,
>>afaik).
>>
>>You may also find problems with direct use of `reactor.iterate`, since
>>use of this API is highly discouraged due to re-entrancy issues and 
>>its
>>implementation is not all that well tested by Twisted's own test 
>>suite.
>>
>>If it works for you, great, but I would hesitate to recommend it to 
>>new
>>projects as a testing tool.  As Itamar suggests, nose should be able 
>>to
>>run xUnit-style tests.
>>
>>Jean-Paul
>
>Thanks for your feedback.
>
>----
>
>The new methods successResultOf and failureResultOf looks good, but I
>think they only work with deferred that already have a result.
>
>----
>
>I am aware that the whole thing is fragile... and I am aware of the
>consequences of using internal non-public methods.
>
>I checked the code from twisted.trial.unittest.TestCase but I could
>not spot how it waits for deferreds execution.
>
>What part of twisted.trial.unittest.TestCase executes and waits for
>the deferred?
>
>Can I use that code to implement something similar to successResultOf
>and failureResultOf but which also executes the deferred?

Hi Adi,

trial does what it does by touching a lot of internal stuff as well. 
This is still bad, but at least it's our fault if it ever breaks instead 
of yours.  There's also a long term plan (or "plan" may be putting it 
too strongly, perhaps I should say "hope") that this part of trial will 
change to only use public interfaces.  This will probably require 
reactors actually implementing restartability, or it will require 
changing the trial feature slightly (eg, so it starts a reactor, runs 
all tests, then stops the reactor - if it did this, I'm sure you can 
imagine how "waiting" for a Deferred would just be adding a callback to 
the right place, as in any other Twisted-based application).

Are you interested in helping out with making reactors restartable? :)
>
>
>This code also works on Windows and on other Unix systems (OSX, 
>Solaris)

Okay.  I expected otherwise when I saw `_UnixWaker` in the 
implementation, but reading more carefully I now see that the code 
doesn't ever try to instantiate or use one of these, it just needs it 
for type checking.  My mistake!

Jean-Paul



From fabian.rothfuchs at googlemail.com  Thu Jan 24 07:34:45 2013
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Thu, 24 Jan 2013 15:34:45 +0100
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CD1D90D8.41CAB%fabian.rothfuchs@googmail.com>
Message-ID: <CD270515.24C41%fabian.rothfuchs@googlemail.com>

Hey again!
Having the setup doing quite well so far, I just ran into a problem that I
do not know how to debug:

Testcase `setUp()` starts a server that subclasses
`twisted.web.resource.Resource` , as it's going to be a lightweight SOAP
server, responding with hard-coded xml strings.
Purpose is to check the request for validity.

The Testcase's `test_*()` function initiates a client request by using the
suds module. I now discovered that the server process started in `setUp()`
hangs as long as the suds connection did not finish.
Which is a deadlock, as it cannot finish unless the server sent the
response.

When trying to connect to the server via telnet, I do not get any response
unless the suds connection is lost.

Snippets:
TestCase: http://dpaste.org/pmg6Y/
TestServer: http://dpaste.org/NOLb8/
Client: http://dpaste.org/2wxIV/

Thanks for any help!
Fabian


From:  Fabian Rothfuchs <fabian.rothfuchs at googmail.com>
Date:  Thursday, January 17, 2013 11:27 AM
To:  Twisted general discussion <twisted-python at twistedmatrix.com>
Subject:  Re: [Twisted-Python] Stopping Reactor in UnitTest Callback

While trying to minimalize my code, I discovered that the following line
somewhere down deep the code is causing the whole test to hang:
> adbapi.ConnectionPool('MySQLdb', system.host, system.username,
> system.password, system.database)
> 
> 
It seems that the connection is not being closed properly, causing the whole
test chain to hang.


From:  Itamar Turner-Trauring <itamar at futurefoundries.com>
Reply-To:  Twisted general discussion <twisted-python at twistedmatrix.com>
Date:  Tuesday, January 15, 2013 6:22 PM
To:  Twisted general discussion <twisted-python at twistedmatrix.com>
Subject:  Re: [Twisted-Python] Stopping Reactor in UnitTest Callback



On Tue, Jan 15, 2013 at 10:26 AM, Fabian Rothfuchs
<fabian.rothfuchs at googlemail.com> wrote:
> Yes, I thought so, too. Indeed it happens that the reactor is started
> automatically, but after the test succeeds, it's not being stopped (only
> chance is to kill ­9 it).

Perhaps the problem isn't with the test framework, but with your test. Can
you show us a minimal piece of code that reproduces the problem?
_______________________________________________ Twisted-Python mailing list
Twisted-Python at twistedmatrix.comhttp://twistedmatrix.com/cgi-bin/mailman/lis
tinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130124/fc3e0e50/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Jan 24 09:00:06 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 24 Jan 2013 16:00:06 -0000
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <CD270515.24C41%fabian.rothfuchs@googlemail.com>
References: <CD1D90D8.41CAB%fabian.rothfuchs@googmail.com>
	<CD270515.24C41%fabian.rothfuchs@googlemail.com>
Message-ID: <20130124160006.3644.360009842.divmod.xquotient.166@localhost6.localdomain6>

On 02:34 pm, fabian.rothfuchs at googlemail.com wrote:
>Hey again!
>Having the setup doing quite well so far, I just ran into a problem 
>that I
>do not know how to debug:
>
>Testcase `setUp()` starts a server that subclasses
>`twisted.web.resource.Resource` , as it's going to be a lightweight 
>SOAP
>server, responding with hard-coded xml strings.
>Purpose is to check the request for validity.
>
>The Testcase's `test_*()` function initiates a client request by using 
>the
>suds module. I now discovered that the server process started in 
>`setUp()`
>hangs as long as the suds connection did not finish.

It looks like you're using `deferLater` as though it turns the SUDS 
client from a blocking, synchronous API into a non-blocking, 
asynchronous API.  This is not what `deferLater` does.  `deferLater` 
just schedules a function call to happen at a later time.

Your SUDS *client* is blocking the process from doing anything.  You 
need a non-blocking, asynchronous SUDS client.  You could use SUDS in a 
thread (if it is thread-safe) or you could find a different client.

Jean-Paul
>Which is a deadlock, as it cannot finish unless the server sent the
>response.
>
>When trying to connect to the server via telnet, I do not get any 
>response
>unless the suds connection is lost.
>
>Snippets:
>TestCase: http://dpaste.org/pmg6Y/
>TestServer: http://dpaste.org/NOLb8/
>Client: http://dpaste.org/2wxIV/
>
>Thanks for any help!
>Fabian



From fabian.rothfuchs at googlemail.com  Fri Jan 25 02:15:07 2013
From: fabian.rothfuchs at googlemail.com (Fabian Rothfuchs)
Date: Fri, 25 Jan 2013 10:15:07 +0100
Subject: [Twisted-Python] Stopping Reactor in UnitTest Callback
In-Reply-To: <20130124160006.3644.360009842.divmod.xquotient.166@localhost6.localdomain6>
Message-ID: <CD280BAB.3EA80%fabian.rothfuchs@googlemail.com>

Hey Jean-Paul (and all the others in this thread),

Thank you very much for your help so far - I do really appreciate it!

I'm well aware of the fact that `deferLater` does not magically turn
blocking apps to non-blocking ones.
The idea is, whatever SUDS does, in the end it should send a SOAP request
to my
TestServer.
My problem is, that SUDS indeed sends the request, but wants to get an
immediate response, which causes a deadlock.

I just came across the very same question asked a couple of years ago:
http://stackoverflow.com/questions/2671228/python-how-can-i-use-twisted-as-
the-transport-for-suds

This should help me out of this.

Cheers
Fabian



On 1/24/13 5:00 PM, "exarkun at twistedmatrix.com"
<exarkun at twistedmatrix.com> wrote:

>On 02:34 pm, fabian.rothfuchs at googlemail.com wrote:
>>Hey again!
>>Having the setup doing quite well so far, I just ran into a problem
>>that I
>>do not know how to debug:
>>
>>Testcase `setUp()` starts a server that subclasses
>>`twisted.web.resource.Resource` , as it's going to be a lightweight
>>SOAP
>>server, responding with hard-coded xml strings.
>>Purpose is to check the request for validity.
>>
>>The Testcase's `test_*()` function initiates a client request by using
>>the
>>suds module. I now discovered that the server process started in
>>`setUp()`
>>hangs as long as the suds connection did not finish.
>
>It looks like you're using `deferLater` as though it turns the SUDS
>client from a blocking, synchronous API into a non-blocking,
>asynchronous API.  This is not what `deferLater` does.  `deferLater`
>just schedules a function call to happen at a later time.
>
>Your SUDS *client* is blocking the process from doing anything.  You
>need a non-blocking, asynchronous SUDS client.  You could use SUDS in a
>thread (if it is thread-safe) or you could find a different client.
>
>Jean-Paul
>>Which is a deadlock, as it cannot finish unless the server sent the
>>response.
>>
>>When trying to connect to the server via telnet, I do not get any
>>response
>>unless the suds connection is lost.
>>
>>Snippets:
>>TestCase: http://dpaste.org/pmg6Y/
>>TestServer: http://dpaste.org/NOLb8/
>>Client: http://dpaste.org/2wxIV/
>>
>>Thanks for any help!
>>Fabian
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From poisonoff at gmail.com  Fri Jan 25 09:35:17 2013
From: poisonoff at gmail.com (=?UTF-8?B?0JDRgNC60LDQtNC40Lkg0JvQtdCy0LjQvQ==?=)
Date: Fri, 25 Jan 2013 22:35:17 +0600
Subject: [Twisted-Python] Amazing exception "GeneratorExit"
Message-ID: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>

Hi all, i got strange error

If run this:

# -*- coding: UTF-8 -*-

import os
import sys

from twisted.python import log
from twisted.internet import reactor
from twisted.internet.defer import Deferred, inlineCallbacks

@inlineCallbacks
def _():

	try:
		(yield Deferred())
	except:
		log.err()

reactor.callLater(0, _)
reactor.run()

i got exception  "GeneratorExit" Why?!

... this code work:

# -*- coding: UTF-8 -*-

import os
import sys

from twisted.python import log
from twisted.internet import reactor
from twisted.internet.defer import Deferred, inlineCallbacks

@inlineCallbacks
def _():

	deferred = Deferred()

	try:
		(yield deferred)
	except:
		log.err()

reactor.callLater(0, _)
reactor.run()

Change "Deferred()" to "deferred = Deferred()"



From poisonoff at gmail.com  Fri Jan 25 09:50:58 2013
From: poisonoff at gmail.com (=?UTF-8?B?0JDRgNC60LDQtNC40Lkg0JvQtdCy0LjQvQ==?=)
Date: Fri, 25 Jan 2013 22:50:58 +0600
Subject: [Twisted-Python] Amazing exception "GeneratorExit"
In-Reply-To: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>
References: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>
Message-ID: <CACgbmJn-8JY1hne7Zq6Qvj00VXf4YeBgoR=mhyT5EqwhkcL4HQ@mail.gmail.com>

I try answer myself, reason for this error broken reference?

On Fri, Jan 25, 2013 at 10:35 PM, Аркадий Левин <poisonoff at gmail.com> wrote:
> Hi all, i got strange error
>
> If run this:
>
> # -*- coding: UTF-8 -*-
>
> import os
> import sys
>
> from twisted.python import log
> from twisted.internet import reactor
> from twisted.internet.defer import Deferred, inlineCallbacks
>
> @inlineCallbacks
> def _():
>
>         try:
>                 (yield Deferred())
>         except:
>                 log.err()
>
> reactor.callLater(0, _)
> reactor.run()
>
> i got exception  "GeneratorExit" Why?!
>
> ... this code work:
>
> # -*- coding: UTF-8 -*-
>
> import os
> import sys
>
> from twisted.python import log
> from twisted.internet import reactor
> from twisted.internet.defer import Deferred, inlineCallbacks
>
> @inlineCallbacks
> def _():
>
>         deferred = Deferred()
>
>         try:
>                 (yield deferred)
>         except:
>                 log.err()
>
> reactor.callLater(0, _)
> reactor.run()
>
> Change "Deferred()" to "deferred = Deferred()"



From radix at twistedmatrix.com  Fri Jan 25 10:49:09 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 25 Jan 2013 11:49:09 -0600
Subject: [Twisted-Python] Amazing exception "GeneratorExit"
In-Reply-To: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>
References: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>
Message-ID: <CAPkRfUSbNTs8BnV7Yu-xwW6gFgUwN_vXNaSmkKftanTPpHF3nA@mail.gmail.com>

On Fri, Jan 25, 2013 at 10:35 AM, Аркадий Левин <poisonoff at gmail.com> wrote:

> Hi all, i got strange error
>
> If run this:
>
> # -*- coding: UTF-8 -*-
>
> import os
> import sys
>
> from twisted.python import log
> from twisted.internet import reactor
> from twisted.internet.defer import Deferred, inlineCallbacks
>
> @inlineCallbacks
> def _():
>
>         try:
>                 (yield Deferred())
>         except:
>                 log.err()
>
> reactor.callLater(0, _)
> reactor.run()
>
> i got exception  "GeneratorExit" Why?!
>


This behavior isn't specific to inlineCallbacks. If you get rid of the
reactor usage and the @inlineCallbacks decorator, and just call _().next(),
you'll see the same behavior.

http://docs.python.org/2.7/reference/expressions.html?highlight=yield%20expression#generator-iterator-methods

See the stuff about how .close() throws GeneratorExit into the generator.

It is related to garbage collection. When a generator is garbage collected,
its .close() method is called. Since you're keeping a reference to the
Deferred in the generator itself in the working version, it's not being
immediately closed because there's a circular reference. (I think?)

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130125/910dc148/attachment-0001.html>

From poisonoff at gmail.com  Fri Jan 25 11:01:37 2013
From: poisonoff at gmail.com (=?UTF-8?B?0JDRgNC60LDQtNC40Lkg0JvQtdCy0LjQvQ==?=)
Date: Sat, 26 Jan 2013 00:01:37 +0600
Subject: [Twisted-Python] Amazing exception "GeneratorExit"
In-Reply-To: <CAPkRfUSbNTs8BnV7Yu-xwW6gFgUwN_vXNaSmkKftanTPpHF3nA@mail.gmail.com>
References: <CACgbmJmd5AiLbPfm1C=5V5jURae-d860Y8AOuJgfRtbGkDQUDA@mail.gmail.com>
	<CAPkRfUSbNTs8BnV7Yu-xwW6gFgUwN_vXNaSmkKftanTPpHF3nA@mail.gmail.com>
Message-ID: <CACgbmJn8SkmyNt3cOsTJwBCqDBHBCG5RupJHsdAHo80zUYHUEQ@mail.gmail.com>

Christopher, thank you.



From exarkun at twistedmatrix.com  Sat Jan 26 22:05:26 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Jan 2013 05:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1359263126.58.84001006@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130127/19ac596b/attachment-0001.html>

From sergun at gmail.com  Mon Jan 28 00:47:48 2013
From: sergun at gmail.com (Sergey V. Gerasimov)
Date: Mon, 28 Jan 2013 11:47:48 +0400
Subject: [Twisted-Python] inlineCallbacks: multiple yielding same Defferred
	behaviour
Message-ID: <069f01cdfd2b$c5660130$50320390$@gmail.com>

It's not intuitively clear why multiple yielding the same Defferred in
function decorated with defer.inlineCallbacks get different results:

 

@defer.inlineCallbacks

def f():

                d = defer.succeed(1)

                result = yield d

print result

                result = yield d

print result

 

Output:

1

None

 

Probably we SHOULD NOT think if "d" was or was not yielded before when using
inlineCallbacks..

 

Are they some workarounds?

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130128/9d6e220d/attachment.html>

From _ at lvh.cc  Mon Jan 28 01:47:12 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Mon, 28 Jan 2013 09:47:12 +0100
Subject: [Twisted-Python] inlineCallbacks: multiple yielding same
 Defferred behaviour
In-Reply-To: <069f01cdfd2b$c5660130$50320390$@gmail.com>
References: <069f01cdfd2b$c5660130$50320390$@gmail.com>
Message-ID: <CAE_Hg6aMRUYyrtvL3-Ki9fWd9FTbnUidZjnT-rPA7sk7eMKR4g@mail.gmail.com>

I'm not entirely sure why you feel this is unintuitive or why you should
need a workaround; in any other case, deferreds work pretty much the same
way.

When reading this code, the first question that pops up in my head is: why
are you doing this instead of just using the result that you already have
(and assigned to a name)? How did this  waiting-twice-on-one-deferred
happen?


On Mon, Jan 28, 2013 at 8:47 AM, Sergey V. Gerasimov <sergun at gmail.com>wrote:

> It’s not intuitively clear why multiple yielding the same Defferred in
> function decorated with defer.inlineCallbacks get different results:****
>
> ** **
>
> @defer.inlineCallbacks****
>
> def f():****
>
>                 d = defer.succeed(1)****
>
>                 result = yield d****
>
> print result****
>
>                 result = yield d****
>
> print result****
>
> ** **
>
> Output:****
>
> 1****
>
> None****
>
> ** **
>
> Probably we SHOULD NOT think if “d” was or was not yielded before when
> using inlineCallbacks..****
>
> ** **
>
> Are they some workarounds?****
>
> ** **
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130128/61ed4edf/attachment.html>

From sergun at gmail.com  Mon Jan 28 02:37:36 2013
From: sergun at gmail.com (Sergey V. Gerasimov)
Date: Mon, 28 Jan 2013 13:37:36 +0400
Subject: [Twisted-Python] inlineCallbacks: multiple yielding same
	Defferred behaviour
In-Reply-To: <CAE_Hg6aMRUYyrtvL3-Ki9fWd9FTbnUidZjnT-rPA7sk7eMKR4g@mail.gmail.com>
References: <069f01cdfd2b$c5660130$50320390$@gmail.com>
	<CAE_Hg6aMRUYyrtvL3-Ki9fWd9FTbnUidZjnT-rPA7sk7eMKR4g@mail.gmail.com>
Message-ID: <06bf01cdfd3b$1c3cb210$54b61630$@gmail.com>

Hi Laurens,

 

Thanks for your reply!

 

I need something like this.

A server that processes requests and handles situation when there are 2
requests with same key.

 

class Server(object):

                def __init__(self):

                                self.requestsInProgress = {} # dict: key ->
Deferred with result

 

                @defer.inlineCallbacks

                def request(self, key):

                               in_progress = key in self.requests

                               if in_progress:

                                               d = self.requestsInProgress
[key]

                                               result = yield d

                               else:

                                               d = process_request(key)

                                               self.requests[key] = d

                                               result = yield d

                                               del self.requestsInProgress
[key]

                               defer.returnValue(result)

 

How can I implement the logic correctly?

 

In my opinion it's very simple and clear concept to consider Deferred just
like deferred execution of some action. In this case you should be able to
get it's result (doing yield) many times (why not?).

 

 

I have deal with Task-based programming and async functions (mechanism
similar to Deferred and inlineCallbacks decorated functions in Twisted) in
Microsoft  .NET.

MS people have implemented Task (analogue of Deferred) in the way I
described.

 

 

From: Laurens Van Houtven [mailto:_ at lvh.cc] 
Sent: Monday, January 28, 2013 12:47 PM
To: sergun at gmail.com; Twisted general discussion
Subject: Re: [Twisted-Python] inlineCallbacks: multiple yielding same
Defferred behaviour

 

I'm not entirely sure why you feel this is unintuitive or why you should
need a workaround; in any other case, deferreds work pretty much the same
way.

When reading this code, the first question that pops up in my head is: why
are you doing this instead of just using the result that you already have
(and assigned to a name)? How did this  waiting-twice-on-one-deferred
happen?

 

On Mon, Jan 28, 2013 at 8:47 AM, Sergey V. Gerasimov <sergun at gmail.com>
wrote:

It's not intuitively clear why multiple yielding the same Defferred in
function decorated with defer.inlineCallbacks get different results:

 

@defer.inlineCallbacks

def f():

                d = defer.succeed(1)

                result = yield d

print result

                result = yield d

print result

 

Output:

1

None

 

Probably we SHOULD NOT think if "d" was or was not yielded before when using
inlineCallbacks..

 

Are they some workarounds?

 


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




-- 

cheers

lvh

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130128/7c276bff/attachment.html>

From sergun at gmail.com  Mon Jan 28 02:52:58 2013
From: sergun at gmail.com (Sergey V. Gerasimov)
Date: Mon, 28 Jan 2013 13:52:58 +0400
Subject: [Twisted-Python] inlineCallbacks: multiple yielding same
	Defferred behaviour
In-Reply-To: <CAE_Hg6aus1gjAGfB8seguqO+RM-3XVVtPi9DRaB3qBz+v+bfxg@mail.gmail.com>
References: <069f01cdfd2b$c5660130$50320390$@gmail.com>
	<CAE_Hg6aMRUYyrtvL3-Ki9fWd9FTbnUidZjnT-rPA7sk7eMKR4g@mail.gmail.com>
	<06b201cdfd3a$f7acf450$e706dcf0$@gmail.com>
	<CAE_Hg6aus1gjAGfB8seguqO+RM-3XVVtPi9DRaB3qBz+v+bfxg@mail.gmail.com>
Message-ID: <06e201cdfd3d$41dedf50$c59c9df0$@gmail.com>

My target is just to deny request duplications.

 

Reg. inlineCallbacks.. What do you think is it possible to implement
inlineCallbacks generator in the way allows multiple yields? (but do not
modify Defferred)

 

From: Laurens Van Houtven [mailto:_ at lvh.cc] 
Sent: Monday, January 28, 2013 1:43 PM
To: sergun at gmail.com
Subject: Re: [Twisted-Python] inlineCallbacks: multiple yielding same
Defferred behaviour

 

The short answer is that those models don't support chaining the way
Deferreds do, IIUC.

I think a very similar thing was a bonus question at the tutorial Stephen
Thorne and I gave at EuroPython last year. Do you want to cache results as
well, or only not make duplicate requests when one is in-flight?

 

On Mon, Jan 28, 2013 at 10:36 AM, Sergey V. Gerasimov <sergun at gmail.com>
wrote:

Hi Laurens,

 

Thanks for your reply!

 

I need something like this.

A server that processes requests and handles situation when there are 2
requests with same key.

 

class Server(object):

                def __init__(self):

                                self.requestsInProgress = {} # dict: key ->
Deferred with result

 

                @defer.inlineCallbacks

                def request(self, key):

                               in_progress = key in self.requests

                               if in_progress:

                                               d = self.requestsInProgress
[key]

                                               result = yield d

                               else:

                                               d = process_request(key)

                                               self.requests[key] = d

                                               result = yield d

                                               del self.requestsInProgress
[key]

                               defer.returnValue(result)

 

How can I implement the logic correctly?

 

In my opinion it's very simple and clear concept to consider Deferred just
like deferred execution of some action. In this case you should be able to
get it's result (doing yield) many times (why not?).

 

 

I have deal with Task-based programming and async functions (mechanism
similar to Deferred and inlineCallbacks decorated functions in Twisted) in
Microsoft  .NET.

MS people have implemented Task (analogue of Deferred) in the way I
described.

 

 

 

From: Laurens Van Houtven [mailto:_ at lvh.cc] 
Sent: Monday, January 28, 2013 12:47 PM
To: sergun at gmail.com; Twisted general discussion
Subject: Re: [Twisted-Python] inlineCallbacks: multiple yielding same
Defferred behaviour

 

I'm not entirely sure why you feel this is unintuitive or why you should
need a workaround; in any other case, deferreds work pretty much the same
way.

When reading this code, the first question that pops up in my head is: why
are you doing this instead of just using the result that you already have
(and assigned to a name)? How did this  waiting-twice-on-one-deferred
happen?

 

On Mon, Jan 28, 2013 at 8:47 AM, Sergey V. Gerasimov <sergun at gmail.com>
wrote:

It's not intuitively clear why multiple yielding the same Defferred in
function decorated with defer.inlineCallbacks get different results:

 

@defer.inlineCallbacks

def f():

                d = defer.succeed(1)

                result = yield d

print result

                result = yield d

print result

 

Output:

1

None

 

Probably we SHOULD NOT think if "d" was or was not yielded before when using
inlineCallbacks..

 

Are they some workarounds?

 


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




-- 

cheers

lvh




-- 

cheers

lvh

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130128/79222f01/attachment.html>

From itamar at futurefoundries.com  Mon Jan 28 07:56:57 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Mon, 28 Jan 2013 09:56:57 -0500
Subject: [Twisted-Python] Twisted-related talks and tutorials at PyCon
Message-ID: <CAOp9P3p92Kp1DndQqyrAgEBySis26E+5Wdh-KbDUbxajPKFEvA@mail.gmail.com>

Hi,

Thought I'd point out some Twisted-related talks at PyCon; I may have
missed a few.


*Tutorials*

Jessica "jesstess" McKellar is teaching two tutorials, one of which teaches
the basics of contributing to open source projects, in case you've wanted
to contribute to Twisted but haven't yet figured out the process:
https://us.pycon.org/2013/schedule/presentation/4/.

I will be teaching a tutorial on test-driven development with Twisted,
explaining how to build robust, well-tested applications:
https://us.pycon.org/2013/schedule/presentation/15/


*Talks*
*
*
Jessica McKellar will be giving a talk on "How the Internet Works", which
will be including some demonstrations using Twisted:
https://us.pycon.org/2013/schedule/presentation/50/.

Ashwini "ashfall" Oruganti, one of our Google Summer of Code interns, will
be talking about endpoints, Deferreds and more:
https://us.pycon.org/2013/schedule/presentation/40/

Glyph Lefkowitz will be rudely-yet-jokingly insulting Javascript
programmers in his talk on event-driven programming:
https://us.pycon.org/2013/schedule/presentation/120/

Armin Rigo will be talking about Software Transactional Memory and removing
the GIL from PyPy (we will hopefully have a multi-core reactor soon after
this becomes usable): https://us.pycon.org/2013/schedule/presentation/37/

Allen "dash" Short will be talking about Parsley, his parsing library:
https://us.pycon.org/2013/schedule/presentation/84/

Laurens "lvh" Van Houtven will be teaching Crypto 101:
https://us.pycon.org/2013/schedule/presentation/74/

Brad Kuhn, of the Software Freedom Conservancy (Twisted's non-profit
sponsor), will be talking about funding open source projects, using among
others Twisted as an example:
https://us.pycon.org/2013/schedule/presentation/48/


*Other*
*
*
Jessica McKellar will be giving one of the keynote addresses, though it
probably has nothing to do with Twisted. (The posters list isn't up yet,
but I'm betting Jessica will also have a poster.)
*
*
I believe that as with every year we will be having a development sprint
after the main conference, and a birds-of-feather session at some point.


-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130128/8380c2fc/attachment.html>

From _ at lvh.cc  Mon Jan 28 08:15:34 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Mon, 28 Jan 2013 16:15:34 +0100
Subject: [Twisted-Python] Twisted-related talks and tutorials at PyCon
In-Reply-To: <CAOp9P3p92Kp1DndQqyrAgEBySis26E+5Wdh-KbDUbxajPKFEvA@mail.gmail.com>
References: <CAOp9P3p92Kp1DndQqyrAgEBySis26E+5Wdh-KbDUbxajPKFEvA@mail.gmail.com>
Message-ID: <CAE_Hg6Yv-QJp+bfHjobmqkL4kzV8AJRsM8x4=4+uEc45Wzao=w@mail.gmail.com>

My crypto 101 talk is probably going to be pretty light on the twisted:
right now there's nothing in it, I'm considering adding some, but I'm also
strapped for time :(


On Mon, Jan 28, 2013 at 3:56 PM, Itamar Turner-Trauring <
itamar at futurefoundries.com> wrote:

> Hi,
>
> Thought I'd point out some Twisted-related talks at PyCon; I may have
> missed a few.
>
>
> *Tutorials*
>
> Jessica "jesstess" McKellar is teaching two tutorials, one of which
> teaches the basics of contributing to open source projects, in case you've
> wanted to contribute to Twisted but haven't yet figured out the process:
> https://us.pycon.org/2013/schedule/presentation/4/.
>
> I will be teaching a tutorial on test-driven development with Twisted,
> explaining how to build robust, well-tested applications:
> https://us.pycon.org/2013/schedule/presentation/15/
>
>
> *Talks*
> *
> *
> Jessica McKellar will be giving a talk on "How the Internet Works", which
> will be including some demonstrations using Twisted:
> https://us.pycon.org/2013/schedule/presentation/50/.
>
> Ashwini "ashfall" Oruganti, one of our Google Summer of Code interns, will
> be talking about endpoints, Deferreds and more:
> https://us.pycon.org/2013/schedule/presentation/40/
>
> Glyph Lefkowitz will be rudely-yet-jokingly insulting Javascript
> programmers in his talk on event-driven programming:
> https://us.pycon.org/2013/schedule/presentation/120/
>
> Armin Rigo will be talking about Software Transactional Memory and
> removing the GIL from PyPy (we will hopefully have a multi-core reactor
> soon after this becomes usable):
> https://us.pycon.org/2013/schedule/presentation/37/
>
> Allen "dash" Short will be talking about Parsley, his parsing library:
> https://us.pycon.org/2013/schedule/presentation/84/
>
> Laurens "lvh" Van Houtven will be teaching Crypto 101:
> https://us.pycon.org/2013/schedule/presentation/74/
>
> Brad Kuhn, of the Software Freedom Conservancy (Twisted's non-profit
> sponsor), will be talking about funding open source projects, using among
> others Twisted as an example:
> https://us.pycon.org/2013/schedule/presentation/48/
>
>
> *Other*
> *
> *
> Jessica McKellar will be giving one of the keynote addresses, though it
> probably has nothing to do with Twisted. (The posters list isn't up yet,
> but I'm betting Jessica will also have a poster.)
> *
> *
> I believe that as with every year we will be having a development sprint
> after the main conference, and a birds-of-feather session at some point.
>
>
> -Itamar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130128/061c6e33/attachment.html>

From exarkun at twistedmatrix.com  Mon Jan 28 08:33:06 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 28 Jan 2013 15:33:06 -0000
Subject: [Twisted-Python] inlineCallbacks: multiple yielding same
 Defferred behaviour
In-Reply-To: <06e201cdfd3d$41dedf50$c59c9df0$@gmail.com>
References: <069f01cdfd2b$c5660130$50320390$@gmail.com>
	<CAE_Hg6aMRUYyrtvL3-Ki9fWd9FTbnUidZjnT-rPA7sk7eMKR4g@mail.gmail.com>
	<06b201cdfd3a$f7acf450$e706dcf0$@gmail.com>
	<CAE_Hg6aus1gjAGfB8seguqO+RM-3XVVtPi9DRaB3qBz+v+bfxg@mail.gmail.com>
	<06e201cdfd3d$41dedf50$c59c9df0$@gmail.com>
Message-ID: <20130128153306.31543.595608386.divmod.xquotient.19@localhost6.localdomain6>

On 09:52 am, sergun at gmail.com wrote:
>My target is just to deny request duplications.
>
>Reg. inlineCallbacks.. What do you think is it possible to implement
>inlineCallbacks generator in the way allows multiple yields? (but do 
>not
>modify Defferred)

No, this isn't possible.  Single-use is a fundamental aspect of 
Deferred.

Instead, you can make a second (and third, etc) Deferred that has the 
same result as the first.

Jean-Paul
>
>
>From: Laurens Van Houtven [mailto:_ at lvh.cc]
>Sent: Monday, January 28, 2013 1:43 PM
>To: sergun at gmail.com
>Subject: Re: [Twisted-Python] inlineCallbacks: multiple yielding same
>Defferred behaviour
>
>
>
>The short answer is that those models don't support chaining the way
>Deferreds do, IIUC.
>
>I think a very similar thing was a bonus question at the tutorial 
>Stephen
>Thorne and I gave at EuroPython last year. Do you want to cache results 
>as
>well, or only not make duplicate requests when one is in-flight?
>
>
>
>On Mon, Jan 28, 2013 at 10:36 AM, Sergey V. Gerasimov 
><sergun at gmail.com>
>wrote:
>
>Hi Laurens,
>
>
>
>Thanks for your reply!
>
>
>
>I need something like this.
>
>A server that processes requests and handles situation when there are 2
>requests with same key.
>
>
>
>class Server(object):
>
>                def __init__(self):
>
>                                self.requestsInProgress = {} # dict: key 
>->
>Deferred with result
>
>
>
>                @defer.inlineCallbacks
>
>                def request(self, key):
>
>                               in_progress = key in self.requests
>
>                               if in_progress:
>
>                                               d = 
>self.requestsInProgress
>[key]
>
>                                               result = yield d
>
>                               else:
>
>                                               d = process_request(key)
>
>                                               self.requests[key] = d
>
>                                               result = yield d
>
>                                               del 
>self.requestsInProgress
>[key]
>
>                               defer.returnValue(result)
>
>
>
>How can I implement the logic correctly?
>
>
>
>In my opinion it's very simple and clear concept to consider Deferred 
>just
>like deferred execution of some action. In this case you should be able 
>to
>get it's result (doing yield) many times (why not?).
>
>
>
>
>
>I have deal with Task-based programming and async functions (mechanism
>similar to Deferred and inlineCallbacks decorated functions in Twisted) 
>in
>Microsoft  .NET.
>
>MS people have implemented Task (analogue of Deferred) in the way I
>described.
>
>
>
>
>
>
>
>From: Laurens Van Houtven [mailto:_ at lvh.cc]
>Sent: Monday, January 28, 2013 12:47 PM
>To: sergun at gmail.com; Twisted general discussion
>Subject: Re: [Twisted-Python] inlineCallbacks: multiple yielding same
>Defferred behaviour
>
>
>
>I'm not entirely sure why you feel this is unintuitive or why you 
>should
>need a workaround; in any other case, deferreds work pretty much the 
>same
>way.
>
>When reading this code, the first question that pops up in my head is: 
>why
>are you doing this instead of just using the result that you already 
>have
>(and assigned to a name)? How did this  waiting-twice-on-one-deferred
>happen?
>
>
>
>On Mon, Jan 28, 2013 at 8:47 AM, Sergey V. Gerasimov <sergun at gmail.com>
>wrote:
>
>It's not intuitively clear why multiple yielding the same Defferred in
>function decorated with defer.inlineCallbacks get different results:
>
>
>
>@defer.inlineCallbacks
>
>def f():
>
>                d = defer.succeed(1)
>
>                result = yield d
>
>print result
>
>                result = yield d
>
>print result
>
>
>
>Output:
>
>1
>
>None
>
>
>
>Probably we SHOULD NOT think if "d" was or was not yielded before when 
>using
>inlineCallbacks..
>
>
>
>Are they some workarounds?
>
>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
>--
>
>cheers
>
>lvh
>
>
>
>
>--
>
>cheers
>
>lvh



From itamar at futurefoundries.com  Mon Jan 28 08:33:12 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Mon, 28 Jan 2013 10:33:12 -0500
Subject: [Twisted-Python] Twisted-related talks and tutorials at PyCon
In-Reply-To: <CAE_Hg6Yv-QJp+bfHjobmqkL4kzV8AJRsM8x4=4+uEc45Wzao=w@mail.gmail.com>
References: <CAOp9P3p92Kp1DndQqyrAgEBySis26E+5Wdh-KbDUbxajPKFEvA@mail.gmail.com>
	<CAE_Hg6Yv-QJp+bfHjobmqkL4kzV8AJRsM8x4=4+uEc45Wzao=w@mail.gmail.com>
Message-ID: <CAOp9P3oiR5UfjzS4_UYePpv5Tx-sSuZ9nkKB8KUimz32idksGA@mail.gmail.com>

On Mon, Jan 28, 2013 at 10:15 AM, Laurens Van Houtven <_ at lvh.cc> wrote:

> My crypto 101 talk is probably going to be pretty light on the twisted:
> right now there's nothing in it, I'm considering adding some, but I'm also
> strapped for time :(
>

I should clarify that some of these talks may not even mention Twisted, but
I mentioned them since either the speakers were Twisted developers and/or
they might be of interest to Twisted users.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130128/93868293/attachment.html>

From glyph at twistedmatrix.com  Wed Jan 30 12:04:36 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 30 Jan 2013 11:04:36 -0800
Subject: [Twisted-Python] maintenance release - a security issue and a
	regression
Message-ID: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>

I think it might be time to have a maintenance release.  Two issues in particular stand out which might be suitable for inclusion in a 12.3.1:

<http://twistedmatrix.com/trac/ticket/6275> - This is a potential security issue which affects any twisted.web.template that uses the (recommended!) method of using a <t:attr> tag to render an attribute within a template.  This might even be suitable for maintenance releases of older versions, if anyone is using them.
<http://twistedmatrix.com/trac/ticket/6245> - This is a regression which affects anyone using twisted.names with 'unicode'-typed hostnames.  This used to work, and, some of our own examples as well as some in-the-wild applications - mostly those using XMPP - actually relied upon it.  IDNA hostnames never worked, but Python unicode-typed ASCII used to work and now it doesn't.

Of course, in order to have a maintenance release with these bug fixes, several things need to happen.

Someone needs to actually fix the issues. (I've written the code for #6275 but it is awaiting review; #6245 still needs to be fixed.)
Someone needs to back-port those fixes to a release branch, based on the 12.3.0 tag, and file tickets for those backports.
Someone needs to review the backports and get the committed to said branch.
Someone needs to volunteer to be the release manager for 12.3.0.

We apparently  don't have any official process documentation for doing patch releases, but most of what's in <http://twistedmatrix.com/trac/wiki/ReleaseProcess> should apply.

Any volunteers for parts of this process?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130130/cbf5d1a1/attachment.html>

From exarkun at twistedmatrix.com  Wed Jan 30 13:07:42 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 30 Jan 2013 20:07:42 -0000
Subject: [Twisted-Python] maintenance release - a security issue and a
 regression
In-Reply-To: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
Message-ID: <20130130200742.4522.1950789235.divmod.xquotient.16@localhost6.localdomain6>

On 07:04 pm, glyph at twistedmatrix.com wrote:
>[snip]
>
>Of course, in order to have a maintenance release with these bug fixes, 
>several things need to happen.
>
>Someone needs to actually fix the issues. (I've written the code for 
>#6275 but it is awaiting review; #6245 still needs to be fixed.)

#6275 looks resolved to me.

I suggest considering http://twistedmatrix.com/trac/ticket/6259 as well.

Jean-Paul
>Someone needs to back-port those fixes to a release branch, based on 
>the 12.3.0 tag, and file tickets for those backports.
>Someone needs to review the backports and get the committed to said 
>branch.
>Someone needs to volunteer to be the release manager for 12.3.0.

Not 12.3.0 - 12.3.1.
>
>We apparently  don't have any official process documentation for doing 
>patch releases, but most of what's in 
><http://twistedmatrix.com/trac/wiki/ReleaseProcess> should apply.

The other output should be documentation for the process for such a 
release.

Jean-Paul



From cam.turn at gmail.com  Wed Jan 30 13:25:34 2013
From: cam.turn at gmail.com (Shell)
Date: Wed, 30 Jan 2013 20:25:34 -0000
Subject: [Twisted-Python] maintenance release - a security issue and a
	regression
In-Reply-To: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
Message-ID: <fMZzBlt5s8dGQsNb1ECeOKOZlVflbC03-w902UUDe1-AmLoHo@smtp.gmail.com>


I'd like to volunteer to be release manager for Twisted 12.3.1, and
help work on the other parts of the backporting/release process as I
can.

I found and reported bug #6275 while working on a Twisted-based
project, and Glyph subsequently asked on IRC whether I'd like to be
involved in the release.


Shell


Glyph wrote:





I think it might be time to have a maintenance release.  Two issues in
particular stand out which might be suitable for inclusion in a
12.3.1:


  * <[http://twistedmatrix.com/trac/ticket/6275:
  <http://twistedmatrix.com/trac/ticket/6275>]> - This is a potential
  security issue which affects any twisted.web.template that uses the
  (recommended!) method of using a <t:attr> tag to render an attribute
  within a template.  This might even be suitable for maintenance
  releases of older versions, if anyone is using them.

  * <[http://twistedmatrix.com/trac/ticket/6245:
  <http://twistedmatrix.com/trac/ticket/6245>]> - This is a regression
  which affects anyone using twisted.names with 'unicode'-typed
  hostnames.  This used to work, and, some of our own examples as well
  as some in-the-wild applications - mostly those using XMPP -
  actually relied upon it.  IDNA hostnames never worked, but Python
  unicode-typed ASCII used to work and now it doesn't.

Of course, in order to have a maintenance release with these bug
fixes, several things need to happen.



  1) Someone needs to actually fix the issues. (I've written the code
  for #6275 but it is awaiting review; #6245 still needs to be fixed.)

  2) Someone needs to back-port those fixes to a release branch, based
  on the 12.3.0 tag, and file tickets for those backports.

  3) Someone needs to review the backports and get the committed to
  said branch.

  4) Someone needs to volunteer to be the release manager for 12.3.0.

We apparently  don't have any official process documentation for doing
patch releases, but most of what's in
<[http://twistedmatrix.com/trac/wiki/ReleaseProcess:
<http://twistedmatrix.com/trac/wiki/ReleaseProcess>]> should apply.

Any volunteers for parts of this process?

-glyph

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130130/ac2defd6/attachment.html>

From ralphm at ik.nu  Wed Jan 30 15:13:35 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Wed, 30 Jan 2013 23:13:35 +0100
Subject: [Twisted-Python] maintenance release - a security issue and a
 regression
In-Reply-To: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
Message-ID: <51099B0F.4010404@ik.nu>

I'll look at #6245 again tomorrow.

-- 
ralphm



From angelo.dellaera at gmail.com  Wed Jan 30 15:32:34 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Wed, 30 Jan 2013 23:32:34 +0100
Subject: [Twisted-Python] maintenance release - a security issue and a
 regression
In-Reply-To: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
Message-ID: <20130130233234.56c54ad2@saiph.darkstar.net>

On Wed, 30 Jan 2013 11:04:36 -0800
Glyph <glyph at twistedmatrix.com> wrote:

> Any volunteers for parts of this process?

I'm not familiar with Twisted patching process and for this reason I'm just attaching
a small patch here for #6245 because I'd like to discuss about the approach. If 
correct I will move on in the process (hopefully in the right way)

The patch simply tries to encode the name argument properly if unicode. This is
the same approach used by ralphm but applied to Name class initialization so it
should be really generic.

Just about a doubt about how to handle an exception potentially raised during the
name encoding. Any idea?

Ciao.

PS Attached a simple test code which forces the name to resolve to be unicode.
It fails against 12.3.0 while it is correclty executed after patching.

-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: gethostbyname.py
Type: text/x-python
Size: 569 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130130/d9bd7167/attachment-0002.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: patch.diff
Type: text/x-patch
Size: 642 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130130/d9bd7167/attachment-0002.bin>

From angelo.dellaera at gmail.com  Thu Jan 31 07:07:25 2013
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Thu, 31 Jan 2013 15:07:25 +0100
Subject: [Twisted-Python] maintenance release - a security issue and a
 regression
In-Reply-To: <20130130233234.56c54ad2@saiph.darkstar.net>
References: <F5DBA900-683B-4DC1-B912-40DA57279CC3@twistedmatrix.com>
	<20130130233234.56c54ad2@saiph.darkstar.net>
Message-ID: <20130131150725.7db9cf7b@saiph.darkstar.net>

On Wed, 30 Jan 2013 23:32:34 +0100
Angelo Dell'Aera <angelo.dellaera at gmail.com> wrote:

> On Wed, 30 Jan 2013 11:04:36 -0800
> Glyph <glyph at twistedmatrix.com> wrote:
> 
> > Any volunteers for parts of this process?
> 
> I'm not familiar with Twisted patching process and for this reason
> I'm just attaching a small patch here for #6245 because I'd like to
> discuss about the approach. If correct I will move on in the process
> (hopefully in the right way)
> 
> The patch simply tries to encode the name argument properly if
> unicode. This is the same approach used by ralphm but applied to Name
> class initialization so it should be really generic.
> 
> Just about a doubt about how to handle an exception potentially
> raised during the name encoding. Any idea?
> 
> Ciao.
> 
> PS Attached a simple test code which forces the name to resolve to be
> unicode. It fails against 12.3.0 while it is correclty executed after
> patching.


I read documentation about Twisted testing and tested if the suggested patch 
introduces some regressions in the existing code

buffer at saiph ~/Twisted-12.3.0/twisted $ trial twisted.names
[..]
Ran 271 tests in 0.425s

PASSED (successes=271)

which seems like it's not happening.

Obviously this is not exhaustive because seems like there are no specific tests 
for that code path (name is always passed as byte) but I can try writing some 
additional ones if needed. 

Ciao,

-- 

Angelo Dell'Aera 'buffer'
Antifork Research, Inc.		http://buffer.antifork.org
Sysenter Honeynet Project	http://www.sysenter-honeynet.org



From mgwilliams at gmail.com  Thu Jan 31 08:43:58 2013
From: mgwilliams at gmail.com (Matthew Williams)
Date: Thu, 31 Jan 2013 10:43:58 -0500
Subject: [Twisted-Python] txjsonrpc
Message-ID: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>

I have a couple questions regarding txjsonrpc (
https://github.com/oubiwann/txjsonrpc/) in connection with the recent
addition of version 2.0 support.

* How complete is the version 2.0 support? I had actually tried some years
ago to add v2.0 support, but gave up due to some issues I no longer fully
recall. Are there any known issues with the present implementation?

* I noticed that all results are wrapped in an array (see netstring version
at
https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64,
but the web implementation has the same code.). This seems odd, as a
jsonrpc result can be any valid json value, including a string, integer,
array, or dict. The result is that on the client end, what I return from
the function call as {"a": "b"} is received as [{"a": "b"}]. Is there some
reason for this? Would a patch altering this behavior (perhaps optionally)
be accepted?

Thanks in advance for any help on these two questions.

Matthew Williams
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130131/05b6e18e/attachment.html>

From _ at lvh.cc  Thu Jan 31 11:45:05 2013
From: _ at lvh.cc (Laurens Van Houtven)
Date: Thu, 31 Jan 2013 19:45:05 +0100
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
References: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
Message-ID: <CAE_Hg6b2u4GcB3ziHwOo4ex8BZgy=xBJmS-U=rd8FDduFF9xqw@mail.gmail.com>

On Thu, Jan 31, 2013 at 4:43 PM, Matthew Williams <mgwilliams at gmail.com>wrote:

> I have a couple questions regarding txjsonrpc (
> https://github.com/oubiwann/txjsonrpc/) in connection with the recent
> addition of version 2.0 support.
>
> * How complete is the version 2.0 support? I had actually tried some years
> ago to add v2.0 support, but gave up due to some issues I no longer fully
> recall. Are there any known issues with the present implementation?
>

Not that I know of.


> * I noticed that all results are wrapped in an array (see netstring
> version at
> https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64,
> but the web implementation has the same code.). This seems odd, as a
> jsonrpc result can be any valid json value, including a string, integer,
> array, or dict. The result is that on the client end, what I return from
> the function call as {"a": "b"} is received as [{"a": "b"}]. Is there some
> reason for this? Would a patch altering this behavior (perhaps optionally)
> be accepted?
>

Huh, that's weird. I knew the params had to be an array in some version of
JSONRPC (although this limitation appears to have been lifted right now). I
can't find anything like that in the spec, so I do wonder why that was ever
added :)


> Thanks in advance for any help on these two questions.
>
> Matthew Williams
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130131/df5c45ee/attachment.html>

From mgwilliams at gmail.com  Thu Jan 31 12:04:46 2013
From: mgwilliams at gmail.com (Matthew Williams)
Date: Thu, 31 Jan 2013 14:04:46 -0500
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CAE_Hg6b2u4GcB3ziHwOo4ex8BZgy=xBJmS-U=rd8FDduFF9xqw@mail.gmail.com>
References: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
	<CAE_Hg6b2u4GcB3ziHwOo4ex8BZgy=xBJmS-U=rd8FDduFF9xqw@mail.gmail.com>
Message-ID: <CAD6uV8Anc9NmdjwAGgvxL2hd-xKJenC3B_yaorXu4ke3e5uFQg@mail.gmail.com>

In that case, should there be a patch that skips that for v2? Or perhaps
just raise an error for versions < v2 if the function does not return a
list? Of course, this wouldn't be backwards compatible which might be
problematic.

On Thu, Jan 31, 2013 at 1:45 PM, Laurens Van Houtven <_ at lvh.cc> wrote:

> On Thu, Jan 31, 2013 at 4:43 PM, Matthew Williams <mgwilliams at gmail.com>wrote:
>
>> I have a couple questions regarding txjsonrpc (
>> https://github.com/oubiwann/txjsonrpc/) in connection with the recent
>> addition of version 2.0 support.
>>
>> * How complete is the version 2.0 support? I had actually tried some
>> years ago to add v2.0 support, but gave up due to some issues I no longer
>> fully recall. Are there any known issues with the present implementation?
>>
>
> Not that I know of.
>
>
>> * I noticed that all results are wrapped in an array (see netstring
>> version at
>> https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64,
>> but the web implementation has the same code.). This seems odd, as a
>> jsonrpc result can be any valid json value, including a string, integer,
>> array, or dict. The result is that on the client end, what I return from
>> the function call as {"a": "b"} is received as [{"a": "b"}]. Is there some
>> reason for this? Would a patch altering this behavior (perhaps optionally)
>> be accepted?
>>
>
> Huh, that's weird. I knew the params had to be an array in some version of
> JSONRPC (although this limitation appears to have been lifted right now). I
> can't find anything like that in the spec, so I do wonder why that was ever
> added :)
>
>
>> Thanks in advance for any help on these two questions.
>>
>> Matthew Williams
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> cheers
> lvh
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130131/176acfe5/attachment.html>

From mgwilliams at gmail.com  Thu Jan 31 12:43:23 2013
From: mgwilliams at gmail.com (Matthew Williams)
Date: Thu, 31 Jan 2013 14:43:23 -0500
Subject: [Twisted-Python] txjsonrpc
In-Reply-To: <CAD6uV8Anc9NmdjwAGgvxL2hd-xKJenC3B_yaorXu4ke3e5uFQg@mail.gmail.com>
References: <CAD6uV8D=UuygX3RawJ=i_4vcuwk==SK2FydYNi5x=G7r4hhQOg@mail.gmail.com>
	<CAE_Hg6b2u4GcB3ziHwOo4ex8BZgy=xBJmS-U=rd8FDduFF9xqw@mail.gmail.com>
	<CAD6uV8Anc9NmdjwAGgvxL2hd-xKJenC3B_yaorXu4ke3e5uFQg@mail.gmail.com>
Message-ID: <CAD6uV8BoOfXH01sagyzKTYiGm3ZekDeGM-bNg_sXtLjkra6YwA@mail.gmail.com>

It appears that even 1.0 spec (http://json-rpc.org/wiki/specification)
allows for non-array result values. Maybe there was a confusion with the
fact that in v1 only a list is valid for the request parameters.

On Thu, Jan 31, 2013 at 2:04 PM, Matthew Williams <mgwilliams at gmail.com>wrote:

> In that case, should there be a patch that skips that for v2? Or perhaps
> just raise an error for versions < v2 if the function does not return a
> list? Of course, this wouldn't be backwards compatible which might be
> problematic.
>
>
> On Thu, Jan 31, 2013 at 1:45 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
>
>> On Thu, Jan 31, 2013 at 4:43 PM, Matthew Williams <mgwilliams at gmail.com>wrote:
>>
>>> I have a couple questions regarding txjsonrpc (
>>> https://github.com/oubiwann/txjsonrpc/) in connection with the recent
>>> addition of version 2.0 support.
>>>
>>> * How complete is the version 2.0 support? I had actually tried some
>>> years ago to add v2.0 support, but gave up due to some issues I no longer
>>> fully recall. Are there any known issues with the present implementation?
>>>
>>
>> Not that I know of.
>>
>>
>>> * I noticed that all results are wrapped in an array (see netstring
>>> version at
>>> https://github.com/oubiwann/txjsonrpc/blob/master/txjsonrpc/netstring/jsonrpc.py#L63-L64,
>>> but the web implementation has the same code.). This seems odd, as a
>>> jsonrpc result can be any valid json value, including a string, integer,
>>> array, or dict. The result is that on the client end, what I return from
>>> the function call as {"a": "b"} is received as [{"a": "b"}]. Is there some
>>> reason for this? Would a patch altering this behavior (perhaps optionally)
>>> be accepted?
>>>
>>
>> Huh, that's weird. I knew the params had to be an array in some version
>> of JSONRPC (although this limitation appears to have been lifted right
>> now). I can't find anything like that in the spec, so I do wonder why that
>> was ever added :)
>>
>>
>>> Thanks in advance for any help on these two questions.
>>>
>>> Matthew Williams
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>>
>> --
>> cheers
>> lvh
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130131/bcd92920/attachment.html>

