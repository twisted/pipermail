From glyph at twistedmatrix.com  Sat Jan  1 09:52:03 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Jan 2011 09:52:03 -0500
Subject: [Twisted-Python] job server project
In-Reply-To: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
Message-ID: <D43A3DA3-AEC2-451F-9EF7-489243972785@twistedmatrix.com>


On Dec 31, 2010, at 7:35 AM, Umut Aydin wrote:

> Hello everybody

Hello Umut! :)

> I just completed an article about writing a job server with Twisted
> Framework. It's also based on my job server project called Jobbar.
> 
> http://umut.mobi/blog/2010/12/31/jobbar-distributed-job-server/
> 
> I'm still working on it.
> 
> Happy new year.
> 
> - Umut

Thanks for reporting your progress; it's always nice to hear how people are using Twisted.  And thanks again for your shout-out to those who work tirelessly answering questions here and on the IRC channel :).

Perhaps when Jobbar is a bit further along, you'd like to submit a success story <http://twistedmatrix.com/trac/wiki/SuccessStories> or join the TX project group on Launchpad <https://launchpad.net/tx>?

-g

From exarkun at twistedmatrix.com  Sun Jan  2 00:05:17 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 Jan 2011 05:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1293944717.3.1015830382@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110102/fab52bc0/attachment.htm 

From david at davidstrauss.net  Mon Jan  3 16:52:43 2011
From: david at davidstrauss.net (David Strauss)
Date: Mon, 03 Jan 2011 13:52:43 -0800
Subject: [Twisted-Python] job server project
In-Reply-To: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
Message-ID: <1294091563.3805.15.camel@oxygen>

On Fri, 2010-12-31 at 14:35 +0200, Umut Aydin wrote:
> I just completed an article about writing a job server with Twisted
> Framework. It's also based on my job server project called Jobbar.
> 
> http://umut.mobi/blog/2010/12/31/jobbar-distributed-job-server/
> 
> I'm still working on it.

As long as you're in Python land, you might want to check out Celery.

-- 
David Strauss
   | david at davidstrauss.net
   | +1 512 577 5827 [mobile]

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20110103/25a7e9f5/attachment.pgp 

From glyph at twistedmatrix.com  Mon Jan  3 17:23:43 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 3 Jan 2011 17:23:43 -0500
Subject: [Twisted-Python] job server project
In-Reply-To: <1294091563.3805.15.camel@oxygen>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
	<1294091563.3805.15.camel@oxygen>
Message-ID: <2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>


On Jan 3, 2011, at 4:52 PM, David Strauss wrote:

> On Fri, 2010-12-31 at 14:35 +0200, Umut Aydin wrote:
>> I just completed an article about writing a job server with Twisted
>> Framework. It's also based on my job server project called Jobbar.
>> 
>> http://umut.mobi/blog/2010/12/31/jobbar-distributed-job-server/
>> 
>> I'm still working on it.
> 
> As long as you're in Python land, you might want to check out Celery.


(in case it's not obvious, <http://celeryproject.org/>)

Oh, is Celery based on Twisted too?



From lvh at laurensvh.be  Mon Jan  3 18:47:55 2011
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Tue, 4 Jan 2011 00:47:55 +0100
Subject: [Twisted-Python] job server project
In-Reply-To: <2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
	<1294091563.3805.15.camel@oxygen>
	<2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>
Message-ID: <AANLkTimrHJgFOwGOxy70QOLDfPTee73LvUEzSx4cnXRW@mail.gmail.com>

AFAIK, no. It has a number of concurrency things:

 - gevent
 - eventlet
 - pools (threads and processes)

No twisted, afaik.

cheers,
lvh


From glyph at twistedmatrix.com  Mon Jan  3 22:48:02 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 3 Jan 2011 22:48:02 -0500
Subject: [Twisted-Python] job server project
In-Reply-To: <AANLkTimrHJgFOwGOxy70QOLDfPTee73LvUEzSx4cnXRW@mail.gmail.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
	<1294091563.3805.15.camel@oxygen>
	<2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>
	<AANLkTimrHJgFOwGOxy70QOLDfPTee73LvUEzSx4cnXRW@mail.gmail.com>
Message-ID: <1981317B-F4DF-4417-B9F4-3157E5F46BD5@twistedmatrix.com>


On Jan 3, 2011, at 6:47 PM, Laurens Van Houtven wrote:

> AFAIK, no. It has a number of concurrency things:
> 
> - gevent
> - eventlet
> - pools (threads and processes)
> 
> No twisted, afaik.
> 
> cheers,
> lvh

Well, sort of: eventlet uses the 'twistdr' hub by default, so you could probably use celery with Twisted just fine.  I wonder: has anyone done so?

From devnetwork at gmail.com  Tue Jan  4 05:13:12 2011
From: devnetwork at gmail.com (Umut Aydin)
Date: Tue, 4 Jan 2011 12:13:12 +0200
Subject: [Twisted-Python] job server project
In-Reply-To: <1981317B-F4DF-4417-B9F4-3157E5F46BD5@twistedmatrix.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
	<1294091563.3805.15.camel@oxygen>
	<2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>
	<AANLkTimrHJgFOwGOxy70QOLDfPTee73LvUEzSx4cnXRW@mail.gmail.com>
	<1981317B-F4DF-4417-B9F4-3157E5F46BD5@twistedmatrix.com>
Message-ID: <AANLkTinCboCkgxcG8BfMSXpMp4OzJa0mAjPstBUmY3yi@mail.gmail.com>

I haven't heard of gevent nor evenlet.
Thank you so much.

On Tue, Jan 4, 2011 at 5:48 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Jan 3, 2011, at 6:47 PM, Laurens Van Houtven wrote:
>
>> AFAIK, no. It has a number of concurrency things:
>>
>> - gevent
>> - eventlet
>> - pools (threads and processes)
>>
>> No twisted, afaik.
>>
>> cheers,
>> lvh
>
> Well, sort of: eventlet uses the 'twistdr' hub by default, so you could probably use celery with Twisted just fine. ?I wonder: has anyone done so?
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Best Regards,

Umut AYDIN
Email: me at umut.mobi

Skype: umut-aydin

Blog: http://umut.mobi


From lvh at laurensvh.be  Tue Jan  4 07:02:12 2011
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Tue, 4 Jan 2011 13:02:12 +0100
Subject: [Twisted-Python] job server project
In-Reply-To: <AANLkTinCboCkgxcG8BfMSXpMp4OzJa0mAjPstBUmY3yi@mail.gmail.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
	<1294091563.3805.15.camel@oxygen>
	<2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>
	<AANLkTimrHJgFOwGOxy70QOLDfPTee73LvUEzSx4cnXRW@mail.gmail.com>
	<1981317B-F4DF-4417-B9F4-3157E5F46BD5@twistedmatrix.com>
	<AANLkTinCboCkgxcG8BfMSXpMp4OzJa0mAjPstBUmY3yi@mail.gmail.com>
Message-ID: <AANLkTinwjB2tJmUTfcWcPic5ZOjBmNxaNXFWaA0F+n73@mail.gmail.com>

Note: I'm not David -- I was just clarifying Glyph's question. I'm not
suggesting you should use either of those. If you are interested in
things that look like with Twisted, I recommend

 - look at @inlineCallbacks -- it uses generators, not greenlet-style
coroutines, but quite often it covers what you want
 - look at Corotwine -- it's basically greenlets with a Twisted
backend, somewhat comparable to eventlet with a Twisted backend, but
without the monkey patching

cheers
lvh


From ypercube at gmail.com  Tue Jan  4 18:10:06 2011
From: ypercube at gmail.com (Pandelis Theodosiou)
Date: Wed, 5 Jan 2011 01:10:06 +0200
Subject: [Twisted-Python] multicast
In-Reply-To: <CB733F3E-9468-4416-8F86-09FF32FA202A@red-elvis.net>
References: <AANLkTimgGJPEhcifzaLd01LVTPbPyL2znz30n5RRaXj1@mail.gmail.com>
	<1292457974.1779.0.camel@blake>
	<AANLkTi=5GmOLqr-d0=Cnow6g6Uut3SZab8amSR8ZzNeJ@mail.gmail.com>
	<1292515193.2033.1.camel@blake>
	<20101216161029.2058.1592790811.divmod.xquotient.275@localhost.localdomain>
	<CB733F3E-9468-4416-8F86-09FF32FA202A@red-elvis.net>
Message-ID: <AANLkTik7Zod0UGMvxnA76Wd4UeX1OT9zkzKeEomwez4Z@mail.gmail.com>

On Thu, Dec 16, 2010 at 6:47 PM, Andrew Gasson <agasson at red-elvis.net>wrote:

>
> On 16/12/2010, at 5:10 PM, exarkun at twistedmatrix.com wrote:
>
> > On 03:59 pm, itamar at itamarst.org wrote:
> >> On Thu, 2010-12-16 at 12:09 +0200, Pandelis Theodosiou wrote:
> >>>
> >>> I've also tried to use listenMulticast instead of listenUDP but then I
> >>> realized this is if I need more than one application to listen/write
> >>> to the multicast port and I don't need that.
> >>> pandelis
> >>
> >> You should use listenMulticast regardless if you want to use multicast.
> >
> > Is that an error in the udp howto, then?  The second multicast example
> > uses listenUDP.
>
> check the ttl of your multicast source , they usually default to TTL=1 so
> wont pass a router hop, also with nix boxes check once you start listening
> you are listening on right interface with netstat -g
>
> Gas
> >
> > Jean-Paul
> >
>


Thnx to all for the responses. It was a router configuration.

Now, is there a way I can select which interface to use (eth0 or eth1)?

I tried using

  joinGroup('233.75.215.44', 'eth0')

but it raises an error   (DNS Lookup failed...)


Pandelis
 <http://int.ask.com/web?siteid=10000861&webqsrc=999&l=dis&q=that%20eth0>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110105/6e9376bc/attachment.htm 

From exarkun at twistedmatrix.com  Tue Jan  4 22:06:09 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Jan 2011 03:06:09 -0000
Subject: [Twisted-Python] multicast
In-Reply-To: <AANLkTik7Zod0UGMvxnA76Wd4UeX1OT9zkzKeEomwez4Z@mail.gmail.com>
References: <AANLkTimgGJPEhcifzaLd01LVTPbPyL2znz30n5RRaXj1@mail.gmail.com>
	<1292457974.1779.0.camel@blake>
	<AANLkTi=5GmOLqr-d0=Cnow6g6Uut3SZab8amSR8ZzNeJ@mail.gmail.com>
	<1292515193.2033.1.camel@blake>
	<20101216161029.2058.1592790811.divmod.xquotient.275@localhost.localdomain>
	<CB733F3E-9468-4416-8F86-09FF32FA202A@red-elvis.net>
	<AANLkTik7Zod0UGMvxnA76Wd4UeX1OT9zkzKeEomwez4Z@mail.gmail.com>
Message-ID: <20110105030609.2264.1926000966.divmod.xquotient.1@localhost.localdomain>

On 4 Jan, 11:10 pm, ypercube at gmail.com wrote:
>
>Thnx to all for the responses. It was a router configuration.
>
>Now, is there a way I can select which interface to use (eth0 or eth1)?
>
>I tried using
>
>  joinGroup('233.75.215.44', 'eth0')
>
>but it raises an error   (DNS Lookup failed...)

Pass something like 192.168.1.1 for the second argument, not something 
like eth0.

Jean-Paul


From exarkun at twistedmatrix.com  Tue Jan  4 22:15:12 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Jan 2011 03:15:12 -0000
Subject: [Twisted-Python] Want something fixed?
Message-ID: <20110105031512.2264.1908181618.divmod.xquotient.8@localhost.localdomain>

Hi all,

I'd like someone to do a review on #4395 - a ticket about some conch key 
exchange bugs.  The branch isn't very large, a little under 500 lines of 
diff (with nearly a hundred of those deletions).

In exchange for a thorough review (and perhaps a re-review if issues are 
found which need to be fixed), I'd be happy to spend as much as a full 
day working on some other issue of the reviewer's choice.

Thanks,
Jean-Paul


From ypercube at gmail.com  Sat Jan  8 20:23:06 2011
From: ypercube at gmail.com (Pandelis Theodosiou)
Date: Sun, 9 Jan 2011 03:23:06 +0200
Subject: [Twisted-Python] Amazon AWS, Google app engine and Twisted
Message-ID: <AANLkTim2Y-EEJVMf=N7ahSA+hxTYB8VjXVstZu8yuEX1@mail.gmail.com>

This may be a dumb question but I'll make it anyway:

Is it possible to use Amazon AWS or Google app engine as a hosting
envirorment for a Twisted application?

Pandelis
 <http://int.ask.com/web?siteid=10000861&webqsrc=999&l=dis&q=ask%20>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110109/38290644/attachment.html 

From exarkun at twistedmatrix.com  Sun Jan  9 00:05:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Jan 2011 05:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1294549522.94.941819425@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110109/49ca3132/attachment.htm 

From clemesha at gmail.com  Sun Jan  9 02:00:09 2011
From: clemesha at gmail.com (Alex Clemesha)
Date: Sat, 8 Jan 2011 23:00:09 -0800
Subject: [Twisted-Python] Amazon AWS, Google app engine and Twisted
In-Reply-To: <AANLkTim2Y-EEJVMf=N7ahSA+hxTYB8VjXVstZu8yuEX1@mail.gmail.com>
References: <AANLkTim2Y-EEJVMf=N7ahSA+hxTYB8VjXVstZu8yuEX1@mail.gmail.com>
Message-ID: <AANLkTimTjOGoE0Tc0yAsUzZD7re7PAnb5WkAc9OGtF+P@mail.gmail.com>

On Sat, Jan 8, 2011 at 5:23 PM, Pandelis Theodosiou <ypercube at gmail.com>wrote:

> This may be a dumb question but I'll make it anyway:
>
> Is it possible to use Amazon AWS

Absolutely. A lot of people have large Twisted apps on AWS.

or Google app engine as a hosting envirorment for a Twisted application?
>
No, not currently (if ever?).

-Alex



>
> Pandelis
>  <http://int.ask.com/web?siteid=10000861&webqsrc=999&l=dis&q=ask%20>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Alex Clemesha
clemesha.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110108/1476b6c7/attachment.htm 

From angelo.dellaera at gmail.com  Sun Jan  9 06:10:11 2011
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Sun, 9 Jan 2011 12:10:11 +0100
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
Message-ID: <20110109121011.003937fb@alnitak.communicationvalley.it>


Hi, 
while developing a code based on Twisted Names I'm finding myself catching 
RuntimeErrors like the one reported below. 


2011-01-09 10:32:13+0100 [twisted.names.dns.DNSDatagramProtocol (UDP)]
Unhandled Error Traceback (most recent call last):
  File "/usr/lib64/python2.6/site-packages/twisted/python/log.py", line 84, in callWithLogger 
		return callWithContext({"system": lp}, func, *args, **kw)
  File "/usr/lib64/python2.6/site-packages/twisted/python/log.py", line 69, in callWithContext 
		return context.call({ILogContext: newCtx}, func, *args,**kw) 
  File "/usr/lib64/python2.6/site-packages/twisted/python/context.py", line 59, in callWithContext 
		return self.currentContext().callWithContext(ctx, func, *args, **kw) 
  File "/usr/lib64/python2.6/site-packages/twisted/python/context.py", line 37, in callWithContext 
	return func(*args,**kw) 
  --- <exception caught here> --- 
  File "/usr/lib64/python2.6/site-packages/twisted/internet/epollreactor.py", line 220, in _doReadOrWrite 
	why = selectable.doWrite() 
  File "/usr/lib64/python2.6/site-packages/twisted/internet/base.py", line 1083, in doWrite 
	raise RuntimeError, "doWrite called on a %s" % reflect.qual(self.__class__)
  exceptions.RuntimeError: doWrite called on a twisted.internet.udp.Port


The code which produces this error is really complex and is part of an 
intelligence data gathering framework I'm developing for the Honeynet 
Project (for those interested in details please take a look at my technical 
blog http://buffer.antifork.org/blog/category/tip/ ). 

I realized that 
	. the RuntimeError is raised really rarely (I see one of such errors 
	  every 2-3 days and during this time frame millions of DNS requests
	  and replies are handled)
	. using different Twisted versions doesn't make the problem disappear
	  (the attached traceback refers to version 10.2.0) 
	. selecting a different reactor doesn't make the problem disappear

Unfortunately I have not a test code for reproducing the issue and sincerely
speaking I really don't know how to write it because this condition is so rarely
met that I'm not able to understand what leads to it.

I could be wrong but taking a look at twisted.internet.udp.Port I see it defines a
write method so I really do not understand the reason why the BasePort doWrite
method raises such error. 

Thanks for your attention and cheers, 

-- 

Angelo Dell'Aera 'buffer' 
Antifork Research, Inc.	  	http://buffer.antifork.org
Metro Olografix



From itamar at itamarst.org  Sun Jan  9 08:54:18 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 09 Jan 2011 08:54:18 -0500
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <20110109121011.003937fb@alnitak.communicationvalley.it>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>
Message-ID: <1294581258.1642.6.camel@blake>

On Sun, 2011-01-09 at 12:10 +0100, Angelo Dell'Aera wrote:
> Hi, 
> while developing a code based on Twisted Names I'm finding myself catching 
> RuntimeErrors like the one reported below. 

It seems like someone, somewhere is doing a startWriting() (or
pauseProducing) on the Port object, i.e. the transport of the
DatagramProtocol. Do you have any code that does
startWriting/pauseProducing? I don't see any in twisted.internet.udp or
twisted.names.



From exarkun at twistedmatrix.com  Sun Jan  9 09:54:33 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Jan 2011 14:54:33 -0000
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <1294581258.1642.6.camel@blake>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>
	<1294581258.1642.6.camel@blake>
Message-ID: <20110109145433.1889.2000788460.divmod.xquotient.13@localhost.localdomain>

On 01:54 pm, itamar at itamarst.org wrote:
>On Sun, 2011-01-09 at 12:10 +0100, Angelo Dell'Aera wrote:
>>Hi,
>>while developing a code based on Twisted Names I'm finding myself 
>>catching
>>RuntimeErrors like the one reported below.
>
>It seems like someone, somewhere is doing a startWriting() (or
>pauseProducing) on the Port object, i.e. the transport of the
>DatagramProtocol. Do you have any code that does
>startWriting/pauseProducing? I don't see any in twisted.internet.udp or
>twisted.names.

Perhaps an easy way to track this down would be to make 
udp.Port.startWriting raise an exception.  Perhaps that's even what it 
should do in Twisted itself.

Jean-Paul


From angelo.dellaera at gmail.com  Sun Jan  9 10:42:44 2011
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Sun, 9 Jan 2011 16:42:44 +0100
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <1294581258.1642.6.camel@blake>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>
	<1294581258.1642.6.camel@blake>
Message-ID: <20110109164244.6ba86b38@alnitak.communicationvalley.it>

On Sun, 09 Jan 2011 08:54:18 -0500
Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> On Sun, 2011-01-09 at 12:10 +0100, Angelo Dell'Aera wrote:
> > Hi, 
> > while developing a code based on Twisted Names I'm finding myself
> > catching RuntimeErrors like the one reported below. 
> 
> It seems like someone, somewhere is doing a startWriting() (or
> pauseProducing) on the Port object, i.e. the transport of the
> DatagramProtocol. Do you have any code that does
> startWriting/pauseProducing? I don't see any in twisted.internet.udp or
> twisted.names.

Hi Itamar,
I make no use of startWriting/pauseProducing in my code. I'm just creating
a client.Resolver and then using its lookup* methods as suggested in the
documentation at

http://twistedmatrix.com/documents/current/names/examples/

I just subclassed the client.Resolver in order to define an empty
connectionLost method this way

class TIPResolver(client.Resolver):
    def __init__(self):
        client.Resolver.__init__(self, resolv = '/etc/resolv.conf')

    def connectionLost(self, protocol):
        pass 

r = TIPResolver()

but nothing more than this.

Thanks and cheers.

PS If you need I can send you the source code off-list.

-- 

Angelo Dell'Aera 'buffer' 
Antifork Research, Inc.	  	http://buffer.antifork.org
Metro Olografix



From angelo.dellaera at gmail.com  Sun Jan  9 10:47:27 2011
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Sun, 9 Jan 2011 16:47:27 +0100
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <20110109145433.1889.2000788460.divmod.xquotient.13@localhost.localdomain>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>
	<1294581258.1642.6.camel@blake>
	<20110109145433.1889.2000788460.divmod.xquotient.13@localhost.localdomain>
Message-ID: <20110109164727.50cc99c4@alnitak.communicationvalley.it>

On Sun, 09 Jan 2011 14:54:33 -0000
exarkun at twistedmatrix.com wrote:

> On 01:54 pm, itamar at itamarst.org wrote:
> >On Sun, 2011-01-09 at 12:10 +0100, Angelo Dell'Aera wrote:
> >>Hi,
> >>while developing a code based on Twisted Names I'm finding myself 
> >>catching
> >>RuntimeErrors like the one reported below.
> >
> >It seems like someone, somewhere is doing a startWriting() (or
> >pauseProducing) on the Port object, i.e. the transport of the
> >DatagramProtocol. Do you have any code that does
> >startWriting/pauseProducing? I don't see any in twisted.internet.udp or
> >twisted.names.
> 
> Perhaps an easy way to track this down would be to make 
> udp.Port.startWriting raise an exception.  Perhaps that's even what it 
> should do in Twisted itself.

Jean-Paul,
I can try adding the startWriting method and see what happens if needed. If
you need additional details from such exception in order to better track
down the issue please let me know and I'll be glad to add everything.  

Thanks and cheers,

-- 

Angelo Dell'Aera 'buffer' 
Antifork Research, Inc.	  	http://buffer.antifork.org
Metro Olografix



From ziga.seilnacht at gmail.com  Sun Jan  9 14:08:01 2011
From: ziga.seilnacht at gmail.com (=?windows-1252?Q?=8Eiga_Seilnacht?=)
Date: Sun, 09 Jan 2011 20:08:01 +0100
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <20110109164727.50cc99c4@alnitak.communicationvalley.it>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>	<1294581258.1642.6.camel@blake>	<20110109145433.1889.2000788460.divmod.xquotient.13@localhost.localdomain>
	<20110109164727.50cc99c4@alnitak.communicationvalley.it>
Message-ID: <4D2A0791.5070100@gmail.com>

On 9.1.2011 16:47, Angelo Dell'Aera wrote:
> On Sun, 09 Jan 2011 14:54:33 -0000
> exarkun at twistedmatrix.com wrote:
>
>>  On 01:54 pm, itamar at itamarst.org wrote:
>>  >On Sun, 2011-01-09 at 12:10 +0100, Angelo Dell'Aera wrote:
>>  >>Hi,
>>  >>while developing a code based on Twisted Names I'm finding myself
>>  >>catching
>>  >>RuntimeErrors like the one reported below.
>>  >
>>  >It seems like someone, somewhere is doing a startWriting() (or
>>  >pauseProducing) on the Port object, i.e. the transport of the
>>  >DatagramProtocol. Do you have any code that does
>>  >startWriting/pauseProducing? I don't see any in twisted.internet.udp or
>>  >twisted.names.
>>
>>  Perhaps an easy way to track this down would be to make
>>  udp.Port.startWriting raise an exception.  Perhaps that's even what it
>>  should do in Twisted itself.
>
> Jean-Paul,
> I can try adding the startWriting method and see what happens if needed. If
> you need additional details from such exception in order to better track
> down the issue please let me know and I'll be glad to add everything.
>
> Thanks and cheers,

Could you also let us know which operating system and version you are
using and which reactors you tried? A similar error was recently reported
for poll reactor on FreeBSD (http://twistedmatrix.com/trac/ticket/4759).

Regards,
Ziga


From angelo.dellaera at gmail.com  Sun Jan  9 14:25:22 2011
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Sun, 9 Jan 2011 20:25:22 +0100
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <4D2A0791.5070100@gmail.com>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>
	<1294581258.1642.6.camel@blake>
	<20110109145433.1889.2000788460.divmod.xquotient.13@localhost.localdomain>
	<20110109164727.50cc99c4@alnitak.communicationvalley.it>
	<4D2A0791.5070100@gmail.com>
Message-ID: <20110109202522.75343c7c@alnitak.communicationvalley.it>

On Sun, 09 Jan 2011 20:08:01 +0100
?iga Seilnacht <ziga.seilnacht at gmail.com> wrote:


> Could you also let us know which operating system and version you are
> using and which reactors you tried? A similar error was recently reported
> for poll reactor on FreeBSD (http://twistedmatrix.com/trac/ticket/4759).

Sure.

OS: 		Gentoo Linux (kernel 2.6.34)
Twisted: 	10.1.0 and10.2.0
Reactors: select (default) and epoll

I tried all the possible combinations of Twisted and reactors always
getting the same error.

Thanks and regards, 

-- 

Angelo Dell'Aera 'buffer' 
Antifork Research, Inc.	  	http://buffer.antifork.org
Metro Olografix



From jml at mumak.net  Mon Jan 10 12:11:37 2011
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 10 Jan 2011 11:11:37 -0600
Subject: [Twisted-Python] Want something fixed?
In-Reply-To: <20110105031512.2264.1908181618.divmod.xquotient.8@localhost.localdomain>
References: <20110105031512.2264.1908181618.divmod.xquotient.8@localhost.localdomain>
Message-ID: <AANLkTinB5wk_NjnGqi-X6RnkMn+gHtE9aG3k9fL3RXDv@mail.gmail.com>

On Tue, Jan 4, 2011 at 9:15 PM,  <exarkun at twistedmatrix.com> wrote:
> Hi all,
>
> I'd like someone to do a review on #4395 - a ticket about some conch key
> exchange bugs. ?The branch isn't very large, a little under 500 lines of
> diff (with nearly a hundred of those deletions).
>
> In exchange for a thorough review (and perhaps a re-review if issues are
> found which need to be fixed), I'd be happy to spend as much as a full
> day working on some other issue of the reviewer's choice.
>

Have you found a volunteer yet?

If not, I can do a thorough review this weekend. In exchange, I'd very
much like my pyflakes branch to be reviewed and landed. (Although
perhaps I should ask for moving pyflakes to Launchpad?)

jml


From exarkun at twistedmatrix.com  Mon Jan 10 12:31:11 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 10 Jan 2011 17:31:11 -0000
Subject: [Twisted-Python] Want something fixed?
In-Reply-To: <AANLkTinB5wk_NjnGqi-X6RnkMn+gHtE9aG3k9fL3RXDv@mail.gmail.com>
References: <20110105031512.2264.1908181618.divmod.xquotient.8@localhost.localdomain>
	<AANLkTinB5wk_NjnGqi-X6RnkMn+gHtE9aG3k9fL3RXDv@mail.gmail.com>
Message-ID: <20110110173111.1821.2136864876.divmod.xquotient.77@localhost.localdomain>

On 05:11 pm, jml at mumak.net wrote:
>On Tue, Jan 4, 2011 at 9:15 PM,  <exarkun at twistedmatrix.com> wrote:
>>Hi all,
>>
>>I'd like someone to do a review on #4395 - a ticket about some conch 
>>key
>>exchange bugs. ?The branch isn't very large, a little under 500 lines 
>>of
>>diff (with nearly a hundred of those deletions).
>>
>>In exchange for a thorough review (and perhaps a re-review if issues 
>>are
>>found which need to be fixed), I'd be happy to spend as much as a full
>>day working on some other issue of the reviewer's choice.
>
>Have you found a volunteer yet?
>
>If not, I can do a thorough review this weekend. In exchange, I'd very
>much like my pyflakes branch to be reviewed and landed. (Although
>perhaps I should ask for moving pyflakes to Launchpad?)

Woops, yes, I should have followed up on Friday.  Michael Hudson did the 
review, and this ticket is now resolved.

As far as moving pyflakes to Launchpad goes, talk to me on IRC.  We are 
trying to do that but might need some help. :)

Jean-Paul


From robfranchesco at gmail.com  Mon Jan 10 16:29:58 2011
From: robfranchesco at gmail.com (Roberto Franchesco)
Date: Mon, 10 Jan 2011 16:29:58 -0500
Subject: [Twisted-Python] Twisted and ICP protocol
Message-ID: <AANLkTi=6vq6xzekN+AQyL3gn5BCLa=y-4Gnj52Rc22WE@mail.gmail.com>

Hello All,

I have been trying to get a squid proxy to "talk" to a twisted proxy
and I came across an old email from this list where someone mentioned
that they had implemented a basic ICP protocol in twisted.

Does anyone still have that implementation?  Or any good pointers on
setting me off in the right direction as to how to do this?

-Rob


From alex.gronholm at nextday.fi  Mon Jan 10 16:57:14 2011
From: alex.gronholm at nextday.fi (=?ISO-8859-1?Q?Alex_Gr=F6nholm?=)
Date: Mon, 10 Jan 2011 23:57:14 +0200
Subject: [Twisted-Python] Twisted and PEP 3148 support
Message-ID: <4D2B80BA.2080506@nextday.fi>

There has been some discussion over email between myself and several 
Twisted developers regarding the possibility of adding support for PEP 
3148 futures and executors to Twisted. I'm starting this thread to move 
the conversation to this mailing list to gain a broader audience.

For those who do not know what PEP 3148 is about, suffice to say that 
it's an API for deferred execution of code. The reference implementation 
can be found in the Python 3.2 standard library under the package name 
concurrent.futures. A backport that works on Python 2.5, 2.6, 2.7 and 
3.1 has been made available by Brian Quinlan and myself and is available 
for download at the Python Package Index.

A brief summary of the email conversations:

* The purpose of integrating PEP 3148 support is the intended shift 
towards a common API for creating asynchronous applications
* Deferreds and Futures are alike in purpose but very different under 
the hood
* Support for the Futures API cannot be integrated directly to Deferreds 
because of the "result" attribute which is a method in Future but a 
value in Deferred
* Some people suggested wrapping Futures in Deferreds, though I have yet 
to hear a rationale for this
* PEP 3148 executor support could be directly integrated to Twisted's 
thread pools (and by extension, reactors) as there are no naming 
conflicts that I'm aware of

The main focus of the discussion is to figure out how to best integrate 
support for this new API to Twisted. If possible, existing protocols 
should remain compatible through the use of adapters or some other 
mechanism. If not, a way to port them over with a minimal amount of work 
would be the next target.


From jasonjwwilliams at gmail.com  Mon Jan 10 17:01:16 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 10 Jan 2011 15:01:16 -0700
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <4D2B80BA.2080506@nextday.fi>
References: <4D2B80BA.2080506@nextday.fi>
Message-ID: <AANLkTimA0D3J8aGE5jb53V5HPwzuicv3Cuab5nefBEum@mail.gmail.com>

Do futures support chaining? From a cursory read of PEP 3148 it
doesn't look like they do.

-J

2011/1/10 Alex Gr?nholm <alex.gronholm at nextday.fi>:
> There has been some discussion over email between myself and several
> Twisted developers regarding the possibility of adding support for PEP
> 3148 futures and executors to Twisted. I'm starting this thread to move
> the conversation to this mailing list to gain a broader audience.
>
> For those who do not know what PEP 3148 is about, suffice to say that
> it's an API for deferred execution of code. The reference implementation
> can be found in the Python 3.2 standard library under the package name
> concurrent.futures. A backport that works on Python 2.5, 2.6, 2.7 and
> 3.1 has been made available by Brian Quinlan and myself and is available
> for download at the Python Package Index.
>
> A brief summary of the email conversations:
>
> * The purpose of integrating PEP 3148 support is the intended shift
> towards a common API for creating asynchronous applications
> * Deferreds and Futures are alike in purpose but very different under
> the hood
> * Support for the Futures API cannot be integrated directly to Deferreds
> because of the "result" attribute which is a method in Future but a
> value in Deferred
> * Some people suggested wrapping Futures in Deferreds, though I have yet
> to hear a rationale for this
> * PEP 3148 executor support could be directly integrated to Twisted's
> thread pools (and by extension, reactors) as there are no naming
> conflicts that I'm aware of
>
> The main focus of the discussion is to figure out how to best integrate
> support for this new API to Twisted. If possible, existing protocols
> should remain compatible through the use of adapters or some other
> mechanism. If not, a way to port them over with a minimal amount of work
> would be the next target.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From alex.gronholm at nextday.fi  Mon Jan 10 17:04:14 2011
From: alex.gronholm at nextday.fi (=?ISO-8859-1?Q?Alex_Gr=F6nholm?=)
Date: Tue, 11 Jan 2011 00:04:14 +0200
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <AANLkTimA0D3J8aGE5jb53V5HPwzuicv3Cuab5nefBEum@mail.gmail.com>
References: <4D2B80BA.2080506@nextday.fi>
	<AANLkTimA0D3J8aGE5jb53V5HPwzuicv3Cuab5nefBEum@mail.gmail.com>
Message-ID: <4D2B825E.3000506@nextday.fi>

11.01.2011 00:01, Jason J. W. Williams kirjoitti:
> Do futures support chaining? From a cursory read of PEP 3148 it
> doesn't look like they do.
They don't support chaining. Like I said, the underlying mechanics are 
quite a bit different from Deferreds. I don't really see that as a 
problem. Feel free to argue against this.
> -J
>
> 2011/1/10 Alex Gr?nholm<alex.gronholm at nextday.fi>:
>> There has been some discussion over email between myself and several
>> Twisted developers regarding the possibility of adding support for PEP
>> 3148 futures and executors to Twisted. I'm starting this thread to move
>> the conversation to this mailing list to gain a broader audience.
>>
>> For those who do not know what PEP 3148 is about, suffice to say that
>> it's an API for deferred execution of code. The reference implementation
>> can be found in the Python 3.2 standard library under the package name
>> concurrent.futures. A backport that works on Python 2.5, 2.6, 2.7 and
>> 3.1 has been made available by Brian Quinlan and myself and is available
>> for download at the Python Package Index.
>>
>> A brief summary of the email conversations:
>>
>> * The purpose of integrating PEP 3148 support is the intended shift
>> towards a common API for creating asynchronous applications
>> * Deferreds and Futures are alike in purpose but very different under
>> the hood
>> * Support for the Futures API cannot be integrated directly to Deferreds
>> because of the "result" attribute which is a method in Future but a
>> value in Deferred
>> * Some people suggested wrapping Futures in Deferreds, though I have yet
>> to hear a rationale for this
>> * PEP 3148 executor support could be directly integrated to Twisted's
>> thread pools (and by extension, reactors) as there are no naming
>> conflicts that I'm aware of
>>
>> The main focus of the discussion is to figure out how to best integrate
>> support for this new API to Twisted. If possible, existing protocols
>> should remain compatible through the use of adapters or some other
>> mechanism. If not, a way to port them over with a minimal amount of work
>> would be the next target.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From alex.gronholm at nextday.fi  Mon Jan 10 17:12:19 2011
From: alex.gronholm at nextday.fi (=?ISO-8859-1?Q?Alex_Gr=F6nholm?=)
Date: Tue, 11 Jan 2011 00:12:19 +0200
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <AANLkTimA0D3J8aGE5jb53V5HPwzuicv3Cuab5nefBEum@mail.gmail.com>
References: <4D2B80BA.2080506@nextday.fi>
	<AANLkTimA0D3J8aGE5jb53V5HPwzuicv3Cuab5nefBEum@mail.gmail.com>
Message-ID: <4D2B8443.7070808@nextday.fi>

11.01.2011 00:01, Jason J. W. Williams kirjoitti:
> Do futures support chaining? From a cursory read of PEP 3148 it
> doesn't look like they do.
To add to my previous statement, this will obviously limit the 
portability of existing protocols, but I don't see it as a problem for 
*new code*.
> -J
>
> 2011/1/10 Alex Gr?nholm<alex.gronholm at nextday.fi>:
>> There has been some discussion over email between myself and several
>> Twisted developers regarding the possibility of adding support for PEP
>> 3148 futures and executors to Twisted. I'm starting this thread to move
>> the conversation to this mailing list to gain a broader audience.
>>
>> For those who do not know what PEP 3148 is about, suffice to say that
>> it's an API for deferred execution of code. The reference implementation
>> can be found in the Python 3.2 standard library under the package name
>> concurrent.futures. A backport that works on Python 2.5, 2.6, 2.7 and
>> 3.1 has been made available by Brian Quinlan and myself and is available
>> for download at the Python Package Index.
>>
>> A brief summary of the email conversations:
>>
>> * The purpose of integrating PEP 3148 support is the intended shift
>> towards a common API for creating asynchronous applications
>> * Deferreds and Futures are alike in purpose but very different under
>> the hood
>> * Support for the Futures API cannot be integrated directly to Deferreds
>> because of the "result" attribute which is a method in Future but a
>> value in Deferred
>> * Some people suggested wrapping Futures in Deferreds, though I have yet
>> to hear a rationale for this
>> * PEP 3148 executor support could be directly integrated to Twisted's
>> thread pools (and by extension, reactors) as there are no naming
>> conflicts that I'm aware of
>>
>> The main focus of the discussion is to figure out how to best integrate
>> support for this new API to Twisted. If possible, existing protocols
>> should remain compatible through the use of adapters or some other
>> mechanism. If not, a way to port them over with a minimal amount of work
>> would be the next target.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From radix at twistedmatrix.com  Mon Jan 10 18:26:24 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 10 Jan 2011 17:26:24 -0600
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <4D2B80BA.2080506@nextday.fi>
References: <4D2B80BA.2080506@nextday.fi>
Message-ID: <AANLkTi=9n16eFVKNwQw=VhDZXNpTn4=93J_dUGLZPWPu@mail.gmail.com>

2011/1/10 Alex Gr?nholm <alex.gronholm at nextday.fi>

> There has been some discussion over email between myself and several
> Twisted developers regarding the possibility of adding support for PEP
> 3148 futures and executors to Twisted. I'm starting this thread to move
> the conversation to this mailing list to gain a broader audience.
>
> For those who do not know what PEP 3148 is about, suffice to say that
> it's an API for deferred execution of code.



I just want to make clear up-front the subtle point that Twisted's Deferreds
are not tools for "deferred execution of code", but rather for "deferred
receipt of results". It's easy to forget this and believe that the similar
jargon implies similarity in purpose.


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110110/9d9bbf2a/attachment.htm 

From alex.gronholm at nextday.fi  Mon Jan 10 18:36:44 2011
From: alex.gronholm at nextday.fi (=?UTF-8?B?QWxleCBHcsO2bmhvbG0=?=)
Date: Tue, 11 Jan 2011 01:36:44 +0200
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <AANLkTi=9n16eFVKNwQw=VhDZXNpTn4=93J_dUGLZPWPu@mail.gmail.com>
References: <4D2B80BA.2080506@nextday.fi>
	<AANLkTi=9n16eFVKNwQw=VhDZXNpTn4=93J_dUGLZPWPu@mail.gmail.com>
Message-ID: <4D2B980C.50605@nextday.fi>

11.01.2011 01:26, Christopher Armstrong kirjoitti:
> 2011/1/10 Alex Gr?nholm <alex.gronholm at nextday.fi 
> <mailto:alex.gronholm at nextday.fi>>
>
>     There has been some discussion over email between myself and several
>     Twisted developers regarding the possibility of adding support for PEP
>     3148 futures and executors to Twisted. I'm starting this thread to
>     move
>     the conversation to this mailing list to gain a broader audience.
>
>     For those who do not know what PEP 3148 is about, suffice to say that
>     it's an API for deferred execution of code.
>
>
>
> I just want to make clear up-front the subtle point that Twisted's 
> Deferreds are not tools for "deferred execution of code", but rather 
> for "deferred receipt of results". It's easy to forget this and 
> believe that the similar jargon implies similarity in purpose.
I never wanted to imply that -- I apologize if I left the wrong 
impression. PEP 3148 Futures have the exact same high level purpose as 
Deferreds in that they are essentially receipts for results. Like 
Deferreds, they are not tied to any particular executor.
>
>
> -- 
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110111/2d64636b/attachment-0001.htm 

From screwtape at froup.com  Mon Jan 10 20:54:39 2011
From: screwtape at froup.com (Tim Allen)
Date: Tue, 11 Jan 2011 12:54:39 +1100
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <4D2B80BA.2080506@nextday.fi>
References: <4D2B80BA.2080506@nextday.fi>
Message-ID: <20110111015439.GA21847@boombah.thristian.org>

On Mon, Jan 10, 2011 at 11:57:14PM +0200, Alex Gr?nholm wrote:
> The main focus of the discussion is to figure out how to best integrate 
> support for this new API to Twisted. If possible, existing protocols 
> should remain compatible through the use of adapters or some other 
> mechanism. If not, a way to port them over with a minimal amount of work 
> would be the next target.

I think I've read PEP 3148 before, but that was a while ago. Looking
over it again now, here are my initial thoughts as just a user of
Twisted.

- Executor.submit() seems to be an analogue to Twisted's
  reactor.callInThread(), that should be easy enough to add to Twisted's
  implementation.
- Executor.map() doesn't havve a Twisted analogue, as far as I know, but
  seems a useful addition.
- Executor.shutdown() seems like a Bad Idea, at least for implementation
  in Twisted's reactor - I don't want to call some third-party library
  and have it shut down my entire process when I'm done! Perhaps, rather
  than making Twisted's reactor implement the Executor interface, there
  should be .makeExecutor() method that returns an Executor instance
  that can support the .shutdown() semantics without actually shutting
  down the Twisted event loop.

- Futures are obviously fairly similar to Deferreds, but there are some
  differences of approach:
    - Futures support cancellation; Twisted finally managed to get rid
      of cancellation support in Deferreds.
    - Futures pass themselves to a series of callbacks, and have
      .result() and .exception() methods so that the callbacks can
      discover what happened. Deferreds pass results or Failure objects
      through a double list of callbacks and errbacks.
    - Futures store the results of the function call that was run in
      a thread, and pass the same information to each calback. Deferreds
      allow each callback to transform the result and even pause the
      callback-chain to wait for more asynchronous results.
    - Futures allow code to wait indefinitely for a result or exception
      to appear, which makes sense if the result is being calculated in
      a thread, but which would cause a deadlock in an event-based
      system like Twisted.

It should be pretty simple to create a Deferred that wraps a Future:

    from twisted.internet import defer

    def deferredFromFuture(future):
	d = defer.Deferred()
	def callback(future):
	    e = future.exception()
	    if e:
		d.fail(e)
		return

	    d.succeed(future.result())

	future.add_done_callback(callback)
	return d

I guess a creating a future that wraps a Deferred wouldn't be hard
either:

    from concurrent.futures import Future

    def futureFromDeferred(deferred):
	f = Future()
	f.set_running_or_notify_cancel()

	def callback(result):
	    f.set_result(result)
	    return result
	d.addcallback(callback)

	def errback(failure):
	    f.set_exception(failure.value)
	    return failure
	d.adderrback(errback)

	return f

Of course, if somebody added another callback after the ones added by
futureFromDeferred(), the new values wouldn't be passed to the Future,
and if somebody called future.result() or future.exception() without
a timeout, that could cause a deadlock as mentioned above. I'm not sure
it's possible to work around either of those problems, so perhaps
futureFromDeferred() is a thing that should not be included in
a library, at least not without big warnings all over it like Twisted's
integration with the stdlib "logging" module has.

I also can't immediately see a way to make an object that functions as
both a Deferred and a Future, or build Deferred's functionality on top
of Futures. Perhaps I just haven't thought it through sufficiently - I'd
be interested to hear if anyone else has any ideas.


From exarkun at twistedmatrix.com  Mon Jan 10 21:15:59 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 11 Jan 2011 02:15:59 -0000
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <20110111015439.GA21847@boombah.thristian.org>
References: <4D2B80BA.2080506@nextday.fi>
	<20110111015439.GA21847@boombah.thristian.org>
Message-ID: <20110111021559.1821.1714292188.divmod.xquotient.85@localhost.localdomain>

On 01:54 am, screwtape at froup.com wrote:

Just a couple quick (minor) factual corrections.  I'll snip everything 
that does not appear to need correction (of which there was a lot) to 
make it easier to read.
>    - Futures support cancellation; Twisted finally managed to get rid
>      of cancellation support in Deferreds.

We only got rid of Deferred.setTimeout.  In exchange, we added 
generalized cancellation support.
>It should be pretty simple to create a Deferred that wraps a Future:
>
>    from twisted.internet import defer
>
>    def deferredFromFuture(future):
>         d = defer.Deferred()
>         def callback(future):
>             e = future.exception()
>             if e:

Futures may call their callbacks in any thread.  So the line:
>                 d.fail(e)

must instead be something like:

                reactor.callFromThread(d.errback, e)


(notice also `d.callback`, not `d.fail`).  A similar change is necessary 
for the success case below.
>                 return
>
>             d.succeed(future.result())
>
>         future.add_done_callback(callback)
>         return d

Jean-Paul


From screwtape at froup.com  Mon Jan 10 22:10:33 2011
From: screwtape at froup.com (Tim Allen)
Date: Tue, 11 Jan 2011 14:10:33 +1100
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <20110111021559.1821.1714292188.divmod.xquotient.85@localhost.localdomain>
References: <4D2B80BA.2080506@nextday.fi>
	<20110111015439.GA21847@boombah.thristian.org>
	<20110111021559.1821.1714292188.divmod.xquotient.85@localhost.localdomain>
Message-ID: <20110111031033.GB21847@boombah.thristian.org>

On Tue, Jan 11, 2011 at 02:15:59AM -0000, exarkun at twistedmatrix.com wrote:
> On 01:54 am, screwtape at froup.com wrote:
> >    - Futures support cancellation; Twisted finally managed to get rid
> >      of cancellation support in Deferreds.
> 
> We only got rid of Deferred.setTimeout.  In exchange, we added 
> generalized cancellation support.

Ah, yes, I misremembered. Thank you for the correction.

I haven't used Deferred's cancellation support; I don't know how
compatible it is with Future's cancellation support.

> Futures may call their callbacks in any thread.  So the line:
> >                 d.fail(e)
> 
> must instead be something like:
> 
>                 reactor.callFromThread(d.errback, e)

PEP 3148 says:
# Added callables are called in the order that they were added and are
# always called in a thread belonging to the process that added them.

I assumed that implied some kind of internal .callFromThread() magic;
I could be wrong.


From sandro at e-den.it  Tue Jan 11 02:48:38 2011
From: sandro at e-den.it (Alessandro Dentella)
Date: Tue, 11 Jan 2011 08:48:38 +0100
Subject: [Twisted-Python] Twisted and ipython
Message-ID: <20110111074838.GA19873@ubuntu>

Hi,

I'm starting a project where I plan to use twisted for the first time. I'd
like to practice using ipython and after looking around I found a recepe [1]
by Metthew Scott and a comment by Bob Ippolito on that recepe that suggests
a different approch [2].

In the ipython manual there's a reference to twisted in the -*thread
section, but it's unclear to me what should be the option (-pylab as for
matplotlib?):

-gthread, -qthread, -q4thread, -wthread, -pylab
              Only  ONE  of  these  can  be given, and it can only be given as the first option
              passed to IPython (it will have no effect in any other position).   They  provide
              threading  support  for  the  GTK,  QT3, QT4 and WXWidgets toolkits, for the mat-
              plotlib library and Twisted reactor.


So what's the suggested way to play with twisted?


thanks in advance
sandro
*:-)



[1] http://code.activestate.com/recipes/410670-integrating-twisted-reactor-with-ipython/
[2] http://bob.pythonmac.org/archives/2005/04/17/twisted-and-foreign-event-loops/



-- 
Sandro Dentella  *:-)
http://www.reteisi.org             Soluzioni libere per le scuole
http://sqlkit.argolinux.org        SQLkit home page - PyGTK/python/sqlalchemy


From benjamin.bertrand at lfv.se  Tue Jan 11 05:17:58 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Tue, 11 Jan 2011 11:17:58 +0100
Subject: [Twisted-Python] client connecting to 2 servers (non simultaneously)
Message-ID: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>

Hi,

I'm new to twisted and I have started to write a new protocol with a TCP
client and server.
In my protocol, a client should be able to connect to 2 servers
(master/slave node - only the master accepts connection).
The client should try to connect to server1. If it fails, try to connect
to server2 (after a specific timeout). If that fails, try server1...
I came up with a solution (see below). 
As I'm new to twisted and I haven't seen anything like that in the
examples, I'd like to check if that's a proper way to do it.
Any comments is welcome.

Thanks

Benjamin

***********************************************
class MyClientFactory(ClientFactory):

    protocol = MyClientProtocol

    def __init__(self, host2=None):
        self.host1 = None
        self.host2 = host2

    def clientConnectionFailed(self, connector, reason):
        from twisted.internet import reactor
        if self.host2 is None:
            # host2 is not defined, reconnect to host1
            reactor.callLater(2.0, connector.connect)
        else:
            destination = connector.getDestination()
            if self.host1 is None:
                # First connection failed, initialize host1, and try
host2
                self.host1 = destination.host
                host = self.host2
            elif destination.host == self.host1:
                # Connection to host1 failed, try host2
                host = self.host2
            else:
                # Connection to host2 failed, try host1
                host = self.host1
            reactor.callLater(2.0, reactor.connectTCP, host,
destination.port, self)


factory = MyClientFactory(server2)
from twisted.internet import reactor
reactor.connectTCP(server1, 8010, factory)
reactor.run()
***********************************************



From jrennie at gmail.com  Tue Jan 11 08:11:26 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Tue, 11 Jan 2011 08:11:26 -0500
Subject: [Twisted-Python] client connecting to 2 servers (non
	simultaneously)
In-Reply-To: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
References: <AcuxeNGu2ZXORhUrSWeuweY6y2TOfg==>
	<EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
Message-ID: <AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>

You could probably generalize and simplify by using a collections.deque of
hosts/ports and using the rotate() method before each reactor.connectTCP.
 Also, no need for multiple reactor imports---one at the top of the code is
fine.  Note that if the connection is "lost" in a non-clean fashion, you may
also want to reconnect.  IIUC, "fail" only handles the case that no
connection is made (protocol is never created).

import collections
from twisted.internet import reactor

class MyClientFactory(object):
    protocol = MyClientProtocol
    def __init__(self, hosts):
        self.hosts = collections.deque(hosts)
        reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0],
self.hosts[0][1], self)
        self.hosts.rotate(1)
    def clientConnectionFailed(self, connector, reason):
        reactor.callLater(2.0, connectTCP, self.hosts[0][0],
self.hosts[0][1], self)
        self.hosts.rotate(1)

factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
reactor.run()

Cheers,

Jason

On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:

> Hi,
>
> I'm new to twisted and I have started to write a new protocol with a TCP
> client and server.
> In my protocol, a client should be able to connect to 2 servers
> (master/slave node - only the master accepts connection).
> The client should try to connect to server1. If it fails, try to connect
> to server2 (after a specific timeout). If that fails, try server1...
> I came up with a solution (see below).
> As I'm new to twisted and I haven't seen anything like that in the
> examples, I'd like to check if that's a proper way to do it.
> Any comments is welcome.
>
> Thanks
>
> Benjamin
>
> ***********************************************
> class MyClientFactory(ClientFactory):
>
>    protocol = MyClientProtocol
>
>    def __init__(self, host2=None):
>        self.host1 = None
>        self.host2 = host2
>
>    def clientConnectionFailed(self, connector, reason):
>        from twisted.internet import reactor
>        if self.host2 is None:
>            # host2 is not defined, reconnect to host1
>            reactor.callLater(2.0, connector.connect)
>        else:
>            destination = connector.getDestination()
>            if self.host1 is None:
>                # First connection failed, initialize host1, and try
> host2
>                self.host1 = destination.host
>                host = self.host2
>            elif destination.host == self.host1:
>                # Connection to host1 failed, try host2
>                host = self.host2
>            else:
>                # Connection to host2 failed, try host1
>                host = self.host1
>            reactor.callLater(2.0, reactor.connectTCP, host,
> destination.port, self)
>
>
> factory = MyClientFactory(server2)
> from twisted.internet import reactor
> reactor.connectTCP(server1, 8010, factory)
> reactor.run()
> ***********************************************
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110111/8cb6c39e/attachment.htm 

From exarkun at twistedmatrix.com  Tue Jan 11 08:21:51 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 11 Jan 2011 13:21:51 -0000
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <20110111031033.GB21847@boombah.thristian.org>
References: <4D2B80BA.2080506@nextday.fi>
	<20110111015439.GA21847@boombah.thristian.org>
	<20110111021559.1821.1714292188.divmod.xquotient.85@localhost.localdomain>
	<20110111031033.GB21847@boombah.thristian.org>
Message-ID: <20110111132151.1821.587712900.divmod.xquotient.87@localhost.localdomain>

On 03:10 am, screwtape at froup.com wrote:
>>Futures may call their callbacks in any thread.  So the line:
>> >                 d.fail(e)
>>
>>must instead be something like:
>>
>>                 reactor.callFromThread(d.errback, e)
>
>PEP 3148 says:
># Added callables are called in the order that they were added and are
># always called in a thread belonging to the process that added them.
>
>I assumed that implied some kind of internal .callFromThread() magic;
>I could be wrong.

It just says "a thread", it doesn't say which.  And since there's 
nothing like a reactor in PEP 3148, there's no way Futures could do this 
on their own.

Jean-Paul


From itamar at itamarst.org  Tue Jan 11 08:32:55 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 11 Jan 2011 08:32:55 -0500
Subject: [Twisted-Python] client connecting to 2 servers (non
 simultaneously)
In-Reply-To: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
Message-ID: <1294752775.1760.1.camel@blake>

On Tue, 2011-01-11 at 11:17 +0100, benjamin.bertrand at lfv.se wrote:

> Any comments is welcome.

It's probably better to use one factory per client connection - easier
to distinguish between connections. Not strictly necessary, though.



From kevin.horn at gmail.com  Tue Jan 11 13:36:59 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 11 Jan 2011 12:36:59 -0600
Subject: [Twisted-Python] client connecting to 2 servers (non
	simultaneously)
In-Reply-To: <AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
Message-ID: <AANLkTimumzR3nHMmG56WHdTju+UOqh03uGViJFuTh4zX@mail.gmail.com>

Using a deque for this is a fantastic idea, though I would have used
rotate(-1), as your example looks like it rotate's "backwards" to me.

Matter of taste I suppose.  It doesn't make much actual difference.

Kevin Horn

On Tue, Jan 11, 2011 at 7:11 AM, Jason Rennie <jrennie at gmail.com> wrote:

> You could probably generalize and simplify by using a collections.deque of
> hosts/ports and using the rotate() method before each reactor.connectTCP.
>  Also, no need for multiple reactor imports---one at the top of the code is
> fine.  Note that if the connection is "lost" in a non-clean fashion, you may
> also want to reconnect.  IIUC, "fail" only handles the case that no
> connection is made (protocol is never created).
>
> import collections
> from twisted.internet import reactor
>
> class MyClientFactory(object):
>     protocol = MyClientProtocol
>     def __init__(self, hosts):
>         self.hosts = collections.deque(hosts)
>         reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0],
> self.hosts[0][1], self)
>         self.hosts.rotate(1)
>     def clientConnectionFailed(self, connector, reason):
>         reactor.callLater(2.0, connectTCP, self.hosts[0][0],
> self.hosts[0][1], self)
>         self.hosts.rotate(1)
>
> factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
> reactor.run()
>
> Cheers,
>
> Jason
>
> On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:
>
>> Hi,
>>
>> I'm new to twisted and I have started to write a new protocol with a TCP
>> client and server.
>> In my protocol, a client should be able to connect to 2 servers
>> (master/slave node - only the master accepts connection).
>> The client should try to connect to server1. If it fails, try to connect
>> to server2 (after a specific timeout). If that fails, try server1...
>> I came up with a solution (see below).
>> As I'm new to twisted and I haven't seen anything like that in the
>> examples, I'd like to check if that's a proper way to do it.
>> Any comments is welcome.
>>
>> Thanks
>>
>> Benjamin
>>
>> ***********************************************
>> class MyClientFactory(ClientFactory):
>>
>>    protocol = MyClientProtocol
>>
>>    def __init__(self, host2=None):
>>        self.host1 = None
>>        self.host2 = host2
>>
>>    def clientConnectionFailed(self, connector, reason):
>>        from twisted.internet import reactor
>>        if self.host2 is None:
>>            # host2 is not defined, reconnect to host1
>>            reactor.callLater(2.0, connector.connect)
>>        else:
>>            destination = connector.getDestination()
>>            if self.host1 is None:
>>                # First connection failed, initialize host1, and try
>> host2
>>                self.host1 = destination.host
>>                host = self.host2
>>            elif destination.host == self.host1:
>>                # Connection to host1 failed, try host2
>>                host = self.host2
>>            else:
>>                # Connection to host2 failed, try host1
>>                host = self.host1
>>            reactor.callLater(2.0, reactor.connectTCP, host,
>> destination.port, self)
>>
>>
>> factory = MyClientFactory(server2)
>> from twisted.internet import reactor
>> reactor.connectTCP(server1, 8010, factory)
>> reactor.run()
>> ***********************************************
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> Jason Rennie
> Research Scientist, ITA Software
> 617-714-2645
> http://www.itasoftware.com/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110111/85690bcd/attachment.htm 

From jrennie at gmail.com  Tue Jan 11 13:50:00 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Tue, 11 Jan 2011 13:50:00 -0500
Subject: [Twisted-Python] client connecting to 2 servers (non
	simultaneously)
In-Reply-To: <AANLkTimumzR3nHMmG56WHdTju+UOqh03uGViJFuTh4zX@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<AANLkTimumzR3nHMmG56WHdTju+UOqh03uGViJFuTh4zX@mail.gmail.com>
Message-ID: <AANLkTi=-8KKM66MFf-LwWvxE_ApW=6QypYx=PepEHb+v@mail.gmail.com>

I agree that rotate(-1) is more intuitive.  I barely gave it any
thought---almost forgot to include an argument for rotate as I initially
incorrectly assumed no argument would do something like rotate(-1) :-)

Jason

On Tue, Jan 11, 2011 at 1:36 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> Using a deque for this is a fantastic idea, though I would have used
> rotate(-1), as your example looks like it rotate's "backwards" to me.
>
> Matter of taste I suppose.  It doesn't make much actual difference.
>
> Kevin Horn
>
>
> On Tue, Jan 11, 2011 at 7:11 AM, Jason Rennie <jrennie at gmail.com> wrote:
>
>> You could probably generalize and simplify by using a collections.deque of
>> hosts/ports and using the rotate() method before each reactor.connectTCP.
>>  Also, no need for multiple reactor imports---one at the top of the code is
>> fine.  Note that if the connection is "lost" in a non-clean fashion, you may
>> also want to reconnect.  IIUC, "fail" only handles the case that no
>> connection is made (protocol is never created).
>>
>> import collections
>> from twisted.internet import reactor
>>
>> class MyClientFactory(object):
>>     protocol = MyClientProtocol
>>     def __init__(self, hosts):
>>         self.hosts = collections.deque(hosts)
>>         reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0],
>> self.hosts[0][1], self)
>>         self.hosts.rotate(1)
>>     def clientConnectionFailed(self, connector, reason):
>>         reactor.callLater(2.0, connectTCP, self.hosts[0][0],
>> self.hosts[0][1], self)
>>         self.hosts.rotate(1)
>>
>> factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
>> reactor.run()
>>
>> Cheers,
>>
>> Jason
>>
>> On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:
>>
>>> Hi,
>>>
>>> I'm new to twisted and I have started to write a new protocol with a TCP
>>> client and server.
>>> In my protocol, a client should be able to connect to 2 servers
>>> (master/slave node - only the master accepts connection).
>>> The client should try to connect to server1. If it fails, try to connect
>>> to server2 (after a specific timeout). If that fails, try server1...
>>> I came up with a solution (see below).
>>> As I'm new to twisted and I haven't seen anything like that in the
>>> examples, I'd like to check if that's a proper way to do it.
>>> Any comments is welcome.
>>>
>>> Thanks
>>>
>>> Benjamin
>>>
>>> ***********************************************
>>> class MyClientFactory(ClientFactory):
>>>
>>>    protocol = MyClientProtocol
>>>
>>>    def __init__(self, host2=None):
>>>        self.host1 = None
>>>        self.host2 = host2
>>>
>>>    def clientConnectionFailed(self, connector, reason):
>>>        from twisted.internet import reactor
>>>        if self.host2 is None:
>>>            # host2 is not defined, reconnect to host1
>>>            reactor.callLater(2.0, connector.connect)
>>>        else:
>>>            destination = connector.getDestination()
>>>            if self.host1 is None:
>>>                # First connection failed, initialize host1, and try
>>> host2
>>>                self.host1 = destination.host
>>>                host = self.host2
>>>            elif destination.host == self.host1:
>>>                # Connection to host1 failed, try host2
>>>                host = self.host2
>>>            else:
>>>                # Connection to host2 failed, try host1
>>>                host = self.host1
>>>            reactor.callLater(2.0, reactor.connectTCP, host,
>>> destination.port, self)
>>>
>>>
>>> factory = MyClientFactory(server2)
>>> from twisted.internet import reactor
>>> reactor.connectTCP(server1, 8010, factory)
>>> reactor.run()
>>> ***********************************************
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>>
>> --
>> Jason Rennie
>> Research Scientist, ITA Software
>> 617-714-2645
>> http://www.itasoftware.com/
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110111/771b3ed2/attachment.htm 

From m-lists at the-moon.net  Tue Jan 11 15:37:39 2011
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 11 Jan 2011 20:37:39 +0000
Subject: [Twisted-Python] Twisted and ICP protocol
In-Reply-To: <AANLkTi=6vq6xzekN+AQyL3gn5BCLa=y-4Gnj52Rc22WE@mail.gmail.com>
References: <AANLkTi=6vq6xzekN+AQyL3gn5BCLa=y-4Gnj52Rc22WE@mail.gmail.com>
Message-ID: <AANLkTi=EYZMf32aA6QkyosBq1aoTKV6o2OJUr0zVng2g@mail.gmail.com>

On Mon, Jan 10, 2011 at 9:29 PM, Roberto Franchesco
<robfranchesco at gmail.com> wrote:
> I have been trying to get a squid proxy to "talk" to a twisted proxy
> and I came across an old email from this list where someone mentioned
> that they had implemented a basic ICP protocol in twisted.
> Does anyone still have that implementation? ?Or any good pointers on
> setting me off in the right direction as to how to do this?

I don't know of a Twisted Protocol implementation of ICP, but there is
a Zope related project here:
 * http://pypi.python.org/pypi/zc.icp

You'll find it contains a nicely separate protocol module which you
might be able to reuse with Twisted. I've certainly used it with
Asyncore a few times.

-RichardW.


From benjamin.bertrand at lfv.se  Wed Jan 12 03:07:03 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Wed, 12 Jan 2011 08:07:03 +0000
Subject: [Twisted-Python] client connecting to 2 servers
 (nonsimultaneously)
In-Reply-To: <AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
References: <AcuxeNGu2ZXORhUrSWeuweY6y2TOfg==><EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
Message-ID: <2C9A58914594E34AA28179DB776FABDF8EB6@xw-exch04.lfv.se>

Nice, this looks much cleaner.
I thought about the connection "lost" case. It's quite similar to "fail" (but client should always try to reconnect to host1 in that case). So easy to implement.
Thanks a lot!

Benjamin

Fr?n: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] F?r Jason Rennie
Skickat: den 11 januari 2011 14:11
Till: Twisted general discussion
?mne: Re: [Twisted-Python] client connecting to 2 servers (nonsimultaneously)

You could probably generalize and simplify by using a collections.deque of hosts/ports and using the rotate() method before each?reactor.connectTCP. ?Also, no need for multiple reactor imports---one at the top of the code is fine. ?Note that if the connection is "lost" in a non-clean fashion, you may also want to reconnect. ?IIUC, "fail" only handles the case that no connection is made (protocol is never created).

import collections
from twisted.internet import reactor

class MyClientFactory(object):
?? ?protocol = MyClientProtocol
?? ?def __init__(self, hosts):
?? ? ? ?self.hosts = collections.deque(hosts)
?? ? ? ?reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0], self.hosts[0][1], self)
?? ? ? ?self.hosts.rotate(1)
?? ?def clientConnectionFailed(self, connector, reason):
?? ? ? ?reactor.callLater(2.0, connectTCP, self.hosts[0][0], self.hosts[0][1], self)
?? ? ? ?self.hosts.rotate(1)

factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
reactor.run()

Cheers,

Jason

On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:
Hi,

I'm new to twisted and I have started to write a new protocol with a TCP
client and server.
In my protocol, a client should be able to connect to 2 servers
(master/slave node - only the master accepts connection).
The client should try to connect to server1. If it fails, try to connect
to server2 (after a specific timeout). If that fails, try server1...
I came up with a solution (see below).
As I'm new to twisted and I haven't seen anything like that in the
examples, I'd like to check if that's a proper way to do it.
Any comments is welcome.

Thanks

Benjamin

***********************************************
class MyClientFactory(ClientFactory):

? ?protocol = MyClientProtocol

? ?def __init__(self, host2=None):
? ? ? ?self.host1 = None
? ? ? ?self.host2 = host2

? ?def clientConnectionFailed(self, connector, reason):
? ? ? ?from twisted.internet import reactor
? ? ? ?if self.host2 is None:
? ? ? ? ? ?# host2 is not defined, reconnect to host1
? ? ? ? ? ?reactor.callLater(2.0, connector.connect)
? ? ? ?else:
? ? ? ? ? ?destination = connector.getDestination()
? ? ? ? ? ?if self.host1 is None:
? ? ? ? ? ? ? ?# First connection failed, initialize host1, and try
host2
? ? ? ? ? ? ? ?self.host1 = destination.host
? ? ? ? ? ? ? ?host = self.host2
? ? ? ? ? ?elif destination.host == self.host1:
? ? ? ? ? ? ? ?# Connection to host1 failed, try host2
? ? ? ? ? ? ? ?host = self.host2
? ? ? ? ? ?else:
? ? ? ? ? ? ? ?# Connection to host2 failed, try host1
? ? ? ? ? ? ? ?host = self.host1
? ? ? ? ? ?reactor.callLater(2.0, reactor.connectTCP, host,
destination.port, self)


factory = MyClientFactory(server2)
from twisted.internet import reactor
reactor.connectTCP(server1, 8010, factory)
reactor.run()
***********************************************


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/


From benjamin.bertrand at lfv.se  Wed Jan 12 04:49:34 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Wed, 12 Jan 2011 09:49:34 +0000
Subject: [Twisted-Python] client connecting to 2 servers
 (nonsimultaneously)
In-Reply-To: <AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
References: <AcuxeNGu2ZXORhUrSWeuweY6y2TOfg==><EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
Message-ID: <2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>

One small question about the following code:
Why did you use reactor.callWhenRunning in the __init__ method?
Why not calling directly reactor.connectTCP?

Cheers,

Benjamin

Fr?n: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] F?r Jason Rennie
Skickat: den 11 januari 2011 14:11
Till: Twisted general discussion
?mne: Re: [Twisted-Python] client connecting to 2 servers (nonsimultaneously)

You could probably generalize and simplify by using a collections.deque of hosts/ports and using the rotate() method before each?reactor.connectTCP. ?Also, no need for multiple reactor imports---one at the top of the code is fine. ?Note that if the connection is "lost" in a non-clean fashion, you may also want to reconnect. ?IIUC, "fail" only handles the case that no connection is made (protocol is never created).

import collections
from twisted.internet import reactor

class MyClientFactory(object):
?? ?protocol = MyClientProtocol
?? ?def __init__(self, hosts):
?? ? ? ?self.hosts = collections.deque(hosts)
?? ? ? ?reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0], self.hosts[0][1], self)
?? ? ? ?self.hosts.rotate(1)
?? ?def clientConnectionFailed(self, connector, reason):
?? ? ? ?reactor.callLater(2.0, connectTCP, self.hosts[0][0], self.hosts[0][1], self)
?? ? ? ?self.hosts.rotate(1)

factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
reactor.run()

Cheers,

Jason

On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:
Hi,

I'm new to twisted and I have started to write a new protocol with a TCP
client and server.
In my protocol, a client should be able to connect to 2 servers
(master/slave node - only the master accepts connection).
The client should try to connect to server1. If it fails, try to connect
to server2 (after a specific timeout). If that fails, try server1...
I came up with a solution (see below).
As I'm new to twisted and I haven't seen anything like that in the
examples, I'd like to check if that's a proper way to do it.
Any comments is welcome.

Thanks

Benjamin

***********************************************
class MyClientFactory(ClientFactory):

? ?protocol = MyClientProtocol

? ?def __init__(self, host2=None):
? ? ? ?self.host1 = None
? ? ? ?self.host2 = host2

? ?def clientConnectionFailed(self, connector, reason):
? ? ? ?from twisted.internet import reactor
? ? ? ?if self.host2 is None:
? ? ? ? ? ?# host2 is not defined, reconnect to host1
? ? ? ? ? ?reactor.callLater(2.0, connector.connect)
? ? ? ?else:
? ? ? ? ? ?destination = connector.getDestination()
? ? ? ? ? ?if self.host1 is None:
? ? ? ? ? ? ? ?# First connection failed, initialize host1, and try
host2
? ? ? ? ? ? ? ?self.host1 = destination.host
? ? ? ? ? ? ? ?host = self.host2
? ? ? ? ? ?elif destination.host == self.host1:
? ? ? ? ? ? ? ?# Connection to host1 failed, try host2
? ? ? ? ? ? ? ?host = self.host2
? ? ? ? ? ?else:
? ? ? ? ? ? ? ?# Connection to host2 failed, try host1
? ? ? ? ? ? ? ?host = self.host1
? ? ? ? ? ?reactor.callLater(2.0, reactor.connectTCP, host,
destination.port, self)


factory = MyClientFactory(server2)
from twisted.internet import reactor
reactor.connectTCP(server1, 8010, factory)
reactor.run()
***********************************************


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/


From jrennie at gmail.com  Wed Jan 12 10:15:59 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 12 Jan 2011 10:15:59 -0500
Subject: [Twisted-Python] client connecting to 2 servers
	(nonsimultaneously)
In-Reply-To: <2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
Message-ID: <AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>

Habit, mostly.  I think it's a good habit, though.  The reason is that I
wanted to make sure the __init__ code completed before the connectTCP was
called.  In this case, it doesn't matter, but if I had a number of things I
wanted to do in __init__, it might matter.  Consider:

class MyClientProtocol(Protocol):
      def connectionMade(self):
        self.factory.numConnections += 1

class MyClientFactory(Factory):
      def __init__(self):
        reactor.connectTCP(host, port, self)
  self.numConnections = 0

'course, I'm sure you'd put reactor.connectTCP *after* the numConnections
initializer, but using callWhenRunning ensures that the order doesn't
matter, so it's one less thing you have to worry about :-)

Jason

On Wed, Jan 12, 2011 at 4:49 AM, <benjamin.bertrand at lfv.se> wrote:

> One small question about the following code:
> Why did you use reactor.callWhenRunning in the __init__ method?
> Why not calling directly reactor.connectTCP?
>
> Cheers,
>
> Benjamin
>
>
-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/74ab6e3d/attachment.htm 

From exarkun at twistedmatrix.com  Wed Jan 12 10:26:37 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 12 Jan 2011 15:26:37 -0000
Subject: [Twisted-Python] client connecting to 2
	servers	(nonsimultaneously)
In-Reply-To: <AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
Message-ID: <20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>

On 03:15 pm, jrennie at gmail.com wrote:
>Habit, mostly.  I think it's a good habit, though.  The reason is that 
>I
>wanted to make sure the __init__ code completed before the connectTCP 
>was
>called.  In this case, it doesn't matter, but if I had a number of 
>things I
>wanted to do in __init__, it might matter.  Consider:
>
>class MyClientProtocol(Protocol):
>      def connectionMade(self):
>        self.factory.numConnections += 1
>
>class MyClientFactory(Factory):
>      def __init__(self):
>        reactor.connectTCP(host, port, self)
>  self.numConnections = 0
>
>'course, I'm sure you'd put reactor.connectTCP *after* the 
>numConnections
>initializer, but using callWhenRunning ensures that the order doesn't
>matter, so it's one less thing you have to worry about :-)

Although note that if the reactor is already running when you 
instantiate the factory, then callWhenRunning will immediately call the 
function you pass to it, as demonstrated by this transcript in which the 
reactor is already running:

    >>> def foo():
    ...     print 'foo running'
    ...    >>> from twisted.internet import reactor
    >>> reactor.callWhenRunning(foo)
    foo running
    >>>
Jean-Paul


From jrennie at gmail.com  Wed Jan 12 10:52:05 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 12 Jan 2011 10:52:05 -0500
Subject: [Twisted-Python] client connecting to 2 servers
	(nonsimultaneously)
In-Reply-To: <20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
Message-ID: <AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>

Benjamin, sorry for providing you with an incorrect explanation.  Jean-Paul,
thank you for correcting my broken understanding of callWhenRunning.

Is there a call which puts a function into the reactor's queue of tasks to
be completed?

Thanks,

Jason

On Wed, Jan 12, 2011 at 10:26 AM, <exarkun at twistedmatrix.com> wrote:

> Although note that if the reactor is already running when you
> instantiate the factory, then callWhenRunning will immediately call the
> function you pass to it, as demonstrated by this transcript in which the
> reactor is already running:
>
>    >>> def foo():
>    ...     print 'foo running'
>    ...    >>> from twisted.internet import reactor
>    >>> reactor.callWhenRunning(foo)
>    foo running
>    >>>
> Jean-Paul
>
>
-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/45f97e25/attachment.htm 

From glyph at twistedmatrix.com  Wed Jan 12 11:32:55 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 Jan 2011 11:32:55 -0500
Subject: [Twisted-Python] client connecting to 2 servers
	(nonsimultaneously)
In-Reply-To: <AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
Message-ID: <AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot@mail.gmail.com>

On Wed, Jan 12, 2011 at 10:52 AM, Jason Rennie <jrennie at gmail.com> wrote:

> Benjamin, sorry for providing you with an incorrect explanation.
>  Jean-Paul, thank you for correcting my broken understanding of
> callWhenRunning.
>
> Is there a call which puts a function into the reactor's queue of tasks to
> be completed?
>

The reactor doesn't have a queue of tasks to be completed.  It has sets of
various event sources, which it executes in no particular order.

Scheduling a timed event with callLater(0,...) might do what you want,
though.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/5d2959bd/attachment.htm 

From jrennie at gmail.com  Wed Jan 12 13:45:47 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 12 Jan 2011 13:45:47 -0500
Subject: [Twisted-Python] client connecting to 2 servers
	(nonsimultaneously)
In-Reply-To: <AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
	<AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot@mail.gmail.com>
Message-ID: <AANLkTi=Z1SQxBChZKOOyyLpaf8fhcp8RkWFJviYhPrMO@mail.gmail.com>

On Wed, Jan 12, 2011 at 11:32 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

> The reactor doesn't have a queue of tasks to be completed.  It has sets of
> various event sources, which it executes in no particular order.
>

"queue of tasks" was a guess on my part, but I looked through the
BaseReactor code and found something like that.  'course, I could easily be
reading the code wrong.  How would you describe threadCallQueue?  When I
said "tasks", I meant something akin to "calls".  That could be
confusing---did you interpret "tasks" differently?


> Scheduling a timed event with callLater(0,...) might do what you want,
> though.
>

Yes.  Thanks!  I see that the callFromThread documentation even recommends
using callLater for this behavior. (doh!)

http://twistedmatrix.com/documents/10.2.0/api/twisted.internet.interfaces.IReactorThreads.html#callFromThread

>>> from twisted.internet import reactor
>>> def foo():
...     print "foo!"
...
>>> def bar():
...     reactor.callLater(0, foo)
...     print "bar!"
...
>>> reactor.callWhenRunning(bar)
('startup', ('after', <function bar at 0x2c84320>, (), {}))
>>> reactor.run()
bar!
foo!

Interesting that you can substitute callFromThread for callLater(0, ...) in
the above code and get the same behavior...

Sorry to prolong the tangent, but I'd like to better understand the
differences between callWhenRunning, callFromThread and callLater.  I think
reactor.wakeUp() is the one missing piece for me.  How exactly does it work?
 Reading the BaseReactor code... callFromThread adds the call to a queue,
then calls wakeUp.  IIUC, wakeUp simply runs

self.port.postEvent(0, KEY_WAKEUP, None)

Does this cause the reactor thread to jump to the front of the queue of
threads to be run by python/linux?  If there were no wakeUp in
callFromThread, would the call simply be delayed until the thread
round-robin got to the reactor thread?  Or, without wakeUp, is it possible
the callFromThread call would never be made?

Cheers,

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/80cb849d/attachment.htm 

From exarkun at twistedmatrix.com  Wed Jan 12 16:40:17 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 12 Jan 2011 21:40:17 -0000
Subject: [Twisted-Python] client connecting to 2
	servers	(nonsimultaneously)
In-Reply-To: <AANLkTi=Z1SQxBChZKOOyyLpaf8fhcp8RkWFJviYhPrMO@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
	<AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot@mail.gmail.com>
	<AANLkTi=Z1SQxBChZKOOyyLpaf8fhcp8RkWFJviYhPrMO@mail.gmail.com>
Message-ID: <20110112214017.1811.611064405.divmod.xquotient.38@localhost.localdomain>

On 06:45 pm, jrennie at gmail.com wrote:
>On Wed, Jan 12, 2011 at 11:32 AM, Glyph Lefkowitz
><glyph at twistedmatrix.com>wrote:
>>The reactor doesn't have a queue of tasks to be completed.  It has 
>>sets of
>>various event sources, which it executes in no particular order.
>
>"queue of tasks" was a guess on my part, but I looked through the
>BaseReactor code and found something like that.  'course, I could 
>easily be
>reading the code wrong.  How would you describe threadCallQueue?  When 
>I
>said "tasks", I meant something akin to "calls".  That could be
>confusing---did you interpret "tasks" differently?
>>Scheduling a timed event with callLater(0,...) might do what you want,
>>though.
>
>Yes.  Thanks!  I see that the callFromThread documentation even 
>recommends
>using callLater for this behavior. (doh!)
>
>http://twistedmatrix.com/documents/10.2.0/api/twisted.internet.interfaces.IReactorThreads.html#callFromThread
>>>>from twisted.internet import reactor
>>>>def foo():
>...     print "foo!"
>...
>>>>def bar():
>...     reactor.callLater(0, foo)
>...     print "bar!"
>...
>>>>reactor.callWhenRunning(bar)
>('startup', ('after', <function bar at 0x2c84320>, (), {}))
>>>>reactor.run()
>bar!
>foo!
>
>Interesting that you can substitute callFromThread for callLater(0, 
>...) in
>the above code and get the same behavior...
>
>Sorry to prolong the tangent, but I'd like to better understand the
>differences between callWhenRunning, callFromThread and callLater.  I 
>think
>reactor.wakeUp() is the one missing piece for me.  How exactly does it 
>work?
>Reading the BaseReactor code... callFromThread adds the call to a 
>queue,
>then calls wakeUp.  IIUC, wakeUp simply runs
>
>self.port.postEvent(0, KEY_WAKEUP, None)

Some reactors have a different implementation of wakeUp than the above, 
but they all have the same goal.

The reactor thread may be doing something which is going to block 
indefinitely (WaitForMultipleObjects, select(), epoll_wait(), etc).  The 
purpose of the wakeUp call is to cause that blocking call to end.  Once 
it ends, calls in the threadCallQueue can be processed.

The reactor is written such that if you are running code in the same 
thread it is running in (ie, you are "in the reactor thread") then any 
event source you create (be it network or time or whatever), the reactor 
will be sure to service it in a timely manner.  For network event 
sources, this means it will include a descriptor in the select() (etc) 
call.  For timing event sources (ie callLater), it means the reactor 
will set a timeout on the select() (etc) call so that it returns before 
it is time for that delayed call to execute.

However, if you are not in the reactor thread, then really the only 
thing you're allowed to do to Twisted is use reactor.callFromThread. 
Since this might happen at any time with respect to what the reactor 
thread is doing, there's no way to be sure a (let's call it a) thread 
call event will get handled in a timely fashion.  So this is the problem 
that wakeUp solves.  After the thread call event is added to 
threadCallQueue, wakeUp makes some event source the reactor is 
monitoring signal readiness (on POSIX, it writes a byte to a pipe the 
reactor is select()ing (etc) on; on Windows, it posts an event like you 
pasted above).  This ensures that if the reactor is asleep waiting for 
an event it will wake up soon, and then it will notice there are thread 
call events to process.

Jean-Paul


From jrennie at gmail.com  Wed Jan 12 20:15:17 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 12 Jan 2011 20:15:17 -0500
Subject: [Twisted-Python] client connecting to 2 servers
	(nonsimultaneously)
In-Reply-To: <20110112214017.1811.611064405.divmod.xquotient.38@localhost.localdomain>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
	<AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot@mail.gmail.com>
	<AANLkTi=Z1SQxBChZKOOyyLpaf8fhcp8RkWFJviYhPrMO@mail.gmail.com>
	<20110112214017.1811.611064405.divmod.xquotient.38@localhost.localdomain>
Message-ID: <AANLkTim8=E59L+PUXH4zmXjv_t0-wbM=ihWjNmMTMS7O@mail.gmail.com>

Great explanation.  Thanks!

Jason

On Wed, Jan 12, 2011 at 4:40 PM, <exarkun at twistedmatrix.com> wrote:

> Some reactors have a different implementation of wakeUp than the above,
> but they all have the same goal.
>
> The reactor thread may be doing something which is going to block
> indefinitely (WaitForMultipleObjects, select(), epoll_wait(), etc).  The
> purpose of the wakeUp call is to cause that blocking call to end.  Once
> it ends, calls in the threadCallQueue can be processed.
>
> The reactor is written such that if you are running code in the same
> thread it is running in (ie, you are "in the reactor thread") then any
> event source you create (be it network or time or whatever), the reactor
> will be sure to service it in a timely manner.  For network event
> sources, this means it will include a descriptor in the select() (etc)
> call.  For timing event sources (ie callLater), it means the reactor
> will set a timeout on the select() (etc) call so that it returns before
> it is time for that delayed call to execute.
>
> However, if you are not in the reactor thread, then really the only
> thing you're allowed to do to Twisted is use reactor.callFromThread.
> Since this might happen at any time with respect to what the reactor
> thread is doing, there's no way to be sure a (let's call it a) thread
> call event will get handled in a timely fashion.  So this is the problem
> that wakeUp solves.  After the thread call event is added to
> threadCallQueue, wakeUp makes some event source the reactor is
> monitoring signal readiness (on POSIX, it writes a byte to a pipe the
> reactor is select()ing (etc) on; on Windows, it posts an event like you
> pasted above).  This ensures that if the reactor is asleep waiting for
> an event it will wake up soon, and then it will notice there are thread
> call events to process.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/f402f27a/attachment.htm 

From benjamin.bertrand at lfv.se  Thu Jan 13 03:08:15 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Thu, 13 Jan 2011 08:08:15 +0000
Subject: [Twisted-Python] client connecting to 2
	servers	(nonsimultaneously)
In-Reply-To: <AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
Message-ID: <2C9A58914594E34AA28179DB776FABDF96EB@xw-exch04.lfv.se>

No need to apologize Jason :-)
Got a lot of useful information in this thread!
Thanks!

Benjamin

Fr?n: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] F?r Jason Rennie
Skickat: den 12 januari 2011 16:52
Till: Twisted general discussion
?mne: Re: [Twisted-Python] client connecting to 2 servers (nonsimultaneously)

Benjamin, sorry for providing you with an incorrect explanation. ?Jean-Paul, thank you for correcting my broken understanding of callWhenRunning.

Is there a call which puts a function into the reactor's queue of tasks to be completed?

Thanks,

Jason

On Wed, Jan 12, 2011 at 10:26 AM, <exarkun at twistedmatrix.com> wrote:
Although note that if the reactor is already running when you
instantiate the factory, then callWhenRunning will immediately call the
function you pass to it, as demonstrated by this transcript in which the
reactor is already running:

? ?>>> def foo():
? ?... ? ? print 'foo running'
? ?... ? ?>>> from twisted.internet import reactor
? ?>>> reactor.callWhenRunning(foo)
? ?foo running
? ?>>>
Jean-Paul


-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/


From michaelnt at gmail.com  Thu Jan 13 07:06:10 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Thu, 13 Jan 2011 12:06:10 +0000
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <20110111074838.GA19873@ubuntu>
References: <20110111074838.GA19873@ubuntu>
Message-ID: <AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>

On 11 January 2011 07:48, Alessandro Dentella <sandro at e-den.it> wrote:

> So what's the suggested way to play with twisted?

It depends what you're trying to do. I'd suggest you get some form of
skeleton program running first. At that point you can interact with
the program using twisted manhole.

ipython has a task interface with supports starting asynchronous jobs,
a quick search turns up

http://mail.scipy.org/pipermail/ipython-user/2009-February/006148.html

Regards, Michael


From williem75 at gmail.com  Thu Jan 13 10:29:06 2011
From: williem75 at gmail.com (williem75 at gmail.com)
Date: Thu, 13 Jan 2011 09:29:06 -0600
Subject: [Twisted-Python] Twisted-Python Digest, Vol 82, Issue 12
Message-ID: <vqhbcqt553wkg5gigbg0u5nt.1294932546262@email.android.com>


Sent from my LG phone

twisted-python-request at twistedmatrix.com wrote:

>Send Twisted-Python mailing list submissions to
>	twisted-python at twistedmatrix.com
>
>To subscribe or unsubscribe via the World Wide Web, visit
>	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>or, via email, send a message with subject or body 'help' to
>	twisted-python-request at twistedmatrix.com
>
>You can reach the person managing the list at
>	twisted-python-owner at twistedmatrix.com
>
>When replying, please edit your Subject line so it is more specific
>than "Re: Contents of Twisted-Python digest..."
>
>
>Today's Topics:
>
>   1. Re: client connecting to 2 servers (nonsimultaneously)
>      (benjamin.bertrand at lfv.se)
>   2. Re: client connecting to 2 servers	(nonsimultaneously)
>      (Jason Rennie)
>   3. Re: client connecting to 2	servers	(nonsimultaneously)
>      (exarkun at twistedmatrix.com)
>   4. Re: client connecting to 2 servers	(nonsimultaneously)
>      (Jason Rennie)
>   5. Re: client connecting to 2 servers	(nonsimultaneously)
>      (Glyph Lefkowitz)
>
>
>----------------------------------------------------------------------
>
>Message: 1
>Date: Wed, 12 Jan 2011 09:49:34 +0000
>From: <benjamin.bertrand at lfv.se>
>Subject: Re: [Twisted-Python] client connecting to 2 servers
>	(nonsimultaneously)
>To: <twisted-python at twistedmatrix.com>
>Message-ID: <2C9A58914594E34AA28179DB776FABDF92E4 at xw-exch04.lfv.se>
>Content-Type: text/plain; charset="iso-8859-1"
>
>One small question about the following code:
>Why did you use reactor.callWhenRunning in the __init__ method?
>Why not calling directly reactor.connectTCP?
>
>Cheers,
>
>Benjamin
>
>Fr?n: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] F?r Jason Rennie
>Skickat: den 11 januari 2011 14:11
>Till: Twisted general discussion
>?mne: Re: [Twisted-Python] client connecting to 2 servers (nonsimultaneously)
>
>You could probably generalize and simplify by using a collections.deque of hosts/ports and using the rotate() method before each?reactor.connectTCP. ?Also, no need for multiple reactor imports---one at the top of the code is fine. ?Note that if the connection is "lost" in a non-clean fashion, you may also want to reconnect. ?IIUC, "fail" only handles the case that no connection is made (protocol is never created).
>
>import collections
>from twisted.internet import reactor
>
>class MyClientFactory(object):
>?? ?protocol = MyClientProtocol
>?? ?def __init__(self, hosts):
>?? ? ? ?self.hosts = collections.deque(hosts)
>?? ? ? ?reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0], self.hosts[0][1], self)
>?? ? ? ?self.hosts.rotate(1)
>?? ?def clientConnectionFailed(self, connector, reason):
>?? ? ? ?reactor.callLater(2.0, connectTCP, self.hosts[0][0], self.hosts[0][1], self)
>?? ? ? ?self.hosts.rotate(1)
>
>factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
>reactor.run()
>
>Cheers,
>
>Jason
>
>On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:
>Hi,
>
>I'm new to twisted and I have started to write a new protocol with a TCP
>client and server.
>In my protocol, a client should be able to connect to 2 servers
>(master/slave node - only the master accepts connection).
>The client should try to connect to server1. If it fails, try to connect
>to server2 (after a specific timeout). If that fails, try server1...
>I came up with a solution (see below).
>As I'm new to twisted and I haven't seen anything like that in the
>examples, I'd like to check if that's a proper way to do it.
>Any comments is welcome.
>
>Thanks
>
>Benjamin
>
>***********************************************
>class MyClientFactory(ClientFactory):
>
>? ?protocol = MyClientProtocol
>
>? ?def __init__(self, host2=None):
>? ? ? ?self.host1 = None
>? ? ? ?self.host2 = host2
>
>? ?def clientConnectionFailed(self, connector, reason):
>? ? ? ?from twisted.internet import reactor
>? ? ? ?if self.host2 is None:
>? ? ? ? ? ?# host2 is not defined, reconnect to host1
>? ? ? ? ? ?reactor.callLater(2.0, connector.connect)
>? ? ? ?else:
>? ? ? ? ? ?destination = connector.getDestination()
>? ? ? ? ? ?if self.host1 is None:
>? ? ? ? ? ? ? ?# First connection failed, initialize host1, and try
>host2
>? ? ? ? ? ? ? ?self.host1 = destination.host
>? ? ? ? ? ? ? ?host = self.host2
>? ? ? ? ? ?elif destination.host == self.host1:
>? ? ? ? ? ? ? ?# Connection to host1 failed, try host2
>? ? ? ? ? ? ? ?host = self.host2
>? ? ? ? ? ?else:
>? ? ? ? ? ? ? ?# Connection to host2 failed, try host1
>? ? ? ? ? ? ? ?host = self.host1
>? ? ? ? ? ?reactor.callLater(2.0, reactor.connectTCP, host,
>destination.port, self)
>
>
>factory = MyClientFactory(server2)
>from twisted.internet import reactor
>reactor.connectTCP(server1, 8010, factory)
>reactor.run()
>***********************************************
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>-- 
>Jason Rennie
>Research Scientist, ITA Software
>617-714-2645
>http://www.itasoftware.com/
>
>
>
>------------------------------
>
>Message: 2
>Date: Wed, 12 Jan 2011 10:15:59 -0500
>From: Jason Rennie <jrennie at gmail.com>
>Subject: Re: [Twisted-Python] client connecting to 2 servers
>	(nonsimultaneously)
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Message-ID:
>	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY at mail.gmail.com>
>Content-Type: text/plain; charset="iso-8859-1"
>
>Habit, mostly.  I think it's a good habit, though.  The reason is that I
>wanted to make sure the __init__ code completed before the connectTCP was
>called.  In this case, it doesn't matter, but if I had a number of things I
>wanted to do in __init__, it might matter.  Consider:
>
>class MyClientProtocol(Protocol):
>      def connectionMade(self):
>        self.factory.numConnections += 1
>
>class MyClientFactory(Factory):
>      def __init__(self):
>        reactor.connectTCP(host, port, self)
>  self.numConnections = 0
>
>'course, I'm sure you'd put reactor.connectTCP *after* the numConnections
>initializer, but using callWhenRunning ensures that the order doesn't
>matter, so it's one less thing you have to worry about :-)
>
>Jason
>
>On Wed, Jan 12, 2011 at 4:49 AM, <benjamin.bertrand at lfv.se> wrote:
>
>> One small question about the following code:
>> Why did you use reactor.callWhenRunning in the __init__ method?
>> Why not calling directly reactor.connectTCP?
>>
>> Cheers,
>>
>> Benjamin
>>
>>
>-- 
>Jason Rennie
>Research Scientist, ITA Software
>617-714-2645
>http://www.itasoftware.com/
>-------------- next part --------------
>An HTML attachment was scrubbed...
>URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/74ab6e3d/attachment.html 
>
>------------------------------
>
>Message: 3
>Date: Wed, 12 Jan 2011 15:26:37 -0000
>From: exarkun at twistedmatrix.com
>Subject: Re: [Twisted-Python] client connecting to 2	servers
>	(nonsimultaneously)
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Message-ID:
>	<20110112152637.1811.1981888275.divmod.xquotient.9 at localhost.localdomain>
>	
>Content-Type: text/plain; charset="utf-8"; format="flowed"
>
>On 03:15 pm, jrennie at gmail.com wrote:
>>Habit, mostly.  I think it's a good habit, though.  The reason is that 
>>I
>>wanted to make sure the __init__ code completed before the connectTCP 
>>was
>>called.  In this case, it doesn't matter, but if I had a number of 
>>things I
>>wanted to do in __init__, it might matter.  Consider:
>>
>>class MyClientProtocol(Protocol):
>>      def connectionMade(self):
>>        self.factory.numConnections += 1
>>
>>class MyClientFactory(Factory):
>>      def __init__(self):
>>        reactor.connectTCP(host, port, self)
>>  self.numConnections = 0
>>
>>'course, I'm sure you'd put reactor.connectTCP *after* the 
>>numConnections
>>initializer, but using callWhenRunning ensures that the order doesn't
>>matter, so it's one less thing you have to worry about :-)
>
>Although note that if the reactor is already running when you 
>instantiate the factory, then callWhenRunning will immediately call the 
>function you pass to it, as demonstrated by this transcript in which the 
>reactor is already running:
>
>    >>> def foo():
>    ...     print 'foo running'
>    ...    >>> from twisted.internet import reactor
>    >>> reactor.callWhenRunning(foo)
>    foo running
>    >>>
>Jean-Paul
>
>
>
>------------------------------
>
>Message: 4
>Date: Wed, 12 Jan 2011 10:52:05 -0500
>From: Jason Rennie <jrennie at gmail.com>
>Subject: Re: [Twisted-Python] client connecting to 2 servers
>	(nonsimultaneously)
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Message-ID:
>	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH at mail.gmail.com>
>Content-Type: text/plain; charset="iso-8859-1"
>
>Benjamin, sorry for providing you with an incorrect explanation.  Jean-Paul,
>thank you for correcting my broken understanding of callWhenRunning.
>
>Is there a call which puts a function into the reactor's queue of tasks to
>be completed?
>
>Thanks,
>
>Jason
>
>On Wed, Jan 12, 2011 at 10:26 AM, <exarkun at twistedmatrix.com> wrote:
>
>> Although note that if the reactor is already running when you
>> instantiate the factory, then callWhenRunning will immediately call the
>> function you pass to it, as demonstrated by this transcript in which the
>> reactor is already running:
>>
>>    >>> def foo():
>>    ...     print 'foo running'
>>    ...    >>> from twisted.internet import reactor
>>    >>> reactor.callWhenRunning(foo)
>>    foo running
>>    >>>
>> Jean-Paul
>>
>>
>-- 
>Jason Rennie
>Research Scientist, ITA Software
>617-714-2645
>http://www.itasoftware.com/
>-------------- next part --------------
>An HTML attachment was scrubbed...
>URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/45f97e25/attachment-0001.htm 
>
>------------------------------
>
>Message: 5
>Date: Wed, 12 Jan 2011 11:32:55 -0500
>From: Glyph Lefkowitz <glyph at twistedmatrix.com>
>Subject: Re: [Twisted-Python] client connecting to 2 servers
>	(nonsimultaneously)
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Message-ID:
>	<AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot at mail.gmail.com>
>Content-Type: text/plain; charset="utf-8"
>
>On Wed, Jan 12, 2011 at 10:52 AM, Jason Rennie <jrennie at gmail.com> wrote:
>
>> Benjamin, sorry for providing you with an incorrect explanation.
>>  Jean-Paul, thank you for correcting my broken understanding of
>> callWhenRunning.
>>
>> Is there a call which puts a function into the reactor's queue of tasks to
>> be completed?
>>
>
>The reactor doesn't have a queue of tasks to be completed.  It has sets of
>various event sources, which it executes in no particular order.
>
>Scheduling a timed event with callLater(0,...) might do what you want,
>though.
>-------------- next part --------------
>An HTML attachment was scrubbed...
>URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/5d2959bd/attachment-0001.htm 
>
>------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>End of Twisted-Python Digest, Vol 82, Issue 12
>**********************************************

From tenth at twistedmatrix.com  Thu Jan 13 12:32:08 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Thu, 13 Jan 2011 12:32:08 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
References: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
Message-ID: <AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc@mail.gmail.com>

Apologies in advance for the short notice, but I'm planning to host a Boston
area Twisted mini-sprint this weekend on Sunday, January 16th.

Space is fairly limited (hence the mini- prefix), but if you're on
twisted-python and would be interested in the details of this and/or future
Boston area sprints, let me know, and I'll add you to the invitation.

Thanks,

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110113/79695901/attachment.htm 

From luke-lists at hybrid-logic.co.uk  Thu Jan 13 14:43:59 2011
From: luke-lists at hybrid-logic.co.uk (Luke Marsden)
Date: Thu, 13 Jan 2011 19:43:59 +0000
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc@mail.gmail.com>
References: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
	<AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc@mail.gmail.com>
Message-ID: <1294947839.9990.50.camel@pow>

Damn, I'm going to be in Cambridge for 10 weeks from Wednesday 19th
onwards (usually based here in the UK). So I miss out by 3 days!

I'd really like to meet up with any Twisted folk when I arrive though.
Is anyone Boston-based up for a drink some time after the 19th?

FYI I'm the guy behind
http://twistedmatrix.com/trac/wiki/SuccessStories#HybridLogic

:-)

-- 
Best Regards,
Luke Marsden
CTO, Hybrid Logic Ltd.

Web: http://www.hybrid-cluster.com/
Hybrid Web Cluster - cloud web hosting

Mobile: +447791750420


On Thu, 2011-01-13 at 12:32 -0500, Tenth wrote:
> Apologies in advance for the short notice, but I'm planning to host a
> Boston area Twisted mini-sprint this weekend on Sunday, January 16th.
> 
> 
> Space is fairly limited (hence the mini- prefix), but if you're on
> twisted-python and would be interested in the details of this and/or
> future Boston area sprints, let me know, and I'll add you to the
> invitation.
> 
> 
> Thanks,
> 
> 
> - Dave
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Thu Jan 13 16:22:36 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Jan 2011 16:22:36 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <1294947839.9990.50.camel@pow>
References: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
	<AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc@mail.gmail.com>
	<1294947839.9990.50.camel@pow>
Message-ID: <37A619CF-9ED2-4F11-A5A6-53210AD1CC07@twistedmatrix.com>

On Jan 13, 2011, at 2:43 PM, Luke Marsden wrote:

> Damn, I'm going to be in Cambridge for 10 weeks from Wednesday 19th
> onwards (usually based here in the UK). So I miss out by 3 days!
> 
> I'd really like to meet up with any Twisted folk when I arrive though.
> Is anyone Boston-based up for a drink some time after the 19th?
> 
> FYI I'm the guy behind
> http://twistedmatrix.com/trac/wiki/SuccessStories#HybridLogic
> 
> :-)

We should really be having sprints more than once every 10 weeks, so please motivate us to do another one while you're in town :).

I'd definitely love to meet up, perhaps more than once, and I'm sure some other folks would love to meet one of our success stories.  Feel free to contact me personally so we can work out the details.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110113/4936ce77/attachment.htm 

From david at davidstrauss.net  Thu Jan 13 17:12:05 2011
From: david at davidstrauss.net (David Strauss)
Date: Thu, 13 Jan 2011 14:12:05 -0800
Subject: [Twisted-Python] Pantheon sponsorship logo
Message-ID: <1294956725.22191.6.camel@oxygen>

Hi Twisters,

I recently sent in a $1000/silver sponsorship to the Twisted project
from Pantheon Systems, my new company. For the sponsor listing, I've
attached a logo with the specified dimensions. Please link to our home
page [1]. Thanks, and happy 2011.

[1] http://getpantheon.com/

-- 
David Strauss
   | david at getpantheon.com
   | +1 512 577 5827 [mobile]
Pantheon Systems
   | http://getpantheon.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pantheon-logo-white-160x37.png
Type: image/png
Size: 3942 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20110113/f46ff693/attachment.png 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20110113/f46ff693/attachment.pgp 

From lvh at laurensvh.be  Thu Jan 13 17:51:55 2011
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Thu, 13 Jan 2011 23:51:55 +0100
Subject: [Twisted-Python] Pantheon sponsorship logo
In-Reply-To: <1294956725.22191.6.camel@oxygen>
References: <1294956725.22191.6.camel@oxygen>
Message-ID: <AANLkTimCXeXKoXaiu2fZV_0D2pFwVZy9+h80wZ=f6-Q1@mail.gmail.com>

Thanks a lot for your support!

Unfortunately, for some reason, I can edit all the wiki pages but not
the front page. I'm sure JP/Glyph/someone else with appropriate rights
will oblige. I pinged them, at least.

cheers and have a wonderful 2011
lvh


From exarkun at twistedmatrix.com  Thu Jan 13 18:03:50 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 13 Jan 2011 23:03:50 -0000
Subject: [Twisted-Python] Pantheon sponsorship logo
In-Reply-To: <AANLkTimCXeXKoXaiu2fZV_0D2pFwVZy9+h80wZ=f6-Q1@mail.gmail.com>
References: <1294956725.22191.6.camel@oxygen>
	<AANLkTimCXeXKoXaiu2fZV_0D2pFwVZy9+h80wZ=f6-Q1@mail.gmail.com>
Message-ID: <20110113230350.1816.836901483.divmod.xquotient.123@localhost.localdomain>

On 10:51 pm, lvh at laurensvh.be wrote:
>Thanks a lot for your support!
>
>Unfortunately, for some reason, I can edit all the wiki pages but not
>the front page. I'm sure JP/Glyph/someone else with appropriate rights
>will oblige. I pinged them, at least.
>
>cheers and have a wonderful 2011

The logo is now up.  Thanks for the support, David!

We also have a sponsors-only mailing list.  If you'd like someone at 
Pantheon subscribed to it, contact me off-list with contact information.

Jean-Paul


From sandro at e-den.it  Thu Jan 13 18:43:09 2011
From: sandro at e-den.it (Alessandro Dentella)
Date: Fri, 14 Jan 2011 00:43:09 +0100
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
References: <20110111074838.GA19873@ubuntu>
	<AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
Message-ID: <20110113234309.GB5237@ubuntu>

thanks,

short abstact: manhole is very good, thanks. But I'd need to add readline to
make it usable and I'd need tab-completion too. 


On Thu, Jan 13, 2011 at 12:06:10PM +0000, Michael Thompson wrote:
> On 11 January 2011 07:48, Alessandro Dentella <sandro at e-den.it> wrote:
> 
> > So what's the suggested way to play with twisted?
> 
> It depends what you're trying to do. I'd suggest you get some form of
> skeleton program running first. 

I do have already: it uses SerialPort, queries a serial bus and returns info
on a domotic system (switches & co). Apart from my queries it also listen to
whatever the serial bus issues and react changing the internal state of some
objects.

What I'd like to do is to play interactively with these objects (Eg: a
digital module with 8 switches: I want to switch on/off the exits).

> At that point you can interact with the program using twisted manhole.

this is interesting. I found a working example::

   from twisted.internet import reactor
   from twisted.conch import telnet

   def createShellServer( ):

       print 'Creating shell server instance'
       factory = telnet.ShellFactory()
       port = reactor.listenTCP( 2000, factory)
       factory.namespace['x'] = 'hello world'
       factory.username = 'sd'
       factory.password = 'vega'
       print 'Listening on port 2000'
       return port

   if __name__ == "__main__":

       reactor.callWhenRunning( createShellServer )
       reactor.run()

that raises /usr/lib/python2.6/dist-packages/twisted/manhole/telnet.py:8: DeprecationWarning: As of Twisted 2.1, twisted.protocols.telnet is deprecated.  See twisted.conch.telnet for the current, supported API.
  from twisted.protocols import telnet

I couldn't make out a correct syntax using the new API. Can somebody point
me to the correct solution?

Adding readline
----------------

To make this solution viable to me I really need to have readline and
completion. I found a thread hinting of a patch that should implement it but
no real patch to see [1].

I tryied to start an IPythonShell at the prompt but it simply hangs forever.



sandro
*:-)

[1] http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg02241.html

-- 
Sandro Dentella  *:-)
http://www.reteisi.org             Soluzioni libere per le scuole
http://sqlkit.argolinux.org        SQLkit home page - PyGTK/python/sqlalchemy


From benjamin.bertrand at lfv.se  Fri Jan 14 09:56:53 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Fri, 14 Jan 2011 14:56:53 +0000
Subject: [Twisted-Python] Design advice
Message-ID: <2C9A58914594E34AA28179DB776FABDF0E1B11B2@xw-exch05.lfv.se>

Hi,

I'm trying to do a proof of concept and need some advice about the design.
We today have an external system sending messages to several of our tests systems (one specific connection per system).
We'd like to get our own server for more flexibility (easily setup connection to a new system, filtering, re-sending...).

The general idea so far is:
- A server receives all the messages from the external system, parses them and writes them to a database.
The server will be running as a daemon (should be on all the time).
- Clients can retrieve messages from the database and send them to test systems (one client per system). Clients should as well be able to send "live" data to the system (after some filtering on message content).
Clients are independent. They can be started/stopped depending on the need.

The server and clients use a specific protocol to communicate with the other system.
I already have implemented a server that receives messages from the external system. Parsing and writing them to a database shouldn't be too difficult.
I see how I can tell a client to retrieve specific messages from the database to send them.
What I'm not sure about is the "live" part (sending messages coming from the external system). Note that when I say "live", a small delay (up to 2-3 seconds) is not critical.
1) Each client could poll the database for change... They would need to poll it quite frequently, so don't think it's an option.
2) I read about being notified by a database on table changes (http://www.divillo.com/). That's much nicer than polling, but I don't think that's the best for my application.
3) I think a better solution would be to directly ask the server receiving the messages.
Not sure about the best way to do that:
3.1) The server could forward the raw data to all the clients and let the client do the filtering. Lot of unneeded data would be sent.
3.2) The server could do the filtering and send only the needed messages. Is using twisted's perspective broker a good solution for that?
4) Another idea?

In term of dimensioning, we can get around 200 messages per minute (max message length is 10000 bytes). Usually more around 20-30 messages per minute.
The number of clients is small (around 10).

Any advice?

Thanks

Benjamin


From tenth at twistedmatrix.com  Fri Jan 14 12:24:35 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Fri, 14 Jan 2011 12:24:35 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <1294947839.9990.50.camel@pow>
References: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
	<AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc@mail.gmail.com>
	<1294947839.9990.50.camel@pow>
Message-ID: <AANLkTikMB9jwFeEsAPNTcRvZGR7gb_RcAOyY-jZn1msj@mail.gmail.com>

On Thu, Jan 13, 2011 at 2:43 PM, Luke Marsden <luke-lists at hybrid-logic.co.uk
> wrote:

> Damn, I'm going to be in Cambridge for 10 weeks from Wednesday 19th
> onwards (usually based here in the UK). So I miss out by 3 days!
>

Hi Luke,

We're trying to get into the habit of having more regular sprints...
Hopefully we'll do something in February and March as well, and we'll
definitely add you to the invitations,

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110114/3ae44247/attachment.htm 

From JOHN at egh.com  Fri Jan 14 14:45:41 2011
From: JOHN at egh.com (John Santos)
Date: Fri, 14 Jan 2011 14:45:41 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <AANLkTikMB9jwFeEsAPNTcRvZGR7gb_RcAOyY-jZn1msj@mail.gmail.com>
Message-ID: <1110114143815.11974E-100000@Ives.egh.com>


It would take me at least 3 minutes to walk to Cambridge (though
probably the wrong end of Cambridge), so I'm available.  However,
I still feel like a relative newbie, so I don't know how useful
I would be.  (I've been puttering around with Twisted/Python for
a couple of years, but mostly in my spare time on back-burner
projects, so not that much accumulated experience.)


-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

From glyph at twistedmatrix.com  Fri Jan 14 15:23:06 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 14 Jan 2011 15:23:06 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <1110114143815.11974E-100000@Ives.egh.com>
References: <1110114143815.11974E-100000@Ives.egh.com>
Message-ID: <A1ABBB24-E979-4E26-BC90-17DAB6A4E97B@twistedmatrix.com>


On Jan 14, 2011, at 2:45 PM, John Santos wrote:

> It would take me at least 3 minutes to walk to Cambridge (though
> probably the wrong end of Cambridge), so I'm available.  However,
> I still feel like a relative newbie, so I don't know how useful
> I would be.  (I've been puttering around with Twisted/Python for
> a couple of years, but mostly in my spare time on back-burner
> projects, so not that much accumulated experience.)

We can always use more contributors.  You can help with documentation, or with small bugs, or any number of other things.

If you're concerned about being productive and useful at the sprint, the main thing you can do is not to learn tons of stuff about Twisted, but to pick a couple of tickets which interest you beforehand and familiarize yourself with the development process (<http://twistedmatrix.com/trac/wiki/TwistedDevelopment> and <http://twistedmatrix.com/trac/wiki/ReviewProcess>) so that you can jump right in.  The experienced folks at the sprint are generally very happy to help.



From tenth at twistedmatrix.com  Fri Jan 14 15:37:27 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Fri, 14 Jan 2011 15:37:27 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <1110114143815.11974E-100000@Ives.egh.com>
References: <AANLkTikMB9jwFeEsAPNTcRvZGR7gb_RcAOyY-jZn1msj@mail.gmail.com>
	<1110114143815.11974E-100000@Ives.egh.com>
Message-ID: <AANLkTi=62LNAQq9ErejkYvm-=F94XtJ=e0bqGwwX+xTR@mail.gmail.com>

On Fri, Jan 14, 2011 at 2:45 PM, John Santos <JOHN at egh.com> wrote:

>
> It would take me at least 3 minutes to walk to Cambridge (though
> probably the wrong end of Cambridge), so I'm available.  However,
> I still feel like a relative newbie, so I don't know how useful
> I would be.


Hi John,

I'm not even sure I'd call myself a fully qualified newbie, but I've still
managed to help close a few tickets... The nice thing about Sprints is that
you can just sit down next to someone who knows what they're doing (usually
not me, BTW) and help them get something productive done. (Or just learn
more for next time.)

There are also quite a few jobs involving documentation, the website, and
various servers and build systems that are more tedious and annoying than
anything else... and tedious and annoying is always better with free pizza!

Anyway, you should be receiving an invitation shortly... And if it says
anything about "Max Guests Reached", feel free to show up anyway (there's
generally always more room for pair programming / hanging out and meeting
people, even if all the good laptop spots are taken.)

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110114/f0296200/attachment.htm 

From michaelnt at gmail.com  Sat Jan 15 08:17:30 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Sat, 15 Jan 2011 13:17:30 +0000
Subject: [Twisted-Python] Design advice
In-Reply-To: <2C9A58914594E34AA28179DB776FABDF0E1B11B2@xw-exch05.lfv.se>
References: <2C9A58914594E34AA28179DB776FABDF0E1B11B2@xw-exch05.lfv.se>
Message-ID: <AANLkTi=fBKFLEpK6yUmT5c1++x-1xjm+ys2a2ukV0NpN@mail.gmail.com>

On 14 January 2011 14:56,  <benjamin.bertrand at lfv.se> wrote:
> I see how I can tell a client to retrieve specific messages from the database to send them.
> What I'm not sure about is the "live" part (sending messages coming from the external system). Note that when I say "live", a small delay (up to 2-3 seconds) is not critical.

Not too clear what you problem is but you could use some form of
messaging from the server to the clients to inform them that a new
message is available on the database, rather than them polling. Thrift
or AMQP might meet your needs for this.

Michael


From andrewfr_ice at yahoo.com  Sat Jan 15 13:15:26 2011
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Sat, 15 Jan 2011 10:15:26 -0800 (PST)
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <mailman.1367.1295017063.9255.twisted-python@twistedmatrix.com>
Message-ID: <329842.43878.qm@web120720.mail.ne1.yahoo.com>

Hi Folks:

> Message: 1
> Date: Thu, 13 Jan 2011 12:32:08 -0500
> From: Tenth <tenth at twistedmatrix.com>
> Subject: [Twisted-Python] Boston Area Mini-Sprint
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID:
> ???
> <AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc at mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
> 
> Apologies in advance for the short notice, but I'm planning
> to host a Boston
> area Twisted mini-sprint this weekend on Sunday, January
> 16th.
> 
> Space is fairly limited (hence the mini- prefix), but if
> you're on
> twisted-python and would be interested in the details of
> this and/or future
> Boston area sprints, let me know, and I'll add you to the
> invitation.

Yes this is short notice. Still, I am tempted to drive in for the sprint from Montreal, Canada. However where is the sprint being held, what time does it start, and how long will it be?

Cheers,
Andrew






From goffi at goffi.org  Sat Jan 15 14:08:40 2011
From: goffi at goffi.org (goffi)
Date: Sat, 15 Jan 2011 20:08:40 +0100
Subject: [Twisted-Python] Flags with MaildirMailbox
Message-ID: <4D31F0B8.1070700@goffi.org>

G'day everybody,

I'm playing a little bit with twisted.mail.maildir.Mailbox which seems 
to work nice, but it doesn't seem to manage flags (cf 
http://cr.yp.to/proto/maildir.html "What can I put in info").
Is there an easy/elegant way to do this ? Is it planed to implement this 
feature ?
Thanks for any answer

Regards
Goffi



From glyph at twistedmatrix.com  Sat Jan 15 15:22:54 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 15 Jan 2011 15:22:54 -0500
Subject: [Twisted-Python] "small" jobs
Message-ID: <E938D36F-09E0-4B0D-B5D6-207A8341E17D@twistedmatrix.com>

Hello Twisted Community,

Tomorrow, we're going to have a sprint in Massachusetts, where core developers and several contributors will get together to improve Twisted's code and documentation.  If you can't make it there, we'd be happy for you to play along at home, reviewing tickets and submitting patches.  We'll be on the twisted IRC channel as usual.

However, there are probably many of you who don't quite feel up to a sprint; who might not know enough about Python, or Twisted's internals, or the development process.  Or maybe you're just not that confident in your coding skills.  Twisted needs your help too.

In the past year, we've had two people take over non-coding responsibilities.   Jason J.W. Williams has become our official Success Stories ambassador (feel free to get in touch with him at <success at twistedmatrix.com> if you've got one!) and David Sturgis has become (somewhat less formally) our impromptu Boston-area sprint director.  Partially as a result, the core team has been able to stop thinking about sprint organization and success stories, and finish several new features in time for 10.2 as well as getting that release out before the end of 2010.

There are lots of other small jobs that need some attention.  By committing to one of the following responsibilities, you'd take a load off the core developers' minds so that we can focus on doing that core development:

Maintain a project page - one of the ones linked from <http://twistedmatrix.com/trac/wiki/TwistedProjects>.  These should be the preferred "landing" pages for people with a particular interest in Twisted, like "I want to run a chat server", but right now they don't contain enough useful information.
Maintain contact with our sponsors.  This would involve remembering when particular people donated, getting in touch with them when their sponsor membership is about to expire, and putting up and taking down logos from the front page of twistedmatrix.com.
Give credit where credit is due.  <http://twistedmatrix.com/trac/wiki/TwistedMatrixLaboratories> and the CREDITS file in the Twisted release are kind of a mess; they refer to people who are long gone and they don't recognize people who worked hard on the current release.

Please reply if you'd like to accept one of these responsibilities, or if you can think of another smallish, non-coding responsibility that someone could take over.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110115/67c5339e/attachment.htm 

From glyph at twistedmatrix.com  Sat Jan 15 15:44:55 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 15 Jan 2011 15:44:55 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <329842.43878.qm@web120720.mail.ne1.yahoo.com>
References: <329842.43878.qm@web120720.mail.ne1.yahoo.com>
Message-ID: <D5E13202-730B-4784-A29F-56180FB0A71D@twistedmatrix.com>


On Jan 15, 2011, at 1:15 PM, Andrew Francis wrote:

> Yes this is short notice. Still, I am tempted to drive in for the sprint from Montreal, Canada. However where is the sprint being held, what time does it start, and how long will it be?


It's being held in somebody's home office in Somerville MA, and it's from 2-9PM EST.  I'm excited about it myself, but it is *probably* overkill to drive over 300 miles to get there :) - it's not close to a hotel or anything.  For that kind of long-distance thing, we have the sprints at PyCon, which are substantially longer.

In this case it would be better to participate online.  Thanks for your interest though!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110115/fec3fef5/attachment.htm 

From waterbug at pangalactic.us  Sat Jan 15 16:16:38 2011
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Sat, 15 Jan 2011 16:16:38 -0500
Subject: [Twisted-Python] "small" jobs
In-Reply-To: <E938D36F-09E0-4B0D-B5D6-207A8341E17D@twistedmatrix.com>
References: <E938D36F-09E0-4B0D-B5D6-207A8341E17D@twistedmatrix.com>
Message-ID: <4D320EB6.80403@pangalactic.us>

On 01/15/2011 03:22 PM, Glyph Lefkowitz wrote:
> ... the core team has been able to stop thinking about sprint
> organization and success stories, and finish several new
> features in time for 10.2 as well as getting that release out
> before the end of 2010.

Wow, did you guys get a hold of the keys to the BDFL's time
machine?  Heh.  ;)  Looking forward to seeing the minions at
PyCon!

Cheers,
Steve



From exarkun at twistedmatrix.com  Sat Jan 15 19:44:01 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Jan 2011 00:44:01 -0000
Subject: [Twisted-Python] Flags with MaildirMailbox
In-Reply-To: <4D31F0B8.1070700@goffi.org>
References: <4D31F0B8.1070700@goffi.org>
Message-ID: <20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>

On 15 Jan, 07:08 pm, goffi at goffi.org wrote:
>G'day everybody,
>
>I'm playing a little bit with twisted.mail.maildir.Mailbox which seems
>to work nice, but it doesn't seem to manage flags (cf
>http://cr.yp.to/proto/maildir.html "What can I put in info").
>Is there an easy/elegant way to do this ? Is it planed to implement 
>this
>feature ?
>Thanks for any answer

Not planned ("planned" in Twisted usually means "there is a ticket for 
it").  You're welcome to contribute that functionality, though!  Do you 
have an idea about how it might fit into the existing code and API?

Jean-Paul


From exarkun at twistedmatrix.com  Sat Jan 15 19:50:05 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Jan 2011 00:50:05 -0000
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <20110113234309.GB5237@ubuntu>
References: <20110111074838.GA19873@ubuntu>
	<AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
	<20110113234309.GB5237@ubuntu>
Message-ID: <20110116005005.1846.844785058.divmod.xquotient.16@localhost.localdomain>

On 13 Jan, 11:43 pm, sandro at e-den.it wrote:
>thanks,
>
>short abstact: manhole is very good, thanks. But I'd need to add 
>readline to
>make it usable and I'd need tab-completion too.

If by "add readline" you mean handle input using the stdlib readline 
module, you can't really do this (or, I'm sure you can, but it would 
involve a ton of coding).  If you only mean "have some commonly useful 
line editing features" then you have at least a couple options:

  * invective includes a fully unit-tested line input widget (for the 
insults widget library).  This really belongs somewhere other than 
invective, it'd be nice if someone pushed it back into Twisted. 
However, you can find invective at 
svn://svn.twistedmatrix.com/svn/Twisted/sandbox/exarkun/invective/trunk 
until that happens.

  * urwid supports Twisted and has lots of fancy things, including an 
input editing widget.

Also, we really should get rid of twisted.manhole, because these days 
manhole is supposed to refer to the stuff in twisted.conch.  I'm not 
sure if you found the latter, but from the warning you got about 
twisted.protocols.telnet it seems like you may have only found the 
former.

Jean-Paul


From exarkun at twistedmatrix.com  Sun Jan 16 00:05:19 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Jan 2011 05:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1295154319.25.91798127@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110116/3ae133f4/attachment-0001.htm 

From goffi at goffi.org  Sun Jan 16 11:27:59 2011
From: goffi at goffi.org (goffi)
Date: Sun, 16 Jan 2011 17:27:59 +0100
Subject: [Twisted-Python] Flags with MaildirMailbox
In-Reply-To: <20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>
References: <4D31F0B8.1070700@goffi.org>
	<20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>
Message-ID: <4D331C8F.4010807@goffi.org>

On 16/01/2011 01:44, exarkun at twistedmatrix.com wrote:
>
> Not planned ("planned" in Twisted usually means "there is a ticket for
> it").  You're welcome to contribute that functionality, though!  Do you
> have an idea about how it might fit into the existing code and API?
>
> Jean-Paul
>
Well not really, but it's a good way to learn :). I'm really (really 
really) busy at the moment, so I probably can't in the next days, but I 
will try to have a look (and maybe turn on IRC/the documentation if I 
need help and review on the coding convention of Twisted).

thanks for the reply :)


From goffi at goffi.org  Sun Jan 16 16:33:02 2011
From: goffi at goffi.org (goffi)
Date: Sun, 16 Jan 2011 22:33:02 +0100
Subject: [Twisted-Python] Flags with MaildirMailbox
In-Reply-To: <4D331C8F.4010807@goffi.org>
References: <4D31F0B8.1070700@goffi.org>	<20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>
	<4D331C8F.4010807@goffi.org>
Message-ID: <4D33640E.5030803@goffi.org>

On 16/01/2011 17:27, goffi wrote:
> [snip]
> Well not really, but it's a good way to learn :). I'm really (really
> really) busy at the moment, so I probably can't in the next days, but I
> will try to have a look (and maybe turn on IRC/the documentation if I
> need help and review on the coding convention of Twisted).
>
> thanks for the reply :)
An other issue: when we use appendMessage, MaildirMailbox doesn't update 
its list. As a result, listMessages() return an outdated list (the list 
of all files except the new one). It sounds like a bug.



From andrewfr_ice at yahoo.com  Sun Jan 16 16:50:13 2011
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Sun, 16 Jan 2011 13:50:13 -0800 (PST)
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <mailman.1652.1295154321.9255.twisted-python@twistedmatrix.com>
Message-ID: <617520.64406.qm@web120703.mail.ne1.yahoo.com>

Hi Glyph et al:

Message: 4
Date: Sat, 15 Jan 2011 15:44:55 -0500
From: Glyph Lefkowitz <glyph at twistedmatrix.com>
Subject: Re: [Twisted-Python] Boston Area Mini-Sprint
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Message-ID: <D5E13202-730B-4784-A29F-56180FB0A71D at twistedmatrix.com>
Content-Type: text/plain; charset="us-ascii"


>It's being held in somebody's home office in Somerville MA, and it's from >2-9PM EST.  I'm excited about it myself, but it is *probably* overkill to >drive over 300 miles to get there :) - it's not close to a hotel or >anything.  For that kind of long-distance thing, we have the sprints at >PyCon, which are substantially longer.

Fair enough although I have never been to Boston. I will stay home and watch the New England Patriots/NY Giants game. About Pycon. For starters, congratulations on your talk acceptance. I will be a Pycon 2011 and if there is a Twisted Sprint (and no other competing sprint like Stackless), I would participate. However I have to make these plans in advance.

Cheers,
Andrew




      


From goffi at goffi.org  Sun Jan 16 16:51:37 2011
From: goffi at goffi.org (goffi)
Date: Sun, 16 Jan 2011 22:51:37 +0100
Subject: [Twisted-Python] Flags with MaildirMailbox
In-Reply-To: <4D33640E.5030803@goffi.org>
References: <4D31F0B8.1070700@goffi.org>	<20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>	<4D331C8F.4010807@goffi.org>
	<4D33640E.5030803@goffi.org>
Message-ID: <4D336869.4000405@goffi.org>

On 16/01/2011 22:33, goffi wrote:
> An other issue: when we use appendMessage, MaildirMailbox doesn't update
> its list. As a result, listMessages() return an outdated list (the list
> of all files except the new one). It sounds like a bug.
Sorry, forget this mail, the list is well updated in the AppendFactory 
(_MaildirMailboxAppendMessageTask), will check twice before sending a 
mail to the list next time :p

Sorry for the noise.


From sandro at e-den.it  Sun Jan 16 18:12:37 2011
From: sandro at e-den.it (Alessandro Dentella)
Date: Mon, 17 Jan 2011 00:12:37 +0100
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <20110116005005.1846.844785058.divmod.xquotient.16@localhost.localdomain>
References: <20110111074838.GA19873@ubuntu>
	<AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
	<20110113234309.GB5237@ubuntu>
	<20110116005005.1846.844785058.divmod.xquotient.16@localhost.localdomain>
Message-ID: <20110116231237.GB19973@ubuntu>

thanks Jean-Paul for the hints,

On Sun, Jan 16, 2011 at 12:50:05AM -0000, exarkun at twistedmatrix.com wrote:
> On 13 Jan, 11:43 pm, sandro at e-den.it wrote:
> >thanks,
> >
> >short abstact: manhole is very good, thanks. But I'd need to add 
> >readline to
> >make it usable and I'd need tab-completion too.
> 
> If by "add readline" you mean handle input using the stdlib readline 
> module, you can't really do this (or, I'm sure you can, but it would 
> involve a ton of coding).  If you only mean "have some commonly useful 
> line editing features" then you have at least a couple options:

Well, in fact I intended mainly up/down arrows *and* tab-completion, like
ipython have. 

>   * invective includes a fully unit-tested line input widget (for the 
> insults widget library).  This really belongs somewhere other than 
> invective, it'd be nice if someone pushed it back into Twisted. 
> However, you can find invective at 
> svn://svn.twistedmatrix.com/svn/Twisted/sandbox/exarkun/invective/trunk 
> until that happens.
> 
>   * urwid supports Twisted and has lots of fancy things, including an 
> input editing widget.


From bogus@does.not.exist.com  Fri Jan  7 09:23:30 2011
From: bogus@does.not.exist.com ()
Date: Fri, 07 Jan 2011 14:23:30 -0000
Subject: No subject
Message-ID: <mailman.0.1295219567.9252.twisted-python@twistedmatrix.com>

get with invective of urwid.

> Also, we really should get rid of twisted.manhole, because these days 
> manhole is supposed to refer to the stuff in twisted.conch.  I'm not 
> sure if you found the latter, but from the warning you got about 
> twisted.protocols.telnet it seems like you may have only found the 
> former.

I was able to use only manhole.telnet. I wan't able to understand how to
make twisted.protocols.telnet work in the same way and was not able to fine
a demo snippet (more for completeness that else I'm still interested in
this).

On the other hand I managed to use ipython and twisted as I wanted and
everitying is working like a charm (but I still have a question that I'll
leave for next chapter).

Twisted in a thread - working setup
-----------------------------------

Following a hint in the ipython ml I started a second thread for twisted and
I'm using blockingcallFromThread to dispatch commands to the reactor:

    proto = Domotik()
    SerialPort(proto, o.opts['device'], reactor, baudrate=int(o.opts['baudrate']))

    rit = twistedutil.ReactorInThread()
    rit.setDaemon(True)
    rit.start()

    q = Quadro(proto, discover=False)
    proto.quadro = q
    q.discover_modules()

This works exactly as I wanted. I can interact with 'q' that represents a
collection of electric modules on the serial bus 


The unresolved doubt
--------------------------------

What I can't understand is why I can't put "q.discover_modules()" inside
callWhenRunning() command: if I do that it just blocks at the first
iteration of the 'for' loop.

    reactor.callWhenRunning( start_command, proto)

    def start_command(proto):
	q.discover_modules()

    class Quadro(object):

	def __init__(self, proto):
	    self.proto = proto
	    self.modules = []

	def discover_modules(self):
            """send a request to the serial bus to understand which electric
            modules are present"""

	    for x in range(10):
		blockingCallFromThread(reactor.callLater, 1 + x/5.0, self.proto.ask_status, x)


thanks

sandro
*:-)


-- 
Sandro Dentella  *:-)
http://www.reteisi.org             Soluzioni libere per le scuole
http://sqlkit.argolinux.org        SQLkit home page - PyGTK/python/sqlalchemy


From glyph at twistedmatrix.com  Mon Jan 17 00:07:42 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 17 Jan 2011 00:07:42 -0500
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <20110116231237.GB19973@ubuntu>
References: <20110111074838.GA19873@ubuntu>
	<AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
	<20110113234309.GB5237@ubuntu>
	<20110116005005.1846.844785058.divmod.xquotient.16@localhost.localdomain>
	<20110116231237.GB19973@ubuntu>
Message-ID: <5330728F-F812-4F66-B956-642C6F95A5FE@twistedmatrix.com>


On Jan 16, 2011, at 6:12 PM, Alessandro Dentella wrote:

> thanks Jean-Paul for the hints,
> 
> On Sun, Jan 16, 2011 at 12:50:05AM -0000, exarkun at twistedmatrix.com wrote:
>> On 13 Jan, 11:43 pm, sandro at e-den.it wrote:
>>> thanks,
>>> 
>>> short abstact: manhole is very good, thanks. But I'd need to add 
>>> readline to
>>> make it usable and I'd need tab-completion too.
>> 
>> If by "add readline" you mean handle input using the stdlib readline 
>> module, you can't really do this (or, I'm sure you can, but it would 
>> involve a ton of coding).  If you only mean "have some commonly useful 
>> line editing features" then you have at least a couple options:
> 
> Well, in fact I intended mainly up/down arrows *and* tab-completion, like
> ipython have. 
> 
>>  * invective includes a fully unit-tested line input widget (for the 
>> insults widget library).  This really belongs somewhere other than 
>> invective, it'd be nice if someone pushed it back into Twisted. 
>> However, you can find invective at 
>> svn://svn.twistedmatrix.com/svn/Twisted/sandbox/exarkun/invective/trunk 
>> until that happens.
>> 
>>  * urwid supports Twisted and has lots of fancy things, including an 
>> input editing widget.
> 
> From what you say I don't know if completion is something I'd
> get with invective of urwid.

Invective is an IRC client (with a useful text-editing widget for Twisted's "insults" module).  urwid is a client library.  Completion is something that you'd need to implement yourself with either of these (as is a functional Python interpreter...)

>> Also, we really should get rid of twisted.manhole, because these days 
>> manhole is supposed to refer to the stuff in twisted.conch.  I'm not 
>> sure if you found the latter, but from the warning you got about 
>> twisted.protocols.telnet it seems like you may have only found the 
>> former.
> 
> I was able to use only manhole.telnet. I wan't able to understand how to
> make twisted.protocols.telnet work in the same way and was not able to fine
> a demo snippet (more for completeness that else I'm still interested in
> this).

twisted.protocols.telnet is old and really should not be used.  The new, good telnet implementation is in twisted.conch.telnet.  You can find code that uses this (both a runnable application and an instructive example) in twisted.conch.manhole_tap, which also happens to include a python interpreter as its application.

> On the other hand I managed to use ipython and twisted as I wanted and
> everitying is working like a charm (but I still have a question that I'll
> leave for next chapter).
> 
> Twisted in a thread - working setup
> -----------------------------------
> 
> Following a hint in the ipython ml I started a second thread for twisted and
> I'm using blockingcallFromThread to dispatch commands to the reactor:

You can do this in pretty much any interactive Python interpreter, including the default one.  It's not very convenient, though :).

> What I can't understand is why I can't put "q.discover_modules()" inside
> callWhenRunning() command: if I do that it just blocks at the first
> iteration of the 'for' loop.

Because callWhenRunning will schedule start_command to be run on the main (reactor) thread.  (callWhenRunning may only be called _from_ the main thread, too, which it seems like you might not be doing).

Since start_command is running on the main thread, when it gets around to blockingCallFromThread, it puts some work into the queue for the reactor to do, then goes to sleep forever, trusting that the main thread will do the work and then wake it up.  Except - oops! - it just put the main thread to sleep forever, so it will never wake up.

If you'd like, you can file a ticket for blockingCallFromThread to raise a loud, angry exception if it is invoked from the reactor thread.

(Also, in the simple example you gave, you're invoking blockingCallFromThread with the wrong signature; the first argument must be a reactor.  The rest of my explanation was based on the assumption that this is not the exact code you're running, since that would log a traceback immediately.  Or, perhaps the fact that you're calling callWhenRunning from a non-main thread is blowing up in some more insidious way and that's the real problem.)

Hope this helps,

-glyph

From sandro at e-den.it  Mon Jan 17 04:31:21 2011
From: sandro at e-den.it (Alessandro Dentella)
Date: Mon, 17 Jan 2011 10:31:21 +0100
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <5330728F-F812-4F66-B956-642C6F95A5FE@twistedmatrix.com>
References: <20110111074838.GA19873@ubuntu>
	<AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
	<20110113234309.GB5237@ubuntu>
	<20110116005005.1846.844785058.divmod.xquotient.16@localhost.localdomain>
	<20110116231237.GB19973@ubuntu>
	<5330728F-F812-4F66-B956-642C6F95A5FE@twistedmatrix.com>
Message-ID: <20110117093121.GA22374@ubuntu>

Thanks Glyph,

On Mon, Jan 17, 2011 at 12:07:42AM -0500, Glyph Lefkowitz wrote:
> > From what you say I don't know if completion is something I'd
> > get with invective of urwid.
> 
> Invective is an IRC client (with a useful text-editing widget for Twisted's "insults" module).  urwid is a client library.  Completion is something that you'd need to implement yourself with either of these (as is a functional Python interpreter...)

ok, clear.

> twisted.protocols.telnet is old and really should not be used.  The new,
> good telnet implementation is in twisted.conch.telnet.  You can find code
> that uses this (both a runnable application and an instructive example) in
> twisted.conch.manhole_tap, which also happens to include a python
> interpreter as its application.

ok, I found demo.tac and demo_manhole.tac and will have a deeper look at them.

> > Twisted in a thread - working setup
> > -----------------------------------
> > 
> > Following a hint in the ipython ml I started a second thread for twisted and
> > I'm using blockingcallFromThread to dispatch commands to the reactor:
> 
> You can do this in pretty much any interactive Python interpreter, including the default one.  It's not very convenient, though :).
> 
> > What I can't understand is why I can't put "q.discover_modules()" inside
> > callWhenRunning() command: if I do that it just blocks at the first
> > iteration of the 'for' loop.

> Because callWhenRunning will schedule start_command to be run on the main
> (reactor) thread.  

mmh.... in my case the reactor thread in not the main one!
IPython.twistedutil.ReactorInThread does that for me

I'm calling it from the main thread, that is not the reactor's thread in my case

    rit = twistedutil.ReactorInThread()
    rit.setDaemon(True)
    rit.start()

> (callWhenRunning may only be called _from_ the main thread, too, which it
> seems like you might not be doing).


> Since start_command is running on the main thread, when it gets around to
> blockingCallFromThread, it puts some work into the queue for the reactor
> to do, then goes to sleep forever, trusting that the main thread will do
> the work and then wake it up.  Except - oops! - it just put the main
> thread to sleep forever, so it will never wake up.
> 
> If you'd like, you can file a ticket for blockingCallFromThread to raise a
> loud, angry exception if it is invoked from the reactor thread.

Ok I think this is the turning key. I imagine that if I start the reactor in
a separate secondary thread, calling reactor.callWhenRunnning(start_command)
from the main thread makes 'start_command' be run in the reactor's
thread. At that point I can't call blockingCallFromThread from that thread,
as you pointed out. If this assumption is wrong, please let me know and I'll
go to study threads.


> (Also, in the simple example you gave, you're invoking
> blockingCallFromThread with the wrong signature; the first argument must
> be a reactor.  The rest of my explanation was based on the assumption that
> this is not the exact code you're running, since that would log a
> traceback immediately.  Or, perhaps the fact that you're calling
> callWhenRunning from a non-main thread is blowing up in some more
> insidious way and that's the real problem.)

Sorry for the confusion. This *is* the correct code but blockingCallFromThread is
really IPython.twsitedutil.blockingCallFromThread that wraps
twisted.internet.threads.blockingCallFromThread passing the reactor as first arg.

thanks again for the valuable explanation

sandro
*:-)


-- 
Sandro Dentella  *:-)
http://www.reteisi.org             Soluzioni libere per le scuole
http://sqlkit.argolinux.org        SQLkit home page - PyGTK/python/sqlalchemy


From benjamin.bertrand at lfv.se  Mon Jan 17 06:24:47 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Mon, 17 Jan 2011 11:24:47 +0000
Subject: [Twisted-Python] Design advice
In-Reply-To: <AANLkTi=fBKFLEpK6yUmT5c1++x-1xjm+ys2a2ukV0NpN@mail.gmail.com>
References: <2C9A58914594E34AA28179DB776FABDF0E1B11B2@xw-exch05.lfv.se>
	<AANLkTi=fBKFLEpK6yUmT5c1++x-1xjm+ys2a2ukV0NpN@mail.gmail.com>
Message-ID: <2C9A58914594E34AA28179DB776FABDF0E1BC422@xw-exch04.lfv.se>

-----Ursprungligt meddelande-----
Fr?n: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] F?r Michael Thompson
Skickat: den 15 januari 2011 14:17
Till: Twisted general discussion
?mne: Re: [Twisted-Python] Design advice

> On 14 January 2011 14:56,  <benjamin.bertrand at lfv.se> wrote:
> > I see how I can tell a client to retrieve specific messages from the database to send them.
> > What I'm not sure about is the "live" part (sending messages coming from the external system). Note that when I say 
> "live", a small delay (up to 2-3 seconds) is not critical.

> Not too clear what you problem is but you could use some form of
> messaging from the server to the clients to inform them that a new
> message is available on the database, rather than them polling. Thrift
> or AMQP might meet your needs for this.

I think you pointed me to the right direction.
What I need is to do messages routing and it looks like txAMPQ is good way to do that.
Thanks.

Benjamin


From tenth at twistedmatrix.com  Tue Jan 18 21:46:23 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Tue, 18 Jan 2011 21:46:23 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
References: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
Message-ID: <AANLkTinTpS_L=ejX5P7qfUJAncZxFuetDU=RQjGzLygv@mail.gmail.com>

The Mini-Sprint was pretty successful... The seven attendees (and three
remote contributors) managed to close 12 tickets, and start work on a
several more.

The Official Report is here:
http://labs.twistedmatrix.com/2011/01/january-twisted-sprint-report.html

Hopefully we'll do this again soon! If you weren't on the invitation list
for the January sprint but would like to hear about our plans for February,
let me know. (I'll post again once we figure out a date.)

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110118/ee83e37c/attachment.htm 

From saghul at gmail.com  Wed Jan 19 18:55:50 2011
From: saghul at gmail.com (=?UTF-8?Q?Sa=C3=BAl_Ibarra_Corretg=C3=A9?=)
Date: Thu, 20 Jan 2011 00:55:50 +0100
Subject: [Twisted-Python]  (conch) credentials.signature always None?
Message-ID: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>

Hi all,

I'm experiencing something weird while writing a simple SSH server,
and I wonder if anyone did run into this before:

On every snippet I see around regarding public key authentication, the
signature is checked as follows:

#        if not credentials.signature:
#            return failure.Failure(ValidPublicKey())
#        try:
#            public_key = keys.Key.fromString(data=credentials.blob)
#        except (keys.BadKeyError, keys.EncryptedKeyError):
#            return failure.Failure(ConchError("Public key error"))

However, I'm always getting None there and thus the authentication
cannot proceed. I printed its value in the sshsimpleserver.py from the
examples directory and same seems to be happening, so I guess it's not
only my script :-S

Any clue?

Thanks in advance!

-- 
/Sa?l
http://saghul.net | http://sipdoc.net


From paulswartz at gmail.com  Wed Jan 19 19:06:11 2011
From: paulswartz at gmail.com (Paul Swartz)
Date: Wed, 19 Jan 2011 19:06:11 -0500
Subject: [Twisted-Python] (conch) credentials.signature always None?
In-Reply-To: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
References: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
Message-ID: <AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>

On Wed, Jan 19, 2011 at 6:55 PM, Sa?l Ibarra Corretg? <saghul at gmail.com> wrote:
> Hi all,
>
> I'm experiencing something weird while writing a simple SSH server,
> and I wonder if anyone did run into this before:
>
> On every snippet I see around regarding public key authentication, the
> signature is checked as follows:
>
> # ? ? ? ?if not credentials.signature:
> # ? ? ? ? ? ?return failure.Failure(ValidPublicKey())
> # ? ? ? ?try:
> # ? ? ? ? ? ?public_key = keys.Key.fromString(data=credentials.blob)
> # ? ? ? ?except (keys.BadKeyError, keys.EncryptedKeyError):
> # ? ? ? ? ? ?return failure.Failure(ConchError("Public key error"))

If it's not continuing, that's a problem with the other side.  What
happens with the SSH protocol is:

C: sends a message asking 'if this public key okay?' without sending
any signed data
S: says either "no it's not valid for this account" or "yes it is
valid, please prove you have the private key"
C: if yes, sign some data and send the signature; otherwise try a
different key or different authentication mechanism

The 'if not credentials.signature: return
failure.Failure(ValidPublicKey())' code is how the server tells the
client it's a valid key, but needs to prove it also has the public
key.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin


From saghul at gmail.com  Wed Jan 19 20:10:21 2011
From: saghul at gmail.com (=?UTF-8?Q?Sa=C3=BAl_Ibarra_Corretg=C3=A9?=)
Date: Thu, 20 Jan 2011 02:10:21 +0100
Subject: [Twisted-Python] (conch) credentials.signature always None?
In-Reply-To: <AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>
References: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
	<AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>
Message-ID: <AANLkTinY3dGGQgyoUT_ymRJPmiSQzxKqdgMPjX3TNYmQ@mail.gmail.com>

Hi Paul,

Thanks for that quick response!

On Thu, Jan 20, 2011 at 1:06 AM, Paul Swartz <paulswartz at gmail.com> wrote:
> On Wed, Jan 19, 2011 at 6:55 PM, Sa?l Ibarra Corretg? <saghul at gmail.com> wrote:
>> Hi all,
>>
>> I'm experiencing something weird while writing a simple SSH server,
>> and I wonder if anyone did run into this before:
>>
>> On every snippet I see around regarding public key authentication, the
>> signature is checked as follows:
>>
>> # ? ? ? ?if not credentials.signature:
>> # ? ? ? ? ? ?return failure.Failure(ValidPublicKey())
>> # ? ? ? ?try:
>> # ? ? ? ? ? ?public_key = keys.Key.fromString(data=credentials.blob)
>> # ? ? ? ?except (keys.BadKeyError, keys.EncryptedKeyError):
>> # ? ? ? ? ? ?return failure.Failure(ConchError("Public key error"))
>
> If it's not continuing, that's a problem with the other side. ?What
> happens with the SSH protocol is:
>
> C: sends a message asking 'if this public key okay?' without sending
> any signed data
> S: says either "no it's not valid for this account" or "yes it is
> valid, please prove you have the private key"
> C: if yes, sign some data and send the signature; otherwise try a
> different key or different authentication mechanism
>
> The 'if not credentials.signature: return
> failure.Failure(ValidPublicKey())' code is how the server tells the
> client it's a valid key, but needs to prove it also has the public
> key.
>

My test was done wrong, my bad :-S I tested again and finally found
the issue: I'm searching for the user's key in a DB and errors are
handled in a errback. So ValidPublicKey was also handled there,
incorrectly.

I fixed it by doing the following:

    def _got_keys_error(self, error, credentials):
        if not error.check(ValidPublicKey):
            return
failure.Failure(ConchError(error.getErrorMessage()))

So now it does work :-)

Thanks and regards,

-- 
/Sa?l
http://saghul.net | http://sipdoc.net


From glyph at twistedmatrix.com  Thu Jan 20 00:18:08 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Jan 2011 00:18:08 -0500
Subject: [Twisted-Python] (conch) credentials.signature always None?
In-Reply-To: <AANLkTinY3dGGQgyoUT_ymRJPmiSQzxKqdgMPjX3TNYmQ@mail.gmail.com>
References: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
	<AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>
	<AANLkTinY3dGGQgyoUT_ymRJPmiSQzxKqdgMPjX3TNYmQ@mail.gmail.com>
Message-ID: <80AB6A98-DF8A-4255-87DC-6C199186E656@twistedmatrix.com>

On Jan 19, 2011, at 8:10 PM, Sa?l Ibarra Corretg? wrote:

> I fixed it by doing the following:
> 
>    def _got_keys_error(self, error, credentials):
>        if not error.check(ValidPublicKey):
>            return failure.Failure(ConchError(error.getErrorMessage()))

Are you sure that's what you want?  If you just say "I don't want to handle anything except FooError", i.e. the asynchronous equivalent to "except FooError", it's like this:

def myErrback(self, f):
    f.trap(FooError)
    # ... handle it ...


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/3b6e264a/attachment.htm 

From tom at recursivedream.com  Thu Jan 20 01:10:16 2011
From: tom at recursivedream.com (Tom Davis)
Date: Thu, 20 Jan 2011 01:10:16 -0500
Subject: [Twisted-Python] Refactoring Documentation
Message-ID: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>

I've been using (and threatening to work on) Twisted for a few years now. It
seems like every time I get back into it, I need to dig up old code or
Google queries just to get started. Yesterday, Jean-Paul introduced me to
the trial-tutorial
branch<http://twistedmatrix.com/trac/browser/branches/trial-tutorial-2443-2>
which
has shed some light on the basics of using trial and testing Twisted
client/server applications in general. Until he mentioned it in IRC, I was
stuck looking at the actual tests for protocols and deciding which parts of
that were generically useful to me. I agreed to finish up that documentation
so that it could finally (four years later) be added to trunk (and more
importantly, twistedmatrix.com). But after thinking about it, I believe the
problem runs much deeper than just the lack of a branch merge.

Reading code to find answers isn't rocket science; I've been programming
long enough to be comfortable doing it. But I probably have to resort to
reading Twisted's code about 8 billion percent more often than any other
codebase. And reading code is a hurdle. Reading through Twisted's
semi-random, 45-point FAQ is a hurdle?and recommending it as a starting
point is unhelpful at best. The core documentation isn't awesome either,
given that it has a tendency to be overly cryptic and link to API
documentation that is often incomplete or generally unhelpful.

As one very basic example, see:
http://twistedmatrix.com/documents/current/core/howto/servers.html. Let's
just review a few things wrong with this page:

   - It's tutorial page #1, but basically tells me I need to read
   howto/plugins.html first if I am writing an "application" (whatever that
   is), as opposed to a "TCP, SSL, and Unix socket server". And it's the wrong
   place for UDP.
   - It attempts to introduce Protocols and Factories?two of Twisted's most
   important concepts?and does neither particularly well. I know that Protocols
   (usually) inherit from t.i.p.Protocol and may be instantiated for a variety
   of reasons and aren't (usually) persistent. I also know that Factories
   instantiate Protocols and give a reference to themselves so protocols can
   "access and modify the persistent configuration". I am told I need to
   implement some interface (or something) to actually listen on a host/port. I
   think.
   - At one point "TCP4ServerEndpoint" is instantiated (but never imported);
   its explanation is left to a digression into the endpoints API, which has
   its own issues. Suffice it to say the document doesn't give me sufficient
   reason to actually use the endpoints API.
   - Later on, we just use reactor.listenTCP()?which our previous digression
   (if bothered to click through and read) claims is not preferable.

By the end of the *servers* tutorial (and after reading some linked
documentation), here's all I *really* know:

   1. Factories create protocols somehow
   2. Protocols have methods like connectionMade, connectionLost, and
   dataReceived to handle events
   3. There are other protocols with other methods. One that I know of,
   anyway.
   4. I may need to write a state machine (???)
   5. I should use an Endpoint or maybe a Service or reactor (but probably
   not!)
   6. I should also use Application for serious business

Moving forward, howto/clients.html duplicates a lot of these things and
fills in some gaps in knowledge while creating more holes. Meanwhile, I
still never wanted to create a QOTD or Echo server.

I think the point has been made. My *real* point, though, is that I love
Twisted. And I'm constantly wishing it was more accessible to newcomers.
Twisted is Python's oldest and most mature event-based networking engine and
despite its decade of existence it remains largely confusing and obscure to
the majority of Python programmers who come upon it. It contains concepts
and standards that are alien to the average Python programmer, but they make
a lot of sense and have a lot more consistency and predictability than the
documentation conveys.

I want to fix that, among other things. And as luck may have it, I like
writing documentation. And I know at least enough Twisted to get the
high-level stuff in order and improve the documentation to the point that
people will keep reading long enough to make sense of the "idea of Twisted"
and be able to implement some basic things and expand upon them later.

There are some things I *do* want to accomplish early on:

   - Make the docs accessible (a lot is hidden and hard to find)
   - Make them more concise and useful to somebody who doesn't want to know
   the 50 different ways to skin every cat (including the ones you should never
   use)
   - Make them introduce and explain Twisted in a way that somebody as dumb
   as me can understand it. This means talking about protocols, factories,
   deferreds, etc. in a way that doesn't require thousands of words of circular
   explanations, digressions, and duplications.
   - Document the different Twisted projects as what they are: really useful
   libraries and/or clients/servers built on top of Twisted that just so
   happens to also ship with the core. One of them is likely to do what the
   prospective user wants, too.

There are also some things I *don't* want to accomplish, at least initially:

   - Explain asynchronous programming in depth
   - Get into the level of detail that the Krondo series does (but I plan to
   borrow from it!)

There are things I'll *need help with*:

   - The final word on what is/isn't to be used in what context; practical,
   real-world explanations of why I would use A instead of B (not just "it's
   more flexible").
   - Better documentation from project creators/maintainers/lovers on their
   project. These projects make a lot of hard stuff trivial and many do not
   convey that very well. I'll do my best to reorganize and improve the
   existing documentation, but most of the projects cater to a specific niche
   that requires its own core knowledge.


Most of this was discussed with Jean-Paul and Glyph at tonight's Python
meet-up in Cambridge. Some work has already begun on the new docs here:

https://github.com/tdavis/twisted-docs

I hope the above came off as optimistic and constructive as I meant it: it's
not my intention to insult the documentation or those who wrote it. I just
think with a dose of hindsight and a lot of effort, the docs can be awesome.
And they would improve the entire Twisted ecosystem along with them.


Cheers,

Tom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/b8a47686/attachment-0001.htm 

From saghul at gmail.com  Thu Jan 20 01:56:51 2011
From: saghul at gmail.com (=?UTF-8?Q?Sa=C3=BAl_Ibarra_Corretg=C3=A9?=)
Date: Thu, 20 Jan 2011 07:56:51 +0100
Subject: [Twisted-Python] (conch) credentials.signature always None?
In-Reply-To: <80AB6A98-DF8A-4255-87DC-6C199186E656@twistedmatrix.com>
References: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
	<AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>
	<AANLkTinY3dGGQgyoUT_ymRJPmiSQzxKqdgMPjX3TNYmQ@mail.gmail.com>
	<80AB6A98-DF8A-4255-87DC-6C199186E656@twistedmatrix.com>
Message-ID: <AANLkTin-tLaVnj=ZN8KR=uXV48hWs3pRfWBPHpOQ4Fow@mail.gmail.com>

On Thu, Jan 20, 2011 at 6:18 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Jan 19, 2011, at 8:10 PM, Sa?l Ibarra Corretg? wrote:
>
> I fixed it by doing the following:
>
> ???def _got_keys_error(self, error, credentials):
> ???????if not error.check(ValidPublicKey):
> ?? ? ? ? ? return?failure.Failure(ConchError(error.getErrorMessage()))
>
> Are you sure that's what you want? ?If you just say "I don't want to handle
> anything except FooError", i.e. the asynchronous equivalent to "except
> FooError", it's like this:
> def myErrback(self, f):
> ?? ?f.trap(FooError)
> ?? ?# ... handle it ...
>

In this case I could get here (the errback) for several reasons,
depending on the DB backend, for example. I guess I could trap and all
the cases but ValidPrivateKey, but in this case I know for sure I want
ValidPrivateKey to be ignored, that's why I reversed the order. Or am
I missing something here?

Thanks!

-- 
/Sa?l
http://saghul.net | http://sipdoc.net


From glyph at twistedmatrix.com  Thu Jan 20 02:07:38 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Jan 2011 02:07:38 -0500
Subject: [Twisted-Python] (conch) credentials.signature always None?
In-Reply-To: <AANLkTin-tLaVnj=ZN8KR=uXV48hWs3pRfWBPHpOQ4Fow@mail.gmail.com>
References: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
	<AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>
	<AANLkTinY3dGGQgyoUT_ymRJPmiSQzxKqdgMPjX3TNYmQ@mail.gmail.com>
	<80AB6A98-DF8A-4255-87DC-6C199186E656@twistedmatrix.com>
	<AANLkTin-tLaVnj=ZN8KR=uXV48hWs3pRfWBPHpOQ4Fow@mail.gmail.com>
Message-ID: <C8C0D50E-FE06-411F-B0A5-00DAE772BFBA@twistedmatrix.com>


On Jan 20, 2011, at 1:56 AM, Sa?l Ibarra Corretg? wrote:

> In this case I could get here (the errback) for several reasons,
> depending on the DB backend, for example. I guess I could trap and all
> the cases but ValidPrivateKey, but in this case I know for sure I want
> ValidPrivateKey to be ignored, that's why I reversed the order. Or am
> I missing something here?

Nope, it sounds like you know what you're doing.  The example just looked slightly fishy (there wasn't quite enough there for me to really know what you were doing) and I wanted to make sure you were familiar with the usual idiom.  Sorry for the false alarm!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/aa359ac1/attachment.htm 

From kevin.horn at gmail.com  Thu Jan 20 02:36:30 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 01:36:30 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
Message-ID: <AANLkTim=VnLWbpkZTJ+3pU7vG98xFr1YiYtorJLz5cvt@mail.gmail.com>

On Thu, Jan 20, 2011 at 12:10 AM, Tom Davis <tom at recursivedream.com> wrote:

> I've been using (and threatening to work on) Twisted for a few years now.
> It seems like every time I get back into it, I need to dig up old code or
> Google queries just to get started. Yesterday, Jean-Paul introduced me to
> the trial-tutorial branch<http://twistedmatrix.com/trac/browser/branches/trial-tutorial-2443-2> which
> has shed some light on the basics of using trial and testing Twisted
> client/server applications in general. Until he mentioned it in IRC, I was
> stuck looking at the actual tests for protocols and deciding which parts of
> that were generically useful to me. I agreed to finish up that documentation
> so that it could finally (four years later) be added to trunk (and more
> importantly, twistedmatrix.com). But after thinking about it, I believe
> the problem runs much deeper than just the lack of a branch merge.
>
> Reading code to find answers isn't rocket science; I've been programming
> long enough to be comfortable doing it. But I probably have to resort to
> reading Twisted's code about 8 billion percent more often than any other
> codebase. And reading code is a hurdle. Reading through Twisted's
> semi-random, 45-point FAQ is a hurdle?and recommending it as a starting
> point is unhelpful at best. The core documentation isn't awesome either,
> given that it has a tendency to be overly cryptic and link to API
> documentation that is often incomplete or generally unhelpful.
>
> As one very basic example, see:
> http://twistedmatrix.com/documents/current/core/howto/servers.html. Let's
> just review a few things wrong with this page:
>
>    - It's tutorial page #1, but basically tells me I need to read
>    howto/plugins.html first if I am writing an "application" (whatever that
>    is), as opposed to a "TCP, SSL, and Unix socket server". And it's the wrong
>    place for UDP.
>    - It attempts to introduce Protocols and Factories?two of Twisted's
>    most important concepts?and does neither particularly well. I know that
>    Protocols (usually) inherit from t.i.p.Protocol and may be instantiated for
>    a variety of reasons and aren't (usually) persistent. I also know that
>    Factories instantiate Protocols and give a reference to themselves so
>    protocols can "access and modify the persistent configuration". I am told I
>    need to implement some interface (or something) to actually listen on a
>    host/port. I think.
>    - At one point "TCP4ServerEndpoint" is instantiated (but never
>    imported); its explanation is left to a digression into the endpoints API,
>    which has its own issues. Suffice it to say the document doesn't give me
>    sufficient reason to actually use the endpoints API.
>    - Later on, we just use reactor.listenTCP()?which our previous
>    digression (if bothered to click through and read) claims is not preferable.
>
> By the end of the *servers* tutorial (and after reading some linked
> documentation), here's all I *really* know:
>
>    1. Factories create protocols somehow
>    2. Protocols have methods like connectionMade, connectionLost, and
>    dataReceived to handle events
>    3. There are other protocols with other methods. One that I know of,
>    anyway.
>    4. I may need to write a state machine (???)
>    5. I should use an Endpoint or maybe a Service or reactor (but probably
>    not!)
>    6. I should also use Application for serious business
>
> Moving forward, howto/clients.html duplicates a lot of these things and
> fills in some gaps in knowledge while creating more holes. Meanwhile, I
> still never wanted to create a QOTD or Echo server.
>
> I think the point has been made. My *real* point, though, is that I love
> Twisted. And I'm constantly wishing it was more accessible to newcomers.
> Twisted is Python's oldest and most mature event-based networking engine and
> despite its decade of existence it remains largely confusing and obscure to
> the majority of Python programmers who come upon it. It contains concepts
> and standards that are alien to the average Python programmer, but they make
> a lot of sense and have a lot more consistency and predictability than the
> documentation conveys.
>
> I want to fix that, among other things. And as luck may have it, I like
> writing documentation. And I know at least enough Twisted to get the
> high-level stuff in order and improve the documentation to the point that
> people will keep reading long enough to make sense of the "idea of Twisted"
> and be able to implement some basic things and expand upon them later.
>
> There are some things I *do* want to accomplish early on:
>
>    - Make the docs accessible (a lot is hidden and hard to find)
>    - Make them more concise and useful to somebody who doesn't want to
>    know the 50 different ways to skin every cat (including the ones you should
>    never use)
>    - Make them introduce and explain Twisted in a way that somebody as
>    dumb as me can understand it. This means talking about protocols, factories,
>    deferreds, etc. in a way that doesn't require thousands of words of circular
>    explanations, digressions, and duplications.
>    - Document the different Twisted projects as what they are: really
>    useful libraries and/or clients/servers built on top of Twisted that just so
>    happens to also ship with the core. One of them is likely to do what the
>    prospective user wants, too.
>
> There are also some things I *don't* want to accomplish, at least
> initially:
>
>    - Explain asynchronous programming in depth
>    - Get into the level of detail that the Krondo series does (but I plan
>    to borrow from it!)
>
> There are things I'll *need help with*:
>
>    - The final word on what is/isn't to be used in what context;
>    practical, real-world explanations of why I would use A instead of B (not
>    just "it's more flexible").
>    - Better documentation from project creators/maintainers/lovers on
>    their project. These projects make a lot of hard stuff trivial and many do
>    not convey that very well. I'll do my best to reorganize and improve the
>    existing documentation, but most of the projects cater to a specific niche
>    that requires its own core knowledge.
>
>
> Most of this was discussed with Jean-Paul and Glyph at tonight's Python
> meet-up in Cambridge. Some work has already begun on the new docs here:
>
> https://github.com/tdavis/twisted-docs
>
> I hope the above came off as optimistic and constructive as I meant it:
> it's not my intention to insult the documentation or those who wrote it. I
> just think with a dose of hindsight and a lot of effort, the docs can be
> awesome. And they would improve the entire Twisted ecosystem along with
> them.
>
>
> Cheers,
>
> Tom
>
>
Tom,

I very much like this idea, and in fact I have some ideas for this, but I've
been putting off doing anything about it until the (neraly done! really!)
conversion of the current documentation to Sphinx is complete (see ticket
#4500).  I got off track with that the last part of last year, but one of my
New Year's Resolutions is to complete that project.

How can we combine these efforts, or at least keep from working at cross
purposes?

I see from your link above that you are building your own Sphinx project.
Perhaps you would be better off working from the results of the Lore2sphinx
conversion?  Are you modifying existing docs or working from scratch?

Let's get together on this!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/7f65e0d4/attachment.htm 

From glyph at twistedmatrix.com  Thu Jan 20 02:55:48 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Jan 2011 02:55:48 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
Message-ID: <FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>

Let me begin by saying that I'm _very_ excited about this prospect and I'm looking forward to the output of this project.  So, some of what I'm about to say may sound like harsh criticism but please do not let it discourage you.  I agree with pretty much everything you're saying about problems with the current documentation.  They need to be fixed.  I'm offering criticism at this early stage in the hopes that it will be useful and feed into your project, not in the hopes that it will stop you.

On Jan 20, 2011, at 1:10 AM, Tom Davis wrote:

> I've been using (and threatening to work on) Twisted for a few years now. It seems like every time I get back into it, I need to dig up old code or Google queries just to get started. Yesterday, Jean-Paul introduced me to the trial-tutorial branch which has shed some light on the basics of using trial and testing Twisted client/server applications in general. Until he mentioned it in IRC, I was stuck looking at the actual tests for protocols and deciding which parts of that were generically useful to me. I agreed to finish up that documentation so that it could finally (four years later) be added to trunk (and more importantly, twistedmatrix.com). But after thinking about it, I believe the problem runs much deeper than just the lack of a branch merge.

Yet, the problem _starts_ with a branch merge.

There are many outstanding documentation branches which are substantial improvements, which need to be edited and merged - the trial tutorial among them.  It would be great if your efforts could start with getting those landed, turning the crank on the process to get our users better documentation in the interim, as you survey the existing documentation.
> Factories create protocols somehow
> Protocols have methods like connectionMade, connectionLost, and dataReceived to handle events
> There are other protocols with other methods. One that I know of, anyway.
> I may need to write a state machine (???)
> I should use an Endpoint or maybe a Service or reactor (but probably not!)
> I should also use Application for serious business
> Moving forward, howto/clients.html duplicates a lot of these things and fills in some gaps in knowledge while creating more holes. Meanwhile, I still never wanted to create a QOTD or Echo server.
> 
> I think the point has been made.

This kind of tear-down is pretty easy: I'd really like to hear your idea of its inverse, though.  What should a newcomer who reads this document know by the end of it?  A massive pile of improved documentation would of course be useful, but a good start would be a clear statement of requirements and audience.  (As well as an enumeration of different audiences that different documents might serve.)

> My real point, though, is that I love Twisted. And I'm constantly wishing it was more accessible to newcomers. Twisted is Python's oldest and most mature event-based networking engine

(minor nitpick: I really like "event-based" or "event-driven", as you've said here: why does <http://docs.recursivedream.com/twisted/> say "asynchronous"? I find that especially in documentation it's a lot easier to explain "event-driven", because you can enumerate what the events are, instead of explaining the etymology of "synchronicity"...)

> I want to fix that, among other things. And as luck may have it, I like writing documentation. And I know at least enough Twisted to get the high-level stuff in order and improve the documentation to the point that people will keep reading long enough to make sense of the "idea of Twisted" and be able to implement some basic things and expand upon them later.
> 
> There are some things I do want to accomplish early on:
> Make the docs accessible (a lot is hidden and hard to find)
> Make them more concise and useful to somebody who doesn't want to know the 50 different ways to skin every cat (including the ones you should never use)
> Make them introduce and explain Twisted in a way that somebody as dumb as me can understand it. This means talking about protocols, factories, deferreds, etc. in a way that doesn't require thousands of words of circular explanations, digressions, and duplications.
> Document the different Twisted projects as what they are: really useful libraries and/or clients/servers built on top of Twisted that just so happens to also ship with the core. One of them is likely to do what the prospective user wants, too.
These all sound like excellent goals.

> There are also some things I don't want to accomplish, at least initially:
> Explain asynchronous programming in depth
> Get into the level of detail that the Krondo series does (but I plan to borrow from it!)
> There are things I'll need help with:
> The final word on what is/isn't to be used in what context; practical, real-world explanations of why I would use A instead of B (not just "it's more flexible").
You will probably have to press us core developers on this one, and you may spark some debates.  These tend to sputter out with no clear resolution as everyone is frustrated that nobody's solution (not even their own) is ideal, but you would be doing us all a great service if you really forced us to develop a consensus about certain things (like "what's the best way to build a twisted command-line program", for example) and agree to agree on the current documented "best practice" for those things.
> Better documentation from project creators/maintainers/lovers on their project. These projects make a lot of hard stuff trivial and many do not convey that very well. I'll do my best to reorganize and improve the existing documentation, but most of the projects cater to a specific niche that requires its own core knowledge.
The biggest problem with this is that you will find that a very small group of people have created the vast majority of this stuff and don't have time to maintain it all any more :).  We certainly don't have a separate dedicated maintainer for each project (although I really wish we could get to that point).

> Most of this was discussed with Jean-Paul and Glyph at tonight's Python meet-up in Cambridge. Some work has already begun on the new docs here:
> 
> https://github.com/tdavis/twisted-docs

There have been several abortive efforts to do something grand to re-invent all of the Twisted documentation in the universe, or a complete overhaul of the website, including several false starts that I've made, and most recently the (somewhat arduous, arguably "mostly complete" (fingers crossed on that one)) attempt to do a sphinx migration.

By the way, it seemed tonight that you weren't that familiar with the existing Sphinx efforts, so you may want to have a look at this and see if it is an improvement on our existing documentation index:

	http://twistedsphinx.funsize.net/contents.html

(I was going to point you at the output of the buildbot, but it looks like something in trunk has broken the conversion process.  Anyone know what this is about? <http://buildbot.twistedmatrix.com/builds/sphinx-html-15724/contents.html>)

I'm really glad to see that Kevin beat me to the punch on posting his reply though, hopefully we'll see this moving along soon :).

Before you continue too much further in that github repository though, please, consider this:

~/Projects/Twisted/trunk/doc$ find conch core mail names pair web words -name '*.xhtml' -or -name '*.py' | xargs wc -l
    .
    .
    .
   28836 total

That's 28 thousand lines of documentation and sample code.  It might not all be the best documentation, but some of it is quite good.  Jean-Paul's "twisted web in 60 seconds" tutorial is in there, and that's definitely worth reading.  Would you volunteer to rewrite 28 thousand lines of code all at once?  Or submit a 28 thousand line patch for review?  As problematic as the current situation is, there is a definite potential for some baby vs. bathwater confusion in improving it.

I am open to the idea that documentation needs different review practices from code, and there are things about documentation (like narrative flow) which are impossible to automatically verify and may require significant changes at multiple layers simultaneously.  These features may not have an obvious parallel in code - which can typically be evolved incrementally, despite the occasional frustrated lament that everything needs to be rewritten.

But, parts of the documentation are code.  Another major problem with the current documentation is that it is out of date.  We know when code goes out of date because it starts raising exceptions and emitting warnings from our test suite, but we only find out about documentation examples are going out of date when we do a release and some poor soul encounters an error when trying to follow along.  I'd really like any effort that undertakes to substantially change the structure of the documentation to make a concerted effort to hit the ground running with test-driven examples which can be automatically verified, so that we have some idea of the impact of code changes on the docs.

Also, while you're energized now, please consider what happens to our documentation efforts if you run out of time or out of motivation halfway through this process.  Incremental improvements may not necessarily provide the best outcome, but they _do_ mean that users get to see some results from these volunteer efforts even if the original volunteer gets busy with other aspects of life and can't complete their project.  Many of your bullet-points above are well suited to individual efforts (some of which are actually issues with the web site, rather than the documentation per se).

I'd like to suggest that, at the very least, you create a branch of Twisted (perhaps on Launchpad?) and integrate your work into the doc/ hierarchy of the current tree.  That way, at least, it would be easier for someone else to pick up where you've left off and fold things into the right place.  This would also provide a way to more easily integrate the doc test suite into the main test suite on our existing build and release infrastructure.

> I hope the above came off as optimistic and constructive as I meant it: it's not my intention to insult the documentation or those who wrote it. I just think with a dose of hindsight and a lot of effort, the docs can be awesome. And they would improve the entire Twisted ecosystem along with them.

Indeed, as the author of many of these original documents, I did not feel insulted in either my person or my work :).  Hopefully you didn't feel that way either after reading this reply!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/90887aa9/attachment-0001.htm 

From albert.brandl at weiermayer.com  Thu Jan 20 06:32:22 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Thu, 20 Jan 2011 12:32:22 +0100
Subject: [Twisted-Python] Question about SerialPort
Message-ID: <20110120113222.GA13772@weiermayer.com>

Hi!

I am trying to read Modbus RTU messages over the serial line. There is a
library called pyModbus which is very usable for Modbus TCP/IP, but the
support for RTU is a bit lacking.

The main problem seems to be the specification of Modbus RTU. RTU
messages are separated by time gaps that are at least 3.5 characters
long. Unfortunately, this is the only reliable way for separating
messages - there is no length header or something similar. The
specification does define a trailing CRC, though.

As far as I understand the event loop, I will not be able to guarantee 
that will not miss such a gap - the reactor might be busy handling some 
other events while the gap arrives. 

But when the reactor assigns some time to read from the serial port, I'd 
like it to read until the gap is detected. My current attempt is to 
override the doRead method of SerialPort by something like this:

    def doRead(self):
        port = self.fileno()
        result = []
        while True:
            # The following code is stolen from fdesc.readFromFD
            try:
                output = os.read(port, 1)
                if output:
                    result.append(output)
                else:
                    break
            except (OSError, IOError), ioe:
                if ioe.args[0] in (errno.EAGAIN, errno.EINTR):
                    return
                else:
                    return CONNECTION_LOST
        if not result:
            return CONNECTION_DONE
        else:
            self.protocol.rawDataReceived("".join(result))

If the serial port is configured with a timeout about the size of the
gap, os.read() should return an empty string, thus indicating that
the message is complete.

Most of the code above is a copy of t.i.fdesc.readFromFD. The main 
difference is that I don't read 8192 bytes, but only one at a time,
to detect a time gap.

Does this make sense? Do you think it would be possible to replace the 
constant 8192 in readFromFD by a parameter (that defaults to 8192)? This 
would allow me to replace the content of the while loop with a simple 
function call.

TIA and best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From foom at fuhm.net  Thu Jan 20 08:42:58 2011
From: foom at fuhm.net (James Y Knight)
Date: Thu, 20 Jan 2011 08:42:58 -0500
Subject: [Twisted-Python] Question about SerialPort
In-Reply-To: <20110120113222.GA13772@weiermayer.com>
References: <20110120113222.GA13772@weiermayer.com>
Message-ID: <CEB2B268-90DA-4861-9B00-F792E4B10C0C@fuhm.net>

On Jan 20, 2011, at 6:32 AM, Albert Brandl wrote:
> The main problem seems to be the specification of Modbus RTU. RTU
> messages are separated by time gaps that are at least 3.5 characters
> long. Unfortunately, this is the only reliable way for separating
> messages - there is no length header or something similar. The
> specification does define a trailing CRC, though.

I don't think you'll ever be able to do this reliably in Python. At 9600 baud, 3.5 characters is just about 275hz (9600/10/3.5). Linux schedules process at around 500hz. So, unless you use real-time scheduling, I think you have no guarantee that you'll be able to detect such a gap at all -- some other process may be running and you may completely miss it. And you can't reasonably use real-time scheduling in python...

On the other hand, are you sure you need this? http://www.libmodbus.org/ seems to have code which figures out what length packets should be, and no code to detect a 3.5char delay between packets. That seems much more reliable.

It also doesn't seem to have any code to ensure a 3.5char between sent packets, which indicates to me that either it's totally brokem or else that not even the hardware end actually uses a 3.5char delay to determine packet boundaries...I'd guess the second, since even on an embedded CPU, it's much trickier to ensure the appropriate serial port timing than to simply count the correct number of bytes.

James



From jrennie at gmail.com  Thu Jan 20 08:57:51 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Thu, 20 Jan 2011 08:57:51 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
Message-ID: <AANLkTikpNEqa2-7XFLW=u70kZy3iqzz2VvbifUUew87M@mail.gmail.com>

On Thu, Jan 20, 2011 at 2:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> (minor nitpick: I really like "event-based" or "event-driven", as you've
> said here: why does <http://docs.recursivedream.com/twisted/> say
> "asynchronous"? I find that especially in documentation it's a lot easier to
> explain "event-driven", because you can enumerate what the events are,
> instead of explaining the etymology of "synchronicity"...)
>

I was also surprised by the choice of "asynchronous".  From wikipedia:

In programming, asynchronous events are those occurring independently of the
> main program flow. Asynchronous actions are actions executed in a
> non-blocking scheme, allowing the main program flow to continue processing.


My understanding is that this is the opposite of what twisted is.  The
reactor hands-off control and must wait until control is relinquished.  It
handles events when it checks for them, not necessarily when they happen.
 The reactor and application code blocks, possibly halting the entire
application if it is not written cooperatively.

This was a major point of confusion for me when I started to use twisted.  I
see that if I had carefully read the first few sentences under "Reactor
Basics" in
http://twistedmatrix.com/documents/current/core/howto/reactor-basics.html, I
might not have been so confused.  But, this is one of about 50 links on the
"core" documentation page, which is one of about 20 links on the main
documentation page.  I'm guessing that simply editing and reorganizing
existing documentation would go a long way toward fixing the documentation
problem.

Personally, I'd love to see documentation organization that mimics Python's,
especially the Tutorial/Library Reference/Language Reference breakdown.
 Users tend to know the level of understanding they are looking for and
Python's documentation reflects that.

Cheers,

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/ea0b3616/attachment.htm 

From vic.norman at gmail.com  Thu Jan 20 09:43:24 2011
From: vic.norman at gmail.com (Victor Norman)
Date: Thu, 20 Jan 2011 09:43:24 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTikpNEqa2-7XFLW=u70kZy3iqzz2VvbifUUew87M@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTikpNEqa2-7XFLW=u70kZy3iqzz2VvbifUUew87M@mail.gmail.com>
Message-ID: <AANLkTikUrwvSQ4kuQ8ss7xNUF0sNnckr9RpRizrcTx4d@mail.gmail.com>

Hear! Hear!

My major disappointment with Twisted is its documentation.  I've used many
many packages over the years, some with books and books of documentation (HP
OpenView, e.g.), but I've never encountered a package with poorer help for a
newbie.

I finally started to get it when I stumbled upon
http://krondo.com/blog/?page_id=1327.  This has to be one of the best
tutorials I've seen on any topic.  It should be the *first* link in any
Twisted tutorial, IMO.

Vic

On Thu, Jan 20, 2011 at 8:57 AM, Jason Rennie <jrennie at gmail.com> wrote:

> On Thu, Jan 20, 2011 at 2:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>> (minor nitpick: I really like "event-based" or "event-driven", as you've
>> said here: why does <http://docs.recursivedream.com/twisted/> say
>> "asynchronous"? I find that especially in documentation it's a lot easier to
>> explain "event-driven", because you can enumerate what the events are,
>> instead of explaining the etymology of "synchronicity"...)
>>
>
> I was also surprised by the choice of "asynchronous".  From wikipedia:
>
> In programming, asynchronous events are those occurring independently of
>> the main program flow. Asynchronous actions are actions executed in a
>> non-blocking scheme, allowing the main program flow to continue processing.
>
>
> My understanding is that this is the opposite of what twisted is.  The
> reactor hands-off control and must wait until control is relinquished.  It
> handles events when it checks for them, not necessarily when they happen.
>  The reactor and application code blocks, possibly halting the entire
> application if it is not written cooperatively.
>
> This was a major point of confusion for me when I started to use twisted.
>  I see that if I had carefully read the first few sentences under "Reactor
> Basics" in
> http://twistedmatrix.com/documents/current/core/howto/reactor-basics.html,
> I might not have been so confused.  But, this is one of about 50 links on
> the "core" documentation page, which is one of about 20 links on the main
> documentation page.  I'm guessing that simply editing and reorganizing
> existing documentation would go a long way toward fixing the documentation
> problem.
>
> Personally, I'd love to see documentation organization that mimics
> Python's, especially the Tutorial/Library Reference/Language Reference
> breakdown.  Users tend to know the level of understanding they are looking
> for and Python's documentation reflects that.
>
> Cheers,
>
> Jason
>
> --
> Jason Rennie
> Research Scientist, ITA Software
> 617-714-2645
> http://www.itasoftware.com/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
?A designer knows he has achieved perfection not when there is nothing left
to add, but when there is nothing left to take away.? -- Antoine de Saint
Exup?ry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/bf0c9c00/attachment.htm 

From albert.brandl at weiermayer.com  Thu Jan 20 10:18:26 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Thu, 20 Jan 2011 16:18:26 +0100
Subject: [Twisted-Python] Question about SerialPort
In-Reply-To: <CEB2B268-90DA-4861-9B00-F792E4B10C0C@fuhm.net>
References: <20110120113222.GA13772@weiermayer.com>
	<CEB2B268-90DA-4861-9B00-F792E4B10C0C@fuhm.net>
Message-ID: <20110120151826.GB21934@weiermayer.com>

On Thu, Jan 20, 2011 at 08:42:58AM -0500, James Y Knight wrote:

> I don't think you'll ever be able to do this reliably in Python. At 
> 9600 baud, 3.5 characters is just about 275hz (9600/10/3.5). Linux 
> schedules process at around 500hz.

Well, that's bad news - I'll have to communicate with the SPS at 38400 
baud :-(...

> On the other hand, are you sure you need this? 
> http://www.libmodbus.org/ seems to have code which figures out what 
> length packets should be, and no code to detect a 3.5char delay between 
> packets. That seems much more reliable.

Thanks for the hint - I'll have a look. The code seems quite readable,
although I don't exactly _love_ reading C sources. But the idea that
one might still find out where a modbus message ends is intriguing -
I don't yet see how this might work.

> It also doesn't seem to have any code to ensure a 3.5char between sent 
> packets

Not sure about this - there is a structure called ctx which has a 
timeout_begin->tv_sec and timeout_begin->tv_usec (and a similar thing for 
timeout_end). On the first glance, this looks like variables for handling
the boundary. But I might be wrong.

Thanks & best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From jvalenzuela1977 at gmail.com  Thu Jan 20 11:34:52 2011
From: jvalenzuela1977 at gmail.com (Jason Valenzuela)
Date: Fri, 21 Jan 2011 00:34:52 +0800
Subject: [Twisted-Python] Question about SerialPort
In-Reply-To: <CEB2B268-90DA-4861-9B00-F792E4B10C0C@fuhm.net>
References: <20110120113222.GA13772@weiermayer.com>
	<CEB2B268-90DA-4861-9B00-F792E4B10C0C@fuhm.net>
Message-ID: <4D38642C.7010007@gmail.com>

On 1/20/2011 9:42 PM, James Y Knight wrote:
> On Jan 20, 2011, at 6:32 AM, Albert Brandl wrote:
>> The main problem seems to be the specification of Modbus RTU. RTU
>> messages are separated by time gaps that are at least 3.5 characters
>> long. Unfortunately, this is the only reliable way for separating
>> messages - there is no length header or something similar. The
>> specification does define a trailing CRC, though.
>
> I don't think you'll ever be able to do this reliably in Python. At 9600 baud, 3.5 characters is just about 275hz (9600/10/3.5). Linux schedules process at around 500hz. So, unless you use real-time scheduling, I think you have no guarantee that you'll be able to detect such a gap at all -- some other process may be running and you may completely miss it. And you can't reasonably use real-time scheduling in python...
>
> On the other hand, are you sure you need this? http://www.libmodbus.org/ seems to have code which figures out what length packets should be, and no code to detect a 3.5char delay between packets. That seems much more reliable.
>
> It also doesn't seem to have any code to ensure a 3.5char between sent packets, which indicates to me that either it's totally brokem or else that not even the hardware end actually uses a 3.5char delay to determine packet boundaries...I'd guess the second, since even on an embedded CPU, it's much trickier to ensure the appropriate serial port timing than to simply count the correct number of bytes.


Building upon James' reply a little further, I recently did a ModBus RTU 
implementation on a microcontroller and you need both a 1.5 and 3.5 
character timer for correct operation. With the micro, I used hardware 
timers with uS resolution synchronized to incoming characters via the 
UART interrupt. As James mentions, user-space Python is simply too far 
from the hardware to do this sort of thing. You'd probably have to write 
a custom UART driver and run it on a RTOS to get correct timing. That 
being said, you can probably write something that will work 99.9% of the 
time, but may not respond correctly for some weird corner case scenarios.


Jason Valenzuela


From kevin.horn at gmail.com  Thu Jan 20 13:54:39 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 12:54:39 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
Message-ID: <AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>

On Thu, Jan 20, 2011 at 1:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> Let me begin by saying that I'm _very_ excited about this prospect and I'm
> looking forward to the output of this project.  So, some of what I'm about
> to say may sound like harsh criticism but *please do not let it discourage
> you*.  I agree with pretty much everything you're saying about problems
> with the current documentation.  They need to be fixed.  I'm offering
> criticism at this early stage in the hopes that it will be useful and feed
> into your project, not in the hopes that it will stop you.
>
> On Jan 20, 2011, at 1:10 AM, Tom Davis wrote:
>
> I've been using (and threatening to work on) Twisted for a few years now.
> It seems like every time I get back into it, I need to dig up old code or
> Google queries just to get started. Yesterday, Jean-Paul introduced me to
> the trial-tutorial branch<http://twistedmatrix.com/trac/browser/branches/trial-tutorial-2443-2> which
> has shed some light on the basics of using trial and testing Twisted
> client/server applications in general. Until he mentioned it in IRC, I was
> stuck looking at the actual tests for protocols and deciding which parts of
> that were generically useful to me. I agreed to finish up that documentation
> so that it could finally (four years later) be added to trunk (and more
> importantly, twistedmatrix.com). But after thinking about it, I believe
> the problem runs much deeper than just the lack of a branch merge.
>
>
> Yet, the problem _starts_ with a branch merge.
>
> There are many outstanding documentation branches which are substantial
> improvements, which need to be edited and merged - the trial tutorial among
> them.  It would be great if your efforts could start with getting those
> landed, turning the crank on the process to get our users better
> documentation in the interim, as you survey the existing documentation.
>
>
>    1. Factories create protocols somehow
>    2. Protocols have methods like connectionMade, connectionLost, and
>    dataReceived to handle events
>    3. There are other protocols with other methods. One that I know of,
>    anyway.
>    4. I may need to write a state machine (???)
>    5. I should use an Endpoint or maybe a Service or reactor (but probably
>    not!)
>    6. I should also use Application for serious business
>
> Moving forward, howto/clients.html duplicates a lot of these things and
> fills in some gaps in knowledge while creating more holes. Meanwhile, I
> still never wanted to create a QOTD or Echo server.
>
> I think the point has been made.
>
>
> This kind of tear-down is pretty easy: I'd really like to hear your idea of
> its inverse, though.  What *should* a newcomer who reads this document
> know by the end of it?  A massive pile of improved documentation would of
> course be useful, but a good start would be a clear statement of
> requirements and audience.  (As well as an enumeration of *different* audiences
> that different documents might serve.)
>
> My *real* point, though, is that I love Twisted. And I'm constantly
> wishing it was more accessible to newcomers. Twisted is Python's oldest and
> most mature event-based networking engine
>
>
> (minor nitpick: I really like "event-based" or "event-driven", as you've
> said here: why does <http://docs.recursivedream.com/twisted/> say
> "asynchronous"? I find that especially in documentation it's a lot easier to
> explain "event-driven", because you can enumerate what the events are,
> instead of explaining the etymology of "synchronicity"...)
>

I also find that if you use "event-driven" you can compare to event-driven
GUI apps, when giving an explanation.  Many, many people who have no idea
about what "asynchronous networking" is will get the idea pretty easily when
you make this comparison.  Not everybody, certainly, but a lot.


> I want to fix that, among other things. And as luck may have it, I like
> writing documentation. And I know at least enough Twisted to get the
> high-level stuff in order and improve the documentation to the point that
> people will keep reading long enough to make sense of the "idea of Twisted"
> and be able to implement some basic things and expand upon them later.
>
> There are some things I *do* want to accomplish early on:
>
>    - Make the docs accessible (a lot is hidden and hard to find)
>    - Make them more concise and useful to somebody who doesn't want to
>    know the 50 different ways to skin every cat (including the ones you should
>    never use)
>    - Make them introduce and explain Twisted in a way that somebody as
>    dumb as me can understand it. This means talking about protocols, factories,
>    deferreds, etc. in a way that doesn't require thousands of words of circular
>    explanations, digressions, and duplications.
>    - Document the different Twisted projects as what they are: really
>    useful libraries and/or clients/servers built on top of Twisted that just so
>    happens to also ship with the core. One of them is likely to do what the
>    prospective user wants, too.
>
> These all sound like excellent goals.
>
> There are also some things I *don't* want to accomplish, at least
> initially:
>
>    - Explain asynchronous programming in depth
>    - Get into the level of detail that the Krondo series does (but I plan
>    to borrow from it!)
>
> There are things I'll *need help with*:
>
>    - The final word on what is/isn't to be used in what context;
>    practical, real-world explanations of why I would use A instead of B (not
>    just "it's more flexible").
>
> You will probably have to press us core developers on this one, and you may
> spark some debates.  These tend to sputter out with no clear resolution as
> everyone is frustrated that nobody's solution (not even their own) is ideal,
> but you would be doing us all a great service if you really forced us to
> develop a consensus about certain things (like "what's the best way to build
> a twisted command-line program", for example) and agree to agree on the
> current documented "best practice" for those things.
>
>
>    - Better documentation from project creators/maintainers/lovers on
>    their project. These projects make a lot of hard stuff trivial and many do
>    not convey that very well. I'll do my best to reorganize and improve the
>    existing documentation, but most of the projects cater to a specific niche
>    that requires its own core knowledge.
>
> The biggest problem with this is that you will find that a very small group
> of people have created the vast majority of this stuff and don't have time
> to maintain it all any more :).  We certainly don't have a separate
> dedicated maintainer for each project (although I really wish we could get
> to that point).
>

I think this right here is the main reason that the docs need to be
improved.  Easier newbie experience translates to more users translates to
more developers translates to more maintainers.  Especially if the
perception of Twisted as a "languishing" or even "mostly dead" project can
be undone. (Yes, I've heard this a number of times.  No, I don't know where
they get it.  I correct it whenever I can. It's something that needs to be
addressed, but that's a different conversation.).  Fixing up the docs will
at least help with this.


> Most of this was discussed with Jean-Paul and Glyph at tonight's Python
> meet-up in Cambridge. Some work has already begun on the new docs here:
>
> https://github.com/tdavis/twisted-docs
>
>
> There have been several abortive efforts to do something grand to re-invent
> all of the Twisted documentation in the universe, or a complete overhaul of
> the website, including several false starts that I've made, and most
> recently the (somewhat arduous, arguably "mostly complete" (fingers crossed
> on that one)) attempt to do a sphinx migration.
>

Seriously man, we're close.  3 more "chunk tickets" in the "edit the lore
source" phase (and one of those is finished I think and just needs to be
merged).  Then another round of "chunk tickets" to manually fix any other
little typographical issues in the Sphinx source, and done.  I suppose there
will also need to be a website deployment process.  And probably lots of
other minor things that we'll discover as we go.

I've had some major speedbumps, had to find a new job, kids were sick
several times, etc.  You know...life.  I'm getting fired up again though,
and thijs seems to be as well, and this coming up now just pumps the
bellows.

By the way, it seemed tonight that you weren't that familiar with the
> existing Sphinx efforts, so you may want to have a look at this and see if
> it is an improvement on our existing documentation index:
>
> http://twistedsphinx.funsize.net/contents.html
>
> (I was going to point you at the output of the buildbot, but it looks like
> something in trunk has broken the conversion process.  Anyone know what this
> is about? <
> http://buildbot.twistedmatrix.com/builds/sphinx-html-15724/contents.html>)
>
> I'm really glad to see that Kevin beat me to the punch on posting his reply
> though, hopefully we'll see this moving along soon :).
>

I was glad to see just about anyone else interested! :)

It looks like Tom and I have some similar ideas on where we should be going,
and I think his Sphinx skeleton is a great example of what things should
eventually look like.  As I said earlier, I've had a number of similar
ideas, though it looks like maybe Tom's are a little more concrete and/or
fleshed-out.  I just really wanted to get the Sphinx convo "out the door",
before I took on another huge project.  I'll elaborate in a separate email.


> Before you continue too much further in that github repository though,
> please, consider this:
>
> ~/Projects/Twisted/trunk/doc$ find conch core mail names pair web words
> -name '*.xhtml' -or -name '*.py' | xargs wc -l
>     .
>     .
>     .
>    28836 total
>
> That's 28 thousand lines of documentation and sample code.  It might not
> all be the best documentation, but some of it is quite good.  Jean-Paul's
> "twisted web in 60 seconds" tutorial is in there, and that's definitely
> worth reading.  Would you volunteer to rewrite 28 thousand lines of code all
> at once?  Or submit a 28 thousand line patch for review?  As problematic as
> the current situation is, there is a definite potential for some baby vs.
> bathwater confusion in improving it.
>
> I am open to the idea that documentation needs different review practices
> from code, and there are things about documentation (like narrative flow)
> which are impossible to automatically verify and may require significant
> changes at multiple layers simultaneously.  These features may not have an
> obvious parallel in code - which can typically be evolved incrementally,
> despite the occasional frustrated lament that everything needs to be
> rewritten.
>
> But, parts of the documentation are code.  Another major problem with the
> current documentation is that it is out of date.  We know when code goes out
> of date because it starts raising exceptions and emitting warnings from our
> test suite, but we only find out about documentation examples are going out
> of date when we do a release and some poor soul encounters an error when
> trying to follow along.  I'd really like any effort that undertakes to
> substantially change the structure of the documentation to make a concerted
> effort to hit the ground running with test-driven examples which can be
> automatically verified, so that we have some idea of the impact of code
> changes on the docs.
>

There's a ticket for writing tests for the code samples in Trac.


> Also, while you're energized now, please consider what happens to our
> documentation efforts if you run out of time or out of motivation halfway
> through this process.  Incremental improvements may not necessarily provide
> the best outcome, but they _do_ mean that users get to see some results from
> these volunteer efforts even if the original volunteer gets busy with other
> aspects of life and can't complete their project.  Many of your
> bullet-points above are well suited to individual efforts (some of which are
> actually issues with the web site, rather than the documentation per se).
>

@Tom: agree here.  Let's get _some_ benefit out of your energy, rather than
you getting discouraged and having half a great set of docs floating out
there someplace confusing users.  I've been through this myself a couple of
times (I've been pretty much ready to "pull the trigger" at least three
times!) and have gotten discouraged and/or off track.  After a while, my
"voom" comes back, but in the meantime, the trunk has progressed, and
there's that much more work to do.  My advice is to try and get many small
changes made, and get them _done_ rather than a few huge changes.


> I'd like to suggest that, at the very least, you create a branch of Twisted
> (perhaps on Launchpad?) and integrate your work into the doc/ hierarchy of
> the current tree.  That way, at least, it would be easier for someone else
> to pick up where you've left off and fold things into the right place.  This
> would also provide a way to more easily integrate the doc test suite into
> the main test suite on our existing build and release infrastructure.
>
> I hope the above came off as optimistic and constructive as I meant it:
> it's not my intention to insult the documentation or those who wrote it. I
> just think with a dose of hindsight and a lot of effort, the docs can be
> awesome. And they would improve the entire Twisted ecosystem along with
> them.
>
>  Indeed, as the author of many of these original documents, I did not feel
insulted in either my person or my work :).  Hopefully you didn't feel that
way either after reading this reply!

>
>
>
I think this has been pretty constructive on both sides.  I look forward to
more.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/6375f545/attachment-0001.htm 

From kevin.horn at gmail.com  Thu Jan 20 14:58:40 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 13:58:40 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>
Message-ID: <AANLkTim3crwt7Mfs=Nk8GdXWr9=2amTyTT6Uc-4TNv3M@mail.gmail.com>

I alluded in my earlier mail to some of the improvement ideas I have had
regarding Twisted's docs (other than the conversion to Sphinx), and I though
I'd elaborate

Here's some things I had "planned" (yes, I'm using the term loosely) to try
and add/improve/fix in the Twisted docs after the Sphinx conversion was
finished:
(urg, I know I've been keeping a list of these someplace, and some are in
trac tickets, etc. but I can't find it right now, so I may ramble a bit)

-  Add a basic intro to Twisted.  This would introduce some basic ideas
similar to the krondoblog tutorial, but in less detail.
- "What is Twisted good for"
- Explain the most important parts of Twisted for people to get started
with.  IMO, this is a) the reactor, b) deferreds, c) some of the basic
interfaces/classes, esp. Factories/Protocols
  (I'd like to see some docs on Transports as well)
- more/better UDP stuff
- "How to test your Twisted apps" (e.g., the idea of faking up a transport
never occurred to me until I read a test that did it, and it's been one of
the most useful techniques I've found)
- Task-based docs - how to serve a web page, how to send a mail, how to
write an IRC client (just to cut down on the questions!) etc. The basic
stuff at first (what newbie's will be looking for), maybe eventually turning
into a "cookbook" of sorts.
- A revamped section on "How to write twisted documentation", since that
would likely be very different after the Sphinx conversion ( What Sphinx
markup to use, and I also have some custom extensions, etc. which need to be
documented).
- "How to _build_ the documentation"
- Beginner's tutorial
- better glossary
- move a bunch of stuff out of the Trac wiki, and into the Sphinx project.
There's stuff there that has become de-facto documentation, which really
needs to be version-controlled, etc.
- install docs


So after looking over Tom's "skeleton" Sphinx project and a night's sleep, I
think we're pretty close to on the same page (or at least pages in the same
book).  It looks like a lot of this would be covered in Tom's Task-based
docs and the Base Documentation section ("Suiting Up", "Diving in").

So here's what I'm kind of thinking as far as combining efforts:
1) I'll continue with the "Project Documentation" conversion, while Tom
works on the other bits.  Should be fairly easy to combine them, I'm
thinking.
2) Let's leave the "Project Documentation" pretty much as-is for the moment,
until the Sphinx convo is done.
3) I wonder if at least some of the "task-based docs" shouldn't be put into
the project sections, and then just linked to from the task-based section?

Thoughts, Tom?

[As an aside, is there any way to get the Combinator stuff from the old Trac
wiki back online, or at least readable someplace? (Hrmmm, it looks like
Google's cache has it for the moment).  Also, it would be much easier to get
new contributors, especially for Windows, if Combinator worked out of the
box on Windows.  There's (or were) 3 or 4 patches in the Divmod SVN repo
that needed to be applied in order to get it to work, and now that the
Divmod site is offline it's really hard to set it up on a new machine, even
for me, and I have a working example to go from.  Yeah it's off topic, sue
me.]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/1569f356/attachment.htm 

From kevin.horn at gmail.com  Thu Jan 20 17:05:15 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 16:05:15 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
Message-ID: <AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>

On Thu, Jan 20, 2011 at 1:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> (I was going to point you at the output of the buildbot, but it looks like
> something in trunk has broken the conversion process.  Anyone know what this
> is about? <
> http://buildbot.twistedmatrix.com/builds/sphinx-html-15724/contents.html>)
>
>
>
I was going to address this as well.  I've been seeing what are apparently
intermittent problems with the buildbot, though I haven't seen that one
before, since the beginning of the year when I started seriously looking at
this stuff again.

I was able to build the docs properly on the buildbot yesterday, and in fact
couldn't replicate any of the issues I had previously seen (which, in my
case, seem to mostly have to do with missing CSS files). when I was talking
to exarkun about it on IRC yesterday.

I'm not sure whether it has to do with the buildbot configuration, maybe
stuff timing out, network issues, problems in the actual conversion process,
or what.

Ideas welcome.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/355ce4a1/attachment.htm 

From exarkun at twistedmatrix.com  Thu Jan 20 17:45:48 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 20 Jan 2011 22:45:48 -0000
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
Message-ID: <20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>

On 10:05 pm, kevin.horn at gmail.com wrote:
>On Thu, Jan 20, 2011 at 1:55 AM, Glyph Lefkowitz 
><glyph at twistedmatrix.com>wrote:
>>
>>(I was going to point you at the output of the buildbot, but it looks 
>>like
>>something in trunk has broken the conversion process.  Anyone know 
>>what this
>>is about? <
>>http://buildbot.twistedmatrix.com/builds/sphinx- 
>>html-15724/contents.html>)
>I was going to address this as well.  I've been seeing what are 
>apparently
>intermittent problems with the buildbot, though I haven't seen that one
>before, since the beginning of the year when I started seriously 
>looking at
>this stuff again.
>
>I was able to build the docs properly on the buildbot yesterday, and in 
>fact
>couldn't replicate any of the issues I had previously seen (which, in 
>my
>case, seem to mostly have to do with missing CSS files). when I was 
>talking
>to exarkun about it on IRC yesterday.
>
>I'm not sure whether it has to do with the buildbot configuration, 
>maybe
>stuff timing out, network issues, problems in the actual conversion 
>process,
>or what.

Does this help?

http://buildbot.twistedmatrix.com/builders/sphinx- 
documentation/builds/123/steps/shell_4/logs/stdio

The salient point perhaps being:

  File 
"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/urllib.py", 
line 347, in open_http
    'got a bad status line', None)
IOError: ('http protocol error', 0, 'got a bad status line', None)

Jean-Paul


From kevin.horn at gmail.com  Thu Jan 20 17:47:19 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 16:47:19 -0600
Subject: [Twisted-Python] Flags with MaildirMailbox
In-Reply-To: <4D331C8F.4010807@goffi.org>
References: <4D31F0B8.1070700@goffi.org>
	<20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>
	<4D331C8F.4010807@goffi.org>
Message-ID: <AANLkTin-Q20ZNG3zhT686ojyiF88ryE_tMOd+kdPXwXC@mail.gmail.com>

On Sun, Jan 16, 2011 at 10:27 AM, goffi <goffi at goffi.org> wrote:

> On 16/01/2011 01:44, exarkun at twistedmatrix.com wrote:
> >
> > Not planned ("planned" in Twisted usually means "there is a ticket for
> > it").  You're welcome to contribute that functionality, though!  Do you
> > have an idea about how it might fit into the existing code and API?
> >
> > Jean-Paul
> >
> Well not really, but it's a good way to learn :). I'm really (really
> really) busy at the moment, so I probably can't in the next days, but I
> will try to have a look (and maybe turn on IRC/the documentation if I
> need help and review on the coding convention of Twisted).
>
> thanks for the reply :)
>
>
When you get some time to look at it, I'd encourage you to at least file a
ticket, so this issue doesn't get lost.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/7c1a96fb/attachment.htm 

From kevin.horn at gmail.com  Thu Jan 20 18:22:55 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 17:22:55 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
Message-ID: <AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>

On Thu, Jan 20, 2011 at 4:45 PM, <exarkun at twistedmatrix.com> wrote:

> On 10:05 pm, kevin.horn at gmail.com wrote:
> >On Thu, Jan 20, 2011 at 1:55 AM, Glyph Lefkowitz
> ><glyph at twistedmatrix.com>wrote:
> >>
> >>(I was going to point you at the output of the buildbot, but it looks
> >>like
> >>something in trunk has broken the conversion process.  Anyone know
> >>what this
> >>is about? <
> >>http://buildbot.twistedmatrix.com/builds/sphinx-
> >>html-15724/contents.html>)
> >I was going to address this as well.  I've been seeing what are
> >apparently
> >intermittent problems with the buildbot, though I haven't seen that one
> >before, since the beginning of the year when I started seriously
> >looking at
> >this stuff again.
> >
> >I was able to build the docs properly on the buildbot yesterday, and in
> >fact
> >couldn't replicate any of the issues I had previously seen (which, in
> >my
> >case, seem to mostly have to do with missing CSS files). when I was
> >talking
> >to exarkun about it on IRC yesterday.
> >
> >I'm not sure whether it has to do with the buildbot configuration,
> >maybe
> >stuff timing out, network issues, problems in the actual conversion
> >process,
> >or what.
>
> Does this help?
>
> http://buildbot.twistedmatrix.com/builders/sphinx-
> documentation/builds/123/steps/shell_4/logs/stdio
>
> The salient point perhaps being:
>
>  File
>
> "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/urllib.py",
> line 347, in open_http
>    'got a bad status line', None)
> IOError: ('http protocol error', 0, 'got a bad status line', None)
>
> Jean-Paul
>
>
Hmmm...yes, I think it does.  It looks like the l2s_builder script is
choking on fetching the DTD for some reason.  lore2sphinx itself is supposed
to cache the DTD between runs, but I'm betting it doesn't work in the
buildbot due to the (hopefully) clean environment it has every time it runs.

I can change it to not care about that, but if I do, then it won't be able
to resolve HTML entities (of which there are a few in the Lore sources,
mostly em-dashes IIRC).  So the XML parsing will choke on those, unless I
tell it to ignore them, in which case it might ignore other errors...etc.

I'll see what I can do to fix it, I haven't worked on that bit for a long
time.  I'll see if possible to add a "pre-cached" DTD file to teh
lore2sphinx repo, and that should fix that problem at least.

Thanks for the research!

(I sometimes forget that buildbot keeps a log of the stdio.  You wouldn't
think that I would, since I use the analogous logs in hudson fairly
frequently, but I do. Sigh.)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/5fb60ad8/attachment.htm 

From screwtape at froup.com  Thu Jan 20 18:57:16 2011
From: screwtape at froup.com (Tim Allen)
Date: Fri, 21 Jan 2011 10:57:16 +1100
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
Message-ID: <20110120235716.GS21847@boombah.thristian.org>

On Thu, Jan 20, 2011 at 05:22:55PM -0600, Kevin Horn wrote:
> Hmmm...yes, I think it does.  It looks like the l2s_builder script is
> choking on fetching the DTD for some reason.  lore2sphinx itself is supposed
> to cache the DTD between runs, but I'm betting it doesn't work in the
> buildbot due to the (hopefully) clean environment it has every time it runs.
> 
> I can change it to not care about that, but if I do, then it won't be able
> to resolve HTML entities (of which there are a few in the Lore sources,
> mostly em-dashes IIRC).

You mean these DTDs?

    twisted/lore/xhtml1-strict.dtd
    twisted/lore/xhtml1-transitional.dtd

They reference the xhtml-*.ent entity definitions which are also in the
same directory. It would be neat if lore2sphinx could be taught to use
the DTDs packaged with lore instead of having to download them from the
Internet every time.


From exarkun at twistedmatrix.com  Thu Jan 20 19:06:24 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Jan 2011 00:06:24 -0000
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110120235716.GS21847@boombah.thristian.org>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
Message-ID: <20110121000624.1851.1542548546.divmod.xquotient.4@localhost.localdomain>

On 20 Jan, 11:57 pm, screwtape at froup.com wrote:
>On Thu, Jan 20, 2011 at 05:22:55PM -0600, Kevin Horn wrote:
>>Hmmm...yes, I think it does.  It looks like the l2s_builder script is
>>choking on fetching the DTD for some reason.  lore2sphinx itself is 
>>supposed
>>to cache the DTD between runs, but I'm betting it doesn't work in the
>>buildbot due to the (hopefully) clean environment it has every time it 
>>runs.
>>
>>I can change it to not care about that, but if I do, then it won't be 
>>able
>>to resolve HTML entities (of which there are a few in the Lore 
>>sources,
>>mostly em-dashes IIRC).
>
>You mean these DTDs?
>
>    twisted/lore/xhtml1-strict.dtd
>    twisted/lore/xhtml1-transitional.dtd
>
>They reference the xhtml-*.ent entity definitions which are also in the
>same directory. It would be neat if lore2sphinx could be taught to use
>the DTDs packaged with lore instead of having to download them from the
>Internet every time.

It could even use Lore's parser, twisted.lore.tree.parseFileAndReport ;)

Jean-Paul


From kevin.horn at gmail.com  Thu Jan 20 19:34:17 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 18:34:17 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110120235716.GS21847@boombah.thristian.org>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
Message-ID: <AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>

On Thu, Jan 20, 2011 at 5:57 PM, Tim Allen <screwtape at froup.com> wrote:

> On Thu, Jan 20, 2011 at 05:22:55PM -0600, Kevin Horn wrote:
> > Hmmm...yes, I think it does.  It looks like the l2s_builder script is
> > choking on fetching the DTD for some reason.  lore2sphinx itself is
> supposed
> > to cache the DTD between runs, but I'm betting it doesn't work in the
> > buildbot due to the (hopefully) clean environment it has every time it
> runs.
> >
> > I can change it to not care about that, but if I do, then it won't be
> able
> > to resolve HTML entities (of which there are a few in the Lore sources,
> > mostly em-dashes IIRC).
>
> You mean these DTDs?
>
>    twisted/lore/xhtml1-strict.dtd
>    twisted/lore/xhtml1-transitional.dtd
>
> They reference the xhtml-*.ent entity definitions which are also in the
> same directory. It would be neat if lore2sphinx could be taught to use
> the DTDs packaged with lore instead of having to download them from the
> Internet every time.
>
>
Huh. Never even knew that was there.  It probably could, and the reason it
downloads from the internet was because that's the default way of doing it
in lxml.  I've since figured out how to override that behavior (which is how
the caching works) so maybe that wouldn't even be hard.  The easiest/fastest
fix for the moment though would probably be to pre-populate the cache as I
mentioned before, since IIRC, this would just involve adding the file to my
hg repo.  I'll have to look into it though, it may be just as easy to do it
the other way, though I don't want to depend necessarily on having Twisted's
code available (remember, this is supposed to work on the various divmod
projects, and anything else that uses Lore, too).

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/e258dacd/attachment.htm 

From kevin.horn at gmail.com  Thu Jan 20 19:43:01 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 18:43:01 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110121000624.1851.1542548546.divmod.xquotient.4@localhost.localdomain>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<20110121000624.1851.1542548546.divmod.xquotient.4@localhost.localdomain>
Message-ID: <AANLkTikdxoD90GFjGdk-is5ev4xXoOJXV9ewGf6rYT+A@mail.gmail.com>

On Thu, Jan 20, 2011 at 6:06 PM, <exarkun at twistedmatrix.com> wrote:

> On 20 Jan, 11:57 pm, screwtape at froup.com wrote:
> >On Thu, Jan 20, 2011 at 05:22:55PM -0600, Kevin Horn wrote:
> >>Hmmm...yes, I think it does.  It looks like the l2s_builder script is
> >>choking on fetching the DTD for some reason.  lore2sphinx itself is
> >>supposed
> >>to cache the DTD between runs, but I'm betting it doesn't work in the
> >>buildbot due to the (hopefully) clean environment it has every time it
> >>runs.
> >>
> >>I can change it to not care about that, but if I do, then it won't be
> >>able
> >>to resolve HTML entities (of which there are a few in the Lore
> >>sources,
> >>mostly em-dashes IIRC).
> >
> >You mean these DTDs?
> >
> >    twisted/lore/xhtml1-strict.dtd
> >    twisted/lore/xhtml1-transitional.dtd
> >
> >They reference the xhtml-*.ent entity definitions which are also in the
> >same directory. It would be neat if lore2sphinx could be taught to use
> >the DTDs packaged with lore instead of having to download them from the
> >Internet every time.
>
> It could even use Lore's parser, twisted.lore.tree.parseFileAndReport ;)
>
> Jean-Paul
>
>
Yes, but:

- The docs (well, docstrings) aren't very clear about exactly what that
does, or what quirks it might or might not have.
- Is the DOM document it returns a typical XHTML DOM document?  Is there
anything special/different about it since it's a Lore XHTML doc?
- Consider the number of tickets open involving Lore's parser (or at least
there were several when I started this whole business).
- The whole point of this project is to stop using (and by extension
supporting/maintaining) Lore, so it seems kind of backwards to me to depend
on it.
- I'd rather deal with an etree-a-like, than a straight DOM document
(admittedly, personal preference)
- I certainly don't want to rewrite everything at this point ;)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/c4a64784/attachment.htm 

From screwtape at froup.com  Thu Jan 20 20:20:01 2011
From: screwtape at froup.com (Tim Allen)
Date: Fri, 21 Jan 2011 12:20:01 +1100
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
Message-ID: <20110121012001.GT21847@boombah.thristian.org>

On Thu, Jan 20, 2011 at 06:34:17PM -0600, Kevin Horn wrote:
> On Thu, Jan 20, 2011 at 5:57 PM, Tim Allen <screwtape at froup.com> wrote:
> > You mean these DTDs?
> >
> >    twisted/lore/xhtml1-strict.dtd
> >    twisted/lore/xhtml1-transitional.dtd
> >
> > They reference the xhtml-*.ent entity definitions which are also in the
> > same directory. It would be neat if lore2sphinx could be taught to use
> > the DTDs packaged with lore instead of having to download them from the
> > Internet every time.
>
> Huh. Never even knew that was there.  It probably could, and the reason it
> downloads from the internet was because that's the default way of doing it
> in lxml.  I've since figured out how to override that behavior (which is how
> the caching works) so maybe that wouldn't even be hard.  The easiest/fastest
> fix for the moment though would probably be to pre-populate the cache as I
> mentioned before, since IIRC, this would just involve adding the file to my
> hg repo.  I'll have to look into it though, it may be just as easy to do it
> the other way, though I don't want to depend necessarily on having Twisted's
> code available (remember, this is supposed to work on the various divmod
> projects, and anything else that uses Lore, too).

Well, you wouldn't necessarily be depending on Twisted, just depending
on Lore - and I imagine any not-Twisted project whose documentation
depends on Lore has already made peace with the idea of depending on
Lore. :)

If it's easier to just copy these well-known DTDs into the lore2sphinx
repository, I guess that's a good plan too - it's not like the W3C is
going to suddenly issue updated XHTML DTDs.


From tom at recursivedream.com  Thu Jan 20 23:20:38 2011
From: tom at recursivedream.com (Tom Davis)
Date: Thu, 20 Jan 2011 23:20:38 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110121012001.GT21847@boombah.thristian.org>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
Message-ID: <AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>

Wow! Okay, so, not being really familiar with the list etiquette combined
with the fact that the topic has digressed a bit, I hope you'll forgive the
non-inline reply here. I want to hit the main points of what everybody said
/ asked, but let it be known that I read all of it!

How can we combine these efforts, or at least keep from working at cross
> purposes?
>
> I see from your link above that you are building your own Sphinx project.
> Perhaps you would be better off working from the results of the Lore2sphinx
> conversion?  Are you modifying existing docs or working from scratch?
>
> Let's get together on this!


Hey Kevin! Glyph and Jean-Paul got me up to speed (somewhat) on the whole
lore2sphinx thing last night?though they were rather unclear as to how close
it is to completion. (which you addressed later in this thread)

I certainly want to combine our efforts as much as possible and I'm not too
worried about working at cross purposes; your main task seems to be
converting the existing documentation while mine is reorganizing, editing,
and standardizing it. I'm sure our paths will start to cross when the lore
conversion is complete and you have a huge Sphinx project ready to be
properly organized and catalogued. My hope is we can then begin the process
of merging the two sides of this coin.

My current plan (which should become a bit more clear throughout this
massive reply) is to start from scratch *but* modify existing documentation
wherever possible. If a piece of documentation fits in a "hole" in the
structure and I can get by with a *mv* and some editing, that's what I'd
like to do?it seems the most pragmatic approach.

So here's what I'm kind of thinking as far as combining efforts:
> 1) I'll continue with the "Project Documentation" conversion, while Tom
> works on the other bits.  Should be fairly easy to combine them, I'm
> thinking.
> 2) Let's leave the "Project Documentation" pretty much as-is for the
> moment, until the Sphinx convo is done.
> 3) I wonder if at least some of the "task-based docs" shouldn't be put into
> the project sections, and then just linked to from the task-based section?


This. Point of fact, (3) is already implemented; that example task simply
links to *projects/web/tasks/serve*. This strikes me as the most logical
layout as the tasks are all specific to a particular project (the only iffy
one being Core which is sort of a few projects plus the foundation)?we just
want to highlight some of them.

On to Glyph's reply...

There are many outstanding documentation branches which are substantial
> improvements, which need to be edited and merged - the trial tutorial among
> them.  It would be great if your efforts could start with getting those
> landed, turning the crank on the process to get our users better
> documentation in the interim, as you survey the existing documentation.


I definitely agree that resolving the low-hanging fruit first is a good
idea. For finishing "docs branch X" to make sense, my personal belief is
that X should:

   - Still be relevant in terms of best practices and simply what's
   available
   - If project documentation, have outstanding issues that a passing
   familiarity with the project [right now] will be sufficient to close them (I
   could spend time learning one project, or the same time improving *all* the
   documentation)
   - Adhere to whatever documentation standards we agree upon, if much is to
   left to do.

I guess my overall opinion here is that, yes, if relatively minor edits can
bring a branch close enough to completion that we can get it out there to
help newcomers *now*, let's do that. If a branch is more of a draft and
requires a good deal of fleshing out (or is simply stale), it's probably
worth nailing down the structure and previously mentioned docs standards
before I just create more work for myself (or others) down the road.

Finally, my biggest hurdle right now is not knowing how to *find* said
branches. I don't see "documentation" as a category in Trac and common
keyword searches didn't show up much for me. I'm sure this is an easy
question to answer, though.

What *should* a newcomer who reads this document know by the end of it?


I'm not sure because I can't see how a practical guide to creating something
so generic really fits in the grand scheme of things. I think if you want to
create a TCP server from scratch you must first create the Universe! In this
case, that means learning how Twisted addresses the *concept* of a server
before ever bothering to write one so generic. My general beef is that many
documents seem to make an attempt to appeal to everybody and in doing so
don't sufficiently help anybody. Maybe I can justify that claim better with
examples of "better" (at least more targeted) documents.

A massive pile of improved documentation would of course be useful, but a
> good start would be a clear statement of requirements and audience.  (As
> well as an enumeration of*different* audiences that different documents
> might serve.)


I completely agree. The updates I made last night (hopefully) address the
issue of different audiences and needs, at least as a beginning stage. What
Jason said about the Python docs is a great parallel: Tutorials, [Project]
Reference, [Core Concepts] Reference. All of these are important and cater
to a different need. I think we're quite on the same page here, though.

(minor nitpick: I really like "event-based" or "event-driven", as you've
> said here: why does <http://docs.recursivedream.com/twisted/> say
> "asynchronous"?


It's inconsistent and I completely agree (and the consensus seems to be)
that event-* is superior.

You will probably have to press us core developers on this one, and you may
> spark some debates. These tend to sputter out with no clear resolution as
> everyone is frustrated that nobody's solution (not even their own) is ideal,
> but you would be doing us all a great service if you really forced us to
> develop a consensus about certain things (like "what's the best way to build
> a twisted command-line program", for example) and agree to agree on the
> current documented "best practice" for those things.


Debates are great! And I fully intend to bitch about the lack of "best ways"
to do certain things?having one clear way to accomplish something is, after
all, a core tenant of Python ;) -- more than that, it's really annoying to
everyone involved (readers, writers, and developers) when there are many
different ways to do something and none of them have very clear use cases or
strengths / weaknesses. Definitely a TODO.

The biggest problem with this is that you will find that a very small group
> of people have created the vast majority of this stuff and don't have time
> to maintain it all any more :).  We certainly don't have a separate
> dedicated maintainer for each project (although I really wish we could get
> to that point).


Kevin touched on this already, but I really think if we make maintaining and
growing a Project something that is both honorable *and* accessible, more
people will want to do it. If you like Python and DNS or SMTP or whatever
the hell else, what has the potential to be a more awesome implementation
than its Twisted one? Let's help people find out for themselves that the
answer is *nothing*. Then they'll want it to be *their* project.

As problematic as the current situation is, there is a definite potential
> for some baby vs. bathwater confusion in improving it... Also, while
> you're energized now, please consider what happens to our documentation
> efforts if you run out of time or out of motivation halfway through this
> process.  Incremental improvements may not necessarily provide the best
> outcome, but they _do_ mean that users get to see some results from these
> volunteer efforts even if the original volunteer gets busy with other
> aspects of life and can't complete their project.


I have no intention of rewriting everything, even if it sounds absurdly
entertaining to make myself learn and write practical examples of every
Twisted project. I am (just) slightly more realistic than that. Having the
Sphinx conversion complete will be a huge help, if for no other reason than
the documentation will be easy to port, edit, and find in the first place.

On the subject of loss of motivation or time, sure. It happens to all of us.
And it's not my intention to keep the repository on GitHub completely
separate and wait until it's perfect to get it to users. Once all the
documentation is under Sphinx, there will be no reason for that. The
existing documentation can be sliced and diced into the newly-minted
structure and then combed over piece by piece. Some of it will likely need
to be thrown out wholesale, but I imagine much of it will live on with minor
edits (and probably new code) at new URLs.

As for Launchpad, etc.?I want to do whatever makes you guys (a) most
comfortable and (b) most likely to contribute. I chose to start the GitHub
project because I know Git well and it allowed me to spend all my time
writing and none of it figuring out something foreign. I don't understand
the link between Twisted Trac and Twisted on Launchpad, so an explanation of
that would be awesome. Provided that, though, how complicated could Bazaar
possibly be? We can leave Twisted's migration to GitHub as task #2 on my
list ;)

I'd really like any effort that undertakes to substantially change the
> structure of the documentation to make a concerted effort to hit the ground
> running with test-driven examples which can be automatically verified, so
> that we have some idea of the impact of code changes on the docs.


Most definitely. Documentation requires the same maintenance that code does
and can benefit from the same automated verification; and it's trivial to
write entire programs and show code samples using *literalinclude* and the *
:lines:* option. Failing code can be fixed and grep'd for realignment in the
documentation.

Indeed, as the author of many of these original documents, I did not feel
> insulted in either my person or my work :).  Hopefully you didn't feel that
> way either after reading this reply!


Not at all!

* * *

I  believe I covered the main thoughts / concerns / queries related to my
original post. My apologies if I missed anybody! And it's great to finally
be working with you :)


Cheers,

Tom


On Thu, Jan 20, 2011 at 8:20 PM, Tim Allen <screwtape at froup.com> wrote:

> On Thu, Jan 20, 2011 at 06:34:17PM -0600, Kevin Horn wrote:
> > On Thu, Jan 20, 2011 at 5:57 PM, Tim Allen <screwtape at froup.com> wrote:
> > > You mean these DTDs?
> > >
> > >    twisted/lore/xhtml1-strict.dtd
> > >    twisted/lore/xhtml1-transitional.dtd
> > >
> > > They reference the xhtml-*.ent entity definitions which are also in the
> > > same directory. It would be neat if lore2sphinx could be taught to use
> > > the DTDs packaged with lore instead of having to download them from the
> > > Internet every time.
> >
> > Huh. Never even knew that was there.  It probably could, and the reason
> it
> > downloads from the internet was because that's the default way of doing
> it
> > in lxml.  I've since figured out how to override that behavior (which is
> how
> > the caching works) so maybe that wouldn't even be hard.  The
> easiest/fastest
> > fix for the moment though would probably be to pre-populate the cache as
> I
> > mentioned before, since IIRC, this would just involve adding the file to
> my
> > hg repo.  I'll have to look into it though, it may be just as easy to do
> it
> > the other way, though I don't want to depend necessarily on having
> Twisted's
> > code available (remember, this is supposed to work on the various divmod
> > projects, and anything else that uses Lore, too).
>
> Well, you wouldn't necessarily be depending on Twisted, just depending
> on Lore - and I imagine any not-Twisted project whose documentation
> depends on Lore has already made peace with the idea of depending on
> Lore. :)
>
> If it's easier to just copy these well-known DTDs into the lore2sphinx
> repository, I guess that's a good plan too - it's not like the W3C is
> going to suddenly issue updated XHTML DTDs.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110120/e33c4d68/attachment-0001.htm 

From exarkun at twistedmatrix.com  Fri Jan 21 08:29:34 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Jan 2011 13:29:34 -0000
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
Message-ID: <20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>

On 04:20 am, tom at recursivedream.com wrote:
>Finally, my biggest hurdle right now is not knowing how to *find* said
>branches. I don't see "documentation" as a category in Trac and common
>keyword searches didn't show up much for me. I'm sure this is an easy
>question to answer, though.

http://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&order=priority&col=id&col=summary&col=status&col=type&col=priority&col=milestone&col=component&branch=%21&keywords=~documentation
>As for Launchpad, etc. 14I want to do whatever makes you guys (a) most
>comfortable and (b) most likely to contribute. I chose to start the 
>GitHub
>project because I know Git well and it allowed me to spend all my time
>writing and none of it figuring out something foreign. I don't 
>understand
>the link between Twisted Trac and Twisted on Launchpad, so an 
>explanation of
>that would be awesome. Provided that, though, how complicated could 
>Bazaar
>possibly be? We can leave Twisted's migration to GitHub as task #2 on 
>my
>list ;)

I don't think it makes sense to put anything on Launchpad for now. 
Eventually it needs to go into the canonical Twisted repository, but if 
it's easier to leave it in GitHub for now, that's fine.

Jean-Paul


From glyph at twistedmatrix.com  Fri Jan 21 17:35:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 21 Jan 2011 17:35:18 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>
Message-ID: <C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>


On Jan 21, 2011, at 8:29 AM, exarkun at twistedmatrix.com wrote:

> I don't think it makes sense to put anything on Launchpad for now. 
> Eventually it needs to go into the canonical Twisted repository, but if 
> it's easier to leave it in GitHub for now, that's fine.

The only reason I even suggested Launchpad in the first place was to suggest a place where you could immediately stick a branch of the Twisted tree proper without having commit access, so that you could experiment within that tree.  ('bzr get lp:twisted').  I don't believe we have a mirror on github, but maybe somebody could correct me.

As long as we're all on the same page as far as the eventual target of these docs (i.e. in the Twisted tree, part of some official structure) then please feel free to use whatever tools make that easier for you, your existing github repo included.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110121/2e77a4b6/attachment.htm 

From tom at recursivedream.com  Fri Jan 21 18:11:32 2011
From: tom at recursivedream.com (Tom Davis)
Date: Fri, 21 Jan 2011 18:11:32 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>
	<C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>
Message-ID: <AANLkTikBS==2DogNKgUOTeT2zfoz6+mO_XwVyXHgH37Z@mail.gmail.com>

On Fri, Jan 21, 2011 at 5:35 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 21, 2011, at 8:29 AM, exarkun at twistedmatrix.com wrote:
>
> I don't think it makes sense to put anything on Launchpad for now.
> Eventually it needs to go into the canonical Twisted repository, but if
> it's easier to leave it in GitHub for now, that's fine.
>
>
> The only reason I even suggested Launchpad in the first place was to
> suggest a place where you could immediately stick a branch of the Twisted
> tree proper without having commit access, so that you could experiment
> within that tree.  ('bzr get lp:twisted').  I don't believe we have a mirror
> on github, but maybe somebody could correct me.
>
> As long as we're all on the same page as far as the eventual target of
> these docs (i.e. in the Twisted tree, part of some official structure) then
> please feel free to use whatever tools make that easier for you, your
> existing github repo included.
>

We are definitely on the same page. I never wanted the new documentation to
remain separate from Twisted proper. It should be part of the main
repository, build process, etc.


>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110121/6f602009/attachment.htm 

From michaelnt at gmail.com  Fri Jan 21 19:10:32 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Sat, 22 Jan 2011 00:10:32 +0000
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>
	<C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>
Message-ID: <AANLkTinqDdi=-3nPydtraJZrQHOGBqL=J2vQ4STg45N9@mail.gmail.com>

On 21 January 2011 22:35, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> ?I don't believe we have a mirror on
> github, but maybe somebody could correct me.

There are 79 repos on github that match the word twisted.

This one claims to be updated every 15 minutes and seems to be pretty
up to date (has a commit from 13 hours ago)

https://github.com/powdahound/twisted

PS Having moved from subversion to Git there is no going back,
especially once you get using rebase to avoid merge commits.


From foom at fuhm.net  Fri Jan 21 19:50:33 2011
From: foom at fuhm.net (James Y Knight)
Date: Fri, 21 Jan 2011 19:50:33 -0500 (EST)
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTinqDdi=-3nPydtraJZrQHOGBqL=J2vQ4STg45N9@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>
	<C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>
	<AANLkTinqDdi=-3nPydtraJZrQHOGBqL=J2vQ4STg45N9@mail.gmail.com>
Message-ID: <cdbe297753f41fba7c1884a50832678e.squirrel@fuhm.net>

> On 21 January 2011 22:35, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> ?I don't believe we have a mirror on
>> github, but maybe somebody could correct me.
>
> There are 79 repos on github that match the word twisted.
>
> This one claims to be updated every 15 minutes and seems to be pretty
> up to date (has a commit from 13 hours ago)
>
> https://github.com/powdahound/twisted

Here's what might pass for an "official" git mirror of Twisted svn:
http://repo.or.cz/w/twisted.git

It seems to have diverged a while back from powdahound's github one, due
to what looks like a bogus commit in powdahound's.

(I do need to go back and redo the "releases" branches/tags at some point
though; they're not being copied at the right level.)

James



From glyph at twistedmatrix.com  Fri Jan 21 20:14:42 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 21 Jan 2011 20:14:42 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>
Message-ID: <664D98DE-ACE1-49D8-A98D-7C55E66F3A3E@twistedmatrix.com>


On Jan 20, 2011, at 1:54 PM, Kevin Horn wrote:

> The biggest problem with this is that you will find that a very small group of people have created the vast majority of this stuff and don't have time to maintain it all any more :).  We certainly don't have a separate dedicated maintainer for each project (although I really wish we could get to that point).
> 
> I think this right here is the main reason that the docs need to be improved.  Easier newbie experience translates to more users translates to more developers translates to more maintainers.  Especially if the perception of Twisted as a "languishing" or even "mostly dead" project can be undone. (Yes, I've heard this a number of times.  No, I don't know where they get it.  I correct it whenever I can. It's something that needs to be addressed, but that's a different conversation.).  Fixing up the docs will at least help with this.

Wow, that is weird.  Maybe in the meanwhile, refer people with this peculiar misconception to <https://www.ohloh.net/p/twisted> - "Large, active development team", "Mature, well-established codebase".

(Also tell them to click "I use this".)

>> Most of this was discussed with Jean-Paul and Glyph at tonight's Python meet-up in Cambridge. Some work has already begun on the new docs here:
>> 
>> https://github.com/tdavis/twisted-docs
> 
> There have been several abortive efforts to do something grand to re-invent all of the Twisted documentation in the universe, or a complete overhaul of the website, including several false starts that I've made, and most recently the (somewhat arduous, arguably "mostly complete" (fingers crossed on that one)) attempt to do a sphinx migration.
> 
> Seriously man, we're close.

So prove me wrong, and get it done! ;-)

> 3 more "chunk tickets" in the "edit the lore source" phase (and one of those is finished I think and just needs to be merged).  Then another round of "chunk tickets" to manually fix any other little typographical issues in the Sphinx source, and done.  I suppose there will also need to be a website deployment process.  And probably lots of other minor things that we'll discover as we go.

I think that the main problem right now is that these "chunk tickets" are too big, and especially with the sphinx builder in this half-working state, nearly impossible to review.  As Jean-Paul were recently discussing, he bit the bullet and plowed through one of these (overlarge) ticket reviews, assuming "how much of a problem could it be, it's just whitespace", and ultimately (after trying his best to examine it closely) gave it a passing review.  And yet, there were still a couple of bugs filed that were introduced by that branch, including things like word being accidentally deleted.

Breaking these up even more into smaller, easier-to-digest fixes, and then having a docs review sprint, should be able to get us over that hump.

> I've had some major speedbumps, had to find a new job, kids were sick several times, etc.  You know...life.

No worries.  That's why we've been taking this conservative approach :).

> I'm getting fired up again though, and thijs seems to be as well, and this coming up now just pumps the bellows.

Yes!  Woo!

> It looks like Tom and I have some similar ideas on where we should be going, and I think his Sphinx skeleton is a great example of what things should eventually look like.  As I said earlier, I've had a number of similar ideas, though it looks like maybe Tom's are a little more concrete and/or fleshed-out.  I just really wanted to get the Sphinx convo "out the door", before I took on another huge project.  I'll elaborate in a separate email.

+1

> There's a ticket for writing tests for the code samples in Trac.

Always good to have a link: http://twistedmatrix.com/trac/ticket/2205

> My advice is to try and get many small changes made, and get them _done_ rather than a few huge changes.

I think I want this to be on my tombstone :).

> I think this has been pretty constructive on both sides.  I look forward to more.

Same here.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110121/a1227ae5/attachment-0001.htm 

From glyph at twistedmatrix.com  Fri Jan 21 20:45:04 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 21 Jan 2011 20:45:04 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTikdxoD90GFjGdk-is5ev4xXoOJXV9ewGf6rYT+A@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<20110121000624.1851.1542548546.divmod.xquotient.4@localhost.localdomain>
	<AANLkTikdxoD90GFjGdk-is5ev4xXoOJXV9ewGf6rYT+A@mail.gmail.com>
Message-ID: <F8F62286-08FE-4FEE-8F49-40B9D8E22D48@twistedmatrix.com>


On Jan 20, 2011, at 7:43 PM, Kevin Horn wrote:

> It could even use Lore's parser, twisted.lore.tree.parseFileAndReport ;)
> 
> Jean-Paul
> 
>  
> Yes, but:
> 
> - The docs (well, docstrings) aren't very clear about exactly what that does, or what quirks it might or might not have. 

The source is pretty short, and has some very useful comments:

<http://twistedmatrix.com/trac/browser/trunk/twisted/lore/tree.py#L1021>

It is a thin wrapper around xml.sax.make_parser().parse() which uses a fixed set of DTDs, never downloads them, and remembers the file name and line number of errors so that the exceptions are actually useful to someone editing the XML.

> - Is the DOM document it returns a typical XHTML DOM document?  Is there anything special/different about it since it's a Lore XHTML doc?

Yep, it's plain vanilla XML objects.

> - Consider the number of tickets open involving Lore's parser (or at least there were several when I started this whole business).

This isn't the soupy mess of Lore's tag munging. It's just the thing it uses to get the DOM loaded in the first place.

> - The whole point of this project is to stop using (and by extension supporting/maintaining) Lore, so it seems kind of backwards to me to depend on it.

parseFileAndReport is actually useful enough that I'd like to see it move somewhere else - maybe somewhere in twisted.python, because this is useful knowledge.

> - I'd rather deal with an etree-a-like, than a straight DOM document (admittedly, personal preference)

Isn't there a function to do the conversion somewhere?

> - I certainly don't want to rewrite everything at this point ;)


If you can't use this function, the methods that it calls should be simple enough that you can just crib them :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110121/cb9bf5e2/attachment.htm 

From glyph at twistedmatrix.com  Fri Jan 21 21:42:40 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 21 Jan 2011 21:42:40 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTim3crwt7Mfs=Nk8GdXWr9=2amTyTT6Uc-4TNv3M@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>
	<AANLkTim3crwt7Mfs=Nk8GdXWr9=2amTyTT6Uc-4TNv3M@mail.gmail.com>
Message-ID: <D51198AE-F400-405A-ACFB-8D672F9B03D0@twistedmatrix.com>

I have a lot of input here, but as the guys actually doing the work, the final say is mostly with you and Tom.  So, please feel free to take everything here with a grain of salt.

On Jan 20, 2011, at 2:58 PM, Kevin Horn wrote:

> Here's some things I had "planned" (yes, I'm using the term loosely) to try and add/improve/fix in the Twisted docs after the Sphinx conversion was finished:
> (urg, I know I've been keeping a list of these someplace, and some are in trac tickets, etc. but I can't find it right now, so I may ramble a bit)

Thanks for writing up this list.  I'm re-ordering just a little bit, to start with what I think are the good bits...

> - Task-based docs - how to serve a web page, how to send a mail, how to write an IRC client (just to cut down on the questions!) etc. The basic stuff at first (what newbie's will be looking for), maybe eventually turning into a "cookbook" of sorts.

Yes, yes, yes.  I think everything should be driven from this, as I will repeat many times through this email :).

> - "How to test your Twisted apps" (e.g., the idea of faking up a transport never occurred to me until I read a test that did it, and it's been one of the most useful techniques I've found)

And this is clearly my second priority.

Personally, I really wish there were a tutorial to Twisted itself which were test-driven, rather than separating out "here's how you get started" and "here's how you write your tests".  It may be too much material to present at once, but on the other hand, the trial command-line is very friendly, so that 

> -  Add a basic intro to Twisted.  This would introduce some basic ideas similar to the krondoblog tutorial, but in less detail.

This is where everybody wants to start, but I'd like to play devil's advocate here.  Before anybody tries another grand restart on tutorial / introductory docs (the last one was the now frequently vilified Finger Tutorial), we should ask these questions:

Who wants to read this introduction?
What do they want to learn?
What problem are they actually trying to solve, and how is that going to be furthered by their reading this document?

I think the place to start is really to focus on particular tasks that people want to accomplish, with a pointer to more abstract documentation once they want to learn more about how it's all put together.

Anyway, I'm not going to _completely_ repeat everything I said to Tom at the meetup, but we should take a look at the individual project pages and make them things people want to read, and have tutorials that are focused on each project, since almost everyone who is approaching Twisted as a newbie really wants to get some specific task done, not learn generally about event-driven networking.

> - "What is Twisted good for"

Again: it depends what you want to use it for.  One sprawling page that explains every benefit that Twisted has is really hard to articulate.

> - Explain the most important parts of Twisted for people to get started with.  IMO, this is a) the reactor, b) deferreds, c) some of the basic interfaces/classes, esp. Factories/Protocols
>   (I'd like to see some docs on Transports as well)

... okay I'm totally harping on this now, but:

I think that focusing on the higher-level stuff and getting people running with actual applications should be more of a focus.  There's already a lot of conceptual / introductory material, but it lacks a coherent narrative or clearly-defined audience, and I think that's why it's bad.

In some places this may require some actual code changes.  For example, twisted.names doesn't really have an API to speak of, and while writing a tutorial on how to use it, you're going to bump into that.  That might motivate somebody to go and write the 20 lines of glue which would actually be required to write a dynamic DNS server without subclassing some internal stuff and twiddling undocumented attributes, and that would be great.  (But, lest I get ahead of myself: let's get started on the documentation first; starting off with a bunch of features because "maybe they'll be useful for docs" is an even worse trap to fall into :))

But, I don't think a lot of people are actually developing custom protocols from scratch; and those who are, should probably be using a construction kit like AMP, or PB, or Foolscap, so that they can skip over the tedious and easy-to-get-wrong bits about framing and figuring out a language of how to document messages.

> - more/better UDP stuff

Let's please make this the lowest priority and the last thing that gets done.  I don't think I've ever heard anyone who _actually_ needed to use UDP asking questions about it on IRC or on the mailing list.  If you're using Twisted for DNS (arguably the most common usage of UDP), it's already done for you.  Almost universally, questions about UDP come from people who don't really understand that they should be using TCP because they read on some MMORPG-design forum somewhere that UDP is "faster".

People who already understand the nuances of UDP and know why it's reasonable for movement packets but not for in-game micropayments, for example, might hit a speedbump or two, but they'll get through it pretty easily.  Let's address the audience that really needs the documentation before we start adding it for people whose lives will only get very slightly easier.


> - A revamped section on "How to write twisted documentation", since that would likely be very different after the Sphinx conversion ( What Sphinx markup to use, and I also have some custom extensions, etc. which need to be documented).
> - "How to _build_ the documentation"

Writing this alongside designing the new documentation build process would be a big help :).

(Although really, it should be at most three steps: "install sphinx", "install epydoc", and then "run ./admin/build-twisted-documentation".  If it's more than that then something is probably wrong...)

> - Beginner's tutorial

... again, tutorial for what?

> - better glossary

Wow, do we even have a glossary?  It seems to me this task might be better served by links to the API docs.

> - move a bunch of stuff out of the Trac wiki, and into the Sphinx project.  There's stuff there that has become de-facto documentation, which really needs to be version-controlled, etc.

+1

> - install docs
> 
> 
> So after looking over Tom's "skeleton" Sphinx project and a night's sleep, I think we're pretty close to on the same page (or at least pages in the same book).  It looks like a lot of this would be covered in Tom's Task-based docs and the Base Documentation section ("Suiting Up", "Diving in").

Great.

> So here's what I'm kind of thinking as far as combining efforts:
> 1) I'll continue with the "Project Documentation" conversion, while Tom works on the other bits.  Should be fairly easy to combine them, I'm thinking.

Getting Tim to help out with some conversion stuff (and you helping with some of his stuff, as well) might accelerate the review process, which has been part of the bottleneck.

> 2) Let's leave the "Project Documentation" pretty much as-is for the moment, until the Sphinx convo is done.
> 3) I wonder if at least some of the "task-based docs" shouldn't be put into the project sections, and then just linked to from the task-based section?
> 
> Thoughts, Tom?
> 
> [As an aside, is there any way to get the Combinator stuff from the old Trac wiki back online, or at least readable someplace? (Hrmmm, it looks like Google's cache has it for the moment).  Also, it would be much easier to get new contributors, especially for Windows, if Combinator worked out of the box on Windows.  There's (or were) 3 or 4 patches in the Divmod SVN repo that needed to be applied in order to get it to work, and now that the Divmod site is offline it's really hard to set it up on a new machine, even for me, and I have a working example to go from.  Yeah it's off topic, sue me.]

The divmod migration is underway, but we're all busy (life, etc) so it's going slowly.  I have a bunch of tasks on my plate that are part of that which I haven't gotten to yet.

Kevin & Tom, you guys should probably stay away from that time sink and keep forging ahead with this great documentation effort, but if anyone else would like to help out we're on #divmod; drop by, say hi, and maybe we can come up with something for you to do...

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110121/9cbc8c7c/attachment-0001.htm 

From glyph at twistedmatrix.com  Fri Jan 21 22:00:46 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 21 Jan 2011 22:00:46 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
Message-ID: <31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>

On Jan 20, 2011, at 11:20 PM, Tom Davis wrote:

> I definitely agree that resolving the low-hanging fruit first is a good idea. For finishing "docs branch X" to make sense, my personal belief is that X should:
> Still be relevant in terms of best practices and simply what's available
> If project documentation, have outstanding issues that a passing familiarity with the project [right now] will be sufficient to close them (I could spend time learning one project, or the same time improving all the documentation)
> Adhere to whatever documentation standards we agree upon, if much is to left to do.
> I guess my overall opinion here is that, yes, if relatively minor edits can bring a branch close enough to completion that we can get it out there to help newcomers now, let's do that. If a branch is more of a draft and requires a good deal of fleshing out (or is simply stale), it's probably worth nailing down the structure and previously mentioned docs standards before I just create more work for myself (or others) down the road.

If branches that are out there don't meet these standards, commenting on their tickets and getting them deleted or closed as invalid (as appropriate) would be a big help too.  Lots of languishing tickets that nobody knows what to do with is not a good thing, and there's plenty of opportunities for interested parties to reopen tickets, attach new patches, and object in various ways, so you shouldn't be too concerned about stepping on toes.  Focus is a valuable commodity.

Part of my comment about low-hanging fruit was to help you get familiar with and integrated into the development process.  Going through the process of getting patches reviewed and accepted will be _much_ easier if you go through the motions of doing a few trivial things first.  In fact you may want to just pick up a couple of trivial non-docs patches as well, which might help you on documenting the development process :). <bit.ly/easy-twisted-tickets> might help you there.

Mostly, I really don't want you to write a gigantic pile of new documentation and then find, when you're "done", that you missed some nuance of the coding standard, or the patch is too big to be reasonably reviewed, and that now you have three months of additional work to do before it's all really done.  Experience with the process will mitigate that problem significantly.  (And in fact I hope that you don't actually have a gigantic pile of stuff to commit all at once at any point, and can continue this work incrementally as a series of small tickets, but I realize that later on some of the index reorganization stuff may need to be big.  This is mostly just restating what Kevin already said in his message, but it bears repeating.)

> Finally, my biggest hurdle right now is not knowing how to find said branches. I don't see "documentation" as a category in Trac and common keyword searches didn't show up much for me. I'm sure this is an easy question to answer, though.

<http://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&order=priority&col=id&col=summary&col=status&col=owner&col=type&col=priority&col=milestone&keywords=%7Edocumentation>

There is, unfortunately, no "has branch" column in that report, but it will at least give you some data to work with.


> What should a newcomer who reads this document know by the end of it?
> 
> I'm not sure because I can't see how a practical guide to creating something so generic really fits in the grand scheme of things. I think if you want to create a TCP server from scratch you must first create the Universe! In this case, that means learning how Twisted addresses the concept of a server before ever bothering to write one so generic. My general beef is that many documents seem to make an attempt to appeal to everybody and in doing so don't sufficiently help anybody. Maybe I can justify that claim better with examples of "better" (at least more targeted) documents.

I don't think you need a clear definition of "better" for this particular document, if it doesn't really fit into your scheme; I don't mind if it eventually becomes irrelevant.  I just want a clear statement of goals for the documentation _in advance_ of writing that new documentation, so that we can discuss whether it's actually better for the intended audience or whether it's just more suited to a new author's tastes.

> You will probably have to press us core developers on this one, and you may spark some debates. These tend to sputter out with no clear resolution as everyone is frustrated that nobody's solution (not even their own) is ideal, but you would be doing us all a great service if you really forced us to develop a consensus about certain things (like "what's the best way to build a twisted command-line program", for example) and agree to agree on the current documented "best practice" for those things.
> 
> Debates are great!

Debates that reach some kind of conclusion are great :).  Debates that just go in circles until everybody feels crappy about the topic aren't.  So I'm really just asking you to help us make these debates into the great kind.  (The rest of your reply seems to agree with that, I just wanted to be clear.)

> The biggest problem with this is that you will find that a very small group of people have created the vast majority of this stuff and don't have time to maintain it all any more :).  We certainly don't have a separate dedicated maintainer for each project (although I really wish we could get to that point).
> 
> Kevin touched on this already, but I really think if we make maintaining and growing a Project something that is both honorable and accessible, more people will want to do it.

Okay, so, this is really a tangent, but maybe you could let me know what you think of <http://tm.tl/2372>.

> If you like Python and DNS or SMTP or whatever the hell else, what has the potential to be a more awesome implementation than its Twisted one? Let's help people find out for themselves that the answer is nothing. Then they'll want it to be their project.

If you do this, you will be my hero forever.

OK, I'm going to skip the rest of the reply so that I don't write another book-length thing here, and I agree with most of the rest of what you've said.  So get to it!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110121/538fc99e/attachment.htm 

From exarkun at twistedmatrix.com  Fri Jan 21 22:24:55 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 22 Jan 2011 03:24:55 -0000
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
Message-ID: <20110122032455.1699.1253536780.divmod.xquotient.4@localhost.localdomain>

On 03:00 am, glyph at twistedmatrix.com wrote:
>>Finally, my biggest hurdle right now is not knowing how to find said 
>>branches. I don't see "documentation" as a category in Trac and common 
>>keyword searches didn't show up much for me. I'm sure this is an easy 
>>question to answer, though.
>
><http://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&order=priority&col=id&col=summary&col=status&col=owner&col=type&col=priority&col=milestone&keywords=%7Edocumentation>
>
>There is, unfortunately, no "has branch" column in that report, but it 
>will at least give you some data to work with.

I gave this better URL a few days ago.  Here's an even better one, that 
does have a branch column (and some other arbitrary things I added):

  <http://bit.ly/i4Zj8U>

Jean-Paul


From tom at recursivedream.com  Sat Jan 22 15:18:12 2011
From: tom at recursivedream.com (Tom Davis)
Date: Sat, 22 Jan 2011 15:18:12 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
Message-ID: <AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>

On Fri, Jan 21, 2011 at 10:00 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

> On Jan 20, 2011, at 11:20 PM, Tom Davis wrote:
>
> I definitely agree that resolving the low-hanging fruit first is a good
> idea. For finishing "docs branch X" to make sense, my personal belief is
> that X should:
>
>    - Still be relevant in terms of best practices and simply what's
>    available
>    - If project documentation, have outstanding issues that a passing
>    familiarity with the project [right now] will be sufficient to close them (I
>    could spend time learning one project, or the same time improving *all* the
>    documentation)
>    - Adhere to whatever documentation standards we agree upon, if much is
>    to left to do.
>
> I guess my overall opinion here is that, yes, if relatively minor edits can
> bring a branch close enough to completion that we can get it out there to
> help newcomers *now*, let's do that. If a branch is more of a draft and
> requires a good deal of fleshing out (or is simply stale), it's probably
> worth nailing down the structure and previously mentioned docs standards
> before I just create more work for myself (or others) down the road.
>
>
> If branches that are out there *don't* meet these standards, commenting on
> their tickets and getting them deleted or closed as invalid (as appropriate)
> would be a big help too.  Lots of languishing tickets that nobody knows what
> to do with is not a good thing, and there's plenty of opportunities for
> interested parties to reopen tickets, attach new patches, and object in
> various ways, so you shouldn't be too concerned about stepping on toes.
>  Focus is a valuable commodity.
>

I was wondering to what extent it would be helpful to actually reply to all
the tickets, or just the ones that seem to have actionable next steps. I
will try to find something to ask or opine on in each of the documentation
tickets so we can get them moving along or removed.

Part of my comment about low-hanging fruit was to help you get familiar with
> and integrated into the development process.  Going through the process of
> getting patches reviewed and accepted will be _much_ easier if you go
> through the motions of doing a few trivial things first.  In fact you may
> want to just pick up a couple of trivial non-docs patches as well, which
> might help you on documenting the development process :). <
> bit.ly/easy-twisted-tickets> might help you there.
>

I will find an easy ticket or few to bang out. I just replied here (
http://twistedmatrix.com/trac/ticket/2491) in an attempt to get started on
one that doesn't already have a long history.

After spending about an hour going over the "easy" tickets, it seems many of
them are in odd states. Either they're done and waiting on something
undefined or there is an incomplete debate in the comments or the owner
disappeared or... well, there are lots of examples. Maybe this is just me
being dense or whatever, but I think (at least as a newcomer) I could
mass-update all these tickets with "Guidance!" and it would more often than
not be a relevant comment given the state of the ticket.

Here's a great example of what I'm talking about (and I apologize for the
mid-message digression, but I think it's relevant...):
http://twistedmatrix.com/trac/ticket/4636. This seems totally trivial, but
five months later __all__ was never changed in t.i.main and JP's buildbot
link is broken. Whether the offending class should be removed from __all__
or imported instead was never even mentioned. Anyway, I took a stab at it
and attached a trivial patch so this isn't just another complaint (and it
looks like JP closed it while I was drafting this email, so that's great!).
But I do agree that working tickets would really help document the process!


> Mostly, I really don't want you to write a gigantic pile of new
> documentation and then find, when you're "done", that you missed some nuance
> of the coding standard, or the patch is too big to be reasonably reviewed,
> and that now you have three months of additional work to do before it's all
> *really* done.  Experience with the process will mitigate that problem
> significantly.  (And in fact I hope that you don't actually have a gigantic
> pile of stuff to commit all at once at any point, and can continue this work
> incrementally as a series of small tickets, but I realize that later on some
> of the index reorganization stuff may need to be big.  This is mostly just
> restating what Kevin already said in his message, but it bears repeating.)
>

The more I think about this, the more I agree with you. My initial
inclination was just to start from scratch and move over existing docs that
I found I could use. This doesn't conflict with the reuse I've been
supportive of (and for good reason: there's a lot of decent documentation
already there) but it does conflict with the Twisted development policies.

At the end of the day, I can't really submit patches to existing
documentation until said documentation is in Sphinx form. I guess one way
this could work to the happiness of all involved is:

   1. Get re-org nailed down; basic samples for whatever pages I think
   should have standardized format / elements.
   2. Mixed in here, find existing docs and non-docs tickets to work on
   trunk.
   3. When the re-org structure is ready, create a new branch from whatever
   the current Sphinx conversion branch is (hopefully it'll be "done" at this
   point)
   4. Migrate new structure to branch, moving the existing docs to
   semi-logical-but-possibly-temporary places in the new structure.
   5. Submit tickets / patches against existing documentation in said branch
   to move docs to new(er) locations, submit new TDD-style code samples,
   general edits, new docs, etc.
   6. When everything is complete, submit a final ticket to merge to trunk

Does that make sense or am I still cognitively off the mark in terms of
existing development practices?


> Finally, my biggest hurdle right now is not knowing how to *find* said
> branches. I don't see "documentation" as a category in Trac and common
> keyword searches didn't show up much for me. I'm sure this is an easy
> question to answer, though.
>
>
> <
> http://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&order=priority&col=id&col=summary&col=status&col=owner&col=type&col=priority&col=milestone&keywords=%7Edocumentation
> >
>
> There is, unfortunately, no "has branch" column in that report, but it will
> at least give you some data to work with.
>
>
>  What *should* a newcomer who reads this document know by the end of it?
>
>
> I'm not sure because I can't see how a practical guide to creating
> something so generic really fits in the grand scheme of things. I think if
> you want to create a TCP server from scratch you must first create the
> Universe! In this case, that means learning how Twisted addresses the *
> concept* of a server before ever bothering to write one so generic. My
> general beef is that many documents seem to make an attempt to appeal to
> everybody and in doing so don't sufficiently help anybody. Maybe I can
> justify that claim better with examples of "better" (at least more targeted)
> documents.
>
>
> I don't think you need a clear definition of "better" for this particular
> document, if it doesn't really fit into your scheme; I don't mind if it
> eventually becomes irrelevant.  I just want a clear statement of goals for
> the documentation _in advance_ of writing that new documentation, so that we
> can discuss whether it's actually better for the intended audience or
> whether it's just more suited to a new author's tastes.
>

I will be fleshing out those goals more in the coming days, but some of it
is implicit within the new documentation structure that's already in my
repo. As for a statement of goals when replacing/removing specific
documentation, sure, I can do that as necessary. It's impossible to
completely remove the element of taste but I will certainly avoid the
"because I like this better" argument for making changes.


>
> You will probably have to press us core developers on this one, and you may
>> spark some debates. These tend to sputter out with no clear resolution as
>> everyone is frustrated that nobody's solution (not even their own) is ideal,
>> but you would be doing us all a great service if you really forced us to
>> develop a consensus about certain things (like "what's the best way to build
>> a twisted command-line program", for example) and agree to agree on the
>> current documented "best practice" for those things.
>
>
> Debates are great!
>
>
> Debates *that reach some kind of conclusion* are great :).  Debates that
> just go in circles until everybody feels crappy about the topic aren't.  So
> I'm really just asking you to help us make these debates into the great
> kind.  (The rest of your reply seems to agree with that, I just wanted to be
> clear.)
>

Yeah, as I've already mentioned in this reply, the "limbo syndrome" of many
tickets drives me nuts. I'm sure you guys hate it too, but having somebody
new around who isn't afraid to ruffle some feathers for the greater good and
isn't yet at some "acceptance" level with it should be helpful! That being
said, I will do my best not to be a jerk about it; you guys have been doing
this for much, much longer and I respect that.


>
> The biggest problem with this is that you will find that a very small group
>> of people have created the vast majority of this stuff and don't have time
>> to maintain it all any more :).  We certainly don't have a separate
>> dedicated maintainer for each project (although I really wish we could get
>> to that point).
>
>
> Kevin touched on this already, but I really think if we make maintaining
> and growing a Project something that is both honorable *and* accessible,
> more people will want to do it.
>
>
> Okay, so, this is really a tangent, but maybe you could let me know what
> you think of <http://tm.tl/2372>.
>

Commented in ticket.


>
> If you like Python and DNS or SMTP or whatever the hell else, what has the
> potential to be a more awesome implementation than its Twisted one? Let's
> help people find out for themselves that the answer is *nothing*. Then
> they'll want it to be *their* project.
>
>
> If you do this, you will be my hero forever.
>

Twisted is a naturally-superior Python choice for most supported protocols
by virtue of the fact that most network "stuff" benefits from event-based
solutions. Like, find me a Python DNS server that *isn't* implemented in
Twisted. People have these weird misconceptions about Twisted; it's really
hard to grasp, ugly, unmaintained, etc. Ultimately, I want to correct these
misconceptions, have *twisted.names* show up first on Google for "Python DNS
Server", and all the other shit that really should be the case but isn't.
Resolving these issues should ultimately resolve the problem of maintainers,
community involvement, etc.

I can't promise that in the course of this crusade I won't cause grief by
trying to change things, but I will always strive to have a rational reason
for wanting to do so!


>
> OK, I'm going to skip the rest of the reply so that I don't write another
> book-length thing here, and I agree with most of the rest of what you've
> said.  So get to it!
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110122/2c08432c/attachment-0001.htm 

From tom at recursivedream.com  Sat Jan 22 17:14:55 2011
From: tom at recursivedream.com (Tom Davis)
Date: Sat, 22 Jan 2011 17:14:55 -0500
Subject: [Twisted-Python] Fingering Finger
Message-ID: <AANLkTi=JU2S3eJcn9u=dPq_q_S8=zk=gDgo-SuZGo7pe@mail.gmail.com>

In this thread, I hope to find a resolution to the issue of the Finger
tutorial and efforts to sufficiently improve it or remove it.

In the course of reviewing documentation-related tickets, I stumbled upon
#1148 (http://twistedmatrix.com/trac/ticket/1148). Therein, Glyph first(?)
put down a lot of things we've been discussing and agreeing upon in the
Refactoring Documentation thread. One of the issues still up for debate is
whether or not the Finger tutorial is sufficiently strong to survive the
documentation overhaul. There are various points against it right now:

   - It isn't tested or even test*able*
   - It doesn't cover "best practices" as they relate to writing testable,
   maintainable code, etc.
   - It attempts to implement basically every main Twisted concept, often in
   contrived or poorly-executed ways
   - It has been said it has, "...at best, the potential for mediocrity."

There are also enough tickets related to refactoring / rewriting it that a
resolution would make a significant dent in the list of stale documentation
tickets. Among these two year-old tickets are:

   - http://twistedmatrix.com/trac/ticket/532 - Big jump from finger18.py to
   finger19.py in tutorial
   - http://twistedmatrix.com/trac/ticket/626 - Split tutorial finger code
   into libraries
   - http://twistedmatrix.com/trac/ticket/2205 - Documentation codelistings
   need updating and tests

This shouldn't be a blocker on anything Kevin and I are doing, but it'd be
nice to concurrently have discussions on issues we'll need to address later.
I'm also pretty anal about ticket lists and if these aren't going anywhere
I'd love to close them ;)


Cheers,

Tom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110122/fc67cab4/attachment.htm 

From glyph at twistedmatrix.com  Sat Jan 22 22:02:17 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 22 Jan 2011 22:02:17 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
	<AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>
Message-ID: <C14C24AD-1F27-4745-942A-4DD4853632E5@twistedmatrix.com>


On Jan 22, 2011, at 3:18 PM, Tom Davis wrote:

> On Fri, Jan 21, 2011 at 10:00 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> On Jan 20, 2011, at 11:20 PM, Tom Davis wrote:
> 
> If branches that are out there don't meet these standards, commenting on their tickets and getting them deleted or closed as invalid (as appropriate) would be a big help too.  Lots of languishing tickets that nobody knows what to do with is not a good thing, and there's plenty of opportunities for interested parties to reopen tickets, attach new patches, and object in various ways, so you shouldn't be too concerned about stepping on toes.  Focus is a valuable commodity.
> 
> I was wondering to what extent it would be helpful to actually reply to all the tickets, or just the ones that seem to have actionable next steps. I will try to find something to ask or opine on in each of the documentation tickets so we can get them moving along or removed.

Getting rid of dead tickets is almost as important as actually getting valid tickets moved along.  I think this effort will be hugely valuable.

> Part of my comment about low-hanging fruit was to help you get familiar with and integrated into the development process.  Going through the process of getting patches reviewed and accepted will be _much_ easier if you go through the motions of doing a few trivial things first.  In fact you may want to just pick up a couple of trivial non-docs patches as well, which might help you on documenting the development process :). <bit.ly/easy-twisted-tickets> might help you there.
> 
> I will find an easy ticket or few to bang out. I just replied here (http://twistedmatrix.com/trac/ticket/2491) in an attempt to get started on one that doesn't already have a long history.
> 
> After spending about an hour going over the "easy" tickets, it seems many of them are in odd states. Either they're done and waiting on something undefined or there is an incomplete debate in the comments or the owner disappeared or... well, there are lots of examples. Maybe this is just me being dense or whatever, but I think (at least as a newcomer) I could mass-update all these tickets with "Guidance!" and it would more often than not be a relevant comment given the state of the ticket.

No, this is not you being dense.  At least among the core developers in Boston, this is a widely-recognized and frequently-complained-about problem, and it's something I'd like everyone doing ticket reviews to please think about.

Reviewers: if you make a comment on a ticket, but you don't say what you want to happen next, then you have effectively killed progress on that ticket until some other reviewer comes along and contradicts you to get things moving again.  This is especially true if you make one trivial comment on the ticket and remove the review keyword, but don't say "please address these issues and then merge" or "please address these issues and then resubmit for review".  If you've done a partial review, and made a comment like "I don't like this aspect of the design" or "please update copyright dates" or "your docstring formatting is wrong", please note in your comment that this is not a complete review, and don't remove the review keyword.  Removing the keyword will introduce additional latency for the contributor, when other reviewers might still come along and attach more comprehensive feedback.  There are few things more discouraging than having one free weekend every six months to work on a ticket, and to come back every time to "oops, you forgot to update the copyright date and insert a blank line in one file of your 300-line patch".

So, Tom: mass updating those tickets wouldn't be helpful, but an update every couple of days with a specific question on one of these I-don't-know-what-to-do tickets would be great.  Your question on tm.tl/2491 was a definite step forward.

> Here's a great example of what I'm talking about (and I apologize for the mid-message digression, but I think it's relevant...): http://twistedmatrix.com/trac/ticket/4636. This seems totally trivial, but five months later __all__ was never changed in t.i.main and JP's buildbot link is broken. Whether the offending class should be removed from __all__ or imported instead was never even mentioned. Anyway, I took a stab at it and attached a trivial patch so this isn't just another complaint (and it looks like JP closed it while I was drafting this email, so that's great!). But I do agree that working tickets would really help document the process!

As you have discovered here, drawing attention to a ticket in this "stuck" state will often cause it to get un-stuck.  So please keep doing that.

> Mostly, I really don't want you to write a gigantic pile of new documentation and then find, when you're "done", that you missed some nuance of the coding standard, or the patch is too big to be reasonably reviewed, and that now you have three months of additional work to do before it's all really done.  Experience with the process will mitigate that problem significantly.  (And in fact I hope that you don't actually have a gigantic pile of stuff to commit all at once at any point, and can continue this work incrementally as a series of small tickets, but I realize that later on some of the index reorganization stuff may need to be big.  This is mostly just restating what Kevin already said in his message, but it bears repeating.)
> 
> The more I think about this, the more I agree with you. My initial inclination was just to start from scratch and move over existing docs that I found I could use. This doesn't conflict with the reuse I've been supportive of (and for good reason: there's a lot of decent documentation already there) but it does conflict with the Twisted development policies.
> 
> At the end of the day, I can't really submit patches to existing documentation until said documentation is in Sphinx form.

Aaaaaaaauuuuugh.

When you say this, the first thing I think is "okay then, the sphinx migration is now introducing roadblocks into the documentation process and preventing people from contributing documentation, so let's just cancel it".  So please don't say things like this :).  The whole reason that we insisted on the current process for the sphinx migration was to avoid this kind of blockage.

You can submit documentation patches right now, in Lore format - which, I would like to remind you, is 99% plain-vanilla HTML and very easy to edit - and get them accepted.  You can see on the sphinx buildbot (once a few minor issues are fixed, as discussed earlier in this thread) what those changes will look like once converted to ReST->Sphinx.  Or you can simply run the conversion yourself locally - hopefully Kevin will chime in on how to set that up so I don't need to look it up :).  As long as you aren't trying to do anything fancy with diagrams or tables (and most of the documentation really should not need elaborate diagrams or tables), you shouldn't run into any issues.

Heck, if you want to write your documentation patches as ReST snippets and attach them to tickets, I'm sure you will find many willing contributors (myself included) who will jump in and do the format-munging manually to get them integrated into exiting lore documents so that they can make it to trunk immediately.

Or, you can just jump in with ticket reviews, or breaking up chunk tickets, to move along the Sphinx migration quicker.  But "I will work over here in a corner until somehow this gigantic pile of work gets finished by somebody else" is not a good strategy.  (I'm not saying that that's exactly what you're proposing to do, but the aspects of what your proposing which align with that may not be the best way to proceed.)

> I guess one way this could work to the happiness of all involved is:
> Get re-org nailed down; basic samples for whatever pages I think should have standardized format / elements.
> Mixed in here, find existing docs and non-docs tickets to work on trunk.
> When the re-org structure is ready, create a new branch from whatever the current Sphinx conversion branch is (hopefully it'll be "done" at this point)
> Migrate new structure to branch, moving the existing docs to semi-logical-but-possibly-temporary places in the new structure.
> Submit tickets / patches against existing documentation in said branch to move docs to new(er) locations, submit new TDD-style code samples, general edits, new docs, etc.
> When everything is complete, submit a final ticket to merge to trunk
> Does that make sense or am I still cognitively off the mark in terms of existing development practices?

With the caveat of what I said above, most of these things sound like generally good things to do.  Except, first, I'd still like to see a ticket for what "the re-org" is actually going to be and what the point of it is.  If I've only learned one thing in maintaining Twisted for 10 years, it's that a description of what we are trying to do separate from how we are going to do it early on is essential to make sure that others can give you useful feedback - and, more importantly, provide you with resources.  In this case, those resources would be pointers to other areas in the documentation that you may not have noticed which already do some of what you are trying to do, but may be poorly integrated.

> I will be fleshing out those goals more in the coming days, but some of it is implicit within the new documentation structure that's already in my repo.

$ python -c 'import this' | grep Explicit # :-)

> As for a statement of goals when replacing/removing specific documentation, sure, I can do that as necessary. It's impossible to completely remove the element of taste but I will certainly avoid the "because I like this better" argument for making changes.

Again, this is more about having a good statement of purpose up front, so that everyone is focused on the same thing, than having an argument that you can trot out later once everyone starts nitpicking from a hundred different perspectives :).  Plus, such a statement of purpose can serve as a focus for you as well.

>> You will probably have to press us core developers on this one, and you may spark some debates. These tend to sputter out with no clear resolution as everyone is frustrated that nobody's solution (not even their own) is ideal, but you would be doing us all a great service if you really forced us to develop a consensus about certain things (like "what's the best way to build a twisted command-line program", for example) and agree to agree on the current documented "best practice" for those things.
>> 
>> Debates are great!
> 
> Debates that reach some kind of conclusion are great :).  Debates that just go in circles until everybody feels crappy about the topic aren't.  So I'm really just asking you to help us make these debates into the great kind.  (The rest of your reply seems to agree with that, I just wanted to be clear.)
> 
> Yeah, as I've already mentioned in this reply, the "limbo syndrome" of many tickets drives me nuts. I'm sure you guys hate it too, but having somebody new around who isn't afraid to ruffle some feathers for the greater good and isn't yet at some "acceptance" level with it should be helpful! That being said, I will do my best not to be a jerk about it; you guys have been doing this for much, much longer and I respect that.

Tickets in limbo need to be eliminated.  I think you will find that just about everyone is happy to pick up these discussions with an injection of a little bit of attention and energy from a contributor.  We all know that these sap the will of new contributors and thereby decrease the overall pool of available time, so I think you may have to try really, really hard to actually ruffle any feathers :).

>> If you like Python and DNS or SMTP or whatever the hell else, what has the potential to be a more awesome implementation than its Twisted one? Let's help people find out for themselves that the answer is nothing. Then they'll want it to be their project.
> 
> If you do this, you will be my hero forever.
> 
> Twisted is a naturally-superior Python choice for most supported protocols by virtue of the fact that most network "stuff" benefits from event-based solutions. Like, find me a Python DNS server that isn't implemented in Twisted. People have these weird misconceptions about Twisted; it's really hard to grasp, ugly, unmaintained, etc. Ultimately, I want to correct these misconceptions, have twisted.names show up first on Google for "Python DNS Server", and all the other shit that really should be the case but isn't. Resolving these issues should ultimately resolve the problem of maintainers, community involvement, etc.

+10000.

> I can't promise that in the course of this crusade I won't cause grief by trying to change things, but I will always strive to have a rational reason for wanting to do so!

Please keep the grief coming!  It'll all be worth it, I'm sure :).  Everything that you've said so far that I disagree with has just been an opportunity to communicate some of the Twisted development philosophy which may not yet be written down - and should probably be part of the documentation eventually.  So you have yet to do anything which has put me out even in the slightest.  We need more new contributors feeling comfortable being bold and trying to Just Do It.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110122/c66fbdda/attachment-0001.htm 

From exarkun at twistedmatrix.com  Sun Jan 23 00:05:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 Jan 2011 05:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1295759123.21.1931674779@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110123/e14ac7ef/attachment.htm 

From tom at recursivedream.com  Sun Jan 23 00:36:35 2011
From: tom at recursivedream.com (Tom Davis)
Date: Sun, 23 Jan 2011 00:36:35 -0500
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <1295759123.21.1931674779@twistedmatrix.com>
References: <1295759123.21.1931674779@twistedmatrix.com>
Message-ID: <AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>

>
> Mean open ticket age: 1032 days

Mean time between ticket creation and ticket resolution: 238 days

Mean time spent in review: 83 days


Wow. Adding "reduce these by at least one order of magnitude" to my todo
list. Gotta have goals!

On Sun, Jan 23, 2011 at 12:05 AM, <exarkun at twistedmatrix.com> wrote:

>  Bug summary
> ______________________
> Summary for 2011-01-16 through 2011-01-23
>                   Opened     Closed      Total     Change
> Enhancements:          3          6        690         -3
> Defects:               6          8        547         -2
> Tasks:                 2          7         65         -5
> Regressions:           0          1          1         -1
> Total:                11         22       1303        -11
>
> |== Type Changes   |== Priority Changes   |== Component Changes
> |Defect:       -2  |High:    +1           |Conch:               -1
> |Enhancement:  -3  |Normal:  -4           |Core:                -3
> |Regression:   -1  |Low:     -5           |Mail:                -3
> |Task:         -5  |Lowest:  -3           |Release Management:  -1
>                                           |Trial:               +0
>                                           |Web:                 -1
>                                           |Words:               -2
>
>
> Total TicketsOpen Tickets
>
>
> New / Reopened Bugs
> ______________________
>                     ===== High =====
> [#4810] XMPPClientFactory eating away "subscribe" stanzas. (opened by magicblaze)
>     defect          words      http://twistedmatrix.com/trac/ticket/4810
>
>                     ===== Normal =====
> [#4809] usage.Options should handle error messages in a consistent and user-friendly way (opened by tpratt)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4809
>
> [#4811] @unittest.expectedFailure decorator breaks trial (opened by ivank)
>     defect          trial      http://twistedmatrix.com/trac/ticket/4811
>
> [#4813] provide permissions accessor for filepath (opened by cyli)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4813
>
> [#4814] HTTPClient doesn't handle servers that use \n separators instead of \r\n (opened by jasonjwwilliams) (CLOSED, duplicate)
>     defect          web        http://twistedmatrix.com/trac/ticket/4814
>
> [#4816] twistd --uid without --gid breaks (opened by thobbs) (CLOSED, duplicate)
>     defect          core       http://twistedmatrix.com/trac/ticket/4816
>
> [#4817] IPv4Address and UNIXAddress not-equal comparison is broken (opened by ivank)
>     defect          core       http://twistedmatrix.com/trac/ticket/4817
>
> [#4818] Determine standard structure of Howtos or "Tasks" (opened by binjured)
>     task            core       http://twistedmatrix.com/trac/ticket/4818
>
> [#4712] Missing bits of statinfo accessors in FilePath (opened by cyli) (CLOSED, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4712
>
>                     ===== Low =====
> [#3372] deprecate --extra option to trial (opened by exarkun) (CLOSED, fixed)
>     task            trial      http://twistedmatrix.com/trac/ticket/3372
>
>
>
> Closed Bugs
> ______________________
>                     ===== Normal =====
> [#4054] Delete all of the out-of-date mumbo jumbo from the "im" howto (opened by exarkun, closed by thijs, fixed)
>     defect          words      http://twistedmatrix.com/trac/ticket/4054
>
> [#4773] The core howto index should link to the endpoints howto (opened by exarkun, closed by cyli, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4773
>
> [#4738] ckeygen man page has wrong summary and synopsis (opened by exarkun, closed by cyli, fixed)
>     defect          conch      http://twistedmatrix.com/trac/ticket/4738
>
> [#4740] Use strcred for `twistd mail` authentication options (opened by exarkun, closed by cyli, fixed)
>     enhancement     mail       http://twistedmatrix.com/trac/ticket/4740
>
> [#4712] Missing bits of statinfo accessors in FilePath (opened by cyli, closed by cyli, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4712
>
> [#4786] twcgi duplicate header (opened by lvh, closed by tenth, fixed)
>     regression      web        http://twistedmatrix.com/trac/ticket/4786
>
> [#4042] [Documentation] It is too hard to figure out how to do trivial common-case sending email with twisted.mail (opened by arkanes, closed by thijs, fixed)
>     task            mail       http://twistedmatrix.com/trac/ticket/4042
>
> [#3412] Include link to IMAP Server Tester in Twisted IMAP documentation (opened by biny, closed by thijs, wontfix)
>     task            mail       http://twistedmatrix.com/trac/ticket/3412
>
> [#4491] Release Twisted 10.0.1 (opened by exarkun, closed by thijs, invalid)
>     task            release management http://twistedmatrix.com/trac/ticket/4491
>
> [#4814] HTTPClient doesn't handle servers that use \n separators instead of \r\n (opened by jasonjwwilliams, closed by exarkun, duplicate)
>     defect          web        http://twistedmatrix.com/trac/ticket/4814
>
> [#4816] twistd --uid without --gid breaks (opened by thobbs, closed by exarkun, duplicate)
>     defect          core       http://twistedmatrix.com/trac/ticket/4816
>
>                     ===== Low =====
> [#3372] deprecate --extra option to trial (opened by exarkun, closed by cyli, fixed)
>     task            trial      http://twistedmatrix.com/trac/ticket/3372
>
> [#4363] Remove twisted.words.protocols.toc (opened by amacleod, closed by thijs, fixed)
>     task            words      http://twistedmatrix.com/trac/ticket/4363
>
> [#4007] Remove doc/words/examples/aimbot.py (opened by ivank, closed by thijs, fixed)
>     defect          words      http://twistedmatrix.com/trac/ticket/4007
>
> [#2666] twisted-dev.el should provide a custom variable to specify its tbformat (opened by exarkun, closed by thijs, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/2666
>
> [#4636] wrong __all__ in twisted/internet/main.py (opened by ivank, closed by exarkun, fixed)
>     defect          core       http://twistedmatrix.com/trac/ticket/4636
>
>                     ===== Lowest =====
> [#4547] Remove deprecated twisted.protocols.loopback.loopback (opened by thijs, closed by cyli, fixed)
>     task            core       http://twistedmatrix.com/trac/ticket/4547
>
> [#3375] startService/stopService should cancel pending callLater for clarity in the finger tutorial (opened by helo, closed by thijs, fixed)
>     defect          core       http://twistedmatrix.com/trac/ticket/3375
>
> [#4717] class vs base attribute confusion in finger tutorial (opened by lvh, closed by thijs, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4717
>
>
>
> Ticket Lifetime Stats
> ______________________
> Oldest open ticket - [#50] conch command-line client doesn't work in win32 (since 2003-07-12 16:41:06).
> Newest open ticket - [#4818] Determine standard structure of Howtos or "Tasks" (since 2011-01-22 15:36:58).
>
> Mean open ticket age: 1032 days, 6:34:23.539382.
> Median: 965 days, 23:49:51.394333.
> Standard deviation: 697 days, 6:45:54.312442.
> Interquartile range: 1084 days, 15:28:56.
>
> Mean time between ticket creation and ticket resolution: 238 days, 19:54:23.997105.
> Median: 29 days, 18:24:11.
> Standard deviation is 415 days, 7:27:08.062785.
> The interquartile range is 272 days, 22:58:16.
>
> Mean time spent in review: 83 days, 19:31:18.920363.
> Median: 4 days, 7:37:17.
> Standard deviation: 319 days, 8:37:49.421051.
> Interquartile range: 15 days, 20:47:12.
>
> Mean number of times a ticket is reviewed: 1.98357548958.
> Median: 1
> Standard deviation: 1.6116233214.
> Interquartile range: 1.
>
>
> Contributor Stats
> ______________________
> In the last 4 weeks,
>     21 unique ticket reporters
>     9 unique ticket reviewers
>     5 unique ticket resolvers
> In the last 24 weeks,
>     79 unique ticket reporters
>     14 unique ticket reviewers
>     13 unique ticket resolvers
> In the last 48 weeks,
>     168 unique ticket reporters
>     39 unique ticket reviewers
>     23 unique ticket resolvers
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110123/a6c2548b/attachment-0001.htm 

From glyph at twistedmatrix.com  Sun Jan 23 00:44:53 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 00:44:53 -0500
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>
References: <1295759123.21.1931674779@twistedmatrix.com>
	<AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>
Message-ID: <173CCAE4-22D7-4B0F-847F-7DFB418F0BDC@twistedmatrix.com>


On Jan 23, 2011, at 12:36 AM, Tom Davis wrote:

> Mean open ticket age: 1032 days
> Mean time between ticket creation and ticket resolution: 238 days 
> Mean time spent in review: 83 days 
>  
> Wow. Adding "reduce these by at least one order of magnitude" to my todo list. Gotta have goals!

Dude, you totally buried the lead.

> On Sun, Jan 23, 2011 at 12:05 AM, <exarkun at twistedmatrix.com> wrote:
> Bug summary
> ______________________
> Summary for 2011-01-16 through 2011-01-23
>                   Opened     Closed      Total     Change
> Enhancements:          3          6        690         -3
> Defects:               6          8        547         -2
> Tasks:                 2          7         65         -5
> Regressions:           0          1          1         -1
> Total:                11         22       1303        -11

This is the real story.  Great work everybody!  -11 is a pretty significant week!  (Now let's please do that continuously for 3 years...)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110123/626463e5/attachment.htm 

From tom at recursivedream.com  Sun Jan 23 00:55:10 2011
From: tom at recursivedream.com (Tom Davis)
Date: Sun, 23 Jan 2011 00:55:10 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <C14C24AD-1F27-4745-942A-4DD4853632E5@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
	<AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>
	<C14C24AD-1F27-4745-942A-4DD4853632E5@twistedmatrix.com>
Message-ID: <AANLkTi=qcmf9TocwHspEoQy9Mj0zPKmdmit-F8Pq+iXV@mail.gmail.com>

On Sat, Jan 22, 2011 at 10:02 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

>
> On Jan 22, 2011, at 3:18 PM, Tom Davis wrote:
>
> On Fri, Jan 21, 2011 at 10:00 PM, Glyph Lefkowitz <glyph at twistedmatrix.com
> > wrote:
>
>> On Jan 20, 2011, at 11:20 PM, Tom Davis wrote:
>>
>> If branches that are out there *don't* meet these standards, commenting
>> on their tickets and getting them deleted or closed as invalid (as
>> appropriate) would be a big help too.  Lots of languishing tickets that
>> nobody knows what to do with is not a good thing, and there's plenty of
>> opportunities for interested parties to reopen tickets, attach new patches,
>> and object in various ways, so you shouldn't be too concerned about stepping
>> on toes.  Focus is a valuable commodity.
>>
>
> I was wondering to what extent it would be helpful to actually reply to all
> the tickets, or just the ones that seem to have actionable next steps. I
> will try to find something to ask or opine on in each of the documentation
> tickets so we can get them moving along or removed.
>
>
> Getting rid of dead tickets is almost as important as actually getting
> valid tickets moved along.  I think this effort will be hugely valuable.
>

Will continue commenting on tickets and asserting non-existent power to get
them resolved! ;)


>
> Part of my comment about low-hanging fruit was to help you get familiar
>> with and integrated into the development process.  Going through the process
>> of getting patches reviewed and accepted will be _much_ easier if you go
>> through the motions of doing a few trivial things first.  In fact you may
>> want to just pick up a couple of trivial non-docs patches as well, which
>> might help you on documenting the development process :). <
>> bit.ly/easy-twisted-tickets> might help you there.
>>
>
> I will find an easy ticket or few to bang out. I just replied here (
> http://twistedmatrix.com/trac/ticket/2491) in an attempt to get started on
> one that doesn't already have a long history.
>
> After spending about an hour going over the "easy" tickets, it seems many
> of them are in odd states. Either they're done and waiting on something
> undefined or there is an incomplete debate in the comments or the owner
> disappeared or... well, there are lots of examples. Maybe this is just me
> being dense or whatever, but I think (at least as a newcomer) I could
> mass-update all these tickets with "Guidance!" and it would more often than
> not be a relevant comment given the state of the ticket.
>
>
> No, this is not you being dense.  At least among the core developers in
> Boston, this is a widely-recognized and frequently-complained-about problem,
> and it's something I'd like everyone doing ticket reviews to please think
> about.
>
> Reviewers: if you make a comment on a ticket, but you don't say what you
> want to happen next, then you have effectively killed progress on that
> ticket until some other reviewer comes along and contradicts you to get
> things moving again.  This is especially true if you make one trivial
> comment on the ticket and remove the review keyword, but don't say "please
> address these issues and then merge" or "please address these issues and
> then resubmit for review".  If you've done a partial review, and made a
> comment like "I don't like this aspect of the design" or "please update
> copyright dates" or "your docstring formatting is wrong", please note in
> your comment that this is not a complete review, and *don't* remove the
> review keyword.  Removing the keyword will introduce additional latency for
> the contributor, when other reviewers might still come along and attach more
> comprehensive feedback.  There are few things more discouraging than having
> one free weekend every six months to work on a ticket, and to come back
> every time to "oops, you forgot to update the copyright date and insert a
> blank line in one file of your 300-line patch".
>
> So, Tom: mass updating those tickets wouldn't be helpful, but an update
> every couple of days with a specific question on one of these
> I-don't-know-what-to-do tickets would be great.  Your question on
> tm.tl/2491 was a definite step forward.
>

Awesome! I'm sure a lot of this has to do with the fact that once you
maintain and work on something like this for a decade you take a lot for
granted, especially with regard to your own policies and procedures. It
becomes tedious to provide (or just difficult to enumerate) all the details
necessary to new people. Hopefully as I become more familiar with them I can
ensure some of the tedious/forgotten corners become documented in a way that
makes it easier. And just point out when the current status of something is
way too ambiguous to be actionable for more than a couple folks who are too
busy to deal with it.


>
> Here's a great example of what I'm talking about (and I apologize for the
> mid-message digression, but I think it's relevant...):
> http://twistedmatrix.com/trac/ticket/4636. This seems totally trivial, but
> five months later __all__ was never changed in t.i.main and JP's buildbot
> link is broken. Whether the offending class should be removed from __all__
> or imported instead was never even mentioned. Anyway, I took a stab at it
> and attached a trivial patch so this isn't just another complaint (and it
> looks like JP closed it while I was drafting this email, so that's great!).
> But I do agree that working tickets would really help document the process!
>
>
> As you have discovered here, drawing attention to a ticket in this "stuck"
> state will often cause it to get un-stuck.  So please keep doing that.
>
>  Mostly, I really don't want you to write a gigantic pile of new
>> documentation and then find, when you're "done", that you missed some nuance
>> of the coding standard, or the patch is too big to be reasonably reviewed,
>> and that now you have three months of additional work to do before it's all
>> *really* done.  Experience with the process will mitigate that problem
>> significantly.  (And in fact I hope that you don't actually have a gigantic
>> pile of stuff to commit all at once at any point, and can continue this work
>> incrementally as a series of small tickets, but I realize that later on some
>> of the index reorganization stuff may need to be big.  This is mostly just
>> restating what Kevin already said in his message, but it bears repeating.)
>>
>
> The more I think about this, the more I agree with you. My initial
> inclination was just to start from scratch and move over existing docs that
> I found I could use. This doesn't conflict with the reuse I've been
> supportive of (and for good reason: there's a lot of decent documentation
> already there) but it does conflict with the Twisted development policies.
>
> At the end of the day, I can't really submit patches to existing
> documentation until said documentation is in Sphinx form.
>
>
> Aaaaaaaauuuuugh.
>
> When you say this, the first thing I think is "okay then, the sphinx
> migration is now introducing roadblocks into the documentation process and
> preventing people from contributing documentation, so let's just cancel it".
>  So please don't say things like this :).  The whole reason that we insisted
> on the current process for the sphinx migration was to avoid this kind of
> blockage.
>

Sorry! I didn't mean to suggest the migration is a roadblock. It's
*inconvenient* that it isn't already done, but it's certainly not stopping
anything to the point of cancelation (and doing so would probably do more
harm than good since every new document we *can* convert is one that doesn't
have to be converted manually)


>
> You can submit documentation patches right now, in Lore format - which, I
> would like to remind you, is 99% plain-vanilla HTML and very easy to edit -
> and get them accepted.  You can see on the sphinx buildbot (once a few minor
> issues are fixed, as discussed earlier in this thread) what those changes
> will look like once converted to ReST->Sphinx.  Or you can simply run the
> conversion yourself locally - hopefully Kevin will chime in on how to set
> that up so I don't need to look it up :).  As long as you aren't trying to
> do anything fancy with diagrams or tables (and *most* of the documentation
> really should not need elaborate diagrams or tables), you shouldn't run into
> any issues.
>

Yes, aside from things like toctrees and glossary references, it should be
largely similar (although I tend to get pretty verbose with Sphinx/reST
declarations because they're so handy). However, there will likely be times
where it is either wildly inefficient or flat out impossible to port
something to/from Sphinx.

Specifically, any new/modified documentation that involves messing with code
listings is going to be problematic. The current system calls for multiple
code listing modules with copious code duplication and a general lack of
testability; the new system calls for tested, combined modules who's display
can be managed by Sphinx (see:
http://sphinx.pocoo.org/markup/code.html#includes). I'm sort of at a loss
for what to do in these situations and no simple solution jumps out at me.
Having to make the cognitive switch between "I will write a dozen
incremental, untestable listings" and "I will write compact, TDD listings"
seems like it could cause a lot of latency (and extra work) regardless of
which side of the fence you start on.

Maybe we'll just have to take these sorts of conflicts one at a time and try
to make decisions as quickly as possible as to which require backwards
compatibility and which don't? *shrug*


> Heck, if you want to write your documentation patches as ReST snippets and
> attach them to tickets, I'm sure you will find *many* willing contributors
> (myself included) who will jump in and do the format-munging manually to get
> them integrated into exiting lore documents so that they can make it to
> trunk immediately.
>

That may make sense for some issues. However, I am definitely up for
modifying Lore docs when the changes wouldn't create a significant
discrepancy between formats that would need to be manually resolved later
(see: http://twistedmatrix.com/trac/ticket/2018).


>
> Or, you can just jump in with ticket reviews, or breaking up chunk tickets,
> to move along the Sphinx migration quicker.  But "I will work over here in a
> corner until somehow this gigantic pile of work gets finished by somebody
> else" is not a good strategy.  (I'm not saying that that's exactly what
> you're proposing to do, but the aspects of what your proposing which align
> with that may not be the best way to proceed.)
>

Fair enough. I am trying to split my time equally between current, future,
and new docs issues; I spent all day managing/working tickets and emailing,
for instance. I definitely don't want to create a separatist thing here. :)


>
> I guess one way this could work to the happiness of all involved is:
>
>    1. Get re-org nailed down; basic samples for whatever pages I think
>    should have standardized format / elements.
>    2. Mixed in here, find existing docs and non-docs tickets to work on
>    trunk.
>    3. When the re-org structure is ready, create a new branch from
>    whatever the current Sphinx conversion branch is (hopefully it'll be "done"
>    at this point)
>    4. Migrate new structure to branch, moving the existing docs to
>    semi-logical-but-possibly-temporary places in the new structure.
>    5. Submit tickets / patches against existing documentation in said
>    branch to move docs to new(er) locations, submit new TDD-style code samples,
>    general edits, new docs, etc.
>    6. When everything is complete, submit a final ticket to merge to trunk
>
> Does that make sense or am I still cognitively off the mark in terms of
> existing development practices?
>
>
> With the caveat of what I said above, most of these things sound like
> generally good things to do.  Except, first, I'd still like to see a ticket
> for what "the re-org" is actually going to be and what the point of it is.
>  If I've only learned one thing in maintaining Twisted for 10 years, it's
> that a description of *what we are trying to do* separate from *how we are
> going to do it* early on is essential to make sure that others can give
> you useful feedback - and, more importantly, provide you with resources.  In
> this case, those resources would be pointers to other areas in the
> documentation that you may not have noticed which already do some of what
> you are trying to do, but may be poorly integrated.
>

Okay. I will formalize the reorganization based on what we've already
discussed on here and at the meet-up and hopefully that will make things at
least as clear as mud! I have an official one for the new howto/Task
standardization already (http://twistedmatrix.com/trac/ticket/4818), let me
know if it's at all useful and/or what you mean here.


>
> I will be fleshing out those goals more in the coming days, but some of it
> is implicit within the new documentation structure that's already in my
> repo.
>
>
> $ python -c 'import this' | grep Explicit # :-)
>
> As for a statement of goals when replacing/removing specific documentation,
> sure, I can do that as necessary. It's impossible to completely remove the
> element of taste but I will certainly avoid the "because I like this better"
> argument for making changes.
>
>
> Again, this is more about having a good statement of purpose up front, so
> that everyone is focused on the same thing, than having an argument that you
> can trot out later once everyone starts nitpicking from a hundred different
> perspectives :).  Plus, such a statement of purpose can serve as a focus for
> you as well.
>
>  You will probably have to press us core developers on this one, and you
>>> may spark some debates. These tend to sputter out with no clear
>>> resolution as everyone is frustrated that nobody's solution (not even their
>>> own) is ideal, but you would be doing us all a great service if you really
>>> forced us to develop a consensus about certain things (like "what's the best
>>> way to build a twisted command-line program", for example) and agree to
>>> agree on the current documented "best practice" for those things.
>>
>>
>> Debates are great!
>>
>>
>> Debates *that reach some kind of conclusion* are great :).  Debates that
>> just go in circles until everybody feels crappy about the topic aren't.  So
>> I'm really just asking you to help us make these debates into the great
>> kind.  (The rest of your reply seems to agree with that, I just wanted to be
>> clear.)
>>
>
> Yeah, as I've already mentioned in this reply, the "limbo syndrome" of many
> tickets drives me nuts. I'm sure you guys hate it too, but having somebody
> new around who isn't afraid to ruffle some feathers for the greater good and
> isn't yet at some "acceptance" level with it should be helpful! That being
> said, I will do my best not to be a jerk about it; you guys have been doing
> this for much, much longer and I respect that.
>
>
> Tickets in limbo need to be eliminated.  I think you will find that just
> about everyone is happy to pick up these discussions with an injection of a
> little bit of attention and energy from a contributor.  We all *know* that
> these sap the will of new contributors and thereby decrease the overall pool
> of available time, so I think you may have to try really, really hard to
> actually ruffle any feathers :).
>

Great, I was hoping I wasn't the only person who saw them this way!


>
> If you like Python and DNS or SMTP or whatever the hell else, what has the
>> potential to be a more awesome implementation than its Twisted one? Let's
>> help people find out for themselves that the answer is *nothing*. Then
>> they'll want it to be *their* project.
>>
>>
>> If you do this, you will be my hero forever.
>>
>
> Twisted is a naturally-superior Python choice for most supported protocols
> by virtue of the fact that most network "stuff" benefits from event-based
> solutions. Like, find me a Python DNS server that *isn't* implemented in
> Twisted. People have these weird misconceptions about Twisted; it's really
> hard to grasp, ugly, unmaintained, etc. Ultimately, I want to correct these
> misconceptions, have *twisted.names* show up first on Google for "Python
> DNS Server", and all the other shit that really should be the case but
> isn't. Resolving these issues should ultimately resolve the problem of
> maintainers, community involvement, etc.
>
>
> +10000.
>
> I can't promise that in the course of this crusade I won't cause grief by
> trying to change things, but I will always strive to have a rational reason
> for wanting to do so!
>
>
> Please keep the grief coming!  It'll all be worth it, I'm sure :).
>  Everything that you've said so far that I disagree with has just been an
> opportunity to communicate some of the Twisted development philosophy which
> may not yet be written down - and should probably be part of the
> documentation eventually.  So you have yet to do anything which has put me
> out even in the slightest.  We need more new contributors feeling
> comfortable being bold and trying to Just Do It.
>

That's good to hear! This is probably a discussion for another thread, but
Twisted has always seemed a bit imposing in terms of ease of contribution.
That may be a public relations issue as much as a procedural one, but making
contribution a relatively frictionless, step-by-step process will go a
looooong way to getting more people to do it.

I also think that reviewer conduct is as important as the tone of the
documentation (which should probably start with something like "These are
Twisted's contributor rules and processes. We urge new contributors to start
by simply writing a patch, though."); JP helped me out earlier today (
http://twistedmatrix.com/trac/ticket/4636) by accepting my patch despite a
couple missing details. That gave me a nice sense of accomplishment without
feeling like it was diluted by a few trivial details. I think there is
*very* little cost to these sorts of things because either you just got (a)
a one-time contribution you wouldn't have with a dozen steps, or (b) a new
long-term contributor thanks to quick feedback, appreciation, and
flexibility on the part of the team. But I'm drifting now, so shall drift in
the direction of bed and pick things up tomorrow...


>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110123/ad7723da/attachment-0001.htm 

From glyph at twistedmatrix.com  Sun Jan 23 03:08:41 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 03:08:41 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTi=qcmf9TocwHspEoQy9Mj0zPKmdmit-F8Pq+iXV@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
	<AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>
	<C14C24AD-1F27-4745-942A-4DD4853632E5@twistedmatrix.com>
	<AANLkTi=qcmf9TocwHspEoQy9Mj0zPKmdmit-F8Pq+iXV@mail.gmail.com>
Message-ID: <DEEE7A74-2BB8-473F-AC46-7223028191CF@twistedmatrix.com>


On Jan 23, 2011, at 12:55 AM, Tom Davis wrote:

> But I'm drifting now, so shall drift in the direction of bed and pick things up tomorrow...

I think this thread has reached a nice point of consensus, so rather than keep flooding everybody's inboxes with 'me too', I'm going to withdraw until we have some more specific things to discuss :).

Still excited to see the documentation getting fixed though!



From mithrandi at mithrandi.net  Sun Jan 23 13:06:44 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 23 Jan 2011 20:06:44 +0200
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>
References: <1295759123.21.1931674779@twistedmatrix.com>
	<AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>
Message-ID: <AANLkTimBRu-cFTikAkSircQ=zsXBUn2bfQg2QKsyPYMD@mail.gmail.com>

On Sun, Jan 23, 2011 at 7:36 AM, Tom Davis <tom at recursivedream.com> wrote:
>>
>> Mean open ticket age: 1032 days
>>
>> Mean time between ticket creation and ticket resolution: 238 days
>>
>> Mean time spent in review: 83 days
>
>
> Wow. Adding "reduce these by at least one order of magnitude" to my todo list. Gotta have goals!

I think the median times are a lot more relevant (and also a lot less
horrible-looking).
--
mithrandi, i Ainil en-Balandor, a faer Ambar


From jasonjwwilliams at gmail.com  Sun Jan 23 15:03:23 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Sun, 23 Jan 2011 13:03:23 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
Message-ID: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>

Hi Guys,

I'd like to get ticket 4021 integrated in some fashion into Twisted. Currently, the Twisted Names client issues a "starting" and "stopping" log message on every resolution. It fills up the logs and makes seeing valuable log messages really difficult in the sea of DNS requests. 150,000 resolutions per day is generating 700mb of logs just from the start/stop. 

The problem is actually the UDP datagram transport that Resolver is based on. 4021 proposes to address the issue by wrapping the two log lines with "if self.noisy". 

I'd advocate this solution as it leverages the noisy attribute already expected to tamp down log chattiness. Also, it requires the smallest amount of code change as opposed to implementing a filter on the logging system. 

Honestly this has been a problem for me on more than one project I've used the Names client in. It's just untenable in a project with a high volume. 

Jean-Paul asked me to bring this up for discussion if I wanted to fix it. What do others think?

-J

Sent via iPhone

Is your e-mail Premiere?

From angelo.dellaera at gmail.com  Sun Jan 23 15:45:41 2011
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Sun, 23 Jan 2011 21:45:41 +0100
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
Message-ID: <20110123214541.4b686245@alnitak.communicationvalley.it>

On Sun, 23 Jan 2011 13:03:23 -0700
"Jason J. W. Williams" <jasonjwwilliams at gmail.com> wrote:

> Hi Guys,
> 
> I'd like to get ticket 4021 integrated in some fashion into Twisted.
> Currently, the Twisted Names client issues a "starting" and "stopping"
> log message on every resolution. It fills up the logs and makes seeing
> valuable log messages really difficult in the sea of DNS requests.
> 150,000 resolutions per day is generating 700mb of logs just from the
> start/stop. 
> 
> The problem is actually the UDP datagram transport that Resolver is based
> on. 4021 proposes to address the issue by wrapping the two log lines with
> "if self.noisy". 
> 
> I'd advocate this solution as it leverages the noisy attribute already
> expected to tamp down log chattiness. Also, it requires the smallest
> amount of code change as opposed to implementing a filter on the logging
> system. 
> 
> Honestly this has been a problem for me on more than one project I've
> used the Names client in. It's just untenable in a project with a high
> volume. 
> 
> Jean-Paul asked me to bring this up for discussion if I wanted to fix it.
> What do others think?


Hi Jason,
I have experienced such situation a few times just like you. At first I
used to invoke twistd redirecting logs to /dev/null but then I commented
such Twisted code lines out in order to be able to have useful logs for my
applications. I really think such verbose logging should be turned off 
by default because it is quite useless to the end user and produces huge
amounts of logs which are useless as well.

Cheers,

-- 

Angelo Dell'Aera 'buffer' 
Antifork Research, Inc.	  	http://buffer.antifork.org
Metro Olografix



From jaroslaw.fedewicz at gmail.com  Sun Jan 23 19:11:56 2011
From: jaroslaw.fedewicz at gmail.com (=?utf-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Mon, 24 Jan 2011 02:11:56 +0200
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <20110123214541.4b686245@alnitak.communicationvalley.it>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
Message-ID: <A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>

On Jan 23, 2011, at 22:45 , Angelo Dell'Aera wrote:
> I really think such verbose logging should be turned off 
> by default because it is quite useless to the end user and produces huge
> amounts of logs which are useless as well.
> 
> Cheers,
> 


My 2 cents to this is that responsiveness and performance of an application has turned out to be severely impacted even by console output, disk output of the same data being actually faster. Various tests have consistently shown that being 'distracted' for synchronous write() actually costs noticeable amounts of time.

For example, even a simple extraction of linux-2.6.38-rc2.tar.bz2 with and without -v can tell:

time tar -xvjf linux-2.6.38-rc2.tar.bz2 (console output to a terminal emulator):

real		4m38.434s
user	1m30.148s
sys		0m40.721

time tar -xvjf linux-2.6.38-rc2.tar.bz2 > filelist.txt:

real		3m5.595s (actually faster than console!)
user	1m27.162s
sys		0m35.854s

time tar -xvjf linux-2.6.38-rc2.tar.bz2 > /dev/null:

real		2m57.909s (36% faster, now we're talking business)
user	1m26.851s
sys		0m34.696s

(Non-verbose tar -xjf does not make much difference from piping into /dev/null at least on Mac OS X, but  probably its being written in C and going through less levels of indirection between if(verbose) check and actual output have contributed to that; turning Twisted's logging off completely invariably gave tremendous performance boosts.)

Maybe I'm missing something here, but that's what my experience on several projects said.

(Here was going to be the part where I would actually propose some sort of solution but it turned out to be so stupid on the second sight that I decided to scrap it until I work out the details.)



From glyph at twistedmatrix.com  Sun Jan 23 20:39:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 20:39:18 -0500
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
Message-ID: <C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>


On Jan 23, 2011, at 7:11 PM, Jaros?aw Fedewicz wrote:

> My 2 cents to this is that responsiveness and performance of an application has turned out to be severely impacted even by console output, disk output of the same data being actually faster. Various tests have consistently shown that being 'distracted' for synchronous write() actually costs noticeable amounts of time.

Yes, logging in Twisted is a bit of a mess.

Almost all of these chatty little messages should not be logged to disk.  If they're logged at all, they should be logged as purely structured data for observers to analyze later, not as text messages to go on a log file.

Something like this, maybe:

    log.msg(interface=INameResolutionLogEvent, name=domain, recordType=type)

This will allow log observers to listen for events with event['interface'] == INameResolutionLogEvent, but won't trigger a synchronous write().

One of my dream features for Twisted's logging system is to get ring-buffer logging, like Foolscap has - <http://foolscap.lothar.com/docs/logging.html>.  Also, to log a lot less text and a lot more structured stuff that can be examined later without big piles of regular expressions.  I'd be happy to describe this in more detail if anyone would like to try to make systematic improvements to our logging subsystem or Twisted's internal use of it :).

In the meanwhile, I think it would be OK to just remove these messages entirely.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110123/9091ae6d/attachment.htm 

From jasonjwwilliams at gmail.com  Sun Jan 23 21:21:28 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Sun, 23 Jan 2011 19:21:28 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
Message-ID: <AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>

On Sun, Jan 23, 2011 at 6:39 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:

> Yes, logging in Twisted is a bit of a mess.
> Almost all of these chatty little messages should not be logged to disk. ?If
> they're logged at all, they should be logged as purely structured data for
> observers to analyze later, not as text messages to go on a log file.
> Something like this, maybe:
> ?? ?log.msg(interface=INameResolutionLogEvent, name=domain, recordType=type)
> This will allow log observers to listen for events with event['interface']
> ==?INameResolutionLogEvent, but won't trigger a synchronous write().
> One of my dream features for Twisted's logging system is to get ring-buffer
> logging, like Foolscap has - <http://foolscap.lothar.com/docs/logging.html>.
> ?Also, to log a lot less text and a lot more structured stuff that can be
> examined later without big piles of regular expressions. ?I'd be happy to
> describe this in more detail if anyone would like to try to make systematic
> improvements to our logging subsystem or Twisted's internal use of it :).
> In the meanwhile, I think it would be OK to just remove these messages
> entirely.


During dev I do like being able to see the "starting/stopping"
messages...helps you know what's going on when you're debugging.

Would it be that bad to just use a noisy check to toggle these on and
off until a better logging system is available?

-J


From glyph at twistedmatrix.com  Sun Jan 23 21:27:46 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 21:27:46 -0500
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
Message-ID: <EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>


On Jan 23, 2011, at 9:21 PM, Jason J. W. Williams wrote:

> Would it be that bad to just use a noisy check to toggle these on and
> off until a better logging system is available?

No, that sounds like a fine solution for the interim.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110123/2fdcde93/attachment.htm 

From jasonjwwilliams at gmail.com  Sun Jan 23 21:29:59 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Sun, 23 Jan 2011 19:29:59 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
Message-ID: <AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>

On Sun, Jan 23, 2011 at 7:27 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Jan 23, 2011, at 9:21 PM, Jason J. W. Williams wrote:
>
> Would it be that bad to just use a noisy check to toggle these on and
> off until a better logging system is available?
>
> No, that sounds like a fine solution for the interim.


OK so the only other question is, should noisy default to True or
False? If we all can agree on that, I'll make the patch match and add
tests.

-J


From glyph at twistedmatrix.com  Sun Jan 23 21:43:39 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 21:43:39 -0500
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
Message-ID: <B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>


On Jan 23, 2011, at 9:29 PM, Jason J. W. Williams wrote:

> On Sun, Jan 23, 2011 at 7:27 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> 
>> On Jan 23, 2011, at 9:21 PM, Jason J. W. Williams wrote:
>> 
>> Would it be that bad to just use a noisy check to toggle these on and
>> off until a better logging system is available?
>> 
>> No, that sounds like a fine solution for the interim.
> 
> 
> OK so the only other question is, should noisy default to True or
> False? If we all can agree on that, I'll make the patch match and add
> tests.
> 
> -J

Personally I'd say 'false'.  This is technically a change in behavior, but I don't think that we should make guarantees about emitted log messages.  Practically speaking, I've never seen any code which would care about an unstructured log message.  Anyone else object to changing it?

From glyph at twistedmatrix.com  Sun Jan 23 21:55:21 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 21:55:21 -0500
Subject: [Twisted-Python] incomplete reviews
Message-ID: <8A32F6E6-9225-4335-B6B8-36668E8DFF86@twistedmatrix.com>

Some reviewers (you know who you are!) have gotten into the habit of doing incomplete reviews, that note one or two trivial things about a patch or branch, but don't say whether the code is ready to land after fixing just those trivial things.

I've updated the review process documentation to address this, so every reviewer, please have a look:

<http://twistedmatrix.com/trac/wiki/ReviewProcess?action=diff&version=44>

From p.mayers at imperial.ac.uk  Mon Jan 24 05:40:52 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 24 Jan 2011 10:40:52 +0000
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>	<20110123214541.4b686245@alnitak.communicationvalley.it>	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
Message-ID: <4D3D5734.1080301@imperial.ac.uk>

On 01/24/2011 02:43 AM, Glyph Lefkowitz wrote:
>
> Personally I'd say 'false'.  This is technically a change in
> behavior, but I don't think that we should make guarantees about
> emitted log messages.  Practically speaking, I've never seen any code
> which would care about an unstructured log message.  Anyone else
> object to changing it?

I'm strongly in favour of setting noisy to False on all factory objects; 
I find their logging tedious, and have a bunch of monkeypatch code in 
most of my projects to import the modules and set the class variable, to 
I don't have to subclass just to do that.

The structured logging proposal sounds interesting and I'm potentially 
willing to give it a go. However, it seems like it would be a lot of 
work and that it would be very likely to sit in Trac review limbo for a 
while (getting ever-harder to merge the branch back in).

(This is not intended as a criticism - merely an observation that even 
tickets for simple problems with patches take a while to get reviewed, 
as manpower is of course a precious and scarce resource)

Do you have any thoughts on how it could be broken down into smaller chunks?


From exarkun at twistedmatrix.com  Mon Jan 24 08:48:27 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 Jan 2011 13:48:27 -0000
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <4D3D5734.1080301@imperial.ac.uk>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
Message-ID: <20110124134827.1699.95546297.divmod.xquotient.229@localhost.localdomain>

On 10:40 am, p.mayers at imperial.ac.uk wrote:
>On 01/24/2011 02:43 AM, Glyph Lefkowitz wrote:
>>
>>Personally I'd say 'false'.  This is technically a change in
>>behavior, but I don't think that we should make guarantees about
>>emitted log messages.  Practically speaking, I've never seen any code
>>which would care about an unstructured log message.  Anyone else
>>object to changing it?
>
>I'm strongly in favour of setting noisy to False on all factory 
>objects;
>I find their logging tedious, and have a bunch of monkeypatch code in
>most of my projects to import the modules and set the class variable, 
>to
>I don't have to subclass just to do that.
>
>The structured logging proposal sounds interesting and I'm potentially
>willing to give it a go. However, it seems like it would be a lot of
>work and that it would be very likely to sit in Trac review limbo for a
>while (getting ever-harder to merge the branch back in).

I don't think it would be a lot of work.  Glyph already implemented 
1/3rd of it in a previous email in this thread.  The rest is adding a 
dict of lists of observers to LogPublisher (replacing the current list 
of observers) and obviously writing some unit tests.
>(This is not intended as a criticism - merely an observation that even
>tickets for simple problems with patches take a while to get reviewed,
>as manpower is of course a precious and scarce resource)
>
>Do you have any thoughts on how it could be broken down into smaller 
>chunks?

All of the actual log messages throughout Twisted should *not* be 
changed at once.  They should be changed incrementally, as people care 
about them or work on code related to them.

Jean-Paul


From jasonjwwilliams at gmail.com  Mon Jan 24 12:24:21 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 24 Jan 2011 10:24:21 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <4D3D5734.1080301@imperial.ac.uk>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
Message-ID: <AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>

If there's no objections the rest of today, I'll make sure the 4021
patch still applies and see what could be done as a test.

-J

On Mon, Jan 24, 2011 at 3:40 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 01/24/2011 02:43 AM, Glyph Lefkowitz wrote:
>>
>> Personally I'd say 'false'. ?This is technically a change in
>> behavior, but I don't think that we should make guarantees about
>> emitted log messages. ?Practically speaking, I've never seen any code
>> which would care about an unstructured log message. ?Anyone else
>> object to changing it?
>
> I'm strongly in favour of setting noisy to False on all factory objects;
> I find their logging tedious, and have a bunch of monkeypatch code in
> most of my projects to import the modules and set the class variable, to
> I don't have to subclass just to do that.
>
> The structured logging proposal sounds interesting and I'm potentially
> willing to give it a go. However, it seems like it would be a lot of
> work and that it would be very likely to sit in Trac review limbo for a
> while (getting ever-harder to merge the branch back in).
>
> (This is not intended as a criticism - merely an observation that even
> tickets for simple problems with patches take a while to get reviewed,
> as manpower is of course a precious and scarce resource)
>
> Do you have any thoughts on how it could be broken down into smaller chunks?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From exarkun at twistedmatrix.com  Mon Jan 24 13:09:24 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 Jan 2011 18:09:24 -0000
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
Message-ID: <20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>

On 05:24 pm, jasonjwwilliams at gmail.com wrote:
>If there's no objections the rest of today, I'll make sure the 4021
>patch still applies and see what could be done as a test.

I think it would be sad to lose the port starting up log messages. 
Sure, they're a nuisance if you start and stop 50k ports per second. 
However, they're just what you want if you have a boring server that 
starts one or two ports in the entire lifetime of your application.

For clients, the common case is to start and stop many connectors over 
the lifetime of an application, so it sounds slightly more tolerable to 
disable these by default.  However, even for clients I've found these 
messages useful.  For example they've revealed bugs in buildbot's 
reconnection code.

So I doubt it's a pure win to disable these by default (just like it's 
not a pure win to have them enabled by default).

As long as someone's going to touch this code, it seems like it would be 
better to just implement structured logging.  This doesn't even have to 
mean changes to LogPublisher.  It could mean replacing:

  log.msg("%s starting on %s"%(self.protocol.__class__, 
self._realPortNumber))

with:

  log.msg(
      event_source=self,
      event_type="start",
      protocol=self.protocol,
      port_number=self._realPortNumber)

(and documenting and testing).  It may well be nice to have LogPublisher 
be able to dispatch these more efficiently, but that's just an 
optimization.

This still has the effect of disabling the messages by default.  And 
(for now) it's even harder to turn them back on (you need a log observer 
that can report about these events, instead of just setting a flag). 
But it's better in the long run, right?

Jean-Paul
>-J
>
>On Mon, Jan 24, 2011 at 3:40 AM, Phil Mayers <p.mayers at imperial.ac.uk> 
>wrote:
>>On 01/24/2011 02:43 AM, Glyph Lefkowitz wrote:
>>>
>>>Personally I'd say 'false'. ?This is technically a change in
>>>behavior, but I don't think that we should make guarantees about
>>>emitted log messages. ?Practically speaking, I've never seen any code
>>>which would care about an unstructured log message. ?Anyone else
>>>object to changing it?
>>
>>I'm strongly in favour of setting noisy to False on all factory 
>>objects;
>>I find their logging tedious, and have a bunch of monkeypatch code in
>>most of my projects to import the modules and set the class variable, 
>>to
>>I don't have to subclass just to do that.
>>
>>The structured logging proposal sounds interesting and I'm potentially
>>willing to give it a go. However, it seems like it would be a lot of
>>work and that it would be very likely to sit in Trac review limbo for 
>>a
>>while (getting ever-harder to merge the branch back in).
>>
>>(This is not intended as a criticism - merely an observation that even
>>tickets for simple problems with patches take a while to get reviewed,
>>as manpower is of course a precious and scarce resource)
>>
>>Do you have any thoughts on how it could be broken down into smaller 
>>chunks?
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From jasonjwwilliams at gmail.com  Mon Jan 24 13:18:41 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 24 Jan 2011 11:18:41 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
	<20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
Message-ID: <AANLkTimD=wONP0u6Sz78V0M+DUqPtNd3t26Oxir+VGuZ@mail.gmail.com>

In my opinion this has been a problem for a very long time, and it
would be better to have a correction that fits the majority of cases
with a small code change now rather than wait for the perfect log
system. These changes don't preclude a better logger and way of
filtering these out in the future. self.noisy may be viewed as a hack,
but honestly it's worked well for me and it's easy to understand what
it does.

If the compromise is the 4021 patch (wrapping with "if self.noisy"),
with noisy defaulting to True, I think that's a good solution today
without precluding the perfect solution when someone wants to build
it.

-J

On Mon, Jan 24, 2011 at 11:09 AM,  <exarkun at twistedmatrix.com> wrote:
> On 05:24 pm, jasonjwwilliams at gmail.com wrote:
>>
>> If there's no objections the rest of today, I'll make sure the 4021
>> patch still applies and see what could be done as a test.
>
> I think it would be sad to lose the port starting up log messages. Sure,
> they're a nuisance if you start and stop 50k ports per second. However,
> they're just what you want if you have a boring server that starts one or
> two ports in the entire lifetime of your application.
>
> For clients, the common case is to start and stop many connectors over the
> lifetime of an application, so it sounds slightly more tolerable to disable
> these by default. ?However, even for clients I've found these messages
> useful. ?For example they've revealed bugs in buildbot's reconnection code.
>
> So I doubt it's a pure win to disable these by default (just like it's not a
> pure win to have them enabled by default).
>
> As long as someone's going to touch this code, it seems like it would be
> better to just implement structured logging. ?This doesn't even have to mean
> changes to LogPublisher. ?It could mean replacing:
>
> ?log.msg("%s starting on %s"%(self.protocol.__class__,
> self._realPortNumber))
>
> with:
>
> ?log.msg(
> ? ? event_source=self,
> ? ? event_type="start",
> ? ? protocol=self.protocol,
> ? ? port_number=self._realPortNumber)
>
> (and documenting and testing). ?It may well be nice to have LogPublisher be
> able to dispatch these more efficiently, but that's just an optimization.
>
> This still has the effect of disabling the messages by default. ?And (for
> now) it's even harder to turn them back on (you need a log observer that can
> report about these events, instead of just setting a flag). But it's better
> in the long run, right?
>
> Jean-Paul
>>
>> -J
>>
>> On Mon, Jan 24, 2011 at 3:40 AM, Phil Mayers <p.mayers at imperial.ac.uk>
>> wrote:
>>>
>>> On 01/24/2011 02:43 AM, Glyph Lefkowitz wrote:
>>>>
>>>> Personally I'd say 'false'. ?This is technically a change in
>>>> behavior, but I don't think that we should make guarantees about
>>>> emitted log messages. ?Practically speaking, I've never seen any code
>>>> which would care about an unstructured log message. ?Anyone else
>>>> object to changing it?
>>>
>>> I'm strongly in favour of setting noisy to False on all factory objects;
>>> I find their logging tedious, and have a bunch of monkeypatch code in
>>> most of my projects to import the modules and set the class variable, to
>>> I don't have to subclass just to do that.
>>>
>>> The structured logging proposal sounds interesting and I'm potentially
>>> willing to give it a go. However, it seems like it would be a lot of
>>> work and that it would be very likely to sit in Trac review limbo for a
>>> while (getting ever-harder to merge the branch back in).
>>>
>>> (This is not intended as a criticism - merely an observation that even
>>> tickets for simple problems with patches take a while to get reviewed,
>>> as manpower is of course a precious and scarce resource)
>>>
>>> Do you have any thoughts on how it could be broken down into smaller
>>> chunks?
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


From jaroslaw.fedewicz at gmail.com  Mon Jan 24 13:25:49 2011
From: jaroslaw.fedewicz at gmail.com (Yaroslav Fedevych)
Date: Mon, 24 Jan 2011 20:25:49 +0200
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
	<20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
Message-ID: <BBA55E07-BFCF-4E55-B9EE-6FF192CC2386@gmail.com>


On Jan 24, 2011, at 8:09 PM, exarkun at twistedmatrix.com wrote:

> On 05:24 pm, jasonjwwilliams at gmail.com wrote:
>> If there's no objections the rest of today, I'll make sure the 4021
>> patch still applies and see what could be done as a test.
> 
> I think it would be sad to lose the port starting up log messages. Sure, they're a nuisance if you start and stop 50k ports per second. However, they're just what you want if you have a boring server that starts one or two ports in the entire lifetime of your application.

I think the fail of it all is that all factories, by default, are noisy unless explicitly declared quiet, without an option to be quiet unless explicitly declared noisy.

I've had this problem with t.web. Sure it's good to have every access logged the moment it arrives, especially if it's just your plain old boring webserver, but it stops being fun when the server is tasked to interface with a special client software which is expected to routinely make 1000?2000 requests per second. I've never made it to 1000 per second on decent hardware, and that's sad. Now the project is in Perl, it has some scalability and codebase issues, but at least it copes with event pressure. :-(

It would surely be nice to have a logger which flushes out, say, every 2000 messages or every few seconds, whichever comes first (it would be a lot more filesystem efficient), suitable if you have a freaking lot of events, you need to log them all and you are not stock broker (in which case integrity really prevails over speed) or you have the integrity taken care about elsewhere (say it's in a postgresql database with good settings).

The sad thing is that I haven't figured out how to make my own logger, how to tell everything to use it and how to shut irrelevant server parts up without hacks. Maybe folks refactoring the documentation will come up with something.

-- 
Yaroslav Fedevych
Software Developer and Consultant
jaroslaw.fedewicz at gmail.com
+380685061839, +380969783173



From ddwiggins at advpubtech.com  Mon Jan 24 14:26:54 2011
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Mon, 24 Jan 2011 11:26:54 -0800
Subject: [Twisted-Python] Porting twisted methods to a synchronous
	environment
Message-ID: <ihkjpv$ika$1@dough.gmane.org>

I have a server that provides access to a database in the usual way, 
using adbapi to talk to an MSSQL server.  Now, I'm facing the need to 
create an application that can access the server directly.  (In addition 
to, not instead of.)

In the spirit of "write it once", I'd like to be able to "import" the 
server's database read/write methods into a module in the application, 
possibly driven by a reactor of some sort.  In this case, there'd be no 
client/server protocol, just calls from other modules in the application.

I realize that this is pretty vague; I'm still in the process of 
conceptualizing it.  I'm looking for any advice that might help avoid 
the all-too-obvious approach of copying code and performing surgery on 
it, with the all-too-well-known drawbacks.

Thanks for any good words,

-- 

Don Dwiggins
Advanced Publishing Technology




From exarkun at twistedmatrix.com  Mon Jan 24 14:30:21 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 Jan 2011 19:30:21 -0000
Subject: [Twisted-Python] Custom log observer (was Re: Names DNS Client
	too	chatty)
In-Reply-To: <BBA55E07-BFCF-4E55-B9EE-6FF192CC2386@gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
	<20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
	<BBA55E07-BFCF-4E55-B9EE-6FF192CC2386@gmail.com>
Message-ID: <20110124193021.1699.1567199901.divmod.xquotient.351@localhost.localdomain>

On 06:25 pm, jaroslaw.fedewicz at gmail.com wrote:
>
>It would surely be nice to have a logger which flushes out, say, every 
>2000 messages or every few seconds, whichever comes first (it would be 
>a lot more filesystem efficient), suitable if you have a freaking lot 
>of events, you need to log them all and you are not stock broker (in 
>which case integrity really prevails over speed) or you have the 
>integrity taken care about elsewhere (say it's in a postgresql database 
>with good settings).
>
>The sad thing is that I haven't figured out how to make my own logger, 
>how to tell everything to use it and how to shut irrelevant server 
>parts up without hacks. Maybe folks refactoring the documentation will 
>come up with something.

http://twistedmatrix.com/documents/current/core/howto/logging.html 
should answer at least a couple of those questions.

Jean-Paul


From kevin.horn at gmail.com  Mon Jan 24 15:27:37 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 24 Jan 2011 14:27:37 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <DEEE7A74-2BB8-473F-AC46-7223028191CF@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
	<AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>
	<C14C24AD-1F27-4745-942A-4DD4853632E5@twistedmatrix.com>
	<AANLkTi=qcmf9TocwHspEoQy9Mj0zPKmdmit-F8Pq+iXV@mail.gmail.com>
	<DEEE7A74-2BB8-473F-AC46-7223028191CF@twistedmatrix.com>
Message-ID: <AANLkTi=vB_1FweiBDEHAe2D9PGEKqaVWv_-f5zcqK3GQ@mail.gmail.com>

On Sun, Jan 23, 2011 at 2:08 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 23, 2011, at 12:55 AM, Tom Davis wrote:
>
> > But I'm drifting now, so shall drift in the direction of bed and pick
> things up tomorrow...
>
> I think this thread has reached a nice point of consensus, so rather than
> keep flooding everybody's inboxes with 'me too', I'm going to withdraw until
> we have some more specific things to discuss :).
>
>
Agreed, so I won't reply point by point, but I will just mention this"

As of about 5 mins ago, with exarkun's kind assistance, the sphinx builder
appears to be fixed:

http://buildbot.twistedmatrix.com/builds/sphinx-html/sphinx-html-15731/


> Still excited to see the documentation getting fixed though!
>
>
>
Yesyesyes!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110124/f8e0d105/attachment-0001.htm 

From kevin.horn at gmail.com  Mon Jan 24 15:33:31 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 24 Jan 2011 14:33:31 -0600
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <173CCAE4-22D7-4B0F-847F-7DFB418F0BDC@twistedmatrix.com>
References: <1295759123.21.1931674779@twistedmatrix.com>
	<AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>
	<173CCAE4-22D7-4B0F-847F-7DFB418F0BDC@twistedmatrix.com>
Message-ID: <AANLkTi=xECbm+9fTFGB2DOXzHr3EEGO+TSROT5=gOgAm@mail.gmail.com>

On Sat, Jan 22, 2011 at 11:44 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

>
> On Jan 23, 2011, at 12:36 AM, Tom Davis wrote:
>
> Mean open ticket age: 1032 days
>
> Mean time between ticket creation and ticket resolution: 238 days
>
> Mean time spent in review: 83 days
>
>
> Wow. Adding "reduce these by at least one order of magnitude" to my todo
> list. Gotta have goals!
>
>
> Dude, you totally buried the lead.
>

Agreed, this is fantastic!


>
> On Sun, Jan 23, 2011 at 12:05 AM, <exarkun at twistedmatrix.com> wrote:
>
>> Bug summary
>> ______________________
>> Summary for 2011-01-16 through 2011-01-23
>>                   Opened     Closed      Total     Change
>> Enhancements:          3          6        690         -3
>> Defects:               6          8        547         -2
>> Tasks:                 2          7         65         -5
>> Regressions:           0          1          1         -1
>> Total:                11         22       1303        -11
>>
>> *This* is the real story.  Great work everybody!  -11 is a pretty
> significant week!  (Now let's please do that continuously for 3 years...)
>
>
>
Hopefully we'll have a big drop in open Lore & docs tickets soon...hopefully

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110124/5c511996/attachment.htm 

From phil at bubblehouse.org  Mon Jan 24 15:45:58 2011
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 24 Jan 2011 15:45:58 -0500
Subject: [Twisted-Python] Porting twisted methods to a synchronous
	environment
In-Reply-To: <ihkjpv$ika$1@dough.gmane.org>
References: <ihkjpv$ika$1@dough.gmane.org>
Message-ID: <1C271909-9742-41B4-ACCD-01B5BEC11D77@bubblehouse.org>

On Jan 24, 2011, at 2:26 PM, Don Dwiggins wrote:
> I have a server that provides access to a database in the usual way, 
> using adbapi to talk to an MSSQL server.  Now, I'm facing the need to 
> create an application that can access the server directly.  (In addition 
> to, not instead of.)

Why do you need to "port twisted methods to a syncronous environment"? Why can't you just write your app asynchronously?

-phil



From glyph at twistedmatrix.com  Tue Jan 25 00:01:04 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 25 Jan 2011 00:01:04 -0500
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <AANLkTimD=wONP0u6Sz78V0M+DUqPtNd3t26Oxir+VGuZ@mail.gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
	<20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
	<AANLkTimD=wONP0u6Sz78V0M+DUqPtNd3t26Oxir+VGuZ@mail.gmail.com>
Message-ID: <06F2DF10-BDAE-4CC8-9AB0-C17973A92B2D@twistedmatrix.com>


On Jan 24, 2011, at 1:18 PM, Jason J. W. Williams wrote:

> In my opinion this has been a problem for a very long time, and it
> would be better to have a correction that fits the majority of cases
> with a small code change now rather than wait for the perfect log
> system. These changes don't preclude a better logger and way of
> filtering these out in the future. self.noisy may be viewed as a hack,
> but honestly it's worked well for me and it's easy to understand what
> it does.
> 
> If the compromise is the 4021 patch (wrapping with "if self.noisy"),
> with noisy defaulting to True, I think that's a good solution today
> without precluding the perfect solution when someone wants to build
> it.

While I agree with the general sentiment (incremental improvements that can be done now are pretty much always better than gigantic overhauls that have to be put off until later) the current logging system is already pretty much designed for this, we're just not using it right.  Trimming JP's message a bit to just the key part:

>> This doesn't even have to mean changes to LogPublisher.  It could mean replacing:
>> 
>>  log.msg("%s starting on %s"%(self.protocol.__class__,
>> self._realPortNumber))
>> 
>> with:
>> 
>>  log.msg(
>>     event_source=self,
>>     event_type="start",
>>     protocol=self.protocol,
>>     port_number=self._realPortNumber)
>> 
>> (and documenting and testing).  It may well be nice to have LogPublisher be
>> able to dispatch these more efficiently, but that's just an optimization.


That is _literally_ all that needs to be done to preserve the functionality JP likes.  You don't have to change the implementation of log.msg: it already accepts **kw, specifically for this reason.  A message logged in this manner (with no "message" or "format" event key) will produce no text output in the log.  So the amount of work involved is really just writing one line of code.  Which JP already wrote, here.  It just needs a unit test and a review :).

I do wonder why he went with the PEP8-style underscore parameter names rather than Twisted-style intercapped names though :).

-glyph

P.S.: In the future, please reply inline, it's standard etiquette for this list.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110125/3dd8ea31/attachment.htm 

From jasonjwwilliams at gmail.com  Tue Jan 25 12:54:56 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 25 Jan 2011 10:54:56 -0700
Subject: [Twisted-Python] HTTPClient handling LF only servers
Message-ID: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>

Hi Y'all,

Certain servers (notably Hacker News) break HTTPClient because they use LF instead of CRLF to terminate header lines. I've uploaded a patch with tests to ticket 4814 (merged into ticket 2842). 

I'd appreciate a review and some discussion about integrating it. 

-J

Sent via iPhone

Is your e-mail Premiere?

From ddwiggins at advpubtech.com  Tue Jan 25 14:06:22 2011
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 25 Jan 2011 11:06:22 -0800
Subject: [Twisted-Python] Porting twisted methods to a synchronous
	environment
In-Reply-To: <1C271909-9742-41B4-ACCD-01B5BEC11D77@bubblehouse.org>
References: <ihkjpv$ika$1@dough.gmane.org>
	<1C271909-9742-41B4-ACCD-01B5BEC11D77@bubblehouse.org>
Message-ID: <ihn6vf$hlo$1@dough.gmane.org>

On 1/24/2011 12:45 PM, Phil Christensen wrote:
> On Jan 24, 2011, at 2:26 PM, Don Dwiggins wrote:
>> I have a server that provides access to a database in the usual way,
>> using adbapi to talk to an MSSQL server.  Now, I'm facing the need to
>> create an application that can access the server directly.  (In addition
>> to, not instead of.)
> Why do you need to "port twisted methods to a syncronous environment"? Why can't you just write your app asynchronously?

Well, yes, the message subject is a bit misleading.  I was trying to 
think of a way that the async methods in the server could be imported 
directly into the app.  I later remembered a Wiki page on integrating 
Twisted's reactor into a wx app; I think that'll give me what I need.

-- 

Don Dwiggins
Advanced Publishing Technology




From kevin.horn at gmail.com  Tue Jan 25 14:23:59 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 25 Jan 2011 13:23:59 -0600
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
Message-ID: <AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>

On Tue, Jan 25, 2011 at 11:54 AM, Jason J. W. Williams <
jasonjwwilliams at gmail.com> wrote:

> Hi Y'all,
>
>
Howdy, Jason!



> Certain servers (notably Hacker News) break HTTPClient because they use LF
> instead of CRLF to terminate header lines. I've uploaded a patch with tests
> to ticket 4814 (merged into ticket 2842).
>
> I'd appreciate a review and some discussion about integrating it.
>
> -J
>
>
I'm not really in a position to do a review right now, but since:

1) 4814 is effectively a duplicate of 2842
2) 4814 has a clear problem decription
3) 4814 has a patch
4) 2842 is old, and confusing

Can we go ahead and close 2842 in favor of 4814?  We have too many old
tickets floating around...

(To be clear, I'm not asking Jason to close this ticket...I'm asking for the
list's opinion)

Also 3833 is at least similar, if not another duplicate.  It would be nice
if it could be worked on and/or closed along with this issue.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110125/835c3841/attachment.htm 

From tom at recursivedream.com  Tue Jan 25 14:43:07 2011
From: tom at recursivedream.com (Tom Davis)
Date: Tue, 25 Jan 2011 14:43:07 -0500
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
Message-ID: <AANLkTi=1KTHOFXcWcorX4oUFuhWiu56iuofyQVBYzQ7Q@mail.gmail.com>

On Tue, Jan 25, 2011 at 2:23 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Tue, Jan 25, 2011 at 11:54 AM, Jason J. W. Williams <
> jasonjwwilliams at gmail.com> wrote:
>
>> Hi Y'all,
>>
>>
> Howdy, Jason!
>
>
>
>> Certain servers (notably Hacker News) break HTTPClient because they use LF
>> instead of CRLF to terminate header lines. I've uploaded a patch with tests
>> to ticket 4814 (merged into ticket 2842).
>>
>> I'd appreciate a review and some discussion about integrating it.
>>
>> -J
>>
>>
> I'm not really in a position to do a review right now, but since:
>
> 1) 4814 is effectively a duplicate of 2842
> 2) 4814 has a clear problem decription
> 3) 4814 has a patch
> 4) 2842 is old, and confusing


> Can we go ahead and close 2842 in favor of 4814?  We have too many old
> tickets floating around...
>
> (To be clear, I'm not asking Jason to close this ticket...I'm asking for
> the list's opinion)
>

I most certainly agree that 4814 is the more relevant, actionable ticket.
2842 is marred in now-useless history and requires reading through 13
comments just to get to the current point of the ticket as the summary and
description give no indication of it.

4814 is more like a new building constructed on top of 2842's rubble.


>
> Also 3833 is at least similar, if not another duplicate.  It would be nice
> if it could be worked on and/or closed along with this issue.
>

Agreed about 3833. Who cares about finding sites that do/don't send LF? I
could talk about how naively-implemented the whole HN stack is all day, but
it wouldn't get us closer to a resolution for Twisted's web client(s). If
the RFC recommends it for "Tolerant Applications", the only decision is
whether or not we implement that part of the RFC. If it requires more time
to discuss than to actually fix, that means we should probably just fix it
and be done with it.


>
> Kevin Horn
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110125/5f013f98/attachment.htm 

From exarkun at twistedmatrix.com  Tue Jan 25 14:53:20 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 25 Jan 2011 19:53:20 -0000
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
Message-ID: <20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>

On 07:23 pm, kevin.horn at gmail.com wrote:
>On Tue, Jan 25, 2011 at 11:54 AM, Jason J. W. Williams <
>jasonjwwilliams at gmail.com> wrote:
>>Hi Y'all,
>Howdy, Jason!
>>Certain servers (notably Hacker News) break HTTPClient because they 
>>use LF
>>instead of CRLF to terminate header lines. I've uploaded a patch with 
>>tests
>>to ticket 4814 (merged into ticket 2842).
>>
>>I'd appreciate a review and some discussion about integrating it.
>>
>>-J
>I'm not really in a position to do a review right now, but since:
>
>1) 4814 is effectively a duplicate of 2842
>2) 4814 has a clear problem decription
>3) 4814 has a patch
>4) 2842 is old, and confusing
>
>Can we go ahead and close 2842 in favor of 4814?  We have too many old
>tickets floating around...

#4814 is already closed.  If the #2842 description is confusing, then 
feel free to update it to be more clear. :)

We don't close old tickets as duplicates of new tickets, though.  That 
doesn't make sense, and it's annoying to the original reporter/cc list 
as well.
>
>(To be clear, I'm not asking Jason to close this ticket...I'm asking 
>for the
>list's opinion)
>
>Also 3833 is at least similar, if not another duplicate.  It would be 
>nice
>if it could be worked on and/or closed along with this issue.

Similar, certainly.  But it's for the other HTTP client implementation. 
There won't be any code in common in the resolution.

I certainly agree that if it's worth fixing for one it's worth fixing 
for the other, though, and I hope someone will put #3833 up for review 
soon. :)

Jean-Paul


From jasonjwwilliams at gmail.com  Tue Jan 25 15:03:38 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 25 Jan 2011 13:03:38 -0700
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
Message-ID: <AANLkTinakS-Gypz6n=qj5JFqJYvVV-ZUqoXq7Gw9NZJY@mail.gmail.com>

>>
>>Can we go ahead and close 2842 in favor of 4814? ?We have too many old
>>tickets floating around...
>
> #4814 is already closed. ?If the #2842 description is confusing, then
> feel free to update it to be more clear. :)
>
> We don't close old tickets as duplicates of new tickets, though. ?That
> doesn't make sense, and it's annoying to the original reporter/cc list
> as well.
>>

Honestly, whether 4814 or 2842 is the main ticket for the problem
doesn't matter to me. I'd just like to get the fix put in. I believe
my patch is attached to 2842 when 4814 got closed as a dup.

-J


From jasonjwwilliams at gmail.com  Tue Jan 25 16:52:00 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 25 Jan 2011 14:52:00 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <06F2DF10-BDAE-4CC8-9AB0-C17973A92B2D@twistedmatrix.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
	<20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
	<AANLkTimD=wONP0u6Sz78V0M+DUqPtNd3t26Oxir+VGuZ@mail.gmail.com>
	<06F2DF10-BDAE-4CC8-9AB0-C17973A92B2D@twistedmatrix.com>
Message-ID: <AANLkTimW1McOKA33hUSYkWWiC65sj2FdNe27V7B=yMnb@mail.gmail.com>

On Mon, Jan 24, 2011 at 10:01 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:

> While I agree with the general sentiment (incremental improvements that can
> be done now are pretty much always better than gigantic overhauls that have
> to be put off until later) the current?logging system is already pretty much
> designed for this, we're just not using?it right. ?Trimming JP's message a
> bit to just the key part:
>
> This doesn't even have to mean?changes to LogPublisher. ?It could mean
> replacing:
>
> ?log.msg("%s starting on %s"%(self.protocol.__class__,
>
> self._realPortNumber))
>
> with:
>
> ?log.msg(
>
> ? ? event_source=self,
>
> ? ? event_type="start",
>
> ? ? protocol=self.protocol,
>
> ? ? port_number=self._realPortNumber)
>

Playing with this a bit, the above change does indeed blackhole the
log message. The question then is how someone can get these actually
outputted the log when they want to. Right now the TCP unit test for
test_connectionLostLogMsg expects textual output to the log. I'm
re-working the test to instead expect the dict with the same values
passed in, but that just ensures the data is properly passed to
log.msg() not that it's going to show up if you want it to.

-J


From glyph at twistedmatrix.com  Tue Jan 25 17:10:51 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 25 Jan 2011 17:10:51 -0500
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <AANLkTinakS-Gypz6n=qj5JFqJYvVV-ZUqoXq7Gw9NZJY@mail.gmail.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
	<AANLkTinakS-Gypz6n=qj5JFqJYvVV-ZUqoXq7Gw9NZJY@mail.gmail.com>
Message-ID: <79F61ACE-4D29-40A7-B12F-CAEDC10E1558@twistedmatrix.com>


On Jan 25, 2011, at 3:03 PM, Jason J. W. Williams wrote:

>>> 
>>> Can we go ahead and close 2842 in favor of 4814?  We have too many old
>>> tickets floating around...
>> 
>> #4814 is already closed.  If the #2842 description is confusing, then
>> feel free to update it to be more clear. :)
>> 
>> We don't close old tickets as duplicates of new tickets, though.  That
>> doesn't make sense, and it's annoying to the original reporter/cc list
>> as well.
>>> 
> 
> Honestly, whether 4814 or 2842 is the main ticket for the problem
> doesn't matter to me. I'd just like to get the fix put in. I believe
> my patch is attached to 2842 when 4814 got closed as a dup.

Shouldn't 2842 be in review, then?

(In case you're not familiar with them: <http://twistedmatrix.com/trac/wiki/ReviewProcess>, <http://twistedmatrix.com/trac/wiki/TwistedDevelopment>.)



From kevin.horn at gmail.com  Tue Jan 25 18:09:10 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 25 Jan 2011 17:09:10 -0600
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
Message-ID: <AANLkTimBpUqZB1nmhRbrhKN5MTLUOmtJ658R3DzHK=rg@mail.gmail.com>

On Tue, Jan 25, 2011 at 1:53 PM, <exarkun at twistedmatrix.com> wrote:

> On 07:23 pm, kevin.horn at gmail.com wrote:
> >On Tue, Jan 25, 2011 at 11:54 AM, Jason J. W. Williams <
> >jasonjwwilliams at gmail.com> wrote:
> >>Hi Y'all,
> >Howdy, Jason!
> >>Certain servers (notably Hacker News) break HTTPClient because they
> >>use LF
> >>instead of CRLF to terminate header lines. I've uploaded a patch with
> >>tests
> >>to ticket 4814 (merged into ticket 2842).
> >>
> >>I'd appreciate a review and some discussion about integrating it.
> >>
> >>-J
> >I'm not really in a position to do a review right now, but since:
> >
> >1) 4814 is effectively a duplicate of 2842
> >2) 4814 has a clear problem decription
> >3) 4814 has a patch
> >4) 2842 is old, and confusing
> >
> >Can we go ahead and close 2842 in favor of 4814?  We have too many old
> >tickets floating around...
>
> #4814 is already closed.


Ah. Somehow I thought it was still open.


> If the #2842 description is confusing, then
> feel free to update it to be more clear. :)
>

Well, I can update the summary, but not the description, which is the really
bad part.


>
> We don't close old tickets as duplicates of new tickets, though.  That
> doesn't make sense, and it's annoying to the original reporter/cc list
> as well.
>

This certainly makes sense in theory, but when the last comment from the
nominal owner of the ticket is "I'm not sure what is supposed to be fixed
now.", I'm not sure how helpful it is.  Yes, I realize that you had
responded to it, and clarified the situation.  Just Saying.  There's a LOT
of mutant tickets out there, that don't mean what they say, or have
completely changed in scope.  And there are several which have been closed
in favor of newer, clearer tickets over the years.  I think we need to make
the above policy obvious someplace, like in the developer docs.   Maybe it's
in there, I haven't checked, but I don't recall reading it, and I've read
most of the documentation _many_ times.

In any case, I don't care _that_ much about _which_ one is closed as long as
one is.  Which appears to be the case.


> >
> >(To be clear, I'm not asking Jason to close this ticket...I'm asking
> >for the
> >list's opinion)
> >
> >Also 3833 is at least similar, if not another duplicate.  It would be
> >nice
> >if it could be worked on and/or closed along with this issue.
>
> Similar, certainly.  But it's for the other HTTP client implementation.
> There won't be any code in common in the resolution.
>
> I certainly agree that if it's worth fixing for one it's worth fixing
> for the other, though, and I hope someone will put #3833 up for review
> soon. :)
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110125/7b6caff3/attachment.htm 

From glyph at twistedmatrix.com  Wed Jan 26 13:28:32 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 26 Jan 2011 13:28:32 -0500
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <AANLkTimBpUqZB1nmhRbrhKN5MTLUOmtJ658R3DzHK=rg@mail.gmail.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
	<AANLkTimBpUqZB1nmhRbrhKN5MTLUOmtJ658R3DzHK=rg@mail.gmail.com>
Message-ID: <6F8C0F5A-62EB-4DFF-B11D-443BF4EF6748@twistedmatrix.com>


On Jan 25, 2011, at 6:09 PM, Kevin Horn wrote:

> Well, I can update the summary, but not the description, which is the really bad part.

The description _is_ mutable, just only by certain magical people.  (For the purpose of spam protection).

For now, please feel free to attach a comment to any confusing ticket asking for a description update from someone who can do that; we should do this more often as the foci of various tickets shift.  In the near future hopefully a trac admin (maybe me) will have enough time to more effectively curate the group of magical accounts and their attendant powers so that more people (especially documentation wonks like you and Tom) have that ability.



From exarkun at twistedmatrix.com  Wed Jan 26 13:39:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 26 Jan 2011 18:39:23 -0000
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <6F8C0F5A-62EB-4DFF-B11D-443BF4EF6748@twistedmatrix.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
	<AANLkTimBpUqZB1nmhRbrhKN5MTLUOmtJ658R3DzHK=rg@mail.gmail.com>
	<6F8C0F5A-62EB-4DFF-B11D-443BF4EF6748@twistedmatrix.com>
Message-ID: <20110126183923.1699.1748830462.divmod.xquotient.372@localhost.localdomain>

On 06:28 pm, glyph at twistedmatrix.com wrote:
>
>On Jan 25, 2011, at 6:09 PM, Kevin Horn wrote:
>>Well, I can update the summary, but not the description, which is the 
>>really bad part.
>
>The description _is_ mutable, just only by certain magical people. 
>(For the purpose of spam protection).
>
>For now, please feel free to attach a comment to any confusing ticket 
>asking for a description update from someone who can do that; we should 
>do this more often as the foci of various tickets shift.  In the near 
>future hopefully a trac admin (maybe me) will have enough time to more 
>effectively curate the group of magical accounts and their attendant 
>powers so that more people (especially documentation wonks like you and 
>Tom) have that ability.

I've added Kevin and Tom to the group who can do this.  If someone would 
like to volunteer for the job of putting trusted people into this group, 
let me know.

Jean-Paul


From tom at recursivedream.com  Wed Jan 26 14:07:45 2011
From: tom at recursivedream.com (Tom Davis)
Date: Wed, 26 Jan 2011 14:07:45 -0500
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <20110126183923.1699.1748830462.divmod.xquotient.372@localhost.localdomain>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
	<AANLkTimBpUqZB1nmhRbrhKN5MTLUOmtJ658R3DzHK=rg@mail.gmail.com>
	<6F8C0F5A-62EB-4DFF-B11D-443BF4EF6748@twistedmatrix.com>
	<20110126183923.1699.1748830462.divmod.xquotient.372@localhost.localdomain>
Message-ID: <AANLkTi=jHWRn+O=iLimZa-By=EmZYu9bVyzkPfQk5BmM@mail.gmail.com>

On Wed, Jan 26, 2011 at 1:39 PM, <exarkun at twistedmatrix.com> wrote:

> On 06:28 pm, glyph at twistedmatrix.com wrote:
> >
> >On Jan 25, 2011, at 6:09 PM, Kevin Horn wrote:
> >>Well, I can update the summary, but not the description, which is the
> >>really bad part.
> >
> >The description _is_ mutable, just only by certain magical people.
> >(For the purpose of spam protection).
> >
> >For now, please feel free to attach a comment to any confusing ticket
> >asking for a description update from someone who can do that; we should
> >do this more often as the foci of various tickets shift.  In the near
> >future hopefully a trac admin (maybe me) will have enough time to more
> >effectively curate the group of magical accounts and their attendant
> >powers so that more people (especially documentation wonks like you and
> >Tom) have that ability.
>
> I've added Kevin and Tom to the group who can do this.  If someone would
> like to volunteer for the job of putting trusted people into this group,
> let me know.
>

Thanks, I can now more efficiently exercise my obsessive compulsions!


>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110126/d03df569/attachment.htm 

From albert.brandl at weiermayer.com  Fri Jan 28 03:29:32 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Fri, 28 Jan 2011 09:29:32 +0100
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
Message-ID: <20110128082932.GB2151@weiermayer.com>

Hi!

In our project, we accumulate data from various sources. Some of them are
connected via serial line (e.g. a GPS receiver and a weather station).

I'd like to run the application with twistd. But it looks as if SerialPort
does not really fit into this framework. It does not implement IService,
so `my_serial_port.setServiceParent(collection)` does not work.

Is there any technical reason that SerialPort does not implement 
IService? Could you suggest a workaround for this problem (other than 
dumping t.a.s.Application ;-))?

Best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From twisted at ralphm.ik.nu  Fri Jan 28 05:00:43 2011
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Fri, 28 Jan 2011 11:00:43 +0100
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <20110128082932.GB2151@weiermayer.com>
References: <20110128082932.GB2151@weiermayer.com>
Message-ID: <1296208843.13413.7.camel@dwaal>

On Fri, 2011-01-28 at 09:29 +0100, Albert Brandl wrote:
> Hi!
> 
> In our project, we accumulate data from various sources. Some of them are
> connected via serial line (e.g. a GPS receiver and a weather station).
> 
> I'd like to run the application with twistd. But it looks as if SerialPort
> does not really fit into this framework. It does not implement IService,
> so `my_serial_port.setServiceParent(collection)` does not work.
> 
> Is there any technical reason that SerialPort does not implement 
> IService? Could you suggest a workaround for this problem (other than 
> dumping t.a.s.Application ;-))?

One way to do this, is using t.a.i.GenericClient to hook up the device
to the protocol. This is also a Service that can be hooked up to an
Application. Unfortunately, it uses the now deprecated connectWith
method on a reactor, and therefore GenericClient has been deprecated as
well.

exarkun suggested a new FileDescriptorClient that might use the
reactor's addReader and addWriter methods.

--
ralphm





From itamar at itamarst.org  Fri Jan 28 08:25:52 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 28 Jan 2011 08:25:52 -0500
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <20110128082932.GB2151@weiermayer.com>
References: <20110128082932.GB2151@weiermayer.com>
Message-ID: <1296221152.1762.3.camel@blake>

On Fri, 2011-01-28 at 09:29 +0100, Albert Brandl wrote:
> I'd like to run the application with twistd. But it looks as if SerialPort
> does not really fit into this framework. It does not implement IService,
> so `my_serial_port.setServiceParent(collection)` does not work.

Just implement your own service - subclass t.a.s.Service, write your own
startService and stopService methods that start and stop the serial
port.

> Is there any technical reason that SerialPort does not implement 
> IService?

The TCP port doesn't implement IService either... A service is supposed
to be something you can start and stop, and encapsulates a
self-contained piece of business logic. The purpose is both deployment
and ease of regression testing. So maybe your service starts both a
webserver and a serialport, because it requires both -- which is why
mostly you should just implement your own service classes.

-Itamar



From kevin.horn at gmail.com  Fri Jan 28 10:38:07 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 28 Jan 2011 09:38:07 -0600
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <1296221152.1762.3.camel@blake>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
Message-ID: <AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>

On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

>
> A service is supposed
> to be something you can start and stop, and encapsulates a
> self-contained piece of business logic.
>
> -Itamar
>
>
>
This or something very much like it should be in the Twisted Glossary.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110128/9e4286e8/attachment.htm 

From tom at recursivedream.com  Fri Jan 28 11:41:25 2011
From: tom at recursivedream.com (Tom Davis)
Date: Fri, 28 Jan 2011 11:41:25 -0500
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
Message-ID: <AANLkTi=A7-_XF-EwwDrPTpqv5MqK+tYo4OF4M-JOYq7A@mail.gmail.com>

On Fri, Jan 28, 2011 at 10:38 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

>
>
> On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <
> itamar at itamarst.org> wrote:
>
>>
>> A service is supposed
>> to be something you can start and stop, and encapsulates a
>> self-contained piece of business logic.
>>
>> -Itamar
>>
>>
>>
> This or something very much like it should be in the Twisted Glossary.
>

I'd love to see concise, human-readable explanations for all of Twisted's
concepts! It's on the list, anyway...


>
> Kevin Horn
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110128/052b6197/attachment.htm 

From glyph at twistedmatrix.com  Fri Jan 28 14:33:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 28 Jan 2011 14:33:18 -0500
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
Message-ID: <6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>


On Jan 28, 2011, at 10:38 AM, Kevin Horn wrote:

> 
> 
> On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> A service is supposed
> to be something you can start and stop, and encapsulates a
> self-contained piece of business logic.
> 
> -Itamar
> 
> 
> 
> This or something very much like it should be in the Twisted Glossary.
> 
> Kevin Horn 

The whole idea of a glossary concerns me a little bit.  One way I frequently see it done is vague little snippets of text like this, and I don't like that.  Not to say that Itamar's answer to this particular question was incorrect or inappropriate, I just wouldn't want to see this enshrined as the official, central definition.

However, Twisted does have its own jargon and a dictionary to help the novice parse it would be a good thing.

What I'd really like to see in this regard is to make sure that every "jargon term" is linked straight to API documentation, since we've gone to some trouble to make our jargon match the names used in code as closely as possible*.  In this case, <http://twistedmatrix.com/documents/10.2.0/api/twisted.application.service.IService.html>. If the API documentation is not sufficient (which in this case it may well not be), let's make the API documentation sufficient.  Don't fortify it with a redundant official glossary listing that has to be maintained in parallel and updated in synch with the API docs.

Thoughts?

*: The one exception being talk of Deferreds which have 'fired' or 'failed', when the methods are called 'callback' and 'errback'.  I think this points to a weakness in the API naming though, and we should eventually change those names to match the jargon.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110128/96f20747/attachment.htm 

From kevin.horn at gmail.com  Fri Jan 28 17:47:54 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 28 Jan 2011 16:47:54 -0600
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
Message-ID: <AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>

On Fri, Jan 28, 2011 at 1:33 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 28, 2011, at 10:38 AM, Kevin Horn wrote:
>
>
>
> On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <
> itamar at itamarst.org> wrote:
>
>>
>> A service is supposed
>> to be something you can start and stop, and encapsulates a
>> self-contained piece of business logic.
>>
>> -Itamar
>>
>>
>>
> This or something very much like it should be in the Twisted Glossary.
>
> Kevin Horn
>
>
> The whole idea of a glossary concerns me a little bit.
>

You're just saying that because you don't want anyone else to understand
what you're saying ;)

Seriously though.  When I first started thinking about ways to improve the
documentation.  The _first_ thing I thought was missing was decent
explanations of some of these things.  Whether it's in a glossary or
someplace else, clear definitions need to exist for all the major Twisted
concepts (people may disagree on what is or is not major, and that's fine).
Putting these definitions (or links to them) in a glossary keeps them all
together and easy to find and refer to.  One of the first thing I look for
in any software documentation is a glossary or some set of definitions that
I can refer to while I'm _reading_ the API docs or whatever.

Solving problems through software requires finding the right abstractions,
which IMO depends a great deal on finding the right vocabulary for those
abstractions.  I know the Twisted devs spend a lot of time and energy trying
to find exactly the right word for a class, or a method, or whatever.  Let's
communicate that to new people!  If you don't want a "glossary", then we'll
do something else, but I think it's important to have all of the really
critical concepts described in one place somewhere.

Also consider the problem of reverse human lookup:  "Oh man, what was that
thing called that stops and starts Twisted code at the appropriate times?"

If you stick that into a search engine, you probably won't find it for a
loooong time.  But if there's a glossary, you just look there, and you find
it pretty easily.


> One way I frequently see it done is vague little snippets of text like
> this, and I don't like that.
>

Well, I consider it much more meaningful than what is currently there.  Not
saying it's really sufficient, but it is succinct.  I think what I'd like to
see is a "glossary" entry with:

- an API link (e.g. "An object which implements the IService Interface" --
and yes, it should be a proper English sentence.)
- A succinct definition (like Itamar's quip above)
- a paragraph or two of discussion (not too long though!)
- "see also" links to HOWTO's etc.

I want to say that I do NOT think we should be trying to include every
single idea/concept/interface/class/whatever in whatever glossary comes up.
Just the main concepts.

Not to say that Itamar's answer to this particular question was incorrect or
> inappropriate, I just wouldn't want to see this enshrined as the official,
> central definition.
>
> However, Twisted does have its own jargon and a dictionary to help the
> novice parse it would be a good thing.
>
> What I'd really like to see in this regard is to make sure that every
> "jargon term" is linked straight to API documentation, since we've gone to
> some trouble to make our jargon match the names used in code as closely as
> possible*.  In this case, <
> http://twistedmatrix.com/documents/10.2.0/api/twisted.application.service.IService.html>.
> If the API documentation is not sufficient (which in this case it may well
> not be), let's make the API documentation sufficient*.*  Don't fortify it
> with a redundant official glossary listing that has to be maintained in
> parallel and updated in synch with the API docs.
>

I'm not sure how much of a problem maintaining it would be, especially as I
agree that linking to the API docs is probably a good idea (though I think a
lot of the docstrings in there could be greatly improved).  For one thing,
how often has the _intent_ of the IProtocol interface (which has no
docstring, btw) changed?  And how often does someone show up on IRC who
doesn't understand what a Protocol object is show up?


> Thoughts?
>
>
I think we've totally hijacked this thread :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110128/8c7390be/attachment.htm 

From glyph at twistedmatrix.com  Fri Jan 28 20:50:54 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 28 Jan 2011 20:50:54 -0500
Subject: [Twisted-Python] glossary (was Re: Using SerialPort with
	t.a.s.Application)
In-Reply-To: <AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>
Message-ID: <A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>


On Jan 28, 2011, at 5:47 PM, Kevin Horn wrote:

> 
> 
> On Fri, Jan 28, 2011 at 1:33 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> On Jan 28, 2011, at 10:38 AM, Kevin Horn wrote:
> 
>> 
>> 
>> On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>> 
>> A service is supposed
>> to be something you can start and stop, and encapsulates a
>> self-contained piece of business logic.
>> 
>> -Itamar
>> 
>> 
>> 
>> This or something very much like it should be in the Twisted Glossary.
>> 
>> Kevin Horn 
> 
> The whole idea of a glossary concerns me a little bit.  
> 
> You're just saying that because you don't want anyone else to understand what you're saying ;)

I am aggrieved that you would insinuate any premeditated obfuscatory animus appertaining to my person or those of my associates.  I maintain an amaranthine focus on limpid exposition and efficacious intercommunication.

> Seriously though.  When I first started thinking about ways to improve the documentation.  The _first_ thing I thought was missing was decent explanations of some of these things.  Whether it's in a glossary or someplace else, clear definitions need to exist for all the major Twisted concepts (people may disagree on what is or is not major, and that's fine).  Putting these definitions (or links to them) in a glossary keeps them all together and easy to find and refer to.  One of the first thing I look for in any software documentation is a glossary or some set of definitions that I can refer to while I'm _reading_ the API docs or whatever.

If you need a glossary open while you're reading the API docs, that means that the docs you're reading are insufficiently marked up.  The word 'service' (in this context) should _always_ itself be a hyperlink to the IService interface.  We do this pretty consistently in all new documentation.  Similarly 'deferred' should always be a link to twisted.internet.defer.Deferred.  <http://epydoc.sourceforge.net/epytext.html> has more detail on how to format these if you want to do clever stuff like have a lower-case word like 'service' link to the IService docs.

I'm totally on board with making a list of these common abstractions outside the API docs, but 99% of what that list should do is provide a definitive index of links into the API docs to call out the top important interfaces you need to read about.

Also, the existing API docs for many of the core concepts are terrible, or even (cringe) non-existent in places, so they could certainly stand to be improved.  I'm not saying our existing docs are great, just that we should have one great index of terms and not five mediocre ones.

> Solving problems through software requires finding the right abstractions, which IMO depends a great deal on finding the right vocabulary for those abstractions.  I know the Twisted devs spend a lot of time and energy trying to find exactly the right word for a class, or a method, or whatever.  Let's communicate that to new people!  If you don't want a "glossary", then we'll do something else, but I think it's important to have all of the really critical concepts described in one place somewhere.

I should have qualified my discomfort with the term 'glossary' a bit more.  We do need the thing you're talking about.  My only concern is redundancy.  Even if we had awesome API documentation for all of these things, there's still a bootstrapping phase where people are not sure which classes are one-off utilities and which things are core abstractions they'll be using every day.

> Also consider the problem of reverse human lookup:  "Oh man, what was that thing called that stops and starts Twisted code at the appropriate times?"
> 
> If you stick that into a search engine, you probably won't find it for a loooong time.  But if there's a glossary, you just look there, and you find it pretty easily.

Well, that exact phrase, no; but "start and stop twisted application", and "start and stop twisted service" both point at the right API doc.  We should probably work a bit harder to make 'start stop twisted' find that page first :).

> One way I frequently see it done is vague little snippets of text like this, and I don't like that.  
> 
> Well, I consider it much more meaningful than what is currently there.  Not saying it's really sufficient, but it is succinct.  I think what I'd like to see is a "glossary" entry with:
> 
> - an API link (e.g. "An object which implements the IService Interface" -- and yes, it should be a proper English sentence.)

This I certainly agree with.

> - A succinct definition (like Itamar's quip above)
> - a paragraph or two of discussion (not too long though!)

Why can't this just be in the API doc?

> - "see also" links to HOWTO's etc.

Again - why not in the API doc?  If someone were to find the concept via some other documentation that described the term in question as a return type or argument rather than a generic word, presumably that person might also want to read the narrative documentation.

> I'm not sure how much of a problem maintaining it would be, especially as I agree that linking to the API docs is probably a good idea (though I think a lot of the docstrings in there could be greatly improved).  For one thing, how often has the _intent_ of the IProtocol interface(which has no docstring, btw) changed?

So, first: aaaaaauuugh.  Is there a doc bug for that?  That is an interface which really, really needs a docstring.  Can you submit a patch, like, right now? :)

Second: the intent hasn't changed often.  But clearly we need to update the documentation to document that intent better, and I hope that happens more often than it does.  Narrative vs. reference documentation is already a split, albeit a necessary one in my opinion.  Narrative vs. code-reference vs. language-reference seems like we're just splitting hairs.

> And how often does someone show up on IRC who doesn't understand what a Protocol object is show up?

Actually... I don't remember IProtocol being a big problem.  Which is slightly surprising, given that it has no docstring.  Maybe everyone who has run into a confusion at this basic stage has just given up, or maybe the method docstrings are good enough, or maybe the learn about it from a tutorial.

> Thoughts?
> 
> 
> I think we've totally hijacked this thread :)

Yes, retitled appropriately.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110128/1fa2ffbb/attachment-0001.htm 

From kevin.horn at gmail.com  Fri Jan 28 22:51:13 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 28 Jan 2011 21:51:13 -0600
Subject: [Twisted-Python] glossary (was Re: Using SerialPort with
	t.a.s.Application)
In-Reply-To: <A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>
	<A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>
Message-ID: <AANLkTimfSAhgZtKY4vVmB=uVoSxMyV5ciny1Ment6d4e@mail.gmail.com>

On Fri, Jan 28, 2011 at 7:50 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 28, 2011, at 5:47 PM, Kevin Horn wrote:
>
>
>
> On Fri, Jan 28, 2011 at 1:33 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>>
>> On Jan 28, 2011, at 10:38 AM, Kevin Horn wrote:
>>
>>
>>
>> On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <
>> itamar at itamarst.org> wrote:
>>
>>>
>>> A service is supposed
>>> to be something you can start and stop, and encapsulates a
>>> self-contained piece of business logic.
>>>
>>> -Itamar
>>>
>>>
>>>
>> This or something very much like it should be in the Twisted Glossary.
>>
>> Kevin Horn
>>
>>
>> The whole idea of a glossary concerns me a little bit.
>>
>
> You're just saying that because you don't want anyone else to understand
> what you're saying ;)
>
>
> I am aggrieved that you would insinuate any premeditated obfuscatory animus
> appertaining to my person or those of my associates.  I maintain an
> amaranthine focus on limpid exposition and efficacious intercommunication.
>
>
Hee!  Told you so :)

> Seriously though.  When I first started thinking about ways to improve the
> documentation.  The _first_ thing I thought was missing was decent
> explanations of some of these things.  Whether it's in a glossary or
> someplace else, clear definitions need to exist for all the major Twisted
> concepts (people may disagree on what is or is not major, and that's fine).
> Putting these definitions (or links to them) in a glossary keeps them all
> together and easy to find and refer to.  One of the first thing I look for
> in any software documentation is a glossary or some set of definitions that
> I can refer to while I'm _reading_ the API docs or whatever.
>
>
> If you need a glossary open while you're reading the API docs, that means
> that the docs you're reading are insufficiently marked up.  The word
> 'service' (in this context) should _always_ itself be a hyperlink to the
> IService interface.  We do this pretty consistently in all new
> documentation.  Similarly 'deferred' should always be a link to
> twisted.internet.defer.Deferred.  <
> http://epydoc.sourceforge.net/epytext.html> has more detail on how to
> format these if you want to do clever stuff like have a lower-case word like
> 'service' link to the IService docs.
>
>
You don't need the glossary open while reading the API docs, you need it
open while reading the other stuff.  Hopefully the need for this will fade
as the organization of the existing long-form docs improve.

Plus, you don't necessarily need it "open".  You can mark up a glossary term
in Sphinx and it'll automatically create cross-refs, so you say "What the
heck does that mean?", click the link, and it takes you to the term on the
glossary page.  From there you can get to the API docs, sure.  There should
absolutely be a link there.  But there should also be something that tells
you whether you need to dive into the API docs.


> I'm totally on board with making a *list* of these common abstractions
> outside the API docs, but 99% of what that list should do is provide a
> definitive index of links into the API docs to call out the top important
> interfaces you need to read about.
>

See.  Right there.  You assumed the reader would be looking for what
interfaces they need to read about.  If I'm new to Twisted, and I see some
example code on the web someplace, I'm not going to _see_ the interface it
implements.  I'm going to see probably the class.  So I Google it.  Assuming
I know anything about interfaces (which might be assuming a bit, but might
not), I'll basically know what that is, but right now the API docs aren't a
lot of help for older code, and most of the core things are older code.  And
that assumes there is an interface for whatever abstraction I'm looking
for.  I spent several hours once upon a time sifting through the API docs
and source trying to figure out what (Cred) Avatars came with Twisted.  Some
abstractions don't come with source code.

Now these assumptions are certainly valid in many, if not most, cases.  But
keep in mind we want to make things easy for the new people too.  That's how
we get more new people.


> Also, the existing API docs for many of the core concepts are terrible, or
> even (cringe) non-existent in places, so they could certainly stand to be
> improved.  I'm not saying our existing docs are great, just that we should
> have one great index of terms and not five mediocre ones.
>

Yep.  I have a list of docs tickets to go through, but there's millions more
missing (OK, hopefully not millions, but...).

One of them (at least) is to fix the current glossary, since it's current
state is DISMAL (It has links to the API docs everywhere though).


> Solving problems through software requires finding the right abstractions,
> which IMO depends a great deal on finding the right vocabulary for those
> abstractions.  I know the Twisted devs spend a lot of time and energy trying
> to find exactly the right word for a class, or a method, or whatever.  Let's
> communicate that to new people!  If you don't want a "glossary", then we'll
> do something else, but I think it's important to have all of the really
> critical concepts described in one place somewhere.
>
>
> I should have qualified my discomfort with the term 'glossary' a bit more.
>  We do need the thing you're talking about.  My only concern is redundancy.
>  Even if we had awesome API documentation for all of these things, there's
> still a bootstrapping phase where people are not sure which classes are
> one-off utilities and which things are core abstractions they'll be using
> every day.
>

Yes, exactly.

> Also consider the problem of reverse human lookup:  "Oh man, what was that
> thing called that stops and starts Twisted code at the appropriate times?"
>
> If you stick that into a search engine, you probably won't find it for a
> loooong time.  But if there's a glossary, you just look there, and you find
> it pretty easily.
>
>
> Well, that exact phrase, no; but "start and stop twisted application", and
> "start and stop twisted service" both point at the right API doc.  We should
> probably work a bit harder to make 'start stop twisted' find that page first
> :).
>

OK, well when I ran it through Google the API page didn't even show up on
the first page.  The application framework page did.  Google farm oddness
maybe.


> One way I frequently see it done is vague little snippets of text like
>> this, and I don't like that.
>>
>
> Well, I consider it much more meaningful than what is currently there.  Not
> saying it's really sufficient, but it is succinct.  I think what I'd like to
> see is a "glossary" entry with:
>
> - an API link (e.g. "An object which implements the IService Interface" --
> and yes, it should be a proper English sentence.)
>
>
> This I certainly agree with.
>
> - A succinct definition (like Itamar's quip above)
> - a paragraph or two of discussion (not too long though!)
>
>
> Why can't this just be in the API doc?
>

Well, it can and should, but:
- not every abstraction and/or thing we want to define has source code.
- some people are intimidated by having to go to API docs just to find a
little information about a library.  The way I see it, people go to the API
docs when they want to _use_ a library.  They go to the long-form docs when
they want to find out if library X is the one they want to use.  Perhaps we
disagree here.
- I foresee circumstances where the API docs might not be available.  (e.g.
If you have no net access and you don't have PyDoctor installed...which I
doubt many people do.)  But you might have Sphinx installed.  Or have the
handy-dandy Windows compiled HTML help file for Twisted (which doesn't exist
yet, but should someday...maybe even soon).  Sure you can look in the source
code, but it's kind of a pain if all you want is a definition.

After the Sphinx conversion it _might_ be possible to pull in docstrings
from the API docs into the Sphinx docs.  It certainly would be if the API
docs were marked up according to Sphinx conventions, but even I'm not crazy
enough (yet) to try to change over all of that stuff.  I might be crazy
enough to try to write a piece that converts the epydoc markup into Sphinx
on the fly and then processes it into html or whatever, but I might also
come down with a sudden severe case of sanity.


> - "see also" links to HOWTO's etc.
>
>
> Again - why not in the API doc?  If someone were to find the concept via
> some other documentation that described the term in question as a return
> type or argument rather than a generic word, presumably that person might
> also want to read the narrative documentation.
>
>
It is currently not possible (AFAIK) to link to things in the long-form docs
from the API docs in any kind of maintainable way.  There's a ticket for
this (#2801).  I have some ideas for how it might be fixed after the Sphinx
conversion is done.  I have zero idea how it might be done before that.  You
could put in static hyperlinks in the API markup, but that would be highly
subject to breakage.


> I'm not sure how much of a problem maintaining it would be, especially as I
> agree that linking to the API docs is probably a good idea (though I think a
> lot of the docstrings in there could be greatly improved).  For one thing,
> how often has the _intent_ of the IProtocol interface(which has no
> docstring, btw) changed?
>
>
> So, first: aaaaaauuugh.  Is there a doc bug for that?  That is an interface
> which really, really needs a docstring.  Can you submit a patch, like, right
> now? :)
>
> Second: the intent hasn't changed often.  But clearly we need to update the
> documentation to document that intent better, and I hope that happens more
> often than it does.  Narrative vs. reference documentation is already a
> split, albeit a necessary one in my opinion.  Narrative vs. code-reference
> vs. language-reference seems like we're just splitting hairs.
>
>
But the "language-reference" is an adjunct to the narrative documentation,
IMO.  Like an index, or the table of contents. And when I go to it, I don't
expect/want there to _only_ be an API link there

> And how often does someone show up on IRC who doesn't understand what a
> Protocol object is show up?
>
>
> Actually... I don't remember IProtocol being a big problem.  Which is
> slightly surprising, given that it has no docstring.  Maybe everyone who has
> run into a confusion at this basic stage has just given up, or maybe the
> method docstrings are good enough, or maybe the learn about it from a
> tutorial.
>
>
It seems to me like there's at least one person a week on IRC who needs the
old talk about what Protocols do vs. what Factories do.  Or how they get
their Protocol to make multiple connections.

[Aside: docstring for t.i.p.Factory: "This is a factory which produces
protocols. By default, buildProtocol will create a protocol of the class
given in self.protocol.".
docstring for t.i.i.ProtocolFactory: "Interface for protocol factories."
Aaaaaaaugh!  Some of the old docstrings need a lot of work. It's a separate
issue though.]

Thoughts?
>>
>>
> I think we've totally hijacked this thread :)
>
>
> Yes, retitled appropriately.
>
>
Well done.

In the words of Inigo Montoya, "Lemme sum up":

- I don't think we're too far away from each other in our opinions, but I
think you're more worried about redundancy than I am.  I think once the docs
are more navigable, the glossary will be much more useful, and problems will
be noticed much more quickly than they are now.

- If you want a great example of how I think a glossary should be used with
Sphinx, check out the Pyramid docs (
http://docs.pylonsproject.org/projects/pyramid/dev/index.html). Like that
but with more API links. :)

- In addition, I also think there should be a "Twisted Concepts"
document/section in or near the hopefully-soon-to-be-written intro stuff
that Tom is working on.

- it's going to be an incremental process.  I'm sure we'll have plenty of
time for discussion. :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110128/85813baa/attachment-0001.htm 

From kevin.horn at gmail.com  Fri Jan 28 22:53:38 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 28 Jan 2011 21:53:38 -0600
Subject: [Twisted-Python] glossary (was Re: Using SerialPort with
	t.a.s.Application)
In-Reply-To: <A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>
	<A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>
Message-ID: <AANLkTik-CvDr65Usr4w1dBu_AtTYNkzbqMdKFAEjw00S@mail.gmail.com>

>
>
> I'm not sure how much of a problem maintaining it would be, especially as I
> agree that linking to the API docs is probably a good idea (though I think a
> lot of the docstrings in there could be greatly improved).  For one thing,
> how often has the _intent_ of the IProtocol interface(which has no
> docstring, btw) changed?
>
>
> So, first: aaaaaauuugh.  Is there a doc bug for that?  That is an interface
> which really, really needs a docstring.  Can you submit a patch, like, right
> now? :)
>
>
I don't see one.  Nor for the over-terse Factory/IFactory docstrings.  I'll
create one though.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110128/3011a6d0/attachment.htm 

From glyph at twistedmatrix.com  Sat Jan 29 06:49:01 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 29 Jan 2011 06:49:01 -0500
Subject: [Twisted-Python] glossary (was Re: Using SerialPort with
	t.a.s.Application)
In-Reply-To: <AANLkTimfSAhgZtKY4vVmB=uVoSxMyV5ciny1Ment6d4e@mail.gmail.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>
	<A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>
	<AANLkTimfSAhgZtKY4vVmB=uVoSxMyV5ciny1Ment6d4e@mail.gmail.com>
Message-ID: <12488A73-6ACC-4D2C-8093-1DD469931693@twistedmatrix.com>

On Jan 28, 2011, at 10:51 PM, Kevin Horn wrote:

> right now the API docs aren't a lot of help for older code, and most of the core things are older code.

And that's exactly the problem - I don't want to paper that over with a shiny new project to explain everything in some new location.  I want to fix the API docs.

> And that assumes there is an interface for whatever abstraction I'm looking for.

If there aren't, that's a failure of the implementation, so let's fix that :).  But, okay, 

> I spent several hours once upon a time sifting through the API docs and source trying to figure out what (Cred) Avatars came with Twisted.  Some abstractions don't come with source code.

Yeah uh, okay.  The cred docs are bad and at this point I don't think that anyone except me (and maaaaaybe exarkun) understands them.  This is a bit of an unrelated problem.  The abstractions do have source code, and could be better explained.  And it needs narrative documentation, 

> One of them (at least) is to fix the current glossary, since it's current state is DISMAL (It has links to the API docs everywhere though).

Man, there's a current glossary?  (*opens glossary.xhtml*).  Oh my goodness.  Yes, that's not great.  And yes, please, fix it up.

So again, as the person actually doing the work, you can obviously put your effort wherever you think it's most valuable, but really everything boils down to this: rather than have "a paragraph of discussion" in the glossary, save the discussion for the narrative documentation or the API documentation, as appropriate.  Feel free to edit the API docs or the narrative docs to have good things to link to.

> It is currently not possible (AFAIK) to link to things in the long-form docs from the API docs in any kind of maintainable way.  There's a ticket for this (#2801).  I have some ideas for how it might be fixed after the Sphinx conversion is done.  I have zero idea how it might be done before that.  You could put in static hyperlinks in the API markup, but that would be highly subject to breakage.

Well, let's get that migration done then!  hut, hut!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110129/acafa6c2/attachment.htm 

From andrew at bemusement.org  Sat Jan 29 22:47:08 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Sun, 30 Jan 2011 14:47:08 +1100
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
Message-ID: <20110130034708.GD2620@aihal.home.puzzling.org>

Glyph Lefkowitz wrote:
[...]
>    The whole idea of a glossary concerns me a little bit. ??  However, Twisted
>    does have its own jargon and a dictionary to help the novice parse it would
>    be a good thing.
>    What I'd really like to see in this regard is to make sure that every
>    "jargon term" is linked straight to API documentation

We already have a glossary:

<http://twistedmatrix.com/documents/current/core/howto/glossary.html>

And for what it's worth, it's entry for Service is:

    A twisted.application.service.Service [link to API doc]. See
    Application howto [link] for a description of how they relate to
    Applications [glossary link]. 

Superficially, this would appear to satisfy both you and Kevin: there is
a glossary, and it is very explicit (at least in this entry) that the
API doc is the canonical reference.

So whatever it is you're both asking for you perhaps both need to be
clearer about what it is :)

-Andrew.



From exarkun at twistedmatrix.com  Sun Jan 30 00:05:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 Jan 2011 05:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1296363922.53.828863123@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110130/e43de892/attachment.htm 

From glyph at twistedmatrix.com  Sun Jan 30 03:22:59 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 30 Jan 2011 03:22:59 -0500
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <20110130034708.GD2620@aihal.home.puzzling.org>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<20110130034708.GD2620@aihal.home.puzzling.org>
Message-ID: <C70CB06D-5E01-41A0-B4FD-0287B4450151@twistedmatrix.com>

On Jan 29, 2011, at 10:47 PM, Andrew Bennetts <andrew at bemusement.org> wrote:

> Glyph Lefkowitz wrote:
> [...]
>>   The whole idea of a glossary concerns me a little bit.  ?  However, Twisted
>>   does have its own jargon and a dictionary to help the novice parse it would
>>   be a good thing.
>>   What I'd really like to see in this regard is to make sure that every
>>   "jargon term" is linked straight to API documentation
> 
> We already have a glossary:
> 
> <http://twistedmatrix.com/documents/current/core/howto/glossary.html>

Yeah, that came up a bit later in the thread :).  And kevin did mention that maintaining that doc is the first order of business.

> And for what it's worth, it's entry for Service is:
> 
>    A twisted.application.service.Service [link to API doc]. See
>    Application howto [link] for a description of how they relate to
>    Applications [glossary link]. 
> 
> Superficially, this would appear to satisfy both you and Kevin: there is
> a glossary, and it is very explicit (at least in this entry) that the
> API doc is the canonical reference.
> 
> So whatever it is you're both asking for you perhaps both need to be
> clearer about what it is :)

I think that the fact such a discussion was able to go on for so long before we discovered it really just emphasizes another thing that comes up very frequently in these discussions: discoverability of the documentation.  We need more and better links to such things.

From kevin.horn at gmail.com  Mon Jan 31 00:58:04 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sun, 30 Jan 2011 23:58:04 -0600
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <C70CB06D-5E01-41A0-B4FD-0287B4450151@twistedmatrix.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<20110130034708.GD2620@aihal.home.puzzling.org>
	<C70CB06D-5E01-41A0-B4FD-0287B4450151@twistedmatrix.com>
Message-ID: <AANLkTinQnYTQURJ0_=2r4yq=xXA1bXFi8e4+Kp65buDx@mail.gmail.com>

On Sun, Jan 30, 2011 at 2:22 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Jan 29, 2011, at 10:47 PM, Andrew Bennetts <andrew at bemusement.org>
> wrote:
>
> > Glyph Lefkowitz wrote:
> > [...]
> >>   The whole idea of a glossary concerns me a little bit.  ?  However,
> Twisted
> >>   does have its own jargon and a dictionary to help the novice parse it
> would
> >>   be a good thing.
> >>   What I'd really like to see in this regard is to make sure that every
> >>   "jargon term" is linked straight to API documentation
> >
> > We already have a glossary:
> >
> > <http://twistedmatrix.com/documents/current/core/howto/glossary.html>
>
> Yeah, that came up a bit later in the thread :).  And kevin did mention
> that maintaining that doc is the first order of business.
>
> > And for what it's worth, it's entry for Service is:
> >
> >    A twisted.application.service.Service [link to API doc]. See
> >    Application howto [link] for a description of how they relate to
> >    Applications [glossary link].
> >
> > Superficially, this would appear to satisfy both you and Kevin: there is
> > a glossary, and it is very explicit (at least in this entry) that the
> > API doc is the canonical reference.
> >
> > So whatever it is you're both asking for you perhaps both need to be
> > clearer about what it is :)
>
> I think that the fact such a discussion was able to go on for so long
> before we discovered it really just emphasizes another thing that comes up
> very frequently in these discussions: discoverability of the documentation.
>  We need more and better links to such things.
>
>
Well, first off, I did know about the glossary.  It's dismal state is one of
the things that motivated me to start working on Twisted Documentation.  As
I mentioned in the other thread, a glossary is one of the first things I
look for in a documentation set.

Secondly, Twisted actually has 2 glossaries.  One general one (referenced
above) and one specific to Twisted Web (here:
http://twistedmatrix.com/documents/current/web/howto/glossary.html).  It
has, however, only one entry.  I intend in future to combine the two, unless
someone else does it first.

Thirdly, as far as discoverability/navigability of the documentation, I
think Sphinx (*) will help a lot here.  It has all kinds of tools to make
cross-linking as easy as possible, like the toc segments in the sidebar,
prev/next links, glossary links, indexing, etc.

Should help quite a bit, I think.

Kevin Horn

(*)  I know, I _know_!  I'm working on it! :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110130/5e669222/attachment.htm 

From jonathan+twisted at jsphere.com  Mon Jan 31 05:31:17 2011
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Mon, 31 Jan 2011 12:31:17 +0200
Subject: [Twisted-Python] A Python enum library with a Twist
Message-ID: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>

Hi,

First off there isn't actually a twist, it's just for Twisted
addressing the points in #4671 [1]. Sorry to disappoint. Secondly I
realise there are already at least a thousand Python enum libraries,
most of which I haven't explored, feel free to mention these with
supporting arguments.

My point of view is that a great many number of these enum libraries
go to long lengths to make stuff too "cute". While having less
not-networking-related code in Twisted may be a more desirable route,
Twisted makes enough use of enum-esque things in the current code base
that it may be easier (maybe even warranted)  to have our own
implementation that can cater directly to the needs of Twisted without
being subjected to the usual irritations of third-party software; also
Twisted's high-qualilty coding and testing standards are only a good
thing.

The current code is hosted on Launchpad [2] and the source code is
viewable on the web [3]. I am aware that there are currently no
unittests or any kind of useful documentation, hopefully the examples
are good enough for now. I'm hoping for some feedback to decide
whether to press ahead or turn back. I've tried to look at as many
Twisted enum use-cases as possible, without trying to cater to every
one individually, however I do still have a few questions:

1. #4671 uses an "asInt" method in the examples, this is obviously
going to require changing all code that uses these enums (of which
there is plenty.) Is this a good idea? It seems easy to forget that
"F_FOO | F_BAR" is not giving you a number.

2. I use "__int__", I don't know if this is horrible or not and
whether I should just use the "asInt" method proposed in the ticket.

3. It seems to me that there are two general cases:
   1. The enum just holds values that have an interesting meaning on
their own (e.g. AMP special keys (ASK, ANSWER, etc.), IRC status codes
(RPL_WHOIS, etc.)) and combining them makes no sense.
   2. The enum holds values that are intended to be combined. i.e. flags.

   Does it make sense to try and combine this behaviour into the same
type? Currently it is and you get an exception when doing certain
things (none of which make any sense, in this context):

>>> (Words.AYE | Words.BEE)
<EnumValueGroup '|': [<EnumValue Words.AYE: 'a'>, <EnumValue Words.BEE: 'b'>]>
>>> (Words.AYE | Words.BEE).value
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "enum.py", line 77, in value
    return reduce(self.op, values)
TypeError: unsupported operand type(s) for |: 'str' and 'str'

>>> Words.fromValue('a')
<EnumValue Words.AYE: 'a'>
>>> Words.fromValue('c') # This value is not in the enumeration and ORing values to get it is impossible.
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "enum.py", line 133, in fromValue
    if target - v < 0:
TypeError: unsupported operand type(s) for -: 'str' and 'str'

Comments appreciated.

[1] <http://twistedmatrix.com/trac/ticket/4671>
[2] <http://code.launchpad.net/~jjacobs/+junk/twistedenum>
[3] <http://bazaar.launchpad.net/~jjacobs/+junk/twistedenum/view/head:/enum.py>

-- 
Jonathan


From itamar at itamarst.org  Mon Jan 31 08:15:14 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 31 Jan 2011 08:15:14 -0500
Subject: [Twisted-Python] A Python enum library with a Twist
In-Reply-To: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
References: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
Message-ID: <1296479714.1796.1.camel@blake>

On Mon, 2011-01-31 at 12:31 +0200, Jonathan Jacobs wrote:

> The current code is hosted on Launchpad [2] and the source code is
> viewable on the web [3].

One comment unrelated to the actual code: we prefer people don't prefix
their projects with "twisted", to prevent confusion. The suggested
prefix for twisted-related projects is tx, so in this case "txEnum" or
"txenum".

-Itamar



From mithrandi at mithrandi.net  Mon Jan 31 08:57:09 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 31 Jan 2011 15:57:09 +0200
Subject: [Twisted-Python] A Python enum library with a Twist
In-Reply-To: <1296479714.1796.1.camel@blake>
References: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
	<1296479714.1796.1.camel@blake>
Message-ID: <AANLkTi=S+yHS0P-FtvdENH93_m32Mys_ds_kSSOedAy5@mail.gmail.com>

On Mon, Jan 31, 2011 at 3:15 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On Mon, 2011-01-31 at 12:31 +0200, Jonathan Jacobs wrote:
>
>> The current code is hosted on Launchpad [2] and the source code is
>> viewable on the web [3].
>
> One comment unrelated to the actual code: we prefer people don't prefix
> their projects with "twisted", to prevent confusion. The suggested
> prefix for twisted-related projects is tx, so in this case "txEnum" or
> "txenum".

I think the intention is for this to be included in Twisted itself, as
part of a resolution for #4671, not distributed as a separate project.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From albert.brandl at weiermayer.com  Mon Jan 31 10:50:54 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Mon, 31 Jan 2011 16:50:54 +0100
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <1296221152.1762.3.camel@blake>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
Message-ID: <20110131155054.GA26811@weiermayer.com>

Hi!

I'm quite happy that my question (or really: Itamar's answer) triggered 
the interesting discussion about glossaries. But there are some aspects 
about SerialPort that are not yet clear to me. So I'm trying to reclaim 
this thread ;-).

On Fri, Jan 28, 2011 at 08:25:52AM -0500, Itamar Turner-Trauring wrote:
> The TCP port doesn't implement IService either...

This is correct. But TCPServer does implement IService, and I was 
looking for an analog I could use for the serial port. I'd like to write 
something along the following lines:

def setupSerialCommunication(multiService):
    lrFactory = MyLineReceiverFactory()
    serialComm = internet.SerialServer(lrFactory, '/dev/ttyS0')
    serialComm.setServiceParent(multiService)

(BTW: I'm not quite sure if SerialServer would belong to the internet
package...)

In my understanding, the communication over the serial line should be 
handled in a similar way to communicating via TCP/IP. So my questions
should have been: Why isn't there an analog to TCPServer for SerialPort?
Would it make sense to add it?

> A service is supposed to be something you can start and stop, and 
> encapsulates a self-contained piece of business logic. The purpose is 
> both deployment and ease of regression testing.

Thanks for the explanation. It is certainly a good idea to think about
the partitioning of the services and reflect it in the code.

> So maybe your service starts both a webserver and a serialport, 
> because it requires both -- which is why mostly you should just 
> implement your own service classes.

There is the class t.a.s.MultiService for encapsulating other services. 
In my current implementation I just instantiate it and add the other 
services; afterwards I set its service Parent to the application. What 
would be the advantage of subclassing Service and redefining its 
startService and stopService methods?

Thanks & best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistra?e 12, A-4813 Altm?nster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com


From tom at recursivedream.com  Mon Jan 31 14:41:38 2011
From: tom at recursivedream.com (Tom Davis)
Date: Mon, 31 Jan 2011 14:41:38 -0500
Subject: [Twisted-Python] Task-based documentation started
Message-ID: <AANLkTinukcpnRc9yviapnkFK_6ChAqTrhk7nnj5bEAoD@mail.gmail.com>

I have the beginnings of some task-based documentation available in
twisted-docs (https://github.com/tdavis/twisted-docs) now. You can find the
built version in the usual place (http://docs.recursivedream.com/twisted/)
-- just remember to bust the cache.

I chose serving web content as a starting point because it seems as common a
task as any. I took some examples from the existing howto (
http://twistedmatrix.com/documents/current/web/howto/using-twistedweb.html),
as well as added some examples of further learning and glossary entries to
make the point. Obviously there's nothing completely usable here yet; it's
primarily an exercise in showing how I'd like to split up sprawling,
semi-random docs like *using-twistedweb* into more coherent, digestible,
stackable pieces. A document to talk about core concepts (Site Objects,
Resources, etc.), sections for supplementary features like Sessions, Virtual
Hosts, etc.

Another advantage of this style is that we can effortlessly stitch together
our own tutorials (were that ever a goal) just by linking in step-wise
fashion to ever-advanced tutorials which themselves wrap back around to core
concepts like, in this case, Applications and the IService stack. It should
be up to the user how deep into the rabbit hole they want to go; right now I
have to slog through two sections to get to a part that tells me how to just
serve a directory of HTML.

Thoughts?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110131/74b014d0/attachment.htm 

From exarkun at twistedmatrix.com  Mon Jan 31 17:18:00 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 31 Jan 2011 22:18:00 -0000
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <20110131155054.GA26811@weiermayer.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<20110131155054.GA26811@weiermayer.com>
Message-ID: <20110131221800.1699.132541088.divmod.xquotient.434@localhost.localdomain>

On 03:50 pm, albert.brandl at weiermayer.com wrote:
>Hi!
>
>I'm quite happy that my question (or really: Itamar's answer) triggered
>the interesting discussion about glossaries. But there are some aspects
>about SerialPort that are not yet clear to me. So I'm trying to reclaim
>this thread ;-).
>
>On Fri, Jan 28, 2011 at 08:25:52AM -0500, Itamar Turner-Trauring wrote:
>>The TCP port doesn't implement IService either...
>
>This is correct. But TCPServer does implement IService, and I was
>looking for an analog I could use for the serial port. I'd like to 
>write
>something along the following lines:
>
>def setupSerialCommunication(multiService):
>    lrFactory = MyLineReceiverFactory()
>    serialComm = internet.SerialServer(lrFactory, '/dev/ttyS0')
>    serialComm.setServiceParent(multiService)
>
>(BTW: I'm not quite sure if SerialServer would belong to the internet
>package...)
>
>In my understanding, the communication over the serial line should be
>handled in a similar way to communicating via TCP/IP. So my questions
>should have been: Why isn't there an analog to TCPServer for 
>SerialPort?
>Would it make sense to add it?

I think that now the way it would make sense to add this is to add a 
serialport endpoint.  This would be usable with 
twisted.internet.endpoints.serverFromEndpoint (or clientFromEndpoint, I 
can never remember which one a serial port is more like).

Then, this endpoint could be combined with a general-purpose endpoint- 
into-service adapter.
>>A service is supposed to be something you can start and stop, and
>>encapsulates a self-contained piece of business logic. The purpose is
>>both deployment and ease of regression testing.
>
>Thanks for the explanation. It is certainly a good idea to think about
>the partitioning of the services and reflect it in the code.
>>So maybe your service starts both a webserver and a serialport,
>>because it requires both -- which is why mostly you should just
>>implement your own service classes.
>
>There is the class t.a.s.MultiService for encapsulating other services.
>In my current implementation I just instantiate it and add the other
>services; afterwards I set its service Parent to the application. What
>would be the advantage of subclassing Service and redefining its
>startService and stopService methods?

If you can accomplish your goals without making a new kind of IService 
implementation, then great!  If it is awkward (for example, if you want 
the web server to have a reference to the protocol currently connected 
to the serial port), then it might be easier if you have your own 
IService implementation that knows about both your web server and your 
serial port.

Jean-Paul


From glyph at twistedmatrix.com  Mon Jan 31 17:22:04 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 31 Jan 2011 14:22:04 -0800
Subject: [Twisted-Python] Task-based documentation started
In-Reply-To: <AANLkTinukcpnRc9yviapnkFK_6ChAqTrhk7nnj5bEAoD@mail.gmail.com>
References: <AANLkTinukcpnRc9yviapnkFK_6ChAqTrhk7nnj5bEAoD@mail.gmail.com>
Message-ID: <BAEC1D4F-2990-4DA7-81CE-82B3BF8A2A92@twistedmatrix.com>


On Jan 31, 2011, at 11:41 AM, Tom Davis wrote:

> Thoughts?

I'll have to write more later, but maybe you should read all of the existing twisted.web documentation first?  I am sorry to say it, but this seems like a less informative and more confusing version of <http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/static-content.html> and <http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/wsgi.html>.

For example: Why are you talking about SimpleHTTPServer?  Does anybody actually use that or know about it any more?  I haven't heard it brought up in years.  For people who do know about what it is, comparing it to that makes it sound like twisted.web is a toy and should not be used in production, since SimpleHTTPServer certainly isn't capable of serving a real site.

Again, the problem is not really the content, we have a surprising amount of content, it's fixing the architecture so that people find the content that they're looking for.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110131/30da83d6/attachment.htm 

From glyph at twistedmatrix.com  Mon Jan 31 17:25:06 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 31 Jan 2011 14:25:06 -0800
Subject: [Twisted-Python] A Python enum library with a Twist
In-Reply-To: <AANLkTi=S+yHS0P-FtvdENH93_m32Mys_ds_kSSOedAy5@mail.gmail.com>
References: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
	<1296479714.1796.1.camel@blake>
	<AANLkTi=S+yHS0P-FtvdENH93_m32Mys_ds_kSSOedAy5@mail.gmail.com>
Message-ID: <03675550-DF73-46EF-B578-B1BC9FBDE9B2@twistedmatrix.com>

On Jan 31, 2011, at 5:57 AM, Tristan Seligmann wrote:

> On Mon, Jan 31, 2011 at 3:15 PM, Itamar Turner-Trauring
> <itamar at itamarst.org> wrote:
>> On Mon, 2011-01-31 at 12:31 +0200, Jonathan Jacobs wrote:
>> 
>>> The current code is hosted on Launchpad [2] and the source code is
>>> viewable on the web [3].
>> 
>> One comment unrelated to the actual code: we prefer people don't prefix
>> their projects with "twisted", to prevent confusion. The suggested
>> prefix for twisted-related projects is tx, so in this case "txEnum" or
>> "txenum".
> 
> I think the intention is for this to be included in Twisted itself, as
> part of a resolution for #4671, not distributed as a separate project.

Nevertheless, it isn't present in Twisted yet and so it should have a 'tx' name until that point.  If he really wanted to get 'twisted' into the name, the branch should have been lp:~jjacobs/twisted/enum instead :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110131/a954bb06/attachment.htm 

From tom at recursivedream.com  Mon Jan 31 17:39:42 2011
From: tom at recursivedream.com (Tom Davis)
Date: Mon, 31 Jan 2011 17:39:42 -0500
Subject: [Twisted-Python] Task-based documentation started
In-Reply-To: <BAEC1D4F-2990-4DA7-81CE-82B3BF8A2A92@twistedmatrix.com>
References: <AANLkTinukcpnRc9yviapnkFK_6ChAqTrhk7nnj5bEAoD@mail.gmail.com>
	<BAEC1D4F-2990-4DA7-81CE-82B3BF8A2A92@twistedmatrix.com>
Message-ID: <AANLkTikMH5Uj+Q35SkQLTDgi_Qdnk2z4J3hgjvUtry5O@mail.gmail.com>

On Mon, Jan 31, 2011 at 5:22 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 31, 2011, at 11:41 AM, Tom Davis wrote:
>
> Thoughts?
>
>
> I'll have to write more later, but maybe you should read *all* of the
> existing twisted.web documentation first?  I am sorry to say it, but this
> seems like a less informative and more confusing version of <
> http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/static-content.html>
> and <
> http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/wsgi.html>.
>
>
It is certainly less informative than those. I borrowed what I did from the
larger "using twisted.web" document just to illustrate some intent. It is by
no means finished or necessarily representative of the actual content of
those sections (static files and wsgi).


> For example: Why are you talking about SimpleHTTPServer?  Does *anybody* actually
> use that or know about it any more?  I haven't heard it brought up in years.
>  For people who do know about what it is, comparing it to that makes it
> sound like twisted.web is a toy and should not be used in production, since
> SimpleHTTPServer certainly isn't capable of serving a real site.
>

Fair enough.


>
> Again, the problem is not really the content, we have a surprising amount
> of content, it's fixing the architecture so that people *find* the content
> that they're looking for.
>

Right, I agree. I'm not saying content *is* the problem. The problem is both
discoverability from the standpoint of ToC, orphaned pages, etc. *and* from
the per-document standpoint. What one really wants to *do* is often mixed in
with the details of how you could do *everything* related to that one task.
Or it's duplicated. Or in a random file elsewhere.

Perhaps it's best to say that you could consider the text in that tutorial
to be the equivalent of "Lorem Ipsum", except context-relevant enough to get
across the general idea of splitting things up by task, complexity, and
level of existing knowledge (or desired future knowledge).

Take <
http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/static-content.html
>:

Tell me the one command I need to serve a directory, *then* show me the code
that one command effectively runs and vaguely what it does. Then tell me
where I can learn about twistd and reactors and Sites and Files. And take
that chunk of [usage -> implementation -> further understanding] and call it
a Task (or sub-Task in the case of serving static files).

The content is already there; it's just about arranging it properly. I hope
that helps clear up my opinion a bit.


>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110131/c5f03fa6/attachment.htm 

From jonathan+twisted at jsphere.com  Mon Jan 31 18:07:32 2011
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Tue, 1 Feb 2011 01:07:32 +0200
Subject: [Twisted-Python] A Python enum library with a Twist
In-Reply-To: <03675550-DF73-46EF-B578-B1BC9FBDE9B2@twistedmatrix.com>
References: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
	<1296479714.1796.1.camel@blake>
	<AANLkTi=S+yHS0P-FtvdENH93_m32Mys_ds_kSSOedAy5@mail.gmail.com>
	<03675550-DF73-46EF-B578-B1BC9FBDE9B2@twistedmatrix.com>
Message-ID: <AANLkTimihrz-+1=KNGLPj29EJSX0TQhQVvzCeOkORV-7@mail.gmail.com>

On Tue, Feb 1, 2011 at 00:25, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> Nevertheless, it isn't present in Twisted yet and so it should have a 'tx'
> name until that point. ?If he really wanted to get 'twisted' into the name,
> the branch should have been lp:~jjacobs/twisted/enum instead :).

There was no real decision making involved in naming the branch, it
needed a name out of necessity and I thought I may have already used
"foo". :)

I've renamed the branch [1] to txEnum, the URL to the file, mentioned
previously, changed too [2].

Hopefully this concludes the naming debacle.

[1] <http://code.launchpad.net/~jjacobs/+junk/txEnum>
[2] <http://bazaar.launchpad.net/~jjacobs/+junk/txEnum/view/head:/enum.py>

-- 
Jonathan


From exarkun at twistedmatrix.com  Mon Jan 31 18:19:56 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 31 Jan 2011 23:19:56 -0000
Subject: [Twisted-Python] Task-based documentation started
In-Reply-To: <AANLkTikMH5Uj+Q35SkQLTDgi_Qdnk2z4J3hgjvUtry5O@mail.gmail.com>
References: <AANLkTinukcpnRc9yviapnkFK_6ChAqTrhk7nnj5bEAoD@mail.gmail.com>
	<BAEC1D4F-2990-4DA7-81CE-82B3BF8A2A92@twistedmatrix.com>
	<AANLkTikMH5Uj+Q35SkQLTDgi_Qdnk2z4J3hgjvUtry5O@mail.gmail.com>
Message-ID: <20110131231956.1699.1955561813.divmod.xquotient.459@localhost.localdomain>

On 10:39 pm, tom at recursivedream.com wrote:
>
>Take <
>http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/static- 
>content.html
>>:
>
>Tell me the one command I need to serve a directory, *then* show me the 
>code
>that one command effectively runs and vaguely what it does.

I think this is partially a disagreement over what tasks we actually 
want to document.  If the command line interface gets primacy in the 
documentation, then I think you're writing documentation for end users 
(sys admins, non-programmers).  I don't know about anyone else, but this 
category of documentation hadn't really crossed my mind before.

I think that (ultimately) this is good documentation to have, but I 
don't know if it's as important as getting the programmer-oriented 
documentation in better shape.

Another point to consider is that "twistd web" (and most other twistd 
plugins we provide) are semi-random mish mashes of functionality.  They 
have accreted by contribution from many different people over the years 
with no governing design or goal aside from "expose features from the 
command line".  This does not make them the friendliest tools around. 
The functionality they are missing is often surprising, particularly 
when contrasted with some of the (non-)functionality they do provide.

I don't want to say that they do not bear documenting until their state 
is improved, but if we focused on other areas first, maybe we would have 
something better to document when we eventually get around to things 
like "twistd web".

Jean-Paul


From glyph at twistedmatrix.com  Mon Jan 31 20:04:39 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 31 Jan 2011 17:04:39 -0800
Subject: [Twisted-Python] A Python enum library with a Twist
In-Reply-To: <AANLkTimihrz-+1=KNGLPj29EJSX0TQhQVvzCeOkORV-7@mail.gmail.com>
References: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
	<1296479714.1796.1.camel@blake>
	<AANLkTi=S+yHS0P-FtvdENH93_m32Mys_ds_kSSOedAy5@mail.gmail.com>
	<03675550-DF73-46EF-B578-B1BC9FBDE9B2@twistedmatrix.com>
	<AANLkTimihrz-+1=KNGLPj29EJSX0TQhQVvzCeOkORV-7@mail.gmail.com>
Message-ID: <B61C2CF2-2E0F-4F5F-AA7A-98F685589C10@twistedmatrix.com>


On Jan 31, 2011, at 3:07 PM, Jonathan Jacobs wrote:

> On Tue, Feb 1, 2011 at 00:25, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> Nevertheless, it isn't present in Twisted yet and so it should have a 'tx'
>> name until that point.  If he really wanted to get 'twisted' into the name,
>> the branch should have been lp:~jjacobs/twisted/enum instead :).
> 
> There was no real decision making involved in naming the branch, it
> needed a name out of necessity and I thought I may have already used
> "foo". :)
> 
> I've renamed the branch [1] to txEnum, the URL to the file, mentioned
> previously, changed too [2].
> 
> Hopefully this concludes the naming debacle.

Definitively!  Thanks for reacting so fast :-).

> [1] <http://code.launchpad.net/~jjacobs/+junk/txEnum>
> [2] <http://bazaar.launchpad.net/~jjacobs/+junk/txEnum/view/head:/enum.py>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110131/15bca539/attachment.htm 

From jason.heeris at gmail.com  Mon Jan 31 23:58:54 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 1 Feb 2011 12:58:54 +0800
Subject: [Twisted-Python] High-level view of Twisted
Message-ID: <AANLkTik-7mR=5XRoKUM0YuRWQgpHLhXGj4TNiboAR+v4@mail.gmail.com>

Hi,

I'd like to come to grips with Twisted, and so far I've been following
and tweaking example after example. But I'm finding it incredibly hard
to get a high level view of the Twisted "landscape" ? and because I
don't know what I don't know, it's hard to know what questions to even
ask. I want to get to the point where I can just sit down and know
where to start, and hopefully someone here can give me a bit of
direction.

I understand many of the microscopic components. Deferred results,
file descriptors and sockets, the reactor loop concept ? I get those.
I've read the tutorial[1], another Twisted Introduction[2], and about
50% of the API documentation (possibly not the right 50%, though).

But I just can't seem to wrap my head around the interfaces, factories
and wiring it all together. Maybe some examples of the speedbumps I
keep encountering will help:

1. The "finger" intro "Drop Connections" example[3] just straight out
uses the self.transport member of a protocol. But how do I, a Twisted
newbie, know that this even exists? After hours of digging around, I
find it in the docs for a BaseProtocol method[4]. Later on, this same
example uses the "self.factory" member. I still haven't found that
one. Where do I look up these assumed-to-exist members? How do I know
what other members exist?

2. What is a Factory, anyway? What are they *for*?

3. The finger example goes over writing a server ? what about an
asynchronous client that must follow a particular protocol? Where do I
start with that? Is there an example?

4. What if I'm not interested in networking? I primarily deal with
serial lines, files and subprocesses... are there examples for those?

Points #3 and #4 are my motivation for using Twisted ? I am currently
mired in a pygtk program that uses threads and all sorts of locks and
synchronisation mechanisms to send and receive data over a serial
line, updating UI with progress, errors and success. I'd like to see
if using Twisted simplifies things a bit, and I'll ask a more specific
question about how to structure that when I can condense it to a
reasonable level :)

I hope I'm not being too vague, but Twisted is rather large,
conceptually, to absorb. I keep being pointed to the documentation for
specific parts, but I have no idea how they fit together and that's
what I'm really after.

Thanks,
Jason

[1] http://twistedmatrix.com/documents/current/core/howto/tutorial/index.html
[2] http://krondo.com/?page_id=1327
[3] http://twistedmatrix.com/documents/current/core/howto/tutorial/intro.html#auto4
[4] http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.BaseProtocol.html#makeConnection


From bogus@does.not.exist.com  Fri Jan  7 09:23:30 2011
From: bogus@does.not.exist.com ()
Date: Fri, 07 Jan 2011 14:23:30 -0000
Subject: No subject
Message-ID: <mailman.1.1297857644.9252.twisted-python@twistedmatrix.com>

 def sendString(self, string):
     self.transport.write(
         struct.pack(self.structFormat, len(string)) + string)

Would it make sense to do something like this instead:

 def sendString(self, string):
     self.transport.write(
         struct.pack(self.structFormat, len(string)))
     self.transport.write(string)

in order to avoid the creation of the extra string object?

--0016e64347da63db10049c65079c
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable


From bogus@does.not.exist.com  Fri Jan  7 09:23:30 2011
From: bogus@does.not.exist.com ()
Date: Fri, 07 Jan 2011 14:23:30 -0000
Subject: No subject
Message-ID: <mailman.2.1297857644.9252.twisted-python@twistedmatrix.com>

te(<br> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0struct.pack(self.structFormat, le=
n(string)) + string)<br><br>Would it make sense to do something like this i=
nstead:<br>
<br> =C2=A0def sendString(self, string):<br> =C2=A0 =C2=A0 =C2=A0self.trans=
port.write(<br> =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0struct.pack(self.structFo=
rmat, len(string)))<br> =C2=A0 =C2=A0 =C2=A0self.transport.write(string)<br=
><br>in order to avoid the creation of the extra string object?<br>

--0016e64347da63db10049c65079c--


From glyph at twistedmatrix.com  Sat Jan  1 07:52:03 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Jan 2011 09:52:03 -0500
Subject: [Twisted-Python] job server project
In-Reply-To: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
Message-ID: <D43A3DA3-AEC2-451F-9EF7-489243972785@twistedmatrix.com>


On Dec 31, 2010, at 7:35 AM, Umut Aydin wrote:

> Hello everybody

Hello Umut! :)

> I just completed an article about writing a job server with Twisted
> Framework. It's also based on my job server project called Jobbar.
> 
> http://umut.mobi/blog/2010/12/31/jobbar-distributed-job-server/
> 
> I'm still working on it.
> 
> Happy new year.
> 
> - Umut

Thanks for reporting your progress; it's always nice to hear how people are using Twisted.  And thanks again for your shout-out to those who work tirelessly answering questions here and on the IRC channel :).

Perhaps when Jobbar is a bit further along, you'd like to submit a success story <http://twistedmatrix.com/trac/wiki/SuccessStories> or join the TX project group on Launchpad <https://launchpad.net/tx>?

-g


From exarkun at twistedmatrix.com  Sat Jan  1 22:05:17 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 Jan 2011 05:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1293944717.3.1015830382@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110102/fab52bc0/attachment-0001.html>

From david at davidstrauss.net  Mon Jan  3 14:52:43 2011
From: david at davidstrauss.net (David Strauss)
Date: Mon, 03 Jan 2011 13:52:43 -0800
Subject: [Twisted-Python] job server project
In-Reply-To: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
Message-ID: <1294091563.3805.15.camel@oxygen>

On Fri, 2010-12-31 at 14:35 +0200, Umut Aydin wrote:
> I just completed an article about writing a job server with Twisted
> Framework. It's also based on my job server project called Jobbar.
> 
> http://umut.mobi/blog/2010/12/31/jobbar-distributed-job-server/
> 
> I'm still working on it.

As long as you're in Python land, you might want to check out Celery.

-- 
David Strauss
   | david at davidstrauss.net
   | +1 512 577 5827 [mobile]

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20110103/25a7e9f5/attachment.sig>

From glyph at twistedmatrix.com  Mon Jan  3 15:23:43 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 3 Jan 2011 17:23:43 -0500
Subject: [Twisted-Python] job server project
In-Reply-To: <1294091563.3805.15.camel@oxygen>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
	<1294091563.3805.15.camel@oxygen>
Message-ID: <2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>


On Jan 3, 2011, at 4:52 PM, David Strauss wrote:

> On Fri, 2010-12-31 at 14:35 +0200, Umut Aydin wrote:
>> I just completed an article about writing a job server with Twisted
>> Framework. It's also based on my job server project called Jobbar.
>> 
>> http://umut.mobi/blog/2010/12/31/jobbar-distributed-job-server/
>> 
>> I'm still working on it.
> 
> As long as you're in Python land, you might want to check out Celery.


(in case it's not obvious, <http://celeryproject.org/>)

Oh, is Celery based on Twisted too?




From lvh at laurensvh.be  Mon Jan  3 16:47:55 2011
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Tue, 4 Jan 2011 00:47:55 +0100
Subject: [Twisted-Python] job server project
In-Reply-To: <2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
	<1294091563.3805.15.camel@oxygen>
	<2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>
Message-ID: <AANLkTimrHJgFOwGOxy70QOLDfPTee73LvUEzSx4cnXRW@mail.gmail.com>

AFAIK, no. It has a number of concurrency things:

 - gevent
 - eventlet
 - pools (threads and processes)

No twisted, afaik.

cheers,
lvh



From glyph at twistedmatrix.com  Mon Jan  3 20:48:02 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 3 Jan 2011 22:48:02 -0500
Subject: [Twisted-Python] job server project
In-Reply-To: <AANLkTimrHJgFOwGOxy70QOLDfPTee73LvUEzSx4cnXRW@mail.gmail.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
	<1294091563.3805.15.camel@oxygen>
	<2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>
	<AANLkTimrHJgFOwGOxy70QOLDfPTee73LvUEzSx4cnXRW@mail.gmail.com>
Message-ID: <1981317B-F4DF-4417-B9F4-3157E5F46BD5@twistedmatrix.com>


On Jan 3, 2011, at 6:47 PM, Laurens Van Houtven wrote:

> AFAIK, no. It has a number of concurrency things:
> 
> - gevent
> - eventlet
> - pools (threads and processes)
> 
> No twisted, afaik.
> 
> cheers,
> lvh

Well, sort of: eventlet uses the 'twistdr' hub by default, so you could probably use celery with Twisted just fine.  I wonder: has anyone done so?


From devnetwork at gmail.com  Tue Jan  4 03:13:12 2011
From: devnetwork at gmail.com (Umut Aydin)
Date: Tue, 4 Jan 2011 12:13:12 +0200
Subject: [Twisted-Python] job server project
In-Reply-To: <1981317B-F4DF-4417-B9F4-3157E5F46BD5@twistedmatrix.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
	<1294091563.3805.15.camel@oxygen>
	<2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>
	<AANLkTimrHJgFOwGOxy70QOLDfPTee73LvUEzSx4cnXRW@mail.gmail.com>
	<1981317B-F4DF-4417-B9F4-3157E5F46BD5@twistedmatrix.com>
Message-ID: <AANLkTinCboCkgxcG8BfMSXpMp4OzJa0mAjPstBUmY3yi@mail.gmail.com>

I haven't heard of gevent nor evenlet.
Thank you so much.

On Tue, Jan 4, 2011 at 5:48 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Jan 3, 2011, at 6:47 PM, Laurens Van Houtven wrote:
>
>> AFAIK, no. It has a number of concurrency things:
>>
>> - gevent
>> - eventlet
>> - pools (threads and processes)
>>
>> No twisted, afaik.
>>
>> cheers,
>> lvh
>
> Well, sort of: eventlet uses the 'twistdr' hub by default, so you could probably use celery with Twisted just fine.  I wonder: has anyone done so?
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Best Regards,

Umut AYDIN
Email: me at umut.mobi

Skype: umut-aydin

Blog: http://umut.mobi



From lvh at laurensvh.be  Tue Jan  4 05:02:12 2011
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Tue, 4 Jan 2011 13:02:12 +0100
Subject: [Twisted-Python] job server project
In-Reply-To: <AANLkTinCboCkgxcG8BfMSXpMp4OzJa0mAjPstBUmY3yi@mail.gmail.com>
References: <AANLkTi=334Lsj8_zWBEpdj48xTnLiz=-zCV-M7PHO1N+@mail.gmail.com>
	<1294091563.3805.15.camel@oxygen>
	<2AF4CE31-2D3C-4CEF-88E6-6EA35D6FBFE0@twistedmatrix.com>
	<AANLkTimrHJgFOwGOxy70QOLDfPTee73LvUEzSx4cnXRW@mail.gmail.com>
	<1981317B-F4DF-4417-B9F4-3157E5F46BD5@twistedmatrix.com>
	<AANLkTinCboCkgxcG8BfMSXpMp4OzJa0mAjPstBUmY3yi@mail.gmail.com>
Message-ID: <AANLkTinwjB2tJmUTfcWcPic5ZOjBmNxaNXFWaA0F+n73@mail.gmail.com>

Note: I'm not David -- I was just clarifying Glyph's question. I'm not
suggesting you should use either of those. If you are interested in
things that look like with Twisted, I recommend

 - look at @inlineCallbacks -- it uses generators, not greenlet-style
coroutines, but quite often it covers what you want
 - look at Corotwine -- it's basically greenlets with a Twisted
backend, somewhat comparable to eventlet with a Twisted backend, but
without the monkey patching

cheers
lvh



From ypercube at gmail.com  Tue Jan  4 16:10:06 2011
From: ypercube at gmail.com (Pandelis Theodosiou)
Date: Wed, 5 Jan 2011 01:10:06 +0200
Subject: [Twisted-Python] multicast
In-Reply-To: <CB733F3E-9468-4416-8F86-09FF32FA202A@red-elvis.net>
References: <AANLkTimgGJPEhcifzaLd01LVTPbPyL2znz30n5RRaXj1@mail.gmail.com>
	<1292457974.1779.0.camel@blake>
	<AANLkTi=5GmOLqr-d0=Cnow6g6Uut3SZab8amSR8ZzNeJ@mail.gmail.com>
	<1292515193.2033.1.camel@blake>
	<20101216161029.2058.1592790811.divmod.xquotient.275@localhost.localdomain>
	<CB733F3E-9468-4416-8F86-09FF32FA202A@red-elvis.net>
Message-ID: <AANLkTik7Zod0UGMvxnA76Wd4UeX1OT9zkzKeEomwez4Z@mail.gmail.com>

On Thu, Dec 16, 2010 at 6:47 PM, Andrew Gasson <agasson at red-elvis.net>wrote:

>
> On 16/12/2010, at 5:10 PM, exarkun at twistedmatrix.com wrote:
>
> > On 03:59 pm, itamar at itamarst.org wrote:
> >> On Thu, 2010-12-16 at 12:09 +0200, Pandelis Theodosiou wrote:
> >>>
> >>> I've also tried to use listenMulticast instead of listenUDP but then I
> >>> realized this is if I need more than one application to listen/write
> >>> to the multicast port and I don't need that.
> >>> pandelis
> >>
> >> You should use listenMulticast regardless if you want to use multicast.
> >
> > Is that an error in the udp howto, then?  The second multicast example
> > uses listenUDP.
>
> check the ttl of your multicast source , they usually default to TTL=1 so
> wont pass a router hop, also with nix boxes check once you start listening
> you are listening on right interface with netstat -g
>
> Gas
> >
> > Jean-Paul
> >
>


Thnx to all for the responses. It was a router configuration.

Now, is there a way I can select which interface to use (eth0 or eth1)?

I tried using

  joinGroup('233.75.215.44', 'eth0')

but it raises an error   (DNS Lookup failed...)


Pandelis
 <http://int.ask.com/web?siteid=10000861&webqsrc=999&l=dis&q=that%20eth0>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110105/6e9376bc/attachment-0001.html>

From exarkun at twistedmatrix.com  Tue Jan  4 20:06:09 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Jan 2011 03:06:09 -0000
Subject: [Twisted-Python] multicast
In-Reply-To: <AANLkTik7Zod0UGMvxnA76Wd4UeX1OT9zkzKeEomwez4Z@mail.gmail.com>
References: <AANLkTimgGJPEhcifzaLd01LVTPbPyL2znz30n5RRaXj1@mail.gmail.com>
	<1292457974.1779.0.camel@blake>
	<AANLkTi=5GmOLqr-d0=Cnow6g6Uut3SZab8amSR8ZzNeJ@mail.gmail.com>
	<1292515193.2033.1.camel@blake>
	<20101216161029.2058.1592790811.divmod.xquotient.275@localhost.localdomain>
	<CB733F3E-9468-4416-8F86-09FF32FA202A@red-elvis.net>
	<AANLkTik7Zod0UGMvxnA76Wd4UeX1OT9zkzKeEomwez4Z@mail.gmail.com>
Message-ID: <20110105030609.2264.1926000966.divmod.xquotient.1@localhost.localdomain>

On 4 Jan, 11:10 pm, ypercube at gmail.com wrote:
>
>Thnx to all for the responses. It was a router configuration.
>
>Now, is there a way I can select which interface to use (eth0 or eth1)?
>
>I tried using
>
>  joinGroup('233.75.215.44', 'eth0')
>
>but it raises an error   (DNS Lookup failed...)

Pass something like 192.168.1.1 for the second argument, not something 
like eth0.

Jean-Paul



From exarkun at twistedmatrix.com  Tue Jan  4 20:15:12 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Jan 2011 03:15:12 -0000
Subject: [Twisted-Python] Want something fixed?
Message-ID: <20110105031512.2264.1908181618.divmod.xquotient.8@localhost.localdomain>

Hi all,

I'd like someone to do a review on #4395 - a ticket about some conch key 
exchange bugs.  The branch isn't very large, a little under 500 lines of 
diff (with nearly a hundred of those deletions).

In exchange for a thorough review (and perhaps a re-review if issues are 
found which need to be fixed), I'd be happy to spend as much as a full 
day working on some other issue of the reviewer's choice.

Thanks,
Jean-Paul



From ypercube at gmail.com  Sat Jan  8 18:23:06 2011
From: ypercube at gmail.com (Pandelis Theodosiou)
Date: Sun, 9 Jan 2011 03:23:06 +0200
Subject: [Twisted-Python] Amazon AWS, Google app engine and Twisted
Message-ID: <AANLkTim2Y-EEJVMf=N7ahSA+hxTYB8VjXVstZu8yuEX1@mail.gmail.com>

This may be a dumb question but I'll make it anyway:

Is it possible to use Amazon AWS or Google app engine as a hosting
envirorment for a Twisted application?

Pandelis
 <http://int.ask.com/web?siteid=10000861&webqsrc=999&l=dis&q=ask%20>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110109/38290644/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Jan  8 22:05:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Jan 2011 05:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1294549522.94.941819425@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110109/49ca3132/attachment.html>

From clemesha at gmail.com  Sun Jan  9 00:00:09 2011
From: clemesha at gmail.com (Alex Clemesha)
Date: Sat, 8 Jan 2011 23:00:09 -0800
Subject: [Twisted-Python] Amazon AWS, Google app engine and Twisted
In-Reply-To: <AANLkTim2Y-EEJVMf=N7ahSA+hxTYB8VjXVstZu8yuEX1@mail.gmail.com>
References: <AANLkTim2Y-EEJVMf=N7ahSA+hxTYB8VjXVstZu8yuEX1@mail.gmail.com>
Message-ID: <AANLkTimTjOGoE0Tc0yAsUzZD7re7PAnb5WkAc9OGtF+P@mail.gmail.com>

On Sat, Jan 8, 2011 at 5:23 PM, Pandelis Theodosiou <ypercube at gmail.com>wrote:

> This may be a dumb question but I'll make it anyway:
>
> Is it possible to use Amazon AWS

Absolutely. A lot of people have large Twisted apps on AWS.

or Google app engine as a hosting envirorment for a Twisted application?
>
No, not currently (if ever?).

-Alex



>
> Pandelis
>  <http://int.ask.com/web?siteid=10000861&webqsrc=999&l=dis&q=ask%20>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Alex Clemesha
clemesha.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110108/1476b6c7/attachment.html>

From angelo.dellaera at gmail.com  Sun Jan  9 04:10:11 2011
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Sun, 9 Jan 2011 12:10:11 +0100
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
Message-ID: <20110109121011.003937fb@alnitak.communicationvalley.it>


Hi, 
while developing a code based on Twisted Names I'm finding myself catching 
RuntimeErrors like the one reported below. 


2011-01-09 10:32:13+0100 [twisted.names.dns.DNSDatagramProtocol (UDP)]
Unhandled Error Traceback (most recent call last):
  File "/usr/lib64/python2.6/site-packages/twisted/python/log.py", line 84, in callWithLogger 
		return callWithContext({"system": lp}, func, *args, **kw)
  File "/usr/lib64/python2.6/site-packages/twisted/python/log.py", line 69, in callWithContext 
		return context.call({ILogContext: newCtx}, func, *args,**kw) 
  File "/usr/lib64/python2.6/site-packages/twisted/python/context.py", line 59, in callWithContext 
		return self.currentContext().callWithContext(ctx, func, *args, **kw) 
  File "/usr/lib64/python2.6/site-packages/twisted/python/context.py", line 37, in callWithContext 
	return func(*args,**kw) 
  --- <exception caught here> --- 
  File "/usr/lib64/python2.6/site-packages/twisted/internet/epollreactor.py", line 220, in _doReadOrWrite 
	why = selectable.doWrite() 
  File "/usr/lib64/python2.6/site-packages/twisted/internet/base.py", line 1083, in doWrite 
	raise RuntimeError, "doWrite called on a %s" % reflect.qual(self.__class__)
  exceptions.RuntimeError: doWrite called on a twisted.internet.udp.Port


The code which produces this error is really complex and is part of an 
intelligence data gathering framework I'm developing for the Honeynet 
Project (for those interested in details please take a look at my technical 
blog http://buffer.antifork.org/blog/category/tip/ ). 

I realized that 
	. the RuntimeError is raised really rarely (I see one of such errors 
	  every 2-3 days and during this time frame millions of DNS requests
	  and replies are handled)
	. using different Twisted versions doesn't make the problem disappear
	  (the attached traceback refers to version 10.2.0) 
	. selecting a different reactor doesn't make the problem disappear

Unfortunately I have not a test code for reproducing the issue and sincerely
speaking I really don't know how to write it because this condition is so rarely
met that I'm not able to understand what leads to it.

I could be wrong but taking a look at twisted.internet.udp.Port I see it defines a
write method so I really do not understand the reason why the BasePort doWrite
method raises such error. 

Thanks for your attention and cheers, 

-- 

Angelo Dell'Aera 'buffer' 
Antifork Research, Inc.	  	http://buffer.antifork.org
Metro Olografix




From itamar at itamarst.org  Sun Jan  9 06:54:18 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 09 Jan 2011 08:54:18 -0500
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <20110109121011.003937fb@alnitak.communicationvalley.it>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>
Message-ID: <1294581258.1642.6.camel@blake>

On Sun, 2011-01-09 at 12:10 +0100, Angelo Dell'Aera wrote:
> Hi, 
> while developing a code based on Twisted Names I'm finding myself catching 
> RuntimeErrors like the one reported below. 

It seems like someone, somewhere is doing a startWriting() (or
pauseProducing) on the Port object, i.e. the transport of the
DatagramProtocol. Do you have any code that does
startWriting/pauseProducing? I don't see any in twisted.internet.udp or
twisted.names.




From exarkun at twistedmatrix.com  Sun Jan  9 07:54:33 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Jan 2011 14:54:33 -0000
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <1294581258.1642.6.camel@blake>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>
	<1294581258.1642.6.camel@blake>
Message-ID: <20110109145433.1889.2000788460.divmod.xquotient.13@localhost.localdomain>

On 01:54 pm, itamar at itamarst.org wrote:
>On Sun, 2011-01-09 at 12:10 +0100, Angelo Dell'Aera wrote:
>>Hi,
>>while developing a code based on Twisted Names I'm finding myself 
>>catching
>>RuntimeErrors like the one reported below.
>
>It seems like someone, somewhere is doing a startWriting() (or
>pauseProducing) on the Port object, i.e. the transport of the
>DatagramProtocol. Do you have any code that does
>startWriting/pauseProducing? I don't see any in twisted.internet.udp or
>twisted.names.

Perhaps an easy way to track this down would be to make 
udp.Port.startWriting raise an exception.  Perhaps that's even what it 
should do in Twisted itself.

Jean-Paul



From angelo.dellaera at gmail.com  Sun Jan  9 08:42:44 2011
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Sun, 9 Jan 2011 16:42:44 +0100
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <1294581258.1642.6.camel@blake>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>
	<1294581258.1642.6.camel@blake>
Message-ID: <20110109164244.6ba86b38@alnitak.communicationvalley.it>

On Sun, 09 Jan 2011 08:54:18 -0500
Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> On Sun, 2011-01-09 at 12:10 +0100, Angelo Dell'Aera wrote:
> > Hi, 
> > while developing a code based on Twisted Names I'm finding myself
> > catching RuntimeErrors like the one reported below. 
> 
> It seems like someone, somewhere is doing a startWriting() (or
> pauseProducing) on the Port object, i.e. the transport of the
> DatagramProtocol. Do you have any code that does
> startWriting/pauseProducing? I don't see any in twisted.internet.udp or
> twisted.names.

Hi Itamar,
I make no use of startWriting/pauseProducing in my code. I'm just creating
a client.Resolver and then using its lookup* methods as suggested in the
documentation at

http://twistedmatrix.com/documents/current/names/examples/

I just subclassed the client.Resolver in order to define an empty
connectionLost method this way

class TIPResolver(client.Resolver):
    def __init__(self):
        client.Resolver.__init__(self, resolv = '/etc/resolv.conf')

    def connectionLost(self, protocol):
        pass 

r = TIPResolver()

but nothing more than this.

Thanks and cheers.

PS If you need I can send you the source code off-list.

-- 

Angelo Dell'Aera 'buffer' 
Antifork Research, Inc.	  	http://buffer.antifork.org
Metro Olografix




From angelo.dellaera at gmail.com  Sun Jan  9 08:47:27 2011
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Sun, 9 Jan 2011 16:47:27 +0100
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <20110109145433.1889.2000788460.divmod.xquotient.13@localhost.localdomain>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>
	<1294581258.1642.6.camel@blake>
	<20110109145433.1889.2000788460.divmod.xquotient.13@localhost.localdomain>
Message-ID: <20110109164727.50cc99c4@alnitak.communicationvalley.it>

On Sun, 09 Jan 2011 14:54:33 -0000
exarkun at twistedmatrix.com wrote:

> On 01:54 pm, itamar at itamarst.org wrote:
> >On Sun, 2011-01-09 at 12:10 +0100, Angelo Dell'Aera wrote:
> >>Hi,
> >>while developing a code based on Twisted Names I'm finding myself 
> >>catching
> >>RuntimeErrors like the one reported below.
> >
> >It seems like someone, somewhere is doing a startWriting() (or
> >pauseProducing) on the Port object, i.e. the transport of the
> >DatagramProtocol. Do you have any code that does
> >startWriting/pauseProducing? I don't see any in twisted.internet.udp or
> >twisted.names.
> 
> Perhaps an easy way to track this down would be to make 
> udp.Port.startWriting raise an exception.  Perhaps that's even what it 
> should do in Twisted itself.

Jean-Paul,
I can try adding the startWriting method and see what happens if needed. If
you need additional details from such exception in order to better track
down the issue please let me know and I'll be glad to add everything.  

Thanks and cheers,

-- 

Angelo Dell'Aera 'buffer' 
Antifork Research, Inc.	  	http://buffer.antifork.org
Metro Olografix




From ziga.seilnacht at gmail.com  Sun Jan  9 12:08:01 2011
From: ziga.seilnacht at gmail.com (=?windows-1252?Q?=8Eiga_Seilnacht?=)
Date: Sun, 09 Jan 2011 20:08:01 +0100
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <20110109164727.50cc99c4@alnitak.communicationvalley.it>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>	<1294581258.1642.6.camel@blake>	<20110109145433.1889.2000788460.divmod.xquotient.13@localhost.localdomain>
	<20110109164727.50cc99c4@alnitak.communicationvalley.it>
Message-ID: <4D2A0791.5070100@gmail.com>

On 9.1.2011 16:47, Angelo Dell'Aera wrote:
> On Sun, 09 Jan 2011 14:54:33 -0000
> exarkun at twistedmatrix.com wrote:
>
>>  On 01:54 pm, itamar at itamarst.org wrote:
>>  >On Sun, 2011-01-09 at 12:10 +0100, Angelo Dell'Aera wrote:
>>  >>Hi,
>>  >>while developing a code based on Twisted Names I'm finding myself
>>  >>catching
>>  >>RuntimeErrors like the one reported below.
>>  >
>>  >It seems like someone, somewhere is doing a startWriting() (or
>>  >pauseProducing) on the Port object, i.e. the transport of the
>>  >DatagramProtocol. Do you have any code that does
>>  >startWriting/pauseProducing? I don't see any in twisted.internet.udp or
>>  >twisted.names.
>>
>>  Perhaps an easy way to track this down would be to make
>>  udp.Port.startWriting raise an exception.  Perhaps that's even what it
>>  should do in Twisted itself.
>
> Jean-Paul,
> I can try adding the startWriting method and see what happens if needed. If
> you need additional details from such exception in order to better track
> down the issue please let me know and I'll be glad to add everything.
>
> Thanks and cheers,

Could you also let us know which operating system and version you are
using and which reactors you tried? A similar error was recently reported
for poll reactor on FreeBSD (http://twistedmatrix.com/trac/ticket/4759).

Regards,
Ziga



From angelo.dellaera at gmail.com  Sun Jan  9 12:25:22 2011
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Sun, 9 Jan 2011 20:25:22 +0100
Subject: [Twisted-Python] Twisted Names - strange RuntimeError
In-Reply-To: <4D2A0791.5070100@gmail.com>
References: <20110109121011.003937fb@alnitak.communicationvalley.it>
	<1294581258.1642.6.camel@blake>
	<20110109145433.1889.2000788460.divmod.xquotient.13@localhost.localdomain>
	<20110109164727.50cc99c4@alnitak.communicationvalley.it>
	<4D2A0791.5070100@gmail.com>
Message-ID: <20110109202522.75343c7c@alnitak.communicationvalley.it>

On Sun, 09 Jan 2011 20:08:01 +0100
Žiga Seilnacht <ziga.seilnacht at gmail.com> wrote:


> Could you also let us know which operating system and version you are
> using and which reactors you tried? A similar error was recently reported
> for poll reactor on FreeBSD (http://twistedmatrix.com/trac/ticket/4759).

Sure.

OS: 		Gentoo Linux (kernel 2.6.34)
Twisted: 	10.1.0 and10.2.0
Reactors: select (default) and epoll

I tried all the possible combinations of Twisted and reactors always
getting the same error.

Thanks and regards, 

-- 

Angelo Dell'Aera 'buffer' 
Antifork Research, Inc.	  	http://buffer.antifork.org
Metro Olografix




From jml at mumak.net  Mon Jan 10 10:11:37 2011
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 10 Jan 2011 11:11:37 -0600
Subject: [Twisted-Python] Want something fixed?
In-Reply-To: <20110105031512.2264.1908181618.divmod.xquotient.8@localhost.localdomain>
References: <20110105031512.2264.1908181618.divmod.xquotient.8@localhost.localdomain>
Message-ID: <AANLkTinB5wk_NjnGqi-X6RnkMn+gHtE9aG3k9fL3RXDv@mail.gmail.com>

On Tue, Jan 4, 2011 at 9:15 PM,  <exarkun at twistedmatrix.com> wrote:
> Hi all,
>
> I'd like someone to do a review on #4395 - a ticket about some conch key
> exchange bugs.  The branch isn't very large, a little under 500 lines of
> diff (with nearly a hundred of those deletions).
>
> In exchange for a thorough review (and perhaps a re-review if issues are
> found which need to be fixed), I'd be happy to spend as much as a full
> day working on some other issue of the reviewer's choice.
>

Have you found a volunteer yet?

If not, I can do a thorough review this weekend. In exchange, I'd very
much like my pyflakes branch to be reviewed and landed. (Although
perhaps I should ask for moving pyflakes to Launchpad?)

jml



From exarkun at twistedmatrix.com  Mon Jan 10 10:31:11 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 10 Jan 2011 17:31:11 -0000
Subject: [Twisted-Python] Want something fixed?
In-Reply-To: <AANLkTinB5wk_NjnGqi-X6RnkMn+gHtE9aG3k9fL3RXDv@mail.gmail.com>
References: <20110105031512.2264.1908181618.divmod.xquotient.8@localhost.localdomain>
	<AANLkTinB5wk_NjnGqi-X6RnkMn+gHtE9aG3k9fL3RXDv@mail.gmail.com>
Message-ID: <20110110173111.1821.2136864876.divmod.xquotient.77@localhost.localdomain>

On 05:11 pm, jml at mumak.net wrote:
>On Tue, Jan 4, 2011 at 9:15 PM,  <exarkun at twistedmatrix.com> wrote:
>>Hi all,
>>
>>I'd like someone to do a review on #4395 - a ticket about some conch 
>>key
>>exchange bugs. �The branch isn't very large, a little under 500 lines 
>>of
>>diff (with nearly a hundred of those deletions).
>>
>>In exchange for a thorough review (and perhaps a re-review if issues 
>>are
>>found which need to be fixed), I'd be happy to spend as much as a full
>>day working on some other issue of the reviewer's choice.
>
>Have you found a volunteer yet?
>
>If not, I can do a thorough review this weekend. In exchange, I'd very
>much like my pyflakes branch to be reviewed and landed. (Although
>perhaps I should ask for moving pyflakes to Launchpad?)

Woops, yes, I should have followed up on Friday.  Michael Hudson did the 
review, and this ticket is now resolved.

As far as moving pyflakes to Launchpad goes, talk to me on IRC.  We are 
trying to do that but might need some help. :)

Jean-Paul



From robfranchesco at gmail.com  Mon Jan 10 14:29:58 2011
From: robfranchesco at gmail.com (Roberto Franchesco)
Date: Mon, 10 Jan 2011 16:29:58 -0500
Subject: [Twisted-Python] Twisted and ICP protocol
Message-ID: <AANLkTi=6vq6xzekN+AQyL3gn5BCLa=y-4Gnj52Rc22WE@mail.gmail.com>

Hello All,

I have been trying to get a squid proxy to "talk" to a twisted proxy
and I came across an old email from this list where someone mentioned
that they had implemented a basic ICP protocol in twisted.

Does anyone still have that implementation?  Or any good pointers on
setting me off in the right direction as to how to do this?

-Rob



From alex.gronholm at nextday.fi  Mon Jan 10 14:57:14 2011
From: alex.gronholm at nextday.fi (=?ISO-8859-1?Q?Alex_Gr=F6nholm?=)
Date: Mon, 10 Jan 2011 23:57:14 +0200
Subject: [Twisted-Python] Twisted and PEP 3148 support
Message-ID: <4D2B80BA.2080506@nextday.fi>

There has been some discussion over email between myself and several 
Twisted developers regarding the possibility of adding support for PEP 
3148 futures and executors to Twisted. I'm starting this thread to move 
the conversation to this mailing list to gain a broader audience.

For those who do not know what PEP 3148 is about, suffice to say that 
it's an API for deferred execution of code. The reference implementation 
can be found in the Python 3.2 standard library under the package name 
concurrent.futures. A backport that works on Python 2.5, 2.6, 2.7 and 
3.1 has been made available by Brian Quinlan and myself and is available 
for download at the Python Package Index.

A brief summary of the email conversations:

* The purpose of integrating PEP 3148 support is the intended shift 
towards a common API for creating asynchronous applications
* Deferreds and Futures are alike in purpose but very different under 
the hood
* Support for the Futures API cannot be integrated directly to Deferreds 
because of the "result" attribute which is a method in Future but a 
value in Deferred
* Some people suggested wrapping Futures in Deferreds, though I have yet 
to hear a rationale for this
* PEP 3148 executor support could be directly integrated to Twisted's 
thread pools (and by extension, reactors) as there are no naming 
conflicts that I'm aware of

The main focus of the discussion is to figure out how to best integrate 
support for this new API to Twisted. If possible, existing protocols 
should remain compatible through the use of adapters or some other 
mechanism. If not, a way to port them over with a minimal amount of work 
would be the next target.



From jasonjwwilliams at gmail.com  Mon Jan 10 15:01:16 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 10 Jan 2011 15:01:16 -0700
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <4D2B80BA.2080506@nextday.fi>
References: <4D2B80BA.2080506@nextday.fi>
Message-ID: <AANLkTimA0D3J8aGE5jb53V5HPwzuicv3Cuab5nefBEum@mail.gmail.com>

Do futures support chaining? From a cursory read of PEP 3148 it
doesn't look like they do.

-J

2011/1/10 Alex Grönholm <alex.gronholm at nextday.fi>:
> There has been some discussion over email between myself and several
> Twisted developers regarding the possibility of adding support for PEP
> 3148 futures and executors to Twisted. I'm starting this thread to move
> the conversation to this mailing list to gain a broader audience.
>
> For those who do not know what PEP 3148 is about, suffice to say that
> it's an API for deferred execution of code. The reference implementation
> can be found in the Python 3.2 standard library under the package name
> concurrent.futures. A backport that works on Python 2.5, 2.6, 2.7 and
> 3.1 has been made available by Brian Quinlan and myself and is available
> for download at the Python Package Index.
>
> A brief summary of the email conversations:
>
> * The purpose of integrating PEP 3148 support is the intended shift
> towards a common API for creating asynchronous applications
> * Deferreds and Futures are alike in purpose but very different under
> the hood
> * Support for the Futures API cannot be integrated directly to Deferreds
> because of the "result" attribute which is a method in Future but a
> value in Deferred
> * Some people suggested wrapping Futures in Deferreds, though I have yet
> to hear a rationale for this
> * PEP 3148 executor support could be directly integrated to Twisted's
> thread pools (and by extension, reactors) as there are no naming
> conflicts that I'm aware of
>
> The main focus of the discussion is to figure out how to best integrate
> support for this new API to Twisted. If possible, existing protocols
> should remain compatible through the use of adapters or some other
> mechanism. If not, a way to port them over with a minimal amount of work
> would be the next target.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From alex.gronholm at nextday.fi  Mon Jan 10 15:04:14 2011
From: alex.gronholm at nextday.fi (=?ISO-8859-1?Q?Alex_Gr=F6nholm?=)
Date: Tue, 11 Jan 2011 00:04:14 +0200
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <AANLkTimA0D3J8aGE5jb53V5HPwzuicv3Cuab5nefBEum@mail.gmail.com>
References: <4D2B80BA.2080506@nextday.fi>
	<AANLkTimA0D3J8aGE5jb53V5HPwzuicv3Cuab5nefBEum@mail.gmail.com>
Message-ID: <4D2B825E.3000506@nextday.fi>

11.01.2011 00:01, Jason J. W. Williams kirjoitti:
> Do futures support chaining? From a cursory read of PEP 3148 it
> doesn't look like they do.
They don't support chaining. Like I said, the underlying mechanics are 
quite a bit different from Deferreds. I don't really see that as a 
problem. Feel free to argue against this.
> -J
>
> 2011/1/10 Alex Grönholm<alex.gronholm at nextday.fi>:
>> There has been some discussion over email between myself and several
>> Twisted developers regarding the possibility of adding support for PEP
>> 3148 futures and executors to Twisted. I'm starting this thread to move
>> the conversation to this mailing list to gain a broader audience.
>>
>> For those who do not know what PEP 3148 is about, suffice to say that
>> it's an API for deferred execution of code. The reference implementation
>> can be found in the Python 3.2 standard library under the package name
>> concurrent.futures. A backport that works on Python 2.5, 2.6, 2.7 and
>> 3.1 has been made available by Brian Quinlan and myself and is available
>> for download at the Python Package Index.
>>
>> A brief summary of the email conversations:
>>
>> * The purpose of integrating PEP 3148 support is the intended shift
>> towards a common API for creating asynchronous applications
>> * Deferreds and Futures are alike in purpose but very different under
>> the hood
>> * Support for the Futures API cannot be integrated directly to Deferreds
>> because of the "result" attribute which is a method in Future but a
>> value in Deferred
>> * Some people suggested wrapping Futures in Deferreds, though I have yet
>> to hear a rationale for this
>> * PEP 3148 executor support could be directly integrated to Twisted's
>> thread pools (and by extension, reactors) as there are no naming
>> conflicts that I'm aware of
>>
>> The main focus of the discussion is to figure out how to best integrate
>> support for this new API to Twisted. If possible, existing protocols
>> should remain compatible through the use of adapters or some other
>> mechanism. If not, a way to port them over with a minimal amount of work
>> would be the next target.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From alex.gronholm at nextday.fi  Mon Jan 10 15:12:19 2011
From: alex.gronholm at nextday.fi (=?ISO-8859-1?Q?Alex_Gr=F6nholm?=)
Date: Tue, 11 Jan 2011 00:12:19 +0200
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <AANLkTimA0D3J8aGE5jb53V5HPwzuicv3Cuab5nefBEum@mail.gmail.com>
References: <4D2B80BA.2080506@nextday.fi>
	<AANLkTimA0D3J8aGE5jb53V5HPwzuicv3Cuab5nefBEum@mail.gmail.com>
Message-ID: <4D2B8443.7070808@nextday.fi>

11.01.2011 00:01, Jason J. W. Williams kirjoitti:
> Do futures support chaining? From a cursory read of PEP 3148 it
> doesn't look like they do.
To add to my previous statement, this will obviously limit the 
portability of existing protocols, but I don't see it as a problem for 
*new code*.
> -J
>
> 2011/1/10 Alex Grönholm<alex.gronholm at nextday.fi>:
>> There has been some discussion over email between myself and several
>> Twisted developers regarding the possibility of adding support for PEP
>> 3148 futures and executors to Twisted. I'm starting this thread to move
>> the conversation to this mailing list to gain a broader audience.
>>
>> For those who do not know what PEP 3148 is about, suffice to say that
>> it's an API for deferred execution of code. The reference implementation
>> can be found in the Python 3.2 standard library under the package name
>> concurrent.futures. A backport that works on Python 2.5, 2.6, 2.7 and
>> 3.1 has been made available by Brian Quinlan and myself and is available
>> for download at the Python Package Index.
>>
>> A brief summary of the email conversations:
>>
>> * The purpose of integrating PEP 3148 support is the intended shift
>> towards a common API for creating asynchronous applications
>> * Deferreds and Futures are alike in purpose but very different under
>> the hood
>> * Support for the Futures API cannot be integrated directly to Deferreds
>> because of the "result" attribute which is a method in Future but a
>> value in Deferred
>> * Some people suggested wrapping Futures in Deferreds, though I have yet
>> to hear a rationale for this
>> * PEP 3148 executor support could be directly integrated to Twisted's
>> thread pools (and by extension, reactors) as there are no naming
>> conflicts that I'm aware of
>>
>> The main focus of the discussion is to figure out how to best integrate
>> support for this new API to Twisted. If possible, existing protocols
>> should remain compatible through the use of adapters or some other
>> mechanism. If not, a way to port them over with a minimal amount of work
>> would be the next target.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From radix at twistedmatrix.com  Mon Jan 10 16:26:24 2011
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 10 Jan 2011 17:26:24 -0600
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <4D2B80BA.2080506@nextday.fi>
References: <4D2B80BA.2080506@nextday.fi>
Message-ID: <AANLkTi=9n16eFVKNwQw=VhDZXNpTn4=93J_dUGLZPWPu@mail.gmail.com>

2011/1/10 Alex Grönholm <alex.gronholm at nextday.fi>

> There has been some discussion over email between myself and several
> Twisted developers regarding the possibility of adding support for PEP
> 3148 futures and executors to Twisted. I'm starting this thread to move
> the conversation to this mailing list to gain a broader audience.
>
> For those who do not know what PEP 3148 is about, suffice to say that
> it's an API for deferred execution of code.



I just want to make clear up-front the subtle point that Twisted's Deferreds
are not tools for "deferred execution of code", but rather for "deferred
receipt of results". It's easy to forget this and believe that the similar
jargon implies similarity in purpose.


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110110/9d9bbf2a/attachment.html>

From alex.gronholm at nextday.fi  Mon Jan 10 16:36:44 2011
From: alex.gronholm at nextday.fi (=?UTF-8?B?QWxleCBHcsO2bmhvbG0=?=)
Date: Tue, 11 Jan 2011 01:36:44 +0200
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <AANLkTi=9n16eFVKNwQw=VhDZXNpTn4=93J_dUGLZPWPu@mail.gmail.com>
References: <4D2B80BA.2080506@nextday.fi>
	<AANLkTi=9n16eFVKNwQw=VhDZXNpTn4=93J_dUGLZPWPu@mail.gmail.com>
Message-ID: <4D2B980C.50605@nextday.fi>

11.01.2011 01:26, Christopher Armstrong kirjoitti:
> 2011/1/10 Alex Grönholm <alex.gronholm at nextday.fi 
> <mailto:alex.gronholm at nextday.fi>>
>
>     There has been some discussion over email between myself and several
>     Twisted developers regarding the possibility of adding support for PEP
>     3148 futures and executors to Twisted. I'm starting this thread to
>     move
>     the conversation to this mailing list to gain a broader audience.
>
>     For those who do not know what PEP 3148 is about, suffice to say that
>     it's an API for deferred execution of code.
>
>
>
> I just want to make clear up-front the subtle point that Twisted's 
> Deferreds are not tools for "deferred execution of code", but rather 
> for "deferred receipt of results". It's easy to forget this and 
> believe that the similar jargon implies similarity in purpose.
I never wanted to imply that -- I apologize if I left the wrong 
impression. PEP 3148 Futures have the exact same high level purpose as 
Deferreds in that they are essentially receipts for results. Like 
Deferreds, they are not tied to any particular executor.
>
>
> -- 
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110111/2d64636b/attachment.html>

From screwtape at froup.com  Mon Jan 10 18:54:39 2011
From: screwtape at froup.com (Tim Allen)
Date: Tue, 11 Jan 2011 12:54:39 +1100
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <4D2B80BA.2080506@nextday.fi>
References: <4D2B80BA.2080506@nextday.fi>
Message-ID: <20110111015439.GA21847@boombah.thristian.org>

On Mon, Jan 10, 2011 at 11:57:14PM +0200, Alex Grönholm wrote:
> The main focus of the discussion is to figure out how to best integrate 
> support for this new API to Twisted. If possible, existing protocols 
> should remain compatible through the use of adapters or some other 
> mechanism. If not, a way to port them over with a minimal amount of work 
> would be the next target.

I think I've read PEP 3148 before, but that was a while ago. Looking
over it again now, here are my initial thoughts as just a user of
Twisted.

- Executor.submit() seems to be an analogue to Twisted's
  reactor.callInThread(), that should be easy enough to add to Twisted's
  implementation.
- Executor.map() doesn't havve a Twisted analogue, as far as I know, but
  seems a useful addition.
- Executor.shutdown() seems like a Bad Idea, at least for implementation
  in Twisted's reactor - I don't want to call some third-party library
  and have it shut down my entire process when I'm done! Perhaps, rather
  than making Twisted's reactor implement the Executor interface, there
  should be .makeExecutor() method that returns an Executor instance
  that can support the .shutdown() semantics without actually shutting
  down the Twisted event loop.

- Futures are obviously fairly similar to Deferreds, but there are some
  differences of approach:
    - Futures support cancellation; Twisted finally managed to get rid
      of cancellation support in Deferreds.
    - Futures pass themselves to a series of callbacks, and have
      .result() and .exception() methods so that the callbacks can
      discover what happened. Deferreds pass results or Failure objects
      through a double list of callbacks and errbacks.
    - Futures store the results of the function call that was run in
      a thread, and pass the same information to each calback. Deferreds
      allow each callback to transform the result and even pause the
      callback-chain to wait for more asynchronous results.
    - Futures allow code to wait indefinitely for a result or exception
      to appear, which makes sense if the result is being calculated in
      a thread, but which would cause a deadlock in an event-based
      system like Twisted.

It should be pretty simple to create a Deferred that wraps a Future:

    from twisted.internet import defer

    def deferredFromFuture(future):
	d = defer.Deferred()
	def callback(future):
	    e = future.exception()
	    if e:
		d.fail(e)
		return

	    d.succeed(future.result())

	future.add_done_callback(callback)
	return d

I guess a creating a future that wraps a Deferred wouldn't be hard
either:

    from concurrent.futures import Future

    def futureFromDeferred(deferred):
	f = Future()
	f.set_running_or_notify_cancel()

	def callback(result):
	    f.set_result(result)
	    return result
	d.addcallback(callback)

	def errback(failure):
	    f.set_exception(failure.value)
	    return failure
	d.adderrback(errback)

	return f

Of course, if somebody added another callback after the ones added by
futureFromDeferred(), the new values wouldn't be passed to the Future,
and if somebody called future.result() or future.exception() without
a timeout, that could cause a deadlock as mentioned above. I'm not sure
it's possible to work around either of those problems, so perhaps
futureFromDeferred() is a thing that should not be included in
a library, at least not without big warnings all over it like Twisted's
integration with the stdlib "logging" module has.

I also can't immediately see a way to make an object that functions as
both a Deferred and a Future, or build Deferred's functionality on top
of Futures. Perhaps I just haven't thought it through sufficiently - I'd
be interested to hear if anyone else has any ideas.



From exarkun at twistedmatrix.com  Mon Jan 10 19:15:59 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 11 Jan 2011 02:15:59 -0000
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <20110111015439.GA21847@boombah.thristian.org>
References: <4D2B80BA.2080506@nextday.fi>
	<20110111015439.GA21847@boombah.thristian.org>
Message-ID: <20110111021559.1821.1714292188.divmod.xquotient.85@localhost.localdomain>

On 01:54 am, screwtape at froup.com wrote:

Just a couple quick (minor) factual corrections.  I'll snip everything 
that does not appear to need correction (of which there was a lot) to 
make it easier to read.
>    - Futures support cancellation; Twisted finally managed to get rid
>      of cancellation support in Deferreds.

We only got rid of Deferred.setTimeout.  In exchange, we added 
generalized cancellation support.
>It should be pretty simple to create a Deferred that wraps a Future:
>
>    from twisted.internet import defer
>
>    def deferredFromFuture(future):
>         d = defer.Deferred()
>         def callback(future):
>             e = future.exception()
>             if e:

Futures may call their callbacks in any thread.  So the line:
>                 d.fail(e)

must instead be something like:

                reactor.callFromThread(d.errback, e)


(notice also `d.callback`, not `d.fail`).  A similar change is necessary 
for the success case below.
>                 return
>
>             d.succeed(future.result())
>
>         future.add_done_callback(callback)
>         return d

Jean-Paul



From screwtape at froup.com  Mon Jan 10 20:10:33 2011
From: screwtape at froup.com (Tim Allen)
Date: Tue, 11 Jan 2011 14:10:33 +1100
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <20110111021559.1821.1714292188.divmod.xquotient.85@localhost.localdomain>
References: <4D2B80BA.2080506@nextday.fi>
	<20110111015439.GA21847@boombah.thristian.org>
	<20110111021559.1821.1714292188.divmod.xquotient.85@localhost.localdomain>
Message-ID: <20110111031033.GB21847@boombah.thristian.org>

On Tue, Jan 11, 2011 at 02:15:59AM -0000, exarkun at twistedmatrix.com wrote:
> On 01:54 am, screwtape at froup.com wrote:
> >    - Futures support cancellation; Twisted finally managed to get rid
> >      of cancellation support in Deferreds.
> 
> We only got rid of Deferred.setTimeout.  In exchange, we added 
> generalized cancellation support.

Ah, yes, I misremembered. Thank you for the correction.

I haven't used Deferred's cancellation support; I don't know how
compatible it is with Future's cancellation support.

> Futures may call their callbacks in any thread.  So the line:
> >                 d.fail(e)
> 
> must instead be something like:
> 
>                 reactor.callFromThread(d.errback, e)

PEP 3148 says:
# Added callables are called in the order that they were added and are
# always called in a thread belonging to the process that added them.

I assumed that implied some kind of internal .callFromThread() magic;
I could be wrong.



From sandro at e-den.it  Tue Jan 11 00:48:38 2011
From: sandro at e-den.it (Alessandro Dentella)
Date: Tue, 11 Jan 2011 08:48:38 +0100
Subject: [Twisted-Python] Twisted and ipython
Message-ID: <20110111074838.GA19873@ubuntu>

Hi,

I'm starting a project where I plan to use twisted for the first time. I'd
like to practice using ipython and after looking around I found a recepe [1]
by Metthew Scott and a comment by Bob Ippolito on that recepe that suggests
a different approch [2].

In the ipython manual there's a reference to twisted in the -*thread
section, but it's unclear to me what should be the option (-pylab as for
matplotlib?):

-gthread, -qthread, -q4thread, -wthread, -pylab
              Only  ONE  of  these  can  be given, and it can only be given as the first option
              passed to IPython (it will have no effect in any other position).   They  provide
              threading  support  for  the  GTK,  QT3, QT4 and WXWidgets toolkits, for the mat-
              plotlib library and Twisted reactor.


So what's the suggested way to play with twisted?


thanks in advance
sandro
*:-)



[1] http://code.activestate.com/recipes/410670-integrating-twisted-reactor-with-ipython/
[2] http://bob.pythonmac.org/archives/2005/04/17/twisted-and-foreign-event-loops/



-- 
Sandro Dentella  *:-)
http://www.reteisi.org             Soluzioni libere per le scuole
http://sqlkit.argolinux.org        SQLkit home page - PyGTK/python/sqlalchemy



From benjamin.bertrand at lfv.se  Tue Jan 11 03:17:58 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Tue, 11 Jan 2011 11:17:58 +0100
Subject: [Twisted-Python] client connecting to 2 servers (non simultaneously)
Message-ID: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>

Hi,

I'm new to twisted and I have started to write a new protocol with a TCP
client and server.
In my protocol, a client should be able to connect to 2 servers
(master/slave node - only the master accepts connection).
The client should try to connect to server1. If it fails, try to connect
to server2 (after a specific timeout). If that fails, try server1...
I came up with a solution (see below). 
As I'm new to twisted and I haven't seen anything like that in the
examples, I'd like to check if that's a proper way to do it.
Any comments is welcome.

Thanks

Benjamin

***********************************************
class MyClientFactory(ClientFactory):

    protocol = MyClientProtocol

    def __init__(self, host2=None):
        self.host1 = None
        self.host2 = host2

    def clientConnectionFailed(self, connector, reason):
        from twisted.internet import reactor
        if self.host2 is None:
            # host2 is not defined, reconnect to host1
            reactor.callLater(2.0, connector.connect)
        else:
            destination = connector.getDestination()
            if self.host1 is None:
                # First connection failed, initialize host1, and try
host2
                self.host1 = destination.host
                host = self.host2
            elif destination.host == self.host1:
                # Connection to host1 failed, try host2
                host = self.host2
            else:
                # Connection to host2 failed, try host1
                host = self.host1
            reactor.callLater(2.0, reactor.connectTCP, host,
destination.port, self)


factory = MyClientFactory(server2)
from twisted.internet import reactor
reactor.connectTCP(server1, 8010, factory)
reactor.run()
***********************************************




From jrennie at gmail.com  Tue Jan 11 06:11:26 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Tue, 11 Jan 2011 08:11:26 -0500
Subject: [Twisted-Python] client connecting to 2 servers (non
	simultaneously)
In-Reply-To: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
References: <AcuxeNGu2ZXORhUrSWeuweY6y2TOfg==>
	<EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
Message-ID: <AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>

You could probably generalize and simplify by using a collections.deque of
hosts/ports and using the rotate() method before each reactor.connectTCP.
 Also, no need for multiple reactor imports---one at the top of the code is
fine.  Note that if the connection is "lost" in a non-clean fashion, you may
also want to reconnect.  IIUC, "fail" only handles the case that no
connection is made (protocol is never created).

import collections
from twisted.internet import reactor

class MyClientFactory(object):
    protocol = MyClientProtocol
    def __init__(self, hosts):
        self.hosts = collections.deque(hosts)
        reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0],
self.hosts[0][1], self)
        self.hosts.rotate(1)
    def clientConnectionFailed(self, connector, reason):
        reactor.callLater(2.0, connectTCP, self.hosts[0][0],
self.hosts[0][1], self)
        self.hosts.rotate(1)

factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
reactor.run()

Cheers,

Jason

On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:

> Hi,
>
> I'm new to twisted and I have started to write a new protocol with a TCP
> client and server.
> In my protocol, a client should be able to connect to 2 servers
> (master/slave node - only the master accepts connection).
> The client should try to connect to server1. If it fails, try to connect
> to server2 (after a specific timeout). If that fails, try server1...
> I came up with a solution (see below).
> As I'm new to twisted and I haven't seen anything like that in the
> examples, I'd like to check if that's a proper way to do it.
> Any comments is welcome.
>
> Thanks
>
> Benjamin
>
> ***********************************************
> class MyClientFactory(ClientFactory):
>
>    protocol = MyClientProtocol
>
>    def __init__(self, host2=None):
>        self.host1 = None
>        self.host2 = host2
>
>    def clientConnectionFailed(self, connector, reason):
>        from twisted.internet import reactor
>        if self.host2 is None:
>            # host2 is not defined, reconnect to host1
>            reactor.callLater(2.0, connector.connect)
>        else:
>            destination = connector.getDestination()
>            if self.host1 is None:
>                # First connection failed, initialize host1, and try
> host2
>                self.host1 = destination.host
>                host = self.host2
>            elif destination.host == self.host1:
>                # Connection to host1 failed, try host2
>                host = self.host2
>            else:
>                # Connection to host2 failed, try host1
>                host = self.host1
>            reactor.callLater(2.0, reactor.connectTCP, host,
> destination.port, self)
>
>
> factory = MyClientFactory(server2)
> from twisted.internet import reactor
> reactor.connectTCP(server1, 8010, factory)
> reactor.run()
> ***********************************************
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110111/8cb6c39e/attachment.html>

From exarkun at twistedmatrix.com  Tue Jan 11 06:21:51 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 11 Jan 2011 13:21:51 -0000
Subject: [Twisted-Python] Twisted and PEP 3148 support
In-Reply-To: <20110111031033.GB21847@boombah.thristian.org>
References: <4D2B80BA.2080506@nextday.fi>
	<20110111015439.GA21847@boombah.thristian.org>
	<20110111021559.1821.1714292188.divmod.xquotient.85@localhost.localdomain>
	<20110111031033.GB21847@boombah.thristian.org>
Message-ID: <20110111132151.1821.587712900.divmod.xquotient.87@localhost.localdomain>

On 03:10 am, screwtape at froup.com wrote:
>>Futures may call their callbacks in any thread.  So the line:
>> >                 d.fail(e)
>>
>>must instead be something like:
>>
>>                 reactor.callFromThread(d.errback, e)
>
>PEP 3148 says:
># Added callables are called in the order that they were added and are
># always called in a thread belonging to the process that added them.
>
>I assumed that implied some kind of internal .callFromThread() magic;
>I could be wrong.

It just says "a thread", it doesn't say which.  And since there's 
nothing like a reactor in PEP 3148, there's no way Futures could do this 
on their own.

Jean-Paul



From itamar at itamarst.org  Tue Jan 11 06:32:55 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 11 Jan 2011 08:32:55 -0500
Subject: [Twisted-Python] client connecting to 2 servers (non
 simultaneously)
In-Reply-To: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
Message-ID: <1294752775.1760.1.camel@blake>

On Tue, 2011-01-11 at 11:17 +0100, benjamin.bertrand at lfv.se wrote:

> Any comments is welcome.

It's probably better to use one factory per client connection - easier
to distinguish between connections. Not strictly necessary, though.




From kevin.horn at gmail.com  Tue Jan 11 11:36:59 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 11 Jan 2011 12:36:59 -0600
Subject: [Twisted-Python] client connecting to 2 servers (non
	simultaneously)
In-Reply-To: <AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
Message-ID: <AANLkTimumzR3nHMmG56WHdTju+UOqh03uGViJFuTh4zX@mail.gmail.com>

Using a deque for this is a fantastic idea, though I would have used
rotate(-1), as your example looks like it rotate's "backwards" to me.

Matter of taste I suppose.  It doesn't make much actual difference.

Kevin Horn

On Tue, Jan 11, 2011 at 7:11 AM, Jason Rennie <jrennie at gmail.com> wrote:

> You could probably generalize and simplify by using a collections.deque of
> hosts/ports and using the rotate() method before each reactor.connectTCP.
>  Also, no need for multiple reactor imports---one at the top of the code is
> fine.  Note that if the connection is "lost" in a non-clean fashion, you may
> also want to reconnect.  IIUC, "fail" only handles the case that no
> connection is made (protocol is never created).
>
> import collections
> from twisted.internet import reactor
>
> class MyClientFactory(object):
>     protocol = MyClientProtocol
>     def __init__(self, hosts):
>         self.hosts = collections.deque(hosts)
>         reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0],
> self.hosts[0][1], self)
>         self.hosts.rotate(1)
>     def clientConnectionFailed(self, connector, reason):
>         reactor.callLater(2.0, connectTCP, self.hosts[0][0],
> self.hosts[0][1], self)
>         self.hosts.rotate(1)
>
> factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
> reactor.run()
>
> Cheers,
>
> Jason
>
> On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:
>
>> Hi,
>>
>> I'm new to twisted and I have started to write a new protocol with a TCP
>> client and server.
>> In my protocol, a client should be able to connect to 2 servers
>> (master/slave node - only the master accepts connection).
>> The client should try to connect to server1. If it fails, try to connect
>> to server2 (after a specific timeout). If that fails, try server1...
>> I came up with a solution (see below).
>> As I'm new to twisted and I haven't seen anything like that in the
>> examples, I'd like to check if that's a proper way to do it.
>> Any comments is welcome.
>>
>> Thanks
>>
>> Benjamin
>>
>> ***********************************************
>> class MyClientFactory(ClientFactory):
>>
>>    protocol = MyClientProtocol
>>
>>    def __init__(self, host2=None):
>>        self.host1 = None
>>        self.host2 = host2
>>
>>    def clientConnectionFailed(self, connector, reason):
>>        from twisted.internet import reactor
>>        if self.host2 is None:
>>            # host2 is not defined, reconnect to host1
>>            reactor.callLater(2.0, connector.connect)
>>        else:
>>            destination = connector.getDestination()
>>            if self.host1 is None:
>>                # First connection failed, initialize host1, and try
>> host2
>>                self.host1 = destination.host
>>                host = self.host2
>>            elif destination.host == self.host1:
>>                # Connection to host1 failed, try host2
>>                host = self.host2
>>            else:
>>                # Connection to host2 failed, try host1
>>                host = self.host1
>>            reactor.callLater(2.0, reactor.connectTCP, host,
>> destination.port, self)
>>
>>
>> factory = MyClientFactory(server2)
>> from twisted.internet import reactor
>> reactor.connectTCP(server1, 8010, factory)
>> reactor.run()
>> ***********************************************
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> Jason Rennie
> Research Scientist, ITA Software
> 617-714-2645
> http://www.itasoftware.com/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110111/85690bcd/attachment.html>

From jrennie at gmail.com  Tue Jan 11 11:50:00 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Tue, 11 Jan 2011 13:50:00 -0500
Subject: [Twisted-Python] client connecting to 2 servers (non
	simultaneously)
In-Reply-To: <AANLkTimumzR3nHMmG56WHdTju+UOqh03uGViJFuTh4zX@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<AANLkTimumzR3nHMmG56WHdTju+UOqh03uGViJFuTh4zX@mail.gmail.com>
Message-ID: <AANLkTi=-8KKM66MFf-LwWvxE_ApW=6QypYx=PepEHb+v@mail.gmail.com>

I agree that rotate(-1) is more intuitive.  I barely gave it any
thought---almost forgot to include an argument for rotate as I initially
incorrectly assumed no argument would do something like rotate(-1) :-)

Jason

On Tue, Jan 11, 2011 at 1:36 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> Using a deque for this is a fantastic idea, though I would have used
> rotate(-1), as your example looks like it rotate's "backwards" to me.
>
> Matter of taste I suppose.  It doesn't make much actual difference.
>
> Kevin Horn
>
>
> On Tue, Jan 11, 2011 at 7:11 AM, Jason Rennie <jrennie at gmail.com> wrote:
>
>> You could probably generalize and simplify by using a collections.deque of
>> hosts/ports and using the rotate() method before each reactor.connectTCP.
>>  Also, no need for multiple reactor imports---one at the top of the code is
>> fine.  Note that if the connection is "lost" in a non-clean fashion, you may
>> also want to reconnect.  IIUC, "fail" only handles the case that no
>> connection is made (protocol is never created).
>>
>> import collections
>> from twisted.internet import reactor
>>
>> class MyClientFactory(object):
>>     protocol = MyClientProtocol
>>     def __init__(self, hosts):
>>         self.hosts = collections.deque(hosts)
>>         reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0],
>> self.hosts[0][1], self)
>>         self.hosts.rotate(1)
>>     def clientConnectionFailed(self, connector, reason):
>>         reactor.callLater(2.0, connectTCP, self.hosts[0][0],
>> self.hosts[0][1], self)
>>         self.hosts.rotate(1)
>>
>> factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
>> reactor.run()
>>
>> Cheers,
>>
>> Jason
>>
>> On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:
>>
>>> Hi,
>>>
>>> I'm new to twisted and I have started to write a new protocol with a TCP
>>> client and server.
>>> In my protocol, a client should be able to connect to 2 servers
>>> (master/slave node - only the master accepts connection).
>>> The client should try to connect to server1. If it fails, try to connect
>>> to server2 (after a specific timeout). If that fails, try server1...
>>> I came up with a solution (see below).
>>> As I'm new to twisted and I haven't seen anything like that in the
>>> examples, I'd like to check if that's a proper way to do it.
>>> Any comments is welcome.
>>>
>>> Thanks
>>>
>>> Benjamin
>>>
>>> ***********************************************
>>> class MyClientFactory(ClientFactory):
>>>
>>>    protocol = MyClientProtocol
>>>
>>>    def __init__(self, host2=None):
>>>        self.host1 = None
>>>        self.host2 = host2
>>>
>>>    def clientConnectionFailed(self, connector, reason):
>>>        from twisted.internet import reactor
>>>        if self.host2 is None:
>>>            # host2 is not defined, reconnect to host1
>>>            reactor.callLater(2.0, connector.connect)
>>>        else:
>>>            destination = connector.getDestination()
>>>            if self.host1 is None:
>>>                # First connection failed, initialize host1, and try
>>> host2
>>>                self.host1 = destination.host
>>>                host = self.host2
>>>            elif destination.host == self.host1:
>>>                # Connection to host1 failed, try host2
>>>                host = self.host2
>>>            else:
>>>                # Connection to host2 failed, try host1
>>>                host = self.host1
>>>            reactor.callLater(2.0, reactor.connectTCP, host,
>>> destination.port, self)
>>>
>>>
>>> factory = MyClientFactory(server2)
>>> from twisted.internet import reactor
>>> reactor.connectTCP(server1, 8010, factory)
>>> reactor.run()
>>> ***********************************************
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>>
>> --
>> Jason Rennie
>> Research Scientist, ITA Software
>> 617-714-2645
>> http://www.itasoftware.com/
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110111/771b3ed2/attachment.html>

From m-lists at the-moon.net  Tue Jan 11 13:37:39 2011
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 11 Jan 2011 20:37:39 +0000
Subject: [Twisted-Python] Twisted and ICP protocol
In-Reply-To: <AANLkTi=6vq6xzekN+AQyL3gn5BCLa=y-4Gnj52Rc22WE@mail.gmail.com>
References: <AANLkTi=6vq6xzekN+AQyL3gn5BCLa=y-4Gnj52Rc22WE@mail.gmail.com>
Message-ID: <AANLkTi=EYZMf32aA6QkyosBq1aoTKV6o2OJUr0zVng2g@mail.gmail.com>

On Mon, Jan 10, 2011 at 9:29 PM, Roberto Franchesco
<robfranchesco at gmail.com> wrote:
> I have been trying to get a squid proxy to "talk" to a twisted proxy
> and I came across an old email from this list where someone mentioned
> that they had implemented a basic ICP protocol in twisted.
> Does anyone still have that implementation?  Or any good pointers on
> setting me off in the right direction as to how to do this?

I don't know of a Twisted Protocol implementation of ICP, but there is
a Zope related project here:
 * http://pypi.python.org/pypi/zc.icp

You'll find it contains a nicely separate protocol module which you
might be able to reuse with Twisted. I've certainly used it with
Asyncore a few times.

-RichardW.



From benjamin.bertrand at lfv.se  Wed Jan 12 01:07:03 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Wed, 12 Jan 2011 08:07:03 +0000
Subject: [Twisted-Python] client connecting to 2 servers
 (nonsimultaneously)
In-Reply-To: <AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
References: <AcuxeNGu2ZXORhUrSWeuweY6y2TOfg==><EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
Message-ID: <2C9A58914594E34AA28179DB776FABDF8EB6@xw-exch04.lfv.se>

Nice, this looks much cleaner.
I thought about the connection "lost" case. It's quite similar to "fail" (but client should always try to reconnect to host1 in that case). So easy to implement.
Thanks a lot!

Benjamin

Från: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] För Jason Rennie
Skickat: den 11 januari 2011 14:11
Till: Twisted general discussion
Ämne: Re: [Twisted-Python] client connecting to 2 servers (nonsimultaneously)

You could probably generalize and simplify by using a collections.deque of hosts/ports and using the rotate() method before each reactor.connectTCP.  Also, no need for multiple reactor imports---one at the top of the code is fine.  Note that if the connection is "lost" in a non-clean fashion, you may also want to reconnect.  IIUC, "fail" only handles the case that no connection is made (protocol is never created).

import collections
from twisted.internet import reactor

class MyClientFactory(object):
    protocol = MyClientProtocol
    def __init__(self, hosts):
        self.hosts = collections.deque(hosts)
        reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0], self.hosts[0][1], self)
        self.hosts.rotate(1)
    def clientConnectionFailed(self, connector, reason):
        reactor.callLater(2.0, connectTCP, self.hosts[0][0], self.hosts[0][1], self)
        self.hosts.rotate(1)

factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
reactor.run()

Cheers,

Jason

On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:
Hi,

I'm new to twisted and I have started to write a new protocol with a TCP
client and server.
In my protocol, a client should be able to connect to 2 servers
(master/slave node - only the master accepts connection).
The client should try to connect to server1. If it fails, try to connect
to server2 (after a specific timeout). If that fails, try server1...
I came up with a solution (see below).
As I'm new to twisted and I haven't seen anything like that in the
examples, I'd like to check if that's a proper way to do it.
Any comments is welcome.

Thanks

Benjamin

***********************************************
class MyClientFactory(ClientFactory):

   protocol = MyClientProtocol

   def __init__(self, host2=None):
       self.host1 = None
       self.host2 = host2

   def clientConnectionFailed(self, connector, reason):
       from twisted.internet import reactor
       if self.host2 is None:
           # host2 is not defined, reconnect to host1
           reactor.callLater(2.0, connector.connect)
       else:
           destination = connector.getDestination()
           if self.host1 is None:
               # First connection failed, initialize host1, and try
host2
               self.host1 = destination.host
               host = self.host2
           elif destination.host == self.host1:
               # Connection to host1 failed, try host2
               host = self.host2
           else:
               # Connection to host2 failed, try host1
               host = self.host1
           reactor.callLater(2.0, reactor.connectTCP, host,
destination.port, self)


factory = MyClientFactory(server2)
from twisted.internet import reactor
reactor.connectTCP(server1, 8010, factory)
reactor.run()
***********************************************


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/



From benjamin.bertrand at lfv.se  Wed Jan 12 02:49:34 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Wed, 12 Jan 2011 09:49:34 +0000
Subject: [Twisted-Python] client connecting to 2 servers
 (nonsimultaneously)
In-Reply-To: <AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
References: <AcuxeNGu2ZXORhUrSWeuweY6y2TOfg==><EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
Message-ID: <2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>

One small question about the following code:
Why did you use reactor.callWhenRunning in the __init__ method?
Why not calling directly reactor.connectTCP?

Cheers,

Benjamin

Från: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] För Jason Rennie
Skickat: den 11 januari 2011 14:11
Till: Twisted general discussion
Ämne: Re: [Twisted-Python] client connecting to 2 servers (nonsimultaneously)

You could probably generalize and simplify by using a collections.deque of hosts/ports and using the rotate() method before each reactor.connectTCP.  Also, no need for multiple reactor imports---one at the top of the code is fine.  Note that if the connection is "lost" in a non-clean fashion, you may also want to reconnect.  IIUC, "fail" only handles the case that no connection is made (protocol is never created).

import collections
from twisted.internet import reactor

class MyClientFactory(object):
    protocol = MyClientProtocol
    def __init__(self, hosts):
        self.hosts = collections.deque(hosts)
        reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0], self.hosts[0][1], self)
        self.hosts.rotate(1)
    def clientConnectionFailed(self, connector, reason):
        reactor.callLater(2.0, connectTCP, self.hosts[0][0], self.hosts[0][1], self)
        self.hosts.rotate(1)

factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
reactor.run()

Cheers,

Jason

On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:
Hi,

I'm new to twisted and I have started to write a new protocol with a TCP
client and server.
In my protocol, a client should be able to connect to 2 servers
(master/slave node - only the master accepts connection).
The client should try to connect to server1. If it fails, try to connect
to server2 (after a specific timeout). If that fails, try server1...
I came up with a solution (see below).
As I'm new to twisted and I haven't seen anything like that in the
examples, I'd like to check if that's a proper way to do it.
Any comments is welcome.

Thanks

Benjamin

***********************************************
class MyClientFactory(ClientFactory):

   protocol = MyClientProtocol

   def __init__(self, host2=None):
       self.host1 = None
       self.host2 = host2

   def clientConnectionFailed(self, connector, reason):
       from twisted.internet import reactor
       if self.host2 is None:
           # host2 is not defined, reconnect to host1
           reactor.callLater(2.0, connector.connect)
       else:
           destination = connector.getDestination()
           if self.host1 is None:
               # First connection failed, initialize host1, and try
host2
               self.host1 = destination.host
               host = self.host2
           elif destination.host == self.host1:
               # Connection to host1 failed, try host2
               host = self.host2
           else:
               # Connection to host2 failed, try host1
               host = self.host1
           reactor.callLater(2.0, reactor.connectTCP, host,
destination.port, self)


factory = MyClientFactory(server2)
from twisted.internet import reactor
reactor.connectTCP(server1, 8010, factory)
reactor.run()
***********************************************


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/



From jrennie at gmail.com  Wed Jan 12 08:15:59 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 12 Jan 2011 10:15:59 -0500
Subject: [Twisted-Python] client connecting to 2 servers
	(nonsimultaneously)
In-Reply-To: <2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
Message-ID: <AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>

Habit, mostly.  I think it's a good habit, though.  The reason is that I
wanted to make sure the __init__ code completed before the connectTCP was
called.  In this case, it doesn't matter, but if I had a number of things I
wanted to do in __init__, it might matter.  Consider:

class MyClientProtocol(Protocol):
      def connectionMade(self):
        self.factory.numConnections += 1

class MyClientFactory(Factory):
      def __init__(self):
        reactor.connectTCP(host, port, self)
  self.numConnections = 0

'course, I'm sure you'd put reactor.connectTCP *after* the numConnections
initializer, but using callWhenRunning ensures that the order doesn't
matter, so it's one less thing you have to worry about :-)

Jason

On Wed, Jan 12, 2011 at 4:49 AM, <benjamin.bertrand at lfv.se> wrote:

> One small question about the following code:
> Why did you use reactor.callWhenRunning in the __init__ method?
> Why not calling directly reactor.connectTCP?
>
> Cheers,
>
> Benjamin
>
>
-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110112/74ab6e3d/attachment-0001.html>

From exarkun at twistedmatrix.com  Wed Jan 12 08:26:37 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 12 Jan 2011 15:26:37 -0000
Subject: [Twisted-Python] client connecting to 2
	servers	(nonsimultaneously)
In-Reply-To: <AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
Message-ID: <20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>

On 03:15 pm, jrennie at gmail.com wrote:
>Habit, mostly.  I think it's a good habit, though.  The reason is that 
>I
>wanted to make sure the __init__ code completed before the connectTCP 
>was
>called.  In this case, it doesn't matter, but if I had a number of 
>things I
>wanted to do in __init__, it might matter.  Consider:
>
>class MyClientProtocol(Protocol):
>      def connectionMade(self):
>        self.factory.numConnections += 1
>
>class MyClientFactory(Factory):
>      def __init__(self):
>        reactor.connectTCP(host, port, self)
>  self.numConnections = 0
>
>'course, I'm sure you'd put reactor.connectTCP *after* the 
>numConnections
>initializer, but using callWhenRunning ensures that the order doesn't
>matter, so it's one less thing you have to worry about :-)

Although note that if the reactor is already running when you 
instantiate the factory, then callWhenRunning will immediately call the 
function you pass to it, as demonstrated by this transcript in which the 
reactor is already running:

    >>> def foo():
    ...     print 'foo running'
    ...    >>> from twisted.internet import reactor
    >>> reactor.callWhenRunning(foo)
    foo running
    >>>
Jean-Paul



From jrennie at gmail.com  Wed Jan 12 08:52:05 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 12 Jan 2011 10:52:05 -0500
Subject: [Twisted-Python] client connecting to 2 servers
	(nonsimultaneously)
In-Reply-To: <20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
Message-ID: <AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>

Benjamin, sorry for providing you with an incorrect explanation.  Jean-Paul,
thank you for correcting my broken understanding of callWhenRunning.

Is there a call which puts a function into the reactor's queue of tasks to
be completed?

Thanks,

Jason

On Wed, Jan 12, 2011 at 10:26 AM, <exarkun at twistedmatrix.com> wrote:

> Although note that if the reactor is already running when you
> instantiate the factory, then callWhenRunning will immediately call the
> function you pass to it, as demonstrated by this transcript in which the
> reactor is already running:
>
>    >>> def foo():
>    ...     print 'foo running'
>    ...    >>> from twisted.internet import reactor
>    >>> reactor.callWhenRunning(foo)
>    foo running
>    >>>
> Jean-Paul
>
>
-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110112/45f97e25/attachment.html>

From glyph at twistedmatrix.com  Wed Jan 12 09:32:55 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 Jan 2011 11:32:55 -0500
Subject: [Twisted-Python] client connecting to 2 servers
	(nonsimultaneously)
In-Reply-To: <AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
Message-ID: <AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot@mail.gmail.com>

On Wed, Jan 12, 2011 at 10:52 AM, Jason Rennie <jrennie at gmail.com> wrote:

> Benjamin, sorry for providing you with an incorrect explanation.
>  Jean-Paul, thank you for correcting my broken understanding of
> callWhenRunning.
>
> Is there a call which puts a function into the reactor's queue of tasks to
> be completed?
>

The reactor doesn't have a queue of tasks to be completed.  It has sets of
various event sources, which it executes in no particular order.

Scheduling a timed event with callLater(0,...) might do what you want,
though.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110112/5d2959bd/attachment.html>

From jrennie at gmail.com  Wed Jan 12 11:45:47 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 12 Jan 2011 13:45:47 -0500
Subject: [Twisted-Python] client connecting to 2 servers
	(nonsimultaneously)
In-Reply-To: <AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
	<AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot@mail.gmail.com>
Message-ID: <AANLkTi=Z1SQxBChZKOOyyLpaf8fhcp8RkWFJviYhPrMO@mail.gmail.com>

On Wed, Jan 12, 2011 at 11:32 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

> The reactor doesn't have a queue of tasks to be completed.  It has sets of
> various event sources, which it executes in no particular order.
>

"queue of tasks" was a guess on my part, but I looked through the
BaseReactor code and found something like that.  'course, I could easily be
reading the code wrong.  How would you describe threadCallQueue?  When I
said "tasks", I meant something akin to "calls".  That could be
confusing---did you interpret "tasks" differently?


> Scheduling a timed event with callLater(0,...) might do what you want,
> though.
>

Yes.  Thanks!  I see that the callFromThread documentation even recommends
using callLater for this behavior. (doh!)

http://twistedmatrix.com/documents/10.2.0/api/twisted.internet.interfaces.IReactorThreads.html#callFromThread

>>> from twisted.internet import reactor
>>> def foo():
...     print "foo!"
...
>>> def bar():
...     reactor.callLater(0, foo)
...     print "bar!"
...
>>> reactor.callWhenRunning(bar)
('startup', ('after', <function bar at 0x2c84320>, (), {}))
>>> reactor.run()
bar!
foo!

Interesting that you can substitute callFromThread for callLater(0, ...) in
the above code and get the same behavior...

Sorry to prolong the tangent, but I'd like to better understand the
differences between callWhenRunning, callFromThread and callLater.  I think
reactor.wakeUp() is the one missing piece for me.  How exactly does it work?
 Reading the BaseReactor code... callFromThread adds the call to a queue,
then calls wakeUp.  IIUC, wakeUp simply runs

self.port.postEvent(0, KEY_WAKEUP, None)

Does this cause the reactor thread to jump to the front of the queue of
threads to be run by python/linux?  If there were no wakeUp in
callFromThread, would the call simply be delayed until the thread
round-robin got to the reactor thread?  Or, without wakeUp, is it possible
the callFromThread call would never be made?

Cheers,

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110112/80cb849d/attachment.html>

From exarkun at twistedmatrix.com  Wed Jan 12 14:40:17 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 12 Jan 2011 21:40:17 -0000
Subject: [Twisted-Python] client connecting to 2
	servers	(nonsimultaneously)
In-Reply-To: <AANLkTi=Z1SQxBChZKOOyyLpaf8fhcp8RkWFJviYhPrMO@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
	<AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot@mail.gmail.com>
	<AANLkTi=Z1SQxBChZKOOyyLpaf8fhcp8RkWFJviYhPrMO@mail.gmail.com>
Message-ID: <20110112214017.1811.611064405.divmod.xquotient.38@localhost.localdomain>

On 06:45 pm, jrennie at gmail.com wrote:
>On Wed, Jan 12, 2011 at 11:32 AM, Glyph Lefkowitz
><glyph at twistedmatrix.com>wrote:
>>The reactor doesn't have a queue of tasks to be completed.  It has 
>>sets of
>>various event sources, which it executes in no particular order.
>
>"queue of tasks" was a guess on my part, but I looked through the
>BaseReactor code and found something like that.  'course, I could 
>easily be
>reading the code wrong.  How would you describe threadCallQueue?  When 
>I
>said "tasks", I meant something akin to "calls".  That could be
>confusing---did you interpret "tasks" differently?
>>Scheduling a timed event with callLater(0,...) might do what you want,
>>though.
>
>Yes.  Thanks!  I see that the callFromThread documentation even 
>recommends
>using callLater for this behavior. (doh!)
>
>http://twistedmatrix.com/documents/10.2.0/api/twisted.internet.interfaces.IReactorThreads.html#callFromThread
>>>>from twisted.internet import reactor
>>>>def foo():
>...     print "foo!"
>...
>>>>def bar():
>...     reactor.callLater(0, foo)
>...     print "bar!"
>...
>>>>reactor.callWhenRunning(bar)
>('startup', ('after', <function bar at 0x2c84320>, (), {}))
>>>>reactor.run()
>bar!
>foo!
>
>Interesting that you can substitute callFromThread for callLater(0, 
>...) in
>the above code and get the same behavior...
>
>Sorry to prolong the tangent, but I'd like to better understand the
>differences between callWhenRunning, callFromThread and callLater.  I 
>think
>reactor.wakeUp() is the one missing piece for me.  How exactly does it 
>work?
>Reading the BaseReactor code... callFromThread adds the call to a 
>queue,
>then calls wakeUp.  IIUC, wakeUp simply runs
>
>self.port.postEvent(0, KEY_WAKEUP, None)

Some reactors have a different implementation of wakeUp than the above, 
but they all have the same goal.

The reactor thread may be doing something which is going to block 
indefinitely (WaitForMultipleObjects, select(), epoll_wait(), etc).  The 
purpose of the wakeUp call is to cause that blocking call to end.  Once 
it ends, calls in the threadCallQueue can be processed.

The reactor is written such that if you are running code in the same 
thread it is running in (ie, you are "in the reactor thread") then any 
event source you create (be it network or time or whatever), the reactor 
will be sure to service it in a timely manner.  For network event 
sources, this means it will include a descriptor in the select() (etc) 
call.  For timing event sources (ie callLater), it means the reactor 
will set a timeout on the select() (etc) call so that it returns before 
it is time for that delayed call to execute.

However, if you are not in the reactor thread, then really the only 
thing you're allowed to do to Twisted is use reactor.callFromThread. 
Since this might happen at any time with respect to what the reactor 
thread is doing, there's no way to be sure a (let's call it a) thread 
call event will get handled in a timely fashion.  So this is the problem 
that wakeUp solves.  After the thread call event is added to 
threadCallQueue, wakeUp makes some event source the reactor is 
monitoring signal readiness (on POSIX, it writes a byte to a pipe the 
reactor is select()ing (etc) on; on Windows, it posts an event like you 
pasted above).  This ensures that if the reactor is asleep waiting for 
an event it will wake up soon, and then it will notice there are thread 
call events to process.

Jean-Paul



From jrennie at gmail.com  Wed Jan 12 18:15:17 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Wed, 12 Jan 2011 20:15:17 -0500
Subject: [Twisted-Python] client connecting to 2 servers
	(nonsimultaneously)
In-Reply-To: <20110112214017.1811.611064405.divmod.xquotient.38@localhost.localdomain>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
	<AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot@mail.gmail.com>
	<AANLkTi=Z1SQxBChZKOOyyLpaf8fhcp8RkWFJviYhPrMO@mail.gmail.com>
	<20110112214017.1811.611064405.divmod.xquotient.38@localhost.localdomain>
Message-ID: <AANLkTim8=E59L+PUXH4zmXjv_t0-wbM=ihWjNmMTMS7O@mail.gmail.com>

Great explanation.  Thanks!

Jason

On Wed, Jan 12, 2011 at 4:40 PM, <exarkun at twistedmatrix.com> wrote:

> Some reactors have a different implementation of wakeUp than the above,
> but they all have the same goal.
>
> The reactor thread may be doing something which is going to block
> indefinitely (WaitForMultipleObjects, select(), epoll_wait(), etc).  The
> purpose of the wakeUp call is to cause that blocking call to end.  Once
> it ends, calls in the threadCallQueue can be processed.
>
> The reactor is written such that if you are running code in the same
> thread it is running in (ie, you are "in the reactor thread") then any
> event source you create (be it network or time or whatever), the reactor
> will be sure to service it in a timely manner.  For network event
> sources, this means it will include a descriptor in the select() (etc)
> call.  For timing event sources (ie callLater), it means the reactor
> will set a timeout on the select() (etc) call so that it returns before
> it is time for that delayed call to execute.
>
> However, if you are not in the reactor thread, then really the only
> thing you're allowed to do to Twisted is use reactor.callFromThread.
> Since this might happen at any time with respect to what the reactor
> thread is doing, there's no way to be sure a (let's call it a) thread
> call event will get handled in a timely fashion.  So this is the problem
> that wakeUp solves.  After the thread call event is added to
> threadCallQueue, wakeUp makes some event source the reactor is
> monitoring signal readiness (on POSIX, it writes a byte to a pipe the
> reactor is select()ing (etc) on; on Windows, it posts an event like you
> pasted above).  This ensures that if the reactor is asleep waiting for
> an event it will wake up soon, and then it will notice there are thread
> call events to process.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110112/f402f27a/attachment.html>

From benjamin.bertrand at lfv.se  Thu Jan 13 01:08:15 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Thu, 13 Jan 2011 08:08:15 +0000
Subject: [Twisted-Python] client connecting to 2
	servers	(nonsimultaneously)
In-Reply-To: <AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
References: <EBBC74D47C6D8C429E26E47D3D4C3D34036A0AD3@XW-EVS1.lfv.se>
	<AANLkTi=T+_h8O=VD8cnnn7bTXZM+Yb3E9OuaFJTORZ4m@mail.gmail.com>
	<2C9A58914594E34AA28179DB776FABDF92E4@xw-exch04.lfv.se>
	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY@mail.gmail.com>
	<20110112152637.1811.1981888275.divmod.xquotient.9@localhost.localdomain>
	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH@mail.gmail.com>
Message-ID: <2C9A58914594E34AA28179DB776FABDF96EB@xw-exch04.lfv.se>

No need to apologize Jason :-)
Got a lot of useful information in this thread!
Thanks!

Benjamin

Från: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] För Jason Rennie
Skickat: den 12 januari 2011 16:52
Till: Twisted general discussion
Ämne: Re: [Twisted-Python] client connecting to 2 servers (nonsimultaneously)

Benjamin, sorry for providing you with an incorrect explanation.  Jean-Paul, thank you for correcting my broken understanding of callWhenRunning.

Is there a call which puts a function into the reactor's queue of tasks to be completed?

Thanks,

Jason

On Wed, Jan 12, 2011 at 10:26 AM, <exarkun at twistedmatrix.com> wrote:
Although note that if the reactor is already running when you
instantiate the factory, then callWhenRunning will immediately call the
function you pass to it, as demonstrated by this transcript in which the
reactor is already running:

   >>> def foo():
   ...     print 'foo running'
   ...    >>> from twisted.internet import reactor
   >>> reactor.callWhenRunning(foo)
   foo running
   >>>
Jean-Paul


-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/



From michaelnt at gmail.com  Thu Jan 13 05:06:10 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Thu, 13 Jan 2011 12:06:10 +0000
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <20110111074838.GA19873@ubuntu>
References: <20110111074838.GA19873@ubuntu>
Message-ID: <AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>

On 11 January 2011 07:48, Alessandro Dentella <sandro at e-den.it> wrote:

> So what's the suggested way to play with twisted?

It depends what you're trying to do. I'd suggest you get some form of
skeleton program running first. At that point you can interact with
the program using twisted manhole.

ipython has a task interface with supports starting asynchronous jobs,
a quick search turns up

http://mail.scipy.org/pipermail/ipython-user/2009-February/006148.html

Regards, Michael



From williem75 at gmail.com  Thu Jan 13 08:29:06 2011
From: williem75 at gmail.com (williem75 at gmail.com)
Date: Thu, 13 Jan 2011 09:29:06 -0600
Subject: [Twisted-Python] Twisted-Python Digest, Vol 82, Issue 12
Message-ID: <vqhbcqt553wkg5gigbg0u5nt.1294932546262@email.android.com>


Sent from my LG phone

twisted-python-request at twistedmatrix.com wrote:

>Send Twisted-Python mailing list submissions to
>	twisted-python at twistedmatrix.com
>
>To subscribe or unsubscribe via the World Wide Web, visit
>	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>or, via email, send a message with subject or body 'help' to
>	twisted-python-request at twistedmatrix.com
>
>You can reach the person managing the list at
>	twisted-python-owner at twistedmatrix.com
>
>When replying, please edit your Subject line so it is more specific
>than "Re: Contents of Twisted-Python digest..."
>
>
>Today's Topics:
>
>   1. Re: client connecting to 2 servers (nonsimultaneously)
>      (benjamin.bertrand at lfv.se)
>   2. Re: client connecting to 2 servers	(nonsimultaneously)
>      (Jason Rennie)
>   3. Re: client connecting to 2	servers	(nonsimultaneously)
>      (exarkun at twistedmatrix.com)
>   4. Re: client connecting to 2 servers	(nonsimultaneously)
>      (Jason Rennie)
>   5. Re: client connecting to 2 servers	(nonsimultaneously)
>      (Glyph Lefkowitz)
>
>
>----------------------------------------------------------------------
>
>Message: 1
>Date: Wed, 12 Jan 2011 09:49:34 +0000
>From: <benjamin.bertrand at lfv.se>
>Subject: Re: [Twisted-Python] client connecting to 2 servers
>	(nonsimultaneously)
>To: <twisted-python at twistedmatrix.com>
>Message-ID: <2C9A58914594E34AA28179DB776FABDF92E4 at xw-exch04.lfv.se>
>Content-Type: text/plain; charset="iso-8859-1"
>
>One small question about the following code:
>Why did you use reactor.callWhenRunning in the __init__ method?
>Why not calling directly reactor.connectTCP?
>
>Cheers,
>
>Benjamin
>
>Fr?n: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] F?r Jason Rennie
>Skickat: den 11 januari 2011 14:11
>Till: Twisted general discussion
>?mne: Re: [Twisted-Python] client connecting to 2 servers (nonsimultaneously)
>
>You could probably generalize and simplify by using a collections.deque of hosts/ports and using the rotate() method before each?reactor.connectTCP. ?Also, no need for multiple reactor imports---one at the top of the code is fine. ?Note that if the connection is "lost" in a non-clean fashion, you may also want to reconnect. ?IIUC, "fail" only handles the case that no connection is made (protocol is never created).
>
>import collections
>from twisted.internet import reactor
>
>class MyClientFactory(object):
>?? ?protocol = MyClientProtocol
>?? ?def __init__(self, hosts):
>?? ? ? ?self.hosts = collections.deque(hosts)
>?? ? ? ?reactor.callWhenRunning(reactor.connectTCP, self.hosts[0][0], self.hosts[0][1], self)
>?? ? ? ?self.hosts.rotate(1)
>?? ?def clientConnectionFailed(self, connector, reason):
>?? ? ? ?reactor.callLater(2.0, connectTCP, self.hosts[0][0], self.hosts[0][1], self)
>?? ? ? ?self.hosts.rotate(1)
>
>factory = MyClientFactory([('host1', port1), ('host2', port2), ...])
>reactor.run()
>
>Cheers,
>
>Jason
>
>On Tue, Jan 11, 2011 at 5:17 AM, <benjamin.bertrand at lfv.se> wrote:
>Hi,
>
>I'm new to twisted and I have started to write a new protocol with a TCP
>client and server.
>In my protocol, a client should be able to connect to 2 servers
>(master/slave node - only the master accepts connection).
>The client should try to connect to server1. If it fails, try to connect
>to server2 (after a specific timeout). If that fails, try server1...
>I came up with a solution (see below).
>As I'm new to twisted and I haven't seen anything like that in the
>examples, I'd like to check if that's a proper way to do it.
>Any comments is welcome.
>
>Thanks
>
>Benjamin
>
>***********************************************
>class MyClientFactory(ClientFactory):
>
>? ?protocol = MyClientProtocol
>
>? ?def __init__(self, host2=None):
>? ? ? ?self.host1 = None
>? ? ? ?self.host2 = host2
>
>? ?def clientConnectionFailed(self, connector, reason):
>? ? ? ?from twisted.internet import reactor
>? ? ? ?if self.host2 is None:
>? ? ? ? ? ?# host2 is not defined, reconnect to host1
>? ? ? ? ? ?reactor.callLater(2.0, connector.connect)
>? ? ? ?else:
>? ? ? ? ? ?destination = connector.getDestination()
>? ? ? ? ? ?if self.host1 is None:
>? ? ? ? ? ? ? ?# First connection failed, initialize host1, and try
>host2
>? ? ? ? ? ? ? ?self.host1 = destination.host
>? ? ? ? ? ? ? ?host = self.host2
>? ? ? ? ? ?elif destination.host == self.host1:
>? ? ? ? ? ? ? ?# Connection to host1 failed, try host2
>? ? ? ? ? ? ? ?host = self.host2
>? ? ? ? ? ?else:
>? ? ? ? ? ? ? ?# Connection to host2 failed, try host1
>? ? ? ? ? ? ? ?host = self.host1
>? ? ? ? ? ?reactor.callLater(2.0, reactor.connectTCP, host,
>destination.port, self)
>
>
>factory = MyClientFactory(server2)
>from twisted.internet import reactor
>reactor.connectTCP(server1, 8010, factory)
>reactor.run()
>***********************************************
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>-- 
>Jason Rennie
>Research Scientist, ITA Software
>617-714-2645
>http://www.itasoftware.com/
>
>
>
>------------------------------
>
>Message: 2
>Date: Wed, 12 Jan 2011 10:15:59 -0500
>From: Jason Rennie <jrennie at gmail.com>
>Subject: Re: [Twisted-Python] client connecting to 2 servers
>	(nonsimultaneously)
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Message-ID:
>	<AANLkTi=ge7JGPY3_woNu6LCapUEXjH88pRZ=TB05g5dY at mail.gmail.com>
>Content-Type: text/plain; charset="iso-8859-1"
>
>Habit, mostly.  I think it's a good habit, though.  The reason is that I
>wanted to make sure the __init__ code completed before the connectTCP was
>called.  In this case, it doesn't matter, but if I had a number of things I
>wanted to do in __init__, it might matter.  Consider:
>
>class MyClientProtocol(Protocol):
>      def connectionMade(self):
>        self.factory.numConnections += 1
>
>class MyClientFactory(Factory):
>      def __init__(self):
>        reactor.connectTCP(host, port, self)
>  self.numConnections = 0
>
>'course, I'm sure you'd put reactor.connectTCP *after* the numConnections
>initializer, but using callWhenRunning ensures that the order doesn't
>matter, so it's one less thing you have to worry about :-)
>
>Jason
>
>On Wed, Jan 12, 2011 at 4:49 AM, <benjamin.bertrand at lfv.se> wrote:
>
>> One small question about the following code:
>> Why did you use reactor.callWhenRunning in the __init__ method?
>> Why not calling directly reactor.connectTCP?
>>
>> Cheers,
>>
>> Benjamin
>>
>>
>-- 
>Jason Rennie
>Research Scientist, ITA Software
>617-714-2645
>http://www.itasoftware.com/
>-------------- next part --------------
>An HTML attachment was scrubbed...
>URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/74ab6e3d/attachment.html 
>
>------------------------------
>
>Message: 3
>Date: Wed, 12 Jan 2011 15:26:37 -0000
>From: exarkun at twistedmatrix.com
>Subject: Re: [Twisted-Python] client connecting to 2	servers
>	(nonsimultaneously)
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Message-ID:
>	<20110112152637.1811.1981888275.divmod.xquotient.9 at localhost.localdomain>
>	
>Content-Type: text/plain; charset="utf-8"; format="flowed"
>
>On 03:15 pm, jrennie at gmail.com wrote:
>>Habit, mostly.  I think it's a good habit, though.  The reason is that 
>>I
>>wanted to make sure the __init__ code completed before the connectTCP 
>>was
>>called.  In this case, it doesn't matter, but if I had a number of 
>>things I
>>wanted to do in __init__, it might matter.  Consider:
>>
>>class MyClientProtocol(Protocol):
>>      def connectionMade(self):
>>        self.factory.numConnections += 1
>>
>>class MyClientFactory(Factory):
>>      def __init__(self):
>>        reactor.connectTCP(host, port, self)
>>  self.numConnections = 0
>>
>>'course, I'm sure you'd put reactor.connectTCP *after* the 
>>numConnections
>>initializer, but using callWhenRunning ensures that the order doesn't
>>matter, so it's one less thing you have to worry about :-)
>
>Although note that if the reactor is already running when you 
>instantiate the factory, then callWhenRunning will immediately call the 
>function you pass to it, as demonstrated by this transcript in which the 
>reactor is already running:
>
>    >>> def foo():
>    ...     print 'foo running'
>    ...    >>> from twisted.internet import reactor
>    >>> reactor.callWhenRunning(foo)
>    foo running
>    >>>
>Jean-Paul
>
>
>
>------------------------------
>
>Message: 4
>Date: Wed, 12 Jan 2011 10:52:05 -0500
>From: Jason Rennie <jrennie at gmail.com>
>Subject: Re: [Twisted-Python] client connecting to 2 servers
>	(nonsimultaneously)
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Message-ID:
>	<AANLkTimRg4xWrjwPQLwqVUabOAtJLwJ=QUvLYAVYSBiH at mail.gmail.com>
>Content-Type: text/plain; charset="iso-8859-1"
>
>Benjamin, sorry for providing you with an incorrect explanation.  Jean-Paul,
>thank you for correcting my broken understanding of callWhenRunning.
>
>Is there a call which puts a function into the reactor's queue of tasks to
>be completed?
>
>Thanks,
>
>Jason
>
>On Wed, Jan 12, 2011 at 10:26 AM, <exarkun at twistedmatrix.com> wrote:
>
>> Although note that if the reactor is already running when you
>> instantiate the factory, then callWhenRunning will immediately call the
>> function you pass to it, as demonstrated by this transcript in which the
>> reactor is already running:
>>
>>    >>> def foo():
>>    ...     print 'foo running'
>>    ...    >>> from twisted.internet import reactor
>>    >>> reactor.callWhenRunning(foo)
>>    foo running
>>    >>>
>> Jean-Paul
>>
>>
>-- 
>Jason Rennie
>Research Scientist, ITA Software
>617-714-2645
>http://www.itasoftware.com/
>-------------- next part --------------
>An HTML attachment was scrubbed...
>URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/45f97e25/attachment-0001.htm 
>
>------------------------------
>
>Message: 5
>Date: Wed, 12 Jan 2011 11:32:55 -0500
>From: Glyph Lefkowitz <glyph at twistedmatrix.com>
>Subject: Re: [Twisted-Python] client connecting to 2 servers
>	(nonsimultaneously)
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Message-ID:
>	<AANLkTinoeNJnLTgBSj5bL1zm2cwC8N5Kk18+73TiTFot at mail.gmail.com>
>Content-Type: text/plain; charset="utf-8"
>
>On Wed, Jan 12, 2011 at 10:52 AM, Jason Rennie <jrennie at gmail.com> wrote:
>
>> Benjamin, sorry for providing you with an incorrect explanation.
>>  Jean-Paul, thank you for correcting my broken understanding of
>> callWhenRunning.
>>
>> Is there a call which puts a function into the reactor's queue of tasks to
>> be completed?
>>
>
>The reactor doesn't have a queue of tasks to be completed.  It has sets of
>various event sources, which it executes in no particular order.
>
>Scheduling a timed event with callLater(0,...) might do what you want,
>though.
>-------------- next part --------------
>An HTML attachment was scrubbed...
>URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20110112/5d2959bd/attachment-0001.htm 
>
>------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>End of Twisted-Python Digest, Vol 82, Issue 12
>**********************************************

From tenth at twistedmatrix.com  Thu Jan 13 10:32:08 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Thu, 13 Jan 2011 12:32:08 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
References: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
Message-ID: <AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc@mail.gmail.com>

Apologies in advance for the short notice, but I'm planning to host a Boston
area Twisted mini-sprint this weekend on Sunday, January 16th.

Space is fairly limited (hence the mini- prefix), but if you're on
twisted-python and would be interested in the details of this and/or future
Boston area sprints, let me know, and I'll add you to the invitation.

Thanks,

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110113/79695901/attachment.html>

From luke-lists at hybrid-logic.co.uk  Thu Jan 13 12:43:59 2011
From: luke-lists at hybrid-logic.co.uk (Luke Marsden)
Date: Thu, 13 Jan 2011 19:43:59 +0000
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc@mail.gmail.com>
References: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
	<AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc@mail.gmail.com>
Message-ID: <1294947839.9990.50.camel@pow>

Damn, I'm going to be in Cambridge for 10 weeks from Wednesday 19th
onwards (usually based here in the UK). So I miss out by 3 days!

I'd really like to meet up with any Twisted folk when I arrive though.
Is anyone Boston-based up for a drink some time after the 19th?

FYI I'm the guy behind
http://twistedmatrix.com/trac/wiki/SuccessStories#HybridLogic

:-)

-- 
Best Regards,
Luke Marsden
CTO, Hybrid Logic Ltd.

Web: http://www.hybrid-cluster.com/
Hybrid Web Cluster - cloud web hosting

Mobile: +447791750420


On Thu, 2011-01-13 at 12:32 -0500, Tenth wrote:
> Apologies in advance for the short notice, but I'm planning to host a
> Boston area Twisted mini-sprint this weekend on Sunday, January 16th.
> 
> 
> Space is fairly limited (hence the mini- prefix), but if you're on
> twisted-python and would be interested in the details of this and/or
> future Boston area sprints, let me know, and I'll add you to the
> invitation.
> 
> 
> Thanks,
> 
> 
> - Dave
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at twistedmatrix.com  Thu Jan 13 14:22:36 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Jan 2011 16:22:36 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <1294947839.9990.50.camel@pow>
References: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
	<AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc@mail.gmail.com>
	<1294947839.9990.50.camel@pow>
Message-ID: <37A619CF-9ED2-4F11-A5A6-53210AD1CC07@twistedmatrix.com>

On Jan 13, 2011, at 2:43 PM, Luke Marsden wrote:

> Damn, I'm going to be in Cambridge for 10 weeks from Wednesday 19th
> onwards (usually based here in the UK). So I miss out by 3 days!
> 
> I'd really like to meet up with any Twisted folk when I arrive though.
> Is anyone Boston-based up for a drink some time after the 19th?
> 
> FYI I'm the guy behind
> http://twistedmatrix.com/trac/wiki/SuccessStories#HybridLogic
> 
> :-)

We should really be having sprints more than once every 10 weeks, so please motivate us to do another one while you're in town :).

I'd definitely love to meet up, perhaps more than once, and I'm sure some other folks would love to meet one of our success stories.  Feel free to contact me personally so we can work out the details.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110113/4936ce77/attachment.html>

From david at davidstrauss.net  Thu Jan 13 15:12:05 2011
From: david at davidstrauss.net (David Strauss)
Date: Thu, 13 Jan 2011 14:12:05 -0800
Subject: [Twisted-Python] Pantheon sponsorship logo
Message-ID: <1294956725.22191.6.camel@oxygen>

Hi Twisters,

I recently sent in a $1000/silver sponsorship to the Twisted project
from Pantheon Systems, my new company. For the sponsor listing, I've
attached a logo with the specified dimensions. Please link to our home
page [1]. Thanks, and happy 2011.

[1] http://getpantheon.com/

-- 
David Strauss
   | david at getpantheon.com
   | +1 512 577 5827 [mobile]
Pantheon Systems
   | http://getpantheon.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pantheon-logo-white-160x37.png
Type: image/png
Size: 3942 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20110113/f46ff693/attachment-0002.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20110113/f46ff693/attachment.sig>

From lvh at laurensvh.be  Thu Jan 13 15:51:55 2011
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Thu, 13 Jan 2011 23:51:55 +0100
Subject: [Twisted-Python] Pantheon sponsorship logo
In-Reply-To: <1294956725.22191.6.camel@oxygen>
References: <1294956725.22191.6.camel@oxygen>
Message-ID: <AANLkTimCXeXKoXaiu2fZV_0D2pFwVZy9+h80wZ=f6-Q1@mail.gmail.com>

Thanks a lot for your support!

Unfortunately, for some reason, I can edit all the wiki pages but not
the front page. I'm sure JP/Glyph/someone else with appropriate rights
will oblige. I pinged them, at least.

cheers and have a wonderful 2011
lvh



From exarkun at twistedmatrix.com  Thu Jan 13 16:03:50 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 13 Jan 2011 23:03:50 -0000
Subject: [Twisted-Python] Pantheon sponsorship logo
In-Reply-To: <AANLkTimCXeXKoXaiu2fZV_0D2pFwVZy9+h80wZ=f6-Q1@mail.gmail.com>
References: <1294956725.22191.6.camel@oxygen>
	<AANLkTimCXeXKoXaiu2fZV_0D2pFwVZy9+h80wZ=f6-Q1@mail.gmail.com>
Message-ID: <20110113230350.1816.836901483.divmod.xquotient.123@localhost.localdomain>

On 10:51 pm, lvh at laurensvh.be wrote:
>Thanks a lot for your support!
>
>Unfortunately, for some reason, I can edit all the wiki pages but not
>the front page. I'm sure JP/Glyph/someone else with appropriate rights
>will oblige. I pinged them, at least.
>
>cheers and have a wonderful 2011

The logo is now up.  Thanks for the support, David!

We also have a sponsors-only mailing list.  If you'd like someone at 
Pantheon subscribed to it, contact me off-list with contact information.

Jean-Paul



From sandro at e-den.it  Thu Jan 13 16:43:09 2011
From: sandro at e-den.it (Alessandro Dentella)
Date: Fri, 14 Jan 2011 00:43:09 +0100
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
References: <20110111074838.GA19873@ubuntu>
	<AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
Message-ID: <20110113234309.GB5237@ubuntu>

thanks,

short abstact: manhole is very good, thanks. But I'd need to add readline to
make it usable and I'd need tab-completion too. 


On Thu, Jan 13, 2011 at 12:06:10PM +0000, Michael Thompson wrote:
> On 11 January 2011 07:48, Alessandro Dentella <sandro at e-den.it> wrote:
> 
> > So what's the suggested way to play with twisted?
> 
> It depends what you're trying to do. I'd suggest you get some form of
> skeleton program running first. 

I do have already: it uses SerialPort, queries a serial bus and returns info
on a domotic system (switches & co). Apart from my queries it also listen to
whatever the serial bus issues and react changing the internal state of some
objects.

What I'd like to do is to play interactively with these objects (Eg: a
digital module with 8 switches: I want to switch on/off the exits).

> At that point you can interact with the program using twisted manhole.

this is interesting. I found a working example::

   from twisted.internet import reactor
   from twisted.conch import telnet

   def createShellServer( ):

       print 'Creating shell server instance'
       factory = telnet.ShellFactory()
       port = reactor.listenTCP( 2000, factory)
       factory.namespace['x'] = 'hello world'
       factory.username = 'sd'
       factory.password = 'vega'
       print 'Listening on port 2000'
       return port

   if __name__ == "__main__":

       reactor.callWhenRunning( createShellServer )
       reactor.run()

that raises /usr/lib/python2.6/dist-packages/twisted/manhole/telnet.py:8: DeprecationWarning: As of Twisted 2.1, twisted.protocols.telnet is deprecated.  See twisted.conch.telnet for the current, supported API.
  from twisted.protocols import telnet

I couldn't make out a correct syntax using the new API. Can somebody point
me to the correct solution?

Adding readline
----------------

To make this solution viable to me I really need to have readline and
completion. I found a thread hinting of a patch that should implement it but
no real patch to see [1].

I tryied to start an IPythonShell at the prompt but it simply hangs forever.



sandro
*:-)

[1] http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg02241.html

-- 
Sandro Dentella  *:-)
http://www.reteisi.org             Soluzioni libere per le scuole
http://sqlkit.argolinux.org        SQLkit home page - PyGTK/python/sqlalchemy



From benjamin.bertrand at lfv.se  Fri Jan 14 07:56:53 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Fri, 14 Jan 2011 14:56:53 +0000
Subject: [Twisted-Python] Design advice
Message-ID: <2C9A58914594E34AA28179DB776FABDF0E1B11B2@xw-exch05.lfv.se>

Hi,

I'm trying to do a proof of concept and need some advice about the design.
We today have an external system sending messages to several of our tests systems (one specific connection per system).
We'd like to get our own server for more flexibility (easily setup connection to a new system, filtering, re-sending...).

The general idea so far is:
- A server receives all the messages from the external system, parses them and writes them to a database.
The server will be running as a daemon (should be on all the time).
- Clients can retrieve messages from the database and send them to test systems (one client per system). Clients should as well be able to send "live" data to the system (after some filtering on message content).
Clients are independent. They can be started/stopped depending on the need.

The server and clients use a specific protocol to communicate with the other system.
I already have implemented a server that receives messages from the external system. Parsing and writing them to a database shouldn't be too difficult.
I see how I can tell a client to retrieve specific messages from the database to send them.
What I'm not sure about is the "live" part (sending messages coming from the external system). Note that when I say "live", a small delay (up to 2-3 seconds) is not critical.
1) Each client could poll the database for change... They would need to poll it quite frequently, so don't think it's an option.
2) I read about being notified by a database on table changes (http://www.divillo.com/). That's much nicer than polling, but I don't think that's the best for my application.
3) I think a better solution would be to directly ask the server receiving the messages.
Not sure about the best way to do that:
3.1) The server could forward the raw data to all the clients and let the client do the filtering. Lot of unneeded data would be sent.
3.2) The server could do the filtering and send only the needed messages. Is using twisted's perspective broker a good solution for that?
4) Another idea?

In term of dimensioning, we can get around 200 messages per minute (max message length is 10000 bytes). Usually more around 20-30 messages per minute.
The number of clients is small (around 10).

Any advice?

Thanks

Benjamin



From tenth at twistedmatrix.com  Fri Jan 14 10:24:35 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Fri, 14 Jan 2011 12:24:35 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <1294947839.9990.50.camel@pow>
References: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
	<AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc@mail.gmail.com>
	<1294947839.9990.50.camel@pow>
Message-ID: <AANLkTikMB9jwFeEsAPNTcRvZGR7gb_RcAOyY-jZn1msj@mail.gmail.com>

On Thu, Jan 13, 2011 at 2:43 PM, Luke Marsden <luke-lists at hybrid-logic.co.uk
> wrote:

> Damn, I'm going to be in Cambridge for 10 weeks from Wednesday 19th
> onwards (usually based here in the UK). So I miss out by 3 days!
>

Hi Luke,

We're trying to get into the habit of having more regular sprints...
Hopefully we'll do something in February and March as well, and we'll
definitely add you to the invitations,

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110114/3ae44247/attachment-0001.html>

From JOHN at egh.com  Fri Jan 14 12:45:41 2011
From: JOHN at egh.com (John Santos)
Date: Fri, 14 Jan 2011 14:45:41 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <AANLkTikMB9jwFeEsAPNTcRvZGR7gb_RcAOyY-jZn1msj@mail.gmail.com>
Message-ID: <1110114143815.11974E-100000@Ives.egh.com>


It would take me at least 3 minutes to walk to Cambridge (though
probably the wrong end of Cambridge), so I'm available.  However,
I still feel like a relative newbie, so I don't know how useful
I would be.  (I've been puttering around with Twisted/Python for
a couple of years, but mostly in my spare time on back-burner
projects, so not that much accumulated experience.)


-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

From glyph at twistedmatrix.com  Fri Jan 14 13:23:06 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 14 Jan 2011 15:23:06 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <1110114143815.11974E-100000@Ives.egh.com>
References: <1110114143815.11974E-100000@Ives.egh.com>
Message-ID: <A1ABBB24-E979-4E26-BC90-17DAB6A4E97B@twistedmatrix.com>


On Jan 14, 2011, at 2:45 PM, John Santos wrote:

> It would take me at least 3 minutes to walk to Cambridge (though
> probably the wrong end of Cambridge), so I'm available.  However,
> I still feel like a relative newbie, so I don't know how useful
> I would be.  (I've been puttering around with Twisted/Python for
> a couple of years, but mostly in my spare time on back-burner
> projects, so not that much accumulated experience.)

We can always use more contributors.  You can help with documentation, or with small bugs, or any number of other things.

If you're concerned about being productive and useful at the sprint, the main thing you can do is not to learn tons of stuff about Twisted, but to pick a couple of tickets which interest you beforehand and familiarize yourself with the development process (<http://twistedmatrix.com/trac/wiki/TwistedDevelopment> and <http://twistedmatrix.com/trac/wiki/ReviewProcess>) so that you can jump right in.  The experienced folks at the sprint are generally very happy to help.




From tenth at twistedmatrix.com  Fri Jan 14 13:37:27 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Fri, 14 Jan 2011 15:37:27 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <1110114143815.11974E-100000@Ives.egh.com>
References: <AANLkTikMB9jwFeEsAPNTcRvZGR7gb_RcAOyY-jZn1msj@mail.gmail.com>
	<1110114143815.11974E-100000@Ives.egh.com>
Message-ID: <AANLkTi=62LNAQq9ErejkYvm-=F94XtJ=e0bqGwwX+xTR@mail.gmail.com>

On Fri, Jan 14, 2011 at 2:45 PM, John Santos <JOHN at egh.com> wrote:

>
> It would take me at least 3 minutes to walk to Cambridge (though
> probably the wrong end of Cambridge), so I'm available.  However,
> I still feel like a relative newbie, so I don't know how useful
> I would be.


Hi John,

I'm not even sure I'd call myself a fully qualified newbie, but I've still
managed to help close a few tickets... The nice thing about Sprints is that
you can just sit down next to someone who knows what they're doing (usually
not me, BTW) and help them get something productive done. (Or just learn
more for next time.)

There are also quite a few jobs involving documentation, the website, and
various servers and build systems that are more tedious and annoying than
anything else... and tedious and annoying is always better with free pizza!

Anyway, you should be receiving an invitation shortly... And if it says
anything about "Max Guests Reached", feel free to show up anyway (there's
generally always more room for pair programming / hanging out and meeting
people, even if all the good laptop spots are taken.)

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110114/f0296200/attachment.html>

From michaelnt at gmail.com  Sat Jan 15 06:17:30 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Sat, 15 Jan 2011 13:17:30 +0000
Subject: [Twisted-Python] Design advice
In-Reply-To: <2C9A58914594E34AA28179DB776FABDF0E1B11B2@xw-exch05.lfv.se>
References: <2C9A58914594E34AA28179DB776FABDF0E1B11B2@xw-exch05.lfv.se>
Message-ID: <AANLkTi=fBKFLEpK6yUmT5c1++x-1xjm+ys2a2ukV0NpN@mail.gmail.com>

On 14 January 2011 14:56,  <benjamin.bertrand at lfv.se> wrote:
> I see how I can tell a client to retrieve specific messages from the database to send them.
> What I'm not sure about is the "live" part (sending messages coming from the external system). Note that when I say "live", a small delay (up to 2-3 seconds) is not critical.

Not too clear what you problem is but you could use some form of
messaging from the server to the clients to inform them that a new
message is available on the database, rather than them polling. Thrift
or AMQP might meet your needs for this.

Michael



From andrewfr_ice at yahoo.com  Sat Jan 15 11:15:26 2011
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Sat, 15 Jan 2011 10:15:26 -0800 (PST)
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <mailman.1367.1295017063.9255.twisted-python@twistedmatrix.com>
Message-ID: <329842.43878.qm@web120720.mail.ne1.yahoo.com>

Hi Folks:

> Message: 1
> Date: Thu, 13 Jan 2011 12:32:08 -0500
> From: Tenth <tenth at twistedmatrix.com>
> Subject: [Twisted-Python] Boston Area Mini-Sprint
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID:
>    
> <AANLkTim0WuyPW219MH+cxXJuKi1WVvBSiCZOW+sJogqc at mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
> 
> Apologies in advance for the short notice, but I'm planning
> to host a Boston
> area Twisted mini-sprint this weekend on Sunday, January
> 16th.
> 
> Space is fairly limited (hence the mini- prefix), but if
> you're on
> twisted-python and would be interested in the details of
> this and/or future
> Boston area sprints, let me know, and I'll add you to the
> invitation.

Yes this is short notice. Still, I am tempted to drive in for the sprint from Montreal, Canada. However where is the sprint being held, what time does it start, and how long will it be?

Cheers,
Andrew







From goffi at goffi.org  Sat Jan 15 12:08:40 2011
From: goffi at goffi.org (goffi)
Date: Sat, 15 Jan 2011 20:08:40 +0100
Subject: [Twisted-Python] Flags with MaildirMailbox
Message-ID: <4D31F0B8.1070700@goffi.org>

G'day everybody,

I'm playing a little bit with twisted.mail.maildir.Mailbox which seems 
to work nice, but it doesn't seem to manage flags (cf 
http://cr.yp.to/proto/maildir.html "What can I put in info").
Is there an easy/elegant way to do this ? Is it planed to implement this 
feature ?
Thanks for any answer

Regards
Goffi




From glyph at twistedmatrix.com  Sat Jan 15 13:22:54 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 15 Jan 2011 15:22:54 -0500
Subject: [Twisted-Python] "small" jobs
Message-ID: <E938D36F-09E0-4B0D-B5D6-207A8341E17D@twistedmatrix.com>

Hello Twisted Community,

Tomorrow, we're going to have a sprint in Massachusetts, where core developers and several contributors will get together to improve Twisted's code and documentation.  If you can't make it there, we'd be happy for you to play along at home, reviewing tickets and submitting patches.  We'll be on the twisted IRC channel as usual.

However, there are probably many of you who don't quite feel up to a sprint; who might not know enough about Python, or Twisted's internals, or the development process.  Or maybe you're just not that confident in your coding skills.  Twisted needs your help too.

In the past year, we've had two people take over non-coding responsibilities.   Jason J.W. Williams has become our official Success Stories ambassador (feel free to get in touch with him at <success at twistedmatrix.com> if you've got one!) and David Sturgis has become (somewhat less formally) our impromptu Boston-area sprint director.  Partially as a result, the core team has been able to stop thinking about sprint organization and success stories, and finish several new features in time for 10.2 as well as getting that release out before the end of 2010.

There are lots of other small jobs that need some attention.  By committing to one of the following responsibilities, you'd take a load off the core developers' minds so that we can focus on doing that core development:

Maintain a project page - one of the ones linked from <http://twistedmatrix.com/trac/wiki/TwistedProjects>.  These should be the preferred "landing" pages for people with a particular interest in Twisted, like "I want to run a chat server", but right now they don't contain enough useful information.
Maintain contact with our sponsors.  This would involve remembering when particular people donated, getting in touch with them when their sponsor membership is about to expire, and putting up and taking down logos from the front page of twistedmatrix.com.
Give credit where credit is due.  <http://twistedmatrix.com/trac/wiki/TwistedMatrixLaboratories> and the CREDITS file in the Twisted release are kind of a mess; they refer to people who are long gone and they don't recognize people who worked hard on the current release.

Please reply if you'd like to accept one of these responsibilities, or if you can think of another smallish, non-coding responsibility that someone could take over.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110115/67c5339e/attachment.html>

From glyph at twistedmatrix.com  Sat Jan 15 13:44:55 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 15 Jan 2011 15:44:55 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <329842.43878.qm@web120720.mail.ne1.yahoo.com>
References: <329842.43878.qm@web120720.mail.ne1.yahoo.com>
Message-ID: <D5E13202-730B-4784-A29F-56180FB0A71D@twistedmatrix.com>


On Jan 15, 2011, at 1:15 PM, Andrew Francis wrote:

> Yes this is short notice. Still, I am tempted to drive in for the sprint from Montreal, Canada. However where is the sprint being held, what time does it start, and how long will it be?


It's being held in somebody's home office in Somerville MA, and it's from 2-9PM EST.  I'm excited about it myself, but it is *probably* overkill to drive over 300 miles to get there :) - it's not close to a hotel or anything.  For that kind of long-distance thing, we have the sprints at PyCon, which are substantially longer.

In this case it would be better to participate online.  Thanks for your interest though!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110115/fec3fef5/attachment.html>

From waterbug at pangalactic.us  Sat Jan 15 14:16:38 2011
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Sat, 15 Jan 2011 16:16:38 -0500
Subject: [Twisted-Python] "small" jobs
In-Reply-To: <E938D36F-09E0-4B0D-B5D6-207A8341E17D@twistedmatrix.com>
References: <E938D36F-09E0-4B0D-B5D6-207A8341E17D@twistedmatrix.com>
Message-ID: <4D320EB6.80403@pangalactic.us>

On 01/15/2011 03:22 PM, Glyph Lefkowitz wrote:
> ... the core team has been able to stop thinking about sprint
> organization and success stories, and finish several new
> features in time for 10.2 as well as getting that release out
> before the end of 2010.

Wow, did you guys get a hold of the keys to the BDFL's time
machine?  Heh.  ;)  Looking forward to seeing the minions at
PyCon!

Cheers,
Steve




From exarkun at twistedmatrix.com  Sat Jan 15 17:44:01 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Jan 2011 00:44:01 -0000
Subject: [Twisted-Python] Flags with MaildirMailbox
In-Reply-To: <4D31F0B8.1070700@goffi.org>
References: <4D31F0B8.1070700@goffi.org>
Message-ID: <20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>

On 15 Jan, 07:08 pm, goffi at goffi.org wrote:
>G'day everybody,
>
>I'm playing a little bit with twisted.mail.maildir.Mailbox which seems
>to work nice, but it doesn't seem to manage flags (cf
>http://cr.yp.to/proto/maildir.html "What can I put in info").
>Is there an easy/elegant way to do this ? Is it planed to implement 
>this
>feature ?
>Thanks for any answer

Not planned ("planned" in Twisted usually means "there is a ticket for 
it").  You're welcome to contribute that functionality, though!  Do you 
have an idea about how it might fit into the existing code and API?

Jean-Paul



From exarkun at twistedmatrix.com  Sat Jan 15 17:50:05 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Jan 2011 00:50:05 -0000
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <20110113234309.GB5237@ubuntu>
References: <20110111074838.GA19873@ubuntu>
	<AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
	<20110113234309.GB5237@ubuntu>
Message-ID: <20110116005005.1846.844785058.divmod.xquotient.16@localhost.localdomain>

On 13 Jan, 11:43 pm, sandro at e-den.it wrote:
>thanks,
>
>short abstact: manhole is very good, thanks. But I'd need to add 
>readline to
>make it usable and I'd need tab-completion too.

If by "add readline" you mean handle input using the stdlib readline 
module, you can't really do this (or, I'm sure you can, but it would 
involve a ton of coding).  If you only mean "have some commonly useful 
line editing features" then you have at least a couple options:

  * invective includes a fully unit-tested line input widget (for the 
insults widget library).  This really belongs somewhere other than 
invective, it'd be nice if someone pushed it back into Twisted. 
However, you can find invective at 
svn://svn.twistedmatrix.com/svn/Twisted/sandbox/exarkun/invective/trunk 
until that happens.

  * urwid supports Twisted and has lots of fancy things, including an 
input editing widget.

Also, we really should get rid of twisted.manhole, because these days 
manhole is supposed to refer to the stuff in twisted.conch.  I'm not 
sure if you found the latter, but from the warning you got about 
twisted.protocols.telnet it seems like you may have only found the 
former.

Jean-Paul



From exarkun at twistedmatrix.com  Sat Jan 15 22:05:19 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Jan 2011 05:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1295154319.25.91798127@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110116/3ae133f4/attachment.html>

From goffi at goffi.org  Sun Jan 16 09:27:59 2011
From: goffi at goffi.org (goffi)
Date: Sun, 16 Jan 2011 17:27:59 +0100
Subject: [Twisted-Python] Flags with MaildirMailbox
In-Reply-To: <20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>
References: <4D31F0B8.1070700@goffi.org>
	<20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>
Message-ID: <4D331C8F.4010807@goffi.org>

On 16/01/2011 01:44, exarkun at twistedmatrix.com wrote:
>
> Not planned ("planned" in Twisted usually means "there is a ticket for
> it").  You're welcome to contribute that functionality, though!  Do you
> have an idea about how it might fit into the existing code and API?
>
> Jean-Paul
>
Well not really, but it's a good way to learn :). I'm really (really 
really) busy at the moment, so I probably can't in the next days, but I 
will try to have a look (and maybe turn on IRC/the documentation if I 
need help and review on the coding convention of Twisted).

thanks for the reply :)



From goffi at goffi.org  Sun Jan 16 14:33:02 2011
From: goffi at goffi.org (goffi)
Date: Sun, 16 Jan 2011 22:33:02 +0100
Subject: [Twisted-Python] Flags with MaildirMailbox
In-Reply-To: <4D331C8F.4010807@goffi.org>
References: <4D31F0B8.1070700@goffi.org>	<20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>
	<4D331C8F.4010807@goffi.org>
Message-ID: <4D33640E.5030803@goffi.org>

On 16/01/2011 17:27, goffi wrote:
> [snip]
> Well not really, but it's a good way to learn :). I'm really (really
> really) busy at the moment, so I probably can't in the next days, but I
> will try to have a look (and maybe turn on IRC/the documentation if I
> need help and review on the coding convention of Twisted).
>
> thanks for the reply :)
An other issue: when we use appendMessage, MaildirMailbox doesn't update 
its list. As a result, listMessages() return an outdated list (the list 
of all files except the new one). It sounds like a bug.




From andrewfr_ice at yahoo.com  Sun Jan 16 14:50:13 2011
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Sun, 16 Jan 2011 13:50:13 -0800 (PST)
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <mailman.1652.1295154321.9255.twisted-python@twistedmatrix.com>
Message-ID: <617520.64406.qm@web120703.mail.ne1.yahoo.com>

Hi Glyph et al:

Message: 4
Date: Sat, 15 Jan 2011 15:44:55 -0500
From: Glyph Lefkowitz <glyph at twistedmatrix.com>
Subject: Re: [Twisted-Python] Boston Area Mini-Sprint
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Message-ID: <D5E13202-730B-4784-A29F-56180FB0A71D at twistedmatrix.com>
Content-Type: text/plain; charset="us-ascii"


>It's being held in somebody's home office in Somerville MA, and it's from >2-9PM EST.  I'm excited about it myself, but it is *probably* overkill to >drive over 300 miles to get there :) - it's not close to a hotel or >anything.  For that kind of long-distance thing, we have the sprints at >PyCon, which are substantially longer.

Fair enough although I have never been to Boston. I will stay home and watch the New England Patriots/NY Giants game. About Pycon. For starters, congratulations on your talk acceptance. I will be a Pycon 2011 and if there is a Twisted Sprint (and no other competing sprint like Stackless), I would participate. However I have to make these plans in advance.

Cheers,
Andrew




      



From goffi at goffi.org  Sun Jan 16 14:51:37 2011
From: goffi at goffi.org (goffi)
Date: Sun, 16 Jan 2011 22:51:37 +0100
Subject: [Twisted-Python] Flags with MaildirMailbox
In-Reply-To: <4D33640E.5030803@goffi.org>
References: <4D31F0B8.1070700@goffi.org>	<20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>	<4D331C8F.4010807@goffi.org>
	<4D33640E.5030803@goffi.org>
Message-ID: <4D336869.4000405@goffi.org>

On 16/01/2011 22:33, goffi wrote:
> An other issue: when we use appendMessage, MaildirMailbox doesn't update
> its list. As a result, listMessages() return an outdated list (the list
> of all files except the new one). It sounds like a bug.
Sorry, forget this mail, the list is well updated in the AppendFactory 
(_MaildirMailboxAppendMessageTask), will check twice before sending a 
mail to the list next time :p

Sorry for the noise.



From sandro at e-den.it  Sun Jan 16 16:12:37 2011
From: sandro at e-den.it (Alessandro Dentella)
Date: Mon, 17 Jan 2011 00:12:37 +0100
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <20110116005005.1846.844785058.divmod.xquotient.16@localhost.localdomain>
References: <20110111074838.GA19873@ubuntu>
	<AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
	<20110113234309.GB5237@ubuntu>
	<20110116005005.1846.844785058.divmod.xquotient.16@localhost.localdomain>
Message-ID: <20110116231237.GB19973@ubuntu>

thanks Jean-Paul for the hints,

On Sun, Jan 16, 2011 at 12:50:05AM -0000, exarkun at twistedmatrix.com wrote:
> On 13 Jan, 11:43 pm, sandro at e-den.it wrote:
> >thanks,
> >
> >short abstact: manhole is very good, thanks. But I'd need to add 
> >readline to
> >make it usable and I'd need tab-completion too.
> 
> If by "add readline" you mean handle input using the stdlib readline 
> module, you can't really do this (or, I'm sure you can, but it would 
> involve a ton of coding).  If you only mean "have some commonly useful 
> line editing features" then you have at least a couple options:

Well, in fact I intended mainly up/down arrows *and* tab-completion, like
ipython have. 

>   * invective includes a fully unit-tested line input widget (for the 
> insults widget library).  This really belongs somewhere other than 
> invective, it'd be nice if someone pushed it back into Twisted. 
> However, you can find invective at 
> svn://svn.twistedmatrix.com/svn/Twisted/sandbox/exarkun/invective/trunk 
> until that happens.
> 
>   * urwid supports Twisted and has lots of fancy things, including an 
> input editing widget.

>From what you say I don't know if completion is something I'd
get with invective of urwid.

> Also, we really should get rid of twisted.manhole, because these days 
> manhole is supposed to refer to the stuff in twisted.conch.  I'm not 
> sure if you found the latter, but from the warning you got about 
> twisted.protocols.telnet it seems like you may have only found the 
> former.

I was able to use only manhole.telnet. I wan't able to understand how to
make twisted.protocols.telnet work in the same way and was not able to fine
a demo snippet (more for completeness that else I'm still interested in
this).

On the other hand I managed to use ipython and twisted as I wanted and
everitying is working like a charm (but I still have a question that I'll
leave for next chapter).

Twisted in a thread - working setup
-----------------------------------

Following a hint in the ipython ml I started a second thread for twisted and
I'm using blockingcallFromThread to dispatch commands to the reactor:

    proto = Domotik()
    SerialPort(proto, o.opts['device'], reactor, baudrate=int(o.opts['baudrate']))

    rit = twistedutil.ReactorInThread()
    rit.setDaemon(True)
    rit.start()

    q = Quadro(proto, discover=False)
    proto.quadro = q
    q.discover_modules()

This works exactly as I wanted. I can interact with 'q' that represents a
collection of electric modules on the serial bus 


The unresolved doubt
--------------------------------

What I can't understand is why I can't put "q.discover_modules()" inside
callWhenRunning() command: if I do that it just blocks at the first
iteration of the 'for' loop.

    reactor.callWhenRunning( start_command, proto)

    def start_command(proto):
	q.discover_modules()

    class Quadro(object):

	def __init__(self, proto):
	    self.proto = proto
	    self.modules = []

	def discover_modules(self):
            """send a request to the serial bus to understand which electric
            modules are present"""

	    for x in range(10):
		blockingCallFromThread(reactor.callLater, 1 + x/5.0, self.proto.ask_status, x)


thanks

sandro
*:-)


-- 
Sandro Dentella  *:-)
http://www.reteisi.org             Soluzioni libere per le scuole
http://sqlkit.argolinux.org        SQLkit home page - PyGTK/python/sqlalchemy



From glyph at twistedmatrix.com  Sun Jan 16 22:07:42 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 17 Jan 2011 00:07:42 -0500
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <20110116231237.GB19973@ubuntu>
References: <20110111074838.GA19873@ubuntu>
	<AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
	<20110113234309.GB5237@ubuntu>
	<20110116005005.1846.844785058.divmod.xquotient.16@localhost.localdomain>
	<20110116231237.GB19973@ubuntu>
Message-ID: <5330728F-F812-4F66-B956-642C6F95A5FE@twistedmatrix.com>


On Jan 16, 2011, at 6:12 PM, Alessandro Dentella wrote:

> thanks Jean-Paul for the hints,
> 
> On Sun, Jan 16, 2011 at 12:50:05AM -0000, exarkun at twistedmatrix.com wrote:
>> On 13 Jan, 11:43 pm, sandro at e-den.it wrote:
>>> thanks,
>>> 
>>> short abstact: manhole is very good, thanks. But I'd need to add 
>>> readline to
>>> make it usable and I'd need tab-completion too.
>> 
>> If by "add readline" you mean handle input using the stdlib readline 
>> module, you can't really do this (or, I'm sure you can, but it would 
>> involve a ton of coding).  If you only mean "have some commonly useful 
>> line editing features" then you have at least a couple options:
> 
> Well, in fact I intended mainly up/down arrows *and* tab-completion, like
> ipython have. 
> 
>>  * invective includes a fully unit-tested line input widget (for the 
>> insults widget library).  This really belongs somewhere other than 
>> invective, it'd be nice if someone pushed it back into Twisted. 
>> However, you can find invective at 
>> svn://svn.twistedmatrix.com/svn/Twisted/sandbox/exarkun/invective/trunk 
>> until that happens.
>> 
>>  * urwid supports Twisted and has lots of fancy things, including an 
>> input editing widget.
> 
> From what you say I don't know if completion is something I'd
> get with invective of urwid.

Invective is an IRC client (with a useful text-editing widget for Twisted's "insults" module).  urwid is a client library.  Completion is something that you'd need to implement yourself with either of these (as is a functional Python interpreter...)

>> Also, we really should get rid of twisted.manhole, because these days 
>> manhole is supposed to refer to the stuff in twisted.conch.  I'm not 
>> sure if you found the latter, but from the warning you got about 
>> twisted.protocols.telnet it seems like you may have only found the 
>> former.
> 
> I was able to use only manhole.telnet. I wan't able to understand how to
> make twisted.protocols.telnet work in the same way and was not able to fine
> a demo snippet (more for completeness that else I'm still interested in
> this).

twisted.protocols.telnet is old and really should not be used.  The new, good telnet implementation is in twisted.conch.telnet.  You can find code that uses this (both a runnable application and an instructive example) in twisted.conch.manhole_tap, which also happens to include a python interpreter as its application.

> On the other hand I managed to use ipython and twisted as I wanted and
> everitying is working like a charm (but I still have a question that I'll
> leave for next chapter).
> 
> Twisted in a thread - working setup
> -----------------------------------
> 
> Following a hint in the ipython ml I started a second thread for twisted and
> I'm using blockingcallFromThread to dispatch commands to the reactor:

You can do this in pretty much any interactive Python interpreter, including the default one.  It's not very convenient, though :).

> What I can't understand is why I can't put "q.discover_modules()" inside
> callWhenRunning() command: if I do that it just blocks at the first
> iteration of the 'for' loop.

Because callWhenRunning will schedule start_command to be run on the main (reactor) thread.  (callWhenRunning may only be called _from_ the main thread, too, which it seems like you might not be doing).

Since start_command is running on the main thread, when it gets around to blockingCallFromThread, it puts some work into the queue for the reactor to do, then goes to sleep forever, trusting that the main thread will do the work and then wake it up.  Except - oops! - it just put the main thread to sleep forever, so it will never wake up.

If you'd like, you can file a ticket for blockingCallFromThread to raise a loud, angry exception if it is invoked from the reactor thread.

(Also, in the simple example you gave, you're invoking blockingCallFromThread with the wrong signature; the first argument must be a reactor.  The rest of my explanation was based on the assumption that this is not the exact code you're running, since that would log a traceback immediately.  Or, perhaps the fact that you're calling callWhenRunning from a non-main thread is blowing up in some more insidious way and that's the real problem.)

Hope this helps,

-glyph


From sandro at e-den.it  Mon Jan 17 02:31:21 2011
From: sandro at e-den.it (Alessandro Dentella)
Date: Mon, 17 Jan 2011 10:31:21 +0100
Subject: [Twisted-Python] Twisted and ipython
In-Reply-To: <5330728F-F812-4F66-B956-642C6F95A5FE@twistedmatrix.com>
References: <20110111074838.GA19873@ubuntu>
	<AANLkTikGkR0pv0VkOUp3-uHpWQ1B+zCZuX3kR0K+ZH=6@mail.gmail.com>
	<20110113234309.GB5237@ubuntu>
	<20110116005005.1846.844785058.divmod.xquotient.16@localhost.localdomain>
	<20110116231237.GB19973@ubuntu>
	<5330728F-F812-4F66-B956-642C6F95A5FE@twistedmatrix.com>
Message-ID: <20110117093121.GA22374@ubuntu>

Thanks Glyph,

On Mon, Jan 17, 2011 at 12:07:42AM -0500, Glyph Lefkowitz wrote:
> > From what you say I don't know if completion is something I'd
> > get with invective of urwid.
> 
> Invective is an IRC client (with a useful text-editing widget for Twisted's "insults" module).  urwid is a client library.  Completion is something that you'd need to implement yourself with either of these (as is a functional Python interpreter...)

ok, clear.

> twisted.protocols.telnet is old and really should not be used.  The new,
> good telnet implementation is in twisted.conch.telnet.  You can find code
> that uses this (both a runnable application and an instructive example) in
> twisted.conch.manhole_tap, which also happens to include a python
> interpreter as its application.

ok, I found demo.tac and demo_manhole.tac and will have a deeper look at them.

> > Twisted in a thread - working setup
> > -----------------------------------
> > 
> > Following a hint in the ipython ml I started a second thread for twisted and
> > I'm using blockingcallFromThread to dispatch commands to the reactor:
> 
> You can do this in pretty much any interactive Python interpreter, including the default one.  It's not very convenient, though :).
> 
> > What I can't understand is why I can't put "q.discover_modules()" inside
> > callWhenRunning() command: if I do that it just blocks at the first
> > iteration of the 'for' loop.

> Because callWhenRunning will schedule start_command to be run on the main
> (reactor) thread.  

mmh.... in my case the reactor thread in not the main one!
IPython.twistedutil.ReactorInThread does that for me

I'm calling it from the main thread, that is not the reactor's thread in my case

    rit = twistedutil.ReactorInThread()
    rit.setDaemon(True)
    rit.start()

> (callWhenRunning may only be called _from_ the main thread, too, which it
> seems like you might not be doing).


> Since start_command is running on the main thread, when it gets around to
> blockingCallFromThread, it puts some work into the queue for the reactor
> to do, then goes to sleep forever, trusting that the main thread will do
> the work and then wake it up.  Except - oops! - it just put the main
> thread to sleep forever, so it will never wake up.
> 
> If you'd like, you can file a ticket for blockingCallFromThread to raise a
> loud, angry exception if it is invoked from the reactor thread.

Ok I think this is the turning key. I imagine that if I start the reactor in
a separate secondary thread, calling reactor.callWhenRunnning(start_command)
from the main thread makes 'start_command' be run in the reactor's
thread. At that point I can't call blockingCallFromThread from that thread,
as you pointed out. If this assumption is wrong, please let me know and I'll
go to study threads.


> (Also, in the simple example you gave, you're invoking
> blockingCallFromThread with the wrong signature; the first argument must
> be a reactor.  The rest of my explanation was based on the assumption that
> this is not the exact code you're running, since that would log a
> traceback immediately.  Or, perhaps the fact that you're calling
> callWhenRunning from a non-main thread is blowing up in some more
> insidious way and that's the real problem.)

Sorry for the confusion. This *is* the correct code but blockingCallFromThread is
really IPython.twsitedutil.blockingCallFromThread that wraps
twisted.internet.threads.blockingCallFromThread passing the reactor as first arg.

thanks again for the valuable explanation

sandro
*:-)


-- 
Sandro Dentella  *:-)
http://www.reteisi.org             Soluzioni libere per le scuole
http://sqlkit.argolinux.org        SQLkit home page - PyGTK/python/sqlalchemy



From benjamin.bertrand at lfv.se  Mon Jan 17 04:24:47 2011
From: benjamin.bertrand at lfv.se (benjamin.bertrand at lfv.se)
Date: Mon, 17 Jan 2011 11:24:47 +0000
Subject: [Twisted-Python] Design advice
In-Reply-To: <AANLkTi=fBKFLEpK6yUmT5c1++x-1xjm+ys2a2ukV0NpN@mail.gmail.com>
References: <2C9A58914594E34AA28179DB776FABDF0E1B11B2@xw-exch05.lfv.se>
	<AANLkTi=fBKFLEpK6yUmT5c1++x-1xjm+ys2a2ukV0NpN@mail.gmail.com>
Message-ID: <2C9A58914594E34AA28179DB776FABDF0E1BC422@xw-exch04.lfv.se>

-----Ursprungligt meddelande-----
Från: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] För Michael Thompson
Skickat: den 15 januari 2011 14:17
Till: Twisted general discussion
Ämne: Re: [Twisted-Python] Design advice

> On 14 January 2011 14:56,  <benjamin.bertrand at lfv.se> wrote:
> > I see how I can tell a client to retrieve specific messages from the database to send them.
> > What I'm not sure about is the "live" part (sending messages coming from the external system). Note that when I say 
> "live", a small delay (up to 2-3 seconds) is not critical.

> Not too clear what you problem is but you could use some form of
> messaging from the server to the clients to inform them that a new
> message is available on the database, rather than them polling. Thrift
> or AMQP might meet your needs for this.

I think you pointed me to the right direction.
What I need is to do messages routing and it looks like txAMPQ is good way to do that.
Thanks.

Benjamin



From tenth at twistedmatrix.com  Tue Jan 18 19:46:23 2011
From: tenth at twistedmatrix.com (Tenth)
Date: Tue, 18 Jan 2011 21:46:23 -0500
Subject: [Twisted-Python] Boston Area Mini-Sprint
In-Reply-To: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
References: <AANLkTimszK_aWcABNcyR0iS+pbfRvELqBi9wx1q=_tQ1@mail.gmail.com>
Message-ID: <AANLkTinTpS_L=ejX5P7qfUJAncZxFuetDU=RQjGzLygv@mail.gmail.com>

The Mini-Sprint was pretty successful... The seven attendees (and three
remote contributors) managed to close 12 tickets, and start work on a
several more.

The Official Report is here:
http://labs.twistedmatrix.com/2011/01/january-twisted-sprint-report.html

Hopefully we'll do this again soon! If you weren't on the invitation list
for the January sprint but would like to hear about our plans for February,
let me know. (I'll post again once we figure out a date.)

- Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110118/ee83e37c/attachment-0001.html>

From saghul at gmail.com  Wed Jan 19 16:55:50 2011
From: saghul at gmail.com (=?UTF-8?Q?Sa=C3=BAl_Ibarra_Corretg=C3=A9?=)
Date: Thu, 20 Jan 2011 00:55:50 +0100
Subject: [Twisted-Python]  (conch) credentials.signature always None?
Message-ID: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>

Hi all,

I'm experiencing something weird while writing a simple SSH server,
and I wonder if anyone did run into this before:

On every snippet I see around regarding public key authentication, the
signature is checked as follows:

#        if not credentials.signature:
#            return failure.Failure(ValidPublicKey())
#        try:
#            public_key = keys.Key.fromString(data=credentials.blob)
#        except (keys.BadKeyError, keys.EncryptedKeyError):
#            return failure.Failure(ConchError("Public key error"))

However, I'm always getting None there and thus the authentication
cannot proceed. I printed its value in the sshsimpleserver.py from the
examples directory and same seems to be happening, so I guess it's not
only my script :-S

Any clue?

Thanks in advance!

-- 
/Saúl
http://saghul.net | http://sipdoc.net



From paulswartz at gmail.com  Wed Jan 19 17:06:11 2011
From: paulswartz at gmail.com (Paul Swartz)
Date: Wed, 19 Jan 2011 19:06:11 -0500
Subject: [Twisted-Python] (conch) credentials.signature always None?
In-Reply-To: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
References: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
Message-ID: <AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>

On Wed, Jan 19, 2011 at 6:55 PM, Saúl Ibarra Corretgé <saghul at gmail.com> wrote:
> Hi all,
>
> I'm experiencing something weird while writing a simple SSH server,
> and I wonder if anyone did run into this before:
>
> On every snippet I see around regarding public key authentication, the
> signature is checked as follows:
>
> #        if not credentials.signature:
> #            return failure.Failure(ValidPublicKey())
> #        try:
> #            public_key = keys.Key.fromString(data=credentials.blob)
> #        except (keys.BadKeyError, keys.EncryptedKeyError):
> #            return failure.Failure(ConchError("Public key error"))

If it's not continuing, that's a problem with the other side.  What
happens with the SSH protocol is:

C: sends a message asking 'if this public key okay?' without sending
any signed data
S: says either "no it's not valid for this account" or "yes it is
valid, please prove you have the private key"
C: if yes, sign some data and send the signature; otherwise try a
different key or different authentication mechanism

The 'if not credentials.signature: return
failure.Failure(ValidPublicKey())' code is how the server tells the
client it's a valid key, but needs to prove it also has the public
key.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin



From saghul at gmail.com  Wed Jan 19 18:10:21 2011
From: saghul at gmail.com (=?UTF-8?Q?Sa=C3=BAl_Ibarra_Corretg=C3=A9?=)
Date: Thu, 20 Jan 2011 02:10:21 +0100
Subject: [Twisted-Python] (conch) credentials.signature always None?
In-Reply-To: <AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>
References: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
	<AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>
Message-ID: <AANLkTinY3dGGQgyoUT_ymRJPmiSQzxKqdgMPjX3TNYmQ@mail.gmail.com>

Hi Paul,

Thanks for that quick response!

On Thu, Jan 20, 2011 at 1:06 AM, Paul Swartz <paulswartz at gmail.com> wrote:
> On Wed, Jan 19, 2011 at 6:55 PM, Saúl Ibarra Corretgé <saghul at gmail.com> wrote:
>> Hi all,
>>
>> I'm experiencing something weird while writing a simple SSH server,
>> and I wonder if anyone did run into this before:
>>
>> On every snippet I see around regarding public key authentication, the
>> signature is checked as follows:
>>
>> #        if not credentials.signature:
>> #            return failure.Failure(ValidPublicKey())
>> #        try:
>> #            public_key = keys.Key.fromString(data=credentials.blob)
>> #        except (keys.BadKeyError, keys.EncryptedKeyError):
>> #            return failure.Failure(ConchError("Public key error"))
>
> If it's not continuing, that's a problem with the other side.  What
> happens with the SSH protocol is:
>
> C: sends a message asking 'if this public key okay?' without sending
> any signed data
> S: says either "no it's not valid for this account" or "yes it is
> valid, please prove you have the private key"
> C: if yes, sign some data and send the signature; otherwise try a
> different key or different authentication mechanism
>
> The 'if not credentials.signature: return
> failure.Failure(ValidPublicKey())' code is how the server tells the
> client it's a valid key, but needs to prove it also has the public
> key.
>

My test was done wrong, my bad :-S I tested again and finally found
the issue: I'm searching for the user's key in a DB and errors are
handled in a errback. So ValidPublicKey was also handled there,
incorrectly.

I fixed it by doing the following:

    def _got_keys_error(self, error, credentials):
        if not error.check(ValidPublicKey):
            return
failure.Failure(ConchError(error.getErrorMessage()))

So now it does work :-)

Thanks and regards,

-- 
/Saúl
http://saghul.net | http://sipdoc.net



From glyph at twistedmatrix.com  Wed Jan 19 22:18:08 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Jan 2011 00:18:08 -0500
Subject: [Twisted-Python] (conch) credentials.signature always None?
In-Reply-To: <AANLkTinY3dGGQgyoUT_ymRJPmiSQzxKqdgMPjX3TNYmQ@mail.gmail.com>
References: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
	<AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>
	<AANLkTinY3dGGQgyoUT_ymRJPmiSQzxKqdgMPjX3TNYmQ@mail.gmail.com>
Message-ID: <80AB6A98-DF8A-4255-87DC-6C199186E656@twistedmatrix.com>

On Jan 19, 2011, at 8:10 PM, Saúl Ibarra Corretgé wrote:

> I fixed it by doing the following:
> 
>    def _got_keys_error(self, error, credentials):
>        if not error.check(ValidPublicKey):
>            return failure.Failure(ConchError(error.getErrorMessage()))

Are you sure that's what you want?  If you just say "I don't want to handle anything except FooError", i.e. the asynchronous equivalent to "except FooError", it's like this:

def myErrback(self, f):
    f.trap(FooError)
    # ... handle it ...


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/3b6e264a/attachment.html>

From tom at recursivedream.com  Wed Jan 19 23:10:16 2011
From: tom at recursivedream.com (Tom Davis)
Date: Thu, 20 Jan 2011 01:10:16 -0500
Subject: [Twisted-Python] Refactoring Documentation
Message-ID: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>

I've been using (and threatening to work on) Twisted for a few years now. It
seems like every time I get back into it, I need to dig up old code or
Google queries just to get started. Yesterday, Jean-Paul introduced me to
the trial-tutorial
branch<http://twistedmatrix.com/trac/browser/branches/trial-tutorial-2443-2>
which
has shed some light on the basics of using trial and testing Twisted
client/server applications in general. Until he mentioned it in IRC, I was
stuck looking at the actual tests for protocols and deciding which parts of
that were generically useful to me. I agreed to finish up that documentation
so that it could finally (four years later) be added to trunk (and more
importantly, twistedmatrix.com). But after thinking about it, I believe the
problem runs much deeper than just the lack of a branch merge.

Reading code to find answers isn't rocket science; I've been programming
long enough to be comfortable doing it. But I probably have to resort to
reading Twisted's code about 8 billion percent more often than any other
codebase. And reading code is a hurdle. Reading through Twisted's
semi-random, 45-point FAQ is a hurdle—and recommending it as a starting
point is unhelpful at best. The core documentation isn't awesome either,
given that it has a tendency to be overly cryptic and link to API
documentation that is often incomplete or generally unhelpful.

As one very basic example, see:
http://twistedmatrix.com/documents/current/core/howto/servers.html. Let's
just review a few things wrong with this page:

   - It's tutorial page #1, but basically tells me I need to read
   howto/plugins.html first if I am writing an "application" (whatever that
   is), as opposed to a "TCP, SSL, and Unix socket server". And it's the wrong
   place for UDP.
   - It attempts to introduce Protocols and Factories—two of Twisted's most
   important concepts—and does neither particularly well. I know that Protocols
   (usually) inherit from t.i.p.Protocol and may be instantiated for a variety
   of reasons and aren't (usually) persistent. I also know that Factories
   instantiate Protocols and give a reference to themselves so protocols can
   "access and modify the persistent configuration". I am told I need to
   implement some interface (or something) to actually listen on a host/port. I
   think.
   - At one point "TCP4ServerEndpoint" is instantiated (but never imported);
   its explanation is left to a digression into the endpoints API, which has
   its own issues. Suffice it to say the document doesn't give me sufficient
   reason to actually use the endpoints API.
   - Later on, we just use reactor.listenTCP()—which our previous digression
   (if bothered to click through and read) claims is not preferable.

By the end of the *servers* tutorial (and after reading some linked
documentation), here's all I *really* know:

   1. Factories create protocols somehow
   2. Protocols have methods like connectionMade, connectionLost, and
   dataReceived to handle events
   3. There are other protocols with other methods. One that I know of,
   anyway.
   4. I may need to write a state machine (???)
   5. I should use an Endpoint or maybe a Service or reactor (but probably
   not!)
   6. I should also use Application for serious business

Moving forward, howto/clients.html duplicates a lot of these things and
fills in some gaps in knowledge while creating more holes. Meanwhile, I
still never wanted to create a QOTD or Echo server.

I think the point has been made. My *real* point, though, is that I love
Twisted. And I'm constantly wishing it was more accessible to newcomers.
Twisted is Python's oldest and most mature event-based networking engine and
despite its decade of existence it remains largely confusing and obscure to
the majority of Python programmers who come upon it. It contains concepts
and standards that are alien to the average Python programmer, but they make
a lot of sense and have a lot more consistency and predictability than the
documentation conveys.

I want to fix that, among other things. And as luck may have it, I like
writing documentation. And I know at least enough Twisted to get the
high-level stuff in order and improve the documentation to the point that
people will keep reading long enough to make sense of the "idea of Twisted"
and be able to implement some basic things and expand upon them later.

There are some things I *do* want to accomplish early on:

   - Make the docs accessible (a lot is hidden and hard to find)
   - Make them more concise and useful to somebody who doesn't want to know
   the 50 different ways to skin every cat (including the ones you should never
   use)
   - Make them introduce and explain Twisted in a way that somebody as dumb
   as me can understand it. This means talking about protocols, factories,
   deferreds, etc. in a way that doesn't require thousands of words of circular
   explanations, digressions, and duplications.
   - Document the different Twisted projects as what they are: really useful
   libraries and/or clients/servers built on top of Twisted that just so
   happens to also ship with the core. One of them is likely to do what the
   prospective user wants, too.

There are also some things I *don't* want to accomplish, at least initially:

   - Explain asynchronous programming in depth
   - Get into the level of detail that the Krondo series does (but I plan to
   borrow from it!)

There are things I'll *need help with*:

   - The final word on what is/isn't to be used in what context; practical,
   real-world explanations of why I would use A instead of B (not just "it's
   more flexible").
   - Better documentation from project creators/maintainers/lovers on their
   project. These projects make a lot of hard stuff trivial and many do not
   convey that very well. I'll do my best to reorganize and improve the
   existing documentation, but most of the projects cater to a specific niche
   that requires its own core knowledge.


Most of this was discussed with Jean-Paul and Glyph at tonight's Python
meet-up in Cambridge. Some work has already begun on the new docs here:

https://github.com/tdavis/twisted-docs

I hope the above came off as optimistic and constructive as I meant it: it's
not my intention to insult the documentation or those who wrote it. I just
think with a dose of hindsight and a lot of effort, the docs can be awesome.
And they would improve the entire Twisted ecosystem along with them.


Cheers,

Tom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/b8a47686/attachment.html>

From saghul at gmail.com  Wed Jan 19 23:56:51 2011
From: saghul at gmail.com (=?UTF-8?Q?Sa=C3=BAl_Ibarra_Corretg=C3=A9?=)
Date: Thu, 20 Jan 2011 07:56:51 +0100
Subject: [Twisted-Python] (conch) credentials.signature always None?
In-Reply-To: <80AB6A98-DF8A-4255-87DC-6C199186E656@twistedmatrix.com>
References: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
	<AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>
	<AANLkTinY3dGGQgyoUT_ymRJPmiSQzxKqdgMPjX3TNYmQ@mail.gmail.com>
	<80AB6A98-DF8A-4255-87DC-6C199186E656@twistedmatrix.com>
Message-ID: <AANLkTin-tLaVnj=ZN8KR=uXV48hWs3pRfWBPHpOQ4Fow@mail.gmail.com>

On Thu, Jan 20, 2011 at 6:18 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Jan 19, 2011, at 8:10 PM, Saúl Ibarra Corretgé wrote:
>
> I fixed it by doing the following:
>
>    def _got_keys_error(self, error, credentials):
>        if not error.check(ValidPublicKey):
>            return failure.Failure(ConchError(error.getErrorMessage()))
>
> Are you sure that's what you want?  If you just say "I don't want to handle
> anything except FooError", i.e. the asynchronous equivalent to "except
> FooError", it's like this:
> def myErrback(self, f):
>     f.trap(FooError)
>     # ... handle it ...
>

In this case I could get here (the errback) for several reasons,
depending on the DB backend, for example. I guess I could trap and all
the cases but ValidPrivateKey, but in this case I know for sure I want
ValidPrivateKey to be ignored, that's why I reversed the order. Or am
I missing something here?

Thanks!

-- 
/Saúl
http://saghul.net | http://sipdoc.net



From glyph at twistedmatrix.com  Thu Jan 20 00:07:38 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Jan 2011 02:07:38 -0500
Subject: [Twisted-Python] (conch) credentials.signature always None?
In-Reply-To: <AANLkTin-tLaVnj=ZN8KR=uXV48hWs3pRfWBPHpOQ4Fow@mail.gmail.com>
References: <AANLkTik9T7wgYGGHSCOGQ1x3ovVkGaRJGQQkqxxH79ct@mail.gmail.com>
	<AANLkTim4uyT_n5TAozW4pCBC7ta336n08=RWE6SM=ebQ@mail.gmail.com>
	<AANLkTinY3dGGQgyoUT_ymRJPmiSQzxKqdgMPjX3TNYmQ@mail.gmail.com>
	<80AB6A98-DF8A-4255-87DC-6C199186E656@twistedmatrix.com>
	<AANLkTin-tLaVnj=ZN8KR=uXV48hWs3pRfWBPHpOQ4Fow@mail.gmail.com>
Message-ID: <C8C0D50E-FE06-411F-B0A5-00DAE772BFBA@twistedmatrix.com>


On Jan 20, 2011, at 1:56 AM, Saúl Ibarra Corretgé wrote:

> In this case I could get here (the errback) for several reasons,
> depending on the DB backend, for example. I guess I could trap and all
> the cases but ValidPrivateKey, but in this case I know for sure I want
> ValidPrivateKey to be ignored, that's why I reversed the order. Or am
> I missing something here?

Nope, it sounds like you know what you're doing.  The example just looked slightly fishy (there wasn't quite enough there for me to really know what you were doing) and I wanted to make sure you were familiar with the usual idiom.  Sorry for the false alarm!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/aa359ac1/attachment.html>

From kevin.horn at gmail.com  Thu Jan 20 00:36:30 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 01:36:30 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
Message-ID: <AANLkTim=VnLWbpkZTJ+3pU7vG98xFr1YiYtorJLz5cvt@mail.gmail.com>

On Thu, Jan 20, 2011 at 12:10 AM, Tom Davis <tom at recursivedream.com> wrote:

> I've been using (and threatening to work on) Twisted for a few years now.
> It seems like every time I get back into it, I need to dig up old code or
> Google queries just to get started. Yesterday, Jean-Paul introduced me to
> the trial-tutorial branch<http://twistedmatrix.com/trac/browser/branches/trial-tutorial-2443-2> which
> has shed some light on the basics of using trial and testing Twisted
> client/server applications in general. Until he mentioned it in IRC, I was
> stuck looking at the actual tests for protocols and deciding which parts of
> that were generically useful to me. I agreed to finish up that documentation
> so that it could finally (four years later) be added to trunk (and more
> importantly, twistedmatrix.com). But after thinking about it, I believe
> the problem runs much deeper than just the lack of a branch merge.
>
> Reading code to find answers isn't rocket science; I've been programming
> long enough to be comfortable doing it. But I probably have to resort to
> reading Twisted's code about 8 billion percent more often than any other
> codebase. And reading code is a hurdle. Reading through Twisted's
> semi-random, 45-point FAQ is a hurdle—and recommending it as a starting
> point is unhelpful at best. The core documentation isn't awesome either,
> given that it has a tendency to be overly cryptic and link to API
> documentation that is often incomplete or generally unhelpful.
>
> As one very basic example, see:
> http://twistedmatrix.com/documents/current/core/howto/servers.html. Let's
> just review a few things wrong with this page:
>
>    - It's tutorial page #1, but basically tells me I need to read
>    howto/plugins.html first if I am writing an "application" (whatever that
>    is), as opposed to a "TCP, SSL, and Unix socket server". And it's the wrong
>    place for UDP.
>    - It attempts to introduce Protocols and Factories—two of Twisted's
>    most important concepts—and does neither particularly well. I know that
>    Protocols (usually) inherit from t.i.p.Protocol and may be instantiated for
>    a variety of reasons and aren't (usually) persistent. I also know that
>    Factories instantiate Protocols and give a reference to themselves so
>    protocols can "access and modify the persistent configuration". I am told I
>    need to implement some interface (or something) to actually listen on a
>    host/port. I think.
>    - At one point "TCP4ServerEndpoint" is instantiated (but never
>    imported); its explanation is left to a digression into the endpoints API,
>    which has its own issues. Suffice it to say the document doesn't give me
>    sufficient reason to actually use the endpoints API.
>    - Later on, we just use reactor.listenTCP()—which our previous
>    digression (if bothered to click through and read) claims is not preferable.
>
> By the end of the *servers* tutorial (and after reading some linked
> documentation), here's all I *really* know:
>
>    1. Factories create protocols somehow
>    2. Protocols have methods like connectionMade, connectionLost, and
>    dataReceived to handle events
>    3. There are other protocols with other methods. One that I know of,
>    anyway.
>    4. I may need to write a state machine (???)
>    5. I should use an Endpoint or maybe a Service or reactor (but probably
>    not!)
>    6. I should also use Application for serious business
>
> Moving forward, howto/clients.html duplicates a lot of these things and
> fills in some gaps in knowledge while creating more holes. Meanwhile, I
> still never wanted to create a QOTD or Echo server.
>
> I think the point has been made. My *real* point, though, is that I love
> Twisted. And I'm constantly wishing it was more accessible to newcomers.
> Twisted is Python's oldest and most mature event-based networking engine and
> despite its decade of existence it remains largely confusing and obscure to
> the majority of Python programmers who come upon it. It contains concepts
> and standards that are alien to the average Python programmer, but they make
> a lot of sense and have a lot more consistency and predictability than the
> documentation conveys.
>
> I want to fix that, among other things. And as luck may have it, I like
> writing documentation. And I know at least enough Twisted to get the
> high-level stuff in order and improve the documentation to the point that
> people will keep reading long enough to make sense of the "idea of Twisted"
> and be able to implement some basic things and expand upon them later.
>
> There are some things I *do* want to accomplish early on:
>
>    - Make the docs accessible (a lot is hidden and hard to find)
>    - Make them more concise and useful to somebody who doesn't want to
>    know the 50 different ways to skin every cat (including the ones you should
>    never use)
>    - Make them introduce and explain Twisted in a way that somebody as
>    dumb as me can understand it. This means talking about protocols, factories,
>    deferreds, etc. in a way that doesn't require thousands of words of circular
>    explanations, digressions, and duplications.
>    - Document the different Twisted projects as what they are: really
>    useful libraries and/or clients/servers built on top of Twisted that just so
>    happens to also ship with the core. One of them is likely to do what the
>    prospective user wants, too.
>
> There are also some things I *don't* want to accomplish, at least
> initially:
>
>    - Explain asynchronous programming in depth
>    - Get into the level of detail that the Krondo series does (but I plan
>    to borrow from it!)
>
> There are things I'll *need help with*:
>
>    - The final word on what is/isn't to be used in what context;
>    practical, real-world explanations of why I would use A instead of B (not
>    just "it's more flexible").
>    - Better documentation from project creators/maintainers/lovers on
>    their project. These projects make a lot of hard stuff trivial and many do
>    not convey that very well. I'll do my best to reorganize and improve the
>    existing documentation, but most of the projects cater to a specific niche
>    that requires its own core knowledge.
>
>
> Most of this was discussed with Jean-Paul and Glyph at tonight's Python
> meet-up in Cambridge. Some work has already begun on the new docs here:
>
> https://github.com/tdavis/twisted-docs
>
> I hope the above came off as optimistic and constructive as I meant it:
> it's not my intention to insult the documentation or those who wrote it. I
> just think with a dose of hindsight and a lot of effort, the docs can be
> awesome. And they would improve the entire Twisted ecosystem along with
> them.
>
>
> Cheers,
>
> Tom
>
>
Tom,

I very much like this idea, and in fact I have some ideas for this, but I've
been putting off doing anything about it until the (neraly done! really!)
conversion of the current documentation to Sphinx is complete (see ticket
#4500).  I got off track with that the last part of last year, but one of my
New Year's Resolutions is to complete that project.

How can we combine these efforts, or at least keep from working at cross
purposes?

I see from your link above that you are building your own Sphinx project.
Perhaps you would be better off working from the results of the Lore2sphinx
conversion?  Are you modifying existing docs or working from scratch?

Let's get together on this!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/7f65e0d4/attachment.html>

From glyph at twistedmatrix.com  Thu Jan 20 00:55:48 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 20 Jan 2011 02:55:48 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
Message-ID: <FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>

Let me begin by saying that I'm _very_ excited about this prospect and I'm looking forward to the output of this project.  So, some of what I'm about to say may sound like harsh criticism but please do not let it discourage you.  I agree with pretty much everything you're saying about problems with the current documentation.  They need to be fixed.  I'm offering criticism at this early stage in the hopes that it will be useful and feed into your project, not in the hopes that it will stop you.

On Jan 20, 2011, at 1:10 AM, Tom Davis wrote:

> I've been using (and threatening to work on) Twisted for a few years now. It seems like every time I get back into it, I need to dig up old code or Google queries just to get started. Yesterday, Jean-Paul introduced me to the trial-tutorial branch which has shed some light on the basics of using trial and testing Twisted client/server applications in general. Until he mentioned it in IRC, I was stuck looking at the actual tests for protocols and deciding which parts of that were generically useful to me. I agreed to finish up that documentation so that it could finally (four years later) be added to trunk (and more importantly, twistedmatrix.com). But after thinking about it, I believe the problem runs much deeper than just the lack of a branch merge.

Yet, the problem _starts_ with a branch merge.

There are many outstanding documentation branches which are substantial improvements, which need to be edited and merged - the trial tutorial among them.  It would be great if your efforts could start with getting those landed, turning the crank on the process to get our users better documentation in the interim, as you survey the existing documentation.
> Factories create protocols somehow
> Protocols have methods like connectionMade, connectionLost, and dataReceived to handle events
> There are other protocols with other methods. One that I know of, anyway.
> I may need to write a state machine (???)
> I should use an Endpoint or maybe a Service or reactor (but probably not!)
> I should also use Application for serious business
> Moving forward, howto/clients.html duplicates a lot of these things and fills in some gaps in knowledge while creating more holes. Meanwhile, I still never wanted to create a QOTD or Echo server.
> 
> I think the point has been made.

This kind of tear-down is pretty easy: I'd really like to hear your idea of its inverse, though.  What should a newcomer who reads this document know by the end of it?  A massive pile of improved documentation would of course be useful, but a good start would be a clear statement of requirements and audience.  (As well as an enumeration of different audiences that different documents might serve.)

> My real point, though, is that I love Twisted. And I'm constantly wishing it was more accessible to newcomers. Twisted is Python's oldest and most mature event-based networking engine

(minor nitpick: I really like "event-based" or "event-driven", as you've said here: why does <http://docs.recursivedream.com/twisted/> say "asynchronous"? I find that especially in documentation it's a lot easier to explain "event-driven", because you can enumerate what the events are, instead of explaining the etymology of "synchronicity"...)

> I want to fix that, among other things. And as luck may have it, I like writing documentation. And I know at least enough Twisted to get the high-level stuff in order and improve the documentation to the point that people will keep reading long enough to make sense of the "idea of Twisted" and be able to implement some basic things and expand upon them later.
> 
> There are some things I do want to accomplish early on:
> Make the docs accessible (a lot is hidden and hard to find)
> Make them more concise and useful to somebody who doesn't want to know the 50 different ways to skin every cat (including the ones you should never use)
> Make them introduce and explain Twisted in a way that somebody as dumb as me can understand it. This means talking about protocols, factories, deferreds, etc. in a way that doesn't require thousands of words of circular explanations, digressions, and duplications.
> Document the different Twisted projects as what they are: really useful libraries and/or clients/servers built on top of Twisted that just so happens to also ship with the core. One of them is likely to do what the prospective user wants, too.
These all sound like excellent goals.

> There are also some things I don't want to accomplish, at least initially:
> Explain asynchronous programming in depth
> Get into the level of detail that the Krondo series does (but I plan to borrow from it!)
> There are things I'll need help with:
> The final word on what is/isn't to be used in what context; practical, real-world explanations of why I would use A instead of B (not just "it's more flexible").
You will probably have to press us core developers on this one, and you may spark some debates.  These tend to sputter out with no clear resolution as everyone is frustrated that nobody's solution (not even their own) is ideal, but you would be doing us all a great service if you really forced us to develop a consensus about certain things (like "what's the best way to build a twisted command-line program", for example) and agree to agree on the current documented "best practice" for those things.
> Better documentation from project creators/maintainers/lovers on their project. These projects make a lot of hard stuff trivial and many do not convey that very well. I'll do my best to reorganize and improve the existing documentation, but most of the projects cater to a specific niche that requires its own core knowledge.
The biggest problem with this is that you will find that a very small group of people have created the vast majority of this stuff and don't have time to maintain it all any more :).  We certainly don't have a separate dedicated maintainer for each project (although I really wish we could get to that point).

> Most of this was discussed with Jean-Paul and Glyph at tonight's Python meet-up in Cambridge. Some work has already begun on the new docs here:
> 
> https://github.com/tdavis/twisted-docs

There have been several abortive efforts to do something grand to re-invent all of the Twisted documentation in the universe, or a complete overhaul of the website, including several false starts that I've made, and most recently the (somewhat arduous, arguably "mostly complete" (fingers crossed on that one)) attempt to do a sphinx migration.

By the way, it seemed tonight that you weren't that familiar with the existing Sphinx efforts, so you may want to have a look at this and see if it is an improvement on our existing documentation index:

	http://twistedsphinx.funsize.net/contents.html

(I was going to point you at the output of the buildbot, but it looks like something in trunk has broken the conversion process.  Anyone know what this is about? <http://buildbot.twistedmatrix.com/builds/sphinx-html-15724/contents.html>)

I'm really glad to see that Kevin beat me to the punch on posting his reply though, hopefully we'll see this moving along soon :).

Before you continue too much further in that github repository though, please, consider this:

~/Projects/Twisted/trunk/doc$ find conch core mail names pair web words -name '*.xhtml' -or -name '*.py' | xargs wc -l
    .
    .
    .
   28836 total

That's 28 thousand lines of documentation and sample code.  It might not all be the best documentation, but some of it is quite good.  Jean-Paul's "twisted web in 60 seconds" tutorial is in there, and that's definitely worth reading.  Would you volunteer to rewrite 28 thousand lines of code all at once?  Or submit a 28 thousand line patch for review?  As problematic as the current situation is, there is a definite potential for some baby vs. bathwater confusion in improving it.

I am open to the idea that documentation needs different review practices from code, and there are things about documentation (like narrative flow) which are impossible to automatically verify and may require significant changes at multiple layers simultaneously.  These features may not have an obvious parallel in code - which can typically be evolved incrementally, despite the occasional frustrated lament that everything needs to be rewritten.

But, parts of the documentation are code.  Another major problem with the current documentation is that it is out of date.  We know when code goes out of date because it starts raising exceptions and emitting warnings from our test suite, but we only find out about documentation examples are going out of date when we do a release and some poor soul encounters an error when trying to follow along.  I'd really like any effort that undertakes to substantially change the structure of the documentation to make a concerted effort to hit the ground running with test-driven examples which can be automatically verified, so that we have some idea of the impact of code changes on the docs.

Also, while you're energized now, please consider what happens to our documentation efforts if you run out of time or out of motivation halfway through this process.  Incremental improvements may not necessarily provide the best outcome, but they _do_ mean that users get to see some results from these volunteer efforts even if the original volunteer gets busy with other aspects of life and can't complete their project.  Many of your bullet-points above are well suited to individual efforts (some of which are actually issues with the web site, rather than the documentation per se).

I'd like to suggest that, at the very least, you create a branch of Twisted (perhaps on Launchpad?) and integrate your work into the doc/ hierarchy of the current tree.  That way, at least, it would be easier for someone else to pick up where you've left off and fold things into the right place.  This would also provide a way to more easily integrate the doc test suite into the main test suite on our existing build and release infrastructure.

> I hope the above came off as optimistic and constructive as I meant it: it's not my intention to insult the documentation or those who wrote it. I just think with a dose of hindsight and a lot of effort, the docs can be awesome. And they would improve the entire Twisted ecosystem along with them.

Indeed, as the author of many of these original documents, I did not feel insulted in either my person or my work :).  Hopefully you didn't feel that way either after reading this reply!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/90887aa9/attachment.html>

From albert.brandl at weiermayer.com  Thu Jan 20 04:32:22 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Thu, 20 Jan 2011 12:32:22 +0100
Subject: [Twisted-Python] Question about SerialPort
Message-ID: <20110120113222.GA13772@weiermayer.com>

Hi!

I am trying to read Modbus RTU messages over the serial line. There is a
library called pyModbus which is very usable for Modbus TCP/IP, but the
support for RTU is a bit lacking.

The main problem seems to be the specification of Modbus RTU. RTU
messages are separated by time gaps that are at least 3.5 characters
long. Unfortunately, this is the only reliable way for separating
messages - there is no length header or something similar. The
specification does define a trailing CRC, though.

As far as I understand the event loop, I will not be able to guarantee 
that will not miss such a gap - the reactor might be busy handling some 
other events while the gap arrives. 

But when the reactor assigns some time to read from the serial port, I'd 
like it to read until the gap is detected. My current attempt is to 
override the doRead method of SerialPort by something like this:

    def doRead(self):
        port = self.fileno()
        result = []
        while True:
            # The following code is stolen from fdesc.readFromFD
            try:
                output = os.read(port, 1)
                if output:
                    result.append(output)
                else:
                    break
            except (OSError, IOError), ioe:
                if ioe.args[0] in (errno.EAGAIN, errno.EINTR):
                    return
                else:
                    return CONNECTION_LOST
        if not result:
            return CONNECTION_DONE
        else:
            self.protocol.rawDataReceived("".join(result))

If the serial port is configured with a timeout about the size of the
gap, os.read() should return an empty string, thus indicating that
the message is complete.

Most of the code above is a copy of t.i.fdesc.readFromFD. The main 
difference is that I don't read 8192 bytes, but only one at a time,
to detect a time gap.

Does this make sense? Do you think it would be possible to replace the 
constant 8192 in readFromFD by a parameter (that defaults to 8192)? This 
would allow me to replace the content of the while loop with a simple 
function call.

TIA and best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From foom at fuhm.net  Thu Jan 20 06:42:58 2011
From: foom at fuhm.net (James Y Knight)
Date: Thu, 20 Jan 2011 08:42:58 -0500
Subject: [Twisted-Python] Question about SerialPort
In-Reply-To: <20110120113222.GA13772@weiermayer.com>
References: <20110120113222.GA13772@weiermayer.com>
Message-ID: <CEB2B268-90DA-4861-9B00-F792E4B10C0C@fuhm.net>

On Jan 20, 2011, at 6:32 AM, Albert Brandl wrote:
> The main problem seems to be the specification of Modbus RTU. RTU
> messages are separated by time gaps that are at least 3.5 characters
> long. Unfortunately, this is the only reliable way for separating
> messages - there is no length header or something similar. The
> specification does define a trailing CRC, though.

I don't think you'll ever be able to do this reliably in Python. At 9600 baud, 3.5 characters is just about 275hz (9600/10/3.5). Linux schedules process at around 500hz. So, unless you use real-time scheduling, I think you have no guarantee that you'll be able to detect such a gap at all -- some other process may be running and you may completely miss it. And you can't reasonably use real-time scheduling in python...

On the other hand, are you sure you need this? http://www.libmodbus.org/ seems to have code which figures out what length packets should be, and no code to detect a 3.5char delay between packets. That seems much more reliable.

It also doesn't seem to have any code to ensure a 3.5char between sent packets, which indicates to me that either it's totally brokem or else that not even the hardware end actually uses a 3.5char delay to determine packet boundaries...I'd guess the second, since even on an embedded CPU, it's much trickier to ensure the appropriate serial port timing than to simply count the correct number of bytes.

James




From jrennie at gmail.com  Thu Jan 20 06:57:51 2011
From: jrennie at gmail.com (Jason Rennie)
Date: Thu, 20 Jan 2011 08:57:51 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
Message-ID: <AANLkTikpNEqa2-7XFLW=u70kZy3iqzz2VvbifUUew87M@mail.gmail.com>

On Thu, Jan 20, 2011 at 2:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> (minor nitpick: I really like "event-based" or "event-driven", as you've
> said here: why does <http://docs.recursivedream.com/twisted/> say
> "asynchronous"? I find that especially in documentation it's a lot easier to
> explain "event-driven", because you can enumerate what the events are,
> instead of explaining the etymology of "synchronicity"...)
>

I was also surprised by the choice of "asynchronous".  From wikipedia:

In programming, asynchronous events are those occurring independently of the
> main program flow. Asynchronous actions are actions executed in a
> non-blocking scheme, allowing the main program flow to continue processing.


My understanding is that this is the opposite of what twisted is.  The
reactor hands-off control and must wait until control is relinquished.  It
handles events when it checks for them, not necessarily when they happen.
 The reactor and application code blocks, possibly halting the entire
application if it is not written cooperatively.

This was a major point of confusion for me when I started to use twisted.  I
see that if I had carefully read the first few sentences under "Reactor
Basics" in
http://twistedmatrix.com/documents/current/core/howto/reactor-basics.html, I
might not have been so confused.  But, this is one of about 50 links on the
"core" documentation page, which is one of about 20 links on the main
documentation page.  I'm guessing that simply editing and reorganizing
existing documentation would go a long way toward fixing the documentation
problem.

Personally, I'd love to see documentation organization that mimics Python's,
especially the Tutorial/Library Reference/Language Reference breakdown.
 Users tend to know the level of understanding they are looking for and
Python's documentation reflects that.

Cheers,

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/ea0b3616/attachment.html>

From vic.norman at gmail.com  Thu Jan 20 07:43:24 2011
From: vic.norman at gmail.com (Victor Norman)
Date: Thu, 20 Jan 2011 09:43:24 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTikpNEqa2-7XFLW=u70kZy3iqzz2VvbifUUew87M@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTikpNEqa2-7XFLW=u70kZy3iqzz2VvbifUUew87M@mail.gmail.com>
Message-ID: <AANLkTikUrwvSQ4kuQ8ss7xNUF0sNnckr9RpRizrcTx4d@mail.gmail.com>

Hear! Hear!

My major disappointment with Twisted is its documentation.  I've used many
many packages over the years, some with books and books of documentation (HP
OpenView, e.g.), but I've never encountered a package with poorer help for a
newbie.

I finally started to get it when I stumbled upon
http://krondo.com/blog/?page_id=1327.  This has to be one of the best
tutorials I've seen on any topic.  It should be the *first* link in any
Twisted tutorial, IMO.

Vic

On Thu, Jan 20, 2011 at 8:57 AM, Jason Rennie <jrennie at gmail.com> wrote:

> On Thu, Jan 20, 2011 at 2:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>> (minor nitpick: I really like "event-based" or "event-driven", as you've
>> said here: why does <http://docs.recursivedream.com/twisted/> say
>> "asynchronous"? I find that especially in documentation it's a lot easier to
>> explain "event-driven", because you can enumerate what the events are,
>> instead of explaining the etymology of "synchronicity"...)
>>
>
> I was also surprised by the choice of "asynchronous".  From wikipedia:
>
> In programming, asynchronous events are those occurring independently of
>> the main program flow. Asynchronous actions are actions executed in a
>> non-blocking scheme, allowing the main program flow to continue processing.
>
>
> My understanding is that this is the opposite of what twisted is.  The
> reactor hands-off control and must wait until control is relinquished.  It
> handles events when it checks for them, not necessarily when they happen.
>  The reactor and application code blocks, possibly halting the entire
> application if it is not written cooperatively.
>
> This was a major point of confusion for me when I started to use twisted.
>  I see that if I had carefully read the first few sentences under "Reactor
> Basics" in
> http://twistedmatrix.com/documents/current/core/howto/reactor-basics.html,
> I might not have been so confused.  But, this is one of about 50 links on
> the "core" documentation page, which is one of about 20 links on the main
> documentation page.  I'm guessing that simply editing and reorganizing
> existing documentation would go a long way toward fixing the documentation
> problem.
>
> Personally, I'd love to see documentation organization that mimics
> Python's, especially the Tutorial/Library Reference/Language Reference
> breakdown.  Users tend to know the level of understanding they are looking
> for and Python's documentation reflects that.
>
> Cheers,
>
> Jason
>
> --
> Jason Rennie
> Research Scientist, ITA Software
> 617-714-2645
> http://www.itasoftware.com/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
“A designer knows he has achieved perfection not when there is nothing left
to add, but when there is nothing left to take away.” -- Antoine de Saint
Exupéry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/bf0c9c00/attachment.html>

From albert.brandl at weiermayer.com  Thu Jan 20 08:18:26 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Thu, 20 Jan 2011 16:18:26 +0100
Subject: [Twisted-Python] Question about SerialPort
In-Reply-To: <CEB2B268-90DA-4861-9B00-F792E4B10C0C@fuhm.net>
References: <20110120113222.GA13772@weiermayer.com>
	<CEB2B268-90DA-4861-9B00-F792E4B10C0C@fuhm.net>
Message-ID: <20110120151826.GB21934@weiermayer.com>

On Thu, Jan 20, 2011 at 08:42:58AM -0500, James Y Knight wrote:

> I don't think you'll ever be able to do this reliably in Python. At 
> 9600 baud, 3.5 characters is just about 275hz (9600/10/3.5). Linux 
> schedules process at around 500hz.

Well, that's bad news - I'll have to communicate with the SPS at 38400 
baud :-(...

> On the other hand, are you sure you need this? 
> http://www.libmodbus.org/ seems to have code which figures out what 
> length packets should be, and no code to detect a 3.5char delay between 
> packets. That seems much more reliable.

Thanks for the hint - I'll have a look. The code seems quite readable,
although I don't exactly _love_ reading C sources. But the idea that
one might still find out where a modbus message ends is intriguing -
I don't yet see how this might work.

> It also doesn't seem to have any code to ensure a 3.5char between sent 
> packets

Not sure about this - there is a structure called ctx which has a 
timeout_begin->tv_sec and timeout_begin->tv_usec (and a similar thing for 
timeout_end). On the first glance, this looks like variables for handling
the boundary. But I might be wrong.

Thanks & best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From jvalenzuela1977 at gmail.com  Thu Jan 20 09:34:52 2011
From: jvalenzuela1977 at gmail.com (Jason Valenzuela)
Date: Fri, 21 Jan 2011 00:34:52 +0800
Subject: [Twisted-Python] Question about SerialPort
In-Reply-To: <CEB2B268-90DA-4861-9B00-F792E4B10C0C@fuhm.net>
References: <20110120113222.GA13772@weiermayer.com>
	<CEB2B268-90DA-4861-9B00-F792E4B10C0C@fuhm.net>
Message-ID: <4D38642C.7010007@gmail.com>

On 1/20/2011 9:42 PM, James Y Knight wrote:
> On Jan 20, 2011, at 6:32 AM, Albert Brandl wrote:
>> The main problem seems to be the specification of Modbus RTU. RTU
>> messages are separated by time gaps that are at least 3.5 characters
>> long. Unfortunately, this is the only reliable way for separating
>> messages - there is no length header or something similar. The
>> specification does define a trailing CRC, though.
>
> I don't think you'll ever be able to do this reliably in Python. At 9600 baud, 3.5 characters is just about 275hz (9600/10/3.5). Linux schedules process at around 500hz. So, unless you use real-time scheduling, I think you have no guarantee that you'll be able to detect such a gap at all -- some other process may be running and you may completely miss it. And you can't reasonably use real-time scheduling in python...
>
> On the other hand, are you sure you need this? http://www.libmodbus.org/ seems to have code which figures out what length packets should be, and no code to detect a 3.5char delay between packets. That seems much more reliable.
>
> It also doesn't seem to have any code to ensure a 3.5char between sent packets, which indicates to me that either it's totally brokem or else that not even the hardware end actually uses a 3.5char delay to determine packet boundaries...I'd guess the second, since even on an embedded CPU, it's much trickier to ensure the appropriate serial port timing than to simply count the correct number of bytes.


Building upon James' reply a little further, I recently did a ModBus RTU 
implementation on a microcontroller and you need both a 1.5 and 3.5 
character timer for correct operation. With the micro, I used hardware 
timers with uS resolution synchronized to incoming characters via the 
UART interrupt. As James mentions, user-space Python is simply too far 
from the hardware to do this sort of thing. You'd probably have to write 
a custom UART driver and run it on a RTOS to get correct timing. That 
being said, you can probably write something that will work 99.9% of the 
time, but may not respond correctly for some weird corner case scenarios.


Jason Valenzuela



From kevin.horn at gmail.com  Thu Jan 20 11:54:39 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 12:54:39 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
Message-ID: <AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>

On Thu, Jan 20, 2011 at 1:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> Let me begin by saying that I'm _very_ excited about this prospect and I'm
> looking forward to the output of this project.  So, some of what I'm about
> to say may sound like harsh criticism but *please do not let it discourage
> you*.  I agree with pretty much everything you're saying about problems
> with the current documentation.  They need to be fixed.  I'm offering
> criticism at this early stage in the hopes that it will be useful and feed
> into your project, not in the hopes that it will stop you.
>
> On Jan 20, 2011, at 1:10 AM, Tom Davis wrote:
>
> I've been using (and threatening to work on) Twisted for a few years now.
> It seems like every time I get back into it, I need to dig up old code or
> Google queries just to get started. Yesterday, Jean-Paul introduced me to
> the trial-tutorial branch<http://twistedmatrix.com/trac/browser/branches/trial-tutorial-2443-2> which
> has shed some light on the basics of using trial and testing Twisted
> client/server applications in general. Until he mentioned it in IRC, I was
> stuck looking at the actual tests for protocols and deciding which parts of
> that were generically useful to me. I agreed to finish up that documentation
> so that it could finally (four years later) be added to trunk (and more
> importantly, twistedmatrix.com). But after thinking about it, I believe
> the problem runs much deeper than just the lack of a branch merge.
>
>
> Yet, the problem _starts_ with a branch merge.
>
> There are many outstanding documentation branches which are substantial
> improvements, which need to be edited and merged - the trial tutorial among
> them.  It would be great if your efforts could start with getting those
> landed, turning the crank on the process to get our users better
> documentation in the interim, as you survey the existing documentation.
>
>
>    1. Factories create protocols somehow
>    2. Protocols have methods like connectionMade, connectionLost, and
>    dataReceived to handle events
>    3. There are other protocols with other methods. One that I know of,
>    anyway.
>    4. I may need to write a state machine (???)
>    5. I should use an Endpoint or maybe a Service or reactor (but probably
>    not!)
>    6. I should also use Application for serious business
>
> Moving forward, howto/clients.html duplicates a lot of these things and
> fills in some gaps in knowledge while creating more holes. Meanwhile, I
> still never wanted to create a QOTD or Echo server.
>
> I think the point has been made.
>
>
> This kind of tear-down is pretty easy: I'd really like to hear your idea of
> its inverse, though.  What *should* a newcomer who reads this document
> know by the end of it?  A massive pile of improved documentation would of
> course be useful, but a good start would be a clear statement of
> requirements and audience.  (As well as an enumeration of *different* audiences
> that different documents might serve.)
>
> My *real* point, though, is that I love Twisted. And I'm constantly
> wishing it was more accessible to newcomers. Twisted is Python's oldest and
> most mature event-based networking engine
>
>
> (minor nitpick: I really like "event-based" or "event-driven", as you've
> said here: why does <http://docs.recursivedream.com/twisted/> say
> "asynchronous"? I find that especially in documentation it's a lot easier to
> explain "event-driven", because you can enumerate what the events are,
> instead of explaining the etymology of "synchronicity"...)
>

I also find that if you use "event-driven" you can compare to event-driven
GUI apps, when giving an explanation.  Many, many people who have no idea
about what "asynchronous networking" is will get the idea pretty easily when
you make this comparison.  Not everybody, certainly, but a lot.


> I want to fix that, among other things. And as luck may have it, I like
> writing documentation. And I know at least enough Twisted to get the
> high-level stuff in order and improve the documentation to the point that
> people will keep reading long enough to make sense of the "idea of Twisted"
> and be able to implement some basic things and expand upon them later.
>
> There are some things I *do* want to accomplish early on:
>
>    - Make the docs accessible (a lot is hidden and hard to find)
>    - Make them more concise and useful to somebody who doesn't want to
>    know the 50 different ways to skin every cat (including the ones you should
>    never use)
>    - Make them introduce and explain Twisted in a way that somebody as
>    dumb as me can understand it. This means talking about protocols, factories,
>    deferreds, etc. in a way that doesn't require thousands of words of circular
>    explanations, digressions, and duplications.
>    - Document the different Twisted projects as what they are: really
>    useful libraries and/or clients/servers built on top of Twisted that just so
>    happens to also ship with the core. One of them is likely to do what the
>    prospective user wants, too.
>
> These all sound like excellent goals.
>
> There are also some things I *don't* want to accomplish, at least
> initially:
>
>    - Explain asynchronous programming in depth
>    - Get into the level of detail that the Krondo series does (but I plan
>    to borrow from it!)
>
> There are things I'll *need help with*:
>
>    - The final word on what is/isn't to be used in what context;
>    practical, real-world explanations of why I would use A instead of B (not
>    just "it's more flexible").
>
> You will probably have to press us core developers on this one, and you may
> spark some debates.  These tend to sputter out with no clear resolution as
> everyone is frustrated that nobody's solution (not even their own) is ideal,
> but you would be doing us all a great service if you really forced us to
> develop a consensus about certain things (like "what's the best way to build
> a twisted command-line program", for example) and agree to agree on the
> current documented "best practice" for those things.
>
>
>    - Better documentation from project creators/maintainers/lovers on
>    their project. These projects make a lot of hard stuff trivial and many do
>    not convey that very well. I'll do my best to reorganize and improve the
>    existing documentation, but most of the projects cater to a specific niche
>    that requires its own core knowledge.
>
> The biggest problem with this is that you will find that a very small group
> of people have created the vast majority of this stuff and don't have time
> to maintain it all any more :).  We certainly don't have a separate
> dedicated maintainer for each project (although I really wish we could get
> to that point).
>

I think this right here is the main reason that the docs need to be
improved.  Easier newbie experience translates to more users translates to
more developers translates to more maintainers.  Especially if the
perception of Twisted as a "languishing" or even "mostly dead" project can
be undone. (Yes, I've heard this a number of times.  No, I don't know where
they get it.  I correct it whenever I can. It's something that needs to be
addressed, but that's a different conversation.).  Fixing up the docs will
at least help with this.


> Most of this was discussed with Jean-Paul and Glyph at tonight's Python
> meet-up in Cambridge. Some work has already begun on the new docs here:
>
> https://github.com/tdavis/twisted-docs
>
>
> There have been several abortive efforts to do something grand to re-invent
> all of the Twisted documentation in the universe, or a complete overhaul of
> the website, including several false starts that I've made, and most
> recently the (somewhat arduous, arguably "mostly complete" (fingers crossed
> on that one)) attempt to do a sphinx migration.
>

Seriously man, we're close.  3 more "chunk tickets" in the "edit the lore
source" phase (and one of those is finished I think and just needs to be
merged).  Then another round of "chunk tickets" to manually fix any other
little typographical issues in the Sphinx source, and done.  I suppose there
will also need to be a website deployment process.  And probably lots of
other minor things that we'll discover as we go.

I've had some major speedbumps, had to find a new job, kids were sick
several times, etc.  You know...life.  I'm getting fired up again though,
and thijs seems to be as well, and this coming up now just pumps the
bellows.

By the way, it seemed tonight that you weren't that familiar with the
> existing Sphinx efforts, so you may want to have a look at this and see if
> it is an improvement on our existing documentation index:
>
> http://twistedsphinx.funsize.net/contents.html
>
> (I was going to point you at the output of the buildbot, but it looks like
> something in trunk has broken the conversion process.  Anyone know what this
> is about? <
> http://buildbot.twistedmatrix.com/builds/sphinx-html-15724/contents.html>)
>
> I'm really glad to see that Kevin beat me to the punch on posting his reply
> though, hopefully we'll see this moving along soon :).
>

I was glad to see just about anyone else interested! :)

It looks like Tom and I have some similar ideas on where we should be going,
and I think his Sphinx skeleton is a great example of what things should
eventually look like.  As I said earlier, I've had a number of similar
ideas, though it looks like maybe Tom's are a little more concrete and/or
fleshed-out.  I just really wanted to get the Sphinx convo "out the door",
before I took on another huge project.  I'll elaborate in a separate email.


> Before you continue too much further in that github repository though,
> please, consider this:
>
> ~/Projects/Twisted/trunk/doc$ find conch core mail names pair web words
> -name '*.xhtml' -or -name '*.py' | xargs wc -l
>     .
>     .
>     .
>    28836 total
>
> That's 28 thousand lines of documentation and sample code.  It might not
> all be the best documentation, but some of it is quite good.  Jean-Paul's
> "twisted web in 60 seconds" tutorial is in there, and that's definitely
> worth reading.  Would you volunteer to rewrite 28 thousand lines of code all
> at once?  Or submit a 28 thousand line patch for review?  As problematic as
> the current situation is, there is a definite potential for some baby vs.
> bathwater confusion in improving it.
>
> I am open to the idea that documentation needs different review practices
> from code, and there are things about documentation (like narrative flow)
> which are impossible to automatically verify and may require significant
> changes at multiple layers simultaneously.  These features may not have an
> obvious parallel in code - which can typically be evolved incrementally,
> despite the occasional frustrated lament that everything needs to be
> rewritten.
>
> But, parts of the documentation are code.  Another major problem with the
> current documentation is that it is out of date.  We know when code goes out
> of date because it starts raising exceptions and emitting warnings from our
> test suite, but we only find out about documentation examples are going out
> of date when we do a release and some poor soul encounters an error when
> trying to follow along.  I'd really like any effort that undertakes to
> substantially change the structure of the documentation to make a concerted
> effort to hit the ground running with test-driven examples which can be
> automatically verified, so that we have some idea of the impact of code
> changes on the docs.
>

There's a ticket for writing tests for the code samples in Trac.


> Also, while you're energized now, please consider what happens to our
> documentation efforts if you run out of time or out of motivation halfway
> through this process.  Incremental improvements may not necessarily provide
> the best outcome, but they _do_ mean that users get to see some results from
> these volunteer efforts even if the original volunteer gets busy with other
> aspects of life and can't complete their project.  Many of your
> bullet-points above are well suited to individual efforts (some of which are
> actually issues with the web site, rather than the documentation per se).
>

@Tom: agree here.  Let's get _some_ benefit out of your energy, rather than
you getting discouraged and having half a great set of docs floating out
there someplace confusing users.  I've been through this myself a couple of
times (I've been pretty much ready to "pull the trigger" at least three
times!) and have gotten discouraged and/or off track.  After a while, my
"voom" comes back, but in the meantime, the trunk has progressed, and
there's that much more work to do.  My advice is to try and get many small
changes made, and get them _done_ rather than a few huge changes.


> I'd like to suggest that, at the very least, you create a branch of Twisted
> (perhaps on Launchpad?) and integrate your work into the doc/ hierarchy of
> the current tree.  That way, at least, it would be easier for someone else
> to pick up where you've left off and fold things into the right place.  This
> would also provide a way to more easily integrate the doc test suite into
> the main test suite on our existing build and release infrastructure.
>
> I hope the above came off as optimistic and constructive as I meant it:
> it's not my intention to insult the documentation or those who wrote it. I
> just think with a dose of hindsight and a lot of effort, the docs can be
> awesome. And they would improve the entire Twisted ecosystem along with
> them.
>
>  Indeed, as the author of many of these original documents, I did not feel
insulted in either my person or my work :).  Hopefully you didn't feel that
way either after reading this reply!

>
>
>
I think this has been pretty constructive on both sides.  I look forward to
more.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/6375f545/attachment.html>

From kevin.horn at gmail.com  Thu Jan 20 12:58:40 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 13:58:40 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>
Message-ID: <AANLkTim3crwt7Mfs=Nk8GdXWr9=2amTyTT6Uc-4TNv3M@mail.gmail.com>

I alluded in my earlier mail to some of the improvement ideas I have had
regarding Twisted's docs (other than the conversion to Sphinx), and I though
I'd elaborate

Here's some things I had "planned" (yes, I'm using the term loosely) to try
and add/improve/fix in the Twisted docs after the Sphinx conversion was
finished:
(urg, I know I've been keeping a list of these someplace, and some are in
trac tickets, etc. but I can't find it right now, so I may ramble a bit)

-  Add a basic intro to Twisted.  This would introduce some basic ideas
similar to the krondoblog tutorial, but in less detail.
- "What is Twisted good for"
- Explain the most important parts of Twisted for people to get started
with.  IMO, this is a) the reactor, b) deferreds, c) some of the basic
interfaces/classes, esp. Factories/Protocols
  (I'd like to see some docs on Transports as well)
- more/better UDP stuff
- "How to test your Twisted apps" (e.g., the idea of faking up a transport
never occurred to me until I read a test that did it, and it's been one of
the most useful techniques I've found)
- Task-based docs - how to serve a web page, how to send a mail, how to
write an IRC client (just to cut down on the questions!) etc. The basic
stuff at first (what newbie's will be looking for), maybe eventually turning
into a "cookbook" of sorts.
- A revamped section on "How to write twisted documentation", since that
would likely be very different after the Sphinx conversion ( What Sphinx
markup to use, and I also have some custom extensions, etc. which need to be
documented).
- "How to _build_ the documentation"
- Beginner's tutorial
- better glossary
- move a bunch of stuff out of the Trac wiki, and into the Sphinx project.
There's stuff there that has become de-facto documentation, which really
needs to be version-controlled, etc.
- install docs


So after looking over Tom's "skeleton" Sphinx project and a night's sleep, I
think we're pretty close to on the same page (or at least pages in the same
book).  It looks like a lot of this would be covered in Tom's Task-based
docs and the Base Documentation section ("Suiting Up", "Diving in").

So here's what I'm kind of thinking as far as combining efforts:
1) I'll continue with the "Project Documentation" conversion, while Tom
works on the other bits.  Should be fairly easy to combine them, I'm
thinking.
2) Let's leave the "Project Documentation" pretty much as-is for the moment,
until the Sphinx convo is done.
3) I wonder if at least some of the "task-based docs" shouldn't be put into
the project sections, and then just linked to from the task-based section?

Thoughts, Tom?

[As an aside, is there any way to get the Combinator stuff from the old Trac
wiki back online, or at least readable someplace? (Hrmmm, it looks like
Google's cache has it for the moment).  Also, it would be much easier to get
new contributors, especially for Windows, if Combinator worked out of the
box on Windows.  There's (or were) 3 or 4 patches in the Divmod SVN repo
that needed to be applied in order to get it to work, and now that the
Divmod site is offline it's really hard to set it up on a new machine, even
for me, and I have a working example to go from.  Yeah it's off topic, sue
me.]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/1569f356/attachment.html>

From kevin.horn at gmail.com  Thu Jan 20 15:05:15 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 16:05:15 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
Message-ID: <AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>

On Thu, Jan 20, 2011 at 1:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> (I was going to point you at the output of the buildbot, but it looks like
> something in trunk has broken the conversion process.  Anyone know what this
> is about? <
> http://buildbot.twistedmatrix.com/builds/sphinx-html-15724/contents.html>)
>
>
>
I was going to address this as well.  I've been seeing what are apparently
intermittent problems with the buildbot, though I haven't seen that one
before, since the beginning of the year when I started seriously looking at
this stuff again.

I was able to build the docs properly on the buildbot yesterday, and in fact
couldn't replicate any of the issues I had previously seen (which, in my
case, seem to mostly have to do with missing CSS files). when I was talking
to exarkun about it on IRC yesterday.

I'm not sure whether it has to do with the buildbot configuration, maybe
stuff timing out, network issues, problems in the actual conversion process,
or what.

Ideas welcome.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/355ce4a1/attachment.html>

From exarkun at twistedmatrix.com  Thu Jan 20 15:45:48 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 20 Jan 2011 22:45:48 -0000
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
Message-ID: <20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>

On 10:05 pm, kevin.horn at gmail.com wrote:
>On Thu, Jan 20, 2011 at 1:55 AM, Glyph Lefkowitz 
><glyph at twistedmatrix.com>wrote:
>>
>>(I was going to point you at the output of the buildbot, but it looks 
>>like
>>something in trunk has broken the conversion process.  Anyone know 
>>what this
>>is about? <
>>http://buildbot.twistedmatrix.com/builds/sphinx- 
>>html-15724/contents.html>)
>I was going to address this as well.  I've been seeing what are 
>apparently
>intermittent problems with the buildbot, though I haven't seen that one
>before, since the beginning of the year when I started seriously 
>looking at
>this stuff again.
>
>I was able to build the docs properly on the buildbot yesterday, and in 
>fact
>couldn't replicate any of the issues I had previously seen (which, in 
>my
>case, seem to mostly have to do with missing CSS files). when I was 
>talking
>to exarkun about it on IRC yesterday.
>
>I'm not sure whether it has to do with the buildbot configuration, 
>maybe
>stuff timing out, network issues, problems in the actual conversion 
>process,
>or what.

Does this help?

http://buildbot.twistedmatrix.com/builders/sphinx- 
documentation/builds/123/steps/shell_4/logs/stdio

The salient point perhaps being:

  File 
"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/urllib.py", 
line 347, in open_http
    'got a bad status line', None)
IOError: ('http protocol error', 0, 'got a bad status line', None)

Jean-Paul



From kevin.horn at gmail.com  Thu Jan 20 15:47:19 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 16:47:19 -0600
Subject: [Twisted-Python] Flags with MaildirMailbox
In-Reply-To: <4D331C8F.4010807@goffi.org>
References: <4D31F0B8.1070700@goffi.org>
	<20110116004401.1846.2123046610.divmod.xquotient.4@localhost.localdomain>
	<4D331C8F.4010807@goffi.org>
Message-ID: <AANLkTin-Q20ZNG3zhT686ojyiF88ryE_tMOd+kdPXwXC@mail.gmail.com>

On Sun, Jan 16, 2011 at 10:27 AM, goffi <goffi at goffi.org> wrote:

> On 16/01/2011 01:44, exarkun at twistedmatrix.com wrote:
> >
> > Not planned ("planned" in Twisted usually means "there is a ticket for
> > it").  You're welcome to contribute that functionality, though!  Do you
> > have an idea about how it might fit into the existing code and API?
> >
> > Jean-Paul
> >
> Well not really, but it's a good way to learn :). I'm really (really
> really) busy at the moment, so I probably can't in the next days, but I
> will try to have a look (and maybe turn on IRC/the documentation if I
> need help and review on the coding convention of Twisted).
>
> thanks for the reply :)
>
>
When you get some time to look at it, I'd encourage you to at least file a
ticket, so this issue doesn't get lost.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/7c1a96fb/attachment.html>

From kevin.horn at gmail.com  Thu Jan 20 16:22:55 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 17:22:55 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
Message-ID: <AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>

On Thu, Jan 20, 2011 at 4:45 PM, <exarkun at twistedmatrix.com> wrote:

> On 10:05 pm, kevin.horn at gmail.com wrote:
> >On Thu, Jan 20, 2011 at 1:55 AM, Glyph Lefkowitz
> ><glyph at twistedmatrix.com>wrote:
> >>
> >>(I was going to point you at the output of the buildbot, but it looks
> >>like
> >>something in trunk has broken the conversion process.  Anyone know
> >>what this
> >>is about? <
> >>http://buildbot.twistedmatrix.com/builds/sphinx-
> >>html-15724/contents.html>)
> >I was going to address this as well.  I've been seeing what are
> >apparently
> >intermittent problems with the buildbot, though I haven't seen that one
> >before, since the beginning of the year when I started seriously
> >looking at
> >this stuff again.
> >
> >I was able to build the docs properly on the buildbot yesterday, and in
> >fact
> >couldn't replicate any of the issues I had previously seen (which, in
> >my
> >case, seem to mostly have to do with missing CSS files). when I was
> >talking
> >to exarkun about it on IRC yesterday.
> >
> >I'm not sure whether it has to do with the buildbot configuration,
> >maybe
> >stuff timing out, network issues, problems in the actual conversion
> >process,
> >or what.
>
> Does this help?
>
> http://buildbot.twistedmatrix.com/builders/sphinx-
> documentation/builds/123/steps/shell_4/logs/stdio
>
> The salient point perhaps being:
>
>  File
>
> "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/urllib.py",
> line 347, in open_http
>    'got a bad status line', None)
> IOError: ('http protocol error', 0, 'got a bad status line', None)
>
> Jean-Paul
>
>
Hmmm...yes, I think it does.  It looks like the l2s_builder script is
choking on fetching the DTD for some reason.  lore2sphinx itself is supposed
to cache the DTD between runs, but I'm betting it doesn't work in the
buildbot due to the (hopefully) clean environment it has every time it runs.

I can change it to not care about that, but if I do, then it won't be able
to resolve HTML entities (of which there are a few in the Lore sources,
mostly em-dashes IIRC).  So the XML parsing will choke on those, unless I
tell it to ignore them, in which case it might ignore other errors...etc.

I'll see what I can do to fix it, I haven't worked on that bit for a long
time.  I'll see if possible to add a "pre-cached" DTD file to teh
lore2sphinx repo, and that should fix that problem at least.

Thanks for the research!

(I sometimes forget that buildbot keeps a log of the stdio.  You wouldn't
think that I would, since I use the analogous logs in hudson fairly
frequently, but I do. Sigh.)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/5fb60ad8/attachment.html>

From screwtape at froup.com  Thu Jan 20 16:57:16 2011
From: screwtape at froup.com (Tim Allen)
Date: Fri, 21 Jan 2011 10:57:16 +1100
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
Message-ID: <20110120235716.GS21847@boombah.thristian.org>

On Thu, Jan 20, 2011 at 05:22:55PM -0600, Kevin Horn wrote:
> Hmmm...yes, I think it does.  It looks like the l2s_builder script is
> choking on fetching the DTD for some reason.  lore2sphinx itself is supposed
> to cache the DTD between runs, but I'm betting it doesn't work in the
> buildbot due to the (hopefully) clean environment it has every time it runs.
> 
> I can change it to not care about that, but if I do, then it won't be able
> to resolve HTML entities (of which there are a few in the Lore sources,
> mostly em-dashes IIRC).

You mean these DTDs?

    twisted/lore/xhtml1-strict.dtd
    twisted/lore/xhtml1-transitional.dtd

They reference the xhtml-*.ent entity definitions which are also in the
same directory. It would be neat if lore2sphinx could be taught to use
the DTDs packaged with lore instead of having to download them from the
Internet every time.



From exarkun at twistedmatrix.com  Thu Jan 20 17:06:24 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Jan 2011 00:06:24 -0000
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110120235716.GS21847@boombah.thristian.org>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
Message-ID: <20110121000624.1851.1542548546.divmod.xquotient.4@localhost.localdomain>

On 20 Jan, 11:57 pm, screwtape at froup.com wrote:
>On Thu, Jan 20, 2011 at 05:22:55PM -0600, Kevin Horn wrote:
>>Hmmm...yes, I think it does.  It looks like the l2s_builder script is
>>choking on fetching the DTD for some reason.  lore2sphinx itself is 
>>supposed
>>to cache the DTD between runs, but I'm betting it doesn't work in the
>>buildbot due to the (hopefully) clean environment it has every time it 
>>runs.
>>
>>I can change it to not care about that, but if I do, then it won't be 
>>able
>>to resolve HTML entities (of which there are a few in the Lore 
>>sources,
>>mostly em-dashes IIRC).
>
>You mean these DTDs?
>
>    twisted/lore/xhtml1-strict.dtd
>    twisted/lore/xhtml1-transitional.dtd
>
>They reference the xhtml-*.ent entity definitions which are also in the
>same directory. It would be neat if lore2sphinx could be taught to use
>the DTDs packaged with lore instead of having to download them from the
>Internet every time.

It could even use Lore's parser, twisted.lore.tree.parseFileAndReport ;)

Jean-Paul



From kevin.horn at gmail.com  Thu Jan 20 17:34:17 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 18:34:17 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110120235716.GS21847@boombah.thristian.org>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
Message-ID: <AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>

On Thu, Jan 20, 2011 at 5:57 PM, Tim Allen <screwtape at froup.com> wrote:

> On Thu, Jan 20, 2011 at 05:22:55PM -0600, Kevin Horn wrote:
> > Hmmm...yes, I think it does.  It looks like the l2s_builder script is
> > choking on fetching the DTD for some reason.  lore2sphinx itself is
> supposed
> > to cache the DTD between runs, but I'm betting it doesn't work in the
> > buildbot due to the (hopefully) clean environment it has every time it
> runs.
> >
> > I can change it to not care about that, but if I do, then it won't be
> able
> > to resolve HTML entities (of which there are a few in the Lore sources,
> > mostly em-dashes IIRC).
>
> You mean these DTDs?
>
>    twisted/lore/xhtml1-strict.dtd
>    twisted/lore/xhtml1-transitional.dtd
>
> They reference the xhtml-*.ent entity definitions which are also in the
> same directory. It would be neat if lore2sphinx could be taught to use
> the DTDs packaged with lore instead of having to download them from the
> Internet every time.
>
>
Huh. Never even knew that was there.  It probably could, and the reason it
downloads from the internet was because that's the default way of doing it
in lxml.  I've since figured out how to override that behavior (which is how
the caching works) so maybe that wouldn't even be hard.  The easiest/fastest
fix for the moment though would probably be to pre-populate the cache as I
mentioned before, since IIRC, this would just involve adding the file to my
hg repo.  I'll have to look into it though, it may be just as easy to do it
the other way, though I don't want to depend necessarily on having Twisted's
code available (remember, this is supposed to work on the various divmod
projects, and anything else that uses Lore, too).

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/e258dacd/attachment.html>

From kevin.horn at gmail.com  Thu Jan 20 17:43:01 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 20 Jan 2011 18:43:01 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110121000624.1851.1542548546.divmod.xquotient.4@localhost.localdomain>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<20110121000624.1851.1542548546.divmod.xquotient.4@localhost.localdomain>
Message-ID: <AANLkTikdxoD90GFjGdk-is5ev4xXoOJXV9ewGf6rYT+A@mail.gmail.com>

On Thu, Jan 20, 2011 at 6:06 PM, <exarkun at twistedmatrix.com> wrote:

> On 20 Jan, 11:57 pm, screwtape at froup.com wrote:
> >On Thu, Jan 20, 2011 at 05:22:55PM -0600, Kevin Horn wrote:
> >>Hmmm...yes, I think it does.  It looks like the l2s_builder script is
> >>choking on fetching the DTD for some reason.  lore2sphinx itself is
> >>supposed
> >>to cache the DTD between runs, but I'm betting it doesn't work in the
> >>buildbot due to the (hopefully) clean environment it has every time it
> >>runs.
> >>
> >>I can change it to not care about that, but if I do, then it won't be
> >>able
> >>to resolve HTML entities (of which there are a few in the Lore
> >>sources,
> >>mostly em-dashes IIRC).
> >
> >You mean these DTDs?
> >
> >    twisted/lore/xhtml1-strict.dtd
> >    twisted/lore/xhtml1-transitional.dtd
> >
> >They reference the xhtml-*.ent entity definitions which are also in the
> >same directory. It would be neat if lore2sphinx could be taught to use
> >the DTDs packaged with lore instead of having to download them from the
> >Internet every time.
>
> It could even use Lore's parser, twisted.lore.tree.parseFileAndReport ;)
>
> Jean-Paul
>
>
Yes, but:

- The docs (well, docstrings) aren't very clear about exactly what that
does, or what quirks it might or might not have.
- Is the DOM document it returns a typical XHTML DOM document?  Is there
anything special/different about it since it's a Lore XHTML doc?
- Consider the number of tickets open involving Lore's parser (or at least
there were several when I started this whole business).
- The whole point of this project is to stop using (and by extension
supporting/maintaining) Lore, so it seems kind of backwards to me to depend
on it.
- I'd rather deal with an etree-a-like, than a straight DOM document
(admittedly, personal preference)
- I certainly don't want to rewrite everything at this point ;)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/c4a64784/attachment.html>

From screwtape at froup.com  Thu Jan 20 18:20:01 2011
From: screwtape at froup.com (Tim Allen)
Date: Fri, 21 Jan 2011 12:20:01 +1100
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
Message-ID: <20110121012001.GT21847@boombah.thristian.org>

On Thu, Jan 20, 2011 at 06:34:17PM -0600, Kevin Horn wrote:
> On Thu, Jan 20, 2011 at 5:57 PM, Tim Allen <screwtape at froup.com> wrote:
> > You mean these DTDs?
> >
> >    twisted/lore/xhtml1-strict.dtd
> >    twisted/lore/xhtml1-transitional.dtd
> >
> > They reference the xhtml-*.ent entity definitions which are also in the
> > same directory. It would be neat if lore2sphinx could be taught to use
> > the DTDs packaged with lore instead of having to download them from the
> > Internet every time.
>
> Huh. Never even knew that was there.  It probably could, and the reason it
> downloads from the internet was because that's the default way of doing it
> in lxml.  I've since figured out how to override that behavior (which is how
> the caching works) so maybe that wouldn't even be hard.  The easiest/fastest
> fix for the moment though would probably be to pre-populate the cache as I
> mentioned before, since IIRC, this would just involve adding the file to my
> hg repo.  I'll have to look into it though, it may be just as easy to do it
> the other way, though I don't want to depend necessarily on having Twisted's
> code available (remember, this is supposed to work on the various divmod
> projects, and anything else that uses Lore, too).

Well, you wouldn't necessarily be depending on Twisted, just depending
on Lore - and I imagine any not-Twisted project whose documentation
depends on Lore has already made peace with the idea of depending on
Lore. :)

If it's easier to just copy these well-known DTDs into the lore2sphinx
repository, I guess that's a good plan too - it's not like the W3C is
going to suddenly issue updated XHTML DTDs.



From tom at recursivedream.com  Thu Jan 20 21:20:38 2011
From: tom at recursivedream.com (Tom Davis)
Date: Thu, 20 Jan 2011 23:20:38 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110121012001.GT21847@boombah.thristian.org>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
Message-ID: <AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>

Wow! Okay, so, not being really familiar with the list etiquette combined
with the fact that the topic has digressed a bit, I hope you'll forgive the
non-inline reply here. I want to hit the main points of what everybody said
/ asked, but let it be known that I read all of it!

How can we combine these efforts, or at least keep from working at cross
> purposes?
>
> I see from your link above that you are building your own Sphinx project.
> Perhaps you would be better off working from the results of the Lore2sphinx
> conversion?  Are you modifying existing docs or working from scratch?
>
> Let's get together on this!


Hey Kevin! Glyph and Jean-Paul got me up to speed (somewhat) on the whole
lore2sphinx thing last night—though they were rather unclear as to how close
it is to completion. (which you addressed later in this thread)

I certainly want to combine our efforts as much as possible and I'm not too
worried about working at cross purposes; your main task seems to be
converting the existing documentation while mine is reorganizing, editing,
and standardizing it. I'm sure our paths will start to cross when the lore
conversion is complete and you have a huge Sphinx project ready to be
properly organized and catalogued. My hope is we can then begin the process
of merging the two sides of this coin.

My current plan (which should become a bit more clear throughout this
massive reply) is to start from scratch *but* modify existing documentation
wherever possible. If a piece of documentation fits in a "hole" in the
structure and I can get by with a *mv* and some editing, that's what I'd
like to do—it seems the most pragmatic approach.

So here's what I'm kind of thinking as far as combining efforts:
> 1) I'll continue with the "Project Documentation" conversion, while Tom
> works on the other bits.  Should be fairly easy to combine them, I'm
> thinking.
> 2) Let's leave the "Project Documentation" pretty much as-is for the
> moment, until the Sphinx convo is done.
> 3) I wonder if at least some of the "task-based docs" shouldn't be put into
> the project sections, and then just linked to from the task-based section?


This. Point of fact, (3) is already implemented; that example task simply
links to *projects/web/tasks/serve*. This strikes me as the most logical
layout as the tasks are all specific to a particular project (the only iffy
one being Core which is sort of a few projects plus the foundation)—we just
want to highlight some of them.

On to Glyph's reply...

There are many outstanding documentation branches which are substantial
> improvements, which need to be edited and merged - the trial tutorial among
> them.  It would be great if your efforts could start with getting those
> landed, turning the crank on the process to get our users better
> documentation in the interim, as you survey the existing documentation.


I definitely agree that resolving the low-hanging fruit first is a good
idea. For finishing "docs branch X" to make sense, my personal belief is
that X should:

   - Still be relevant in terms of best practices and simply what's
   available
   - If project documentation, have outstanding issues that a passing
   familiarity with the project [right now] will be sufficient to close them (I
   could spend time learning one project, or the same time improving *all* the
   documentation)
   - Adhere to whatever documentation standards we agree upon, if much is to
   left to do.

I guess my overall opinion here is that, yes, if relatively minor edits can
bring a branch close enough to completion that we can get it out there to
help newcomers *now*, let's do that. If a branch is more of a draft and
requires a good deal of fleshing out (or is simply stale), it's probably
worth nailing down the structure and previously mentioned docs standards
before I just create more work for myself (or others) down the road.

Finally, my biggest hurdle right now is not knowing how to *find* said
branches. I don't see "documentation" as a category in Trac and common
keyword searches didn't show up much for me. I'm sure this is an easy
question to answer, though.

What *should* a newcomer who reads this document know by the end of it?


I'm not sure because I can't see how a practical guide to creating something
so generic really fits in the grand scheme of things. I think if you want to
create a TCP server from scratch you must first create the Universe! In this
case, that means learning how Twisted addresses the *concept* of a server
before ever bothering to write one so generic. My general beef is that many
documents seem to make an attempt to appeal to everybody and in doing so
don't sufficiently help anybody. Maybe I can justify that claim better with
examples of "better" (at least more targeted) documents.

A massive pile of improved documentation would of course be useful, but a
> good start would be a clear statement of requirements and audience.  (As
> well as an enumeration of*different* audiences that different documents
> might serve.)


I completely agree. The updates I made last night (hopefully) address the
issue of different audiences and needs, at least as a beginning stage. What
Jason said about the Python docs is a great parallel: Tutorials, [Project]
Reference, [Core Concepts] Reference. All of these are important and cater
to a different need. I think we're quite on the same page here, though.

(minor nitpick: I really like "event-based" or "event-driven", as you've
> said here: why does <http://docs.recursivedream.com/twisted/> say
> "asynchronous"?


It's inconsistent and I completely agree (and the consensus seems to be)
that event-* is superior.

You will probably have to press us core developers on this one, and you may
> spark some debates. These tend to sputter out with no clear resolution as
> everyone is frustrated that nobody's solution (not even their own) is ideal,
> but you would be doing us all a great service if you really forced us to
> develop a consensus about certain things (like "what's the best way to build
> a twisted command-line program", for example) and agree to agree on the
> current documented "best practice" for those things.


Debates are great! And I fully intend to bitch about the lack of "best ways"
to do certain things—having one clear way to accomplish something is, after
all, a core tenant of Python ;) -- more than that, it's really annoying to
everyone involved (readers, writers, and developers) when there are many
different ways to do something and none of them have very clear use cases or
strengths / weaknesses. Definitely a TODO.

The biggest problem with this is that you will find that a very small group
> of people have created the vast majority of this stuff and don't have time
> to maintain it all any more :).  We certainly don't have a separate
> dedicated maintainer for each project (although I really wish we could get
> to that point).


Kevin touched on this already, but I really think if we make maintaining and
growing a Project something that is both honorable *and* accessible, more
people will want to do it. If you like Python and DNS or SMTP or whatever
the hell else, what has the potential to be a more awesome implementation
than its Twisted one? Let's help people find out for themselves that the
answer is *nothing*. Then they'll want it to be *their* project.

As problematic as the current situation is, there is a definite potential
> for some baby vs. bathwater confusion in improving it... Also, while
> you're energized now, please consider what happens to our documentation
> efforts if you run out of time or out of motivation halfway through this
> process.  Incremental improvements may not necessarily provide the best
> outcome, but they _do_ mean that users get to see some results from these
> volunteer efforts even if the original volunteer gets busy with other
> aspects of life and can't complete their project.


I have no intention of rewriting everything, even if it sounds absurdly
entertaining to make myself learn and write practical examples of every
Twisted project. I am (just) slightly more realistic than that. Having the
Sphinx conversion complete will be a huge help, if for no other reason than
the documentation will be easy to port, edit, and find in the first place.

On the subject of loss of motivation or time, sure. It happens to all of us.
And it's not my intention to keep the repository on GitHub completely
separate and wait until it's perfect to get it to users. Once all the
documentation is under Sphinx, there will be no reason for that. The
existing documentation can be sliced and diced into the newly-minted
structure and then combed over piece by piece. Some of it will likely need
to be thrown out wholesale, but I imagine much of it will live on with minor
edits (and probably new code) at new URLs.

As for Launchpad, etc.—I want to do whatever makes you guys (a) most
comfortable and (b) most likely to contribute. I chose to start the GitHub
project because I know Git well and it allowed me to spend all my time
writing and none of it figuring out something foreign. I don't understand
the link between Twisted Trac and Twisted on Launchpad, so an explanation of
that would be awesome. Provided that, though, how complicated could Bazaar
possibly be? We can leave Twisted's migration to GitHub as task #2 on my
list ;)

I'd really like any effort that undertakes to substantially change the
> structure of the documentation to make a concerted effort to hit the ground
> running with test-driven examples which can be automatically verified, so
> that we have some idea of the impact of code changes on the docs.


Most definitely. Documentation requires the same maintenance that code does
and can benefit from the same automated verification; and it's trivial to
write entire programs and show code samples using *literalinclude* and the *
:lines:* option. Failing code can be fixed and grep'd for realignment in the
documentation.

Indeed, as the author of many of these original documents, I did not feel
> insulted in either my person or my work :).  Hopefully you didn't feel that
> way either after reading this reply!


Not at all!

* * *

I  believe I covered the main thoughts / concerns / queries related to my
original post. My apologies if I missed anybody! And it's great to finally
be working with you :)


Cheers,

Tom


On Thu, Jan 20, 2011 at 8:20 PM, Tim Allen <screwtape at froup.com> wrote:

> On Thu, Jan 20, 2011 at 06:34:17PM -0600, Kevin Horn wrote:
> > On Thu, Jan 20, 2011 at 5:57 PM, Tim Allen <screwtape at froup.com> wrote:
> > > You mean these DTDs?
> > >
> > >    twisted/lore/xhtml1-strict.dtd
> > >    twisted/lore/xhtml1-transitional.dtd
> > >
> > > They reference the xhtml-*.ent entity definitions which are also in the
> > > same directory. It would be neat if lore2sphinx could be taught to use
> > > the DTDs packaged with lore instead of having to download them from the
> > > Internet every time.
> >
> > Huh. Never even knew that was there.  It probably could, and the reason
> it
> > downloads from the internet was because that's the default way of doing
> it
> > in lxml.  I've since figured out how to override that behavior (which is
> how
> > the caching works) so maybe that wouldn't even be hard.  The
> easiest/fastest
> > fix for the moment though would probably be to pre-populate the cache as
> I
> > mentioned before, since IIRC, this would just involve adding the file to
> my
> > hg repo.  I'll have to look into it though, it may be just as easy to do
> it
> > the other way, though I don't want to depend necessarily on having
> Twisted's
> > code available (remember, this is supposed to work on the various divmod
> > projects, and anything else that uses Lore, too).
>
> Well, you wouldn't necessarily be depending on Twisted, just depending
> on Lore - and I imagine any not-Twisted project whose documentation
> depends on Lore has already made peace with the idea of depending on
> Lore. :)
>
> If it's easier to just copy these well-known DTDs into the lore2sphinx
> repository, I guess that's a good plan too - it's not like the W3C is
> going to suddenly issue updated XHTML DTDs.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110120/e33c4d68/attachment.html>

From exarkun at twistedmatrix.com  Fri Jan 21 06:29:34 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Jan 2011 13:29:34 -0000
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
Message-ID: <20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>

On 04:20 am, tom at recursivedream.com wrote:
>Finally, my biggest hurdle right now is not knowing how to *find* said
>branches. I don't see "documentation" as a category in Trac and common
>keyword searches didn't show up much for me. I'm sure this is an easy
>question to answer, though.

http://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&order=priority&col=id&col=summary&col=status&col=type&col=priority&col=milestone&col=component&branch=%21&keywords=~documentation
>As for Launchpad, etc. 14I want to do whatever makes you guys (a) most
>comfortable and (b) most likely to contribute. I chose to start the 
>GitHub
>project because I know Git well and it allowed me to spend all my time
>writing and none of it figuring out something foreign. I don't 
>understand
>the link between Twisted Trac and Twisted on Launchpad, so an 
>explanation of
>that would be awesome. Provided that, though, how complicated could 
>Bazaar
>possibly be? We can leave Twisted's migration to GitHub as task #2 on 
>my
>list ;)

I don't think it makes sense to put anything on Launchpad for now. 
Eventually it needs to go into the canonical Twisted repository, but if 
it's easier to leave it in GitHub for now, that's fine.

Jean-Paul



From glyph at twistedmatrix.com  Fri Jan 21 15:35:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 21 Jan 2011 17:35:18 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>
Message-ID: <C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>


On Jan 21, 2011, at 8:29 AM, exarkun at twistedmatrix.com wrote:

> I don't think it makes sense to put anything on Launchpad for now. 
> Eventually it needs to go into the canonical Twisted repository, but if 
> it's easier to leave it in GitHub for now, that's fine.

The only reason I even suggested Launchpad in the first place was to suggest a place where you could immediately stick a branch of the Twisted tree proper without having commit access, so that you could experiment within that tree.  ('bzr get lp:twisted').  I don't believe we have a mirror on github, but maybe somebody could correct me.

As long as we're all on the same page as far as the eventual target of these docs (i.e. in the Twisted tree, part of some official structure) then please feel free to use whatever tools make that easier for you, your existing github repo included.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110121/2e77a4b6/attachment.html>

From tom at recursivedream.com  Fri Jan 21 16:11:32 2011
From: tom at recursivedream.com (Tom Davis)
Date: Fri, 21 Jan 2011 18:11:32 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>
	<C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>
Message-ID: <AANLkTikBS==2DogNKgUOTeT2zfoz6+mO_XwVyXHgH37Z@mail.gmail.com>

On Fri, Jan 21, 2011 at 5:35 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 21, 2011, at 8:29 AM, exarkun at twistedmatrix.com wrote:
>
> I don't think it makes sense to put anything on Launchpad for now.
> Eventually it needs to go into the canonical Twisted repository, but if
> it's easier to leave it in GitHub for now, that's fine.
>
>
> The only reason I even suggested Launchpad in the first place was to
> suggest a place where you could immediately stick a branch of the Twisted
> tree proper without having commit access, so that you could experiment
> within that tree.  ('bzr get lp:twisted').  I don't believe we have a mirror
> on github, but maybe somebody could correct me.
>
> As long as we're all on the same page as far as the eventual target of
> these docs (i.e. in the Twisted tree, part of some official structure) then
> please feel free to use whatever tools make that easier for you, your
> existing github repo included.
>

We are definitely on the same page. I never wanted the new documentation to
remain separate from Twisted proper. It should be part of the main
repository, build process, etc.


>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110121/6f602009/attachment.html>

From michaelnt at gmail.com  Fri Jan 21 17:10:32 2011
From: michaelnt at gmail.com (Michael Thompson)
Date: Sat, 22 Jan 2011 00:10:32 +0000
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>
	<C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>
Message-ID: <AANLkTinqDdi=-3nPydtraJZrQHOGBqL=J2vQ4STg45N9@mail.gmail.com>

On 21 January 2011 22:35, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>  I don't believe we have a mirror on
> github, but maybe somebody could correct me.

There are 79 repos on github that match the word twisted.

This one claims to be updated every 15 minutes and seems to be pretty
up to date (has a commit from 13 hours ago)

https://github.com/powdahound/twisted

PS Having moved from subversion to Git there is no going back,
especially once you get using rebase to avoid merge commits.



From foom at fuhm.net  Fri Jan 21 17:50:33 2011
From: foom at fuhm.net (James Y Knight)
Date: Fri, 21 Jan 2011 19:50:33 -0500 (EST)
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTinqDdi=-3nPydtraJZrQHOGBqL=J2vQ4STg45N9@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<20110121132934.1851.281038406.divmod.xquotient.11@localhost.localdomain>
	<C0FF2245-A6A4-4739-9376-39B2F94E6796@twistedmatrix.com>
	<AANLkTinqDdi=-3nPydtraJZrQHOGBqL=J2vQ4STg45N9@mail.gmail.com>
Message-ID: <cdbe297753f41fba7c1884a50832678e.squirrel@fuhm.net>

> On 21 January 2011 22:35, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> �I don't believe we have a mirror on
>> github, but maybe somebody could correct me.
>
> There are 79 repos on github that match the word twisted.
>
> This one claims to be updated every 15 minutes and seems to be pretty
> up to date (has a commit from 13 hours ago)
>
> https://github.com/powdahound/twisted

Here's what might pass for an "official" git mirror of Twisted svn:
http://repo.or.cz/w/twisted.git

It seems to have diverged a while back from powdahound's github one, due
to what looks like a bogus commit in powdahound's.

(I do need to go back and redo the "releases" branches/tags at some point
though; they're not being copied at the right level.)

James




From glyph at twistedmatrix.com  Fri Jan 21 18:14:42 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 21 Jan 2011 20:14:42 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>
Message-ID: <664D98DE-ACE1-49D8-A98D-7C55E66F3A3E@twistedmatrix.com>


On Jan 20, 2011, at 1:54 PM, Kevin Horn wrote:

> The biggest problem with this is that you will find that a very small group of people have created the vast majority of this stuff and don't have time to maintain it all any more :).  We certainly don't have a separate dedicated maintainer for each project (although I really wish we could get to that point).
> 
> I think this right here is the main reason that the docs need to be improved.  Easier newbie experience translates to more users translates to more developers translates to more maintainers.  Especially if the perception of Twisted as a "languishing" or even "mostly dead" project can be undone. (Yes, I've heard this a number of times.  No, I don't know where they get it.  I correct it whenever I can. It's something that needs to be addressed, but that's a different conversation.).  Fixing up the docs will at least help with this.

Wow, that is weird.  Maybe in the meanwhile, refer people with this peculiar misconception to <https://www.ohloh.net/p/twisted> - "Large, active development team", "Mature, well-established codebase".

(Also tell them to click "I use this".)

>> Most of this was discussed with Jean-Paul and Glyph at tonight's Python meet-up in Cambridge. Some work has already begun on the new docs here:
>> 
>> https://github.com/tdavis/twisted-docs
> 
> There have been several abortive efforts to do something grand to re-invent all of the Twisted documentation in the universe, or a complete overhaul of the website, including several false starts that I've made, and most recently the (somewhat arduous, arguably "mostly complete" (fingers crossed on that one)) attempt to do a sphinx migration.
> 
> Seriously man, we're close.

So prove me wrong, and get it done! ;-)

> 3 more "chunk tickets" in the "edit the lore source" phase (and one of those is finished I think and just needs to be merged).  Then another round of "chunk tickets" to manually fix any other little typographical issues in the Sphinx source, and done.  I suppose there will also need to be a website deployment process.  And probably lots of other minor things that we'll discover as we go.

I think that the main problem right now is that these "chunk tickets" are too big, and especially with the sphinx builder in this half-working state, nearly impossible to review.  As Jean-Paul were recently discussing, he bit the bullet and plowed through one of these (overlarge) ticket reviews, assuming "how much of a problem could it be, it's just whitespace", and ultimately (after trying his best to examine it closely) gave it a passing review.  And yet, there were still a couple of bugs filed that were introduced by that branch, including things like word being accidentally deleted.

Breaking these up even more into smaller, easier-to-digest fixes, and then having a docs review sprint, should be able to get us over that hump.

> I've had some major speedbumps, had to find a new job, kids were sick several times, etc.  You know...life.

No worries.  That's why we've been taking this conservative approach :).

> I'm getting fired up again though, and thijs seems to be as well, and this coming up now just pumps the bellows.

Yes!  Woo!

> It looks like Tom and I have some similar ideas on where we should be going, and I think his Sphinx skeleton is a great example of what things should eventually look like.  As I said earlier, I've had a number of similar ideas, though it looks like maybe Tom's are a little more concrete and/or fleshed-out.  I just really wanted to get the Sphinx convo "out the door", before I took on another huge project.  I'll elaborate in a separate email.

+1

> There's a ticket for writing tests for the code samples in Trac.

Always good to have a link: http://twistedmatrix.com/trac/ticket/2205

> My advice is to try and get many small changes made, and get them _done_ rather than a few huge changes.

I think I want this to be on my tombstone :).

> I think this has been pretty constructive on both sides.  I look forward to more.

Same here.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110121/a1227ae5/attachment.html>

From glyph at twistedmatrix.com  Fri Jan 21 18:45:04 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 21 Jan 2011 20:45:04 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTikdxoD90GFjGdk-is5ev4xXoOJXV9ewGf6rYT+A@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<20110121000624.1851.1542548546.divmod.xquotient.4@localhost.localdomain>
	<AANLkTikdxoD90GFjGdk-is5ev4xXoOJXV9ewGf6rYT+A@mail.gmail.com>
Message-ID: <F8F62286-08FE-4FEE-8F49-40B9D8E22D48@twistedmatrix.com>


On Jan 20, 2011, at 7:43 PM, Kevin Horn wrote:

> It could even use Lore's parser, twisted.lore.tree.parseFileAndReport ;)
> 
> Jean-Paul
> 
>  
> Yes, but:
> 
> - The docs (well, docstrings) aren't very clear about exactly what that does, or what quirks it might or might not have. 

The source is pretty short, and has some very useful comments:

<http://twistedmatrix.com/trac/browser/trunk/twisted/lore/tree.py#L1021>

It is a thin wrapper around xml.sax.make_parser().parse() which uses a fixed set of DTDs, never downloads them, and remembers the file name and line number of errors so that the exceptions are actually useful to someone editing the XML.

> - Is the DOM document it returns a typical XHTML DOM document?  Is there anything special/different about it since it's a Lore XHTML doc?

Yep, it's plain vanilla XML objects.

> - Consider the number of tickets open involving Lore's parser (or at least there were several when I started this whole business).

This isn't the soupy mess of Lore's tag munging. It's just the thing it uses to get the DOM loaded in the first place.

> - The whole point of this project is to stop using (and by extension supporting/maintaining) Lore, so it seems kind of backwards to me to depend on it.

parseFileAndReport is actually useful enough that I'd like to see it move somewhere else - maybe somewhere in twisted.python, because this is useful knowledge.

> - I'd rather deal with an etree-a-like, than a straight DOM document (admittedly, personal preference)

Isn't there a function to do the conversion somewhere?

> - I certainly don't want to rewrite everything at this point ;)


If you can't use this function, the methods that it calls should be simple enough that you can just crib them :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110121/cb9bf5e2/attachment.html>

From glyph at twistedmatrix.com  Fri Jan 21 19:42:40 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 21 Jan 2011 21:42:40 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTim3crwt7Mfs=Nk8GdXWr9=2amTyTT6Uc-4TNv3M@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTinuU-=x6M7vYCx1-ujFk=adywkQt-=XPmp=pP3s@mail.gmail.com>
	<AANLkTim3crwt7Mfs=Nk8GdXWr9=2amTyTT6Uc-4TNv3M@mail.gmail.com>
Message-ID: <D51198AE-F400-405A-ACFB-8D672F9B03D0@twistedmatrix.com>

I have a lot of input here, but as the guys actually doing the work, the final say is mostly with you and Tom.  So, please feel free to take everything here with a grain of salt.

On Jan 20, 2011, at 2:58 PM, Kevin Horn wrote:

> Here's some things I had "planned" (yes, I'm using the term loosely) to try and add/improve/fix in the Twisted docs after the Sphinx conversion was finished:
> (urg, I know I've been keeping a list of these someplace, and some are in trac tickets, etc. but I can't find it right now, so I may ramble a bit)

Thanks for writing up this list.  I'm re-ordering just a little bit, to start with what I think are the good bits...

> - Task-based docs - how to serve a web page, how to send a mail, how to write an IRC client (just to cut down on the questions!) etc. The basic stuff at first (what newbie's will be looking for), maybe eventually turning into a "cookbook" of sorts.

Yes, yes, yes.  I think everything should be driven from this, as I will repeat many times through this email :).

> - "How to test your Twisted apps" (e.g., the idea of faking up a transport never occurred to me until I read a test that did it, and it's been one of the most useful techniques I've found)

And this is clearly my second priority.

Personally, I really wish there were a tutorial to Twisted itself which were test-driven, rather than separating out "here's how you get started" and "here's how you write your tests".  It may be too much material to present at once, but on the other hand, the trial command-line is very friendly, so that 

> -  Add a basic intro to Twisted.  This would introduce some basic ideas similar to the krondoblog tutorial, but in less detail.

This is where everybody wants to start, but I'd like to play devil's advocate here.  Before anybody tries another grand restart on tutorial / introductory docs (the last one was the now frequently vilified Finger Tutorial), we should ask these questions:

Who wants to read this introduction?
What do they want to learn?
What problem are they actually trying to solve, and how is that going to be furthered by their reading this document?

I think the place to start is really to focus on particular tasks that people want to accomplish, with a pointer to more abstract documentation once they want to learn more about how it's all put together.

Anyway, I'm not going to _completely_ repeat everything I said to Tom at the meetup, but we should take a look at the individual project pages and make them things people want to read, and have tutorials that are focused on each project, since almost everyone who is approaching Twisted as a newbie really wants to get some specific task done, not learn generally about event-driven networking.

> - "What is Twisted good for"

Again: it depends what you want to use it for.  One sprawling page that explains every benefit that Twisted has is really hard to articulate.

> - Explain the most important parts of Twisted for people to get started with.  IMO, this is a) the reactor, b) deferreds, c) some of the basic interfaces/classes, esp. Factories/Protocols
>   (I'd like to see some docs on Transports as well)

... okay I'm totally harping on this now, but:

I think that focusing on the higher-level stuff and getting people running with actual applications should be more of a focus.  There's already a lot of conceptual / introductory material, but it lacks a coherent narrative or clearly-defined audience, and I think that's why it's bad.

In some places this may require some actual code changes.  For example, twisted.names doesn't really have an API to speak of, and while writing a tutorial on how to use it, you're going to bump into that.  That might motivate somebody to go and write the 20 lines of glue which would actually be required to write a dynamic DNS server without subclassing some internal stuff and twiddling undocumented attributes, and that would be great.  (But, lest I get ahead of myself: let's get started on the documentation first; starting off with a bunch of features because "maybe they'll be useful for docs" is an even worse trap to fall into :))

But, I don't think a lot of people are actually developing custom protocols from scratch; and those who are, should probably be using a construction kit like AMP, or PB, or Foolscap, so that they can skip over the tedious and easy-to-get-wrong bits about framing and figuring out a language of how to document messages.

> - more/better UDP stuff

Let's please make this the lowest priority and the last thing that gets done.  I don't think I've ever heard anyone who _actually_ needed to use UDP asking questions about it on IRC or on the mailing list.  If you're using Twisted for DNS (arguably the most common usage of UDP), it's already done for you.  Almost universally, questions about UDP come from people who don't really understand that they should be using TCP because they read on some MMORPG-design forum somewhere that UDP is "faster".

People who already understand the nuances of UDP and know why it's reasonable for movement packets but not for in-game micropayments, for example, might hit a speedbump or two, but they'll get through it pretty easily.  Let's address the audience that really needs the documentation before we start adding it for people whose lives will only get very slightly easier.


> - A revamped section on "How to write twisted documentation", since that would likely be very different after the Sphinx conversion ( What Sphinx markup to use, and I also have some custom extensions, etc. which need to be documented).
> - "How to _build_ the documentation"

Writing this alongside designing the new documentation build process would be a big help :).

(Although really, it should be at most three steps: "install sphinx", "install epydoc", and then "run ./admin/build-twisted-documentation".  If it's more than that then something is probably wrong...)

> - Beginner's tutorial

... again, tutorial for what?

> - better glossary

Wow, do we even have a glossary?  It seems to me this task might be better served by links to the API docs.

> - move a bunch of stuff out of the Trac wiki, and into the Sphinx project.  There's stuff there that has become de-facto documentation, which really needs to be version-controlled, etc.

+1

> - install docs
> 
> 
> So after looking over Tom's "skeleton" Sphinx project and a night's sleep, I think we're pretty close to on the same page (or at least pages in the same book).  It looks like a lot of this would be covered in Tom's Task-based docs and the Base Documentation section ("Suiting Up", "Diving in").

Great.

> So here's what I'm kind of thinking as far as combining efforts:
> 1) I'll continue with the "Project Documentation" conversion, while Tom works on the other bits.  Should be fairly easy to combine them, I'm thinking.

Getting Tim to help out with some conversion stuff (and you helping with some of his stuff, as well) might accelerate the review process, which has been part of the bottleneck.

> 2) Let's leave the "Project Documentation" pretty much as-is for the moment, until the Sphinx convo is done.
> 3) I wonder if at least some of the "task-based docs" shouldn't be put into the project sections, and then just linked to from the task-based section?
> 
> Thoughts, Tom?
> 
> [As an aside, is there any way to get the Combinator stuff from the old Trac wiki back online, or at least readable someplace? (Hrmmm, it looks like Google's cache has it for the moment).  Also, it would be much easier to get new contributors, especially for Windows, if Combinator worked out of the box on Windows.  There's (or were) 3 or 4 patches in the Divmod SVN repo that needed to be applied in order to get it to work, and now that the Divmod site is offline it's really hard to set it up on a new machine, even for me, and I have a working example to go from.  Yeah it's off topic, sue me.]

The divmod migration is underway, but we're all busy (life, etc) so it's going slowly.  I have a bunch of tasks on my plate that are part of that which I haven't gotten to yet.

Kevin & Tom, you guys should probably stay away from that time sink and keep forging ahead with this great documentation effort, but if anyone else would like to help out we're on #divmod; drop by, say hi, and maybe we can come up with something for you to do...

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110121/9cbc8c7c/attachment.html>

From glyph at twistedmatrix.com  Fri Jan 21 20:00:46 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 21 Jan 2011 22:00:46 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
Message-ID: <31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>

On Jan 20, 2011, at 11:20 PM, Tom Davis wrote:

> I definitely agree that resolving the low-hanging fruit first is a good idea. For finishing "docs branch X" to make sense, my personal belief is that X should:
> Still be relevant in terms of best practices and simply what's available
> If project documentation, have outstanding issues that a passing familiarity with the project [right now] will be sufficient to close them (I could spend time learning one project, or the same time improving all the documentation)
> Adhere to whatever documentation standards we agree upon, if much is to left to do.
> I guess my overall opinion here is that, yes, if relatively minor edits can bring a branch close enough to completion that we can get it out there to help newcomers now, let's do that. If a branch is more of a draft and requires a good deal of fleshing out (or is simply stale), it's probably worth nailing down the structure and previously mentioned docs standards before I just create more work for myself (or others) down the road.

If branches that are out there don't meet these standards, commenting on their tickets and getting them deleted or closed as invalid (as appropriate) would be a big help too.  Lots of languishing tickets that nobody knows what to do with is not a good thing, and there's plenty of opportunities for interested parties to reopen tickets, attach new patches, and object in various ways, so you shouldn't be too concerned about stepping on toes.  Focus is a valuable commodity.

Part of my comment about low-hanging fruit was to help you get familiar with and integrated into the development process.  Going through the process of getting patches reviewed and accepted will be _much_ easier if you go through the motions of doing a few trivial things first.  In fact you may want to just pick up a couple of trivial non-docs patches as well, which might help you on documenting the development process :). <bit.ly/easy-twisted-tickets> might help you there.

Mostly, I really don't want you to write a gigantic pile of new documentation and then find, when you're "done", that you missed some nuance of the coding standard, or the patch is too big to be reasonably reviewed, and that now you have three months of additional work to do before it's all really done.  Experience with the process will mitigate that problem significantly.  (And in fact I hope that you don't actually have a gigantic pile of stuff to commit all at once at any point, and can continue this work incrementally as a series of small tickets, but I realize that later on some of the index reorganization stuff may need to be big.  This is mostly just restating what Kevin already said in his message, but it bears repeating.)

> Finally, my biggest hurdle right now is not knowing how to find said branches. I don't see "documentation" as a category in Trac and common keyword searches didn't show up much for me. I'm sure this is an easy question to answer, though.

<http://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&order=priority&col=id&col=summary&col=status&col=owner&col=type&col=priority&col=milestone&keywords=%7Edocumentation>

There is, unfortunately, no "has branch" column in that report, but it will at least give you some data to work with.


> What should a newcomer who reads this document know by the end of it?
> 
> I'm not sure because I can't see how a practical guide to creating something so generic really fits in the grand scheme of things. I think if you want to create a TCP server from scratch you must first create the Universe! In this case, that means learning how Twisted addresses the concept of a server before ever bothering to write one so generic. My general beef is that many documents seem to make an attempt to appeal to everybody and in doing so don't sufficiently help anybody. Maybe I can justify that claim better with examples of "better" (at least more targeted) documents.

I don't think you need a clear definition of "better" for this particular document, if it doesn't really fit into your scheme; I don't mind if it eventually becomes irrelevant.  I just want a clear statement of goals for the documentation _in advance_ of writing that new documentation, so that we can discuss whether it's actually better for the intended audience or whether it's just more suited to a new author's tastes.

> You will probably have to press us core developers on this one, and you may spark some debates. These tend to sputter out with no clear resolution as everyone is frustrated that nobody's solution (not even their own) is ideal, but you would be doing us all a great service if you really forced us to develop a consensus about certain things (like "what's the best way to build a twisted command-line program", for example) and agree to agree on the current documented "best practice" for those things.
> 
> Debates are great!

Debates that reach some kind of conclusion are great :).  Debates that just go in circles until everybody feels crappy about the topic aren't.  So I'm really just asking you to help us make these debates into the great kind.  (The rest of your reply seems to agree with that, I just wanted to be clear.)

> The biggest problem with this is that you will find that a very small group of people have created the vast majority of this stuff and don't have time to maintain it all any more :).  We certainly don't have a separate dedicated maintainer for each project (although I really wish we could get to that point).
> 
> Kevin touched on this already, but I really think if we make maintaining and growing a Project something that is both honorable and accessible, more people will want to do it.

Okay, so, this is really a tangent, but maybe you could let me know what you think of <http://tm.tl/2372>.

> If you like Python and DNS or SMTP or whatever the hell else, what has the potential to be a more awesome implementation than its Twisted one? Let's help people find out for themselves that the answer is nothing. Then they'll want it to be their project.

If you do this, you will be my hero forever.

OK, I'm going to skip the rest of the reply so that I don't write another book-length thing here, and I agree with most of the rest of what you've said.  So get to it!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110121/538fc99e/attachment-0001.html>

From exarkun at twistedmatrix.com  Fri Jan 21 20:24:55 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 22 Jan 2011 03:24:55 -0000
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
Message-ID: <20110122032455.1699.1253536780.divmod.xquotient.4@localhost.localdomain>

On 03:00 am, glyph at twistedmatrix.com wrote:
>>Finally, my biggest hurdle right now is not knowing how to find said 
>>branches. I don't see "documentation" as a category in Trac and common 
>>keyword searches didn't show up much for me. I'm sure this is an easy 
>>question to answer, though.
>
><http://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&order=priority&col=id&col=summary&col=status&col=owner&col=type&col=priority&col=milestone&keywords=%7Edocumentation>
>
>There is, unfortunately, no "has branch" column in that report, but it 
>will at least give you some data to work with.

I gave this better URL a few days ago.  Here's an even better one, that 
does have a branch column (and some other arbitrary things I added):

  <http://bit.ly/i4Zj8U>

Jean-Paul



From tom at recursivedream.com  Sat Jan 22 13:18:12 2011
From: tom at recursivedream.com (Tom Davis)
Date: Sat, 22 Jan 2011 15:18:12 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
Message-ID: <AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>

On Fri, Jan 21, 2011 at 10:00 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

> On Jan 20, 2011, at 11:20 PM, Tom Davis wrote:
>
> I definitely agree that resolving the low-hanging fruit first is a good
> idea. For finishing "docs branch X" to make sense, my personal belief is
> that X should:
>
>    - Still be relevant in terms of best practices and simply what's
>    available
>    - If project documentation, have outstanding issues that a passing
>    familiarity with the project [right now] will be sufficient to close them (I
>    could spend time learning one project, or the same time improving *all* the
>    documentation)
>    - Adhere to whatever documentation standards we agree upon, if much is
>    to left to do.
>
> I guess my overall opinion here is that, yes, if relatively minor edits can
> bring a branch close enough to completion that we can get it out there to
> help newcomers *now*, let's do that. If a branch is more of a draft and
> requires a good deal of fleshing out (or is simply stale), it's probably
> worth nailing down the structure and previously mentioned docs standards
> before I just create more work for myself (or others) down the road.
>
>
> If branches that are out there *don't* meet these standards, commenting on
> their tickets and getting them deleted or closed as invalid (as appropriate)
> would be a big help too.  Lots of languishing tickets that nobody knows what
> to do with is not a good thing, and there's plenty of opportunities for
> interested parties to reopen tickets, attach new patches, and object in
> various ways, so you shouldn't be too concerned about stepping on toes.
>  Focus is a valuable commodity.
>

I was wondering to what extent it would be helpful to actually reply to all
the tickets, or just the ones that seem to have actionable next steps. I
will try to find something to ask or opine on in each of the documentation
tickets so we can get them moving along or removed.

Part of my comment about low-hanging fruit was to help you get familiar with
> and integrated into the development process.  Going through the process of
> getting patches reviewed and accepted will be _much_ easier if you go
> through the motions of doing a few trivial things first.  In fact you may
> want to just pick up a couple of trivial non-docs patches as well, which
> might help you on documenting the development process :). <
> bit.ly/easy-twisted-tickets> might help you there.
>

I will find an easy ticket or few to bang out. I just replied here (
http://twistedmatrix.com/trac/ticket/2491) in an attempt to get started on
one that doesn't already have a long history.

After spending about an hour going over the "easy" tickets, it seems many of
them are in odd states. Either they're done and waiting on something
undefined or there is an incomplete debate in the comments or the owner
disappeared or... well, there are lots of examples. Maybe this is just me
being dense or whatever, but I think (at least as a newcomer) I could
mass-update all these tickets with "Guidance!" and it would more often than
not be a relevant comment given the state of the ticket.

Here's a great example of what I'm talking about (and I apologize for the
mid-message digression, but I think it's relevant...):
http://twistedmatrix.com/trac/ticket/4636. This seems totally trivial, but
five months later __all__ was never changed in t.i.main and JP's buildbot
link is broken. Whether the offending class should be removed from __all__
or imported instead was never even mentioned. Anyway, I took a stab at it
and attached a trivial patch so this isn't just another complaint (and it
looks like JP closed it while I was drafting this email, so that's great!).
But I do agree that working tickets would really help document the process!


> Mostly, I really don't want you to write a gigantic pile of new
> documentation and then find, when you're "done", that you missed some nuance
> of the coding standard, or the patch is too big to be reasonably reviewed,
> and that now you have three months of additional work to do before it's all
> *really* done.  Experience with the process will mitigate that problem
> significantly.  (And in fact I hope that you don't actually have a gigantic
> pile of stuff to commit all at once at any point, and can continue this work
> incrementally as a series of small tickets, but I realize that later on some
> of the index reorganization stuff may need to be big.  This is mostly just
> restating what Kevin already said in his message, but it bears repeating.)
>

The more I think about this, the more I agree with you. My initial
inclination was just to start from scratch and move over existing docs that
I found I could use. This doesn't conflict with the reuse I've been
supportive of (and for good reason: there's a lot of decent documentation
already there) but it does conflict with the Twisted development policies.

At the end of the day, I can't really submit patches to existing
documentation until said documentation is in Sphinx form. I guess one way
this could work to the happiness of all involved is:

   1. Get re-org nailed down; basic samples for whatever pages I think
   should have standardized format / elements.
   2. Mixed in here, find existing docs and non-docs tickets to work on
   trunk.
   3. When the re-org structure is ready, create a new branch from whatever
   the current Sphinx conversion branch is (hopefully it'll be "done" at this
   point)
   4. Migrate new structure to branch, moving the existing docs to
   semi-logical-but-possibly-temporary places in the new structure.
   5. Submit tickets / patches against existing documentation in said branch
   to move docs to new(er) locations, submit new TDD-style code samples,
   general edits, new docs, etc.
   6. When everything is complete, submit a final ticket to merge to trunk

Does that make sense or am I still cognitively off the mark in terms of
existing development practices?


> Finally, my biggest hurdle right now is not knowing how to *find* said
> branches. I don't see "documentation" as a category in Trac and common
> keyword searches didn't show up much for me. I'm sure this is an easy
> question to answer, though.
>
>
> <
> http://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&order=priority&col=id&col=summary&col=status&col=owner&col=type&col=priority&col=milestone&keywords=%7Edocumentation
> >
>
> There is, unfortunately, no "has branch" column in that report, but it will
> at least give you some data to work with.
>
>
>  What *should* a newcomer who reads this document know by the end of it?
>
>
> I'm not sure because I can't see how a practical guide to creating
> something so generic really fits in the grand scheme of things. I think if
> you want to create a TCP server from scratch you must first create the
> Universe! In this case, that means learning how Twisted addresses the *
> concept* of a server before ever bothering to write one so generic. My
> general beef is that many documents seem to make an attempt to appeal to
> everybody and in doing so don't sufficiently help anybody. Maybe I can
> justify that claim better with examples of "better" (at least more targeted)
> documents.
>
>
> I don't think you need a clear definition of "better" for this particular
> document, if it doesn't really fit into your scheme; I don't mind if it
> eventually becomes irrelevant.  I just want a clear statement of goals for
> the documentation _in advance_ of writing that new documentation, so that we
> can discuss whether it's actually better for the intended audience or
> whether it's just more suited to a new author's tastes.
>

I will be fleshing out those goals more in the coming days, but some of it
is implicit within the new documentation structure that's already in my
repo. As for a statement of goals when replacing/removing specific
documentation, sure, I can do that as necessary. It's impossible to
completely remove the element of taste but I will certainly avoid the
"because I like this better" argument for making changes.


>
> You will probably have to press us core developers on this one, and you may
>> spark some debates. These tend to sputter out with no clear resolution as
>> everyone is frustrated that nobody's solution (not even their own) is ideal,
>> but you would be doing us all a great service if you really forced us to
>> develop a consensus about certain things (like "what's the best way to build
>> a twisted command-line program", for example) and agree to agree on the
>> current documented "best practice" for those things.
>
>
> Debates are great!
>
>
> Debates *that reach some kind of conclusion* are great :).  Debates that
> just go in circles until everybody feels crappy about the topic aren't.  So
> I'm really just asking you to help us make these debates into the great
> kind.  (The rest of your reply seems to agree with that, I just wanted to be
> clear.)
>

Yeah, as I've already mentioned in this reply, the "limbo syndrome" of many
tickets drives me nuts. I'm sure you guys hate it too, but having somebody
new around who isn't afraid to ruffle some feathers for the greater good and
isn't yet at some "acceptance" level with it should be helpful! That being
said, I will do my best not to be a jerk about it; you guys have been doing
this for much, much longer and I respect that.


>
> The biggest problem with this is that you will find that a very small group
>> of people have created the vast majority of this stuff and don't have time
>> to maintain it all any more :).  We certainly don't have a separate
>> dedicated maintainer for each project (although I really wish we could get
>> to that point).
>
>
> Kevin touched on this already, but I really think if we make maintaining
> and growing a Project something that is both honorable *and* accessible,
> more people will want to do it.
>
>
> Okay, so, this is really a tangent, but maybe you could let me know what
> you think of <http://tm.tl/2372>.
>

Commented in ticket.


>
> If you like Python and DNS or SMTP or whatever the hell else, what has the
> potential to be a more awesome implementation than its Twisted one? Let's
> help people find out for themselves that the answer is *nothing*. Then
> they'll want it to be *their* project.
>
>
> If you do this, you will be my hero forever.
>

Twisted is a naturally-superior Python choice for most supported protocols
by virtue of the fact that most network "stuff" benefits from event-based
solutions. Like, find me a Python DNS server that *isn't* implemented in
Twisted. People have these weird misconceptions about Twisted; it's really
hard to grasp, ugly, unmaintained, etc. Ultimately, I want to correct these
misconceptions, have *twisted.names* show up first on Google for "Python DNS
Server", and all the other shit that really should be the case but isn't.
Resolving these issues should ultimately resolve the problem of maintainers,
community involvement, etc.

I can't promise that in the course of this crusade I won't cause grief by
trying to change things, but I will always strive to have a rational reason
for wanting to do so!


>
> OK, I'm going to skip the rest of the reply so that I don't write another
> book-length thing here, and I agree with most of the rest of what you've
> said.  So get to it!
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110122/2c08432c/attachment.html>

From tom at recursivedream.com  Sat Jan 22 15:14:55 2011
From: tom at recursivedream.com (Tom Davis)
Date: Sat, 22 Jan 2011 17:14:55 -0500
Subject: [Twisted-Python] Fingering Finger
Message-ID: <AANLkTi=JU2S3eJcn9u=dPq_q_S8=zk=gDgo-SuZGo7pe@mail.gmail.com>

In this thread, I hope to find a resolution to the issue of the Finger
tutorial and efforts to sufficiently improve it or remove it.

In the course of reviewing documentation-related tickets, I stumbled upon
#1148 (http://twistedmatrix.com/trac/ticket/1148). Therein, Glyph first(?)
put down a lot of things we've been discussing and agreeing upon in the
Refactoring Documentation thread. One of the issues still up for debate is
whether or not the Finger tutorial is sufficiently strong to survive the
documentation overhaul. There are various points against it right now:

   - It isn't tested or even test*able*
   - It doesn't cover "best practices" as they relate to writing testable,
   maintainable code, etc.
   - It attempts to implement basically every main Twisted concept, often in
   contrived or poorly-executed ways
   - It has been said it has, "...at best, the potential for mediocrity."

There are also enough tickets related to refactoring / rewriting it that a
resolution would make a significant dent in the list of stale documentation
tickets. Among these two year-old tickets are:

   - http://twistedmatrix.com/trac/ticket/532 - Big jump from finger18.py to
   finger19.py in tutorial
   - http://twistedmatrix.com/trac/ticket/626 - Split tutorial finger code
   into libraries
   - http://twistedmatrix.com/trac/ticket/2205 - Documentation codelistings
   need updating and tests

This shouldn't be a blocker on anything Kevin and I are doing, but it'd be
nice to concurrently have discussions on issues we'll need to address later.
I'm also pretty anal about ticket lists and if these aren't going anywhere
I'd love to close them ;)


Cheers,

Tom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110122/fc67cab4/attachment.html>

From glyph at twistedmatrix.com  Sat Jan 22 20:02:17 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 22 Jan 2011 22:02:17 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
	<AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>
Message-ID: <C14C24AD-1F27-4745-942A-4DD4853632E5@twistedmatrix.com>


On Jan 22, 2011, at 3:18 PM, Tom Davis wrote:

> On Fri, Jan 21, 2011 at 10:00 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> On Jan 20, 2011, at 11:20 PM, Tom Davis wrote:
> 
> If branches that are out there don't meet these standards, commenting on their tickets and getting them deleted or closed as invalid (as appropriate) would be a big help too.  Lots of languishing tickets that nobody knows what to do with is not a good thing, and there's plenty of opportunities for interested parties to reopen tickets, attach new patches, and object in various ways, so you shouldn't be too concerned about stepping on toes.  Focus is a valuable commodity.
> 
> I was wondering to what extent it would be helpful to actually reply to all the tickets, or just the ones that seem to have actionable next steps. I will try to find something to ask or opine on in each of the documentation tickets so we can get them moving along or removed.

Getting rid of dead tickets is almost as important as actually getting valid tickets moved along.  I think this effort will be hugely valuable.

> Part of my comment about low-hanging fruit was to help you get familiar with and integrated into the development process.  Going through the process of getting patches reviewed and accepted will be _much_ easier if you go through the motions of doing a few trivial things first.  In fact you may want to just pick up a couple of trivial non-docs patches as well, which might help you on documenting the development process :). <bit.ly/easy-twisted-tickets> might help you there.
> 
> I will find an easy ticket or few to bang out. I just replied here (http://twistedmatrix.com/trac/ticket/2491) in an attempt to get started on one that doesn't already have a long history.
> 
> After spending about an hour going over the "easy" tickets, it seems many of them are in odd states. Either they're done and waiting on something undefined or there is an incomplete debate in the comments or the owner disappeared or... well, there are lots of examples. Maybe this is just me being dense or whatever, but I think (at least as a newcomer) I could mass-update all these tickets with "Guidance!" and it would more often than not be a relevant comment given the state of the ticket.

No, this is not you being dense.  At least among the core developers in Boston, this is a widely-recognized and frequently-complained-about problem, and it's something I'd like everyone doing ticket reviews to please think about.

Reviewers: if you make a comment on a ticket, but you don't say what you want to happen next, then you have effectively killed progress on that ticket until some other reviewer comes along and contradicts you to get things moving again.  This is especially true if you make one trivial comment on the ticket and remove the review keyword, but don't say "please address these issues and then merge" or "please address these issues and then resubmit for review".  If you've done a partial review, and made a comment like "I don't like this aspect of the design" or "please update copyright dates" or "your docstring formatting is wrong", please note in your comment that this is not a complete review, and don't remove the review keyword.  Removing the keyword will introduce additional latency for the contributor, when other reviewers might still come along and attach more comprehensive feedback.  There are few things more discouraging than having one free weekend every six months to work on a ticket, and to come back every time to "oops, you forgot to update the copyright date and insert a blank line in one file of your 300-line patch".

So, Tom: mass updating those tickets wouldn't be helpful, but an update every couple of days with a specific question on one of these I-don't-know-what-to-do tickets would be great.  Your question on tm.tl/2491 was a definite step forward.

> Here's a great example of what I'm talking about (and I apologize for the mid-message digression, but I think it's relevant...): http://twistedmatrix.com/trac/ticket/4636. This seems totally trivial, but five months later __all__ was never changed in t.i.main and JP's buildbot link is broken. Whether the offending class should be removed from __all__ or imported instead was never even mentioned. Anyway, I took a stab at it and attached a trivial patch so this isn't just another complaint (and it looks like JP closed it while I was drafting this email, so that's great!). But I do agree that working tickets would really help document the process!

As you have discovered here, drawing attention to a ticket in this "stuck" state will often cause it to get un-stuck.  So please keep doing that.

> Mostly, I really don't want you to write a gigantic pile of new documentation and then find, when you're "done", that you missed some nuance of the coding standard, or the patch is too big to be reasonably reviewed, and that now you have three months of additional work to do before it's all really done.  Experience with the process will mitigate that problem significantly.  (And in fact I hope that you don't actually have a gigantic pile of stuff to commit all at once at any point, and can continue this work incrementally as a series of small tickets, but I realize that later on some of the index reorganization stuff may need to be big.  This is mostly just restating what Kevin already said in his message, but it bears repeating.)
> 
> The more I think about this, the more I agree with you. My initial inclination was just to start from scratch and move over existing docs that I found I could use. This doesn't conflict with the reuse I've been supportive of (and for good reason: there's a lot of decent documentation already there) but it does conflict with the Twisted development policies.
> 
> At the end of the day, I can't really submit patches to existing documentation until said documentation is in Sphinx form.

Aaaaaaaauuuuugh.

When you say this, the first thing I think is "okay then, the sphinx migration is now introducing roadblocks into the documentation process and preventing people from contributing documentation, so let's just cancel it".  So please don't say things like this :).  The whole reason that we insisted on the current process for the sphinx migration was to avoid this kind of blockage.

You can submit documentation patches right now, in Lore format - which, I would like to remind you, is 99% plain-vanilla HTML and very easy to edit - and get them accepted.  You can see on the sphinx buildbot (once a few minor issues are fixed, as discussed earlier in this thread) what those changes will look like once converted to ReST->Sphinx.  Or you can simply run the conversion yourself locally - hopefully Kevin will chime in on how to set that up so I don't need to look it up :).  As long as you aren't trying to do anything fancy with diagrams or tables (and most of the documentation really should not need elaborate diagrams or tables), you shouldn't run into any issues.

Heck, if you want to write your documentation patches as ReST snippets and attach them to tickets, I'm sure you will find many willing contributors (myself included) who will jump in and do the format-munging manually to get them integrated into exiting lore documents so that they can make it to trunk immediately.

Or, you can just jump in with ticket reviews, or breaking up chunk tickets, to move along the Sphinx migration quicker.  But "I will work over here in a corner until somehow this gigantic pile of work gets finished by somebody else" is not a good strategy.  (I'm not saying that that's exactly what you're proposing to do, but the aspects of what your proposing which align with that may not be the best way to proceed.)

> I guess one way this could work to the happiness of all involved is:
> Get re-org nailed down; basic samples for whatever pages I think should have standardized format / elements.
> Mixed in here, find existing docs and non-docs tickets to work on trunk.
> When the re-org structure is ready, create a new branch from whatever the current Sphinx conversion branch is (hopefully it'll be "done" at this point)
> Migrate new structure to branch, moving the existing docs to semi-logical-but-possibly-temporary places in the new structure.
> Submit tickets / patches against existing documentation in said branch to move docs to new(er) locations, submit new TDD-style code samples, general edits, new docs, etc.
> When everything is complete, submit a final ticket to merge to trunk
> Does that make sense or am I still cognitively off the mark in terms of existing development practices?

With the caveat of what I said above, most of these things sound like generally good things to do.  Except, first, I'd still like to see a ticket for what "the re-org" is actually going to be and what the point of it is.  If I've only learned one thing in maintaining Twisted for 10 years, it's that a description of what we are trying to do separate from how we are going to do it early on is essential to make sure that others can give you useful feedback - and, more importantly, provide you with resources.  In this case, those resources would be pointers to other areas in the documentation that you may not have noticed which already do some of what you are trying to do, but may be poorly integrated.

> I will be fleshing out those goals more in the coming days, but some of it is implicit within the new documentation structure that's already in my repo.

$ python -c 'import this' | grep Explicit # :-)

> As for a statement of goals when replacing/removing specific documentation, sure, I can do that as necessary. It's impossible to completely remove the element of taste but I will certainly avoid the "because I like this better" argument for making changes.

Again, this is more about having a good statement of purpose up front, so that everyone is focused on the same thing, than having an argument that you can trot out later once everyone starts nitpicking from a hundred different perspectives :).  Plus, such a statement of purpose can serve as a focus for you as well.

>> You will probably have to press us core developers on this one, and you may spark some debates. These tend to sputter out with no clear resolution as everyone is frustrated that nobody's solution (not even their own) is ideal, but you would be doing us all a great service if you really forced us to develop a consensus about certain things (like "what's the best way to build a twisted command-line program", for example) and agree to agree on the current documented "best practice" for those things.
>> 
>> Debates are great!
> 
> Debates that reach some kind of conclusion are great :).  Debates that just go in circles until everybody feels crappy about the topic aren't.  So I'm really just asking you to help us make these debates into the great kind.  (The rest of your reply seems to agree with that, I just wanted to be clear.)
> 
> Yeah, as I've already mentioned in this reply, the "limbo syndrome" of many tickets drives me nuts. I'm sure you guys hate it too, but having somebody new around who isn't afraid to ruffle some feathers for the greater good and isn't yet at some "acceptance" level with it should be helpful! That being said, I will do my best not to be a jerk about it; you guys have been doing this for much, much longer and I respect that.

Tickets in limbo need to be eliminated.  I think you will find that just about everyone is happy to pick up these discussions with an injection of a little bit of attention and energy from a contributor.  We all know that these sap the will of new contributors and thereby decrease the overall pool of available time, so I think you may have to try really, really hard to actually ruffle any feathers :).

>> If you like Python and DNS or SMTP or whatever the hell else, what has the potential to be a more awesome implementation than its Twisted one? Let's help people find out for themselves that the answer is nothing. Then they'll want it to be their project.
> 
> If you do this, you will be my hero forever.
> 
> Twisted is a naturally-superior Python choice for most supported protocols by virtue of the fact that most network "stuff" benefits from event-based solutions. Like, find me a Python DNS server that isn't implemented in Twisted. People have these weird misconceptions about Twisted; it's really hard to grasp, ugly, unmaintained, etc. Ultimately, I want to correct these misconceptions, have twisted.names show up first on Google for "Python DNS Server", and all the other shit that really should be the case but isn't. Resolving these issues should ultimately resolve the problem of maintainers, community involvement, etc.

+10000.

> I can't promise that in the course of this crusade I won't cause grief by trying to change things, but I will always strive to have a rational reason for wanting to do so!

Please keep the grief coming!  It'll all be worth it, I'm sure :).  Everything that you've said so far that I disagree with has just been an opportunity to communicate some of the Twisted development philosophy which may not yet be written down - and should probably be part of the documentation eventually.  So you have yet to do anything which has put me out even in the slightest.  We need more new contributors feeling comfortable being bold and trying to Just Do It.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110122/c66fbdda/attachment.html>

From exarkun at twistedmatrix.com  Sat Jan 22 22:05:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 Jan 2011 05:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1295759123.21.1931674779@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110123/e14ac7ef/attachment.html>

From tom at recursivedream.com  Sat Jan 22 22:36:35 2011
From: tom at recursivedream.com (Tom Davis)
Date: Sun, 23 Jan 2011 00:36:35 -0500
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <1295759123.21.1931674779@twistedmatrix.com>
References: <1295759123.21.1931674779@twistedmatrix.com>
Message-ID: <AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>

>
> Mean open ticket age: 1032 days

Mean time between ticket creation and ticket resolution: 238 days

Mean time spent in review: 83 days


Wow. Adding "reduce these by at least one order of magnitude" to my todo
list. Gotta have goals!

On Sun, Jan 23, 2011 at 12:05 AM, <exarkun at twistedmatrix.com> wrote:

>  Bug summary
> ______________________
> Summary for 2011-01-16 through 2011-01-23
>                   Opened     Closed      Total     Change
> Enhancements:          3          6        690         -3
> Defects:               6          8        547         -2
> Tasks:                 2          7         65         -5
> Regressions:           0          1          1         -1
> Total:                11         22       1303        -11
>
> |== Type Changes   |== Priority Changes   |== Component Changes
> |Defect:       -2  |High:    +1           |Conch:               -1
> |Enhancement:  -3  |Normal:  -4           |Core:                -3
> |Regression:   -1  |Low:     -5           |Mail:                -3
> |Task:         -5  |Lowest:  -3           |Release Management:  -1
>                                           |Trial:               +0
>                                           |Web:                 -1
>                                           |Words:               -2
>
>
> Total TicketsOpen Tickets
>
>
> New / Reopened Bugs
> ______________________
>                     ===== High =====
> [#4810] XMPPClientFactory eating away "subscribe" stanzas. (opened by magicblaze)
>     defect          words      http://twistedmatrix.com/trac/ticket/4810
>
>                     ===== Normal =====
> [#4809] usage.Options should handle error messages in a consistent and user-friendly way (opened by tpratt)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4809
>
> [#4811] @unittest.expectedFailure decorator breaks trial (opened by ivank)
>     defect          trial      http://twistedmatrix.com/trac/ticket/4811
>
> [#4813] provide permissions accessor for filepath (opened by cyli)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4813
>
> [#4814] HTTPClient doesn't handle servers that use \n separators instead of \r\n (opened by jasonjwwilliams) (CLOSED, duplicate)
>     defect          web        http://twistedmatrix.com/trac/ticket/4814
>
> [#4816] twistd --uid without --gid breaks (opened by thobbs) (CLOSED, duplicate)
>     defect          core       http://twistedmatrix.com/trac/ticket/4816
>
> [#4817] IPv4Address and UNIXAddress not-equal comparison is broken (opened by ivank)
>     defect          core       http://twistedmatrix.com/trac/ticket/4817
>
> [#4818] Determine standard structure of Howtos or "Tasks" (opened by binjured)
>     task            core       http://twistedmatrix.com/trac/ticket/4818
>
> [#4712] Missing bits of statinfo accessors in FilePath (opened by cyli) (CLOSED, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4712
>
>                     ===== Low =====
> [#3372] deprecate --extra option to trial (opened by exarkun) (CLOSED, fixed)
>     task            trial      http://twistedmatrix.com/trac/ticket/3372
>
>
>
> Closed Bugs
> ______________________
>                     ===== Normal =====
> [#4054] Delete all of the out-of-date mumbo jumbo from the "im" howto (opened by exarkun, closed by thijs, fixed)
>     defect          words      http://twistedmatrix.com/trac/ticket/4054
>
> [#4773] The core howto index should link to the endpoints howto (opened by exarkun, closed by cyli, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4773
>
> [#4738] ckeygen man page has wrong summary and synopsis (opened by exarkun, closed by cyli, fixed)
>     defect          conch      http://twistedmatrix.com/trac/ticket/4738
>
> [#4740] Use strcred for `twistd mail` authentication options (opened by exarkun, closed by cyli, fixed)
>     enhancement     mail       http://twistedmatrix.com/trac/ticket/4740
>
> [#4712] Missing bits of statinfo accessors in FilePath (opened by cyli, closed by cyli, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4712
>
> [#4786] twcgi duplicate header (opened by lvh, closed by tenth, fixed)
>     regression      web        http://twistedmatrix.com/trac/ticket/4786
>
> [#4042] [Documentation] It is too hard to figure out how to do trivial common-case sending email with twisted.mail (opened by arkanes, closed by thijs, fixed)
>     task            mail       http://twistedmatrix.com/trac/ticket/4042
>
> [#3412] Include link to IMAP Server Tester in Twisted IMAP documentation (opened by biny, closed by thijs, wontfix)
>     task            mail       http://twistedmatrix.com/trac/ticket/3412
>
> [#4491] Release Twisted 10.0.1 (opened by exarkun, closed by thijs, invalid)
>     task            release management http://twistedmatrix.com/trac/ticket/4491
>
> [#4814] HTTPClient doesn't handle servers that use \n separators instead of \r\n (opened by jasonjwwilliams, closed by exarkun, duplicate)
>     defect          web        http://twistedmatrix.com/trac/ticket/4814
>
> [#4816] twistd --uid without --gid breaks (opened by thobbs, closed by exarkun, duplicate)
>     defect          core       http://twistedmatrix.com/trac/ticket/4816
>
>                     ===== Low =====
> [#3372] deprecate --extra option to trial (opened by exarkun, closed by cyli, fixed)
>     task            trial      http://twistedmatrix.com/trac/ticket/3372
>
> [#4363] Remove twisted.words.protocols.toc (opened by amacleod, closed by thijs, fixed)
>     task            words      http://twistedmatrix.com/trac/ticket/4363
>
> [#4007] Remove doc/words/examples/aimbot.py (opened by ivank, closed by thijs, fixed)
>     defect          words      http://twistedmatrix.com/trac/ticket/4007
>
> [#2666] twisted-dev.el should provide a custom variable to specify its tbformat (opened by exarkun, closed by thijs, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/2666
>
> [#4636] wrong __all__ in twisted/internet/main.py (opened by ivank, closed by exarkun, fixed)
>     defect          core       http://twistedmatrix.com/trac/ticket/4636
>
>                     ===== Lowest =====
> [#4547] Remove deprecated twisted.protocols.loopback.loopback (opened by thijs, closed by cyli, fixed)
>     task            core       http://twistedmatrix.com/trac/ticket/4547
>
> [#3375] startService/stopService should cancel pending callLater for clarity in the finger tutorial (opened by helo, closed by thijs, fixed)
>     defect          core       http://twistedmatrix.com/trac/ticket/3375
>
> [#4717] class vs base attribute confusion in finger tutorial (opened by lvh, closed by thijs, fixed)
>     enhancement     core       http://twistedmatrix.com/trac/ticket/4717
>
>
>
> Ticket Lifetime Stats
> ______________________
> Oldest open ticket - [#50] conch command-line client doesn't work in win32 (since 2003-07-12 16:41:06).
> Newest open ticket - [#4818] Determine standard structure of Howtos or "Tasks" (since 2011-01-22 15:36:58).
>
> Mean open ticket age: 1032 days, 6:34:23.539382.
> Median: 965 days, 23:49:51.394333.
> Standard deviation: 697 days, 6:45:54.312442.
> Interquartile range: 1084 days, 15:28:56.
>
> Mean time between ticket creation and ticket resolution: 238 days, 19:54:23.997105.
> Median: 29 days, 18:24:11.
> Standard deviation is 415 days, 7:27:08.062785.
> The interquartile range is 272 days, 22:58:16.
>
> Mean time spent in review: 83 days, 19:31:18.920363.
> Median: 4 days, 7:37:17.
> Standard deviation: 319 days, 8:37:49.421051.
> Interquartile range: 15 days, 20:47:12.
>
> Mean number of times a ticket is reviewed: 1.98357548958.
> Median: 1
> Standard deviation: 1.6116233214.
> Interquartile range: 1.
>
>
> Contributor Stats
> ______________________
> In the last 4 weeks,
>     21 unique ticket reporters
>     9 unique ticket reviewers
>     5 unique ticket resolvers
> In the last 24 weeks,
>     79 unique ticket reporters
>     14 unique ticket reviewers
>     13 unique ticket resolvers
> In the last 48 weeks,
>     168 unique ticket reporters
>     39 unique ticket reviewers
>     23 unique ticket resolvers
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110123/a6c2548b/attachment.html>

From glyph at twistedmatrix.com  Sat Jan 22 22:44:53 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 00:44:53 -0500
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>
References: <1295759123.21.1931674779@twistedmatrix.com>
	<AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>
Message-ID: <173CCAE4-22D7-4B0F-847F-7DFB418F0BDC@twistedmatrix.com>


On Jan 23, 2011, at 12:36 AM, Tom Davis wrote:

> Mean open ticket age: 1032 days
> Mean time between ticket creation and ticket resolution: 238 days 
> Mean time spent in review: 83 days 
>  
> Wow. Adding "reduce these by at least one order of magnitude" to my todo list. Gotta have goals!

Dude, you totally buried the lead.

> On Sun, Jan 23, 2011 at 12:05 AM, <exarkun at twistedmatrix.com> wrote:
> Bug summary
> ______________________
> Summary for 2011-01-16 through 2011-01-23
>                   Opened     Closed      Total     Change
> Enhancements:          3          6        690         -3
> Defects:               6          8        547         -2
> Tasks:                 2          7         65         -5
> Regressions:           0          1          1         -1
> Total:                11         22       1303        -11

This is the real story.  Great work everybody!  -11 is a pretty significant week!  (Now let's please do that continuously for 3 years...)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110123/626463e5/attachment.html>

From tom at recursivedream.com  Sat Jan 22 22:55:10 2011
From: tom at recursivedream.com (Tom Davis)
Date: Sun, 23 Jan 2011 00:55:10 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <C14C24AD-1F27-4745-942A-4DD4853632E5@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
	<AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>
	<C14C24AD-1F27-4745-942A-4DD4853632E5@twistedmatrix.com>
Message-ID: <AANLkTi=qcmf9TocwHspEoQy9Mj0zPKmdmit-F8Pq+iXV@mail.gmail.com>

On Sat, Jan 22, 2011 at 10:02 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

>
> On Jan 22, 2011, at 3:18 PM, Tom Davis wrote:
>
> On Fri, Jan 21, 2011 at 10:00 PM, Glyph Lefkowitz <glyph at twistedmatrix.com
> > wrote:
>
>> On Jan 20, 2011, at 11:20 PM, Tom Davis wrote:
>>
>> If branches that are out there *don't* meet these standards, commenting
>> on their tickets and getting them deleted or closed as invalid (as
>> appropriate) would be a big help too.  Lots of languishing tickets that
>> nobody knows what to do with is not a good thing, and there's plenty of
>> opportunities for interested parties to reopen tickets, attach new patches,
>> and object in various ways, so you shouldn't be too concerned about stepping
>> on toes.  Focus is a valuable commodity.
>>
>
> I was wondering to what extent it would be helpful to actually reply to all
> the tickets, or just the ones that seem to have actionable next steps. I
> will try to find something to ask or opine on in each of the documentation
> tickets so we can get them moving along or removed.
>
>
> Getting rid of dead tickets is almost as important as actually getting
> valid tickets moved along.  I think this effort will be hugely valuable.
>

Will continue commenting on tickets and asserting non-existent power to get
them resolved! ;)


>
> Part of my comment about low-hanging fruit was to help you get familiar
>> with and integrated into the development process.  Going through the process
>> of getting patches reviewed and accepted will be _much_ easier if you go
>> through the motions of doing a few trivial things first.  In fact you may
>> want to just pick up a couple of trivial non-docs patches as well, which
>> might help you on documenting the development process :). <
>> bit.ly/easy-twisted-tickets> might help you there.
>>
>
> I will find an easy ticket or few to bang out. I just replied here (
> http://twistedmatrix.com/trac/ticket/2491) in an attempt to get started on
> one that doesn't already have a long history.
>
> After spending about an hour going over the "easy" tickets, it seems many
> of them are in odd states. Either they're done and waiting on something
> undefined or there is an incomplete debate in the comments or the owner
> disappeared or... well, there are lots of examples. Maybe this is just me
> being dense or whatever, but I think (at least as a newcomer) I could
> mass-update all these tickets with "Guidance!" and it would more often than
> not be a relevant comment given the state of the ticket.
>
>
> No, this is not you being dense.  At least among the core developers in
> Boston, this is a widely-recognized and frequently-complained-about problem,
> and it's something I'd like everyone doing ticket reviews to please think
> about.
>
> Reviewers: if you make a comment on a ticket, but you don't say what you
> want to happen next, then you have effectively killed progress on that
> ticket until some other reviewer comes along and contradicts you to get
> things moving again.  This is especially true if you make one trivial
> comment on the ticket and remove the review keyword, but don't say "please
> address these issues and then merge" or "please address these issues and
> then resubmit for review".  If you've done a partial review, and made a
> comment like "I don't like this aspect of the design" or "please update
> copyright dates" or "your docstring formatting is wrong", please note in
> your comment that this is not a complete review, and *don't* remove the
> review keyword.  Removing the keyword will introduce additional latency for
> the contributor, when other reviewers might still come along and attach more
> comprehensive feedback.  There are few things more discouraging than having
> one free weekend every six months to work on a ticket, and to come back
> every time to "oops, you forgot to update the copyright date and insert a
> blank line in one file of your 300-line patch".
>
> So, Tom: mass updating those tickets wouldn't be helpful, but an update
> every couple of days with a specific question on one of these
> I-don't-know-what-to-do tickets would be great.  Your question on
> tm.tl/2491 was a definite step forward.
>

Awesome! I'm sure a lot of this has to do with the fact that once you
maintain and work on something like this for a decade you take a lot for
granted, especially with regard to your own policies and procedures. It
becomes tedious to provide (or just difficult to enumerate) all the details
necessary to new people. Hopefully as I become more familiar with them I can
ensure some of the tedious/forgotten corners become documented in a way that
makes it easier. And just point out when the current status of something is
way too ambiguous to be actionable for more than a couple folks who are too
busy to deal with it.


>
> Here's a great example of what I'm talking about (and I apologize for the
> mid-message digression, but I think it's relevant...):
> http://twistedmatrix.com/trac/ticket/4636. This seems totally trivial, but
> five months later __all__ was never changed in t.i.main and JP's buildbot
> link is broken. Whether the offending class should be removed from __all__
> or imported instead was never even mentioned. Anyway, I took a stab at it
> and attached a trivial patch so this isn't just another complaint (and it
> looks like JP closed it while I was drafting this email, so that's great!).
> But I do agree that working tickets would really help document the process!
>
>
> As you have discovered here, drawing attention to a ticket in this "stuck"
> state will often cause it to get un-stuck.  So please keep doing that.
>
>  Mostly, I really don't want you to write a gigantic pile of new
>> documentation and then find, when you're "done", that you missed some nuance
>> of the coding standard, or the patch is too big to be reasonably reviewed,
>> and that now you have three months of additional work to do before it's all
>> *really* done.  Experience with the process will mitigate that problem
>> significantly.  (And in fact I hope that you don't actually have a gigantic
>> pile of stuff to commit all at once at any point, and can continue this work
>> incrementally as a series of small tickets, but I realize that later on some
>> of the index reorganization stuff may need to be big.  This is mostly just
>> restating what Kevin already said in his message, but it bears repeating.)
>>
>
> The more I think about this, the more I agree with you. My initial
> inclination was just to start from scratch and move over existing docs that
> I found I could use. This doesn't conflict with the reuse I've been
> supportive of (and for good reason: there's a lot of decent documentation
> already there) but it does conflict with the Twisted development policies.
>
> At the end of the day, I can't really submit patches to existing
> documentation until said documentation is in Sphinx form.
>
>
> Aaaaaaaauuuuugh.
>
> When you say this, the first thing I think is "okay then, the sphinx
> migration is now introducing roadblocks into the documentation process and
> preventing people from contributing documentation, so let's just cancel it".
>  So please don't say things like this :).  The whole reason that we insisted
> on the current process for the sphinx migration was to avoid this kind of
> blockage.
>

Sorry! I didn't mean to suggest the migration is a roadblock. It's
*inconvenient* that it isn't already done, but it's certainly not stopping
anything to the point of cancelation (and doing so would probably do more
harm than good since every new document we *can* convert is one that doesn't
have to be converted manually)


>
> You can submit documentation patches right now, in Lore format - which, I
> would like to remind you, is 99% plain-vanilla HTML and very easy to edit -
> and get them accepted.  You can see on the sphinx buildbot (once a few minor
> issues are fixed, as discussed earlier in this thread) what those changes
> will look like once converted to ReST->Sphinx.  Or you can simply run the
> conversion yourself locally - hopefully Kevin will chime in on how to set
> that up so I don't need to look it up :).  As long as you aren't trying to
> do anything fancy with diagrams or tables (and *most* of the documentation
> really should not need elaborate diagrams or tables), you shouldn't run into
> any issues.
>

Yes, aside from things like toctrees and glossary references, it should be
largely similar (although I tend to get pretty verbose with Sphinx/reST
declarations because they're so handy). However, there will likely be times
where it is either wildly inefficient or flat out impossible to port
something to/from Sphinx.

Specifically, any new/modified documentation that involves messing with code
listings is going to be problematic. The current system calls for multiple
code listing modules with copious code duplication and a general lack of
testability; the new system calls for tested, combined modules who's display
can be managed by Sphinx (see:
http://sphinx.pocoo.org/markup/code.html#includes). I'm sort of at a loss
for what to do in these situations and no simple solution jumps out at me.
Having to make the cognitive switch between "I will write a dozen
incremental, untestable listings" and "I will write compact, TDD listings"
seems like it could cause a lot of latency (and extra work) regardless of
which side of the fence you start on.

Maybe we'll just have to take these sorts of conflicts one at a time and try
to make decisions as quickly as possible as to which require backwards
compatibility and which don't? *shrug*


> Heck, if you want to write your documentation patches as ReST snippets and
> attach them to tickets, I'm sure you will find *many* willing contributors
> (myself included) who will jump in and do the format-munging manually to get
> them integrated into exiting lore documents so that they can make it to
> trunk immediately.
>

That may make sense for some issues. However, I am definitely up for
modifying Lore docs when the changes wouldn't create a significant
discrepancy between formats that would need to be manually resolved later
(see: http://twistedmatrix.com/trac/ticket/2018).


>
> Or, you can just jump in with ticket reviews, or breaking up chunk tickets,
> to move along the Sphinx migration quicker.  But "I will work over here in a
> corner until somehow this gigantic pile of work gets finished by somebody
> else" is not a good strategy.  (I'm not saying that that's exactly what
> you're proposing to do, but the aspects of what your proposing which align
> with that may not be the best way to proceed.)
>

Fair enough. I am trying to split my time equally between current, future,
and new docs issues; I spent all day managing/working tickets and emailing,
for instance. I definitely don't want to create a separatist thing here. :)


>
> I guess one way this could work to the happiness of all involved is:
>
>    1. Get re-org nailed down; basic samples for whatever pages I think
>    should have standardized format / elements.
>    2. Mixed in here, find existing docs and non-docs tickets to work on
>    trunk.
>    3. When the re-org structure is ready, create a new branch from
>    whatever the current Sphinx conversion branch is (hopefully it'll be "done"
>    at this point)
>    4. Migrate new structure to branch, moving the existing docs to
>    semi-logical-but-possibly-temporary places in the new structure.
>    5. Submit tickets / patches against existing documentation in said
>    branch to move docs to new(er) locations, submit new TDD-style code samples,
>    general edits, new docs, etc.
>    6. When everything is complete, submit a final ticket to merge to trunk
>
> Does that make sense or am I still cognitively off the mark in terms of
> existing development practices?
>
>
> With the caveat of what I said above, most of these things sound like
> generally good things to do.  Except, first, I'd still like to see a ticket
> for what "the re-org" is actually going to be and what the point of it is.
>  If I've only learned one thing in maintaining Twisted for 10 years, it's
> that a description of *what we are trying to do* separate from *how we are
> going to do it* early on is essential to make sure that others can give
> you useful feedback - and, more importantly, provide you with resources.  In
> this case, those resources would be pointers to other areas in the
> documentation that you may not have noticed which already do some of what
> you are trying to do, but may be poorly integrated.
>

Okay. I will formalize the reorganization based on what we've already
discussed on here and at the meet-up and hopefully that will make things at
least as clear as mud! I have an official one for the new howto/Task
standardization already (http://twistedmatrix.com/trac/ticket/4818), let me
know if it's at all useful and/or what you mean here.


>
> I will be fleshing out those goals more in the coming days, but some of it
> is implicit within the new documentation structure that's already in my
> repo.
>
>
> $ python -c 'import this' | grep Explicit # :-)
>
> As for a statement of goals when replacing/removing specific documentation,
> sure, I can do that as necessary. It's impossible to completely remove the
> element of taste but I will certainly avoid the "because I like this better"
> argument for making changes.
>
>
> Again, this is more about having a good statement of purpose up front, so
> that everyone is focused on the same thing, than having an argument that you
> can trot out later once everyone starts nitpicking from a hundred different
> perspectives :).  Plus, such a statement of purpose can serve as a focus for
> you as well.
>
>  You will probably have to press us core developers on this one, and you
>>> may spark some debates. These tend to sputter out with no clear
>>> resolution as everyone is frustrated that nobody's solution (not even their
>>> own) is ideal, but you would be doing us all a great service if you really
>>> forced us to develop a consensus about certain things (like "what's the best
>>> way to build a twisted command-line program", for example) and agree to
>>> agree on the current documented "best practice" for those things.
>>
>>
>> Debates are great!
>>
>>
>> Debates *that reach some kind of conclusion* are great :).  Debates that
>> just go in circles until everybody feels crappy about the topic aren't.  So
>> I'm really just asking you to help us make these debates into the great
>> kind.  (The rest of your reply seems to agree with that, I just wanted to be
>> clear.)
>>
>
> Yeah, as I've already mentioned in this reply, the "limbo syndrome" of many
> tickets drives me nuts. I'm sure you guys hate it too, but having somebody
> new around who isn't afraid to ruffle some feathers for the greater good and
> isn't yet at some "acceptance" level with it should be helpful! That being
> said, I will do my best not to be a jerk about it; you guys have been doing
> this for much, much longer and I respect that.
>
>
> Tickets in limbo need to be eliminated.  I think you will find that just
> about everyone is happy to pick up these discussions with an injection of a
> little bit of attention and energy from a contributor.  We all *know* that
> these sap the will of new contributors and thereby decrease the overall pool
> of available time, so I think you may have to try really, really hard to
> actually ruffle any feathers :).
>

Great, I was hoping I wasn't the only person who saw them this way!


>
> If you like Python and DNS or SMTP or whatever the hell else, what has the
>> potential to be a more awesome implementation than its Twisted one? Let's
>> help people find out for themselves that the answer is *nothing*. Then
>> they'll want it to be *their* project.
>>
>>
>> If you do this, you will be my hero forever.
>>
>
> Twisted is a naturally-superior Python choice for most supported protocols
> by virtue of the fact that most network "stuff" benefits from event-based
> solutions. Like, find me a Python DNS server that *isn't* implemented in
> Twisted. People have these weird misconceptions about Twisted; it's really
> hard to grasp, ugly, unmaintained, etc. Ultimately, I want to correct these
> misconceptions, have *twisted.names* show up first on Google for "Python
> DNS Server", and all the other shit that really should be the case but
> isn't. Resolving these issues should ultimately resolve the problem of
> maintainers, community involvement, etc.
>
>
> +10000.
>
> I can't promise that in the course of this crusade I won't cause grief by
> trying to change things, but I will always strive to have a rational reason
> for wanting to do so!
>
>
> Please keep the grief coming!  It'll all be worth it, I'm sure :).
>  Everything that you've said so far that I disagree with has just been an
> opportunity to communicate some of the Twisted development philosophy which
> may not yet be written down - and should probably be part of the
> documentation eventually.  So you have yet to do anything which has put me
> out even in the slightest.  We need more new contributors feeling
> comfortable being bold and trying to Just Do It.
>

That's good to hear! This is probably a discussion for another thread, but
Twisted has always seemed a bit imposing in terms of ease of contribution.
That may be a public relations issue as much as a procedural one, but making
contribution a relatively frictionless, step-by-step process will go a
looooong way to getting more people to do it.

I also think that reviewer conduct is as important as the tone of the
documentation (which should probably start with something like "These are
Twisted's contributor rules and processes. We urge new contributors to start
by simply writing a patch, though."); JP helped me out earlier today (
http://twistedmatrix.com/trac/ticket/4636) by accepting my patch despite a
couple missing details. That gave me a nice sense of accomplishment without
feeling like it was diluted by a few trivial details. I think there is
*very* little cost to these sorts of things because either you just got (a)
a one-time contribution you wouldn't have with a dozen steps, or (b) a new
long-term contributor thanks to quick feedback, appreciation, and
flexibility on the part of the team. But I'm drifting now, so shall drift in
the direction of bed and pick things up tomorrow...


>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110123/ad7723da/attachment.html>

From glyph at twistedmatrix.com  Sun Jan 23 01:08:41 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 03:08:41 -0500
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <AANLkTi=qcmf9TocwHspEoQy9Mj0zPKmdmit-F8Pq+iXV@mail.gmail.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
	<AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>
	<C14C24AD-1F27-4745-942A-4DD4853632E5@twistedmatrix.com>
	<AANLkTi=qcmf9TocwHspEoQy9Mj0zPKmdmit-F8Pq+iXV@mail.gmail.com>
Message-ID: <DEEE7A74-2BB8-473F-AC46-7223028191CF@twistedmatrix.com>


On Jan 23, 2011, at 12:55 AM, Tom Davis wrote:

> But I'm drifting now, so shall drift in the direction of bed and pick things up tomorrow...

I think this thread has reached a nice point of consensus, so rather than keep flooding everybody's inboxes with 'me too', I'm going to withdraw until we have some more specific things to discuss :).

Still excited to see the documentation getting fixed though!




From mithrandi at mithrandi.net  Sun Jan 23 11:06:44 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 23 Jan 2011 20:06:44 +0200
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>
References: <1295759123.21.1931674779@twistedmatrix.com>
	<AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>
Message-ID: <AANLkTimBRu-cFTikAkSircQ=zsXBUn2bfQg2QKsyPYMD@mail.gmail.com>

On Sun, Jan 23, 2011 at 7:36 AM, Tom Davis <tom at recursivedream.com> wrote:
>>
>> Mean open ticket age: 1032 days
>>
>> Mean time between ticket creation and ticket resolution: 238 days
>>
>> Mean time spent in review: 83 days
>
>
> Wow. Adding "reduce these by at least one order of magnitude" to my todo list. Gotta have goals!

I think the median times are a lot more relevant (and also a lot less
horrible-looking).
--
mithrandi, i Ainil en-Balandor, a faer Ambar



From jasonjwwilliams at gmail.com  Sun Jan 23 13:03:23 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Sun, 23 Jan 2011 13:03:23 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
Message-ID: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>

Hi Guys,

I'd like to get ticket 4021 integrated in some fashion into Twisted. Currently, the Twisted Names client issues a "starting" and "stopping" log message on every resolution. It fills up the logs and makes seeing valuable log messages really difficult in the sea of DNS requests. 150,000 resolutions per day is generating 700mb of logs just from the start/stop. 

The problem is actually the UDP datagram transport that Resolver is based on. 4021 proposes to address the issue by wrapping the two log lines with "if self.noisy". 

I'd advocate this solution as it leverages the noisy attribute already expected to tamp down log chattiness. Also, it requires the smallest amount of code change as opposed to implementing a filter on the logging system. 

Honestly this has been a problem for me on more than one project I've used the Names client in. It's just untenable in a project with a high volume. 

Jean-Paul asked me to bring this up for discussion if I wanted to fix it. What do others think?

-J

Sent via iPhone

Is your e-mail Premiere?


From angelo.dellaera at gmail.com  Sun Jan 23 13:45:41 2011
From: angelo.dellaera at gmail.com (Angelo Dell'Aera)
Date: Sun, 23 Jan 2011 21:45:41 +0100
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
Message-ID: <20110123214541.4b686245@alnitak.communicationvalley.it>

On Sun, 23 Jan 2011 13:03:23 -0700
"Jason J. W. Williams" <jasonjwwilliams at gmail.com> wrote:

> Hi Guys,
> 
> I'd like to get ticket 4021 integrated in some fashion into Twisted.
> Currently, the Twisted Names client issues a "starting" and "stopping"
> log message on every resolution. It fills up the logs and makes seeing
> valuable log messages really difficult in the sea of DNS requests.
> 150,000 resolutions per day is generating 700mb of logs just from the
> start/stop. 
> 
> The problem is actually the UDP datagram transport that Resolver is based
> on. 4021 proposes to address the issue by wrapping the two log lines with
> "if self.noisy". 
> 
> I'd advocate this solution as it leverages the noisy attribute already
> expected to tamp down log chattiness. Also, it requires the smallest
> amount of code change as opposed to implementing a filter on the logging
> system. 
> 
> Honestly this has been a problem for me on more than one project I've
> used the Names client in. It's just untenable in a project with a high
> volume. 
> 
> Jean-Paul asked me to bring this up for discussion if I wanted to fix it.
> What do others think?


Hi Jason,
I have experienced such situation a few times just like you. At first I
used to invoke twistd redirecting logs to /dev/null but then I commented
such Twisted code lines out in order to be able to have useful logs for my
applications. I really think such verbose logging should be turned off 
by default because it is quite useless to the end user and produces huge
amounts of logs which are useless as well.

Cheers,

-- 

Angelo Dell'Aera 'buffer' 
Antifork Research, Inc.	  	http://buffer.antifork.org
Metro Olografix




From jaroslaw.fedewicz at gmail.com  Sun Jan 23 17:11:56 2011
From: jaroslaw.fedewicz at gmail.com (=?utf-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Mon, 24 Jan 2011 02:11:56 +0200
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <20110123214541.4b686245@alnitak.communicationvalley.it>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
Message-ID: <A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>

On Jan 23, 2011, at 22:45 , Angelo Dell'Aera wrote:
> I really think such verbose logging should be turned off 
> by default because it is quite useless to the end user and produces huge
> amounts of logs which are useless as well.
> 
> Cheers,
> 


My 2 cents to this is that responsiveness and performance of an application has turned out to be severely impacted even by console output, disk output of the same data being actually faster. Various tests have consistently shown that being 'distracted' for synchronous write() actually costs noticeable amounts of time.

For example, even a simple extraction of linux-2.6.38-rc2.tar.bz2 with and without -v can tell:

time tar -xvjf linux-2.6.38-rc2.tar.bz2 (console output to a terminal emulator):

real		4m38.434s
user	1m30.148s
sys		0m40.721

time tar -xvjf linux-2.6.38-rc2.tar.bz2 > filelist.txt:

real		3m5.595s (actually faster than console!)
user	1m27.162s
sys		0m35.854s

time tar -xvjf linux-2.6.38-rc2.tar.bz2 > /dev/null:

real		2m57.909s (36% faster, now we're talking business)
user	1m26.851s
sys		0m34.696s

(Non-verbose tar -xjf does not make much difference from piping into /dev/null at least on Mac OS X, but  probably its being written in C and going through less levels of indirection between if(verbose) check and actual output have contributed to that; turning Twisted's logging off completely invariably gave tremendous performance boosts.)

Maybe I'm missing something here, but that's what my experience on several projects said.

(Here was going to be the part where I would actually propose some sort of solution but it turned out to be so stupid on the second sight that I decided to scrap it until I work out the details.)




From glyph at twistedmatrix.com  Sun Jan 23 18:39:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 20:39:18 -0500
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
Message-ID: <C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>


On Jan 23, 2011, at 7:11 PM, Jarosław Fedewicz wrote:

> My 2 cents to this is that responsiveness and performance of an application has turned out to be severely impacted even by console output, disk output of the same data being actually faster. Various tests have consistently shown that being 'distracted' for synchronous write() actually costs noticeable amounts of time.

Yes, logging in Twisted is a bit of a mess.

Almost all of these chatty little messages should not be logged to disk.  If they're logged at all, they should be logged as purely structured data for observers to analyze later, not as text messages to go on a log file.

Something like this, maybe:

    log.msg(interface=INameResolutionLogEvent, name=domain, recordType=type)

This will allow log observers to listen for events with event['interface'] == INameResolutionLogEvent, but won't trigger a synchronous write().

One of my dream features for Twisted's logging system is to get ring-buffer logging, like Foolscap has - <http://foolscap.lothar.com/docs/logging.html>.  Also, to log a lot less text and a lot more structured stuff that can be examined later without big piles of regular expressions.  I'd be happy to describe this in more detail if anyone would like to try to make systematic improvements to our logging subsystem or Twisted's internal use of it :).

In the meanwhile, I think it would be OK to just remove these messages entirely.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110123/9091ae6d/attachment.html>

From jasonjwwilliams at gmail.com  Sun Jan 23 19:21:28 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Sun, 23 Jan 2011 19:21:28 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
Message-ID: <AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>

On Sun, Jan 23, 2011 at 6:39 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:

> Yes, logging in Twisted is a bit of a mess.
> Almost all of these chatty little messages should not be logged to disk.  If
> they're logged at all, they should be logged as purely structured data for
> observers to analyze later, not as text messages to go on a log file.
> Something like this, maybe:
>     log.msg(interface=INameResolutionLogEvent, name=domain, recordType=type)
> This will allow log observers to listen for events with event['interface']
> == INameResolutionLogEvent, but won't trigger a synchronous write().
> One of my dream features for Twisted's logging system is to get ring-buffer
> logging, like Foolscap has - <http://foolscap.lothar.com/docs/logging.html>.
>  Also, to log a lot less text and a lot more structured stuff that can be
> examined later without big piles of regular expressions.  I'd be happy to
> describe this in more detail if anyone would like to try to make systematic
> improvements to our logging subsystem or Twisted's internal use of it :).
> In the meanwhile, I think it would be OK to just remove these messages
> entirely.


During dev I do like being able to see the "starting/stopping"
messages...helps you know what's going on when you're debugging.

Would it be that bad to just use a noisy check to toggle these on and
off until a better logging system is available?

-J



From glyph at twistedmatrix.com  Sun Jan 23 19:27:46 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 21:27:46 -0500
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
Message-ID: <EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>


On Jan 23, 2011, at 9:21 PM, Jason J. W. Williams wrote:

> Would it be that bad to just use a noisy check to toggle these on and
> off until a better logging system is available?

No, that sounds like a fine solution for the interim.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110123/2fdcde93/attachment.html>

From jasonjwwilliams at gmail.com  Sun Jan 23 19:29:59 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Sun, 23 Jan 2011 19:29:59 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
Message-ID: <AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>

On Sun, Jan 23, 2011 at 7:27 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Jan 23, 2011, at 9:21 PM, Jason J. W. Williams wrote:
>
> Would it be that bad to just use a noisy check to toggle these on and
> off until a better logging system is available?
>
> No, that sounds like a fine solution for the interim.


OK so the only other question is, should noisy default to True or
False? If we all can agree on that, I'll make the patch match and add
tests.

-J



From glyph at twistedmatrix.com  Sun Jan 23 19:43:39 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 21:43:39 -0500
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
Message-ID: <B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>


On Jan 23, 2011, at 9:29 PM, Jason J. W. Williams wrote:

> On Sun, Jan 23, 2011 at 7:27 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> 
>> On Jan 23, 2011, at 9:21 PM, Jason J. W. Williams wrote:
>> 
>> Would it be that bad to just use a noisy check to toggle these on and
>> off until a better logging system is available?
>> 
>> No, that sounds like a fine solution for the interim.
> 
> 
> OK so the only other question is, should noisy default to True or
> False? If we all can agree on that, I'll make the patch match and add
> tests.
> 
> -J

Personally I'd say 'false'.  This is technically a change in behavior, but I don't think that we should make guarantees about emitted log messages.  Practically speaking, I've never seen any code which would care about an unstructured log message.  Anyone else object to changing it?


From glyph at twistedmatrix.com  Sun Jan 23 19:55:21 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Jan 2011 21:55:21 -0500
Subject: [Twisted-Python] incomplete reviews
Message-ID: <8A32F6E6-9225-4335-B6B8-36668E8DFF86@twistedmatrix.com>

Some reviewers (you know who you are!) have gotten into the habit of doing incomplete reviews, that note one or two trivial things about a patch or branch, but don't say whether the code is ready to land after fixing just those trivial things.

I've updated the review process documentation to address this, so every reviewer, please have a look:

<http://twistedmatrix.com/trac/wiki/ReviewProcess?action=diff&version=44>


From p.mayers at imperial.ac.uk  Mon Jan 24 03:40:52 2011
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 24 Jan 2011 10:40:52 +0000
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>	<20110123214541.4b686245@alnitak.communicationvalley.it>	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
Message-ID: <4D3D5734.1080301@imperial.ac.uk>

On 01/24/2011 02:43 AM, Glyph Lefkowitz wrote:
>
> Personally I'd say 'false'.  This is technically a change in
> behavior, but I don't think that we should make guarantees about
> emitted log messages.  Practically speaking, I've never seen any code
> which would care about an unstructured log message.  Anyone else
> object to changing it?

I'm strongly in favour of setting noisy to False on all factory objects; 
I find their logging tedious, and have a bunch of monkeypatch code in 
most of my projects to import the modules and set the class variable, to 
I don't have to subclass just to do that.

The structured logging proposal sounds interesting and I'm potentially 
willing to give it a go. However, it seems like it would be a lot of 
work and that it would be very likely to sit in Trac review limbo for a 
while (getting ever-harder to merge the branch back in).

(This is not intended as a criticism - merely an observation that even 
tickets for simple problems with patches take a while to get reviewed, 
as manpower is of course a precious and scarce resource)

Do you have any thoughts on how it could be broken down into smaller chunks?



From exarkun at twistedmatrix.com  Mon Jan 24 06:48:27 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 Jan 2011 13:48:27 -0000
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <4D3D5734.1080301@imperial.ac.uk>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
Message-ID: <20110124134827.1699.95546297.divmod.xquotient.229@localhost.localdomain>

On 10:40 am, p.mayers at imperial.ac.uk wrote:
>On 01/24/2011 02:43 AM, Glyph Lefkowitz wrote:
>>
>>Personally I'd say 'false'.  This is technically a change in
>>behavior, but I don't think that we should make guarantees about
>>emitted log messages.  Practically speaking, I've never seen any code
>>which would care about an unstructured log message.  Anyone else
>>object to changing it?
>
>I'm strongly in favour of setting noisy to False on all factory 
>objects;
>I find their logging tedious, and have a bunch of monkeypatch code in
>most of my projects to import the modules and set the class variable, 
>to
>I don't have to subclass just to do that.
>
>The structured logging proposal sounds interesting and I'm potentially
>willing to give it a go. However, it seems like it would be a lot of
>work and that it would be very likely to sit in Trac review limbo for a
>while (getting ever-harder to merge the branch back in).

I don't think it would be a lot of work.  Glyph already implemented 
1/3rd of it in a previous email in this thread.  The rest is adding a 
dict of lists of observers to LogPublisher (replacing the current list 
of observers) and obviously writing some unit tests.
>(This is not intended as a criticism - merely an observation that even
>tickets for simple problems with patches take a while to get reviewed,
>as manpower is of course a precious and scarce resource)
>
>Do you have any thoughts on how it could be broken down into smaller 
>chunks?

All of the actual log messages throughout Twisted should *not* be 
changed at once.  They should be changed incrementally, as people care 
about them or work on code related to them.

Jean-Paul



From jasonjwwilliams at gmail.com  Mon Jan 24 10:24:21 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 24 Jan 2011 10:24:21 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <4D3D5734.1080301@imperial.ac.uk>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
Message-ID: <AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>

If there's no objections the rest of today, I'll make sure the 4021
patch still applies and see what could be done as a test.

-J

On Mon, Jan 24, 2011 at 3:40 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 01/24/2011 02:43 AM, Glyph Lefkowitz wrote:
>>
>> Personally I'd say 'false'.  This is technically a change in
>> behavior, but I don't think that we should make guarantees about
>> emitted log messages.  Practically speaking, I've never seen any code
>> which would care about an unstructured log message.  Anyone else
>> object to changing it?
>
> I'm strongly in favour of setting noisy to False on all factory objects;
> I find their logging tedious, and have a bunch of monkeypatch code in
> most of my projects to import the modules and set the class variable, to
> I don't have to subclass just to do that.
>
> The structured logging proposal sounds interesting and I'm potentially
> willing to give it a go. However, it seems like it would be a lot of
> work and that it would be very likely to sit in Trac review limbo for a
> while (getting ever-harder to merge the branch back in).
>
> (This is not intended as a criticism - merely an observation that even
> tickets for simple problems with patches take a while to get reviewed,
> as manpower is of course a precious and scarce resource)
>
> Do you have any thoughts on how it could be broken down into smaller chunks?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at twistedmatrix.com  Mon Jan 24 11:09:24 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 Jan 2011 18:09:24 -0000
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
Message-ID: <20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>

On 05:24 pm, jasonjwwilliams at gmail.com wrote:
>If there's no objections the rest of today, I'll make sure the 4021
>patch still applies and see what could be done as a test.

I think it would be sad to lose the port starting up log messages. 
Sure, they're a nuisance if you start and stop 50k ports per second. 
However, they're just what you want if you have a boring server that 
starts one or two ports in the entire lifetime of your application.

For clients, the common case is to start and stop many connectors over 
the lifetime of an application, so it sounds slightly more tolerable to 
disable these by default.  However, even for clients I've found these 
messages useful.  For example they've revealed bugs in buildbot's 
reconnection code.

So I doubt it's a pure win to disable these by default (just like it's 
not a pure win to have them enabled by default).

As long as someone's going to touch this code, it seems like it would be 
better to just implement structured logging.  This doesn't even have to 
mean changes to LogPublisher.  It could mean replacing:

  log.msg("%s starting on %s"%(self.protocol.__class__, 
self._realPortNumber))

with:

  log.msg(
      event_source=self,
      event_type="start",
      protocol=self.protocol,
      port_number=self._realPortNumber)

(and documenting and testing).  It may well be nice to have LogPublisher 
be able to dispatch these more efficiently, but that's just an 
optimization.

This still has the effect of disabling the messages by default.  And 
(for now) it's even harder to turn them back on (you need a log observer 
that can report about these events, instead of just setting a flag). 
But it's better in the long run, right?

Jean-Paul
>-J
>
>On Mon, Jan 24, 2011 at 3:40 AM, Phil Mayers <p.mayers at imperial.ac.uk> 
>wrote:
>>On 01/24/2011 02:43 AM, Glyph Lefkowitz wrote:
>>>
>>>Personally I'd say 'false'. �This is technically a change in
>>>behavior, but I don't think that we should make guarantees about
>>>emitted log messages. �Practically speaking, I've never seen any code
>>>which would care about an unstructured log message. �Anyone else
>>>object to changing it?
>>
>>I'm strongly in favour of setting noisy to False on all factory 
>>objects;
>>I find their logging tedious, and have a bunch of monkeypatch code in
>>most of my projects to import the modules and set the class variable, 
>>to
>>I don't have to subclass just to do that.
>>
>>The structured logging proposal sounds interesting and I'm potentially
>>willing to give it a go. However, it seems like it would be a lot of
>>work and that it would be very likely to sit in Trac review limbo for 
>>a
>>while (getting ever-harder to merge the branch back in).
>>
>>(This is not intended as a criticism - merely an observation that even
>>tickets for simple problems with patches take a while to get reviewed,
>>as manpower is of course a precious and scarce resource)
>>
>>Do you have any thoughts on how it could be broken down into smaller 
>>chunks?
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From jasonjwwilliams at gmail.com  Mon Jan 24 11:18:41 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 24 Jan 2011 11:18:41 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
	<20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
Message-ID: <AANLkTimD=wONP0u6Sz78V0M+DUqPtNd3t26Oxir+VGuZ@mail.gmail.com>

In my opinion this has been a problem for a very long time, and it
would be better to have a correction that fits the majority of cases
with a small code change now rather than wait for the perfect log
system. These changes don't preclude a better logger and way of
filtering these out in the future. self.noisy may be viewed as a hack,
but honestly it's worked well for me and it's easy to understand what
it does.

If the compromise is the 4021 patch (wrapping with "if self.noisy"),
with noisy defaulting to True, I think that's a good solution today
without precluding the perfect solution when someone wants to build
it.

-J

On Mon, Jan 24, 2011 at 11:09 AM,  <exarkun at twistedmatrix.com> wrote:
> On 05:24 pm, jasonjwwilliams at gmail.com wrote:
>>
>> If there's no objections the rest of today, I'll make sure the 4021
>> patch still applies and see what could be done as a test.
>
> I think it would be sad to lose the port starting up log messages. Sure,
> they're a nuisance if you start and stop 50k ports per second. However,
> they're just what you want if you have a boring server that starts one or
> two ports in the entire lifetime of your application.
>
> For clients, the common case is to start and stop many connectors over the
> lifetime of an application, so it sounds slightly more tolerable to disable
> these by default.  However, even for clients I've found these messages
> useful.  For example they've revealed bugs in buildbot's reconnection code.
>
> So I doubt it's a pure win to disable these by default (just like it's not a
> pure win to have them enabled by default).
>
> As long as someone's going to touch this code, it seems like it would be
> better to just implement structured logging.  This doesn't even have to mean
> changes to LogPublisher.  It could mean replacing:
>
>  log.msg("%s starting on %s"%(self.protocol.__class__,
> self._realPortNumber))
>
> with:
>
>  log.msg(
>     event_source=self,
>     event_type="start",
>     protocol=self.protocol,
>     port_number=self._realPortNumber)
>
> (and documenting and testing).  It may well be nice to have LogPublisher be
> able to dispatch these more efficiently, but that's just an optimization.
>
> This still has the effect of disabling the messages by default.  And (for
> now) it's even harder to turn them back on (you need a log observer that can
> report about these events, instead of just setting a flag). But it's better
> in the long run, right?
>
> Jean-Paul
>>
>> -J
>>
>> On Mon, Jan 24, 2011 at 3:40 AM, Phil Mayers <p.mayers at imperial.ac.uk>
>> wrote:
>>>
>>> On 01/24/2011 02:43 AM, Glyph Lefkowitz wrote:
>>>>
>>>> Personally I'd say 'false'.  This is technically a change in
>>>> behavior, but I don't think that we should make guarantees about
>>>> emitted log messages.  Practically speaking, I've never seen any code
>>>> which would care about an unstructured log message.  Anyone else
>>>> object to changing it?
>>>
>>> I'm strongly in favour of setting noisy to False on all factory objects;
>>> I find their logging tedious, and have a bunch of monkeypatch code in
>>> most of my projects to import the modules and set the class variable, to
>>> I don't have to subclass just to do that.
>>>
>>> The structured logging proposal sounds interesting and I'm potentially
>>> willing to give it a go. However, it seems like it would be a lot of
>>> work and that it would be very likely to sit in Trac review limbo for a
>>> while (getting ever-harder to merge the branch back in).
>>>
>>> (This is not intended as a criticism - merely an observation that even
>>> tickets for simple problems with patches take a while to get reviewed,
>>> as manpower is of course a precious and scarce resource)
>>>
>>> Do you have any thoughts on how it could be broken down into smaller
>>> chunks?
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From jaroslaw.fedewicz at gmail.com  Mon Jan 24 11:25:49 2011
From: jaroslaw.fedewicz at gmail.com (Yaroslav Fedevych)
Date: Mon, 24 Jan 2011 20:25:49 +0200
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
	<20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
Message-ID: <BBA55E07-BFCF-4E55-B9EE-6FF192CC2386@gmail.com>


On Jan 24, 2011, at 8:09 PM, exarkun at twistedmatrix.com wrote:

> On 05:24 pm, jasonjwwilliams at gmail.com wrote:
>> If there's no objections the rest of today, I'll make sure the 4021
>> patch still applies and see what could be done as a test.
> 
> I think it would be sad to lose the port starting up log messages. Sure, they're a nuisance if you start and stop 50k ports per second. However, they're just what you want if you have a boring server that starts one or two ports in the entire lifetime of your application.

I think the fail of it all is that all factories, by default, are noisy unless explicitly declared quiet, without an option to be quiet unless explicitly declared noisy.

I've had this problem with t.web. Sure it's good to have every access logged the moment it arrives, especially if it's just your plain old boring webserver, but it stops being fun when the server is tasked to interface with a special client software which is expected to routinely make 1000–2000 requests per second. I've never made it to 1000 per second on decent hardware, and that's sad. Now the project is in Perl, it has some scalability and codebase issues, but at least it copes with event pressure. :-(

It would surely be nice to have a logger which flushes out, say, every 2000 messages or every few seconds, whichever comes first (it would be a lot more filesystem efficient), suitable if you have a freaking lot of events, you need to log them all and you are not stock broker (in which case integrity really prevails over speed) or you have the integrity taken care about elsewhere (say it's in a postgresql database with good settings).

The sad thing is that I haven't figured out how to make my own logger, how to tell everything to use it and how to shut irrelevant server parts up without hacks. Maybe folks refactoring the documentation will come up with something.

-- 
Yaroslav Fedevych
Software Developer and Consultant
jaroslaw.fedewicz at gmail.com
+380685061839, +380969783173




From ddwiggins at advpubtech.com  Mon Jan 24 12:26:54 2011
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Mon, 24 Jan 2011 11:26:54 -0800
Subject: [Twisted-Python] Porting twisted methods to a synchronous
	environment
Message-ID: <ihkjpv$ika$1@dough.gmane.org>

I have a server that provides access to a database in the usual way, 
using adbapi to talk to an MSSQL server.  Now, I'm facing the need to 
create an application that can access the server directly.  (In addition 
to, not instead of.)

In the spirit of "write it once", I'd like to be able to "import" the 
server's database read/write methods into a module in the application, 
possibly driven by a reactor of some sort.  In this case, there'd be no 
client/server protocol, just calls from other modules in the application.

I realize that this is pretty vague; I'm still in the process of 
conceptualizing it.  I'm looking for any advice that might help avoid 
the all-too-obvious approach of copying code and performing surgery on 
it, with the all-too-well-known drawbacks.

Thanks for any good words,

-- 

Don Dwiggins
Advanced Publishing Technology





From exarkun at twistedmatrix.com  Mon Jan 24 12:30:21 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 Jan 2011 19:30:21 -0000
Subject: [Twisted-Python] Custom log observer (was Re: Names DNS Client
	too	chatty)
In-Reply-To: <BBA55E07-BFCF-4E55-B9EE-6FF192CC2386@gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
	<20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
	<BBA55E07-BFCF-4E55-B9EE-6FF192CC2386@gmail.com>
Message-ID: <20110124193021.1699.1567199901.divmod.xquotient.351@localhost.localdomain>

On 06:25 pm, jaroslaw.fedewicz at gmail.com wrote:
>
>It would surely be nice to have a logger which flushes out, say, every 
>2000 messages or every few seconds, whichever comes first (it would be 
>a lot more filesystem efficient), suitable if you have a freaking lot 
>of events, you need to log them all and you are not stock broker (in 
>which case integrity really prevails over speed) or you have the 
>integrity taken care about elsewhere (say it's in a postgresql database 
>with good settings).
>
>The sad thing is that I haven't figured out how to make my own logger, 
>how to tell everything to use it and how to shut irrelevant server 
>parts up without hacks. Maybe folks refactoring the documentation will 
>come up with something.

http://twistedmatrix.com/documents/current/core/howto/logging.html 
should answer at least a couple of those questions.

Jean-Paul



From kevin.horn at gmail.com  Mon Jan 24 13:27:37 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 24 Jan 2011 14:27:37 -0600
Subject: [Twisted-Python] Refactoring Documentation
In-Reply-To: <DEEE7A74-2BB8-473F-AC46-7223028191CF@twistedmatrix.com>
References: <AANLkTindbbP+sOU=oUL3MrvQa+wQAYiPjxJEC2hzTVaf@mail.gmail.com>
	<FC3E7771-71A8-4DEA-817D-47EC8B633BD3@twistedmatrix.com>
	<AANLkTi=b6TRXzYViupk0G8xA0_gvORkeMCOG0ZZVpB+A@mail.gmail.com>
	<20110120224548.1851.315071590.divmod.xquotient.2@localhost.localdomain>
	<AANLkTin8h09VO1pRKCLnPjH9n+qywHLgtUuYb17pFcmN@mail.gmail.com>
	<20110120235716.GS21847@boombah.thristian.org>
	<AANLkTimKcbHd5CbS4e23Q0P6tg6VMVc9UHpNkYUQ1OmK@mail.gmail.com>
	<20110121012001.GT21847@boombah.thristian.org>
	<AANLkTinochm52-bWiPSauO8bO3LD6+SL7z3c_Ca_R0L6@mail.gmail.com>
	<31F16BEE-5A30-41AF-B146-9C94BF928FD4@twistedmatrix.com>
	<AANLkTin0vwFBxEC_UFK3Fubf9eMoJMuyY=hWOKBOE5cO@mail.gmail.com>
	<C14C24AD-1F27-4745-942A-4DD4853632E5@twistedmatrix.com>
	<AANLkTi=qcmf9TocwHspEoQy9Mj0zPKmdmit-F8Pq+iXV@mail.gmail.com>
	<DEEE7A74-2BB8-473F-AC46-7223028191CF@twistedmatrix.com>
Message-ID: <AANLkTi=vB_1FweiBDEHAe2D9PGEKqaVWv_-f5zcqK3GQ@mail.gmail.com>

On Sun, Jan 23, 2011 at 2:08 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 23, 2011, at 12:55 AM, Tom Davis wrote:
>
> > But I'm drifting now, so shall drift in the direction of bed and pick
> things up tomorrow...
>
> I think this thread has reached a nice point of consensus, so rather than
> keep flooding everybody's inboxes with 'me too', I'm going to withdraw until
> we have some more specific things to discuss :).
>
>
Agreed, so I won't reply point by point, but I will just mention this"

As of about 5 mins ago, with exarkun's kind assistance, the sphinx builder
appears to be fixed:

http://buildbot.twistedmatrix.com/builds/sphinx-html/sphinx-html-15731/


> Still excited to see the documentation getting fixed though!
>
>
>
Yesyesyes!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110124/f8e0d105/attachment.html>

From kevin.horn at gmail.com  Mon Jan 24 13:33:31 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 24 Jan 2011 14:33:31 -0600
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <173CCAE4-22D7-4B0F-847F-7DFB418F0BDC@twistedmatrix.com>
References: <1295759123.21.1931674779@twistedmatrix.com>
	<AANLkTikucTtKo9pv7wVfM65_OLZwq_GjVU5mAsHSNVhb@mail.gmail.com>
	<173CCAE4-22D7-4B0F-847F-7DFB418F0BDC@twistedmatrix.com>
Message-ID: <AANLkTi=xECbm+9fTFGB2DOXzHr3EEGO+TSROT5=gOgAm@mail.gmail.com>

On Sat, Jan 22, 2011 at 11:44 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

>
> On Jan 23, 2011, at 12:36 AM, Tom Davis wrote:
>
> Mean open ticket age: 1032 days
>
> Mean time between ticket creation and ticket resolution: 238 days
>
> Mean time spent in review: 83 days
>
>
> Wow. Adding "reduce these by at least one order of magnitude" to my todo
> list. Gotta have goals!
>
>
> Dude, you totally buried the lead.
>

Agreed, this is fantastic!


>
> On Sun, Jan 23, 2011 at 12:05 AM, <exarkun at twistedmatrix.com> wrote:
>
>> Bug summary
>> ______________________
>> Summary for 2011-01-16 through 2011-01-23
>>                   Opened     Closed      Total     Change
>> Enhancements:          3          6        690         -3
>> Defects:               6          8        547         -2
>> Tasks:                 2          7         65         -5
>> Regressions:           0          1          1         -1
>> Total:                11         22       1303        -11
>>
>> *This* is the real story.  Great work everybody!  -11 is a pretty
> significant week!  (Now let's please do that continuously for 3 years...)
>
>
>
Hopefully we'll have a big drop in open Lore & docs tickets soon...hopefully

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110124/5c511996/attachment.html>

From phil at bubblehouse.org  Mon Jan 24 13:45:58 2011
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 24 Jan 2011 15:45:58 -0500
Subject: [Twisted-Python] Porting twisted methods to a synchronous
	environment
In-Reply-To: <ihkjpv$ika$1@dough.gmane.org>
References: <ihkjpv$ika$1@dough.gmane.org>
Message-ID: <1C271909-9742-41B4-ACCD-01B5BEC11D77@bubblehouse.org>

On Jan 24, 2011, at 2:26 PM, Don Dwiggins wrote:
> I have a server that provides access to a database in the usual way, 
> using adbapi to talk to an MSSQL server.  Now, I'm facing the need to 
> create an application that can access the server directly.  (In addition 
> to, not instead of.)

Why do you need to "port twisted methods to a syncronous environment"? Why can't you just write your app asynchronously?

-phil




From glyph at twistedmatrix.com  Mon Jan 24 22:01:04 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 25 Jan 2011 00:01:04 -0500
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <AANLkTimD=wONP0u6Sz78V0M+DUqPtNd3t26Oxir+VGuZ@mail.gmail.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
	<20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
	<AANLkTimD=wONP0u6Sz78V0M+DUqPtNd3t26Oxir+VGuZ@mail.gmail.com>
Message-ID: <06F2DF10-BDAE-4CC8-9AB0-C17973A92B2D@twistedmatrix.com>


On Jan 24, 2011, at 1:18 PM, Jason J. W. Williams wrote:

> In my opinion this has been a problem for a very long time, and it
> would be better to have a correction that fits the majority of cases
> with a small code change now rather than wait for the perfect log
> system. These changes don't preclude a better logger and way of
> filtering these out in the future. self.noisy may be viewed as a hack,
> but honestly it's worked well for me and it's easy to understand what
> it does.
> 
> If the compromise is the 4021 patch (wrapping with "if self.noisy"),
> with noisy defaulting to True, I think that's a good solution today
> without precluding the perfect solution when someone wants to build
> it.

While I agree with the general sentiment (incremental improvements that can be done now are pretty much always better than gigantic overhauls that have to be put off until later) the current logging system is already pretty much designed for this, we're just not using it right.  Trimming JP's message a bit to just the key part:

>> This doesn't even have to mean changes to LogPublisher.  It could mean replacing:
>> 
>>  log.msg("%s starting on %s"%(self.protocol.__class__,
>> self._realPortNumber))
>> 
>> with:
>> 
>>  log.msg(
>>     event_source=self,
>>     event_type="start",
>>     protocol=self.protocol,
>>     port_number=self._realPortNumber)
>> 
>> (and documenting and testing).  It may well be nice to have LogPublisher be
>> able to dispatch these more efficiently, but that's just an optimization.


That is _literally_ all that needs to be done to preserve the functionality JP likes.  You don't have to change the implementation of log.msg: it already accepts **kw, specifically for this reason.  A message logged in this manner (with no "message" or "format" event key) will produce no text output in the log.  So the amount of work involved is really just writing one line of code.  Which JP already wrote, here.  It just needs a unit test and a review :).

I do wonder why he went with the PEP8-style underscore parameter names rather than Twisted-style intercapped names though :).

-glyph

P.S.: In the future, please reply inline, it's standard etiquette for this list.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110125/3dd8ea31/attachment.html>

From jasonjwwilliams at gmail.com  Tue Jan 25 10:54:56 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 25 Jan 2011 10:54:56 -0700
Subject: [Twisted-Python] HTTPClient handling LF only servers
Message-ID: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>

Hi Y'all,

Certain servers (notably Hacker News) break HTTPClient because they use LF instead of CRLF to terminate header lines. I've uploaded a patch with tests to ticket 4814 (merged into ticket 2842). 

I'd appreciate a review and some discussion about integrating it. 

-J

Sent via iPhone

Is your e-mail Premiere?


From ddwiggins at advpubtech.com  Tue Jan 25 12:06:22 2011
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 25 Jan 2011 11:06:22 -0800
Subject: [Twisted-Python] Porting twisted methods to a synchronous
	environment
In-Reply-To: <1C271909-9742-41B4-ACCD-01B5BEC11D77@bubblehouse.org>
References: <ihkjpv$ika$1@dough.gmane.org>
	<1C271909-9742-41B4-ACCD-01B5BEC11D77@bubblehouse.org>
Message-ID: <ihn6vf$hlo$1@dough.gmane.org>

On 1/24/2011 12:45 PM, Phil Christensen wrote:
> On Jan 24, 2011, at 2:26 PM, Don Dwiggins wrote:
>> I have a server that provides access to a database in the usual way,
>> using adbapi to talk to an MSSQL server.  Now, I'm facing the need to
>> create an application that can access the server directly.  (In addition
>> to, not instead of.)
> Why do you need to "port twisted methods to a syncronous environment"? Why can't you just write your app asynchronously?

Well, yes, the message subject is a bit misleading.  I was trying to 
think of a way that the async methods in the server could be imported 
directly into the app.  I later remembered a Wiki page on integrating 
Twisted's reactor into a wx app; I think that'll give me what I need.

-- 

Don Dwiggins
Advanced Publishing Technology





From kevin.horn at gmail.com  Tue Jan 25 12:23:59 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 25 Jan 2011 13:23:59 -0600
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
Message-ID: <AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>

On Tue, Jan 25, 2011 at 11:54 AM, Jason J. W. Williams <
jasonjwwilliams at gmail.com> wrote:

> Hi Y'all,
>
>
Howdy, Jason!



> Certain servers (notably Hacker News) break HTTPClient because they use LF
> instead of CRLF to terminate header lines. I've uploaded a patch with tests
> to ticket 4814 (merged into ticket 2842).
>
> I'd appreciate a review and some discussion about integrating it.
>
> -J
>
>
I'm not really in a position to do a review right now, but since:

1) 4814 is effectively a duplicate of 2842
2) 4814 has a clear problem decription
3) 4814 has a patch
4) 2842 is old, and confusing

Can we go ahead and close 2842 in favor of 4814?  We have too many old
tickets floating around...

(To be clear, I'm not asking Jason to close this ticket...I'm asking for the
list's opinion)

Also 3833 is at least similar, if not another duplicate.  It would be nice
if it could be worked on and/or closed along with this issue.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110125/835c3841/attachment.html>

From tom at recursivedream.com  Tue Jan 25 12:43:07 2011
From: tom at recursivedream.com (Tom Davis)
Date: Tue, 25 Jan 2011 14:43:07 -0500
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
Message-ID: <AANLkTi=1KTHOFXcWcorX4oUFuhWiu56iuofyQVBYzQ7Q@mail.gmail.com>

On Tue, Jan 25, 2011 at 2:23 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Tue, Jan 25, 2011 at 11:54 AM, Jason J. W. Williams <
> jasonjwwilliams at gmail.com> wrote:
>
>> Hi Y'all,
>>
>>
> Howdy, Jason!
>
>
>
>> Certain servers (notably Hacker News) break HTTPClient because they use LF
>> instead of CRLF to terminate header lines. I've uploaded a patch with tests
>> to ticket 4814 (merged into ticket 2842).
>>
>> I'd appreciate a review and some discussion about integrating it.
>>
>> -J
>>
>>
> I'm not really in a position to do a review right now, but since:
>
> 1) 4814 is effectively a duplicate of 2842
> 2) 4814 has a clear problem decription
> 3) 4814 has a patch
> 4) 2842 is old, and confusing


> Can we go ahead and close 2842 in favor of 4814?  We have too many old
> tickets floating around...
>
> (To be clear, I'm not asking Jason to close this ticket...I'm asking for
> the list's opinion)
>

I most certainly agree that 4814 is the more relevant, actionable ticket.
2842 is marred in now-useless history and requires reading through 13
comments just to get to the current point of the ticket as the summary and
description give no indication of it.

4814 is more like a new building constructed on top of 2842's rubble.


>
> Also 3833 is at least similar, if not another duplicate.  It would be nice
> if it could be worked on and/or closed along with this issue.
>

Agreed about 3833. Who cares about finding sites that do/don't send LF? I
could talk about how naively-implemented the whole HN stack is all day, but
it wouldn't get us closer to a resolution for Twisted's web client(s). If
the RFC recommends it for "Tolerant Applications", the only decision is
whether or not we implement that part of the RFC. If it requires more time
to discuss than to actually fix, that means we should probably just fix it
and be done with it.


>
> Kevin Horn
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110125/5f013f98/attachment.html>

From exarkun at twistedmatrix.com  Tue Jan 25 12:53:20 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 25 Jan 2011 19:53:20 -0000
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
Message-ID: <20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>

On 07:23 pm, kevin.horn at gmail.com wrote:
>On Tue, Jan 25, 2011 at 11:54 AM, Jason J. W. Williams <
>jasonjwwilliams at gmail.com> wrote:
>>Hi Y'all,
>Howdy, Jason!
>>Certain servers (notably Hacker News) break HTTPClient because they 
>>use LF
>>instead of CRLF to terminate header lines. I've uploaded a patch with 
>>tests
>>to ticket 4814 (merged into ticket 2842).
>>
>>I'd appreciate a review and some discussion about integrating it.
>>
>>-J
>I'm not really in a position to do a review right now, but since:
>
>1) 4814 is effectively a duplicate of 2842
>2) 4814 has a clear problem decription
>3) 4814 has a patch
>4) 2842 is old, and confusing
>
>Can we go ahead and close 2842 in favor of 4814?  We have too many old
>tickets floating around...

#4814 is already closed.  If the #2842 description is confusing, then 
feel free to update it to be more clear. :)

We don't close old tickets as duplicates of new tickets, though.  That 
doesn't make sense, and it's annoying to the original reporter/cc list 
as well.
>
>(To be clear, I'm not asking Jason to close this ticket...I'm asking 
>for the
>list's opinion)
>
>Also 3833 is at least similar, if not another duplicate.  It would be 
>nice
>if it could be worked on and/or closed along with this issue.

Similar, certainly.  But it's for the other HTTP client implementation. 
There won't be any code in common in the resolution.

I certainly agree that if it's worth fixing for one it's worth fixing 
for the other, though, and I hope someone will put #3833 up for review 
soon. :)

Jean-Paul



From jasonjwwilliams at gmail.com  Tue Jan 25 13:03:38 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 25 Jan 2011 13:03:38 -0700
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
Message-ID: <AANLkTinakS-Gypz6n=qj5JFqJYvVV-ZUqoXq7Gw9NZJY@mail.gmail.com>

>>
>>Can we go ahead and close 2842 in favor of 4814?  We have too many old
>>tickets floating around...
>
> #4814 is already closed.  If the #2842 description is confusing, then
> feel free to update it to be more clear. :)
>
> We don't close old tickets as duplicates of new tickets, though.  That
> doesn't make sense, and it's annoying to the original reporter/cc list
> as well.
>>

Honestly, whether 4814 or 2842 is the main ticket for the problem
doesn't matter to me. I'd just like to get the fix put in. I believe
my patch is attached to 2842 when 4814 got closed as a dup.

-J



From jasonjwwilliams at gmail.com  Tue Jan 25 14:52:00 2011
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 25 Jan 2011 14:52:00 -0700
Subject: [Twisted-Python] Names DNS Client too chatty
In-Reply-To: <06F2DF10-BDAE-4CC8-9AB0-C17973A92B2D@twistedmatrix.com>
References: <3B4265EE-3427-4A53-96BE-5E09277861F5@gmail.com>
	<20110123214541.4b686245@alnitak.communicationvalley.it>
	<A80AC1DB-79F0-4E93-99FB-15881549A0DF@gmail.com>
	<C8AA8688-9E44-4455-8A05-90B45E9D8976@twistedmatrix.com>
	<AANLkTinRsNm7k87QBR5sz=gQzsWUFd-nuNt0dGXge6Hv@mail.gmail.com>
	<EC0C80BC-1A79-429A-B446-3DD780F611C8@twistedmatrix.com>
	<AANLkTimEyi_2cB+WOMZuc9CYqWM71XF8-QqCArcdXMnw@mail.gmail.com>
	<B8D523E7-0EE2-4F21-B67E-7E0B1ACF53D3@twistedmatrix.com>
	<4D3D5734.1080301@imperial.ac.uk>
	<AANLkTins2URGbTbAV=JQZeYwW=BLJ8jwj28L0akkAfJL@mail.gmail.com>
	<20110124180924.1699.2082721948.divmod.xquotient.348@localhost.localdomain>
	<AANLkTimD=wONP0u6Sz78V0M+DUqPtNd3t26Oxir+VGuZ@mail.gmail.com>
	<06F2DF10-BDAE-4CC8-9AB0-C17973A92B2D@twistedmatrix.com>
Message-ID: <AANLkTimW1McOKA33hUSYkWWiC65sj2FdNe27V7B=yMnb@mail.gmail.com>

On Mon, Jan 24, 2011 at 10:01 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:

> While I agree with the general sentiment (incremental improvements that can
> be done now are pretty much always better than gigantic overhauls that have
> to be put off until later) the current logging system is already pretty much
> designed for this, we're just not using it right.  Trimming JP's message a
> bit to just the key part:
>
> This doesn't even have to mean changes to LogPublisher.  It could mean
> replacing:
>
>  log.msg("%s starting on %s"%(self.protocol.__class__,
>
> self._realPortNumber))
>
> with:
>
>  log.msg(
>
>     event_source=self,
>
>     event_type="start",
>
>     protocol=self.protocol,
>
>     port_number=self._realPortNumber)
>

Playing with this a bit, the above change does indeed blackhole the
log message. The question then is how someone can get these actually
outputted the log when they want to. Right now the TCP unit test for
test_connectionLostLogMsg expects textual output to the log. I'm
re-working the test to instead expect the dict with the same values
passed in, but that just ensures the data is properly passed to
log.msg() not that it's going to show up if you want it to.

-J



From glyph at twistedmatrix.com  Tue Jan 25 15:10:51 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 25 Jan 2011 17:10:51 -0500
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <AANLkTinakS-Gypz6n=qj5JFqJYvVV-ZUqoXq7Gw9NZJY@mail.gmail.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
	<AANLkTinakS-Gypz6n=qj5JFqJYvVV-ZUqoXq7Gw9NZJY@mail.gmail.com>
Message-ID: <79F61ACE-4D29-40A7-B12F-CAEDC10E1558@twistedmatrix.com>


On Jan 25, 2011, at 3:03 PM, Jason J. W. Williams wrote:

>>> 
>>> Can we go ahead and close 2842 in favor of 4814?  We have too many old
>>> tickets floating around...
>> 
>> #4814 is already closed.  If the #2842 description is confusing, then
>> feel free to update it to be more clear. :)
>> 
>> We don't close old tickets as duplicates of new tickets, though.  That
>> doesn't make sense, and it's annoying to the original reporter/cc list
>> as well.
>>> 
> 
> Honestly, whether 4814 or 2842 is the main ticket for the problem
> doesn't matter to me. I'd just like to get the fix put in. I believe
> my patch is attached to 2842 when 4814 got closed as a dup.

Shouldn't 2842 be in review, then?

(In case you're not familiar with them: <http://twistedmatrix.com/trac/wiki/ReviewProcess>, <http://twistedmatrix.com/trac/wiki/TwistedDevelopment>.)




From kevin.horn at gmail.com  Tue Jan 25 16:09:10 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 25 Jan 2011 17:09:10 -0600
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
Message-ID: <AANLkTimBpUqZB1nmhRbrhKN5MTLUOmtJ658R3DzHK=rg@mail.gmail.com>

On Tue, Jan 25, 2011 at 1:53 PM, <exarkun at twistedmatrix.com> wrote:

> On 07:23 pm, kevin.horn at gmail.com wrote:
> >On Tue, Jan 25, 2011 at 11:54 AM, Jason J. W. Williams <
> >jasonjwwilliams at gmail.com> wrote:
> >>Hi Y'all,
> >Howdy, Jason!
> >>Certain servers (notably Hacker News) break HTTPClient because they
> >>use LF
> >>instead of CRLF to terminate header lines. I've uploaded a patch with
> >>tests
> >>to ticket 4814 (merged into ticket 2842).
> >>
> >>I'd appreciate a review and some discussion about integrating it.
> >>
> >>-J
> >I'm not really in a position to do a review right now, but since:
> >
> >1) 4814 is effectively a duplicate of 2842
> >2) 4814 has a clear problem decription
> >3) 4814 has a patch
> >4) 2842 is old, and confusing
> >
> >Can we go ahead and close 2842 in favor of 4814?  We have too many old
> >tickets floating around...
>
> #4814 is already closed.


Ah. Somehow I thought it was still open.


> If the #2842 description is confusing, then
> feel free to update it to be more clear. :)
>

Well, I can update the summary, but not the description, which is the really
bad part.


>
> We don't close old tickets as duplicates of new tickets, though.  That
> doesn't make sense, and it's annoying to the original reporter/cc list
> as well.
>

This certainly makes sense in theory, but when the last comment from the
nominal owner of the ticket is "I'm not sure what is supposed to be fixed
now.", I'm not sure how helpful it is.  Yes, I realize that you had
responded to it, and clarified the situation.  Just Saying.  There's a LOT
of mutant tickets out there, that don't mean what they say, or have
completely changed in scope.  And there are several which have been closed
in favor of newer, clearer tickets over the years.  I think we need to make
the above policy obvious someplace, like in the developer docs.   Maybe it's
in there, I haven't checked, but I don't recall reading it, and I've read
most of the documentation _many_ times.

In any case, I don't care _that_ much about _which_ one is closed as long as
one is.  Which appears to be the case.


> >
> >(To be clear, I'm not asking Jason to close this ticket...I'm asking
> >for the
> >list's opinion)
> >
> >Also 3833 is at least similar, if not another duplicate.  It would be
> >nice
> >if it could be worked on and/or closed along with this issue.
>
> Similar, certainly.  But it's for the other HTTP client implementation.
> There won't be any code in common in the resolution.
>
> I certainly agree that if it's worth fixing for one it's worth fixing
> for the other, though, and I hope someone will put #3833 up for review
> soon. :)
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110125/7b6caff3/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Jan 26 11:28:32 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 26 Jan 2011 13:28:32 -0500
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <AANLkTimBpUqZB1nmhRbrhKN5MTLUOmtJ658R3DzHK=rg@mail.gmail.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
	<AANLkTimBpUqZB1nmhRbrhKN5MTLUOmtJ658R3DzHK=rg@mail.gmail.com>
Message-ID: <6F8C0F5A-62EB-4DFF-B11D-443BF4EF6748@twistedmatrix.com>


On Jan 25, 2011, at 6:09 PM, Kevin Horn wrote:

> Well, I can update the summary, but not the description, which is the really bad part.

The description _is_ mutable, just only by certain magical people.  (For the purpose of spam protection).

For now, please feel free to attach a comment to any confusing ticket asking for a description update from someone who can do that; we should do this more often as the foci of various tickets shift.  In the near future hopefully a trac admin (maybe me) will have enough time to more effectively curate the group of magical accounts and their attendant powers so that more people (especially documentation wonks like you and Tom) have that ability.




From exarkun at twistedmatrix.com  Wed Jan 26 11:39:23 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 26 Jan 2011 18:39:23 -0000
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <6F8C0F5A-62EB-4DFF-B11D-443BF4EF6748@twistedmatrix.com>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
	<AANLkTimBpUqZB1nmhRbrhKN5MTLUOmtJ658R3DzHK=rg@mail.gmail.com>
	<6F8C0F5A-62EB-4DFF-B11D-443BF4EF6748@twistedmatrix.com>
Message-ID: <20110126183923.1699.1748830462.divmod.xquotient.372@localhost.localdomain>

On 06:28 pm, glyph at twistedmatrix.com wrote:
>
>On Jan 25, 2011, at 6:09 PM, Kevin Horn wrote:
>>Well, I can update the summary, but not the description, which is the 
>>really bad part.
>
>The description _is_ mutable, just only by certain magical people. 
>(For the purpose of spam protection).
>
>For now, please feel free to attach a comment to any confusing ticket 
>asking for a description update from someone who can do that; we should 
>do this more often as the foci of various tickets shift.  In the near 
>future hopefully a trac admin (maybe me) will have enough time to more 
>effectively curate the group of magical accounts and their attendant 
>powers so that more people (especially documentation wonks like you and 
>Tom) have that ability.

I've added Kevin and Tom to the group who can do this.  If someone would 
like to volunteer for the job of putting trusted people into this group, 
let me know.

Jean-Paul



From tom at recursivedream.com  Wed Jan 26 12:07:45 2011
From: tom at recursivedream.com (Tom Davis)
Date: Wed, 26 Jan 2011 14:07:45 -0500
Subject: [Twisted-Python] HTTPClient handling LF only servers
In-Reply-To: <20110126183923.1699.1748830462.divmod.xquotient.372@localhost.localdomain>
References: <D877B77C-0D14-4665-9562-B91F41DD1E5D@gmail.com>
	<AANLkTimfk6cCzmzPajGYDZkEks1+H+HA72=cG4Cykk0M@mail.gmail.com>
	<20110125195320.1699.1637260593.divmod.xquotient.363@localhost.localdomain>
	<AANLkTimBpUqZB1nmhRbrhKN5MTLUOmtJ658R3DzHK=rg@mail.gmail.com>
	<6F8C0F5A-62EB-4DFF-B11D-443BF4EF6748@twistedmatrix.com>
	<20110126183923.1699.1748830462.divmod.xquotient.372@localhost.localdomain>
Message-ID: <AANLkTi=jHWRn+O=iLimZa-By=EmZYu9bVyzkPfQk5BmM@mail.gmail.com>

On Wed, Jan 26, 2011 at 1:39 PM, <exarkun at twistedmatrix.com> wrote:

> On 06:28 pm, glyph at twistedmatrix.com wrote:
> >
> >On Jan 25, 2011, at 6:09 PM, Kevin Horn wrote:
> >>Well, I can update the summary, but not the description, which is the
> >>really bad part.
> >
> >The description _is_ mutable, just only by certain magical people.
> >(For the purpose of spam protection).
> >
> >For now, please feel free to attach a comment to any confusing ticket
> >asking for a description update from someone who can do that; we should
> >do this more often as the foci of various tickets shift.  In the near
> >future hopefully a trac admin (maybe me) will have enough time to more
> >effectively curate the group of magical accounts and their attendant
> >powers so that more people (especially documentation wonks like you and
> >Tom) have that ability.
>
> I've added Kevin and Tom to the group who can do this.  If someone would
> like to volunteer for the job of putting trusted people into this group,
> let me know.
>

Thanks, I can now more efficiently exercise my obsessive compulsions!


>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110126/d03df569/attachment.html>

From albert.brandl at weiermayer.com  Fri Jan 28 01:29:32 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Fri, 28 Jan 2011 09:29:32 +0100
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
Message-ID: <20110128082932.GB2151@weiermayer.com>

Hi!

In our project, we accumulate data from various sources. Some of them are
connected via serial line (e.g. a GPS receiver and a weather station).

I'd like to run the application with twistd. But it looks as if SerialPort
does not really fit into this framework. It does not implement IService,
so `my_serial_port.setServiceParent(collection)` does not work.

Is there any technical reason that SerialPort does not implement 
IService? Could you suggest a workaround for this problem (other than 
dumping t.a.s.Application ;-))?

Best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From twisted at ralphm.ik.nu  Fri Jan 28 03:00:43 2011
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Fri, 28 Jan 2011 11:00:43 +0100
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <20110128082932.GB2151@weiermayer.com>
References: <20110128082932.GB2151@weiermayer.com>
Message-ID: <1296208843.13413.7.camel@dwaal>

On Fri, 2011-01-28 at 09:29 +0100, Albert Brandl wrote:
> Hi!
> 
> In our project, we accumulate data from various sources. Some of them are
> connected via serial line (e.g. a GPS receiver and a weather station).
> 
> I'd like to run the application with twistd. But it looks as if SerialPort
> does not really fit into this framework. It does not implement IService,
> so `my_serial_port.setServiceParent(collection)` does not work.
> 
> Is there any technical reason that SerialPort does not implement 
> IService? Could you suggest a workaround for this problem (other than 
> dumping t.a.s.Application ;-))?

One way to do this, is using t.a.i.GenericClient to hook up the device
to the protocol. This is also a Service that can be hooked up to an
Application. Unfortunately, it uses the now deprecated connectWith
method on a reactor, and therefore GenericClient has been deprecated as
well.

exarkun suggested a new FileDescriptorClient that might use the
reactor's addReader and addWriter methods.

--
ralphm






From itamar at itamarst.org  Fri Jan 28 06:25:52 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 28 Jan 2011 08:25:52 -0500
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <20110128082932.GB2151@weiermayer.com>
References: <20110128082932.GB2151@weiermayer.com>
Message-ID: <1296221152.1762.3.camel@blake>

On Fri, 2011-01-28 at 09:29 +0100, Albert Brandl wrote:
> I'd like to run the application with twistd. But it looks as if SerialPort
> does not really fit into this framework. It does not implement IService,
> so `my_serial_port.setServiceParent(collection)` does not work.

Just implement your own service - subclass t.a.s.Service, write your own
startService and stopService methods that start and stop the serial
port.

> Is there any technical reason that SerialPort does not implement 
> IService?

The TCP port doesn't implement IService either... A service is supposed
to be something you can start and stop, and encapsulates a
self-contained piece of business logic. The purpose is both deployment
and ease of regression testing. So maybe your service starts both a
webserver and a serialport, because it requires both -- which is why
mostly you should just implement your own service classes.

-Itamar




From kevin.horn at gmail.com  Fri Jan 28 08:38:07 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 28 Jan 2011 09:38:07 -0600
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <1296221152.1762.3.camel@blake>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
Message-ID: <AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>

On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

>
> A service is supposed
> to be something you can start and stop, and encapsulates a
> self-contained piece of business logic.
>
> -Itamar
>
>
>
This or something very much like it should be in the Twisted Glossary.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110128/9e4286e8/attachment.html>

From tom at recursivedream.com  Fri Jan 28 09:41:25 2011
From: tom at recursivedream.com (Tom Davis)
Date: Fri, 28 Jan 2011 11:41:25 -0500
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
Message-ID: <AANLkTi=A7-_XF-EwwDrPTpqv5MqK+tYo4OF4M-JOYq7A@mail.gmail.com>

On Fri, Jan 28, 2011 at 10:38 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

>
>
> On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <
> itamar at itamarst.org> wrote:
>
>>
>> A service is supposed
>> to be something you can start and stop, and encapsulates a
>> self-contained piece of business logic.
>>
>> -Itamar
>>
>>
>>
> This or something very much like it should be in the Twisted Glossary.
>

I'd love to see concise, human-readable explanations for all of Twisted's
concepts! It's on the list, anyway...


>
> Kevin Horn
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110128/052b6197/attachment.html>

From glyph at twistedmatrix.com  Fri Jan 28 12:33:18 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 28 Jan 2011 14:33:18 -0500
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
Message-ID: <6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>


On Jan 28, 2011, at 10:38 AM, Kevin Horn wrote:

> 
> 
> On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> A service is supposed
> to be something you can start and stop, and encapsulates a
> self-contained piece of business logic.
> 
> -Itamar
> 
> 
> 
> This or something very much like it should be in the Twisted Glossary.
> 
> Kevin Horn 

The whole idea of a glossary concerns me a little bit.  One way I frequently see it done is vague little snippets of text like this, and I don't like that.  Not to say that Itamar's answer to this particular question was incorrect or inappropriate, I just wouldn't want to see this enshrined as the official, central definition.

However, Twisted does have its own jargon and a dictionary to help the novice parse it would be a good thing.

What I'd really like to see in this regard is to make sure that every "jargon term" is linked straight to API documentation, since we've gone to some trouble to make our jargon match the names used in code as closely as possible*.  In this case, <http://twistedmatrix.com/documents/10.2.0/api/twisted.application.service.IService.html>. If the API documentation is not sufficient (which in this case it may well not be), let's make the API documentation sufficient.  Don't fortify it with a redundant official glossary listing that has to be maintained in parallel and updated in synch with the API docs.

Thoughts?

*: The one exception being talk of Deferreds which have 'fired' or 'failed', when the methods are called 'callback' and 'errback'.  I think this points to a weakness in the API naming though, and we should eventually change those names to match the jargon.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110128/96f20747/attachment.html>

From kevin.horn at gmail.com  Fri Jan 28 15:47:54 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 28 Jan 2011 16:47:54 -0600
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
Message-ID: <AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>

On Fri, Jan 28, 2011 at 1:33 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 28, 2011, at 10:38 AM, Kevin Horn wrote:
>
>
>
> On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <
> itamar at itamarst.org> wrote:
>
>>
>> A service is supposed
>> to be something you can start and stop, and encapsulates a
>> self-contained piece of business logic.
>>
>> -Itamar
>>
>>
>>
> This or something very much like it should be in the Twisted Glossary.
>
> Kevin Horn
>
>
> The whole idea of a glossary concerns me a little bit.
>

You're just saying that because you don't want anyone else to understand
what you're saying ;)

Seriously though.  When I first started thinking about ways to improve the
documentation.  The _first_ thing I thought was missing was decent
explanations of some of these things.  Whether it's in a glossary or
someplace else, clear definitions need to exist for all the major Twisted
concepts (people may disagree on what is or is not major, and that's fine).
Putting these definitions (or links to them) in a glossary keeps them all
together and easy to find and refer to.  One of the first thing I look for
in any software documentation is a glossary or some set of definitions that
I can refer to while I'm _reading_ the API docs or whatever.

Solving problems through software requires finding the right abstractions,
which IMO depends a great deal on finding the right vocabulary for those
abstractions.  I know the Twisted devs spend a lot of time and energy trying
to find exactly the right word for a class, or a method, or whatever.  Let's
communicate that to new people!  If you don't want a "glossary", then we'll
do something else, but I think it's important to have all of the really
critical concepts described in one place somewhere.

Also consider the problem of reverse human lookup:  "Oh man, what was that
thing called that stops and starts Twisted code at the appropriate times?"

If you stick that into a search engine, you probably won't find it for a
loooong time.  But if there's a glossary, you just look there, and you find
it pretty easily.


> One way I frequently see it done is vague little snippets of text like
> this, and I don't like that.
>

Well, I consider it much more meaningful than what is currently there.  Not
saying it's really sufficient, but it is succinct.  I think what I'd like to
see is a "glossary" entry with:

- an API link (e.g. "An object which implements the IService Interface" --
and yes, it should be a proper English sentence.)
- A succinct definition (like Itamar's quip above)
- a paragraph or two of discussion (not too long though!)
- "see also" links to HOWTO's etc.

I want to say that I do NOT think we should be trying to include every
single idea/concept/interface/class/whatever in whatever glossary comes up.
Just the main concepts.

Not to say that Itamar's answer to this particular question was incorrect or
> inappropriate, I just wouldn't want to see this enshrined as the official,
> central definition.
>
> However, Twisted does have its own jargon and a dictionary to help the
> novice parse it would be a good thing.
>
> What I'd really like to see in this regard is to make sure that every
> "jargon term" is linked straight to API documentation, since we've gone to
> some trouble to make our jargon match the names used in code as closely as
> possible*.  In this case, <
> http://twistedmatrix.com/documents/10.2.0/api/twisted.application.service.IService.html>.
> If the API documentation is not sufficient (which in this case it may well
> not be), let's make the API documentation sufficient*.*  Don't fortify it
> with a redundant official glossary listing that has to be maintained in
> parallel and updated in synch with the API docs.
>

I'm not sure how much of a problem maintaining it would be, especially as I
agree that linking to the API docs is probably a good idea (though I think a
lot of the docstrings in there could be greatly improved).  For one thing,
how often has the _intent_ of the IProtocol interface (which has no
docstring, btw) changed?  And how often does someone show up on IRC who
doesn't understand what a Protocol object is show up?


> Thoughts?
>
>
I think we've totally hijacked this thread :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110128/8c7390be/attachment.html>

From glyph at twistedmatrix.com  Fri Jan 28 18:50:54 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 28 Jan 2011 20:50:54 -0500
Subject: [Twisted-Python] glossary (was Re: Using SerialPort with
	t.a.s.Application)
In-Reply-To: <AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>
Message-ID: <A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>


On Jan 28, 2011, at 5:47 PM, Kevin Horn wrote:

> 
> 
> On Fri, Jan 28, 2011 at 1:33 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> On Jan 28, 2011, at 10:38 AM, Kevin Horn wrote:
> 
>> 
>> 
>> On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>> 
>> A service is supposed
>> to be something you can start and stop, and encapsulates a
>> self-contained piece of business logic.
>> 
>> -Itamar
>> 
>> 
>> 
>> This or something very much like it should be in the Twisted Glossary.
>> 
>> Kevin Horn 
> 
> The whole idea of a glossary concerns me a little bit.  
> 
> You're just saying that because you don't want anyone else to understand what you're saying ;)

I am aggrieved that you would insinuate any premeditated obfuscatory animus appertaining to my person or those of my associates.  I maintain an amaranthine focus on limpid exposition and efficacious intercommunication.

> Seriously though.  When I first started thinking about ways to improve the documentation.  The _first_ thing I thought was missing was decent explanations of some of these things.  Whether it's in a glossary or someplace else, clear definitions need to exist for all the major Twisted concepts (people may disagree on what is or is not major, and that's fine).  Putting these definitions (or links to them) in a glossary keeps them all together and easy to find and refer to.  One of the first thing I look for in any software documentation is a glossary or some set of definitions that I can refer to while I'm _reading_ the API docs or whatever.

If you need a glossary open while you're reading the API docs, that means that the docs you're reading are insufficiently marked up.  The word 'service' (in this context) should _always_ itself be a hyperlink to the IService interface.  We do this pretty consistently in all new documentation.  Similarly 'deferred' should always be a link to twisted.internet.defer.Deferred.  <http://epydoc.sourceforge.net/epytext.html> has more detail on how to format these if you want to do clever stuff like have a lower-case word like 'service' link to the IService docs.

I'm totally on board with making a list of these common abstractions outside the API docs, but 99% of what that list should do is provide a definitive index of links into the API docs to call out the top important interfaces you need to read about.

Also, the existing API docs for many of the core concepts are terrible, or even (cringe) non-existent in places, so they could certainly stand to be improved.  I'm not saying our existing docs are great, just that we should have one great index of terms and not five mediocre ones.

> Solving problems through software requires finding the right abstractions, which IMO depends a great deal on finding the right vocabulary for those abstractions.  I know the Twisted devs spend a lot of time and energy trying to find exactly the right word for a class, or a method, or whatever.  Let's communicate that to new people!  If you don't want a "glossary", then we'll do something else, but I think it's important to have all of the really critical concepts described in one place somewhere.

I should have qualified my discomfort with the term 'glossary' a bit more.  We do need the thing you're talking about.  My only concern is redundancy.  Even if we had awesome API documentation for all of these things, there's still a bootstrapping phase where people are not sure which classes are one-off utilities and which things are core abstractions they'll be using every day.

> Also consider the problem of reverse human lookup:  "Oh man, what was that thing called that stops and starts Twisted code at the appropriate times?"
> 
> If you stick that into a search engine, you probably won't find it for a loooong time.  But if there's a glossary, you just look there, and you find it pretty easily.

Well, that exact phrase, no; but "start and stop twisted application", and "start and stop twisted service" both point at the right API doc.  We should probably work a bit harder to make 'start stop twisted' find that page first :).

> One way I frequently see it done is vague little snippets of text like this, and I don't like that.  
> 
> Well, I consider it much more meaningful than what is currently there.  Not saying it's really sufficient, but it is succinct.  I think what I'd like to see is a "glossary" entry with:
> 
> - an API link (e.g. "An object which implements the IService Interface" -- and yes, it should be a proper English sentence.)

This I certainly agree with.

> - A succinct definition (like Itamar's quip above)
> - a paragraph or two of discussion (not too long though!)

Why can't this just be in the API doc?

> - "see also" links to HOWTO's etc.

Again - why not in the API doc?  If someone were to find the concept via some other documentation that described the term in question as a return type or argument rather than a generic word, presumably that person might also want to read the narrative documentation.

> I'm not sure how much of a problem maintaining it would be, especially as I agree that linking to the API docs is probably a good idea (though I think a lot of the docstrings in there could be greatly improved).  For one thing, how often has the _intent_ of the IProtocol interface(which has no docstring, btw) changed?

So, first: aaaaaauuugh.  Is there a doc bug for that?  That is an interface which really, really needs a docstring.  Can you submit a patch, like, right now? :)

Second: the intent hasn't changed often.  But clearly we need to update the documentation to document that intent better, and I hope that happens more often than it does.  Narrative vs. reference documentation is already a split, albeit a necessary one in my opinion.  Narrative vs. code-reference vs. language-reference seems like we're just splitting hairs.

> And how often does someone show up on IRC who doesn't understand what a Protocol object is show up?

Actually... I don't remember IProtocol being a big problem.  Which is slightly surprising, given that it has no docstring.  Maybe everyone who has run into a confusion at this basic stage has just given up, or maybe the method docstrings are good enough, or maybe the learn about it from a tutorial.

> Thoughts?
> 
> 
> I think we've totally hijacked this thread :)

Yes, retitled appropriately.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110128/1fa2ffbb/attachment.html>

From kevin.horn at gmail.com  Fri Jan 28 20:51:13 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 28 Jan 2011 21:51:13 -0600
Subject: [Twisted-Python] glossary (was Re: Using SerialPort with
	t.a.s.Application)
In-Reply-To: <A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>
	<A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>
Message-ID: <AANLkTimfSAhgZtKY4vVmB=uVoSxMyV5ciny1Ment6d4e@mail.gmail.com>

On Fri, Jan 28, 2011 at 7:50 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 28, 2011, at 5:47 PM, Kevin Horn wrote:
>
>
>
> On Fri, Jan 28, 2011 at 1:33 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>>
>> On Jan 28, 2011, at 10:38 AM, Kevin Horn wrote:
>>
>>
>>
>> On Fri, Jan 28, 2011 at 7:25 AM, Itamar Turner-Trauring <
>> itamar at itamarst.org> wrote:
>>
>>>
>>> A service is supposed
>>> to be something you can start and stop, and encapsulates a
>>> self-contained piece of business logic.
>>>
>>> -Itamar
>>>
>>>
>>>
>> This or something very much like it should be in the Twisted Glossary.
>>
>> Kevin Horn
>>
>>
>> The whole idea of a glossary concerns me a little bit.
>>
>
> You're just saying that because you don't want anyone else to understand
> what you're saying ;)
>
>
> I am aggrieved that you would insinuate any premeditated obfuscatory animus
> appertaining to my person or those of my associates.  I maintain an
> amaranthine focus on limpid exposition and efficacious intercommunication.
>
>
Hee!  Told you so :)

> Seriously though.  When I first started thinking about ways to improve the
> documentation.  The _first_ thing I thought was missing was decent
> explanations of some of these things.  Whether it's in a glossary or
> someplace else, clear definitions need to exist for all the major Twisted
> concepts (people may disagree on what is or is not major, and that's fine).
> Putting these definitions (or links to them) in a glossary keeps them all
> together and easy to find and refer to.  One of the first thing I look for
> in any software documentation is a glossary or some set of definitions that
> I can refer to while I'm _reading_ the API docs or whatever.
>
>
> If you need a glossary open while you're reading the API docs, that means
> that the docs you're reading are insufficiently marked up.  The word
> 'service' (in this context) should _always_ itself be a hyperlink to the
> IService interface.  We do this pretty consistently in all new
> documentation.  Similarly 'deferred' should always be a link to
> twisted.internet.defer.Deferred.  <
> http://epydoc.sourceforge.net/epytext.html> has more detail on how to
> format these if you want to do clever stuff like have a lower-case word like
> 'service' link to the IService docs.
>
>
You don't need the glossary open while reading the API docs, you need it
open while reading the other stuff.  Hopefully the need for this will fade
as the organization of the existing long-form docs improve.

Plus, you don't necessarily need it "open".  You can mark up a glossary term
in Sphinx and it'll automatically create cross-refs, so you say "What the
heck does that mean?", click the link, and it takes you to the term on the
glossary page.  From there you can get to the API docs, sure.  There should
absolutely be a link there.  But there should also be something that tells
you whether you need to dive into the API docs.


> I'm totally on board with making a *list* of these common abstractions
> outside the API docs, but 99% of what that list should do is provide a
> definitive index of links into the API docs to call out the top important
> interfaces you need to read about.
>

See.  Right there.  You assumed the reader would be looking for what
interfaces they need to read about.  If I'm new to Twisted, and I see some
example code on the web someplace, I'm not going to _see_ the interface it
implements.  I'm going to see probably the class.  So I Google it.  Assuming
I know anything about interfaces (which might be assuming a bit, but might
not), I'll basically know what that is, but right now the API docs aren't a
lot of help for older code, and most of the core things are older code.  And
that assumes there is an interface for whatever abstraction I'm looking
for.  I spent several hours once upon a time sifting through the API docs
and source trying to figure out what (Cred) Avatars came with Twisted.  Some
abstractions don't come with source code.

Now these assumptions are certainly valid in many, if not most, cases.  But
keep in mind we want to make things easy for the new people too.  That's how
we get more new people.


> Also, the existing API docs for many of the core concepts are terrible, or
> even (cringe) non-existent in places, so they could certainly stand to be
> improved.  I'm not saying our existing docs are great, just that we should
> have one great index of terms and not five mediocre ones.
>

Yep.  I have a list of docs tickets to go through, but there's millions more
missing (OK, hopefully not millions, but...).

One of them (at least) is to fix the current glossary, since it's current
state is DISMAL (It has links to the API docs everywhere though).


> Solving problems through software requires finding the right abstractions,
> which IMO depends a great deal on finding the right vocabulary for those
> abstractions.  I know the Twisted devs spend a lot of time and energy trying
> to find exactly the right word for a class, or a method, or whatever.  Let's
> communicate that to new people!  If you don't want a "glossary", then we'll
> do something else, but I think it's important to have all of the really
> critical concepts described in one place somewhere.
>
>
> I should have qualified my discomfort with the term 'glossary' a bit more.
>  We do need the thing you're talking about.  My only concern is redundancy.
>  Even if we had awesome API documentation for all of these things, there's
> still a bootstrapping phase where people are not sure which classes are
> one-off utilities and which things are core abstractions they'll be using
> every day.
>

Yes, exactly.

> Also consider the problem of reverse human lookup:  "Oh man, what was that
> thing called that stops and starts Twisted code at the appropriate times?"
>
> If you stick that into a search engine, you probably won't find it for a
> loooong time.  But if there's a glossary, you just look there, and you find
> it pretty easily.
>
>
> Well, that exact phrase, no; but "start and stop twisted application", and
> "start and stop twisted service" both point at the right API doc.  We should
> probably work a bit harder to make 'start stop twisted' find that page first
> :).
>

OK, well when I ran it through Google the API page didn't even show up on
the first page.  The application framework page did.  Google farm oddness
maybe.


> One way I frequently see it done is vague little snippets of text like
>> this, and I don't like that.
>>
>
> Well, I consider it much more meaningful than what is currently there.  Not
> saying it's really sufficient, but it is succinct.  I think what I'd like to
> see is a "glossary" entry with:
>
> - an API link (e.g. "An object which implements the IService Interface" --
> and yes, it should be a proper English sentence.)
>
>
> This I certainly agree with.
>
> - A succinct definition (like Itamar's quip above)
> - a paragraph or two of discussion (not too long though!)
>
>
> Why can't this just be in the API doc?
>

Well, it can and should, but:
- not every abstraction and/or thing we want to define has source code.
- some people are intimidated by having to go to API docs just to find a
little information about a library.  The way I see it, people go to the API
docs when they want to _use_ a library.  They go to the long-form docs when
they want to find out if library X is the one they want to use.  Perhaps we
disagree here.
- I foresee circumstances where the API docs might not be available.  (e.g.
If you have no net access and you don't have PyDoctor installed...which I
doubt many people do.)  But you might have Sphinx installed.  Or have the
handy-dandy Windows compiled HTML help file for Twisted (which doesn't exist
yet, but should someday...maybe even soon).  Sure you can look in the source
code, but it's kind of a pain if all you want is a definition.

After the Sphinx conversion it _might_ be possible to pull in docstrings
from the API docs into the Sphinx docs.  It certainly would be if the API
docs were marked up according to Sphinx conventions, but even I'm not crazy
enough (yet) to try to change over all of that stuff.  I might be crazy
enough to try to write a piece that converts the epydoc markup into Sphinx
on the fly and then processes it into html or whatever, but I might also
come down with a sudden severe case of sanity.


> - "see also" links to HOWTO's etc.
>
>
> Again - why not in the API doc?  If someone were to find the concept via
> some other documentation that described the term in question as a return
> type or argument rather than a generic word, presumably that person might
> also want to read the narrative documentation.
>
>
It is currently not possible (AFAIK) to link to things in the long-form docs
from the API docs in any kind of maintainable way.  There's a ticket for
this (#2801).  I have some ideas for how it might be fixed after the Sphinx
conversion is done.  I have zero idea how it might be done before that.  You
could put in static hyperlinks in the API markup, but that would be highly
subject to breakage.


> I'm not sure how much of a problem maintaining it would be, especially as I
> agree that linking to the API docs is probably a good idea (though I think a
> lot of the docstrings in there could be greatly improved).  For one thing,
> how often has the _intent_ of the IProtocol interface(which has no
> docstring, btw) changed?
>
>
> So, first: aaaaaauuugh.  Is there a doc bug for that?  That is an interface
> which really, really needs a docstring.  Can you submit a patch, like, right
> now? :)
>
> Second: the intent hasn't changed often.  But clearly we need to update the
> documentation to document that intent better, and I hope that happens more
> often than it does.  Narrative vs. reference documentation is already a
> split, albeit a necessary one in my opinion.  Narrative vs. code-reference
> vs. language-reference seems like we're just splitting hairs.
>
>
But the "language-reference" is an adjunct to the narrative documentation,
IMO.  Like an index, or the table of contents. And when I go to it, I don't
expect/want there to _only_ be an API link there

> And how often does someone show up on IRC who doesn't understand what a
> Protocol object is show up?
>
>
> Actually... I don't remember IProtocol being a big problem.  Which is
> slightly surprising, given that it has no docstring.  Maybe everyone who has
> run into a confusion at this basic stage has just given up, or maybe the
> method docstrings are good enough, or maybe the learn about it from a
> tutorial.
>
>
It seems to me like there's at least one person a week on IRC who needs the
old talk about what Protocols do vs. what Factories do.  Or how they get
their Protocol to make multiple connections.

[Aside: docstring for t.i.p.Factory: "This is a factory which produces
protocols. By default, buildProtocol will create a protocol of the class
given in self.protocol.".
docstring for t.i.i.ProtocolFactory: "Interface for protocol factories."
Aaaaaaaugh!  Some of the old docstrings need a lot of work. It's a separate
issue though.]

Thoughts?
>>
>>
> I think we've totally hijacked this thread :)
>
>
> Yes, retitled appropriately.
>
>
Well done.

In the words of Inigo Montoya, "Lemme sum up":

- I don't think we're too far away from each other in our opinions, but I
think you're more worried about redundancy than I am.  I think once the docs
are more navigable, the glossary will be much more useful, and problems will
be noticed much more quickly than they are now.

- If you want a great example of how I think a glossary should be used with
Sphinx, check out the Pyramid docs (
http://docs.pylonsproject.org/projects/pyramid/dev/index.html). Like that
but with more API links. :)

- In addition, I also think there should be a "Twisted Concepts"
document/section in or near the hopefully-soon-to-be-written intro stuff
that Tom is working on.

- it's going to be an incremental process.  I'm sure we'll have plenty of
time for discussion. :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110128/85813baa/attachment.html>

From kevin.horn at gmail.com  Fri Jan 28 20:53:38 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 28 Jan 2011 21:53:38 -0600
Subject: [Twisted-Python] glossary (was Re: Using SerialPort with
	t.a.s.Application)
In-Reply-To: <A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>
	<A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>
Message-ID: <AANLkTik-CvDr65Usr4w1dBu_AtTYNkzbqMdKFAEjw00S@mail.gmail.com>

>
>
> I'm not sure how much of a problem maintaining it would be, especially as I
> agree that linking to the API docs is probably a good idea (though I think a
> lot of the docstrings in there could be greatly improved).  For one thing,
> how often has the _intent_ of the IProtocol interface(which has no
> docstring, btw) changed?
>
>
> So, first: aaaaaauuugh.  Is there a doc bug for that?  That is an interface
> which really, really needs a docstring.  Can you submit a patch, like, right
> now? :)
>
>
I don't see one.  Nor for the over-terse Factory/IFactory docstrings.  I'll
create one though.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110128/3011a6d0/attachment-0001.html>

From glyph at twistedmatrix.com  Sat Jan 29 04:49:01 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 29 Jan 2011 06:49:01 -0500
Subject: [Twisted-Python] glossary (was Re: Using SerialPort with
	t.a.s.Application)
In-Reply-To: <AANLkTimfSAhgZtKY4vVmB=uVoSxMyV5ciny1Ment6d4e@mail.gmail.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<AANLkTim8s+h9_oDgeUn7mxexw_qq9GDuT4WK_sxaR3L+@mail.gmail.com>
	<A09DABD8-3B5B-42A7-8293-7F71A6F22FE0@twistedmatrix.com>
	<AANLkTimfSAhgZtKY4vVmB=uVoSxMyV5ciny1Ment6d4e@mail.gmail.com>
Message-ID: <12488A73-6ACC-4D2C-8093-1DD469931693@twistedmatrix.com>

On Jan 28, 2011, at 10:51 PM, Kevin Horn wrote:

> right now the API docs aren't a lot of help for older code, and most of the core things are older code.

And that's exactly the problem - I don't want to paper that over with a shiny new project to explain everything in some new location.  I want to fix the API docs.

> And that assumes there is an interface for whatever abstraction I'm looking for.

If there aren't, that's a failure of the implementation, so let's fix that :).  But, okay, 

> I spent several hours once upon a time sifting through the API docs and source trying to figure out what (Cred) Avatars came with Twisted.  Some abstractions don't come with source code.

Yeah uh, okay.  The cred docs are bad and at this point I don't think that anyone except me (and maaaaaybe exarkun) understands them.  This is a bit of an unrelated problem.  The abstractions do have source code, and could be better explained.  And it needs narrative documentation, 

> One of them (at least) is to fix the current glossary, since it's current state is DISMAL (It has links to the API docs everywhere though).

Man, there's a current glossary?  (*opens glossary.xhtml*).  Oh my goodness.  Yes, that's not great.  And yes, please, fix it up.

So again, as the person actually doing the work, you can obviously put your effort wherever you think it's most valuable, but really everything boils down to this: rather than have "a paragraph of discussion" in the glossary, save the discussion for the narrative documentation or the API documentation, as appropriate.  Feel free to edit the API docs or the narrative docs to have good things to link to.

> It is currently not possible (AFAIK) to link to things in the long-form docs from the API docs in any kind of maintainable way.  There's a ticket for this (#2801).  I have some ideas for how it might be fixed after the Sphinx conversion is done.  I have zero idea how it might be done before that.  You could put in static hyperlinks in the API markup, but that would be highly subject to breakage.

Well, let's get that migration done then!  hut, hut!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110129/acafa6c2/attachment.html>

From andrew at bemusement.org  Sat Jan 29 20:47:08 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Sun, 30 Jan 2011 14:47:08 +1100
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
Message-ID: <20110130034708.GD2620@aihal.home.puzzling.org>

Glyph Lefkowitz wrote:
[...]
>    The whole idea of a glossary concerns me a little bit.  …  However, Twisted
>    does have its own jargon and a dictionary to help the novice parse it would
>    be a good thing.
>    What I'd really like to see in this regard is to make sure that every
>    "jargon term" is linked straight to API documentation

We already have a glossary:

<http://twistedmatrix.com/documents/current/core/howto/glossary.html>

And for what it's worth, it's entry for Service is:

    A twisted.application.service.Service [link to API doc]. See
    Application howto [link] for a description of how they relate to
    Applications [glossary link]. 

Superficially, this would appear to satisfy both you and Kevin: there is
a glossary, and it is very explicit (at least in this entry) that the
API doc is the canonical reference.

So whatever it is you're both asking for you perhaps both need to be
clearer about what it is :)

-Andrew.




From exarkun at twistedmatrix.com  Sat Jan 29 22:05:22 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 Jan 2011 05:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1296363922.53.828863123@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110130/e43de892/attachment-0001.html>

From glyph at twistedmatrix.com  Sun Jan 30 01:22:59 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 30 Jan 2011 03:22:59 -0500
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <20110130034708.GD2620@aihal.home.puzzling.org>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<20110130034708.GD2620@aihal.home.puzzling.org>
Message-ID: <C70CB06D-5E01-41A0-B4FD-0287B4450151@twistedmatrix.com>

On Jan 29, 2011, at 10:47 PM, Andrew Bennetts <andrew at bemusement.org> wrote:

> Glyph Lefkowitz wrote:
> [...]
>>   The whole idea of a glossary concerns me a little bit.  …  However, Twisted
>>   does have its own jargon and a dictionary to help the novice parse it would
>>   be a good thing.
>>   What I'd really like to see in this regard is to make sure that every
>>   "jargon term" is linked straight to API documentation
> 
> We already have a glossary:
> 
> <http://twistedmatrix.com/documents/current/core/howto/glossary.html>

Yeah, that came up a bit later in the thread :).  And kevin did mention that maintaining that doc is the first order of business.

> And for what it's worth, it's entry for Service is:
> 
>    A twisted.application.service.Service [link to API doc]. See
>    Application howto [link] for a description of how they relate to
>    Applications [glossary link]. 
> 
> Superficially, this would appear to satisfy both you and Kevin: there is
> a glossary, and it is very explicit (at least in this entry) that the
> API doc is the canonical reference.
> 
> So whatever it is you're both asking for you perhaps both need to be
> clearer about what it is :)

I think that the fact such a discussion was able to go on for so long before we discovered it really just emphasizes another thing that comes up very frequently in these discussions: discoverability of the documentation.  We need more and better links to such things.


From kevin.horn at gmail.com  Sun Jan 30 22:58:04 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sun, 30 Jan 2011 23:58:04 -0600
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <C70CB06D-5E01-41A0-B4FD-0287B4450151@twistedmatrix.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<AANLkTim9zUVn7KeAzQWmDeOKNEwb6Jd4Uzkd1KmBncA0@mail.gmail.com>
	<6CF4D6EB-8BB7-4B6C-B36B-C2EACE4EE085@twistedmatrix.com>
	<20110130034708.GD2620@aihal.home.puzzling.org>
	<C70CB06D-5E01-41A0-B4FD-0287B4450151@twistedmatrix.com>
Message-ID: <AANLkTinQnYTQURJ0_=2r4yq=xXA1bXFi8e4+Kp65buDx@mail.gmail.com>

On Sun, Jan 30, 2011 at 2:22 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Jan 29, 2011, at 10:47 PM, Andrew Bennetts <andrew at bemusement.org>
> wrote:
>
> > Glyph Lefkowitz wrote:
> > [...]
> >>   The whole idea of a glossary concerns me a little bit.  …  However,
> Twisted
> >>   does have its own jargon and a dictionary to help the novice parse it
> would
> >>   be a good thing.
> >>   What I'd really like to see in this regard is to make sure that every
> >>   "jargon term" is linked straight to API documentation
> >
> > We already have a glossary:
> >
> > <http://twistedmatrix.com/documents/current/core/howto/glossary.html>
>
> Yeah, that came up a bit later in the thread :).  And kevin did mention
> that maintaining that doc is the first order of business.
>
> > And for what it's worth, it's entry for Service is:
> >
> >    A twisted.application.service.Service [link to API doc]. See
> >    Application howto [link] for a description of how they relate to
> >    Applications [glossary link].
> >
> > Superficially, this would appear to satisfy both you and Kevin: there is
> > a glossary, and it is very explicit (at least in this entry) that the
> > API doc is the canonical reference.
> >
> > So whatever it is you're both asking for you perhaps both need to be
> > clearer about what it is :)
>
> I think that the fact such a discussion was able to go on for so long
> before we discovered it really just emphasizes another thing that comes up
> very frequently in these discussions: discoverability of the documentation.
>  We need more and better links to such things.
>
>
Well, first off, I did know about the glossary.  It's dismal state is one of
the things that motivated me to start working on Twisted Documentation.  As
I mentioned in the other thread, a glossary is one of the first things I
look for in a documentation set.

Secondly, Twisted actually has 2 glossaries.  One general one (referenced
above) and one specific to Twisted Web (here:
http://twistedmatrix.com/documents/current/web/howto/glossary.html).  It
has, however, only one entry.  I intend in future to combine the two, unless
someone else does it first.

Thirdly, as far as discoverability/navigability of the documentation, I
think Sphinx (*) will help a lot here.  It has all kinds of tools to make
cross-linking as easy as possible, like the toc segments in the sidebar,
prev/next links, glossary links, indexing, etc.

Should help quite a bit, I think.

Kevin Horn

(*)  I know, I _know_!  I'm working on it! :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110130/5e669222/attachment-0001.html>

From jonathan+twisted at jsphere.com  Mon Jan 31 03:31:17 2011
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Mon, 31 Jan 2011 12:31:17 +0200
Subject: [Twisted-Python] A Python enum library with a Twist
Message-ID: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>

Hi,

First off there isn't actually a twist, it's just for Twisted
addressing the points in #4671 [1]. Sorry to disappoint. Secondly I
realise there are already at least a thousand Python enum libraries,
most of which I haven't explored, feel free to mention these with
supporting arguments.

My point of view is that a great many number of these enum libraries
go to long lengths to make stuff too "cute". While having less
not-networking-related code in Twisted may be a more desirable route,
Twisted makes enough use of enum-esque things in the current code base
that it may be easier (maybe even warranted)  to have our own
implementation that can cater directly to the needs of Twisted without
being subjected to the usual irritations of third-party software; also
Twisted's high-qualilty coding and testing standards are only a good
thing.

The current code is hosted on Launchpad [2] and the source code is
viewable on the web [3]. I am aware that there are currently no
unittests or any kind of useful documentation, hopefully the examples
are good enough for now. I'm hoping for some feedback to decide
whether to press ahead or turn back. I've tried to look at as many
Twisted enum use-cases as possible, without trying to cater to every
one individually, however I do still have a few questions:

1. #4671 uses an "asInt" method in the examples, this is obviously
going to require changing all code that uses these enums (of which
there is plenty.) Is this a good idea? It seems easy to forget that
"F_FOO | F_BAR" is not giving you a number.

2. I use "__int__", I don't know if this is horrible or not and
whether I should just use the "asInt" method proposed in the ticket.

3. It seems to me that there are two general cases:
   1. The enum just holds values that have an interesting meaning on
their own (e.g. AMP special keys (ASK, ANSWER, etc.), IRC status codes
(RPL_WHOIS, etc.)) and combining them makes no sense.
   2. The enum holds values that are intended to be combined. i.e. flags.

   Does it make sense to try and combine this behaviour into the same
type? Currently it is and you get an exception when doing certain
things (none of which make any sense, in this context):

>>> (Words.AYE | Words.BEE)
<EnumValueGroup '|': [<EnumValue Words.AYE: 'a'>, <EnumValue Words.BEE: 'b'>]>
>>> (Words.AYE | Words.BEE).value
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "enum.py", line 77, in value
    return reduce(self.op, values)
TypeError: unsupported operand type(s) for |: 'str' and 'str'

>>> Words.fromValue('a')
<EnumValue Words.AYE: 'a'>
>>> Words.fromValue('c') # This value is not in the enumeration and ORing values to get it is impossible.
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "enum.py", line 133, in fromValue
    if target - v < 0:
TypeError: unsupported operand type(s) for -: 'str' and 'str'

Comments appreciated.

[1] <http://twistedmatrix.com/trac/ticket/4671>
[2] <http://code.launchpad.net/~jjacobs/+junk/twistedenum>
[3] <http://bazaar.launchpad.net/~jjacobs/+junk/twistedenum/view/head:/enum.py>

-- 
Jonathan



From itamar at itamarst.org  Mon Jan 31 06:15:14 2011
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 31 Jan 2011 08:15:14 -0500
Subject: [Twisted-Python] A Python enum library with a Twist
In-Reply-To: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
References: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
Message-ID: <1296479714.1796.1.camel@blake>

On Mon, 2011-01-31 at 12:31 +0200, Jonathan Jacobs wrote:

> The current code is hosted on Launchpad [2] and the source code is
> viewable on the web [3].

One comment unrelated to the actual code: we prefer people don't prefix
their projects with "twisted", to prevent confusion. The suggested
prefix for twisted-related projects is tx, so in this case "txEnum" or
"txenum".

-Itamar




From mithrandi at mithrandi.net  Mon Jan 31 06:57:09 2011
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 31 Jan 2011 15:57:09 +0200
Subject: [Twisted-Python] A Python enum library with a Twist
In-Reply-To: <1296479714.1796.1.camel@blake>
References: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
	<1296479714.1796.1.camel@blake>
Message-ID: <AANLkTi=S+yHS0P-FtvdENH93_m32Mys_ds_kSSOedAy5@mail.gmail.com>

On Mon, Jan 31, 2011 at 3:15 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On Mon, 2011-01-31 at 12:31 +0200, Jonathan Jacobs wrote:
>
>> The current code is hosted on Launchpad [2] and the source code is
>> viewable on the web [3].
>
> One comment unrelated to the actual code: we prefer people don't prefix
> their projects with "twisted", to prevent confusion. The suggested
> prefix for twisted-related projects is tx, so in this case "txEnum" or
> "txenum".

I think the intention is for this to be included in Twisted itself, as
part of a resolution for #4671, not distributed as a separate project.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From albert.brandl at weiermayer.com  Mon Jan 31 08:50:54 2011
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Mon, 31 Jan 2011 16:50:54 +0100
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <1296221152.1762.3.camel@blake>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
Message-ID: <20110131155054.GA26811@weiermayer.com>

Hi!

I'm quite happy that my question (or really: Itamar's answer) triggered 
the interesting discussion about glossaries. But there are some aspects 
about SerialPort that are not yet clear to me. So I'm trying to reclaim 
this thread ;-).

On Fri, Jan 28, 2011 at 08:25:52AM -0500, Itamar Turner-Trauring wrote:
> The TCP port doesn't implement IService either...

This is correct. But TCPServer does implement IService, and I was 
looking for an analog I could use for the serial port. I'd like to write 
something along the following lines:

def setupSerialCommunication(multiService):
    lrFactory = MyLineReceiverFactory()
    serialComm = internet.SerialServer(lrFactory, '/dev/ttyS0')
    serialComm.setServiceParent(multiService)

(BTW: I'm not quite sure if SerialServer would belong to the internet
package...)

In my understanding, the communication over the serial line should be 
handled in a similar way to communicating via TCP/IP. So my questions
should have been: Why isn't there an analog to TCPServer for SerialPort?
Would it make sense to add it?

> A service is supposed to be something you can start and stop, and 
> encapsulates a self-contained piece of business logic. The purpose is 
> both deployment and ease of regression testing.

Thanks for the explanation. It is certainly a good idea to think about
the partitioning of the services and reflect it in the code.

> So maybe your service starts both a webserver and a serialport, 
> because it requires both -- which is why mostly you should just 
> implement your own service classes.

There is the class t.a.s.MultiService for encapsulating other services. 
In my current implementation I just instantiate it and add the other 
services; afterwards I set its service Parent to the application. What 
would be the advantage of subclassing Service and redefining its 
startService and stopService methods?

Thanks & best regards,

Albert
-- 
Albert Brandl
Weiermayer Solutions GmbH      | Abteistraße 12, A-4813 Altmünster
phone: +43 (0) 720 70 30 14    | fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com



From tom at recursivedream.com  Mon Jan 31 12:41:38 2011
From: tom at recursivedream.com (Tom Davis)
Date: Mon, 31 Jan 2011 14:41:38 -0500
Subject: [Twisted-Python] Task-based documentation started
Message-ID: <AANLkTinukcpnRc9yviapnkFK_6ChAqTrhk7nnj5bEAoD@mail.gmail.com>

I have the beginnings of some task-based documentation available in
twisted-docs (https://github.com/tdavis/twisted-docs) now. You can find the
built version in the usual place (http://docs.recursivedream.com/twisted/)
-- just remember to bust the cache.

I chose serving web content as a starting point because it seems as common a
task as any. I took some examples from the existing howto (
http://twistedmatrix.com/documents/current/web/howto/using-twistedweb.html),
as well as added some examples of further learning and glossary entries to
make the point. Obviously there's nothing completely usable here yet; it's
primarily an exercise in showing how I'd like to split up sprawling,
semi-random docs like *using-twistedweb* into more coherent, digestible,
stackable pieces. A document to talk about core concepts (Site Objects,
Resources, etc.), sections for supplementary features like Sessions, Virtual
Hosts, etc.

Another advantage of this style is that we can effortlessly stitch together
our own tutorials (were that ever a goal) just by linking in step-wise
fashion to ever-advanced tutorials which themselves wrap back around to core
concepts like, in this case, Applications and the IService stack. It should
be up to the user how deep into the rabbit hole they want to go; right now I
have to slog through two sections to get to a part that tells me how to just
serve a directory of HTML.

Thoughts?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110131/74b014d0/attachment.html>

From exarkun at twistedmatrix.com  Mon Jan 31 15:18:00 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 31 Jan 2011 22:18:00 -0000
Subject: [Twisted-Python] Using SerialPort with t.a.s.Application
In-Reply-To: <20110131155054.GA26811@weiermayer.com>
References: <20110128082932.GB2151@weiermayer.com>
	<1296221152.1762.3.camel@blake>
	<20110131155054.GA26811@weiermayer.com>
Message-ID: <20110131221800.1699.132541088.divmod.xquotient.434@localhost.localdomain>

On 03:50 pm, albert.brandl at weiermayer.com wrote:
>Hi!
>
>I'm quite happy that my question (or really: Itamar's answer) triggered
>the interesting discussion about glossaries. But there are some aspects
>about SerialPort that are not yet clear to me. So I'm trying to reclaim
>this thread ;-).
>
>On Fri, Jan 28, 2011 at 08:25:52AM -0500, Itamar Turner-Trauring wrote:
>>The TCP port doesn't implement IService either...
>
>This is correct. But TCPServer does implement IService, and I was
>looking for an analog I could use for the serial port. I'd like to 
>write
>something along the following lines:
>
>def setupSerialCommunication(multiService):
>    lrFactory = MyLineReceiverFactory()
>    serialComm = internet.SerialServer(lrFactory, '/dev/ttyS0')
>    serialComm.setServiceParent(multiService)
>
>(BTW: I'm not quite sure if SerialServer would belong to the internet
>package...)
>
>In my understanding, the communication over the serial line should be
>handled in a similar way to communicating via TCP/IP. So my questions
>should have been: Why isn't there an analog to TCPServer for 
>SerialPort?
>Would it make sense to add it?

I think that now the way it would make sense to add this is to add a 
serialport endpoint.  This would be usable with 
twisted.internet.endpoints.serverFromEndpoint (or clientFromEndpoint, I 
can never remember which one a serial port is more like).

Then, this endpoint could be combined with a general-purpose endpoint- 
into-service adapter.
>>A service is supposed to be something you can start and stop, and
>>encapsulates a self-contained piece of business logic. The purpose is
>>both deployment and ease of regression testing.
>
>Thanks for the explanation. It is certainly a good idea to think about
>the partitioning of the services and reflect it in the code.
>>So maybe your service starts both a webserver and a serialport,
>>because it requires both -- which is why mostly you should just
>>implement your own service classes.
>
>There is the class t.a.s.MultiService for encapsulating other services.
>In my current implementation I just instantiate it and add the other
>services; afterwards I set its service Parent to the application. What
>would be the advantage of subclassing Service and redefining its
>startService and stopService methods?

If you can accomplish your goals without making a new kind of IService 
implementation, then great!  If it is awkward (for example, if you want 
the web server to have a reference to the protocol currently connected 
to the serial port), then it might be easier if you have your own 
IService implementation that knows about both your web server and your 
serial port.

Jean-Paul



From glyph at twistedmatrix.com  Mon Jan 31 15:22:04 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 31 Jan 2011 14:22:04 -0800
Subject: [Twisted-Python] Task-based documentation started
In-Reply-To: <AANLkTinukcpnRc9yviapnkFK_6ChAqTrhk7nnj5bEAoD@mail.gmail.com>
References: <AANLkTinukcpnRc9yviapnkFK_6ChAqTrhk7nnj5bEAoD@mail.gmail.com>
Message-ID: <BAEC1D4F-2990-4DA7-81CE-82B3BF8A2A92@twistedmatrix.com>


On Jan 31, 2011, at 11:41 AM, Tom Davis wrote:

> Thoughts?

I'll have to write more later, but maybe you should read all of the existing twisted.web documentation first?  I am sorry to say it, but this seems like a less informative and more confusing version of <http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/static-content.html> and <http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/wsgi.html>.

For example: Why are you talking about SimpleHTTPServer?  Does anybody actually use that or know about it any more?  I haven't heard it brought up in years.  For people who do know about what it is, comparing it to that makes it sound like twisted.web is a toy and should not be used in production, since SimpleHTTPServer certainly isn't capable of serving a real site.

Again, the problem is not really the content, we have a surprising amount of content, it's fixing the architecture so that people find the content that they're looking for.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110131/30da83d6/attachment.html>

From glyph at twistedmatrix.com  Mon Jan 31 15:25:06 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 31 Jan 2011 14:25:06 -0800
Subject: [Twisted-Python] A Python enum library with a Twist
In-Reply-To: <AANLkTi=S+yHS0P-FtvdENH93_m32Mys_ds_kSSOedAy5@mail.gmail.com>
References: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
	<1296479714.1796.1.camel@blake>
	<AANLkTi=S+yHS0P-FtvdENH93_m32Mys_ds_kSSOedAy5@mail.gmail.com>
Message-ID: <03675550-DF73-46EF-B578-B1BC9FBDE9B2@twistedmatrix.com>

On Jan 31, 2011, at 5:57 AM, Tristan Seligmann wrote:

> On Mon, Jan 31, 2011 at 3:15 PM, Itamar Turner-Trauring
> <itamar at itamarst.org> wrote:
>> On Mon, 2011-01-31 at 12:31 +0200, Jonathan Jacobs wrote:
>> 
>>> The current code is hosted on Launchpad [2] and the source code is
>>> viewable on the web [3].
>> 
>> One comment unrelated to the actual code: we prefer people don't prefix
>> their projects with "twisted", to prevent confusion. The suggested
>> prefix for twisted-related projects is tx, so in this case "txEnum" or
>> "txenum".
> 
> I think the intention is for this to be included in Twisted itself, as
> part of a resolution for #4671, not distributed as a separate project.

Nevertheless, it isn't present in Twisted yet and so it should have a 'tx' name until that point.  If he really wanted to get 'twisted' into the name, the branch should have been lp:~jjacobs/twisted/enum instead :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110131/a954bb06/attachment.html>

From tom at recursivedream.com  Mon Jan 31 15:39:42 2011
From: tom at recursivedream.com (Tom Davis)
Date: Mon, 31 Jan 2011 17:39:42 -0500
Subject: [Twisted-Python] Task-based documentation started
In-Reply-To: <BAEC1D4F-2990-4DA7-81CE-82B3BF8A2A92@twistedmatrix.com>
References: <AANLkTinukcpnRc9yviapnkFK_6ChAqTrhk7nnj5bEAoD@mail.gmail.com>
	<BAEC1D4F-2990-4DA7-81CE-82B3BF8A2A92@twistedmatrix.com>
Message-ID: <AANLkTikMH5Uj+Q35SkQLTDgi_Qdnk2z4J3hgjvUtry5O@mail.gmail.com>

On Mon, Jan 31, 2011 at 5:22 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jan 31, 2011, at 11:41 AM, Tom Davis wrote:
>
> Thoughts?
>
>
> I'll have to write more later, but maybe you should read *all* of the
> existing twisted.web documentation first?  I am sorry to say it, but this
> seems like a less informative and more confusing version of <
> http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/static-content.html>
> and <
> http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/wsgi.html>.
>
>
It is certainly less informative than those. I borrowed what I did from the
larger "using twisted.web" document just to illustrate some intent. It is by
no means finished or necessarily representative of the actual content of
those sections (static files and wsgi).


> For example: Why are you talking about SimpleHTTPServer?  Does *anybody* actually
> use that or know about it any more?  I haven't heard it brought up in years.
>  For people who do know about what it is, comparing it to that makes it
> sound like twisted.web is a toy and should not be used in production, since
> SimpleHTTPServer certainly isn't capable of serving a real site.
>

Fair enough.


>
> Again, the problem is not really the content, we have a surprising amount
> of content, it's fixing the architecture so that people *find* the content
> that they're looking for.
>

Right, I agree. I'm not saying content *is* the problem. The problem is both
discoverability from the standpoint of ToC, orphaned pages, etc. *and* from
the per-document standpoint. What one really wants to *do* is often mixed in
with the details of how you could do *everything* related to that one task.
Or it's duplicated. Or in a random file elsewhere.

Perhaps it's best to say that you could consider the text in that tutorial
to be the equivalent of "Lorem Ipsum", except context-relevant enough to get
across the general idea of splitting things up by task, complexity, and
level of existing knowledge (or desired future knowledge).

Take <
http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/static-content.html
>:

Tell me the one command I need to serve a directory, *then* show me the code
that one command effectively runs and vaguely what it does. Then tell me
where I can learn about twistd and reactors and Sites and Files. And take
that chunk of [usage -> implementation -> further understanding] and call it
a Task (or sub-Task in the case of serving static files).

The content is already there; it's just about arranging it properly. I hope
that helps clear up my opinion a bit.


>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110131/c5f03fa6/attachment.html>

From jonathan+twisted at jsphere.com  Mon Jan 31 16:07:32 2011
From: jonathan+twisted at jsphere.com (Jonathan Jacobs)
Date: Tue, 1 Feb 2011 01:07:32 +0200
Subject: [Twisted-Python] A Python enum library with a Twist
In-Reply-To: <03675550-DF73-46EF-B578-B1BC9FBDE9B2@twistedmatrix.com>
References: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
	<1296479714.1796.1.camel@blake>
	<AANLkTi=S+yHS0P-FtvdENH93_m32Mys_ds_kSSOedAy5@mail.gmail.com>
	<03675550-DF73-46EF-B578-B1BC9FBDE9B2@twistedmatrix.com>
Message-ID: <AANLkTimihrz-+1=KNGLPj29EJSX0TQhQVvzCeOkORV-7@mail.gmail.com>

On Tue, Feb 1, 2011 at 00:25, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> Nevertheless, it isn't present in Twisted yet and so it should have a 'tx'
> name until that point.  If he really wanted to get 'twisted' into the name,
> the branch should have been lp:~jjacobs/twisted/enum instead :).

There was no real decision making involved in naming the branch, it
needed a name out of necessity and I thought I may have already used
"foo". :)

I've renamed the branch [1] to txEnum, the URL to the file, mentioned
previously, changed too [2].

Hopefully this concludes the naming debacle.

[1] <http://code.launchpad.net/~jjacobs/+junk/txEnum>
[2] <http://bazaar.launchpad.net/~jjacobs/+junk/txEnum/view/head:/enum.py>

-- 
Jonathan



From exarkun at twistedmatrix.com  Mon Jan 31 16:19:56 2011
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 31 Jan 2011 23:19:56 -0000
Subject: [Twisted-Python] Task-based documentation started
In-Reply-To: <AANLkTikMH5Uj+Q35SkQLTDgi_Qdnk2z4J3hgjvUtry5O@mail.gmail.com>
References: <AANLkTinukcpnRc9yviapnkFK_6ChAqTrhk7nnj5bEAoD@mail.gmail.com>
	<BAEC1D4F-2990-4DA7-81CE-82B3BF8A2A92@twistedmatrix.com>
	<AANLkTikMH5Uj+Q35SkQLTDgi_Qdnk2z4J3hgjvUtry5O@mail.gmail.com>
Message-ID: <20110131231956.1699.1955561813.divmod.xquotient.459@localhost.localdomain>

On 10:39 pm, tom at recursivedream.com wrote:
>
>Take <
>http://twistedmatrix.com/documents/10.2.0/web/howto/web-in-60/static- 
>content.html
>>:
>
>Tell me the one command I need to serve a directory, *then* show me the 
>code
>that one command effectively runs and vaguely what it does.

I think this is partially a disagreement over what tasks we actually 
want to document.  If the command line interface gets primacy in the 
documentation, then I think you're writing documentation for end users 
(sys admins, non-programmers).  I don't know about anyone else, but this 
category of documentation hadn't really crossed my mind before.

I think that (ultimately) this is good documentation to have, but I 
don't know if it's as important as getting the programmer-oriented 
documentation in better shape.

Another point to consider is that "twistd web" (and most other twistd 
plugins we provide) are semi-random mish mashes of functionality.  They 
have accreted by contribution from many different people over the years 
with no governing design or goal aside from "expose features from the 
command line".  This does not make them the friendliest tools around. 
The functionality they are missing is often surprising, particularly 
when contrasted with some of the (non-)functionality they do provide.

I don't want to say that they do not bear documenting until their state 
is improved, but if we focused on other areas first, maybe we would have 
something better to document when we eventually get around to things 
like "twistd web".

Jean-Paul



From glyph at twistedmatrix.com  Mon Jan 31 18:04:39 2011
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 31 Jan 2011 17:04:39 -0800
Subject: [Twisted-Python] A Python enum library with a Twist
In-Reply-To: <AANLkTimihrz-+1=KNGLPj29EJSX0TQhQVvzCeOkORV-7@mail.gmail.com>
References: <AANLkTimhx=kEFFyqquKnkcRVHBFPWQZyjZJ0Y24De880@mail.gmail.com>
	<1296479714.1796.1.camel@blake>
	<AANLkTi=S+yHS0P-FtvdENH93_m32Mys_ds_kSSOedAy5@mail.gmail.com>
	<03675550-DF73-46EF-B578-B1BC9FBDE9B2@twistedmatrix.com>
	<AANLkTimihrz-+1=KNGLPj29EJSX0TQhQVvzCeOkORV-7@mail.gmail.com>
Message-ID: <B61C2CF2-2E0F-4F5F-AA7A-98F685589C10@twistedmatrix.com>


On Jan 31, 2011, at 3:07 PM, Jonathan Jacobs wrote:

> On Tue, Feb 1, 2011 at 00:25, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> Nevertheless, it isn't present in Twisted yet and so it should have a 'tx'
>> name until that point.  If he really wanted to get 'twisted' into the name,
>> the branch should have been lp:~jjacobs/twisted/enum instead :).
> 
> There was no real decision making involved in naming the branch, it
> needed a name out of necessity and I thought I may have already used
> "foo". :)
> 
> I've renamed the branch [1] to txEnum, the URL to the file, mentioned
> previously, changed too [2].
> 
> Hopefully this concludes the naming debacle.

Definitively!  Thanks for reacting so fast :-).

> [1] <http://code.launchpad.net/~jjacobs/+junk/txEnum>
> [2] <http://bazaar.launchpad.net/~jjacobs/+junk/txEnum/view/head:/enum.py>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110131/15bca539/attachment.html>

From jason.heeris at gmail.com  Mon Jan 31 21:58:54 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 1 Feb 2011 12:58:54 +0800
Subject: [Twisted-Python] High-level view of Twisted
Message-ID: <AANLkTik-7mR=5XRoKUM0YuRWQgpHLhXGj4TNiboAR+v4@mail.gmail.com>

Hi,

I'd like to come to grips with Twisted, and so far I've been following
and tweaking example after example. But I'm finding it incredibly hard
to get a high level view of the Twisted "landscape" — and because I
don't know what I don't know, it's hard to know what questions to even
ask. I want to get to the point where I can just sit down and know
where to start, and hopefully someone here can give me a bit of
direction.

I understand many of the microscopic components. Deferred results,
file descriptors and sockets, the reactor loop concept — I get those.
I've read the tutorial[1], another Twisted Introduction[2], and about
50% of the API documentation (possibly not the right 50%, though).

But I just can't seem to wrap my head around the interfaces, factories
and wiring it all together. Maybe some examples of the speedbumps I
keep encountering will help:

1. The "finger" intro "Drop Connections" example[3] just straight out
uses the self.transport member of a protocol. But how do I, a Twisted
newbie, know that this even exists? After hours of digging around, I
find it in the docs for a BaseProtocol method[4]. Later on, this same
example uses the "self.factory" member. I still haven't found that
one. Where do I look up these assumed-to-exist members? How do I know
what other members exist?

2. What is a Factory, anyway? What are they *for*?

3. The finger example goes over writing a server — what about an
asynchronous client that must follow a particular protocol? Where do I
start with that? Is there an example?

4. What if I'm not interested in networking? I primarily deal with
serial lines, files and subprocesses... are there examples for those?

Points #3 and #4 are my motivation for using Twisted — I am currently
mired in a pygtk program that uses threads and all sorts of locks and
synchronisation mechanisms to send and receive data over a serial
line, updating UI with progress, errors and success. I'd like to see
if using Twisted simplifies things a bit, and I'll ask a more specific
question about how to structure that when I can condense it to a
reasonable level :)

I hope I'm not being too vague, but Twisted is rather large,
conceptually, to absorb. I keep being pointed to the documentation for
specific parts, but I have no idea how they fit together and that's
what I'm really after.

Thanks,
Jason

[1] http://twistedmatrix.com/documents/current/core/howto/tutorial/index.html
[2] http://krondo.com/?page_id=1327
[3] http://twistedmatrix.com/documents/current/core/howto/tutorial/intro.html#auto4
[4] http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.BaseProtocol.html#makeConnection



From andrew at bemusement.org  Mon Jan 31 22:15:34 2011
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 1 Feb 2011 16:15:34 +1100
Subject: [Twisted-Python] High-level view of Twisted
In-Reply-To: <AANLkTik-7mR=5XRoKUM0YuRWQgpHLhXGj4TNiboAR+v4@mail.gmail.com>
References: <AANLkTik-7mR=5XRoKUM0YuRWQgpHLhXGj4TNiboAR+v4@mail.gmail.com>
Message-ID: <20110201051534.GD9824@aihal.home.puzzling.org>

Jason Heeris wrote:
[...]
> 2. What is a Factory, anyway? What are they *for*?

<http://twistedmatrix.com/documents/current/core/howto/glossary.html#Factory>
says:

  In general, an object that constructs other objects. In Twisted, a Factory
  usually refers to a twisted.internet.protocol.Factory, which constructs
  Protocol instances for incoming or outgoing connections. See Writing
  Servers and Writing Clients. 

(I couldn't resist the opportunity to link to the glossary after the recent
thread about it...)

-Andrew.




From jason.heeris at gmail.com  Mon Jan 31 22:19:45 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 1 Feb 2011 13:19:45 +0800
Subject: [Twisted-Python] High-level view of Twisted
In-Reply-To: <20110201051534.GD9824@aihal.home.puzzling.org>
References: <AANLkTik-7mR=5XRoKUM0YuRWQgpHLhXGj4TNiboAR+v4@mail.gmail.com>
	<20110201051534.GD9824@aihal.home.puzzling.org>
Message-ID: <AANLkTi=n61JUV7aPjEFdZ1X4E89QW3w+AfsZ0G0grAdn@mail.gmail.com>

On 1 February 2011 13:15, Andrew Bennetts <andrew at bemusement.org> wrote:
> Jason Heeris wrote:
> [...]
>> 2. What is a Factory, anyway? What are they *for*?
>
> (I couldn't resist the opportunity to link to the glossary after the recent
> thread about it...)

I completely missed the glossary somehow, thanks :)

— Jason



From jason.heeris at gmail.com  Mon Jan 31 22:21:07 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 1 Feb 2011 13:21:07 +0800
Subject: [Twisted-Python] High-level view of Twisted
In-Reply-To: <20110201051534.GD9824@aihal.home.puzzling.org>
References: <AANLkTik-7mR=5XRoKUM0YuRWQgpHLhXGj4TNiboAR+v4@mail.gmail.com>
	<20110201051534.GD9824@aihal.home.puzzling.org>
Message-ID: <AANLkTikK0nTaV1ckrH8yJm0VT=rAMJdig+EBA==NuZXD@mail.gmail.com>

On 1 February 2011 13:15, Andrew Bennetts <andrew at bemusement.org> wrote:
> Jason Heeris wrote:
> [...]
>> 2. What is a Factory, anyway? What are they *for*?
>
> <http://twistedmatrix.com/documents/current/core/howto/glossary.html#Factory>
> says:

Oh, and I also has a link to a "client writing howto"[1], which was
one of my other questions.

— Jason

[1] http://twistedmatrix.com/documents/current/core/howto/clients.html



From kevin.horn at gmail.com  Mon Jan 31 22:58:14 2011
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 31 Jan 2011 23:58:14 -0600
Subject: [Twisted-Python] High-level view of Twisted
In-Reply-To: <AANLkTik-7mR=5XRoKUM0YuRWQgpHLhXGj4TNiboAR+v4@mail.gmail.com>
References: <AANLkTik-7mR=5XRoKUM0YuRWQgpHLhXGj4TNiboAR+v4@mail.gmail.com>
Message-ID: <AANLkTi=Q=VTX5-=JnaQisJ7KuDV0ncoy-Go95VFpuMt_@mail.gmail.com>

On Mon, Jan 31, 2011 at 10:58 PM, Jason Heeris <jason.heeris at gmail.com>wrote:

> Hi,
>
> I'd like to come to grips with Twisted, and so far I've been following
> and tweaking example after example. But I'm finding it incredibly hard
> to get a high level view of the Twisted "landscape" — and because I
> don't know what I don't know, it's hard to know what questions to even
> ask. I want to get to the point where I can just sit down and know
> where to start, and hopefully someone here can give me a bit of
> direction.
>
> I understand many of the microscopic components. Deferred results,
> file descriptors and sockets, the reactor loop concept — I get those.
> I've read the tutorial[1], another Twisted Introduction[2], and about
> 50% of the API documentation (possibly not the right 50%, though).
>
> But I just can't seem to wrap my head around the interfaces, factories
> and wiring it all together. Maybe some examples of the speedbumps I
> keep encountering will help:
>
> 1. The "finger" intro "Drop Connections" example[3] just straight out
> uses the self.transport member of a protocol. But how do I, a Twisted
> newbie, know that this even exists? After hours of digging around, I
> find it in the docs for a BaseProtocol method[4]. Later on, this same
> example uses the "self.factory" member. I still haven't found that
> one. Where do I look up these assumed-to-exist members? How do I know
> what other members exist?
>

Protocol objects typically (always) have a self.factory method, but you
won't
find it in the docs for a protocol.  The factory has a method called
buildProtocol
(
http://twistedmatrix.com/documents/10.2.0/api/twisted.internet.protocol.Factory.html#buildProtocol
)
which creates Protocol instances and sets the p.factory member to itself.

So it does something like (in the Factory, so self is the Factory instance):
p = self.protocol
p.factory = self
return p

It's a pretty screwy API and is not particularly well documented anywhere.

2. What is a Factory, anyway? What are they *for*?
>

As Andrew said (or quoted) a Factory is an object which creates Protocol
instances when a connection is made. Sometimes that's all there is to it,
but they are often used to store state across connections.  For example,
if you want to know how many connections your IMAP (or whatever) server
currently has open, putting a counter in the Factory which was incremented
each time a connection starts (it creates a protocol) and decremented each
time a connection closes would make sense.

3. The finger example goes over writing a server — what about an
> asynchronous client that must follow a particular protocol? Where do I
> start with that? Is there an example?
>
>
You already found this one. :)


> 4. What if I'm not interested in networking? I primarily deal with
> serial lines, files and subprocesses... are there examples for those?
>
>
Not many, I don't think.  I'm pretty sure there's a serial port example,
though...

(rummage, rummage)

here it is!  check out the mouse.py and gpsfix.py examples under
/doc/core/examples (
http://twistedmatrix.com/trac/browser/trunk/doc/core/examples)


> Points #3 and #4 are my motivation for using Twisted — I am currently
> mired in a pygtk program that uses threads and all sorts of locks and
> synchronisation mechanisms to send and receive data over a serial
> line, updating UI with progress, errors and success. I'd like to see
> if using Twisted simplifies things a bit, and I'll ask a more specific
> question about how to structure that when I can condense it to a
> reasonable level :)
>
> I hope I'm not being too vague, but Twisted is rather large,
> conceptually, to absorb. I keep being pointed to the documentation for
> specific parts, but I have no idea how they fit together and that's
> what I'm really after.
>
> Thanks,
> Jason
>
> [1]
> http://twistedmatrix.com/documents/current/core/howto/tutorial/index.html
> [2] http://krondo.com/?page_id=1327
> [3]
> http://twistedmatrix.com/documents/current/core/howto/tutorial/intro.html#auto4
> [4]
> http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.BaseProtocol.html#makeConnection
>
>
A couple of us are getting fired up about cleaning up the documentation to
make it easier for those new to Twisted to find what they're looking for, so
please do speak up with any feedback you have.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20110131/8b927413/attachment.html>

From jason.heeris at gmail.com  Mon Jan 31 23:19:10 2011
From: jason.heeris at gmail.com (Jason Heeris)
Date: Tue, 1 Feb 2011 14:19:10 +0800
Subject: [Twisted-Python] High-level view of Twisted
In-Reply-To: <AANLkTi=Q=VTX5-=JnaQisJ7KuDV0ncoy-Go95VFpuMt_@mail.gmail.com>
References: <AANLkTik-7mR=5XRoKUM0YuRWQgpHLhXGj4TNiboAR+v4@mail.gmail.com>
	<AANLkTi=Q=VTX5-=JnaQisJ7KuDV0ncoy-Go95VFpuMt_@mail.gmail.com>
Message-ID: <AANLkTi=B_d0HE9jgaSTAyr22A5LAXetBR6W_+YreCdHd@mail.gmail.com>

On 1 February 2011 13:58, Kevin Horn <kevin.horn at gmail.com> wrote:
> A couple of us are getting fired up about cleaning up the documentation to
> make it easier for those new to Twisted to find what they're looking for, so
> please do speak up with any feedback you have.

My only suggestion is this: no magic! As per my #1, if an example uses
self.transport, that would be a good time to take the reader aside and
say something like "by the way, self.transport is actually
[description], set in [API link] ... other mysterious attributes you
might need to know about are self.factory, and..."

Even putting that in a special subsection and linking to it would be preferably.

Another example is using "implements" in a class def — I realise it's
from Zope, but there's no harm in explaining it where it's used in an
example.

My $0.02 :)

— Jason



