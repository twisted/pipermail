From spalax at gresille.org  Thu Aug  2 06:36:42 2012
From: spalax at gresille.org (Louis)
Date: Thu, 02 Aug 2012 12:36:42 +0200
Subject: [Twisted-Python] Password hash for Perspective Brokers
In-Reply-To: <CALpq1pa4K1=TXtOaj-DTVbAcSmY-c3160VM1+knC_swc-xbgaQ@mail.gmail.com>
References: <CALpq1pa4K1=TXtOaj-DTVbAcSmY-c3160VM1+knC_swc-xbgaQ@mail.gmail.com>
Message-ID: <501A583A.7050504@gresille.org>

	Hello,

On 27/07/2012 00:07, Flint wrote:
> Hi, i've faced the same problem and submitted a patch a few month ago,
> your can check it here http://twistedmatrix.com/trac/ticket/4398 you'll
> find also a complet example attached.
I read and improved the patch you submitted [1].

Also, to answer to Jean-Paul about a salt already being used in the
authentication [2], I would like to stress that the authentication
method uses two hash methods, which for no reason should be the same
(they can be, but they do not have to).
* The first one (password hash) is the hash method used to store the
password (e.g. crypt(3) for the unix shadow password). It may or may not
be salted.
* The second one (challenge hash) is the hash used during the
challenge/response part of authentication. It is salted, the salt being
a randomly generated string (the challenge).

Right now, password hash is either plain (no hash) or md5, without salt,
and challenge hash is md5, with the challenge as a salt. With the patch
I am submitting, password hash and challenge hash can be any method, the
challenge salt still is a randomly generated string, and the password
salt is anything you want, given that it can be computed given the
username and hashed password.
I drew a sequence diagram in the bug report [1], which can help to
undersand this part

	Cheers,
	Louis

[1] http://twistedmatrix.com/trac/ticket/4398#comment:5
[2] http://twistedmatrix.com/pipermail/twisted-python/2012-July/025928.html



> 
> My first problem was that, the way twisted pb authentication works we're
> supposed to have a plan version of passwords at server side.
> Or this is not always the case, most application store a hashed version
> of the password, the hash method may be different from the one twisted
> pb use to pass the credential over the network
> and thus, we're not able to compare those values.
> 
> In my solution the user can define a custom hash method and tell twisted
> to use it, so that the password given by twisted over the network will
> be hashed the same way that the application does before storing it (in
> database for example), which means we can check if the password is
> correct without having a plain version of it.
> Not that, If we don't "customize" the hash method, the original twisted
> behaviour in used instead, and thus compatibility is preserved.
> 
> -- G
> 
> Message: 1
> 
>     Date: Thu, 26 Jul 2012 12:36:57 -0500
>     From: Kevin Horn <kevin.horn at gmail.com <mailto:kevin.horn at gmail.com>>
>     Subject: Re: [Twisted-Python] Password hash for Perspective Brokers
>     To: Twisted general discussion <twisted-python at twistedmatrix.com
>     <mailto:twisted-python at twistedmatrix.com>>
>     Message-ID:
>            
>     <CA+U=zK3W21_BAg9fbLZzsAmRJXReHsvGmRYb0JLT4sgVV78R7A at mail.gmail.com
>     <mailto:zK3W21_BAg9fbLZzsAmRJXReHsvGmRYb0JLT4sgVV78R7A at mail.gmail.com>>
>     Content-Type: text/plain; charset="iso-8859-1"
> 
>     On Thu, Jul 26, 2012 at 11:43 AM, <exarkun at twistedmatrix.com
>     <mailto:exarkun at twistedmatrix.com>> wrote:
> 
>     > On 02:28 pm, spalax at gresille.org <mailto:spalax at gresille.org> wrote:
>     > >         Hello
>     > >         I have a problem with checkers in Twisted, which could be
>     > >solved by
>     > >adding a new feature. I think I can write the necessary code, but
>     > >before
>     > >doing so, I would like to hear you about it.
>     > >
>     > ># The problem
>     > >
>     > >         If I am right, the only way passwords can be hashed when
>     using
>     > >authentication with perspective brokers is using MD5 [1]. However,
>     > >there
>     > >are two flaws with it.
>     > >
>     > >* First, MD5 is no longer considered sure. It may be possible,
>     from the
>     > >hashed password, to find the original one.
>     > >* Second, in the current implementation of Twisted, no salt is
>     used to
>     > >hash the password. A salt is considered good practise : it is
>     harder to
>     > >find the password from the hashed form, and two identical passwords
>     > >have
>     > >different hashed form, which prevent someone looking at the hashed
>     > >passwords to see if two users have the same password.
>     >
>     > The second point is incorrect.  The hash is salted.  See the `respond`
>     > method in twisted/spread/pb.py.
>     > ># A solution
>     > >
>     > >         I tried to implement the solution proposed in [1], and I
>     think
>     > >I can
>     > >manage to do it. However, this seems to be a not-so-smart hack, which
>     > >is
>     > >not guaranteed to work in future releases of Twisted. That is why
>     I am
>     > >proposing a patch.
>     > >
>     > >         The patch would introduce some arguments to class
>     > >PBServerFactory [2]
>     > >to use (or not) a salt, and a different hash function. I am not
>     settled
>     > >down yet about the new signature of this class, but what is sure is
>     > >that
>     > >the default must be the actual behaviour, not to break programs
>     already
>     > >using Twisted. Then, I hesitate between
>     >
>     > A good approach would be to parameterize the supported authentication
>     > mechanisms in an extensible way, rather than just hard coding one
>     or two
>     > new (probably better) options.
>     >
>     > In other words, a SASL implementation for PB would be the best way to
>     > go.
>     >
>     > The existing API and behavior should indeed be preserved as-is for
>     > backwards compatibility.  The new authentication features should be
>     > exposed under a new API - either as new optional arguments accepted by
>     > PBServerFactory (and perhaps PBClientFactory) and new login methods
>     > (again, probably on those two classes).
>     >
>     > Jean-Paul
>     >
>     >
>     It would probably also help if someone finished the "Generic SASL
>     implementation" ticket.
> 
>     Lessee, who was working on that last?
> 
>     Crap. It was me.
> 
>     Sorry about that.
> 
>     Kevin Horn
>     -------------- next part --------------
>     An HTML attachment was scrubbed...
>     URL:
>     http://twistedmatrix.com/pipermail/twisted-python/attachments/20120726/191265a5/attachment-0001.htm
> 
>     ------------------------------
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From lijian.whu at gmail.com  Fri Aug  3 02:57:57 2012
From: lijian.whu at gmail.com (jian li)
Date: Fri, 3 Aug 2012 14:57:57 +0800
Subject: [Twisted-Python] debug with twisted manhole?
Message-ID: <CAK9xwbpoBCJdchkoYO9Az=SXQgxfp=0gur6CJtOcVXYNhbdoOg@mail.gmail.com>

Hi, All:
I am new to twisted, but I am really like the way twisted does. Here is my
problem? I write some server program with twisted framework. after it was
deployed, I found sometimes twisted thread took too much memory and
sometimes the program just halt without any error information.
    the first thing I came with is debugging. After searching in google,
 It seems twisted manhole was the right thing I should turn to. But another
problem comes now. I can telnet successfully, but I cannot run any
commands, such as "dir()". I always get the same error "?Unknown argument".
<br/>
Is there anyone can help me out? there is very few information about how to
use twisted manhole, even in twisted document. can anyone give me some
documents or links about twisted manhole?<br/>
Thanks a lot. <br/>
here is how I add manhole to my program:<br/>

    application = service.Application(settings.get('PROJECT_NAME'))
    multiService = service.MultiService()

    server = Server() #my original server instance
    multiService.addService(server)
    namespace = {"server": server}
    from twisted.conch.manhole_tap   import makeService
    options = \
    {
    # for some reason, these must
    # all exist, even if None
    'namespace'  : namespace,
    'passwd'     : None, #'pwd.txt',
    'sshPort'    : None,
    'telnetPort' : '8089',
    }
    shell_service = makeService(options)
    multiService.addService(shell_service)
    multiService.setServiceParent(application)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120803/ed45ed06/attachment.htm 

From _ at lvh.cc  Fri Aug  3 13:13:00 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Fri, 3 Aug 2012 19:13:00 +0200
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
Message-ID: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>

Hi,

I'm reading the tap how to: http://twistedmatrix.com/documents/current/core/howto/tap.html

In the conclusion, it says:

? Use it from your development environment
? Install it correctly and use it in deployment

I can get it to work from my development environment, but I can't find anything about installing it. I'm using a fairly run-of-the-mill distribute-powered setup.py. What do I do?

This package will always be installed into a site-packageless virtualenv. Ideally the virtualenv's twistd will know all about the new plugin.

On a tangentially related note, my Options class is completely empty. That's not because my project has no configuration options, but simply because I invariably take them from the environment. Does that mean I'm doing it wrong?

cheers
lvh





From duncan.mcgreggor at gmail.com  Fri Aug  3 14:09:11 2012
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Fri, 3 Aug 2012 11:09:11 -0700
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
Message-ID: <CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>

On Fri, Aug 3, 2012 at 10:13 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
> Hi,
>
> I'm reading the tap how to: http://twistedmatrix.com/documents/current/core/howto/tap.html
>
> In the conclusion, it says:
>
> ? Use it from your development environment
> ? Install it correctly and use it in deployment
>
> I can get it to work from my development environment, but I can't find anything about installing it. I'm using a fairly run-of-the-mill distribute-powered setup.py. What do I do?

Here's an example setup.py:
  https://github.com/dreamhost/akanda/blob/master/setup.py

Note the packages and package_data parameters.

Also, I refresh the plugin cache after setup. This has removed the
problem of Twisted not being able to find newly installed plugins.


d

> This package will always be installed into a site-packageless virtualenv. Ideally the virtualenv's twistd will know all about the new plugin.
>
> On a tangentially related note, my Options class is completely empty. That's not because my project has no configuration options, but simply because I invariably take them from the environment. Does that mean I'm doing it wrong?
>
> cheers
> lvh


From glyph at twistedmatrix.com  Fri Aug  3 22:52:11 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Aug 2012 19:52:11 -0700
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
Message-ID: <890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>


Le Aug 3, 2012 ? 11:09 AM, Duncan McGreggor <duncan.mcgreggor at gmail.com> a ?crit :

> On Fri, Aug 3, 2012 at 10:13 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
>> Hi,
>> 
>> I'm reading the tap how to: http://twistedmatrix.com/documents/current/core/howto/tap.html
>> 
>> In the conclusion, it says:
>> 
>> ? Use it from your development environment
>> ? Install it correctly and use it in deployment
>> 
>> I can get it to work from my development environment, but I can't find anything about installing it. I'm using a fairly run-of-the-mill distribute-powered setup.py. What do I do?
> 
> Here's an example setup.py:
>  https://github.com/dreamhost/akanda/blob/master/setup.py
> 
> Note the packages and package_data parameters.
> 
> Also, I refresh the plugin cache after setup. This has removed the
> problem of Twisted not being able to find newly installed plugins.
> 

I think that this is the following Stack Overflow question:

http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools

There are some issues with the answer there, as noted in the comments, but something like this needs to be in Twisted's documentation someplace, as soon as someone can agree what the right way for all the different packaging configurations you can find yourself in is.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120803/2d5831f6/attachment.htm 

From _ at lvh.cc  Sat Aug  4 02:11:44 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 4 Aug 2012 08:11:44 +0200
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
	<890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
Message-ID: <8F748DAE-0A12-4E84-92D4-238000B175F2@lvh.cc>

On 04 Aug 2012, at 04:52, Glyph <glyph at twistedmatrix.com> wrote:

> I think that this is the following Stack Overflow question:
> 
> http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools

Thanks!

> There are some issues with the answer there, as noted in the comments, but something like this needs to be in Twisted's documentation someplace, as soon as someone can agree what the right way for all the different packaging configurations you can find yourself in is.

Sooo, never, right?

> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From duncan.mcgreggor at gmail.com  Sat Aug  4 02:39:02 2012
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Fri, 3 Aug 2012 23:39:02 -0700
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
	<890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
Message-ID: <CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>

On Fri, Aug 3, 2012 at 7:52 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> Le Aug 3, 2012 ? 11:09 AM, Duncan McGreggor <duncan.mcgreggor at gmail.com>
> a ?crit :
>
> On Fri, Aug 3, 2012 at 10:13 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
>
> Hi,
>
> I'm reading the tap how to:
> http://twistedmatrix.com/documents/current/core/howto/tap.html
>
> In the conclusion, it says:
>
> ? Use it from your development environment
> ? Install it correctly and use it in deployment
>
> I can get it to work from my development environment, but I can't find
> anything about installing it. I'm using a fairly run-of-the-mill
> distribute-powered setup.py. What do I do?
>
>
> Here's an example setup.py:
>  https://github.com/dreamhost/akanda/blob/master/setup.py
>
> Note the packages and package_data parameters.
>
> Also, I refresh the plugin cache after setup. This has removed the
> problem of Twisted not being able to find newly installed plugins.
>
>
> I *think* that this is the following Stack Overflow question:
>
>
> http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools
>

That's a great link; the main solution solves several problems I had run
into, but hadn't had the time to explore/debug. Now I know why...

Thanks!

d


>
> There are some issues with the answer there, as noted in the comments, but
> something like this needs to be in Twisted's documentation someplace, as
> soon as someone can agree what the right way for all the different
> packaging configurations you can find yourself in is.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120803/fd55cafa/attachment.htm 

From exarkun at twistedmatrix.com  Sat Aug  4 06:56:14 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 04 Aug 2012 10:56:14 -0000
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
	<890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
	<CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>
Message-ID: <20120804105614.21368.1449417438.divmod.xquotient.39@localhost6.localdomain6>

On 06:39 am, duncan.mcgreggor at gmail.com wrote:
>On Fri, Aug 3, 2012 at 7:52 PM, Glyph <glyph at twistedmatrix.com> wrote:
>>
>>Le Aug 3, 2012 ? 11:09 AM, Duncan McGreggor 
>><duncan.mcgreggor at gmail.com>
>>a ?crit :
>>
>>On Fri, Aug 3, 2012 at 10:13 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
>>
>>Hi,
>>
>>I'm reading the tap how to:
>>http://twistedmatrix.com/documents/current/core/howto/tap.html
>>
>>In the conclusion, it says:
>>
>>? Use it from your development environment
>>? Install it correctly and use it in deployment
>>
>>I can get it to work from my development environment, but I can't find
>>anything about installing it. I'm using a fairly run-of-the-mill
>>distribute-powered setup.py. What do I do?
>>
>>
>>Here's an example setup.py:
>>  https://github.com/dreamhost/akanda/blob/master/setup.py
>>
>>Note the packages and package_data parameters.
>>
>>Also, I refresh the plugin cache after setup. This has removed the
>>problem of Twisted not being able to find newly installed plugins.
>>
>>
>>I *think* that this is the following Stack Overflow question:
>>
>>
>>http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py- 
>>for-a-twistd-twisted-plugin-that-works-with-setuptools
>
>That's a great link; the main solution solves several problems I had 
>run
>into, but hadn't had the time to explore/debug. Now I know why...

Perhaps we should just add a link to that SO question to the 
documentation, since an actual answer is not likely to be forthcoming in 
the near future.

Jean-Paul
>Thanks!
>
>d
>>
>>There are some issues with the answer there, as noted in the comments, 
>>but
>>something like this needs to be in Twisted's documentation someplace, 
>>as
>>soon as someone can agree what the right way for all the different
>>packaging configurations you can find yourself in is.
>>
>>-glyph
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From duncan.mcgreggor at gmail.com  Sat Aug  4 13:28:03 2012
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 4 Aug 2012 10:28:03 -0700
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <20120804105614.21368.1449417438.divmod.xquotient.39@localhost6.localdomain6>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
	<890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
	<CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>
	<20120804105614.21368.1449417438.divmod.xquotient.39@localhost6.localdomain6>
Message-ID: <CAFJQhU6rrmvDhXcfRzC8TDkh1sfSu=KbyzgDsFJFw5De1jr0Qw@mail.gmail.com>

On Sat, Aug 4, 2012 at 3:56 AM, <exarkun at twistedmatrix.com> wrote:

> On 06:39 am, duncan.mcgreggor at gmail.com wrote:
> >On Fri, Aug 3, 2012 at 7:52 PM, Glyph <glyph at twistedmatrix.com> wrote:
> >>
> >>Le Aug 3, 2012 ? 11:09 AM, Duncan McGreggor
> >><duncan.mcgreggor at gmail.com>
> >>a ?crit :
> >>
> >>On Fri, Aug 3, 2012 at 10:13 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
> >>
> >>Hi,
> >>
> >>I'm reading the tap how to:
> >>http://twistedmatrix.com/documents/current/core/howto/tap.html
> >>
> >>In the conclusion, it says:
> >>
> >>? Use it from your development environment
> >>? Install it correctly and use it in deployment
> >>
> >>I can get it to work from my development environment, but I can't find
> >>anything about installing it. I'm using a fairly run-of-the-mill
> >>distribute-powered setup.py. What do I do?
> >>
> >>
> >>Here's an example setup.py:
> >>  https://github.com/dreamhost/akanda/blob/master/setup.py
> >>
> >>Note the packages and package_data parameters.
> >>
> >>Also, I refresh the plugin cache after setup. This has removed the
> >>problem of Twisted not being able to find newly installed plugins.
> >>
> >>
> >>I *think* that this is the following Stack Overflow question:
> >>
> >>
> >>http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-
> >>for-a-twistd-twisted-plugin-that-works-with-setuptools
> >
> >That's a great link; the main solution solves several problems I had
> >run
> >into, but hadn't had the time to explore/debug. Now I know why...
>
> Perhaps we should just add a link to that SO question to the
> documentation, since an actual answer is not likely to be forthcoming in
> the near future.
>

+1

d
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120804/0da2b70b/attachment.htm 

From glyph at twistedmatrix.com  Sat Aug  4 18:08:58 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 4 Aug 2012 15:08:58 -0700
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
	<890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
	<CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>
Message-ID: <2F10D0BB-3CDF-4507-B853-F06DE9805EF0@twistedmatrix.com>


Le Aug 3, 2012 ? 11:39 PM, Duncan McGreggor <duncan.mcgreggor at gmail.com> a ?crit :

> I think that this is the following Stack Overflow question:
> 
> http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools
> 
> That's a great link; the main solution solves several problems I had run into, but hadn't had the time to explore/debug. Now I know why...
> 
> Thanks!

All I ask in return is that you flesh out the answer even further, if you hit and debug any further issues with the answer :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120804/cd583691/attachment.htm 

From gelonida at gmail.com  Sat Aug  4 18:23:58 2012
From: gelonida at gmail.com (Gelonida N)
Date: Sun, 05 Aug 2012 00:23:58 +0200
Subject: [Twisted-Python] simple example for twisted ssh server with public
	key authentification
Message-ID: <jvk7e6$cjp$1@dough.gmane.org>

Hi,

I just wanted to be sure, whether anybody has a small example snippet of 
a twisted ssh server with public key authentification.




From duncan.mcgreggor at gmail.com  Sat Aug  4 19:59:38 2012
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 4 Aug 2012 16:59:38 -0700
Subject: [Twisted-Python] simple example for twisted ssh server with
 public key authentification
In-Reply-To: <jvk7e6$cjp$1@dough.gmane.org>
References: <jvk7e6$cjp$1@dough.gmane.org>
Message-ID: <CAFJQhU7VVY0pPib=wawr3+f3OVvjsTduxgP-T3o_wEMy8NZcFQ@mail.gmail.com>

On Sat, Aug 4, 2012 at 3:23 PM, Gelonida N <gelonida at gmail.com> wrote:

> Hi,
>
> I just wanted to be sure, whether anybody has a small example snippet of
> a twisted ssh server with public key authentification.
>

So, um, simple? Not sure if I can help you there ;-) This was simple at one
point, when it was part of an IRC logging bot that offered an SSH shell
(manhole) to manipulate live objects, but it has since been split out into
its own project:
  https://github.com/dreamhost/dreamssh

Best case scenario, it provides what you need.

Worst case scenario, you can fork it and remove all the crap that you don't
need ;-)

Note that dreamssh provides the Twisted-standard manhole interpreter, as
well as a custom "echo" interpreter, intended to offer an example of how to
create your own ssh shell (I've started using this in a text-based
adventure game, with the ultimate goal of using it as the interface for a
Twisted-base MUD).

d
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120804/5e896b6d/attachment.htm 

From exarkun at twistedmatrix.com  Sun Aug  5 00:05:49 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 05 Aug 2012 04:05:49 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1344139549.36.2076483847@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120805/989f7b3a/attachment-0001.htm 

From _ at lvh.cc  Sun Aug  5 06:12:18 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sun, 5 Aug 2012 12:12:18 +0200
Subject: [Twisted-Python] AMPBox as an Argument?
In-Reply-To: <20120724132951.3468.1237221315.divmod.xquotient.23@localhost6.localdomain6>
References: <279F3DA8-8AE8-4197-84AF-895B07527B32@lvh.cc>
	<5AB76410-6A1B-4AE0-9208-D718B1BC7334@twistedmatrix.com>
	<04F1EE05-2411-4798-9CAB-15504C9F5A3B@lvh.cc>
	<20120724132951.3468.1237221315.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <BFBE110A-3BA3-4A56-9174-0A2D25FEBEBE@lvh.cc>

That might be a preferable general case yes :)

For future reference here's the NestedAMPBox I wrote as Glyph suggested:

https://gist.github.com/3263629


cheers
lvh



On 24 Jul 2012, at 15:29, exarkun at twistedmatrix.com wrote:

> On 12:48 pm, _ at lvh.cc wrote:
>> Sure, I just ended up doing that.
>> 
>> Would it be worth creating a ticket, or am I seriously the first person 
>> to want this?
> 
> Some general dict argument types would be great.  The kind represented 
> by AMPList included.  Note that once we have this, AMPList can actually 
> be implemented in like ListOf(Dict()) instead of being a special case. 
> This argues against implementing Dict in terms of AMPList, though. ;)
> 
> Jean-Paul
>> 
>> cheers
>> lvh
>> 
>> 
>> 
>> On 20 Jul 2012, at 10:35, Glyph wrote:
>>> 
>>> On Jul 20, 2012, at 1:11 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
>>>> Hi,
>>>> 
>>>> 
>>>> Apparently AMPBoxes aren't Arguments. However, I kind of want an 
>>>> AMPBox (like an AMPList, but only one).
>>>> 
>>>> Use case: my responses have a "location", but a location is composed 
>>>> of several sub-things: place name, country and postal code. 
>>>> {"location": {"placeName": "Krakow", "countryCode": "PL", postalCode: 
>>>> "30-015"}} would be a lot nicer  than having those keys in the top 
>>>> level namespace :)
>>>> 
>>>> cheers
>>>> lvh
>>> 
>>> Seems like an easy enough thing to write.  Given that AMPList doesn't 
>>> use a length prefix (it uses null-key box-termination, just like the 
>>> rest of the protocol) the representation would be exactly the same. 
>>> Just add a trivial wrapper that uses AMPList, unpacks its argument, 
>>> and assert that there's only one of them?
>>> 
>>> -glyph
>>> 
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From eric at teratorn.org  Sun Aug  5 20:17:11 2012
From: eric at teratorn.org (Eric P. Mangold)
Date: Sun, 5 Aug 2012 20:17:11 -0400
Subject: [Twisted-Python] AMPBox as an Argument?
In-Reply-To: <279F3DA8-8AE8-4197-84AF-895B07527B32@lvh.cc>
References: <279F3DA8-8AE8-4197-84AF-895B07527B32@lvh.cc>
Message-ID: <20120806001711.GV10379@ragnarok.teratorn.org>

Hi Lauren

On Fri, Jul 20, 2012 at 10:11:17AM +0200, Laurens Van Houtven wrote:
> Hi,
> 
> 
> Apparently AMPBoxes aren't Arguments. However, I kind of want an AMPBox (like an AMPList, but only one).
 
Yes it's a pretty common use-case.

Right now you may use an AMPList with a single element. This is perfectly fine. Perhaps a wrapper class that restricts it to a single value would suffice?

It would be easy to commit to Twisted probably.

just a thought

> Use case: my responses have a "location", but a location is composed of several sub-things: place name, country and postal code. {"location": {"placeName": "Krakow", "countryCode": "PL", postalCode: "30-015"}} would be a lot nicer  than having those keys in the top level namespace :)

I do not necessarily agree. I think namespace prefixing, if well defined, is fine on AMP arguments appearing in the top-level packet. Alternatively the AMPList approach is there.

(JSON in AMP Arguments works pretty well I hear, too).

--
Cheers,
-E

> 
> cheers
> lvh
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From eric at teratorn.org  Sun Aug  5 20:36:38 2012
From: eric at teratorn.org (Eric P. Mangold)
Date: Sun, 5 Aug 2012 20:36:38 -0400
Subject: [Twisted-Python] AMPBox as an Argument?
In-Reply-To: <20120724132951.3468.1237221315.divmod.xquotient.23@localhost6.localdomain6>
References: <279F3DA8-8AE8-4197-84AF-895B07527B32@lvh.cc>
	<5AB76410-6A1B-4AE0-9208-D718B1BC7334@twistedmatrix.com>
	<04F1EE05-2411-4798-9CAB-15504C9F5A3B@lvh.cc>
	<20120724132951.3468.1237221315.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <20120806003638.GW10379@ragnarok.teratorn.org>

On Tue, Jul 24, 2012 at 01:29:51PM -0000, exarkun at twistedmatrix.com wrote:
> On 12:48 pm, _ at lvh.cc wrote:
> >Sure, I just ended up doing that.
> >
> >Would it be worth creating a ticket, or am I seriously the first person 
> >to want this?
> 
> Some general dict argument types would be great.  The kind represented 
> by AMPList included.  Note that once we have this, AMPList can actually 
> be implemented in like ListOf(Dict()) instead of being a special case. 
> This argues against implementing Dict in terms of AMPList, though. ;)
 
That sounds really useful.

-E

> Jean-Paul
> >
> >cheers
> >lvh
> >
> >
> >
> >On 20 Jul 2012, at 10:35, Glyph wrote:
> >>
> >>On Jul 20, 2012, at 1:11 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
> >>>Hi,
> >>>
> >>>
> >>>Apparently AMPBoxes aren't Arguments. However, I kind of want an 
> >>>AMPBox (like an AMPList, but only one).
> >>>
> >>>Use case: my responses have a "location", but a location is composed 
> >>>of several sub-things: place name, country and postal code. 
> >>>{"location": {"placeName": "Krakow", "countryCode": "PL", postalCode: 
> >>>"30-015"}} would be a lot nicer  than having those keys in the top 
> >>>level namespace :)
> >>>
> >>>cheers
> >>>lvh
> >>
> >>Seems like an easy enough thing to write.  Given that AMPList doesn't 
> >>use a length prefix (it uses null-key box-termination, just like the 
> >>rest of the protocol) the representation would be exactly the same. 
> >>Just add a trivial wrapper that uses AMPList, unpacks its argument, 
> >>and assert that there's only one of them?
> >>
> >>-glyph
> >>
> >>
> >>_______________________________________________
> >>Twisted-Python mailing list
> >>Twisted-Python at twistedmatrix.com
> >>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> >_______________________________________________
> >Twisted-Python mailing list
> >Twisted-Python at twistedmatrix.com
> >http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From gelonida at gmail.com  Mon Aug  6 03:30:47 2012
From: gelonida at gmail.com (Gelonida N)
Date: Mon, 06 Aug 2012 09:30:47 +0200
Subject: [Twisted-Python] simple example for twisted ssh server with
	public key authentification
In-Reply-To: <CAFJQhU7VVY0pPib=wawr3+f3OVvjsTduxgP-T3o_wEMy8NZcFQ@mail.gmail.com>
References: <jvk7e6$cjp$1@dough.gmane.org>
	<CAFJQhU7VVY0pPib=wawr3+f3OVvjsTduxgP-T3o_wEMy8NZcFQ@mail.gmail.com>
Message-ID: <jvnrr7$vm1$1@dough.gmane.org>

On 08/05/2012 01:59 AM, Duncan McGreggor wrote:
>
>
> On Sat, Aug 4, 2012 at 3:23 PM, Gelonida N <gelonida at gmail.com
> <mailto:gelonida at gmail.com>> wrote:
>
>     Hi,
>
>     I just wanted to be sure, whether anybody has a small example snippet of
>     a twisted ssh server with public key authentification.
>
>
> So, um, simple? Not sure if I can help you there ;-) This was simple at
> one point, when it was part of an IRC logging bot that offered an SSH
> shell (manhole) to manipulate live objects, but it has since been split
> out into its own project:
> https://github.com/dreamhost/dreamssh
>
> Best case scenario, it provides what you need.
>
> Worst case scenario, you can fork it and remove all the crap that you
> don't need ;-)
>
> Note that dreamssh provides the Twisted-standard manhole interpreter, as
> well as a custom "echo" interpreter, intended to offer an example of how
> to create your own ssh shell (I've started using this in a text-based
> adventure game, with the ultimate goal of using it as the interface for
> a Twisted-base MUD).



Thanks Duncan,

I'll look into it, but it defeinitely sounds like a good starting point 
(looking at the project description)






From cyli at twistedmatrix.com  Mon Aug  6 13:07:46 2012
From: cyli at twistedmatrix.com (Ying Li)
Date: Mon, 6 Aug 2012 10:07:46 -0700
Subject: [Twisted-Python] San Francisco Twisted Sprint, Sunday August 19th
Message-ID: <CA+Q0aKFPq-e2F5b7T9=VC02JuqUxgKpXgL4eiDice50F+_KsYw@mail.gmail.com>

Hello all!

There will be a Twisted Sprint on Sunday, August 19th, in San
Francisco at 620 Folsom St, Suite 100, in San Francisco, CA.
There will be foods and coffee!

-Ying


From ilja.livenson at gmail.com  Tue Aug  7 05:58:46 2012
From: ilja.livenson at gmail.com (Ilja Livenson)
Date: Tue, 7 Aug 2012 12:58:46 +0300
Subject: [Twisted-Python] simple example for twisted ssh server with
 public key authentification
In-Reply-To: <jvnrr7$vm1$1@dough.gmane.org>
References: <jvk7e6$cjp$1@dough.gmane.org>
	<CAFJQhU7VVY0pPib=wawr3+f3OVvjsTduxgP-T3o_wEMy8NZcFQ@mail.gmail.com>
	<jvnrr7$vm1$1@dough.gmane.org>
Message-ID: <CAF8QyE_kBxFOWGF+JhR2wn7nMcTxG627OM=52WEFB=xMJz8C=A@mail.gmail.com>

Hi,

perhaps our project code could help with the insight:

Creation of the SSH server:
https://github.com/opennode/opennode-management/blob/master/opennode/oms.tac#L26
Definition of the checker:
https://github.com/opennode/opennode-management/blob/master/opennode/oms/security/authentication.py#L65

cheers,
Ilja

On 6 August 2012 10:30, Gelonida N <gelonida at gmail.com> wrote:

> On 08/05/2012 01:59 AM, Duncan McGreggor wrote:
> >
> >
> > On Sat, Aug 4, 2012 at 3:23 PM, Gelonida N <gelonida at gmail.com
> > <mailto:gelonida at gmail.com>> wrote:
> >
> >     Hi,
> >
> >     I just wanted to be sure, whether anybody has a small example
> snippet of
> >     a twisted ssh server with public key authentification.
> >
> >
> > So, um, simple? Not sure if I can help you there ;-) This was simple at
> > one point, when it was part of an IRC logging bot that offered an SSH
> > shell (manhole) to manipulate live objects, but it has since been split
> > out into its own project:
> > https://github.com/dreamhost/dreamssh
> >
> > Best case scenario, it provides what you need.
> >
> > Worst case scenario, you can fork it and remove all the crap that you
> > don't need ;-)
> >
> > Note that dreamssh provides the Twisted-standard manhole interpreter, as
> > well as a custom "echo" interpreter, intended to offer an example of how
> > to create your own ssh shell (I've started using this in a text-based
> > adventure game, with the ultimate goal of using it as the interface for
> > a Twisted-base MUD).
>
>
>
> Thanks Duncan,
>
> I'll look into it, but it defeinitely sounds like a good starting point
> (looking at the project description)
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120807/0ebe542f/attachment.htm 

From dj.foguelman at gmail.com  Tue Aug  7 16:41:50 2012
From: dj.foguelman at gmail.com (DF--)
Date: Tue, 7 Aug 2012 17:41:50 -0300
Subject: [Twisted-Python] Using ProxyClient
Message-ID: <CAEohUJKjQ+HMw_XP7DMN0Lpe7-4x-rAY_6YZTzH5Fisf+-rU0w@mail.gmail.com>

Hi Guys!

I'm new to the twisted framework and I'm using it to write a simple
HTTPProxy with rewrite capabilities.

While calling ProxyCiient.handleHeader method, it seems that Content-Length
field is being added. Notice that I say "add" instead of "set":

    def handleHeader(self, key, value):
        *if key.lower() in ['server', 'date', 'content-type']:*
            self.father.responseHeaders.setRawHeaders(key, [value])
        else:
            *self.father.responseHeaders.addRawHeader(key, value)*


Look at this headers that I get if I use handleHeader method:

HTTP/1.1 200 OK
*Content-Length: 3025
Content-Length: 53*
Host: localhost:8001
Accept: */*
Server: Coco el servidor
Connection: close
Date: Tue, 07 Aug 2012 20:35:13 GMT
User-Agent: curl/7.19.7 (i486-pc-linux-gnu) libcurl/7.19.7 OpenSSL/0.9.8k
zlib/1.2.3.3 libidn/1.15
Content-Type: text/html


So question is, am I using it properly? I'm adjusting the content length
field as the data changed.

Thanks in advanced, Daniel

 "En econom?a no hay nada misterioso ni inaccesible al entendimiento del
hombre de la calle. Si hay un misterio, reside ?l en el oculto prop?sito
que puede perseguir el economista y que no es otro que la disimulaci?n del
inter?s concreto a que se sirve."

A. Jauretche
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120807/89d6f5fc/attachment.htm 

From _ at lvh.cc  Wed Aug  8 08:36:37 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 8 Aug 2012 14:36:37 +0200
Subject: [Twisted-Python] IUnicodeUsernamePassword?
Message-ID: <85BED73D-C15E-4147-BC89-2C7A6C118536@lvh.cc>

Hi,

Adding t.conch's ssh manhole (any third party IUsernamePassword provider would've done, really) to my app recently uncovered some unicode handling issues and I'm wondering what the appropriate way to resolve them is.

In my API (AMP) there is a:
    - e-mail which is unicode
    - password which is unicode

In my store (Axiom), there is a:
    - uid (unique user identifier, think UUID) which is bytes
    - e-mail which is unicode
    - password which is bytes, because it's the output of scrypt. scrypt also takes bytes as input: the password is first utf-8 encoded.

Previously I was mistakenly handing around IUsernamePasswords where the e-mail address was unicode.

Obviously the ICredentialsChecker implementation should take IUsernamePasswords that actually satisfy their contract and don't just pretend to, so ALL credentials it receives should have str/str, no exceptions. So, right now my credentials checker decodes the provided username to unicode in order to find the user by e-mail address (since, as mentioned above, Axiom thinks my e-mail addresses are unicode).

The flip side of this is that the login method now first encodes the provided username and password as unicode. This is at least a semantically correct solution, but has the somewhat surprising property that in the 99.9% use case, the e-mail is received as unicode, immediately encoded, and then virtually straight after decoded again. That doesn't mean it's wrong, but it's a little weird.

Potential solutions:

1. Make e-mail addresses bytes always. I don't know if this is semantically valid.
2. Add an IUnicodeUsernamePassword interface and implementation, and leaving adaptation to handle decoding/encoding. The downside here is that IIUC cred does not try to adapt to the ICredentialsChecker's supported interfaces, something I believe I complained about a few years back.

cheers
lvh





From _ at lvh.cc  Wed Aug  8 09:58:27 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 8 Aug 2012 15:58:27 +0200
Subject: [Twisted-Python] twisted server config: command line,
	environment or Axiom?
Message-ID: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>

Hi,

I have a bunch of configuration for my service. Things like endpoints, location of the root axiom store? Right now I grab these from the environment. That means that my twistd IServiceMaker plugin's options is pretty much by definition empty.

I'm wondering if more mature twistd users have already learned the hard way what the best way to manage this is. I see three possible solutions:

1. environment variables as I use them now: portable, simple.
2. command line options: still pretty portable and simple. additional benefit: easy discoverability of options
3. axiom store: has the benefit that there's a single source of truth for everything, i.e. I copy a store and I can recreate the service based on that store exactly, using just the store

Like I said, I currently use (1), it looks like (1) and (2) are more or less equivalent, I'm not sure if (3) is a good idea. I'm not really unhappy with (1), it's just that finally writing my ServiceMaker class made me contemplate the options.

(3) has the downside that it conflates user data with configuration data. I'm not sure that's a good thing or not. It sounds very similar to axiomatic, which I've heard of, seen, but never played with.

I already use environment variables to decide whether or not to run certain tests ("live" functional high level tests, with real disk and network IO, that take way longer than the unit tests to run). I'm going to keep it that way, because there's no obvious way of passing configuration to the tests other than the environment.

cheers
lvh





From eric at teratorn.org  Wed Aug  8 12:31:42 2012
From: eric at teratorn.org (Eric P. Mangold)
Date: Wed, 8 Aug 2012 12:31:42 -0400
Subject: [Twisted-Python] twisted server config: command line,
 environment or Axiom?
In-Reply-To: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
References: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
Message-ID: <20120808163142.GB10379@ragnarok.teratorn.org>

On Wed, Aug 08, 2012 at 03:58:27PM +0200, Laurens Van Houtven wrote:
> Hi,
> 
> I have a bunch of configuration for my service. Things like endpoints, location of the root axiom store? Right now I grab these from the environment. That means that my twistd IServiceMaker plugin's options is pretty much by definition empty.
> 
> I'm wondering if more mature twistd users have already learned the hard way what the best way to manage this is. I see three possible solutions:
> 
> 1. environment variables as I use them now: portable, simple.
> 2. command line options: still pretty portable and simple. additional benefit: easy discoverability of options

Both, preferrably. Defining all of your configuration in terms of t.p.usage.Options is not a bad thing at all.
It's human readable, and scriptable. And it maps directly to ENV vars or INI files (etc). If you have strange configuration requirements, (like binary files), I think those belong in their own seperate file(s). E.g. SSL certificates, PW files, etc

> 3. axiom store: has the benefit that there's a single source of truth for everything, i.e. I copy a store and I can recreate the service based on that store exactly, using just the store
 
Yeah, I hate that kind of configuration. Configuration is/should-be diffable with standard tools, if possible.

> Like I said, I currently use (1), it looks like (1) and (2) are more or less equivalent, I'm not sure if (3) is a good idea. I'm not really unhappy with (1), it's just that finally writing my ServiceMaker class made me contemplate the options.
> 
> (3) has the downside that it conflates user data with configuration data. I'm not sure that's a good thing or not. It sounds very similar to axiomatic, which I've heard of, seen, but never played with.

Well as indicated *I don't like it*, but really that is only due to lack of tooling support... :)
 
> I already use environment variables to decide whether or not to run certain tests ("live" functional high level tests, with real disk and network IO, that take way longer than the unit tests to run). I'm going to keep it that way, because there's no obvious way of passing configuration to the tests other than the environment.

Yeah. Plain ENV vars are probably the best bet there.
 
--
Cheers,
-E


From kevin.horn at gmail.com  Wed Aug  8 14:06:07 2012
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 8 Aug 2012 13:06:07 -0500
Subject: [Twisted-Python] twisted server config: command line,
 environment or Axiom?
In-Reply-To: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
References: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
Message-ID: <CA+U=zK3hFVWi0apbM4is9c6AAwM5aw5OGUwvpK9h7-8K3uPQTA@mail.gmail.com>

On Wed, Aug 8, 2012 at 8:58 AM, Laurens Van Houtven <_ at lvh.cc> wrote:

> Hi,
>
> I have a bunch of configuration for my service. Things like endpoints,
> location of the root axiom store? Right now I grab these from the
> environment. That means that my twistd IServiceMaker plugin's options is
> pretty much by definition empty.
>
> I'm wondering if more mature twistd users have already learned the hard
> way what the best way to manage this is. I see three possible solutions:
>
> 1. environment variables as I use them now: portable, simple.
> 2. command line options: still pretty portable and simple. additional
> benefit: easy discoverability of options
> 3. axiom store: has the benefit that there's a single source of truth for
> everything, i.e. I copy a store and I can recreate the service based on
> that store exactly, using just the store
>
>
Never, ever store config data and user data in the same place.  Likewise,
if you're going to persist config data, it should be in some kind of plain
text format.

1) and 2) are fine, though I prefer a simple text file format as well, and
I like to have multiple levels of configuration which are overridable.

e.g.
one or more config files (maybe in /etc, in /home/<user>, the pwd) which
override each other in a specified manner, which are in turn overridable by
command line options and/or env vars

whether any of this is appropriate for your case, and how much complexity
you need obviously depends on your application

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120808/81a21f15/attachment.htm 

From exarkun at twistedmatrix.com  Wed Aug  8 16:13:09 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 08 Aug 2012 20:13:09 -0000
Subject: [Twisted-Python] twisted server config: command line,
 environment or Axiom?
In-Reply-To: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
References: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
Message-ID: <20120808201309.4141.1475964212.divmod.xquotient.18@localhost6.localdomain6>

On 01:58 pm, _ at lvh.cc wrote:
>Hi,
>
>I have a bunch of configuration for my service. Things like endpoints, 
>location of the root axiom store? Right now I grab these from the 
>environment. That means that my twistd IServiceMaker plugin's options 
>is pretty much by definition empty.
>
>I'm wondering if more mature twistd users have already learned the hard 
>way what the best way to manage this is. I see three possible 
>solutions:
>
>1. environment variables as I use them now: portable, simple.
>2. command line options: still pretty portable and simple. additional 
>benefit: easy discoverability of options
>3. axiom store: has the benefit that there's a single source of truth 
>for everything, i.e. I copy a store and I can recreate the service 
>based on that store exactly, using just the store

This doesn't really seem like a Twisted question... but...

axiom is my favorite configuration persistence tool.
>Like I said, I currently use (1), it looks like (1) and (2) are more or 
>less equivalent, I'm not sure if (3) is a good idea. I'm not really 
>unhappy with (1), it's just that finally writing my ServiceMaker class 
>made me contemplate the options.
>
>(3) has the downside that it conflates user data with configuration 
>data. I'm not sure that's a good thing or not. It sounds very similar 
>to axiomatic, which I've heard of, seen, but never played with.

It doesn't conflate user data with configuration data any more than any 
other system.  Keep a database for your configuration and keep your user 
data somewhere else (perhaps in a separate axiom store).

Jean-Paul
>I already use environment variables to decide whether or not to run 
>certain tests ("live" functional high level tests, with real disk and 
>network IO, that take way longer than the unit tests to run). I'm going 
>to keep it that way, because there's no obvious way of passing 
>configuration to the tests other than the environment.
>
>cheers
>lvh
>
>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From mithrandi at mithrandi.net  Wed Aug  8 16:29:05 2012
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 8 Aug 2012 22:29:05 +0200
Subject: [Twisted-Python] twisted server config: command line,
 environment or Axiom?
In-Reply-To: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
References: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
Message-ID: <CAMcKhMSHk4DnvphkAPyrxMRBM0KGS8jUtRV+7SM79zmKc84c=Q@mail.gmail.com>

On Wed, Aug 8, 2012 at 3:58 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
> (3) has the downside that it conflates user data with configuration data. I'm not sure that's a good thing or not. It sounds very similar to axiomatic, which I've heard of, seen, but never played with.

As exarkun mentions in his reply, you don't have to store the
configuration and user data in the same Axiom store. If you're
interested, the way "axiomatic start" works is that it locates all
IService powerups on the store you pass it (which would be the "site
store", in Mantissa), and attaches those to the application. I think
most of the interesting IService implementations are in Mantissa, not
Axiom, but axiomatic itself does not depend on Mantissa and of course
there's no reason you can't write your own IService powerups.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From glyph at twistedmatrix.com  Wed Aug  8 19:36:59 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 8 Aug 2012 16:36:59 -0700
Subject: [Twisted-Python] IUnicodeUsernamePassword?
In-Reply-To: <85BED73D-C15E-4147-BC89-2C7A6C118536@lvh.cc>
References: <85BED73D-C15E-4147-BC89-2C7A6C118536@lvh.cc>
Message-ID: <5DDD5E67-9FD4-49E4-BEC7-DD2839257B6F@twistedmatrix.com>


Le Aug 8, 2012 ? 5:36 AM, Laurens Van Houtven <_ at lvh.cc> a ?crit :

> 2. Add an IUnicodeUsernamePassword interface and implementation, and leaving adaptation to handle decoding/encoding. The downside here is that IIUC cred does not try to adapt to the ICredentialsChecker's supported interfaces, something I believe I complained about a few years back.

And it never will.  Trying to make this work all the way would require infinitely transitive adaptation, not to mention some kind of additional plugin interface to make sure that all your adapter registrations get loaded by the right moment, so you need to have checkers which explicitly declare their support.  But nowadays we have strcred, and if only everything used that, you could develop all this support in your application, including a strcred prefix which could fix any IUsernamePasword-checking checker by wrapping it :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120808/46e53ed9/attachment.htm 

From lacrima.maxim at gmail.com  Thu Aug  9 03:46:18 2012
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Thu, 9 Aug 2012 10:46:18 +0300
Subject: [Twisted-Python] Using StandardIO and pipes.
Message-ID: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>

Hello!

I am very new to Twisted and I have some problems using stdin.StandardIO.
Here is the code:

# item.py file
from twisted.internet import reactor, stdio
from twisted.protocols import basic
from storage import Item

class EchoItemProtocol(basic.LineReceiver):
    delimiter = '\n'

    def lineReceived(self, item_id):
        # Item.get returns a deferred
        d = Item.get(item_id)
        def writeResponse(item):
            self.transport.write(str(item) + '\n')
        d.addCallback(writeResponse)

def main():
    stdio.StandardIO(EchoItemProtocol())
    reactor.run()

if __name__ == '__main__':
    main()


So, when I run the file it works:
$ ./item.py
test_item_id
<storage.Item object at 0x2b15910>

I want to be able to redirect output of some process into my script. But
this doesn't work:
$ echo test_item_id | ./item.py

It doesn't produce any output.

But if i replace `self.transport.write(str(item) + '\n')` with just
`print str(item)` it suddenly works:
$ echo test_item_id | ./item.py
<storage.Item object at 0x18ac650>

So my conclusions are:
1. When I write to stdin of my script from keyboard then
`self.transport.write()` works as expected.
2. When I use pipes or redirection to my script `self.transport.write()`
doesn't produce any output.
3. If I replace self.transport.write() with print statements it works.

Why is this strange behavior?

-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120809/fbdd83fc/attachment.htm 

From andrew at bemusement.org  Thu Aug  9 22:39:08 2012
From: andrew at bemusement.org (Andrew Bennetts)
Date: Fri, 10 Aug 2012 12:39:08 +1000
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
Message-ID: <20120810023907.GC11315@fuchsia.puzzling.org>

Maxim Lacrima wrote:
[?]
> So my conclusions are:
> 1. When I write to stdin of my script from keyboard then
> `self.transport.write()` works as expected.
> 2. When I use pipes or redirection to my script `self.transport.write()`
> doesn't produce any output.
> 3. If I replace self.transport.write() with print statements it works.

Buffering, perhaps?

As a quick test, try adjusting your callback to loseConnection on the transport
after to the write, that should flush the buffers.  If buffering turns out to
be your problem, and you really do expect your pipes to be at most
line-buffered, you'll need to arrange for the buffering on the stdin and stdout
file descriptors to be changed.  I don't think Twisted has that builtin, so you
may need to do that before creating the StandardIO object using the regular
Python APIs.

-Andrew.




From glyph at twistedmatrix.com  Fri Aug 10 01:18:13 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 9 Aug 2012 22:18:13 -0700
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <20120810023907.GC11315@fuchsia.puzzling.org>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
Message-ID: <73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>


On Aug 9, 2012, at 7:39 PM, Andrew Bennetts <andrew at bemusement.org> wrote:

> Maxim Lacrima wrote:
> [?]
>> So my conclusions are:
>> 1. When I write to stdin of my script from keyboard then
>> `self.transport.write()` works as expected.
>> 2. When I use pipes or redirection to my script `self.transport.write()`
>> doesn't produce any output.
>> 3. If I replace self.transport.write() with print statements it works.
> 
> Buffering, perhaps?
> 
> As a quick test, try adjusting your callback to loseConnection on the transport
> after to the write, that should flush the buffers.  If buffering turns out to
> be your problem, and you really do expect your pipes to be at most
> line-buffered, you'll need to arrange for the buffering on the stdin and stdout
> file descriptors to be changed.  I don't think Twisted has that builtin, so you
> may need to do that before creating the StandardIO object using the regular
> Python APIs.

It's not this kind of buffering problem.  I was actually able to reproduce it by replacing "Item.get()" with a deferLater.  (In the future, please perform these types of replacements yourself before posting your examples; it's much easier to help out with complete, runnable programs.)

The issue is that twisted.internet.stdio considers your protocol to only know about one kind of connection loss: i.e. that your entire transport has gone away.  So, when the input is closed, the output file descriptor is immediately closed as well.

Unfortunately - and I think this is a bug in Twisted - the input connection being lost causes the output connection to be immediately and somewhat aggressively closed.  The difference between "echo" and typing interactively is that you send "test_item_id\n", but echo sends "test_item_id\n" *EOF*.

Luckily you can work around this, by explicitly asking Twisted for notifications about half of the connection being closed.  You do this by implementing IHalfCloseableProtocol.

Although Twisted should be better about how it handles shutting down stdout, this nuance does reveal some logic that your code is missing: once your input is done, you don't have any concept of waiting for your output to be done before shutting everything down.  So, if you add both the IHalfCloseableProtocol implements declaration to receive the relevant notifications, and some logic to keep track of when all the output has been written, you can get exactly the behavior that I assume you want.

I've attached an example that does all of these things with a simple timer, since this is something that Twisted probably needs to document a bit better.



Cheers,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120809/72a869f3/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: check.py
Type: text/x-python-script
Size: 1196 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20120809/72a869f3/attachment.bin 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120809/72a869f3/attachment-0001.htm 

From warner at lothar.com  Fri Aug 10 14:02:52 2012
From: warner at lothar.com (Brian Warner)
Date: Fri, 10 Aug 2012 11:02:52 -0700
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
Message-ID: <50254CCC.4000907@lothar.com>

On 8/9/12 10:18 PM, Glyph wrote:
> 
> The issue is that twisted.internet.stdio considers your protocol to
> only know about one kind of connection loss: i.e. that your entire
> transport has gone away. So, when the input is closed, the output file
> descriptor is immediately closed as well.
> 
> Unfortunately - and I think this is a bug in Twisted - the input
> connection being lost causes the output connection to be immediately
> and somewhat aggressively closed. The difference between "echo" and
> typing interactively is that you send "test_item_id\n", but echo sends
> "test_item_id\n" *EOF*.

Incidentally, I think this was the problem I ran into in Foolscap,
trying to build a tool that lets you run individual shell commands
remotely. I was able to stretch the three file descriptors (stdin,
stdout, stderr) over the wire using a callRemote() for each invocation
of dataReceived(), but had similar issues when closing one side of the
connection. The easiest way to trigger this was to run /usr/bin/sort,
which necessarily waits until the input has been closed before it will
produce any output. So you run "cat data.txt | flappclient run-command",
flappclient reads from StandardIO, sends the data to the far end,
notices the EOF on stdin when the data is finished, sends a "stdin is
closed" message to the remote side, receives the return data from sort,
then tries to write it to the local stdout (which sometimes failed).

I think I saw problems in the opposite situation too: if stdout were
closed (because our caller didn't want to hear anything further from
us), the stdin would no longer accept data. I don't remember how I
triggered this situation.

My workaround is here, in case you find it useful:

 https://github.com/warner/foolscap/blob/master/foolscap/appserver/client.py#L64

It worked for me at the time. (since then I've seen some trouble when
running git-receive-pack over this connection, which may or may not be
related, so I won't claim it's foolproof).

cheers,
 -Brian


From glyph at twistedmatrix.com  Fri Aug 10 17:49:09 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 10 Aug 2012 14:49:09 -0700
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <50254CCC.4000907@lothar.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
	<50254CCC.4000907@lothar.com>
Message-ID: <5A8DFA94-A6D8-4B28-8C19-CEFD2689F0D8@twistedmatrix.com>


On Aug 10, 2012, at 11:02 AM, Brian Warner <warner at lothar.com> wrote:

> My workaround is here, in case you find it useful:
> 
> https://github.com/warner/foolscap/blob/master/foolscap/appserver/client.py#L64
> 
> It worked for me at the time. (since then I've seen some trouble when
> running git-receive-pack over this connection, which may or may not be
> related, so I won't claim it's foolproof).

Are you saying that you had issues even with implementing IHalfCloseableProtocol and overriding readConnectionLost?  Doing that now seems to work fine for me.  Perhaps there was a different issue that has since been fixed?  I can't find one, though...

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120810/3694ea09/attachment.htm 

From exarkun at twistedmatrix.com  Sun Aug 12 00:05:29 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 12 Aug 2012 04:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1344744329.63.1788733757@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120812/de7ad21a/attachment.htm 

From lacrima.maxim at gmail.com  Mon Aug 13 08:18:32 2012
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Mon, 13 Aug 2012 15:18:32 +0300
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
Message-ID: <CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>

Hi everyone!

Thanks for the help! I used an attached example and after implementing
IHalfCloseableProtocol it works! Thanks a lot!

Still, Twisted seems hard to me, probably because I don't quite understand
how to use and combine Twisted's interfaces.
With your help I can now connect my program to another process using pipe.
But, for example, I want to be able to supply data to my program not only
via stdin, but also as command line arguments. I.e. instead of
$ echo foo | ./item.py

I want to do:
$ ./item.py foo

My feeling here is that I can reuse the same protocol (EchoItemProtocol)
here, but now instead of StandardIO I need my own factory (or transport, or
whatever it is named) class that knows how to read command line args and
talk the same protocol. Sure I can read arguments using sys.argv[1:], but
what do I do next to properly pass that data to the protocol? Does my class
have to implement ITransport or IProducer etc. to talk EchoItemProtocol
similar to StandardIO?
I hope my question is clear.

Thanks in advance.

On 10 August 2012 08:18, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Aug 9, 2012, at 7:39 PM, Andrew Bennetts <andrew at bemusement.org> wrote:
>
> Maxim Lacrima wrote:
> [?]
>
> So my conclusions are:
> 1. When I write to stdin of my script from keyboard then
> `self.transport.write()` works as expected.
> 2. When I use pipes or redirection to my script `self.transport.write()`
> doesn't produce any output.
> 3. If I replace self.transport.write() with print statements it works.
>
>
> Buffering, perhaps?
>
> As a quick test, try adjusting your callback to loseConnection on the
> transport
> after to the write, that should flush the buffers.  If buffering turns out
> to
> be your problem, and you really do expect your pipes to be at most
> line-buffered, you'll need to arrange for the buffering on the stdin and
> stdout
> file descriptors to be changed.  I don't think Twisted has that builtin,
> so you
> may need to do that before creating the StandardIO object using the regular
> Python APIs.
>
>
> It's not this kind of buffering problem.  I was actually able to reproduce
> it by replacing "Item.get()" with a deferLater.  (In the future, please
> perform these types of replacements yourself before posting your examples;
> it's much easier to help out with complete, runnable programs.)
>
> The issue is that twisted.internet.stdio considers your protocol to only
> know about one kind of connection loss: i.e. that your entire transport has
> gone away.  So, when the input is closed, the output file descriptor is
> immediately closed as well.
>
> Unfortunately - and I think this is a bug in Twisted - the input
> connection being lost causes the output connection to be immediately and
> somewhat aggressively closed.  The difference between "echo" and typing
> interactively is that you send "test_item_id\n", but echo sends
> "test_item_id\n" *EOF*.
>
> Luckily you can work around this, by explicitly asking Twisted for
> notifications about half of the connection being closed.  You do this by
> implementing IHalfCloseableProtocol.
>
> Although Twisted should be better about how it handles shutting down
> stdout, this nuance *does* reveal some logic that your code is missing:
> once your input is done, you don't have any concept of waiting for your *output
> *to be done before shutting everything down.  So, if you add both the
> IHalfCloseableProtocol implements declaration to receive the relevant
> notifications, and some logic to keep track of when all the output has been
> written, you can get exactly the behavior that I assume you want.
>
> I've attached an example that does all of these things with a simple
> timer, since this is something that Twisted probably needs to document a
> bit better.
>
>
>
> Cheers,
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120813/2beda1d2/attachment.htm 

From drew.smathers at gmail.com  Mon Aug 13 21:09:28 2012
From: drew.smathers at gmail.com (Drew Smathers)
Date: Mon, 13 Aug 2012 21:09:28 -0400
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
	<CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>
Message-ID: <CAEOQ8ptVPS7991z3Du6QmESYjWRBkJCSh48BK_NHhHCqMezfLQ@mail.gmail.com>

On Mon, Aug 13, 2012 at 8:18 AM, Maxim Lacrima <lacrima.maxim at gmail.com> wrote:
> Hi everyone!
>
> Thanks for the help! I used an attached example and after implementing
> IHalfCloseableProtocol it works! Thanks a lot!
>

Hi Maxim,

Sorry I do not have an immediate answer to your question but just
wanted to let you that I don't see the file attachment mentioned
above. You might have forgotten this.

-Drew


From lacrima.maxim at gmail.com  Tue Aug 14 03:51:31 2012
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Tue, 14 Aug 2012 10:51:31 +0300
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <CAEOQ8ptVPS7991z3Du6QmESYjWRBkJCSh48BK_NHhHCqMezfLQ@mail.gmail.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
	<CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>
	<CAEOQ8ptVPS7991z3Du6QmESYjWRBkJCSh48BK_NHhHCqMezfLQ@mail.gmail.com>
Message-ID: <CAKef57NC55u=gV3wnmRUJZ0N2doRRnvNT3T7VHdK=47_vBuUcA@mail.gmail.com>

Hi Drew,

I was referring to the example attached by Glyph. His example helped me to
properly handle stdin in my code. In addition to stdin I want to handle
command line arguments, so I want to be able to do this:
$ echo foo | ./check.py
and this:
$ ./check.py foo

I think `main` function should look something like this:

def main():
    if sys.stdin.isatty():
        # we are connected to terminal
        args = sys.argv[1:]
        # ....
        # What should I implement to be able to speak EchoItemProtocol???
        # ....
    else:
        # we are connected to stdin
        stdio.StandardIO(EchoItemProtocol())
    reactor.run()

I am new to Twisted, so I don't know a proper term for a class I need to
implement (is it a factory, a transport, an endpoint etc.???) to be able to
speak EchoItemProtocol?
Is this a valid approach at all?

In case you can't find previously attached example, I have attached it
again.


On 14 August 2012 04:09, Drew Smathers <drew.smathers at gmail.com> wrote:

> On Mon, Aug 13, 2012 at 8:18 AM, Maxim Lacrima <lacrima.maxim at gmail.com>
> wrote:
> > Hi everyone!
> >
> > Thanks for the help! I used an attached example and after implementing
> > IHalfCloseableProtocol it works! Thanks a lot!
> >
>
> Hi Maxim,
>
> Sorry I do not have an immediate answer to your question but just
> wanted to let you that I don't see the file attachment mentioned
> above. You might have forgotten this.
>
> -Drew
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120814/6be8bb61/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: check.py
Type: application/octet-stream
Size: 1233 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20120814/6be8bb61/attachment.obj 

From exarkun at twistedmatrix.com  Tue Aug 14 06:40:17 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 14 Aug 2012 10:40:17 -0000
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <CAKef57NC55u=gV3wnmRUJZ0N2doRRnvNT3T7VHdK=47_vBuUcA@mail.gmail.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
	<CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>
	<CAEOQ8ptVPS7991z3Du6QmESYjWRBkJCSh48BK_NHhHCqMezfLQ@mail.gmail.com>
	<CAKef57NC55u=gV3wnmRUJZ0N2doRRnvNT3T7VHdK=47_vBuUcA@mail.gmail.com>
Message-ID: <20120814104017.26009.1537162256.divmod.xquotient.39@localhost6.localdomain6>

On 07:51 am, lacrima.maxim at gmail.com wrote:
>Hi Drew,
>
>I was referring to the example attached by Glyph. His example helped me 
>to
>properly handle stdin in my code. In addition to stdin I want to handle
>command line arguments, so I want to be able to do this:
>$ echo foo | ./check.py
>and this:
>$ ./check.py foo

Command line arguments aren't really anything like standard input. 
Command line arguments are available immediately, synchronously, in 
their entirety.  They are tokenized into a list of strings, and there 
are limits imposed on what bytes can appear in those strings.

Standard input can only be read a little at a time, perhaps throughout 
the duration of the entire process, and attempting to do so may involve 
blocking or dealing with complicated, platform-specific non-blocking 
APIs.  Standard input can contain any bytes and arrives as a stream, not 
as a reliably tokenized list of strings.

Twisted includes no support for treating stdin and command line 
arguments in a similar fashion.

After you look up the command line arguments from sys.argv, just use the 
values.  There would seem to be little point in trying to shove them 
through a protocol object.

Jean-Paul


From rramirez at rootedcon.es  Tue Aug 14 10:51:46 2012
From: rramirez at rootedcon.es (=?ISO-8859-1?Q?Rom=E1n_Ram=EDrez?=)
Date: Tue, 14 Aug 2012 16:51:46 +0200
Subject: [Twisted-Python] About CONNECT method and Proxy HTTPS
Message-ID: <CALuJt5VR6OM7OWcNLgMN=weHNqZf+s_mSBTKQmpc7-sbjvgSzA@mail.gmail.com>

Hello all,

This is my first email in this list so thanks everyone in advance and Hello :)

I have a quick question about the Proxy class and the CONNECT method
(for tunneling SSL). I've already solved the certificate issues as I
use a fixed *.testdomain.com certificare for my service.

What I cannot manage to solve is how to manage the real request after
setting up the tunnel. Let me explain, whenever a browser wants to
tunnel through a Proxy it will take these steps:

1. Send a CONNECT host:443 HTTP/1.1
2. The proxy will connect to the remote (real) https server and if
everything is right, send an OK to the client,
3. If the Proxy sends a 200 (Ok) continue through TLS and send the
real request (GET /directory HTTP/1.0 and Host: test.testdomain.com)

My problem here is when working on the Request to check if the method
is CONNECT (Request.process), when I do the startTLS (and make the
transport SSL aware) I cannot find a way to read the next lines with
the REAL request (the GET /directory HTTP/1.0). As I see how to write
into the Request.process (self.transport.write) I don't see any way to
read after the startTLS. I've tried with the self.content.seek(0,0)
and self.content.read() but always getting "None".

Is there a way to read the next lines from the client after the
startTLS inside Request.process? I've reading about everything related
to Proxy, CONNECT and mitm for a week but cannot find anything working
for me...

Thanks a lot in advance for your help and your patience :)


From jspencer at connectedsp.com  Tue Aug 14 13:21:11 2012
From: jspencer at connectedsp.com (John Spencer)
Date: Tue, 14 Aug 2012 11:21:11 -0600
Subject: [Twisted-Python] JOB OPENING Python, Twisted, Javascript
Message-ID: <AAAA837E1547054093EEC541433EE19E17D2E7FBA7@PO1MBX01.po1.comcast.net>

We have a client here in MA looking for a Sr or Prin level consultant with a strong background in Python and Javascript. Experience with Twisted is a plus as is any Dojo experience.

Work must be done on site and must be able to interview in person as well.

Please call or email me with any questions or send me a Word version of your resume for consideration. You resume will never be sent anywhere without your prior approval.


Regards,
John Spencer

Connected Systems Partners
Connecting Top Talent with Top Companies

978-455-5550 x208
978-621-9743 cell
jspencer at connectedsp.com

www.connectedsp.com<www.connectedsp.com%20>

GET CONNECTED!

Unless otherwise explicitly instructed by sender, all information in this email is considered confidential and intended for the view and use of the recipient(s) only.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120814/1172440e/attachment.htm 

From lacrima.maxim at gmail.com  Wed Aug 15 04:28:37 2012
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Wed, 15 Aug 2012 11:28:37 +0300
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <20120814104017.26009.1537162256.divmod.xquotient.39@localhost6.localdomain6>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
	<CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>
	<CAEOQ8ptVPS7991z3Du6QmESYjWRBkJCSh48BK_NHhHCqMezfLQ@mail.gmail.com>
	<CAKef57NC55u=gV3wnmRUJZ0N2doRRnvNT3T7VHdK=47_vBuUcA@mail.gmail.com>
	<20120814104017.26009.1537162256.divmod.xquotient.39@localhost6.localdomain6>
Message-ID: <CAKef57Mt=MAOey8H3fLOWJWMNW-ZQx13+TVorreaWSPNan043w@mail.gmail.com>

Hi Jean-Paul!

Thank you very much for explanation!

On 14 August 2012 13:40, <exarkun at twistedmatrix.com> wrote:

> On 07:51 am, lacrima.maxim at gmail.com wrote:
> >Hi Drew,
> >
> >I was referring to the example attached by Glyph. His example helped me
> >to
> >properly handle stdin in my code. In addition to stdin I want to handle
> >command line arguments, so I want to be able to do this:
> >$ echo foo | ./check.py
> >and this:
> >$ ./check.py foo
>
> Command line arguments aren't really anything like standard input.
> Command line arguments are available immediately, synchronously, in
> their entirety.  They are tokenized into a list of strings, and there
> are limits imposed on what bytes can appear in those strings.
>
> Standard input can only be read a little at a time, perhaps throughout
> the duration of the entire process, and attempting to do so may involve
> blocking or dealing with complicated, platform-specific non-blocking
> APIs.  Standard input can contain any bytes and arrives as a stream, not
> as a reliably tokenized list of strings.
>
> Twisted includes no support for treating stdin and command line
> arguments in a similar fashion.
>
> After you look up the command line arguments from sys.argv, just use the
> values.  There would seem to be little point in trying to shove them
> through a protocol object.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120815/2172b596/attachment.htm 

From xor at idlecore.com  Thu Aug 16 15:42:05 2012
From: xor at idlecore.com (Idlecore)
Date: Thu, 16 Aug 2012 20:42:05 +0100
Subject: [Twisted-Python] How to deal with deferreds across several layers
	of namespaces?
Message-ID: <CAMNtfvELQd=hKfEJKEi9uxFamApDjQj4ewee310JXXsb+VnxeA@mail.gmail.com>

I have a protocol that calls code that spans several namespaces. At
any of these namespaces there might be a deferred waiting to be
called. The protocol can be disconnected at any time and I currently
don't have a clean way to cancel all the potential deferreds from
within the protocol.
Will the protocol stick around long enough after disconnection for the
deferreds to eventually be called?
Should I create a central deferred list, at the cost of having to
access it through several layers of namespaces on other parts of my
project?
Is there a simple way of doing this?

Regards,
Pedro Azevedo


From itamar at futurefoundries.com  Fri Aug 17 20:12:25 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 17 Aug 2012 20:12:25 -0400
Subject: [Twisted-Python] How to deal with deferreds across several
 layers of namespaces?
In-Reply-To: <CAMNtfvELQd=hKfEJKEi9uxFamApDjQj4ewee310JXXsb+VnxeA@mail.gmail.com>
References: <CAMNtfvELQd=hKfEJKEi9uxFamApDjQj4ewee310JXXsb+VnxeA@mail.gmail.com>
Message-ID: <CAOp9P3rf68LtVb+5Hi2MDsNQkyTWY5Q5M8N2f08fpRjGBdu5Hw@mail.gmail.com>

On Thu, Aug 16, 2012 at 3:42 PM, Idlecore <xor at idlecore.com> wrote:

> I have a protocol that calls code that spans several namespaces. At
> any of these namespaces there might be a deferred waiting to be
> called. The protocol can be disconnected at any time and I currently
> don't have a clean way to cancel all the potential deferreds from
> within the protocol.
>

What do you mean by "namespaces"? If the Protocol called some code that
returned a Deferred, the Protocol will then have a reference to it. If a
callback function on that Deferred returns a Deferred, cancelling the
original one will also cancel the chained Deferred if necessary (though
you'll need to have a cancellation function for each, of course).


> Will the protocol stick around long enough after disconnection for the
> deferreds to eventually be called?
>

The Protocol will have its connectionLost() method called when it
disconnects; this is where you'd typically cancel any pending operations.
If some other object has a reference to it, it will not be garbage
collected until that reference is gone, as with any Python object. The
pending operations will, however, continue (possibly wasting resources)
unless you cancel them in response to the connectionLost() call.

Can you give a tiny code example, perhaps, demonstrating the kind of
Deferred management problem you're having?

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120817/14a9360b/attachment.htm 

From _ at lvh.cc  Sat Aug 18 07:35:49 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 18 Aug 2012 13:35:49 +0200
Subject: [Twisted-Python] Running and supervising twistd daemons
Message-ID: <10BF6F30-6B02-4B97-8995-4DA695DEDCFD@lvh.cc>

Hi,

What's the nicest way to run and supervise a twistd daemon?

I hear good things about systemd, but I can't figure out if it's PR or actual awesome new tech. It's not impossible to get on Debian, but certainly not the default (and IIUC not even in stable yet). While I understand how it's great for desktops, I'm trying to run a server. I don't really see how faster boot-up or socket-based activation really helps me there, certainly not up to the point where it warrants the apparent extra complexity.

I'm perfectly happy just throwing supervisord or daemontools at it, but I'm just trying to see if there's better tools that I've missed.

cheers
lvh





From itamar at futurefoundries.com  Sat Aug 18 08:59:35 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sat, 18 Aug 2012 08:59:35 -0400
Subject: [Twisted-Python] To those who are about to sprint
Message-ID: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>

Last sprint the buildbot got overwhelmed with a giant backlog of runs and
became essentially useless for the duration of the sprint. Jean-Paul had
two suggestions:

   1. Don't commit to trunk during the sprint, even if your branch was
   approved; wait until the sprint is over so trunk commits are spread out.
   2. If you're just doing some initial cross-platform testing using
   force-builds.py, use the command line option that lets you run only some of
   the tests (e.g. "twisted.web" or "twisted.python.test.test_versions")
   instead of running the whole test suite.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120818/4f0d94c2/attachment.htm 

From tobias.oberstein at tavendo.de  Sat Aug 18 09:13:57 2012
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sat, 18 Aug 2012 06:13:57 -0700
Subject: [Twisted-Python] Running and supervising twistd daemons
In-Reply-To: <10BF6F30-6B02-4B97-8995-4DA695DEDCFD@lvh.cc>
References: <10BF6F30-6B02-4B97-8995-4DA695DEDCFD@lvh.cc>
Message-ID: <634914A010D0B943A035D226786325D4337AB5A50F@EXVMBX020-12.exch020.serverdata.net>

> I'm perfectly happy just throwing supervisord or daemontools at it, but I'm just
> trying to see if there's better tools that I've missed.

We use daemontools and are perfectly happy: it's no frills, runs everywhere and is rock solid.

It's been there for so many years and survived I can't count how many "shiny new, lets redo rc.d scripts" attempts.


From ashwini.oruganti at gmail.com  Sat Aug 18 11:44:50 2012
From: ashwini.oruganti at gmail.com (Ashwini Oruganti)
Date: Sat, 18 Aug 2012 21:14:50 +0530
Subject: [Twisted-Python] Twisted 12.2.0pre1 is here!
Message-ID: <CAMFCZ-3DNW3ep87350fTG1BFun+6T52_=DWnpC9jUCoUrP05oQ@mail.gmail.com>

The pre-release for the upcoming Twisted 12.2 is now available!

You can download the tarballs here:

    http://twistedmatrix.com/~ashfall/12.2.0pre1/

Highlights for this release include:

  * To be able to work on Python3 support, Python 2.5 is no longer
supported.

  * twisted.mail.imap4 now serves BODYSTRUCTURE responses which provide
more information and conform to the IMAP4 RFC more closely.

  * twisted.conch now supports commercial SSH implementations which don't
comply with the IETF standard.

  * twisted.internet.endpoints now provides several new endpoints,
including a TCP client endpoint that resolves hostnames to IPv6 host
addresses.

  * IReactorSocket.adoptStreamConnection, implemented by some reactors,
allows adding an existing established connection to the reactor.

For the complete list, see the NEWS file.

Note that starting with the next release after 12.2, Twisted will begin
requiring zope.interface 3.6 (as part of Python3 support).

Please download the tarballs and test them rigorously, so we can have a
great release!


Thanks!

--
Ashwini Oruganti (ashfall)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120818/7f41f5e1/attachment.htm 

From glyph at twistedmatrix.com  Sat Aug 18 23:48:21 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 18 Aug 2012 20:48:21 -0700
Subject: [Twisted-Python] To those who are about to sprint
In-Reply-To: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>
References: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>
Message-ID: <A09A72CB-AE04-49D6-81FC-23139DF6E1ED@twistedmatrix.com>

On Aug 18, 2012, at 5:59 AM, Itamar Turner-Trauring <itamar at futurefoundries.com> wrote:

> Last sprint the buildbot got overwhelmed with a giant backlog of runs and became essentially useless for the duration of the sprint. Jean-Paul had two suggestions:
> Don't commit to trunk during the sprint, even if your branch was approved; wait until the sprint is over so trunk commits are spread out.
> If you're just doing some initial cross-platform testing using force-builds.py, use the command line option that lets you run only some of the tests (e.g. "twisted.web" or "twisted.python.test.test_versions") instead of running the whole test suite.

In an attempt to mitigate this problem, since pre-commit testing is a (the?) major bottleneck that we have at sprints, I will be bringing a nice fast machine with virtual machines for at least one flavor of each of our major supported platforms (OS X, Linux, Windows, FreeBSD).  I still need to install some dependencies, but hopefully I can do some whole-suite pre-commit verification for other reviewers who are there.

Hopefully the keyboard won't get too hot for me to type on :-).

For the next sprint, our BuildBot maintainer has assured me that he'll be moving the build master infrastructure to a faster machine before then, so that hopefully it will cope better with the increased load of a sprint.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120818/1366c470/attachment.htm 

From exarkun at twistedmatrix.com  Sun Aug 19 00:05:40 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 19 Aug 2012 04:05:40 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1345349140.45.492978911@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120819/23342dee/attachment.htm 

From glyph at twistedmatrix.com  Sun Aug 19 00:14:45 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 18 Aug 2012 21:14:45 -0700
Subject: [Twisted-Python] Twisted 12.2.0pre1 is here!
In-Reply-To: <CAMFCZ-3DNW3ep87350fTG1BFun+6T52_=DWnpC9jUCoUrP05oQ@mail.gmail.com>
References: <CAMFCZ-3DNW3ep87350fTG1BFun+6T52_=DWnpC9jUCoUrP05oQ@mail.gmail.com>
Message-ID: <A8FD3358-57F0-4745-8AF0-97E849021528@twistedmatrix.com>


On Aug 18, 2012, at 8:44 AM, Ashwini Oruganti <ashwini.oruganti at gmail.com> wrote:

> The pre-release for the upcoming Twisted 12.2 is now available!

Thanks for doing the release, Ashwini!  Great to see it underway!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120818/552fe67b/attachment.htm 

From matt at conundrum.com  Sun Aug 19 16:35:46 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Sun, 19 Aug 2012 16:35:46 -0400
Subject: [Twisted-Python] twisted.cred documentation bug?
Message-ID: <0DE2322C-30AB-44A7-9CCE-951BAC6786D2@conundrum.com>


I've been reading the cred docs, and think I may have spotted a typo.  Near the end of <http://twistedmatrix.com/documents/current/core/howto/cred.html>, in the code sample describing creating a cred plugin's factory, there is this method:

    # This will be called once per command-line.
    def generateChecker(self, argstring=""):
        argdict = dict((x.split('=') for x in argstring.split(':')))
        return SpecialChecker(**dict)

I think that return should actually be for **argdict, yes?






From glyph at twistedmatrix.com  Sun Aug 19 17:28:02 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 19 Aug 2012 14:28:02 -0700
Subject: [Twisted-Python] twisted.cred documentation bug?
In-Reply-To: <0DE2322C-30AB-44A7-9CCE-951BAC6786D2@conundrum.com>
References: <0DE2322C-30AB-44A7-9CCE-951BAC6786D2@conundrum.com>
Message-ID: <3E9C1A14-3D7F-4E70-8B0D-983F3D857E9A@twistedmatrix.com>


On Aug 19, 2012, at 1:35 PM, Matthew Pounsett <matt at conundrum.com> wrote:

> 
> I've been reading the cred docs, and think I may have spotted a typo.  Near the end of <http://twistedmatrix.com/documents/current/core/howto/cred.html>, in the code sample describing creating a cred plugin's factory, there is this method:
> 
>   # This will be called once per command-line.
>   def generateChecker(self, argstring=""):
>       argdict = dict((x.split('=') for x in argstring.split(':')))
>       return SpecialChecker(**dict)
> 
> I think that return should actually be for **argdict, yes?

Quite so.  Want to file a ticket?

-g

From exarkun at twistedmatrix.com  Sun Aug 19 18:49:08 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 19 Aug 2012 22:49:08 -0000
Subject: [Twisted-Python] To those who are about to sprint
In-Reply-To: <A09A72CB-AE04-49D6-81FC-23139DF6E1ED@twistedmatrix.com>
References: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>
	<A09A72CB-AE04-49D6-81FC-23139DF6E1ED@twistedmatrix.com>
Message-ID: <20120819224908.28197.2056266822.divmod.xquotient.1@localhost6.localdomain6>

On 03:48 am, glyph at twistedmatrix.com wrote:
>
>For the next sprint, our BuildBot maintainer has assured me that he'll 
>be moving the build master infrastructure to a faster machine before 
>then, so that hopefully it will cope better with the increased load of 
>a sprint.

Slave capacity really needs to be increased as well to handle sprint 
load.

Jean-Paul


From glyph at twistedmatrix.com  Sun Aug 19 20:05:42 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 19 Aug 2012 17:05:42 -0700
Subject: [Twisted-Python] To those who are about to sprint
In-Reply-To: <20120819224908.28197.2056266822.divmod.xquotient.1@localhost6.localdomain6>
References: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>
	<A09A72CB-AE04-49D6-81FC-23139DF6E1ED@twistedmatrix.com>
	<20120819224908.28197.2056266822.divmod.xquotient.1@localhost6.localdomain6>
Message-ID: <211D9A58-A3A9-456E-A148-2B17CEBCB41F@twistedmatrix.com>


On Aug 19, 2012, at 3:49 PM, exarkun at twistedmatrix.com wrote:

> On 03:48 am, glyph at twistedmatrix.com wrote:
>> 
>> For the next sprint, our BuildBot maintainer has assured me that he'll 
>> be moving the build master infrastructure to a faster machine before 
>> then, so that hopefully it will cope better with the increased load of 
>> a sprint.
> 
> Slave capacity really needs to be increased as well to handle sprint 
> load.

The major problem with buildbot overload at sprints is the fact that the website becomes so unresponsive that unrelated activity can't take place, e.g. in the bugtracker, for long periods of time.

Correct me if I'm wrong, but if the buildmaster and website are separated, won't that address that problem?

Also, won't the buildmaster evenly work through the backlog of submitted builds, finishing one every few minutes?  Or does some parallel stuff happen that makes subsequent builds progressively worse?

-glyph

From exarkun at twistedmatrix.com  Sun Aug 19 20:28:24 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 20 Aug 2012 00:28:24 -0000
Subject: [Twisted-Python] To those who are about to sprint
In-Reply-To: <211D9A58-A3A9-456E-A148-2B17CEBCB41F@twistedmatrix.com>
References: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>
	<A09A72CB-AE04-49D6-81FC-23139DF6E1ED@twistedmatrix.com>
	<20120819224908.28197.2056266822.divmod.xquotient.1@localhost6.localdomain6>
	<211D9A58-A3A9-456E-A148-2B17CEBCB41F@twistedmatrix.com>
Message-ID: <20120820002824.28197.25146564.divmod.xquotient.15@localhost6.localdomain6>

On 12:05 am, glyph at twistedmatrix.com wrote:
>
>On Aug 19, 2012, at 3:49 PM, exarkun at twistedmatrix.com wrote:
>>On 03:48 am, glyph at twistedmatrix.com wrote:
>>>
>>>For the next sprint, our BuildBot maintainer has assured me that 
>>>he'll
>>>be moving the build master infrastructure to a faster machine before
>>>then, so that hopefully it will cope better with the increased load 
>>>of
>>>a sprint.
>>
>>Slave capacity really needs to be increased as well to handle sprint
>>load.
>
>The major problem with buildbot overload at sprints is the fact that 
>the website becomes so unresponsive that unrelated activity can't take 
>place, e.g. in the bugtracker, for long periods of time.
>
>Correct me if I'm wrong, but if the buildmaster and website are 
>separated, won't that address that problem?

This is entirely possible, I'm not sure.  It may also be the case that 
trac by itself generates sufficient load at sprints to become unusable. 
We'll find out soon, I guess.
>Also, won't the buildmaster evenly work through the backlog of 
>submitted builds, finishing one every few minutes?  Or does some 
>parallel stuff happen that makes subsequent builds progressively worse?

Generally not.  Instead, the buildmaster will corrupt its local state, 
wedge itself into non-responsiveness, or enter an infinite loop. 
Additionally, it will direct one or more slaves to disconnect, crash, or 
at least corrupt (slave local) kernel state such that a sysadmin needs 
to restart the machine.

Jean-Paul


From p.mayers at imperial.ac.uk  Mon Aug 20 07:52:04 2012
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 20 Aug 2012 12:52:04 +0100
Subject: [Twisted-Python] transport.getPeerCertificate in connectionMade
Message-ID: <503224E4.1030508@imperial.ac.uk>

All,

It's been my observation that this code:

class MyProto(protocol.Protocol):

   def connectionMade(self):
     print self.transport.getPeerCertificate()
     self.transport.loseConnection()

class MyFactory(protocol.ClientFactory):

   def buildProtocol(self, addr):
     return MyProto()

def main():
   factory = MyFactory()
   ctxfact = ssl.ClientContextFactory()
   reactor.connectSSL(host, port, factory, ctxfact)
   reactor.run()

...will print "None". It seems that connectSSL calls connectionMade at 
TCP connection time, not when SSL has completed. This seems unintuitive 
to me because I've called "connectSSL" not "connectTCP", but I guess may 
be hard to fix given the way the code works?

At the very least, should this be documented?

Or could we have an interface e.g.

class ISSLProtocol(interface):
   def sslReady():
     """called when the SSL layer is ready"""

...and people who are interested can "implements()" it to get the callback?


From glyph at twistedmatrix.com  Mon Aug 20 13:50:56 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 20 Aug 2012 10:50:56 -0700
Subject: [Twisted-Python] transport.getPeerCertificate in connectionMade
In-Reply-To: <503224E4.1030508@imperial.ac.uk>
References: <503224E4.1030508@imperial.ac.uk>
Message-ID: <EC7E85B3-631A-4FD5-84B1-F24B670F1113@twistedmatrix.com>


On Aug 20, 2012, at 4:52 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> All,
> 
> It's been my observation that this code:
> 
> class MyProto(protocol.Protocol):
> 
>   def connectionMade(self):
>     print self.transport.getPeerCertificate()
>     self.transport.loseConnection()
> 
> class MyFactory(protocol.ClientFactory):
> 
>   def buildProtocol(self, addr):
>     return MyProto()
> 
> def main():
>   factory = MyFactory()
>   ctxfact = ssl.ClientContextFactory()
>   reactor.connectSSL(host, port, factory, ctxfact)
>   reactor.run()
> 
> ...will print "None". It seems that connectSSL calls connectionMade at 
> TCP connection time, not when SSL has completed. This seems unintuitive 
> to me because I've called "connectSSL" not "connectTCP", but I guess may 
> be hard to fix given the way the code works?
> 
> At the very least, should this be documented?
> 
> Or could we have an interface e.g.
> 
> class ISSLProtocol(interface):
>   def sslReady():
>     """called when the SSL layer is ready"""
> 
> ...and people who are interested can "implements()" it to get the callback?


Yup, it's a bug, reported 3 years ago:

	<http://twistedmatrix.com/trac/ticket/3687>

It's definitely a problem.  Perhaps worse is the fact that startTLS() doesn't directly give you that notification either.  Please feel free to contribute a fix :).

-glyph

From p.mayers at imperial.ac.uk  Tue Aug 21 09:20:43 2012
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 21 Aug 2012 14:20:43 +0100
Subject: [Twisted-Python] transport.getPeerCertificate in connectionMade
In-Reply-To: <EC7E85B3-631A-4FD5-84B1-F24B670F1113@twistedmatrix.com>
References: <503224E4.1030508@imperial.ac.uk>
	<EC7E85B3-631A-4FD5-84B1-F24B670F1113@twistedmatrix.com>
Message-ID: <50338B2B.9070700@imperial.ac.uk>

On 20/08/12 18:50, Glyph wrote:

> Yup, it's a bug, reported 3 years ago:
>
> <http://twistedmatrix.com/trac/ticket/3687>
>
> It's definitely a problem.  Perhaps worse is the fact that startTLS()
> doesn't directly give you that notification either.  Please feel free
> to contribute a fix :).

Would the best approach be to open a new ticket, or re-open that with 
with tests & patch?

I'm thinking that something akin to IHalfCloseable, given the discussion 
in the original ticket.


From glyph at twistedmatrix.com  Tue Aug 21 17:11:54 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 21 Aug 2012 14:11:54 -0700
Subject: [Twisted-Python] transport.getPeerCertificate in connectionMade
In-Reply-To: <50338B2B.9070700@imperial.ac.uk>
References: <503224E4.1030508@imperial.ac.uk>
	<EC7E85B3-631A-4FD5-84B1-F24B670F1113@twistedmatrix.com>
	<50338B2B.9070700@imperial.ac.uk>
Message-ID: <C69A841E-84FB-4F47-9285-3C3827257C7E@twistedmatrix.com>


On Aug 21, 2012, at 6:20 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 20/08/12 18:50, Glyph wrote:
> 
>> Yup, it's a bug, reported 3 years ago:
>> 
>> <http://twistedmatrix.com/trac/ticket/3687>
>> 
>> It's definitely a problem.  Perhaps worse is the fact that startTLS()
>> doesn't directly give you that notification either.  Please feel free
>> to contribute a fix :).
> 
> Would the best approach be to open a new ticket, or re-open that with 
> with tests & patch?

Open a new one that links to the old one, since description and subject editing is restricted, and it's important that this have a descriptive subject that refers to the problem and not just one proposed solution.  Really, when this was originally closed, the subject should have been changed to reflect the real problem rather than closed as wontfix, since there is a real problem here.  But we are faced with the problem of what to do today, not what should have been done then ;).

(And since Trac is dumb and can't do this automatically, add a comment to the old one that links to the new one.)

> I'm thinking that something akin to IHalfCloseable, given the discussion in the original ticket.

That sounds reasonable to me.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120821/8c7947d1/attachment.htm 

From matt at conundrum.com  Wed Aug 22 11:02:43 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Wed, 22 Aug 2012 11:02:43 -0400
Subject: [Twisted-Python] twisted.cred documentation bug?
In-Reply-To: <3E9C1A14-3D7F-4E70-8B0D-983F3D857E9A@twistedmatrix.com>
References: <0DE2322C-30AB-44A7-9CCE-951BAC6786D2@conundrum.com>
	<3E9C1A14-3D7F-4E70-8B0D-983F3D857E9A@twistedmatrix.com>
Message-ID: <6DBE72C6-CD1E-46D1-AB73-BC539D6AAAB7@conundrum.com>


On 2012/08/19, at 17:28, Glyph wrote:

> 
> On Aug 19, 2012, at 1:35 PM, Matthew Pounsett <matt at conundrum.com> wrote:
> 
>> 
>> I've been reading the cred docs, and think I may have spotted a typo.  Near the end of <http://twistedmatrix.com/documents/current/core/howto/cred.html>, in the code sample describing creating a cred plugin's factory, there is this method:
>> 
>>  # This will be called once per command-line.
>>  def generateChecker(self, argstring=""):
>>      argdict = dict((x.split('=') for x in argstring.split(':')))
>>      return SpecialChecker(**dict)
>> 
>> I think that return should actually be for **argdict, yes?
> 
> Quite so.  Want to file a ticket?

Will do.  Thanks, I just wanted to make sure what I was thinking made sense before I do that.





From forsberg at opera.com  Fri Aug 24 07:13:08 2012
From: forsberg at opera.com (Erik Forsberg)
Date: Fri, 24 Aug 2012 13:13:08 +0200
Subject: [Twisted-Python] Twisted IPv6 + SSL - fixed, or todo?
Message-ID: <503761C4.7030102@opera.com>

Hi!

http://twistedmatrix.com/trac/wiki/IPv6 mentions:

"SSL (but this might be automatic when IReactorTCP supports it)"

IReactorTCP now has IPv6 support, so did twisted get SSL + IPv6 support 
automatically? It seems to me from twisted.internet.endpoints that 
there's work to do there (there's SSL4ServerEndpoint and 
SSL4ClientEndpoint, but no SSL6ServerEndpoint/SSL6ClientEndpoint).

My use case is to be able to connect to https servers over IPv6 with 
twisted.web.client.Agent. Can I do that? If so, how?

Regards,
\EF


From glyph at twistedmatrix.com  Fri Aug 24 17:06:45 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 24 Aug 2012 14:06:45 -0700
Subject: [Twisted-Python] Twisted IPv6 + SSL - fixed, or todo?
In-Reply-To: <503761C4.7030102@opera.com>
References: <503761C4.7030102@opera.com>
Message-ID: <E85D0869-6272-4A5A-9B3F-7D7E02515815@twistedmatrix.com>


On Aug 24, 2012, at 4:13 AM, Erik Forsberg <forsberg at opera.com> wrote:

> Hi!
> 
> http://twistedmatrix.com/trac/wiki/IPv6 mentions:
> 
> "SSL (but this might be automatic when IReactorTCP supports it)"
> 
> IReactorTCP now has IPv6 support, so did twisted get SSL + IPv6 support 
> automatically? It seems to me from twisted.internet.endpoints that 
> there's work to do there (there's SSL4ServerEndpoint and 
> SSL4ClientEndpoint, but no SSL6ServerEndpoint/SSL6ClientEndpoint).
> 
> My use case is to be able to connect to https servers over IPv6 with 
> twisted.web.client.Agent. Can I do that? If so, how?

Sort of.  Agent is currently hard-coded to use TCP4ClientEndpoint or SSL4ClientEndpoint; the factory that it uses to generate these endpoints is not publicly exposed.

However, Agent passes a reactor, so you can implement your own reactor (probably a wrapper) that implements connectTCP and connectSSL to resolve and connect IPv6 names, and that will work just fine, and you will be using only public APIs, so it's supported :).

Does that make sense?

At some point, Agent should be modified to use <http://twistedmatrix.com/trac/ticket/4859>, once that's done and committed to trunk.  I don't know if a ticket exists to do that yet.  If you have already checked and there isn't, please feel free to file one.

-glyph



From exarkun at twistedmatrix.com  Sun Aug 26 00:05:33 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 26 Aug 2012 04:05:33 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1345953933.27.760357692@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120826/ca6e3a29/attachment.htm 

From exarkun at twistedmatrix.com  Mon Aug 27 17:01:35 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 27 Aug 2012 21:01:35 -0000
Subject: [Twisted-Python] Twisted 12.2.0pre1 is here!
In-Reply-To: <CAMFCZ-3DNW3ep87350fTG1BFun+6T52_=DWnpC9jUCoUrP05oQ@mail.gmail.com>
References: <CAMFCZ-3DNW3ep87350fTG1BFun+6T52_=DWnpC9jUCoUrP05oQ@mail.gmail.com>
Message-ID: <20120827210135.23316.960809678.divmod.xquotient.5@localhost6.localdomain6>

On 18 Aug, 03:44 pm, ashwini.oruganti at gmail.com wrote:
>The pre-release for the upcoming Twisted 12.2 is now available!
>
>You can download the tarballs here:
>
>    http://twistedmatrix.com/~ashfall/12.2.0pre1/

Hooray.  As it's been about a week, and I haven't seen any complaints, I 
expect a final release is imminent.

I'd like to suggest that we make this release, 12.2, the last release to 
support Python 2.6 on Windows.  Historically we have dropped support for 
older versions of Python on Windows before dropping it on other 
platforms, and as we just moved all the other supported platforms up to 
requiring Python 2.6 or newer, this seems like a good time to move 
Windows up to requiring Python 2.7.

This also makes sense in light of our *highly* overloaded continuous 
integration system, which now takes over an hour to complete the Windows 
portion of our testing.

A note about this dependency bump should be included in the NEWS file 
and the final release announcement as well.

Jean-Paul


From tobias.oberstein at tavendo.de  Wed Aug 29 09:19:30 2012
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 29 Aug 2012 06:19:30 -0700
Subject: [Twisted-Python] Switching Protocols and TLS
Message-ID: <634914A010D0B943A035D226786325D4338FB26D55@EXVMBX020-12.exch020.serverdata.net>

Hello,

I am running a Twisted Web Site object that switches the protocol for specific paths.
The goal is to run Twisted Web, and have certain paths mapped to WebSocket.

I am aware of 

http://twistedmatrix.com/trac/ticket/3204

but in the meantime have working code

https://github.com/tavendo/AutobahnPython/blob/master/autobahn/autobahn/resource.py#L84

This works for non-TLS, but not for TLS.

This works perfectly:

https://github.com/tavendo/AutobahnPython/tree/master/examples/websocket/echo_site

and this does NOT work:

https://github.com/tavendo/AutobahnPython/tree/master/examples/websocket/echo_site_tls

The latter is able to send stuff down to client, but won't receive anything.

Any hint how to track that down would be great!

Thanks,
Tobias




From exarkun at twistedmatrix.com  Wed Aug 29 09:53:01 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 29 Aug 2012 13:53:01 -0000
Subject: [Twisted-Python] Switching Protocols and TLS
In-Reply-To: <634914A010D0B943A035D226786325D4338FB26D55@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4338FB26D55@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20120829135301.23316.467672191.divmod.xquotient.14@localhost6.localdomain6>

On 01:19 pm, tobias.oberstein at tavendo.de wrote:
>Hello,
>
>I am running a Twisted Web Site object that switches the protocol for 
>specific paths.
>The goal is to run Twisted Web, and have certain paths mapped to 
>WebSocket.
>
>I am aware of
>
>http://twistedmatrix.com/trac/ticket/3204
>
>but in the meantime have working code
>
>https://github.com/tavendo/AutobahnPython/blob/master/autobahn/autobahn/resource.py#L84
>
>This works for non-TLS, but not for TLS.
>
>This works perfectly:
>
>https://github.com/tavendo/AutobahnPython/tree/master/examples/websocket/echo_site
>
>and this does NOT work:
>
>https://github.com/tavendo/AutobahnPython/tree/master/examples/websocket/echo_site_tls
>
>The latter is able to send stuff down to client, but won't receive 
>anything.
>
>Any hint how to track that down would be great!

The `protocol? attribute isn't part of the transport interface.  Some 
transports are implemented in a way such that changing that attribute to 
refer to a different protocol will produce the behavior you're after, 
but not all.  In particular, the transport implemented in 
twisted.protocols.tls (used to provide the transport whenever you use 
listenSSL, connectSSL, or startTLS) does not work this way.

You should be able to work out which attribute needs to be mangled by 
looking at twisted/protocols/tls.py.  My initial guess would be 
`wrappedProtocol`, but that's *only* a guess.  And of course, whatever 
you find is not going to be part of any formal transport interface 
either, so it's not guaranteed to keep working in the future, or to work 
with any other transport you might end up using - hence the desire to 
resolve #3204.

Jean-Paul


From tobias.oberstein at tavendo.de  Wed Aug 29 10:41:38 2012
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 29 Aug 2012 07:41:38 -0700
Subject: [Twisted-Python] Switching Protocols and TLS
In-Reply-To: <20120829135301.23316.467672191.divmod.xquotient.14@localhost6.localdomain6>
References: <634914A010D0B943A035D226786325D4338FB26D55@EXVMBX020-12.exch020.serverdata.net>
	<20120829135301.23316.467672191.divmod.xquotient.14@localhost6.localdomain6>
Message-ID: <634914A010D0B943A035D226786325D4338FB26DFA@EXVMBX020-12.exch020.serverdata.net>

> >Any hint how to track that down would be great!
> 
> The `protocol? attribute isn't part of the transport interface.  Some transports
> are implemented in a way such that changing that attribute to refer to a
> different protocol will produce the behavior you're after, but not all.  In
> particular, the transport implemented in twisted.protocols.tls (used to provide
> the transport whenever you use listenSSL, connectSSL, or startTLS) does not
> work this way.
> 
> You should be able to work out which attribute needs to be mangled by looking
> at twisted/protocols/tls.py.  My initial guess would be `wrappedProtocol`, but
> that's *only* a guess.  And of course, whatever you find is not going to be part
> of any formal transport interface either, so it's not guaranteed to keep working
> in the future, or to work with any other transport you might end up using -
> hence the desire to resolve #3204.

You are great! ;)

It is indeed "wrappedProtocol" .. and by mangling this, it now works also for TLS!

Yes, I am fully aware that it's a bloody hack .. and I will change code when #3204 lands.

Btw:
1)
http://twistedmatrix.com/trac/ticket/4173
will need to have such a hack also.

2)
Something that still bugs me: who should be responsible for calling start/stopFactory
on the factory that produces the protocol that gets switched over to?

I mean (in my case): I can't just derive from twisted.web.server.Site overriding
start/stopFactory, since there may be multiple Resources added to Site that
do switch protocol. Or should I iterate over the whole Resource tree of Site
finding the protocol switching Resources and call startFactory on them?

Thanks again!

Tobias

From wasilak at gmail.com  Wed Aug 29 15:53:59 2012
From: wasilak at gmail.com (Maciej Wasilak)
Date: Wed, 29 Aug 2012 21:53:59 +0200
Subject: [Twisted-Python] Using Deferred.called to distinguish between
 synchronous and asynchronous result
Message-ID: <CAFUtXGyNqUkxqAa4tBb8=D73-S_Z1ec5FP+29ceExoEyC0h-sg@mail.gmail.com>

Hello,

I am implementing UDP-based protocol in Twisted (CoAP) which allows two
behaviors when answering requests:

1. If response is immediately available - send acknowledgement and response
in a single datagram (piggyback response)
2. If response needs to be fetched or prepared - send datagram with
acknowledgement, and then send another datagram with a response (separate
response)

(I think behavior #1 is called synchronous in most Twisted tutorials, and
behavior #2 is called asynchronous.)

When programmer is implementing his application on top of CoAP protocol, he
or she needs to choose how his request handler is going to behave. I would
like to handle both behaviors in the same manner - by forcing every
user-written request handler to return Deferred. Then I would
check Deferred.called parameter.
1. If True - callback will execute immediately and send proper ACK+Response
(that means request handler used defer.succeed() or somethin similar)
2. If False I send empty ACK, and wait for callback to send Response

code:
def respond(request):
        d = requestHandler(request)
        if d.called is False:
            sendEmptyAck()
        d.addCallback(sendResponse)

I assume that sendResponse can send either ACK+RSP, or only RSP.

I would like to ask if this is a proper approach?

Best Regards
Maciej Wasilak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120829/c47e1736/attachment.htm 

From exarkun at twistedmatrix.com  Wed Aug 29 16:52:15 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 29 Aug 2012 20:52:15 -0000
Subject: [Twisted-Python] Using Deferred.called to distinguish between
 synchronous and asynchronous result
In-Reply-To: <CAFUtXGyNqUkxqAa4tBb8=D73-S_Z1ec5FP+29ceExoEyC0h-sg@mail.gmail.com>
References: <CAFUtXGyNqUkxqAa4tBb8=D73-S_Z1ec5FP+29ceExoEyC0h-sg@mail.gmail.com>
Message-ID: <20120829205215.23316.1858919602.divmod.xquotient.23@localhost6.localdomain6>

On 07:53 pm, wasilak at gmail.com wrote:
>Hello,
>
>I am implementing UDP-based protocol in Twisted (CoAP) which allows two
>behaviors when answering requests:
>
>1. If response is immediately available - send acknowledgement and 
>response
>in a single datagram (piggyback response)
>2. If response needs to be fetched or prepared - send datagram with
>acknowledgement, and then send another datagram with a response 
>(separate
>response)
>
>(I think behavior #1 is called synchronous in most Twisted tutorials, 
>and
>behavior #2 is called asynchronous.)
>
>When programmer is implementing his application on top of CoAP 
>protocol, he
>or she needs to choose how his request handler is going to behave. I 
>would
>like to handle both behaviors in the same manner - by forcing every
>user-written request handler to return Deferred. Then I would
>check Deferred.called parameter.
>1. If True - callback will execute immediately and send proper 
>ACK+Response
>(that means request handler used defer.succeed() or somethin similar)
>2. If False I send empty ACK, and wait for callback to send Response
>
>code:
>def respond(request):
>        d = requestHandler(request)
>        if d.called is False:
>            sendEmptyAck()
>        d.addCallback(sendResponse)
>
>I assume that sendResponse can send either ACK+RSP, or only RSP.
>
>I would like to ask if this is a proper approach?

This isn't the right way to go.  The `called` attribute is set to `True` 
as soon as `Deferred.callback` is called.  This might sound like it's 
what you want, but only if you disregard the chaining feature of 
Deferreds, where a callback on the Deferred might return a *new* unfired 
Deferred.  Now your original Deferred has `called` set to `True` but you 
don't actually have a result yet.

Instead, there are two obvious options:

  1. Allow the application to return a non-Deferred result.  Use 
`isinstance` to detect this case and do the synchronous send when you 
see a non-Deferred come back.  Send the empty ACK and ultimately the 
result in the other case.

  2. Change your empty ACK logic to be time-based instead.  Say, if the 
application doesn't produce a result within 10 milliseconds, send the 
empty ACK.  Implement this using `reactor.callLater` and 
`IDelayedCall.cancel`.  You'll set up a delayed call to send the empty 
ACK every time you call application code, but in the callback on the 
application's Deferred, you'll cancel that call (unless it has already 
happened).

Hope this helps,
Jean-Paul


From wasilak at gmail.com  Thu Aug 30 15:58:12 2012
From: wasilak at gmail.com (Maciej Wasilak)
Date: Thu, 30 Aug 2012 21:58:12 +0200
Subject: [Twisted-Python] Using Deferred.called to distinguish between
 synchronous and asynchronous result
In-Reply-To: <20120829205215.23316.1858919602.divmod.xquotient.23@localhost6.localdomain6>
References: <CAFUtXGyNqUkxqAa4tBb8=D73-S_Z1ec5FP+29ceExoEyC0h-sg@mail.gmail.com>
	<20120829205215.23316.1858919602.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <CAFUtXGxAFTpXpEASB_xGVEho5NgxC_N3pho0nk=3EuZJF68Gcg@mail.gmail.com>

Jean-Paul,

thank you very much for your answer - I would have missed this problem for
sure.
Second option seems a bit more challenging, I'll try this one.

Best Regards
Maciej Wasilak

2012/8/29 <exarkun at twistedmatrix.com>

> On 07:53 pm, wasilak at gmail.com wrote:
> >Hello,
> >
> >I am implementing UDP-based protocol in Twisted (CoAP) which allows two
> >behaviors when answering requests:
> >
> >1. If response is immediately available - send acknowledgement and
> >response
> >in a single datagram (piggyback response)
> >2. If response needs to be fetched or prepared - send datagram with
> >acknowledgement, and then send another datagram with a response
> >(separate
> >response)
> >
> >(I think behavior #1 is called synchronous in most Twisted tutorials,
> >and
> >behavior #2 is called asynchronous.)
> >
> >When programmer is implementing his application on top of CoAP
> >protocol, he
> >or she needs to choose how his request handler is going to behave. I
> >would
> >like to handle both behaviors in the same manner - by forcing every
> >user-written request handler to return Deferred. Then I would
> >check Deferred.called parameter.
> >1. If True - callback will execute immediately and send proper
> >ACK+Response
> >(that means request handler used defer.succeed() or somethin similar)
> >2. If False I send empty ACK, and wait for callback to send Response
> >
> >code:
> >def respond(request):
> >        d = requestHandler(request)
> >        if d.called is False:
> >            sendEmptyAck()
> >        d.addCallback(sendResponse)
> >
> >I assume that sendResponse can send either ACK+RSP, or only RSP.
> >
> >I would like to ask if this is a proper approach?
>
> This isn't the right way to go.  The `called` attribute is set to `True`
> as soon as `Deferred.callback` is called.  This might sound like it's
> what you want, but only if you disregard the chaining feature of
> Deferreds, where a callback on the Deferred might return a *new* unfired
> Deferred.  Now your original Deferred has `called` set to `True` but you
> don't actually have a result yet.
>
> Instead, there are two obvious options:
>
>   1. Allow the application to return a non-Deferred result.  Use
> `isinstance` to detect this case and do the synchronous send when you
> see a non-Deferred come back.  Send the empty ACK and ultimately the
> result in the other case.
>
>   2. Change your empty ACK logic to be time-based instead.  Say, if the
> application doesn't produce a result within 10 milliseconds, send the
> empty ACK.  Implement this using `reactor.callLater` and
> `IDelayedCall.cancel`.  You'll set up a delayed call to send the empty
> ACK every time you call application code, but in the callback on the
> application's Deferred, you'll cancel that call (unless it has already
> happened).
>
> Hope this helps,
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120830/696becae/attachment.htm 

From kstaniek at gmail.com  Fri Aug 31 14:28:41 2012
From: kstaniek at gmail.com (Klaudiusz Staniek)
Date: Fri, 31 Aug 2012 20:28:41 +0200
Subject: [Twisted-Python] tap2deb problem with building package
In-Reply-To: <CAJ96fJ3VYTuMHGua2P1=o_1Xs5N38chSAXsQFe41jJMY22i1dw@mail.gmail.com>
References: <CAJ96fJ3VYTuMHGua2P1=o_1Xs5N38chSAXsQFe41jJMY22i1dw@mail.gmail.com>
Message-ID: <CAJ96fJ3RbCuhdkcdi7de5K+vLyQK8mng21srORwVwPvJdzhWqQ@mail.gmail.com>

Hi
when I try to build the deb package I'm getting the error message: cp:
cannot create regular file `debian/tmp/etc/': No such file or
directory

What is wrong? See below output:
Cheers,
Klaudiusz


tap2deb --unsigned -m "Klaudiusz Staniek <kstaniek at gmail.com>"
--type=python -t xplhub.tac
dpkg-buildpackage: set CFLAGS to default value: -g -O2
dpkg-buildpackage: set CPPFLAGS to default value:
dpkg-buildpackage: set LDFLAGS to default value: -Wl,-Bsymbolic-functions
dpkg-buildpackage: set FFLAGS to default value: -g -O2
dpkg-buildpackage: set CXXFLAGS to default value: -g -O2
dpkg-buildpackage: source package twisted-xplhub
dpkg-buildpackage: source version 1.0
dpkg-buildpackage: source changed by Klaudiusz Staniek <kstaniek at gmail.com>
dpkg-buildpackage: host architecture armel
 fakeroot debian/rules clean
dh_testdir
dh_testroot
rm -f build-stamp install-stamp
dh_clean
 dpkg-source -b twisted-xplhub-1.0
dpkg-source: info: using source format `1.0'
dpkg-source: info: building twisted-xplhub in twisted-xplhub_1.0.tar.gz
dpkg-source: info: building twisted-xplhub in twisted-xplhub_1.0.dsc
 debian/rules build
dh_testdir
touch build-stamp
 fakeroot debian/rules binary
dh_testdir
dh_testroot
dh_clean -k
dh_installdirs
# Add here commands to install the package into debian/tmp.
cp xplhub.tac debian/tmp/etc/
cp: cannot create regular file `debian/tmp/etc/': No such file or directory
make: *** [install-stamp] Error 1
dpkg-buildpackage: error: fakeroot debian/rules binary gave error exit status 2


From spalax at gresille.org  Thu Aug  2 04:36:42 2012
From: spalax at gresille.org (Louis)
Date: Thu, 02 Aug 2012 12:36:42 +0200
Subject: [Twisted-Python] Password hash for Perspective Brokers
In-Reply-To: <CALpq1pa4K1=TXtOaj-DTVbAcSmY-c3160VM1+knC_swc-xbgaQ@mail.gmail.com>
References: <CALpq1pa4K1=TXtOaj-DTVbAcSmY-c3160VM1+knC_swc-xbgaQ@mail.gmail.com>
Message-ID: <501A583A.7050504@gresille.org>

	Hello,

On 27/07/2012 00:07, Flint wrote:
> Hi, i've faced the same problem and submitted a patch a few month ago,
> your can check it here http://twistedmatrix.com/trac/ticket/4398 you'll
> find also a complet example attached.
I read and improved the patch you submitted [1].

Also, to answer to Jean-Paul about a salt already being used in the
authentication [2], I would like to stress that the authentication
method uses two hash methods, which for no reason should be the same
(they can be, but they do not have to).
* The first one (password hash) is the hash method used to store the
password (e.g. crypt(3) for the unix shadow password). It may or may not
be salted.
* The second one (challenge hash) is the hash used during the
challenge/response part of authentication. It is salted, the salt being
a randomly generated string (the challenge).

Right now, password hash is either plain (no hash) or md5, without salt,
and challenge hash is md5, with the challenge as a salt. With the patch
I am submitting, password hash and challenge hash can be any method, the
challenge salt still is a randomly generated string, and the password
salt is anything you want, given that it can be computed given the
username and hashed password.
I drew a sequence diagram in the bug report [1], which can help to
undersand this part

	Cheers,
	Louis

[1] http://twistedmatrix.com/trac/ticket/4398#comment:5
[2] http://twistedmatrix.com/pipermail/twisted-python/2012-July/025928.html



> 
> My first problem was that, the way twisted pb authentication works we're
> supposed to have a plan version of passwords at server side.
> Or this is not always the case, most application store a hashed version
> of the password, the hash method may be different from the one twisted
> pb use to pass the credential over the network
> and thus, we're not able to compare those values.
> 
> In my solution the user can define a custom hash method and tell twisted
> to use it, so that the password given by twisted over the network will
> be hashed the same way that the application does before storing it (in
> database for example), which means we can check if the password is
> correct without having a plain version of it.
> Not that, If we don't "customize" the hash method, the original twisted
> behaviour in used instead, and thus compatibility is preserved.
> 
> -- G
> 
> Message: 1
> 
>     Date: Thu, 26 Jul 2012 12:36:57 -0500
>     From: Kevin Horn <kevin.horn at gmail.com <mailto:kevin.horn at gmail.com>>
>     Subject: Re: [Twisted-Python] Password hash for Perspective Brokers
>     To: Twisted general discussion <twisted-python at twistedmatrix.com
>     <mailto:twisted-python at twistedmatrix.com>>
>     Message-ID:
>            
>     <CA+U=zK3W21_BAg9fbLZzsAmRJXReHsvGmRYb0JLT4sgVV78R7A at mail.gmail.com
>     <mailto:zK3W21_BAg9fbLZzsAmRJXReHsvGmRYb0JLT4sgVV78R7A at mail.gmail.com>>
>     Content-Type: text/plain; charset="iso-8859-1"
> 
>     On Thu, Jul 26, 2012 at 11:43 AM, <exarkun at twistedmatrix.com
>     <mailto:exarkun at twistedmatrix.com>> wrote:
> 
>     > On 02:28 pm, spalax at gresille.org <mailto:spalax at gresille.org> wrote:
>     > >         Hello
>     > >         I have a problem with checkers in Twisted, which could be
>     > >solved by
>     > >adding a new feature. I think I can write the necessary code, but
>     > >before
>     > >doing so, I would like to hear you about it.
>     > >
>     > ># The problem
>     > >
>     > >         If I am right, the only way passwords can be hashed when
>     using
>     > >authentication with perspective brokers is using MD5 [1]. However,
>     > >there
>     > >are two flaws with it.
>     > >
>     > >* First, MD5 is no longer considered sure. It may be possible,
>     from the
>     > >hashed password, to find the original one.
>     > >* Second, in the current implementation of Twisted, no salt is
>     used to
>     > >hash the password. A salt is considered good practise : it is
>     harder to
>     > >find the password from the hashed form, and two identical passwords
>     > >have
>     > >different hashed form, which prevent someone looking at the hashed
>     > >passwords to see if two users have the same password.
>     >
>     > The second point is incorrect.  The hash is salted.  See the `respond`
>     > method in twisted/spread/pb.py.
>     > ># A solution
>     > >
>     > >         I tried to implement the solution proposed in [1], and I
>     think
>     > >I can
>     > >manage to do it. However, this seems to be a not-so-smart hack, which
>     > >is
>     > >not guaranteed to work in future releases of Twisted. That is why
>     I am
>     > >proposing a patch.
>     > >
>     > >         The patch would introduce some arguments to class
>     > >PBServerFactory [2]
>     > >to use (or not) a salt, and a different hash function. I am not
>     settled
>     > >down yet about the new signature of this class, but what is sure is
>     > >that
>     > >the default must be the actual behaviour, not to break programs
>     already
>     > >using Twisted. Then, I hesitate between
>     >
>     > A good approach would be to parameterize the supported authentication
>     > mechanisms in an extensible way, rather than just hard coding one
>     or two
>     > new (probably better) options.
>     >
>     > In other words, a SASL implementation for PB would be the best way to
>     > go.
>     >
>     > The existing API and behavior should indeed be preserved as-is for
>     > backwards compatibility.  The new authentication features should be
>     > exposed under a new API - either as new optional arguments accepted by
>     > PBServerFactory (and perhaps PBClientFactory) and new login methods
>     > (again, probably on those two classes).
>     >
>     > Jean-Paul
>     >
>     >
>     It would probably also help if someone finished the "Generic SASL
>     implementation" ticket.
> 
>     Lessee, who was working on that last?
> 
>     Crap. It was me.
> 
>     Sorry about that.
> 
>     Kevin Horn
>     -------------- next part --------------
>     An HTML attachment was scrubbed...
>     URL:
>     http://twistedmatrix.com/pipermail/twisted-python/attachments/20120726/191265a5/attachment-0001.htm
> 
>     ------------------------------
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From lijian.whu at gmail.com  Fri Aug  3 00:57:57 2012
From: lijian.whu at gmail.com (jian li)
Date: Fri, 3 Aug 2012 14:57:57 +0800
Subject: [Twisted-Python] debug with twisted manhole?
Message-ID: <CAK9xwbpoBCJdchkoYO9Az=SXQgxfp=0gur6CJtOcVXYNhbdoOg@mail.gmail.com>

Hi, All:
I am new to twisted, but I am really like the way twisted does. Here is my
problem? I write some server program with twisted framework. after it was
deployed, I found sometimes twisted thread took too much memory and
sometimes the program just halt without any error information.
    the first thing I came with is debugging. After searching in google,
 It seems twisted manhole was the right thing I should turn to. But another
problem comes now. I can telnet successfully, but I cannot run any
commands, such as "dir()". I always get the same error "?Unknown argument".
<br/>
Is there anyone can help me out? there is very few information about how to
use twisted manhole, even in twisted document. can anyone give me some
documents or links about twisted manhole?<br/>
Thanks a lot. <br/>
here is how I add manhole to my program:<br/>

    application = service.Application(settings.get('PROJECT_NAME'))
    multiService = service.MultiService()

    server = Server() #my original server instance
    multiService.addService(server)
    namespace = {"server": server}
    from twisted.conch.manhole_tap   import makeService
    options = \
    {
    # for some reason, these must
    # all exist, even if None
    'namespace'  : namespace,
    'passwd'     : None, #'pwd.txt',
    'sshPort'    : None,
    'telnetPort' : '8089',
    }
    shell_service = makeService(options)
    multiService.addService(shell_service)
    multiService.setServiceParent(application)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120803/ed45ed06/attachment-0001.html>

From _ at lvh.cc  Fri Aug  3 11:13:00 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Fri, 3 Aug 2012 19:13:00 +0200
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
Message-ID: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>

Hi,

I'm reading the tap how to: http://twistedmatrix.com/documents/current/core/howto/tap.html

In the conclusion, it says:

• Use it from your development environment
• Install it correctly and use it in deployment

I can get it to work from my development environment, but I can't find anything about installing it. I'm using a fairly run-of-the-mill distribute-powered setup.py. What do I do?

This package will always be installed into a site-packageless virtualenv. Ideally the virtualenv's twistd will know all about the new plugin.

On a tangentially related note, my Options class is completely empty. That's not because my project has no configuration options, but simply because I invariably take them from the environment. Does that mean I'm doing it wrong?

cheers
lvh






From duncan.mcgreggor at gmail.com  Fri Aug  3 12:09:11 2012
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Fri, 3 Aug 2012 11:09:11 -0700
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
Message-ID: <CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>

On Fri, Aug 3, 2012 at 10:13 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
> Hi,
>
> I'm reading the tap how to: http://twistedmatrix.com/documents/current/core/howto/tap.html
>
> In the conclusion, it says:
>
> • Use it from your development environment
> • Install it correctly and use it in deployment
>
> I can get it to work from my development environment, but I can't find anything about installing it. I'm using a fairly run-of-the-mill distribute-powered setup.py. What do I do?

Here's an example setup.py:
  https://github.com/dreamhost/akanda/blob/master/setup.py

Note the packages and package_data parameters.

Also, I refresh the plugin cache after setup. This has removed the
problem of Twisted not being able to find newly installed plugins.


d

> This package will always be installed into a site-packageless virtualenv. Ideally the virtualenv's twistd will know all about the new plugin.
>
> On a tangentially related note, my Options class is completely empty. That's not because my project has no configuration options, but simply because I invariably take them from the environment. Does that mean I'm doing it wrong?
>
> cheers
> lvh



From glyph at twistedmatrix.com  Fri Aug  3 20:52:11 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Aug 2012 19:52:11 -0700
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
Message-ID: <890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>


Le Aug 3, 2012 à 11:09 AM, Duncan McGreggor <duncan.mcgreggor at gmail.com> a écrit :

> On Fri, Aug 3, 2012 at 10:13 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
>> Hi,
>> 
>> I'm reading the tap how to: http://twistedmatrix.com/documents/current/core/howto/tap.html
>> 
>> In the conclusion, it says:
>> 
>> • Use it from your development environment
>> • Install it correctly and use it in deployment
>> 
>> I can get it to work from my development environment, but I can't find anything about installing it. I'm using a fairly run-of-the-mill distribute-powered setup.py. What do I do?
> 
> Here's an example setup.py:
>  https://github.com/dreamhost/akanda/blob/master/setup.py
> 
> Note the packages and package_data parameters.
> 
> Also, I refresh the plugin cache after setup. This has removed the
> problem of Twisted not being able to find newly installed plugins.
> 

I think that this is the following Stack Overflow question:

http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools

There are some issues with the answer there, as noted in the comments, but something like this needs to be in Twisted's documentation someplace, as soon as someone can agree what the right way for all the different packaging configurations you can find yourself in is.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120803/2d5831f6/attachment-0001.html>

From _ at lvh.cc  Sat Aug  4 00:11:44 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 4 Aug 2012 08:11:44 +0200
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
	<890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
Message-ID: <8F748DAE-0A12-4E84-92D4-238000B175F2@lvh.cc>

On 04 Aug 2012, at 04:52, Glyph <glyph at twistedmatrix.com> wrote:

> I think that this is the following Stack Overflow question:
> 
> http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools

Thanks!

> There are some issues with the answer there, as noted in the comments, but something like this needs to be in Twisted's documentation someplace, as soon as someone can agree what the right way for all the different packaging configurations you can find yourself in is.

Sooo, never, right?

> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From duncan.mcgreggor at gmail.com  Sat Aug  4 00:39:02 2012
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Fri, 3 Aug 2012 23:39:02 -0700
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
	<890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
Message-ID: <CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>

On Fri, Aug 3, 2012 at 7:52 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> Le Aug 3, 2012 à 11:09 AM, Duncan McGreggor <duncan.mcgreggor at gmail.com>
> a écrit :
>
> On Fri, Aug 3, 2012 at 10:13 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
>
> Hi,
>
> I'm reading the tap how to:
> http://twistedmatrix.com/documents/current/core/howto/tap.html
>
> In the conclusion, it says:
>
> • Use it from your development environment
> • Install it correctly and use it in deployment
>
> I can get it to work from my development environment, but I can't find
> anything about installing it. I'm using a fairly run-of-the-mill
> distribute-powered setup.py. What do I do?
>
>
> Here's an example setup.py:
>  https://github.com/dreamhost/akanda/blob/master/setup.py
>
> Note the packages and package_data parameters.
>
> Also, I refresh the plugin cache after setup. This has removed the
> problem of Twisted not being able to find newly installed plugins.
>
>
> I *think* that this is the following Stack Overflow question:
>
>
> http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools
>

That's a great link; the main solution solves several problems I had run
into, but hadn't had the time to explore/debug. Now I know why...

Thanks!

d


>
> There are some issues with the answer there, as noted in the comments, but
> something like this needs to be in Twisted's documentation someplace, as
> soon as someone can agree what the right way for all the different
> packaging configurations you can find yourself in is.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120803/fd55cafa/attachment.html>

From exarkun at twistedmatrix.com  Sat Aug  4 04:56:14 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 04 Aug 2012 10:56:14 -0000
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
	<890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
	<CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>
Message-ID: <20120804105614.21368.1449417438.divmod.xquotient.39@localhost6.localdomain6>

On 06:39 am, duncan.mcgreggor at gmail.com wrote:
>On Fri, Aug 3, 2012 at 7:52 PM, Glyph <glyph at twistedmatrix.com> wrote:
>>
>>Le Aug 3, 2012 à 11:09 AM, Duncan McGreggor 
>><duncan.mcgreggor at gmail.com>
>>a écrit :
>>
>>On Fri, Aug 3, 2012 at 10:13 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
>>
>>Hi,
>>
>>I'm reading the tap how to:
>>http://twistedmatrix.com/documents/current/core/howto/tap.html
>>
>>In the conclusion, it says:
>>
>>• Use it from your development environment
>>• Install it correctly and use it in deployment
>>
>>I can get it to work from my development environment, but I can't find
>>anything about installing it. I'm using a fairly run-of-the-mill
>>distribute-powered setup.py. What do I do?
>>
>>
>>Here's an example setup.py:
>>  https://github.com/dreamhost/akanda/blob/master/setup.py
>>
>>Note the packages and package_data parameters.
>>
>>Also, I refresh the plugin cache after setup. This has removed the
>>problem of Twisted not being able to find newly installed plugins.
>>
>>
>>I *think* that this is the following Stack Overflow question:
>>
>>
>>http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py- 
>>for-a-twistd-twisted-plugin-that-works-with-setuptools
>
>That's a great link; the main solution solves several problems I had 
>run
>into, but hadn't had the time to explore/debug. Now I know why...

Perhaps we should just add a link to that SO question to the 
documentation, since an actual answer is not likely to be forthcoming in 
the near future.

Jean-Paul
>Thanks!
>
>d
>>
>>There are some issues with the answer there, as noted in the comments, 
>>but
>>something like this needs to be in Twisted's documentation someplace, 
>>as
>>soon as someone can agree what the right way for all the different
>>packaging configurations you can find yourself in is.
>>
>>-glyph
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From duncan.mcgreggor at gmail.com  Sat Aug  4 11:28:03 2012
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 4 Aug 2012 10:28:03 -0700
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <20120804105614.21368.1449417438.divmod.xquotient.39@localhost6.localdomain6>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
	<890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
	<CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>
	<20120804105614.21368.1449417438.divmod.xquotient.39@localhost6.localdomain6>
Message-ID: <CAFJQhU6rrmvDhXcfRzC8TDkh1sfSu=KbyzgDsFJFw5De1jr0Qw@mail.gmail.com>

On Sat, Aug 4, 2012 at 3:56 AM, <exarkun at twistedmatrix.com> wrote:

> On 06:39 am, duncan.mcgreggor at gmail.com wrote:
> >On Fri, Aug 3, 2012 at 7:52 PM, Glyph <glyph at twistedmatrix.com> wrote:
> >>
> >>Le Aug 3, 2012 à 11:09 AM, Duncan McGreggor
> >><duncan.mcgreggor at gmail.com>
> >>a écrit :
> >>
> >>On Fri, Aug 3, 2012 at 10:13 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
> >>
> >>Hi,
> >>
> >>I'm reading the tap how to:
> >>http://twistedmatrix.com/documents/current/core/howto/tap.html
> >>
> >>In the conclusion, it says:
> >>
> >>• Use it from your development environment
> >>• Install it correctly and use it in deployment
> >>
> >>I can get it to work from my development environment, but I can't find
> >>anything about installing it. I'm using a fairly run-of-the-mill
> >>distribute-powered setup.py. What do I do?
> >>
> >>
> >>Here's an example setup.py:
> >>  https://github.com/dreamhost/akanda/blob/master/setup.py
> >>
> >>Note the packages and package_data parameters.
> >>
> >>Also, I refresh the plugin cache after setup. This has removed the
> >>problem of Twisted not being able to find newly installed plugins.
> >>
> >>
> >>I *think* that this is the following Stack Overflow question:
> >>
> >>
> >>http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-
> >>for-a-twistd-twisted-plugin-that-works-with-setuptools
> >
> >That's a great link; the main solution solves several problems I had
> >run
> >into, but hadn't had the time to explore/debug. Now I know why...
>
> Perhaps we should just add a link to that SO question to the
> documentation, since an actual answer is not likely to be forthcoming in
> the near future.
>

+1

d
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120804/0da2b70b/attachment.html>

From glyph at twistedmatrix.com  Sat Aug  4 16:08:58 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 4 Aug 2012 15:08:58 -0700
Subject: [Twisted-Python] TAP howto: doesn't appear to cover installation
In-Reply-To: <CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>
References: <ECBBFBFF-0581-416D-B191-0617759F2FC1@lvh.cc>
	<CAFJQhU6QkD1U19QP5hACKoa=sp9qU5kNCWsi2012+db3JX0KmA@mail.gmail.com>
	<890D18C8-3D56-4411-BE47-E8F6E9B59D6C@twistedmatrix.com>
	<CAFJQhU6oSFjb7wqGRN5LCUcV9G4zXNxaCKVqk4oyLMp3LxZUQg@mail.gmail.com>
Message-ID: <2F10D0BB-3CDF-4507-B853-F06DE9805EF0@twistedmatrix.com>


Le Aug 3, 2012 à 11:39 PM, Duncan McGreggor <duncan.mcgreggor at gmail.com> a écrit :

> I think that this is the following Stack Overflow question:
> 
> http://stackoverflow.com/questions/7275295/how-do-i-write-a-setup-py-for-a-twistd-twisted-plugin-that-works-with-setuptools
> 
> That's a great link; the main solution solves several problems I had run into, but hadn't had the time to explore/debug. Now I know why...
> 
> Thanks!

All I ask in return is that you flesh out the answer even further, if you hit and debug any further issues with the answer :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120804/cd583691/attachment.html>

From gelonida at gmail.com  Sat Aug  4 16:23:58 2012
From: gelonida at gmail.com (Gelonida N)
Date: Sun, 05 Aug 2012 00:23:58 +0200
Subject: [Twisted-Python] simple example for twisted ssh server with public
	key authentification
Message-ID: <jvk7e6$cjp$1@dough.gmane.org>

Hi,

I just wanted to be sure, whether anybody has a small example snippet of 
a twisted ssh server with public key authentification.





From duncan.mcgreggor at gmail.com  Sat Aug  4 17:59:38 2012
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 4 Aug 2012 16:59:38 -0700
Subject: [Twisted-Python] simple example for twisted ssh server with
 public key authentification
In-Reply-To: <jvk7e6$cjp$1@dough.gmane.org>
References: <jvk7e6$cjp$1@dough.gmane.org>
Message-ID: <CAFJQhU7VVY0pPib=wawr3+f3OVvjsTduxgP-T3o_wEMy8NZcFQ@mail.gmail.com>

On Sat, Aug 4, 2012 at 3:23 PM, Gelonida N <gelonida at gmail.com> wrote:

> Hi,
>
> I just wanted to be sure, whether anybody has a small example snippet of
> a twisted ssh server with public key authentification.
>

So, um, simple? Not sure if I can help you there ;-) This was simple at one
point, when it was part of an IRC logging bot that offered an SSH shell
(manhole) to manipulate live objects, but it has since been split out into
its own project:
  https://github.com/dreamhost/dreamssh

Best case scenario, it provides what you need.

Worst case scenario, you can fork it and remove all the crap that you don't
need ;-)

Note that dreamssh provides the Twisted-standard manhole interpreter, as
well as a custom "echo" interpreter, intended to offer an example of how to
create your own ssh shell (I've started using this in a text-based
adventure game, with the ultimate goal of using it as the interface for a
Twisted-base MUD).

d
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120804/5e896b6d/attachment.html>

From exarkun at twistedmatrix.com  Sat Aug  4 22:05:49 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 05 Aug 2012 04:05:49 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1344139549.36.2076483847@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120805/989f7b3a/attachment.html>

From _ at lvh.cc  Sun Aug  5 04:12:18 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sun, 5 Aug 2012 12:12:18 +0200
Subject: [Twisted-Python] AMPBox as an Argument?
In-Reply-To: <20120724132951.3468.1237221315.divmod.xquotient.23@localhost6.localdomain6>
References: <279F3DA8-8AE8-4197-84AF-895B07527B32@lvh.cc>
	<5AB76410-6A1B-4AE0-9208-D718B1BC7334@twistedmatrix.com>
	<04F1EE05-2411-4798-9CAB-15504C9F5A3B@lvh.cc>
	<20120724132951.3468.1237221315.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <BFBE110A-3BA3-4A56-9174-0A2D25FEBEBE@lvh.cc>

That might be a preferable general case yes :)

For future reference here's the NestedAMPBox I wrote as Glyph suggested:

https://gist.github.com/3263629


cheers
lvh



On 24 Jul 2012, at 15:29, exarkun at twistedmatrix.com wrote:

> On 12:48 pm, _ at lvh.cc wrote:
>> Sure, I just ended up doing that.
>> 
>> Would it be worth creating a ticket, or am I seriously the first person 
>> to want this?
> 
> Some general dict argument types would be great.  The kind represented 
> by AMPList included.  Note that once we have this, AMPList can actually 
> be implemented in like ListOf(Dict()) instead of being a special case. 
> This argues against implementing Dict in terms of AMPList, though. ;)
> 
> Jean-Paul
>> 
>> cheers
>> lvh
>> 
>> 
>> 
>> On 20 Jul 2012, at 10:35, Glyph wrote:
>>> 
>>> On Jul 20, 2012, at 1:11 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
>>>> Hi,
>>>> 
>>>> 
>>>> Apparently AMPBoxes aren't Arguments. However, I kind of want an 
>>>> AMPBox (like an AMPList, but only one).
>>>> 
>>>> Use case: my responses have a "location", but a location is composed 
>>>> of several sub-things: place name, country and postal code. 
>>>> {"location": {"placeName": "Krakow", "countryCode": "PL", postalCode: 
>>>> "30-015"}} would be a lot nicer  than having those keys in the top 
>>>> level namespace :)
>>>> 
>>>> cheers
>>>> lvh
>>> 
>>> Seems like an easy enough thing to write.  Given that AMPList doesn't 
>>> use a length prefix (it uses null-key box-termination, just like the 
>>> rest of the protocol) the representation would be exactly the same. 
>>> Just add a trivial wrapper that uses AMPList, unpacks its argument, 
>>> and assert that there's only one of them?
>>> 
>>> -glyph
>>> 
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From eric at teratorn.org  Sun Aug  5 18:17:11 2012
From: eric at teratorn.org (Eric P. Mangold)
Date: Sun, 5 Aug 2012 20:17:11 -0400
Subject: [Twisted-Python] AMPBox as an Argument?
In-Reply-To: <279F3DA8-8AE8-4197-84AF-895B07527B32@lvh.cc>
References: <279F3DA8-8AE8-4197-84AF-895B07527B32@lvh.cc>
Message-ID: <20120806001711.GV10379@ragnarok.teratorn.org>

Hi Lauren

On Fri, Jul 20, 2012 at 10:11:17AM +0200, Laurens Van Houtven wrote:
> Hi,
> 
> 
> Apparently AMPBoxes aren't Arguments. However, I kind of want an AMPBox (like an AMPList, but only one).
 
Yes it's a pretty common use-case.

Right now you may use an AMPList with a single element. This is perfectly fine. Perhaps a wrapper class that restricts it to a single value would suffice?

It would be easy to commit to Twisted probably.

just a thought

> Use case: my responses have a "location", but a location is composed of several sub-things: place name, country and postal code. {"location": {"placeName": "Krakow", "countryCode": "PL", postalCode: "30-015"}} would be a lot nicer  than having those keys in the top level namespace :)

I do not necessarily agree. I think namespace prefixing, if well defined, is fine on AMP arguments appearing in the top-level packet. Alternatively the AMPList approach is there.

(JSON in AMP Arguments works pretty well I hear, too).

--
Cheers,
-E

> 
> cheers
> lvh
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From eric at teratorn.org  Sun Aug  5 18:36:38 2012
From: eric at teratorn.org (Eric P. Mangold)
Date: Sun, 5 Aug 2012 20:36:38 -0400
Subject: [Twisted-Python] AMPBox as an Argument?
In-Reply-To: <20120724132951.3468.1237221315.divmod.xquotient.23@localhost6.localdomain6>
References: <279F3DA8-8AE8-4197-84AF-895B07527B32@lvh.cc>
	<5AB76410-6A1B-4AE0-9208-D718B1BC7334@twistedmatrix.com>
	<04F1EE05-2411-4798-9CAB-15504C9F5A3B@lvh.cc>
	<20120724132951.3468.1237221315.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <20120806003638.GW10379@ragnarok.teratorn.org>

On Tue, Jul 24, 2012 at 01:29:51PM -0000, exarkun at twistedmatrix.com wrote:
> On 12:48 pm, _ at lvh.cc wrote:
> >Sure, I just ended up doing that.
> >
> >Would it be worth creating a ticket, or am I seriously the first person 
> >to want this?
> 
> Some general dict argument types would be great.  The kind represented 
> by AMPList included.  Note that once we have this, AMPList can actually 
> be implemented in like ListOf(Dict()) instead of being a special case. 
> This argues against implementing Dict in terms of AMPList, though. ;)
 
That sounds really useful.

-E

> Jean-Paul
> >
> >cheers
> >lvh
> >
> >
> >
> >On 20 Jul 2012, at 10:35, Glyph wrote:
> >>
> >>On Jul 20, 2012, at 1:11 AM, Laurens Van Houtven <_ at lvh.cc> wrote:
> >>>Hi,
> >>>
> >>>
> >>>Apparently AMPBoxes aren't Arguments. However, I kind of want an 
> >>>AMPBox (like an AMPList, but only one).
> >>>
> >>>Use case: my responses have a "location", but a location is composed 
> >>>of several sub-things: place name, country and postal code. 
> >>>{"location": {"placeName": "Krakow", "countryCode": "PL", postalCode: 
> >>>"30-015"}} would be a lot nicer  than having those keys in the top 
> >>>level namespace :)
> >>>
> >>>cheers
> >>>lvh
> >>
> >>Seems like an easy enough thing to write.  Given that AMPList doesn't 
> >>use a length prefix (it uses null-key box-termination, just like the 
> >>rest of the protocol) the representation would be exactly the same. 
> >>Just add a trivial wrapper that uses AMPList, unpacks its argument, 
> >>and assert that there's only one of them?
> >>
> >>-glyph
> >>
> >>
> >>_______________________________________________
> >>Twisted-Python mailing list
> >>Twisted-Python at twistedmatrix.com
> >>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> >_______________________________________________
> >Twisted-Python mailing list
> >Twisted-Python at twistedmatrix.com
> >http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From gelonida at gmail.com  Mon Aug  6 01:30:47 2012
From: gelonida at gmail.com (Gelonida N)
Date: Mon, 06 Aug 2012 09:30:47 +0200
Subject: [Twisted-Python] simple example for twisted ssh server with
	public key authentification
In-Reply-To: <CAFJQhU7VVY0pPib=wawr3+f3OVvjsTduxgP-T3o_wEMy8NZcFQ@mail.gmail.com>
References: <jvk7e6$cjp$1@dough.gmane.org>
	<CAFJQhU7VVY0pPib=wawr3+f3OVvjsTduxgP-T3o_wEMy8NZcFQ@mail.gmail.com>
Message-ID: <jvnrr7$vm1$1@dough.gmane.org>

On 08/05/2012 01:59 AM, Duncan McGreggor wrote:
>
>
> On Sat, Aug 4, 2012 at 3:23 PM, Gelonida N <gelonida at gmail.com
> <mailto:gelonida at gmail.com>> wrote:
>
>     Hi,
>
>     I just wanted to be sure, whether anybody has a small example snippet of
>     a twisted ssh server with public key authentification.
>
>
> So, um, simple? Not sure if I can help you there ;-) This was simple at
> one point, when it was part of an IRC logging bot that offered an SSH
> shell (manhole) to manipulate live objects, but it has since been split
> out into its own project:
> https://github.com/dreamhost/dreamssh
>
> Best case scenario, it provides what you need.
>
> Worst case scenario, you can fork it and remove all the crap that you
> don't need ;-)
>
> Note that dreamssh provides the Twisted-standard manhole interpreter, as
> well as a custom "echo" interpreter, intended to offer an example of how
> to create your own ssh shell (I've started using this in a text-based
> adventure game, with the ultimate goal of using it as the interface for
> a Twisted-base MUD).



Thanks Duncan,

I'll look into it, but it defeinitely sounds like a good starting point 
(looking at the project description)







From cyli at twistedmatrix.com  Mon Aug  6 11:07:46 2012
From: cyli at twistedmatrix.com (Ying Li)
Date: Mon, 6 Aug 2012 10:07:46 -0700
Subject: [Twisted-Python] San Francisco Twisted Sprint, Sunday August 19th
Message-ID: <CA+Q0aKFPq-e2F5b7T9=VC02JuqUxgKpXgL4eiDice50F+_KsYw@mail.gmail.com>

Hello all!

There will be a Twisted Sprint on Sunday, August 19th, in San
Francisco at 620 Folsom St, Suite 100, in San Francisco, CA.
There will be foods and coffee!

-Ying



From ilja.livenson at gmail.com  Tue Aug  7 03:58:46 2012
From: ilja.livenson at gmail.com (Ilja Livenson)
Date: Tue, 7 Aug 2012 12:58:46 +0300
Subject: [Twisted-Python] simple example for twisted ssh server with
 public key authentification
In-Reply-To: <jvnrr7$vm1$1@dough.gmane.org>
References: <jvk7e6$cjp$1@dough.gmane.org>
	<CAFJQhU7VVY0pPib=wawr3+f3OVvjsTduxgP-T3o_wEMy8NZcFQ@mail.gmail.com>
	<jvnrr7$vm1$1@dough.gmane.org>
Message-ID: <CAF8QyE_kBxFOWGF+JhR2wn7nMcTxG627OM=52WEFB=xMJz8C=A@mail.gmail.com>

Hi,

perhaps our project code could help with the insight:

Creation of the SSH server:
https://github.com/opennode/opennode-management/blob/master/opennode/oms.tac#L26
Definition of the checker:
https://github.com/opennode/opennode-management/blob/master/opennode/oms/security/authentication.py#L65

cheers,
Ilja

On 6 August 2012 10:30, Gelonida N <gelonida at gmail.com> wrote:

> On 08/05/2012 01:59 AM, Duncan McGreggor wrote:
> >
> >
> > On Sat, Aug 4, 2012 at 3:23 PM, Gelonida N <gelonida at gmail.com
> > <mailto:gelonida at gmail.com>> wrote:
> >
> >     Hi,
> >
> >     I just wanted to be sure, whether anybody has a small example
> snippet of
> >     a twisted ssh server with public key authentification.
> >
> >
> > So, um, simple? Not sure if I can help you there ;-) This was simple at
> > one point, when it was part of an IRC logging bot that offered an SSH
> > shell (manhole) to manipulate live objects, but it has since been split
> > out into its own project:
> > https://github.com/dreamhost/dreamssh
> >
> > Best case scenario, it provides what you need.
> >
> > Worst case scenario, you can fork it and remove all the crap that you
> > don't need ;-)
> >
> > Note that dreamssh provides the Twisted-standard manhole interpreter, as
> > well as a custom "echo" interpreter, intended to offer an example of how
> > to create your own ssh shell (I've started using this in a text-based
> > adventure game, with the ultimate goal of using it as the interface for
> > a Twisted-base MUD).
>
>
>
> Thanks Duncan,
>
> I'll look into it, but it defeinitely sounds like a good starting point
> (looking at the project description)
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120807/0ebe542f/attachment-0001.html>

From dj.foguelman at gmail.com  Tue Aug  7 14:41:50 2012
From: dj.foguelman at gmail.com (DF--)
Date: Tue, 7 Aug 2012 17:41:50 -0300
Subject: [Twisted-Python] Using ProxyClient
Message-ID: <CAEohUJKjQ+HMw_XP7DMN0Lpe7-4x-rAY_6YZTzH5Fisf+-rU0w@mail.gmail.com>

Hi Guys!

I'm new to the twisted framework and I'm using it to write a simple
HTTPProxy with rewrite capabilities.

While calling ProxyCiient.handleHeader method, it seems that Content-Length
field is being added. Notice that I say "add" instead of "set":

    def handleHeader(self, key, value):
        *if key.lower() in ['server', 'date', 'content-type']:*
            self.father.responseHeaders.setRawHeaders(key, [value])
        else:
            *self.father.responseHeaders.addRawHeader(key, value)*


Look at this headers that I get if I use handleHeader method:

HTTP/1.1 200 OK
*Content-Length: 3025
Content-Length: 53*
Host: localhost:8001
Accept: */*
Server: Coco el servidor
Connection: close
Date: Tue, 07 Aug 2012 20:35:13 GMT
User-Agent: curl/7.19.7 (i486-pc-linux-gnu) libcurl/7.19.7 OpenSSL/0.9.8k
zlib/1.2.3.3 libidn/1.15
Content-Type: text/html


So question is, am I using it properly? I'm adjusting the content length
field as the data changed.

Thanks in advanced, Daniel

 "En economía no hay nada misterioso ni inaccesible al entendimiento del
hombre de la calle. Si hay un misterio, reside él en el oculto propósito
que puede perseguir el economista y que no es otro que la disimulación del
interés concreto a que se sirve."

A. Jauretche
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120807/89d6f5fc/attachment-0001.html>

From _ at lvh.cc  Wed Aug  8 06:36:37 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 8 Aug 2012 14:36:37 +0200
Subject: [Twisted-Python] IUnicodeUsernamePassword?
Message-ID: <85BED73D-C15E-4147-BC89-2C7A6C118536@lvh.cc>

Hi,

Adding t.conch's ssh manhole (any third party IUsernamePassword provider would've done, really) to my app recently uncovered some unicode handling issues and I'm wondering what the appropriate way to resolve them is.

In my API (AMP) there is a:
    - e-mail which is unicode
    - password which is unicode

In my store (Axiom), there is a:
    - uid (unique user identifier, think UUID) which is bytes
    - e-mail which is unicode
    - password which is bytes, because it's the output of scrypt. scrypt also takes bytes as input: the password is first utf-8 encoded.

Previously I was mistakenly handing around IUsernamePasswords where the e-mail address was unicode.

Obviously the ICredentialsChecker implementation should take IUsernamePasswords that actually satisfy their contract and don't just pretend to, so ALL credentials it receives should have str/str, no exceptions. So, right now my credentials checker decodes the provided username to unicode in order to find the user by e-mail address (since, as mentioned above, Axiom thinks my e-mail addresses are unicode).

The flip side of this is that the login method now first encodes the provided username and password as unicode. This is at least a semantically correct solution, but has the somewhat surprising property that in the 99.9% use case, the e-mail is received as unicode, immediately encoded, and then virtually straight after decoded again. That doesn't mean it's wrong, but it's a little weird.

Potential solutions:

1. Make e-mail addresses bytes always. I don't know if this is semantically valid.
2. Add an IUnicodeUsernamePassword interface and implementation, and leaving adaptation to handle decoding/encoding. The downside here is that IIUC cred does not try to adapt to the ICredentialsChecker's supported interfaces, something I believe I complained about a few years back.

cheers
lvh






From _ at lvh.cc  Wed Aug  8 07:58:27 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 8 Aug 2012 15:58:27 +0200
Subject: [Twisted-Python] twisted server config: command line,
	environment or Axiom?
Message-ID: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>

Hi,

I have a bunch of configuration for my service. Things like endpoints, location of the root axiom store… Right now I grab these from the environment. That means that my twistd IServiceMaker plugin's options is pretty much by definition empty.

I'm wondering if more mature twistd users have already learned the hard way what the best way to manage this is. I see three possible solutions:

1. environment variables as I use them now: portable, simple.
2. command line options: still pretty portable and simple. additional benefit: easy discoverability of options
3. axiom store: has the benefit that there's a single source of truth for everything, i.e. I copy a store and I can recreate the service based on that store exactly, using just the store

Like I said, I currently use (1), it looks like (1) and (2) are more or less equivalent, I'm not sure if (3) is a good idea. I'm not really unhappy with (1), it's just that finally writing my ServiceMaker class made me contemplate the options.

(3) has the downside that it conflates user data with configuration data. I'm not sure that's a good thing or not. It sounds very similar to axiomatic, which I've heard of, seen, but never played with.

I already use environment variables to decide whether or not to run certain tests ("live" functional high level tests, with real disk and network IO, that take way longer than the unit tests to run). I'm going to keep it that way, because there's no obvious way of passing configuration to the tests other than the environment.

cheers
lvh






From eric at teratorn.org  Wed Aug  8 10:31:42 2012
From: eric at teratorn.org (Eric P. Mangold)
Date: Wed, 8 Aug 2012 12:31:42 -0400
Subject: [Twisted-Python] twisted server config: command line,
 environment or Axiom?
In-Reply-To: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
References: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
Message-ID: <20120808163142.GB10379@ragnarok.teratorn.org>

On Wed, Aug 08, 2012 at 03:58:27PM +0200, Laurens Van Houtven wrote:
> Hi,
> 
> I have a bunch of configuration for my service. Things like endpoints, location of the root axiom store? Right now I grab these from the environment. That means that my twistd IServiceMaker plugin's options is pretty much by definition empty.
> 
> I'm wondering if more mature twistd users have already learned the hard way what the best way to manage this is. I see three possible solutions:
> 
> 1. environment variables as I use them now: portable, simple.
> 2. command line options: still pretty portable and simple. additional benefit: easy discoverability of options

Both, preferrably. Defining all of your configuration in terms of t.p.usage.Options is not a bad thing at all.
It's human readable, and scriptable. And it maps directly to ENV vars or INI files (etc). If you have strange configuration requirements, (like binary files), I think those belong in their own seperate file(s). E.g. SSL certificates, PW files, etc

> 3. axiom store: has the benefit that there's a single source of truth for everything, i.e. I copy a store and I can recreate the service based on that store exactly, using just the store
 
Yeah, I hate that kind of configuration. Configuration is/should-be diffable with standard tools, if possible.

> Like I said, I currently use (1), it looks like (1) and (2) are more or less equivalent, I'm not sure if (3) is a good idea. I'm not really unhappy with (1), it's just that finally writing my ServiceMaker class made me contemplate the options.
> 
> (3) has the downside that it conflates user data with configuration data. I'm not sure that's a good thing or not. It sounds very similar to axiomatic, which I've heard of, seen, but never played with.

Well as indicated *I don't like it*, but really that is only due to lack of tooling support... :)
 
> I already use environment variables to decide whether or not to run certain tests ("live" functional high level tests, with real disk and network IO, that take way longer than the unit tests to run). I'm going to keep it that way, because there's no obvious way of passing configuration to the tests other than the environment.

Yeah. Plain ENV vars are probably the best bet there.
 
--
Cheers,
-E



From kevin.horn at gmail.com  Wed Aug  8 12:06:07 2012
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 8 Aug 2012 13:06:07 -0500
Subject: [Twisted-Python] twisted server config: command line,
 environment or Axiom?
In-Reply-To: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
References: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
Message-ID: <CA+U=zK3hFVWi0apbM4is9c6AAwM5aw5OGUwvpK9h7-8K3uPQTA@mail.gmail.com>

On Wed, Aug 8, 2012 at 8:58 AM, Laurens Van Houtven <_ at lvh.cc> wrote:

> Hi,
>
> I have a bunch of configuration for my service. Things like endpoints,
> location of the root axiom store… Right now I grab these from the
> environment. That means that my twistd IServiceMaker plugin's options is
> pretty much by definition empty.
>
> I'm wondering if more mature twistd users have already learned the hard
> way what the best way to manage this is. I see three possible solutions:
>
> 1. environment variables as I use them now: portable, simple.
> 2. command line options: still pretty portable and simple. additional
> benefit: easy discoverability of options
> 3. axiom store: has the benefit that there's a single source of truth for
> everything, i.e. I copy a store and I can recreate the service based on
> that store exactly, using just the store
>
>
Never, ever store config data and user data in the same place.  Likewise,
if you're going to persist config data, it should be in some kind of plain
text format.

1) and 2) are fine, though I prefer a simple text file format as well, and
I like to have multiple levels of configuration which are overridable.

e.g.
one or more config files (maybe in /etc, in /home/<user>, the pwd) which
override each other in a specified manner, which are in turn overridable by
command line options and/or env vars

whether any of this is appropriate for your case, and how much complexity
you need obviously depends on your application

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120808/81a21f15/attachment.html>

From exarkun at twistedmatrix.com  Wed Aug  8 14:13:09 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 08 Aug 2012 20:13:09 -0000
Subject: [Twisted-Python] twisted server config: command line,
 environment or Axiom?
In-Reply-To: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
References: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
Message-ID: <20120808201309.4141.1475964212.divmod.xquotient.18@localhost6.localdomain6>

On 01:58 pm, _ at lvh.cc wrote:
>Hi,
>
>I have a bunch of configuration for my service. Things like endpoints, 
>location of the root axiom store… Right now I grab these from the 
>environment. That means that my twistd IServiceMaker plugin's options 
>is pretty much by definition empty.
>
>I'm wondering if more mature twistd users have already learned the hard 
>way what the best way to manage this is. I see three possible 
>solutions:
>
>1. environment variables as I use them now: portable, simple.
>2. command line options: still pretty portable and simple. additional 
>benefit: easy discoverability of options
>3. axiom store: has the benefit that there's a single source of truth 
>for everything, i.e. I copy a store and I can recreate the service 
>based on that store exactly, using just the store

This doesn't really seem like a Twisted question... but...

axiom is my favorite configuration persistence tool.
>Like I said, I currently use (1), it looks like (1) and (2) are more or 
>less equivalent, I'm not sure if (3) is a good idea. I'm not really 
>unhappy with (1), it's just that finally writing my ServiceMaker class 
>made me contemplate the options.
>
>(3) has the downside that it conflates user data with configuration 
>data. I'm not sure that's a good thing or not. It sounds very similar 
>to axiomatic, which I've heard of, seen, but never played with.

It doesn't conflate user data with configuration data any more than any 
other system.  Keep a database for your configuration and keep your user 
data somewhere else (perhaps in a separate axiom store).

Jean-Paul
>I already use environment variables to decide whether or not to run 
>certain tests ("live" functional high level tests, with real disk and 
>network IO, that take way longer than the unit tests to run). I'm going 
>to keep it that way, because there's no obvious way of passing 
>configuration to the tests other than the environment.
>
>cheers
>lvh
>
>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From mithrandi at mithrandi.net  Wed Aug  8 14:29:05 2012
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 8 Aug 2012 22:29:05 +0200
Subject: [Twisted-Python] twisted server config: command line,
 environment or Axiom?
In-Reply-To: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
References: <4C427B20-A59B-43ED-B6E4-3429F2E3CD69@lvh.cc>
Message-ID: <CAMcKhMSHk4DnvphkAPyrxMRBM0KGS8jUtRV+7SM79zmKc84c=Q@mail.gmail.com>

On Wed, Aug 8, 2012 at 3:58 PM, Laurens Van Houtven <_ at lvh.cc> wrote:
> (3) has the downside that it conflates user data with configuration data. I'm not sure that's a good thing or not. It sounds very similar to axiomatic, which I've heard of, seen, but never played with.

As exarkun mentions in his reply, you don't have to store the
configuration and user data in the same Axiom store. If you're
interested, the way "axiomatic start" works is that it locates all
IService powerups on the store you pass it (which would be the "site
store", in Mantissa), and attaches those to the application. I think
most of the interesting IService implementations are in Mantissa, not
Axiom, but axiomatic itself does not depend on Mantissa and of course
there's no reason you can't write your own IService powerups.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From glyph at twistedmatrix.com  Wed Aug  8 17:36:59 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 8 Aug 2012 16:36:59 -0700
Subject: [Twisted-Python] IUnicodeUsernamePassword?
In-Reply-To: <85BED73D-C15E-4147-BC89-2C7A6C118536@lvh.cc>
References: <85BED73D-C15E-4147-BC89-2C7A6C118536@lvh.cc>
Message-ID: <5DDD5E67-9FD4-49E4-BEC7-DD2839257B6F@twistedmatrix.com>


Le Aug 8, 2012 à 5:36 AM, Laurens Van Houtven <_ at lvh.cc> a écrit :

> 2. Add an IUnicodeUsernamePassword interface and implementation, and leaving adaptation to handle decoding/encoding. The downside here is that IIUC cred does not try to adapt to the ICredentialsChecker's supported interfaces, something I believe I complained about a few years back.

And it never will.  Trying to make this work all the way would require infinitely transitive adaptation, not to mention some kind of additional plugin interface to make sure that all your adapter registrations get loaded by the right moment, so you need to have checkers which explicitly declare their support.  But nowadays we have strcred, and if only everything used that, you could develop all this support in your application, including a strcred prefix which could fix any IUsernamePasword-checking checker by wrapping it :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120808/46e53ed9/attachment.html>

From lacrima.maxim at gmail.com  Thu Aug  9 01:46:18 2012
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Thu, 9 Aug 2012 10:46:18 +0300
Subject: [Twisted-Python] Using StandardIO and pipes.
Message-ID: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>

Hello!

I am very new to Twisted and I have some problems using stdin.StandardIO.
Here is the code:

# item.py file
from twisted.internet import reactor, stdio
from twisted.protocols import basic
from storage import Item

class EchoItemProtocol(basic.LineReceiver):
    delimiter = '\n'

    def lineReceived(self, item_id):
        # Item.get returns a deferred
        d = Item.get(item_id)
        def writeResponse(item):
            self.transport.write(str(item) + '\n')
        d.addCallback(writeResponse)

def main():
    stdio.StandardIO(EchoItemProtocol())
    reactor.run()

if __name__ == '__main__':
    main()


So, when I run the file it works:
$ ./item.py
test_item_id
<storage.Item object at 0x2b15910>

I want to be able to redirect output of some process into my script. But
this doesn't work:
$ echo test_item_id | ./item.py

It doesn't produce any output.

But if i replace `self.transport.write(str(item) + '\n')` with just
`print str(item)` it suddenly works:
$ echo test_item_id | ./item.py
<storage.Item object at 0x18ac650>

So my conclusions are:
1. When I write to stdin of my script from keyboard then
`self.transport.write()` works as expected.
2. When I use pipes or redirection to my script `self.transport.write()`
doesn't produce any output.
3. If I replace self.transport.write() with print statements it works.

Why is this strange behavior?

-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120809/fbdd83fc/attachment.html>

From andrew at bemusement.org  Thu Aug  9 20:39:08 2012
From: andrew at bemusement.org (Andrew Bennetts)
Date: Fri, 10 Aug 2012 12:39:08 +1000
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
Message-ID: <20120810023907.GC11315@fuchsia.puzzling.org>

Maxim Lacrima wrote:
[…]
> So my conclusions are:
> 1. When I write to stdin of my script from keyboard then
> `self.transport.write()` works as expected.
> 2. When I use pipes or redirection to my script `self.transport.write()`
> doesn't produce any output.
> 3. If I replace self.transport.write() with print statements it works.

Buffering, perhaps?

As a quick test, try adjusting your callback to loseConnection on the transport
after to the write, that should flush the buffers.  If buffering turns out to
be your problem, and you really do expect your pipes to be at most
line-buffered, you'll need to arrange for the buffering on the stdin and stdout
file descriptors to be changed.  I don't think Twisted has that builtin, so you
may need to do that before creating the StandardIO object using the regular
Python APIs.

-Andrew.





From glyph at twistedmatrix.com  Thu Aug  9 23:18:13 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 9 Aug 2012 22:18:13 -0700
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <20120810023907.GC11315@fuchsia.puzzling.org>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
Message-ID: <73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>


On Aug 9, 2012, at 7:39 PM, Andrew Bennetts <andrew at bemusement.org> wrote:

> Maxim Lacrima wrote:
> […]
>> So my conclusions are:
>> 1. When I write to stdin of my script from keyboard then
>> `self.transport.write()` works as expected.
>> 2. When I use pipes or redirection to my script `self.transport.write()`
>> doesn't produce any output.
>> 3. If I replace self.transport.write() with print statements it works.
> 
> Buffering, perhaps?
> 
> As a quick test, try adjusting your callback to loseConnection on the transport
> after to the write, that should flush the buffers.  If buffering turns out to
> be your problem, and you really do expect your pipes to be at most
> line-buffered, you'll need to arrange for the buffering on the stdin and stdout
> file descriptors to be changed.  I don't think Twisted has that builtin, so you
> may need to do that before creating the StandardIO object using the regular
> Python APIs.

It's not this kind of buffering problem.  I was actually able to reproduce it by replacing "Item.get()" with a deferLater.  (In the future, please perform these types of replacements yourself before posting your examples; it's much easier to help out with complete, runnable programs.)

The issue is that twisted.internet.stdio considers your protocol to only know about one kind of connection loss: i.e. that your entire transport has gone away.  So, when the input is closed, the output file descriptor is immediately closed as well.

Unfortunately - and I think this is a bug in Twisted - the input connection being lost causes the output connection to be immediately and somewhat aggressively closed.  The difference between "echo" and typing interactively is that you send "test_item_id\n", but echo sends "test_item_id\n" *EOF*.

Luckily you can work around this, by explicitly asking Twisted for notifications about half of the connection being closed.  You do this by implementing IHalfCloseableProtocol.

Although Twisted should be better about how it handles shutting down stdout, this nuance does reveal some logic that your code is missing: once your input is done, you don't have any concept of waiting for your output to be done before shutting everything down.  So, if you add both the IHalfCloseableProtocol implements declaration to receive the relevant notifications, and some logic to keep track of when all the output has been written, you can get exactly the behavior that I assume you want.

I've attached an example that does all of these things with a simple timer, since this is something that Twisted probably needs to document a bit better.



Cheers,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120809/72a869f3/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: check.py
Type: text/x-python-script
Size: 1196 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20120809/72a869f3/attachment-0002.bin>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120809/72a869f3/attachment-0002.html>

From warner at lothar.com  Fri Aug 10 12:02:52 2012
From: warner at lothar.com (Brian Warner)
Date: Fri, 10 Aug 2012 11:02:52 -0700
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
Message-ID: <50254CCC.4000907@lothar.com>

On 8/9/12 10:18 PM, Glyph wrote:
> 
> The issue is that twisted.internet.stdio considers your protocol to
> only know about one kind of connection loss: i.e. that your entire
> transport has gone away. So, when the input is closed, the output file
> descriptor is immediately closed as well.
> 
> Unfortunately - and I think this is a bug in Twisted - the input
> connection being lost causes the output connection to be immediately
> and somewhat aggressively closed. The difference between "echo" and
> typing interactively is that you send "test_item_id\n", but echo sends
> "test_item_id\n" *EOF*.

Incidentally, I think this was the problem I ran into in Foolscap,
trying to build a tool that lets you run individual shell commands
remotely. I was able to stretch the three file descriptors (stdin,
stdout, stderr) over the wire using a callRemote() for each invocation
of dataReceived(), but had similar issues when closing one side of the
connection. The easiest way to trigger this was to run /usr/bin/sort,
which necessarily waits until the input has been closed before it will
produce any output. So you run "cat data.txt | flappclient run-command",
flappclient reads from StandardIO, sends the data to the far end,
notices the EOF on stdin when the data is finished, sends a "stdin is
closed" message to the remote side, receives the return data from sort,
then tries to write it to the local stdout (which sometimes failed).

I think I saw problems in the opposite situation too: if stdout were
closed (because our caller didn't want to hear anything further from
us), the stdin would no longer accept data. I don't remember how I
triggered this situation.

My workaround is here, in case you find it useful:

 https://github.com/warner/foolscap/blob/master/foolscap/appserver/client.py#L64

It worked for me at the time. (since then I've seen some trouble when
running git-receive-pack over this connection, which may or may not be
related, so I won't claim it's foolproof).

cheers,
 -Brian



From glyph at twistedmatrix.com  Fri Aug 10 15:49:09 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 10 Aug 2012 14:49:09 -0700
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <50254CCC.4000907@lothar.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
	<50254CCC.4000907@lothar.com>
Message-ID: <5A8DFA94-A6D8-4B28-8C19-CEFD2689F0D8@twistedmatrix.com>


On Aug 10, 2012, at 11:02 AM, Brian Warner <warner at lothar.com> wrote:

> My workaround is here, in case you find it useful:
> 
> https://github.com/warner/foolscap/blob/master/foolscap/appserver/client.py#L64
> 
> It worked for me at the time. (since then I've seen some trouble when
> running git-receive-pack over this connection, which may or may not be
> related, so I won't claim it's foolproof).

Are you saying that you had issues even with implementing IHalfCloseableProtocol and overriding readConnectionLost?  Doing that now seems to work fine for me.  Perhaps there was a different issue that has since been fixed?  I can't find one, though...

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120810/3694ea09/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Aug 11 22:05:29 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 12 Aug 2012 04:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1344744329.63.1788733757@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120812/de7ad21a/attachment-0001.html>

From lacrima.maxim at gmail.com  Mon Aug 13 06:18:32 2012
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Mon, 13 Aug 2012 15:18:32 +0300
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
Message-ID: <CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>

Hi everyone!

Thanks for the help! I used an attached example and after implementing
IHalfCloseableProtocol it works! Thanks a lot!

Still, Twisted seems hard to me, probably because I don't quite understand
how to use and combine Twisted's interfaces.
With your help I can now connect my program to another process using pipe.
But, for example, I want to be able to supply data to my program not only
via stdin, but also as command line arguments. I.e. instead of
$ echo foo | ./item.py

I want to do:
$ ./item.py foo

My feeling here is that I can reuse the same protocol (EchoItemProtocol)
here, but now instead of StandardIO I need my own factory (or transport, or
whatever it is named) class that knows how to read command line args and
talk the same protocol. Sure I can read arguments using sys.argv[1:], but
what do I do next to properly pass that data to the protocol? Does my class
have to implement ITransport or IProducer etc. to talk EchoItemProtocol
similar to StandardIO?
I hope my question is clear.

Thanks in advance.

On 10 August 2012 08:18, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Aug 9, 2012, at 7:39 PM, Andrew Bennetts <andrew at bemusement.org> wrote:
>
> Maxim Lacrima wrote:
> […]
>
> So my conclusions are:
> 1. When I write to stdin of my script from keyboard then
> `self.transport.write()` works as expected.
> 2. When I use pipes or redirection to my script `self.transport.write()`
> doesn't produce any output.
> 3. If I replace self.transport.write() with print statements it works.
>
>
> Buffering, perhaps?
>
> As a quick test, try adjusting your callback to loseConnection on the
> transport
> after to the write, that should flush the buffers.  If buffering turns out
> to
> be your problem, and you really do expect your pipes to be at most
> line-buffered, you'll need to arrange for the buffering on the stdin and
> stdout
> file descriptors to be changed.  I don't think Twisted has that builtin,
> so you
> may need to do that before creating the StandardIO object using the regular
> Python APIs.
>
>
> It's not this kind of buffering problem.  I was actually able to reproduce
> it by replacing "Item.get()" with a deferLater.  (In the future, please
> perform these types of replacements yourself before posting your examples;
> it's much easier to help out with complete, runnable programs.)
>
> The issue is that twisted.internet.stdio considers your protocol to only
> know about one kind of connection loss: i.e. that your entire transport has
> gone away.  So, when the input is closed, the output file descriptor is
> immediately closed as well.
>
> Unfortunately - and I think this is a bug in Twisted - the input
> connection being lost causes the output connection to be immediately and
> somewhat aggressively closed.  The difference between "echo" and typing
> interactively is that you send "test_item_id\n", but echo sends
> "test_item_id\n" *EOF*.
>
> Luckily you can work around this, by explicitly asking Twisted for
> notifications about half of the connection being closed.  You do this by
> implementing IHalfCloseableProtocol.
>
> Although Twisted should be better about how it handles shutting down
> stdout, this nuance *does* reveal some logic that your code is missing:
> once your input is done, you don't have any concept of waiting for your *output
> *to be done before shutting everything down.  So, if you add both the
> IHalfCloseableProtocol implements declaration to receive the relevant
> notifications, and some logic to keep track of when all the output has been
> written, you can get exactly the behavior that I assume you want.
>
> I've attached an example that does all of these things with a simple
> timer, since this is something that Twisted probably needs to document a
> bit better.
>
>
>
> Cheers,
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120813/2beda1d2/attachment-0001.html>

From drew.smathers at gmail.com  Mon Aug 13 19:09:28 2012
From: drew.smathers at gmail.com (Drew Smathers)
Date: Mon, 13 Aug 2012 21:09:28 -0400
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
	<CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>
Message-ID: <CAEOQ8ptVPS7991z3Du6QmESYjWRBkJCSh48BK_NHhHCqMezfLQ@mail.gmail.com>

On Mon, Aug 13, 2012 at 8:18 AM, Maxim Lacrima <lacrima.maxim at gmail.com> wrote:
> Hi everyone!
>
> Thanks for the help! I used an attached example and after implementing
> IHalfCloseableProtocol it works! Thanks a lot!
>

Hi Maxim,

Sorry I do not have an immediate answer to your question but just
wanted to let you that I don't see the file attachment mentioned
above. You might have forgotten this.

-Drew



From lacrima.maxim at gmail.com  Tue Aug 14 01:51:31 2012
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Tue, 14 Aug 2012 10:51:31 +0300
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <CAEOQ8ptVPS7991z3Du6QmESYjWRBkJCSh48BK_NHhHCqMezfLQ@mail.gmail.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
	<CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>
	<CAEOQ8ptVPS7991z3Du6QmESYjWRBkJCSh48BK_NHhHCqMezfLQ@mail.gmail.com>
Message-ID: <CAKef57NC55u=gV3wnmRUJZ0N2doRRnvNT3T7VHdK=47_vBuUcA@mail.gmail.com>

Hi Drew,

I was referring to the example attached by Glyph. His example helped me to
properly handle stdin in my code. In addition to stdin I want to handle
command line arguments, so I want to be able to do this:
$ echo foo | ./check.py
and this:
$ ./check.py foo

I think `main` function should look something like this:

def main():
    if sys.stdin.isatty():
        # we are connected to terminal
        args = sys.argv[1:]
        # ....
        # What should I implement to be able to speak EchoItemProtocol???
        # ....
    else:
        # we are connected to stdin
        stdio.StandardIO(EchoItemProtocol())
    reactor.run()

I am new to Twisted, so I don't know a proper term for a class I need to
implement (is it a factory, a transport, an endpoint etc.???) to be able to
speak EchoItemProtocol?
Is this a valid approach at all?

In case you can't find previously attached example, I have attached it
again.


On 14 August 2012 04:09, Drew Smathers <drew.smathers at gmail.com> wrote:

> On Mon, Aug 13, 2012 at 8:18 AM, Maxim Lacrima <lacrima.maxim at gmail.com>
> wrote:
> > Hi everyone!
> >
> > Thanks for the help! I used an attached example and after implementing
> > IHalfCloseableProtocol it works! Thanks a lot!
> >
>
> Hi Maxim,
>
> Sorry I do not have an immediate answer to your question but just
> wanted to let you that I don't see the file attachment mentioned
> above. You might have forgotten this.
>
> -Drew
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120814/6be8bb61/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: check.py
Type: application/octet-stream
Size: 1234 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20120814/6be8bb61/attachment-0002.obj>

From exarkun at twistedmatrix.com  Tue Aug 14 04:40:17 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 14 Aug 2012 10:40:17 -0000
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <CAKef57NC55u=gV3wnmRUJZ0N2doRRnvNT3T7VHdK=47_vBuUcA@mail.gmail.com>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
	<CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>
	<CAEOQ8ptVPS7991z3Du6QmESYjWRBkJCSh48BK_NHhHCqMezfLQ@mail.gmail.com>
	<CAKef57NC55u=gV3wnmRUJZ0N2doRRnvNT3T7VHdK=47_vBuUcA@mail.gmail.com>
Message-ID: <20120814104017.26009.1537162256.divmod.xquotient.39@localhost6.localdomain6>

On 07:51 am, lacrima.maxim at gmail.com wrote:
>Hi Drew,
>
>I was referring to the example attached by Glyph. His example helped me 
>to
>properly handle stdin in my code. In addition to stdin I want to handle
>command line arguments, so I want to be able to do this:
>$ echo foo | ./check.py
>and this:
>$ ./check.py foo

Command line arguments aren't really anything like standard input. 
Command line arguments are available immediately, synchronously, in 
their entirety.  They are tokenized into a list of strings, and there 
are limits imposed on what bytes can appear in those strings.

Standard input can only be read a little at a time, perhaps throughout 
the duration of the entire process, and attempting to do so may involve 
blocking or dealing with complicated, platform-specific non-blocking 
APIs.  Standard input can contain any bytes and arrives as a stream, not 
as a reliably tokenized list of strings.

Twisted includes no support for treating stdin and command line 
arguments in a similar fashion.

After you look up the command line arguments from sys.argv, just use the 
values.  There would seem to be little point in trying to shove them 
through a protocol object.

Jean-Paul



From rramirez at rootedcon.es  Tue Aug 14 08:51:46 2012
From: rramirez at rootedcon.es (=?ISO-8859-1?Q?Rom=E1n_Ram=EDrez?=)
Date: Tue, 14 Aug 2012 16:51:46 +0200
Subject: [Twisted-Python] About CONNECT method and Proxy HTTPS
Message-ID: <CALuJt5VR6OM7OWcNLgMN=weHNqZf+s_mSBTKQmpc7-sbjvgSzA@mail.gmail.com>

Hello all,

This is my first email in this list so thanks everyone in advance and Hello :)

I have a quick question about the Proxy class and the CONNECT method
(for tunneling SSL). I've already solved the certificate issues as I
use a fixed *.testdomain.com certificare for my service.

What I cannot manage to solve is how to manage the real request after
setting up the tunnel. Let me explain, whenever a browser wants to
tunnel through a Proxy it will take these steps:

1. Send a CONNECT host:443 HTTP/1.1
2. The proxy will connect to the remote (real) https server and if
everything is right, send an OK to the client,
3. If the Proxy sends a 200 (Ok) continue through TLS and send the
real request (GET /directory HTTP/1.0 and Host: test.testdomain.com)

My problem here is when working on the Request to check if the method
is CONNECT (Request.process), when I do the startTLS (and make the
transport SSL aware) I cannot find a way to read the next lines with
the REAL request (the GET /directory HTTP/1.0). As I see how to write
into the Request.process (self.transport.write) I don't see any way to
read after the startTLS. I've tried with the self.content.seek(0,0)
and self.content.read() but always getting "None".

Is there a way to read the next lines from the client after the
startTLS inside Request.process? I've reading about everything related
to Proxy, CONNECT and mitm for a week but cannot find anything working
for me...

Thanks a lot in advance for your help and your patience :)



From jspencer at connectedsp.com  Tue Aug 14 11:21:11 2012
From: jspencer at connectedsp.com (John Spencer)
Date: Tue, 14 Aug 2012 11:21:11 -0600
Subject: [Twisted-Python] JOB OPENING Python, Twisted, Javascript
Message-ID: <AAAA837E1547054093EEC541433EE19E17D2E7FBA7@PO1MBX01.po1.comcast.net>

We have a client here in MA looking for a Sr or Prin level consultant with a strong background in Python and Javascript. Experience with Twisted is a plus as is any Dojo experience.

Work must be done on site and must be able to interview in person as well.

Please call or email me with any questions or send me a Word version of your resume for consideration. You resume will never be sent anywhere without your prior approval.


Regards,
John Spencer

Connected Systems Partners
Connecting Top Talent with Top Companies

978-455-5550 x208
978-621-9743 cell
jspencer at connectedsp.com

www.connectedsp.com<www.connectedsp.com%20>

GET CONNECTED!

Unless otherwise explicitly instructed by sender, all information in this email is considered confidential and intended for the view and use of the recipient(s) only.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120814/1172440e/attachment-0001.html>

From lacrima.maxim at gmail.com  Wed Aug 15 02:28:37 2012
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Wed, 15 Aug 2012 11:28:37 +0300
Subject: [Twisted-Python] Using StandardIO and pipes.
In-Reply-To: <20120814104017.26009.1537162256.divmod.xquotient.39@localhost6.localdomain6>
References: <CAKef57MzAGdZz-QQCgV0U+MzgqJXs3JLtvm+r0owt0naFbPgwA@mail.gmail.com>
	<20120810023907.GC11315@fuchsia.puzzling.org>
	<73840D0F-16BB-41E3-A452-E033F3C333A1@twistedmatrix.com>
	<CAKef57MOLWzBWnGZuM0Sd2WTDJ7QcG5_p0CBbYsF3BR1apUvTA@mail.gmail.com>
	<CAEOQ8ptVPS7991z3Du6QmESYjWRBkJCSh48BK_NHhHCqMezfLQ@mail.gmail.com>
	<CAKef57NC55u=gV3wnmRUJZ0N2doRRnvNT3T7VHdK=47_vBuUcA@mail.gmail.com>
	<20120814104017.26009.1537162256.divmod.xquotient.39@localhost6.localdomain6>
Message-ID: <CAKef57Mt=MAOey8H3fLOWJWMNW-ZQx13+TVorreaWSPNan043w@mail.gmail.com>

Hi Jean-Paul!

Thank you very much for explanation!

On 14 August 2012 13:40, <exarkun at twistedmatrix.com> wrote:

> On 07:51 am, lacrima.maxim at gmail.com wrote:
> >Hi Drew,
> >
> >I was referring to the example attached by Glyph. His example helped me
> >to
> >properly handle stdin in my code. In addition to stdin I want to handle
> >command line arguments, so I want to be able to do this:
> >$ echo foo | ./check.py
> >and this:
> >$ ./check.py foo
>
> Command line arguments aren't really anything like standard input.
> Command line arguments are available immediately, synchronously, in
> their entirety.  They are tokenized into a list of strings, and there
> are limits imposed on what bytes can appear in those strings.
>
> Standard input can only be read a little at a time, perhaps throughout
> the duration of the entire process, and attempting to do so may involve
> blocking or dealing with complicated, platform-specific non-blocking
> APIs.  Standard input can contain any bytes and arrives as a stream, not
> as a reliably tokenized list of strings.
>
> Twisted includes no support for treating stdin and command line
> arguments in a similar fashion.
>
> After you look up the command line arguments from sys.argv, just use the
> values.  There would seem to be little point in trying to shove them
> through a protocol object.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
with regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120815/2172b596/attachment.html>

From xor at idlecore.com  Thu Aug 16 13:42:05 2012
From: xor at idlecore.com (Idlecore)
Date: Thu, 16 Aug 2012 20:42:05 +0100
Subject: [Twisted-Python] How to deal with deferreds across several layers
	of namespaces?
Message-ID: <CAMNtfvELQd=hKfEJKEi9uxFamApDjQj4ewee310JXXsb+VnxeA@mail.gmail.com>

I have a protocol that calls code that spans several namespaces. At
any of these namespaces there might be a deferred waiting to be
called. The protocol can be disconnected at any time and I currently
don't have a clean way to cancel all the potential deferreds from
within the protocol.
Will the protocol stick around long enough after disconnection for the
deferreds to eventually be called?
Should I create a central deferred list, at the cost of having to
access it through several layers of namespaces on other parts of my
project?
Is there a simple way of doing this?

Regards,
Pedro Azevedo



From itamar at futurefoundries.com  Fri Aug 17 18:12:25 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 17 Aug 2012 20:12:25 -0400
Subject: [Twisted-Python] How to deal with deferreds across several
 layers of namespaces?
In-Reply-To: <CAMNtfvELQd=hKfEJKEi9uxFamApDjQj4ewee310JXXsb+VnxeA@mail.gmail.com>
References: <CAMNtfvELQd=hKfEJKEi9uxFamApDjQj4ewee310JXXsb+VnxeA@mail.gmail.com>
Message-ID: <CAOp9P3rf68LtVb+5Hi2MDsNQkyTWY5Q5M8N2f08fpRjGBdu5Hw@mail.gmail.com>

On Thu, Aug 16, 2012 at 3:42 PM, Idlecore <xor at idlecore.com> wrote:

> I have a protocol that calls code that spans several namespaces. At
> any of these namespaces there might be a deferred waiting to be
> called. The protocol can be disconnected at any time and I currently
> don't have a clean way to cancel all the potential deferreds from
> within the protocol.
>

What do you mean by "namespaces"? If the Protocol called some code that
returned a Deferred, the Protocol will then have a reference to it. If a
callback function on that Deferred returns a Deferred, cancelling the
original one will also cancel the chained Deferred if necessary (though
you'll need to have a cancellation function for each, of course).


> Will the protocol stick around long enough after disconnection for the
> deferreds to eventually be called?
>

The Protocol will have its connectionLost() method called when it
disconnects; this is where you'd typically cancel any pending operations.
If some other object has a reference to it, it will not be garbage
collected until that reference is gone, as with any Python object. The
pending operations will, however, continue (possibly wasting resources)
unless you cancel them in response to the connectionLost() call.

Can you give a tiny code example, perhaps, demonstrating the kind of
Deferred management problem you're having?

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120817/14a9360b/attachment-0001.html>

From _ at lvh.cc  Sat Aug 18 05:35:49 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sat, 18 Aug 2012 13:35:49 +0200
Subject: [Twisted-Python] Running and supervising twistd daemons
Message-ID: <10BF6F30-6B02-4B97-8995-4DA695DEDCFD@lvh.cc>

Hi,

What's the nicest way to run and supervise a twistd daemon?

I hear good things about systemd, but I can't figure out if it's PR or actual awesome new tech. It's not impossible to get on Debian, but certainly not the default (and IIUC not even in stable yet). While I understand how it's great for desktops, I'm trying to run a server. I don't really see how faster boot-up or socket-based activation really helps me there, certainly not up to the point where it warrants the apparent extra complexity.

I'm perfectly happy just throwing supervisord or daemontools at it, but I'm just trying to see if there's better tools that I've missed.

cheers
lvh






From itamar at futurefoundries.com  Sat Aug 18 06:59:35 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sat, 18 Aug 2012 08:59:35 -0400
Subject: [Twisted-Python] To those who are about to sprint
Message-ID: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>

Last sprint the buildbot got overwhelmed with a giant backlog of runs and
became essentially useless for the duration of the sprint. Jean-Paul had
two suggestions:

   1. Don't commit to trunk during the sprint, even if your branch was
   approved; wait until the sprint is over so trunk commits are spread out.
   2. If you're just doing some initial cross-platform testing using
   force-builds.py, use the command line option that lets you run only some of
   the tests (e.g. "twisted.web" or "twisted.python.test.test_versions")
   instead of running the whole test suite.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120818/4f0d94c2/attachment.html>

From tobias.oberstein at tavendo.de  Sat Aug 18 07:13:57 2012
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sat, 18 Aug 2012 06:13:57 -0700
Subject: [Twisted-Python] Running and supervising twistd daemons
In-Reply-To: <10BF6F30-6B02-4B97-8995-4DA695DEDCFD@lvh.cc>
References: <10BF6F30-6B02-4B97-8995-4DA695DEDCFD@lvh.cc>
Message-ID: <634914A010D0B943A035D226786325D4337AB5A50F@EXVMBX020-12.exch020.serverdata.net>

> I'm perfectly happy just throwing supervisord or daemontools at it, but I'm just
> trying to see if there's better tools that I've missed.

We use daemontools and are perfectly happy: it's no frills, runs everywhere and is rock solid.

It's been there for so many years and survived I can't count how many "shiny new, lets redo rc.d scripts" attempts.



From ashwini.oruganti at gmail.com  Sat Aug 18 09:44:50 2012
From: ashwini.oruganti at gmail.com (Ashwini Oruganti)
Date: Sat, 18 Aug 2012 21:14:50 +0530
Subject: [Twisted-Python] Twisted 12.2.0pre1 is here!
Message-ID: <CAMFCZ-3DNW3ep87350fTG1BFun+6T52_=DWnpC9jUCoUrP05oQ@mail.gmail.com>

The pre-release for the upcoming Twisted 12.2 is now available!

You can download the tarballs here:

    http://twistedmatrix.com/~ashfall/12.2.0pre1/

Highlights for this release include:

  * To be able to work on Python3 support, Python 2.5 is no longer
supported.

  * twisted.mail.imap4 now serves BODYSTRUCTURE responses which provide
more information and conform to the IMAP4 RFC more closely.

  * twisted.conch now supports commercial SSH implementations which don't
comply with the IETF standard.

  * twisted.internet.endpoints now provides several new endpoints,
including a TCP client endpoint that resolves hostnames to IPv6 host
addresses.

  * IReactorSocket.adoptStreamConnection, implemented by some reactors,
allows adding an existing established connection to the reactor.

For the complete list, see the NEWS file.

Note that starting with the next release after 12.2, Twisted will begin
requiring zope.interface 3.6 (as part of Python3 support).

Please download the tarballs and test them rigorously, so we can have a
great release!


Thanks!

--
Ashwini Oruganti (ashfall)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120818/7f41f5e1/attachment.html>

From glyph at twistedmatrix.com  Sat Aug 18 21:48:21 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 18 Aug 2012 20:48:21 -0700
Subject: [Twisted-Python] To those who are about to sprint
In-Reply-To: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>
References: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>
Message-ID: <A09A72CB-AE04-49D6-81FC-23139DF6E1ED@twistedmatrix.com>

On Aug 18, 2012, at 5:59 AM, Itamar Turner-Trauring <itamar at futurefoundries.com> wrote:

> Last sprint the buildbot got overwhelmed with a giant backlog of runs and became essentially useless for the duration of the sprint. Jean-Paul had two suggestions:
> Don't commit to trunk during the sprint, even if your branch was approved; wait until the sprint is over so trunk commits are spread out.
> If you're just doing some initial cross-platform testing using force-builds.py, use the command line option that lets you run only some of the tests (e.g. "twisted.web" or "twisted.python.test.test_versions") instead of running the whole test suite.

In an attempt to mitigate this problem, since pre-commit testing is a (the?) major bottleneck that we have at sprints, I will be bringing a nice fast machine with virtual machines for at least one flavor of each of our major supported platforms (OS X, Linux, Windows, FreeBSD).  I still need to install some dependencies, but hopefully I can do some whole-suite pre-commit verification for other reviewers who are there.

Hopefully the keyboard won't get too hot for me to type on :-).

For the next sprint, our BuildBot maintainer has assured me that he'll be moving the build master infrastructure to a faster machine before then, so that hopefully it will cope better with the increased load of a sprint.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120818/1366c470/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Aug 18 22:05:40 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 19 Aug 2012 04:05:40 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1345349140.45.492978911@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120819/23342dee/attachment.html>

From glyph at twistedmatrix.com  Sat Aug 18 22:14:45 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 18 Aug 2012 21:14:45 -0700
Subject: [Twisted-Python] Twisted 12.2.0pre1 is here!
In-Reply-To: <CAMFCZ-3DNW3ep87350fTG1BFun+6T52_=DWnpC9jUCoUrP05oQ@mail.gmail.com>
References: <CAMFCZ-3DNW3ep87350fTG1BFun+6T52_=DWnpC9jUCoUrP05oQ@mail.gmail.com>
Message-ID: <A8FD3358-57F0-4745-8AF0-97E849021528@twistedmatrix.com>


On Aug 18, 2012, at 8:44 AM, Ashwini Oruganti <ashwini.oruganti at gmail.com> wrote:

> The pre-release for the upcoming Twisted 12.2 is now available!

Thanks for doing the release, Ashwini!  Great to see it underway!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120818/552fe67b/attachment.html>

From matt at conundrum.com  Sun Aug 19 14:35:46 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Sun, 19 Aug 2012 16:35:46 -0400
Subject: [Twisted-Python] twisted.cred documentation bug?
Message-ID: <0DE2322C-30AB-44A7-9CCE-951BAC6786D2@conundrum.com>


I've been reading the cred docs, and think I may have spotted a typo.  Near the end of <http://twistedmatrix.com/documents/current/core/howto/cred.html>, in the code sample describing creating a cred plugin's factory, there is this method:

    # This will be called once per command-line.
    def generateChecker(self, argstring=""):
        argdict = dict((x.split('=') for x in argstring.split(':')))
        return SpecialChecker(**dict)

I think that return should actually be for **argdict, yes?







From glyph at twistedmatrix.com  Sun Aug 19 15:28:02 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 19 Aug 2012 14:28:02 -0700
Subject: [Twisted-Python] twisted.cred documentation bug?
In-Reply-To: <0DE2322C-30AB-44A7-9CCE-951BAC6786D2@conundrum.com>
References: <0DE2322C-30AB-44A7-9CCE-951BAC6786D2@conundrum.com>
Message-ID: <3E9C1A14-3D7F-4E70-8B0D-983F3D857E9A@twistedmatrix.com>


On Aug 19, 2012, at 1:35 PM, Matthew Pounsett <matt at conundrum.com> wrote:

> 
> I've been reading the cred docs, and think I may have spotted a typo.  Near the end of <http://twistedmatrix.com/documents/current/core/howto/cred.html>, in the code sample describing creating a cred plugin's factory, there is this method:
> 
>   # This will be called once per command-line.
>   def generateChecker(self, argstring=""):
>       argdict = dict((x.split('=') for x in argstring.split(':')))
>       return SpecialChecker(**dict)
> 
> I think that return should actually be for **argdict, yes?

Quite so.  Want to file a ticket?

-g


From exarkun at twistedmatrix.com  Sun Aug 19 16:49:08 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 19 Aug 2012 22:49:08 -0000
Subject: [Twisted-Python] To those who are about to sprint
In-Reply-To: <A09A72CB-AE04-49D6-81FC-23139DF6E1ED@twistedmatrix.com>
References: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>
	<A09A72CB-AE04-49D6-81FC-23139DF6E1ED@twistedmatrix.com>
Message-ID: <20120819224908.28197.2056266822.divmod.xquotient.1@localhost6.localdomain6>

On 03:48 am, glyph at twistedmatrix.com wrote:
>
>For the next sprint, our BuildBot maintainer has assured me that he'll 
>be moving the build master infrastructure to a faster machine before 
>then, so that hopefully it will cope better with the increased load of 
>a sprint.

Slave capacity really needs to be increased as well to handle sprint 
load.

Jean-Paul



From glyph at twistedmatrix.com  Sun Aug 19 18:05:42 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 19 Aug 2012 17:05:42 -0700
Subject: [Twisted-Python] To those who are about to sprint
In-Reply-To: <20120819224908.28197.2056266822.divmod.xquotient.1@localhost6.localdomain6>
References: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>
	<A09A72CB-AE04-49D6-81FC-23139DF6E1ED@twistedmatrix.com>
	<20120819224908.28197.2056266822.divmod.xquotient.1@localhost6.localdomain6>
Message-ID: <211D9A58-A3A9-456E-A148-2B17CEBCB41F@twistedmatrix.com>


On Aug 19, 2012, at 3:49 PM, exarkun at twistedmatrix.com wrote:

> On 03:48 am, glyph at twistedmatrix.com wrote:
>> 
>> For the next sprint, our BuildBot maintainer has assured me that he'll 
>> be moving the build master infrastructure to a faster machine before 
>> then, so that hopefully it will cope better with the increased load of 
>> a sprint.
> 
> Slave capacity really needs to be increased as well to handle sprint 
> load.

The major problem with buildbot overload at sprints is the fact that the website becomes so unresponsive that unrelated activity can't take place, e.g. in the bugtracker, for long periods of time.

Correct me if I'm wrong, but if the buildmaster and website are separated, won't that address that problem?

Also, won't the buildmaster evenly work through the backlog of submitted builds, finishing one every few minutes?  Or does some parallel stuff happen that makes subsequent builds progressively worse?

-glyph


From exarkun at twistedmatrix.com  Sun Aug 19 18:28:24 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 20 Aug 2012 00:28:24 -0000
Subject: [Twisted-Python] To those who are about to sprint
In-Reply-To: <211D9A58-A3A9-456E-A148-2B17CEBCB41F@twistedmatrix.com>
References: <CAOp9P3qB9xhY3wZaxcZtkfFJYRMnMeSo=g7JeqsyN7UT0CDg-A@mail.gmail.com>
	<A09A72CB-AE04-49D6-81FC-23139DF6E1ED@twistedmatrix.com>
	<20120819224908.28197.2056266822.divmod.xquotient.1@localhost6.localdomain6>
	<211D9A58-A3A9-456E-A148-2B17CEBCB41F@twistedmatrix.com>
Message-ID: <20120820002824.28197.25146564.divmod.xquotient.15@localhost6.localdomain6>

On 12:05 am, glyph at twistedmatrix.com wrote:
>
>On Aug 19, 2012, at 3:49 PM, exarkun at twistedmatrix.com wrote:
>>On 03:48 am, glyph at twistedmatrix.com wrote:
>>>
>>>For the next sprint, our BuildBot maintainer has assured me that 
>>>he'll
>>>be moving the build master infrastructure to a faster machine before
>>>then, so that hopefully it will cope better with the increased load 
>>>of
>>>a sprint.
>>
>>Slave capacity really needs to be increased as well to handle sprint
>>load.
>
>The major problem with buildbot overload at sprints is the fact that 
>the website becomes so unresponsive that unrelated activity can't take 
>place, e.g. in the bugtracker, for long periods of time.
>
>Correct me if I'm wrong, but if the buildmaster and website are 
>separated, won't that address that problem?

This is entirely possible, I'm not sure.  It may also be the case that 
trac by itself generates sufficient load at sprints to become unusable. 
We'll find out soon, I guess.
>Also, won't the buildmaster evenly work through the backlog of 
>submitted builds, finishing one every few minutes?  Or does some 
>parallel stuff happen that makes subsequent builds progressively worse?

Generally not.  Instead, the buildmaster will corrupt its local state, 
wedge itself into non-responsiveness, or enter an infinite loop. 
Additionally, it will direct one or more slaves to disconnect, crash, or 
at least corrupt (slave local) kernel state such that a sysadmin needs 
to restart the machine.

Jean-Paul



From p.mayers at imperial.ac.uk  Mon Aug 20 05:52:04 2012
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 20 Aug 2012 12:52:04 +0100
Subject: [Twisted-Python] transport.getPeerCertificate in connectionMade
Message-ID: <503224E4.1030508@imperial.ac.uk>

All,

It's been my observation that this code:

class MyProto(protocol.Protocol):

   def connectionMade(self):
     print self.transport.getPeerCertificate()
     self.transport.loseConnection()

class MyFactory(protocol.ClientFactory):

   def buildProtocol(self, addr):
     return MyProto()

def main():
   factory = MyFactory()
   ctxfact = ssl.ClientContextFactory()
   reactor.connectSSL(host, port, factory, ctxfact)
   reactor.run()

...will print "None". It seems that connectSSL calls connectionMade at 
TCP connection time, not when SSL has completed. This seems unintuitive 
to me because I've called "connectSSL" not "connectTCP", but I guess may 
be hard to fix given the way the code works?

At the very least, should this be documented?

Or could we have an interface e.g.

class ISSLProtocol(interface):
   def sslReady():
     """called when the SSL layer is ready"""

...and people who are interested can "implements()" it to get the callback?



From glyph at twistedmatrix.com  Mon Aug 20 11:50:56 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 20 Aug 2012 10:50:56 -0700
Subject: [Twisted-Python] transport.getPeerCertificate in connectionMade
In-Reply-To: <503224E4.1030508@imperial.ac.uk>
References: <503224E4.1030508@imperial.ac.uk>
Message-ID: <EC7E85B3-631A-4FD5-84B1-F24B670F1113@twistedmatrix.com>


On Aug 20, 2012, at 4:52 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> All,
> 
> It's been my observation that this code:
> 
> class MyProto(protocol.Protocol):
> 
>   def connectionMade(self):
>     print self.transport.getPeerCertificate()
>     self.transport.loseConnection()
> 
> class MyFactory(protocol.ClientFactory):
> 
>   def buildProtocol(self, addr):
>     return MyProto()
> 
> def main():
>   factory = MyFactory()
>   ctxfact = ssl.ClientContextFactory()
>   reactor.connectSSL(host, port, factory, ctxfact)
>   reactor.run()
> 
> ...will print "None". It seems that connectSSL calls connectionMade at 
> TCP connection time, not when SSL has completed. This seems unintuitive 
> to me because I've called "connectSSL" not "connectTCP", but I guess may 
> be hard to fix given the way the code works?
> 
> At the very least, should this be documented?
> 
> Or could we have an interface e.g.
> 
> class ISSLProtocol(interface):
>   def sslReady():
>     """called when the SSL layer is ready"""
> 
> ...and people who are interested can "implements()" it to get the callback?


Yup, it's a bug, reported 3 years ago:

	<http://twistedmatrix.com/trac/ticket/3687>

It's definitely a problem.  Perhaps worse is the fact that startTLS() doesn't directly give you that notification either.  Please feel free to contribute a fix :).

-glyph


From p.mayers at imperial.ac.uk  Tue Aug 21 07:20:43 2012
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 21 Aug 2012 14:20:43 +0100
Subject: [Twisted-Python] transport.getPeerCertificate in connectionMade
In-Reply-To: <EC7E85B3-631A-4FD5-84B1-F24B670F1113@twistedmatrix.com>
References: <503224E4.1030508@imperial.ac.uk>
	<EC7E85B3-631A-4FD5-84B1-F24B670F1113@twistedmatrix.com>
Message-ID: <50338B2B.9070700@imperial.ac.uk>

On 20/08/12 18:50, Glyph wrote:

> Yup, it's a bug, reported 3 years ago:
>
> <http://twistedmatrix.com/trac/ticket/3687>
>
> It's definitely a problem.  Perhaps worse is the fact that startTLS()
> doesn't directly give you that notification either.  Please feel free
> to contribute a fix :).

Would the best approach be to open a new ticket, or re-open that with 
with tests & patch?

I'm thinking that something akin to IHalfCloseable, given the discussion 
in the original ticket.



From glyph at twistedmatrix.com  Tue Aug 21 15:11:54 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 21 Aug 2012 14:11:54 -0700
Subject: [Twisted-Python] transport.getPeerCertificate in connectionMade
In-Reply-To: <50338B2B.9070700@imperial.ac.uk>
References: <503224E4.1030508@imperial.ac.uk>
	<EC7E85B3-631A-4FD5-84B1-F24B670F1113@twistedmatrix.com>
	<50338B2B.9070700@imperial.ac.uk>
Message-ID: <C69A841E-84FB-4F47-9285-3C3827257C7E@twistedmatrix.com>


On Aug 21, 2012, at 6:20 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 20/08/12 18:50, Glyph wrote:
> 
>> Yup, it's a bug, reported 3 years ago:
>> 
>> <http://twistedmatrix.com/trac/ticket/3687>
>> 
>> It's definitely a problem.  Perhaps worse is the fact that startTLS()
>> doesn't directly give you that notification either.  Please feel free
>> to contribute a fix :).
> 
> Would the best approach be to open a new ticket, or re-open that with 
> with tests & patch?

Open a new one that links to the old one, since description and subject editing is restricted, and it's important that this have a descriptive subject that refers to the problem and not just one proposed solution.  Really, when this was originally closed, the subject should have been changed to reflect the real problem rather than closed as wontfix, since there is a real problem here.  But we are faced with the problem of what to do today, not what should have been done then ;).

(And since Trac is dumb and can't do this automatically, add a comment to the old one that links to the new one.)

> I'm thinking that something akin to IHalfCloseable, given the discussion in the original ticket.

That sounds reasonable to me.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120821/8c7947d1/attachment-0001.html>

From matt at conundrum.com  Wed Aug 22 09:02:43 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Wed, 22 Aug 2012 11:02:43 -0400
Subject: [Twisted-Python] twisted.cred documentation bug?
In-Reply-To: <3E9C1A14-3D7F-4E70-8B0D-983F3D857E9A@twistedmatrix.com>
References: <0DE2322C-30AB-44A7-9CCE-951BAC6786D2@conundrum.com>
	<3E9C1A14-3D7F-4E70-8B0D-983F3D857E9A@twistedmatrix.com>
Message-ID: <6DBE72C6-CD1E-46D1-AB73-BC539D6AAAB7@conundrum.com>


On 2012/08/19, at 17:28, Glyph wrote:

> 
> On Aug 19, 2012, at 1:35 PM, Matthew Pounsett <matt at conundrum.com> wrote:
> 
>> 
>> I've been reading the cred docs, and think I may have spotted a typo.  Near the end of <http://twistedmatrix.com/documents/current/core/howto/cred.html>, in the code sample describing creating a cred plugin's factory, there is this method:
>> 
>>  # This will be called once per command-line.
>>  def generateChecker(self, argstring=""):
>>      argdict = dict((x.split('=') for x in argstring.split(':')))
>>      return SpecialChecker(**dict)
>> 
>> I think that return should actually be for **argdict, yes?
> 
> Quite so.  Want to file a ticket?

Will do.  Thanks, I just wanted to make sure what I was thinking made sense before I do that.






From forsberg at opera.com  Fri Aug 24 05:13:08 2012
From: forsberg at opera.com (Erik Forsberg)
Date: Fri, 24 Aug 2012 13:13:08 +0200
Subject: [Twisted-Python] Twisted IPv6 + SSL - fixed, or todo?
Message-ID: <503761C4.7030102@opera.com>

Hi!

http://twistedmatrix.com/trac/wiki/IPv6 mentions:

"SSL (but this might be automatic when IReactorTCP supports it)"

IReactorTCP now has IPv6 support, so did twisted get SSL + IPv6 support 
automatically? It seems to me from twisted.internet.endpoints that 
there's work to do there (there's SSL4ServerEndpoint and 
SSL4ClientEndpoint, but no SSL6ServerEndpoint/SSL6ClientEndpoint).

My use case is to be able to connect to https servers over IPv6 with 
twisted.web.client.Agent. Can I do that? If so, how?

Regards,
\EF



From glyph at twistedmatrix.com  Fri Aug 24 15:06:45 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 24 Aug 2012 14:06:45 -0700
Subject: [Twisted-Python] Twisted IPv6 + SSL - fixed, or todo?
In-Reply-To: <503761C4.7030102@opera.com>
References: <503761C4.7030102@opera.com>
Message-ID: <E85D0869-6272-4A5A-9B3F-7D7E02515815@twistedmatrix.com>


On Aug 24, 2012, at 4:13 AM, Erik Forsberg <forsberg at opera.com> wrote:

> Hi!
> 
> http://twistedmatrix.com/trac/wiki/IPv6 mentions:
> 
> "SSL (but this might be automatic when IReactorTCP supports it)"
> 
> IReactorTCP now has IPv6 support, so did twisted get SSL + IPv6 support 
> automatically? It seems to me from twisted.internet.endpoints that 
> there's work to do there (there's SSL4ServerEndpoint and 
> SSL4ClientEndpoint, but no SSL6ServerEndpoint/SSL6ClientEndpoint).
> 
> My use case is to be able to connect to https servers over IPv6 with 
> twisted.web.client.Agent. Can I do that? If so, how?

Sort of.  Agent is currently hard-coded to use TCP4ClientEndpoint or SSL4ClientEndpoint; the factory that it uses to generate these endpoints is not publicly exposed.

However, Agent passes a reactor, so you can implement your own reactor (probably a wrapper) that implements connectTCP and connectSSL to resolve and connect IPv6 names, and that will work just fine, and you will be using only public APIs, so it's supported :).

Does that make sense?

At some point, Agent should be modified to use <http://twistedmatrix.com/trac/ticket/4859>, once that's done and committed to trunk.  I don't know if a ticket exists to do that yet.  If you have already checked and there isn't, please feel free to file one.

-glyph




From exarkun at twistedmatrix.com  Sat Aug 25 22:05:33 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 26 Aug 2012 04:05:33 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1345953933.27.760357692@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120826/ca6e3a29/attachment-0001.html>

From exarkun at twistedmatrix.com  Mon Aug 27 15:01:35 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 27 Aug 2012 21:01:35 -0000
Subject: [Twisted-Python] Twisted 12.2.0pre1 is here!
In-Reply-To: <CAMFCZ-3DNW3ep87350fTG1BFun+6T52_=DWnpC9jUCoUrP05oQ@mail.gmail.com>
References: <CAMFCZ-3DNW3ep87350fTG1BFun+6T52_=DWnpC9jUCoUrP05oQ@mail.gmail.com>
Message-ID: <20120827210135.23316.960809678.divmod.xquotient.5@localhost6.localdomain6>

On 18 Aug, 03:44 pm, ashwini.oruganti at gmail.com wrote:
>The pre-release for the upcoming Twisted 12.2 is now available!
>
>You can download the tarballs here:
>
>    http://twistedmatrix.com/~ashfall/12.2.0pre1/

Hooray.  As it's been about a week, and I haven't seen any complaints, I 
expect a final release is imminent.

I'd like to suggest that we make this release, 12.2, the last release to 
support Python 2.6 on Windows.  Historically we have dropped support for 
older versions of Python on Windows before dropping it on other 
platforms, and as we just moved all the other supported platforms up to 
requiring Python 2.6 or newer, this seems like a good time to move 
Windows up to requiring Python 2.7.

This also makes sense in light of our *highly* overloaded continuous 
integration system, which now takes over an hour to complete the Windows 
portion of our testing.

A note about this dependency bump should be included in the NEWS file 
and the final release announcement as well.

Jean-Paul



From tobias.oberstein at tavendo.de  Wed Aug 29 07:19:30 2012
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 29 Aug 2012 06:19:30 -0700
Subject: [Twisted-Python] Switching Protocols and TLS
Message-ID: <634914A010D0B943A035D226786325D4338FB26D55@EXVMBX020-12.exch020.serverdata.net>

Hello,

I am running a Twisted Web Site object that switches the protocol for specific paths.
The goal is to run Twisted Web, and have certain paths mapped to WebSocket.

I am aware of 

http://twistedmatrix.com/trac/ticket/3204

but in the meantime have working code

https://github.com/tavendo/AutobahnPython/blob/master/autobahn/autobahn/resource.py#L84

This works for non-TLS, but not for TLS.

This works perfectly:

https://github.com/tavendo/AutobahnPython/tree/master/examples/websocket/echo_site

and this does NOT work:

https://github.com/tavendo/AutobahnPython/tree/master/examples/websocket/echo_site_tls

The latter is able to send stuff down to client, but won't receive anything.

Any hint how to track that down would be great!

Thanks,
Tobias





From exarkun at twistedmatrix.com  Wed Aug 29 07:53:01 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 29 Aug 2012 13:53:01 -0000
Subject: [Twisted-Python] Switching Protocols and TLS
In-Reply-To: <634914A010D0B943A035D226786325D4338FB26D55@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4338FB26D55@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20120829135301.23316.467672191.divmod.xquotient.14@localhost6.localdomain6>

On 01:19 pm, tobias.oberstein at tavendo.de wrote:
>Hello,
>
>I am running a Twisted Web Site object that switches the protocol for 
>specific paths.
>The goal is to run Twisted Web, and have certain paths mapped to 
>WebSocket.
>
>I am aware of
>
>http://twistedmatrix.com/trac/ticket/3204
>
>but in the meantime have working code
>
>https://github.com/tavendo/AutobahnPython/blob/master/autobahn/autobahn/resource.py#L84
>
>This works for non-TLS, but not for TLS.
>
>This works perfectly:
>
>https://github.com/tavendo/AutobahnPython/tree/master/examples/websocket/echo_site
>
>and this does NOT work:
>
>https://github.com/tavendo/AutobahnPython/tree/master/examples/websocket/echo_site_tls
>
>The latter is able to send stuff down to client, but won't receive 
>anything.
>
>Any hint how to track that down would be great!

The `protocol´ attribute isn't part of the transport interface.  Some 
transports are implemented in a way such that changing that attribute to 
refer to a different protocol will produce the behavior you're after, 
but not all.  In particular, the transport implemented in 
twisted.protocols.tls (used to provide the transport whenever you use 
listenSSL, connectSSL, or startTLS) does not work this way.

You should be able to work out which attribute needs to be mangled by 
looking at twisted/protocols/tls.py.  My initial guess would be 
`wrappedProtocol`, but that's *only* a guess.  And of course, whatever 
you find is not going to be part of any formal transport interface 
either, so it's not guaranteed to keep working in the future, or to work 
with any other transport you might end up using - hence the desire to 
resolve #3204.

Jean-Paul



From tobias.oberstein at tavendo.de  Wed Aug 29 08:41:38 2012
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 29 Aug 2012 07:41:38 -0700
Subject: [Twisted-Python] Switching Protocols and TLS
In-Reply-To: <20120829135301.23316.467672191.divmod.xquotient.14@localhost6.localdomain6>
References: <634914A010D0B943A035D226786325D4338FB26D55@EXVMBX020-12.exch020.serverdata.net>
	<20120829135301.23316.467672191.divmod.xquotient.14@localhost6.localdomain6>
Message-ID: <634914A010D0B943A035D226786325D4338FB26DFA@EXVMBX020-12.exch020.serverdata.net>

> >Any hint how to track that down would be great!
> 
> The `protocol´ attribute isn't part of the transport interface.  Some transports
> are implemented in a way such that changing that attribute to refer to a
> different protocol will produce the behavior you're after, but not all.  In
> particular, the transport implemented in twisted.protocols.tls (used to provide
> the transport whenever you use listenSSL, connectSSL, or startTLS) does not
> work this way.
> 
> You should be able to work out which attribute needs to be mangled by looking
> at twisted/protocols/tls.py.  My initial guess would be `wrappedProtocol`, but
> that's *only* a guess.  And of course, whatever you find is not going to be part
> of any formal transport interface either, so it's not guaranteed to keep working
> in the future, or to work with any other transport you might end up using -
> hence the desire to resolve #3204.

You are great! ;)

It is indeed "wrappedProtocol" .. and by mangling this, it now works also for TLS!

Yes, I am fully aware that it's a bloody hack .. and I will change code when #3204 lands.

Btw:
1)
http://twistedmatrix.com/trac/ticket/4173
will need to have such a hack also.

2)
Something that still bugs me: who should be responsible for calling start/stopFactory
on the factory that produces the protocol that gets switched over to?

I mean (in my case): I can't just derive from twisted.web.server.Site overriding
start/stopFactory, since there may be multiple Resources added to Site that
do switch protocol. Or should I iterate over the whole Resource tree of Site
finding the protocol switching Resources and call startFactory on them?

Thanks again!

Tobias

From wasilak at gmail.com  Wed Aug 29 13:53:59 2012
From: wasilak at gmail.com (Maciej Wasilak)
Date: Wed, 29 Aug 2012 21:53:59 +0200
Subject: [Twisted-Python] Using Deferred.called to distinguish between
 synchronous and asynchronous result
Message-ID: <CAFUtXGyNqUkxqAa4tBb8=D73-S_Z1ec5FP+29ceExoEyC0h-sg@mail.gmail.com>

Hello,

I am implementing UDP-based protocol in Twisted (CoAP) which allows two
behaviors when answering requests:

1. If response is immediately available - send acknowledgement and response
in a single datagram (piggyback response)
2. If response needs to be fetched or prepared - send datagram with
acknowledgement, and then send another datagram with a response (separate
response)

(I think behavior #1 is called synchronous in most Twisted tutorials, and
behavior #2 is called asynchronous.)

When programmer is implementing his application on top of CoAP protocol, he
or she needs to choose how his request handler is going to behave. I would
like to handle both behaviors in the same manner - by forcing every
user-written request handler to return Deferred. Then I would
check Deferred.called parameter.
1. If True - callback will execute immediately and send proper ACK+Response
(that means request handler used defer.succeed() or somethin similar)
2. If False I send empty ACK, and wait for callback to send Response

code:
def respond(request):
        d = requestHandler(request)
        if d.called is False:
            sendEmptyAck()
        d.addCallback(sendResponse)

I assume that sendResponse can send either ACK+RSP, or only RSP.

I would like to ask if this is a proper approach?

Best Regards
Maciej Wasilak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120829/c47e1736/attachment-0001.html>

From exarkun at twistedmatrix.com  Wed Aug 29 14:52:15 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 29 Aug 2012 20:52:15 -0000
Subject: [Twisted-Python] Using Deferred.called to distinguish between
 synchronous and asynchronous result
In-Reply-To: <CAFUtXGyNqUkxqAa4tBb8=D73-S_Z1ec5FP+29ceExoEyC0h-sg@mail.gmail.com>
References: <CAFUtXGyNqUkxqAa4tBb8=D73-S_Z1ec5FP+29ceExoEyC0h-sg@mail.gmail.com>
Message-ID: <20120829205215.23316.1858919602.divmod.xquotient.23@localhost6.localdomain6>

On 07:53 pm, wasilak at gmail.com wrote:
>Hello,
>
>I am implementing UDP-based protocol in Twisted (CoAP) which allows two
>behaviors when answering requests:
>
>1. If response is immediately available - send acknowledgement and 
>response
>in a single datagram (piggyback response)
>2. If response needs to be fetched or prepared - send datagram with
>acknowledgement, and then send another datagram with a response 
>(separate
>response)
>
>(I think behavior #1 is called synchronous in most Twisted tutorials, 
>and
>behavior #2 is called asynchronous.)
>
>When programmer is implementing his application on top of CoAP 
>protocol, he
>or she needs to choose how his request handler is going to behave. I 
>would
>like to handle both behaviors in the same manner - by forcing every
>user-written request handler to return Deferred. Then I would
>check Deferred.called parameter.
>1. If True - callback will execute immediately and send proper 
>ACK+Response
>(that means request handler used defer.succeed() or somethin similar)
>2. If False I send empty ACK, and wait for callback to send Response
>
>code:
>def respond(request):
>        d = requestHandler(request)
>        if d.called is False:
>            sendEmptyAck()
>        d.addCallback(sendResponse)
>
>I assume that sendResponse can send either ACK+RSP, or only RSP.
>
>I would like to ask if this is a proper approach?

This isn't the right way to go.  The `called` attribute is set to `True` 
as soon as `Deferred.callback` is called.  This might sound like it's 
what you want, but only if you disregard the chaining feature of 
Deferreds, where a callback on the Deferred might return a *new* unfired 
Deferred.  Now your original Deferred has `called` set to `True` but you 
don't actually have a result yet.

Instead, there are two obvious options:

  1. Allow the application to return a non-Deferred result.  Use 
`isinstance` to detect this case and do the synchronous send when you 
see a non-Deferred come back.  Send the empty ACK and ultimately the 
result in the other case.

  2. Change your empty ACK logic to be time-based instead.  Say, if the 
application doesn't produce a result within 10 milliseconds, send the 
empty ACK.  Implement this using `reactor.callLater` and 
`IDelayedCall.cancel`.  You'll set up a delayed call to send the empty 
ACK every time you call application code, but in the callback on the 
application's Deferred, you'll cancel that call (unless it has already 
happened).

Hope this helps,
Jean-Paul



From wasilak at gmail.com  Thu Aug 30 13:58:12 2012
From: wasilak at gmail.com (Maciej Wasilak)
Date: Thu, 30 Aug 2012 21:58:12 +0200
Subject: [Twisted-Python] Using Deferred.called to distinguish between
 synchronous and asynchronous result
In-Reply-To: <20120829205215.23316.1858919602.divmod.xquotient.23@localhost6.localdomain6>
References: <CAFUtXGyNqUkxqAa4tBb8=D73-S_Z1ec5FP+29ceExoEyC0h-sg@mail.gmail.com>
	<20120829205215.23316.1858919602.divmod.xquotient.23@localhost6.localdomain6>
Message-ID: <CAFUtXGxAFTpXpEASB_xGVEho5NgxC_N3pho0nk=3EuZJF68Gcg@mail.gmail.com>

Jean-Paul,

thank you very much for your answer - I would have missed this problem for
sure.
Second option seems a bit more challenging, I'll try this one.

Best Regards
Maciej Wasilak

2012/8/29 <exarkun at twistedmatrix.com>

> On 07:53 pm, wasilak at gmail.com wrote:
> >Hello,
> >
> >I am implementing UDP-based protocol in Twisted (CoAP) which allows two
> >behaviors when answering requests:
> >
> >1. If response is immediately available - send acknowledgement and
> >response
> >in a single datagram (piggyback response)
> >2. If response needs to be fetched or prepared - send datagram with
> >acknowledgement, and then send another datagram with a response
> >(separate
> >response)
> >
> >(I think behavior #1 is called synchronous in most Twisted tutorials,
> >and
> >behavior #2 is called asynchronous.)
> >
> >When programmer is implementing his application on top of CoAP
> >protocol, he
> >or she needs to choose how his request handler is going to behave. I
> >would
> >like to handle both behaviors in the same manner - by forcing every
> >user-written request handler to return Deferred. Then I would
> >check Deferred.called parameter.
> >1. If True - callback will execute immediately and send proper
> >ACK+Response
> >(that means request handler used defer.succeed() or somethin similar)
> >2. If False I send empty ACK, and wait for callback to send Response
> >
> >code:
> >def respond(request):
> >        d = requestHandler(request)
> >        if d.called is False:
> >            sendEmptyAck()
> >        d.addCallback(sendResponse)
> >
> >I assume that sendResponse can send either ACK+RSP, or only RSP.
> >
> >I would like to ask if this is a proper approach?
>
> This isn't the right way to go.  The `called` attribute is set to `True`
> as soon as `Deferred.callback` is called.  This might sound like it's
> what you want, but only if you disregard the chaining feature of
> Deferreds, where a callback on the Deferred might return a *new* unfired
> Deferred.  Now your original Deferred has `called` set to `True` but you
> don't actually have a result yet.
>
> Instead, there are two obvious options:
>
>   1. Allow the application to return a non-Deferred result.  Use
> `isinstance` to detect this case and do the synchronous send when you
> see a non-Deferred come back.  Send the empty ACK and ultimately the
> result in the other case.
>
>   2. Change your empty ACK logic to be time-based instead.  Say, if the
> application doesn't produce a result within 10 milliseconds, send the
> empty ACK.  Implement this using `reactor.callLater` and
> `IDelayedCall.cancel`.  You'll set up a delayed call to send the empty
> ACK every time you call application code, but in the callback on the
> application's Deferred, you'll cancel that call (unless it has already
> happened).
>
> Hope this helps,
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120830/696becae/attachment-0001.html>

From kstaniek at gmail.com  Fri Aug 31 12:28:41 2012
From: kstaniek at gmail.com (Klaudiusz Staniek)
Date: Fri, 31 Aug 2012 20:28:41 +0200
Subject: [Twisted-Python] tap2deb problem with building package
In-Reply-To: <CAJ96fJ3VYTuMHGua2P1=o_1Xs5N38chSAXsQFe41jJMY22i1dw@mail.gmail.com>
References: <CAJ96fJ3VYTuMHGua2P1=o_1Xs5N38chSAXsQFe41jJMY22i1dw@mail.gmail.com>
Message-ID: <CAJ96fJ3RbCuhdkcdi7de5K+vLyQK8mng21srORwVwPvJdzhWqQ@mail.gmail.com>

Hi
when I try to build the deb package I'm getting the error message: cp:
cannot create regular file `debian/tmp/etc/': No such file or
directory

What is wrong? See below output:
Cheers,
Klaudiusz


tap2deb --unsigned -m "Klaudiusz Staniek <kstaniek at gmail.com>"
--type=python -t xplhub.tac
dpkg-buildpackage: set CFLAGS to default value: -g -O2
dpkg-buildpackage: set CPPFLAGS to default value:
dpkg-buildpackage: set LDFLAGS to default value: -Wl,-Bsymbolic-functions
dpkg-buildpackage: set FFLAGS to default value: -g -O2
dpkg-buildpackage: set CXXFLAGS to default value: -g -O2
dpkg-buildpackage: source package twisted-xplhub
dpkg-buildpackage: source version 1.0
dpkg-buildpackage: source changed by Klaudiusz Staniek <kstaniek at gmail.com>
dpkg-buildpackage: host architecture armel
 fakeroot debian/rules clean
dh_testdir
dh_testroot
rm -f build-stamp install-stamp
dh_clean
 dpkg-source -b twisted-xplhub-1.0
dpkg-source: info: using source format `1.0'
dpkg-source: info: building twisted-xplhub in twisted-xplhub_1.0.tar.gz
dpkg-source: info: building twisted-xplhub in twisted-xplhub_1.0.dsc
 debian/rules build
dh_testdir
touch build-stamp
 fakeroot debian/rules binary
dh_testdir
dh_testroot
dh_clean -k
dh_installdirs
# Add here commands to install the package into debian/tmp.
cp xplhub.tac debian/tmp/etc/
cp: cannot create regular file `debian/tmp/etc/': No such file or directory
make: *** [install-stamp] Error 1
dpkg-buildpackage: error: fakeroot debian/rules binary gave error exit status 2



From linshuai2012 at gmail.com  Fri Aug 31 23:30:35 2012
From: linshuai2012 at gmail.com (Shuai Lin)
Date: Sat, 1 Sep 2012 13:30:35 +0800
Subject: [Twisted-Python] blocking code alongside with Twisted
Message-ID: <CA+VO6itgv5DW5oQNjG77ajs=vzJ1-u=RCB_9X1c4z9JYbnR+Dg@mail.gmail.com>

Hi all,

    My server mainly consists of two modules:
    -- http api handling (using twisted)
    -- backend blocking tasks

    The backend tasks have to block, because I have to call some
third-party API, which is always blocking. What's more, since the
third-party api call is blocking, I plan to use a thread pool to implement
a connection pool.

    My question is: Is it ok to use twisted in this manner?  i.e. I just
run `reactor.run()' in the main thread (to handle the http api request),
and the rest of the program is  blocking -- and intrinsically not related
to twisted.

    Any suggestion is appreciated. Thanks!

Lin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120901/7603d29a/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Aug 31 23:53:11 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 31 Aug 2012 22:53:11 -0700
Subject: [Twisted-Python] blocking code alongside with Twisted
In-Reply-To: <CA+VO6itgv5DW5oQNjG77ajs=vzJ1-u=RCB_9X1c4z9JYbnR+Dg@mail.gmail.com>
References: <CA+VO6itgv5DW5oQNjG77ajs=vzJ1-u=RCB_9X1c4z9JYbnR+Dg@mail.gmail.com>
Message-ID: <6A55D674-13F6-4FFF-BA1A-BD819097189D@twistedmatrix.com>


On Aug 31, 2012, at 10:30 PM, Shuai Lin <linshuai2012 at gmail.com> wrote:

> Hi all,
> 
>     My server mainly consists of two modules: 
>     -- http api handling (using twisted)
>     -- backend blocking tasks
> 
>     The backend tasks have to block, because I have to call some third-party API, which is always blocking. What's more, since the third-party api call is blocking, I plan to use a thread pool to implement a connection pool.
> 
>     My question is: Is it ok to use twisted in this manner?  i.e. I just run `reactor.run()' in the main thread (to handle the http api request), and the rest of the program is  blocking -- and intrinsically not related to twisted.
> 
>     Any suggestion is appreciated. Thanks!

Sure, this is fine.  This is why the reactor has callInThread() after all :).  It may also make sense to use something like Ampoule <https://launchpad.net/ampoule> if the backend tasks are CPU intensive as well, and you want multi-core parallelism.

-glyph


