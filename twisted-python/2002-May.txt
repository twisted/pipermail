From twisted at itamarst.org  Wed May  1 09:19:18 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 01 May 2002 16:19:18 +0300
Subject: [Twisted-Python] [ANN] Puffin 0.8.8 Released -- Web App Regression Testing Just Got
 Easier
Message-ID: <3CCFEB56.6000000@itamarst.org>

Maybe we should this for testing twisted.web?

<http://mail.python.org/pipermail/python-announce-list/2002-April/001420.html>




From twisted at itamarst.org  Thu May  2 05:26:02 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 02 May 2002 12:26:02 +0300
Subject: [Twisted-Python] [Fwd: webunit is better (i think :-)]
Message-ID: <3CD1062A.50302@itamarst.org>

Luc suggests webunit. And since the author is the guy who wrote pyunit, it 
probably integrates nicely.

-------- Original Message --------
Subject: webunit is better (i think :-)
Date: Thu, 02 May 2002 09:03:51 +0200
From: Luc Stepniewski

Have you looked at the webunit tool? It seems much better, the included
httpsession module works so good, it even memorizes the cookies set
during a path traversal (for example, first logging, the doing some
action). It's on http://webunit.sourceforge.net/

Luc




From andrew-twisted at puzzling.org  Thu May  2 23:00:11 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 3 May 2002 13:00:11 +1000
Subject: [Twisted-Python] Timeouts for Deferreds?
Message-ID: <20020503030011.GA23457@ritsuko.xware.cx>

I just thought of another feature I would find handy in Deferreds,
although perhaps this feature belongs somewhere else...

Deferred.timeout(secs):
    If I am uncalled for secs seconds after being armed, call my errback
    automatically.

This way callers can control how long they will wait for a Deferred to
do something.  Methods returns Deferreds could also set a reasonable
default with .timeout that the caller can override by calling .timeout
again.  A timeout of None would, of course, mean never timeout.

I can see this as being useful in many ways.  The biggest problem with
it is I'm not sure what should happen when you try to call a Deferred
after it has timed out (e.g. your CGI script took 5 minutes, timed out
and thus called errback, but did eventually finish).  I don't think
calling callback/errback should raise an AlreadyCalledException, because
the timeout may have been set by a client of a library that doesn't
expect timeouts.  On the other hand, I don't like the idea of things
failing silently.  The ideal situation is, of course, to make sure that
the timeout event always cancels whatever it is that would later call
callback/errback, but I don't like making it a requirement that this
must happen (plus it probably means adding a "timeback" method, or
something).

Perhaps a TimeoutDeferred subclass?  But then it's not generally useful
anymore, unless a method explicitly returns TimeoutDeferred and not
Deferred.  Still, encouraging people to use hard-coded arbitrary
timeouts everywhere probably isn't a good idea either.

Thoughts, anyone?

(Actual implementation details left as an exercise for the reader...
actually, I'm happy to do it if people want this).

-Andrew.




From carmstro at twistedmatrix.com  Thu May  2 23:34:17 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 02 May 2002 23:34:17 -0400
Subject: [Twisted-Python] Timeouts for Deferreds?
In-Reply-To: <20020503030011.GA23457@ritsuko.xware.cx>
References: <20020503030011.GA23457@ritsuko.xware.cx>
Message-ID: <1020396859.2867.21.camel@radii>

On Thu, 2002-05-02 at 23:00, Andrew Bennetts wrote:
> I just thought of another feature I would find handy in Deferreds,
> although perhaps this feature belongs somewhere else...
> 
> Deferred.timeout(secs):
>     If I am uncalled for secs seconds after being armed, call my errback
>     automatically.
> 
> This way callers can control how long they will wait for a Deferred to
> do something.  Methods returns Deferreds could also set a reasonable
> default with .timeout that the caller can override by calling .timeout
> again.  A timeout of None would, of course, mean never timeout.

I think something like this is definitely needed, because any timeout
anyone does with Twisted will probably be done while waiting for a
Deferred to return. 

> I can see this as being useful in many ways.  The biggest problem with
> it is I'm not sure what should happen when you try to call a Deferred
> after it has timed out (e.g. your CGI script took 5 minutes, timed out
> and thus called errback, but did eventually finish).  I don't think
> calling callback/errback should raise an AlreadyCalledException, because
> the timeout may have been set by a client of a library that doesn't
> expect timeouts.  On the other hand, I don't like the idea of things
> failing silently.  The ideal situation is, of course, to make sure that
> the timeout event always cancels whatever it is that would later call
> callback/errback, but I don't like making it a requirement that this
> must happen (plus it probably means adding a "timeback" method, or
> something).

I think a 'timeout' callback method or somesuch might be a good way to
do it, that way you just leave it up to the developer what to do when
something finally does callback/errback after a timeout has happened.

> Perhaps a TimeoutDeferred subclass?  But then it's not generally useful
> anymore, unless a method explicitly returns TimeoutDeferred and not
> Deferred.  Still, encouraging people to use hard-coded arbitrary
> timeouts everywhere probably isn't a good idea either.

I don't think it really needs to be a separate class - we can just have
an 'addTimeBack' method on Deferreds that creates a Delayed (or
something?) on the Deferred with the appropriate stuff. That way the
regular case of not using a timeout on a Deferred won't have any
overhead.

> Thoughts, anyone?
> 
> (Actual implementation details left as an exercise for the reader...
> actually, I'm happy to do it if people want this).

I guess either a Delayed or a main.addTimeout (err, it's not called
'main.addTimeout' anymore with the new Reactor refactor, but I don't
know what it is)

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From carmstro at twistedmatrix.com  Sat May  4 03:20:13 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 04 May 2002 03:20:13 -0400
Subject: [Twisted-Python] failure.Failure
Message-ID: <1020496815.6031.31.camel@radii>

  So, I'm finally on my way to implementing robust PB errors, and I'm
getting close to completing phase 1, which is fixing up failure.Failure
in preparation for using it for PB errors. Some background:

  It was decided that we need to be able to trap an error based on a
hierarchy; that is, if I try to trap a "WordsError", it should also trap
"WordsParticipantError" and "WordsGroupError" (for example). 

  The way to do this is to get a list of all parents of an Exception
when a Failure is created with it; I use reflect.allYourBase for this.
However, these parents need to be serializable, so the solution is to
convert them to strings. The strings obviously need to be globally
unique, so I fully qualify them with reflect.qual().

  trap(), which is the method one uses for checking wether or not they
care about a particular failure, now just checks if any of its arguments
are in self.parents.

  The issue now is what the trap() API should be like. It used to be
that fail.trap(types, that, I, want, to, trap) would re-raise the
Failure if any of the types matched. This was kinda weird, as it
requires code like:

try:
   fail.trap(foo, bar)
except:
   print "Ok, so 'fail' matches 'foo' or 'bar'"

Yuck. My proposal is to do this:

if fail.trap(foo,bar): #trap() returns self when foo or bar matches
    print "This is similar to an 'except:' clause"

  So, if this is acceptable, should I worry about the two cases in
Twisted where fail() seems to be called? They don't even seem to make
sense in either case (one of them is obviously using trap() incorrectly,
the other just seems to use it in an odd way). So can I just change the
hardly-used API and fix the current places it's used, or should I remain
backwards-compatible?

  I've attached my diff -u of failure.py, if anyone wants to take a
look. It's very small. It makes test_failure fail, because it tests the
old behavior of trap().


-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: failure.diff
Type: text/x-patch
Size: 1581 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020504/f97faccf/attachment.bin 

From drt at un.bewaff.net  Sat May  4 14:22:16 2002
From: drt at un.bewaff.net (Doobee R. Tzeck)
Date: 04 May 2002 20:22:16 +0200
Subject: [Twisted-Python] CNAMES and twisted.names in 0.17.3
Message-ID: <87lmazzsbr.fsf@c0re.bewaff.net>

I had some problems with the resolver generating tracebacks for
CNAMEs. The decoding has an off by two error which completely
messes up the decoding process.  The attached patch seems to cure
the problem, but I'm not sure why the author of twisted.names did
this fiddeling with the offset. Perhaps I'm breaking something else.

BTW: The Bugtracker eats my (MacOS) lineendings.

drt

http://twistedmatrix.com/users/itamarst.twistd/bugs/view_bug?bug_id=12
http://c0re.jp/c0de/misc/Twisted-0.17.3-dns-CNAME.patch

diff -ur Twisted-0.17.3-orig/twisted/names/dns.py
Twisted-0.17.3/twisted/names/dns.py
--- Twisted-0.17.3-orig/twisted/names/dns.py    Tue Apr  9    22:37:00 2002
+++ Twisted-0.17.3/twisted/names/dns.py Sat May  4 20:06:51 2002
@@ -156,7 +156,7 @@
             if answer.type == 1:
                 answers.append(answer)
             elif answer.type == dns.CNAME:
-                answer.strio.seek(answer.strioOff+2)
+                answer.strio.seek(answer.strioOff)
                 n = dns.Name()
                 n.decode(answer.strio)
                 cnames.append(n.name)
@@ -168,7 +168,7 @@
                 if answer.type == 1:
                     answers.append(cnameMap[name])
                 else:
-                    answer.strio.seek(answer.strioOff+2)
+                    answer.strio.seek(answer.strioOff)
                     n = dns.Name()
                     n.decode(answer.strio)
                     name = n.name



-- 
teenage mutant ninja hero coders from da c0re - http://c0re.jp/
me                                  - http://koeln.ccc.de/~drt/



From carmstro at twistedmatrix.com  Sun May  5 02:40:52 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 05 May 2002 02:40:52 -0400
Subject: [Twisted-Python] Interfaces
Message-ID: <1020580854.11415.4.camel@radii>

What's up with defining an interface and not specifying any methods on
it?

from twisted/coil/coil.py:
==
class ICollection(components.Interface):
    """A collection for coil."""
==

Wow! That's so informative! Now how am I supposed to know which methods
I need to define on this class? How do I know what parameters and return
values they need? I guess it doesn't matter, I can just go look at the
code that uses the objects that conform to the interface, right?

PLEASE, if you're going to go to the trouble of defining an interface,
*SPECIFY IT*.

<fume>
-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From twisted at itamarst.org  Sun May  5 05:11:00 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 12:11:00 +0300
Subject: [Twisted-Python] Another gaming position in Austin
Message-ID: <3CD4F724.9090505@itamarst.org>

<http://www.guru.com/gig/project_view.jhtml?gigId=469455&_DARGS=%2Ffind%2FCMP_search_work_list.jhtml.4_A&_DAV=0>




From twisted at itamarst.org  Sun May  5 07:40:00 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 14:40:00 +0300
Subject: [Twisted-Python] Kademlia: XOR metric-based routing
Message-ID: <3CD51A10.6070501@itamarst.org>

Raph Levien says it's less fragile than Chord. Raph Levien is *smart* 
(http://www.advogato.org/person/raph/diary.html?start=182)

<http://kademlia.scs.cs.nyu.edu/>

In fact, someone should go read his thesis (/me nominates dash).




From twisted at itamarst.org  Sun May  5 09:19:43 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 16:19:43 +0300
Subject: [Twisted-Python] new reactor testing
Message-ID: <3CD5316F.5000709@itamarst.org>

I added an option to runtests that lets you choose which reactor to use, e.g.:

	$ admin/runtests poll

or

	$ admin/runtests gtk

The result - the tests only pass in the default reactor, and do *not* all 
pass in others. So, "Gotta Fix Them All!".





From twisted at itamarst.org  Sun May  5 11:51:31 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 18:51:31 +0300
Subject: [Twisted-Python] Reactor issues - ongoing
Message-ID: <3CD55503.8010804@itamarst.org>

1. Qt and GTK+ assume they deal with processes, in the method unix does it, 
but this won't work on windows. That is, it is not possible to run processes 
on windows in Qt or GTK+ event loops at this time.

2. poll() fails on process tests.

(3. Qt fails some tests, but only because it doesn't have a working 
doIteration method, which I will add ASAP.)

OTOH, GTK+ and select pass all tests (except an unrelated bug in HTTP code 
or tests).




From twisted at itamarst.org  Sun May  5 11:57:58 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 18:57:58 +0300
Subject: [Twisted-Python] Reactor issues - ongoing
References: <3CD55503.8010804@itamarst.org>
Message-ID: <3CD55686.7070808@itamarst.org>

Itamar Shtull-Trauring wrote:

> (3. Qt fails some tests, but only because it doesn't have a working 
> doIteration method, which I will add ASAP.)

And done. Further investigation shows that since I can easily do doIteration
for QT, it may be better to make it like SelectReactor or PollReactor and get
rid of the simulate() crap, or maybe make it like wxPython so process 
running on Win32 works, since it seems to be slower than select() anyway.

For GTK+ there may be APIs for doing so as well (i.e. process events up to X
number of seconds), allowing us to do the same.




From twisted at itamarst.org  Sun May  5 14:05:10 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 21:05:10 +0300
Subject: [Twisted-Python] Things to do before next release
Message-ID: <3CD57456.8080409@itamarst.org>

1. Move *everything* to new APIs.

2. Add wxdemo.py and qtdemo.py to accepttests.

3. Finish up process refactor so it uses new API.

4. Pass all tests with all event loops.

What else?

Oh - glyph, start writing ChangeLogs again.




From twisted at itamarst.org  Sun May  5 14:08:48 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 21:08:48 +0300
Subject: [Twisted-Python] Reactor issues - ongoing
References: <3CD55503.8010804@itamarst.org>
Message-ID: <3CD57530.9050702@itamarst.org>

Itamar Shtull-Trauring wrote:

> 2. poll() fails on process tests.

Fixed. In fact, select, pool gtk and qt reactors pass all tests, except the 
unrelated issue with HTTP client. win32 still has issues, but it's not like 
I didn't know that.





From glyph at twistedmatrix.com  Sun May  5 20:17:25 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 05 May 2002 19:17:25 -0500
Subject: [Twisted-Python] CNAMES and twisted.names in 0.17.3
In-Reply-To: <87lmazzsbr.fsf@c0re.bewaff.net>
References: <87lmazzsbr.fsf@c0re.bewaff.net>
Message-ID: <1020644245.326.0.camel@janus>

Can someone who knows the twisted.names codebase please stand up?  I
will apply this patch if nobody says anything about it in the next
week...

On Sat, 2002-05-04 at 13:22, Doobee R. Tzeck wrote:
> 
> I had some problems with the resolver generating tracebacks for
> CNAMEs. The decoding has an off by two error which completely
> messes up the decoding process.  The attached patch seems to cure
> the problem, but I'm not sure why the author of twisted.names did
> this fiddeling with the offset. Perhaps I'm breaking something else.
> 
> BTW: The Bugtracker eats my (MacOS) lineendings.
> 
> drt
> 
> http://twistedmatrix.com/users/itamarst.twistd/bugs/view_bug?bug_id=12
> http://c0re.jp/c0de/misc/Twisted-0.17.3-dns-CNAME.patch
> 
> diff -ur Twisted-0.17.3-orig/twisted/names/dns.py
> Twisted-0.17.3/twisted/names/dns.py
> --- Twisted-0.17.3-orig/twisted/names/dns.py    Tue Apr  9    22:37:00 2002
> +++ Twisted-0.17.3/twisted/names/dns.py Sat May  4 20:06:51 2002
> @@ -156,7 +156,7 @@
>              if answer.type == 1:
>                  answers.append(answer)
>              elif answer.type == dns.CNAME:
> -                answer.strio.seek(answer.strioOff+2)
> +                answer.strio.seek(answer.strioOff)
>                  n = dns.Name()
>                  n.decode(answer.strio)
>                  cnames.append(n.name)
> @@ -168,7 +168,7 @@
>                  if answer.type == 1:
>                      answers.append(cnameMap[name])
>                  else:
> -                    answer.strio.seek(answer.strioOff+2)
> +                    answer.strio.seek(answer.strioOff)
>                      n = dns.Name()
>                      n.decode(answer.strio)
>                      name = n.name
> 
> 
> 
> -- 
> teenage mutant ninja hero coders from da c0re - http://c0re.jp/
> me                                  - http://koeln.ccc.de/~drt/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020505/0e7d3a2d/attachment.pgp 

From glyph at twistedmatrix.com  Sun May  5 20:21:03 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 05 May 2002 19:21:03 -0500
Subject: [Twisted-Python] failure.Failure
In-Reply-To: <1020496815.6031.31.camel@radii>
References: <1020496815.6031.31.camel@radii>
Message-ID: <1020644463.326.3.camel@janus>

On Sat, 2002-05-04 at 02:20, Christopher Armstrong wrote:
>   The issue now is what the trap() API should be like. It used to be
> that fail.trap(types, that, I, want, to, trap) would re-raise the
> Failure if any of the types matched. This was kinda weird, as it
> requires code like:

You've got that backwards.  It would re-raise the exception if _none_ of
the types matched.

I consider this behavior important, since unless you raise an exception
or return a Failure, the next deferred stack call will be a callback,
not an errback.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020505/766cf8f5/attachment.pgp 

From carmstro at twistedmatrix.com  Sun May  5 23:59:31 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 05 May 2002 23:59:31 -0400
Subject: [Twisted-Python] failure.Failure
In-Reply-To: <1020644463.326.3.camel@janus>
References: <1020496815.6031.31.camel@radii>  <1020644463.326.3.camel@janus>
Message-ID: <1020657573.20245.203.camel@radii>

On Sun, 2002-05-05 at 20:21, Glyph Lefkowitz wrote:
> On Sat, 2002-05-04 at 02:20, Christopher Armstrong wrote:
> >   The issue now is what the trap() API should be like. It used to be
> > that fail.trap(types, that, I, want, to, trap) would re-raise the
> > Failure if any of the types matched. This was kinda weird, as it
> > requires code like:
> 
> You've got that backwards.  It would re-raise the exception if _none_ of
> the types matched.
> 
> I consider this behavior important, since unless you raise an exception
> or return a Failure, the next deferred stack call will be a callback,
> not an errback.

Aha! I didn't know about that :-) This makes things much more
interesting, hrm... So, an errback that wants to handle some particular
exception need only do:

def _ebFoo(self, failure):
    failure.trap(stuff, I, care, about)
    doStuff()

Check this out from forum/gadgets.py:

    def _errIdentity(self, failure):
        if failure.trap(self.manager.dbpool.dbapi.OperationalError):
            return self.tryAgain("This identity is already taken.",
                                 self.request)

What's up with that? Oh well, I'll just assume that whoever wrote this
code didn't understand the way failure.trap() works -- I will keep the
.trap() api as you suggested above.


-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From twisted at itamarst.org  Mon May  6 05:47:13 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 06 May 2002 12:47:13 +0300
Subject: [Twisted-Python] failure.Failure
References: <1020496815.6031.31.camel@radii>  <1020644463.326.3.camel@janus> <1020657573.20245.203.camel@radii>
Message-ID: <3CD65121.7090606@itamarst.org>

Christopher Armstrong wrote:

> Check this out from forum/gadgets.py:
> 
>     def _errIdentity(self, failure):
>         if failure.trap(self.manager.dbpool.dbapi.OperationalError):
>             return self.tryAgain("This identity is already taken.",
>                                  self.request)

Forum code in general is problematic. And on an unrelated note, it should
probably be moved into its own repository as was done to bugs.






From twisted at itamarst.org  Mon May  6 12:29:32 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 06 May 2002 19:29:32 +0300
Subject: [Twisted-Python] win32 event loop
Message-ID: <3CD6AF6C.4000004@itamarst.org>

The problem - WaitForMultipleObjects, which is like poll() for Windows, 
won't work with more than 64 events. MS did this since apparently it scales 
really really badly.

[Subtext: Microsoft hates me]

So I've done some research, and it looks like I/O Completion ports are the 
way to go for scalable networking. This will probably mean rewriting (or 
subclassing) the stuff in tcp.py and abstract.py, since this the Proactor 
pattern, not the Reactor pattern, so things work a bit differently. I'm not 
even sure how UDP is done, but that's something I'll worry about later.

[Subtext: Microsoft create more useless work for me]

Another issue is the SSL support, which won't work with this method... We'd 
have to use Windows specific SSL code.

[Subtext: Microsoft breaks my code]

Another alternative is using threads with multiple WaitForMultipleObjects. 
This, I would guess, is probably really slow.

[Subtext: Microsoft slows down my software]





From twisted at itamarst.org  Mon May  6 12:45:18 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 06 May 2002 19:45:18 +0300
Subject: [Twisted-Python] win32 event loop
References: <3CD6AF6C.4000004@itamarst.org>
Message-ID: <3CD6B31E.3090006@itamarst.org>

Itamar Shtull-Trauring wrote:

> Another alternative is using threads with multiple 
> WaitForMultipleObjects. This, I would guess, is probably really slow.

I found some code that does this for windows.

Downsides:
1. C extension (although since win32 stuff comes as .exes anyway it's not so 
bad).

2. Copyright issues:
The license says " Miller Freeman, Inc. places no restrictions on the
distribution or use of this source code." It's a code sample from a magazine.

3.  It creates new threads with every call if there are more than 64 events. 
However, since it wouldn't block the GIL, and windows threads are pretty 
lightweight, this may be a decent solution.


Anyway, this suggests that perhaps I should write an externally distributed 
C module (this is probably useful for other people as well) and see how well 
it works.




From glyph at twistedmatrix.com  Mon May  6 15:34:00 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 06 May 2002 14:34:00 -0500
Subject: [Twisted-Python] failure.Failure
In-Reply-To: <3CD65121.7090606@itamarst.org>
References: <1020496815.6031.31.camel@radii> 
	<1020644463.326.3.camel@janus> <1020657573.20245.203.camel@radii> 
	<3CD65121.7090606@itamarst.org>
Message-ID: <1020713640.941.0.camel@janus>

On Mon, 2002-05-06 at 04:47, Itamar Shtull-Trauring wrote:

> Forum code in general is problematic. And on an unrelated note, it should
> probably be moved into its own repository as was done to bugs.

Agreed.  Any volunteers...?

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020506/bbbd411d/attachment.pgp 

From carmstro at twistedmatrix.com  Mon May  6 16:18:17 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 06 May 2002 16:18:17 -0400
Subject: [Twisted-Python] failure.Failure
In-Reply-To: <1020713640.941.0.camel@janus>
References: <1020496815.6031.31.camel@radii> 
	<1020644463.326.3.camel@janus> <1020657573.20245.203.camel@radii> 
	<3CD65121.7090606@itamarst.org>  <1020713640.941.0.camel@janus>
Message-ID: <1020716299.1099.0.camel@radii>

On Mon, 2002-05-06 at 15:34, Glyph Lefkowitz wrote:
> On Mon, 2002-05-06 at 04:47, Itamar Shtull-Trauring wrote:
> 
> > Forum code in general is problematic. And on an unrelated note, it should
> > probably be moved into its own repository as was done to bugs.
> 
> Agreed.  Any volunteers...?

Of course ;-) I'll do it when I make the next release.

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From j.her at t-online.de  Mon May  6 15:56:53 2002
From: j.her at t-online.de (Juergen Hermann)
Date: Mon, 06 May 2002 21:56:53 +0200
Subject: [Twisted-Python] zaibach
Message-ID: <174ob3-0rDVq4C@fwd11.sul.t-online.com>

Hi!

If someone edits files in my home dir, please

a) ask me
b) send me a mail containing WHICH files you edited, and for what
reason

Thanks.

Ciao, J?rgen





From andrew-twisted at puzzling.org  Mon May  6 20:48:43 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 7 May 2002 10:48:43 +1000
Subject: [Twisted-Python] win32 event loop
In-Reply-To: <3CD6AF6C.4000004@itamarst.org>
References: <3CD6AF6C.4000004@itamarst.org>
Message-ID: <20020507004843.GA19302@ritsuko.xware.cx>

On Mon, May 06, 2002 at 07:29:32PM +0300, Itamar Shtull-Trauring wrote:
> 
> So I've done some research, and it looks like I/O Completion ports are the 
> way to go for scalable networking. This will probably mean rewriting (or 

That is also what I understand to be the case on Windows.

> subclassing) the stuff in tcp.py and abstract.py, since this the Proactor 
> pattern, not the Reactor pattern, so things work a bit differently. I'm not 
> even sure how UDP is done, but that's something I'll worry about later.
> 
> [Subtext: Microsoft create more useless work for me]

As far as I can tell, there's currently no way to use I/O Completion
ports from Python.

Have you got any sample code or something which can do this?  Otherwise
I guess we're stuck with writing an extension module.  Bleagh.

I recall reading that Apache 1.x used up to 64 threads doing WFMO, that
would then trigger a central WFMO -- so perhaps it's not that bad.  No
idea what Apache 2 does.  Certainly, only one level of nesting is enough
-- 64 * 64 sockets should be enough for anybody ;)

-Andrew.




From carmstro at twistedmatrix.com  Mon May  6 22:11:23 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 06 May 2002 22:11:23 -0400
Subject: [Twisted-Python] failure.Failure
In-Reply-To: <1020644463.326.3.camel@janus>
References: <1020496815.6031.31.camel@radii>  <1020644463.326.3.camel@janus>
Message-ID: <1020737485.2430.7.camel@radii>

On Sun, 2002-05-05 at 20:21, Glyph Lefkowitz wrote:
> On Sat, 2002-05-04 at 02:20, Christopher Armstrong wrote:
> >   The issue now is what the trap() API should be like. It used to be
> > that fail.trap(types, that, I, want, to, trap) would re-raise the
> > Failure if any of the types matched. This was kinda weird, as it
> > requires code like:
> 
> You've got that backwards.  It would re-raise the exception if _none_ of
> the types matched.
> 
> I consider this behavior important, since unless you raise an exception
> or return a Failure, the next deferred stack call will be a callback,
> not an errback.

Just realized - what if I want to handle two or more different failure
types differently in the same errback?

==
def _ebFoo(self, failure):
    try:
        failure.trap(Foo)
        print "it's a foo!"
    except failure.__class__: #???
        pass

    try:
        failure.trap(Bar)
        print "it's a bar!"
    except failure.__class__:
        pass

    failure.trap(Baz)
    print "it's a baz!"
==

I hope I'm missing something obvious here, because this is *freaking
ugly*. :-)

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Tue May  7 02:31:18 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 7 May 2002 01:31:18 -0500
Subject: [Twisted-Python] Arms Crisis
Message-ID: <20020507063118.GA10209@twistedmatrix.com>

Anyone who has programmed in depth with Twisted probably know about
arm()ing deferreds by now.  Nobody has complained as loudly as I thought
they would, so I'm not sure if this is really that big of a problem, but
I'm questioning my original design decisions regarding .arm().

Originally, I wanted it to be easily determineable whether your callback
would be called before your stack had been escaped; so the system you
returned your Deferred to would .arm() it afterwards.  However, this
creates lots of weird, confusing corners for callbacks to get lost in,
and I have yet to see a situation where it actually matters whether your
current stack frame is escaped before the callback happens.

I would like to propose that we create an experimental mode where .arm()
be made to do nothing (for backwards compatibility), and that
.callback() call whatever callbacks are available immediately; and
.addCallbacks() (and friends) will immediately call any pending
callbacks.  If after an extended period of testing it is discovered that
there are no bugs created with this approach, we should remove .arm()
entirely.

I'd like some feedback on this, though.  Does anyone else think that
callbacks sometimes happening and sometimes not when .addCallbacks() is
called makes a difference?  Anyone feel strongly that .arm() is
confusing and unnecessary?

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |



From j.her at t-online.de  Tue May  7 12:39:00 2002
From: j.her at t-online.de (Juergen Hermann)
Date: Tue, 07 May 2002 18:39:00 +0200
Subject: [Twisted-Python] win32 event loop
In-Reply-To: <20020507004843.GA19302@ritsuko.xware.cx>
Message-ID: <1757z4-1sTJM8C@fwd10.sul.t-online.com>

On Tue, 7 May 2002 10:48:43 +1000, Andrew Bennetts wrote:

> No idea what Apache 2 does.

AFAIK, Apache 2 provides a mixed process / thread model on (nearly?)
all platforms. By tweaking the config, you can make pure models in both
directions, or change the ratio threads/process.
Ciao, J?rgen





From twisted at itamarst.org  Wed May  8 08:36:55 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 08 May 2002 15:36:55 +0300
Subject: [Twisted-Python] XWT
Message-ID: <3CD91BE7.1020904@itamarst.org>

Hi,

I discovered XWT yesterday, and *wow*. This is very similar to something 
I've wanted to do, and it's very very cool.

Now, the thing is, my vision was slightly different - XWT seems to use the 
web model (XML-RPC and SOAP), where you send a request and get a reply, but 
there's no way for server to send data to client. A browser is of course 
limited to this because of HTTP, but in this case you don't need to limit 
yourself.

Why is this a limitation? Consider a chat application. In the XML-RPC model, 
you would need to continously poll the server for new messages - and if you 
want low latency, you need to send even more requests per second. This is 
very inefficent and puts a large load on the server.

What I was thinking of therefore was to use a protocol that is two-way, 
allowing the server to send commands to the client asynchronously. These 
would basically be GUI events just as you would from, say, Javascript. For 
example, in a chat application, a new message would result in the server 
sending a "add new text to message display wdiget" command being sent to the 
client, without the client having to request it.

In addition for event driven client-server applications, using such a 
protocol would also allow building P2P apps that use XWT.

My protocol of choice would be PB, which is a remote object protocol 
developed for the Twisted server framework 
(http://www.twistedmatrix.com/products/spread). It has implementation in 
Python, and a Java implementation I wrote 
(http://itamarst.org/software/TwistedJava-0.5.tar.gz). PB is very efficient, 
asynchronous, and two-way (for example, encoding an array containing a short 
string and two integers will take 150 bytes in XML-RPC, and 20 in PB). It 
was designed for chat systems, massive multiplayer games and other systems 
where latency must be kept at a minimum.

Given the time I would build such a system - a two-way version of XWT - 
using Twisted as a server and PB as the protocol. I don't really have the 
time for this right now :) However, some day I probably will, and it'd be 
great if I could reuse the XWT code, since most of the code for what I'm 
envisioning is basically identical.

I would therefore be very grateful if your design kept such a future 
requirement in mind. I'd be even happier if you'd decide to support PB as 
well, but I'd guess that's less likely to happen ;)

Anyway - great work!




From arashi1 at pd.jaring.my  Thu May  9 09:03:21 2002
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Thu, 9 May 2002 21:03:21 +0800
Subject: [Twisted-Python] XWT
In-Reply-To: <3CD91BE7.1020904@itamarst.org>
References: <3CD91BE7.1020904@itamarst.org>
Message-ID: <200205092103.22058.arashi1@pd.jaring.my>

> I discovered XWT yesterday, and *wow*. This is very similar to something
> I've wanted to do, and it's very very cool.

I think a lot of folks have thought about "adderssing" the inability of 
web-browsers to "accept" incoming messages from a server. Simply that there 
isn't a particular port that a browser would listen to. This sucks as far as 
p2p networking is concerned.

Currently, there are 3 approaches I know of. 

One is the signed applet (as in XWT) method - this requires java (on small 
devices? I doubt it) and also applet signing to enable the applet to open and 
listen on a specific port.

Second is the Javascript LiveConnect  - to serverside javascript method as 
implemented by Netscape. I think this also involves some signing - check the 
javascript docs on the net (somewhere). Incidentally, javascript<->java 
applet<->server is also done via a signed java applet.

Third is the "experimental" http header mimetype: multipart/x-mixed-replace
This method is aka "server push". Konqueror has an experimental add-on called 
"kmultipart" for this. Apparently, the old netscape had it. Not sure about 
mozilla.

This shell script illustrates the thing - cgi-way.
#!/bin/sh
echo "HTTP/1.0 200"
echo "Content-type: multipart/x-mixed-replace;boundary=---ThisRandomString---"
echo ""
echo "---ThisRandomString---"
while true
do
echo "Content-type: text/html"
echo ""
echo "<h2>Processes on this machine updated every 5 seconds</h2>"
echo "time: "
date
echo "<p>"
echo "<plaintext>"
ps -el
echo "---ThisRandomString---"
sleep 5
done

This of  course needs browser support. In fact, all of the above needs browser 
support.

As you can see, it's all a lot of dirty hacks. What we really need is a 
standardised, _secure_ way of doing real p2p communication between client and 
server. Which really makes client and server very similar (oh ya, that's why 
it's called p2p...duh). This should then be implemented by _all_ browsers. I 
still find it strange that we don't have this yet...

>
> Why is this a limitation? Consider a chat application. In the XML-RPC
> model, you would need to continously poll the server for new messages - and
> if you want low latency, you need to send even more requests per second.
> This is very inefficent and puts a large load on the server.

That's why we need a better way. :-(

> What I was thinking of therefore was to use a protocol that is two-way,
> allowing the server to send commands to the client asynchronously. These
> would basically be GUI events just as you would from, say, Javascript. For
> example, in a chat application, a new message would result in the server
> sending a "add new text to message display wdiget" command being sent to
> the client, without the client having to request it.
>
> In addition for event driven client-server applications, using such a
> protocol would also allow building P2P apps that use XWT.

I don't think we want to use XWT. It'll only add yet another dependency to the 
"dependency hell".

> My protocol of choice would be PB, which is a remote object protocol
> developed for the Twisted server framework
> (http://www.twistedmatrix.com/products/spread). It has implementation in
> Python, and a Java implementation I wrote
> (http://itamarst.org/software/TwistedJava-0.5.tar.gz). PB is very
> efficient, asynchronous, and two-way (for example, encoding an array
> containing a short string and two integers will take 150 bytes in XML-RPC,
> and 20 in PB). It was designed for chat systems, massive multiplayer games
> and other systems where latency must be kept at a minimum.

I think PB would be great..but what about security concerns?

Right now, you could write a signed java applet (in jython!? :-)) to do this 
very thing - a PB "communicator" on the browser end. I could be wrong but I 
don't think you really need XVT at all.

But then...we have the same crap thing of needing java. Have you seen how huge 
the latest JRE is? It's larger than a mozilla download! I think a better 
approach is to write a mozilla plugin. At least then you would have all the 
important platforms covered. This plugin would be smaller, I think.

Of course...we could create our own _strict_ XML based browser in python and 
wxpython or tkinter (erm...yeah)  - deal with only strict xhtml so we can use 
a generic xml parser. Of course then you need to think about layout and so 
on...

Anyway, my 2 cents.
-- 
Regards,
Mukhsein Johari



From dp at ulaluma.com  Thu May  9 12:44:31 2002
From: dp at ulaluma.com (Donovan Preston)
Date: Thu, 9 May 2002 09:44:31 -0700
Subject: [Twisted-Python] Two-Way Web
In-Reply-To: <200205092103.22058.arashi1@pd.jaring.my>
Message-ID: <097FF0E8-636C-11D6-9620-003065B25CAA@ulaluma.com>

Two-Way Web is the idea that the server should be able to "push" data to 
a web browser as long as that web browser is open. Along with Mukhsein, 
I too cannot fathom why the big browser giants never implemented 
anything like this. I suppose Netscape thought they were doing it with 
Java and LiveConnect, but Java takes far too long to initialize and is 
far too big for it to be a viable option for me.

Mukhsein has covered most of the bases when it comes to Java options, 
and I was not aware of multipart/x-mixed-replace which might be an 
interesting idea if it can work cross-browser, but there are a couple 
more options I'll bring up. None are particularly satisfying, but 
neither are the Java options. Of course, the "build your own rich 
desktop web-browser replacement" idea is the ideal, but while it is an 
attractive idea I don't see it gaining as wide an audience as a 
relatively pure web solution would.

First, there's KnowNow, who have implemented a Frame-based, 
JavaScript-based event router system. There are three frames, the main 
frame, and two invisible communications frames, one "in" and one "out". 
The "in" frame must be kept alive somehow by simply never closing the 
document, but continuously sending JavaScript upon events occurring on 
the server. The "out" frame is controlled by the main page's JavaScript 
and is manipulated in response to button clicks and typing to cause a 
POST to the server with some updated data.

Then, there's my "Extremely lightweight Flash 5 movie which opens a 
persistent connection to the Twisted server" idea. I had this idea over 
a year ago when Flash 5 first came out, and added support for a 
persistent socket connection to a server. I have reimplemented my 
original proof-of-concept using Twisted as the server the movie connects 
to, and I'll be toying with coming up with an architecture within 
Twisted and within the Flash movie that will allow real-time 
communication both ways, probably involving LiveConnect between the 
Flash Plugin and the JavaScript engine in the browser.

I know none of these ideas are ideal, but to me it's mostly about 
exploring what is possible in the most lightweight, non-intrusive 
manner. To me, it's about proving that something can be done a 
particular way before committing to writing a large amount of code to 
support the system.

Ultimately, I would like to understand a little more about how the 
existing PB infrastructure could be leveraged in a system like this, and 
hopefully we can come up with a single back-end API and message flow 
strategy that could be used with multiple front-ends.

Thoughts?

Donovan




From liiwi at iki.fi  Fri May 10 19:02:37 2002
From: liiwi at iki.fi (Jaakko Niemi)
Date: 11 May 2002 02:02:37 +0300
Subject: [Twisted-Python] a patch
Message-ID: <87sn4zzjw2.fsf@jumper.lonesom.pp.fi>

A non-text attachment was scrubbed...
Name: webwidgets.shutup.patch
Type: text/x-patch
Size: 1194 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020511/fb848e4c/attachment.bin 

From dp at twistedmatrix.com  Sat May 11 01:29:46 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 10 May 2002 22:29:46 -0700
Subject: [Twisted-Python] Deferred support in DOMTemplate
Message-ID: <1B399628-64A0-11D6-8841-00039376B1AE@twistedmatrix.com>

Hello everyone

A while back glyph suggested I add Deferred support to DOMTemplate. If a 
specific node handler wanted to defer it's return value, it would create 
a deferred and return it. He also requested a simple example of using 
it. I thought it might be interesting to more people than just glyph, so 
here it is.

This will only work with the latest CVS.

I might explain a couple of things while I am at it:

DOMTemplate is an HTML templating system that uses the DOM (Document 
Object Model) to give Python code an interface for manipulating an HTML 
template. Basically, you register your interest in tags containing 
certain attributes, like a particular class, id, or tag name. Then, 
DOMTemplate crawls the dom looking for matching tags. When one is found, 
your callback is called with an instance of xml.dom.minidom.Node, and 
you are able to create new nodes, move, copy nodes, and delete them. 
Thus, all of the repeat logic is implemented in Python, and no 
templating logic is in the HTML at all -- merely attributes on tags that 
hook them up with Python methods.

An rpy is a Resource-generating python file. If you place an rpy in a 
twisted.web.static tree, the rpy handler will execute the file and look 
in the resulting namespace for an item named "resource". This gives you 
a quick and easy way to deploy new applications into an already-running 
web server. It is also great for debugging, because the file will be 
reloaded each time you hit it.

Hope this is enlightening!

Donovan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: DeferredUsingPage.rpy
Type: application/applefile
Size: 475 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020510/ce283116/attachment.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: DeferredUsingPage.rpy
Type: application/text
Size: 911 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020510/ce283116/attachment-0001.bin 

From carmstro at twistedmatrix.com  Sat May 11 05:23:42 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 11 May 2002 05:23:42 -0400
Subject: [Twisted-Python] Deferred support in DOMTemplate
In-Reply-To: <1B399628-64A0-11D6-8841-00039376B1AE@twistedmatrix.com>
References: <1B399628-64A0-11D6-8841-00039376B1AE@twistedmatrix.com>
Message-ID: <1021109023.1018.4.camel@radii>

On Sat, 2002-05-11 at 01:29, Donovan Preston wrote:
> Hope this is enlightening!

I see that you separated DOMTemplate from the part that relies on the
--path-based web server -- thanks for doing this. As you've probably
seen me say before, I believe that all library code should be flexible
in which ways it can be used, while App-specific code can rely on stuff
like the filesystem. But I'm being long-winded. Thanks. :-)

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From andrew-twistedcommits at puzzling.org  Sat May 11 07:08:44 2002
From: andrew-twistedcommits at puzzling.org (Andrew Bennetts)
Date: Sat, 11 May 2002 21:08:44 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Expanded defer.html to explain Deferreds in a little more detail.
In-Reply-To: <E176U7u-0006GB-00@zaibach.twistedmatrix.com>
References: <E176U7u-0006GB-00@zaibach.twistedmatrix.com>
Message-ID: <20020511110843.GA1333@frobozz.local>

On Sat, May 11, 2002 at 05:29:22AM -0500, spiv CVS wrote:
> Modified files:
> Twisted/doc/howto/defer.html 1.3 1.4
> 
> Log message:
> Expanded defer.html to explain Deferreds in a little more detail.
> 
> In particular, I've tried to explain the similarities between try/except and
> callback/errback.  Criticism welcome :)
> 
> Incidentally, could someone have a good look at the last bit, where I point
> out the difference between .addCallbacks and .addCallback + .addErrback?  I'd
> like to know if
>    a) I'm describing the current behaviour correctly, and
>    b) If other people consider this behaviour to be confusing too.

Actually, I realised I phrased that question badly.  I meant:
     b) If other people think that the current API docs don't make this
        behaviour clear enough too?

Would anyone mind if I reworked some of the docstrings in defer.py?

-Andrew.




From twisted at itamarst.org  Sun May 12 10:33:06 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 12 May 2002 17:33:06 +0300
Subject: [Twisted-Python] process.py
Message-ID: <3CDE7D22.80106@itamarst.org>

I tried refactoring process.Process to support new API, but I gave up - it 
seems kinda broken, i.e. closes when the process's stdout closes, instead of 
when the subprocess dies. Anyway, someone else should fix it. I will do the 
win32 Process. We probably ought to write a few new tests.

Once we do that, and rename all reactor modules, I think we're go for a new 
release.




From bob at redivi.com  Sun May 12 22:23:05 2002
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 12 May 2002 22:23:05 -0400
Subject: [Twisted-Python] HTTP Header names for stupid clients
In-Reply-To: <3CDE7D22.80106@itamarst.org>
Message-ID: <5B4EFFCD-6618-11D6-AEA4-0003938210D6@redivi.com>

I've seen some poorly written embedded clients bonk out if the 
capitalization of http headers isn't Studly-Caps ..  maybe someone 
should add something like:
name='-'.join(map(string.capitalize,name.split('-')))

to http.Request._sendHeader(name,value)  ?

I mean, you're already capitalizing it higher up the tree (in write).. 
but string.capitalize only does the first char, not the first char after 
the hyphen.  Also, you're sending 'Transfer-encoding' not 
'Transfer-Encoding' as one might expect.

I don't know, it's totally bad form for the clients to be that stupid, 
but it's something to consider.

-bob




From andrew-twisted at puzzling.org  Mon May 13 00:33:38 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 13 May 2002 14:33:38 +1000
Subject: [Twisted-Python] HTTP Header names for stupid clients
In-Reply-To: <5B4EFFCD-6618-11D6-AEA4-0003938210D6@redivi.com>
References: <3CDE7D22.80106@itamarst.org> <5B4EFFCD-6618-11D6-AEA4-0003938210D6@redivi.com>
Message-ID: <20020513043338.GB31338@ritsuko.xware.cx>

On Sun, May 12, 2002 at 10:23:05PM -0400, Bob Ippolito wrote:
> 
> I don't know, it's totally bad form for the clients to be that stupid, 
> but it's something to consider.

No, I think you're right... RFCs usually advocate a "be lenient in what
you accept, and strict in what you send" policy.  That's the way to
maximise interoperability, and I think it's sound advice.

On the other hand, I'm not familiar enough with twisted.protocols.http
to say how easy it is to fix this :)

-Andrew.




From bob at redivi.com  Mon May 13 00:55:05 2002
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 13 May 2002 00:55:05 -0400
Subject: [Twisted-Python] HTTP Header names for stupid clients
In-Reply-To: <20020513043338.GB31338@ritsuko.xware.cx>
Message-ID: <976E5BC4-662D-11D6-AEA4-0003938210D6@redivi.com>

Well, that one line I posted *is* the fix (provided it goes in the right 
place).. actually

On Monday, May 13, 2002, at 12:33 AM, Andrew Bennetts wrote:

> On Sun, May 12, 2002 at 10:23:05PM -0400, Bob Ippolito wrote:
>>
>> I don't know, it's totally bad form for the clients to be that stupid,
>> but it's something to consider.
>
> No, I think you're right... RFCs usually advocate a "be lenient in what
> you accept, and strict in what you send" policy.  That's the way to
> maximise interoperability, and I think it's sound advice.
>
> On the other hand, I'm not familiar enough with twisted.protocols.http
> to say how easy it is to fix this :)




From andrew-twisted at puzzling.org  Mon May 13 01:26:17 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 13 May 2002 15:26:17 +1000
Subject: [Twisted-Python] HTTP Header names for stupid clients
In-Reply-To: <976E5BC4-662D-11D6-AEA4-0003938210D6@redivi.com>
References: <20020513043338.GB31338@ritsuko.xware.cx> <976E5BC4-662D-11D6-AEA4-0003938210D6@redivi.com>
Message-ID: <20020513052617.GA32386@ritsuko.xware.cx>

On Mon, May 13, 2002 at 12:55:05AM -0400, Bob Ippolito wrote:
> Well, that one line I posted *is* the fix (provided it goes in the right 
> place).. actually

The right place can be a tricky thing... :)

-Andrew.




From carmstro at twistedmatrix.com  Tue May 14 22:21:11 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 14 May 2002 22:21:11 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] changed reactor module names
In-Reply-To: <E177eYy-0006gu-00@zaibach.twistedmatrix.com>
References: <E177eYy-0006gu-00@zaibach.twistedmatrix.com>
Message-ID: <1021429274.8234.0.camel@radii>

Isn't it about time we broke all the reactors off into a separate
subpackage of twisted.internet?

On Tue, 2002-05-14 at 11:50, itamarst CVS wrote:
> Modified files:
> Twisted/twisted/internet/gtkreactor.py None 1.1
> Twisted/twisted/internet/javareactor.py None 1.1
> Twisted/twisted/internet/pollreactor.py None 1.1
> Twisted/twisted/internet/qtreactor.py None 1.1
> Twisted/twisted/internet/tksupport.py None 1.1
> Twisted/twisted/internet/win32eventreactor.py None 1.1
> Twisted/twisted/internet/wxsupport.py None 1.1
-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Wed May 15 01:42:12 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 15 May 2002 00:42:12 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] changed reactor module
 names
In-Reply-To: <1021429274.8234.0.camel@radii>
References: <E177eYy-0006gu-00@zaibach.twistedmatrix.com>
	<1021429274.8234.0.camel@radii>
Message-ID: <20020515.004212.115903932.glyph@twistedmatrix.com>


From: Christopher Armstrong <carmstro at twistedmatrix.com>
Subject: [Twisted-Python] Re: [Twisted-commits] changed reactor module names
Date: 14 May 2002 22:21:11 -0400

> Isn't it about time we broke all the reactors off into a separate
> subpackage of twisted.internet?

Since that's really all that twisted.internet does, I don't think that it makes
sense to do so.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020515/43f90481/attachment.pgp 

From carmstro at twistedmatrix.com  Wed May 15 13:10:00 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 15 May 2002 13:10:00 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the makeidentity test was FAILING,
 and we never noticed, cause Deferred catches exceptions in errback (this
 fixes failure, not the Deferred issue)
In-Reply-To: <E1781js-0007k9-00@zaibach.twistedmatrix.com>
References: <E1781js-0007k9-00@zaibach.twistedmatrix.com>
Message-ID: <1021482602.11320.3.camel@radii>

So, we need two things for tests:
 1) a single reactor that all tests are run in
 2) an errback that we can attach to deferreds to make PyUnit show the
    error (no idea how to do this one)

On Wed, 2002-05-15 at 12:34, itamarst CVS wrote:
> Modified files:
> Twisted/twisted/test/test_cred.py 1.5 1.6
> 
> Log message:
> aaaaargh. the makeidentity test was FAILING, and we never noticed, 
> cause Deferred catches exceptions in errback (this fixes failure, not
> the Deferred issue)

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Wed May 15 18:08:41 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 15 May 2002 17:08:41 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the
 makeidentity test was FAILING, and we never noticed, cause Deferred
 catches exceptions in errback (this fixes failure, not the Deferred issue)
In-Reply-To: <1021482602.11320.3.camel@radii>
References: <E1781js-0007k9-00@zaibach.twistedmatrix.com>
	<1021482602.11320.3.camel@radii>
Message-ID: <20020515.170841.41631938.glyph@twistedmatrix.com>


From: Christopher Armstrong <carmstro at twistedmatrix.com>
Date: 15 May 2002 13:10:00 -0400

> So, we need two things for tests:
>  1) a single reactor that all tests are run in
>  2) an errback that we can attach to deferreds to make PyUnit show the
>     error (no idea how to do this one)

I think that we need a test harness other than PyUnit for running the tests,
really -- both to make it easier to run only one specific test, and to support
event-based tests or ones which can time out.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020515/2b03a34e/attachment.pgp 

From andrew-twisted at puzzling.org  Wed May 15 19:39:10 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 16 May 2002 09:39:10 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the makeidentity test was FAILING, and we never noticed, cause Deferred catches exceptions in errback (this fixes failure, not the Deferred issue)
In-Reply-To: <20020515.170841.41631938.glyph@twistedmatrix.com>
References: <E1781js-0007k9-00@zaibach.twistedmatrix.com> <1021482602.11320.3.camel@radii> <20020515.170841.41631938.glyph@twistedmatrix.com>
Message-ID: <20020515233910.GA739@frobozz.local>

On Wed, May 15, 2002 at 05:08:41PM -0500, Glyph Lefkowitz wrote:
> 
> From: Christopher Armstrong <carmstro at twistedmatrix.com>
> Date: 15 May 2002 13:10:00 -0400
> 
> > So, we need two things for tests:
> >  1) a single reactor that all tests are run in
> >  2) an errback that we can attach to deferreds to make PyUnit show the
> >     error (no idea how to do this one)
> 
> I think that we need a test harness other than PyUnit for running the tests,
> really -- both to make it easier to run only one specific test, and to support
> event-based tests or ones which can time out.

The timeout problem would be less of an issue if Deferreds had that .timeout
method I proposed a while back...

...I guess I should stop whining and just implement it, huh? :)

-Andrew.




From glyph at twistedmatrix.com  Wed May 15 19:43:54 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 15 May 2002 18:43:54 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the
 makeidentity test was FAILING, and we never noticed, cause Deferred
 catches exceptions in errback (this fixes failure, not the Deferred issue)
In-Reply-To: <20020515233910.GA739@frobozz.local>
References: <1021482602.11320.3.camel@radii>
	<20020515.170841.41631938.glyph@twistedmatrix.com>
	<20020515233910.GA739@frobozz.local>
Message-ID: <20020515.184354.11626695.glyph@twistedmatrix.com>


From: Andrew Bennetts <andrew-twisted at puzzling.org>
Date: Thu, 16 May 2002 09:39:10 +1000

> On Wed, May 15, 2002 at 05:08:41PM -0500, Glyph Lefkowitz wrote:
> The timeout problem would be less of an issue if Deferreds had that .timeout
> method I proposed a while back...
> 
> ...I guess I should stop whining and just implement it, huh? :)

That might be problematic just in terms of dependencies (it already imports
twisted.internet.task, though it shouldn't...).  reactor.callLater(timeout,
deferred.[err|call]back) seems pretty straightforward to me.

Although, perhaps Deferred ought to be in twisted.internet since it sort of
implicitly depends on the main-loop anyway.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020515/39c7ab84/attachment.pgp 

From twisted at itamarst.org  Thu May 16 06:55:11 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 16 May 2002 13:55:11 +0300
Subject: [Twisted-Python] What we need for next release
Message-ID: <3CE3900F.5010504@itamarst.org>

1. Switch to new Process API, unix and win32, and write tests for it.

2. Switch to new thread dispatching API.

3. Deal with connector issue.

Anything else?

(switching to new APIs internally, docs, etc. can be added as we go along.)




From andrew-twisted at puzzling.org  Thu May 16 12:09:45 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 17 May 2002 02:09:45 +1000
Subject: [Twisted-Python] What we need for next release
In-Reply-To: <3CE3900F.5010504@itamarst.org>
References: <3CE3900F.5010504@itamarst.org>
Message-ID: <20020516160945.GA1764@frobozz.local>

On Thu, May 16, 2002 at 01:55:11PM +0300, Itamar Shtull-Trauring wrote:
> 1. Switch to new Process API, unix and win32, and write tests for it.
> 
> 2. Switch to new thread dispatching API.
> 
> 3. Deal with connector issue.
> 
> Anything else?

I'd like to make test_ftp.py not hang for reactors other than the default...
preferably by fixing the problem, rather than by putting an "if reactor.foo
is poll:" in the tests :)

It seems wrong to release with runtests not working 100%.  I'm working on
fixing it, but it may take a couple of days or more, depending on various
things.

-Andrew.




From andrew-twistedcommits at puzzling.org  Wed May 15 19:41:41 2002
From: andrew-twistedcommits at puzzling.org (Andrew Bennetts)
Date: Thu, 16 May 2002 09:41:41 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the makeidentity test was FAILING, and we never noticed, cause Deferred catches exceptions in errback (this fixes failure, not the Deferred issue)
In-Reply-To: <E1781js-0007k9-00@zaibach.twistedmatrix.com>
References: <E1781js-0007k9-00@zaibach.twistedmatrix.com>
Message-ID: <20020515234141.GB739@frobozz.local>

On Wed, May 15, 2002 at 11:34:56AM -0500, itamarst CVS wrote:
> Modified files:
> Twisted/twisted/test/test_cred.py 1.5 1.6
> 
> Log message:
> aaaaargh. the makeidentity test was FAILING, and we never noticed, cause
> Deferred catches exceptions in errback (this fixes failure, not the
> Deferred issue)

Incidentally, I've got a workaround for the errback problem in test_ftp.py.
It's not pretty, but it works ok.

-Andrew.




From twisted at itamarst.org  Sun May 19 12:10:04 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 19 May 2002 19:10:04 +0300
Subject: [Twisted-Python] What we need for next release
References: <3CE3900F.5010504@itamarst.org>
Message-ID: <3CE7CE5C.9090703@itamarst.org>

> 1. Switch to new Process API, unix and win32, and write tests for it.

I did the win32 and at least part of the testing part - now someone had
better fix process.py so unix uses new APIs.





From twisted at itamarst.org  Mon May 20 06:57:56 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 20 May 2002 13:57:56 +0300
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the makeidentity
 test was FAILING, and we never noticed, cause Deferred catches exceptions
 in errback (this fixes failure, not the Deferred issue)
References: <E1781js-0007k9-00@zaibach.twistedmatrix.com> <20020515234141.GB739@frobozz.local>
Message-ID: <3CE8D6B4.5080706@itamarst.org>

Andrew Bennetts wrote:

> Incidentally, I've got a workaround for the errback problem in test_ftp.py.
> It's not pretty, but it works ok.

I've fixed this the correct way - runtests now replaces log.deferr() so that
exceptions get raised, not logged. This means anywhere that we have:

   try:
       foo()
   except:
       log.deferr()

The exception will be raised, not logged, and this almost certianly includes 
Deferreds.





From glyph at twistedmatrix.com  Mon May 20 19:49:16 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 20 May 2002 18:49:16 -0500 (CDT)
Subject: [Twisted-Python] What we need for next release
In-Reply-To: <3CE3900F.5010504@itamarst.org>
References: <3CE3900F.5010504@itamarst.org>
Message-ID: <20020520.184916.39149551.glyph@twistedmatrix.com>


From: Itamar Shtull-Trauring <twisted at itamarst.org>
Subject: [Twisted-Python] What we need for next release
Date: Thu, 16 May 2002 13:55:11 +0300

> 1. Switch to new Process API, unix and win32, and write tests for it.

Done.  Really.  And it _passes_ the tests, too.

> 2. Switch to new thread dispatching API.

I think I will pick this up next, it shouldn't be _nearly_ as hard as this
other crap.

> 3. Deal with connector issue.

Does anyone else want to handle this?

> Anything else?

I think these are necessary: 

    Start adding __confidence__ (anybody think of a better name for this?)
    attribute to modules / classes / interfaces to indicate how certain we are
    that these are set in stone and will be supported in future versions.  Some
    discussion is necessary to decide what values this attribute might have.

    PB Failures (almost done, from what I hear)

These would be nice:

    Plugin system for twisted.enterprise.row so that DBReflector could
    theoretically work on something other than Postgres.

    Reactors should be loadable by twisted.python.plugin, to allow external
    instrumentation.

    A little more cleanup around Process objects, to be more complete
    wrt. in/out/err distinction.  a kill() method maybe.

And this is blue-sky, but I really think it's necessary for sysadmins:

    Python serialization to XML (DOM), a-la Jelly, with support for creating
    customized nodes, so that there is an easily editable, mostly-readable
    representation of a saved Twisted server.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020520/8a4f1d91/attachment.pgp 

From exarkun at meson.dyndns.org  Tue May 21 23:39:55 2002
From: exarkun at meson.dyndns.org (exarkun at meson.dyndns.org)
Date: Tue, 21 May 2002 23:39:55 -0400 (EDT)
Subject: [Twisted-Python] One time only, I __promise__
Message-ID: <Pine.LNX.4.44.0205212338480.8265-100000@localhost>

<radix> exarkun: subscribe AND POST to TPML
<exarkun> radix: Why?
<radix> exarkun: BECAUSE

Yay Twistardeduldoi.  ttfn.

"There is no reason for any individual to have a computer in their
home."
                -- Ken Olson, President of DEC, World Future Society
                   Convention, 1977
--
 11:38pm up 1 day, 0:17, 0 users, load average: 0.10, 0.19, 0.14




From carmstro at twistedmatrix.com  Wed May 22 00:32:44 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 22 May 2002 00:32:44 -0400
Subject: [Twisted-Python] One time only, I __promise__
In-Reply-To: <Pine.LNX.4.44.0205212338480.8265-100000@localhost>
References: <Pine.LNX.4.44.0205212338480.8265-100000@localhost>
Message-ID: <1022041966.17166.1.camel@radii>

On Tue, 2002-05-21 at 23:39, exarkun at meson.dyndns.org wrote:
> 
> <radix> exarkun: subscribe AND POST to TPML
> <exarkun> radix: Why?
> <radix> exarkun: BECAUSE
> 
> Yay Twistardeduldoi.  ttfn.
> 
> "There is no reason for any individual to have a computer in their
> home."
>                 -- Ken Olson, President of DEC, World Future Society
>                    Convention, 1977
> --
>  11:38pm up 1 day, 0:17, 0 users, load average: 0.10, 0.19, 0.14

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From carmstro at twistedmatrix.com  Wed May 22 00:34:11 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 22 May 2002 00:34:11 -0400
Subject: [Twisted-Python] One time only, I __promise__
In-Reply-To: <1022041966.17166.1.camel@radii>
References: <Pine.LNX.4.44.0205212338480.8265-100000@localhost> 
	<1022041966.17166.1.camel@radii>
Message-ID: <1022042053.17253.0.camel@radii>

ARGH. "Send" is so very close to "X" (delete-window). Sorry about this.

On Wed, 2002-05-22 at 00:32, Christopher Armstrong wrote:
> On Tue, 2002-05-21 at 23:39, exarkun at meson.dyndns.org wrote:
> > 
> > <radix> exarkun: subscribe AND POST to TPML
> > <exarkun> radix: Why?
> > <radix> exarkun: BECAUSE
> > 
> > Yay Twistardeduldoi.  ttfn.
> > 
> > "There is no reason for any individual to have a computer in their
> > home."
> >                 -- Ken Olson, President of DEC, World Future Society
> >                    Convention, 1977
> > --
> >  11:38pm up 1 day, 0:17, 0 users, load average: 0.10, 0.19, 0.14
> 
> -- 
>                                 Chris Armstrong
>                          << radix at twistedmatrix.com >>
>                 http://twistedmatrix.com/users/carmstro.twistd/
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From steve.waterbury at gsfc.nasa.gov  Wed May 22 13:38:31 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Wed, 22 May 2002 13:38:31 -0400
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
Message-ID: <3CEBD797.3530EBC5@gsfc.nasa.gov>

Twisted Gurus,

I'm just starting to experiment with Twisted, and am trying out the 
example in the "Introduction to Twisted Enterprise", slightly modified: 
I have a PostgreSQL database called "test", which has a table called 
"schema", which has columns called "schema_name" and "identification" 
(among others), and the value of schema_name in one row is "pgpdm_schema").  
My script is:
------------------------------------------------------------------------
from twisted.enterprise import adbapi
import sys
class TestDatabase(adbapi.Augmentation):
    def getSchemaByName(self,schemaname):
        sql = """SELECT identification from schema WHERE schema_name = %s"""
        return self.runOperation(sql,schemaname)

def gotSchemaByName(resultlist):
    ident = resultlist[0][0]
    print resultlist
    print "Schema has identifier %s." % ident

# dbpool = adbapi.ConnectionPool("psycopg","test","waterbug","")
dbpool = adbapi.ConnectionPool("pyPgSQL.PgSQL","test","waterbug","")
db = TestDatabase(dbpool)
db.getSchemaByName("pgpdm_schema").addCallbacks(gotSchemaByName, db.operationError).arm()
------------------------------------------------------------------------

I've tested the sql using both psycopg and pyPgSQL in interactive 
sessions, so I know this query should produce an output of 

[['PGPDM-1.0']]

I've tried it with both pyPgSQL and psycopg ... in both cases, the 
output is:
--------------------------------------------------------------------------
[waterbug at beeblebrox twisted]$ python db_test.py 
Enabling Multithreading.
Connecting to database: pyPgSQL.PgSQL ('test', 'waterbug', '') {}
--------------------------------------------------------------------------

Shouldn't the print statements be producing output on stdout?  
(I'm new to callbacks, so I'm sure I've missed something ...)  

TIA!
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html
    "An idiot with a computer is a faster, better idiot." - Rick Julius



From fincher.8 at osu.edu  Wed May 22 15:46:15 2002
From: fincher.8 at osu.edu (Jeremy Fincher)
Date: Wed, 22 May 2002 15:46:15 -0400
Subject: [Twisted-Python] How should this mailing list be used?
Message-ID: <000401c201c9$557a5510$cd636ba4@functor>

I'll be reading a lot of Twisted code in the next while, and will
undoubtedly notice little things that might be optimized or tiny bugs
that could be fixed.  Is it alright if I send mails to this list with
those things?  Is that how I should handle things when I find those
things?
 
(As I mentioned before in the IRC channel, I honestly just don't have
the time to make patches and test them and submit them, but I can
generally find the time to make a note about them somewhere, and it's
been mentioned on the IRC channel (by radix) that here might be the most
appropriate place to do so.)
 
Thanks!
 
Jeremy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020522/885a5379/attachment.htm 

From glyph at twistedmatrix.com  Wed May 22 16:24:40 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 22 May 2002 15:24:40 -0500 (CDT)
Subject: [Twisted-Python] How should this mailing list be used?
In-Reply-To: <000401c201c9$557a5510$cd636ba4@functor>
References: <000401c201c9$557a5510$cd636ba4@functor>
Message-ID: <20020522.152440.88500716.glyph@twistedmatrix.com>

From: Jeremy Fincher <fincher.8 at osu.edu>
Subject: [Twisted-Python] How should this mailing list be used?
Date: Wed, 22 May 2002 15:46:15 -0400

> I'll be reading a lot of Twisted code in the next while, and will
> undoubtedly notice little things that might be optimized or tiny bugs
> that could be fixed.  Is it alright if I send mails to this list with
> those things?  Is that how I should handle things when I find those
> things?

> (As I mentioned before in the IRC channel, I honestly just don't have
> the time to make patches and test them and submit them, but I can
> generally find the time to make a note about them somewhere, and it's
> been mentioned on the IRC channel (by radix) that here might be the most
> appropriate place to do so.)

I do appreciate commentary on the quality of the code you're reading or using
in Twisted.  Small inefficiencies should probably just be ignored; if something
doesn't show up in a profile somewhere, then it's almost certainly not worth
optimizing.

We _do_ have a bugtracker that you could submit bugs to -- 

    http://twistedmatrix.com/users/itamarst.twistd/bugs/

A mention on the list (as the bugtracker still doesn't have e-mail
notification) should probably accompany that.

Be forewarned, though, that anything you perceive to be an "issue" with the
framework might be there by design, or too much trouble to fix.  If you are
going to suggest changes that you have neither the time or inclination to test
the impact of, they could very well be ignored.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020522/aa6a555f/attachment.pgp 

From fincher.8 at osu.edu  Wed May 22 16:59:27 2002
From: fincher.8 at osu.edu (Jeremy Fincher)
Date: Wed, 22 May 2002 16:59:27 -0400
Subject: [Twisted-Python] How should this mailing list be used?
In-Reply-To: <20020522.152440.88500716.glyph@twistedmatrix.com>
Message-ID: <001001c201d3$8f5eff10$cd636ba4@functor>

Well, if it is there by design, and someone would be so kind to explain
what the design is, then I'd learn even more about Twisted than before!
:)

Jeremy

> Be forewarned, though, that anything you perceive to be an "issue"
with
> the
> framework might be there by design, or too much trouble to fix.  If
you
> are
> going to suggest changes that you have neither the time or inclination
to
> test
> the impact of, they could very well be ignored.




From twisted at itamarst.org  Wed May 22 18:31:52 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 23 May 2002 00:31:52 +0200
Subject: [Twisted-Python] How should this mailing list be used?
References: <001001c201d3$8f5eff10$cd636ba4@functor>
Message-ID: <3CEC1C58.4030303@itamarst.org>

Jeremy Fincher wrote:

> Well, if it is there by design, and someone would be so kind to explain
> what the design is, then I'd learn even more about Twisted than before!

Design? Actually, Twisted is the result of a series of random mutations, 
driven by a bunch of d20 dice glyph has lying around in his basement. 
Usually he has his pet hamster radix roll them.




From glyph at twistedmatrix.com  Wed May 22 18:17:33 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 22 May 2002 17:17:33 -0500 (CDT)
Subject: [Twisted-Python] How should this mailing list be used?
In-Reply-To: <3CEC1C58.4030303@itamarst.org>
References: <001001c201d3$8f5eff10$cd636ba4@functor>
	<3CEC1C58.4030303@itamarst.org>
Message-ID: <20020522.171733.66086005.glyph@twistedmatrix.com>

From: Itamar Shtull-Trauring <twisted at itamarst.org>
Subject: Re: [Twisted-Python] How should this mailing list be used?
Date: Thu, 23 May 2002 00:31:52 +0200

> Jeremy Fincher wrote:
> 
> > Well, if it is there by design, and someone would be so kind to explain
> > what the design is, then I'd learn even more about Twisted than before!
> 
> Design? Actually, Twisted is the result of a series of random mutations, 
> driven by a bunch of d20 dice glyph has lying around in his basement. 
> Usually he has his pet hamster radix roll them.

Don't knock the "design dice".  They're magic!  I got them exchange for my cow
(my last posession at the time) from a guy at Rational who swears they're the
"unwritten final phase" of the Unified Process.  It cost dearly, but now I'm a
real Software Engineer!

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020522/b18e4b2c/attachment.pgp 

From andrew-twisted at puzzling.org  Wed May 22 21:41:47 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 23 May 2002 11:41:47 +1000
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
In-Reply-To: <3CEBD797.3530EBC5@gsfc.nasa.gov>
References: <3CEBD797.3530EBC5@gsfc.nasa.gov>
Message-ID: <20020523014147.GB7731@ritsuko.xware.cx>

On Wed, May 22, 2002 at 01:38:31PM -0400, Steve Waterbury wrote:
> Twisted Gurus,
> 
> I'm just starting to experiment with Twisted, and am trying out the 
> example in the "Introduction to Twisted Enterprise", slightly modified: 

<snip>

Was that your complete script?

If so, it also needs to start the Twisted main-loop:
---
from twisted.internet import main
main.run()
---

[Or for the version in CVS:
from twisted.internet import reactor
reactor.run()
]

The Twisted Enterprise docs should probably be updated to make this
clearer, rather than assuming that people are already familiar with the
Twisted main-loop...

I'd suggest also reading "Writing Twisted Servers".  It's by far the
best general overview of Twisted we have at the moment, even if you
don't intend to write servers with it.

Let us know if you any other problems.

-Andrew.




From steve.waterbury at gsfc.nasa.gov  Thu May 23 11:36:48 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Thu, 23 May 2002 11:36:48 -0400
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
References: <3CEBD797.3530EBC5@gsfc.nasa.gov> <20020523014147.GB7731@ritsuko.xware.cx>
Message-ID: <3CED0C90.4CBEDEA2@gsfc.nasa.gov>

Andrew Bennetts wrote:
> 
> On Wed, May 22, 2002 at 01:38:31PM -0400, Steve Waterbury wrote:
> > Twisted Gurus,
> >
> > I'm just starting to experiment with Twisted, and am trying out the
> > example in the "Introduction to Twisted Enterprise", slightly modified:
> 
> <snip>
> 
> Was that your complete script?

It was.  

> If so, it also needs to start the Twisted main-loop:
> ---
> from twisted.internet import main
> main.run()
> ---

Thanks -- that helped a lot!  :^)

> [Or for the version in CVS:
> from twisted.internet import reactor
> reactor.run()
> ]

Good to hear that "main" got the name-change!

> The Twisted Enterprise docs should probably be updated to make this
> clearer, rather than assuming that people are already familiar with the
> Twisted main-loop...

I might be able to help some with the Twisted Enterprise docs, since 
I hope to use it pretty intensively in our app ... 

> I'd suggest also reading "Writing Twisted Servers".  It's by far the
> best general overview of Twisted we have at the moment, even if you
> don't intend to write servers with it.

I'd read that at least twice, but I guess I hadn't grokked it.  
But now that I know the main loop needs to be run explicitly, 
it makes perfect sense ... how else would I get the result of 
callback?  I'm learning ...

> Let us know if you any other problems.

Right:  I got a traceback that said my "result" was not subscriptable.  
Looking at the code for adbapi.ConnectionPool in Twisted 0.17.4, 
I noticed that the "runOperation" method used in the example ultimately
calls _runOperation, which says it "is used for non-query operations 
that don't want "fetch*" to be called" ... doh!  No wonder my "result" 
was not subscriptable!  ;^)  

So I created a "runQuery" method for adbapi.ConnectionPool:

    def runQuery(self, *args, **kw):
        d = defer.Deferred()
        apply(self.query, (d.callback,d.errback)+args, kw)
        return d

... and now my script works!  (Has adbapi.ConnectionPool been fixed yet 
in the CVS version?)   

Here's the new version of my script (assumes the process owner's 
login name is also a database user):
--------------------------------------------------------------------------
from twisted.internet import main
from twisted.enterprise import adbapi
import sys
class TestDatabase(adbapi.Augmentation):
    def getSchemaByName(self,schemaname):
        sql = """SELECT identification from schema WHERE schema_name = %s"""
        return self.runQuery(sql,schemaname)

def gotSchemaByName(resultlist):
    ident = resultlist[0][0]
    print resultlist
    print "Schema has identifier %s." % ident

dbpool = adbapi.ConnectionPool("pyPgSQL.PgSQL",database="test")
db = TestDatabase(dbpool)

db.getSchemaByName("pgpdm_schema").addCallbacks(gotSchemaByName, db.operationError).arm()
main.run()
--------------------------------------------------------------------------

... with the output:
--------------------------------------------------------------------------
[['PGPDM-1.0']]
Schema has identifier PGPDM-1.0.
--------------------------------------------------------------------------

Thanks for the help!
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html
    "An idiot with a computer is a faster, better idiot." - Rick Julius



From glyph at twistedmatrix.com  Thu May 23 12:18:20 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 23 May 2002 11:18:20 -0500 (CDT)
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
In-Reply-To: <3CED0C90.4CBEDEA2@gsfc.nasa.gov>
References: <3CEBD797.3530EBC5@gsfc.nasa.gov>
	<20020523014147.GB7731@ritsuko.xware.cx>
	<3CED0C90.4CBEDEA2@gsfc.nasa.gov>
Message-ID: <20020523.111820.102581963.glyph@twistedmatrix.com>

From: Steve Waterbury <steve.waterbury at gsfc.nasa.gov>
Subject: Re: [Twisted-Python] Twisted Enterprise (newbie question)
Date: Thu, 23 May 2002 11:36:48 -0400

> So I created a "runQuery" method for adbapi.ConnectionPool:
> 
>     def runQuery(self, *args, **kw):
>         d = defer.Deferred()
>         apply(self.query, (d.callback,d.errback)+args, kw)
>         return d
> 
> ... and now my script works!  (Has adbapi.ConnectionPool been fixed yet 
> in the CVS version?)   

You probably want to be using adbapi.Augmentation; which, curiously enough, has
a method "runQuery" ...

    
    def runQuery(self, *args, **kw):
        d = defer.Deferred()
        apply(self.dbpool.query, (d.callback, d.errback)+args, kw)
        return d


... that looks an awful lot like what you want :-)  This was taken from 

    http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/enterprise/adbapi.py?rev=1.26&content-type=text/vnd.viewcvs-markup&only_with_tag=release-0_17_3&cvsroot=Twisted

which is not the most recent CVS, so it should be in the copy you have.

I guess that division seems fairly arbitrary, but Augmentation is designed to
be an interface to a particular schema, whereas ConnectionPool manages the
database connections.

HTH,

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020523/11719152/attachment.pgp 

From fincher.8 at osu.edu  Thu May 23 14:35:26 2002
From: fincher.8 at osu.edu (Jeremy Fincher)
Date: Thu, 23 May 2002 14:35:26 -0400
Subject: [Twisted-Python] Small bug in code example in doc/howto/time.html
Message-ID: <003a01c20288$9b639e00$cd636ba4@functor>

This:
 
def OnceAMinute:
    """Should be run once a minute."""
    print "a minute has passed"
 
Should be this:
 
def OnceAMinute():
    """Should be run once a minute."""
    print "a minute has passed"
 
Also, a question:  Later on in that code example, there's a
"d.loop(OnceAMinute, 6)" line.  How does d.loop know how to call
OnceAMinute?  Does it just assume that it takes no arguments (and thus,
all functions that would be added there need to take no arguments)?
 
Thanks!
 
Jeremy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020523/c2ee509a/attachment.htm 

From twisted at itamarst.org  Thu May 23 15:40:41 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 23 May 2002 21:40:41 +0200
Subject: [Twisted-Python] Small bug in code example in doc/howto/time.html
References: <003a01c20288$9b639e00$cd636ba4@functor>
Message-ID: <3CED45B9.2030105@itamarst.org>

In CVS there is a new API for scheduling things - see updated version of 
time.html at
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/~checkout~/doc/howto/time.html?rev=1.5&content-type=text/html&cvsroot=Twisted

As you can see, it's a much better API.





From exarkun at meson.dyndns.org  Thu May 23 18:33:32 2002
From: exarkun at meson.dyndns.org (exarkun at meson.dyndns.org)
Date: Thu, 23 May 2002 18:33:32 -0400 (EDT)
Subject: [Twisted-Python] Reality and global Thing tables
Message-ID: <Pine.LNX.4.44.0205231758100.22318-100000@localhost>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


 This is mostly addressed to Glyph, but any feedback is appreciated :)

 From what brief conversations we've had on the topic, my understanding of
the situation is this:  I like to have large global tables, each for a
certain "type" of Thing, that references every instance in the game; an
alternative approach favored by others is for references to only those
objects that will be useful to be kept around locally (locally with
respect to the objects that will find them useful).

 The main argument I've heard against global tables is they use
resources unnecessarily.  A game with a billion Widgets will have an
unreasonably large table, which must apparently be kept entirely in memory
(whereas, with a bit of cleverness, the Widgets themselves can be tossed
onto disk when not needed).  Are there other arguments against using
global tables?

 I don't find this to be convincing for a few reasons.  Firstly (and least
importantly), hardware is cheap and expanding a server to meet the needs
of a game isn't all that unreasonable.  Besides, I'll never have to worry
about it because my game will never become that large or popular ;)
Second, distributing references locally gives us a large performance hit
for certain operations.

Consider the common case of game-wide communication.  This can either be
an inherent ability (think "tell" from most MUDs) or something granted by
a device (the commlinks of SWR).  Either way brings essentially the same
programmatic challenges.  Determine who the message is addressed to and
deliver it.  Using global tables, we can look up a player name (in linear
time) and deliver the message or look up a "device address"  (cellphone
number, frequency ID, whatever floats your boat) and deliver the message
to anyone in close proximity to the Thing.

Contrast this with a system lacking global tables.  To determine who the
message is addressed to, one essentially has to walk through the graph of
the entire game.  Start with your highest level organizational unit
("areas" on most MUDs) and work down to rooms, then room contents
(including players and containers, and containers in containers, etc).  A
very expensive operation that could end up costing many levels of
recursion along with numerous unneeded levels of indirection in the form
of rooms and containers.  Of course, after the first lookup you can cache
the result (and hope it doesn't change in the mean time) obviating the
need for further lookups, but this comes with the problem of eventually
costing as much memory as the global solution (if not more) unless you do
cache management and culling and all sorts of other complexities.  Fun?
No.

 So, am I just missing some clever way to operate without global tables,
or some other disadvantage to keeping them around?  I am as an empty pot,
fill me up.

  Jp (exarkun)


        "I quite agree with you," said the Duchess; "and the moral of
that is -- Be what you would seem to be' -- or, if you'd like it put
more simply -- Never imagine yourself not to be otherwise than what it
might appear to others that what you were or might have been was not
otherwise than what you had been would have appeared to them to be
otherwise.'"       -- Lewis Carrol, "Alice in Wonderland"
- --
 5:58pm up 2 days, 18:37, 0 users, load average: 0.06, 0.07, 0.02
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE87W4/edcO2BJA+4YRAk6UAJ4g7/zFzd6l0rWE05rGI1QZMRhe2QCgzSIO
zElP/O5c7F4d9LJ++3gvpJc=
=HegD
-----END PGP SIGNATURE-----




From steve.waterbury at gsfc.nasa.gov  Thu May 23 13:35:31 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Thu, 23 May 2002 13:35:31 -0400
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
References: <3CEBD797.3530EBC5@gsfc.nasa.gov>
		<20020523014147.GB7731@ritsuko.xware.cx>
		<3CED0C90.4CBEDEA2@gsfc.nasa.gov> <20020523.111820.102581963.glyph@twistedmatrix.com>
Message-ID: <3CED2863.604FF893@gsfc.nasa.gov>

Glyph Lefkowitz wrote:
> 
> From: Steve Waterbury <steve.waterbury at gsfc.nasa.gov>
> Subject: Re: [Twisted-Python] Twisted Enterprise (newbie question)
> Date: Thu, 23 May 2002 11:36:48 -0400
> 
> > So I created a "runQuery" method for adbapi.ConnectionPool:
> >
> >     def runQuery(self, *args, **kw):
> >         d = defer.Deferred()
> >         apply(self.query, (d.callback,d.errback)+args, kw)
> >         return d
> >
> > ... and now my script works!  (Has adbapi.ConnectionPool been fixed yet
> > in the CVS version?)
> 
> You probably want to be using adbapi.Augmentation; which, curiously enough, has
> a method "runQuery" ...
> 
> 
>     def runQuery(self, *args, **kw):
>         d = defer.Deferred()
>         apply(self.dbpool.query, (d.callback, d.errback)+args, kw)
>         return d
> 
> ... that looks an awful lot like what you want :-)  ...

Oops ... I *was* using Augmentation (as did the example):

Steve Waterbury wrote:
> Here's the new version of my script (assumes the process owner's
> login name is also a database user):
> --------------------------------------------------------------------------
> from twisted.internet import main
> from twisted.enterprise import adbapi
> import sys
> class TestDatabase(adbapi.Augmentation):
>     ...

... but when I looked in adbapi, I forgot which one I was looking at!
My script works just fine with the original adbapi ... doh!  
  
So adbapi is okay, but the example in "Introduction to Twisted Enterprise" 
( http://twistedmatrix.com/documents/howto/enterprise ) should be 
corrected, I think:

    class AgeDatabase(adbapi.Augmentation): 
        """A simple example that can retrieve an age from the database""" 
        def getAge(self, name): 
            # Define the query 
            sql = """SELECT Age FROM People WHERE name = ?""" 
            # Run the query, and return a Deferred to the caller to add 
            # callbacks to. 
HERE >>     return self.runOperation(sql, name) 
                        ^^^^^^^^^^^^
....................... should be "runQuery", in order for "resultlist" to work,
and ...

    def gotAge(resultlist, name): 
        """Callback for handling the result of the query""" 
        age = resultlist[0][0]          # First field of first record 
        print "%s is %d years old" % (name, age) 

HERE >>
    db = MyDatabase(dbpool) 
         ^^^^^^^^^^
........ should be "AgeDatabase"
 
    # These will *not* block.  Hooray! 
    db.getAge("Andrew").addCallbacks(gotAge, db.operationError, 
                                     callbackArgs=name).arm() 
    db.getAge("Glyph").addCallbacks(gotAge, db.operationError, 
                                    callbackArgs=name).arm() 

-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html
    "An idiot with a computer is a faster, better idiot." - Rick Julius



From glyph at twistedmatrix.com  Thu May 23 20:15:10 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 23 May 2002 19:15:10 -0500 (CDT)
Subject: [Twisted-Python] Reality and global Thing tables
In-Reply-To: <Pine.LNX.4.44.0205231758100.22318-100000@localhost>
References: <Pine.LNX.4.44.0205231758100.22318-100000@localhost>
Message-ID: <20020523.191510.133290392.glyph@twistedmatrix.com>

This is cross-posted to reality at twistedmatrix.com, where further discussion of
the Reality framework should continue.

    http://twistedmatrix.com/cgi-bin/mailman/listinfo/reality

From: exarkun at meson.dyndns.org
Subject: [Twisted-Python] Reality and global Thing tables
Date: Thu, 23 May 2002 18:33:32 -0400 (EDT)

>  From what brief conversations we've had on the topic, my understanding of
> the situation is this:  I like to have large global tables, each for a
> certain "type" of Thing, that references every instance in the game; an
> alternative approach favored by others is for references to only those
> objects that will be useful to be kept around locally (locally with
> respect to the objects that will find them useful).

>  The main argument I've heard against global tables is they use
> resources unnecessarily.  A game with a billion Widgets will have an
> unreasonably large table, which must apparently be kept entirely in memory
> (whereas, with a bit of cleverness, the Widgets themselves can be tossed
> onto disk when not needed).  Are there other arguments against using
> global tables?

They encourage poor programming practices.  Having coded on more than a few
games that worked this way, I can say with relative certainty that the code
begins to acquire crufty crap like 

    if self.universe.objects[util.REFRIGERATOR_PROTOTYPE_ID].model.maxTemperature < 7:

, which has all kinds of unpleasant implications.  Better not to provide a hook
that encourages people to do this, or to think it's valid.

They create trouble with slow, blocking persistence systems (like an RDBMS, or
a persistence server).  This should be obvious, but it bears mentioning.  Were
you planning on keeping all your objects in memory all the time?

They create a class of problems which need to be solved with them, which
otherwise don't exist.  For example, "global tell", or a system of global
"guild" game-objects which get referred to by all the code, rather than a
data-driven system for describing guilds that's sensibly located in a module
someplace... perhaps merely a symptom of "poor programming practices", you end
up with lots of code that requires objects of specific names/IDs to exist to
work.  This creates a maintenance and set-up nightmare if people ever want to
make a derivative game with a similar world.

>  I don't find this to be convincing for a few reasons.  Firstly (and least
> importantly), hardware is cheap and expanding a server to meet the needs
> of a game isn't all that unreasonable.  Besides, I'll never have to worry
> about it because my game will never become that large or popular ;)
> Second, distributing references locally gives us a large performance hit
> for certain operations.

It becomes impossible to grow the world beyond the confines of a single
machine.  And yes, this *does* happen, for games of any complexity; many
relatively popular MUDs wrestle with hardware scale issues, and I'll bet money
that a really popular one written in Python would definitely need some help in
the scalability department.  For example, the Dikumud FAQ describes the problem
of "machine lag":

    http://www.faqs.org/faqs/games/mud-faq/diku/

> Consider the common case of game-wide communication.  This can either be
> an inherent ability (think "tell" from most MUDs) or something granted by
> a device (the commlinks of SWR).  Either way brings essentially the same
> programmatic challenges.  Determine who the message is addressed to and
> deliver it.  Using global tables, we can look up a player name (in linear
> time) and deliver the message or look up a "device address"  (cellphone
> number, frequency ID, whatever floats your boat) and deliver the message
> to anyone in close proximity to the Thing.

OK; I consider the "common case of game-wide communication" to be an issue of
its own, for several reasons:

    1) it totally breaks immersion in the world

"tell" is not really an interaction between simulation-domain objects, as a
message between two people.  This is better handled by having a *real*
messaging system integrated with your game, rather than a halfassed tack-on
(see (3) below)

    2) it only works with a *very* special class of objects (Players)

Players are far from "common".  Having a global lookup table of all online
players has many advantages; it can be abused if you use it too frequently, and
for the wrong things (I would characterize "tell" as "one of the wrong things",
as explained in (4)).  They also happen to have client objects attached to
them.  Are you communicating with the player or directly with his client?
Also, players have guaranteed unique names pretty much regardless of what other
rules are in your game world; they are the most important kind of Thing, they
are always unique, etc.

    3) it is hard to do right; chat is a problem all its own

On the surface of it, chat is easy.  But once you start talking about
moderation, ban lists, buddy lists, status notification, idle time... the
system can get complex really fast.  Why would you want to pollute your
game-world with all that stuff?  Leave it in the chat service, which should
work considerably differently than a virtual world sim.  Have it maintained by
chat hackers, not game hackers.  If 'tell' in-game is really important between
characters, you can use the chat library as an add-on or mix-in with a
game-based user interface, rather than as a separate service.

    4) you might want it to work between servers -- then, a global table is
       useless

This is a specific example of the general case where being able to look up an
*asynchronous reference to a uniquely named object* is really much more useful
than having a table of everything, everywhere.  The table then becomes an
implementation detail, and you can dispatch to PB's equivalent of DNS in order
to locate the object that you want to be talking to.  This is another problem
which is deceptively simple on the surface of it, but gets more complex as you
manage hierarchies of naming, etc.  This also makes it far less convenient to
just hack in a reference to a global object and makes people think about
failure conditions a bit more.

    5) it only works for people who are "currently online"

Or does it?  Do you have persistent messaging?  Oh ho, that there sounds like a
mail delivery system.  Now you have to interface to a *mail* system, which is
even more fun than chat.  Otherwise, a global table of persistent objects
doesn't make sense, really, 'cause you need to check if the user's online.
What should happen when these lookups fail?  Are tells in some way
transactional?  Can you tell if delivery succeeds?

> Contrast this with a system lacking global tables.  To determine who the
> message is addressed to, one essentially has to walk through the graph of
> the entire game.  Start with your highest level organizational unit
> ("areas" on most MUDs) and work down to rooms, then room contents
> (including players and containers, and containers in containers, etc).  A
> very expensive operation that could end up costing many levels of
> recursion along with numerous unneeded levels of indirection in the form
> of rooms and containers.  Of course, after the first lookup you can cache
> the result (and hope it doesn't change in the mean time) obviating the
> need for further lookups, but this comes with the problem of eventually
> costing as much memory as the global solution (if not more) unless you do
> cache management and culling and all sorts of other complexities.  Fun?
> No.

OK; having an *extremely* slow API which essentially does the same thing as a
global table of references was never advocated as a good idea.  It's the idea
that you should be able to refer to every blade of grass in the world by its
name and synchronously retrieve a reference to it that I object to.  A table is
merely a side-effect of this requirement.

>  So, am I just missing some clever way to operate without global tables,
> or some other disadvantage to keeping them around?  I am as an empty pot,
> fill me up.

Make URI-based "tables" that refer to objects that might be local or remote,
and have a restricted set of operations that can be performed on them,
asynchronously only.

I have to get going for a dinner engagement now, but if you think I'm not
totally on crack, I can describe this in more detail later.  Send a link to
your PGP public key, while you're at it :)


-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |



From andrew-twisted at puzzling.org  Thu May 23 21:30:08 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 24 May 2002 11:30:08 +1000
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
In-Reply-To: <3CED2863.604FF893@gsfc.nasa.gov>
References: <3CEBD797.3530EBC5@gsfc.nasa.gov> <20020523014147.GB7731@ritsuko.xware.cx> <3CED0C90.4CBEDEA2@gsfc.nasa.gov> <20020523.111820.102581963.glyph@twistedmatrix.com> <3CED2863.604FF893@gsfc.nasa.gov>
Message-ID: <20020524013008.GA479@frobozz.local>

On Thu, May 23, 2002 at 01:35:31PM -0400, Steve Waterbury wrote:
> So adbapi is okay, but the example in "Introduction to Twisted Enterprise" 
> ( http://twistedmatrix.com/documents/howto/enterprise ) should be 
> corrected, I think:

Oops!  That's my fault (I wrote that doc).  It's updated in current CVS; the
updated doc should appear on the website with the next release.

Thanks!

-Andrew.




From ecn at metaslash.com  Sun May 26 16:39:41 2002
From: ecn at metaslash.com (Eric C. Newton)
Date: Sun, 26 May 2002 16:39:41 -0400
Subject: [Twisted-Python] adding a new connection type
Message-ID: <20020526163941.A6199@ecn>

I want to add a new kind of connection to Twisted.  I have wrapped up
the API for this connection with an interface very similar to the
socket object interface.  It supports fileno(), bind(), connect(),
listen(), accept(), send(), recv(), and of course, setblocking().

One interface difference is that the address type is just a string.

Another subtle difference is that connect() calls should always bind
to a local address before connecting.

I'm new to Twisted, but I have extensive experience in ACE.

I could use a clue on where I should start.

-Eric







From twisted at itamarst.org  Sun May 26 18:20:13 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 27 May 2002 00:20:13 +0200
Subject: [Twisted-Python] adding a new connection type
References: <20020526163941.A6199@ecn>
Message-ID: <3CF15F9D.3080208@itamarst.org>

Eric C. Newton wrote:

> I want to add a new kind of connection to Twisted.  I have wrapped up
> the API for this connection with an interface very similar to the
> socket object interface.  It supports fileno(), bind(), connect(),
> listen(), accept(), send(), recv(), and of course, setblocking().

Well, first of all, what does it run over? And in what language is it 
written? And, what is it good for?

It sounds like you could implement it in a similar way to the ssl stuff 
in twisted.internet.ssl. It wouldn't be in the reactor API, but you 
could still use it directly with POSIX reactors (select, poll, gtk, qt).

I recommend getting CVS version (or new release which will be out Real 
Soon Now) and looking at how the SSL code hooks in - or you may write it 
from scratch based on the way tcp.py works if the differences are 
non-trivial.




From dr at soniq.net  Sun May 26 12:31:51 2002
From: dr at soniq.net (David Rufino)
Date: Sun, 26 May 2002 18:31:51 +0200
Subject: [Twisted-Python] runtest
Message-ID: <20020526163151.GA15681@soniq.net>

Hello!

Here are my runtest logs from FreeBSD 4.6-PRERELEASE running python 2.1,
with cvs from today

======================================================================
ERROR: testBasicIdentity (twisted.test.test_persisted.MarmaladeTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_persisted.py", line 219, in testBasicIdentity
    uj = marmalade.unjellyFromXML(marmalade.jellyToXML([l, l]))
  File "/usr/local/lib/python2.1/site-packages/twisted/persisted/marmalade.py", line 380, in unjellyFromXML
    document = parseString(stringOrFile)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 915, in parseString
    return _doparse(pulldom.parseString, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 901, in _doparse
    events = apply(func, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/pulldom.py", line 301, in parseString
    parser = xml.sax.make_parser()
  File "/usr/local/lib/python2.1/xml/sax/__init__.py", line 88, in make_parser
    raise SAXReaderNotAvailable("No parsers found", None)
SAXReaderNotAvailable: No parsers found
======================================================================
ERROR: testMarmaladeable (twisted.test.test_persisted.MarmaladeTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_persisted.py", line 188, in testMarmaladeable
    u = marmalade.unjellyFromXML(s)
  File "/usr/local/lib/python2.1/site-packages/twisted/persisted/marmalade.py", line 380, in unjellyFromXML
    document = parseString(stringOrFile)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 915, in parseString
    return _doparse(pulldom.parseString, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 901, in _doparse
    events = apply(func, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/pulldom.py", line 301, in parseString
    parser = xml.sax.make_parser()
  File "/usr/local/lib/python2.1/xml/sax/__init__.py", line 76, in make_parser
    return _create_parser(parser_name)
  File "/usr/local/lib/python2.1/xml/sax/__init__.py", line 101, in _create_parser
    return drv_module.create_parser()
AttributeError: 'xml.sax.expatreader' module has no attribute 'create_parser'
======================================================================
ERROR: testMethodSelfIdentity (twisted.test.test_persisted.MarmaladeTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_persisted.py", line 201, in testMethodSelfIdentity
    im_ = marmalade.unjellyFromXML(marmalade.jellyToXML(b)).a.bmethod
  File "/usr/local/lib/python2.1/site-packages/twisted/persisted/marmalade.py", line 380, in unjellyFromXML
    document = parseString(stringOrFile)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 915, in parseString
    return _doparse(pulldom.parseString, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 901, in _doparse
    events = apply(func, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/pulldom.py", line 301, in parseString
    parser = xml.sax.make_parser()
  File "/usr/local/lib/python2.1/xml/sax/__init__.py", line 76, in make_parser
    return _create_parser(parser_name)
  File "/usr/local/lib/python2.1/xml/sax/__init__.py", line 101, in _create_parser
    return drv_module.create_parser()
AttributeError: 'xml.sax.expatreader' module has no attribute 'create_parser'
----------------------------------------------------------------------
Ran 272 tests in 20.532s

FAILED (errors=3)

The following test modules had errors when loading:

* test_nntp:
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_all.py", line 76, in loadTestsFromMyPackage
    locals(), globals(), [name])
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_nntp.py", line 19, in ?
    from twisted.news import news, database
ImportError: No module named news

The following test modules had errors when loading:

* test_nntp:
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_all.py", line 76, in loadTestsFromMyPackage
    locals(), globals(), [name])
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_nntp.py", line 19, in ?
    from twisted.news import news, database
ImportError: No module named news

The following test modules had errors when loading:

* test_nntp:
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_all.py", line 76, in loadTestsFromMyPackage
    locals(), globals(), [name])
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_nntp.py", line 19, in ?
    from twisted.news import news, database
ImportError: No module named news

Cheers




From carmstro at twistedmatrix.com  Sun May 26 19:13:31 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 26 May 2002 19:13:31 -0400
Subject: [Twisted-Python] runtest
In-Reply-To: <20020526163151.GA15681@soniq.net>
References: <20020526163151.GA15681@soniq.net>
Message-ID: <1022454822.21975.2.camel@radii>

On Sun, 2002-05-26 at 12:31, David Rufino wrote:
> Hello!
> 
> Here are my runtest logs from FreeBSD 4.6-PRERELEASE running python 2.1,
> with cvs from today

[snip XML errors...]

You don't have the XML packages for Python installed. Twisted depends on
them.

[snip NNTP errors...]
 
> ImportError: No module named news

Could you check to see if you have a twisted/news/news.py file?

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Sun May 26 19:43:18 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 26 May 2002 18:43:18 -0500 (CDT)
Subject: [Twisted-Python] runtest
In-Reply-To: <1022454822.21975.2.camel@radii>
References: <20020526163151.GA15681@soniq.net>
	<1022454822.21975.2.camel@radii>
Message-ID: <20020526.184318.94888788.glyph@twistedmatrix.com>

From: Christopher Armstrong <carmstro at twistedmatrix.com>
Subject: Re: [Twisted-Python] runtest
Date: 26 May 2002 19:13:31 -0400

> On Sun, 2002-05-26 at 12:31, David Rufino wrote:
> > Hello!
> > 
> > Here are my runtest logs from FreeBSD 4.6-PRERELEASE running python 2.1,
> > with cvs from today
> 
> [snip XML errors...]
> 
> You don't have the XML packages for Python installed. Twisted depends on
> them.

This dependency should probably be optional, though... I'll look into it.


-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020526/72d543da/attachment.pgp 

From ecn at metaslash.com  Sun May 26 22:30:45 2002
From: ecn at metaslash.com (Eric C. Newton)
Date: Sun, 26 May 2002 22:30:45 -0400
Subject: [Twisted-Python] adding a new connection type
Message-ID: <20020526223045.A11367@ecn>

Itamar Shtull-Trauring <twisted at itamarst.org> writes:
> Well, first of all, what does it run over?  

X.25.  Be afraid.

> And in what languages is it written?  

It runs in Python of course.

> And, what is it good for?

X.25 is an international standard for wide area communications widely
adopted by companies in the 1970's and early 80's using
packet-oriented, synchronous serial communications devices.

I'm using Linux, and playing with 2-year-old patches for version 2.4
of the kernel which enables me to play with the API over a loopback
device.

Sometimes it even works.

The linux X.25 API is broadly based upon BSD sockets.  Unfortunately,
the python sockets module only really supports INET and UNIX domain
addresses.  I've written my own C module to provide an alternative
interface because doing X.25 is just so much fun.

I've managed to get past all the Twisted (.tap) stuff and I've got the
process accepting these faux X.25 connections and data is flying back
and forth.  I subclassed from the tcp.Port class, and re-wrote the
startListening() method.  I haven't tried the client side of
things yet.

Among other things, I needed to add a shutdown() method, which socket
provides and Twisted seems to need.

-Eric




From twisted at itamarst.org  Mon May 27 04:30:36 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 27 May 2002 10:30:36 +0200
Subject: [Twisted-Python] adding a new connection type
References: <20020526223045.A11367@ecn>
Message-ID: <3CF1EEAC.4090005@itamarst.org>

Eric C. Newton wrote:

> Among other things, I needed to add a shutdown() method, which socket
> provides and Twisted seems to need.

What shutdown(2) does as opposed to close() is close the socket 
immediately, instead of just lowering the refcount for the socket. This 
was a workaround for an issue in Win32 process running, and is therefore 
not relevant to you. Feel free to override this method and use 
sock.close() instead of shutdown(2) in your class.





From andrew-twisted at puzzling.org  Mon May 27 05:46:47 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 27 May 2002 19:46:47 +1000
Subject: [Twisted-Python] Twisted.bugs ate my balls!
Message-ID: <20020527094647.GA733@frobozz.local>

libpq.OperationalError: ERROR: value too long for type character varying(16)
...
("INSERT INTO bugs_items\n (submittor_name, submittor_email, assigned,
date_submitted, date_modified,\n version, os, security, type, status,
summary, description) VALUES\n (%s, %s, NULL, now(), now(), %s, %s, %s, %s,
'open', %s, %s)\n ", 'Andrew Bennetts', 'andrew-twistedbugs at puzzling.org',
'0.18.0-prerelease', 'Win32', 'f', 'normal', 'connectionFailed might not get
called', 'On Win32, connecting to a closed port doesn\'t fail immediately,
but instead only calls connectionFailed after timing out. However, timeouts
are optional, so it is possible it will never be called.\r\n\r\nFor the
default (select) reactor, the problem is winsock\'s select reports failed
connections as "exceptional", rather than as readable/writeable, and Twisted
ignores exceptional socket events.\r\n\r\nPerhaps if platform is win32, do
something like:\r\n\r\ndef win32select(reads, writes, ignored,
timeout=None):\r\n """Kludge around winsock\'s select() function"""\r\n r,
w, e = select.select(reads, writes, reads, timeout)\r\n return r+e, w,
[]\r\nselect = win32select')

*sigh*

It turns out Itamar has submitted the same bug:
    http://www.twistedmatrix.com/users/itamarst.twistd/bugs/view_bug?bug_id=19
    
Anyway, bug I'm trying to submit reads:

Summary: 
    connectionFailed might not get called

Description:
    On Win32, connecting to a closed port doesn't fail immediately, but
    instead only calls connectionFailed after timing out.  However, timeouts
    are optional, so it is possible it will never be called.

    For the default (select) reactor, the problem is winsock's select
    reports failed connections as "exceptional", rather than as
    readable/writeable, and Twisted ignores exceptional socket events.

    Perhaps if platform is win32, do something like:

    def win32select(reads, writes, ignored, timeout=None):
        """Kludge around winsock's select() function"""
        r, w, e = select.select(reads, writes, reads, timeout)
        return r+e, w, []
    select = win32select




From twisted at itamarst.org  Mon May 27 07:03:25 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 27 May 2002 14:03:25 +0300
Subject: [Twisted-Python] Twisted.bugs ate my balls!
References: <20020527094647.GA733@frobozz.local>
Message-ID: <3CF2127D.3020603@itamarst.org>

OK, I fixed the win32 issue.




From twisted at itamarst.org  Tue May 28 12:18:45 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 28 May 2002 19:18:45 +0300
Subject: [Twisted-Python] Issue with factories
Message-ID: <3CF3ADE5.8090002@itamarst.org>

If you do reactor.listenTCP on a factory, startFactory and stopFactory are 
never called. I therefore suggest that we add methods doStart and doStop to 
protocol.Factory, like so, and have them called in listenTCP/UDP/SSL, and 
remove calls to start/stopFactory from app.Appliecation:

class Factory:

    running = 0

    def doStart(self):
         if not self.running:
             self.running = 1
             self.startFactory()

    def doStop(self):
         if self.running:
             self.running = 0
             self.stopFactory()

This ensures the start/stopFactory methods will only be called once, even if 
the factory is added to multiple Ports, and makes sure that they get called 
even if the factory is added to the reactor directly.




From glyph at twistedmatrix.com  Tue May 28 17:07:44 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 28 May 2002 16:07:44 -0500 (CDT)
Subject: [Twisted-Python] Issue with factories
In-Reply-To: <3CF3ADE5.8090002@itamarst.org>
References: <3CF3ADE5.8090002@itamarst.org>
Message-ID: <20020528.160744.59651935.glyph@twistedmatrix.com>

From: Itamar Shtull-Trauring <twisted at itamarst.org>
Date: Tue, 28 May 2002 19:18:45 +0300

> If you do reactor.listenTCP on a factory, startFactory and stopFactory are 
> never called. I therefore suggest that we add methods doStart and doStop to 
> protocol.Factory, like so, and have them called in listenTCP/UDP/SSL, and 
> remove calls to start/stopFactory from app.Appliecation:

Thanks.  I knew this was a problem but didn't know how to confront it; this
looks like a logical encapsulation, parallel to doRead/doWrite... perhaps
doStart and doStop could also take information about the port being listened on
as an argument.  (doListen/doUnlisten maybe?)


-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020528/0ccf4860/attachment.pgp 

From tv at twistedmatrix.com  Tue May 28 16:37:42 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 28 May 2002 23:37:42 +0300
Subject: [Twisted-Python] LDAP is dead, long live LDAP!
Message-ID: <87znyknh49.fsf@ki.yok.utu.fi>

	LDAP support has been removed from the main Twisted tree.
        For the future, please refer to

        http://twistedmatrix.com/users/tv/ldaptor/

        - the main application for now is a web-based editor/browser
        for an LDAP directory.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From exarkun at meson.dyndns.org  Tue May 28 22:13:25 2002
From: exarkun at meson.dyndns.org (exarkun at meson.dyndns.org)
Date: Tue, 28 May 2002 22:13:25 -0400 (EDT)
Subject: [Twisted-Python] Removing Perspectives
Message-ID: <Pine.LNX.4.44.0205282210090.24040-100000@meson>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


  Yes, I want to remove a perspective.  It seems this hasn't come up
before (at least there is little provisioning for it in the API).  So,
what's the best way to do this?  It seems that cred.service.Service should
have something like removePerspectiveNamed or removePerspectiveRequest
(depending on whether the action can be taken immediately or not) to take
care of this, taking the name of the perspective to squish.  I don't see
any reason that the action shouldn't be able to be taken immediately, so I
would consider removePerspectiveNamed(perspectiveName) preferable, with no
return value and raising a KeyError or something on the case where there
is no perspective of the given name.

  This sound reasonable, or is there more to do / a better way to do it?

  Jp (A PART OF TEH TWISTARD DVELEPER COMUNITE)

- --
It is practically impossible to teach good programming style to
students that have had prior exposure to BASIC: as potential
programmers they are mentally mutilated beyond hope of
regeneration.        -- Dijkstra
- --
 10:10pm up 7 days, 22:50, 0 users, load average: 0.02, 0.13, 0.46
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE89DlJedcO2BJA+4YRAi0DAJ9mi7C3+7aLmXEL4JQH12cZ57wlqwCfatE/
KI0Cb1SghE7DpFKNdsTkJWc=
=MOJi
-----END PGP SIGNATURE-----




From lloyd at lancaster.lib.pa.us  Wed May 29 12:05:59 2002
From: lloyd at lancaster.lib.pa.us (Eron Lloyd)
Date: 29 May 2002 12:05:59 -0400
Subject: [Twisted-Python] LDAP is dead, long live LDAP!
In-Reply-To: <87znyknh49.fsf@ki.yok.utu.fi>
References: <87znyknh49.fsf@ki.yok.utu.fi>
Message-ID: <1022688360.1632.1.camel@phobos>

Was this due to not being supported? Or was it too buggy or immature? I
had just began taking a look at that.

Regards,

Eron

On Tue, 2002-05-28 at 16:37, Tommi Virtanen wrote:
> 
> 	LDAP support has been removed from the main Twisted tree.
>         For the future, please refer to
> 
>         http://twistedmatrix.com/users/tv/ldaptor/
> 
>         - the main application for now is a web-based editor/browser
>         for an LDAP directory.
> 
> -- 
> tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
> double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> ---
> [This E-mail scanned for viruses by Declude Virus]
> 
> 


---
[This E-mail scanned for viruses by Declude Virus]




From steve.waterbury at gsfc.nasa.gov  Wed May 29 14:38:24 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Wed, 29 May 2002 14:38:24 -0400
Subject: [Twisted-Python] example UML class diagram - twisted.web.widgets
References: <3CF3ADE5.8090002@itamarst.org>
Message-ID: <3CF52020.8D5CB4B@gsfc.nasa.gov>

Here is a diagram "reverse-engineered" from the Python code 
using the Object Domain UML tool (with some manual tweaking to 
organize it more compactly).  This is from the CVS twisted I 
checked out on 5/24 (haven't updated since then).  

If you think it's useful, I could send more as I generate 
them, and they could be included with the Twisted docs if you 
want.  Of course, there is no substitute for reading the code, 
but might be a good "quick reference".  

I think there is a new release of twisted coming soon, right?  
If so, I'll wait for that ....

-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html
    "An idiot with a computer is a faster, better idiot." - Rick Julius
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twisted.web.widgets.pdf
Type: application/pdf
Size: 14538 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020529/b3735eb0/attachment.pdf 

From radix at twistedmatrix.com  Wed May 29 23:00:05 2002
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 29 May 2002 23:00:05 -0400 (EDT)
Subject: [Twisted-Python] Twisted 0.18.0rc1, Bugs 0.2.0, and Twisted Emacs 0.1.0
Message-ID: <20020529.230005.607980248.radix@twistedmatrix.com>

I just made a release and posted it to the web site, check out 
http://twistedmatrix.com/ for more information.

>From the News section::

----
It's been a while since our last release, so we made up for it by making major
improvements to Twisted, and overhauling PB for Emacs and doing an official
release of it. Also, Twisted Bugs has been updated to work with the latest 
changes.

We're going to start doing release candidates (that's what the "rc" stands 
for) before major releases from now on, so you don't have to fear the point-oh
releases any more ;) Oh, and be on the lookout for 0.99.0 very soon! Once 
that's released we'll be concentrating hard on documentation and testing (ie, 
stability) for the coming 1.0 release! 
----

Once 0.18.0 proper is released, I'll do a bigger release announcement. But I'd 
like to ask everyone working with Twisted to _please_ download and try 
0.18.0rc1! There were a lot of changes, and we'd like to make sure everything's
working OK! On the other hand, the core devel team is pretty confident about
this release -- we've made a lot of improvements and we didn't rush (*ahem*) 
the release, so it should be OK. :-)

--
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



From twisted at itamarst.org  Thu May 30 13:22:33 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 30 May 2002 20:22:33 +0300
Subject: [Twisted-Python] Issue with factories
References: <3CF3ADE5.8090002@itamarst.org>
Message-ID: <3CF65FD9.2020906@itamarst.org>

Itamar Shtull-Trauring wrote:

 > If you do reactor.listenTCP on a factory, startFactory and stopFactory are
 > never called. I therefore suggest that we add methods doStart and doStop
 > to protocol.Factory, like so, and have them called in listenTCP/UDP/SSL,
 > and remove calls to start/stopFactory from app.Appliecation:

OK, done, basically identically to the pseudocode listed in previous email,
slighly improved - I will check in after 0.18 is released.




From tv at twistedmatrix.com  Thu May 30 10:24:43 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 30 May 2002 17:24:43 +0300
Subject: [Twisted-Python] LDAP is dead, long live LDAP!
In-Reply-To: <1022688360.1632.1.camel@phobos>
References: <87znyknh49.fsf@ki.yok.utu.fi> <1022688360.1632.1.camel@phobos>
Message-ID: <87d6vd7lxw.fsf@ki.yok.utu.fi>

Eron Lloyd <lloyd at lancaster.lib.pa.us> writes:

> Was this due to not being supported? Or was it too buggy or immature? I
> had just began taking a look at that.

	No, it's because I wanted to force glyph to follow LGPL, just
        like everyone else.

        The library will integrate as well with twisted as it ever
        did, if not better. Please continue using it.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From sune-twisted at mel.interspace.dk  Thu May 30 17:13:02 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Thu, 30 May 2002 23:13:02 +0200
Subject: [Twisted-Python] Zope PageTemplates for Twisted
Message-ID: <20020530231302.A14225@mel.interspace.dk>

Whee!

In a fit of God-how-I-hate-all-other-template-languages I decided to
take another look at Zopes PageTemplates (TAL, METAL and friends).

I ended up liking the beast so much I decided to start porting it to
Twisted, which resulted in the attached t.w.tal module.  It is still
very incomplete, and most likely also very buggy.  But, in the
interest of feedback I post it here.

It dislikes it when I reuse deferreds (t.w.w.RenderSession becomes
very confused and claims to be "rendering unknown" for all but the
first instances).

Other than that the only problem I have had so far was that I had to
remove a str'ing in the TAL-engine.

-- 
Sune Kirkeby | 5 out of 4 people have trouble with fractions.
-------------- next part --------------
# I need a license.

"""
TAL interpreter for Twisted.
"""

import string, types

from twisted.web import widgets
from twisted.web.server import NOT_DONE_YET

from TAL.TALDefs import quote
from TAL.TALDefs import TAL_VERSION, isCurrentVersion, getProgramMode
from TAL.TALDefs import TALError, METALError
from TAL.TALParser import TALParser
from TAL.TALInterpreter import TALInterpreter
from TAL.TALGenerator import TALGenerator
#from TAL.DummyEngine import DummyEngine
from PageTemplates.Expressions import getEngine

class TwistedTALInterpreter:
    def __init__(self, engine):
        self.engine = engine
        self.mode = None

    def interpret(self, program):
        lst = []

        for (opcode, args) in program:
            handler = getattr(self, 'do_' + opcode, None)
            if not handler:
                raise TALError, ("Unknown opcode: %s (%r)" % (opcode, args))

            result = handler(args)
            if isinstance(result, types.ListType):
                lst.extend(result)
            elif result:
                lst.append(result)

        return lst

    def do_version(self, version):
        assert version == TAL_VERSION

    def do_mode(self, mode):
        assert mode in ("html", "xml")
        self.mode = mode

    def do_rawtextOffset(self, (text, somenumber)):
        return text

    def do_rawtextColumn(self, (text, somenumber)):
        return text

    def do_startTag(self, (name, attributes)):
        txt = '<%s' % name

        def format_attribute(attr):
            if len(attr) == 2:
                return attr[1]
            elif attr[2] == 0:
                return '%s=%s' % (attr[0], quote(attr[1]))
        attributes = map(format_attribute, attributes)
        formatted = string.join([ a for a in attributes if a ], ' ')

        if formatted:
            txt = txt + ' ' + formatted
        txt = txt + '>'

        return txt

    def do_optTag(self, foo):
        return self.interpret(foo[5])

    def do_loop(self, (name, expr, block)):
        iterator = self.engine.setRepeat(name, expr)
        lst = []
        while iterator.next():
            lst.extend(self.interpret(block))
        return lst

    def do_beginScope(self, attrs):
        self.engine.beginScope()

    def do_endScope(self, nothing):
        self.engine.endScope()

    def do_insertText(self, (text, insteadOf)):
        val = self.engine.evaluateText(text)
        if not val:
            return
        if val is self.engine.getDefault():
            self.interpret(insteadOf)
        return val

    def do_useMacro(self, (macroName, macroExpr, compiledSlots, block)):
        macro = self.engine.evaluateMacro(macroExpr)
        if macro is self.engine.getDefault():
            macro = block

        else:
            if not isCurrentVersion(macro):
                raise METALError("macro %s has incompatible version %s" %
                                 (`macroName`, `getProgramVersion(macro)`),
                                 self.position)
            mode = getProgramMode(macro)
            if not mode == self.mode:
                raise METALError("macro %s has incompatible mode %s" %
                                 (`macroName`, `mode`), self.position)

        return self.interpret(macro)

    def do_defineMacro(self, (macroName, macro)):
        pass

class TALWidget(widgets.Widget):
    def preDisplay(self, request):
        pass

    def getTemplates(self, request):
        raise UnimplementedError

    def getContext(self, request):
        return {}

    def display(self, request):
        self.preDisplay(request)

        ctx = {
            'request': request,
            'here': self,
            'macros': {},
        }
        ctx.update(self.getContext(request))

        engine = getEngine()
        context = engine.getContext(ctx)
        generator = TALGenerator(engine)

        result = []
        for template in self.getTemplates(request):
            parser = TALParser(generator)
            parser.parseString(template)
            program, macros = parser.getCode()
            ctx['macros'].update(macros)

            interpreter = TwistedTALInterpreter(context)
            result.extend(interpreter.interpret(program))

        return result

if __name__ == '__main__':
    import sys
    from twisted.web import widgets
    from TAL.TALParser import TALParser
    from TAL.DummyEngine import DummyEngine
    
    parser = TALParser()
    engine = DummyEngine()
    interpreter = TwistedTALInterpreter(engine)

    engine.setGlobal('here/title', 'TITLE, GOD DAMMIT!')

    file = sys.argv[1]
    parser.parseFile(file)
    program, macros = parser.getCode()
    result = interpreter.interpret(program)

    class Request:
        def write(self, txt):
            print txt
        def finish(self):
            pass

    widgets.RenderSession(result, Request())

From jason at asbahr.com  Thu May 30 17:43:04 2002
From: jason at asbahr.com (Jason Asbahr)
Date: Thu, 30 May 2002 16:43:04 -0500
Subject: [Twisted-Python] Regarding customer support...
Message-ID: <38D042BA-7416-11D6-B53D-000393753460@asbahr.com>

Given some of the chats I've had with Glyph regarding bug tracking, 
customer support, and project management in Twisted, here's a nice 
overview article that provides some concrete definitions and feature 
descriptions for each.  Note the "Workflow Management" paragraph where 
the author claims that the above mentioned systems are instances of 
Workflow Management and a system built around workflow management 
abstractions could be 'trivially' used to develop the others.

	http://linas.org/linux/pm.html

Looking at the numerous examples of partial implementations of these 
various systems out there, it seems that it is easy to start one of 
these projects, but hard to get it to the point where it is actually 
useful (and I'm specifically looking at project management here).

Apparently there was a project manager called Xen for Zope, but it seems 
dead now.

But here are two interesting bits of code that could be incorporated 
into a Twisted-based project manager -- PyGantt, which take an 
XML-formatted project description and generates an HTML Gantt chart; and 
an O'Reilly article that describes something similar with Piddle.

http://www.logilab.org/pygantt/

http://www.onlamp.com/pub/a/python/2001/05/31/piddle.html

PyGantt is neat because it could be modified to generate hyperlinked 
project task titles that would go to a task description dialog (or 
page).  Dates could also be hyperlinked for editing.  The XML part could 
be factored out into import/export, and the project description could be 
instead accessed from project-tree and task-node instances in Twisted.

Having a way to represent "user stories" and "use cases" as task nodes 
would be cool.  Then Roark could (ahem, when I get time to help Matt 
work on it) be used to create and edit use cases and other modeling 
entities and the task manager could be used to schedule and track 
progress on them.

Cheers,

Jason




From sune at mel.interspace.dk  Fri May 31 09:04:48 2002
From: sune at mel.interspace.dk (Sune Kirkeby)
Date: Fri, 31 May 2002 15:04:48 +0200
Subject: [Twisted-Python] [patch] three short ones
Message-ID: <20020531150448.A24081@mel.interspace.dk>

Hello twisted-ppl,

Attached you'll find three short patches, two against
t.w.widgets.RenderSession and one against t.p.http.Request.

The first patch makes RenderSession unicode-agnostic (i.e. makes it
treat string and unicode object alike).  The second one makes
t.p.http.Request aware of unicode, to the extent that it will
correctly handle unicode strings with all ordinals < 128 (by simply
str'ing them).

The last patch makes RenderSession.callback return the result it was
passed, so that later callbacks made by the given Deferred also
benefit from this knowledge.  It had completely escaped me that
Deferred._runCallbacks acts like a folding operation, last I poked
around in the code.

Regards,

-- 
Sune Kirkeby | % cat /usr/include/sys/errno.h
             | #define EPERM       1       /* Operation not permitted */
             | [...]
             | #define EMACS       666     /* Editor Too Large */
-------------- next part --------------
Index: widgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/widgets.py,v
retrieving revision 1.46
diff -u -r1.46 widgets.py
--- widgets.py	26 May 2002 06:42:38 -0000	1.46
+++ widgets.py	31 May 2002 12:41:44 -0000
@@ -802,7 +802,8 @@
                 self.forgotten = 1
                 return
 
-            if isinstance(item, types.StringType):
+            stringtypes = getattr(types, 'StringTypes', types.StringType)
+            if isinstance(item, stringtypes):
                 self.beforeBody = 0
                 self.request.write(item)
             elif type(item) is types.TupleType and len(item) > 0:
-------------- next part --------------
Index: http.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/http.py,v
retrieving revision 1.21
diff -u -r1.21 http.py
--- http.py	18 May 2002 22:18:41 -0000	1.21
+++ http.py	31 May 2002 13:02:32 -0000
@@ -24,6 +24,7 @@
 import string
 from cStringIO import StringIO
 import tempfile
+import types
 import base64
 import cgi
 import urllib
@@ -518,6 +519,13 @@
             if self.method == "HEAD":
                 self.write = lambda data: None
                 return
+
+        # this converts unicode w/o high-bits to normal strings,
+        # should probably be replaced with something that knows
+        # about the Content-Type charset parameter and codecs,
+        stringtypes = getattr(types, 'StringTypes', types.StringType)
+        if isinstance(data, stringtypes):
+            data = str(data)
 
         self.sentLength = self.sentLength + len(data)
         if data:
-------------- next part --------------
Index: widgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/widgets.py,v
retrieving revision 1.46
diff -u -r1.46 widgets.py
--- widgets.py	26 May 2002 06:42:38 -0000	1.46
+++ widgets.py	31 May 2002 12:43:14 -0000
@@ -731,7 +731,7 @@
 
     def callback(self, result, sentinel, decNeedsHeaders):
         if self.forgotten:
-            return
+            return result
         if result != FORGET_IT:
             self.needsHeaders = self.needsHeaders - decNeedsHeaders
         else:
@@ -786,6 +786,7 @@
         for r in toArm:
             r.arm()
 
+        return result
 
     def keepRendering(self):
         if self.needsHeaders:

From twisted at itamarst.org  Fri May 31 12:38:30 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 31 May 2002 18:38:30 +0200
Subject: [Twisted-Python] Proposal: Make tax default, tap optional
Message-ID: <3CF7A706.1020302@itamarst.org>

XML pickles have many benefits over taps, and the only issues they have 
is not support 1.5 and 2.2 new-style classes. I suggest we make them the 
default - a tap file is *much* less useful than a tax.




From levi at top.monad.net  Fri May 31 14:47:52 2002
From: levi at top.monad.net (Levi)
Date: Fri, 31 May 2002 14:47:52 -0400
Subject: [Twisted-Python] Proposal: Make tax default, tap optional
In-Reply-To: <3CF7A706.1020302@itamarst.org>
References: <3CF7A706.1020302@itamarst.org>
Message-ID: <20020531184751.GA491@pest>

On Fri, May 31, 2002 at 06:38:30PM +0200, Itamar Shtull-Trauring wrote:
> XML pickles have many benefits over taps, and the only issues they have 
> is not support 1.5 and 2.2 new-style classes. I suggest we make them the 
> default - a tap file is *much* less useful than a tax.

Yes, but new-style classes are really nice. Of course, fixing the tax to
support new-style classes whould be best of all.

-Levi



From glyph at twistedmatrix.com  Fri May 31 15:47:18 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 31 May 2002 14:47:18 -0500 (CDT)
Subject: [Twisted-Python] Proposal: Make tax default, tap optional
In-Reply-To: <20020531184751.GA491@pest>
References: <3CF7A706.1020302@itamarst.org>
	<20020531184751.GA491@pest>
Message-ID: <20020531.144718.77649106.glyph@twistedmatrix.com>

From: Levi <levi at top.monad.net>
Subject: Re: [Twisted-Python] Proposal: Make tax default, tap optional
Date: Fri, 31 May 2002 14:47:52 -0400

> On Fri, May 31, 2002 at 06:38:30PM +0200, Itamar Shtull-Trauring wrote:
> > XML pickles have many benefits over taps, and the only issues they have 
> > is not support 1.5 and 2.2 new-style classes. I suggest we make them the 
> > default - a tap file is *much* less useful than a tax.
> 
> Yes, but new-style classes are really nice. Of course, fixing the tax to
> support new-style classes whould be best of all.
> 

A tap file is about a thousand times faster than a tax, at present, and I don't
have any plans for making it faster.  In general, I *don't* tweak my options
after I run 'mktap'...

While XML is definitely useful, I'd prefer to keep .tap the default.  We should
have a tool for converting them, though.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020531/9249ba0f/attachment.pgp 

From twisted at itamarst.org  Fri May 31 17:58:27 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 31 May 2002 23:58:27 +0200
Subject: [Twisted-Python] Proposal: Make tax default, tap optional
References: <3CF7A706.1020302@itamarst.org>	<20020531184751.GA491@pest> <20020531.144718.77649106.glyph@twistedmatrix.com>
Message-ID: <3CF7F203.7020302@itamarst.org>

Glyph Lefkowitz wrote:

> A tap file is about a thousand times faster than a tax, at present, and I don't
> have any plans for making it faster.  In general, I *don't* tweak my options
> after I run 'mktap'...

Maybe you don't - other people may want to. And startup speed is very 
unimportant.





From dp at twistedmatrix.com  Fri May 31 18:04:16 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 31 May 2002 15:04:16 -0700
Subject: [Twisted-Python] Proposal: Make tax default, tap optional
In-Reply-To: <3CF7F203.7020302@itamarst.org>
Message-ID: <5934519A-74E2-11D6-8106-003065B25CAA@twistedmatrix.com>

On Friday, May 31, 2002, at 02:58 PM, Itamar Shtull-Trauring wrote:

> Glyph Lefkowitz wrote:
>
>> A tap file is about a thousand times faster than a tax, at present, 
>> and I don't
>> have any plans for making it faster.  In general, I *don't* tweak my 
>> options
>> after I run 'mktap'...
>
> Maybe you don't - other people may want to. And startup speed is very 
> unimportant.

Startup speed is fairly important to me (not terribly, but fairly...)

Here's what I suggest: By default, create both. Then, each time a tap is 
to be loaded, check to see if the modification date on the tax is newer. 
If it is, load the tax, and save the tap.

Donovan




From twisted at itamarst.org  Fri May 31 19:28:57 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 01 Jun 2002 01:28:57 +0200
Subject: [Twisted-Python] Using HTTP proxies to circumvnet firewalls
Message-ID: <3CF80739.80306@itamarst.org>

Apparently, HTTP proxies have a command CONNECT, that lets you open a 
TCP/IP connection to an arbitrary host and port. This is intended for 
HTTPS. Now, most proxies probably limit this to 443 only, HTTPS port.

So, presumably all those clients like ICQ that let you run over HTTP 
proxy - they use this, and have a ICQ server running on port 443. Thus 
allowing people to use it behind corporate firewalls.

So, we need a HTTPProxy transport that will do this automatically for 
clients, along with a SOCKSv4 transport and eventually a SOCKSv5 transport.

proxy = HTTPProxier("proxy.isp.net", 8080)
proxy.clientTCP("www.example.com", 443, myProtocolInstance)
# cool, huh?




From twisted at itamarst.org  Wed May  1 07:19:18 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 01 May 2002 16:19:18 +0300
Subject: [Twisted-Python] [ANN] Puffin 0.8.8 Released -- Web App Regression Testing Just Got
 Easier
Message-ID: <3CCFEB56.6000000@itamarst.org>

Maybe we should this for testing twisted.web?

<http://mail.python.org/pipermail/python-announce-list/2002-April/001420.html>




From twisted at itamarst.org  Thu May  2 03:26:02 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 02 May 2002 12:26:02 +0300
Subject: [Twisted-Python] [Fwd: webunit is better (i think :-)]
Message-ID: <3CD1062A.50302@itamarst.org>

Luc suggests webunit. And since the author is the guy who wrote pyunit, it 
probably integrates nicely.

-------- Original Message --------
Subject: webunit is better (i think :-)
Date: Thu, 02 May 2002 09:03:51 +0200
From: Luc Stepniewski

Have you looked at the webunit tool? It seems much better, the included
httpsession module works so good, it even memorizes the cookies set
during a path traversal (for example, first logging, the doing some
action). It's on http://webunit.sourceforge.net/

Luc




From andrew-twisted at puzzling.org  Thu May  2 21:00:11 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 3 May 2002 13:00:11 +1000
Subject: [Twisted-Python] Timeouts for Deferreds?
Message-ID: <20020503030011.GA23457@ritsuko.xware.cx>

I just thought of another feature I would find handy in Deferreds,
although perhaps this feature belongs somewhere else...

Deferred.timeout(secs):
    If I am uncalled for secs seconds after being armed, call my errback
    automatically.

This way callers can control how long they will wait for a Deferred to
do something.  Methods returns Deferreds could also set a reasonable
default with .timeout that the caller can override by calling .timeout
again.  A timeout of None would, of course, mean never timeout.

I can see this as being useful in many ways.  The biggest problem with
it is I'm not sure what should happen when you try to call a Deferred
after it has timed out (e.g. your CGI script took 5 minutes, timed out
and thus called errback, but did eventually finish).  I don't think
calling callback/errback should raise an AlreadyCalledException, because
the timeout may have been set by a client of a library that doesn't
expect timeouts.  On the other hand, I don't like the idea of things
failing silently.  The ideal situation is, of course, to make sure that
the timeout event always cancels whatever it is that would later call
callback/errback, but I don't like making it a requirement that this
must happen (plus it probably means adding a "timeback" method, or
something).

Perhaps a TimeoutDeferred subclass?  But then it's not generally useful
anymore, unless a method explicitly returns TimeoutDeferred and not
Deferred.  Still, encouraging people to use hard-coded arbitrary
timeouts everywhere probably isn't a good idea either.

Thoughts, anyone?

(Actual implementation details left as an exercise for the reader...
actually, I'm happy to do it if people want this).

-Andrew.




From carmstro at twistedmatrix.com  Thu May  2 21:34:17 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 02 May 2002 23:34:17 -0400
Subject: [Twisted-Python] Timeouts for Deferreds?
In-Reply-To: <20020503030011.GA23457@ritsuko.xware.cx>
References: <20020503030011.GA23457@ritsuko.xware.cx>
Message-ID: <1020396859.2867.21.camel@radii>

On Thu, 2002-05-02 at 23:00, Andrew Bennetts wrote:
> I just thought of another feature I would find handy in Deferreds,
> although perhaps this feature belongs somewhere else...
> 
> Deferred.timeout(secs):
>     If I am uncalled for secs seconds after being armed, call my errback
>     automatically.
> 
> This way callers can control how long they will wait for a Deferred to
> do something.  Methods returns Deferreds could also set a reasonable
> default with .timeout that the caller can override by calling .timeout
> again.  A timeout of None would, of course, mean never timeout.

I think something like this is definitely needed, because any timeout
anyone does with Twisted will probably be done while waiting for a
Deferred to return. 

> I can see this as being useful in many ways.  The biggest problem with
> it is I'm not sure what should happen when you try to call a Deferred
> after it has timed out (e.g. your CGI script took 5 minutes, timed out
> and thus called errback, but did eventually finish).  I don't think
> calling callback/errback should raise an AlreadyCalledException, because
> the timeout may have been set by a client of a library that doesn't
> expect timeouts.  On the other hand, I don't like the idea of things
> failing silently.  The ideal situation is, of course, to make sure that
> the timeout event always cancels whatever it is that would later call
> callback/errback, but I don't like making it a requirement that this
> must happen (plus it probably means adding a "timeback" method, or
> something).

I think a 'timeout' callback method or somesuch might be a good way to
do it, that way you just leave it up to the developer what to do when
something finally does callback/errback after a timeout has happened.

> Perhaps a TimeoutDeferred subclass?  But then it's not generally useful
> anymore, unless a method explicitly returns TimeoutDeferred and not
> Deferred.  Still, encouraging people to use hard-coded arbitrary
> timeouts everywhere probably isn't a good idea either.

I don't think it really needs to be a separate class - we can just have
an 'addTimeBack' method on Deferreds that creates a Delayed (or
something?) on the Deferred with the appropriate stuff. That way the
regular case of not using a timeout on a Deferred won't have any
overhead.

> Thoughts, anyone?
> 
> (Actual implementation details left as an exercise for the reader...
> actually, I'm happy to do it if people want this).

I guess either a Delayed or a main.addTimeout (err, it's not called
'main.addTimeout' anymore with the new Reactor refactor, but I don't
know what it is)

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From carmstro at twistedmatrix.com  Sat May  4 01:20:13 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 04 May 2002 03:20:13 -0400
Subject: [Twisted-Python] failure.Failure
Message-ID: <1020496815.6031.31.camel@radii>

  So, I'm finally on my way to implementing robust PB errors, and I'm
getting close to completing phase 1, which is fixing up failure.Failure
in preparation for using it for PB errors. Some background:

  It was decided that we need to be able to trap an error based on a
hierarchy; that is, if I try to trap a "WordsError", it should also trap
"WordsParticipantError" and "WordsGroupError" (for example). 

  The way to do this is to get a list of all parents of an Exception
when a Failure is created with it; I use reflect.allYourBase for this.
However, these parents need to be serializable, so the solution is to
convert them to strings. The strings obviously need to be globally
unique, so I fully qualify them with reflect.qual().

  trap(), which is the method one uses for checking wether or not they
care about a particular failure, now just checks if any of its arguments
are in self.parents.

  The issue now is what the trap() API should be like. It used to be
that fail.trap(types, that, I, want, to, trap) would re-raise the
Failure if any of the types matched. This was kinda weird, as it
requires code like:

try:
   fail.trap(foo, bar)
except:
   print "Ok, so 'fail' matches 'foo' or 'bar'"

Yuck. My proposal is to do this:

if fail.trap(foo,bar): #trap() returns self when foo or bar matches
    print "This is similar to an 'except:' clause"

  So, if this is acceptable, should I worry about the two cases in
Twisted where fail() seems to be called? They don't even seem to make
sense in either case (one of them is obviously using trap() incorrectly,
the other just seems to use it in an odd way). So can I just change the
hardly-used API and fix the current places it's used, or should I remain
backwards-compatible?

  I've attached my diff -u of failure.py, if anyone wants to take a
look. It's very small. It makes test_failure fail, because it tests the
old behavior of trap().


-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: failure.diff
Type: text/x-patch
Size: 1581 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020504/f97faccf/attachment-0002.bin>

From drt at un.bewaff.net  Sat May  4 12:22:16 2002
From: drt at un.bewaff.net (Doobee R. Tzeck)
Date: 04 May 2002 20:22:16 +0200
Subject: [Twisted-Python] CNAMES and twisted.names in 0.17.3
Message-ID: <87lmazzsbr.fsf@c0re.bewaff.net>

I had some problems with the resolver generating tracebacks for
CNAMEs. The decoding has an off by two error which completely
messes up the decoding process.  The attached patch seems to cure
the problem, but I'm not sure why the author of twisted.names did
this fiddeling with the offset. Perhaps I'm breaking something else.

BTW: The Bugtracker eats my (MacOS) lineendings.

drt

http://twistedmatrix.com/users/itamarst.twistd/bugs/view_bug?bug_id=12
http://c0re.jp/c0de/misc/Twisted-0.17.3-dns-CNAME.patch

diff -ur Twisted-0.17.3-orig/twisted/names/dns.py
Twisted-0.17.3/twisted/names/dns.py
--- Twisted-0.17.3-orig/twisted/names/dns.py    Tue Apr  9    22:37:00 2002
+++ Twisted-0.17.3/twisted/names/dns.py Sat May  4 20:06:51 2002
@@ -156,7 +156,7 @@
             if answer.type == 1:
                 answers.append(answer)
             elif answer.type == dns.CNAME:
-                answer.strio.seek(answer.strioOff+2)
+                answer.strio.seek(answer.strioOff)
                 n = dns.Name()
                 n.decode(answer.strio)
                 cnames.append(n.name)
@@ -168,7 +168,7 @@
                 if answer.type == 1:
                     answers.append(cnameMap[name])
                 else:
-                    answer.strio.seek(answer.strioOff+2)
+                    answer.strio.seek(answer.strioOff)
                     n = dns.Name()
                     n.decode(answer.strio)
                     name = n.name



-- 
teenage mutant ninja hero coders from da c0re - http://c0re.jp/
me                                  - http://koeln.ccc.de/~drt/



From carmstro at twistedmatrix.com  Sun May  5 00:40:52 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 05 May 2002 02:40:52 -0400
Subject: [Twisted-Python] Interfaces
Message-ID: <1020580854.11415.4.camel@radii>

What's up with defining an interface and not specifying any methods on
it?

from twisted/coil/coil.py:
==
class ICollection(components.Interface):
    """A collection for coil."""
==

Wow! That's so informative! Now how am I supposed to know which methods
I need to define on this class? How do I know what parameters and return
values they need? I guess it doesn't matter, I can just go look at the
code that uses the objects that conform to the interface, right?

PLEASE, if you're going to go to the trouble of defining an interface,
*SPECIFY IT*.

<fume>
-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From twisted at itamarst.org  Sun May  5 03:11:00 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 12:11:00 +0300
Subject: [Twisted-Python] Another gaming position in Austin
Message-ID: <3CD4F724.9090505@itamarst.org>

<http://www.guru.com/gig/project_view.jhtml?gigId=469455&_DARGS=%2Ffind%2FCMP_search_work_list.jhtml.4_A&_DAV=0>




From twisted at itamarst.org  Sun May  5 05:40:00 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 14:40:00 +0300
Subject: [Twisted-Python] Kademlia: XOR metric-based routing
Message-ID: <3CD51A10.6070501@itamarst.org>

Raph Levien says it's less fragile than Chord. Raph Levien is *smart* 
(http://www.advogato.org/person/raph/diary.html?start=182)

<http://kademlia.scs.cs.nyu.edu/>

In fact, someone should go read his thesis (/me nominates dash).




From twisted at itamarst.org  Sun May  5 07:19:43 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 16:19:43 +0300
Subject: [Twisted-Python] new reactor testing
Message-ID: <3CD5316F.5000709@itamarst.org>

I added an option to runtests that lets you choose which reactor to use, e.g.:

	$ admin/runtests poll

or

	$ admin/runtests gtk

The result - the tests only pass in the default reactor, and do *not* all 
pass in others. So, "Gotta Fix Them All!".





From twisted at itamarst.org  Sun May  5 09:51:31 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 18:51:31 +0300
Subject: [Twisted-Python] Reactor issues - ongoing
Message-ID: <3CD55503.8010804@itamarst.org>

1. Qt and GTK+ assume they deal with processes, in the method unix does it, 
but this won't work on windows. That is, it is not possible to run processes 
on windows in Qt or GTK+ event loops at this time.

2. poll() fails on process tests.

(3. Qt fails some tests, but only because it doesn't have a working 
doIteration method, which I will add ASAP.)

OTOH, GTK+ and select pass all tests (except an unrelated bug in HTTP code 
or tests).




From twisted at itamarst.org  Sun May  5 09:57:58 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 18:57:58 +0300
Subject: [Twisted-Python] Reactor issues - ongoing
References: <3CD55503.8010804@itamarst.org>
Message-ID: <3CD55686.7070808@itamarst.org>

Itamar Shtull-Trauring wrote:

> (3. Qt fails some tests, but only because it doesn't have a working 
> doIteration method, which I will add ASAP.)

And done. Further investigation shows that since I can easily do doIteration
for QT, it may be better to make it like SelectReactor or PollReactor and get
rid of the simulate() crap, or maybe make it like wxPython so process 
running on Win32 works, since it seems to be slower than select() anyway.

For GTK+ there may be APIs for doing so as well (i.e. process events up to X
number of seconds), allowing us to do the same.




From twisted at itamarst.org  Sun May  5 12:05:10 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 21:05:10 +0300
Subject: [Twisted-Python] Things to do before next release
Message-ID: <3CD57456.8080409@itamarst.org>

1. Move *everything* to new APIs.

2. Add wxdemo.py and qtdemo.py to accepttests.

3. Finish up process refactor so it uses new API.

4. Pass all tests with all event loops.

What else?

Oh - glyph, start writing ChangeLogs again.




From twisted at itamarst.org  Sun May  5 12:08:48 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 05 May 2002 21:08:48 +0300
Subject: [Twisted-Python] Reactor issues - ongoing
References: <3CD55503.8010804@itamarst.org>
Message-ID: <3CD57530.9050702@itamarst.org>

Itamar Shtull-Trauring wrote:

> 2. poll() fails on process tests.

Fixed. In fact, select, pool gtk and qt reactors pass all tests, except the 
unrelated issue with HTTP client. win32 still has issues, but it's not like 
I didn't know that.





From glyph at twistedmatrix.com  Sun May  5 18:17:25 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 05 May 2002 19:17:25 -0500
Subject: [Twisted-Python] CNAMES and twisted.names in 0.17.3
In-Reply-To: <87lmazzsbr.fsf@c0re.bewaff.net>
References: <87lmazzsbr.fsf@c0re.bewaff.net>
Message-ID: <1020644245.326.0.camel@janus>

Can someone who knows the twisted.names codebase please stand up?  I
will apply this patch if nobody says anything about it in the next
week...

On Sat, 2002-05-04 at 13:22, Doobee R. Tzeck wrote:
> 
> I had some problems with the resolver generating tracebacks for
> CNAMEs. The decoding has an off by two error which completely
> messes up the decoding process.  The attached patch seems to cure
> the problem, but I'm not sure why the author of twisted.names did
> this fiddeling with the offset. Perhaps I'm breaking something else.
> 
> BTW: The Bugtracker eats my (MacOS) lineendings.
> 
> drt
> 
> http://twistedmatrix.com/users/itamarst.twistd/bugs/view_bug?bug_id=12
> http://c0re.jp/c0de/misc/Twisted-0.17.3-dns-CNAME.patch
> 
> diff -ur Twisted-0.17.3-orig/twisted/names/dns.py
> Twisted-0.17.3/twisted/names/dns.py
> --- Twisted-0.17.3-orig/twisted/names/dns.py    Tue Apr  9    22:37:00 2002
> +++ Twisted-0.17.3/twisted/names/dns.py Sat May  4 20:06:51 2002
> @@ -156,7 +156,7 @@
>              if answer.type == 1:
>                  answers.append(answer)
>              elif answer.type == dns.CNAME:
> -                answer.strio.seek(answer.strioOff+2)
> +                answer.strio.seek(answer.strioOff)
>                  n = dns.Name()
>                  n.decode(answer.strio)
>                  cnames.append(n.name)
> @@ -168,7 +168,7 @@
>                  if answer.type == 1:
>                      answers.append(cnameMap[name])
>                  else:
> -                    answer.strio.seek(answer.strioOff+2)
> +                    answer.strio.seek(answer.strioOff)
>                      n = dns.Name()
>                      n.decode(answer.strio)
>                      name = n.name
> 
> 
> 
> -- 
> teenage mutant ninja hero coders from da c0re - http://c0re.jp/
> me                                  - http://koeln.ccc.de/~drt/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 232 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20020505/0e7d3a2d/attachment.sig>

From glyph at twistedmatrix.com  Sun May  5 18:21:03 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 05 May 2002 19:21:03 -0500
Subject: [Twisted-Python] failure.Failure
In-Reply-To: <1020496815.6031.31.camel@radii>
References: <1020496815.6031.31.camel@radii>
Message-ID: <1020644463.326.3.camel@janus>

On Sat, 2002-05-04 at 02:20, Christopher Armstrong wrote:
>   The issue now is what the trap() API should be like. It used to be
> that fail.trap(types, that, I, want, to, trap) would re-raise the
> Failure if any of the types matched. This was kinda weird, as it
> requires code like:

You've got that backwards.  It would re-raise the exception if _none_ of
the types matched.

I consider this behavior important, since unless you raise an exception
or return a Failure, the next deferred stack call will be a callback,
not an errback.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 232 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20020505/766cf8f5/attachment.sig>

From carmstro at twistedmatrix.com  Sun May  5 21:59:31 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 05 May 2002 23:59:31 -0400
Subject: [Twisted-Python] failure.Failure
In-Reply-To: <1020644463.326.3.camel@janus>
References: <1020496815.6031.31.camel@radii>  <1020644463.326.3.camel@janus>
Message-ID: <1020657573.20245.203.camel@radii>

On Sun, 2002-05-05 at 20:21, Glyph Lefkowitz wrote:
> On Sat, 2002-05-04 at 02:20, Christopher Armstrong wrote:
> >   The issue now is what the trap() API should be like. It used to be
> > that fail.trap(types, that, I, want, to, trap) would re-raise the
> > Failure if any of the types matched. This was kinda weird, as it
> > requires code like:
> 
> You've got that backwards.  It would re-raise the exception if _none_ of
> the types matched.
> 
> I consider this behavior important, since unless you raise an exception
> or return a Failure, the next deferred stack call will be a callback,
> not an errback.

Aha! I didn't know about that :-) This makes things much more
interesting, hrm... So, an errback that wants to handle some particular
exception need only do:

def _ebFoo(self, failure):
    failure.trap(stuff, I, care, about)
    doStuff()

Check this out from forum/gadgets.py:

    def _errIdentity(self, failure):
        if failure.trap(self.manager.dbpool.dbapi.OperationalError):
            return self.tryAgain("This identity is already taken.",
                                 self.request)

What's up with that? Oh well, I'll just assume that whoever wrote this
code didn't understand the way failure.trap() works -- I will keep the
.trap() api as you suggested above.


-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From twisted at itamarst.org  Mon May  6 03:47:13 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 06 May 2002 12:47:13 +0300
Subject: [Twisted-Python] failure.Failure
References: <1020496815.6031.31.camel@radii>  <1020644463.326.3.camel@janus> <1020657573.20245.203.camel@radii>
Message-ID: <3CD65121.7090606@itamarst.org>

Christopher Armstrong wrote:

> Check this out from forum/gadgets.py:
> 
>     def _errIdentity(self, failure):
>         if failure.trap(self.manager.dbpool.dbapi.OperationalError):
>             return self.tryAgain("This identity is already taken.",
>                                  self.request)

Forum code in general is problematic. And on an unrelated note, it should
probably be moved into its own repository as was done to bugs.






From twisted at itamarst.org  Mon May  6 10:29:32 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 06 May 2002 19:29:32 +0300
Subject: [Twisted-Python] win32 event loop
Message-ID: <3CD6AF6C.4000004@itamarst.org>

The problem - WaitForMultipleObjects, which is like poll() for Windows, 
won't work with more than 64 events. MS did this since apparently it scales 
really really badly.

[Subtext: Microsoft hates me]

So I've done some research, and it looks like I/O Completion ports are the 
way to go for scalable networking. This will probably mean rewriting (or 
subclassing) the stuff in tcp.py and abstract.py, since this the Proactor 
pattern, not the Reactor pattern, so things work a bit differently. I'm not 
even sure how UDP is done, but that's something I'll worry about later.

[Subtext: Microsoft create more useless work for me]

Another issue is the SSL support, which won't work with this method... We'd 
have to use Windows specific SSL code.

[Subtext: Microsoft breaks my code]

Another alternative is using threads with multiple WaitForMultipleObjects. 
This, I would guess, is probably really slow.

[Subtext: Microsoft slows down my software]





From twisted at itamarst.org  Mon May  6 10:45:18 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 06 May 2002 19:45:18 +0300
Subject: [Twisted-Python] win32 event loop
References: <3CD6AF6C.4000004@itamarst.org>
Message-ID: <3CD6B31E.3090006@itamarst.org>

Itamar Shtull-Trauring wrote:

> Another alternative is using threads with multiple 
> WaitForMultipleObjects. This, I would guess, is probably really slow.

I found some code that does this for windows.

Downsides:
1. C extension (although since win32 stuff comes as .exes anyway it's not so 
bad).

2. Copyright issues:
The license says " Miller Freeman, Inc. places no restrictions on the
distribution or use of this source code." It's a code sample from a magazine.

3.  It creates new threads with every call if there are more than 64 events. 
However, since it wouldn't block the GIL, and windows threads are pretty 
lightweight, this may be a decent solution.


Anyway, this suggests that perhaps I should write an externally distributed 
C module (this is probably useful for other people as well) and see how well 
it works.




From glyph at twistedmatrix.com  Mon May  6 13:34:00 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 06 May 2002 14:34:00 -0500
Subject: [Twisted-Python] failure.Failure
In-Reply-To: <3CD65121.7090606@itamarst.org>
References: <1020496815.6031.31.camel@radii> 
	<1020644463.326.3.camel@janus> <1020657573.20245.203.camel@radii> 
	<3CD65121.7090606@itamarst.org>
Message-ID: <1020713640.941.0.camel@janus>

On Mon, 2002-05-06 at 04:47, Itamar Shtull-Trauring wrote:

> Forum code in general is problematic. And on an unrelated note, it should
> probably be moved into its own repository as was done to bugs.

Agreed.  Any volunteers...?

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 232 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20020506/bbbd411d/attachment.sig>

From carmstro at twistedmatrix.com  Mon May  6 14:18:17 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 06 May 2002 16:18:17 -0400
Subject: [Twisted-Python] failure.Failure
In-Reply-To: <1020713640.941.0.camel@janus>
References: <1020496815.6031.31.camel@radii> 
	<1020644463.326.3.camel@janus> <1020657573.20245.203.camel@radii> 
	<3CD65121.7090606@itamarst.org>  <1020713640.941.0.camel@janus>
Message-ID: <1020716299.1099.0.camel@radii>

On Mon, 2002-05-06 at 15:34, Glyph Lefkowitz wrote:
> On Mon, 2002-05-06 at 04:47, Itamar Shtull-Trauring wrote:
> 
> > Forum code in general is problematic. And on an unrelated note, it should
> > probably be moved into its own repository as was done to bugs.
> 
> Agreed.  Any volunteers...?

Of course ;-) I'll do it when I make the next release.

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From j.her at t-online.de  Mon May  6 13:56:53 2002
From: j.her at t-online.de (Juergen Hermann)
Date: Mon, 06 May 2002 21:56:53 +0200
Subject: [Twisted-Python] zaibach
Message-ID: <174ob3-0rDVq4C@fwd11.sul.t-online.com>

Hi!

If someone edits files in my home dir, please

a) ask me
b) send me a mail containing WHICH files you edited, and for what
reason

Thanks.

Ciao, Jürgen





From andrew-twisted at puzzling.org  Mon May  6 18:48:43 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 7 May 2002 10:48:43 +1000
Subject: [Twisted-Python] win32 event loop
In-Reply-To: <3CD6AF6C.4000004@itamarst.org>
References: <3CD6AF6C.4000004@itamarst.org>
Message-ID: <20020507004843.GA19302@ritsuko.xware.cx>

On Mon, May 06, 2002 at 07:29:32PM +0300, Itamar Shtull-Trauring wrote:
> 
> So I've done some research, and it looks like I/O Completion ports are the 
> way to go for scalable networking. This will probably mean rewriting (or 

That is also what I understand to be the case on Windows.

> subclassing) the stuff in tcp.py and abstract.py, since this the Proactor 
> pattern, not the Reactor pattern, so things work a bit differently. I'm not 
> even sure how UDP is done, but that's something I'll worry about later.
> 
> [Subtext: Microsoft create more useless work for me]

As far as I can tell, there's currently no way to use I/O Completion
ports from Python.

Have you got any sample code or something which can do this?  Otherwise
I guess we're stuck with writing an extension module.  Bleagh.

I recall reading that Apache 1.x used up to 64 threads doing WFMO, that
would then trigger a central WFMO -- so perhaps it's not that bad.  No
idea what Apache 2 does.  Certainly, only one level of nesting is enough
-- 64 * 64 sockets should be enough for anybody ;)

-Andrew.




From carmstro at twistedmatrix.com  Mon May  6 20:11:23 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 06 May 2002 22:11:23 -0400
Subject: [Twisted-Python] failure.Failure
In-Reply-To: <1020644463.326.3.camel@janus>
References: <1020496815.6031.31.camel@radii>  <1020644463.326.3.camel@janus>
Message-ID: <1020737485.2430.7.camel@radii>

On Sun, 2002-05-05 at 20:21, Glyph Lefkowitz wrote:
> On Sat, 2002-05-04 at 02:20, Christopher Armstrong wrote:
> >   The issue now is what the trap() API should be like. It used to be
> > that fail.trap(types, that, I, want, to, trap) would re-raise the
> > Failure if any of the types matched. This was kinda weird, as it
> > requires code like:
> 
> You've got that backwards.  It would re-raise the exception if _none_ of
> the types matched.
> 
> I consider this behavior important, since unless you raise an exception
> or return a Failure, the next deferred stack call will be a callback,
> not an errback.

Just realized - what if I want to handle two or more different failure
types differently in the same errback?

==
def _ebFoo(self, failure):
    try:
        failure.trap(Foo)
        print "it's a foo!"
    except failure.__class__: #???
        pass

    try:
        failure.trap(Bar)
        print "it's a bar!"
    except failure.__class__:
        pass

    failure.trap(Baz)
    print "it's a baz!"
==

I hope I'm missing something obvious here, because this is *freaking
ugly*. :-)

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Tue May  7 00:31:18 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 7 May 2002 01:31:18 -0500
Subject: [Twisted-Python] Arms Crisis
Message-ID: <20020507063118.GA10209@twistedmatrix.com>

Anyone who has programmed in depth with Twisted probably know about
arm()ing deferreds by now.  Nobody has complained as loudly as I thought
they would, so I'm not sure if this is really that big of a problem, but
I'm questioning my original design decisions regarding .arm().

Originally, I wanted it to be easily determineable whether your callback
would be called before your stack had been escaped; so the system you
returned your Deferred to would .arm() it afterwards.  However, this
creates lots of weird, confusing corners for callbacks to get lost in,
and I have yet to see a situation where it actually matters whether your
current stack frame is escaped before the callback happens.

I would like to propose that we create an experimental mode where .arm()
be made to do nothing (for backwards compatibility), and that
.callback() call whatever callbacks are available immediately; and
.addCallbacks() (and friends) will immediately call any pending
callbacks.  If after an extended period of testing it is discovered that
there are no bugs created with this approach, we should remove .arm()
entirely.

I'd like some feedback on this, though.  Does anyone else think that
callbacks sometimes happening and sometimes not when .addCallbacks() is
called makes a difference?  Anyone feel strongly that .arm() is
confusing and unnecessary?

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |



From j.her at t-online.de  Tue May  7 10:39:00 2002
From: j.her at t-online.de (Juergen Hermann)
Date: Tue, 07 May 2002 18:39:00 +0200
Subject: [Twisted-Python] win32 event loop
In-Reply-To: <20020507004843.GA19302@ritsuko.xware.cx>
Message-ID: <1757z4-1sTJM8C@fwd10.sul.t-online.com>

On Tue, 7 May 2002 10:48:43 +1000, Andrew Bennetts wrote:

> No idea what Apache 2 does.

AFAIK, Apache 2 provides a mixed process / thread model on (nearly?)
all platforms. By tweaking the config, you can make pure models in both
directions, or change the ratio threads/process.
Ciao, Jürgen





From twisted at itamarst.org  Wed May  8 06:36:55 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 08 May 2002 15:36:55 +0300
Subject: [Twisted-Python] XWT
Message-ID: <3CD91BE7.1020904@itamarst.org>

Hi,

I discovered XWT yesterday, and *wow*. This is very similar to something 
I've wanted to do, and it's very very cool.

Now, the thing is, my vision was slightly different - XWT seems to use the 
web model (XML-RPC and SOAP), where you send a request and get a reply, but 
there's no way for server to send data to client. A browser is of course 
limited to this because of HTTP, but in this case you don't need to limit 
yourself.

Why is this a limitation? Consider a chat application. In the XML-RPC model, 
you would need to continously poll the server for new messages - and if you 
want low latency, you need to send even more requests per second. This is 
very inefficent and puts a large load on the server.

What I was thinking of therefore was to use a protocol that is two-way, 
allowing the server to send commands to the client asynchronously. These 
would basically be GUI events just as you would from, say, Javascript. For 
example, in a chat application, a new message would result in the server 
sending a "add new text to message display wdiget" command being sent to the 
client, without the client having to request it.

In addition for event driven client-server applications, using such a 
protocol would also allow building P2P apps that use XWT.

My protocol of choice would be PB, which is a remote object protocol 
developed for the Twisted server framework 
(http://www.twistedmatrix.com/products/spread). It has implementation in 
Python, and a Java implementation I wrote 
(http://itamarst.org/software/TwistedJava-0.5.tar.gz). PB is very efficient, 
asynchronous, and two-way (for example, encoding an array containing a short 
string and two integers will take 150 bytes in XML-RPC, and 20 in PB). It 
was designed for chat systems, massive multiplayer games and other systems 
where latency must be kept at a minimum.

Given the time I would build such a system - a two-way version of XWT - 
using Twisted as a server and PB as the protocol. I don't really have the 
time for this right now :) However, some day I probably will, and it'd be 
great if I could reuse the XWT code, since most of the code for what I'm 
envisioning is basically identical.

I would therefore be very grateful if your design kept such a future 
requirement in mind. I'd be even happier if you'd decide to support PB as 
well, but I'd guess that's less likely to happen ;)

Anyway - great work!




From arashi1 at pd.jaring.my  Thu May  9 07:03:21 2002
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Thu, 9 May 2002 21:03:21 +0800
Subject: [Twisted-Python] XWT
In-Reply-To: <3CD91BE7.1020904@itamarst.org>
References: <3CD91BE7.1020904@itamarst.org>
Message-ID: <200205092103.22058.arashi1@pd.jaring.my>

> I discovered XWT yesterday, and *wow*. This is very similar to something
> I've wanted to do, and it's very very cool.

I think a lot of folks have thought about "adderssing" the inability of 
web-browsers to "accept" incoming messages from a server. Simply that there 
isn't a particular port that a browser would listen to. This sucks as far as 
p2p networking is concerned.

Currently, there are 3 approaches I know of. 

One is the signed applet (as in XWT) method - this requires java (on small 
devices? I doubt it) and also applet signing to enable the applet to open and 
listen on a specific port.

Second is the Javascript LiveConnect  - to serverside javascript method as 
implemented by Netscape. I think this also involves some signing - check the 
javascript docs on the net (somewhere). Incidentally, javascript<->java 
applet<->server is also done via a signed java applet.

Third is the "experimental" http header mimetype: multipart/x-mixed-replace
This method is aka "server push". Konqueror has an experimental add-on called 
"kmultipart" for this. Apparently, the old netscape had it. Not sure about 
mozilla.

This shell script illustrates the thing - cgi-way.
#!/bin/sh
echo "HTTP/1.0 200"
echo "Content-type: multipart/x-mixed-replace;boundary=---ThisRandomString---"
echo ""
echo "---ThisRandomString---"
while true
do
echo "Content-type: text/html"
echo ""
echo "<h2>Processes on this machine updated every 5 seconds</h2>"
echo "time: "
date
echo "<p>"
echo "<plaintext>"
ps -el
echo "---ThisRandomString---"
sleep 5
done

This of  course needs browser support. In fact, all of the above needs browser 
support.

As you can see, it's all a lot of dirty hacks. What we really need is a 
standardised, _secure_ way of doing real p2p communication between client and 
server. Which really makes client and server very similar (oh ya, that's why 
it's called p2p...duh). This should then be implemented by _all_ browsers. I 
still find it strange that we don't have this yet...

>
> Why is this a limitation? Consider a chat application. In the XML-RPC
> model, you would need to continously poll the server for new messages - and
> if you want low latency, you need to send even more requests per second.
> This is very inefficent and puts a large load on the server.

That's why we need a better way. :-(

> What I was thinking of therefore was to use a protocol that is two-way,
> allowing the server to send commands to the client asynchronously. These
> would basically be GUI events just as you would from, say, Javascript. For
> example, in a chat application, a new message would result in the server
> sending a "add new text to message display wdiget" command being sent to
> the client, without the client having to request it.
>
> In addition for event driven client-server applications, using such a
> protocol would also allow building P2P apps that use XWT.

I don't think we want to use XWT. It'll only add yet another dependency to the 
"dependency hell".

> My protocol of choice would be PB, which is a remote object protocol
> developed for the Twisted server framework
> (http://www.twistedmatrix.com/products/spread). It has implementation in
> Python, and a Java implementation I wrote
> (http://itamarst.org/software/TwistedJava-0.5.tar.gz). PB is very
> efficient, asynchronous, and two-way (for example, encoding an array
> containing a short string and two integers will take 150 bytes in XML-RPC,
> and 20 in PB). It was designed for chat systems, massive multiplayer games
> and other systems where latency must be kept at a minimum.

I think PB would be great..but what about security concerns?

Right now, you could write a signed java applet (in jython!? :-)) to do this 
very thing - a PB "communicator" on the browser end. I could be wrong but I 
don't think you really need XVT at all.

But then...we have the same crap thing of needing java. Have you seen how huge 
the latest JRE is? It's larger than a mozilla download! I think a better 
approach is to write a mozilla plugin. At least then you would have all the 
important platforms covered. This plugin would be smaller, I think.

Of course...we could create our own _strict_ XML based browser in python and 
wxpython or tkinter (erm...yeah)  - deal with only strict xhtml so we can use 
a generic xml parser. Of course then you need to think about layout and so 
on...

Anyway, my 2 cents.
-- 
Regards,
Mukhsein Johari



From dp at ulaluma.com  Thu May  9 10:44:31 2002
From: dp at ulaluma.com (Donovan Preston)
Date: Thu, 9 May 2002 09:44:31 -0700
Subject: [Twisted-Python] Two-Way Web
In-Reply-To: <200205092103.22058.arashi1@pd.jaring.my>
Message-ID: <097FF0E8-636C-11D6-9620-003065B25CAA@ulaluma.com>

Two-Way Web is the idea that the server should be able to "push" data to 
a web browser as long as that web browser is open. Along with Mukhsein, 
I too cannot fathom why the big browser giants never implemented 
anything like this. I suppose Netscape thought they were doing it with 
Java and LiveConnect, but Java takes far too long to initialize and is 
far too big for it to be a viable option for me.

Mukhsein has covered most of the bases when it comes to Java options, 
and I was not aware of multipart/x-mixed-replace which might be an 
interesting idea if it can work cross-browser, but there are a couple 
more options I'll bring up. None are particularly satisfying, but 
neither are the Java options. Of course, the "build your own rich 
desktop web-browser replacement" idea is the ideal, but while it is an 
attractive idea I don't see it gaining as wide an audience as a 
relatively pure web solution would.

First, there's KnowNow, who have implemented a Frame-based, 
JavaScript-based event router system. There are three frames, the main 
frame, and two invisible communications frames, one "in" and one "out". 
The "in" frame must be kept alive somehow by simply never closing the 
document, but continuously sending JavaScript upon events occurring on 
the server. The "out" frame is controlled by the main page's JavaScript 
and is manipulated in response to button clicks and typing to cause a 
POST to the server with some updated data.

Then, there's my "Extremely lightweight Flash 5 movie which opens a 
persistent connection to the Twisted server" idea. I had this idea over 
a year ago when Flash 5 first came out, and added support for a 
persistent socket connection to a server. I have reimplemented my 
original proof-of-concept using Twisted as the server the movie connects 
to, and I'll be toying with coming up with an architecture within 
Twisted and within the Flash movie that will allow real-time 
communication both ways, probably involving LiveConnect between the 
Flash Plugin and the JavaScript engine in the browser.

I know none of these ideas are ideal, but to me it's mostly about 
exploring what is possible in the most lightweight, non-intrusive 
manner. To me, it's about proving that something can be done a 
particular way before committing to writing a large amount of code to 
support the system.

Ultimately, I would like to understand a little more about how the 
existing PB infrastructure could be leveraged in a system like this, and 
hopefully we can come up with a single back-end API and message flow 
strategy that could be used with multiple front-ends.

Thoughts?

Donovan




From liiwi at iki.fi  Fri May 10 17:02:37 2002
From: liiwi at iki.fi (Jaakko Niemi)
Date: 11 May 2002 02:02:37 +0300
Subject: [Twisted-Python] a patch
Message-ID: <87sn4zzjw2.fsf@jumper.lonesom.pp.fi>


 Attached is a small patch to make webwidgets shut up or
complain when I feed them invalid stuff. What's the policy
regarding situations where something gets wrong type of
object, for example: traceback or handle it?

        
-------------- next part --------------
A non-text attachment was scrubbed...
Name: webwidgets.shutup.patch
Type: text/x-patch
Size: 1194 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020511/fb848e4c/attachment-0002.bin>

From dp at twistedmatrix.com  Fri May 10 23:29:46 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 10 May 2002 22:29:46 -0700
Subject: [Twisted-Python] Deferred support in DOMTemplate
Message-ID: <1B399628-64A0-11D6-8841-00039376B1AE@twistedmatrix.com>

Hello everyone

A while back glyph suggested I add Deferred support to DOMTemplate. If a 
specific node handler wanted to defer it's return value, it would create 
a deferred and return it. He also requested a simple example of using 
it. I thought it might be interesting to more people than just glyph, so 
here it is.

This will only work with the latest CVS.

I might explain a couple of things while I am at it:

DOMTemplate is an HTML templating system that uses the DOM (Document 
Object Model) to give Python code an interface for manipulating an HTML 
template. Basically, you register your interest in tags containing 
certain attributes, like a particular class, id, or tag name. Then, 
DOMTemplate crawls the dom looking for matching tags. When one is found, 
your callback is called with an instance of xml.dom.minidom.Node, and 
you are able to create new nodes, move, copy nodes, and delete them. 
Thus, all of the repeat logic is implemented in Python, and no 
templating logic is in the HTML at all -- merely attributes on tags that 
hook them up with Python methods.

An rpy is a Resource-generating python file. If you place an rpy in a 
twisted.web.static tree, the rpy handler will execute the file and look 
in the resulting namespace for an item named "resource". This gives you 
a quick and easy way to deploy new applications into an already-running 
web server. It is also great for debugging, because the file will be 
reloaded each time you hit it.

Hope this is enlightening!

Donovan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: DeferredUsingPage.rpy
Type: application/applefile
Size: 475 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020510/ce283116/attachment-0004.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: DeferredUsingPage.rpy
Type: application/text
Size: 911 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020510/ce283116/attachment-0005.bin>

From carmstro at twistedmatrix.com  Sat May 11 03:23:42 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 11 May 2002 05:23:42 -0400
Subject: [Twisted-Python] Deferred support in DOMTemplate
In-Reply-To: <1B399628-64A0-11D6-8841-00039376B1AE@twistedmatrix.com>
References: <1B399628-64A0-11D6-8841-00039376B1AE@twistedmatrix.com>
Message-ID: <1021109023.1018.4.camel@radii>

On Sat, 2002-05-11 at 01:29, Donovan Preston wrote:
> Hope this is enlightening!

I see that you separated DOMTemplate from the part that relies on the
--path-based web server -- thanks for doing this. As you've probably
seen me say before, I believe that all library code should be flexible
in which ways it can be used, while App-specific code can rely on stuff
like the filesystem. But I'm being long-winded. Thanks. :-)

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From andrew-twistedcommits at puzzling.org  Sat May 11 05:08:44 2002
From: andrew-twistedcommits at puzzling.org (Andrew Bennetts)
Date: Sat, 11 May 2002 21:08:44 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Expanded defer.html to explain Deferreds in a little more detail.
In-Reply-To: <E176U7u-0006GB-00@zaibach.twistedmatrix.com>
References: <E176U7u-0006GB-00@zaibach.twistedmatrix.com>
Message-ID: <20020511110843.GA1333@frobozz.local>

On Sat, May 11, 2002 at 05:29:22AM -0500, spiv CVS wrote:
> Modified files:
> Twisted/doc/howto/defer.html 1.3 1.4
> 
> Log message:
> Expanded defer.html to explain Deferreds in a little more detail.
> 
> In particular, I've tried to explain the similarities between try/except and
> callback/errback.  Criticism welcome :)
> 
> Incidentally, could someone have a good look at the last bit, where I point
> out the difference between .addCallbacks and .addCallback + .addErrback?  I'd
> like to know if
>    a) I'm describing the current behaviour correctly, and
>    b) If other people consider this behaviour to be confusing too.

Actually, I realised I phrased that question badly.  I meant:
     b) If other people think that the current API docs don't make this
        behaviour clear enough too?

Would anyone mind if I reworked some of the docstrings in defer.py?

-Andrew.




From twisted at itamarst.org  Sun May 12 08:33:06 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 12 May 2002 17:33:06 +0300
Subject: [Twisted-Python] process.py
Message-ID: <3CDE7D22.80106@itamarst.org>

I tried refactoring process.Process to support new API, but I gave up - it 
seems kinda broken, i.e. closes when the process's stdout closes, instead of 
when the subprocess dies. Anyway, someone else should fix it. I will do the 
win32 Process. We probably ought to write a few new tests.

Once we do that, and rename all reactor modules, I think we're go for a new 
release.




From bob at redivi.com  Sun May 12 20:23:05 2002
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 12 May 2002 22:23:05 -0400
Subject: [Twisted-Python] HTTP Header names for stupid clients
In-Reply-To: <3CDE7D22.80106@itamarst.org>
Message-ID: <5B4EFFCD-6618-11D6-AEA4-0003938210D6@redivi.com>

I've seen some poorly written embedded clients bonk out if the 
capitalization of http headers isn't Studly-Caps ..  maybe someone 
should add something like:
name='-'.join(map(string.capitalize,name.split('-')))

to http.Request._sendHeader(name,value)  ?

I mean, you're already capitalizing it higher up the tree (in write).. 
but string.capitalize only does the first char, not the first char after 
the hyphen.  Also, you're sending 'Transfer-encoding' not 
'Transfer-Encoding' as one might expect.

I don't know, it's totally bad form for the clients to be that stupid, 
but it's something to consider.

-bob




From andrew-twisted at puzzling.org  Sun May 12 22:33:38 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 13 May 2002 14:33:38 +1000
Subject: [Twisted-Python] HTTP Header names for stupid clients
In-Reply-To: <5B4EFFCD-6618-11D6-AEA4-0003938210D6@redivi.com>
References: <3CDE7D22.80106@itamarst.org> <5B4EFFCD-6618-11D6-AEA4-0003938210D6@redivi.com>
Message-ID: <20020513043338.GB31338@ritsuko.xware.cx>

On Sun, May 12, 2002 at 10:23:05PM -0400, Bob Ippolito wrote:
> 
> I don't know, it's totally bad form for the clients to be that stupid, 
> but it's something to consider.

No, I think you're right... RFCs usually advocate a "be lenient in what
you accept, and strict in what you send" policy.  That's the way to
maximise interoperability, and I think it's sound advice.

On the other hand, I'm not familiar enough with twisted.protocols.http
to say how easy it is to fix this :)

-Andrew.




From bob at redivi.com  Sun May 12 22:55:05 2002
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 13 May 2002 00:55:05 -0400
Subject: [Twisted-Python] HTTP Header names for stupid clients
In-Reply-To: <20020513043338.GB31338@ritsuko.xware.cx>
Message-ID: <976E5BC4-662D-11D6-AEA4-0003938210D6@redivi.com>

Well, that one line I posted *is* the fix (provided it goes in the right 
place).. actually

On Monday, May 13, 2002, at 12:33 AM, Andrew Bennetts wrote:

> On Sun, May 12, 2002 at 10:23:05PM -0400, Bob Ippolito wrote:
>>
>> I don't know, it's totally bad form for the clients to be that stupid,
>> but it's something to consider.
>
> No, I think you're right... RFCs usually advocate a "be lenient in what
> you accept, and strict in what you send" policy.  That's the way to
> maximise interoperability, and I think it's sound advice.
>
> On the other hand, I'm not familiar enough with twisted.protocols.http
> to say how easy it is to fix this :)




From andrew-twisted at puzzling.org  Sun May 12 23:26:17 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 13 May 2002 15:26:17 +1000
Subject: [Twisted-Python] HTTP Header names for stupid clients
In-Reply-To: <976E5BC4-662D-11D6-AEA4-0003938210D6@redivi.com>
References: <20020513043338.GB31338@ritsuko.xware.cx> <976E5BC4-662D-11D6-AEA4-0003938210D6@redivi.com>
Message-ID: <20020513052617.GA32386@ritsuko.xware.cx>

On Mon, May 13, 2002 at 12:55:05AM -0400, Bob Ippolito wrote:
> Well, that one line I posted *is* the fix (provided it goes in the right 
> place).. actually

The right place can be a tricky thing... :)

-Andrew.




From carmstro at twistedmatrix.com  Tue May 14 20:21:11 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 14 May 2002 22:21:11 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] changed reactor module names
In-Reply-To: <E177eYy-0006gu-00@zaibach.twistedmatrix.com>
References: <E177eYy-0006gu-00@zaibach.twistedmatrix.com>
Message-ID: <1021429274.8234.0.camel@radii>

Isn't it about time we broke all the reactors off into a separate
subpackage of twisted.internet?

On Tue, 2002-05-14 at 11:50, itamarst CVS wrote:
> Modified files:
> Twisted/twisted/internet/gtkreactor.py None 1.1
> Twisted/twisted/internet/javareactor.py None 1.1
> Twisted/twisted/internet/pollreactor.py None 1.1
> Twisted/twisted/internet/qtreactor.py None 1.1
> Twisted/twisted/internet/tksupport.py None 1.1
> Twisted/twisted/internet/win32eventreactor.py None 1.1
> Twisted/twisted/internet/wxsupport.py None 1.1
-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Tue May 14 23:42:12 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 15 May 2002 00:42:12 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] changed reactor module
 names
In-Reply-To: <1021429274.8234.0.camel@radii>
References: <E177eYy-0006gu-00@zaibach.twistedmatrix.com>
	<1021429274.8234.0.camel@radii>
Message-ID: <20020515.004212.115903932.glyph@twistedmatrix.com>


From: Christopher Armstrong <carmstro at twistedmatrix.com>
Subject: [Twisted-Python] Re: [Twisted-commits] changed reactor module names
Date: 14 May 2002 22:21:11 -0400

> Isn't it about time we broke all the reactors off into a separate
> subpackage of twisted.internet?

Since that's really all that twisted.internet does, I don't think that it makes
sense to do so.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020515/43f90481/attachment.sig>

From carmstro at twistedmatrix.com  Wed May 15 11:10:00 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 15 May 2002 13:10:00 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the makeidentity test was FAILING,
 and we never noticed, cause Deferred catches exceptions in errback (this
 fixes failure, not the Deferred issue)
In-Reply-To: <E1781js-0007k9-00@zaibach.twistedmatrix.com>
References: <E1781js-0007k9-00@zaibach.twistedmatrix.com>
Message-ID: <1021482602.11320.3.camel@radii>

So, we need two things for tests:
 1) a single reactor that all tests are run in
 2) an errback that we can attach to deferreds to make PyUnit show the
    error (no idea how to do this one)

On Wed, 2002-05-15 at 12:34, itamarst CVS wrote:
> Modified files:
> Twisted/twisted/test/test_cred.py 1.5 1.6
> 
> Log message:
> aaaaargh. the makeidentity test was FAILING, and we never noticed, 
> cause Deferred catches exceptions in errback (this fixes failure, not
> the Deferred issue)

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Wed May 15 16:08:41 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 15 May 2002 17:08:41 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the
 makeidentity test was FAILING, and we never noticed, cause Deferred
 catches exceptions in errback (this fixes failure, not the Deferred issue)
In-Reply-To: <1021482602.11320.3.camel@radii>
References: <E1781js-0007k9-00@zaibach.twistedmatrix.com>
	<1021482602.11320.3.camel@radii>
Message-ID: <20020515.170841.41631938.glyph@twistedmatrix.com>


From: Christopher Armstrong <carmstro at twistedmatrix.com>
Date: 15 May 2002 13:10:00 -0400

> So, we need two things for tests:
>  1) a single reactor that all tests are run in
>  2) an errback that we can attach to deferreds to make PyUnit show the
>     error (no idea how to do this one)

I think that we need a test harness other than PyUnit for running the tests,
really -- both to make it easier to run only one specific test, and to support
event-based tests or ones which can time out.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020515/2b03a34e/attachment.sig>

From andrew-twisted at puzzling.org  Wed May 15 17:39:10 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 16 May 2002 09:39:10 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the makeidentity test was FAILING, and we never noticed, cause Deferred catches exceptions in errback (this fixes failure, not the Deferred issue)
In-Reply-To: <20020515.170841.41631938.glyph@twistedmatrix.com>
References: <E1781js-0007k9-00@zaibach.twistedmatrix.com> <1021482602.11320.3.camel@radii> <20020515.170841.41631938.glyph@twistedmatrix.com>
Message-ID: <20020515233910.GA739@frobozz.local>

On Wed, May 15, 2002 at 05:08:41PM -0500, Glyph Lefkowitz wrote:
> 
> From: Christopher Armstrong <carmstro at twistedmatrix.com>
> Date: 15 May 2002 13:10:00 -0400
> 
> > So, we need two things for tests:
> >  1) a single reactor that all tests are run in
> >  2) an errback that we can attach to deferreds to make PyUnit show the
> >     error (no idea how to do this one)
> 
> I think that we need a test harness other than PyUnit for running the tests,
> really -- both to make it easier to run only one specific test, and to support
> event-based tests or ones which can time out.

The timeout problem would be less of an issue if Deferreds had that .timeout
method I proposed a while back...

...I guess I should stop whining and just implement it, huh? :)

-Andrew.




From glyph at twistedmatrix.com  Wed May 15 17:43:54 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 15 May 2002 18:43:54 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the
 makeidentity test was FAILING, and we never noticed, cause Deferred
 catches exceptions in errback (this fixes failure, not the Deferred issue)
In-Reply-To: <20020515233910.GA739@frobozz.local>
References: <1021482602.11320.3.camel@radii>
	<20020515.170841.41631938.glyph@twistedmatrix.com>
	<20020515233910.GA739@frobozz.local>
Message-ID: <20020515.184354.11626695.glyph@twistedmatrix.com>


From: Andrew Bennetts <andrew-twisted at puzzling.org>
Date: Thu, 16 May 2002 09:39:10 +1000

> On Wed, May 15, 2002 at 05:08:41PM -0500, Glyph Lefkowitz wrote:
> The timeout problem would be less of an issue if Deferreds had that .timeout
> method I proposed a while back...
> 
> ...I guess I should stop whining and just implement it, huh? :)

That might be problematic just in terms of dependencies (it already imports
twisted.internet.task, though it shouldn't...).  reactor.callLater(timeout,
deferred.[err|call]back) seems pretty straightforward to me.

Although, perhaps Deferred ought to be in twisted.internet since it sort of
implicitly depends on the main-loop anyway.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020515/39c7ab84/attachment.sig>

From twisted at itamarst.org  Thu May 16 04:55:11 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 16 May 2002 13:55:11 +0300
Subject: [Twisted-Python] What we need for next release
Message-ID: <3CE3900F.5010504@itamarst.org>

1. Switch to new Process API, unix and win32, and write tests for it.

2. Switch to new thread dispatching API.

3. Deal with connector issue.

Anything else?

(switching to new APIs internally, docs, etc. can be added as we go along.)




From andrew-twisted at puzzling.org  Thu May 16 10:09:45 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 17 May 2002 02:09:45 +1000
Subject: [Twisted-Python] What we need for next release
In-Reply-To: <3CE3900F.5010504@itamarst.org>
References: <3CE3900F.5010504@itamarst.org>
Message-ID: <20020516160945.GA1764@frobozz.local>

On Thu, May 16, 2002 at 01:55:11PM +0300, Itamar Shtull-Trauring wrote:
> 1. Switch to new Process API, unix and win32, and write tests for it.
> 
> 2. Switch to new thread dispatching API.
> 
> 3. Deal with connector issue.
> 
> Anything else?

I'd like to make test_ftp.py not hang for reactors other than the default...
preferably by fixing the problem, rather than by putting an "if reactor.foo
is poll:" in the tests :)

It seems wrong to release with runtests not working 100%.  I'm working on
fixing it, but it may take a couple of days or more, depending on various
things.

-Andrew.




From andrew-twistedcommits at puzzling.org  Wed May 15 17:41:41 2002
From: andrew-twistedcommits at puzzling.org (Andrew Bennetts)
Date: Thu, 16 May 2002 09:41:41 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the makeidentity test was FAILING, and we never noticed, cause Deferred catches exceptions in errback (this fixes failure, not the Deferred issue)
In-Reply-To: <E1781js-0007k9-00@zaibach.twistedmatrix.com>
References: <E1781js-0007k9-00@zaibach.twistedmatrix.com>
Message-ID: <20020515234141.GB739@frobozz.local>

On Wed, May 15, 2002 at 11:34:56AM -0500, itamarst CVS wrote:
> Modified files:
> Twisted/twisted/test/test_cred.py 1.5 1.6
> 
> Log message:
> aaaaargh. the makeidentity test was FAILING, and we never noticed, cause
> Deferred catches exceptions in errback (this fixes failure, not the
> Deferred issue)

Incidentally, I've got a workaround for the errback problem in test_ftp.py.
It's not pretty, but it works ok.

-Andrew.




From twisted at itamarst.org  Sun May 19 10:10:04 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 19 May 2002 19:10:04 +0300
Subject: [Twisted-Python] What we need for next release
References: <3CE3900F.5010504@itamarst.org>
Message-ID: <3CE7CE5C.9090703@itamarst.org>

> 1. Switch to new Process API, unix and win32, and write tests for it.

I did the win32 and at least part of the testing part - now someone had
better fix process.py so unix uses new APIs.





From twisted at itamarst.org  Mon May 20 04:57:56 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 20 May 2002 13:57:56 +0300
Subject: [Twisted-Python] Re: [Twisted-commits] aaaaargh. the makeidentity
 test was FAILING, and we never noticed, cause Deferred catches exceptions
 in errback (this fixes failure, not the Deferred issue)
References: <E1781js-0007k9-00@zaibach.twistedmatrix.com> <20020515234141.GB739@frobozz.local>
Message-ID: <3CE8D6B4.5080706@itamarst.org>

Andrew Bennetts wrote:

> Incidentally, I've got a workaround for the errback problem in test_ftp.py.
> It's not pretty, but it works ok.

I've fixed this the correct way - runtests now replaces log.deferr() so that
exceptions get raised, not logged. This means anywhere that we have:

   try:
       foo()
   except:
       log.deferr()

The exception will be raised, not logged, and this almost certianly includes 
Deferreds.





From glyph at twistedmatrix.com  Mon May 20 17:49:16 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 20 May 2002 18:49:16 -0500 (CDT)
Subject: [Twisted-Python] What we need for next release
In-Reply-To: <3CE3900F.5010504@itamarst.org>
References: <3CE3900F.5010504@itamarst.org>
Message-ID: <20020520.184916.39149551.glyph@twistedmatrix.com>


From: Itamar Shtull-Trauring <twisted at itamarst.org>
Subject: [Twisted-Python] What we need for next release
Date: Thu, 16 May 2002 13:55:11 +0300

> 1. Switch to new Process API, unix and win32, and write tests for it.

Done.  Really.  And it _passes_ the tests, too.

> 2. Switch to new thread dispatching API.

I think I will pick this up next, it shouldn't be _nearly_ as hard as this
other crap.

> 3. Deal with connector issue.

Does anyone else want to handle this?

> Anything else?

I think these are necessary: 

    Start adding __confidence__ (anybody think of a better name for this?)
    attribute to modules / classes / interfaces to indicate how certain we are
    that these are set in stone and will be supported in future versions.  Some
    discussion is necessary to decide what values this attribute might have.

    PB Failures (almost done, from what I hear)

These would be nice:

    Plugin system for twisted.enterprise.row so that DBReflector could
    theoretically work on something other than Postgres.

    Reactors should be loadable by twisted.python.plugin, to allow external
    instrumentation.

    A little more cleanup around Process objects, to be more complete
    wrt. in/out/err distinction.  a kill() method maybe.

And this is blue-sky, but I really think it's necessary for sysadmins:

    Python serialization to XML (DOM), a-la Jelly, with support for creating
    customized nodes, so that there is an easily editable, mostly-readable
    representation of a saved Twisted server.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020520/8a4f1d91/attachment.sig>

From exarkun at meson.dyndns.org  Tue May 21 21:39:55 2002
From: exarkun at meson.dyndns.org (exarkun at meson.dyndns.org)
Date: Tue, 21 May 2002 23:39:55 -0400 (EDT)
Subject: [Twisted-Python] One time only, I __promise__
Message-ID: <Pine.LNX.4.44.0205212338480.8265-100000@localhost>

<radix> exarkun: subscribe AND POST to TPML
<exarkun> radix: Why?
<radix> exarkun: BECAUSE

Yay Twistardeduldoi.  ttfn.

"There is no reason for any individual to have a computer in their
home."
                -- Ken Olson, President of DEC, World Future Society
                   Convention, 1977
--
 11:38pm up 1 day, 0:17, 0 users, load average: 0.10, 0.19, 0.14




From carmstro at twistedmatrix.com  Tue May 21 22:32:44 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 22 May 2002 00:32:44 -0400
Subject: [Twisted-Python] One time only, I __promise__
In-Reply-To: <Pine.LNX.4.44.0205212338480.8265-100000@localhost>
References: <Pine.LNX.4.44.0205212338480.8265-100000@localhost>
Message-ID: <1022041966.17166.1.camel@radii>

On Tue, 2002-05-21 at 23:39, exarkun at meson.dyndns.org wrote:
> 
> <radix> exarkun: subscribe AND POST to TPML
> <exarkun> radix: Why?
> <radix> exarkun: BECAUSE
> 
> Yay Twistardeduldoi.  ttfn.
> 
> "There is no reason for any individual to have a computer in their
> home."
>                 -- Ken Olson, President of DEC, World Future Society
>                    Convention, 1977
> --
>  11:38pm up 1 day, 0:17, 0 users, load average: 0.10, 0.19, 0.14

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From carmstro at twistedmatrix.com  Tue May 21 22:34:11 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 22 May 2002 00:34:11 -0400
Subject: [Twisted-Python] One time only, I __promise__
In-Reply-To: <1022041966.17166.1.camel@radii>
References: <Pine.LNX.4.44.0205212338480.8265-100000@localhost> 
	<1022041966.17166.1.camel@radii>
Message-ID: <1022042053.17253.0.camel@radii>

ARGH. "Send" is so very close to "X" (delete-window). Sorry about this.

On Wed, 2002-05-22 at 00:32, Christopher Armstrong wrote:
> On Tue, 2002-05-21 at 23:39, exarkun at meson.dyndns.org wrote:
> > 
> > <radix> exarkun: subscribe AND POST to TPML
> > <exarkun> radix: Why?
> > <radix> exarkun: BECAUSE
> > 
> > Yay Twistardeduldoi.  ttfn.
> > 
> > "There is no reason for any individual to have a computer in their
> > home."
> >                 -- Ken Olson, President of DEC, World Future Society
> >                    Convention, 1977
> > --
> >  11:38pm up 1 day, 0:17, 0 users, load average: 0.10, 0.19, 0.14
> 
> -- 
>                                 Chris Armstrong
>                          << radix at twistedmatrix.com >>
>                 http://twistedmatrix.com/users/carmstro.twistd/
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From steve.waterbury at gsfc.nasa.gov  Wed May 22 11:38:31 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Wed, 22 May 2002 13:38:31 -0400
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
Message-ID: <3CEBD797.3530EBC5@gsfc.nasa.gov>

Twisted Gurus,

I'm just starting to experiment with Twisted, and am trying out the 
example in the "Introduction to Twisted Enterprise", slightly modified: 
I have a PostgreSQL database called "test", which has a table called 
"schema", which has columns called "schema_name" and "identification" 
(among others), and the value of schema_name in one row is "pgpdm_schema").  
My script is:
------------------------------------------------------------------------
from twisted.enterprise import adbapi
import sys
class TestDatabase(adbapi.Augmentation):
    def getSchemaByName(self,schemaname):
        sql = """SELECT identification from schema WHERE schema_name = %s"""
        return self.runOperation(sql,schemaname)

def gotSchemaByName(resultlist):
    ident = resultlist[0][0]
    print resultlist
    print "Schema has identifier %s." % ident

# dbpool = adbapi.ConnectionPool("psycopg","test","waterbug","")
dbpool = adbapi.ConnectionPool("pyPgSQL.PgSQL","test","waterbug","")
db = TestDatabase(dbpool)
db.getSchemaByName("pgpdm_schema").addCallbacks(gotSchemaByName, db.operationError).arm()
------------------------------------------------------------------------

I've tested the sql using both psycopg and pyPgSQL in interactive 
sessions, so I know this query should produce an output of 

[['PGPDM-1.0']]

I've tried it with both pyPgSQL and psycopg ... in both cases, the 
output is:
--------------------------------------------------------------------------
[waterbug at beeblebrox twisted]$ python db_test.py 
Enabling Multithreading.
Connecting to database: pyPgSQL.PgSQL ('test', 'waterbug', '') {}
--------------------------------------------------------------------------

Shouldn't the print statements be producing output on stdout?  
(I'm new to callbacks, so I'm sure I've missed something ...)  

TIA!
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html
    "An idiot with a computer is a faster, better idiot." - Rick Julius



From fincher.8 at osu.edu  Wed May 22 13:46:15 2002
From: fincher.8 at osu.edu (Jeremy Fincher)
Date: Wed, 22 May 2002 15:46:15 -0400
Subject: [Twisted-Python] How should this mailing list be used?
Message-ID: <000401c201c9$557a5510$cd636ba4@functor>

I'll be reading a lot of Twisted code in the next while, and will
undoubtedly notice little things that might be optimized or tiny bugs
that could be fixed.  Is it alright if I send mails to this list with
those things?  Is that how I should handle things when I find those
things?
 
(As I mentioned before in the IRC channel, I honestly just don't have
the time to make patches and test them and submit them, but I can
generally find the time to make a note about them somewhere, and it's
been mentioned on the IRC channel (by radix) that here might be the most
appropriate place to do so.)
 
Thanks!
 
Jeremy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020522/885a5379/attachment.html>

From glyph at twistedmatrix.com  Wed May 22 14:24:40 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 22 May 2002 15:24:40 -0500 (CDT)
Subject: [Twisted-Python] How should this mailing list be used?
In-Reply-To: <000401c201c9$557a5510$cd636ba4@functor>
References: <000401c201c9$557a5510$cd636ba4@functor>
Message-ID: <20020522.152440.88500716.glyph@twistedmatrix.com>

From: Jeremy Fincher <fincher.8 at osu.edu>
Subject: [Twisted-Python] How should this mailing list be used?
Date: Wed, 22 May 2002 15:46:15 -0400

> I'll be reading a lot of Twisted code in the next while, and will
> undoubtedly notice little things that might be optimized or tiny bugs
> that could be fixed.  Is it alright if I send mails to this list with
> those things?  Is that how I should handle things when I find those
> things?

> (As I mentioned before in the IRC channel, I honestly just don't have
> the time to make patches and test them and submit them, but I can
> generally find the time to make a note about them somewhere, and it's
> been mentioned on the IRC channel (by radix) that here might be the most
> appropriate place to do so.)

I do appreciate commentary on the quality of the code you're reading or using
in Twisted.  Small inefficiencies should probably just be ignored; if something
doesn't show up in a profile somewhere, then it's almost certainly not worth
optimizing.

We _do_ have a bugtracker that you could submit bugs to -- 

    http://twistedmatrix.com/users/itamarst.twistd/bugs/

A mention on the list (as the bugtracker still doesn't have e-mail
notification) should probably accompany that.

Be forewarned, though, that anything you perceive to be an "issue" with the
framework might be there by design, or too much trouble to fix.  If you are
going to suggest changes that you have neither the time or inclination to test
the impact of, they could very well be ignored.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020522/aa6a555f/attachment.sig>

From fincher.8 at osu.edu  Wed May 22 14:59:27 2002
From: fincher.8 at osu.edu (Jeremy Fincher)
Date: Wed, 22 May 2002 16:59:27 -0400
Subject: [Twisted-Python] How should this mailing list be used?
In-Reply-To: <20020522.152440.88500716.glyph@twistedmatrix.com>
Message-ID: <001001c201d3$8f5eff10$cd636ba4@functor>

Well, if it is there by design, and someone would be so kind to explain
what the design is, then I'd learn even more about Twisted than before!
:)

Jeremy

> Be forewarned, though, that anything you perceive to be an "issue"
with
> the
> framework might be there by design, or too much trouble to fix.  If
you
> are
> going to suggest changes that you have neither the time or inclination
to
> test
> the impact of, they could very well be ignored.




From twisted at itamarst.org  Wed May 22 16:31:52 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 23 May 2002 00:31:52 +0200
Subject: [Twisted-Python] How should this mailing list be used?
References: <001001c201d3$8f5eff10$cd636ba4@functor>
Message-ID: <3CEC1C58.4030303@itamarst.org>

Jeremy Fincher wrote:

> Well, if it is there by design, and someone would be so kind to explain
> what the design is, then I'd learn even more about Twisted than before!

Design? Actually, Twisted is the result of a series of random mutations, 
driven by a bunch of d20 dice glyph has lying around in his basement. 
Usually he has his pet hamster radix roll them.




From glyph at twistedmatrix.com  Wed May 22 16:17:33 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 22 May 2002 17:17:33 -0500 (CDT)
Subject: [Twisted-Python] How should this mailing list be used?
In-Reply-To: <3CEC1C58.4030303@itamarst.org>
References: <001001c201d3$8f5eff10$cd636ba4@functor>
	<3CEC1C58.4030303@itamarst.org>
Message-ID: <20020522.171733.66086005.glyph@twistedmatrix.com>

From: Itamar Shtull-Trauring <twisted at itamarst.org>
Subject: Re: [Twisted-Python] How should this mailing list be used?
Date: Thu, 23 May 2002 00:31:52 +0200

> Jeremy Fincher wrote:
> 
> > Well, if it is there by design, and someone would be so kind to explain
> > what the design is, then I'd learn even more about Twisted than before!
> 
> Design? Actually, Twisted is the result of a series of random mutations, 
> driven by a bunch of d20 dice glyph has lying around in his basement. 
> Usually he has his pet hamster radix roll them.

Don't knock the "design dice".  They're magic!  I got them exchange for my cow
(my last posession at the time) from a guy at Rational who swears they're the
"unwritten final phase" of the Unified Process.  It cost dearly, but now I'm a
real Software Engineer!

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020522/b18e4b2c/attachment.sig>

From andrew-twisted at puzzling.org  Wed May 22 19:41:47 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 23 May 2002 11:41:47 +1000
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
In-Reply-To: <3CEBD797.3530EBC5@gsfc.nasa.gov>
References: <3CEBD797.3530EBC5@gsfc.nasa.gov>
Message-ID: <20020523014147.GB7731@ritsuko.xware.cx>

On Wed, May 22, 2002 at 01:38:31PM -0400, Steve Waterbury wrote:
> Twisted Gurus,
> 
> I'm just starting to experiment with Twisted, and am trying out the 
> example in the "Introduction to Twisted Enterprise", slightly modified: 

<snip>

Was that your complete script?

If so, it also needs to start the Twisted main-loop:
---
from twisted.internet import main
main.run()
---

[Or for the version in CVS:
from twisted.internet import reactor
reactor.run()
]

The Twisted Enterprise docs should probably be updated to make this
clearer, rather than assuming that people are already familiar with the
Twisted main-loop...

I'd suggest also reading "Writing Twisted Servers".  It's by far the
best general overview of Twisted we have at the moment, even if you
don't intend to write servers with it.

Let us know if you any other problems.

-Andrew.




From steve.waterbury at gsfc.nasa.gov  Thu May 23 09:36:48 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Thu, 23 May 2002 11:36:48 -0400
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
References: <3CEBD797.3530EBC5@gsfc.nasa.gov> <20020523014147.GB7731@ritsuko.xware.cx>
Message-ID: <3CED0C90.4CBEDEA2@gsfc.nasa.gov>

Andrew Bennetts wrote:
> 
> On Wed, May 22, 2002 at 01:38:31PM -0400, Steve Waterbury wrote:
> > Twisted Gurus,
> >
> > I'm just starting to experiment with Twisted, and am trying out the
> > example in the "Introduction to Twisted Enterprise", slightly modified:
> 
> <snip>
> 
> Was that your complete script?

It was.  

> If so, it also needs to start the Twisted main-loop:
> ---
> from twisted.internet import main
> main.run()
> ---

Thanks -- that helped a lot!  :^)

> [Or for the version in CVS:
> from twisted.internet import reactor
> reactor.run()
> ]

Good to hear that "main" got the name-change!

> The Twisted Enterprise docs should probably be updated to make this
> clearer, rather than assuming that people are already familiar with the
> Twisted main-loop...

I might be able to help some with the Twisted Enterprise docs, since 
I hope to use it pretty intensively in our app ... 

> I'd suggest also reading "Writing Twisted Servers".  It's by far the
> best general overview of Twisted we have at the moment, even if you
> don't intend to write servers with it.

I'd read that at least twice, but I guess I hadn't grokked it.  
But now that I know the main loop needs to be run explicitly, 
it makes perfect sense ... how else would I get the result of 
callback?  I'm learning ...

> Let us know if you any other problems.

Right:  I got a traceback that said my "result" was not subscriptable.  
Looking at the code for adbapi.ConnectionPool in Twisted 0.17.4, 
I noticed that the "runOperation" method used in the example ultimately
calls _runOperation, which says it "is used for non-query operations 
that don't want "fetch*" to be called" ... doh!  No wonder my "result" 
was not subscriptable!  ;^)  

So I created a "runQuery" method for adbapi.ConnectionPool:

    def runQuery(self, *args, **kw):
        d = defer.Deferred()
        apply(self.query, (d.callback,d.errback)+args, kw)
        return d

... and now my script works!  (Has adbapi.ConnectionPool been fixed yet 
in the CVS version?)   

Here's the new version of my script (assumes the process owner's 
login name is also a database user):
--------------------------------------------------------------------------
from twisted.internet import main
from twisted.enterprise import adbapi
import sys
class TestDatabase(adbapi.Augmentation):
    def getSchemaByName(self,schemaname):
        sql = """SELECT identification from schema WHERE schema_name = %s"""
        return self.runQuery(sql,schemaname)

def gotSchemaByName(resultlist):
    ident = resultlist[0][0]
    print resultlist
    print "Schema has identifier %s." % ident

dbpool = adbapi.ConnectionPool("pyPgSQL.PgSQL",database="test")
db = TestDatabase(dbpool)

db.getSchemaByName("pgpdm_schema").addCallbacks(gotSchemaByName, db.operationError).arm()
main.run()
--------------------------------------------------------------------------

... with the output:
--------------------------------------------------------------------------
[['PGPDM-1.0']]
Schema has identifier PGPDM-1.0.
--------------------------------------------------------------------------

Thanks for the help!
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html
    "An idiot with a computer is a faster, better idiot." - Rick Julius



From glyph at twistedmatrix.com  Thu May 23 10:18:20 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 23 May 2002 11:18:20 -0500 (CDT)
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
In-Reply-To: <3CED0C90.4CBEDEA2@gsfc.nasa.gov>
References: <3CEBD797.3530EBC5@gsfc.nasa.gov>
	<20020523014147.GB7731@ritsuko.xware.cx>
	<3CED0C90.4CBEDEA2@gsfc.nasa.gov>
Message-ID: <20020523.111820.102581963.glyph@twistedmatrix.com>

From: Steve Waterbury <steve.waterbury at gsfc.nasa.gov>
Subject: Re: [Twisted-Python] Twisted Enterprise (newbie question)
Date: Thu, 23 May 2002 11:36:48 -0400

> So I created a "runQuery" method for adbapi.ConnectionPool:
> 
>     def runQuery(self, *args, **kw):
>         d = defer.Deferred()
>         apply(self.query, (d.callback,d.errback)+args, kw)
>         return d
> 
> ... and now my script works!  (Has adbapi.ConnectionPool been fixed yet 
> in the CVS version?)   

You probably want to be using adbapi.Augmentation; which, curiously enough, has
a method "runQuery" ...

    
    def runQuery(self, *args, **kw):
        d = defer.Deferred()
        apply(self.dbpool.query, (d.callback, d.errback)+args, kw)
        return d


... that looks an awful lot like what you want :-)  This was taken from 

    http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/enterprise/adbapi.py?rev=1.26&content-type=text/vnd.viewcvs-markup&only_with_tag=release-0_17_3&cvsroot=Twisted

which is not the most recent CVS, so it should be in the copy you have.

I guess that division seems fairly arbitrary, but Augmentation is designed to
be an interface to a particular schema, whereas ConnectionPool manages the
database connections.

HTH,

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020523/11719152/attachment.sig>

From fincher.8 at osu.edu  Thu May 23 12:35:26 2002
From: fincher.8 at osu.edu (Jeremy Fincher)
Date: Thu, 23 May 2002 14:35:26 -0400
Subject: [Twisted-Python] Small bug in code example in doc/howto/time.html
Message-ID: <003a01c20288$9b639e00$cd636ba4@functor>

This:
 
def OnceAMinute:
    """Should be run once a minute."""
    print "a minute has passed"
 
Should be this:
 
def OnceAMinute():
    """Should be run once a minute."""
    print "a minute has passed"
 
Also, a question:  Later on in that code example, there's a
"d.loop(OnceAMinute, 6)" line.  How does d.loop know how to call
OnceAMinute?  Does it just assume that it takes no arguments (and thus,
all functions that would be added there need to take no arguments)?
 
Thanks!
 
Jeremy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020523/c2ee509a/attachment.html>

From twisted at itamarst.org  Thu May 23 13:40:41 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 23 May 2002 21:40:41 +0200
Subject: [Twisted-Python] Small bug in code example in doc/howto/time.html
References: <003a01c20288$9b639e00$cd636ba4@functor>
Message-ID: <3CED45B9.2030105@itamarst.org>

In CVS there is a new API for scheduling things - see updated version of 
time.html at
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/~checkout~/doc/howto/time.html?rev=1.5&content-type=text/html&cvsroot=Twisted

As you can see, it's a much better API.





From exarkun at meson.dyndns.org  Thu May 23 16:33:32 2002
From: exarkun at meson.dyndns.org (exarkun at meson.dyndns.org)
Date: Thu, 23 May 2002 18:33:32 -0400 (EDT)
Subject: [Twisted-Python] Reality and global Thing tables
Message-ID: <Pine.LNX.4.44.0205231758100.22318-100000@localhost>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


 This is mostly addressed to Glyph, but any feedback is appreciated :)

 From what brief conversations we've had on the topic, my understanding of
the situation is this:  I like to have large global tables, each for a
certain "type" of Thing, that references every instance in the game; an
alternative approach favored by others is for references to only those
objects that will be useful to be kept around locally (locally with
respect to the objects that will find them useful).

 The main argument I've heard against global tables is they use
resources unnecessarily.  A game with a billion Widgets will have an
unreasonably large table, which must apparently be kept entirely in memory
(whereas, with a bit of cleverness, the Widgets themselves can be tossed
onto disk when not needed).  Are there other arguments against using
global tables?

 I don't find this to be convincing for a few reasons.  Firstly (and least
importantly), hardware is cheap and expanding a server to meet the needs
of a game isn't all that unreasonable.  Besides, I'll never have to worry
about it because my game will never become that large or popular ;)
Second, distributing references locally gives us a large performance hit
for certain operations.

Consider the common case of game-wide communication.  This can either be
an inherent ability (think "tell" from most MUDs) or something granted by
a device (the commlinks of SWR).  Either way brings essentially the same
programmatic challenges.  Determine who the message is addressed to and
deliver it.  Using global tables, we can look up a player name (in linear
time) and deliver the message or look up a "device address"  (cellphone
number, frequency ID, whatever floats your boat) and deliver the message
to anyone in close proximity to the Thing.

Contrast this with a system lacking global tables.  To determine who the
message is addressed to, one essentially has to walk through the graph of
the entire game.  Start with your highest level organizational unit
("areas" on most MUDs) and work down to rooms, then room contents
(including players and containers, and containers in containers, etc).  A
very expensive operation that could end up costing many levels of
recursion along with numerous unneeded levels of indirection in the form
of rooms and containers.  Of course, after the first lookup you can cache
the result (and hope it doesn't change in the mean time) obviating the
need for further lookups, but this comes with the problem of eventually
costing as much memory as the global solution (if not more) unless you do
cache management and culling and all sorts of other complexities.  Fun?
No.

 So, am I just missing some clever way to operate without global tables,
or some other disadvantage to keeping them around?  I am as an empty pot,
fill me up.

  Jp (exarkun)


        "I quite agree with you," said the Duchess; "and the moral of
that is -- Be what you would seem to be' -- or, if you'd like it put
more simply -- Never imagine yourself not to be otherwise than what it
might appear to others that what you were or might have been was not
otherwise than what you had been would have appeared to them to be
otherwise.'"       -- Lewis Carrol, "Alice in Wonderland"
- --
 5:58pm up 2 days, 18:37, 0 users, load average: 0.06, 0.07, 0.02
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE87W4/edcO2BJA+4YRAk6UAJ4g7/zFzd6l0rWE05rGI1QZMRhe2QCgzSIO
zElP/O5c7F4d9LJ++3gvpJc=
=HegD
-----END PGP SIGNATURE-----




From steve.waterbury at gsfc.nasa.gov  Thu May 23 11:35:31 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Thu, 23 May 2002 13:35:31 -0400
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
References: <3CEBD797.3530EBC5@gsfc.nasa.gov>
		<20020523014147.GB7731@ritsuko.xware.cx>
		<3CED0C90.4CBEDEA2@gsfc.nasa.gov> <20020523.111820.102581963.glyph@twistedmatrix.com>
Message-ID: <3CED2863.604FF893@gsfc.nasa.gov>

Glyph Lefkowitz wrote:
> 
> From: Steve Waterbury <steve.waterbury at gsfc.nasa.gov>
> Subject: Re: [Twisted-Python] Twisted Enterprise (newbie question)
> Date: Thu, 23 May 2002 11:36:48 -0400
> 
> > So I created a "runQuery" method for adbapi.ConnectionPool:
> >
> >     def runQuery(self, *args, **kw):
> >         d = defer.Deferred()
> >         apply(self.query, (d.callback,d.errback)+args, kw)
> >         return d
> >
> > ... and now my script works!  (Has adbapi.ConnectionPool been fixed yet
> > in the CVS version?)
> 
> You probably want to be using adbapi.Augmentation; which, curiously enough, has
> a method "runQuery" ...
> 
> 
>     def runQuery(self, *args, **kw):
>         d = defer.Deferred()
>         apply(self.dbpool.query, (d.callback, d.errback)+args, kw)
>         return d
> 
> ... that looks an awful lot like what you want :-)  ...

Oops ... I *was* using Augmentation (as did the example):

Steve Waterbury wrote:
> Here's the new version of my script (assumes the process owner's
> login name is also a database user):
> --------------------------------------------------------------------------
> from twisted.internet import main
> from twisted.enterprise import adbapi
> import sys
> class TestDatabase(adbapi.Augmentation):
>     ...

... but when I looked in adbapi, I forgot which one I was looking at!
My script works just fine with the original adbapi ... doh!  
  
So adbapi is okay, but the example in "Introduction to Twisted Enterprise" 
( http://twistedmatrix.com/documents/howto/enterprise ) should be 
corrected, I think:

    class AgeDatabase(adbapi.Augmentation): 
        """A simple example that can retrieve an age from the database""" 
        def getAge(self, name): 
            # Define the query 
            sql = """SELECT Age FROM People WHERE name = ?""" 
            # Run the query, and return a Deferred to the caller to add 
            # callbacks to. 
HERE >>     return self.runOperation(sql, name) 
                        ^^^^^^^^^^^^
....................... should be "runQuery", in order for "resultlist" to work,
and ...

    def gotAge(resultlist, name): 
        """Callback for handling the result of the query""" 
        age = resultlist[0][0]          # First field of first record 
        print "%s is %d years old" % (name, age) 

HERE >>
    db = MyDatabase(dbpool) 
         ^^^^^^^^^^
........ should be "AgeDatabase"
 
    # These will *not* block.  Hooray! 
    db.getAge("Andrew").addCallbacks(gotAge, db.operationError, 
                                     callbackArgs=name).arm() 
    db.getAge("Glyph").addCallbacks(gotAge, db.operationError, 
                                    callbackArgs=name).arm() 

-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html
    "An idiot with a computer is a faster, better idiot." - Rick Julius



From glyph at twistedmatrix.com  Thu May 23 18:15:10 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 23 May 2002 19:15:10 -0500 (CDT)
Subject: [Twisted-Python] Reality and global Thing tables
In-Reply-To: <Pine.LNX.4.44.0205231758100.22318-100000@localhost>
References: <Pine.LNX.4.44.0205231758100.22318-100000@localhost>
Message-ID: <20020523.191510.133290392.glyph@twistedmatrix.com>

This is cross-posted to reality at twistedmatrix.com, where further discussion of
the Reality framework should continue.

    http://twistedmatrix.com/cgi-bin/mailman/listinfo/reality

From: exarkun at meson.dyndns.org
Subject: [Twisted-Python] Reality and global Thing tables
Date: Thu, 23 May 2002 18:33:32 -0400 (EDT)

>  From what brief conversations we've had on the topic, my understanding of
> the situation is this:  I like to have large global tables, each for a
> certain "type" of Thing, that references every instance in the game; an
> alternative approach favored by others is for references to only those
> objects that will be useful to be kept around locally (locally with
> respect to the objects that will find them useful).

>  The main argument I've heard against global tables is they use
> resources unnecessarily.  A game with a billion Widgets will have an
> unreasonably large table, which must apparently be kept entirely in memory
> (whereas, with a bit of cleverness, the Widgets themselves can be tossed
> onto disk when not needed).  Are there other arguments against using
> global tables?

They encourage poor programming practices.  Having coded on more than a few
games that worked this way, I can say with relative certainty that the code
begins to acquire crufty crap like 

    if self.universe.objects[util.REFRIGERATOR_PROTOTYPE_ID].model.maxTemperature < 7:

, which has all kinds of unpleasant implications.  Better not to provide a hook
that encourages people to do this, or to think it's valid.

They create trouble with slow, blocking persistence systems (like an RDBMS, or
a persistence server).  This should be obvious, but it bears mentioning.  Were
you planning on keeping all your objects in memory all the time?

They create a class of problems which need to be solved with them, which
otherwise don't exist.  For example, "global tell", or a system of global
"guild" game-objects which get referred to by all the code, rather than a
data-driven system for describing guilds that's sensibly located in a module
someplace... perhaps merely a symptom of "poor programming practices", you end
up with lots of code that requires objects of specific names/IDs to exist to
work.  This creates a maintenance and set-up nightmare if people ever want to
make a derivative game with a similar world.

>  I don't find this to be convincing for a few reasons.  Firstly (and least
> importantly), hardware is cheap and expanding a server to meet the needs
> of a game isn't all that unreasonable.  Besides, I'll never have to worry
> about it because my game will never become that large or popular ;)
> Second, distributing references locally gives us a large performance hit
> for certain operations.

It becomes impossible to grow the world beyond the confines of a single
machine.  And yes, this *does* happen, for games of any complexity; many
relatively popular MUDs wrestle with hardware scale issues, and I'll bet money
that a really popular one written in Python would definitely need some help in
the scalability department.  For example, the Dikumud FAQ describes the problem
of "machine lag":

    http://www.faqs.org/faqs/games/mud-faq/diku/

> Consider the common case of game-wide communication.  This can either be
> an inherent ability (think "tell" from most MUDs) or something granted by
> a device (the commlinks of SWR).  Either way brings essentially the same
> programmatic challenges.  Determine who the message is addressed to and
> deliver it.  Using global tables, we can look up a player name (in linear
> time) and deliver the message or look up a "device address"  (cellphone
> number, frequency ID, whatever floats your boat) and deliver the message
> to anyone in close proximity to the Thing.

OK; I consider the "common case of game-wide communication" to be an issue of
its own, for several reasons:

    1) it totally breaks immersion in the world

"tell" is not really an interaction between simulation-domain objects, as a
message between two people.  This is better handled by having a *real*
messaging system integrated with your game, rather than a halfassed tack-on
(see (3) below)

    2) it only works with a *very* special class of objects (Players)

Players are far from "common".  Having a global lookup table of all online
players has many advantages; it can be abused if you use it too frequently, and
for the wrong things (I would characterize "tell" as "one of the wrong things",
as explained in (4)).  They also happen to have client objects attached to
them.  Are you communicating with the player or directly with his client?
Also, players have guaranteed unique names pretty much regardless of what other
rules are in your game world; they are the most important kind of Thing, they
are always unique, etc.

    3) it is hard to do right; chat is a problem all its own

On the surface of it, chat is easy.  But once you start talking about
moderation, ban lists, buddy lists, status notification, idle time... the
system can get complex really fast.  Why would you want to pollute your
game-world with all that stuff?  Leave it in the chat service, which should
work considerably differently than a virtual world sim.  Have it maintained by
chat hackers, not game hackers.  If 'tell' in-game is really important between
characters, you can use the chat library as an add-on or mix-in with a
game-based user interface, rather than as a separate service.

    4) you might want it to work between servers -- then, a global table is
       useless

This is a specific example of the general case where being able to look up an
*asynchronous reference to a uniquely named object* is really much more useful
than having a table of everything, everywhere.  The table then becomes an
implementation detail, and you can dispatch to PB's equivalent of DNS in order
to locate the object that you want to be talking to.  This is another problem
which is deceptively simple on the surface of it, but gets more complex as you
manage hierarchies of naming, etc.  This also makes it far less convenient to
just hack in a reference to a global object and makes people think about
failure conditions a bit more.

    5) it only works for people who are "currently online"

Or does it?  Do you have persistent messaging?  Oh ho, that there sounds like a
mail delivery system.  Now you have to interface to a *mail* system, which is
even more fun than chat.  Otherwise, a global table of persistent objects
doesn't make sense, really, 'cause you need to check if the user's online.
What should happen when these lookups fail?  Are tells in some way
transactional?  Can you tell if delivery succeeds?

> Contrast this with a system lacking global tables.  To determine who the
> message is addressed to, one essentially has to walk through the graph of
> the entire game.  Start with your highest level organizational unit
> ("areas" on most MUDs) and work down to rooms, then room contents
> (including players and containers, and containers in containers, etc).  A
> very expensive operation that could end up costing many levels of
> recursion along with numerous unneeded levels of indirection in the form
> of rooms and containers.  Of course, after the first lookup you can cache
> the result (and hope it doesn't change in the mean time) obviating the
> need for further lookups, but this comes with the problem of eventually
> costing as much memory as the global solution (if not more) unless you do
> cache management and culling and all sorts of other complexities.  Fun?
> No.

OK; having an *extremely* slow API which essentially does the same thing as a
global table of references was never advocated as a good idea.  It's the idea
that you should be able to refer to every blade of grass in the world by its
name and synchronously retrieve a reference to it that I object to.  A table is
merely a side-effect of this requirement.

>  So, am I just missing some clever way to operate without global tables,
> or some other disadvantage to keeping them around?  I am as an empty pot,
> fill me up.

Make URI-based "tables" that refer to objects that might be local or remote,
and have a restricted set of operations that can be performed on them,
asynchronously only.

I have to get going for a dinner engagement now, but if you think I'm not
totally on crack, I can describe this in more detail later.  Send a link to
your PGP public key, while you're at it :)


-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |



From andrew-twisted at puzzling.org  Thu May 23 19:30:08 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 24 May 2002 11:30:08 +1000
Subject: [Twisted-Python] Twisted Enterprise (newbie question)
In-Reply-To: <3CED2863.604FF893@gsfc.nasa.gov>
References: <3CEBD797.3530EBC5@gsfc.nasa.gov> <20020523014147.GB7731@ritsuko.xware.cx> <3CED0C90.4CBEDEA2@gsfc.nasa.gov> <20020523.111820.102581963.glyph@twistedmatrix.com> <3CED2863.604FF893@gsfc.nasa.gov>
Message-ID: <20020524013008.GA479@frobozz.local>

On Thu, May 23, 2002 at 01:35:31PM -0400, Steve Waterbury wrote:
> So adbapi is okay, but the example in "Introduction to Twisted Enterprise" 
> ( http://twistedmatrix.com/documents/howto/enterprise ) should be 
> corrected, I think:

Oops!  That's my fault (I wrote that doc).  It's updated in current CVS; the
updated doc should appear on the website with the next release.

Thanks!

-Andrew.




From ecn at metaslash.com  Sun May 26 14:39:41 2002
From: ecn at metaslash.com (Eric C. Newton)
Date: Sun, 26 May 2002 16:39:41 -0400
Subject: [Twisted-Python] adding a new connection type
Message-ID: <20020526163941.A6199@ecn>

I want to add a new kind of connection to Twisted.  I have wrapped up
the API for this connection with an interface very similar to the
socket object interface.  It supports fileno(), bind(), connect(),
listen(), accept(), send(), recv(), and of course, setblocking().

One interface difference is that the address type is just a string.

Another subtle difference is that connect() calls should always bind
to a local address before connecting.

I'm new to Twisted, but I have extensive experience in ACE.

I could use a clue on where I should start.

-Eric







From twisted at itamarst.org  Sun May 26 16:20:13 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 27 May 2002 00:20:13 +0200
Subject: [Twisted-Python] adding a new connection type
References: <20020526163941.A6199@ecn>
Message-ID: <3CF15F9D.3080208@itamarst.org>

Eric C. Newton wrote:

> I want to add a new kind of connection to Twisted.  I have wrapped up
> the API for this connection with an interface very similar to the
> socket object interface.  It supports fileno(), bind(), connect(),
> listen(), accept(), send(), recv(), and of course, setblocking().

Well, first of all, what does it run over? And in what language is it 
written? And, what is it good for?

It sounds like you could implement it in a similar way to the ssl stuff 
in twisted.internet.ssl. It wouldn't be in the reactor API, but you 
could still use it directly with POSIX reactors (select, poll, gtk, qt).

I recommend getting CVS version (or new release which will be out Real 
Soon Now) and looking at how the SSL code hooks in - or you may write it 
from scratch based on the way tcp.py works if the differences are 
non-trivial.




From dr at soniq.net  Sun May 26 10:31:51 2002
From: dr at soniq.net (David Rufino)
Date: Sun, 26 May 2002 18:31:51 +0200
Subject: [Twisted-Python] runtest
Message-ID: <20020526163151.GA15681@soniq.net>

Hello!

Here are my runtest logs from FreeBSD 4.6-PRERELEASE running python 2.1,
with cvs from today

======================================================================
ERROR: testBasicIdentity (twisted.test.test_persisted.MarmaladeTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_persisted.py", line 219, in testBasicIdentity
    uj = marmalade.unjellyFromXML(marmalade.jellyToXML([l, l]))
  File "/usr/local/lib/python2.1/site-packages/twisted/persisted/marmalade.py", line 380, in unjellyFromXML
    document = parseString(stringOrFile)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 915, in parseString
    return _doparse(pulldom.parseString, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 901, in _doparse
    events = apply(func, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/pulldom.py", line 301, in parseString
    parser = xml.sax.make_parser()
  File "/usr/local/lib/python2.1/xml/sax/__init__.py", line 88, in make_parser
    raise SAXReaderNotAvailable("No parsers found", None)
SAXReaderNotAvailable: No parsers found
======================================================================
ERROR: testMarmaladeable (twisted.test.test_persisted.MarmaladeTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_persisted.py", line 188, in testMarmaladeable
    u = marmalade.unjellyFromXML(s)
  File "/usr/local/lib/python2.1/site-packages/twisted/persisted/marmalade.py", line 380, in unjellyFromXML
    document = parseString(stringOrFile)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 915, in parseString
    return _doparse(pulldom.parseString, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 901, in _doparse
    events = apply(func, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/pulldom.py", line 301, in parseString
    parser = xml.sax.make_parser()
  File "/usr/local/lib/python2.1/xml/sax/__init__.py", line 76, in make_parser
    return _create_parser(parser_name)
  File "/usr/local/lib/python2.1/xml/sax/__init__.py", line 101, in _create_parser
    return drv_module.create_parser()
AttributeError: 'xml.sax.expatreader' module has no attribute 'create_parser'
======================================================================
ERROR: testMethodSelfIdentity (twisted.test.test_persisted.MarmaladeTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_persisted.py", line 201, in testMethodSelfIdentity
    im_ = marmalade.unjellyFromXML(marmalade.jellyToXML(b)).a.bmethod
  File "/usr/local/lib/python2.1/site-packages/twisted/persisted/marmalade.py", line 380, in unjellyFromXML
    document = parseString(stringOrFile)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 915, in parseString
    return _doparse(pulldom.parseString, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/minidom.py", line 901, in _doparse
    events = apply(func, args, kwargs)
  File "/usr/local/lib/python2.1/xml/dom/pulldom.py", line 301, in parseString
    parser = xml.sax.make_parser()
  File "/usr/local/lib/python2.1/xml/sax/__init__.py", line 76, in make_parser
    return _create_parser(parser_name)
  File "/usr/local/lib/python2.1/xml/sax/__init__.py", line 101, in _create_parser
    return drv_module.create_parser()
AttributeError: 'xml.sax.expatreader' module has no attribute 'create_parser'
----------------------------------------------------------------------
Ran 272 tests in 20.532s

FAILED (errors=3)

The following test modules had errors when loading:

* test_nntp:
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_all.py", line 76, in loadTestsFromMyPackage
    locals(), globals(), [name])
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_nntp.py", line 19, in ?
    from twisted.news import news, database
ImportError: No module named news

The following test modules had errors when loading:

* test_nntp:
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_all.py", line 76, in loadTestsFromMyPackage
    locals(), globals(), [name])
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_nntp.py", line 19, in ?
    from twisted.news import news, database
ImportError: No module named news

The following test modules had errors when loading:

* test_nntp:
Traceback (most recent call last):
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_all.py", line 76, in loadTestsFromMyPackage
    locals(), globals(), [name])
  File "/usr/local/lib/python2.1/site-packages/twisted/test/test_nntp.py", line 19, in ?
    from twisted.news import news, database
ImportError: No module named news

Cheers




From carmstro at twistedmatrix.com  Sun May 26 17:13:31 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 26 May 2002 19:13:31 -0400
Subject: [Twisted-Python] runtest
In-Reply-To: <20020526163151.GA15681@soniq.net>
References: <20020526163151.GA15681@soniq.net>
Message-ID: <1022454822.21975.2.camel@radii>

On Sun, 2002-05-26 at 12:31, David Rufino wrote:
> Hello!
> 
> Here are my runtest logs from FreeBSD 4.6-PRERELEASE running python 2.1,
> with cvs from today

[snip XML errors...]

You don't have the XML packages for Python installed. Twisted depends on
them.

[snip NNTP errors...]
 
> ImportError: No module named news

Could you check to see if you have a twisted/news/news.py file?

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Sun May 26 17:43:18 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 26 May 2002 18:43:18 -0500 (CDT)
Subject: [Twisted-Python] runtest
In-Reply-To: <1022454822.21975.2.camel@radii>
References: <20020526163151.GA15681@soniq.net>
	<1022454822.21975.2.camel@radii>
Message-ID: <20020526.184318.94888788.glyph@twistedmatrix.com>

From: Christopher Armstrong <carmstro at twistedmatrix.com>
Subject: Re: [Twisted-Python] runtest
Date: 26 May 2002 19:13:31 -0400

> On Sun, 2002-05-26 at 12:31, David Rufino wrote:
> > Hello!
> > 
> > Here are my runtest logs from FreeBSD 4.6-PRERELEASE running python 2.1,
> > with cvs from today
> 
> [snip XML errors...]
> 
> You don't have the XML packages for Python installed. Twisted depends on
> them.

This dependency should probably be optional, though... I'll look into it.


-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020526/72d543da/attachment.sig>

From ecn at metaslash.com  Sun May 26 20:30:45 2002
From: ecn at metaslash.com (Eric C. Newton)
Date: Sun, 26 May 2002 22:30:45 -0400
Subject: [Twisted-Python] adding a new connection type
Message-ID: <20020526223045.A11367@ecn>

Itamar Shtull-Trauring <twisted at itamarst.org> writes:
> Well, first of all, what does it run over?  

X.25.  Be afraid.

> And in what languages is it written?  

It runs in Python of course.

> And, what is it good for?

X.25 is an international standard for wide area communications widely
adopted by companies in the 1970's and early 80's using
packet-oriented, synchronous serial communications devices.

I'm using Linux, and playing with 2-year-old patches for version 2.4
of the kernel which enables me to play with the API over a loopback
device.

Sometimes it even works.

The linux X.25 API is broadly based upon BSD sockets.  Unfortunately,
the python sockets module only really supports INET and UNIX domain
addresses.  I've written my own C module to provide an alternative
interface because doing X.25 is just so much fun.

I've managed to get past all the Twisted (.tap) stuff and I've got the
process accepting these faux X.25 connections and data is flying back
and forth.  I subclassed from the tcp.Port class, and re-wrote the
startListening() method.  I haven't tried the client side of
things yet.

Among other things, I needed to add a shutdown() method, which socket
provides and Twisted seems to need.

-Eric




From twisted at itamarst.org  Mon May 27 02:30:36 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 27 May 2002 10:30:36 +0200
Subject: [Twisted-Python] adding a new connection type
References: <20020526223045.A11367@ecn>
Message-ID: <3CF1EEAC.4090005@itamarst.org>

Eric C. Newton wrote:

> Among other things, I needed to add a shutdown() method, which socket
> provides and Twisted seems to need.

What shutdown(2) does as opposed to close() is close the socket 
immediately, instead of just lowering the refcount for the socket. This 
was a workaround for an issue in Win32 process running, and is therefore 
not relevant to you. Feel free to override this method and use 
sock.close() instead of shutdown(2) in your class.





From andrew-twisted at puzzling.org  Mon May 27 03:46:47 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 27 May 2002 19:46:47 +1000
Subject: [Twisted-Python] Twisted.bugs ate my balls!
Message-ID: <20020527094647.GA733@frobozz.local>

libpq.OperationalError: ERROR: value too long for type character varying(16)
...
("INSERT INTO bugs_items\n (submittor_name, submittor_email, assigned,
date_submitted, date_modified,\n version, os, security, type, status,
summary, description) VALUES\n (%s, %s, NULL, now(), now(), %s, %s, %s, %s,
'open', %s, %s)\n ", 'Andrew Bennetts', 'andrew-twistedbugs at puzzling.org',
'0.18.0-prerelease', 'Win32', 'f', 'normal', 'connectionFailed might not get
called', 'On Win32, connecting to a closed port doesn\'t fail immediately,
but instead only calls connectionFailed after timing out. However, timeouts
are optional, so it is possible it will never be called.\r\n\r\nFor the
default (select) reactor, the problem is winsock\'s select reports failed
connections as "exceptional", rather than as readable/writeable, and Twisted
ignores exceptional socket events.\r\n\r\nPerhaps if platform is win32, do
something like:\r\n\r\ndef win32select(reads, writes, ignored,
timeout=None):\r\n """Kludge around winsock\'s select() function"""\r\n r,
w, e = select.select(reads, writes, reads, timeout)\r\n return r+e, w,
[]\r\nselect = win32select')

*sigh*

It turns out Itamar has submitted the same bug:
    http://www.twistedmatrix.com/users/itamarst.twistd/bugs/view_bug?bug_id=19
    
Anyway, bug I'm trying to submit reads:

Summary: 
    connectionFailed might not get called

Description:
    On Win32, connecting to a closed port doesn't fail immediately, but
    instead only calls connectionFailed after timing out.  However, timeouts
    are optional, so it is possible it will never be called.

    For the default (select) reactor, the problem is winsock's select
    reports failed connections as "exceptional", rather than as
    readable/writeable, and Twisted ignores exceptional socket events.

    Perhaps if platform is win32, do something like:

    def win32select(reads, writes, ignored, timeout=None):
        """Kludge around winsock's select() function"""
        r, w, e = select.select(reads, writes, reads, timeout)
        return r+e, w, []
    select = win32select




From twisted at itamarst.org  Mon May 27 05:03:25 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 27 May 2002 14:03:25 +0300
Subject: [Twisted-Python] Twisted.bugs ate my balls!
References: <20020527094647.GA733@frobozz.local>
Message-ID: <3CF2127D.3020603@itamarst.org>

OK, I fixed the win32 issue.




From twisted at itamarst.org  Tue May 28 10:18:45 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 28 May 2002 19:18:45 +0300
Subject: [Twisted-Python] Issue with factories
Message-ID: <3CF3ADE5.8090002@itamarst.org>

If you do reactor.listenTCP on a factory, startFactory and stopFactory are 
never called. I therefore suggest that we add methods doStart and doStop to 
protocol.Factory, like so, and have them called in listenTCP/UDP/SSL, and 
remove calls to start/stopFactory from app.Appliecation:

class Factory:

    running = 0

    def doStart(self):
         if not self.running:
             self.running = 1
             self.startFactory()

    def doStop(self):
         if self.running:
             self.running = 0
             self.stopFactory()

This ensures the start/stopFactory methods will only be called once, even if 
the factory is added to multiple Ports, and makes sure that they get called 
even if the factory is added to the reactor directly.




From glyph at twistedmatrix.com  Tue May 28 15:07:44 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 28 May 2002 16:07:44 -0500 (CDT)
Subject: [Twisted-Python] Issue with factories
In-Reply-To: <3CF3ADE5.8090002@itamarst.org>
References: <3CF3ADE5.8090002@itamarst.org>
Message-ID: <20020528.160744.59651935.glyph@twistedmatrix.com>

From: Itamar Shtull-Trauring <twisted at itamarst.org>
Date: Tue, 28 May 2002 19:18:45 +0300

> If you do reactor.listenTCP on a factory, startFactory and stopFactory are 
> never called. I therefore suggest that we add methods doStart and doStop to 
> protocol.Factory, like so, and have them called in listenTCP/UDP/SSL, and 
> remove calls to start/stopFactory from app.Appliecation:

Thanks.  I knew this was a problem but didn't know how to confront it; this
looks like a logical encapsulation, parallel to doRead/doWrite... perhaps
doStart and doStop could also take information about the port being listened on
as an argument.  (doListen/doUnlisten maybe?)


-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020528/0ccf4860/attachment.sig>

From tv at twistedmatrix.com  Tue May 28 14:37:42 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 28 May 2002 23:37:42 +0300
Subject: [Twisted-Python] LDAP is dead, long live LDAP!
Message-ID: <87znyknh49.fsf@ki.yok.utu.fi>

	LDAP support has been removed from the main Twisted tree.
        For the future, please refer to

        http://twistedmatrix.com/users/tv/ldaptor/

        - the main application for now is a web-based editor/browser
        for an LDAP directory.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From exarkun at meson.dyndns.org  Tue May 28 20:13:25 2002
From: exarkun at meson.dyndns.org (exarkun at meson.dyndns.org)
Date: Tue, 28 May 2002 22:13:25 -0400 (EDT)
Subject: [Twisted-Python] Removing Perspectives
Message-ID: <Pine.LNX.4.44.0205282210090.24040-100000@meson>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


  Yes, I want to remove a perspective.  It seems this hasn't come up
before (at least there is little provisioning for it in the API).  So,
what's the best way to do this?  It seems that cred.service.Service should
have something like removePerspectiveNamed or removePerspectiveRequest
(depending on whether the action can be taken immediately or not) to take
care of this, taking the name of the perspective to squish.  I don't see
any reason that the action shouldn't be able to be taken immediately, so I
would consider removePerspectiveNamed(perspectiveName) preferable, with no
return value and raising a KeyError or something on the case where there
is no perspective of the given name.

  This sound reasonable, or is there more to do / a better way to do it?

  Jp (A PART OF TEH TWISTARD DVELEPER COMUNITE)

- --
It is practically impossible to teach good programming style to
students that have had prior exposure to BASIC: as potential
programmers they are mentally mutilated beyond hope of
regeneration.        -- Dijkstra
- --
 10:10pm up 7 days, 22:50, 0 users, load average: 0.02, 0.13, 0.46
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE89DlJedcO2BJA+4YRAi0DAJ9mi7C3+7aLmXEL4JQH12cZ57wlqwCfatE/
KI0Cb1SghE7DpFKNdsTkJWc=
=MOJi
-----END PGP SIGNATURE-----




From lloyd at lancaster.lib.pa.us  Wed May 29 10:05:59 2002
From: lloyd at lancaster.lib.pa.us (Eron Lloyd)
Date: 29 May 2002 12:05:59 -0400
Subject: [Twisted-Python] LDAP is dead, long live LDAP!
In-Reply-To: <87znyknh49.fsf@ki.yok.utu.fi>
References: <87znyknh49.fsf@ki.yok.utu.fi>
Message-ID: <1022688360.1632.1.camel@phobos>

Was this due to not being supported? Or was it too buggy or immature? I
had just began taking a look at that.

Regards,

Eron

On Tue, 2002-05-28 at 16:37, Tommi Virtanen wrote:
> 
> 	LDAP support has been removed from the main Twisted tree.
>         For the future, please refer to
> 
>         http://twistedmatrix.com/users/tv/ldaptor/
> 
>         - the main application for now is a web-based editor/browser
>         for an LDAP directory.
> 
> -- 
> tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
> double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> ---
> [This E-mail scanned for viruses by Declude Virus]
> 
> 


---
[This E-mail scanned for viruses by Declude Virus]




From steve.waterbury at gsfc.nasa.gov  Wed May 29 12:38:24 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Wed, 29 May 2002 14:38:24 -0400
Subject: [Twisted-Python] example UML class diagram - twisted.web.widgets
References: <3CF3ADE5.8090002@itamarst.org>
Message-ID: <3CF52020.8D5CB4B@gsfc.nasa.gov>

Here is a diagram "reverse-engineered" from the Python code 
using the Object Domain UML tool (with some manual tweaking to 
organize it more compactly).  This is from the CVS twisted I 
checked out on 5/24 (haven't updated since then).  

If you think it's useful, I could send more as I generate 
them, and they could be included with the Twisted docs if you 
want.  Of course, there is no substitute for reading the code, 
but might be a good "quick reference".  

I think there is a new release of twisted coming soon, right?  
If so, I'll wait for that ....

-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html
    "An idiot with a computer is a faster, better idiot." - Rick Julius
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twisted.web.widgets.pdf
Type: application/pdf
Size: 14539 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020529/b3735eb0/attachment-0002.pdf>

From radix at twistedmatrix.com  Wed May 29 21:00:05 2002
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 29 May 2002 23:00:05 -0400 (EDT)
Subject: [Twisted-Python] Twisted 0.18.0rc1, Bugs 0.2.0, and Twisted Emacs 0.1.0
Message-ID: <20020529.230005.607980248.radix@twistedmatrix.com>

I just made a release and posted it to the web site, check out 
http://twistedmatrix.com/ for more information.

>From the News section::

----
It's been a while since our last release, so we made up for it by making major
improvements to Twisted, and overhauling PB for Emacs and doing an official
release of it. Also, Twisted Bugs has been updated to work with the latest 
changes.

We're going to start doing release candidates (that's what the "rc" stands 
for) before major releases from now on, so you don't have to fear the point-oh
releases any more ;) Oh, and be on the lookout for 0.99.0 very soon! Once 
that's released we'll be concentrating hard on documentation and testing (ie, 
stability) for the coming 1.0 release! 
----

Once 0.18.0 proper is released, I'll do a bigger release announcement. But I'd 
like to ask everyone working with Twisted to _please_ download and try 
0.18.0rc1! There were a lot of changes, and we'd like to make sure everything's
working OK! On the other hand, the core devel team is pretty confident about
this release -- we've made a lot of improvements and we didn't rush (*ahem*) 
the release, so it should be OK. :-)

--
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



From twisted at itamarst.org  Thu May 30 11:22:33 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 30 May 2002 20:22:33 +0300
Subject: [Twisted-Python] Issue with factories
References: <3CF3ADE5.8090002@itamarst.org>
Message-ID: <3CF65FD9.2020906@itamarst.org>

Itamar Shtull-Trauring wrote:

 > If you do reactor.listenTCP on a factory, startFactory and stopFactory are
 > never called. I therefore suggest that we add methods doStart and doStop
 > to protocol.Factory, like so, and have them called in listenTCP/UDP/SSL,
 > and remove calls to start/stopFactory from app.Appliecation:

OK, done, basically identically to the pseudocode listed in previous email,
slighly improved - I will check in after 0.18 is released.




From tv at twistedmatrix.com  Thu May 30 08:24:43 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 30 May 2002 17:24:43 +0300
Subject: [Twisted-Python] LDAP is dead, long live LDAP!
In-Reply-To: <1022688360.1632.1.camel@phobos>
References: <87znyknh49.fsf@ki.yok.utu.fi> <1022688360.1632.1.camel@phobos>
Message-ID: <87d6vd7lxw.fsf@ki.yok.utu.fi>

Eron Lloyd <lloyd at lancaster.lib.pa.us> writes:

> Was this due to not being supported? Or was it too buggy or immature? I
> had just began taking a look at that.

	No, it's because I wanted to force glyph to follow LGPL, just
        like everyone else.

        The library will integrate as well with twisted as it ever
        did, if not better. Please continue using it.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From sune-twisted at mel.interspace.dk  Thu May 30 15:13:02 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Thu, 30 May 2002 23:13:02 +0200
Subject: [Twisted-Python] Zope PageTemplates for Twisted
Message-ID: <20020530231302.A14225@mel.interspace.dk>

Whee!

In a fit of God-how-I-hate-all-other-template-languages I decided to
take another look at Zopes PageTemplates (TAL, METAL and friends).

I ended up liking the beast so much I decided to start porting it to
Twisted, which resulted in the attached t.w.tal module.  It is still
very incomplete, and most likely also very buggy.  But, in the
interest of feedback I post it here.

It dislikes it when I reuse deferreds (t.w.w.RenderSession becomes
very confused and claims to be "rendering unknown" for all but the
first instances).

Other than that the only problem I have had so far was that I had to
remove a str'ing in the TAL-engine.

-- 
Sune Kirkeby | 5 out of 4 people have trouble with fractions.
-------------- next part --------------
# I need a license.

"""
TAL interpreter for Twisted.
"""

import string, types

from twisted.web import widgets
from twisted.web.server import NOT_DONE_YET

from TAL.TALDefs import quote
from TAL.TALDefs import TAL_VERSION, isCurrentVersion, getProgramMode
from TAL.TALDefs import TALError, METALError
from TAL.TALParser import TALParser
from TAL.TALInterpreter import TALInterpreter
from TAL.TALGenerator import TALGenerator
#from TAL.DummyEngine import DummyEngine
from PageTemplates.Expressions import getEngine

class TwistedTALInterpreter:
    def __init__(self, engine):
        self.engine = engine
        self.mode = None

    def interpret(self, program):
        lst = []

        for (opcode, args) in program:
            handler = getattr(self, 'do_' + opcode, None)
            if not handler:
                raise TALError, ("Unknown opcode: %s (%r)" % (opcode, args))

            result = handler(args)
            if isinstance(result, types.ListType):
                lst.extend(result)
            elif result:
                lst.append(result)

        return lst

    def do_version(self, version):
        assert version == TAL_VERSION

    def do_mode(self, mode):
        assert mode in ("html", "xml")
        self.mode = mode

    def do_rawtextOffset(self, (text, somenumber)):
        return text

    def do_rawtextColumn(self, (text, somenumber)):
        return text

    def do_startTag(self, (name, attributes)):
        txt = '<%s' % name

        def format_attribute(attr):
            if len(attr) == 2:
                return attr[1]
            elif attr[2] == 0:
                return '%s=%s' % (attr[0], quote(attr[1]))
        attributes = map(format_attribute, attributes)
        formatted = string.join([ a for a in attributes if a ], ' ')

        if formatted:
            txt = txt + ' ' + formatted
        txt = txt + '>'

        return txt

    def do_optTag(self, foo):
        return self.interpret(foo[5])

    def do_loop(self, (name, expr, block)):
        iterator = self.engine.setRepeat(name, expr)
        lst = []
        while iterator.next():
            lst.extend(self.interpret(block))
        return lst

    def do_beginScope(self, attrs):
        self.engine.beginScope()

    def do_endScope(self, nothing):
        self.engine.endScope()

    def do_insertText(self, (text, insteadOf)):
        val = self.engine.evaluateText(text)
        if not val:
            return
        if val is self.engine.getDefault():
            self.interpret(insteadOf)
        return val

    def do_useMacro(self, (macroName, macroExpr, compiledSlots, block)):
        macro = self.engine.evaluateMacro(macroExpr)
        if macro is self.engine.getDefault():
            macro = block

        else:
            if not isCurrentVersion(macro):
                raise METALError("macro %s has incompatible version %s" %
                                 (`macroName`, `getProgramVersion(macro)`),
                                 self.position)
            mode = getProgramMode(macro)
            if not mode == self.mode:
                raise METALError("macro %s has incompatible mode %s" %
                                 (`macroName`, `mode`), self.position)

        return self.interpret(macro)

    def do_defineMacro(self, (macroName, macro)):
        pass

class TALWidget(widgets.Widget):
    def preDisplay(self, request):
        pass

    def getTemplates(self, request):
        raise UnimplementedError

    def getContext(self, request):
        return {}

    def display(self, request):
        self.preDisplay(request)

        ctx = {
            'request': request,
            'here': self,
            'macros': {},
        }
        ctx.update(self.getContext(request))

        engine = getEngine()
        context = engine.getContext(ctx)
        generator = TALGenerator(engine)

        result = []
        for template in self.getTemplates(request):
            parser = TALParser(generator)
            parser.parseString(template)
            program, macros = parser.getCode()
            ctx['macros'].update(macros)

            interpreter = TwistedTALInterpreter(context)
            result.extend(interpreter.interpret(program))

        return result

if __name__ == '__main__':
    import sys
    from twisted.web import widgets
    from TAL.TALParser import TALParser
    from TAL.DummyEngine import DummyEngine
    
    parser = TALParser()
    engine = DummyEngine()
    interpreter = TwistedTALInterpreter(engine)

    engine.setGlobal('here/title', 'TITLE, GOD DAMMIT!')

    file = sys.argv[1]
    parser.parseFile(file)
    program, macros = parser.getCode()
    result = interpreter.interpret(program)

    class Request:
        def write(self, txt):
            print txt
        def finish(self):
            pass

    widgets.RenderSession(result, Request())

From jason at asbahr.com  Thu May 30 15:43:04 2002
From: jason at asbahr.com (Jason Asbahr)
Date: Thu, 30 May 2002 16:43:04 -0500
Subject: [Twisted-Python] Regarding customer support...
Message-ID: <38D042BA-7416-11D6-B53D-000393753460@asbahr.com>

Given some of the chats I've had with Glyph regarding bug tracking, 
customer support, and project management in Twisted, here's a nice 
overview article that provides some concrete definitions and feature 
descriptions for each.  Note the "Workflow Management" paragraph where 
the author claims that the above mentioned systems are instances of 
Workflow Management and a system built around workflow management 
abstractions could be 'trivially' used to develop the others.

	http://linas.org/linux/pm.html

Looking at the numerous examples of partial implementations of these 
various systems out there, it seems that it is easy to start one of 
these projects, but hard to get it to the point where it is actually 
useful (and I'm specifically looking at project management here).

Apparently there was a project manager called Xen for Zope, but it seems 
dead now.

But here are two interesting bits of code that could be incorporated 
into a Twisted-based project manager -- PyGantt, which take an 
XML-formatted project description and generates an HTML Gantt chart; and 
an O'Reilly article that describes something similar with Piddle.

http://www.logilab.org/pygantt/

http://www.onlamp.com/pub/a/python/2001/05/31/piddle.html

PyGantt is neat because it could be modified to generate hyperlinked 
project task titles that would go to a task description dialog (or 
page).  Dates could also be hyperlinked for editing.  The XML part could 
be factored out into import/export, and the project description could be 
instead accessed from project-tree and task-node instances in Twisted.

Having a way to represent "user stories" and "use cases" as task nodes 
would be cool.  Then Roark could (ahem, when I get time to help Matt 
work on it) be used to create and edit use cases and other modeling 
entities and the task manager could be used to schedule and track 
progress on them.

Cheers,

Jason




From sune at mel.interspace.dk  Fri May 31 07:04:48 2002
From: sune at mel.interspace.dk (Sune Kirkeby)
Date: Fri, 31 May 2002 15:04:48 +0200
Subject: [Twisted-Python] [patch] three short ones
Message-ID: <20020531150448.A24081@mel.interspace.dk>

Hello twisted-ppl,

Attached you'll find three short patches, two against
t.w.widgets.RenderSession and one against t.p.http.Request.

The first patch makes RenderSession unicode-agnostic (i.e. makes it
treat string and unicode object alike).  The second one makes
t.p.http.Request aware of unicode, to the extent that it will
correctly handle unicode strings with all ordinals < 128 (by simply
str'ing them).

The last patch makes RenderSession.callback return the result it was
passed, so that later callbacks made by the given Deferred also
benefit from this knowledge.  It had completely escaped me that
Deferred._runCallbacks acts like a folding operation, last I poked
around in the code.

Regards,

-- 
Sune Kirkeby | % cat /usr/include/sys/errno.h
             | #define EPERM       1       /* Operation not permitted */
             | [...]
             | #define EMACS       666     /* Editor Too Large */
-------------- next part --------------
Index: widgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/widgets.py,v
retrieving revision 1.46
diff -u -r1.46 widgets.py
--- widgets.py	26 May 2002 06:42:38 -0000	1.46
+++ widgets.py	31 May 2002 12:41:44 -0000
@@ -802,7 +802,8 @@
                 self.forgotten = 1
                 return
 
-            if isinstance(item, types.StringType):
+            stringtypes = getattr(types, 'StringTypes', types.StringType)
+            if isinstance(item, stringtypes):
                 self.beforeBody = 0
                 self.request.write(item)
             elif type(item) is types.TupleType and len(item) > 0:
-------------- next part --------------
Index: http.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/http.py,v
retrieving revision 1.21
diff -u -r1.21 http.py
--- http.py	18 May 2002 22:18:41 -0000	1.21
+++ http.py	31 May 2002 13:02:32 -0000
@@ -24,6 +24,7 @@
 import string
 from cStringIO import StringIO
 import tempfile
+import types
 import base64
 import cgi
 import urllib
@@ -518,6 +519,13 @@
             if self.method == "HEAD":
                 self.write = lambda data: None
                 return
+
+        # this converts unicode w/o high-bits to normal strings,
+        # should probably be replaced with something that knows
+        # about the Content-Type charset parameter and codecs,
+        stringtypes = getattr(types, 'StringTypes', types.StringType)
+        if isinstance(data, stringtypes):
+            data = str(data)
 
         self.sentLength = self.sentLength + len(data)
         if data:
-------------- next part --------------
Index: widgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/widgets.py,v
retrieving revision 1.46
diff -u -r1.46 widgets.py
--- widgets.py	26 May 2002 06:42:38 -0000	1.46
+++ widgets.py	31 May 2002 12:43:14 -0000
@@ -731,7 +731,7 @@
 
     def callback(self, result, sentinel, decNeedsHeaders):
         if self.forgotten:
-            return
+            return result
         if result != FORGET_IT:
             self.needsHeaders = self.needsHeaders - decNeedsHeaders
         else:
@@ -786,6 +786,7 @@
         for r in toArm:
             r.arm()
 
+        return result
 
     def keepRendering(self):
         if self.needsHeaders:

From twisted at itamarst.org  Fri May 31 10:38:30 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 31 May 2002 18:38:30 +0200
Subject: [Twisted-Python] Proposal: Make tax default, tap optional
Message-ID: <3CF7A706.1020302@itamarst.org>

XML pickles have many benefits over taps, and the only issues they have 
is not support 1.5 and 2.2 new-style classes. I suggest we make them the 
default - a tap file is *much* less useful than a tax.




From levi at top.monad.net  Fri May 31 12:47:52 2002
From: levi at top.monad.net (Levi)
Date: Fri, 31 May 2002 14:47:52 -0400
Subject: [Twisted-Python] Proposal: Make tax default, tap optional
In-Reply-To: <3CF7A706.1020302@itamarst.org>
References: <3CF7A706.1020302@itamarst.org>
Message-ID: <20020531184751.GA491@pest>

On Fri, May 31, 2002 at 06:38:30PM +0200, Itamar Shtull-Trauring wrote:
> XML pickles have many benefits over taps, and the only issues they have 
> is not support 1.5 and 2.2 new-style classes. I suggest we make them the 
> default - a tap file is *much* less useful than a tax.

Yes, but new-style classes are really nice. Of course, fixing the tax to
support new-style classes whould be best of all.

-Levi



From glyph at twistedmatrix.com  Fri May 31 13:47:18 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 31 May 2002 14:47:18 -0500 (CDT)
Subject: [Twisted-Python] Proposal: Make tax default, tap optional
In-Reply-To: <20020531184751.GA491@pest>
References: <3CF7A706.1020302@itamarst.org>
	<20020531184751.GA491@pest>
Message-ID: <20020531.144718.77649106.glyph@twistedmatrix.com>

From: Levi <levi at top.monad.net>
Subject: Re: [Twisted-Python] Proposal: Make tax default, tap optional
Date: Fri, 31 May 2002 14:47:52 -0400

> On Fri, May 31, 2002 at 06:38:30PM +0200, Itamar Shtull-Trauring wrote:
> > XML pickles have many benefits over taps, and the only issues they have 
> > is not support 1.5 and 2.2 new-style classes. I suggest we make them the 
> > default - a tap file is *much* less useful than a tax.
> 
> Yes, but new-style classes are really nice. Of course, fixing the tax to
> support new-style classes whould be best of all.
> 

A tap file is about a thousand times faster than a tax, at present, and I don't
have any plans for making it faster.  In general, I *don't* tweak my options
after I run 'mktap'...

While XML is definitely useful, I'd prefer to keep .tap the default.  We should
have a tool for converting them, though.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020531/9249ba0f/attachment.sig>

From twisted at itamarst.org  Fri May 31 15:58:27 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 31 May 2002 23:58:27 +0200
Subject: [Twisted-Python] Proposal: Make tax default, tap optional
References: <3CF7A706.1020302@itamarst.org>	<20020531184751.GA491@pest> <20020531.144718.77649106.glyph@twistedmatrix.com>
Message-ID: <3CF7F203.7020302@itamarst.org>

Glyph Lefkowitz wrote:

> A tap file is about a thousand times faster than a tax, at present, and I don't
> have any plans for making it faster.  In general, I *don't* tweak my options
> after I run 'mktap'...

Maybe you don't - other people may want to. And startup speed is very 
unimportant.





From dp at twistedmatrix.com  Fri May 31 16:04:16 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 31 May 2002 15:04:16 -0700
Subject: [Twisted-Python] Proposal: Make tax default, tap optional
In-Reply-To: <3CF7F203.7020302@itamarst.org>
Message-ID: <5934519A-74E2-11D6-8106-003065B25CAA@twistedmatrix.com>

On Friday, May 31, 2002, at 02:58 PM, Itamar Shtull-Trauring wrote:

> Glyph Lefkowitz wrote:
>
>> A tap file is about a thousand times faster than a tax, at present, 
>> and I don't
>> have any plans for making it faster.  In general, I *don't* tweak my 
>> options
>> after I run 'mktap'...
>
> Maybe you don't - other people may want to. And startup speed is very 
> unimportant.

Startup speed is fairly important to me (not terribly, but fairly...)

Here's what I suggest: By default, create both. Then, each time a tap is 
to be loaded, check to see if the modification date on the tax is newer. 
If it is, load the tax, and save the tap.

Donovan




From twisted at itamarst.org  Fri May 31 17:28:57 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 01 Jun 2002 01:28:57 +0200
Subject: [Twisted-Python] Using HTTP proxies to circumvnet firewalls
Message-ID: <3CF80739.80306@itamarst.org>

Apparently, HTTP proxies have a command CONNECT, that lets you open a 
TCP/IP connection to an arbitrary host and port. This is intended for 
HTTPS. Now, most proxies probably limit this to 443 only, HTTPS port.

So, presumably all those clients like ICQ that let you run over HTTP 
proxy - they use this, and have a ICQ server running on port 443. Thus 
allowing people to use it behind corporate firewalls.

So, we need a HTTPProxy transport that will do this automatically for 
clients, along with a SOCKSv4 transport and eventually a SOCKSv5 transport.

proxy = HTTPProxier("proxy.isp.net", 8080)
proxy.clientTCP("www.example.com", 443, myProtocolInstance)
# cool, huh?




From carmstro at twistedmatrix.com  Fri May 31 23:42:32 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 01 Jun 2002 01:42:32 -0400 (EDT)
Subject: [Twisted-Python] Twisted 0.18.0rc2
Message-ID: <20020601.014232.294711839.radix@twistedmatrix.com>

There were a few bugs found in Twisted 0.18.0rc1 -- problems with redirection
in static (--path) webservers, some XML-dependancies, and missing
plugins for the TCP port forwarder. If there are no more bugs
found for a bit, then 0.18.0rc2 will be released as 0.18.0.

Thanks for the help, Twisted 0.18.0 is shaping up to be a *solid* release.
It feels good to put out stable software. ;-)

--
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/



