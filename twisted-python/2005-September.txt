From eddyxu at 126.com  Thu Sep  1 02:14:42 2005
From: eddyxu at 126.com (EddyXu)
Date: Thu, 01 Sep 2005 14:14:42 +0800
Subject: [Twisted-Python] How to make twisted server run as an deamon
In-Reply-To: <E3EB5811-EA87-404C-A93A-D28F98A877FA@mac.com>
References: <43166204.5090501@126.com>
	<E3EB5811-EA87-404C-A93A-D28F98A877FA@mac.com>
Message-ID: <43169C52.7040009@126.com>

The server which is in your code is inherit from
twisted.application.FOOserver? or some module else? It seems i have
wrote my server in "Low level" which has talked about in HOWTOs. For use
the foo.tac below, do i need rewrite all my server and use
twisted.application instead of the code i use now.?

Bill Bumgarner ??:

> On Aug 31, 2005, at 7:05 PM, EddyXu wrote:
>
>> I need to write an deamon, by using the twisted. But it seems that it
>> could not use standard thread module to make it works. Any one can give
>> me some advice?
>
>
> You will most likely want to use twistd and write a .tac file that
> starts up your server. Twistd will take care of daemonizing and is
> really quite nice.
>
> --- foo.tac ---
> from twisted.application import service, internet
> import Foo # your server
>
> application = service.Application("foo")
> applicationService = service.IServiceCollection(application)
>
> server = internet.TCPServer(Foo.serverPort(), Foo.serverFactory())
> server.setServiceParent(applicationService)
> --- end foo.tac ---
>
> Except that it doesn't allow command line arguments to be passed in.
> Bummer. Easy to fix, though, I really ought to write up a recipe for
> doing so.
>
> b.bum
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
No more than thinking....






From stefano at pragma2000.com  Thu Sep  1 02:56:27 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 1 Sep 2005 08:56:27 +0200
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <C95EDE8A-D0DD-495F-9B31-E6E1886C7286@fuhm.net>
References: <E1EAaOI-0005Zu-00@pyramid.twistedmatrix.com>
	<C95EDE8A-D0DD-495F-9B31-E6E1886C7286@fuhm.net>
Message-ID: <43274224050831235667dee3a9@mail.gmail.com>

On 8/31/05, James Y Knight <foom at fuhm.net> wrote:
> [PATCH] gthreadless.py  (4 weeks ago)
>         http://twistedmatrix.com/bugs/issue1129 opened by stefanomasini

I updated issue 1129 with a patch containing my implementation of
gthreadless, test code and readme with usage example. I left the
priority as BUG, and status as CHATTING. I don't know if I should
change those.

cheers,
stefano



From bbum at mac.com  Thu Sep  1 03:19:58 2005
From: bbum at mac.com (Bill Bumgarner)
Date: Thu, 1 Sep 2005 00:19:58 -0700
Subject: [Twisted-Python] How to make twisted server run as an deamon
In-Reply-To: <43169C52.7040009@126.com>
References: <43166204.5090501@126.com>
	<E3EB5811-EA87-404C-A93A-D28F98A877FA@mac.com>
	<43169C52.7040009@126.com>
Message-ID: <47AA1E69-B093-481F-965A-08F3AFDEDC53@mac.com>

On Aug 31, 2005, at 11:14 PM, EddyXu wrote:
> The server which is in your code is inherit from
> twisted.application.FOOserver? or some module else? It seems i have
> wrote my server in "Low level" which has talked about in HOWTOs.  
> For use
> the foo.tac below, do i need rewrite all my server and use
> twisted.application instead of the code i use now.?

Far simpler;  you just need an instance of your factory as the second  
argument to internet.TCPServer()...





From eddyxu at 126.com  Thu Sep  1 05:06:39 2005
From: eddyxu at 126.com (EddyXu)
Date: Thu, 01 Sep 2005 17:06:39 +0800
Subject: [Twisted-Python] How to make twisted server run as an deamon
In-Reply-To: <47AA1E69-B093-481F-965A-08F3AFDEDC53@mac.com>
References: <43166204.5090501@126.com>	<E3EB5811-EA87-404C-A93A-D28F98A877FA@mac.com>	<43169C52.7040009@126.com>
	<47AA1E69-B093-481F-965A-08F3AFDEDC53@mac.com>
Message-ID: <4316C49F.4040607@126.com>

Ok , i got it , thank you . Hum, i am a newbie in twisted....it seems i
should refactor the code someday...
Bill Bumgarner ??:

> On Aug 31, 2005, at 11:14 PM, EddyXu wrote:
>
>> The server which is in your code is inherit from
>> twisted.application.FOOserver? or some module else? It seems i have
>> wrote my server in "Low level" which has talked about in HOWTOs. For use
>> the foo.tac below, do i need rewrite all my server and use
>> twisted.application instead of the code i use now.?
>
>
> Far simpler; you just need an instance of your factory as the second
> argument to internet.TCPServer()...
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
No more than thinking....






From nico at tekNico.net  Thu Sep  1 08:59:14 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 01 Sep 2005 14:59:14 +0200
Subject: [Twisted-Python] Disabling PB (de)serialization
Message-ID: <4316FB22.6050604@tekNico.net>

I'd like to make a PB proxy "transparent". It should be able to get
serialized data via PB without deserializing it, and forward it via PB to
another proxy, without having to serialize it again. The second proxy will
receive the data, and serialize it before sending it to the final destination.

Currently the data are serialized and deserialized three plus threes times,
and that's rather inefficient when dealing with large data.

How do I selectively disable (de)serialization in PB?

-- 
Nicola Larosa - nico at tekNico.net

Lately there's an abundance of improvised censors, and suppliers of
free good advice. What's that, you're out of bad example? Ask again
your usual wholesaler, surely scarcity is just momentary.
 -- N. Larosa, Luglio 2005





From nico at tekNico.net  Thu Sep  1 10:08:11 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 01 Sep 2005 16:08:11 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <4316FB22.6050604@tekNico.net>
References: <4316FB22.6050604@tekNico.net>
Message-ID: <43170B4B.70307@tekNico.net>

> I'd like to make a PB proxy "transparent". It should be able to get
> serialized data via PB without deserializing it, and forward it via PB to
> another proxy, without having to serialize it again. The second proxy will
> receive the data, and serialize it before sending it to the final destination.

That's not quite right, let me try again.

Let's say we have two machines, called 1 and 2. A Twisted process on
machine 1 (TP1) wants to send something via PB to a Twisted process on
machine 2 (TP2). However, we won't let them talk directly, but will make
them go through two proxies, PX1 on machine 1, and PX2 on machine 2.

Then the calling chain is made of three PB calls:

TP1 --PB--> PX1 --PB--> PX2 --PB--> TP2

Each PB call implies one serialization and one deserialization of data:

TP1 -ser-|-deser-> PX1 -ser-||-deser-> PX2 -ser-|-deser-> TP2

Only the first serialization, and last deserialization, are really
necessary. The chain should become like this:

TP1 -ser-|--> PX1 --||--> PX2 --|-deser-> TP2

TP1 serializes, and TP2 deserializes. PX should deal with the serialized
data without changing them in any way.

What's the best way to go for this?

-- 
Nicola Larosa - nico at tekNico.net

Lately there's an abundance of improvised censors, and suppliers of
free good advice. What's that, you're out of bad example? Ask again
your usual wholesaler, surely scarcity is just momentary.
 -- N. Larosa, Luglio 2005





From bbum at mac.com  Thu Sep  1 10:40:14 2005
From: bbum at mac.com (Bill Bumgarner)
Date: Thu, 1 Sep 2005 07:40:14 -0700
Subject: [Twisted-Python] How to make twisted server run as an deamon
In-Reply-To: <4316C49F.4040607@126.com>
References: <43166204.5090501@126.com>
	<E3EB5811-EA87-404C-A93A-D28F98A877FA@mac.com>
	<43169C52.7040009@126.com>
	<47AA1E69-B093-481F-965A-08F3AFDEDC53@mac.com>
	<4316C49F.4040607@126.com>
Message-ID: <E8EEE433-97BD-4A17-A2FC-AD5EE99C36B9@mac.com>

On Sep 1, 2005, at 2:06 AM, EddyXu wrote:
> Ok , i got it , thank you . Hum, i am a newbie in twisted....it  
> seems i
> should refactor the code someday...

We are all a newbie at one time or another.

The key to programming effectively in Twisted seems to be to figure  
out what code you *don't* have to write.

Learning Twisted really reminds me a lot of learning Cocoa (16 years  
ago).   In both cases, the framework gives you a fully functioning  
generic application out of the box.   It is up to you to customize  
that generic application to turn it into the specific solution you need.

b.bum



From stefano at pragma2000.com  Thu Sep  1 11:35:50 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 1 Sep 2005 17:35:50 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <43170B4B.70307@tekNico.net>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
Message-ID: <432742240509010835b3e6c7f@mail.gmail.com>

On 9/1/05, Nicola Larosa <nico at teknico.net> wrote:
> Only the first serialization, and last deserialization, are really
> necessary. The chain should become like this:
> 
> TP1 -ser-|--> PX1 --||--> PX2 --|-deser-> TP2
> 
> TP1 serializes, and TP2 deserializes. PX should deal with the serialized
> data without changing them in any way.
> 
> What's the best way to go for this?

I would say just proxy at the socket level... 
...but maybe you want to make routing decisions? Basing on, say, the
name of the method being called? Or some parameters of the call?
In that case there's not much you can do I think, because both method
name and parameters are part of the serialized data in the pb
protocol.

ciao,
stefano



From nico at tekNico.net  Thu Sep  1 12:05:22 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 01 Sep 2005 18:05:22 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <432742240509010835b3e6c7f@mail.gmail.com>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com>
Message-ID: <df78s3$g76$1@sea.gmane.org>

>> Only the first serialization, and last deserialization, are really
>> necessary. The chain should become like this:
>> 
>> TP1 -ser-|--> PX1 --||--> PX2 --|-deser-> TP2
>> 
>> TP1 serializes, and TP2 deserializes. PX should deal with the serialized
>> data without changing them in any way.
>> 
>> What's the best way to go for this?

> I would say just proxy at the socket level... 
> ....but maybe you want to make routing decisions? Basing on, say, the
> name of the method being called? Or some parameters of the call?
> In that case there's not much you can do I think, because both method
> name and parameters are part of the serialized data in the pb
> protocol.

You hit the nail on the head. The proxies are meant to channel remote calls
for a number of source and destination processes, and the final destination
is designated via call parameters.

In TP1, the business data should be serialized, and wrapped in an outer
layer, containing the destination coordinates. PX1 and PX2 should be able
to only unwrap and deserialize the outer layer only, while trasparently
forwarding the serialized business data.

The question is, how? :-)

-- 
Nicola Larosa - nico at tekNico.net

There is no question that traditional approaches for acute traumas
(heart attack, stroke, accidents, etc.) are valuable and should not
be abandoned. However, overall, when drugs and surgery are used to
address chronic illness, it is generally a prescription for disaster.
 -- Dr. J. Mercola, July 2005




From itamar at itamarst.org  Thu Sep  1 13:17:30 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 01 Sep 2005 13:17:30 -0400
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <df78s3$g76$1@sea.gmane.org>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com> <df78s3$g76$1@sea.gmane.org>
Message-ID: <1125595050.8259.45.camel@localhost.localdomain>

On Thu, 2005-09-01 at 18:05 +0200, Nicola Larosa wrote:

> In TP1, the business data should be serialized, and wrapped in an outer
> layer, containing the destination coordinates. PX1 and PX2 should be able
> to only unwrap and deserialize the outer layer only, while trasparently
> forwarding the serialized business data.

At a guess you'd need to write your own Unjellier class or something. I
suspect this will be much easier in newpb, but I'm not *sure*. Brian?




From stefano at pragma2000.com  Fri Sep  2 01:10:22 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Fri, 2 Sep 2005 07:10:22 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <df78s3$g76$1@sea.gmane.org>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com>
	<df78s3$g76$1@sea.gmane.org>
Message-ID: <4327422405090122107bd01086@mail.gmail.com>

On 9/1/05, Nicola Larosa <nico at teknico.net> wrote:
> You hit the nail on the head. The proxies are meant to channel remote calls
> for a number of source and destination processes, and the final destination
> is designated via call parameters.
> 
> The question is, how? :-)

If the business data is not a lot larger than the routing control
data, you may well leave everything as it is, because you already need
some unavoidable serialization/deserialization steps.
If, on the other hand, there is a high ratio, saving the
deserialization step for the business data could help. For that, if
you don't want to go as low level as to rewrite a custom serialization
protocol for pb, why don't you use two channels, like in good old ftp?
One for control, and the other for data? The latter would be a simple
socket, and you would chain each of those channels together until you
route to the final destination. At that point the end systems would be
able to speak whatever they want (pb, for example) over that
multi-proxied channel.

... but I do realize this is not quite a simple solution either! ;)

stefano



From radeex at gmail.com  Sat Sep  3 03:51:01 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 3 Sep 2005 17:51:01 +1000
Subject: [Twisted-Python] Speaking of defgen
Message-ID: <60ed19d405090300512e7f791f@mail.gmail.com>

I've just implemented a tiny module for integrating with PEP 342[1]
generators. It's called newdefgen.py and it's available in my
sandbox[2]. A bit more information is available on my blog[3]. Of
course, it requires CVS Python as that is the only place where PEP 342
is currently implemented, but it'll be in Python 2.5, whenever that's
released.

Have fun!

1: http://python.org/peps/pep-0342.html
2: http://svn.twistedmatrix.com/cvs/sandbox/radix/newdefgen.py?view=markup&rev=14348
3: http://radix.twistedmatrix.com/archives/000114.html

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From sflist at ihonk.com  Sat Sep  3 13:35:36 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Sat, 03 Sep 2005 10:35:36 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <4327422405090122107bd01086@mail.gmail.com>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com> <df78s3$g76$1@sea.gmane.org>
	<4327422405090122107bd01086@mail.gmail.com>
Message-ID: <1125768936.1199.5.camel@lothar>

On Fri, 2005-09-02 at 07:10 +0200, Stefano Masini wrote:
> if you don't want to go as low level as to rewrite a custom serialization
> protocol for pb, why don't you use two channels, like in good old ftp?
> One for control, and the other for data?

That's what I did for my application -- I had a similar need, so I set
up another protocol to listen on another port, use the control channel
(PB) to coordinate the connections, generate random tokens to provide
some means of verifying that the connecting client is who I think it is,
and so on. It works quite well, but it certainly would be sweet if PB
had the ability to, say, declare certain methods to send and receive raw
data only.

Steve




From jamessaker at firepole.com  Sat Sep  3 15:17:07 2005
From: jamessaker at firepole.com (James Saker)
Date: Sat, 3 Sep 2005 14:17:07 -0500
Subject: [Twisted-Python] Twisted UDP & makeConnection
Message-ID: <200509031417.13952.jamessaker@firepole.com>

Got a bit of a puzzle trying to make a minimal syslog relay out of twisted and 
am wondering if it's due to an incompatibility between ServerFactory and 
Twisted's UDP, or if I'm simply missing something obvious.

In trying to learn Twisted better, I've taken the finger13.py sample and have 
changed it to listen to the syslog UDP port and echo messages (code follows 
this message). One minor variation is that I want to only take UDP messages 
from hosts in my hostlist (granted UDP can be easily spoofed, but that's 
another matter).

I'm invoking finger13 with twistd, and end up with twistd complaining about 
the ServerFactory instance not having an attribute "makeConnection.":

2005/09/03 14:06 CDT [-] AttributeError: ServerFactory instance has no 
attribute 'makeConnection'

 I've traced this message back to Twisted's udp.py (line 96, 
_connectToProtocol) which refers to self.protocol, and self.protocol is the 
protocol passed in when class Port is initialized (self.protocol = proto). 
I've tried putting makeConnection in the BSDSyslogProtocol class but that 
doesn't work; actually, I'm surprised it's complaining because the parent 
twisted DatagramProtocol class has a makeConnection method.

Perhaps factories need to be handled differently for UDP? I'm stumped!

Jamie


# syslogd13.py Based on finger13.py 
from twisted.application import internet, service
from twisted.internet import protocol, reactor, defer
from twisted.internet.protocol import DatagramProtocol
from twisted.protocols import basic

class BSDSyslogProtocol(DatagramProtocol):
    
    def datagramReceived(self, data, (host, port)):
        self.factory.getMessage(data
        ).addErrback(lambda _: "Internal error in server"
        ).addCallback(self.transport.loseConnection())
    def makeConnection(self): pass

class ValidHostSetterProtocol(basic.LineReceiver):
    def connectionMade(self): self.lines = []
    
    def lineReceived(self, line): 
        self.lines.append(line)
    def connectionLost(self, _connDropMsg):
        for line in self.lines:
            print "Received the following." % line

class SyslogRelayService(service.Service):
    def __init__(self, *args, **kwargs):
        self.parent.__init__(self, *args)
        self.hosts = kwargs
    def getHost(self, host):
        return defer.succeed(self.hosts.get(host, "No such host"))
    def getHostFactory(self):
        h = protocol.ServerFactory()
        h.protocol, h.getHost = BSDSyslogProtocol, self.getHost
        return h

application = service.Application('syslog-relay', uid=1, gid=1)
slr = SyslogRelayService('syslog-relay', hosts='127.0.0.1')
serviceCollection = service.IServiceCollection(application)
internet.UDPServer(514, slr.getHostFactory()
                   ).setServiceParent(serviceCollection)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050903/eb0fdc75/attachment.pgp 

From nico at tekNico.net  Sat Sep  3 16:51:02 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Sat, 03 Sep 2005 22:51:02 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <1125768936.1199.5.camel@lothar>
References: <4316FB22.6050604@tekNico.net>
	<43170B4B.70307@tekNico.net>	<432742240509010835b3e6c7f@mail.gmail.com>
	<df78s3$g76$1@sea.gmane.org>	<4327422405090122107bd01086@mail.gmail.com>
	<1125768936.1199.5.camel@lothar>
Message-ID: <dfd2bn$mql$1@sea.gmane.org>

>> if you don't want to go as low level as to rewrite a custom serialization
>> protocol for pb, why don't you use two channels, like in good old ftp?
>> One for control, and the other for data?

> That's what I did for my application -- I had a similar need, so I set
> up another protocol to listen on another port, use the control channel
> (PB) to coordinate the connections, generate random tokens to provide
> some means of verifying that the connecting client is who I think it is,
> and so on.

You had to serialize and deserialize data manually anyway. What did you
use? The array module? Pickle? Banana?


> It works quite well, but it certainly would be sweet if PB had the
> ability to, say, declare certain methods to send and receive raw
> data only.

Some methods should be asymmetric: some should serialize only, and others
deserialize only, if I'm not mistaken.

-- 
Nicola Larosa - nico at tekNico.net

There is no question that traditional approaches for acute traumas
(heart attack, stroke, accidents, etc.) are valuable and should not
be abandoned. However, overall, when drugs and surgery are used to
address chronic illness, it is generally a prescription for disaster.
 -- Dr. J. Mercola, July 2005




From exarkun at divmod.com  Sat Sep  3 17:25:31 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 3 Sep 2005 17:25:31 -0400
Subject: [Twisted-Python] Twisted UDP & makeConnection
In-Reply-To: <200509031417.13952.jamessaker@firepole.com>
Message-ID: <20050903212531.3914.1923298645.divmod.quotient.11891@ohm>

On Sat, 3 Sep 2005 14:17:07 -0500, James Saker <jamessaker at firepole.com> wrote:
>Got a bit of a puzzle trying to make a minimal syslog relay out of twisted and
>am wondering if it's due to an incompatibility between ServerFactory and
>Twisted's UDP, or if I'm simply missing something obvious.

Twisted's UDP support doesn't use factories.  Since UDP isn't connection oriented, there's little or no reason to construct new protocol instances to handle traffic: one instance is used to handle all traffic received by a port for its entire lifetime.  Try passing a DatagramProtocol subclass instance in to UDPServer, instead of a ServerFactory; you should see this problem disappear.

Jp



From sflist at ihonk.com  Sun Sep  4 01:20:29 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Sat, 03 Sep 2005 22:20:29 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <dfd2bn$mql$1@sea.gmane.org>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com> <df78s3$g76$1@sea.gmane.org>
	<4327422405090122107bd01086@mail.gmail.com>
	<1125768936.1199.5.camel@lothar>  <dfd2bn$mql$1@sea.gmane.org>
Message-ID: <1125811230.12576.9.camel@lothar>

On Sat, 2005-09-03 at 22:51 +0200, Nicola Larosa wrote:
> >> if you don't want to go as low level as to rewrite a custom serialization
> >> protocol for pb, why don't you use two channels, like in good old ftp?
> >> One for control, and the other for data?
> 
> > That's what I did for my application -- I had a similar need, so I set
> > up another protocol to listen on another port, use the control channel
> > (PB) to coordinate the connections, generate random tokens to provide
> > some means of verifying that the connecting client is who I think it is,
> > and so on.
> 
> You had to serialize and deserialize data manually anyway. What did you
> use? The array module? Pickle? Banana?

No, I didn't. (Background: In my application, I only want two clients to
be able to exchange raw data.) So I make a new ServerFactory (subclassed
from protocol.Factory) listen on the server's data port, then hand a
token (a random string) via PB over the control port to Client A. Client
A initiates a connection to the data port, using a ClientFactory which
subclasses protocol.Factory, and hands over the token. Then my server
tells Client B via PB to connect to the data port with another token,
and the process is repeated. When Client B comes in, the server hands
Client A's transport to Client B's protocol, and vice versa. Then they
can just spew raw data at each other to their hearts' content.

This approach should be easily extendable to shifting the same raw data
among multiple clients.

> Some methods should be asymmetric: some should serialize only, and others
> deserialize only, if I'm not mistaken.

Sounds good, when can I test it? ;-)

Steve




From exarkun at divmod.com  Sun Sep  4 17:45:06 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 4 Sep 2005 17:45:06 -0400
Subject: [Twisted-Python] Trial regression
In-Reply-To: 0
Message-ID: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>

Import error reporting in trial has changed in a way which breaks buildbot's understanding of the output.  Where errors used to be reported like this:

    Could not import quotient.test.test_webtest: 

They're now reported like this:

    Could not import <module 'quotient' from '/home/buildbot/BuildBot/slave/twisted-trunk/Quotient/quotient/__init__.py'>: 

This gives less information than the previous format and just looks worse to boot.  Can we put it back how it was?

Jp



From jonathan.lange at gmail.com  Sun Sep  4 21:13:19 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 11:13:19 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
Message-ID: <d06a5cd30509041813196df10b@mail.gmail.com>

Sure.  I'll aim to have it fixed within the week

On 05/09/05, Jp Calderone <exarkun at divmod.com> wrote:
> Import error reporting in trial has changed in a way which breaks buildbot's understanding of the output.  Where errors used to be reported like this:
> 
>     Could not import quotient.test.test_webtest:
> 
> They're now reported like this:
> 
>     Could not import <module 'quotient' from '/home/buildbot/BuildBot/slave/twisted-trunk/Quotient/quotient/__init__.py'>:
> 
> This gives less information than the previous format and just looks worse to boot.  Can we put it back how it was?
> 
> Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From mary-twisted at puzzling.org  Sun Sep  4 21:16:57 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 5 Sep 2005 11:16:57 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <d06a5cd30509041813196df10b@mail.gmail.com>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
	<d06a5cd30509041813196df10b@mail.gmail.com>
Message-ID: <20050905011657.GD31836@home.puzzling.org>

On Mon, Sep 05, 2005, Jonathan Lange wrote:
> Sure.  I'll aim to have it fixed within the week

And... tested? ;)

-Mary



From jonathan.lange at gmail.com  Sun Sep  4 21:19:51 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 11:19:51 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <d06a5cd30509041813196df10b@mail.gmail.com>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
	<d06a5cd30509041813196df10b@mail.gmail.com>
Message-ID: <d06a5cd30509041819349c8e91@mail.gmail.com>

Actually, it'd make things go quicker if you could help me write a
unit test for this behaviour.

Also, I'd appreciate advice on ways to avoid further regressions yet
still maintain a good pace of development.

On 05/09/05, Jonathan Lange <jonathan.lange at gmail.com> wrote:
> Sure.  I'll aim to have it fixed within the week
> 
> On 05/09/05, Jp Calderone <exarkun at divmod.com> wrote:
> > Import error reporting in trial has changed in a way which breaks buildbot's understanding of the output.  Where errors used to be reported like this:
> >
> >     Could not import quotient.test.test_webtest:
> >
> > They're now reported like this:
> >
> >     Could not import <module 'quotient' from '/home/buildbot/BuildBot/slave/twisted-trunk/Quotient/quotient/__init__.py'>:
> >
> > This gives less information than the previous format and just looks worse to boot.  Can we put it back how it was?
> >
> > Jp
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>



From jonathan.lange at gmail.com  Sun Sep  4 21:21:25 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 11:21:25 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <20050905011657.GD31836@home.puzzling.org>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
	<d06a5cd30509041813196df10b@mail.gmail.com>
	<20050905011657.GD31836@home.puzzling.org>
Message-ID: <d06a5cd3050904182151237118@mail.gmail.com>

On 05/09/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> On Mon, Sep 05, 2005, Jonathan Lange wrote:
> > Sure.  I'll aim to have it fixed within the week
> 
> And... tested? ;)

Yeah. :)

(also, apologies to list members for doing the prefix replies in the
other recent emails)



From jamessaker at firepole.com  Sun Sep  4 21:23:42 2005
From: jamessaker at firepole.com (James Saker)
Date: Sun, 4 Sep 2005 20:23:42 -0500
Subject: [Twisted-Python] Re: Twisted UDP & makeConnection
Message-ID: <200509042023.42871.jamessaker@firepole.com>

> Jp Calderone <exarkun at divmod.com> writes
>Twisted's UDP support doesn't use factories. ?Since UDP isn't connection 
oriented, there's little or no reason to construct new protocol instances to 
handle traffic: 

OK... that makes sense. I'll give that a shot. I wondered if the 
connectionless nature of UDP changed things at all... thanks!

Jamie



From mary-twisted at puzzling.org  Sun Sep  4 21:24:54 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 5 Sep 2005 11:24:54 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <d06a5cd30509041819349c8e91@mail.gmail.com>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
	<d06a5cd30509041813196df10b@mail.gmail.com>
	<d06a5cd30509041819349c8e91@mail.gmail.com>
Message-ID: <20050905012454.GG31836@home.puzzling.org>

On Mon, Sep 05, 2005, Jonathan Lange wrote:
> Actually, it'd make things go quicker if you could help me write a
> unit test for this behaviour.
> 
> Also, I'd appreciate advice on ways to avoid further regressions yet
> still maintain a good pace of development.

I haven't done much work on software in which changes in output were
considered regressions, but since they certainly are here, you should
probably unit test as much of the error output of the current trial (or
probably trial before your merges) as you can find.

-Mary



From mary-twisted at puzzling.org  Sun Sep  4 21:34:15 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 5 Sep 2005 11:34:15 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
Message-ID: <20050905013415.GH31836@home.puzzling.org>

Hi everyone,

We've had some modest success now with two in-person sprints with
Twisted hackers travelling up and down the east coast of Australia to
work on crazy stuff (vfs, ftp... trial).

At the last sprint, we discussed having a "virtual sprint", essentially
a weekend during which interested people get together and work on
Twisted. Unlike for the Australian sprints, this would be Saturday and
Sunday and wouldn't include Friday. Communication would be over IRC most
likely, and maybe VoIP. (People in the same city may reserve the right
to have face-to-face conversations...)

We're going to try for the first one sometime in October. People
interested in a particular weekend should let me know, likewise people
interested in a particular topic. Otherwise sit back and expect an
announcement in a week or so.

-Mary

-- 
<spiv> dash: so we need to wrap integers... Java does that too, so it can't be that bad ;)
* dash doesn't know how to respond to that except with physical violence



From andrew-twisted at puzzling.org  Sun Sep  4 21:36:22 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 5 Sep 2005 11:36:22 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <d06a5cd30509041819349c8e91@mail.gmail.com>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
	<d06a5cd30509041813196df10b@mail.gmail.com>
	<d06a5cd30509041819349c8e91@mail.gmail.com>
Message-ID: <20050905013622.GY8963@trogdor.home.puzzling.org>

On Mon, Sep 05, 2005 at 11:19:51AM +1000, Jonathan Lange wrote:
> Actually, it'd make things go quicker if you could help me write a
> unit test for this behaviour.
> 
> Also, I'd appreciate advice on ways to avoid further regressions yet
> still maintain a good pace of development.

The low-tech answer would be to diff the output of "bin/trial -R twisted"
using trial from trunk vs. trial from your branch (for both stdout and
stderr, of course).  That will at least catch any differences in the major
project people care about.

I expect that as you increase test coverage, regressions will be less and
less common.

-Andrew.




From jonathan.lange at gmail.com  Mon Sep  5 01:54:08 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 15:54:08 +1000
Subject: [Twisted-Python] OK to remove doctest support from Trial?
Message-ID: <d06a5cd30509042254282ea436@mail.gmail.com>

Does anyone care deeply about Trial supporting doctests?  I would like
to remove the support.  It's almost unused in Twisted, clutters the
trial code and is slowing down refactoring.

My grep skills indicate that there's only one set of doctests in
Twisted (in t.web2.test.test_stream).  A patch is attached to replace
these with unit tests.  (I'll apply it if the web2 maintainers
approve).

cheers,
jml
-------------- next part --------------
A non-text attachment was scrubbed...
Name: remove-doctests.patch
Type: application/octet-stream
Size: 4560 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050905/e55fb09e/attachment.obj 

From nico at tekNico.net  Mon Sep  5 04:05:29 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 05 Sep 2005 10:05:29 +0200
Subject: [Twisted-Python] Re: OK to remove doctest support from Trial?
In-Reply-To: <d06a5cd30509042254282ea436@mail.gmail.com>
References: <d06a5cd30509042254282ea436@mail.gmail.com>
Message-ID: <dfgu8a$d29$1@sea.gmane.org>

> Does anyone care deeply about Trial supporting doctests?  I would like
> to remove the support.  It's almost unused in Twisted, clutters the
> trial code and is slowing down refactoring.

This is very bad news. :-(

I was hoping to be able to use doctest in Twisted-based code after the
refactoring (since I don't grasp how to use it right now). If noone else is
using it, and it slows you down too much, well, go ahead and remove it. :-(

May I ask you to write down a few doc lines about what it would take for me
to reenable it afterwards, if at all feasible? Thank you.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From sflist at ihonk.com  Mon Sep  5 04:35:41 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Mon, 05 Sep 2005 01:35:41 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <1125768936.1199.5.camel@lothar>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com> <df78s3$g76$1@sea.gmane.org>
	<4327422405090122107bd01086@mail.gmail.com>
	<1125768936.1199.5.camel@lothar>
Message-ID: <1125909341.5116.33.camel@lothar>

Actually, ya know what'd be even better? If the serialize and
deserialize functions were simply lightning fast -- then we wouldn't
even have to care about the time spent doing it, and the workaround I
described would be a waste of time.

Steve




From nico at tekNico.net  Mon Sep  5 04:47:24 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 05 Sep 2005 10:47:24 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <1125909341.5116.33.camel@lothar>
References: <4316FB22.6050604@tekNico.net>
	<43170B4B.70307@tekNico.net>	<432742240509010835b3e6c7f@mail.gmail.com>
	<df78s3$g76$1@sea.gmane.org>	<4327422405090122107bd01086@mail.gmail.com>	<1125768936.1199.5.camel@lothar>
	<1125909341.5116.33.camel@lothar>
Message-ID: <dfh0ms$jme$1@sea.gmane.org>

> Actually, ya know what'd be even better? If the serialize and
> deserialize functions were simply lightning fast -- then we wouldn't
> even have to care about the time spent doing it, and the workaround I
> described would be a waste of time.

Well, you can uncomment the cBanana hook in the PB code, and they will be
much faster. :-)

Nonetheless, whatever you do, there will always be a data size where they
won't be fast enough. Makes no sense spending 3X CPU on it, if available.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From antonykummel at yahoo.com  Mon Sep  5 05:22:20 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Mon, 5 Sep 2005 02:22:20 -0700 (PDT)
Subject: [Twisted-Python] some bugs(?)
Message-ID: <20050905092220.83071.qmail@web33914.mail.mud.yahoo.com>

Hi,

I encountered what seem to be some bugs:

1. In twisted/scripts/trial.py, line 276: the module's
contents are not executed if the lines are terminated
with "\r\n". I suggest using "r" instead of "rb" when
reading the file. Additionally, I would compile() the
source before executing it in order to associate it
with its filename. This will make debugging (at least
with winpdb) much easier (currently the filename is
"<string>", which prevents winpdb from finding the
source).

2. In twisted/plugin.py, line 135: paths are skipped
if they don't exist, but there is also the possibility
that they're misspelled. This gives rise to
WindowsError 123, which I think should also be
ignored, or at least an informative message should be
provided. It took me a very long time to find out my
PYTHONPATH was missing a ";".

Cheers,

Antony Kummel

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From antonykummel at yahoo.com  Mon Sep  5 06:09:42 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Mon, 5 Sep 2005 03:09:42 -0700 (PDT)
Subject: [Twisted-Python] time
Message-ID: <20050905100942.18718.qmail@web33915.mail.mud.yahoo.com>

Hi,

I noticed that the convention in Twisted is to measure
time with python.runtime.seconds. This in turn uses
time.time which is sensitive to the system clock,
meaning that it may return decreasing values if the
user sets the system clock to an earlier time between
calls. This would likely break many things, no? Why
not use time.clock or some combination between them?

Antony Kummel


	
		
______________________________________________________
Click here to donate to the Hurricane Katrina relief effort.
http://store.yahoo.com/redcross-donate3/



From jonathan.lange at gmail.com  Mon Sep  5 07:59:33 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 21:59:33 +1000
Subject: [Twisted-Python] some bugs(?)
In-Reply-To: <20050905092220.83071.qmail@web33914.mail.mud.yahoo.com>
References: <20050905092220.83071.qmail@web33914.mail.mud.yahoo.com>
Message-ID: <d06a5cd3050905045971e4954a@mail.gmail.com>

On 05/09/05, Antony Kummel <antonykummel at yahoo.com> wrote:
> Hi,
> 
> I encountered what seem to be some bugs:
> 
> 1. In twisted/scripts/trial.py, line 276: the module's
> contents are not executed if the lines are terminated
> with "\r\n". I suggest using "r" instead of "rb" when
> reading the file. Additionally, I would compile() the
> source before executing it in order to associate it
> with its filename. This will make debugging (at least
> with winpdb) much easier (currently the filename is
> "<string>", which prevents winpdb from finding the
> source).
> 

Hi Antony,

Thanks for filing these bugs.  Particularly since they are win32 bugs
(most of us use some form of UNIX, and thus love it when someone
_else_ tests on Windows.)

I've committed a fix for the first bug, as well as a couple of unit
tests to avoid it happening again.  I'd appreciate it if you could
confirm that this indeed fixes your problem.

For future reference, the best place to file bugs is with the Twisted
issue tracker[1], rather than on the mailing list.

cheers,
jml

[1] http://www.twistedmatrix.com/bugs/.



From jonathan.lange at gmail.com  Mon Sep  5 08:12:12 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 22:12:12 +1000
Subject: [Twisted-Python] Re: OK to remove doctest support from Trial?
In-Reply-To: <dfgu8a$d29$1@sea.gmane.org>
References: <d06a5cd30509042254282ea436@mail.gmail.com>
	<dfgu8a$d29$1@sea.gmane.org>
Message-ID: <d06a5cd30509050512742293db@mail.gmail.com>

On 05/09/05, Nicola Larosa <nico at teknico.net> wrote:
> > Does anyone care deeply about Trial supporting doctests?  I would like
> > to remove the support.  It's almost unused in Twisted, clutters the
> > trial code and is slowing down refactoring.
> 
> This is very bad news. :-(
> 

People on IRC have persuaded me to adopt an alternate strategy.

That is all.



From grimmtooth at gmail.com  Mon Sep  5 09:14:55 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Mon, 5 Sep 2005 09:14:55 -0400
Subject: [Twisted-Python] time
In-Reply-To: <20050905100942.18718.qmail@web33915.mail.mud.yahoo.com>
References: <20050905100942.18718.qmail@web33915.mail.mud.yahoo.com>
Message-ID: <8f4623fb05090506145762da56@mail.gmail.com>

On 9/5/05, Antony Kummel <antonykummel at yahoo.com> wrote:
> 
> Hi,
> 
> I noticed that the convention in Twisted is to measure
> time with python.runtime.seconds. This in turn uses
> time.time which is sensitive to the system clock,
> meaning that it may return decreasing values if the
> user sets the system clock to an earlier time between
> calls. This would likely break many things, no? Why
> not use time.clock or some combination between them?
> 

Seems to me that using the same clock as the rest of the system is the 
single best way to ensure that other logs and Twisted's logs agree on the 
time stamp.

Just imagine the nightmare if there was an issue pointed to by the twisted 
log, but since it was "correct" it couldn't be directly matched up with 
another system log that actually pointed to the source of the problem.

This has actually proven to be quite useful for me.

-- 
"Things fall apart. The Center cannot hold."
- Life as a QA geek, in a nutshell.

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050905/7f331c36/attachment.htm 

From antonykummel at yahoo.com  Mon Sep  5 09:37:29 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Mon, 5 Sep 2005 06:37:29 -0700 (PDT)
Subject: [Twisted-Python] application
Message-ID: <20050905133729.47917.qmail@web33910.mail.mud.yahoo.com>

Hi,

I am beginning to use twisted.application, mktap and
twistd in my project, and I have some questions about
their use:

1. It seems that mktap is aimed primarily to create
applications containing just one service (since to
append a service to an application you need a separate
invocation of mktap). I am thinking to use it mostly
to combine services and I wonder if I'm
misunderstanding something or if I should use
MultiService or what.

Specifically, I want to have numerous services that
are (modified) PB client/servers, and when several
such services are at the same process, I want them all
to use the same ServerFactory. What I did was to make
one mktap plugin for the "base server", and several
plugins for the services themselves. These services
require that the application also contains a "base
server", and they bind to it automatically. This
requires creating an application with only the "base
server", and then adding to it the different
subsidiary services. Any ideas on how to do this
optimally?

2. Tap conventions: it is not very clear how to make
the best use of mktap in terms of code organization.
It seems that to make plugins I need to have a
twisted/plugins folder in my application's root
directory. In twisted, this folder contains files
named twisted_*.py, I'm not sure why this naming
convention. The files in this directory point to tap
construction modules. These modules seem to be either
in twisted/tap or in twisted/*something*, in which
case they are called either tap.py or
*something*_tap.py. Additionally, the services these
modules use come from a variety of places in which I
couldn't find coherence.

So, my question is, where should I put the mktap
plugins, the tap construction modules, and the service
implementations so that it makes sense? Am I missing
anything?

2. I understand that application is meant to hold the
services' configuration. However, there are many kinds
of configurations, and I'm struggling to make a
distinction between options that are suitable for the
mktap command line, for xml-serialized applications,
and for other mechanisms, such as a human-readable
configuration file suitable for an innocent end-user.
For example, an ini file could be used to specify the
skin of a GUI application, and debugging options, but
what is more suitable for the mktap command line?
Maybe only options that somehow affect the basic
"type" of the service?

Thanks,

Antony Kummel


	
		
______________________________________________________
Click here to donate to the Hurricane Katrina relief effort.
http://store.yahoo.com/redcross-donate3/



From antonykummel at yahoo.com  Mon Sep  5 09:44:05 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Mon, 5 Sep 2005 06:44:05 -0700 (PDT)
Subject: [Twisted-Python] time
In-Reply-To: <8f4623fb05090506145762da56@mail.gmail.com>
Message-ID: <20050905134406.67551.qmail@web33913.mail.mud.yahoo.com>

--- Jeff Grimmett <grimmtooth at gmail.com> wrote:

> On 9/5/05, Antony Kummel <antonykummel at yahoo.com>
> wrote:
> > 
> > Hi,
> > 
> > I noticed that the convention in Twisted is to
> measure
> > time with python.runtime.seconds. This in turn
> uses
> > time.time which is sensitive to the system clock,
> > meaning that it may return decreasing values if
> the
> > user sets the system clock to an earlier time
> between
> > calls. This would likely break many things, no?
> Why
> > not use time.clock or some combination between
> them?
> > 
> 
> Seems to me that using the same clock as the rest of
> the system is the 
> single best way to ensure that other logs and
> Twisted's logs agree on the 
> time stamp.
> 
> Just imagine the nightmare if there was an issue
> pointed to by the twisted 
> log, but since it was "correct" it couldn't be
> directly matched up with 
> another system log that actually pointed to the
> source of the problem.
> 
> This has actually proven to be quite useful for me.

For logging, I agree, but the system clock is used for
many purposes, among them, for example, the mechanics
of LoopingCall, or the reactor's scheduling of delayed
calls, I think (please correct me if I'm wrong).

So it seems to me that while an application that uses
the current method may produce more useful logs but it
will also exhibit undefined behavior regarding the
rest of its functionality, no?

Antony Kummel


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From exarkun at divmod.com  Mon Sep  5 14:04:09 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 5 Sep 2005 14:04:09 -0400
Subject: [Twisted-Python] time
In-Reply-To: <20050905100942.18718.qmail@web33915.mail.mud.yahoo.com>
Message-ID: <20050905180409.3914.764989997.divmod.quotient.12478@ohm>

On Mon, 5 Sep 2005 03:09:42 -0700 (PDT), Antony Kummel <antonykummel at yahoo.com> wrote:
>Hi,
>
>I noticed that the convention in Twisted is to measure
>time with python.runtime.seconds. This in turn uses
>time.time which is sensitive to the system clock,
>meaning that it may return decreasing values if the
>user sets the system clock to an earlier time between
>calls. This would likely break many things, no? Why
>not use time.clock or some combination between them?
>

Twisted provides no real-time guarantees.  The reliance on time.time() to return sensible results is just one aspect of this.  If you're worried about scheduling in your application, you'll probably see more problems come up from Linux context switches, blocking syscalls (including disk I/O), system load, slow Python functions, Python's garbage collector, and user interference.  Clock skew just doesn't come up much in practice, at least on any of the systems I run code on (NTP is your friend).

Jp



From exarkun at divmod.com  Mon Sep  5 14:14:05 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 5 Sep 2005 14:14:05 -0400
Subject: [Twisted-Python] application
In-Reply-To: <20050905133729.47917.qmail@web33910.mail.mud.yahoo.com>
Message-ID: <20050905181405.3914.1934399467.divmod.quotient.12481@ohm>

On Mon, 5 Sep 2005 06:37:29 -0700 (PDT), Antony Kummel <antonykummel at yahoo.com> wrote:
>Hi,
>
>I am beginning to use twisted.application, mktap and
>twistd in my project, and I have some questions about
>their use:
>
You may want to start out using TAC files, rather than TAP files.  TAC files are easier to manipulate, which is a plus during development.  TAP files will let you solidify whatever configuration you decide upon and expose it via the `mktap' command line.

>1. It seems that mktap is aimed primarily to create
>applications containing just one service (since to
>append a service to an application you need a separate
>invocation of mktap). I am thinking to use it mostly
>to combine services and I wonder if I'm
>misunderstanding something or if I should use
>MultiService or what.
>
>Specifically, I want to have numerous services that
>are (modified) PB client/servers, and when several
>such services are at the same process, I want them all
>to use the same ServerFactory. What I did was to make
>one mktap plugin for the "base server", and several
>plugins for the services themselves. These services
>require that the application also contains a "base
>server", and they bind to it automatically. This
>requires creating an application with only the "base
>server", and then adding to it the different
>subsidiary services. Any ideas on how to do this
>optimally?

Each service appended to a TAP will have a reference to the parent service, which in turn has references to all its children.  By searching this graph, services can find other services that have been configured independently.  A good way to do this is usually by interface.

>
>2. Tap conventions: it is not very clear how to make
>the best use of mktap in terms of code organization.
>It seems that to make plugins I need to have a
>twisted/plugins folder in my application's root
>directory. In twisted, this folder contains files
>named twisted_*.py, I'm not sure why this naming
>convention. The files in this directory point to tap
>construction modules. These modules seem to be either
>in twisted/tap or in twisted/*something*, in which
>case they are called either tap.py or
>*something*_tap.py. Additionally, the services these
>modules use come from a variety of places in which I
>couldn't find coherence.
>
>So, my question is, where should I put the mktap
>plugins, the tap construction modules, and the service
>implementations so that it makes sense? Am I missing
>anything?
>

For mktap to find your TAP plugin, it must be in twisted/plugins/.  Beyond that, Twisted doesn't care how you organize things.  As a convention, Twisted uses the twisted_ prefix so as to reduce the chance of colliding with other plugins.  If you want to be nice, you should probably adopt a similar prefix for your plugins.

The modules implementing the TAP plugins can go anywhere importable.  If it helps you decide at all, the twisted/tap/ package is generally considered to have been a mistake, and those modules have been gradually moving out to twisted/project/tap.py files.

>2. I understand that application is meant to hold the
>services' configuration. However, there are many kinds
>of configurations, and I'm struggling to make a
>distinction between options that are suitable for the
>mktap command line, for xml-serialized applications,
>and for other mechanisms, such as a human-readable
>configuration file suitable for an innocent end-user.
>For example, an ini file could be used to specify the
>skin of a GUI application, and debugging options, but
>what is more suitable for the mktap command line?
>Maybe only options that somehow affect the basic
>"type" of the service?
>

This is a pretty broad question.  I don't know that I have any particular insight into it.  Pretty much every program, whether it uses Twisted or Python or not, has to make a decision here.

Jp



From grimmtooth at gmail.com  Mon Sep  5 17:11:12 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Mon, 5 Sep 2005 17:11:12 -0400
Subject: [Twisted-Python] time
In-Reply-To: <20050905134406.67551.qmail@web33913.mail.mud.yahoo.com>
References: <8f4623fb05090506145762da56@mail.gmail.com>
	<20050905134406.67551.qmail@web33913.mail.mud.yahoo.com>
Message-ID: <8f4623fb050905141135250bed@mail.gmail.com>

On 9/5/05, Antony Kummel <antonykummel at yahoo.com> wrote:

> For logging, I agree, but the system clock is used for
> many purposes, among them, for example, the mechanics
> of LoopingCall, or the reactor's scheduling of delayed
> calls, I think (please correct me if I'm wrong).


Your pardon; for some reason I read "logging" in your post when it wasn't 
there. It's been a long weekend :-)

-- 
"Things fall apart. The Center cannot hold."
- Life as a QA geek, in a nutshell.

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050905/0781489b/attachment.htm 

From glyph at divmod.com  Mon Sep  5 17:52:48 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 5 Sep 2005 17:52:48 -0400
Subject: [Twisted-Python] time
In-Reply-To: <20050905100942.18718.qmail@web33915.mail.mud.yahoo.com>
Message-ID: <20050905215248.3914.519465400.divmod.quotient.12528@ohm>

On Mon, 5 Sep 2005 03:09:42 -0700 (PDT), Antony Kummel <antonykummel at yahoo.com> wrote:

>I noticed that the convention in Twisted is to measure
>time with python.runtime.seconds. This in turn uses
>time.time which is sensitive to the system clock,
>meaning that it may return decreasing values if the
>user sets the system clock to an earlier time between
>calls. This would likely break many things, no? Why
>not use time.clock or some combination between them?

time.clock() is unfortunately useless due to differences in its behavior between different platforms:

>>> import time; help(time)

  Help on built-in function clock in module time:

  clock(...)
    clock() -> floating point number

    Return the CPU time or real time since the start of the process or since
    the first call to clock().  This has as much precision as the system
    records.

"CPU time" has absolutely nothing to do with "real time" and so using clock() to measure anything at all is pointless; its behavior is completely different between platforms.

There are other problems with time, too: it should return an integral number of milliseconds; the fact that it uses a float means that systems which cause the FPU to truncate double-precision floating point operations at single-precision (like DirectX) won't work at all with Twisted.

Basically, in order to provide a truly correct implementation of time, Twisted would need its own re-implementation of the 'time' and 'select' modules from the python standard library, as well as for all 3rd-party multiplexing and GUI libraries to take a different signature (since the convention is to use floats for time in Python) and nobody has yet had the time.

Clock skew is one of the easier issues to address; we just need an API to portably report a monotonically increasing real time in floating-point seconds, and for all the reactors to use it.  Patches accepted :).



From yves at sita.lu  Tue Sep  6 02:48:07 2005
From: yves at sita.lu (Yves Glodt)
Date: Tue, 06 Sep 2005 08:48:07 +0200
Subject: [Twisted-Python] database connection through ssh tunnel using
	twisted
In-Reply-To: <4315B473.9020104@sita.lu>
References: <43158057.5080901@sita.lu> <4315B473.9020104@sita.lu>
Message-ID: <431D3BA7.8000406@sita.lu>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050906/8bf5f12e/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Logo_Sita.jpg
Type: image/jpeg
Size: 3052 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050906/8bf5f12e/attachment.jpg 

From radeex at gmail.com  Tue Sep  6 04:40:27 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 6 Sep 2005 18:40:27 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <20050905013415.GH31836@home.puzzling.org>
References: <20050905013415.GH31836@home.puzzling.org>
Message-ID: <60ed19d405090601409c4ed5f@mail.gmail.com>

On 9/5/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> We're going to try for the first one sometime in October. People
> interested in a particular weekend should let me know, likewise people
> interested in a particular topic. Otherwise sit back and expect an
> announcement in a week or so.

Topics that I want to work on, just spur-of-the-moment ideas:
  - Inventing a way in Python to allow defgen and the like to be able
to raise informative tracebacks (involves hacking CPython or at least
writing an extension module). Assuming I haven't done it by then.
  - prose hacking on the howtos (ahem, guide)
  - Helping someone improve some protocol code might be fun (as long
as it isn't FTP ;)
  - Watching in wonder as exarkun causes a small tornado with his fingers
  - Imagination, anyone?

Topics that I bet other people will want to work on (a mixture of
wishful thinking and past experience):
  - VFS
  - trial
  - documentation
  - web2


And as for date, I'm _probably_ good any weekend in October.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From mary-twisted at puzzling.org  Tue Sep  6 04:47:44 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 6 Sep 2005 18:47:44 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <60ed19d405090601409c4ed5f@mail.gmail.com>
References: <20050905013415.GH31836@home.puzzling.org>
	<60ed19d405090601409c4ed5f@mail.gmail.com>
Message-ID: <20050906084744.GP31836@home.puzzling.org>

On Tue, Sep 06, 2005, Christopher Armstrong wrote:
> And as for date, I'm _probably_ good any weekend in October.

Random polls on IRC suggest that the following weekends are Ok for
everyone so far:

 - 8-9 October
 - 15-16 October
 - 22-23 October

-Mary



From antonykummel at yahoo.com  Tue Sep  6 04:53:48 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Tue, 6 Sep 2005 01:53:48 -0700 (PDT)
Subject: [Twisted-Python] some bugs(?)
In-Reply-To: <d06a5cd3050905045971e4954a@mail.gmail.com>
Message-ID: <20050906085348.3524.qmail@web33913.mail.mud.yahoo.com>

--- Jonathan Lange <jonathan.lange at gmail.com> wrote:

> On 05/09/05, Antony Kummel <antonykummel at yahoo.com>
> wrote:
> > Hi,
> > 
> > I encountered what seem to be some bugs:
> > 
> > 1. In twisted/scripts/trial.py, line 276: the
> module's
> > contents are not executed if the lines are
> terminated
> > with "\r\n". I suggest using "r" instead of "rb"
> when
> > reading the file. Additionally, I would compile()
> the
> > source before executing it in order to associate
> it
> > with its filename. This will make debugging (at
> least
> > with winpdb) much easier (currently the filename
> is
> > "<string>", which prevents winpdb from finding the
> > source).
> > 
> 
> Hi Antony,
> 
> I've committed a fix for the first bug, as well as a
> couple of unit
> tests to avoid it happening again.  I'd appreciate
> it if you could
> confirm that this indeed fixes your problem.
> 

It does, thanks.

Antony Kummel


	
		
______________________________________________________
Click here to donate to the Hurricane Katrina relief effort.
http://store.yahoo.com/redcross-donate3/



From jonathan.lange at gmail.com  Tue Sep  6 06:02:45 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Tue, 6 Sep 2005 20:02:45 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <60ed19d405090601409c4ed5f@mail.gmail.com>
References: <20050905013415.GH31836@home.puzzling.org>
	<60ed19d405090601409c4ed5f@mail.gmail.com>
Message-ID: <d06a5cd305090603026202b635@mail.gmail.com>

On 06/09/05, Christopher Armstrong <radeex at gmail.com> wrote:
> On 9/5/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> > We're going to try for the first one sometime in October. People
> > interested in a particular weekend should let me know, likewise people
> > interested in a particular topic. Otherwise sit back and expect an
> > announcement in a week or so.
> 
> Topics that I bet other people will want to work on (a mixture of
> wishful thinking and past experience):
>   - VFS
>   - trial

The man's a psychic. ;)



From glyph at divmod.com  Tue Sep  6 11:49:01 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 6 Sep 2005 11:49:01 -0400
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <60ed19d405090601409c4ed5f@mail.gmail.com>
Message-ID: <20050906154901.3914.407586893.divmod.quotient.12784@ohm>



On Tue, 6 Sep 2005 18:40:27 +1000, Christopher Armstrong <radeex at gmail.com> wrote:

>And as for date, I'm _probably_ good any weekend in October.

October is probably going to be really bad for me, what with Divmod and with moving out of, then back into, my apartment and all.

However, I'd like to participate at some point.  I hope this becomes a continuing tradition.



From pete.a.lee at gmail.com  Tue Sep  6 12:12:08 2005
From: pete.a.lee at gmail.com (Peter Lee)
Date: Tue, 06 Sep 2005 11:12:08 -0500
Subject: [Twisted-Python] Re: Traceback from pb-Server
References: <200506231053.31280.Stephan.Popp@iisb.fraunhofer.de>
Message-ID: <uy86arx9j.fsf@gmail.com>

>>>> Stephan Popp writes:

    Popp> If the pythonscript named taskDescription.fileName isn't there 
    Popp> self.serverErrorCB is called - thats ok. But it prints:
    Popp> reason [Failure instance: Traceback from remote host -- Traceback unavailable]

    Popp> But I need to know why the call failed. Can anyone please
    Popp> help me to get the traceback or the exception message that
    Popp> the server prints (exceptions.ImportError: No module named
    Popp> fitfunc2).

It's a Failure "instance"... take a look at:
http://twistedmatrix.com/documents/current/api/twisted.python.failure.Failure.html




From sflist at ihonk.com  Tue Sep  6 12:39:27 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Tue, 06 Sep 2005 09:39:27 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <dfh0ms$jme$1@sea.gmane.org>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com> <df78s3$g76$1@sea.gmane.org>
	<4327422405090122107bd01086@mail.gmail.com>
	<1125768936.1199.5.camel@lothar> <1125909341.5116.33.camel@lothar>
	<dfh0ms$jme$1@sea.gmane.org>
Message-ID: <1126024768.5189.5.camel@lothar>

On Mon, 2005-09-05 at 10:47 +0200, Nicola Larosa wrote:
> Well, you can uncomment the cBanana hook in the PB code, and they will
> be much faster. :-)

Oooh, seriously? Where do I do that?

Steve




From warner at lothar.com  Tue Sep  6 15:20:12 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 06 Sep 2005 12:20:12 -0700 (PDT)
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
Message-ID: <20050906.122012.15040166.warner@lothar.com>

>> In TP1, the business data should be serialized, and wrapped in an outer
>> layer, containing the destination coordinates. PX1 and PX2 should be able
>> to only unwrap and deserialize the outer layer only, while trasparently
>> forwarding the serialized business data.
>
> At a guess you'd need to write your own Unjellier class or something. I
> suspect this will be much easier in newpb, but I'm not *sure*. Brian?

Hm, tricky.

In oldpb, yeah, you need to get your hands dirty with Jelly. When you invoke
rref.callRemote(methname, *args, **kwargs), what really happens is:

 the RemoteReference is turned into a per-connection objid
 a pending-call slot is allocated, assigned a unique number 'callid'
 the following tuple is serialized and sent over the wire:
  ("call", objid, callid, methname, args, kwargs)

at the far end, the tuple is fully unserialized, then examined. The "call"
token triggers a lookup of 'objid' to find the target Referenceable, which
then gets its remoteMessageReceived method invoked. This method receives the
(methname, args, kwargs) values and is responsible for calling the final
remote_foo method. The (args,kwargs) received by remoteMessageReceived have
been unbananaed but not yet unjellied (see below), so most of the
deserialization work has already been spent.

There is no clean place in this sequence to tell the underlying Protocol
instance to switch from the banana-unserializing dataReceived() mode to some
just-copy-the-data mode: in general, everything gets unserialized before you
even find out what the target object is.

So the way I'd do what you're trying to do is to serialize the arguments
myself, then pass the resulting blob to the method that knows about the
dispatch/forwarding rules.

Terminology: "Jelly" is the layer that turns arbitrary object graphs into
s-expressions (nested lists of primitive types like strings), while "Banana"
is the layer that serializes these s-expressions into a series of bytes.
There is a Protocol subclass named Banana which is attached to the wire and
emits sexps as they arrive, then the Broker is a subclass of Banana which
interprets these sexps as commands. When these commands require sexps to be
turned into objects, it uses Jelly.

To jelly arbitrary data, you just do this:

from twisted.spread import banana, jelly
def encode(o):
    sexp = jelly.jelly(o, taster=jelly.globalSecurity)
    return banana.encode(sexp)
def decode(s):
    sexp = banana.decode(s)
    return jelly.unjelly(sexp, taster=jelly.globalSecurity)

The sending side would then look like:

def callThroughDispatcher(methname, *args, **kwargs):
    allargs = encode((methname, args, kwargs))
    d = target.callRemote("dispatch", methname, allargs)
    return d

the dispatch side could look like:

def remote_dispatch(self, methname, allargs):
    return self.targets[methname].callRemote("doit", allargs)

and the final target could look like:

def remote_doit(self, allargs):
    methname, args, kwargs = decode(allargs)
    m = getattr(self, "remote_%s" % methname)
    return m(*args, **kwargs)


The downsides of this approach:

 the "serialization domain" is rather small, and does not include the
 established connection, so this will fail if your arguments include
 Referenceables or RemoteReferences. (normally you would be able to pass new
 references through to the other side, but our encode() method does not know
 about the connection and therefore cannot manipulate the reference tables
 that would enable this)

 there is some overhead to encode()/decode(): it must create a new Banana
 instance, attach it to a dummy (StringIO) transport, then iterate it until
 all the serialized data is accumulated. This overhead is probably small in
 comparison to the time it takes to serialize a large/complicated object
 graph, but there will definitely be a break-even point somewhere, below
 which is makes more sense to let the existing Brokers do their own
 serialization.



In newpb, you'll have more options, but this use-case won't necessarily be
all that that much easier. The most useful new feature would be the pluggable
Slicers/Unslicers, which give you more control over serialization and
unserialization. It might be possible to write a faster serialization layer
(in C).. I suppose that might help something.

The fundamental problem is layer-mixing: you want to change the behavior of
the very lowest-layer code (serialization/unserialization) based upon
decisions made at much higher layers (target object or method name). This is
sort of what dual-mode protocols like SMTP and HTTP do, where they switch
between LineReceiver and RawDataReceiver depending upon protocol state, but
in SMTP the transition is simple enough to implement at a very low level
(just wait for a blank line). In both oldpb and newpb, the transition is
indicated at a much much higher protocol level.

A related problem is that serialization is closely tied to a context, in this
case some state in the per-connection Broker object. Most of the advanced
serialization features (being able to handle arbitrary object graphs, shared
objects, pointing at remote Referenceables, etc) depend upon this context.
The "Dispatcher" thing you want to do drags some of this deserialization into
a second context, one which may not share enough state with the first one, so
it may be infeasible to serialize anything but simple self-contained
datatypes this way.


I'm curious, what does your takes-a-long-time-to-serialize data look like? I
need some performance-test-cases to benchmark newpb serialization code with,
and if my test data looks more like your actual data, then newpb will be that
much faster for your application. Are there a lot of large strings? Long
lists? densely-connected graphs?

hope that's useful..
 -Brian



From warner at lothar.com  Tue Sep  6 15:38:26 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 06 Sep 2005 12:38:26 -0700 (PDT)
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
Message-ID: <20050906.123826.42466750.warner@lothar.com>

>> Well, you can uncomment the cBanana hook in the PB code, and they will
>> be much faster. :-)
>
> Oooh, seriously? Where do I do that?

Hm, I thought cBanana was the default? It might depend upon how you
build/install Twisted.. there are platforms on which the optional C
extensions are just skipped.

Oh, there it is.. twisted/spread/banana.py, towards the end, just grep for
'import cBanana'. Exarkun commented that out last year. Eh, give it a try,
see if it helps. I'd be a little bit worried about segfaulting, or exposing
such a port to a hostile party. But I honestly haven't looked at that code
for two years.

cBanana implements the lowest layer of serialization/deserialization in C, so
it will be a little bit faster. If your data consists of a lot of strings and
ints, the speedup will probably be greater than if it consists of a lot of
interconnected lists and tuples. It would be neat to have some actual
benchmarks of the speedup, though.

newpb is designed to make it possible to write Slicers/Unslicers in C, and in
fact to allow the base-level Protocol to be implemented in C, but none of
these hypothetical accelerated serializers have actually been written yet.
This would allow C serialization of basic types (lists, tuples) while
retaining standard python serialization of user-defined complex types, as
opposed to the oldpb/cBanana approach that uses C for only the lowest level
(turning string/number tokens into bytes). In theory, it should be possible
to make newpb run faster than oldpb. It will take some good use-cases and
benchmarking before this actually happens, though.

cheers,
 -Brian



From warner at lothar.com  Tue Sep  6 15:53:26 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 06 Sep 2005 12:53:26 -0700 (PDT)
Subject: [Twisted-Python] Re: Traceback from pb-Server
Message-ID: <20050906.125326.129423706.warner@lothar.com>

>     Popp> If the pythonscript named taskDescription.fileName isn't there 
>     Popp> self.serverErrorCB is called - thats ok. But it prints:
>     Popp> reason [Failure instance: Traceback from remote host -- Traceback unavailable]
>
>     Popp> But I need to know why the call failed. Can anyone please
>     Popp> help me to get the traceback or the exception message that
>     Popp> the server prints (exceptions.ImportError: No module named
>     Popp> fitfunc2).

Also, you may want to enable the 'unsafeTracebacks' flag. In general, when PB
calls a method that raises an exception, the traceback is recorded to the log
on the "near" side of the connection, but very little information is sent to
the "far" side of the connection. (this is intended as a security feature..
tracebacks frequently contain copies of the code that failed, and you might
not want to expose that.. Failure instances can contain copies of stack
frames, local variables, all kinds of juicy stuff).

The 'unsafeTracebacks' flag tells PB to convey more information over the
wire. The remote side (the one which callRemote'ed the failing method) still
gets a Failure object, all asynchronous exceptions in Twisted are reported
this way, but it gets a Failure object with more attributes than it would get
if unsafeTracebacks==False. The "Traceback unavailable" message is
specifically a result of unsafeTracebacks==False.

But, in practice, I usually try to debug these sorts of failures on the
target side, closer to the code that raised the exception. You're always
going to get more information on that end of the wire.


hope that helps,
 -Brian



From sflist at ihonk.com  Tue Sep  6 16:17:46 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Tue, 06 Sep 2005 13:17:46 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <20050906.122012.15040166.warner@lothar.com>
References: <20050906.122012.15040166.warner@lothar.com>
Message-ID: <1126037866.5189.19.camel@lothar>

On Tue, 2005-09-06 at 12:20 -0700, Brian Warner wrote:
> I'm curious, what does your takes-a-long-time-to-serialize data look like? I
> need some performance-test-cases to benchmark newpb serialization code with,
> and if my test data looks more like your actual data, then newpb will be that
> much faster for your application. Are there a lot of large strings? Long
> lists? densely-connected graphs?

Very interesting post, Brian -- lots of it above my head, but hey. :-)

In my case, the data is going between instances of a VNC server and a
VNC viewer. The viewer, of course, isn't sending much, but using PB rref
method calls to transfer the data from the VNC server was enough to max
out my Athlon 2200, albeit with both the PB client and the PB server
running on the same machine (it was just a prototype).

Steve




From sflist at ihonk.com  Tue Sep  6 16:21:14 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Tue, 06 Sep 2005 13:21:14 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <20050906.123826.42466750.warner@lothar.com>
References: <20050906.123826.42466750.warner@lothar.com>
Message-ID: <1126038074.5189.22.camel@lothar>

On Tue, 2005-09-06 at 12:38 -0700, Brian Warner wrote:
> Oh, there it is.. twisted/spread/banana.py, towards the end, just grep for
> 'import cBanana'. Exarkun commented that out last year. Eh, give it a try,
> see if it helps. I'd be a little bit worried about segfaulting, or exposing
> such a port to a hostile party. But I honestly haven't looked at that code
> for two years.

Well, given that I am going to be exposing this port to hostile parties,
and that I'm reasonably satisfied with the performance of my workaround,
I'll just bail on it. Thanks for the tip, though -- it might come in
handy for internal networking purposes.

Steve




From ckdriscoll at sympatico.ca  Tue Sep  6 17:10:36 2005
From: ckdriscoll at sympatico.ca (Chris Driscoll)
Date: Tue, 6 Sep 2005 17:10:36 -0400
Subject: [Twisted-Python] unsubscribe
Message-ID: <20050906211038.XEQH16985.tomts36-srv.bellnexxia.net@CHRIS>

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050906/a10bb9aa/attachment.htm 

From mary-twisted at puzzling.org  Tue Sep  6 17:58:01 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 7 Sep 2005 07:58:01 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <20050906154901.3914.407586893.divmod.quotient.12784@ohm>
References: <60ed19d405090601409c4ed5f@mail.gmail.com>
	<20050906154901.3914.407586893.divmod.quotient.12784@ohm>
Message-ID: <20050906215801.GA7319@sourdust.home.puzzling.org>

On Tue, Sep 06, 2005, glyph at divmod.com wrote:
> However, I'd like to participate at some point.  I hope this becomes a
> continuing tradition.

The intention is that it will, probably every few months. This one is
kind of testing the waters: seeing how many people want to play and
whether it contributes to the speed of Twisted development.

-Mary



From yves at sita.lu  Wed Sep  7 02:50:13 2005
From: yves at sita.lu (Yves Glodt)
Date: Wed, 07 Sep 2005 08:50:13 +0200
Subject: [Twisted-Python] conch.forwarding tutorial
Message-ID: <431E8DA5.6060803@sita.lu>

Hello,

can somebody point me at a conch.forwarding tutorial or code example?

best regards,
Yves



From tv at twistedmatrix.com  Wed Sep  7 09:20:22 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 07 Sep 2005 16:20:22 +0300
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <20050906084744.GP31836@home.puzzling.org>
References: <20050905013415.GH31836@home.puzzling.org>
	<60ed19d405090601409c4ed5f@mail.gmail.com>
	<20050906084744.GP31836@home.puzzling.org>
Message-ID: <1126099222.4207.22.camel@pooch>

On Tue, 2005-09-06 at 18:47 +1000, Mary Gardiner wrote:
> Random polls on IRC suggest that the following weekends are Ok for
> everyone so far:
> 
>  - 8-9 October
>  - 15-16 October
>  - 22-23 October

These are all fine with me. Could we please pick one soon,
so I can mark it booked and not worry about collisions?
I vote for "ASAP", which in this case would mean 8-9 October.

I want to work on (if I have time and motiva^Wcaffei^Whelp):

get me started on using shtoom
twisted.web2.access (ACL support, see Nevow/sandbox/tv/access)
vhost logging improvements
nevow/t.w2 clean up of "Site" and how vhosts are handled
nevow release procedures
actual nevow release
reverse proxying, both proxy and target
wubwubwub
debianization of various related things
maybe backporting latest twisted+nevow debs to debian sarge
atom/rss related things
learning livepage
eoc (the mailing list manager) webui (aka mailman killer)
delicate (think distributed, replicated, del.icio.us reimplementation)
anything under http://www.inoi.fi/open/

(yes, I know that's too much to do in a single weekend;)





From mary-twisted at puzzling.org  Wed Sep  7 09:28:10 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 7 Sep 2005 23:28:10 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <1126099222.4207.22.camel@pooch>
References: <20050905013415.GH31836@home.puzzling.org>
	<60ed19d405090601409c4ed5f@mail.gmail.com>
	<20050906084744.GP31836@home.puzzling.org>
	<1126099222.4207.22.camel@pooch>
Message-ID: <20050907132810.GC10244@sourdust.home.puzzling.org>

On Wed, Sep 07, 2005, Tommi Virtanen wrote:
> These are all fine with me. Could we please pick one soon,
> so I can mark it booked and not worry about collisions?

Expect a final decision Sunday, I'm just allowing a few more days for
random input.

-Mary



From ajchos at wp.pl  Wed Sep  7 10:27:17 2005
From: ajchos at wp.pl (=?iso-8859-2?Q?Micha=B3?= Tyde)
Date: Wed, 07 Sep 2005 16:27:17 +0200
Subject: [Twisted-Python] Telnet & sending commands to pine application
Message-ID: <1126103237.9808.12.camel@localhost.localdomain>

I have got a telnet client, and I send to him a commands via
protocols.telnet.transport.write(command="pine"). I have run a pine
application. Now I want to send a Q (Quit) message and y (yes) to close
the pine. I send this messages using the same
protocols.telnet.transport.write(command). Pine doesn't respond for my
commands. I thought that when I send a single char I should close a
pine. Maybe I should send this command to pine application not to a
server (how to do it?).
Thanks in advance for all answers





From nico at tekNico.net  Wed Sep  7 13:54:39 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 07 Sep 2005 19:54:39 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <1126024768.5189.5.camel@lothar>
References: <4316FB22.6050604@tekNico.net>
	<43170B4B.70307@tekNico.net>	<432742240509010835b3e6c7f@mail.gmail.com>
	<df78s3$g76$1@sea.gmane.org>	<4327422405090122107bd01086@mail.gmail.com>	<1125768936.1199.5.camel@lothar>
	<1125909341.5116.33.camel@lothar>	<dfh0ms$jme$1@sea.gmane.org>
	<1126024768.5189.5.camel@lothar>
Message-ID: <dfn9h0$a4j$1@sea.gmane.org>

>> Well, you can uncomment the cBanana hook in the PB code, and they will
>> be much faster. :-)

> Oooh, seriously? Where do I do that?

With reference to the current trunk, it's eight lines at
t.spread.banana.py#311 . Here's the rationale for those being commented:

http://twistedmatrix.com/pipermail/twisted-python/2004-December/009158.html

Any news on the cBanana front, guys?

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From nico at tekNico.net  Wed Sep  7 14:01:22 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 07 Sep 2005 20:01:22 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <20050906.122012.15040166.warner@lothar.com>
References: <20050906.122012.15040166.warner@lothar.com>
Message-ID: <dfn9tj$c1i$1@sea.gmane.org>

Great post, archived. :-)


> I'm curious, what does your takes-a-long-time-to-serialize data look like? I
> need some performance-test-cases to benchmark newpb serialization code with,
> and if my test data looks more like your actual data, then newpb will be that
> much faster for your application. Are there a lot of large strings? Long
> lists? densely-connected graphs?

Mostly, *very* long lists of small objects, each containing a few numbers
and short strings.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From nico at tekNico.net  Wed Sep  7 14:09:16 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 07 Sep 2005 20:09:16 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <dfn9h0$a4j$1@sea.gmane.org>
References: <4316FB22.6050604@tekNico.net>	<43170B4B.70307@tekNico.net>	<432742240509010835b3e6c7f@mail.gmail.com>	<df78s3$g76$1@sea.gmane.org>	<4327422405090122107bd01086@mail.gmail.com>	<1125768936.1199.5.camel@lothar>	<1125909341.5116.33.camel@lothar>	<dfh0ms$jme$1@sea.gmane.org>	<1126024768.5189.5.camel@lothar>
	<dfn9h0$a4j$1@sea.gmane.org>
Message-ID: <dfnacc$c1i$2@sea.gmane.org>

> Any news on the cBanana front, guys?

OK, saw Brian's answer, discard the question.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From warner at lothar.com  Wed Sep  7 22:07:33 2005
From: warner at lothar.com (Brian Warner)
Date: Wed, 07 Sep 2005 19:07:33 -0700 (PDT)
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
Message-ID: <20050907.190733.18270696.warner@lothar.com>

> Mostly, *very* long lists of small objects, each containing a few numbers
> and short strings.

What order of magnitude are we talking about? Would something like
[(1,12,"foo","bar") for i in range(10000)] be close? If so, I'll use this as
one of the benchmark cases.

> In my case, the data is going between instances of a VNC server and a
> VNC viewer. The viewer, of course, isn't sending much, but using PB rref
> method calls to transfer the data from the VNC server was enough to max
> out my Athlon 2200, albeit with both the PB client and the PB server
> running on the same machine (it was just a prototype).

So most of the data is opaque VNC blobs? What kind of a size-histogram are we
talking about? Or is this a python implementation of the VNC protocol?


FYI, newpb is scheduled to have an opportunistic string-caching scheme in
which any string that gets sent over the wire more than a couple times gets
replaced by a VOCAB token with a number. The idea is to compress all the
standard internal PB sequences (like "list", "tuple", "my-reference", "call")
into short two-byte tokens, and for the sender to decide which strings get
tokenized these ways (there will be a special sequence that adds/removes
things from the receiver's mapping). Incidentally, oldpb used a "dialect"
number (of which there was only one) which indicated a static list of strings
to tokenize this way.

I haven't implemented this part yet, but when I do I'll be curious about how
to keep it from thrashing on the strings in user data. I'm vaguely planning
on something that ignores any string longer than 20 characters, keeps a list
of 100 or so with a counter for each, when the counter hits 3 the word gets
VOCABized, if the list is full when a new word is introduced then an old one
gets thrown out at random. No idea how this will perform.. worst case I'll go
back to a static list, but still have it sender-chosen (based upon just the
strings that actually appear in the newpb code), making it more flexible and
less negotiation-heavy than oldpb's approach.

thanks,
 -Brian



From stefano at pragma2000.com  Thu Sep  8 01:59:57 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 8 Sep 2005 07:59:57 +0200
Subject: [Twisted-Python] Multiplexing multiple transports over one
Message-ID: <4327422405090722593477f18@mail.gmail.com>

It shouldn't be too difficult to implement, or maybe it's already there...

I'm looking for some mechanism that allows me to multiplex multiple
protocols over the same connection. Say I open a socket on port 3000,
and I run both http and smtp over it. Of course this is sort of a port
redirection thing, like ssh does, so I need a way to specify which
host and port should be contacted by the other end of the tunnel.

It looks like consh.ssh.forwarding should do exactly this, but since I
never used it, does it only do it over ssh? Or can I use it over a
simple tcp connection as well? I'm worried about the encryption
overhead.

thanks!
stefano



From foom at fuhm.net  Thu Sep  8 02:34:28 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 8 Sep 2005 02:34:28 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <318C0882-8F6C-44E6-ABA8-2FB28A384CE1@fuhm.net>

Bug summary
______________________
Since 2005-08-31 21:44:42.620000:
  Bugs opened: 6   Bugs closed: 1   Total open bugs: 423 (+5)
   Urgent: 10 (+0)
   Bug: 188 (+2)
   Feature: 153 (+2)
   Wish: 72 (+1)

New / Reopened Bugs
______________________
                     ==== Bug ====
[DOCUMENTATION, MAIL] mail documentation links to non-existant  
example  (4 minutes ago)
        http://twistedmatrix.com/bugs/issue1162 opened by hypatia

[FTP] FTPClient failed commands return a FirstError  (yesterday)
        http://twistedmatrix.com/bugs/issue1160 opened by orbitz

[TRIAL] Trial raises "whoop whoop" error when given a filename  (2  
days ago)
        http://twistedmatrix.com/bugs/issue1159 opened by jml

[CONCH, TRIAL] CharacterAttribute's __getattr__ fools  
inspect.isclass.  (3 days ago)
        http://twistedmatrix.com/bugs/issue1158 opened by jml

                     ==== Feature ====
[WEB] web.http.HTTPClient does not support chunked transfer-encoding   
(5 days ago)
        http://twistedmatrix.com/bugs/issue1157 opened by jeffsilver

                     ==== Wish ====
[DOCUMENTATION] Write an "what is an event loop and how do they  
work?" doc.  (3/4 hour ago)
        http://twistedmatrix.com/bugs/issue1161 opened by spiv

Bugs Closed
______________________
                     ==== Bug ====
Raised Jellyable pb.Error doesn't jelly if raised in callback  (6  
days ago)
        http://twistedmatrix.com/bugs/issue1156 opened by justinj,  
closed by warner




From nico at tekNico.net  Thu Sep  8 02:35:04 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 08 Sep 2005 08:35:04 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <20050907.190733.18270696.warner@lothar.com>
References: <20050907.190733.18270696.warner@lothar.com>
Message-ID: <dfom2p$k6f$1@sea.gmane.org>

>> Mostly, *very* long lists of small objects, each containing a few numbers
>> and short strings.

> What order of magnitude are we talking about? Would something like
> [(1,12,"foo","bar") for i in range(10000)] be close? If so, I'll use this as
> one of the benchmark cases.

Make that

[(0,1,2,3,4,5,6,7,8.0,9.0,'f','fo','foo','foob','fooba','foobar')
    for i in range(10**6)]

:-)


> FYI, newpb is scheduled to have an opportunistic string-caching scheme in
> which any string that gets sent over the wire more than a couple times gets
> replaced by a VOCAB token with a number. The idea is to compress all the
> standard internal PB sequences (like "list", "tuple", "my-reference", "call")
> into short two-byte tokens, and for the sender to decide which strings get
> tokenized these ways (there will be a special sequence that adds/removes
> things from the receiver's mapping).

That would be great, in my case the total number of different string is
rather small. But instead of spending effort on that, you may want to
consider ways of transparently compressing and decompressing the serialized
stream with a standard algorithm.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From nico at tekNico.net  Thu Sep  8 02:42:46 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 08 Sep 2005 08:42:46 +0200
Subject: [Twisted-Python] Re: Multiplexing multiple transports over one
In-Reply-To: <4327422405090722593477f18@mail.gmail.com>
References: <4327422405090722593477f18@mail.gmail.com>
Message-ID: <dfomh8$lbb$1@sea.gmane.org>

> I'm looking for some mechanism that allows me to multiplex multiple
> protocols over the same connection. Say I open a socket on port 3000,
> and I run both http and smtp over it. Of course this is sort of a port
> redirection thing, like ssh does, so I need a way to specify which
> host and port should be contacted by the other end of the tunnel.

This could be a nice solution to my problem too! I don't even need a way to
specify another protocol, since it's all PB: host and port would be enough.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From stefano at pragma2000.com  Thu Sep  8 05:34:51 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 8 Sep 2005 11:34:51 +0200
Subject: [Twisted-Python] Re: Multiplexing multiple transports over one
In-Reply-To: <dfomh8$lbb$1@sea.gmane.org>
References: <4327422405090722593477f18@mail.gmail.com>
	<dfomh8$lbb$1@sea.gmane.org>
Message-ID: <4327422405090802344bbe5432@mail.gmail.com>

On 9/8/05, Nicola Larosa <nico at teknico.net> wrote:
> This could be a nice solution to my problem too! I don't even need a way to
> specify another protocol, since it's all PB: host and port would be enough.

Yeah, I was gonna tell you... :)



From tv at twistedmatrix.com  Fri Sep  9 02:23:11 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 09 Sep 2005 09:23:11 +0300
Subject: [Twisted-Python] Multiplexing multiple transports over one
In-Reply-To: <4327422405090722593477f18@mail.gmail.com>
References: <4327422405090722593477f18@mail.gmail.com>
Message-ID: <43212A4F.6030301@twistedmatrix.com>

Stefano Masini wrote:
> I'm looking for some mechanism that allows me to multiplex multiple
> protocols over the same connection. Say I open a socket on port 3000,
> and I run both http and smtp over it. Of course this is sort of a port
> redirection thing, like ssh does, so I need a way to specify which
> host and port should be contacted by the other end of the tunnel.
> 
> It looks like consh.ssh.forwarding should do exactly this, but since I
> never used it, does it only do it over ssh? Or can I use it over a
> simple tcp connection as well? I'm worried about the encryption
> overhead.

Conch is SSH only. If you don't want that, try SOCKS or BXXP.
There is a SOCKS implementation in twisted.



From mszumocki at contman.pl  Fri Sep  9 04:39:56 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Fri, 09 Sep 2005 10:39:56 +0200
Subject: [Twisted-Python] Epydoc + interfaces
In-Reply-To: <E1EDQgv-000801-03@pyramid.twistedmatrix.com>
Message-ID: <20050909083956.7a5a2006@poczta.contman.pl>

Hello all,

 When i tried to generate api docs for my application (that uses Twisted 2.0 and Zope interfaces)
i noticed that interface documentation is missing. However, in Twisted API docs, interface info
generated by epydoc seems to be fine. I assume there is some kind of workaround that makes epydoc
able to generate interface info that you guys used when generating Twisted API docs. Please
share the secret :)

Maciej Szumocki



From sflist at ihonk.com  Fri Sep  9 05:13:51 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Fri, 09 Sep 2005 02:13:51 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <20050907.190733.18270696.warner@lothar.com>
References: <20050907.190733.18270696.warner@lothar.com>
Message-ID: <1126257231.23824.8.camel@lothar>

On Wed, 2005-09-07 at 19:07 -0700, Brian Warner wrote:
> So most of the data is opaque VNC blobs? What kind of a size-histogram are we
> talking about? Or is this a python implementation of the VNC protocol?

No, not a Python implementation, just opaque VNC blobs. I'm in the
middle of a rewrite, so I've thoroughly broken it, but I'll get it to
you as soon as I can.

> FYI, newpb is scheduled to have an opportunistic string-caching scheme in
> which any string that gets sent over the wire more than a couple times gets
> replaced by a VOCAB token with a number. The idea is to compress all the
> standard internal PB sequences (like "list", "tuple", "my-reference", "call")
> into short two-byte tokens, and for the sender to decide which strings get
> tokenized these ways (there will be a special sequence that adds/removes
> things from the receiver's mapping). Incidentally, oldpb used a "dialect"
> number (of which there was only one) which indicated a static list of strings
> to tokenize this way.

Ooh, the tokenization sounds sweet. I'm looking forward to trying it
out. On another note, I'm thinking that if newpb could be
super-duper-fastoid, I'd be pleased to use it for file transfers, too.
Just grab a chunk of data of some arbitrary size, send it, repeat. Maybe
rzip it beforehand, maybe not.

Steve




From nico at tekNico.net  Fri Sep  9 05:32:16 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Fri, 09 Sep 2005 11:32:16 +0200
Subject: [Twisted-Python] Re: Epydoc + interfaces
In-Reply-To: <20050909083956.7a5a2006@poczta.contman.pl>
References: <E1EDQgv-000801-03@pyramid.twistedmatrix.com>
	<20050909083956.7a5a2006@poczta.contman.pl>
Message-ID: <dfrkr1$kot$1@sea.gmane.org>

[Please shorten your message lines within 72-76 chars. Thank you. :-) ]


> When i tried to generate api docs for my application (that uses Twisted
> 2.0 and Zope interfaces) i noticed that interface documentation is
> missing. However, in Twisted API docs, interface info generated by epydoc
> seems to be fine. I assume there is some kind of workaround that makes
> epydoc able to generate interface info that you guys used when generating
> Twisted API docs. Please share the secret :)

The secret is apparently the epyrun script in the admin directory of the
trunk. Can't give you a direct link because the SVN web access is not
working right now.

There's been a mailing list thread about it a while ago, try searching the
archives.

-- 
Nicola Larosa - nico at tekNico.net

A lot of the folks here are extraordinarily intelligent and capable of
extreme levels of dedicated effort. ... If one of them set his mind on
evil, he could take over the world. (On the other hand, he couldn't be
as evil as the people who *are* taking over the world.)
 -- Andy Oram about the Ottawa Linux Symposium 2005




From andrew-twisted at puzzling.org  Fri Sep  9 09:19:24 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 9 Sep 2005 23:19:24 +1000
Subject: [Twisted-Python] Re: Epydoc + interfaces
In-Reply-To: <dfrkr1$kot$1@sea.gmane.org>
References: <E1EDQgv-000801-03@pyramid.twistedmatrix.com>
	<20050909083956.7a5a2006@poczta.contman.pl>
	<dfrkr1$kot$1@sea.gmane.org>
Message-ID: <20050909131924.GD5169@trogdor.home.puzzling.org>

On Fri, Sep 09, 2005 at 11:32:16AM +0200, Nicola Larosa wrote:
> 
> > When i tried to generate api docs for my application (that uses Twisted
> > 2.0 and Zope interfaces) i noticed that interface documentation is
> > missing. However, in Twisted API docs, interface info generated by epydoc
> > seems to be fine. I assume there is some kind of workaround that makes
> > epydoc able to generate interface info that you guys used when generating
> > Twisted API docs. Please share the secret :)
> 
> The secret is apparently the epyrun script in the admin directory of the
> trunk. Can't give you a direct link because the SVN web access is not
> working right now.

Yep, that's where the magic lies.  Here's the link:
    http://svn.twistedmatrix.com/cvs/trunk/admin/epyrun?view=auto&rev=13755

As I said on IRC a while ago: you shouldn't read it unless you want your
eyes to bleed.  It's not pretty.

-Andrew.




From itamar at itamarst.org  Fri Sep  9 10:58:41 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 09 Sep 2005 10:58:41 -0400
Subject: [Twisted-Python] Epydoc + interfaces
In-Reply-To: <20050909083956.7a5a2006@poczta.contman.pl>
References: <20050909083956.7a5a2006@poczta.contman.pl>
Message-ID: <1126277921.8767.9.camel@localhost.localdomain>

On Fri, 2005-09-09 at 10:39 +0200, Maciej Szumocki wrote:

>  When i tried to generate api docs for my application (that uses Twisted 2.0 and Zope interfaces)
> i noticed that interface documentation is missing. However, in Twisted API docs, interface info
> generated by epydoc seems to be fine. 

I think this is because most interfaces in Twisted still use the
backwards compatability layer Interface class; when that goes away we
will be stuck too :)




From itamar at itamarst.org  Fri Sep  9 11:05:56 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 09 Sep 2005 11:05:56 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in twisted
	code, and other reminders
Message-ID: <1126278356.8767.18.camel@localhost.localdomain>

Hi everyone,

Nevow (this applies to other projects as well) depends on Twisted.
Twisted should not depend on Nevow, as circular dependencies are a Bad
Thing. There is currently code in trunk that imports Nevow, at the very
least twisted.web2.distrib and some of the vfs modules. Please fix this
as soon as possible. I know this is somewhat limiting, but given the
current state and status of the projects it's just something we have to
deal with.

As of next week I will begin reverting any code that gets checked in
which imports Nevow.

Also please remember that we still support Python 2.2, and do follow the
coding standard; take a peek at the buildbot after checkins too.
Hopefully the next version of buildbot will allow triggering test runs
across all slaves for branches for easier testing.

Thanks!

-- 
Itamar Shtull-Trauring <itamar at itamarst.org>
http://itamarst.org




From andrew-twisted at puzzling.org  Fri Sep  9 11:23:49 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 10 Sep 2005 01:23:49 +1000
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <1126278356.8767.18.camel@localhost.localdomain>
References: <1126278356.8767.18.camel@localhost.localdomain>
Message-ID: <20050909152349.GG5169@trogdor.home.puzzling.org>

On Fri, Sep 09, 2005 at 11:05:56AM -0400, Itamar Shtull-Trauring wrote:
[...]
> 
> Also please remember that we still support Python 2.2, and do follow the
> coding standard; take a peek at the buildbot after checkins too.

Buildbot has been reconfigured to have no full-2.2 slave, and no longer
invokes 2.2 from quick either, so it gives no feedback about 2.2.  What's
the reason for this change?

-Andrew.




From foom at fuhm.net  Fri Sep  9 12:01:14 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 9 Sep 2005 12:01:14 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <20050909152349.GG5169@trogdor.home.puzzling.org>
References: <1126278356.8767.18.camel@localhost.localdomain>
	<20050909152349.GG5169@trogdor.home.puzzling.org>
Message-ID: <6E903533-4949-4251-A0A4-9359D6EDAA77@fuhm.net>

On Sep 9, 2005, at 11:23 AM, Andrew Bennetts wrote:
> Buildbot has been reconfigured to have no full-2.2 slave, and no  
> longer
> invokes 2.2 from quick either, so it gives no feedback about 2.2.   
> What's
> the reason for this change?

Looks like somebody thought the minimum requirement for the next  
version should be 2.3 but didn't bother to discuss/mention it. Seems  
rather poor form.

James






From exarkun at divmod.com  Fri Sep  9 15:33:44 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 9 Sep 2005 15:33:44 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <20050909152349.GG5169@trogdor.home.puzzling.org>
Message-ID: <20050909193344.3914.235666663.divmod.quotient.14741@ohm>

On Sat, 10 Sep 2005 01:23:49 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>On Fri, Sep 09, 2005 at 11:05:56AM -0400, Itamar Shtull-Trauring wrote:
>[...]
>>
>> Also please remember that we still support Python 2.2, and do follow the
>> coding standard; take a peek at the buildbot after checkins too.
>
>Buildbot has been reconfigured to have no full-2.2 slave, and no longer
>invokes 2.2 from quick either, so it gives no feedback about 2.2.  What's
>the reason for this change?

Trial no longer runs with Python 2.2.  I disabled the buildslaves since they weren't producing any useful results.  I _don't_ think 2.2 support should be dropped now, but no one else spoke up when I tried to argue this.  Given your post and James', I think it's clear trial should be fixed on Python 2.2 and the buildslaves re-enabled (I'll take care of the latter when someone says they'll take care of the former).

Jp



From foom at fuhm.net  Fri Sep  9 16:09:50 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 9 Sep 2005 16:09:50 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <20050909193344.3914.235666663.divmod.quotient.14741@ohm>
References: <20050909193344.3914.235666663.divmod.quotient.14741@ohm>
Message-ID: <C3A06552-3E1D-4A9C-94A2-4D45C8EDBD60@fuhm.net>

On Sep 9, 2005, at 3:33 PM, Jp Calderone wrote:
> Trial no longer runs with Python 2.2.  I disabled the buildslaves  
> since they weren't producing any useful results.  I _don't_ think  
> 2.2 support should be dropped now, but no one else spoke up when I  
> tried to argue this.  Given your post and James', I think it's  
> clear trial should be fixed on Python 2.2 and the buildslaves re- 
> enabled (I'll take care of the latter when someone says they'll  
> take care of the former).

I simply object to support for it being dropped with no discussion.  
In such a discussion, I would not strenuously object to the minimum  
version being bumped to 2.3, although I don't think there are any  
particularly strong reasons for doing so. (My work no longer depends  
upon new releases of Twisted working with Python 2.2, we've upgraded  
to 2.4 now.)

James



From dhess at verscend.com  Fri Sep  9 17:31:28 2005
From: dhess at verscend.com (David K. Hess)
Date: Fri, 9 Sep 2005 16:31:28 -0500
Subject: [Twisted-Python] Broker leak in spread server on login failure =
	denial of service?
In-Reply-To: <mailman.0.1126297570.25366.twisted-python@twistedmatrix.com>
References: <mailman.0.1126297570.25366.twisted-python@twistedmatrix.com>
Message-ID: <BB9C0D9A-37BA-4E0F-AD78-2DAF967CB765@verscend.com>


I believe I've discovered a broker leak when a checker denies a login  
and that it can be used to launch a denial of service attack on a  
spread server.

When a checker throws a Failure exception, since requestAvatar in the  
realm doesn't get called, the realm (or anything else) doesn't end up  
with a reference it can use to disconnect the network connection that  
was denied login.

If a malicious (or just buggy as was my case) client tries to login  
over and over again and doesn't shutdown each connection from the  
client side, the server will continue to leak brokers until (under  
Windows) the select() call begins to fail because there are greater  
than 512 (with a stock Python build) file descriptors open and being  
monitored by the reactor. At this point, your server is dead as the  
reactor goes into an infinite loop retrying failing select() calls  
when this happens.

What I think might be best is if another method in the realm (say  
"loginFailed(self, mind)") was called with the remote reference so  
the server could then call mind.broker.transport.loseConnection() on  
it. It would be nice too if this was after the Failure had been sent  
back across the connection and not before.

clientConnectionMade in PBServerFactory also looks promising but it  
doesn't seem possible to figure out which connection is  
authenticating from within the checker.

Can anybody offer some advice on how best to handle this?

Thanks!

Dave



From exarkun at divmod.com  Fri Sep  9 18:01:12 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 9 Sep 2005 18:01:12 -0400
Subject: [Twisted-Python] Broker leak in spread server on login failure =
	denial of service?
In-Reply-To: <BB9C0D9A-37BA-4E0F-AD78-2DAF967CB765@verscend.com>
Message-ID: <20050909220112.3914.1069683868.divmod.quotient.14806@ohm>

On Fri, 9 Sep 2005 16:31:28 -0500, "David K. Hess" <dhess at verscend.com> wrote:
>
>I believe I've discovered a broker leak when a checker denies a login  and 
>that it can be used to launch a denial of service attack on a  spread 
>server.
>
>When a checker throws a Failure exception, since requestAvatar in the  realm 
>doesn't get called, the realm (or anything else) doesn't end up  with a 
>reference it can use to disconnect the network connection that  was denied 
>login.
>
>If a malicious (or just buggy as was my case) client tries to login  over 
>and over again and doesn't shutdown each connection from the  client side, 
>the server will continue to leak brokers until (under  Windows) the select() 
>call begins to fail because there are greater  than 512 (with a stock Python 
>build) file descriptors open and being  monitored by the reactor. At this 
>point, your server is dead as the  reactor goes into an infinite loop 
>retrying failing select() calls  when this happens.

It's easier than this.  A client could connect and send no bytes at all.  The socket would remain open forever with the default factory behavior, allowing a user to exhaust all available file descriptors.

This is an attack possible on any server that doesn't limit new connections or time out existing ones somehow.

>
>What I think might be best is if another method in the realm (say 
>"loginFailed(self, mind)") was called with the remote reference so  the 
>server could then call mind.broker.transport.loseConnection() on  it. It 
>would be nice too if this was after the Failure had been sent  back across 
>the connection and not before.
>
>clientConnectionMade in PBServerFactory also looks promising but it  doesn't 
>seem possible to figure out which connection is  authenticating from within 
>the checker.
>
>Can anybody offer some advice on how best to handle this?

Rather than extending the cred interface, which may not even be invoked, I'd start by altering the behavior of the server factory.  Either impose a per-IP connection limit, or a connection rate limit, or a timeout for idle connections, or something along these lines.  You might want to look at twisted.protocols.policies.LimitTotalConnectionsFactory or TimeoutFactory.

Hope this helps,

Jp



From jonathan.lange at gmail.com  Fri Sep  9 18:16:12 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Sat, 10 Sep 2005 08:16:12 +1000
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <20050909193344.3914.235666663.divmod.quotient.14741@ohm>
References: <20050909152349.GG5169@trogdor.home.puzzling.org>
	<20050909193344.3914.235666663.divmod.quotient.14741@ohm>
Message-ID: <d06a5cd3050909151610637224@mail.gmail.com>

On 10/09/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Sat, 10 Sep 2005 01:23:49 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> >On Fri, Sep 09, 2005 at 11:05:56AM -0400, Itamar Shtull-Trauring wrote:
>
> Trial no longer runs with Python 2.2.  I disabled the buildslaves since they weren't producing any useful results.  I _don't_ think 2.2 support should be dropped now, but no one else spoke up when I tried to argue this.  Given your post and James', I think it's clear trial should be fixed on Python 2.2 and the buildslaves re-enabled (I'll take care of the latter when someone says they'll take care of the former).
> 

It's not so much "clear" as "generally expected".  Quibbles aside,
I'll make it work on 2.2.

However, can we please talk more in the future?  The details are hazy
on this dreary rainy morning, but I remember that I did a lot of 2.2
fixing at around the same time the 2.2 buildbot disappeared.

I know _I_ should have spoken to you, rather than assuming that this
meant you had changed your mind re 2.2 support.

finding-it-difficult-to-delegate-blame-sensibly yours,
jml



From dhess at verscend.com  Fri Sep  9 18:36:31 2005
From: dhess at verscend.com (David K. Hess)
Date: Fri, 9 Sep 2005 17:36:31 -0500
Subject: [Twisted-Python] Broker leak in spread server on login failure =
	denial of service?
In-Reply-To: <20050909220112.3914.1069683868.divmod.quotient.14806@ohm>
References: <20050909220112.3914.1069683868.divmod.quotient.14806@ohm>
Message-ID: <660A8DAA-363F-43AE-9FA5-68C384895F90@verscend.com>


On Sep 9, 2005, at 5:01 PM, Jp Calderone wrote:

> On Fri, 9 Sep 2005 16:31:28 -0500, "David K. Hess"  
> <dhess at verscend.com> wrote:
>
>>
>> I believe I've discovered a broker leak when a checker denies a  
>> login  and that it can be used to launch a denial of service  
>> attack on a  spread server.
>>
>> When a checker throws a Failure exception, since requestAvatar in  
>> the  realm doesn't get called, the realm (or anything else)  
>> doesn't end up  with a reference it can use to disconnect the  
>> network connection that  was denied login.
>>
>> If a malicious (or just buggy as was my case) client tries to  
>> login  over and over again and doesn't shutdown each connection  
>> from the  client side, the server will continue to leak brokers  
>> until (under  Windows) the select() call begins to fail because  
>> there are greater  than 512 (with a stock Python build) file  
>> descriptors open and being  monitored by the reactor. At this  
>> point, your server is dead as the  reactor goes into an infinite  
>> loop retrying failing select() calls  when this happens.
>>
>
> It's easier than this.  A client could connect and send no bytes at  
> all.  The socket would remain open forever with the default factory  
> behavior, allowing a user to exhaust all available file descriptors.
>
> This is an attack possible on any server that doesn't limit new  
> connections or time out existing ones somehow.

Excellent points.

>
>>
>> What I think might be best is if another method in the realm (say  
>> "loginFailed(self, mind)") was called with the remote reference  
>> so  the server could then call mind.broker.transport.loseConnection 
>> () on  it. It would be nice too if this was after the Failure had  
>> been sent  back across the connection and not before.
>>
>> clientConnectionMade in PBServerFactory also looks promising but  
>> it  doesn't seem possible to figure out which connection is   
>> authenticating from within the checker.
>>
>> Can anybody offer some advice on how best to handle this?
>>
>
> Rather than extending the cred interface, which may not even be  
> invoked, I'd start by altering the behavior of the server factory.   
> Either impose a per-IP connection limit, or a connection rate  
> limit, or a timeout for idle connections, or something along these  
> lines.  You might want to look at  
> twisted.protocols.policies.LimitTotalConnectionsFactory or  
> TimeoutFactory.

 From my point of view, I don't want to punish the many for the sins  
of the few. I know exactly who I want to disconnect when a login  
fails. Also, unfortunately, my communication patterns don't support  
idle timeouts *after login* so I can't use a timeout to get rid of  
these.

What I want is what you would find in a normal Unix login. If there  
is no activity at the login prompt then after a while you get a  
disconnect. If you don't properly authenticate, you get a disconnect.  
Once you are logged in, no timeouts. I'd like that kind of behavior  
in my factory/realm/checker (even when the client doesn't initiate  
authentication).

I guess what I'll try is using clientConnectionMade to register a  
callLater of say 5 seconds on the broker's transport.loseConnection 
(). I can then cancel it if requestAvatar is called in the realm.  
That will cover both the denied login and 0 bytes transmitted cases.

> Hope this helps,

Yes, it did. Thanks!

Dave

>
> Jp
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From itamar at itamarst.org  Fri Sep  9 18:51:59 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 09 Sep 2005 18:51:59 -0400
Subject: [Twisted-Python] Broker leak in spread server on login failure
	= denial of service?
In-Reply-To: <660A8DAA-363F-43AE-9FA5-68C384895F90@verscend.com>
References: <20050909220112.3914.1069683868.divmod.quotient.14806@ohm>
	<660A8DAA-363F-43AE-9FA5-68C384895F90@verscend.com>
Message-ID: <1126306319.23795.5.camel@localhost.localdomain>

On Fri, 2005-09-09 at 17:36 -0500, David K.Hess wrote:

> fails. Also, unfortunately, my communication patterns don't support  
> idle timeouts *after login* so I can't use a timeout to get rid of  
> these.

This is typically solved by having a noop command that clients send
every few seconds.





From jonathan.lange at gmail.com  Fri Sep  9 19:01:42 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Sat, 10 Sep 2005 09:01:42 +1000
Subject: [Twisted-Python] Python 2.2 Support
Message-ID: <d06a5cd3050909160148c16ab0@mail.gmail.com>

So, how long are we going to support it?



From mary-twisted at puzzling.org  Fri Sep  9 19:13:46 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 10 Sep 2005 09:13:46 +1000
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <d06a5cd3050909160148c16ab0@mail.gmail.com>
References: <d06a5cd3050909160148c16ab0@mail.gmail.com>
Message-ID: <20050909231346.GE32203@sourdust.home.puzzling.org>

On Sat, Sep 10, 2005, Jonathan Lange wrote:
> So, how long are we going to support it?

Well, one obvious question is what's the state of 2.2 in the wild. For
example, which Linux distributions, if any, ship 2.2 as the default
Python in their current release, or in any recent release? (Defining
recent left as an exercise for the reader.)

-Mary



From glyph at divmod.com  Fri Sep  9 19:15:00 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 9 Sep 2005 19:15:00 -0400
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <d06a5cd3050909160148c16ab0@mail.gmail.com>
Message-ID: <20050909231500.3914.365512393.divmod.quotient.14837@ohm>



On Sat, 10 Sep 2005 09:01:42 +1000, Jonathan Lange <jonathan.lange at gmail.com> wrote:
>So, how long are we going to support it?

At least until the next release.

Personally I don't care about 2.2 support right *now*, but a variety of places where it would be nifty to have Twisted or fragments of it (on small devices, for example, or weird platforms) only a minimal version of Python 2.2 is available.  I don't know if this has something to do with a change in the build process as of 2.3 or just a lack of time for the maintainers, but backporting is never fun after the fact.

We should probably track down some people with actual current use-cases in such environments though...

(PLEASE, SOMEBODY WHO FITS THAT DESCRIPTION JUMP IN HERE!)



From andrew-twisted at puzzling.org  Fri Sep  9 19:23:22 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 10 Sep 2005 09:23:22 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14397 - This appears to fix
	2.2 support for me.
In-Reply-To: <E1EDrtv-0007Pp-00@wolfwood>
References: <E1EDrtv-0007Pp-00@wolfwood>
Message-ID: <20050909232322.GI5169@trogdor.home.puzzling.org>

On Fri, Sep 09, 2005 at 05:03:19PM -0600, Jonathan Lange wrote:
> Author: jml
> Date: Fri Sep  9 17:03:19 2005
> New Revision: 14397
> 
> Modified:
>    trunk/twisted/trial/runner.py
>    trunk/twisted/trial/test/test_adapters.py
>    trunk/twisted/trial/test/test_output.py
>    trunk/twisted/trial/unittest.py
> Log:
> This appears to fix 2.2 support for me.
> 
> 
> 
> Modified: trunk/twisted/trial/runner.py
> ==============================================================================
> --- trunk/twisted/trial/runner.py	(original)
> +++ trunk/twisted/trial/runner.py	Fri Sep  9 17:03:19 2005
> @@ -162,6 +162,8 @@
>              self.addDoctests(module.__doctests__)
>  
>      def addDoctests(self, obj):
> +        if sys.version[:2] <= (2, 2):
> +            return
>          from twisted.trial import tdoctest
>          self.addTest(tdoctest.ModuleDocTestsRunner(obj))

Make this at least issue a warning, please?

-Andrew.




From jonathan.lange at gmail.com  Fri Sep  9 19:27:57 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Sat, 10 Sep 2005 09:27:57 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14397 - This appears to
	fix 2.2 support for me.
In-Reply-To: <20050909232322.GI5169@trogdor.home.puzzling.org>
References: <E1EDrtv-0007Pp-00@wolfwood>
	<20050909232322.GI5169@trogdor.home.puzzling.org>
Message-ID: <d06a5cd305090916271eca12fa@mail.gmail.com>

On 10/09/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> On Fri, Sep 09, 2005 at 05:03:19PM -0600, Jonathan Lange wrote:
> >      def addDoctests(self, obj):
> > +        if sys.version[:2] <= (2, 2):
> > +            return
> >          from twisted.trial import tdoctest
> >          self.addTest(tdoctest.ModuleDocTestsRunner(obj))
> 
> Make this at least issue a warning, please?
> 

My antipathy to doctest is such that people using it with Python 2.2
should consider themselves warned at all times.

Nevertheless, what you say is reasonable and proper.  I will do as you advise.

jml



From jadestorm at nc.rr.com  Fri Sep  9 19:38:41 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Fri, 9 Sep 2005 19:38:41 -0400
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <20050909231346.GE32203@sourdust.home.puzzling.org>
References: <d06a5cd3050909160148c16ab0@mail.gmail.com>
	<20050909231346.GE32203@sourdust.home.puzzling.org>
Message-ID: <E44C348C-FE98-43CA-94BD-31413DF6003C@nc.rr.com>

Red Hat Enterprise Linux 3 has 2.2.3 installed.  It's not the  
absolute latest version of RHEL, (4 is), but it's still in wide  
circulation.  Also, I increased my requirements for PyICQt and PyAIMt  
to Python 2.3 not-so-long-ago (they're based on Twisted), and took a  
lot of flak about it.  =(  Got some "well then I can't use your  
application..." when I told them it required 2.3 or above.  =/

Daniel

-- 
"The most addictive drug in the world is music."
      - The Lost Boyz



On Sep 9, 2005, at 7:13 PM, Mary Gardiner wrote:

> On Sat, Sep 10, 2005, Jonathan Lange wrote:
>
>> So, how long are we going to support it?
>>
>
> Well, one obvious question is what's the state of 2.2 in the wild. For
> example, which Linux distributions, if any, ship 2.2 as the default
> Python in their current release, or in any recent release? (Defining
> recent left as an exercise for the reader.)
>
> -Mary
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>




From foom at fuhm.net  Fri Sep  9 19:49:51 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 9 Sep 2005 19:49:51 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14397 - This appears to
	fix 2.2 support for me.
In-Reply-To: <d06a5cd305090916271eca12fa@mail.gmail.com>
References: <E1EDrtv-0007Pp-00@wolfwood>
	<20050909232322.GI5169@trogdor.home.puzzling.org>
	<d06a5cd305090916271eca12fa@mail.gmail.com>
Message-ID: <57A2BC90-9E4D-47BF-8F89-26B9E951B173@fuhm.net>


On Sep 9, 2005, at 7:27 PM, Jonathan Lange wrote:

> On 10/09/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>
>> On Fri, Sep 09, 2005 at 05:03:19PM -0600, Jonathan Lange wrote:
>>
>>>      def addDoctests(self, obj):
>>> +        if sys.version[:2] <= (2, 2):
>>> +            return
>>>          from twisted.trial import tdoctest
>>>          self.addTest(tdoctest.ModuleDocTestsRunner(obj))
>>>
>>
>> Make this at least issue a warning, please?
>>
>>
>
> My antipathy to doctest is such that people using it with Python 2.2
> should consider themselves warned at all times.
>
> Nevertheless, what you say is reasonable and proper.  I will do as  
> you advise.

I think doctests worked with Python 2.2 before. What broke?

James




From jonathan.lange at gmail.com  Fri Sep  9 19:55:39 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Sat, 10 Sep 2005 09:55:39 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14397 - This appears to
	fix 2.2 support for me.
In-Reply-To: <57A2BC90-9E4D-47BF-8F89-26B9E951B173@fuhm.net>
References: <E1EDrtv-0007Pp-00@wolfwood>
	<20050909232322.GI5169@trogdor.home.puzzling.org>
	<d06a5cd305090916271eca12fa@mail.gmail.com>
	<57A2BC90-9E4D-47BF-8F89-26B9E951B173@fuhm.net>
Message-ID: <d06a5cd305090916555a5c2f9@mail.gmail.com>

On 10/09/05, James Y Knight <foom at fuhm.net> wrote:
> On Sep 9, 2005, at 7:27 PM, Jonathan Lange wrote:
> 
> > On 10/09/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> >
> >> On Fri, Sep 09, 2005 at 05:03:19PM -0600, Jonathan Lange wrote:
> >>
> >>>      def addDoctests(self, obj):
> >>> +        if sys.version[:2] <= (2, 2):
> >>> +            return
> >>>          from twisted.trial import tdoctest
> >>>          self.addTest(tdoctest.ModuleDocTestsRunner(obj))
> >>>
> >>
> >> Make this at least issue a warning, please?
> >
> > Nevertheless, what you say is reasonable and proper.  I will do as
> > you advise.
> 
> I think doctests worked with Python 2.2 before. What broke?
> 

They didn't. Trial has always had code to test for 2.3ness before
running doctests.



From radeex at gmail.com  Fri Sep  9 23:06:04 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 10 Sep 2005 13:06:04 +1000
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <C3A06552-3E1D-4A9C-94A2-4D45C8EDBD60@fuhm.net>
References: <20050909193344.3914.235666663.divmod.quotient.14741@ohm>
	<C3A06552-3E1D-4A9C-94A2-4D45C8EDBD60@fuhm.net>
Message-ID: <60ed19d405090920061db0fac2@mail.gmail.com>

On 9/10/05, James Y Knight <foom at fuhm.net> wrote:
> On Sep 9, 2005, at 3:33 PM, Jp Calderone wrote:
> > Trial no longer runs with Python 2.2.  I disabled the buildslaves
> > since they weren't producing any useful results.  I _don't_ think
> > 2.2 support should be dropped now, but no one else spoke up when I
> > tried to argue this.  Given your post and James', I think it's
> > clear trial should be fixed on Python 2.2 and the buildslaves re-
> > enabled (I'll take care of the latter when someone says they'll
> > take care of the former).
> 
> I simply object to support for it being dropped with no discussion.
> In such a discussion, I would not strenuously object to the minimum
> version being bumped to 2.3, although I don't think there are any
> particularly strong reasons for doing so. (My work no longer depends
> upon new releases of Twisted working with Python 2.2, we've upgraded
> to 2.4 now.)

The decision to drop it had not been made. I'd been meaning to talk to
exarkun about why the buildslave was removed, but haven't yet had the
chance (and remembered to discuss it). I was not planning on doing the
release requiring 2.3 without first asking the community, so your
objection to it being dropped with no discussion is slightly off.

As others have pointed out, this discussion makes it clear that the
next release of Twisted (2.1) should still support 2.2, but I strongly
suggest  we drop it immediately after that release, allowing 2.3-using
code into trunk.

The policy regarding Python release support has always been based on
Debian stable releases, since it's such a conservative milestone.
Debian has had 2.3 as its primary Python in stable for months, so it's
time.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From radeex at gmail.com  Fri Sep  9 23:10:56 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 10 Sep 2005 13:10:56 +1000
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <1126278356.8767.18.camel@localhost.localdomain>
References: <1126278356.8767.18.camel@localhost.localdomain>
Message-ID: <60ed19d40509092010656d969@mail.gmail.com>

On 9/10/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> As of next week I will begin reverting any code that gets checked in
> which imports Nevow.

I hope you don't remove twisted.lore.nevowlore. This code has required
nevow and been in Twisted for several releases (of course, now it's
not in Twisted Core, and neither are any of the other bits of code you
mentioned). Of course, it's optional and not imported by anything
unless the user explicitly passes the switch to lore that says "use
nevowlore, please".


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From glyph at divmod.com  Sat Sep 10 01:19:50 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 10 Sep 2005 01:19:50 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow
	in	twisted code, and other reminders
In-Reply-To: <60ed19d40509092010656d969@mail.gmail.com>
References: <1126278356.8767.18.camel@localhost.localdomain>
	<60ed19d40509092010656d969@mail.gmail.com>
Message-ID: <43226CF6.7080403@divmod.com>

Christopher Armstrong wrote:

>I hope you don't remove twisted.lore.nevowlore. This code has required
>nevow and been in Twisted for several releases (of course, now it's
>not in Twisted Core, and neither are any of the other bits of code you
>mentioned). Of course, it's optional and not imported by anything
>unless the user explicitly passes the switch to lore that says "use
>nevowlore, please".
>  
>
I hope he does remove that precise code, which I believe spawned this 
discussion.

Not only is this import going in the wrong direction and depending upon 
an unspecified version of Nevow within Twisted, the code is /already/ a 
plug-in, which could easily be distributed along with Nevow rather than 
along with Lore.

This is exactly what should happen.




From foom at fuhm.net  Sat Sep 10 01:30:04 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 10 Sep 2005 01:30:04 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14397 - This appears to
	fix 2.2 support for me.
In-Reply-To: <d06a5cd305090916555a5c2f9@mail.gmail.com>
References: <E1EDrtv-0007Pp-00@wolfwood>
	<20050909232322.GI5169@trogdor.home.puzzling.org>
	<d06a5cd305090916271eca12fa@mail.gmail.com>
	<57A2BC90-9E4D-47BF-8F89-26B9E951B173@fuhm.net>
	<d06a5cd305090916555a5c2f9@mail.gmail.com>
Message-ID: <50974D7A-A79E-4224-AE57-9430F756A612@fuhm.net>

On Sep 9, 2005, at 7:55 PM, Jonathan Lange wrote:
> They didn't. Trial has always had code to test for 2.3ness before
> running doctests.

Indeed, I was mistaken. I thought that the reason doctest.py was in  
there was for compatibility with python 2.2. But it's not -- it  
contains lots of python 2.3isms. Really it was for compat with Python  
2.3. That should be documented somewhere so I don't forget again.

James



From Marcin.Kasperski at softax.com.pl  Sat Sep 10 18:37:19 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Sun, 11 Sep 2005 00:37:19 +0200
Subject: [Twisted-Python] Welcome (and some questions)
Message-ID: <4323601F.7020204@softax.com.pl>

As it is my first post to the list, I would like to make 
thanks to all the people who created twisted. Great 
framework with many useful features. Thank you very much.

I have also some questions, thanks in advance for any hints.

1) Which logging method is recommended for twisted 
applications? Python logging package? Some method present in 
twisted itself? Something else?

2) What database access method is recommended? If I 
understand correctly it would be good idea to execute 
database access code in many short steps, deferring from 
time to time. Which database API support this way best, are 
there any code examples available?

3) So far I code using 'low level twisted' and run my 
application as standalone python script. I understand that 
it is recommended to migrate to 'application/service' API 
and use twistd to run application. Unfortunately I find it 
difficult to fully understand documentation on this subject, 
probably partially because my  application is not TCP/IP 
server, but rather TCP/IP client (in fact it is some kind of 
bot using telnet connection to game server). Does it make 
sense to use application and service concept in such 
situation? If so, how could the code look like? Currently my 
'main' code looks so:

     reactor.connectTCP(HOST, PORT, MyFactory(...))
     reactor.run()

4) Is twisted documentation available anywhere in the form 
of MsHelp file (I saw a lot of Python documentation 
converted this way, it is nice as one can easily find 
information by text search)?

5) Does there exist example of twisted application with 
wxpython GUI?

6) And in general, are there any twisted documentation 
sources (tutorials, examples, whatever) apart from those 
distributed from twistedmatrix.com?

         Best regards
             Marcin



From exarkun at divmod.com  Sat Sep 10 19:31:36 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 10 Sep 2005 19:31:36 -0400
Subject: [Twisted-Python] Welcome (and some questions)
In-Reply-To: <4323601F.7020204@softax.com.pl>
Message-ID: <20050910233136.3914.373429572.divmod.quotient.15168@ohm>

On Sun, 11 Sep 2005 00:37:19 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:
>As it is my first post to the list, I would like to make thanks to all the 
>people who created twisted. Great framework with many useful features. Thank 
>you very much.
>

Hello, and welcome to the list :)

>I have also some questions, thanks in advance for any hints.
>
>1) Which logging method is recommended for twisted applications? Python 
>logging package? Some method present in twisted itself? Something else?

Twisted includes the basic pieces needed to construct a logging system.  The common thing to do in a Twisted application is just to call twisted.python.log.msg() and twisted.python.log.err().  These aren't covered much in the documentation, but their usage is pretty straightforward: msg() takes a string and gives all the "log observers" a chance to do something with it; similarly, err() takes a Failure (or nothing, in the suite of an "except:" - it will construct a Failure based on the exception being handled) and does the same thing.

If you use `twistd', there is a log observer which records these events to a file on disk named "twistd.log" and does some rudamentary log rotation.  You can write your own log observer as well, and install it using twisted.python.log.addObserver().  Most applications don't need this, at least not right off the bat.

If you aren't using `twistd', you can start the logging system off with twisted.python.log.startLogging().  It takes a file-like object and records messages to it.

>
>2) What database access method is recommended? If I understand correctly it 
>would be good idea to execute database access code in many short steps, 
>deferring from time to time. Which database API support this way best, are 
>there any code examples available?

For access to relational databases with an SQL interface, Twisted provides ADB-API: this is a wrapper around any DB-API module which presents a uniform, asynchronous interface (of course, since DB-API modules are blocking, this is achieved via use of a thread pool to issue database requests).  You'll find this at twisted.enterprise.adbapi, and documentation at <http://twistedmatrix.com/projects/core/documentation/howto/enterprise.html> and <http://twistedmatrix.com/documents/current/api/twisted.enterprise.adbapi.html>.

There has also been some effort towards implementing threadless asynchronous database adapters, but so far none of it is part of Twisted.  You can find a new PostgreSQL adapter like this at <http://www.jamwt.com/pgasync/>.

>
>3) So far I code using 'low level twisted' and run my application as 
>standalone python script. I understand that it is recommended to migrate to 
>'application/service' API and use twistd to run application. Unfortunately I 
>find it difficult to fully understand documentation on this subject, 
>probably partially because my  application is not TCP/IP server, but rather 
>TCP/IP client (in fact it is some kind of bot using telnet connection to 
>game server). Does it make sense to use application and service concept in 
>such situation? If so, how could the code look like? Currently my 'main' 
>code looks so:
>
>     reactor.connectTCP(HOST, PORT, MyFactory(...))
>     reactor.run()
>

`twistd' is the "Twisted daemonizer".  If your application will run as a daemon, whether it is conceptually a server or a client, you'll probably want to use it.

The above example can be trivially transformed into Twisted Service-using code:

    from twisted.application import service, internet

    # The name `application' is special in this arrangement
    application = service.Application("Some Kind of Thingy")

    HOST = 'foo'
    PORT = 23

    # This name is not
    _client = internet.TCPClient(HOST, PORT, MyFactory(...))
    _client.setServiceParent(application)

Put this into a file named `something.tac' and run it with `twistd -noy something.tac'.  One possible drawback here is that you will not be able to pass values for HOST and PORT as command-line arguments, since .tac files are intended to *be* configuration, not to take configuration.  If these values are generally fixed, this may be fine.  Otherwise, you would probably benefit from the mythical twistd-refactoring, stories of the coming of which have been passed down for generations.  When it comes to pass, you'll be able to take advantage of twistd's functionality in ways other than by writing .tac files (or any of their kin).

>4) Is twisted documentation available anywhere in the form of MsHelp file (I 
>saw a lot of Python documentation converted this way, it is nice as one can 
>easily find information by text search)?

There are no MsHelp-format versions of the documentation that I know of.  We use a tool called `lore' to generate the rendered versions of the Twisted documentation.  Lore supports output plugins, so if someone were interested and motivated, an MsHelp plugin could probably be added, and then all of Twisted's documentation could be made available in that format.

>
>5) Does there exist example of twisted application with wxpython GUI?

wxPython is a challenge to integrate with.  There have been several strategies attempted and discarded over the years.  The current popular idea involves a new reactor which lets a foreign event loop maintain more control over the program's execution.  There has been no Twisted release since this was added though, so if you want to try it out you'll need to get an SVN checkout of Twisted.  If you do, you'll find some examples in doc/core/examples/threadedselect/.  You can also browse these online at <http://cvs.twistedmatrix.com/cvs/trunk/doc/core/examples/threadedselect/>.

Most Twisted developers (that is, developers of Twisted) prefer Gtk, and Twisted has quite good PyGtk integration.

Hope this helps,

Jp



From Marcin.Kasperski at softax.com.pl  Sat Sep 10 19:52:54 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Sun, 11 Sep 2005 01:52:54 +0200
Subject: [Twisted-Python] Welcome (and some questions)
In-Reply-To: <20050910233136.3914.373429572.divmod.quotient.15168@ohm>
References: <20050910233136.3914.373429572.divmod.quotient.15168@ohm>
Message-ID: <432371D6.3080507@softax.com.pl>

Thank you very much for excellent reply!

Minor comment:

> There are no MsHelp-format versions of the documentation that I know 
> of.  We use a tool called `lore' to generate the rendered versions of 
> the Twisted documentation.  Lore supports output plugins, so if someone 
> were interested and motivated, an MsHelp plugin could probably be added, 
> and then all of Twisted's documentation could be made available in that 
> format.

On the page
    http://www.orgmf.com.ar/condor/pytstuff.html
(bottom half, chapter 'For home builders) author explains in 
detail how he builds help files for python and zope. Maybe 
his method could be easily adopted?



From andrew-twisted at puzzling.org  Sun Sep 11 02:14:38 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 Sep 2005 16:14:38 +1000
Subject: [Twisted-Python] Welcome (and some questions)
In-Reply-To: <20050910233136.3914.373429572.divmod.quotient.15168@ohm>
References: <4323601F.7020204@softax.com.pl>
	<20050910233136.3914.373429572.divmod.quotient.15168@ohm>
Message-ID: <20050911061438.GA7761@trogdor.home.puzzling.org>

On Sat, Sep 10, 2005 at 07:31:36PM -0400, Jp Calderone wrote:
> 
> Twisted includes the basic pieces needed to construct a logging system.  
> The common thing to do in a Twisted application is just to call 
> twisted.python.log.msg() and twisted.python.log.err().  These aren't 
> covered much in the documentation, but their usage is pretty 
[...]

This and Itamar's earlier post on writing log observers have finally
inspired me to add a logging howto to the documentation.  It should be at
http://twistedmatrix.com/users/warner/doc-latest/core/howto/logging.html
as soon as buildbot gets to it.

-Andrew.




From mary-twisted at puzzling.org  Sun Sep 11 04:24:56 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 11 Sep 2005 18:24:56 +1000
Subject: [Twisted-Python] Twisted virtual sprint weekend: 8-9 October 2005
Message-ID: <20050911082456.GA4115@sourdust.home.puzzling.org>

Hi everyone,

As foreshadowed previously, we're following up the Australian sprints
earlier this year with an experimental virtual sprint.

 What: a weekend of hacking on the Twisted codebase when you can be sure
       other people will be too

 When: 8-9 October 2005, in whatever timezone you choose to spend your
       weekends

 Where: sprint discussion will happen on #twisted on the Freenode IRC
        network

-Mary

-- 
<Artimage> I believe a bar chart can confirm my humanity.



From Henning.Ramm at mediapro-gmbh.de  Sun Sep 11 13:28:14 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Sun, 11 Sep 2005 19:28:14 +0200
Subject: [Twisted-Python] Welcome (and some questions)
Message-ID: <F92274058556DE42B94B148EEFB91839021CB56A@exchange-03.suedkurier.de>

>>5) Does there exist example of twisted application with wxpython GUI?
>
>wxPython is a challenge to integrate with.  There have been 
>several strategies attempted and discarded over the years.  
>The current popular idea involves a new reactor which lets a 
>foreign event loop maintain more control over the program's 
>execution.  There has been no Twisted release since this was 
>added though, so if you want to try it out you'll need to get 
>an SVN checkout of Twisted.  If you do, you'll find some 
>examples in doc/core/examples/threadedselect/.  You can also 
>browse these online at 
><http://cvs.twistedmatrix.com/cvs/trunk/doc/core/examples/threa
dedselect/>.

threadedselectreactor works great, and you need only one file from SVN.

Here are the basics to use it:

import wx
from twisted.internet import threadedselectreactor
threadedselectreactor.install()
from twisted.internet import reactor

# on startup (in my app's __init__):
reactor.interleave(wx.CallAfter)

# on end (in my app's __del__):
reactor.stop()

main = MyApp()
main.MainLoop()


Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From antonykummel at yahoo.com  Sun Sep 11 14:06:00 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Sun, 11 Sep 2005 11:06:00 -0700 (PDT)
Subject: [Twisted-Python] threadedselectreactor and twistd
Message-ID: <20050911180600.64033.qmail@web33910.mail.mud.yahoo.com>

Hi,

Just wondering how and if to integrate
threadedselectreactor into twistd. I'm thinking to use
it for a GUI application which is also a server (and a
client), so I think using mktap/twistd makes sense,
but there is the matter of threadedselectreactor not
being supported.

What I've been thinking is for threadedselectreactor
to have another method, or it could be combined with
interleave, that accepts a callable that makes the
main loop run. It could also be a special reactor for,
say, wxPython, that accepts a wxApp (and interleaves
automatically), and calls its MainLoop method inside
reactor.run(). This would make it trivial to use with
twisted.application. It would simple require the
service to let the reactor know about its
wxApp/whatever.

Any thoughts?

Thanks,

Antony Kummel

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From bob at redivi.com  Sun Sep 11 14:17:41 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 11 Sep 2005 11:17:41 -0700
Subject: [Twisted-Python] Welcome (and some questions)
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB56A@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB91839021CB56A@exchange-03.suedkurier.de>
Message-ID: <01CB7C60-531B-4A32-8ED9-D6B726DF85FC@redivi.com>


On Sep 11, 2005, at 10:28 AM, <Henning.Ramm at mediapro-gmbh.de>  
<Henning.Ramm at mediapro-gmbh.de> wrote:

>>> 5) Does there exist example of twisted application with wxpython  
>>> GUI?
>>>
>>
>> wxPython is a challenge to integrate with.  There have been
>> several strategies attempted and discarded over the years.
>> The current popular idea involves a new reactor which lets a
>> foreign event loop maintain more control over the program's
>> execution.  There has been no Twisted release since this was
>> added though, so if you want to try it out you'll need to get
>> an SVN checkout of Twisted.  If you do, you'll find some
>> examples in doc/core/examples/threadedselect/.  You can also
>> browse these online at
>> <http://cvs.twistedmatrix.com/cvs/trunk/doc/core/examples/threa
>>
> dedselect/>.
>
> threadedselectreactor works great, and you need only one file from  
> SVN.
>
> Here are the basics to use it:
>
> import wx
> from twisted.internet import threadedselectreactor
> threadedselectreactor.install()
> from twisted.internet import reactor
>
> # on startup (in my app's __init__):
> reactor.interleave(wx.CallAfter)
>
> # on end (in my app's __del__):
> reactor.stop()
>
> main = MyApp()
> main.MainLoop()

Note that this example is not correct in some cases (shutdown is  
wrong).  You should look at the threadedselectreactor examples before  
writing code, as they are correct.

-bob




From bob at redivi.com  Sun Sep 11 15:28:10 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 11 Sep 2005 12:28:10 -0700
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <20050911180600.64033.qmail@web33910.mail.mud.yahoo.com>
References: <20050911180600.64033.qmail@web33910.mail.mud.yahoo.com>
Message-ID: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>


On Sep 11, 2005, at 11:06 AM, Antony Kummel wrote:

> Just wondering how and if to integrate
> threadedselectreactor into twistd. I'm thinking to use
> it for a GUI application which is also a server (and a
> client), so I think using mktap/twistd makes sense,
> but there is the matter of threadedselectreactor not
> being supported.
>
> What I've been thinking is for threadedselectreactor
> to have another method, or it could be combined with
> interleave, that accepts a callable that makes the
> main loop run. It could also be a special reactor for,
> say, wxPython, that accepts a wxApp (and interleaves
> automatically), and calls its MainLoop method inside
> reactor.run(). This would make it trivial to use with
> twisted.application. It would simple require the
> service to let the reactor know about its
> wxApp/whatever.
>
> Any thoughts?

I don't think that's really going to work without a bunch of  
refactoring of twistd and special-cases for each environment -- which  
is the problem that threadedselectreactor solves in the first place.

-bob




From mszumocki at contman.pl  Mon Sep 12 03:21:27 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Mon, 12 Sep 2005 09:21:27 +0200
Subject: [Twisted-Python] Re: Epydoc + interfaces
In-Reply-To: <E1EDnAT-0005Nb-03@pyramid.twistedmatrix.com>
Message-ID: <20050912072127.b5273cad@poczta.contman.pl>

> Date: Fri, 09 Sep 2005 11:32:16 +0200
> From: Nicola Larosa <nico at tekNico.net>
> Subject: [Twisted-Python] Re: Epydoc + interfaces
> To: twisted-python at twistedmatrix.com
> 
> The secret is apparently the epyrun script in the admin directory of the
> trunk. Can't give you a direct link because the SVN web access is not
> working right now.
> 
> There's been a mailing list thread about it a while ago, try searching the
> archives.
> 

Thanks, checked it out, had to modify that epyrun a little for my own needs, 
but got it working fine (replacing _lookup_class_field in epydoc's 
objdoc did the trick).

Maciej Szumocki



From itamar at itamarst.org  Mon Sep 12 11:12:38 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 Sep 2005 11:12:38 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow
	in	twisted code, and other reminders
In-Reply-To: <43226CF6.7080403@divmod.com>
References: <1126278356.8767.18.camel@localhost.localdomain>
	<60ed19d40509092010656d969@mail.gmail.com>
	<43226CF6.7080403@divmod.com>
Message-ID: <1126537958.8773.99.camel@localhost.localdomain>

On Sat, 2005-09-10 at 01:19 -0400, Glyph Lefkowitz wrote:

> Not only is this import going in the wrong direction and depending upon 
> an unspecified version of Nevow within Twisted, the code is /already/ a 
> plug-in, which could easily be distributed along with Nevow rather than 
> along with Lore.

So, anyone feel like adding a Lore plugin to next Nevow release? :)




From dekonerding at lbl.gov  Mon Sep 12 12:30:51 2005
From: dekonerding at lbl.gov (David E. Konerding)
Date: Mon, 12 Sep 2005 09:30:51 -0700
Subject: [Twisted-Python] Throttling outgoing client requests
Message-ID: <4325AD3B.7060202@lbl.gov>

Hi,

I am writing a client usign Twisted that makes a lot of XMLRPC requests 
simultaneously (using twisted.web.xmlrpc.Proxy).  There are a bunch of 
them, all to the same site,
and when I run on MacOSX, I start getting bind errors-- I think OS X 
must have more restricted outgoing network connections that the linux
box I normally work on.

My goal is to throttle the number of outgoing requests.  I could do this 
by submitting just one request at a time, and having a deferred callback
registered such that when the request completes (successfully or not) 
the next request is submitting.  But this sort of code flow is pretty
contorted.  My other thought would be to just schedule all the calls 
with a callLater and a randomized delay for each call.  Again, not so clean.

Is there a 'clean' way to throttle back the number of ongoing client 
requests-- perhaps through the xmlrpc.Proxy itself, or through some pattern?

Dave



From andrew-twisted at puzzling.org  Mon Sep 12 12:55:31 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 13 Sep 2005 02:55:31 +1000
Subject: [Twisted-Python] Throttling outgoing client requests
In-Reply-To: <4325AD3B.7060202@lbl.gov>
References: <4325AD3B.7060202@lbl.gov>
Message-ID: <20050912165531.GD2127@trogdor.home.puzzling.org>

On Mon, Sep 12, 2005 at 09:30:51AM -0700, David E. Konerding wrote:
> Hi,
> 
> I am writing a client usign Twisted that makes a lot of XMLRPC requests 
> simultaneously (using twisted.web.xmlrpc.Proxy).  There are a bunch of 
> them, all to the same site,
> and when I run on MacOSX, I start getting bind errors-- I think OS X 
> must have more restricted outgoing network connections that the linux
> box I normally work on.
> 
> My goal is to throttle the number of outgoing requests.  I could do this 
> by submitting just one request at a time, and having a deferred callback
> registered such that when the request completes (successfully or not) 
> the next request is submitting.  But this sort of code flow is pretty
> contorted.  My other thought would be to just schedule all the calls 
> with a callLater and a randomized delay for each call.  Again, not so clean.
> 
> Is there a 'clean' way to throttle back the number of ongoing client 
> requests-- perhaps through the xmlrpc.Proxy itself, or through some pattern?

Use twisted.internet.defer.DeferredSemaphore (added in Twisted 2.0).

Rough sketch of how to use it:

    sem = DeferredSemaphore(10) # maximum of 10 jobs at once
    for job in joblist:
        d = sem.acquire()
        d.addCallback(job.run)  # do the work
        d.addErrback(log.err)   # handle any errors by logging them
        d.addBoth(lambda x: sem.release())  # trigger the next job

-Andrew.



From nico at tekNico.net  Mon Sep 12 12:54:00 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 12 Sep 2005 18:54:00 +0200
Subject: [Twisted-Python] Re: Throttling outgoing client requests
In-Reply-To: <4325AD3B.7060202@lbl.gov>
References: <4325AD3B.7060202@lbl.gov>
Message-ID: <dg4br8$40o$1@sea.gmane.org>

> Is there a 'clean' way to throttle back the number of ongoing client
> requests-- perhaps through the xmlrpc.Proxy itself, or through some
> pattern?

There's a bunch of resource-limiting tools in twisted.protocols.policies.py .

-- 
Nicola Larosa - nico at tekNico.net

That's a bit too much navel-gazing for me. With enough effort, you
make anything a symbol of anything else. But that doesn't get any
code written. -- Robert Kern on comp.lang.python, July 2005




From bob at redivi.com  Mon Sep 12 13:05:53 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 12 Sep 2005 10:05:53 -0700
Subject: [Twisted-Python] Throttling outgoing client requests
In-Reply-To: <4325AD3B.7060202@lbl.gov>
References: <4325AD3B.7060202@lbl.gov>
Message-ID: <3DCFDFB4-2BA7-4DDC-A0A7-CE85EE7267A3@redivi.com>


On Sep 12, 2005, at 9:30 AM, David E. Konerding wrote:

> I am writing a client usign Twisted that makes a lot of XMLRPC  
> requests simultaneously (using twisted.web.xmlrpc.Proxy).  There  
> are a bunch of them, all to the same site,
> and when I run on MacOSX, I start getting bind errors-- I think OS  
> X must have more restricted outgoing network connections that the  
> linux
> box I normally work on.

By default the Mac OS X descriptors limit is 256, you can change it  
though.. run "ulimit -n unlimited" (or "limit descriptors unlimited"  
in tcsh) from a shell, or you can also do something like this:

import resource
_, hard_limit = resource.getrlimit(resource.RLIMIT_NOFILE)
resource.setrlimit(resource.RLIMIT_NOFILE, (hard_limit, hard_limit))

-bob





From antonykummel at yahoo.com  Mon Sep 12 14:28:34 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Mon, 12 Sep 2005 11:28:34 -0700 (PDT)
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>
Message-ID: <20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>

Not sure what you mean.

If threadedselectreactor can't integrate with twistd,
then the problem that threadedselectreactor solves is
inherent to twistd, in which case twistd is simply
unsuitable for some uses (i.e. GUI)?

--- Bob Ippolito <bob at redivi.com> wrote:

> 
> On Sep 11, 2005, at 11:06 AM, Antony Kummel wrote:
> 
> > Just wondering how and if to integrate
> > threadedselectreactor into twistd. I'm thinking to
> use
> > it for a GUI application which is also a server
> (and a
> > client), so I think using mktap/twistd makes
> sense,
> > but there is the matter of threadedselectreactor
> not
> > being supported.
> >
> > What I've been thinking is for
> threadedselectreactor
> > to have another method, or it could be combined
> with
> > interleave, that accepts a callable that makes the
> > main loop run. It could also be a special reactor
> for,
> > say, wxPython, that accepts a wxApp (and
> interleaves
> > automatically), and calls its MainLoop method
> inside
> > reactor.run(). This would make it trivial to use
> with
> > twisted.application. It would simple require the
> > service to let the reactor know about its
> > wxApp/whatever.
> >
> > Any thoughts?
> 
> I don't think that's really going to work without a
> bunch of  
> refactoring of twistd and special-cases for each
> environment -- which  
> is the problem that threadedselectreactor solves in
> the first place.
> 
> -bob
> 
> 


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From bob at redivi.com  Mon Sep 12 14:42:39 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 12 Sep 2005 11:42:39 -0700
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
References: <20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
Message-ID: <18C50163-E9F7-4493-BA1E-4AD00241B834@redivi.com>

The problem that it solves is inherent to the reactor API, and the  
implementations of those reactors.  twistd supports the reactor API  
as-is, so it's not going to support an alternative to that API.  But  
yes, twistd isn't really appropriate for the same kind of typical use  
cases that threadedselectreactor is.  You're better off writing your  
app as you would normally do it, and invoking part of the twistd  
machinery yourself from inside there.

What really needs to happen is that the reactor API needs to be  
refactored such that any reactor can be used as a threaded reactor.   
Right now the idea of the threaded*reactor and the select() backend  
are conflated.  They don't have to be, and shouldn't, but I really  
didn't have the need to come up with such an API and change  
everything, I only needed one good implementation.

-bob

On Sep 12, 2005, at 11:28 AM, Antony Kummel wrote:

> Not sure what you mean.
>
> If threadedselectreactor can't integrate with twistd,
> then the problem that threadedselectreactor solves is
> inherent to twistd, in which case twistd is simply
> unsuitable for some uses (i.e. GUI)?
>
> --- Bob Ippolito <bob at redivi.com> wrote:
>
>
>>
>> On Sep 11, 2005, at 11:06 AM, Antony Kummel wrote:
>>
>>
>>> Just wondering how and if to integrate
>>> threadedselectreactor into twistd. I'm thinking to
>>>
>> use
>>
>>> it for a GUI application which is also a server
>>>
>> (and a
>>
>>> client), so I think using mktap/twistd makes
>>>
>> sense,
>>
>>> but there is the matter of threadedselectreactor
>>>
>> not
>>
>>> being supported.
>>>
>>> What I've been thinking is for
>>>
>> threadedselectreactor
>>
>>> to have another method, or it could be combined
>>>
>> with
>>
>>> interleave, that accepts a callable that makes the
>>> main loop run. It could also be a special reactor
>>>
>> for,
>>
>>> say, wxPython, that accepts a wxApp (and
>>>
>> interleaves
>>
>>> automatically), and calls its MainLoop method
>>>
>> inside
>>
>>> reactor.run(). This would make it trivial to use
>>>
>> with
>>
>>> twisted.application. It would simple require the
>>> service to let the reactor know about its
>>> wxApp/whatever.
>>>
>>> Any thoughts?
>>>
>>
>> I don't think that's really going to work without a
>> bunch of
>> refactoring of twistd and special-cases for each
>> environment -- which
>> is the problem that threadedselectreactor solves in
>> the first place.
>>
>> -bob
>>
>>
>>
>
>
> __________________________________________________
> Do You Yahoo!?
> Tired of spam?  Yahoo! Mail has the best spam protection around
> http://mail.yahoo.com
>




From exarkun at divmod.com  Mon Sep 12 23:27:42 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 12 Sep 2005 23:27:42 -0400
Subject: [Twisted-Python] Throttling outgoing client requests
In-Reply-To: <20050912165531.GD2127@trogdor.home.puzzling.org>
Message-ID: <20050913032742.3914.1948512840.divmod.quotient.15964@ohm>



On Tue, 13 Sep 2005 02:55:31 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>On Mon, Sep 12, 2005 at 09:30:51AM -0700, David E. Konerding wrote:
>> Hi,
>>
>> I am writing a client usign Twisted that makes a lot of XMLRPC requests
>> simultaneously (using twisted.web.xmlrpc.Proxy).  There are a bunch of
>> them, all to the same site,
>> and when I run on MacOSX, I start getting bind errors-- I think OS X
>> must have more restricted outgoing network connections that the linux
>> box I normally work on.
>>
>> My goal is to throttle the number of outgoing requests.  I could do this
>> by submitting just one request at a time, and having a deferred callback
>> registered such that when the request completes (successfully or not)
>> the next request is submitting.  But this sort of code flow is pretty
>> contorted.  My other thought would be to just schedule all the calls
>> with a callLater and a randomized delay for each call.  Again, not so clean.
>>
>> Is there a 'clean' way to throttle back the number of ongoing client
>> requests-- perhaps through the xmlrpc.Proxy itself, or through some pattern?
>
>Use twisted.internet.defer.DeferredSemaphore (added in Twisted 2.0).
>
>Rough sketch of how to use it:
>
>    sem = DeferredSemaphore(10) # maximum of 10 jobs at once
>    for job in joblist:
>        d = sem.acquire()
>        d.addCallback(job.run)  # do the work
>        d.addErrback(log.err)   # handle any errors by logging them
>        d.addBoth(lambda x: sem.release())  # trigger the next job

ITYM,

    sem = DeferredSemaphore(10)
    for job in joblist:
        sem.run(job.run).addErrback(log.err)

Note that this isn't the ideal way to queue up a large number of jobs.  The ideal way avoids constructing many more Deferreds than there are outstanding jobs, as well as avoids adding more than a fixed number of callbacks to each Deferred.

Jp



From andrew-twisted at puzzling.org  Mon Sep 12 23:33:18 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 13 Sep 2005 13:33:18 +1000
Subject: [Twisted-Python] Throttling outgoing client requests
In-Reply-To: <20050913032742.3914.1948512840.divmod.quotient.15964@ohm>
References: <20050912165531.GD2127@trogdor.home.puzzling.org>
	<20050913032742.3914.1948512840.divmod.quotient.15964@ohm>
Message-ID: <20050913033318.GG2127@trogdor.home.puzzling.org>

On Mon, Sep 12, 2005 at 11:27:42PM -0400, Jp Calderone wrote:
[...]
> 
> ITYM,
> 
>    sem = DeferredSemaphore(10)
>    for job in joblist:
>        sem.run(job.run).addErrback(log.err)

I do, thanks.  I shouldn't send mail so late at night.

> Note that this isn't the ideal way to queue up a large number of jobs.  The 
> ideal way avoids constructing many more Deferreds than there are 
> outstanding jobs, as well as avoids adding more than a fixed number of 
> callbacks to each Deferred.

But is harder to code...

-Andrew.




From stefano at pragma2000.com  Tue Sep 13 11:39:11 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Tue, 13 Sep 2005 17:39:11 +0200
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
References: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>
	<20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
Message-ID: <43274224050913083916a95fbb@mail.gmail.com>

On 9/12/05, Antony Kummel <antonykummel at yahoo.com> wrote:
> Not sure what you mean.
> 
> If threadedselectreactor can't integrate with twistd,
> then the problem that threadedselectreactor solves is
> inherent to twistd, in which case twistd is simply
> unsuitable for some uses (i.e. GUI)?
> 

Antony,

using twisted with GUIs is not trivial, and I found it quite tricky.
But in the end it's possible and in fact I do it all the time. Here's
the best solution I could find so far, using wxPython:

1) Run wxPython in the main thread
2) Run twisted reactor in a secondary thread
3) Have special proxy objects that bridge calls from gui code (running
in one thread) and network code (running inside another)

It doesn't sound nice, but it's not as bad as it seems.

The problem is that there's not much you can do about it, really:
first of all, wxPython is made in such a way that if you don't use its
own event loop, you won't be able to use modal dialogs (which simply
sucks). So you can't really use wxreactor, and similar solutions if
you want to build anything more complex that hello world.

Conversely, you can't use wxPython's event loop to process twisted
events because it's not responsive enough. So you're left with the
multiple threads solution only.

Once you have this, you need to deal with the communication problem:
say your network code is dealing with a protocol that fails, and you
want to warn the used with an error dialog. You can't really call
wx.ErrorDialog(...).ShowModal() because your code is running in the
wrong thread, so you have to wx.CallAfter(myShowDialogMethod, ...).

Similarly, if the user clicks on the "Connect" button, you can't call
twisted code from within the OnClick() event handler because you're
again in the wrong thread. Therefore you have to
reactor.callFromThread(myBeginConnectionMethod, ...).

So, dealing with these wx.CallAfter and reactor.callFromThread quickly
urges you to write proxies whose methods are decorated in such a way
that just by calling them from one thread triggers their execution in
the other thread.

When I discovered all these issues, I searched for code online and
found something that I can't find again, but looks a lot like this
(and could very well be the same):
http://solipsis.netofpeers.net/wiki2/index.php/WxPython_And_Twisted_Example

I wrote this in a bit of a rush, I hope I was clear enough.
If this is relevant to you, let me know in case you need more info.

stefano



From glyph at divmod.com  Tue Sep 13 12:18:04 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 13 Sep 2005 12:18:04 -0400
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <43274224050913083916a95fbb@mail.gmail.com>
Message-ID: <20050913161804.3914.577888580.divmod.quotient.16290@ohm>


On Tue, 13 Sep 2005 17:39:11 +0200, Stefano Masini <stefano at pragma2000.com> wrote:

>using twisted with GUIs is not trivial, and I found it quite tricky.
> (...) using wxPython:

The problem here is not Twisted and GUIs, the problem is wxPython.  While superficially appealing and very featureful, wxPython integrates *very* poorly with a foreign event loop and has no facility for integrating network I/O.

Using GTK+ with Twisted, for example, is completely trivial, and requires no such threading hacks.



From itamar at itamarst.org  Tue Sep 13 12:25:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 13 Sep 2005 12:25:29 -0400
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <43274224050913083916a95fbb@mail.gmail.com>
References: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>
	<20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
	<43274224050913083916a95fbb@mail.gmail.com>
Message-ID: <1126628729.8764.28.camel@localhost.localdomain>

On Tue, 2005-09-13 at 17:39 +0200, Stefano Masini wrote:

> using twisted with GUIs is not trivial, and I found it quite tricky.
> But in the end it's possible and in fact I do it all the time. Here's
> the best solution I could find so far, using wxPython:
> 
> 1) Run wxPython in the main thread
> 2) Run twisted reactor in a secondary thread
> 3) Have special proxy objects that bridge calls from gui code (running
> in one thread) and network code (running inside another)

threadedselectreactor is probably much easier than doing this.




From dekonerding at lbl.gov  Tue Sep 13 13:00:58 2005
From: dekonerding at lbl.gov (David E. Konerding DSD staff)
Date: Tue, 13 Sep 2005 10:00:58 -0700
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <1126628729.8764.28.camel@localhost.localdomain>
References: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>	<20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>	<43274224050913083916a95fbb@mail.gmail.com>
	<1126628729.8764.28.camel@localhost.localdomain>
Message-ID: <432705CA.2010901@lbl.gov>

Itamar Shtull-Trauring wrote:
>On Tue, 2005-09-13 at 17:39 +0200, Stefano Masini wrote:
>
>  
>>using twisted with GUIs is not trivial, and I found it quite tricky.
>>But in the end it's possible and in fact I do it all the time. Here's
>>the best solution I could find so far, using wxPython:
>>
>>1) Run wxPython in the main thread
>>2) Run twisted reactor in a secondary thread
>>3) Have special proxy objects that bridge calls from gui code (running
>>in one thread) and network code (running inside another)
>>    
>
>threadedselectreactor is probably much easier than doing this.
>
>  

Do you guys plan on making a release of Twisted that contains 
threadedselectreactor?
One of the reasons I hate using it is that every time I want to develop 
on a Windows box,
I have to grab the free Visual Studio compiler, a bunch of SDKs, patch 
distutils
to support the free compiler, compile Zope.Interface and Twisted just to 
use the
threadedselectreactor.

It's been working really well for us, by the way.

Dave



From bob at redivi.com  Tue Sep 13 13:03:25 2005
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 13 Sep 2005 10:03:25 -0700
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <43274224050913083916a95fbb@mail.gmail.com>
References: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>
	<20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
	<43274224050913083916a95fbb@mail.gmail.com>
Message-ID: <970D1F8D-EFC9-4D7D-AC2A-B40CDAFB6824@redivi.com>


On Sep 13, 2005, at 8:39 AM, Stefano Masini wrote:

> On 9/12/05, Antony Kummel <antonykummel at yahoo.com> wrote:
>
>> Not sure what you mean.
>>
>> If threadedselectreactor can't integrate with twistd,
>> then the problem that threadedselectreactor solves is
>> inherent to twistd, in which case twistd is simply
>> unsuitable for some uses (i.e. GUI)?
>>
>>
>
> using twisted with GUIs is not trivial, and I found it quite tricky.
> But in the end it's possible and in fact I do it all the time. Here's
> the best solution I could find so far, using wxPython:
>
> 1) Run wxPython in the main thread
> 2) Run twisted reactor in a secondary thread
> 3) Have special proxy objects that bridge calls from gui code (running
> in one thread) and network code (running inside another)

Have you actually used threadedselectreactor?  It sure doesn't sound  
like it.  It solves this problem without the proxy objects.

-bob




From bgranger at scu.edu  Tue Sep 13 14:13:41 2005
From: bgranger at scu.edu (Brian Granger)
Date: Tue, 13 Sep 2005 11:13:41 -0700
Subject: [Twisted-Python] Twisted server in the background
Message-ID: <D7BE5A46-D6FA-4E50-A0FD-7E4E962D0381@scu.edu>

Hi,

I have a server written using twisted that I want to run in the  
background.  But when I try:

python server.py &

at the command line, the server starts but then the server is sent  
SIGINT which stops the twisted reactor.  Here is my log file

2005/09/13 11:08 PDT [-] Log opened.
2005/09/13 11:08 PDT [-] kernelcore.KernelTCPFactory starting on 10105
2005/09/13 11:08 PDT [-] Starting factory  
<kernelcore.KernelTCPFactory instance
at 0x58c210>
2005/09/13 11:08 PDT [-] Received SIGINT, shutting down.
2005/09/13 11:08 PDT [kernelcore.KernelTCPFactory] (Port 10105 Closed)
2005/09/13 11:08 PDT [kernelcore.KernelTCPFactory] Stopping factory  
<kernelcore.
KernelTCPFactory instance at 0x58c210>
2005/09/13 11:08 PDT [-] Main loop terminated.

How can I run a twisted server in the background?  Using twistd is  
not an option as I am using threadedselectreactor.  Thanks

Brian
  



From itamar at itamarst.org  Tue Sep 13 16:39:16 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 13 Sep 2005 16:39:16 -0400
Subject: [Twisted-Python] Twisted server in the background
In-Reply-To: <D7BE5A46-D6FA-4E50-A0FD-7E4E962D0381@scu.edu>
References: <D7BE5A46-D6FA-4E50-A0FD-7E4E962D0381@scu.edu>
Message-ID: <1126643956.8764.52.camel@localhost.localdomain>

On Tue, 2005-09-13 at 11:13 -0700, Brian Granger wrote:

> How can I run a twisted server in the background?  Using twistd is  
> not an option as I am using threadedselectreactor.  Thanks

You want to do the same thing twistd does, fork, close stdin/out/err
etc.. Find the applicable function in twistd's code and see if you can
reuse it.




From Henning.Ramm at mediapro-gmbh.de  Tue Sep 13 18:36:40 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Wed, 14 Sep 2005 00:36:40 +0200
Subject: [Twisted-Python] threadedselectreactor and twistd
Message-ID: <F92274058556DE42B94B148EEFB91839021CB570@exchange-03.suedkurier.de>

>>  
>
>Do you guys plan on making a release of Twisted that contains 
>threadedselectreactor?
>One of the reasons I hate using it is that every time I want 
>to develop 
>on a Windows box,
>I have to grab the free Visual Studio compiler, a bunch of SDKs, patch 
>distutils
>to support the free compiler, compile Zope.Interface and 
>Twisted just to 
>use the
>threadedselectreactor.

Why that effort? Just grab twistedselectreactor.py from SVN and copy it in your twisted 2.0 installation.

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From foom at fuhm.net  Wed Sep 14 02:00:56 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 14 Sep 2005 00:00:56 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EFQKG-0005ml-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-09-07 06:00:01.810000:
 Bugs opened: 9   Bugs closed: 9   Total open bugs: 423 (+0)
  Urgent: 11 (+1)
  Bug: 185 (-3)
  Feature: 153 (+0)
  Wish: 74 (+2)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] trial --testmodule no longer runs any tests  (yesterday)
       http://twistedmatrix.com/bugs/issue1170 opened by spiv

                    ==== Bug ====
[CORE] invalid path names in plugin system  (yesterday)
       http://twistedmatrix.com/bugs/issue1169 opened by antony

[PB] Errors in PB unserialization not reported to requestor  (2 days ago)
       http://twistedmatrix.com/bugs/issue1168 opened by antony

[DOCUMENTATION] Example in application.xhtml missing files and makes little sense  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1167 opened by spiv

[DOCUMENTATION, MAIL] [PATCH] Correct recipients type information in IMessageDelivery.receivedHeader docstring  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1165 opened by pacopablo

Jabber Example  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1164 opened by dialtone

[ENTERPRISE] enterprise.util.quote() doesn't escape ' for type bytea  (6 days ago)
       http://twistedmatrix.com/bugs/issue1163 opened by markbergsma

                    ==== Feature ====
[APPLICATION, TWISTD] twistd has no way to gracefully stop the initialization of an application instance if some conditions are not met  (yesterday)
       http://twistedmatrix.com/bugs/issue1171 opened by Biappi

                    ==== Wish ====
[TRIAL] trial doesn't search for TestCases in the most ideal way possible  (3 days ago)
       http://twistedmatrix.com/bugs/issue1166 opened by exarkun

Bugs Closed
______________________
                    ==== Bug ====
[DOCUMENTATION] Example in application.xhtml missing files and makes little sense  (2 days ago)
       http://twistedmatrix.com/bugs/issue1167 opened by spiv, closed by spiv

[DOCUMENTATION] Twisted logging howto  (11 months ago)
       http://twistedmatrix.com/bugs/issue741 opened by exarkun, closed by spiv

[DOCUMENTATION] Need a howto for Twisted's logging (twisted.python.log)  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1153 opened by spiv, closed by spiv

pop3client needs to handle servers which do not implement CAPA  (1 month ago)
       http://twistedmatrix.com/bugs/issue1125 opened by bkirsch, closed by exarkun

[MAIL] pop3 protocol does not parse lines according to the rfc  (3 months ago)
       http://twistedmatrix.com/bugs/issue1076 opened by mg, closed by exarkun

[CONCH, TRIAL] CharacterAttribute's __getattr__ fools inspect.isclass.  (1 week ago)
       http://twistedmatrix.com/bugs/issue1158 opened by jml, closed by exarkun

[DOCUMENTATION, MAIL] [PATCH] Correct recipients type information in IMessageDelivery.receivedHeader docstring  (4 days ago)
       http://twistedmatrix.com/bugs/issue1165 opened by pacopablo, closed by exarkun

[DOCUMENTATION, MAIL] mail documentation links to non-existant example  (7 days ago)
       http://twistedmatrix.com/bugs/issue1162 opened by hypatia, closed by hypatia

Jabber Example  (6 days ago)
       http://twistedmatrix.com/bugs/issue1164 opened by dialtone, closed by ralphm




From stefano at pragma2000.com  Wed Sep 14 02:42:01 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Wed, 14 Sep 2005 08:42:01 +0200
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <970D1F8D-EFC9-4D7D-AC2A-B40CDAFB6824@redivi.com>
References: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>
	<20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
	<43274224050913083916a95fbb@mail.gmail.com>
	<970D1F8D-EFC9-4D7D-AC2A-B40CDAFB6824@redivi.com>
Message-ID: <4327422405091323423861bf87@mail.gmail.com>

On 9/13/05, Bob Ippolito <bob at redivi.com> wrote:
> Have you actually used threadedselectreactor?  It sure doesn't sound
> like it.  It solves this problem without the proxy objects.

Indeed, I just learn about it now. Thanks! It sounds sweet.
Unfortunately I've already got a lot of working code... proxy objects
aren't that bad for me. So I'll have to wait until the next
refactoring in order to try it. :(

-stefano



From solipsis at pitrou.net  Wed Sep 14 07:35:35 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 14 Sep 2005 13:35:35 +0200
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <20050913161804.3914.577888580.divmod.quotient.16290@ohm>
References: <20050913161804.3914.577888580.divmod.quotient.16290@ohm>
Message-ID: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>


> The problem here is not Twisted and GUIs, the problem is wxPython.
> While superficially appealing and very featureful, wxPython integrates
> *very* poorly with a foreign event loop and has no facility for
> integrating network I/O.
> 
> Using GTK+ with Twisted, for example, is completely trivial, and
> requires no such threading hacks.

Never tried GTK with Twisted, but I don't understand how you can say
that generally.
Suppose a network event is taking some time to process (e.g. the
protocol is complex and there are some calculations involved), then your
GUI will become unresponsive (a 100ms delay is not critical for most
Internet protocols, but it is for GUIs).
Suppose there are lots of network events coming in, which flood the
event loop for a short time. When will GUI events be processed ? Again,
a 100ms delay will feel very annoying for the user (and more than 1
second delay is awful).
On the other hand, if you have one thread for networking and one thread
for the GUI, the OS can take care of the scheduling priorities
naturally, using its sophisticated builtin mechanisms (e.g. noticing
that one thread is "interactive" while the other is not), so you don't
have to rewrite/emulate/composate for the lack of/ them.

Am I missing something here ?

Regards

Antoine.





From glyph at divmod.com  Wed Sep 14 08:05:29 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 14 Sep 2005 08:05:29 -0400
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>
Message-ID: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>



On Wed, 14 Sep 2005 13:35:35 +0200, Antoine Pitrou <solipsis at pitrou.net> wrote:

>Never tried GTK with Twisted, but I don't understand how you can say
>that generally.

I was saying it was easier to program, not that it performed better (and by the way, it *does* perform better than WX), but since you asked -

>Suppose a network event is taking some time to process (e.g. the
>protocol is complex and there are some calculations involved), then your
>GUI will become unresponsive (a 100ms delay is not critical for most
>Internet protocols, but it is for GUIs).

Not at all.  A user clicks on a button; if they don't see an update for 100ms, that is barely enough time for them to flick their mouse over to another button.  In fact, network latency is such that it is nearly impossible to provide faster than 100ms actual real response time even for highly performance-critical applications.

If the UI isn't redrawing for 100ms, it is hard for the user to even notice, unless it is a continuous 100ms between redraws, in which case this GUI application is really doing quite a lot of work!

>Suppose there are lots of network events coming in, which flood the
>event loop for a short time. When will GUI events be processed ? Again,
>a 100ms delay will feel very annoying for the user (and more than 1
>second delay is awful).

A news aggregator I use, straw, does blocking DNS lookups and can hang completely for upwards of a minute while it's doing an update.  While this is not exactly ideal behavior, it's tolerable.  Even Firefox locks up for a few seconds when rendering a complex page.  You are somewhat overstating the case - I sure wish that everything were faster, but 100ms latency on certain operations is not going to make anyone stop using an application :).

>On the other hand, if you have one thread for networking and one thread
>for the GUI, the OS can take care of the scheduling priorities
>naturally, using its sophisticated builtin mechanisms (e.g. noticing
>that one thread is "interactive" while the other is not), so you don't
>have to rewrite/emulate/composate for the lack of/ them.

>Am I missing something here ?

A few things:

1 - this is really not as major a problem as you say, for the reasons given above.
2 - this argument is tangential; if the thread scheduler is so sophisticated, it will notice that the IO-plus-UI thread is also "interactive" and schedule it appropriately.  (In fact, both threads in your example are "interactive" according to Linux 2.6's scheduler heuristic, I think)
3 - you don't have to emulate anything about threads when writing Twisted GUI applications unless you have extremely computation-intensive actions to perform; and in that case you can use threads for those (few) actions rather than everything in the app
4 - you're assuming that you have to build extra to "compensate" for the lack of threads, but you're ignoring the cost of building support tools to use them.  building thread safety into even a single API is difficult, costly, and extremely hard to test for correctness even superficially.  
5 - if you have a networked interactive application under high load, you are not going to improve performance or interactivity by performing a ton of additional context switches as well as a bunch of extra work locking and unlocking shared mutexes.  smart as the scheduler is, your computer *does* only have one or two processors, and more threads = more work.  (this is especially true if you are using threads for EVERYTHING in your application, rather than just the truly parallelizeable tasks)
6 - in Python, your threaded work has to release the GIL to give any substantive improvement in performance, which it probably doesn't.

... and that's just off the top of my head.



From solipsis at pitrou.net  Wed Sep 14 08:18:26 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 14 Sep 2005 14:18:26 +0200
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
Message-ID: <1126700306.29082.14.camel@p-dvsi-418-1.rd.francetelecom.fr>


Hi,

> Not at all.  A user clicks on a button; if they don't see an update
> for 100ms, that is barely enough time for them to flick their mouse
> over to another button.  In fact, network latency is such that it is
> nearly impossible to provide faster than 100ms actual real response
> time even for highly performance-critical applications.

Of course, but in a non-trivial GUI+network application, lots of GUI
actions do not imply networking.
For example in Firefox, the bookmarks editor is independent from
networking stuff, and I doubt it is unresponsive when the app is busy
parsing some HTML (I must admit I haven't checked, though).

> A news aggregator I use, straw, does blocking DNS lookups and can hang
> completely for upwards of a minute while it's doing an update.  While
> this is not exactly ideal behavior, it's tolerable.

That tolerance certainly depends on the user ;)
People who aren't aware of network issues will just think "wow, it's
crashed" and kill the window in a way or another.

> 6 - in Python, your threaded work has to release the GIL to give any
> substantive improvement in performance, which it probably doesn't.

My argument was only about responsiveness (latency), not performance
(bandwidth). Also, I advocate the use of two threads, not a thousand ;))

(er... I will try to find the time to look at Q2Q, by the way)

Regards

Antoine.





From mike at mkp.ca  Wed Sep 14 12:01:18 2005
From: mike at mkp.ca (Mike Pelletier)
Date: Wed, 14 Sep 2005 12:01:18 -0400
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
Message-ID: <200509141201.19484.mike@mkp.ca>

Oh good, a tangential conversation that I'm not really qualified to comment on 
with no real significance to the subject of the list.  My favourite!  I must 
add my two cents.  ;-)

On Wed September 14 2005 08:05, glyph at divmod.com wrote:
> Not at all.  A user clicks on a button; if they don't see an update for
> 100ms, that is barely enough time for them to flick their mouse over to
> another button.

100ms seems like an awfully long time for a GUI to go without even providing 
feedback to the user (ie, depressing a button, colouring a link, highlighting 
a control, etc).  Consider especially operations like drag-and-drop and using 
spinners, which are very interactive and require fine motor movement.  Also 
consider interacting with dense and complex controls with lots of small 
clicking areas, as in a DTP app or 3d modeller.  Timely feedback is very 
important to a comfortable experience.  After 8 hours of using something with 
mushy, >100ms feedback, I would be cursing the invention of the mouse.

I drank deeply of the Be koolaid.  I think the goal should be for an interface 
should remain responsive at interactive levels in all conditions, even when 
the rest of the app is busy and unresponsive.  Feedback to user actions 
should seem instantaneous (much closer to 10ms than 100ms), even -- 
especially! -- if the user's actions cannot be resolved for some seconds.

> If the UI isn't redrawing for 100ms, it is hard for the user to even
> notice, unless it is a continuous 100ms between redraws, in which case this
> GUI application is really doing quite a lot of work!

10fps is a pretty feeble goal in a lot of application spaces.

Of course, I recognize that Twisted is a framework for network apps, not UIs.  
But that's almost an argument *for* separating the UI and network event 
loops.

> A news aggregator I use, straw, does blocking DNS lookups and can hang
> completely for upwards of a minute while it's doing an update.  While this
> is not exactly ideal behavior, it's tolerable.  Even Firefox locks up for a 
> few seconds when rendering a complex page.

"These other apps suck, so ours can suck too"?

> You are somewhat overstating 
> the case - I sure wish that everything were faster, but 100ms latency on
> certain operations is not going to make anyone stop using an application
> :).

I use Konq rather than Firefox because, on my turn-of-the-century equipment, 
Firefox is too unresponsive.  Of course, I sacrifice a lot of the "web 
experience" but a) good riddance and b) unresponsive apps aggravate me, 
perhaps more than the average user.

> A few things:

Though I disagree with your assumptions, I can't argue with your points.  I'm 
tempted to think this is a failing of Python (the heresy!).  It seems like 
because of issues like the GIL, one needs to put the interface and the 
machinery in completely separate processes to reach Be-like ideals.

Mike.



From alessandro-bottoni at libero.it  Wed Sep 14 12:38:59 2005
From: alessandro-bottoni at libero.it (Alessandro Bottoni)
Date: Wed, 14 Sep 2005 18:38:59 +0200
Subject: [Twisted-Python] O'Reilly book on Twisted
Message-ID: <200509141838.59624.alessandro-bottoni@libero.it>

Most likely, I was sleeping while the teacher told it but... I just discovered 
that O'Reilly is going to publish a book on Twisted:

http://www.oreilly.com/catalog/twistedadn/

http://www.amazon.com/exec/obidos/tg/detail/-/0596100329/qid=1126714644/sr=1-1/ref=sr_1_1/102-3430080-1376942?v=glance&s=books

(Sleeping) newbies like me will be happy... ;-)
-----------------------------
Alessandro Bottoni



From general at eepatents.com  Wed Sep 14 13:03:39 2005
From: general at eepatents.com (Ed Suominen)
Date: Wed, 14 Sep 2005 10:03:39 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
Message-ID: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>

I've been following this discussion with some interest because I'm
starting a new project that will be heavily centered around both
MySQL-based persistency  and a graphically demanding GUI.  I took a look
at wxPython but was somewhat turned off by the complication of
integrating it with Twisted, which I'm using to do top-level dispatching
of time-consuming stuff in threads and in separate processes, and to
perform networking when that functionality inevitably winds up getting
added to the application.

I had been thinking about PyQT but was turned off by the licensing
complications under Windows.  However, QT4 is dual-licensed and there is
already a conveniently installable GPL version of PyQT for Windows now.
(Apparently, someone went to the trouble of recompiling the GPL'd QT3
source under cygwin, and the result seems to work fine for me.) You can
get it at http://www.quadgames.com/download/pythonqt/PyQtGPL10.exe.

So, I think the choice will be PyQT for me. Comments welcome, though.

- Ed Suominen




From jasper at peak.org  Wed Sep 14 14:26:19 2005
From: jasper at peak.org (Jasper)
Date: Wed, 14 Sep 2005 11:26:19 -0700
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
Message-ID: <43286B4B.20100@peak.org>

glyph at divmod.com wrote:

> On Wed, 14 Sep 2005 13:35:35 +0200, Antoine Pitrou 
> <solipsis at pitrou.net> wrote:
>
>> Suppose a network event is taking some time to process (e.g. the
>> protocol is complex and there are some calculations involved), then your
>> GUI will become unresponsive (a 100ms delay is not critical for most
>> Internet protocols, but it is for GUIs).
>
>
> Not at all.  A user clicks on a button; if they don't see an update 
> for 100ms, that is barely enough time for them to flick their mouse 
> over to another button.  In fact, network latency is such that it is 
> nearly impossible to provide faster than 100ms actual real response 
> time even for highly performance-critical applications.
>
> If the UI isn't redrawing for 100ms, it is hard for the user to even 
> notice, unless it is a continuous 100ms between redraws, in which case 
> this GUI application is really doing quite a lot of work!


Normally you're a pretty sharp guy, but you're dead wrong about this. 
Tenth of a second delays are very noticeable, quickly become quite 
annoying, and make fine GUI control difficult as your mouse jumps 
around, etc..  Keeping interupts shorter than 100ms is very much 
critical for GUIs.

Your "Firefox is unresponsive" example is a special case, as usually 
there is nothing to do while you wait for a page to load, so lack of 
responsiveness goes unnoticed; even so, as soon as you try loading 
multiple pages in background tabs it can become quite annoying, with 
mouse clicks get lost, etc.

Now, I'm not a fan of threaded programming, and I definitely agree 
wxPython doesn't integrate well with Twisted (IIRC it doesn't relinquish 
control reliably), but Twisted is also lacking in this department.  I 
only see 2 ways to deal with moderate length processing chunks and still 
allow a responsive GUI: split them off into a seperate thread/process 
(yuck!), or painstakingly instrument every such piece of code to do it's 
own time tracking and yield at an appropriate moment -- which isn't much 
better than threading.  Worse, I don't see a satisfactory way to deal 
with the problem if it stems from some internal bit of Twisted taking 
too big of a time slice.  Manually split and recombine my network data 
into smaller chunks?  Run the whole GUI loop in a different thread?!

Unfortunately I don't have a solid idea of what Twisted could do better 
here, as I'm only passingly familiar with it's internals.  Perhaps some 
way to get the Reactor to transmit network data in smaller chunks, with 
more frequent pauses in between to allow for GUI responsiveness?

-Jasper



From stefano at pragma2000.com  Wed Sep 14 14:30:55 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Wed, 14 Sep 2005 20:30:55 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
Message-ID: <432742240509141130429ecd2d@mail.gmail.com>

On 9/14/05, Ed Suominen <general at eepatents.com> wrote:
> MySQL-based persistency  and a graphically demanding GUI.  I took a look
> at wxPython but was somewhat turned off by the complication of
> integrating it with Twisted, which I'm using to do top-level dispatching

I've already commented about this on the thread this one spinned off
from, but I'll repeat it here: wxPython *can* be used with Twisted,
and it's not very complicated.
I use two separate threads (with two event loops) and two proxy
objects to vehicle the requests from one thread to the other.

I just learnt there is a wonderful threadedselectreactor that allows
for an easy integration of twisted and wx inside the same event loop,
but I haven't tried it yet.
Actually, and I'm sure I will say some nonsense here, so please
correct me if you are in the know, I'm wondering if having the same
loop process both wx and twisted events could harm twisted
responsiveness, or viceversa.

By the way, I have to say that using proxy objects is not that bad. I
actually think it's quite nice to have all the possible interaction
formalized as methods all belonging to the same object. But in my case
I don't have a *very* complicated interaction: from the network side,
I just need to raise dialogs, update the status bar, update table
contents, open and close windows and stuff like this. From the gui
side I need to start a connection protocol, stop it, trigger
communication with a server, send updates, and stuff like this. So,
it's not a million of methods, it's just a few, that I actually like
having all sorted in the same place.

cheers,
stefano



From nico at tekNico.net  Wed Sep 14 14:29:23 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 14 Sep 2005 20:29:23 +0200
Subject: [Twisted-Python] Re: O'Reilly book on Twisted
In-Reply-To: <200509141838.59624.alessandro-bottoni@libero.it>
References: <200509141838.59624.alessandro-bottoni@libero.it>
Message-ID: <dg9q63$6qj$1@sea.gmane.org>

> Most likely, I was sleeping while the teacher told it but... I just discovered 
> that O'Reilly is going to publish a book on Twisted:
> 
> http://www.oreilly.com/catalog/twistedadn/
> 
> http://www.amazon.com/exec/obidos/tg/detail/-/0596100329/qid=1126714644/sr=1-1/ref=sr_1_1/102-3430080-1376942?v=glance&s=books

The book cover is a blast! :-D

-- 
Nicola Larosa - nico at tekNico.net

That's a bit too much navel-gazing for me. With enough effort, you
make anything a symbol of anything else. But that doesn't get any
code written. -- Robert Kern on comp.lang.python, July 2005




From bob at redivi.com  Wed Sep 14 15:03:52 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 14 Sep 2005 15:03:52 -0400
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
Message-ID: <E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>


On Sep 14, 2005, at 1:03 PM, Ed Suominen wrote:

> I've been following this discussion with some interest because I'm
> starting a new project that will be heavily centered around both
> MySQL-based persistency  and a graphically demanding GUI.  I took a  
> look
> at wxPython but was somewhat turned off by the complication of
> integrating it with Twisted, which I'm using to do top-level  
> dispatching
> of time-consuming stuff in threads and in separate processes, and to
> perform networking when that functionality inevitably winds up getting
> added to the application.

This is exactly the sort of application that threadedselectreactor is  
for.  The integration is neither hard, complicated, nor slow.

-bob




From Henning.Ramm at mediapro-gmbh.de  Wed Sep 14 15:08:41 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Wed, 14 Sep 2005 21:08:41 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
Message-ID: <F92274058556DE42B94B148EEFB91839021CB572@exchange-03.suedkurier.de>

Please everyone stop complaining about how bad twisted and wx would
integrate etc. while you didn't try threadedselectreactor first!

regards, HR



From Henning.Ramm at mediapro-gmbh.de  Wed Sep 14 15:31:37 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Wed, 14 Sep 2005 21:31:37 +0200
Subject: [Twisted-Python] process timing / idle handler
Message-ID: <F92274058556DE42B94B148EEFB91839021CB573@exchange-03.suedkurier.de>

Ahoi!

I often use reactor.callLater(0, something) to let twisted handle and intercept my call queue.
Is this really preferable to calling 'something' directly? Or do I just fool myself?

Is there something like reactor.OnIdle()?
Or, more generally, how could I delay some actions (intermediate cleanup etc.) until the computer has free resources?
(Some of my processes run on a very high loaded server.)


Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From exarkun at divmod.com  Wed Sep 14 15:52:50 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 14 Sep 2005 15:52:50 -0400
Subject: [Twisted-Python] process timing / idle handler
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB573@exchange-03.suedkurier.de>
Message-ID: <20050914195250.3914.2047845410.divmod.quotient.17026@ohm>

On Wed, 14 Sep 2005 21:31:37 +0200, henning.ramm at mediapro-gmbh.de wrote:
>Ahoi!
>
>I often use reactor.callLater(0, something) to let twisted handle and intercept my call queue.
>Is this really preferable to calling 'something' directly? Or do I just fool myself?
>
>Is there something like reactor.OnIdle()?
>Or, more generally, how could I delay some actions (intermediate cleanup etc.) until the computer has free resources?
>(Some of my processes run on a very high loaded server.)
>

This does what you expect, but what you expect may not be the right thing.  What happens if there are 50 on-idle tasks?  That won't be nearly as nice as if there's only 1.  If you want to schedule CPU-intensive tasks, they need to cooperate with each other.

Take a look at <http://divmod.org/svn/Divmod/trunk/Epsilon/epsilon/cooperator.py>.  It's intended to be used with time-consumed tasks implemented as iterators.  By using a single Cooperator, the amount of work you arrange to have performed per unit of network activity is limited, regardless of the number of different tasks outstanding.

This also lets you tune the rate at which time-consumed tasks are processed using a single knob.  This means that if you notice you can handle greater latency, there is a single thing to change (possibly even at runtime) to let you do this (the benefit being that doing more work at once is more efficient).

You can also nest Cooperators and assign them non-time-based schedulers (such as a system load-based scheduler).  This lets you give a task or group of tasks a priority relative to other things you have scheduled.

However, if you have expensive computations that do not interact with the rest of your application except by receiving an immutable or non-shared chunk of input and producing an immutable or non-shared chunk of output, a threaded solution may well be appropriate.  Threadless solutions are superior because they let the code in question interact with the rest of your application in an unsurprising way.  If there is no interaction, the benefits of avoiding threads are less pronounced.

Jp



From jasper at peak.org  Wed Sep 14 17:15:52 2005
From: jasper at peak.org (Jasper)
Date: Wed, 14 Sep 2005 14:15:52 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
Message-ID: <43289308.50606@peak.org>

Bob Ippolito wrote:

>
> On Sep 14, 2005, at 1:03 PM, Ed Suominen wrote:
>
>> I've been following this discussion with some interest because I'm
>> starting a new project that will be heavily centered around both
>> MySQL-based persistency  and a graphically demanding GUI.  I took a  
>> look
>> at wxPython but was somewhat turned off by the complication of
>> integrating it with Twisted, which I'm using to do top-level  
>> dispatching
>> of time-consuming stuff in threads and in separate processes, and to
>> perform networking when that functionality inevitably winds up getting
>> added to the application.
>
>
> This is exactly the sort of application that threadedselectreactor is  
> for.  The integration is neither hard, complicated, nor slow.


Hmmm.  Perhaps I glanced over threadedselectreactor too quickly, since 
all the discussion seemed to be about wxPython (which I'm not using).  
However, casting about through the archives, I haven't really found a 
good description of threadedselectreactor...

What's it actually do?  Just allow you to integrate 2 loops in a 
slightly nicer fashion?  I integrated my pygame+pyui loop with twisted's 
default reactor using 5 simple lines of code, so I'm not seeing much 
room for gain there...  Does threadedselectreactor do more, like address 
GUI responsiveness?

Or more to the point, is there a concise overview somewhere?

-Jasper



From bob at redivi.com  Wed Sep 14 18:33:13 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 14 Sep 2005 18:33:13 -0400
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <43289308.50606@peak.org>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
	<43289308.50606@peak.org>
Message-ID: <2FA8A4EE-CA63-4A09-A529-64BEB6A50E60@redivi.com>


On Sep 14, 2005, at 5:15 PM, Jasper wrote:

> Bob Ippolito wrote:
>
>
>>
>> On Sep 14, 2005, at 1:03 PM, Ed Suominen wrote:
>>
>>
>>> I've been following this discussion with some interest because I'm
>>> starting a new project that will be heavily centered around both
>>> MySQL-based persistency  and a graphically demanding GUI.  I took  
>>> a  look
>>> at wxPython but was somewhat turned off by the complication of
>>> integrating it with Twisted, which I'm using to do top-level   
>>> dispatching
>>> of time-consuming stuff in threads and in separate processes, and to
>>> perform networking when that functionality inevitably winds up  
>>> getting
>>> added to the application.
>>>
>>
>>
>> This is exactly the sort of application that threadedselectreactor  
>> is  for.  The integration is neither hard, complicated, nor slow.
>>
>
>
> Hmmm.  Perhaps I glanced over threadedselectreactor too quickly,  
> since all the discussion seemed to be about wxPython (which I'm not  
> using).  However, casting about through the archives, I haven't  
> really found a good description of threadedselectreactor...
>
> What's it actually do?  Just allow you to integrate 2 loops in a  
> slightly nicer fashion?  I integrated my pygame+pyui loop with  
> twisted's default reactor using 5 simple lines of code, so I'm not  
> seeing much room for gain there...  Does threadedselectreactor do  
> more, like address GUI responsiveness?
>
> Or more to the point, is there a concise overview somewhere?

http://bob.pythonmac.org/archives/2005/04/17/twisted-and-foreign- 
event-loops/
http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/threadedselect/

-bob




From radeex at gmail.com  Wed Sep 14 18:53:39 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 15 Sep 2005 08:53:39 +1000
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
References: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>
	<20050914120529.3914.647455527.divmod.quotient.16815@ohm>
Message-ID: <60ed19d405091415536f86ee2c@mail.gmail.com>

On 9/14/05, glyph at divmod.com <glyph at divmod.com> wrote:
> On Wed, 14 Sep 2005 13:35:35 +0200, Antoine Pitrou <solipsis at pitrou.net> wrote:
> >Suppose a network event is taking some time to process (e.g. the
> >protocol is complex and there are some calculations involved), then your
> >GUI will become unresponsive (a 100ms delay is not critical for most
> >Internet protocols, but it is for GUIs).
> 
> Not at all.  A user clicks on a button; if they don't see an update for 100ms, that is barely enough time for them to flick their mouse over to another button.  In fact, network latency is such that it is nearly impossible to provide faster than 100ms actual real response time even for highly performance-critical applications.

[etc, etc, all of glyph's points...]

Whether or not this argument is correct, it's unnecessary. There's a
much simpler way to argue this side of the threads-in-GUIs debate:

The way to write all Twisted applications, not just GUI ones, is that
you _DO NOT BLOCK_. Blocking for even a small amount of time in, for
example, a network server application, can eventually have disastrous
results for the usability of your network server application. If you
have CPU intensive functionality in your application, you need to
figure out a way to make it not block, by either (e.g.) breaking the
computation across reactor iterations, or by deferring those
individual operations to a thread, or process, or whatever. For other
sorts of operations, fortunately Twisted offers non-blocking
alternatives for many sorts of operations, like I/O. :-)

If you write your Twisted application in a way that isn't horrible,
your GUIs won't block. It's pretty simple.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From radeex at gmail.com  Wed Sep 14 19:05:10 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 15 Sep 2005 09:05:10 +1000
Subject: [Twisted-Python] O'Reilly book on Twisted
In-Reply-To: <200509141838.59624.alessandro-bottoni@libero.it>
References: <200509141838.59624.alessandro-bottoni@libero.it>
Message-ID: <60ed19d4050914160523256330@mail.gmail.com>

On 9/15/05, Alessandro Bottoni <alessandro-bottoni at libero.it> wrote:
> Most likely, I was sleeping while the teacher told it but... I just discovered
> that O'Reilly is going to publish a book on Twisted:
> 
> http://www.oreilly.com/catalog/twistedadn/
> 
> http://www.amazon.com/exec/obidos/tg/detail/-/0596100329/qid=1126714644/sr=1-1/ref=sr_1_1/102-3430080-1376942?v=glance&s=books
> 
> (Sleeping) newbies like me will be happy... ;-)

Aha, the list has heard about the new Twisted book (Abe Fettig posted
about it a little while back), but I don't believe we've caught a
glimpse of the cover yet. That rocks :-)

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From jasper at peak.org  Wed Sep 14 19:35:07 2005
From: jasper at peak.org (Jasper)
Date: Wed, 14 Sep 2005 16:35:07 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <2FA8A4EE-CA63-4A09-A529-64BEB6A50E60@redivi.com>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
	<43289308.50606@peak.org>
	<2FA8A4EE-CA63-4A09-A529-64BEB6A50E60@redivi.com>
Message-ID: <4328B3AB.7000802@peak.org>

Bob Ippolito wrote:

>
> On Sep 14, 2005, at 5:15 PM, Jasper wrote:
>
>> Bob Ippolito wrote:
>>
>> Hmmm.  Perhaps I glanced over threadedselectreactor too quickly,  
>> since all the discussion seemed to be about wxPython (which I'm not  
>> using).  However, casting about through the archives, I haven't  
>> really found a good description of threadedselectreactor...
>>
>> What's it actually do?  Just allow you to integrate 2 loops in a  
>> slightly nicer fashion?  I integrated my pygame+pyui loop with  
>> twisted's default reactor using 5 simple lines of code, so I'm not  
>> seeing much room for gain there...  Does threadedselectreactor do  
>> more, like address GUI responsiveness?
>>
>> Or more to the point, is there a concise overview somewhere?
>
>
> http://bob.pythonmac.org/archives/2005/04/17/twisted-and-foreign- 
> event-loops/
> http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/threadedselect/
>
> -bob
>
>
Heh, I'd seen both of those... Neither really suggest any reason to use 
threadedselectreactor beyond being able to integrate foreign loops.

I guess I'm just not seeing what's so great about threadedselectreactor, 
except perhaps that it's better than wxreactor.

-Jasper



From jasper at peak.org  Wed Sep 14 20:04:37 2005
From: jasper at peak.org (Jasper)
Date: Wed, 14 Sep 2005 17:04:37 -0700
Subject: [Twisted-Python] process timing / idle handler
In-Reply-To: <20050914195250.3914.2047845410.divmod.quotient.17026@ohm>
References: <20050914195250.3914.2047845410.divmod.quotient.17026@ohm>
Message-ID: <4328BA95.4070706@peak.org>

Jp Calderone wrote:

> Take a look at 
> <http://divmod.org/svn/Divmod/trunk/Epsilon/epsilon/cooperator.py>.  
> It's intended to be used with time-consumed tasks implemented as 
> iterators.  By using a single Cooperator, the amount of work you 
> arrange to have performed per unit of network activity is limited, 
> regardless of the number of different tasks outstanding.

Thanks for the link! I'd been considering something similar (but with 
generators), and it's good food for thought.

-Jasper



From bob at redivi.com  Wed Sep 14 20:07:21 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 14 Sep 2005 20:07:21 -0400
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <4328B3AB.7000802@peak.org>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
	<43289308.50606@peak.org>
	<2FA8A4EE-CA63-4A09-A529-64BEB6A50E60@redivi.com>
	<4328B3AB.7000802@peak.org>
Message-ID: <78A31684-8353-45DE-8D22-40D2283C57B2@redivi.com>


On Sep 14, 2005, at 7:35 PM, Jasper wrote:

> Bob Ippolito wrote:
>
>
>>
>> On Sep 14, 2005, at 5:15 PM, Jasper wrote:
>>
>>
>>> Bob Ippolito wrote:
>>>
>>> Hmmm.  Perhaps I glanced over threadedselectreactor too quickly,   
>>> since all the discussion seemed to be about wxPython (which I'm  
>>> not  using).  However, casting about through the archives, I  
>>> haven't  really found a good description of threadedselectreactor...
>>>
>>> What's it actually do?  Just allow you to integrate 2 loops in a   
>>> slightly nicer fashion?  I integrated my pygame+pyui loop with   
>>> twisted's default reactor using 5 simple lines of code, so I'm  
>>> not  seeing much room for gain there...  Does  
>>> threadedselectreactor do  more, like address GUI responsiveness?
>>>
>>> Or more to the point, is there a concise overview somewhere?
>>>
>>
>>
>> http://bob.pythonmac.org/archives/2005/04/17/twisted-and-foreign-  
>> event-loops/
>> http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/ 
>> threadedselect/
>>
> Heh, I'd seen both of those... Neither really suggest any reason to  
> use threadedselectreactor beyond being able to integrate foreign  
> loops.

That's all the reason you need.  If you're integrating with a foreign  
event loop, you either use a custom specific reactor (most of which  
are broken and/or unmaintained), or you use threadedselectreactor.   
Writing your own custom specific reactor is almost certainly going to  
be broken in some way, and it's more complex code that you have to  
maintain.

> I guess I'm just not seeing what's so great about  
> threadedselectreactor, except perhaps that it's better than wxreactor.

It's better than writing your own reactor for every foreign event  
loop you're interested in, and it's generic enough to integrate with  
ANYTHING that has a thread-safe way to send a message to the main  
runloop (basically, all of them can do that).  Your pygame+pyui loop  
is probably less responsive to either network or user events, or  
perhaps instead chews more CPU than a threadedselectreactor alternative.

Fortunately, there's even an example that demonstrates how you could  
use it in conjunction with pygame.

-bob




From glyph at divmod.com  Wed Sep 14 20:42:14 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 14 Sep 2005 20:42:14 -0400
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <60ed19d405091415536f86ee2c@mail.gmail.com>
References: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>	<20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<60ed19d405091415536f86ee2c@mail.gmail.com>
Message-ID: <4328C366.1060005@divmod.com>

Christopher Armstrong wrote:

> If you write your Twisted application in a way that isn't horrible,
> your GUIs won't block. It's pretty simple.

I was about to write a post that looked about like this, and that also 
made reference to the "cooperator" module that JP just posted, so thank 
you both for making that irrelevant :)




From mikah at ceruleansoftware.com  Thu Sep 15 01:32:18 2005
From: mikah at ceruleansoftware.com (mikah at ceruleansoftware.com)
Date: Thu, 15 Sep 2005 13:32:18 +0800
Subject: [Twisted-Python] ReconnectingClientFactory creates multiple
	Protocols?
Message-ID: <20050915053217.GA21814@ceruleansoftware.com>

Hello --

  My network app consists of a ReconnectingClientFactory whose
Protocol instances connect to a another server. The protocol
class logs its activities to a file. Each transaction has a
unique number that increments.

  As far as I can tell, it works perfectly, with one strange
quirk. If I leave the app running for several days, I start
seeing more than one protocol showing up in the logs. I can
tell that it's not the same protocol since there's more than
one sequence of transaction numbers incrementing.

  As far as I can tell, it's related to the connection being
dropped, at which point the Factory reconnects and creates a
new protocol instance.

  What might I be doing wrong? It's buildProtocol() that
creates the new instances, but shouldn't the previous instance
get disconnected and cleaned up somehow? How can I ensure
this?

  Is it possible to force a protocol to disconnect and get
deleted? Which class (app, service, factory, protocol) should
be responsible?

  Thanks in advance,

mikah





From nico at tekNico.net  Thu Sep 15 04:39:39 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 15 Sep 2005 10:39:39 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <43289308.50606@peak.org>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
	<43289308.50606@peak.org>
Message-ID: <dgbc0c$2hq$1@sea.gmane.org>

> I integrated my pygame+pyui loop with twisted's default reactor
> using 5 simple lines of code, so I'm not seeing much room for
> gain there...

I'd sure like to see those five lines. ;-)

-- 
Nicola Larosa - nico at tekNico.net

That's a bit too much navel-gazing for me. With enough effort, you
make anything a symbol of anything else. But that doesn't get any
code written. -- Robert Kern on comp.lang.python, July 2005




From nico at tekNico.net  Thu Sep 15 04:50:06 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 15 Sep 2005 10:50:06 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <43286B4B.20100@peak.org>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<43286B4B.20100@peak.org>
Message-ID: <dgbcjv$4co$1@sea.gmane.org>

> Worse, I don't see a satisfactory way to deal
> with the problem if it stems from some internal bit of Twisted taking
> too big of a time slice.

Two noticeable cases of that are (de)serialization in PB and in XML-RPC code.

Is there going to be any facility, in newpb, for splitting up
(de)serialization in small chunks?

-- 
Nicola Larosa - nico at tekNico.net

That's a bit too much navel-gazing for me. With enough effort, you
make anything a symbol of anything else. But that doesn't get any
code written. -- Robert Kern on comp.lang.python, July 2005




From stefano at pragma2000.com  Thu Sep 15 05:29:16 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 15 Sep 2005 11:29:16 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <dgbcjv$4co$1@sea.gmane.org>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<43286B4B.20100@peak.org> <dgbcjv$4co$1@sea.gmane.org>
Message-ID: <4327422405091502294a60acab@mail.gmail.com>

On 9/15/05, Nicola Larosa <nico at teknico.net> wrote:
> > Worse, I don't see a satisfactory way to deal
> > with the problem if it stems from some internal bit of Twisted taking
> > too big of a time slice.
> 
> Two noticeable cases of that are (de)serialization in PB and in XML-RPC code.

Thinking about event handling taking up too much time, I once hacked
my reactor in order to measure the time taken by each callback and
send warnings when the execution time was longer than 0.something... I
found it useful to track down some horrible implementation that I left
behind and forgot about.

Is there something like this somewhere in twisted? Maybe something
that could be turned on and off for debugging?
Of course this would mean extra work at every cycle. Would it be too
bad for performance? I didn't find my hack too bad, but I wasn't
working at critical throughputs, I was just concerned with
responsiveness.

cheers,
stefano



From abe at fettig.net  Thu Sep 15 08:31:59 2005
From: abe at fettig.net (Abe Fettig)
Date: Thu, 15 Sep 2005 08:31:59 -0400
Subject: [Twisted-Python] Re: O'Reilly book on Twisted
In-Reply-To: <dg9q63$6qj$1@sea.gmane.org>
References: <200509141838.59624.alessandro-bottoni@libero.it>
	<dg9q63$6qj$1@sea.gmane.org>
Message-ID: <432969BF.1040009@fettig.net>

Nicola Larosa wrote:
>>Most likely, I was sleeping while the teacher told it but... I just discovered 
>>that O'Reilly is going to publish a book on Twisted:
>>
>>http://www.oreilly.com/catalog/twistedadn/
>>
>>http://www.amazon.com/exec/obidos/tg/detail/-/0596100329/qid=1126714644/sr=1-1/ref=sr_1_1/102-3430080-1376942?v=glance&s=books
> 
> 
> The book cover is a blast! :-D

It sure is - the O'Reilly designers picked the perfect image! I just
submitted the final changes the other day, so it's almost ready for
printing. I'm looking forward to seeing it in person :-)

Abe



From alessandro-bottoni at libero.it  Thu Sep 15 08:49:51 2005
From: alessandro-bottoni at libero.it (Alessandro Bottoni)
Date: Thu, 15 Sep 2005 14:49:51 +0200
Subject: [Twisted-Python] Re: O'Reilly book on Twisted
In-Reply-To: <432969BF.1040009@fettig.net>
References: <200509141838.59624.alessandro-bottoni@libero.it>
	<dg9q63$6qj$1@sea.gmane.org> <432969BF.1040009@fettig.net>
Message-ID: <200509151449.51384.alessandro-bottoni@libero.it>

Abe,
I want to thank you for having written this book.

Despite its elegant structure, Twisted is still hard to understand at first. 
Your book will help us a lot in using this nice framework.

Thanks again
-----------------------------
Alessandro Bottoni



From solipsis at pitrou.net  Thu Sep 15 09:16:03 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 15 Sep 2005 15:16:03 +0200
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <60ed19d405091415536f86ee2c@mail.gmail.com>
References: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>
	<20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<60ed19d405091415536f86ee2c@mail.gmail.com>
Message-ID: <1126790163.10856.2.camel@p-dvsi-418-1.rd.francetelecom.fr>


> The way to write all Twisted applications, not just GUI ones, is that
> you _DO NOT BLOCK_. Blocking for even a small amount of time in, for
> example, a network server application, can eventually have disastrous
> results for the usability of your network server application.

Provided it is a network server application, that is.
If you are writing an asynchronous message-passing-based P2P app, then a
100ms or even 1s latency when sending/receiving packets isn't horrible
at all.

But it becomes horrible when the GUI is subject to the same 100ms
delay ;)

Regards

Antoine.





From tv at twistedmatrix.com  Thu Sep 15 09:25:13 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 15 Sep 2005 16:25:13 +0300
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <200509141201.19484.mike@mkp.ca>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<200509141201.19484.mike@mkp.ca>
Message-ID: <43297639.2080209@twistedmatrix.com>

Mike Pelletier wrote:
> Of course, I recognize that Twisted is a framework for network apps, not UIs.  
> But that's almost an argument *for* separating the UI and network event 
> loops.

Oh my, a good idea hidden inside this futile thread.

Use separate processes for heavy loads of different characteristics.

Use a clean protocol between the processes to enable pluggability of
things you never even imagined.



From itamar at itamarst.org  Thu Sep 15 10:27:08 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 15 Sep 2005 10:27:08 -0400
Subject: [Twisted-Python] ReconnectingClientFactory creates multiple
	Protocols?
In-Reply-To: <20050915053217.GA21814@ceruleansoftware.com>
References: <20050915053217.GA21814@ceruleansoftware.com>
Message-ID: <1126794428.8867.18.camel@localhost.localdomain>

On Thu, 2005-09-15 at 13:32 +0800, mikah at ceruleansoftware.com wrote:

>   As far as I can tell, it's related to the connection being
> dropped, at which point the Factory reconnects and creates a
> new protocol instance.

Protocols (at least, when used with TCP) are designed so that their
lifetime matches that of the TCP connection they are handling. As a
result, when the connection is lost and the factory reconnects, this is
a new TCP connection with a new protocol. This is why there's a factory,
to manage data and logic that is not tied to a specific TCP connection
(e.g. "should I reconnect?" or "how far along was the download when I
got disconnected.")

In general you'd want to use the factory to store state that needs to
last past the lifetime of the protocol. You can, of course, have
buildProtocol always return the same instance, but that's pretty ugly
and can easily lead to obscure bugs if you don't clean up the state
correctly.




From stefano at pragma2000.com  Thu Sep 15 11:38:09 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 15 Sep 2005 17:38:09 +0200
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <1126790163.10856.2.camel@p-dvsi-418-1.rd.francetelecom.fr>
References: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>
	<20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<60ed19d405091415536f86ee2c@mail.gmail.com>
	<1126790163.10856.2.camel@p-dvsi-418-1.rd.francetelecom.fr>
Message-ID: <43274224050915083879444848@mail.gmail.com>

On 9/15/05, Antoine Pitrou <solipsis at pitrou.net> wrote:
> > The way to write all Twisted applications, not just GUI ones, is that
> > you _DO NOT BLOCK_. Blocking for even a small amount of time in, for
> > example, a network server application, can eventually have disastrous
> > results for the usability of your network server application.
> 
> Provided it is a network server application, that is.
> If you are writing an asynchronous message-passing-based P2P app, then a
> 100ms or even 1s latency when sending/receiving packets isn't horrible
> at all.
> 
> But it becomes horrible when the GUI is subject to the same 100ms
> delay ;)

I don't see your point Antoine.
Chris was pointing out that in an asynchronous model your event
handlers should not block. This means that if the task you're
performing - say round tripping a packet - is gonna take 100ms,
instead of waiting for it to complete - as you would in a synchronous
model - you're gonna break it up into, say, "initiation" and
"completion" phases. So your handler will only block for the duration
of the initiation phase, that will supposedly last a lot less that
100ms, maybe not more than 1ms, and return a deferred. Then the event
loop will go off and do other stuff. After 100 ms the deferred will
fire and some other part of your code will be called and perform the
completion phase.

So, if you do as you should, GUI responsiveness will not have anything
to deal with the actual round trip times of your protocol messages.

The problem with responsiveness will come up _only_ if for some reason
you have handlers that take a lot of time to run. For example if they
do complex computation or synchronous IO of large files, and stuff
like this.

stefano



From jasper at peak.org  Thu Sep 15 13:41:08 2005
From: jasper at peak.org (Jasper)
Date: Thu, 15 Sep 2005 10:41:08 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <78A31684-8353-45DE-8D22-40D2283C57B2@redivi.com>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
	<43289308.50606@peak.org>
	<2FA8A4EE-CA63-4A09-A529-64BEB6A50E60@redivi.com>
	<4328B3AB.7000802@peak.org>
	<78A31684-8353-45DE-8D22-40D2283C57B2@redivi.com>
Message-ID: <4329B234.7020402@peak.org>

Bob Ippolito wrote:

> On Sep 14, 2005, at 7:35 PM, Jasper wrote:
>
>> I guess I'm just not seeing what's so great about  
>> threadedselectreactor, except perhaps that it's better than wxreactor.
>
>
> It's better than writing your own reactor for every foreign event  
> loop you're interested in, and it's generic enough to integrate with  
> ANYTHING that has a thread-safe way to send a message to the main  
> runloop (basically, all of them can do that).  Your pygame+pyui loop  
> is probably less responsive to either network or user events, or  
> perhaps instead chews more CPU than a threadedselectreactor alternative. 


Ok, so it's perhaps more efficient.  CPU and user events are fine, 
although I'm not sure about network response.  I imagine the pauses I'm 
seeing are due to sending large data chunks though, which I don't think 
threadedselectreactor addresses.

-Jasper



From jasper at peak.org  Thu Sep 15 13:46:39 2005
From: jasper at peak.org (Jasper)
Date: Thu, 15 Sep 2005 10:46:39 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <dgbc0c$2hq$1@sea.gmane.org>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>	<43289308.50606@peak.org>
	<dgbc0c$2hq$1@sea.gmane.org>
Message-ID: <4329B37F.2090107@peak.org>

Nicola Larosa wrote:

>>I integrated my pygame+pyui loop with twisted's default reactor
>>using 5 simple lines of code, so I'm not seeing much room for
>>gain there...
>>    
>>
>
>I'd sure like to see those five lines. ;-)
>
>  
>
Here's what it roughly is, stripping out code and params not directly 
involved.  I just took the simplest thing I could think of, and since it 
worked I didn't look much further.  Perhaps this would have trouble if 
had frequent network traffic, but I don't.

-Jasper


class PyuiClient( NetworkClient ):
    def __init__( self  ):
        # ...
        self._pyuiRefresh( .001 )

    def _pyuiRefresh( self, delay ):
        pyui.draw()
        pyui.update()
        reactor.callLater( delay, self._pyuiRefresh, delay )




From jasper at peak.org  Thu Sep 15 13:51:11 2005
From: jasper at peak.org (Jasper)
Date: Thu, 15 Sep 2005 10:51:11 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <dgbcjv$4co$1@sea.gmane.org>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>	<43286B4B.20100@peak.org>
	<dgbcjv$4co$1@sea.gmane.org>
Message-ID: <4329B48F.9090706@peak.org>

Nicola Larosa wrote:

>>Worse, I don't see a satisfactory way to deal
>>with the problem if it stems from some internal bit of Twisted taking
>>too big of a time slice.
>>    
>>
>
>Two noticeable cases of that are (de)serialization in PB and in XML-RPC code.
>
>Is there going to be any facility, in newpb, for splitting up
>(de)serialization in small chunks?
>  
>
Yes, PB (de)serialization seems to be where I get responsiveness burps 
too.  I can split up large processing chunks of my own (probably along 
the line of JP's Cooperator), but I don't see how to readily do that to 
delays that are internal to Twisted, without maintaining my own version 
or shunting all networking into a seperate thread (which I'm loath to do).

-Jasper



From antonykummel at yahoo.com  Thu Sep 15 14:13:52 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Thu, 15 Sep 2005 11:13:52 -0700 (PDT)
Subject: [Twisted-Python] unsafe tracebacks in PB
Message-ID: <20050915181352.22871.qmail@web33914.mail.mud.yahoo.com>

Hi,

Just wondering, why is it possible to turn on unsafe
tracebacks only at the server and not at the client?
PB being symmetrical, this discrimination makes it
arbitrarily difficuly to debug PB applications
sometimes.

Antony Kummel

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From antonykummel at yahoo.com  Thu Sep 15 14:43:55 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Thu, 15 Sep 2005 11:43:55 -0700 (PDT)
Subject: [Twisted-Python] jelly tracebacks
Message-ID: <20050915184355.59140.qmail@web33905.mail.mud.yahoo.com>

Hi,

I just had a grueling experience debugging some
unjellying problem. I wonder, why not make jelly
tracebacks more useful by adding the details of the PB
message that gave rise to them (i.e. which method of
which object was called with which arguments). Any
thoughts?

Antony Kummel

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From antonykummel at yahoo.com  Thu Sep 15 14:54:52 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Thu, 15 Sep 2005 11:54:52 -0700 (PDT)
Subject: [Twisted-Python] application shutdown and control-C
Message-ID: <20050915185452.80535.qmail@web33909.mail.mud.yahoo.com>

Hi,

When running an application on Windows with twistd,
and stopping it with Control-C, sometimes it shuts
down properly, and sometimes it just stops abruptly,
which also means it doesn't get written to
*-shutdown.tap. That's no good! Has anyone experienced
this before?

Thanks,

Antony Kummel

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From itamar at itamarst.org  Thu Sep 15 15:15:04 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 15 Sep 2005 15:15:04 -0400
Subject: [Twisted-Python] application shutdown and control-C
In-Reply-To: <20050915185452.80535.qmail@web33909.mail.mud.yahoo.com>
References: <20050915185452.80535.qmail@web33909.mail.mud.yahoo.com>
Message-ID: <1126811704.8867.37.camel@localhost.localdomain>

On Thu, 2005-09-15 at 11:54 -0700, Antony Kummel wrote:

> When running an application on Windows with twistd,
> and stopping it with Control-C, sometimes it shuts
> down properly, and sometimes it just stops abruptly,
> which also means it doesn't get written to
> *-shutdown.tap. That's no good! Has anyone experienced
> this before? 

1. You should not depend on creation of .tap in shutdown. Never store
anything important in a .tap.

2. That sounds kinda wierd, it should shut down cleanly.




From warner at lothar.com  Thu Sep 15 15:32:50 2005
From: warner at lothar.com (Brian Warner)
Date: Thu, 15 Sep 2005 12:32:50 -0700 (PDT)
Subject: [Twisted-Python] Re: GUI responsiveness
Message-ID: <20050915.123250.108654696.warner@lothar.com>

Nicola Larosa <nico at tekNico.net> writes:
>
> Is there going to be any facility, in newpb, for splitting up
> (de)serialization in small chunks?

Yes, for serialization of custom classes. The serialization process can be
throttled by either the network side (producer/consumer style) or by the
serializer side.

Each "Slicer" object is responsible for turning a single object into either
low-level tokens (numbers and strings) or other Slicable objects. The 'slice'
method is actually a generator, expected to yield a series of smaller
objects. If it yields a Deferred, it will not be prodded again until that
Deferred fires. The outbound side of the PB connection will be stalled until
that object resumes serialization. (I'm considering an extension that would
let you have multiple serialization contexts running in parallel over a
single connection: if implemented, this deferred-serialization would not
stall the connection.. on the other hand methods could be invoked
out-of-order, which might be a problem).

You could also register a Slicer adapter to handle existing classes (or
conceivably for built-in types, like 'list', although I'm not sure that
actually works right now), so you could have a ListSlicer which does
something like:

 def slice(self):
  ITEMLIMIT = 10
  for i in range(0, len(self.original), ITEMLIMIT):
    for j in range(i, min(len(self.original),i+ITEMLIMIT)):
      yield self.original[j]
    d = defer.Deferred()
    reactor.callLater(0, d.callback, None)
    yield d

to limit how much gets serialized before giving up control for a turn. (of
course, this control may be too coarse to achieve what you want, if some of
the items are ints and some are big monster nested classes.. ideally you
would pay attention to the elapsed time or CPU cycles or pending workload or
something and just yield the Deferred when you need to).


I don't currently have anything in place for the deserialization side.
Unslicer objects have their receiveChild() method called repeatedly with
low-level tokens as they arrive off the wire, until you run out. Each time
read() returns a buffer of data, the Unslicer does as much work as it can
before returning.

This means you're naturally limited by the network speed. Unlike Slicers, the
Unslicers can only be throttled by the network side. I suspect you would need
to have a pretty fast pipe, saturated with inbound data, and a pretty slow
(or overloaded) CPU, before you would see a problem with this. If someone
thinks it is important, we could probably allow receiveChild() to return a
Deferred that means "stop reading from the socket until this Deferred fires",
which might be useful.

It might also be useful to add some code to the end of dataReceived() (right
after it has finished processing everything in the buffer) to do
transport.stopReading() (and arrange for it to be started again later) if not
enough other work had been done recently. I suspect this is a bit too much to
squeeze into PB: if receive-side CPU time is really a problem, we need a more
generalized way to handle this. In a previous life, where I implemented a
Reactor in C instead of python, I built some priority-queue/round-robin/WFQ
stuff into it, to reassure some fellow developers who were concerned about
things like traffic on one socket swamping all the others, and who would have
really preferred some full-blown real-time guarantees. I'm hesitant to drag
this sort of thing into Twisted, but if there's enough of a demand for it
(and someone can show actual problems with the existing approach), then maybe
it'd be worth investigating.

cheers,
 -Brian



From glyph at divmod.com  Thu Sep 15 17:48:39 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 15 Sep 2005 17:48:39 -0400
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: 0
Message-ID: <20050915214839.3914.135938274.divmod.quotient.17468@ohm>


On Thu, 15 Sep 2005 10:51:11 -0700, Jasper <jasper at peak.org> wrote:
>Nicola Larosa wrote:
>>>Worse, I don't see a satisfactory way to deal
>>>with the problem if it stems from some internal bit of Twisted taking
>>>too big of a time slice.

>>Two noticeable cases of that are (de)serialization in PB and in XML-RPC 
>>code.

There is a thing that SEDA does to make these kinds of things more reasonable.  Deferreds are sort of a degenerate case of this thing.  They don't name the thing, but I would call it "stage discipline", the act of splitting code up into what they call "stages" and making each stage idempotent except for the terminal, transaction-processing/notification-emitting stage.  I think it would be great if more of Twisted did this, but doing it is a big job.

Defgen is a slightly-less-degenerate form of this, however, using defgen on something performance critical like (de)serialization is likely to have a HUGE performance hit.

>>Is there going to be any facility, in newpb, for splitting up
>>(de)serialization in small chunks?

As warner said, "yes".

>Yes, PB (de)serialization seems to be where I get responsiveness burps too. 
>I can split up large processing chunks of my own (probably along the line of 
>JP's Cooperator), but I don't see how to readily do that to delays that are 
>internal to Twisted, without maintaining my own version or shunting all 
>networking into a seperate thread (which I'm loath to do).

"shunting all networking into a separate thread" will certainly not work, since all of the APIs that jelly calls are not thread-safe.  So you can rest easy in the knowledge that what you want to do is not only disgusting, it's impossible :).

However, the problem here is that certain code in Twisted is not as awesome as it possibly could be.  While I agree this is sad, there isn't really a solution, except "make it more awesome", which takes time, money, and effort, which nobody is contributing beyond an individual scale.

PB has been effectively unmaintained for almost 2 years now.  It is showing its age.  NewPB will fix several issues, but until someone wants to give Mr. Warner a staff and a budget for improving it, it's likely that it will have some ugly spots too.

In other words, you don't have to maintain your own version.  You just have to maintain the one in Twisted ;-).



From glyph at divmod.com  Thu Sep 15 17:52:32 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 15 Sep 2005 17:52:32 -0400
Subject: [Twisted-Python] application shutdown and control-C
In-Reply-To: <20050915185452.80535.qmail@web33909.mail.mud.yahoo.com>
Message-ID: <20050915215232.3914.1188708196.divmod.quotient.17472@ohm>



On Thu, 15 Sep 2005 11:54:52 -0700 (PDT), Antony Kummel <antonykummel at yahoo.com> wrote:

>When running an application on Windows with twistd,
>and stopping it with Control-C, sometimes it shuts
>down properly, and sometimes it just stops abruptly,
>which also means it doesn't get written to
>*-shutdown.tap. That's no good! Has anyone experienced
>this before?

Yep, and I spent about a week trying to fix it, once.  I couldn't really figure it out, but I came away with the impression that there isn't *really* such a thing as "signal()" on Windows - programs don't habitually send signals or handle them, especially when sent by hitting C-c in a CMD window - which appears to be subtly different from programmatically sending it.

Cygwin utilities appear to have the same issue; on 1 out of 100 runs (for me, anyway), C-c'ing a hosed process will terminate it instantly with no cleanup.  Also, command-line Python will usually generate a KeyboardInterrupt, but sometimes just exit immediately.  The busier it is, the more likely to just die (it seems) but I have never managed a direct correlation.

Terminating any reactor normally on Windows, with .stop(), works fine, though.



From solipsis at pitrou.net  Fri Sep 16 06:25:21 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 16 Sep 2005 12:25:21 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <4329B37F.2090107@peak.org>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>	<43289308.50606@peak.org>
	<dgbc0c$2hq$1@sea.gmane.org>  <4329B37F.2090107@peak.org>
Message-ID: <1126866321.27418.2.camel@p-dvsi-418-1.rd.francetelecom.fr>


> class PyuiClient( NetworkClient ):
>     def __init__( self  ):
>         # ...
>         self._pyuiRefresh( .001 )
> 
>     def _pyuiRefresh( self, delay ):
>         pyui.draw()
>         pyui.update()
>         reactor.callLater( delay, self._pyuiRefresh, delay )

This looks like a busy wait loop. It will eat a good chunk of the CPU
time (depending on the time taken by each "_pyuiRefresh" iteration) and
your laptop users (if there any) may not be very happy... It may slow
down other apps tooo.






From jasper at peak.org  Fri Sep 16 09:37:27 2005
From: jasper at peak.org (Jasper)
Date: Fri, 16 Sep 2005 06:37:27 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <1126866321.27418.2.camel@p-dvsi-418-1.rd.francetelecom.fr>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>	<43289308.50606@peak.org>	<dgbc0c$2hq$1@sea.gmane.org>
	<4329B37F.2090107@peak.org>
	<1126866321.27418.2.camel@p-dvsi-418-1.rd.francetelecom.fr>
Message-ID: <432ACA97.9020403@peak.org>

Antoine Pitrou wrote:

>>class PyuiClient( NetworkClient ):
>>    def __init__( self  ):
>>        # ...
>>        self._pyuiRefresh( .001 )
>>
>>    def _pyuiRefresh( self, delay ):
>>        pyui.draw()
>>        pyui.update()
>>        reactor.callLater( delay, self._pyuiRefresh, delay )
>>    
>>
>
>This looks like a busy wait loop. It will eat a good chunk of the CPU
>time (depending on the time taken by each "_pyuiRefresh" iteration) and
>your laptop users (if there any) may not be very happy... It may slow
>down other apps tooo.
>  
>

It's not a busy wait loop, whenever it's not doing anything control is 
relinquished to twisted.  The .001 second delay /is/ really short, and I 
had originally expected something closer to the screen refresh rate like 
.01, but after testing I found that .001 performed better.  To be honest 
I don't fully understand why this is the case, as it seems like this 
would be wastefull, but it works fast enough I can't really justify the 
time it would take to profile it and figure out exactly what's going on.

Anyway, I get 60 FPS, idling CPU use is 5%, and I develop on an older 
laptop.  Since this is a game I don't much care if it slows down other 
apps, which it does a little.  I have no doubt that it could be more 
efficient, but considering I don't have any speed problems I'm perfectly 
happy trading this off for
code simplicity.

-Jasper



From jasper at peak.org  Fri Sep 16 10:22:46 2005
From: jasper at peak.org (Jasper)
Date: Fri, 16 Sep 2005 07:22:46 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <20050915214839.3914.135938274.divmod.quotient.17468@ohm>
References: <20050915214839.3914.135938274.divmod.quotient.17468@ohm>
Message-ID: <432AD536.2020208@peak.org>

glyph at divmod.com wrote:

>>> Is there going to be any facility, in newpb, for splitting up
>>> (de)serialization in small chunks?
>>
>
> As warner said, "yes".

Woohoo!

>> Yes, PB (de)serialization seems to be where I get responsiveness 
>> burps too. I can split up large processing chunks of my own (probably 
>> along the line of JP's Cooperator), but I don't see how to readily do 
>> that to delays that are internal to Twisted, without maintaining my 
>> own version or shunting all networking into a seperate thread (which 
>> I'm loath to do).
>
>
> "shunting all networking into a separate thread" will certainly not 
> work, since all of the APIs that jelly calls are not thread-safe.  So 
> you can rest easy in the knowledge that what you want to do is not 
> only disgusting, it's impossible :).
>
> However, the problem here is that certain code in Twisted is not as 
> awesome as it possibly could be.  While I agree this is sad, there 
> isn't really a solution, except "make it more awesome", which takes 
> time, money, and effort, which nobody is contributing beyond an 
> individual scale.
>
> PB has been effectively unmaintained for almost 2 years now.  It is 
> showing its age.  NewPB will fix several issues, but until someone 
> wants to give Mr. Warner a staff and a budget for improving it, it's 
> likely that it will have some ugly spots too.
>
> In other words, you don't have to maintain your own version.  You just 
> have to maintain the one in Twisted ;-).


I had thought about this, but I'm pretty strapped for time as my startup 
is self funded.  Plus, it's not exactly like I can just walk into your 
SVN repository and start hacking. ;-)

On the other hand, for all the free mileage I've gotten out of Twisted I 
do owe you guys a certain debt!  Perhaps I could help out on NewPB, 
especially since I could really use the Slicer code Brian was talking 
about.  However, I'm in a bit of an awkward spot to do so right now 
though, as I'm not yet using Twisted 2.0 and my project isn't at a good 
point to upgrade libaries.  Still, I've got to upgrade sometime...

Is there a good place to read more about NewPB?  Or is it just a matter 
of searching the maillist archives and SVN repository?

-Jasper



From martin at moellenbecks.de  Fri Sep 16 15:49:34 2005
From: martin at moellenbecks.de (=?ISO-8859-1?Q?Martin_M=F6llenbeck?=)
Date: Fri, 16 Sep 2005 21:49:34 +0200
Subject: [Twisted-Python] Is it possible to use ReconnectingClientFactory
	with pb.ClientFactory
Message-ID: <6F0E2882-2896-4E0F-9ACB-21C9B8FA26D5@moellenbecks.de>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hello,

Is it possible to use ReconnectingClientFactory with pb.ClientFactory?

Are there any side effects?

Any tips?

Ciao, Martin
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFDKyHPiJE4wzxJLBwRAt4eAJ0QjroYjNUWmb2QNgrKCR7JqhsfSQCgji0k
QiVQnvgLnAFsVggCITg+9/A=
=p2d+
-----END PGP SIGNATURE-----



From warner at lothar.com  Fri Sep 16 21:25:27 2005
From: warner at lothar.com (Brian Warner)
Date: Fri, 16 Sep 2005 18:25:27 -0700 (PDT)
Subject: [Twisted-Python] Is it possible to use
	ReconnectingClientFactory with pb.ClientFactory
Message-ID: <20050916.182527.81755938.warner@lothar.com>

Martin M?llenbeck <martin at moellenbecks.de> writes:
>
> Is it possible to use ReconnectingClientFactory with pb.ClientFactory?

Sure thing. I have a utility class that does this.. take a look at
ReconnectingPBClientFactory in the Buildbot (http://buildbot.sf.net) source
tree, current CVS version is:

 http://cvs.sourceforge.net/viewcvs.py/buildbot/buildbot/buildbot/pbutil.py?rev=1.10&view=auto

The only catch is to realize that pb.ClientFactory's getRootObject() and
login() methods return a single-use Deferred, and if you're reconnecting all
the time, you need something that can be fired multiple times. So
ReconnectingPBClientFactory offers a gotRootObject()/gotPerspective() method,
which are invoked each time the connection is established. You have to
override one of these in your subclass. If you're using cred, you override
gotPerspective() (and also call startLogin() or getPerspective() to start the
process, for newcred and oldcred respectively). If you aren't using cred at
all, you just override gotRootObject().

If you grep around the rest of the buildbot you can find an example of how
this factory gets used. I think buildbot.slave.bot.BotFactory is useful: it
includes a keepalive timer that pings the other end and abandons the
connection (thus triggering a reconnect) if the ping is lost. I added this to
deal with some buildslaves that were behind NAT boxes which timed out their
connection table after 10 minutes of inactivity: the symptom was that both
ends thought the connection was still established, no FINs had been seen, but
no packets could get from one side to the other. Sending a ping every 9
minutes tended to keep the connection table entry alive, while dropping the
connection if the ping got lost helped trigger a reconnect when that
keepalive failed.


cheers,
 -Brian



From scott.xiao at 163.com  Fri Sep 16 23:02:54 2005
From: scott.xiao at 163.com (=?gb2312?B?c2NvdHQueGlhbw==?=)
Date: Sat, 17 Sep 2005 11:02:54 +0800 (CST)
Subject: =?gb2312?B?UmU6IFJlOiBbVHdpc3RlZC1QeXRob25dIElzIGl0IHBvc3NpYmxlIHQ=?=
	=?gb2312?B?byB1c2UgUmVjb25uZWN0aW5nQ2xpZW50RmFjdG9yeSB3aXRoIHBiLkM=?=
	=?gb2312?B?bGllbnRGYWN0b3J5?=
Message-ID: <432B875E.0000F2.32662@bj163app35.163.com>

Sorry, I am not clear about that, could you have a look of my question?
    
    I have installed Twisted in my Linux system, when I install punjab, 
    #mktap punjab --port=5280 --host=xm.com --xmlrpc=1 --httpp=1 --httpb=1 --soap=1 --html_dir="./html"
    That warning happened
    /usr/local/lib/python2.4/site-packages/punjab/plugins.tml:3: DeprecationWarning: The twisted.python.plugin system is deprecated. See twisted.plugin for the revised edition.
   type='tap', tapname='punjab')


   I want know: what's the reason, how and where can I get the revised edition???


Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050917/ee491d59/attachment.htm 

From sergtrejo at gmail.com  Sat Sep 17 08:04:33 2005
From: sergtrejo at gmail.com (Sergio Trejo)
Date: Sat, 17 Sep 2005 02:04:33 -1000
Subject: [Twisted-Python] Re: O'Reilly book on Twisted
In-Reply-To: <200509151449.51384.alessandro-bottoni@libero.it>
References: <200509141838.59624.alessandro-bottoni@libero.it>
	<dg9q63$6qj$1@sea.gmane.org> <432969BF.1040009@fettig.net>
	<200509151449.51384.alessandro-bottoni@libero.it>
Message-ID: <7c3d6936050917050430df1df8@mail.gmail.com>

Yes, a Twisted book is looooonnnnng overdue and hats off to Abe Fettig
for coming through.

Congrats!

-Serg

On 9/15/05, Alessandro Bottoni <alessandro-bottoni at libero.it> wrote:
> Abe,
> I want to thank you for having written this book.
> 
> Despite its elegant structure, Twisted is still hard to understand at first.
> Your book will help us a lot in using this nice framework.
> 
> Thanks again
> -----------------------------
> Alessandro Bottoni
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From general at eepatents.com  Sat Sep 17 20:31:12 2005
From: general at eepatents.com (Ed Suominen)
Date: Sat, 17 Sep 2005 17:31:12 -0700
Subject: [Twisted-Python] Re: O'Reilly book on Twisted
In-Reply-To: <E1EGgys-0002FN-02@pyramid.twistedmatrix.com>
References: <E1EGgys-0002FN-02@pyramid.twistedmatrix.com>
Message-ID: <1127003472.8355.62.camel@207-118-93-73.stat.centurytel.net>

I completely agree, and I've got my copy of the book back ordered via
the O'Reilley site. I'm really looking forward to seeing it in a month
or so!

Ed Suominen

On Sat, 2005-09-17 at 12:00 -0600,
twisted-python-request at twistedmatrix.com wrote:
> From: Sergio Trejo <sergtrejo at gmail.com>
> Subject: Re: [Twisted-Python] Re: O'Reilly book on Twisted
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID: <7c3d6936050917050430df1df8 at mail.gmail.com>
> Content-Type: text/plain; charset=ISO-8859-1
> 
> Yes, a Twisted book is looooonnnnng overdue and hats off to Abe Fettig
> for coming through.
> 
> Congrats!
> 
> -Serg
> 
> On 9/15/05, Alessandro Bottoni <alessandro-bottoni at libero.it> wrote:
> > Abe,
> > I want to thank you for having written this book.
> > 
> > Despite its elegant structure, Twisted is still hard to understand
> at first.
> > Your book will help us a lot in using this nice framework.
> > 
> > Thanks again
> > -----------------------------
> > Alessandro Bottoni
> > 




From daedalus at eigenmagic.com  Sun Sep 18 20:58:25 2005
From: daedalus at eigenmagic.com (Justin Warren)
Date: Mon, 19 Sep 2005 10:58:25 +1000
Subject: [Twisted-Python] Hints for twisted newbie presentation
Message-ID: <1127091505.6583.14.camel@localhost.localdomain>

Hi list,

In a fit of rash volunteerism, I offered to give a talk on Twisted at
the upcoming Open Source Developers Conference here in melbourne.au. I
gave a hastily thrown together talk at the local Python user's group a
couple of months back (wiki linkage:
http://wiki.python.org/moin/MelbournePUG ) but I'd like to refine it a
fair bit before presenting to a wider audience. I'm also most familiar
with v1.3 rather than the newish v2.0.

What do people think are the most important things that a newbie to
Twisted should know about? I'm trying to focus on those little things
that spark an Aha! moment where you really how cool something is and
think "Why didn't I do this ages ago?" For me that was finally grokking
Deferreds and the whole asynchronous event processing style of doing
things as compared to threading.

What are the things you wish someone had told you about early on in
learning Twisted? What are the biggest timesavers for you? What do you
think is the most powerful?

Any help would be much appreciated, since I'm just a twisted-weenie
compared to a lot of you folks on list.

As an aside, awesome cover for the upcoming O'Reilly book. :)

-- 
Justin Warren <daedalus at eigenmagic.com>




From Henning.Ramm at mediapro-gmbh.de  Mon Sep 19 16:09:40 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Mon, 19 Sep 2005 22:09:40 +0200
Subject: [Twisted-Python] Hints for twisted newbie presentation
Message-ID: <F92274058556DE42B94B148EEFB91839021CB576@exchange-03.suedkurier.de>

>What do people think are the most important things that a newbie to
>Twisted should know about?

Being rather newbie to twisted myself (but mostly started at 2.0), my 2c:

I guess there are two approaches:
1. Water their mouths with what a lot of great stuff twisted can do.
2. Give an introduction to asynchronous programming and Deferreds.

Both is necessary, but I don't know if you'll have enough time to cover both.
The way from "start with & understanding Deferreds" to "doing great client/server stuff" is not long but rather steep.

I'd warn my auditory of that slope and hope that good programmers will feel stimulated to try it and bad programmers will get discouraged (to keep them away from the "support hotline" of irc and ml). ;-)

So your goal would be to show that the effort is worth trying, but don't advertise an "easy & almighty framework", even if it may be easy, as soon as you managed to wrap your mind around twisted. (I didn't get that far yet.)

HTH

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From radeex at gmail.com  Mon Sep 19 19:13:06 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 20 Sep 2005 09:13:06 +1000
Subject: [Twisted-Python] Hints for twisted newbie presentation
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB576@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB91839021CB576@exchange-03.suedkurier.de>
Message-ID: <60ed19d40509191613db6fdb2@mail.gmail.com>

On 9/20/05, Henning.Ramm at mediapro-gmbh.de <Henning.Ramm at mediapro-gmbh.de> wrote:
> >What do people think are the most important things that a newbie to
> >Twisted should know about?
> 
> Being rather newbie to twisted myself (but mostly started at 2.0), my 2c:
> 
> I guess there are two approaches:
> 1. Water their mouths with what a lot of great stuff twisted can do.
> 2. Give an introduction to asynchronous programming and Deferreds.
> 
> Both is necessary, but I don't know if you'll have enough time to cover both.
> The way from "start with & understanding Deferreds" to "doing great client/server stuff" is not long but rather steep.

I would suggest, given the audience, I think the former is more
appropriate. This isn't a group of Python programmers, it's a group of
"open source" programmers. So the code examples probably ought to
become a bit less heavy than those dense screenshots of emacs ;-).

I also suggest showing a bunch of cool uses of Twisted, and perhaps a
high-level explanation of why Twisted is asynchronous instead of
threaded, and so forth.

off-the-top-of-my-head,-now-I'll-get-back-to-work-ly,
-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From mikah at ceruleansoftware.com  Tue Sep 20 03:36:18 2005
From: mikah at ceruleansoftware.com (mikah at ceruleansoftware.com)
Date: Tue, 20 Sep 2005 15:36:18 +0800
Subject: [Twisted-Python] Re: ReconnectingClientFactory creates multiple
	Protocols? (clarification)
In-Reply-To: <E1EFy1o-0000xz-02@pyramid.twistedmatrix.com>
References: <E1EFy1o-0000xz-02@pyramid.twistedmatrix.com>
Message-ID: <20050920073618.GA29069@ceruleansoftware.com>

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> mikah at ceruleansoftware.com wrote:
> >   As far as I can tell, it's related to the connection being
> > dropped, at which point the Factory reconnects and creates a
> > new protocol instance.
> 
> Protocols (at least, when used with TCP) are designed so that their
> lifetime matches that of the TCP connection they are handling. As a
> result, when the connection is lost and the factory reconnects, this is
> a new TCP connection with a new protocol. This is why there's a factory,
> to manage data and logic that is not tied to a specific TCP connection
> (e.g. "should I reconnect?" or "how far along was the download when I
> got disconnected.")
> 
> In general you'd want to use the factory to store state that needs to
> last past the lifetime of the protocol. You can, of course, have
> buildProtocol always return the same instance, but that's pretty ugly
> and can easily lead to obscure bugs if you don't clean up the state
> correctly.

Itamar,

  Thanks for the reply. I think I have to clarify though, I
wasn't very clear describing the situation -- my problem isn't
that the RCFactory creates protocols on the fly, it's that
after disconnecting/reconnecting, the old protocol instance
seems to be still active! After the server has run a few days,
I start seeing a handful of protocol instances. I know they
aren't the same protocol because I can tell them apart from the
data they write to the log file.

  Only one of the protocols is actually connected to the remote
host, that much I can say. It's the 'newest' one (I hope). The
other instances are not connected but they attempt to send
requests anyway, and worse, continue to pull tasks out of the
task queue. So I end up with a bunch of tasks that never get
acted on because the protocols can't service them without a
connection.

  My question is: when an RCFactory makes a new protocol
instance, is the old one supposed to be deleted and cleaned
up?

  Everything hinges on this, pretty much. If the answer is yes,
then I'm doing something wrong because mine aren't getting
cleaned up. If the answer is no, then I must somehow take
responsibility for preventing the old instances from trying to
do work when they shouldn't, and somehow delete them.

  I have some related questions if someone would like to answer
them ... (1) is there a proper way for me to disconnect a
connected protocol and then stop its factory from reconnecting
and (2) start the factory connecting again at some time in the
future?

  I've found several ways to do this, but they seem kludgy and
not quite correct ...


  Thanks in advance!

Mikah

--




From exarkun at divmod.com  Tue Sep 20 04:07:12 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 20 Sep 2005 04:07:12 -0400
Subject: [Twisted-Python] Re: ReconnectingClientFactory creates multiple
	Protocols? (clarification)
In-Reply-To: <20050920073618.GA29069@ceruleansoftware.com>
Message-ID: <20050920080712.3914.889614784.divmod.quotient.18783@ohm>

On Tue, 20 Sep 2005 15:36:18 +0800, mikah at ceruleansoftware.com wrote:
>Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>> mikah at ceruleansoftware.com wrote:
>> >   As far as I can tell, it's related to the connection being
>> > dropped, at which point the Factory reconnects and creates a
>> > new protocol instance.
>>
>> Protocols (at least, when used with TCP) are designed so that their
>> lifetime matches that of the TCP connection they are handling. As a
>> result, when the connection is lost and the factory reconnects, this is
>> a new TCP connection with a new protocol. This is why there's a factory,
>> to manage data and logic that is not tied to a specific TCP connection
>> (e.g. "should I reconnect?" or "how far along was the download when I
>> got disconnected.")
>>
>> In general you'd want to use the factory to store state that needs to
>> last past the lifetime of the protocol. You can, of course, have
>> buildProtocol always return the same instance, but that's pretty ugly
>> and can easily lead to obscure bugs if you don't clean up the state
>> correctly.
>
>Itamar,
>
>  Thanks for the reply. I think I have to clarify though, I
>wasn't very clear describing the situation -- my problem isn't
>that the RCFactory creates protocols on the fly, it's that
>after disconnecting/reconnecting, the old protocol instance
>seems to be still active! After the server has run a few days,
>I start seeing a handful of protocol instances. I know they
>aren't the same protocol because I can tell them apart from the
>data they write to the log file.
>
>  Only one of the protocols is actually connected to the remote
>host, that much I can say. It's the 'newest' one (I hope). The
>other instances are not connected but they attempt to send
>requests anyway, and worse, continue to pull tasks out of the
>task queue. So I end up with a bunch of tasks that never get
>acted on because the protocols can't service them without a
>connection.
>
>  My question is: when an RCFactory makes a new protocol
>instance, is the old one supposed to be deleted and cleaned
>up?
>
>  Everything hinges on this, pretty much. If the answer is yes,
>then I'm doing something wrong because mine aren't getting
>cleaned up. If the answer is no, then I must somehow take
>responsibility for preventing the old instances from trying to
>do work when they shouldn't, and somehow delete them.

To some minor extent, yes.  Completely and totally?  No.  For example, if you have a delayed call which invokes a method on the protocol instance, this will still occur.

>
>  I have some related questions if someone would like to answer
>them ... (1) is there a proper way for me to disconnect a
>connected protocol and then stop its factory from reconnecting
>and (2) start the factory connecting again at some time in the
>future?
>

When the connection is lost, "connectionLost" is called on the protocol and "clientConnectionLost" is called on the factory.  Use one or both of these hooks to clean up after your now defunct protocol.

Jp



From web at anand-fr.net  Tue Sep 20 14:37:40 2005
From: web at anand-fr.net (Anand)
Date: Tue, 20 Sep 2005 18:37:40 +0000 (UTC)
Subject: [Twisted-Python] Resource instanciated and never destroyed ?
Message-ID: <loom.20050920T202628-62@post.gmane.org>

Hi,

I'm using twisted+web (2.0.1) + Nevow (0.4.1) for building a web application.

My web application is inside a "Realm" for handling user authentication.

When an url is requested for a logged in user, this is handled by a resource
called "LoggedIn", which is a nevow rend.Page subclass.
LoggedIn redefines the locateChildMethod. 
That method instanciates and returns a resource object , which can be of any
specific class which I have defined. My resource classes are subclasses of
rend.Page.

I've noticed, putting traces in __init__ and __del__ methods of my resource
classes, that resource objects which are instanciated are never destroyed.
As as consequences, the python process ends up eating up a lot of memory.

I guess I might do something the wrong way. 
I would like to know how resource object can be automatically destroyed after a
page has been rendered by Nevow + twisted web.

Thank you for your help 

Anand







From exarkun at divmod.com  Tue Sep 20 17:45:22 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 20 Sep 2005 17:45:22 -0400
Subject: [Twisted-Python] Resource instanciated and never destroyed ?
In-Reply-To: <loom.20050920T202628-62@post.gmane.org>
Message-ID: <20050920214522.3914.1055302029.divmod.quotient.19026@ohm>

On Tue, 20 Sep 2005 18:37:40 +0000 (UTC), Anand <web at anand-fr.net> wrote:
>Hi,
>
>I'm using twisted+web (2.0.1) + Nevow (0.4.1) for building a web application.
>
>My web application is inside a "Realm" for handling user authentication.
>
>When an url is requested for a logged in user, this is handled by a resource
>called "LoggedIn", which is a nevow rend.Page subclass.
>LoggedIn redefines the locateChildMethod.
>That method instanciates and returns a resource object , which can be of any
>specific class which I have defined. My resource classes are subclasses of
>rend.Page.
>
>I've noticed, putting traces in __init__ and __del__ methods of my resource
>classes, that resource objects which are instanciated are never destroyed.
>As as consequences, the python process ends up eating up a lot of memory.
>
>I guess I might do something the wrong way.
>I would like to know how resource object can be automatically destroyed after a
>page has been rendered by Nevow + twisted web.
>
>Thank you for your help
>

  Instrumenting object lifetime using __del__ alters behavior.  Adding a __del__ method is not a valid way to determine the end of an object's lifetime.

  Nevow 0.4.1 had an egregious Page leak which has since been fixed.  You can test to see if this is the leak you are experiencing by finding all occurrences of adaption which use the callable interface form and which pass "persist=True" and removing the persist parameter.  You could also try switching to a newer version of Nevow, though there is no release of such a thing.

  There is a mailing list dedicated to Twisted Web (<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web>) to which I have copied this response.  Please continue this thread there.

  Jp



From foom at fuhm.net  Wed Sep 21 02:01:05 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 21 Sep 2005 00:01:05 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EHxfF-0006oc-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-09-14 06:00:02.790000:
 Bugs opened: 33   Bugs closed: 7   Total open bugs: 449 (+26)
  Urgent: 6 (-5)
  Bug: 207 (+22)
  Feature: 158 (+5)
  Wish: 78 (+4)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[CORE, TRIAL] REGR: "trial -R twisted" fails  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1175 opened by exarkun

                    ==== Bug ====
[CORE] iocpreactor and Visual C++ 6  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1174 opened by Toby Dickenson

[CORE, TRIAL] twisted.test.test_tcp.PortCleanerUpper is extremely confused  (yesterday)
       http://twistedmatrix.com/bugs/issue1181 opened by exarkun

[DOCUMENTATION, WEB, WEBSITE] http://twistedmatrix.com/products/web has a broken link to docs.  (yesterday)
       http://twistedmatrix.com/bugs/issue1204 opened by spiv

[CORE, TRIAL] twisted.test.test_factories calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1196 opened by exarkun

[CORE, TRIAL] twisted.test.test_threads calls reactor.iterate()  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1193 opened by exarkun

[CORE, TRIAL] twisted.test.test_task calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1198 opened by exarkun

[ENTERPRISE] adbpai's runQuery and runOperation do not detail enough in error reports  (yesterday)
       http://twistedmatrix.com/bugs/issue1182 opened by moof

[MAIL, TRIAL] twisted.mail.test.test_mail calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1202 opened by exarkun

[CORE, TRIAL] twisted.test.test_udp calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1201 opened by exarkun

[CORE, TRIAL] twisted.test.test_internet calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1200 opened by exarkun

twisted.test.test_protocols calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1199 opened by exarkun

[CORE, TRIAL] twisted.test.test_tcp calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1197 opened by exarkun

[CORE, TRIAL] twisted.test.test_pb calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1195 opened by exarkun

[CORE, TRIAL] twisted.test.test_sip calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1194 opened by exarkun

[CORE, TRIAL] twisted.test.test_policies calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1192 opened by exarkun

[TRIAL, WEB] twisted.web.test.test_xmlrpc calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1191 opened by exarkun

[TRIAL, WEB] twisted.web.test.test_soap calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1190 opened by exarkun

[TRIAL, WEB] twisted.web.test.test_woven calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1189 opened by exarkun

[TRIAL, WEB] twisted.web.test.test_webclient calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1188 opened by exarkun

[NEWS, TRIAL] twisted.news.test.test_news calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1187 opened by exarkun

[TRIAL, WEB] twisted.web2.test.test_http calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1186 opened by exarkun

[CONCH, TRIAL] twisted.conch.test.test_recvline calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1185 opened by exarkun

[CONCH, TRIAL] twisted.conch.test.test_mixin calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1184 opened by exarkun

[CONCH, TRIAL] test_conch calls reactor.iterate() in two places  (yesterday)
       http://twistedmatrix.com/bugs/issue1183 opened by exarkun

                    ==== Feature ====
[DOCUMENTATION, TRIAL] HOWTO: Extending Trial  (2 days ago)
       http://twistedmatrix.com/bugs/issue1178 opened by jml

[TRIAL] Benchmarking Support for Trial  (2 days ago)
       http://twistedmatrix.com/bugs/issue1177 opened by jml

[DOCUMENTATION, WEB] A t.web glossary is needed  (2 days ago)
       http://twistedmatrix.com/bugs/issue1176 opened by tenshihan

[APPLICATION] pickling protocol in sob  (5 days ago)
       http://twistedmatrix.com/bugs/issue1173 opened by antony

[DOCUMENTATION, TRIAL] Draft release notes for the recent and upcoming Trial changes  (6 days ago)
       http://twistedmatrix.com/bugs/issue1172 opened by jml

                    ==== Wish ====
web2.stream.IStream.read() needs to take a length argument  (yesterday)
       http://twistedmatrix.com/bugs/issue1203 opened by PenguinOfDoom

[CONCH, TRIAL] Nasty file handling in test_filetransfer and test_cftp  (yesterday)
       http://twistedmatrix.com/bugs/issue1179 opened by exarkun

[CONCH, TRIAL] test_cftp shouldn't manually iterate the reactor  (yesterday)
       http://twistedmatrix.com/bugs/issue1180 opened by exarkun

Bugs Closed
______________________
                    ==== Urgent ====
[CORE, TRIAL] REGR: "trial -R twisted" fails  (3 days ago)
       http://twistedmatrix.com/bugs/issue1175 opened by exarkun, closed by exarkun

[TRIAL] trial --testmodule no longer runs any tests  (1 week ago)
       http://twistedmatrix.com/bugs/issue1170 opened by spiv, closed by jml

                    ==== Bug ====
[CORE] iocpreactor and Visual C++ 6  (4 days ago)
       http://twistedmatrix.com/bugs/issue1174 opened by Toby Dickenson, closed by PenguinOfDoom

[CORE, TRIAL] twisted.test.test_threads calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1193 opened by exarkun, closed by warner

[CORE] invalid path names in plugin system  (1 week ago)
       http://twistedmatrix.com/bugs/issue1169 opened by antony, closed by exarkun

[TRIAL] Trial raises "whoop whoop" error when given a filename  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1159 opened by jml, closed by jml

                    ==== Wish ====
[TRIAL] trial doesn't search for TestCases in the most ideal way possible  (1 week ago)
       http://twistedmatrix.com/bugs/issue1166 opened by exarkun, closed by jml




From Henning.Ramm at mediapro-gmbh.de  Wed Sep 21 18:00:32 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Thu, 22 Sep 2005 00:00:32 +0200
Subject: [Twisted-Python] How to write a simple telnet client?
Message-ID: <F92274058556DE42B94B148EEFB91839021CB57D@exchange-03.suedkurier.de>

Hi ho!

I need to integrate a simple telnet client into one of my programs to execute a command on an other machine and collect the response.

Probably I'm blind, because I didn't find out how to use twisted's telnet protocol for such a client (I know how to setup a server).
Could someone please give me a kick?

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From ajchos at wp.pl  Thu Sep 22 03:25:21 2005
From: ajchos at wp.pl (=?iso-8859-2?Q?Micha=B3?= Tyde)
Date: Thu, 22 Sep 2005 09:25:21 +0200
Subject: [Twisted-Python] Re: [Python-Twisted] How to write a simple telnet
	client?
Message-ID: <1127373921.2881.8.camel@localhost.localdomain>

Please look at my posts from 11.08.2005 - What is wrong with this
instance (topic). I have send there a code of my telnet client. I don't
remember what was wrong, but i solve most of problems, so if you had any
questions e-mail me. I think that my code is what You need. This is a
very simple client and i have developed him.




From mszumocki at contman.pl  Thu Sep 22 04:59:13 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Thu, 22 Sep 2005 10:59:13 +0200
Subject: [Twisted-Python] internet.TimerSevice in twisted.scripts.twistw
In-Reply-To: <E1EI8t4-000502-03@pyramid.twistedmatrix.com>
Message-ID: <20050922085913.fcc6b752@poczta.contman.pl>

Hello,

 Just a question that has been bugging me and i can't figure out the answer on my own.
 Why is there a line like this in python.scripts._twistw runApp:

    app.startApplication(internet.TimerService(0.1, lambda:None), 0)

 while there is no such thing in python.scripts.twistd? Is it some Windows-specific
 workaround i need to worry about if i run my application without using twistd?

Maciej Szumocki



From andrew-twisted at puzzling.org  Thu Sep 22 05:19:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 22 Sep 2005 19:19:53 +1000
Subject: [Twisted-Python] internet.TimerSevice in twisted.scripts.twistw
In-Reply-To: <20050922085913.fcc6b752@poczta.contman.pl>
References: <E1EI8t4-000502-03@pyramid.twistedmatrix.com>
	<20050922085913.fcc6b752@poczta.contman.pl>
Message-ID: <20050922091953.GJ7698@trogdor.home.puzzling.org>

On Thu, Sep 22, 2005 at 10:59:13AM +0200, Maciej Szumocki wrote:
> Hello,
> 
>  Just a question that has been bugging me and i can't figure out the answer on my own.
>  Why is there a line like this in python.scripts._twistw runApp:
> 
>     app.startApplication(internet.TimerService(0.1, lambda:None), 0)
> 
>  while there is no such thing in python.scripts.twistd? Is it some Windows-specific
>  workaround i need to worry about if i run my application without using twistd?

This seems to be a work around for the problem that Ctrl-C doesn't interrupt
select on win32, so the event loop needs to be periodically woken up to give
python a chance to process signals.

However, the select reactor and win32 reactor at least already have
workarounds for this, so I'm not sure why twistw bothers.

-Andrew.




From joy at softmonsters.com  Thu Sep 22 17:36:09 2005
From: joy at softmonsters.com (joy ping)
Date: Thu, 22 Sep 2005 23:36:09 +0200
Subject: [Twisted-Python] twisted.internet.serialport
Message-ID: <433323C9.4050500@softmonsters.com>

hi list,
i just did a search for a framwork which would be good for a to be
written application which controlls serialports over webinterfaces. i
found that twisted would be ideal for this. i started to write some code
with mod_phyton but as threading+pyserial+apache didn't worked i had a
closer look at twisted. it seems cool cause it's async. no real need for
threads here. and with twisted-web and livepages some kind of
persistance could be achived. but at the end i found not really much
documentation especially about twisted.serialport and nevow which i
would use as app-server. can someone point me to some docs if they
exists beside the the api-docs.

thanks

zsolt



From exarkun at divmod.com  Fri Sep 23 01:00:19 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 23 Sep 2005 01:00:19 -0400
Subject: [Twisted-Python] twisted.internet.serialport
In-Reply-To: <433323C9.4050500@softmonsters.com>
Message-ID: <20050923050019.3914.636386210.divmod.quotient.20168@ohm>

On Thu, 22 Sep 2005 23:36:09 +0200, joy ping <joy at softmonsters.com> wrote:
>hi list,
>i just did a search for a framwork which would be good for a to be
>written application which controlls serialports over webinterfaces. i
>found that twisted would be ideal for this. i started to write some code
>with mod_phyton but as threading+pyserial+apache didn't worked i had a
>closer look at twisted. it seems cool cause it's async. no real need for
>threads here. and with twisted-web and livepages some kind of
>persistance could be achived. but at the end i found not really much
>documentation especially about twisted.serialport and nevow which i
>would use as app-server. can someone point me to some docs if they
>exists beside the the api-docs.

<http://twistedmatrix.com/projects/core/documentation/examples/mouse.py> is an example of handling mouse input using Twisted.

<http://twistedmatrix.com/projects/core/documentation/examples/gpsfix.py> is an example of getting data from a particular kind of GPS device.

As for Nevow and LivePage, you're probably better off asking on the twisted-web mailing list (<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web>), but you can find examples of LivePage usage at <http://divmod.org/svn/Nevow/trunk/examples/chatola/>, <http://divmod.org/svn/Nevow/trunk/examples/liveanimal/>, and <http://divmod.org/svn/Nevow/trunk/examples/livepage/> (although that API is about to be replaced with a simpler one).

Jp



From Henning.Ramm at mediapro-gmbh.de  Fri Sep 23 13:38:11 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Fri, 23 Sep 2005 19:38:11 +0200
Subject: [Twisted-Python] RE: [Python-Twisted] How to write a simple telnet
	client?
Message-ID: <F92274058556DE42B94B148EEFB91839021CB580@exchange-03.suedkurier.de>

>Please look at my posts from 11.08.2005 - What is wrong with this
>instance (topic). I have send there a code of my telnet client. I don't
>remember what was wrong, but i solve most of problems, so if 
>you had any
>questions e-mail me. I think that my code is what You need. This is a
>very simple client and i have developed him.

I played around with your code at http://twistedmatrix.com/pipermail/twisted-python/2005-August/011115.html, even if I don't understand polish. ;-)

I didn't expect that one must handle control codes (your function reponseFunct), I expected the protocol to handle that for me, but anyway, that was no problem (i.e. you solved it before). And with your code I could even switch off the echo (your next thread).

What I don't understand is how to 'inject' some commands and collect their result.
What you tried in your "command" function in __main__ can't work, because the protocol has no transport.
I don't understand how to get at the Factory's actual protocol instance and its transport.

I could 'hardcode' a list of commands in my protocol class, but that would make no sense...

Probably I shouldn't use a ClientFactory but something else.

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From exarkun at divmod.com  Fri Sep 23 15:38:59 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 23 Sep 2005 15:38:59 -0400
Subject: [Twisted-Python] RE: [Python-Twisted] How to write a simple
	telnet client?
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB580@exchange-03.suedkurier.de>
Message-ID: <20050923193859.3914.1560733094.divmod.quotient.20552@ohm>

On Fri, 23 Sep 2005 19:38:11 +0200, henning.ramm at mediapro-gmbh.de wrote:
>>Please look at my posts from 11.08.2005 - What is wrong with this
>>instance (topic). I have send there a code of my telnet client. I don't
>>remember what was wrong, but i solve most of problems, so if
>>you had any
>>questions e-mail me. I think that my code is what You need. This is a
>>very simple client and i have developed him.
>
>I played around with your code at http://twistedmatrix.com/pipermail/twisted-python/2005-August/011115.html, even if I don't understand polish. ;-)
>
>I didn't expect that one must handle control codes (your function reponseFunct), I expected the protocol to handle that for me, but anyway, that was no problem (i.e. you solved it before). And with your code I could even switch off the echo (your next thread).

You don't actually have to do this.  You can implement iac_DO, iac_DONT, iac_WILL, and iac_WONT to handle feature negotiation.

You can also use twisted.conch.telnet, which presents a slightly more complete API for feature negotiation.

>
>What I don't understand is how to 'inject' some commands and collect their result.
>What you tried in your "command" function in __main__ can't work, because the protocol has no transport.
>I don't understand how to get at the Factory's actual protocol instance and its transport.

Factory's don't have protocol instances, in general.  A factory is responsible for creating between zero and an unlimited number of instances of a protocol, as they are demanded by established connections.

Protocol.connectionMade is provided as a hook for application-level logic.  You may want to send your commands from that method.  When it is invoked, you will have a transport.

Jp



From garanin at m-lan.ru  Fri Sep 23 17:18:26 2005
From: garanin at m-lan.ru (Garanin Michael)
Date: Sat, 24 Sep 2005 01:18:26 +0400
Subject: [Twisted-Python] zope.component or twisted.python.components
Message-ID: <1127510306.5132.11.camel@localhost>

                                                                          
Hello!
I am twisted-newcomer, and i try ported my Zope3 application to
twisted+nevow. Can i use zope.components package from Zope3 (only for my
objects of course) instead   twisted.python.components, is it legal? 





From exarkun at divmod.com  Fri Sep 23 17:32:04 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 23 Sep 2005 17:32:04 -0400
Subject: [Twisted-Python] zope.component or twisted.python.components
In-Reply-To: <1127510306.5132.11.camel@localhost>
Message-ID: <20050923213204.3914.830329341.divmod.quotient.20585@ohm>

On Sat, 24 Sep 2005 01:18:26 +0400, Garanin Michael <garanin at m-lan.ru> wrote:
>
>Hello!
>I am twisted-newcomer, and i try ported my Zope3 application to
>twisted+nevow. Can i use zope.components package from Zope3 (only for my
>objects of course) instead   twisted.python.components, is it legal?
>

The only constraint in place is that if you pass an object to someone else's code (for example, to Twisted), it behaves as they expect it to.

I doubt many people have tried this (or at least, they have not talked about it), but there should be no categorical reason for it to fail.  Let us know if you run into any problems that you think represent unreasonable incompatibilities.

Jp



From jml at mumak.net  Sat Sep 24 08:36:21 2005
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 24 Sep 2005 22:36:21 +1000
Subject: [Twisted-Python] twisted.trial.assertions is now deprecated.
Message-ID: <d06a5cd305092405361c883705@mail.gmail.com>

Hello,

As part of the on-going maintenance of Trial, I have deprecated the
assertions module.  All people writing unit tests are advised to use
the assertion methods on unittest.TestCase.

I would appreciate some help in updating Twisted's tests.

cheers,
jml



From pegazik at gmail.com  Sat Sep 24 08:43:09 2005
From: pegazik at gmail.com (Krzysztof Nowak)
Date: Sat, 24 Sep 2005 14:43:09 +0200
Subject: [Twisted-Python] Twisted.web signal handling
Message-ID: <cc4a20de05092405435742ca9e@mail.gmail.com>

Hello. I wrote a simple application using twisted.web. One of activity
of my program is to contacting with some other processes. I need some
timeout to perform this activity. The structure of my program looks
like this:

/////////////////////////////////////////////////////////////////////////////////////
def TimeoutHandler(pid):
    os.kill(pid, signal.SIGUSR1)

def handler():
    raise ConnectionError

signal.signal(signal.SIGUSR1, handler)
MyPID = os.getpid()

def HistosRendering:
        timer = threading.Timer(0.001, TimeoutHandler, [MyPID])
        timer.start()
        try:
            <Some activity that need timeout>
        except ConnectionError:
            <In case of timeout>
            return
        else:
            timer.cancel()

class Resource(resource.Resource):
    def render(self, request):
        HistosRender()

resource = Resource()
/////////////////////////////////////////////////////////////////////////////////////

Unfortunately, there is something wrong, cause in case of timeout I am
receiving error message, the TimeoutHandler is activated (in the Timer
thread), but handler() in the main thread is not activated.
I am using this kind of commands to start a server:
> mktap web --path /www/ --port 8081
> twistd -f web.tap
Maybe I should somehow "turn on" handling of signals?

Do you see any solution?

Thanks in advance,
Krzysztof Nowak

From exarkun at divmod.com  Sat Sep 24 11:25:04 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 24 Sep 2005 11:25:04 -0400
Subject: [Twisted-Python] Twisted.web signal handling
In-Reply-To: <cc4a20de05092405435742ca9e@mail.gmail.com>
Message-ID: <20050924152504.3914.1020640885.divmod.quotient.20785@ohm>

On Sat, 24 Sep 2005 14:43:09 +0200, Krzysztof Nowak <pegazik at gmail.com> wrote:
>Hello. I wrote a simple application using twisted.web. One of activity
>of my program is to contacting with some other processes. I need some
>timeout to perform this activity. The structure of my program looks
>like this:

Timeouts should be managed using twisted.internet.reactor.callLater().

>
>/////////////////////////////////////////////////////////////////////////////////////
>def TimeoutHandler(pid):
>    os.kill(pid, signal.SIGUSR1)

twistd uses SIGUSR1 for logfile rotation.  Your handler is probably getting clobbered.

>
>def handler():
>    raise ConnectionError
>
>signal.signal(signal.SIGUSR1, handler)
>MyPID = os.getpid()
>

Depending on exactly where this code is run, this is probably the wrong PID.  twistd daemonizes, which involves forking and exiting in the parent.  If your code is imported before daemonization happens, the above will retrieve the PID of the parent, which will not be your PID at any time during the actual operation of your program.

>def HistosRendering:
>        timer = threading.Timer(0.001, TimeoutHandler, [MyPID])
>        timer.start()
>        try:
>            <Some activity that need timeout>
>        except ConnectionError:
>            <In case of timeout>
>            return
>        else:
>            timer.cancel()

Why aren't you using Twisted to handle this connection attempt?  The threading.Timer/signal/raise combo is a very bad way to manage timeouts.  Twisted provides much better ways.

Also, there is a race condition between the end of your try suite and the timer.cancel() call.  The exception could be raised after the else suite is entered but before the timer is actually cancelled.

>
>class Resource(resource.Resource):
>    def render(self, request):
>        HistosRender()

You are blocking the entire process for the during of the render() call.  This is another reason not to make whatever synchronous connection attempt you are making and instead use something Twisted provides.  No other activities can occur, process-wide, while your code is running.  If this is a multiuser application, *everyone* using it will experience periods of unresponsiveness when *anyone* causes blocking code to run.

>
>resource = Resource()
>/////////////////////////////////////////////////////////////////////////////////////
>
>Unfortunately, there is something wrong, cause in case of timeout I am
>receiving error message, the TimeoutHandler is activated (in the Timer
>thread), but handler() in the main thread is not activated.
>I am using this kind of commands to start a server:
>> mktap web --path /www/ --port 8081
>> twistd -f web.tap
>Maybe I should somehow "turn on" handling of signals?
>
>Do you see any solution?

The main thing to figure out is how to rewrite the operation which you wish to timeout so that it is asynchronous and easily cancellable.  Then all the signal related difficulties will disappear.

Jp



From drakesmith at adelphia.net  Sat Sep 24 11:33:50 2005
From: drakesmith at adelphia.net (Drake Smith)
Date: Sat, 24 Sep 2005 11:33:50 -0400
Subject: [Twisted-Python] How to send a UDP datagram
Message-ID: <5.1.0.14.0.20050924113340.02b2fe58@mail.adelphia.net>

Can somebody please show me the Twisted way to send a simple UDP datagram? 
 From the examples, I see how to transport.write in response to receiving a 
datagram or in response to establishing a UDP "connection". But in my 
application, I'd like to send datagrams blindly, say, to initiate a 
heartbeat message or to stream audio samples without acknowledgement via an 
unconnected UDP socket. I'd also like to do this from a function that is 
not wrapped inside a Twisted protocol class as such, unless that is 
contrary to the Twisted approach.

I am using Twisted version 2.0.1/Python 2.4 on a Linux box. Thank you. 




From exarkun at divmod.com  Sat Sep 24 12:24:14 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 24 Sep 2005 12:24:14 -0400
Subject: [Twisted-Python] How to send a UDP datagram
In-Reply-To: <5.1.0.14.0.20050924113340.02b2fe58@mail.adelphia.net>
Message-ID: <20050924162414.3914.1813846259.divmod.quotient.20798@ohm>

On Sat, 24 Sep 2005 11:33:50 -0400, Drake Smith <drakesmith at adelphia.net> wrote:
>Can somebody please show me the Twisted way to send a simple UDP datagram? 
> From the examples, I see how to transport.write in response to receiving a 
>datagram or in response to establishing a UDP "connection". But in my 
>application, I'd like to send datagrams blindly, say, to initiate a 
>heartbeat message or to stream audio samples without acknowledgement via an 
>unconnected UDP socket. I'd also like to do this from a function that is not 
>wrapped inside a Twisted protocol class as such, unless that is contrary to 
>the Twisted approach.
>
>I am using Twisted version 2.0.1/Python 2.4 on a Linux box. Thank you.
>

When a DatagramProtocol is hooked up to a transport, its startProtocol method is invoked.  Here's how I'd write a heartbeat thingy:

  from twisted.internet import protocol, reactor, task

  class Heartbeat(protocol.DatagramProtocol):
      def sendHeartbeat(self):
          self.transport.write('poingo')

      def startProtocol(self):
          self._call = task.LoopingCall(self.sendHeartbeat)
          self._loop = self._call.start(15)

      def stopProtocol(self):
          self._call.stop()

  reactor.listenUDP(0, Heartbeat())
  reactor.run()


There's nothing particularly unique to Twisted if you want to turn this inside out and have some other code controlling the loop, but here's an example of that just for completeness:

  from twisted.internet import protocol, reactor, task

  class Heartbeat(protocol.DatagramProtocol):
      def __init__(self, onStart):
          self.onStart = onStart

      def startProtocol(self):
          self.onStart.callback(self)

      def sendHeartbeat(self):
          self.transport.write('poingo')

  class HeartbeatSenderGuy(object):
      def start(self):
          d = defer.Deferred()
          d.addCallback(self._listening)
          self._port = reactor.listenUDP(0, Heartbeat(d))

      def _listening(self, proto):
          self._proto = proto
          self._call = task.LoopingCall(self._proto.sendHeartbeat)
          self._call.start(15)

      def stop(self):
          self._call.stop()
          self._port.stopListening()

  hb = HeartbeatSenderGuy()
  hb.start()
  reactor.run()

Hope this helps,

Jp



From drakesmith at adelphia.net  Sat Sep 24 18:28:54 2005
From: drakesmith at adelphia.net (Drake Smith)
Date: Sat, 24 Sep 2005 18:28:54 -0400
Subject: [Twisted-Python] How to send a UDP datagram
In-Reply-To: <20050924162414.3914.1813846259.divmod.quotient.20798@ohm>
References: <5.1.0.14.0.20050924113340.02b2fe58@mail.adelphia.net>
Message-ID: <5.1.0.14.0.20050924175523.02adc0f0@mail.adelphia.net>


>On Sat, 24 Sep 2005 11:33:50 -0400, Drake Smith <drakesmith at adelphia.net> 
>wrote:
>>Can somebody please show me the Twisted way to send a simple UDP 
>>datagram? From the examples, I see how to transport.write in response to 
>>receiving a datagram or in response to establishing a UDP "connection". 
>>But in my application, I'd like to send datagrams blindly, say, to 
>>initiate a heartbeat message or to stream audio samples without 
>>acknowledgement via an unconnected UDP socket. I'd also like to do this 
>>from a function that is not wrapped inside a Twisted protocol class as 
>>such, unless that is contrary to the Twisted approach.
>>
>>I am using Twisted version 2.0.1/Python 2.4 on a Linux box. Thank you.
>
>When a DatagramProtocol is hooked up to a transport, its startProtocol 
>method is invoked.  Here's how I'd write a heartbeat thingy:
>
>  from twisted.internet import protocol, reactor, task
>
>  class Heartbeat(protocol.DatagramProtocol):
>      def sendHeartbeat(self):
>          self.transport.write('poingo')
>
>      def startProtocol(self):
>          self._call = task.LoopingCall(self.sendHeartbeat)
>          self._loop = self._call.start(15)
>
>      def stopProtocol(self):
>          self._call.stop()
>
>  reactor.listenUDP(0, Heartbeat())
>  reactor.run()
>
>
>There's nothing particularly unique to Twisted if you want to turn this 
>inside out and have some other code controlling the loop, but here's an 
>example of that just for completeness:
>
>  from twisted.internet import protocol, reactor, task
>
>  class Heartbeat(protocol.DatagramProtocol):
>      def __init__(self, onStart):
>          self.onStart = onStart
>
>      def startProtocol(self):
>          self.onStart.callback(self)
>
>      def sendHeartbeat(self):
>          self.transport.write('poingo')
>
>  class HeartbeatSenderGuy(object):
>      def start(self):
>          d = defer.Deferred()
>          d.addCallback(self._listening)
>          self._port = reactor.listenUDP(0, Heartbeat(d))
>
>      def _listening(self, proto):
>          self._proto = proto
>          self._call = task.LoopingCall(self._proto.sendHeartbeat)
>          self._call.start(15)
>
>      def stop(self):
>          self._call.stop()
>          self._port.stopListening()
>
>  hb = HeartbeatSenderGuy()
>  hb.start()
>  reactor.run()
>
>Hope this helps,
>
>Jp


Jp,

Thank you for the extra effort to show us OO novices how to control the 
loop from outside the protocol class. I've read several inquiries to this 
effect but nobody has ever explained it.

I generalized your example to give me what I want: the ability to invoke 
UDP datagram messages from outside the protocol class:

from twisted.internet import protocol, reactor, defer

class UDPsender(protocol.DatagramProtocol):
     def __init__(self, onStart):
         self.onStart = onStart

     def startProtocol(self):
         self.onStart.callback(self)

     def sendMsg(self, data, (host, port)):
         self.transport.write(data, (host, port))

class DatagramSender(object):
     def start(self):
         d = defer.Deferred()
         d.addCallback(self._listening)
         self._port = reactor.listenUDP(0, UDPsender(d))

     def _listening(self, proto):
         global myProto
         myProto = proto

     def sendMsg(self, data, (host, port)):
         global myProto
         myProto.sendMsg(data, (host, port))

     def stop(self):
         self._call.stop()
         self._port.stopListening()

ds = DatagramSender()
ds.start()
ds.sendMsg("hello port 20006", ("127.0.0.1", 20006))
ds.sendMsg("hello port 20007", ("127.0.0.1", 20007))
reactor.run()

I tried a simpler implementation.....

from twisted.internet import protocol, reactor

class UDPsender(protocol.DatagramProtocol):

     def sendMsg(self, data, (host, port)):
         self.transport.write(data, (host, port))

ds = UDPsender()
ds.sendMsg("hello port 20006", ("127.0.0.1", 20006))
ds.sendMsg("hello port 20007", ("127.0.0.1", 20007))
reactor.run()

.....but I get the infamous "AttributeError: 'NoneType' object has no 
attribute 'write'" error. I'll stay with the former version. It's not 
exactly as compact as "mySocket.sendto(data, addr)" but I know it will 
cause me less headaches as my program evolves.

Jp: I see your name a lot within the Python community. Thanks for all your 
attentiveness to us new comers.



>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From exarkun at divmod.com  Sat Sep 24 19:33:11 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 24 Sep 2005 19:33:11 -0400
Subject: [Twisted-Python] How to send a UDP datagram
In-Reply-To: <5.1.0.14.0.20050924175523.02adc0f0@mail.adelphia.net>
Message-ID: <20050924233311.3914.1442994037.divmod.quotient.20890@ohm>

On Sat, 24 Sep 2005 18:28:54 -0400, Drake Smith <drakesmith at adelphia.net> wrote:
>
> [snip]
>
>Jp,
>
>Thank you for the extra effort to show us OO novices how to control the loop 
>from outside the protocol class. I've read several inquiries to this effect 
>but nobody has ever explained it.
>
>I generalized your example to give me what I want: the ability to invoke UDP 
>datagram messages from outside the protocol class:

For the most part, your code looks good.  The one thing it gets somewhat incorrect is that it does not wait for the protocol to become connected before attempting to use its transport.

>
>from twisted.internet import protocol, reactor, defer
>
>class UDPsender(protocol.DatagramProtocol):
>     def __init__(self, onStart):
>         self.onStart = onStart
>
>     def startProtocol(self):
>         self.onStart.callback(self)

  Only after startProtocol has been called is `self.transport' bound to something meaningful.  That's the reason for the Deferred here - so you know when you can start using the protocol instance.  Until this Deferred fires, there's no connection to write bytes too.

  With SelectReactor (and perhaps all the other currently implemented reactors), startProtocol may get called synchronously as a result of listenUDP (that is, before listenUDP returns) - but this is not guaranteed, so it's best not to rely on it.

>
>     def sendMsg(self, data, (host, port)):
>         self.transport.write(data, (host, port))
>
>class DatagramSender(object):
>     def start(self):
>         d = defer.Deferred()
>         d.addCallback(self._listening)
>         self._port = reactor.listenUDP(0, UDPsender(d))
>
>     def _listening(self, proto):
>         global myProto
>         myProto = proto
>
>     def sendMsg(self, data, (host, port)):
>         global myProto
>         myProto.sendMsg(data, (host, port))
>
>     def stop(self):
>         self._call.stop()
>         self._port.stopListening()
>
>ds = DatagramSender()
>ds.start()
>ds.sendMsg("hello port 20006", ("127.0.0.1", 20006))
>ds.sendMsg("hello port 20007", ("127.0.0.1", 20007))

  The above two lines are the ones that might explode if listenUDP doesn't give its protocol a transport synchronously.  To get them to execute at the correct time, you might try adding "return d" to the end of the definition of start, and then changing the above to:

    ds = DatagramSender()
    d = ds.start()
    def startSendingStuff(ignored):
        ds.sendMsg("hello port 20006", ("127.0.0.1", 20006))
        ds.sendMsg("hello port 20007", ("127.0.0.1", 20007))

>reactor.run()
>
>I tried a simpler implementation.....
>
>from twisted.internet import protocol, reactor
>
>class UDPsender(protocol.DatagramProtocol):
>
>     def sendMsg(self, data, (host, port)):
>         self.transport.write(data, (host, port))
>
>ds = UDPsender()
>ds.sendMsg("hello port 20006", ("127.0.0.1", 20006))
>ds.sendMsg("hello port 20007", ("127.0.0.1", 20007))
>reactor.run()
>
>.....but I get the infamous "AttributeError: 'NoneType' object has no 
>attribute 'write'" error. I'll stay with the former version. It's not 
>exactly as compact as "mySocket.sendto(data, addr)" but I know it will cause 
>me less headaches as my program evolves.

If you just add in a "reactor.listenUDP(0, ds)" before the call to sendMsg, the above should work, though the same caveat about synchronous listenUDP/startProtocol interaction applies.

If you prefer, you can fold the `start' method (and supporting methods) into UDPSender - I only created two separate classes to demonstrate that the functionality could in fact be separated.

>
>Jp: I see your name a lot within the Python community. Thanks for all your 
>attentiveness to us new comers.

Glad to be of help :)

Jp



From warner at lothar.com  Sat Sep 24 20:32:59 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 24 Sep 2005 17:32:59 -0700 (PDT)
Subject: [Twisted-Python] unsafe tracebacks in PB
Message-ID: <20050924.173259.122178897.warner@lothar.com>

> Just wondering, why is it possible to turn on unsafe
> tracebacks only at the server and not at the client?
> PB being symmetrical, this discrimination makes it
> arbitrarily difficuly to debug PB applications
> sometimes.

Hey, sorry for the slow response.

It *is* possible to set the 'unsafeTracebacks' flag on both ends of the wire.
PBServerFactory() takes a constructor argument to set this flag, while
PBClientFactory() does not, but you can always set it after the fact:

 f = PBClientFactory()
 f.unsafeTracebacks = True

I'm more inclined to resolve the asymmetry by removing the argument from
PBServerFactory rather than adding it to PBClientFactory. As a debugging
thing, I feel it isn't entirely appropriate to have as a constructor
argument. However, I don't really feel that strongly about it either way.

For the record, I'll describe a little bit more about what exactly this flag
does, because there *is* a sense in which unsafe tracebacks can only be
enabled on the "server" side of a given method call. The important thing to
remember is that there are two different ways to divide the connection into
"client" and "server" ends.

Suppose you have program A, which has a pb.Referenceable named Alice that
implements remote_foo. Likewise, you have program B, which contains a
pb.Referenceable named Bob that implements remote_bar. Let us further suppose
that program B used PBServerFactory and reactor.listenTCP to make the object
Bob available to the world. Program A then used PBClientFactory and
reactor.connectTCP to obtain a RemoteReference to Bob (and somehow passed a
reference to Alice over to program B at the same time, so that both programs
have a RemoteReference to the other's Referenceable).

Now, the setting of this "unsafe tracebacks" flag on side A only affects
tracebacks being sent *from* side A: that is, for exceptions that occur on
side A, during a remote method invocation that was requested by side B. If
you consider any given method call to have a "client side" (which requests
the call by doing rref.callRemote("foo", args)), and a "server side" (which
implements the method remote_foo(self, args)), then the unsafe-tracebacks
flag is only relevant for the "server side".

In our example, when B does alice.callRemote("foo"), B is the "client" side
and A is the "server" side. If an exception occurs inside Alice's remote_foo
method, it is the setting of A's clientfactory.unsafeTracebacks flag that
determines whether's A's internal state will be exposed to B. On the other
hand, when A does bob.callRemote("bar"), B is the "server" side, so it is B's
serverfactory.unsafeTracebacks flag that matters.

The important point is that the requesting side for any particular method
call does not get to ask for an "unsafe traceback": only the owner of the
sensitive information (in this case, the stack frames leading up to the
exception, and the globals/locals that are in those stack frames) gets to
decide whether or not to share it with the outside world.

The second usage of the terms "client" and "server" here has to do with which
side initiated the TCP connection and which side accepted it. This is how the
PBClientFactory and PBServerFactory classes use these terms. Both of these
classes have an 'unsafeTracebacks' flag, and if you set it to something
non-zero, then any exception-raising methods invoked on that side will send
back a full traceback to the other side. The minor asymmetry here
(constructor argument versus set-the-flag-later) is just an oversight in the
API.


hope that's useful,
 -Brian



From warner at lothar.com  Sat Sep 24 20:43:59 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 24 Sep 2005 17:43:59 -0700 (PDT)
Subject: [Twisted-Python] jelly tracebacks
Message-ID: <20050924.174359.63508673.warner@lothar.com>

> I just had a grueling experience debugging some
> unjellying problem. I wonder, why not make jelly
> tracebacks more useful by adding the details of the PB
> message that gave rise to them (i.e. which method of
> which object was called with which arguments). Any
> thoughts?

Good idea. I've incorporated this into newpb, where any problem during
serialization or unserialization is reported via an exception that has a
.where attribute. This .where string reports the location in the object graph
that had the problem. In the case of serialization errors during an argument
of a method call, you'd get a string with something like:

 <call-(reqID)-(objID)-(methodname)>.foo

If you were to have something unserializable inside a container, the .where
string would include the relevant index values:

 d = {'foo': 12, 'bar': Ephemeral()}
 l = [1, 2, d]
 rr.callRemote("doStuff", arg1=5, arg2=l)
   -> BananaError(where=<call-0-4-doStuff>.arg2[2]['bar'])

Likewise, if one of the arguments violates a Schema constraint, the exception
should give you enough information to figure out what exactly caused the
problem. This occurs on both ends of the wire, so exceptions that occur when
serializing the return value can be located too.

The same .where technique is used during unserialization, so if someone sends
you a serialized instance of a class that you are unaware of (or unwilling to
deserialize), or if their value violates your inbound schema, you'll get an
exception that has enough detail to help you figure out where exactly the
problem was.

cheers,
 -Brian




From warner at lothar.com  Sat Sep 24 22:22:38 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 24 Sep 2005 19:22:38 -0700 (PDT)
Subject: [Twisted-Python] Re: GUI responsiveness
Message-ID: <20050924.192238.115293364.warner@lothar.com>

> Is there a good place to read more about NewPB?  Or is it just a matter 
> of searching the maillist archives and SVN repository?

For now, the SVN code and docs are the best source of information:

 svn://svn.twistedmatrix.com/svn/Twisted/branches/warner/newpb

You'll want to look in doc/pb/* and twisted/pb/* . There is a surprising
quantity of documentation for newpb, I tried to document everything before
implementing it.

I've got a few more things to get implemented first, but I'll be merging this
stuff into TRUNK sometime soon. I won't promise wire-compatibility for a
while yet, but I think it's good enough to be useable already. Connection
setup, in particular, is (IMHO) a lot easier than oldpb.

cheers,
 -Brian



From phil at bubblehouse.org  Sun Sep 25 21:27:20 2005
From: phil at bubblehouse.org (Phil Christensen)
Date: Sun, 25 Sep 2005 21:27:20 -0400
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <20050924.192238.115293364.warner@lothar.com>
References: <20050924.192238.115293364.warner@lothar.com>
Message-ID: <F655F734-B2E1-4561-A7BA-FFDBA3E63C22@bubblehouse.org>

I'm just going to pop out of the shadows for a moment to make one  
request. It would be really great to get a "Migrating OldPB to NewPB"  
document of some kind; I don't know what the userbase is for PB, but  
for me this is definitely going to be the third time I've had to  
migrate from one version of PB to another (not a complaint, of  
course)...

I've had to write some application-specific hackery in my particular  
usage -- I know I'm going to spend some time testing/debugging that  
when this hits Trunk, so anything to help with the rest of it would  
be great.

Thanks again for everything, folks...

-phil


On Sep 24, 2005, at 10:22 PM, Brian Warner wrote:

>> Is there a good place to read more about NewPB?  Or is it just a  
>> matter
>> of searching the maillist archives and SVN repository?
>>
>
> For now, the SVN code and docs are the best source of information:
>
>  svn://svn.twistedmatrix.com/svn/Twisted/branches/warner/newpb
>
> You'll want to look in doc/pb/* and twisted/pb/* . There is a  
> surprising
> quantity of documentation for newpb, I tried to document everything  
> before
> implementing it.
>
> I've got a few more things to get implemented first, but I'll be  
> merging this
> stuff into TRUNK sometime soon. I won't promise wire-compatibility  
> for a
> while yet, but I think it's good enough to be useable already.  
> Connection
> setup, in particular, is (IMHO) a lot easier than oldpb.
>
> cheers,
>  -Brian
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From tv at twistedmatrix.com  Mon Sep 26 08:24:09 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 26 Sep 2005 15:24:09 +0300
Subject: [Twisted-Python] twisted.trial.assertions is now deprecated.
In-Reply-To: <d06a5cd305092405361c883705@mail.gmail.com>
References: <d06a5cd305092405361c883705@mail.gmail.com>
Message-ID: <4337E869.9040501@twistedmatrix.com>

Jonathan Lange wrote:
> As part of the on-going maintenance of Trial, I have deprecated the
> assertions module.  All people writing unit tests are advised to use
> the assertion methods on unittest.TestCase.

It's not that long ago that they were added, and the last person
rewriting trial wanted to deprecate self.failUnless etc. Nice
cooperation, there ;)

Happily, I never had time to move away from self.failUnless at all.



From pegazik at gmail.com  Mon Sep 26 10:40:06 2005
From: pegazik at gmail.com (Krzysztof Nowak)
Date: Mon, 26 Sep 2005 16:40:06 +0200
Subject: [Twisted-Python] Twisted.web signal handling
In-Reply-To: <20050924152504.3914.1020640885.divmod.quotient.20785@ohm>
References: <cc4a20de05092405435742ca9e@mail.gmail.com>
	<20050924152504.3914.1020640885.divmod.quotient.20785@ohm>
Message-ID: <cc4a20de0509260740cc97d4@mail.gmail.com>

On 9/24/05, Jp Calderone <exarkun at divmod.com> wrote:
> Timeouts should be managed using twisted.internet.reactor.callLater().

Thanks. I am not really deep in the twisted. I just want to make this
application and that would be all (for now). I have rewrite my
previous code in this way:

/////////////////////////////////////////////////////////////////////////////////////
def Timeout():
   raise ConnectionError

def HistosRendering:
       Event = reactor.callLater(0.0001, Timeout)	
       try:
           <Some activity that need timeout>
       except ConnectionError:
           <In case of timeout>
           return
       else:
           Event.cancel()

class Resource(resource.Resource):
   def render(self, request):
       HistosRender()

resource = Resource()
/////////////////////////////////////////////////////////////////////////////////////

But still, it doesn't work. Timeout() is called, but exception is
making whole process to fail and the except: statestment is not even
started. I'm quite shure, that this timeouting-stuff should be some
standard problem, but I failed to find any information in the net. So
please, help me once again.

> JP Calderone:
> Also, there is a race condition between the end of your try suite and the timer.cancel() call.  The exception could be raised after the else suite is entered but before the timer is actually cancelled.

Do you have any ideas how to avoid that problem?


> >
> >class Resource(resource.Resource):
> >    def render(self, request):
> >        HistosRender()
>
> You are blocking the entire process for the during of the render() call.  This is another reason not to make whatever synchronous connection attempt you are making and instead use something Twisted provides.  No other activities can occur, process-wide, while your code is running.  If this is a multiuser application, *everyone* using it will experience periods of unresponsiveness when *anyone* causes blocking code to run.

If adding asynchronous approach would force me to restructure whole
project, it would stay for time just like this. This could be next
step, but timeouting is much more important to me....

Cheers,
Krzysztof Nowak

From Henning.Ramm at mediapro-gmbh.de  Mon Sep 26 12:30:23 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Mon, 26 Sep 2005 18:30:23 +0200
Subject: [Twisted-Python] How to write a simpletelnet client?
Message-ID: <F92274058556DE42B94B148EEFB91839021CB583@exchange-03.suedkurier.de>

>>I didn't expect that one must handle control codes (your function reponseFunct), I expected the protocol to handle that for me, but anyway, that was no problem (i.e. you solved it before). And with your code I could even switch off the echo (your next thread).

>You don't actually have to do this.  You can implement iac_DO, iac_DONT, iac_WILL, and iac_WONT to handle feature negotiation.

>You can also use twisted.conch.telnet, which presents a slightly more complete API for feature negotiation.

Thank you, I'll look into it. It's better to use ssh anyway.

>>What I don't understand is how to 'inject' some commands and collect their result.
>>What you tried in your "command" function in __main__ can't work, because the protocol has no transport.
>>I don't understand how to get at the Factory's actual protocol instance and its transport.

>Factory's don't have protocol instances, in general.  A factory is responsible for creating between zero and an unlimited number >of instances of a protocol, as they are demanded by established connections.

>Protocol.connectionMade is provided as a hook for application-level logic.  You may want to send your commands from that method.  >When it is invoked, you will have a transport.

Thank you.

I don't understand how connectionMade would help me here - I use it to switch off ECHO, but everything else is in dataReceived to react on prompts. And I've telnet_Command to issue a command (i.e. I queue it while there's no connection), but if I use the Protocol in a Factory, I can't get my hands on it. Perhaps I simply shouldn't use a Factory.

I guess the UDP code you're discussing with Drake Smith will help me further, his task seems similar to mine.

Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From garanin at m-lan.ru  Mon Sep 26 16:17:18 2005
From: garanin at m-lan.ru (Garanin Michael)
Date: Tue, 27 Sep 2005 00:17:18 +0400
Subject: [Twisted-Python] zope.component or twisted.python.components
In-Reply-To: <20050923213204.3914.830329341.divmod.quotient.20585@ohm>
References: <20050923213204.3914.830329341.divmod.quotient.20585@ohm>
Message-ID: <1127765838.4936.8.camel@localhost>

                                                                          
Can i hope that there will be feature such as named adapters, multiple
objects adapter, handlers etc. (such as in Z3)  in
"twisted.python.component" ? Is it planed?
Thanks.
? ???, 24.09.2005, ? 01:32, Jp Calderone ?????:
>                                                                           On Sat, 24 Sep 2005 01:18:26 +0400, Garanin Michael <garanin at m-lan.ru> wrote:
> >
> >Hello!
> >I am twisted-newcomer, and i try ported my Zope3 application to
> >twisted+nevow. Can i use zope.components package from Zope3 (only for my
> >objects of course) instead   twisted.python.components, is it legal?
> >
> 
> The only constraint in place is that if you pass an object to someone else's code (for example, to Twisted), it behaves as they expect it to.
> 
> I doubt many people have tried this (or at least, they have not talked about it), but there should be no categorical reason for it to fail.  Let us know if you run into any problems that you think represent unreasonable incompatibilities.
> 
> Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From itamar at itamarst.org  Mon Sep 26 16:33:35 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 26 Sep 2005 16:33:35 -0400
Subject: [Twisted-Python] zope.component or twisted.python.components
In-Reply-To: <1127765838.4936.8.camel@localhost>
References: <20050923213204.3914.830329341.divmod.quotient.20585@ohm>
	<1127765838.4936.8.camel@localhost>
Message-ID: <1127766816.8754.48.camel@localhost.localdomain>

On Tue, 2005-09-27 at 00:17 +0400, Garanin Michael wrote:

> Can i hope that there will be feature such as named adapters, multiple
> objects adapter, handlers etc. (such as in Z3)  in
> "twisted.python.component" ? Is it planed?

twisted.python.components is just a layer on top of the standard Zope3
AdapterRegistry (and mostly it's just backwards compat cruft). So you
can for example register named adapters, etc.. Or you could isntall
Zope3 and use its APIs for registering these things; the adaptation
hooks are global so it will all interoperate nicely.




From garanin at m-lan.ru  Mon Sep 26 17:02:34 2005
From: garanin at m-lan.ru (Garanin Michael)
Date: Tue, 27 Sep 2005 01:02:34 +0400
Subject: [Twisted-Python] zope.component or twisted.python.components
In-Reply-To: <1127766816.8754.48.camel@localhost.localdomain>
References: <20050923213204.3914.830329341.divmod.quotient.20585@ohm>
	<1127765838.4936.8.camel@localhost>
	<1127766816.8754.48.camel@localhost.localdomain>
Message-ID: <1127768554.5227.8.camel@localhost>

                                                                          
? ???, 27.09.2005, ? 00:33, Itamar Shtull-Trauring ?????:
>                                                                           On Tue, 2005-09-27 at 00:17 +0400, Garanin Michael wrote:
> 
> > Can i hope that there will be feature such as named adapters, multiple
> > objects adapter, handlers etc. (such as in Z3)  in
> > "twisted.python.component" ? Is it planed?
> 
> twisted.python.components is just a layer on top of the standard Zope3
> AdapterRegistry (and mostly it's just backwards compat cruft). So you
> can for example register named adapters, etc.. Or you could isntall
> Zope3 and use its APIs for registering these things; the adaptation
> hooks are global so it will all interoperate nicely.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
Yes, I do it. But, there are two global AdapterRegistry instances
(globalsitemanager from z3 and globalRegistry from twisted) in my app. I
think it's 'dirty code'.





From jeinhorn at fourscorellc.com  Mon Sep 26 17:17:05 2005
From: jeinhorn at fourscorellc.com (Jeff Einhorn)
Date: Mon, 26 Sep 2005 16:17:05 -0500
Subject: [Twisted-Python] PB for .NET?
Message-ID: <2B025C1778EB94418F186FB802D68EEF1B6662@TRITON.pinnaclecredit.com>

Has anyone written an Implementation of the PB for the .NET platform in
something like C# that they would be willing to share?

 

Thanks,

 

Jeff Einhorn

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050926/bba43596/attachment.htm 

From itamar at itamarst.org  Mon Sep 26 17:39:34 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 26 Sep 2005 17:39:34 -0400
Subject: [Twisted-Python] PB for .NET?
In-Reply-To: <2B025C1778EB94418F186FB802D68EEF1B6662@TRITON.pinnaclecredit.com>
References: <2B025C1778EB94418F186FB802D68EEF1B6662@TRITON.pinnaclecredit.com>
Message-ID: <1127770774.8754.69.camel@localhost.localdomain>

On Mon, 2005-09-26 at 16:17 -0500, Jeff Einhorn wrote:
> Has anyone written an Implementation of the PB for the .NET platform
> in something like C# that they would be willing to share?

The Java PB implementation should be pretty easy to either port, or
likely even run directly using http://www.ikvm.net/. I've heard rumors
porting Java to C# involves renaming .java to to whatever the C# file
prefix is and then just poking at it until it compiles.

http://itamarst.org/software/twistedjava/





From mary-twisted at puzzling.org  Mon Sep 26 20:28:43 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 27 Sep 2005 10:28:43 +1000
Subject: [Twisted-Python] Reminder: Virtual Twisted Sprint, 8-9 October
Message-ID: <20050927002843.GW1012@home.puzzling.org>

Just a reminder for everyone that there will be a bunch of people online
on the weekend of 8-9 October working their hearts out on the Twisted
codebase. All participants welcome, people unfamiliar with the codebase
will need to be a bit self-motivated though in terms of being willing to
find their own problem to work on (check the bug tracker for ideas).
We're particularly keen for people who would be interested in adding
unti tests.

Sprinting discussion will be in #twisted and #twisted.web on
freenode.net. There should be people around at most times.

-Mary

-- 
<e at ircnet> on the internet the concepts of time and space lose meaning



From jadestorm at nc.rr.com  Mon Sep 26 20:50:29 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Mon, 26 Sep 2005 20:50:29 -0400
Subject: [Twisted-Python] oscar.py updates
Message-ID: <DAF545CC-5FD5-4D45-B12F-23D8B18D9C19@nc.rr.com>

Folk,

Would you all prefer that I send the the current state of changes  
I've made to oscar.py (now that I've merged together what I changed  
for ICQ and AIM) or wait until I can write documentation and such  
along-side it?  For that matter, can someone point me at some good  
"here's how we do it" type instructions for writing Twisted  
documentation that is consistent with ... well the rest of it.  =D  I  
don't think I'd call it stable yet, so I wouldn't be labeling it as  
such yet.  =)  What do you think?

(PS, it's got quite a lot of changes in it since I first pulled it  
out of Twisted 1.3.0)

Daniel



From general at eepatents.com  Mon Sep 26 23:39:58 2005
From: general at eepatents.com (Ed Suominen)
Date: Mon, 26 Sep 2005 20:39:58 -0700
Subject: [Twisted-Python] 
	Re: [Twisted-web] Reminder: Virtual Twisted Sprint, 8-9 October
In-Reply-To: <20050927002843.GW1012@home.puzzling.org>
References: <20050927002843.GW1012@home.puzzling.org>
Message-ID: <1127792399.9677.56.camel@207-118-71-185.dyn.centurytel.net>

I'm a regular grump on #twisted about the overall lack of docstrings in
Twisted. I'd be willing to participate by offering docstrings for
specific classes/methods if there's a general interest and willingness
to incorporate them. What would be the preferred way to pass them on for
review and commit, given that "all participants [are] welcome" but that
I lack commit access and would rather not jump through the bug tracker
hoops for every single docstring written?

Best regards,
Ed Suominen

On Tue, 2005-09-27 at 10:28 +1000, Mary Gardiner wrote:
> Just a reminder for everyone that there will be a bunch of people online
> on the weekend of 8-9 October working their hearts out on the Twisted
> codebase. All participants welcome, people unfamiliar with the codebase
> will need to be a bit self-motivated though in terms of being willing to
> find their own problem to work on (check the bug tracker for ideas).
> We're particularly keen for people who would be interested in adding
> unti tests.
> 
> Sprinting discussion will be in #twisted and #twisted.web on
> freenode.net. There should be people around at most times.
> 
> -Mary
> 




From mary-twisted at puzzling.org  Mon Sep 26 23:46:32 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 27 Sep 2005 13:46:32 +1000
Subject: [Twisted-Python] 
	Re: [Twisted-web] Reminder: Virtual Twisted Sprint, 8-9 October
In-Reply-To: <1127792399.9677.56.camel@207-118-71-185.dyn.centurytel.net>
References: <20050927002843.GW1012@home.puzzling.org>
	<1127792399.9677.56.camel@207-118-71-185.dyn.centurytel.net>
Message-ID: <20050927034632.GB1012@home.puzzling.org>

[Moving discussion onto twisted-python only]

On Mon, Sep 26, 2005, Ed Suominen wrote:
> I'm a regular grump on #twisted about the overall lack of docstrings in
> Twisted. I'd be willing to participate by offering docstrings for
> specific classes/methods if there's a general interest and willingness
> to incorporate them. What would be the preferred way to pass them on for
> review and commit, given that "all participants [are] welcome" but that
> I lack commit access and would rather not jump through the bug tracker
> hoops for every single docstring written?

Well, asking at the time will give you the ultimate answer, but
whichever of the following is acceptable to you:

 1. Make your patches available on a website and give the person who has
    agreed to review them the URL.

 2. Mail them to the person who has agreed to review them.

 3. Make a single bug and attach all the patches to it. (Depends on
    exactly what bug tracker hoops you object to.)

1 and 3 are preferrable because it means that if someone drops the ball
on the day, you can nag about it on the list.

-Mary



From ajchos at wp.pl  Tue Sep 27 09:10:54 2005
From: ajchos at wp.pl (=?iso-8859-2?Q?Micha=B3?= Tyde)
Date: Tue, 27 Sep 2005 15:10:54 +0200
Subject: [Twisted-Python] How to write a simpletelnet client?
Message-ID: <1127826654.9003.21.camel@localhost.localdomain>


Sorry that i answer so late (busssy week).
> I could even switch off the echo (your next thread).

Switching off ECHO i realized by sending a commands:

unset PS1 (switching off prompt)
stty -echo (swiching off echo)

> What I don't understand is how to 'inject' some commands and collect
> their result.
I don't understand how You want to "inject" commands. Now I used a
defers to handling a commands (sending and getting answers).
dataReceived is responsible for collecting what is comming to Your
client as answer. 
> What you tried in your "command" function in __main__ can't work,
> because the protocol has no transport.
This is the factory now i used to connect (maybe thiss will help You):

class MyFactory( ClientFactory ):
    protocol = TelnetProtocol
    '''all printouts from this class will have F at the beggining - form
Factory and they are green - <g>'''    
    def __init__( self ):
        print "<g>F __init__"
        self.protos={}
        self.nextName = None
        self.t0 = time.time()
        
    
    def buildProtocol( self, addr ):
        print "<g>F buildProtocol"
        p = self.protocol( self.nextName )
        p.factory = self
        self.protos[self.nextName] = p
        self.nextName = None
        return p
    
    
    def getClient( self, name ):
        print "<g>F getClient"
        t0 = time.time()
        while True:
            try:
                return self.protos[name]
            except KeyError:
                reactor.run( 0.1 )
        print name
        print self.nextName
        while name not in self.nextName:
            reactor.iterate( 0.1 )
            if time.time() - self.t0 > CLIENT_CONNECTION_TIMEOUT:
                raise TimeoutError, "Timeout on connection"
    
    def addActive( self, proto ):
        print "<g>F addActive"
        self.engine._storeClient( proto )





From moof at metamoof.net  Tue Sep 27 09:29:25 2005
From: moof at metamoof.net (Moof)
Date: Tue, 27 Sep 2005 15:29:25 +0200
Subject: [Twisted-Python] PB for .NET?
In-Reply-To: <1127770774.8754.69.camel@localhost.localdomain>
References: <2B025C1778EB94418F186FB802D68EEF1B6662@TRITON.pinnaclecredit.com>
	<1127770774.8754.69.camel@localhost.localdomain>
Message-ID: <43394935.2010705@metamoof.net>

Itamar Shtull-Trauring wrote:
> On Mon, 2005-09-26 at 16:17 -0500, Jeff Einhorn wrote:
> 
>>Has anyone written an Implementation of the PB for the .NET platform
>>in something like C# that they would be willing to share?
> 
> 
> The Java PB implementation should be pretty easy to either port, or
> likely even run directly using http://www.ikvm.net/. I've heard rumors
> porting Java to C# involves renaming .java to to whatever the C# file
> prefix is and then just poking at it until it compiles.
> 
> http://itamarst.org/software/twistedjava/

If you do manage to port it, please post about it, as I'd be quite
interested in knowing about it.

I'm currently looking at the possibilities involved in combining a large VB
application with some of the stuff I've been doing in Twisted. It won't
happen for a few months yet, but if I can tell the VB lot that they can do
it through PB.NET, that may well be another reason for them to get on and
port it to .NET.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From itamar at itamarst.org  Tue Sep 27 10:40:37 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 27 Sep 2005 10:40:37 -0400
Subject: [Twisted-Python] oscar.py updates
In-Reply-To: <DAF545CC-5FD5-4D45-B12F-23D8B18D9C19@nc.rr.com>
References: <DAF545CC-5FD5-4D45-B12F-23D8B18D9C19@nc.rr.com>
Message-ID: <1127832037.8961.23.camel@localhost.localdomain>

On Mon, 2005-09-26 at 20:50 -0400, Daniel Henninger wrote:

> Would you all prefer that I send the the current state of changes  
> I've made to oscar.py (now that I've merged together what I changed  
> for ICQ and AIM) or wait until I can write documentation and such  
> along-side it? 

Assuming it's got tests, and some explanation of what you've added, then
it might well go in (though that's up to the maintainer of course).

>  For that matter, can someone point me at some good  
> "here's how we do it" type instructions for writing Twisted  
> documentation that is consistent with ... well the rest of it.  =D  I  
> don't think I'd call it stable yet, so I wouldn't be labeling it as  
> such yet.  =)  What do you think?

We've got a documentation standard, coding style policy etc. as part of
the Twisted core documentation (the version in trunk is a bit more up to
date):
http://twistedmatrix.com/projects/core/documentation/howto/policy/index.html

Twisted documentation is typically written with Lore:
http://twistedmatrix.com/projects/lore/documentation/howto/lore.html





From jadestorm at nc.rr.com  Tue Sep 27 11:01:50 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Tue, 27 Sep 2005 11:01:50 -0400
Subject: [Twisted-Python] oscar.py updates
In-Reply-To: <1127832037.8961.23.camel@localhost.localdomain>
References: <DAF545CC-5FD5-4D45-B12F-23D8B18D9C19@nc.rr.com>
	<1127832037.8961.23.camel@localhost.localdomain>
Message-ID: <FAA8B4FC-B802-43E5-A0DE-0A1721EF6E22@nc.rr.com>

>> Would you all prefer that I send the the current state of changes
>> I've made to oscar.py (now that I've merged together what I changed
>> for ICQ and AIM) or wait until I can write documentation and such
>> along-side it?
>>
>
> Assuming it's got tests, and some explanation of what you've added,  
> then
> it might well go in (though that's up to the maintainer of course).

Ok then I've got a little bit more work to do with it.  ;D

And that reminds me, am I considered the maintainer of it at this  
point?  I recall a conversation not-so-long ago about it and z3p  
saying "it's yours".  =)


>>  For that matter, can someone point me at some good
>> "here's how we do it" type instructions for writing Twisted
>> documentation that is consistent with ... well the rest of it.  =D  I
>> don't think I'd call it stable yet, so I wouldn't be labeling it as
>> such yet.  =)  What do you think?
>>
>
> We've got a documentation standard, coding style policy etc. as  
> part of
> the Twisted core documentation (the version in trunk is a bit more  
> up to
> date):
> http://twistedmatrix.com/projects/core/documentation/howto/policy/ 
> index.html
>
> Twisted documentation is typically written with Lore:
> http://twistedmatrix.com/projects/lore/documentation/howto/lore.html

Excellent, thanks!  I'll look them over!

Daniel


>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>




From itamar at itamarst.org  Tue Sep 27 11:47:03 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 27 Sep 2005 11:47:03 -0400
Subject: [Twisted-Python] oscar.py updates
In-Reply-To: <FAA8B4FC-B802-43E5-A0DE-0A1721EF6E22@nc.rr.com>
References: <DAF545CC-5FD5-4D45-B12F-23D8B18D9C19@nc.rr.com>
	<1127832037.8961.23.camel@localhost.localdomain>
	<FAA8B4FC-B802-43E5-A0DE-0A1721EF6E22@nc.rr.com>
Message-ID: <1127836024.8961.32.camel@localhost.localdomain>

On Tue, 2005-09-27 at 11:01 -0400, Daniel Henninger wrote:

> And that reminds me, am I considered the maintainer of it at this  
> point?  I recall a conversation not-so-long ago about it and z3p  
> saying "it's yours".  =)

If you're the one who is mainly writing the code then yes, you're the
maintainer; but code would still need to be approved by whoever does the
code review for the patch.




From smurf at smurf.noris.de  Tue Sep 27 11:28:42 2005
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Tue, 27 Sep 2005 17:28:42 +0200
Subject: [Twisted-Python] pb over twisted ssh?
Message-ID: <pan.2005.09.27.15.28.38.627653@smurf.noris.de>

Hi,

The problem: I've also got a perspective server which clients connect to.
For now, I'm using password authentication.

The obvious improvement is to use ssh, and its credentials, instead.
(The server already knows the clients' SSH keys.)

I've looked at the sample code (examples/sshsimpleclient.py), but I don't
quite see how to hook a perspective broker into all that -- the server
example looks somewhat more tractable. ;-)

Also, I'd like to use the client's ssh key agent; that's important because
the system with the PB client on it doesn't have the users' private keys.
Is that possible / implemented?

Thanks for any help.

-- 
Matthias Urlichs   |   {M:U} IT Design @ m-u-it.de   |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
 - -
Whatever is not nailed down is mine.  Whatever I can pry up is not nailed down.
		-- Collis P. Huntingdon, railroad tycoon





From warner at lothar.com  Tue Sep 27 20:37:30 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 27 Sep 2005 17:37:30 -0700 (PDT)
Subject: [Twisted-Python] pb over twisted ssh?
Message-ID: <20050927.173730.52089288.warner@lothar.com>

> The obvious improvement is to use ssh, and its credentials, instead.
> (The server already knows the clients' SSH keys.)

I don't have any advice to offer about using SSH, other than saying that
yeah, that'd be cool. I'd point out that I think you might be talking about
two separate things: one part is to run the PB connection inside an encrypted
SSH session. The other part is to use SSH keys as PB login credentials. I
consider the first part more useful, because that's how you would achieve
transport-layer privacy. You could achieve similar things by sending the PB
connection through a tunneled socket, but it would be kind of grotty.

What I will mention is that, in newpb, connections are run over SSL by
default, and the PB-URLs that identify endpoints are secure references to
those endpoints (they include a hash of the SSL key), so you get encryption
and authentication for free. cred has not yet been dragged into newpb, but it
won't be too much work once someone figures out what exactly they want out of
such a combination :).

cheers,
 -Brian



From foom at fuhm.net  Wed Sep 28 02:01:06 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Sep 2005 00:01:06 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EKV06-0001dZ-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-09-21 06:00:02.530000:
 Bugs opened: 16   Bugs closed: 8   Total open bugs: 457 (+8)
  Urgent: 5 (-1)
  Bug: 212 (+5)
  Feature: 163 (+5)
  Wish: 77 (-1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] Trial's output in buildbot ("-to" options) is confused  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1215 opened by spiv

                    ==== Bug ====
[DOCUMENTATION] Should the coding standard mention PEP8  (4 hours ago)
       http://twistedmatrix.com/bugs/issue1220 opened by hypatia

[MAIL, TRIAL] SMTPClientError.__str__ is unsafe, and can crash trial  (yesterday)
       http://twistedmatrix.com/bugs/issue1219 opened by jml

[CONCH, CORE, FLOW, LORE, MAIL, NAMES, PB, TRIAL, WEB] trial.util should not be used by non-Trial code  (yesterday)
       http://twistedmatrix.com/bugs/issue1217 opened by jml

[CORE, TRIAL] trial does not isolate test methods from each other  (2 days ago)
       http://twistedmatrix.com/bugs/issue1213 opened by exarkun

[CORE, TRIAL] trial's spinWhile and spinUntil have ridiculously small timeouts  (2 days ago)
       http://twistedmatrix.com/bugs/issue1214 opened by exarkun

[TRIAL] BUG: twisted.trial.remote is untested, unused and probably broken  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1211 opened by jml

[TRIAL] Missing test-case-name referents cause the Trial run to abort.  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1212 opened by jml

                    ==== Feature ====
[TRIAL] --coverage should be a flag, not a parameter  (4 days ago)
       http://twistedmatrix.com/bugs/issue1207 opened by jml

[TRIAL] Remove --psyco option from Trial command line  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1208 opened by jml

[TRIAL] Make Trial command line do --recurse by default  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1209 opened by jml

[CORE] Process's childFDs dict should also accept file objects (if they have a valid .fileno())  (yesterday)
       http://twistedmatrix.com/bugs/issue1218 opened by spiv

[DOCUMENTATION, RELEASE MANAGEMENT] Deprecation policy  (yesterday)
       http://twistedmatrix.com/bugs/issue1216 opened by jml

[TRIAL] Specify trial reporters using --reporter parameter  (4 days ago)
       http://twistedmatrix.com/bugs/issue1210 opened by jml

[TRIAL] TASK: Deprecate assertions.py  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1205 opened by jml

[TRIAL] TASK: Deprecate setUpClass/tearDownClass.  Provide replacement  (4 days ago)
       http://twistedmatrix.com/bugs/issue1206 opened by jml

Bugs Closed
______________________
                    ==== Urgent ====
[TRIAL] Trial's output in buildbot ("-to" options) is confused  (2 days ago)
       http://twistedmatrix.com/bugs/issue1215 opened by spiv, closed by jml

[CORE] ProtocolWrapper's behavior is unspecified  (5 months ago)
       http://twistedmatrix.com/bugs/issue1004 opened by exarkun, closed by exarkun

                    ==== Bug ====
[TRIAL] BUG: twisted.trial.remote is untested, unused and probably broken  (4 days ago)
       http://twistedmatrix.com/bugs/issue1211 opened by jml, closed by jml

[TRIAL] Missing test-case-name referents cause the Trial run to abort.  (4 days ago)
       http://twistedmatrix.com/bugs/issue1212 opened by jml, closed by jml

                    ==== Feature ====
[TRIAL] Remove --psyco option from Trial command line  (4 days ago)
       http://twistedmatrix.com/bugs/issue1208 opened by jml, closed by jml

[TRIAL] Make Trial command line do --recurse by default  (4 days ago)
       http://twistedmatrix.com/bugs/issue1209 opened by jml, closed by jml

[TRIAL] TASK: Deprecate assertions.py  (4 days ago)
       http://twistedmatrix.com/bugs/issue1205 opened by jml, closed by jml

                    ==== Wish ====
[TRIAL] trial warning suppression tests should be less noisy  (10 months ago)
       http://twistedmatrix.com/bugs/issue801 opened by exarkun, closed by jml




From jasper at peak.org  Wed Sep 28 04:22:42 2005
From: jasper at peak.org (Jasper)
Date: Wed, 28 Sep 2005 01:22:42 -0700
Subject: [Twisted-Python] pb over twisted ssh?
In-Reply-To: <20050927.173730.52089288.warner@lothar.com>
References: <20050927.173730.52089288.warner@lothar.com>
Message-ID: <433A52D2.2020607@peak.org>

Brian Warner wrote:

>What I will mention is that, in newpb, connections are run over SSL by
>default, and the PB-URLs that identify endpoints are secure references to
>those endpoints (they include a hash of the SSL key), so you get encryption
>and authentication for free. cred has not yet been dragged into newpb, but it
>won't be too much work once someone figures out what exactly they want out of
>such a combination :).
>  
>
Hot damn that sounds good.  You're the man!

-Jasper



From thys at quaint.co.za  Wed Sep 28 08:24:11 2005
From: thys at quaint.co.za (Thys Meintjes)
Date: Wed, 28 Sep 2005 14:24:11 +0200
Subject: [Twisted-Python] wxpython lockup
Message-ID: <1127910251.7377.24.camel@localhost.localdomain>

Greets,

I'm currently refactoring a multi threaded wxPython app to use twisted
and adbapi. I've based my code ion the wx demo in the twisted
distribution e.g:

from twisted.internet import wxreactor
wxreactor.install()
from twisted.internet import reactor
...
reactor.registerWxApp(app)
reactor.run(0)

The app loads and then freezes, sometimes some of the widgets remain
active for a few seconds before freezing up. No other threads have been
started by this time.

What gives ? Is the wxreactor stable an ready for production ?

Ubuntu 5.4 (2.6.10-5-386) wxPython 2.6 

thanks

-- 
Thys Meintjes <thys at quaint.co.za>




From solipsis at pitrou.net  Wed Sep 28 08:46:05 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 28 Sep 2005 14:46:05 +0200
Subject: [Twisted-Python] wxpython lockup
In-Reply-To: <1127910251.7377.24.camel@localhost.localdomain>
References: <1127910251.7377.24.camel@localhost.localdomain>
Message-ID: <1127911565.15818.48.camel@p-dvsi-418-1.rd.francetelecom.fr>


> The app loads and then freezes, sometimes some of the widgets remain
> active for a few seconds before freezing up. No other threads have been
> started by this time.
> 
> What gives ? Is the wxreactor stable an ready for production ?

There are various recipes to avoid problems with mixing two single loops
together. You can read recent archives of this mailing-list for more
information.

Regards

Antoine.





From clive at darkarts.co.za  Wed Sep 28 08:53:19 2005
From: clive at darkarts.co.za (clive at darkarts.co.za)
Date: Wed, 28 Sep 2005 14:53:19 +0200
Subject: [Twisted-Python] wxpython lockup
In-Reply-To: <1127910251.7377.24.camel@localhost.localdomain>
References: <1127910251.7377.24.camel@localhost.localdomain>
Message-ID: <1127911999.433a923fc135f@webmail.firstier.co.za>

Quoting Thys Meintjes <thys at quaint.co.za>:

#
# What gives ? Is the wxreactor stable an ready for production ?
#

I found many problems with wxreactor.  try threadedselectreactor instead (its
not released yet, find it in the twisted repository, threadedselectreactor.py
is all you need, it works with the latest 'official' twisted release)

I am using wxPython/threadedselectreactor and tada for database quite nicely,
adbapi should work too.

Clive



----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.



From foom at fuhm.net  Wed Sep 28 11:16:28 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Sep 2005 11:16:28 -0400
Subject: [Twisted-Python] twisted.vfs issues
Message-ID: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>

So, starting to look through twisted.vfs, I'm finding a few things  
that need work.

1) I see no way of reading from or writing to a file in  
ivfs.IFileSystemLeaf.

2) createFile is racy -- it requires opening a file by the given  
name, with default permissions, then immediately closing it. In  
addition, it doesn't specify whether it's an error if the file  
already exists.

3) Looks like all operations are blocking? What about a remote vfs? I  
think every operation in the vfs interface ought to be non-blocking.

4) IFileSystemNode.remove doesn't say whether it's a recursive delete  
(on a directory), and .rename don't specify whether newName can be in  
a different directory, whether it replaces an existing file, or  
whether it works on a directory.

5) Errors are coarse-grained. Everything is a VFSError, and the only  
detailed information is in human-readable text, not any nice computer- 
readable form.

6) Need some support in the interface for extended attributes.

That's it for now.

James



From andy at thecablelounge.com  Wed Sep 28 15:49:04 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Thu, 29 Sep 2005 05:49:04 +1000
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>
References: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>
Message-ID: <433AF3B0.9040709@thecablelounge.com>

James Y Knight wrote:
> So, starting to look through twisted.vfs, I'm finding a few things  that 
> need work.

Hey James,

Thanks for the feedback.  We need it.  Heaps of decisions for the vfs 
stuff have been put off to see what other use cases would need from the 
vfs.  Inparticular permissions and metadata.

> 1) I see no way of reading from or writing to a file in  
> ivfs.IFileSystemLeaf.

The vfs stuff is still heavily influenced by the interface that conch 
expects as sftp has been the main motivation for the current contributors.

Reading and writing is done through writeChunk and readChunk - we've 
always felt this wasn't quite right though for a general backend. But 
after two sprints we still haven't come up with something that is 
better.  Adding the web2.Stream adaptor seems to have glazed over the 
issue for protocols that read/writeChunk doesn't work for.  Spiv even 
used streams for the vfs ftp adaptor!

I've added read/writeChunk to ivfs.IFileSystemLeaf's interface.

> 2) createFile is racy -- it requires opening a file by the given  name, 
> with default permissions, then immediately closing it. 

:), racy is good right?

> In  addition, it 
> doesn't specify whether it's an error if the file  already exists.

It should, I've added this to the interface.

> 3) Looks like all operations are blocking? What about a remote vfs? I  
> think every operation in the vfs interface ought to be non-blocking.

The other option is the vfs interface could be maybe deferred.  Most 
protocols are good at handling this (sftp, streams).  But given how easy 
it is to return deferred.succeed - it's probably simpler to say always 
non-blocking.

> 4) IFileSystemNode.remove doesn't say whether it's a recursive delete  
> (on a directory)

Hrm yeah - should it?  Or should this be handled by higher level 
utilities (eg shutil).  The current os backend uses os.rmdir, so doesn't 
do a recursive delete.  I've updated the interface to say that it doesn't.

> , and .rename don't specify whether newName can be in  a 
> different directory, whether it replaces an existing file, or  whether 
> it works on a directory.

The method is against Node, so it works on directories.

This is os.rename's spec:

---
Rename the file or directory src to dst. If dst is a directory, OSError 
will be raised. On Unix, if dst exists and is a file, it will be removed 
silently if the user has permission. The operation may fail on some Unix 
flavors if src and dst are on different filesystems. If successful, the 
renaming will be an atomic operation (this is a POSIX requirement). On 
Windows, if dst already exists, OSError will be raised even if it is a 
file; there may be no way to implement an atomic rename when dst names 
an existing file. Availability: Macintosh, Unix, Windows.
---

Should vfs be aiming to provide consistent behaviour for all operations 
across all backends?  Or should some behaviour be left down to the 
particular backend to decide?

For the moment I've updated the interface to read:

Renames this node to newName.  newName can be in a different directory. 
  If the destination is an existing directory, an error will be raised.

> 5) Errors are coarse-grained. Everything is a VFSError, and the only  
> detailed information is in human-readable text, not any nice computer- 
> readable form.

yeah :( that needs to be fixed.

> 6) Need some support in the interface for extended attributes.

There's getMetadata. That let's you return arbitrary attributes.

Would that cover what you're thinking?

Protocol's should try to get by with as little metadata as they can.  If 
a backend doesn't supply a bit of metadata a protocol must have, then it 
won't be able to be used with the protocol.

Andy.



From m at keysolutions.ru  Fri Sep 23 04:49:11 2005
From: m at keysolutions.ru (Mikhail Kashkin)
Date: Fri, 23 Sep 2005 12:49:11 +0400
Subject: [Twisted-Python] Repository for python developers
Message-ID: <dh0fif$ti$1@sea.gmane.org>

Moscow, Russia, September 23th, 2005

We are happy to spread good news about `Key Solutions' 
<http://keysolutions.ru/>`_ new initiative. We have created a new public 
repository for python developers. The ulitimate goal of this project is 
to unite companies and people under the umbrella of 
Russian-speaking-python (Zope/Plone/Zope3/Twisted/etc) open source 
programmers community, so that we could jointly push forward new 
programs and technologies in Russia.

The repository powered by `subversion <http://subversion.tigris.org/>`_.

**Links**:

- `Press release in russian <http://keysolutions.ru/News/subversion>`_

- `??????? ?? ??????? <http://keysolutions.ru/News/subversion>`_

- `Subversion <https://svn.keysolutions.ru/community/>`_

About Key Solutions
--------------------

Key Solutions is an open source company with primary focus in 
development of corporative CRM Internet/intranet systems and 
web-communities. The company promotes and supports Zope, Plone, Asterisk 
platforms in Russia.

To learn more about Key Solutions visit `eng.keysolutions.ru 
<http://eng.keysolutions.ru/>`_ and
`keysolutions.ru <http://keysolutions.ru/>`_

-- 
Mikhail Kashkin,
Key Solutions (http://keysolutions.ru/)
Director
Zope/Asterisk/Plone - Solutions/Consulting/Support
Plone ?? ??????? http://plone.org.ru/
Plone Foundation Member (http://plone.org/foundation/members/)




From exarkun at divmod.com  Wed Sep 28 19:21:13 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 19:21:13 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14589 - finally add
 readChunk, writeChunk to ivfs.IFileSystemLeaf 's interface
In-Reply-To: <E1EKg2h-0004CM-00@wolfwood>
Message-ID: <20050928232113.3914.1593679305.divmod.quotient.22191@ohm>

On Wed, 28 Sep 2005 11:48:32 -0600, Andy Gayton <andy at wolfwood.twistedmatrix.com> wrote:
>Author: andy
>Date: Wed Sep 28 11:48:31 2005
>New Revision: 14589
>
>Modified:
>   trunk/twisted/vfs/ivfs.py
>Log:
>finally add readChunk, writeChunk to ivfs.IFileSystemLeaf 's interface
>
>Modified: trunk/twisted/vfs/ivfs.py
>==============================================================================
>--- trunk/twisted/vfs/ivfs.py	(original)
>+++ trunk/twisted/vfs/ivfs.py	Wed Sep 28 11:48:31 2005
>@@ -46,6 +46,18 @@
>     def close(self):
>         """closes this node"""
>
>+    def readChunk(self, offset, length):
>+        """
>+        Leaf should have been previously opened with suitable flags.
>+        Reads length bytes or until the end of file from this leaf from
>+        the given offset.
>+        """
>+
>+    def writeChunk(self, offset, data):
>+        """
>+        Leaf should have been previously opened with suitable flags.
>+        Writes data to leaf from the given offset.
>+        """
>

It bothers me that this API differs from stable API for moving piles of bytes, the *other* somewhat controversial newly introduced API for moving piles of bytes around, and the third API being toyed with which is also for moving piles of bytes around.

To all the VFS hackers, could we put some effort into not introducing a fourth API? 

Jp



From jml at mumak.net  Wed Sep 28 19:32:21 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 29 Sep 2005 09:32:21 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14589 - finally add
	readChunk, writeChunk to ivfs.IFileSystemLeaf 's interface
In-Reply-To: <20050928232113.3914.1593679305.divmod.quotient.22191@ohm>
References: <E1EKg2h-0004CM-00@wolfwood>
	<20050928232113.3914.1593679305.divmod.quotient.22191@ohm>
Message-ID: <d06a5cd3050928163253691352@mail.gmail.com>

On 9/29/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Wed, 28 Sep 2005 11:48:32 -0600, Andy Gayton <andy at wolfwood.twistedmatrix.com> wrote:
> >Author: andy
> >Date: Wed Sep 28 11:48:31 2005
> >New Revision: 14589
> >
> >Modified:
> >   trunk/twisted/vfs/ivfs.py
> >Log:
> >finally add readChunk, writeChunk to ivfs.IFileSystemLeaf 's interface
> >
> >Modified: trunk/twisted/vfs/ivfs.py
> >
>
> It bothers me that this API differs from stable API for moving piles of bytes, the *other* somewhat controversial newly introduced API for moving piles of bytes around, and the third API being toyed with which is also for moving piles of bytes around.
>
> To all the VFS hackers, could we put some effort into not introducing a fourth API?
>

You referring to twisted.spread.util.StringPager?



From screwtape at froup.com  Wed Sep 28 19:42:51 2005
From: screwtape at froup.com (Screwtape)
Date: Thu, 29 Sep 2005 09:42:51 +1000
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <433AF3B0.9040709@thecablelounge.com>
References: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>
	<433AF3B0.9040709@thecablelounge.com>
Message-ID: <20050928234251.GA30411@ferd2.thristian.org>

On Thu, Sep 29, 2005 at 05:49:04AM +1000, Andy Gayton wrote:
> James Y Knight wrote:
> >6) Need some support in the interface for extended attributes.
> 
> There's getMetadata. That let's you return arbitrary attributes.

As a know-nothing bystander with just enough knowledge about metadata,
I'm curious. Is there a way to get a list of the kinds of metadata that
are available? Is there a name-spacing system so different kinds of
metadata can be available under different names? For example, a WebDAV
share might (should) expose a 'Content-Type' attribute on every file,
so code might be written that exposes the MIME type of the file in the
'Content-Type' attribute. On the other hand, a file on an NTFS file
system can have arbitarily-named bytestreams associated with it. If the
NTFS VFS module exposes byte-streams under their arbitary names,
a program using the VFS could try to get the content type of a file and
wind up with (several gigabytes of) almost anything.

Another arbitary-metadata system that would be nice to support would be
POSIX extended attributes, but I don't know what the name restrictions
on those would be.



From exarkun at divmod.com  Wed Sep 28 20:04:24 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 20:04:24 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <433AF3B0.9040709@thecablelounge.com>
Message-ID: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>

On Thu, 29 Sep 2005 05:49:04 +1000, Andy Gayton <andy at thecablelounge.com> wrote:
>James Y Knight wrote:
>>So, starting to look through twisted.vfs, I'm finding a few things  that 
>>need work.
>
>Hey James,
>
>Thanks for the feedback.  We need it.  Heaps of decisions for the vfs stuff 
>have been put off to see what other use cases would need from the vfs. 
>Inparticular permissions and metadata.

With that in mind.... ;)

>>1) I see no way of reading from or writing to a file in 
>>ivfs.IFileSystemLeaf.
>
>The vfs stuff is still heavily influenced by the interface that conch 
>expects as sftp has been the main motivation for the current contributors.
>
>Reading and writing is done through writeChunk and readChunk - we've always 
>felt this wasn't quite right though for a general backend. But after two 
>sprints we still haven't come up with something that is better.  Adding the 
>web2.Stream adaptor seems to have glazed over the issue for protocols that 
>read/writeChunk doesn't work for.  Spiv even used streams for the vfs ftp 
>adaptor!

  twisted.vfs should not import things from or depend upon twisted.web2:

    * web2 is unreleased
    * web2's APIs are unstable
    * vfs is more generally applicable than web2 
    * web2's stream abstraction is not generally agreed upon

  If you like, we can talk more about how this interface should work.  However, my first inclination is to say that it should use the existing producer/consumer APIs.  While these are not the best APIs, they are used widely throughout Twisted, and therefore this will give the greatest usability to the resulting VFS code.  While there are adapters between these APIs and web2 streams, I still recommend against web2 streams for the reasons mentioned above.

>
>I've added read/writeChunk to ivfs.IFileSystemLeaf's interface.

  I mentioned these in a separate email, so I won't repeat those points.

>>2) createFile is racy -- it requires opening a file by the given  name, 
>>with default permissions, then immediately closing it.
>
>:), racy is good right?
>>In  addition, it doesn't specify whether it's an error if the file  already 
>>exists.
>
>It should, I've added this to the interface.
>>3) Looks like all operations are blocking? What about a remote vfs? I 
>>think every operation in the vfs interface ought to be non-blocking.
>
>The other option is the vfs interface could be maybe deferred.  Most 
>protocols are good at handling this (sftp, streams).  But given how easy it 
>is to return deferred.succeed - it's probably simpler to say always non- 
>blocking.

  I assume you mean that they should always return a Deferred.  In this case, I agree.  maybeDeferred is intended as a convenience for application-level code.  Framework-level code can avoid introducing the need for it at the application-level by simply always using Deferreds.

>>4) IFileSystemNode.remove doesn't say whether it's a recursive delete  (on 
>>a directory)
>
>Hrm yeah - should it?  Or should this be handled by higher level utilities 
>(eg shutil).  The current os backend uses os.rmdir, so doesn't do a 
>recursive delete.  I've updated the interface to say that it doesn't.
>>, and .rename don't specify whether newName can be in  a different 
>>directory, whether it replaces an existing file, or  whether it works on a 
>>directory.
>
>The method is against Node, so it works on directories.
>
>This is os.rename's spec:
>
>---
>Rename the file or directory src to dst. If dst is a directory, OSError will 
>be raised. On Unix, if dst exists and is a file, it will be removed silently 
>if the user has permission. The operation may fail on some Unix flavors if 
>src and dst are on different filesystems. If successful, the renaming will 
>be an atomic operation (this is a POSIX requirement). On Windows, if dst 
>already exists, OSError will be raised even if it is a file; there may be no 
>way to implement an atomic rename when dst names an existing file. 
>Availability: Macintosh, Unix, Windows.
>---
>
>Should vfs be aiming to provide consistent behaviour for all operations 
>across all backends?  Or should some behaviour be left down to the 
>particular backend to decide?
>
>For the moment I've updated the interface to read:
>
>Renames this node to newName.  newName can be in a different directory.  If 
>the destination is an existing directory, an error will be raised.

The semantics provided by vfs should be the same across all platforms and all backends.  Since os.rename's semantics vary between platforms, this probably eliminates it from (unaided) use in an implementation.  .rename() in VFS should work across filesystems, guarantee atomicity (if this is feasible - I think it is.  If not, it should explicitly deny atomicity), and have well-defined edge cases (for example, whether an exception is raised because the destination exists already should be defined one way or the other, and that's how it should always work).

>>5) Errors are coarse-grained. Everything is a VFSError, and the only 
>>detailed information is in human-readable text, not any nice computer- 
>>readable form.
>
>yeah :( that needs to be fixed.
>>6) Need some support in the interface for extended attributes.
>
>There's getMetadata. That let's you return arbitrary attributes.
>
>Would that cover what you're thinking?
>
>Protocol's should try to get by with as little metadata as they can.  If a 
>backend doesn't supply a bit of metadata a protocol must have, then it won't 
>be able to be used with the protocol.
>

There needs to be a convention for the format of this metadata.  Protocol implementations should not need to be familiar with the backend they are using, and different backends should provide the same metadata in the same way.  It may make sense to expand the example dictionary in getMetadata's docstring, and continue expanding it as new requirements are made (perhaps getMetadata's docstring isn't the best place for this information, either).  This still doesn't strike me as ideal, but it's better than nothing.

Going further, I'd like to see pathutils implemented in terms of twisted.python.filepath: there's a lot of code duplication between these two modules.

The code in twisted/vfs/adapters/dav.py is misplaced.  Itamar posted to this list about this issue a couple weeks ago, but I'll re-iterate.  Third-party package dependencies need to be considered carefully.  Most importantly, dependencies *must* not be cyclic.  Twisted cannot import from akadav, because akadav imports from Twisted.  If akadav can be used to provide VFS functionality, then the adapters to do so belong in akadav, or in some other package: not beneath the Python package "twisted".

As I mentioned above, twisted/vfs/adapters/ftp.py and stream.py shouldn't be importing from twisted.web2.  Likewise, twisted/vfs/adapters/sftp.py's dependence on twisted.conch is backwards: twisted.conch should provide code which augments twisted.vfs.  These are both great candidates for use of the plugin system.  This also lets you take care of the nasty registration-requires-import issues, since gathering plugins will necessarily import the required modules, or if not, will provide a hook so that they can be imported at precisely the right time.

Some easy things: new code in Twisted should use new-style classes; modules should have `test-case-name' declarations; zope Interface's convention is to not include "self" in method declarations; "type(x) is y" is generally wrong - osfs.py uses it in getMode() - both because isinstance() should really be used, and because type checking generally indicates some weakness in an API (why might the mode be either a string or an integer?  pick one and require only that).

I hope this doesn't come off as too critical :)  I'm very much looking forward to the day when setting up a dav server against a purely virtual, dynamic filesystem is as easy as implementing a couple interfaces out of ivfs.py.

Jp



From foom at fuhm.net  Wed Sep 28 20:35:40 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Sep 2005 20:35:40 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
References: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
Message-ID: <A11A5BDC-0CB9-492C-8CBB-5054B78DBF24@fuhm.net>

On Sep 28, 2005, at 8:04 PM, Jp Calderone wrote:
>  twisted.vfs should not import things from or depend upon  
> twisted.web2:
>
>    * web2 is unreleased
>    * web2's APIs are unstable
>    * vfs is more generally applicable than web2    * web2's stream  
> abstraction is not generally agreed upon
>
>  If you like, we can talk more about how this interface should  
> work.  However, my first inclination is to say that it should use  
> the existing producer/consumer APIs.  While these are not the best  
> APIs, they are used widely throughout Twisted, and therefore this  
> will give the greatest usability to the resulting VFS code.  While  
> there are adapters between these APIs and web2 streams, I still  
> recommend against web2 streams for the reasons mentioned above.
>

Twisted.vfs should not depend upon a module in twisted.web2 when  
twisted.vfs gets released. However, it is okay for it to depend upon  
that stream _code_ if it gets moved into twisted core before vfs is  
released. The idea all along has been to move t.w2.stream into  
twisted core when it is stable and useful. So I wouldn't worry about  
tearing it out of t.vfs quite yet.

Now, my first inclination is that the current block API *is* the  
right primitive for a file.

Also, in particular, making it use the old producer abstraction as a  
primitive is just asking for trouble. As the producer abstraction  
lets the producer send data asynchronously at any point, it becomes  
almost impossible to do a relatively simple operation like reading a  
part of a file. That is why, for web2, I had to drop it and make a  
new API that has the consumer request the data. I think the same  
reasoning applies here.

Again, I think that all requests for tearing various adapters and  
other bits out of twisted.vfs are currently completely premature. At  
this point in its development, it is critical that adapters for many  
different systems are created, to make sure that vfs has the  
appropriate abstractions and APIs to handle all use cases. And given  
that vfs is itself heavily under development, it makes no sense to  
request that said adapters be adopted upstream in each other project,  
yet.

James



From foom at fuhm.net  Wed Sep 28 20:39:34 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Sep 2005 20:39:34 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <433AF3B0.9040709@thecablelounge.com>
References: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>
	<433AF3B0.9040709@thecablelounge.com>
Message-ID: <9639B242-976A-44B8-B0F9-12BE8AB7F306@fuhm.net>

On Sep 28, 2005, at 3:49 PM, Andy Gayton wrote:
> There's getMetadata. That let's you return arbitrary attributes.
>
> Would that cover what you're thinking?

No -- one problem is that extended metadata can be potentially very  
large (just as large as the file's normal contents). Another is that  
there may be potentially a large number of such attributes. So, you  
really don't want to return all of it with one call -- you want to  
explicitly ask for certain attributes. See the getxattr, listxattr,  
etc functions for what it the low-level functionality looks like in  
linux. At the moment this interface varies slightly between OSX,  
FreeBSD, and Linux, but they're almost the same. The OSX one adds an  
offset parameter to get/set, and the freebsd one adds a "namespace"  
parameter, to distinguish between root-only attributes and user  
attributes.

I think it may be best to model it as a special kind of child, as it  
seems as if that's the way people are moving their thinking anyhow.
  IFileSystemNode.xattrContainer() -> IFileSystemContainer

That returned object would then allow the use of the same createFile/ 
child/remove/rename/open/read operations as on normal children. It  
would have to throw errors if you try doing excessively "interesting"  
things, like trying to create directories in it, but I think that's  
probably okay.

On the other hand, some people think xattrs are only for small  
metadata, and that "subfiles" or "named forks" are an altogether  
different thing. I'm not sure if that means that it's necessarily a  
bad idea to present both as fileish objects though.

Some interface to this is necessary for properly functioning WebDAV  
(and smb if anyone ever wanted to implement that mess).

> Protocol's should try to get by with as little metadata as they  
> can.  If a backend doesn't supply a bit of metadata a protocol must  
> have, then it won't be able to be used with the protocol.

Support for xattrs can also be optional in a backend.

Eventually, support for POSIX ACLs should also be considered. I don't  
really have the first clue how that should be modeled though.

James



From foom at fuhm.net  Wed Sep 28 21:01:26 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Sep 2005 21:01:26 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
References: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
Message-ID: <E164C1E1-D812-4738-A3F4-1B01BC992568@fuhm.net>


On Sep 28, 2005, at 8:04 PM, Jp Calderone wrote:

> rename() in VFS should work across filesystems,
>

Hm, that is going to be an interesting one to implement. I'm thinking  
in particular about what happens when you have a structure like:
/ -> adhoc.AdhocDirectory:
   tmp -> osfs.OSDirectory("/home/jknight/tmp", ...)
   home -> inmem.FakeDirectory(...)

and I ask to move a file from /tmp/foo to /home/bar.

IMO it is reasonable to say that the VFS 'rename' operation is  
allowed to cleanly fail, and not do the rename, forcing a higher  
level to do a copy/delete if it wants. This pushes the complication  
out of each VFS implementation to one implementation that will work  
across all, and furthermore can share its code with the copy  
implementation. This maps nicely to rename(2), as well, as a bonus.

> guarantee atomicity (if this is feasible - I think it is.  If not,  
> it should explicitly deny atomicity),

It isn't feasible, when renaming across filesystems. There will  
certainly have to be a time at which both 'from' and 'to' exist.  
Additionally, it may be impossible to create a file 'to+".tmp"' (or  
similar) in the target directory to atomically rename to 'to' when  
you've finished copying, because of permissions. Another reason to  
restrict "rename" to be the simple rename, rather than the  
copy&delete-rename.

James




From exarkun at divmod.com  Wed Sep 28 21:15:18 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 21:15:18 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <A11A5BDC-0CB9-492C-8CBB-5054B78DBF24@fuhm.net>
Message-ID: <20050929011518.3914.1921089064.divmod.quotient.22221@ohm>

On Wed, 28 Sep 2005 20:35:40 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Sep 28, 2005, at 8:04 PM, Jp Calderone wrote:
>>  twisted.vfs should not import things from or depend upon  twisted.web2:
>>
>>    * web2 is unreleased
>>    * web2's APIs are unstable
>>    * vfs is more generally applicable than web2    * web2's stream 
>>abstraction is not generally agreed upon
>>
>>  If you like, we can talk more about how this interface should  work. 
>>However, my first inclination is to say that it should use  the existing 
>>producer/consumer APIs.  While these are not the best  APIs, they are used 
>>widely throughout Twisted, and therefore this  will give the greatest 
>>usability to the resulting VFS code.  While  there are adapters between 
>>these APIs and web2 streams, I still  recommend against web2 streams for 
>>the reasons mentioned above.
>
>Twisted.vfs should not depend upon a module in twisted.web2 when 
>twisted.vfs gets released. However, it is okay for it to depend upon  that 
>stream _code_ if it gets moved into twisted core before vfs is  released. 
>The idea all along has been to move t.w2.stream into  twisted core when it 
>is stable and useful. So I wouldn't worry about  tearing it out of t.vfs 
>quite yet.

That mildly addresses one of four points.  At the very least, the remaining three seem to remain valid.

>
>Now, my first inclination is that the current block API *is* the  right 
>primitive for a file.

It precludes writing large amounts of data to a file simply.

>
>Also, in particular, making it use the old producer abstraction as a 
>primitive is just asking for trouble. As the producer abstraction  lets the 
>producer send data asynchronously at any point, it becomes  almost 
>impossible to do a relatively simple operation like reading a  part of a 
>file. That is why, for web2, I had to drop it and make a  new API that has 
>the consumer request the data. I think the same  reasoning applies here.

The old API is not fantastic.  On the other hand, it's entirely servicable.  I don't understand why you think it is almost impossible to read part of a file using it.  In fact, I've done just this one several occasions.

>
>Again, I think that all requests for tearing various adapters and  other 
>bits out of twisted.vfs are currently completely premature. At  this point 
>in its development, it is critical that adapters for many  different systems 
>are created, to make sure that vfs has the  appropriate abstractions and 
>APIs to handle all use cases. And given  that vfs is itself heavily under 
>development, it makes no sense to  request that said adapters be adopted 
>upstream in each other project,  yet.

They can be removed from twisted.vfs without being removed from the Twisted repository.  Or they could be left in twisted.vfs but developed in a branch.  That is policy for major feature development, after all.

Jp



From exarkun at divmod.com  Wed Sep 28 21:19:25 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 21:19:25 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <E164C1E1-D812-4738-A3F4-1B01BC992568@fuhm.net>
Message-ID: <20050929011925.3914.1422986750.divmod.quotient.22223@ohm>

On Wed, 28 Sep 2005 21:01:26 -0400, James Y Knight <foom at fuhm.net> wrote:
>
>On Sep 28, 2005, at 8:04 PM, Jp Calderone wrote:
>>rename() in VFS should work across filesystems,
>
>Hm, that is going to be an interesting one to implement. I'm thinking  in 
>particular about what happens when you have a structure like:
>/ -> adhoc.AdhocDirectory:
>   tmp -> osfs.OSDirectory("/home/jknight/tmp", ...)
>   home -> inmem.FakeDirectory(...)
>
>and I ask to move a file from /tmp/foo to /home/bar.
>

I can see ways to make this work.  They involve temporary files, as you mention below.  If we rule those out, it does become harder.

>IMO it is reasonable to say that the VFS 'rename' operation is  allowed to 
>cleanly fail, and not do the rename, forcing a higher  level to do a 
>copy/delete if it wants. This pushes the complication  out of each VFS 
>implementation to one implementation that will work  across all, and 
>furthermore can share its code with the copy  implementation. This maps 
>nicely to rename(2), as well, as a bonus.
>>guarantee atomicity (if this is feasible - I think it is.  If not,  it 
>>should explicitly deny atomicity),
>
>It isn't feasible, when renaming across filesystems. There will  certainly 
>have to be a time at which both 'from' and 'to' exist.  Additionally, it may 
>be impossible to create a file 'to+".tmp"' (or  similar) in the target 
>directory to atomically rename to 'to' when  you've finished copying, 
>because of permissions. Another reason to  restrict "rename" to be the 
>simple rename, rather than the  copy&delete-rename.

When are you allowed to create a file named "foo" in a directory, but not allowed to create a file named "foo.tmp"?

Anyway, I think it's worth a try at least.  If it turns out to not be possible, then certainly it should not be done :)  I am mainly concerned that there be consistent behavior across backends.  Writing code that deals with the quirks of os.rename() on Win32 is annoying, to say the least (and realisticly, just plain error prone).

Jp



From yong27 at gmail.com  Wed Sep 28 21:28:31 2005
From: yong27 at gmail.com (Hyungyong Kim)
Date: Thu, 29 Sep 2005 10:28:31 +0900
Subject: [Twisted-Python] how to unittest the deferred
Message-ID: <cf2492c50509281828798c8e8b@mail.gmail.com>

Hi all,

I'm newbie of Twisted. It's my first posting to this mail list. I'm
sorry for my stupid question.

Because I'm not familiar with asnyc programming, I'm suffering with
deferred. So I want to make unittest to check result easily as follow.

"""
from twisted.trial import unittest
from twisted.internet import defer, reactor

def someFunction():
    d = defer.Deferred()
    d.addCallback(gotValue)
    return d

def gotValue(myExpect):
    return "result"

class SomeTest(unittest.TestCase):
    def test1(self):
        self.assertEquals('result', unittest.deferredResult(someFunction()))
"""

But this test is not working. How can I check the "result" value.
Thanks for your kind support.

Hyungyong



From exarkun at divmod.com  Wed Sep 28 21:35:11 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 21:35:11 -0400
Subject: [Twisted-Python] how to unittest the deferred
In-Reply-To: <cf2492c50509281828798c8e8b@mail.gmail.com>
Message-ID: <20050929013511.3914.1921404204.divmod.quotient.22227@ohm>

On Thu, 29 Sep 2005 10:28:31 +0900, Hyungyong Kim <yong27 at gmail.com> wrote:
>Hi all,
>
>I'm newbie of Twisted. It's my first posting to this mail list. I'm
>sorry for my stupid question.
>
>Because I'm not familiar with asnyc programming, I'm suffering with
>deferred. So I want to make unittest to check result easily as follow.
>
>"""
>from twisted.trial import unittest
>from twisted.internet import defer, reactor
>
>def someFunction():
>    d = defer.Deferred()
>    d.addCallback(gotValue)
>    return d
>
>def gotValue(myExpect):
>    return "result"
>
>class SomeTest(unittest.TestCase):
>    def test1(self):
>        self.assertEquals('result', unittest.deferredResult(someFunction()))
>"""
>
>But this test is not working. How can I check the "result" value.
>Thanks for your kind support.

I'm not entirely certain why the above doesn't work, although I could make some good guesses.  Here's the preferred way to write such a test:

    class SomeTest(unittest.TestCase):
        def test1(self):
            d = someFunction()
            d.addCallack(self.assertEquals, 'result')
            return d

Jp



From mary-twisted at puzzling.org  Wed Sep 28 21:38:51 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 29 Sep 2005 11:38:51 +1000
Subject: [Twisted-Python] how to unittest the deferred
In-Reply-To: <20050929013511.3914.1921404204.divmod.quotient.22227@ohm>
References: <cf2492c50509281828798c8e8b@mail.gmail.com>
	<20050929013511.3914.1921404204.divmod.quotient.22227@ohm>
Message-ID: <20050929013851.GC23529@home.puzzling.org>

On Wed, Sep 28, 2005, Jp Calderone wrote:
>            d.addCallack(self.assertEquals, 'result')
                      ^ typo here?

-Mary



From exarkun at divmod.com  Wed Sep 28 21:43:49 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 21:43:49 -0400
Subject: [Twisted-Python] how to unittest the deferred
In-Reply-To: <20050929013851.GC23529@home.puzzling.org>
Message-ID: <20050929014349.3914.811616114.divmod.quotient.22230@ohm>

On Thu, 29 Sep 2005 11:38:51 +1000, Mary Gardiner <mary-twisted at puzzling.org> wrote:
>On Wed, Sep 28, 2005, Jp Calderone wrote:
>>            d.addCallack(self.assertEquals, 'result')
>                      ^ typo here?
>
>-Mary
>

Indeed.  Make that addCallback, in case it isn't clear.  Thanks Mary.

Jp



From yong27 at gmail.com  Wed Sep 28 21:59:43 2005
From: yong27 at gmail.com (Hyungyong Kim)
Date: Thu, 29 Sep 2005 10:59:43 +0900
Subject: [Twisted-Python] how to unittest the deferred
In-Reply-To: <20050929013511.3914.1921404204.divmod.quotient.22227@ohm>
References: <cf2492c50509281828798c8e8b@mail.gmail.com>
	<20050929013511.3914.1921404204.divmod.quotient.22227@ohm>
Message-ID: <cf2492c505092818592d55567@mail.gmail.com>

Thanks for your answer.

But, in this case, any values are OK. Try to test that after replace
'result' to 'aaa'. I'm testing it using "trial" command.

2005/9/29, Jp Calderone <exarkun at divmod.com>:
> I'm not entirely certain why the above doesn't work, although I could make some good guesses.  Here's the preferred way to write such a test:
>
>     class SomeTest(unittest.TestCase):
>         def test1(self):
>             d = someFunction()
>             d.addCallack(self.assertEquals, 'result')
>             return d
>
> Jp
>

How can I test that. In my real code, someFunction returns deferred
from DB connection.



From jml at mumak.net  Wed Sep 28 22:12:23 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 29 Sep 2005 12:12:23 +1000
Subject: [Twisted-Python] how to unittest the deferred
In-Reply-To: <cf2492c505092818592d55567@mail.gmail.com>
References: <cf2492c50509281828798c8e8b@mail.gmail.com>
	<20050929013511.3914.1921404204.divmod.quotient.22227@ohm>
	<cf2492c505092818592d55567@mail.gmail.com>
Message-ID: <d06a5cd305092819124743f81d@mail.gmail.com>

On 9/29/05, Hyungyong Kim <yong27 at gmail.com> wrote:
> Thanks for your answer.
>
> But, in this case, any values are OK. Try to test that after replace
> 'result' to 'aaa'. I'm testing it using "trial" command.
>
> 2005/9/29, Jp Calderone <exarkun at divmod.com>:
> > I'm not entirely certain why the above doesn't work, although I could make some good guesses.  Here's the preferred way to write such a test:
> >
> >     class SomeTest(unittest.TestCase):
> >         def test1(self):
> >             d = someFunction()
> >             d.addCallack(self.assertEquals, 'result')
> >             return d
> >
> > Jp
> >
>
> How can I test that. In my real code, someFunction returns deferred
> from DB connection.
>

I don't really understand your question.  I'll explain what Trial does
in the hope that I answer it by accident.

If your test returns a Deferred (as in SomeTests.test1), Trial will
wait until that Deferred has fired before proceeding to the next test.

In the example 'test1', someFunction() returns a deferred.  After the
deferred fires (most likely after the connection is made to the
database), self.assertEquals will get called (by your Deferred), kind
of like:
    self.assertEquals(thingReturnedEventuallyBySomeFunction, 'result')

If the assertion fails, Trial will record it as a failure. Otherwise
it will be marked as a success.


If you want to connect to the database, *then* do some testing on
something else, here's how it might look:

class DBTest(unittest.TestCase):
    def testDbThing(self):
        d = getDBConnection()
        d.addCallback(self._cb_testDbThing)
        return d

    def _cb_testDbThing(self, connection):
        d = connection.doSomething()
        d.addCallback(self.assertEquals, 'expectedValue')
        return d


I hope this helps,
jml



From andy at thecablelounge.com  Thu Sep 29 07:25:07 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Thu, 29 Sep 2005 21:25:07 +1000
Subject: [Twisted-Python] twisted.vfs issues - web2 dependency
In-Reply-To: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
References: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
Message-ID: <433BCF13.6080102@thecablelounge.com>

I'll have another shot at this :)

Jp Calderone wrote:
>    * web2 is unreleased

vfs is unreleased.  I think it's pretty safe to say it should stay that 
way at least until web2 is released.

>    * web2's APIs are unstable

vfs' APIs are obscenely unstable.

>    * vfs is more generally applicable than web2    

as is web2's stream.  As James pointed hopefully stream will eventually 
move into twisted core.

 >    * web2's stream abstraction is not generally agreed upon

fair point.  but this just means as stream's abstraction is reworked to 
meet general consensus - vfs will need to be rewritten to meet the changes.

 >  If you like, we can talk more about how this interface should work.
 > However, my first inclination is to say that it should use the existing
 > producer/consumer APIs.

It would be fairly straight forward to add an adapter from ivfs to 
producer/consumers if someone has a need for it.

I personally was keen to use streams with vfs as, being new project that 
has the luxury of being unstable, I wanted to pitch at were twisted was 
heading.  I was also hoping to add to web2's momentum - nevow on web2 
still feels a long way off and its something I'd really like to see.

Andy.




From andy at thecablelounge.com  Thu Sep 29 07:47:07 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Thu, 29 Sep 2005 21:47:07 +1000
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <20050929011518.3914.1921089064.divmod.quotient.22221@ohm>
References: <20050929011518.3914.1921089064.divmod.quotient.22221@ohm>
Message-ID: <433BD43B.9090101@thecablelounge.com>

Jp Calderone wrote:
> On Wed, 28 Sep 2005 20:35:40 -0400, James Y Knight <foom at fuhm.net> wrote:
> 
>> On Sep 28, 2005, at 8:04 PM, Jp Calderone wrote:
>> 

(in regards to read/writeChunk)

>> Now, my first inclination is that the current block API *is* the  
>> right primitive for a file.
> 
> It precludes writing large amounts of data to a file simply.

I think the main reason they've won out till now is that its incrediably 
easy to implement for backend implementors, and being so primitive, 
extremely easy to compose into higher abstractions (streams, 
producers/consumers or a convenience that lets you write large amounts 
of data to a file simply) through the use of adaptors.

the ftp adaptor making using of the stream adaptor is a pretty good 
example of this.

>> Again, I think that all requests for tearing various adapters and  
>> other bits out of twisted.vfs are currently completely premature. At  
>> this point in its development, it is critical that adapters for many  
>> different systems are created, to make sure that vfs has the  
>> appropriate abstractions and APIs to handle all use cases. And given  
>> that vfs is itself heavily under development, it makes no sense to  
>> request that said adapters be adopted upstream in each other project,  
>> yet.
> 
> They can be removed from twisted.vfs without being removed from the 
> Twisted repository.  Or they could be left in twisted.vfs but developed 
> in a branch.  That is policy for major feature development, after all.

I think the vfs stuff would really benefit by being prodded and exposed 
to as many use cases as possible.  It's been doing what I need it do for 
  around 6 months (except for dav - dav'd be awesome!:)) so it's hard to 
find motivation to work on it.

But I appreciate where your coming from.  I taken out the dav adaptor 
which was a failed experiment from the first sprint.  I think the only
controversial dependency left is web2, which I've discussed in another mail.

Andy.



From andy at thecablelounge.com  Thu Sep 29 08:43:04 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Thu, 29 Sep 2005 22:43:04 +1000
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
References: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
Message-ID: <433BE158.1000400@thecablelounge.com>

Jp Calderone wrote:
> On Thu, 29 Sep 2005 05:49:04 +1000, Andy Gayton 
> <andy at thecablelounge.com> wrote:
> 
>> James Y Knight wrote:

>  I assume you mean that they should always return a Deferred.  In this 
> case, I agree.  maybeDeferred is intended as a convenience for 
> application-level code.  Framework-level code can avoid introducing the 
> need for it at the application-level by simply always using Deferreds.

ok, http://twistedmatrix.com/bugs/issue1223

> The semantics provided by vfs should be the same across all platforms 
> and all backends.  Since os.rename's semantics vary between platforms, 
> this probably eliminates it from (unaided) use in an implementation.  
> .rename() in VFS should work across filesystems, guarantee atomicity (if 
> this is feasible - I think it is.  If not, it should explicitly deny 
> atomicity), and have well-defined edge cases (for example, whether an 
> exception is raised because the destination exists already should be 
> defined one way or the other, and that's how it should always work).

all that stuff on rename sounds great (moving between filesystems etc) 
.. might as well aim for it until its not possible.

http://twistedmatrix.com/bugs/issue1224

>>> 5) Errors are coarse-grained. Everything is a VFSError, and the only 
>>> detailed information is in human-readable text, not any nice 
>>> computer- readable form.

http://twistedmatrix.com/bugs/issue1225

> Going further, I'd like to see pathutils implemented in terms of 
> twisted.python.filepath: there's a lot of code duplication between these 
> two modules.

yep, http://twistedmatrix.com/bugs/issue1226

> As I mentioned above, twisted/vfs/adapters/ftp.py and stream.py 
> shouldn't be importing from twisted.web2.  Likewise, 
> twisted/vfs/adapters/sftp.py's dependence on twisted.conch is backwards: 
> twisted.conch should provide code which augments twisted.vfs.  These are 
> both great candidates for use of the plugin system.  This also lets you 
> take care of the nasty registration-requires-import issues, since 
> gathering plugins will necessarily import the required modules, or if 
> not, will provide a hook so that they can be imported at precisely the 
> right time.

ok - will check out the plugins stuff.  just haven't come across it yet.

> Some easy things: new code in Twisted should use new-style classes; 
> modules should have `test-case-name' declarations; zope Interface's 
> convention is to not include "self" in method declarations; "type(x) is 
> y" is generally wrong - osfs.py uses it in getMode() - both because 
> isinstance() should really be used, and because type checking generally 
> indicates some weakness in an API (why might the mode be either a string 
> or an integer?  pick one and require only that).

http://twistedmatrix.com/bugs/issue1227

> I hope this doesn't come off as too critical :)  I'm very much looking 
> forward to the day when setting up a dav server against a purely 
> virtual, dynamic filesystem is as easy as implementing a couple 
> interfaces out of ivfs.py.

Not at all.  The feedback is appreciated.

Andy.



From andy at thecablelounge.com  Thu Sep 29 08:47:46 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Thu, 29 Sep 2005 22:47:46 +1000
Subject: [Twisted-Python] twisted.vfs issues - metadata
In-Reply-To: <9639B242-976A-44B8-B0F9-12BE8AB7F306@fuhm.net>
References: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>	<433AF3B0.9040709@thecablelounge.com>
	<9639B242-976A-44B8-B0F9-12BE8AB7F306@fuhm.net>
Message-ID: <433BE272.20803@thecablelounge.com>


> On Sep 28, 2005, at 3:49 PM, Andy Gayton wrote:
>> There's getMetadata. That let's you return arbitrary attributes.
>> Would that cover what you're thinking?

James Y Knight wrote:
> No -- one problem is that extended metadata can be potentially very  
> large (just as large as the file's normal contents). Another is that  
> there may be potentially a large number of such attributes. 

> I think it may be best to model it as a special kind of child, as it  
> seems as if that's the way people are moving their thinking anyhow.
>  IFileSystemNode.xattrContainer() -> IFileSystemContainer
> 
> That returned object would then allow the use of the same createFile/ 
> child/remove/rename/open/read operations as on normal children. It  
> would have to throw errors if you try doing excessively "interesting"  
> things, like trying to create directories in it, but I think that's  
> probably okay.

How about getMetadata for simple data (size, content-type)  and a
container as you describe for potentially huge its of data?

hrm, .getattrs, .setattrs, .xattrsContainer ?

There definately should be a way to query what metadata a backend can
provide, and to pass which particular data you are requesting for
performance.  Namespaces might be useful to?  It'd be good to see a use
case to show that they are.

I'm keen to just let WebDAV's requirements drive the design here.  None 
of our uses up till now have had a great demand on metadata.

Andy.



From itamar at itamarst.org  Thu Sep 29 10:39:09 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 29 Sep 2005 10:39:09 -0400
Subject: [Twisted-Python] Twisted test problems on Windows (conch, web2)
Message-ID: <1128004749.8685.25.camel@localhost.localdomain>

Hi,

There are appear to be various import errors and related problems on
Win32 you can see e.g. at
http://twistedmatrix.com/buildbot/win32/builds/690/default/2 which could
be easily fixed. So, if you have the time please take a look at fixing
these. Thanks!




From glyph at divmod.com  Thu Sep 29 12:26:12 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 29 Sep 2005 12:26:12 -0400
Subject: [Twisted-Python] twisted.vfs issues - web2 dependency
In-Reply-To: <433BCF13.6080102@thecablelounge.com>
Message-ID: <20050929162612.3914.1284380906.divmod.quotient.22415@ohm>



On Thu, 29 Sep 2005 21:25:07 +1000, Andy Gayton <andy at thecablelounge.com> wrote:
>I'll have another shot at this :)
>
>Jp Calderone wrote:
>>    * web2 is unreleased

I also object to the dependency, although I would propose the opposite solution:

I don't think that "twisted.vfs" makes *any* sense as a separate project.

web2 should not be a trivial HTTP server with a small resource wrapper in it.  It should be a full-featured web server.  Web does not mean "http" - all web-related protocols, such as WebDAV, ftp, even SOAP or Gopher, should be part of the 'web server' product part of Twisted.

Going forward, I will stipulate this requirement: each independent Twisted subpackage MUST be at least 2 things: a functioning infrastructure layer that can be used by 3rd party applications, and an application which can be used standalone or with application plugins.  In twisted.web's case this application is a "web server", which primarily does HTTP but can provide other request/response based protocols as well.  "application plugins" for the web server are things that respond to requests for particular URLs.

This requirement does imply the removal of a few existing Twisted packages.  twisted.xish and twisted.flow come to mind.  While I don't think that anything is actually using twisted.flow at this point, xish's useful code should move into the package that actually makes use of it (twisted.words.jabber).  twisted.pair should probably just be part of eunuchs; while Twisted applications can use it, it certainly doesn't seem to stand on its own.  I don't think it's important to act particularly quickly since I don't think any of these packages are seeing widespread external usage, but I definitely don't want to create more packages in this situation.

While Twisted packages may not depend on external projects (NO MORE NEVOW IMPORTS ANYWHERE, PLEASE), it is reasonable to have soft internal dependencies; such as web2 including a Conch plugin (importing Conch interfaces) that provides an HTTP/Gopher/etc backend for SFTP.  These dependencies can also be circular, so long as the circularity is between packages and not modules, AND the imports happen after startup; for example, it would also be reasonable for the previous scenario to co-exist with a plugin distributed with conch to enable SFTP servers to be used as web resources.



From foom at fuhm.net  Thu Sep 29 13:54:51 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 29 Sep 2005 13:54:51 -0400
Subject: [Twisted-Python] twisted.vfs issues - web2 dependency
In-Reply-To: <20050929162612.3914.1284380906.divmod.quotient.22415@ohm>
References: <20050929162612.3914.1284380906.divmod.quotient.22415@ohm>
Message-ID: <91C32690-2C25-4825-8EFE-B38E5FD6EA3D@fuhm.net>


On Sep 29, 2005, at 12:26 PM, glyph at divmod.com wrote:
> I don't think that "twisted.vfs" makes *any* sense as a separate  
> project.

Agreed. I had sort of assumed twisted.vfs was a proposed addition to  
twisted core.

James



From mary-twisted at puzzling.org  Thu Sep 29 17:27:12 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 30 Sep 2005 07:27:12 +1000
Subject: Large sub-projects == slow releases?? (Re: [Twisted-Python]
	twisted.vfs issues - web2 dependency)
In-Reply-To: <20050929162612.3914.1284380906.divmod.quotient.22415@ohm>
References: <433BCF13.6080102@thecablelounge.com>
	<20050929162612.3914.1284380906.divmod.quotient.22415@ohm>
Message-ID: <20050929212712.GB9621@sourdust.home.puzzling.org>

On Thu, Sep 29, 2005, glyph at divmod.com wrote:
> web2 should not be a trivial HTTP server with a small resource wrapper
> in it.  It should be a full-featured web server.  Web does not mean
> "http" - all web-related protocols, such as WebDAV, ftp, even SOAP or
> Gopher, should be part of the 'web server' product part of Twisted.

My understanding of the original purpose of the split -- which is
probably wrong -- though was to allow parts of twisted to release
without massive dependencies on near unrelated release critical bugs,
and further to allow users of multiple bits of Twisted to not have to
upgrade them all as a lump. If we have a model where an enormous group
of request-response protocols are lumped with web, we return to the
following release management problems:

 1. rapidly evolving code, like FTP, which seems to have some parts
    working now and were it an independent project should probably be
    having some highly alpha releases, will not be released until it is
    sufficiently stable to be bundled with a more used and mature protocol
    like HTTP, and may in turn block said releases by being highly
    alpha.

 2. relatively unrelated code, like ftp, or the hypotheticals above,
    will need to go unreleased every time there is a major years-long
    rewrite of a large component (web2)

My understanding of the release-early-release-often philosophy was to
encourage early adopting users (who are also more likely to become
contributors). As it is, no sub-project is releasing and core looks set
for a pretty slow ongoing release cycle. I may be naive about this, but
my concern is that while core has critical mass in terms of users, the
protocols and applications largely don't, and won't until they are seen
by potential users to be active and supported, part of which is actually
releasing. Having users in turn has been known to spur development. What
you're proposing sounds like a mature release policy: as in,
sub-projects will be rather monolithic and will release when they're
mature. Is this correct, and if so, will they release?

-Mary



From itamar at itamarst.org  Fri Sep 30 17:10:20 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 30 Sep 2005 17:10:20 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe log.debug,
	and 'printed' and 'debug' log dict items.
In-Reply-To: <E1ELDGl-0004r7-00@wolfwood>
References: <E1ELDGl-0004r7-00@wolfwood>
Message-ID: <1128114620.7914.35.camel@localhost.localdomain>

On Thu, 2005-09-29 at 23:17 -0600, Andrew Bennetts wrote:
> Author: spiv
> Date: Thu Sep 29 23:17:15 2005
> New Revision: 14614
> 
> Modified:
>    trunk/doc/core/howto/logging.xhtml
> Log:
> Describe log.debug, and 'printed' and 'debug' log dict items.

log.debug should die, I think. So it probably shouldn't be documented :)




From eddyxu at 126.com  Thu Sep  1 00:14:42 2005
From: eddyxu at 126.com (EddyXu)
Date: Thu, 01 Sep 2005 14:14:42 +0800
Subject: [Twisted-Python] How to make twisted server run as an deamon
In-Reply-To: <E3EB5811-EA87-404C-A93A-D28F98A877FA@mac.com>
References: <43166204.5090501@126.com>
	<E3EB5811-EA87-404C-A93A-D28F98A877FA@mac.com>
Message-ID: <43169C52.7040009@126.com>

The server which is in your code is inherit from
twisted.application.FOOserver? or some module else? It seems i have
wrote my server in "Low level" which has talked about in HOWTOs. For use
the foo.tac below, do i need rewrite all my server and use
twisted.application instead of the code i use now.?

Bill Bumgarner 写道:

> On Aug 31, 2005, at 7:05 PM, EddyXu wrote:
>
>> I need to write an deamon, by using the twisted. But it seems that it
>> could not use standard thread module to make it works. Any one can give
>> me some advice?
>
>
> You will most likely want to use twistd and write a .tac file that
> starts up your server. Twistd will take care of daemonizing and is
> really quite nice.
>
> --- foo.tac ---
> from twisted.application import service, internet
> import Foo # your server
>
> application = service.Application("foo")
> applicationService = service.IServiceCollection(application)
>
> server = internet.TCPServer(Foo.serverPort(), Foo.serverFactory())
> server.setServiceParent(applicationService)
> --- end foo.tac ---
>
> Except that it doesn't allow command line arguments to be passed in.
> Bummer. Easy to fix, though, I really ought to write up a recipe for
> doing so.
>
> b.bum
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
No more than thinking....






From stefano at pragma2000.com  Thu Sep  1 00:56:27 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 1 Sep 2005 08:56:27 +0200
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <C95EDE8A-D0DD-495F-9B31-E6E1886C7286@fuhm.net>
References: <E1EAaOI-0005Zu-00@pyramid.twistedmatrix.com>
	<C95EDE8A-D0DD-495F-9B31-E6E1886C7286@fuhm.net>
Message-ID: <43274224050831235667dee3a9@mail.gmail.com>

On 8/31/05, James Y Knight <foom at fuhm.net> wrote:
> [PATCH] gthreadless.py  (4 weeks ago)
>         http://twistedmatrix.com/bugs/issue1129 opened by stefanomasini

I updated issue 1129 with a patch containing my implementation of
gthreadless, test code and readme with usage example. I left the
priority as BUG, and status as CHATTING. I don't know if I should
change those.

cheers,
stefano



From bbum at mac.com  Thu Sep  1 01:19:58 2005
From: bbum at mac.com (Bill Bumgarner)
Date: Thu, 1 Sep 2005 00:19:58 -0700
Subject: [Twisted-Python] How to make twisted server run as an deamon
In-Reply-To: <43169C52.7040009@126.com>
References: <43166204.5090501@126.com>
	<E3EB5811-EA87-404C-A93A-D28F98A877FA@mac.com>
	<43169C52.7040009@126.com>
Message-ID: <47AA1E69-B093-481F-965A-08F3AFDEDC53@mac.com>

On Aug 31, 2005, at 11:14 PM, EddyXu wrote:
> The server which is in your code is inherit from
> twisted.application.FOOserver? or some module else? It seems i have
> wrote my server in "Low level" which has talked about in HOWTOs.  
> For use
> the foo.tac below, do i need rewrite all my server and use
> twisted.application instead of the code i use now.?

Far simpler;  you just need an instance of your factory as the second  
argument to internet.TCPServer()...





From eddyxu at 126.com  Thu Sep  1 03:06:39 2005
From: eddyxu at 126.com (EddyXu)
Date: Thu, 01 Sep 2005 17:06:39 +0800
Subject: [Twisted-Python] How to make twisted server run as an deamon
In-Reply-To: <47AA1E69-B093-481F-965A-08F3AFDEDC53@mac.com>
References: <43166204.5090501@126.com>	<E3EB5811-EA87-404C-A93A-D28F98A877FA@mac.com>	<43169C52.7040009@126.com>
	<47AA1E69-B093-481F-965A-08F3AFDEDC53@mac.com>
Message-ID: <4316C49F.4040607@126.com>

Ok , i got it , thank you . Hum, i am a newbie in twisted....it seems i
should refactor the code someday...
Bill Bumgarner 写道:

> On Aug 31, 2005, at 11:14 PM, EddyXu wrote:
>
>> The server which is in your code is inherit from
>> twisted.application.FOOserver? or some module else? It seems i have
>> wrote my server in "Low level" which has talked about in HOWTOs. For use
>> the foo.tac below, do i need rewrite all my server and use
>> twisted.application instead of the code i use now.?
>
>
> Far simpler; you just need an instance of your factory as the second
> argument to internet.TCPServer()...
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
No more than thinking....






From nico at tekNico.net  Thu Sep  1 06:59:14 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 01 Sep 2005 14:59:14 +0200
Subject: [Twisted-Python] Disabling PB (de)serialization
Message-ID: <4316FB22.6050604@tekNico.net>

I'd like to make a PB proxy "transparent". It should be able to get
serialized data via PB without deserializing it, and forward it via PB to
another proxy, without having to serialize it again. The second proxy will
receive the data, and serialize it before sending it to the final destination.

Currently the data are serialized and deserialized three plus threes times,
and that's rather inefficient when dealing with large data.

How do I selectively disable (de)serialization in PB?

-- 
Nicola Larosa - nico at tekNico.net

Lately there's an abundance of improvised censors, and suppliers of
free good advice. What's that, you're out of bad example? Ask again
your usual wholesaler, surely scarcity is just momentary.
 -- N. Larosa, Luglio 2005





From nico at tekNico.net  Thu Sep  1 08:08:11 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 01 Sep 2005 16:08:11 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <4316FB22.6050604@tekNico.net>
References: <4316FB22.6050604@tekNico.net>
Message-ID: <43170B4B.70307@tekNico.net>

> I'd like to make a PB proxy "transparent". It should be able to get
> serialized data via PB without deserializing it, and forward it via PB to
> another proxy, without having to serialize it again. The second proxy will
> receive the data, and serialize it before sending it to the final destination.

That's not quite right, let me try again.

Let's say we have two machines, called 1 and 2. A Twisted process on
machine 1 (TP1) wants to send something via PB to a Twisted process on
machine 2 (TP2). However, we won't let them talk directly, but will make
them go through two proxies, PX1 on machine 1, and PX2 on machine 2.

Then the calling chain is made of three PB calls:

TP1 --PB--> PX1 --PB--> PX2 --PB--> TP2

Each PB call implies one serialization and one deserialization of data:

TP1 -ser-|-deser-> PX1 -ser-||-deser-> PX2 -ser-|-deser-> TP2

Only the first serialization, and last deserialization, are really
necessary. The chain should become like this:

TP1 -ser-|--> PX1 --||--> PX2 --|-deser-> TP2

TP1 serializes, and TP2 deserializes. PX should deal with the serialized
data without changing them in any way.

What's the best way to go for this?

-- 
Nicola Larosa - nico at tekNico.net

Lately there's an abundance of improvised censors, and suppliers of
free good advice. What's that, you're out of bad example? Ask again
your usual wholesaler, surely scarcity is just momentary.
 -- N. Larosa, Luglio 2005





From bbum at mac.com  Thu Sep  1 08:40:14 2005
From: bbum at mac.com (Bill Bumgarner)
Date: Thu, 1 Sep 2005 07:40:14 -0700
Subject: [Twisted-Python] How to make twisted server run as an deamon
In-Reply-To: <4316C49F.4040607@126.com>
References: <43166204.5090501@126.com>
	<E3EB5811-EA87-404C-A93A-D28F98A877FA@mac.com>
	<43169C52.7040009@126.com>
	<47AA1E69-B093-481F-965A-08F3AFDEDC53@mac.com>
	<4316C49F.4040607@126.com>
Message-ID: <E8EEE433-97BD-4A17-A2FC-AD5EE99C36B9@mac.com>

On Sep 1, 2005, at 2:06 AM, EddyXu wrote:
> Ok , i got it , thank you . Hum, i am a newbie in twisted....it  
> seems i
> should refactor the code someday...

We are all a newbie at one time or another.

The key to programming effectively in Twisted seems to be to figure  
out what code you *don't* have to write.

Learning Twisted really reminds me a lot of learning Cocoa (16 years  
ago).   In both cases, the framework gives you a fully functioning  
generic application out of the box.   It is up to you to customize  
that generic application to turn it into the specific solution you need.

b.bum



From stefano at pragma2000.com  Thu Sep  1 09:35:50 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 1 Sep 2005 17:35:50 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <43170B4B.70307@tekNico.net>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
Message-ID: <432742240509010835b3e6c7f@mail.gmail.com>

On 9/1/05, Nicola Larosa <nico at teknico.net> wrote:
> Only the first serialization, and last deserialization, are really
> necessary. The chain should become like this:
> 
> TP1 -ser-|--> PX1 --||--> PX2 --|-deser-> TP2
> 
> TP1 serializes, and TP2 deserializes. PX should deal with the serialized
> data without changing them in any way.
> 
> What's the best way to go for this?

I would say just proxy at the socket level... 
...but maybe you want to make routing decisions? Basing on, say, the
name of the method being called? Or some parameters of the call?
In that case there's not much you can do I think, because both method
name and parameters are part of the serialized data in the pb
protocol.

ciao,
stefano



From nico at tekNico.net  Thu Sep  1 10:05:22 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 01 Sep 2005 18:05:22 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <432742240509010835b3e6c7f@mail.gmail.com>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com>
Message-ID: <df78s3$g76$1@sea.gmane.org>

>> Only the first serialization, and last deserialization, are really
>> necessary. The chain should become like this:
>> 
>> TP1 -ser-|--> PX1 --||--> PX2 --|-deser-> TP2
>> 
>> TP1 serializes, and TP2 deserializes. PX should deal with the serialized
>> data without changing them in any way.
>> 
>> What's the best way to go for this?

> I would say just proxy at the socket level... 
> ....but maybe you want to make routing decisions? Basing on, say, the
> name of the method being called? Or some parameters of the call?
> In that case there's not much you can do I think, because both method
> name and parameters are part of the serialized data in the pb
> protocol.

You hit the nail on the head. The proxies are meant to channel remote calls
for a number of source and destination processes, and the final destination
is designated via call parameters.

In TP1, the business data should be serialized, and wrapped in an outer
layer, containing the destination coordinates. PX1 and PX2 should be able
to only unwrap and deserialize the outer layer only, while trasparently
forwarding the serialized business data.

The question is, how? :-)

-- 
Nicola Larosa - nico at tekNico.net

There is no question that traditional approaches for acute traumas
(heart attack, stroke, accidents, etc.) are valuable and should not
be abandoned. However, overall, when drugs and surgery are used to
address chronic illness, it is generally a prescription for disaster.
 -- Dr. J. Mercola, July 2005




From itamar at itamarst.org  Thu Sep  1 11:17:30 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 01 Sep 2005 13:17:30 -0400
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <df78s3$g76$1@sea.gmane.org>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com> <df78s3$g76$1@sea.gmane.org>
Message-ID: <1125595050.8259.45.camel@localhost.localdomain>

On Thu, 2005-09-01 at 18:05 +0200, Nicola Larosa wrote:

> In TP1, the business data should be serialized, and wrapped in an outer
> layer, containing the destination coordinates. PX1 and PX2 should be able
> to only unwrap and deserialize the outer layer only, while trasparently
> forwarding the serialized business data.

At a guess you'd need to write your own Unjellier class or something. I
suspect this will be much easier in newpb, but I'm not *sure*. Brian?




From stefano at pragma2000.com  Thu Sep  1 23:10:22 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Fri, 2 Sep 2005 07:10:22 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <df78s3$g76$1@sea.gmane.org>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com>
	<df78s3$g76$1@sea.gmane.org>
Message-ID: <4327422405090122107bd01086@mail.gmail.com>

On 9/1/05, Nicola Larosa <nico at teknico.net> wrote:
> You hit the nail on the head. The proxies are meant to channel remote calls
> for a number of source and destination processes, and the final destination
> is designated via call parameters.
> 
> The question is, how? :-)

If the business data is not a lot larger than the routing control
data, you may well leave everything as it is, because you already need
some unavoidable serialization/deserialization steps.
If, on the other hand, there is a high ratio, saving the
deserialization step for the business data could help. For that, if
you don't want to go as low level as to rewrite a custom serialization
protocol for pb, why don't you use two channels, like in good old ftp?
One for control, and the other for data? The latter would be a simple
socket, and you would chain each of those channels together until you
route to the final destination. At that point the end systems would be
able to speak whatever they want (pb, for example) over that
multi-proxied channel.

... but I do realize this is not quite a simple solution either! ;)

stefano



From radeex at gmail.com  Sat Sep  3 01:51:01 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 3 Sep 2005 17:51:01 +1000
Subject: [Twisted-Python] Speaking of defgen
Message-ID: <60ed19d405090300512e7f791f@mail.gmail.com>

I've just implemented a tiny module for integrating with PEP 342[1]
generators. It's called newdefgen.py and it's available in my
sandbox[2]. A bit more information is available on my blog[3]. Of
course, it requires CVS Python as that is the only place where PEP 342
is currently implemented, but it'll be in Python 2.5, whenever that's
released.

Have fun!

1: http://python.org/peps/pep-0342.html
2: http://svn.twistedmatrix.com/cvs/sandbox/radix/newdefgen.py?view=markup&rev=14348
3: http://radix.twistedmatrix.com/archives/000114.html

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From sflist at ihonk.com  Sat Sep  3 11:35:36 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Sat, 03 Sep 2005 10:35:36 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <4327422405090122107bd01086@mail.gmail.com>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com> <df78s3$g76$1@sea.gmane.org>
	<4327422405090122107bd01086@mail.gmail.com>
Message-ID: <1125768936.1199.5.camel@lothar>

On Fri, 2005-09-02 at 07:10 +0200, Stefano Masini wrote:
> if you don't want to go as low level as to rewrite a custom serialization
> protocol for pb, why don't you use two channels, like in good old ftp?
> One for control, and the other for data?

That's what I did for my application -- I had a similar need, so I set
up another protocol to listen on another port, use the control channel
(PB) to coordinate the connections, generate random tokens to provide
some means of verifying that the connecting client is who I think it is,
and so on. It works quite well, but it certainly would be sweet if PB
had the ability to, say, declare certain methods to send and receive raw
data only.

Steve




From jamessaker at firepole.com  Sat Sep  3 13:17:07 2005
From: jamessaker at firepole.com (James Saker)
Date: Sat, 3 Sep 2005 14:17:07 -0500
Subject: [Twisted-Python] Twisted UDP & makeConnection
Message-ID: <200509031417.13952.jamessaker@firepole.com>

Got a bit of a puzzle trying to make a minimal syslog relay out of twisted and 
am wondering if it's due to an incompatibility between ServerFactory and 
Twisted's UDP, or if I'm simply missing something obvious.

In trying to learn Twisted better, I've taken the finger13.py sample and have 
changed it to listen to the syslog UDP port and echo messages (code follows 
this message). One minor variation is that I want to only take UDP messages 
from hosts in my hostlist (granted UDP can be easily spoofed, but that's 
another matter).

I'm invoking finger13 with twistd, and end up with twistd complaining about 
the ServerFactory instance not having an attribute "makeConnection.":

2005/09/03 14:06 CDT [-] AttributeError: ServerFactory instance has no 
attribute 'makeConnection'

 I've traced this message back to Twisted's udp.py (line 96, 
_connectToProtocol) which refers to self.protocol, and self.protocol is the 
protocol passed in when class Port is initialized (self.protocol = proto). 
I've tried putting makeConnection in the BSDSyslogProtocol class but that 
doesn't work; actually, I'm surprised it's complaining because the parent 
twisted DatagramProtocol class has a makeConnection method.

Perhaps factories need to be handled differently for UDP? I'm stumped!

Jamie


# syslogd13.py Based on finger13.py 
from twisted.application import internet, service
from twisted.internet import protocol, reactor, defer
from twisted.internet.protocol import DatagramProtocol
from twisted.protocols import basic

class BSDSyslogProtocol(DatagramProtocol):
    
    def datagramReceived(self, data, (host, port)):
        self.factory.getMessage(data
        ).addErrback(lambda _: "Internal error in server"
        ).addCallback(self.transport.loseConnection())
    def makeConnection(self): pass

class ValidHostSetterProtocol(basic.LineReceiver):
    def connectionMade(self): self.lines = []
    
    def lineReceived(self, line): 
        self.lines.append(line)
    def connectionLost(self, _connDropMsg):
        for line in self.lines:
            print "Received the following." % line

class SyslogRelayService(service.Service):
    def __init__(self, *args, **kwargs):
        self.parent.__init__(self, *args)
        self.hosts = kwargs
    def getHost(self, host):
        return defer.succeed(self.hosts.get(host, "No such host"))
    def getHostFactory(self):
        h = protocol.ServerFactory()
        h.protocol, h.getHost = BSDSyslogProtocol, self.getHost
        return h

application = service.Application('syslog-relay', uid=1, gid=1)
slr = SyslogRelayService('syslog-relay', hosts='127.0.0.1')
serviceCollection = service.IServiceCollection(application)
internet.UDPServer(514, slr.getHostFactory()
                   ).setServiceParent(serviceCollection)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050903/eb0fdc75/attachment.sig>

From nico at tekNico.net  Sat Sep  3 14:51:02 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Sat, 03 Sep 2005 22:51:02 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <1125768936.1199.5.camel@lothar>
References: <4316FB22.6050604@tekNico.net>
	<43170B4B.70307@tekNico.net>	<432742240509010835b3e6c7f@mail.gmail.com>
	<df78s3$g76$1@sea.gmane.org>	<4327422405090122107bd01086@mail.gmail.com>
	<1125768936.1199.5.camel@lothar>
Message-ID: <dfd2bn$mql$1@sea.gmane.org>

>> if you don't want to go as low level as to rewrite a custom serialization
>> protocol for pb, why don't you use two channels, like in good old ftp?
>> One for control, and the other for data?

> That's what I did for my application -- I had a similar need, so I set
> up another protocol to listen on another port, use the control channel
> (PB) to coordinate the connections, generate random tokens to provide
> some means of verifying that the connecting client is who I think it is,
> and so on.

You had to serialize and deserialize data manually anyway. What did you
use? The array module? Pickle? Banana?


> It works quite well, but it certainly would be sweet if PB had the
> ability to, say, declare certain methods to send and receive raw
> data only.

Some methods should be asymmetric: some should serialize only, and others
deserialize only, if I'm not mistaken.

-- 
Nicola Larosa - nico at tekNico.net

There is no question that traditional approaches for acute traumas
(heart attack, stroke, accidents, etc.) are valuable and should not
be abandoned. However, overall, when drugs and surgery are used to
address chronic illness, it is generally a prescription for disaster.
 -- Dr. J. Mercola, July 2005




From exarkun at divmod.com  Sat Sep  3 15:25:31 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 3 Sep 2005 17:25:31 -0400
Subject: [Twisted-Python] Twisted UDP & makeConnection
In-Reply-To: <200509031417.13952.jamessaker@firepole.com>
Message-ID: <20050903212531.3914.1923298645.divmod.quotient.11891@ohm>

On Sat, 3 Sep 2005 14:17:07 -0500, James Saker <jamessaker at firepole.com> wrote:
>Got a bit of a puzzle trying to make a minimal syslog relay out of twisted and
>am wondering if it's due to an incompatibility between ServerFactory and
>Twisted's UDP, or if I'm simply missing something obvious.

Twisted's UDP support doesn't use factories.  Since UDP isn't connection oriented, there's little or no reason to construct new protocol instances to handle traffic: one instance is used to handle all traffic received by a port for its entire lifetime.  Try passing a DatagramProtocol subclass instance in to UDPServer, instead of a ServerFactory; you should see this problem disappear.

Jp



From sflist at ihonk.com  Sat Sep  3 23:20:29 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Sat, 03 Sep 2005 22:20:29 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <dfd2bn$mql$1@sea.gmane.org>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com> <df78s3$g76$1@sea.gmane.org>
	<4327422405090122107bd01086@mail.gmail.com>
	<1125768936.1199.5.camel@lothar>  <dfd2bn$mql$1@sea.gmane.org>
Message-ID: <1125811230.12576.9.camel@lothar>

On Sat, 2005-09-03 at 22:51 +0200, Nicola Larosa wrote:
> >> if you don't want to go as low level as to rewrite a custom serialization
> >> protocol for pb, why don't you use two channels, like in good old ftp?
> >> One for control, and the other for data?
> 
> > That's what I did for my application -- I had a similar need, so I set
> > up another protocol to listen on another port, use the control channel
> > (PB) to coordinate the connections, generate random tokens to provide
> > some means of verifying that the connecting client is who I think it is,
> > and so on.
> 
> You had to serialize and deserialize data manually anyway. What did you
> use? The array module? Pickle? Banana?

No, I didn't. (Background: In my application, I only want two clients to
be able to exchange raw data.) So I make a new ServerFactory (subclassed
from protocol.Factory) listen on the server's data port, then hand a
token (a random string) via PB over the control port to Client A. Client
A initiates a connection to the data port, using a ClientFactory which
subclasses protocol.Factory, and hands over the token. Then my server
tells Client B via PB to connect to the data port with another token,
and the process is repeated. When Client B comes in, the server hands
Client A's transport to Client B's protocol, and vice versa. Then they
can just spew raw data at each other to their hearts' content.

This approach should be easily extendable to shifting the same raw data
among multiple clients.

> Some methods should be asymmetric: some should serialize only, and others
> deserialize only, if I'm not mistaken.

Sounds good, when can I test it? ;-)

Steve




From exarkun at divmod.com  Sun Sep  4 15:45:06 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 4 Sep 2005 17:45:06 -0400
Subject: [Twisted-Python] Trial regression
In-Reply-To: 0
Message-ID: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>

Import error reporting in trial has changed in a way which breaks buildbot's understanding of the output.  Where errors used to be reported like this:

    Could not import quotient.test.test_webtest: 

They're now reported like this:

    Could not import <module 'quotient' from '/home/buildbot/BuildBot/slave/twisted-trunk/Quotient/quotient/__init__.py'>: 

This gives less information than the previous format and just looks worse to boot.  Can we put it back how it was?

Jp



From jonathan.lange at gmail.com  Sun Sep  4 19:13:19 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 11:13:19 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
Message-ID: <d06a5cd30509041813196df10b@mail.gmail.com>

Sure.  I'll aim to have it fixed within the week

On 05/09/05, Jp Calderone <exarkun at divmod.com> wrote:
> Import error reporting in trial has changed in a way which breaks buildbot's understanding of the output.  Where errors used to be reported like this:
> 
>     Could not import quotient.test.test_webtest:
> 
> They're now reported like this:
> 
>     Could not import <module 'quotient' from '/home/buildbot/BuildBot/slave/twisted-trunk/Quotient/quotient/__init__.py'>:
> 
> This gives less information than the previous format and just looks worse to boot.  Can we put it back how it was?
> 
> Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From mary-twisted at puzzling.org  Sun Sep  4 19:16:57 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 5 Sep 2005 11:16:57 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <d06a5cd30509041813196df10b@mail.gmail.com>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
	<d06a5cd30509041813196df10b@mail.gmail.com>
Message-ID: <20050905011657.GD31836@home.puzzling.org>

On Mon, Sep 05, 2005, Jonathan Lange wrote:
> Sure.  I'll aim to have it fixed within the week

And... tested? ;)

-Mary



From jonathan.lange at gmail.com  Sun Sep  4 19:19:51 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 11:19:51 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <d06a5cd30509041813196df10b@mail.gmail.com>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
	<d06a5cd30509041813196df10b@mail.gmail.com>
Message-ID: <d06a5cd30509041819349c8e91@mail.gmail.com>

Actually, it'd make things go quicker if you could help me write a
unit test for this behaviour.

Also, I'd appreciate advice on ways to avoid further regressions yet
still maintain a good pace of development.

On 05/09/05, Jonathan Lange <jonathan.lange at gmail.com> wrote:
> Sure.  I'll aim to have it fixed within the week
> 
> On 05/09/05, Jp Calderone <exarkun at divmod.com> wrote:
> > Import error reporting in trial has changed in a way which breaks buildbot's understanding of the output.  Where errors used to be reported like this:
> >
> >     Could not import quotient.test.test_webtest:
> >
> > They're now reported like this:
> >
> >     Could not import <module 'quotient' from '/home/buildbot/BuildBot/slave/twisted-trunk/Quotient/quotient/__init__.py'>:
> >
> > This gives less information than the previous format and just looks worse to boot.  Can we put it back how it was?
> >
> > Jp
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>



From jonathan.lange at gmail.com  Sun Sep  4 19:21:25 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 11:21:25 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <20050905011657.GD31836@home.puzzling.org>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
	<d06a5cd30509041813196df10b@mail.gmail.com>
	<20050905011657.GD31836@home.puzzling.org>
Message-ID: <d06a5cd3050904182151237118@mail.gmail.com>

On 05/09/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> On Mon, Sep 05, 2005, Jonathan Lange wrote:
> > Sure.  I'll aim to have it fixed within the week
> 
> And... tested? ;)

Yeah. :)

(also, apologies to list members for doing the prefix replies in the
other recent emails)



From jamessaker at firepole.com  Sun Sep  4 19:23:42 2005
From: jamessaker at firepole.com (James Saker)
Date: Sun, 4 Sep 2005 20:23:42 -0500
Subject: [Twisted-Python] Re: Twisted UDP & makeConnection
Message-ID: <200509042023.42871.jamessaker@firepole.com>

> Jp Calderone <exarkun at divmod.com> writes
>Twisted's UDP support doesn't use factories.  Since UDP isn't connection 
oriented, there's little or no reason to construct new protocol instances to 
handle traffic: 

OK... that makes sense. I'll give that a shot. I wondered if the 
connectionless nature of UDP changed things at all... thanks!

Jamie



From mary-twisted at puzzling.org  Sun Sep  4 19:24:54 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 5 Sep 2005 11:24:54 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <d06a5cd30509041819349c8e91@mail.gmail.com>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
	<d06a5cd30509041813196df10b@mail.gmail.com>
	<d06a5cd30509041819349c8e91@mail.gmail.com>
Message-ID: <20050905012454.GG31836@home.puzzling.org>

On Mon, Sep 05, 2005, Jonathan Lange wrote:
> Actually, it'd make things go quicker if you could help me write a
> unit test for this behaviour.
> 
> Also, I'd appreciate advice on ways to avoid further regressions yet
> still maintain a good pace of development.

I haven't done much work on software in which changes in output were
considered regressions, but since they certainly are here, you should
probably unit test as much of the error output of the current trial (or
probably trial before your merges) as you can find.

-Mary



From mary-twisted at puzzling.org  Sun Sep  4 19:34:15 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 5 Sep 2005 11:34:15 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
Message-ID: <20050905013415.GH31836@home.puzzling.org>

Hi everyone,

We've had some modest success now with two in-person sprints with
Twisted hackers travelling up and down the east coast of Australia to
work on crazy stuff (vfs, ftp... trial).

At the last sprint, we discussed having a "virtual sprint", essentially
a weekend during which interested people get together and work on
Twisted. Unlike for the Australian sprints, this would be Saturday and
Sunday and wouldn't include Friday. Communication would be over IRC most
likely, and maybe VoIP. (People in the same city may reserve the right
to have face-to-face conversations...)

We're going to try for the first one sometime in October. People
interested in a particular weekend should let me know, likewise people
interested in a particular topic. Otherwise sit back and expect an
announcement in a week or so.

-Mary

-- 
<spiv> dash: so we need to wrap integers... Java does that too, so it can't be that bad ;)
* dash doesn't know how to respond to that except with physical violence



From andrew-twisted at puzzling.org  Sun Sep  4 19:36:22 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 5 Sep 2005 11:36:22 +1000
Subject: [Twisted-Python] Trial regression
In-Reply-To: <d06a5cd30509041819349c8e91@mail.gmail.com>
References: <20050904214506.3914.1900617019.divmod.quotient.12204@ohm>
	<d06a5cd30509041813196df10b@mail.gmail.com>
	<d06a5cd30509041819349c8e91@mail.gmail.com>
Message-ID: <20050905013622.GY8963@trogdor.home.puzzling.org>

On Mon, Sep 05, 2005 at 11:19:51AM +1000, Jonathan Lange wrote:
> Actually, it'd make things go quicker if you could help me write a
> unit test for this behaviour.
> 
> Also, I'd appreciate advice on ways to avoid further regressions yet
> still maintain a good pace of development.

The low-tech answer would be to diff the output of "bin/trial -R twisted"
using trial from trunk vs. trial from your branch (for both stdout and
stderr, of course).  That will at least catch any differences in the major
project people care about.

I expect that as you increase test coverage, regressions will be less and
less common.

-Andrew.




From jonathan.lange at gmail.com  Sun Sep  4 23:54:08 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 15:54:08 +1000
Subject: [Twisted-Python] OK to remove doctest support from Trial?
Message-ID: <d06a5cd30509042254282ea436@mail.gmail.com>

Does anyone care deeply about Trial supporting doctests?  I would like
to remove the support.  It's almost unused in Twisted, clutters the
trial code and is slowing down refactoring.

My grep skills indicate that there's only one set of doctests in
Twisted (in t.web2.test.test_stream).  A patch is attached to replace
these with unit tests.  (I'll apply it if the web2 maintainers
approve).

cheers,
jml
-------------- next part --------------
A non-text attachment was scrubbed...
Name: remove-doctests.patch
Type: application/octet-stream
Size: 4560 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050905/e55fb09e/attachment-0002.obj>

From nico at tekNico.net  Mon Sep  5 02:05:29 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 05 Sep 2005 10:05:29 +0200
Subject: [Twisted-Python] Re: OK to remove doctest support from Trial?
In-Reply-To: <d06a5cd30509042254282ea436@mail.gmail.com>
References: <d06a5cd30509042254282ea436@mail.gmail.com>
Message-ID: <dfgu8a$d29$1@sea.gmane.org>

> Does anyone care deeply about Trial supporting doctests?  I would like
> to remove the support.  It's almost unused in Twisted, clutters the
> trial code and is slowing down refactoring.

This is very bad news. :-(

I was hoping to be able to use doctest in Twisted-based code after the
refactoring (since I don't grasp how to use it right now). If noone else is
using it, and it slows you down too much, well, go ahead and remove it. :-(

May I ask you to write down a few doc lines about what it would take for me
to reenable it afterwards, if at all feasible? Thank you.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From sflist at ihonk.com  Mon Sep  5 02:35:41 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Mon, 05 Sep 2005 01:35:41 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <1125768936.1199.5.camel@lothar>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com> <df78s3$g76$1@sea.gmane.org>
	<4327422405090122107bd01086@mail.gmail.com>
	<1125768936.1199.5.camel@lothar>
Message-ID: <1125909341.5116.33.camel@lothar>

Actually, ya know what'd be even better? If the serialize and
deserialize functions were simply lightning fast -- then we wouldn't
even have to care about the time spent doing it, and the workaround I
described would be a waste of time.

Steve




From nico at tekNico.net  Mon Sep  5 02:47:24 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 05 Sep 2005 10:47:24 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <1125909341.5116.33.camel@lothar>
References: <4316FB22.6050604@tekNico.net>
	<43170B4B.70307@tekNico.net>	<432742240509010835b3e6c7f@mail.gmail.com>
	<df78s3$g76$1@sea.gmane.org>	<4327422405090122107bd01086@mail.gmail.com>	<1125768936.1199.5.camel@lothar>
	<1125909341.5116.33.camel@lothar>
Message-ID: <dfh0ms$jme$1@sea.gmane.org>

> Actually, ya know what'd be even better? If the serialize and
> deserialize functions were simply lightning fast -- then we wouldn't
> even have to care about the time spent doing it, and the workaround I
> described would be a waste of time.

Well, you can uncomment the cBanana hook in the PB code, and they will be
much faster. :-)

Nonetheless, whatever you do, there will always be a data size where they
won't be fast enough. Makes no sense spending 3X CPU on it, if available.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From antonykummel at yahoo.com  Mon Sep  5 03:22:20 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Mon, 5 Sep 2005 02:22:20 -0700 (PDT)
Subject: [Twisted-Python] some bugs(?)
Message-ID: <20050905092220.83071.qmail@web33914.mail.mud.yahoo.com>

Hi,

I encountered what seem to be some bugs:

1. In twisted/scripts/trial.py, line 276: the module's
contents are not executed if the lines are terminated
with "\r\n". I suggest using "r" instead of "rb" when
reading the file. Additionally, I would compile() the
source before executing it in order to associate it
with its filename. This will make debugging (at least
with winpdb) much easier (currently the filename is
"<string>", which prevents winpdb from finding the
source).

2. In twisted/plugin.py, line 135: paths are skipped
if they don't exist, but there is also the possibility
that they're misspelled. This gives rise to
WindowsError 123, which I think should also be
ignored, or at least an informative message should be
provided. It took me a very long time to find out my
PYTHONPATH was missing a ";".

Cheers,

Antony Kummel

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From antonykummel at yahoo.com  Mon Sep  5 04:09:42 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Mon, 5 Sep 2005 03:09:42 -0700 (PDT)
Subject: [Twisted-Python] time
Message-ID: <20050905100942.18718.qmail@web33915.mail.mud.yahoo.com>

Hi,

I noticed that the convention in Twisted is to measure
time with python.runtime.seconds. This in turn uses
time.time which is sensitive to the system clock,
meaning that it may return decreasing values if the
user sets the system clock to an earlier time between
calls. This would likely break many things, no? Why
not use time.clock or some combination between them?

Antony Kummel


	
		
______________________________________________________
Click here to donate to the Hurricane Katrina relief effort.
http://store.yahoo.com/redcross-donate3/



From jonathan.lange at gmail.com  Mon Sep  5 05:59:33 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 21:59:33 +1000
Subject: [Twisted-Python] some bugs(?)
In-Reply-To: <20050905092220.83071.qmail@web33914.mail.mud.yahoo.com>
References: <20050905092220.83071.qmail@web33914.mail.mud.yahoo.com>
Message-ID: <d06a5cd3050905045971e4954a@mail.gmail.com>

On 05/09/05, Antony Kummel <antonykummel at yahoo.com> wrote:
> Hi,
> 
> I encountered what seem to be some bugs:
> 
> 1. In twisted/scripts/trial.py, line 276: the module's
> contents are not executed if the lines are terminated
> with "\r\n". I suggest using "r" instead of "rb" when
> reading the file. Additionally, I would compile() the
> source before executing it in order to associate it
> with its filename. This will make debugging (at least
> with winpdb) much easier (currently the filename is
> "<string>", which prevents winpdb from finding the
> source).
> 

Hi Antony,

Thanks for filing these bugs.  Particularly since they are win32 bugs
(most of us use some form of UNIX, and thus love it when someone
_else_ tests on Windows.)

I've committed a fix for the first bug, as well as a couple of unit
tests to avoid it happening again.  I'd appreciate it if you could
confirm that this indeed fixes your problem.

For future reference, the best place to file bugs is with the Twisted
issue tracker[1], rather than on the mailing list.

cheers,
jml

[1] http://www.twistedmatrix.com/bugs/.



From jonathan.lange at gmail.com  Mon Sep  5 06:12:12 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Mon, 5 Sep 2005 22:12:12 +1000
Subject: [Twisted-Python] Re: OK to remove doctest support from Trial?
In-Reply-To: <dfgu8a$d29$1@sea.gmane.org>
References: <d06a5cd30509042254282ea436@mail.gmail.com>
	<dfgu8a$d29$1@sea.gmane.org>
Message-ID: <d06a5cd30509050512742293db@mail.gmail.com>

On 05/09/05, Nicola Larosa <nico at teknico.net> wrote:
> > Does anyone care deeply about Trial supporting doctests?  I would like
> > to remove the support.  It's almost unused in Twisted, clutters the
> > trial code and is slowing down refactoring.
> 
> This is very bad news. :-(
> 

People on IRC have persuaded me to adopt an alternate strategy.

That is all.



From grimmtooth at gmail.com  Mon Sep  5 07:14:55 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Mon, 5 Sep 2005 09:14:55 -0400
Subject: [Twisted-Python] time
In-Reply-To: <20050905100942.18718.qmail@web33915.mail.mud.yahoo.com>
References: <20050905100942.18718.qmail@web33915.mail.mud.yahoo.com>
Message-ID: <8f4623fb05090506145762da56@mail.gmail.com>

On 9/5/05, Antony Kummel <antonykummel at yahoo.com> wrote:
> 
> Hi,
> 
> I noticed that the convention in Twisted is to measure
> time with python.runtime.seconds. This in turn uses
> time.time which is sensitive to the system clock,
> meaning that it may return decreasing values if the
> user sets the system clock to an earlier time between
> calls. This would likely break many things, no? Why
> not use time.clock or some combination between them?
> 

Seems to me that using the same clock as the rest of the system is the 
single best way to ensure that other logs and Twisted's logs agree on the 
time stamp.

Just imagine the nightmare if there was an issue pointed to by the twisted 
log, but since it was "correct" it couldn't be directly matched up with 
another system log that actually pointed to the source of the problem.

This has actually proven to be quite useful for me.

-- 
"Things fall apart. The Center cannot hold."
- Life as a QA geek, in a nutshell.

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050905/7f331c36/attachment.html>

From antonykummel at yahoo.com  Mon Sep  5 07:37:29 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Mon, 5 Sep 2005 06:37:29 -0700 (PDT)
Subject: [Twisted-Python] application
Message-ID: <20050905133729.47917.qmail@web33910.mail.mud.yahoo.com>

Hi,

I am beginning to use twisted.application, mktap and
twistd in my project, and I have some questions about
their use:

1. It seems that mktap is aimed primarily to create
applications containing just one service (since to
append a service to an application you need a separate
invocation of mktap). I am thinking to use it mostly
to combine services and I wonder if I'm
misunderstanding something or if I should use
MultiService or what.

Specifically, I want to have numerous services that
are (modified) PB client/servers, and when several
such services are at the same process, I want them all
to use the same ServerFactory. What I did was to make
one mktap plugin for the "base server", and several
plugins for the services themselves. These services
require that the application also contains a "base
server", and they bind to it automatically. This
requires creating an application with only the "base
server", and then adding to it the different
subsidiary services. Any ideas on how to do this
optimally?

2. Tap conventions: it is not very clear how to make
the best use of mktap in terms of code organization.
It seems that to make plugins I need to have a
twisted/plugins folder in my application's root
directory. In twisted, this folder contains files
named twisted_*.py, I'm not sure why this naming
convention. The files in this directory point to tap
construction modules. These modules seem to be either
in twisted/tap or in twisted/*something*, in which
case they are called either tap.py or
*something*_tap.py. Additionally, the services these
modules use come from a variety of places in which I
couldn't find coherence.

So, my question is, where should I put the mktap
plugins, the tap construction modules, and the service
implementations so that it makes sense? Am I missing
anything?

2. I understand that application is meant to hold the
services' configuration. However, there are many kinds
of configurations, and I'm struggling to make a
distinction between options that are suitable for the
mktap command line, for xml-serialized applications,
and for other mechanisms, such as a human-readable
configuration file suitable for an innocent end-user.
For example, an ini file could be used to specify the
skin of a GUI application, and debugging options, but
what is more suitable for the mktap command line?
Maybe only options that somehow affect the basic
"type" of the service?

Thanks,

Antony Kummel


	
		
______________________________________________________
Click here to donate to the Hurricane Katrina relief effort.
http://store.yahoo.com/redcross-donate3/



From antonykummel at yahoo.com  Mon Sep  5 07:44:05 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Mon, 5 Sep 2005 06:44:05 -0700 (PDT)
Subject: [Twisted-Python] time
In-Reply-To: <8f4623fb05090506145762da56@mail.gmail.com>
Message-ID: <20050905134406.67551.qmail@web33913.mail.mud.yahoo.com>

--- Jeff Grimmett <grimmtooth at gmail.com> wrote:

> On 9/5/05, Antony Kummel <antonykummel at yahoo.com>
> wrote:
> > 
> > Hi,
> > 
> > I noticed that the convention in Twisted is to
> measure
> > time with python.runtime.seconds. This in turn
> uses
> > time.time which is sensitive to the system clock,
> > meaning that it may return decreasing values if
> the
> > user sets the system clock to an earlier time
> between
> > calls. This would likely break many things, no?
> Why
> > not use time.clock or some combination between
> them?
> > 
> 
> Seems to me that using the same clock as the rest of
> the system is the 
> single best way to ensure that other logs and
> Twisted's logs agree on the 
> time stamp.
> 
> Just imagine the nightmare if there was an issue
> pointed to by the twisted 
> log, but since it was "correct" it couldn't be
> directly matched up with 
> another system log that actually pointed to the
> source of the problem.
> 
> This has actually proven to be quite useful for me.

For logging, I agree, but the system clock is used for
many purposes, among them, for example, the mechanics
of LoopingCall, or the reactor's scheduling of delayed
calls, I think (please correct me if I'm wrong).

So it seems to me that while an application that uses
the current method may produce more useful logs but it
will also exhibit undefined behavior regarding the
rest of its functionality, no?

Antony Kummel


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From exarkun at divmod.com  Mon Sep  5 12:04:09 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 5 Sep 2005 14:04:09 -0400
Subject: [Twisted-Python] time
In-Reply-To: <20050905100942.18718.qmail@web33915.mail.mud.yahoo.com>
Message-ID: <20050905180409.3914.764989997.divmod.quotient.12478@ohm>

On Mon, 5 Sep 2005 03:09:42 -0700 (PDT), Antony Kummel <antonykummel at yahoo.com> wrote:
>Hi,
>
>I noticed that the convention in Twisted is to measure
>time with python.runtime.seconds. This in turn uses
>time.time which is sensitive to the system clock,
>meaning that it may return decreasing values if the
>user sets the system clock to an earlier time between
>calls. This would likely break many things, no? Why
>not use time.clock or some combination between them?
>

Twisted provides no real-time guarantees.  The reliance on time.time() to return sensible results is just one aspect of this.  If you're worried about scheduling in your application, you'll probably see more problems come up from Linux context switches, blocking syscalls (including disk I/O), system load, slow Python functions, Python's garbage collector, and user interference.  Clock skew just doesn't come up much in practice, at least on any of the systems I run code on (NTP is your friend).

Jp



From exarkun at divmod.com  Mon Sep  5 12:14:05 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 5 Sep 2005 14:14:05 -0400
Subject: [Twisted-Python] application
In-Reply-To: <20050905133729.47917.qmail@web33910.mail.mud.yahoo.com>
Message-ID: <20050905181405.3914.1934399467.divmod.quotient.12481@ohm>

On Mon, 5 Sep 2005 06:37:29 -0700 (PDT), Antony Kummel <antonykummel at yahoo.com> wrote:
>Hi,
>
>I am beginning to use twisted.application, mktap and
>twistd in my project, and I have some questions about
>their use:
>
You may want to start out using TAC files, rather than TAP files.  TAC files are easier to manipulate, which is a plus during development.  TAP files will let you solidify whatever configuration you decide upon and expose it via the `mktap' command line.

>1. It seems that mktap is aimed primarily to create
>applications containing just one service (since to
>append a service to an application you need a separate
>invocation of mktap). I am thinking to use it mostly
>to combine services and I wonder if I'm
>misunderstanding something or if I should use
>MultiService or what.
>
>Specifically, I want to have numerous services that
>are (modified) PB client/servers, and when several
>such services are at the same process, I want them all
>to use the same ServerFactory. What I did was to make
>one mktap plugin for the "base server", and several
>plugins for the services themselves. These services
>require that the application also contains a "base
>server", and they bind to it automatically. This
>requires creating an application with only the "base
>server", and then adding to it the different
>subsidiary services. Any ideas on how to do this
>optimally?

Each service appended to a TAP will have a reference to the parent service, which in turn has references to all its children.  By searching this graph, services can find other services that have been configured independently.  A good way to do this is usually by interface.

>
>2. Tap conventions: it is not very clear how to make
>the best use of mktap in terms of code organization.
>It seems that to make plugins I need to have a
>twisted/plugins folder in my application's root
>directory. In twisted, this folder contains files
>named twisted_*.py, I'm not sure why this naming
>convention. The files in this directory point to tap
>construction modules. These modules seem to be either
>in twisted/tap or in twisted/*something*, in which
>case they are called either tap.py or
>*something*_tap.py. Additionally, the services these
>modules use come from a variety of places in which I
>couldn't find coherence.
>
>So, my question is, where should I put the mktap
>plugins, the tap construction modules, and the service
>implementations so that it makes sense? Am I missing
>anything?
>

For mktap to find your TAP plugin, it must be in twisted/plugins/.  Beyond that, Twisted doesn't care how you organize things.  As a convention, Twisted uses the twisted_ prefix so as to reduce the chance of colliding with other plugins.  If you want to be nice, you should probably adopt a similar prefix for your plugins.

The modules implementing the TAP plugins can go anywhere importable.  If it helps you decide at all, the twisted/tap/ package is generally considered to have been a mistake, and those modules have been gradually moving out to twisted/project/tap.py files.

>2. I understand that application is meant to hold the
>services' configuration. However, there are many kinds
>of configurations, and I'm struggling to make a
>distinction between options that are suitable for the
>mktap command line, for xml-serialized applications,
>and for other mechanisms, such as a human-readable
>configuration file suitable for an innocent end-user.
>For example, an ini file could be used to specify the
>skin of a GUI application, and debugging options, but
>what is more suitable for the mktap command line?
>Maybe only options that somehow affect the basic
>"type" of the service?
>

This is a pretty broad question.  I don't know that I have any particular insight into it.  Pretty much every program, whether it uses Twisted or Python or not, has to make a decision here.

Jp



From grimmtooth at gmail.com  Mon Sep  5 15:11:12 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Mon, 5 Sep 2005 17:11:12 -0400
Subject: [Twisted-Python] time
In-Reply-To: <20050905134406.67551.qmail@web33913.mail.mud.yahoo.com>
References: <8f4623fb05090506145762da56@mail.gmail.com>
	<20050905134406.67551.qmail@web33913.mail.mud.yahoo.com>
Message-ID: <8f4623fb050905141135250bed@mail.gmail.com>

On 9/5/05, Antony Kummel <antonykummel at yahoo.com> wrote:

> For logging, I agree, but the system clock is used for
> many purposes, among them, for example, the mechanics
> of LoopingCall, or the reactor's scheduling of delayed
> calls, I think (please correct me if I'm wrong).


Your pardon; for some reason I read "logging" in your post when it wasn't 
there. It's been a long weekend :-)

-- 
"Things fall apart. The Center cannot hold."
- Life as a QA geek, in a nutshell.

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050905/0781489b/attachment.html>

From glyph at divmod.com  Mon Sep  5 15:52:48 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 5 Sep 2005 17:52:48 -0400
Subject: [Twisted-Python] time
In-Reply-To: <20050905100942.18718.qmail@web33915.mail.mud.yahoo.com>
Message-ID: <20050905215248.3914.519465400.divmod.quotient.12528@ohm>

On Mon, 5 Sep 2005 03:09:42 -0700 (PDT), Antony Kummel <antonykummel at yahoo.com> wrote:

>I noticed that the convention in Twisted is to measure
>time with python.runtime.seconds. This in turn uses
>time.time which is sensitive to the system clock,
>meaning that it may return decreasing values if the
>user sets the system clock to an earlier time between
>calls. This would likely break many things, no? Why
>not use time.clock or some combination between them?

time.clock() is unfortunately useless due to differences in its behavior between different platforms:

>>> import time; help(time)

  Help on built-in function clock in module time:

  clock(...)
    clock() -> floating point number

    Return the CPU time or real time since the start of the process or since
    the first call to clock().  This has as much precision as the system
    records.

"CPU time" has absolutely nothing to do with "real time" and so using clock() to measure anything at all is pointless; its behavior is completely different between platforms.

There are other problems with time, too: it should return an integral number of milliseconds; the fact that it uses a float means that systems which cause the FPU to truncate double-precision floating point operations at single-precision (like DirectX) won't work at all with Twisted.

Basically, in order to provide a truly correct implementation of time, Twisted would need its own re-implementation of the 'time' and 'select' modules from the python standard library, as well as for all 3rd-party multiplexing and GUI libraries to take a different signature (since the convention is to use floats for time in Python) and nobody has yet had the time.

Clock skew is one of the easier issues to address; we just need an API to portably report a monotonically increasing real time in floating-point seconds, and for all the reactors to use it.  Patches accepted :).



From yves at sita.lu  Tue Sep  6 00:48:07 2005
From: yves at sita.lu (Yves Glodt)
Date: Tue, 06 Sep 2005 08:48:07 +0200
Subject: [Twisted-Python] database connection through ssh tunnel using
	twisted
In-Reply-To: <4315B473.9020104@sita.lu>
References: <43158057.5080901@sita.lu> <4315B473.9020104@sita.lu>
Message-ID: <431D3BA7.8000406@sita.lu>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050906/8bf5f12e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Logo_Sita.jpg
Type: image/jpeg
Size: 3052 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050906/8bf5f12e/attachment-0002.jpg>

From radeex at gmail.com  Tue Sep  6 02:40:27 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 6 Sep 2005 18:40:27 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <20050905013415.GH31836@home.puzzling.org>
References: <20050905013415.GH31836@home.puzzling.org>
Message-ID: <60ed19d405090601409c4ed5f@mail.gmail.com>

On 9/5/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> We're going to try for the first one sometime in October. People
> interested in a particular weekend should let me know, likewise people
> interested in a particular topic. Otherwise sit back and expect an
> announcement in a week or so.

Topics that I want to work on, just spur-of-the-moment ideas:
  - Inventing a way in Python to allow defgen and the like to be able
to raise informative tracebacks (involves hacking CPython or at least
writing an extension module). Assuming I haven't done it by then.
  - prose hacking on the howtos (ahem, guide)
  - Helping someone improve some protocol code might be fun (as long
as it isn't FTP ;)
  - Watching in wonder as exarkun causes a small tornado with his fingers
  - Imagination, anyone?

Topics that I bet other people will want to work on (a mixture of
wishful thinking and past experience):
  - VFS
  - trial
  - documentation
  - web2


And as for date, I'm _probably_ good any weekend in October.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From mary-twisted at puzzling.org  Tue Sep  6 02:47:44 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 6 Sep 2005 18:47:44 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <60ed19d405090601409c4ed5f@mail.gmail.com>
References: <20050905013415.GH31836@home.puzzling.org>
	<60ed19d405090601409c4ed5f@mail.gmail.com>
Message-ID: <20050906084744.GP31836@home.puzzling.org>

On Tue, Sep 06, 2005, Christopher Armstrong wrote:
> And as for date, I'm _probably_ good any weekend in October.

Random polls on IRC suggest that the following weekends are Ok for
everyone so far:

 - 8-9 October
 - 15-16 October
 - 22-23 October

-Mary



From antonykummel at yahoo.com  Tue Sep  6 02:53:48 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Tue, 6 Sep 2005 01:53:48 -0700 (PDT)
Subject: [Twisted-Python] some bugs(?)
In-Reply-To: <d06a5cd3050905045971e4954a@mail.gmail.com>
Message-ID: <20050906085348.3524.qmail@web33913.mail.mud.yahoo.com>

--- Jonathan Lange <jonathan.lange at gmail.com> wrote:

> On 05/09/05, Antony Kummel <antonykummel at yahoo.com>
> wrote:
> > Hi,
> > 
> > I encountered what seem to be some bugs:
> > 
> > 1. In twisted/scripts/trial.py, line 276: the
> module's
> > contents are not executed if the lines are
> terminated
> > with "\r\n". I suggest using "r" instead of "rb"
> when
> > reading the file. Additionally, I would compile()
> the
> > source before executing it in order to associate
> it
> > with its filename. This will make debugging (at
> least
> > with winpdb) much easier (currently the filename
> is
> > "<string>", which prevents winpdb from finding the
> > source).
> > 
> 
> Hi Antony,
> 
> I've committed a fix for the first bug, as well as a
> couple of unit
> tests to avoid it happening again.  I'd appreciate
> it if you could
> confirm that this indeed fixes your problem.
> 

It does, thanks.

Antony Kummel


	
		
______________________________________________________
Click here to donate to the Hurricane Katrina relief effort.
http://store.yahoo.com/redcross-donate3/



From jonathan.lange at gmail.com  Tue Sep  6 04:02:45 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Tue, 6 Sep 2005 20:02:45 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <60ed19d405090601409c4ed5f@mail.gmail.com>
References: <20050905013415.GH31836@home.puzzling.org>
	<60ed19d405090601409c4ed5f@mail.gmail.com>
Message-ID: <d06a5cd305090603026202b635@mail.gmail.com>

On 06/09/05, Christopher Armstrong <radeex at gmail.com> wrote:
> On 9/5/05, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> > We're going to try for the first one sometime in October. People
> > interested in a particular weekend should let me know, likewise people
> > interested in a particular topic. Otherwise sit back and expect an
> > announcement in a week or so.
> 
> Topics that I bet other people will want to work on (a mixture of
> wishful thinking and past experience):
>   - VFS
>   - trial

The man's a psychic. ;)



From glyph at divmod.com  Tue Sep  6 09:49:01 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 6 Sep 2005 11:49:01 -0400
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <60ed19d405090601409c4ed5f@mail.gmail.com>
Message-ID: <20050906154901.3914.407586893.divmod.quotient.12784@ohm>



On Tue, 6 Sep 2005 18:40:27 +1000, Christopher Armstrong <radeex at gmail.com> wrote:

>And as for date, I'm _probably_ good any weekend in October.

October is probably going to be really bad for me, what with Divmod and with moving out of, then back into, my apartment and all.

However, I'd like to participate at some point.  I hope this becomes a continuing tradition.



From pete.a.lee at gmail.com  Tue Sep  6 10:12:08 2005
From: pete.a.lee at gmail.com (Peter Lee)
Date: Tue, 06 Sep 2005 11:12:08 -0500
Subject: [Twisted-Python] Re: Traceback from pb-Server
References: <200506231053.31280.Stephan.Popp@iisb.fraunhofer.de>
Message-ID: <uy86arx9j.fsf@gmail.com>

>>>> Stephan Popp writes:

    Popp> If the pythonscript named taskDescription.fileName isn't there 
    Popp> self.serverErrorCB is called - thats ok. But it prints:
    Popp> reason [Failure instance: Traceback from remote host -- Traceback unavailable]

    Popp> But I need to know why the call failed. Can anyone please
    Popp> help me to get the traceback or the exception message that
    Popp> the server prints (exceptions.ImportError: No module named
    Popp> fitfunc2).

It's a Failure "instance"... take a look at:
http://twistedmatrix.com/documents/current/api/twisted.python.failure.Failure.html




From sflist at ihonk.com  Tue Sep  6 10:39:27 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Tue, 06 Sep 2005 09:39:27 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <dfh0ms$jme$1@sea.gmane.org>
References: <4316FB22.6050604@tekNico.net> <43170B4B.70307@tekNico.net>
	<432742240509010835b3e6c7f@mail.gmail.com> <df78s3$g76$1@sea.gmane.org>
	<4327422405090122107bd01086@mail.gmail.com>
	<1125768936.1199.5.camel@lothar> <1125909341.5116.33.camel@lothar>
	<dfh0ms$jme$1@sea.gmane.org>
Message-ID: <1126024768.5189.5.camel@lothar>

On Mon, 2005-09-05 at 10:47 +0200, Nicola Larosa wrote:
> Well, you can uncomment the cBanana hook in the PB code, and they will
> be much faster. :-)

Oooh, seriously? Where do I do that?

Steve




From warner at lothar.com  Tue Sep  6 13:20:12 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 06 Sep 2005 12:20:12 -0700 (PDT)
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
Message-ID: <20050906.122012.15040166.warner@lothar.com>

>> In TP1, the business data should be serialized, and wrapped in an outer
>> layer, containing the destination coordinates. PX1 and PX2 should be able
>> to only unwrap and deserialize the outer layer only, while trasparently
>> forwarding the serialized business data.
>
> At a guess you'd need to write your own Unjellier class or something. I
> suspect this will be much easier in newpb, but I'm not *sure*. Brian?

Hm, tricky.

In oldpb, yeah, you need to get your hands dirty with Jelly. When you invoke
rref.callRemote(methname, *args, **kwargs), what really happens is:

 the RemoteReference is turned into a per-connection objid
 a pending-call slot is allocated, assigned a unique number 'callid'
 the following tuple is serialized and sent over the wire:
  ("call", objid, callid, methname, args, kwargs)

at the far end, the tuple is fully unserialized, then examined. The "call"
token triggers a lookup of 'objid' to find the target Referenceable, which
then gets its remoteMessageReceived method invoked. This method receives the
(methname, args, kwargs) values and is responsible for calling the final
remote_foo method. The (args,kwargs) received by remoteMessageReceived have
been unbananaed but not yet unjellied (see below), so most of the
deserialization work has already been spent.

There is no clean place in this sequence to tell the underlying Protocol
instance to switch from the banana-unserializing dataReceived() mode to some
just-copy-the-data mode: in general, everything gets unserialized before you
even find out what the target object is.

So the way I'd do what you're trying to do is to serialize the arguments
myself, then pass the resulting blob to the method that knows about the
dispatch/forwarding rules.

Terminology: "Jelly" is the layer that turns arbitrary object graphs into
s-expressions (nested lists of primitive types like strings), while "Banana"
is the layer that serializes these s-expressions into a series of bytes.
There is a Protocol subclass named Banana which is attached to the wire and
emits sexps as they arrive, then the Broker is a subclass of Banana which
interprets these sexps as commands. When these commands require sexps to be
turned into objects, it uses Jelly.

To jelly arbitrary data, you just do this:

from twisted.spread import banana, jelly
def encode(o):
    sexp = jelly.jelly(o, taster=jelly.globalSecurity)
    return banana.encode(sexp)
def decode(s):
    sexp = banana.decode(s)
    return jelly.unjelly(sexp, taster=jelly.globalSecurity)

The sending side would then look like:

def callThroughDispatcher(methname, *args, **kwargs):
    allargs = encode((methname, args, kwargs))
    d = target.callRemote("dispatch", methname, allargs)
    return d

the dispatch side could look like:

def remote_dispatch(self, methname, allargs):
    return self.targets[methname].callRemote("doit", allargs)

and the final target could look like:

def remote_doit(self, allargs):
    methname, args, kwargs = decode(allargs)
    m = getattr(self, "remote_%s" % methname)
    return m(*args, **kwargs)


The downsides of this approach:

 the "serialization domain" is rather small, and does not include the
 established connection, so this will fail if your arguments include
 Referenceables or RemoteReferences. (normally you would be able to pass new
 references through to the other side, but our encode() method does not know
 about the connection and therefore cannot manipulate the reference tables
 that would enable this)

 there is some overhead to encode()/decode(): it must create a new Banana
 instance, attach it to a dummy (StringIO) transport, then iterate it until
 all the serialized data is accumulated. This overhead is probably small in
 comparison to the time it takes to serialize a large/complicated object
 graph, but there will definitely be a break-even point somewhere, below
 which is makes more sense to let the existing Brokers do their own
 serialization.



In newpb, you'll have more options, but this use-case won't necessarily be
all that that much easier. The most useful new feature would be the pluggable
Slicers/Unslicers, which give you more control over serialization and
unserialization. It might be possible to write a faster serialization layer
(in C).. I suppose that might help something.

The fundamental problem is layer-mixing: you want to change the behavior of
the very lowest-layer code (serialization/unserialization) based upon
decisions made at much higher layers (target object or method name). This is
sort of what dual-mode protocols like SMTP and HTTP do, where they switch
between LineReceiver and RawDataReceiver depending upon protocol state, but
in SMTP the transition is simple enough to implement at a very low level
(just wait for a blank line). In both oldpb and newpb, the transition is
indicated at a much much higher protocol level.

A related problem is that serialization is closely tied to a context, in this
case some state in the per-connection Broker object. Most of the advanced
serialization features (being able to handle arbitrary object graphs, shared
objects, pointing at remote Referenceables, etc) depend upon this context.
The "Dispatcher" thing you want to do drags some of this deserialization into
a second context, one which may not share enough state with the first one, so
it may be infeasible to serialize anything but simple self-contained
datatypes this way.


I'm curious, what does your takes-a-long-time-to-serialize data look like? I
need some performance-test-cases to benchmark newpb serialization code with,
and if my test data looks more like your actual data, then newpb will be that
much faster for your application. Are there a lot of large strings? Long
lists? densely-connected graphs?

hope that's useful..
 -Brian



From warner at lothar.com  Tue Sep  6 13:38:26 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 06 Sep 2005 12:38:26 -0700 (PDT)
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
Message-ID: <20050906.123826.42466750.warner@lothar.com>

>> Well, you can uncomment the cBanana hook in the PB code, and they will
>> be much faster. :-)
>
> Oooh, seriously? Where do I do that?

Hm, I thought cBanana was the default? It might depend upon how you
build/install Twisted.. there are platforms on which the optional C
extensions are just skipped.

Oh, there it is.. twisted/spread/banana.py, towards the end, just grep for
'import cBanana'. Exarkun commented that out last year. Eh, give it a try,
see if it helps. I'd be a little bit worried about segfaulting, or exposing
such a port to a hostile party. But I honestly haven't looked at that code
for two years.

cBanana implements the lowest layer of serialization/deserialization in C, so
it will be a little bit faster. If your data consists of a lot of strings and
ints, the speedup will probably be greater than if it consists of a lot of
interconnected lists and tuples. It would be neat to have some actual
benchmarks of the speedup, though.

newpb is designed to make it possible to write Slicers/Unslicers in C, and in
fact to allow the base-level Protocol to be implemented in C, but none of
these hypothetical accelerated serializers have actually been written yet.
This would allow C serialization of basic types (lists, tuples) while
retaining standard python serialization of user-defined complex types, as
opposed to the oldpb/cBanana approach that uses C for only the lowest level
(turning string/number tokens into bytes). In theory, it should be possible
to make newpb run faster than oldpb. It will take some good use-cases and
benchmarking before this actually happens, though.

cheers,
 -Brian



From warner at lothar.com  Tue Sep  6 13:53:26 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 06 Sep 2005 12:53:26 -0700 (PDT)
Subject: [Twisted-Python] Re: Traceback from pb-Server
Message-ID: <20050906.125326.129423706.warner@lothar.com>

>     Popp> If the pythonscript named taskDescription.fileName isn't there 
>     Popp> self.serverErrorCB is called - thats ok. But it prints:
>     Popp> reason [Failure instance: Traceback from remote host -- Traceback unavailable]
>
>     Popp> But I need to know why the call failed. Can anyone please
>     Popp> help me to get the traceback or the exception message that
>     Popp> the server prints (exceptions.ImportError: No module named
>     Popp> fitfunc2).

Also, you may want to enable the 'unsafeTracebacks' flag. In general, when PB
calls a method that raises an exception, the traceback is recorded to the log
on the "near" side of the connection, but very little information is sent to
the "far" side of the connection. (this is intended as a security feature..
tracebacks frequently contain copies of the code that failed, and you might
not want to expose that.. Failure instances can contain copies of stack
frames, local variables, all kinds of juicy stuff).

The 'unsafeTracebacks' flag tells PB to convey more information over the
wire. The remote side (the one which callRemote'ed the failing method) still
gets a Failure object, all asynchronous exceptions in Twisted are reported
this way, but it gets a Failure object with more attributes than it would get
if unsafeTracebacks==False. The "Traceback unavailable" message is
specifically a result of unsafeTracebacks==False.

But, in practice, I usually try to debug these sorts of failures on the
target side, closer to the code that raised the exception. You're always
going to get more information on that end of the wire.


hope that helps,
 -Brian



From sflist at ihonk.com  Tue Sep  6 14:17:46 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Tue, 06 Sep 2005 13:17:46 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <20050906.122012.15040166.warner@lothar.com>
References: <20050906.122012.15040166.warner@lothar.com>
Message-ID: <1126037866.5189.19.camel@lothar>

On Tue, 2005-09-06 at 12:20 -0700, Brian Warner wrote:
> I'm curious, what does your takes-a-long-time-to-serialize data look like? I
> need some performance-test-cases to benchmark newpb serialization code with,
> and if my test data looks more like your actual data, then newpb will be that
> much faster for your application. Are there a lot of large strings? Long
> lists? densely-connected graphs?

Very interesting post, Brian -- lots of it above my head, but hey. :-)

In my case, the data is going between instances of a VNC server and a
VNC viewer. The viewer, of course, isn't sending much, but using PB rref
method calls to transfer the data from the VNC server was enough to max
out my Athlon 2200, albeit with both the PB client and the PB server
running on the same machine (it was just a prototype).

Steve




From sflist at ihonk.com  Tue Sep  6 14:21:14 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Tue, 06 Sep 2005 13:21:14 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <20050906.123826.42466750.warner@lothar.com>
References: <20050906.123826.42466750.warner@lothar.com>
Message-ID: <1126038074.5189.22.camel@lothar>

On Tue, 2005-09-06 at 12:38 -0700, Brian Warner wrote:
> Oh, there it is.. twisted/spread/banana.py, towards the end, just grep for
> 'import cBanana'. Exarkun commented that out last year. Eh, give it a try,
> see if it helps. I'd be a little bit worried about segfaulting, or exposing
> such a port to a hostile party. But I honestly haven't looked at that code
> for two years.

Well, given that I am going to be exposing this port to hostile parties,
and that I'm reasonably satisfied with the performance of my workaround,
I'll just bail on it. Thanks for the tip, though -- it might come in
handy for internal networking purposes.

Steve




From ckdriscoll at sympatico.ca  Tue Sep  6 15:10:36 2005
From: ckdriscoll at sympatico.ca (Chris Driscoll)
Date: Tue, 6 Sep 2005 17:10:36 -0400
Subject: [Twisted-Python] unsubscribe
Message-ID: <20050906211038.XEQH16985.tomts36-srv.bellnexxia.net@CHRIS>

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050906/a10bb9aa/attachment.html>

From mary-twisted at puzzling.org  Tue Sep  6 15:58:01 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 7 Sep 2005 07:58:01 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <20050906154901.3914.407586893.divmod.quotient.12784@ohm>
References: <60ed19d405090601409c4ed5f@mail.gmail.com>
	<20050906154901.3914.407586893.divmod.quotient.12784@ohm>
Message-ID: <20050906215801.GA7319@sourdust.home.puzzling.org>

On Tue, Sep 06, 2005, glyph at divmod.com wrote:
> However, I'd like to participate at some point.  I hope this becomes a
> continuing tradition.

The intention is that it will, probably every few months. This one is
kind of testing the waters: seeing how many people want to play and
whether it contributes to the speed of Twisted development.

-Mary



From yves at sita.lu  Wed Sep  7 00:50:13 2005
From: yves at sita.lu (Yves Glodt)
Date: Wed, 07 Sep 2005 08:50:13 +0200
Subject: [Twisted-Python] conch.forwarding tutorial
Message-ID: <431E8DA5.6060803@sita.lu>

Hello,

can somebody point me at a conch.forwarding tutorial or code example?

best regards,
Yves



From tv at twistedmatrix.com  Wed Sep  7 07:20:22 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 07 Sep 2005 16:20:22 +0300
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <20050906084744.GP31836@home.puzzling.org>
References: <20050905013415.GH31836@home.puzzling.org>
	<60ed19d405090601409c4ed5f@mail.gmail.com>
	<20050906084744.GP31836@home.puzzling.org>
Message-ID: <1126099222.4207.22.camel@pooch>

On Tue, 2005-09-06 at 18:47 +1000, Mary Gardiner wrote:
> Random polls on IRC suggest that the following weekends are Ok for
> everyone so far:
> 
>  - 8-9 October
>  - 15-16 October
>  - 22-23 October

These are all fine with me. Could we please pick one soon,
so I can mark it booked and not worry about collisions?
I vote for "ASAP", which in this case would mean 8-9 October.

I want to work on (if I have time and motiva^Wcaffei^Whelp):

get me started on using shtoom
twisted.web2.access (ACL support, see Nevow/sandbox/tv/access)
vhost logging improvements
nevow/t.w2 clean up of "Site" and how vhosts are handled
nevow release procedures
actual nevow release
reverse proxying, both proxy and target
wubwubwub
debianization of various related things
maybe backporting latest twisted+nevow debs to debian sarge
atom/rss related things
learning livepage
eoc (the mailing list manager) webui (aka mailman killer)
delicate (think distributed, replicated, del.icio.us reimplementation)
anything under http://www.inoi.fi/open/

(yes, I know that's too much to do in a single weekend;)





From mary-twisted at puzzling.org  Wed Sep  7 07:28:10 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 7 Sep 2005 23:28:10 +1000
Subject: [Twisted-Python] Twisted Virtual Sprint
In-Reply-To: <1126099222.4207.22.camel@pooch>
References: <20050905013415.GH31836@home.puzzling.org>
	<60ed19d405090601409c4ed5f@mail.gmail.com>
	<20050906084744.GP31836@home.puzzling.org>
	<1126099222.4207.22.camel@pooch>
Message-ID: <20050907132810.GC10244@sourdust.home.puzzling.org>

On Wed, Sep 07, 2005, Tommi Virtanen wrote:
> These are all fine with me. Could we please pick one soon,
> so I can mark it booked and not worry about collisions?

Expect a final decision Sunday, I'm just allowing a few more days for
random input.

-Mary



From ajchos at wp.pl  Wed Sep  7 08:27:17 2005
From: ajchos at wp.pl (=?iso-8859-2?Q?Micha=B3?= Tyde)
Date: Wed, 07 Sep 2005 16:27:17 +0200
Subject: [Twisted-Python] Telnet & sending commands to pine application
Message-ID: <1126103237.9808.12.camel@localhost.localdomain>

I have got a telnet client, and I send to him a commands via
protocols.telnet.transport.write(command="pine"). I have run a pine
application. Now I want to send a Q (Quit) message and y (yes) to close
the pine. I send this messages using the same
protocols.telnet.transport.write(command). Pine doesn't respond for my
commands. I thought that when I send a single char I should close a
pine. Maybe I should send this command to pine application not to a
server (how to do it?).
Thanks in advance for all answers





From nico at tekNico.net  Wed Sep  7 11:54:39 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 07 Sep 2005 19:54:39 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <1126024768.5189.5.camel@lothar>
References: <4316FB22.6050604@tekNico.net>
	<43170B4B.70307@tekNico.net>	<432742240509010835b3e6c7f@mail.gmail.com>
	<df78s3$g76$1@sea.gmane.org>	<4327422405090122107bd01086@mail.gmail.com>	<1125768936.1199.5.camel@lothar>
	<1125909341.5116.33.camel@lothar>	<dfh0ms$jme$1@sea.gmane.org>
	<1126024768.5189.5.camel@lothar>
Message-ID: <dfn9h0$a4j$1@sea.gmane.org>

>> Well, you can uncomment the cBanana hook in the PB code, and they will
>> be much faster. :-)

> Oooh, seriously? Where do I do that?

With reference to the current trunk, it's eight lines at
t.spread.banana.py#311 . Here's the rationale for those being commented:

http://twistedmatrix.com/pipermail/twisted-python/2004-December/009158.html

Any news on the cBanana front, guys?

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From nico at tekNico.net  Wed Sep  7 12:01:22 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 07 Sep 2005 20:01:22 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <20050906.122012.15040166.warner@lothar.com>
References: <20050906.122012.15040166.warner@lothar.com>
Message-ID: <dfn9tj$c1i$1@sea.gmane.org>

Great post, archived. :-)


> I'm curious, what does your takes-a-long-time-to-serialize data look like? I
> need some performance-test-cases to benchmark newpb serialization code with,
> and if my test data looks more like your actual data, then newpb will be that
> much faster for your application. Are there a lot of large strings? Long
> lists? densely-connected graphs?

Mostly, *very* long lists of small objects, each containing a few numbers
and short strings.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From nico at tekNico.net  Wed Sep  7 12:09:16 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 07 Sep 2005 20:09:16 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <dfn9h0$a4j$1@sea.gmane.org>
References: <4316FB22.6050604@tekNico.net>	<43170B4B.70307@tekNico.net>	<432742240509010835b3e6c7f@mail.gmail.com>	<df78s3$g76$1@sea.gmane.org>	<4327422405090122107bd01086@mail.gmail.com>	<1125768936.1199.5.camel@lothar>	<1125909341.5116.33.camel@lothar>	<dfh0ms$jme$1@sea.gmane.org>	<1126024768.5189.5.camel@lothar>
	<dfn9h0$a4j$1@sea.gmane.org>
Message-ID: <dfnacc$c1i$2@sea.gmane.org>

> Any news on the cBanana front, guys?

OK, saw Brian's answer, discard the question.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From warner at lothar.com  Wed Sep  7 20:07:33 2005
From: warner at lothar.com (Brian Warner)
Date: Wed, 07 Sep 2005 19:07:33 -0700 (PDT)
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
Message-ID: <20050907.190733.18270696.warner@lothar.com>

> Mostly, *very* long lists of small objects, each containing a few numbers
> and short strings.

What order of magnitude are we talking about? Would something like
[(1,12,"foo","bar") for i in range(10000)] be close? If so, I'll use this as
one of the benchmark cases.

> In my case, the data is going between instances of a VNC server and a
> VNC viewer. The viewer, of course, isn't sending much, but using PB rref
> method calls to transfer the data from the VNC server was enough to max
> out my Athlon 2200, albeit with both the PB client and the PB server
> running on the same machine (it was just a prototype).

So most of the data is opaque VNC blobs? What kind of a size-histogram are we
talking about? Or is this a python implementation of the VNC protocol?


FYI, newpb is scheduled to have an opportunistic string-caching scheme in
which any string that gets sent over the wire more than a couple times gets
replaced by a VOCAB token with a number. The idea is to compress all the
standard internal PB sequences (like "list", "tuple", "my-reference", "call")
into short two-byte tokens, and for the sender to decide which strings get
tokenized these ways (there will be a special sequence that adds/removes
things from the receiver's mapping). Incidentally, oldpb used a "dialect"
number (of which there was only one) which indicated a static list of strings
to tokenize this way.

I haven't implemented this part yet, but when I do I'll be curious about how
to keep it from thrashing on the strings in user data. I'm vaguely planning
on something that ignores any string longer than 20 characters, keeps a list
of 100 or so with a counter for each, when the counter hits 3 the word gets
VOCABized, if the list is full when a new word is introduced then an old one
gets thrown out at random. No idea how this will perform.. worst case I'll go
back to a static list, but still have it sender-chosen (based upon just the
strings that actually appear in the newpb code), making it more flexible and
less negotiation-heavy than oldpb's approach.

thanks,
 -Brian



From stefano at pragma2000.com  Wed Sep  7 23:59:57 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 8 Sep 2005 07:59:57 +0200
Subject: [Twisted-Python] Multiplexing multiple transports over one
Message-ID: <4327422405090722593477f18@mail.gmail.com>

It shouldn't be too difficult to implement, or maybe it's already there...

I'm looking for some mechanism that allows me to multiplex multiple
protocols over the same connection. Say I open a socket on port 3000,
and I run both http and smtp over it. Of course this is sort of a port
redirection thing, like ssh does, so I need a way to specify which
host and port should be contacted by the other end of the tunnel.

It looks like consh.ssh.forwarding should do exactly this, but since I
never used it, does it only do it over ssh? Or can I use it over a
simple tcp connection as well? I'm worried about the encryption
overhead.

thanks!
stefano



From foom at fuhm.net  Thu Sep  8 00:34:28 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 8 Sep 2005 02:34:28 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <318C0882-8F6C-44E6-ABA8-2FB28A384CE1@fuhm.net>

Bug summary
______________________
Since 2005-08-31 21:44:42.620000:
  Bugs opened: 6   Bugs closed: 1   Total open bugs: 423 (+5)
   Urgent: 10 (+0)
   Bug: 188 (+2)
   Feature: 153 (+2)
   Wish: 72 (+1)

New / Reopened Bugs
______________________
                     ==== Bug ====
[DOCUMENTATION, MAIL] mail documentation links to non-existant  
example  (4 minutes ago)
        http://twistedmatrix.com/bugs/issue1162 opened by hypatia

[FTP] FTPClient failed commands return a FirstError  (yesterday)
        http://twistedmatrix.com/bugs/issue1160 opened by orbitz

[TRIAL] Trial raises "whoop whoop" error when given a filename  (2  
days ago)
        http://twistedmatrix.com/bugs/issue1159 opened by jml

[CONCH, TRIAL] CharacterAttribute's __getattr__ fools  
inspect.isclass.  (3 days ago)
        http://twistedmatrix.com/bugs/issue1158 opened by jml

                     ==== Feature ====
[WEB] web.http.HTTPClient does not support chunked transfer-encoding   
(5 days ago)
        http://twistedmatrix.com/bugs/issue1157 opened by jeffsilver

                     ==== Wish ====
[DOCUMENTATION] Write an "what is an event loop and how do they  
work?" doc.  (3/4 hour ago)
        http://twistedmatrix.com/bugs/issue1161 opened by spiv

Bugs Closed
______________________
                     ==== Bug ====
Raised Jellyable pb.Error doesn't jelly if raised in callback  (6  
days ago)
        http://twistedmatrix.com/bugs/issue1156 opened by justinj,  
closed by warner




From nico at tekNico.net  Thu Sep  8 00:35:04 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 08 Sep 2005 08:35:04 +0200
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <20050907.190733.18270696.warner@lothar.com>
References: <20050907.190733.18270696.warner@lothar.com>
Message-ID: <dfom2p$k6f$1@sea.gmane.org>

>> Mostly, *very* long lists of small objects, each containing a few numbers
>> and short strings.

> What order of magnitude are we talking about? Would something like
> [(1,12,"foo","bar") for i in range(10000)] be close? If so, I'll use this as
> one of the benchmark cases.

Make that

[(0,1,2,3,4,5,6,7,8.0,9.0,'f','fo','foo','foob','fooba','foobar')
    for i in range(10**6)]

:-)


> FYI, newpb is scheduled to have an opportunistic string-caching scheme in
> which any string that gets sent over the wire more than a couple times gets
> replaced by a VOCAB token with a number. The idea is to compress all the
> standard internal PB sequences (like "list", "tuple", "my-reference", "call")
> into short two-byte tokens, and for the sender to decide which strings get
> tokenized these ways (there will be a special sequence that adds/removes
> things from the receiver's mapping).

That would be great, in my case the total number of different string is
rather small. But instead of spending effort on that, you may want to
consider ways of transparently compressing and decompressing the serialized
stream with a standard algorithm.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From nico at tekNico.net  Thu Sep  8 00:42:46 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 08 Sep 2005 08:42:46 +0200
Subject: [Twisted-Python] Re: Multiplexing multiple transports over one
In-Reply-To: <4327422405090722593477f18@mail.gmail.com>
References: <4327422405090722593477f18@mail.gmail.com>
Message-ID: <dfomh8$lbb$1@sea.gmane.org>

> I'm looking for some mechanism that allows me to multiplex multiple
> protocols over the same connection. Say I open a socket on port 3000,
> and I run both http and smtp over it. Of course this is sort of a port
> redirection thing, like ssh does, so I need a way to specify which
> host and port should be contacted by the other end of the tunnel.

This could be a nice solution to my problem too! I don't even need a way to
specify another protocol, since it's all PB: host and port would be enough.

-- 
Nicola Larosa - nico at tekNico.net

I love Apache, but in the same way I love my wife: with some trepidation.
Fast and stable, flexible and reliable, but make one little syntax error
and you can lose your ass. -- legLess on Slashdot, July 2005




From stefano at pragma2000.com  Thu Sep  8 03:34:51 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 8 Sep 2005 11:34:51 +0200
Subject: [Twisted-Python] Re: Multiplexing multiple transports over one
In-Reply-To: <dfomh8$lbb$1@sea.gmane.org>
References: <4327422405090722593477f18@mail.gmail.com>
	<dfomh8$lbb$1@sea.gmane.org>
Message-ID: <4327422405090802344bbe5432@mail.gmail.com>

On 9/8/05, Nicola Larosa <nico at teknico.net> wrote:
> This could be a nice solution to my problem too! I don't even need a way to
> specify another protocol, since it's all PB: host and port would be enough.

Yeah, I was gonna tell you... :)



From tv at twistedmatrix.com  Fri Sep  9 00:23:11 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Fri, 09 Sep 2005 09:23:11 +0300
Subject: [Twisted-Python] Multiplexing multiple transports over one
In-Reply-To: <4327422405090722593477f18@mail.gmail.com>
References: <4327422405090722593477f18@mail.gmail.com>
Message-ID: <43212A4F.6030301@twistedmatrix.com>

Stefano Masini wrote:
> I'm looking for some mechanism that allows me to multiplex multiple
> protocols over the same connection. Say I open a socket on port 3000,
> and I run both http and smtp over it. Of course this is sort of a port
> redirection thing, like ssh does, so I need a way to specify which
> host and port should be contacted by the other end of the tunnel.
> 
> It looks like consh.ssh.forwarding should do exactly this, but since I
> never used it, does it only do it over ssh? Or can I use it over a
> simple tcp connection as well? I'm worried about the encryption
> overhead.

Conch is SSH only. If you don't want that, try SOCKS or BXXP.
There is a SOCKS implementation in twisted.



From mszumocki at contman.pl  Fri Sep  9 02:39:56 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Fri, 09 Sep 2005 10:39:56 +0200
Subject: [Twisted-Python] Epydoc + interfaces
In-Reply-To: <E1EDQgv-000801-03@pyramid.twistedmatrix.com>
Message-ID: <20050909083956.7a5a2006@poczta.contman.pl>

Hello all,

 When i tried to generate api docs for my application (that uses Twisted 2.0 and Zope interfaces)
i noticed that interface documentation is missing. However, in Twisted API docs, interface info
generated by epydoc seems to be fine. I assume there is some kind of workaround that makes epydoc
able to generate interface info that you guys used when generating Twisted API docs. Please
share the secret :)

Maciej Szumocki



From sflist at ihonk.com  Fri Sep  9 03:13:51 2005
From: sflist at ihonk.com (Steve Freitas)
Date: Fri, 09 Sep 2005 02:13:51 -0700
Subject: [Twisted-Python] Re: Disabling PB (de)serialization
In-Reply-To: <20050907.190733.18270696.warner@lothar.com>
References: <20050907.190733.18270696.warner@lothar.com>
Message-ID: <1126257231.23824.8.camel@lothar>

On Wed, 2005-09-07 at 19:07 -0700, Brian Warner wrote:
> So most of the data is opaque VNC blobs? What kind of a size-histogram are we
> talking about? Or is this a python implementation of the VNC protocol?

No, not a Python implementation, just opaque VNC blobs. I'm in the
middle of a rewrite, so I've thoroughly broken it, but I'll get it to
you as soon as I can.

> FYI, newpb is scheduled to have an opportunistic string-caching scheme in
> which any string that gets sent over the wire more than a couple times gets
> replaced by a VOCAB token with a number. The idea is to compress all the
> standard internal PB sequences (like "list", "tuple", "my-reference", "call")
> into short two-byte tokens, and for the sender to decide which strings get
> tokenized these ways (there will be a special sequence that adds/removes
> things from the receiver's mapping). Incidentally, oldpb used a "dialect"
> number (of which there was only one) which indicated a static list of strings
> to tokenize this way.

Ooh, the tokenization sounds sweet. I'm looking forward to trying it
out. On another note, I'm thinking that if newpb could be
super-duper-fastoid, I'd be pleased to use it for file transfers, too.
Just grab a chunk of data of some arbitrary size, send it, repeat. Maybe
rzip it beforehand, maybe not.

Steve




From nico at tekNico.net  Fri Sep  9 03:32:16 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Fri, 09 Sep 2005 11:32:16 +0200
Subject: [Twisted-Python] Re: Epydoc + interfaces
In-Reply-To: <20050909083956.7a5a2006@poczta.contman.pl>
References: <E1EDQgv-000801-03@pyramid.twistedmatrix.com>
	<20050909083956.7a5a2006@poczta.contman.pl>
Message-ID: <dfrkr1$kot$1@sea.gmane.org>

[Please shorten your message lines within 72-76 chars. Thank you. :-) ]


> When i tried to generate api docs for my application (that uses Twisted
> 2.0 and Zope interfaces) i noticed that interface documentation is
> missing. However, in Twisted API docs, interface info generated by epydoc
> seems to be fine. I assume there is some kind of workaround that makes
> epydoc able to generate interface info that you guys used when generating
> Twisted API docs. Please share the secret :)

The secret is apparently the epyrun script in the admin directory of the
trunk. Can't give you a direct link because the SVN web access is not
working right now.

There's been a mailing list thread about it a while ago, try searching the
archives.

-- 
Nicola Larosa - nico at tekNico.net

A lot of the folks here are extraordinarily intelligent and capable of
extreme levels of dedicated effort. ... If one of them set his mind on
evil, he could take over the world. (On the other hand, he couldn't be
as evil as the people who *are* taking over the world.)
 -- Andy Oram about the Ottawa Linux Symposium 2005




From andrew-twisted at puzzling.org  Fri Sep  9 07:19:24 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 9 Sep 2005 23:19:24 +1000
Subject: [Twisted-Python] Re: Epydoc + interfaces
In-Reply-To: <dfrkr1$kot$1@sea.gmane.org>
References: <E1EDQgv-000801-03@pyramid.twistedmatrix.com>
	<20050909083956.7a5a2006@poczta.contman.pl>
	<dfrkr1$kot$1@sea.gmane.org>
Message-ID: <20050909131924.GD5169@trogdor.home.puzzling.org>

On Fri, Sep 09, 2005 at 11:32:16AM +0200, Nicola Larosa wrote:
> 
> > When i tried to generate api docs for my application (that uses Twisted
> > 2.0 and Zope interfaces) i noticed that interface documentation is
> > missing. However, in Twisted API docs, interface info generated by epydoc
> > seems to be fine. I assume there is some kind of workaround that makes
> > epydoc able to generate interface info that you guys used when generating
> > Twisted API docs. Please share the secret :)
> 
> The secret is apparently the epyrun script in the admin directory of the
> trunk. Can't give you a direct link because the SVN web access is not
> working right now.

Yep, that's where the magic lies.  Here's the link:
    http://svn.twistedmatrix.com/cvs/trunk/admin/epyrun?view=auto&rev=13755

As I said on IRC a while ago: you shouldn't read it unless you want your
eyes to bleed.  It's not pretty.

-Andrew.




From itamar at itamarst.org  Fri Sep  9 08:58:41 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 09 Sep 2005 10:58:41 -0400
Subject: [Twisted-Python] Epydoc + interfaces
In-Reply-To: <20050909083956.7a5a2006@poczta.contman.pl>
References: <20050909083956.7a5a2006@poczta.contman.pl>
Message-ID: <1126277921.8767.9.camel@localhost.localdomain>

On Fri, 2005-09-09 at 10:39 +0200, Maciej Szumocki wrote:

>  When i tried to generate api docs for my application (that uses Twisted 2.0 and Zope interfaces)
> i noticed that interface documentation is missing. However, in Twisted API docs, interface info
> generated by epydoc seems to be fine. 

I think this is because most interfaces in Twisted still use the
backwards compatability layer Interface class; when that goes away we
will be stuck too :)




From itamar at itamarst.org  Fri Sep  9 09:05:56 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 09 Sep 2005 11:05:56 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in twisted
	code, and other reminders
Message-ID: <1126278356.8767.18.camel@localhost.localdomain>

Hi everyone,

Nevow (this applies to other projects as well) depends on Twisted.
Twisted should not depend on Nevow, as circular dependencies are a Bad
Thing. There is currently code in trunk that imports Nevow, at the very
least twisted.web2.distrib and some of the vfs modules. Please fix this
as soon as possible. I know this is somewhat limiting, but given the
current state and status of the projects it's just something we have to
deal with.

As of next week I will begin reverting any code that gets checked in
which imports Nevow.

Also please remember that we still support Python 2.2, and do follow the
coding standard; take a peek at the buildbot after checkins too.
Hopefully the next version of buildbot will allow triggering test runs
across all slaves for branches for easier testing.

Thanks!

-- 
Itamar Shtull-Trauring <itamar at itamarst.org>
http://itamarst.org




From andrew-twisted at puzzling.org  Fri Sep  9 09:23:49 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 10 Sep 2005 01:23:49 +1000
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <1126278356.8767.18.camel@localhost.localdomain>
References: <1126278356.8767.18.camel@localhost.localdomain>
Message-ID: <20050909152349.GG5169@trogdor.home.puzzling.org>

On Fri, Sep 09, 2005 at 11:05:56AM -0400, Itamar Shtull-Trauring wrote:
[...]
> 
> Also please remember that we still support Python 2.2, and do follow the
> coding standard; take a peek at the buildbot after checkins too.

Buildbot has been reconfigured to have no full-2.2 slave, and no longer
invokes 2.2 from quick either, so it gives no feedback about 2.2.  What's
the reason for this change?

-Andrew.




From foom at fuhm.net  Fri Sep  9 10:01:14 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 9 Sep 2005 12:01:14 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <20050909152349.GG5169@trogdor.home.puzzling.org>
References: <1126278356.8767.18.camel@localhost.localdomain>
	<20050909152349.GG5169@trogdor.home.puzzling.org>
Message-ID: <6E903533-4949-4251-A0A4-9359D6EDAA77@fuhm.net>

On Sep 9, 2005, at 11:23 AM, Andrew Bennetts wrote:
> Buildbot has been reconfigured to have no full-2.2 slave, and no  
> longer
> invokes 2.2 from quick either, so it gives no feedback about 2.2.   
> What's
> the reason for this change?

Looks like somebody thought the minimum requirement for the next  
version should be 2.3 but didn't bother to discuss/mention it. Seems  
rather poor form.

James






From exarkun at divmod.com  Fri Sep  9 13:33:44 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 9 Sep 2005 15:33:44 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <20050909152349.GG5169@trogdor.home.puzzling.org>
Message-ID: <20050909193344.3914.235666663.divmod.quotient.14741@ohm>

On Sat, 10 Sep 2005 01:23:49 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>On Fri, Sep 09, 2005 at 11:05:56AM -0400, Itamar Shtull-Trauring wrote:
>[...]
>>
>> Also please remember that we still support Python 2.2, and do follow the
>> coding standard; take a peek at the buildbot after checkins too.
>
>Buildbot has been reconfigured to have no full-2.2 slave, and no longer
>invokes 2.2 from quick either, so it gives no feedback about 2.2.  What's
>the reason for this change?

Trial no longer runs with Python 2.2.  I disabled the buildslaves since they weren't producing any useful results.  I _don't_ think 2.2 support should be dropped now, but no one else spoke up when I tried to argue this.  Given your post and James', I think it's clear trial should be fixed on Python 2.2 and the buildslaves re-enabled (I'll take care of the latter when someone says they'll take care of the former).

Jp



From foom at fuhm.net  Fri Sep  9 14:09:50 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 9 Sep 2005 16:09:50 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <20050909193344.3914.235666663.divmod.quotient.14741@ohm>
References: <20050909193344.3914.235666663.divmod.quotient.14741@ohm>
Message-ID: <C3A06552-3E1D-4A9C-94A2-4D45C8EDBD60@fuhm.net>

On Sep 9, 2005, at 3:33 PM, Jp Calderone wrote:
> Trial no longer runs with Python 2.2.  I disabled the buildslaves  
> since they weren't producing any useful results.  I _don't_ think  
> 2.2 support should be dropped now, but no one else spoke up when I  
> tried to argue this.  Given your post and James', I think it's  
> clear trial should be fixed on Python 2.2 and the buildslaves re- 
> enabled (I'll take care of the latter when someone says they'll  
> take care of the former).

I simply object to support for it being dropped with no discussion.  
In such a discussion, I would not strenuously object to the minimum  
version being bumped to 2.3, although I don't think there are any  
particularly strong reasons for doing so. (My work no longer depends  
upon new releases of Twisted working with Python 2.2, we've upgraded  
to 2.4 now.)

James



From dhess at verscend.com  Fri Sep  9 15:31:28 2005
From: dhess at verscend.com (David K. Hess)
Date: Fri, 9 Sep 2005 16:31:28 -0500
Subject: [Twisted-Python] Broker leak in spread server on login failure =
	denial of service?
In-Reply-To: <mailman.0.1126297570.25366.twisted-python@twistedmatrix.com>
References: <mailman.0.1126297570.25366.twisted-python@twistedmatrix.com>
Message-ID: <BB9C0D9A-37BA-4E0F-AD78-2DAF967CB765@verscend.com>


I believe I've discovered a broker leak when a checker denies a login  
and that it can be used to launch a denial of service attack on a  
spread server.

When a checker throws a Failure exception, since requestAvatar in the  
realm doesn't get called, the realm (or anything else) doesn't end up  
with a reference it can use to disconnect the network connection that  
was denied login.

If a malicious (or just buggy as was my case) client tries to login  
over and over again and doesn't shutdown each connection from the  
client side, the server will continue to leak brokers until (under  
Windows) the select() call begins to fail because there are greater  
than 512 (with a stock Python build) file descriptors open and being  
monitored by the reactor. At this point, your server is dead as the  
reactor goes into an infinite loop retrying failing select() calls  
when this happens.

What I think might be best is if another method in the realm (say  
"loginFailed(self, mind)") was called with the remote reference so  
the server could then call mind.broker.transport.loseConnection() on  
it. It would be nice too if this was after the Failure had been sent  
back across the connection and not before.

clientConnectionMade in PBServerFactory also looks promising but it  
doesn't seem possible to figure out which connection is  
authenticating from within the checker.

Can anybody offer some advice on how best to handle this?

Thanks!

Dave



From exarkun at divmod.com  Fri Sep  9 16:01:12 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 9 Sep 2005 18:01:12 -0400
Subject: [Twisted-Python] Broker leak in spread server on login failure =
	denial of service?
In-Reply-To: <BB9C0D9A-37BA-4E0F-AD78-2DAF967CB765@verscend.com>
Message-ID: <20050909220112.3914.1069683868.divmod.quotient.14806@ohm>

On Fri, 9 Sep 2005 16:31:28 -0500, "David K. Hess" <dhess at verscend.com> wrote:
>
>I believe I've discovered a broker leak when a checker denies a login  and 
>that it can be used to launch a denial of service attack on a  spread 
>server.
>
>When a checker throws a Failure exception, since requestAvatar in the  realm 
>doesn't get called, the realm (or anything else) doesn't end up  with a 
>reference it can use to disconnect the network connection that  was denied 
>login.
>
>If a malicious (or just buggy as was my case) client tries to login  over 
>and over again and doesn't shutdown each connection from the  client side, 
>the server will continue to leak brokers until (under  Windows) the select() 
>call begins to fail because there are greater  than 512 (with a stock Python 
>build) file descriptors open and being  monitored by the reactor. At this 
>point, your server is dead as the  reactor goes into an infinite loop 
>retrying failing select() calls  when this happens.

It's easier than this.  A client could connect and send no bytes at all.  The socket would remain open forever with the default factory behavior, allowing a user to exhaust all available file descriptors.

This is an attack possible on any server that doesn't limit new connections or time out existing ones somehow.

>
>What I think might be best is if another method in the realm (say 
>"loginFailed(self, mind)") was called with the remote reference so  the 
>server could then call mind.broker.transport.loseConnection() on  it. It 
>would be nice too if this was after the Failure had been sent  back across 
>the connection and not before.
>
>clientConnectionMade in PBServerFactory also looks promising but it  doesn't 
>seem possible to figure out which connection is  authenticating from within 
>the checker.
>
>Can anybody offer some advice on how best to handle this?

Rather than extending the cred interface, which may not even be invoked, I'd start by altering the behavior of the server factory.  Either impose a per-IP connection limit, or a connection rate limit, or a timeout for idle connections, or something along these lines.  You might want to look at twisted.protocols.policies.LimitTotalConnectionsFactory or TimeoutFactory.

Hope this helps,

Jp



From jonathan.lange at gmail.com  Fri Sep  9 16:16:12 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Sat, 10 Sep 2005 08:16:12 +1000
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <20050909193344.3914.235666663.divmod.quotient.14741@ohm>
References: <20050909152349.GG5169@trogdor.home.puzzling.org>
	<20050909193344.3914.235666663.divmod.quotient.14741@ohm>
Message-ID: <d06a5cd3050909151610637224@mail.gmail.com>

On 10/09/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Sat, 10 Sep 2005 01:23:49 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> >On Fri, Sep 09, 2005 at 11:05:56AM -0400, Itamar Shtull-Trauring wrote:
>
> Trial no longer runs with Python 2.2.  I disabled the buildslaves since they weren't producing any useful results.  I _don't_ think 2.2 support should be dropped now, but no one else spoke up when I tried to argue this.  Given your post and James', I think it's clear trial should be fixed on Python 2.2 and the buildslaves re-enabled (I'll take care of the latter when someone says they'll take care of the former).
> 

It's not so much "clear" as "generally expected".  Quibbles aside,
I'll make it work on 2.2.

However, can we please talk more in the future?  The details are hazy
on this dreary rainy morning, but I remember that I did a lot of 2.2
fixing at around the same time the 2.2 buildbot disappeared.

I know _I_ should have spoken to you, rather than assuming that this
meant you had changed your mind re 2.2 support.

finding-it-difficult-to-delegate-blame-sensibly yours,
jml



From dhess at verscend.com  Fri Sep  9 16:36:31 2005
From: dhess at verscend.com (David K. Hess)
Date: Fri, 9 Sep 2005 17:36:31 -0500
Subject: [Twisted-Python] Broker leak in spread server on login failure =
	denial of service?
In-Reply-To: <20050909220112.3914.1069683868.divmod.quotient.14806@ohm>
References: <20050909220112.3914.1069683868.divmod.quotient.14806@ohm>
Message-ID: <660A8DAA-363F-43AE-9FA5-68C384895F90@verscend.com>


On Sep 9, 2005, at 5:01 PM, Jp Calderone wrote:

> On Fri, 9 Sep 2005 16:31:28 -0500, "David K. Hess"  
> <dhess at verscend.com> wrote:
>
>>
>> I believe I've discovered a broker leak when a checker denies a  
>> login  and that it can be used to launch a denial of service  
>> attack on a  spread server.
>>
>> When a checker throws a Failure exception, since requestAvatar in  
>> the  realm doesn't get called, the realm (or anything else)  
>> doesn't end up  with a reference it can use to disconnect the  
>> network connection that  was denied login.
>>
>> If a malicious (or just buggy as was my case) client tries to  
>> login  over and over again and doesn't shutdown each connection  
>> from the  client side, the server will continue to leak brokers  
>> until (under  Windows) the select() call begins to fail because  
>> there are greater  than 512 (with a stock Python build) file  
>> descriptors open and being  monitored by the reactor. At this  
>> point, your server is dead as the  reactor goes into an infinite  
>> loop retrying failing select() calls  when this happens.
>>
>
> It's easier than this.  A client could connect and send no bytes at  
> all.  The socket would remain open forever with the default factory  
> behavior, allowing a user to exhaust all available file descriptors.
>
> This is an attack possible on any server that doesn't limit new  
> connections or time out existing ones somehow.

Excellent points.

>
>>
>> What I think might be best is if another method in the realm (say  
>> "loginFailed(self, mind)") was called with the remote reference  
>> so  the server could then call mind.broker.transport.loseConnection 
>> () on  it. It would be nice too if this was after the Failure had  
>> been sent  back across the connection and not before.
>>
>> clientConnectionMade in PBServerFactory also looks promising but  
>> it  doesn't seem possible to figure out which connection is   
>> authenticating from within the checker.
>>
>> Can anybody offer some advice on how best to handle this?
>>
>
> Rather than extending the cred interface, which may not even be  
> invoked, I'd start by altering the behavior of the server factory.   
> Either impose a per-IP connection limit, or a connection rate  
> limit, or a timeout for idle connections, or something along these  
> lines.  You might want to look at  
> twisted.protocols.policies.LimitTotalConnectionsFactory or  
> TimeoutFactory.

 From my point of view, I don't want to punish the many for the sins  
of the few. I know exactly who I want to disconnect when a login  
fails. Also, unfortunately, my communication patterns don't support  
idle timeouts *after login* so I can't use a timeout to get rid of  
these.

What I want is what you would find in a normal Unix login. If there  
is no activity at the login prompt then after a while you get a  
disconnect. If you don't properly authenticate, you get a disconnect.  
Once you are logged in, no timeouts. I'd like that kind of behavior  
in my factory/realm/checker (even when the client doesn't initiate  
authentication).

I guess what I'll try is using clientConnectionMade to register a  
callLater of say 5 seconds on the broker's transport.loseConnection 
(). I can then cancel it if requestAvatar is called in the realm.  
That will cover both the denied login and 0 bytes transmitted cases.

> Hope this helps,

Yes, it did. Thanks!

Dave

>
> Jp
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From itamar at itamarst.org  Fri Sep  9 16:51:59 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 09 Sep 2005 18:51:59 -0400
Subject: [Twisted-Python] Broker leak in spread server on login failure
	= denial of service?
In-Reply-To: <660A8DAA-363F-43AE-9FA5-68C384895F90@verscend.com>
References: <20050909220112.3914.1069683868.divmod.quotient.14806@ohm>
	<660A8DAA-363F-43AE-9FA5-68C384895F90@verscend.com>
Message-ID: <1126306319.23795.5.camel@localhost.localdomain>

On Fri, 2005-09-09 at 17:36 -0500, David K.Hess wrote:

> fails. Also, unfortunately, my communication patterns don't support  
> idle timeouts *after login* so I can't use a timeout to get rid of  
> these.

This is typically solved by having a noop command that clients send
every few seconds.





From jonathan.lange at gmail.com  Fri Sep  9 17:01:42 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Sat, 10 Sep 2005 09:01:42 +1000
Subject: [Twisted-Python] Python 2.2 Support
Message-ID: <d06a5cd3050909160148c16ab0@mail.gmail.com>

So, how long are we going to support it?



From mary-twisted at puzzling.org  Fri Sep  9 17:13:46 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 10 Sep 2005 09:13:46 +1000
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <d06a5cd3050909160148c16ab0@mail.gmail.com>
References: <d06a5cd3050909160148c16ab0@mail.gmail.com>
Message-ID: <20050909231346.GE32203@sourdust.home.puzzling.org>

On Sat, Sep 10, 2005, Jonathan Lange wrote:
> So, how long are we going to support it?

Well, one obvious question is what's the state of 2.2 in the wild. For
example, which Linux distributions, if any, ship 2.2 as the default
Python in their current release, or in any recent release? (Defining
recent left as an exercise for the reader.)

-Mary



From glyph at divmod.com  Fri Sep  9 17:15:00 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 9 Sep 2005 19:15:00 -0400
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <d06a5cd3050909160148c16ab0@mail.gmail.com>
Message-ID: <20050909231500.3914.365512393.divmod.quotient.14837@ohm>



On Sat, 10 Sep 2005 09:01:42 +1000, Jonathan Lange <jonathan.lange at gmail.com> wrote:
>So, how long are we going to support it?

At least until the next release.

Personally I don't care about 2.2 support right *now*, but a variety of places where it would be nifty to have Twisted or fragments of it (on small devices, for example, or weird platforms) only a minimal version of Python 2.2 is available.  I don't know if this has something to do with a change in the build process as of 2.3 or just a lack of time for the maintainers, but backporting is never fun after the fact.

We should probably track down some people with actual current use-cases in such environments though...

(PLEASE, SOMEBODY WHO FITS THAT DESCRIPTION JUMP IN HERE!)



From andrew-twisted at puzzling.org  Fri Sep  9 17:23:22 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 10 Sep 2005 09:23:22 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14397 - This appears to fix
	2.2 support for me.
In-Reply-To: <E1EDrtv-0007Pp-00@wolfwood>
References: <E1EDrtv-0007Pp-00@wolfwood>
Message-ID: <20050909232322.GI5169@trogdor.home.puzzling.org>

On Fri, Sep 09, 2005 at 05:03:19PM -0600, Jonathan Lange wrote:
> Author: jml
> Date: Fri Sep  9 17:03:19 2005
> New Revision: 14397
> 
> Modified:
>    trunk/twisted/trial/runner.py
>    trunk/twisted/trial/test/test_adapters.py
>    trunk/twisted/trial/test/test_output.py
>    trunk/twisted/trial/unittest.py
> Log:
> This appears to fix 2.2 support for me.
> 
> 
> 
> Modified: trunk/twisted/trial/runner.py
> ==============================================================================
> --- trunk/twisted/trial/runner.py	(original)
> +++ trunk/twisted/trial/runner.py	Fri Sep  9 17:03:19 2005
> @@ -162,6 +162,8 @@
>              self.addDoctests(module.__doctests__)
>  
>      def addDoctests(self, obj):
> +        if sys.version[:2] <= (2, 2):
> +            return
>          from twisted.trial import tdoctest
>          self.addTest(tdoctest.ModuleDocTestsRunner(obj))

Make this at least issue a warning, please?

-Andrew.




From jonathan.lange at gmail.com  Fri Sep  9 17:27:57 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Sat, 10 Sep 2005 09:27:57 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14397 - This appears to
	fix 2.2 support for me.
In-Reply-To: <20050909232322.GI5169@trogdor.home.puzzling.org>
References: <E1EDrtv-0007Pp-00@wolfwood>
	<20050909232322.GI5169@trogdor.home.puzzling.org>
Message-ID: <d06a5cd305090916271eca12fa@mail.gmail.com>

On 10/09/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> On Fri, Sep 09, 2005 at 05:03:19PM -0600, Jonathan Lange wrote:
> >      def addDoctests(self, obj):
> > +        if sys.version[:2] <= (2, 2):
> > +            return
> >          from twisted.trial import tdoctest
> >          self.addTest(tdoctest.ModuleDocTestsRunner(obj))
> 
> Make this at least issue a warning, please?
> 

My antipathy to doctest is such that people using it with Python 2.2
should consider themselves warned at all times.

Nevertheless, what you say is reasonable and proper.  I will do as you advise.

jml



From jadestorm at nc.rr.com  Fri Sep  9 17:38:41 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Fri, 9 Sep 2005 19:38:41 -0400
Subject: [Twisted-Python] Python 2.2 Support
In-Reply-To: <20050909231346.GE32203@sourdust.home.puzzling.org>
References: <d06a5cd3050909160148c16ab0@mail.gmail.com>
	<20050909231346.GE32203@sourdust.home.puzzling.org>
Message-ID: <E44C348C-FE98-43CA-94BD-31413DF6003C@nc.rr.com>

Red Hat Enterprise Linux 3 has 2.2.3 installed.  It's not the  
absolute latest version of RHEL, (4 is), but it's still in wide  
circulation.  Also, I increased my requirements for PyICQt and PyAIMt  
to Python 2.3 not-so-long-ago (they're based on Twisted), and took a  
lot of flak about it.  =(  Got some "well then I can't use your  
application..." when I told them it required 2.3 or above.  =/

Daniel

-- 
"The most addictive drug in the world is music."
      - The Lost Boyz



On Sep 9, 2005, at 7:13 PM, Mary Gardiner wrote:

> On Sat, Sep 10, 2005, Jonathan Lange wrote:
>
>> So, how long are we going to support it?
>>
>
> Well, one obvious question is what's the state of 2.2 in the wild. For
> example, which Linux distributions, if any, ship 2.2 as the default
> Python in their current release, or in any recent release? (Defining
> recent left as an exercise for the reader.)
>
> -Mary
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>




From foom at fuhm.net  Fri Sep  9 17:49:51 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 9 Sep 2005 19:49:51 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14397 - This appears to
	fix 2.2 support for me.
In-Reply-To: <d06a5cd305090916271eca12fa@mail.gmail.com>
References: <E1EDrtv-0007Pp-00@wolfwood>
	<20050909232322.GI5169@trogdor.home.puzzling.org>
	<d06a5cd305090916271eca12fa@mail.gmail.com>
Message-ID: <57A2BC90-9E4D-47BF-8F89-26B9E951B173@fuhm.net>


On Sep 9, 2005, at 7:27 PM, Jonathan Lange wrote:

> On 10/09/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>
>> On Fri, Sep 09, 2005 at 05:03:19PM -0600, Jonathan Lange wrote:
>>
>>>      def addDoctests(self, obj):
>>> +        if sys.version[:2] <= (2, 2):
>>> +            return
>>>          from twisted.trial import tdoctest
>>>          self.addTest(tdoctest.ModuleDocTestsRunner(obj))
>>>
>>
>> Make this at least issue a warning, please?
>>
>>
>
> My antipathy to doctest is such that people using it with Python 2.2
> should consider themselves warned at all times.
>
> Nevertheless, what you say is reasonable and proper.  I will do as  
> you advise.

I think doctests worked with Python 2.2 before. What broke?

James




From jonathan.lange at gmail.com  Fri Sep  9 17:55:39 2005
From: jonathan.lange at gmail.com (Jonathan Lange)
Date: Sat, 10 Sep 2005 09:55:39 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14397 - This appears to
	fix 2.2 support for me.
In-Reply-To: <57A2BC90-9E4D-47BF-8F89-26B9E951B173@fuhm.net>
References: <E1EDrtv-0007Pp-00@wolfwood>
	<20050909232322.GI5169@trogdor.home.puzzling.org>
	<d06a5cd305090916271eca12fa@mail.gmail.com>
	<57A2BC90-9E4D-47BF-8F89-26B9E951B173@fuhm.net>
Message-ID: <d06a5cd305090916555a5c2f9@mail.gmail.com>

On 10/09/05, James Y Knight <foom at fuhm.net> wrote:
> On Sep 9, 2005, at 7:27 PM, Jonathan Lange wrote:
> 
> > On 10/09/05, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> >
> >> On Fri, Sep 09, 2005 at 05:03:19PM -0600, Jonathan Lange wrote:
> >>
> >>>      def addDoctests(self, obj):
> >>> +        if sys.version[:2] <= (2, 2):
> >>> +            return
> >>>          from twisted.trial import tdoctest
> >>>          self.addTest(tdoctest.ModuleDocTestsRunner(obj))
> >>>
> >>
> >> Make this at least issue a warning, please?
> >
> > Nevertheless, what you say is reasonable and proper.  I will do as
> > you advise.
> 
> I think doctests worked with Python 2.2 before. What broke?
> 

They didn't. Trial has always had code to test for 2.3ness before
running doctests.



From radeex at gmail.com  Fri Sep  9 21:06:04 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 10 Sep 2005 13:06:04 +1000
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <C3A06552-3E1D-4A9C-94A2-4D45C8EDBD60@fuhm.net>
References: <20050909193344.3914.235666663.divmod.quotient.14741@ohm>
	<C3A06552-3E1D-4A9C-94A2-4D45C8EDBD60@fuhm.net>
Message-ID: <60ed19d405090920061db0fac2@mail.gmail.com>

On 9/10/05, James Y Knight <foom at fuhm.net> wrote:
> On Sep 9, 2005, at 3:33 PM, Jp Calderone wrote:
> > Trial no longer runs with Python 2.2.  I disabled the buildslaves
> > since they weren't producing any useful results.  I _don't_ think
> > 2.2 support should be dropped now, but no one else spoke up when I
> > tried to argue this.  Given your post and James', I think it's
> > clear trial should be fixed on Python 2.2 and the buildslaves re-
> > enabled (I'll take care of the latter when someone says they'll
> > take care of the former).
> 
> I simply object to support for it being dropped with no discussion.
> In such a discussion, I would not strenuously object to the minimum
> version being bumped to 2.3, although I don't think there are any
> particularly strong reasons for doing so. (My work no longer depends
> upon new releases of Twisted working with Python 2.2, we've upgraded
> to 2.4 now.)

The decision to drop it had not been made. I'd been meaning to talk to
exarkun about why the buildslave was removed, but haven't yet had the
chance (and remembered to discuss it). I was not planning on doing the
release requiring 2.3 without first asking the community, so your
objection to it being dropped with no discussion is slightly off.

As others have pointed out, this discussion makes it clear that the
next release of Twisted (2.1) should still support 2.2, but I strongly
suggest  we drop it immediately after that release, allowing 2.3-using
code into trunk.

The policy regarding Python release support has always been based on
Debian stable releases, since it's such a conservative milestone.
Debian has had 2.3 as its primary Python in stable for months, so it's
time.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From radeex at gmail.com  Fri Sep  9 21:10:56 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 10 Sep 2005 13:10:56 +1000
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow in
	twisted code, and other reminders
In-Reply-To: <1126278356.8767.18.camel@localhost.localdomain>
References: <1126278356.8767.18.camel@localhost.localdomain>
Message-ID: <60ed19d40509092010656d969@mail.gmail.com>

On 9/10/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> As of next week I will begin reverting any code that gets checked in
> which imports Nevow.

I hope you don't remove twisted.lore.nevowlore. This code has required
nevow and been in Twisted for several releases (of course, now it's
not in Twisted Core, and neither are any of the other bits of code you
mentioned). Of course, it's optional and not imported by anything
unless the user explicitly passes the switch to lore that says "use
nevowlore, please".


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From glyph at divmod.com  Fri Sep  9 23:19:50 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 10 Sep 2005 01:19:50 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow
	in	twisted code, and other reminders
In-Reply-To: <60ed19d40509092010656d969@mail.gmail.com>
References: <1126278356.8767.18.camel@localhost.localdomain>
	<60ed19d40509092010656d969@mail.gmail.com>
Message-ID: <43226CF6.7080403@divmod.com>

Christopher Armstrong wrote:

>I hope you don't remove twisted.lore.nevowlore. This code has required
>nevow and been in Twisted for several releases (of course, now it's
>not in Twisted Core, and neither are any of the other bits of code you
>mentioned). Of course, it's optional and not imported by anything
>unless the user explicitly passes the switch to lore that says "use
>nevowlore, please".
>  
>
I hope he does remove that precise code, which I believe spawned this 
discussion.

Not only is this import going in the wrong direction and depending upon 
an unspecified version of Nevow within Twisted, the code is /already/ a 
plug-in, which could easily be distributed along with Nevow rather than 
along with Lore.

This is exactly what should happen.




From foom at fuhm.net  Fri Sep  9 23:30:04 2005
From: foom at fuhm.net (James Y Knight)
Date: Sat, 10 Sep 2005 01:30:04 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14397 - This appears to
	fix 2.2 support for me.
In-Reply-To: <d06a5cd305090916555a5c2f9@mail.gmail.com>
References: <E1EDrtv-0007Pp-00@wolfwood>
	<20050909232322.GI5169@trogdor.home.puzzling.org>
	<d06a5cd305090916271eca12fa@mail.gmail.com>
	<57A2BC90-9E4D-47BF-8F89-26B9E951B173@fuhm.net>
	<d06a5cd305090916555a5c2f9@mail.gmail.com>
Message-ID: <50974D7A-A79E-4224-AE57-9430F756A612@fuhm.net>

On Sep 9, 2005, at 7:55 PM, Jonathan Lange wrote:
> They didn't. Trial has always had code to test for 2.3ness before
> running doctests.

Indeed, I was mistaken. I thought that the reason doctest.py was in  
there was for compatibility with python 2.2. But it's not -- it  
contains lots of python 2.3isms. Really it was for compat with Python  
2.3. That should be documented somewhere so I don't forget again.

James



From Marcin.Kasperski at softax.com.pl  Sat Sep 10 16:37:19 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Sun, 11 Sep 2005 00:37:19 +0200
Subject: [Twisted-Python] Welcome (and some questions)
Message-ID: <4323601F.7020204@softax.com.pl>

As it is my first post to the list, I would like to make 
thanks to all the people who created twisted. Great 
framework with many useful features. Thank you very much.

I have also some questions, thanks in advance for any hints.

1) Which logging method is recommended for twisted 
applications? Python logging package? Some method present in 
twisted itself? Something else?

2) What database access method is recommended? If I 
understand correctly it would be good idea to execute 
database access code in many short steps, deferring from 
time to time. Which database API support this way best, are 
there any code examples available?

3) So far I code using 'low level twisted' and run my 
application as standalone python script. I understand that 
it is recommended to migrate to 'application/service' API 
and use twistd to run application. Unfortunately I find it 
difficult to fully understand documentation on this subject, 
probably partially because my  application is not TCP/IP 
server, but rather TCP/IP client (in fact it is some kind of 
bot using telnet connection to game server). Does it make 
sense to use application and service concept in such 
situation? If so, how could the code look like? Currently my 
'main' code looks so:

     reactor.connectTCP(HOST, PORT, MyFactory(...))
     reactor.run()

4) Is twisted documentation available anywhere in the form 
of MsHelp file (I saw a lot of Python documentation 
converted this way, it is nice as one can easily find 
information by text search)?

5) Does there exist example of twisted application with 
wxpython GUI?

6) And in general, are there any twisted documentation 
sources (tutorials, examples, whatever) apart from those 
distributed from twistedmatrix.com?

         Best regards
             Marcin



From exarkun at divmod.com  Sat Sep 10 17:31:36 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 10 Sep 2005 19:31:36 -0400
Subject: [Twisted-Python] Welcome (and some questions)
In-Reply-To: <4323601F.7020204@softax.com.pl>
Message-ID: <20050910233136.3914.373429572.divmod.quotient.15168@ohm>

On Sun, 11 Sep 2005 00:37:19 +0200, Marcin Kasperski <marcin.kasperski at softax.com.pl> wrote:
>As it is my first post to the list, I would like to make thanks to all the 
>people who created twisted. Great framework with many useful features. Thank 
>you very much.
>

Hello, and welcome to the list :)

>I have also some questions, thanks in advance for any hints.
>
>1) Which logging method is recommended for twisted applications? Python 
>logging package? Some method present in twisted itself? Something else?

Twisted includes the basic pieces needed to construct a logging system.  The common thing to do in a Twisted application is just to call twisted.python.log.msg() and twisted.python.log.err().  These aren't covered much in the documentation, but their usage is pretty straightforward: msg() takes a string and gives all the "log observers" a chance to do something with it; similarly, err() takes a Failure (or nothing, in the suite of an "except:" - it will construct a Failure based on the exception being handled) and does the same thing.

If you use `twistd', there is a log observer which records these events to a file on disk named "twistd.log" and does some rudamentary log rotation.  You can write your own log observer as well, and install it using twisted.python.log.addObserver().  Most applications don't need this, at least not right off the bat.

If you aren't using `twistd', you can start the logging system off with twisted.python.log.startLogging().  It takes a file-like object and records messages to it.

>
>2) What database access method is recommended? If I understand correctly it 
>would be good idea to execute database access code in many short steps, 
>deferring from time to time. Which database API support this way best, are 
>there any code examples available?

For access to relational databases with an SQL interface, Twisted provides ADB-API: this is a wrapper around any DB-API module which presents a uniform, asynchronous interface (of course, since DB-API modules are blocking, this is achieved via use of a thread pool to issue database requests).  You'll find this at twisted.enterprise.adbapi, and documentation at <http://twistedmatrix.com/projects/core/documentation/howto/enterprise.html> and <http://twistedmatrix.com/documents/current/api/twisted.enterprise.adbapi.html>.

There has also been some effort towards implementing threadless asynchronous database adapters, but so far none of it is part of Twisted.  You can find a new PostgreSQL adapter like this at <http://www.jamwt.com/pgasync/>.

>
>3) So far I code using 'low level twisted' and run my application as 
>standalone python script. I understand that it is recommended to migrate to 
>'application/service' API and use twistd to run application. Unfortunately I 
>find it difficult to fully understand documentation on this subject, 
>probably partially because my  application is not TCP/IP server, but rather 
>TCP/IP client (in fact it is some kind of bot using telnet connection to 
>game server). Does it make sense to use application and service concept in 
>such situation? If so, how could the code look like? Currently my 'main' 
>code looks so:
>
>     reactor.connectTCP(HOST, PORT, MyFactory(...))
>     reactor.run()
>

`twistd' is the "Twisted daemonizer".  If your application will run as a daemon, whether it is conceptually a server or a client, you'll probably want to use it.

The above example can be trivially transformed into Twisted Service-using code:

    from twisted.application import service, internet

    # The name `application' is special in this arrangement
    application = service.Application("Some Kind of Thingy")

    HOST = 'foo'
    PORT = 23

    # This name is not
    _client = internet.TCPClient(HOST, PORT, MyFactory(...))
    _client.setServiceParent(application)

Put this into a file named `something.tac' and run it with `twistd -noy something.tac'.  One possible drawback here is that you will not be able to pass values for HOST and PORT as command-line arguments, since .tac files are intended to *be* configuration, not to take configuration.  If these values are generally fixed, this may be fine.  Otherwise, you would probably benefit from the mythical twistd-refactoring, stories of the coming of which have been passed down for generations.  When it comes to pass, you'll be able to take advantage of twistd's functionality in ways other than by writing .tac files (or any of their kin).

>4) Is twisted documentation available anywhere in the form of MsHelp file (I 
>saw a lot of Python documentation converted this way, it is nice as one can 
>easily find information by text search)?

There are no MsHelp-format versions of the documentation that I know of.  We use a tool called `lore' to generate the rendered versions of the Twisted documentation.  Lore supports output plugins, so if someone were interested and motivated, an MsHelp plugin could probably be added, and then all of Twisted's documentation could be made available in that format.

>
>5) Does there exist example of twisted application with wxpython GUI?

wxPython is a challenge to integrate with.  There have been several strategies attempted and discarded over the years.  The current popular idea involves a new reactor which lets a foreign event loop maintain more control over the program's execution.  There has been no Twisted release since this was added though, so if you want to try it out you'll need to get an SVN checkout of Twisted.  If you do, you'll find some examples in doc/core/examples/threadedselect/.  You can also browse these online at <http://cvs.twistedmatrix.com/cvs/trunk/doc/core/examples/threadedselect/>.

Most Twisted developers (that is, developers of Twisted) prefer Gtk, and Twisted has quite good PyGtk integration.

Hope this helps,

Jp



From Marcin.Kasperski at softax.com.pl  Sat Sep 10 17:52:54 2005
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Sun, 11 Sep 2005 01:52:54 +0200
Subject: [Twisted-Python] Welcome (and some questions)
In-Reply-To: <20050910233136.3914.373429572.divmod.quotient.15168@ohm>
References: <20050910233136.3914.373429572.divmod.quotient.15168@ohm>
Message-ID: <432371D6.3080507@softax.com.pl>

Thank you very much for excellent reply!

Minor comment:

> There are no MsHelp-format versions of the documentation that I know 
> of.  We use a tool called `lore' to generate the rendered versions of 
> the Twisted documentation.  Lore supports output plugins, so if someone 
> were interested and motivated, an MsHelp plugin could probably be added, 
> and then all of Twisted's documentation could be made available in that 
> format.

On the page
    http://www.orgmf.com.ar/condor/pytstuff.html
(bottom half, chapter 'For home builders) author explains in 
detail how he builds help files for python and zope. Maybe 
his method could be easily adopted?



From andrew-twisted at puzzling.org  Sun Sep 11 00:14:38 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 11 Sep 2005 16:14:38 +1000
Subject: [Twisted-Python] Welcome (and some questions)
In-Reply-To: <20050910233136.3914.373429572.divmod.quotient.15168@ohm>
References: <4323601F.7020204@softax.com.pl>
	<20050910233136.3914.373429572.divmod.quotient.15168@ohm>
Message-ID: <20050911061438.GA7761@trogdor.home.puzzling.org>

On Sat, Sep 10, 2005 at 07:31:36PM -0400, Jp Calderone wrote:
> 
> Twisted includes the basic pieces needed to construct a logging system.  
> The common thing to do in a Twisted application is just to call 
> twisted.python.log.msg() and twisted.python.log.err().  These aren't 
> covered much in the documentation, but their usage is pretty 
[...]

This and Itamar's earlier post on writing log observers have finally
inspired me to add a logging howto to the documentation.  It should be at
http://twistedmatrix.com/users/warner/doc-latest/core/howto/logging.html
as soon as buildbot gets to it.

-Andrew.




From mary-twisted at puzzling.org  Sun Sep 11 02:24:56 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 11 Sep 2005 18:24:56 +1000
Subject: [Twisted-Python] Twisted virtual sprint weekend: 8-9 October 2005
Message-ID: <20050911082456.GA4115@sourdust.home.puzzling.org>

Hi everyone,

As foreshadowed previously, we're following up the Australian sprints
earlier this year with an experimental virtual sprint.

 What: a weekend of hacking on the Twisted codebase when you can be sure
       other people will be too

 When: 8-9 October 2005, in whatever timezone you choose to spend your
       weekends

 Where: sprint discussion will happen on #twisted on the Freenode IRC
        network

-Mary

-- 
<Artimage> I believe a bar chart can confirm my humanity.



From Henning.Ramm at mediapro-gmbh.de  Sun Sep 11 11:28:14 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Sun, 11 Sep 2005 19:28:14 +0200
Subject: [Twisted-Python] Welcome (and some questions)
Message-ID: <F92274058556DE42B94B148EEFB91839021CB56A@exchange-03.suedkurier.de>

>>5) Does there exist example of twisted application with wxpython GUI?
>
>wxPython is a challenge to integrate with.  There have been 
>several strategies attempted and discarded over the years.  
>The current popular idea involves a new reactor which lets a 
>foreign event loop maintain more control over the program's 
>execution.  There has been no Twisted release since this was 
>added though, so if you want to try it out you'll need to get 
>an SVN checkout of Twisted.  If you do, you'll find some 
>examples in doc/core/examples/threadedselect/.  You can also 
>browse these online at 
><http://cvs.twistedmatrix.com/cvs/trunk/doc/core/examples/threa
dedselect/>.

threadedselectreactor works great, and you need only one file from SVN.

Here are the basics to use it:

import wx
from twisted.internet import threadedselectreactor
threadedselectreactor.install()
from twisted.internet import reactor

# on startup (in my app's __init__):
reactor.interleave(wx.CallAfter)

# on end (in my app's __del__):
reactor.stop()

main = MyApp()
main.MainLoop()


Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From antonykummel at yahoo.com  Sun Sep 11 12:06:00 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Sun, 11 Sep 2005 11:06:00 -0700 (PDT)
Subject: [Twisted-Python] threadedselectreactor and twistd
Message-ID: <20050911180600.64033.qmail@web33910.mail.mud.yahoo.com>

Hi,

Just wondering how and if to integrate
threadedselectreactor into twistd. I'm thinking to use
it for a GUI application which is also a server (and a
client), so I think using mktap/twistd makes sense,
but there is the matter of threadedselectreactor not
being supported.

What I've been thinking is for threadedselectreactor
to have another method, or it could be combined with
interleave, that accepts a callable that makes the
main loop run. It could also be a special reactor for,
say, wxPython, that accepts a wxApp (and interleaves
automatically), and calls its MainLoop method inside
reactor.run(). This would make it trivial to use with
twisted.application. It would simple require the
service to let the reactor know about its
wxApp/whatever.

Any thoughts?

Thanks,

Antony Kummel

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From bob at redivi.com  Sun Sep 11 12:17:41 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 11 Sep 2005 11:17:41 -0700
Subject: [Twisted-Python] Welcome (and some questions)
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB56A@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB91839021CB56A@exchange-03.suedkurier.de>
Message-ID: <01CB7C60-531B-4A32-8ED9-D6B726DF85FC@redivi.com>


On Sep 11, 2005, at 10:28 AM, <Henning.Ramm at mediapro-gmbh.de>  
<Henning.Ramm at mediapro-gmbh.de> wrote:

>>> 5) Does there exist example of twisted application with wxpython  
>>> GUI?
>>>
>>
>> wxPython is a challenge to integrate with.  There have been
>> several strategies attempted and discarded over the years.
>> The current popular idea involves a new reactor which lets a
>> foreign event loop maintain more control over the program's
>> execution.  There has been no Twisted release since this was
>> added though, so if you want to try it out you'll need to get
>> an SVN checkout of Twisted.  If you do, you'll find some
>> examples in doc/core/examples/threadedselect/.  You can also
>> browse these online at
>> <http://cvs.twistedmatrix.com/cvs/trunk/doc/core/examples/threa
>>
> dedselect/>.
>
> threadedselectreactor works great, and you need only one file from  
> SVN.
>
> Here are the basics to use it:
>
> import wx
> from twisted.internet import threadedselectreactor
> threadedselectreactor.install()
> from twisted.internet import reactor
>
> # on startup (in my app's __init__):
> reactor.interleave(wx.CallAfter)
>
> # on end (in my app's __del__):
> reactor.stop()
>
> main = MyApp()
> main.MainLoop()

Note that this example is not correct in some cases (shutdown is  
wrong).  You should look at the threadedselectreactor examples before  
writing code, as they are correct.

-bob




From bob at redivi.com  Sun Sep 11 13:28:10 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 11 Sep 2005 12:28:10 -0700
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <20050911180600.64033.qmail@web33910.mail.mud.yahoo.com>
References: <20050911180600.64033.qmail@web33910.mail.mud.yahoo.com>
Message-ID: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>


On Sep 11, 2005, at 11:06 AM, Antony Kummel wrote:

> Just wondering how and if to integrate
> threadedselectreactor into twistd. I'm thinking to use
> it for a GUI application which is also a server (and a
> client), so I think using mktap/twistd makes sense,
> but there is the matter of threadedselectreactor not
> being supported.
>
> What I've been thinking is for threadedselectreactor
> to have another method, or it could be combined with
> interleave, that accepts a callable that makes the
> main loop run. It could also be a special reactor for,
> say, wxPython, that accepts a wxApp (and interleaves
> automatically), and calls its MainLoop method inside
> reactor.run(). This would make it trivial to use with
> twisted.application. It would simple require the
> service to let the reactor know about its
> wxApp/whatever.
>
> Any thoughts?

I don't think that's really going to work without a bunch of  
refactoring of twistd and special-cases for each environment -- which  
is the problem that threadedselectreactor solves in the first place.

-bob




From mszumocki at contman.pl  Mon Sep 12 01:21:27 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Mon, 12 Sep 2005 09:21:27 +0200
Subject: [Twisted-Python] Re: Epydoc + interfaces
In-Reply-To: <E1EDnAT-0005Nb-03@pyramid.twistedmatrix.com>
Message-ID: <20050912072127.b5273cad@poczta.contman.pl>

> Date: Fri, 09 Sep 2005 11:32:16 +0200
> From: Nicola Larosa <nico at tekNico.net>
> Subject: [Twisted-Python] Re: Epydoc + interfaces
> To: twisted-python at twistedmatrix.com
> 
> The secret is apparently the epyrun script in the admin directory of the
> trunk. Can't give you a direct link because the SVN web access is not
> working right now.
> 
> There's been a mailing list thread about it a while ago, try searching the
> archives.
> 

Thanks, checked it out, had to modify that epyrun a little for my own needs, 
but got it working fine (replacing _lookup_class_field in epydoc's 
objdoc did the trick).

Maciej Szumocki



From itamar at itamarst.org  Mon Sep 12 09:12:38 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 12 Sep 2005 11:12:38 -0400
Subject: [Twisted-Python] Twisted Developers: Do not import Nevow
	in	twisted code, and other reminders
In-Reply-To: <43226CF6.7080403@divmod.com>
References: <1126278356.8767.18.camel@localhost.localdomain>
	<60ed19d40509092010656d969@mail.gmail.com>
	<43226CF6.7080403@divmod.com>
Message-ID: <1126537958.8773.99.camel@localhost.localdomain>

On Sat, 2005-09-10 at 01:19 -0400, Glyph Lefkowitz wrote:

> Not only is this import going in the wrong direction and depending upon 
> an unspecified version of Nevow within Twisted, the code is /already/ a 
> plug-in, which could easily be distributed along with Nevow rather than 
> along with Lore.

So, anyone feel like adding a Lore plugin to next Nevow release? :)




From dekonerding at lbl.gov  Mon Sep 12 10:30:51 2005
From: dekonerding at lbl.gov (David E. Konerding)
Date: Mon, 12 Sep 2005 09:30:51 -0700
Subject: [Twisted-Python] Throttling outgoing client requests
Message-ID: <4325AD3B.7060202@lbl.gov>

Hi,

I am writing a client usign Twisted that makes a lot of XMLRPC requests 
simultaneously (using twisted.web.xmlrpc.Proxy).  There are a bunch of 
them, all to the same site,
and when I run on MacOSX, I start getting bind errors-- I think OS X 
must have more restricted outgoing network connections that the linux
box I normally work on.

My goal is to throttle the number of outgoing requests.  I could do this 
by submitting just one request at a time, and having a deferred callback
registered such that when the request completes (successfully or not) 
the next request is submitting.  But this sort of code flow is pretty
contorted.  My other thought would be to just schedule all the calls 
with a callLater and a randomized delay for each call.  Again, not so clean.

Is there a 'clean' way to throttle back the number of ongoing client 
requests-- perhaps through the xmlrpc.Proxy itself, or through some pattern?

Dave



From andrew-twisted at puzzling.org  Mon Sep 12 10:55:31 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 13 Sep 2005 02:55:31 +1000
Subject: [Twisted-Python] Throttling outgoing client requests
In-Reply-To: <4325AD3B.7060202@lbl.gov>
References: <4325AD3B.7060202@lbl.gov>
Message-ID: <20050912165531.GD2127@trogdor.home.puzzling.org>

On Mon, Sep 12, 2005 at 09:30:51AM -0700, David E. Konerding wrote:
> Hi,
> 
> I am writing a client usign Twisted that makes a lot of XMLRPC requests 
> simultaneously (using twisted.web.xmlrpc.Proxy).  There are a bunch of 
> them, all to the same site,
> and when I run on MacOSX, I start getting bind errors-- I think OS X 
> must have more restricted outgoing network connections that the linux
> box I normally work on.
> 
> My goal is to throttle the number of outgoing requests.  I could do this 
> by submitting just one request at a time, and having a deferred callback
> registered such that when the request completes (successfully or not) 
> the next request is submitting.  But this sort of code flow is pretty
> contorted.  My other thought would be to just schedule all the calls 
> with a callLater and a randomized delay for each call.  Again, not so clean.
> 
> Is there a 'clean' way to throttle back the number of ongoing client 
> requests-- perhaps through the xmlrpc.Proxy itself, or through some pattern?

Use twisted.internet.defer.DeferredSemaphore (added in Twisted 2.0).

Rough sketch of how to use it:

    sem = DeferredSemaphore(10) # maximum of 10 jobs at once
    for job in joblist:
        d = sem.acquire()
        d.addCallback(job.run)  # do the work
        d.addErrback(log.err)   # handle any errors by logging them
        d.addBoth(lambda x: sem.release())  # trigger the next job

-Andrew.



From nico at tekNico.net  Mon Sep 12 10:54:00 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 12 Sep 2005 18:54:00 +0200
Subject: [Twisted-Python] Re: Throttling outgoing client requests
In-Reply-To: <4325AD3B.7060202@lbl.gov>
References: <4325AD3B.7060202@lbl.gov>
Message-ID: <dg4br8$40o$1@sea.gmane.org>

> Is there a 'clean' way to throttle back the number of ongoing client
> requests-- perhaps through the xmlrpc.Proxy itself, or through some
> pattern?

There's a bunch of resource-limiting tools in twisted.protocols.policies.py .

-- 
Nicola Larosa - nico at tekNico.net

That's a bit too much navel-gazing for me. With enough effort, you
make anything a symbol of anything else. But that doesn't get any
code written. -- Robert Kern on comp.lang.python, July 2005




From bob at redivi.com  Mon Sep 12 11:05:53 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 12 Sep 2005 10:05:53 -0700
Subject: [Twisted-Python] Throttling outgoing client requests
In-Reply-To: <4325AD3B.7060202@lbl.gov>
References: <4325AD3B.7060202@lbl.gov>
Message-ID: <3DCFDFB4-2BA7-4DDC-A0A7-CE85EE7267A3@redivi.com>


On Sep 12, 2005, at 9:30 AM, David E. Konerding wrote:

> I am writing a client usign Twisted that makes a lot of XMLRPC  
> requests simultaneously (using twisted.web.xmlrpc.Proxy).  There  
> are a bunch of them, all to the same site,
> and when I run on MacOSX, I start getting bind errors-- I think OS  
> X must have more restricted outgoing network connections that the  
> linux
> box I normally work on.

By default the Mac OS X descriptors limit is 256, you can change it  
though.. run "ulimit -n unlimited" (or "limit descriptors unlimited"  
in tcsh) from a shell, or you can also do something like this:

import resource
_, hard_limit = resource.getrlimit(resource.RLIMIT_NOFILE)
resource.setrlimit(resource.RLIMIT_NOFILE, (hard_limit, hard_limit))

-bob





From antonykummel at yahoo.com  Mon Sep 12 12:28:34 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Mon, 12 Sep 2005 11:28:34 -0700 (PDT)
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>
Message-ID: <20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>

Not sure what you mean.

If threadedselectreactor can't integrate with twistd,
then the problem that threadedselectreactor solves is
inherent to twistd, in which case twistd is simply
unsuitable for some uses (i.e. GUI)?

--- Bob Ippolito <bob at redivi.com> wrote:

> 
> On Sep 11, 2005, at 11:06 AM, Antony Kummel wrote:
> 
> > Just wondering how and if to integrate
> > threadedselectreactor into twistd. I'm thinking to
> use
> > it for a GUI application which is also a server
> (and a
> > client), so I think using mktap/twistd makes
> sense,
> > but there is the matter of threadedselectreactor
> not
> > being supported.
> >
> > What I've been thinking is for
> threadedselectreactor
> > to have another method, or it could be combined
> with
> > interleave, that accepts a callable that makes the
> > main loop run. It could also be a special reactor
> for,
> > say, wxPython, that accepts a wxApp (and
> interleaves
> > automatically), and calls its MainLoop method
> inside
> > reactor.run(). This would make it trivial to use
> with
> > twisted.application. It would simple require the
> > service to let the reactor know about its
> > wxApp/whatever.
> >
> > Any thoughts?
> 
> I don't think that's really going to work without a
> bunch of  
> refactoring of twistd and special-cases for each
> environment -- which  
> is the problem that threadedselectreactor solves in
> the first place.
> 
> -bob
> 
> 


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From bob at redivi.com  Mon Sep 12 12:42:39 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 12 Sep 2005 11:42:39 -0700
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
References: <20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
Message-ID: <18C50163-E9F7-4493-BA1E-4AD00241B834@redivi.com>

The problem that it solves is inherent to the reactor API, and the  
implementations of those reactors.  twistd supports the reactor API  
as-is, so it's not going to support an alternative to that API.  But  
yes, twistd isn't really appropriate for the same kind of typical use  
cases that threadedselectreactor is.  You're better off writing your  
app as you would normally do it, and invoking part of the twistd  
machinery yourself from inside there.

What really needs to happen is that the reactor API needs to be  
refactored such that any reactor can be used as a threaded reactor.   
Right now the idea of the threaded*reactor and the select() backend  
are conflated.  They don't have to be, and shouldn't, but I really  
didn't have the need to come up with such an API and change  
everything, I only needed one good implementation.

-bob

On Sep 12, 2005, at 11:28 AM, Antony Kummel wrote:

> Not sure what you mean.
>
> If threadedselectreactor can't integrate with twistd,
> then the problem that threadedselectreactor solves is
> inherent to twistd, in which case twistd is simply
> unsuitable for some uses (i.e. GUI)?
>
> --- Bob Ippolito <bob at redivi.com> wrote:
>
>
>>
>> On Sep 11, 2005, at 11:06 AM, Antony Kummel wrote:
>>
>>
>>> Just wondering how and if to integrate
>>> threadedselectreactor into twistd. I'm thinking to
>>>
>> use
>>
>>> it for a GUI application which is also a server
>>>
>> (and a
>>
>>> client), so I think using mktap/twistd makes
>>>
>> sense,
>>
>>> but there is the matter of threadedselectreactor
>>>
>> not
>>
>>> being supported.
>>>
>>> What I've been thinking is for
>>>
>> threadedselectreactor
>>
>>> to have another method, or it could be combined
>>>
>> with
>>
>>> interleave, that accepts a callable that makes the
>>> main loop run. It could also be a special reactor
>>>
>> for,
>>
>>> say, wxPython, that accepts a wxApp (and
>>>
>> interleaves
>>
>>> automatically), and calls its MainLoop method
>>>
>> inside
>>
>>> reactor.run(). This would make it trivial to use
>>>
>> with
>>
>>> twisted.application. It would simple require the
>>> service to let the reactor know about its
>>> wxApp/whatever.
>>>
>>> Any thoughts?
>>>
>>
>> I don't think that's really going to work without a
>> bunch of
>> refactoring of twistd and special-cases for each
>> environment -- which
>> is the problem that threadedselectreactor solves in
>> the first place.
>>
>> -bob
>>
>>
>>
>
>
> __________________________________________________
> Do You Yahoo!?
> Tired of spam?  Yahoo! Mail has the best spam protection around
> http://mail.yahoo.com
>




From exarkun at divmod.com  Mon Sep 12 21:27:42 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 12 Sep 2005 23:27:42 -0400
Subject: [Twisted-Python] Throttling outgoing client requests
In-Reply-To: <20050912165531.GD2127@trogdor.home.puzzling.org>
Message-ID: <20050913032742.3914.1948512840.divmod.quotient.15964@ohm>



On Tue, 13 Sep 2005 02:55:31 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>On Mon, Sep 12, 2005 at 09:30:51AM -0700, David E. Konerding wrote:
>> Hi,
>>
>> I am writing a client usign Twisted that makes a lot of XMLRPC requests
>> simultaneously (using twisted.web.xmlrpc.Proxy).  There are a bunch of
>> them, all to the same site,
>> and when I run on MacOSX, I start getting bind errors-- I think OS X
>> must have more restricted outgoing network connections that the linux
>> box I normally work on.
>>
>> My goal is to throttle the number of outgoing requests.  I could do this
>> by submitting just one request at a time, and having a deferred callback
>> registered such that when the request completes (successfully or not)
>> the next request is submitting.  But this sort of code flow is pretty
>> contorted.  My other thought would be to just schedule all the calls
>> with a callLater and a randomized delay for each call.  Again, not so clean.
>>
>> Is there a 'clean' way to throttle back the number of ongoing client
>> requests-- perhaps through the xmlrpc.Proxy itself, or through some pattern?
>
>Use twisted.internet.defer.DeferredSemaphore (added in Twisted 2.0).
>
>Rough sketch of how to use it:
>
>    sem = DeferredSemaphore(10) # maximum of 10 jobs at once
>    for job in joblist:
>        d = sem.acquire()
>        d.addCallback(job.run)  # do the work
>        d.addErrback(log.err)   # handle any errors by logging them
>        d.addBoth(lambda x: sem.release())  # trigger the next job

ITYM,

    sem = DeferredSemaphore(10)
    for job in joblist:
        sem.run(job.run).addErrback(log.err)

Note that this isn't the ideal way to queue up a large number of jobs.  The ideal way avoids constructing many more Deferreds than there are outstanding jobs, as well as avoids adding more than a fixed number of callbacks to each Deferred.

Jp



From andrew-twisted at puzzling.org  Mon Sep 12 21:33:18 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 13 Sep 2005 13:33:18 +1000
Subject: [Twisted-Python] Throttling outgoing client requests
In-Reply-To: <20050913032742.3914.1948512840.divmod.quotient.15964@ohm>
References: <20050912165531.GD2127@trogdor.home.puzzling.org>
	<20050913032742.3914.1948512840.divmod.quotient.15964@ohm>
Message-ID: <20050913033318.GG2127@trogdor.home.puzzling.org>

On Mon, Sep 12, 2005 at 11:27:42PM -0400, Jp Calderone wrote:
[...]
> 
> ITYM,
> 
>    sem = DeferredSemaphore(10)
>    for job in joblist:
>        sem.run(job.run).addErrback(log.err)

I do, thanks.  I shouldn't send mail so late at night.

> Note that this isn't the ideal way to queue up a large number of jobs.  The 
> ideal way avoids constructing many more Deferreds than there are 
> outstanding jobs, as well as avoids adding more than a fixed number of 
> callbacks to each Deferred.

But is harder to code...

-Andrew.




From stefano at pragma2000.com  Tue Sep 13 09:39:11 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Tue, 13 Sep 2005 17:39:11 +0200
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
References: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>
	<20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
Message-ID: <43274224050913083916a95fbb@mail.gmail.com>

On 9/12/05, Antony Kummel <antonykummel at yahoo.com> wrote:
> Not sure what you mean.
> 
> If threadedselectreactor can't integrate with twistd,
> then the problem that threadedselectreactor solves is
> inherent to twistd, in which case twistd is simply
> unsuitable for some uses (i.e. GUI)?
> 

Antony,

using twisted with GUIs is not trivial, and I found it quite tricky.
But in the end it's possible and in fact I do it all the time. Here's
the best solution I could find so far, using wxPython:

1) Run wxPython in the main thread
2) Run twisted reactor in a secondary thread
3) Have special proxy objects that bridge calls from gui code (running
in one thread) and network code (running inside another)

It doesn't sound nice, but it's not as bad as it seems.

The problem is that there's not much you can do about it, really:
first of all, wxPython is made in such a way that if you don't use its
own event loop, you won't be able to use modal dialogs (which simply
sucks). So you can't really use wxreactor, and similar solutions if
you want to build anything more complex that hello world.

Conversely, you can't use wxPython's event loop to process twisted
events because it's not responsive enough. So you're left with the
multiple threads solution only.

Once you have this, you need to deal with the communication problem:
say your network code is dealing with a protocol that fails, and you
want to warn the used with an error dialog. You can't really call
wx.ErrorDialog(...).ShowModal() because your code is running in the
wrong thread, so you have to wx.CallAfter(myShowDialogMethod, ...).

Similarly, if the user clicks on the "Connect" button, you can't call
twisted code from within the OnClick() event handler because you're
again in the wrong thread. Therefore you have to
reactor.callFromThread(myBeginConnectionMethod, ...).

So, dealing with these wx.CallAfter and reactor.callFromThread quickly
urges you to write proxies whose methods are decorated in such a way
that just by calling them from one thread triggers their execution in
the other thread.

When I discovered all these issues, I searched for code online and
found something that I can't find again, but looks a lot like this
(and could very well be the same):
http://solipsis.netofpeers.net/wiki2/index.php/WxPython_And_Twisted_Example

I wrote this in a bit of a rush, I hope I was clear enough.
If this is relevant to you, let me know in case you need more info.

stefano



From glyph at divmod.com  Tue Sep 13 10:18:04 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 13 Sep 2005 12:18:04 -0400
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <43274224050913083916a95fbb@mail.gmail.com>
Message-ID: <20050913161804.3914.577888580.divmod.quotient.16290@ohm>


On Tue, 13 Sep 2005 17:39:11 +0200, Stefano Masini <stefano at pragma2000.com> wrote:

>using twisted with GUIs is not trivial, and I found it quite tricky.
> (...) using wxPython:

The problem here is not Twisted and GUIs, the problem is wxPython.  While superficially appealing and very featureful, wxPython integrates *very* poorly with a foreign event loop and has no facility for integrating network I/O.

Using GTK+ with Twisted, for example, is completely trivial, and requires no such threading hacks.



From itamar at itamarst.org  Tue Sep 13 10:25:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 13 Sep 2005 12:25:29 -0400
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <43274224050913083916a95fbb@mail.gmail.com>
References: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>
	<20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
	<43274224050913083916a95fbb@mail.gmail.com>
Message-ID: <1126628729.8764.28.camel@localhost.localdomain>

On Tue, 2005-09-13 at 17:39 +0200, Stefano Masini wrote:

> using twisted with GUIs is not trivial, and I found it quite tricky.
> But in the end it's possible and in fact I do it all the time. Here's
> the best solution I could find so far, using wxPython:
> 
> 1) Run wxPython in the main thread
> 2) Run twisted reactor in a secondary thread
> 3) Have special proxy objects that bridge calls from gui code (running
> in one thread) and network code (running inside another)

threadedselectreactor is probably much easier than doing this.




From dekonerding at lbl.gov  Tue Sep 13 11:00:58 2005
From: dekonerding at lbl.gov (David E. Konerding DSD staff)
Date: Tue, 13 Sep 2005 10:00:58 -0700
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <1126628729.8764.28.camel@localhost.localdomain>
References: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>	<20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>	<43274224050913083916a95fbb@mail.gmail.com>
	<1126628729.8764.28.camel@localhost.localdomain>
Message-ID: <432705CA.2010901@lbl.gov>

Itamar Shtull-Trauring wrote:
>On Tue, 2005-09-13 at 17:39 +0200, Stefano Masini wrote:
>
>  
>>using twisted with GUIs is not trivial, and I found it quite tricky.
>>But in the end it's possible and in fact I do it all the time. Here's
>>the best solution I could find so far, using wxPython:
>>
>>1) Run wxPython in the main thread
>>2) Run twisted reactor in a secondary thread
>>3) Have special proxy objects that bridge calls from gui code (running
>>in one thread) and network code (running inside another)
>>    
>
>threadedselectreactor is probably much easier than doing this.
>
>  

Do you guys plan on making a release of Twisted that contains 
threadedselectreactor?
One of the reasons I hate using it is that every time I want to develop 
on a Windows box,
I have to grab the free Visual Studio compiler, a bunch of SDKs, patch 
distutils
to support the free compiler, compile Zope.Interface and Twisted just to 
use the
threadedselectreactor.

It's been working really well for us, by the way.

Dave



From bob at redivi.com  Tue Sep 13 11:03:25 2005
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 13 Sep 2005 10:03:25 -0700
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <43274224050913083916a95fbb@mail.gmail.com>
References: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>
	<20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
	<43274224050913083916a95fbb@mail.gmail.com>
Message-ID: <970D1F8D-EFC9-4D7D-AC2A-B40CDAFB6824@redivi.com>


On Sep 13, 2005, at 8:39 AM, Stefano Masini wrote:

> On 9/12/05, Antony Kummel <antonykummel at yahoo.com> wrote:
>
>> Not sure what you mean.
>>
>> If threadedselectreactor can't integrate with twistd,
>> then the problem that threadedselectreactor solves is
>> inherent to twistd, in which case twistd is simply
>> unsuitable for some uses (i.e. GUI)?
>>
>>
>
> using twisted with GUIs is not trivial, and I found it quite tricky.
> But in the end it's possible and in fact I do it all the time. Here's
> the best solution I could find so far, using wxPython:
>
> 1) Run wxPython in the main thread
> 2) Run twisted reactor in a secondary thread
> 3) Have special proxy objects that bridge calls from gui code (running
> in one thread) and network code (running inside another)

Have you actually used threadedselectreactor?  It sure doesn't sound  
like it.  It solves this problem without the proxy objects.

-bob




From bgranger at scu.edu  Tue Sep 13 12:13:41 2005
From: bgranger at scu.edu (Brian Granger)
Date: Tue, 13 Sep 2005 11:13:41 -0700
Subject: [Twisted-Python] Twisted server in the background
Message-ID: <D7BE5A46-D6FA-4E50-A0FD-7E4E962D0381@scu.edu>

Hi,

I have a server written using twisted that I want to run in the  
background.  But when I try:

python server.py &

at the command line, the server starts but then the server is sent  
SIGINT which stops the twisted reactor.  Here is my log file

2005/09/13 11:08 PDT [-] Log opened.
2005/09/13 11:08 PDT [-] kernelcore.KernelTCPFactory starting on 10105
2005/09/13 11:08 PDT [-] Starting factory  
<kernelcore.KernelTCPFactory instance
at 0x58c210>
2005/09/13 11:08 PDT [-] Received SIGINT, shutting down.
2005/09/13 11:08 PDT [kernelcore.KernelTCPFactory] (Port 10105 Closed)
2005/09/13 11:08 PDT [kernelcore.KernelTCPFactory] Stopping factory  
<kernelcore.
KernelTCPFactory instance at 0x58c210>
2005/09/13 11:08 PDT [-] Main loop terminated.

How can I run a twisted server in the background?  Using twistd is  
not an option as I am using threadedselectreactor.  Thanks

Brian
  



From itamar at itamarst.org  Tue Sep 13 14:39:16 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 13 Sep 2005 16:39:16 -0400
Subject: [Twisted-Python] Twisted server in the background
In-Reply-To: <D7BE5A46-D6FA-4E50-A0FD-7E4E962D0381@scu.edu>
References: <D7BE5A46-D6FA-4E50-A0FD-7E4E962D0381@scu.edu>
Message-ID: <1126643956.8764.52.camel@localhost.localdomain>

On Tue, 2005-09-13 at 11:13 -0700, Brian Granger wrote:

> How can I run a twisted server in the background?  Using twistd is  
> not an option as I am using threadedselectreactor.  Thanks

You want to do the same thing twistd does, fork, close stdin/out/err
etc.. Find the applicable function in twistd's code and see if you can
reuse it.




From Henning.Ramm at mediapro-gmbh.de  Tue Sep 13 16:36:40 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Wed, 14 Sep 2005 00:36:40 +0200
Subject: [Twisted-Python] threadedselectreactor and twistd
Message-ID: <F92274058556DE42B94B148EEFB91839021CB570@exchange-03.suedkurier.de>

>>  
>
>Do you guys plan on making a release of Twisted that contains 
>threadedselectreactor?
>One of the reasons I hate using it is that every time I want 
>to develop 
>on a Windows box,
>I have to grab the free Visual Studio compiler, a bunch of SDKs, patch 
>distutils
>to support the free compiler, compile Zope.Interface and 
>Twisted just to 
>use the
>threadedselectreactor.

Why that effort? Just grab twistedselectreactor.py from SVN and copy it in your twisted 2.0 installation.

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From foom at fuhm.net  Wed Sep 14 00:00:56 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 14 Sep 2005 00:00:56 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EFQKG-0005ml-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-09-07 06:00:01.810000:
 Bugs opened: 9   Bugs closed: 9   Total open bugs: 423 (+0)
  Urgent: 11 (+1)
  Bug: 185 (-3)
  Feature: 153 (+0)
  Wish: 74 (+2)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] trial --testmodule no longer runs any tests  (yesterday)
       http://twistedmatrix.com/bugs/issue1170 opened by spiv

                    ==== Bug ====
[CORE] invalid path names in plugin system  (yesterday)
       http://twistedmatrix.com/bugs/issue1169 opened by antony

[PB] Errors in PB unserialization not reported to requestor  (2 days ago)
       http://twistedmatrix.com/bugs/issue1168 opened by antony

[DOCUMENTATION] Example in application.xhtml missing files and makes little sense  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1167 opened by spiv

[DOCUMENTATION, MAIL] [PATCH] Correct recipients type information in IMessageDelivery.receivedHeader docstring  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1165 opened by pacopablo

Jabber Example  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1164 opened by dialtone

[ENTERPRISE] enterprise.util.quote() doesn't escape ' for type bytea  (6 days ago)
       http://twistedmatrix.com/bugs/issue1163 opened by markbergsma

                    ==== Feature ====
[APPLICATION, TWISTD] twistd has no way to gracefully stop the initialization of an application instance if some conditions are not met  (yesterday)
       http://twistedmatrix.com/bugs/issue1171 opened by Biappi

                    ==== Wish ====
[TRIAL] trial doesn't search for TestCases in the most ideal way possible  (3 days ago)
       http://twistedmatrix.com/bugs/issue1166 opened by exarkun

Bugs Closed
______________________
                    ==== Bug ====
[DOCUMENTATION] Example in application.xhtml missing files and makes little sense  (2 days ago)
       http://twistedmatrix.com/bugs/issue1167 opened by spiv, closed by spiv

[DOCUMENTATION] Twisted logging howto  (11 months ago)
       http://twistedmatrix.com/bugs/issue741 opened by exarkun, closed by spiv

[DOCUMENTATION] Need a howto for Twisted's logging (twisted.python.log)  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1153 opened by spiv, closed by spiv

pop3client needs to handle servers which do not implement CAPA  (1 month ago)
       http://twistedmatrix.com/bugs/issue1125 opened by bkirsch, closed by exarkun

[MAIL] pop3 protocol does not parse lines according to the rfc  (3 months ago)
       http://twistedmatrix.com/bugs/issue1076 opened by mg, closed by exarkun

[CONCH, TRIAL] CharacterAttribute's __getattr__ fools inspect.isclass.  (1 week ago)
       http://twistedmatrix.com/bugs/issue1158 opened by jml, closed by exarkun

[DOCUMENTATION, MAIL] [PATCH] Correct recipients type information in IMessageDelivery.receivedHeader docstring  (4 days ago)
       http://twistedmatrix.com/bugs/issue1165 opened by pacopablo, closed by exarkun

[DOCUMENTATION, MAIL] mail documentation links to non-existant example  (7 days ago)
       http://twistedmatrix.com/bugs/issue1162 opened by hypatia, closed by hypatia

Jabber Example  (6 days ago)
       http://twistedmatrix.com/bugs/issue1164 opened by dialtone, closed by ralphm




From stefano at pragma2000.com  Wed Sep 14 00:42:01 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Wed, 14 Sep 2005 08:42:01 +0200
Subject: [Twisted-Python] threadedselectreactor and twistd
In-Reply-To: <970D1F8D-EFC9-4D7D-AC2A-B40CDAFB6824@redivi.com>
References: <D31D617B-FDE4-4C5D-A355-371BB43A179D@redivi.com>
	<20050912182835.94095.qmail@web33902.mail.mud.yahoo.com>
	<43274224050913083916a95fbb@mail.gmail.com>
	<970D1F8D-EFC9-4D7D-AC2A-B40CDAFB6824@redivi.com>
Message-ID: <4327422405091323423861bf87@mail.gmail.com>

On 9/13/05, Bob Ippolito <bob at redivi.com> wrote:
> Have you actually used threadedselectreactor?  It sure doesn't sound
> like it.  It solves this problem without the proxy objects.

Indeed, I just learn about it now. Thanks! It sounds sweet.
Unfortunately I've already got a lot of working code... proxy objects
aren't that bad for me. So I'll have to wait until the next
refactoring in order to try it. :(

-stefano



From solipsis at pitrou.net  Wed Sep 14 05:35:35 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 14 Sep 2005 13:35:35 +0200
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <20050913161804.3914.577888580.divmod.quotient.16290@ohm>
References: <20050913161804.3914.577888580.divmod.quotient.16290@ohm>
Message-ID: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>


> The problem here is not Twisted and GUIs, the problem is wxPython.
> While superficially appealing and very featureful, wxPython integrates
> *very* poorly with a foreign event loop and has no facility for
> integrating network I/O.
> 
> Using GTK+ with Twisted, for example, is completely trivial, and
> requires no such threading hacks.

Never tried GTK with Twisted, but I don't understand how you can say
that generally.
Suppose a network event is taking some time to process (e.g. the
protocol is complex and there are some calculations involved), then your
GUI will become unresponsive (a 100ms delay is not critical for most
Internet protocols, but it is for GUIs).
Suppose there are lots of network events coming in, which flood the
event loop for a short time. When will GUI events be processed ? Again,
a 100ms delay will feel very annoying for the user (and more than 1
second delay is awful).
On the other hand, if you have one thread for networking and one thread
for the GUI, the OS can take care of the scheduling priorities
naturally, using its sophisticated builtin mechanisms (e.g. noticing
that one thread is "interactive" while the other is not), so you don't
have to rewrite/emulate/composate for the lack of/ them.

Am I missing something here ?

Regards

Antoine.





From glyph at divmod.com  Wed Sep 14 06:05:29 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 14 Sep 2005 08:05:29 -0400
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>
Message-ID: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>



On Wed, 14 Sep 2005 13:35:35 +0200, Antoine Pitrou <solipsis at pitrou.net> wrote:

>Never tried GTK with Twisted, but I don't understand how you can say
>that generally.

I was saying it was easier to program, not that it performed better (and by the way, it *does* perform better than WX), but since you asked -

>Suppose a network event is taking some time to process (e.g. the
>protocol is complex and there are some calculations involved), then your
>GUI will become unresponsive (a 100ms delay is not critical for most
>Internet protocols, but it is for GUIs).

Not at all.  A user clicks on a button; if they don't see an update for 100ms, that is barely enough time for them to flick their mouse over to another button.  In fact, network latency is such that it is nearly impossible to provide faster than 100ms actual real response time even for highly performance-critical applications.

If the UI isn't redrawing for 100ms, it is hard for the user to even notice, unless it is a continuous 100ms between redraws, in which case this GUI application is really doing quite a lot of work!

>Suppose there are lots of network events coming in, which flood the
>event loop for a short time. When will GUI events be processed ? Again,
>a 100ms delay will feel very annoying for the user (and more than 1
>second delay is awful).

A news aggregator I use, straw, does blocking DNS lookups and can hang completely for upwards of a minute while it's doing an update.  While this is not exactly ideal behavior, it's tolerable.  Even Firefox locks up for a few seconds when rendering a complex page.  You are somewhat overstating the case - I sure wish that everything were faster, but 100ms latency on certain operations is not going to make anyone stop using an application :).

>On the other hand, if you have one thread for networking and one thread
>for the GUI, the OS can take care of the scheduling priorities
>naturally, using its sophisticated builtin mechanisms (e.g. noticing
>that one thread is "interactive" while the other is not), so you don't
>have to rewrite/emulate/composate for the lack of/ them.

>Am I missing something here ?

A few things:

1 - this is really not as major a problem as you say, for the reasons given above.
2 - this argument is tangential; if the thread scheduler is so sophisticated, it will notice that the IO-plus-UI thread is also "interactive" and schedule it appropriately.  (In fact, both threads in your example are "interactive" according to Linux 2.6's scheduler heuristic, I think)
3 - you don't have to emulate anything about threads when writing Twisted GUI applications unless you have extremely computation-intensive actions to perform; and in that case you can use threads for those (few) actions rather than everything in the app
4 - you're assuming that you have to build extra to "compensate" for the lack of threads, but you're ignoring the cost of building support tools to use them.  building thread safety into even a single API is difficult, costly, and extremely hard to test for correctness even superficially.  
5 - if you have a networked interactive application under high load, you are not going to improve performance or interactivity by performing a ton of additional context switches as well as a bunch of extra work locking and unlocking shared mutexes.  smart as the scheduler is, your computer *does* only have one or two processors, and more threads = more work.  (this is especially true if you are using threads for EVERYTHING in your application, rather than just the truly parallelizeable tasks)
6 - in Python, your threaded work has to release the GIL to give any substantive improvement in performance, which it probably doesn't.

... and that's just off the top of my head.



From solipsis at pitrou.net  Wed Sep 14 06:18:26 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 14 Sep 2005 14:18:26 +0200
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
Message-ID: <1126700306.29082.14.camel@p-dvsi-418-1.rd.francetelecom.fr>


Hi,

> Not at all.  A user clicks on a button; if they don't see an update
> for 100ms, that is barely enough time for them to flick their mouse
> over to another button.  In fact, network latency is such that it is
> nearly impossible to provide faster than 100ms actual real response
> time even for highly performance-critical applications.

Of course, but in a non-trivial GUI+network application, lots of GUI
actions do not imply networking.
For example in Firefox, the bookmarks editor is independent from
networking stuff, and I doubt it is unresponsive when the app is busy
parsing some HTML (I must admit I haven't checked, though).

> A news aggregator I use, straw, does blocking DNS lookups and can hang
> completely for upwards of a minute while it's doing an update.  While
> this is not exactly ideal behavior, it's tolerable.

That tolerance certainly depends on the user ;)
People who aren't aware of network issues will just think "wow, it's
crashed" and kill the window in a way or another.

> 6 - in Python, your threaded work has to release the GIL to give any
> substantive improvement in performance, which it probably doesn't.

My argument was only about responsiveness (latency), not performance
(bandwidth). Also, I advocate the use of two threads, not a thousand ;))

(er... I will try to find the time to look at Q2Q, by the way)

Regards

Antoine.





From mike at mkp.ca  Wed Sep 14 10:01:18 2005
From: mike at mkp.ca (Mike Pelletier)
Date: Wed, 14 Sep 2005 12:01:18 -0400
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
Message-ID: <200509141201.19484.mike@mkp.ca>

Oh good, a tangential conversation that I'm not really qualified to comment on 
with no real significance to the subject of the list.  My favourite!  I must 
add my two cents.  ;-)

On Wed September 14 2005 08:05, glyph at divmod.com wrote:
> Not at all.  A user clicks on a button; if they don't see an update for
> 100ms, that is barely enough time for them to flick their mouse over to
> another button.

100ms seems like an awfully long time for a GUI to go without even providing 
feedback to the user (ie, depressing a button, colouring a link, highlighting 
a control, etc).  Consider especially operations like drag-and-drop and using 
spinners, which are very interactive and require fine motor movement.  Also 
consider interacting with dense and complex controls with lots of small 
clicking areas, as in a DTP app or 3d modeller.  Timely feedback is very 
important to a comfortable experience.  After 8 hours of using something with 
mushy, >100ms feedback, I would be cursing the invention of the mouse.

I drank deeply of the Be koolaid.  I think the goal should be for an interface 
should remain responsive at interactive levels in all conditions, even when 
the rest of the app is busy and unresponsive.  Feedback to user actions 
should seem instantaneous (much closer to 10ms than 100ms), even -- 
especially! -- if the user's actions cannot be resolved for some seconds.

> If the UI isn't redrawing for 100ms, it is hard for the user to even
> notice, unless it is a continuous 100ms between redraws, in which case this
> GUI application is really doing quite a lot of work!

10fps is a pretty feeble goal in a lot of application spaces.

Of course, I recognize that Twisted is a framework for network apps, not UIs.  
But that's almost an argument *for* separating the UI and network event 
loops.

> A news aggregator I use, straw, does blocking DNS lookups and can hang
> completely for upwards of a minute while it's doing an update.  While this
> is not exactly ideal behavior, it's tolerable.  Even Firefox locks up for a 
> few seconds when rendering a complex page.

"These other apps suck, so ours can suck too"?

> You are somewhat overstating 
> the case - I sure wish that everything were faster, but 100ms latency on
> certain operations is not going to make anyone stop using an application
> :).

I use Konq rather than Firefox because, on my turn-of-the-century equipment, 
Firefox is too unresponsive.  Of course, I sacrifice a lot of the "web 
experience" but a) good riddance and b) unresponsive apps aggravate me, 
perhaps more than the average user.

> A few things:

Though I disagree with your assumptions, I can't argue with your points.  I'm 
tempted to think this is a failing of Python (the heresy!).  It seems like 
because of issues like the GIL, one needs to put the interface and the 
machinery in completely separate processes to reach Be-like ideals.

Mike.



From alessandro-bottoni at libero.it  Wed Sep 14 10:38:59 2005
From: alessandro-bottoni at libero.it (Alessandro Bottoni)
Date: Wed, 14 Sep 2005 18:38:59 +0200
Subject: [Twisted-Python] O'Reilly book on Twisted
Message-ID: <200509141838.59624.alessandro-bottoni@libero.it>

Most likely, I was sleeping while the teacher told it but... I just discovered 
that O'Reilly is going to publish a book on Twisted:

http://www.oreilly.com/catalog/twistedadn/

http://www.amazon.com/exec/obidos/tg/detail/-/0596100329/qid=1126714644/sr=1-1/ref=sr_1_1/102-3430080-1376942?v=glance&s=books

(Sleeping) newbies like me will be happy... ;-)
-----------------------------
Alessandro Bottoni



From general at eepatents.com  Wed Sep 14 11:03:39 2005
From: general at eepatents.com (Ed Suominen)
Date: Wed, 14 Sep 2005 10:03:39 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
Message-ID: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>

I've been following this discussion with some interest because I'm
starting a new project that will be heavily centered around both
MySQL-based persistency  and a graphically demanding GUI.  I took a look
at wxPython but was somewhat turned off by the complication of
integrating it with Twisted, which I'm using to do top-level dispatching
of time-consuming stuff in threads and in separate processes, and to
perform networking when that functionality inevitably winds up getting
added to the application.

I had been thinking about PyQT but was turned off by the licensing
complications under Windows.  However, QT4 is dual-licensed and there is
already a conveniently installable GPL version of PyQT for Windows now.
(Apparently, someone went to the trouble of recompiling the GPL'd QT3
source under cygwin, and the result seems to work fine for me.) You can
get it at http://www.quadgames.com/download/pythonqt/PyQtGPL10.exe.

So, I think the choice will be PyQT for me. Comments welcome, though.

- Ed Suominen




From jasper at peak.org  Wed Sep 14 12:26:19 2005
From: jasper at peak.org (Jasper)
Date: Wed, 14 Sep 2005 11:26:19 -0700
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
Message-ID: <43286B4B.20100@peak.org>

glyph at divmod.com wrote:

> On Wed, 14 Sep 2005 13:35:35 +0200, Antoine Pitrou 
> <solipsis at pitrou.net> wrote:
>
>> Suppose a network event is taking some time to process (e.g. the
>> protocol is complex and there are some calculations involved), then your
>> GUI will become unresponsive (a 100ms delay is not critical for most
>> Internet protocols, but it is for GUIs).
>
>
> Not at all.  A user clicks on a button; if they don't see an update 
> for 100ms, that is barely enough time for them to flick their mouse 
> over to another button.  In fact, network latency is such that it is 
> nearly impossible to provide faster than 100ms actual real response 
> time even for highly performance-critical applications.
>
> If the UI isn't redrawing for 100ms, it is hard for the user to even 
> notice, unless it is a continuous 100ms between redraws, in which case 
> this GUI application is really doing quite a lot of work!


Normally you're a pretty sharp guy, but you're dead wrong about this. 
Tenth of a second delays are very noticeable, quickly become quite 
annoying, and make fine GUI control difficult as your mouse jumps 
around, etc..  Keeping interupts shorter than 100ms is very much 
critical for GUIs.

Your "Firefox is unresponsive" example is a special case, as usually 
there is nothing to do while you wait for a page to load, so lack of 
responsiveness goes unnoticed; even so, as soon as you try loading 
multiple pages in background tabs it can become quite annoying, with 
mouse clicks get lost, etc.

Now, I'm not a fan of threaded programming, and I definitely agree 
wxPython doesn't integrate well with Twisted (IIRC it doesn't relinquish 
control reliably), but Twisted is also lacking in this department.  I 
only see 2 ways to deal with moderate length processing chunks and still 
allow a responsive GUI: split them off into a seperate thread/process 
(yuck!), or painstakingly instrument every such piece of code to do it's 
own time tracking and yield at an appropriate moment -- which isn't much 
better than threading.  Worse, I don't see a satisfactory way to deal 
with the problem if it stems from some internal bit of Twisted taking 
too big of a time slice.  Manually split and recombine my network data 
into smaller chunks?  Run the whole GUI loop in a different thread?!

Unfortunately I don't have a solid idea of what Twisted could do better 
here, as I'm only passingly familiar with it's internals.  Perhaps some 
way to get the Reactor to transmit network data in smaller chunks, with 
more frequent pauses in between to allow for GUI responsiveness?

-Jasper



From stefano at pragma2000.com  Wed Sep 14 12:30:55 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Wed, 14 Sep 2005 20:30:55 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
Message-ID: <432742240509141130429ecd2d@mail.gmail.com>

On 9/14/05, Ed Suominen <general at eepatents.com> wrote:
> MySQL-based persistency  and a graphically demanding GUI.  I took a look
> at wxPython but was somewhat turned off by the complication of
> integrating it with Twisted, which I'm using to do top-level dispatching

I've already commented about this on the thread this one spinned off
from, but I'll repeat it here: wxPython *can* be used with Twisted,
and it's not very complicated.
I use two separate threads (with two event loops) and two proxy
objects to vehicle the requests from one thread to the other.

I just learnt there is a wonderful threadedselectreactor that allows
for an easy integration of twisted and wx inside the same event loop,
but I haven't tried it yet.
Actually, and I'm sure I will say some nonsense here, so please
correct me if you are in the know, I'm wondering if having the same
loop process both wx and twisted events could harm twisted
responsiveness, or viceversa.

By the way, I have to say that using proxy objects is not that bad. I
actually think it's quite nice to have all the possible interaction
formalized as methods all belonging to the same object. But in my case
I don't have a *very* complicated interaction: from the network side,
I just need to raise dialogs, update the status bar, update table
contents, open and close windows and stuff like this. From the gui
side I need to start a connection protocol, stop it, trigger
communication with a server, send updates, and stuff like this. So,
it's not a million of methods, it's just a few, that I actually like
having all sorted in the same place.

cheers,
stefano



From nico at tekNico.net  Wed Sep 14 12:29:23 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 14 Sep 2005 20:29:23 +0200
Subject: [Twisted-Python] Re: O'Reilly book on Twisted
In-Reply-To: <200509141838.59624.alessandro-bottoni@libero.it>
References: <200509141838.59624.alessandro-bottoni@libero.it>
Message-ID: <dg9q63$6qj$1@sea.gmane.org>

> Most likely, I was sleeping while the teacher told it but... I just discovered 
> that O'Reilly is going to publish a book on Twisted:
> 
> http://www.oreilly.com/catalog/twistedadn/
> 
> http://www.amazon.com/exec/obidos/tg/detail/-/0596100329/qid=1126714644/sr=1-1/ref=sr_1_1/102-3430080-1376942?v=glance&s=books

The book cover is a blast! :-D

-- 
Nicola Larosa - nico at tekNico.net

That's a bit too much navel-gazing for me. With enough effort, you
make anything a symbol of anything else. But that doesn't get any
code written. -- Robert Kern on comp.lang.python, July 2005




From bob at redivi.com  Wed Sep 14 13:03:52 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 14 Sep 2005 15:03:52 -0400
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
Message-ID: <E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>


On Sep 14, 2005, at 1:03 PM, Ed Suominen wrote:

> I've been following this discussion with some interest because I'm
> starting a new project that will be heavily centered around both
> MySQL-based persistency  and a graphically demanding GUI.  I took a  
> look
> at wxPython but was somewhat turned off by the complication of
> integrating it with Twisted, which I'm using to do top-level  
> dispatching
> of time-consuming stuff in threads and in separate processes, and to
> perform networking when that functionality inevitably winds up getting
> added to the application.

This is exactly the sort of application that threadedselectreactor is  
for.  The integration is neither hard, complicated, nor slow.

-bob




From Henning.Ramm at mediapro-gmbh.de  Wed Sep 14 13:08:41 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Wed, 14 Sep 2005 21:08:41 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
Message-ID: <F92274058556DE42B94B148EEFB91839021CB572@exchange-03.suedkurier.de>

Please everyone stop complaining about how bad twisted and wx would
integrate etc. while you didn't try threadedselectreactor first!

regards, HR



From Henning.Ramm at mediapro-gmbh.de  Wed Sep 14 13:31:37 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Wed, 14 Sep 2005 21:31:37 +0200
Subject: [Twisted-Python] process timing / idle handler
Message-ID: <F92274058556DE42B94B148EEFB91839021CB573@exchange-03.suedkurier.de>

Ahoi!

I often use reactor.callLater(0, something) to let twisted handle and intercept my call queue.
Is this really preferable to calling 'something' directly? Or do I just fool myself?

Is there something like reactor.OnIdle()?
Or, more generally, how could I delay some actions (intermediate cleanup etc.) until the computer has free resources?
(Some of my processes run on a very high loaded server.)


Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From exarkun at divmod.com  Wed Sep 14 13:52:50 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 14 Sep 2005 15:52:50 -0400
Subject: [Twisted-Python] process timing / idle handler
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB573@exchange-03.suedkurier.de>
Message-ID: <20050914195250.3914.2047845410.divmod.quotient.17026@ohm>

On Wed, 14 Sep 2005 21:31:37 +0200, henning.ramm at mediapro-gmbh.de wrote:
>Ahoi!
>
>I often use reactor.callLater(0, something) to let twisted handle and intercept my call queue.
>Is this really preferable to calling 'something' directly? Or do I just fool myself?
>
>Is there something like reactor.OnIdle()?
>Or, more generally, how could I delay some actions (intermediate cleanup etc.) until the computer has free resources?
>(Some of my processes run on a very high loaded server.)
>

This does what you expect, but what you expect may not be the right thing.  What happens if there are 50 on-idle tasks?  That won't be nearly as nice as if there's only 1.  If you want to schedule CPU-intensive tasks, they need to cooperate with each other.

Take a look at <http://divmod.org/svn/Divmod/trunk/Epsilon/epsilon/cooperator.py>.  It's intended to be used with time-consumed tasks implemented as iterators.  By using a single Cooperator, the amount of work you arrange to have performed per unit of network activity is limited, regardless of the number of different tasks outstanding.

This also lets you tune the rate at which time-consumed tasks are processed using a single knob.  This means that if you notice you can handle greater latency, there is a single thing to change (possibly even at runtime) to let you do this (the benefit being that doing more work at once is more efficient).

You can also nest Cooperators and assign them non-time-based schedulers (such as a system load-based scheduler).  This lets you give a task or group of tasks a priority relative to other things you have scheduled.

However, if you have expensive computations that do not interact with the rest of your application except by receiving an immutable or non-shared chunk of input and producing an immutable or non-shared chunk of output, a threaded solution may well be appropriate.  Threadless solutions are superior because they let the code in question interact with the rest of your application in an unsurprising way.  If there is no interaction, the benefits of avoiding threads are less pronounced.

Jp



From jasper at peak.org  Wed Sep 14 15:15:52 2005
From: jasper at peak.org (Jasper)
Date: Wed, 14 Sep 2005 14:15:52 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
Message-ID: <43289308.50606@peak.org>

Bob Ippolito wrote:

>
> On Sep 14, 2005, at 1:03 PM, Ed Suominen wrote:
>
>> I've been following this discussion with some interest because I'm
>> starting a new project that will be heavily centered around both
>> MySQL-based persistency  and a graphically demanding GUI.  I took a  
>> look
>> at wxPython but was somewhat turned off by the complication of
>> integrating it with Twisted, which I'm using to do top-level  
>> dispatching
>> of time-consuming stuff in threads and in separate processes, and to
>> perform networking when that functionality inevitably winds up getting
>> added to the application.
>
>
> This is exactly the sort of application that threadedselectreactor is  
> for.  The integration is neither hard, complicated, nor slow.


Hmmm.  Perhaps I glanced over threadedselectreactor too quickly, since 
all the discussion seemed to be about wxPython (which I'm not using).  
However, casting about through the archives, I haven't really found a 
good description of threadedselectreactor...

What's it actually do?  Just allow you to integrate 2 loops in a 
slightly nicer fashion?  I integrated my pygame+pyui loop with twisted's 
default reactor using 5 simple lines of code, so I'm not seeing much 
room for gain there...  Does threadedselectreactor do more, like address 
GUI responsiveness?

Or more to the point, is there a concise overview somewhere?

-Jasper



From bob at redivi.com  Wed Sep 14 16:33:13 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 14 Sep 2005 18:33:13 -0400
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <43289308.50606@peak.org>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
	<43289308.50606@peak.org>
Message-ID: <2FA8A4EE-CA63-4A09-A529-64BEB6A50E60@redivi.com>


On Sep 14, 2005, at 5:15 PM, Jasper wrote:

> Bob Ippolito wrote:
>
>
>>
>> On Sep 14, 2005, at 1:03 PM, Ed Suominen wrote:
>>
>>
>>> I've been following this discussion with some interest because I'm
>>> starting a new project that will be heavily centered around both
>>> MySQL-based persistency  and a graphically demanding GUI.  I took  
>>> a  look
>>> at wxPython but was somewhat turned off by the complication of
>>> integrating it with Twisted, which I'm using to do top-level   
>>> dispatching
>>> of time-consuming stuff in threads and in separate processes, and to
>>> perform networking when that functionality inevitably winds up  
>>> getting
>>> added to the application.
>>>
>>
>>
>> This is exactly the sort of application that threadedselectreactor  
>> is  for.  The integration is neither hard, complicated, nor slow.
>>
>
>
> Hmmm.  Perhaps I glanced over threadedselectreactor too quickly,  
> since all the discussion seemed to be about wxPython (which I'm not  
> using).  However, casting about through the archives, I haven't  
> really found a good description of threadedselectreactor...
>
> What's it actually do?  Just allow you to integrate 2 loops in a  
> slightly nicer fashion?  I integrated my pygame+pyui loop with  
> twisted's default reactor using 5 simple lines of code, so I'm not  
> seeing much room for gain there...  Does threadedselectreactor do  
> more, like address GUI responsiveness?
>
> Or more to the point, is there a concise overview somewhere?

http://bob.pythonmac.org/archives/2005/04/17/twisted-and-foreign- 
event-loops/
http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/threadedselect/

-bob




From radeex at gmail.com  Wed Sep 14 16:53:39 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 15 Sep 2005 08:53:39 +1000
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
References: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>
	<20050914120529.3914.647455527.divmod.quotient.16815@ohm>
Message-ID: <60ed19d405091415536f86ee2c@mail.gmail.com>

On 9/14/05, glyph at divmod.com <glyph at divmod.com> wrote:
> On Wed, 14 Sep 2005 13:35:35 +0200, Antoine Pitrou <solipsis at pitrou.net> wrote:
> >Suppose a network event is taking some time to process (e.g. the
> >protocol is complex and there are some calculations involved), then your
> >GUI will become unresponsive (a 100ms delay is not critical for most
> >Internet protocols, but it is for GUIs).
> 
> Not at all.  A user clicks on a button; if they don't see an update for 100ms, that is barely enough time for them to flick their mouse over to another button.  In fact, network latency is such that it is nearly impossible to provide faster than 100ms actual real response time even for highly performance-critical applications.

[etc, etc, all of glyph's points...]

Whether or not this argument is correct, it's unnecessary. There's a
much simpler way to argue this side of the threads-in-GUIs debate:

The way to write all Twisted applications, not just GUI ones, is that
you _DO NOT BLOCK_. Blocking for even a small amount of time in, for
example, a network server application, can eventually have disastrous
results for the usability of your network server application. If you
have CPU intensive functionality in your application, you need to
figure out a way to make it not block, by either (e.g.) breaking the
computation across reactor iterations, or by deferring those
individual operations to a thread, or process, or whatever. For other
sorts of operations, fortunately Twisted offers non-blocking
alternatives for many sorts of operations, like I/O. :-)

If you write your Twisted application in a way that isn't horrible,
your GUIs won't block. It's pretty simple.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From radeex at gmail.com  Wed Sep 14 17:05:10 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 15 Sep 2005 09:05:10 +1000
Subject: [Twisted-Python] O'Reilly book on Twisted
In-Reply-To: <200509141838.59624.alessandro-bottoni@libero.it>
References: <200509141838.59624.alessandro-bottoni@libero.it>
Message-ID: <60ed19d4050914160523256330@mail.gmail.com>

On 9/15/05, Alessandro Bottoni <alessandro-bottoni at libero.it> wrote:
> Most likely, I was sleeping while the teacher told it but... I just discovered
> that O'Reilly is going to publish a book on Twisted:
> 
> http://www.oreilly.com/catalog/twistedadn/
> 
> http://www.amazon.com/exec/obidos/tg/detail/-/0596100329/qid=1126714644/sr=1-1/ref=sr_1_1/102-3430080-1376942?v=glance&s=books
> 
> (Sleeping) newbies like me will be happy... ;-)

Aha, the list has heard about the new Twisted book (Abe Fettig posted
about it a little while back), but I don't believe we've caught a
glimpse of the cover yet. That rocks :-)

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From jasper at peak.org  Wed Sep 14 17:35:07 2005
From: jasper at peak.org (Jasper)
Date: Wed, 14 Sep 2005 16:35:07 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <2FA8A4EE-CA63-4A09-A529-64BEB6A50E60@redivi.com>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
	<43289308.50606@peak.org>
	<2FA8A4EE-CA63-4A09-A529-64BEB6A50E60@redivi.com>
Message-ID: <4328B3AB.7000802@peak.org>

Bob Ippolito wrote:

>
> On Sep 14, 2005, at 5:15 PM, Jasper wrote:
>
>> Bob Ippolito wrote:
>>
>> Hmmm.  Perhaps I glanced over threadedselectreactor too quickly,  
>> since all the discussion seemed to be about wxPython (which I'm not  
>> using).  However, casting about through the archives, I haven't  
>> really found a good description of threadedselectreactor...
>>
>> What's it actually do?  Just allow you to integrate 2 loops in a  
>> slightly nicer fashion?  I integrated my pygame+pyui loop with  
>> twisted's default reactor using 5 simple lines of code, so I'm not  
>> seeing much room for gain there...  Does threadedselectreactor do  
>> more, like address GUI responsiveness?
>>
>> Or more to the point, is there a concise overview somewhere?
>
>
> http://bob.pythonmac.org/archives/2005/04/17/twisted-and-foreign- 
> event-loops/
> http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/threadedselect/
>
> -bob
>
>
Heh, I'd seen both of those... Neither really suggest any reason to use 
threadedselectreactor beyond being able to integrate foreign loops.

I guess I'm just not seeing what's so great about threadedselectreactor, 
except perhaps that it's better than wxreactor.

-Jasper



From jasper at peak.org  Wed Sep 14 18:04:37 2005
From: jasper at peak.org (Jasper)
Date: Wed, 14 Sep 2005 17:04:37 -0700
Subject: [Twisted-Python] process timing / idle handler
In-Reply-To: <20050914195250.3914.2047845410.divmod.quotient.17026@ohm>
References: <20050914195250.3914.2047845410.divmod.quotient.17026@ohm>
Message-ID: <4328BA95.4070706@peak.org>

Jp Calderone wrote:

> Take a look at 
> <http://divmod.org/svn/Divmod/trunk/Epsilon/epsilon/cooperator.py>.  
> It's intended to be used with time-consumed tasks implemented as 
> iterators.  By using a single Cooperator, the amount of work you 
> arrange to have performed per unit of network activity is limited, 
> regardless of the number of different tasks outstanding.

Thanks for the link! I'd been considering something similar (but with 
generators), and it's good food for thought.

-Jasper



From bob at redivi.com  Wed Sep 14 18:07:21 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 14 Sep 2005 20:07:21 -0400
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <4328B3AB.7000802@peak.org>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
	<43289308.50606@peak.org>
	<2FA8A4EE-CA63-4A09-A529-64BEB6A50E60@redivi.com>
	<4328B3AB.7000802@peak.org>
Message-ID: <78A31684-8353-45DE-8D22-40D2283C57B2@redivi.com>


On Sep 14, 2005, at 7:35 PM, Jasper wrote:

> Bob Ippolito wrote:
>
>
>>
>> On Sep 14, 2005, at 5:15 PM, Jasper wrote:
>>
>>
>>> Bob Ippolito wrote:
>>>
>>> Hmmm.  Perhaps I glanced over threadedselectreactor too quickly,   
>>> since all the discussion seemed to be about wxPython (which I'm  
>>> not  using).  However, casting about through the archives, I  
>>> haven't  really found a good description of threadedselectreactor...
>>>
>>> What's it actually do?  Just allow you to integrate 2 loops in a   
>>> slightly nicer fashion?  I integrated my pygame+pyui loop with   
>>> twisted's default reactor using 5 simple lines of code, so I'm  
>>> not  seeing much room for gain there...  Does  
>>> threadedselectreactor do  more, like address GUI responsiveness?
>>>
>>> Or more to the point, is there a concise overview somewhere?
>>>
>>
>>
>> http://bob.pythonmac.org/archives/2005/04/17/twisted-and-foreign-  
>> event-loops/
>> http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/ 
>> threadedselect/
>>
> Heh, I'd seen both of those... Neither really suggest any reason to  
> use threadedselectreactor beyond being able to integrate foreign  
> loops.

That's all the reason you need.  If you're integrating with a foreign  
event loop, you either use a custom specific reactor (most of which  
are broken and/or unmaintained), or you use threadedselectreactor.   
Writing your own custom specific reactor is almost certainly going to  
be broken in some way, and it's more complex code that you have to  
maintain.

> I guess I'm just not seeing what's so great about  
> threadedselectreactor, except perhaps that it's better than wxreactor.

It's better than writing your own reactor for every foreign event  
loop you're interested in, and it's generic enough to integrate with  
ANYTHING that has a thread-safe way to send a message to the main  
runloop (basically, all of them can do that).  Your pygame+pyui loop  
is probably less responsive to either network or user events, or  
perhaps instead chews more CPU than a threadedselectreactor alternative.

Fortunately, there's even an example that demonstrates how you could  
use it in conjunction with pygame.

-bob




From glyph at divmod.com  Wed Sep 14 18:42:14 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 14 Sep 2005 20:42:14 -0400
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <60ed19d405091415536f86ee2c@mail.gmail.com>
References: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>	<20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<60ed19d405091415536f86ee2c@mail.gmail.com>
Message-ID: <4328C366.1060005@divmod.com>

Christopher Armstrong wrote:

> If you write your Twisted application in a way that isn't horrible,
> your GUIs won't block. It's pretty simple.

I was about to write a post that looked about like this, and that also 
made reference to the "cooperator" module that JP just posted, so thank 
you both for making that irrelevant :)




From mikah at ceruleansoftware.com  Wed Sep 14 23:32:18 2005
From: mikah at ceruleansoftware.com (mikah at ceruleansoftware.com)
Date: Thu, 15 Sep 2005 13:32:18 +0800
Subject: [Twisted-Python] ReconnectingClientFactory creates multiple
	Protocols?
Message-ID: <20050915053217.GA21814@ceruleansoftware.com>

Hello --

  My network app consists of a ReconnectingClientFactory whose
Protocol instances connect to a another server. The protocol
class logs its activities to a file. Each transaction has a
unique number that increments.

  As far as I can tell, it works perfectly, with one strange
quirk. If I leave the app running for several days, I start
seeing more than one protocol showing up in the logs. I can
tell that it's not the same protocol since there's more than
one sequence of transaction numbers incrementing.

  As far as I can tell, it's related to the connection being
dropped, at which point the Factory reconnects and creates a
new protocol instance.

  What might I be doing wrong? It's buildProtocol() that
creates the new instances, but shouldn't the previous instance
get disconnected and cleaned up somehow? How can I ensure
this?

  Is it possible to force a protocol to disconnect and get
deleted? Which class (app, service, factory, protocol) should
be responsible?

  Thanks in advance,

mikah





From nico at tekNico.net  Thu Sep 15 02:39:39 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 15 Sep 2005 10:39:39 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <43289308.50606@peak.org>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
	<43289308.50606@peak.org>
Message-ID: <dgbc0c$2hq$1@sea.gmane.org>

> I integrated my pygame+pyui loop with twisted's default reactor
> using 5 simple lines of code, so I'm not seeing much room for
> gain there...

I'd sure like to see those five lines. ;-)

-- 
Nicola Larosa - nico at tekNico.net

That's a bit too much navel-gazing for me. With enough effort, you
make anything a symbol of anything else. But that doesn't get any
code written. -- Robert Kern on comp.lang.python, July 2005




From nico at tekNico.net  Thu Sep 15 02:50:06 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 15 Sep 2005 10:50:06 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <43286B4B.20100@peak.org>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<43286B4B.20100@peak.org>
Message-ID: <dgbcjv$4co$1@sea.gmane.org>

> Worse, I don't see a satisfactory way to deal
> with the problem if it stems from some internal bit of Twisted taking
> too big of a time slice.

Two noticeable cases of that are (de)serialization in PB and in XML-RPC code.

Is there going to be any facility, in newpb, for splitting up
(de)serialization in small chunks?

-- 
Nicola Larosa - nico at tekNico.net

That's a bit too much navel-gazing for me. With enough effort, you
make anything a symbol of anything else. But that doesn't get any
code written. -- Robert Kern on comp.lang.python, July 2005




From stefano at pragma2000.com  Thu Sep 15 03:29:16 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 15 Sep 2005 11:29:16 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <dgbcjv$4co$1@sea.gmane.org>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<43286B4B.20100@peak.org> <dgbcjv$4co$1@sea.gmane.org>
Message-ID: <4327422405091502294a60acab@mail.gmail.com>

On 9/15/05, Nicola Larosa <nico at teknico.net> wrote:
> > Worse, I don't see a satisfactory way to deal
> > with the problem if it stems from some internal bit of Twisted taking
> > too big of a time slice.
> 
> Two noticeable cases of that are (de)serialization in PB and in XML-RPC code.

Thinking about event handling taking up too much time, I once hacked
my reactor in order to measure the time taken by each callback and
send warnings when the execution time was longer than 0.something... I
found it useful to track down some horrible implementation that I left
behind and forgot about.

Is there something like this somewhere in twisted? Maybe something
that could be turned on and off for debugging?
Of course this would mean extra work at every cycle. Would it be too
bad for performance? I didn't find my hack too bad, but I wasn't
working at critical throughputs, I was just concerned with
responsiveness.

cheers,
stefano



From abe at fettig.net  Thu Sep 15 06:31:59 2005
From: abe at fettig.net (Abe Fettig)
Date: Thu, 15 Sep 2005 08:31:59 -0400
Subject: [Twisted-Python] Re: O'Reilly book on Twisted
In-Reply-To: <dg9q63$6qj$1@sea.gmane.org>
References: <200509141838.59624.alessandro-bottoni@libero.it>
	<dg9q63$6qj$1@sea.gmane.org>
Message-ID: <432969BF.1040009@fettig.net>

Nicola Larosa wrote:
>>Most likely, I was sleeping while the teacher told it but... I just discovered 
>>that O'Reilly is going to publish a book on Twisted:
>>
>>http://www.oreilly.com/catalog/twistedadn/
>>
>>http://www.amazon.com/exec/obidos/tg/detail/-/0596100329/qid=1126714644/sr=1-1/ref=sr_1_1/102-3430080-1376942?v=glance&s=books
> 
> 
> The book cover is a blast! :-D

It sure is - the O'Reilly designers picked the perfect image! I just
submitted the final changes the other day, so it's almost ready for
printing. I'm looking forward to seeing it in person :-)

Abe



From alessandro-bottoni at libero.it  Thu Sep 15 06:49:51 2005
From: alessandro-bottoni at libero.it (Alessandro Bottoni)
Date: Thu, 15 Sep 2005 14:49:51 +0200
Subject: [Twisted-Python] Re: O'Reilly book on Twisted
In-Reply-To: <432969BF.1040009@fettig.net>
References: <200509141838.59624.alessandro-bottoni@libero.it>
	<dg9q63$6qj$1@sea.gmane.org> <432969BF.1040009@fettig.net>
Message-ID: <200509151449.51384.alessandro-bottoni@libero.it>

Abe,
I want to thank you for having written this book.

Despite its elegant structure, Twisted is still hard to understand at first. 
Your book will help us a lot in using this nice framework.

Thanks again
-----------------------------
Alessandro Bottoni



From solipsis at pitrou.net  Thu Sep 15 07:16:03 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 15 Sep 2005 15:16:03 +0200
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <60ed19d405091415536f86ee2c@mail.gmail.com>
References: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>
	<20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<60ed19d405091415536f86ee2c@mail.gmail.com>
Message-ID: <1126790163.10856.2.camel@p-dvsi-418-1.rd.francetelecom.fr>


> The way to write all Twisted applications, not just GUI ones, is that
> you _DO NOT BLOCK_. Blocking for even a small amount of time in, for
> example, a network server application, can eventually have disastrous
> results for the usability of your network server application.

Provided it is a network server application, that is.
If you are writing an asynchronous message-passing-based P2P app, then a
100ms or even 1s latency when sending/receiving packets isn't horrible
at all.

But it becomes horrible when the GUI is subject to the same 100ms
delay ;)

Regards

Antoine.





From tv at twistedmatrix.com  Thu Sep 15 07:25:13 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 15 Sep 2005 16:25:13 +0300
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <200509141201.19484.mike@mkp.ca>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<200509141201.19484.mike@mkp.ca>
Message-ID: <43297639.2080209@twistedmatrix.com>

Mike Pelletier wrote:
> Of course, I recognize that Twisted is a framework for network apps, not UIs.  
> But that's almost an argument *for* separating the UI and network event 
> loops.

Oh my, a good idea hidden inside this futile thread.

Use separate processes for heavy loads of different characteristics.

Use a clean protocol between the processes to enable pluggability of
things you never even imagined.



From itamar at itamarst.org  Thu Sep 15 08:27:08 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 15 Sep 2005 10:27:08 -0400
Subject: [Twisted-Python] ReconnectingClientFactory creates multiple
	Protocols?
In-Reply-To: <20050915053217.GA21814@ceruleansoftware.com>
References: <20050915053217.GA21814@ceruleansoftware.com>
Message-ID: <1126794428.8867.18.camel@localhost.localdomain>

On Thu, 2005-09-15 at 13:32 +0800, mikah at ceruleansoftware.com wrote:

>   As far as I can tell, it's related to the connection being
> dropped, at which point the Factory reconnects and creates a
> new protocol instance.

Protocols (at least, when used with TCP) are designed so that their
lifetime matches that of the TCP connection they are handling. As a
result, when the connection is lost and the factory reconnects, this is
a new TCP connection with a new protocol. This is why there's a factory,
to manage data and logic that is not tied to a specific TCP connection
(e.g. "should I reconnect?" or "how far along was the download when I
got disconnected.")

In general you'd want to use the factory to store state that needs to
last past the lifetime of the protocol. You can, of course, have
buildProtocol always return the same instance, but that's pretty ugly
and can easily lead to obscure bugs if you don't clean up the state
correctly.




From stefano at pragma2000.com  Thu Sep 15 09:38:09 2005
From: stefano at pragma2000.com (Stefano Masini)
Date: Thu, 15 Sep 2005 17:38:09 +0200
Subject: [Twisted-Python] GUI responsiveness
In-Reply-To: <1126790163.10856.2.camel@p-dvsi-418-1.rd.francetelecom.fr>
References: <1126697735.29082.7.camel@p-dvsi-418-1.rd.francetelecom.fr>
	<20050914120529.3914.647455527.divmod.quotient.16815@ohm>
	<60ed19d405091415536f86ee2c@mail.gmail.com>
	<1126790163.10856.2.camel@p-dvsi-418-1.rd.francetelecom.fr>
Message-ID: <43274224050915083879444848@mail.gmail.com>

On 9/15/05, Antoine Pitrou <solipsis at pitrou.net> wrote:
> > The way to write all Twisted applications, not just GUI ones, is that
> > you _DO NOT BLOCK_. Blocking for even a small amount of time in, for
> > example, a network server application, can eventually have disastrous
> > results for the usability of your network server application.
> 
> Provided it is a network server application, that is.
> If you are writing an asynchronous message-passing-based P2P app, then a
> 100ms or even 1s latency when sending/receiving packets isn't horrible
> at all.
> 
> But it becomes horrible when the GUI is subject to the same 100ms
> delay ;)

I don't see your point Antoine.
Chris was pointing out that in an asynchronous model your event
handlers should not block. This means that if the task you're
performing - say round tripping a packet - is gonna take 100ms,
instead of waiting for it to complete - as you would in a synchronous
model - you're gonna break it up into, say, "initiation" and
"completion" phases. So your handler will only block for the duration
of the initiation phase, that will supposedly last a lot less that
100ms, maybe not more than 1ms, and return a deferred. Then the event
loop will go off and do other stuff. After 100 ms the deferred will
fire and some other part of your code will be called and perform the
completion phase.

So, if you do as you should, GUI responsiveness will not have anything
to deal with the actual round trip times of your protocol messages.

The problem with responsiveness will come up _only_ if for some reason
you have handlers that take a lot of time to run. For example if they
do complex computation or synchronous IO of large files, and stuff
like this.

stefano



From jasper at peak.org  Thu Sep 15 11:41:08 2005
From: jasper at peak.org (Jasper)
Date: Thu, 15 Sep 2005 10:41:08 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <78A31684-8353-45DE-8D22-40D2283C57B2@redivi.com>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>
	<43289308.50606@peak.org>
	<2FA8A4EE-CA63-4A09-A529-64BEB6A50E60@redivi.com>
	<4328B3AB.7000802@peak.org>
	<78A31684-8353-45DE-8D22-40D2283C57B2@redivi.com>
Message-ID: <4329B234.7020402@peak.org>

Bob Ippolito wrote:

> On Sep 14, 2005, at 7:35 PM, Jasper wrote:
>
>> I guess I'm just not seeing what's so great about  
>> threadedselectreactor, except perhaps that it's better than wxreactor.
>
>
> It's better than writing your own reactor for every foreign event  
> loop you're interested in, and it's generic enough to integrate with  
> ANYTHING that has a thread-safe way to send a message to the main  
> runloop (basically, all of them can do that).  Your pygame+pyui loop  
> is probably less responsive to either network or user events, or  
> perhaps instead chews more CPU than a threadedselectreactor alternative. 


Ok, so it's perhaps more efficient.  CPU and user events are fine, 
although I'm not sure about network response.  I imagine the pauses I'm 
seeing are due to sending large data chunks though, which I don't think 
threadedselectreactor addresses.

-Jasper



From jasper at peak.org  Thu Sep 15 11:46:39 2005
From: jasper at peak.org (Jasper)
Date: Thu, 15 Sep 2005 10:46:39 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <dgbc0c$2hq$1@sea.gmane.org>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>	<43289308.50606@peak.org>
	<dgbc0c$2hq$1@sea.gmane.org>
Message-ID: <4329B37F.2090107@peak.org>

Nicola Larosa wrote:

>>I integrated my pygame+pyui loop with twisted's default reactor
>>using 5 simple lines of code, so I'm not seeing much room for
>>gain there...
>>    
>>
>
>I'd sure like to see those five lines. ;-)
>
>  
>
Here's what it roughly is, stripping out code and params not directly 
involved.  I just took the simplest thing I could think of, and since it 
worked I didn't look much further.  Perhaps this would have trouble if 
had frequent network traffic, but I don't.

-Jasper


class PyuiClient( NetworkClient ):
    def __init__( self  ):
        # ...
        self._pyuiRefresh( .001 )

    def _pyuiRefresh( self, delay ):
        pyui.draw()
        pyui.update()
        reactor.callLater( delay, self._pyuiRefresh, delay )




From jasper at peak.org  Thu Sep 15 11:51:11 2005
From: jasper at peak.org (Jasper)
Date: Thu, 15 Sep 2005 10:51:11 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <dgbcjv$4co$1@sea.gmane.org>
References: <20050914120529.3914.647455527.divmod.quotient.16815@ohm>	<43286B4B.20100@peak.org>
	<dgbcjv$4co$1@sea.gmane.org>
Message-ID: <4329B48F.9090706@peak.org>

Nicola Larosa wrote:

>>Worse, I don't see a satisfactory way to deal
>>with the problem if it stems from some internal bit of Twisted taking
>>too big of a time slice.
>>    
>>
>
>Two noticeable cases of that are (de)serialization in PB and in XML-RPC code.
>
>Is there going to be any facility, in newpb, for splitting up
>(de)serialization in small chunks?
>  
>
Yes, PB (de)serialization seems to be where I get responsiveness burps 
too.  I can split up large processing chunks of my own (probably along 
the line of JP's Cooperator), but I don't see how to readily do that to 
delays that are internal to Twisted, without maintaining my own version 
or shunting all networking into a seperate thread (which I'm loath to do).

-Jasper



From antonykummel at yahoo.com  Thu Sep 15 12:13:52 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Thu, 15 Sep 2005 11:13:52 -0700 (PDT)
Subject: [Twisted-Python] unsafe tracebacks in PB
Message-ID: <20050915181352.22871.qmail@web33914.mail.mud.yahoo.com>

Hi,

Just wondering, why is it possible to turn on unsafe
tracebacks only at the server and not at the client?
PB being symmetrical, this discrimination makes it
arbitrarily difficuly to debug PB applications
sometimes.

Antony Kummel

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From antonykummel at yahoo.com  Thu Sep 15 12:43:55 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Thu, 15 Sep 2005 11:43:55 -0700 (PDT)
Subject: [Twisted-Python] jelly tracebacks
Message-ID: <20050915184355.59140.qmail@web33905.mail.mud.yahoo.com>

Hi,

I just had a grueling experience debugging some
unjellying problem. I wonder, why not make jelly
tracebacks more useful by adding the details of the PB
message that gave rise to them (i.e. which method of
which object was called with which arguments). Any
thoughts?

Antony Kummel

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From antonykummel at yahoo.com  Thu Sep 15 12:54:52 2005
From: antonykummel at yahoo.com (Antony Kummel)
Date: Thu, 15 Sep 2005 11:54:52 -0700 (PDT)
Subject: [Twisted-Python] application shutdown and control-C
Message-ID: <20050915185452.80535.qmail@web33909.mail.mud.yahoo.com>

Hi,

When running an application on Windows with twistd,
and stopping it with Control-C, sometimes it shuts
down properly, and sometimes it just stops abruptly,
which also means it doesn't get written to
*-shutdown.tap. That's no good! Has anyone experienced
this before?

Thanks,

Antony Kummel

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From itamar at itamarst.org  Thu Sep 15 13:15:04 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 15 Sep 2005 15:15:04 -0400
Subject: [Twisted-Python] application shutdown and control-C
In-Reply-To: <20050915185452.80535.qmail@web33909.mail.mud.yahoo.com>
References: <20050915185452.80535.qmail@web33909.mail.mud.yahoo.com>
Message-ID: <1126811704.8867.37.camel@localhost.localdomain>

On Thu, 2005-09-15 at 11:54 -0700, Antony Kummel wrote:

> When running an application on Windows with twistd,
> and stopping it with Control-C, sometimes it shuts
> down properly, and sometimes it just stops abruptly,
> which also means it doesn't get written to
> *-shutdown.tap. That's no good! Has anyone experienced
> this before? 

1. You should not depend on creation of .tap in shutdown. Never store
anything important in a .tap.

2. That sounds kinda wierd, it should shut down cleanly.




From warner at lothar.com  Thu Sep 15 13:32:50 2005
From: warner at lothar.com (Brian Warner)
Date: Thu, 15 Sep 2005 12:32:50 -0700 (PDT)
Subject: [Twisted-Python] Re: GUI responsiveness
Message-ID: <20050915.123250.108654696.warner@lothar.com>

Nicola Larosa <nico at tekNico.net> writes:
>
> Is there going to be any facility, in newpb, for splitting up
> (de)serialization in small chunks?

Yes, for serialization of custom classes. The serialization process can be
throttled by either the network side (producer/consumer style) or by the
serializer side.

Each "Slicer" object is responsible for turning a single object into either
low-level tokens (numbers and strings) or other Slicable objects. The 'slice'
method is actually a generator, expected to yield a series of smaller
objects. If it yields a Deferred, it will not be prodded again until that
Deferred fires. The outbound side of the PB connection will be stalled until
that object resumes serialization. (I'm considering an extension that would
let you have multiple serialization contexts running in parallel over a
single connection: if implemented, this deferred-serialization would not
stall the connection.. on the other hand methods could be invoked
out-of-order, which might be a problem).

You could also register a Slicer adapter to handle existing classes (or
conceivably for built-in types, like 'list', although I'm not sure that
actually works right now), so you could have a ListSlicer which does
something like:

 def slice(self):
  ITEMLIMIT = 10
  for i in range(0, len(self.original), ITEMLIMIT):
    for j in range(i, min(len(self.original),i+ITEMLIMIT)):
      yield self.original[j]
    d = defer.Deferred()
    reactor.callLater(0, d.callback, None)
    yield d

to limit how much gets serialized before giving up control for a turn. (of
course, this control may be too coarse to achieve what you want, if some of
the items are ints and some are big monster nested classes.. ideally you
would pay attention to the elapsed time or CPU cycles or pending workload or
something and just yield the Deferred when you need to).


I don't currently have anything in place for the deserialization side.
Unslicer objects have their receiveChild() method called repeatedly with
low-level tokens as they arrive off the wire, until you run out. Each time
read() returns a buffer of data, the Unslicer does as much work as it can
before returning.

This means you're naturally limited by the network speed. Unlike Slicers, the
Unslicers can only be throttled by the network side. I suspect you would need
to have a pretty fast pipe, saturated with inbound data, and a pretty slow
(or overloaded) CPU, before you would see a problem with this. If someone
thinks it is important, we could probably allow receiveChild() to return a
Deferred that means "stop reading from the socket until this Deferred fires",
which might be useful.

It might also be useful to add some code to the end of dataReceived() (right
after it has finished processing everything in the buffer) to do
transport.stopReading() (and arrange for it to be started again later) if not
enough other work had been done recently. I suspect this is a bit too much to
squeeze into PB: if receive-side CPU time is really a problem, we need a more
generalized way to handle this. In a previous life, where I implemented a
Reactor in C instead of python, I built some priority-queue/round-robin/WFQ
stuff into it, to reassure some fellow developers who were concerned about
things like traffic on one socket swamping all the others, and who would have
really preferred some full-blown real-time guarantees. I'm hesitant to drag
this sort of thing into Twisted, but if there's enough of a demand for it
(and someone can show actual problems with the existing approach), then maybe
it'd be worth investigating.

cheers,
 -Brian



From glyph at divmod.com  Thu Sep 15 15:48:39 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 15 Sep 2005 17:48:39 -0400
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: 0
Message-ID: <20050915214839.3914.135938274.divmod.quotient.17468@ohm>


On Thu, 15 Sep 2005 10:51:11 -0700, Jasper <jasper at peak.org> wrote:
>Nicola Larosa wrote:
>>>Worse, I don't see a satisfactory way to deal
>>>with the problem if it stems from some internal bit of Twisted taking
>>>too big of a time slice.

>>Two noticeable cases of that are (de)serialization in PB and in XML-RPC 
>>code.

There is a thing that SEDA does to make these kinds of things more reasonable.  Deferreds are sort of a degenerate case of this thing.  They don't name the thing, but I would call it "stage discipline", the act of splitting code up into what they call "stages" and making each stage idempotent except for the terminal, transaction-processing/notification-emitting stage.  I think it would be great if more of Twisted did this, but doing it is a big job.

Defgen is a slightly-less-degenerate form of this, however, using defgen on something performance critical like (de)serialization is likely to have a HUGE performance hit.

>>Is there going to be any facility, in newpb, for splitting up
>>(de)serialization in small chunks?

As warner said, "yes".

>Yes, PB (de)serialization seems to be where I get responsiveness burps too. 
>I can split up large processing chunks of my own (probably along the line of 
>JP's Cooperator), but I don't see how to readily do that to delays that are 
>internal to Twisted, without maintaining my own version or shunting all 
>networking into a seperate thread (which I'm loath to do).

"shunting all networking into a separate thread" will certainly not work, since all of the APIs that jelly calls are not thread-safe.  So you can rest easy in the knowledge that what you want to do is not only disgusting, it's impossible :).

However, the problem here is that certain code in Twisted is not as awesome as it possibly could be.  While I agree this is sad, there isn't really a solution, except "make it more awesome", which takes time, money, and effort, which nobody is contributing beyond an individual scale.

PB has been effectively unmaintained for almost 2 years now.  It is showing its age.  NewPB will fix several issues, but until someone wants to give Mr. Warner a staff and a budget for improving it, it's likely that it will have some ugly spots too.

In other words, you don't have to maintain your own version.  You just have to maintain the one in Twisted ;-).



From glyph at divmod.com  Thu Sep 15 15:52:32 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 15 Sep 2005 17:52:32 -0400
Subject: [Twisted-Python] application shutdown and control-C
In-Reply-To: <20050915185452.80535.qmail@web33909.mail.mud.yahoo.com>
Message-ID: <20050915215232.3914.1188708196.divmod.quotient.17472@ohm>



On Thu, 15 Sep 2005 11:54:52 -0700 (PDT), Antony Kummel <antonykummel at yahoo.com> wrote:

>When running an application on Windows with twistd,
>and stopping it with Control-C, sometimes it shuts
>down properly, and sometimes it just stops abruptly,
>which also means it doesn't get written to
>*-shutdown.tap. That's no good! Has anyone experienced
>this before?

Yep, and I spent about a week trying to fix it, once.  I couldn't really figure it out, but I came away with the impression that there isn't *really* such a thing as "signal()" on Windows - programs don't habitually send signals or handle them, especially when sent by hitting C-c in a CMD window - which appears to be subtly different from programmatically sending it.

Cygwin utilities appear to have the same issue; on 1 out of 100 runs (for me, anyway), C-c'ing a hosed process will terminate it instantly with no cleanup.  Also, command-line Python will usually generate a KeyboardInterrupt, but sometimes just exit immediately.  The busier it is, the more likely to just die (it seems) but I have never managed a direct correlation.

Terminating any reactor normally on Windows, with .stop(), works fine, though.



From solipsis at pitrou.net  Fri Sep 16 04:25:21 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 16 Sep 2005 12:25:21 +0200
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <4329B37F.2090107@peak.org>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>
	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>	<43289308.50606@peak.org>
	<dgbc0c$2hq$1@sea.gmane.org>  <4329B37F.2090107@peak.org>
Message-ID: <1126866321.27418.2.camel@p-dvsi-418-1.rd.francetelecom.fr>


> class PyuiClient( NetworkClient ):
>     def __init__( self  ):
>         # ...
>         self._pyuiRefresh( .001 )
> 
>     def _pyuiRefresh( self, delay ):
>         pyui.draw()
>         pyui.update()
>         reactor.callLater( delay, self._pyuiRefresh, delay )

This looks like a busy wait loop. It will eat a good chunk of the CPU
time (depending on the time taken by each "_pyuiRefresh" iteration) and
your laptop users (if there any) may not be very happy... It may slow
down other apps tooo.






From jasper at peak.org  Fri Sep 16 07:37:27 2005
From: jasper at peak.org (Jasper)
Date: Fri, 16 Sep 2005 06:37:27 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <1126866321.27418.2.camel@p-dvsi-418-1.rd.francetelecom.fr>
References: <1126717419.8355.56.camel@207-118-93-73.stat.centurytel.net>	<E3623A3C-73C1-48C0-B118-F1CE459B9D34@redivi.com>	<43289308.50606@peak.org>	<dgbc0c$2hq$1@sea.gmane.org>
	<4329B37F.2090107@peak.org>
	<1126866321.27418.2.camel@p-dvsi-418-1.rd.francetelecom.fr>
Message-ID: <432ACA97.9020403@peak.org>

Antoine Pitrou wrote:

>>class PyuiClient( NetworkClient ):
>>    def __init__( self  ):
>>        # ...
>>        self._pyuiRefresh( .001 )
>>
>>    def _pyuiRefresh( self, delay ):
>>        pyui.draw()
>>        pyui.update()
>>        reactor.callLater( delay, self._pyuiRefresh, delay )
>>    
>>
>
>This looks like a busy wait loop. It will eat a good chunk of the CPU
>time (depending on the time taken by each "_pyuiRefresh" iteration) and
>your laptop users (if there any) may not be very happy... It may slow
>down other apps tooo.
>  
>

It's not a busy wait loop, whenever it's not doing anything control is 
relinquished to twisted.  The .001 second delay /is/ really short, and I 
had originally expected something closer to the screen refresh rate like 
.01, but after testing I found that .001 performed better.  To be honest 
I don't fully understand why this is the case, as it seems like this 
would be wastefull, but it works fast enough I can't really justify the 
time it would take to profile it and figure out exactly what's going on.

Anyway, I get 60 FPS, idling CPU use is 5%, and I develop on an older 
laptop.  Since this is a game I don't much care if it slows down other 
apps, which it does a little.  I have no doubt that it could be more 
efficient, but considering I don't have any speed problems I'm perfectly 
happy trading this off for
code simplicity.

-Jasper



From jasper at peak.org  Fri Sep 16 08:22:46 2005
From: jasper at peak.org (Jasper)
Date: Fri, 16 Sep 2005 07:22:46 -0700
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <20050915214839.3914.135938274.divmod.quotient.17468@ohm>
References: <20050915214839.3914.135938274.divmod.quotient.17468@ohm>
Message-ID: <432AD536.2020208@peak.org>

glyph at divmod.com wrote:

>>> Is there going to be any facility, in newpb, for splitting up
>>> (de)serialization in small chunks?
>>
>
> As warner said, "yes".

Woohoo!

>> Yes, PB (de)serialization seems to be where I get responsiveness 
>> burps too. I can split up large processing chunks of my own (probably 
>> along the line of JP's Cooperator), but I don't see how to readily do 
>> that to delays that are internal to Twisted, without maintaining my 
>> own version or shunting all networking into a seperate thread (which 
>> I'm loath to do).
>
>
> "shunting all networking into a separate thread" will certainly not 
> work, since all of the APIs that jelly calls are not thread-safe.  So 
> you can rest easy in the knowledge that what you want to do is not 
> only disgusting, it's impossible :).
>
> However, the problem here is that certain code in Twisted is not as 
> awesome as it possibly could be.  While I agree this is sad, there 
> isn't really a solution, except "make it more awesome", which takes 
> time, money, and effort, which nobody is contributing beyond an 
> individual scale.
>
> PB has been effectively unmaintained for almost 2 years now.  It is 
> showing its age.  NewPB will fix several issues, but until someone 
> wants to give Mr. Warner a staff and a budget for improving it, it's 
> likely that it will have some ugly spots too.
>
> In other words, you don't have to maintain your own version.  You just 
> have to maintain the one in Twisted ;-).


I had thought about this, but I'm pretty strapped for time as my startup 
is self funded.  Plus, it's not exactly like I can just walk into your 
SVN repository and start hacking. ;-)

On the other hand, for all the free mileage I've gotten out of Twisted I 
do owe you guys a certain debt!  Perhaps I could help out on NewPB, 
especially since I could really use the Slicer code Brian was talking 
about.  However, I'm in a bit of an awkward spot to do so right now 
though, as I'm not yet using Twisted 2.0 and my project isn't at a good 
point to upgrade libaries.  Still, I've got to upgrade sometime...

Is there a good place to read more about NewPB?  Or is it just a matter 
of searching the maillist archives and SVN repository?

-Jasper



From martin at moellenbecks.de  Fri Sep 16 13:49:34 2005
From: martin at moellenbecks.de (=?ISO-8859-1?Q?Martin_M=F6llenbeck?=)
Date: Fri, 16 Sep 2005 21:49:34 +0200
Subject: [Twisted-Python] Is it possible to use ReconnectingClientFactory
	with pb.ClientFactory
Message-ID: <6F0E2882-2896-4E0F-9ACB-21C9B8FA26D5@moellenbecks.de>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hello,

Is it possible to use ReconnectingClientFactory with pb.ClientFactory?

Are there any side effects?

Any tips?

Ciao, Martin
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFDKyHPiJE4wzxJLBwRAt4eAJ0QjroYjNUWmb2QNgrKCR7JqhsfSQCgji0k
QiVQnvgLnAFsVggCITg+9/A=
=p2d+
-----END PGP SIGNATURE-----



From warner at lothar.com  Fri Sep 16 19:25:27 2005
From: warner at lothar.com (Brian Warner)
Date: Fri, 16 Sep 2005 18:25:27 -0700 (PDT)
Subject: [Twisted-Python] Is it possible to use
	ReconnectingClientFactory with pb.ClientFactory
Message-ID: <20050916.182527.81755938.warner@lothar.com>

Martin Möllenbeck <martin at moellenbecks.de> writes:
>
> Is it possible to use ReconnectingClientFactory with pb.ClientFactory?

Sure thing. I have a utility class that does this.. take a look at
ReconnectingPBClientFactory in the Buildbot (http://buildbot.sf.net) source
tree, current CVS version is:

 http://cvs.sourceforge.net/viewcvs.py/buildbot/buildbot/buildbot/pbutil.py?rev=1.10&view=auto

The only catch is to realize that pb.ClientFactory's getRootObject() and
login() methods return a single-use Deferred, and if you're reconnecting all
the time, you need something that can be fired multiple times. So
ReconnectingPBClientFactory offers a gotRootObject()/gotPerspective() method,
which are invoked each time the connection is established. You have to
override one of these in your subclass. If you're using cred, you override
gotPerspective() (and also call startLogin() or getPerspective() to start the
process, for newcred and oldcred respectively). If you aren't using cred at
all, you just override gotRootObject().

If you grep around the rest of the buildbot you can find an example of how
this factory gets used. I think buildbot.slave.bot.BotFactory is useful: it
includes a keepalive timer that pings the other end and abandons the
connection (thus triggering a reconnect) if the ping is lost. I added this to
deal with some buildslaves that were behind NAT boxes which timed out their
connection table after 10 minutes of inactivity: the symptom was that both
ends thought the connection was still established, no FINs had been seen, but
no packets could get from one side to the other. Sending a ping every 9
minutes tended to keep the connection table entry alive, while dropping the
connection if the ping got lost helped trigger a reconnect when that
keepalive failed.


cheers,
 -Brian



From scott.xiao at 163.com  Fri Sep 16 21:02:54 2005
From: scott.xiao at 163.com (=?gb2312?B?c2NvdHQueGlhbw==?=)
Date: Sat, 17 Sep 2005 11:02:54 +0800 (CST)
Subject: =?gb2312?B?UmU6IFJlOiBbVHdpc3RlZC1QeXRob25dIElzIGl0IHBvc3NpYmxlIHQ=?=
	=?gb2312?B?byB1c2UgUmVjb25uZWN0aW5nQ2xpZW50RmFjdG9yeSB3aXRoIHBiLkM=?=
	=?gb2312?B?bGllbnRGYWN0b3J5?=
Message-ID: <432B875E.0000F2.32662@bj163app35.163.com>

Sorry, I am not clear about that, could you have a look of my question?
    
    I have installed Twisted in my Linux system, when I install punjab, 
    #mktap punjab --port=5280 --host=xm.com --xmlrpc=1 --httpp=1 --httpb=1 --soap=1 --html_dir="./html"
    That warning happened
    /usr/local/lib/python2.4/site-packages/punjab/plugins.tml:3: DeprecationWarning: The twisted.python.plugin system is deprecated. See twisted.plugin for the revised edition.
   type='tap', tapname='punjab')


   I want know: what's the reason, how and where can I get the revised edition???


Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050917/ee491d59/attachment.html>

From sergtrejo at gmail.com  Sat Sep 17 06:04:33 2005
From: sergtrejo at gmail.com (Sergio Trejo)
Date: Sat, 17 Sep 2005 02:04:33 -1000
Subject: [Twisted-Python] Re: O'Reilly book on Twisted
In-Reply-To: <200509151449.51384.alessandro-bottoni@libero.it>
References: <200509141838.59624.alessandro-bottoni@libero.it>
	<dg9q63$6qj$1@sea.gmane.org> <432969BF.1040009@fettig.net>
	<200509151449.51384.alessandro-bottoni@libero.it>
Message-ID: <7c3d6936050917050430df1df8@mail.gmail.com>

Yes, a Twisted book is looooonnnnng overdue and hats off to Abe Fettig
for coming through.

Congrats!

-Serg

On 9/15/05, Alessandro Bottoni <alessandro-bottoni at libero.it> wrote:
> Abe,
> I want to thank you for having written this book.
> 
> Despite its elegant structure, Twisted is still hard to understand at first.
> Your book will help us a lot in using this nice framework.
> 
> Thanks again
> -----------------------------
> Alessandro Bottoni
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From general at eepatents.com  Sat Sep 17 18:31:12 2005
From: general at eepatents.com (Ed Suominen)
Date: Sat, 17 Sep 2005 17:31:12 -0700
Subject: [Twisted-Python] Re: O'Reilly book on Twisted
In-Reply-To: <E1EGgys-0002FN-02@pyramid.twistedmatrix.com>
References: <E1EGgys-0002FN-02@pyramid.twistedmatrix.com>
Message-ID: <1127003472.8355.62.camel@207-118-93-73.stat.centurytel.net>

I completely agree, and I've got my copy of the book back ordered via
the O'Reilley site. I'm really looking forward to seeing it in a month
or so!

Ed Suominen

On Sat, 2005-09-17 at 12:00 -0600,
twisted-python-request at twistedmatrix.com wrote:
> From: Sergio Trejo <sergtrejo at gmail.com>
> Subject: Re: [Twisted-Python] Re: O'Reilly book on Twisted
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID: <7c3d6936050917050430df1df8 at mail.gmail.com>
> Content-Type: text/plain; charset=ISO-8859-1
> 
> Yes, a Twisted book is looooonnnnng overdue and hats off to Abe Fettig
> for coming through.
> 
> Congrats!
> 
> -Serg
> 
> On 9/15/05, Alessandro Bottoni <alessandro-bottoni at libero.it> wrote:
> > Abe,
> > I want to thank you for having written this book.
> > 
> > Despite its elegant structure, Twisted is still hard to understand
> at first.
> > Your book will help us a lot in using this nice framework.
> > 
> > Thanks again
> > -----------------------------
> > Alessandro Bottoni
> > 




From daedalus at eigenmagic.com  Sun Sep 18 18:58:25 2005
From: daedalus at eigenmagic.com (Justin Warren)
Date: Mon, 19 Sep 2005 10:58:25 +1000
Subject: [Twisted-Python] Hints for twisted newbie presentation
Message-ID: <1127091505.6583.14.camel@localhost.localdomain>

Hi list,

In a fit of rash volunteerism, I offered to give a talk on Twisted at
the upcoming Open Source Developers Conference here in melbourne.au. I
gave a hastily thrown together talk at the local Python user's group a
couple of months back (wiki linkage:
http://wiki.python.org/moin/MelbournePUG ) but I'd like to refine it a
fair bit before presenting to a wider audience. I'm also most familiar
with v1.3 rather than the newish v2.0.

What do people think are the most important things that a newbie to
Twisted should know about? I'm trying to focus on those little things
that spark an Aha! moment where you really how cool something is and
think "Why didn't I do this ages ago?" For me that was finally grokking
Deferreds and the whole asynchronous event processing style of doing
things as compared to threading.

What are the things you wish someone had told you about early on in
learning Twisted? What are the biggest timesavers for you? What do you
think is the most powerful?

Any help would be much appreciated, since I'm just a twisted-weenie
compared to a lot of you folks on list.

As an aside, awesome cover for the upcoming O'Reilly book. :)

-- 
Justin Warren <daedalus at eigenmagic.com>




From Henning.Ramm at mediapro-gmbh.de  Mon Sep 19 14:09:40 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Mon, 19 Sep 2005 22:09:40 +0200
Subject: [Twisted-Python] Hints for twisted newbie presentation
Message-ID: <F92274058556DE42B94B148EEFB91839021CB576@exchange-03.suedkurier.de>

>What do people think are the most important things that a newbie to
>Twisted should know about?

Being rather newbie to twisted myself (but mostly started at 2.0), my 2c:

I guess there are two approaches:
1. Water their mouths with what a lot of great stuff twisted can do.
2. Give an introduction to asynchronous programming and Deferreds.

Both is necessary, but I don't know if you'll have enough time to cover both.
The way from "start with & understanding Deferreds" to "doing great client/server stuff" is not long but rather steep.

I'd warn my auditory of that slope and hope that good programmers will feel stimulated to try it and bad programmers will get discouraged (to keep them away from the "support hotline" of irc and ml). ;-)

So your goal would be to show that the effort is worth trying, but don't advertise an "easy & almighty framework", even if it may be easy, as soon as you managed to wrap your mind around twisted. (I didn't get that far yet.)

HTH

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From radeex at gmail.com  Mon Sep 19 17:13:06 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 20 Sep 2005 09:13:06 +1000
Subject: [Twisted-Python] Hints for twisted newbie presentation
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB576@exchange-03.suedkurier.de>
References: <F92274058556DE42B94B148EEFB91839021CB576@exchange-03.suedkurier.de>
Message-ID: <60ed19d40509191613db6fdb2@mail.gmail.com>

On 9/20/05, Henning.Ramm at mediapro-gmbh.de <Henning.Ramm at mediapro-gmbh.de> wrote:
> >What do people think are the most important things that a newbie to
> >Twisted should know about?
> 
> Being rather newbie to twisted myself (but mostly started at 2.0), my 2c:
> 
> I guess there are two approaches:
> 1. Water their mouths with what a lot of great stuff twisted can do.
> 2. Give an introduction to asynchronous programming and Deferreds.
> 
> Both is necessary, but I don't know if you'll have enough time to cover both.
> The way from "start with & understanding Deferreds" to "doing great client/server stuff" is not long but rather steep.

I would suggest, given the audience, I think the former is more
appropriate. This isn't a group of Python programmers, it's a group of
"open source" programmers. So the code examples probably ought to
become a bit less heavy than those dense screenshots of emacs ;-).

I also suggest showing a bunch of cool uses of Twisted, and perhaps a
high-level explanation of why Twisted is asynchronous instead of
threaded, and so forth.

off-the-top-of-my-head,-now-I'll-get-back-to-work-ly,
-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  
w----v----w-+



From mikah at ceruleansoftware.com  Tue Sep 20 01:36:18 2005
From: mikah at ceruleansoftware.com (mikah at ceruleansoftware.com)
Date: Tue, 20 Sep 2005 15:36:18 +0800
Subject: [Twisted-Python] Re: ReconnectingClientFactory creates multiple
	Protocols? (clarification)
In-Reply-To: <E1EFy1o-0000xz-02@pyramid.twistedmatrix.com>
References: <E1EFy1o-0000xz-02@pyramid.twistedmatrix.com>
Message-ID: <20050920073618.GA29069@ceruleansoftware.com>

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> mikah at ceruleansoftware.com wrote:
> >   As far as I can tell, it's related to the connection being
> > dropped, at which point the Factory reconnects and creates a
> > new protocol instance.
> 
> Protocols (at least, when used with TCP) are designed so that their
> lifetime matches that of the TCP connection they are handling. As a
> result, when the connection is lost and the factory reconnects, this is
> a new TCP connection with a new protocol. This is why there's a factory,
> to manage data and logic that is not tied to a specific TCP connection
> (e.g. "should I reconnect?" or "how far along was the download when I
> got disconnected.")
> 
> In general you'd want to use the factory to store state that needs to
> last past the lifetime of the protocol. You can, of course, have
> buildProtocol always return the same instance, but that's pretty ugly
> and can easily lead to obscure bugs if you don't clean up the state
> correctly.

Itamar,

  Thanks for the reply. I think I have to clarify though, I
wasn't very clear describing the situation -- my problem isn't
that the RCFactory creates protocols on the fly, it's that
after disconnecting/reconnecting, the old protocol instance
seems to be still active! After the server has run a few days,
I start seeing a handful of protocol instances. I know they
aren't the same protocol because I can tell them apart from the
data they write to the log file.

  Only one of the protocols is actually connected to the remote
host, that much I can say. It's the 'newest' one (I hope). The
other instances are not connected but they attempt to send
requests anyway, and worse, continue to pull tasks out of the
task queue. So I end up with a bunch of tasks that never get
acted on because the protocols can't service them without a
connection.

  My question is: when an RCFactory makes a new protocol
instance, is the old one supposed to be deleted and cleaned
up?

  Everything hinges on this, pretty much. If the answer is yes,
then I'm doing something wrong because mine aren't getting
cleaned up. If the answer is no, then I must somehow take
responsibility for preventing the old instances from trying to
do work when they shouldn't, and somehow delete them.

  I have some related questions if someone would like to answer
them ... (1) is there a proper way for me to disconnect a
connected protocol and then stop its factory from reconnecting
and (2) start the factory connecting again at some time in the
future?

  I've found several ways to do this, but they seem kludgy and
not quite correct ...


  Thanks in advance!

Mikah

--




From exarkun at divmod.com  Tue Sep 20 02:07:12 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 20 Sep 2005 04:07:12 -0400
Subject: [Twisted-Python] Re: ReconnectingClientFactory creates multiple
	Protocols? (clarification)
In-Reply-To: <20050920073618.GA29069@ceruleansoftware.com>
Message-ID: <20050920080712.3914.889614784.divmod.quotient.18783@ohm>

On Tue, 20 Sep 2005 15:36:18 +0800, mikah at ceruleansoftware.com wrote:
>Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>> mikah at ceruleansoftware.com wrote:
>> >   As far as I can tell, it's related to the connection being
>> > dropped, at which point the Factory reconnects and creates a
>> > new protocol instance.
>>
>> Protocols (at least, when used with TCP) are designed so that their
>> lifetime matches that of the TCP connection they are handling. As a
>> result, when the connection is lost and the factory reconnects, this is
>> a new TCP connection with a new protocol. This is why there's a factory,
>> to manage data and logic that is not tied to a specific TCP connection
>> (e.g. "should I reconnect?" or "how far along was the download when I
>> got disconnected.")
>>
>> In general you'd want to use the factory to store state that needs to
>> last past the lifetime of the protocol. You can, of course, have
>> buildProtocol always return the same instance, but that's pretty ugly
>> and can easily lead to obscure bugs if you don't clean up the state
>> correctly.
>
>Itamar,
>
>  Thanks for the reply. I think I have to clarify though, I
>wasn't very clear describing the situation -- my problem isn't
>that the RCFactory creates protocols on the fly, it's that
>after disconnecting/reconnecting, the old protocol instance
>seems to be still active! After the server has run a few days,
>I start seeing a handful of protocol instances. I know they
>aren't the same protocol because I can tell them apart from the
>data they write to the log file.
>
>  Only one of the protocols is actually connected to the remote
>host, that much I can say. It's the 'newest' one (I hope). The
>other instances are not connected but they attempt to send
>requests anyway, and worse, continue to pull tasks out of the
>task queue. So I end up with a bunch of tasks that never get
>acted on because the protocols can't service them without a
>connection.
>
>  My question is: when an RCFactory makes a new protocol
>instance, is the old one supposed to be deleted and cleaned
>up?
>
>  Everything hinges on this, pretty much. If the answer is yes,
>then I'm doing something wrong because mine aren't getting
>cleaned up. If the answer is no, then I must somehow take
>responsibility for preventing the old instances from trying to
>do work when they shouldn't, and somehow delete them.

To some minor extent, yes.  Completely and totally?  No.  For example, if you have a delayed call which invokes a method on the protocol instance, this will still occur.

>
>  I have some related questions if someone would like to answer
>them ... (1) is there a proper way for me to disconnect a
>connected protocol and then stop its factory from reconnecting
>and (2) start the factory connecting again at some time in the
>future?
>

When the connection is lost, "connectionLost" is called on the protocol and "clientConnectionLost" is called on the factory.  Use one or both of these hooks to clean up after your now defunct protocol.

Jp



From web at anand-fr.net  Tue Sep 20 12:37:40 2005
From: web at anand-fr.net (Anand)
Date: Tue, 20 Sep 2005 18:37:40 +0000 (UTC)
Subject: [Twisted-Python] Resource instanciated and never destroyed ?
Message-ID: <loom.20050920T202628-62@post.gmane.org>

Hi,

I'm using twisted+web (2.0.1) + Nevow (0.4.1) for building a web application.

My web application is inside a "Realm" for handling user authentication.

When an url is requested for a logged in user, this is handled by a resource
called "LoggedIn", which is a nevow rend.Page subclass.
LoggedIn redefines the locateChildMethod. 
That method instanciates and returns a resource object , which can be of any
specific class which I have defined. My resource classes are subclasses of
rend.Page.

I've noticed, putting traces in __init__ and __del__ methods of my resource
classes, that resource objects which are instanciated are never destroyed.
As as consequences, the python process ends up eating up a lot of memory.

I guess I might do something the wrong way. 
I would like to know how resource object can be automatically destroyed after a
page has been rendered by Nevow + twisted web.

Thank you for your help 

Anand







From exarkun at divmod.com  Tue Sep 20 15:45:22 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 20 Sep 2005 17:45:22 -0400
Subject: [Twisted-Python] Resource instanciated and never destroyed ?
In-Reply-To: <loom.20050920T202628-62@post.gmane.org>
Message-ID: <20050920214522.3914.1055302029.divmod.quotient.19026@ohm>

On Tue, 20 Sep 2005 18:37:40 +0000 (UTC), Anand <web at anand-fr.net> wrote:
>Hi,
>
>I'm using twisted+web (2.0.1) + Nevow (0.4.1) for building a web application.
>
>My web application is inside a "Realm" for handling user authentication.
>
>When an url is requested for a logged in user, this is handled by a resource
>called "LoggedIn", which is a nevow rend.Page subclass.
>LoggedIn redefines the locateChildMethod.
>That method instanciates and returns a resource object , which can be of any
>specific class which I have defined. My resource classes are subclasses of
>rend.Page.
>
>I've noticed, putting traces in __init__ and __del__ methods of my resource
>classes, that resource objects which are instanciated are never destroyed.
>As as consequences, the python process ends up eating up a lot of memory.
>
>I guess I might do something the wrong way.
>I would like to know how resource object can be automatically destroyed after a
>page has been rendered by Nevow + twisted web.
>
>Thank you for your help
>

  Instrumenting object lifetime using __del__ alters behavior.  Adding a __del__ method is not a valid way to determine the end of an object's lifetime.

  Nevow 0.4.1 had an egregious Page leak which has since been fixed.  You can test to see if this is the leak you are experiencing by finding all occurrences of adaption which use the callable interface form and which pass "persist=True" and removing the persist parameter.  You could also try switching to a newer version of Nevow, though there is no release of such a thing.

  There is a mailing list dedicated to Twisted Web (<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web>) to which I have copied this response.  Please continue this thread there.

  Jp



From foom at fuhm.net  Wed Sep 21 00:01:05 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 21 Sep 2005 00:01:05 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EHxfF-0006oc-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-09-14 06:00:02.790000:
 Bugs opened: 33   Bugs closed: 7   Total open bugs: 449 (+26)
  Urgent: 6 (-5)
  Bug: 207 (+22)
  Feature: 158 (+5)
  Wish: 78 (+4)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[CORE, TRIAL] REGR: "trial -R twisted" fails  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1175 opened by exarkun

                    ==== Bug ====
[CORE] iocpreactor and Visual C++ 6  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1174 opened by Toby Dickenson

[CORE, TRIAL] twisted.test.test_tcp.PortCleanerUpper is extremely confused  (yesterday)
       http://twistedmatrix.com/bugs/issue1181 opened by exarkun

[DOCUMENTATION, WEB, WEBSITE] http://twistedmatrix.com/products/web has a broken link to docs.  (yesterday)
       http://twistedmatrix.com/bugs/issue1204 opened by spiv

[CORE, TRIAL] twisted.test.test_factories calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1196 opened by exarkun

[CORE, TRIAL] twisted.test.test_threads calls reactor.iterate()  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1193 opened by exarkun

[CORE, TRIAL] twisted.test.test_task calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1198 opened by exarkun

[ENTERPRISE] adbpai's runQuery and runOperation do not detail enough in error reports  (yesterday)
       http://twistedmatrix.com/bugs/issue1182 opened by moof

[MAIL, TRIAL] twisted.mail.test.test_mail calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1202 opened by exarkun

[CORE, TRIAL] twisted.test.test_udp calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1201 opened by exarkun

[CORE, TRIAL] twisted.test.test_internet calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1200 opened by exarkun

twisted.test.test_protocols calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1199 opened by exarkun

[CORE, TRIAL] twisted.test.test_tcp calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1197 opened by exarkun

[CORE, TRIAL] twisted.test.test_pb calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1195 opened by exarkun

[CORE, TRIAL] twisted.test.test_sip calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1194 opened by exarkun

[CORE, TRIAL] twisted.test.test_policies calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1192 opened by exarkun

[TRIAL, WEB] twisted.web.test.test_xmlrpc calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1191 opened by exarkun

[TRIAL, WEB] twisted.web.test.test_soap calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1190 opened by exarkun

[TRIAL, WEB] twisted.web.test.test_woven calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1189 opened by exarkun

[TRIAL, WEB] twisted.web.test.test_webclient calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1188 opened by exarkun

[NEWS, TRIAL] twisted.news.test.test_news calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1187 opened by exarkun

[TRIAL, WEB] twisted.web2.test.test_http calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1186 opened by exarkun

[CONCH, TRIAL] twisted.conch.test.test_recvline calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1185 opened by exarkun

[CONCH, TRIAL] twisted.conch.test.test_mixin calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1184 opened by exarkun

[CONCH, TRIAL] test_conch calls reactor.iterate() in two places  (yesterday)
       http://twistedmatrix.com/bugs/issue1183 opened by exarkun

                    ==== Feature ====
[DOCUMENTATION, TRIAL] HOWTO: Extending Trial  (2 days ago)
       http://twistedmatrix.com/bugs/issue1178 opened by jml

[TRIAL] Benchmarking Support for Trial  (2 days ago)
       http://twistedmatrix.com/bugs/issue1177 opened by jml

[DOCUMENTATION, WEB] A t.web glossary is needed  (2 days ago)
       http://twistedmatrix.com/bugs/issue1176 opened by tenshihan

[APPLICATION] pickling protocol in sob  (5 days ago)
       http://twistedmatrix.com/bugs/issue1173 opened by antony

[DOCUMENTATION, TRIAL] Draft release notes for the recent and upcoming Trial changes  (6 days ago)
       http://twistedmatrix.com/bugs/issue1172 opened by jml

                    ==== Wish ====
web2.stream.IStream.read() needs to take a length argument  (yesterday)
       http://twistedmatrix.com/bugs/issue1203 opened by PenguinOfDoom

[CONCH, TRIAL] Nasty file handling in test_filetransfer and test_cftp  (yesterday)
       http://twistedmatrix.com/bugs/issue1179 opened by exarkun

[CONCH, TRIAL] test_cftp shouldn't manually iterate the reactor  (yesterday)
       http://twistedmatrix.com/bugs/issue1180 opened by exarkun

Bugs Closed
______________________
                    ==== Urgent ====
[CORE, TRIAL] REGR: "trial -R twisted" fails  (3 days ago)
       http://twistedmatrix.com/bugs/issue1175 opened by exarkun, closed by exarkun

[TRIAL] trial --testmodule no longer runs any tests  (1 week ago)
       http://twistedmatrix.com/bugs/issue1170 opened by spiv, closed by jml

                    ==== Bug ====
[CORE] iocpreactor and Visual C++ 6  (4 days ago)
       http://twistedmatrix.com/bugs/issue1174 opened by Toby Dickenson, closed by PenguinOfDoom

[CORE, TRIAL] twisted.test.test_threads calls reactor.iterate()  (yesterday)
       http://twistedmatrix.com/bugs/issue1193 opened by exarkun, closed by warner

[CORE] invalid path names in plugin system  (1 week ago)
       http://twistedmatrix.com/bugs/issue1169 opened by antony, closed by exarkun

[TRIAL] Trial raises "whoop whoop" error when given a filename  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1159 opened by jml, closed by jml

                    ==== Wish ====
[TRIAL] trial doesn't search for TestCases in the most ideal way possible  (1 week ago)
       http://twistedmatrix.com/bugs/issue1166 opened by exarkun, closed by jml




From Henning.Ramm at mediapro-gmbh.de  Wed Sep 21 16:00:32 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Thu, 22 Sep 2005 00:00:32 +0200
Subject: [Twisted-Python] How to write a simple telnet client?
Message-ID: <F92274058556DE42B94B148EEFB91839021CB57D@exchange-03.suedkurier.de>

Hi ho!

I need to integrate a simple telnet client into one of my programs to execute a command on an other machine and collect the response.

Probably I'm blind, because I didn't find out how to use twisted's telnet protocol for such a client (I know how to setup a server).
Could someone please give me a kick?

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From ajchos at wp.pl  Thu Sep 22 01:25:21 2005
From: ajchos at wp.pl (=?iso-8859-2?Q?Micha=B3?= Tyde)
Date: Thu, 22 Sep 2005 09:25:21 +0200
Subject: [Twisted-Python] Re: [Python-Twisted] How to write a simple telnet
	client?
Message-ID: <1127373921.2881.8.camel@localhost.localdomain>

Please look at my posts from 11.08.2005 - What is wrong with this
instance (topic). I have send there a code of my telnet client. I don't
remember what was wrong, but i solve most of problems, so if you had any
questions e-mail me. I think that my code is what You need. This is a
very simple client and i have developed him.




From mszumocki at contman.pl  Thu Sep 22 02:59:13 2005
From: mszumocki at contman.pl (Maciej Szumocki)
Date: Thu, 22 Sep 2005 10:59:13 +0200
Subject: [Twisted-Python] internet.TimerSevice in twisted.scripts.twistw
In-Reply-To: <E1EI8t4-000502-03@pyramid.twistedmatrix.com>
Message-ID: <20050922085913.fcc6b752@poczta.contman.pl>

Hello,

 Just a question that has been bugging me and i can't figure out the answer on my own.
 Why is there a line like this in python.scripts._twistw runApp:

    app.startApplication(internet.TimerService(0.1, lambda:None), 0)

 while there is no such thing in python.scripts.twistd? Is it some Windows-specific
 workaround i need to worry about if i run my application without using twistd?

Maciej Szumocki



From andrew-twisted at puzzling.org  Thu Sep 22 03:19:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 22 Sep 2005 19:19:53 +1000
Subject: [Twisted-Python] internet.TimerSevice in twisted.scripts.twistw
In-Reply-To: <20050922085913.fcc6b752@poczta.contman.pl>
References: <E1EI8t4-000502-03@pyramid.twistedmatrix.com>
	<20050922085913.fcc6b752@poczta.contman.pl>
Message-ID: <20050922091953.GJ7698@trogdor.home.puzzling.org>

On Thu, Sep 22, 2005 at 10:59:13AM +0200, Maciej Szumocki wrote:
> Hello,
> 
>  Just a question that has been bugging me and i can't figure out the answer on my own.
>  Why is there a line like this in python.scripts._twistw runApp:
> 
>     app.startApplication(internet.TimerService(0.1, lambda:None), 0)
> 
>  while there is no such thing in python.scripts.twistd? Is it some Windows-specific
>  workaround i need to worry about if i run my application without using twistd?

This seems to be a work around for the problem that Ctrl-C doesn't interrupt
select on win32, so the event loop needs to be periodically woken up to give
python a chance to process signals.

However, the select reactor and win32 reactor at least already have
workarounds for this, so I'm not sure why twistw bothers.

-Andrew.




From joy at softmonsters.com  Thu Sep 22 15:36:09 2005
From: joy at softmonsters.com (joy ping)
Date: Thu, 22 Sep 2005 23:36:09 +0200
Subject: [Twisted-Python] twisted.internet.serialport
Message-ID: <433323C9.4050500@softmonsters.com>

hi list,
i just did a search for a framwork which would be good for a to be
written application which controlls serialports over webinterfaces. i
found that twisted would be ideal for this. i started to write some code
with mod_phyton but as threading+pyserial+apache didn't worked i had a
closer look at twisted. it seems cool cause it's async. no real need for
threads here. and with twisted-web and livepages some kind of
persistance could be achived. but at the end i found not really much
documentation especially about twisted.serialport and nevow which i
would use as app-server. can someone point me to some docs if they
exists beside the the api-docs.

thanks

zsolt



From exarkun at divmod.com  Thu Sep 22 23:00:19 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 23 Sep 2005 01:00:19 -0400
Subject: [Twisted-Python] twisted.internet.serialport
In-Reply-To: <433323C9.4050500@softmonsters.com>
Message-ID: <20050923050019.3914.636386210.divmod.quotient.20168@ohm>

On Thu, 22 Sep 2005 23:36:09 +0200, joy ping <joy at softmonsters.com> wrote:
>hi list,
>i just did a search for a framwork which would be good for a to be
>written application which controlls serialports over webinterfaces. i
>found that twisted would be ideal for this. i started to write some code
>with mod_phyton but as threading+pyserial+apache didn't worked i had a
>closer look at twisted. it seems cool cause it's async. no real need for
>threads here. and with twisted-web and livepages some kind of
>persistance could be achived. but at the end i found not really much
>documentation especially about twisted.serialport and nevow which i
>would use as app-server. can someone point me to some docs if they
>exists beside the the api-docs.

<http://twistedmatrix.com/projects/core/documentation/examples/mouse.py> is an example of handling mouse input using Twisted.

<http://twistedmatrix.com/projects/core/documentation/examples/gpsfix.py> is an example of getting data from a particular kind of GPS device.

As for Nevow and LivePage, you're probably better off asking on the twisted-web mailing list (<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web>), but you can find examples of LivePage usage at <http://divmod.org/svn/Nevow/trunk/examples/chatola/>, <http://divmod.org/svn/Nevow/trunk/examples/liveanimal/>, and <http://divmod.org/svn/Nevow/trunk/examples/livepage/> (although that API is about to be replaced with a simpler one).

Jp



From Henning.Ramm at mediapro-gmbh.de  Fri Sep 23 11:38:11 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Fri, 23 Sep 2005 19:38:11 +0200
Subject: [Twisted-Python] RE: [Python-Twisted] How to write a simple telnet
	client?
Message-ID: <F92274058556DE42B94B148EEFB91839021CB580@exchange-03.suedkurier.de>

>Please look at my posts from 11.08.2005 - What is wrong with this
>instance (topic). I have send there a code of my telnet client. I don't
>remember what was wrong, but i solve most of problems, so if 
>you had any
>questions e-mail me. I think that my code is what You need. This is a
>very simple client and i have developed him.

I played around with your code at http://twistedmatrix.com/pipermail/twisted-python/2005-August/011115.html, even if I don't understand polish. ;-)

I didn't expect that one must handle control codes (your function reponseFunct), I expected the protocol to handle that for me, but anyway, that was no problem (i.e. you solved it before). And with your code I could even switch off the echo (your next thread).

What I don't understand is how to 'inject' some commands and collect their result.
What you tried in your "command" function in __main__ can't work, because the protocol has no transport.
I don't understand how to get at the Factory's actual protocol instance and its transport.

I could 'hardcode' a list of commands in my protocol class, but that would make no sense...

Probably I shouldn't use a ClientFactory but something else.

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From exarkun at divmod.com  Fri Sep 23 13:38:59 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 23 Sep 2005 15:38:59 -0400
Subject: [Twisted-Python] RE: [Python-Twisted] How to write a simple
	telnet client?
In-Reply-To: <F92274058556DE42B94B148EEFB91839021CB580@exchange-03.suedkurier.de>
Message-ID: <20050923193859.3914.1560733094.divmod.quotient.20552@ohm>

On Fri, 23 Sep 2005 19:38:11 +0200, henning.ramm at mediapro-gmbh.de wrote:
>>Please look at my posts from 11.08.2005 - What is wrong with this
>>instance (topic). I have send there a code of my telnet client. I don't
>>remember what was wrong, but i solve most of problems, so if
>>you had any
>>questions e-mail me. I think that my code is what You need. This is a
>>very simple client and i have developed him.
>
>I played around with your code at http://twistedmatrix.com/pipermail/twisted-python/2005-August/011115.html, even if I don't understand polish. ;-)
>
>I didn't expect that one must handle control codes (your function reponseFunct), I expected the protocol to handle that for me, but anyway, that was no problem (i.e. you solved it before). And with your code I could even switch off the echo (your next thread).

You don't actually have to do this.  You can implement iac_DO, iac_DONT, iac_WILL, and iac_WONT to handle feature negotiation.

You can also use twisted.conch.telnet, which presents a slightly more complete API for feature negotiation.

>
>What I don't understand is how to 'inject' some commands and collect their result.
>What you tried in your "command" function in __main__ can't work, because the protocol has no transport.
>I don't understand how to get at the Factory's actual protocol instance and its transport.

Factory's don't have protocol instances, in general.  A factory is responsible for creating between zero and an unlimited number of instances of a protocol, as they are demanded by established connections.

Protocol.connectionMade is provided as a hook for application-level logic.  You may want to send your commands from that method.  When it is invoked, you will have a transport.

Jp



From garanin at m-lan.ru  Fri Sep 23 15:18:26 2005
From: garanin at m-lan.ru (Garanin Michael)
Date: Sat, 24 Sep 2005 01:18:26 +0400
Subject: [Twisted-Python] zope.component or twisted.python.components
Message-ID: <1127510306.5132.11.camel@localhost>

                                                                          
Hello!
I am twisted-newcomer, and i try ported my Zope3 application to
twisted+nevow. Can i use zope.components package from Zope3 (only for my
objects of course) instead   twisted.python.components, is it legal? 





From exarkun at divmod.com  Fri Sep 23 15:32:04 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 23 Sep 2005 17:32:04 -0400
Subject: [Twisted-Python] zope.component or twisted.python.components
In-Reply-To: <1127510306.5132.11.camel@localhost>
Message-ID: <20050923213204.3914.830329341.divmod.quotient.20585@ohm>

On Sat, 24 Sep 2005 01:18:26 +0400, Garanin Michael <garanin at m-lan.ru> wrote:
>
>Hello!
>I am twisted-newcomer, and i try ported my Zope3 application to
>twisted+nevow. Can i use zope.components package from Zope3 (only for my
>objects of course) instead   twisted.python.components, is it legal?
>

The only constraint in place is that if you pass an object to someone else's code (for example, to Twisted), it behaves as they expect it to.

I doubt many people have tried this (or at least, they have not talked about it), but there should be no categorical reason for it to fail.  Let us know if you run into any problems that you think represent unreasonable incompatibilities.

Jp



From jml at mumak.net  Sat Sep 24 06:36:21 2005
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 24 Sep 2005 22:36:21 +1000
Subject: [Twisted-Python] twisted.trial.assertions is now deprecated.
Message-ID: <d06a5cd305092405361c883705@mail.gmail.com>

Hello,

As part of the on-going maintenance of Trial, I have deprecated the
assertions module.  All people writing unit tests are advised to use
the assertion methods on unittest.TestCase.

I would appreciate some help in updating Twisted's tests.

cheers,
jml



From pegazik at gmail.com  Sat Sep 24 06:43:09 2005
From: pegazik at gmail.com (Krzysztof Nowak)
Date: Sat, 24 Sep 2005 14:43:09 +0200
Subject: [Twisted-Python] Twisted.web signal handling
Message-ID: <cc4a20de05092405435742ca9e@mail.gmail.com>

Hello. I wrote a simple application using twisted.web. One of activity
of my program is to contacting with some other processes. I need some
timeout to perform this activity. The structure of my program looks
like this:

/////////////////////////////////////////////////////////////////////////////////////
def TimeoutHandler(pid):
    os.kill(pid, signal.SIGUSR1)

def handler():
    raise ConnectionError

signal.signal(signal.SIGUSR1, handler)
MyPID = os.getpid()

def HistosRendering:
        timer = threading.Timer(0.001, TimeoutHandler, [MyPID])
        timer.start()
        try:
            <Some activity that need timeout>
        except ConnectionError:
            <In case of timeout>
            return
        else:
            timer.cancel()

class Resource(resource.Resource):
    def render(self, request):
        HistosRender()

resource = Resource()
/////////////////////////////////////////////////////////////////////////////////////

Unfortunately, there is something wrong, cause in case of timeout I am
receiving error message, the TimeoutHandler is activated (in the Timer
thread), but handler() in the main thread is not activated.
I am using this kind of commands to start a server:
> mktap web --path /www/ --port 8081
> twistd -f web.tap
Maybe I should somehow "turn on" handling of signals?

Do you see any solution?

Thanks in advance,
Krzysztof Nowak

From exarkun at divmod.com  Sat Sep 24 09:25:04 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 24 Sep 2005 11:25:04 -0400
Subject: [Twisted-Python] Twisted.web signal handling
In-Reply-To: <cc4a20de05092405435742ca9e@mail.gmail.com>
Message-ID: <20050924152504.3914.1020640885.divmod.quotient.20785@ohm>

On Sat, 24 Sep 2005 14:43:09 +0200, Krzysztof Nowak <pegazik at gmail.com> wrote:
>Hello. I wrote a simple application using twisted.web. One of activity
>of my program is to contacting with some other processes. I need some
>timeout to perform this activity. The structure of my program looks
>like this:

Timeouts should be managed using twisted.internet.reactor.callLater().

>
>/////////////////////////////////////////////////////////////////////////////////////
>def TimeoutHandler(pid):
>    os.kill(pid, signal.SIGUSR1)

twistd uses SIGUSR1 for logfile rotation.  Your handler is probably getting clobbered.

>
>def handler():
>    raise ConnectionError
>
>signal.signal(signal.SIGUSR1, handler)
>MyPID = os.getpid()
>

Depending on exactly where this code is run, this is probably the wrong PID.  twistd daemonizes, which involves forking and exiting in the parent.  If your code is imported before daemonization happens, the above will retrieve the PID of the parent, which will not be your PID at any time during the actual operation of your program.

>def HistosRendering:
>        timer = threading.Timer(0.001, TimeoutHandler, [MyPID])
>        timer.start()
>        try:
>            <Some activity that need timeout>
>        except ConnectionError:
>            <In case of timeout>
>            return
>        else:
>            timer.cancel()

Why aren't you using Twisted to handle this connection attempt?  The threading.Timer/signal/raise combo is a very bad way to manage timeouts.  Twisted provides much better ways.

Also, there is a race condition between the end of your try suite and the timer.cancel() call.  The exception could be raised after the else suite is entered but before the timer is actually cancelled.

>
>class Resource(resource.Resource):
>    def render(self, request):
>        HistosRender()

You are blocking the entire process for the during of the render() call.  This is another reason not to make whatever synchronous connection attempt you are making and instead use something Twisted provides.  No other activities can occur, process-wide, while your code is running.  If this is a multiuser application, *everyone* using it will experience periods of unresponsiveness when *anyone* causes blocking code to run.

>
>resource = Resource()
>/////////////////////////////////////////////////////////////////////////////////////
>
>Unfortunately, there is something wrong, cause in case of timeout I am
>receiving error message, the TimeoutHandler is activated (in the Timer
>thread), but handler() in the main thread is not activated.
>I am using this kind of commands to start a server:
>> mktap web --path /www/ --port 8081
>> twistd -f web.tap
>Maybe I should somehow "turn on" handling of signals?
>
>Do you see any solution?

The main thing to figure out is how to rewrite the operation which you wish to timeout so that it is asynchronous and easily cancellable.  Then all the signal related difficulties will disappear.

Jp



From drakesmith at adelphia.net  Sat Sep 24 09:33:50 2005
From: drakesmith at adelphia.net (Drake Smith)
Date: Sat, 24 Sep 2005 11:33:50 -0400
Subject: [Twisted-Python] How to send a UDP datagram
Message-ID: <5.1.0.14.0.20050924113340.02b2fe58@mail.adelphia.net>

Can somebody please show me the Twisted way to send a simple UDP datagram? 
 From the examples, I see how to transport.write in response to receiving a 
datagram or in response to establishing a UDP "connection". But in my 
application, I'd like to send datagrams blindly, say, to initiate a 
heartbeat message or to stream audio samples without acknowledgement via an 
unconnected UDP socket. I'd also like to do this from a function that is 
not wrapped inside a Twisted protocol class as such, unless that is 
contrary to the Twisted approach.

I am using Twisted version 2.0.1/Python 2.4 on a Linux box. Thank you. 




From exarkun at divmod.com  Sat Sep 24 10:24:14 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 24 Sep 2005 12:24:14 -0400
Subject: [Twisted-Python] How to send a UDP datagram
In-Reply-To: <5.1.0.14.0.20050924113340.02b2fe58@mail.adelphia.net>
Message-ID: <20050924162414.3914.1813846259.divmod.quotient.20798@ohm>

On Sat, 24 Sep 2005 11:33:50 -0400, Drake Smith <drakesmith at adelphia.net> wrote:
>Can somebody please show me the Twisted way to send a simple UDP datagram? 
> From the examples, I see how to transport.write in response to receiving a 
>datagram or in response to establishing a UDP "connection". But in my 
>application, I'd like to send datagrams blindly, say, to initiate a 
>heartbeat message or to stream audio samples without acknowledgement via an 
>unconnected UDP socket. I'd also like to do this from a function that is not 
>wrapped inside a Twisted protocol class as such, unless that is contrary to 
>the Twisted approach.
>
>I am using Twisted version 2.0.1/Python 2.4 on a Linux box. Thank you.
>

When a DatagramProtocol is hooked up to a transport, its startProtocol method is invoked.  Here's how I'd write a heartbeat thingy:

  from twisted.internet import protocol, reactor, task

  class Heartbeat(protocol.DatagramProtocol):
      def sendHeartbeat(self):
          self.transport.write('poingo')

      def startProtocol(self):
          self._call = task.LoopingCall(self.sendHeartbeat)
          self._loop = self._call.start(15)

      def stopProtocol(self):
          self._call.stop()

  reactor.listenUDP(0, Heartbeat())
  reactor.run()


There's nothing particularly unique to Twisted if you want to turn this inside out and have some other code controlling the loop, but here's an example of that just for completeness:

  from twisted.internet import protocol, reactor, task

  class Heartbeat(protocol.DatagramProtocol):
      def __init__(self, onStart):
          self.onStart = onStart

      def startProtocol(self):
          self.onStart.callback(self)

      def sendHeartbeat(self):
          self.transport.write('poingo')

  class HeartbeatSenderGuy(object):
      def start(self):
          d = defer.Deferred()
          d.addCallback(self._listening)
          self._port = reactor.listenUDP(0, Heartbeat(d))

      def _listening(self, proto):
          self._proto = proto
          self._call = task.LoopingCall(self._proto.sendHeartbeat)
          self._call.start(15)

      def stop(self):
          self._call.stop()
          self._port.stopListening()

  hb = HeartbeatSenderGuy()
  hb.start()
  reactor.run()

Hope this helps,

Jp



From drakesmith at adelphia.net  Sat Sep 24 16:28:54 2005
From: drakesmith at adelphia.net (Drake Smith)
Date: Sat, 24 Sep 2005 18:28:54 -0400
Subject: [Twisted-Python] How to send a UDP datagram
In-Reply-To: <20050924162414.3914.1813846259.divmod.quotient.20798@ohm>
References: <5.1.0.14.0.20050924113340.02b2fe58@mail.adelphia.net>
Message-ID: <5.1.0.14.0.20050924175523.02adc0f0@mail.adelphia.net>


>On Sat, 24 Sep 2005 11:33:50 -0400, Drake Smith <drakesmith at adelphia.net> 
>wrote:
>>Can somebody please show me the Twisted way to send a simple UDP 
>>datagram? From the examples, I see how to transport.write in response to 
>>receiving a datagram or in response to establishing a UDP "connection". 
>>But in my application, I'd like to send datagrams blindly, say, to 
>>initiate a heartbeat message or to stream audio samples without 
>>acknowledgement via an unconnected UDP socket. I'd also like to do this 
>>from a function that is not wrapped inside a Twisted protocol class as 
>>such, unless that is contrary to the Twisted approach.
>>
>>I am using Twisted version 2.0.1/Python 2.4 on a Linux box. Thank you.
>
>When a DatagramProtocol is hooked up to a transport, its startProtocol 
>method is invoked.  Here's how I'd write a heartbeat thingy:
>
>  from twisted.internet import protocol, reactor, task
>
>  class Heartbeat(protocol.DatagramProtocol):
>      def sendHeartbeat(self):
>          self.transport.write('poingo')
>
>      def startProtocol(self):
>          self._call = task.LoopingCall(self.sendHeartbeat)
>          self._loop = self._call.start(15)
>
>      def stopProtocol(self):
>          self._call.stop()
>
>  reactor.listenUDP(0, Heartbeat())
>  reactor.run()
>
>
>There's nothing particularly unique to Twisted if you want to turn this 
>inside out and have some other code controlling the loop, but here's an 
>example of that just for completeness:
>
>  from twisted.internet import protocol, reactor, task
>
>  class Heartbeat(protocol.DatagramProtocol):
>      def __init__(self, onStart):
>          self.onStart = onStart
>
>      def startProtocol(self):
>          self.onStart.callback(self)
>
>      def sendHeartbeat(self):
>          self.transport.write('poingo')
>
>  class HeartbeatSenderGuy(object):
>      def start(self):
>          d = defer.Deferred()
>          d.addCallback(self._listening)
>          self._port = reactor.listenUDP(0, Heartbeat(d))
>
>      def _listening(self, proto):
>          self._proto = proto
>          self._call = task.LoopingCall(self._proto.sendHeartbeat)
>          self._call.start(15)
>
>      def stop(self):
>          self._call.stop()
>          self._port.stopListening()
>
>  hb = HeartbeatSenderGuy()
>  hb.start()
>  reactor.run()
>
>Hope this helps,
>
>Jp


Jp,

Thank you for the extra effort to show us OO novices how to control the 
loop from outside the protocol class. I've read several inquiries to this 
effect but nobody has ever explained it.

I generalized your example to give me what I want: the ability to invoke 
UDP datagram messages from outside the protocol class:

from twisted.internet import protocol, reactor, defer

class UDPsender(protocol.DatagramProtocol):
     def __init__(self, onStart):
         self.onStart = onStart

     def startProtocol(self):
         self.onStart.callback(self)

     def sendMsg(self, data, (host, port)):
         self.transport.write(data, (host, port))

class DatagramSender(object):
     def start(self):
         d = defer.Deferred()
         d.addCallback(self._listening)
         self._port = reactor.listenUDP(0, UDPsender(d))

     def _listening(self, proto):
         global myProto
         myProto = proto

     def sendMsg(self, data, (host, port)):
         global myProto
         myProto.sendMsg(data, (host, port))

     def stop(self):
         self._call.stop()
         self._port.stopListening()

ds = DatagramSender()
ds.start()
ds.sendMsg("hello port 20006", ("127.0.0.1", 20006))
ds.sendMsg("hello port 20007", ("127.0.0.1", 20007))
reactor.run()

I tried a simpler implementation.....

from twisted.internet import protocol, reactor

class UDPsender(protocol.DatagramProtocol):

     def sendMsg(self, data, (host, port)):
         self.transport.write(data, (host, port))

ds = UDPsender()
ds.sendMsg("hello port 20006", ("127.0.0.1", 20006))
ds.sendMsg("hello port 20007", ("127.0.0.1", 20007))
reactor.run()

.....but I get the infamous "AttributeError: 'NoneType' object has no 
attribute 'write'" error. I'll stay with the former version. It's not 
exactly as compact as "mySocket.sendto(data, addr)" but I know it will 
cause me less headaches as my program evolves.

Jp: I see your name a lot within the Python community. Thanks for all your 
attentiveness to us new comers.



>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From exarkun at divmod.com  Sat Sep 24 17:33:11 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 24 Sep 2005 19:33:11 -0400
Subject: [Twisted-Python] How to send a UDP datagram
In-Reply-To: <5.1.0.14.0.20050924175523.02adc0f0@mail.adelphia.net>
Message-ID: <20050924233311.3914.1442994037.divmod.quotient.20890@ohm>

On Sat, 24 Sep 2005 18:28:54 -0400, Drake Smith <drakesmith at adelphia.net> wrote:
>
> [snip]
>
>Jp,
>
>Thank you for the extra effort to show us OO novices how to control the loop 
>from outside the protocol class. I've read several inquiries to this effect 
>but nobody has ever explained it.
>
>I generalized your example to give me what I want: the ability to invoke UDP 
>datagram messages from outside the protocol class:

For the most part, your code looks good.  The one thing it gets somewhat incorrect is that it does not wait for the protocol to become connected before attempting to use its transport.

>
>from twisted.internet import protocol, reactor, defer
>
>class UDPsender(protocol.DatagramProtocol):
>     def __init__(self, onStart):
>         self.onStart = onStart
>
>     def startProtocol(self):
>         self.onStart.callback(self)

  Only after startProtocol has been called is `self.transport' bound to something meaningful.  That's the reason for the Deferred here - so you know when you can start using the protocol instance.  Until this Deferred fires, there's no connection to write bytes too.

  With SelectReactor (and perhaps all the other currently implemented reactors), startProtocol may get called synchronously as a result of listenUDP (that is, before listenUDP returns) - but this is not guaranteed, so it's best not to rely on it.

>
>     def sendMsg(self, data, (host, port)):
>         self.transport.write(data, (host, port))
>
>class DatagramSender(object):
>     def start(self):
>         d = defer.Deferred()
>         d.addCallback(self._listening)
>         self._port = reactor.listenUDP(0, UDPsender(d))
>
>     def _listening(self, proto):
>         global myProto
>         myProto = proto
>
>     def sendMsg(self, data, (host, port)):
>         global myProto
>         myProto.sendMsg(data, (host, port))
>
>     def stop(self):
>         self._call.stop()
>         self._port.stopListening()
>
>ds = DatagramSender()
>ds.start()
>ds.sendMsg("hello port 20006", ("127.0.0.1", 20006))
>ds.sendMsg("hello port 20007", ("127.0.0.1", 20007))

  The above two lines are the ones that might explode if listenUDP doesn't give its protocol a transport synchronously.  To get them to execute at the correct time, you might try adding "return d" to the end of the definition of start, and then changing the above to:

    ds = DatagramSender()
    d = ds.start()
    def startSendingStuff(ignored):
        ds.sendMsg("hello port 20006", ("127.0.0.1", 20006))
        ds.sendMsg("hello port 20007", ("127.0.0.1", 20007))

>reactor.run()
>
>I tried a simpler implementation.....
>
>from twisted.internet import protocol, reactor
>
>class UDPsender(protocol.DatagramProtocol):
>
>     def sendMsg(self, data, (host, port)):
>         self.transport.write(data, (host, port))
>
>ds = UDPsender()
>ds.sendMsg("hello port 20006", ("127.0.0.1", 20006))
>ds.sendMsg("hello port 20007", ("127.0.0.1", 20007))
>reactor.run()
>
>.....but I get the infamous "AttributeError: 'NoneType' object has no 
>attribute 'write'" error. I'll stay with the former version. It's not 
>exactly as compact as "mySocket.sendto(data, addr)" but I know it will cause 
>me less headaches as my program evolves.

If you just add in a "reactor.listenUDP(0, ds)" before the call to sendMsg, the above should work, though the same caveat about synchronous listenUDP/startProtocol interaction applies.

If you prefer, you can fold the `start' method (and supporting methods) into UDPSender - I only created two separate classes to demonstrate that the functionality could in fact be separated.

>
>Jp: I see your name a lot within the Python community. Thanks for all your 
>attentiveness to us new comers.

Glad to be of help :)

Jp



From warner at lothar.com  Sat Sep 24 18:32:59 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 24 Sep 2005 17:32:59 -0700 (PDT)
Subject: [Twisted-Python] unsafe tracebacks in PB
Message-ID: <20050924.173259.122178897.warner@lothar.com>

> Just wondering, why is it possible to turn on unsafe
> tracebacks only at the server and not at the client?
> PB being symmetrical, this discrimination makes it
> arbitrarily difficuly to debug PB applications
> sometimes.

Hey, sorry for the slow response.

It *is* possible to set the 'unsafeTracebacks' flag on both ends of the wire.
PBServerFactory() takes a constructor argument to set this flag, while
PBClientFactory() does not, but you can always set it after the fact:

 f = PBClientFactory()
 f.unsafeTracebacks = True

I'm more inclined to resolve the asymmetry by removing the argument from
PBServerFactory rather than adding it to PBClientFactory. As a debugging
thing, I feel it isn't entirely appropriate to have as a constructor
argument. However, I don't really feel that strongly about it either way.

For the record, I'll describe a little bit more about what exactly this flag
does, because there *is* a sense in which unsafe tracebacks can only be
enabled on the "server" side of a given method call. The important thing to
remember is that there are two different ways to divide the connection into
"client" and "server" ends.

Suppose you have program A, which has a pb.Referenceable named Alice that
implements remote_foo. Likewise, you have program B, which contains a
pb.Referenceable named Bob that implements remote_bar. Let us further suppose
that program B used PBServerFactory and reactor.listenTCP to make the object
Bob available to the world. Program A then used PBClientFactory and
reactor.connectTCP to obtain a RemoteReference to Bob (and somehow passed a
reference to Alice over to program B at the same time, so that both programs
have a RemoteReference to the other's Referenceable).

Now, the setting of this "unsafe tracebacks" flag on side A only affects
tracebacks being sent *from* side A: that is, for exceptions that occur on
side A, during a remote method invocation that was requested by side B. If
you consider any given method call to have a "client side" (which requests
the call by doing rref.callRemote("foo", args)), and a "server side" (which
implements the method remote_foo(self, args)), then the unsafe-tracebacks
flag is only relevant for the "server side".

In our example, when B does alice.callRemote("foo"), B is the "client" side
and A is the "server" side. If an exception occurs inside Alice's remote_foo
method, it is the setting of A's clientfactory.unsafeTracebacks flag that
determines whether's A's internal state will be exposed to B. On the other
hand, when A does bob.callRemote("bar"), B is the "server" side, so it is B's
serverfactory.unsafeTracebacks flag that matters.

The important point is that the requesting side for any particular method
call does not get to ask for an "unsafe traceback": only the owner of the
sensitive information (in this case, the stack frames leading up to the
exception, and the globals/locals that are in those stack frames) gets to
decide whether or not to share it with the outside world.

The second usage of the terms "client" and "server" here has to do with which
side initiated the TCP connection and which side accepted it. This is how the
PBClientFactory and PBServerFactory classes use these terms. Both of these
classes have an 'unsafeTracebacks' flag, and if you set it to something
non-zero, then any exception-raising methods invoked on that side will send
back a full traceback to the other side. The minor asymmetry here
(constructor argument versus set-the-flag-later) is just an oversight in the
API.


hope that's useful,
 -Brian



From warner at lothar.com  Sat Sep 24 18:43:59 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 24 Sep 2005 17:43:59 -0700 (PDT)
Subject: [Twisted-Python] jelly tracebacks
Message-ID: <20050924.174359.63508673.warner@lothar.com>

> I just had a grueling experience debugging some
> unjellying problem. I wonder, why not make jelly
> tracebacks more useful by adding the details of the PB
> message that gave rise to them (i.e. which method of
> which object was called with which arguments). Any
> thoughts?

Good idea. I've incorporated this into newpb, where any problem during
serialization or unserialization is reported via an exception that has a
.where attribute. This .where string reports the location in the object graph
that had the problem. In the case of serialization errors during an argument
of a method call, you'd get a string with something like:

 <call-(reqID)-(objID)-(methodname)>.foo

If you were to have something unserializable inside a container, the .where
string would include the relevant index values:

 d = {'foo': 12, 'bar': Ephemeral()}
 l = [1, 2, d]
 rr.callRemote("doStuff", arg1=5, arg2=l)
   -> BananaError(where=<call-0-4-doStuff>.arg2[2]['bar'])

Likewise, if one of the arguments violates a Schema constraint, the exception
should give you enough information to figure out what exactly caused the
problem. This occurs on both ends of the wire, so exceptions that occur when
serializing the return value can be located too.

The same .where technique is used during unserialization, so if someone sends
you a serialized instance of a class that you are unaware of (or unwilling to
deserialize), or if their value violates your inbound schema, you'll get an
exception that has enough detail to help you figure out where exactly the
problem was.

cheers,
 -Brian




From warner at lothar.com  Sat Sep 24 20:22:38 2005
From: warner at lothar.com (Brian Warner)
Date: Sat, 24 Sep 2005 19:22:38 -0700 (PDT)
Subject: [Twisted-Python] Re: GUI responsiveness
Message-ID: <20050924.192238.115293364.warner@lothar.com>

> Is there a good place to read more about NewPB?  Or is it just a matter 
> of searching the maillist archives and SVN repository?

For now, the SVN code and docs are the best source of information:

 svn://svn.twistedmatrix.com/svn/Twisted/branches/warner/newpb

You'll want to look in doc/pb/* and twisted/pb/* . There is a surprising
quantity of documentation for newpb, I tried to document everything before
implementing it.

I've got a few more things to get implemented first, but I'll be merging this
stuff into TRUNK sometime soon. I won't promise wire-compatibility for a
while yet, but I think it's good enough to be useable already. Connection
setup, in particular, is (IMHO) a lot easier than oldpb.

cheers,
 -Brian



From phil at bubblehouse.org  Sun Sep 25 19:27:20 2005
From: phil at bubblehouse.org (Phil Christensen)
Date: Sun, 25 Sep 2005 21:27:20 -0400
Subject: [Twisted-Python] Re: GUI responsiveness
In-Reply-To: <20050924.192238.115293364.warner@lothar.com>
References: <20050924.192238.115293364.warner@lothar.com>
Message-ID: <F655F734-B2E1-4561-A7BA-FFDBA3E63C22@bubblehouse.org>

I'm just going to pop out of the shadows for a moment to make one  
request. It would be really great to get a "Migrating OldPB to NewPB"  
document of some kind; I don't know what the userbase is for PB, but  
for me this is definitely going to be the third time I've had to  
migrate from one version of PB to another (not a complaint, of  
course)...

I've had to write some application-specific hackery in my particular  
usage -- I know I'm going to spend some time testing/debugging that  
when this hits Trunk, so anything to help with the rest of it would  
be great.

Thanks again for everything, folks...

-phil


On Sep 24, 2005, at 10:22 PM, Brian Warner wrote:

>> Is there a good place to read more about NewPB?  Or is it just a  
>> matter
>> of searching the maillist archives and SVN repository?
>>
>
> For now, the SVN code and docs are the best source of information:
>
>  svn://svn.twistedmatrix.com/svn/Twisted/branches/warner/newpb
>
> You'll want to look in doc/pb/* and twisted/pb/* . There is a  
> surprising
> quantity of documentation for newpb, I tried to document everything  
> before
> implementing it.
>
> I've got a few more things to get implemented first, but I'll be  
> merging this
> stuff into TRUNK sometime soon. I won't promise wire-compatibility  
> for a
> while yet, but I think it's good enough to be useable already.  
> Connection
> setup, in particular, is (IMHO) a lot easier than oldpb.
>
> cheers,
>  -Brian
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From tv at twistedmatrix.com  Mon Sep 26 06:24:09 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 26 Sep 2005 15:24:09 +0300
Subject: [Twisted-Python] twisted.trial.assertions is now deprecated.
In-Reply-To: <d06a5cd305092405361c883705@mail.gmail.com>
References: <d06a5cd305092405361c883705@mail.gmail.com>
Message-ID: <4337E869.9040501@twistedmatrix.com>

Jonathan Lange wrote:
> As part of the on-going maintenance of Trial, I have deprecated the
> assertions module.  All people writing unit tests are advised to use
> the assertion methods on unittest.TestCase.

It's not that long ago that they were added, and the last person
rewriting trial wanted to deprecate self.failUnless etc. Nice
cooperation, there ;)

Happily, I never had time to move away from self.failUnless at all.



From pegazik at gmail.com  Mon Sep 26 08:40:06 2005
From: pegazik at gmail.com (Krzysztof Nowak)
Date: Mon, 26 Sep 2005 16:40:06 +0200
Subject: [Twisted-Python] Twisted.web signal handling
In-Reply-To: <20050924152504.3914.1020640885.divmod.quotient.20785@ohm>
References: <cc4a20de05092405435742ca9e@mail.gmail.com>
	<20050924152504.3914.1020640885.divmod.quotient.20785@ohm>
Message-ID: <cc4a20de0509260740cc97d4@mail.gmail.com>

On 9/24/05, Jp Calderone <exarkun at divmod.com> wrote:
> Timeouts should be managed using twisted.internet.reactor.callLater().

Thanks. I am not really deep in the twisted. I just want to make this
application and that would be all (for now). I have rewrite my
previous code in this way:

/////////////////////////////////////////////////////////////////////////////////////
def Timeout():
   raise ConnectionError

def HistosRendering:
       Event = reactor.callLater(0.0001, Timeout)	
       try:
           <Some activity that need timeout>
       except ConnectionError:
           <In case of timeout>
           return
       else:
           Event.cancel()

class Resource(resource.Resource):
   def render(self, request):
       HistosRender()

resource = Resource()
/////////////////////////////////////////////////////////////////////////////////////

But still, it doesn't work. Timeout() is called, but exception is
making whole process to fail and the except: statestment is not even
started. I'm quite shure, that this timeouting-stuff should be some
standard problem, but I failed to find any information in the net. So
please, help me once again.

> JP Calderone:
> Also, there is a race condition between the end of your try suite and the timer.cancel() call.  The exception could be raised after the else suite is entered but before the timer is actually cancelled.

Do you have any ideas how to avoid that problem?


> >
> >class Resource(resource.Resource):
> >    def render(self, request):
> >        HistosRender()
>
> You are blocking the entire process for the during of the render() call.  This is another reason not to make whatever synchronous connection attempt you are making and instead use something Twisted provides.  No other activities can occur, process-wide, while your code is running.  If this is a multiuser application, *everyone* using it will experience periods of unresponsiveness when *anyone* causes blocking code to run.

If adding asynchronous approach would force me to restructure whole
project, it would stay for time just like this. This could be next
step, but timeouting is much more important to me....

Cheers,
Krzysztof Nowak

From Henning.Ramm at mediapro-gmbh.de  Mon Sep 26 10:30:23 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Mon, 26 Sep 2005 18:30:23 +0200
Subject: [Twisted-Python] How to write a simpletelnet client?
Message-ID: <F92274058556DE42B94B148EEFB91839021CB583@exchange-03.suedkurier.de>

>>I didn't expect that one must handle control codes (your function reponseFunct), I expected the protocol to handle that for me, but anyway, that was no problem (i.e. you solved it before). And with your code I could even switch off the echo (your next thread).

>You don't actually have to do this.  You can implement iac_DO, iac_DONT, iac_WILL, and iac_WONT to handle feature negotiation.

>You can also use twisted.conch.telnet, which presents a slightly more complete API for feature negotiation.

Thank you, I'll look into it. It's better to use ssh anyway.

>>What I don't understand is how to 'inject' some commands and collect their result.
>>What you tried in your "command" function in __main__ can't work, because the protocol has no transport.
>>I don't understand how to get at the Factory's actual protocol instance and its transport.

>Factory's don't have protocol instances, in general.  A factory is responsible for creating between zero and an unlimited number >of instances of a protocol, as they are demanded by established connections.

>Protocol.connectionMade is provided as a hook for application-level logic.  You may want to send your commands from that method.  >When it is invoked, you will have a transport.

Thank you.

I don't understand how connectionMade would help me here - I use it to switch off ECHO, but everything else is in dataReceived to react on prompts. And I've telnet_Command to issue a command (i.e. I queue it while there's no connection), but if I use the Protocol in a Factory, I can't get my hands on it. Perhaps I simply shouldn't use a Factory.

I guess the UDP code you're discussing with Drake Smith will help me further, his task seems similar to mine.

Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From garanin at m-lan.ru  Mon Sep 26 14:17:18 2005
From: garanin at m-lan.ru (Garanin Michael)
Date: Tue, 27 Sep 2005 00:17:18 +0400
Subject: [Twisted-Python] zope.component or twisted.python.components
In-Reply-To: <20050923213204.3914.830329341.divmod.quotient.20585@ohm>
References: <20050923213204.3914.830329341.divmod.quotient.20585@ohm>
Message-ID: <1127765838.4936.8.camel@localhost>

                                                                          
Can i hope that there will be feature such as named adapters, multiple
objects adapter, handlers etc. (such as in Z3)  in
"twisted.python.component" ? Is it planed?
Thanks.
В Сбт, 24.09.2005, в 01:32, Jp Calderone пишет:
>                                                                           On Sat, 24 Sep 2005 01:18:26 +0400, Garanin Michael <garanin at m-lan.ru> wrote:
> >
> >Hello!
> >I am twisted-newcomer, and i try ported my Zope3 application to
> >twisted+nevow. Can i use zope.components package from Zope3 (only for my
> >objects of course) instead   twisted.python.components, is it legal?
> >
> 
> The only constraint in place is that if you pass an object to someone else's code (for example, to Twisted), it behaves as they expect it to.
> 
> I doubt many people have tried this (or at least, they have not talked about it), but there should be no categorical reason for it to fail.  Let us know if you run into any problems that you think represent unreasonable incompatibilities.
> 
> Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From itamar at itamarst.org  Mon Sep 26 14:33:35 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 26 Sep 2005 16:33:35 -0400
Subject: [Twisted-Python] zope.component or twisted.python.components
In-Reply-To: <1127765838.4936.8.camel@localhost>
References: <20050923213204.3914.830329341.divmod.quotient.20585@ohm>
	<1127765838.4936.8.camel@localhost>
Message-ID: <1127766816.8754.48.camel@localhost.localdomain>

On Tue, 2005-09-27 at 00:17 +0400, Garanin Michael wrote:

> Can i hope that there will be feature such as named adapters, multiple
> objects adapter, handlers etc. (such as in Z3)  in
> "twisted.python.component" ? Is it planed?

twisted.python.components is just a layer on top of the standard Zope3
AdapterRegistry (and mostly it's just backwards compat cruft). So you
can for example register named adapters, etc.. Or you could isntall
Zope3 and use its APIs for registering these things; the adaptation
hooks are global so it will all interoperate nicely.




From garanin at m-lan.ru  Mon Sep 26 15:02:34 2005
From: garanin at m-lan.ru (Garanin Michael)
Date: Tue, 27 Sep 2005 01:02:34 +0400
Subject: [Twisted-Python] zope.component or twisted.python.components
In-Reply-To: <1127766816.8754.48.camel@localhost.localdomain>
References: <20050923213204.3914.830329341.divmod.quotient.20585@ohm>
	<1127765838.4936.8.camel@localhost>
	<1127766816.8754.48.camel@localhost.localdomain>
Message-ID: <1127768554.5227.8.camel@localhost>

                                                                          
В Втр, 27.09.2005, в 00:33, Itamar Shtull-Trauring пишет:
>                                                                           On Tue, 2005-09-27 at 00:17 +0400, Garanin Michael wrote:
> 
> > Can i hope that there will be feature such as named adapters, multiple
> > objects adapter, handlers etc. (such as in Z3)  in
> > "twisted.python.component" ? Is it planed?
> 
> twisted.python.components is just a layer on top of the standard Zope3
> AdapterRegistry (and mostly it's just backwards compat cruft). So you
> can for example register named adapters, etc.. Or you could isntall
> Zope3 and use its APIs for registering these things; the adaptation
> hooks are global so it will all interoperate nicely.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
Yes, I do it. But, there are two global AdapterRegistry instances
(globalsitemanager from z3 and globalRegistry from twisted) in my app. I
think it's 'dirty code'.





From jeinhorn at fourscorellc.com  Mon Sep 26 15:17:05 2005
From: jeinhorn at fourscorellc.com (Jeff Einhorn)
Date: Mon, 26 Sep 2005 16:17:05 -0500
Subject: [Twisted-Python] PB for .NET?
Message-ID: <2B025C1778EB94418F186FB802D68EEF1B6662@TRITON.pinnaclecredit.com>

Has anyone written an Implementation of the PB for the .NET platform in
something like C# that they would be willing to share?

 

Thanks,

 

Jeff Einhorn

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050926/bba43596/attachment.html>

From itamar at itamarst.org  Mon Sep 26 15:39:34 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 26 Sep 2005 17:39:34 -0400
Subject: [Twisted-Python] PB for .NET?
In-Reply-To: <2B025C1778EB94418F186FB802D68EEF1B6662@TRITON.pinnaclecredit.com>
References: <2B025C1778EB94418F186FB802D68EEF1B6662@TRITON.pinnaclecredit.com>
Message-ID: <1127770774.8754.69.camel@localhost.localdomain>

On Mon, 2005-09-26 at 16:17 -0500, Jeff Einhorn wrote:
> Has anyone written an Implementation of the PB for the .NET platform
> in something like C# that they would be willing to share?

The Java PB implementation should be pretty easy to either port, or
likely even run directly using http://www.ikvm.net/. I've heard rumors
porting Java to C# involves renaming .java to to whatever the C# file
prefix is and then just poking at it until it compiles.

http://itamarst.org/software/twistedjava/





From mary-twisted at puzzling.org  Mon Sep 26 18:28:43 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 27 Sep 2005 10:28:43 +1000
Subject: [Twisted-Python] Reminder: Virtual Twisted Sprint, 8-9 October
Message-ID: <20050927002843.GW1012@home.puzzling.org>

Just a reminder for everyone that there will be a bunch of people online
on the weekend of 8-9 October working their hearts out on the Twisted
codebase. All participants welcome, people unfamiliar with the codebase
will need to be a bit self-motivated though in terms of being willing to
find their own problem to work on (check the bug tracker for ideas).
We're particularly keen for people who would be interested in adding
unti tests.

Sprinting discussion will be in #twisted and #twisted.web on
freenode.net. There should be people around at most times.

-Mary

-- 
<e at ircnet> on the internet the concepts of time and space lose meaning



From jadestorm at nc.rr.com  Mon Sep 26 18:50:29 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Mon, 26 Sep 2005 20:50:29 -0400
Subject: [Twisted-Python] oscar.py updates
Message-ID: <DAF545CC-5FD5-4D45-B12F-23D8B18D9C19@nc.rr.com>

Folk,

Would you all prefer that I send the the current state of changes  
I've made to oscar.py (now that I've merged together what I changed  
for ICQ and AIM) or wait until I can write documentation and such  
along-side it?  For that matter, can someone point me at some good  
"here's how we do it" type instructions for writing Twisted  
documentation that is consistent with ... well the rest of it.  =D  I  
don't think I'd call it stable yet, so I wouldn't be labeling it as  
such yet.  =)  What do you think?

(PS, it's got quite a lot of changes in it since I first pulled it  
out of Twisted 1.3.0)

Daniel



From general at eepatents.com  Mon Sep 26 21:39:58 2005
From: general at eepatents.com (Ed Suominen)
Date: Mon, 26 Sep 2005 20:39:58 -0700
Subject: [Twisted-Python] 
	Re: [Twisted-web] Reminder: Virtual Twisted Sprint, 8-9 October
In-Reply-To: <20050927002843.GW1012@home.puzzling.org>
References: <20050927002843.GW1012@home.puzzling.org>
Message-ID: <1127792399.9677.56.camel@207-118-71-185.dyn.centurytel.net>

I'm a regular grump on #twisted about the overall lack of docstrings in
Twisted. I'd be willing to participate by offering docstrings for
specific classes/methods if there's a general interest and willingness
to incorporate them. What would be the preferred way to pass them on for
review and commit, given that "all participants [are] welcome" but that
I lack commit access and would rather not jump through the bug tracker
hoops for every single docstring written?

Best regards,
Ed Suominen

On Tue, 2005-09-27 at 10:28 +1000, Mary Gardiner wrote:
> Just a reminder for everyone that there will be a bunch of people online
> on the weekend of 8-9 October working their hearts out on the Twisted
> codebase. All participants welcome, people unfamiliar with the codebase
> will need to be a bit self-motivated though in terms of being willing to
> find their own problem to work on (check the bug tracker for ideas).
> We're particularly keen for people who would be interested in adding
> unti tests.
> 
> Sprinting discussion will be in #twisted and #twisted.web on
> freenode.net. There should be people around at most times.
> 
> -Mary
> 




From mary-twisted at puzzling.org  Mon Sep 26 21:46:32 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 27 Sep 2005 13:46:32 +1000
Subject: [Twisted-Python] 
	Re: [Twisted-web] Reminder: Virtual Twisted Sprint, 8-9 October
In-Reply-To: <1127792399.9677.56.camel@207-118-71-185.dyn.centurytel.net>
References: <20050927002843.GW1012@home.puzzling.org>
	<1127792399.9677.56.camel@207-118-71-185.dyn.centurytel.net>
Message-ID: <20050927034632.GB1012@home.puzzling.org>

[Moving discussion onto twisted-python only]

On Mon, Sep 26, 2005, Ed Suominen wrote:
> I'm a regular grump on #twisted about the overall lack of docstrings in
> Twisted. I'd be willing to participate by offering docstrings for
> specific classes/methods if there's a general interest and willingness
> to incorporate them. What would be the preferred way to pass them on for
> review and commit, given that "all participants [are] welcome" but that
> I lack commit access and would rather not jump through the bug tracker
> hoops for every single docstring written?

Well, asking at the time will give you the ultimate answer, but
whichever of the following is acceptable to you:

 1. Make your patches available on a website and give the person who has
    agreed to review them the URL.

 2. Mail them to the person who has agreed to review them.

 3. Make a single bug and attach all the patches to it. (Depends on
    exactly what bug tracker hoops you object to.)

1 and 3 are preferrable because it means that if someone drops the ball
on the day, you can nag about it on the list.

-Mary



From ajchos at wp.pl  Tue Sep 27 07:10:54 2005
From: ajchos at wp.pl (=?iso-8859-2?Q?Micha=B3?= Tyde)
Date: Tue, 27 Sep 2005 15:10:54 +0200
Subject: [Twisted-Python] How to write a simpletelnet client?
Message-ID: <1127826654.9003.21.camel@localhost.localdomain>


Sorry that i answer so late (busssy week).
> I could even switch off the echo (your next thread).

Switching off ECHO i realized by sending a commands:

unset PS1 (switching off prompt)
stty -echo (swiching off echo)

> What I don't understand is how to 'inject' some commands and collect
> their result.
I don't understand how You want to "inject" commands. Now I used a
defers to handling a commands (sending and getting answers).
dataReceived is responsible for collecting what is comming to Your
client as answer. 
> What you tried in your "command" function in __main__ can't work,
> because the protocol has no transport.
This is the factory now i used to connect (maybe thiss will help You):

class MyFactory( ClientFactory ):
    protocol = TelnetProtocol
    '''all printouts from this class will have F at the beggining - form
Factory and they are green - <g>'''    
    def __init__( self ):
        print "<g>F __init__"
        self.protos={}
        self.nextName = None
        self.t0 = time.time()
        
    
    def buildProtocol( self, addr ):
        print "<g>F buildProtocol"
        p = self.protocol( self.nextName )
        p.factory = self
        self.protos[self.nextName] = p
        self.nextName = None
        return p
    
    
    def getClient( self, name ):
        print "<g>F getClient"
        t0 = time.time()
        while True:
            try:
                return self.protos[name]
            except KeyError:
                reactor.run( 0.1 )
        print name
        print self.nextName
        while name not in self.nextName:
            reactor.iterate( 0.1 )
            if time.time() - self.t0 > CLIENT_CONNECTION_TIMEOUT:
                raise TimeoutError, "Timeout on connection"
    
    def addActive( self, proto ):
        print "<g>F addActive"
        self.engine._storeClient( proto )





From moof at metamoof.net  Tue Sep 27 07:29:25 2005
From: moof at metamoof.net (Moof)
Date: Tue, 27 Sep 2005 15:29:25 +0200
Subject: [Twisted-Python] PB for .NET?
In-Reply-To: <1127770774.8754.69.camel@localhost.localdomain>
References: <2B025C1778EB94418F186FB802D68EEF1B6662@TRITON.pinnaclecredit.com>
	<1127770774.8754.69.camel@localhost.localdomain>
Message-ID: <43394935.2010705@metamoof.net>

Itamar Shtull-Trauring wrote:
> On Mon, 2005-09-26 at 16:17 -0500, Jeff Einhorn wrote:
> 
>>Has anyone written an Implementation of the PB for the .NET platform
>>in something like C# that they would be willing to share?
> 
> 
> The Java PB implementation should be pretty easy to either port, or
> likely even run directly using http://www.ikvm.net/. I've heard rumors
> porting Java to C# involves renaming .java to to whatever the C# file
> prefix is and then just poking at it until it compiles.
> 
> http://itamarst.org/software/twistedjava/

If you do manage to port it, please post about it, as I'd be quite
interested in knowing about it.

I'm currently looking at the possibilities involved in combining a large VB
application with some of the stuff I've been doing in Twisted. It won't
happen for a few months yet, but if I can tell the VB lot that they can do
it through PB.NET, that may well be another reason for them to get on and
port it to .NET.

Moof
-- 
Giles Antonio Radford, alias Moof
"Too old to be a chicken and too young to be a dirty old man"
Serving up my ego over at <http://metamoof.net/>



From itamar at itamarst.org  Tue Sep 27 08:40:37 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 27 Sep 2005 10:40:37 -0400
Subject: [Twisted-Python] oscar.py updates
In-Reply-To: <DAF545CC-5FD5-4D45-B12F-23D8B18D9C19@nc.rr.com>
References: <DAF545CC-5FD5-4D45-B12F-23D8B18D9C19@nc.rr.com>
Message-ID: <1127832037.8961.23.camel@localhost.localdomain>

On Mon, 2005-09-26 at 20:50 -0400, Daniel Henninger wrote:

> Would you all prefer that I send the the current state of changes  
> I've made to oscar.py (now that I've merged together what I changed  
> for ICQ and AIM) or wait until I can write documentation and such  
> along-side it? 

Assuming it's got tests, and some explanation of what you've added, then
it might well go in (though that's up to the maintainer of course).

>  For that matter, can someone point me at some good  
> "here's how we do it" type instructions for writing Twisted  
> documentation that is consistent with ... well the rest of it.  =D  I  
> don't think I'd call it stable yet, so I wouldn't be labeling it as  
> such yet.  =)  What do you think?

We've got a documentation standard, coding style policy etc. as part of
the Twisted core documentation (the version in trunk is a bit more up to
date):
http://twistedmatrix.com/projects/core/documentation/howto/policy/index.html

Twisted documentation is typically written with Lore:
http://twistedmatrix.com/projects/lore/documentation/howto/lore.html





From jadestorm at nc.rr.com  Tue Sep 27 09:01:50 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Tue, 27 Sep 2005 11:01:50 -0400
Subject: [Twisted-Python] oscar.py updates
In-Reply-To: <1127832037.8961.23.camel@localhost.localdomain>
References: <DAF545CC-5FD5-4D45-B12F-23D8B18D9C19@nc.rr.com>
	<1127832037.8961.23.camel@localhost.localdomain>
Message-ID: <FAA8B4FC-B802-43E5-A0DE-0A1721EF6E22@nc.rr.com>

>> Would you all prefer that I send the the current state of changes
>> I've made to oscar.py (now that I've merged together what I changed
>> for ICQ and AIM) or wait until I can write documentation and such
>> along-side it?
>>
>
> Assuming it's got tests, and some explanation of what you've added,  
> then
> it might well go in (though that's up to the maintainer of course).

Ok then I've got a little bit more work to do with it.  ;D

And that reminds me, am I considered the maintainer of it at this  
point?  I recall a conversation not-so-long ago about it and z3p  
saying "it's yours".  =)


>>  For that matter, can someone point me at some good
>> "here's how we do it" type instructions for writing Twisted
>> documentation that is consistent with ... well the rest of it.  =D  I
>> don't think I'd call it stable yet, so I wouldn't be labeling it as
>> such yet.  =)  What do you think?
>>
>
> We've got a documentation standard, coding style policy etc. as  
> part of
> the Twisted core documentation (the version in trunk is a bit more  
> up to
> date):
> http://twistedmatrix.com/projects/core/documentation/howto/policy/ 
> index.html
>
> Twisted documentation is typically written with Lore:
> http://twistedmatrix.com/projects/lore/documentation/howto/lore.html

Excellent, thanks!  I'll look them over!

Daniel


>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>




From itamar at itamarst.org  Tue Sep 27 09:47:03 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 27 Sep 2005 11:47:03 -0400
Subject: [Twisted-Python] oscar.py updates
In-Reply-To: <FAA8B4FC-B802-43E5-A0DE-0A1721EF6E22@nc.rr.com>
References: <DAF545CC-5FD5-4D45-B12F-23D8B18D9C19@nc.rr.com>
	<1127832037.8961.23.camel@localhost.localdomain>
	<FAA8B4FC-B802-43E5-A0DE-0A1721EF6E22@nc.rr.com>
Message-ID: <1127836024.8961.32.camel@localhost.localdomain>

On Tue, 2005-09-27 at 11:01 -0400, Daniel Henninger wrote:

> And that reminds me, am I considered the maintainer of it at this  
> point?  I recall a conversation not-so-long ago about it and z3p  
> saying "it's yours".  =)

If you're the one who is mainly writing the code then yes, you're the
maintainer; but code would still need to be approved by whoever does the
code review for the patch.




From smurf at smurf.noris.de  Tue Sep 27 09:28:42 2005
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Tue, 27 Sep 2005 17:28:42 +0200
Subject: [Twisted-Python] pb over twisted ssh?
Message-ID: <pan.2005.09.27.15.28.38.627653@smurf.noris.de>

Hi,

The problem: I've also got a perspective server which clients connect to.
For now, I'm using password authentication.

The obvious improvement is to use ssh, and its credentials, instead.
(The server already knows the clients' SSH keys.)

I've looked at the sample code (examples/sshsimpleclient.py), but I don't
quite see how to hook a perspective broker into all that -- the server
example looks somewhat more tractable. ;-)

Also, I'd like to use the client's ssh key agent; that's important because
the system with the PB client on it doesn't have the users' private keys.
Is that possible / implemented?

Thanks for any help.

-- 
Matthias Urlichs   |   {M:U} IT Design @ m-u-it.de   |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
 - -
Whatever is not nailed down is mine.  Whatever I can pry up is not nailed down.
		-- Collis P. Huntingdon, railroad tycoon





From warner at lothar.com  Tue Sep 27 18:37:30 2005
From: warner at lothar.com (Brian Warner)
Date: Tue, 27 Sep 2005 17:37:30 -0700 (PDT)
Subject: [Twisted-Python] pb over twisted ssh?
Message-ID: <20050927.173730.52089288.warner@lothar.com>

> The obvious improvement is to use ssh, and its credentials, instead.
> (The server already knows the clients' SSH keys.)

I don't have any advice to offer about using SSH, other than saying that
yeah, that'd be cool. I'd point out that I think you might be talking about
two separate things: one part is to run the PB connection inside an encrypted
SSH session. The other part is to use SSH keys as PB login credentials. I
consider the first part more useful, because that's how you would achieve
transport-layer privacy. You could achieve similar things by sending the PB
connection through a tunneled socket, but it would be kind of grotty.

What I will mention is that, in newpb, connections are run over SSL by
default, and the PB-URLs that identify endpoints are secure references to
those endpoints (they include a hash of the SSL key), so you get encryption
and authentication for free. cred has not yet been dragged into newpb, but it
won't be too much work once someone figures out what exactly they want out of
such a combination :).

cheers,
 -Brian



From foom at fuhm.net  Wed Sep 28 00:01:06 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Sep 2005 00:01:06 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EKV06-0001dZ-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-09-21 06:00:02.530000:
 Bugs opened: 16   Bugs closed: 8   Total open bugs: 457 (+8)
  Urgent: 5 (-1)
  Bug: 212 (+5)
  Feature: 163 (+5)
  Wish: 77 (-1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] Trial's output in buildbot ("-to" options) is confused  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1215 opened by spiv

                    ==== Bug ====
[DOCUMENTATION] Should the coding standard mention PEP8  (4 hours ago)
       http://twistedmatrix.com/bugs/issue1220 opened by hypatia

[MAIL, TRIAL] SMTPClientError.__str__ is unsafe, and can crash trial  (yesterday)
       http://twistedmatrix.com/bugs/issue1219 opened by jml

[CONCH, CORE, FLOW, LORE, MAIL, NAMES, PB, TRIAL, WEB] trial.util should not be used by non-Trial code  (yesterday)
       http://twistedmatrix.com/bugs/issue1217 opened by jml

[CORE, TRIAL] trial does not isolate test methods from each other  (2 days ago)
       http://twistedmatrix.com/bugs/issue1213 opened by exarkun

[CORE, TRIAL] trial's spinWhile and spinUntil have ridiculously small timeouts  (2 days ago)
       http://twistedmatrix.com/bugs/issue1214 opened by exarkun

[TRIAL] BUG: twisted.trial.remote is untested, unused and probably broken  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1211 opened by jml

[TRIAL] Missing test-case-name referents cause the Trial run to abort.  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1212 opened by jml

                    ==== Feature ====
[TRIAL] --coverage should be a flag, not a parameter  (4 days ago)
       http://twistedmatrix.com/bugs/issue1207 opened by jml

[TRIAL] Remove --psyco option from Trial command line  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1208 opened by jml

[TRIAL] Make Trial command line do --recurse by default  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1209 opened by jml

[CORE] Process's childFDs dict should also accept file objects (if they have a valid .fileno())  (yesterday)
       http://twistedmatrix.com/bugs/issue1218 opened by spiv

[DOCUMENTATION, RELEASE MANAGEMENT] Deprecation policy  (yesterday)
       http://twistedmatrix.com/bugs/issue1216 opened by jml

[TRIAL] Specify trial reporters using --reporter parameter  (4 days ago)
       http://twistedmatrix.com/bugs/issue1210 opened by jml

[TRIAL] TASK: Deprecate assertions.py  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1205 opened by jml

[TRIAL] TASK: Deprecate setUpClass/tearDownClass.  Provide replacement  (4 days ago)
       http://twistedmatrix.com/bugs/issue1206 opened by jml

Bugs Closed
______________________
                    ==== Urgent ====
[TRIAL] Trial's output in buildbot ("-to" options) is confused  (2 days ago)
       http://twistedmatrix.com/bugs/issue1215 opened by spiv, closed by jml

[CORE] ProtocolWrapper's behavior is unspecified  (5 months ago)
       http://twistedmatrix.com/bugs/issue1004 opened by exarkun, closed by exarkun

                    ==== Bug ====
[TRIAL] BUG: twisted.trial.remote is untested, unused and probably broken  (4 days ago)
       http://twistedmatrix.com/bugs/issue1211 opened by jml, closed by jml

[TRIAL] Missing test-case-name referents cause the Trial run to abort.  (4 days ago)
       http://twistedmatrix.com/bugs/issue1212 opened by jml, closed by jml

                    ==== Feature ====
[TRIAL] Remove --psyco option from Trial command line  (4 days ago)
       http://twistedmatrix.com/bugs/issue1208 opened by jml, closed by jml

[TRIAL] Make Trial command line do --recurse by default  (4 days ago)
       http://twistedmatrix.com/bugs/issue1209 opened by jml, closed by jml

[TRIAL] TASK: Deprecate assertions.py  (4 days ago)
       http://twistedmatrix.com/bugs/issue1205 opened by jml, closed by jml

                    ==== Wish ====
[TRIAL] trial warning suppression tests should be less noisy  (10 months ago)
       http://twistedmatrix.com/bugs/issue801 opened by exarkun, closed by jml




From jasper at peak.org  Wed Sep 28 02:22:42 2005
From: jasper at peak.org (Jasper)
Date: Wed, 28 Sep 2005 01:22:42 -0700
Subject: [Twisted-Python] pb over twisted ssh?
In-Reply-To: <20050927.173730.52089288.warner@lothar.com>
References: <20050927.173730.52089288.warner@lothar.com>
Message-ID: <433A52D2.2020607@peak.org>

Brian Warner wrote:

>What I will mention is that, in newpb, connections are run over SSL by
>default, and the PB-URLs that identify endpoints are secure references to
>those endpoints (they include a hash of the SSL key), so you get encryption
>and authentication for free. cred has not yet been dragged into newpb, but it
>won't be too much work once someone figures out what exactly they want out of
>such a combination :).
>  
>
Hot damn that sounds good.  You're the man!

-Jasper



From thys at quaint.co.za  Wed Sep 28 06:24:11 2005
From: thys at quaint.co.za (Thys Meintjes)
Date: Wed, 28 Sep 2005 14:24:11 +0200
Subject: [Twisted-Python] wxpython lockup
Message-ID: <1127910251.7377.24.camel@localhost.localdomain>

Greets,

I'm currently refactoring a multi threaded wxPython app to use twisted
and adbapi. I've based my code ion the wx demo in the twisted
distribution e.g:

from twisted.internet import wxreactor
wxreactor.install()
from twisted.internet import reactor
...
reactor.registerWxApp(app)
reactor.run(0)

The app loads and then freezes, sometimes some of the widgets remain
active for a few seconds before freezing up. No other threads have been
started by this time.

What gives ? Is the wxreactor stable an ready for production ?

Ubuntu 5.4 (2.6.10-5-386) wxPython 2.6 

thanks

-- 
Thys Meintjes <thys at quaint.co.za>




From solipsis at pitrou.net  Wed Sep 28 06:46:05 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 28 Sep 2005 14:46:05 +0200
Subject: [Twisted-Python] wxpython lockup
In-Reply-To: <1127910251.7377.24.camel@localhost.localdomain>
References: <1127910251.7377.24.camel@localhost.localdomain>
Message-ID: <1127911565.15818.48.camel@p-dvsi-418-1.rd.francetelecom.fr>


> The app loads and then freezes, sometimes some of the widgets remain
> active for a few seconds before freezing up. No other threads have been
> started by this time.
> 
> What gives ? Is the wxreactor stable an ready for production ?

There are various recipes to avoid problems with mixing two single loops
together. You can read recent archives of this mailing-list for more
information.

Regards

Antoine.





From clive at darkarts.co.za  Wed Sep 28 06:53:19 2005
From: clive at darkarts.co.za (clive at darkarts.co.za)
Date: Wed, 28 Sep 2005 14:53:19 +0200
Subject: [Twisted-Python] wxpython lockup
In-Reply-To: <1127910251.7377.24.camel@localhost.localdomain>
References: <1127910251.7377.24.camel@localhost.localdomain>
Message-ID: <1127911999.433a923fc135f@webmail.firstier.co.za>

Quoting Thys Meintjes <thys at quaint.co.za>:

#
# What gives ? Is the wxreactor stable an ready for production ?
#

I found many problems with wxreactor.  try threadedselectreactor instead (its
not released yet, find it in the twisted repository, threadedselectreactor.py
is all you need, it works with the latest 'official' twisted release)

I am using wxPython/threadedselectreactor and tada for database quite nicely,
adbapi should work too.

Clive



----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.



From foom at fuhm.net  Wed Sep 28 09:16:28 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Sep 2005 11:16:28 -0400
Subject: [Twisted-Python] twisted.vfs issues
Message-ID: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>

So, starting to look through twisted.vfs, I'm finding a few things  
that need work.

1) I see no way of reading from or writing to a file in  
ivfs.IFileSystemLeaf.

2) createFile is racy -- it requires opening a file by the given  
name, with default permissions, then immediately closing it. In  
addition, it doesn't specify whether it's an error if the file  
already exists.

3) Looks like all operations are blocking? What about a remote vfs? I  
think every operation in the vfs interface ought to be non-blocking.

4) IFileSystemNode.remove doesn't say whether it's a recursive delete  
(on a directory), and .rename don't specify whether newName can be in  
a different directory, whether it replaces an existing file, or  
whether it works on a directory.

5) Errors are coarse-grained. Everything is a VFSError, and the only  
detailed information is in human-readable text, not any nice computer- 
readable form.

6) Need some support in the interface for extended attributes.

That's it for now.

James



From andy at thecablelounge.com  Wed Sep 28 13:49:04 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Thu, 29 Sep 2005 05:49:04 +1000
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>
References: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>
Message-ID: <433AF3B0.9040709@thecablelounge.com>

James Y Knight wrote:
> So, starting to look through twisted.vfs, I'm finding a few things  that 
> need work.

Hey James,

Thanks for the feedback.  We need it.  Heaps of decisions for the vfs 
stuff have been put off to see what other use cases would need from the 
vfs.  Inparticular permissions and metadata.

> 1) I see no way of reading from or writing to a file in  
> ivfs.IFileSystemLeaf.

The vfs stuff is still heavily influenced by the interface that conch 
expects as sftp has been the main motivation for the current contributors.

Reading and writing is done through writeChunk and readChunk - we've 
always felt this wasn't quite right though for a general backend. But 
after two sprints we still haven't come up with something that is 
better.  Adding the web2.Stream adaptor seems to have glazed over the 
issue for protocols that read/writeChunk doesn't work for.  Spiv even 
used streams for the vfs ftp adaptor!

I've added read/writeChunk to ivfs.IFileSystemLeaf's interface.

> 2) createFile is racy -- it requires opening a file by the given  name, 
> with default permissions, then immediately closing it. 

:), racy is good right?

> In  addition, it 
> doesn't specify whether it's an error if the file  already exists.

It should, I've added this to the interface.

> 3) Looks like all operations are blocking? What about a remote vfs? I  
> think every operation in the vfs interface ought to be non-blocking.

The other option is the vfs interface could be maybe deferred.  Most 
protocols are good at handling this (sftp, streams).  But given how easy 
it is to return deferred.succeed - it's probably simpler to say always 
non-blocking.

> 4) IFileSystemNode.remove doesn't say whether it's a recursive delete  
> (on a directory)

Hrm yeah - should it?  Or should this be handled by higher level 
utilities (eg shutil).  The current os backend uses os.rmdir, so doesn't 
do a recursive delete.  I've updated the interface to say that it doesn't.

> , and .rename don't specify whether newName can be in  a 
> different directory, whether it replaces an existing file, or  whether 
> it works on a directory.

The method is against Node, so it works on directories.

This is os.rename's spec:

---
Rename the file or directory src to dst. If dst is a directory, OSError 
will be raised. On Unix, if dst exists and is a file, it will be removed 
silently if the user has permission. The operation may fail on some Unix 
flavors if src and dst are on different filesystems. If successful, the 
renaming will be an atomic operation (this is a POSIX requirement). On 
Windows, if dst already exists, OSError will be raised even if it is a 
file; there may be no way to implement an atomic rename when dst names 
an existing file. Availability: Macintosh, Unix, Windows.
---

Should vfs be aiming to provide consistent behaviour for all operations 
across all backends?  Or should some behaviour be left down to the 
particular backend to decide?

For the moment I've updated the interface to read:

Renames this node to newName.  newName can be in a different directory. 
  If the destination is an existing directory, an error will be raised.

> 5) Errors are coarse-grained. Everything is a VFSError, and the only  
> detailed information is in human-readable text, not any nice computer- 
> readable form.

yeah :( that needs to be fixed.

> 6) Need some support in the interface for extended attributes.

There's getMetadata. That let's you return arbitrary attributes.

Would that cover what you're thinking?

Protocol's should try to get by with as little metadata as they can.  If 
a backend doesn't supply a bit of metadata a protocol must have, then it 
won't be able to be used with the protocol.

Andy.



From m at keysolutions.ru  Fri Sep 23 02:49:11 2005
From: m at keysolutions.ru (Mikhail Kashkin)
Date: Fri, 23 Sep 2005 12:49:11 +0400
Subject: [Twisted-Python] Repository for python developers
Message-ID: <dh0fif$ti$1@sea.gmane.org>

Moscow, Russia, September 23th, 2005

We are happy to spread good news about `Key Solutions' 
<http://keysolutions.ru/>`_ new initiative. We have created a new public 
repository for python developers. The ulitimate goal of this project is 
to unite companies and people under the umbrella of 
Russian-speaking-python (Zope/Plone/Zope3/Twisted/etc) open source 
programmers community, so that we could jointly push forward new 
programs and technologies in Russia.

The repository powered by `subversion <http://subversion.tigris.org/>`_.

**Links**:

- `Press release in russian <http://keysolutions.ru/News/subversion>`_

- `Новость на русском <http://keysolutions.ru/News/subversion>`_

- `Subversion <https://svn.keysolutions.ru/community/>`_

About Key Solutions
--------------------

Key Solutions is an open source company with primary focus in 
development of corporative CRM Internet/intranet systems and 
web-communities. The company promotes and supports Zope, Plone, Asterisk 
platforms in Russia.

To learn more about Key Solutions visit `eng.keysolutions.ru 
<http://eng.keysolutions.ru/>`_ and
`keysolutions.ru <http://keysolutions.ru/>`_

-- 
Mikhail Kashkin,
Key Solutions (http://keysolutions.ru/)
Director
Zope/Asterisk/Plone - Solutions/Consulting/Support
Plone на русском http://plone.org.ru/
Plone Foundation Member (http://plone.org/foundation/members/)




From exarkun at divmod.com  Wed Sep 28 17:21:13 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 19:21:13 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14589 - finally add
 readChunk, writeChunk to ivfs.IFileSystemLeaf 's interface
In-Reply-To: <E1EKg2h-0004CM-00@wolfwood>
Message-ID: <20050928232113.3914.1593679305.divmod.quotient.22191@ohm>

On Wed, 28 Sep 2005 11:48:32 -0600, Andy Gayton <andy at wolfwood.twistedmatrix.com> wrote:
>Author: andy
>Date: Wed Sep 28 11:48:31 2005
>New Revision: 14589
>
>Modified:
>   trunk/twisted/vfs/ivfs.py
>Log:
>finally add readChunk, writeChunk to ivfs.IFileSystemLeaf 's interface
>
>Modified: trunk/twisted/vfs/ivfs.py
>==============================================================================
>--- trunk/twisted/vfs/ivfs.py	(original)
>+++ trunk/twisted/vfs/ivfs.py	Wed Sep 28 11:48:31 2005
>@@ -46,6 +46,18 @@
>     def close(self):
>         """closes this node"""
>
>+    def readChunk(self, offset, length):
>+        """
>+        Leaf should have been previously opened with suitable flags.
>+        Reads length bytes or until the end of file from this leaf from
>+        the given offset.
>+        """
>+
>+    def writeChunk(self, offset, data):
>+        """
>+        Leaf should have been previously opened with suitable flags.
>+        Writes data to leaf from the given offset.
>+        """
>

It bothers me that this API differs from stable API for moving piles of bytes, the *other* somewhat controversial newly introduced API for moving piles of bytes around, and the third API being toyed with which is also for moving piles of bytes around.

To all the VFS hackers, could we put some effort into not introducing a fourth API? 

Jp



From jml at mumak.net  Wed Sep 28 17:32:21 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 29 Sep 2005 09:32:21 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r14589 - finally add
	readChunk, writeChunk to ivfs.IFileSystemLeaf 's interface
In-Reply-To: <20050928232113.3914.1593679305.divmod.quotient.22191@ohm>
References: <E1EKg2h-0004CM-00@wolfwood>
	<20050928232113.3914.1593679305.divmod.quotient.22191@ohm>
Message-ID: <d06a5cd3050928163253691352@mail.gmail.com>

On 9/29/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Wed, 28 Sep 2005 11:48:32 -0600, Andy Gayton <andy at wolfwood.twistedmatrix.com> wrote:
> >Author: andy
> >Date: Wed Sep 28 11:48:31 2005
> >New Revision: 14589
> >
> >Modified:
> >   trunk/twisted/vfs/ivfs.py
> >Log:
> >finally add readChunk, writeChunk to ivfs.IFileSystemLeaf 's interface
> >
> >Modified: trunk/twisted/vfs/ivfs.py
> >
>
> It bothers me that this API differs from stable API for moving piles of bytes, the *other* somewhat controversial newly introduced API for moving piles of bytes around, and the third API being toyed with which is also for moving piles of bytes around.
>
> To all the VFS hackers, could we put some effort into not introducing a fourth API?
>

You referring to twisted.spread.util.StringPager?



From screwtape at froup.com  Wed Sep 28 17:42:51 2005
From: screwtape at froup.com (Screwtape)
Date: Thu, 29 Sep 2005 09:42:51 +1000
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <433AF3B0.9040709@thecablelounge.com>
References: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>
	<433AF3B0.9040709@thecablelounge.com>
Message-ID: <20050928234251.GA30411@ferd2.thristian.org>

On Thu, Sep 29, 2005 at 05:49:04AM +1000, Andy Gayton wrote:
> James Y Knight wrote:
> >6) Need some support in the interface for extended attributes.
> 
> There's getMetadata. That let's you return arbitrary attributes.

As a know-nothing bystander with just enough knowledge about metadata,
I'm curious. Is there a way to get a list of the kinds of metadata that
are available? Is there a name-spacing system so different kinds of
metadata can be available under different names? For example, a WebDAV
share might (should) expose a 'Content-Type' attribute on every file,
so code might be written that exposes the MIME type of the file in the
'Content-Type' attribute. On the other hand, a file on an NTFS file
system can have arbitarily-named bytestreams associated with it. If the
NTFS VFS module exposes byte-streams under their arbitary names,
a program using the VFS could try to get the content type of a file and
wind up with (several gigabytes of) almost anything.

Another arbitary-metadata system that would be nice to support would be
POSIX extended attributes, but I don't know what the name restrictions
on those would be.



From exarkun at divmod.com  Wed Sep 28 18:04:24 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 20:04:24 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <433AF3B0.9040709@thecablelounge.com>
Message-ID: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>

On Thu, 29 Sep 2005 05:49:04 +1000, Andy Gayton <andy at thecablelounge.com> wrote:
>James Y Knight wrote:
>>So, starting to look through twisted.vfs, I'm finding a few things  that 
>>need work.
>
>Hey James,
>
>Thanks for the feedback.  We need it.  Heaps of decisions for the vfs stuff 
>have been put off to see what other use cases would need from the vfs. 
>Inparticular permissions and metadata.

With that in mind.... ;)

>>1) I see no way of reading from or writing to a file in 
>>ivfs.IFileSystemLeaf.
>
>The vfs stuff is still heavily influenced by the interface that conch 
>expects as sftp has been the main motivation for the current contributors.
>
>Reading and writing is done through writeChunk and readChunk - we've always 
>felt this wasn't quite right though for a general backend. But after two 
>sprints we still haven't come up with something that is better.  Adding the 
>web2.Stream adaptor seems to have glazed over the issue for protocols that 
>read/writeChunk doesn't work for.  Spiv even used streams for the vfs ftp 
>adaptor!

  twisted.vfs should not import things from or depend upon twisted.web2:

    * web2 is unreleased
    * web2's APIs are unstable
    * vfs is more generally applicable than web2 
    * web2's stream abstraction is not generally agreed upon

  If you like, we can talk more about how this interface should work.  However, my first inclination is to say that it should use the existing producer/consumer APIs.  While these are not the best APIs, they are used widely throughout Twisted, and therefore this will give the greatest usability to the resulting VFS code.  While there are adapters between these APIs and web2 streams, I still recommend against web2 streams for the reasons mentioned above.

>
>I've added read/writeChunk to ivfs.IFileSystemLeaf's interface.

  I mentioned these in a separate email, so I won't repeat those points.

>>2) createFile is racy -- it requires opening a file by the given  name, 
>>with default permissions, then immediately closing it.
>
>:), racy is good right?
>>In  addition, it doesn't specify whether it's an error if the file  already 
>>exists.
>
>It should, I've added this to the interface.
>>3) Looks like all operations are blocking? What about a remote vfs? I 
>>think every operation in the vfs interface ought to be non-blocking.
>
>The other option is the vfs interface could be maybe deferred.  Most 
>protocols are good at handling this (sftp, streams).  But given how easy it 
>is to return deferred.succeed - it's probably simpler to say always non- 
>blocking.

  I assume you mean that they should always return a Deferred.  In this case, I agree.  maybeDeferred is intended as a convenience for application-level code.  Framework-level code can avoid introducing the need for it at the application-level by simply always using Deferreds.

>>4) IFileSystemNode.remove doesn't say whether it's a recursive delete  (on 
>>a directory)
>
>Hrm yeah - should it?  Or should this be handled by higher level utilities 
>(eg shutil).  The current os backend uses os.rmdir, so doesn't do a 
>recursive delete.  I've updated the interface to say that it doesn't.
>>, and .rename don't specify whether newName can be in  a different 
>>directory, whether it replaces an existing file, or  whether it works on a 
>>directory.
>
>The method is against Node, so it works on directories.
>
>This is os.rename's spec:
>
>---
>Rename the file or directory src to dst. If dst is a directory, OSError will 
>be raised. On Unix, if dst exists and is a file, it will be removed silently 
>if the user has permission. The operation may fail on some Unix flavors if 
>src and dst are on different filesystems. If successful, the renaming will 
>be an atomic operation (this is a POSIX requirement). On Windows, if dst 
>already exists, OSError will be raised even if it is a file; there may be no 
>way to implement an atomic rename when dst names an existing file. 
>Availability: Macintosh, Unix, Windows.
>---
>
>Should vfs be aiming to provide consistent behaviour for all operations 
>across all backends?  Or should some behaviour be left down to the 
>particular backend to decide?
>
>For the moment I've updated the interface to read:
>
>Renames this node to newName.  newName can be in a different directory.  If 
>the destination is an existing directory, an error will be raised.

The semantics provided by vfs should be the same across all platforms and all backends.  Since os.rename's semantics vary between platforms, this probably eliminates it from (unaided) use in an implementation.  .rename() in VFS should work across filesystems, guarantee atomicity (if this is feasible - I think it is.  If not, it should explicitly deny atomicity), and have well-defined edge cases (for example, whether an exception is raised because the destination exists already should be defined one way or the other, and that's how it should always work).

>>5) Errors are coarse-grained. Everything is a VFSError, and the only 
>>detailed information is in human-readable text, not any nice computer- 
>>readable form.
>
>yeah :( that needs to be fixed.
>>6) Need some support in the interface for extended attributes.
>
>There's getMetadata. That let's you return arbitrary attributes.
>
>Would that cover what you're thinking?
>
>Protocol's should try to get by with as little metadata as they can.  If a 
>backend doesn't supply a bit of metadata a protocol must have, then it won't 
>be able to be used with the protocol.
>

There needs to be a convention for the format of this metadata.  Protocol implementations should not need to be familiar with the backend they are using, and different backends should provide the same metadata in the same way.  It may make sense to expand the example dictionary in getMetadata's docstring, and continue expanding it as new requirements are made (perhaps getMetadata's docstring isn't the best place for this information, either).  This still doesn't strike me as ideal, but it's better than nothing.

Going further, I'd like to see pathutils implemented in terms of twisted.python.filepath: there's a lot of code duplication between these two modules.

The code in twisted/vfs/adapters/dav.py is misplaced.  Itamar posted to this list about this issue a couple weeks ago, but I'll re-iterate.  Third-party package dependencies need to be considered carefully.  Most importantly, dependencies *must* not be cyclic.  Twisted cannot import from akadav, because akadav imports from Twisted.  If akadav can be used to provide VFS functionality, then the adapters to do so belong in akadav, or in some other package: not beneath the Python package "twisted".

As I mentioned above, twisted/vfs/adapters/ftp.py and stream.py shouldn't be importing from twisted.web2.  Likewise, twisted/vfs/adapters/sftp.py's dependence on twisted.conch is backwards: twisted.conch should provide code which augments twisted.vfs.  These are both great candidates for use of the plugin system.  This also lets you take care of the nasty registration-requires-import issues, since gathering plugins will necessarily import the required modules, or if not, will provide a hook so that they can be imported at precisely the right time.

Some easy things: new code in Twisted should use new-style classes; modules should have `test-case-name' declarations; zope Interface's convention is to not include "self" in method declarations; "type(x) is y" is generally wrong - osfs.py uses it in getMode() - both because isinstance() should really be used, and because type checking generally indicates some weakness in an API (why might the mode be either a string or an integer?  pick one and require only that).

I hope this doesn't come off as too critical :)  I'm very much looking forward to the day when setting up a dav server against a purely virtual, dynamic filesystem is as easy as implementing a couple interfaces out of ivfs.py.

Jp



From foom at fuhm.net  Wed Sep 28 18:35:40 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Sep 2005 20:35:40 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
References: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
Message-ID: <A11A5BDC-0CB9-492C-8CBB-5054B78DBF24@fuhm.net>

On Sep 28, 2005, at 8:04 PM, Jp Calderone wrote:
>  twisted.vfs should not import things from or depend upon  
> twisted.web2:
>
>    * web2 is unreleased
>    * web2's APIs are unstable
>    * vfs is more generally applicable than web2    * web2's stream  
> abstraction is not generally agreed upon
>
>  If you like, we can talk more about how this interface should  
> work.  However, my first inclination is to say that it should use  
> the existing producer/consumer APIs.  While these are not the best  
> APIs, they are used widely throughout Twisted, and therefore this  
> will give the greatest usability to the resulting VFS code.  While  
> there are adapters between these APIs and web2 streams, I still  
> recommend against web2 streams for the reasons mentioned above.
>

Twisted.vfs should not depend upon a module in twisted.web2 when  
twisted.vfs gets released. However, it is okay for it to depend upon  
that stream _code_ if it gets moved into twisted core before vfs is  
released. The idea all along has been to move t.w2.stream into  
twisted core when it is stable and useful. So I wouldn't worry about  
tearing it out of t.vfs quite yet.

Now, my first inclination is that the current block API *is* the  
right primitive for a file.

Also, in particular, making it use the old producer abstraction as a  
primitive is just asking for trouble. As the producer abstraction  
lets the producer send data asynchronously at any point, it becomes  
almost impossible to do a relatively simple operation like reading a  
part of a file. That is why, for web2, I had to drop it and make a  
new API that has the consumer request the data. I think the same  
reasoning applies here.

Again, I think that all requests for tearing various adapters and  
other bits out of twisted.vfs are currently completely premature. At  
this point in its development, it is critical that adapters for many  
different systems are created, to make sure that vfs has the  
appropriate abstractions and APIs to handle all use cases. And given  
that vfs is itself heavily under development, it makes no sense to  
request that said adapters be adopted upstream in each other project,  
yet.

James



From foom at fuhm.net  Wed Sep 28 18:39:34 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Sep 2005 20:39:34 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <433AF3B0.9040709@thecablelounge.com>
References: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>
	<433AF3B0.9040709@thecablelounge.com>
Message-ID: <9639B242-976A-44B8-B0F9-12BE8AB7F306@fuhm.net>

On Sep 28, 2005, at 3:49 PM, Andy Gayton wrote:
> There's getMetadata. That let's you return arbitrary attributes.
>
> Would that cover what you're thinking?

No -- one problem is that extended metadata can be potentially very  
large (just as large as the file's normal contents). Another is that  
there may be potentially a large number of such attributes. So, you  
really don't want to return all of it with one call -- you want to  
explicitly ask for certain attributes. See the getxattr, listxattr,  
etc functions for what it the low-level functionality looks like in  
linux. At the moment this interface varies slightly between OSX,  
FreeBSD, and Linux, but they're almost the same. The OSX one adds an  
offset parameter to get/set, and the freebsd one adds a "namespace"  
parameter, to distinguish between root-only attributes and user  
attributes.

I think it may be best to model it as a special kind of child, as it  
seems as if that's the way people are moving their thinking anyhow.
  IFileSystemNode.xattrContainer() -> IFileSystemContainer

That returned object would then allow the use of the same createFile/ 
child/remove/rename/open/read operations as on normal children. It  
would have to throw errors if you try doing excessively "interesting"  
things, like trying to create directories in it, but I think that's  
probably okay.

On the other hand, some people think xattrs are only for small  
metadata, and that "subfiles" or "named forks" are an altogether  
different thing. I'm not sure if that means that it's necessarily a  
bad idea to present both as fileish objects though.

Some interface to this is necessary for properly functioning WebDAV  
(and smb if anyone ever wanted to implement that mess).

> Protocol's should try to get by with as little metadata as they  
> can.  If a backend doesn't supply a bit of metadata a protocol must  
> have, then it won't be able to be used with the protocol.

Support for xattrs can also be optional in a backend.

Eventually, support for POSIX ACLs should also be considered. I don't  
really have the first clue how that should be modeled though.

James



From foom at fuhm.net  Wed Sep 28 19:01:26 2005
From: foom at fuhm.net (James Y Knight)
Date: Wed, 28 Sep 2005 21:01:26 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
References: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
Message-ID: <E164C1E1-D812-4738-A3F4-1B01BC992568@fuhm.net>


On Sep 28, 2005, at 8:04 PM, Jp Calderone wrote:

> rename() in VFS should work across filesystems,
>

Hm, that is going to be an interesting one to implement. I'm thinking  
in particular about what happens when you have a structure like:
/ -> adhoc.AdhocDirectory:
   tmp -> osfs.OSDirectory("/home/jknight/tmp", ...)
   home -> inmem.FakeDirectory(...)

and I ask to move a file from /tmp/foo to /home/bar.

IMO it is reasonable to say that the VFS 'rename' operation is  
allowed to cleanly fail, and not do the rename, forcing a higher  
level to do a copy/delete if it wants. This pushes the complication  
out of each VFS implementation to one implementation that will work  
across all, and furthermore can share its code with the copy  
implementation. This maps nicely to rename(2), as well, as a bonus.

> guarantee atomicity (if this is feasible - I think it is.  If not,  
> it should explicitly deny atomicity),

It isn't feasible, when renaming across filesystems. There will  
certainly have to be a time at which both 'from' and 'to' exist.  
Additionally, it may be impossible to create a file 'to+".tmp"' (or  
similar) in the target directory to atomically rename to 'to' when  
you've finished copying, because of permissions. Another reason to  
restrict "rename" to be the simple rename, rather than the  
copy&delete-rename.

James




From exarkun at divmod.com  Wed Sep 28 19:15:18 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 21:15:18 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <A11A5BDC-0CB9-492C-8CBB-5054B78DBF24@fuhm.net>
Message-ID: <20050929011518.3914.1921089064.divmod.quotient.22221@ohm>

On Wed, 28 Sep 2005 20:35:40 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Sep 28, 2005, at 8:04 PM, Jp Calderone wrote:
>>  twisted.vfs should not import things from or depend upon  twisted.web2:
>>
>>    * web2 is unreleased
>>    * web2's APIs are unstable
>>    * vfs is more generally applicable than web2    * web2's stream 
>>abstraction is not generally agreed upon
>>
>>  If you like, we can talk more about how this interface should  work. 
>>However, my first inclination is to say that it should use  the existing 
>>producer/consumer APIs.  While these are not the best  APIs, they are used 
>>widely throughout Twisted, and therefore this  will give the greatest 
>>usability to the resulting VFS code.  While  there are adapters between 
>>these APIs and web2 streams, I still  recommend against web2 streams for 
>>the reasons mentioned above.
>
>Twisted.vfs should not depend upon a module in twisted.web2 when 
>twisted.vfs gets released. However, it is okay for it to depend upon  that 
>stream _code_ if it gets moved into twisted core before vfs is  released. 
>The idea all along has been to move t.w2.stream into  twisted core when it 
>is stable and useful. So I wouldn't worry about  tearing it out of t.vfs 
>quite yet.

That mildly addresses one of four points.  At the very least, the remaining three seem to remain valid.

>
>Now, my first inclination is that the current block API *is* the  right 
>primitive for a file.

It precludes writing large amounts of data to a file simply.

>
>Also, in particular, making it use the old producer abstraction as a 
>primitive is just asking for trouble. As the producer abstraction  lets the 
>producer send data asynchronously at any point, it becomes  almost 
>impossible to do a relatively simple operation like reading a  part of a 
>file. That is why, for web2, I had to drop it and make a  new API that has 
>the consumer request the data. I think the same  reasoning applies here.

The old API is not fantastic.  On the other hand, it's entirely servicable.  I don't understand why you think it is almost impossible to read part of a file using it.  In fact, I've done just this one several occasions.

>
>Again, I think that all requests for tearing various adapters and  other 
>bits out of twisted.vfs are currently completely premature. At  this point 
>in its development, it is critical that adapters for many  different systems 
>are created, to make sure that vfs has the  appropriate abstractions and 
>APIs to handle all use cases. And given  that vfs is itself heavily under 
>development, it makes no sense to  request that said adapters be adopted 
>upstream in each other project,  yet.

They can be removed from twisted.vfs without being removed from the Twisted repository.  Or they could be left in twisted.vfs but developed in a branch.  That is policy for major feature development, after all.

Jp



From exarkun at divmod.com  Wed Sep 28 19:19:25 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 21:19:25 -0400
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <E164C1E1-D812-4738-A3F4-1B01BC992568@fuhm.net>
Message-ID: <20050929011925.3914.1422986750.divmod.quotient.22223@ohm>

On Wed, 28 Sep 2005 21:01:26 -0400, James Y Knight <foom at fuhm.net> wrote:
>
>On Sep 28, 2005, at 8:04 PM, Jp Calderone wrote:
>>rename() in VFS should work across filesystems,
>
>Hm, that is going to be an interesting one to implement. I'm thinking  in 
>particular about what happens when you have a structure like:
>/ -> adhoc.AdhocDirectory:
>   tmp -> osfs.OSDirectory("/home/jknight/tmp", ...)
>   home -> inmem.FakeDirectory(...)
>
>and I ask to move a file from /tmp/foo to /home/bar.
>

I can see ways to make this work.  They involve temporary files, as you mention below.  If we rule those out, it does become harder.

>IMO it is reasonable to say that the VFS 'rename' operation is  allowed to 
>cleanly fail, and not do the rename, forcing a higher  level to do a 
>copy/delete if it wants. This pushes the complication  out of each VFS 
>implementation to one implementation that will work  across all, and 
>furthermore can share its code with the copy  implementation. This maps 
>nicely to rename(2), as well, as a bonus.
>>guarantee atomicity (if this is feasible - I think it is.  If not,  it 
>>should explicitly deny atomicity),
>
>It isn't feasible, when renaming across filesystems. There will  certainly 
>have to be a time at which both 'from' and 'to' exist.  Additionally, it may 
>be impossible to create a file 'to+".tmp"' (or  similar) in the target 
>directory to atomically rename to 'to' when  you've finished copying, 
>because of permissions. Another reason to  restrict "rename" to be the 
>simple rename, rather than the  copy&delete-rename.

When are you allowed to create a file named "foo" in a directory, but not allowed to create a file named "foo.tmp"?

Anyway, I think it's worth a try at least.  If it turns out to not be possible, then certainly it should not be done :)  I am mainly concerned that there be consistent behavior across backends.  Writing code that deals with the quirks of os.rename() on Win32 is annoying, to say the least (and realisticly, just plain error prone).

Jp



From yong27 at gmail.com  Wed Sep 28 19:28:31 2005
From: yong27 at gmail.com (Hyungyong Kim)
Date: Thu, 29 Sep 2005 10:28:31 +0900
Subject: [Twisted-Python] how to unittest the deferred
Message-ID: <cf2492c50509281828798c8e8b@mail.gmail.com>

Hi all,

I'm newbie of Twisted. It's my first posting to this mail list. I'm
sorry for my stupid question.

Because I'm not familiar with asnyc programming, I'm suffering with
deferred. So I want to make unittest to check result easily as follow.

"""
from twisted.trial import unittest
from twisted.internet import defer, reactor

def someFunction():
    d = defer.Deferred()
    d.addCallback(gotValue)
    return d

def gotValue(myExpect):
    return "result"

class SomeTest(unittest.TestCase):
    def test1(self):
        self.assertEquals('result', unittest.deferredResult(someFunction()))
"""

But this test is not working. How can I check the "result" value.
Thanks for your kind support.

Hyungyong



From exarkun at divmod.com  Wed Sep 28 19:35:11 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 21:35:11 -0400
Subject: [Twisted-Python] how to unittest the deferred
In-Reply-To: <cf2492c50509281828798c8e8b@mail.gmail.com>
Message-ID: <20050929013511.3914.1921404204.divmod.quotient.22227@ohm>

On Thu, 29 Sep 2005 10:28:31 +0900, Hyungyong Kim <yong27 at gmail.com> wrote:
>Hi all,
>
>I'm newbie of Twisted. It's my first posting to this mail list. I'm
>sorry for my stupid question.
>
>Because I'm not familiar with asnyc programming, I'm suffering with
>deferred. So I want to make unittest to check result easily as follow.
>
>"""
>from twisted.trial import unittest
>from twisted.internet import defer, reactor
>
>def someFunction():
>    d = defer.Deferred()
>    d.addCallback(gotValue)
>    return d
>
>def gotValue(myExpect):
>    return "result"
>
>class SomeTest(unittest.TestCase):
>    def test1(self):
>        self.assertEquals('result', unittest.deferredResult(someFunction()))
>"""
>
>But this test is not working. How can I check the "result" value.
>Thanks for your kind support.

I'm not entirely certain why the above doesn't work, although I could make some good guesses.  Here's the preferred way to write such a test:

    class SomeTest(unittest.TestCase):
        def test1(self):
            d = someFunction()
            d.addCallack(self.assertEquals, 'result')
            return d

Jp



From mary-twisted at puzzling.org  Wed Sep 28 19:38:51 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 29 Sep 2005 11:38:51 +1000
Subject: [Twisted-Python] how to unittest the deferred
In-Reply-To: <20050929013511.3914.1921404204.divmod.quotient.22227@ohm>
References: <cf2492c50509281828798c8e8b@mail.gmail.com>
	<20050929013511.3914.1921404204.divmod.quotient.22227@ohm>
Message-ID: <20050929013851.GC23529@home.puzzling.org>

On Wed, Sep 28, 2005, Jp Calderone wrote:
>            d.addCallack(self.assertEquals, 'result')
                      ^ typo here?

-Mary



From exarkun at divmod.com  Wed Sep 28 19:43:49 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 28 Sep 2005 21:43:49 -0400
Subject: [Twisted-Python] how to unittest the deferred
In-Reply-To: <20050929013851.GC23529@home.puzzling.org>
Message-ID: <20050929014349.3914.811616114.divmod.quotient.22230@ohm>

On Thu, 29 Sep 2005 11:38:51 +1000, Mary Gardiner <mary-twisted at puzzling.org> wrote:
>On Wed, Sep 28, 2005, Jp Calderone wrote:
>>            d.addCallack(self.assertEquals, 'result')
>                      ^ typo here?
>
>-Mary
>

Indeed.  Make that addCallback, in case it isn't clear.  Thanks Mary.

Jp



From yong27 at gmail.com  Wed Sep 28 19:59:43 2005
From: yong27 at gmail.com (Hyungyong Kim)
Date: Thu, 29 Sep 2005 10:59:43 +0900
Subject: [Twisted-Python] how to unittest the deferred
In-Reply-To: <20050929013511.3914.1921404204.divmod.quotient.22227@ohm>
References: <cf2492c50509281828798c8e8b@mail.gmail.com>
	<20050929013511.3914.1921404204.divmod.quotient.22227@ohm>
Message-ID: <cf2492c505092818592d55567@mail.gmail.com>

Thanks for your answer.

But, in this case, any values are OK. Try to test that after replace
'result' to 'aaa'. I'm testing it using "trial" command.

2005/9/29, Jp Calderone <exarkun at divmod.com>:
> I'm not entirely certain why the above doesn't work, although I could make some good guesses.  Here's the preferred way to write such a test:
>
>     class SomeTest(unittest.TestCase):
>         def test1(self):
>             d = someFunction()
>             d.addCallack(self.assertEquals, 'result')
>             return d
>
> Jp
>

How can I test that. In my real code, someFunction returns deferred
from DB connection.



From jml at mumak.net  Wed Sep 28 20:12:23 2005
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 29 Sep 2005 12:12:23 +1000
Subject: [Twisted-Python] how to unittest the deferred
In-Reply-To: <cf2492c505092818592d55567@mail.gmail.com>
References: <cf2492c50509281828798c8e8b@mail.gmail.com>
	<20050929013511.3914.1921404204.divmod.quotient.22227@ohm>
	<cf2492c505092818592d55567@mail.gmail.com>
Message-ID: <d06a5cd305092819124743f81d@mail.gmail.com>

On 9/29/05, Hyungyong Kim <yong27 at gmail.com> wrote:
> Thanks for your answer.
>
> But, in this case, any values are OK. Try to test that after replace
> 'result' to 'aaa'. I'm testing it using "trial" command.
>
> 2005/9/29, Jp Calderone <exarkun at divmod.com>:
> > I'm not entirely certain why the above doesn't work, although I could make some good guesses.  Here's the preferred way to write such a test:
> >
> >     class SomeTest(unittest.TestCase):
> >         def test1(self):
> >             d = someFunction()
> >             d.addCallack(self.assertEquals, 'result')
> >             return d
> >
> > Jp
> >
>
> How can I test that. In my real code, someFunction returns deferred
> from DB connection.
>

I don't really understand your question.  I'll explain what Trial does
in the hope that I answer it by accident.

If your test returns a Deferred (as in SomeTests.test1), Trial will
wait until that Deferred has fired before proceeding to the next test.

In the example 'test1', someFunction() returns a deferred.  After the
deferred fires (most likely after the connection is made to the
database), self.assertEquals will get called (by your Deferred), kind
of like:
    self.assertEquals(thingReturnedEventuallyBySomeFunction, 'result')

If the assertion fails, Trial will record it as a failure. Otherwise
it will be marked as a success.


If you want to connect to the database, *then* do some testing on
something else, here's how it might look:

class DBTest(unittest.TestCase):
    def testDbThing(self):
        d = getDBConnection()
        d.addCallback(self._cb_testDbThing)
        return d

    def _cb_testDbThing(self, connection):
        d = connection.doSomething()
        d.addCallback(self.assertEquals, 'expectedValue')
        return d


I hope this helps,
jml



From andy at thecablelounge.com  Thu Sep 29 05:25:07 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Thu, 29 Sep 2005 21:25:07 +1000
Subject: [Twisted-Python] twisted.vfs issues - web2 dependency
In-Reply-To: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
References: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
Message-ID: <433BCF13.6080102@thecablelounge.com>

I'll have another shot at this :)

Jp Calderone wrote:
>    * web2 is unreleased

vfs is unreleased.  I think it's pretty safe to say it should stay that 
way at least until web2 is released.

>    * web2's APIs are unstable

vfs' APIs are obscenely unstable.

>    * vfs is more generally applicable than web2    

as is web2's stream.  As James pointed hopefully stream will eventually 
move into twisted core.

 >    * web2's stream abstraction is not generally agreed upon

fair point.  but this just means as stream's abstraction is reworked to 
meet general consensus - vfs will need to be rewritten to meet the changes.

 >  If you like, we can talk more about how this interface should work.
 > However, my first inclination is to say that it should use the existing
 > producer/consumer APIs.

It would be fairly straight forward to add an adapter from ivfs to 
producer/consumers if someone has a need for it.

I personally was keen to use streams with vfs as, being new project that 
has the luxury of being unstable, I wanted to pitch at were twisted was 
heading.  I was also hoping to add to web2's momentum - nevow on web2 
still feels a long way off and its something I'd really like to see.

Andy.




From andy at thecablelounge.com  Thu Sep 29 05:47:07 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Thu, 29 Sep 2005 21:47:07 +1000
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <20050929011518.3914.1921089064.divmod.quotient.22221@ohm>
References: <20050929011518.3914.1921089064.divmod.quotient.22221@ohm>
Message-ID: <433BD43B.9090101@thecablelounge.com>

Jp Calderone wrote:
> On Wed, 28 Sep 2005 20:35:40 -0400, James Y Knight <foom at fuhm.net> wrote:
> 
>> On Sep 28, 2005, at 8:04 PM, Jp Calderone wrote:
>> 

(in regards to read/writeChunk)

>> Now, my first inclination is that the current block API *is* the  
>> right primitive for a file.
> 
> It precludes writing large amounts of data to a file simply.

I think the main reason they've won out till now is that its incrediably 
easy to implement for backend implementors, and being so primitive, 
extremely easy to compose into higher abstractions (streams, 
producers/consumers or a convenience that lets you write large amounts 
of data to a file simply) through the use of adaptors.

the ftp adaptor making using of the stream adaptor is a pretty good 
example of this.

>> Again, I think that all requests for tearing various adapters and  
>> other bits out of twisted.vfs are currently completely premature. At  
>> this point in its development, it is critical that adapters for many  
>> different systems are created, to make sure that vfs has the  
>> appropriate abstractions and APIs to handle all use cases. And given  
>> that vfs is itself heavily under development, it makes no sense to  
>> request that said adapters be adopted upstream in each other project,  
>> yet.
> 
> They can be removed from twisted.vfs without being removed from the 
> Twisted repository.  Or they could be left in twisted.vfs but developed 
> in a branch.  That is policy for major feature development, after all.

I think the vfs stuff would really benefit by being prodded and exposed 
to as many use cases as possible.  It's been doing what I need it do for 
  around 6 months (except for dav - dav'd be awesome!:)) so it's hard to 
find motivation to work on it.

But I appreciate where your coming from.  I taken out the dav adaptor 
which was a failed experiment from the first sprint.  I think the only
controversial dependency left is web2, which I've discussed in another mail.

Andy.



From andy at thecablelounge.com  Thu Sep 29 06:43:04 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Thu, 29 Sep 2005 22:43:04 +1000
Subject: [Twisted-Python] twisted.vfs issues
In-Reply-To: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
References: <20050929000424.3914.1562619604.divmod.quotient.22201@ohm>
Message-ID: <433BE158.1000400@thecablelounge.com>

Jp Calderone wrote:
> On Thu, 29 Sep 2005 05:49:04 +1000, Andy Gayton 
> <andy at thecablelounge.com> wrote:
> 
>> James Y Knight wrote:

>  I assume you mean that they should always return a Deferred.  In this 
> case, I agree.  maybeDeferred is intended as a convenience for 
> application-level code.  Framework-level code can avoid introducing the 
> need for it at the application-level by simply always using Deferreds.

ok, http://twistedmatrix.com/bugs/issue1223

> The semantics provided by vfs should be the same across all platforms 
> and all backends.  Since os.rename's semantics vary between platforms, 
> this probably eliminates it from (unaided) use in an implementation.  
> .rename() in VFS should work across filesystems, guarantee atomicity (if 
> this is feasible - I think it is.  If not, it should explicitly deny 
> atomicity), and have well-defined edge cases (for example, whether an 
> exception is raised because the destination exists already should be 
> defined one way or the other, and that's how it should always work).

all that stuff on rename sounds great (moving between filesystems etc) 
.. might as well aim for it until its not possible.

http://twistedmatrix.com/bugs/issue1224

>>> 5) Errors are coarse-grained. Everything is a VFSError, and the only 
>>> detailed information is in human-readable text, not any nice 
>>> computer- readable form.

http://twistedmatrix.com/bugs/issue1225

> Going further, I'd like to see pathutils implemented in terms of 
> twisted.python.filepath: there's a lot of code duplication between these 
> two modules.

yep, http://twistedmatrix.com/bugs/issue1226

> As I mentioned above, twisted/vfs/adapters/ftp.py and stream.py 
> shouldn't be importing from twisted.web2.  Likewise, 
> twisted/vfs/adapters/sftp.py's dependence on twisted.conch is backwards: 
> twisted.conch should provide code which augments twisted.vfs.  These are 
> both great candidates for use of the plugin system.  This also lets you 
> take care of the nasty registration-requires-import issues, since 
> gathering plugins will necessarily import the required modules, or if 
> not, will provide a hook so that they can be imported at precisely the 
> right time.

ok - will check out the plugins stuff.  just haven't come across it yet.

> Some easy things: new code in Twisted should use new-style classes; 
> modules should have `test-case-name' declarations; zope Interface's 
> convention is to not include "self" in method declarations; "type(x) is 
> y" is generally wrong - osfs.py uses it in getMode() - both because 
> isinstance() should really be used, and because type checking generally 
> indicates some weakness in an API (why might the mode be either a string 
> or an integer?  pick one and require only that).

http://twistedmatrix.com/bugs/issue1227

> I hope this doesn't come off as too critical :)  I'm very much looking 
> forward to the day when setting up a dav server against a purely 
> virtual, dynamic filesystem is as easy as implementing a couple 
> interfaces out of ivfs.py.

Not at all.  The feedback is appreciated.

Andy.



From andy at thecablelounge.com  Thu Sep 29 06:47:46 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Thu, 29 Sep 2005 22:47:46 +1000
Subject: [Twisted-Python] twisted.vfs issues - metadata
In-Reply-To: <9639B242-976A-44B8-B0F9-12BE8AB7F306@fuhm.net>
References: <B9205FDA-DD7A-430A-B21B-4B2A6888124D@fuhm.net>	<433AF3B0.9040709@thecablelounge.com>
	<9639B242-976A-44B8-B0F9-12BE8AB7F306@fuhm.net>
Message-ID: <433BE272.20803@thecablelounge.com>


> On Sep 28, 2005, at 3:49 PM, Andy Gayton wrote:
>> There's getMetadata. That let's you return arbitrary attributes.
>> Would that cover what you're thinking?

James Y Knight wrote:
> No -- one problem is that extended metadata can be potentially very  
> large (just as large as the file's normal contents). Another is that  
> there may be potentially a large number of such attributes. 

> I think it may be best to model it as a special kind of child, as it  
> seems as if that's the way people are moving their thinking anyhow.
>  IFileSystemNode.xattrContainer() -> IFileSystemContainer
> 
> That returned object would then allow the use of the same createFile/ 
> child/remove/rename/open/read operations as on normal children. It  
> would have to throw errors if you try doing excessively "interesting"  
> things, like trying to create directories in it, but I think that's  
> probably okay.

How about getMetadata for simple data (size, content-type)  and a
container as you describe for potentially huge its of data?

hrm, .getattrs, .setattrs, .xattrsContainer ?

There definately should be a way to query what metadata a backend can
provide, and to pass which particular data you are requesting for
performance.  Namespaces might be useful to?  It'd be good to see a use
case to show that they are.

I'm keen to just let WebDAV's requirements drive the design here.  None 
of our uses up till now have had a great demand on metadata.

Andy.



From itamar at itamarst.org  Thu Sep 29 08:39:09 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 29 Sep 2005 10:39:09 -0400
Subject: [Twisted-Python] Twisted test problems on Windows (conch, web2)
Message-ID: <1128004749.8685.25.camel@localhost.localdomain>

Hi,

There are appear to be various import errors and related problems on
Win32 you can see e.g. at
http://twistedmatrix.com/buildbot/win32/builds/690/default/2 which could
be easily fixed. So, if you have the time please take a look at fixing
these. Thanks!




From glyph at divmod.com  Thu Sep 29 10:26:12 2005
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 29 Sep 2005 12:26:12 -0400
Subject: [Twisted-Python] twisted.vfs issues - web2 dependency
In-Reply-To: <433BCF13.6080102@thecablelounge.com>
Message-ID: <20050929162612.3914.1284380906.divmod.quotient.22415@ohm>



On Thu, 29 Sep 2005 21:25:07 +1000, Andy Gayton <andy at thecablelounge.com> wrote:
>I'll have another shot at this :)
>
>Jp Calderone wrote:
>>    * web2 is unreleased

I also object to the dependency, although I would propose the opposite solution:

I don't think that "twisted.vfs" makes *any* sense as a separate project.

web2 should not be a trivial HTTP server with a small resource wrapper in it.  It should be a full-featured web server.  Web does not mean "http" - all web-related protocols, such as WebDAV, ftp, even SOAP or Gopher, should be part of the 'web server' product part of Twisted.

Going forward, I will stipulate this requirement: each independent Twisted subpackage MUST be at least 2 things: a functioning infrastructure layer that can be used by 3rd party applications, and an application which can be used standalone or with application plugins.  In twisted.web's case this application is a "web server", which primarily does HTTP but can provide other request/response based protocols as well.  "application plugins" for the web server are things that respond to requests for particular URLs.

This requirement does imply the removal of a few existing Twisted packages.  twisted.xish and twisted.flow come to mind.  While I don't think that anything is actually using twisted.flow at this point, xish's useful code should move into the package that actually makes use of it (twisted.words.jabber).  twisted.pair should probably just be part of eunuchs; while Twisted applications can use it, it certainly doesn't seem to stand on its own.  I don't think it's important to act particularly quickly since I don't think any of these packages are seeing widespread external usage, but I definitely don't want to create more packages in this situation.

While Twisted packages may not depend on external projects (NO MORE NEVOW IMPORTS ANYWHERE, PLEASE), it is reasonable to have soft internal dependencies; such as web2 including a Conch plugin (importing Conch interfaces) that provides an HTTP/Gopher/etc backend for SFTP.  These dependencies can also be circular, so long as the circularity is between packages and not modules, AND the imports happen after startup; for example, it would also be reasonable for the previous scenario to co-exist with a plugin distributed with conch to enable SFTP servers to be used as web resources.



From foom at fuhm.net  Thu Sep 29 11:54:51 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 29 Sep 2005 13:54:51 -0400
Subject: [Twisted-Python] twisted.vfs issues - web2 dependency
In-Reply-To: <20050929162612.3914.1284380906.divmod.quotient.22415@ohm>
References: <20050929162612.3914.1284380906.divmod.quotient.22415@ohm>
Message-ID: <91C32690-2C25-4825-8EFE-B38E5FD6EA3D@fuhm.net>


On Sep 29, 2005, at 12:26 PM, glyph at divmod.com wrote:
> I don't think that "twisted.vfs" makes *any* sense as a separate  
> project.

Agreed. I had sort of assumed twisted.vfs was a proposed addition to  
twisted core.

James



From mary-twisted at puzzling.org  Thu Sep 29 15:27:12 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 30 Sep 2005 07:27:12 +1000
Subject: Large sub-projects == slow releases?? (Re: [Twisted-Python]
	twisted.vfs issues - web2 dependency)
In-Reply-To: <20050929162612.3914.1284380906.divmod.quotient.22415@ohm>
References: <433BCF13.6080102@thecablelounge.com>
	<20050929162612.3914.1284380906.divmod.quotient.22415@ohm>
Message-ID: <20050929212712.GB9621@sourdust.home.puzzling.org>

On Thu, Sep 29, 2005, glyph at divmod.com wrote:
> web2 should not be a trivial HTTP server with a small resource wrapper
> in it.  It should be a full-featured web server.  Web does not mean
> "http" - all web-related protocols, such as WebDAV, ftp, even SOAP or
> Gopher, should be part of the 'web server' product part of Twisted.

My understanding of the original purpose of the split -- which is
probably wrong -- though was to allow parts of twisted to release
without massive dependencies on near unrelated release critical bugs,
and further to allow users of multiple bits of Twisted to not have to
upgrade them all as a lump. If we have a model where an enormous group
of request-response protocols are lumped with web, we return to the
following release management problems:

 1. rapidly evolving code, like FTP, which seems to have some parts
    working now and were it an independent project should probably be
    having some highly alpha releases, will not be released until it is
    sufficiently stable to be bundled with a more used and mature protocol
    like HTTP, and may in turn block said releases by being highly
    alpha.

 2. relatively unrelated code, like ftp, or the hypotheticals above,
    will need to go unreleased every time there is a major years-long
    rewrite of a large component (web2)

My understanding of the release-early-release-often philosophy was to
encourage early adopting users (who are also more likely to become
contributors). As it is, no sub-project is releasing and core looks set
for a pretty slow ongoing release cycle. I may be naive about this, but
my concern is that while core has critical mass in terms of users, the
protocols and applications largely don't, and won't until they are seen
by potential users to be active and supported, part of which is actually
releasing. Having users in turn has been known to spur development. What
you're proposing sounds like a mature release policy: as in,
sub-projects will be rather monolithic and will release when they're
mature. Is this correct, and if so, will they release?

-Mary



From itamar at itamarst.org  Fri Sep 30 15:10:20 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 30 Sep 2005 17:10:20 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r14614 - Describe log.debug,
	and 'printed' and 'debug' log dict items.
In-Reply-To: <E1ELDGl-0004r7-00@wolfwood>
References: <E1ELDGl-0004r7-00@wolfwood>
Message-ID: <1128114620.7914.35.camel@localhost.localdomain>

On Thu, 2005-09-29 at 23:17 -0600, Andrew Bennetts wrote:
> Author: spiv
> Date: Thu Sep 29 23:17:15 2005
> New Revision: 14614
> 
> Modified:
>    trunk/doc/core/howto/logging.xhtml
> Log:
> Describe log.debug, and 'printed' and 'debug' log dict items.

log.debug should die, I think. So it probably shouldn't be documented :)




