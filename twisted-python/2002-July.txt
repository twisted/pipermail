From jason at asbahr.com  Mon Jul  1 14:12:30 2002
From: jason at asbahr.com (Jason Asbahr)
Date: Mon, 1 Jul 2002 13:12:30 -0500
Subject: [Twisted-Python] Viridian Note 00319: Grand Challenges
Message-ID: <1B95F8C4-8D1E-11D6-AD08-000393753460@asbahr.com>

From: Bruce Sterling <bruces at well.com>
Date: Fri Jun 28, 2002  01:28:04 PM US/Central
Subject: Viridian Note 00319: Grand Challenges

Key concepts: computer science, computer research,
grand challenges, ubiqitous computation, genetic
algorithms, corruption, spam, Internet, civil society

Attention Conservation Notice: it's not particularly
likely that a loud, angry, impassioned, rambling 6,000-
word speech by the Viridian Pope-Emperor is going to
change the future course of American computer science.
No harm in trying, though!

Links:

The gig.
http://www.cra.org/Activities/challenges/

The Spam Epidemic.
http://www.cluelessmailers.org/spamdemic/mapfullsize.html

Jordan Pollack's evolutionary machine lab.
http://demo.cs.brandeis.edu/

All things ubicomp.
http://homepage1.nifty.com/konomi/shinichi/ubicomp.html



Speech at "CRA Conference on Grand Research Challenges
in Computer Science and Engineering"
Airlie House, Warrenton, Virginia
June 23, 2002

"Without Vision, the People Perish"

     Hi, I'm Bruce Sterling.  I write novels.

    Ladies and gentlemen, I bring unique qualifications to
this computer-science gathering, because unlike the rest
of you, I have the sublime creative freedom of not knowing
what I'm talking about.   Besides, I am the only man in
this house who is wearing a tie.  So I must be keynoting.

     I am a science fiction writer and I am 105 percent
vision thing.  The very idea of the likes of me, at this
august event of yours, blue-skying it with the legendary
likes of Gordon Bell, and Rodney Brooks, and Alan Kay...
And Bob Metcalfe... okay, granted, I can handle Bob
Metcalfe with no problem.

     Imagine the sheer gall, the chutzpah this requires on
my part.  Anyone with common sense and a smaller ego would
quail, but I am up for this grand challenge!  I am totally
with the program.   I am cocking my shotgun and I am going
to give you both barrels.  I just wanted to take a second
to relish the rich literary irony of this situation.
Folks, I am really going to enjoy this.  I am enjoying
this already.

     Okay, so what's the story with this "Grand Challenges"
theme, huh?  How come the computer revolution,  so mighty,
so high-tech, so all-encompassing, is on a quest for new
spark plugs?  Well, I can tell you.   That subject is
within my bailiwick.  The computer industry is my favorite
industry.  She is my heart's darling.   I have been
watching her for a long time, and I'm all used to her
weird little vagaries.

     This is happening because computer science is the only
major branch of science that is named after a gadget.  And
gadgets get old.  It doesn't matter how lithesome and
charming and sexy they were in their youth.  They get old.
They settle down.  They get domesticated.  They have
mouths to feed and socks to wash.  Machines lose their
aura of the technological sublime.

     The computer is a gizmo, and it's a great gizmo, but
it's not an ultimate gizmo.  Computer science has been the
slave of metaphysics ever since Alan Turing invented the
Turing Test, but a computer is not a metaphysical entity.
It's not free of objective reality.  Its bits are bits of
atoms.  The only ultimate gizmo is a clock.  The clock
never stops ticking.  The clock has been ticking for the
computer for quite a while.

      It's not just that the pace of basic innovation has
slowed in your field, although it  has.  It's not just
that computers have lost the lipstick of their geek gadget
romance, although they have.   That which was accomplished
in the 1980s and 1990s is under attack.  There is a
backlash.

       This ought to be obvious to anybody who uses the
Internet.  All you need to do is examine your email.
Where is Al Gore's idealistic, civilized Information
Superhighway?   It's a red-light district.  A crooked flea
market.   A nest of spies.  An infowar battlefield.  That
is the state of cyberspace 2002.  There are fire sales on
every block.  It has anything but grandeur.   It's
decadent and sinister.

       I've had the same email address for 13 years, and
I'm not budging.  That's where I staked my little claim on
the electronic frontier, and by gum, I remember the Alamo
and I ain't a-goin' to go.   Therefore, my email in 2002
is full of 419 fraudsters from Nigeria.  And unsolicited
porn ads.  And a galaxy of farfetched medical scams from
malignant, unlicensed quacks peddling Viagra and growth
hormone.  With unreadable, unicode, collateral bomb-damage
from the gigantic spam mills in China, Korea, Thailand and
Taiwan.

      Let me put this to you straight: cyberspace has
become a slum.   It's a diseased slum, festering with
Microsoft Outlook viruses.  The viruses turn people into
unwilling, unwitting agents of corruption and destruction.
If you dare to use Microsoft's web products,  which are so
easily and cruelly sabotaged, then you run a gruesome,
unconscionable risk of doing horrible virus damage to your
best friends and your closest collaborators.  You can give
AIDs or herpes to the people who choose to have sex with
you, but you can give Klez.E to people you don't even
know.  That is a pretty far cry from the antiseptic
Euclidean vistas of virtual reality.  Cyberspace in 2002
is a high-tech low-life slum straight out of William
Gibson's NEUROMANCER.  That's a great book, but the people
who have to live in that book are pretty damn far from
happy.

      If you could find all these busy people who are
ruining the Internet for us, all these swindlers and
vandals and porn-whores and stock kiters and so forth, and
you could get them to surround this beautiful little gated
community of ours here, man, would they look scary.
You'd never physically choose to hang out with the likes
of these malefactors, but the Net ships 'em right into
your office or bedroom, rain or shine, 60-60-24-7-365.
So, you know, where is the civility?  Where is the law and
order?   Where is the government?  There ain't any.
Spies, that's what we've got instead of any legitimate
government.  Man oh man, there are a lot of spies on the
Internet.   More every day.   The place is crawling with
'em.

     Consider last week's British Internet scandal.  The
British government declares, "Well, we're going to store
everybody's websurfing records and their email, so if any
government official wants to spy on what you're doing,
they can make that happen pronto!"  What a grand vision,
eh?  Wonderfully comprehensive: Orwell would blush.

      So the British press and citizenry are like, "What?
You're storing *everything* I do on the Net, and you want
to filter it and mine it and show it to *anybody*?   Oh my
God, doesn't that contravene the Helsinki Declaration, and
the UN declaration of human rights, and fifteen leventy-
dozen European privacy statutes, and even the Magna
Carta?"  But the British government and their happy spies
say, "Aw come on!  It's just the Internet!"   They expect
everyone to accept that, because really, could the
standards there be any lower?  How could *spies* make it
worse?  Spies are as happy as a pig in slop!

      People think I make this stuff up.  And it *is*  like
science fiction.   Because it's all about "the
technological sublime."  It's all about the sense of
wonder, and its limits as a political and industrial
policy.   The Vision Thing.  You are supposed to have a
vision thing, even if you are one of our President Bushes.
Because without vision, the people perish. Without vision,
the means always dominate the ends.  Without vision, the
least little shock to the system is an existential crisis
of confidence.

      A "sublime" thing inspires awe and wonder.  It's
fantastic, amazing, and astounding.  It has grandeur, it
ruptures the everyday.  The sublime is a liberating
spectacle that lifts the human spirit to the plateaus of
high imagination.  Science fiction dotes on this practice.
You can go back to the historical roots of science
fiction, and you can see science fiction methodically
using the technological sublime as a kind of all-purpose
cleanser.   It's rooting out the sewers of a stale
civilization by making extravagant promises of better
things to come.   Railroads, photography,  aviation, giant
dams, rural electrification (I know that sounds corny to
us, but the Soviets used to be very big on that),  atomic
power and atomic weapons, space flight, lysergic acid,
television, computers, virtual reality, and the
Information Superhighway.   All grist for the mill, folks.
The clock never stops ticking.

      The true grandeur of technology is not to be found in
any actual technologies.  It's AM/FM, the severe
difference between Actual Machines, AM, and Fantastic
Magic, FM.  A grand challenge is a grand challenge because
it's not an actual machine but a sublime concept, a goal,
an aspiration.  Once it's a machine, it's no longer a
challenge, it is hardware.  Science-fiction is crammed
with imaginary technologies:  time machines,
interplanetary starships and human-like robots.   They
stay sublime, they don't get stale.  Because they're never
made real.

      Due to human nature, familiarity breeds contempt,
especially for technology.   Technologies that are
integrated into the fabric of everyday life can no  longer
be perceived as "technology."   No matter how grand and
elaborate and complex they may be.  My teenage daughter
has a Pentium III running Windows 95.  She knows it's a
piece of junk.   Because it is.  It's stale and old.  It
doesn't matter how much fantastic press it got in 1995.

       Many technologies of profound cultural importance,
such as immunization, plumbing, recycling and the birth
control pill, never become sublime.  They are high
technology without the high.  The height within high
technology has very little to do with the scientific
principles involved or any inherent difficulties of the
engineering.  The height is entirely a social judgement.
It has distinctly metaphysical overtones.  Science fiction
is one of the arenas in which these judgements are cast,
in which some forms of technological advance are valorized
as marvelous and worthy of mass attention, while others
remain the obscure work of specialists or even die off
entirely.  And the clock never stops ticking, especially
for science fiction.  Sublimity is as thin as lipstick, it
wears off at a kiss.  The sense of wonder has a very short
shelf-life.

       The Space Shuttle  is still  sublime, even though it
is three decades old.  It's clunky, and it's rusty, and it
has severe software and hardware problems,  and it kills
people, and it has no destination to which to "shuttle".
But the Shuttle is still romantic and futuristic.  Why?
Because it's not familiar.  You can't buy one on eBay or
Amazon.

       We need the technological sublime.  The
technological sublime is a narrative, it's a cultural
story.  It's something we tell ourselves to get out of bed
in the morning.  It has its difficulties and its
shortcomings, but the other narrations are *worse.*  Like
the  narrative of Al Qaeda necromancy, which boldly claims
that history will stand still, and we'll all be holy and
sacred forever, just like in the mythic early times of the
Koran, if only enough of us blow ourselves up.

      I'm not going to overdo it here with my literary
topics, ladies and gentlemen. Osama bin Laden may be a
noted poet, but we American pop authors have some
interesting technical challenges of our own.  Here's a
good one:  how the hell do you write a thriller novel in a
world that has cellphones?  I happen to be writing a
thriller novel right now: in fact, I'm here researching
it, not that you'd ever guess. I'm not really here to
pontificate at you. I'm here to soak up your grand ideas
for use in fiction, because I need them even worse than
you do.

      It's amazing how little technical room is left for
the customary cliches of a thriller novel, in this, our
modern, digitized, networked society.  No more car chases
== because I just use my cellphone and I call the cops in
the next town.  No more gunfights in deserted warehouses
== I just use my cellphone and I call the cops.  No more
trailing the spy to his sinister lair == I just use my
cellphone and I call up the cop's video monitors.

      I'm an author,  but I get it about about gizmos.  I
have to, but I don't mind that much.  I'm eager to get
with the machinery.  I've got a feverish literary need to
step closer to the techno-fire here.  I'm blissfully
yielding to the hands-on imperative.

     So let get right down to some brass virtual tacks
here, shall we?  Let me demo a couple  of my favorite
blue-sky notions out of your field of endeavor.  Nothing
up my sleeves, but I'll pull us a couple of  sci-fi
rabbits from way outside of the box here.  We'll see if
they interbreed.

     Here's my first pitch.  It may be slightly familiar to
those of you who watch Jordan Pollack's lab, because
heaven knows I do.   Jordan Pollack is into genetic
algorithms, he likes to evolve  machines.  He had some
jointed plastic blocks in the lab that are wriggling
around at random.  Their performance is measured, the best
models get rewarded and replicated.  Pretty soon they are
wriggling around on the lab bench with some impressive
ease and fluidity.

     So much for the real world.  It's grand sci-fi vision
time.  Let's imagine this experiment ramped way up to
petaflops and exaflops capacity.   Very high granularity.
Exquisitely accurate simulated physics.  At that level of
computational power  you could go a lot farther than
primitive jointed blocks. I'll propose that you could get
a petaflops computer to grow machine tools.   That's
right.  I mean actual three-dimensional, fully working,
mechanical devices.   They're not made on assembly lines,
they're grown inside computers.  They're virtual, and they
do all their research and development as virtual objects,
and when they get good, then you make them real.

     Yes, I know this notion is farfetched, but I wrote a
science fiction story about this.  It won an award and was
widely anthologized, so hey, that concept is definitely
paying off for me.

     Maybe you start small, by simulating and evolving,
say, some primitive, simple tools, like can-openers and
mousetraps.

      It's pretty easy to scan and input a can-opener or a
mousetrap.  You might seed your artificial physics with
the design of some conventional mousetrap, and see how
they evolve.    But it's yet more interesting to simply
litter the simulated landscape with objects that act like
mice, and attack them with soft, helpless, gelatinous
blobs.   You don't want to pre-judge the phase space of
the problem by making any human decisions about possible
methods of trapping mice.  Get the human out of the loop
entirely, that's the scheme.  Reward any possible
mechanical entity that can grab or mangle a simulated
mouse.

     Let them crossbreed.   Like the mice themselves, I
guess.  Kind of a genetic-algorithm, arms race thing.
Have an overseer program keeping tabs.   Whenever a mouse
gets whacked, a bell goes off.  You  run to the screen,
and you see this hour's brand-new mousekiller doing its
virtual stuff.

     Human beings rush over and stare with eyes like
saucers and == man, they can't believe it!  Nobody would
*ever* have thought that a device like that could ever
catch a mouse == but you know, we got the complete design
specs for it right here in memory!  We just hit 'print'
and this unprecedented mousetrap will be smelted out for
us on the spot!  We'll see how it works in real life!
Maybe we can put our logo on it and sell a million of them
on eBay!  Ralph Waldo Emerson, stand back!  We *grew* a
better mousetrap!  The world's beating a path to our door!
Call the reporters!  Put it on the website!

     Once we've got that part of the grand challenge
down... and hey, I'm not claiming it's easy ==  we want to
extend the process to the big stuff.   Heavy iron. For
instance, internal combustion engines.

       We go over to Bill Ford's River Rouge plant.  Bill
Ford is a grandfather himself by now, but you know, Bill
Ford is still a visionary.  And we tell him: Bill, Mr.
Ford, my good man, let's put a big piece of Detroit iron
in this computer here.  That's right, Bill, here in this
titanium laptop.  We're running Linux in this baby and not
only is it freeware,  we actually *grew* all the code in
this laptop.  So there.  You can trust us with your
industry and your revenue stream, Bill, we're computer
scientists, we know what we're doing.   You just stick the
manufacturing specs for the latest Ford engine in here,
and we start systematically disturbing its components in
random ways.  We'll see which configuration delivers the
most horsepower for the least fuel consumption.

     Ladies and gentlemen, I know that simulating an entire
automobile engine at very low granularity would be a
rather difficult task.  But once you've done that, you
ought to be able to subject this virtual engine to all
kinds of unprecedented indignities.  You can explore huge
regions of the possible design space that would never
occur to any merely intelligent human being.  If evolution
can bring us pterodactyls and coral reefs, why can't it
make us a car?

      Or for you DARPA types:  what happens when you
crossbreed a Predator aircraft with an Israeli Bulldog
drone?  Of course, billions of these bastardized spy
aircraft will be total junk, they won't fly at all and
can't communicate their data from sensor-to-shooter, but
who cares?  Computers are great at sorting.   An exaflops
machine just keeps remorselessly grinding out new models,
like monkeys typing Shakespeare.   You never see the
billions and trillions of failed mutants.  You'll only see
the lottery winners.

     Let's go just a little further with the concept, shall
we? One more dainty step down the garden path.  Suppose
you simulate the human body.   Human bodies usually have
pretty good on-site system administrators, but just how
well have their capacities really been exploited?   It's
pretty amazing how long it took people to devise the
Australian crawl in swimming.    There may be aspects of
human body movement that never occur to us == because we
live inside human bodies.  We lack the proper objectivity,
that's the problem.   What we need is a kind of New
Economy, new business model breakthrough for moving our
own bodies.

      How many undiscovered judo throws are there, for
instance?   It's all corny, mystical Eastern handicraft,
judo, and karate, and yoga, and such; we never digitized
all that, we never worked it out methodically as a problem
in physics.   Imagine a soldier trained in forms of hand-
to-hand combat that had been discovered in computer
searches of the entire phase space of the physical
mechanics of combat.   He might perform weird but deadly
movements that are utterly counterintuitive.  He's simply
stun the opponent through sheer disbelief. When he got
wound-up, it would look like outtakes from THE MATRIX.

     Ladies and gentlemen, yes,  I know that THE MATRIX is
a sci-fi movie.  In my game, you get the good stuff where
you find it, okay?  I don't have to name-check sci-fi
movies up here.  I could have stolen you something nice
and exciting from the many bright and accomplished people
at Microsoft Research and Development.   I pay attention
to them, too.  I know they're into stuff like a Sensory
Pocket PC that that detects touch, tilt and motion; and
Chinese text-to-speech software that probably detects
Chinese piracy in real-time.   So I tried that.  I Googled
it.  I surfed over to the Microsoft Research "Archived
Headlines", but since they are a modern computer company
instead of a big-budget science fiction movie, this is
what I got off their web page:


     [Microsoft][SQL Server Driver] Invalid object name
'features'.
      Drivers error '80040e37'

      So, back to the science fiction.  Now I'll tell you
what's really got my attention lately, the stuff in your
field that I consider really groovy and with-it and hip.
Ubicomp.  Oh yeah.  I know it's got a million names.  All
kinds of jargon.  Pervasive computing.  Wearable
computers.  Intelligent environment. Wireless internet.
Peripheral computing. Self-configuring, adaptively
coordinated Embedded Nets.  Things That Think.  Locator
Tags.  JINI.  Wearware. Personal Area Networking.  And so
forth.  This kind of disruption in my beloved English
language is like the rumblings of a tectonic fault.  The
signs are very good that something large, expensive and
important will tear loose there.

    I personally prefer the word "ubicomp" because it
sounds so cheap.   Ubicomp:  that sounds like you go down
to the hardware store and buy a few gallons.  You don't
have to genuflect to it, but it's still a grand challenge.
Because ubicomp is truly a profound  idea.  It has
grandeur, and better yet, it's not metaphysical.  You
don't have to handwave with any big  verbal catch-all
terms like "artificial intelligence".  Or "evolution."  Or
"nano-" anything.  Or "virtual" anything.  And that's
*good.*

      Ubicomp is about physicality.  So ubicomp's got what
my friend and colleague Judith Berman likes to call an
"empirical referent."  When you've got an empirical
referent, you can't just make it all up and sell stock in
it.  You have to demo or die.  You're got an anchor point
in consensus reality.  This is, of course, the very
opposite of what Judith Berman and I try to achieve when
we are writing science fiction, but that's why we're not
in your industry.

    Suppose that ubicomp really took off.  What would that
mean, how would that feel?   Well, the first suggested
uses for ubicomp are pretty primitive: because the chips
are too big and they need a lot of power.  A refrigerator
is always plugged into the wall.  So maybe my ubicomp
refrigerator reads the bar-codes on all the groceries that
enter and leave it.  It answers my cellphone when I call
it from the grocery, and it gets me up to speed how old
the yogurt is.

     Cars have plenty of onboard power.  So my ubicomp car
gets to become a dangerous, highly distracting, mobile
office on wheels.  It's reading textfiles aloud over its
radio speakers.  It's taking voicemail. It asks for handy
directions from satellites overhead and the local street-
signs.  The tires complain when the tread gets low.  The
gas tank knows all its favorite gas stations in the area.

      These innovations just add a sexy blink and smile to
products that already exist. They aren't grand ubicomp
challenges.  The grand challenge in ubicomp is to reform
the basic, primal relationships between humanity and
things.

     If physical objects misbehaved as badly as modern
computer software does, then human life would become
hellish.  It would be murderous.  This is definitely a
grand challenge, because it is also the kind of nightmare
one reads in the darkest tales from RISKS DIGEST.  "Risks
to the Public in Computers and Related Systems" from the
ACM == I love that publication, I read it faithfully.  The
comic potential alone makes it more than worth my time as
a novelist.

     Well, when *everything* public is a "computer related
system," then there's no limit to the risk.     A single
instant's bad driving can kill you and your family.
Automated kitchens can slice, dice and fry the unwary.  So
those aren't good places to start.

      So what is a good place to start with ubicomp?
Let's talk about express shipping.  Here we have a nice
big camel's nose in the tent for a break-out ubicomp
scenario.  With the modern express package, chip-function
is added to a portable object in a way which is not only
convenient, but a definite competitive advantage.  I can
follow a package via Internet from distant New York right
to the doorstep of my business.

      If I could keep that schedule for all raw materials
that down to the minute, then I could reschedule my
inventory, keep stockpiles low and lean, do just-in-time
assembly, and make a whole lot of money.

     I don't need a "smart" package or an "agent" package.
I don't much want to "talk" to a package. I don't want a
package tugging my sleeve, stalking me, or selfishly
begging for attention and commitment.  If a package really
wants to please me and earn my respect, it needs to tell
me three basic things: What is it? (It's the very thing I
ordered, hopefully).  Where is it? (It's on its way at
location x).  And what condition it is in? (It's
functional, workable, unbroken, good to go).  The shipping
company already needs to know these three things for their
own convenience.  So they might as well tell me, too.  So
I don't have to swallow my ubicomp like castor oil. My
ubicomp arrives in a subtle way, as a kind of value-added
service.

     So the object arrives in my possession with the
ubicomp attached. It's a tracking tag.  When I sign for
that object, I keep the tracking tag.  It's mine now.  Ho
ho ho!

     Let's say that it's something I'm really anxious to
have: it's a highly evolved mousetrap.  The mice in my
house are driving me nuts, because I'm a programmer.  I
eat nothing but take-out Szechuan food, and everything in
my house is fatally disordered.

      Luckily my new, computer-designed mousetrap quickly
and horribly slaughters all my mice.  Not one vermin is
left alive.  That's great service, but now I'm anxious to
get rid of it.   I really don't need a super-mousetrap
attracting attention, if I get lucky and a hot date comes
over to help me play "The Sims."

     Given that I'm a congenital slob, of course the mice
soon return.  But by then, I've already forgotten my
mousetrap.   Out of sight, out of mind.  I paid a lot of
money for it, but I already forgot where I put it.

     But suppose that my mousetrap still has that shipping
chip.  That means that the mousetrap answers when called.
I just look up its location on my home tracking network.
The mousetrap is still responding to my three basic
questions: (1) it's a mousetrap, (2) it's in the northeast
corner of the attic, and (3) it still works fine!  Those
mice are in peril of their lives!

     Having benefitted once or twice by this, I take the
logical next step.  I tag everything that I already own,
lawnmowers, garden rakes, tennis shoes, carkeys, remote
control, my eyeglasses, the works.  Now I have a ubicomp
menagerie.  I even tag the mice.  After all, if I know
where the mice are at all times, then I don't have to kill
them.   I just haul the mice out of the walls and I
sterilize them.  Then the mice become a kind of tame
garbage disposal system.

    Other huge benefits ensue.  I no longer need to sweat
and struggle to put my possessions into order.  My things
can never get lost or misplaced. They can't even be stolen
from me, because the ubicomp tags are too small to see,
and any thief just becomes a kind of large mouse to be
tracked down by bored cops and annihilated.

      Ladies and gentlemen, I am a ubicomp groupie.  I
regard ubicomp as a really nifty, high-concept scheme.  If
it were just a matter of intellectual sexiness, sci-fi
appeal, and technical brio, man, we could breeze for this
technology.  We'd be rolling out the old IPOs, and getting
cover stories in WIRED magazine, and  Dell would be
underpricing us, and hoo boy, the sky's the limit.

      But that's not the way your industry works these
days.  Because people, your industry is showing its age.
And it has pulled that old Grand Challenge hat trick a few
times too many.

    Okay, check this out. Here is a clear precursor to
ubicomp, poking its head above the trench here, getting
ready to charge the no-man's-land.  Ultra-wideband.  Wi-
fi.  Airport.  802dot11.  802 dot 11 b and g. AirHead.
Nokia Rooftop. Mesh Network SkyPilot I-Burst base-station
smart cells.   Ladies and gentlemen, we are having a
classic, distributed, heavily networked, spontaneous,
logarithmic orders of magnitude, early-Internet style,
popular eruption here.

     This is the computer community at its anarchic,
inventive finest, this ultra-wideband scheme.  Only this
time around, the clock has been ticking.  The Digital
Revolution has a track record, and it's not entirely
pretty.  The Non-digital Counter-revolution really gets it
about the menace that a disruptive innovation like this
represents to the status quo.   They don't fight fair,
because, frankly, neither do computer geeks.  Fairness was
never an issue here.  Because "fairness" is a political
word, it's not a technical word.  There's no such thing as
"technical fairness."

      But there are still huge, severe issues of power and
access and money.   So, the many frightened opponents of
ultrawideband are not sitting still like the wallflowers
at the sock hop.  On the contrary, they are going for the
throat of this young thing.  They are going to wallop that
little genie on the back of the head with a blackjack and
stuff it right back in the bottle.  Check this out:

     The U.S. Federal Communications Commission approves
the technology for limited commercial use in February.
But in come some heavy operators: all the major wireless
carriers, the Federal Aviation Administration, the U.S.
Department of Defense, satellite radio companies, and the
entire global positioning system community.   They want to
strangle ultra-wideband in its crib == to kill it while
it's still stuck in the standards.

     Okay, just like the Internet, ultra-wideband is
something used for decades by the military.  It's spooky
stuff.  It is used to communicate wirelessly without being
detected by opposition forces.  All of a sudden the
Silicon Valley crowd gets it about the raw potential.  Not
the "commercial" potential, really, because there doesn't
seem to be a business app for it == but, you know, the
good old-fashioned *potential* potential.  Build it and
they will come, right?

      Ultra-wideband is  low-cost, low-power, high-speed,
and best of all, it is the number-one alternative to a
whole crowd of normal-wideband,  stocks-on-fire, money-
losing technologies run by guys like Gary Winnick of
Global Crossing, and Bernie Ebbers of Worldcom, and the
Rigas family of Adelphia Communications.

     So, ultra-wideband is a grand challenge with a lot of
deadly enemies.  Experienced enemies who are sick of being
burned by disruptive new technologies.   Out comes the
Fear Uncertainty and Doubt.  Nine hundred companies file
concerns with the FCC. The GPS will fritz, they say;
airplanes will fall out of the sky.  This is cynical
baloney.  Everybody knows that, but evil stuff like that
has to be said; because these are classic not-in-my-back-
yard tactics.  Cynical, tooth-gritting tactics that people
use when their backs are against the wall.

     This is the sort of civil-disobedience fervor that we
see from anti-genetics campaigners and anti-nuclear
activists.  Except that instead of being hippie zealots,
it's guys the likes of ABC Disney and the music recording
industry.   Wi-Fi isn't Al Qaeda, they're not going to
knock down any airplanes.  But this is common or garden
competitive practice for your industry these days.
Obstructive incumbents. Monopolization.  Vicious
infighting.  Phony-baloney regulatory obstacles.

     Computation doesn't lack grand ideas.  There's nothing
gone wrong with Moore's Law.  People in Nature magazine
this week are making transistors out of single atoms!
But it doesn't much matter how pretty these ideas are,
because your industry has been debased.   The heavy
players in your industry gave up expecting any justice
from the Justice Department, or any civility from civil
society.

     They are having a civil war, where guys who own the
operating system and guys who own the intellectual
property go for each other like Lebanese militia factions.
It is war to the knife inside the box.  In the eyes of the
public, your captains of industry have no honor.  They are
either fatcat swindling behemoths ruthlessly trampling the
public good, or else they are self-appointed digital fire
ants giving Mickey Mouse the death of a thousand bites.
This is not a pretty sight.

     Your best friends won't tell you == but I'm a science
fiction writer, and most of you guys are academics or in
government, so I'll tell you.   The computer industry is
full of smart geeks who never took out their garbage. They
were so busy that they forgot about elementary business
hygiene.  They smell.  They are becoming repulsive.

     Now, computation is my favorite little industry.  But
you know, if you never take out your garbage, and the
clock keeps ticking, then you've got vermin.   It rots
from the head down, the computer industry.   The moguls in
computing aren't knights in shining armor, these are some
of the meanest robber barons anybody has ever seen.  These
guys are like ninja assassins armed with rusty stilettos.
They are stealing each other's market oxygen.  They are
stabbing each other's babies.  They went straight from
Internet anarchy to feudalist monopoly domination.  They
went straight from the barbarism of the garage startup to
the decadence of bribing the government, suborning
accountants, and paying themselves with stock options that
aren't on the company books.  And oh my goodness did the
chickens come home and start roosting.

     They never clean anything up.  They just dump the last
box and start over.  The Internet stinks right now because
we are getting the Internet we deserve.

    Ladies and gentlemen, it doesn't give me any pleasure
to tell you these things.  They are painful things, and
they are ugly things, and they are shameful and demeaning
things, things unworthy of a healthy industry, things
unworthy of a functional government, things unworthy of a
free people.  But I'm telling you the truth, and you know
it.  You know it *better* than I know it.

      Okay == to be painfully, totally honest == maybe it
*does* gives me a little pleasure to tell you these
things.  But to have a garbage problem is not the end of
the world.  If you're a lazy hacker slob who lives on
take-out Chinese and Cheetos, you can reform.  I've seen
it done.  You grow up, that's the secret.  You get older,
you take responsibility, you face up to it.

     Arthur C. Clarke, a great science fiction writer, made
up an interesting aphorism once.  "Any technology that is
sufficiently advanced is indistinguishable from magic."
But that doesn't mean that any technology ever *is* magic
== just because the rubes up in the gallery  can't tell
the difference.  You want to see an industry with a
serious garbage problem, check out the *nuclear* industry.
The computer industry is still young.  It's not as young
as it thinks it is, but at least it's still kind of
imaginative and dreamy, it hasn't become a byword for
warfare, radiological dirty-bombing and permanent
contamination.

     The truth is that ALL technologies have garbage.
Until they can pick up after themselves, they are
immature.   Any garbage that is sufficiently advanced is
also indistinguishable from magic.  It may look magic, but
it's still garbage.

     Ladies and gentlemen, although I've been harsh with
you, I am bringing you a message of hope and aspiration.
What if it's *smart* garbage?   When ubicomp become
garbage (as all gizmos and gadgets are inherently likely
to do) it can be smart garbage!  It's garbage that knows
that it's garbage.   It's garbage that can identify itself
to the junk recycler.  It doesn't go out of sight, out of
mind, where it's allowed to fester like a leftover
computer virus.  Without vision, the people perish; but
*with* some vision, what the heck, let's live it up!
The gizmos fold themselves right back into the production
stream.  They don't spew toxins or waste, because even the
trash is computational.  We've got a gizmo that is smart
enough to make its peace with the clock.  It truly got
ahead of its time.

     I see by my digital wristwatch here that time stops
for no man, and I am out of time too.  That's all I have
to tell you tonight.  Thanks for entertaining my
speculations. I hope you have a great, productive
conference.

O=c=O O=c=O O=c=O O=c=O O=c=O
YES, I REALLY ENJOYED THAT
O=c=O O=c=O O=c=O O=c=O O=c=O

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/enriched
Size: 37770 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020701/74cdf310/attachment.bin 

From bruce at cubik.org  Tue Jul  2 09:45:24 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 02 Jul 2002 07:45:24 -0600
Subject: [Twisted-Python] documentation todo?
Message-ID: <3D21AE74.6060106@cubik.org>

Hey all,

It'd help (at least for me) to have a good starting list of things that 
are ready to be documented in Twisted, but that are not yet documented.

 From what I've seen this might be a good start:

    * Logging support.
    * Reactors
    * Using the GUI integration reactors
    * PB (breaking this out into a set of smaller, more manageable
      topics would be good, but I don't know enough about it yet to
      do so)
    * The various protocol support things like using FTP, telnet,
      etc.

What else would any of you put on that list (or remove/modify)?

Thanks!

  - Bruce




From ranty-bulk at ranty.ddts.net  Thu Jul  4 11:29:04 2002
From: ranty-bulk at ranty.ddts.net (Manuel Estrada Sainz)
Date: Thu, 4 Jul 2002 17:29:04 +0200
Subject: [Twisted-Python] [PATCH] to make twisted more "child process friendly"
In-Reply-To: <20020621141835.GA23753@ranty.ddts.net>
References: <20020621141835.GA23753@ranty.ddts.net>
Message-ID: <20020704152904.GA25935@ranty.ddts.net>

On Fri, Jun 21, 2002 at 04:18:35PM +0200, Manuel Estrada Sainz wrote:
>  Hello,
> 
>  Working on apt-proxy v2 I got stuck trying to get the status of a
>  subprocess:
> 
>  internet/default.py:76
> 	signal.signal(signal.SIGCHLD, process.reapProcess)
> 	
> 	process.reapProcess will be called for every child that exists,
> 	which makes imposible to anyone to get the status. And actually
> 	makes useless calling 'reapProcess' from
> 	Process.maybeCallProcessEnded
> 
>  The patch allows objects to be registered to get the termination status
>  of certain processes and changes process.Process to use it.

 That patch has a problem, if you use registerReapProccessHandler but
 the process finished before you actually called
 registerReapProccessHandler you will wait for ever on a dead child.

 The attached patch makes two variations:

 - reapProcess only takes the status of registered pid's, the rest are
   left alone.
 - registerReapProccessHandler checks if the child already exited and
   if so directly calls the callback.

 This also has the side efect of being more friendly to standard python
 popen, which will again be able to return the status on close().

 Thanks for a great job,
 
 	ranty

 PS: Twisted rocks :)

-- 
--- Manuel Estrada Sainz <ranty at debian.org>
                         <ranty at bigfoot.com>
			 <ranty at users.sourceforge.net>
------------------------ <manuel.estrada at hispalinux.es> -------------------
God grant us the serenity to accept the things we cannot change, courage to
change the things we can, and wisdom to know the difference.
-------------- next part --------------
? diff.diff
? diff.diff2
Index: process.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/process.py,v
retrieving revision 1.16
diff -u -r1.16 process.py
--- process.py	26 Jun 2002 06:47:50 -0000	1.16
+++ process.py	4 Jul 2002 15:17:07 -0000
@@ -40,6 +40,7 @@
 import abstract, main
 from main import CONNECTION_LOST, CONNECTION_DONE
 
+reapProcessHandlers = {}
 def reapProcess(*args):
     """Reap as many processes as possible (without blocking) via waitpid.
 
@@ -52,10 +53,32 @@
     UNIX has no way to be really sure that your process is going to
     go away w/o blocking.  I don't want to block.)
     """
+    for pid in reapProcessHandlers.keys():
+        try:
+            pid, status = os.waitpid(pid,os.WNOHANG)
+        except:
+            pid = None
+        if pid:
+            reapProcessHandlers[pid].processEnded(status)
+            del reapProcessHandlers[pid]
+
+def registerReapProccessHandler(pid, process):
+    if reapProcessHandlers.has_key(pid):
+        raise RuntimeError
     try:
-        os.waitpid(0,os.WNOHANG)
+        aux_pid, status = os.waitpid(pid,os.WNOHANG)
     except:
-        pass
+        aux_pid = None
+    if aux_pid:
+        process.processEnded(status)
+    else:
+        reapProcessHandlers[pid] = process
+
+def unregisterReapProccessHandler(pid, process):
+    if not (reapProcessHandlers.has_key(pid)
+            and reapProcessHandlers[pid] == process):
+        raise RuntimeError
+    del reapProcessHandlers[pid]
 
 class ProcessWriter(abstract.FileDescriptor, styles.Ephemeral):
     """(Internal) Helper class to write to Process's stdin.
@@ -184,8 +207,8 @@
         stdout_read, stdout_write = os.pipe()
         stderr_read, stderr_write = os.pipe()
         stdin_read,  stdin_write  = os.pipe()
-        pid = os.fork()
-        if pid == 0: # pid is 0 in the child process
+        self.pid = os.fork()
+        if self.pid == 0: # pid is 0 in the child process
             # stop debugging, if I am!  I don't care anymore!
             sys.settrace(None)
             # Destroy my stdin / stdout / stderr (in that order)
@@ -246,6 +269,7 @@
             self.proto.makeConnection(self)
         except:
             log.deferr()
+        registerReapProccessHandler(self.pid, self)
 
     def closeStdin(self):
         """Call this to close standard input on this process.
@@ -301,17 +325,23 @@
     lostErrorConnection = 0
     lostOutConnection = 0
     lostInConnection = 0
+    lostProcess = 0
 
     def maybeCallProcessEnded(self):
         if (self.lostErrorConnection and
             self.lostOutConnection and
-            self.lostInConnection):
+            self.lostInConnection and
+            self.lostProcess):
             try:
                 self.proto.processEnded()
             except:
                 log.deferr()
-            reapProcess()
     
+    def processEnded(self, status):
+        self.status = status
+        self.lostProcess = 1
+        self.maybeCallProcessEnded()
+        
     def inConnectionLost(self):
         del self.writer
         self.lostInConnection = 1

From glyph at twistedmatrix.com  Thu Jul  4 13:24:02 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 04 Jul 2002 12:24:02 -0500 (CDT)
Subject: [Twisted-Python] [PATCH] to make twisted more "child process
 friendly"
In-Reply-To: <20020704152904.GA25935@ranty.ddts.net>
References: <20020621141835.GA23753@ranty.ddts.net>
	<20020704152904.GA25935@ranty.ddts.net>
Message-ID: <20020704.122402.74747063.glyph@twistedmatrix.com>

From: Manuel Estrada Sainz <ranty-bulk at ranty.ddts.net>
Subject: Re: [Twisted-Python] [PATCH] to make twisted more "child process friendly"
Date: Thu, 4 Jul 2002 17:29:04 +0200

>  That patch has a problem, if you use registerReapProccessHandler but
>  the process finished before you actually called
>  registerReapProccessHandler you will wait for ever on a dead child.

Yeah, stuff like that's the reason for the shotgun approach that was in place
before.

>  The attached patch makes two variations:

Thanks for the update!  I'll look at it closely and apply it soon.

>  PS: Twisted rocks :)

Indeed it does :-)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020704/7d9ef342/attachment.pgp 

From twisted at itamarst.org  Fri Jul  5 16:54:03 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 05 Jul 2002 22:54:03 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] Add callMultipleInThread and deferToThread
 to the reactor interface.
References: <E17QYDF-0007Rq-00@zaibach.twistedmatrix.com>
Message-ID: <3D26076A.50003@itamarst.org>

bruce CVS wrote:
> Modified files:
> Twisted/twisted/internet/base.py 1.9 1.10
> Twisted/twisted/internet/interfaces.py 1.17 1.18
> 
> Log message:
> Add callMultipleInThread and deferToThread to the reactor interface.

We originally did *not* add this since they are utility methods and the 
reactor interface should be minimal. This should be removed and reverted 
to the way it was before (unless glyph disagrees?).





From twisted at itamarst.org  Fri Jul  5 16:54:46 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 05 Jul 2002 22:54:46 +0200
Subject: [Twisted-Python] documentation todo?
References: <3D21AE74.6060106@cubik.org>
Message-ID: <3D260796.8090708@itamarst.org>

Bruce Mitchener wrote:

> It'd help (at least for me) to have a good starting list of things that 
> are ready to be documented in Twisted, but that are not yet documented.
> 
>  From what I've seen this might be a good start:

That's a very a good list - go for it!




From bruce at cubik.org  Fri Jul  5 16:21:40 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Fri, 05 Jul 2002 14:21:40 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Add callMultipleInThread
 and deferToThread to the reactor interface.
References: <E17QYDF-0007Rq-00@zaibach.twistedmatrix.com> <3D26076A.50003@itamarst.org>
Message-ID: <3D25FFD4.6080204@cubik.org>

Itamar Shtull-Trauring wrote:
> bruce CVS wrote:
> 
>> Modified files:
>> Twisted/twisted/internet/base.py 1.9 1.10
>> Twisted/twisted/internet/interfaces.py 1.17 1.18
>>
>> Log message:
>> Add callMultipleInThread and deferToThread to the reactor interface.
> 
> We originally did *not* add this since they are utility methods and the 
> reactor interface should be minimal. This should be removed and reverted 
> to the way it was before (unless glyph disagrees?).

Glyph had agreed with the changes prior to my committing them (on IRC), 
but if he disagrees, I'm happy to revert them, although I do think they 
should be exposed in this way.

  - Bruce




From glyph at twistedmatrix.com  Fri Jul  5 18:34:25 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 05 Jul 2002 17:34:25 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Add
 callMultipleInThread and deferToThread to the reactor interface.
In-Reply-To: <3D26076A.50003@itamarst.org>
References: <E17QYDF-0007Rq-00@zaibach.twistedmatrix.com>
	<3D26076A.50003@itamarst.org>
Message-ID: <20020705.173425.82360176.glyph@twistedmatrix.com>

From: Itamar Shtull-Trauring <twisted at itamarst.org>
Subject: [Twisted-Python] Re: [Twisted-commits] Add callMultipleInThread and deferToThread to the reactor interface.
Date: Fri, 05 Jul 2002 22:54:03 +0200

> bruce CVS wrote:
> > Modified files:
> > Twisted/twisted/internet/base.py 1.9 1.10
> > Twisted/twisted/internet/interfaces.py 1.17 1.18
> > 
> > Log message:
> > Add callMultipleInThread and deferToThread to the reactor interface.
> 
> We originally did *not* add this since they are utility methods and the 
> reactor interface should be minimal. This should be removed and reverted 
> to the way it was before (unless glyph disagrees?).

Argh!  I was distracted and did not listen to Bruce's question properly.  Yes.
This should be reverted.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020705/b31321ad/attachment.pgp 

From bruce at cubik.org  Fri Jul  5 18:49:50 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Fri, 05 Jul 2002 16:49:50 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Add callMultipleInThread
 and deferToThread to the reactor interface.
References: <E17QYDF-0007Rq-00@zaibach.twistedmatrix.com>	<3D26076A.50003@itamarst.org> <20020705.173425.82360176.glyph@twistedmatrix.com>
Message-ID: <3D26228E.5050504@cubik.org>

Glyph Lefkowitz wrote:
> From: Itamar Shtull-Trauring <twisted at itamarst.org>
>>We originally did *not* add this since they are utility methods and the 
>>reactor interface should be minimal. This should be removed and reverted 
>>to the way it was before (unless glyph disagrees?).
> 
> Argh!  I was distracted and did not listen to Bruce's question properly.  Yes.
> This should be reverted.

And done.  But I did leave in the docs for the stuff that wasn't 
previously directly mentioned in doc/howto/threading.html.

  - Bruce




From ranty-bulk at ranty.ddts.net  Sat Jul  6 07:49:21 2002
From: ranty-bulk at ranty.ddts.net (Manuel Estrada Sainz)
Date: Sat, 6 Jul 2002 13:49:21 +0200
Subject: [Twisted-Python] FTPClient problem on connection failed
Message-ID: <20020706114921.GA26570@ranty.ddts.net>

 Hello,

 I am having a problem with with FTPClient, it doesn't handle
 'connectionFailed' at all.

 So if that happens I just wait on it for ever.

 Thanks

 	ranty

-- 
--- Manuel Estrada Sainz <ranty at debian.org>
                         <ranty at bigfoot.com>
			 <ranty at users.sourceforge.net>
------------------------ <manuel.estrada at hispalinux.es> -------------------
God grant us the serenity to accept the things we cannot change, courage to
change the things we can, and wisdom to know the difference.



From andrew-twisted at puzzling.org  Sat Jul  6 17:07:42 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 7 Jul 2002 07:07:42 +1000
Subject: [Twisted-Python] FTPClient problem on connection failed
In-Reply-To: <20020706114921.GA26570@ranty.ddts.net>
References: <20020706114921.GA26570@ranty.ddts.net>
Message-ID: <20020706210742.GA4849@frobozz.local>

On Sat, Jul 06, 2002 at 01:49:21PM +0200, Manuel Estrada Sainz wrote:
>  Hello,
> 
>  I am having a problem with with FTPClient, it doesn't handle
>  'connectionFailed' at all.
> 
>  So if that happens I just wait on it for ever.

Gah!  Ok, I'll try to fix that (and hopefully one or two other things in
FTPClient) in the next day or two.  Thanks for the bug report.

-Andrew.




From ranty-bulk at ranty.ddts.net  Sat Jul  6 21:03:36 2002
From: ranty-bulk at ranty.ddts.net (Manuel Estrada Sainz)
Date: Sun, 7 Jul 2002 03:03:36 +0200
Subject: [Twisted-Python] internet/tcp.py problem
Message-ID: <20020707010336.GA15121@ranty.ddts.net>

 Hello,

 I am in vacation, and should not be hacking on anything, but some how I
 keep having trouble with twisted :)

 tcp.Client calls self.failIfNotConnected in two ways, via
 reactor.callLater with a timeout and in resolveAddress when it can't
 resolve the address.

 The problem is, that when resolveAddress can't resolve the address, it
 calls self.failIfNotConnected and later when the timeout is reached and
 self.failIfNotConnected called again, the socket is still not
 connected, so my connectionFailed method gets called twice which I
 don't think is right.

 I see two fixes for this:

  - Keep the return value of callLater and cancel it on
    self.failIfNotConnected.
  - Use some flag variable so self.failIfNotConnected knows that it
    already called connectionFailed and it doesn't do it again on the
    timeout.

 Thanks

 	ranty
-- 
--- Manuel Estrada Sainz <ranty at debian.org>
                         <ranty at bigfoot.com>
			 <ranty at users.sourceforge.net>
------------------------ <manuel.estrada at hispalinux.es> -------------------
God grant us the serenity to accept the things we cannot change, courage to
change the things we can, and wisdom to know the difference.



From carmstro at twistedmatrix.com  Sat Jul  6 22:55:57 2002
From: carmstro at twistedmatrix.com (carmstro at twistedmatrix.com)
Date: Sat, 06 Jul 2002 22:55:57 -0400
Subject: [Twisted-Python] test_process
Message-ID: <87u1nc8cw2.fsf@twistedmatrix.com>

I don't know why, but test_process's testStdio is failing for me.

======================================================================
FAIL: twisted.internet.stdio test.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/chris/Projects/Twisted/twisted/test/test_process.py", line 124, in testStdio
    self.assertEquals(p.outF.getvalue(), "hello, worldabc123")
  File "/home/chris/Projects/Twisted/pyunit/unittest.py", line 282, in failUnlessEqual
    raise self.failureException, (msg or '%s != %s' % (repr(first), repr(second)))
AssertionError: '' != 'hello, worldabc123'

I had bruce and exarkun run the tests and they're not failing for them. I added
a line to the code:

        reactor.spawnProcess(p, exe, [exe, "-u", scriptPath], None, None)
        p.transport.write("hello, world")
        p.transport.write("abc")
+        os.system('ps ax')
        p.transport.write("123")
        p.transport.closeStdin()

To see what the current processes were, and got something rather interesting:

 1479 pts/3    S      0:00 /usr/lib/xemacs-21.4.8/i386-debian-linux//gnuserv
 1844 pts/4    S      0:00 python /home/chris/Projects/Twisted/admin/runtests -t
 1845 pts/4    Z      0:00 [ls <defunct>]
 1848 pts/4    Z      0:00 [python <defunct>]
 1849 pts/4    R      0:00 ps ax

Sup with the "defunct"s? 

Any ideas?

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From carmstro at twistedmatrix.com  Sat Jul  6 22:59:13 2002
From: carmstro at twistedmatrix.com (carmstro at twistedmatrix.com)
Date: Sat, 06 Jul 2002 22:59:13 -0400
Subject: [Twisted-Python] twisted.sister
Message-ID: <87r8ig8cqm.fsf@twistedmatrix.com>

Can someone please fix the issues with twisted.sister tests? There's an obvious
bug where the test is passing in the wrong # of arguments, but fixing that just
reveals a host of other failures. I'm releasing 0.19.0rc1 soon, and it'll be
put out regardless of whether or not the fix is in (RCs are cool ;-)).

(This is a re-send -- I accidentally sent this from a non-subscribed account
the first time, so this mail may come twice if glyph approves my first post
without noticing that I re-sent it ;-))

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From twisted at itamarst.org  Sun Jul  7 03:15:30 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 07 Jul 2002 10:15:30 +0300
Subject: [Twisted-Python] internet/tcp.py problem
References: <20020707010336.GA15121@ranty.ddts.net>
Message-ID: <3D27EA92.7090007@itamarst.org>

Manuel Estrada Sainz wrote:

 > tcp.Client calls self.failIfNotConnected in two ways, via reactor.callLater
 > with a timeout and in resolveAddress when it can't resolve the address.

Failure handling in client connections is one of the last backwards
incompatible changes we will be making, and will involve moving the failure 
callback from the protocol and very likely into the factory. We will fix 
this issue at that point.




From skreech at twistedmatrix.com  Tue Jul  2 20:12:22 2002
From: skreech at twistedmatrix.com (Gavin Cooper)
Date: Tue, 02 Jul 2002 19:12:22 -0500
Subject: [Twisted-Python] apache and twisted.web bug
Message-ID: <E17PXks-0000sR-00@zaibach.twistedmatrix.com>

I have Apache version 1.3.26 acting as a reverse proxy
for my network. This is what receives the requests
for www.tmdn.net. Before the Apache exploit deal, I
had everything working fine, with requests for tmdn.net
being forwarded to a twisted.web on another machine.
The previous Apache version I used was something like 1.3.23.
Now however, users get an error message that can be seen
at www.tmdn.net now. Heres what the twistd.log says:

02/07/2002 18:27 [HTTPChannel,28,172.16.10.1] Traceback (most recent call last):
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/internet/default.py", line 347, in doSelect
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     why = getattr(selectable, method)()
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/internet/tcp.py", line 93, in doRead
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     return self.protocol.dataReceived(data)
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/basic.py", line 161, in dataReceived
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.lineReceived(line)
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 684, in lineReceived
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.allHeadersReceived()
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 733, in allHeadersReceived
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.persistent = self.checkPersistence(req, self.__version)
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 759, in checkPersistence
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     request.setHeader('connection', 'close')
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 561, in setHeader
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.headers[string.lower(k)] = v
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1] exceptions.AttributeError: Request instance has no attribute 'headers'

I am using 0.18.0 as seen in debian.

Blargchoo.

Otherwise, I can access the server directly just fine. Only
the upgrade to Apache caused this to happen.

skreech / Gavin



From itamar at itamarst.org  Sun Jul  7 11:36:49 2002
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 07 Jul 2002 18:36:49 +0300
Subject: [Twisted-Python] Re: [Twisted-commits] negative long int support for cBanana
References: <E17RE3a-000075-00@zaibach.twistedmatrix.com>
Message-ID: <3D286011.3050701@itamarst.org>

itamarst CVS wrote:
> Modified files:
> Twisted/twisted/spread/cBanana.c 1.10 1.11
> Twisted/twisted/test/test_banana.py 1.7 1.8
> 
> Log message:
> negative long int support for cBanana

Could someone who knows the Python/C API check my code and make sure I 
didn't screw anything up?






From jon at totient.demon.co.uk  Sun Jul  7 13:45:26 2002
From: jon at totient.demon.co.uk (Jon Dyte)
Date: Sun, 7 Jul 2002 18:45:26 +0100 (BST)
Subject: [Twisted-Python] apache and twisted.web bug
In-Reply-To: skreech@twistedmatrix.com
References: <E17PXks-0000sR-00@zaibach.twistedmatrix.com>
Message-ID: <15656.32310.397700.529283@erdos.totient.com>

I believe this is fixed in CVS.
It looks v.similar to a bug I reported a month back.

Jon

Gavin Cooper wrote :-
> I have Apache version 1.3.26 acting as a reverse proxy
> for my network. This is what receives the requests
> for www.tmdn.net. Before the Apache exploit deal, I
> had everything working fine, with requests for tmdn.net
> being forwarded to a twisted.web on another machine.
> The previous Apache version I used was something like 1.3.23.
> Now however, users get an error message that can be seen
> at www.tmdn.net now. Heres what the twistd.log says:
> 
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1] Traceback (most recent call last):
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/internet/default.py", line 347, in doSelect
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     why = getattr(selectable, method)()
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/internet/tcp.py", line 93, in doRead
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     return self.protocol.dataReceived(data)
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/basic.py", line 161, in dataReceived
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.lineReceived(line)
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 684, in lineReceived
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.allHeadersReceived()
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 733, in allHeadersReceived
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.persistent = self.checkPersistence(req, self.__version)
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 759, in checkPersistence
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     request.setHeader('connection', 'close')
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 561, in setHeader
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.headers[string.lower(k)] = v
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1] exceptions.AttributeError: Request instance has no attribute 'headers'
> 
> I am using 0.18.0 as seen in debian.
> 
> Blargchoo.
> 
> Otherwise, I can access the server directly just fine. Only
> the upgrade to Apache caused this to happen.
> 
> skreech / Gavin
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From andrew-twisted at puzzling.org  Sun Jul  7 18:49:47 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 8 Jul 2002 08:49:47 +1000
Subject: [Twisted-Python] Docs on website
Message-ID: <20020707224947.GA631@frobozz.local>

The "Latest News" section says (among other things):
    "Oh, and did we mention the whole slew of docs ..."

However, none of the links under http://www.twistedmatrix.com/documents/dev
seem to be working for me (404).

-Andrew.




From bruce at cubik.org  Sun Jul  7 18:59:06 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Sun, 07 Jul 2002 16:59:06 -0600
Subject: [Twisted-Python] Docs on website
References: <20020707224947.GA631@frobozz.local>
Message-ID: <3D28C7BA.2070602@cubik.org>

Andrew Bennetts wrote:
> The "Latest News" section says (among other things):
>     "Oh, and did we mention the whole slew of docs ..."
> 
> However, none of the links under http://www.twistedmatrix.com/documents/dev
> seem to be working for me (404).

The raw (.html) forms of the docs are present in /documents/howto/ but 
it looks like admin/generate-domdocs -e None wasn't run ... or something.

  - Bruce




From carmstro at twistedmatrix.com  Sun Jul  7 19:23:31 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 07 Jul 2002 19:23:31 -0400
Subject: [Twisted-Python] Docs on website
In-Reply-To: <20020707224947.GA631@frobozz.local> (Andrew Bennetts's message
 of "Mon, 8 Jul 2002 08:49:47 +1000")
References: <20020707224947.GA631@frobozz.local>
Message-ID: <87k7o7xguk.fsf@twistedmatrix.com>

>>>>> "spiv" == Andrew Bennetts <andrew-twisted at puzzling.org> writes:

    spiv> The "Latest News" section says (among other things): "Oh, and did we
    spiv> mention the whole slew of docs ..."

    spiv> However, none of the links under
    spiv> http://www.twistedmatrix.com/documents/dev seem to be working for me
    spiv> (404).

Sorry. Fixed.
-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From exarkun at meson.dyndns.org  Sun Jul  7 22:51:42 2002
From: exarkun at meson.dyndns.org (Jp Calderone)
Date: Sun, 7 Jul 2002 22:51:42 -0400
Subject: [Twisted-Python] If we could
Message-ID: <20020708025142.GA29132@meson.dyndns.org>

  A short diff attached which I hope we can have applied.  I'd just do it
but I imagine there will be some disagreement.  It's not a code issue so I
won't press the issue if anyone really, deeply, seriously, egregiously,
vehemently, passionately disagrees (and has a rationale).  Hopefully my
reasons for wanting this are obvious.  I can expound if anyone feels the
need.

  Jp

--
 10:44pm up 47 days, 23:29, 6 users, load average: 0.03, 0.05, 0.01
-------------- next part --------------
Index: .cvsignore
===================================================================
RCS file: /cvs/Twisted/.cvsignore,v
retrieving revision 1.2
diff -u -r1.2 .cvsignore
--- .cvsignore	9 Jul 2001 18:12:40 -0000	1.2
+++ .cvsignore	8 Jul 2002 02:44:45 -0000
@@ -2,3 +2,4 @@
 build
 dist
 MANIFEST
+debian
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 237 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020707/96ee3dcd/attachment.pgp 

From glyph at twistedmatrix.com  Mon Jul  8 00:30:41 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 07 Jul 2002 23:30:41 -0500 (CDT)
Subject: [Twisted-Python] If we could
In-Reply-To: <20020708025142.GA29132@meson.dyndns.org>
References: <20020708025142.GA29132@meson.dyndns.org>
Message-ID: <20020707.233041.21955027.glyph@twistedmatrix.com>

From: Jp Calderone <exarkun at meson.dyndns.org>
Subject: [Twisted-Python] If we could
Date: Sun, 7 Jul 2002 22:51:42 -0400

>   A short diff attached which I hope we can have applied.  I'd just do it
> but I imagine there will be some disagreement.  It's not a code issue so I
> won't press the issue if anyone really, deeply, seriously, egregiously,
> vehemently, passionately disagrees (and has a rationale).  Hopefully my
> reasons for wanting this are obvious.  I can expound if anyone feels the
> need.

Uh, if we were going to do that, we should just keep the debian stuff in a
separate repository.  However, right now, it's part of the release tarball, so
I don't think that makes any more sense than ignoring doc/...

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020707/5a452d15/attachment.pgp 

From andrew-twisted at puzzling.org  Mon Jul  8 03:39:10 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 8 Jul 2002 17:39:10 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Contributor agreement first commit.  (don't panic!)
In-Reply-To: <E17RT0u-0004uL-00@zaibach.twistedmatrix.com>
References: <E17RT0u-0004uL-00@zaibach.twistedmatrix.com>
Message-ID: <20020708073910.GA9617@ritsuko.xware.cx>

On Mon, Jul 08, 2002 at 02:32:52AM -0500, glyph CVS wrote:
> 
> ViewCVS links:
> http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/doc/legal/contributor-agreement.html.diff?r1=text&tr1=None&r2=text&tr2=1.1&cvsroot=Twisted

This URL fails -- I think it is due to this being the initial checkin of
this file, so there is no previous version to diff.

The correct URL would seem to be:
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/doc/legal/contributor-agreement.html?rev=1.1&content-type=text/vnd.viewcvs-markup&cvsroot=Twisted

-Andrew.




From bruce at cubik.org  Mon Jul  8 04:56:04 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 08 Jul 2002 02:56:04 -0600
Subject: [Twisted-Python] cBanana diffs
Message-ID: <3D2953A4.5000008@cubik.org>

I've made a couple of local changes to cBanana to look at improving the 
performance of it some.

The diff is available from:
   http://day.cubik.org/~bruce/spread.diff

The change from the malloc/memcpy/free sequence to a realloc should be 
pretty clear.

The remainder of the changes are intended to let us allocate the python 
list objects in the correct size (since we know that) and to then use 
PyList_SET_ITEM() rather than PyList_Append().  In theory, that should 
help, in practice, it didn't much on simple tests.

One thing that was taking a while in simple runs was the handling of 
LONGINT and LONGNEG values (which call back into Python rather than 
using C code).  I've not yet optimized that at all as I don't yet have a 
good enough understanding.

I'll also run this new cBanana.c under valgrind or Purify this week to 
make sure that I didn't introduce any memory leaks.

Comments and suggestions are welcome.

  - Bruce




From twisted at itamarst.org  Mon Jul  8 05:27:53 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 08 Jul 2002 12:27:53 +0300
Subject: [Twisted-Python] cBanana diffs
References: <3D2953A4.5000008@cubik.org>
Message-ID: <3D295B19.6070308@itamarst.org>

Bruce Mitchener wrote:

> I've made a couple of local changes to cBanana to look at improving the 
> performance of it some.

Great! Got any numbers showing the speed difference?

> One thing that was taking a while in simple runs was the handling of 
> LONGINT and LONGNEG values (which call back into Python rather than 
> using C code).  I've not yet optimized that at all as I don't yet have a 
> good enough understanding.

Well, in general it's probably a good idea to avoid using long ints, since 
they will be slow no matter what and support in other languages may be iffy.





From bruce at cubik.org  Mon Jul  8 05:52:31 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 08 Jul 2002 03:52:31 -0600
Subject: [Twisted-Python] cBanana diffs
References: <3D2953A4.5000008@cubik.org> <3D295B19.6070308@itamarst.org>
Message-ID: <3D2960DF.2070401@cubik.org>

Itamar Shtull-Trauring wrote:
> Bruce Mitchener wrote:
> 
>> I've made a couple of local changes to cBanana to look at improving 
>> the performance of it some.
> 
> Great! Got any numbers showing the speed difference?

Nothing reliable.  I was just testing with doc/examples/pbbenchserver.py 
and pbbenchclient.py and looking at how many calls/second were being made.

This week, I'm planning on putting together a quick Banana bench and 
then I'll be able to test it directly and with more predictable loads to 
exercise the parts that I'm changing. :)

That'll let me get reliable and useful numbers and do some targeted 
profiling as well I hope.

Those fixes were just things that I'd noticed when reading through the 
source.

>> One thing that was taking a while in simple runs was the handling of 
>> LONGINT and LONGNEG values (which call back into Python rather than 
>> using C code).  I've not yet optimized that at all as I don't yet have 
>> a good enough understanding.
> 
> Well, in general it's probably a good idea to avoid using long ints, 
> since they will be slow no matter what and support in other languages 
> may be iffy.

Yep.  I was originally unaware of what they were in Python. :)  Still 
learning...

  - Bruce




From carmstro at twistedmatrix.com  Mon Jul  8 09:53:23 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Mon, 8 Jul 2002 08:53:23 -0500
Subject: [Twisted-Python] 0.19.0rc3
Message-ID: <20020708135323.GA22714@twistedmatrix.com>

It's that time again! Twisted 0.19.0rc3 has been made available on
www.twistedmatrix.com. Everybody please check it out and report any bugs
(that aren't already in  Known Issues).

Here's the current list of known issues (from the README file)::
    * Twisted Sister unit tests don't pass, and even cause the runtests
      process to eventually totally freeze.
    * FTP unit tests *still* fail, with an error about "test_ftp.py" not
      being in the file listing.
    * There are other issues with wakeUp on win32 which are causing unit
      tests on win32 to fail/hang.
    * marmalade is broken on python 2.2,
      because of type/class unification issues. Should be an easy fix.

Also, I was notified by an anonymous informant last night that
generate-domdocs isn't running properly on Mac OSX. While this isn't really
important, it'd be nice to have that fixed too. :-)





From sean at ninjaneering.com  Mon Jul  8 12:49:53 2002
From: sean at ninjaneering.com (Sean Riley)
Date: Mon, 8 Jul 2002 11:49:53 -0500
Subject: [Twisted-Python] distributed method calls in twisted.sister
Message-ID: <PGEKIMFOMBFCPBEILDBLMEIICAAA.sean@ninjaneering.com>

background:

twisted.sister is a piece of clustering infrastructure to allow a single
application or simulation to be distributed across multiple servers on
multiple hosts.

twisted.sister has a concept of a "parent" server which acts as a central
locking facility for objects distributed on any number of "sister" servers
in the network.

security in distributed sister servers:

example use case: player1 logged into on one sister server wishes to send a
text message to player2 logged into another - unknown - sister server.

I implemented a "callDistributed" on the sister server which looks like:

def callDistributed(self,
	resourceType,
	resourceName,
	methodName,
	*args,
	**kw):

this goes off to the parent which looks up the sister that has the specified
resource locked, then passes the method call off to that sister to actually
be invoked. all results of course being deferred so the result is passed all
the way back to the originating caller.

so player1 would call:
self.service.callDistributed(
	'avatar',
	'player2',
	'chatMsg',
	'hi there')
and player2 would get the chat message. It currently prepends "remote_" to
the method name on the callee's end.

This appears to be inconsistent with the common twisted notion of knowing
"who" is calling a method for security reasons. Maybe there should be
another type of remote method called "distributed_" which takes the
identifying information of the calling distributed object as the first
arguments:

def distributed_chatMsg(self, resourceType, resourceName, message)

where the resourecType and resourceName identify the distributed resource
that invoked the distributed method call. this distributed_ method would
only ever be invoked by remote objects managed in a twisted.sister network.

I thought about adding the location of the distributed caller object also,
but this information probably isnt required as it is known by the parent who
can route any further communication. the location could also change if an
object migrated between sisters which would invalidate any location
information stored on a sister, so not sending it is a better option.

thoughts?




From glyph at twistedmatrix.com  Mon Jul  8 18:35:13 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 08 Jul 2002 17:35:13 -0500 (CDT)
Subject: [Twisted-Python] distributed method calls in twisted.sister
In-Reply-To: <PGEKIMFOMBFCPBEILDBLMEIICAAA.sean@ninjaneering.com>
References: <PGEKIMFOMBFCPBEILDBLMEIICAAA.sean@ninjaneering.com>
Message-ID: <20020708.173513.66185151.glyph@twistedmatrix.com>

From: "Sean Riley" <sean at ninjaneering.com>
Date: Mon, 8 Jul 2002 11:49:53 -0500

> twisted.sister is a piece of clustering infrastructure to allow a single
> application or simulation to be distributed across multiple servers on
> multiple hosts.

... with unit tests that aren't currently passing ;)

> twisted.sister has a concept of a "parent" server ...

We do need to rename this to the "mother" server sometime soon.

> I implemented a "callDistributed" on the sister server which looks like:
...
> This appears to be inconsistent with the common twisted notion of knowing
> "who" is calling a method for security reasons. Maybe there should be
> another type of remote method called "distributed_" which takes the
> identifying information of the calling distributed object as the first
> arguments:

Hmm.  I agree with the "distributed_" idea, but I'm not so sure about the
identifying information being presented as such.  This seems like a use case
for "shadow" objects; if you're getting a message from another user, your
sister-server must know _something_ about that user.  In this case, it looks OK
to simply present their resource-ID (which should be the same, as far as we
know, as their username).

I can easily imagine adding to this use-case so that each user has a face-icon
associated with them, or some other immediately displayed information.  On IRC
this mirrors the userhost/nickname pair (immediately visible information) and
the userinfo/whois database (key queryable information).  This is a balance
point which has to be easily tunable for an application.

The other problem with this identifying information is that it's not presented
as part of a path.  My initial attempt at shoehorning twisted.sister into the
callPath paradigm was unfortunate :-)... but having an abstract hierarchy where
resources can be mounted/unmounted seems like a good idea to me, still.

I don't know if callPath is necessarily the best way to do that, though.  It
seems that twisted.web's got the best way of handling that so far; a
formalization of what twisted.web.distrib does would probably be best.  (It
would be really, REALLY nice if we could get twisted.sister clustered web
services for free out of that, somehow)

> where the resourecType and resourceName identify the distributed resource
> that invoked the distributed method call. this distributed_ method would
> only ever be invoked by remote objects managed in a twisted.sister network.

Maybe sister_... would be a better naming convention, considering its source?

> I thought about adding the location of the distributed caller object also,
> but this information probably isnt required as it is known by the parent who
> can route any further communication. the location could also change if an
> object migrated between sisters which would invalidate any location
> information stored on a sister, so not sending it is a better option.

Agreed -- routing information has to be handled by the parent.  I take it this
means that messages will also be queued by the parent, in order to avoid losing
them?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020708/f123dc9b/attachment.pgp 

From bruce at cubik.org  Tue Jul  9 03:17:32 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 09 Jul 2002 01:17:32 -0600
Subject: [Twisted-Python] cBanana diffs
References: <3D2953A4.5000008@cubik.org> <3D295B19.6070308@itamarst.org> <3D2960DF.2070401@cubik.org>
Message-ID: <3D2A8E0C.9020200@cubik.org>

Bruce Mitchener wrote:
> Itamar Shtull-Trauring wrote:
>> Bruce Mitchener wrote:
>>> I've made a couple of local changes to cBanana to look at improving 
>>> the performance of it some.
>>
>> Great! Got any numbers showing the speed difference?
> 
> Nothing reliable.  I was just testing with doc/examples/pbbenchserver.py 
> and pbbenchclient.py and looking at how many calls/second were being made.
> 
> This week, I'm planning on putting together a quick Banana bench and 
> then I'll be able to test it directly and with more predictable loads to 
> exercise the parts that I'm changing. :)
> 
> That'll let me get reliable and useful numbers and do some targeted 
> profiling as well I hope.

So, I wrote this crappy program that works to test decoding from banana:

   http://day.cubik.org/~bruce/bananabench.py

10000 iterations of decoding the banana-encoded form of:

   [1, 2, [3, 4], [30.5, 40.2], 5, ["six", "seven", ["eight", 9]], [10], []]

had these results:

Pure Python:  22.56 seconds
CVS cBanana:   1.15 seconds
My cBanana:    0.98 seconds

Now, that data is list heavy, so it is particularly suited to enjoy the 
benefits of my patch.  But, given the sorts of data that I know we pass 
around at work (not in Twisted), our data is typically pretty list 
heavy.  Glyph said that PB stuff is usually pretty list-heavy as well.

So, that looks to be a gain.

I ran it under valgrind and that didn't seem to turn up any leaks.

Cheers,

  - Bruce




From twisted at itamarst.org  Tue Jul  9 08:31:03 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 09 Jul 2002 08:31:03 -0400
Subject: [Twisted-Python] cBanana diffs
References: <3D2953A4.5000008@cubik.org> <3D295B19.6070308@itamarst.org> <3D2960DF.2070401@cubik.org> <3D2A8E0C.9020200@cubik.org>
Message-ID: <3D2AD787.1070706@itamarst.org>

Bruce Mitchener wrote:

> Pure Python:  22.56 seconds
> CVS cBanana:   1.15 seconds
> My cBanana:    0.98 seconds

Cool - check it in then after 0.19.0 is released. And checkin 
bananabench.py into doc/examples/ (although we may need a new folder for 
benchmarking and interop suites instead of examples/).




From twisted at itamarst.org  Tue Jul  9 13:08:02 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 09 Jul 2002 13:08:02 -0400
Subject: [Twisted-Python] Aspect Oriented Programming
Message-ID: <3D2B1872.1070204@itamarst.org>

Luc (lstep) pointed this out:

<http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pythius/pythius/pythius/aop.py?rev=1.36&content-type=text/vnd.viewcvs-markup>




From washort at twistedmatrix.com  Tue Jul  9 14:03:29 2002
From: washort at twistedmatrix.com (Allen Short)
Date: Tue, 09 Jul 2002 13:03:29 -0500 (CDT)
Subject: [Twisted-Python] Aspect Oriented Programming
In-Reply-To: <3D2B1872.1070204@itamarst.org>
References: <3D2B1872.1070204@itamarst.org>
Message-ID: <20020709.130329.730559554.washort@twistedmatrix.com>

>>>>> Itamar Shtull-Trauring <twisted at itamarst.org> writes:

  > http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pythius/pythius/pythius/aop.py?rev=1.36&content-type=text/vnd.viewcvs-markup

Hmm. i _knew_ this AOP stuff was overcomplicated. looks like this
does the same as twisted.python.hook or emacs' defadvice. (well,
t.p.hook doesn't do "around" but i've been meaning to add it. here's
the excuse for it, i guess)

-- 
Allen Short        Programmer-Archaeologist        washort at twistedmatrix.com
If I'd known computer science was going to be like this, I'd never have
given up being a rock 'n' roll star.  -- G. Hirst
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020709/01971e84/attachment.pgp 

From mathieu.twisted at closetwork.org  Tue Jul  9 17:42:48 2002
From: mathieu.twisted at closetwork.org (Mathieu Longtin)
Date: Tue, 9 Jul 2002 17:42:48 -0400
Subject: [Twisted-Python] about smtp and pop services
Message-ID: <NEBBJNGFKLOOKFNBHMBEAEFEDHAA.mathieu.twisted@closetwork.org>

Hello,

What are the plans for those two services? From the code, they don't look
like they are doing anything right now. Or did I miss something?

-Mathieu




From mathieu at activebuddy.com  Tue Jul  9 17:00:11 2002
From: mathieu at activebuddy.com (Mathieu Longtin)
Date: Tue, 9 Jul 2002 17:00:11 -0400
Subject: [Twisted-Python] about smtp and pop services
Message-ID: <NEBBJNGFKLOOKFNBHMBEKEFCDHAA.mathieu@activebuddy.com>

What are the plans for those two services? From the code, they don't look
like they are doing anything right now. Or did I miss something?

-Mathieu




From twisted at itamarst.org  Tue Jul  9 17:58:36 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 09 Jul 2002 17:58:36 -0400
Subject: [Twisted-Python] about smtp and pop services
References: <NEBBJNGFKLOOKFNBHMBEAEFEDHAA.mathieu.twisted@closetwork.org>
Message-ID: <3D2B5C8C.5080604@itamarst.org>

Mathieu Longtin wrote:

 > What are the plans for those two services? From the code, they don't
 > look like they are doing anything right now. Or did I miss
 > something?

twisted.protocols contains protocol implementations only - policy
decisions on *how* to use the protocol is up to you.

However, we do include a sample implementation which implements the sort 
of stuff other than the protocol you'd expect from a mail server - 
twisted.mail.




From ranty-bulk at ranty.ddts.net  Wed Jul 10 05:46:51 2002
From: ranty-bulk at ranty.ddts.net (Manuel Estrada Sainz)
Date: Wed, 10 Jul 2002 11:46:51 +0200
Subject: [Twisted-Python] [PATCH] http.py: to allow setting the message of the status header
Message-ID: <20020710094651.GA14138@ranty.ddts.net>

 Itamar, here it is as promised, if you don't like the way it is done,
 just say so and I will rework it as needed.

 Well, I didn't even test it, if you like the aproach I will start using
 it in apt-proxy and report. But it is very small patch, I hopefully am
 not dumb enough to fuck up in such a little thing.

 Twisted rocks

 	ranty

-- 
--- Manuel Estrada Sainz <ranty at debian.org>
                         <ranty at bigfoot.com>
			 <ranty at users.sourceforge.net>
------------------------ <manuel.estrada at hispalinux.es> -------------------
God grant us the serenity to accept the things we cannot change, courage to
change the things we can, and wisdom to know the difference.
-------------- next part --------------
Index: http.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/http.py,v
retrieving revision 1.27
diff -u -r1.27 http.py
--- http.py	9 Jul 2002 21:40:24 -0000	1.27
+++ http.py	10 Jul 2002 09:37:16 -0000
@@ -296,6 +296,7 @@
     producer = None
     finished = 0
     code = OK
+    code_message = None
     method = "(no method yet)"
     clientproto = "(no clientproto yet)"
     uri = "(no uri yet)"
@@ -498,7 +499,10 @@
             version = self.clientproto
             if version != "HTTP/0.9":
                 l = []
-                message = RESPONSES.get(self.code, "Unknown Status")
+                if self.code_message:
+                    message = self.code_message
+                else:
+                    message = RESPONSES.get(self.code, "Unknown Status")
                 l.append('%s %s %s\r\n' % (version, self.code, message))
                 # if we don't have a content length, we sent data in chunked mode,
                 # so that we can support pipelining in persistent connections.
@@ -549,10 +553,11 @@
             cookie = cookie +"; Secure"
         self.cookies.append(cookie)
 
-    def setResponseCode(self, code):
+    def setResponseCode(self, code, message=None):
         """Set the HTTP response code.
         """
         self.code = code
+        self.code_message = message
     
     def setHeader(self, k, v):
         """Set an outgoing HTTP header.

From twisted at itamarst.org  Wed Jul 10 07:12:04 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 10 Jul 2002 07:12:04 -0400
Subject: [Twisted-Python] [PATCH] http.py: to allow setting the message
 of the status header
References: <20020710094651.GA14138@ranty.ddts.net>
Message-ID: <3D2C1684.6080500@itamarst.org>

OK, I checked in support for setting message in response code - same 
API, slightly different implementation.





From ranty-bulk at ranty.ddts.net  Wed Jul 10 10:44:44 2002
From: ranty-bulk at ranty.ddts.net (Manuel Estrada Sainz)
Date: Wed, 10 Jul 2002 16:44:44 +0200
Subject: [Twisted-Python] [PATCH] http.py: to allow setting the message of the status header
In-Reply-To: <3D2C1684.6080500@itamarst.org>
References: <20020710094651.GA14138@ranty.ddts.net> <3D2C1684.6080500@itamarst.org>
Message-ID: <20020710144444.GB19333@ranty.ddts.net>

On Wed, Jul 10, 2002 at 07:12:04AM -0400, Itamar Shtull-Trauring wrote:
> OK, I checked in support for setting message in response code - same 
> API, slightly different implementation.

 Your solution is more elegant than mine, I must admit.
 
 Thanks for the quick response

	ranty

-- 
--- Manuel Estrada Sainz <ranty at debian.org>
                         <ranty at bigfoot.com>
			 <ranty at users.sourceforge.net>
------------------------ <manuel.estrada at hispalinux.es> -------------------
God grant us the serenity to accept the things we cannot change, courage to
change the things we can, and wisdom to know the difference.



From martin at strakt.com  Wed Jul 10 10:50:21 2002
From: martin at strakt.com (Martin =?ISO-8859-1?Q?Sj=F6gren?=)
Date: 10 Jul 2002 16:50:21 +0200
Subject: [Twisted-Python] Problem in twisted.internet.tcp when using ssl
Message-ID: <1026312621.15179.7.camel@ratthing-b3cf>

The writeSomeData method of Connection objects may sometimes be called
with a zero length buffer. This works fine when using plain TCP, but
when using ssl, this will cause a ZeroReturnError (which is completely
bogus!) and everything...well...blows up.

Here's a patch:

Index: tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.75
diff -u -u -2 -r1.75 tcp.py
--- tcp.py      10 Jul 2002 00:00:57 -0000      1.75
+++ tcp.py      10 Jul 2002 14:49:29 -0000
@@ -100,4 +100,6 @@
         (which is negative)
         """
+        if not data:
+            return 0
         try:
             return self.socket.send(data)


Regards,
Martin

-- 
Martin Sj?gren
  martin at strakt.com              ICQ : 41245059
  Phone: +46 (0)31 7710870       Cell: +46 (0)739 169191
  GPG key: http://www.strakt.com/~martin/gpg.html



From twisted at itamarst.org  Wed Jul 10 11:04:14 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 10 Jul 2002 11:04:14 -0400
Subject: [Twisted-Python] Problem in twisted.internet.tcp when using ssl
References: <1026312621.15179.7.camel@ratthing-b3cf>
Message-ID: <3D2C4CEE.5080603@itamarst.org>

Martin Sj?gren wrote:

> The writeSomeData method of Connection objects may sometimes be called
> with a zero length buffer. This works fine when using plain TCP, but
> when using ssl, this will cause a ZeroReturnError (which is completely
> bogus!) and everything...well...blows up.

In the interest of not breaking anything which might possibly, however 
unlikely, depend on tcp.py's behaviour, I've made this change in ssl.py. 
So cvs up and tell me if it's ok now.






From lists at gregfortune.com  Wed Jul 10 14:30:38 2002
From: lists at gregfortune.com (Greg Fortune)
Date: Wed, 10 Jul 2002 14:30:38 -0400
Subject: [Twisted-Python] Question regarding async stuff
Message-ID: <200207110032.g6B0WjV89279@steamteam.com>

I'm working on a network file server right now and am using Twisted as my 
networking framework.  Overall, it's working really well.  The only thing I 
haven't been able to figure out so far is what is async and what is not.  It 
looks like data transfer is async (self.transport.write(msg)), but the 
functions called in the protocol can block the entire twisted main loop.  

Delayed has a note that it is being depreceted, but looked to be the only way 
to make the Protocol dataReceived() function run in an async manner.  What is 
replacing Delayed and is there any other way that I can cause the Protocol 
dataReceived call to handle async?  

The reason I ask is that it doesn't appear that a twisted server can handle 
processing multiple requests at the same time.  It appears that a request 
must come in and be processed before another request can be serviced.  It 
probably isn't a big deal for me as the number of requests and amount of 
processing per request will be low, but it could be that I'm totally 
misunderstanding how the framework works.  

Any insight is appreciated :)

Greg Fortune



From glyph at twistedmatrix.com  Wed Jul 10 21:51:41 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 10 Jul 2002 20:51:41 -0500 (CDT)
Subject: [Twisted-Python] Question regarding async stuff
In-Reply-To: <200207110032.g6B0WjV89279@steamteam.com>
References: <200207110032.g6B0WjV89279@steamteam.com>
Message-ID: <20020710.205141.59468119.glyph@twistedmatrix.com>


On Wed, 10 Jul 2002 14:30:38 -0400, Greg Fortune <lists at gregfortune.com> wrote:

> I'm working on a network file server right now and am using Twisted as my
> networking framework.  Overall, it's working really well.  The only thing I
> haven't been able to figure out so far is what is async and what is not.  It
> looks like data transfer is async (self.transport.write(msg)), but the
> functions called in the protocol can block the entire twisted main loop.

Anything that returns a Deferred is asynchronous; everything else is
synchronous.  I think that your use of these terms belies a misunderstanding of
what's going on.

> [...] What is replacing Delayed [...]

IReactorTime.callLater(...)

    http://twistedmatrix.com/documents/TwistedDocs/Twisted-0.19.0rc3/twisted/internet/interfaces_IReactorTime.py.html#callLater

> The reason I ask is that it doesn't appear that a twisted server can handle 
> processing multiple requests at the same time.  It appears that a request 
> must come in and be processed before another request can be serviced.  It 
> probably isn't a big deal for me as the number of requests and amount of 
> processing per request will be low, but it could be that I'm totally 
> misunderstanding how the framework works.

Yeah, I think you're misunderstanding something ;).

Protocol.dataReceived is called only when data is available from a network
connection; therefore, partial requests coming in are partially parsed and
buffered by state machines (Protocol instances).

When a full request has been received, the request can be processed.  If
processing that request requires accessing other asynchronous data that's not
yet available, that's fine too -- just do your transport.write(...) to respond
later on, when a different event arrives.  Some parts of the framework
(twisted.spread, twisted.enterprise) make this extremely explicit, by allowing
the user to return a Deferred when their response is not yet ready.

Twisted can be "processing multiple requests at the same time" in the sense
that while it's waiting on data from the network, it won't be blocked, since
all I/O is asynchronous.  It will be "stopped" while doing literal CPU-bound
"processing" of a request; but while this may seem bad if you look at it
naively, 90% of all request-processing you'll do is incredibly brief, and
managing the resources needed to parallelize that processing is an order of
magnitude (or more, thanks to python's global interpreter lock, mutex
contention, context switching, and other thread nastinesses) more intensive
than just running the requests one after another.

This is before we even start talking about the inherent, dangerous complexity
of thread-based approaches to state management; they're inefficient, and
they're often buggy too.

Even given all that, Twisted does have good support for threads when you really
need them.

    http://twistedmatrix.com/documents/TwistedDocs/Twisted-0.19.0rc3/twisted/internet/interfaces_IReactorThreads.py.html

I hope this answers your questions.  What sort of file server are you writing?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020710/f1f7d2a2/attachment.pgp 

From twisted at itamarst.org  Wed Jul 10 21:53:18 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 10 Jul 2002 21:53:18 -0400
Subject: [Twisted-Python] Question regarding async stuff
References: <200207110032.g6B0WjV89279@steamteam.com>
Message-ID: <3D2CE50E.3040905@itamarst.org>

Greg Fortune wrote:

> The reason I ask is that it doesn't appear that a twisted server can handle 
> processing multiple requests at the same time.  It appears that a request 
> must come in and be processed before another request can be serviced.  It 
> probably isn't a big deal for me as the number of requests and amount of 
> processing per request will be low, but it could be that I'm totally 
> misunderstanding how the framework works.  

Well, consider this - unless you have a SMP machine, your computer can 
only do one thing at a time anyway. So, serving more than one request is 
  just a matter of how you give time to handling different tasks - 
there's no one way you can really do more than one thing at once.

The idea then is to do a little bit each time we get a dataReceived 
callback, and finish up as quickly as possible so we can move on to 
handling the next event. We can also use stuff like producers and 
reactor.callLater to create events even when we aren't getting data from 
the network. In each event handler though we need to make sure we don't 
block.

And yes, this can work. For example this is how Squid works, and Squid 
is rather fast and can do more than one HTTP request "at once".

Recommended reading:
http://www.cs.wustl.edu/~schmidt/PDF/reactor-siemens.pdf




From lists at gregfortune.com  Thu Jul 11 09:54:36 2002
From: lists at gregfortune.com (Greg Fortune)
Date: Thu, 11 Jul 2002 09:54:36 -0400
Subject: [Twisted-Python] Question regarding async stuff
In-Reply-To: <3D2CE50E.3040905@itamarst.org>
References: <200207110032.g6B0WjV89279@steamteam.com> <3D2CE50E.3040905@itamarst.org>
Message-ID: <200207111654.g6BGshO09512@steamteam.com>

<snip>
> Recommended reading:
> http://www.cs.wustl.edu/~schmidt/PDF/reactor-siemens.pdf

Thanks, I'll take a look

Greg



From lists at gregfortune.com  Thu Jul 11 09:58:22 2002
From: lists at gregfortune.com (Greg Fortune)
Date: Thu, 11 Jul 2002 09:58:22 -0400
Subject: [Twisted-Python] Question regarding async stuff
In-Reply-To: <20020710.205141.59468119.glyph@twistedmatrix.com>
References: <200207110032.g6B0WjV89279@steamteam.com> <20020710.205141.59468119.glyph@twistedmatrix.com>
Message-ID: <200207111658.g6BGwTC10075@steamteam.com>

Good deal, I did a poor job of communicating my question, but I did 
understand everything.  Some of the processing I was considering doing was 
fairly CPU intensive, but some simple things reduced the processing overhead 
to almost nothing.

So, I can even assume that during processing of a request (I'm not talking 
about data transport here, just the processing) that operations on data 
members in the protocols factory can be considered atomic?  If the server 
can't "process" more than one request at a time, two protocols can not be 
accessing the factory members concurrently, correct?  I've got a mutex 
wrapper around some stuff in my factory right now, but it sounds like I can 
rip that stuff out.

The server I'm writing is pretty simple.  In principle, it's an ftp server 
with special restrictions.  It's a file server with the requirement that it 
provide a pool of unbound files and then a unique path/name to any file that 
has been bound.  I'm going to use it to store and retrieve graphics 
associated with entities in a database for a point of sale/inventory system 
I'm developing.

That way I can be sure that my pathnames will be at most a certain length.  
All directories will be 1 char long and filenames will be 6 chars long.  At a 
depth of 4 with 10 directories spanning from each node, I can store somewhere 
over 10E9 files. 

Thanks for the quick response,

Greg

<snip>
>
> Yeah, I think you're misunderstanding something ;).
>
> Protocol.dataReceived is called only when data is available from a network
> connection; therefore, partial requests coming in are partially parsed and
> buffered by state machines (Protocol instances).
>
> When a full request has been received, the request can be processed.  If
> processing that request requires accessing other asynchronous data that's
> not yet available, that's fine too -- just do your transport.write(...) to
> respond later on, when a different event arrives.  Some parts of the
> framework (twisted.spread, twisted.enterprise) make this extremely
> explicit, by allowing the user to return a Deferred when their response is
> not yet ready.
>
> Twisted can be "processing multiple requests at the same time" in the sense
> that while it's waiting on data from the network, it won't be blocked,
> since all I/O is asynchronous.  It will be "stopped" while doing literal
> CPU-bound "processing" of a request; but while this may seem bad if you
> look at it naively, 90% of all request-processing you'll do is incredibly
> brief, and managing the resources needed to parallelize that processing is
> an order of magnitude (or more, thanks to python's global interpreter lock,
> mutex contention, context switching, and other thread nastinesses) more
> intensive than just running the requests one after another.
>
> This is before we even start talking about the inherent, dangerous
> complexity of thread-based approaches to state management; they're
> inefficient, and they're often buggy too.
>
> Even given all that, Twisted does have good support for threads when you
> really need them.
>
>    
> http://twistedmatrix.com/documents/TwistedDocs/Twisted-0.19.0rc3/twisted/in
>ternet/interfaces_IReactorThreads.py.html
>
> I hope this answers your questions.  What sort of file server are you
> writing?



From bruce at cubik.org  Thu Jul 11 15:19:56 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Thu, 11 Jul 2002 13:19:56 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Now the rules actually work
References: <E17SjNa-0001tQ-00@zaibach.twistedmatrix.com>
Message-ID: <3D2DDA5C.6070601@cubik.org>

moshez CVS wrote:
> Modified files:
> Twisted/debian/rules 1.30 1.31
> +	cp -ar doc/howto/listings/ \
> +	               debian/twisted-doc/usr/share/doc/twisted-doc/howto/
> +	install -m 644 doc/specifications/*.html \
> +	               debian/twisted-doc/usr/share/doc/twisted-doc/specifications/

Should we be installing the generated .xhtml (or whatever extension) 
files rather than the source .html ones?

  - Bruce




From sean at ninjaneering.com  Thu Jul 11 14:01:56 2002
From: sean at ninjaneering.com (Sean Riley)
Date: Thu, 11 Jul 2002 13:01:56 -0500
Subject: [Twisted-Python] need an identity
Message-ID: <PGEKIMFOMBFCPBEILDBLGEIPCAAA.sean@ninjaneering.com>

I seem to have a problem...

I need access to the identity for a client as their perspective is being
created from within getPerspectiveRequest(). Although
Service::getPerspectiveRequest is called by the identity instance for the
client, when using the DBAuthorizer, there doesnt appear to be a way to
access this identity object from within getPerspectiveRequest.

The only way to lookup an identity is Authorizer::getIdentityRequest - which
in this case will hit the database again to load the identity. I want the
existing identity instance, not a new instance for the same identity. I know
the Identity instance is out there, but I can't get at it!

The DbAuthorizer does not keep an "identities" list around, so I cant look
up the identity the same way you can in the DefaultAuthorizer.

Is this a security issue? Is access to the identity information for a
perspective not allowed?

One solution would be for me would be for the identity to be passed into
getPerspectiveRequest as another argument:

def getPerspectiveRequest(self, name, identity):

instead of the existing:

def getPerspectiveRequest(self, name):

This is may be too drastic an API change for just this one case... but it
doesnt require changing much existing code...

thoughts?

----
Sean Riley





From sean at twistedmatrix.com  Thu Jul 11 23:41:12 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Thu, 11 Jul 2002 22:41:12 -0500
Subject: [Twisted-Python] distributed method calls in twisted.sister
In-Reply-To: <20020708.173513.66185151.glyph@twistedmatrix.com>
Message-ID: <HOEEKPCOKELHCNIJNMAGIEBNCGAA.sean@twistedmatrix.com>

sister_* instead of distributed_* is probably a good idea.

I'm not convinced of the need for shadow objects. They could lead to an
explosion (N^2 !) in the number of python objects in a distributed system.
If they do exist they at least should be transient if possible.

I agree there probably needs to be a better mechanism for identifying the
calling object and allowing it to present information, but I dont have a
solution to suggest yet. Working on it. I'm going to complete distributed
login with multiple services before focusing on inter-object communication
across sisters.



-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Glyph
Lefkowitz
Sent: Monday, July 08, 2002 5:35 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] distributed method calls in twisted.sister


----Security_Multipart(Mon_Jul__8_17:35:13_2002_516)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

From: "Sean Riley" <sean at ninjaneering.com>
Date: Mon, 8 Jul 2002 11:49:53 -0500

> twisted.sister is a piece of clustering infrastructure to allow a single
> application or simulation to be distributed across multiple servers on
> multiple hosts.

... with unit tests that aren't currently passing ;)

> twisted.sister has a concept of a "parent" server ...

We do need to rename this to the "mother" server sometime soon.

> I implemented a "callDistributed" on the sister server which looks like:
...
> This appears to be inconsistent with the common twisted notion of knowing
> "who" is calling a method for security reasons. Maybe there should be
> another type of remote method called "distributed_" which takes the
> identifying information of the calling distributed object as the first
> arguments:

Hmm.  I agree with the "distributed_" idea, but I'm not so sure about the
identifying information being presented as such.  This seems like a use case
for "shadow" objects; if you're getting a message from another user, your
sister-server must know _something_ about that user.  In this case, it looks
OK
to simply present their resource-ID (which should be the same, as far as we
know, as their username).

I can easily imagine adding to this use-case so that each user has a
face-icon
associated with them, or some other immediately displayed information.  On
IRC
this mirrors the userhost/nickname pair (immediately visible information)
and
the userinfo/whois database (key queryable information).  This is a balance
point which has to be easily tunable for an application.

The other problem with this identifying information is that it's not
presented
as part of a path.  My initial attempt at shoehorning twisted.sister into
the
callPath paradigm was unfortunate :-)... but having an abstract hierarchy
where
resources can be mounted/unmounted seems like a good idea to me, still.

I don't know if callPath is necessarily the best way to do that, though.  It
seems that twisted.web's got the best way of handling that so far; a
formalization of what twisted.web.distrib does would probably be best.  (It
would be really, REALLY nice if we could get twisted.sister clustered web
services for free out of that, somehow)

> where the resourecType and resourceName identify the distributed resource
> that invoked the distributed method call. this distributed_ method would
> only ever be invoked by remote objects managed in a twisted.sister
network.

Maybe sister_... would be a better naming convention, considering its
source?

> I thought about adding the location of the distributed caller object also,
> but this information probably isnt required as it is known by the parent
who
> can route any further communication. the location could also change if an
> object migrated between sisters which would invalidate any location
> information stored on a sister, so not sending it is a better option.

Agreed -- routing information has to be handled by the parent.  I take it
this
means that messages will also be queued by the parent, in order to avoid
losing
them?

--
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |

----Security_Multipart(Mon_Jul__8_17:35:13_2002_516)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQA9KhOnvVGR4uSOE2wRAjdBAJ9VR7vIXHCuX1iMgV2jDyyJixBNCgCdHyG7
t4FifGq+MMb579KMU6/ZkqM=
=3A6W
-----END PGP SIGNATURE-----

----Security_Multipart(Mon_Jul__8_17:35:13_2002_516)----




From glyph at twistedmatrix.com  Fri Jul 12 02:58:07 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 12 Jul 2002 01:58:07 -0500 (CDT)
Subject: [Twisted-Python] distributed method calls in twisted.sister
In-Reply-To: <HOEEKPCOKELHCNIJNMAGIEBNCGAA.sean@twistedmatrix.com>
References: <20020708.173513.66185151.glyph@twistedmatrix.com>
	<HOEEKPCOKELHCNIJNMAGIEBNCGAA.sean@twistedmatrix.com>
Message-ID: <20020712.015807.74568792.glyph@twistedmatrix.com>


On Thu, 11 Jul 2002 22:41:12 -0500, "Sean Riley" <sean at twistedmatrix.com> wrote:
> I'm not convinced of the need for shadow objects. They could lead to an
> explosion (N^2 !) in the number of python objects in a distributed system.
> If they do exist they at least should be transient if possible.

Transience is a good idea, I agree.  It should be possible to cache the shadow
objects if you need to, but I imagine that would be a pretty rare
case. Remember that a tuple of strings is an object too; it's just an object
you can't edit the interface on.

> I agree there probably needs to be a better mechanism for identifying the
> calling object and allowing it to present information, but I dont have a
> solution to suggest yet. Working on it. I'm going to complete distributed
> login with multiple services before focusing on inter-object communication
> across sisters.

Encapsulating the identification information into an instance (this is all I
mean by "shadow object"; not that we should, by default, have lots of
replicated-everywhere state) seems like it would give some leeway, since any
modifications to what information was necessary could be modifications to the
expected interface of that object, and not the signature of the methods.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020712/48b43079/attachment.pgp 

From Karl.Lewin at BNSF.com  Fri Jul 12 11:32:24 2002
From: Karl.Lewin at BNSF.com (Lewin, Karl E)
Date: Fri, 12 Jul 2002 10:32:24 -0500
Subject: [Twisted-Python] Adding Mime types using coil
Message-ID: <B90B981F6E7CD51195830002A5609B32790503@ftwntexmp004.bnsf.com>

I am trying to add a mime type (image/svg+xml) to a default twisted web
server (mktap web --path c:/proj/html) and although it looks like it is
changed when I add it using coil, when I close and restart coil it doesn't
show up.  Any suggestions on things to look for?  

Platform: WinXP Pro, Python 2.2 (activestate), Twisted Twisted-0.19.0rc3

Thanks-
Karl
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020712/f59ad0c1/attachment.htm 

From twisted at itamarst.org  Fri Jul 12 11:52:54 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 12 Jul 2002 11:52:54 -0400
Subject: [Twisted-Python] Adding Mime types using coil
References: <B90B981F6E7CD51195830002A5609B32790503@ftwntexmp004.bnsf.com>
Message-ID: <3D2EFB56.1030004@itamarst.org>

Lewin, Karl E wrote:

> I am trying to add a mime type (image/svg+xml) to a default twisted web 
> server (mktap web --path c:/proj/html) and although it looks like it is 
> changed when I add it using coil, when I close and restart coil it 
> doesn't show up.  Any suggestions on things to look for? 

This is a bug in Twisted, since the dictionary is actually a class level 
attribute instead of an instance, so it doesn't get saved when you save 
the tap. I'll fix this after we release 0.19.0.







From Karl.Lewin at BNSF.com  Fri Jul 12 12:19:31 2002
From: Karl.Lewin at BNSF.com (Lewin, Karl E)
Date: Fri, 12 Jul 2002 11:19:31 -0500
Subject: [Twisted-Python] Adding Mime types using coil
Message-ID: <B90B981F6E7CD51195830002A5609B32790505@ftwntexmp004.bnsf.com>

Ok- 

Thanks for the quick reply, I need to muck around looking at the source more
so I can ask better informed stupid questions.

Karl

-----Original Message-----
From: Itamar Shtull-Trauring [mailto:twisted at itamarst.org] 
Sent: Friday, July 12, 2002 10:53 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Adding Mime types using coil


Lewin, Karl E wrote:

> I am trying to add a mime type (image/svg+xml) to a default twisted web 
> server (mktap web --path c:/proj/html) and although it looks like it is 
> changed when I add it using coil, when I close and restart coil it 
> doesn't show up.  Any suggestions on things to look for? 

This is a bug in Twisted, since the dictionary is actually a class level 
attribute instead of an instance, so it doesn't get saved when you save 
the tap. I'll fix this after we release 0.19.0.





_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020712/da555e9a/attachment.htm 

From andrew-twisted at puzzling.org  Fri Jul 12 12:40:20 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 13 Jul 2002 02:40:20 +1000
Subject: [Twisted-Python] Adding Mime types using coil
In-Reply-To: <B90B981F6E7CD51195830002A5609B32790505@ftwntexmp004.bnsf.com>
References: <B90B981F6E7CD51195830002A5609B32790505@ftwntexmp004.bnsf.com>
Message-ID: <20020712164020.GA1070@frobozz.local>

On Fri, Jul 12, 2002 at 11:19:31AM -0500, Lewin, Karl E wrote:
>    Ok-
> 
>    Thanks for the quick reply, I need to muck around looking at the source
>    more so I can ask better informed stupid questions.

That was a bug in Twisted, not a stupid question.  Please feel free to ask
us about more of those :)

-Andrew.




From Karl.Lewin at BNSF.com  Fri Jul 12 13:41:54 2002
From: Karl.Lewin at BNSF.com (Lewin, Karl E)
Date: Fri, 12 Jul 2002 12:41:54 -0500
Subject: [Twisted-Python] Adding Mime types using coil
Message-ID: <B90B981F6E7CD51195830002A5609B32790506@ftwntexmp004.bnsf.com>

I'll do my best to come up with some!

Are there any "gotcha's" re: win32 I should be aware of?

-----Original Message-----
From: Andrew Bennetts [mailto:andrew-twisted at puzzling.org] 
Sent: Friday, July 12, 2002 11:40 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Adding Mime types using coil


On Fri, Jul 12, 2002 at 11:19:31AM -0500, Lewin, Karl E wrote:
>    Ok-
> 
>    Thanks for the quick reply, I need to muck around looking at the source
>    more so I can ask better informed stupid questions.

That was a bug in Twisted, not a stupid question.  Please feel free to ask
us about more of those :)

-Andrew.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020712/5b436fea/attachment.htm 

From andrew-twisted at puzzling.org  Fri Jul 12 13:55:04 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 13 Jul 2002 03:55:04 +1000
Subject: [Twisted-Python] Adding Mime types using coil
In-Reply-To: <B90B981F6E7CD51195830002A5609B32790506@ftwntexmp004.bnsf.com>
References: <B90B981F6E7CD51195830002A5609B32790506@ftwntexmp004.bnsf.com>
Message-ID: <20020712175504.GA1349@frobozz.local>

On Fri, Jul 12, 2002 at 12:41:54PM -0500, Lewin, Karl E wrote:
>    I'll do my best to come up with some!
> 
>    Are there any "gotcha's" re: win32 I should be aware of?

Several :(

Processes don't work unless you use the win32event reactor rather than the
default reactor.  The win32event reactor is a little bit slower, and not as
thoroughly tested.

There's currently an outstanding problem where anything that calls
reactor.wakeUp, such as callFromThread, is likely to raise a "bad file
descriptor error".

Also, don't bother doing anything on Win95 or Win98.  Some basic stuff will
work, but not much.  Win2k and XP should be ok.  I'm not sure about WinMe.

Otherwise, it's ok, at least for me.  I'm using it quite successfully on
WinXP/2k at work for a variety of tasks.

-Andrew.




From andrew-twisted at puzzling.org  Sat Jul 13 12:55:49 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 14 Jul 2002 02:55:49 +1000
Subject: [Twisted-Python] DeferredList and errback
Message-ID: <20020713165549.GA2542@frobozz.local>

DeferredList is handy, but it isn't quite what I need for FTPClient.

Here's my use-case:  A file is deemed to be downloaded by FTPClient when
both the 226 transfer complete message is received on the control
connection, *and* the data connection is closed.

DeferredList takes care of this nicely, so long as it works.  In the case
where the control connection immediately returns an error (e.g. file not
found), one errback will be called and the other Deferred will never be
called either way, effectively hanging the client.  (I've got a testcase for
this, but I haven't checked it in yet because having FTP tests passing is a
novelty that I don't want to take away from people ;)

So ideally I want DeferredList (or something like DeferredList) to wait for
all callbacks, as it currently does, but fire its errback as soon as any of
its Deferreds fires an errback.  Later errbacks and callbacks would be
ignored.

I realise I'm probably too late to get this into 0.19.0, but I'm wondering
what the right way to provide this is:
  - new class in defer.py (what would it be called?),
  - change the behaviour of DeferredList to do what I want, or
  - add a flag to the current DeferredList so it can do either behaviour?

-Andrew.




From glyph at twistedmatrix.com  Sat Jul 13 21:18:38 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 13 Jul 2002 20:18:38 -0500 (CDT)
Subject: [Twisted-Python] DeferredList and errback
In-Reply-To: <20020713165549.GA2542@frobozz.local>
References: <20020713165549.GA2542@frobozz.local>
Message-ID: <20020713.201838.89032527.glyph@twistedmatrix.com>


On Sun, 14 Jul 2002 02:55:49 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> DeferredList takes care of this nicely, so long as it works.

Rather than adding a whole new class to defer.py, maybe you could make the
other deferred's errback get called by the first one?

> I realise I'm probably too late to get this into 0.19.0, but I'm wondering
> what the right way to provide this is:
>   - new class in defer.py (what would it be called?),

"DeferOneOrMany", maybe?  Tough thing to name.  This is probably the right
approach, though; consider that there are cases where one error might be all
you need, or one success.  In those cases you don't want to get a list as your
callback, you just want to get the one value.

>   - change the behaviour of DeferredList to do what I want, or

Definitely not!!  There are plenty of cases where you need _all_ the operations
to complete regardless of their status of completion.

>   - add a flag to the current DeferredList so it can do either behaviour?

As I said above, the behavior is really different; the types of the signatures
for your callbacks will be different.  That says "different class" to me.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020713/001de197/attachment.pgp 

From glyph at twistedmatrix.com  Sat Jul 13 22:21:00 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 13 Jul 2002 21:21:00 -0500 (CDT)
Subject: [Twisted-Python] IM bug bounty
Message-ID: <20020713.212100.23017961.glyph@twistedmatrix.com>


There's a but in t-im that is annoying the heck out of me and I can't figure
out.  If you're a Twisted hacker you can gain major brownie points by
submitting a patch that fixes it.

When you tab-complete a nickname on the second (wrapped) line of a t-im input
box, the whole program freezes and won't respond to signals.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020713/836ea0d9/attachment.pgp 

From bruce at cubik.org  Sat Jul 13 23:52:26 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Sat, 13 Jul 2002 21:52:26 -0600
Subject: [Twisted-Python] cBanana diffs
References: <3D2953A4.5000008@cubik.org> <3D295B19.6070308@itamarst.org> <3D2960DF.2070401@cubik.org> <3D2A8E0C.9020200@cubik.org>
Message-ID: <3D30F57A.405@cubik.org>

Bruce Mitchener wrote:
> Pure Python:  22.56 seconds
> CVS cBanana:   1.15 seconds
> My cBanana:    0.98 seconds

These changes plus new ones are now in CVS.

Current numbers from my bananabench look like:

Pure Python:
Encode took 11.9482729435 seconds
Decode took 22.5815860033 seconds

Old cBanana:
Encode took 0.707735061646 seconds
Decode took 1.09367489815 seconds

Current cBanana:
Encode took 0.633662939072 seconds
Decode took 0.930390954018 seconds

I'm not sure why the old cBanana dropped from 1.15 seconds to 1.09 
seconds, but I do know that the additional changes to cBanana.c were 
responsible for the drop from 0.98 to 0.93 seconds.

I'll finish up work on bananabench.py and check it in within a couple of 
days.

Cheers,

  - Bruce




From glyph at twistedmatrix.com  Sun Jul 14 00:08:23 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 13 Jul 2002 23:08:23 -0500 (CDT)
Subject: [Twisted-Python] need an identity
In-Reply-To: <PGEKIMFOMBFCPBEILDBLGEIPCAAA.sean@ninjaneering.com>
References: <PGEKIMFOMBFCPBEILDBLGEIPCAAA.sean@ninjaneering.com>
Message-ID: <20020713.230823.74742231.glyph@twistedmatrix.com>


On Thu, 11 Jul 2002 13:01:56 -0500, "Sean Riley" <sean at ninjaneering.com> wrote:
> One solution would be for me would be for the identity to be passed into
> getPerspectiveRequest as another argument [...]

> This is may be too drastic an API change for just this one case... but it
> doesnt require changing much existing code...

I think you're right here.

This will become increasingly necessary as identities implement more
authorization techniques, and particular services need to verify that the
identities have been verified, say, without using a cleartext password.

However, in the interests of preserving backwards compatibility, maybe have a
getExtendedPerspectiveRequest() that had the additional argument[s] that you
need.

Is there anyone out there who is currently using this API who has a reason not
to change their code?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020713/5099e1ba/attachment.pgp 

From andrew-twisted at puzzling.org  Sun Jul 14 00:41:18 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 14 Jul 2002 14:41:18 +1000
Subject: [Twisted-Python] DeferredList and errback
In-Reply-To: <20020713.201838.89032527.glyph@twistedmatrix.com>
References: <20020713165549.GA2542@frobozz.local> <20020713.201838.89032527.glyph@twistedmatrix.com>
Message-ID: <20020714044118.GB651@frobozz.local>

On Sat, Jul 13, 2002 at 08:18:38PM -0500, Glyph Lefkowitz wrote:
> 
> On Sun, 14 Jul 2002 02:55:49 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> > DeferredList takes care of this nicely, so long as it works.
> 
> Rather than adding a whole new class to defer.py, maybe you could make the
> other deferred's errback get called by the first one?

That's what I'm currently attempting to do, and it's messy.  You really want
to make sure that adding the errback to call the other Deferred's errbacks
doesn't interfere in the normal chain of processing for that errback, so you
need to muck around with gunk like "lambda e: otherDeferred.errback(e) or
e".  Worse than that, with 3 or more Deferreds ordering becomes hell... if
you have Deferreds A, B and C, then A should call B & C, B should call A &
C, and C should call A & B.  I don't know of a clean way to arrange that.

Plus, it's what I'm currently trying to do, and it doesn't work.  Doubtless
this is a bug in how I'm doing it, but that's just another argument for
having a class to do it for me.

> > I realise I'm probably too late to get this into 0.19.0, but I'm wondering
> > what the right way to provide this is:
> >   - new class in defer.py (what would it be called?),
> 
> "DeferOneOrMany", maybe?  Tough thing to name.  This is probably the right
> approach, though; consider that there are cases where one error might be all
> you need, or one success.  In those cases you don't want to get a list as your
> callback, you just want to get the one value.

Well, I *definitely* want all callbacks, or just one errback.  I can imagine
that only one either could be useful too, though.  Taking this approach,
suddenly we have two new classes to name, both similar and yet and different
to DeferredList: all callbacks or one errback, and one callback or one
errback, vs. the current all callbacks and all errbacks.

> >   - change the behaviour of DeferredList to do what I want, or
> 
> Definitely not!!  There are plenty of cases where you need _all_ the operations
> to complete regardless of their status of completion.

Ok.  I wasn't sure if this aspect of its functionality was in use, though I
guessed it probably was.

> >   - add a flag to the current DeferredList so it can do either behaviour?
> 
> As I said above, the behavior is really different; the types of the signatures
> for your callbacks will be different.  That says "different class" to me.

I'm not so sure.

Would it be so bad to be able to do this:
    dl = DeferredList([d1, d2, ...], fireOnOneCallback=1, fireOnOneErrback=1)

This way we can get all four variations for free, without having to think of
distinct and non-confusing names for them.  Of course, "fireOnOneCallback"
is a pretty ugly name for a keyword argument.

This approach, despite the way it can change the signature of callback
and/or errback, seems more general to me.  Or is the way you envisage that
"DeferOneOrMany" would behave?

-Andrew.




From glyph at twistedmatrix.com  Sun Jul 14 01:45:30 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 14 Jul 2002 00:45:30 -0500 (CDT)
Subject: [Twisted-Python] DeferredList and errback
In-Reply-To: <20020714044118.GB651@frobozz.local>
References: <20020713165549.GA2542@frobozz.local>
	<20020713.201838.89032527.glyph@twistedmatrix.com>
	<20020714044118.GB651@frobozz.local>
Message-ID: <20020714.004530.78716887.glyph@twistedmatrix.com>

On Sun, 14 Jul 2002 14:41:18 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

> > > - add a flag to the current DeferredList so it can do either behaviour?
> > As I said above, the behavior is really different; the types of the
> > signatures for your callbacks will be different.  That says "different
> > class" to me.

> Would it be so bad to be able to do this:
>     dl = DeferredList([d1, d2, ...], fireOnOneCallback=1, fireOnOneErrback=1)
> 
> This way we can get all four variations for free, without having to think of
> distinct and non-confusing names for them.  Of course, "fireOnOneCallback"
> is a pretty ugly name for a keyword argument.

On second thought, you're right -- I like the way that exact signature looks.
:-).  Go ahead and implement it.


-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020714/23037584/attachment.pgp 

From carmstro at twistedmatrix.com  Sun Jul 14 12:51:04 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 14 Jul 2002 12:51:04 -0400
Subject: [Twisted-Python] commits
Message-ID: <87adouw8w7.fsf@twistedmatrix.com>

Hey guys, I just wanted to say "holy crap" -- great job on all the (code AND
documentation!) commits that I woke up to today. :-)

The only problem is, Twisted releases are going to get behind if you guys keep
this productivity up!! Guess I'll have to release again in a couple of days!
^.^'


-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Sun Jul 14 19:50:04 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 14 Jul 2002 18:50:04 -0500
Subject: [Twisted-Python] commits
In-Reply-To: <87adouw8w7.fsf@twistedmatrix.com>
Message-ID: <6B6B756C-9784-11D6-9A8D-003065C58BE2@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Sunday, July 14, 2002, at 11:51 AM, Christopher Armstrong wrote:

> Hey guys, I just wanted to say "holy crap" -- great job on all the 
> (code AND
> documentation!) commits that I woke up to today. :-)

I've gotta say the same thing about Twisted as a whole.

The whole team has really been kicking ass lately; we have a lot of 
spectacular new functionality coming on line, the 1.0 release is 
starting to look like it's in good shape, and the documentation is 
actually starting to make sense!

So kudos to everybody.  Keep up the good work!  (And hopefully I can 
catch up with you!)


  |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
  |   < _/ >   |  Lead Developer,  the Twisted project  |
  |  < ___/ >  |      http://www.twistedmatrix.com      |
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (Darwin)

iD8DBQE9Mg42J4egu9Jkc+kRAsHeAJ9U51OzVT5njyK06bYLgSqICMVmEwCg+U9o
JBtLQbxpJi4neBPt/JqJZ2U=
=NyFE
-----END PGP SIGNATURE-----




From twisted at itamarst.org  Sun Jul 14 22:27:27 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 14 Jul 2002 22:27:27 -0400
Subject: [Twisted-Python] ANN: Twisted 0.19.0
Message-ID: <3D32330F.901@itamarst.org>

Twisted is an event-based framework for internet applications, written
in Python and licensed under the LGPL. For more information, visit:

         http://www.twistedmatrix.com

Join the list at:

         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Our IRC channel is #twisted on irc.openprojects.net.


What's New in 0.19.0
====================

- cReactor, a C-based reactor for faster networking.

- Reimplemented OSCAR protocol (for AIM and ICQ).

- Added a new MVC-based web framework.

- Refactoring of Deferreds.

- Support for persisting to abstract object tree (this is equivalent
     to pickle, except that the output is Python source code.)

- Processes can now be run setuid/setgid.

- Huge number of bugfixes, including much improved SSL support, and lots
     more documentation.


What is Twisted?
================

Twisted is an event-based framework for internet applications.  It
includes a web server, a telnet server, a chat server, a news server, a
generic client and server for remote object access, and APIs for
creating new protocols and services. Twisted supports integration of the
Tk, GTK+, Qt or wxPython event loop with its main event loop. The Win32
event loop is also supported, as is basic support for running servers on
top of Jython. Twisted supports TCP, SSL, UDP, Unix sockets and
subprocesses out of the box.

Twisted currently supports the following protocols, all implemented in
pure python, most of them as both servers and clients:

          - NNTP
          - FTP
          - HTTP
          - SOCKSv4
          - SMTP
          - IRC
          - telnet
          - POP3
          - AOL's instant messaging TOC
          - OSCAR, used by AOL-IM as well as ICQ (client only)
          - DNS
          - finger
          - Echo, discard, chargen and friends
          - Twisted Perspective Broker
          - LDAP is available as a separate plugin






From Karl.Lewin at BNSF.com  Mon Jul 15 14:02:07 2002
From: Karl.Lewin at BNSF.com (Lewin, Karl E)
Date: Mon, 15 Jul 2002 13:02:07 -0500
Subject: [Twisted-Python] Disable directory serving?
Message-ID: <B90B981F6E7CD51195830002A5609B3279050B@ftwntexmp004.bnsf.com>

Is it a coil option or something that has to be done programmatically?

Currently with a default mktap web -f blah blah build of a webserver, if you
go the root directory it will give a "directory" view.  Is there some
document I can read on how to disable that so the request has to be a real
document?

Not a real important question as I still just playing around getting a feel
for the twisted framework and trying out simple things.

Karl
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020715/9117277f/attachment.htm 

From zooko at zooko.com  Mon Jul 15 15:10:54 2002
From: zooko at zooko.com (Zooko)
Date: Mon, 15 Jul 2002 16:10:54 -0300
Subject: [Twisted-Python] my first Twisted patch
In-Reply-To: Message from "Lewin, Karl E" <Karl.Lewin@BNSF.com> 
   of "Mon, 15 Jul 2002 13:02:07 CDT." <B90B981F6E7CD51195830002A5609B3279050B@ftwntexmp004.bnsf.com> 
References: <B90B981F6E7CD51195830002A5609B3279050B@ftwntexmp004.bnsf.com> 
Message-ID: <E17UBFG-0002KW-00@localhost>

Greetings, everyone!  I'm the leader of the Mnet project, http://mnet.sf.net/,
and I'm playing with Twisted for a few different reasons.  Here's my first
patch.

Regards,

Zooko

--- spread/cBanana.c	8 Jul 2002 05:13:40 -0000	1.12
+++ spread/cBanana.c	15 Jul 2002 17:41:00 -0000
@@ -604,7 +604,7 @@
   }
 
   if (!PyString_Check(newChunk)) {
-    printf("First arg was not a string\n");
+    printf("Second arg was not a string\n");
     Py_INCREF(Py_None);
     return Py_None;
   }



From sean at twistedmatrix.com  Mon Jul 15 15:47:43 2002
From: sean at twistedmatrix.com (Sean C. Riley)
Date: Mon, 15 Jul 2002 14:47:43 -0500
Subject: [Twisted-Python] _listenerDict
Message-ID: <E17UBot-0007Yt-00@zaibach.twistedmatrix.com>

in twisted.internet.app.py self._listenerDict is initialized as a list at line 87 but then re-initialized as a dict later on at line 479. It appears to be referenced as a dict everywhere except that first initialization... I assume it should be a dict?

If you unlistenTCP without bindPorts being called, i get a traceback saying the list self._listenerDict has no attribute "has_key".





From typo at soniq.net  Tue Jul 16 05:13:42 2002
From: typo at soniq.net (Paul Boehm)
Date: Tue, 16 Jul 2002 11:13:42 +0200
Subject: [Twisted-Python] spread.sturdy
Message-ID: <20020716091342.GA21934@soniq.net>

when i restart a PB server to which i've connected via spread.sturdy is
restarted i get the following traceback instead of a reconnect.

i can partially solve this by catching pb.ProtocolError inside spread.sturdy,
which seems to work, except that i get an AlreadyConnected error after the
the callRemote is reproduced after connecting.

does anyone know how to correctly fix this?

Traceback (most recent call last):
  File "./twisted/web/widgets.py", line 253, in display
    x = eval(elem, namespace, namespace)
  File "<string>", line 0, in ?

  File "./test.py", line 15, in getFilePerspective
    return ['<b>',
  File "./twisted/spread/sturdy.py", line 77, in callRemote
    return apply(self.reference.callRemote, (method,)+args, kw)
  File "./twisted/spread/pb.py", line 322, in callRemote
    return self.broker._sendMessage('',self.perspective, self.luid, name, args, kw)
  File "./twisted/spread/pb.py", line 739, in _sendMessage
    raise ProtocolError("Calling Stale Broker")
twisted.spread.pb.ProtocolError: Calling Stale Broker


thanks,
  paul



From a.d.stribblehill at durham.ac.uk  Tue Jul 16 07:01:56 2002
From: a.d.stribblehill at durham.ac.uk (Andrew Stribblehill)
Date: Tue, 16 Jul 2002 12:01:56 +0100
Subject: [Twisted-Python] NNTP server patch
Message-ID: <20020716110155.GL11878@womble.dur.ac.uk>

The attached patch adds NEXT and LAST functionality to the Twisted
NNTP server, and allows commands like HEAD, BODY, STAT and ARTICLE to
use the default current article.

It also fixes up the XHDR response when using the Pickle backend
from:

221 Header follows
1 ('Subject', 'Test foo 1')

to:

221 Header follows
1 Test foo 1


I donate the code to Glyph -- do with it as you will ;)
-- 
HUMBER THAMES
VARIABLE 3 IN WEST HUMBER AT FIRST, OTHERWISE NORTHERLY 4,
OCCASIONALLY 5 IN EAST THAMES. FAIR. MODERATE OR GOOD
-------------- next part --------------
diff -ur Twisted-0.19.0-orig/twisted/news/database.py Twisted-0.19.0/twisted/news/database.py
--- Twisted-0.19.0-orig/twisted/news/database.py	Sun Jun  2 05:45:03 2002
+++ Twisted-0.19.0/twisted/news/database.py	Tue Jul 16 11:00:01 2002
@@ -129,7 +129,7 @@
         if not a.getHeader('Message-ID'):
             s = str(time.time()) + a.body
             id = hexdigest(md5.md5(s)) + '@' + socket.gethostname()
-            a.putHeader('Message-ID', id)
+            a.putHeader('Message-ID', '<%s>' % id)
 
         if not a.getHeader('Bytes'):
             a.putHeader('Bytes', str(len(a.body)))
@@ -163,7 +163,7 @@
         r = []
         for i in self.db[group].keys():
             if low is None or i >= low and high is None or i <= high:
-                r.append((i, self.db[group][i].headers[header]))
+                r.append((i, self.db[group][i].getHeader(header)))
         return defer.succeed(r)
 
     def listGroupRequest(self, group):
diff -ur Twisted-0.19.0-orig/twisted/protocols/nntp.py Twisted-0.19.0/twisted/protocols/nntp.py
--- Twisted-0.19.0-orig/twisted/protocols/nntp.py	Tue Jun 18 15:32:02 2002
+++ Twisted-0.19.0/twisted/protocols/nntp.py	Tue Jul 16 11:07:37 2002
@@ -22,6 +22,7 @@
 import string, random, socket
 
 def parseRange(text):
+    # FIXME: should cope with '1-', '-443' and even '-'
     articles = string.split(text, '-')
     if len(articles) == 1:
         try:
@@ -292,32 +293,22 @@
             self.ip = "unknown"
         self.posting = 0
         self.currentGroup = None
-        self.currentArticle = None
+        self.currentIndex = None
         self.sendLine('200 server ready - posting allowed')
 
     def lineReceived(self, line):
 #        print line
-        # XXX - This is ugly.  How should I improve it?
         if self.posting == 1:
-            if line == '.':
-                self.posting = 0
-                group, article = self.currentGroup, self.message
-                del self.message
-
-                defer = self.factory.backend.postRequest(article)
-                defer.addCallbacks(self._gotPost, self._errPost)
-            else:
-                if line and line[0] == '.':
-                    line = '.' + line
-                self.message = self.message + line + '\r\n'
+            self._doingPost(line)
         else:
             parts = filter(None, string.split(string.strip(line)))
-            cmd, parts = string.upper(parts[0]), parts[1:]
-            if cmd in NNTPServer.COMMANDS:
-                func = getattr(self, 'do_%s' % cmd)
-                apply(func, (parts,))
-            else:
-                self.sendLine('500 command not recognized')
+            if len(parts):
+                cmd, parts = string.upper(parts[0]), parts[1:]
+                if cmd in NNTPServer.COMMANDS:
+                    func = getattr(self, 'do_%s' % cmd)
+                    apply(func, (parts,))
+                else:
+                    self.sendLine('500 command not recognized')
 
     def do_LIST(self, parts):
         if parts:
@@ -338,7 +329,17 @@
         else:
             defer = self.factory.backend.listRequest()
             defer.addCallbacks(self._gotList, self._errList)
-            
+
+    def _gotList(self, list):
+        # Currently a RFC 977 list - understand no arguments
+        self.sendLine('215 newsgroups in form "group high low flags"')
+        for i in list:
+            self.sendLine('%s %d %d %s' % i)
+        self.sendLine('.')
+
+    def _errList(self, error):
+        self.sendLine('%s' % str(error))
+
     def _gotSubscription(self, parts):
         self.sendLine('215 information follows')
         for i in parts:
@@ -357,15 +358,6 @@
     def _errOverview(self):
         self.sendLine('503 program error, function not performed')
 
-    def _gotList(self, list):
-        # Currently a RFC 977 list - understand no arguments
-        self.sendLine('215 newsgroups in form "group high low flags"')
-        for i in list:
-            self.sendLine('%s %d %d %s' % i)
-        self.sendLine('.')
-
-    def _errList(self, error):
-        self.sendLine('%s' % str(error))
 
     def do_LISTGROUP(self, parts):
         if len(parts):
@@ -384,9 +376,9 @@
         group, articles = parts
         self.currentGroup = group
         if len(articles):
-            self.currentArticle = articles[0]
+            self.currentIndex = int(articles[0])
         else:
-            self.currentArticle = None
+            self.currentIndex = None
 
         self.sendLine('211 list of article numbers follow')
         for i in articles:
@@ -396,9 +388,11 @@
     def _errListGroup(self):
         self.sendLine('502 no permission')
 
+
     def do_NEWSGROUPS(self, parts):
         pass
 
+
     def do_XOVER(self, parts):
         if self.currentGroup is None:
             self.sendLine('412 No news group currently selected')
@@ -422,19 +416,23 @@
     def _errXOver(self, error):
         self.sendLine('420 No article(s) selected')
 
+
     def do_XHDR(self, parts):
         if self.currentGroup is None:
             self.sendLine('412 No news group currently selected')
         else:
-            if len(parts) == 1:
-                if self.currentArticle is None:
+            if len(parts) == 0:
+                self.sendLine('501 header [range|MessageID]')
+            elif len(parts) == 1:
+                if self.currentIndex is None:
                     self.sendLine('420 No current article selected')
                     return
                 else:
                     header = parts[0]
-                    l = h = self.currentArticle
+                    l = h = self.currentIndex
             else:
                 header, articles = parts
+                # FIXME: articles may be a message-id
                 l, h = parseRange(articles)
 
             if l is h is None:
@@ -452,17 +450,32 @@
     def _errXHDR(self):
         self.sendLine('502 no permission')
 
+
     def do_POST(self, parts):
         self.posting = 1
         self.message = ''
         self.sendLine('340 send article to be posted.  End with <CR-LF>.<CR-LF>')
 
+    def _doingPost(self, line):
+        if line == '.':
+            self.posting = 0
+            group, article = self.currentGroup, self.message
+            del self.message
+
+            defer = self.factory.backend.postRequest(article)
+            defer.addCallbacks(self._gotPost, self._errPost)
+        else:
+            if line and line[0] == '.':
+                line = '.' + line
+            self.message = self.message + line + '\r\n'
+
     def _gotPost(self, parts):
         self.sendLine('240 article posted ok')
     
     def _errPost(self, parts):
         self.sendLine('441 posting failed')
 
+
     def do_GROUP(self, parts):
         defer = self.factory.backend.groupRequest(parts[0])
         defer.addCallbacks(self._gotGroup, self._errGroup)
@@ -470,55 +483,64 @@
     def _gotGroup(self, parts):
         name, num, high, low, flags = parts
         self.currentGroup = name
+        self.currentIndex = low
         self.sendLine('211 %d %d %d %s group selected' % (num, low, high, name))
     
     def _errGroup(self, group):
         self.sendLine('411 no such group')
 
+
     def do_ARTICLE(self, parts):
         if len(parts):
-            i = int(parts[0])
-            defer = self.factory.backend.articleRequest(self.currentGroup, i)
-            defer.addCallbacks(self._gotArticle, self._errArticle)
-        else:
-            self.sendLine('501 command parse error')
+            if parts[0][0] == '<':
+                # FIXME: Request for article by message-id not implemented
+                self.sendLine('501 ARTICLE <message-id> not implemented :(')
+            else:
+                i = int(parts[0])
+        else:
+            i = self.currentIndex
+        defer = self.factory.backend.articleRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotArticle, self._errArticle)
 
     def _gotArticle(self, parts):
         index, id, article = parts
-        self.currentArticle = article
-        self.sendLine('220 %d %s article' % (index, id))
+        self.currentIndex = index
+        self.sendLine('220 %d <%s> article' % (index, id))
         self.transport.write(article)
         self.sendLine('.')
 
     def _errArticle(self, article):
         self.sendLine('423 bad article number')
 
+
     def do_STAT(self, parts):
         if len(parts):
             i = int(parts[0])
-            defer = self.factory.backend.articleRequest(self.currentGroup, i)
-            defer.addCallbacks(self._gotStat, self._errStat)
         else:
-            self.sendLine('501 command parse error')
+            i = self.currentIndex
+        defer = self.factory.backend.articleRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotStat, self._errStat)
     
     def _gotStat(self, parts):
         index, id, article = parts
-        self.currentArticle = article
+        self.currentIndex = index
         self.sendLine('223 %d %s article retreived - request text separately' % (index, id))
 
     def _errStat(self, parts):
         self.sendLine('423 bad article number')
 
+
     def do_HEAD(self, parts):
         if len(parts):
             i = int(parts[0])
-            defer = self.factory.backend.headRequest(self.currentGroup, i)
-            defer.addCallbacks(self._gotHead, self._errHead)
         else:
-            self.sendLine('501 command parse error')
+            i = self.currentIndex
+        defer = self.factory.backend.headRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotHead, self._errHead)
     
     def _gotHead(self, parts):
         index, id, head = parts
+        self.currentIndex = index
         self.sendLine('221 %d %s article retrieved' % (index, id))
         self.transport.write(head + '\r\n')
         self.sendLine('.')
@@ -526,16 +548,18 @@
     def _errHead(self, head):
         self.sendLine('423 no such article number in this group')
 
+
     def do_BODY(self, parts):
         if len(parts):
             i = int(parts[0])
-            defer = self.factory.backend.bodyRequest(self.currentGroup, i)
-            defer.addCallbacks(self._gotBody, self._errBody)
         else:
-            self.sendLine('501 command parse error')
+            i = self.currentIndex
+        defer = self.factory.backend.bodyRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotBody, self._errBody)
 
     def _gotBody(self, parts):
         index, id, body = parts
+        self.currentIndex = index
         self.sendLine('221 %d %s article retrieved' % (index, id))
         self.transport.write(body + '\r\n')
         self.sendLine('.')
@@ -543,12 +567,28 @@
     def _errBody(self, body):
         self.sendLine('423 no such article number in this group')
 
+
+    # NEXT and LAST are just STATs that increment currentIndex first.
+    # Accordingly, use the STAT callbacks.
+    def do_NEXT(self, parts):
+        i = self.currentIndex + 1
+        defer = self.factory.backend.articleRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotStat, self._errStat)
+
+    def do_LAST(self, parts):
+        i = self.currentIndex - 1
+        defer = self.factory.backend.articleRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotStat, self._errStat)
+
+
     def do_MODE(self, parts):
         self.sendLine('200 Hello, you can post')
 
+
     def do_QUIT(self, parts):
         self.sendLine('205 goodbye')
         self.transport.loseConnection()
+
 
     def sendLine(self, line):
 #        print 'sending: ', line

From exarkun at meson.dyndns.org  Tue Jul 16 22:03:15 2002
From: exarkun at meson.dyndns.org (Jp Calderone)
Date: Tue, 16 Jul 2002 22:03:15 -0400
Subject: [Twisted-Python] NNTP server patch
In-Reply-To: <20020716110155.GL11878@womble.dur.ac.uk>
References: <20020716110155.GL11878@womble.dur.ac.uk>
Message-ID: <20020717020315.GA25378@meson.dyndns.org>

On Tue, Jul 16, 2002 at 12:01:56PM +0100, Andrew Stribblehill wrote:
> The attached patch adds NEXT and LAST functionality to the Twisted
> NNTP server, and allows commands like HEAD, BODY, STAT and ARTICLE to
> use the default current article.
> 
> It also fixes up the XHDR response when using the Pickle backend

> [snip]

  Excellent :)  It's been committed (modulo a couple tiny changes).  MUCH
appreciated... NNTP has been getting a little stale.  Messages should
persist between runs now, too.  Lemmie know if you're still having problems
with that.  One thing to note is that if you try to create a new tap and use
a pickle filename that already exists, it will re-use the existing pickle
and ignore your new options.

  Thanks again,

         Jp

-- 
|     This 
|   signature
| intentionally
|    8 lines
|     long.
|  (So sue me)
---
--
 9:50pm up 56 days, 22:36, 3 users, load average: 0.50, 0.28, 0.15
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 237 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020716/48041142/attachment.pgp 

From glyph at twistedmatrix.com  Wed Jul 17 19:15:26 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 17 Jul 2002 18:15:26 -0500 (CDT)
Subject: [Twisted-Python] spread.sturdy
In-Reply-To: <20020716091342.GA21934@soniq.net>
References: <20020716091342.GA21934@soniq.net>
Message-ID: <20020717.181526.21955754.glyph@twistedmatrix.com>


On Tue, 16 Jul 2002 11:13:42 +0200, Paul Boehm <typo at soniq.net> wrote:
> when i restart a PB server to which i've connected via spread.sturdy is
> restarted i get the following traceback instead of a reconnect.

I just checked in a fix that I *think* should fix your problem, but I don't
have a test case yet; let me know if current CVS fixes your issue.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020717/7c351edd/attachment.pgp 

From nils at paragon.no  Wed Jul 17 22:08:44 2002
From: nils at paragon.no (Nils R Grotnes)
Date: Thu, 18 Jul 2002 04:08:44 +0200
Subject: [Twisted-Python] A newbie experience. Chapter one.
Message-ID: <200207180408440370.0009C43C@mail.c2i.net>


I'm a newbie, both with Python and with Twisted. That means I probably
can't contribute as much as I want, but I believe there's one thing I can
do that most of you maybe can not; That is to describe how it really feels
to start with a very fresh (and simple?) mind. Here is one try.

While waiting for a stable Debian 3.0, I'm back in Windows where I have
learned most of what I know about programming and using computers. My
current machine is a Win2K Pro, and it's quite updated and stable. I got
Python 2.2.1 installed, and the latest Pythonwin too. I can't seem to find
a PYTHONPATH anywhere, but since pydocgui.pyw runs fine, I'd like to
believe that things has been installed well enough, this far.

Then I had my first head-scratcher. I've read most of what's available on
the Twisted website, and downloaded the zipped version of the source and
documentation. "Installing Twisted" told me that "If you are on Windows,
you may want to skip this and simply get the Windows Installer version of
Twisted from the download page." Since all I could find was the
Twisted-0.19.0.zip, I expected that zip-file to be the one. Silly me...

Unpacking it revealed no setup.exe or .msi, but fortunately another
procedure was described: "setup.py install". That sure did make something
happen, though I'm not sure everything worked. Still, a twisted folder
_was_ added to site-packages, but did it happen because I had unpacked
twisted-0.19.0 there, or because the (invisible) PYTHONPATH was ok?

Inspecting this new Twisted folder did make me feel a little better, it
looked very similar to my earlier Debian install. Now to follow the final
suggestion from "Installing Twisted". After figuring out that the
"admin/runtests" was still back in the old folder, the next step was to get
it to run.

In the end, the command "c:\python22\python admin/runtests" worked, which
made me think I really should have added that PYTHONPATH anyway...

Four failures and four errors doesn't seem much, though the test window
itself bombing was less impressive. Running the test again only led to 2
failures. Setting PYTHONPATH in the "Command Prompt"-shell to
"C:\Python22\Lib\site-packages\Twisted-0.19.0\", running "setup.py install"
again, then running another full test led to another failure removed. I
think I'll leave the head-scratching over that strangeness to the pro's.

Still, I have had some of Twisted running! There's hope.

Nils

(Logfile with some extra comments attached.)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: testlog.zip
Type: application/zip
Size: 5909 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020718/1f222f9e/attachment.zip 

From carmstro at twistedmatrix.com  Thu Jul 18 22:06:32 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 18 Jul 2002 22:06:32 -0400
Subject: [Twisted-Python] A newbie experience. Chapter one.
In-Reply-To: <200207180408440370.0009C43C@mail.c2i.net>
References: <200207180408440370.0009C43C@mail.c2i.net>
Message-ID: <1027044393.11249.22.camel@radii>

On Wed, 2002-07-17 at 22:08, Nils R Grotnes wrote:

> I can't seem to find
> a PYTHONPATH anywhere, but since pydocgui.pyw runs fine, I'd like to
> believe that things has been installed well enough, this far.

PYTHONPATH is an environment variable. If you use a flavor of Windows
NT, you can set environment variables through a GUI by right-clicking on
"My Computer", selecting "Properties", then selecting the "Adanced" tab,
and then clicking the "Environment Variables" button (IIRC - this is
from memory). If you use something else, I'm not sure how you do it. :-)
(I think you have to edit autoexec.bat or something silly).

> Then I had my first head-scratcher. I've read most of what's available on
> the Twisted website, and downloaded the zipped version of the source and
> documentation. "Installing Twisted" told me that "If you are on Windows,
> you may want to skip this and simply get the Windows Installer version of
> Twisted from the download page." Since all I could find was the
> Twisted-0.19.0.zip, I expected that zip-file to be the one. Silly me...

Terribly sorry about this: I don't think there have been any .exe-style
installers for a few versions. I don't have the proper development
environment on Windows, and Glyph was doing them for a couple releases,
but he's far too busy to do it consistently. I'd really like to start
finding people to consistently delegate stuff like this to for new
releases (My release procedure is involved enough, and I'm lazy enough,
that I don't really want to add this extra work to it). So if anyone's
willing to consistently do this, I'd greatly appreciate it. :-) Also, if
anyone wants to maintain other packages  (RPMs? etc), please get in
touch with me. 

> again, then running another full test led to another failure removed. I
> think I'll leave the head-scratching over that strangeness to the pro's.

Ok, this is a known issue with threading on Win32. IIRC from listening
to the win32 hackers, it's one of those evil horrible things that makes
you really hate Microsoft and will take all amounts of effort to fix.
Anyway, it probably doesn't matter unless you need to use threading on
Win32. (Can someone else comment on this?)
 
> Still, I have had some of Twisted running! There's hope.

Thank you for the email! It's great to hear from newbies, especially
when they describe the pains and bugs that they've found in our
software. Hopefully by 1.0 Twisted will have a nice installation
experience on all platforms. :-)

--
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From jason at asbahr.com  Thu Jul 18 23:57:10 2002
From: jason at asbahr.com (Jason Asbahr)
Date: Thu, 18 Jul 2002 22:57:10 -0500
Subject: [Twisted-Python] OSCon
Message-ID: <99AF291C-9ACB-11D6-8942-000393753460@asbahr.com>

Curious --

Anyone else on the Twisted list going to the O'Reilly Open Source 
conference next week?

Cheers,

Jason




From nils at paragon.no  Fri Jul 19 00:40:56 2002
From: nils at paragon.no (Nils R Grotnes)
Date: Fri, 19 Jul 2002 06:40:56 +0200
Subject: [Twisted-Python] A newbie experience. Chapter one.
In-Reply-To: <1027044393.11249.22.camel@radii>
References: <200207180408440370.0009C43C@mail.c2i.net>
 <1027044393.11249.22.camel@radii>
Message-ID: <200207190640560120.000959CB@mail.c2i.net>

Hi again!

>> I can't seem to find a PYTHONPATH anywhere
>PYTHONPATH is an environment variable. If you use a flavor of Windows
>NT, you can set environment variables through a GUI by right-clicking on
>"My Computer", selecting "Properties", then selecting the "Adanced" tab,
>and then clicking the "Environment Variables" button (IIRC - this is
>from memory).

You have a good memory, then. I did do that in the end. An interesting
thing is that it seems this entry hasn't survived a reboot, but that may be
because I put it under "System variables", instead of "User variables".
I'll do some testing.

>> you may want to skip this and simply get the Windows Installer version
of
>> Twisted from the download page."
>Terribly sorry about this: I don't think there have been any .exe-style
>installers for a few versions.

Not to worry, setup.py must have done some good. I'm currently testing
different things for my next "chapter", but so far there's nothing to
complain about.

>finding people to consistently delegate stuff like this to for new
>releases (My release procedure is involved enough, and I'm lazy enough,
>that I don't really want to add this extra work to it). So if anyone's
>willing to consistently do this, I'd greatly appreciate it. :-)

I would like to, but can't promise much consistency I'm afraid.

>> again, then running another full test led to another failure removed.
>Ok, this is a known issue with threading on Win32.

Oh well. I wonder what they did to make things like MTS work with high
loads then? I'll keep the problem in mind though, and make some notes if I
stumble into useful information about this issue.

>Anyway, it probably doesn't matter unless you need to use threading on
>Win32. (Can someone else comment on this?)

A registry monitor I once tried to make, failed to work as intended because
of lack of threading support (in VB). Probably very easy to do in C though.
But doing things async (like in Medusa) should still work, right?
 
>> Still, I have had some of Twisted running! There's hope.
>Thank you for the email! It's great to hear from newbies, especially
>when they describe the pains and bugs that they've found in our
>software. Hopefully by 1.0 Twisted will have a nice installation
>experience on all platforms. :-)

If I can help in some small way with that, I'd be thrilled.

Nils





From carmstro at twistedmatrix.com  Fri Jul 19 01:17:31 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 19 Jul 2002 01:17:31 -0400
Subject: [Twisted-Python] API docs
Message-ID: <1027055868.11351.33.camel@radii>

I was talking to MetaCosm, and he said the template for API docs he uses
in his professional projects is like so:

"""
Usage:
   foo() -> baz

Examples:
   if blah(): foo()

Big Picture: (!!)
   This class is meant to be used in a Quuxer, and you should usually
override the getBaz method to return a Spam instance, although it's not
required.

NOTES:
  This class is currently in a state of flux; it will soon be
refactored, so watch out for API changes

"""

etc.

The main thing here is "Big Picture", which should give the method/class
some context. NOTES is mainly for temporary stuff; It's probably not
crucial to be in the docstrings (probably it should just be in near-by
#XXX comments). So yeah, I urge people who are writing docstrings to put
stuff into context; I'll try to do the same thing. Whether or not you
use a similar format isn't really important, but it seems sane enough to
me. We'll probably be doing a lot of this during the 0.99.0 cycle, but
it's never too early to start improving documentation :)

Anyway, enough rambling: off to bed with me.

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Fri Jul 19 01:50:08 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 19 Jul 2002 00:50:08 -0500 (CDT)
Subject: [Twisted-Python] unit tests
Message-ID: <20020719.005008.116349366.glyph@twistedmatrix.com>


On python2.1, cvs pycrypto and cvs twisted, I get a warning about HMAC not
being supported, and the unit test halt on twisted.conch tests
(testOurServerOurClient).

On python2.2 the tests seem to work fine.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020719/14717dcf/attachment.pgp 

From martin at strakt.com  Fri Jul 19 05:21:14 2002
From: martin at strakt.com (Martin =?ISO-8859-1?Q?Sj=F6gren?=)
Date: 19 Jul 2002 11:21:14 +0200
Subject: [Twisted-Python] Problem in twisted.internet.tcp when using ssl
In-Reply-To: <3D2C4CEE.5080603@itamarst.org>
References: <1026312621.15179.7.camel@ratthing-b3cf> 
	<3D2C4CEE.5080603@itamarst.org>
Message-ID: <1027070474.709.89.camel@ratthing-b3cf>

ons 2002-07-10 klockan 17.04 skrev Itamar Shtull-Trauring:
> Martin Sj?gren wrote:
> 
> > The writeSomeData method of Connection objects may sometimes be called
> > with a zero length buffer. This works fine when using plain TCP, but
> > when using ssl, this will cause a ZeroReturnError (which is completely
> > bogus!) and everything...well...blows up.
> 
> In the interest of not breaking anything which might possibly, however 
> unlikely, depend on tcp.py's behaviour, I've made this change in ssl.py. 
> So cvs up and tell me if it's ok now.

I've looked into this a bit more, and found the following in the man
page for write(2) on Solaris.

"""
If nbyte is 0, write() will  return  0  and  have  no  other
results  if  the  file  is  a  regular  file; otherwise, the
results are unspecified.
"""

My guess is that you would never want to call write or send with a
zero-length string if you want to be portable.


Regards,
Martin

-- 
Martin Sj?gren
  martin at strakt.com              ICQ : 41245059
  Phone: +46 (0)31 7710870       Cell: +46 (0)739 169191
  GPG key: http://www.strakt.com/~martin/gpg.html



From m at moshez.org  Thu Jul 18 02:02:36 2002
From: m at moshez.org (Moshe Zadka)
Date: 18 Jul 2002 06:02:36 -0000
Subject: [Twisted-Python] fwd: Accepted twisted 0.19.0-1 (i386 source all)
Message-ID: <20020718060236.1430.qmail@green.zadka.com>

Rejoice!

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Format: 1.7
Date: Wed, 19 Jun 2002 18:01:50 +0300
Source: twisted
Binary: python2.2-twisted-bin python2.1-twisted python2.2-twisted python2.1-twisted-bin python-twisted twisted-doc
Architecture: source i386 all
Version: 0.19.0-1
Distribution: unstable
Urgency: low
Maintainer: Moshe Zadka <moshez at debian.org>
Changed-By: Moshe Zadka <moshez at debian.org>
Description: 
 python-twisted - Event-based framework for internet applications. (dummy package)
 python2.1-twisted - Event-based framework for internet applications. (Python 2.1)
 python2.1-twisted-bin - Event-based framework for internet applications
 python2.2-twisted - Event-based framework for internet applications.
 python2.2-twisted-bin - Event-based framework for internet applications
 twisted-doc - The official documentation of Twisted.
Changes: 
 twisted (0.19.0-1) unstable; urgency=low
 .
   * New upstream release
   * Debian packaging changes:
     * split python2.x-twisted into python2.x-twisted and python2.x-twisted-bin
     * unfortunately, because of distutils mind boggling stupidity, it will
       do most of the work for building the arch-independant utilities when
       building the c module
     * fortunately, twisted will now take up much less room in the archive
Files: 
 1e64952d32d00517872704330398b788 674 net extra twisted_0.19.0-1.dsc
 29c14719cf82ffe40b97e2a227de8e6f 1291330 net extra twisted_0.19.0.orig.tar.gz
 269010e99e0f252bd1e8685d3472e3d6 419 net extra twisted_0.19.0-1.diff.gz
 88be6f7da0921a88e4e9d72ab66cdd5b 603088 net extra twisted-doc_0.19.0-1_all.deb
 464fef292e3846313fe3f3ffb005f64d 4170 net extra python-twisted_0.19.0-1_all.deb
 4c0db37eb30a250761fb37a2cb485362 452866 net extra python2.1-twisted_0.19.0-1_all.deb
 68a6f5731596742821f07887ddba98cd 452514 net extra python2.2-twisted_0.19.0-1_i386.deb
 2c6cc82dc23bd372652e08e005032cd9 23132 net extra python2.1-twisted-bin_0.19.0-1_i386.deb
 987e9f68c1170736857b5ae4a668661d 24456 net extra python2.2-twisted-bin_0.19.0-1_i386.deb

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE9Ms1Bx/ymNkbQG9YRAst8AKDEebCfFfu1NyHuUGZ87oM3DJmetACgoS4x
0csvqeYWrNc86h4awHGgHcg=
=D15L
-----END PGP SIGNATURE-----


Accepted:
python-twisted_0.19.0-1_all.deb
  to pool/main/t/twisted/python-twisted_0.19.0-1_all.deb
python2.1-twisted-bin_0.19.0-1_i386.deb
  to pool/main/t/twisted/python2.1-twisted-bin_0.19.0-1_i386.deb
python2.1-twisted_0.19.0-1_all.deb
  to pool/main/t/twisted/python2.1-twisted_0.19.0-1_all.deb
python2.2-twisted-bin_0.19.0-1_i386.deb
  to pool/main/t/twisted/python2.2-twisted-bin_0.19.0-1_i386.deb
python2.2-twisted_0.19.0-1_i386.deb
  to pool/main/t/twisted/python2.2-twisted_0.19.0-1_i386.deb
twisted-doc_0.19.0-1_all.deb
  to pool/main/t/twisted/twisted-doc_0.19.0-1_all.deb
twisted_0.19.0-1.diff.gz
  to pool/main/t/twisted/twisted_0.19.0-1.diff.gz
twisted_0.19.0-1.dsc
  to pool/main/t/twisted/twisted_0.19.0-1.dsc
twisted_0.19.0.orig.tar.gz
  to pool/main/t/twisted/twisted_0.19.0.orig.tar.gz


-- 
To UNSUBSCRIBE, email to debian-devel-changes-request at lists.debian.org
with a subject of "unsubscribe". Trouble? Contact listmaster at lists.debian.org




From dmarko at digi-trade.cz  Fri Jul 19 03:51:58 2002
From: dmarko at digi-trade.cz (David Marko)
Date: Fri, 19 Jul 2002 09:51:58 +0200
Subject: [Twisted-Python] Portforward seems not work correctly
Message-ID: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain>

Hello,
I have tried to use portforward via 
mktap portforward -p 8090 -h 192.168.2.3 -d 80 
twistd -f portforward.tap

It starts and seems to listen but when trying  connect(with web browser) 
to forwarded port it seems to freeze, sometimes it show page but very 
slowly. Do I something wrong? Or is it inteded for some other purposes? I 
have tested this on WIn2000 and FreeBSD 4.5 with the same results.

David Marko
dmarko at tcl-digitrade.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020719/7a14dfa2/attachment.htm 

From glyph at twistedmatrix.com  Fri Jul 19 06:42:10 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 19 Jul 2002 05:42:10 -0500 (CDT)
Subject: [Twisted-Python] Portforward seems not work correctly
In-Reply-To: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain>
Message-ID: <20020719.054210.74750890.glyph@twistedmatrix.com>


On Fri, 19 Jul 2002 09:51:58 +0200, "David Marko" <dmarko at digi-trade.cz> wrote:
> It starts and seems to listen but when trying  connect(with web browser) 
> to forwarded port it seems to freeze, sometimes it show page but very 
> slowly. Do I something wrong? Or is it inteded for some other purposes? I 
> have tested this on WIn2000 and FreeBSD 4.5 with the same results.

I know about this bug and I have a fix for it, although it's heavily hacked up
because I was working around MacOS X kernel bugs related to WebDAV at the time
(long story...)

I'll try to check in a fix soon.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020719/4132c974/attachment.pgp 

From z3p at twistedmatrix.com  Fri Jul 19 08:29:11 2002
From: z3p at twistedmatrix.com (z3p at twistedmatrix.com)
Date: Fri, 19 Jul 2002 08:29:11 -0400
Subject: [Twisted-Python] unit tests
Message-ID: <238110-220027519122911259@M2W087.mail2web.com>

Yes, the HMAC module depends on Py2.2 because of changes in the hashing
modulues.  I sent a patch to amk, the pycrypto maintainer, so that will be
fixed in the next release.  If it's not in by the time I get to work, I'll
commit it to the pycrypto repository myself.
-p

Original Message:
-----------------
From: Glyph Lefkowitz glyph at twistedmatrix.com
Date: Fri, 19 Jul 2002 00:50:08 -0500 (CDT)
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] unit tests



On python2.1, cvs pycrypto and cvs twisted, I get a warning about HMAC not
being supported, and the unit test halt on twisted.conch tests
(testOurServerOurClient).

On python2.2 the tests seem to work fine.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |


--------------------------------------------------------------------
mail2web - Check your email from the web at
http://mail2web.com/ .





From arashi1 at pd.jaring.my  Fri Jul 19 08:18:01 2002
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Fri, 19 Jul 2002 20:18:01 +0800
Subject: [Twisted-Python] WebDAV?
In-Reply-To: <20020719.054210.74750890.glyph@twistedmatrix.com>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com>
Message-ID: <200207192018.01157.arashi1@pd.jaring.my>

On Friday 19 July 2002 18:42, Glyph Lefkowitz wrote:
>
> I know about this bug and I have a fix for it, although it's heavily hacked
> up because I was working around MacOS X kernel bugs related to WebDAV at
> the time (long story...)
>

You have webdav support in twisted too? I'm looking at the source (I've got 
0.19 'final') and I don't see webdav. Where is it?

btw. out of curiosity,
a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
"zopista"...what's a twisted enthusiast? "twista"?

-- 
Regards,
Mukhsein Johari



From arashi1 at pd.jaring.my  Fri Jul 19 09:04:05 2002
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Fri, 19 Jul 2002 21:04:05 +0800
Subject: [Twisted-Python] API docs - and examples
In-Reply-To: <1027055868.11351.33.camel@radii>
References: <1027055868.11351.33.camel@radii>
Message-ID: <200207192104.05786.arashi1@pd.jaring.my>

On Friday 19 July 2002 13:17, Christopher Armstrong wrote:
> I was talking to MetaCosm, and he said the template for API docs he uses
> in his professional projects is like so:
>
> """
> Usage:
>    foo() -> baz
>
> Examples:
>    if blah(): foo()
>
> Big Picture: (!!)
>    This class is meant to be used in a Quuxer, and you should usually
> override the getBaz method to return a Spam instance, although it's not
> required.
>
> NOTES:
>   This class is currently in a state of flux; it will soon be
> refactored, so watch out for API changes
>
> """
>
> etc.
>
> The main thing here is "Big Picture", which should give the method/class
> some context. NOTES is mainly for temporary stuff; It's probably not
> crucial to be in the docstrings (probably it should just be in near-by
> #XXX comments). So yeah, I urge people who are writing docstrings to put
> stuff into context; I'll try to do the same thing. Whether or not you
> use a similar format isn't really important, but it seems sane enough to
> me. We'll probably be doing a lot of this during the 0.99.0 cycle, but
> it's never too early to start improving documentation :)
>

Yes, I fully agree here! Without the big picture it is difficult to determine 
the contexts of all modules and classes - especially for newbie "twistas". 
Also, we need some contextual examples in the api docs itself. A full blown 
example should be (and generally is)  found in doc/examples.

Speaking of examples, could the author of the examples please add comments and 
some explanations of the examples? I'm sure it's all quite obvious to the 
author but for newbies, it's a bit too terse. Especially when your head is 
till spinning with banana spreads and the like. Jelly? What _is_ twistd? 
Should there be only one twistd running with multiple "protocol handlers" or 
one twistd running per protocol?

With some of the examples, I find myself saying: "What? That's it? It can't be 
that simple! Am I missing something?" Some explanations in the code 
(comments) would go a long way to solving this.

Doc problems:
---------------
Some of the newer documentation is quite good in the sense that it hints at a 
lot but its a bit confusing. The stuff about web-widgets and dom 
templates...It's starts out really great but ends before it should! :-)

The widgets.html doc for example. It says that the code in the Example.tar.gz 
explains why you get "No Resource" error when you first start it up. Erm...I 
looked at the code and no where does it say why. And what to do afterwards. I 
still don't understand how web-widgets work! Where do you then point the 
browser?

Also, what's a reactor? Is there some other doc to explain the concept of 
reactors? Would you use defereds in a web application? When and why?

As you can see, there are problems with the docs. I understand the main 
twistas are too busy (insane is more appropriate!) with twisted itself, to 
write more docs. Honestly, I would _love_ to write some docs, tutorials and 
howtos, if only I could understand the thing myself!

-- 
Regards,
Mukhsein Johari



From twisted at itamarst.org  Fri Jul 19 09:00:16 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 19 Jul 2002 09:00:16 -0400
Subject: [Twisted-Python] unit tests
References: <20020719.005008.116349366.glyph@twistedmatrix.com>
Message-ID: <3D380D60.4080603@itamarst.org>

Glyph Lefkowitz wrote:

> On python2.1, cvs pycrypto and cvs twisted, I get a warning about HMAC not
> being supported, and the unit test halt on twisted.conch tests
> (testOurServerOurClient).

hmac only works in 2.2. Paul has, I think, submitted patches to pycrypto 
to make
it work in 2.1 as well.





From bruce at cubik.org  Fri Jul 19 09:17:46 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Fri, 19 Jul 2002 07:17:46 -0600
Subject: [Twisted-Python] API docs - and examples
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my>
Message-ID: <3D38117A.5090300@cubik.org>

Mukhsein Johari wrote:
> Also, what's a reactor? Is there some other doc to explain the concept of 
> reactors?

There's a start of a doc for this in CVS as doc/howto/reactor-basics.html

I have a version of the docs from CVS online that I use for proofreading 
as I edit and so on, so you can view that doc from there:

   http://day.cubik.org/~bruce/tmc/documents/howto/reactor-basics

It needs to improve and cover a lot more, but it is a start.

  - Bruce




From carmstro at twistedmatrix.com  Fri Jul 19 09:16:48 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 19 Jul 2002 08:16:48 -0500
Subject: [Twisted-Python] WebDAV?
In-Reply-To: <200207192018.01157.arashi1@pd.jaring.my>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com> <200207192018.01157.arashi1@pd.jaring.my>
Message-ID: <20020719131648.GA24650@twistedmatrix.com>

On Fri, Jul 19, 2002 at 08:18:01PM +0800, Mukhsein Johari wrote:
> btw. out of curiosity,
> a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
> "zopista"...what's a twisted enthusiast? "twista"?

twisted.minion. :-)




From glyph at twistedmatrix.com  Fri Jul 19 10:01:34 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 19 Jul 2002 09:01:34 -0500 (CDT)
Subject: [Twisted-Python] WebDAV?
In-Reply-To: <200207192018.01157.arashi1@pd.jaring.my>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain>
	<20020719.054210.74750890.glyph@twistedmatrix.com>
	<200207192018.01157.arashi1@pd.jaring.my>
Message-ID: <20020719.090134.23012115.glyph@twistedmatrix.com>


On Fri, 19 Jul 2002 20:18:01 +0800, Mukhsein Johari <arashi1 at pd.jaring.my> wrote:

> You have webdav support in twisted too? I'm looking at the source (I've got 
> 0.19 'final') and I don't see webdav. Where is it?

Right now, nowhere.  One day I might check something in, but currently I have
nothing but some grotty, nasty debugging tools to help me figure out what a
working WebDAV server sends to a working WebDAV client; the only thing that
I've proven so far is that the term "working" is *very* loosely applied in both
of those phrases.

> btw. out of curiosity,
> a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
> "zopista"...what's a twisted enthusiast? "twista"?

The most frequently applied term I've heard is "twister".  I'd sure like to
have occasion to need a term which refers to someone who is a Twisted
enthusiast who isn't directly on the development team ;-).

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020719/83eff8df/attachment.pgp 

From glyph at twistedmatrix.com  Fri Jul 19 10:04:28 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 19 Jul 2002 09:04:28 -0500 (CDT)
Subject: [Twisted-Python] WebDAV?
In-Reply-To: <20020719131648.GA24650@twistedmatrix.com>
References: <20020719.054210.74750890.glyph@twistedmatrix.com>
	<200207192018.01157.arashi1@pd.jaring.my>
	<20020719131648.GA24650@twistedmatrix.com>
Message-ID: <20020719.090428.99206071.glyph@twistedmatrix.com>


On Fri, 19 Jul 2002 08:16:48 -0500, Chris Armstrong <carmstro at twistedmatrix.com> wrote:
> > [snip "what do we call people who like twisted?"]
> twisted.minion. :-)

This may have more to do with the fact that I'm gathering an eccentric cult of
personality almost as fast as Twisted is acquiring new enthusiasts.  Not that
understanding Twisted *requires* a fanatic, dogged analyisis of my personal
life... but it helps.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020719/cbc9ec88/attachment.pgp 

From twisted at itamarst.org  Fri Jul 19 09:58:51 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 19 Jul 2002 09:58:51 -0400
Subject: [Twisted-Python] Problem in twisted.internet.tcp when using ssl
References: <1026312621.15179.7.camel@ratthing-b3cf> 	<3D2C4CEE.5080603@itamarst.org> <1027070474.709.89.camel@ratthing-b3cf>
Message-ID: <3D381B1B.60700@itamarst.org>

Martin Sj?gren wrote:

> I've looked into this a bit more, and found the following in the man
> page for write(2) on Solaris.
> 
> """
> If nbyte is 0, write() will  return  0  and  have  no  other
> results  if  the  file  is  a  regular  file; otherwise, the
> results are unspecified.

Well, we're using send(2), as far as I know, not write(2) - and the man 
pages for send(2) don't say anything about 0 length messages.




From glyph at twistedmatrix.com  Fri Jul 19 10:40:00 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 19 Jul 2002 09:40:00 -0500 (CDT)
Subject: [Twisted-Python] API docs - and examples
In-Reply-To: <200207192104.05786.arashi1@pd.jaring.my>
References: <1027055868.11351.33.camel@radii>
	<200207192104.05786.arashi1@pd.jaring.my>
Message-ID: <20020719.094000.00927315.glyph@twistedmatrix.com>

On Fri, 19 Jul 2002 21:04:05 +0800, Mukhsein Johari <arashi1 at pd.jaring.my> wrote:
> On Friday 19 July 2002 13:17, Christopher Armstrong wrote:
> > I was talking to MetaCosm, and he said the template for API docs he uses
> > in his professional projects is like so:

> > The main thing here is "Big Picture", which should give the method/class
> > some context. NOTES is mainly for temporary stuff; It's probably not
> > crucial to be in the docstrings (probably it should just be in near-by
> > #XXX comments). So yeah, I urge people who are writing docstrings to put
> > stuff into context; I'll try to do the same thing. Whether or not you
> > use a similar format isn't really important, but it seems sane enough to
> > me. We'll probably be doing a lot of this during the 0.99.0 cycle, but
> > it's never too early to start improving documentation :)

Does epydoc support @rationale or something?  That would be handy. :)

"Big picture" stuff should probably also have its own directory in the doc/
tree too -- most other projects have a doc/design/ (or similar) which describes
things like this.  My tragic allergy to formal process has prevented me from
doing enough of this so far; however, now that the cognitive dust has started
to settle, I think that I could venture in and write some design documentation.

I don't think this is really important in the 1.0 release process or the other
things I'm working on at the moment, so it will have to wait a little while.
Is it important to do soon?  Remember also that queries that show me which
internal design ideas are blatantly obvious and which require some more
elucidation are helpful in prioritizing them.

> Yes, I fully agree here! Without the big picture it is difficult to determine 
> the contexts of all modules and classes - especially for newbie "twistas". 
> Also, we need some contextual examples in the api docs itself. A full blown 
> example should be (and generally is)  found in doc/examples.

doc/howto/listings is a better-documented source of that sort of thing.

> Speaking of examples, could the author of the examples please add comments and 
> some explanations of the examples?

In general a good idea, but just in case anybody who wants to check in docs is
listening, I'll respond to your particular questions...

> Jelly?

    http://twistedmatrix.com/products/spread

Anything more specific you need to know?

> What _is_ twistd?

Wow.  I was pretty surprised to find that there is no quick answer to this
question so I'll write one here :-).

'twistd' is the Twisted Daemon.  It is a simple tool designed in a UNIX and
command-line friendly way; however, it is portable to many environments
(including Win32, and even Jython!).  twistd can be used to load multiple
formats (pickle, marmalade XML, "AOT" python source) of serialized twisted
application objects and run them.  Most persistent processes in Twisted are run
using the 'twistd' script.  The notable exception to this rule is currently
graphical client programs.

The "big picture" here is that in the future, twistd may have graphical or
other platform-specific cousins which are designed to work with a particular
toolkit or host operating system.  For example, a gtk-specific mainpoint, or a
win32 service GUI which generalizes some tasks.  My goal is that eventually
_all_ Twisted-ly correct programs will be able to plug in to multiple
main-points that are appropriate to different situations.  (My short term
incentive for this is I want a GladeReactor which displays in an open window
all the open connections and some brief statistics on them in real-time; this
would be useful for debugging certain kinds of application.)

> Should there be only one twistd running with multiple "protocol handlers" or
> one twistd running per protocol?

This *really* depends on your application and your site.  In general, if you're
using twistd, you want either

  1. only one port (in this case, normally PB or HTTP) open, accessing different services
  2. multiple ports (SMTP, POP3, DNS...) open, integrating with the same service
  3. some combination of 1. and 2.

I imagine that the most common case is 3., with 1. running a close second.
Even in the case of 1., you generally want to communicate with *other* web or
PB servers, over either web.distrib or twisted.sister.

In some cases, I just use twisted for the one protocol/one process/one service
model; but that's just because I know it well, it's installed on all my
hardware, and it takes about an eighth of a second to configure a new webserver
that does what I need for a particular box ;-).

> With some of the examples, I find myself saying: "What? That's it? It can't be 
> that simple! Am I missing something?" Some explanations in the code 
> (comments) would go a long way to solving this.

No really, it is that simple.

> Some of the newer documentation is quite good in the sense that it hints at a
> lot but its a bit confusing. The stuff about web-widgets and dom
> templates...It's starts out really great but ends before it should! :-)

We're working on it, but thanks for the feedback!  There has been a big push
for more documentation recently, as Twisted is starting to see more general
applicability and some of the important, core APIs are nearing finalization.
We're not quite there yet.

> The widgets.html doc for example. [...]

Widgets is getting slowly deprecated in favor of the new domtemplate stuff.
(In many ways, they do the same thing.)  It still remains to be seen whether
widgets still has some usefulness beyond what the domtemplate/domwidgets
approach has brought; I am going to be working with the web stuff very soon and
I hope to verify this, and make a device-independent version of
web.widgets.Form (and renderers for the various DOM stuff) before completely
deprecating web.widgets.

> Also, what's a reactor? Is there some other doc to explain the concept of
> reactors?

Among others,

    http://www.cs.vu.nl/~eliens/online/oo/I/2/reactor.html

I agree that Twisted needs its own doc, but the Twisted "Reactor" interfaces
are based around the (relatively) well-known design pattern for event handling.
You shouldn't have to worry too much about the Reactor if you're writing an
application using Twisted's high-level facilities.

> Would you use deferreds in a web application? When and why?

Yes.

When: If you have a web application that needs to do anything that will take a little
while and/or require some network communication, Deferreds are the preferred
way to do this in Twisted.

Why: twisted.web.widgets and twisted.web.domtemplate (and therefore, I believe,
domwidgets, though I'm not absolutely sure...) will handle a Deferred as a
return value and Do The Right Thing.  So we make it nice and convenient for
you; the added benefit of this is that your web application doesn't have to
worry about managing lock contention or thread pools.

Things like twisted.enterprise.adbapi, meant to do potentially long-running,
blocking operations, will typically return a deferred, making it even easier to
take advantage of the convenience in the twisted.web deferred handling.

> As you can see, there are problems with the docs. I understand the main 
> twistas are too busy (insane is more appropriate!) with twisted itself, to 
> write more docs.

Insane is right.  I can't even keep up with the commits list myself any more.

> Honestly, I would _love_ to write some docs, tutorials and howtos, if only I
> could understand the thing myself!

Keep these great questions coming, they help.  At least we could point other
newbies at the mailing list archive after they've been answered.  It would be
an even bigger help if you could organize some of the answers and submit them
as docs.

Hope this helps,

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020719/7a3e6da8/attachment.pgp 

From levi at gis.net  Fri Jul 19 15:53:43 2002
From: levi at gis.net (Levi)
Date: Fri, 19 Jul 2002 15:53:43 -0400
Subject: [Twisted-Python] Re: Offtopic "Twista" (was WebDAV?)
In-Reply-To: <200207192018.01157.arashi1@pd.jaring.my>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com> <200207192018.01157.arashi1@pd.jaring.my>
Message-ID: <20020719195343.GA2586@pest>

On Fri, Jul 19, 2002 at 08:18:01PM +0800, Mukhsein Johari wrote:
> a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
> "zopista"...what's a twisted enthusiast? "twista"?

As an Amature Linguist and Hacker, I couldn't resist...

It's not always that easy. A Linux enthusiast is a "Penguista", which
I belive is the origin of Hackish usage of the '-sta' or '-ista' suffix. Also
note that "Penguista" strips the final consonat, but the other (and, I belive,
later) examples don't. I've also seen "Penguinista", but I think that's just
retconning to match the others (in that case it really ought to be
"Linuxista").

"Twista" is fun in that it can be claimed to be derived from either:
1) A not too unusual pronouciation of "Twister". A twister, being litealy
one-who-twists, is one of the people that "twist" python to produce
"Twisted Python".
2) The -ista suffix, placed so that the "ist" parts overlap. This has the
effect of nuking the last sylable. Both of which appear to be true to
"Penguista", in wich the "sta" apperares following the orignal "i", and the
final "n" is lost. (Maby losing a whole sylable makes up for the other not
losing any letters).

-Levi



From carmstro at twistedmatrix.com  Fri Jul 19 16:11:36 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 19 Jul 2002 15:11:36 -0500
Subject: [Twisted-Python] Re: Offtopic "Twista" (was WebDAV?)
In-Reply-To: <20020719195343.GA2586@pest>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com> <200207192018.01157.arashi1@pd.jaring.my> <20020719195343.GA2586@pest>
Message-ID: <20020719201136.GA13375@twistedmatrix.com>

On Fri, Jul 19, 2002 at 03:53:43PM -0400, Levi wrote:
> On Fri, Jul 19, 2002 at 08:18:01PM +0800, Mukhsein Johari wrote:
> > a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
> > "zopista"...what's a twisted enthusiast? "twista"?

> "Twista" is fun in that it can be claimed to be derived from either:
> 1) A not too unusual pronouciation of "Twister". A twister, being litealy
> one-who-twists, is one of the people that "twist" python to produce
> "Twisted Python".

Being the semi-official "Twista"-who-corrects-usage-of-the-old-Twisted-name, I
must inform you that Twisted is no longe "Twisted Python", but simply
"Twisted".

Thank you, and have a nice day.




From steve.waterbury at gsfc.nasa.gov  Fri Jul 19 17:00:35 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Fri, 19 Jul 2002 17:00:35 -0400
Subject: [Twisted-Python] More newbie questions [apologies for the length!]
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain>
		<20020719.054210.74750890.glyph@twistedmatrix.com>
		<200207192018.01157.arashi1@pd.jaring.my> <20020719.090134.23012115.glyph@twistedmatrix.com>
Message-ID: <3D387DF3.CA37962D@gsfc.nasa.gov>

Glyph Lefkowitz wrote:

> The most frequently applied term I've heard is "twister".  I'd sure like to
> have occasion to need a term which refers to someone who is a Twisted
> enthusiast who isn't directly on the development team ;-).

How about "twistor" (resonates with the Twistors theory (physics)
of Roger Penrose et al. :^) or "twisties"?  (The "-ies" carries 
some of the cult-y flavor ... :^)  

So far, I've only done some simple experiments with twisted web and 
twisted enterprise, but even just from that and reading the docs, I 
can already see that twisted rocks!  IMO it's by far the 
most advanced, most flexible, and best architected application 
framework in the Python world (which is the only language I would 
consider using for our application -- which BTW has nothing to do 
with twistors ... ;^).  

Thanks for the recently-added tutorial on Twisted Plugins; 
very cool!  Need more ... (see the following ... :^)  

Context:  the application we're developing is a "collaborative 
engineering environment", to include a repository, data 
transformation engine, multiprotocol communications hub, 
set of api's, and a gui client for browsing data and integrating 
desktop tools.  Not all that different from a multi-player game, 
so twisted fits the paradigm to a tee -- as soon as I read the 
ipc10paper, I knew that if twisted was half as good as it 
sounded on paper, it could provide most if not all of the 
infrastructure we need right out of the box.  

Twisted has allowed me to consider implementing some advanced 
features sooner that I had anticipated, like replicating the 
communications hub within the thick gui client (a wxPython app 
with a ZODB local object cache), so that for a power user, 
the client could be configured as essentially a peer to the 
server nodes, but also support very simple interfaces (web 
browser-based or very thin clients) for users with simple 
perspectives.  We have a prototype client, but haven't even 
begun to integrate twisted into it yet -- I'll ask questions 
about that later, like integrating the twisted event loop 
with wxPython's, which could be really nice.  

I had already selected PostgreSQL for the repository database, 
so twisted.enterprise is perfect, and trying out the example 
gave me the impression that it will be quite easy to work 
with.  

One thing I need to implement quickly is efficient support 
for "perspectives" (views with role-based access), so I'd like 
to get a little more documentation or somewhat better examples 
for how that is done with twisted.  I would love to have an 
example that would illustrate something like the following:

* Each user is assigned one or more roles.  Each role will 
carry some set of permissions relative to objects and functions 
in the system.  As I understand cred, a user is subclassed from 
Perspective, which maps to a "user-with-roles", I think.  My 
initial idea is to have a "mask" assigned to each object that 
needs view-sensitivity, and whether that object is accessible and 
how is determined by comparing the user's (Perspective's) role 
mask to the masks of the objects that would be operated on by 
the user's request.  Is this an appropriate concept to map to 
the twisted framework (from what I've read, it would involve 
cred and Perspective Broker)?  And if so, how?  Or if not, what 
would be the correct approach?  

* Speaking in terms of the role thing a bit further, some roles 
would be standardized, with pre-defined permissions like 
"read-only permission for all projects and create/mod permission for 
object type X on project Z."  But we also need to enable certain 
admin or project leader roles to create customized roles for 
their projects, etc.  How does this map?  

* I'd like to maintain the state of each user-with-roles in 
the PostgreSQL repository (syncing as necessary across thick 
clients and replicated servers, as was suggested on the list 
recently), and use hashed passwords over SSL.  I'm sure from 
what I've read that cred either supports this or will soon, 
but I'd like to get more info on how to implement it.  

Gotta go now ... will send more questions soon.  Thanks again 
for a truly awesome piece of work!  

Cheers,
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html



From andrew-twisted at puzzling.org  Mon Jul 22 00:57:32 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 22 Jul 2002 14:57:32 +1000
Subject: [Twisted-Python] reactor.running?
Message-ID: <20020722045732.GA23028@ritsuko.xware.cx>

One thing that seems to be missing since the move to reactors is
twisted.internet.main.running -- a flag you can check to see if the
reactor is running or not.

I notice that at least the default reactor has a .running attribute.
Should I use this?  Should it be documented?

I suspect that I actually want a different solution to my problem.
Here's the situation:  I have called clientTCP to connect a Protocol to
a remote server.  I want the ClientFactory to *not* start a new protocol
if the reactor is shutting down (which it currently does, because the
shutdown process closes the connected Protocol, triggering a
reconnect...).

Thoughts?

-Andrew.




From mikebannister at go.com  Mon Jul 22 03:16:59 2002
From: mikebannister at go.com (mike bannister)
Date: Mon, 22 Jul 2002 00:16:59 -0700 (PDT)
Subject: [Twisted-Python] possible documentation inaccuracy
Message-ID: <3445702.1027322219495.JavaMail.mikebannister@gomailjtp01>

Hello, I'm a fairly experienced python programmer (~3 years) but I am a one week old twisted user. 

There's a passage in the coding standard documentation that is giving me some trouble. It's quite possible I am just confused in which case I hope that someone can straighten me out but the alternative is either an inaccuracy or a need for rewording the passage in question exists.

The document is located here: http://twistedmatrix.com/documents/howto/coding-standard

Under the classes sub-heading the end of the first blurb reads:

"Class names should not include the name of the module they are a part of. Examples:"

and a list follows. Without looking at the list the above sentence already seems slightly ambiguous to me. Am I about to see a list of examples that meet the above criterion or fail to? 

My next problem is when I do look at the list my above question remains. If I assume it's a list of proper naming examples then the first item (twisted.reality.thing.Thing) wouldn't be right. Right? The class name (Thing) includes the name of the module (thing). If I assume it's a list of incorrect naming examples then the second item (twisted.web.Handler) would be a problem because the class name (Handler) doesn't include the package name (web) making it an example of proper naming.

Am I way off here? 

Thanks in advance if you can offer any help/info.

Mike Bannister

___________________________________________________
GO.com Mail                                    
Get Your Free, Private E-mail at http://mail.go.com





From twisted at itamarst.org  Mon Jul 22 09:18:24 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 22 Jul 2002 09:18:24 -0400
Subject: [Twisted-Python] reactor.running?
References: <20020722045732.GA23028@ritsuko.xware.cx>
Message-ID: <3D3C0620.5020505@itamarst.org>

Andrew Bennetts wrote:

> I notice that at least the default reactor has a .running attribute.
> Should I use this?  Should it be documented?

Don't use it. If it's important maybe we should a isRunning() method to the API.

> I suspect that I actually want a different solution to my problem.
> Here's the situation:  I have called clientTCP to connect a Protocol to
> a remote server.  I want the ClientFactory to *not* start a new protocol
> if the reactor is shutting down (which it currently does, because the
> shutdown process closes the connected Protocol, triggering a
> reconnect...).

I'll take this as a use case for the client TCP refactor.h




From carmstro at twistedmatrix.com  Mon Jul 22 12:10:38 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 22 Jul 2002 12:10:38 -0400
Subject: [Twisted-Python] possible documentation inaccuracy
In-Reply-To: <3445702.1027322219495.JavaMail.mikebannister@gomailjtp01>
References: <3445702.1027322219495.JavaMail.mikebannister@gomailjtp01>
Message-ID: <1027354239.1019.4.camel@radii>

On Mon, 2002-07-22 at 03:16, mike bannister wrote:
> "Class names should not include the name of the module they are a 
> part of. Examples:"

This means you shouldn't compound the module name with the class name,
i.e., module.ModuleClass.

> and a list follows. Without looking at the list the above sentence 
> already seems slightly ambiguous to me. Am I about to see a list of
> examples that meet the above criterion or fail to? 

Those are good class names, fully qualified with their module.

> My next problem is when I do look at the list my above question 
> remains. If I assume it's a list of proper naming examples then the
> first item (twisted.reality.thing.Thing) wouldn't be right. Right? 
> The class name (Thing) includes the name of the module (thing). If I
> assume it's a list of incorrect naming examples then the second item
> (twisted.web.Handler) would be a problem because the class name
> (Handler) doesn't include the package name (web) making it an example
> of proper naming.

thing.Thing is arguably bad naming, but the point is that it's not a
compound of the module name and the class name.

Anyway, I'll update that doc to be more clear.

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From a.d.stribblehill at durham.ac.uk  Tue Jul 23 04:17:42 2002
From: a.d.stribblehill at durham.ac.uk (Andrew Stribblehill)
Date: Tue, 23 Jul 2002 09:17:42 +0100
Subject: [Twisted-Python] Re: Offtopic "Twista" (was WebDAV?)
In-Reply-To: <20020719201136.GA13375@twistedmatrix.com>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com> <200207192018.01157.arashi1@pd.jaring.my> <20020719195343.GA2586@pest> <20020719201136.GA13375@twistedmatrix.com>
Message-ID: <20020723081742.GF25399@womble.dur.ac.uk>

Quoting Christopher Armstrong <carmstro at twistedmatrix.com> (2002-07-19 09:11:36 BST):
> On Fri, Jul 19, 2002 at 03:53:43PM -0400, Levi wrote:
> > On Fri, Jul 19, 2002 at 08:18:01PM +0800, Mukhsein Johari wrote:
> > > a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
> > > "zopista"...what's a twisted enthusiast? "twista"?
> 
> > "Twista" is fun in that it can be claimed to be derived from either:
> > 1) A not too unusual pronouciation of "Twister". A twister, being litealy
> > one-who-twists, is one of the people that "twist" python to produce
> > "Twisted Python".
> 
> Being the semi-official "Twista"-who-corrects-usage-of-the-old-Twisted-name, I
> must inform you that Twisted is no longe "Twisted Python", but simply
> "Twisted".

...and to reflect that, the Debian package has been renamed from
'twisted' to 'python-twisted-*' :)

-- 
THAMES DOVER WIGHT PORTLAND PLYMOUTH
SOUTHWEST VEERING NORTHWEST 4 OR 5, INCREASING 6, OCCASIONALLY 7 FOR
A TIME. SHOWERS. MODERATE OR GOOD



From carmstro at twistedmatrix.com  Tue Jul 23 08:07:14 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Tue, 23 Jul 2002 07:07:14 -0500
Subject: [Twisted-Python] Re: Offtopic "Twista" (was WebDAV?)
In-Reply-To: <20020723081742.GF25399@womble.dur.ac.uk>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com> <200207192018.01157.arashi1@pd.jaring.my> <20020719195343.GA2586@pest> <20020719201136.GA13375@twistedmatrix.com> <20020723081742.GF25399@womble.dur.ac.uk>
Message-ID: <20020723120714.GA13100@twistedmatrix.com>

On Tue, Jul 23, 2002 at 09:17:42AM +0100, Andrew Stribblehill wrote:
> Quoting Christopher Armstrong <carmstro at twistedmatrix.com> (2002-07-19 09:11:36 BST):
> > Being the semi-official "Twista"-who-corrects-usage-of-the-old-Twisted-name, I
> > must inform you that Twisted is no longe "Twisted Python", but simply
> > "Twisted".
> 
> ...and to reflect that, the Debian package has been renamed from
> 'twisted' to 'python-twisted-*' :)

That's policy for Python libraries in Debian. :P



From glyph at twistedmatrix.com  Tue Jul 23 09:48:21 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 23 Jul 2002 08:48:21 -0500 (CDT)
Subject: [Twisted-Python] Re: Offtopic "Twista"
In-Reply-To: <20020723120714.GA13100@twistedmatrix.com>
References: <20020719201136.GA13375@twistedmatrix.com>
	<20020723081742.GF25399@womble.dur.ac.uk>
	<20020723120714.GA13100@twistedmatrix.com>
Message-ID: <20020723.084821.25908987.glyph@twistedmatrix.com>


On Tue, 23 Jul 2002 07:07:14 -0500, Chris Armstrong <carmstro at twistedmatrix.com> wrote:
> On Tue, Jul 23, 2002 at 09:17:42AM +0100, Andrew Stribblehill wrote:
> > 
> > ...and to reflect that, the Debian package has been renamed from
> > 'twisted' to 'python-twisted-*' :)
> 
> That's policy for Python libraries in Debian. :P

Nevertheless, Zope is "zope".

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020723/042a40f6/attachment.pgp 

From martin at strakt.com  Tue Jul 23 10:21:12 2002
From: martin at strakt.com (Martin =?ISO-8859-1?Q?Sj=F6gren?=)
Date: 23 Jul 2002 16:21:12 +0200
Subject: [Twisted-Python] Re: Offtopic "Twista"
In-Reply-To: <20020723.084821.25908987.glyph@twistedmatrix.com>
References: <20020719201136.GA13375@twistedmatrix.com>
	<20020723081742.GF25399@womble.dur.ac.uk>
	<20020723120714.GA13100@twistedmatrix.com> 
	<20020723.084821.25908987.glyph@twistedmatrix.com>
Message-ID: <1027434072.27522.4.camel@ratthing-b3cf>

tis 2002-07-23 klockan 15.48 skrev Glyph Lefkowitz:
> 
> On Tue, 23 Jul 2002 07:07:14 -0500, Chris Armstrong <carmstro at twistedmatrix.com> wrote:
> > On Tue, Jul 23, 2002 at 09:17:42AM +0100, Andrew Stribblehill wrote:
> > > 
> > > ...and to reflect that, the Debian package has been renamed from
> > > 'twisted' to 'python-twisted-*' :)
> > 
> > That's policy for Python libraries in Debian. :P
> 
> Nevertheless, Zope is "zope".

First of all, I'm pretty sure it's not official policy yet. Second, it's
much more important to do this for libraries that you do "import foo"
on, than a big application written in Python that you happen to use. For
an application, it doesn't matter to you if it uses python2.1 or
python2.2 as long as it works. The pythonX-foo naming scheme comes from
a need to have libraries for several versions of python.


Martin

-- 
Martin Sj?gren
  martin at strakt.com              ICQ : 41245059
  Phone: +46 (0)31 7710870       Cell: +46 (0)739 169191
  GPG key: http://www.strakt.com/~martin/gpg.html



From carmstro at twistedmatrix.com  Tue Jul 23 13:44:46 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 23 Jul 2002 12:44:46 -0500
Subject: [Twisted-Python] Python 1.5
Message-ID: <20020723174446.GA27631@twistedmatrix.com>

What's the deal with 1.5.2 compatibility? For a while, it was understood (at
least in the IRC clique) that we would be getting rid of it as soon as Woody
came out. Is this still true? Personally, I think it's high time we switch
to 2.1. Who wants to stay with 1.5.2?




From twisted at itamarst.org  Tue Jul 23 13:50:51 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 23 Jul 2002 13:50:51 -0400
Subject: [Twisted-Python] Python 1.5
References: <20020723174446.GA27631@twistedmatrix.com>
Message-ID: <3D3D977B.70302@itamarst.org>

Christopher Armstrong wrote:

> What's the deal with 1.5.2 compatibility? For a while, it was understood (at
> least in the IRC clique) that we would be getting rid of it as soon as Woody
> came out. Is this still true? Personally, I think it's high time we switch
> to 2.1. Who wants to stay with 1.5.2?

Not I. Unless someone is willing to pay us a lot of money and requires 1.5.2 
support.




From twisted at itamarst.org  Tue Jul 23 18:46:19 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 23 Jul 2002 18:46:19 -0400
Subject: [Twisted-Python] Theo de Ridder's Proof Chamber
Message-ID: <3D3DDCBB.5020409@itamarst.org>

IIRC, this guy talked to alan and glyph at IPC10 about python syntax for 
XML, and maybe other stuff too. He has a lot of cool, crazy ideas :)

Anyway, this testing framework sounded interesting - he talked about it a 
bit at europython:

http://sc-archive.codesourcery.com/entries/test/ProofChamber/ProofChamber.html




From zooko at zooko.com  Wed Jul 24 01:24:41 2002
From: zooko at zooko.com (Zooko)
Date: Wed, 24 Jul 2002 02:24:41 -0300
Subject: [Twisted-Python] AFactory
Message-ID: <E17XEdd-0007ZG-00@localhost>

Folks:

In writing my Gnutella for Twisted implementation, which I have named "Zoot", 
I encountered what seems to be a bit of a weakness in the current "Factory"
API.  This occurred when I wanted each protocol instance to have a reference to
my Zoot object (the Zoot object contains the Gnutella logic for such operations
as routing a message from one connection to another).

The way to do this is to make a subclass of Factory, which I called
ZootFactory.  ZootFactory gets a reference to the Zoot object when it
(ZootFactory) is constructed.  Then ZootFactory's `buildProtocol()' method
looks like this:

class ZootFactory(Factory):
    def __init__(self, zoot):
        Factory.__init__(self)
        self.zoot = zoot

    def buildProtocol(self, addr):
        p = Factory.buildProtocol(self, addr)
        p.zoot = self.zoot
        return p

It occurred to me that this idiom is probably useful to other developers of
applications on top of Twisted, and it is trivial to generalize it.  I defined
class AFactory, like this:

class AFactory(Factory):
    def __init__(self, protocol, application=None):
        self.protocol = protocol
        self.application = application

    def buildProtocol(self, addr):
        p = Factory.buildProtocol(self, addr)
        p.application = self.application
        return p

You can see it through viewcvs at:
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/zoot/AFactory.py?rev=HEAD&content-type=text/vnd.viewcvs-markup&cvsroot=Twisted

My `updateApplication()' function in zoottap.py is now reduced to a nice
simple:

def updateApplication(app, config):
    f = AFactory(GnutellaTalker, Zoot())
    app.listenTCP(int(config["port"]), f)


I suggest that twisted.internet.protocol.Factory should be changed to do what
AFactory does, making it so that my `updateApplication()' could use the
standard Factory instead of AFactory.  I think it would be a
backward-compatible change to Factory which doesn't require other users of
Factory to change.

Regards,

Zooko

http://zooko.com/




From kkennedy at kenzoid.com  Tue Jul 23 19:43:48 2002
From: kkennedy at kenzoid.com (Ken Kennedy)
Date: Tue, 23 Jul 2002 19:43:48 -0400
Subject: [Twisted-Python] [PATCH] domhelpers.py
Message-ID: <20020723234348.GA3131@orcrist.kenzoid.com>

I've been working on porting the blog example to the new 0.19
DOMTemplate format, as an opportunity to play with some Twisted
code. In doing so, I think I've found this big, bad single-line, 5
character patch for domhelpers.py. Patch is attached. AFAICT, this is
correct; I'll admit, though, I'm a python journeyman at best, so I may
have mis-fixed.

Also, I should be finished with the blog example in a day or two...is
there interest in replacing the old-style one? If so, where should I
send the code? After finishing the straight port, I'm going to look at
implementing some authorization via Twisted Cred; I'm trying to decide
between using Zope and Twisted for some future projects, so I'm
playing with comparable functionalities...I have to admit, Twisted is
pretty dang cool!

Take care...

--

Ken Kennedy	| http://www.kenzoid.com	| kenzoid at io.com

-------------- next part --------------
*** orig_domhelpers.py	Tue Jul 23 19:29:28 2002
--- /usr/lib/python2.1/site-packages/twisted/python/domhelpers.py	Tue Jul 23 01:26:14 2002
***************
*** 10,16 ****
      for child in node.childNodes:
          if child.nodeValue:
              child.replaceData(0, len(child.nodeValue), child.nodeValue % subs)
!         self.substitute(request, child, subs)
  
  def _get(node, nodeId):
      if hasattr(node, 'hasAttributes') and node.hasAttributes() and ((str(node.getAttribute("id")) == nodeId) or (str(node.getAttribute("class")) == nodeId) or (str(node.getAttribute("model")) == nodeId)):
--- 10,16 ----
      for child in node.childNodes:
          if child.nodeValue:
              child.replaceData(0, len(child.nodeValue), child.nodeValue % subs)
!         substitute(request, child, subs)
  
  def _get(node, nodeId):
      if hasattr(node, 'hasAttributes') and node.hasAttributes() and ((str(node.getAttribute("id")) == nodeId) or (str(node.getAttribute("class")) == nodeId) or (str(node.getAttribute("model")) == nodeId)):

From jcarlson at isd.net  Wed Jul 24 04:09:57 2002
From: jcarlson at isd.net (Josiah Carlson)
Date: Wed, 24 Jul 2002 01:09:57 -0700
Subject: [Twisted-Python] Reality?
Message-ID: <20020724004642.31EB.JCARLSON@isd.net>

Good day,

I was just mucking around in the #python channel talking with some guys,
and ended up expressing my opinion of Reality, which at this point is
not very high.

Why you ask?

I suppose my biggest problem is documentation and the lack of a proper
distribution.  In order to get reality, I had to use CVS, not a big deal,
but I would have been much more contented with a tgz archive.  You know,
it could include that 'demo' world I've read about after searching
through the mailing list archives.

Along those same lines, nowhere in the cvs listing is _ANY_
documentation, save the docstrings in the source.  Not to mention that
on the twistedmatrix.com site, there is only passing reference to
reality and how to get to it (get it from cvs, but you need to use the
command:
cvs -d:pserver:anon at twistedmatrix.com:/cvs co Reality
Which I don't believe is listed anywhere on the twistedmatrix.com site.

Along the 'demo' world I referred to above, information about that is
also not listed on the twistedmatrix.com site, anywhere in the source 
(that I could find), documentation is nowhere to be found, save in the
email archives...but email lists are not documentation.


To get to the point; if you want people to use reality, get a
distribution of any stable version, a world file with help about what is
currently available in the mini-world, and a little how-to for getting
the thing to run.  It also wouldn't hurt to get a link to this
distribution on some download page at twisted.

I'm telling you this because I have just embarked on a project that
quite possibly could last until I start my phd in september - possibly
longer.  Building a mud server and a mud using the server.  I'm doing
this because I don't believe any mud servers currently available are
workable solutions to the problem of 'how do I make my mud do X', where
X is anything.  I want to make a DND 3rd ed rule-based mud.  CircleMUD,
SMAUG, ROM, ENVY, etc., are all 2nd ed based.  Pulling out all that code
for thaco, percent-based skills/spells, etc., and replacing it with D20
rules would be a daunting task (there are 3 guys who did it this past
spring with CircleMud for a class, but their source is not downloadable). 
I'm not looking to re-make something that is doing too-much already.  At
37k lines of code for circlemud, and nearly 140k lines for SMAUG, either
is too huge.

Reality is a nice change, but it still feels bulky (in terms of source
code size) and I wouldn't want to muck around in the source for anything.

Thanks,
 - Josiah Carlson



From glyph at twistedmatrix.com  Wed Jul 24 05:48:29 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 24 Jul 2002 04:48:29 -0500 (CDT)
Subject: [Twisted-Python] Reality?
In-Reply-To: <20020724004642.31EB.JCARLSON@isd.net>
References: <20020724004642.31EB.JCARLSON@isd.net>
Message-ID: <20020724.044829.122624463.glyph@twistedmatrix.com>


Hi Josiah,

Thanks for your input.  Let's continue this discussion on the Reality list.


-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020724/5820c30e/attachment.pgp 

From dp at twistedmatrix.com  Wed Jul 24 13:43:58 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 24 Jul 2002 10:43:58 -0700
Subject: [Twisted-Python] [PATCH] domhelpers.py
In-Reply-To: <20020723234348.GA3131@orcrist.kenzoid.com>
Message-ID: <EEC67F2C-9F2C-11D6-85DA-003065B25CAA@twistedmatrix.com>

On Tuesday, July 23, 2002, at 04:43 PM, Ken Kennedy wrote:

> I've been working on porting the blog example to the new 0.19
> DOMTemplate format, as an opportunity to play with some Twisted
> code. In doing so, I think I've found this big, bad single-line, 5
> character patch for domhelpers.py. Patch is attached. AFAICT, this is
> correct; I'll admit, though, I'm a python journeyman at best, so I may
> have mis-fixed.

Yes, indeed, that's a typo, and your fix is correct. Obviously that bug 
was left over from a refactoring of substitute from a method to a 
function. Really shows me I need to write more unit tests.

> Also, I should be finished with the blog example in a day or two...is
> there interest in replacing the old-style one? If so, where should I
> send the code? After finishing the straight port, I'm going to look at
> implementing some authorization via Twisted Cred; I'm trying to decide
> between using Zope and Twisted for some future projects, so I'm
> playing with comparable functionalities...I have to admit, Twisted is
> pretty dang cool!

Wow. I wrote both Blog and DOMTemplate, and I had been planning on 
refactoring Blog sometime soon, but hadn't gotten around to it. I didn't 
think anybody cared enough! *sniff* Thank you. :-)

Donovan




From kkennedy at kenzoid.com  Wed Jul 24 14:23:56 2002
From: kkennedy at kenzoid.com (Ken Kennedy)
Date: Wed, 24 Jul 2002 14:23:56 -0400
Subject: [Twisted-Python] [PATCH] domhelpers.py
In-Reply-To: <EEC67F2C-9F2C-11D6-85DA-003065B25CAA@twistedmatrix.com>
References: <20020723234348.GA3131@orcrist.kenzoid.com> <EEC67F2C-9F2C-11D6-85DA-003065B25CAA@twistedmatrix.com>
Message-ID: <20020724182356.GA21012@kenzoid.com>

On Wed, Jul 24, 2002 at 10:43:58AM -0700, Donovan Preston wrote:

> Yes, indeed, that's a typo, and your fix is correct. Obviously that bug 
> was left over from a refactoring of substitute from a method to a 
> function. Really shows me I need to write more unit tests.

Heh...I hear ya. I need to learn the "write unit tests first" habit
myself, but I'm a LONG way from that!

> >Also, I should be finished with the blog example in a day or two...is
> >there interest in replacing the old-style one? 
> 
> Wow. I wrote both Blog and DOMTemplate, and I had been planning on 
> refactoring Blog sometime soon, but hadn't gotten around to it. I didn't 
> think anybody cared enough! *sniff* Thank you. :-)

No sweat. It's a nice, compact little ball o' Twistiness...uses
DOMTemplate, plugins.tml, the MVC stuff, etc. all in one fell
swoop. Poking my way through it gives me a good insight into Twisted
web development. I got lazy and rented a movie last night, but I'll be
back on it tonight.

-- 

Ken Kennedy	| http://www.kenzoid.com	| kenzoid at io.com



From glyph at twistedmatrix.com  Thu Jul 25 02:59:47 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 25 Jul 2002 01:59:47 -0500 (CDT)
Subject: [Twisted-Python] AFactory
In-Reply-To: <E17XEdd-0007ZG-00@localhost>
References: <E17XEdd-0007ZG-00@localhost>
Message-ID: <20020725.015947.78705508.glyph@twistedmatrix.com>

On Wed, 24 Jul 2002 02:24:41 -0300, Zooko <zooko at zooko.com> wrote:

> I suggest that twisted.internet.protocol.Factory should be changed to do what
> AFactory does, making it so that my `updateApplication()' could use the
> standard Factory instead of AFactory.  I think it would be a
> backward-compatible change to Factory which doesn't require other users of
> Factory to change.

The normal idiom here is to have your "userapp" inherit from protocol.Factory.
The default "factory" implementation does set itself as an attribute on the
protocols it builds...

Is there any reason that this doesn't work for you?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020725/bf799eb6/attachment.pgp 

From zooko at zooko.com  Thu Jul 25 11:53:08 2002
From: zooko at zooko.com (Zooko)
Date: Thu, 25 Jul 2002 12:53:08 -0300
Subject: [Twisted-Python] AFactory 
In-Reply-To: Message from Glyph Lefkowitz <glyph@twistedmatrix.com> 
   of "Thu, 25 Jul 2002 01:59:47 CDT." <20020725.015947.78705508.glyph@twistedmatrix.com> 
References: <E17XEdd-0007ZG-00@localhost>  <20020725.015947.78705508.glyph@twistedmatrix.com> 
Message-ID: <E17XkvM-0002Na-00@localhost>

> The normal idiom here is to have your "userapp" inherit from protocol.Factory.
> The default "factory" implementation does set itself as an attribute on the
> protocols it builds...

Ah!  Of course.  Thanks.

I tend to prefer other techniques (like AFactory) over inheritance when
possible, but since inheritance is the Twisted Way, I'll do it that way.  

Maybe this idiom should be added to plugin.html?

Regards,

Zooko




From bruce at cubik.org  Thu Jul 25 11:03:34 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Thu, 25 Jul 2002 09:03:34 -0600
Subject: [Twisted-Python] AFactory
References: <E17XEdd-0007ZG-00@localhost>  <20020725.015947.78705508.glyph@twistedmatrix.com> <E17XkvM-0002Na-00@localhost>
Message-ID: <3D401346.3020607@cubik.org>

Zooko wrote:
>>The normal idiom here is to have your "userapp" inherit from protocol.Factory.
>>The default "factory" implementation does set itself as an attribute on the
>>protocols it builds...
> 
> Ah!  Of course.  Thanks.
> 
> I tend to prefer other techniques (like AFactory) over inheritance when
> possible, but since inheritance is the Twisted Way, I'll do it that way.  
> 
> Maybe this idiom should be added to plugin.html?

Well, it'd also be nice to see coverage of when to implement a Service, 
what's involved in doing so, and all that .. maybe a higher level 
document about "Writing your application with Twisted" would be more 
appropriate for that though.

  - Bruce




From zooko at zooko.com  Thu Jul 25 12:13:35 2002
From: zooko at zooko.com (Zooko)
Date: Thu, 25 Jul 2002 13:13:35 -0300
Subject: [Twisted-Python] AFactory 
In-Reply-To: Message from Bruce Mitchener <bruce@cubik.org> 
   of "Thu, 25 Jul 2002 09:03:34 MDT." <3D401346.3020607@cubik.org> 
References: <E17XEdd-0007ZG-00@localhost> <20020725.015947.78705508.glyph@twistedmatrix.com> <E17XkvM-0002Na-00@localhost>  <3D401346.3020607@cubik.org> 
Message-ID: <E17XlF9-0002U5-00@localhost>

> Well, it'd also be nice to see coverage of when to implement a Service, 
> what's involved in doing so, and all that .. maybe a higher level 
> document about "Writing your application with Twisted" would be more 
> appropriate for that though.

Yes, I have heard of Services, but there is apparently no doc, and I am
ignoring the concept of services until I am forced to deal with it.

I think a "Writing your application with Twisted" doc would be perfect.

Regards,

Zooko




From glyph at twistedmatrix.com  Thu Jul 25 11:43:45 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 25 Jul 2002 10:43:45 -0500 (CDT)
Subject: [Twisted-Python] AFactory 
In-Reply-To: <E17XkvM-0002Na-00@localhost>
References: <20020725.015947.78705508.glyph@twistedmatrix.com>
	<glyph@twistedmatrix.com>
	<E17XkvM-0002Na-00@localhost>
Message-ID: <20020725.104345.74751532.glyph@twistedmatrix.com>

On Thu, 25 Jul 2002 12:53:08 -0300, Zooko <zooko at zooko.com> wrote:
> 
> > The normal idiom here is to have your "userapp" inherit from protocol.Factory.
> > The default "factory" implementation does set itself as an attribute on the
> > protocols it builds...
> 
> Ah!  Of course.  Thanks.
> 
> I tend to prefer other techniques (like AFactory) over inheritance when
> possible, but since inheritance is the Twisted Way, I'll do it that way.  

I agree with you (and I agree even more now than I did when I wrote Factory)
but I think that Factory is one of those instances where "is-a" makes sense, if
not inheritance.  Really the way I'd do it now, starting from scratch, would be
to have an interface which you either implement or provide an adapter for, that
had the buildProtocol/doStart etc methods on it.

The reason I say that is that the extra level of indirection (in AFactory)
doesn't really provide for any interesting hooks; the object that is "building"
the protocols is typically your user application.  protocol.Factory is more
like an interface that it implements than a class it should inherit from, but
it does have the utility convenience of (doStart and doStop) -> (startFactory
and stopFactory).

As far as that doc goes... yes.  We need it.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020725/abfd8459/attachment.pgp 

From paul_carduner at msn.com  Thu Jul 25 13:53:23 2002
From: paul_carduner at msn.com (Paul Carduner)
Date: Thu, 25 Jul 2002 13:53:23 -0400
Subject: [Twisted-Python] Re: Twisted-Python digest, Vol 1 #371 - 3 msgs
Message-ID: <F18u9kstC7tXjs5FGJz00013769@hotmail.com>

I recently joined the Twisted mailing list and I am juts starting network 
programming.  I was wondering if anyone knew of existing tutorials or guides 
or documentation that i could use that would be helpful in my persuit of the 
twisted module.

thanks
-Paul Carduner

_________________________________________________________________
Join the world?s largest e-mail service with MSN Hotmail. 
http://www.hotmail.com




From steve.waterbury at gsfc.nasa.gov  Thu Jul 25 14:45:09 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Thu, 25 Jul 2002 14:45:09 -0400
Subject: [Twisted-Python] Large file transfers
References: <1027055868.11351.33.camel@radii>
		<200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com>
Message-ID: <3D404735.4AE6247F@gsfc.nasa.gov>

Twisted gurus,

I just noticed item 008 on the twisted TO DO list:

    File Transfer layer for PB.  This would be especially nice for
    twisted.words; having standard a way to transfer "large" (100MB+) packets
    across or in tandem with a PB connection without breaking anything would be
    very good.

<sophomoric question>
Would an ftp connection (authenticated using cred, of course) in 
tandem or parallel to the PB connection work?  ... but maybe you 
are referring to implementing file transfer as *part* of the 
PB protocol, in which case this question might not make any sense 
at all.    
</sophomoric question>

And how close is this to being implemented?

My interest is not merely academic -- the application I am working 
on will be "routinely" transferring 100MB+ files, and I'd like 
to use the PB as one of our interfaces.  

(BTW, one of the components of our app is written in Lisp, so I 
am thinking about having our Lisp programmer look at Twisted Emacs 
for hints as to how a Common Lisp implementation of PB could be done ... 
but I notice that several twisted minions have Lisp in their resumes ... 
is anyone working on / contemplating a CL implementation of PB?  :^)  

Cheers,
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html



From glyph at twistedmatrix.com  Thu Jul 25 15:19:21 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 25 Jul 2002 14:19:21 -0500 (CDT)
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <3D404735.4AE6247F@gsfc.nasa.gov>
References: <200207192104.05786.arashi1@pd.jaring.my>
	<20020719.094000.00927315.glyph@twistedmatrix.com>
	<3D404735.4AE6247F@gsfc.nasa.gov>
Message-ID: <20020725.141921.78704662.glyph@twistedmatrix.com>

On Thu, 25 Jul 2002 14:45:09 -0400, Steve Waterbury <steve.waterbury at gsfc.nasa.gov> wrote:

> I just noticed item 008 on the twisted TO DO list:
>     File Transfer layer for PB.
> <sophomoric question>
> Would an ftp connection (authenticated using cred, of course) in tandem or
> parallel to the PB connection work?  ... but maybe you are referring to
> implementing file transfer as *part* of the PB protocol, in which case this
> question might not make any sense at all.
> </sophomoric question>

Well, both.  It's more like a convention, really; all the pieces already exist
(serialized remote method calls, waiting until the outgoing buffer is empty) in
order to create a file transfer convention; of course, then you've got all the
usual fun problems; trying to connect with a listening socket on port 0,
backing off and using the existing connection with slightly poorer performance
if one or both of the users are behind a firewall...

> And how close is this to being implemented?

There's a lot of stuff on my plate that comes before it, most of all the 1.0
release.  On the other hand, it's a relatively simple thing to add in.

> My interest is not merely academic -- the application I am working 
> on will be "routinely" transferring 100MB+ files, and I'd like 
> to use the PB as one of our interfaces.

There will be a little bit of overhead in the initial implementation,
considering that it will be using PB calls.  In the short term, the large file
transfers would probably be better handled over HTTP (Twisted's
twisted.web.static.File can easily be used to this end).  FTP is a much nastier
protocol.

> (BTW, one of the components of our app is written in Lisp, so I 
> am thinking about having our Lisp programmer look at Twisted Emacs 
> for hints as to how a Common Lisp implementation of PB could be done ... 
> but I notice that several twisted minions have Lisp in their resumes ... 
> is anyone working on / contemplating a CL implementation of PB?  :^)  

We have contemplated it a lot, but have yet to implement it.  Really the
problem is that "common lisp" isn't a language so much as a bizarre
constellation of languages, none of which have anything to do with each other
when it comes to things like "sockets" and "files".  It hasn't been worth
anybody's effort to go to all that work just for, say, CLisp or SBCL.  AFAIK
it's not even *possible* to do it properly in CLisp yet, due to the absence of
non-blocking sockets, but this could be FUD; haven't read the docs in a while.

However, many of us are fans of Lisp-like languages and I'm sure that more than
one person would be thrilled to see a multi-vendor-supporting CL
implementation of PB.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020725/f1ea464b/attachment.pgp 

From steve.waterbury at gsfc.nasa.gov  Thu Jul 25 16:43:33 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Thu, 25 Jul 2002 16:43:33 -0400
Subject: [Twisted-Python] Large file transfers
References: <200207192104.05786.arashi1@pd.jaring.my>
		<20020719.094000.00927315.glyph@twistedmatrix.com>
		<3D404735.4AE6247F@gsfc.nasa.gov> <20020725.141921.78704662.glyph@twistedmatrix.com>
Message-ID: <3D4062F5.97F0D558@gsfc.nasa.gov>

Glyph Lefkowitz wrote:

> There will be a little bit of overhead in the initial implementation,
> considering that it will be using PB calls.  In the short term, the large file
> transfers would probably be better handled over HTTP (Twisted's
> twisted.web.static.File can easily be used to this end).  FTP is a much nastier
> protocol.

Ah, my ignorance again -- I hadn't noticed twisted.web.static.File;  
I'll look at that ... we'll be doing at least 3 interfaces that use 
HTTP anyway (web, xmlrpc, and SOAP) ... thanks!

> > is anyone working on / contemplating a CL implementation of PB?  :^)
> 
> We have contemplated it a lot, but have yet to implement it.  Really the
> problem is that "common lisp" isn't a language so much as a bizarre
> constellation of languages, none of which have anything to do with each other
> when it comes to things like "sockets" and "files".  It hasn't been worth
> anybody's effort to go to all that work just for, say, CLisp or SBCL.  AFAIK
> it's not even *possible* to do it properly in CLisp yet, due to the absence of
> non-blocking sockets, but this could be FUD; haven't read the docs in a while.
> 
> However, many of us are fans of Lisp-like languages and I'm sure that more than
> one person would be thrilled to see a multi-vendor-supporting CL
> implementation of PB.

Yeah, the non-blocking sockets might be a problem ... I'll ask about 
that.  If we do an implementation, we'll at least make an effort to 
make it multi-vendor-supporting.  Our Lisp specialists have used both 
Allegro and Harlequin at various times.  Let us know if other vendor 
or open-source Lisps are of interest, etc.  

Cheers,
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html



From jason at asbahr.com  Thu Jul 25 19:27:18 2002
From: jason at asbahr.com (Jason Asbahr)
Date: Thu, 25 Jul 2002 16:27:18 -0700
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
Message-ID: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com>

Andy Dustman gave an interesting Lightning Talk at the OSCon that might 
be of interest to the .enterprise hackers, Transparent Object 
Persistence using DB-API.  You'll like it, it's evil.  It claims to be 
the first non-gratuitous use of metaclasses in Python.   : )  He's going 
to post the slides/code shortly, ping him at...

http://www.dustman.net

Cheers,

Jason




From j.her at t-online.de  Thu Jul 25 20:20:32 2002
From: j.her at t-online.de (Juergen Hermann)
Date: Fri, 26 Jul 2002 02:20:32 +0200
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
In-Reply-To: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com>
Message-ID: <17Xspz-1xvoYqC@fwd10.sul.t-online.com>

On Thu, 25 Jul 2002 16:27:18 -0700, Jason Asbahr wrote:

> You'll like it, it's evil.

It has to be twisted, not evil. Unless it's evilly twisted.
Ciao, J?rgen





From twisted at itamarst.org  Thu Jul 25 23:29:31 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 25 Jul 2002 23:29:31 -0400
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
References: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com>
Message-ID: <3D40C21B.8040400@itamarst.org>

Someone did a lightning talk just like that at EuroPython, about storing 
astronomical data. It *might* have been Andy Dustman.




From arashi1 at pd.jaring.my  Fri Jul 26 04:40:01 2002
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Fri, 26 Jul 2002 16:40:01 +0800
Subject: [Twisted-Python] Have you checked out CherryPy?
Message-ID: <200207261640.01861.arashi1@pd.jaring.my>

Hello all,

There's an interesting light-weight web application platform called CherryPy 
(why cherry? who knows..). The idea of generating the web server from source 
is similar to twisted's mktap. However, it takes .cpy files and creates a .py 
which is run like a normal python program:

$ python MyWebApp.py

This will launch a web server listening on port 8000 by default. CherryPy has 
2 templating laguages which serve different purposes. It's actually quite 
simple to use as far as templating languages go.

Of course, it's only analogous to twisted.web - which is only a part of the 
twisted erm...twisted super-framework?

Apart from the interesting thing that CherryPy is, the thing that surprised me 
was the docs. Take a look at the docs! Considering that it's only version 
0.2, the docs are really good!

For more info/downloads, go to:
http://www.cherrypy.org

-- 
Regards,
Mukhsein Johari



From lac at strakt.com  Fri Jul 26 07:48:45 2002
From: lac at strakt.com (Laura Creighton)
Date: Fri, 26 Jul 2002 13:48:45 +0200
Subject: [Twisted-Python] Transparent Object Persistence using DB-API 
In-Reply-To: Message from Jason Asbahr <jason@asbahr.com> 
   of "Thu, 25 Jul 2002 16:27:18 PDT." <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com> 
References: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com> 
Message-ID: <200207261148.g6QBmjci026976@ratthing-b246.strakt.com>

> Andy Dustman gave an interesting Lightning Talk at the OSCon that might 
> be of interest to the .enterprise hackers, Transparent Object 
> Persistence using DB-API.  You'll like it, it's evil.  It claims to be 
> the first non-gratuitous use of metaclasses in Python.   : )  He's going 
> to post the slides/code shortly, ping him at...
> 
> http://www.dustman.net
> 
> Cheers,
> 
> Jason
> 

Are you sure about that address?  I get a DNS lookup failure.

Laura Creighton



From carmstro at twistedmatrix.com  Fri Jul 26 08:15:43 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 26 Jul 2002 07:15:43 -0500
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
In-Reply-To: <200207261148.g6QBmjci026976@ratthing-b246.strakt.com>
References: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com> <200207261148.g6QBmjci026976@ratthing-b246.strakt.com>
Message-ID: <20020726121543.GA9901@twistedmatrix.com>

On Fri, Jul 26, 2002 at 01:48:45PM +0200, Laura Creighton wrote:
> > http://www.dustman.net
> 
> Are you sure about that address?  I get a DNS lookup failure.

I just checked it out -- the 'www' prefix is non-existent. Leave it out.



From typo at soniq.net  Fri Jul 26 08:31:29 2002
From: typo at soniq.net (Paul Boehm)
Date: Fri, 26 Jul 2002 14:31:29 +0200
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <3D404735.4AE6247F@gsfc.nasa.gov>
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov>
Message-ID: <20020726123129.GA7907@soniq.net>

On Thu, Jul 25, 2002 at 02:45:09PM -0400, Steve Waterbury wrote:
>     File Transfer layer for PB.  This would be especially nice for
>     twisted.words; having standard a way to transfer "large" (100MB+) packets
>     across or in tandem with a PB connection without breaking anything would be
>     very good.

i also require filetransfers over pb for my project,
i think twisted currently is lacking a protocol for reading files
in a reliable manner (nfs, fifos, ...). i doubt i'm skilled enough,
but i'm trying to implement protocols.file right now, hoping this
will help me with getting files accross pb later. suggestions?

  paul



From steve.waterbury at gsfc.nasa.gov  Thu Jul 25 22:05:58 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Thu, 25 Jul 2002 22:05:58 -0400
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
References: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com>
Message-ID: <3D40AE86.3A815B81@gsfc.nasa.gov>

Jason Asbahr wrote:
> 
> Andy Dustman gave an interesting Lightning Talk at the OSCon that might
> be of interest to the .enterprise hackers, Transparent Object
> Persistence using DB-API.  You'll like it, it's evil.  It claims to be
> the first non-gratuitous use of metaclasses in Python.   : )  He's going
> to post the slides/code shortly, ping him at...
> 
> http://www.dustman.net

Wow -- I can't reach his server ... he's been twist-dotted!!  :^)

-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html



From carmstro at twistedmatrix.com  Fri Jul 26 08:41:27 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 26 Jul 2002 07:41:27 -0500
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020726123129.GA7907@soniq.net>
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net>
Message-ID: <20020726124127.GA10592@twistedmatrix.com>

On Fri, Jul 26, 2002 at 02:31:29PM +0200, Paul Boehm wrote:
> On Thu, Jul 25, 2002 at 02:45:09PM -0400, Steve Waterbury wrote:
> >     File Transfer layer for PB.  This would be especially nice for
> >     twisted.words; having standard a way to transfer "large" (100MB+) packets
> >     across or in tandem with a PB connection without breaking anything would be
> >     very good.
> 
> i also require filetransfers over pb for my project,
> i think twisted currently is lacking a protocol for reading files
> in a reliable manner (nfs, fifos, ...). i doubt i'm skilled enough,
> but i'm trying to implement protocols.file right now, hoping this
> will help me with getting files accross pb later. suggestions?

AFAIK, twisted.web.static _does_ do non-blocking reading, so check that out.
I don't think anyone has implemented non-blocking writing yet. (There's some
sort of FileWrapper protocol or somesuch IIRC, but it just assumes that
write() won't take very long -- it's only for testing)



From typo at soniq.net  Fri Jul 26 08:55:33 2002
From: typo at soniq.net (Paul Boehm)
Date: Fri, 26 Jul 2002 14:55:33 +0200
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020726124127.GA10592@twistedmatrix.com>
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com>
Message-ID: <20020726125533.GB7907@soniq.net>

On Fri, Jul 26, 2002 at 07:41:27AM -0500, Chris Armstrong wrote:
> AFAIK, twisted.web.static _does_ do non-blocking reading, so check that out.
> I don't think anyone has implemented non-blocking writing yet. (There's some
> sort of FileWrapper protocol or somesuch IIRC, but it just assumes that
> write() won't take very long -- it's only for testing)

no it doesn't,
 f = open(self.path,'rb')
...
# return data
FileTransfer(f, size, request)
# and make sure the connection doesn't get closed
return server.NOT_DONE_YET

this is a normal file instance.. i have yet to find a way to do nonblocking
file reads.. till then i'm starting to implement a protocol which i can tell
upon initialization which parts of the file i want to have streamed.

ah, and i think twisted.web.static.FileTransfer has a bug:
you can specify where it starts reading with seek, and set an
arbitrary size.. but it read()->write()'s by
abstract.FileDescriptor.bufferSize
and then checks "if self.file.tell() == self.size:" which
won't be correct if the file is larger than the requested chunk.

  paul




From bruce at cubik.org  Fri Jul 26 09:41:22 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Fri, 26 Jul 2002 07:41:22 -0600
Subject: [Twisted-Python] Large file transfers
References: <1027055868.11351.33.camel@radii>		<200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov>
Message-ID: <3D415182.9010703@cubik.org>

Steve Waterbury wrote:
> Twisted gurus,
> 
> I just noticed item 008 on the twisted TO DO list:
> 
>     File Transfer layer for PB.  This would be especially nice for
>     twisted.words; having standard a way to transfer "large" (100MB+) packets
>     across or in tandem with a PB connection without breaking anything would be
>     very good.
> 
> <sophomoric question>
> Would an ftp connection (authenticated using cred, of course) in 
> tandem or parallel to the PB connection work?  ... but maybe you 
> are referring to implementing file transfer as *part* of the 
> PB protocol, in which case this question might not make any sense 
> at all.    
> </sophomoric question>
> 
> And how close is this to being implemented?
> 
> My interest is not merely academic -- the application I am working 
> on will be "routinely" transferring 100MB+ files, and I'd like 
> to use the PB as one of our interfaces.

Steve,

This sort of thing is why some of the features of the BEEP protocol are 
nice, specifically the presence of multiple channels and that messages 
on those channels needn't block others, because it chunks them and 
interleaves them.

BEEP is documented in RFC 3080:

   http://www.ietf.org/rfc/rfc3080.txt

and the design rationale is documented in 3171, On the Design of 
Application Protocols:

   ftp://ftp.rfc-editor.org/in-notes/rfc3117.txt

and more information, including links to various implementations can be 
found at:

   http://www.beepcore.org/

I don't know that I'd directly use BEEP because the existing 
implementations are lacking (thread-heavy), and it doesn't support 
features that would be needed for PB-over-UDP support, but having the 
option to run PB over BEEP would let you do large file transfers over 
the same connection (without worrying about NAT or firewall issues) 
without blocking the usual PB messages.

I'd go so far as to say that this problem isn't just with file 
transfers.  It is a potential problem anytime you have messages of 
different priorities being sent over PB.  Larger, lesser priority 
messages block higher priority messages because they're all over the 
same connection and there aren't logical channels in PB (as in BEEP).

You can work around this yourself by manually chunking messages and 
managing sending them at the sending side in small pieces to give other 
messages a chance to make it through.  Another way of handling this, and 
nicer than laying on top of BEEP, would be to start down the path 
towards some of the features that would be needed or useful in UDP 
support.  With UDP support, it'd be useful to be able to flag messages 
with different bits of data:

    * Reliable
    * Unreliable
    * Time-sensitive data which is useless after that time.

in that sort of scenario, one could add an additional set of behaviors 
where the message that contained large, low-priority data would be 
flagged to let PB know that it was something that could be spread out 
over time and that timing for it wasn't a concern.

Maybe there are already capabilities like this in PB .. but given the 
lack of docs, I haven't found them yet. :)

Cheers,

  - Bruce




From twisted at itamarst.org  Fri Jul 26 10:36:58 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 26 Jul 2002 10:36:58 -0400
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
References: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com> <3D40C21B.8040400@itamarst.org>
Message-ID: <3D415E8A.9020602@itamarst.org>

Itamar Shtull-Trauring wrote:
> Someone did a lightning talk just like that at EuroPython, about storing 
> astronomical data. It *might* have been Andy Dustman.

I *think* it was this:
http://europython.zope.nl/sessions/presentations/LightningTalks/EPC2002-Rengelink-Persistent.pdf




From glyph at twistedmatrix.com  Fri Jul 26 15:52:21 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 26 Jul 2002 14:52:21 -0500 (CDT)
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <3D4062F5.97F0D558@gsfc.nasa.gov>
References: <3D404735.4AE6247F@gsfc.nasa.gov>
	<20020725.141921.78704662.glyph@twistedmatrix.com>
	<3D4062F5.97F0D558@gsfc.nasa.gov>
Message-ID: <20020726.145221.107254913.glyph@twistedmatrix.com>


On Thu, 25 Jul 2002 16:43:33 -0400, Steve Waterbury <steve.waterbury at gsfc.nasa.gov> wrote:
> Glyph Lefkowitz wrote:
> 
> > There will be a little bit of overhead in the initial implementation,
> > considering that it will be using PB calls.

As several people have pointed out to me, sometimes this additional overhead is
worth paying in order to get rid of the TCP connection startup cost.  Of
course, this will vary with your application, but it's probably worthwhile to
have the ability to reuse the connection.

In addition, sometimes you want to communicate large *objects*, and not just
large *files*; in those cases, it's really handy to have objects which can be
"paged" between systems, interleaved with other messages.

This is also a decent basis for "file transfer" between two objects, since
"very large string, stored on disk" is a degenerate case of "very large object,
stored somewhere".  I've checked in an implementation of this to
twisted.spread.util.Pager.  Not much in the way of docs yet, but the test cases
(twisted.test.test_pb, look for "pager") should at least explain some of it.

> > However, many of us are fans of Lisp-like languages and I'm sure that more than
> > one person would be thrilled to see a multi-vendor-supporting CL
> > implementation of PB.

> Yeah, the non-blocking sockets might be a problem ... I'll ask about 
> that.  If we do an implementation, we'll at least make an effort to 
> make it multi-vendor-supporting.  Our Lisp specialists have used both 
> Allegro and Harlequin at various times.  Let us know if other vendor 
> or open-source Lisps are of interest, etc.  

I can speak only to my own interests.  Other members of the Twisted community
are working in radically different environments and on radically different
problems.  As long as you asked, though ...

While I appreciate that they're technically superior, the proprietary lisps
don't interest me; the bang for your buck of using a proprietary language
solution is seldom worth the hefty license fees (especially in a situations
where "interoperability" and "ubiquity" are the most interesting parts, like
most of the applications I've come up with for Twisted).

Conversely, support for *any* open-source CL would be really cool.  Even GCL
would be fun to play around with.  I'd like to develop Lisp components for some
of the applications I'm working on, mostly to tinker with it for fun, but I
don't have enough time or inclincation to dive into the implementation myself.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020726/4b83e880/attachment.pgp 

From steve.waterbury at gsfc.nasa.gov  Fri Jul 26 17:49:04 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Fri, 26 Jul 2002 17:49:04 -0400
Subject: [Twisted-Python] Large file transfers
References: <3D404735.4AE6247F@gsfc.nasa.gov>
		<20020725.141921.78704662.glyph@twistedmatrix.com>
		<3D4062F5.97F0D558@gsfc.nasa.gov> <20020726.145221.107254913.glyph@twistedmatrix.com>
Message-ID: <3D41C3D0.C1CD2430@gsfc.nasa.gov>

Glyph Lefkowitz wrote:

> As several people have pointed out to me, sometimes this additional overhead is
> worth paying in order to get rid of the TCP connection startup cost.  Of
> course, this will vary with your application, but it's probably worthwhile to
> have the ability to reuse the connection.
> 
> In addition, sometimes you want to communicate large *objects*, and not just
> large *files*; in those cases, it's really handy to have objects which can be
> "paged" between systems, interleaved with other messages.

Yes, both of these are important considerations for our app.  

> This is also a decent basis for "file transfer" between two objects, since
> "very large string, stored on disk" is a degenerate case of "very large object,
> stored somewhere".  I've checked in an implementation of this to
> twisted.spread.util.Pager.  Not much in the way of docs yet, but the test cases
> (twisted.test.test_pb, look for "pager") should at least explain some of it.

Great -- I'll take a look at that.  Thanks!  

> > [SW wrote:]...  Let us know if other vendor
> > or open-source Lisps are of interest, etc.
> 
> I can speak only to my own interests.  Other members of the Twisted community
> are working in radically different environments and on radically different
> problems.  As long as you asked, though ...
> 
> While I appreciate that they're technically superior, the proprietary lisps
> don't interest me; the bang for your buck of using a proprietary language
> solution is seldom worth the hefty license fees (especially in a situations
> where "interoperability" and "ubiquity" are the most interesting parts, like
> most of the applications I've come up with for Twisted).

Understood.  Since we have limited manpower for our Lisp work, we tend 
to value the power of commercial development tools, but we do care 
about portability, so we try to adhere to ANSI CL -- see:
http://exp-engine.sourceforge.net/lisp.html
(And it is *very* important that there are no *run-time* license fees!
Anyone can download our stuff and run it.)

Express Engine, our Lisp project, is somewhat esoteric, so even though 
it's on SF no other developers have joined. ;^)  If anyone is curious, 
see:  http://exp-engine.sourceforge.net 

Express Engine encapsulates some very important functions for our app, 
enabling us to munge data produced by various CAD/CAE/CAM ("CAX") 
tools, for which the most widely implemented exchange standard is 
ISO 10303 (STEP).  Express Engine encapsulates our STEP data I/O and 
mapping functionality.  (Like I said, somewhat esoteric! :^)  As you 
can imagine, STEP files produced by CAX tools can be quite huge.  

This also hints at why Twisted is such a natural fit for our app:  a 
multi-player networked game environment is not all that different 
from a massive collaborative engineering environment ... at the 
infrastructure level, essentially identical.

Cheers,
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html



From glyph at twistedmatrix.com  Fri Jul 26 19:27:08 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 26 Jul 2002 18:27:08 -0500 (CDT)
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <3D41C3D0.C1CD2430@gsfc.nasa.gov>
References: <3D4062F5.97F0D558@gsfc.nasa.gov>
	<20020726.145221.107254913.glyph@twistedmatrix.com>
	<3D41C3D0.C1CD2430@gsfc.nasa.gov>
Message-ID: <20020726.182708.130019145.glyph@twistedmatrix.com>


On Fri, 26 Jul 2002 17:49:04 -0400, Steve Waterbury <steve.waterbury at gsfc.nasa.gov> wrote:
> This also hints at why Twisted is such a natural fit for our app:  a 
> multi-player networked game environment is not all that different 
> from a massive collaborative engineering environment ... at the 
> infrastructure level, essentially identical.

I've heard this comment several times and I don't think I've said much about it
before.  Allow me to wax philosophical for a moment.

One of my favorite things about Twisted is that, due to its origins, it
challenges people to think about what they're doing and whether "work" is
really any harder or more serious than "play".  It turns out that building
massively multiplayer games - "serious fun" - may be a great deal *more*
difficult than the average "software engineering" project.

If someone is reading this and hasn't been thusly challenged by Twisted or by
something else, maybe they should be ;-).  "The Hacker Ethic" is a great book
on this.

The Twisted framework shows its Python heritage this way, too: Python is a
language designed to teach, and markedly *unlike* Pascal, it is not a stuffy,
academic pedant.  Instead, Python applies its own lessons by making the
practical work of programming easier.  It illuminates the fact that programming
*is* learning: as Perlis said, "If we knew what we were doing, we would not
call it programming."

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020726/efdd712e/attachment.pgp 

From twisted at itamarst.org  Sat Jul 27 19:26:29 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 27 Jul 2002 19:26:29 -0400
Subject: [Twisted-Python] New client APIs
Message-ID: <3D432C25.80908@itamarst.org>

Hi,

I just checked in a new API for client connections (TCP/SSL/UNIX.) The main 
change is that you now register a ClientFactory using reactor.connectTCP (or 
Application.connectTCP). Various callbacks will get called on the factory, 
allowing you to reconnect on a failure or lost connection, let users abort 
connections, and so on. So, these policies are now done in the *factory* - 
connectionFailed will no longer be called on protocols unless you use the 
old deprecated APIs.

So what does this mean to you? If you are a Twisted developer, please take a 
look and see if you have any further needs or issues with the 
implementation. If all goes well (and this is the second refactoring I've 
done, I don't expect many changes) we need to start updating all the code to 
use the new APIs.

For example, FTP tests are failing right now, due to my not making the 
backwards compatability code totally backwards compatible. This is fine by 
me - the new API is much nicer and will make everyone's life easier, so it's 
not worth the time making the old API work exactly the same.

Documentation can be found by looking at:
IConnector, protocol.ClientFactory, IReactorTCP.connectTCP




From andrew-twisted at puzzling.org  Sun Jul 28 11:06:58 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 29 Jul 2002 01:06:58 +1000
Subject: [Twisted-Python] New client APIs
In-Reply-To: <3D432C25.80908@itamarst.org>
References: <3D432C25.80908@itamarst.org>
Message-ID: <20020728150658.GA1663@frobozz.local>

On Sat, Jul 27, 2002 at 07:26:29PM -0400, Itamar Shtull-Trauring wrote:
> 
> For example, FTP tests are failing right now, due to my not making the 

Ah, FTP failing again :)

FTP seems to be the Twisted canary -- it's always the first to break...

> backwards compatability code totally backwards compatible. This is fine by 
> me - the new API is much nicer and will make everyone's life easier, so 
> it's not worth the time making the old API work exactly the same.
> 
> Documentation can be found by looking at:
> IConnector, protocol.ClientFactory, IReactorTCP.connectTCP

I've taken a look at the documentation, but I'm not certain of the best way
to proceed to fix FTP.

FTP doesn't want any sort of reconnection funny-business going on.  If the
data connection fails, I just want to know about that and send an error
message, rather than do any sort of reconnection.  reactor.clientTCP used to
do that.  I'm not sure what the equivalent now is?  Do I need to make a
ClientFactory subclass that implements these "try once then give up" sematics?
If so, should that be a standard utility class?

I get the feeling that the answer is quite simple and staring me in the
face, so please tell me what it is :)

-Andrew.




From twisted at itamarst.org  Sun Jul 28 11:22:52 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 28 Jul 2002 11:22:52 -0400
Subject: [Twisted-Python] New client APIs
References: <3D432C25.80908@itamarst.org> <20020728150658.GA1663@frobozz.local>
Message-ID: <3D440C4C.7030807@itamarst.org>

Andrew Bennetts wrote:

> FTP doesn't want any sort of reconnection funny-business going on.  If the
> data connection fails, I just want to know about that and send an error
> message, rather than do any sort of reconnection.  reactor.clientTCP used to
> do that.  I'm not sure what the equivalent now is?  Do I need to make a
> ClientFactory subclass that implements these "try once then give up" sematics?
> If so, should that be a standard utility class?

That's exactly what ClientFactory does. It does *not* reconnect 
automatically - that's up to you to decide. See docstrings for 
ClientFactory.connectionLost and .connectionFailed.




From ldanielburr at earthlink.net  Sat Jul 27 13:11:07 2002
From: ldanielburr at earthlink.net (Daniel Burr)
Date: Sat, 27 Jul 2002 10:11:07 -0700
Subject: [Twisted-Python] Newbie: Help with twisted.web, HTTPClient
Message-ID: <Springmail.0994.1027789867.0.19901500@webmail.pas.earthlink.net>

I just started playing with Twisted last week; great stuff!

My question is this:  I have an .rpy file, which defines a Resource.  As part
of this Resource's render method, I need to perform an http GET against
another server, which of course causes the twisted.web server to block.  From
looking through the source code, it looks like the HTTPClient should be what I
need to perform a non-blocking http GET from within my resource, but I cannot
find  any information on how to use it; just creating an instance and doing
sendCommand fails, stating that there is no transport.

I guess I could just use httplib.HTTPConnection, but I'd have to run that in a
separate thread in order to prevent blocking, and it just seems like I
shouldn't need to use threads for something so simple.

Any advice or help would be greatly appreciated, thanks.

Daniel Burr



From carmstro at twistedmatrix.com  Sun Jul 28 14:12:29 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 28 Jul 2002 14:12:29 -0400
Subject: [Twisted-Python] Newbie: Help with twisted.web, HTTPClient
In-Reply-To: 
	<Springmail.0994.1027789867.0.19901500@webmail.pas.earthlink.net>
References: 
	<Springmail.0994.1027789867.0.19901500@webmail.pas.earthlink.net>
Message-ID: <1027879950.6779.8.camel@radii>

On Sat, 2002-07-27 at 13:11, Daniel Burr wrote:
> I just started playing with Twisted last week; great stuff!
> 
> My question is this:  I have an .rpy file, which defines a Resource.  As part
> of this Resource's render method, I need to perform an http GET against
> another server, which of course causes the twisted.web server to block.  From
> looking through the source code, it looks like the HTTPClient should be what I
> need to perform a non-blocking http GET from within my resource, but I cannot
> find  any information on how to use it; just creating an instance and doing
> sendCommand fails, stating that there is no transport.

Check out doc/examples/qtdemo.py; it has a HTTPClient example (class
TwistzillaClient). Basically, you'll want your render method to 

1) instantiate your HTTPClient subclass, making sure to pass your
'request' object to it (and make sure to connect it),
2) return web.server.NOT_DONE_YET,
3) in the 'handleResponse' method of your HTTPClient subclass, write all
the data with 'request.write(data)', then call 'request.finish()' so
twisted.web knows you're done.

HTH.
-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Sun Jul 28 15:12:14 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 28 Jul 2002 14:12:14 -0500 (CDT)
Subject: [Twisted-Python] New client APIs
In-Reply-To: <3D432C25.80908@itamarst.org>
References: <3D432C25.80908@itamarst.org>
Message-ID: <20020728.141214.61503296.glyph@twistedmatrix.com>


On Sat, 27 Jul 2002 19:26:29 -0400, Itamar Shtull-Trauring <twisted at itamarst.org> wrote:
> For example, FTP tests are failing right now, due to my not making the 
> backwards compatability code totally backwards compatible. This is fine by 
> me - the new API is much nicer and will make everyone's life easier, so it's 
> not worth the time making the old API work exactly the same.

Okay, this is fixed now.

Soon, I'm going to hack in support to acapnotic's CVSToys to run the unit tests
on the HEAD branch and e-mail checkin offenders once an hour until they get
fixed.  Until I do that, though, I will sporadically emulate that functionality
manually; expect to have a full mailbox if you don't check that unit tests are
still working (backwards compatibility hacks or no!). ;-)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020728/dfd77f0b/attachment.pgp 

From mattcampbell at pobox.com  Sun Jul 28 16:19:39 2002
From: mattcampbell at pobox.com (Matt Campbell)
Date: Sun, 28 Jul 2002 15:19:39 -0500
Subject: [Twisted-Python] Two things in twisted.internet.process
Message-ID: <20020728151939.A30755@mattc.cm.nu>

1.  I noticed that when Process.__init__ prepares to execute the
child process, it closes all fd's from 3 to 255.  Is it possible
for the child process to inherit open files with fd's greater than
255?  I'm concerned that this could happen on busy servers, but
this is one aspect of Unix about which I don't know much.

2.  To increase consistency with the usual interface between
transports and protocols, I think it would be good to implement a
loseConnection method in the Process class that does what closeStdin
does now.
-- 
Matt Campbell
Email and MSN Messenger:  mattcampbell at pobox.com
Phone:  (316) 652-8727
Web site:  http://www.pobox.com/~mattcampbell/



From lac at strakt.com  Mon Jul 29 07:37:16 2002
From: lac at strakt.com (Laura Creighton)
Date: Mon, 29 Jul 2002 13:37:16 +0200
Subject: [Twisted-Python] FAST 03 (Usenix conference on File Storage Technologies)
Message-ID: <200207291137.g6TBbGr9005342@ratthing-b246.strakt.com>

I was looking for interesting conferences where Strakt could present a
paper and found this one.  I think that a paper on Twisted would be
accepted if anybody is interested in writing one.  4000 - 6000 words due 
Sept 03.  (Automatic extension to Sept 10).

There is also a request for 'works in progress' and 'provocative
opinions'.  These only have to be one page long.  They mention that
they are particularly interested in student work.

See: http://www.usenix.org/events/fast03/cfp/

if anybody has time and are interested.  The conference will be in
San Jose CA March 31-April 2.

Laura Creighton



From liiwi at lonesom.pp.fi  Sun Jul 28 18:03:34 2002
From: liiwi at lonesom.pp.fi (Jaakko Niemi)
Date: Mon, 29 Jul 2002 01:03:34 +0300
Subject: [Twisted-Python] suckosity of text/html as default content type
Message-ID: <874rejbjd5.fsf@jumper.lonesom.pp.fi>

A non-text attachment was scrubbed...
Name: twisted.mime.patch
Type: text/x-patch
Size: 1356 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020729/957fcbae/attachment.bin 

From tv at twistedmatrix.com  Mon Jul 29 05:26:07 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 29 Jul 2002 12:26:07 +0300
Subject: [Twisted-Python] Two things in twisted.internet.process
In-Reply-To: <20020728151939.A30755@mattc.cm.nu>
References: <20020728151939.A30755@mattc.cm.nu>
Message-ID: <20020729092607.GA29916@ki.yok.utu.fi>

On Sun, Jul 28, 2002 at 03:19:39PM -0500, Matt Campbell wrote:
> 1.  I noticed that when Process.__init__ prepares to execute the
> child process, it closes all fd's from 3 to 255.  Is it possible
> for the child process to inherit open files with fd's greater than
> 255?  I'm concerned that this could happen on busy servers, but
> this is one aspect of Unix about which I don't know much.

	fcntl(fd, F_SETFD, FD_CLOEXEC). On _all_ fds
	one does not want to share with children.

	Make the kernel do the work, it's the only sane way.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From tv at twistedmatrix.com  Mon Jul 29 05:35:31 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 29 Jul 2002 12:35:31 +0300
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020726124127.GA10592@twistedmatrix.com>
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com>
Message-ID: <20020729093531.GB29916@ki.yok.utu.fi>

On Fri, Jul 26, 2002 at 07:41:27AM -0500, Chris Armstrong wrote:
> AFAIK, twisted.web.static _does_ do non-blocking reading, so check
> that out.  I don't think anyone has implemented non-blocking writing
> yet. (There's some sort of FileWrapper protocol or somesuch IIRC,
> but it just assumes that write() won't take very long -- it's only
> for testing)

	Bzzt, wrong. All file IO is sync. To do async file IO,
	you need to use a different kernel API -- called AIO,
	and not very widely available. (Or emulate it by forking
	worker processes that pass data between stdin/stdout and
	file).

	select(2)/poll(2) overhead has been historically deemed
	too high for async file IO, files tend to be so much faster
	that separating them from sockets was historically thought
	of as a good idea.

	Later generations have learned to curse select(2), see how
	slow network filesystems and cheap IDE disks can be, and hope
	for an low-overhead select(2)/poll(2) replacement for both
	file IO and non-file IO.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From mattcampbell at pobox.com  Mon Jul 29 11:35:37 2002
From: mattcampbell at pobox.com (Matt Campbell)
Date: Mon, 29 Jul 2002 10:35:37 -0500
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020729093531.GB29916@ki.yok.utu.fi>; from tv@twistedmatrix.com on Mon, Jul 29, 2002 at 12:35:31PM +0300
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi>
Message-ID: <20020729103537.A32919@mattc.cm.nu>

On Mon, Jul 29, 2002 at 12:35:31PM +0300, Tommi Virtanen wrote:
> 	Later generations have learned to curse select(2), see how
> 	slow network filesystems and cheap IDE disks can be, and hope
> 	for an low-overhead select(2)/poll(2) replacement for both
> 	file IO and non-file IO.

Has anyone looked at the kqueue(2) and kevent(2) system calls in
FreeBSD?  These seem to have less overhead than select(2)/poll(2),
and FreeBSD also has the AIO system calls, so these two features
can be used together to provide async file I/O and better async
socket I/O (at least on one platform).  I've also read that there's
a Linux kernel patch that adds a device called /dev/poll, which
has less overhead than poll(2).  You can read more about these
things at:

http://www.kegel.com/c10k.html

There's a Python binding for kqueue(2)/kevent(2) at:

http://people.freebsd.org/~dwhite/PyKQueue/
-- 
Matt Campbell
Email and MSN Messenger:  mattcampbell at pobox.com
Phone:  (316) 652-8727
Web site:  http://www.pobox.com/~mattcampbell/



From glyph at twistedmatrix.com  Mon Jul 29 11:35:59 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 29 Jul 2002 10:35:59 -0500 (CDT)
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020729093531.GB29916@ki.yok.utu.fi>
References: <20020726123129.GA7907@soniq.net>
	<20020726124127.GA10592@twistedmatrix.com>
	<20020729093531.GB29916@ki.yok.utu.fi>
Message-ID: <20020729.103559.08323574.glyph@twistedmatrix.com>


On Mon, 29 Jul 2002 12:35:31 +0300, Tommi Virtanen <tv at twistedmatrix.com> wrote:
> On Fri, Jul 26, 2002 at 07:41:27AM -0500, Chris Armstrong wrote:
> > AFAIK, twisted.web.static _does_ do non-blocking reading, so check
> > that out.  I don't think anyone has implemented non-blocking writing
> > yet. (There's some sort of FileWrapper protocol or somesuch IIRC,
> > but it just assumes that write() won't take very long -- it's only
> > for testing)

> 	Bzzt, wrong. All file IO is sync. To do async file IO,
> 	you need to use a different kernel API -- called AIO,
> 	and not very widely available. (Or emulate it by forking
> 	worker processes that pass data between stdin/stdout and
> 	file).

Mr. Virtanen is right. The reason you might think it's async is that most File
I/O operations in Twisted are performed in a response to some request (web,
ftp), and are treated as "large file" operations.  The file is read one 'chunk'
at a time, and more is only read when the network connection it's being written
to becomes available for writing again.  This is what the "producer/consumer"
API in twisted.internet is for.  In general, on linux, this will mean that your
data is available in most cases anyway, due to the speed difference between
network & file I/O.  In the cases where it's not, it's likely that your server
is under high enough load that it's OK to block for an ms or two to wait for
the data.

Asyncore has a great little comment about this:

# After a little research (reading man pages on various unixen, and
# digging through the linux kernel), I've determined that select()
# isn't meant for doing doing asynchronous file i/o.
# Heartening, though - reading linux/mm/filemap.c shows that linux
# supports asynchronous read-ahead.  So _MOST_ of the time, the data
# will be sitting in memory for us already when we go to read it.

Hope this is enlightening.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020729/137d0477/attachment.pgp 

From carmstro at twistedmatrix.com  Mon Jul 29 11:44:53 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Mon, 29 Jul 2002 10:44:53 -0500
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020729093531.GB29916@ki.yok.utu.fi>
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi>
Message-ID: <20020729154453.GB11449@twistedmatrix.com>

On Mon, Jul 29, 2002 at 12:35:31PM +0300, Tommi Virtanen wrote:
> 	Later generations have learned to curse select(2), see how
> 	slow network filesystems and cheap IDE disks can be, and hope
> 	for an low-overhead select(2)/poll(2) replacement for both
> 	file IO and non-file IO.

I guess this is the lesson: Don't serve web data from an NFS mount!




From twisted at itamarst.org  Mon Jul 29 14:30:09 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 29 Jul 2002 14:30:09 -0400
Subject: [Twisted-Python] Large file transfers
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi> <20020729103537.A32919@mattc.cm.nu>
Message-ID: <3D4589B1.8040508@itamarst.org>

Matt Campbell wrote:

> Has anyone looked at the kqueue(2) and kevent(2) system calls in
> FreeBSD?  These seem to have less overhead than select(2)/poll(2),
> and FreeBSD also has the AIO system calls, so these two features
> can be used together to provide async file I/O and better async
> socket I/O (at least on one platform).

IronPort (http://www.ironport.com) use these, together with Stackless. I'm 
hoping we can:

  (a) Convince them at some point to use Twisted for the event loop (I talked
      to Christian Tismer about this at EuroPython).

  (b) Get a kqueue reactor written.

Doing (a) might lead almost immediately to (b), but I doubt it will happen 
anytime soon unless someone here knows someone at Ironport or Christian 
Tismer and can push this some more.

If anyone wants to do (b), please do - writing a reactor isn't hard, but if 
you don't have a FreeBSD box it's kinda hard to develop a kqueue one.





From mattcampbell at pobox.com  Mon Jul 29 15:16:38 2002
From: mattcampbell at pobox.com (Matt Campbell)
Date: Mon, 29 Jul 2002 14:16:38 -0500
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <3D4589B1.8040508@itamarst.org>; from twisted@itamarst.org on Mon, Jul 29, 2002 at 02:30:09PM -0400
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi> <20020729103537.A32919@mattc.cm.nu> <3D4589B1.8040508@itamarst.org>
Message-ID: <20020729141637.A33325@mattc.cm.nu>

On Mon, Jul 29, 2002 at 02:30:09PM -0400, Itamar Shtull-Trauring wrote:
>   (b) Get a kqueue reactor written.

I have a FreeBSD box, so I'll do this.
-- 
Matt Campbell
Email and MSN Messenger:  mattcampbell at pobox.com
Web site:  http://www.pobox.com/~mattcampbell/



From twisted at itamarst.org  Mon Jul 29 15:41:34 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 29 Jul 2002 15:41:34 -0400
Subject: [Twisted-Python] Large file transfers
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi> <20020729103537.A32919@mattc.cm.nu> <3D4589B1.8040508@itamarst.org> <20020729141637.A33325@mattc.cm.nu>
Message-ID: <3D459A6E.5090708@itamarst.org>

Matt Campbell wrote:

>>  (b) Get a kqueue reactor written.
> 
> 
> I have a FreeBSD box, so I'll do this.

Great! I suggest using twisted.internet.poll as a model for how to do it 
(though it'll probably be cleaner). Please feel free to ask questions, on 
the mailing list, IRC (#twisted on irc.openporjects.net) or by emailing me 
directly.





From abo at minkirri.apana.org.au  Mon Jul 29 21:57:30 2002
From: abo at minkirri.apana.org.au (Donovan Baarda)
Date: Tue, 30 Jul 2002 11:57:30 +1000
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020729.103559.08323574.glyph@twistedmatrix.com>
References: <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi> <20020729.103559.08323574.glyph@twistedmatrix.com>
Message-ID: <20020730015730.GB21788@minkirri.apana.org.au>

G'day,

On Mon, Jul 29, 2002 at 10:35:59AM -0500, Glyph Lefkowitz wrote:
> 
> On Mon, 29 Jul 2002 12:35:31 +0300, Tommi Virtanen <tv at twistedmatrix.com> wrote:
> > On Fri, Jul 26, 2002 at 07:41:27AM -0500, Chris Armstrong wrote:
[...]

Does anyone else find it funny to have a discussion about the performance
problems of select/poll/whatever on a list devoted to a server framework
written in an (psedo-)interpreted scripting language :-)

> Asyncore has a great little comment about this:
> 
> # After a little research (reading man pages on various unixen, and
> # digging through the linux kernel), I've determined that select()
> # isn't meant for doing doing asynchronous file i/o.
> # Heartening, though - reading linux/mm/filemap.c shows that linux
> # supports asynchronous read-ahead.  So _MOST_ of the time, the data
> # will be sitting in memory for us already when we go to read it.
> 
> Hope this is enlightening.

I'm curious as to what this actually means. If I give an open file a fcntl()
to set it to non-blocking and use it in a select(), what happens? Do I get
undeterminite behaviour? Does the select always return the file immediately
as ready, only to have the read (sometimes) block?

-- 
----------------------------------------------------------------------
ABO: finger abo at minkirri.apana.org.au for more info, including pgp key
----------------------------------------------------------------------



From glyph at twistedmatrix.com  Tue Jul 30 03:22:31 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 30 Jul 2002 02:22:31 -0500 (CDT)
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020730015730.GB21788@minkirri.apana.org.au>
References: <20020729093531.GB29916@ki.yok.utu.fi>
	<20020729.103559.08323574.glyph@twistedmatrix.com>
	<20020730015730.GB21788@minkirri.apana.org.au>
Message-ID: <20020730.022231.21368560.glyph@twistedmatrix.com>

On Tue, 30 Jul 2002 11:57:30 +1000, abo at minkirri.apana.org.au (Donovan Baarda) wrote:
> G'day,
> 
> On Mon, Jul 29, 2002 at 10:35:59AM -0500, Glyph Lefkowitz wrote:
> > 
> > On Mon, 29 Jul 2002 12:35:31 +0300, Tommi Virtanen <tv at twistedmatrix.com> wrote:
> > > On Fri, Jul 26, 2002 at 07:41:27AM -0500, Chris Armstrong wrote:
> [...]
> 
> Does anyone else find it funny to have a discussion about the performance
> problems of select/poll/whatever on a list devoted to a server framework
> written in an (psedo-)interpreted scripting language :-)

Not at all.  Performance and scaling issues with the asynchronous networking
side of things are distinct from CPU load problems with data processing.
Especially when you're spending CPU time on being flexible and robust, it's
important to use the most efficient available mechanisms for doing the
low-level, well-understood tasks that you're basing your high-level logic on.

> > Hope this is enlightening.
> 
> I'm curious as to what this actually means. If I give an open file a fcntl()
> to set it to non-blocking and use it in a select(), what happens? Do I get
> undeterminite behaviour? Does the select always return the file immediately
> as ready, only to have the read (sometimes) block?

You can't set a file to non-blocking, basically.  It won't do anything.
select() will always say that files are readable, and those files will "block"
when you read from them.  Then again, this is *extremely* fast, at least on
linux systems.  (I don't know about BSD, but at least on Windows you can't even
*pass* a file fd to select; it will just give you an error.)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020730/75967034/attachment.pgp 

From norbert.klamann at klamann-software.de  Tue Jul 30 05:50:50 2002
From: norbert.klamann at klamann-software.de (norbert.klamann at klamann-software.de)
Date: Tue, 30 Jul 2002 11:50:50 +0200
Subject: [Twisted-Python] Please allow download of tarballs from viewcvs
Message-ID: <E17ZTeU-0006iq-00@config13.kundenserver.de>

Hello, list,

would you mind to allow the generation of tarballs from cvs repository
on the fly? 
It is technically possible in viewcvs, at least on new versions. It is a
Setting in viewcvs's configuration file. 
I can't use cvs in itself because of firewall issues on customer's site.

Cvsgrab doesn't cut it either, because it can't handle the parameter
handling of your viewcvs installation. 

Another possibility would be an upgrade to viewcvs ? la sourceforge,
i.e. 0.8.

Thanks for your help !



From norbert.klamann at klamann-software.de  Tue Jul 30 07:01:23 2002
From: norbert.klamann at klamann-software.de (norbert.klamann at klamann-software.de)
Date: Tue, 30 Jul 2002 13:01:23 +0200
Subject: [Twisted-Python] Please allow download of tarballs from viewcvs[2]
Message-ID: <E17ZUkl-0003Lh-00@config14.kundenserver.de>

[Sorry, forgot to sign the mail]
Hello, list,

would you mind to allow the generation of tarballs from cvs repository
on the fly? 
It is technically possible in viewcvs, at least on new versions. It is a
Setting in viewcvs's configuration file. 
I can't use cvs in itself because of firewall issues on customer's site.

Cvsgrab doesn't cut it either, because it can't handle the parameter
handling of your viewcvs installation. 

Another possibility would be an upgrade to viewcvs ? la sourceforge,
i.e. 0.8.

Thanks for your help !

Norbert Klamann
norbert.klamann at klamann-software.de



From arashi1 at pd.jaring.my  Tue Jul 30 12:19:39 2002
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Wed, 31 Jul 2002 00:19:39 +0800
Subject: [Twisted-Python] Dynamic web application using twisted.web.resource
Message-ID: <200207310019.39373.arashi1@pd.jaring.my>

Hello fellow twisters,

This is a question (albeit a long one) directed at twisted.web and resource.

The project:
I would like to serve a dynamic website using the twisted web server. I 
understand that the webserver's 'root' directory can be set at a file? I may 
have a misunderstanding of the code and docs but if so, feel free to set me 
straight.

The website (not real):
http://www.mywebsite.com/

This is the root of the site, which is in reality a erm..rpy? program? Which 
means that there are _no_ static pages at all. And no other 'file' - 
everything goes through that .rpy file. (or whatever else I should be using)

In a browser, entering this would get a dynamically 'constructed' page which 
is in fact:

myobject.index()

From here on, something like:
http://www.mywebsite.com/projects/project_ako

would actually be (in the code) something like:

myobject.projects["project_ako"].index(myvar=None)

which returns an html page suitable for the browser's consumption.
On the other hand this:

http://www.mywebsite.com/projects/project_ako?myvar=bold

(for http GET. POST should be handled as well...how? I am guessing the request 
object?)

Would call:
myobject.projects["project_ako"].index(myvar='bold')

Any other subobject of project_ako would 'call' a method on that object.

So for:
http://www.mywebsite.com/projects/project_ako/getSize

Would call:
myobject.projects["project_ako"].getSize()

The return value being sent back to the browser. Calls to non-existing methods 
get a "No such method or object" error returned - formatted, of course.

The question is of course, how do you differentiate between an object and a 
method? This is done by the application itself. It would check to see if that 
object has a method with that name, if not check to see if it has a child 
object with that name. Else return error.

The thing is, I know I need to use twisted.web.resource but I'm not sure 
_how_. How does this fit in with the .rpy file? I think I need to create my 
modules and classes and then create an .rpy which acts as the 
erm..'interface' to the modules and classes. Could someone give me some hints 
and tips?

Conceptually, it's quite simple but I can't seem to figure out how to do it 
with twisted...Anyway, thanks for any help, in advance.

-- 
Regards,
Mukhsein Johari



From twisted at itamarst.org  Tue Jul 30 13:48:55 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 30 Jul 2002 13:48:55 -0400
Subject: [Twisted-Python] Dynamic web application using twisted.web.resource
References: <200207310019.39373.arashi1@pd.jaring.my>
Message-ID: <3D46D187.3070807@itamarst.org>

Mukhsein Johari wrote:

> The thing is, I know I need to use twisted.web.resource but I'm not sure 
> _how_. How does this fit in with the .rpy file? I think I need to create my 
> modules and classes and then create an .rpy which acts as the 
> erm..'interface' to the modules and classes. Could someone give me some hints 
> and tips?

The model you're describing is just what Zope's ZPublisher and Quixote do. I 
would suggest using Zope, but if you feel it's too heavy then Quixote will 
likely be a perfect fit.

Another alternative, if you intend to use Twisted's other capabilities and 
thus want to use twisted.web, is something like this:


class PublisherResource(resource.Resource):

     isLeaf = 1

     def __init__(self, root):
         self.root = root

     def render(self, request):
         obj = self.root
         for p in request.postpath:
             # convert "/foo/bar" to self.root.foo.bar
             obj = getattr(obj, p)
         if not callable(obj):
              return "arg"
         else:
              return obj(request)

Of course, this is probably insecure, buggy, and may not even work, but 
that's the general idea of how to do it.





From dp at twistedmatrix.com  Tue Jul 30 15:15:13 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Tue, 30 Jul 2002 12:15:13 -0700
Subject: [Twisted-Python] Dynamic web application using twisted.web.resource
In-Reply-To: <200207310019.39373.arashi1@pd.jaring.my>
Message-ID: <ACFC8A92-A3F0-11D6-8A4F-003065B25CAA@twistedmatrix.com>

On Tuesday, July 30, 2002, at 09:19 AM, Mukhsein Johari wrote:
>
> The project:
> I would like to serve a dynamic website using the twisted web server. I
> understand that the webserver's 'root' directory can be set at a file? 
> I may
> have a misunderstanding of the code and docs but if so, feel free to 
> set me
> straight.

When you create a tap file using "bin/mktap web --path /foo/bar/baz", 
mktap creates a File instance, which is a Resource subclass, which knows 
to look in "/foo/bar/baz" as the root directory of the site. However, 
mktap is just a "helper" script that instanciates, configures, and 
persists various common application types. If you want the root object 
of your web site to be a custom Resource subclass that only serves 
dynamic pages, you're free to do that.

> The website (not real):
> http://www.mywebsite.com/
>
> This is the root of the site, which is in reality a erm..rpy? program? 
> Which
> means that there are _no_ static pages at all. And no other 'file' -
> everything goes through that .rpy file. (or whatever else I should be 
> using)

So, as I just said, what you should do is create your own Application 
instance, create an instance of twisted.web.server.Site, and create your 
own custom Resource subclass to act as the root of that site. Your 
Resource subclass should override getChild(name, request) and 
render(request), as I will describe below. Here's how you would go about 
starting your custom server:

# MyCoolWebServer.py

from twisted.web import server
from twisted.internet import reactor

import myGreatResourceSubclass

root = myGreatResourceSubclass.MyRoot()

site = server.Site(root)

reactor.listenTCP(8080, site)
reactor.run()

> In a browser, entering this would get a dynamically 'constructed' page 
> which
> is in fact:
>
> myobject.index()

In the example above, visiting the root page would end up invoking 
root.render(request).

> From here on, something like:
> http://www.mywebsite.com/projects/project_ako
>
> would actually be (in the code) something like:
>
> myobject.projects["project_ako"].index(myvar=None)

If these semantics are what you *really* want (i.e. transparency, 
getitem, or getattr being used for traversal), I suggest looking at Zope 
or Quixote, as Itamar suggested. However, here's how the following would 
look in twisted:

root.getChild("projects", request).getChild("project_ako", 
request).render(request)

In your root Resource subclass, you can define getChild to do whatever 
you wish such as dynamically generate a new Resource subclass to handle 
the "projects" portion, which in turn has a getChild that knows how to 
create an object to handle the "project_ako" portion, which in turn has 
a render() method that returns a string, which will be sent to the 
browser.

> which returns an html page suitable for the browser's consumption.
> On the other hand this:
>
> http://www.mywebsite.com/projects/project_ako?myvar=bold
>
> (for http GET. POST should be handled as well...how? I am guessing the 
> request
> object?)
>
> Would call:
> myobject.projects["project_ako"].index(myvar='bold')

It would be exactly the same call as above, except request.args would be 
a dictionary that looked like this:

{'myvar': ['bold']}

Note that every value in the args dictionary is always a list, to make 
handling lists and non lists more uniform.

> Any other subobject of project_ako would 'call' a method on that object.
>
> So for:
> http://www.mywebsite.com/projects/project_ako/getSize
>
> Would call:
> myobject.projects["project_ako"].getSize()
>
> The return value being sent back to the browser. Calls to non-existing 
> methods
> get a "No such method or object" error returned - formatted, of course.

If you want automatic getChild traversal to stop at the object 
representing "project_ako", set isLeaf = 1 on the object representing 
"project_ako". This will cause render(request) to be called on 
"project_ako" with the remaining elements of the path in 
request.postpath. You can then implement the semantics described above 
in your render() method.

However, I find it much easier to divide functionality into separate 
classes and always use render() to do the html generation.

> The question is of course, how do you differentiate between an object 
> and a
> method? This is done by the application itself. It would check to see 
> if that
> object has a method with that name, if not check to see if it has a 
> child
> object with that name. Else return error.

If this is *really* the functionality that you want, again, this is far 
more similar to the traversal semantics of Zope or Quixote. Twisted has 
taken a far more explicit tack, where there is a specific api that your 
objects must implement to provide object-publishing functionality.

>
> The thing is, I know I need to use twisted.web.resource but I'm not sure
> _how_. How does this fit in with the .rpy file? I think I need to 
> create my
> modules and classes and then create an .rpy which acts as the
> erm..'interface' to the modules and classes. Could someone give me some 
> hints
> and tips?
>
> Conceptually, it's quite simple but I can't seem to figure out how to 
> do it
> with twisted...Anyway, thanks for any help, in advance.

Hope this helps!

Donovan




From steve.waterbury at gsfc.nasa.gov  Tue Jul 30 11:12:49 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Tue, 30 Jul 2002 11:12:49 -0400
Subject: [Twisted-Python] Patch for dbauth.tac in examples
Message-ID: <3D46ACF1.75845321@gsfc.nasa.gov>

Since I want to implement a PB-based app with db authorization, I 
was tinkering with the dbauth.tac example in an effort to educate 
myself.  Changed "passport" to "cred" and set the database explicitly 
(created the dbcred tables in the "twisted" database that bugs uses).  

"Create an Identity", "remove", and "[change] password" work; there 
seems to be a problem with gotPerspectives' call to dbgadgets.py, but 
I haven't messed with gadgets (don't need them yet), so I won't be 
looking at that.  (A gadgets cognoscente could fix it in seconds, 
anyway, I'm sure!  ;^)  

Cheers,
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html
-------------- next part --------------
*** dbauth.tac	Tue Jul 30 10:25:04 2002
--- dbauth-new.tac	Tue Jul 30 09:50:37 2002
***************
*** 1,18 ****
  #!python
  
  from twisted.internet.app import Application
- from twisted.internet import passport
  from twisted.words import service, ircservice
! from twisted.enterprise import adbapi, dbpassport, dbgadgets
  from twisted.web import server
  
! auth = dbpassport.DatabaseAuthorizer(adbapi.ConnectionPool("pyPgSQL.PgSQL"))
  a = Application("db-auth", authorizer=auth)
  ws = service.Service("twisted.words", a)
  
  gdgt = dbgadgets.IdentitiesGadget(auth)
  
! a.listenOn(8486, server.Site(gdgt))
  
  a.listenTCP(6667, ircservice.IRCGateway(ws))
  
--- 1,17 ----
  #!python
  
  from twisted.internet.app import Application
  from twisted.words import service, ircservice
! from twisted.enterprise import adbapi, dbcred, dbgadgets
  from twisted.web import server
  
! auth = dbcred.DatabaseAuthorizer(adbapi.ConnectionPool("pyPgSQL.PgSQL", database="twisted"))
  a = Application("db-auth", authorizer=auth)
  ws = service.Service("twisted.words", a)
  
  gdgt = dbgadgets.IdentitiesGadget(auth)
  
! a.listenTCP(8486, server.Site(gdgt))
  
  a.listenTCP(6667, ircservice.IRCGateway(ws))
  

From jon at totient.demon.co.uk  Tue Jul 30 16:51:01 2002
From: jon at totient.demon.co.uk (Jon Dyte)
Date: Tue, 30 Jul 2002 21:51:01 +0100 (BST)
Subject: [Twisted-Python] Please allow download of tarballs from viewcvs[2]
In-Reply-To: norbert.klamann@klamann-software.de
References: <E17ZUkl-0003Lh-00@config14.kundenserver.de>
Message-ID: <15686.64565.556903.194894@erdos.totient.com>

Hi

I'd like to second this request.
Downloading cvs versions via the viewcvs page would be a big win.

+1

Jon



From barry at zope.com  Wed Jul 31 12:56:15 2002
From: barry at zope.com (Barry A. Warsaw)
Date: Wed, 31 Jul 2002 12:56:15 -0400
Subject: [Twisted-Python] You guys rock
Message-ID: <15688.5807.633561.598158@yyz.zope.com>

I wanted to test out some news/mail gatewaying for Mailman 2.1 but I
didn't want to go through the hassle of actually connecting things up
to a real news server, and I /definitely/ didn't want to actually try
to install inn or some nonesense (I'd like to do some other work this
week :).

I wished I had something like Lib/smtpd.py in the Python distro for
the server side of NNTP, then it dawned on me that I remember Moshe
and crew saying that Twisted comes with a news server.  Well, let's
just see how easy it would be to hook up.

You guys have a big problem, because it was /way/ too easy to do!  How
are you going to make the big consulting bucks? :)

Three commands and I had an nntp server with a single newsgroup that
was featured enough to connect Mozilla to, and to point Mailman's
gateway at and actually get messages flowing back and forth.
Congratulations!

I don't know if I'm going to do much else with Twisted, but I /would/
like to try to figure out how to use it in a Mailman functional test
suite.  Right now I have some very ugly kludges to start up smtpd.py,
send a message to it, and then suck the message out and compare the
results with what I expect.  As time permits I think I'll try to see
how easy it would be to use Twisted in the role of smtpd.py, and add
some tests for news as well as mail.

The main issue is that unittest must be able to fire off the server,
and extract information from it once the message has been propagated.
My current test is pretty kludgy, but I'll spare you the asyncgore
(sic).  What would be ideal would be to be able to create a Twisted
service but don't start it, send a message via Mailman machinery, then
start the server and block on reading that message back from Twisted
(with a timeout).  I'd run Twisted with both an SMTP and NNTP server.
Has anybody else thought about using Twisted in a unit or functional
test situation?

I'm not on this list so please CC me.

Anyway, good stuff, thanks.
-Barry

P.S. You guys need a bass player. :)



From twisted at itamarst.org  Wed Jul 31 14:59:31 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 31 Jul 2002 14:59:31 -0400
Subject: [Twisted-Python] You guys rock
References: <15688.5807.633561.598158@yyz.zope.com>
Message-ID: <3D483393.8040802@itamarst.org>

Barry A. Warsaw wrote:

> You guys have a big problem, because it was /way/ too easy to do!  How
> are you going to make the big consulting bucks? :)

It's simple:

1. Get everyone to use it.
2. ???
3. MONEY!

> Three commands and I had an nntp server with a single newsgroup that
> was featured enough to connect Mozilla to, and to point Mailman's
> gateway at and actually get messages flowing back and forth.
> Congratulations!

Thanks - can we ask you for a quote for our 1.0 press release?

> I don't know if I'm going to do much else with Twisted, but I /would/
> like to try to figure out how to use it in a Mailman functional test
> suite.  Right now I have some very ugly kludges to start up smtpd.py,
> send a message to it, and then suck the message out and compare the
> results with what I expect.  As time permits I think I'll try to see
> how easy it would be to use Twisted in the role of smtpd.py, and add
> some tests for news as well as mail.
> 
> The main issue is that unittest must be able to fire off the server,
> and extract information from it once the message has been propagated.
> My current test is pretty kludgy, but I'll spare you the asyncgore
> (sic).  What would be ideal would be to be able to create a Twisted
> service but don't start it, send a message via Mailman machinery, then
> start the server and block on reading that message back from Twisted
> (with a timeout).  I'd run Twisted with both an SMTP and NNTP server.
> Has anybody else thought about using Twisted in a unit or functional
> test situation?

Well, if the Twisted server is in the same process (you can run it in a 
different thread) you have two alternatives:

reactor.listenTCP(8025, myFactory)
# we don't call reactor.run() here, instead we do
while testIsntDone:
     reactor.iterate() # do a single iteration of the event loop

Or:

reactor.listenTCP(8025, myFactory)
reactor.run()
# when test is done it can call reactor.crash() to stop the event loop,
# which unlike reactor.stop() still allows us to run() again


In both cases you can use reactor.callLater() for a timoeut. We do both in 
our unit tests (twisted.test) package, so you can find some examples there.

If you want to run Twisted in a different process, you may want to look at 
how admin/accepttests does it. Basically you make a python script that has a 
twisted.internet.app.Application instance called "application" at module 
level, use the twistd command to run it (twistd -y myscript.py), and then 
"kill `cat twistd.pid`" to shutdown the server. If you want to communicate 
with it while its running xml-rpc would probably work nicely 
(twisted.web.xmlrpc and see the example in doc/examples/).





From carmstro at twistedmatrix.com  Wed Jul 31 20:50:44 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 31 Jul 2002 20:50:44 -0400
Subject: [Twisted-Python] Defer changes
Message-ID: <1028163045.2759.5.camel@radii>

Two changes to defer.py

1) get rid of 'logError' as default errback. Tv complained about this,
and I agree that it's silly -- logging should happen at the end of the
chain, not at random points during the execution. instead of using
'logError', it now just uses (lambda x: x).

2) Get rid of old PB compatibility thing. We had a check for StringType
in the result of a call/errback, because PB errors used to be strings.
They're not any more. I committed the Failure patch months ago ;-)

And one more thing that I propose, but that's not in this patch:
Enforcing the arguments to errbacks to be Failures. Very confusing
things may happen if you pass something other than a Failure to an
errback, and besides, passing something other than a Failure is like
using 'raise "string"' rather than 'raise MyError("string")'.

Here's the patch:

Index: twisted/internet/defer.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/defer.py,v
retrieving revision 1.12
diff -u -r1.12 defer.py
--- twisted/internet/defer.py	24 Jul 2002 19:04:56 -0000	1.12
+++ twisted/internet/defer.py	1 Aug 2002 00:42:15 -0000
@@ -103,7 +103,7 @@
         These will be executed when the 'master' callback is run.
         """
         cbs = ((callback, callbackArgs, callbackKeywords),
-               (errback or logError, errbackArgs, errbackKeywords))
+               (errback or (lambda x: x), errbackArgs, errbackKeywords))
         if self.default:
             self.callbacks[-1] = cbs
         else:
@@ -228,14 +228,8 @@
                                              callbackArgs=(0,),
                                              errbackArgs=(1,))
                     break
-                if type(self.result) != types.StringType:
-                    # TODO: make this hack go away; it has something to do
-                    # with PB returning strings from errbacks that are
-                    # actually tracebacks that we still want to handle as
-                    # errors sometimes... can't find exactly where right
-                    # now
-                    if not isinstance(self.result, failure.Failure):
-                        self.isError = 0
+                if not isinstance(self.result, failure.Failure):
+                    self.isError = 0
             except:
                 self.result = failure.Failure()
                 self.isError = 1


-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From carmstro at twistedmatrix.com  Wed Jul 31 21:41:40 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 31 Jul 2002 21:41:40 -0400
Subject: [Twisted-Python] Updated defer patch
Message-ID: <1028166102.2759.24.camel@radii>

Ok, so I've added some code that wraps plain strings passed to .errback
with a "DefaultException" and then issues a DeprecationWarning.
Unfortunately, this patch causes tests to fail, since they pass a string
to .errback and try to ensure that what gets passed to their
error-callback is the same thing.  So, following itamar's lead, this is
backwards-compatibility-code-that's-only-half-backwards-compatible ;-)

I've also updated the docstrings for callback and errback, they were
out-of-date.

(Note, this is an updated version of my last patch, so those
modifications are duplicated here)

Index: twisted/internet/defer.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/defer.py,v
retrieving revision 1.12
diff -u -r1.12 defer.py
--- twisted/internet/defer.py	24 Jul 2002 19:04:56 -0000	1.12
+++ twisted/internet/defer.py	1 Aug 2002 01:36:17 -0000
@@ -32,6 +32,9 @@
 class TimeoutError(Exception):
     pass
 
+class DefaultException(Exception):
+    pass
+
 def logError(err):
     log.err(err)
     return err
@@ -103,7 +106,7 @@
         These will be executed when the 'master' callback is run.
         """
         cbs = ((callback, callbackArgs, callbackKeywords),
-               (errback or logError, errbackArgs, errbackKeywords))
+               (errback or (lambda x: x), errbackArgs, errbackKeywords))
         if self.default:
             self.callbacks[-1] = cbs
         else:
@@ -152,10 +155,9 @@
 
         Each callback will have its result passed as the first
         argument to the next; this way, the callbacks act as a
-        'processing chain'.
-
-        If this deferred has not been armed yet, nothing will happen until it
-        is armed.
+        'processing chain'. Also, if the success-callback returns a Failure
+        or raises an Exception, processing will continue on the *error*-
+        callback chain.
         """
         self._startRunCallbacks(result, 0)
 
@@ -165,13 +167,24 @@
 
         Each callback will have its result passed as the first
         argument to the next; this way, the callbacks act as a
-        'processing chain'.
-
-        If this deferred has not been armed yet, nothing will happen until it
-        is armed.
-        """
-        if not fail:
+        'processing chain'. Also, if the error-callback returns a non-Failure
+        or doesn't raise an Exception, processing will continue on the
+        *success*-callback chain.
+
+        The argument must be a Failure instance or None, and strings are
+        accepted for backward-compatibility, but are deprecated.
+        """
+        if isinstance(fail, types.StringType) or isinstance(fail, types.UnicodeType):
+            import warnings
+            warnings.warn(
+                "Don't pass strings (like %r) to Deferred.errback (replacing with a DefaultException)." %
+                          fail, DeprecationWarning, stacklevel=2)
+            fail = failure.Failure(DefaultException(fail))
+        elif fail is None:
             fail = failure.Failure()
+        elif not isinstance(fail, failure.Failure):
+            raise TypeError("Deferred.errback accepts failure.Failure instances, strings, or None. %r is none of these." % fail)
+            
         self._startRunCallbacks(fail, 1)
 

@@ -228,14 +241,8 @@
                                              callbackArgs=(0,),
                                              errbackArgs=(1,))
                     break
-                if type(self.result) != types.StringType:
-                    # TODO: make this hack go away; it has something to do
-                    # with PB returning strings from errbacks that are
-                    # actually tracebacks that we still want to handle as
-                    # errors sometimes... can't find exactly where right
-                    # now
-                    if not isinstance(self.result, failure.Failure):
-                        self.isError = 0
+                if not isinstance(self.result, failure.Failure):
+                    self.isError = 0
             except:
                 self.result = failure.Failure()
                 self.isError = 1



-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From jason at asbahr.com  Mon Jul  1 12:12:30 2002
From: jason at asbahr.com (Jason Asbahr)
Date: Mon, 1 Jul 2002 13:12:30 -0500
Subject: [Twisted-Python] Viridian Note 00319: Grand Challenges
Message-ID: <1B95F8C4-8D1E-11D6-AD08-000393753460@asbahr.com>

From: Bruce Sterling <bruces at well.com>
Date: Fri Jun 28, 2002  01:28:04 PM US/Central
Subject: Viridian Note 00319: Grand Challenges

Key concepts: computer science, computer research,
grand challenges, ubiqitous computation, genetic
algorithms, corruption, spam, Internet, civil society

Attention Conservation Notice: it's not particularly
likely that a loud, angry, impassioned, rambling 6,000-
word speech by the Viridian Pope-Emperor is going to
change the future course of American computer science.
No harm in trying, though!

Links:

The gig.
http://www.cra.org/Activities/challenges/

The Spam Epidemic.
http://www.cluelessmailers.org/spamdemic/mapfullsize.html

Jordan Pollack's evolutionary machine lab.
http://demo.cs.brandeis.edu/

All things ubicomp.
http://homepage1.nifty.com/konomi/shinichi/ubicomp.html



Speech at "CRA Conference on Grand Research Challenges
in Computer Science and Engineering"
Airlie House, Warrenton, Virginia
June 23, 2002

"Without Vision, the People Perish"

     Hi, I'm Bruce Sterling.  I write novels.

    Ladies and gentlemen, I bring unique qualifications to
this computer-science gathering, because unlike the rest
of you, I have the sublime creative freedom of not knowing
what I'm talking about.   Besides, I am the only man in
this house who is wearing a tie.  So I must be keynoting.

     I am a science fiction writer and I am 105 percent
vision thing.  The very idea of the likes of me, at this
august event of yours, blue-skying it with the legendary
likes of Gordon Bell, and Rodney Brooks, and Alan Kay...
And Bob Metcalfe... okay, granted, I can handle Bob
Metcalfe with no problem.

     Imagine the sheer gall, the chutzpah this requires on
my part.  Anyone with common sense and a smaller ego would
quail, but I am up for this grand challenge!  I am totally
with the program.   I am cocking my shotgun and I am going
to give you both barrels.  I just wanted to take a second
to relish the rich literary irony of this situation.
Folks, I am really going to enjoy this.  I am enjoying
this already.

     Okay, so what's the story with this "Grand Challenges"
theme, huh?  How come the computer revolution,  so mighty,
so high-tech, so all-encompassing, is on a quest for new
spark plugs?  Well, I can tell you.   That subject is
within my bailiwick.  The computer industry is my favorite
industry.  She is my heart's darling.   I have been
watching her for a long time, and I'm all used to her
weird little vagaries.

     This is happening because computer science is the only
major branch of science that is named after a gadget.  And
gadgets get old.  It doesn't matter how lithesome and
charming and sexy they were in their youth.  They get old.
They settle down.  They get domesticated.  They have
mouths to feed and socks to wash.  Machines lose their
aura of the technological sublime.

     The computer is a gizmo, and it's a great gizmo, but
it's not an ultimate gizmo.  Computer science has been the
slave of metaphysics ever since Alan Turing invented the
Turing Test, but a computer is not a metaphysical entity.
It's not free of objective reality.  Its bits are bits of
atoms.  The only ultimate gizmo is a clock.  The clock
never stops ticking.  The clock has been ticking for the
computer for quite a while.

      It's not just that the pace of basic innovation has
slowed in your field, although it  has.  It's not just
that computers have lost the lipstick of their geek gadget
romance, although they have.   That which was accomplished
in the 1980s and 1990s is under attack.  There is a
backlash.

       This ought to be obvious to anybody who uses the
Internet.  All you need to do is examine your email.
Where is Al Gore's idealistic, civilized Information
Superhighway?   It's a red-light district.  A crooked flea
market.   A nest of spies.  An infowar battlefield.  That
is the state of cyberspace 2002.  There are fire sales on
every block.  It has anything but grandeur.   It's
decadent and sinister.

       I've had the same email address for 13 years, and
I'm not budging.  That's where I staked my little claim on
the electronic frontier, and by gum, I remember the Alamo
and I ain't a-goin' to go.   Therefore, my email in 2002
is full of 419 fraudsters from Nigeria.  And unsolicited
porn ads.  And a galaxy of farfetched medical scams from
malignant, unlicensed quacks peddling Viagra and growth
hormone.  With unreadable, unicode, collateral bomb-damage
from the gigantic spam mills in China, Korea, Thailand and
Taiwan.

      Let me put this to you straight: cyberspace has
become a slum.   It's a diseased slum, festering with
Microsoft Outlook viruses.  The viruses turn people into
unwilling, unwitting agents of corruption and destruction.
If you dare to use Microsoft's web products,  which are so
easily and cruelly sabotaged, then you run a gruesome,
unconscionable risk of doing horrible virus damage to your
best friends and your closest collaborators.  You can give
AIDs or herpes to the people who choose to have sex with
you, but you can give Klez.E to people you don't even
know.  That is a pretty far cry from the antiseptic
Euclidean vistas of virtual reality.  Cyberspace in 2002
is a high-tech low-life slum straight out of William
Gibson's NEUROMANCER.  That's a great book, but the people
who have to live in that book are pretty damn far from
happy.

      If you could find all these busy people who are
ruining the Internet for us, all these swindlers and
vandals and porn-whores and stock kiters and so forth, and
you could get them to surround this beautiful little gated
community of ours here, man, would they look scary.
You'd never physically choose to hang out with the likes
of these malefactors, but the Net ships 'em right into
your office or bedroom, rain or shine, 60-60-24-7-365.
So, you know, where is the civility?  Where is the law and
order?   Where is the government?  There ain't any.
Spies, that's what we've got instead of any legitimate
government.  Man oh man, there are a lot of spies on the
Internet.   More every day.   The place is crawling with
'em.

     Consider last week's British Internet scandal.  The
British government declares, "Well, we're going to store
everybody's websurfing records and their email, so if any
government official wants to spy on what you're doing,
they can make that happen pronto!"  What a grand vision,
eh?  Wonderfully comprehensive: Orwell would blush.

      So the British press and citizenry are like, "What?
You're storing *everything* I do on the Net, and you want
to filter it and mine it and show it to *anybody*?   Oh my
God, doesn't that contravene the Helsinki Declaration, and
the UN declaration of human rights, and fifteen leventy-
dozen European privacy statutes, and even the Magna
Carta?"  But the British government and their happy spies
say, "Aw come on!  It's just the Internet!"   They expect
everyone to accept that, because really, could the
standards there be any lower?  How could *spies* make it
worse?  Spies are as happy as a pig in slop!

      People think I make this stuff up.  And it *is*  like
science fiction.   Because it's all about "the
technological sublime."  It's all about the sense of
wonder, and its limits as a political and industrial
policy.   The Vision Thing.  You are supposed to have a
vision thing, even if you are one of our President Bushes.
Because without vision, the people perish. Without vision,
the means always dominate the ends.  Without vision, the
least little shock to the system is an existential crisis
of confidence.

      A "sublime" thing inspires awe and wonder.  It's
fantastic, amazing, and astounding.  It has grandeur, it
ruptures the everyday.  The sublime is a liberating
spectacle that lifts the human spirit to the plateaus of
high imagination.  Science fiction dotes on this practice.
You can go back to the historical roots of science
fiction, and you can see science fiction methodically
using the technological sublime as a kind of all-purpose
cleanser.   It's rooting out the sewers of a stale
civilization by making extravagant promises of better
things to come.   Railroads, photography,  aviation, giant
dams, rural electrification (I know that sounds corny to
us, but the Soviets used to be very big on that),  atomic
power and atomic weapons, space flight, lysergic acid,
television, computers, virtual reality, and the
Information Superhighway.   All grist for the mill, folks.
The clock never stops ticking.

      The true grandeur of technology is not to be found in
any actual technologies.  It's AM/FM, the severe
difference between Actual Machines, AM, and Fantastic
Magic, FM.  A grand challenge is a grand challenge because
it's not an actual machine but a sublime concept, a goal,
an aspiration.  Once it's a machine, it's no longer a
challenge, it is hardware.  Science-fiction is crammed
with imaginary technologies:  time machines,
interplanetary starships and human-like robots.   They
stay sublime, they don't get stale.  Because they're never
made real.

      Due to human nature, familiarity breeds contempt,
especially for technology.   Technologies that are
integrated into the fabric of everyday life can no  longer
be perceived as "technology."   No matter how grand and
elaborate and complex they may be.  My teenage daughter
has a Pentium III running Windows 95.  She knows it's a
piece of junk.   Because it is.  It's stale and old.  It
doesn't matter how much fantastic press it got in 1995.

       Many technologies of profound cultural importance,
such as immunization, plumbing, recycling and the birth
control pill, never become sublime.  They are high
technology without the high.  The height within high
technology has very little to do with the scientific
principles involved or any inherent difficulties of the
engineering.  The height is entirely a social judgement.
It has distinctly metaphysical overtones.  Science fiction
is one of the arenas in which these judgements are cast,
in which some forms of technological advance are valorized
as marvelous and worthy of mass attention, while others
remain the obscure work of specialists or even die off
entirely.  And the clock never stops ticking, especially
for science fiction.  Sublimity is as thin as lipstick, it
wears off at a kiss.  The sense of wonder has a very short
shelf-life.

       The Space Shuttle  is still  sublime, even though it
is three decades old.  It's clunky, and it's rusty, and it
has severe software and hardware problems,  and it kills
people, and it has no destination to which to "shuttle".
But the Shuttle is still romantic and futuristic.  Why?
Because it's not familiar.  You can't buy one on eBay or
Amazon.

       We need the technological sublime.  The
technological sublime is a narrative, it's a cultural
story.  It's something we tell ourselves to get out of bed
in the morning.  It has its difficulties and its
shortcomings, but the other narrations are *worse.*  Like
the  narrative of Al Qaeda necromancy, which boldly claims
that history will stand still, and we'll all be holy and
sacred forever, just like in the mythic early times of the
Koran, if only enough of us blow ourselves up.

      I'm not going to overdo it here with my literary
topics, ladies and gentlemen. Osama bin Laden may be a
noted poet, but we American pop authors have some
interesting technical challenges of our own.  Here's a
good one:  how the hell do you write a thriller novel in a
world that has cellphones?  I happen to be writing a
thriller novel right now: in fact, I'm here researching
it, not that you'd ever guess. I'm not really here to
pontificate at you. I'm here to soak up your grand ideas
for use in fiction, because I need them even worse than
you do.

      It's amazing how little technical room is left for
the customary cliches of a thriller novel, in this, our
modern, digitized, networked society.  No more car chases
== because I just use my cellphone and I call the cops in
the next town.  No more gunfights in deserted warehouses
== I just use my cellphone and I call the cops.  No more
trailing the spy to his sinister lair == I just use my
cellphone and I call up the cop's video monitors.

      I'm an author,  but I get it about about gizmos.  I
have to, but I don't mind that much.  I'm eager to get
with the machinery.  I've got a feverish literary need to
step closer to the techno-fire here.  I'm blissfully
yielding to the hands-on imperative.

     So let get right down to some brass virtual tacks
here, shall we?  Let me demo a couple  of my favorite
blue-sky notions out of your field of endeavor.  Nothing
up my sleeves, but I'll pull us a couple of  sci-fi
rabbits from way outside of the box here.  We'll see if
they interbreed.

     Here's my first pitch.  It may be slightly familiar to
those of you who watch Jordan Pollack's lab, because
heaven knows I do.   Jordan Pollack is into genetic
algorithms, he likes to evolve  machines.  He had some
jointed plastic blocks in the lab that are wriggling
around at random.  Their performance is measured, the best
models get rewarded and replicated.  Pretty soon they are
wriggling around on the lab bench with some impressive
ease and fluidity.

     So much for the real world.  It's grand sci-fi vision
time.  Let's imagine this experiment ramped way up to
petaflops and exaflops capacity.   Very high granularity.
Exquisitely accurate simulated physics.  At that level of
computational power  you could go a lot farther than
primitive jointed blocks. I'll propose that you could get
a petaflops computer to grow machine tools.   That's
right.  I mean actual three-dimensional, fully working,
mechanical devices.   They're not made on assembly lines,
they're grown inside computers.  They're virtual, and they
do all their research and development as virtual objects,
and when they get good, then you make them real.

     Yes, I know this notion is farfetched, but I wrote a
science fiction story about this.  It won an award and was
widely anthologized, so hey, that concept is definitely
paying off for me.

     Maybe you start small, by simulating and evolving,
say, some primitive, simple tools, like can-openers and
mousetraps.

      It's pretty easy to scan and input a can-opener or a
mousetrap.  You might seed your artificial physics with
the design of some conventional mousetrap, and see how
they evolve.    But it's yet more interesting to simply
litter the simulated landscape with objects that act like
mice, and attack them with soft, helpless, gelatinous
blobs.   You don't want to pre-judge the phase space of
the problem by making any human decisions about possible
methods of trapping mice.  Get the human out of the loop
entirely, that's the scheme.  Reward any possible
mechanical entity that can grab or mangle a simulated
mouse.

     Let them crossbreed.   Like the mice themselves, I
guess.  Kind of a genetic-algorithm, arms race thing.
Have an overseer program keeping tabs.   Whenever a mouse
gets whacked, a bell goes off.  You  run to the screen,
and you see this hour's brand-new mousekiller doing its
virtual stuff.

     Human beings rush over and stare with eyes like
saucers and == man, they can't believe it!  Nobody would
*ever* have thought that a device like that could ever
catch a mouse == but you know, we got the complete design
specs for it right here in memory!  We just hit 'print'
and this unprecedented mousetrap will be smelted out for
us on the spot!  We'll see how it works in real life!
Maybe we can put our logo on it and sell a million of them
on eBay!  Ralph Waldo Emerson, stand back!  We *grew* a
better mousetrap!  The world's beating a path to our door!
Call the reporters!  Put it on the website!

     Once we've got that part of the grand challenge
down... and hey, I'm not claiming it's easy ==  we want to
extend the process to the big stuff.   Heavy iron. For
instance, internal combustion engines.

       We go over to Bill Ford's River Rouge plant.  Bill
Ford is a grandfather himself by now, but you know, Bill
Ford is still a visionary.  And we tell him: Bill, Mr.
Ford, my good man, let's put a big piece of Detroit iron
in this computer here.  That's right, Bill, here in this
titanium laptop.  We're running Linux in this baby and not
only is it freeware,  we actually *grew* all the code in
this laptop.  So there.  You can trust us with your
industry and your revenue stream, Bill, we're computer
scientists, we know what we're doing.   You just stick the
manufacturing specs for the latest Ford engine in here,
and we start systematically disturbing its components in
random ways.  We'll see which configuration delivers the
most horsepower for the least fuel consumption.

     Ladies and gentlemen, I know that simulating an entire
automobile engine at very low granularity would be a
rather difficult task.  But once you've done that, you
ought to be able to subject this virtual engine to all
kinds of unprecedented indignities.  You can explore huge
regions of the possible design space that would never
occur to any merely intelligent human being.  If evolution
can bring us pterodactyls and coral reefs, why can't it
make us a car?

      Or for you DARPA types:  what happens when you
crossbreed a Predator aircraft with an Israeli Bulldog
drone?  Of course, billions of these bastardized spy
aircraft will be total junk, they won't fly at all and
can't communicate their data from sensor-to-shooter, but
who cares?  Computers are great at sorting.   An exaflops
machine just keeps remorselessly grinding out new models,
like monkeys typing Shakespeare.   You never see the
billions and trillions of failed mutants.  You'll only see
the lottery winners.

     Let's go just a little further with the concept, shall
we? One more dainty step down the garden path.  Suppose
you simulate the human body.   Human bodies usually have
pretty good on-site system administrators, but just how
well have their capacities really been exploited?   It's
pretty amazing how long it took people to devise the
Australian crawl in swimming.    There may be aspects of
human body movement that never occur to us == because we
live inside human bodies.  We lack the proper objectivity,
that's the problem.   What we need is a kind of New
Economy, new business model breakthrough for moving our
own bodies.

      How many undiscovered judo throws are there, for
instance?   It's all corny, mystical Eastern handicraft,
judo, and karate, and yoga, and such; we never digitized
all that, we never worked it out methodically as a problem
in physics.   Imagine a soldier trained in forms of hand-
to-hand combat that had been discovered in computer
searches of the entire phase space of the physical
mechanics of combat.   He might perform weird but deadly
movements that are utterly counterintuitive.  He's simply
stun the opponent through sheer disbelief. When he got
wound-up, it would look like outtakes from THE MATRIX.

     Ladies and gentlemen, yes,  I know that THE MATRIX is
a sci-fi movie.  In my game, you get the good stuff where
you find it, okay?  I don't have to name-check sci-fi
movies up here.  I could have stolen you something nice
and exciting from the many bright and accomplished people
at Microsoft Research and Development.   I pay attention
to them, too.  I know they're into stuff like a Sensory
Pocket PC that that detects touch, tilt and motion; and
Chinese text-to-speech software that probably detects
Chinese piracy in real-time.   So I tried that.  I Googled
it.  I surfed over to the Microsoft Research "Archived
Headlines", but since they are a modern computer company
instead of a big-budget science fiction movie, this is
what I got off their web page:


     [Microsoft][SQL Server Driver] Invalid object name
'features'.
      Drivers error '80040e37'

      So, back to the science fiction.  Now I'll tell you
what's really got my attention lately, the stuff in your
field that I consider really groovy and with-it and hip.
Ubicomp.  Oh yeah.  I know it's got a million names.  All
kinds of jargon.  Pervasive computing.  Wearable
computers.  Intelligent environment. Wireless internet.
Peripheral computing. Self-configuring, adaptively
coordinated Embedded Nets.  Things That Think.  Locator
Tags.  JINI.  Wearware. Personal Area Networking.  And so
forth.  This kind of disruption in my beloved English
language is like the rumblings of a tectonic fault.  The
signs are very good that something large, expensive and
important will tear loose there.

    I personally prefer the word "ubicomp" because it
sounds so cheap.   Ubicomp:  that sounds like you go down
to the hardware store and buy a few gallons.  You don't
have to genuflect to it, but it's still a grand challenge.
Because ubicomp is truly a profound  idea.  It has
grandeur, and better yet, it's not metaphysical.  You
don't have to handwave with any big  verbal catch-all
terms like "artificial intelligence".  Or "evolution."  Or
"nano-" anything.  Or "virtual" anything.  And that's
*good.*

      Ubicomp is about physicality.  So ubicomp's got what
my friend and colleague Judith Berman likes to call an
"empirical referent."  When you've got an empirical
referent, you can't just make it all up and sell stock in
it.  You have to demo or die.  You're got an anchor point
in consensus reality.  This is, of course, the very
opposite of what Judith Berman and I try to achieve when
we are writing science fiction, but that's why we're not
in your industry.

    Suppose that ubicomp really took off.  What would that
mean, how would that feel?   Well, the first suggested
uses for ubicomp are pretty primitive: because the chips
are too big and they need a lot of power.  A refrigerator
is always plugged into the wall.  So maybe my ubicomp
refrigerator reads the bar-codes on all the groceries that
enter and leave it.  It answers my cellphone when I call
it from the grocery, and it gets me up to speed how old
the yogurt is.

     Cars have plenty of onboard power.  So my ubicomp car
gets to become a dangerous, highly distracting, mobile
office on wheels.  It's reading textfiles aloud over its
radio speakers.  It's taking voicemail. It asks for handy
directions from satellites overhead and the local street-
signs.  The tires complain when the tread gets low.  The
gas tank knows all its favorite gas stations in the area.

      These innovations just add a sexy blink and smile to
products that already exist. They aren't grand ubicomp
challenges.  The grand challenge in ubicomp is to reform
the basic, primal relationships between humanity and
things.

     If physical objects misbehaved as badly as modern
computer software does, then human life would become
hellish.  It would be murderous.  This is definitely a
grand challenge, because it is also the kind of nightmare
one reads in the darkest tales from RISKS DIGEST.  "Risks
to the Public in Computers and Related Systems" from the
ACM == I love that publication, I read it faithfully.  The
comic potential alone makes it more than worth my time as
a novelist.

     Well, when *everything* public is a "computer related
system," then there's no limit to the risk.     A single
instant's bad driving can kill you and your family.
Automated kitchens can slice, dice and fry the unwary.  So
those aren't good places to start.

      So what is a good place to start with ubicomp?
Let's talk about express shipping.  Here we have a nice
big camel's nose in the tent for a break-out ubicomp
scenario.  With the modern express package, chip-function
is added to a portable object in a way which is not only
convenient, but a definite competitive advantage.  I can
follow a package via Internet from distant New York right
to the doorstep of my business.

      If I could keep that schedule for all raw materials
that down to the minute, then I could reschedule my
inventory, keep stockpiles low and lean, do just-in-time
assembly, and make a whole lot of money.

     I don't need a "smart" package or an "agent" package.
I don't much want to "talk" to a package. I don't want a
package tugging my sleeve, stalking me, or selfishly
begging for attention and commitment.  If a package really
wants to please me and earn my respect, it needs to tell
me three basic things: What is it? (It's the very thing I
ordered, hopefully).  Where is it? (It's on its way at
location x).  And what condition it is in? (It's
functional, workable, unbroken, good to go).  The shipping
company already needs to know these three things for their
own convenience.  So they might as well tell me, too.  So
I don't have to swallow my ubicomp like castor oil. My
ubicomp arrives in a subtle way, as a kind of value-added
service.

     So the object arrives in my possession with the
ubicomp attached. It's a tracking tag.  When I sign for
that object, I keep the tracking tag.  It's mine now.  Ho
ho ho!

     Let's say that it's something I'm really anxious to
have: it's a highly evolved mousetrap.  The mice in my
house are driving me nuts, because I'm a programmer.  I
eat nothing but take-out Szechuan food, and everything in
my house is fatally disordered.

      Luckily my new, computer-designed mousetrap quickly
and horribly slaughters all my mice.  Not one vermin is
left alive.  That's great service, but now I'm anxious to
get rid of it.   I really don't need a super-mousetrap
attracting attention, if I get lucky and a hot date comes
over to help me play "The Sims."

     Given that I'm a congenital slob, of course the mice
soon return.  But by then, I've already forgotten my
mousetrap.   Out of sight, out of mind.  I paid a lot of
money for it, but I already forgot where I put it.

     But suppose that my mousetrap still has that shipping
chip.  That means that the mousetrap answers when called.
I just look up its location on my home tracking network.
The mousetrap is still responding to my three basic
questions: (1) it's a mousetrap, (2) it's in the northeast
corner of the attic, and (3) it still works fine!  Those
mice are in peril of their lives!

     Having benefitted once or twice by this, I take the
logical next step.  I tag everything that I already own,
lawnmowers, garden rakes, tennis shoes, carkeys, remote
control, my eyeglasses, the works.  Now I have a ubicomp
menagerie.  I even tag the mice.  After all, if I know
where the mice are at all times, then I don't have to kill
them.   I just haul the mice out of the walls and I
sterilize them.  Then the mice become a kind of tame
garbage disposal system.

    Other huge benefits ensue.  I no longer need to sweat
and struggle to put my possessions into order.  My things
can never get lost or misplaced. They can't even be stolen
from me, because the ubicomp tags are too small to see,
and any thief just becomes a kind of large mouse to be
tracked down by bored cops and annihilated.

      Ladies and gentlemen, I am a ubicomp groupie.  I
regard ubicomp as a really nifty, high-concept scheme.  If
it were just a matter of intellectual sexiness, sci-fi
appeal, and technical brio, man, we could breeze for this
technology.  We'd be rolling out the old IPOs, and getting
cover stories in WIRED magazine, and  Dell would be
underpricing us, and hoo boy, the sky's the limit.

      But that's not the way your industry works these
days.  Because people, your industry is showing its age.
And it has pulled that old Grand Challenge hat trick a few
times too many.

    Okay, check this out. Here is a clear precursor to
ubicomp, poking its head above the trench here, getting
ready to charge the no-man's-land.  Ultra-wideband.  Wi-
fi.  Airport.  802dot11.  802 dot 11 b and g. AirHead.
Nokia Rooftop. Mesh Network SkyPilot I-Burst base-station
smart cells.   Ladies and gentlemen, we are having a
classic, distributed, heavily networked, spontaneous,
logarithmic orders of magnitude, early-Internet style,
popular eruption here.

     This is the computer community at its anarchic,
inventive finest, this ultra-wideband scheme.  Only this
time around, the clock has been ticking.  The Digital
Revolution has a track record, and it's not entirely
pretty.  The Non-digital Counter-revolution really gets it
about the menace that a disruptive innovation like this
represents to the status quo.   They don't fight fair,
because, frankly, neither do computer geeks.  Fairness was
never an issue here.  Because "fairness" is a political
word, it's not a technical word.  There's no such thing as
"technical fairness."

      But there are still huge, severe issues of power and
access and money.   So, the many frightened opponents of
ultrawideband are not sitting still like the wallflowers
at the sock hop.  On the contrary, they are going for the
throat of this young thing.  They are going to wallop that
little genie on the back of the head with a blackjack and
stuff it right back in the bottle.  Check this out:

     The U.S. Federal Communications Commission approves
the technology for limited commercial use in February.
But in come some heavy operators: all the major wireless
carriers, the Federal Aviation Administration, the U.S.
Department of Defense, satellite radio companies, and the
entire global positioning system community.   They want to
strangle ultra-wideband in its crib == to kill it while
it's still stuck in the standards.

     Okay, just like the Internet, ultra-wideband is
something used for decades by the military.  It's spooky
stuff.  It is used to communicate wirelessly without being
detected by opposition forces.  All of a sudden the
Silicon Valley crowd gets it about the raw potential.  Not
the "commercial" potential, really, because there doesn't
seem to be a business app for it == but, you know, the
good old-fashioned *potential* potential.  Build it and
they will come, right?

      Ultra-wideband is  low-cost, low-power, high-speed,
and best of all, it is the number-one alternative to a
whole crowd of normal-wideband,  stocks-on-fire, money-
losing technologies run by guys like Gary Winnick of
Global Crossing, and Bernie Ebbers of Worldcom, and the
Rigas family of Adelphia Communications.

     So, ultra-wideband is a grand challenge with a lot of
deadly enemies.  Experienced enemies who are sick of being
burned by disruptive new technologies.   Out comes the
Fear Uncertainty and Doubt.  Nine hundred companies file
concerns with the FCC. The GPS will fritz, they say;
airplanes will fall out of the sky.  This is cynical
baloney.  Everybody knows that, but evil stuff like that
has to be said; because these are classic not-in-my-back-
yard tactics.  Cynical, tooth-gritting tactics that people
use when their backs are against the wall.

     This is the sort of civil-disobedience fervor that we
see from anti-genetics campaigners and anti-nuclear
activists.  Except that instead of being hippie zealots,
it's guys the likes of ABC Disney and the music recording
industry.   Wi-Fi isn't Al Qaeda, they're not going to
knock down any airplanes.  But this is common or garden
competitive practice for your industry these days.
Obstructive incumbents. Monopolization.  Vicious
infighting.  Phony-baloney regulatory obstacles.

     Computation doesn't lack grand ideas.  There's nothing
gone wrong with Moore's Law.  People in Nature magazine
this week are making transistors out of single atoms!
But it doesn't much matter how pretty these ideas are,
because your industry has been debased.   The heavy
players in your industry gave up expecting any justice
from the Justice Department, or any civility from civil
society.

     They are having a civil war, where guys who own the
operating system and guys who own the intellectual
property go for each other like Lebanese militia factions.
It is war to the knife inside the box.  In the eyes of the
public, your captains of industry have no honor.  They are
either fatcat swindling behemoths ruthlessly trampling the
public good, or else they are self-appointed digital fire
ants giving Mickey Mouse the death of a thousand bites.
This is not a pretty sight.

     Your best friends won't tell you == but I'm a science
fiction writer, and most of you guys are academics or in
government, so I'll tell you.   The computer industry is
full of smart geeks who never took out their garbage. They
were so busy that they forgot about elementary business
hygiene.  They smell.  They are becoming repulsive.

     Now, computation is my favorite little industry.  But
you know, if you never take out your garbage, and the
clock keeps ticking, then you've got vermin.   It rots
from the head down, the computer industry.   The moguls in
computing aren't knights in shining armor, these are some
of the meanest robber barons anybody has ever seen.  These
guys are like ninja assassins armed with rusty stilettos.
They are stealing each other's market oxygen.  They are
stabbing each other's babies.  They went straight from
Internet anarchy to feudalist monopoly domination.  They
went straight from the barbarism of the garage startup to
the decadence of bribing the government, suborning
accountants, and paying themselves with stock options that
aren't on the company books.  And oh my goodness did the
chickens come home and start roosting.

     They never clean anything up.  They just dump the last
box and start over.  The Internet stinks right now because
we are getting the Internet we deserve.

    Ladies and gentlemen, it doesn't give me any pleasure
to tell you these things.  They are painful things, and
they are ugly things, and they are shameful and demeaning
things, things unworthy of a healthy industry, things
unworthy of a functional government, things unworthy of a
free people.  But I'm telling you the truth, and you know
it.  You know it *better* than I know it.

      Okay == to be painfully, totally honest == maybe it
*does* gives me a little pleasure to tell you these
things.  But to have a garbage problem is not the end of
the world.  If you're a lazy hacker slob who lives on
take-out Chinese and Cheetos, you can reform.  I've seen
it done.  You grow up, that's the secret.  You get older,
you take responsibility, you face up to it.

     Arthur C. Clarke, a great science fiction writer, made
up an interesting aphorism once.  "Any technology that is
sufficiently advanced is indistinguishable from magic."
But that doesn't mean that any technology ever *is* magic
== just because the rubes up in the gallery  can't tell
the difference.  You want to see an industry with a
serious garbage problem, check out the *nuclear* industry.
The computer industry is still young.  It's not as young
as it thinks it is, but at least it's still kind of
imaginative and dreamy, it hasn't become a byword for
warfare, radiological dirty-bombing and permanent
contamination.

     The truth is that ALL technologies have garbage.
Until they can pick up after themselves, they are
immature.   Any garbage that is sufficiently advanced is
also indistinguishable from magic.  It may look magic, but
it's still garbage.

     Ladies and gentlemen, although I've been harsh with
you, I am bringing you a message of hope and aspiration.
What if it's *smart* garbage?   When ubicomp become
garbage (as all gizmos and gadgets are inherently likely
to do) it can be smart garbage!  It's garbage that knows
that it's garbage.   It's garbage that can identify itself
to the junk recycler.  It doesn't go out of sight, out of
mind, where it's allowed to fester like a leftover
computer virus.  Without vision, the people perish; but
*with* some vision, what the heck, let's live it up!
The gizmos fold themselves right back into the production
stream.  They don't spew toxins or waste, because even the
trash is computational.  We've got a gizmo that is smart
enough to make its peace with the clock.  It truly got
ahead of its time.

     I see by my digital wristwatch here that time stops
for no man, and I am out of time too.  That's all I have
to tell you tonight.  Thanks for entertaining my
speculations. I hope you have a great, productive
conference.

O=c=O O=c=O O=c=O O=c=O O=c=O
YES, I REALLY ENJOYED THAT
O=c=O O=c=O O=c=O O=c=O O=c=O

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/enriched
Size: 37770 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020701/74cdf310/attachment-0002.bin>

From bruce at cubik.org  Tue Jul  2 07:45:24 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 02 Jul 2002 07:45:24 -0600
Subject: [Twisted-Python] documentation todo?
Message-ID: <3D21AE74.6060106@cubik.org>

Hey all,

It'd help (at least for me) to have a good starting list of things that 
are ready to be documented in Twisted, but that are not yet documented.

 From what I've seen this might be a good start:

    * Logging support.
    * Reactors
    * Using the GUI integration reactors
    * PB (breaking this out into a set of smaller, more manageable
      topics would be good, but I don't know enough about it yet to
      do so)
    * The various protocol support things like using FTP, telnet,
      etc.

What else would any of you put on that list (or remove/modify)?

Thanks!

  - Bruce




From ranty-bulk at ranty.ddts.net  Thu Jul  4 09:29:04 2002
From: ranty-bulk at ranty.ddts.net (Manuel Estrada Sainz)
Date: Thu, 4 Jul 2002 17:29:04 +0200
Subject: [Twisted-Python] [PATCH] to make twisted more "child process friendly"
In-Reply-To: <20020621141835.GA23753@ranty.ddts.net>
References: <20020621141835.GA23753@ranty.ddts.net>
Message-ID: <20020704152904.GA25935@ranty.ddts.net>

On Fri, Jun 21, 2002 at 04:18:35PM +0200, Manuel Estrada Sainz wrote:
>  Hello,
> 
>  Working on apt-proxy v2 I got stuck trying to get the status of a
>  subprocess:
> 
>  internet/default.py:76
> 	signal.signal(signal.SIGCHLD, process.reapProcess)
> 	
> 	process.reapProcess will be called for every child that exists,
> 	which makes imposible to anyone to get the status. And actually
> 	makes useless calling 'reapProcess' from
> 	Process.maybeCallProcessEnded
> 
>  The patch allows objects to be registered to get the termination status
>  of certain processes and changes process.Process to use it.

 That patch has a problem, if you use registerReapProccessHandler but
 the process finished before you actually called
 registerReapProccessHandler you will wait for ever on a dead child.

 The attached patch makes two variations:

 - reapProcess only takes the status of registered pid's, the rest are
   left alone.
 - registerReapProccessHandler checks if the child already exited and
   if so directly calls the callback.

 This also has the side efect of being more friendly to standard python
 popen, which will again be able to return the status on close().

 Thanks for a great job,
 
 	ranty

 PS: Twisted rocks :)

-- 
--- Manuel Estrada Sainz <ranty at debian.org>
                         <ranty at bigfoot.com>
			 <ranty at users.sourceforge.net>
------------------------ <manuel.estrada at hispalinux.es> -------------------
God grant us the serenity to accept the things we cannot change, courage to
change the things we can, and wisdom to know the difference.
-------------- next part --------------
? diff.diff
? diff.diff2
Index: process.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/process.py,v
retrieving revision 1.16
diff -u -r1.16 process.py
--- process.py	26 Jun 2002 06:47:50 -0000	1.16
+++ process.py	4 Jul 2002 15:17:07 -0000
@@ -40,6 +40,7 @@
 import abstract, main
 from main import CONNECTION_LOST, CONNECTION_DONE
 
+reapProcessHandlers = {}
 def reapProcess(*args):
     """Reap as many processes as possible (without blocking) via waitpid.
 
@@ -52,10 +53,32 @@
     UNIX has no way to be really sure that your process is going to
     go away w/o blocking.  I don't want to block.)
     """
+    for pid in reapProcessHandlers.keys():
+        try:
+            pid, status = os.waitpid(pid,os.WNOHANG)
+        except:
+            pid = None
+        if pid:
+            reapProcessHandlers[pid].processEnded(status)
+            del reapProcessHandlers[pid]
+
+def registerReapProccessHandler(pid, process):
+    if reapProcessHandlers.has_key(pid):
+        raise RuntimeError
     try:
-        os.waitpid(0,os.WNOHANG)
+        aux_pid, status = os.waitpid(pid,os.WNOHANG)
     except:
-        pass
+        aux_pid = None
+    if aux_pid:
+        process.processEnded(status)
+    else:
+        reapProcessHandlers[pid] = process
+
+def unregisterReapProccessHandler(pid, process):
+    if not (reapProcessHandlers.has_key(pid)
+            and reapProcessHandlers[pid] == process):
+        raise RuntimeError
+    del reapProcessHandlers[pid]
 
 class ProcessWriter(abstract.FileDescriptor, styles.Ephemeral):
     """(Internal) Helper class to write to Process's stdin.
@@ -184,8 +207,8 @@
         stdout_read, stdout_write = os.pipe()
         stderr_read, stderr_write = os.pipe()
         stdin_read,  stdin_write  = os.pipe()
-        pid = os.fork()
-        if pid == 0: # pid is 0 in the child process
+        self.pid = os.fork()
+        if self.pid == 0: # pid is 0 in the child process
             # stop debugging, if I am!  I don't care anymore!
             sys.settrace(None)
             # Destroy my stdin / stdout / stderr (in that order)
@@ -246,6 +269,7 @@
             self.proto.makeConnection(self)
         except:
             log.deferr()
+        registerReapProccessHandler(self.pid, self)
 
     def closeStdin(self):
         """Call this to close standard input on this process.
@@ -301,17 +325,23 @@
     lostErrorConnection = 0
     lostOutConnection = 0
     lostInConnection = 0
+    lostProcess = 0
 
     def maybeCallProcessEnded(self):
         if (self.lostErrorConnection and
             self.lostOutConnection and
-            self.lostInConnection):
+            self.lostInConnection and
+            self.lostProcess):
             try:
                 self.proto.processEnded()
             except:
                 log.deferr()
-            reapProcess()
     
+    def processEnded(self, status):
+        self.status = status
+        self.lostProcess = 1
+        self.maybeCallProcessEnded()
+        
     def inConnectionLost(self):
         del self.writer
         self.lostInConnection = 1

From glyph at twistedmatrix.com  Thu Jul  4 11:24:02 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 04 Jul 2002 12:24:02 -0500 (CDT)
Subject: [Twisted-Python] [PATCH] to make twisted more "child process
 friendly"
In-Reply-To: <20020704152904.GA25935@ranty.ddts.net>
References: <20020621141835.GA23753@ranty.ddts.net>
	<20020704152904.GA25935@ranty.ddts.net>
Message-ID: <20020704.122402.74747063.glyph@twistedmatrix.com>

From: Manuel Estrada Sainz <ranty-bulk at ranty.ddts.net>
Subject: Re: [Twisted-Python] [PATCH] to make twisted more "child process friendly"
Date: Thu, 4 Jul 2002 17:29:04 +0200

>  That patch has a problem, if you use registerReapProccessHandler but
>  the process finished before you actually called
>  registerReapProccessHandler you will wait for ever on a dead child.

Yeah, stuff like that's the reason for the shotgun approach that was in place
before.

>  The attached patch makes two variations:

Thanks for the update!  I'll look at it closely and apply it soon.

>  PS: Twisted rocks :)

Indeed it does :-)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020704/7d9ef342/attachment.sig>

From twisted at itamarst.org  Fri Jul  5 14:54:03 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 05 Jul 2002 22:54:03 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] Add callMultipleInThread and deferToThread
 to the reactor interface.
References: <E17QYDF-0007Rq-00@zaibach.twistedmatrix.com>
Message-ID: <3D26076A.50003@itamarst.org>

bruce CVS wrote:
> Modified files:
> Twisted/twisted/internet/base.py 1.9 1.10
> Twisted/twisted/internet/interfaces.py 1.17 1.18
> 
> Log message:
> Add callMultipleInThread and deferToThread to the reactor interface.

We originally did *not* add this since they are utility methods and the 
reactor interface should be minimal. This should be removed and reverted 
to the way it was before (unless glyph disagrees?).





From twisted at itamarst.org  Fri Jul  5 14:54:46 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 05 Jul 2002 22:54:46 +0200
Subject: [Twisted-Python] documentation todo?
References: <3D21AE74.6060106@cubik.org>
Message-ID: <3D260796.8090708@itamarst.org>

Bruce Mitchener wrote:

> It'd help (at least for me) to have a good starting list of things that 
> are ready to be documented in Twisted, but that are not yet documented.
> 
>  From what I've seen this might be a good start:

That's a very a good list - go for it!




From bruce at cubik.org  Fri Jul  5 14:21:40 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Fri, 05 Jul 2002 14:21:40 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Add callMultipleInThread
 and deferToThread to the reactor interface.
References: <E17QYDF-0007Rq-00@zaibach.twistedmatrix.com> <3D26076A.50003@itamarst.org>
Message-ID: <3D25FFD4.6080204@cubik.org>

Itamar Shtull-Trauring wrote:
> bruce CVS wrote:
> 
>> Modified files:
>> Twisted/twisted/internet/base.py 1.9 1.10
>> Twisted/twisted/internet/interfaces.py 1.17 1.18
>>
>> Log message:
>> Add callMultipleInThread and deferToThread to the reactor interface.
> 
> We originally did *not* add this since they are utility methods and the 
> reactor interface should be minimal. This should be removed and reverted 
> to the way it was before (unless glyph disagrees?).

Glyph had agreed with the changes prior to my committing them (on IRC), 
but if he disagrees, I'm happy to revert them, although I do think they 
should be exposed in this way.

  - Bruce




From glyph at twistedmatrix.com  Fri Jul  5 16:34:25 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 05 Jul 2002 17:34:25 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Add
 callMultipleInThread and deferToThread to the reactor interface.
In-Reply-To: <3D26076A.50003@itamarst.org>
References: <E17QYDF-0007Rq-00@zaibach.twistedmatrix.com>
	<3D26076A.50003@itamarst.org>
Message-ID: <20020705.173425.82360176.glyph@twistedmatrix.com>

From: Itamar Shtull-Trauring <twisted at itamarst.org>
Subject: [Twisted-Python] Re: [Twisted-commits] Add callMultipleInThread and deferToThread to the reactor interface.
Date: Fri, 05 Jul 2002 22:54:03 +0200

> bruce CVS wrote:
> > Modified files:
> > Twisted/twisted/internet/base.py 1.9 1.10
> > Twisted/twisted/internet/interfaces.py 1.17 1.18
> > 
> > Log message:
> > Add callMultipleInThread and deferToThread to the reactor interface.
> 
> We originally did *not* add this since they are utility methods and the 
> reactor interface should be minimal. This should be removed and reverted 
> to the way it was before (unless glyph disagrees?).

Argh!  I was distracted and did not listen to Bruce's question properly.  Yes.
This should be reverted.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020705/b31321ad/attachment.sig>

From bruce at cubik.org  Fri Jul  5 16:49:50 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Fri, 05 Jul 2002 16:49:50 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Add callMultipleInThread
 and deferToThread to the reactor interface.
References: <E17QYDF-0007Rq-00@zaibach.twistedmatrix.com>	<3D26076A.50003@itamarst.org> <20020705.173425.82360176.glyph@twistedmatrix.com>
Message-ID: <3D26228E.5050504@cubik.org>

Glyph Lefkowitz wrote:
> From: Itamar Shtull-Trauring <twisted at itamarst.org>
>>We originally did *not* add this since they are utility methods and the 
>>reactor interface should be minimal. This should be removed and reverted 
>>to the way it was before (unless glyph disagrees?).
> 
> Argh!  I was distracted and did not listen to Bruce's question properly.  Yes.
> This should be reverted.

And done.  But I did leave in the docs for the stuff that wasn't 
previously directly mentioned in doc/howto/threading.html.

  - Bruce




From ranty-bulk at ranty.ddts.net  Sat Jul  6 05:49:21 2002
From: ranty-bulk at ranty.ddts.net (Manuel Estrada Sainz)
Date: Sat, 6 Jul 2002 13:49:21 +0200
Subject: [Twisted-Python] FTPClient problem on connection failed
Message-ID: <20020706114921.GA26570@ranty.ddts.net>

 Hello,

 I am having a problem with with FTPClient, it doesn't handle
 'connectionFailed' at all.

 So if that happens I just wait on it for ever.

 Thanks

 	ranty

-- 
--- Manuel Estrada Sainz <ranty at debian.org>
                         <ranty at bigfoot.com>
			 <ranty at users.sourceforge.net>
------------------------ <manuel.estrada at hispalinux.es> -------------------
God grant us the serenity to accept the things we cannot change, courage to
change the things we can, and wisdom to know the difference.



From andrew-twisted at puzzling.org  Sat Jul  6 15:07:42 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 7 Jul 2002 07:07:42 +1000
Subject: [Twisted-Python] FTPClient problem on connection failed
In-Reply-To: <20020706114921.GA26570@ranty.ddts.net>
References: <20020706114921.GA26570@ranty.ddts.net>
Message-ID: <20020706210742.GA4849@frobozz.local>

On Sat, Jul 06, 2002 at 01:49:21PM +0200, Manuel Estrada Sainz wrote:
>  Hello,
> 
>  I am having a problem with with FTPClient, it doesn't handle
>  'connectionFailed' at all.
> 
>  So if that happens I just wait on it for ever.

Gah!  Ok, I'll try to fix that (and hopefully one or two other things in
FTPClient) in the next day or two.  Thanks for the bug report.

-Andrew.




From ranty-bulk at ranty.ddts.net  Sat Jul  6 19:03:36 2002
From: ranty-bulk at ranty.ddts.net (Manuel Estrada Sainz)
Date: Sun, 7 Jul 2002 03:03:36 +0200
Subject: [Twisted-Python] internet/tcp.py problem
Message-ID: <20020707010336.GA15121@ranty.ddts.net>

 Hello,

 I am in vacation, and should not be hacking on anything, but some how I
 keep having trouble with twisted :)

 tcp.Client calls self.failIfNotConnected in two ways, via
 reactor.callLater with a timeout and in resolveAddress when it can't
 resolve the address.

 The problem is, that when resolveAddress can't resolve the address, it
 calls self.failIfNotConnected and later when the timeout is reached and
 self.failIfNotConnected called again, the socket is still not
 connected, so my connectionFailed method gets called twice which I
 don't think is right.

 I see two fixes for this:

  - Keep the return value of callLater and cancel it on
    self.failIfNotConnected.
  - Use some flag variable so self.failIfNotConnected knows that it
    already called connectionFailed and it doesn't do it again on the
    timeout.

 Thanks

 	ranty
-- 
--- Manuel Estrada Sainz <ranty at debian.org>
                         <ranty at bigfoot.com>
			 <ranty at users.sourceforge.net>
------------------------ <manuel.estrada at hispalinux.es> -------------------
God grant us the serenity to accept the things we cannot change, courage to
change the things we can, and wisdom to know the difference.



From carmstro at twistedmatrix.com  Sat Jul  6 20:55:57 2002
From: carmstro at twistedmatrix.com (carmstro at twistedmatrix.com)
Date: Sat, 06 Jul 2002 22:55:57 -0400
Subject: [Twisted-Python] test_process
Message-ID: <87u1nc8cw2.fsf@twistedmatrix.com>

I don't know why, but test_process's testStdio is failing for me.

======================================================================
FAIL: twisted.internet.stdio test.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/chris/Projects/Twisted/twisted/test/test_process.py", line 124, in testStdio
    self.assertEquals(p.outF.getvalue(), "hello, worldabc123")
  File "/home/chris/Projects/Twisted/pyunit/unittest.py", line 282, in failUnlessEqual
    raise self.failureException, (msg or '%s != %s' % (repr(first), repr(second)))
AssertionError: '' != 'hello, worldabc123'

I had bruce and exarkun run the tests and they're not failing for them. I added
a line to the code:

        reactor.spawnProcess(p, exe, [exe, "-u", scriptPath], None, None)
        p.transport.write("hello, world")
        p.transport.write("abc")
+        os.system('ps ax')
        p.transport.write("123")
        p.transport.closeStdin()

To see what the current processes were, and got something rather interesting:

 1479 pts/3    S      0:00 /usr/lib/xemacs-21.4.8/i386-debian-linux//gnuserv
 1844 pts/4    S      0:00 python /home/chris/Projects/Twisted/admin/runtests -t
 1845 pts/4    Z      0:00 [ls <defunct>]
 1848 pts/4    Z      0:00 [python <defunct>]
 1849 pts/4    R      0:00 ps ax

Sup with the "defunct"s? 

Any ideas?

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From carmstro at twistedmatrix.com  Sat Jul  6 20:59:13 2002
From: carmstro at twistedmatrix.com (carmstro at twistedmatrix.com)
Date: Sat, 06 Jul 2002 22:59:13 -0400
Subject: [Twisted-Python] twisted.sister
Message-ID: <87r8ig8cqm.fsf@twistedmatrix.com>

Can someone please fix the issues with twisted.sister tests? There's an obvious
bug where the test is passing in the wrong # of arguments, but fixing that just
reveals a host of other failures. I'm releasing 0.19.0rc1 soon, and it'll be
put out regardless of whether or not the fix is in (RCs are cool ;-)).

(This is a re-send -- I accidentally sent this from a non-subscribed account
the first time, so this mail may come twice if glyph approves my first post
without noticing that I re-sent it ;-))

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From twisted at itamarst.org  Sun Jul  7 01:15:30 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 07 Jul 2002 10:15:30 +0300
Subject: [Twisted-Python] internet/tcp.py problem
References: <20020707010336.GA15121@ranty.ddts.net>
Message-ID: <3D27EA92.7090007@itamarst.org>

Manuel Estrada Sainz wrote:

 > tcp.Client calls self.failIfNotConnected in two ways, via reactor.callLater
 > with a timeout and in resolveAddress when it can't resolve the address.

Failure handling in client connections is one of the last backwards
incompatible changes we will be making, and will involve moving the failure 
callback from the protocol and very likely into the factory. We will fix 
this issue at that point.




From skreech at twistedmatrix.com  Tue Jul  2 18:12:22 2002
From: skreech at twistedmatrix.com (Gavin Cooper)
Date: Tue, 02 Jul 2002 19:12:22 -0500
Subject: [Twisted-Python] apache and twisted.web bug
Message-ID: <E17PXks-0000sR-00@zaibach.twistedmatrix.com>

I have Apache version 1.3.26 acting as a reverse proxy
for my network. This is what receives the requests
for www.tmdn.net. Before the Apache exploit deal, I
had everything working fine, with requests for tmdn.net
being forwarded to a twisted.web on another machine.
The previous Apache version I used was something like 1.3.23.
Now however, users get an error message that can be seen
at www.tmdn.net now. Heres what the twistd.log says:

02/07/2002 18:27 [HTTPChannel,28,172.16.10.1] Traceback (most recent call last):
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/internet/default.py", line 347, in doSelect
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     why = getattr(selectable, method)()
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/internet/tcp.py", line 93, in doRead
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     return self.protocol.dataReceived(data)
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/basic.py", line 161, in dataReceived
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.lineReceived(line)
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 684, in lineReceived
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.allHeadersReceived()
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 733, in allHeadersReceived
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.persistent = self.checkPersistence(req, self.__version)
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 759, in checkPersistence
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     request.setHeader('connection', 'close')
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 561, in setHeader
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.headers[string.lower(k)] = v
02/07/2002 18:27 [HTTPChannel,28,172.16.10.1] exceptions.AttributeError: Request instance has no attribute 'headers'

I am using 0.18.0 as seen in debian.

Blargchoo.

Otherwise, I can access the server directly just fine. Only
the upgrade to Apache caused this to happen.

skreech / Gavin



From itamar at itamarst.org  Sun Jul  7 09:36:49 2002
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 07 Jul 2002 18:36:49 +0300
Subject: [Twisted-Python] Re: [Twisted-commits] negative long int support for cBanana
References: <E17RE3a-000075-00@zaibach.twistedmatrix.com>
Message-ID: <3D286011.3050701@itamarst.org>

itamarst CVS wrote:
> Modified files:
> Twisted/twisted/spread/cBanana.c 1.10 1.11
> Twisted/twisted/test/test_banana.py 1.7 1.8
> 
> Log message:
> negative long int support for cBanana

Could someone who knows the Python/C API check my code and make sure I 
didn't screw anything up?






From jon at totient.demon.co.uk  Sun Jul  7 11:45:26 2002
From: jon at totient.demon.co.uk (Jon Dyte)
Date: Sun, 7 Jul 2002 18:45:26 +0100 (BST)
Subject: [Twisted-Python] apache and twisted.web bug
In-Reply-To: skreech@twistedmatrix.com
References: <E17PXks-0000sR-00@zaibach.twistedmatrix.com>
Message-ID: <15656.32310.397700.529283@erdos.totient.com>

I believe this is fixed in CVS.
It looks v.similar to a bug I reported a month back.

Jon

Gavin Cooper wrote :-
> I have Apache version 1.3.26 acting as a reverse proxy
> for my network. This is what receives the requests
> for www.tmdn.net. Before the Apache exploit deal, I
> had everything working fine, with requests for tmdn.net
> being forwarded to a twisted.web on another machine.
> The previous Apache version I used was something like 1.3.23.
> Now however, users get an error message that can be seen
> at www.tmdn.net now. Heres what the twistd.log says:
> 
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1] Traceback (most recent call last):
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/internet/default.py", line 347, in doSelect
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     why = getattr(selectable, method)()
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/internet/tcp.py", line 93, in doRead
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     return self.protocol.dataReceived(data)
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/basic.py", line 161, in dataReceived
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.lineReceived(line)
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 684, in lineReceived
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.allHeadersReceived()
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 733, in allHeadersReceived
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.persistent = self.checkPersistence(req, self.__version)
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 759, in checkPersistence
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     request.setHeader('connection', 'close')
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]   File "/usr/lib/python2.1/site-packages/twisted/protocols/http.py", line 561, in setHeader
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1]     self.headers[string.lower(k)] = v
> 02/07/2002 18:27 [HTTPChannel,28,172.16.10.1] exceptions.AttributeError: Request instance has no attribute 'headers'
> 
> I am using 0.18.0 as seen in debian.
> 
> Blargchoo.
> 
> Otherwise, I can access the server directly just fine. Only
> the upgrade to Apache caused this to happen.
> 
> skreech / Gavin
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From andrew-twisted at puzzling.org  Sun Jul  7 16:49:47 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 8 Jul 2002 08:49:47 +1000
Subject: [Twisted-Python] Docs on website
Message-ID: <20020707224947.GA631@frobozz.local>

The "Latest News" section says (among other things):
    "Oh, and did we mention the whole slew of docs ..."

However, none of the links under http://www.twistedmatrix.com/documents/dev
seem to be working for me (404).

-Andrew.




From bruce at cubik.org  Sun Jul  7 16:59:06 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Sun, 07 Jul 2002 16:59:06 -0600
Subject: [Twisted-Python] Docs on website
References: <20020707224947.GA631@frobozz.local>
Message-ID: <3D28C7BA.2070602@cubik.org>

Andrew Bennetts wrote:
> The "Latest News" section says (among other things):
>     "Oh, and did we mention the whole slew of docs ..."
> 
> However, none of the links under http://www.twistedmatrix.com/documents/dev
> seem to be working for me (404).

The raw (.html) forms of the docs are present in /documents/howto/ but 
it looks like admin/generate-domdocs -e None wasn't run ... or something.

  - Bruce




From carmstro at twistedmatrix.com  Sun Jul  7 17:23:31 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 07 Jul 2002 19:23:31 -0400
Subject: [Twisted-Python] Docs on website
In-Reply-To: <20020707224947.GA631@frobozz.local> (Andrew Bennetts's message
 of "Mon, 8 Jul 2002 08:49:47 +1000")
References: <20020707224947.GA631@frobozz.local>
Message-ID: <87k7o7xguk.fsf@twistedmatrix.com>

>>>>> "spiv" == Andrew Bennetts <andrew-twisted at puzzling.org> writes:

    spiv> The "Latest News" section says (among other things): "Oh, and did we
    spiv> mention the whole slew of docs ..."

    spiv> However, none of the links under
    spiv> http://www.twistedmatrix.com/documents/dev seem to be working for me
    spiv> (404).

Sorry. Fixed.
-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From exarkun at meson.dyndns.org  Sun Jul  7 20:51:42 2002
From: exarkun at meson.dyndns.org (Jp Calderone)
Date: Sun, 7 Jul 2002 22:51:42 -0400
Subject: [Twisted-Python] If we could
Message-ID: <20020708025142.GA29132@meson.dyndns.org>

  A short diff attached which I hope we can have applied.  I'd just do it
but I imagine there will be some disagreement.  It's not a code issue so I
won't press the issue if anyone really, deeply, seriously, egregiously,
vehemently, passionately disagrees (and has a rationale).  Hopefully my
reasons for wanting this are obvious.  I can expound if anyone feels the
need.

  Jp

--
 10:44pm up 47 days, 23:29, 6 users, load average: 0.03, 0.05, 0.01
-------------- next part --------------
Index: .cvsignore
===================================================================
RCS file: /cvs/Twisted/.cvsignore,v
retrieving revision 1.2
diff -u -r1.2 .cvsignore
--- .cvsignore	9 Jul 2001 18:12:40 -0000	1.2
+++ .cvsignore	8 Jul 2002 02:44:45 -0000
@@ -2,3 +2,4 @@
 build
 dist
 MANIFEST
+debian
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 237 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020707/96ee3dcd/attachment.sig>

From glyph at twistedmatrix.com  Sun Jul  7 22:30:41 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 07 Jul 2002 23:30:41 -0500 (CDT)
Subject: [Twisted-Python] If we could
In-Reply-To: <20020708025142.GA29132@meson.dyndns.org>
References: <20020708025142.GA29132@meson.dyndns.org>
Message-ID: <20020707.233041.21955027.glyph@twistedmatrix.com>

From: Jp Calderone <exarkun at meson.dyndns.org>
Subject: [Twisted-Python] If we could
Date: Sun, 7 Jul 2002 22:51:42 -0400

>   A short diff attached which I hope we can have applied.  I'd just do it
> but I imagine there will be some disagreement.  It's not a code issue so I
> won't press the issue if anyone really, deeply, seriously, egregiously,
> vehemently, passionately disagrees (and has a rationale).  Hopefully my
> reasons for wanting this are obvious.  I can expound if anyone feels the
> need.

Uh, if we were going to do that, we should just keep the debian stuff in a
separate repository.  However, right now, it's part of the release tarball, so
I don't think that makes any more sense than ignoring doc/...

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020707/5a452d15/attachment.sig>

From andrew-twisted at puzzling.org  Mon Jul  8 01:39:10 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 8 Jul 2002 17:39:10 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Contributor agreement first commit.  (don't panic!)
In-Reply-To: <E17RT0u-0004uL-00@zaibach.twistedmatrix.com>
References: <E17RT0u-0004uL-00@zaibach.twistedmatrix.com>
Message-ID: <20020708073910.GA9617@ritsuko.xware.cx>

On Mon, Jul 08, 2002 at 02:32:52AM -0500, glyph CVS wrote:
> 
> ViewCVS links:
> http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/doc/legal/contributor-agreement.html.diff?r1=text&tr1=None&r2=text&tr2=1.1&cvsroot=Twisted

This URL fails -- I think it is due to this being the initial checkin of
this file, so there is no previous version to diff.

The correct URL would seem to be:
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/doc/legal/contributor-agreement.html?rev=1.1&content-type=text/vnd.viewcvs-markup&cvsroot=Twisted

-Andrew.




From bruce at cubik.org  Mon Jul  8 02:56:04 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 08 Jul 2002 02:56:04 -0600
Subject: [Twisted-Python] cBanana diffs
Message-ID: <3D2953A4.5000008@cubik.org>

I've made a couple of local changes to cBanana to look at improving the 
performance of it some.

The diff is available from:
   http://day.cubik.org/~bruce/spread.diff

The change from the malloc/memcpy/free sequence to a realloc should be 
pretty clear.

The remainder of the changes are intended to let us allocate the python 
list objects in the correct size (since we know that) and to then use 
PyList_SET_ITEM() rather than PyList_Append().  In theory, that should 
help, in practice, it didn't much on simple tests.

One thing that was taking a while in simple runs was the handling of 
LONGINT and LONGNEG values (which call back into Python rather than 
using C code).  I've not yet optimized that at all as I don't yet have a 
good enough understanding.

I'll also run this new cBanana.c under valgrind or Purify this week to 
make sure that I didn't introduce any memory leaks.

Comments and suggestions are welcome.

  - Bruce




From twisted at itamarst.org  Mon Jul  8 03:27:53 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 08 Jul 2002 12:27:53 +0300
Subject: [Twisted-Python] cBanana diffs
References: <3D2953A4.5000008@cubik.org>
Message-ID: <3D295B19.6070308@itamarst.org>

Bruce Mitchener wrote:

> I've made a couple of local changes to cBanana to look at improving the 
> performance of it some.

Great! Got any numbers showing the speed difference?

> One thing that was taking a while in simple runs was the handling of 
> LONGINT and LONGNEG values (which call back into Python rather than 
> using C code).  I've not yet optimized that at all as I don't yet have a 
> good enough understanding.

Well, in general it's probably a good idea to avoid using long ints, since 
they will be slow no matter what and support in other languages may be iffy.





From bruce at cubik.org  Mon Jul  8 03:52:31 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 08 Jul 2002 03:52:31 -0600
Subject: [Twisted-Python] cBanana diffs
References: <3D2953A4.5000008@cubik.org> <3D295B19.6070308@itamarst.org>
Message-ID: <3D2960DF.2070401@cubik.org>

Itamar Shtull-Trauring wrote:
> Bruce Mitchener wrote:
> 
>> I've made a couple of local changes to cBanana to look at improving 
>> the performance of it some.
> 
> Great! Got any numbers showing the speed difference?

Nothing reliable.  I was just testing with doc/examples/pbbenchserver.py 
and pbbenchclient.py and looking at how many calls/second were being made.

This week, I'm planning on putting together a quick Banana bench and 
then I'll be able to test it directly and with more predictable loads to 
exercise the parts that I'm changing. :)

That'll let me get reliable and useful numbers and do some targeted 
profiling as well I hope.

Those fixes were just things that I'd noticed when reading through the 
source.

>> One thing that was taking a while in simple runs was the handling of 
>> LONGINT and LONGNEG values (which call back into Python rather than 
>> using C code).  I've not yet optimized that at all as I don't yet have 
>> a good enough understanding.
> 
> Well, in general it's probably a good idea to avoid using long ints, 
> since they will be slow no matter what and support in other languages 
> may be iffy.

Yep.  I was originally unaware of what they were in Python. :)  Still 
learning...

  - Bruce




From carmstro at twistedmatrix.com  Mon Jul  8 07:53:23 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Mon, 8 Jul 2002 08:53:23 -0500
Subject: [Twisted-Python] 0.19.0rc3
Message-ID: <20020708135323.GA22714@twistedmatrix.com>

It's that time again! Twisted 0.19.0rc3 has been made available on
www.twistedmatrix.com. Everybody please check it out and report any bugs
(that aren't already in  Known Issues).

Here's the current list of known issues (from the README file)::
    * Twisted Sister unit tests don't pass, and even cause the runtests
      process to eventually totally freeze.
    * FTP unit tests *still* fail, with an error about "test_ftp.py" not
      being in the file listing.
    * There are other issues with wakeUp on win32 which are causing unit
      tests on win32 to fail/hang.
    * marmalade is broken on python 2.2,
      because of type/class unification issues. Should be an easy fix.

Also, I was notified by an anonymous informant last night that
generate-domdocs isn't running properly on Mac OSX. While this isn't really
important, it'd be nice to have that fixed too. :-)





From sean at ninjaneering.com  Mon Jul  8 10:49:53 2002
From: sean at ninjaneering.com (Sean Riley)
Date: Mon, 8 Jul 2002 11:49:53 -0500
Subject: [Twisted-Python] distributed method calls in twisted.sister
Message-ID: <PGEKIMFOMBFCPBEILDBLMEIICAAA.sean@ninjaneering.com>

background:

twisted.sister is a piece of clustering infrastructure to allow a single
application or simulation to be distributed across multiple servers on
multiple hosts.

twisted.sister has a concept of a "parent" server which acts as a central
locking facility for objects distributed on any number of "sister" servers
in the network.

security in distributed sister servers:

example use case: player1 logged into on one sister server wishes to send a
text message to player2 logged into another - unknown - sister server.

I implemented a "callDistributed" on the sister server which looks like:

def callDistributed(self,
	resourceType,
	resourceName,
	methodName,
	*args,
	**kw):

this goes off to the parent which looks up the sister that has the specified
resource locked, then passes the method call off to that sister to actually
be invoked. all results of course being deferred so the result is passed all
the way back to the originating caller.

so player1 would call:
self.service.callDistributed(
	'avatar',
	'player2',
	'chatMsg',
	'hi there')
and player2 would get the chat message. It currently prepends "remote_" to
the method name on the callee's end.

This appears to be inconsistent with the common twisted notion of knowing
"who" is calling a method for security reasons. Maybe there should be
another type of remote method called "distributed_" which takes the
identifying information of the calling distributed object as the first
arguments:

def distributed_chatMsg(self, resourceType, resourceName, message)

where the resourecType and resourceName identify the distributed resource
that invoked the distributed method call. this distributed_ method would
only ever be invoked by remote objects managed in a twisted.sister network.

I thought about adding the location of the distributed caller object also,
but this information probably isnt required as it is known by the parent who
can route any further communication. the location could also change if an
object migrated between sisters which would invalidate any location
information stored on a sister, so not sending it is a better option.

thoughts?




From glyph at twistedmatrix.com  Mon Jul  8 16:35:13 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 08 Jul 2002 17:35:13 -0500 (CDT)
Subject: [Twisted-Python] distributed method calls in twisted.sister
In-Reply-To: <PGEKIMFOMBFCPBEILDBLMEIICAAA.sean@ninjaneering.com>
References: <PGEKIMFOMBFCPBEILDBLMEIICAAA.sean@ninjaneering.com>
Message-ID: <20020708.173513.66185151.glyph@twistedmatrix.com>

From: "Sean Riley" <sean at ninjaneering.com>
Date: Mon, 8 Jul 2002 11:49:53 -0500

> twisted.sister is a piece of clustering infrastructure to allow a single
> application or simulation to be distributed across multiple servers on
> multiple hosts.

... with unit tests that aren't currently passing ;)

> twisted.sister has a concept of a "parent" server ...

We do need to rename this to the "mother" server sometime soon.

> I implemented a "callDistributed" on the sister server which looks like:
...
> This appears to be inconsistent with the common twisted notion of knowing
> "who" is calling a method for security reasons. Maybe there should be
> another type of remote method called "distributed_" which takes the
> identifying information of the calling distributed object as the first
> arguments:

Hmm.  I agree with the "distributed_" idea, but I'm not so sure about the
identifying information being presented as such.  This seems like a use case
for "shadow" objects; if you're getting a message from another user, your
sister-server must know _something_ about that user.  In this case, it looks OK
to simply present their resource-ID (which should be the same, as far as we
know, as their username).

I can easily imagine adding to this use-case so that each user has a face-icon
associated with them, or some other immediately displayed information.  On IRC
this mirrors the userhost/nickname pair (immediately visible information) and
the userinfo/whois database (key queryable information).  This is a balance
point which has to be easily tunable for an application.

The other problem with this identifying information is that it's not presented
as part of a path.  My initial attempt at shoehorning twisted.sister into the
callPath paradigm was unfortunate :-)... but having an abstract hierarchy where
resources can be mounted/unmounted seems like a good idea to me, still.

I don't know if callPath is necessarily the best way to do that, though.  It
seems that twisted.web's got the best way of handling that so far; a
formalization of what twisted.web.distrib does would probably be best.  (It
would be really, REALLY nice if we could get twisted.sister clustered web
services for free out of that, somehow)

> where the resourecType and resourceName identify the distributed resource
> that invoked the distributed method call. this distributed_ method would
> only ever be invoked by remote objects managed in a twisted.sister network.

Maybe sister_... would be a better naming convention, considering its source?

> I thought about adding the location of the distributed caller object also,
> but this information probably isnt required as it is known by the parent who
> can route any further communication. the location could also change if an
> object migrated between sisters which would invalidate any location
> information stored on a sister, so not sending it is a better option.

Agreed -- routing information has to be handled by the parent.  I take it this
means that messages will also be queued by the parent, in order to avoid losing
them?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020708/f123dc9b/attachment.sig>

From bruce at cubik.org  Tue Jul  9 01:17:32 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 09 Jul 2002 01:17:32 -0600
Subject: [Twisted-Python] cBanana diffs
References: <3D2953A4.5000008@cubik.org> <3D295B19.6070308@itamarst.org> <3D2960DF.2070401@cubik.org>
Message-ID: <3D2A8E0C.9020200@cubik.org>

Bruce Mitchener wrote:
> Itamar Shtull-Trauring wrote:
>> Bruce Mitchener wrote:
>>> I've made a couple of local changes to cBanana to look at improving 
>>> the performance of it some.
>>
>> Great! Got any numbers showing the speed difference?
> 
> Nothing reliable.  I was just testing with doc/examples/pbbenchserver.py 
> and pbbenchclient.py and looking at how many calls/second were being made.
> 
> This week, I'm planning on putting together a quick Banana bench and 
> then I'll be able to test it directly and with more predictable loads to 
> exercise the parts that I'm changing. :)
> 
> That'll let me get reliable and useful numbers and do some targeted 
> profiling as well I hope.

So, I wrote this crappy program that works to test decoding from banana:

   http://day.cubik.org/~bruce/bananabench.py

10000 iterations of decoding the banana-encoded form of:

   [1, 2, [3, 4], [30.5, 40.2], 5, ["six", "seven", ["eight", 9]], [10], []]

had these results:

Pure Python:  22.56 seconds
CVS cBanana:   1.15 seconds
My cBanana:    0.98 seconds

Now, that data is list heavy, so it is particularly suited to enjoy the 
benefits of my patch.  But, given the sorts of data that I know we pass 
around at work (not in Twisted), our data is typically pretty list 
heavy.  Glyph said that PB stuff is usually pretty list-heavy as well.

So, that looks to be a gain.

I ran it under valgrind and that didn't seem to turn up any leaks.

Cheers,

  - Bruce




From twisted at itamarst.org  Tue Jul  9 06:31:03 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 09 Jul 2002 08:31:03 -0400
Subject: [Twisted-Python] cBanana diffs
References: <3D2953A4.5000008@cubik.org> <3D295B19.6070308@itamarst.org> <3D2960DF.2070401@cubik.org> <3D2A8E0C.9020200@cubik.org>
Message-ID: <3D2AD787.1070706@itamarst.org>

Bruce Mitchener wrote:

> Pure Python:  22.56 seconds
> CVS cBanana:   1.15 seconds
> My cBanana:    0.98 seconds

Cool - check it in then after 0.19.0 is released. And checkin 
bananabench.py into doc/examples/ (although we may need a new folder for 
benchmarking and interop suites instead of examples/).




From twisted at itamarst.org  Tue Jul  9 11:08:02 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 09 Jul 2002 13:08:02 -0400
Subject: [Twisted-Python] Aspect Oriented Programming
Message-ID: <3D2B1872.1070204@itamarst.org>

Luc (lstep) pointed this out:

<http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pythius/pythius/pythius/aop.py?rev=1.36&content-type=text/vnd.viewcvs-markup>




From washort at twistedmatrix.com  Tue Jul  9 12:03:29 2002
From: washort at twistedmatrix.com (Allen Short)
Date: Tue, 09 Jul 2002 13:03:29 -0500 (CDT)
Subject: [Twisted-Python] Aspect Oriented Programming
In-Reply-To: <3D2B1872.1070204@itamarst.org>
References: <3D2B1872.1070204@itamarst.org>
Message-ID: <20020709.130329.730559554.washort@twistedmatrix.com>

>>>>> Itamar Shtull-Trauring <twisted at itamarst.org> writes:

  > http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pythius/pythius/pythius/aop.py?rev=1.36&content-type=text/vnd.viewcvs-markup

Hmm. i _knew_ this AOP stuff was overcomplicated. looks like this
does the same as twisted.python.hook or emacs' defadvice. (well,
t.p.hook doesn't do "around" but i've been meaning to add it. here's
the excuse for it, i guess)

-- 
Allen Short        Programmer-Archaeologist        washort at twistedmatrix.com
If I'd known computer science was going to be like this, I'd never have
given up being a rock 'n' roll star.  -- G. Hirst
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020709/01971e84/attachment.sig>

From mathieu.twisted at closetwork.org  Tue Jul  9 15:42:48 2002
From: mathieu.twisted at closetwork.org (Mathieu Longtin)
Date: Tue, 9 Jul 2002 17:42:48 -0400
Subject: [Twisted-Python] about smtp and pop services
Message-ID: <NEBBJNGFKLOOKFNBHMBEAEFEDHAA.mathieu.twisted@closetwork.org>

Hello,

What are the plans for those two services? From the code, they don't look
like they are doing anything right now. Or did I miss something?

-Mathieu




From mathieu at activebuddy.com  Tue Jul  9 15:00:11 2002
From: mathieu at activebuddy.com (Mathieu Longtin)
Date: Tue, 9 Jul 2002 17:00:11 -0400
Subject: [Twisted-Python] about smtp and pop services
Message-ID: <NEBBJNGFKLOOKFNBHMBEKEFCDHAA.mathieu@activebuddy.com>

What are the plans for those two services? From the code, they don't look
like they are doing anything right now. Or did I miss something?

-Mathieu




From twisted at itamarst.org  Tue Jul  9 15:58:36 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 09 Jul 2002 17:58:36 -0400
Subject: [Twisted-Python] about smtp and pop services
References: <NEBBJNGFKLOOKFNBHMBEAEFEDHAA.mathieu.twisted@closetwork.org>
Message-ID: <3D2B5C8C.5080604@itamarst.org>

Mathieu Longtin wrote:

 > What are the plans for those two services? From the code, they don't
 > look like they are doing anything right now. Or did I miss
 > something?

twisted.protocols contains protocol implementations only - policy
decisions on *how* to use the protocol is up to you.

However, we do include a sample implementation which implements the sort 
of stuff other than the protocol you'd expect from a mail server - 
twisted.mail.




From ranty-bulk at ranty.ddts.net  Wed Jul 10 03:46:51 2002
From: ranty-bulk at ranty.ddts.net (Manuel Estrada Sainz)
Date: Wed, 10 Jul 2002 11:46:51 +0200
Subject: [Twisted-Python] [PATCH] http.py: to allow setting the message of the status header
Message-ID: <20020710094651.GA14138@ranty.ddts.net>

 Itamar, here it is as promised, if you don't like the way it is done,
 just say so and I will rework it as needed.

 Well, I didn't even test it, if you like the aproach I will start using
 it in apt-proxy and report. But it is very small patch, I hopefully am
 not dumb enough to fuck up in such a little thing.

 Twisted rocks

 	ranty

-- 
--- Manuel Estrada Sainz <ranty at debian.org>
                         <ranty at bigfoot.com>
			 <ranty at users.sourceforge.net>
------------------------ <manuel.estrada at hispalinux.es> -------------------
God grant us the serenity to accept the things we cannot change, courage to
change the things we can, and wisdom to know the difference.
-------------- next part --------------
Index: http.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/http.py,v
retrieving revision 1.27
diff -u -r1.27 http.py
--- http.py	9 Jul 2002 21:40:24 -0000	1.27
+++ http.py	10 Jul 2002 09:37:16 -0000
@@ -296,6 +296,7 @@
     producer = None
     finished = 0
     code = OK
+    code_message = None
     method = "(no method yet)"
     clientproto = "(no clientproto yet)"
     uri = "(no uri yet)"
@@ -498,7 +499,10 @@
             version = self.clientproto
             if version != "HTTP/0.9":
                 l = []
-                message = RESPONSES.get(self.code, "Unknown Status")
+                if self.code_message:
+                    message = self.code_message
+                else:
+                    message = RESPONSES.get(self.code, "Unknown Status")
                 l.append('%s %s %s\r\n' % (version, self.code, message))
                 # if we don't have a content length, we sent data in chunked mode,
                 # so that we can support pipelining in persistent connections.
@@ -549,10 +553,11 @@
             cookie = cookie +"; Secure"
         self.cookies.append(cookie)
 
-    def setResponseCode(self, code):
+    def setResponseCode(self, code, message=None):
         """Set the HTTP response code.
         """
         self.code = code
+        self.code_message = message
     
     def setHeader(self, k, v):
         """Set an outgoing HTTP header.

From twisted at itamarst.org  Wed Jul 10 05:12:04 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 10 Jul 2002 07:12:04 -0400
Subject: [Twisted-Python] [PATCH] http.py: to allow setting the message
 of the status header
References: <20020710094651.GA14138@ranty.ddts.net>
Message-ID: <3D2C1684.6080500@itamarst.org>

OK, I checked in support for setting message in response code - same 
API, slightly different implementation.





From ranty-bulk at ranty.ddts.net  Wed Jul 10 08:44:44 2002
From: ranty-bulk at ranty.ddts.net (Manuel Estrada Sainz)
Date: Wed, 10 Jul 2002 16:44:44 +0200
Subject: [Twisted-Python] [PATCH] http.py: to allow setting the message of the status header
In-Reply-To: <3D2C1684.6080500@itamarst.org>
References: <20020710094651.GA14138@ranty.ddts.net> <3D2C1684.6080500@itamarst.org>
Message-ID: <20020710144444.GB19333@ranty.ddts.net>

On Wed, Jul 10, 2002 at 07:12:04AM -0400, Itamar Shtull-Trauring wrote:
> OK, I checked in support for setting message in response code - same 
> API, slightly different implementation.

 Your solution is more elegant than mine, I must admit.
 
 Thanks for the quick response

	ranty

-- 
--- Manuel Estrada Sainz <ranty at debian.org>
                         <ranty at bigfoot.com>
			 <ranty at users.sourceforge.net>
------------------------ <manuel.estrada at hispalinux.es> -------------------
God grant us the serenity to accept the things we cannot change, courage to
change the things we can, and wisdom to know the difference.



From martin at strakt.com  Wed Jul 10 08:50:21 2002
From: martin at strakt.com (Martin =?ISO-8859-1?Q?Sj=F6gren?=)
Date: 10 Jul 2002 16:50:21 +0200
Subject: [Twisted-Python] Problem in twisted.internet.tcp when using ssl
Message-ID: <1026312621.15179.7.camel@ratthing-b3cf>

The writeSomeData method of Connection objects may sometimes be called
with a zero length buffer. This works fine when using plain TCP, but
when using ssl, this will cause a ZeroReturnError (which is completely
bogus!) and everything...well...blows up.

Here's a patch:

Index: tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.75
diff -u -u -2 -r1.75 tcp.py
--- tcp.py      10 Jul 2002 00:00:57 -0000      1.75
+++ tcp.py      10 Jul 2002 14:49:29 -0000
@@ -100,4 +100,6 @@
         (which is negative)
         """
+        if not data:
+            return 0
         try:
             return self.socket.send(data)


Regards,
Martin

-- 
Martin Sjögren
  martin at strakt.com              ICQ : 41245059
  Phone: +46 (0)31 7710870       Cell: +46 (0)739 169191
  GPG key: http://www.strakt.com/~martin/gpg.html



From twisted at itamarst.org  Wed Jul 10 09:04:14 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 10 Jul 2002 11:04:14 -0400
Subject: [Twisted-Python] Problem in twisted.internet.tcp when using ssl
References: <1026312621.15179.7.camel@ratthing-b3cf>
Message-ID: <3D2C4CEE.5080603@itamarst.org>

Martin Sjögren wrote:

> The writeSomeData method of Connection objects may sometimes be called
> with a zero length buffer. This works fine when using plain TCP, but
> when using ssl, this will cause a ZeroReturnError (which is completely
> bogus!) and everything...well...blows up.

In the interest of not breaking anything which might possibly, however 
unlikely, depend on tcp.py's behaviour, I've made this change in ssl.py. 
So cvs up and tell me if it's ok now.






From lists at gregfortune.com  Wed Jul 10 12:30:38 2002
From: lists at gregfortune.com (Greg Fortune)
Date: Wed, 10 Jul 2002 14:30:38 -0400
Subject: [Twisted-Python] Question regarding async stuff
Message-ID: <200207110032.g6B0WjV89279@steamteam.com>

I'm working on a network file server right now and am using Twisted as my 
networking framework.  Overall, it's working really well.  The only thing I 
haven't been able to figure out so far is what is async and what is not.  It 
looks like data transfer is async (self.transport.write(msg)), but the 
functions called in the protocol can block the entire twisted main loop.  

Delayed has a note that it is being depreceted, but looked to be the only way 
to make the Protocol dataReceived() function run in an async manner.  What is 
replacing Delayed and is there any other way that I can cause the Protocol 
dataReceived call to handle async?  

The reason I ask is that it doesn't appear that a twisted server can handle 
processing multiple requests at the same time.  It appears that a request 
must come in and be processed before another request can be serviced.  It 
probably isn't a big deal for me as the number of requests and amount of 
processing per request will be low, but it could be that I'm totally 
misunderstanding how the framework works.  

Any insight is appreciated :)

Greg Fortune



From glyph at twistedmatrix.com  Wed Jul 10 19:51:41 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 10 Jul 2002 20:51:41 -0500 (CDT)
Subject: [Twisted-Python] Question regarding async stuff
In-Reply-To: <200207110032.g6B0WjV89279@steamteam.com>
References: <200207110032.g6B0WjV89279@steamteam.com>
Message-ID: <20020710.205141.59468119.glyph@twistedmatrix.com>


On Wed, 10 Jul 2002 14:30:38 -0400, Greg Fortune <lists at gregfortune.com> wrote:

> I'm working on a network file server right now and am using Twisted as my
> networking framework.  Overall, it's working really well.  The only thing I
> haven't been able to figure out so far is what is async and what is not.  It
> looks like data transfer is async (self.transport.write(msg)), but the
> functions called in the protocol can block the entire twisted main loop.

Anything that returns a Deferred is asynchronous; everything else is
synchronous.  I think that your use of these terms belies a misunderstanding of
what's going on.

> [...] What is replacing Delayed [...]

IReactorTime.callLater(...)

    http://twistedmatrix.com/documents/TwistedDocs/Twisted-0.19.0rc3/twisted/internet/interfaces_IReactorTime.py.html#callLater

> The reason I ask is that it doesn't appear that a twisted server can handle 
> processing multiple requests at the same time.  It appears that a request 
> must come in and be processed before another request can be serviced.  It 
> probably isn't a big deal for me as the number of requests and amount of 
> processing per request will be low, but it could be that I'm totally 
> misunderstanding how the framework works.

Yeah, I think you're misunderstanding something ;).

Protocol.dataReceived is called only when data is available from a network
connection; therefore, partial requests coming in are partially parsed and
buffered by state machines (Protocol instances).

When a full request has been received, the request can be processed.  If
processing that request requires accessing other asynchronous data that's not
yet available, that's fine too -- just do your transport.write(...) to respond
later on, when a different event arrives.  Some parts of the framework
(twisted.spread, twisted.enterprise) make this extremely explicit, by allowing
the user to return a Deferred when their response is not yet ready.

Twisted can be "processing multiple requests at the same time" in the sense
that while it's waiting on data from the network, it won't be blocked, since
all I/O is asynchronous.  It will be "stopped" while doing literal CPU-bound
"processing" of a request; but while this may seem bad if you look at it
naively, 90% of all request-processing you'll do is incredibly brief, and
managing the resources needed to parallelize that processing is an order of
magnitude (or more, thanks to python's global interpreter lock, mutex
contention, context switching, and other thread nastinesses) more intensive
than just running the requests one after another.

This is before we even start talking about the inherent, dangerous complexity
of thread-based approaches to state management; they're inefficient, and
they're often buggy too.

Even given all that, Twisted does have good support for threads when you really
need them.

    http://twistedmatrix.com/documents/TwistedDocs/Twisted-0.19.0rc3/twisted/internet/interfaces_IReactorThreads.py.html

I hope this answers your questions.  What sort of file server are you writing?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020710/f1f7d2a2/attachment.sig>

From twisted at itamarst.org  Wed Jul 10 19:53:18 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 10 Jul 2002 21:53:18 -0400
Subject: [Twisted-Python] Question regarding async stuff
References: <200207110032.g6B0WjV89279@steamteam.com>
Message-ID: <3D2CE50E.3040905@itamarst.org>

Greg Fortune wrote:

> The reason I ask is that it doesn't appear that a twisted server can handle 
> processing multiple requests at the same time.  It appears that a request 
> must come in and be processed before another request can be serviced.  It 
> probably isn't a big deal for me as the number of requests and amount of 
> processing per request will be low, but it could be that I'm totally 
> misunderstanding how the framework works.  

Well, consider this - unless you have a SMP machine, your computer can 
only do one thing at a time anyway. So, serving more than one request is 
  just a matter of how you give time to handling different tasks - 
there's no one way you can really do more than one thing at once.

The idea then is to do a little bit each time we get a dataReceived 
callback, and finish up as quickly as possible so we can move on to 
handling the next event. We can also use stuff like producers and 
reactor.callLater to create events even when we aren't getting data from 
the network. In each event handler though we need to make sure we don't 
block.

And yes, this can work. For example this is how Squid works, and Squid 
is rather fast and can do more than one HTTP request "at once".

Recommended reading:
http://www.cs.wustl.edu/~schmidt/PDF/reactor-siemens.pdf




From lists at gregfortune.com  Thu Jul 11 07:54:36 2002
From: lists at gregfortune.com (Greg Fortune)
Date: Thu, 11 Jul 2002 09:54:36 -0400
Subject: [Twisted-Python] Question regarding async stuff
In-Reply-To: <3D2CE50E.3040905@itamarst.org>
References: <200207110032.g6B0WjV89279@steamteam.com> <3D2CE50E.3040905@itamarst.org>
Message-ID: <200207111654.g6BGshO09512@steamteam.com>

<snip>
> Recommended reading:
> http://www.cs.wustl.edu/~schmidt/PDF/reactor-siemens.pdf

Thanks, I'll take a look

Greg



From lists at gregfortune.com  Thu Jul 11 07:58:22 2002
From: lists at gregfortune.com (Greg Fortune)
Date: Thu, 11 Jul 2002 09:58:22 -0400
Subject: [Twisted-Python] Question regarding async stuff
In-Reply-To: <20020710.205141.59468119.glyph@twistedmatrix.com>
References: <200207110032.g6B0WjV89279@steamteam.com> <20020710.205141.59468119.glyph@twistedmatrix.com>
Message-ID: <200207111658.g6BGwTC10075@steamteam.com>

Good deal, I did a poor job of communicating my question, but I did 
understand everything.  Some of the processing I was considering doing was 
fairly CPU intensive, but some simple things reduced the processing overhead 
to almost nothing.

So, I can even assume that during processing of a request (I'm not talking 
about data transport here, just the processing) that operations on data 
members in the protocols factory can be considered atomic?  If the server 
can't "process" more than one request at a time, two protocols can not be 
accessing the factory members concurrently, correct?  I've got a mutex 
wrapper around some stuff in my factory right now, but it sounds like I can 
rip that stuff out.

The server I'm writing is pretty simple.  In principle, it's an ftp server 
with special restrictions.  It's a file server with the requirement that it 
provide a pool of unbound files and then a unique path/name to any file that 
has been bound.  I'm going to use it to store and retrieve graphics 
associated with entities in a database for a point of sale/inventory system 
I'm developing.

That way I can be sure that my pathnames will be at most a certain length.  
All directories will be 1 char long and filenames will be 6 chars long.  At a 
depth of 4 with 10 directories spanning from each node, I can store somewhere 
over 10E9 files. 

Thanks for the quick response,

Greg

<snip>
>
> Yeah, I think you're misunderstanding something ;).
>
> Protocol.dataReceived is called only when data is available from a network
> connection; therefore, partial requests coming in are partially parsed and
> buffered by state machines (Protocol instances).
>
> When a full request has been received, the request can be processed.  If
> processing that request requires accessing other asynchronous data that's
> not yet available, that's fine too -- just do your transport.write(...) to
> respond later on, when a different event arrives.  Some parts of the
> framework (twisted.spread, twisted.enterprise) make this extremely
> explicit, by allowing the user to return a Deferred when their response is
> not yet ready.
>
> Twisted can be "processing multiple requests at the same time" in the sense
> that while it's waiting on data from the network, it won't be blocked,
> since all I/O is asynchronous.  It will be "stopped" while doing literal
> CPU-bound "processing" of a request; but while this may seem bad if you
> look at it naively, 90% of all request-processing you'll do is incredibly
> brief, and managing the resources needed to parallelize that processing is
> an order of magnitude (or more, thanks to python's global interpreter lock,
> mutex contention, context switching, and other thread nastinesses) more
> intensive than just running the requests one after another.
>
> This is before we even start talking about the inherent, dangerous
> complexity of thread-based approaches to state management; they're
> inefficient, and they're often buggy too.
>
> Even given all that, Twisted does have good support for threads when you
> really need them.
>
>    
> http://twistedmatrix.com/documents/TwistedDocs/Twisted-0.19.0rc3/twisted/in
>ternet/interfaces_IReactorThreads.py.html
>
> I hope this answers your questions.  What sort of file server are you
> writing?



From bruce at cubik.org  Thu Jul 11 13:19:56 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Thu, 11 Jul 2002 13:19:56 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Now the rules actually work
References: <E17SjNa-0001tQ-00@zaibach.twistedmatrix.com>
Message-ID: <3D2DDA5C.6070601@cubik.org>

moshez CVS wrote:
> Modified files:
> Twisted/debian/rules 1.30 1.31
> +	cp -ar doc/howto/listings/ \
> +	               debian/twisted-doc/usr/share/doc/twisted-doc/howto/
> +	install -m 644 doc/specifications/*.html \
> +	               debian/twisted-doc/usr/share/doc/twisted-doc/specifications/

Should we be installing the generated .xhtml (or whatever extension) 
files rather than the source .html ones?

  - Bruce




From sean at ninjaneering.com  Thu Jul 11 12:01:56 2002
From: sean at ninjaneering.com (Sean Riley)
Date: Thu, 11 Jul 2002 13:01:56 -0500
Subject: [Twisted-Python] need an identity
Message-ID: <PGEKIMFOMBFCPBEILDBLGEIPCAAA.sean@ninjaneering.com>

I seem to have a problem...

I need access to the identity for a client as their perspective is being
created from within getPerspectiveRequest(). Although
Service::getPerspectiveRequest is called by the identity instance for the
client, when using the DBAuthorizer, there doesnt appear to be a way to
access this identity object from within getPerspectiveRequest.

The only way to lookup an identity is Authorizer::getIdentityRequest - which
in this case will hit the database again to load the identity. I want the
existing identity instance, not a new instance for the same identity. I know
the Identity instance is out there, but I can't get at it!

The DbAuthorizer does not keep an "identities" list around, so I cant look
up the identity the same way you can in the DefaultAuthorizer.

Is this a security issue? Is access to the identity information for a
perspective not allowed?

One solution would be for me would be for the identity to be passed into
getPerspectiveRequest as another argument:

def getPerspectiveRequest(self, name, identity):

instead of the existing:

def getPerspectiveRequest(self, name):

This is may be too drastic an API change for just this one case... but it
doesnt require changing much existing code...

thoughts?

----
Sean Riley





From sean at twistedmatrix.com  Thu Jul 11 21:41:12 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Thu, 11 Jul 2002 22:41:12 -0500
Subject: [Twisted-Python] distributed method calls in twisted.sister
In-Reply-To: <20020708.173513.66185151.glyph@twistedmatrix.com>
Message-ID: <HOEEKPCOKELHCNIJNMAGIEBNCGAA.sean@twistedmatrix.com>

sister_* instead of distributed_* is probably a good idea.

I'm not convinced of the need for shadow objects. They could lead to an
explosion (N^2 !) in the number of python objects in a distributed system.
If they do exist they at least should be transient if possible.

I agree there probably needs to be a better mechanism for identifying the
calling object and allowing it to present information, but I dont have a
solution to suggest yet. Working on it. I'm going to complete distributed
login with multiple services before focusing on inter-object communication
across sisters.



-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Glyph
Lefkowitz
Sent: Monday, July 08, 2002 5:35 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] distributed method calls in twisted.sister


----Security_Multipart(Mon_Jul__8_17:35:13_2002_516)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

From: "Sean Riley" <sean at ninjaneering.com>
Date: Mon, 8 Jul 2002 11:49:53 -0500

> twisted.sister is a piece of clustering infrastructure to allow a single
> application or simulation to be distributed across multiple servers on
> multiple hosts.

... with unit tests that aren't currently passing ;)

> twisted.sister has a concept of a "parent" server ...

We do need to rename this to the "mother" server sometime soon.

> I implemented a "callDistributed" on the sister server which looks like:
...
> This appears to be inconsistent with the common twisted notion of knowing
> "who" is calling a method for security reasons. Maybe there should be
> another type of remote method called "distributed_" which takes the
> identifying information of the calling distributed object as the first
> arguments:

Hmm.  I agree with the "distributed_" idea, but I'm not so sure about the
identifying information being presented as such.  This seems like a use case
for "shadow" objects; if you're getting a message from another user, your
sister-server must know _something_ about that user.  In this case, it looks
OK
to simply present their resource-ID (which should be the same, as far as we
know, as their username).

I can easily imagine adding to this use-case so that each user has a
face-icon
associated with them, or some other immediately displayed information.  On
IRC
this mirrors the userhost/nickname pair (immediately visible information)
and
the userinfo/whois database (key queryable information).  This is a balance
point which has to be easily tunable for an application.

The other problem with this identifying information is that it's not
presented
as part of a path.  My initial attempt at shoehorning twisted.sister into
the
callPath paradigm was unfortunate :-)... but having an abstract hierarchy
where
resources can be mounted/unmounted seems like a good idea to me, still.

I don't know if callPath is necessarily the best way to do that, though.  It
seems that twisted.web's got the best way of handling that so far; a
formalization of what twisted.web.distrib does would probably be best.  (It
would be really, REALLY nice if we could get twisted.sister clustered web
services for free out of that, somehow)

> where the resourecType and resourceName identify the distributed resource
> that invoked the distributed method call. this distributed_ method would
> only ever be invoked by remote objects managed in a twisted.sister
network.

Maybe sister_... would be a better naming convention, considering its
source?

> I thought about adding the location of the distributed caller object also,
> but this information probably isnt required as it is known by the parent
who
> can route any further communication. the location could also change if an
> object migrated between sisters which would invalidate any location
> information stored on a sister, so not sending it is a better option.

Agreed -- routing information has to be handled by the parent.  I take it
this
means that messages will also be queued by the parent, in order to avoid
losing
them?

--
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |

----Security_Multipart(Mon_Jul__8_17:35:13_2002_516)--
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQA9KhOnvVGR4uSOE2wRAjdBAJ9VR7vIXHCuX1iMgV2jDyyJixBNCgCdHyG7
t4FifGq+MMb579KMU6/ZkqM=
=3A6W
-----END PGP SIGNATURE-----

----Security_Multipart(Mon_Jul__8_17:35:13_2002_516)----




From glyph at twistedmatrix.com  Fri Jul 12 00:58:07 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 12 Jul 2002 01:58:07 -0500 (CDT)
Subject: [Twisted-Python] distributed method calls in twisted.sister
In-Reply-To: <HOEEKPCOKELHCNIJNMAGIEBNCGAA.sean@twistedmatrix.com>
References: <20020708.173513.66185151.glyph@twistedmatrix.com>
	<HOEEKPCOKELHCNIJNMAGIEBNCGAA.sean@twistedmatrix.com>
Message-ID: <20020712.015807.74568792.glyph@twistedmatrix.com>


On Thu, 11 Jul 2002 22:41:12 -0500, "Sean Riley" <sean at twistedmatrix.com> wrote:
> I'm not convinced of the need for shadow objects. They could lead to an
> explosion (N^2 !) in the number of python objects in a distributed system.
> If they do exist they at least should be transient if possible.

Transience is a good idea, I agree.  It should be possible to cache the shadow
objects if you need to, but I imagine that would be a pretty rare
case. Remember that a tuple of strings is an object too; it's just an object
you can't edit the interface on.

> I agree there probably needs to be a better mechanism for identifying the
> calling object and allowing it to present information, but I dont have a
> solution to suggest yet. Working on it. I'm going to complete distributed
> login with multiple services before focusing on inter-object communication
> across sisters.

Encapsulating the identification information into an instance (this is all I
mean by "shadow object"; not that we should, by default, have lots of
replicated-everywhere state) seems like it would give some leeway, since any
modifications to what information was necessary could be modifications to the
expected interface of that object, and not the signature of the methods.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020712/48b43079/attachment.sig>

From Karl.Lewin at BNSF.com  Fri Jul 12 09:32:24 2002
From: Karl.Lewin at BNSF.com (Lewin, Karl E)
Date: Fri, 12 Jul 2002 10:32:24 -0500
Subject: [Twisted-Python] Adding Mime types using coil
Message-ID: <B90B981F6E7CD51195830002A5609B32790503@ftwntexmp004.bnsf.com>

I am trying to add a mime type (image/svg+xml) to a default twisted web
server (mktap web --path c:/proj/html) and although it looks like it is
changed when I add it using coil, when I close and restart coil it doesn't
show up.  Any suggestions on things to look for?  

Platform: WinXP Pro, Python 2.2 (activestate), Twisted Twisted-0.19.0rc3

Thanks-
Karl
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020712/f59ad0c1/attachment.html>

From twisted at itamarst.org  Fri Jul 12 09:52:54 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 12 Jul 2002 11:52:54 -0400
Subject: [Twisted-Python] Adding Mime types using coil
References: <B90B981F6E7CD51195830002A5609B32790503@ftwntexmp004.bnsf.com>
Message-ID: <3D2EFB56.1030004@itamarst.org>

Lewin, Karl E wrote:

> I am trying to add a mime type (image/svg+xml) to a default twisted web 
> server (mktap web --path c:/proj/html) and although it looks like it is 
> changed when I add it using coil, when I close and restart coil it 
> doesn't show up.  Any suggestions on things to look for? 

This is a bug in Twisted, since the dictionary is actually a class level 
attribute instead of an instance, so it doesn't get saved when you save 
the tap. I'll fix this after we release 0.19.0.







From Karl.Lewin at BNSF.com  Fri Jul 12 10:19:31 2002
From: Karl.Lewin at BNSF.com (Lewin, Karl E)
Date: Fri, 12 Jul 2002 11:19:31 -0500
Subject: [Twisted-Python] Adding Mime types using coil
Message-ID: <B90B981F6E7CD51195830002A5609B32790505@ftwntexmp004.bnsf.com>

Ok- 

Thanks for the quick reply, I need to muck around looking at the source more
so I can ask better informed stupid questions.

Karl

-----Original Message-----
From: Itamar Shtull-Trauring [mailto:twisted at itamarst.org] 
Sent: Friday, July 12, 2002 10:53 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Adding Mime types using coil


Lewin, Karl E wrote:

> I am trying to add a mime type (image/svg+xml) to a default twisted web 
> server (mktap web --path c:/proj/html) and although it looks like it is 
> changed when I add it using coil, when I close and restart coil it 
> doesn't show up.  Any suggestions on things to look for? 

This is a bug in Twisted, since the dictionary is actually a class level 
attribute instead of an instance, so it doesn't get saved when you save 
the tap. I'll fix this after we release 0.19.0.





_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020712/da555e9a/attachment.html>

From andrew-twisted at puzzling.org  Fri Jul 12 10:40:20 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 13 Jul 2002 02:40:20 +1000
Subject: [Twisted-Python] Adding Mime types using coil
In-Reply-To: <B90B981F6E7CD51195830002A5609B32790505@ftwntexmp004.bnsf.com>
References: <B90B981F6E7CD51195830002A5609B32790505@ftwntexmp004.bnsf.com>
Message-ID: <20020712164020.GA1070@frobozz.local>

On Fri, Jul 12, 2002 at 11:19:31AM -0500, Lewin, Karl E wrote:
>    Ok-
> 
>    Thanks for the quick reply, I need to muck around looking at the source
>    more so I can ask better informed stupid questions.

That was a bug in Twisted, not a stupid question.  Please feel free to ask
us about more of those :)

-Andrew.




From Karl.Lewin at BNSF.com  Fri Jul 12 11:41:54 2002
From: Karl.Lewin at BNSF.com (Lewin, Karl E)
Date: Fri, 12 Jul 2002 12:41:54 -0500
Subject: [Twisted-Python] Adding Mime types using coil
Message-ID: <B90B981F6E7CD51195830002A5609B32790506@ftwntexmp004.bnsf.com>

I'll do my best to come up with some!

Are there any "gotcha's" re: win32 I should be aware of?

-----Original Message-----
From: Andrew Bennetts [mailto:andrew-twisted at puzzling.org] 
Sent: Friday, July 12, 2002 11:40 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Adding Mime types using coil


On Fri, Jul 12, 2002 at 11:19:31AM -0500, Lewin, Karl E wrote:
>    Ok-
> 
>    Thanks for the quick reply, I need to muck around looking at the source
>    more so I can ask better informed stupid questions.

That was a bug in Twisted, not a stupid question.  Please feel free to ask
us about more of those :)

-Andrew.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020712/5b436fea/attachment.html>

From andrew-twisted at puzzling.org  Fri Jul 12 11:55:04 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 13 Jul 2002 03:55:04 +1000
Subject: [Twisted-Python] Adding Mime types using coil
In-Reply-To: <B90B981F6E7CD51195830002A5609B32790506@ftwntexmp004.bnsf.com>
References: <B90B981F6E7CD51195830002A5609B32790506@ftwntexmp004.bnsf.com>
Message-ID: <20020712175504.GA1349@frobozz.local>

On Fri, Jul 12, 2002 at 12:41:54PM -0500, Lewin, Karl E wrote:
>    I'll do my best to come up with some!
> 
>    Are there any "gotcha's" re: win32 I should be aware of?

Several :(

Processes don't work unless you use the win32event reactor rather than the
default reactor.  The win32event reactor is a little bit slower, and not as
thoroughly tested.

There's currently an outstanding problem where anything that calls
reactor.wakeUp, such as callFromThread, is likely to raise a "bad file
descriptor error".

Also, don't bother doing anything on Win95 or Win98.  Some basic stuff will
work, but not much.  Win2k and XP should be ok.  I'm not sure about WinMe.

Otherwise, it's ok, at least for me.  I'm using it quite successfully on
WinXP/2k at work for a variety of tasks.

-Andrew.




From andrew-twisted at puzzling.org  Sat Jul 13 10:55:49 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 14 Jul 2002 02:55:49 +1000
Subject: [Twisted-Python] DeferredList and errback
Message-ID: <20020713165549.GA2542@frobozz.local>

DeferredList is handy, but it isn't quite what I need for FTPClient.

Here's my use-case:  A file is deemed to be downloaded by FTPClient when
both the 226 transfer complete message is received on the control
connection, *and* the data connection is closed.

DeferredList takes care of this nicely, so long as it works.  In the case
where the control connection immediately returns an error (e.g. file not
found), one errback will be called and the other Deferred will never be
called either way, effectively hanging the client.  (I've got a testcase for
this, but I haven't checked it in yet because having FTP tests passing is a
novelty that I don't want to take away from people ;)

So ideally I want DeferredList (or something like DeferredList) to wait for
all callbacks, as it currently does, but fire its errback as soon as any of
its Deferreds fires an errback.  Later errbacks and callbacks would be
ignored.

I realise I'm probably too late to get this into 0.19.0, but I'm wondering
what the right way to provide this is:
  - new class in defer.py (what would it be called?),
  - change the behaviour of DeferredList to do what I want, or
  - add a flag to the current DeferredList so it can do either behaviour?

-Andrew.




From glyph at twistedmatrix.com  Sat Jul 13 19:18:38 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 13 Jul 2002 20:18:38 -0500 (CDT)
Subject: [Twisted-Python] DeferredList and errback
In-Reply-To: <20020713165549.GA2542@frobozz.local>
References: <20020713165549.GA2542@frobozz.local>
Message-ID: <20020713.201838.89032527.glyph@twistedmatrix.com>


On Sun, 14 Jul 2002 02:55:49 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> DeferredList takes care of this nicely, so long as it works.

Rather than adding a whole new class to defer.py, maybe you could make the
other deferred's errback get called by the first one?

> I realise I'm probably too late to get this into 0.19.0, but I'm wondering
> what the right way to provide this is:
>   - new class in defer.py (what would it be called?),

"DeferOneOrMany", maybe?  Tough thing to name.  This is probably the right
approach, though; consider that there are cases where one error might be all
you need, or one success.  In those cases you don't want to get a list as your
callback, you just want to get the one value.

>   - change the behaviour of DeferredList to do what I want, or

Definitely not!!  There are plenty of cases where you need _all_ the operations
to complete regardless of their status of completion.

>   - add a flag to the current DeferredList so it can do either behaviour?

As I said above, the behavior is really different; the types of the signatures
for your callbacks will be different.  That says "different class" to me.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020713/001de197/attachment.sig>

From glyph at twistedmatrix.com  Sat Jul 13 20:21:00 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 13 Jul 2002 21:21:00 -0500 (CDT)
Subject: [Twisted-Python] IM bug bounty
Message-ID: <20020713.212100.23017961.glyph@twistedmatrix.com>


There's a but in t-im that is annoying the heck out of me and I can't figure
out.  If you're a Twisted hacker you can gain major brownie points by
submitting a patch that fixes it.

When you tab-complete a nickname on the second (wrapped) line of a t-im input
box, the whole program freezes and won't respond to signals.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020713/836ea0d9/attachment.sig>

From bruce at cubik.org  Sat Jul 13 21:52:26 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Sat, 13 Jul 2002 21:52:26 -0600
Subject: [Twisted-Python] cBanana diffs
References: <3D2953A4.5000008@cubik.org> <3D295B19.6070308@itamarst.org> <3D2960DF.2070401@cubik.org> <3D2A8E0C.9020200@cubik.org>
Message-ID: <3D30F57A.405@cubik.org>

Bruce Mitchener wrote:
> Pure Python:  22.56 seconds
> CVS cBanana:   1.15 seconds
> My cBanana:    0.98 seconds

These changes plus new ones are now in CVS.

Current numbers from my bananabench look like:

Pure Python:
Encode took 11.9482729435 seconds
Decode took 22.5815860033 seconds

Old cBanana:
Encode took 0.707735061646 seconds
Decode took 1.09367489815 seconds

Current cBanana:
Encode took 0.633662939072 seconds
Decode took 0.930390954018 seconds

I'm not sure why the old cBanana dropped from 1.15 seconds to 1.09 
seconds, but I do know that the additional changes to cBanana.c were 
responsible for the drop from 0.98 to 0.93 seconds.

I'll finish up work on bananabench.py and check it in within a couple of 
days.

Cheers,

  - Bruce




From glyph at twistedmatrix.com  Sat Jul 13 22:08:23 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 13 Jul 2002 23:08:23 -0500 (CDT)
Subject: [Twisted-Python] need an identity
In-Reply-To: <PGEKIMFOMBFCPBEILDBLGEIPCAAA.sean@ninjaneering.com>
References: <PGEKIMFOMBFCPBEILDBLGEIPCAAA.sean@ninjaneering.com>
Message-ID: <20020713.230823.74742231.glyph@twistedmatrix.com>


On Thu, 11 Jul 2002 13:01:56 -0500, "Sean Riley" <sean at ninjaneering.com> wrote:
> One solution would be for me would be for the identity to be passed into
> getPerspectiveRequest as another argument [...]

> This is may be too drastic an API change for just this one case... but it
> doesnt require changing much existing code...

I think you're right here.

This will become increasingly necessary as identities implement more
authorization techniques, and particular services need to verify that the
identities have been verified, say, without using a cleartext password.

However, in the interests of preserving backwards compatibility, maybe have a
getExtendedPerspectiveRequest() that had the additional argument[s] that you
need.

Is there anyone out there who is currently using this API who has a reason not
to change their code?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020713/5099e1ba/attachment.sig>

From andrew-twisted at puzzling.org  Sat Jul 13 22:41:18 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 14 Jul 2002 14:41:18 +1000
Subject: [Twisted-Python] DeferredList and errback
In-Reply-To: <20020713.201838.89032527.glyph@twistedmatrix.com>
References: <20020713165549.GA2542@frobozz.local> <20020713.201838.89032527.glyph@twistedmatrix.com>
Message-ID: <20020714044118.GB651@frobozz.local>

On Sat, Jul 13, 2002 at 08:18:38PM -0500, Glyph Lefkowitz wrote:
> 
> On Sun, 14 Jul 2002 02:55:49 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> > DeferredList takes care of this nicely, so long as it works.
> 
> Rather than adding a whole new class to defer.py, maybe you could make the
> other deferred's errback get called by the first one?

That's what I'm currently attempting to do, and it's messy.  You really want
to make sure that adding the errback to call the other Deferred's errbacks
doesn't interfere in the normal chain of processing for that errback, so you
need to muck around with gunk like "lambda e: otherDeferred.errback(e) or
e".  Worse than that, with 3 or more Deferreds ordering becomes hell... if
you have Deferreds A, B and C, then A should call B & C, B should call A &
C, and C should call A & B.  I don't know of a clean way to arrange that.

Plus, it's what I'm currently trying to do, and it doesn't work.  Doubtless
this is a bug in how I'm doing it, but that's just another argument for
having a class to do it for me.

> > I realise I'm probably too late to get this into 0.19.0, but I'm wondering
> > what the right way to provide this is:
> >   - new class in defer.py (what would it be called?),
> 
> "DeferOneOrMany", maybe?  Tough thing to name.  This is probably the right
> approach, though; consider that there are cases where one error might be all
> you need, or one success.  In those cases you don't want to get a list as your
> callback, you just want to get the one value.

Well, I *definitely* want all callbacks, or just one errback.  I can imagine
that only one either could be useful too, though.  Taking this approach,
suddenly we have two new classes to name, both similar and yet and different
to DeferredList: all callbacks or one errback, and one callback or one
errback, vs. the current all callbacks and all errbacks.

> >   - change the behaviour of DeferredList to do what I want, or
> 
> Definitely not!!  There are plenty of cases where you need _all_ the operations
> to complete regardless of their status of completion.

Ok.  I wasn't sure if this aspect of its functionality was in use, though I
guessed it probably was.

> >   - add a flag to the current DeferredList so it can do either behaviour?
> 
> As I said above, the behavior is really different; the types of the signatures
> for your callbacks will be different.  That says "different class" to me.

I'm not so sure.

Would it be so bad to be able to do this:
    dl = DeferredList([d1, d2, ...], fireOnOneCallback=1, fireOnOneErrback=1)

This way we can get all four variations for free, without having to think of
distinct and non-confusing names for them.  Of course, "fireOnOneCallback"
is a pretty ugly name for a keyword argument.

This approach, despite the way it can change the signature of callback
and/or errback, seems more general to me.  Or is the way you envisage that
"DeferOneOrMany" would behave?

-Andrew.




From glyph at twistedmatrix.com  Sat Jul 13 23:45:30 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 14 Jul 2002 00:45:30 -0500 (CDT)
Subject: [Twisted-Python] DeferredList and errback
In-Reply-To: <20020714044118.GB651@frobozz.local>
References: <20020713165549.GA2542@frobozz.local>
	<20020713.201838.89032527.glyph@twistedmatrix.com>
	<20020714044118.GB651@frobozz.local>
Message-ID: <20020714.004530.78716887.glyph@twistedmatrix.com>

On Sun, 14 Jul 2002 14:41:18 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

> > > - add a flag to the current DeferredList so it can do either behaviour?
> > As I said above, the behavior is really different; the types of the
> > signatures for your callbacks will be different.  That says "different
> > class" to me.

> Would it be so bad to be able to do this:
>     dl = DeferredList([d1, d2, ...], fireOnOneCallback=1, fireOnOneErrback=1)
> 
> This way we can get all four variations for free, without having to think of
> distinct and non-confusing names for them.  Of course, "fireOnOneCallback"
> is a pretty ugly name for a keyword argument.

On second thought, you're right -- I like the way that exact signature looks.
:-).  Go ahead and implement it.


-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020714/23037584/attachment.sig>

From carmstro at twistedmatrix.com  Sun Jul 14 10:51:04 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 14 Jul 2002 12:51:04 -0400
Subject: [Twisted-Python] commits
Message-ID: <87adouw8w7.fsf@twistedmatrix.com>

Hey guys, I just wanted to say "holy crap" -- great job on all the (code AND
documentation!) commits that I woke up to today. :-)

The only problem is, Twisted releases are going to get behind if you guys keep
this productivity up!! Guess I'll have to release again in a couple of days!
^.^'


-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Sun Jul 14 17:50:04 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 14 Jul 2002 18:50:04 -0500
Subject: [Twisted-Python] commits
In-Reply-To: <87adouw8w7.fsf@twistedmatrix.com>
Message-ID: <6B6B756C-9784-11D6-9A8D-003065C58BE2@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Sunday, July 14, 2002, at 11:51 AM, Christopher Armstrong wrote:

> Hey guys, I just wanted to say "holy crap" -- great job on all the 
> (code AND
> documentation!) commits that I woke up to today. :-)

I've gotta say the same thing about Twisted as a whole.

The whole team has really been kicking ass lately; we have a lot of 
spectacular new functionality coming on line, the 1.0 release is 
starting to look like it's in good shape, and the documentation is 
actually starting to make sense!

So kudos to everybody.  Keep up the good work!  (And hopefully I can 
catch up with you!)


  |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
  |   < _/ >   |  Lead Developer,  the Twisted project  |
  |  < ___/ >  |      http://www.twistedmatrix.com      |
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (Darwin)

iD8DBQE9Mg42J4egu9Jkc+kRAsHeAJ9U51OzVT5njyK06bYLgSqICMVmEwCg+U9o
JBtLQbxpJi4neBPt/JqJZ2U=
=NyFE
-----END PGP SIGNATURE-----




From twisted at itamarst.org  Sun Jul 14 20:27:27 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 14 Jul 2002 22:27:27 -0400
Subject: [Twisted-Python] ANN: Twisted 0.19.0
Message-ID: <3D32330F.901@itamarst.org>

Twisted is an event-based framework for internet applications, written
in Python and licensed under the LGPL. For more information, visit:

         http://www.twistedmatrix.com

Join the list at:

         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Our IRC channel is #twisted on irc.openprojects.net.


What's New in 0.19.0
====================

- cReactor, a C-based reactor for faster networking.

- Reimplemented OSCAR protocol (for AIM and ICQ).

- Added a new MVC-based web framework.

- Refactoring of Deferreds.

- Support for persisting to abstract object tree (this is equivalent
     to pickle, except that the output is Python source code.)

- Processes can now be run setuid/setgid.

- Huge number of bugfixes, including much improved SSL support, and lots
     more documentation.


What is Twisted?
================

Twisted is an event-based framework for internet applications.  It
includes a web server, a telnet server, a chat server, a news server, a
generic client and server for remote object access, and APIs for
creating new protocols and services. Twisted supports integration of the
Tk, GTK+, Qt or wxPython event loop with its main event loop. The Win32
event loop is also supported, as is basic support for running servers on
top of Jython. Twisted supports TCP, SSL, UDP, Unix sockets and
subprocesses out of the box.

Twisted currently supports the following protocols, all implemented in
pure python, most of them as both servers and clients:

          - NNTP
          - FTP
          - HTTP
          - SOCKSv4
          - SMTP
          - IRC
          - telnet
          - POP3
          - AOL's instant messaging TOC
          - OSCAR, used by AOL-IM as well as ICQ (client only)
          - DNS
          - finger
          - Echo, discard, chargen and friends
          - Twisted Perspective Broker
          - LDAP is available as a separate plugin






From Karl.Lewin at BNSF.com  Mon Jul 15 12:02:07 2002
From: Karl.Lewin at BNSF.com (Lewin, Karl E)
Date: Mon, 15 Jul 2002 13:02:07 -0500
Subject: [Twisted-Python] Disable directory serving?
Message-ID: <B90B981F6E7CD51195830002A5609B3279050B@ftwntexmp004.bnsf.com>

Is it a coil option or something that has to be done programmatically?

Currently with a default mktap web -f blah blah build of a webserver, if you
go the root directory it will give a "directory" view.  Is there some
document I can read on how to disable that so the request has to be a real
document?

Not a real important question as I still just playing around getting a feel
for the twisted framework and trying out simple things.

Karl
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020715/9117277f/attachment.html>

From zooko at zooko.com  Mon Jul 15 13:10:54 2002
From: zooko at zooko.com (Zooko)
Date: Mon, 15 Jul 2002 16:10:54 -0300
Subject: [Twisted-Python] my first Twisted patch
In-Reply-To: Message from "Lewin, Karl E" <Karl.Lewin@BNSF.com> 
   of "Mon, 15 Jul 2002 13:02:07 CDT." <B90B981F6E7CD51195830002A5609B3279050B@ftwntexmp004.bnsf.com> 
References: <B90B981F6E7CD51195830002A5609B3279050B@ftwntexmp004.bnsf.com> 
Message-ID: <E17UBFG-0002KW-00@localhost>

Greetings, everyone!  I'm the leader of the Mnet project, http://mnet.sf.net/,
and I'm playing with Twisted for a few different reasons.  Here's my first
patch.

Regards,

Zooko

--- spread/cBanana.c	8 Jul 2002 05:13:40 -0000	1.12
+++ spread/cBanana.c	15 Jul 2002 17:41:00 -0000
@@ -604,7 +604,7 @@
   }
 
   if (!PyString_Check(newChunk)) {
-    printf("First arg was not a string\n");
+    printf("Second arg was not a string\n");
     Py_INCREF(Py_None);
     return Py_None;
   }



From sean at twistedmatrix.com  Mon Jul 15 13:47:43 2002
From: sean at twistedmatrix.com (Sean C. Riley)
Date: Mon, 15 Jul 2002 14:47:43 -0500
Subject: [Twisted-Python] _listenerDict
Message-ID: <E17UBot-0007Yt-00@zaibach.twistedmatrix.com>

in twisted.internet.app.py self._listenerDict is initialized as a list at line 87 but then re-initialized as a dict later on at line 479. It appears to be referenced as a dict everywhere except that first initialization... I assume it should be a dict?

If you unlistenTCP without bindPorts being called, i get a traceback saying the list self._listenerDict has no attribute "has_key".





From typo at soniq.net  Tue Jul 16 03:13:42 2002
From: typo at soniq.net (Paul Boehm)
Date: Tue, 16 Jul 2002 11:13:42 +0200
Subject: [Twisted-Python] spread.sturdy
Message-ID: <20020716091342.GA21934@soniq.net>

when i restart a PB server to which i've connected via spread.sturdy is
restarted i get the following traceback instead of a reconnect.

i can partially solve this by catching pb.ProtocolError inside spread.sturdy,
which seems to work, except that i get an AlreadyConnected error after the
the callRemote is reproduced after connecting.

does anyone know how to correctly fix this?

Traceback (most recent call last):
  File "./twisted/web/widgets.py", line 253, in display
    x = eval(elem, namespace, namespace)
  File "<string>", line 0, in ?

  File "./test.py", line 15, in getFilePerspective
    return ['<b>',
  File "./twisted/spread/sturdy.py", line 77, in callRemote
    return apply(self.reference.callRemote, (method,)+args, kw)
  File "./twisted/spread/pb.py", line 322, in callRemote
    return self.broker._sendMessage('',self.perspective, self.luid, name, args, kw)
  File "./twisted/spread/pb.py", line 739, in _sendMessage
    raise ProtocolError("Calling Stale Broker")
twisted.spread.pb.ProtocolError: Calling Stale Broker


thanks,
  paul



From a.d.stribblehill at durham.ac.uk  Tue Jul 16 05:01:56 2002
From: a.d.stribblehill at durham.ac.uk (Andrew Stribblehill)
Date: Tue, 16 Jul 2002 12:01:56 +0100
Subject: [Twisted-Python] NNTP server patch
Message-ID: <20020716110155.GL11878@womble.dur.ac.uk>

The attached patch adds NEXT and LAST functionality to the Twisted
NNTP server, and allows commands like HEAD, BODY, STAT and ARTICLE to
use the default current article.

It also fixes up the XHDR response when using the Pickle backend
from:

221 Header follows
1 ('Subject', 'Test foo 1')

to:

221 Header follows
1 Test foo 1


I donate the code to Glyph -- do with it as you will ;)
-- 
HUMBER THAMES
VARIABLE 3 IN WEST HUMBER AT FIRST, OTHERWISE NORTHERLY 4,
OCCASIONALLY 5 IN EAST THAMES. FAIR. MODERATE OR GOOD
-------------- next part --------------
diff -ur Twisted-0.19.0-orig/twisted/news/database.py Twisted-0.19.0/twisted/news/database.py
--- Twisted-0.19.0-orig/twisted/news/database.py	Sun Jun  2 05:45:03 2002
+++ Twisted-0.19.0/twisted/news/database.py	Tue Jul 16 11:00:01 2002
@@ -129,7 +129,7 @@
         if not a.getHeader('Message-ID'):
             s = str(time.time()) + a.body
             id = hexdigest(md5.md5(s)) + '@' + socket.gethostname()
-            a.putHeader('Message-ID', id)
+            a.putHeader('Message-ID', '<%s>' % id)
 
         if not a.getHeader('Bytes'):
             a.putHeader('Bytes', str(len(a.body)))
@@ -163,7 +163,7 @@
         r = []
         for i in self.db[group].keys():
             if low is None or i >= low and high is None or i <= high:
-                r.append((i, self.db[group][i].headers[header]))
+                r.append((i, self.db[group][i].getHeader(header)))
         return defer.succeed(r)
 
     def listGroupRequest(self, group):
diff -ur Twisted-0.19.0-orig/twisted/protocols/nntp.py Twisted-0.19.0/twisted/protocols/nntp.py
--- Twisted-0.19.0-orig/twisted/protocols/nntp.py	Tue Jun 18 15:32:02 2002
+++ Twisted-0.19.0/twisted/protocols/nntp.py	Tue Jul 16 11:07:37 2002
@@ -22,6 +22,7 @@
 import string, random, socket
 
 def parseRange(text):
+    # FIXME: should cope with '1-', '-443' and even '-'
     articles = string.split(text, '-')
     if len(articles) == 1:
         try:
@@ -292,32 +293,22 @@
             self.ip = "unknown"
         self.posting = 0
         self.currentGroup = None
-        self.currentArticle = None
+        self.currentIndex = None
         self.sendLine('200 server ready - posting allowed')
 
     def lineReceived(self, line):
 #        print line
-        # XXX - This is ugly.  How should I improve it?
         if self.posting == 1:
-            if line == '.':
-                self.posting = 0
-                group, article = self.currentGroup, self.message
-                del self.message
-
-                defer = self.factory.backend.postRequest(article)
-                defer.addCallbacks(self._gotPost, self._errPost)
-            else:
-                if line and line[0] == '.':
-                    line = '.' + line
-                self.message = self.message + line + '\r\n'
+            self._doingPost(line)
         else:
             parts = filter(None, string.split(string.strip(line)))
-            cmd, parts = string.upper(parts[0]), parts[1:]
-            if cmd in NNTPServer.COMMANDS:
-                func = getattr(self, 'do_%s' % cmd)
-                apply(func, (parts,))
-            else:
-                self.sendLine('500 command not recognized')
+            if len(parts):
+                cmd, parts = string.upper(parts[0]), parts[1:]
+                if cmd in NNTPServer.COMMANDS:
+                    func = getattr(self, 'do_%s' % cmd)
+                    apply(func, (parts,))
+                else:
+                    self.sendLine('500 command not recognized')
 
     def do_LIST(self, parts):
         if parts:
@@ -338,7 +329,17 @@
         else:
             defer = self.factory.backend.listRequest()
             defer.addCallbacks(self._gotList, self._errList)
-            
+
+    def _gotList(self, list):
+        # Currently a RFC 977 list - understand no arguments
+        self.sendLine('215 newsgroups in form "group high low flags"')
+        for i in list:
+            self.sendLine('%s %d %d %s' % i)
+        self.sendLine('.')
+
+    def _errList(self, error):
+        self.sendLine('%s' % str(error))
+
     def _gotSubscription(self, parts):
         self.sendLine('215 information follows')
         for i in parts:
@@ -357,15 +358,6 @@
     def _errOverview(self):
         self.sendLine('503 program error, function not performed')
 
-    def _gotList(self, list):
-        # Currently a RFC 977 list - understand no arguments
-        self.sendLine('215 newsgroups in form "group high low flags"')
-        for i in list:
-            self.sendLine('%s %d %d %s' % i)
-        self.sendLine('.')
-
-    def _errList(self, error):
-        self.sendLine('%s' % str(error))
 
     def do_LISTGROUP(self, parts):
         if len(parts):
@@ -384,9 +376,9 @@
         group, articles = parts
         self.currentGroup = group
         if len(articles):
-            self.currentArticle = articles[0]
+            self.currentIndex = int(articles[0])
         else:
-            self.currentArticle = None
+            self.currentIndex = None
 
         self.sendLine('211 list of article numbers follow')
         for i in articles:
@@ -396,9 +388,11 @@
     def _errListGroup(self):
         self.sendLine('502 no permission')
 
+
     def do_NEWSGROUPS(self, parts):
         pass
 
+
     def do_XOVER(self, parts):
         if self.currentGroup is None:
             self.sendLine('412 No news group currently selected')
@@ -422,19 +416,23 @@
     def _errXOver(self, error):
         self.sendLine('420 No article(s) selected')
 
+
     def do_XHDR(self, parts):
         if self.currentGroup is None:
             self.sendLine('412 No news group currently selected')
         else:
-            if len(parts) == 1:
-                if self.currentArticle is None:
+            if len(parts) == 0:
+                self.sendLine('501 header [range|MessageID]')
+            elif len(parts) == 1:
+                if self.currentIndex is None:
                     self.sendLine('420 No current article selected')
                     return
                 else:
                     header = parts[0]
-                    l = h = self.currentArticle
+                    l = h = self.currentIndex
             else:
                 header, articles = parts
+                # FIXME: articles may be a message-id
                 l, h = parseRange(articles)
 
             if l is h is None:
@@ -452,17 +450,32 @@
     def _errXHDR(self):
         self.sendLine('502 no permission')
 
+
     def do_POST(self, parts):
         self.posting = 1
         self.message = ''
         self.sendLine('340 send article to be posted.  End with <CR-LF>.<CR-LF>')
 
+    def _doingPost(self, line):
+        if line == '.':
+            self.posting = 0
+            group, article = self.currentGroup, self.message
+            del self.message
+
+            defer = self.factory.backend.postRequest(article)
+            defer.addCallbacks(self._gotPost, self._errPost)
+        else:
+            if line and line[0] == '.':
+                line = '.' + line
+            self.message = self.message + line + '\r\n'
+
     def _gotPost(self, parts):
         self.sendLine('240 article posted ok')
     
     def _errPost(self, parts):
         self.sendLine('441 posting failed')
 
+
     def do_GROUP(self, parts):
         defer = self.factory.backend.groupRequest(parts[0])
         defer.addCallbacks(self._gotGroup, self._errGroup)
@@ -470,55 +483,64 @@
     def _gotGroup(self, parts):
         name, num, high, low, flags = parts
         self.currentGroup = name
+        self.currentIndex = low
         self.sendLine('211 %d %d %d %s group selected' % (num, low, high, name))
     
     def _errGroup(self, group):
         self.sendLine('411 no such group')
 
+
     def do_ARTICLE(self, parts):
         if len(parts):
-            i = int(parts[0])
-            defer = self.factory.backend.articleRequest(self.currentGroup, i)
-            defer.addCallbacks(self._gotArticle, self._errArticle)
-        else:
-            self.sendLine('501 command parse error')
+            if parts[0][0] == '<':
+                # FIXME: Request for article by message-id not implemented
+                self.sendLine('501 ARTICLE <message-id> not implemented :(')
+            else:
+                i = int(parts[0])
+        else:
+            i = self.currentIndex
+        defer = self.factory.backend.articleRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotArticle, self._errArticle)
 
     def _gotArticle(self, parts):
         index, id, article = parts
-        self.currentArticle = article
-        self.sendLine('220 %d %s article' % (index, id))
+        self.currentIndex = index
+        self.sendLine('220 %d <%s> article' % (index, id))
         self.transport.write(article)
         self.sendLine('.')
 
     def _errArticle(self, article):
         self.sendLine('423 bad article number')
 
+
     def do_STAT(self, parts):
         if len(parts):
             i = int(parts[0])
-            defer = self.factory.backend.articleRequest(self.currentGroup, i)
-            defer.addCallbacks(self._gotStat, self._errStat)
         else:
-            self.sendLine('501 command parse error')
+            i = self.currentIndex
+        defer = self.factory.backend.articleRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotStat, self._errStat)
     
     def _gotStat(self, parts):
         index, id, article = parts
-        self.currentArticle = article
+        self.currentIndex = index
         self.sendLine('223 %d %s article retreived - request text separately' % (index, id))
 
     def _errStat(self, parts):
         self.sendLine('423 bad article number')
 
+
     def do_HEAD(self, parts):
         if len(parts):
             i = int(parts[0])
-            defer = self.factory.backend.headRequest(self.currentGroup, i)
-            defer.addCallbacks(self._gotHead, self._errHead)
         else:
-            self.sendLine('501 command parse error')
+            i = self.currentIndex
+        defer = self.factory.backend.headRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotHead, self._errHead)
     
     def _gotHead(self, parts):
         index, id, head = parts
+        self.currentIndex = index
         self.sendLine('221 %d %s article retrieved' % (index, id))
         self.transport.write(head + '\r\n')
         self.sendLine('.')
@@ -526,16 +548,18 @@
     def _errHead(self, head):
         self.sendLine('423 no such article number in this group')
 
+
     def do_BODY(self, parts):
         if len(parts):
             i = int(parts[0])
-            defer = self.factory.backend.bodyRequest(self.currentGroup, i)
-            defer.addCallbacks(self._gotBody, self._errBody)
         else:
-            self.sendLine('501 command parse error')
+            i = self.currentIndex
+        defer = self.factory.backend.bodyRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotBody, self._errBody)
 
     def _gotBody(self, parts):
         index, id, body = parts
+        self.currentIndex = index
         self.sendLine('221 %d %s article retrieved' % (index, id))
         self.transport.write(body + '\r\n')
         self.sendLine('.')
@@ -543,12 +567,28 @@
     def _errBody(self, body):
         self.sendLine('423 no such article number in this group')
 
+
+    # NEXT and LAST are just STATs that increment currentIndex first.
+    # Accordingly, use the STAT callbacks.
+    def do_NEXT(self, parts):
+        i = self.currentIndex + 1
+        defer = self.factory.backend.articleRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotStat, self._errStat)
+
+    def do_LAST(self, parts):
+        i = self.currentIndex - 1
+        defer = self.factory.backend.articleRequest(self.currentGroup, i)
+        defer.addCallbacks(self._gotStat, self._errStat)
+
+
     def do_MODE(self, parts):
         self.sendLine('200 Hello, you can post')
 
+
     def do_QUIT(self, parts):
         self.sendLine('205 goodbye')
         self.transport.loseConnection()
+
 
     def sendLine(self, line):
 #        print 'sending: ', line

From exarkun at meson.dyndns.org  Tue Jul 16 20:03:15 2002
From: exarkun at meson.dyndns.org (Jp Calderone)
Date: Tue, 16 Jul 2002 22:03:15 -0400
Subject: [Twisted-Python] NNTP server patch
In-Reply-To: <20020716110155.GL11878@womble.dur.ac.uk>
References: <20020716110155.GL11878@womble.dur.ac.uk>
Message-ID: <20020717020315.GA25378@meson.dyndns.org>

On Tue, Jul 16, 2002 at 12:01:56PM +0100, Andrew Stribblehill wrote:
> The attached patch adds NEXT and LAST functionality to the Twisted
> NNTP server, and allows commands like HEAD, BODY, STAT and ARTICLE to
> use the default current article.
> 
> It also fixes up the XHDR response when using the Pickle backend

> [snip]

  Excellent :)  It's been committed (modulo a couple tiny changes).  MUCH
appreciated... NNTP has been getting a little stale.  Messages should
persist between runs now, too.  Lemmie know if you're still having problems
with that.  One thing to note is that if you try to create a new tap and use
a pickle filename that already exists, it will re-use the existing pickle
and ignore your new options.

  Thanks again,

         Jp

-- 
|     This 
|   signature
| intentionally
|    8 lines
|     long.
|  (So sue me)
---
--
 9:50pm up 56 days, 22:36, 3 users, load average: 0.50, 0.28, 0.15
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 237 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020716/48041142/attachment.sig>

From glyph at twistedmatrix.com  Wed Jul 17 17:15:26 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 17 Jul 2002 18:15:26 -0500 (CDT)
Subject: [Twisted-Python] spread.sturdy
In-Reply-To: <20020716091342.GA21934@soniq.net>
References: <20020716091342.GA21934@soniq.net>
Message-ID: <20020717.181526.21955754.glyph@twistedmatrix.com>


On Tue, 16 Jul 2002 11:13:42 +0200, Paul Boehm <typo at soniq.net> wrote:
> when i restart a PB server to which i've connected via spread.sturdy is
> restarted i get the following traceback instead of a reconnect.

I just checked in a fix that I *think* should fix your problem, but I don't
have a test case yet; let me know if current CVS fixes your issue.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020717/7c351edd/attachment.sig>

From nils at paragon.no  Wed Jul 17 20:08:44 2002
From: nils at paragon.no (Nils R Grotnes)
Date: Thu, 18 Jul 2002 04:08:44 +0200
Subject: [Twisted-Python] A newbie experience. Chapter one.
Message-ID: <200207180408440370.0009C43C@mail.c2i.net>


I'm a newbie, both with Python and with Twisted. That means I probably
can't contribute as much as I want, but I believe there's one thing I can
do that most of you maybe can not; That is to describe how it really feels
to start with a very fresh (and simple?) mind. Here is one try.

While waiting for a stable Debian 3.0, I'm back in Windows where I have
learned most of what I know about programming and using computers. My
current machine is a Win2K Pro, and it's quite updated and stable. I got
Python 2.2.1 installed, and the latest Pythonwin too. I can't seem to find
a PYTHONPATH anywhere, but since pydocgui.pyw runs fine, I'd like to
believe that things has been installed well enough, this far.

Then I had my first head-scratcher. I've read most of what's available on
the Twisted website, and downloaded the zipped version of the source and
documentation. "Installing Twisted" told me that "If you are on Windows,
you may want to skip this and simply get the Windows Installer version of
Twisted from the download page." Since all I could find was the
Twisted-0.19.0.zip, I expected that zip-file to be the one. Silly me...

Unpacking it revealed no setup.exe or .msi, but fortunately another
procedure was described: "setup.py install". That sure did make something
happen, though I'm not sure everything worked. Still, a twisted folder
_was_ added to site-packages, but did it happen because I had unpacked
twisted-0.19.0 there, or because the (invisible) PYTHONPATH was ok?

Inspecting this new Twisted folder did make me feel a little better, it
looked very similar to my earlier Debian install. Now to follow the final
suggestion from "Installing Twisted". After figuring out that the
"admin/runtests" was still back in the old folder, the next step was to get
it to run.

In the end, the command "c:\python22\python admin/runtests" worked, which
made me think I really should have added that PYTHONPATH anyway...

Four failures and four errors doesn't seem much, though the test window
itself bombing was less impressive. Running the test again only led to 2
failures. Setting PYTHONPATH in the "Command Prompt"-shell to
"C:\Python22\Lib\site-packages\Twisted-0.19.0\", running "setup.py install"
again, then running another full test led to another failure removed. I
think I'll leave the head-scratching over that strangeness to the pro's.

Still, I have had some of Twisted running! There's hope.

Nils

(Logfile with some extra comments attached.)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: testlog.zip
Type: application/zip
Size: 5909 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020718/1f222f9e/attachment-0002.zip>

From carmstro at twistedmatrix.com  Thu Jul 18 20:06:32 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 18 Jul 2002 22:06:32 -0400
Subject: [Twisted-Python] A newbie experience. Chapter one.
In-Reply-To: <200207180408440370.0009C43C@mail.c2i.net>
References: <200207180408440370.0009C43C@mail.c2i.net>
Message-ID: <1027044393.11249.22.camel@radii>

On Wed, 2002-07-17 at 22:08, Nils R Grotnes wrote:

> I can't seem to find
> a PYTHONPATH anywhere, but since pydocgui.pyw runs fine, I'd like to
> believe that things has been installed well enough, this far.

PYTHONPATH is an environment variable. If you use a flavor of Windows
NT, you can set environment variables through a GUI by right-clicking on
"My Computer", selecting "Properties", then selecting the "Adanced" tab,
and then clicking the "Environment Variables" button (IIRC - this is
from memory). If you use something else, I'm not sure how you do it. :-)
(I think you have to edit autoexec.bat or something silly).

> Then I had my first head-scratcher. I've read most of what's available on
> the Twisted website, and downloaded the zipped version of the source and
> documentation. "Installing Twisted" told me that "If you are on Windows,
> you may want to skip this and simply get the Windows Installer version of
> Twisted from the download page." Since all I could find was the
> Twisted-0.19.0.zip, I expected that zip-file to be the one. Silly me...

Terribly sorry about this: I don't think there have been any .exe-style
installers for a few versions. I don't have the proper development
environment on Windows, and Glyph was doing them for a couple releases,
but he's far too busy to do it consistently. I'd really like to start
finding people to consistently delegate stuff like this to for new
releases (My release procedure is involved enough, and I'm lazy enough,
that I don't really want to add this extra work to it). So if anyone's
willing to consistently do this, I'd greatly appreciate it. :-) Also, if
anyone wants to maintain other packages  (RPMs? etc), please get in
touch with me. 

> again, then running another full test led to another failure removed. I
> think I'll leave the head-scratching over that strangeness to the pro's.

Ok, this is a known issue with threading on Win32. IIRC from listening
to the win32 hackers, it's one of those evil horrible things that makes
you really hate Microsoft and will take all amounts of effort to fix.
Anyway, it probably doesn't matter unless you need to use threading on
Win32. (Can someone else comment on this?)
 
> Still, I have had some of Twisted running! There's hope.

Thank you for the email! It's great to hear from newbies, especially
when they describe the pains and bugs that they've found in our
software. Hopefully by 1.0 Twisted will have a nice installation
experience on all platforms. :-)

--
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From jason at asbahr.com  Thu Jul 18 21:57:10 2002
From: jason at asbahr.com (Jason Asbahr)
Date: Thu, 18 Jul 2002 22:57:10 -0500
Subject: [Twisted-Python] OSCon
Message-ID: <99AF291C-9ACB-11D6-8942-000393753460@asbahr.com>

Curious --

Anyone else on the Twisted list going to the O'Reilly Open Source 
conference next week?

Cheers,

Jason




From nils at paragon.no  Thu Jul 18 22:40:56 2002
From: nils at paragon.no (Nils R Grotnes)
Date: Fri, 19 Jul 2002 06:40:56 +0200
Subject: [Twisted-Python] A newbie experience. Chapter one.
In-Reply-To: <1027044393.11249.22.camel@radii>
References: <200207180408440370.0009C43C@mail.c2i.net>
 <1027044393.11249.22.camel@radii>
Message-ID: <200207190640560120.000959CB@mail.c2i.net>

Hi again!

>> I can't seem to find a PYTHONPATH anywhere
>PYTHONPATH is an environment variable. If you use a flavor of Windows
>NT, you can set environment variables through a GUI by right-clicking on
>"My Computer", selecting "Properties", then selecting the "Adanced" tab,
>and then clicking the "Environment Variables" button (IIRC - this is
>from memory).

You have a good memory, then. I did do that in the end. An interesting
thing is that it seems this entry hasn't survived a reboot, but that may be
because I put it under "System variables", instead of "User variables".
I'll do some testing.

>> you may want to skip this and simply get the Windows Installer version
of
>> Twisted from the download page."
>Terribly sorry about this: I don't think there have been any .exe-style
>installers for a few versions.

Not to worry, setup.py must have done some good. I'm currently testing
different things for my next "chapter", but so far there's nothing to
complain about.

>finding people to consistently delegate stuff like this to for new
>releases (My release procedure is involved enough, and I'm lazy enough,
>that I don't really want to add this extra work to it). So if anyone's
>willing to consistently do this, I'd greatly appreciate it. :-)

I would like to, but can't promise much consistency I'm afraid.

>> again, then running another full test led to another failure removed.
>Ok, this is a known issue with threading on Win32.

Oh well. I wonder what they did to make things like MTS work with high
loads then? I'll keep the problem in mind though, and make some notes if I
stumble into useful information about this issue.

>Anyway, it probably doesn't matter unless you need to use threading on
>Win32. (Can someone else comment on this?)

A registry monitor I once tried to make, failed to work as intended because
of lack of threading support (in VB). Probably very easy to do in C though.
But doing things async (like in Medusa) should still work, right?
 
>> Still, I have had some of Twisted running! There's hope.
>Thank you for the email! It's great to hear from newbies, especially
>when they describe the pains and bugs that they've found in our
>software. Hopefully by 1.0 Twisted will have a nice installation
>experience on all platforms. :-)

If I can help in some small way with that, I'd be thrilled.

Nils





From carmstro at twistedmatrix.com  Thu Jul 18 23:17:31 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 19 Jul 2002 01:17:31 -0400
Subject: [Twisted-Python] API docs
Message-ID: <1027055868.11351.33.camel@radii>

I was talking to MetaCosm, and he said the template for API docs he uses
in his professional projects is like so:

"""
Usage:
   foo() -> baz

Examples:
   if blah(): foo()

Big Picture: (!!)
   This class is meant to be used in a Quuxer, and you should usually
override the getBaz method to return a Spam instance, although it's not
required.

NOTES:
  This class is currently in a state of flux; it will soon be
refactored, so watch out for API changes

"""

etc.

The main thing here is "Big Picture", which should give the method/class
some context. NOTES is mainly for temporary stuff; It's probably not
crucial to be in the docstrings (probably it should just be in near-by
#XXX comments). So yeah, I urge people who are writing docstrings to put
stuff into context; I'll try to do the same thing. Whether or not you
use a similar format isn't really important, but it seems sane enough to
me. We'll probably be doing a lot of this during the 0.99.0 cycle, but
it's never too early to start improving documentation :)

Anyway, enough rambling: off to bed with me.

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Thu Jul 18 23:50:08 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 19 Jul 2002 00:50:08 -0500 (CDT)
Subject: [Twisted-Python] unit tests
Message-ID: <20020719.005008.116349366.glyph@twistedmatrix.com>


On python2.1, cvs pycrypto and cvs twisted, I get a warning about HMAC not
being supported, and the unit test halt on twisted.conch tests
(testOurServerOurClient).

On python2.2 the tests seem to work fine.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020719/14717dcf/attachment.sig>

From martin at strakt.com  Fri Jul 19 03:21:14 2002
From: martin at strakt.com (Martin =?ISO-8859-1?Q?Sj=F6gren?=)
Date: 19 Jul 2002 11:21:14 +0200
Subject: [Twisted-Python] Problem in twisted.internet.tcp when using ssl
In-Reply-To: <3D2C4CEE.5080603@itamarst.org>
References: <1026312621.15179.7.camel@ratthing-b3cf> 
	<3D2C4CEE.5080603@itamarst.org>
Message-ID: <1027070474.709.89.camel@ratthing-b3cf>

ons 2002-07-10 klockan 17.04 skrev Itamar Shtull-Trauring:
> Martin Sjögren wrote:
> 
> > The writeSomeData method of Connection objects may sometimes be called
> > with a zero length buffer. This works fine when using plain TCP, but
> > when using ssl, this will cause a ZeroReturnError (which is completely
> > bogus!) and everything...well...blows up.
> 
> In the interest of not breaking anything which might possibly, however 
> unlikely, depend on tcp.py's behaviour, I've made this change in ssl.py. 
> So cvs up and tell me if it's ok now.

I've looked into this a bit more, and found the following in the man
page for write(2) on Solaris.

"""
If nbyte is 0, write() will  return  0  and  have  no  other
results  if  the  file  is  a  regular  file; otherwise, the
results are unspecified.
"""

My guess is that you would never want to call write or send with a
zero-length string if you want to be portable.


Regards,
Martin

-- 
Martin Sjögren
  martin at strakt.com              ICQ : 41245059
  Phone: +46 (0)31 7710870       Cell: +46 (0)739 169191
  GPG key: http://www.strakt.com/~martin/gpg.html



From m at moshez.org  Thu Jul 18 00:02:36 2002
From: m at moshez.org (Moshe Zadka)
Date: 18 Jul 2002 06:02:36 -0000
Subject: [Twisted-Python] fwd: Accepted twisted 0.19.0-1 (i386 source all)
Message-ID: <20020718060236.1430.qmail@green.zadka.com>

Rejoice!

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Format: 1.7
Date: Wed, 19 Jun 2002 18:01:50 +0300
Source: twisted
Binary: python2.2-twisted-bin python2.1-twisted python2.2-twisted python2.1-twisted-bin python-twisted twisted-doc
Architecture: source i386 all
Version: 0.19.0-1
Distribution: unstable
Urgency: low
Maintainer: Moshe Zadka <moshez at debian.org>
Changed-By: Moshe Zadka <moshez at debian.org>
Description: 
 python-twisted - Event-based framework for internet applications. (dummy package)
 python2.1-twisted - Event-based framework for internet applications. (Python 2.1)
 python2.1-twisted-bin - Event-based framework for internet applications
 python2.2-twisted - Event-based framework for internet applications.
 python2.2-twisted-bin - Event-based framework for internet applications
 twisted-doc - The official documentation of Twisted.
Changes: 
 twisted (0.19.0-1) unstable; urgency=low
 .
   * New upstream release
   * Debian packaging changes:
     * split python2.x-twisted into python2.x-twisted and python2.x-twisted-bin
     * unfortunately, because of distutils mind boggling stupidity, it will
       do most of the work for building the arch-independant utilities when
       building the c module
     * fortunately, twisted will now take up much less room in the archive
Files: 
 1e64952d32d00517872704330398b788 674 net extra twisted_0.19.0-1.dsc
 29c14719cf82ffe40b97e2a227de8e6f 1291330 net extra twisted_0.19.0.orig.tar.gz
 269010e99e0f252bd1e8685d3472e3d6 419 net extra twisted_0.19.0-1.diff.gz
 88be6f7da0921a88e4e9d72ab66cdd5b 603088 net extra twisted-doc_0.19.0-1_all.deb
 464fef292e3846313fe3f3ffb005f64d 4170 net extra python-twisted_0.19.0-1_all.deb
 4c0db37eb30a250761fb37a2cb485362 452866 net extra python2.1-twisted_0.19.0-1_all.deb
 68a6f5731596742821f07887ddba98cd 452514 net extra python2.2-twisted_0.19.0-1_i386.deb
 2c6cc82dc23bd372652e08e005032cd9 23132 net extra python2.1-twisted-bin_0.19.0-1_i386.deb
 987e9f68c1170736857b5ae4a668661d 24456 net extra python2.2-twisted-bin_0.19.0-1_i386.deb

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE9Ms1Bx/ymNkbQG9YRAst8AKDEebCfFfu1NyHuUGZ87oM3DJmetACgoS4x
0csvqeYWrNc86h4awHGgHcg=
=D15L
-----END PGP SIGNATURE-----


Accepted:
python-twisted_0.19.0-1_all.deb
  to pool/main/t/twisted/python-twisted_0.19.0-1_all.deb
python2.1-twisted-bin_0.19.0-1_i386.deb
  to pool/main/t/twisted/python2.1-twisted-bin_0.19.0-1_i386.deb
python2.1-twisted_0.19.0-1_all.deb
  to pool/main/t/twisted/python2.1-twisted_0.19.0-1_all.deb
python2.2-twisted-bin_0.19.0-1_i386.deb
  to pool/main/t/twisted/python2.2-twisted-bin_0.19.0-1_i386.deb
python2.2-twisted_0.19.0-1_i386.deb
  to pool/main/t/twisted/python2.2-twisted_0.19.0-1_i386.deb
twisted-doc_0.19.0-1_all.deb
  to pool/main/t/twisted/twisted-doc_0.19.0-1_all.deb
twisted_0.19.0-1.diff.gz
  to pool/main/t/twisted/twisted_0.19.0-1.diff.gz
twisted_0.19.0-1.dsc
  to pool/main/t/twisted/twisted_0.19.0-1.dsc
twisted_0.19.0.orig.tar.gz
  to pool/main/t/twisted/twisted_0.19.0.orig.tar.gz


-- 
To UNSUBSCRIBE, email to debian-devel-changes-request at lists.debian.org
with a subject of "unsubscribe". Trouble? Contact listmaster at lists.debian.org




From dmarko at digi-trade.cz  Fri Jul 19 01:51:58 2002
From: dmarko at digi-trade.cz (David Marko)
Date: Fri, 19 Jul 2002 09:51:58 +0200
Subject: [Twisted-Python] Portforward seems not work correctly
Message-ID: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain>

Hello,
I have tried to use portforward via 
mktap portforward -p 8090 -h 192.168.2.3 -d 80 
twistd -f portforward.tap

It starts and seems to listen but when trying  connect(with web browser) 
to forwarded port it seems to freeze, sometimes it show page but very 
slowly. Do I something wrong? Or is it inteded for some other purposes? I 
have tested this on WIn2000 and FreeBSD 4.5 with the same results.

David Marko
dmarko at tcl-digitrade.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020719/7a14dfa2/attachment.html>

From glyph at twistedmatrix.com  Fri Jul 19 04:42:10 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 19 Jul 2002 05:42:10 -0500 (CDT)
Subject: [Twisted-Python] Portforward seems not work correctly
In-Reply-To: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain>
Message-ID: <20020719.054210.74750890.glyph@twistedmatrix.com>


On Fri, 19 Jul 2002 09:51:58 +0200, "David Marko" <dmarko at digi-trade.cz> wrote:
> It starts and seems to listen but when trying  connect(with web browser) 
> to forwarded port it seems to freeze, sometimes it show page but very 
> slowly. Do I something wrong? Or is it inteded for some other purposes? I 
> have tested this on WIn2000 and FreeBSD 4.5 with the same results.

I know about this bug and I have a fix for it, although it's heavily hacked up
because I was working around MacOS X kernel bugs related to WebDAV at the time
(long story...)

I'll try to check in a fix soon.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020719/4132c974/attachment.sig>

From z3p at twistedmatrix.com  Fri Jul 19 06:29:11 2002
From: z3p at twistedmatrix.com (z3p at twistedmatrix.com)
Date: Fri, 19 Jul 2002 08:29:11 -0400
Subject: [Twisted-Python] unit tests
Message-ID: <238110-220027519122911259@M2W087.mail2web.com>

Yes, the HMAC module depends on Py2.2 because of changes in the hashing
modulues.  I sent a patch to amk, the pycrypto maintainer, so that will be
fixed in the next release.  If it's not in by the time I get to work, I'll
commit it to the pycrypto repository myself.
-p

Original Message:
-----------------
From: Glyph Lefkowitz glyph at twistedmatrix.com
Date: Fri, 19 Jul 2002 00:50:08 -0500 (CDT)
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] unit tests



On python2.1, cvs pycrypto and cvs twisted, I get a warning about HMAC not
being supported, and the unit test halt on twisted.conch tests
(testOurServerOurClient).

On python2.2 the tests seem to work fine.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |


--------------------------------------------------------------------
mail2web - Check your email from the web at
http://mail2web.com/ .





From arashi1 at pd.jaring.my  Fri Jul 19 06:18:01 2002
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Fri, 19 Jul 2002 20:18:01 +0800
Subject: [Twisted-Python] WebDAV?
In-Reply-To: <20020719.054210.74750890.glyph@twistedmatrix.com>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com>
Message-ID: <200207192018.01157.arashi1@pd.jaring.my>

On Friday 19 July 2002 18:42, Glyph Lefkowitz wrote:
>
> I know about this bug and I have a fix for it, although it's heavily hacked
> up because I was working around MacOS X kernel bugs related to WebDAV at
> the time (long story...)
>

You have webdav support in twisted too? I'm looking at the source (I've got 
0.19 'final') and I don't see webdav. Where is it?

btw. out of curiosity,
a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
"zopista"...what's a twisted enthusiast? "twista"?

-- 
Regards,
Mukhsein Johari



From arashi1 at pd.jaring.my  Fri Jul 19 07:04:05 2002
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Fri, 19 Jul 2002 21:04:05 +0800
Subject: [Twisted-Python] API docs - and examples
In-Reply-To: <1027055868.11351.33.camel@radii>
References: <1027055868.11351.33.camel@radii>
Message-ID: <200207192104.05786.arashi1@pd.jaring.my>

On Friday 19 July 2002 13:17, Christopher Armstrong wrote:
> I was talking to MetaCosm, and he said the template for API docs he uses
> in his professional projects is like so:
>
> """
> Usage:
>    foo() -> baz
>
> Examples:
>    if blah(): foo()
>
> Big Picture: (!!)
>    This class is meant to be used in a Quuxer, and you should usually
> override the getBaz method to return a Spam instance, although it's not
> required.
>
> NOTES:
>   This class is currently in a state of flux; it will soon be
> refactored, so watch out for API changes
>
> """
>
> etc.
>
> The main thing here is "Big Picture", which should give the method/class
> some context. NOTES is mainly for temporary stuff; It's probably not
> crucial to be in the docstrings (probably it should just be in near-by
> #XXX comments). So yeah, I urge people who are writing docstrings to put
> stuff into context; I'll try to do the same thing. Whether or not you
> use a similar format isn't really important, but it seems sane enough to
> me. We'll probably be doing a lot of this during the 0.99.0 cycle, but
> it's never too early to start improving documentation :)
>

Yes, I fully agree here! Without the big picture it is difficult to determine 
the contexts of all modules and classes - especially for newbie "twistas". 
Also, we need some contextual examples in the api docs itself. A full blown 
example should be (and generally is)  found in doc/examples.

Speaking of examples, could the author of the examples please add comments and 
some explanations of the examples? I'm sure it's all quite obvious to the 
author but for newbies, it's a bit too terse. Especially when your head is 
till spinning with banana spreads and the like. Jelly? What _is_ twistd? 
Should there be only one twistd running with multiple "protocol handlers" or 
one twistd running per protocol?

With some of the examples, I find myself saying: "What? That's it? It can't be 
that simple! Am I missing something?" Some explanations in the code 
(comments) would go a long way to solving this.

Doc problems:
---------------
Some of the newer documentation is quite good in the sense that it hints at a 
lot but its a bit confusing. The stuff about web-widgets and dom 
templates...It's starts out really great but ends before it should! :-)

The widgets.html doc for example. It says that the code in the Example.tar.gz 
explains why you get "No Resource" error when you first start it up. Erm...I 
looked at the code and no where does it say why. And what to do afterwards. I 
still don't understand how web-widgets work! Where do you then point the 
browser?

Also, what's a reactor? Is there some other doc to explain the concept of 
reactors? Would you use defereds in a web application? When and why?

As you can see, there are problems with the docs. I understand the main 
twistas are too busy (insane is more appropriate!) with twisted itself, to 
write more docs. Honestly, I would _love_ to write some docs, tutorials and 
howtos, if only I could understand the thing myself!

-- 
Regards,
Mukhsein Johari



From twisted at itamarst.org  Fri Jul 19 07:00:16 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 19 Jul 2002 09:00:16 -0400
Subject: [Twisted-Python] unit tests
References: <20020719.005008.116349366.glyph@twistedmatrix.com>
Message-ID: <3D380D60.4080603@itamarst.org>

Glyph Lefkowitz wrote:

> On python2.1, cvs pycrypto and cvs twisted, I get a warning about HMAC not
> being supported, and the unit test halt on twisted.conch tests
> (testOurServerOurClient).

hmac only works in 2.2. Paul has, I think, submitted patches to pycrypto 
to make
it work in 2.1 as well.





From bruce at cubik.org  Fri Jul 19 07:17:46 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Fri, 19 Jul 2002 07:17:46 -0600
Subject: [Twisted-Python] API docs - and examples
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my>
Message-ID: <3D38117A.5090300@cubik.org>

Mukhsein Johari wrote:
> Also, what's a reactor? Is there some other doc to explain the concept of 
> reactors?

There's a start of a doc for this in CVS as doc/howto/reactor-basics.html

I have a version of the docs from CVS online that I use for proofreading 
as I edit and so on, so you can view that doc from there:

   http://day.cubik.org/~bruce/tmc/documents/howto/reactor-basics

It needs to improve and cover a lot more, but it is a start.

  - Bruce




From carmstro at twistedmatrix.com  Fri Jul 19 07:16:48 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 19 Jul 2002 08:16:48 -0500
Subject: [Twisted-Python] WebDAV?
In-Reply-To: <200207192018.01157.arashi1@pd.jaring.my>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com> <200207192018.01157.arashi1@pd.jaring.my>
Message-ID: <20020719131648.GA24650@twistedmatrix.com>

On Fri, Jul 19, 2002 at 08:18:01PM +0800, Mukhsein Johari wrote:
> btw. out of curiosity,
> a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
> "zopista"...what's a twisted enthusiast? "twista"?

twisted.minion. :-)




From glyph at twistedmatrix.com  Fri Jul 19 08:01:34 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 19 Jul 2002 09:01:34 -0500 (CDT)
Subject: [Twisted-Python] WebDAV?
In-Reply-To: <200207192018.01157.arashi1@pd.jaring.my>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain>
	<20020719.054210.74750890.glyph@twistedmatrix.com>
	<200207192018.01157.arashi1@pd.jaring.my>
Message-ID: <20020719.090134.23012115.glyph@twistedmatrix.com>


On Fri, 19 Jul 2002 20:18:01 +0800, Mukhsein Johari <arashi1 at pd.jaring.my> wrote:

> You have webdav support in twisted too? I'm looking at the source (I've got 
> 0.19 'final') and I don't see webdav. Where is it?

Right now, nowhere.  One day I might check something in, but currently I have
nothing but some grotty, nasty debugging tools to help me figure out what a
working WebDAV server sends to a working WebDAV client; the only thing that
I've proven so far is that the term "working" is *very* loosely applied in both
of those phrases.

> btw. out of curiosity,
> a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
> "zopista"...what's a twisted enthusiast? "twista"?

The most frequently applied term I've heard is "twister".  I'd sure like to
have occasion to need a term which refers to someone who is a Twisted
enthusiast who isn't directly on the development team ;-).

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020719/83eff8df/attachment.sig>

From glyph at twistedmatrix.com  Fri Jul 19 08:04:28 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 19 Jul 2002 09:04:28 -0500 (CDT)
Subject: [Twisted-Python] WebDAV?
In-Reply-To: <20020719131648.GA24650@twistedmatrix.com>
References: <20020719.054210.74750890.glyph@twistedmatrix.com>
	<200207192018.01157.arashi1@pd.jaring.my>
	<20020719131648.GA24650@twistedmatrix.com>
Message-ID: <20020719.090428.99206071.glyph@twistedmatrix.com>


On Fri, 19 Jul 2002 08:16:48 -0500, Chris Armstrong <carmstro at twistedmatrix.com> wrote:
> > [snip "what do we call people who like twisted?"]
> twisted.minion. :-)

This may have more to do with the fact that I'm gathering an eccentric cult of
personality almost as fast as Twisted is acquiring new enthusiasts.  Not that
understanding Twisted *requires* a fanatic, dogged analyisis of my personal
life... but it helps.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020719/cbc9ec88/attachment.sig>

From twisted at itamarst.org  Fri Jul 19 07:58:51 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 19 Jul 2002 09:58:51 -0400
Subject: [Twisted-Python] Problem in twisted.internet.tcp when using ssl
References: <1026312621.15179.7.camel@ratthing-b3cf> 	<3D2C4CEE.5080603@itamarst.org> <1027070474.709.89.camel@ratthing-b3cf>
Message-ID: <3D381B1B.60700@itamarst.org>

Martin Sjögren wrote:

> I've looked into this a bit more, and found the following in the man
> page for write(2) on Solaris.
> 
> """
> If nbyte is 0, write() will  return  0  and  have  no  other
> results  if  the  file  is  a  regular  file; otherwise, the
> results are unspecified.

Well, we're using send(2), as far as I know, not write(2) - and the man 
pages for send(2) don't say anything about 0 length messages.




From glyph at twistedmatrix.com  Fri Jul 19 08:40:00 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 19 Jul 2002 09:40:00 -0500 (CDT)
Subject: [Twisted-Python] API docs - and examples
In-Reply-To: <200207192104.05786.arashi1@pd.jaring.my>
References: <1027055868.11351.33.camel@radii>
	<200207192104.05786.arashi1@pd.jaring.my>
Message-ID: <20020719.094000.00927315.glyph@twistedmatrix.com>

On Fri, 19 Jul 2002 21:04:05 +0800, Mukhsein Johari <arashi1 at pd.jaring.my> wrote:
> On Friday 19 July 2002 13:17, Christopher Armstrong wrote:
> > I was talking to MetaCosm, and he said the template for API docs he uses
> > in his professional projects is like so:

> > The main thing here is "Big Picture", which should give the method/class
> > some context. NOTES is mainly for temporary stuff; It's probably not
> > crucial to be in the docstrings (probably it should just be in near-by
> > #XXX comments). So yeah, I urge people who are writing docstrings to put
> > stuff into context; I'll try to do the same thing. Whether or not you
> > use a similar format isn't really important, but it seems sane enough to
> > me. We'll probably be doing a lot of this during the 0.99.0 cycle, but
> > it's never too early to start improving documentation :)

Does epydoc support @rationale or something?  That would be handy. :)

"Big picture" stuff should probably also have its own directory in the doc/
tree too -- most other projects have a doc/design/ (or similar) which describes
things like this.  My tragic allergy to formal process has prevented me from
doing enough of this so far; however, now that the cognitive dust has started
to settle, I think that I could venture in and write some design documentation.

I don't think this is really important in the 1.0 release process or the other
things I'm working on at the moment, so it will have to wait a little while.
Is it important to do soon?  Remember also that queries that show me which
internal design ideas are blatantly obvious and which require some more
elucidation are helpful in prioritizing them.

> Yes, I fully agree here! Without the big picture it is difficult to determine 
> the contexts of all modules and classes - especially for newbie "twistas". 
> Also, we need some contextual examples in the api docs itself. A full blown 
> example should be (and generally is)  found in doc/examples.

doc/howto/listings is a better-documented source of that sort of thing.

> Speaking of examples, could the author of the examples please add comments and 
> some explanations of the examples?

In general a good idea, but just in case anybody who wants to check in docs is
listening, I'll respond to your particular questions...

> Jelly?

    http://twistedmatrix.com/products/spread

Anything more specific you need to know?

> What _is_ twistd?

Wow.  I was pretty surprised to find that there is no quick answer to this
question so I'll write one here :-).

'twistd' is the Twisted Daemon.  It is a simple tool designed in a UNIX and
command-line friendly way; however, it is portable to many environments
(including Win32, and even Jython!).  twistd can be used to load multiple
formats (pickle, marmalade XML, "AOT" python source) of serialized twisted
application objects and run them.  Most persistent processes in Twisted are run
using the 'twistd' script.  The notable exception to this rule is currently
graphical client programs.

The "big picture" here is that in the future, twistd may have graphical or
other platform-specific cousins which are designed to work with a particular
toolkit or host operating system.  For example, a gtk-specific mainpoint, or a
win32 service GUI which generalizes some tasks.  My goal is that eventually
_all_ Twisted-ly correct programs will be able to plug in to multiple
main-points that are appropriate to different situations.  (My short term
incentive for this is I want a GladeReactor which displays in an open window
all the open connections and some brief statistics on them in real-time; this
would be useful for debugging certain kinds of application.)

> Should there be only one twistd running with multiple "protocol handlers" or
> one twistd running per protocol?

This *really* depends on your application and your site.  In general, if you're
using twistd, you want either

  1. only one port (in this case, normally PB or HTTP) open, accessing different services
  2. multiple ports (SMTP, POP3, DNS...) open, integrating with the same service
  3. some combination of 1. and 2.

I imagine that the most common case is 3., with 1. running a close second.
Even in the case of 1., you generally want to communicate with *other* web or
PB servers, over either web.distrib or twisted.sister.

In some cases, I just use twisted for the one protocol/one process/one service
model; but that's just because I know it well, it's installed on all my
hardware, and it takes about an eighth of a second to configure a new webserver
that does what I need for a particular box ;-).

> With some of the examples, I find myself saying: "What? That's it? It can't be 
> that simple! Am I missing something?" Some explanations in the code 
> (comments) would go a long way to solving this.

No really, it is that simple.

> Some of the newer documentation is quite good in the sense that it hints at a
> lot but its a bit confusing. The stuff about web-widgets and dom
> templates...It's starts out really great but ends before it should! :-)

We're working on it, but thanks for the feedback!  There has been a big push
for more documentation recently, as Twisted is starting to see more general
applicability and some of the important, core APIs are nearing finalization.
We're not quite there yet.

> The widgets.html doc for example. [...]

Widgets is getting slowly deprecated in favor of the new domtemplate stuff.
(In many ways, they do the same thing.)  It still remains to be seen whether
widgets still has some usefulness beyond what the domtemplate/domwidgets
approach has brought; I am going to be working with the web stuff very soon and
I hope to verify this, and make a device-independent version of
web.widgets.Form (and renderers for the various DOM stuff) before completely
deprecating web.widgets.

> Also, what's a reactor? Is there some other doc to explain the concept of
> reactors?

Among others,

    http://www.cs.vu.nl/~eliens/online/oo/I/2/reactor.html

I agree that Twisted needs its own doc, but the Twisted "Reactor" interfaces
are based around the (relatively) well-known design pattern for event handling.
You shouldn't have to worry too much about the Reactor if you're writing an
application using Twisted's high-level facilities.

> Would you use deferreds in a web application? When and why?

Yes.

When: If you have a web application that needs to do anything that will take a little
while and/or require some network communication, Deferreds are the preferred
way to do this in Twisted.

Why: twisted.web.widgets and twisted.web.domtemplate (and therefore, I believe,
domwidgets, though I'm not absolutely sure...) will handle a Deferred as a
return value and Do The Right Thing.  So we make it nice and convenient for
you; the added benefit of this is that your web application doesn't have to
worry about managing lock contention or thread pools.

Things like twisted.enterprise.adbapi, meant to do potentially long-running,
blocking operations, will typically return a deferred, making it even easier to
take advantage of the convenience in the twisted.web deferred handling.

> As you can see, there are problems with the docs. I understand the main 
> twistas are too busy (insane is more appropriate!) with twisted itself, to 
> write more docs.

Insane is right.  I can't even keep up with the commits list myself any more.

> Honestly, I would _love_ to write some docs, tutorials and howtos, if only I
> could understand the thing myself!

Keep these great questions coming, they help.  At least we could point other
newbies at the mailing list archive after they've been answered.  It would be
an even bigger help if you could organize some of the answers and submit them
as docs.

Hope this helps,

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020719/7a3e6da8/attachment.sig>

From levi at gis.net  Fri Jul 19 13:53:43 2002
From: levi at gis.net (Levi)
Date: Fri, 19 Jul 2002 15:53:43 -0400
Subject: [Twisted-Python] Re: Offtopic "Twista" (was WebDAV?)
In-Reply-To: <200207192018.01157.arashi1@pd.jaring.my>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com> <200207192018.01157.arashi1@pd.jaring.my>
Message-ID: <20020719195343.GA2586@pest>

On Fri, Jul 19, 2002 at 08:18:01PM +0800, Mukhsein Johari wrote:
> a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
> "zopista"...what's a twisted enthusiast? "twista"?

As an Amature Linguist and Hacker, I couldn't resist...

It's not always that easy. A Linux enthusiast is a "Penguista", which
I belive is the origin of Hackish usage of the '-sta' or '-ista' suffix. Also
note that "Penguista" strips the final consonat, but the other (and, I belive,
later) examples don't. I've also seen "Penguinista", but I think that's just
retconning to match the others (in that case it really ought to be
"Linuxista").

"Twista" is fun in that it can be claimed to be derived from either:
1) A not too unusual pronouciation of "Twister". A twister, being litealy
one-who-twists, is one of the people that "twist" python to produce
"Twisted Python".
2) The -ista suffix, placed so that the "ist" parts overlap. This has the
effect of nuking the last sylable. Both of which appear to be true to
"Penguista", in wich the "sta" apperares following the orignal "i", and the
final "n" is lost. (Maby losing a whole sylable makes up for the other not
losing any letters).

-Levi



From carmstro at twistedmatrix.com  Fri Jul 19 14:11:36 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 19 Jul 2002 15:11:36 -0500
Subject: [Twisted-Python] Re: Offtopic "Twista" (was WebDAV?)
In-Reply-To: <20020719195343.GA2586@pest>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com> <200207192018.01157.arashi1@pd.jaring.my> <20020719195343.GA2586@pest>
Message-ID: <20020719201136.GA13375@twistedmatrix.com>

On Fri, Jul 19, 2002 at 03:53:43PM -0400, Levi wrote:
> On Fri, Jul 19, 2002 at 08:18:01PM +0800, Mukhsein Johari wrote:
> > a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
> > "zopista"...what's a twisted enthusiast? "twista"?

> "Twista" is fun in that it can be claimed to be derived from either:
> 1) A not too unusual pronouciation of "Twister". A twister, being litealy
> one-who-twists, is one of the people that "twist" python to produce
> "Twisted Python".

Being the semi-official "Twista"-who-corrects-usage-of-the-old-Twisted-name, I
must inform you that Twisted is no longe "Twisted Python", but simply
"Twisted".

Thank you, and have a nice day.




From steve.waterbury at gsfc.nasa.gov  Fri Jul 19 15:00:35 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Fri, 19 Jul 2002 17:00:35 -0400
Subject: [Twisted-Python] More newbie questions [apologies for the length!]
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain>
		<20020719.054210.74750890.glyph@twistedmatrix.com>
		<200207192018.01157.arashi1@pd.jaring.my> <20020719.090134.23012115.glyph@twistedmatrix.com>
Message-ID: <3D387DF3.CA37962D@gsfc.nasa.gov>

Glyph Lefkowitz wrote:

> The most frequently applied term I've heard is "twister".  I'd sure like to
> have occasion to need a term which refers to someone who is a Twisted
> enthusiast who isn't directly on the development team ;-).

How about "twistor" (resonates with the Twistors theory (physics)
of Roger Penrose et al. :^) or "twisties"?  (The "-ies" carries 
some of the cult-y flavor ... :^)  

So far, I've only done some simple experiments with twisted web and 
twisted enterprise, but even just from that and reading the docs, I 
can already see that twisted rocks!  IMO it's by far the 
most advanced, most flexible, and best architected application 
framework in the Python world (which is the only language I would 
consider using for our application -- which BTW has nothing to do 
with twistors ... ;^).  

Thanks for the recently-added tutorial on Twisted Plugins; 
very cool!  Need more ... (see the following ... :^)  

Context:  the application we're developing is a "collaborative 
engineering environment", to include a repository, data 
transformation engine, multiprotocol communications hub, 
set of api's, and a gui client for browsing data and integrating 
desktop tools.  Not all that different from a multi-player game, 
so twisted fits the paradigm to a tee -- as soon as I read the 
ipc10paper, I knew that if twisted was half as good as it 
sounded on paper, it could provide most if not all of the 
infrastructure we need right out of the box.  

Twisted has allowed me to consider implementing some advanced 
features sooner that I had anticipated, like replicating the 
communications hub within the thick gui client (a wxPython app 
with a ZODB local object cache), so that for a power user, 
the client could be configured as essentially a peer to the 
server nodes, but also support very simple interfaces (web 
browser-based or very thin clients) for users with simple 
perspectives.  We have a prototype client, but haven't even 
begun to integrate twisted into it yet -- I'll ask questions 
about that later, like integrating the twisted event loop 
with wxPython's, which could be really nice.  

I had already selected PostgreSQL for the repository database, 
so twisted.enterprise is perfect, and trying out the example 
gave me the impression that it will be quite easy to work 
with.  

One thing I need to implement quickly is efficient support 
for "perspectives" (views with role-based access), so I'd like 
to get a little more documentation or somewhat better examples 
for how that is done with twisted.  I would love to have an 
example that would illustrate something like the following:

* Each user is assigned one or more roles.  Each role will 
carry some set of permissions relative to objects and functions 
in the system.  As I understand cred, a user is subclassed from 
Perspective, which maps to a "user-with-roles", I think.  My 
initial idea is to have a "mask" assigned to each object that 
needs view-sensitivity, and whether that object is accessible and 
how is determined by comparing the user's (Perspective's) role 
mask to the masks of the objects that would be operated on by 
the user's request.  Is this an appropriate concept to map to 
the twisted framework (from what I've read, it would involve 
cred and Perspective Broker)?  And if so, how?  Or if not, what 
would be the correct approach?  

* Speaking in terms of the role thing a bit further, some roles 
would be standardized, with pre-defined permissions like 
"read-only permission for all projects and create/mod permission for 
object type X on project Z."  But we also need to enable certain 
admin or project leader roles to create customized roles for 
their projects, etc.  How does this map?  

* I'd like to maintain the state of each user-with-roles in 
the PostgreSQL repository (syncing as necessary across thick 
clients and replicated servers, as was suggested on the list 
recently), and use hashed passwords over SSL.  I'm sure from 
what I've read that cred either supports this or will soon, 
but I'd like to get more info on how to implement it.  

Gotta go now ... will send more questions soon.  Thanks again 
for a truly awesome piece of work!  

Cheers,
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html



From andrew-twisted at puzzling.org  Sun Jul 21 22:57:32 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 22 Jul 2002 14:57:32 +1000
Subject: [Twisted-Python] reactor.running?
Message-ID: <20020722045732.GA23028@ritsuko.xware.cx>

One thing that seems to be missing since the move to reactors is
twisted.internet.main.running -- a flag you can check to see if the
reactor is running or not.

I notice that at least the default reactor has a .running attribute.
Should I use this?  Should it be documented?

I suspect that I actually want a different solution to my problem.
Here's the situation:  I have called clientTCP to connect a Protocol to
a remote server.  I want the ClientFactory to *not* start a new protocol
if the reactor is shutting down (which it currently does, because the
shutdown process closes the connected Protocol, triggering a
reconnect...).

Thoughts?

-Andrew.




From mikebannister at go.com  Mon Jul 22 01:16:59 2002
From: mikebannister at go.com (mike bannister)
Date: Mon, 22 Jul 2002 00:16:59 -0700 (PDT)
Subject: [Twisted-Python] possible documentation inaccuracy
Message-ID: <3445702.1027322219495.JavaMail.mikebannister@gomailjtp01>

Hello, I'm a fairly experienced python programmer (~3 years) but I am a one week old twisted user. 

There's a passage in the coding standard documentation that is giving me some trouble. It's quite possible I am just confused in which case I hope that someone can straighten me out but the alternative is either an inaccuracy or a need for rewording the passage in question exists.

The document is located here: http://twistedmatrix.com/documents/howto/coding-standard

Under the classes sub-heading the end of the first blurb reads:

"Class names should not include the name of the module they are a part of. Examples:"

and a list follows. Without looking at the list the above sentence already seems slightly ambiguous to me. Am I about to see a list of examples that meet the above criterion or fail to? 

My next problem is when I do look at the list my above question remains. If I assume it's a list of proper naming examples then the first item (twisted.reality.thing.Thing) wouldn't be right. Right? The class name (Thing) includes the name of the module (thing). If I assume it's a list of incorrect naming examples then the second item (twisted.web.Handler) would be a problem because the class name (Handler) doesn't include the package name (web) making it an example of proper naming.

Am I way off here? 

Thanks in advance if you can offer any help/info.

Mike Bannister

___________________________________________________
GO.com Mail                                    
Get Your Free, Private E-mail at http://mail.go.com





From twisted at itamarst.org  Mon Jul 22 07:18:24 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 22 Jul 2002 09:18:24 -0400
Subject: [Twisted-Python] reactor.running?
References: <20020722045732.GA23028@ritsuko.xware.cx>
Message-ID: <3D3C0620.5020505@itamarst.org>

Andrew Bennetts wrote:

> I notice that at least the default reactor has a .running attribute.
> Should I use this?  Should it be documented?

Don't use it. If it's important maybe we should a isRunning() method to the API.

> I suspect that I actually want a different solution to my problem.
> Here's the situation:  I have called clientTCP to connect a Protocol to
> a remote server.  I want the ClientFactory to *not* start a new protocol
> if the reactor is shutting down (which it currently does, because the
> shutdown process closes the connected Protocol, triggering a
> reconnect...).

I'll take this as a use case for the client TCP refactor.h




From carmstro at twistedmatrix.com  Mon Jul 22 10:10:38 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 22 Jul 2002 12:10:38 -0400
Subject: [Twisted-Python] possible documentation inaccuracy
In-Reply-To: <3445702.1027322219495.JavaMail.mikebannister@gomailjtp01>
References: <3445702.1027322219495.JavaMail.mikebannister@gomailjtp01>
Message-ID: <1027354239.1019.4.camel@radii>

On Mon, 2002-07-22 at 03:16, mike bannister wrote:
> "Class names should not include the name of the module they are a 
> part of. Examples:"

This means you shouldn't compound the module name with the class name,
i.e., module.ModuleClass.

> and a list follows. Without looking at the list the above sentence 
> already seems slightly ambiguous to me. Am I about to see a list of
> examples that meet the above criterion or fail to? 

Those are good class names, fully qualified with their module.

> My next problem is when I do look at the list my above question 
> remains. If I assume it's a list of proper naming examples then the
> first item (twisted.reality.thing.Thing) wouldn't be right. Right? 
> The class name (Thing) includes the name of the module (thing). If I
> assume it's a list of incorrect naming examples then the second item
> (twisted.web.Handler) would be a problem because the class name
> (Handler) doesn't include the package name (web) making it an example
> of proper naming.

thing.Thing is arguably bad naming, but the point is that it's not a
compound of the module name and the class name.

Anyway, I'll update that doc to be more clear.

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From a.d.stribblehill at durham.ac.uk  Tue Jul 23 02:17:42 2002
From: a.d.stribblehill at durham.ac.uk (Andrew Stribblehill)
Date: Tue, 23 Jul 2002 09:17:42 +0100
Subject: [Twisted-Python] Re: Offtopic "Twista" (was WebDAV?)
In-Reply-To: <20020719201136.GA13375@twistedmatrix.com>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com> <200207192018.01157.arashi1@pd.jaring.my> <20020719195343.GA2586@pest> <20020719201136.GA13375@twistedmatrix.com>
Message-ID: <20020723081742.GF25399@womble.dur.ac.uk>

Quoting Christopher Armstrong <carmstro at twistedmatrix.com> (2002-07-19 09:11:36 BST):
> On Fri, Jul 19, 2002 at 03:53:43PM -0400, Levi wrote:
> > On Fri, Jul 19, 2002 at 08:18:01PM +0800, Mukhsein Johari wrote:
> > > a python programmer and enthusiast is a "pythonista", a zope enthusiast is a 
> > > "zopista"...what's a twisted enthusiast? "twista"?
> 
> > "Twista" is fun in that it can be claimed to be derived from either:
> > 1) A not too unusual pronouciation of "Twister". A twister, being litealy
> > one-who-twists, is one of the people that "twist" python to produce
> > "Twisted Python".
> 
> Being the semi-official "Twista"-who-corrects-usage-of-the-old-Twisted-name, I
> must inform you that Twisted is no longe "Twisted Python", but simply
> "Twisted".

...and to reflect that, the Debian package has been renamed from
'twisted' to 'python-twisted-*' :)

-- 
THAMES DOVER WIGHT PORTLAND PLYMOUTH
SOUTHWEST VEERING NORTHWEST 4 OR 5, INCREASING 6, OCCASIONALLY 7 FOR
A TIME. SHOWERS. MODERATE OR GOOD



From carmstro at twistedmatrix.com  Tue Jul 23 06:07:14 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Tue, 23 Jul 2002 07:07:14 -0500
Subject: [Twisted-Python] Re: Offtopic "Twista" (was WebDAV?)
In-Reply-To: <20020723081742.GF25399@womble.dur.ac.uk>
References: <OF4873A47B.55C690A5-ONC1256BFB.002A6050-C1256BFB.002B360C@LocalDomain> <20020719.054210.74750890.glyph@twistedmatrix.com> <200207192018.01157.arashi1@pd.jaring.my> <20020719195343.GA2586@pest> <20020719201136.GA13375@twistedmatrix.com> <20020723081742.GF25399@womble.dur.ac.uk>
Message-ID: <20020723120714.GA13100@twistedmatrix.com>

On Tue, Jul 23, 2002 at 09:17:42AM +0100, Andrew Stribblehill wrote:
> Quoting Christopher Armstrong <carmstro at twistedmatrix.com> (2002-07-19 09:11:36 BST):
> > Being the semi-official "Twista"-who-corrects-usage-of-the-old-Twisted-name, I
> > must inform you that Twisted is no longe "Twisted Python", but simply
> > "Twisted".
> 
> ...and to reflect that, the Debian package has been renamed from
> 'twisted' to 'python-twisted-*' :)

That's policy for Python libraries in Debian. :P



From glyph at twistedmatrix.com  Tue Jul 23 07:48:21 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 23 Jul 2002 08:48:21 -0500 (CDT)
Subject: [Twisted-Python] Re: Offtopic "Twista"
In-Reply-To: <20020723120714.GA13100@twistedmatrix.com>
References: <20020719201136.GA13375@twistedmatrix.com>
	<20020723081742.GF25399@womble.dur.ac.uk>
	<20020723120714.GA13100@twistedmatrix.com>
Message-ID: <20020723.084821.25908987.glyph@twistedmatrix.com>


On Tue, 23 Jul 2002 07:07:14 -0500, Chris Armstrong <carmstro at twistedmatrix.com> wrote:
> On Tue, Jul 23, 2002 at 09:17:42AM +0100, Andrew Stribblehill wrote:
> > 
> > ...and to reflect that, the Debian package has been renamed from
> > 'twisted' to 'python-twisted-*' :)
> 
> That's policy for Python libraries in Debian. :P

Nevertheless, Zope is "zope".

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020723/042a40f6/attachment.sig>

From martin at strakt.com  Tue Jul 23 08:21:12 2002
From: martin at strakt.com (Martin =?ISO-8859-1?Q?Sj=F6gren?=)
Date: 23 Jul 2002 16:21:12 +0200
Subject: [Twisted-Python] Re: Offtopic "Twista"
In-Reply-To: <20020723.084821.25908987.glyph@twistedmatrix.com>
References: <20020719201136.GA13375@twistedmatrix.com>
	<20020723081742.GF25399@womble.dur.ac.uk>
	<20020723120714.GA13100@twistedmatrix.com> 
	<20020723.084821.25908987.glyph@twistedmatrix.com>
Message-ID: <1027434072.27522.4.camel@ratthing-b3cf>

tis 2002-07-23 klockan 15.48 skrev Glyph Lefkowitz:
> 
> On Tue, 23 Jul 2002 07:07:14 -0500, Chris Armstrong <carmstro at twistedmatrix.com> wrote:
> > On Tue, Jul 23, 2002 at 09:17:42AM +0100, Andrew Stribblehill wrote:
> > > 
> > > ...and to reflect that, the Debian package has been renamed from
> > > 'twisted' to 'python-twisted-*' :)
> > 
> > That's policy for Python libraries in Debian. :P
> 
> Nevertheless, Zope is "zope".

First of all, I'm pretty sure it's not official policy yet. Second, it's
much more important to do this for libraries that you do "import foo"
on, than a big application written in Python that you happen to use. For
an application, it doesn't matter to you if it uses python2.1 or
python2.2 as long as it works. The pythonX-foo naming scheme comes from
a need to have libraries for several versions of python.


Martin

-- 
Martin Sjögren
  martin at strakt.com              ICQ : 41245059
  Phone: +46 (0)31 7710870       Cell: +46 (0)739 169191
  GPG key: http://www.strakt.com/~martin/gpg.html



From carmstro at twistedmatrix.com  Tue Jul 23 11:44:46 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 23 Jul 2002 12:44:46 -0500
Subject: [Twisted-Python] Python 1.5
Message-ID: <20020723174446.GA27631@twistedmatrix.com>

What's the deal with 1.5.2 compatibility? For a while, it was understood (at
least in the IRC clique) that we would be getting rid of it as soon as Woody
came out. Is this still true? Personally, I think it's high time we switch
to 2.1. Who wants to stay with 1.5.2?




From twisted at itamarst.org  Tue Jul 23 11:50:51 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 23 Jul 2002 13:50:51 -0400
Subject: [Twisted-Python] Python 1.5
References: <20020723174446.GA27631@twistedmatrix.com>
Message-ID: <3D3D977B.70302@itamarst.org>

Christopher Armstrong wrote:

> What's the deal with 1.5.2 compatibility? For a while, it was understood (at
> least in the IRC clique) that we would be getting rid of it as soon as Woody
> came out. Is this still true? Personally, I think it's high time we switch
> to 2.1. Who wants to stay with 1.5.2?

Not I. Unless someone is willing to pay us a lot of money and requires 1.5.2 
support.




From twisted at itamarst.org  Tue Jul 23 16:46:19 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 23 Jul 2002 18:46:19 -0400
Subject: [Twisted-Python] Theo de Ridder's Proof Chamber
Message-ID: <3D3DDCBB.5020409@itamarst.org>

IIRC, this guy talked to alan and glyph at IPC10 about python syntax for 
XML, and maybe other stuff too. He has a lot of cool, crazy ideas :)

Anyway, this testing framework sounded interesting - he talked about it a 
bit at europython:

http://sc-archive.codesourcery.com/entries/test/ProofChamber/ProofChamber.html




From zooko at zooko.com  Tue Jul 23 23:24:41 2002
From: zooko at zooko.com (Zooko)
Date: Wed, 24 Jul 2002 02:24:41 -0300
Subject: [Twisted-Python] AFactory
Message-ID: <E17XEdd-0007ZG-00@localhost>

Folks:

In writing my Gnutella for Twisted implementation, which I have named "Zoot", 
I encountered what seems to be a bit of a weakness in the current "Factory"
API.  This occurred when I wanted each protocol instance to have a reference to
my Zoot object (the Zoot object contains the Gnutella logic for such operations
as routing a message from one connection to another).

The way to do this is to make a subclass of Factory, which I called
ZootFactory.  ZootFactory gets a reference to the Zoot object when it
(ZootFactory) is constructed.  Then ZootFactory's `buildProtocol()' method
looks like this:

class ZootFactory(Factory):
    def __init__(self, zoot):
        Factory.__init__(self)
        self.zoot = zoot

    def buildProtocol(self, addr):
        p = Factory.buildProtocol(self, addr)
        p.zoot = self.zoot
        return p

It occurred to me that this idiom is probably useful to other developers of
applications on top of Twisted, and it is trivial to generalize it.  I defined
class AFactory, like this:

class AFactory(Factory):
    def __init__(self, protocol, application=None):
        self.protocol = protocol
        self.application = application

    def buildProtocol(self, addr):
        p = Factory.buildProtocol(self, addr)
        p.application = self.application
        return p

You can see it through viewcvs at:
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/zoot/AFactory.py?rev=HEAD&content-type=text/vnd.viewcvs-markup&cvsroot=Twisted

My `updateApplication()' function in zoottap.py is now reduced to a nice
simple:

def updateApplication(app, config):
    f = AFactory(GnutellaTalker, Zoot())
    app.listenTCP(int(config["port"]), f)


I suggest that twisted.internet.protocol.Factory should be changed to do what
AFactory does, making it so that my `updateApplication()' could use the
standard Factory instead of AFactory.  I think it would be a
backward-compatible change to Factory which doesn't require other users of
Factory to change.

Regards,

Zooko

http://zooko.com/




From kkennedy at kenzoid.com  Tue Jul 23 17:43:48 2002
From: kkennedy at kenzoid.com (Ken Kennedy)
Date: Tue, 23 Jul 2002 19:43:48 -0400
Subject: [Twisted-Python] [PATCH] domhelpers.py
Message-ID: <20020723234348.GA3131@orcrist.kenzoid.com>

I've been working on porting the blog example to the new 0.19
DOMTemplate format, as an opportunity to play with some Twisted
code. In doing so, I think I've found this big, bad single-line, 5
character patch for domhelpers.py. Patch is attached. AFAICT, this is
correct; I'll admit, though, I'm a python journeyman at best, so I may
have mis-fixed.

Also, I should be finished with the blog example in a day or two...is
there interest in replacing the old-style one? If so, where should I
send the code? After finishing the straight port, I'm going to look at
implementing some authorization via Twisted Cred; I'm trying to decide
between using Zope and Twisted for some future projects, so I'm
playing with comparable functionalities...I have to admit, Twisted is
pretty dang cool!

Take care...

--

Ken Kennedy	| http://www.kenzoid.com	| kenzoid at io.com

-------------- next part --------------
*** orig_domhelpers.py	Tue Jul 23 19:29:28 2002
--- /usr/lib/python2.1/site-packages/twisted/python/domhelpers.py	Tue Jul 23 01:26:14 2002
***************
*** 10,16 ****
      for child in node.childNodes:
          if child.nodeValue:
              child.replaceData(0, len(child.nodeValue), child.nodeValue % subs)
!         self.substitute(request, child, subs)
  
  def _get(node, nodeId):
      if hasattr(node, 'hasAttributes') and node.hasAttributes() and ((str(node.getAttribute("id")) == nodeId) or (str(node.getAttribute("class")) == nodeId) or (str(node.getAttribute("model")) == nodeId)):
--- 10,16 ----
      for child in node.childNodes:
          if child.nodeValue:
              child.replaceData(0, len(child.nodeValue), child.nodeValue % subs)
!         substitute(request, child, subs)
  
  def _get(node, nodeId):
      if hasattr(node, 'hasAttributes') and node.hasAttributes() and ((str(node.getAttribute("id")) == nodeId) or (str(node.getAttribute("class")) == nodeId) or (str(node.getAttribute("model")) == nodeId)):

From jcarlson at isd.net  Wed Jul 24 02:09:57 2002
From: jcarlson at isd.net (Josiah Carlson)
Date: Wed, 24 Jul 2002 01:09:57 -0700
Subject: [Twisted-Python] Reality?
Message-ID: <20020724004642.31EB.JCARLSON@isd.net>

Good day,

I was just mucking around in the #python channel talking with some guys,
and ended up expressing my opinion of Reality, which at this point is
not very high.

Why you ask?

I suppose my biggest problem is documentation and the lack of a proper
distribution.  In order to get reality, I had to use CVS, not a big deal,
but I would have been much more contented with a tgz archive.  You know,
it could include that 'demo' world I've read about after searching
through the mailing list archives.

Along those same lines, nowhere in the cvs listing is _ANY_
documentation, save the docstrings in the source.  Not to mention that
on the twistedmatrix.com site, there is only passing reference to
reality and how to get to it (get it from cvs, but you need to use the
command:
cvs -d:pserver:anon at twistedmatrix.com:/cvs co Reality
Which I don't believe is listed anywhere on the twistedmatrix.com site.

Along the 'demo' world I referred to above, information about that is
also not listed on the twistedmatrix.com site, anywhere in the source 
(that I could find), documentation is nowhere to be found, save in the
email archives...but email lists are not documentation.


To get to the point; if you want people to use reality, get a
distribution of any stable version, a world file with help about what is
currently available in the mini-world, and a little how-to for getting
the thing to run.  It also wouldn't hurt to get a link to this
distribution on some download page at twisted.

I'm telling you this because I have just embarked on a project that
quite possibly could last until I start my phd in september - possibly
longer.  Building a mud server and a mud using the server.  I'm doing
this because I don't believe any mud servers currently available are
workable solutions to the problem of 'how do I make my mud do X', where
X is anything.  I want to make a DND 3rd ed rule-based mud.  CircleMUD,
SMAUG, ROM, ENVY, etc., are all 2nd ed based.  Pulling out all that code
for thaco, percent-based skills/spells, etc., and replacing it with D20
rules would be a daunting task (there are 3 guys who did it this past
spring with CircleMud for a class, but their source is not downloadable). 
I'm not looking to re-make something that is doing too-much already.  At
37k lines of code for circlemud, and nearly 140k lines for SMAUG, either
is too huge.

Reality is a nice change, but it still feels bulky (in terms of source
code size) and I wouldn't want to muck around in the source for anything.

Thanks,
 - Josiah Carlson



From glyph at twistedmatrix.com  Wed Jul 24 03:48:29 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 24 Jul 2002 04:48:29 -0500 (CDT)
Subject: [Twisted-Python] Reality?
In-Reply-To: <20020724004642.31EB.JCARLSON@isd.net>
References: <20020724004642.31EB.JCARLSON@isd.net>
Message-ID: <20020724.044829.122624463.glyph@twistedmatrix.com>


Hi Josiah,

Thanks for your input.  Let's continue this discussion on the Reality list.


-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020724/5820c30e/attachment.sig>

From dp at twistedmatrix.com  Wed Jul 24 11:43:58 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 24 Jul 2002 10:43:58 -0700
Subject: [Twisted-Python] [PATCH] domhelpers.py
In-Reply-To: <20020723234348.GA3131@orcrist.kenzoid.com>
Message-ID: <EEC67F2C-9F2C-11D6-85DA-003065B25CAA@twistedmatrix.com>

On Tuesday, July 23, 2002, at 04:43 PM, Ken Kennedy wrote:

> I've been working on porting the blog example to the new 0.19
> DOMTemplate format, as an opportunity to play with some Twisted
> code. In doing so, I think I've found this big, bad single-line, 5
> character patch for domhelpers.py. Patch is attached. AFAICT, this is
> correct; I'll admit, though, I'm a python journeyman at best, so I may
> have mis-fixed.

Yes, indeed, that's a typo, and your fix is correct. Obviously that bug 
was left over from a refactoring of substitute from a method to a 
function. Really shows me I need to write more unit tests.

> Also, I should be finished with the blog example in a day or two...is
> there interest in replacing the old-style one? If so, where should I
> send the code? After finishing the straight port, I'm going to look at
> implementing some authorization via Twisted Cred; I'm trying to decide
> between using Zope and Twisted for some future projects, so I'm
> playing with comparable functionalities...I have to admit, Twisted is
> pretty dang cool!

Wow. I wrote both Blog and DOMTemplate, and I had been planning on 
refactoring Blog sometime soon, but hadn't gotten around to it. I didn't 
think anybody cared enough! *sniff* Thank you. :-)

Donovan




From kkennedy at kenzoid.com  Wed Jul 24 12:23:56 2002
From: kkennedy at kenzoid.com (Ken Kennedy)
Date: Wed, 24 Jul 2002 14:23:56 -0400
Subject: [Twisted-Python] [PATCH] domhelpers.py
In-Reply-To: <EEC67F2C-9F2C-11D6-85DA-003065B25CAA@twistedmatrix.com>
References: <20020723234348.GA3131@orcrist.kenzoid.com> <EEC67F2C-9F2C-11D6-85DA-003065B25CAA@twistedmatrix.com>
Message-ID: <20020724182356.GA21012@kenzoid.com>

On Wed, Jul 24, 2002 at 10:43:58AM -0700, Donovan Preston wrote:

> Yes, indeed, that's a typo, and your fix is correct. Obviously that bug 
> was left over from a refactoring of substitute from a method to a 
> function. Really shows me I need to write more unit tests.

Heh...I hear ya. I need to learn the "write unit tests first" habit
myself, but I'm a LONG way from that!

> >Also, I should be finished with the blog example in a day or two...is
> >there interest in replacing the old-style one? 
> 
> Wow. I wrote both Blog and DOMTemplate, and I had been planning on 
> refactoring Blog sometime soon, but hadn't gotten around to it. I didn't 
> think anybody cared enough! *sniff* Thank you. :-)

No sweat. It's a nice, compact little ball o' Twistiness...uses
DOMTemplate, plugins.tml, the MVC stuff, etc. all in one fell
swoop. Poking my way through it gives me a good insight into Twisted
web development. I got lazy and rented a movie last night, but I'll be
back on it tonight.

-- 

Ken Kennedy	| http://www.kenzoid.com	| kenzoid at io.com



From glyph at twistedmatrix.com  Thu Jul 25 00:59:47 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 25 Jul 2002 01:59:47 -0500 (CDT)
Subject: [Twisted-Python] AFactory
In-Reply-To: <E17XEdd-0007ZG-00@localhost>
References: <E17XEdd-0007ZG-00@localhost>
Message-ID: <20020725.015947.78705508.glyph@twistedmatrix.com>

On Wed, 24 Jul 2002 02:24:41 -0300, Zooko <zooko at zooko.com> wrote:

> I suggest that twisted.internet.protocol.Factory should be changed to do what
> AFactory does, making it so that my `updateApplication()' could use the
> standard Factory instead of AFactory.  I think it would be a
> backward-compatible change to Factory which doesn't require other users of
> Factory to change.

The normal idiom here is to have your "userapp" inherit from protocol.Factory.
The default "factory" implementation does set itself as an attribute on the
protocols it builds...

Is there any reason that this doesn't work for you?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020725/bf799eb6/attachment.sig>

From zooko at zooko.com  Thu Jul 25 09:53:08 2002
From: zooko at zooko.com (Zooko)
Date: Thu, 25 Jul 2002 12:53:08 -0300
Subject: [Twisted-Python] AFactory 
In-Reply-To: Message from Glyph Lefkowitz <glyph@twistedmatrix.com> 
   of "Thu, 25 Jul 2002 01:59:47 CDT." <20020725.015947.78705508.glyph@twistedmatrix.com> 
References: <E17XEdd-0007ZG-00@localhost>  <20020725.015947.78705508.glyph@twistedmatrix.com> 
Message-ID: <E17XkvM-0002Na-00@localhost>

> The normal idiom here is to have your "userapp" inherit from protocol.Factory.
> The default "factory" implementation does set itself as an attribute on the
> protocols it builds...

Ah!  Of course.  Thanks.

I tend to prefer other techniques (like AFactory) over inheritance when
possible, but since inheritance is the Twisted Way, I'll do it that way.  

Maybe this idiom should be added to plugin.html?

Regards,

Zooko




From bruce at cubik.org  Thu Jul 25 09:03:34 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Thu, 25 Jul 2002 09:03:34 -0600
Subject: [Twisted-Python] AFactory
References: <E17XEdd-0007ZG-00@localhost>  <20020725.015947.78705508.glyph@twistedmatrix.com> <E17XkvM-0002Na-00@localhost>
Message-ID: <3D401346.3020607@cubik.org>

Zooko wrote:
>>The normal idiom here is to have your "userapp" inherit from protocol.Factory.
>>The default "factory" implementation does set itself as an attribute on the
>>protocols it builds...
> 
> Ah!  Of course.  Thanks.
> 
> I tend to prefer other techniques (like AFactory) over inheritance when
> possible, but since inheritance is the Twisted Way, I'll do it that way.  
> 
> Maybe this idiom should be added to plugin.html?

Well, it'd also be nice to see coverage of when to implement a Service, 
what's involved in doing so, and all that .. maybe a higher level 
document about "Writing your application with Twisted" would be more 
appropriate for that though.

  - Bruce




From zooko at zooko.com  Thu Jul 25 10:13:35 2002
From: zooko at zooko.com (Zooko)
Date: Thu, 25 Jul 2002 13:13:35 -0300
Subject: [Twisted-Python] AFactory 
In-Reply-To: Message from Bruce Mitchener <bruce@cubik.org> 
   of "Thu, 25 Jul 2002 09:03:34 MDT." <3D401346.3020607@cubik.org> 
References: <E17XEdd-0007ZG-00@localhost> <20020725.015947.78705508.glyph@twistedmatrix.com> <E17XkvM-0002Na-00@localhost>  <3D401346.3020607@cubik.org> 
Message-ID: <E17XlF9-0002U5-00@localhost>

> Well, it'd also be nice to see coverage of when to implement a Service, 
> what's involved in doing so, and all that .. maybe a higher level 
> document about "Writing your application with Twisted" would be more 
> appropriate for that though.

Yes, I have heard of Services, but there is apparently no doc, and I am
ignoring the concept of services until I am forced to deal with it.

I think a "Writing your application with Twisted" doc would be perfect.

Regards,

Zooko




From glyph at twistedmatrix.com  Thu Jul 25 09:43:45 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 25 Jul 2002 10:43:45 -0500 (CDT)
Subject: [Twisted-Python] AFactory 
In-Reply-To: <E17XkvM-0002Na-00@localhost>
References: <20020725.015947.78705508.glyph@twistedmatrix.com>
	<glyph@twistedmatrix.com>
	<E17XkvM-0002Na-00@localhost>
Message-ID: <20020725.104345.74751532.glyph@twistedmatrix.com>

On Thu, 25 Jul 2002 12:53:08 -0300, Zooko <zooko at zooko.com> wrote:
> 
> > The normal idiom here is to have your "userapp" inherit from protocol.Factory.
> > The default "factory" implementation does set itself as an attribute on the
> > protocols it builds...
> 
> Ah!  Of course.  Thanks.
> 
> I tend to prefer other techniques (like AFactory) over inheritance when
> possible, but since inheritance is the Twisted Way, I'll do it that way.  

I agree with you (and I agree even more now than I did when I wrote Factory)
but I think that Factory is one of those instances where "is-a" makes sense, if
not inheritance.  Really the way I'd do it now, starting from scratch, would be
to have an interface which you either implement or provide an adapter for, that
had the buildProtocol/doStart etc methods on it.

The reason I say that is that the extra level of indirection (in AFactory)
doesn't really provide for any interesting hooks; the object that is "building"
the protocols is typically your user application.  protocol.Factory is more
like an interface that it implements than a class it should inherit from, but
it does have the utility convenience of (doStart and doStop) -> (startFactory
and stopFactory).

As far as that doc goes... yes.  We need it.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020725/abfd8459/attachment.sig>

From paul_carduner at msn.com  Thu Jul 25 11:53:23 2002
From: paul_carduner at msn.com (Paul Carduner)
Date: Thu, 25 Jul 2002 13:53:23 -0400
Subject: [Twisted-Python] Re: Twisted-Python digest, Vol 1 #371 - 3 msgs
Message-ID: <F18u9kstC7tXjs5FGJz00013769@hotmail.com>

I recently joined the Twisted mailing list and I am juts starting network 
programming.  I was wondering if anyone knew of existing tutorials or guides 
or documentation that i could use that would be helpful in my persuit of the 
twisted module.

thanks
-Paul Carduner

_________________________________________________________________
Join the world�s largest e-mail service with MSN Hotmail. 
http://www.hotmail.com




From steve.waterbury at gsfc.nasa.gov  Thu Jul 25 12:45:09 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Thu, 25 Jul 2002 14:45:09 -0400
Subject: [Twisted-Python] Large file transfers
References: <1027055868.11351.33.camel@radii>
		<200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com>
Message-ID: <3D404735.4AE6247F@gsfc.nasa.gov>

Twisted gurus,

I just noticed item 008 on the twisted TO DO list:

    File Transfer layer for PB.  This would be especially nice for
    twisted.words; having standard a way to transfer "large" (100MB+) packets
    across or in tandem with a PB connection without breaking anything would be
    very good.

<sophomoric question>
Would an ftp connection (authenticated using cred, of course) in 
tandem or parallel to the PB connection work?  ... but maybe you 
are referring to implementing file transfer as *part* of the 
PB protocol, in which case this question might not make any sense 
at all.    
</sophomoric question>

And how close is this to being implemented?

My interest is not merely academic -- the application I am working 
on will be "routinely" transferring 100MB+ files, and I'd like 
to use the PB as one of our interfaces.  

(BTW, one of the components of our app is written in Lisp, so I 
am thinking about having our Lisp programmer look at Twisted Emacs 
for hints as to how a Common Lisp implementation of PB could be done ... 
but I notice that several twisted minions have Lisp in their resumes ... 
is anyone working on / contemplating a CL implementation of PB?  :^)  

Cheers,
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html



From glyph at twistedmatrix.com  Thu Jul 25 13:19:21 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 25 Jul 2002 14:19:21 -0500 (CDT)
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <3D404735.4AE6247F@gsfc.nasa.gov>
References: <200207192104.05786.arashi1@pd.jaring.my>
	<20020719.094000.00927315.glyph@twistedmatrix.com>
	<3D404735.4AE6247F@gsfc.nasa.gov>
Message-ID: <20020725.141921.78704662.glyph@twistedmatrix.com>

On Thu, 25 Jul 2002 14:45:09 -0400, Steve Waterbury <steve.waterbury at gsfc.nasa.gov> wrote:

> I just noticed item 008 on the twisted TO DO list:
>     File Transfer layer for PB.
> <sophomoric question>
> Would an ftp connection (authenticated using cred, of course) in tandem or
> parallel to the PB connection work?  ... but maybe you are referring to
> implementing file transfer as *part* of the PB protocol, in which case this
> question might not make any sense at all.
> </sophomoric question>

Well, both.  It's more like a convention, really; all the pieces already exist
(serialized remote method calls, waiting until the outgoing buffer is empty) in
order to create a file transfer convention; of course, then you've got all the
usual fun problems; trying to connect with a listening socket on port 0,
backing off and using the existing connection with slightly poorer performance
if one or both of the users are behind a firewall...

> And how close is this to being implemented?

There's a lot of stuff on my plate that comes before it, most of all the 1.0
release.  On the other hand, it's a relatively simple thing to add in.

> My interest is not merely academic -- the application I am working 
> on will be "routinely" transferring 100MB+ files, and I'd like 
> to use the PB as one of our interfaces.

There will be a little bit of overhead in the initial implementation,
considering that it will be using PB calls.  In the short term, the large file
transfers would probably be better handled over HTTP (Twisted's
twisted.web.static.File can easily be used to this end).  FTP is a much nastier
protocol.

> (BTW, one of the components of our app is written in Lisp, so I 
> am thinking about having our Lisp programmer look at Twisted Emacs 
> for hints as to how a Common Lisp implementation of PB could be done ... 
> but I notice that several twisted minions have Lisp in their resumes ... 
> is anyone working on / contemplating a CL implementation of PB?  :^)  

We have contemplated it a lot, but have yet to implement it.  Really the
problem is that "common lisp" isn't a language so much as a bizarre
constellation of languages, none of which have anything to do with each other
when it comes to things like "sockets" and "files".  It hasn't been worth
anybody's effort to go to all that work just for, say, CLisp or SBCL.  AFAIK
it's not even *possible* to do it properly in CLisp yet, due to the absence of
non-blocking sockets, but this could be FUD; haven't read the docs in a while.

However, many of us are fans of Lisp-like languages and I'm sure that more than
one person would be thrilled to see a multi-vendor-supporting CL
implementation of PB.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020725/f1ea464b/attachment.sig>

From steve.waterbury at gsfc.nasa.gov  Thu Jul 25 14:43:33 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Thu, 25 Jul 2002 16:43:33 -0400
Subject: [Twisted-Python] Large file transfers
References: <200207192104.05786.arashi1@pd.jaring.my>
		<20020719.094000.00927315.glyph@twistedmatrix.com>
		<3D404735.4AE6247F@gsfc.nasa.gov> <20020725.141921.78704662.glyph@twistedmatrix.com>
Message-ID: <3D4062F5.97F0D558@gsfc.nasa.gov>

Glyph Lefkowitz wrote:

> There will be a little bit of overhead in the initial implementation,
> considering that it will be using PB calls.  In the short term, the large file
> transfers would probably be better handled over HTTP (Twisted's
> twisted.web.static.File can easily be used to this end).  FTP is a much nastier
> protocol.

Ah, my ignorance again -- I hadn't noticed twisted.web.static.File;  
I'll look at that ... we'll be doing at least 3 interfaces that use 
HTTP anyway (web, xmlrpc, and SOAP) ... thanks!

> > is anyone working on / contemplating a CL implementation of PB?  :^)
> 
> We have contemplated it a lot, but have yet to implement it.  Really the
> problem is that "common lisp" isn't a language so much as a bizarre
> constellation of languages, none of which have anything to do with each other
> when it comes to things like "sockets" and "files".  It hasn't been worth
> anybody's effort to go to all that work just for, say, CLisp or SBCL.  AFAIK
> it's not even *possible* to do it properly in CLisp yet, due to the absence of
> non-blocking sockets, but this could be FUD; haven't read the docs in a while.
> 
> However, many of us are fans of Lisp-like languages and I'm sure that more than
> one person would be thrilled to see a multi-vendor-supporting CL
> implementation of PB.

Yeah, the non-blocking sockets might be a problem ... I'll ask about 
that.  If we do an implementation, we'll at least make an effort to 
make it multi-vendor-supporting.  Our Lisp specialists have used both 
Allegro and Harlequin at various times.  Let us know if other vendor 
or open-source Lisps are of interest, etc.  

Cheers,
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html



From jason at asbahr.com  Thu Jul 25 17:27:18 2002
From: jason at asbahr.com (Jason Asbahr)
Date: Thu, 25 Jul 2002 16:27:18 -0700
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
Message-ID: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com>

Andy Dustman gave an interesting Lightning Talk at the OSCon that might 
be of interest to the .enterprise hackers, Transparent Object 
Persistence using DB-API.  You'll like it, it's evil.  It claims to be 
the first non-gratuitous use of metaclasses in Python.   : )  He's going 
to post the slides/code shortly, ping him at...

http://www.dustman.net

Cheers,

Jason




From j.her at t-online.de  Thu Jul 25 18:20:32 2002
From: j.her at t-online.de (Juergen Hermann)
Date: Fri, 26 Jul 2002 02:20:32 +0200
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
In-Reply-To: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com>
Message-ID: <17Xspz-1xvoYqC@fwd10.sul.t-online.com>

On Thu, 25 Jul 2002 16:27:18 -0700, Jason Asbahr wrote:

> You'll like it, it's evil.

It has to be twisted, not evil. Unless it's evilly twisted.
Ciao, Jürgen





From twisted at itamarst.org  Thu Jul 25 21:29:31 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 25 Jul 2002 23:29:31 -0400
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
References: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com>
Message-ID: <3D40C21B.8040400@itamarst.org>

Someone did a lightning talk just like that at EuroPython, about storing 
astronomical data. It *might* have been Andy Dustman.




From arashi1 at pd.jaring.my  Fri Jul 26 02:40:01 2002
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Fri, 26 Jul 2002 16:40:01 +0800
Subject: [Twisted-Python] Have you checked out CherryPy?
Message-ID: <200207261640.01861.arashi1@pd.jaring.my>

Hello all,

There's an interesting light-weight web application platform called CherryPy 
(why cherry? who knows..). The idea of generating the web server from source 
is similar to twisted's mktap. However, it takes .cpy files and creates a .py 
which is run like a normal python program:

$ python MyWebApp.py

This will launch a web server listening on port 8000 by default. CherryPy has 
2 templating laguages which serve different purposes. It's actually quite 
simple to use as far as templating languages go.

Of course, it's only analogous to twisted.web - which is only a part of the 
twisted erm...twisted super-framework?

Apart from the interesting thing that CherryPy is, the thing that surprised me 
was the docs. Take a look at the docs! Considering that it's only version 
0.2, the docs are really good!

For more info/downloads, go to:
http://www.cherrypy.org

-- 
Regards,
Mukhsein Johari



From lac at strakt.com  Fri Jul 26 05:48:45 2002
From: lac at strakt.com (Laura Creighton)
Date: Fri, 26 Jul 2002 13:48:45 +0200
Subject: [Twisted-Python] Transparent Object Persistence using DB-API 
In-Reply-To: Message from Jason Asbahr <jason@asbahr.com> 
   of "Thu, 25 Jul 2002 16:27:18 PDT." <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com> 
References: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com> 
Message-ID: <200207261148.g6QBmjci026976@ratthing-b246.strakt.com>

> Andy Dustman gave an interesting Lightning Talk at the OSCon that might 
> be of interest to the .enterprise hackers, Transparent Object 
> Persistence using DB-API.  You'll like it, it's evil.  It claims to be 
> the first non-gratuitous use of metaclasses in Python.   : )  He's going 
> to post the slides/code shortly, ping him at...
> 
> http://www.dustman.net
> 
> Cheers,
> 
> Jason
> 

Are you sure about that address?  I get a DNS lookup failure.

Laura Creighton



From carmstro at twistedmatrix.com  Fri Jul 26 06:15:43 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 26 Jul 2002 07:15:43 -0500
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
In-Reply-To: <200207261148.g6QBmjci026976@ratthing-b246.strakt.com>
References: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com> <200207261148.g6QBmjci026976@ratthing-b246.strakt.com>
Message-ID: <20020726121543.GA9901@twistedmatrix.com>

On Fri, Jul 26, 2002 at 01:48:45PM +0200, Laura Creighton wrote:
> > http://www.dustman.net
> 
> Are you sure about that address?  I get a DNS lookup failure.

I just checked it out -- the 'www' prefix is non-existent. Leave it out.



From typo at soniq.net  Fri Jul 26 06:31:29 2002
From: typo at soniq.net (Paul Boehm)
Date: Fri, 26 Jul 2002 14:31:29 +0200
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <3D404735.4AE6247F@gsfc.nasa.gov>
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov>
Message-ID: <20020726123129.GA7907@soniq.net>

On Thu, Jul 25, 2002 at 02:45:09PM -0400, Steve Waterbury wrote:
>     File Transfer layer for PB.  This would be especially nice for
>     twisted.words; having standard a way to transfer "large" (100MB+) packets
>     across or in tandem with a PB connection without breaking anything would be
>     very good.

i also require filetransfers over pb for my project,
i think twisted currently is lacking a protocol for reading files
in a reliable manner (nfs, fifos, ...). i doubt i'm skilled enough,
but i'm trying to implement protocols.file right now, hoping this
will help me with getting files accross pb later. suggestions?

  paul



From steve.waterbury at gsfc.nasa.gov  Thu Jul 25 20:05:58 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Thu, 25 Jul 2002 22:05:58 -0400
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
References: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com>
Message-ID: <3D40AE86.3A815B81@gsfc.nasa.gov>

Jason Asbahr wrote:
> 
> Andy Dustman gave an interesting Lightning Talk at the OSCon that might
> be of interest to the .enterprise hackers, Transparent Object
> Persistence using DB-API.  You'll like it, it's evil.  It claims to be
> the first non-gratuitous use of metaclasses in Python.   : )  He's going
> to post the slides/code shortly, ping him at...
> 
> http://www.dustman.net

Wow -- I can't reach his server ... he's been twist-dotted!!  :^)

-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html



From carmstro at twistedmatrix.com  Fri Jul 26 06:41:27 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 26 Jul 2002 07:41:27 -0500
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020726123129.GA7907@soniq.net>
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net>
Message-ID: <20020726124127.GA10592@twistedmatrix.com>

On Fri, Jul 26, 2002 at 02:31:29PM +0200, Paul Boehm wrote:
> On Thu, Jul 25, 2002 at 02:45:09PM -0400, Steve Waterbury wrote:
> >     File Transfer layer for PB.  This would be especially nice for
> >     twisted.words; having standard a way to transfer "large" (100MB+) packets
> >     across or in tandem with a PB connection without breaking anything would be
> >     very good.
> 
> i also require filetransfers over pb for my project,
> i think twisted currently is lacking a protocol for reading files
> in a reliable manner (nfs, fifos, ...). i doubt i'm skilled enough,
> but i'm trying to implement protocols.file right now, hoping this
> will help me with getting files accross pb later. suggestions?

AFAIK, twisted.web.static _does_ do non-blocking reading, so check that out.
I don't think anyone has implemented non-blocking writing yet. (There's some
sort of FileWrapper protocol or somesuch IIRC, but it just assumes that
write() won't take very long -- it's only for testing)



From typo at soniq.net  Fri Jul 26 06:55:33 2002
From: typo at soniq.net (Paul Boehm)
Date: Fri, 26 Jul 2002 14:55:33 +0200
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020726124127.GA10592@twistedmatrix.com>
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com>
Message-ID: <20020726125533.GB7907@soniq.net>

On Fri, Jul 26, 2002 at 07:41:27AM -0500, Chris Armstrong wrote:
> AFAIK, twisted.web.static _does_ do non-blocking reading, so check that out.
> I don't think anyone has implemented non-blocking writing yet. (There's some
> sort of FileWrapper protocol or somesuch IIRC, but it just assumes that
> write() won't take very long -- it's only for testing)

no it doesn't,
 f = open(self.path,'rb')
...
# return data
FileTransfer(f, size, request)
# and make sure the connection doesn't get closed
return server.NOT_DONE_YET

this is a normal file instance.. i have yet to find a way to do nonblocking
file reads.. till then i'm starting to implement a protocol which i can tell
upon initialization which parts of the file i want to have streamed.

ah, and i think twisted.web.static.FileTransfer has a bug:
you can specify where it starts reading with seek, and set an
arbitrary size.. but it read()->write()'s by
abstract.FileDescriptor.bufferSize
and then checks "if self.file.tell() == self.size:" which
won't be correct if the file is larger than the requested chunk.

  paul




From bruce at cubik.org  Fri Jul 26 07:41:22 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Fri, 26 Jul 2002 07:41:22 -0600
Subject: [Twisted-Python] Large file transfers
References: <1027055868.11351.33.camel@radii>		<200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov>
Message-ID: <3D415182.9010703@cubik.org>

Steve Waterbury wrote:
> Twisted gurus,
> 
> I just noticed item 008 on the twisted TO DO list:
> 
>     File Transfer layer for PB.  This would be especially nice for
>     twisted.words; having standard a way to transfer "large" (100MB+) packets
>     across or in tandem with a PB connection without breaking anything would be
>     very good.
> 
> <sophomoric question>
> Would an ftp connection (authenticated using cred, of course) in 
> tandem or parallel to the PB connection work?  ... but maybe you 
> are referring to implementing file transfer as *part* of the 
> PB protocol, in which case this question might not make any sense 
> at all.    
> </sophomoric question>
> 
> And how close is this to being implemented?
> 
> My interest is not merely academic -- the application I am working 
> on will be "routinely" transferring 100MB+ files, and I'd like 
> to use the PB as one of our interfaces.

Steve,

This sort of thing is why some of the features of the BEEP protocol are 
nice, specifically the presence of multiple channels and that messages 
on those channels needn't block others, because it chunks them and 
interleaves them.

BEEP is documented in RFC 3080:

   http://www.ietf.org/rfc/rfc3080.txt

and the design rationale is documented in 3171, On the Design of 
Application Protocols:

   ftp://ftp.rfc-editor.org/in-notes/rfc3117.txt

and more information, including links to various implementations can be 
found at:

   http://www.beepcore.org/

I don't know that I'd directly use BEEP because the existing 
implementations are lacking (thread-heavy), and it doesn't support 
features that would be needed for PB-over-UDP support, but having the 
option to run PB over BEEP would let you do large file transfers over 
the same connection (without worrying about NAT or firewall issues) 
without blocking the usual PB messages.

I'd go so far as to say that this problem isn't just with file 
transfers.  It is a potential problem anytime you have messages of 
different priorities being sent over PB.  Larger, lesser priority 
messages block higher priority messages because they're all over the 
same connection and there aren't logical channels in PB (as in BEEP).

You can work around this yourself by manually chunking messages and 
managing sending them at the sending side in small pieces to give other 
messages a chance to make it through.  Another way of handling this, and 
nicer than laying on top of BEEP, would be to start down the path 
towards some of the features that would be needed or useful in UDP 
support.  With UDP support, it'd be useful to be able to flag messages 
with different bits of data:

    * Reliable
    * Unreliable
    * Time-sensitive data which is useless after that time.

in that sort of scenario, one could add an additional set of behaviors 
where the message that contained large, low-priority data would be 
flagged to let PB know that it was something that could be spread out 
over time and that timing for it wasn't a concern.

Maybe there are already capabilities like this in PB .. but given the 
lack of docs, I haven't found them yet. :)

Cheers,

  - Bruce




From twisted at itamarst.org  Fri Jul 26 08:36:58 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 26 Jul 2002 10:36:58 -0400
Subject: [Twisted-Python] Transparent Object Persistence using DB-API
References: <0FBDE044-A026-11D6-83D8-000393753460@asbahr.com> <3D40C21B.8040400@itamarst.org>
Message-ID: <3D415E8A.9020602@itamarst.org>

Itamar Shtull-Trauring wrote:
> Someone did a lightning talk just like that at EuroPython, about storing 
> astronomical data. It *might* have been Andy Dustman.

I *think* it was this:
http://europython.zope.nl/sessions/presentations/LightningTalks/EPC2002-Rengelink-Persistent.pdf




From glyph at twistedmatrix.com  Fri Jul 26 13:52:21 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 26 Jul 2002 14:52:21 -0500 (CDT)
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <3D4062F5.97F0D558@gsfc.nasa.gov>
References: <3D404735.4AE6247F@gsfc.nasa.gov>
	<20020725.141921.78704662.glyph@twistedmatrix.com>
	<3D4062F5.97F0D558@gsfc.nasa.gov>
Message-ID: <20020726.145221.107254913.glyph@twistedmatrix.com>


On Thu, 25 Jul 2002 16:43:33 -0400, Steve Waterbury <steve.waterbury at gsfc.nasa.gov> wrote:
> Glyph Lefkowitz wrote:
> 
> > There will be a little bit of overhead in the initial implementation,
> > considering that it will be using PB calls.

As several people have pointed out to me, sometimes this additional overhead is
worth paying in order to get rid of the TCP connection startup cost.  Of
course, this will vary with your application, but it's probably worthwhile to
have the ability to reuse the connection.

In addition, sometimes you want to communicate large *objects*, and not just
large *files*; in those cases, it's really handy to have objects which can be
"paged" between systems, interleaved with other messages.

This is also a decent basis for "file transfer" between two objects, since
"very large string, stored on disk" is a degenerate case of "very large object,
stored somewhere".  I've checked in an implementation of this to
twisted.spread.util.Pager.  Not much in the way of docs yet, but the test cases
(twisted.test.test_pb, look for "pager") should at least explain some of it.

> > However, many of us are fans of Lisp-like languages and I'm sure that more than
> > one person would be thrilled to see a multi-vendor-supporting CL
> > implementation of PB.

> Yeah, the non-blocking sockets might be a problem ... I'll ask about 
> that.  If we do an implementation, we'll at least make an effort to 
> make it multi-vendor-supporting.  Our Lisp specialists have used both 
> Allegro and Harlequin at various times.  Let us know if other vendor 
> or open-source Lisps are of interest, etc.  

I can speak only to my own interests.  Other members of the Twisted community
are working in radically different environments and on radically different
problems.  As long as you asked, though ...

While I appreciate that they're technically superior, the proprietary lisps
don't interest me; the bang for your buck of using a proprietary language
solution is seldom worth the hefty license fees (especially in a situations
where "interoperability" and "ubiquity" are the most interesting parts, like
most of the applications I've come up with for Twisted).

Conversely, support for *any* open-source CL would be really cool.  Even GCL
would be fun to play around with.  I'd like to develop Lisp components for some
of the applications I'm working on, mostly to tinker with it for fun, but I
don't have enough time or inclincation to dive into the implementation myself.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020726/4b83e880/attachment.sig>

From steve.waterbury at gsfc.nasa.gov  Fri Jul 26 15:49:04 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Fri, 26 Jul 2002 17:49:04 -0400
Subject: [Twisted-Python] Large file transfers
References: <3D404735.4AE6247F@gsfc.nasa.gov>
		<20020725.141921.78704662.glyph@twistedmatrix.com>
		<3D4062F5.97F0D558@gsfc.nasa.gov> <20020726.145221.107254913.glyph@twistedmatrix.com>
Message-ID: <3D41C3D0.C1CD2430@gsfc.nasa.gov>

Glyph Lefkowitz wrote:

> As several people have pointed out to me, sometimes this additional overhead is
> worth paying in order to get rid of the TCP connection startup cost.  Of
> course, this will vary with your application, but it's probably worthwhile to
> have the ability to reuse the connection.
> 
> In addition, sometimes you want to communicate large *objects*, and not just
> large *files*; in those cases, it's really handy to have objects which can be
> "paged" between systems, interleaved with other messages.

Yes, both of these are important considerations for our app.  

> This is also a decent basis for "file transfer" between two objects, since
> "very large string, stored on disk" is a degenerate case of "very large object,
> stored somewhere".  I've checked in an implementation of this to
> twisted.spread.util.Pager.  Not much in the way of docs yet, but the test cases
> (twisted.test.test_pb, look for "pager") should at least explain some of it.

Great -- I'll take a look at that.  Thanks!  

> > [SW wrote:]...  Let us know if other vendor
> > or open-source Lisps are of interest, etc.
> 
> I can speak only to my own interests.  Other members of the Twisted community
> are working in radically different environments and on radically different
> problems.  As long as you asked, though ...
> 
> While I appreciate that they're technically superior, the proprietary lisps
> don't interest me; the bang for your buck of using a proprietary language
> solution is seldom worth the hefty license fees (especially in a situations
> where "interoperability" and "ubiquity" are the most interesting parts, like
> most of the applications I've come up with for Twisted).

Understood.  Since we have limited manpower for our Lisp work, we tend 
to value the power of commercial development tools, but we do care 
about portability, so we try to adhere to ANSI CL -- see:
http://exp-engine.sourceforge.net/lisp.html
(And it is *very* important that there are no *run-time* license fees!
Anyone can download our stuff and run it.)

Express Engine, our Lisp project, is somewhat esoteric, so even though 
it's on SF no other developers have joined. ;^)  If anyone is curious, 
see:  http://exp-engine.sourceforge.net 

Express Engine encapsulates some very important functions for our app, 
enabling us to munge data produced by various CAD/CAE/CAM ("CAX") 
tools, for which the most widely implemented exchange standard is 
ISO 10303 (STEP).  Express Engine encapsulates our STEP data I/O and 
mapping functionality.  (Like I said, somewhat esoteric! :^)  As you 
can imagine, STEP files produced by CAX tools can be quite huge.  

This also hints at why Twisted is such a natural fit for our app:  a 
multi-player networked game environment is not all that different 
from a massive collaborative engineering environment ... at the 
infrastructure level, essentially identical.

Cheers,
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html



From glyph at twistedmatrix.com  Fri Jul 26 17:27:08 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 26 Jul 2002 18:27:08 -0500 (CDT)
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <3D41C3D0.C1CD2430@gsfc.nasa.gov>
References: <3D4062F5.97F0D558@gsfc.nasa.gov>
	<20020726.145221.107254913.glyph@twistedmatrix.com>
	<3D41C3D0.C1CD2430@gsfc.nasa.gov>
Message-ID: <20020726.182708.130019145.glyph@twistedmatrix.com>


On Fri, 26 Jul 2002 17:49:04 -0400, Steve Waterbury <steve.waterbury at gsfc.nasa.gov> wrote:
> This also hints at why Twisted is such a natural fit for our app:  a 
> multi-player networked game environment is not all that different 
> from a massive collaborative engineering environment ... at the 
> infrastructure level, essentially identical.

I've heard this comment several times and I don't think I've said much about it
before.  Allow me to wax philosophical for a moment.

One of my favorite things about Twisted is that, due to its origins, it
challenges people to think about what they're doing and whether "work" is
really any harder or more serious than "play".  It turns out that building
massively multiplayer games - "serious fun" - may be a great deal *more*
difficult than the average "software engineering" project.

If someone is reading this and hasn't been thusly challenged by Twisted or by
something else, maybe they should be ;-).  "The Hacker Ethic" is a great book
on this.

The Twisted framework shows its Python heritage this way, too: Python is a
language designed to teach, and markedly *unlike* Pascal, it is not a stuffy,
academic pedant.  Instead, Python applies its own lessons by making the
practical work of programming easier.  It illuminates the fact that programming
*is* learning: as Perlis said, "If we knew what we were doing, we would not
call it programming."

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020726/efdd712e/attachment.sig>

From twisted at itamarst.org  Sat Jul 27 17:26:29 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 27 Jul 2002 19:26:29 -0400
Subject: [Twisted-Python] New client APIs
Message-ID: <3D432C25.80908@itamarst.org>

Hi,

I just checked in a new API for client connections (TCP/SSL/UNIX.) The main 
change is that you now register a ClientFactory using reactor.connectTCP (or 
Application.connectTCP). Various callbacks will get called on the factory, 
allowing you to reconnect on a failure or lost connection, let users abort 
connections, and so on. So, these policies are now done in the *factory* - 
connectionFailed will no longer be called on protocols unless you use the 
old deprecated APIs.

So what does this mean to you? If you are a Twisted developer, please take a 
look and see if you have any further needs or issues with the 
implementation. If all goes well (and this is the second refactoring I've 
done, I don't expect many changes) we need to start updating all the code to 
use the new APIs.

For example, FTP tests are failing right now, due to my not making the 
backwards compatability code totally backwards compatible. This is fine by 
me - the new API is much nicer and will make everyone's life easier, so it's 
not worth the time making the old API work exactly the same.

Documentation can be found by looking at:
IConnector, protocol.ClientFactory, IReactorTCP.connectTCP




From andrew-twisted at puzzling.org  Sun Jul 28 09:06:58 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 29 Jul 2002 01:06:58 +1000
Subject: [Twisted-Python] New client APIs
In-Reply-To: <3D432C25.80908@itamarst.org>
References: <3D432C25.80908@itamarst.org>
Message-ID: <20020728150658.GA1663@frobozz.local>

On Sat, Jul 27, 2002 at 07:26:29PM -0400, Itamar Shtull-Trauring wrote:
> 
> For example, FTP tests are failing right now, due to my not making the 

Ah, FTP failing again :)

FTP seems to be the Twisted canary -- it's always the first to break...

> backwards compatability code totally backwards compatible. This is fine by 
> me - the new API is much nicer and will make everyone's life easier, so 
> it's not worth the time making the old API work exactly the same.
> 
> Documentation can be found by looking at:
> IConnector, protocol.ClientFactory, IReactorTCP.connectTCP

I've taken a look at the documentation, but I'm not certain of the best way
to proceed to fix FTP.

FTP doesn't want any sort of reconnection funny-business going on.  If the
data connection fails, I just want to know about that and send an error
message, rather than do any sort of reconnection.  reactor.clientTCP used to
do that.  I'm not sure what the equivalent now is?  Do I need to make a
ClientFactory subclass that implements these "try once then give up" sematics?
If so, should that be a standard utility class?

I get the feeling that the answer is quite simple and staring me in the
face, so please tell me what it is :)

-Andrew.




From twisted at itamarst.org  Sun Jul 28 09:22:52 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 28 Jul 2002 11:22:52 -0400
Subject: [Twisted-Python] New client APIs
References: <3D432C25.80908@itamarst.org> <20020728150658.GA1663@frobozz.local>
Message-ID: <3D440C4C.7030807@itamarst.org>

Andrew Bennetts wrote:

> FTP doesn't want any sort of reconnection funny-business going on.  If the
> data connection fails, I just want to know about that and send an error
> message, rather than do any sort of reconnection.  reactor.clientTCP used to
> do that.  I'm not sure what the equivalent now is?  Do I need to make a
> ClientFactory subclass that implements these "try once then give up" sematics?
> If so, should that be a standard utility class?

That's exactly what ClientFactory does. It does *not* reconnect 
automatically - that's up to you to decide. See docstrings for 
ClientFactory.connectionLost and .connectionFailed.




From ldanielburr at earthlink.net  Sat Jul 27 11:11:07 2002
From: ldanielburr at earthlink.net (Daniel Burr)
Date: Sat, 27 Jul 2002 10:11:07 -0700
Subject: [Twisted-Python] Newbie: Help with twisted.web, HTTPClient
Message-ID: <Springmail.0994.1027789867.0.19901500@webmail.pas.earthlink.net>

I just started playing with Twisted last week; great stuff!

My question is this:  I have an .rpy file, which defines a Resource.  As part
of this Resource's render method, I need to perform an http GET against
another server, which of course causes the twisted.web server to block.  From
looking through the source code, it looks like the HTTPClient should be what I
need to perform a non-blocking http GET from within my resource, but I cannot
find  any information on how to use it; just creating an instance and doing
sendCommand fails, stating that there is no transport.

I guess I could just use httplib.HTTPConnection, but I'd have to run that in a
separate thread in order to prevent blocking, and it just seems like I
shouldn't need to use threads for something so simple.

Any advice or help would be greatly appreciated, thanks.

Daniel Burr



From carmstro at twistedmatrix.com  Sun Jul 28 12:12:29 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 28 Jul 2002 14:12:29 -0400
Subject: [Twisted-Python] Newbie: Help with twisted.web, HTTPClient
In-Reply-To: 	<Springmail.0994.1027789867.0.19901500@webmail.pas.earthlink.net>
References: 	<Springmail.0994.1027789867.0.19901500@webmail.pas.earthlink.net>
Message-ID: <1027879950.6779.8.camel@radii>

On Sat, 2002-07-27 at 13:11, Daniel Burr wrote:
> I just started playing with Twisted last week; great stuff!
> 
> My question is this:  I have an .rpy file, which defines a Resource.  As part
> of this Resource's render method, I need to perform an http GET against
> another server, which of course causes the twisted.web server to block.  From
> looking through the source code, it looks like the HTTPClient should be what I
> need to perform a non-blocking http GET from within my resource, but I cannot
> find  any information on how to use it; just creating an instance and doing
> sendCommand fails, stating that there is no transport.

Check out doc/examples/qtdemo.py; it has a HTTPClient example (class
TwistzillaClient). Basically, you'll want your render method to 

1) instantiate your HTTPClient subclass, making sure to pass your
'request' object to it (and make sure to connect it),
2) return web.server.NOT_DONE_YET,
3) in the 'handleResponse' method of your HTTPClient subclass, write all
the data with 'request.write(data)', then call 'request.finish()' so
twisted.web knows you're done.

HTH.
-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From glyph at twistedmatrix.com  Sun Jul 28 13:12:14 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 28 Jul 2002 14:12:14 -0500 (CDT)
Subject: [Twisted-Python] New client APIs
In-Reply-To: <3D432C25.80908@itamarst.org>
References: <3D432C25.80908@itamarst.org>
Message-ID: <20020728.141214.61503296.glyph@twistedmatrix.com>


On Sat, 27 Jul 2002 19:26:29 -0400, Itamar Shtull-Trauring <twisted at itamarst.org> wrote:
> For example, FTP tests are failing right now, due to my not making the 
> backwards compatability code totally backwards compatible. This is fine by 
> me - the new API is much nicer and will make everyone's life easier, so it's 
> not worth the time making the old API work exactly the same.

Okay, this is fixed now.

Soon, I'm going to hack in support to acapnotic's CVSToys to run the unit tests
on the HEAD branch and e-mail checkin offenders once an hour until they get
fixed.  Until I do that, though, I will sporadically emulate that functionality
manually; expect to have a full mailbox if you don't check that unit tests are
still working (backwards compatibility hacks or no!). ;-)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020728/dfd77f0b/attachment.sig>

From mattcampbell at pobox.com  Sun Jul 28 14:19:39 2002
From: mattcampbell at pobox.com (Matt Campbell)
Date: Sun, 28 Jul 2002 15:19:39 -0500
Subject: [Twisted-Python] Two things in twisted.internet.process
Message-ID: <20020728151939.A30755@mattc.cm.nu>

1.  I noticed that when Process.__init__ prepares to execute the
child process, it closes all fd's from 3 to 255.  Is it possible
for the child process to inherit open files with fd's greater than
255?  I'm concerned that this could happen on busy servers, but
this is one aspect of Unix about which I don't know much.

2.  To increase consistency with the usual interface between
transports and protocols, I think it would be good to implement a
loseConnection method in the Process class that does what closeStdin
does now.
-- 
Matt Campbell
Email and MSN Messenger:  mattcampbell at pobox.com
Phone:  (316) 652-8727
Web site:  http://www.pobox.com/~mattcampbell/



From lac at strakt.com  Mon Jul 29 05:37:16 2002
From: lac at strakt.com (Laura Creighton)
Date: Mon, 29 Jul 2002 13:37:16 +0200
Subject: [Twisted-Python] FAST 03 (Usenix conference on File Storage Technologies)
Message-ID: <200207291137.g6TBbGr9005342@ratthing-b246.strakt.com>

I was looking for interesting conferences where Strakt could present a
paper and found this one.  I think that a paper on Twisted would be
accepted if anybody is interested in writing one.  4000 - 6000 words due 
Sept 03.  (Automatic extension to Sept 10).

There is also a request for 'works in progress' and 'provocative
opinions'.  These only have to be one page long.  They mention that
they are particularly interested in student work.

See: http://www.usenix.org/events/fast03/cfp/

if anybody has time and are interested.  The conference will be in
San Jose CA March 31-April 2.

Laura Creighton



From liiwi at lonesom.pp.fi  Sun Jul 28 16:03:34 2002
From: liiwi at lonesom.pp.fi (Jaakko Niemi)
Date: Mon, 29 Jul 2002 01:03:34 +0300
Subject: [Twisted-Python] suckosity of text/html as default content type
Message-ID: <874rejbjd5.fsf@jumper.lonesom.pp.fi>


 Ok, serving files with content-type set to text/html just blows.
 Basic logic is that the server should know and set content-type
 header or set it to application/octet-stream if unknown. A http
 client can then decide what to do with it. Attached patchlet is
 in existence just because I don't like opening my mouth without
 something concrete. Files without extension in their names for
 example are still not handled properly. I'm going to add parser
 for mime-types file unless radix beats me to it.

                         --j

-------------- next part --------------
A non-text attachment was scrubbed...
Name: twisted.mime.patch
Type: text/x-patch
Size: 1356 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020729/957fcbae/attachment-0002.bin>

From tv at twistedmatrix.com  Mon Jul 29 03:26:07 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 29 Jul 2002 12:26:07 +0300
Subject: [Twisted-Python] Two things in twisted.internet.process
In-Reply-To: <20020728151939.A30755@mattc.cm.nu>
References: <20020728151939.A30755@mattc.cm.nu>
Message-ID: <20020729092607.GA29916@ki.yok.utu.fi>

On Sun, Jul 28, 2002 at 03:19:39PM -0500, Matt Campbell wrote:
> 1.  I noticed that when Process.__init__ prepares to execute the
> child process, it closes all fd's from 3 to 255.  Is it possible
> for the child process to inherit open files with fd's greater than
> 255?  I'm concerned that this could happen on busy servers, but
> this is one aspect of Unix about which I don't know much.

	fcntl(fd, F_SETFD, FD_CLOEXEC). On _all_ fds
	one does not want to share with children.

	Make the kernel do the work, it's the only sane way.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From tv at twistedmatrix.com  Mon Jul 29 03:35:31 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 29 Jul 2002 12:35:31 +0300
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020726124127.GA10592@twistedmatrix.com>
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com>
Message-ID: <20020729093531.GB29916@ki.yok.utu.fi>

On Fri, Jul 26, 2002 at 07:41:27AM -0500, Chris Armstrong wrote:
> AFAIK, twisted.web.static _does_ do non-blocking reading, so check
> that out.  I don't think anyone has implemented non-blocking writing
> yet. (There's some sort of FileWrapper protocol or somesuch IIRC,
> but it just assumes that write() won't take very long -- it's only
> for testing)

	Bzzt, wrong. All file IO is sync. To do async file IO,
	you need to use a different kernel API -- called AIO,
	and not very widely available. (Or emulate it by forking
	worker processes that pass data between stdin/stdout and
	file).

	select(2)/poll(2) overhead has been historically deemed
	too high for async file IO, files tend to be so much faster
	that separating them from sockets was historically thought
	of as a good idea.

	Later generations have learned to curse select(2), see how
	slow network filesystems and cheap IDE disks can be, and hope
	for an low-overhead select(2)/poll(2) replacement for both
	file IO and non-file IO.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From mattcampbell at pobox.com  Mon Jul 29 09:35:37 2002
From: mattcampbell at pobox.com (Matt Campbell)
Date: Mon, 29 Jul 2002 10:35:37 -0500
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020729093531.GB29916@ki.yok.utu.fi>; from tv@twistedmatrix.com on Mon, Jul 29, 2002 at 12:35:31PM +0300
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi>
Message-ID: <20020729103537.A32919@mattc.cm.nu>

On Mon, Jul 29, 2002 at 12:35:31PM +0300, Tommi Virtanen wrote:
> 	Later generations have learned to curse select(2), see how
> 	slow network filesystems and cheap IDE disks can be, and hope
> 	for an low-overhead select(2)/poll(2) replacement for both
> 	file IO and non-file IO.

Has anyone looked at the kqueue(2) and kevent(2) system calls in
FreeBSD?  These seem to have less overhead than select(2)/poll(2),
and FreeBSD also has the AIO system calls, so these two features
can be used together to provide async file I/O and better async
socket I/O (at least on one platform).  I've also read that there's
a Linux kernel patch that adds a device called /dev/poll, which
has less overhead than poll(2).  You can read more about these
things at:

http://www.kegel.com/c10k.html

There's a Python binding for kqueue(2)/kevent(2) at:

http://people.freebsd.org/~dwhite/PyKQueue/
-- 
Matt Campbell
Email and MSN Messenger:  mattcampbell at pobox.com
Phone:  (316) 652-8727
Web site:  http://www.pobox.com/~mattcampbell/



From glyph at twistedmatrix.com  Mon Jul 29 09:35:59 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 29 Jul 2002 10:35:59 -0500 (CDT)
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020729093531.GB29916@ki.yok.utu.fi>
References: <20020726123129.GA7907@soniq.net>
	<20020726124127.GA10592@twistedmatrix.com>
	<20020729093531.GB29916@ki.yok.utu.fi>
Message-ID: <20020729.103559.08323574.glyph@twistedmatrix.com>


On Mon, 29 Jul 2002 12:35:31 +0300, Tommi Virtanen <tv at twistedmatrix.com> wrote:
> On Fri, Jul 26, 2002 at 07:41:27AM -0500, Chris Armstrong wrote:
> > AFAIK, twisted.web.static _does_ do non-blocking reading, so check
> > that out.  I don't think anyone has implemented non-blocking writing
> > yet. (There's some sort of FileWrapper protocol or somesuch IIRC,
> > but it just assumes that write() won't take very long -- it's only
> > for testing)

> 	Bzzt, wrong. All file IO is sync. To do async file IO,
> 	you need to use a different kernel API -- called AIO,
> 	and not very widely available. (Or emulate it by forking
> 	worker processes that pass data between stdin/stdout and
> 	file).

Mr. Virtanen is right. The reason you might think it's async is that most File
I/O operations in Twisted are performed in a response to some request (web,
ftp), and are treated as "large file" operations.  The file is read one 'chunk'
at a time, and more is only read when the network connection it's being written
to becomes available for writing again.  This is what the "producer/consumer"
API in twisted.internet is for.  In general, on linux, this will mean that your
data is available in most cases anyway, due to the speed difference between
network & file I/O.  In the cases where it's not, it's likely that your server
is under high enough load that it's OK to block for an ms or two to wait for
the data.

Asyncore has a great little comment about this:

# After a little research (reading man pages on various unixen, and
# digging through the linux kernel), I've determined that select()
# isn't meant for doing doing asynchronous file i/o.
# Heartening, though - reading linux/mm/filemap.c shows that linux
# supports asynchronous read-ahead.  So _MOST_ of the time, the data
# will be sitting in memory for us already when we go to read it.

Hope this is enlightening.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020729/137d0477/attachment.sig>

From carmstro at twistedmatrix.com  Mon Jul 29 09:44:53 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Mon, 29 Jul 2002 10:44:53 -0500
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020729093531.GB29916@ki.yok.utu.fi>
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi>
Message-ID: <20020729154453.GB11449@twistedmatrix.com>

On Mon, Jul 29, 2002 at 12:35:31PM +0300, Tommi Virtanen wrote:
> 	Later generations have learned to curse select(2), see how
> 	slow network filesystems and cheap IDE disks can be, and hope
> 	for an low-overhead select(2)/poll(2) replacement for both
> 	file IO and non-file IO.

I guess this is the lesson: Don't serve web data from an NFS mount!




From twisted at itamarst.org  Mon Jul 29 12:30:09 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 29 Jul 2002 14:30:09 -0400
Subject: [Twisted-Python] Large file transfers
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi> <20020729103537.A32919@mattc.cm.nu>
Message-ID: <3D4589B1.8040508@itamarst.org>

Matt Campbell wrote:

> Has anyone looked at the kqueue(2) and kevent(2) system calls in
> FreeBSD?  These seem to have less overhead than select(2)/poll(2),
> and FreeBSD also has the AIO system calls, so these two features
> can be used together to provide async file I/O and better async
> socket I/O (at least on one platform).

IronPort (http://www.ironport.com) use these, together with Stackless. I'm 
hoping we can:

  (a) Convince them at some point to use Twisted for the event loop (I talked
      to Christian Tismer about this at EuroPython).

  (b) Get a kqueue reactor written.

Doing (a) might lead almost immediately to (b), but I doubt it will happen 
anytime soon unless someone here knows someone at Ironport or Christian 
Tismer and can push this some more.

If anyone wants to do (b), please do - writing a reactor isn't hard, but if 
you don't have a FreeBSD box it's kinda hard to develop a kqueue one.





From mattcampbell at pobox.com  Mon Jul 29 13:16:38 2002
From: mattcampbell at pobox.com (Matt Campbell)
Date: Mon, 29 Jul 2002 14:16:38 -0500
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <3D4589B1.8040508@itamarst.org>; from twisted@itamarst.org on Mon, Jul 29, 2002 at 02:30:09PM -0400
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi> <20020729103537.A32919@mattc.cm.nu> <3D4589B1.8040508@itamarst.org>
Message-ID: <20020729141637.A33325@mattc.cm.nu>

On Mon, Jul 29, 2002 at 02:30:09PM -0400, Itamar Shtull-Trauring wrote:
>   (b) Get a kqueue reactor written.

I have a FreeBSD box, so I'll do this.
-- 
Matt Campbell
Email and MSN Messenger:  mattcampbell at pobox.com
Web site:  http://www.pobox.com/~mattcampbell/



From twisted at itamarst.org  Mon Jul 29 13:41:34 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 29 Jul 2002 15:41:34 -0400
Subject: [Twisted-Python] Large file transfers
References: <1027055868.11351.33.camel@radii> <200207192104.05786.arashi1@pd.jaring.my> <20020719.094000.00927315.glyph@twistedmatrix.com> <3D404735.4AE6247F@gsfc.nasa.gov> <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi> <20020729103537.A32919@mattc.cm.nu> <3D4589B1.8040508@itamarst.org> <20020729141637.A33325@mattc.cm.nu>
Message-ID: <3D459A6E.5090708@itamarst.org>

Matt Campbell wrote:

>>  (b) Get a kqueue reactor written.
> 
> 
> I have a FreeBSD box, so I'll do this.

Great! I suggest using twisted.internet.poll as a model for how to do it 
(though it'll probably be cleaner). Please feel free to ask questions, on 
the mailing list, IRC (#twisted on irc.openporjects.net) or by emailing me 
directly.





From abo at minkirri.apana.org.au  Mon Jul 29 19:57:30 2002
From: abo at minkirri.apana.org.au (Donovan Baarda)
Date: Tue, 30 Jul 2002 11:57:30 +1000
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020729.103559.08323574.glyph@twistedmatrix.com>
References: <20020726123129.GA7907@soniq.net> <20020726124127.GA10592@twistedmatrix.com> <20020729093531.GB29916@ki.yok.utu.fi> <20020729.103559.08323574.glyph@twistedmatrix.com>
Message-ID: <20020730015730.GB21788@minkirri.apana.org.au>

G'day,

On Mon, Jul 29, 2002 at 10:35:59AM -0500, Glyph Lefkowitz wrote:
> 
> On Mon, 29 Jul 2002 12:35:31 +0300, Tommi Virtanen <tv at twistedmatrix.com> wrote:
> > On Fri, Jul 26, 2002 at 07:41:27AM -0500, Chris Armstrong wrote:
[...]

Does anyone else find it funny to have a discussion about the performance
problems of select/poll/whatever on a list devoted to a server framework
written in an (psedo-)interpreted scripting language :-)

> Asyncore has a great little comment about this:
> 
> # After a little research (reading man pages on various unixen, and
> # digging through the linux kernel), I've determined that select()
> # isn't meant for doing doing asynchronous file i/o.
> # Heartening, though - reading linux/mm/filemap.c shows that linux
> # supports asynchronous read-ahead.  So _MOST_ of the time, the data
> # will be sitting in memory for us already when we go to read it.
> 
> Hope this is enlightening.

I'm curious as to what this actually means. If I give an open file a fcntl()
to set it to non-blocking and use it in a select(), what happens? Do I get
undeterminite behaviour? Does the select always return the file immediately
as ready, only to have the read (sometimes) block?

-- 
----------------------------------------------------------------------
ABO: finger abo at minkirri.apana.org.au for more info, including pgp key
----------------------------------------------------------------------



From glyph at twistedmatrix.com  Tue Jul 30 01:22:31 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 30 Jul 2002 02:22:31 -0500 (CDT)
Subject: [Twisted-Python] Large file transfers
In-Reply-To: <20020730015730.GB21788@minkirri.apana.org.au>
References: <20020729093531.GB29916@ki.yok.utu.fi>
	<20020729.103559.08323574.glyph@twistedmatrix.com>
	<20020730015730.GB21788@minkirri.apana.org.au>
Message-ID: <20020730.022231.21368560.glyph@twistedmatrix.com>

On Tue, 30 Jul 2002 11:57:30 +1000, abo at minkirri.apana.org.au (Donovan Baarda) wrote:
> G'day,
> 
> On Mon, Jul 29, 2002 at 10:35:59AM -0500, Glyph Lefkowitz wrote:
> > 
> > On Mon, 29 Jul 2002 12:35:31 +0300, Tommi Virtanen <tv at twistedmatrix.com> wrote:
> > > On Fri, Jul 26, 2002 at 07:41:27AM -0500, Chris Armstrong wrote:
> [...]
> 
> Does anyone else find it funny to have a discussion about the performance
> problems of select/poll/whatever on a list devoted to a server framework
> written in an (psedo-)interpreted scripting language :-)

Not at all.  Performance and scaling issues with the asynchronous networking
side of things are distinct from CPU load problems with data processing.
Especially when you're spending CPU time on being flexible and robust, it's
important to use the most efficient available mechanisms for doing the
low-level, well-understood tasks that you're basing your high-level logic on.

> > Hope this is enlightening.
> 
> I'm curious as to what this actually means. If I give an open file a fcntl()
> to set it to non-blocking and use it in a select(), what happens? Do I get
> undeterminite behaviour? Does the select always return the file immediately
> as ready, only to have the read (sometimes) block?

You can't set a file to non-blocking, basically.  It won't do anything.
select() will always say that files are readable, and those files will "block"
when you read from them.  Then again, this is *extremely* fast, at least on
linux systems.  (I don't know about BSD, but at least on Windows you can't even
*pass* a file fd to select; it will just give you an error.)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020730/75967034/attachment.sig>

From norbert.klamann at klamann-software.de  Tue Jul 30 03:50:50 2002
From: norbert.klamann at klamann-software.de (norbert.klamann at klamann-software.de)
Date: Tue, 30 Jul 2002 11:50:50 +0200
Subject: [Twisted-Python] Please allow download of tarballs from viewcvs
Message-ID: <E17ZTeU-0006iq-00@config13.kundenserver.de>

Hello, list,

would you mind to allow the generation of tarballs from cvs repository
on the fly? 
It is technically possible in viewcvs, at least on new versions. It is a
Setting in viewcvs's configuration file. 
I can't use cvs in itself because of firewall issues on customer's site.

Cvsgrab doesn't cut it either, because it can't handle the parameter
handling of your viewcvs installation. 

Another possibility would be an upgrade to viewcvs à la sourceforge,
i.e. 0.8.

Thanks for your help !



From norbert.klamann at klamann-software.de  Tue Jul 30 05:01:23 2002
From: norbert.klamann at klamann-software.de (norbert.klamann at klamann-software.de)
Date: Tue, 30 Jul 2002 13:01:23 +0200
Subject: [Twisted-Python] Please allow download of tarballs from viewcvs[2]
Message-ID: <E17ZUkl-0003Lh-00@config14.kundenserver.de>

[Sorry, forgot to sign the mail]
Hello, list,

would you mind to allow the generation of tarballs from cvs repository
on the fly? 
It is technically possible in viewcvs, at least on new versions. It is a
Setting in viewcvs's configuration file. 
I can't use cvs in itself because of firewall issues on customer's site.

Cvsgrab doesn't cut it either, because it can't handle the parameter
handling of your viewcvs installation. 

Another possibility would be an upgrade to viewcvs à la sourceforge,
i.e. 0.8.

Thanks for your help !

Norbert Klamann
norbert.klamann at klamann-software.de



From arashi1 at pd.jaring.my  Tue Jul 30 10:19:39 2002
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Wed, 31 Jul 2002 00:19:39 +0800
Subject: [Twisted-Python] Dynamic web application using twisted.web.resource
Message-ID: <200207310019.39373.arashi1@pd.jaring.my>

Hello fellow twisters,

This is a question (albeit a long one) directed at twisted.web and resource.

The project:
I would like to serve a dynamic website using the twisted web server. I 
understand that the webserver's 'root' directory can be set at a file? I may 
have a misunderstanding of the code and docs but if so, feel free to set me 
straight.

The website (not real):
http://www.mywebsite.com/

This is the root of the site, which is in reality a erm..rpy? program? Which 
means that there are _no_ static pages at all. And no other 'file' - 
everything goes through that .rpy file. (or whatever else I should be using)

In a browser, entering this would get a dynamically 'constructed' page which 
is in fact:

myobject.index()

From here on, something like:
http://www.mywebsite.com/projects/project_ako

would actually be (in the code) something like:

myobject.projects["project_ako"].index(myvar=None)

which returns an html page suitable for the browser's consumption.
On the other hand this:

http://www.mywebsite.com/projects/project_ako?myvar=bold

(for http GET. POST should be handled as well...how? I am guessing the request 
object?)

Would call:
myobject.projects["project_ako"].index(myvar='bold')

Any other subobject of project_ako would 'call' a method on that object.

So for:
http://www.mywebsite.com/projects/project_ako/getSize

Would call:
myobject.projects["project_ako"].getSize()

The return value being sent back to the browser. Calls to non-existing methods 
get a "No such method or object" error returned - formatted, of course.

The question is of course, how do you differentiate between an object and a 
method? This is done by the application itself. It would check to see if that 
object has a method with that name, if not check to see if it has a child 
object with that name. Else return error.

The thing is, I know I need to use twisted.web.resource but I'm not sure 
_how_. How does this fit in with the .rpy file? I think I need to create my 
modules and classes and then create an .rpy which acts as the 
erm..'interface' to the modules and classes. Could someone give me some hints 
and tips?

Conceptually, it's quite simple but I can't seem to figure out how to do it 
with twisted...Anyway, thanks for any help, in advance.

-- 
Regards,
Mukhsein Johari



From twisted at itamarst.org  Tue Jul 30 11:48:55 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 30 Jul 2002 13:48:55 -0400
Subject: [Twisted-Python] Dynamic web application using twisted.web.resource
References: <200207310019.39373.arashi1@pd.jaring.my>
Message-ID: <3D46D187.3070807@itamarst.org>

Mukhsein Johari wrote:

> The thing is, I know I need to use twisted.web.resource but I'm not sure 
> _how_. How does this fit in with the .rpy file? I think I need to create my 
> modules and classes and then create an .rpy which acts as the 
> erm..'interface' to the modules and classes. Could someone give me some hints 
> and tips?

The model you're describing is just what Zope's ZPublisher and Quixote do. I 
would suggest using Zope, but if you feel it's too heavy then Quixote will 
likely be a perfect fit.

Another alternative, if you intend to use Twisted's other capabilities and 
thus want to use twisted.web, is something like this:


class PublisherResource(resource.Resource):

     isLeaf = 1

     def __init__(self, root):
         self.root = root

     def render(self, request):
         obj = self.root
         for p in request.postpath:
             # convert "/foo/bar" to self.root.foo.bar
             obj = getattr(obj, p)
         if not callable(obj):
              return "arg"
         else:
              return obj(request)

Of course, this is probably insecure, buggy, and may not even work, but 
that's the general idea of how to do it.





From dp at twistedmatrix.com  Tue Jul 30 13:15:13 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Tue, 30 Jul 2002 12:15:13 -0700
Subject: [Twisted-Python] Dynamic web application using twisted.web.resource
In-Reply-To: <200207310019.39373.arashi1@pd.jaring.my>
Message-ID: <ACFC8A92-A3F0-11D6-8A4F-003065B25CAA@twistedmatrix.com>

On Tuesday, July 30, 2002, at 09:19 AM, Mukhsein Johari wrote:
>
> The project:
> I would like to serve a dynamic website using the twisted web server. I
> understand that the webserver's 'root' directory can be set at a file? 
> I may
> have a misunderstanding of the code and docs but if so, feel free to 
> set me
> straight.

When you create a tap file using "bin/mktap web --path /foo/bar/baz", 
mktap creates a File instance, which is a Resource subclass, which knows 
to look in "/foo/bar/baz" as the root directory of the site. However, 
mktap is just a "helper" script that instanciates, configures, and 
persists various common application types. If you want the root object 
of your web site to be a custom Resource subclass that only serves 
dynamic pages, you're free to do that.

> The website (not real):
> http://www.mywebsite.com/
>
> This is the root of the site, which is in reality a erm..rpy? program? 
> Which
> means that there are _no_ static pages at all. And no other 'file' -
> everything goes through that .rpy file. (or whatever else I should be 
> using)

So, as I just said, what you should do is create your own Application 
instance, create an instance of twisted.web.server.Site, and create your 
own custom Resource subclass to act as the root of that site. Your 
Resource subclass should override getChild(name, request) and 
render(request), as I will describe below. Here's how you would go about 
starting your custom server:

# MyCoolWebServer.py

from twisted.web import server
from twisted.internet import reactor

import myGreatResourceSubclass

root = myGreatResourceSubclass.MyRoot()

site = server.Site(root)

reactor.listenTCP(8080, site)
reactor.run()

> In a browser, entering this would get a dynamically 'constructed' page 
> which
> is in fact:
>
> myobject.index()

In the example above, visiting the root page would end up invoking 
root.render(request).

> From here on, something like:
> http://www.mywebsite.com/projects/project_ako
>
> would actually be (in the code) something like:
>
> myobject.projects["project_ako"].index(myvar=None)

If these semantics are what you *really* want (i.e. transparency, 
getitem, or getattr being used for traversal), I suggest looking at Zope 
or Quixote, as Itamar suggested. However, here's how the following would 
look in twisted:

root.getChild("projects", request).getChild("project_ako", 
request).render(request)

In your root Resource subclass, you can define getChild to do whatever 
you wish such as dynamically generate a new Resource subclass to handle 
the "projects" portion, which in turn has a getChild that knows how to 
create an object to handle the "project_ako" portion, which in turn has 
a render() method that returns a string, which will be sent to the 
browser.

> which returns an html page suitable for the browser's consumption.
> On the other hand this:
>
> http://www.mywebsite.com/projects/project_ako?myvar=bold
>
> (for http GET. POST should be handled as well...how? I am guessing the 
> request
> object?)
>
> Would call:
> myobject.projects["project_ako"].index(myvar='bold')

It would be exactly the same call as above, except request.args would be 
a dictionary that looked like this:

{'myvar': ['bold']}

Note that every value in the args dictionary is always a list, to make 
handling lists and non lists more uniform.

> Any other subobject of project_ako would 'call' a method on that object.
>
> So for:
> http://www.mywebsite.com/projects/project_ako/getSize
>
> Would call:
> myobject.projects["project_ako"].getSize()
>
> The return value being sent back to the browser. Calls to non-existing 
> methods
> get a "No such method or object" error returned - formatted, of course.

If you want automatic getChild traversal to stop at the object 
representing "project_ako", set isLeaf = 1 on the object representing 
"project_ako". This will cause render(request) to be called on 
"project_ako" with the remaining elements of the path in 
request.postpath. You can then implement the semantics described above 
in your render() method.

However, I find it much easier to divide functionality into separate 
classes and always use render() to do the html generation.

> The question is of course, how do you differentiate between an object 
> and a
> method? This is done by the application itself. It would check to see 
> if that
> object has a method with that name, if not check to see if it has a 
> child
> object with that name. Else return error.

If this is *really* the functionality that you want, again, this is far 
more similar to the traversal semantics of Zope or Quixote. Twisted has 
taken a far more explicit tack, where there is a specific api that your 
objects must implement to provide object-publishing functionality.

>
> The thing is, I know I need to use twisted.web.resource but I'm not sure
> _how_. How does this fit in with the .rpy file? I think I need to 
> create my
> modules and classes and then create an .rpy which acts as the
> erm..'interface' to the modules and classes. Could someone give me some 
> hints
> and tips?
>
> Conceptually, it's quite simple but I can't seem to figure out how to 
> do it
> with twisted...Anyway, thanks for any help, in advance.

Hope this helps!

Donovan




From steve.waterbury at gsfc.nasa.gov  Tue Jul 30 09:12:49 2002
From: steve.waterbury at gsfc.nasa.gov (Steve Waterbury)
Date: Tue, 30 Jul 2002 11:12:49 -0400
Subject: [Twisted-Python] Patch for dbauth.tac in examples
Message-ID: <3D46ACF1.75845321@gsfc.nasa.gov>

Since I want to implement a PB-based app with db authorization, I 
was tinkering with the dbauth.tac example in an effort to educate 
myself.  Changed "passport" to "cred" and set the database explicitly 
(created the dbcred tables in the "twisted" database that bugs uses).  

"Create an Identity", "remove", and "[change] password" work; there 
seems to be a problem with gotPerspectives' call to dbgadgets.py, but 
I haven't messed with gadgets (don't need them yet), so I won't be 
looking at that.  (A gadgets cognoscente could fix it in seconds, 
anyway, I'm sure!  ;^)  

Cheers,
-- Steve.

Stephen C. Waterbury  http://misspiggy.gsfc.nasa.gov/people/waterbug.html
-------------- next part --------------
*** dbauth.tac	Tue Jul 30 10:25:04 2002
--- dbauth-new.tac	Tue Jul 30 09:50:37 2002
***************
*** 1,18 ****
  #!python
  
  from twisted.internet.app import Application
- from twisted.internet import passport
  from twisted.words import service, ircservice
! from twisted.enterprise import adbapi, dbpassport, dbgadgets
  from twisted.web import server
  
! auth = dbpassport.DatabaseAuthorizer(adbapi.ConnectionPool("pyPgSQL.PgSQL"))
  a = Application("db-auth", authorizer=auth)
  ws = service.Service("twisted.words", a)
  
  gdgt = dbgadgets.IdentitiesGadget(auth)
  
! a.listenOn(8486, server.Site(gdgt))
  
  a.listenTCP(6667, ircservice.IRCGateway(ws))
  
--- 1,17 ----
  #!python
  
  from twisted.internet.app import Application
  from twisted.words import service, ircservice
! from twisted.enterprise import adbapi, dbcred, dbgadgets
  from twisted.web import server
  
! auth = dbcred.DatabaseAuthorizer(adbapi.ConnectionPool("pyPgSQL.PgSQL", database="twisted"))
  a = Application("db-auth", authorizer=auth)
  ws = service.Service("twisted.words", a)
  
  gdgt = dbgadgets.IdentitiesGadget(auth)
  
! a.listenTCP(8486, server.Site(gdgt))
  
  a.listenTCP(6667, ircservice.IRCGateway(ws))
  

From jon at totient.demon.co.uk  Tue Jul 30 14:51:01 2002
From: jon at totient.demon.co.uk (Jon Dyte)
Date: Tue, 30 Jul 2002 21:51:01 +0100 (BST)
Subject: [Twisted-Python] Please allow download of tarballs from viewcvs[2]
In-Reply-To: norbert.klamann@klamann-software.de
References: <E17ZUkl-0003Lh-00@config14.kundenserver.de>
Message-ID: <15686.64565.556903.194894@erdos.totient.com>

Hi

I'd like to second this request.
Downloading cvs versions via the viewcvs page would be a big win.

+1

Jon



From barry at zope.com  Wed Jul 31 10:56:15 2002
From: barry at zope.com (Barry A. Warsaw)
Date: Wed, 31 Jul 2002 12:56:15 -0400
Subject: [Twisted-Python] You guys rock
Message-ID: <15688.5807.633561.598158@yyz.zope.com>

I wanted to test out some news/mail gatewaying for Mailman 2.1 but I
didn't want to go through the hassle of actually connecting things up
to a real news server, and I /definitely/ didn't want to actually try
to install inn or some nonesense (I'd like to do some other work this
week :).

I wished I had something like Lib/smtpd.py in the Python distro for
the server side of NNTP, then it dawned on me that I remember Moshe
and crew saying that Twisted comes with a news server.  Well, let's
just see how easy it would be to hook up.

You guys have a big problem, because it was /way/ too easy to do!  How
are you going to make the big consulting bucks? :)

Three commands and I had an nntp server with a single newsgroup that
was featured enough to connect Mozilla to, and to point Mailman's
gateway at and actually get messages flowing back and forth.
Congratulations!

I don't know if I'm going to do much else with Twisted, but I /would/
like to try to figure out how to use it in a Mailman functional test
suite.  Right now I have some very ugly kludges to start up smtpd.py,
send a message to it, and then suck the message out and compare the
results with what I expect.  As time permits I think I'll try to see
how easy it would be to use Twisted in the role of smtpd.py, and add
some tests for news as well as mail.

The main issue is that unittest must be able to fire off the server,
and extract information from it once the message has been propagated.
My current test is pretty kludgy, but I'll spare you the asyncgore
(sic).  What would be ideal would be to be able to create a Twisted
service but don't start it, send a message via Mailman machinery, then
start the server and block on reading that message back from Twisted
(with a timeout).  I'd run Twisted with both an SMTP and NNTP server.
Has anybody else thought about using Twisted in a unit or functional
test situation?

I'm not on this list so please CC me.

Anyway, good stuff, thanks.
-Barry

P.S. You guys need a bass player. :)



From twisted at itamarst.org  Wed Jul 31 12:59:31 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 31 Jul 2002 14:59:31 -0400
Subject: [Twisted-Python] You guys rock
References: <15688.5807.633561.598158@yyz.zope.com>
Message-ID: <3D483393.8040802@itamarst.org>

Barry A. Warsaw wrote:

> You guys have a big problem, because it was /way/ too easy to do!  How
> are you going to make the big consulting bucks? :)

It's simple:

1. Get everyone to use it.
2. ???
3. MONEY!

> Three commands and I had an nntp server with a single newsgroup that
> was featured enough to connect Mozilla to, and to point Mailman's
> gateway at and actually get messages flowing back and forth.
> Congratulations!

Thanks - can we ask you for a quote for our 1.0 press release?

> I don't know if I'm going to do much else with Twisted, but I /would/
> like to try to figure out how to use it in a Mailman functional test
> suite.  Right now I have some very ugly kludges to start up smtpd.py,
> send a message to it, and then suck the message out and compare the
> results with what I expect.  As time permits I think I'll try to see
> how easy it would be to use Twisted in the role of smtpd.py, and add
> some tests for news as well as mail.
> 
> The main issue is that unittest must be able to fire off the server,
> and extract information from it once the message has been propagated.
> My current test is pretty kludgy, but I'll spare you the asyncgore
> (sic).  What would be ideal would be to be able to create a Twisted
> service but don't start it, send a message via Mailman machinery, then
> start the server and block on reading that message back from Twisted
> (with a timeout).  I'd run Twisted with both an SMTP and NNTP server.
> Has anybody else thought about using Twisted in a unit or functional
> test situation?

Well, if the Twisted server is in the same process (you can run it in a 
different thread) you have two alternatives:

reactor.listenTCP(8025, myFactory)
# we don't call reactor.run() here, instead we do
while testIsntDone:
     reactor.iterate() # do a single iteration of the event loop

Or:

reactor.listenTCP(8025, myFactory)
reactor.run()
# when test is done it can call reactor.crash() to stop the event loop,
# which unlike reactor.stop() still allows us to run() again


In both cases you can use reactor.callLater() for a timoeut. We do both in 
our unit tests (twisted.test) package, so you can find some examples there.

If you want to run Twisted in a different process, you may want to look at 
how admin/accepttests does it. Basically you make a python script that has a 
twisted.internet.app.Application instance called "application" at module 
level, use the twistd command to run it (twistd -y myscript.py), and then 
"kill `cat twistd.pid`" to shutdown the server. If you want to communicate 
with it while its running xml-rpc would probably work nicely 
(twisted.web.xmlrpc and see the example in doc/examples/).





From carmstro at twistedmatrix.com  Wed Jul 31 18:50:44 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 31 Jul 2002 20:50:44 -0400
Subject: [Twisted-Python] Defer changes
Message-ID: <1028163045.2759.5.camel@radii>

Two changes to defer.py

1) get rid of 'logError' as default errback. Tv complained about this,
and I agree that it's silly -- logging should happen at the end of the
chain, not at random points during the execution. instead of using
'logError', it now just uses (lambda x: x).

2) Get rid of old PB compatibility thing. We had a check for StringType
in the result of a call/errback, because PB errors used to be strings.
They're not any more. I committed the Failure patch months ago ;-)

And one more thing that I propose, but that's not in this patch:
Enforcing the arguments to errbacks to be Failures. Very confusing
things may happen if you pass something other than a Failure to an
errback, and besides, passing something other than a Failure is like
using 'raise "string"' rather than 'raise MyError("string")'.

Here's the patch:

Index: twisted/internet/defer.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/defer.py,v
retrieving revision 1.12
diff -u -r1.12 defer.py
--- twisted/internet/defer.py	24 Jul 2002 19:04:56 -0000	1.12
+++ twisted/internet/defer.py	1 Aug 2002 00:42:15 -0000
@@ -103,7 +103,7 @@
         These will be executed when the 'master' callback is run.
         """
         cbs = ((callback, callbackArgs, callbackKeywords),
-               (errback or logError, errbackArgs, errbackKeywords))
+               (errback or (lambda x: x), errbackArgs, errbackKeywords))
         if self.default:
             self.callbacks[-1] = cbs
         else:
@@ -228,14 +228,8 @@
                                              callbackArgs=(0,),
                                              errbackArgs=(1,))
                     break
-                if type(self.result) != types.StringType:
-                    # TODO: make this hack go away; it has something to do
-                    # with PB returning strings from errbacks that are
-                    # actually tracebacks that we still want to handle as
-                    # errors sometimes... can't find exactly where right
-                    # now
-                    if not isinstance(self.result, failure.Failure):
-                        self.isError = 0
+                if not isinstance(self.result, failure.Failure):
+                    self.isError = 0
             except:
                 self.result = failure.Failure()
                 self.isError = 1


-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From carmstro at twistedmatrix.com  Wed Jul 31 19:41:40 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 31 Jul 2002 21:41:40 -0400
Subject: [Twisted-Python] Updated defer patch
Message-ID: <1028166102.2759.24.camel@radii>

Ok, so I've added some code that wraps plain strings passed to .errback
with a "DefaultException" and then issues a DeprecationWarning.
Unfortunately, this patch causes tests to fail, since they pass a string
to .errback and try to ensure that what gets passed to their
error-callback is the same thing.  So, following itamar's lead, this is
backwards-compatibility-code-that's-only-half-backwards-compatible ;-)

I've also updated the docstrings for callback and errback, they were
out-of-date.

(Note, this is an updated version of my last patch, so those
modifications are duplicated here)

Index: twisted/internet/defer.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/defer.py,v
retrieving revision 1.12
diff -u -r1.12 defer.py
--- twisted/internet/defer.py	24 Jul 2002 19:04:56 -0000	1.12
+++ twisted/internet/defer.py	1 Aug 2002 01:36:17 -0000
@@ -32,6 +32,9 @@
 class TimeoutError(Exception):
     pass
 
+class DefaultException(Exception):
+    pass
+
 def logError(err):
     log.err(err)
     return err
@@ -103,7 +106,7 @@
         These will be executed when the 'master' callback is run.
         """
         cbs = ((callback, callbackArgs, callbackKeywords),
-               (errback or logError, errbackArgs, errbackKeywords))
+               (errback or (lambda x: x), errbackArgs, errbackKeywords))
         if self.default:
             self.callbacks[-1] = cbs
         else:
@@ -152,10 +155,9 @@
 
         Each callback will have its result passed as the first
         argument to the next; this way, the callbacks act as a
-        'processing chain'.
-
-        If this deferred has not been armed yet, nothing will happen until it
-        is armed.
+        'processing chain'. Also, if the success-callback returns a Failure
+        or raises an Exception, processing will continue on the *error*-
+        callback chain.
         """
         self._startRunCallbacks(result, 0)
 
@@ -165,13 +167,24 @@
 
         Each callback will have its result passed as the first
         argument to the next; this way, the callbacks act as a
-        'processing chain'.
-
-        If this deferred has not been armed yet, nothing will happen until it
-        is armed.
-        """
-        if not fail:
+        'processing chain'. Also, if the error-callback returns a non-Failure
+        or doesn't raise an Exception, processing will continue on the
+        *success*-callback chain.
+
+        The argument must be a Failure instance or None, and strings are
+        accepted for backward-compatibility, but are deprecated.
+        """
+        if isinstance(fail, types.StringType) or isinstance(fail, types.UnicodeType):
+            import warnings
+            warnings.warn(
+                "Don't pass strings (like %r) to Deferred.errback (replacing with a DefaultException)." %
+                          fail, DeprecationWarning, stacklevel=2)
+            fail = failure.Failure(DefaultException(fail))
+        elif fail is None:
             fail = failure.Failure()
+        elif not isinstance(fail, failure.Failure):
+            raise TypeError("Deferred.errback accepts failure.Failure instances, strings, or None. %r is none of these." % fail)
+            
         self._startRunCallbacks(fail, 1)
 

@@ -228,14 +241,8 @@
                                              callbackArgs=(0,),
                                              errbackArgs=(1,))
                     break
-                if type(self.result) != types.StringType:
-                    # TODO: make this hack go away; it has something to do
-                    # with PB returning strings from errbacks that are
-                    # actually tracebacks that we still want to handle as
-                    # errors sometimes... can't find exactly where right
-                    # now
-                    if not isinstance(self.result, failure.Failure):
-                        self.isError = 0
+                if not isinstance(self.result, failure.Failure):
+                    self.isError = 0
             except:
                 self.result = failure.Failure()
                 self.isError = 1



-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From dp at twistedmatrix.com  Wed Jul 31 23:34:57 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 31 Jul 2002 22:34:57 -0700
Subject: [Twisted-Python] WebConduit
Message-ID: <B96E16A0.1783%dp@twistedmatrix.com>

I developed this as a proof of concept and several people have expressed
interest in seeing the implementation, so I thought I'd clean it up a little
and send it to the list.

The WebConduit is a project that I have been thinking about doing for
several years now. Basically, it allows users to interact with a MUD server
from a web page without any silly Java applets or frames that reload every 5
seconds.

It does rely heavily on JavaScript to work, specifically it relies on the
later browser's ability to have JavaScript affect the contents of the page
after it has loaded. It also uses a trick pioneered by KnowNow,
www.knownow.com, of opening a frame to a page on the server which the server
never finishes sending to the browser. Using this technique, the Twisted
server can push new JavaScript commands to this iframe in response to events
on the remote server, and these JavaScript commands can in turn affect the
DOM of the main page.

It also uses another iframe to send commands to the twisted server.
JavaScript can set the src attribute of the iframe and use GET parameters to
send arbitrary variables to Twisted. Since all three iframes are coming from
the same browser, the browser sends the same cookie with all three requests.
Each request on the server then has access to the same Session object, and
the three frames can communicate using this session object.

That's about it, I'm pretty proud of the result. Enhoy.

Donovan

P.s. Put the rpy, js, and html files in a directory served by twisted.web,
and put the py file on your PYTHONPATH somewhere.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: WebConduit.rpy
Type: application/applefile
Size: 490 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020731/172c3f6a/attachment-0010.bin>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: WebConduit.rpy
URL: </pipermail/twisted-python/attachments/20020731/172c3f6a/attachment.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: conduit.html
Type: application/applefile
Size: 488 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020731/172c3f6a/attachment-0011.bin>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: conduit.html
URL: </pipermail/twisted-python/attachments/20020731/172c3f6a/attachment-0001.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: conduit.js
Type: application/applefile
Size: 486 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020731/172c3f6a/attachment-0012.bin>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: conduit.js
URL: </pipermail/twisted-python/attachments/20020731/172c3f6a/attachment-0002.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: input.html
Type: application/applefile
Size: 486 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020731/172c3f6a/attachment-0013.bin>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: input.html
URL: </pipermail/twisted-python/attachments/20020731/172c3f6a/attachment-0003.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: webconduit.py
Type: application/applefile
Size: 489 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020731/172c3f6a/attachment-0014.bin>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: webconduit.py
URL: </pipermail/twisted-python/attachments/20020731/172c3f6a/attachment-0004.ksh>

