From chris at withers.org  Mon Apr  1 15:15:33 2019
From: chris at withers.org (Chris Withers)
Date: Mon, 1 Apr 2019 22:15:33 +0100
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
Message-ID: <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>

On 26/03/2019 09:53, Tobias Oberstein wrote:
>>> The Autobahn guys still show ReconnectingClientFactory in their docs, 
> 
> Where did you find that? That would be a doc bug, but in the _docs_, 
> there is no reference to ReconnectingClientFactory
> 
> (cpy372_3) oberstet at intel-nuci7:~$ find 
> ~/scm/crossbario/autobahn-python/docs/ -type f -exec grep -Hi 
> "ReconnectingClientFactory" {} \;
> (cpy372_3) oberstet at intel-nuci7:~$
> 
> We do have some example code using ReconnectingClientFactory though:
> 
> (cpy372_3) oberstet at intel-nuci7:~$ find 
> ~/scm/crossbario/autobahn-python/examples/ -type f -exec grep -Hi 
> "ReconnectingClientFactory" {} \; | wc -l
> 8

Yeah, this one: 
https://github.com/crossbario/autobahn-python/tree/master/examples/twisted/websocket/reconnecting

Would be good to get that converted...

>>  1. ReconnectingClientFactory is destined for deprecation, eventually.
>>       You should just adopt the "new" thing now so that if we get more
>>     energy to cycle the APIs and delete the old stuff, you'll have less
>>     hassle to deal with.  ("New" is in quotes here since it's been
>>     around for well over 3 years at this point; Autobahn should update
>>     too, not just you.)
> 
> Autobahn will automatically use
> 
> twisted.application.internet.ClientService
> 
> for auto-reconnect when on Twisted 16.1.0+
> 
> https://github.com/crossbario/autobahn-python/blob/master/autobahn/twisted/wamp.py#L349 

I'm not using WAMP, just raw websocket.

>>  2. ClientService works with endpoints, which means you can use it with
>>     /any/ kind of transport, like SSH transports, subprocesses, etc.
>>       Most practically, it works with HostnameEndpoint which is a much
>>     better way to get TLS than connectSSL; 

What's the simplest way to connect a ClientService to a websocket url 
(ie: ws://host/endpoint or wss://host/endpoint)

>>      1. if you want to shut down a ReconnectingClientFactory:
>>          1. you have to call stopTrying, then uh...
>>          2. find the last protocol it built with buildProtocol, then

This hasn't proved to hard.

>>          3. grab its transport (hope it's saving that transport as
>>             '.transport', because it doesn't actually have to)
>>          4. call loseConnection

Why? Sending a WebSocket protocol-level close from the client seems to 
work just fine?

>>  5. It's more testable because it just takes its clock and reactor as
>>     constructor parameters, rather than requiring post-hoc
>>     poorly-documented attribute patching to become testable.

I've abstracted all that away into https://github.com/cjw296/carly.
See 
https://github.com/cjw296/carly/blob/master/tests/test_autobahn_websocket_client.py 
for example.
I do still have writing docs for carly on my list of things to do.

It would be great if Twisted ever had a real testing reactor, but I 
think we all know that's never going to happen ;-)

Besides, it's actually useful to test with real networking...

Chris


From tobias.oberstein at gmail.com  Tue Apr  2 00:56:46 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Tue, 2 Apr 2019 08:56:46 +0200
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
Message-ID: <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>

>>>> The Autobahn guys still show ReconnectingClientFactory in their docs, 
>>
>> Where did you find that? That would be a doc bug, but in the _docs_, 
>> there is no reference to ReconnectingClientFactory
>>
>> We do have some example code using ReconnectingClientFactory though:
>>
> Yeah, this one: 
> https://github.com/crossbario/autobahn-python/tree/master/examples/twisted/websocket/reconnecting 
> 
> 
> Would be good to get that converted...

yeah, agreed.

unlikely to happen though (lack of time) unless someone steps up with a PR

> What's the simplest way to connect a ClientService to a websocket url 
> (ie: ws://host/endpoint or wss://host/endpoint)

you might adapt / start from this (again WAMP, but just a matter of 
using websocket rather than wamp factories/protocols):

https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/basic/client_using_clientservice.py


From tobias.oberstein at gmail.com  Tue Apr  2 01:25:17 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Tue, 2 Apr 2019 09:25:17 +0200
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
Message-ID: <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>

Am 02.04.19 um 09:03 schrieb Chris Withers:
> On 02/04/2019 07:56, Tobias Oberstein wrote:
>>> Would be good to get that converted...
>>
>> yeah, agreed.
>>
>> unlikely to happen though (lack of time) unless someone steps up with 
>> a PR
> 
> Okay, but then don't be surprised when people get tripped up by it...

well, I never claimed to be surprised. I was only triggered by the 
reference to our _docs_ as we've put quite some work improving on that.

but honestly, lets not further drum that line;) it leads nowhere. I am 
with you: there is room for improvements. if you have a PR, please think 
about contributing! we'll be working with you / merging ..

> 
>>> What's the simplest way to connect a ClientService to a websocket url 
>>> (ie: ws://host/endpoint or wss://host/endpoint)
>>
>> you might adapt / start from this (again WAMP, but just a matter of 
>> using websocket rather than wamp factories/protocols):
>>
>> https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/basic/client_using_clientservice.py 
> 
> 
> Any way to get rid of the ugly duplication between the url in line 69 
> and the endpoint on line 72?
> 
> I seem to remember that ends up happening with or without ClientService.

I am aware, but no, it's designed like this, because WebSocket requires 
a HTTP URL (with potentially path components, query parameters etc) in 
the opening handshake while the _transport_ does not necessarily have that.

Autobahn allows you to run WebSocket over basically everything that is a 
bidirectional byte pipe: TCP of course, but also Unix domain socket, 
pipes, Tor onion services (via https://github.com/meejah/txtorcon) and 
even serial ports!

Cheers,
/Tobias

> 
> Chris


From chris at withers.org  Tue Apr  2 01:50:31 2019
From: chris at withers.org (Chris Withers)
Date: Tue, 2 Apr 2019 08:50:31 +0100
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
 <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
Message-ID: <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>

On 02/04/2019 08:25, Tobias Oberstein wrote:
>>> https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/basic/client_using_clientservice.py 
>>
>> Any way to get rid of the ugly duplication between the url in line 69 
>> and the endpoint on line 72?
>>
>> I seem to remember that ends up happening with or without ClientService.
> 
> I am aware, but no, it's designed like this, because WebSocket requires 
> a HTTP URL (with potentially path components, query parameters etc) in 
> the opening handshake while the _transport_ does not necessarily have that.
> 
> Autobahn allows you to run WebSocket over basically everything that is a 
> bidirectional byte pipe: TCP of course, but also Unix domain socket, 
> pipes, Tor onion services (via https://github.com/meejah/txtorcon) and 
> even serial ports!

Right, but correct me if I'm wrong, my understanding is that URL stands 
for Univeral Resource Locator and URLs can encode all of the things you 
describe. They certainly contain the host and port, so shouldn't there 
be a graceful way to specify a URL once and have everything that needs 
that info or a subset of it get it from there?

(This isn't necessarily aimed at AutoBahn, seems to be something common 
in Twisted...)

Chris


From tobias.oberstein at gmail.com  Tue Apr  2 02:07:48 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Tue, 2 Apr 2019 10:07:48 +0200
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
 <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
 <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>
Message-ID: <3d864a33-90bf-3f76-fe17-e627e26ee0b5@gmail.com>

Am 02.04.19 um 09:50 schrieb Chris Withers:
> On 02/04/2019 08:25, Tobias Oberstein wrote:
>>>> https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/basic/client_using_clientservice.py 
>>>
>>>
>>> Any way to get rid of the ugly duplication between the url in line 69 
>>> and the endpoint on line 72?
>>>
>>> I seem to remember that ends up happening with or without ClientService.
>>
>> I am aware, but no, it's designed like this, because WebSocket 
>> requires a HTTP URL (with potentially path components, query 
>> parameters etc) in the opening handshake while the _transport_ does 
>> not necessarily have that.
>>
>> Autobahn allows you to run WebSocket over basically everything that is 
>> a bidirectional byte pipe: TCP of course, but also Unix domain socket, 
>> pipes, Tor onion services (via https://github.com/meejah/txtorcon) and 
>> even serial ports!
> 
> Right, but correct me if I'm wrong, my understanding is that URL stands 
> for Univeral Resource Locator and URLs can encode all of the things you 

WebSocket needs a _HTTP_ URL

an URL from the HTTP scheme cannot encode eg a Unix domain socket path 
or a serial port

one could certainly come with with other/different non-HTTP URL schemes 
.. and in some way, Autobahn WAMP machinery has sth in that direction:

eg WAMP can be run not only over WebSocket, but also RawSocket, which is 
a WAMP-specific transport (above byte-level, at the framing level), that 
is simpler than WebSocket, and for that we using (non-standard) URLs like

rs://<host:port>
rss://<host:port>

fwiw, WAMP is a protocol with a clear-cut, rigorous and decoupled layering:

- bidirectional reliable byte level transport (tcp, uds, pipes, ..)
- message framing (websocket, rawsocket, ..)
- serialization (json, cbor, flatbuffers, ..)

and Autobahn and Crossbar.io support _every_ combination of those layers 
(dozens) to run WAMP

> describe. They certainly contain the host and port, so shouldn't there 
> be a graceful way to specify a URL once and have everything that needs 
> that info or a subset of it get it from there?

a (fully qualified) HTTP URL of course encodes a host and port, but that 
only covers transports that have those notions

> 
> (This isn't necessarily aimed at AutoBahn, seems to be something common 
> in Twisted...)

things look only "simple" when leaving out details;)

anyways: this is now OT to the original issue I would think ..

> 
> Chris


From dholth at gmail.com  Tue Apr  2 08:29:15 2019
From: dholth at gmail.com (Daniel Holth)
Date: Tue, 2 Apr 2019 10:29:15 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+7AOUam+Ua0k+AD=dnBMM11UyFo-jhCYBnEy09s9vBadg@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
 <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
 <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>
 <95B8427F-EF45-4CAB-AB6F-44860047FE74@twistedmatrix.com>
 <CAG8k2+7AOUam+Ua0k+AD=dnBMM11UyFo-jhCYBnEy09s9vBadg@mail.gmail.com>
Message-ID: <CAG8k2+4LUzbC36reZGSRLi2K6bVu0Nfe5d7Z0YPhPLwgKLssMA@mail.gmail.com>

Let me know if you're able to try getting a https certificate in this way:

Using tls-alpn-01 negotiation with txsni (acme branch) and the
dehydrated letsencrypt client:

Install txsni (acme branch):

pip install git+https://github.com/dholth/txsni at acme#egg=txsni

Unpack dehydrated acme client shell script from https://dehydrated.io/

Make and enter config directory:

mkdir -p ~/etc/dehydrated

cd ~/etc/dyhydrated

Use acmesni to listen on port 443:

authbind twist web --listen acmesni:~/etc/dehydrated:tcp6:443 &

Make config file:

echo CHALLENGETYPE="tls-alpn-01" > config

Create letsencrypt account:

dehydrated --register --accept-terms

Request certificate (replace example.com with your fqnd):

dehydrated -c -d example.com


Letsencrypt should request a special certificate from the twisted web
server to prove domain control, and then dehydrated installs the new
certificate for 'example.com' in ~/etc/dehydrated/certs/...
https://example.com will be ready to go.


Authbind, to listen on privileged ports in linux without root:

(install authbind); touch /etc/authbind/byport/{80,443}; chown
<username> /etc/authbind/byport/*; chmod u+x /etc/authbind/byport/*

On Sun, Mar 24, 2019 at 9:17 PM Daniel Holth <dholth at gmail.com> wrote:
>
> Do move it to twisted. I was surprised it wasn't already there.
>
> On Sun, Mar 24, 2019, 17:39 Glyph <glyph at twistedmatrix.com> wrote:
>>
>> Thanks! I put some review comments on it.  I would encourage others with interest in this area to have a look; I might not get back to this for a couple of weeks, but I'd be happy to give people collaborator permissions on the repo if they'd like to help out.
>>
>> (Frankly it's probably time that this project grew up and moved over to the Twisted org anyway, given that txacme depends on it...)
>>
>> -g
>>
>> On Mar 24, 2019, at 1:59 PM, Daniel Holth <dholth at gmail.com> wrote:
>>
>> Pull request for txsni acme https://github.com/glyph/txsni/pull/28
>>
>> On Sun, Mar 24, 2019, 16:33 Glyph <glyph at twistedmatrix.com> wrote:
>>>
>>> Any chance you could include a link to the relevant PR?  Pulling this out of the raging tire-fire of my Github notifications would take an unfortunately non-trivial amount of time - and I imagine that not everyone subscribed might even be on the appropriate repos :).
>>>
>>> -g
>>>
>>> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com> wrote:
>>>
>>> The cleaned up pull request should be really easy to try, with a dehydrated:(basedir) string port. Go get some certs people!
>>>
>>> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com> wrote:
>>>>
>>>> I think ACME_TLS_1 is a sufficiently high-entropy string that the likelihood of brokenness from this approach is basically zero.
>>>>
>>>> -g
>>>>
>>>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
>>>>
>>>> All we have to do is have some kind of per connection certificate store or flag. If acme is in the first packet and the special certificate exists, send it. Otherwise send the normal certificate, for a very short window of possible brokenness. Letsencrypt may or may not require correct alpn negotiation. Should be simple.
>>>>
>>>> I'm happy running the acme client separately and listing my domain instead of doing it all on demand inside twisted.
>>>>
>>>>
>>>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:
>>>>>
>>>>>
>>>>>
>>>>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
>>>>> >
>>>>> > HOLY REGEX BATMAN
>>>>> >
>>>>> > class _ConnectionProxy(object):
>>>>> >
>>>>> >    def bio_write(self, buf):
>>>>> >        if ACME_TLS_1 in buf:
>>>>> >            self.acme_tls_1 = True
>>>>> >        self.bio_write = self._obj.bio_write
>>>>> >        return self._obj.bio_write(buf)
>>>>> > Now we can choose the acme certificate store in the sni callback and
>>>>> > make letsencrypt happy!
>>>>>
>>>>> 1. Gross
>>>>> 2. Hooray!
>>>>>
>>>>> -g
>>>>>
>>>>> _______________________________________________
>>>>> Twisted-Python mailing list
>>>>> Twisted-Python at twistedmatrix.com
>>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From barry.scott at forcepoint.com  Tue Apr  2 10:17:50 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Tue, 2 Apr 2019 16:17:50 +0000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <B023933C-AB12-4C15-916D-4E195394AAF8@twistedmatrix.com>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
 <64733852.0XqjMW6x9D@barry-scott-desktop>
 <B023933C-AB12-4C15-916D-4E195394AAF8@twistedmatrix.com>
Message-ID: <3649058.voc2BpGfGX@barry-scott-desktop>

On Tuesday, 26 March 2019 04:57:57 BST Glyph wrote:
> Hi Barry!
> 
> Thanks for your feedback.
> 
> > On Mar 25, 2019, at 10:22 AM, Scott, Barry <barry.scott at forcepoint.com>
> > wrote:
> > 
> > We are stuck on python2.7 for the foreseeable future and you will not see
> > us in the PyPi stats. We download your release tar ball and build an RPM
> > from it. We also have to build python2.7 our selves as we are stuck on
> > Centos 6.8.
> Given the nature of your product I'm curious: isn't the inability to
> maintain certifications like PCI / HIPAA due to the lack of upstream
> support for python 2.7 a problem for a security application?

So long as RedHat/Centos support 2.7 we should be fine and they will support
it far beyond the python.org EOL date.

> > Having a legacy twisted with critical bugs and security fixes would work
> > for us.
> 
> Apropos of the question in my other response - would you (or any of your
> colleagues) be willing to take responsibility for such a branch and do the
> security triage / backport work there?

I'll investigate from my end - no promises.

Barry

> 
> -g





From john at egh.com  Wed Apr  3 23:35:18 2019
From: john at egh.com (John Santos)
Date: Thu, 4 Apr 2019 01:35:18 -0400
Subject: [Twisted-Python] Twisted 19.2.0rc2 Release Candidate
 Announcement
In-Reply-To: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>
References: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>
Message-ID: <96e1ca6d-98a7-d779-5112-fa6ece11472f@egh.com>

Good news: My app seems to work fine with 19.2.0rc2

Built Twisted from the source tarball.

I did need to update some of the Python packages it uses, no big deal.

On 3/27/2019 05:59 AM, Amber Brown wrote:
> Hello everyone! 19.2.0rc2 is now out. Sorry for the delay!
> 
> This fixes the Cryptography dependency being set to 1.5, when we 
> actually require at least 2.5.
> 
> You can get the tarball and the NEWS file at 
> https://twistedmatrix.com/Releases/rc/19.2.0rc2/ , or you can try it out 
> from PyPI:
> 
>      python -m pip install Twisted==19.2.0rc2
> 
> Please test it, and let me know how your applications fare, good or bad! 
> If nothing comes up, 19.2 will release in a week.
> 
> Twisted regards,
> 
> Amber Brown (hawkowl)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
--
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539


From glyph at twistedmatrix.com  Wed Apr  3 23:39:35 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Apr 2019 22:39:35 -0700
Subject: [Twisted-Python] Twisted 19.2.0rc2 Release Candidate
 Announcement
In-Reply-To: <96e1ca6d-98a7-d779-5112-fa6ece11472f@egh.com>
References: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>
 <96e1ca6d-98a7-d779-5112-fa6ece11472f@egh.com>
Message-ID: <5179C8E1-CAD1-4421-976F-2C1FCDC009BA@twistedmatrix.com>

Thanks for testing, John!

-g

> On Apr 3, 2019, at 10:35 PM, John Santos <john at egh.com> wrote:
> 
> Good news: My app seems to work fine with 19.2.0rc2
> 
> Built Twisted from the source tarball.
> 
> I did need to update some of the Python packages it uses, no big deal.
> 
> On 3/27/2019 05:59 AM, Amber Brown wrote:
>> Hello everyone! 19.2.0rc2 is now out. Sorry for the delay!
>> This fixes the Cryptography dependency being set to 1.5, when we actually require at least 2.5.
>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/19.2.0rc2/ , or you can try it out from PyPI:
>>     python -m pip install Twisted==19.2.0rc2
>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 19.2 will release in a week.
>> Twisted regards,
>> Amber Brown (hawkowl)
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> -- 
> --
> John Santos
> Evans Griffiths & Hart, Inc.
> 781-861-0670 ext 539
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From tobias.oberstein at gmail.com  Thu Apr  4 00:49:13 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Thu, 4 Apr 2019 08:49:13 +0200
Subject: [Twisted-Python] Twisted 19.2.0rc2 Release Candidate
 Announcement
In-Reply-To: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>
References: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>
Message-ID: <9b2ae21c-117c-1284-609a-c8a0438738ec@gmail.com>

Hi Amber,

I did a quick test for crossbar/autobahn (linux, fresh venvs):

looks good!

cpython 3.7.2

https://gist.github.com/oberstet/c950a07ca8c3d52d405fa2994f1ce3a9

pypy 7.0.0

https://gist.github.com/oberstet/ce0642528a2a71dd451c13681adda3e8

greets, /Tobias


Am 27.03.19 um 10:59 schrieb Amber Brown:
> Hello everyone! 19.2.0rc2 is now out. Sorry for the delay!
> 
> This fixes the Cryptography dependency being set to 1.5, when we 
> actually require at least 2.5.
> 
> You can get the tarball and the NEWS file at 
> https://twistedmatrix.com/Releases/rc/19.2.0rc2/ , or you can try it out 
> from PyPI:
> 
>      python -m pip install Twisted==19.2.0rc2
> 
> Please test it, and let me know how your applications fare, good or bad! 
> If nothing comes up, 19.2 will release in a week.
> 
> Twisted regards,
> 
> Amber Brown (hawkowl)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From touch.sereysethy at gmail.com  Fri Apr  5 07:26:40 2019
From: touch.sereysethy at gmail.com (Sereysethy TOUCH)
Date: Fri, 5 Apr 2019 15:26:40 +0200
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
Message-ID: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>

Hello,

I am implementing a program using SSHCommandClientEndpoint, the program
works fine (dataReceived got calls) but when the server send an error
message (stderr..), the function extReceived in my protocol never gets
called, instead it only calls the one in the SSHChannel as I can see in the
log (got extended data 1 b': No such file or directory\n'). How to override
that? Or how to connect it to my protocol?

I adapted the program found on Twisted website.

Thanks,
Sethy

from twisted.conch.endpoints import SSHCommandClientEndpoint
from twisted.internet.protocol import Factory, Protocol
from twisted.python import log
import sys
from twisted.internet.defer import Deferred

class NoiseProtocol(Protocol):
    def connectionMade(self):
        print("connectionMade")
        self.finished = Deferred()
        self.strings = ["bif", "pow", "zot"]
        self.sendNoise()

    def sendNoise(self):
        if self.strings:
            self.transport.write(self.strings.pop(0) + "\n")
        else:
            self.transport.loseConnection()


    def dataReceived(self, data):
        print("Server says:", data)
        self.sendNoise()

    def extReceived(self, dataType, data):
        print("extReceived")

    def connectionLost(self, reason):
        self.finished.callback(None)

command = b"cat unknownfile"

username = b"XXXX"
password = b"XXXX"
host = b"server"
port = 22

endpoint = SSHCommandClientEndpoint.newConnection(
    reactor, command, username, host, port,
    password=password, agentEndpoint=None)

factory = Factory()
factory.protocol = NoiseProtocol

d = endpoint.connect(factory)
d.addCallback(lambda proto: proto.finished)
log.startLogging(sys.stdout, setStdout=0)
reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190405/4904a527/attachment.html>

From sean.dizazzo at gmail.com  Fri Apr  5 10:35:01 2019
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Fri, 5 Apr 2019 09:35:01 -0700
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
In-Reply-To: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
References: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
Message-ID: <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>

It looks like extReceived() is a method of SSHSession.Channel.SSHChannel
<https://twistedmatrix.com/documents/8.1.0/api/twisted.conch.ssh.session.SSHSession.html#extReceived>.
You can access it through the protocol's transport.

self.transport.conn.channels[0].extReceived()

~Sean

On Fri, Apr 5, 2019 at 6:27 AM Sereysethy TOUCH <touch.sereysethy at gmail.com>
wrote:

> Hello,
>
> I am implementing a program using SSHCommandClientEndpoint, the program
> works fine (dataReceived got calls) but when the server send an error
> message (stderr..), the function extReceived in my protocol never gets
> called, instead it only calls the one in the SSHChannel as I can see in the
> log (got extended data 1 b': No such file or directory\n'). How to override
> that? Or how to connect it to my protocol?
>
> I adapted the program found on Twisted website.
>
> Thanks,
> Sethy
>
> from twisted.conch.endpoints import SSHCommandClientEndpoint
> from twisted.internet.protocol import Factory, Protocol
> from twisted.python import log
> import sys
> from twisted.internet.defer import Deferred
>
> class NoiseProtocol(Protocol):
>     def connectionMade(self):
>         print("connectionMade")
>         self.finished = Deferred()
>         self.strings = ["bif", "pow", "zot"]
>         self.sendNoise()
>
>     def sendNoise(self):
>         if self.strings:
>             self.transport.write(self.strings.pop(0) + "\n")
>         else:
>             self.transport.loseConnection()
>
>
>     def dataReceived(self, data):
>         print("Server says:", data)
>         self.sendNoise()
>
>     def extReceived(self, dataType, data):
>         print("extReceived")
>
>     def connectionLost(self, reason):
>         self.finished.callback(None)
>
> command = b"cat unknownfile"
>
> username = b"XXXX"
> password = b"XXXX"
> host = b"server"
> port = 22
>
> endpoint = SSHCommandClientEndpoint.newConnection(
>     reactor, command, username, host, port,
>     password=password, agentEndpoint=None)
>
> factory = Factory()
> factory.protocol = NoiseProtocol
>
> d = endpoint.connect(factory)
> d.addCallback(lambda proto: proto.finished)
> log.startLogging(sys.stdout, setStdout=0)
> reactor.run()
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190405/3426b20d/attachment.html>

From touch.sereysethy at gmail.com  Fri Apr  5 12:07:54 2019
From: touch.sereysethy at gmail.com (Sereysethy TOUCH)
Date: Fri, 5 Apr 2019 20:07:54 +0200
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
In-Reply-To: <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>
References: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
 <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>
Message-ID: <CAJB=Z86sbz_=i8-4SyBqwDUT0uBx6avDr8Dr2HGhZ9RngfaD6g@mail.gmail.com>

Hi Sean,

Yes it is a method of SSHChannel, but when I read the source code, the
_CommandChannel only implements dataReceived which calls protocol's method
but it does not implement extReceived.

When you suggest to call it like that
(self.transport.conn.channels[0].extReceived()),
how do I know when extended data is received?

For now I have subclassed _CommandChannel and also SSHCommandClientEndpoint
in order to add extReceived.

Sethy

On Fri, Apr 5, 2019 at 6:35 PM Sean DiZazzo <sean.dizazzo at gmail.com> wrote:

> It looks like extReceived() is a method of SSHSession.Channel.SSHChannel
> <https://twistedmatrix.com/documents/8.1.0/api/twisted.conch.ssh.session.SSHSession.html#extReceived>.
> You can access it through the protocol's transport.
>
> self.transport.conn.channels[0].extReceived()
>
> ~Sean
>
> On Fri, Apr 5, 2019 at 6:27 AM Sereysethy TOUCH <
> touch.sereysethy at gmail.com> wrote:
>
>> Hello,
>>
>> I am implementing a program using SSHCommandClientEndpoint, the program
>> works fine (dataReceived got calls) but when the server send an error
>> message (stderr..), the function extReceived in my protocol never gets
>> called, instead it only calls the one in the SSHChannel as I can see in the
>> log (got extended data 1 b': No such file or directory\n'). How to override
>> that? Or how to connect it to my protocol?
>>
>> I adapted the program found on Twisted website.
>>
>> Thanks,
>> Sethy
>>
>> from twisted.conch.endpoints import SSHCommandClientEndpoint
>> from twisted.internet.protocol import Factory, Protocol
>> from twisted.python import log
>> import sys
>> from twisted.internet.defer import Deferred
>>
>> class NoiseProtocol(Protocol):
>>     def connectionMade(self):
>>         print("connectionMade")
>>         self.finished = Deferred()
>>         self.strings = ["bif", "pow", "zot"]
>>         self.sendNoise()
>>
>>     def sendNoise(self):
>>         if self.strings:
>>             self.transport.write(self.strings.pop(0) + "\n")
>>         else:
>>             self.transport.loseConnection()
>>
>>
>>     def dataReceived(self, data):
>>         print("Server says:", data)
>>         self.sendNoise()
>>
>>     def extReceived(self, dataType, data):
>>         print("extReceived")
>>
>>     def connectionLost(self, reason):
>>         self.finished.callback(None)
>>
>> command = b"cat unknownfile"
>>
>> username = b"XXXX"
>> password = b"XXXX"
>> host = b"server"
>> port = 22
>>
>> endpoint = SSHCommandClientEndpoint.newConnection(
>>     reactor, command, username, host, port,
>>     password=password, agentEndpoint=None)
>>
>> factory = Factory()
>> factory.protocol = NoiseProtocol
>>
>> d = endpoint.connect(factory)
>> d.addCallback(lambda proto: proto.finished)
>> log.startLogging(sys.stdout, setStdout=0)
>> reactor.run()
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190405/b4b5e46d/attachment.html>

From exarkun at twistedmatrix.com  Fri Apr  5 12:12:54 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 5 Apr 2019 14:12:54 -0400
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
In-Reply-To: <CAJB=Z86sbz_=i8-4SyBqwDUT0uBx6avDr8Dr2HGhZ9RngfaD6g@mail.gmail.com>
References: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
 <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>
 <CAJB=Z86sbz_=i8-4SyBqwDUT0uBx6avDr8Dr2HGhZ9RngfaD6g@mail.gmail.com>
Message-ID: <CAEeXt4Og3SsdMew_Qat81aor8J7384ZjAHr86682upQBqP+f6A@mail.gmail.com>

On Fri, Apr 5, 2019 at 2:08 PM Sereysethy TOUCH <touch.sereysethy at gmail.com>
wrote:

> Hi Sean,
>
> Yes it is a method of SSHChannel, but when I read the source code, the
> _CommandChannel only implements dataReceived which calls protocol's method
> but it does not implement extReceived.
>
> When you suggest to call it like that (self.transport.conn.channels[0].extReceived()),
> how do I know when extended data is received?
>
> For now I have subclassed _CommandChannel and also SSHCommandClientEndpoint
> in order to add extReceived.
>

An interesting question might be ... what do you want to happen to such
data?  Do you want it mixed in with the stdout stream?

For an IProtocol-based API, there aren't a lot of other options.  Maybe it
would be useful to have a similar API that works in terms of
IProcessProtocol instead of IProtocol?

There is a ProcessEndpoint that takes a flag that controls what it does
with stderr - currently supporting only two options, log it or drop it.

What did you hook extReceived up to in your subclass?

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190405/b3c25168/attachment.html>

From touch.sereysethy at gmail.com  Sat Apr  6 11:12:17 2019
From: touch.sereysethy at gmail.com (Sereysethy TOUCH)
Date: Sat, 6 Apr 2019 19:12:17 +0200
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
In-Reply-To: <CAEeXt4Og3SsdMew_Qat81aor8J7384ZjAHr86682upQBqP+f6A@mail.gmail.com>
References: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
 <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>
 <CAJB=Z86sbz_=i8-4SyBqwDUT0uBx6avDr8Dr2HGhZ9RngfaD6g@mail.gmail.com>
 <CAEeXt4Og3SsdMew_Qat81aor8J7384ZjAHr86682upQBqP+f6A@mail.gmail.com>
Message-ID: <CAJB=Z85r+M+qD4Bdx-NuwzjpracBmGksJwiktb33Un9FSKJgPQ@mail.gmail.com>

Hi Jean-Paul,

No I dont want it to be mixed with stdout stream, it should be separated
from normal stdout, so that I know it is an error.

To be honest, I am pretty to new to Twisted concept, there are things that
I have not familiar with yet. Actually I can also implement a low level ssh
client (which I already did), but as SSHCommandClientEndpoint is already
available, so I want to use it straight away. But when I dived in the
source code, the _CommandChannel only implements dataReceived but not
extReceived.

For your suggestion on using ProcessEndpoint how can I use it for my SSH
client?

In my extReceived I just deliver what I got to the extReceived of method
protocol, it is exactly the same as Twisted implements dataReceived:

class CommandChannel(_CommandChannel):
    def extReceived(self, dataType, data):
        """
        When the command's extended data (usually standard error) arrives,
        deliver it to the protocol instance.

        @type dataType: L{int}
        @type data:     L{str}
        """
        self._protocol.extReceived(dataType, data)

I have two other questions since you are here

1) how can we execute command like more or less which is an interactive
command?
2) how to request a pty to ssh server?

Thanks,
Sethy



On Fri, Apr 5, 2019 at 8:13 PM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Fri, Apr 5, 2019 at 2:08 PM Sereysethy TOUCH <
> touch.sereysethy at gmail.com> wrote:
>
>> Hi Sean,
>>
>> Yes it is a method of SSHChannel, but when I read the source code, the
>> _CommandChannel only implements dataReceived which calls protocol's method
>> but it does not implement extReceived.
>>
>> When you suggest to call it like that (self.transport.conn.channels[0].extReceived()),
>> how do I know when extended data is received?
>>
>> For now I have subclassed _CommandChannel and also SSHCommandClientEndpoint
>> in order to add extReceived.
>>
>
> An interesting question might be ... what do you want to happen to such
> data?  Do you want it mixed in with the stdout stream?
>
> For an IProtocol-based API, there aren't a lot of other options.  Maybe it
> would be useful to have a similar API that works in terms of
> IProcessProtocol instead of IProtocol?
>
> There is a ProcessEndpoint that takes a flag that controls what it does
> with stderr - currently supporting only two options, log it or drop it.
>
> What did you hook extReceived up to in your subclass?
>
> Jean-Paul
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190406/c0f13b65/attachment-0001.html>

From trac at twistedmatrix.com  Sun Apr  7 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 Apr 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1554617118.15.3274645334302854259@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190407/277a77e9/attachment.html>

From glyph at twistedmatrix.com  Sun Apr  7 01:15:41 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 7 Apr 2019 00:15:41 -0700
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
In-Reply-To: <CAJB=Z85r+M+qD4Bdx-NuwzjpracBmGksJwiktb33Un9FSKJgPQ@mail.gmail.com>
References: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
 <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>
 <CAJB=Z86sbz_=i8-4SyBqwDUT0uBx6avDr8Dr2HGhZ9RngfaD6g@mail.gmail.com>
 <CAEeXt4Og3SsdMew_Qat81aor8J7384ZjAHr86682upQBqP+f6A@mail.gmail.com>
 <CAJB=Z85r+M+qD4Bdx-NuwzjpracBmGksJwiktb33Un9FSKJgPQ@mail.gmail.com>
Message-ID: <741E10F6-A0AB-463F-8D16-32DF742D8EAE@twistedmatrix.com>



> On Apr 6, 2019, at 10:12 AM, Sereysethy TOUCH <touch.sereysethy at gmail.com> wrote:
> 
> Hi Jean-Paul,
> 
> No I dont want it to be mixed with stdout stream, it should be separated from normal stdout, so that I know it is an error.
> 
> To be honest, I am pretty to new to Twisted concept, there are things that I have not familiar with yet. Actually I can also implement a low level ssh client (which I already did), but as SSHCommandClientEndpoint is already available, so I want to use it straight away. But when I dived in the source code, the _CommandChannel only implements dataReceived but not extReceived.

The main point of `SSHCommandClientEndpoint` is to allow code that doesn't know about SSH to run over SSH, for example to enable forwarding.  So you can't unconditionally require everyone to implement extReceived, because IProtocol doesn't require this.

> For your suggestion on using ProcessEndpoint how can I use it for my SSH client?

Jean-Paul was suggesting a way that Twisted could be modified to support your use-case, not a thing that you can do today in your own code.

> In my extReceived I just deliver what I got to the extReceived of method protocol, it is exactly the same as Twisted implements dataReceived:
> 
> class CommandChannel(_CommandChannel): 
>     def extReceived(self, dataType, data):
>         """
>         When the command's extended data (usually standard error) arrives,
>         deliver it to the protocol instance.
> 
>         @type dataType: L{int}
>         @type data:     L{str}
>         """
>         self._protocol.extReceived(dataType, data)

If you wanted to contribute this functionality to Twisted, the usual idiom here would be to do a check, like:

protocol = self._protocol
if ISSHExtendedProtocol.providedBy(protocol):
    protocol.extReceived(dataType, data)

Doing this on every extReceived may be a little bit of a performance hit, so caching this computation and/or the behavior associated with it is left as an exercise for you :).

> I have two other questions since you are here
> 
> 1) how can we execute command like more or less which is an interactive command?

Looking at what the 'conch' script does, I think what you're asking is something like this:

self.conn.sendRequest(self, b'exec', common.NS(options['command']))

> 2) how to request a pty to ssh server?

Again from twisted/conch/scripts/conch.py:

ptyReqData = session.packRequest_pty_req(term, winSize, '')
self.conn.sendRequest(self, b'pty-req', ptyReqData)


> 
> Thanks,
> Sethy

Thanks for using Twisted,

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190407/f968d53b/attachment.html>

From glyph at twistedmatrix.com  Sun Apr  7 23:17:10 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 7 Apr 2019 22:17:10 -0700
Subject: [Twisted-Python] magical and seamless asyncio support
Message-ID: <CB7FC780-FCBD-4150-A6A8-73F21C644103@twistedmatrix.com>

After filing https://github.com/tornadoweb/tornado/issues/2636 <https://github.com/tornadoweb/tornado/issues/2636> recently, I was reminded that Twisted should support asyncio seamlessly, and currently we have some quite-visible seams.

There are three major use-cases for asyncio integration:

I've got a large Twisted application.  I run the reactor at startup.  I find a cool asyncio lib.  I want to use it.  What do I do?
I've got a large asyncio application.  I run the main loop at startup.  I find a cool twisted lib.  I want to use it.  What do I do?
I'm noodling around in an environment, like a Jupyter notebook, which already happens to have an event loop but I don't really know which one it is.  How do I have the fewest number of steps?

What happens today in each case?

Case 1: If I've got a large Twisted application, I either start off by doing Deferred.fromFuture or ensureDeferred.  These give me Deferreds that never fire, because no asyncio loop is running, but they don't yell at me; they just hang.  Now I have to switch my event loop over to be an AsyncioSelectorReactor.  Except wait, my application is a GTK+ application, and the only GTK+ main loop I can get that implements the asyncio APIs is unmaintained!  So I either give up my custom Twisted reactor or I give up my asyncio functionality or I run it all in a thread.  None of these are great experiences.

Case 2: if I've got an asyncio application, I have a similar problem; I need a reactor, but one isn't running, so all my Deferred.asFuture(get_event_loop())s just hang.  So I need to run AsyncioSelectorReactor, but now I need to know a bunch of obscure Twisted trivia to boostrap all of this properly:

Case 3: oh no, how do I even know which one I need to run?

In all of these cases I need to know a bunch of really inane trivia:

I need to call startRunning() on the reactor, but just once, when it gets set up, or threadpool invocations (such as name resolution) will hang.  Unless I'm lucky enough to actually control the whole process startup, in which case I can replace my event loop's .run_forever() with Twisted's .run().
I need to know whether I need subprocess support, and from whom.  If I need it in Twisted, I need to do startRunning(installSignalHandlers=True); if I need it in asyncio, I need to do installSignalHandlers=False.  I don't think there's a way to have both.
I'd better hope that this is not on Windows, because Twisted is going to use its POSIX socket I/O implementation no matter what.
Then, once it's up and running, rather than just 'await'-ing Deferreds, I always need to await someDeferred().asFuture(loop=get_event_loop()).  From a practical perspective, get_event_loop() is the only correct value that I'd ever want to pass here, but for some reason the library makes me pass it every time.

I propose a series of changes that would make this seamless from either side.

Make Deferreds awaitable by asyncio by just calling `get_event_loop` and lying about what loop they're connected to.  My reading of this is that https://github.com/python/cpython/blob/c5c6cdada3d41148bdeeacfe7528327b481c5d18/Modules/_asynciomodule.c#L215 <https://github.com/python/cpython/blob/c5c6cdada3d41148bdeeacfe7528327b481c5d18/Modules/_asynciomodule.c#L215> will totally let us do that, if we just have a get_loop method (or, gross, _loop property) on Deferred or whatever's returned from Deferred.__await__.  It would be fine if this raised a warning or something, as long as it worked in the 80% case so people could get some initial success and a pointer as to how to succeed, and not just hitting a wall with "task got bad yield".
Make the reactor automagical.
Phase one of this change would be: when you do 'from twisted.internet import reactor', if there's already an asyncio loop installed and running, automatically select the asyncio integration.  This only helps you if you're in a context like a Jupyter notebook where you're not doing it at the module level, but that's still interesting.
Make 'twisted.internet.reactor' into a dynamic proxy object which forwards reactor calls to whichever the running reactor is at the moment of the method call (connectTCP, callLater, etc).  This can move the reactor selection to whenever the "first touch" on the reactor is, rather than whenever it's imported.  (This also fixes a ton of of annoying import-order stuff in Twisted itself, as a bonus.)
Automatically call startRunning() as necessary if another loop is in charge.
Fix the subprocess integration:
As a simple first step, for UNIX, at least participate in the asyncio get_child_watcher() / set_child_watcher() protocol, so that at least someone trying to coordinate a Twisted loop and an asyncio loop can intentionally select which one gets child process termination notifications, and possibly even multiplex this.
Fix subprocesses along with any platform-specific socket quirks, by doing the next step...
Actually use the asyncio APIs in the "asyncio side down" integration, i.e. AsyncioSelectorReactor.  Presently we implement everything in terms of the add_reader and add_writer APIs, which is both very low-level and also fairly UNIX-specific.  We should instead be using loop.create_connection, loop.create_server, loop.subprocess_exec, loop.getaddrinfo, etc, and translating between asyncio protocol/transport APIs and our own.
Implement the "twisted side down" integration with asyncio; i.e. instead of implementing the twisted APIs in terms of asyncio's interfaces, implement the asyncio APIs in terms of Twisted's interfaces, so we can use existing custom reactors, GUI loop integration, etc.

This is all quite a bit of work but I think it would massively improve the experience of a novice trying to adopt Twisted in a modern Python stack.

In particular, I think that in addition to being a good example of the general problem domain, Jupyter is quite specifically incredibly strategic, and having the ability to just grab Treq and start doing massively parallel I/O to ingest data, then just 'await' on it, would be a very powerful demonstration of Twisted's capabilities.

Let me know what you all think!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190407/c710c98a/attachment.html>

From chris at withers.org  Wed Apr 10 00:00:40 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 10 Apr 2019 07:00:40 +0100
Subject: [Twisted-Python] ws(s):// urls and host/port duplication in
 twisted/autobahn code
In-Reply-To: <3d864a33-90bf-3f76-fe17-e627e26ee0b5@gmail.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
 <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
 <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>
 <3d864a33-90bf-3f76-fe17-e627e26ee0b5@gmail.com>
Message-ID: <e0b70e06-98b9-95f8-47e0-dcfdff8b0c90@withers.org>

On 02/04/2019 09:07, Tobias Oberstein wrote:
>> Right, but correct me if I'm wrong, my understanding is that URL 
>> stands for Univeral Resource Locator and URLs can encode all of the 
>> things you 
> 
> WebSocket needs a _HTTP_ URL

Not sure I follow, I specify ws:// and things work. What am I missing?
(I know the initial protocol is http and that's "upgraded" into 
websocket, but the url is still ws:// or wss://, right?)

> fwiw, WAMP is a protocol with a clear-cut, rigorous and decoupled layering:

Do browsers speak WAMP? Do firewalls get upset with it?

>> describe. They certainly contain the host and port, so shouldn't there 
>> be a graceful way to specify a URL once and have everything that needs 
>> that info or a subset of it get it from there?
> 
> a (fully qualified) HTTP URL of course encodes a host and port, but that 
> only covers transports that have those notions

Not sure what you mean by fully qualified?

>> (This isn't necessarily aimed at AutoBahn, seems to be something 
>> common in Twisted...)
> 
> things look only "simple" when leaving out details;)

There's never a reasonable excuse for duplicating the same information 
within a few lines of code.

Chris


From hawkowl at atleastfornow.net  Wed Apr 10 06:36:16 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Wed, 10 Apr 2019 22:36:16 +1000
Subject: [Twisted-Python] Twisted 19.2.0 Release Announcement
Message-ID: <4e608061-b623-3240-6027-f9f8664b9f05@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the 
release of Twisted 19.2! The highlights of this release are:

  * twisted.web.client.HostnameCachingHTTPSPolicy was added as a new
    contextFactory option. This reduces the performance overhead for
    making many TLS connections to the same host.
  * twisted.conch.ssh.keys can now read private keys in the new
    "openssh-key-v1" format, introduced in OpenSSH 6.5 and made the
    default in OpenSSH 7.8.
  * The sample code in the "Twisted Web In 60 Seconds" tutorial runs on
    Python 3.
  * DeferredLock and DeferredSemaphore can be used as asynchronous
    context managers on Python 3.5+.
  * twisted.internet.ssl.CertificateOptions now uses 32 random bytes
    instead of an MD5 hash for the ssl session identifier context.
  * twisted.python.failure.Failure.getTracebackObject now returns
    traceback objects whose frames can be passed into
    traceback.print_stack for better debugging of where the exception
    came from.
  * Much more! 20+ tickets closed overall.

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or 
alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS 
file is also available at 
<https://github.com/twisted/twisted/blob/twisted-19.2.0/NEWS.rst>.

Many thanks to everyone who had a part in this release - the supporters 
of the Twisted Software Foundation, the developers who contributed code 
as well as documentation, and all the people building great things with 
Twisted!

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190410/c44fed99/attachment.html>

From meejah at meejah.ca  Wed Apr 10 11:46:47 2019
From: meejah at meejah.ca (meejah)
Date: Wed, 10 Apr 2019 21:46:47 +0400
Subject: [Twisted-Python] ws(s):// urls and host/port duplication in
 twisted/autobahn code
In-Reply-To: <e0b70e06-98b9-95f8-47e0-dcfdff8b0c90@withers.org> (Chris
 Withers's message of "Wed, 10 Apr 2019 07:00:40 +0100")
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
 <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
 <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>
 <3d864a33-90bf-3f76-fe17-e627e26ee0b5@gmail.com>
 <e0b70e06-98b9-95f8-47e0-dcfdff8b0c90@withers.org>
Message-ID: <86imvloirc.fsf@atlantis.meejah.ca>

Chris Withers <chris at withers.org> writes:

> Not sure I follow, I specify ws:// and things work. What am I missing?
> (I know the initial protocol is http and that's "upgraded" into
> websocket, but the url is still ws:// or wss://, right?)

What Tobias is getting at, I think, is that your URL could be
wss://example.com/ws but the endpoint could be a unix-socket at
/var/run/foo

Now, that said, some of the APIs do allow you to shortcut this in the
case when your endpoint will be the same as the host in the URI. Compare
these two "Component" examples; the first uses the "long form" way to
specify the URL + transport and the second is just a string:

https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/component/backend.py#L34
https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/component/frontend.py#L42

>> fwiw, WAMP is a protocol with a clear-cut, rigorous and decoupled
>> layering:

> Do browsers speak WAMP?

Yes. See Autobahn-JS

> Do firewalls get upset with it?

No.

WAMP connections are usually "outbound" style connections to the router,
so most firewall configurations will be fine with this.

-- 
meejah


From glyph at twistedmatrix.com  Wed Apr 10 22:40:13 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 10 Apr 2019 21:40:13 -0700
Subject: [Twisted-Python] Twisted 19.2.0 Release Announcement
In-Reply-To: <4e608061-b623-3240-6027-f9f8664b9f05@atleastfornow.net>
References: <4e608061-b623-3240-6027-f9f8664b9f05@atleastfornow.net>
Message-ID: <8BC6789F-15C5-4595-AD71-83D03A00ABBD@twistedmatrix.com>


> On Apr 10, 2019, at 5:36 AM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 19.2! The highlights of this release are: 
> 
> twisted.web.client.HostnameCachingHTTPSPolicy was added as a new contextFactory option. This reduces the performance overhead for making many TLS connections to the same host.
> twisted.conch.ssh.keys can now read private keys in the new "openssh-key-v1" format, introduced in OpenSSH 6.5 and made the default in OpenSSH 7.8.
> The sample code in the "Twisted Web In 60 Seconds" tutorial runs on Python 3.
> DeferredLock and DeferredSemaphore can be used as asynchronous context managers on Python 3.5+.
> twisted.internet.ssl.CertificateOptions now uses 32 random bytes instead of an MD5 hash for the ssl session identifier context.
> twisted.python.failure.Failure.getTracebackObject now returns traceback objects whose frames can be passed into traceback.print_stack for better debugging of where the exception came from.
> Much more! 20+ tickets closed overall.
> You can find the downloads at <https://pypi.python.org/pypi/Twisted> <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads> <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-19.2.0/NEWS.rst> <https://github.com/twisted/twisted/blob/twisted-19.2.0/NEWS.rst>. 
> 
> Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted! 

Thanks Amber!

This release looks pretty great!

Thanks for all the hard work everyone.  I really appreciate everyone keeping the slow boil of fixes going.

We already have some pretty great stuff queued up for the next one :-).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190410/21cd3442/attachment.html>

From tobias.oberstein at gmail.com  Thu Apr 11 02:35:12 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Thu, 11 Apr 2019 10:35:12 +0200
Subject: [Twisted-Python] ws(s):// urls and host/port duplication in
 twisted/autobahn code
In-Reply-To: <86imvloirc.fsf@atlantis.meejah.ca>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
 <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
 <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>
 <3d864a33-90bf-3f76-fe17-e627e26ee0b5@gmail.com>
 <e0b70e06-98b9-95f8-47e0-dcfdff8b0c90@withers.org>
 <86imvloirc.fsf@atlantis.meejah.ca>
Message-ID: <211cd6d9-5ca5-3923-57f5-f7bb298b5583@gmail.com>

Am 10.04.19 um 19:46 schrieb meejah:
> Chris Withers <chris at withers.org> writes:
> 
>> Not sure I follow, I specify ws:// and things work. What am I missing?
>> (I know the initial protocol is http and that's "upgraded" into
>> websocket, but the url is still ws:// or wss://, right?)
> 
> What Tobias is getting at, I think, is that your URL could be
> wss://example.com/ws but the endpoint could be a unix-socket at
> /var/run/foo

yeah, exactly. thx for helping out;)

>>> fwiw, WAMP is a protocol with a clear-cut, rigorous and decoupled
>>> layering:
> 
>> Do browsers speak WAMP?
> 
> Yes. See Autobahn-JS
> 
>> Do firewalls get upset with it?
> 
> No.
> 
> WAMP connections are usually "outbound" style connections to the router,
> so most firewall configurations will be fine with this.

yes!

let me add some more details (which are irrelevant in most common cases)

- "usually": WAMP _can_ run _also_ over connections where the WAMP level 
peer role assignment (client vs router) is fully independent of the 
transport level role (client vs server) assignment as dictated from the 
direction of connection establishment. eg when runnin WAMP over pipes on 
Twisted, the connection establishment / transport roles are reversed

- firewalls: np as long as _outbound_ TLS on 443 is allowed (HTTPS). no 
open ports whatsoever are required, and WAMP still allows you to to RPCs 
_from_ the cloud _to_ the thing sitting inside / behind the firewall. 
you can even do RPCs between 2 browser tabs 
(https://crossbario.com/blog/Free-Your-Code-Backends-in-the-Browser/)

- MITM https proxies: those TLS unwrapping intermediaries might break 
websocket - if they are not websocket aware or sidestepping via admin 
config of the MITM box. anything over websocket is affected then (not 
only WAMP). TLS v1.3 will make those privacy breaking intermediaries sad 
anyways - which is a GOOD THING!! luckily, the IETF dismissed the last 
minute push from the banking corps in particular to compromise TLS v1.3. 
there are a couple of threads on the IETF WG which really are fun to read;)


From tobias.oberstein at gmail.com  Fri Apr 12 23:33:54 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Sat, 13 Apr 2019 07:33:54 +0200
Subject: [Twisted-Python] Twisted Conch on v19.2.1: now requires explicit
 installation of bcrypt
Message-ID: <415bb290-6807-ddd1-4064-f2adb698473c@gmail.com>

Hi,

I'm not sure if it considered a Twisted bug, but Twisted Conch on 
Twisted 19.2.1 now seems to require explicit installation of bcrypt, 
which wasn't the case on <19.2.1.

Here is our (Crossbar.io) tracking issue:

https://github.com/crossbario/crossbar/issues/1555

Not a big deal obviously - we'll add that (indirect) dependency to 
Crossbar.io .. just wanted to post here if anyone else runs into.

Cheers,
/Tobias

PS: I did test the upcoming Twisted release with Crossbar.io - but only 
a "quick manual test", not our full CI - which now ran red (by being 
triggered from an unrelated PR).

There is more fallout for us with the new Twisted release:( Analyzing 
that now. We (Crossbar.io) really should have run our _full_ CI on the 
upcoming release.


From glyph at twistedmatrix.com  Sat Apr 13 00:01:44 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 12 Apr 2019 23:01:44 -0700
Subject: [Twisted-Python] Twisted Conch on v19.2.1: now requires
 explicit installation of bcrypt
In-Reply-To: <415bb290-6807-ddd1-4064-f2adb698473c@gmail.com>
References: <415bb290-6807-ddd1-4064-f2adb698473c@gmail.com>
Message-ID: <582623CE-8730-4D4F-ABCC-9F5F8E6F9F10@twistedmatrix.com>



> On Apr 12, 2019, at 10:33 PM, Tobias Oberstein <tobias.oberstein at gmail.com> wrote:
> 
> Hi,

Hi Tobias,

> I'm not sure if it considered a Twisted bug,

It's not :).

> but Twisted Conch on Twisted 19.2.1 now seems to require explicit installation of bcrypt, which wasn't the case on <19.2.1.

This is not exactly accurate.

What happened here is that your other dependencies happened to let you use conch without installing anything else in the past, but you weren't doing the supported thing, which is to use the `[conch]` extra to indicate you want all the optional requirements for conch.

(Also, 19.2.1?  Are you writing to us from an alternate future where there's been a security patch release? Not very good time-travel opsec!)

> Here is our (Crossbar.io) tracking issue:
> 
> https://github.com/crossbario/crossbar/issues/1555
> 
> Not a big deal obviously - we'll add that (indirect) dependency to Crossbar.io .. just wanted to post here if anyone else runs into.

Just add a dependency on `twisted[conch]` and you should be good for this release and for any future releases where conch needs other dependencies.

> 
> Cheers,
> /Tobias
> 
> PS: I did test the upcoming Twisted release with Crossbar.io - but only a "quick manual test", not our full CI - which now ran red (by being triggered from an unrelated PR).
> 
> There is more fallout for us with the new Twisted release:( Analyzing that now. We (Crossbar.io) really should have run our _full_ CI on the upcoming release.

So it goes!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190412/77db499e/attachment.html>

From tobias.oberstein at gmail.com  Sat Apr 13 01:03:16 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Sat, 13 Apr 2019 09:03:16 +0200
Subject: [Twisted-Python] Twisted Conch on v19.2.1: now requires
 explicit installation of bcrypt
In-Reply-To: <582623CE-8730-4D4F-ABCC-9F5F8E6F9F10@twistedmatrix.com>
References: <415bb290-6807-ddd1-4064-f2adb698473c@gmail.com>
 <582623CE-8730-4D4F-ABCC-9F5F8E6F9F10@twistedmatrix.com>
Message-ID: <4ac1c973-66a1-7afc-796d-8306d72e75ac@gmail.com>

Hi Glyph,

>> I'm not sure if it considered a Twisted bug,
> 
> It's not :).
> 
>> but Twisted Conch on Twisted 19.2.1 now seems to require explicit 
>> installation of bcrypt, which wasn't the case on <19.2.1.
> 
> This is not exactly accurate.
> 
> What happened here is that your other dependencies /happened/ to let you 
> use conch without installing anything else in the past, but you weren't 
> doing the supported thing, which is to use the `[conch]` extra to 
> indicate you want all the optional requirements for conch.

Ah, right! Twisted release is fine - our fault now finally coming to 
bite us, sorry for the noise;)

We'll fix that
https://github.com/crossbario/crossbar/issues/1559

> 
> (Also, 19.2.1?  Are you writing to us from an alternate future where 
> there's been a security patch release? Not very good time-travel opsec!)

Yea, it's 19.2.0 what I meant, typo on my side, and haha, sadly (?), no, 
I haven't found a solution for time travel;)

>> PS: I did test the upcoming Twisted release with Crossbar.io 
>> <http://Crossbar.io> - but only a "quick manual test", not our full CI 
>> - which now ran red (by being triggered from an unrelated PR).
>>
>> There is more fallout for us with the new Twisted release:( Analyzing 
>> that now. We (Crossbar.io <http://Crossbar.io>) really should have run 
>> our _full_ CI on the upcoming release.
> 
> So it goes!

Yep, we'll run Twisted trunk on the full CI too - always -

https://github.com/crossbario/crossbar/issues/1560

---

Thanks for chiming in!
Cheers,
/Tobias

> 
> -g
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


From trac at twistedmatrix.com  Sun Apr 14 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 Apr 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1555221918.94.582907503400755473@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190414/02ec3351/attachment.html>

From trac at twistedmatrix.com  Sun Apr 21 00:05:19 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 Apr 2019 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1555826719.23.8558783218154866844@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190421/65c0a394/attachment.html>

From hawkowl at atleastfornow.net  Mon Apr 22 12:06:07 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Tue, 23 Apr 2019 04:06:07 +1000
Subject: [Twisted-Python] The Future of Twisted Spread
Message-ID: <f09152ee-270c-3ac8-1f38-ddd9a98d20a5@atleastfornow.net>

twisted.spread is without a maintainer, and there were discussions in 
#twisted-dev about it's future. It has several flaws, mostly regarding 
security and resource usage that have not moved forward in a long time. 
These discussions mostly revolved around deprecating it, but Glyph 
pointed out existing uses of it and suggested looking for a maintainer 
first.

As such, we're looking for a maintainer who can dedicate themselves to 
maintaining twisted.spread and giving Perspective Broker a bit of love. 
This would require someone that uses twisted.spread, and is committed to 
its long-term success.

If nobody steps up, we'll declare it unmaintained and deprecate it in a 
future Twisted release.

- Amber


From dholth at gmail.com  Tue Apr 23 20:21:59 2019
From: dholth at gmail.com (Daniel Holth)
Date: Tue, 23 Apr 2019 22:21:59 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+4LUzbC36reZGSRLi2K6bVu0Nfe5d7Z0YPhPLwgKLssMA@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
 <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
 <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>
 <95B8427F-EF45-4CAB-AB6F-44860047FE74@twistedmatrix.com>
 <CAG8k2+7AOUam+Ua0k+AD=dnBMM11UyFo-jhCYBnEy09s9vBadg@mail.gmail.com>
 <CAG8k2+4LUzbC36reZGSRLi2K6bVu0Nfe5d7Z0YPhPLwgKLssMA@mail.gmail.com>
Message-ID: <CAG8k2+7Vmn89b+QML3JPRRiVyhQtjkdrDaWEN=ARgKAXuSkBFw@mail.gmail.com>

I was able to figure out the tests, and improve coverage in txsni.

On Tue, Apr 2, 2019 at 10:29 AM Daniel Holth <dholth at gmail.com> wrote:
>
> Let me know if you're able to try getting a https certificate in this way:
>
> Using tls-alpn-01 negotiation with txsni (acme branch) and the
> dehydrated letsencrypt client:
>
> Install txsni (acme branch):
>
> pip install git+https://github.com/dholth/txsni at acme#egg=txsni
>
> Unpack dehydrated acme client shell script from https://dehydrated.io/
>
> Make and enter config directory:
>
> mkdir -p ~/etc/dehydrated
>
> cd ~/etc/dyhydrated
>
> Use acmesni to listen on port 443:
>
> authbind twist web --listen acmesni:~/etc/dehydrated:tcp6:443 &
>
> Make config file:
>
> echo CHALLENGETYPE="tls-alpn-01" > config
>
> Create letsencrypt account:
>
> dehydrated --register --accept-terms
>
> Request certificate (replace example.com with your fqnd):
>
> dehydrated -c -d example.com
>
>
> Letsencrypt should request a special certificate from the twisted web
> server to prove domain control, and then dehydrated installs the new
> certificate for 'example.com' in ~/etc/dehydrated/certs/...
> https://example.com will be ready to go.
>
>
> Authbind, to listen on privileged ports in linux without root:
>
> (install authbind); touch /etc/authbind/byport/{80,443}; chown
> <username> /etc/authbind/byport/*; chmod u+x /etc/authbind/byport/*
>
> On Sun, Mar 24, 2019 at 9:17 PM Daniel Holth <dholth at gmail.com> wrote:
> >
> > Do move it to twisted. I was surprised it wasn't already there.
> >
> > On Sun, Mar 24, 2019, 17:39 Glyph <glyph at twistedmatrix.com> wrote:
> >>
> >> Thanks! I put some review comments on it.  I would encourage others with interest in this area to have a look; I might not get back to this for a couple of weeks, but I'd be happy to give people collaborator permissions on the repo if they'd like to help out.
> >>
> >> (Frankly it's probably time that this project grew up and moved over to the Twisted org anyway, given that txacme depends on it...)
> >>
> >> -g
> >>
> >> On Mar 24, 2019, at 1:59 PM, Daniel Holth <dholth at gmail.com> wrote:
> >>
> >> Pull request for txsni acme https://github.com/glyph/txsni/pull/28
> >>
> >> On Sun, Mar 24, 2019, 16:33 Glyph <glyph at twistedmatrix.com> wrote:
> >>>
> >>> Any chance you could include a link to the relevant PR?  Pulling this out of the raging tire-fire of my Github notifications would take an unfortunately non-trivial amount of time - and I imagine that not everyone subscribed might even be on the appropriate repos :).
> >>>
> >>> -g
> >>>
> >>> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com> wrote:
> >>>
> >>> The cleaned up pull request should be really easy to try, with a dehydrated:(basedir) string port. Go get some certs people!
> >>>
> >>> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com> wrote:
> >>>>
> >>>> I think ACME_TLS_1 is a sufficiently high-entropy string that the likelihood of brokenness from this approach is basically zero.
> >>>>
> >>>> -g
> >>>>
> >>>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
> >>>>
> >>>> All we have to do is have some kind of per connection certificate store or flag. If acme is in the first packet and the special certificate exists, send it. Otherwise send the normal certificate, for a very short window of possible brokenness. Letsencrypt may or may not require correct alpn negotiation. Should be simple.
> >>>>
> >>>> I'm happy running the acme client separately and listing my domain instead of doing it all on demand inside twisted.
> >>>>
> >>>>
> >>>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:
> >>>>>
> >>>>>
> >>>>>
> >>>>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
> >>>>> >
> >>>>> > HOLY REGEX BATMAN
> >>>>> >
> >>>>> > class _ConnectionProxy(object):
> >>>>> >
> >>>>> >    def bio_write(self, buf):
> >>>>> >        if ACME_TLS_1 in buf:
> >>>>> >            self.acme_tls_1 = True
> >>>>> >        self.bio_write = self._obj.bio_write
> >>>>> >        return self._obj.bio_write(buf)
> >>>>> > Now we can choose the acme certificate store in the sni callback and
> >>>>> > make letsencrypt happy!
> >>>>>
> >>>>> 1. Gross
> >>>>> 2. Hooray!
> >>>>>
> >>>>> -g
> >>>>>
> >>>>> _______________________________________________
> >>>>> Twisted-Python mailing list
> >>>>> Twisted-Python at twistedmatrix.com
> >>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>>>
> >>>> _______________________________________________
> >>>> Twisted-Python mailing list
> >>>> Twisted-Python at twistedmatrix.com
> >>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>>>
> >>>>
> >>>> _______________________________________________
> >>>> Twisted-Python mailing list
> >>>> Twisted-Python at twistedmatrix.com
> >>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>>
> >>> _______________________________________________
> >>> Twisted-Python mailing list
> >>> Twisted-Python at twistedmatrix.com
> >>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>>
> >>>
> >>> _______________________________________________
> >>> Twisted-Python mailing list
> >>> Twisted-Python at twistedmatrix.com
> >>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> >>
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Thu Apr 25 10:52:14 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 25 Apr 2019 12:52:14 -0400
Subject: [Twisted-Python] Backward incompatible fixes to backward
 incompatible changes
Message-ID: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>

Hello all,

I'd like to discuss the project policy/process for dealing with incorrect
backward incompatibilities that end up released.

As a case study, we could look at https://twistedmatrix.com/trac/ticket/9410
<https://twistedmatrix.com/trac/ticket/9410#comment:17> /
https://github.com/twisted/twisted/pull/1106

In Twisted 16.3.0 the behavior of Request.write was changed so that it
raises an AttributeError if called after the connection has closed.  Prior
to that release, it silently did nothing in that case.

Now, three years later, we have a PR which proposed restoring the behavior
of silently ignoring the write to a closed connection.

The original change was incompatible.  The new change is incompatible.
What should win out?

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190425/322ff161/attachment.html>

From trac at twistedmatrix.com  Sun Apr 28 00:05:19 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 Apr 2019 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1556431519.53.1870608615627612427@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190428/f1e51ca9/attachment.html>

From john at egh.com  Sun Apr 28 09:01:55 2019
From: john at egh.com (John Santos)
Date: Sun, 28 Apr 2019 11:01:55 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <31ac3952-157e-4af7-bad3-7d47f36bbc08@egh.com>

I've been having ongoing problems accessing the TwistedMatrix site.  
(Tried both Firefox and Chrome from my home PC.)

I've been trying to log in to update issue 9629 below to report it is a 
duplicate of a known problem.  (Can't tell you WHICH known problem 
because I can't search the Twisted tickets.)

On Monday evening, when I submitted this issue, I filled in the form and 
nothing appeared to happen.  (I may have even submitted it twice.)  I 
searched the tickets and discovered 1) it didn't appear (so no ticket?) 
and 2) it seemed to be the same as a previously reported problem, so I 
added a comment to the previous ticket that I was seeing the same issue 
and a little context that might help.  (I only started seeing it with 
Twisted 19.2.0, but the original report said it was under 18.4.0 which I 
had been running uneventfully since last summer.)

Anyway, I got no feedback, so I assumed my initial attempt to create a 
ticket had failed.

Someone with access, please mark #9629 as a duplicate and close.

Thanks,

John

On 4/28/2019 2:05 AM, trac at twistedmatrix.com wrote:
> Bug summary
> ______________________
> Summary for 2019-04-21 through 2019-04-28
>                    Opened     Closed      Total     Change
> Enhancements:          2          0       1410         +2
> Defects:               4          0        952         +4
> Tasks:                 0          0         98         +0
> Regressions:           0          0          6         +0
> Total:                 6          0       2467         +6
>
> |== Type Changes   |== Priority Changes   |== Component Changes
> |Defect:       +4  |Normal:  +6           |Core:   +5
> |Enhancement:  +2                         |Trial:  +1
>
>
> Total Tickets Open Tickets
>
>
> New / Reopened Bugs
> ______________________
>                      ===== Normal =====
> [#9628] trial3 reports "AttributeError: test_file does not exist" when an ImportError is raised by test_file.py (opened by ezio-melotti)
>      defect          trial      http://twistedmatrix.com/trac/ticket/9628
>
> [#9629] Unhandled error in TLS shutdown (opened by jsantos2)
>      defect          core       http://twistedmatrix.com/trac/ticket/9629
>
> [#9630] Twisted TLS support should loudly raise an exception without service_identity (opened by hawkowl)
>      defect          core       http://twistedmatrix.com/trac/ticket/9630
>
> [#9631] Binary wheel for Python 3.7 on Windows (opened by ofek)
>      enhancement     core       http://twistedmatrix.com/trac/ticket/9631
>
> [#9632] Factor reactor name-resolution implementations out of ReactorBase for easier re-use (opened by exarkun)
>      enhancement     core       http://twistedmatrix.com/trac/ticket/9632
>
> [#9633] tox -e lint is broken on pip 19.1 (opened by hawkowl)
>      defect          core       http://twistedmatrix.com/trac/ticket/9633
>
>
>
> Closed Bugs
> ______________________
>
>
>
> Ticket Lifetime Stats
> ______________________
> Oldest open ticket - [#50] conch command-line client doesn't work in win32 (since 2003-07-12 14:41:06).
> Newest open ticket - [#9633] tox -e lint is broken on pip 19.1 (since 2019-04-26 18:34:43.754553).
>
> Mean open ticket age: 2528 days, 8:35:56.837971.
> Median: 2412 days, 23:30:02.403434.
> Standard deviation: 1349 days, 20:50:35.165064.
> Interquartile range: 1977 days, 4:18:42.288177.
>
> Mean time between ticket creation and ticket resolution: 627 days, 0:29:45.545719.
> Median: 65 days, 0:22:19.
> Standard deviation is 1025 days, 11:39:43.423500.
> The interquartile range is 848 days, 2:56:42.
>
> Mean time spent in review: 102 days, 23:33:30.414587.
> Median: 4 days, 15:51:44.
> Standard deviation: 501 days, 2:53:08.460473.
> Interquartile range: 23 days, 3:25:21.
>
> Mean number of times a ticket is reviewed: 1.82463217845.
> Median: 1
> Standard deviation: 1.43581247742.
> Interquartile range: 1.
>
>
> Contributor Stats
> ______________________
> In the last 4 weeks,
>      13 unique ticket reporters
>      6 unique ticket reviewers
>      8 unique ticket resolvers
> In the last 24 weeks,
>      29 unique ticket reporters
>      9 unique ticket reviewers
>      10 unique ticket resolvers
> In the last 48 weeks,
>      64 unique ticket reporters
>      12 unique ticket reviewers
>      16 unique ticket resolvers
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190428/4e02fc8d/attachment.html>

From exarkun at twistedmatrix.com  Mon Apr 29 16:36:47 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 29 Apr 2019 18:36:47 -0400
Subject: [Twisted-Python] Backward incompatible fixes to backward
 incompatible changes
In-Reply-To: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>
References: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>
Message-ID: <CAEeXt4O8HCLzgeVgbcgQ8LBQJXGiPuYFvKE4QNxK1CrQbjBjzA@mail.gmail.com>

On Thu, Apr 25, 2019 at 12:52 PM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> Hello all,
>
> I'd like to discuss the project policy/process for dealing with incorrect
> backward incompatibilities that end up released.
>

Considering the lack of interest in the topic, I'm going to suppose that
there is no policy and the decision is made case-by-case.  In the case I
referenced, I'm going to approve the change in behavior as "compatible" by
on the grounds that it restores the original behavior.

Jean-Paul


> As a case study, we could look at
> https://twistedmatrix.com/trac/ticket/9410
> <https://twistedmatrix.com/trac/ticket/9410#comment:17> /
> https://github.com/twisted/twisted/pull/1106
>
> In Twisted 16.3.0 the behavior of Request.write was changed so that it
> raises an AttributeError if called after the connection has closed.  Prior
> to that release, it silently did nothing in that case.
>
> Now, three years later, we have a PR which proposed restoring the behavior
> of silently ignoring the write to a closed connection.
>
> The original change was incompatible.  The new change is incompatible.
> What should win out?
>
> Jean-Paul
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190429/affab23e/attachment.html>

From contact at evilham.com  Tue Apr 30 04:10:25 2019
From: contact at evilham.com (Evilham)
Date: Tue, 30 Apr 2019 12:10:25 +0200
Subject: [Twisted-Python] Backward incompatible fixes to backward
 incompatible changes
In-Reply-To: <CAEeXt4O8HCLzgeVgbcgQ8LBQJXGiPuYFvKE4QNxK1CrQbjBjzA@mail.gmail.com>
References: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>
 <CAEeXt4O8HCLzgeVgbcgQ8LBQJXGiPuYFvKE4QNxK1CrQbjBjzA@mail.gmail.com>
Message-ID: <86sgtz7qi6.fsf@verdandi.evilham.com>

Jean-Paul Calderone <exarkun at twistedmatrix.com> writes:

> On Thu, Apr 25, 2019 at 12:52 PM Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
>> Hello all,
>>
>> I'd like to discuss the project policy/process for dealing with 
>> incorrect
>> backward incompatibilities that end up released.
>>
>
> Considering the lack of interest in the topic, I'm going to 
> suppose that
> there is no policy and the decision is made case-by-case.  In 
> the case I
> referenced, I'm going to approve the change in behavior as 
> "compatible" by
> on the grounds that it restores the original behavior.


What you say makes sense and, as read on one of the tickets, if 
there *is* a need for that situation to raise an error: 
`AttributeError` certainly isn't the kind of error.
So that should be a totally different discussion.

As for a general policy: it doesn't look like this situation 
happens often enough for there to be a need for one (de facto, 
indeed that means that it is made on a case-by-case basis).
Effort in general should be to prevent the situation from 
happening, which everyone regularly involved in Twisted does a 
great job at already.

Basically: ACK, fully agreed, you are not talking to the void.

>> As a case study, we could look at
>> https://twistedmatrix.com/trac/ticket/9410
>> <https://twistedmatrix.com/trac/ticket/9410#comment:17> /
>> https://github.com/twisted/twisted/pull/1106
>>
>> In Twisted 16.3.0 the behavior of Request.write was changed so 
>> that it
>> raises an AttributeError if called after the connection has 
>> closed.  Prior
>> to that release, it silently did nothing in that case.
>>
>> Now, three years later, we have a PR which proposed restoring 
>> the behavior
>> of silently ignoring the write to a closed connection.
>>
>> The original change was incompatible.  The new change is 
>> incompatible.
>> What should win out?

--
Evilham


From glyph at twistedmatrix.com  Tue Apr 30 23:24:29 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 30 Apr 2019 22:24:29 -0700
Subject: [Twisted-Python] Backward incompatible fixes to backward
 incompatible changes
In-Reply-To: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>
References: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>
Message-ID: <39040855-61B4-477A-862B-3608131CAE80@twistedmatrix.com>

On Thu, Apr 25, 2019, at 9:52 AM, Jean-Paul Calderone wrote:
> Hello all,
> 
> I'd like to discuss the project policy/process for dealing with incorrect backward incompatibilities that end up released.
> 
> As a case study, we could look at https://twistedmatrix.com/trac/ticket/9410 <https://twistedmatrix.com/trac/ticket/9410#comment:17> / https://github.com/twisted/twisted/pull/1106 <https://github.com/twisted/twisted/pull/1106>
> 
> In Twisted 16.3.0 the behavior of Request.write was changed so that it raises an AttributeError if called after the connection has closed.  Prior to that release, it silently did nothing in that case.
> 
> Now, three years later, we have a PR which proposed restoring the behavior of silently ignoring the write to a closed connection.
> 
> The original change was incompatible.  The new change is incompatible.  What should win out?

There are two things to address here, I think:

In the general case, can we reverse changes to behavior which were desirable, but by-policy incompatible, and did not go through the incompatibility exception process, without going through the incompatibility exception process?

I'm choosing my words carefully here; changes might be "desirable" even if they're not intentional; they might be something that the caller expects even if they're not explicitly documented.  In general I'd say that we have to be careful with this kind of reversal and we should probably go through the compat exception process.  But I think the change in question doesn't actually fall into this category, because it's an exception that nobody wanted, wasn't documented, and wasn't intentional.  So it's in this other category:

Should we consider the raising of an undocumented exception to be a compatibility surface we must maintain compatibility with?

In this case, I think it depends on the type of the exception - specifically, whether the exception is defined in Twisted itself, or defined in a library that is clearly being invoked and whose behavior should be propagated.  So, for example, if you call connection.foo().bar() and you get FooCannotBeBarredError, this might something to be considered a compatibility concern.  However, if you call connection.foo().bar() and get an undocumented stdlib exception (KeyError, AttributeError, ValueError), I think it's okay to implicitly treat these as "gross violations of specifications".

In the specific case you dealt with I agree with your evaluation and I'm glad we've landed the bugfix :-).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190430/9ea1c31e/attachment.html>

From chris at withers.org  Mon Apr  1 15:15:33 2019
From: chris at withers.org (Chris Withers)
Date: Mon, 1 Apr 2019 22:15:33 +0100
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
Message-ID: <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>

On 26/03/2019 09:53, Tobias Oberstein wrote:
>>> The Autobahn guys still show ReconnectingClientFactory in their docs, 
> 
> Where did you find that? That would be a doc bug, but in the _docs_, 
> there is no reference to ReconnectingClientFactory
> 
> (cpy372_3) oberstet at intel-nuci7:~$ find 
> ~/scm/crossbario/autobahn-python/docs/ -type f -exec grep -Hi 
> "ReconnectingClientFactory" {} \;
> (cpy372_3) oberstet at intel-nuci7:~$
> 
> We do have some example code using ReconnectingClientFactory though:
> 
> (cpy372_3) oberstet at intel-nuci7:~$ find 
> ~/scm/crossbario/autobahn-python/examples/ -type f -exec grep -Hi 
> "ReconnectingClientFactory" {} \; | wc -l
> 8

Yeah, this one: 
https://github.com/crossbario/autobahn-python/tree/master/examples/twisted/websocket/reconnecting

Would be good to get that converted...

>>  1. ReconnectingClientFactory is destined for deprecation, eventually.
>>       You should just adopt the "new" thing now so that if we get more
>>     energy to cycle the APIs and delete the old stuff, you'll have less
>>     hassle to deal with.  ("New" is in quotes here since it's been
>>     around for well over 3 years at this point; Autobahn should update
>>     too, not just you.)
> 
> Autobahn will automatically use
> 
> twisted.application.internet.ClientService
> 
> for auto-reconnect when on Twisted 16.1.0+
> 
> https://github.com/crossbario/autobahn-python/blob/master/autobahn/twisted/wamp.py#L349 

I'm not using WAMP, just raw websocket.

>>  2. ClientService works with endpoints, which means you can use it with
>>     /any/ kind of transport, like SSH transports, subprocesses, etc.
>>       Most practically, it works with HostnameEndpoint which is a much
>>     better way to get TLS than connectSSL; 

What's the simplest way to connect a ClientService to a websocket url 
(ie: ws://host/endpoint or wss://host/endpoint)

>>      1. if you want to shut down a ReconnectingClientFactory:
>>          1. you have to call stopTrying, then uh...
>>          2. find the last protocol it built with buildProtocol, then

This hasn't proved to hard.

>>          3. grab its transport (hope it's saving that transport as
>>             '.transport', because it doesn't actually have to)
>>          4. call loseConnection

Why? Sending a WebSocket protocol-level close from the client seems to 
work just fine?

>>  5. It's more testable because it just takes its clock and reactor as
>>     constructor parameters, rather than requiring post-hoc
>>     poorly-documented attribute patching to become testable.

I've abstracted all that away into https://github.com/cjw296/carly.
See 
https://github.com/cjw296/carly/blob/master/tests/test_autobahn_websocket_client.py 
for example.
I do still have writing docs for carly on my list of things to do.

It would be great if Twisted ever had a real testing reactor, but I 
think we all know that's never going to happen ;-)

Besides, it's actually useful to test with real networking...

Chris



From tobias.oberstein at gmail.com  Tue Apr  2 00:56:46 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Tue, 2 Apr 2019 08:56:46 +0200
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
Message-ID: <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>

>>>> The Autobahn guys still show ReconnectingClientFactory in their docs, 
>>
>> Where did you find that? That would be a doc bug, but in the _docs_, 
>> there is no reference to ReconnectingClientFactory
>>
>> We do have some example code using ReconnectingClientFactory though:
>>
> Yeah, this one: 
> https://github.com/crossbario/autobahn-python/tree/master/examples/twisted/websocket/reconnecting 
> 
> 
> Would be good to get that converted...

yeah, agreed.

unlikely to happen though (lack of time) unless someone steps up with a PR

> What's the simplest way to connect a ClientService to a websocket url 
> (ie: ws://host/endpoint or wss://host/endpoint)

you might adapt / start from this (again WAMP, but just a matter of 
using websocket rather than wamp factories/protocols):

https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/basic/client_using_clientservice.py



From tobias.oberstein at gmail.com  Tue Apr  2 01:25:17 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Tue, 2 Apr 2019 09:25:17 +0200
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
Message-ID: <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>

Am 02.04.19 um 09:03 schrieb Chris Withers:
> On 02/04/2019 07:56, Tobias Oberstein wrote:
>>> Would be good to get that converted...
>>
>> yeah, agreed.
>>
>> unlikely to happen though (lack of time) unless someone steps up with 
>> a PR
> 
> Okay, but then don't be surprised when people get tripped up by it...

well, I never claimed to be surprised. I was only triggered by the 
reference to our _docs_ as we've put quite some work improving on that.

but honestly, lets not further drum that line;) it leads nowhere. I am 
with you: there is room for improvements. if you have a PR, please think 
about contributing! we'll be working with you / merging ..

> 
>>> What's the simplest way to connect a ClientService to a websocket url 
>>> (ie: ws://host/endpoint or wss://host/endpoint)
>>
>> you might adapt / start from this (again WAMP, but just a matter of 
>> using websocket rather than wamp factories/protocols):
>>
>> https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/basic/client_using_clientservice.py 
> 
> 
> Any way to get rid of the ugly duplication between the url in line 69 
> and the endpoint on line 72?
> 
> I seem to remember that ends up happening with or without ClientService.

I am aware, but no, it's designed like this, because WebSocket requires 
a HTTP URL (with potentially path components, query parameters etc) in 
the opening handshake while the _transport_ does not necessarily have that.

Autobahn allows you to run WebSocket over basically everything that is a 
bidirectional byte pipe: TCP of course, but also Unix domain socket, 
pipes, Tor onion services (via https://github.com/meejah/txtorcon) and 
even serial ports!

Cheers,
/Tobias

> 
> Chris



From chris at withers.org  Tue Apr  2 01:50:31 2019
From: chris at withers.org (Chris Withers)
Date: Tue, 2 Apr 2019 08:50:31 +0100
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
 <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
Message-ID: <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>

On 02/04/2019 08:25, Tobias Oberstein wrote:
>>> https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/basic/client_using_clientservice.py 
>>
>> Any way to get rid of the ugly duplication between the url in line 69 
>> and the endpoint on line 72?
>>
>> I seem to remember that ends up happening with or without ClientService.
> 
> I am aware, but no, it's designed like this, because WebSocket requires 
> a HTTP URL (with potentially path components, query parameters etc) in 
> the opening handshake while the _transport_ does not necessarily have that.
> 
> Autobahn allows you to run WebSocket over basically everything that is a 
> bidirectional byte pipe: TCP of course, but also Unix domain socket, 
> pipes, Tor onion services (via https://github.com/meejah/txtorcon) and 
> even serial ports!

Right, but correct me if I'm wrong, my understanding is that URL stands 
for Univeral Resource Locator and URLs can encode all of the things you 
describe. They certainly contain the host and port, so shouldn't there 
be a graceful way to specify a URL once and have everything that needs 
that info or a subset of it get it from there?

(This isn't necessarily aimed at AutoBahn, seems to be something common 
in Twisted...)

Chris



From tobias.oberstein at gmail.com  Tue Apr  2 02:07:48 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Tue, 2 Apr 2019 10:07:48 +0200
Subject: [Twisted-Python] stop/start client connections with
 loseConnection in ReconnectingClientFactory
In-Reply-To: <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
 <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
 <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>
Message-ID: <3d864a33-90bf-3f76-fe17-e627e26ee0b5@gmail.com>

Am 02.04.19 um 09:50 schrieb Chris Withers:
> On 02/04/2019 08:25, Tobias Oberstein wrote:
>>>> https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/basic/client_using_clientservice.py 
>>>
>>>
>>> Any way to get rid of the ugly duplication between the url in line 69 
>>> and the endpoint on line 72?
>>>
>>> I seem to remember that ends up happening with or without ClientService.
>>
>> I am aware, but no, it's designed like this, because WebSocket 
>> requires a HTTP URL (with potentially path components, query 
>> parameters etc) in the opening handshake while the _transport_ does 
>> not necessarily have that.
>>
>> Autobahn allows you to run WebSocket over basically everything that is 
>> a bidirectional byte pipe: TCP of course, but also Unix domain socket, 
>> pipes, Tor onion services (via https://github.com/meejah/txtorcon) and 
>> even serial ports!
> 
> Right, but correct me if I'm wrong, my understanding is that URL stands 
> for Univeral Resource Locator and URLs can encode all of the things you 

WebSocket needs a _HTTP_ URL

an URL from the HTTP scheme cannot encode eg a Unix domain socket path 
or a serial port

one could certainly come with with other/different non-HTTP URL schemes 
.. and in some way, Autobahn WAMP machinery has sth in that direction:

eg WAMP can be run not only over WebSocket, but also RawSocket, which is 
a WAMP-specific transport (above byte-level, at the framing level), that 
is simpler than WebSocket, and for that we using (non-standard) URLs like

rs://<host:port>
rss://<host:port>

fwiw, WAMP is a protocol with a clear-cut, rigorous and decoupled layering:

- bidirectional reliable byte level transport (tcp, uds, pipes, ..)
- message framing (websocket, rawsocket, ..)
- serialization (json, cbor, flatbuffers, ..)

and Autobahn and Crossbar.io support _every_ combination of those layers 
(dozens) to run WAMP

> describe. They certainly contain the host and port, so shouldn't there 
> be a graceful way to specify a URL once and have everything that needs 
> that info or a subset of it get it from there?

a (fully qualified) HTTP URL of course encodes a host and port, but that 
only covers transports that have those notions

> 
> (This isn't necessarily aimed at AutoBahn, seems to be something common 
> in Twisted...)

things look only "simple" when leaving out details;)

anyways: this is now OT to the original issue I would think ..

> 
> Chris



From dholth at gmail.com  Tue Apr  2 08:29:15 2019
From: dholth at gmail.com (Daniel Holth)
Date: Tue, 2 Apr 2019 10:29:15 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+7AOUam+Ua0k+AD=dnBMM11UyFo-jhCYBnEy09s9vBadg@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
 <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
 <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>
 <95B8427F-EF45-4CAB-AB6F-44860047FE74@twistedmatrix.com>
 <CAG8k2+7AOUam+Ua0k+AD=dnBMM11UyFo-jhCYBnEy09s9vBadg@mail.gmail.com>
Message-ID: <CAG8k2+4LUzbC36reZGSRLi2K6bVu0Nfe5d7Z0YPhPLwgKLssMA@mail.gmail.com>

Let me know if you're able to try getting a https certificate in this way:

Using tls-alpn-01 negotiation with txsni (acme branch) and the
dehydrated letsencrypt client:

Install txsni (acme branch):

pip install git+https://github.com/dholth/txsni at acme#egg=txsni

Unpack dehydrated acme client shell script from https://dehydrated.io/

Make and enter config directory:

mkdir -p ~/etc/dehydrated

cd ~/etc/dyhydrated

Use acmesni to listen on port 443:

authbind twist web --listen acmesni:~/etc/dehydrated:tcp6:443 &

Make config file:

echo CHALLENGETYPE="tls-alpn-01" > config

Create letsencrypt account:

dehydrated --register --accept-terms

Request certificate (replace example.com with your fqnd):

dehydrated -c -d example.com


Letsencrypt should request a special certificate from the twisted web
server to prove domain control, and then dehydrated installs the new
certificate for 'example.com' in ~/etc/dehydrated/certs/...
https://example.com will be ready to go.


Authbind, to listen on privileged ports in linux without root:

(install authbind); touch /etc/authbind/byport/{80,443}; chown
<username> /etc/authbind/byport/*; chmod u+x /etc/authbind/byport/*

On Sun, Mar 24, 2019 at 9:17 PM Daniel Holth <dholth at gmail.com> wrote:
>
> Do move it to twisted. I was surprised it wasn't already there.
>
> On Sun, Mar 24, 2019, 17:39 Glyph <glyph at twistedmatrix.com> wrote:
>>
>> Thanks! I put some review comments on it.  I would encourage others with interest in this area to have a look; I might not get back to this for a couple of weeks, but I'd be happy to give people collaborator permissions on the repo if they'd like to help out.
>>
>> (Frankly it's probably time that this project grew up and moved over to the Twisted org anyway, given that txacme depends on it...)
>>
>> -g
>>
>> On Mar 24, 2019, at 1:59 PM, Daniel Holth <dholth at gmail.com> wrote:
>>
>> Pull request for txsni acme https://github.com/glyph/txsni/pull/28
>>
>> On Sun, Mar 24, 2019, 16:33 Glyph <glyph at twistedmatrix.com> wrote:
>>>
>>> Any chance you could include a link to the relevant PR?  Pulling this out of the raging tire-fire of my Github notifications would take an unfortunately non-trivial amount of time - and I imagine that not everyone subscribed might even be on the appropriate repos :).
>>>
>>> -g
>>>
>>> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com> wrote:
>>>
>>> The cleaned up pull request should be really easy to try, with a dehydrated:(basedir) string port. Go get some certs people!
>>>
>>> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com> wrote:
>>>>
>>>> I think ACME_TLS_1 is a sufficiently high-entropy string that the likelihood of brokenness from this approach is basically zero.
>>>>
>>>> -g
>>>>
>>>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
>>>>
>>>> All we have to do is have some kind of per connection certificate store or flag. If acme is in the first packet and the special certificate exists, send it. Otherwise send the normal certificate, for a very short window of possible brokenness. Letsencrypt may or may not require correct alpn negotiation. Should be simple.
>>>>
>>>> I'm happy running the acme client separately and listing my domain instead of doing it all on demand inside twisted.
>>>>
>>>>
>>>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:
>>>>>
>>>>>
>>>>>
>>>>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
>>>>> >
>>>>> > HOLY REGEX BATMAN
>>>>> >
>>>>> > class _ConnectionProxy(object):
>>>>> >
>>>>> >    def bio_write(self, buf):
>>>>> >        if ACME_TLS_1 in buf:
>>>>> >            self.acme_tls_1 = True
>>>>> >        self.bio_write = self._obj.bio_write
>>>>> >        return self._obj.bio_write(buf)
>>>>> > Now we can choose the acme certificate store in the sni callback and
>>>>> > make letsencrypt happy!
>>>>>
>>>>> 1. Gross
>>>>> 2. Hooray!
>>>>>
>>>>> -g
>>>>>
>>>>> _______________________________________________
>>>>> Twisted-Python mailing list
>>>>> Twisted-Python at twistedmatrix.com
>>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From barry.scott at forcepoint.com  Tue Apr  2 10:17:50 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Tue, 2 Apr 2019 16:17:50 +0000
Subject: [Twisted-Python] A Proposal for reducing the burden of
 developing on Twisted by dropping Python 2 support
In-Reply-To: <B023933C-AB12-4C15-916D-4E195394AAF8@twistedmatrix.com>
References: <e842dd99-41de-7a16-b388-d08550d655bb@atleastfornow.net>
 <64733852.0XqjMW6x9D@barry-scott-desktop>
 <B023933C-AB12-4C15-916D-4E195394AAF8@twistedmatrix.com>
Message-ID: <3649058.voc2BpGfGX@barry-scott-desktop>

On Tuesday, 26 March 2019 04:57:57 BST Glyph wrote:
> Hi Barry!
> 
> Thanks for your feedback.
> 
> > On Mar 25, 2019, at 10:22 AM, Scott, Barry <barry.scott at forcepoint.com>
> > wrote:
> > 
> > We are stuck on python2.7 for the foreseeable future and you will not see
> > us in the PyPi stats. We download your release tar ball and build an RPM
> > from it. We also have to build python2.7 our selves as we are stuck on
> > Centos 6.8.
> Given the nature of your product I'm curious: isn't the inability to
> maintain certifications like PCI / HIPAA due to the lack of upstream
> support for python 2.7 a problem for a security application?

So long as RedHat/Centos support 2.7 we should be fine and they will support
it far beyond the python.org EOL date.

> > Having a legacy twisted with critical bugs and security fixes would work
> > for us.
> 
> Apropos of the question in my other response - would you (or any of your
> colleagues) be willing to take responsibility for such a branch and do the
> security triage / backport work there?

I'll investigate from my end - no promises.

Barry

> 
> -g






From john at egh.com  Wed Apr  3 23:35:18 2019
From: john at egh.com (John Santos)
Date: Thu, 4 Apr 2019 01:35:18 -0400
Subject: [Twisted-Python] Twisted 19.2.0rc2 Release Candidate
 Announcement
In-Reply-To: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>
References: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>
Message-ID: <96e1ca6d-98a7-d779-5112-fa6ece11472f@egh.com>

Good news: My app seems to work fine with 19.2.0rc2

Built Twisted from the source tarball.

I did need to update some of the Python packages it uses, no big deal.

On 3/27/2019 05:59 AM, Amber Brown wrote:
> Hello everyone! 19.2.0rc2 is now out. Sorry for the delay!
> 
> This fixes the Cryptography dependency being set to 1.5, when we 
> actually require at least 2.5.
> 
> You can get the tarball and the NEWS file at 
> https://twistedmatrix.com/Releases/rc/19.2.0rc2/ , or you can try it out 
> from PyPI:
> 
>      python -m pip install Twisted==19.2.0rc2
> 
> Please test it, and let me know how your applications fare, good or bad! 
> If nothing comes up, 19.2 will release in a week.
> 
> Twisted regards,
> 
> Amber Brown (hawkowl)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
--
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539



From glyph at twistedmatrix.com  Wed Apr  3 23:39:35 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Apr 2019 22:39:35 -0700
Subject: [Twisted-Python] Twisted 19.2.0rc2 Release Candidate
 Announcement
In-Reply-To: <96e1ca6d-98a7-d779-5112-fa6ece11472f@egh.com>
References: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>
 <96e1ca6d-98a7-d779-5112-fa6ece11472f@egh.com>
Message-ID: <5179C8E1-CAD1-4421-976F-2C1FCDC009BA@twistedmatrix.com>

Thanks for testing, John!

-g

> On Apr 3, 2019, at 10:35 PM, John Santos <john at egh.com> wrote:
> 
> Good news: My app seems to work fine with 19.2.0rc2
> 
> Built Twisted from the source tarball.
> 
> I did need to update some of the Python packages it uses, no big deal.
> 
> On 3/27/2019 05:59 AM, Amber Brown wrote:
>> Hello everyone! 19.2.0rc2 is now out. Sorry for the delay!
>> This fixes the Cryptography dependency being set to 1.5, when we actually require at least 2.5.
>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/19.2.0rc2/ , or you can try it out from PyPI:
>>     python -m pip install Twisted==19.2.0rc2
>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 19.2 will release in a week.
>> Twisted regards,
>> Amber Brown (hawkowl)
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> -- 
> --
> John Santos
> Evans Griffiths & Hart, Inc.
> 781-861-0670 ext 539
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From tobias.oberstein at gmail.com  Thu Apr  4 00:49:13 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Thu, 4 Apr 2019 08:49:13 +0200
Subject: [Twisted-Python] Twisted 19.2.0rc2 Release Candidate
 Announcement
In-Reply-To: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>
References: <917037f8-7bda-7f03-4442-675ddf949b1c@atleastfornow.net>
Message-ID: <9b2ae21c-117c-1284-609a-c8a0438738ec@gmail.com>

Hi Amber,

I did a quick test for crossbar/autobahn (linux, fresh venvs):

looks good!

cpython 3.7.2

https://gist.github.com/oberstet/c950a07ca8c3d52d405fa2994f1ce3a9

pypy 7.0.0

https://gist.github.com/oberstet/ce0642528a2a71dd451c13681adda3e8

greets, /Tobias


Am 27.03.19 um 10:59 schrieb Amber Brown:
> Hello everyone! 19.2.0rc2 is now out. Sorry for the delay!
> 
> This fixes the Cryptography dependency being set to 1.5, when we 
> actually require at least 2.5.
> 
> You can get the tarball and the NEWS file at 
> https://twistedmatrix.com/Releases/rc/19.2.0rc2/ , or you can try it out 
> from PyPI:
> 
>      python -m pip install Twisted==19.2.0rc2
> 
> Please test it, and let me know how your applications fare, good or bad! 
> If nothing comes up, 19.2 will release in a week.
> 
> Twisted regards,
> 
> Amber Brown (hawkowl)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From touch.sereysethy at gmail.com  Fri Apr  5 07:26:40 2019
From: touch.sereysethy at gmail.com (Sereysethy TOUCH)
Date: Fri, 5 Apr 2019 15:26:40 +0200
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
Message-ID: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>

Hello,

I am implementing a program using SSHCommandClientEndpoint, the program
works fine (dataReceived got calls) but when the server send an error
message (stderr..), the function extReceived in my protocol never gets
called, instead it only calls the one in the SSHChannel as I can see in the
log (got extended data 1 b': No such file or directory\n'). How to override
that? Or how to connect it to my protocol?

I adapted the program found on Twisted website.

Thanks,
Sethy

from twisted.conch.endpoints import SSHCommandClientEndpoint
from twisted.internet.protocol import Factory, Protocol
from twisted.python import log
import sys
from twisted.internet.defer import Deferred

class NoiseProtocol(Protocol):
    def connectionMade(self):
        print("connectionMade")
        self.finished = Deferred()
        self.strings = ["bif", "pow", "zot"]
        self.sendNoise()

    def sendNoise(self):
        if self.strings:
            self.transport.write(self.strings.pop(0) + "\n")
        else:
            self.transport.loseConnection()


    def dataReceived(self, data):
        print("Server says:", data)
        self.sendNoise()

    def extReceived(self, dataType, data):
        print("extReceived")

    def connectionLost(self, reason):
        self.finished.callback(None)

command = b"cat unknownfile"

username = b"XXXX"
password = b"XXXX"
host = b"server"
port = 22

endpoint = SSHCommandClientEndpoint.newConnection(
    reactor, command, username, host, port,
    password=password, agentEndpoint=None)

factory = Factory()
factory.protocol = NoiseProtocol

d = endpoint.connect(factory)
d.addCallback(lambda proto: proto.finished)
log.startLogging(sys.stdout, setStdout=0)
reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190405/4904a527/attachment-0002.html>

From sean.dizazzo at gmail.com  Fri Apr  5 10:35:01 2019
From: sean.dizazzo at gmail.com (Sean DiZazzo)
Date: Fri, 5 Apr 2019 09:35:01 -0700
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
In-Reply-To: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
References: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
Message-ID: <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>

It looks like extReceived() is a method of SSHSession.Channel.SSHChannel
<https://twistedmatrix.com/documents/8.1.0/api/twisted.conch.ssh.session.SSHSession.html#extReceived>.
You can access it through the protocol's transport.

self.transport.conn.channels[0].extReceived()

~Sean

On Fri, Apr 5, 2019 at 6:27 AM Sereysethy TOUCH <touch.sereysethy at gmail.com>
wrote:

> Hello,
>
> I am implementing a program using SSHCommandClientEndpoint, the program
> works fine (dataReceived got calls) but when the server send an error
> message (stderr..), the function extReceived in my protocol never gets
> called, instead it only calls the one in the SSHChannel as I can see in the
> log (got extended data 1 b': No such file or directory\n'). How to override
> that? Or how to connect it to my protocol?
>
> I adapted the program found on Twisted website.
>
> Thanks,
> Sethy
>
> from twisted.conch.endpoints import SSHCommandClientEndpoint
> from twisted.internet.protocol import Factory, Protocol
> from twisted.python import log
> import sys
> from twisted.internet.defer import Deferred
>
> class NoiseProtocol(Protocol):
>     def connectionMade(self):
>         print("connectionMade")
>         self.finished = Deferred()
>         self.strings = ["bif", "pow", "zot"]
>         self.sendNoise()
>
>     def sendNoise(self):
>         if self.strings:
>             self.transport.write(self.strings.pop(0) + "\n")
>         else:
>             self.transport.loseConnection()
>
>
>     def dataReceived(self, data):
>         print("Server says:", data)
>         self.sendNoise()
>
>     def extReceived(self, dataType, data):
>         print("extReceived")
>
>     def connectionLost(self, reason):
>         self.finished.callback(None)
>
> command = b"cat unknownfile"
>
> username = b"XXXX"
> password = b"XXXX"
> host = b"server"
> port = 22
>
> endpoint = SSHCommandClientEndpoint.newConnection(
>     reactor, command, username, host, port,
>     password=password, agentEndpoint=None)
>
> factory = Factory()
> factory.protocol = NoiseProtocol
>
> d = endpoint.connect(factory)
> d.addCallback(lambda proto: proto.finished)
> log.startLogging(sys.stdout, setStdout=0)
> reactor.run()
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190405/3426b20d/attachment-0002.html>

From touch.sereysethy at gmail.com  Fri Apr  5 12:07:54 2019
From: touch.sereysethy at gmail.com (Sereysethy TOUCH)
Date: Fri, 5 Apr 2019 20:07:54 +0200
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
In-Reply-To: <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>
References: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
 <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>
Message-ID: <CAJB=Z86sbz_=i8-4SyBqwDUT0uBx6avDr8Dr2HGhZ9RngfaD6g@mail.gmail.com>

Hi Sean,

Yes it is a method of SSHChannel, but when I read the source code, the
_CommandChannel only implements dataReceived which calls protocol's method
but it does not implement extReceived.

When you suggest to call it like that
(self.transport.conn.channels[0].extReceived()),
how do I know when extended data is received?

For now I have subclassed _CommandChannel and also SSHCommandClientEndpoint
in order to add extReceived.

Sethy

On Fri, Apr 5, 2019 at 6:35 PM Sean DiZazzo <sean.dizazzo at gmail.com> wrote:

> It looks like extReceived() is a method of SSHSession.Channel.SSHChannel
> <https://twistedmatrix.com/documents/8.1.0/api/twisted.conch.ssh.session.SSHSession.html#extReceived>.
> You can access it through the protocol's transport.
>
> self.transport.conn.channels[0].extReceived()
>
> ~Sean
>
> On Fri, Apr 5, 2019 at 6:27 AM Sereysethy TOUCH <
> touch.sereysethy at gmail.com> wrote:
>
>> Hello,
>>
>> I am implementing a program using SSHCommandClientEndpoint, the program
>> works fine (dataReceived got calls) but when the server send an error
>> message (stderr..), the function extReceived in my protocol never gets
>> called, instead it only calls the one in the SSHChannel as I can see in the
>> log (got extended data 1 b': No such file or directory\n'). How to override
>> that? Or how to connect it to my protocol?
>>
>> I adapted the program found on Twisted website.
>>
>> Thanks,
>> Sethy
>>
>> from twisted.conch.endpoints import SSHCommandClientEndpoint
>> from twisted.internet.protocol import Factory, Protocol
>> from twisted.python import log
>> import sys
>> from twisted.internet.defer import Deferred
>>
>> class NoiseProtocol(Protocol):
>>     def connectionMade(self):
>>         print("connectionMade")
>>         self.finished = Deferred()
>>         self.strings = ["bif", "pow", "zot"]
>>         self.sendNoise()
>>
>>     def sendNoise(self):
>>         if self.strings:
>>             self.transport.write(self.strings.pop(0) + "\n")
>>         else:
>>             self.transport.loseConnection()
>>
>>
>>     def dataReceived(self, data):
>>         print("Server says:", data)
>>         self.sendNoise()
>>
>>     def extReceived(self, dataType, data):
>>         print("extReceived")
>>
>>     def connectionLost(self, reason):
>>         self.finished.callback(None)
>>
>> command = b"cat unknownfile"
>>
>> username = b"XXXX"
>> password = b"XXXX"
>> host = b"server"
>> port = 22
>>
>> endpoint = SSHCommandClientEndpoint.newConnection(
>>     reactor, command, username, host, port,
>>     password=password, agentEndpoint=None)
>>
>> factory = Factory()
>> factory.protocol = NoiseProtocol
>>
>> d = endpoint.connect(factory)
>> d.addCallback(lambda proto: proto.finished)
>> log.startLogging(sys.stdout, setStdout=0)
>> reactor.run()
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190405/b4b5e46d/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri Apr  5 12:12:54 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 5 Apr 2019 14:12:54 -0400
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
In-Reply-To: <CAJB=Z86sbz_=i8-4SyBqwDUT0uBx6avDr8Dr2HGhZ9RngfaD6g@mail.gmail.com>
References: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
 <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>
 <CAJB=Z86sbz_=i8-4SyBqwDUT0uBx6avDr8Dr2HGhZ9RngfaD6g@mail.gmail.com>
Message-ID: <CAEeXt4Og3SsdMew_Qat81aor8J7384ZjAHr86682upQBqP+f6A@mail.gmail.com>

On Fri, Apr 5, 2019 at 2:08 PM Sereysethy TOUCH <touch.sereysethy at gmail.com>
wrote:

> Hi Sean,
>
> Yes it is a method of SSHChannel, but when I read the source code, the
> _CommandChannel only implements dataReceived which calls protocol's method
> but it does not implement extReceived.
>
> When you suggest to call it like that (self.transport.conn.channels[0].extReceived()),
> how do I know when extended data is received?
>
> For now I have subclassed _CommandChannel and also SSHCommandClientEndpoint
> in order to add extReceived.
>

An interesting question might be ... what do you want to happen to such
data?  Do you want it mixed in with the stdout stream?

For an IProtocol-based API, there aren't a lot of other options.  Maybe it
would be useful to have a similar API that works in terms of
IProcessProtocol instead of IProtocol?

There is a ProcessEndpoint that takes a flag that controls what it does
with stderr - currently supporting only two options, log it or drop it.

What did you hook extReceived up to in your subclass?

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190405/b3c25168/attachment-0002.html>

From touch.sereysethy at gmail.com  Sat Apr  6 11:12:17 2019
From: touch.sereysethy at gmail.com (Sereysethy TOUCH)
Date: Sat, 6 Apr 2019 19:12:17 +0200
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
In-Reply-To: <CAEeXt4Og3SsdMew_Qat81aor8J7384ZjAHr86682upQBqP+f6A@mail.gmail.com>
References: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
 <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>
 <CAJB=Z86sbz_=i8-4SyBqwDUT0uBx6avDr8Dr2HGhZ9RngfaD6g@mail.gmail.com>
 <CAEeXt4Og3SsdMew_Qat81aor8J7384ZjAHr86682upQBqP+f6A@mail.gmail.com>
Message-ID: <CAJB=Z85r+M+qD4Bdx-NuwzjpracBmGksJwiktb33Un9FSKJgPQ@mail.gmail.com>

Hi Jean-Paul,

No I dont want it to be mixed with stdout stream, it should be separated
from normal stdout, so that I know it is an error.

To be honest, I am pretty to new to Twisted concept, there are things that
I have not familiar with yet. Actually I can also implement a low level ssh
client (which I already did), but as SSHCommandClientEndpoint is already
available, so I want to use it straight away. But when I dived in the
source code, the _CommandChannel only implements dataReceived but not
extReceived.

For your suggestion on using ProcessEndpoint how can I use it for my SSH
client?

In my extReceived I just deliver what I got to the extReceived of method
protocol, it is exactly the same as Twisted implements dataReceived:

class CommandChannel(_CommandChannel):
    def extReceived(self, dataType, data):
        """
        When the command's extended data (usually standard error) arrives,
        deliver it to the protocol instance.

        @type dataType: L{int}
        @type data:     L{str}
        """
        self._protocol.extReceived(dataType, data)

I have two other questions since you are here

1) how can we execute command like more or less which is an interactive
command?
2) how to request a pty to ssh server?

Thanks,
Sethy



On Fri, Apr 5, 2019 at 8:13 PM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Fri, Apr 5, 2019 at 2:08 PM Sereysethy TOUCH <
> touch.sereysethy at gmail.com> wrote:
>
>> Hi Sean,
>>
>> Yes it is a method of SSHChannel, but when I read the source code, the
>> _CommandChannel only implements dataReceived which calls protocol's method
>> but it does not implement extReceived.
>>
>> When you suggest to call it like that (self.transport.conn.channels[0].extReceived()),
>> how do I know when extended data is received?
>>
>> For now I have subclassed _CommandChannel and also SSHCommandClientEndpoint
>> in order to add extReceived.
>>
>
> An interesting question might be ... what do you want to happen to such
> data?  Do you want it mixed in with the stdout stream?
>
> For an IProtocol-based API, there aren't a lot of other options.  Maybe it
> would be useful to have a similar API that works in terms of
> IProcessProtocol instead of IProtocol?
>
> There is a ProcessEndpoint that takes a flag that controls what it does
> with stderr - currently supporting only two options, log it or drop it.
>
> What did you hook extReceived up to in your subclass?
>
> Jean-Paul
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190406/c0f13b65/attachment-0002.html>

From trac at twistedmatrix.com  Sun Apr  7 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 Apr 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1554617118.15.3274645334302854259@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190407/277a77e9/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Apr  7 01:15:41 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 7 Apr 2019 00:15:41 -0700
Subject: [Twisted-Python] how to get extReceived call from
 SSHCommandClientEndpoint
In-Reply-To: <CAJB=Z85r+M+qD4Bdx-NuwzjpracBmGksJwiktb33Un9FSKJgPQ@mail.gmail.com>
References: <CAJB=Z84Bj-DdEqMWjpwX9DBFQMSj0_-UBSEMQbxvPhkEgxReGQ@mail.gmail.com>
 <CANzH6evTMO9yqVi8u9Ou=69_g0Xx=Tj+33Uocx91ECEzfOaFMg@mail.gmail.com>
 <CAJB=Z86sbz_=i8-4SyBqwDUT0uBx6avDr8Dr2HGhZ9RngfaD6g@mail.gmail.com>
 <CAEeXt4Og3SsdMew_Qat81aor8J7384ZjAHr86682upQBqP+f6A@mail.gmail.com>
 <CAJB=Z85r+M+qD4Bdx-NuwzjpracBmGksJwiktb33Un9FSKJgPQ@mail.gmail.com>
Message-ID: <741E10F6-A0AB-463F-8D16-32DF742D8EAE@twistedmatrix.com>



> On Apr 6, 2019, at 10:12 AM, Sereysethy TOUCH <touch.sereysethy at gmail.com> wrote:
> 
> Hi Jean-Paul,
> 
> No I dont want it to be mixed with stdout stream, it should be separated from normal stdout, so that I know it is an error.
> 
> To be honest, I am pretty to new to Twisted concept, there are things that I have not familiar with yet. Actually I can also implement a low level ssh client (which I already did), but as SSHCommandClientEndpoint is already available, so I want to use it straight away. But when I dived in the source code, the _CommandChannel only implements dataReceived but not extReceived.

The main point of `SSHCommandClientEndpoint` is to allow code that doesn't know about SSH to run over SSH, for example to enable forwarding.  So you can't unconditionally require everyone to implement extReceived, because IProtocol doesn't require this.

> For your suggestion on using ProcessEndpoint how can I use it for my SSH client?

Jean-Paul was suggesting a way that Twisted could be modified to support your use-case, not a thing that you can do today in your own code.

> In my extReceived I just deliver what I got to the extReceived of method protocol, it is exactly the same as Twisted implements dataReceived:
> 
> class CommandChannel(_CommandChannel): 
>     def extReceived(self, dataType, data):
>         """
>         When the command's extended data (usually standard error) arrives,
>         deliver it to the protocol instance.
> 
>         @type dataType: L{int}
>         @type data:     L{str}
>         """
>         self._protocol.extReceived(dataType, data)

If you wanted to contribute this functionality to Twisted, the usual idiom here would be to do a check, like:

protocol = self._protocol
if ISSHExtendedProtocol.providedBy(protocol):
    protocol.extReceived(dataType, data)

Doing this on every extReceived may be a little bit of a performance hit, so caching this computation and/or the behavior associated with it is left as an exercise for you :).

> I have two other questions since you are here
> 
> 1) how can we execute command like more or less which is an interactive command?

Looking at what the 'conch' script does, I think what you're asking is something like this:

self.conn.sendRequest(self, b'exec', common.NS(options['command']))

> 2) how to request a pty to ssh server?

Again from twisted/conch/scripts/conch.py:

ptyReqData = session.packRequest_pty_req(term, winSize, '')
self.conn.sendRequest(self, b'pty-req', ptyReqData)


> 
> Thanks,
> Sethy

Thanks for using Twisted,

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190407/f968d53b/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Apr  7 23:17:10 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 7 Apr 2019 22:17:10 -0700
Subject: [Twisted-Python] magical and seamless asyncio support
Message-ID: <CB7FC780-FCBD-4150-A6A8-73F21C644103@twistedmatrix.com>

After filing https://github.com/tornadoweb/tornado/issues/2636 <https://github.com/tornadoweb/tornado/issues/2636> recently, I was reminded that Twisted should support asyncio seamlessly, and currently we have some quite-visible seams.

There are three major use-cases for asyncio integration:

I've got a large Twisted application.  I run the reactor at startup.  I find a cool asyncio lib.  I want to use it.  What do I do?
I've got a large asyncio application.  I run the main loop at startup.  I find a cool twisted lib.  I want to use it.  What do I do?
I'm noodling around in an environment, like a Jupyter notebook, which already happens to have an event loop but I don't really know which one it is.  How do I have the fewest number of steps?

What happens today in each case?

Case 1: If I've got a large Twisted application, I either start off by doing Deferred.fromFuture or ensureDeferred.  These give me Deferreds that never fire, because no asyncio loop is running, but they don't yell at me; they just hang.  Now I have to switch my event loop over to be an AsyncioSelectorReactor.  Except wait, my application is a GTK+ application, and the only GTK+ main loop I can get that implements the asyncio APIs is unmaintained!  So I either give up my custom Twisted reactor or I give up my asyncio functionality or I run it all in a thread.  None of these are great experiences.

Case 2: if I've got an asyncio application, I have a similar problem; I need a reactor, but one isn't running, so all my Deferred.asFuture(get_event_loop())s just hang.  So I need to run AsyncioSelectorReactor, but now I need to know a bunch of obscure Twisted trivia to boostrap all of this properly:

Case 3: oh no, how do I even know which one I need to run?

In all of these cases I need to know a bunch of really inane trivia:

I need to call startRunning() on the reactor, but just once, when it gets set up, or threadpool invocations (such as name resolution) will hang.  Unless I'm lucky enough to actually control the whole process startup, in which case I can replace my event loop's .run_forever() with Twisted's .run().
I need to know whether I need subprocess support, and from whom.  If I need it in Twisted, I need to do startRunning(installSignalHandlers=True); if I need it in asyncio, I need to do installSignalHandlers=False.  I don't think there's a way to have both.
I'd better hope that this is not on Windows, because Twisted is going to use its POSIX socket I/O implementation no matter what.
Then, once it's up and running, rather than just 'await'-ing Deferreds, I always need to await someDeferred().asFuture(loop=get_event_loop()).  From a practical perspective, get_event_loop() is the only correct value that I'd ever want to pass here, but for some reason the library makes me pass it every time.

I propose a series of changes that would make this seamless from either side.

Make Deferreds awaitable by asyncio by just calling `get_event_loop` and lying about what loop they're connected to.  My reading of this is that https://github.com/python/cpython/blob/c5c6cdada3d41148bdeeacfe7528327b481c5d18/Modules/_asynciomodule.c#L215 <https://github.com/python/cpython/blob/c5c6cdada3d41148bdeeacfe7528327b481c5d18/Modules/_asynciomodule.c#L215> will totally let us do that, if we just have a get_loop method (or, gross, _loop property) on Deferred or whatever's returned from Deferred.__await__.  It would be fine if this raised a warning or something, as long as it worked in the 80% case so people could get some initial success and a pointer as to how to succeed, and not just hitting a wall with "task got bad yield".
Make the reactor automagical.
Phase one of this change would be: when you do 'from twisted.internet import reactor', if there's already an asyncio loop installed and running, automatically select the asyncio integration.  This only helps you if you're in a context like a Jupyter notebook where you're not doing it at the module level, but that's still interesting.
Make 'twisted.internet.reactor' into a dynamic proxy object which forwards reactor calls to whichever the running reactor is at the moment of the method call (connectTCP, callLater, etc).  This can move the reactor selection to whenever the "first touch" on the reactor is, rather than whenever it's imported.  (This also fixes a ton of of annoying import-order stuff in Twisted itself, as a bonus.)
Automatically call startRunning() as necessary if another loop is in charge.
Fix the subprocess integration:
As a simple first step, for UNIX, at least participate in the asyncio get_child_watcher() / set_child_watcher() protocol, so that at least someone trying to coordinate a Twisted loop and an asyncio loop can intentionally select which one gets child process termination notifications, and possibly even multiplex this.
Fix subprocesses along with any platform-specific socket quirks, by doing the next step...
Actually use the asyncio APIs in the "asyncio side down" integration, i.e. AsyncioSelectorReactor.  Presently we implement everything in terms of the add_reader and add_writer APIs, which is both very low-level and also fairly UNIX-specific.  We should instead be using loop.create_connection, loop.create_server, loop.subprocess_exec, loop.getaddrinfo, etc, and translating between asyncio protocol/transport APIs and our own.
Implement the "twisted side down" integration with asyncio; i.e. instead of implementing the twisted APIs in terms of asyncio's interfaces, implement the asyncio APIs in terms of Twisted's interfaces, so we can use existing custom reactors, GUI loop integration, etc.

This is all quite a bit of work but I think it would massively improve the experience of a novice trying to adopt Twisted in a modern Python stack.

In particular, I think that in addition to being a good example of the general problem domain, Jupyter is quite specifically incredibly strategic, and having the ability to just grab Treq and start doing massively parallel I/O to ingest data, then just 'await' on it, would be a very powerful demonstration of Twisted's capabilities.

Let me know what you all think!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190407/c710c98a/attachment-0002.html>

From chris at withers.org  Wed Apr 10 00:00:40 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 10 Apr 2019 07:00:40 +0100
Subject: [Twisted-Python] ws(s):// urls and host/port duplication in
 twisted/autobahn code
In-Reply-To: <3d864a33-90bf-3f76-fe17-e627e26ee0b5@gmail.com>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
 <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
 <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>
 <3d864a33-90bf-3f76-fe17-e627e26ee0b5@gmail.com>
Message-ID: <e0b70e06-98b9-95f8-47e0-dcfdff8b0c90@withers.org>

On 02/04/2019 09:07, Tobias Oberstein wrote:
>> Right, but correct me if I'm wrong, my understanding is that URL 
>> stands for Univeral Resource Locator and URLs can encode all of the 
>> things you 
> 
> WebSocket needs a _HTTP_ URL

Not sure I follow, I specify ws:// and things work. What am I missing?
(I know the initial protocol is http and that's "upgraded" into 
websocket, but the url is still ws:// or wss://, right?)

> fwiw, WAMP is a protocol with a clear-cut, rigorous and decoupled layering:

Do browsers speak WAMP? Do firewalls get upset with it?

>> describe. They certainly contain the host and port, so shouldn't there 
>> be a graceful way to specify a URL once and have everything that needs 
>> that info or a subset of it get it from there?
> 
> a (fully qualified) HTTP URL of course encodes a host and port, but that 
> only covers transports that have those notions

Not sure what you mean by fully qualified?

>> (This isn't necessarily aimed at AutoBahn, seems to be something 
>> common in Twisted...)
> 
> things look only "simple" when leaving out details;)

There's never a reasonable excuse for duplicating the same information 
within a few lines of code.

Chris



From hawkowl at atleastfornow.net  Wed Apr 10 06:36:16 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Wed, 10 Apr 2019 22:36:16 +1000
Subject: [Twisted-Python] Twisted 19.2.0 Release Announcement
Message-ID: <4e608061-b623-3240-6027-f9f8664b9f05@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the 
release of Twisted 19.2! The highlights of this release are:

  * twisted.web.client.HostnameCachingHTTPSPolicy was added as a new
    contextFactory option. This reduces the performance overhead for
    making many TLS connections to the same host.
  * twisted.conch.ssh.keys can now read private keys in the new
    "openssh-key-v1" format, introduced in OpenSSH 6.5 and made the
    default in OpenSSH 7.8.
  * The sample code in the "Twisted Web In 60 Seconds" tutorial runs on
    Python 3.
  * DeferredLock and DeferredSemaphore can be used as asynchronous
    context managers on Python 3.5+.
  * twisted.internet.ssl.CertificateOptions now uses 32 random bytes
    instead of an MD5 hash for the ssl session identifier context.
  * twisted.python.failure.Failure.getTracebackObject now returns
    traceback objects whose frames can be passed into
    traceback.print_stack for better debugging of where the exception
    came from.
  * Much more! 20+ tickets closed overall.

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or 
alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS 
file is also available at 
<https://github.com/twisted/twisted/blob/twisted-19.2.0/NEWS.rst>.

Many thanks to everyone who had a part in this release - the supporters 
of the Twisted Software Foundation, the developers who contributed code 
as well as documentation, and all the people building great things with 
Twisted!

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190410/c44fed99/attachment-0002.html>

From meejah at meejah.ca  Wed Apr 10 11:46:47 2019
From: meejah at meejah.ca (meejah)
Date: Wed, 10 Apr 2019 21:46:47 +0400
Subject: [Twisted-Python] ws(s):// urls and host/port duplication in
 twisted/autobahn code
In-Reply-To: <e0b70e06-98b9-95f8-47e0-dcfdff8b0c90@withers.org> (Chris
 Withers's message of "Wed, 10 Apr 2019 07:00:40 +0100")
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
 <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
 <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>
 <3d864a33-90bf-3f76-fe17-e627e26ee0b5@gmail.com>
 <e0b70e06-98b9-95f8-47e0-dcfdff8b0c90@withers.org>
Message-ID: <86imvloirc.fsf@atlantis.meejah.ca>

Chris Withers <chris at withers.org> writes:

> Not sure I follow, I specify ws:// and things work. What am I missing?
> (I know the initial protocol is http and that's "upgraded" into
> websocket, but the url is still ws:// or wss://, right?)

What Tobias is getting at, I think, is that your URL could be
wss://example.com/ws but the endpoint could be a unix-socket at
/var/run/foo

Now, that said, some of the APIs do allow you to shortcut this in the
case when your endpoint will be the same as the host in the URI. Compare
these two "Component" examples; the first uses the "long form" way to
specify the URL + transport and the second is just a string:

https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/component/backend.py#L34
https://github.com/crossbario/autobahn-python/blob/master/examples/twisted/wamp/component/frontend.py#L42

>> fwiw, WAMP is a protocol with a clear-cut, rigorous and decoupled
>> layering:

> Do browsers speak WAMP?

Yes. See Autobahn-JS

> Do firewalls get upset with it?

No.

WAMP connections are usually "outbound" style connections to the router,
so most firewall configurations will be fine with this.

-- 
meejah



From glyph at twistedmatrix.com  Wed Apr 10 22:40:13 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 10 Apr 2019 21:40:13 -0700
Subject: [Twisted-Python] Twisted 19.2.0 Release Announcement
In-Reply-To: <4e608061-b623-3240-6027-f9f8664b9f05@atleastfornow.net>
References: <4e608061-b623-3240-6027-f9f8664b9f05@atleastfornow.net>
Message-ID: <8BC6789F-15C5-4595-AD71-83D03A00ABBD@twistedmatrix.com>


> On Apr 10, 2019, at 5:36 AM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 19.2! The highlights of this release are: 
> 
> twisted.web.client.HostnameCachingHTTPSPolicy was added as a new contextFactory option. This reduces the performance overhead for making many TLS connections to the same host.
> twisted.conch.ssh.keys can now read private keys in the new "openssh-key-v1" format, introduced in OpenSSH 6.5 and made the default in OpenSSH 7.8.
> The sample code in the "Twisted Web In 60 Seconds" tutorial runs on Python 3.
> DeferredLock and DeferredSemaphore can be used as asynchronous context managers on Python 3.5+.
> twisted.internet.ssl.CertificateOptions now uses 32 random bytes instead of an MD5 hash for the ssl session identifier context.
> twisted.python.failure.Failure.getTracebackObject now returns traceback objects whose frames can be passed into traceback.print_stack for better debugging of where the exception came from.
> Much more! 20+ tickets closed overall.
> You can find the downloads at <https://pypi.python.org/pypi/Twisted> <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads> <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-19.2.0/NEWS.rst> <https://github.com/twisted/twisted/blob/twisted-19.2.0/NEWS.rst>. 
> 
> Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted! 

Thanks Amber!

This release looks pretty great!

Thanks for all the hard work everyone.  I really appreciate everyone keeping the slow boil of fixes going.

We already have some pretty great stuff queued up for the next one :-).

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190410/21cd3442/attachment-0002.html>

From tobias.oberstein at gmail.com  Thu Apr 11 02:35:12 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Thu, 11 Apr 2019 10:35:12 +0200
Subject: [Twisted-Python] ws(s):// urls and host/port duplication in
 twisted/autobahn code
In-Reply-To: <86imvloirc.fsf@atlantis.meejah.ca>
References: <001201d4e0d1$d9c24040$8d46c0c0$@cmsconstruct.com>
 <CANzH6eunhEm+LrSvEus7cbhg6LkotSX70UBGkctfYO9QR0H-Bw@mail.gmail.com>
 <000401d4e106$f6416040$e2c420c0$@cmsconstruct.com>
 <B9CFAABD-CC67-4E42-8DF1-F67F59EEF0EF@twistedmatrix.com>
 <124a8497-6bc8-9884-2f95-dbeaae8eb2c2@withers.org>
 <FEDD705C-1549-455C-B34F-F032564AA9F9@twistedmatrix.com>
 <3cae0c94-971b-c0b7-d1f0-b56968029282@crossbario.com>
 <2a440c68-4512-bb31-0268-8109e9062db7@withers.org>
 <b67b58f6-9a04-ff65-28aa-f5432ed99dcd@gmail.com>
 <5d1bfdda-5242-7cf0-e7d2-1ea5eff76754@withers.org>
 <05e257c1-3a86-6337-8385-1873ff74367e@gmail.com>
 <39a3ca5d-168f-f3ab-b1b1-2fc802a4f906@withers.org>
 <3d864a33-90bf-3f76-fe17-e627e26ee0b5@gmail.com>
 <e0b70e06-98b9-95f8-47e0-dcfdff8b0c90@withers.org>
 <86imvloirc.fsf@atlantis.meejah.ca>
Message-ID: <211cd6d9-5ca5-3923-57f5-f7bb298b5583@gmail.com>

Am 10.04.19 um 19:46 schrieb meejah:
> Chris Withers <chris at withers.org> writes:
> 
>> Not sure I follow, I specify ws:// and things work. What am I missing?
>> (I know the initial protocol is http and that's "upgraded" into
>> websocket, but the url is still ws:// or wss://, right?)
> 
> What Tobias is getting at, I think, is that your URL could be
> wss://example.com/ws but the endpoint could be a unix-socket at
> /var/run/foo

yeah, exactly. thx for helping out;)

>>> fwiw, WAMP is a protocol with a clear-cut, rigorous and decoupled
>>> layering:
> 
>> Do browsers speak WAMP?
> 
> Yes. See Autobahn-JS
> 
>> Do firewalls get upset with it?
> 
> No.
> 
> WAMP connections are usually "outbound" style connections to the router,
> so most firewall configurations will be fine with this.

yes!

let me add some more details (which are irrelevant in most common cases)

- "usually": WAMP _can_ run _also_ over connections where the WAMP level 
peer role assignment (client vs router) is fully independent of the 
transport level role (client vs server) assignment as dictated from the 
direction of connection establishment. eg when runnin WAMP over pipes on 
Twisted, the connection establishment / transport roles are reversed

- firewalls: np as long as _outbound_ TLS on 443 is allowed (HTTPS). no 
open ports whatsoever are required, and WAMP still allows you to to RPCs 
_from_ the cloud _to_ the thing sitting inside / behind the firewall. 
you can even do RPCs between 2 browser tabs 
(https://crossbario.com/blog/Free-Your-Code-Backends-in-the-Browser/)

- MITM https proxies: those TLS unwrapping intermediaries might break 
websocket - if they are not websocket aware or sidestepping via admin 
config of the MITM box. anything over websocket is affected then (not 
only WAMP). TLS v1.3 will make those privacy breaking intermediaries sad 
anyways - which is a GOOD THING!! luckily, the IETF dismissed the last 
minute push from the banking corps in particular to compromise TLS v1.3. 
there are a couple of threads on the IETF WG which really are fun to read;)



From tobias.oberstein at gmail.com  Fri Apr 12 23:33:54 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Sat, 13 Apr 2019 07:33:54 +0200
Subject: [Twisted-Python] Twisted Conch on v19.2.1: now requires explicit
 installation of bcrypt
Message-ID: <415bb290-6807-ddd1-4064-f2adb698473c@gmail.com>

Hi,

I'm not sure if it considered a Twisted bug, but Twisted Conch on 
Twisted 19.2.1 now seems to require explicit installation of bcrypt, 
which wasn't the case on <19.2.1.

Here is our (Crossbar.io) tracking issue:

https://github.com/crossbario/crossbar/issues/1555

Not a big deal obviously - we'll add that (indirect) dependency to 
Crossbar.io .. just wanted to post here if anyone else runs into.

Cheers,
/Tobias

PS: I did test the upcoming Twisted release with Crossbar.io - but only 
a "quick manual test", not our full CI - which now ran red (by being 
triggered from an unrelated PR).

There is more fallout for us with the new Twisted release:( Analyzing 
that now. We (Crossbar.io) really should have run our _full_ CI on the 
upcoming release.



From glyph at twistedmatrix.com  Sat Apr 13 00:01:44 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 12 Apr 2019 23:01:44 -0700
Subject: [Twisted-Python] Twisted Conch on v19.2.1: now requires
 explicit installation of bcrypt
In-Reply-To: <415bb290-6807-ddd1-4064-f2adb698473c@gmail.com>
References: <415bb290-6807-ddd1-4064-f2adb698473c@gmail.com>
Message-ID: <582623CE-8730-4D4F-ABCC-9F5F8E6F9F10@twistedmatrix.com>



> On Apr 12, 2019, at 10:33 PM, Tobias Oberstein <tobias.oberstein at gmail.com> wrote:
> 
> Hi,

Hi Tobias,

> I'm not sure if it considered a Twisted bug,

It's not :).

> but Twisted Conch on Twisted 19.2.1 now seems to require explicit installation of bcrypt, which wasn't the case on <19.2.1.

This is not exactly accurate.

What happened here is that your other dependencies happened to let you use conch without installing anything else in the past, but you weren't doing the supported thing, which is to use the `[conch]` extra to indicate you want all the optional requirements for conch.

(Also, 19.2.1?  Are you writing to us from an alternate future where there's been a security patch release? Not very good time-travel opsec!)

> Here is our (Crossbar.io) tracking issue:
> 
> https://github.com/crossbario/crossbar/issues/1555
> 
> Not a big deal obviously - we'll add that (indirect) dependency to Crossbar.io .. just wanted to post here if anyone else runs into.

Just add a dependency on `twisted[conch]` and you should be good for this release and for any future releases where conch needs other dependencies.

> 
> Cheers,
> /Tobias
> 
> PS: I did test the upcoming Twisted release with Crossbar.io - but only a "quick manual test", not our full CI - which now ran red (by being triggered from an unrelated PR).
> 
> There is more fallout for us with the new Twisted release:( Analyzing that now. We (Crossbar.io) really should have run our _full_ CI on the upcoming release.

So it goes!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190412/77db499e/attachment-0002.html>

From tobias.oberstein at gmail.com  Sat Apr 13 01:03:16 2019
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Sat, 13 Apr 2019 09:03:16 +0200
Subject: [Twisted-Python] Twisted Conch on v19.2.1: now requires
 explicit installation of bcrypt
In-Reply-To: <582623CE-8730-4D4F-ABCC-9F5F8E6F9F10@twistedmatrix.com>
References: <415bb290-6807-ddd1-4064-f2adb698473c@gmail.com>
 <582623CE-8730-4D4F-ABCC-9F5F8E6F9F10@twistedmatrix.com>
Message-ID: <4ac1c973-66a1-7afc-796d-8306d72e75ac@gmail.com>

Hi Glyph,

>> I'm not sure if it considered a Twisted bug,
> 
> It's not :).
> 
>> but Twisted Conch on Twisted 19.2.1 now seems to require explicit 
>> installation of bcrypt, which wasn't the case on <19.2.1.
> 
> This is not exactly accurate.
> 
> What happened here is that your other dependencies /happened/ to let you 
> use conch without installing anything else in the past, but you weren't 
> doing the supported thing, which is to use the `[conch]` extra to 
> indicate you want all the optional requirements for conch.

Ah, right! Twisted release is fine - our fault now finally coming to 
bite us, sorry for the noise;)

We'll fix that
https://github.com/crossbario/crossbar/issues/1559

> 
> (Also, 19.2.1?  Are you writing to us from an alternate future where 
> there's been a security patch release? Not very good time-travel opsec!)

Yea, it's 19.2.0 what I meant, typo on my side, and haha, sadly (?), no, 
I haven't found a solution for time travel;)

>> PS: I did test the upcoming Twisted release with Crossbar.io 
>> <http://Crossbar.io> - but only a "quick manual test", not our full CI 
>> - which now ran red (by being triggered from an unrelated PR).
>>
>> There is more fallout for us with the new Twisted release:( Analyzing 
>> that now. We (Crossbar.io <http://Crossbar.io>) really should have run 
>> our _full_ CI on the upcoming release.
> 
> So it goes!

Yep, we'll run Twisted trunk on the full CI too - always -

https://github.com/crossbario/crossbar/issues/1560

---

Thanks for chiming in!
Cheers,
/Tobias

> 
> -g
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From trac at twistedmatrix.com  Sun Apr 14 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 Apr 2019 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1555221918.94.582907503400755473@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190414/02ec3351/attachment-0002.html>

From trac at twistedmatrix.com  Sun Apr 21 00:05:19 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 Apr 2019 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1555826719.23.8558783218154866844@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190421/65c0a394/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon Apr 22 12:06:07 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Tue, 23 Apr 2019 04:06:07 +1000
Subject: [Twisted-Python] The Future of Twisted Spread
Message-ID: <f09152ee-270c-3ac8-1f38-ddd9a98d20a5@atleastfornow.net>

twisted.spread is without a maintainer, and there were discussions in 
#twisted-dev about it's future. It has several flaws, mostly regarding 
security and resource usage that have not moved forward in a long time. 
These discussions mostly revolved around deprecating it, but Glyph 
pointed out existing uses of it and suggested looking for a maintainer 
first.

As such, we're looking for a maintainer who can dedicate themselves to 
maintaining twisted.spread and giving Perspective Broker a bit of love. 
This would require someone that uses twisted.spread, and is committed to 
its long-term success.

If nobody steps up, we'll declare it unmaintained and deprecate it in a 
future Twisted release.

- Amber



From dholth at gmail.com  Tue Apr 23 20:21:59 2019
From: dholth at gmail.com (Daniel Holth)
Date: Tue, 23 Apr 2019 22:21:59 -0400
Subject: [Twisted-Python] txsni + alpn + acme (letsencrypt)
In-Reply-To: <CAG8k2+4LUzbC36reZGSRLi2K6bVu0Nfe5d7Z0YPhPLwgKLssMA@mail.gmail.com>
References: <CAG8k2+43zt6SR8c+k8_+ctprRw_JbHuHC9FPEWi9DLGKK2Yk+g@mail.gmail.com>
 <359C403B-F290-4253-8200-642320F92C6D@twistedmatrix.com>
 <CAG8k2+67yPbHYViRiC9tJOTy8B5TP39yW+yyxF+wWZ26AMt+OA@mail.gmail.com>
 <CAG8k2+4F2wwZz9TT_xGnUzcOcc0_DAHkhWScLBE3bXNXXd=Rcg@mail.gmail.com>
 <BB099EA8-D21A-479F-96AA-40835E336601@twistedmatrix.com>
 <CAG8k2+5mksA1QLXBx_7f+kCAFyS6Kksued7YAqW_X4WsvUyS8A@mail.gmail.com>
 <0EA60D39-B6A5-48D2-A2A8-A7580139AAFD@twistedmatrix.com>
 <CAG8k2+6q5U+Tsfjj2i0Y_=69qQOnOQMaqzCqnN3UJCSoNTFS-Q@mail.gmail.com>
 <76178AEE-C7C7-466A-9934-1E4FBF5B5C4F@twistedmatrix.com>
 <CAG8k2+4nVe=8kgsEzf-4J8zsJ_rsbFrgT85ns4GVS9arTyo=cA@mail.gmail.com>
 <95B8427F-EF45-4CAB-AB6F-44860047FE74@twistedmatrix.com>
 <CAG8k2+7AOUam+Ua0k+AD=dnBMM11UyFo-jhCYBnEy09s9vBadg@mail.gmail.com>
 <CAG8k2+4LUzbC36reZGSRLi2K6bVu0Nfe5d7Z0YPhPLwgKLssMA@mail.gmail.com>
Message-ID: <CAG8k2+7Vmn89b+QML3JPRRiVyhQtjkdrDaWEN=ARgKAXuSkBFw@mail.gmail.com>

I was able to figure out the tests, and improve coverage in txsni.

On Tue, Apr 2, 2019 at 10:29 AM Daniel Holth <dholth at gmail.com> wrote:
>
> Let me know if you're able to try getting a https certificate in this way:
>
> Using tls-alpn-01 negotiation with txsni (acme branch) and the
> dehydrated letsencrypt client:
>
> Install txsni (acme branch):
>
> pip install git+https://github.com/dholth/txsni at acme#egg=txsni
>
> Unpack dehydrated acme client shell script from https://dehydrated.io/
>
> Make and enter config directory:
>
> mkdir -p ~/etc/dehydrated
>
> cd ~/etc/dyhydrated
>
> Use acmesni to listen on port 443:
>
> authbind twist web --listen acmesni:~/etc/dehydrated:tcp6:443 &
>
> Make config file:
>
> echo CHALLENGETYPE="tls-alpn-01" > config
>
> Create letsencrypt account:
>
> dehydrated --register --accept-terms
>
> Request certificate (replace example.com with your fqnd):
>
> dehydrated -c -d example.com
>
>
> Letsencrypt should request a special certificate from the twisted web
> server to prove domain control, and then dehydrated installs the new
> certificate for 'example.com' in ~/etc/dehydrated/certs/...
> https://example.com will be ready to go.
>
>
> Authbind, to listen on privileged ports in linux without root:
>
> (install authbind); touch /etc/authbind/byport/{80,443}; chown
> <username> /etc/authbind/byport/*; chmod u+x /etc/authbind/byport/*
>
> On Sun, Mar 24, 2019 at 9:17 PM Daniel Holth <dholth at gmail.com> wrote:
> >
> > Do move it to twisted. I was surprised it wasn't already there.
> >
> > On Sun, Mar 24, 2019, 17:39 Glyph <glyph at twistedmatrix.com> wrote:
> >>
> >> Thanks! I put some review comments on it.  I would encourage others with interest in this area to have a look; I might not get back to this for a couple of weeks, but I'd be happy to give people collaborator permissions on the repo if they'd like to help out.
> >>
> >> (Frankly it's probably time that this project grew up and moved over to the Twisted org anyway, given that txacme depends on it...)
> >>
> >> -g
> >>
> >> On Mar 24, 2019, at 1:59 PM, Daniel Holth <dholth at gmail.com> wrote:
> >>
> >> Pull request for txsni acme https://github.com/glyph/txsni/pull/28
> >>
> >> On Sun, Mar 24, 2019, 16:33 Glyph <glyph at twistedmatrix.com> wrote:
> >>>
> >>> Any chance you could include a link to the relevant PR?  Pulling this out of the raging tire-fire of my Github notifications would take an unfortunately non-trivial amount of time - and I imagine that not everyone subscribed might even be on the appropriate repos :).
> >>>
> >>> -g
> >>>
> >>> On Mar 24, 2019, at 9:26 AM, Daniel Holth <dholth at gmail.com> wrote:
> >>>
> >>> The cleaned up pull request should be really easy to try, with a dehydrated:(basedir) string port. Go get some certs people!
> >>>
> >>> On Sun, Mar 24, 2019, 00:55 Glyph <glyph at twistedmatrix.com> wrote:
> >>>>
> >>>> I think ACME_TLS_1 is a sufficiently high-entropy string that the likelihood of brokenness from this approach is basically zero.
> >>>>
> >>>> -g
> >>>>
> >>>> On Mar 23, 2019, at 9:20 PM, Daniel Holth <dholth at gmail.com> wrote:
> >>>>
> >>>> All we have to do is have some kind of per connection certificate store or flag. If acme is in the first packet and the special certificate exists, send it. Otherwise send the normal certificate, for a very short window of possible brokenness. Letsencrypt may or may not require correct alpn negotiation. Should be simple.
> >>>>
> >>>> I'm happy running the acme client separately and listing my domain instead of doing it all on demand inside twisted.
> >>>>
> >>>>
> >>>> On Sat, Mar 23, 2019, 23:59 Glyph <glyph at twistedmatrix.com> wrote:
> >>>>>
> >>>>>
> >>>>>
> >>>>> > On Mar 23, 2019, at 4:06 PM, Daniel Holth <dholth at gmail.com> wrote:
> >>>>> >
> >>>>> > HOLY REGEX BATMAN
> >>>>> >
> >>>>> > class _ConnectionProxy(object):
> >>>>> >
> >>>>> >    def bio_write(self, buf):
> >>>>> >        if ACME_TLS_1 in buf:
> >>>>> >            self.acme_tls_1 = True
> >>>>> >        self.bio_write = self._obj.bio_write
> >>>>> >        return self._obj.bio_write(buf)
> >>>>> > Now we can choose the acme certificate store in the sni callback and
> >>>>> > make letsencrypt happy!
> >>>>>
> >>>>> 1. Gross
> >>>>> 2. Hooray!
> >>>>>
> >>>>> -g
> >>>>>
> >>>>> _______________________________________________
> >>>>> Twisted-Python mailing list
> >>>>> Twisted-Python at twistedmatrix.com
> >>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>>>
> >>>> _______________________________________________
> >>>> Twisted-Python mailing list
> >>>> Twisted-Python at twistedmatrix.com
> >>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>>>
> >>>>
> >>>> _______________________________________________
> >>>> Twisted-Python mailing list
> >>>> Twisted-Python at twistedmatrix.com
> >>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>>
> >>> _______________________________________________
> >>> Twisted-Python mailing list
> >>> Twisted-Python at twistedmatrix.com
> >>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>>
> >>>
> >>> _______________________________________________
> >>> Twisted-Python mailing list
> >>> Twisted-Python at twistedmatrix.com
> >>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> >>
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Thu Apr 25 10:52:14 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 25 Apr 2019 12:52:14 -0400
Subject: [Twisted-Python] Backward incompatible fixes to backward
 incompatible changes
Message-ID: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>

Hello all,

I'd like to discuss the project policy/process for dealing with incorrect
backward incompatibilities that end up released.

As a case study, we could look at https://twistedmatrix.com/trac/ticket/9410
<https://twistedmatrix.com/trac/ticket/9410#comment:17> /
https://github.com/twisted/twisted/pull/1106

In Twisted 16.3.0 the behavior of Request.write was changed so that it
raises an AttributeError if called after the connection has closed.  Prior
to that release, it silently did nothing in that case.

Now, three years later, we have a PR which proposed restoring the behavior
of silently ignoring the write to a closed connection.

The original change was incompatible.  The new change is incompatible.
What should win out?

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190425/322ff161/attachment-0002.html>

From trac at twistedmatrix.com  Sun Apr 28 00:05:19 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 Apr 2019 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1556431519.53.1870608615627612427@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190428/f1e51ca9/attachment-0002.html>

From john at egh.com  Sun Apr 28 09:01:55 2019
From: john at egh.com (John Santos)
Date: Sun, 28 Apr 2019 11:01:55 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <31ac3952-157e-4af7-bad3-7d47f36bbc08@egh.com>

I've been having ongoing problems accessing the TwistedMatrix site.  
(Tried both Firefox and Chrome from my home PC.)

I've been trying to log in to update issue 9629 below to report it is a 
duplicate of a known problem.  (Can't tell you WHICH known problem 
because I can't search the Twisted tickets.)

On Monday evening, when I submitted this issue, I filled in the form and 
nothing appeared to happen.  (I may have even submitted it twice.)  I 
searched the tickets and discovered 1) it didn't appear (so no ticket?) 
and 2) it seemed to be the same as a previously reported problem, so I 
added a comment to the previous ticket that I was seeing the same issue 
and a little context that might help.  (I only started seeing it with 
Twisted 19.2.0, but the original report said it was under 18.4.0 which I 
had been running uneventfully since last summer.)

Anyway, I got no feedback, so I assumed my initial attempt to create a 
ticket had failed.

Someone with access, please mark #9629 as a duplicate and close.

Thanks,

John

On 4/28/2019 2:05 AM, trac at twistedmatrix.com wrote:
> Bug summary
> ______________________
> Summary for 2019-04-21 through 2019-04-28
>                    Opened     Closed      Total     Change
> Enhancements:          2          0       1410         +2
> Defects:               4          0        952         +4
> Tasks:                 0          0         98         +0
> Regressions:           0          0          6         +0
> Total:                 6          0       2467         +6
>
> |== Type Changes   |== Priority Changes   |== Component Changes
> |Defect:       +4  |Normal:  +6           |Core:   +5
> |Enhancement:  +2                         |Trial:  +1
>
>
> Total Tickets Open Tickets
>
>
> New / Reopened Bugs
> ______________________
>                      ===== Normal =====
> [#9628] trial3 reports "AttributeError: test_file does not exist" when an ImportError is raised by test_file.py (opened by ezio-melotti)
>      defect          trial      http://twistedmatrix.com/trac/ticket/9628
>
> [#9629] Unhandled error in TLS shutdown (opened by jsantos2)
>      defect          core       http://twistedmatrix.com/trac/ticket/9629
>
> [#9630] Twisted TLS support should loudly raise an exception without service_identity (opened by hawkowl)
>      defect          core       http://twistedmatrix.com/trac/ticket/9630
>
> [#9631] Binary wheel for Python 3.7 on Windows (opened by ofek)
>      enhancement     core       http://twistedmatrix.com/trac/ticket/9631
>
> [#9632] Factor reactor name-resolution implementations out of ReactorBase for easier re-use (opened by exarkun)
>      enhancement     core       http://twistedmatrix.com/trac/ticket/9632
>
> [#9633] tox -e lint is broken on pip 19.1 (opened by hawkowl)
>      defect          core       http://twistedmatrix.com/trac/ticket/9633
>
>
>
> Closed Bugs
> ______________________
>
>
>
> Ticket Lifetime Stats
> ______________________
> Oldest open ticket - [#50] conch command-line client doesn't work in win32 (since 2003-07-12 14:41:06).
> Newest open ticket - [#9633] tox -e lint is broken on pip 19.1 (since 2019-04-26 18:34:43.754553).
>
> Mean open ticket age: 2528 days, 8:35:56.837971.
> Median: 2412 days, 23:30:02.403434.
> Standard deviation: 1349 days, 20:50:35.165064.
> Interquartile range: 1977 days, 4:18:42.288177.
>
> Mean time between ticket creation and ticket resolution: 627 days, 0:29:45.545719.
> Median: 65 days, 0:22:19.
> Standard deviation is 1025 days, 11:39:43.423500.
> The interquartile range is 848 days, 2:56:42.
>
> Mean time spent in review: 102 days, 23:33:30.414587.
> Median: 4 days, 15:51:44.
> Standard deviation: 501 days, 2:53:08.460473.
> Interquartile range: 23 days, 3:25:21.
>
> Mean number of times a ticket is reviewed: 1.82463217845.
> Median: 1
> Standard deviation: 1.43581247742.
> Interquartile range: 1.
>
>
> Contributor Stats
> ______________________
> In the last 4 weeks,
>      13 unique ticket reporters
>      6 unique ticket reviewers
>      8 unique ticket resolvers
> In the last 24 weeks,
>      29 unique ticket reporters
>      9 unique ticket reviewers
>      10 unique ticket resolvers
> In the last 48 weeks,
>      64 unique ticket reporters
>      12 unique ticket reviewers
>      16 unique ticket resolvers
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190428/4e02fc8d/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Apr 29 16:36:47 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 29 Apr 2019 18:36:47 -0400
Subject: [Twisted-Python] Backward incompatible fixes to backward
 incompatible changes
In-Reply-To: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>
References: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>
Message-ID: <CAEeXt4O8HCLzgeVgbcgQ8LBQJXGiPuYFvKE4QNxK1CrQbjBjzA@mail.gmail.com>

On Thu, Apr 25, 2019 at 12:52 PM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> Hello all,
>
> I'd like to discuss the project policy/process for dealing with incorrect
> backward incompatibilities that end up released.
>

Considering the lack of interest in the topic, I'm going to suppose that
there is no policy and the decision is made case-by-case.  In the case I
referenced, I'm going to approve the change in behavior as "compatible" by
on the grounds that it restores the original behavior.

Jean-Paul


> As a case study, we could look at
> https://twistedmatrix.com/trac/ticket/9410
> <https://twistedmatrix.com/trac/ticket/9410#comment:17> /
> https://github.com/twisted/twisted/pull/1106
>
> In Twisted 16.3.0 the behavior of Request.write was changed so that it
> raises an AttributeError if called after the connection has closed.  Prior
> to that release, it silently did nothing in that case.
>
> Now, three years later, we have a PR which proposed restoring the behavior
> of silently ignoring the write to a closed connection.
>
> The original change was incompatible.  The new change is incompatible.
> What should win out?
>
> Jean-Paul
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190429/affab23e/attachment-0002.html>

From contact at evilham.com  Tue Apr 30 04:10:25 2019
From: contact at evilham.com (Evilham)
Date: Tue, 30 Apr 2019 12:10:25 +0200
Subject: [Twisted-Python] Backward incompatible fixes to backward
 incompatible changes
In-Reply-To: <CAEeXt4O8HCLzgeVgbcgQ8LBQJXGiPuYFvKE4QNxK1CrQbjBjzA@mail.gmail.com>
References: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>
 <CAEeXt4O8HCLzgeVgbcgQ8LBQJXGiPuYFvKE4QNxK1CrQbjBjzA@mail.gmail.com>
Message-ID: <86sgtz7qi6.fsf@verdandi.evilham.com>

Jean-Paul Calderone <exarkun at twistedmatrix.com> writes:

> On Thu, Apr 25, 2019 at 12:52 PM Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
>> Hello all,
>>
>> I'd like to discuss the project policy/process for dealing with 
>> incorrect
>> backward incompatibilities that end up released.
>>
>
> Considering the lack of interest in the topic, I'm going to 
> suppose that
> there is no policy and the decision is made case-by-case.  In 
> the case I
> referenced, I'm going to approve the change in behavior as 
> "compatible" by
> on the grounds that it restores the original behavior.


What you say makes sense and, as read on one of the tickets, if 
there *is* a need for that situation to raise an error: 
`AttributeError` certainly isn't the kind of error.
So that should be a totally different discussion.

As for a general policy: it doesn't look like this situation 
happens often enough for there to be a need for one (de facto, 
indeed that means that it is made on a case-by-case basis).
Effort in general should be to prevent the situation from 
happening, which everyone regularly involved in Twisted does a 
great job at already.

Basically: ACK, fully agreed, you are not talking to the void.

>> As a case study, we could look at
>> https://twistedmatrix.com/trac/ticket/9410
>> <https://twistedmatrix.com/trac/ticket/9410#comment:17> /
>> https://github.com/twisted/twisted/pull/1106
>>
>> In Twisted 16.3.0 the behavior of Request.write was changed so 
>> that it
>> raises an AttributeError if called after the connection has 
>> closed.  Prior
>> to that release, it silently did nothing in that case.
>>
>> Now, three years later, we have a PR which proposed restoring 
>> the behavior
>> of silently ignoring the write to a closed connection.
>>
>> The original change was incompatible.  The new change is 
>> incompatible.
>> What should win out?

--
Evilham



From glyph at twistedmatrix.com  Tue Apr 30 23:24:29 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 30 Apr 2019 22:24:29 -0700
Subject: [Twisted-Python] Backward incompatible fixes to backward
 incompatible changes
In-Reply-To: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>
References: <CAEeXt4M110-rpcVsJXH+Cm0up5DhXC_h41EZU-HvjUgD28xCbw@mail.gmail.com>
Message-ID: <39040855-61B4-477A-862B-3608131CAE80@twistedmatrix.com>

On Thu, Apr 25, 2019, at 9:52 AM, Jean-Paul Calderone wrote:
> Hello all,
> 
> I'd like to discuss the project policy/process for dealing with incorrect backward incompatibilities that end up released.
> 
> As a case study, we could look at https://twistedmatrix.com/trac/ticket/9410 <https://twistedmatrix.com/trac/ticket/9410#comment:17> / https://github.com/twisted/twisted/pull/1106 <https://github.com/twisted/twisted/pull/1106>
> 
> In Twisted 16.3.0 the behavior of Request.write was changed so that it raises an AttributeError if called after the connection has closed.  Prior to that release, it silently did nothing in that case.
> 
> Now, three years later, we have a PR which proposed restoring the behavior of silently ignoring the write to a closed connection.
> 
> The original change was incompatible.  The new change is incompatible.  What should win out?

There are two things to address here, I think:

In the general case, can we reverse changes to behavior which were desirable, but by-policy incompatible, and did not go through the incompatibility exception process, without going through the incompatibility exception process?

I'm choosing my words carefully here; changes might be "desirable" even if they're not intentional; they might be something that the caller expects even if they're not explicitly documented.  In general I'd say that we have to be careful with this kind of reversal and we should probably go through the compat exception process.  But I think the change in question doesn't actually fall into this category, because it's an exception that nobody wanted, wasn't documented, and wasn't intentional.  So it's in this other category:

Should we consider the raising of an undocumented exception to be a compatibility surface we must maintain compatibility with?

In this case, I think it depends on the type of the exception - specifically, whether the exception is defined in Twisted itself, or defined in a library that is clearly being invoked and whose behavior should be propagated.  So, for example, if you call connection.foo().bar() and you get FooCannotBeBarredError, this might something to be considered a compatibility concern.  However, if you call connection.foo().bar() and get an undocumented stdlib exception (KeyError, AttributeError, ValueError), I think it's okay to implicitly treat these as "gross violations of specifications".

In the specific case you dealt with I agree with your evaluation and I'm glad we've landed the bugfix :-).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190430/9ea1c31e/attachment-0002.html>

