From glyph at twistedmatrix.com  Sat Jun  1 03:18:26 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 1 Jun 2013 02:18:26 -0700
Subject: [Twisted-Python] Twisted on PyPI
In-Reply-To: <20130530124315.25989.1090113342.divmod.xquotient.8@top>
References: <83A14CC3-B102-4660-969B-6098CF19D92F@stufft.io>
 <87vc66mgz2.fsf@hermes.hocat.ca> <8761y1mqc8.fsf@loki.hocat.ca>
 <20130530124315.25989.1090113342.divmod.xquotient.8@top>
Message-ID: <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>


On May 30, 2013, at 5:43 AM, exarkun at twistedmatrix.com wrote:

> On 29 May, 09:24 pm, tom.prince at ualberta.net wrote:
>> Tom Prince <tom.prince at ualberta.net> writes:
>>> Donald Stufft <donald at stufft.io> writes:
>>>> So I'm emailing you all to warn you about this upcoming change since
>>>> Twisted is one of the major projects affected and also to see if the
>>>> Twisted developers would prefer a different rename than Twisted-Web.
>>> 
>>> Looking at the project pages on pypi, those don't appear to be
>>> installable anyway. I think that it might make sense to just remove
>>> them, at this point.
>> 
>> There appears to be a consensus to remove them, but I don't have access
>> to do that.
> 
> What are we removing?  All of the subprojects on PyPI?

Yes.

> If so, the release process will need to be adjusted to avoid re-adding them.

Thomas has already done that: <http://twistedmatrix.com/trac/wiki/ReleaseProcess?action=diff&version=164&old_version=163>

> What makes them uninstallable?  Wouldn't it make as much sense to just fix that?  Is this only a PyPI interaction thing, or is there actually a problem with the packages being distributed?

We never tested installing them in any fashion; we certainly never did any continuous integration on them.  I don't think we ever fully figured out the 'namespace package' thing.  Their distribution names won't satisfy a dependency on 'Twisted', and 'Twisted' won't satisfy a dependency on them, but they install the same files, so if another project attempted to use them as a minimal dependency, you would have gotten a broken mess.

Given all this I can't remember why we bothered to put these on PyPI in the first place, and it makes sense to remove them.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130601/843ef747/attachment.html>

From exarkun at twistedmatrix.com  Sat Jun  1 06:00:11 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 01 Jun 2013 12:00:11 -0000
Subject: [Twisted-Python] Twisted on PyPI
In-Reply-To: <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>
References: <83A14CC3-B102-4660-969B-6098CF19D92F@stufft.io>
 <87vc66mgz2.fsf@hermes.hocat.ca> <8761y1mqc8.fsf@loki.hocat.ca>
 <20130530124315.25989.1090113342.divmod.xquotient.8@top>
 <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>
Message-ID: <20130601120011.25989.928264892.divmod.xquotient.10@top>

On 09:18 am, glyph at twistedmatrix.com wrote:
>
>On May 30, 2013, at 5:43 AM, exarkun at twistedmatrix.com wrote:
>>On 29 May, 09:24 pm, tom.prince at ualberta.net wrote:
>>>Tom Prince <tom.prince at ualberta.net> writes:
>>>>Donald Stufft <donald at stufft.io> writes:
>>>>>So I'm emailing you all to warn you about this upcoming change 
>>>>>since
>>>>>Twisted is one of the major projects affected and also to see if 
>>>>>the
>>>>>Twisted developers would prefer a different rename than Twisted- 
>>>>>Web.
>>>>
>>>>Looking at the project pages on pypi, those don't appear to be
>>>>installable anyway. I think that it might make sense to just remove
>>>>them, at this point.
>>>
>>>There appears to be a consensus to remove them, but I don't have 
>>>access
>>>to do that.
>>
>>What are we removing?  All of the subprojects on PyPI?
>
>Yes.
>>If so, the release process will need to be adjusted to avoid re-adding 
>>them.
>
>Thomas has already done that: 
><http://twistedmatrix.com/trac/wiki/ReleaseProcess?action=diff&version=164&old_version=163>
>>What makes them uninstallable?  Wouldn't it make as much sense to just 
>>fix that?  Is this only a PyPI interaction thing, or is there actually 
>>a problem with the packages being distributed?
>
>We never tested installing them in any fashion; we certainly never did 
>any continuous integration on them.  I don't think we ever fully 
>figured out the 'namespace package' thing.  Their distribution names 
>won't satisfy a dependency on 'Twisted', and 'Twisted' won't satisfy a 
>dependency on them, but they install the same files, so if another 
>project attempted to use them as a minimal dependency, you would have 
>gotten a broken mess.
>
>Given all this I can't remember why we bothered to put these on PyPI in 
>the first place, and it makes sense to remove them.

Well, someone seems to have done so now, though I don't see how to find 
out who or when from the PyPI user interface.  Also, Twisted Web2 was 
left alone (ie, it is still on PyPI) which strikes me as an odd 
decision.

Jean-Paul


From pablojavierpy at gmail.com  Sat Jun  1 16:52:24 2013
From: pablojavierpy at gmail.com (Pablo Santa Cruz)
Date: Sat, 1 Jun 2013 18:52:24 -0400
Subject: [Twisted-Python] OSX 10.8 buildslave
In-Reply-To: <87fvx3kp82.fsf@loki.hocat.ca>
References: <87y5b617le.fsf@hermes.hocat.ca> <87fvx5mrmf.fsf@loki.hocat.ca>
 <5E3A89398864414E8EE2CB192E0C965C114C07B86E@EXMBX10.exchhosting.com>
 <87li6xl74m.fsf@loki.hocat.ca>
 <20130530115933.25989.1720691440.divmod.xquotient.4@top>
 <87fvx3kp82.fsf@loki.hocat.ca>
Message-ID: <C99EE341-8126-46C5-B0E8-223AF52C01C6@gmail.com>

Hi Tom,

What would you need as a replacement? A dedicated Mac OS X workstation? Or a Mac OS X workstation to perform builds occasionally?

Regards.

On May 31, 2013, at 1:56 PM, Tom Prince <buildbot at twistematrix.com> wrote:

> Due to circumstances beyond our control, the machine that we have been
> using to host the OSX 10.8 buildslave is currently unavailable.
> 
> As per policy[1], official support will be dropped for this platform before
> the next release, unless a replacement is found.
> 
>  Tom
> 
> [1] https://twistedmatrix.com/trac/wiki/ContinuousIntegration/FixYourDamnBuildSlave
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Sun Jun  2 07:11:49 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 Jun 2013 13:11:49 -0000
Subject: [Twisted-Python] OSX 10.8 buildslave
In-Reply-To: <C99EE341-8126-46C5-B0E8-223AF52C01C6@gmail.com>
References: <87y5b617le.fsf@hermes.hocat.ca> <87fvx5mrmf.fsf@loki.hocat.ca>
 <5E3A89398864414E8EE2CB192E0C965C114C07B86E@EXMBX10.exchhosting.com>
 <87li6xl74m.fsf@loki.hocat.ca>
 <20130530115933.25989.1720691440.divmod.xquotient.4@top>
 <87fvx3kp82.fsf@loki.hocat.ca>
 <C99EE341-8126-46C5-B0E8-223AF52C01C6@gmail.com>
Message-ID: <20130602131149.25989.370350242.divmod.xquotient.14@top>

On 1 Jun, 10:52 pm, pablojavierpy at gmail.com wrote:
>Hi Tom,
>
>What would you need as a replacement? A dedicated Mac OS X workstation? 
>Or a Mac OS X workstation to perform builds occasionally?

Build slaves don't need to be dedicated, but they do need to be online 
24/7 so that a developer can trigger a build at any time.

See https://twistedmatrix.com/trac/wiki/ContinuousIntegration for more 
details.

Jean-Paul


From glyph at twistedmatrix.com  Sun Jun  2 20:19:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 2 Jun 2013 19:19:27 -0700
Subject: [Twisted-Python] Twisted on PyPI
In-Reply-To: <20130601120011.25989.928264892.divmod.xquotient.10@top>
References: <83A14CC3-B102-4660-969B-6098CF19D92F@stufft.io>
 <87vc66mgz2.fsf@hermes.hocat.ca> <8761y1mqc8.fsf@loki.hocat.ca>
 <20130530124315.25989.1090113342.divmod.xquotient.8@top>
 <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>
 <20130601120011.25989.928264892.divmod.xquotient.10@top>
Message-ID: <43BB6ADD-A476-4E3B-B055-32A2E5A5F366@twistedmatrix.com>

On Jun 1, 2013, at 5:00 AM, exarkun at twistedmatrix.com wrote:

> Well, someone seems to have done so now, though I don't see how to find out who or when from the PyPI user interface.

As I said in my message, it was Thomas; if that's ambiguous, I meant Thomas Herv?.

> Also, Twisted Web2 was left alone (ie, it is still on PyPI) which strikes me as an odd decision.

Web2 didn't have the same issues (containing the same files as other distributions but with a different name) since it was always distributed separately.

It might make sense to remove it, too, but if we do, it's for different reasons.  If nothing depends on it, I say we should kill it.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130602/c5b8d90c/attachment.html>

From donald at stufft.io  Sun Jun  2 20:24:47 2013
From: donald at stufft.io (Donald Stufft)
Date: Sun, 2 Jun 2013 22:24:47 -0400
Subject: [Twisted-Python] Twisted on PyPI
In-Reply-To: <43BB6ADD-A476-4E3B-B055-32A2E5A5F366@twistedmatrix.com>
References: <83A14CC3-B102-4660-969B-6098CF19D92F@stufft.io>
 <87vc66mgz2.fsf@hermes.hocat.ca> <8761y1mqc8.fsf@loki.hocat.ca>
 <20130530124315.25989.1090113342.divmod.xquotient.8@top>
 <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>
 <20130601120011.25989.928264892.divmod.xquotient.10@top>
 <43BB6ADD-A476-4E3B-B055-32A2E5A5F366@twistedmatrix.com>
Message-ID: <AFEDC2FA-C498-4832-A1D5-DD76B33F50AC@stufft.io>


On Jun 2, 2013, at 10:19 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Jun 1, 2013, at 5:00 AM, exarkun at twistedmatrix.com wrote:
> 
>> Well, someone seems to have done so now, though I don't see how to find out who or when from the PyPI user interface.
> 
> As I said in my message, it was Thomas; if that's ambiguous, I meant Thomas Herv?.
> 
>> Also, Twisted Web2 was left alone (ie, it is still on PyPI) which strikes me as an odd decision.
> 
> Web2 didn't have the same issues (containing the same files as other distributions but with a different name) since it was always distributed separately.
> 
> It might make sense to remove it, too, but if we do, it's for different reasons.  If nothing depends on it, I say we should kill it.
> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

I'm going to duck out here and unsubscribe :)

If Twisted needs any help getting anything fixed on PyPI feel free to contact me directly.

-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130602/9b937d1f/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130602/9b937d1f/attachment.pgp>

From exarkun at twistedmatrix.com  Mon Jun  3 05:13:18 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 03 Jun 2013 11:13:18 -0000
Subject: [Twisted-Python] Twisted on PyPI
In-Reply-To: <43BB6ADD-A476-4E3B-B055-32A2E5A5F366@twistedmatrix.com>
References: <83A14CC3-B102-4660-969B-6098CF19D92F@stufft.io>
 <87vc66mgz2.fsf@hermes.hocat.ca> <8761y1mqc8.fsf@loki.hocat.ca>
 <20130530124315.25989.1090113342.divmod.xquotient.8@top>
 <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>
 <20130601120011.25989.928264892.divmod.xquotient.10@top>
 <43BB6ADD-A476-4E3B-B055-32A2E5A5F366@twistedmatrix.com>
Message-ID: <20130603111318.25989.1532068576.divmod.xquotient.21@top>

On 02:19 am, glyph at twistedmatrix.com wrote:
>On Jun 1, 2013, at 5:00 AM, exarkun at twistedmatrix.com wrote:
>>Well, someone seems to have done so now, though I don't see how to 
>>find out who or when from the PyPI user interface.
>
>As I said in my message, it was Thomas; if that's ambiguous, I meant 
>Thomas Herv?.

Sorry, I didn't see the message where you said that.
>>Also, Twisted Web2 was left alone (ie, it is still on PyPI) which 
>>strikes me as an odd decision.
>
>Web2 didn't have the same issues (containing the same files as other 
>distributions but with a different name) since it was always 
>distributed separately.
>
>It might make sense to remove it, too, but if we do, it's for different 
>reasons.  If nothing depends on it, I say we should kill it.

Removing it seems like the right thing to me.  I have no idea if 
anything depends on it, but having it on PyPI only means that things 
could continue to depend on it - or even worse, new things might start 
depending on it.

Jean-Paul


From glyph at twistedmatrix.com  Mon Jun  3 14:59:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 3 Jun 2013 13:59:42 -0700
Subject: [Twisted-Python] github, again
Message-ID: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>

Hi Twisted developers,

This weekend I had a discussion with many Twisted developers, both local to and visiting San Francisco.  The topic came up of how to get more long-term contributors to participate more regularly in the project - particularly, doing code reviews, but also, developing and contributing to complex fixes and features that new contributors might not be able to tackle.

One suggestion that almost everybody made immediately was: we should use Github for code reviews.

In the past, I've heard this suggestion given mainly as a way to contribute more code, which does not appeal to me, since we are already swamped reviewing all the code that is currently being contributed.

This time, however, it's been pitched as a way to get people to do more reviews, which I'm keenly interested in.  Why would people do more reviews on Github?  In a nutshell, it's a lot less work.  Here are some reasons why:

Instead of having to run 'force-builds' on the command line, or load a buildbot status page, Github has a way for a build system to report build success automatically, so you can see immediately within a pull request if the changes that it proposes are "good to merge".  You can see this at work with Travis here: <https://github.com/twisted/klein/pull/11>.  Originally I thought that this was a Travis-CI feature, but have since learned that this is apparently easy - trivial even - to hook up to Buildbot, since it's a simple HTTP API to invoke when a build completes, and there is even some existing buildbot infrastructure (deployed by Django, among others) to automate it.
Instead of having to describe each patch location so that you can comment on it in a single message, if you want to put a comment on a particular part of a diff in a Github pull request, you can just click on it and start typing.
In addition to the diff, it's reasonably easy to see the code in context on the web, which is faster than getting it into one's local development environment.
If a review is successful, instead of having to have a local development environment, a committer can just hit the "approve" button and it's landed immediately.
Instead of having to read through all history ever to see what's still relevant, a pull request will hide comments that address outdated diffs, allowing the change author to easily see what remains.

These advantages are not comprehensive, but they're the more significant ones I remember from this discussion.

A prerequisite for using Github for code reviews would be using Git rather than Subversion.  Luckily there's not much work to do in this area, thanks to Tom's excellent work on the Git import and automatic Github mirror.  As a bonus, by using Git instead of Subversion, we can start properly recording merge metadata.

In this discussion, Alex Gaynor pointed out that Django has a hybrid workflow where they still use Trac for bug tracking, and Github for code review.  We would therefore not need to come up with a way to migrate all of our tickets to Github issues (which seems, oddly, to be fairly unpopular even among those who like github a lot).

What would need to happen in order for this to take place?

We'd need some consensus (hence this message).
We'd need to update the release process <http://twistedmatrix.com/trac/wiki/ReleaseProcess> and our development documentation <http://twistedmatrix.com/trac/wiki/BasicGuideToContributingCode> to refer to the relevant Git commands rather than Subversion commands.
We'd need a redirect from <http://twistedmatrix.com/trac/browser/> and <http://twistedmatrix.com/trac/changeset/> that would point at <https://github.com/twisted/twisted> and <https://github.com/twisted/twisted/commits/> respectively.
We'd need a Github web hook that could poke Buildbot to kick off commits.
We'd need Buildbot integration to update Github pull requests with build results when builds complete.
We'd need someone to install git rather than bzr on all the buildbots, and update the configuration of the builders to get the code from a git rather than Subversion URL.
Someone will need to convert every open ticket in review to a pull request.

I do anticipate some objections.

One objection is that each of the above tasks is going to take some work.

I am fairly confident that some of the people who have educated me here will step forward to volunteer to do it.  Please reply to this message if you'd like to volunteer, saying what you'd like to volunteer to do.  If not, then I guess that objection stands :-).

Another is that this might not be worth that investment of effort.  This is why it was nice to have Alex contributing to the discussion: Django did basically this very change (right down to the "Trac for tickets / Github for pull requests" distinction), at a much higher scale than we have, and as he described it the change was *well* worth it.

Another objection is that Github is proprietary software, and an externally-maintained service that we'd be depending upon.

One solution to the "proprietary software" thing is the availability of the MIT-licensed <http://gitlab.org>.  It's a largely feature-complete clone of Github; if, for some reason, we need to migrate away from Github in a hurry, it will be relatively painless to set up Gitlab instead, and the fact that Git is a DVCS means every contributor will serve as a backup.  The main reason I would not suggest just deploying it is that it creates another sticky infrastructure-management problem, and while Braid is great, I'd prefer to avoid creating more work in that area.  Github also has APIs for literally all of their features, so we can create a backup script.

(Also worth noting: Gitlab is an open-source competitor to Github, but they still trust Github enough to <https://github.com/gitlabhq/> host their own development there.)

Finally, my own minor concern: Github has no notion of a "code review" as a unit of work.  A pull request is just "open" until it is "closed".  Closing pull requests to request changes would be jarring to the cultural norms associated with Github's UI.  All the github users I've spoken with, even those who follow processes which are effectively identical to Twisted's, have assured me that this is not really an issue.  A code review is "accepted" when you merge it; it's "rejected" if the pull request is still open but has some comments on it.  This will make porting over <http://twistedmatrix.com/highscores/> a bit challenging, but I think it would be worth letting that break for the time being.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130603/f0366a99/attachment.html>

From jonathan at stoppani.name  Mon Jun  3 15:32:12 2013
From: jonathan at stoppani.name (Jonathan Stoppani)
Date: Mon, 3 Jun 2013 17:32:12 -0400
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <873CDA58-A541-454C-9A05-9024DB2CCE4A@stoppani.name>

Hi Glyph,

That is great news. I already helped with Braid and would be interested in contributing some work in this area.

Cheers,
Jonathan

On Jun 3, 2013, at 16:59, Glyph <glyph at twistedmatrix.com> wrote:

> Hi Twisted developers,
> 
> This weekend I had a discussion with many Twisted developers, both local to and visiting San Francisco.  The topic came up of how to get more long-term contributors to participate more regularly in the project - particularly, doing code reviews, but also, developing and contributing to complex fixes and features that new contributors might not be able to tackle.
> 
> One suggestion that almost everybody made immediately was: we should use Github for code reviews.
> 
> In the past, I've heard this suggestion given mainly as a way to contribute more code, which does not appeal to me, since we are already swamped reviewing all the code that is currently being contributed.
> 
> This time, however, it's been pitched as a way to get people to do more reviews, which I'm keenly interested in.  Why would people do more reviews on Github?  In a nutshell, it's a lot less work.  Here are some reasons why:
> 
> 	? Instead of having to run 'force-builds' on the command line, or load a buildbot status page, Github has a way for a build system to report build success automatically, so you can see immediately within a pull request if the changes that it proposes are "good to merge".  You can see this at work with Travis here: <https://github.com/twisted/klein/pull/11>.  Originally I thought that this was a Travis-CI feature, but have since learned that this is apparently easy - trivial even - to hook up to Buildbot, since it's a simple HTTP API to invoke when a build completes, and there is even some existing buildbot infrastructure (deployed by Django, among others) to automate it.
> 	? Instead of having to describe each patch location so that you can comment on it in a single message, if you want to put a comment on a particular part of a diff in a Github pull request, you can just click on it and start typing.
> 	? In addition to the diff, it's reasonably easy to see the code in context on the web, which is faster than getting it into one's local development environment.
> 	? If a review is successful, instead of having to have a local development environment, a committer can just hit the "approve" button and it's landed immediately.
> 	? Instead of having to read through all history ever to see what's still relevant, a pull request will hide comments that address outdated diffs, allowing the change author to easily see what remains.
> 
> These advantages are not comprehensive, but they're the more significant ones I remember from this discussion.
> 
> A prerequisite for using Github for code reviews would be using Git rather than Subversion.  Luckily there's not much work to do in this area, thanks to Tom's excellent work on the Git import and automatic Github mirror.  As a bonus, by using Git instead of Subversion, we can start properly recording merge metadata.
> 
> In this discussion, Alex Gaynor pointed out that Django has a hybrid workflow where they still use Trac for bug tracking, and Github for code review.  We would therefore not need to come up with a way to migrate all of our tickets to Github issues (which seems, oddly, to be fairly unpopular even among those who like github a lot).
> 
> What would need to happen in order for this to take place?
> 
> 	? We'd need some consensus (hence this message).
> 	? We'd need to update the release process <http://twistedmatrix.com/trac/wiki/ReleaseProcess> and our development documentation <http://twistedmatrix.com/trac/wiki/BasicGuideToContributingCode> to refer to the relevant Git commands rather than Subversion commands.
> 	? We'd need a redirect from <http://twistedmatrix.com/trac/browser/> and <http://twistedmatrix.com/trac/changeset/> that would point at <https://github.com/twisted/twisted> and <https://github.com/twisted/twisted/commits/> respectively.
> 	? We'd need a Github web hook that could poke Buildbot to kick off commits.
> 	? We'd need Buildbot integration to update Github pull requests with build results when builds complete.
> 	? We'd need someone to install git rather than bzr on all the buildbots, and update the configuration of the builders to get the code from a git rather than Subversion URL.
> 	? Someone will need to convert every open ticket in review to a pull request.
> 
> I do anticipate some objections.
> 
> One objection is that each of the above tasks is going to take some work.
> 
> I am fairly confident that some of the people who have educated me here will step forward to volunteer to do it.  Please reply to this message if you'd like to volunteer, saying what you'd like to volunteer to do.  If not, then I guess that objection stands :-).
> 
> Another is that this might not be worth that investment of effort.  This is why it was nice to have Alex contributing to the discussion: Django did basically this very change (right down to the "Trac for tickets / Github for pull requests" distinction), at a much higher scale than we have, and as he described it the change was *well* worth it.
> 
> Another objection is that Github is proprietary software, and an externally-maintained service that we'd be depending upon.
> 
> One solution to the "proprietary software" thing is the availability of the MIT-licensed <http://gitlab.org>.  It's a largely feature-complete clone of Github; if, for some reason, we need to migrate away from Github in a hurry, it will be relatively painless to set up Gitlab instead, and the fact that Git is a DVCS means every contributor will serve as a backup.  The main reason I would not suggest just deploying it is that it creates another sticky infrastructure-management problem, and while Braid is great, I'd prefer to avoid creating more work in that area.  Github also has APIs for literally all of their features, so we can create a backup script.
> 
> (Also worth noting: Gitlab is an open-source competitor to Github, but they still trust Github enough to <https://github.com/gitlabhq/> host their own development there.)
> 
> Finally, my own minor concern: Github has no notion of a "code review" as a unit of work.  A pull request is just "open" until it is "closed".  Closing pull requests to request changes would be jarring to the cultural norms associated with Github's UI.  All the github users I've spoken with, even those who follow processes which are effectively identical to Twisted's, have assured me that this is not really an issue.  A code review is "accepted" when you merge it; it's "rejected" if the pull request is still open but has some comments on it.  This will make porting over <http://twistedmatrix.com/highscores/> a bit challenging, but I think it would be worth letting that break for the time being.
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From ralphm at ik.nu  Mon Jun  3 15:40:33 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Mon, 03 Jun 2013 23:40:33 +0200
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <51AD0D51.9070508@ik.nu>

On 2013-06-03 22:59, Glyph wrote:
> Hi Twisted developers,
>
> [..]
 >
> One suggestion that almost everybody made immediately was: we should use
> Github for code reviews.

As mentioned on IRC, the only comment I have is about the lack of proper 
e-mail addresses associated with commits. Tom is investigating if this 
can be done with .mailmap, instead of having to make a proper mirror again.

Otherwise: do it.

-- 
ralphm


From chris at emerge-life.de  Mon Jun  3 15:51:19 2013
From: chris at emerge-life.de (Christian Kampka)
Date: Mon, 03 Jun 2013 23:51:19 +0200
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <51AD0FD7.1020800@emerge-life.de>

Am 03.06.2013 22:59, schrieb Glyph:
> Another objection is that Github is proprietary software, and an
> externally-maintained service that we'd be depending upon.
> 
> One solution to the "proprietary software" thing is the availability of
> the MIT-licensed <http://gitlab.org>.  It's a largely feature-complete
> clone of Github; if, for some reason, we need to migrate away from
> Github in a hurry, it will be relatively painless to set up Gitlab
> instead, and the fact that Git is a DVCS means every contributor will
> serve as a backup.  The main reason I would not suggest just deploying
> it is that it creates another sticky infrastructure-management problem,
> and while Braid is great, I'd prefer to avoid creating /more/ work in
> that area.  Github also has APIs for literally all of their features, so
> we can create a backup script.
> 
> (Also worth noting: Gitlab is an open-source competitor to Github, but
> they still trust Github enough to <https://github.com/gitlabhq/> host
> their own development there.)

It may be worth noting that the reason for gitlab being hosted on github
is probably due to the fact that up until very recently, gitlab had no
way for a non-registered user to access gitlab at all. Even though they
have introduced a "public area" for projects this does only include
anonymously cloning of a repository, you still cannot browse code or
look at issues, pull/merge request or wikis without a user account.

Although gitlab is great for internal projects, this lack of a proper
support for public features makes it imo not that suitable for open
projects.

Cheers,
Chris


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 899 bytes
Desc: OpenPGP digital signature
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130603/45142ab0/attachment-0001.pgp>

From radix at twistedmatrix.com  Mon Jun  3 17:48:51 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 3 Jun 2013 18:48:51 -0500
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <CAPkRfUQi_Z4N8MX7y7VHXpxQWtp20TmXOicK4Jf=vDkcLiDmxQ@mail.gmail.com>

On Mon, Jun 3, 2013 at 3:59 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> One suggestion that almost everybody made immediately was: we should use
> Github for code reviews.
>

I'm +1 on the whole proposition as described.

Finally, my own minor concern: Github has no notion of a "code review" as a
> unit of work.  A pull request is just "open" until it is "closed".  Closing
> pull requests to request changes would be jarring to the cultural norms
> associated with Github's UI.  All the github users I've spoken with, even
> those who follow processes which are effectively identical to Twisted's,
> have assured me that this is not really an issue.  A code review is
> "accepted" when you merge it; it's "rejected" if the pull request is still
> open but has some comments on it.  This will make porting over <
> http://twistedmatrix.com/highscores/> a bit challenging, but I think it
> would be worth letting that break for the time being.
>

I don't really like the idea of maintaining review state in Trac,
especially since one of the points of this discussion is to make the life
of the reviewer easier. My feeling is that the slight difference in review
workflow on PRs -- the fact that there is no "responsibility transfer"
mechanism -- will not be a serious problem in practice, and that we should
have a culture of closing abandoned PRs.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130603/450ab6dd/attachment.html>

From jkakar at kakar.ca  Mon Jun  3 18:35:54 2013
From: jkakar at kakar.ca (Jamu Kakar)
Date: Mon, 3 Jun 2013 17:35:54 -0700
Subject: [Twisted-Python] github, again
In-Reply-To: <CAPkRfUQi_Z4N8MX7y7VHXpxQWtp20TmXOicK4Jf=vDkcLiDmxQ@mail.gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <CAPkRfUQi_Z4N8MX7y7VHXpxQWtp20TmXOicK4Jf=vDkcLiDmxQ@mail.gmail.com>
Message-ID: <CALWnh8qCo7axQJKndem=95LR-5v16ocbFTe1NmGZh=O_itB-PA@mail.gmail.com>

Hi,

On Mon, Jun 3, 2013 at 4:48 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> On Mon, Jun 3, 2013 at 3:59 PM, Glyph <glyph at twistedmatrix.com> wrote:
>> One suggestion that almost everybody made immediately was: we should use
>> Github for code reviews.
>
> I'm +1 on the whole proposition as described.

Me too.

>> Finally, my own minor concern: Github has no notion of a "code review" as
>> a unit of work.  A pull request is just "open" until it is "closed".
>> Closing pull requests to request changes would be jarring to the cultural
>> norms associated with Github's UI.  All the github users I've spoken with,
>> even those who follow processes which are effectively identical to
>> Twisted's, have assured me that this is not really an issue.  A code review
>> is "accepted" when you merge it; it's "rejected" if the pull request is
>> still open but has some comments on it.  This will make porting over
>> <http://twistedmatrix.com/highscores/> a bit challenging, but I think it
>> would be worth letting that break for the time being.
>
> I don't really like the idea of maintaining review state in Trac, especially
> since one of the points of this discussion is to make the life of the
> reviewer easier. My feeling is that the slight difference in review workflow
> on PRs -- the fact that there is no "responsibility transfer" mechanism --
> will not be a serious problem in practice, and that we should have a culture
> of closing abandoned PRs.

Something that has worked well for me on other projects is to use
simple conventions.  When you finally approve a branch you leave a
comment like 'jkakar:approve'.  If you expect changes you leave a
comment like 'jkakar:needs-fixing'.  In other words, you don't really
need an app-enforced mechanism if you have a simple convention.  I
propose starting with the simplest convention: the reviewing must add
an 'author:approve' comment when they're finally happy.

Thanks,
J.


From glyph at twistedmatrix.com  Mon Jun  3 19:00:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 3 Jun 2013 18:00:42 -0700
Subject: [Twisted-Python] github, again
In-Reply-To: <CALWnh8qCo7axQJKndem=95LR-5v16ocbFTe1NmGZh=O_itB-PA@mail.gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <CAPkRfUQi_Z4N8MX7y7VHXpxQWtp20TmXOicK4Jf=vDkcLiDmxQ@mail.gmail.com>
 <CALWnh8qCo7axQJKndem=95LR-5v16ocbFTe1NmGZh=O_itB-PA@mail.gmail.com>
Message-ID: <678E67F6-525E-4593-A722-9387C776D730@twistedmatrix.com>


On Jun 3, 2013, at 5:35 PM, Jamu Kakar <jkakar at kakar.ca> wrote:

> Hi,
> 
> On Mon, Jun 3, 2013 at 4:48 PM, Christopher Armstrong
> <radix at twistedmatrix.com> wrote:
>> On Mon, Jun 3, 2013 at 3:59 PM, Glyph <glyph at twistedmatrix.com> wrote:
>>> One suggestion that almost everybody made immediately was: we should use
>>> Github for code reviews.
>> 
>> I'm +1 on the whole proposition as described.
> 
> Me too.
> 
>>> Finally, my own minor concern: Github has no notion of a "code review" as
>>> a unit of work.  A pull request is just "open" until it is "closed".
>>> Closing pull requests to request changes would be jarring to the cultural
>>> norms associated with Github's UI.  All the github users I've spoken with,
>>> even those who follow processes which are effectively identical to
>>> Twisted's, have assured me that this is not really an issue.  A code review
>>> is "accepted" when you merge it; it's "rejected" if the pull request is
>>> still open but has some comments on it.  This will make porting over
>>> <http://twistedmatrix.com/highscores/> a bit challenging, but I think it
>>> would be worth letting that break for the time being.
>> 
>> I don't really like the idea of maintaining review state in Trac, especially
>> since one of the points of this discussion is to make the life of the
>> reviewer easier. My feeling is that the slight difference in review workflow
>> on PRs -- the fact that there is no "responsibility transfer" mechanism --
>> will not be a serious problem in practice, and that we should have a culture
>> of closing abandoned PRs.
> 
> Something that has worked well for me on other projects is to use
> simple conventions.  When you finally approve a branch you leave a
> comment like 'jkakar:approve'.  If you expect changes you leave a
> comment like 'jkakar:needs-fixing'.  In other words, you don't really
> need an app-enforced mechanism if you have a simple convention.  I
> propose starting with the simplest convention: the reviewing must add
> an 'author:approve' comment when they're finally happy.

Honestly, we don't have much of an enforcement mechanism as it is.  We just manually add the 'review' keyword when something goes into review, by typing 'review' into the keywords box; you also have to manually un-assign the ticket, and people often forget that part.

The two things that notice this are our IRC bot and our High Scores page.

The lack of a 'keyword' mechanism somewhat distracted me from the main issue though; if we just had high scores and the announcement bot scan the comments for the strings "Please fix." for out-of-review and "Please review." for back-into-review, we could both maintain the exact same workflow and reward politeness ;-).

Thanks for the suggestion, Jamu!

-glyph



From meejah at meejah.ca  Mon Jun  3 19:48:42 2013
From: meejah at meejah.ca (meejah)
Date: Tue, 04 Jun 2013 05:48:42 +0400
Subject: [Twisted-Python] github, again
In-Reply-To: <51AD0FD7.1020800@emerge-life.de> (Christian Kampka's message of
 "Mon, 03 Jun 2013 23:51:19 +0200")
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD0FD7.1020800@emerge-life.de>
Message-ID: <87r4gi7iit.fsf@meejah.ca>

Christian Kampka <chris at emerge-life.de> writes:

> Although gitlab is great for internal projects, this lack of a proper
> support for public features makes it imo not that suitable for open
> projects.

Sorry to butt in, but to add to this Gitlab doesn't support the "fork
and pull request" model of GitHub -- instead they use branches (in one
repo) and "merge requests". This might work fine for you guys, of
course, but if you're expecting a "drop in" replacement for github,
that's not what you'll get ;)

It sounds like aspects of this are currently in the latest stuff,
however, so it might work like github in this respect "soon":

https://github.com/gitlabhq/gitlabhq/pull/3597

Cheers,
meejah


From terry at jon.es  Mon Jun  3 19:55:20 2013
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Jun 2013 02:55:20 +0100
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <CACqnu4V8YPaCe8pvOeVa3AgzrqXbqJ2gUP9U18_p1Q3DUpQc8g@mail.gmail.com>

I sent most of the below off-list to Glyph earlier, as my comments were a
bit half-assed and I'm not really (or not at all) a Twisted contributor.
Glyph suggested I mail them to the list anyway, and to try adding some more
concrete reasons for being +1 on the suggested change.

---  [ Original mail ]

I'm +1 bigtime on moving towards git/github. I really dislike git, but it
gets the job done, and github is awesome. Github changed the way we work,
it removed a ton of friction and overhead in reviewing (you're right, the
click to comment on a diff is really convenient). I don't have too many
complaints about the ticket system, but sure it could be better. The really
impressive thing about Github is how incredibly quickly they move. It gets
better and better and better all the time.  We migrated away from svn +
trac to bzr + launchpad and finally to git + github. The latter blows the
former away massively, IMO.  I'm not trying to give formal quantitative
feedback, just my subjective opinion.  I've also felt for ages that there's
too much overhead in trying to contribute to Twisted. I'm a lazy/selfish
kind of member of the Twisted community, and when I'm faced with the
thought of having to set up all that old-fashioned (from my POV) machinery
like svn and combinator and what-not to think about really contributing or
running tests or whatever, some part of me just thinks "no, no, no, I'm not
going back to that world".  (see above re lazy, if that wasn't clear).

OK, sorry for a bit of a rambling subjective mail. I'm sure you've heard
all this before. The funny thing about these changes is that before you
make them you always think things are pretty much fine. After you make them
you wonder how you ever lived with the old system.  That may not be the
case here for you or for you & the Twisted community, but it certainly was
for me with the move to github.

---

Glyph> Maybe you could be a bit more specific as to the steps that Github
eliminates, and _concrete_ ways in which it is more efficient.

I'd say there are probably dozens of ways in which Gthub improved things
for us. Many of them are minor, of course, but they all add up and the
usability difference between Github and Trac or Launchpad is extreme.

Ease of use and the anticipated amount of effort something is going to take
are very important aspects of tools, in my opinion. If you know some action
- like starting a review or branching or merging or commenting etc. - is
going to take a certain amount of effort, that correlates (unless you're
being paid or doing this out of some extreme reason, like being a core dev
on a project) with how likely you are to do it. (E.g., making branches - it
was possible in sccs, in rcs, in cvs, in svn, but.... oh, the pain! When
making branches *and merging them* became so extraordinarily simple and
pain free, it changed the way people worked.)  As I said above, I'm a
lazy/selfish Twisted onlooker. Many has been the time when I'd have been
happy to chip in on something (e.g., last week someone was asking for some
reviewing help) but the thought of getting the required machinery in place,
and using it, even if it's just svn (ugh, ugh, ugh) stops me.  That's a
feeling I've had about Twisted many times over the last years. It's the
feeling I have when someone asks me to go back to helping them on some old
perl code - you just don't wanna go there :-) It's ugly and not fun.  Sorry
if these are wimpy reasons, but to me usability friction (real or
perceived) is very important.

A very nice thing about Github is that you can have conversations about the
diff right on the page, inline, where the diff is shown. You don't need to
download the branch, to use the command-line (and i LOVE the command line
BTW), or to do anything like that. Github is smart enough to hide the
discussion once a subsequent commit comes in that addresses the line being
discussed (sure, that could go wrong but in practice it doesn't seem to).
 One click to merge branches is great - in fact we made a rule that merging
is always done via Github. Adding of milestones and labels to issues is
smooth, as is viewing various simple subsets of issues. The project
activity graphs in Github are very interesting. GFM (Github flavored
markdown) is really easy to use and the results are attractive. Gists are
great. It's nice being able to have a wiki that's also just a repo. I very
much like the "pull requests are a place where discussion takes place"
approach - as opposed to holding that pull requests are just where branches
go when they're "finished" and ready to be merged. BTW, it's very
interesting to read about how the folks at Github use Github themselves [1,
2]. The workflow we developed is very similar, only slightly more complex.
If people want more examples, I can try to go more systematically through
my usage of Github & say more.

As mentioned above, Github moves (improves) incredibly quickly. They put
pretty much every other project I know to shame (including all of mine) in
terms of how fast they get stuff done and improve the product and how
attractively it's done. In comparison, Trac and Launchpad felt static,
butt-ugly, and like they virtually never improved. Github gets better
underneath you all the time.  E.g., you happen to be sitting on a page
looking at a pull request, and it updates dynamically without you needing
to reload. The pull request is merged maybe, or the author pushes into the
branch again, or conflicts with master get resolved by someone and the page
updates. Little things, but they work damned well and make using the site a
pleasure.

I can't resist adding: a friend in IRC just said re this thread: "2003
called and asked for their shitty tools back."

Terry

[1] http://scottchacon.com/2011/08/31/github-flow.html
[2] https://github.com/blog/1124-how-we-use-pull-requests-to-build-github


On Mon, Jun 3, 2013 at 9:59 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Hi Twisted developers,
>
> This weekend I had a discussion with many Twisted developers, both local
> to and visiting San Francisco.  The topic came up of how to get more
> long-term contributors to participate more regularly in the project -
> particularly, doing code reviews, but also, developing and contributing to
> complex fixes and features that new contributors might not be able to
> tackle.
>
> One suggestion that almost everybody made immediately was: we should use
> Github for code reviews.
>
> In the past, I've heard this suggestion given mainly as a way to *contribute
> more code*, which does not appeal to me, since we are already swamped
> reviewing all the code that is currently being contributed.
>
> This time, however, it's been pitched as a way to get people to *do more
> reviews*, which I'm keenly interested in.  Why would people do more
> reviews on Github?  In a nutshell, it's a lot less work.  Here are some
> reasons why:
>
>
>    - Instead of having to run 'force-builds' on the command line, or load
>    a buildbot status page, Github has a way for a build system to report build
>    success automatically, so you can see immediately within a pull request if
>    the changes that it proposes are "good to merge".  You can see this at work
>    with Travis here: <https://github.com/twisted/klein/pull/11>.
>     Originally I thought that this was a Travis-CI feature, but have since
>    learned that this is apparently easy - trivial even - to hook up to
>    Buildbot, since it's a simple HTTP API to invoke when a build completes,
>    and there is even some existing buildbot infrastructure (deployed by
>    Django, among others) to automate it.
>    - Instead of having to describe each patch location so that you can
>    comment on it in a single message, if you want to put a comment on a
>    particular part of a diff in a Github pull request, you can just click on
>    it and start typing.
>    - In addition to the diff, it's reasonably easy to see the code in
>    context on the web, which is faster than getting it into one's local
>    development environment.
>    - If a review is successful, instead of having to have a local
>    development environment, a committer can just hit the "approve" button and
>    it's landed immediately.
>
>
>    - Instead of having to read through all history ever to see what's
>    still relevant, a pull request will hide comments that address outdated
>    diffs, allowing the change author to easily see what remains.
>
>
> These advantages are not comprehensive, but they're the more significant
> ones I remember from this discussion.
>
> A prerequisite for using Github for code reviews would be using Git rather
> than Subversion.  Luckily there's not much work to do in this area, thanks
> to Tom's excellent work on the Git import and automatic Github mirror.  As
> a bonus, by using Git instead of Subversion, we can start properly
> recording merge metadata.
>
> In this discussion, Alex Gaynor pointed out that Django has a hybrid
> workflow where they still use Trac for bug tracking, and Github for code
> review.  We would therefore *not* need to come up with a way to migrate
> all of our tickets to Github issues (which seems, oddly, to be fairly
> unpopular even among those who like github a lot).
>
> What would need to happen in order for this to take place?
>
>
>    1. We'd need some consensus (hence this message).
>    2. We'd need to update the release process <
>    http://twistedmatrix.com/trac/wiki/ReleaseProcess> and our development
>    documentation <
>    http://twistedmatrix.com/trac/wiki/BasicGuideToContributingCode> to
>    refer to the relevant Git commands rather than Subversion commands.
>    3. We'd need a redirect from <http://twistedmatrix.com/trac/browser/>
>    and <http://twistedmatrix.com/trac/changeset/> that would point at <
>    https://github.com/twisted/twisted> and <
>    https://github.com/twisted/twisted/commits/> respectively.
>    4. We'd need a Github web hook that could poke Buildbot to kick off
>    commits.
>    5. We'd need Buildbot integration to update Github pull requests with
>    build results when builds complete.
>    6. We'd need someone to install git rather than bzr on all the
>    buildbots, and update the configuration of the builders to get the code
>    from a git rather than Subversion URL.
>    7. Someone will need to convert every open ticket in review to a pull
>    request.
>
>
> I do anticipate some objections.
>
> One objection is that each of the above tasks is going to take some work.
>
> I am fairly confident that some of the people who have educated me here
> will step forward to volunteer to do it.  Please reply to this message if
> you'd like to volunteer, saying what you'd like to volunteer to do.  If
> not, then I guess that objection stands :-).
>
> Another is that this might not be worth that investment of effort.  This
> is why it was nice to have Alex contributing to the discussion: Django did
> basically this very change (right down to the "Trac for tickets / Github
> for pull requests" distinction), at a much higher scale than we have, and
> as he described it the change was *well* worth it.
>
> Another objection is that Github is proprietary software, and an
> externally-maintained service that we'd be depending upon.
>
> One solution to the "proprietary software" thing is the availability of
> the MIT-licensed <http://gitlab.org>.  It's a largely feature-complete
> clone of Github; if, for some reason, we need to migrate away from Github
> in a hurry, it will be relatively painless to set up Gitlab instead, and
> the fact that Git is a DVCS means every contributor will serve as a backup.
>  The main reason I would not suggest just deploying it is that it creates
> another sticky infrastructure-management problem, and while Braid is great,
> I'd prefer to avoid creating *more* work in that area.  Github also has
> APIs for literally all of their features, so we can create a backup script.
>
> (Also worth noting: Gitlab is an open-source competitor to Github, but
> they still trust Github enough to <https://github.com/gitlabhq/> host
> their own development there.)
>
> Finally, my own minor concern: Github has no notion of a "code review" as
> a unit of work.  A pull request is just "open" until it is "closed".
>  Closing pull requests to request changes would be jarring to the cultural
> norms associated with Github's UI.  All the github users I've spoken with,
> even those who follow processes which are effectively identical to
> Twisted's, have assured me that this is not really an issue.  A code review
> is "accepted" when you merge it; it's "rejected" if the pull request is
> still open but has some comments on it.  This will make porting over <
> http://twistedmatrix.com/highscores/> a bit challenging, but I think it
> would be worth letting that break for the time being.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130604/0e8587d6/attachment-0001.html>

From radix at twistedmatrix.com  Mon Jun  3 21:15:49 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 3 Jun 2013 22:15:49 -0500
Subject: [Twisted-Python] github, again
In-Reply-To: <87r4gi7iit.fsf@meejah.ca>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD0FD7.1020800@emerge-life.de> <87r4gi7iit.fsf@meejah.ca>
Message-ID: <CAPkRfUQ-VzodUmUANEJCWB4=z5oKLy23-yjKMccXj_6pjVY4wA@mail.gmail.com>

On Mon, Jun 3, 2013 at 8:48 PM, meejah <meejah at meejah.ca> wrote:

>
> It sounds like aspects of this are currently in the latest stuff,
> however, so it might work like github in this respect "soon":
>
> https://github.com/gitlabhq/gitlabhq/pull/3597
>
>

Whoah. Did anyone else notice that "coveralls" bot? that is pretty sweet.


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130603/89eff4fc/attachment.html>

From tds333 at gmail.com  Tue Jun  4 00:49:24 2013
From: tds333 at gmail.com (tds333 at gmail.com)
Date: Tue, 04 Jun 2013 08:49:24 +0200
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <51AD8DF4.5050504@gmail.com>

Hi,

what about Bitbucket (www.bitbucket.org) and mercurial ?

Don't they provide the same features ?

I'm asking because we are in Python land. ;-)




Regards,

Wolfgang




From adi at roiban.ro  Tue Jun  4 01:20:36 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 4 Jun 2013 10:20:36 +0300
Subject: [Twisted-Python] github, again
In-Reply-To: <51AD8DF4.5050504@gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD8DF4.5050504@gmail.com>
Message-ID: <CAFycZ9cEW9NWuB+wzvBHB4y7h5ny4GUtzT=U1u2j6eO+6PoirA@mail.gmail.com>

Thanks for working on this!

Here are the points where I can help:


1. We'd need some consensus (hence this message).

I am still new to Twisted and only sent a few patched, but I am
looking forward for sending reviews in GitHub or BitButcket, any or
them is better than the current read-only SVN branch and attaching
diff files to the slow Trac.


4. We'd need a Github web hook that could poke Buildbot to kick off commits.

GitHub can send webhook for many events, and as a weekend hack I have
implemented a simple server to feed all GitHub activity, back to Trac.

https://github.com/chevah/txghserf

If there is interest in syncing GitHub Pull request with Trac ticket,
I am happy to discuss more details in a separate thread. I am already
doing this for my prorject.

I have also implemented a bit of a workflow on top of GitHub Pull
request. For example leaving a comment in pull request with
needs-review, will set the review state in Trac. Leaving a comment
with needs-changes will remove the review state.


5. We'd need Buildbot integration to update Github pull requests with
build results when builds complete.

The Builbot integration with GitHub status was recently merged. I can
volunteer with support. I am also using this GitHub feature on my own
Buildbot instance.

https://github.com/buildbot/buildbot/pull/635


7. Someone will need to convert every open ticket in review to a pull request.

I can volunteer for that.


Thanks!
-- 
Adi Roiban


From tobias.oberstein at tavendo.de  Tue Jun  4 10:42:39 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 4 Jun 2013 09:42:39 -0700
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>

in general: +1 for this

> Finally, my own minor concern: Github has no notion of a "code review" as a unit of work. ?A pull request is just "open" until it is "closed".
> <snip>

I _think_ the following is true (if so, I find that strange) - pls correct me if I'm wrong:

A pull request is not tied to a specific rev, but only to a source repo/branch.
While the pull isn't merged (and hence closed), more commits on the source repo/branch can be added.

So a pull request is kind of moving target ..

GitHub seems to view that as a feature, not bug:
"""
Pull requests can be sent from any branch or commit but it's recommended that a topic branch be used so that follow-up commits can be pushed to update the pull request if necessary.
"""
https://help.github.com/articles/using-pull-requests

"""
It's important to use a new branch for pull requests for several reasons:

It allows you to submit multiple pull requests without confusion. The classical Github gotcha is to continue committing to a pull request branch after making the initial request. When these commits are pushed to the remote, they will become part of the original pull request which often ends up conflating unrelated functionality.
"""
http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/

However: https://github.com/blog/712-pull-requests-2-0
I'm not sure how to interpret that ..

/Tobias


From terry at jon.es  Tue Jun  4 12:10:19 2013
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Jun 2013 19:10:19 +0100
Subject: [Twisted-Python] github, again
In-Reply-To: <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>

The general workflow that's being described is:

 - You open an issue for all bugs, enhancements, etc.
 - When someone starts working on one of these, they create a branch (we
use descriptive branch names and put -NNNN at the end, with the issue
number).
 - When the branch reaches the point where the author feels it could be
merged or wants to open it up for easy discussion, they send a pull request.

The pull request is a signal to the people working on the base code (that
the pull request is against/for, let's just call it "master") that the
author of the branch has it in mind to merge their branch into master. That
may be a way off, it may never happen, or it could be done almost
immediately. Github doesn't have any formal mechanism for having a branch
approved, or even a mechanism for saying "I'm interested in this pull
request and I intend to review / comment on it before it's merged, so
please don't merge it until I've +1'd".  That's a weakness and a strength.
We adopted the convention (as @jkakar mentioned) of having interested
parties just edit the pull request description, to put in a string like
"terrycojones: **pending**" to indicate that you're planning to comment.

The pull requests are discussions about the code, and the code changes
while the pul request is outstanding. That's normal. Other people, who have
the right permission, might want to push changes into the branch that's
being worked on. E.g., there could be a jkakar/fix-race-condition-4772
branch. I switch onto that branch (git remote update --prune jkakar;  git
co jkakar/fix-race-condition-4772) and run the tests, take a look, etc.  I
decided to help out by making a few changes, so I make my own branch:  git
co -b fix-race-condition-4772.  That creates
terrycojones/fix-race-condition-4772 which I can work on, commit to, and
push back to github.  I could then send a pull request to merge that branch
into jkakar/fix-race-condition-4772 or if I have the right perms, just push
it directly into that branch.

The diff in the pull request always reflects the latest changes, as you'd
expect. So over time as there is discussion & code change around the pull
request, the diff will change. As I mentioned, parts that are fixed will
have the conversation disappear (this sounds alarming, perhaps, but it
works).

At some point everyone who's interested will have contributed to the
discussion, to the code, and signed off.  Then you merge it, using the web
UI.  Sometimes a pull request doesn't reach the point where there's
agreement that it should be merged. When that happens, we usually close the
pull request so it's not cluttering up the pull requests page. The branch
doesn't go away, of course, and can be re-proposed for merging via a later
pull request.

I hope that helps.  I think most of this is open-ended and teams can choose
the conventions that suit them. The above is just what we've done, but it
does seem to match up pretty closely with some of the links people have
been posting.

One point of difference that I don't know the best answer to: We tend to
each have our own fork of  a repo, and to send pull requests into the repo
"owned" by the organization. Others (including Github themselves) just have
one repo and anyone can make a branch in that repo and propose it for
merging into the master of the same repo.  I think I prefer the former,
though it has a little more overhead and it requires people to do a git
remote add git at github.com:name/project.git for the other people whose
changes you want to track and pull in etc (via git remote update --prune).

Terry




On Tue, Jun 4, 2013 at 5:42 PM, Tobias Oberstein <
tobias.oberstein at tavendo.de> wrote:

> in general: +1 for this
>
> > Finally, my own minor concern: Github has no notion of a "code review"
> as a unit of work.  A pull request is just "open" until it is "closed".
> > <snip>
>
> I _think_ the following is true (if so, I find that strange) - pls correct
> me if I'm wrong:
>
> A pull request is not tied to a specific rev, but only to a source
> repo/branch.
> While the pull isn't merged (and hence closed), more commits on the source
> repo/branch can be added.
>
> So a pull request is kind of moving target ..
>
> GitHub seems to view that as a feature, not bug:
> """
> Pull requests can be sent from any branch or commit but it's recommended
> that a topic branch be used so that follow-up commits can be pushed to
> update the pull request if necessary.
> """
> https://help.github.com/articles/using-pull-requests
>
> """
> It's important to use a new branch for pull requests for several reasons:
>
> It allows you to submit multiple pull requests without confusion. The
> classical Github gotcha is to continue committing to a pull request branch
> after making the initial request. When these commits are pushed to the
> remote, they will become part of the original pull request which often ends
> up conflating unrelated functionality.
> """
>
> http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/
>
> However: https://github.com/blog/712-pull-requests-2-0
> I'm not sure how to interpret that ..
>
> /Tobias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130604/f744e4ad/attachment.html>

From rodrigc at crodrigues.org  Tue Jun  4 13:09:28 2013
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 4 Jun 2013 12:09:28 -0700
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <CAG=rPVcnu_+-dfvHjCnzx2n3CswnxCTvxUiqnOXHaN+kRB_1Rg@mail.gmail.com>

Hi,

I think moving to github will be a huge win for the Twisted project,
and all the migration/integration issues are manageable.

I would recommend you keep two things in mind:

(1)  I am a member of the FreeBSD project, and am mentoring a Google Summer
of Code student.
      I pushed the student to use the github mirror of the FreeBSD
repository: https://github.com/freebsd/freebsd
      (unsupported officially by the FreeBSD project, but used by a lot of
people).
      github worked great, but the only problem my GSoC student had was a
lot of RPC timeout errors
      when doing "git clone" of the FreeBSD code, which is quite a bit.
The student is in New Delhi, India, so I don't know what the networking
      connectivity to github from around the world is.
      It was not a complete showstopper, because github allows you to click
a link to download a single zip file of the repository, and that
      worked for him.
      So keep this in mind if you have a lot of Twisted developers around
the world.


(2)   Make sure you always have a "Plan B"/"Disaster Recovery" plan to get
the repo out of github.
       It's not that critical, but something worth keeping in your back
pocket.
       In the past, project hosting sites like Sourceforge were very
popular,
       and then the fell out of favor for various reasons.  Today, github
is very popular, but who knows what will happen in future.
       If github works out in the long term, great, but if in future
something bad happens, Twisted should outlive github.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130604/7cc582d4/attachment.html>

From tobias.oberstein at tavendo.de  Tue Jun  4 14:43:40 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 4 Jun 2013 13:43:40 -0700
Subject: [Twisted-Python] github, again
In-Reply-To: <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D4422DC21803@EXVMBX020-12.exch020.serverdata.net>

Terry,

thanks alot for your detailed explanation of a workflow. For me, that sounds reasonable and workable. 

>At some point everyone who's interested will have contributed to the discussion, to the code, and signed off. ?Then you merge it, using the web UI

So when the code is ready, the feature branch including any accumulated commits (history) will get merged - and not a clean diff against the main repo?

Just asking .. guess there are arguments for both approaches.

>One point of difference that I don't know the best answer to: We tend to each have our own fork of ?a repo, and to send pull requests into the repo "owned" by the organization. Others (including Github >themselves) just have one repo and anyone can make a branch in that repo and propose it for merging into the master of the same repo. ?I think I prefer the former, though it has a little more overhead and it >requires people to do a git remote add git at github.com:name/project.git for the other people whose changes you want to track and pull in etc (via git remote update --prune).

+1 for the former (each has it's own repo). p2p scm.

/Tobias


From terry at jon.es  Tue Jun  4 14:55:19 2013
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Jun 2013 21:55:19 +0100
Subject: [Twisted-Python] github, again
In-Reply-To: <634914A010D0B943A035D226786325D4422DC21803@EXVMBX020-12.exch020.serverdata.net>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>
 <634914A010D0B943A035D226786325D4422DC21803@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CACqnu4VGAED4DVy2YEeKEbNWkGwvEU78XA9FVZJqejABSvUsvw@mail.gmail.com>

> So when the code is ready, the feature branch including any accumulated
commits (history) will
> get merged - and not a clean diff against the main repo?

I'm very far from being a git expert. In fact, I'm kind of the opposite -
git and I have a stormy relationship and everyone has to tell me what to do.

But, I believe this is what git rebase is mainly used for. You can rebase
your branch against an updated master and (I'm guessing) make your changes
look like a single diff. Some people don't like that as it changes history,
others do like it and say yes, that's the point - clean up the history so
the commit log isn't full of tiny changes that were all made in order to
effect some change (i.e., address a given ticket/issue).

I'm REALLY far from being a git pro, so someone else should confirm/correct
this.

Terry



On Tue, Jun 4, 2013 at 9:43 PM, Tobias Oberstein <
tobias.oberstein at tavendo.de> wrote:

> Terry,
>
> thanks alot for your detailed explanation of a workflow. For me, that
> sounds reasonable and workable.
>
> >At some point everyone who's interested will have contributed to the
> discussion, to the code, and signed off.  Then you merge it, using the web
> UI
>
> So when the code is ready, the feature branch including any accumulated
> commits (history) will get merged - and not a clean diff against the main
> repo?
>
> Just asking .. guess there are arguments for both approaches.
>
> >One point of difference that I don't know the best answer to: We tend to
> each have our own fork of  a repo, and to send pull requests into the repo
> "owned" by the organization. Others (including Github >themselves) just
> have one repo and anyone can make a branch in that repo and propose it for
> merging into the master of the same repo.  I think I prefer the former,
> though it has a little more overhead and it >requires people to do a git
> remote add git at github.com:name/project.git for the other people whose
> changes you want to track and pull in etc (via git remote update --prune).
>
> +1 for the former (each has it's own repo). p2p scm.
>
> /Tobias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130604/3ca0f1d0/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Jun  5 00:29:17 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 4 Jun 2013 23:29:17 -0700
Subject: [Twisted-Python] on contributions
Message-ID: <F1813D88-8CBC-494C-8B03-F3D9E18D6E53@twistedmatrix.com>

A few times recently (most recently in my email on Github) I have mentioned that I am more interested in getting more people to review Twisted tickets than in getting more people to write new patches to Twisted.

Based on some feedback that other contributors have sent me privately, I'm afraid that this may have given the wrong impression.

It's not that I don't want people to write patches for Twisted.  I do.  I want everybody to write patches for Twisted all the time!  It's also not that I don't appreciate the time and effort that went into those patches.  I do.

In fact, it is because I appreciate that time and effort that I have said I want to optimize for reviews.  It bothers me a lot that someone, having gone through the effort to craft a patch to Twisted, might have to wait for weeks or months for a reviewer to even thank them for that patch, let alone do a full review and give them the feedback they need to get it landed.  I am constantly looking for ways to give quicker, feedback and better experiences to new contributors.

I think the tools Github offers might help, but we (the core Twisted team) will still need to think of better ways to motivate ourselves and to induct others into the reviewer community.  (If this has inspired you to do a review, there are plenty waiting: <http://twistedmatrix.com/trac/report/15>.)

So, please, go on contributing patches to Twisted; I thank you for your contribution and I thank you doubly for your patience.

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130604/f7aef14d/attachment.html>

From adi at roiban.ro  Wed Jun  5 01:37:22 2013
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 5 Jun 2013 10:37:22 +0300
Subject: [Twisted-Python] on contributions
In-Reply-To: <F1813D88-8CBC-494C-8B03-F3D9E18D6E53@twistedmatrix.com>
References: <F1813D88-8CBC-494C-8B03-F3D9E18D6E53@twistedmatrix.com>
Message-ID: <CAFycZ9fj=yu1zVM4g8Q5RxU9MRdfuuzbDQi4LnTqMuFJ+HLfVQ@mail.gmail.com>

On 5 June 2013 09:29, Glyph <glyph at twistedmatrix.com> wrote:
[snip]

> So, please, go on contributing patches to Twisted; I thank you for your
> contribution and I thank you doubly for your patience.

>From my point of view, the fact that reviews take so long is one
reason why committing patches to Twisted is not fun. So I think that
you are right to focus on solving the review issues.

I have contributed a few patches to twisted.protocols.ftp and I think
that one of the reason why it took so long to review the code, is due
to the fact that no core developer really cares about FTP
implementation.
I know that everybody want Twisted to be big and great, but there are
limited resources that needs to be managed.

This is not a complain :), but what I wanted to say is that maybe it
is better for Twisted to be a thinner library, and "downgrade" some of
the code to independent projects.

In this way, core developers will have more time to review more
important core features, rather than looking at my minor fixes for FTP
and later maintaining that code.

Thanks!
-- 
Adi Roiban


From jon at multani.info  Wed Jun  5 01:56:09 2013
From: jon at multani.info (Jonathan Ballet)
Date: Wed, 5 Jun 2013 09:56:09 +0200
Subject: [Twisted-Python] github, again
In-Reply-To: <CACqnu4VGAED4DVy2YEeKEbNWkGwvEU78XA9FVZJqejABSvUsvw@mail.gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>
 <634914A010D0B943A035D226786325D4422DC21803@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4VGAED4DVy2YEeKEbNWkGwvEU78XA9FVZJqejABSvUsvw@mail.gmail.com>
Message-ID: <20130605075607.GB22389@debian>

Hi, just shiming in,

On Tue, Jun 04, 2013 at 09:55:19PM +0100, Terry Jones wrote:
> > So when the code is ready, the feature branch including any accumulated
> commits (history) will
> > get merged - and not a clean diff against the main repo?
> 
> I'm very far from being a git expert. In fact, I'm kind of the opposite -
> git and I have a stormy relationship and everyone has to tell me what to do.
> 
> But, I believe this is what git rebase is mainly used for. You can rebase
> your branch against an updated master and (I'm guessing) make your changes
> look like a single diff. Some people don't like that as it changes history,
> others do like it and say yes, that's the point - clean up the history so
> the commit log isn't full of tiny changes that were all made in order to
> effect some change (i.e., address a given ticket/issue).

This is actually called a "squash" in Git terminology - Git has an
option called "--squash" for the "merge" command which precisely do
that. This is, FYI, part of the merge policy used by projects like
PostgreSQL for example [1]

I'm not sure we can exactly say it changes the history: a brand new
commit is actually created, which is the sum of all the commits from the
branch which is merged, but as I see it, it's as if someone else
commited this new feature, and branches become completely throwable in
the end.

I let the Git manual explain the squash feature (extract from "git help
merge"; the second sentence is probably the most useful):

    --squash, --no-squash
        Produce the working tree and index state as if a real merge
        happened (except for the merge information), but do not actually
        make a commit or move the HEAD, nor record $GIT_DIR/MERGE_HEAD
        to cause the next git commit command to create a merge commit.
        This allows you to create a single commit on top of the current
        branch whose effect is the same as merging another branch (or
        more in case of an octopus).

        With --no-squash perform the merge and commit the result.  This
        option can be used to override --squash.


 Jonathan


[1]: http://wiki.postgresql.org/wiki/Committing_with_Git


> I'm REALLY far from being a git pro, so someone else should confirm/correct
> this.
> 
> Terry


From glyph at twistedmatrix.com  Wed Jun  5 02:29:07 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Jun 2013 01:29:07 -0700
Subject: [Twisted-Python] on contributions
In-Reply-To: <CAFycZ9fj=yu1zVM4g8Q5RxU9MRdfuuzbDQi4LnTqMuFJ+HLfVQ@mail.gmail.com>
References: <F1813D88-8CBC-494C-8B03-F3D9E18D6E53@twistedmatrix.com>
 <CAFycZ9fj=yu1zVM4g8Q5RxU9MRdfuuzbDQi4LnTqMuFJ+HLfVQ@mail.gmail.com>
Message-ID: <6334F97B-6093-4E67-876F-E31E4A01737E@twistedmatrix.com>


On Jun 5, 2013, at 12:37 AM, Adi Roiban <adi at roiban.ro> wrote:

> On 5 June 2013 09:29, Glyph <glyph at twistedmatrix.com> wrote:
> [snip]
> 
>> So, please, go on contributing patches to Twisted; I thank you for your
>> contribution and I thank you doubly for your patience.
> 
> From my point of view, the fact that reviews take so long is one
> reason why committing patches to Twisted is not fun. So I think that
> you are right to focus on solving the review issues.
> 
> I have contributed a few patches to twisted.protocols.ftp and I think
> that one of the reason why it took so long to review the code, is due
> to the fact that no core developer really cares about FTP
> implementation.
> I know that everybody want Twisted to be big and great, but there are
> limited resources that needs to be managed.

Would you be interested in contributing to those resources by doing some reviews yourself? :)

As a non-committer, you can do reviews of fixes contributed by committers (like me, exarkun, dreid, radix, therve...).  It's up to the committer to decide whether your review was thorough enough, so it's their fault if you didn't do a good enough job :).  If you clear those tickets out of the queue, it gives committers more time to review tickets from external contributors.

> This is not a complain :), but what I wanted to say is that maybe it
> is better for Twisted to be a thinner library, and "downgrade" some of
> the code to independent projects.
> 
> In this way, core developers will have more time to review more
> important core features, rather than looking at my minor fixes for FTP
> and later maintaining that code.

There are, possibly, some features that Twisted could shed.  But, based on my experience, I don't think that this is a major issue.  A big reason that we need code review is to introduce external contributors to our coding practices so that they can work up to making more significant changes; in that sense, most reviews are similar unless they're really big.

Also, one of the main advantages of Twisted is that it's a feature-rich suite of protocols which work together.  It's nice to have common documentation and testing standards applied to all of them.  (One day, after they've been maintained for another 10 years or so, maybe that'll even mean they all have good documentation and tests! :-)).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130605/808e35e5/attachment.html>

From free at 64studio.com  Wed Jun  5 13:13:02 2013
From: free at 64studio.com (Free Ekanayaka)
Date: Wed, 05 Jun 2013 21:13:02 +0200
Subject: [Twisted-Python] Testing AMP-based code
Message-ID: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>

Hi,

following up from ticket #6502, I'm looking for recommendations/best
practices for writing unit-tests for AMP-based code.

As described in the ticket, the issue I'm currently facing is that the
AMP implementation is subtly not re-entrant safe and doesn't work with a
synchronous transport, for example this code raises an exception:

http://twistedmatrix.com/trac/attachment/ticket/6502/example.py

I'm starting to think that the most appropriate testing strategy would
be to mock/stub AMP.callRemote (or the protocol class altogether)
instead of trying to use a fake transport.

Thoughts?

Cheers,

Free


From twisted-python at 2xlp.com  Thu Jun  6 10:08:59 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 6 Jun 2013 12:08:59 -0400
Subject: [Twisted-Python] github, again
In-Reply-To: <51AD8DF4.5050504@gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD8DF4.5050504@gmail.com>
Message-ID: <EFCD8A0F-ECB9-4EC4-8237-A7692FE263CD@2xlp.com>


On Jun 4, 2013, at 2:49 AM, tds333 at gmail.com wrote:

> Hi,
> 
> what about Bitbucket (www.bitbucket.org) and mercurial ?
> 
> Don't they provide the same features ?
> 
> I'm asking because we are in Python land. ;-)

BitBucket isn't as slick as GitHub.

Mercurial isn't as well known, and the storage isn't as optimal.

SqlAlchemy recently migrated from hg to git -- here is Mike Bayer's rationale:

	http://www.sqlalchemy.org/blog/#sqlalchemy-migrated-to-git

It's trivial to clone a repo with git.  Also, I believe that if you configure a working repository to follow all the upstream changes, you essentially have a full clone.  So if the primary ever went down, one of the package maintainers could instantly become the new upstream.

I use git+github for all my open source work, and subversion for private stuff -- only because i'm too lazy to set up a remote hg repo.  Git was hard to get used to, and can be difficult at times, but it's a significantly better experience.  The biggest win with git for me, is that you have offline commits.  I've found myself forced to be online for a svn commit too many times ( while restructuring projects ).  git is more flexible -- you can do everything locally and never have to push to the server until you're ready ( no more "part 1 of 3" repo commits ).  then you can squash all the commits into a single server push.

The code review process on git and github is great; and the fork + merge model is much easier than working with SVN. 

someone mentioned `rebase` and `squash`.  

these articles do a much better job at describing it than i can:  
	http://git-scm.com/book/en/Git-Branching-Rebasing
	http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html

in a nutshell, rebase allows you to start replaying commits onto a working copy.  you can then pick and choose which are kept, tossed, or merged.  it's basically a way to rewrite or replay history.  

the only downside to git, is that once something goes onto the server... it's there for good.  it's possible to rebase a repo back to a specific commit , then replay without specific commits, and "push -f" to overwrite the history... but if anyone updated against the server, those commits will come back and haunt you.  over and over and over again.  

there's also a great plugin called "git flow"  http://nvie.com/posts/a-successful-git-branching-model/    https://github.com/nvie/gitflow  

it's just some shell scripts that help automate how you organize your branches for fixing issues.





From p.mayers at imperial.ac.uk  Thu Jun  6 10:52:11 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 06 Jun 2013 17:52:11 +0100
Subject: [Twisted-Python] github, again
In-Reply-To: <EFCD8A0F-ECB9-4EC4-8237-A7692FE263CD@2xlp.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD8DF4.5050504@gmail.com> <EFCD8A0F-ECB9-4EC4-8237-A7692FE263CD@2xlp.com>
Message-ID: <51B0BE3B.8030106@imperial.ac.uk>

On 06/06/13 17:08, Jonathan Vanasco wrote:

> the only downside to git, is that once something goes onto the
> server... it's there for good.  it's possible to rebase a repo back
> to a specific commit , then replay without specific commits, and
> "push -f" to overwrite the history... but if anyone updated against
> the server, those commits will come back and haunt you.  over and
> over and over again.

Yes. Never do this. It's hateful to fix, and rude to contributors!

(Obviously not an issue if your git repo will just be a read-only copy 
of SVN used to drive git-based code review tools)


From twisted-python at 2xlp.com  Thu Jun  6 18:42:15 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 6 Jun 2013 20:42:15 -0400
Subject: [Twisted-Python] github, again
In-Reply-To: <51B0BE3B.8030106@imperial.ac.uk>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD8DF4.5050504@gmail.com> <EFCD8A0F-ECB9-4EC4-8237-A7692FE263CD@2xlp.com>
 <51B0BE3B.8030106@imperial.ac.uk>
Message-ID: <A7FFF03C-DE0E-497E-806A-61613D2482A6@2xlp.com>


On Jun 6, 2013, at 12:52 PM, Phil Mayers wrote:

> On 06/06/13 17:08, Jonathan Vanasco wrote:
> 
>> the only downside to git, is that once something goes onto the
>> server... it's there for good.  it's possible to rebase a repo back
>> to a specific commit , then replay without specific commits, and
>> "push -f" to overwrite the history... but if anyone updated against
>> the server, those commits will come back and haunt you.  over and
>> over and over again.
> 
> Yes. Never do this. It's hateful to fix, and rude to contributors!
> 
> (Obviously not an issue if your git repo will just be a read-only copy of SVN used to drive git-based code review tools)

It shouldn't ever happen in an Open Source project, or on "master" but in a corporate setting... you'd be surprised. 

	a - Someone accidentally commits and pushes a config file with credentials in it
	b - You have commits A,B,C,D,E.  D needs to be rebased out in order for a merge to successfully work.  You can't get rebase to work well, so you have to roll back to C, push -f, apply a diff from C-E ( which doesn't have D in it, all done by hand ), and then committed.  

Thankfully when someone brings this to you , you can say to your team "Ok.  everyone nuke your git repos and go to lunch.  i'll fix it for you".

That being said, i'm a HUGE fan of having an "upstream" repo that is only used for merging in changes, and everyone has their own fork to work on.   I'm not a fan of people working in branches on the 'source' at all.






From z858570636 at gmail.com  Thu Jun  6 21:24:07 2013
From: z858570636 at gmail.com (yuyan zhang)
Date: Fri, 7 Jun 2013 11:24:07 +0800
Subject: [Twisted-Python] A bug of the DNSDatagramProtocol
Message-ID: <CA+ggLOLLcZ+MPDy4bmL-KHxgvvq12HUVxfOyobvmrNSQ2XOVww@mail.gmail.com>

when i run the code:
        df = Deferred()
        name = Name('version.bind')
        axf = AXFRController(name,df)
        dns = DNSDatagramProtocol(axf)
        d = dns.query((ip,53),[Query('version.bind',TXT,CH)])
it raise the error :
Traceback (most recent call last):
  File "/usr/local/lib/python2.7/site-packages/twisted/python/log.py", line
73, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "/usr/local/lib/python2.7/site-packages/twisted/python/context.py",
line 118, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/usr/local/lib/python2.7/site-packages/twisted/python/context.py",
line 81, in callWithContext
    return func(*args,**kw)
  File
"/usr/local/lib/python2.7/site-packages/twisted/internet/posixbase.py",
line 614, in _doReadOrWrite
    why = selectable.doRead()
--- <exception caught here> ---
  File "/usr/local/lib/python2.7/site-packages/twisted/internet/udp.py",
line 149, in doRead
    self.protocol.datagramReceived(data, addr)
  File "/usr/local/lib/python2.7/site-packages/twisted/names/dns.py", line
1936, in datagramReceived
    self.controller.messageReceived(m, self, addr)
exceptions.TypeError: messageReceived() takes exactly 3 arguments (4 given)
Unhandled Error

and the I set the DNSDatagramProtocol.datagramReceived's last row
self.controller.messageReceived(m, self, addr)
to
self.controller.messageReceived(m, self)
it'ok!
And this is a bug????
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130607/f14ec76e/attachment.html>

From exarkun at twistedmatrix.com  Fri Jun  7 05:38:56 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 07 Jun 2013 11:38:56 -0000
Subject: [Twisted-Python] A bug of the DNSDatagramProtocol
In-Reply-To: <CA+ggLOLLcZ+MPDy4bmL-KHxgvvq12HUVxfOyobvmrNSQ2XOVww@mail.gmail.com>
References: <CA+ggLOLLcZ+MPDy4bmL-KHxgvvq12HUVxfOyobvmrNSQ2XOVww@mail.gmail.com>
Message-ID: <20130607113856.25989.1374273059.divmod.xquotient.64@top>

On 03:24 am, z858570636 at gmail.com wrote:
>when i run the code:
>        df = Deferred()
>        name = Name('version.bind')
>        axf = AXFRController(name,df)
>        dns = DNSDatagramProtocol(axf)
>        d = dns.query((ip,53),[Query('version.bind',TXT,CH)])
>it raise the error :
>Traceback (most recent call last):
>  File "/usr/local/lib/python2.7/site-packages/twisted/python/log.py", 
>line
>73, in callWithContext
>    return context.call({ILogContext: newCtx}, func, *args, **kw)
>  File "/usr/local/lib/python2.7/site- 
>packages/twisted/python/context.py",
>line 118, in callWithContext
>    return self.currentContext().callWithContext(ctx, func, *args, **kw)
>  File "/usr/local/lib/python2.7/site- 
>packages/twisted/python/context.py",
>line 81, in callWithContext
>    return func(*args,**kw)
>  File
>"/usr/local/lib/python2.7/site-packages/twisted/internet/posixbase.py",
>line 614, in _doReadOrWrite
>    why = selectable.doRead()
>--- <exception caught here> ---
>  File "/usr/local/lib/python2.7/site-packages/twisted/internet/udp.py",
>line 149, in doRead
>    self.protocol.datagramReceived(data, addr)
>  File "/usr/local/lib/python2.7/site-packages/twisted/names/dns.py", 
>line
>1936, in datagramReceived
>    self.controller.messageReceived(m, self, addr)
>exceptions.TypeError: messageReceived() takes exactly 3 arguments (4 
>given)
>Unhandled Error
>
>and the I set the DNSDatagramProtocol.datagramReceived's last row
>self.controller.messageReceived(m, self, addr)
>to
>self.controller.messageReceived(m, self)
>it'ok!
>And this is a bug????

Hello,

I tried turning your code into an <http://sscce.org/>:

    from __future__ import print_function

    from twisted.internet.defer import Deferred
    from twisted.names.dns import TXT, CH, Name, Query, 
DNSDatagramProtocol
    from twisted.names.client import AXFRController

    from twisted.internet.task import react

    def main(reactor):
        ip = '8.8.8.8'
        df = Deferred()
        name = Name('version.bind')
        axf = AXFRController(name,df)
        dns = DNSDatagramProtocol(axf)
        d = dns.query((ip,53),[Query('version.bind',TXT,CH)])
        d.addCallback(print)
        return d

    react(main, [])

But I wasn't able to reproduce the error you encountered, instead I get 
the output:

    <twisted.names.dns.Message instance at 0x18642d8>

Perhaps the error has something to do with how the DNS server responds. 
If so, can you expand this minimal example to include a server that 
sends a response that triggers the bug (Twisted Names itself can be used 
as such a server, or you could hard-code the response you're seeing 
locally)?  Alternatively if you could turn this into a unit test that 
doesn't actually interact with a network, that would also be great.

Thanks,
Jean-Paul


From tom.prince at ualberta.net  Sat Jun  8 10:07:03 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 08 Jun 2013 10:07:03 -0600
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <87r4gctwm0.fsf@loki.hocat.ca>

When I first saw this, I was excited at the possibility of moving to git
(although this doesn't affect me, as I've been using git exclusively for months
already). On the other hand, I'm cautious about moving our workflow to github.

Although being able to comment on the diff inline is very convenient, my
experience is that this encourages looking at changes in a line-by-line fashion,
rather than looking at the overall design.  find that having to compose the
entire review at once leads to a more thoughtful review. So, while it is
convenient, there is a cost to it as well.

Being able to see what comments have been addressed is handy, I usually find
myself opening all the hidden comments, either to see if the change made address
the comment or to provide more context on the current state of the change
(particularly if I wasn't the original reviewer).

While I understand the appeal of being able to merge with a single click (and
wouldn't be opposed to a tool that does this), I'm not sure that github's
implementation is desirable.  I think there is value in composing meaningful
commit messages, for commits to trunk. While github supports this, it doesn't
encourage it. (I've been looking through buildbot's logs recently, and most
commits to master have the message "Merge branch '<branch-name>' of
git://github.com/<user>/buildbot"." Certainly some of this is social, I don't
think github provides any tools to help enforce this.

I'm not entirely sure how the hybrid workflow would make things easier. It seems
like one would need to look at two places for comments rather than just one;
even if all the comments on the code itself are on github, one will still need
to look at the history of the ticket to see any discussion of the design or
other consideration. Potentially more, if more than one person has worked on a
branch; unless everybody involved can push to the same repo, only a single
person can add commits to a specific pull request. For core developers, this
could just be the main repo, but for non-core developers (or when a core
developer takes over from an outside contributor), there will necessarily be
multiple pull requests for a single change.

I wonder how much of the issue that github solves could be addressed by other
means? Forcing a build is now two clicks from the ticket page, and diffs one. I
just discovered https://github.com/Automattic/trac-code-comments-plugin which
allows inline commenting. We could implement a tool to merge to trunk with a
properly formated commit message from the web. There is, of course, the question
of whether it worth the effort to implement this ourselves, when github exists.
That consideration has to be tempered with the fact that github imposes
restrictions on our workflow that seem to run counter to the philosophy of
twisted development.

  Tom



From terry at jon.es  Sat Jun  8 17:41:40 2013
From: terry at jon.es (Terry Jones)
Date: Sun, 9 Jun 2013 00:41:40 +0100
Subject: [Twisted-Python] github, again
In-Reply-To: <87r4gctwm0.fsf@loki.hocat.ca>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <87r4gctwm0.fsf@loki.hocat.ca>
Message-ID: <CACqnu4WWScaJPrz+f6T342y6YrEmjgTDktrqdR_30vQi0XL7yQ@mail.gmail.com>

Hi Tom

Here are some comments on your thoughts (again, I'm no expert or authority).

On Sat, Jun 8, 2013 at 5:07 PM, Tom Prince <tom.prince at ualberta.net> wrote:

> Although being able to comment on the diff inline is very convenient, my
> experience is that this encourages looking at changes in a line-by-line
> fashion,
> rather than looking at the overall design.  find that having to compose the
> entire review at once leads to a more thoughtful review. So, while it is
> convenient, there is a cost to it as well.
>

I agree with almost all of this, but not so much with the "cost" part. I
know there are many different kinds of tickets, but the majority (that I
see) fall into just a few categories that I have fairly well established
ways of working on (as a reviewer). 1. trivial fixes, which I tend to
review entirely in github. They usually have small/simple changes to
existing code and a small number of entirely new tests.  2. Addition of new
functionality that's not tirivial. These tend to involve mainly new code
and new tests, and again I'll usually do the whole review in github. 3.
More complicated changes that have required thought about the existing
code, its internal interactions, and its tests. I do superficial work on
these using github (commenting on style, suggesting alternate approaches to
local pieces of code, etc). Github makes this process hugely simpler and
faster. But in this case I also pull down the branch and git diff it
manually as well as going into files in the editor to consider changes more
carefully or to search for residual methods that may no longer be used or
method uses which are now no longer defined, etc. I put the result of this
reviewing into the Discussion tab in github.  In all cases I make sure to
pull the branch locally and run the tests (except when I'm SURE I don't
need to, which is when there is ALWAYS a test failure :-)).

I.e., (summarizing/repeating myself) most of the time I do reviewing in
github and it's a clear win (simple / in context / no need to refer to the
code line or cut & paste, etc). But as you say some reviewing needs much
more care and thought, done with an editor, with grep, etc. The result of
that can go into the github discussion.


> While I understand the appeal of being able to merge with a single click
> (and
> wouldn't be opposed to a tool that does this), I'm not sure that github's
> implementation is desirable.  I think there is value in composing
> meaningful
> commit messages, for commits to trunk. While github supports this, it
> doesn't
> encourage it. (I've been looking through buildbot's logs recently, and most
> commits to master have the message "Merge branch '<branch-name>' of
> git://github.com/<user>/buildbot"." Certainly some of this is social, I
> don't
> think github provides any tools to help enforce this.
>

Right, this has to be done by convention. I find it's helpful to write the
issue description with an eye towards the future merging and then to cut &
paste the issue description into the merge message and edit it before
merging. If you're conscious of that workflow you can write an issue
description whose first paragraph can easily become the merge description.
We also put the names (you can use @name) of the reviewers into the merge
(on a separate line, like "R: @name1 @name2") as well as the Fixes #NNNN
line.  Often the merge descriptions would be just one line, as it's easy to
be (or become) lazy.


> I'm not entirely sure how the hybrid workflow would make things easier. It
> seems
> like one would need to look at two places for comments rather than just
> one;
> even if all the comments on the code itself are on github, one will still
> need
> to look at the history of the ticket to see any discussion of the design or
> other consideration.


Do you mean 2 places within the one pull request?  I.e., the Files Changed
and the Discussion tabs?  If so, then I understand. I got used to that
pretty quickly. You can find more substantive discussion in one place
(including reviewers giving +1 or saying they need more time or asking if a
pull request should be withdrawn etc) and code-specific comments in the
Files Changed section.   I find it very useful in the latter if the
original author makes sure they follow up on each suggestion in the Files
Changed section to say "Done" or "Wont do this...." etc.  This helps a
returning reviewer to see that requested changes have been made without
needing to look at the code again.


> Potentially more, if more than one person has worked on a
> branch; unless everybody involved can push to the same repo, only a single
> person can add commits to a specific pull request.


But anyone can comment / review.  And if you happen to have code you want
to add to the branch but you don't have the right to push into that branch
(which we do only rarely), you can just make your own branch, submit a pull
request into the branch you're reviewing, and mention that in the review.
(Unless the Twisted process has changed, I think adding code to a branch
would then rule you out as an ongoing reviewer.)


> For core developers, this
> could just be the main repo, but for non-core developers (or when a core
> developer takes over from an outside contributor), there will necessarily
> be
> multiple pull requests for a single change.
>

I don't think this is the right way to do things.  It makes more sense that
there is one pull request. Those who can/want/dare can push into its
branch. Those who cant but want to suggest other code can suggest their
code is pulled into the branch in question.  Others can just put code into
their reviews - I do that often, just copy a chunk of Python, wrap it in
```python  .... ``` and make a few suggested edits.


> I wonder how much of the issue that github solves could be addressed by
> other
> means? Forcing a build is now two clicks from the ticket page, and diffs
> one. I
> just discovered https://github.com/Automattic/trac-code-comments-pluginwhich
> allows inline commenting. We could implement a tool to merge to trunk with
> a
> properly formated commit message from the web. There is, of course, the
> question
> of whether it worth the effort to implement this ourselves, when github
> exists.
>

I don't think it makes sense to try writing these things. Github is great
and it moves so quickly. It's not perfect and it does leave a lot of things
to coding team convention, but it's very good. In my (painful) experience,
it's rarely worth writing your own stuff in a situation like this and
missing out on all the other goodness that is rapidly making its way into
the mainstream heavily used and very actively developed tools.


> That consideration has to be tempered with the fact that github imposes
> restrictions on our workflow that seem to run counter to the philosophy of
> twisted development.


I'm not sure what these are.  But, I'm barely involved in Twisted
development, so it's likely just ignorance.

Thanks for the comments, mine are just my own small sample experiences and
are probably sub-optimal and/or under-informed etc.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130609/1990005d/attachment.html>

From meejah at meejah.ca  Sat Jun  8 23:23:57 2013
From: meejah at meejah.ca (meejah)
Date: Sun, 09 Jun 2013 09:23:57 +0400
Subject: [Twisted-Python] github, again
In-Reply-To: <20130605075607.GB22389@debian> (Jonathan Ballet's message of
 "Wed, 5 Jun 2013 09:56:09 +0200")
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>
 <634914A010D0B943A035D226786325D4422DC21803@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4VGAED4DVy2YEeKEbNWkGwvEU78XA9FVZJqejABSvUsvw@mail.gmail.com>
 <20130605075607.GB22389@debian>
Message-ID: <87obbf6emq.fsf@meejah.ca>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jonathan Ballet <jon at multani.info> writes:
> On Tue, Jun 04, 2013 at 09:55:19PM +0100, Terry Jones wrote:

>> But, I believe this is what git rebase is mainly used for. You can
>> rebase your branch against an updated master and (I'm guessing)
>> make your changes look like a single diff. Some people don't like
>> that as it changes history, others do like it and say yes, that's
>> the point - clean up the history so the commit log isn't full of
>> tiny changes that were all made in order to effect some change
>> (i.e., address a given ticket/issue).

> This is actually called a "squash" in Git terminology - Git has an
> option called "--squash" for the "merge" command which precisely do
> that.

You *can* use "git rebase" to re-write a branch to look like all the
commits were in one (or be more selective, like take one out and
squash three together) -- or you can use the --squash option Jonathan
mentions during an actual merge. Basically, you're rebasing a branch
onto itself -- instead of using rebase to change the branch
point. This latter is a much nicer replacement for what people using
Subversion would call "mering trunk back into my branch" and IMO
more-closely matches what you usually mean: please pretend I branched
off trunk more recently, as I'd really like all those changes now so I
can fix the conflicts...

The rebase way of squashing does re-write the commits. For fun times,
look into "git rebase --interactive" (or as this guy calls it, ``a bit
like git commit --amend hopped up on acid and holding a chainsaw''):

http://tomayko.com/writings/the-thing-about-git

- -- 
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)

iQEcBAEBAgAGBQJRtBFwAAoJEJ0UOBRRgEVQpqYH/366F/9a8GkMxdnqItRTghZY
U/3AgjmYFpZmv14TM06QWAoX9RedzwASOq+x2J8Fiin+u2HPp8MUhrd0kcV7mvET
liyVnYA1v3xKParyS2mM0se0zc2pzQ6QileFYVBXMsmHhZndUPj7AlvNltDD9cXO
UJ7Ex0/eQQbKAybzbY5rSmNuYj01I0FNtfrfSvAHL1I2U4GtwH55lR5GTdEe2agk
WRFyqZgMDDe1e2bWJOYxoA7ZRUKdpgTUXKYWG4W/8uX4YrjBPkIQEZtL5Xu3qAGv
qNfAMhGkN0OLdBhhGpDsJrpsfTaSXW4CwlJSUZsg6fLSAqfe9lF0b0A5iNAscuY=
=K6gl
-----END PGP SIGNATURE-----


From luke at hybridcluster.com  Mon Jun 10 16:31:35 2013
From: luke at hybridcluster.com (Luke Marsden)
Date: Mon, 10 Jun 2013 23:31:35 +0100
Subject: [Twisted-Python] HybridCluster raises $1.5m;
	we are hiring great Twisted devs
Message-ID: <20130610223135.4935820.9216.16952@hybridcluster.com>

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130610/602933ee/attachment.html>

From sajattack at gmail.com  Mon Jun 10 22:38:02 2013
From: sajattack at gmail.com (Paul Sajna)
Date: Mon, 10 Jun 2013 21:38:02 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
	server - ports not closing
Message-ID: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>

I'm having a bit of trouble setting up an ssh-type server with twisted.
When I shutdown or restart the server, the port remains open. Please have a
look at my stackoverflow question. Thank you.

http://stackoverflow.com/questions/16379504/port-object-has-no-attribute-socket/16380253?noredirect=1#comment23490486_16380253
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130610/85a8fe94/attachment.html>

From glyph at twistedmatrix.com  Mon Jun 10 23:46:33 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Jun 2013 22:46:33 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
	server - ports not closing
In-Reply-To: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
Message-ID: <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>


On Jun 10, 2013, at 9:38 PM, Paul Sajna <sajattack at gmail.com> wrote:

> I'm having a bit of trouble setting up an ssh-type server with twisted. When I shutdown or restart the server, the port remains open. Please have a look at my stackoverflow question. Thank you.
> 
> http://stackoverflow.com/questions/16379504/port-object-has-no-attribute-socket/16380253?noredirect=1#comment23490486_16380253

Hi Paul,

I'm sorry you're having a hard time working out how to do what you want with Twisted, but there's already an answer on this question.

The answer tells you to stop using threads, but you don't seem to have stopped using threads.  Add an example that doesn't use threads, or try the example I put in my answer.

Also, Twisted 9.0 is 5 years old at this point.  Many, many bugs have been fixed since then.  You may want to upgrade to a more recent version.

I'm still happy to help you with this if you can explain what, exactly, you still don't understand.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130610/9da01eec/attachment.html>

From sajattack at gmail.com  Tue Jun 11 19:20:41 2013
From: sajattack at gmail.com (Paul Sajna)
Date: Tue, 11 Jun 2013 18:20:41 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
 server - ports not closing
In-Reply-To: <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
Message-ID: <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>

I continue to use threads because my application uses a GUI that becomes
blocked when the server starts. Also, I am now having a problem where port
is undefined until the server is stopped and started again.


On 10 June 2013 22:46, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 10, 2013, at 9:38 PM, Paul Sajna <sajattack at gmail.com> wrote:
>
> I'm having a bit of trouble setting up an ssh-type server with twisted.
> When I shutdown or restart the server, the port remains open. Please have a
> look at my stackoverflow question. Thank you.
>
>
> http://stackoverflow.com/questions/16379504/port-object-has-no-attribute-socket/16380253?noredirect=1#comment23490486_16380253
>
>
> Hi Paul,
>
> I'm sorry you're having a hard time working out how to do what you want
> with Twisted, but there's already an answer on this question.
>
> The answer tells you to stop using threads, but you don't seem to have
> stopped using threads.  Add an example that doesn't use threads, or try the
> example I put in my answer.
>
> Also, Twisted 9.0 is 5 years old at this point.  Many, many bugs have been
> fixed since then.  You may want to upgrade to a more recent version.
>
> I'm still happy to help you with this if you can explain what, exactly,
> you still don't understand.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130611/89eab185/attachment.html>

From sajattack at gmail.com  Tue Jun 11 19:35:12 2013
From: sajattack at gmail.com (Paul Sajna)
Date: Tue, 11 Jun 2013 18:35:12 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
 server - ports not closing
In-Reply-To: <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
Message-ID: <CAGNi6+K5cxEcaGwcoD6rsL6_GEXw8V2LYCb5tE0i53x=MdK1-w@mail.gmail.com>

Also, the code shown in the SO post causes the GUI to freeze when
attempting to stop the server.


On 11 June 2013 18:20, Paul Sajna <sajattack at gmail.com> wrote:

> I continue to use threads because my application uses a GUI that becomes
> blocked when the server starts. Also, I am now having a problem where port
> is undefined until the server is stopped and started again.
>
>
> On 10 June 2013 22:46, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On Jun 10, 2013, at 9:38 PM, Paul Sajna <sajattack at gmail.com> wrote:
>>
>> I'm having a bit of trouble setting up an ssh-type server with twisted.
>> When I shutdown or restart the server, the port remains open. Please have a
>> look at my stackoverflow question. Thank you.
>>
>>
>> http://stackoverflow.com/questions/16379504/port-object-has-no-attribute-socket/16380253?noredirect=1#comment23490486_16380253
>>
>>
>> Hi Paul,
>>
>> I'm sorry you're having a hard time working out how to do what you want
>> with Twisted, but there's already an answer on this question.
>>
>> The answer tells you to stop using threads, but you don't seem to have
>> stopped using threads.  Add an example that doesn't use threads, or try the
>> example I put in my answer.
>>
>> Also, Twisted 9.0 is 5 years old at this point.  Many, many bugs have
>> been fixed since then.  You may want to upgrade to a more recent version.
>>
>> I'm still happy to help you with this if you can explain what, exactly,
>> you still don't understand.
>>
>> -glyph
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130611/63dbed9f/attachment.html>

From glyph at twistedmatrix.com  Wed Jun 12 01:06:11 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 12 Jun 2013 00:06:11 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
	server - ports not closing
In-Reply-To: <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
Message-ID: <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>


On Jun 11, 2013, at 6:20 PM, Paul Sajna <sajattack at gmail.com> wrote:

> I continue to use threads because my application uses a GUI that becomes blocked when the server starts. Also, I am now having a problem where port is undefined until the server is stopped and started again.

Paul,

Until you stop using threads in this manner, you are using threads in a totally unsupported way and Twisted will be broken.

Twisted supports most GUIs directly though; there is generally no need to use threads.  What GUI library are you using?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130612/2d0bba4f/attachment.html>

From twisted-python at 2xlp.com  Wed Jun 12 11:15:54 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 12 Jun 2013 13:15:54 -0400
Subject: [Twisted-Python] reload / restart best practices ?
In-Reply-To: <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
Message-ID: <72A98F3B-CD60-4930-91E9-8FC7A48B3D22@2xlp.com>


I have a twisted application that seems to occasionally jam up.  It dispatches a lot of work via DeferToThread, and in some instances it appears that the specific thread pool locks up ( haven't found out why yet ).  I'm fairly certain that the problem is stemming from getting HTTP documents ( there's a web indexing component and 3 external api tools ).

An acceptable fix for now would be periodic restarts ( daily or even weekly would more than suffice at this point ). 

Does anyone have a suggestion on how to best approach this ?  I saw some old discussions about ideas for implementing graceful restarts via autoload, and other stuff.   Because my application might be in mid-conversation with external APIs , I don't want to kill the process and respawn.  I'd like them to finish , and shutdown/restart N seconds later ( assuming that I wouldn't be able to fully shutdown because of an issue with a locked thread ).  

From twisted-python at 2xlp.com  Wed Jun 12 12:40:29 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 12 Jun 2013 14:40:29 -0400
Subject: [Twisted-Python] reload / restart best practices ?
In-Reply-To: <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
Message-ID: <CAA283E2-B64E-47CC-B7E4-C5FA00D1E855@2xlp.com>


I have a twisted application that seems to occasionally jam up.  It dispatches a lot of work via DeferToThread, and in some instances it appears that the specific thread pool locks up ( haven't found out why yet ).  I'm fairly certain that the problem is stemming from getting HTTP documents ( there's a web indexing component and 3 external api tools ).

An acceptable fix for now would be periodic restarts ( daily or even weekly would more than suffice at this point ). 

Does anyone have a suggestion on how to best approach this ?  I saw some old discussions about ideas for implementing graceful restarts via autoload, and other stuff.   Because my application might be in mid-conversation with external APIs , I don't want to kill the process and respawn.  I'd like them to finish , and shutdown/restart N seconds later ( assuming that I wouldn't be able to fully shutdown because of an issue with a locked thread ).  

From sajattack at gmail.com  Wed Jun 12 13:58:28 2013
From: sajattack at gmail.com (Paul Sajna)
Date: Wed, 12 Jun 2013 12:58:28 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
 server - ports not closing
In-Reply-To: <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
Message-ID: <CAGNi6+KAynwxi77BXqFQW45G9=MLmNeD+w_eWNwt8X87_AADug@mail.gmail.com>

I'm using Tkinter. When I do the reactor.listenTCP(), the server takes over
the main thread and the GUI freezes. Could you help me craft a GUI-safe
solution?


On 12 June 2013 00:06, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 11, 2013, at 6:20 PM, Paul Sajna <sajattack at gmail.com> wrote:
>
> I continue to use threads because my application uses a GUI that becomes
> blocked when the server starts. Also, I am now having a problem where port
> is undefined until the server is stopped and started again.
>
>
> Paul,
>
> Until you stop using threads in this manner, you are using threads in a
> totally unsupported way and Twisted will be broken.
>
> Twisted supports most GUIs directly though; there is generally no need to
> use threads.  What GUI library are you using?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130612/fce71c6e/attachment.html>

From _ at lvh.io  Wed Jun 12 14:03:43 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 12 Jun 2013 22:03:43 +0200
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
 server - ports not closing
In-Reply-To: <CAGNi6+KAynwxi77BXqFQW45G9=MLmNeD+w_eWNwt8X87_AADug@mail.gmail.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
 <CAGNi6+KAynwxi77BXqFQW45G9=MLmNeD+w_eWNwt8X87_AADug@mail.gmail.com>
Message-ID: <CAE_Hg6YsqP_VEKFGmbBux+48=dhqEQNOrQJhM_7HEdQJeebMXg@mail.gmail.com>

Hi Paul

The documentation covers how to use Twisted with Tk (and many other event
loops). Here's the link you want:
https://twistedmatrix.com/documents/current/core/howto/choosing-reactor.html#auto16

Hope that helps :)
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130612/2be9fdaf/attachment.html>

From glyph at twistedmatrix.com  Wed Jun 12 14:31:55 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 12 Jun 2013 13:31:55 -0700
Subject: [Twisted-Python] reload / restart best practices ?
In-Reply-To: <CAA283E2-B64E-47CC-B7E4-C5FA00D1E855@2xlp.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
 <CAA283E2-B64E-47CC-B7E4-C5FA00D1E855@2xlp.com>
Message-ID: <FF4BEB18-5277-4C04-A3C5-492926D863CA@twistedmatrix.com>


On Jun 12, 2013, at 11:40 AM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:

> Does anyone have a suggestion on how to best approach this ?  I saw some old discussions about ideas for implementing graceful restarts via autoload, and other stuff.

I'm not sure what "autoload" is.  I am assuming it's some kind of auto-re-loading technology though.

> Because my application might be in mid-conversation with external APIs , I don't want to kill the process and respawn.

You do want to re-start your process.  What you're diagnosing is some weird, unknown thread/process interaction and unless you get a clean slate, you don't know what is happening.

You may not want to do so immediately, though, since, as you say:

> I'd like them to finish , and shutdown/restart N seconds later ( assuming that I wouldn't be able to fully shutdown because of an issue with a locked thread ).  

The issue is with letting them finish.  In order to accomplish this, you should write IService implementations that have stopService methods that, when called, will wait for any operations in flight associated with that service.

Once everything is quiesced, you can re-exec ([sys.executable] + sys.argv) and that ought to result in the same process starting up again.  If you've done the appropriate thing and made all your stopService methods wait for their operations to complete, then waiting for them all to complete is just putting them all into a MultiService, calling stopService() on that MultiService, and adding a callback/errback to the Deferred it returns which calls os.exec.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130612/829acbd0/attachment.html>

From twisted-python at 2xlp.com  Wed Jun 12 14:40:08 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 12 Jun 2013 16:40:08 -0400
Subject: [Twisted-Python] reload / restart best practices ?
In-Reply-To: <FF4BEB18-5277-4C04-A3C5-492926D863CA@twistedmatrix.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
 <CAA283E2-B64E-47CC-B7E4-C5FA00D1E855@2xlp.com>
 <FF4BEB18-5277-4C04-A3C5-492926D863CA@twistedmatrix.com>
Message-ID: <7089AB26-9DBC-482F-8187-21F3DB898188@2xlp.com>


On Jun 12, 2013, at 4:31 PM, Glyph wrote:

> I'm not sure what "autoload" is.  I am assuming it's some kind of auto-re-loading technology though.

The earlier discussions talked about Django's autoload, which reloads the entire process on a config file change.

> You do want to re-start your process.  What you're diagnosing is some weird, unknown thread/process interaction and unless you get a clean slate, you don't know what is happening.
> 
> You may not want to do so immediately, though, since, as you say:

Correct on both accounts.  I don't want to kill the current process while it's talking to an API.  I just want it to not talk to any additional APIs, then kill the process a bit later.

>> I'd like them to finish , and shutdown/restart N seconds later ( assuming that I wouldn't be able to fully shutdown because of an issue with a locked thread ).  
> 
> The issue is with letting them finish.  In order to accomplish this, you should write IService implementations that have stopService methods that, when called, will wait for any operations in flight associated with that service.
> 
> Once everything is quiesced, you can re-exec ([sys.executable] + sys.argv) and that ought to result in the same process starting up again.  If you've done the appropriate thing and made all your stopService methods wait for their operations to complete, then waiting for them all to complete is just putting them all into a MultiService, calling stopService() on that MultiService, and adding a callback/errback to the Deferred it returns which calls os.exec.

ok great !  I'll look into StopService and IService tomorrow !

thanks a ton.  that's pretty much what i want/need.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130612/fd6656c6/attachment.html>

From naveenm at enthought.com  Wed Jun 12 14:56:22 2013
From: naveenm at enthought.com (Naveen Michaud-Agraw)
Date: Wed, 12 Jun 2013 16:56:22 -0400
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
	server - ports not closing
In-Reply-To: <CAGNi6+KAynwxi77BXqFQW45G9=MLmNeD+w_eWNwt8X87_AADug@mail.gmail.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
 <CAGNi6+KAynwxi77BXqFQW45G9=MLmNeD+w_eWNwt8X87_AADug@mail.gmail.com>
Message-ID: <A6AB2177-502E-4BE8-9177-A0AEC6775FA7@enthought.com>

Hi Paul,

Have you tried the solution listed here:

http://twistedmatrix.com/documents/13.0.0/core/howto/choosing-reactor.html#auto16

With this approach, twisted would manage tkinter and you won't block on any twisted API calls.

Sent from my iPhone

On Jun 12, 2013, at 3:58 PM, Paul Sajna <sajattack at gmail.com> wrote:

> I'm using Tkinter. When I do the reactor.listenTCP(), the server takes over the main thread and the GUI freezes. Could you help me craft a GUI-safe solution?
> 
> 
> On 12 June 2013 00:06, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> On Jun 11, 2013, at 6:20 PM, Paul Sajna <sajattack at gmail.com> wrote:
>> 
>>> I continue to use threads because my application uses a GUI that becomes blocked when the server starts. Also, I am now having a problem where port is undefined until the server is stopped and started again.
>> 
>> Paul,
>> 
>> Until you stop using threads in this manner, you are using threads in a totally unsupported way and Twisted will be broken.
>> 
>> Twisted supports most GUIs directly though; there is generally no need to use threads.  What GUI library are you using?
>> 
>> -glyph
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130612/23f1710e/attachment-0001.html>

From terry at jon.es  Wed Jun 12 15:05:33 2013
From: terry at jon.es (Terry Jones)
Date: Wed, 12 Jun 2013 22:05:33 +0100
Subject: [Twisted-Python] reload / restart best practices ?
In-Reply-To: <7089AB26-9DBC-482F-8187-21F3DB898188@2xlp.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
 <CAA283E2-B64E-47CC-B7E4-C5FA00D1E855@2xlp.com>
 <FF4BEB18-5277-4C04-A3C5-492926D863CA@twistedmatrix.com>
 <7089AB26-9DBC-482F-8187-21F3DB898188@2xlp.com>
Message-ID: <CACqnu4VA20iEj08h8OD+wbmFpjrJCh+Ed7m8-DBU_ZTmRnMRqA@mail.gmail.com>

Hi Jonathan

You might also find something like this useful:
http://twistedmatrix.com/pipermail/twisted-python/2009-December/021107.html

Optionally, it would be easy to add a timeout value to the class that could
cancel outstanding deferreds after a certain amount of time and then fire
all the waiters.

Terry



On Wed, Jun 12, 2013 at 9:40 PM, Jonathan Vanasco
<twisted-python at 2xlp.com>wrote:

>
> On Jun 12, 2013, at 4:31 PM, Glyph wrote:
>
> I'm not sure what "autoload" is.  I am assuming it's some kind of
> auto-re-loading technology though.
>
>
> The earlier discussions talked about Django's autoload, which reloads the
> entire process on a config file change.
>
> You *do* want to re-start your process.  What you're diagnosing is some
> weird, unknown thread/process interaction and unless you get a clean slate,
> you don't know what is happening.
>
> You may not want to do so *immediately*, though, since, as you say:
>
>
> Correct on both accounts.  I don't want to kill the current process while
> it's talking to an API.  I just want it to not talk to any additional APIs,
> then kill the process a bit later.
>
> I'd like them to finish , and shutdown/restart N seconds later ( assuming
> that I wouldn't be able to fully shutdown because of an issue with a locked
> thread ).
>
>
> The issue is with letting them finish.  In order to accomplish this, you
> should write IService implementations that have stopService methods that,
> when called, will wait for any operations in flight associated with that
> service.
>
> Once everything is quiesced, you can re-exec ([sys.executable] + sys.argv)
> and that ought to result in the same process starting up again.  If you've
> done the appropriate thing and made all your stopService methods wait for
> their operations to complete, then waiting for them all to complete is just
> putting them all into a MultiService, calling stopService() on that
> MultiService, and adding a callback/errback to the Deferred it returns
> which calls os.exec.
>
>
> ok great !  I'll look into StopService and IService tomorrow !
>
> thanks a ton.  that's pretty much what i want/need.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130612/01e634d7/attachment.html>

From exarkun at twistedmatrix.com  Wed Jun 12 17:16:12 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 12 Jun 2013 23:16:12 -0000
Subject: [Twisted-Python] Testing AMP-based code
In-Reply-To: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
Message-ID: <20130612231612.5484.1361672252.divmod.xquotient.46@top>

On 5 Jun, 07:13 pm, free at 64studio.com wrote:
>Hi,
>
>following up from ticket #6502, I'm looking for recommendations/best
>practices for writing unit-tests for AMP-based code.
>
>As described in the ticket, the issue I'm currently facing is that the
>AMP implementation is subtly not re-entrant safe and doesn't work with 
>a
>synchronous transport, for example this code raises an exception:
>
>http://twistedmatrix.com/trac/attachment/ticket/6502/example.py
>
>I'm starting to think that the most appropriate testing strategy would
>be to mock/stub AMP.callRemote (or the protocol class altogether)
>instead of trying to use a fake transport.
>
>Thoughts?

I think this is thinking in the right direction.  Twisted generally 
tries to be responsible for testing its own code, and the serialization 
from commands to bytes (and the reverse) that AMP does is part of 
Twisted, so you should really be free from the burden of testing that 
that stuff works.

One thing it's worth noticing is that the AMP class itself contains very 
little code.  Instead, it inherits most functionality from a few base 
classes.  It's worth learning about the division of responsibility 
between these classes because they can be helpful in writing cleaner AMP 
code and - relevant to this topic - writing AMP unit tests.

One of the base classes, BinaryBoxProtocol, is almost entirely concerned 
with serialization logic.  You can probably ignore this one entirely to 
begin with (although consider the consequences of 
serialization/deserialization living in this one class, independent of 
the rest of the protocol logic: perhaps you want to exchange AMP 
commands with a web browser and would find JSON an easier format to work 
with than AMP's int16 string scheme... etc).

Next, BoxDispatcher.  This one is what actually implements `callRemote` 
and the reverse - ampBoxReceived, turning an AMP box (already parsed), 
into an incoming method call or the result of a previous outgoing method 
call.  It operates on locator (to look up how to handle incoming method 
calls) and a box sender (to send out boxes representing method calls or 
responses).  It doesn't know about the network, so your box sender can 
be a purely in-memory thing, implementing some box handling logic purely 
as Python code and no I/O.

As far as the locator goes, if you want the standard 
`@SomeCommand.responder` functionality, then you can easily get this by 
re-using the next base class of AMP, CommandLocator.  This one's pretty 
straight-forward: subclass it and those decorators will work for you.

Ignore the last one, SimpleStringLocator, it's for extremely old-style 
AMP code that no one should be writing anymore.

So this all means that your application logic can all live on a 
CommandLocator subclass.  When you really want to put this on an AMP 
server, you can hook an AMP instance up to your CommandLocator subclass 
(AMP takes a locator as an __init__ argument).  When you want to test 
your command implementations, you can hook the CommandLocator up to a 
BoxDispatcher and a box sender and throw boxes straight at it with no 
network interation.

Some pieces are probably still missing from the public API - for 
example, you do want to test that your objects all get properly 
serialized and deserialized through AMP, particularly if you're 
implementing custom Argument types.  There are some private APIs, 
_objectsToStrings and _stringsToObjects mostly, that really help with 
testing this, and we should think about how to expose this functionality 
publically.  Also, we should document this whole pile of stuff.  Maybe 
you'd be interested in writing something up after you've had a chance to 
play with these ideas?

Jean-Paul


From glyph at twistedmatrix.com  Wed Jun 12 23:00:24 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 12 Jun 2013 22:00:24 -0700
Subject: [Twisted-Python] Testing AMP-based code
In-Reply-To: <20130612231612.5484.1361672252.divmod.xquotient.46@top>
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
 <20130612231612.5484.1361672252.divmod.xquotient.46@top>
Message-ID: <2CF3114B-3777-4B3B-9796-0D03D322225F@twistedmatrix.com>


On Jun 12, 2013, at 4:16 PM, exarkun at twistedmatrix.com wrote:

[snip]

> So this all means that your application logic can all live on a CommandLocator subclass.  When you really want to put this on an AMP server, you can hook an AMP instance up to your CommandLocator subclass (AMP takes a locator as an __init__ argument).  When you want to test your command implementations, you can hook the CommandLocator up to a BoxDispatcher and a box sender and throw boxes straight at it with no network interation.

Thanks a lot for this description.  Someone (maybe you if you're feeling generous, or someone else if they'd like to volunteer) should take most of the prose from this post, edit it a little bit to fit into the flow, and use it to expand the somewhat bare explanation of these concepts in <http://twistedmatrix.com/documents/current/core/howto/amp.html>.

> Some pieces are probably still missing from the public API - for example, you do want to test that your objects all get properly serialized and deserialized through AMP, particularly if you're implementing custom Argument types.  There are some private APIs, _objectsToStrings and _stringsToObjects mostly, that really help with testing this, and we should think about how to expose this functionality publically.  Also, we should document this whole pile of stuff.  Maybe you'd be interested in writing something up after you've had a chance to play with these ideas?

It would also be nice if someone could find a link to the tickets for this functionality - or, file one, if none exist.

Again, thanks a lot for the great explanation, JP.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130612/0cc20665/attachment.html>

From glyph at twistedmatrix.com  Thu Jun 13 16:14:36 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 13 Jun 2013 15:14:36 -0700
Subject: [Twisted-Python] logging
Message-ID: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>

Hello everybody. Today I'd like to talk about everyone's favorite subsystem within Twisted: logging.

There are a number of problems with Twisted's logging system.

The general theme of these problems is that Twisted log system was designed with some intended use-cases in mind, but its implementation was stopped halfway through and none of those use-cases were really well satisfied.

At various conferences, and in person at various times, we've gotten together to express frustration at the logging system, but I don't think that the problems with it have ever been really thoroughly written down.

Wilfredo has been working on logging here: http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py. This began as an attempt to just address some issues with our own logging wrappers, but has been growing into a design that is more fully capable of replacing logging within Twisted wholesale. I hope one of us can contribute it to Twisted soon, but in the meanwhile, please feel free to provide feedback - hopefully if some people can provide a bit of informal feedback now, the formal review process can be shorter and more pleasant :).

Now, back to some explanation of the current problems.

The main intended use-case for Twisted's logging system is to avoid doing unnecessary work in the case where it is not required. One of the reasons we even still have our own logging system is that the stdlib logging module is notorious for doing too much work per log message, and doing it too prematurely.

One aspect of this is that logging would just use the existing 'kwargs' dictionary as its message type, and not actually do any formatting; that is, string-copying, until the message was logged. On Python 1.5.2, that meant no need to allocate anything since the interpreter needed a dict for the kwargs anyway! Woohoo premature optimization! Obviously, at least on PyPy, that optimization is no longer relevant (and we don't have performance tests for logging anyway). But, I don't think we should change that because a dict is still a good object for the sort of extensibility that log messages need.

But, we have never written any filtering logic, nor have we instrumented any of our existing log messages with formatting stuff. Every message with a format string just goes to the log.

For a long time, there's been consensus among at least a few core Twisted developers that log messages ought to be specified in terms of a format message and several relevant keyword arguments, so that tools can extract the values of the keyword arguments without parsing ad-hoc messages or using regexes. In other words, like this:

log.msg(format="Foo happened. Relevant information includes: "
                "bar=%(bar)s baz=%(baz)s boz=%(boz)s",
                bar=bar, baz=baz, boz=boz)

Yet, nothing within Twisted itself does this. There's a bit of a chicken and egg problem: since we have no tools for filtering log messages based on their structured values, there's no obvious motivation to break the structured contents of a message out into those values. And since no messages break out their values into nice structured fields, there's no motivation to write filtering tools that inspect those fields.

And, even if we did have filtering, we don't have a facility to easily defer work. You could, of course, just do something like this:

class GenerateOnlyIfNeeded(object):
    def __str__(self):
        return doSomethingExpensiveToGenerateAString()
log.msg(format="debugging: %(expensive)s",
        logLevel=debug, expensive=GenerateOnlyIfNeeded())

But that's an awful lot of thinking for a single log message, not to mention the temporary class and the method you needed to allocate. Such deferral of work should be easy.

And, speaking of the things that one might filter on, log messages don't typically include information about what module and class they're from; or, for that matter, what object is logging them. This information should be included by default in idiomatic usage of the API, so that a filtering system can inspect them.

Another reason that we - both Twisted itself and Twisted users - don't typically pass keyword arguments and a format string, is that the default argument to msg is, simply, a "message". (It also does a dumb thing where it tries to emulate the argument-passing convention of 'print' and stringify its arguments and join them with spaces; we should get rid of that.) Instead, that argument always ought to be a format string.

We should also have a log writer within Twisted that preserves structure, and dumps the logs using JSON (or similar, perhaps more than one of these; AMP would be another good thing).

It's also not possible to use format strings when you are writing an error log message in Twisted; instead, 'why' is treated completely differently than 'message'. The 'why' argument to 'err', which should be mandatory (what were you doing when you tried to log a message?) is optional, which means that error messages are even more inscrutable.

The portions of the dictionary used by the logging system are not namespaced in any way, even by convention. Therefore it's easy for a user to conflict with the keys used by the system. If users of Twisted actually used the system as intended more pervasively, I'm pretty sure that we would end up seeing people conflict with 'time' and 'system' arguments often.

Speaking of those keys: the 'time' key is unconditionally overwritten by log.msg, which means that re-publishing an event that happened previously is destructive; there's no way to track historical time.

Messages logged before the logging system starts are just lost. It would be good for the initial log observer to keep a (limited-size, of course) buffer of log messages which could be dumped upon failing. This would make it easier, for example, to debug tap plugins that use the log system to report something about their state during makeService. (And, as the maintainer of a phenomenally complex makeService, I can tell you that this would definitely be helpful.)

The naming of methods is bad and confusing. msg? err? Easy to type, but hard to understand. We could have equally short names that are not confusing.

The contract between parts of the system is poorly specified. For example, trial -j has a hard time with log output that includes any non-bytes keys. I imagine this will only become worse when trial actually supports Python 3.

And speaking of encoding, the log system is written in terms of bytes instead of in terms of unicode. Now, there's good reason to be particularly permissive of garbage data in the logging system (logging a message should never provoke an error), but at some point - probably before the data gets to user-written observers - everything should be normalized into a structure that has enough properties that the user can depend on it.

On that note, when presented with unicode encoding errors, Twisted's logger will directly raise an exception back to application code, something that it will otherwise only do when presented with KeyboardInterrupt. That I just don't understand.

We use old, semi-deprecated '%' formatting style. If we're going to introduce a new API, we should use PEP 3101 formatting; in addition to being new and improved instead of old and inferior, it's a lot easier to type {foo} correctly than to type %(foo)s without forgetting the s.

The whole LogContext thing is poorly designed. Mea culpa; this was entirely my fault. One problem with its design was that it was somewhat poorly explained, and so its intent has not carried over years of maintenance. The idea was supposed to be that every event-source within Twisted would provide a useful system key, which would indicate what event-source object (TCP connection, listening port, timed event, UDP port) was being activated when the given message was logged. However, a lot of factors conspire to make this information less than useful. For one thing, especially in database-backed applications, or those that are careful about rate-limiting or flow-control, nothing ever happens except in response to a callFromThread or a callLater; this means that the system argument is always "-". I think that the feature this is trying to support needs to be fundamentally re-thought (and in the intervening decade I've had a lot of ideas about how it might work better). Maybe we can build on some of Chris Armstrong's recent work on Deferred debugging in tracking asynchronous context in Deferreds to help identify the real cause(s) of work being executed.

OK, I think that's it for now.

(NB: The implementation linked above doesn't address all of the issues I've enumerated in this message, and I don't think that it should address every single one of them before being added to Twisted; writing this one message took me long enough, but we should possibly also discuss which ones are fundamental issues with the logging system and which are features that should be considered separately.)

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130613/508ef7ee/attachment.html>

From radix at twistedmatrix.com  Thu Jun 13 17:16:28 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 13 Jun 2013 18:16:28 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
Message-ID: <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>

On Thu, Jun 13, 2013 at 5:14 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> Hello everybody. Today I'd like to talk about everyone's favorite subsystem within Twisted: logging.
>
> There are a number of problems with Twisted's logging system.

Thanks for writing up this email. I'd like to help out with this effort.

> For a long time, there's been consensus among at least a few core Twisted developers that log messages ought to be specified in terms of a format message and several relevant keyword arguments, so that tools can extract the values of the keyword arguments without parsing ad-hoc messages or using regexes. In other words, like this:
>
> log.msg(format="Foo happened. Relevant information includes: "
>                 "bar=%(bar)s baz=%(baz)s boz=%(boz)s",
>                 bar=bar, baz=baz, boz=boz)

There's something that I want to.... not propose, but discuss, that
I've discovered through my writing of actual applications that do
actual log filtering.

Basically, the conclusion I've come to is that English isn't very
useful in logs. It's usually badly written, uninformative, and hard to
filter on. The main thing that I find really important is having what
I call an "event name", which has the following properties:

1. human readable
2. computer readable
3. mandatory
4. unique across a codebase, and specific to the physical logging
statement that it's being passed to.

So, for example:

def frag_message_received(self, fragger, fragee, weapon):
    self.log("frag", fragger=fragger, fraggee=fragee, weapon=weapon)
    ...

Now, your smart log filterer can just filter by event="frag" instead
of message="Frag for \w+ received with weapon \w+" or whatever.

This is just how I've done things in practice, and it has worked very
well for fairly large projects, but there are improvements that I can
think of. For example, the event name should probably be based on a
hierarchy of composable logger objects (kinda like the one David Reid
wrote) so that it's easier to maintain uniqueness in a large codebase.

(Hey David, you should write an email about that logging class :)

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From radix at twistedmatrix.com  Thu Jun 13 19:02:16 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 13 Jun 2013 20:02:16 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
Message-ID: <CAPkRfUQ-e_mMaOdw5HNVH9O-ibstV7spSAZ+Yh79tBvH2oiG5g@mail.gmail.com>

On Thu, Jun 13, 2013 at 5:14 PM, Glyph <glyph at twistedmatrix.com> wrote:
> Hello everybody. Today I'd like to talk about everyone's favorite subsystem
> within Twisted: logging.
>
> There are a number of problems with Twisted's logging system.

I really need to get out of here and go to dinner, but I really
quickly wanted to start a list of use cases for logging.


1. "I need to convey a message with complex information to the user of
my software"
Log files usually aren't good at all for this, but they're
unfortunately used quite often for it. This is pretty much the only
reason to have English in your log statements, I think.

2. "I want to be able to analyze patterns in the execution of this software"
This is where structured data really helps. Keys, values, "systems",
and "events" (as I described below) -- things you can filter by,
graph, or redirect.

3. "I want to investigate certain events that happened in the
execution of this software"
Structured data helps just as much here as with #2. It's nice to be
able to interactively query databases of logs. "show me all the stuff
about this player". "show me everything that happened in this thread".
"show me all of the 'frag' events."

4. "I want to accumulate a bunch of extremely verbose data to be
logged only if it's really necessary, such as in an error case"
This is similar to #3, but there are cases where you have such verbose
data that you don't want to to log it all the time. This is basically
the OOPS system as some developers are familiar with -- the execution
of request-handling can attach data to the request (or some log
context object, or whatever) and if the request ever fails, all of
that data will be zipped up and saved somewhere for further
investigation. If the request succeeds, it'll be thrown out.

5. "I want to be able to track down where this log message came from"
the "event" attribute that I described is helpful here, but having the
filename and line number is even better.

I tried to write a number #6 about including framework-provided data
in your application-level log statements (like request ID, client IP,
URL etc), but I got too hungry.

Sorry for the braindump!


--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From facundobatista at gmail.com  Thu Jun 13 19:41:16 2013
From: facundobatista at gmail.com (Facundo Batista)
Date: Thu, 13 Jun 2013 22:41:16 -0300
Subject: [Twisted-Python] logging
In-Reply-To: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
Message-ID: <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>

On Thu, Jun 13, 2013 at 7:14 PM, Glyph <glyph at twistedmatrix.com> wrote:

> For a long time, there's been consensus among at least a few core Twisted
> developers that log messages ought to be specified in terms of a format
> message and several relevant keyword arguments, so that tools can extract
> the values of the keyword arguments without parsing ad-hoc messages or using
> regexes. In other words, like this:
>
> log.msg(format="Foo happened. Relevant information includes: "
>                 "bar=%(bar)s baz=%(baz)s boz=%(boz)s",
>                 bar=bar, baz=baz, boz=boz)

Mmm... which is the problem with doing:

log.msg("Foo happened. Relevant information includes: "
             "bar=%s baz=%s boz=%s", bar, baz, boz)

Is way more readable, and in the practice the code will just need to
do something like:

def msg(format_string, *args):
    try:
        line = format_string % args
    except:
        # something clever

No regexes involved, and very cheap in the case where it works.

And this is a personal opinion: the "working way" (where programmed
coded all ok) should be as cheap as possible. If something is wrong
with the logging line, it must not crash, and I don't care if it's
expensive, but that line will be fixed, and will work ok, and from
there to the future it will be cheap.

Thanks!

--
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/
Twitter: @facundobatista


From jkakar at kakar.ca  Fri Jun 14 00:41:18 2013
From: jkakar at kakar.ca (Jamu Kakar)
Date: Thu, 13 Jun 2013 23:41:18 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
Message-ID: <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>

Hi,

On Thu, Jun 13, 2013 at 6:41 PM, Facundo Batista
<facundobatista at gmail.com> wrote:
> Mmm... which is the problem with doing:
>
> log.msg("Foo happened. Relevant information includes: "
>              "bar=%s baz=%s boz=%s", bar, baz, boz)
>
> Is way more readable, and in the practice the code will just need to
> do something like:
>
> def msg(format_string, *args):
>     try:
>         line = format_string % args
>     except:
>         # something clever
>
> No regexes involved, and very cheap in the case where it works.
>
> And this is a personal opinion: the "working way" (where programmed
> coded all ok) should be as cheap as possible. If something is wrong
> with the logging line, it must not crash, and I don't care if it's
> expensive, but that line will be fixed, and will work ok, and from
> there to the future it will be cheap.

You might be interested in logfmt (which has implementations for Ruby,
Javascript and Go at least):

  https://github.com/jkakar/logfmt-python

The example above could be written in a logfmt-compatible way as:

  log.msg("message=Foo happened bar=%s baz=%s boz=%s", bar, baz, boz)

This is as readable as what you have above while being a touch easier
to parse.  The main point that logs are data and should emitted in a
way that makes consuming them easy is a good one regardless of the
format you choose.  I do wonder if logfmt is unnecessary and if simply
dumping JSON objects would be just as good... logfmt is slightly
prettier but the JSON approach has the advantage of having a parser
available in basically every language anyone would ever care about.

Thanks,
J.


From raketenschnitzel at gmx.de  Fri Jun 14 06:11:20 2013
From: raketenschnitzel at gmx.de (Raketenschnitzel)
Date: Fri, 14 Jun 2013 14:11:20 +0200
Subject: [Twisted-Python] Simple bidirectional Socket Client
Message-ID: <51BB0868.4050405@gmx.de>

Hi there,

i'm new to twisted, but i want to use it in a project for dealing with 
the socket connection to a server for receiving and sending data.
I already did some projects in Delphi and there you have an build-in 
eventdriven socket class. Python itself lacks at this feature (afaik) 
and so i stumpled upon twisted. Since its only a small part of my task, 
im looking for an easy solution but after consulting google for two days 
and testing around im still failing at get it working.

What i got so far:

class ControllerProtocol(Protocol):

     def connectionMade(self):
         # send Greeting
         self.factory.isConnected = True
         self.transport.write("hello, world!")

     def dataReceived(self, data):
         "Parse received data and send corresponding Message."
         self.transport.write(self.factory.reactOnReceive(data))

     def connectionLost(self, reason):
         #try to reconnect
         self.factory.isConnected = False
         print "connection lost"

     def sendMessage(self, data):
         print 'Send:', data
         self.transport.write(data)

class Communicator(ClientFactory):
     protocol = ControllerProtocol

     def __init__(self, Host, Port):
         if isinstance(Host, str) and isinstance(Port, int) :
             self.myHost = Host
             self.myPort = Port
             self.isConnected = False
             print 'Going To connect'
             self.connectToMother()

     def connectToMotherShip(self):
         reactor.connectTCP(self.myHost, self.myPort, self)
         reactor.run()

     def buildProtocol(self, addr):
         p = ClientFactory.buildProtocol(self, addr)
         self.connectedProtocol = p
         return p

     def sendMessage(self, Message):
         self.connectedProtocol.SendMessage(Message)

     def reactOnReceive(self, String):
         #here i parse the received string for different requests after 
converting it to json and update values of the operator
         pass

class Operator:
     def __init__(self):
     self.myCommunicator = Communicator("192.168.1.12", 815)
     do other stuff ...

I want an Operator Object that builds the Communicator. The communicator 
updates values of the Operator asynchronously if it receives messages. 
Each 10 secs the Operator will initiate a Communicator.sendMessage to 
send a status information to the server.

Two questions:
1) Is it possible to solve my task like this with twisted and if so, how 
do I get my Communicator to not block my Operator?
2) If twisted is not the easiest way for this approach, do i have 
alternatives? I want at least something event driven. I also read about 
the asyncore packages, but people often recommend twisted over asyncore.

I simply want to send and receive message with a "threaded" communicator 
class, while doing other stuff in my Operator.

Thanks a lot for your help,
Toni




From marco.giusti at gmail.com  Fri Jun 14 06:31:46 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Fri, 14 Jun 2013 14:31:46 +0200
Subject: [Twisted-Python] Simple bidirectional Socket Client
In-Reply-To: <51BB0868.4050405@gmx.de>
References: <51BB0868.4050405@gmx.de>
Message-ID: <20130614123146.GA3983@murdoc>

On Fri, Jun 14, 2013 at 02:11:20PM +0200, Raketenschnitzel wrote:
...
> class Communicator(ClientFactory):
>     protocol = ControllerProtocol
> 
>     def __init__(self, Host, Port):
>         if isinstance(Host, str) and isinstance(Port, int) :
>             self.myHost = Host
>             self.myPort = Port
>             self.isConnected = False
>             print 'Going To connect'
>             self.connectToMother()
> 
>     def connectToMotherShip(self):
>         reactor.connectTCP(self.myHost, self.myPort, self)
>         reactor.run()
> 
...
> class Operator:
>     def __init__(self):
>     self.myCommunicator = Communicator("192.168.1.12", 815)
>     do other stuff ...
> 
> I want an Operator Object that builds the Communicator. The
> communicator updates values of the Operator asynchronously if it
> receives messages. Each 10 secs the Operator will initiate a
> Communicator.sendMessage to send a status information to the server.
> 
> Two questions:
> 1) Is it possible to solve my task like this with twisted and if so,
> how do I get my Communicator to not block my Operator?

The operator is blocked because reactor.run() is a loop, do not call it
inside the factory constructor.

	class Communicator(ClientFactory):

		isConnected = False

		def __init__(self):
			pass

	class Operator:
		def __init__(self):
			# do other stuff but do not use self.myCommunicator yet


factory = Communicator()
operator = Operator()
operator.myCommunicator = factory
reactor.connectTCP(host, port, factory)
reactor.run()


> 2) If twisted is not the easiest way for this approach, do i have
> alternatives? I want at least something event driven. I also read
> about the asyncore packages, but people often recommend twisted over
> asyncore.
> 
> I simply want to send and receive message with a "threaded"
> communicator class, while doing other stuff in my Operator.

The great advantage of twisted is that you do not need to use threads to
communicate to the external world, use it only if you have to run code
that could "block" the main loop. But in my modest opinion, twisted is
the easiest way to do network programming.

Ciao
m.


From free at 64studio.com  Fri Jun 14 08:39:07 2013
From: free at 64studio.com (Free Ekanayaka)
Date: Fri, 14 Jun 2013 16:39:07 +0200
Subject: [Twisted-Python] Testing AMP-based code
In-Reply-To: <20130612231612.5484.1361672252.divmod.xquotient.46@top>
 (exarkun@twistedmatrix.com's message of "Wed, 12 Jun 2013 23:16:12
 -0000")
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
 <20130612231612.5484.1361672252.divmod.xquotient.46@top>
Message-ID: <87a9msiwok.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>

|--==> On Wed, 12 Jun 2013 23:16:12 -0000, exarkun at twistedmatrix.com said:

  > I think this is thinking in the right direction.  Twisted generally
  > tries to be responsible for testing its own code, and the
  > serialization from commands to bytes (and the reverse) that AMP does
  > is part of Twisted, so you should really be free from the burden of
  > testing that that stuff works.

Agreed. Thanks for the detailed explanation about the AMP internals, I
hadn't take time yet to fully read the implementation, I did now and
your directions helped.

I'm certainly happy to integrate the docs with this information as Glyph
suggested.

  > So this all means that your application logic can all live on a
  > CommandLocator subclass.

Indeed, I had figured out this particular bit already.

  > When you really want to put this on an AMP server, you can hook an
  > AMP instance up to your CommandLocator subclass (AMP takes a locator
  > as an __init__ argument).  When you want to test your command
  > implementations, you can hook the CommandLocator up to a
  > BoxDispatcher and a box sender and throw boxes straight at it with
  > no network interation.

Okay this is where it get interesting and I'd like to hear for opinions
for a few different possibilities. Following the your idea above, I've
put together this little example of application code with tests (it
expands the one attached to the ticket):

http://pastebin.com/6hTw5WDC

I've included some comments that are not really code comments, but
rather just express issues/considerations.

I believe there are two parts of application code that you want to test
(possibly differently). One part are the application-defined AMP
commands and their responders, the other part is the application client
code that make use of them via callRemote. So basically two different
layers.

My question is probably if folks have any opinion about whether to mock
the parts of your applications that invoke callRemote (typically by
providing fakes, so you don't invoke callRemote at all), or
alternatively to fake callRemote itself. As I wrote in the paste, this
probably drifts towards a "state-based vs behavior-based" matter.

  > Some pieces are probably still missing from the public API - for
  > example, you do want to test that your objects all get properly
  > serialized and deserialized through AMP, particularly if you're
  > implementing custom Argument types.  There are some private APIs,
  > _objectsToStrings and _stringsToObjects mostly, that really help with
  > testing this, and we should think about how to expose this
  > functionality publically.  Also, we should document this whole pile of
  > stuff.

I do have custom Argument types. Those could be exercised indirectly by
faking callRemote the way the FakeBoxDispatcher class in the paste does,
but there might be nicer approaches.

  > Maybe you'd be interested in writing something up after you've
  > had a chance to play with these ideas?

Sure. It feels part of these questions are not purely AMP-specific and
are generally relevant for testing application code that uses protocols
indirectly. I guess a popular approach is to wrap protocols inside
"Client" classes and then provide fake versions of those clients, which
at the end is perhaps what I should do in this case too (e.g. fake the
MathClient in the code).

Cheers,

Free


From radix at twistedmatrix.com  Fri Jun 14 13:45:50 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 14 Jun 2013 14:45:50 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
Message-ID: <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>

On Fri, Jun 14, 2013 at 1:41 AM, Jamu Kakar <jkakar at kakar.ca> wrote:
> Hi,
>
> On Thu, Jun 13, 2013 at 6:41 PM, Facundo Batista
> <facundobatista at gmail.com> wrote:
>> Mmm... which is the problem with doing:
>>
>> log.msg("Foo happened. Relevant information includes: "
>>              "bar=%s baz=%s boz=%s", bar, baz, boz)
>>
>> Is way more readable, and in the practice the code will just need to
>> do something like:
>
> The example above could be written in a logfmt-compatible way as:
>
>   log.msg("message=Foo happened bar=%s baz=%s boz=%s", bar, baz, boz)
>
> This is as readable as what you have above while being a touch easier
> to parse.  The main point that logs are data and should emitted in a
> way that makes consuming them easy is a good one regardless of the
> format you choose.  I do wonder if logfmt is unnecessary and if simply
> dumping JSON objects would be just as good... logfmt is slightly
> prettier but the JSON approach has the advantage of having a parser
> available in basically every language anyone would ever care about.


I think both of these should be avoided because they require the user
to specify string interpolation themselves. I'd prefer to avoid that
entirely, by default.

log.msg("Foo happened**", bar=bar, baz=baz, boz=boz)

This is better because:

1. it keeps the data structured
2. it is a lot less typing

** I would prefer this part to be "foo", but I'll keep these
discussions separate :)



--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From exarkun at twistedmatrix.com  Fri Jun 14 15:47:56 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 14 Jun 2013 21:47:56 -0000
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
Message-ID: <20130614214756.5484.127165603.divmod.xquotient.50@top>

On 07:45 pm, radix at twistedmatrix.com wrote:
>On Fri, Jun 14, 2013 at 1:41 AM, Jamu Kakar <jkakar at kakar.ca> wrote:
>>Hi,
>>
>>On Thu, Jun 13, 2013 at 6:41 PM, Facundo Batista
>><facundobatista at gmail.com> wrote:
>>>Mmm... which is the problem with doing:
>>>
>>>log.msg("Foo happened. Relevant information includes: "
>>>              "bar=%s baz=%s boz=%s", bar, baz, boz)
>>>
>>>Is way more readable, and in the practice the code will just need to
>>>do something like:
>>
>>The example above could be written in a logfmt-compatible way as:
>>
>>   log.msg("message=Foo happened bar=%s baz=%s boz=%s", bar, baz, boz)
>>
>>This is as readable as what you have above while being a touch easier
>>to parse.  The main point that logs are data and should emitted in a
>>way that makes consuming them easy is a good one regardless of the
>>format you choose.  I do wonder if logfmt is unnecessary and if simply
>>dumping JSON objects would be just as good... logfmt is slightly
>>prettier but the JSON approach has the advantage of having a parser
>>available in basically every language anyone would ever care about.
>
>
>I think both of these should be avoided because they require the user
>to specify string interpolation themselves. I'd prefer to avoid that
>entirely, by default.
>
>log.msg("Foo happened**", bar=bar, baz=baz, boz=boz)
>
>This is better because:
>
>1. it keeps the data structured
>2. it is a lot less typing
>
>** I would prefer this part to be "foo", but I'll keep these
>discussions separate :)

I think that I agree with this, except I wonder if you could supply some 
more realistic examples here.  Let's say I have a somewhat complex 
50kloc application with a log event emitted around once every 10 lines.

After I use up "foo", "bar", "baz", and "quux" I start having to refer 
to the hacker dictionary.  This doesn't get me very close to the 5000 
event identifiers I'll need.  How does someone come up with this in the 
real world?

Jean-Paul


From radix at twistedmatrix.com  Fri Jun 14 16:43:01 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 14 Jun 2013 17:43:01 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <20130614214756.5484.127165603.divmod.xquotient.50@top>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
Message-ID: <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>

On Fri, Jun 14, 2013 at 4:47 PM,  <exarkun at twistedmatrix.com> wrote:
> On 07:45 pm, radix at twistedmatrix.com wrote:
>> I think both of these should be avoided because they require the user
>> to specify string interpolation themselves. I'd prefer to avoid that
>> entirely, by default.
>>
>> log.msg("Foo happened**", bar=bar, baz=baz, boz=boz)
>>
>> This is better because:
>>
>> 1. it keeps the data structured
>> 2. it is a lot less typing
>>
>> ** I would prefer this part to be "foo", but I'll keep these
>> discussions separate :)
>
>
> I think that I agree with this, except I wonder if you could supply some
> more realistic examples here.  Let's say I have a somewhat complex 50kloc
> application with a log event emitted around once every 10 lines.
>
> After I use up "foo", "bar", "baz", and "quux" I start having to refer to
> the hacker dictionary.  This doesn't get me very close to the 5000 event
> identifiers I'll need.  How does someone come up with this in the real
> world?
>
> Jean-Paul


This really should have been a response to my earlier message where I
talk about the "event" more directly, instead my post about how to do
string formatting, but anyway.

That was a very amusing post, but I guess you were trying to make a
point :) The event name shouldn't be meaningless; you or your ops team
or your users are going to want to type it into their filtering
software, and it's nice if they can keep the event name in their head.
I find it most valuable when it's a short identifier that I think up
with my brain and type into my program. If I'm logging in a call to
received_frag(), for example, I'd probably call the event name "frag".
If I'm logging a message about an error that occurred during a
regularly scheduled database compaction, I would call it
"scheduled-db-compact-failed".

If you're concerned about universal uniqueness, there are two ways I
can think of doing it, both of which should basically have a similar
API as far as where concerns are in your code:

- make the event name hierarchical with a root being identifier by your project

"SpaceCombat.server.db.scheduled-compaction-failed"

(you shouldn't need to type out this full event name every time you
type a log.msg() statement; that's not a hard problem to solve)

- put a hierarchical designator into the "system" field

log("scheduled-compaction-failed", system="SpaceCombat.server.db")

I think I like the idea of using "system" for this, since that
basically seems like the original intent.


--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From glyph at twistedmatrix.com  Fri Jun 14 16:43:10 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 14 Jun 2013 15:43:10 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
Message-ID: <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>


On Jun 13, 2013, at 4:16 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On Thu, Jun 13, 2013 at 5:14 PM, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> Hello everybody. Today I'd like to talk about everyone's favorite subsystem within Twisted: logging.
>> 
>> There are a number of problems with Twisted's logging system.
> 
> Thanks for writing up this email. I'd like to help out with this effort.
> 
>> For a long time, there's been consensus among at least a few core Twisted developers that log messages ought to be specified in terms of a format message and several relevant keyword arguments, so that tools can extract the values of the keyword arguments without parsing ad-hoc messages or using regexes. In other words, like this:
>> 
>> log.msg(format="Foo happened. Relevant information includes: "
>>                "bar=%(bar)s baz=%(baz)s boz=%(boz)s",
>>                bar=bar, baz=baz, boz=boz)


> Basically, the conclusion I've come to is that English isn't very
> useful in logs. It's usually badly written, uninformative, and hard to
> filter on. The main thing that I find really important is having what
> I call an "event name", which has the following properties:

So, I confess that one of my long-term goals here is to de-emphasize the english-language log file and eventually get Twisted using a structured log file as standard.  However, to just do that immediately would probably break everybody's workflow.

> 1. human readable
> 2. computer readable
> 3. mandatory
> 4. unique across a codebase, and specific to the physical logging statement that it's being passed to.

I agree with some of these properties and disagree with others, but you didn't really say *why* these properties are useful.  So let me see if I can explain the properties I think are good, starting with the use-case rather than the other way 'round:

There are several activities that one performs with logging:

while one's writing the code, inserting a log message
while one's administering a system, reading the history of all logged messages
while one's monitoring a system, selecting criteria for future relevant log messages to alert on
while one's debugging a system, selecting criteria for past relevant log messages to display
while one's documenting a system, explaining what various log messages mean and how they may be used for the other use-cases

English (by which I mean "localizable human-readable text") is useful for use-cases 1. and 2.  When you're writing the log message, selecting a unique identifier is tedious; you just want to type in what happened and move on.  When you're reading the messages, it's easier to puzzle out some english text than to go to the documentation for each and every message.

Globally unique identifiers are useful for use-cases 3 and 4.  Filtering messages by random snippets of English text is tedious, error-prone and fragile.  (It doesn't help if a message is unique "across a codebase" if that codebase is a library and it conflicts with another library that an application uses.)

Stable identifiers are particularly useful for use-cases 3 and 5.  While human-readability is useful for all cases, that generally conflicts with the long-term stability of an identifier.  If you write a monitoring system that looks at log messages.

I think that we can satisfy all of these requirements by expanding the notion of an "identifier" a bit.

In the interests of not spending ten hours working on each message to this list, I'll leave this one on a cliffhanger, so you can eagerly await the next episode!

> So, for example:
> 
> def frag_message_received(self, fragger, fragee, weapon):
>    self.log("frag", fragger=fragger, fraggee=fragee, weapon=weapon)
>    ...
> 
> Now, your smart log filterer can just filter by event="frag" instead
> of message="Frag for \w+ received with weapon \w+" or whatever.
> 
> This is just how I've done things in practice, and it has worked very
> well for fairly large projects, but there are improvements that I can
> think of. For example, the event name should probably be based on a
> hierarchy of composable logger objects (kinda like the one David Reid
> wrote) so that it's easier to maintain uniqueness in a large codebase.
> 
> (Hey David, you should write an email about that logging class :)


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130614/178398b6/attachment.html>

From tom.prince at ualberta.net  Fri Jun 14 16:45:07 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Fri, 14 Jun 2013 16:45:07 -0600
Subject: [Twisted-Python] Announcing twisted-dev-tools
Message-ID: <877ghwgvm4.fsf@loki.hocat.ca>

http://labs.twistedmatrix.com/2013/06/announcing-twisted-dev-tools.html

I'd like to announce the release of twisted-dev-tools. It is a project that
collects various python scripts useful for developer working on twisted itself.

Right now, it contains the following tools.

- force-build:
     This is an updated version of force-builds.py from
     twisted-trac-integration.  It has a different (more flexible) syntax.

     If run from a git repository, where the current commit has been pushed to
     svn, running it with no arguments  will automatically build the
     corresponding branch.

- mkbranch:
     A helper for thos use git: it creates a branch in svn, with a standard
     commit message.

     Eventually, this should be enhanced to automatically fetch that commit,
     and switch to the branch locally.

- review-tickets:

     Command-line list of tickets currently in review

- fetch-ticket:
    
    Command-line tool to view a ticket

- get-attachemnt:

    Tool for interacting with trac attachments.

    - list: list all attachments on a given ticket
    - get: gets a gien ticket (defaults to the lat)
    - apply: applies that last attachment to the current git repository, and
             commits it with an appropriate message

Most of the functionality is also exposed as a python library, so custom scripts
are possible as well.

The code is available at https://github.com/twisted/twisted-dev-tools and on
pypi https://pypi.python.org/pypi/twisted-dev-tools


From radix at twistedmatrix.com  Fri Jun 14 16:45:23 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 14 Jun 2013 17:45:23 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
Message-ID: <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>

On Fri, Jun 14, 2013 at 5:43 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> If you're concerned about universal uniqueness, there are two ways I
> can think of doing it, both of which should basically have a similar
> API as far as where concerns are in your code:
>
> - make the event name hierarchical with a root being identifier by your project
>
> "SpaceCombat.server.db.scheduled-compaction-failed"
>
> (you shouldn't need to type out this full event name every time you
> type a log.msg() statement; that's not a hard problem to solve)
>
> - put a hierarchical designator into the "system" field
>
> log("scheduled-compaction-failed", system="SpaceCombat.server.db")
>
> I think I like the idea of using "system" for this, since that
> basically seems like the original intent.


Sorry, let me clarify. You shouldn't need to type out
"SpaceCombat.server.db" multiple times in your log statements *ever*,
in either case above. I imagine a system like the following:

spacecombat/server/db.py:

from twisted.python import log

logger = log.BoundLogger(log, system="SpaceCombat.server.db")

logger.msg("scheduled-compaction-failed")

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From wsanchez at wsanchez.net  Fri Jun 14 17:20:58 2013
From: wsanchez at wsanchez.net (=?ISO-8859-1?Q?Wilfredo_S=E1nchez_Vega?=)
Date: Fri, 14 Jun 2013 16:20:58 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
Message-ID: <51BBA55A.60306@wsanchez.net>

Christopher Armstrong wrote:
> logger.msg("scheduled-compaction-failed")
   I'm confused.  You don't want to use English, but... why not change 
your hyphens to spaces and call it a day?  Also, why did it fail?

   Here's a fuller example, modified to fit the API I'm using:

from twisted.python.log import Logger

log = Logger()

try:
   scheduleCompaction(...)
except Exception as e:
   log.error("Scheduled compaction failed: {why}", why=e,
             id=2C09A260-184C-44F9-B11F-E12B26B26C9C)


   Some things to note about this:

   - `log = Logger()` does some magic so that log.namespace is the name 
of your module "spacecombat.server.db".  So, your "system" identifier is 
perhaps covered by that, with no typing.

   - I have a format string instead of a fixed string.  An observer 
emitting text can emit something informative.  I know you think that 
text logs aren't useful, but a lot of us do.  And you can use observers 
that ignore this format.  Maybe there's an argument for making the 
format optional...

   - Formatting isn't done here, so... cheap if you don't use it in any 
observers.

   - I added a GUID id argument since you seem keen, I think on a unique 
key to identify the code point at which the message is logged.  It's not 
used in the format, but an observer storing things in a DB could use 
that to take you straight to the relevant code, or identify multiple 
instances of that message, etc. if the format string isn't how you want 
to do that.

     -wsv

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130614/b4d40b1d/attachment.html>

From glyph at twistedmatrix.com  Fri Jun 14 17:40:21 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 14 Jun 2013 16:40:21 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
Message-ID: <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>


On Jun 14, 2013, at 3:43 PM, Glyph <glyph at twistedmatrix.com> wrote:

> I think that we can satisfy all of these requirements by expanding the notion of an "identifier" a bit.

In our last episode, I mentioned that an identifier should have several properties:

human readable (and potentially non-unique) for ease of writing messages and reading them to get a general sense of the behavior of a system
globally unique (and potentially hard to read) for ease of filtering and monitoring
long-term (and potentially unique to humans) for ease of writing tools to deal with particular messages, whose exact details may change over time

I think we can achieve all of these things by making there be multiple ways to identify a log message.  Here's how that could work:

When you are first writing a log message, just do this, as you usually would; toss off some crummy english message:

log.info("hey check it out I just {verb}ed a {noun}", verb=request.method, noun=request.uri)

Asking the author to write a log message with more detail and care than this is basically just a recipe for disappointment :).

Later, someone might want to instrument these messages.  We've all agreed that re.findall("hey check it out.*") is a crummy way to do this.  The obvious thing would be something like this:

tapEventsLike(myObserver, publisher, log_format="hey check it out I just {verb}ed a {noun}")

That's fine to start with, of course, but it's not very resilient to changes in the code; the developer might later change this line to read:

log.info("hey check it out I just {verb}ed a {noun} and got a {result}", verb=request.method, noun=request.uri, result=request.response.status)

Now the log tap is broken, and there's no reasonable way to fix it; the format string doesn't have a place that it could go.

But, the 'log' in the above example is a logger object associated with a class or module, and so has 3 persistent pieces of information it can use to build a long-term identifier that the event tap can use.  We could reflect that in an API like this:

from example.module import log
tapEventsLike(myObserver, publisher,
              log_id=log.idForOriginalFormat("hey check it out I just {verb}ed a {noun}"))

which could be computed offline, and then specified like this, to be even more resilient to API changes:

tapEventsLike(myObserver, publisher, log_id='604e45b5-2d41-5ba5-9ae1-7205163c3e3f')

That string, of course, is computed like this:

>>> import uuid
>>> from urllib import urlencode
>>> uri = "http://twistedmatrix.com/ns/log/?" + urlencode(dict(format="hey check it out I just {verb}ed a {noun}", module="example.module"))
>>> uuid.uuid5(uuid.NAMESPACE_URL, uri)
UUID('604e45b5-2d41-5ba5-9ae1-7205163c3e3f')

(Although if we decide we like this system, we could of course go with a helpful command-line tool to generate these for you.)

As you evolve your codebase to take logging more seriously, you could change the original 'log.info' call to instead look like this:

verbANoun = log.declare(
    "hey check it out I just {verb}ed a {noun} and got a {result}",
    log_id='604e45b5-2d41-5ba5-9ae1-7205163c3e3f',
)
# ...
verbANoun(verb=request.method, noun=request.uri, result=request.response.status)

and then monitoring can be accomplished via public API:

from example.module import verbANoun
verbANoun.tap(myObserver, theLogPublisher)

So, after some evolution, our message has 3 identifiers:

the original format string, which was easy to come up with on the spot, and need not be unique
a UUID, that was automatically generated but can be carried around to allow for cleaning up the codebase and the message without breaking any code doing monitoring
an API name that the logger and the logee can use to agree on the semantics of a particular message

Best of all, you can get this even for the plethora of existing log messages within Twisted that aren't even using structured values, as we evolve them to have more metadata.  You also now have the ability to localize the format string, if you want to start presenting these log messages in contexts other than log files for system administrators.

Thoughts?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130614/a93e35cb/attachment.html>

From glyph at twistedmatrix.com  Fri Jun 14 20:30:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 14 Jun 2013 19:30:42 -0700
Subject: [Twisted-Python] Announcing twisted-dev-tools
In-Reply-To: <877ghwgvm4.fsf@loki.hocat.ca>
References: <877ghwgvm4.fsf@loki.hocat.ca>
Message-ID: <EFFCE5AA-DE4B-4176-A1E7-6A300AA48A8B@twistedmatrix.com>


On Jun 14, 2013, at 3:45 PM, Tom Prince <tom.prince at ualberta.net> wrote:

> http://labs.twistedmatrix.com/2013/06/announcing-twisted-dev-tools.html
> 
> I'd like to announce the release of twisted-dev-tools. It is a project that
> collects various python scripts useful for developer working on twisted itself.

Cool!  It's nice to have all this stuff in one place now.  Maybe we can even get some documentation? :)

> - mkbranch:
>     A helper for thos use git: it creates a branch in svn, with a standard
>     commit message.
> 
>     Eventually, this should be enhanced to automatically fetch that commit,
>     and switch to the branch locally.

This is all great, but, would you mind re-naming it so that I can have both this, and Combinator installed locally?  Until we switch to Git, I'd like to preserve the capacity to work with Subversion natively :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130614/c2789603/attachment-0001.html>

From radix at twistedmatrix.com  Fri Jun 14 23:43:50 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 00:43:50 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <51BBA55A.60306@wsanchez.net>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
Message-ID: <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>

On Fri, Jun 14, 2013 at 6:20 PM, Wilfredo S?nchez Vega
<wsanchez at wsanchez.net> wrote:
> Christopher Armstrong wrote:
>
> logger.msg("scheduled-compaction-failed")
>
>   I'm confused.  You don't want to use English, but? why not change your
> hyphens to spaces and call it a day?  Also, why did it fail?

Because as soon as you introduce spaces, you're probably going to
introduce capitalization and punctuation as well, and then all of a
sudden your log statements are a lot harder to filter.

>   Here's a fuller example, modified to fit the API I'm using:
>
> from twisted.python.log import Logger
>
> log = Logger()
>
> try:
>   scheduleCompaction(?)
> except Exception as e:
>   log.error("Scheduled compaction failed: {why}", why=e,
>             id=2C09A260-184C-44F9-B11F-E12B26B26C9C)
>
>
>   Some things to note about this:
>
>   - `log = Logger()` does some magic so that log.namespace is the name of
> your module "spacecombat.server.db".  So, your "system" identifier is
> perhaps covered by that, with no typing.

I like making it trivial to specify the system, but I don't think it's
a good idea to do it based on the module name. Code moves around a
lot, and you may have lots of implementation modules for one logical
system. I think it's fine to just have people say 'log =
Logger("spacecombat.server.db")' at the top of their file.

>   - I have a format string instead of a fixed string.  An observer emitting
> text can emit something informative.  I know you think that text logs aren't
> useful, but a lot of us do.  And you can use observers that ignore this
> format.  Maybe there's an argument for making the format optional...

I think the argument about English is separate from the argument about
whether we should require specifying the interpolation in the strings.

>   - Formatting isn't done here, so... cheap if you don't use it in any
> observers.

>   - I added a GUID id argument since you seem keen, I think on a unique key
> to identify the code point at which the message is logged.  It's not used in
> the format, but an observer storing things in a DB could use that to take
> you straight to the relevant code, or identify multiple instances of that
> message, etc. if the format string isn't how you want to do that.

I don't think it's worth coming up with some kind of GUID-based
system, because I don't think anyone's going to go to the trouble to
use it, and I think it basically offers no practical benefit over
simple event names.

So, again, I want to reiterate that I wasn't really proposing
mandating an event name and enforcing these rules on it.

As far as actual *proposals* go, I have these ones, that are all independent:

1. include all keyword arguments in log output without requiring
specifying the formatting in the string
2. make it really easy to specify the "system"
3. stop affecting the "system" of application code based on the
framework code that's running the application code (i.e., don't use
callWithContext to specify the system any more)

Of these, I think #2 and #3 have the most benefit; I can do #1 with my
own logging statements just fine, and while IMO it'd be nice if the
whole world adopted a nice identifier-based system, the lion's share
of the benefit comes from my use of it consistently in the
application's codebase.

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From radix at twistedmatrix.com  Fri Jun 14 23:48:42 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 00:48:42 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
Message-ID: <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>

On Fri, Jun 14, 2013 at 6:40 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Jun 14, 2013, at 3:43 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> I think that we can satisfy all of these requirements by expanding the
> notion of an "identifier" a bit.
>
>
> In our last episode, I mentioned that an identifier should have several
> properties:
>
> human readable (and potentially non-unique) for ease of writing messages and
> reading them to get a general sense of the behavior of a system
> globally unique (and potentially hard to read) for ease of filtering and
> monitoring
> long-term (and potentially unique to humans) for ease of writing tools to
> deal with particular messages, whose exact details may change over time
>
>
> I think we can achieve all of these things by making there be multiple ways
> to identify a log message.  Here's how that could work:
>
> When you are first writing a log message, just do this, as you usually
> would; toss off some crummy english message:
>
> log.info("hey check it out I just {verb}ed a {noun}", verb=request.method,
> noun=request.uri)
>
>
> Asking the author to write a log message with more detail and care than this
> is basically just a recipe for disappointment :).
>
> Later, someone might want to instrument these messages.  We've all agreed
> that re.findall("hey check it out.*") is a crummy way to do this.  The
> obvious thing would be something like this:
>
> tapEventsLike(myObserver, publisher, log_format="hey check it out I just
> {verb}ed a {noun}")
>
>
> That's fine to start with, of course, but it's not very resilient to changes
> in the code; the developer might later change this line to read:
>
> log.info("hey check it out I just {verb}ed a {noun} and got a {result}",
> verb=request.method, noun=request.uri, result=request.response.status)
>
>
> Now the log tap is broken, and there's no reasonable way to fix it; the
> format string doesn't have a place that it could go.
>
> But, the 'log' in the above example is a logger object associated with a
> class or module, and so has 3 persistent pieces of information it can use to
> build a long-term identifier that the event tap can use.  We could reflect
> that in an API like this:
>
> from example.module import log
> tapEventsLike(myObserver, publisher,
>               log_id=log.idForOriginalFormat("hey check it out I just
> {verb}ed a {noun}"))
>
>
> which could be computed offline, and then specified like this, to be even
> more resilient to API changes:
>
> tapEventsLike(myObserver, publisher,
> log_id='604e45b5-2d41-5ba5-9ae1-7205163c3e3f')
>
>
> That string, of course, is computed like this:
>
>>>> import uuid
>>>> from urllib import urlencode
>>>> uri = "http://twistedmatrix.com/ns/log/?" + urlencode(dict(format="hey
>>>> check it out I just {verb}ed a {noun}", module="example.module"))
>>>> uuid.uuid5(uuid.NAMESPACE_URL, uri)
> UUID('604e45b5-2d41-5ba5-9ae1-7205163c3e3f')
>
>
> (Although if we decide we like this system, we could of course go with a
> helpful command-line tool to generate these for you.)
>
> As you evolve your codebase to take logging more seriously, you could change
> the original 'log.info' call to instead look like this:
>
> verbANoun = log.declare(
>
>     "hey check it out I just {verb}ed a {noun} and got a {result}",
>
>     log_id='604e45b5-2d41-5ba5-9ae1-7205163c3e3f',
>
> )
>
> # ...
>
> verbANoun(verb=request.method, noun=request.uri,
> result=request.response.status)
>
>
> and then monitoring can be accomplished via public API:
>
> from example.module import verbANoun
> verbANoun.tap(myObserver, theLogPublisher)
>
>
> So, after some evolution, our message has 3 identifiers:
>
> the original format string, which was easy to come up with on the spot, and
> need not be unique
> a UUID, that was automatically generated but can be carried around to allow
> for cleaning up the codebase and the message without breaking any code doing
> monitoring
> an API name that the logger and the logee can use to agree on the semantics
> of a particular message
>
>
> Best of all, you can get this even for the plethora of existing log messages
> within Twisted that aren't even using structured values, as we evolve them
> to have more metadata.  You also now have the ability to localize the format
> string, if you want to start presenting these log messages in contexts other
> than log files for system administrators.
>
> Thoughts?

There's... a lot here. I'm overwhelmed by how complex this system
would be, and I think that end users would be as well. I don't really
want to put UUIDs into my source code, whether I type them or paste
them, and I don't want to have to invoke command line tools to figure
out what those UUIDs in order to be a good developer.

I think there's basically no practical benefit over the hierarchical
"system" + event-identifier system, where:

1. it's trivial to specify a hierarchical, easy-to-read "system" key
that has a small-ish scope
2. you think of a unique event name in that small-ish scope and type it out.

I'm beginning to think #1 is the most important of all, but I think
I'll continue to use event-names to describe all my log statements.

As I said in my response to Wilfredo, I think it's really important to
stop specifying the "system" for application code in Twisted. The
application's code should not be considered a part of the HTTP
protocol's system. There are also other problems with the way we use
system, like putting extra random data like request ID in there.

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From radix at twistedmatrix.com  Sat Jun 15 00:18:45 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 01:18:45 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
Message-ID: <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>

On Sat, Jun 15, 2013 at 12:43 AM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> On Fri, Jun 14, 2013 at 6:20 PM, Wilfredo S?nchez Vega
> <wsanchez at wsanchez.net> wrote:
>> Christopher Armstrong wrote:
>>
>> logger.msg("scheduled-compaction-failed")
>>
>>   I'm confused.  You don't want to use English, but? why not change your
>> hyphens to spaces and call it a day?  Also, why did it fail?
>
> Because as soon as you introduce spaces, you're probably going to
> introduce capitalization and punctuation as well, and then all of a
> sudden your log statements are a lot harder to filter.
>
>>   Here's a fuller example, modified to fit the API I'm using:
>>
>> from twisted.python.log import Logger
>>
>> log = Logger()
>>
>> try:
>>   scheduleCompaction(?)
>> except Exception as e:
>>   log.error("Scheduled compaction failed: {why}", why=e,
>>             id=2C09A260-184C-44F9-B11F-E12B26B26C9C)
>>
>>
>>   Some things to note about this:
>>
>>   - `log = Logger()` does some magic so that log.namespace is the name of
>> your module "spacecombat.server.db".  So, your "system" identifier is
>> perhaps covered by that, with no typing.
>
> I like making it trivial to specify the system, but I don't think it's
> a good idea to do it based on the module name. Code moves around a
> lot, and you may have lots of implementation modules for one logical
> system. I think it's fine to just have people say 'log =
> Logger("spacecombat.server.db")' at the top of their file.
>
>>   - I have a format string instead of a fixed string.  An observer emitting
>> text can emit something informative.  I know you think that text logs aren't
>> useful, but a lot of us do.  And you can use observers that ignore this
>> format.  Maybe there's an argument for making the format optional...
>
> I think the argument about English is separate from the argument about
> whether we should require specifying the interpolation in the strings.
>
>>   - Formatting isn't done here, so... cheap if you don't use it in any
>> observers.
>
>>   - I added a GUID id argument since you seem keen, I think on a unique key
>> to identify the code point at which the message is logged.  It's not used in
>> the format, but an observer storing things in a DB could use that to take
>> you straight to the relevant code, or identify multiple instances of that
>> message, etc. if the format string isn't how you want to do that.
>
> I don't think it's worth coming up with some kind of GUID-based
> system, because I don't think anyone's going to go to the trouble to
> use it, and I think it basically offers no practical benefit over
> simple event names.
>
> So, again, I want to reiterate that I wasn't really proposing
> mandating an event name and enforcing these rules on it.
>
> As far as actual *proposals* go, I have these ones, that are all independent:
>
> 1. include all keyword arguments in log output without requiring
> specifying the formatting in the string
> 2. make it really easy to specify the "system"
> 3. stop affecting the "system" of application code based on the
> framework code that's running the application code (i.e., don't use
> callWithContext to specify the system any more)
>
> Of these, I think #2 and #3 have the most benefit; I can do #1 with my
> own logging statements just fine, and while IMO it'd be nice if the
> whole world adopted a nice identifier-based system, the lion's share
> of the benefit comes from my use of it consistently in the
> application's codebase.



This conversation has gotten pretty sprawling; time to reel it in with
some code.

What do you think of this for an API that meets in the middle?

https://gist.github.com/radeex/5787124

This example implementation only concerns itself with the points under
debate right now; obviously it's completely unusable in general. But
anyway:

1. it supports English logs
2. it doesn't require you to specify a formatting if you want to just
log a bunch of data
3. it makes it easy to specify a system (both manually and based on
the module your code is in)

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From hs at ox.cx  Sat Jun 15 01:18:03 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Sat, 15 Jun 2013 09:18:03 +0200
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
Message-ID: <7FDD43C4-4456-4ED3-9F7F-EF14FC34EB44@ox.cx>


Am 15.06.2013 um 08:18 schrieb Christopher Armstrong <radix at twistedmatrix.com>:

>> As far as actual *proposals* go, I have these ones, that are all independent:
>> 
>> 1. include all keyword arguments in log output without requiring
>> specifying the formatting in the string
>> 2. make it really easy to specify the "system"
>> 3. stop affecting the "system" of application code based on the
>> framework code that's running the application code (i.e., don't use
>> callWithContext to specify the system any more)
>> 
>> Of these, I think #2 and #3 have the most benefit; I can do #1 with my
>> own logging statements just fine, and while IMO it'd be nice if the
>> whole world adopted a nice identifier-based system, the lion's share
>> of the benefit comes from my use of it consistently in the
>> application's codebase.
> 
> This conversation has gotten pretty sprawling; time to reel it in with
> some code.
> 
> What do you think of this for an API that meets in the middle?
> 
> https://gist.github.com/radeex/5787124
> 
> This example implementation only concerns itself with the points under
> debate right now; obviously it's completely unusable in general. But
> anyway:
> 
> 1. it supports English logs
> 2. it doesn't require you to specify a formatting if you want to just
> log a bunch of data
> 3. it makes it easy to specify a system (both manually and based on
> the module your code is in)

I?ve held back from this discussion so far because it seemed to me that I always missed some part of the discussion to fully understand what you?re all talking about. I would like to comment on this concrete proposal though before I hold my peace forever. (NB I?m not replying just to Christopher but try to address everything I saw on the thread so far ? I like most of his proposal.)

I find that there?s some kind of false dichotomy brought up in this discussion and API and output are somewhat muddled together a bit (maybe I?m just misunderstanding though ? that?s why I didn?t comment until now).

I personally like my logs 100% structured (except for Exceptions) and still be able to ?comment? on events in plain English if I need to.

And I don?t see why comments/events should be special case on output (square brackets in this example). If you have an event called user_error, you can always add a key called error for another ?symbol? or just an error_msg if you insist on English. When looking for a certain type of user_error, you simply write an AND clause in your logging software (Kibana or whatever). It?s pretty easy to keep *that* consistent across applications.

For example, *my* log would look like this:

event=user_error peer=127.0.0.1 error=pebkac

If the programmer in question hadn?t enough logging pain in their life to see that?s reasonable, they can always do:

event=user_error peer=127.0.0.1 error_msg='Problem exists between keyboard and chair.'

Still perfectly parseable, perfectly readable. And with {!r} easy to achieve. A nice API I would like to have be:

log('user_error', peer=self.transport.getPeer().host, error_msg='Problem exists between keyboard and chair.') ? and log figures out itself if it needs to quote. I could also live with them all quoted, i.e.:

event='user_error' peer='127.0.0.1' error='pebkac'

to have less special cases.


I hope that makes some sense, the point I?m trying to make that events don?t need to be distinct by themselves. If you enforce that, you?re forcing structure on them which you could spread over multiple fields that are *much* more pleasant to parse.

Regards,
Hynek

P.S. For convenience, I usually write a log method in Twisted protocols that prepends the messages with state data, peer IP etc, but that JFTR.

From hs at ox.cx  Sat Jun 15 03:15:48 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Sat, 15 Jun 2013 11:15:48 +0200
Subject: [Twisted-Python] 13.1.0 and #6499
Message-ID: <18206C29-6863-4C48-9FEA-C7D1A660D477@ox.cx>

Hi,

#6499 (Teach chain certificates to SSL server endpoints string syntax) has been pronounced ready for merge but since I?m no committer, I can?t do that myself.

It would be *great* if it could be merged before Ashwini cuts the release branch!

Thanks & sorry for the noise,
?h

From glyph at twistedmatrix.com  Sat Jun 15 04:19:14 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 03:19:14 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
Message-ID: <1AB42AF0-F6C1-4E5F-A60B-DEA98CED9BAA@twistedmatrix.com>


On Jun 14, 2013, at 10:43 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I don't think it's worth coming up with some kind of GUID-based
> system, because I don't think anyone's going to go to the trouble to
> use it, and I think it basically offers no practical benefit over
> simple event names.

Here are the benefits over simple event names:

It's opaque, so as code moves around, it doesn't look dated or wrong.  Your 'system' argument looks a whole lot like a FQPN, but as you keep saying, code moves around a lot.  Having a *second* dotted identifier that looks a lot like the module name is going to look a lot like cruft to someone when it stops matching a module name, they're going to be motivated to "clean it up", and then the "cleaned up" version is going to break everyone's logging instrumentation.
Since UUIDs can be derived from other information, you can start off without one and add one later.  If you didn't feel like specifying one in the first place with your log messages, then you're stuck until the monitoring and application code that comes to some agreement.

My view of our present disagreement seems to come down to this: I believe that nobody is going to bother to do logging right in the first place (particularly, they are not going to take the time to specify or enumerate the types of events that are interesting that their system emits), and will only realize they need to extract interesting stuff from their logs later.  I think we need to provide the best possible support for the developer "later" (the opaque UUID they can associate with an API symbol) and the monitoring folks "now" (the derived UUID that they can use in place of a gross and broken-in-the-future regex).

This doesn't mean that the UUID magically makes monitoring always work in the future; developers can still change their format strings willy-nilly.  But, it at least provides a mechanism that they *could* use to avoid breakage if everyone believes it should be avoided.

I understand your point to be that you think that people should, and that they therefore will, go to the trouble to categorize every thing that gets logged as they're writing the logging stuff.

In support of my argument, I offer as evidence the unfortunate mess that is Twisted's current ad-hoc usage of logging, plus the existence of Splunk, a publicly-traded company whose whole reason for existing is that they can run regexes over poorly-structured logs to extract useful information and statistics from them :-).

To be fair, one element in support of your argument is that you managed to write a system that used this idiom and it worked well in practice.  I'm sure that it did, and I think it's a good thing for people to adopt.

My concern is that lots of useful log-worthy events are coming out of an open-source library that won't be exposed to the discipline that a particular team adopts for logging.

Finally, it's worth noting that GUID-based identifiers and textual, hierarchical identifiers are not mutually exclusive.  You can have log.info(log_guid="98185C94-57D7-439A-8206-1D4A2ACBD983", log_system="spaceships.combat.explosion") in a single event.  We could provide both tools to the developer, and they're not obliged to use either.

(I see you've written some other messages, so more forthcoming...)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130615/d2b1cfc8/attachment.html>

From glyph at twistedmatrix.com  Sat Jun 15 04:35:23 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 03:35:23 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
 <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
Message-ID: <4BC045AD-B0BB-4E45-BE70-E7345A9117B4@twistedmatrix.com>


On Jun 14, 2013, at 10:48 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> There's... a lot here. I'm overwhelmed by how complex this system
> would be, and I think that end users would be as well. I don't really
> want to put UUIDs into my source code, whether I type them or paste
> them, and I don't want to have to invoke command line tools to figure
> out what those UUIDs in order to be a good developer.

The system isn't really that complex at all.  It's calling uuid.uuid5 once, and it's even doing that internally in a utility function, so you don't need to understand what it's doing.

> I think there's basically no practical benefit over the hierarchical
> "system" + event-identifier system, where:

I tried to lay out the benefits in my other recent reply.

> 1. it's trivial to specify a hierarchical, easy-to-read "system" key that has a small-ish scope

The fact that you have to say "trivial" here suggests it's not actually trivial :).  I think that the amount of energy people initially put into logging is so low that they will often forget to do something like this.  But, even if they remember in the future, we have to deal with the plethora of messages already within Twisted, and every Twisted library, that *don't* do this.

> 2. you think of a unique event name in that small-ish scope and type it out.

How do you know that your event name is unique though, other than running 'grep'?

> I'm beginning to think #1 is the most important of all, but I think
> I'll continue to use event-names to describe all my log statements.

This might be a good practice anyway.

> As I said in my response to Wilfredo, I think it's really important to
> stop specifying the "system" for application code in Twisted. The
> application's code should not be considered a part of the HTTP
> protocol's system. There are also other problems with the way we use
> system, like putting extra random data like request ID in there.


The "system" that Twisted currently specifies is supposed to be the reactor event which caused a particular chunk of code to run.  This is not related to the subsystem within your application where the functionality that is logging is implemented (which, really, still sounds to me like "module name").  I think this could be quite useful, especially in systems where the same functionality is exposed over multiple protocols and disparate events could cause the same subsystem to eventually get called.

However, there are a ton of problems with the way that's implemented; I can't really argue with you here about the current implementation, because it's so poorly done that I think it's next to useless.  With Failure's extended "exception caught here" stacks, it doesn't provide any information other than the traceback.

However, I'd like to bring it back at some point, especially if we can figure out how to have the causality of an event.  Wouldn't it be fantastic to see a trace like this when something went wrong?

<SomeProtocol at 0xFFFF>.dataReceived
  called callLater(x)
  called callInThread(y)
  which called callFromThread(z)
  and that's why your code is running now


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130615/6e0f604b/attachment-0001.html>

From _ at lvh.io  Sat Jun 15 04:48:42 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sat, 15 Jun 2013 12:48:42 +0200
Subject: [Twisted-Python] 13.1.0 and #6499
In-Reply-To: <18206C29-6863-4C48-9FEA-C7D1A660D477@ox.cx>
References: <18206C29-6863-4C48-9FEA-C7D1A660D477@ox.cx>
Message-ID: <CAE_Hg6ZkTL6xZE+16SAL8kUSv_DU3HmcWT-k2F=7mfTKzsT3wA@mail.gmail.com>

This was resolved :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130615/1ca82d74/attachment.html>

From p.mayers at imperial.ac.uk  Sat Jun 15 04:55:16 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 15 Jun 2013 11:55:16 +0100
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
 <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
Message-ID: <51BC4814.8080006@imperial.ac.uk>

On 06/15/2013 06:48 AM, Christopher Armstrong wrote:

> There's... a lot here. I'm overwhelmed by how complex this system
> would be, and I think that end users would be as well. I don't really
> want to put UUIDs into my source code, whether I type them or paste
> them, and I don't want to have to invoke command line tools to figure
> out what those UUIDs in order to be a good developer.

+1. I like the general idea of better logging via keyword args and an 
"id", but I strongly dislike the idea of using UUIDs as log message 
identifiers.

In fact, I'll go so far as to say I defintely wouldn't use such a 
system, and for Twisted to migrate to it would actually reduce the 
utility of the in-built logging, because I'd have to build and maintain 
something to translate Twisted log messages I cared about into whatever 
system I built to do my own logging :o(

> I think there's basically no practical benefit over the hierarchical
> "system" + event-identifier system, where:

+1. Hierarchial IDs also permit prefix-based wildcarding:

log.observe("twisted.factory.*")
log.exclude("twisted.factory.http.*")
log.observe("myapp.thing")
log.observe("txSomeProject.event.*")

Obviously this is just an example; I haven't put any real thought into it.

>
> 1. it's trivial to specify a hierarchical, easy-to-read "system" key
> that has a small-ish scope
> 2. you think of a unique event name in that small-ish scope and type it out.
>
> I'm beginning to think #1 is the most important of all, but I think
> I'll continue to use event-names to describe all my log statements.

I pretty much agree with all of this.


From glyph at twistedmatrix.com  Sat Jun 15 05:13:33 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 04:13:33 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <51BC4814.8080006@imperial.ac.uk>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
 <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
 <51BC4814.8080006@imperial.ac.uk>
Message-ID: <7E55CCC3-0847-4D8F-AE06-21FB1D48B4C8@twistedmatrix.com>


On Jun 15, 2013, at 3:55 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 06/15/2013 06:48 AM, Christopher Armstrong wrote:
> 
>> There's... a lot here. I'm overwhelmed by how complex this system
>> would be, and I think that end users would be as well. I don't really
>> want to put UUIDs into my source code, whether I type them or paste
>> them, and I don't want to have to invoke command line tools to figure
>> out what those UUIDs in order to be a good developer.
> 
> +1. I like the general idea of better logging via keyword args and an "id", but I strongly dislike the idea of using UUIDs as log message identifiers.
> 
> In fact, I'll go so far as to say I defintely wouldn't use such a system, and for Twisted to migrate to it would actually reduce the utility of the in-built logging, because I'd have to build and maintain something to translate Twisted log messages I cared about into whatever system I built to do my own logging :o(

I am really, really puzzled by this reaction.  I am wondering if you read my message carefully, or if I didn't express myself well.

If I were to implement the system that I have proposed, you could completely ignore it.  You could never deal with a UUID ever, and process logs based on whatever other attributes you like.  There's nothing to translate.  Unless when you say "translate" you mean translating the UUID of a currently ad-hoc message (one which doesn't specify or document its own unique attributes) which is something that would just be impossible without this feature.

The only overhead that you'd ever incur would be a single call per log event - probably per-process-lifetime, since the result could be cached - to uuid.uuid5, which is not exactly the most expensive function.  It would be called internally though; you wouldn't have to call it yourself or be aware that it was being called.

If you had the use-case that I believe many people do - which is to evolve a stable identifier for a previously ad-hoc log message - then you could do that.  Otherwise this wouldn't affect you.

What I've proposed with UUIDs is to identify *specific semantic events* that you might want to do monitoring/alerting on, which may move between systems.

Does this explanation make you feel less worried about the inclusion of such a feature?

>> I think there's basically no practical benefit over the hierarchical
>> "system" + event-identifier system, where:
> 
> +1. Hierarchial IDs also permit prefix-based wildcarding:
> 
> log.observe("twisted.factory.*")
> log.exclude("twisted.factory.http.*")
> log.observe("myapp.thing")
> log.observe("txSomeProject.event.*")

This is already implemented in <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py>; see for example setLogLevelForNamespace() <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py#L175>.

Namespaces are just python module names by default, but nothing requires that; the only requirement is that they're strings separated with dots.  You can instantiate a Logger object with whatever 'namespace' argument you want.

So: again, you can get what you want exactly and ignore the other stuff.

>> 1. it's trivial to specify a hierarchical, easy-to-read "system" key
>> that has a small-ish scope
>> 2. you think of a unique event name in that small-ish scope and type it out.
>> 
>> I'm beginning to think #1 is the most important of all, but I think
>> I'll continue to use event-names to describe all my log statements.
> 
> I pretty much agree with all of this.

I am still not seeing the utility of one of these identifiers beyond class/method name, but you can always just pass the namespace explicitly.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130615/34e490d3/attachment.html>

From glyph at twistedmatrix.com  Sat Jun 15 05:37:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 04:37:40 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
Message-ID: <E746C265-4D12-4423-B971-457E4FF261AD@twistedmatrix.com>


On Jun 14, 2013, at 11:18 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> This conversation has gotten pretty sprawling; time to reel it in with
> some code.
> 
> What do you think of this for an API that meets in the middle?
> 
> https://gist.github.com/radeex/5787124
> 
> This example implementation only concerns itself with the points under
> debate right now; obviously it's completely unusable in general. But
> anyway:
> 
> 1. it supports English logs
> 2. it doesn't require you to specify a formatting if you want to just
> log a bunch of data
> 3. it makes it easy to specify a system (both manually and based on
> the module your code is in)


First off, thanks again for taking the time to correspond about this, I'm very happy for this conversation to be attracting attention and making progress :).

Moving right along...

This code is relying on the semantics of the existing log.msg() call (which are bad, for the reasons I enumerated in the start of this thread), right down to the dependence on %-formatting.  The main thing I'm interested in at the moment is actually fixing those semantics to be more useful; the specific thing we're talking about here, persistent log identifiers, is interesting to me at the moment mostly as it relates to that.

I realize you might just be relying on it for familiarity, you might not have had time to read the whole new thing, so I'm not trying to tear down your idea based on that alone :).

But Wilfredo already implemented a thing which addresses the namespacing-of-log-messaages issue, and it does about 2/3 of what your proposal already does (except it has, like, tests and stuff).  Right down to the _getframe() hack (although  <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py#L312> uses inspect.currentframe() which has a public-sounding name at least :)).  As I mentioned in my immediately-previous reply, the logger's 'namespace' does not need to be the same as your module name, so it can be a "more persistent" identifier if you have one.

More significantly, you're actually going to the trouble of constructing a format string.  This produces output in an ad-hoc format: '='-separated str()s of your log keys (although only the ones you pass directly in your message; those annotating or augmenting the message at subsequent points by other publishers / observers are ignored), which you are presumably relying upon being smooshed into a plain-text log file, right along side many other messages which do not fit this format.  Presumably this could lead to issues like traceback lines with '=' assignments in them showing up in whatever kind of ad-hoc log-analysis you want to do later, and ambiguous unparseable results if any fields in the log message have a '=' and a space in their repr.

Let's not make it the responsibility of the emitter, or the format string, to get those values into a text log file that can be scanned with a regex (albeit in the case of your proposal, a much-simplified regex).  Let's push that responsibility down into the log observer, and actually save it as structured data and *parse* it later.

As all the hip young kids will tell you, this type of data should be persisted with JSON, but we should probably have code to support multiple formats.  Another advantage of serializing and parsing the logs as structured data would allow tools written to work on a "live" log observer to also analyze persistent logs in at least a similar way, if not entirely the same way.

(An object that has survived the grim ordeal of translation to and from JSON will surely be made less by the process, and can't be treated quite the same way by a log observer; but, as I'm sure you'll agree, this is probably better than the alternative of Pickle.  An unpickled object will be brought fully back to life, but, in the words of the recent NIN release, it will have "came back haunted".)

Maybe we could even do a SQLite observer.  Honestly I'm not sure which format is best.

Since it's also important to be able to *filter* logs, and avoid the work of formatting or serializing them at all, it would be best to push this work as far down the line as possible.  The construction of the format string is itself a whole ton of string-copying, the sort of thing I'd really like to avoid.  (Last I measured, dictionary operations that don't cause a reallocation - and most don't, unless you're inserting in a long loop - are cheaper than even apparently small string copies.)

In fact, it strikes me that perhaps *this* is the feature we should be talking about implementing: writing a structured log observer and parser, firming up the contract between emitters and observers so it's clear what to do with data that can't be serialized - more than exactly which fields we use to identify messages that are interesting to us.

Relatedly, we could make log analysis a first-class task; instead of assuming someone will grep the log file later, actually provide a simple log-query tool that users can plug their code into, presuming they're using a log format which is cleanly parseable.  Maybe have a little web resource that serves up nicely formatted views of your logs.

I can implement the UUID thing as a completely separate ticket and we can discuss it on its own merits; meanwhile, you can happily add log IDs to everything in your applications.  I'd be quite happy to table this part of the conversation for a separate ticket; I just thought it would be a nice thing that could fall out of some of the other parts of a new logging system.


-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130615/e3f97758/attachment-0001.html>

From p.mayers at imperial.ac.uk  Sat Jun 15 06:28:06 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 15 Jun 2013 13:28:06 +0100
Subject: [Twisted-Python] logging
In-Reply-To: <7E55CCC3-0847-4D8F-AE06-21FB1D48B4C8@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
 <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
 <51BC4814.8080006@imperial.ac.uk>
 <7E55CCC3-0847-4D8F-AE06-21FB1D48B4C8@twistedmatrix.com>
Message-ID: <51BC5DD6.9040800@imperial.ac.uk>

On 06/15/2013 12:13 PM, Glyph wrote:

> I am really, really puzzled by this reaction.  I am wondering if you
> read my message carefully, or if I didn't express myself well.

Careful re-reading of the very last bit of your message suggests I may 
have misunderstood.

I think I understand the "final" stage, and in that situation the UUID 
is invisible, correct? It's hidden behind the declaration of a "log 
event" object which can be called to emit or observe said events. That 
seems fine, though I'm not sure what the UUID *does* in that situation - 
route/match is via python object access, no?

I *think* I now understand the intermediate stage, where the log events 
are emitted by old code, and observed by UUID. You're suggesting 
calculating the UUID from the module name and static data (format 
string). I guess that's no worse than any other solution - until the log 
emitter is converted to a newer/better API, there's no great way to 
observe it.

Before we proceed, can you confirm I've understood your proposal correctly?


From radix at twistedmatrix.com  Sat Jun 15 09:33:25 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 10:33:25 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <7FDD43C4-4456-4ED3-9F7F-EF14FC34EB44@ox.cx>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
 <7FDD43C4-4456-4ED3-9F7F-EF14FC34EB44@ox.cx>
Message-ID: <CAPkRfUSzhxZ4BHwUWE96-Y2n9JKmd+QfMjQa4yfdruXtu_EtDA@mail.gmail.com>

On Sat, Jun 15, 2013 at 2:18 AM, Hynek Schlawack <hs at ox.cx> wrote:
>
> Am 15.06.2013 um 08:18 schrieb Christopher Armstrong <radix at twistedmatrix.com>:
>> What do you think of this for an API that meets in the middle?
>>
>> https://gist.github.com/radeex/5787124
>>
>> This example implementation only concerns itself with the points under
>> debate right now; obviously it's completely unusable in general. But
>> anyway:
>>
>> 1. it supports English logs
>> 2. it doesn't require you to specify a formatting if you want to just
>> log a bunch of data
>> 3. it makes it easy to specify a system (both manually and based on
>> the module your code is in)
>
> I?ve held back from this discussion so far because it seemed to me that I always missed some part of the discussion to fully understand what you?re all talking about. I would like to comment on this concrete proposal though before I hold my peace forever. (NB I?m not replying just to Christopher but try to address everything I saw on the thread so far ? I like most of his proposal.)
>
> I find that there?s some kind of false dichotomy brought up in this discussion and API and output are somewhat muddled together a bit (maybe I?m just misunderstanding though ? that?s why I didn?t comment until now).

You're right. I didn't make a strong enough point about the fact that
the output formatting isn't important, but I assumed everyone already
knew that. I should have been more clear.


> I personally like my logs 100% structured (except for Exceptions) and still be able to ?comment? on events in plain English if I need to.
>
> And I don?t see why comments/events should be special case on output (square brackets in this example). If you have an event called user_error, you can always add a key called error for another ?symbol? or just an error_msg if you insist on English. When looking for a certain type of user_error, you simply write an AND clause in your logging software (Kibana or whatever). It?s pretty easy to keep *that* consistent across applications.
>
> For example, *my* log would look like this:
>
> event=user_error peer=127.0.0.1 error=pebkac

The special formatting in the example I gave was only intended for the
dumb file-based format. I thought it was just a nice touch on the spur
of the moment. In practice, I would use this for local logging, but
then set up a log observer that passed raw key/value data to my real
log aggregation/storage/filtering system. I'm making a distinction
between what we show our users (in a twistd.log file) and what we give
to our automated systems (sent over network protocols to logging
systems).

> If the programmer in question hadn?t enough logging pain in their life to see that?s reasonable, they can always do:
>
> event=user_error peer=127.0.0.1 error_msg='Problem exists between keyboard and chair.'
>
> Still perfectly parseable, perfectly readable. And with {!r} easy to achieve. A nice API I would like to have be:
>
> log('user_error', peer=self.transport.getPeer().host, error_msg='Problem exists between keyboard and chair.') ? and log figures out itself if it needs to quote. I could also live with them all quoted, i.e.:
>
> event='user_error' peer='127.0.0.1' error='pebkac'
>
> to have less special cases.

It sounds like you're arguing that the human-readable *.log format
should be closer to the simple key/value representation that we use
underneath.

Would you also argue that instead of having a log line that looks like:

2013-06-15 10:24:21-0500 [-] Server Shut Down.

We should actually format them (in twistd.log) like this?

time=1371331461.0 system='-' msg='Server Shut Down.'

> I hope that makes some sense, the point I?m trying to make that events don?t need to be distinct by themselves. If you enforce that, you?re forcing structure on them which you could spread over multiple fields that are *much* more pleasant to parse.

So, if I had my own way, "event" would be a required argument to the
log() function in my example, so that the only thing I'm forcing on
the structure of a log message is that you *have* an event argument.

But I'm pretty sure that's not going to fly. :-) So the only reason I
wanted to support "event" in a special way in my example is to
emphasize and encourage its use.

> Hynek


--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From radix at twistedmatrix.com  Sat Jun 15 09:46:07 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 10:46:07 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <E746C265-4D12-4423-B971-457E4FF261AD@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
 <E746C265-4D12-4423-B971-457E4FF261AD@twistedmatrix.com>
Message-ID: <CAPkRfUSckcgzeCVr+WN6cGzA-OLGHeSf5PFgs+tdy+J2UrjivA@mail.gmail.com>

On Sat, Jun 15, 2013 at 6:37 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Jun 14, 2013, at 11:18 PM, Christopher Armstrong
> <radix at twistedmatrix.com> wrote:
>
> This conversation has gotten pretty sprawling; time to reel it in with
> some code.
>
> What do you think of this for an API that meets in the middle?
>
> https://gist.github.com/radeex/5787124
>
> This example implementation only concerns itself with the points under
> debate right now; obviously it's completely unusable in general. But
> anyway:
>
> 1. it supports English logs
> 2. it doesn't require you to specify a formatting if you want to just
> log a bunch of data
> 3. it makes it easy to specify a system (both manually and based on
> the module your code is in)
>
>
> First off, thanks again for taking the time to correspond about this, I'm
> very happy for this conversation to be attracting attention and making
> progress :).
>
> Moving right along...
>
> This code is relying on the semantics of the existing log.msg() call (which
> are bad, for the reasons I enumerated in the start of this thread), right
> down to the dependence on %-formatting.  The main thing I'm interested in at
> the moment is actually fixing those semantics to be more useful; the
> specific thing we're talking about here, persistent log identifiers, is
> interesting to me at the moment mostly as it relates to that.
>
> I realize you might just be relying on it for familiarity, you might not
> have had time to read the whole new thing, so I'm not trying to tear down
> your idea based on that alone :).

Yeah... I feel like a lot of the things you say in this email aren't
related to the point I was trying to get across, which was the
interface and effect, not the implementation of it.


>
> But Wilfredo already implemented a thing which addresses the
> namespacing-of-log-messaages issue, and it does about 2/3 of what your
> proposal already does (except it has, like, tests and stuff).  Right down to
> the _getframe() hack (although
> <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py#L312>
> uses inspect.currentframe() which has a public-sounding name at least :)).
> As I mentioned in my immediately-previous reply, the logger's 'namespace'
> does not need to be the same as your module name, so it can be a "more
> persistent" identifier if you have one.
>
> More significantly, you're actually going to the trouble of constructing a
> format string.  This produces output in an ad-hoc format: '='-separated
> str()s of your log keys (although only the ones you pass directly in your
> message; those annotating or augmenting the message at subsequent points by
> other publishers / observers are ignored), which you are presumably relying
> upon being smooshed into a plain-text log file, right along side many other
> messages which do not fit this format.  Presumably this could lead to issues
> like traceback lines with '=' assignments in them showing up in whatever
> kind of ad-hoc log-analysis you want to do later, and ambiguous unparseable
> results if any fields in the log message have a '=' and a space in their
> repr.
>
> Let's not make it the responsibility of the emitter, or the format string,
> to get those values into a text log file that can be scanned with a regex
> (albeit in the case of your proposal, a much-simplified regex).  Let's push
> that responsibility down into the log observer, and actually save it as
> structured data and *parse* it later.
>
> As all the hip young kids will tell you, this type of data should be
> persisted with JSON, but we should probably have code to support multiple
> formats.  Another advantage of serializing and parsing the logs as
> structured data would allow tools written to work on a "live" log observer
> to also analyze persistent logs in at least a similar way, if not entirely
> the same way.
>
> (An object that has survived the grim ordeal of translation to and from JSON
> will surely be made less by the process, and can't be treated quite the same
> way by a log observer; but, as I'm sure you'll agree, this is probably
> better than the alternative of Pickle.  An unpickled object will be brought
> fully back to life, but, in the words of the recent NIN release, it will
> have "came back haunted".)
>
> Maybe we could even do a SQLite observer.  Honestly I'm not sure which
> format is best.

So, I responded to Hynek about this confusion already, so I'll let you
read that. I have always assumed that twistd.log would continue to be
vaguely human-readable, with special formatting for several of the
keys. I also assume that developers will be able to hook up additional
observers to save out .concatenated-json files, or stream to some
network protocol, or whatever. The little bit of formatting my example
does is just a minor convenience for the people still logging at
twistd.log files. The arguments you're making now sounds ilke you want
to et rid of that ad-hoc formatting; is that true? So, instead of


2013-06-15 10:24:21-0500 [-] Server Shut Down.

we should have this?

time=1371331461.0 system='-' msg='Server Shut Down.'

> Since it's also important to be able to *filter* logs, and avoid the work of
> formatting or serializing them at all, it would be best to push this work as
> far down the line as possible.  The construction of the format string is
> itself a whole ton of string-copying, the sort of thing I'd really like to
> avoid.  (Last I measured, dictionary operations that don't cause a
> reallocation - and most don't, unless you're inserting in a long loop - are
> cheaper than even apparently small string copies.)
>
> In fact, it strikes me that perhaps *this* is the feature we should be
> talking about implementing: writing a structured log observer and parser,
> firming up the contract between emitters and observers so it's clear what to
> do with data that can't be serialized - more than exactly which fields we
> use to identify messages that are interesting to us.
>
> Relatedly, we could make log analysis a first-class task; instead of
> assuming someone will grep the log file later, actually provide a simple
> log-query tool that users can plug their code into, presuming they're using
> a log format which is cleanly parseable.  Maybe have a little web resource
> that serves up nicely formatted views of your logs.
>
> I can implement the UUID thing as a completely separate ticket and we can
> discuss it on its own merits; meanwhile, you can happily add log IDs to
> everything in your applications.  I'd be quite happy to table this part of
> the conversation for a separate ticket; I just thought it would be a nice
> thing that could fall out of some of the other parts of a new logging
> system.

Yeah, I'm sorry that this has gotten so much scope-creep. I'll
reiterate that I think redoing what I've been speaking about as the
"system" key is most important (but maybe it should be called
something other than "system", since you've clarified what its intent
was in another email).

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From radix at twistedmatrix.com  Sat Jun 15 10:09:19 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 11:09:19 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
Message-ID: <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>

On Thu, Jun 13, 2013 at 5:14 PM, Glyph <glyph at twistedmatrix.com> wrote:
> Hello everybody. Today I'd like to talk about everyone's favorite subsystem
> within Twisted: logging.
>
> There are a number of problems with Twisted's logging system.
>
> The general theme of these problems is that Twisted log system was designed
> with some intended use-cases in mind, but its implementation was stopped
> halfway through and none of those use-cases were really well satisfied.
>
> At various conferences, and in person at various times, we've gotten
> together to express frustration at the logging system, but I don't think
> that the problems with it have ever been really thoroughly written down.
>
> Wilfredo has been working on logging here:
> http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py.
> This began as an attempt to just address some issues with our own logging
> wrappers, but has been growing into a design that is more fully capable of
> replacing logging within Twisted wholesale. I hope one of us can contribute
> it to Twisted soon, but in the meanwhile, please feel free to provide
> feedback - hopefully if some people can provide a bit of informal feedback
> now, the formal review process can be shorter and more pleasant :).

I like it. Let's merge it.


--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From radix at twistedmatrix.com  Sat Jun 15 10:17:10 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 11:17:10 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>
Message-ID: <CAPkRfUSyw8nEJb6cuQc-tSo-GC4MdXve9BTAdBQO3fnjwv73RA@mail.gmail.com>

On Sat, Jun 15, 2013 at 11:09 AM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> On Thu, Jun 13, 2013 at 5:14 PM, Glyph <glyph at twistedmatrix.com> wrote:
>> Hello everybody. Today I'd like to talk about everyone's favorite subsystem
>> within Twisted: logging.
>>
>> There are a number of problems with Twisted's logging system.
>>
>> The general theme of these problems is that Twisted log system was designed
>> with some intended use-cases in mind, but its implementation was stopped
>> halfway through and none of those use-cases were really well satisfied.
>>
>> At various conferences, and in person at various times, we've gotten
>> together to express frustration at the logging system, but I don't think
>> that the problems with it have ever been really thoroughly written down.
>>
>> Wilfredo has been working on logging here:
>> http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py.
>> This began as an attempt to just address some issues with our own logging
>> wrappers, but has been growing into a design that is more fully capable of
>> replacing logging within Twisted wholesale. I hope one of us can contribute
>> it to Twisted soon, but in the meanwhile, please feel free to provide
>> feedback - hopefully if some people can provide a bit of informal feedback
>> now, the formal review process can be shorter and more pleasant :).
>
> I like it. Let's merge it.


I think I would just want one more feature:

>>> Logger().emit(dudelog.LogLevel.warn, a="hi")

Right now, this doesn't spit out anything into my log file, with
default observers. I want it to emit some simple representation of the
keys and values.

On the other hand, the same is true of log.msg(a="hi"), but maybe this
should be implemented (somehow) in Logger() codepath to avoid breaking
compatibility?


--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From glyph at twistedmatrix.com  Sat Jun 15 20:03:33 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 19:03:33 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <51BC5DD6.9040800@imperial.ac.uk>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
 <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
 <51BC4814.8080006@imperial.ac.uk>
 <7E55CCC3-0847-4D8F-AE06-21FB1D48B4C8@twistedmatrix.com>
 <51BC5DD6.9040800@imperial.ac.uk>
Message-ID: <76853093-1060-493F-8D0B-DFF510EAE1D3@twistedmatrix.com>


On Jun 15, 2013, at 5:28 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 06/15/2013 12:13 PM, Glyph wrote:
> 
>> I am really, really puzzled by this reaction.  I am wondering if you
>> read my message carefully, or if I didn't express myself well.
> 
> Careful re-reading of the very last bit of your message suggests I may have misunderstood.

OK, whew :).

> I think I understand the "final" stage, and in that situation the UUID is invisible, correct? It's hidden behind the declaration of a "log event" object which can be called to emit or observe said events.

That's right.

> That seems fine, though I'm not sure what the UUID *does* in that situation - route/match is via python object access, no?

What it does is it allows *older* monitoring scripts to work.  It also holds on to the UUID internally so that if, for example, the module's name is changed in the future, the API name can be re-named and code can be pointed at it via the normal deprecate/redirect mechanism.  (Of course, _any_ sort of explicit / unique identifier would work for this latter use-case; it's just that this one has the benefit of not visibly containing the string that has now been changed, and so there's no long-term impulse to "clean it up" further and thus break stuff.)

> I *think* I now understand the intermediate stage, where the log events are emitted by old code, and observed by UUID. You're suggesting calculating the UUID from the module name and static data (format string). I guess that's no worse than any other solution - until the log emitter is converted to a newer/better API, there's no great way to observe it.

> Before we proceed, can you confirm I've understood your proposal correctly?

Sounds like you've got it just about right now.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130615/67290cbb/attachment.html>

From glyph at twistedmatrix.com  Sat Jun 15 20:17:11 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 19:17:11 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUSzhxZ4BHwUWE96-Y2n9JKmd+QfMjQa4yfdruXtu_EtDA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
 <7FDD43C4-4456-4ED3-9F7F-EF14FC34EB44@ox.cx>
 <CAPkRfUSzhxZ4BHwUWE96-Y2n9JKmd+QfMjQa4yfdruXtu_EtDA@mail.gmail.com>
Message-ID: <90249514-A365-418C-8A67-D1B862629B57@twistedmatrix.com>


On Jun 15, 2013, at 8:33 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> It sounds like you're arguing that the human-readable *.log format
> should be closer to the simple key/value representation that we use
> underneath.
> 
> Would you also argue that instead of having a log line that looks like:
> 
> 2013-06-15 10:24:21-0500 [-] Server Shut Down.
> 
> We should actually format them (in twistd.log) like this?
> 
> time=1371331461.0 system='-' msg='Server Shut Down.'


I'm actually arguing that, in the log *file* it should look like this:

{"log_format": "{service} service shut down.", "log_system": "-", "log_time": 1371331461.0, "service": "dns"}

When a human actually reads it (with, as a straw man, 'python -m twisted.python.log read twistd.log.json'), I'd rather it still read somewhat like the above starting '2013...': except, for example, with the time translated into their local timezone (or the timezone of the computer where they're reading the logs, at least).

But I'm not saying that we should change the default twistd.log format for now; I'm sure there's tons of tooling built up around the ad-hoc text-based nature of it as it is and I wouldn't want to break that.  I'm just saying that we should add additional options for logging to things other than plain text files, and those are the things that we should build tools to get information back out of.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130615/bff001f4/attachment.html>

From glyph at twistedmatrix.com  Sat Jun 15 20:24:22 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 19:24:22 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUSckcgzeCVr+WN6cGzA-OLGHeSf5PFgs+tdy+J2UrjivA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
 <E746C265-4D12-4423-B971-457E4FF261AD@twistedmatrix.com>
 <CAPkRfUSckcgzeCVr+WN6cGzA-OLGHeSf5PFgs+tdy+J2UrjivA@mail.gmail.com>
Message-ID: <839B5674-3302-41F6-ABD8-529C3D1695C6@twistedmatrix.com>


On Jun 15, 2013, at 8:46 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> Yeah... I feel like a lot of the things you say in this email aren't
> related to the point I was trying to get across, which was the
> interface and effect, not the implementation of it.

Even if it's not really what you'd intended, I think it's pretty good to keep discussing these issues (avoiding unnecessary formatting, putting the right responsibilities in the right place).

> I also assume that developers will be able to hook up additional
> observers to save out .concatenated-json files, or stream to some
> network protocol, or whatever. 

To reiterate a little from my previous reply, I think we should be, as much as possible, moving to make that the default.  Now, actually making it the default is a pretty disruptive change, but I think we could get as far as "implement the feature at all" before anyone would start complaining ;).

In other words, every developer should not have to realize they should write a JSON(ish) emitter and figure out how to get that to work on their own; we should just provide one that does the right thing.

To dial this back to what we actually need to talk about in the proposed log system, the issue is mostly to do with 

>> I can implement the UUID thing as a completely separate ticket and we can
>> discuss it on its own merits; meanwhile, you can happily add log IDs to
>> everything in your applications.  I'd be quite happy to table this part of
>> the conversation for a separate ticket; I just thought it would be a nice
>> thing that could fall out of some of the other parts of a new logging
>> system.
> 
> Yeah, I'm sorry that this has gotten so much scope-creep.

No problem.  This is all good stuff to talk about; we don't discuss operational concerns of managing Twisted services (either server *or* client side) nearly often enough on this list.  I wish we had more discussions like this!

> I'll reiterate that I think redoing what I've been speaking about as the
> "system" key is most important (but maybe it should be called
> something other than "system", since you've clarified what its intent
> was in another email).


Well, "system" was a pretty horrible name for the thing satisfying that intent.  We have "log_namespace" in the new logging system, and I think that (in combination with an idiomatic "log_id", that only needs to be unique within that namespace) you could get more or less what you want.

I think we're going to drop the "system" key entirely (except in the contexts where it's required for compatibility, of course).  Jean-Paul's recent comment in the quote file is apropos.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130615/93a60515/attachment-0001.html>

From glyph at twistedmatrix.com  Sat Jun 15 20:38:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 19:38:31 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUSyw8nEJb6cuQc-tSo-GC4MdXve9BTAdBQO3fnjwv73RA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>
 <CAPkRfUSyw8nEJb6cuQc-tSo-GC4MdXve9BTAdBQO3fnjwv73RA@mail.gmail.com>
Message-ID: <668905ED-ECA7-4CF9-94D2-5D4B910FD854@twistedmatrix.com>


On Jun 15, 2013, at 9:17 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I think I would just want one more feature:
> 
>>>> Logger().emit(dudelog.LogLevel.warn, a="hi")
> 
> Right now, this doesn't spit out anything into my log file, with
> default observers. I want it to emit some simple representation of the
> keys and values.
> 
> On the other hand, the same is true of log.msg(a="hi"), but maybe this
> should be implemented (somehow) in Logger() codepath to avoid breaking
> compatibility?

I keep going back and forth on this.

On the one hand, the main thing I want to do is to just say "if you want your message to appear in the log file, let's just implement a structured log file and you can read it from there.  If you have no human-readable format string to explain your message, clearly you didn't intend for a human to read it."

On the other hand, we already implement log filtering, so filtering the message out of the log based on the absence of the format string is a little overloaded.  And we should really be encouraging people to populate messages with useful structured data.

(I was going to say that without a format string I couldn't have my stand-in UUID feature, but then I realized that namespace + set of keys is probably good enough to generate that too, so never mind.  Also it seems like I'm the only one who likes that feature so maybe it doesn't matter!)

How would you feel about a special token that you have to pass explicitly?

Logger().warn(ALL_KEYS, a="hi")

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130615/93f902cb/attachment.html>

From radix at twistedmatrix.com  Sat Jun 15 22:56:37 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 23:56:37 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <668905ED-ECA7-4CF9-94D2-5D4B910FD854@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>
 <CAPkRfUSyw8nEJb6cuQc-tSo-GC4MdXve9BTAdBQO3fnjwv73RA@mail.gmail.com>
 <668905ED-ECA7-4CF9-94D2-5D4B910FD854@twistedmatrix.com>
Message-ID: <CAPkRfUQHYMR6NY0i7E+H4beOD_CTQR3bXx=dRLQ1QRADTC1DUQ@mail.gmail.com>

On Sat, Jun 15, 2013 at 9:38 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 15, 2013, at 9:17 AM, Christopher Armstrong <
> radix at twistedmatrix.com> wrote:
>
> I think I would just want one more feature:
>
> Logger().emit(dudelog.LogLevel.warn, a="hi")
>
>
> Right now, this doesn't spit out anything into my log file, with
> default observers. I want it to emit some simple representation of the
> keys and values.
>
> On the other hand, the same is true of log.msg(a="hi"), but maybe this
> should be implemented (somehow) in Logger() codepath to avoid breaking
> compatibility?
>
>
> I keep going back and forth on this.
>
> On the one hand, the main thing I want to do is to just say "if you want
> your message to appear in the log file, let's just implement a structured
> log file and you can read it from there.  If you have no human-readable
> format string to explain your message, clearly you didn't intend for a
> human to read it."
>
> On the other hand, we already implement log filtering, so filtering the
> message out of the log based on the absence of the format string is a
> little overloaded.  And we should really be encouraging people to populate
> messages with useful structured data.
>
> (I was going to say that without a format string I couldn't have my
> stand-in UUID feature, but then I realized that namespace + set of keys is
> probably good enough to generate that too, so never mind.  Also it seems
> like I'm the only one who likes that feature so maybe it doesn't matter!)
>
> How would you feel about a special token that you have to pass explicitly?
>
> Logger().warn(ALL_KEYS, a="hi")
>
>
I'm not wild about the need for an extra constant I'd have to import, but
I'd like to understand why you think the arbitrary keys shouldn't be
included in the message. Can you elaborate on why?


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130615/345f4ab7/attachment.html>

From mithrandi at mithrandi.net  Sun Jun 16 10:58:11 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 16 Jun 2013 18:58:11 +0200
Subject: [Twisted-Python] logging
In-Reply-To: <668905ED-ECA7-4CF9-94D2-5D4B910FD854@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>
 <CAPkRfUSyw8nEJb6cuQc-tSo-GC4MdXve9BTAdBQO3fnjwv73RA@mail.gmail.com>
 <668905ED-ECA7-4CF9-94D2-5D4B910FD854@twistedmatrix.com>
Message-ID: <CAMcKhMS47QfJMxWXN=aS_0rxHNYic6V2s1FNgNtMyii5khmJWg@mail.gmail.com>

On Sun, Jun 16, 2013 at 4:38 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> (I was going to say that without a format string I couldn't have my
> stand-in UUID feature, but then I realized that namespace + set of keys is
> probably good enough to generate that too, so never mind.  Also it seems
> like I'm the only one who likes that feature so maybe it doesn't matter!)
>

I don't have anything useful to contribute at the moment, but you can add
me to the list of people who like that feature.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130616/78d9fdef/attachment-0001.html>

From ashfall at twistedmatrix.com  Mon Jun 17 09:39:13 2013
From: ashfall at twistedmatrix.com (Ashwini Oruganti)
Date: Mon, 17 Jun 2013 21:09:13 +0530
Subject: [Twisted-Python] Twisted 13.1.0pre1 is here!
Message-ID: <CAMFCZ-1N+2UrcDAhvwRhELTmsimBohxXKMfzUDsqCttvSLangA@mail.gmail.com>

Hi everyone,

I'm pleased to announce that the pre-release for the upcoming Twisted 13.1
is now available!

You can download the tarballs here:

    http://twistedmatrix.com/~ashfall/13.1.0pre1/

Highlights for this release include:

  * trial now has an --exitfirst flag which stops the test run after the
first error or failure.

  * twisted.internet.ssl.CertificateOptions now supports chain certificates.

  * twisted.conch.endpoints.SSHCommandClientEndpoint is a new
IStreamClientEndpoint which supports
    connecting a protocol to the stdio of a command running on a remote
host via an SSH connection.

  * twisted.web.xmlrpc.QueryProtocol now generates valid Authorization
headers for long user names
    and passwords.

  * self.transport.resumeProducing() will no longer raise an AssertionError
if called after
    self.transport.loseConnection()

For the complete list, see the NEWS file.

Please download the tarballs and test them!

-Ashwini
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130617/fbc08253/attachment.html>

From kevin.horn at gmail.com  Mon Jun 17 12:57:13 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 17 Jun 2013 13:57:13 -0500
Subject: [Twisted-Python] Twisted 13.1.0pre1 is here!
In-Reply-To: <CAMFCZ-1N+2UrcDAhvwRhELTmsimBohxXKMfzUDsqCttvSLangA@mail.gmail.com>
References: <CAMFCZ-1N+2UrcDAhvwRhELTmsimBohxXKMfzUDsqCttvSLangA@mail.gmail.com>
Message-ID: <CA+U=zK0WsJNdpVPdcNjTqLWxwDOX14f48hB3oEEsNyDe68+BXg@mail.gmail.com>

<happydance>


On Mon, Jun 17, 2013 at 10:39 AM, Ashwini Oruganti <
ashfall at twistedmatrix.com> wrote:

> Hi everyone,
>
> I'm pleased to announce that the pre-release for the upcoming Twisted 13.1
> is now available!
>
> You can download the tarballs here:
>
>     http://twistedmatrix.com/~ashfall/13.1.0pre1/
>
> Highlights for this release include:
>
>   * trial now has an --exitfirst flag which stops the test run after the
> first error or failure.
>
>   * twisted.internet.ssl.CertificateOptions now supports chain
> certificates.
>
>   * twisted.conch.endpoints.SSHCommandClientEndpoint is a new
> IStreamClientEndpoint which supports
>     connecting a protocol to the stdio of a command running on a remote
> host via an SSH connection.
>
>   * twisted.web.xmlrpc.QueryProtocol now generates valid Authorization
> headers for long user names
>     and passwords.
>
>   * self.transport.resumeProducing() will no longer raise an
> AssertionError if called after
>     self.transport.loseConnection()
>
> For the complete list, see the NEWS file.
>
> Please download the tarballs and test them!
>
> -Ashwini
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130617/d943771f/attachment.html>

From foom at fuhm.net  Mon Jun 17 18:48:03 2013
From: foom at fuhm.net (James Y Knight)
Date: Mon, 17 Jun 2013 20:48:03 -0400
Subject: [Twisted-Python] logging
In-Reply-To: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
Message-ID: <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>

I'm surprised that a thread with 32 messages about logging doesn't seem to have once mentioned windows events, osx structured syslog, or systemd journal as important design points. 

Maybe people are thinking about such things in the background but it looks a lot like this is being designed in a vacuum when there's plenty of air around.

And, no sane sysadmin should ever want a twisted-specific log file format or to write custom python log filters. That's crazy. Gimme a verbosity knob and the ability to emit structured log events to existing systems, with a fallback plain text file format. Great.

The prime goal, it seems to me, should be exposing features useful for facilities present in existing log systems.

And having a logging system which doesn't even support a basic log level is just silly. Hopefully the new system can at least have that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130617/a9b42ad8/attachment.html>

From radix at twistedmatrix.com  Mon Jun 17 21:02:15 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 17 Jun 2013 22:02:15 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
Message-ID: <CAPkRfURDfa+rYS6FeJn1w4RuOskicXQaJjFg9V-U078wiNftqg@mail.gmail.com>

On Mon, Jun 17, 2013 at 7:48 PM, James Y Knight <foom at fuhm.net> wrote:

> I'm surprised that a thread with 32 messages about logging doesn't seem to
> have once mentioned windows events, osx structured syslog, or systemd
> journal as important design points.
>
> Maybe people are thinking about such things in the background but it looks
> a lot like this is being designed in a vacuum when there's plenty of air
> around.
>
> And, no sane sysadmin should ever want a twisted-specific log file format
> or to write custom python log filters. That's crazy. Gimme a verbosity knob
> and the ability to emit structured log events to existing systems, with a
> fallback plain text file format. Great.
>
> The prime goal, it seems to me, should be exposing features useful for
> facilities present in existing log systems.
>
> And having a logging system which doesn't even support a basic log level
> is just silly. Hopefully the new system can at least have that.
>
>
The proposed logging module does include levels.

Also, I have definitely been thinking of real logging systems during this
conversation -- in fact, I've been planning on experimenting with some of
the popular *structured* logging systems these days and I plan on
implementing and contributing log observers for them. I do think the "json
file" log format is pretty pointless, though it might be a nifty exercise
(unless there is some structured log aggregation system that reads json
data from disk files?)

I think your accusations of design in a vacuum are too hasty and
inflammatory. The whole reason I'm so interested in this discussion is to
take advantage of *real* logging systems that can aggregate, filter, and
search lots of log streams, based on structured event streams.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130617/42579056/attachment.html>

From glyph at twistedmatrix.com  Mon Jun 17 21:50:37 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 17 Jun 2013 20:50:37 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
Message-ID: <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>

On Jun 17, 2013, at 5:48 PM, James Y Knight <foom at fuhm.net> wrote:

> I'm surprised that a thread with 32 messages about logging doesn't seem to have once mentioned windows events, osx structured syslog, or systemd journal as important design points. 

As it happens I was discussing exactly that!  In a sense, they're just observers, and it's just a matter of persisting whatever fields are present to the various backend systems.

> Maybe people are thinking about such things in the background but it looks a lot like this is being designed in a vacuum when there's plenty of air around.

So yes, I, at least, have been thinking about them, abstractly.  But you raise a good point: we should be talking about them concretely and making sure that we could at least take advantage of the facilities they offer before we finalize anything.

However, then you fail to discuss them concretely :).  Do you have any practical experiences with these systems that would indicate what features would be useful to abstract over or how they should be exposed?

> And, no sane sysadmin should ever want a twisted-specific log file format or to write custom python log filters. That's crazy. Gimme a verbosity knob and the ability to emit structured log events to existing systems, with a fallback plain text file format. Great.

There is a reason why we should support such a thing, by which I mean a "Twisted specific" format in the sense of something like line-delimited JSON (or whatever).  We have an API for emitting log messages, and an API for observing log messages as they occur.  If someone were to use the latter API to produce some software that does a useful thing, it would be very good to have a built-in, platform-independent format for logs that could easily be reconstituted into something that is a reasonable enough facsimile of the information available at runtime.  That way log analysis using our log-analysis API would be possible offline without rewriting your online analysis tool to consume input from systemd, ASL, and windows event log instead of a Twisted observer.

I agree that our existing text format is basically pointless, but there are two reasons to keep it around.

First, it seem to be something that some sysadmins expect; there's definitely an archetype of sysadmin who prefers everything to be in "plain text" so they can run their perl scripts over it; someone more comfortable with regexes than structured data.  Maybe you wouldn't characterize these people as sane, but they're definitely extant, and some of them, at least, run Twisted services.

The second reason to keep the text format around is that even sysadmins who would _prefer_ structured data in an existing log facility have probably written some gross hacks to deal with twistd.log by now because we haven't previously exposed it in any meaningful way, so we need to preserve the existing format for some amount of compatibility.

My hope is that we can convince them to upgrade to some sort of structured system on its own merits, at the very least a log file that can be parsed reliably.

> The prime goal, it seems to me, should be exposing features useful for facilities present in existing log systems.

That's certainly a goal, but it's a little longer term than the prime goal, which is to present a logging API that encourages any structure (and filtering based on that structure) to be expressed at all.  It would of course be much better if that structure were aligned with existing logging systems.  If we had logging with structured messages already, there'd at least be a hope of writing a somewhat useful translator to these back-end systems.  As it is, sadly, we're going to have to touch almost every log.msg() call within Twisted to get any useful information out.

> And having a logging system which doesn't even support a basic log level is just silly. Hopefully the new system can at least have that.

The new system being proposed does have log levels.  (And, for that matter, so does Twisted currently; we've had log levels for compatibility with stlib Python logging forever.)

I still don't think that log levels are a particularly useful bit of structured information, and this is one reason I want to have our own structured format, to make sure that the other bits of more useful information hang around for longer in a useful form.  

I've been convinced that it's unhelpful to be contrarian and omit information which can be useful to a whole bunch of other systems and existing practices.  (Also, the effort described therein is way too ambitious to do in any reasonable time frame unless someone wanted to make logging in Twisted their full-time job for at least a year.)  Plus, I've seen some utility in Calendar Server from the use of the intersection of "level" and "namespace", although blanket application of log levels is still a crapshoot.

(So, other than those caveats, everything I said about identifying the audience and intent of messages in <http://glyph.twistedmatrix.com/2009/06/who-wants-to-know.html> still applies.)

Do all the systems you mentioned have the same set of log levels, or will there be some need to harmonize them?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130617/380aaed4/attachment-0001.html>

From xieweikai at gmail.com  Tue Jun 18 00:12:17 2013
From: xieweikai at gmail.com (Weikai (Victor) Xie)
Date: Tue, 18 Jun 2013 16:12:17 +1000
Subject: [Twisted-Python] Problem with installing twisted 13.0 with Python
	2.7 on 64 bit Win 7
Message-ID: <CAHk1ir+0xrAMZx9zsgmkgVv9LJMPr0U0DDOBt_QJWYVSSP0mrw@mail.gmail.com>

Hi, folks,

I was trying to install twisted 13.0 on my 64 bit win 7 but get some
strange problem - there is no sub-packages available under twisted!

Here is a screen copy:

Python 2.7.4 (default, Apr  6 2013, 19:54:46) [MSC v.1500 32 bit (Intel)]
on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import twisted
>>> twisted.web
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'web'
>>> dir(twisted)
['__builtins__', '__doc__', '__file__', '__name__', '__package__',
'__path__', '__version__', '_checkRequirements', '_version', 'python', 'v
ersion']
>>> twisted.version
Version('twisted', 13, 0, 0)


Although the screen copy shows I'm using Python 2.7 32 bits, I have also
tried Python 2.7 64bits and get just the same problem.

I have tried both installing by running the 32bit window binary setup
package from twisted website and building from the source tar ball. Both
ways give the same result.




Regards,

Weikai (Victor)  Xie
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/bbcd525a/attachment.html>

From screwtape at froup.com  Tue Jun 18 02:07:37 2013
From: screwtape at froup.com (Tim Allen)
Date: Tue, 18 Jun 2013 18:07:37 +1000
Subject: [Twisted-Python] Problem with installing twisted 13.0 with
 Python 2.7 on 64 bit Win 7
In-Reply-To: <CAHk1ir+0xrAMZx9zsgmkgVv9LJMPr0U0DDOBt_QJWYVSSP0mrw@mail.gmail.com>
References: <CAHk1ir+0xrAMZx9zsgmkgVv9LJMPr0U0DDOBt_QJWYVSSP0mrw@mail.gmail.com>
Message-ID: <20130618080737.GJ8156@boombah.thristian.org>

On Tue, Jun 18, 2013 at 04:12:17PM +1000, Weikai (Victor) Xie wrote:
> >>> import twisted
> >>> twisted.web
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
> AttributeError: 'module' object has no attribute 'web'

I believe that's just how packages work in Python. On a Linux machine
I have handy:

>>> import twisted
>>> twisted.web
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'web'
>>> import twisted.web
>>> twisted.web
<module 'twisted.web' from '/usr/lib64/python2.6/site-packages/twisted/web/__init__.pyc'>



From therve at twistedmatrix.com  Tue Jun 18 02:07:39 2013
From: therve at twistedmatrix.com (=?UTF-8?Q?Thomas_Herv=C3=A9?=)
Date: Tue, 18 Jun 2013 10:07:39 +0200
Subject: [Twisted-Python] Problem with installing twisted 13.0 with
 Python 2.7 on 64 bit Win 7
In-Reply-To: <CAHk1ir+0xrAMZx9zsgmkgVv9LJMPr0U0DDOBt_QJWYVSSP0mrw@mail.gmail.com>
References: <CAHk1ir+0xrAMZx9zsgmkgVv9LJMPr0U0DDOBt_QJWYVSSP0mrw@mail.gmail.com>
Message-ID: <CA+G4qugumNW+EXTn4wXmivLQPydLo7EJo2pgYp1bv8M44H3PuQ@mail.gmail.com>

On Tue, Jun 18, 2013 at 8:12 AM, Weikai (Victor) Xie <xieweikai at gmail.com>wrote:

> Hi, folks,
>
> I was trying to install twisted 13.0 on my 64 bit win 7 but get some
> strange problem - there is no sub-packages available under twisted!
>
> Here is a screen copy:
>
> Python 2.7.4 (default, Apr  6 2013, 19:54:46) [MSC v.1500 32 bit (Intel)]
> on win32
> Type "help", "copyright", "credits" or "license" for more information.
> >>> import twisted
> >>> twisted.web
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
> AttributeError: 'module' object has no attribute 'web'
> >>> dir(twisted)
> ['__builtins__', '__doc__', '__file__', '__name__', '__package__',
> '__path__', '__version__', '_checkRequirements', '_version', 'python', 'v
> ersion']
> >>> twisted.version
> Version('twisted', 13, 0, 0)
>
>
 That's not how import works. Try "import twisted.web". It'd be interesting
to see what's on your filesystem too (like
os.listdir(os.path.dirname(twisted.__file__))).

-- 
Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/8b589bc0/attachment.html>

From kylerzhang11 at gmail.com  Tue Jun 18 06:12:01 2013
From: kylerzhang11 at gmail.com (zhang kai)
Date: Tue, 18 Jun 2013 20:12:01 +0800
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are called
 with error other than CancelledError, is this acceptable?
Message-ID: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>

If I cancel a Deferred, the errbacks of the Deferred are not called with
CancelledError but with other errors like ConnectionDone, is this
acceptable?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/3e11ac46/attachment.html>

From itamar at futurefoundries.com  Tue Jun 18 07:37:59 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Tue, 18 Jun 2013 09:37:59 -0400
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
Message-ID: <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>

By way of background, Kai Zhang is one of our GSoC interns, working on
adding Deferred cancellation support to Twisted. I believe the specific
module he is working on is the POP3 client, but it's a general question -
should we try to keep CancelledError percolating all the way to the top of
callback chain when possible? My first thought is "yes" since that's a more
informative reason, but maybe someone else has a counter-argument.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/50a00c9f/attachment.html>

From peter.westlake at pobox.com  Tue Jun 18 09:25:46 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 18 Jun 2013 16:25:46 +0100
Subject: [Twisted-Python] logging
In-Reply-To: <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
Message-ID: <1371569146.32178.140661245381745.62913D07@webmail.messagingengine.com>

On Tue, Jun 18, 2013, at 4:50, Glyph wrote:
> On Jun 17, 2013, at 5:48 PM, James Y Knight <foom at fuhm.net> wrote:
...
> > And having a logging system which doesn't even support a basic
> > log level is just silly. Hopefully the new system can at least
> > have that.
>
> The new system being proposed does have log levels.  (And, for that
> matter, so does Twisted currently; we've had log levels for
> compatibility with stlib Python logging forever.)

It's quite well hidden, though. Looking at
http://twistedmatrix.com/documents/current/api/twisted.python.log.html,
there is no mention of logging levels. For that matter it doesn't
mention twisted.python.log.msg() either!

Peter.


From radix at twistedmatrix.com  Tue Jun 18 09:42:50 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 18 Jun 2013 10:42:50 -0500
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
Message-ID: <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>

On Tue, Jun 18, 2013 at 8:37 AM, Itamar Turner-Trauring <
itamar at futurefoundries.com> wrote:

> By way of background, Kai Zhang is one of our GSoC interns, working on
> adding Deferred cancellation support to Twisted. I believe the specific
> module he is working on is the POP3 client, but it's a general question -
> should we try to keep CancelledError percolating all the way to the top of
> callback chain when possible? My first thought is "yes" since that's a more
> informative reason, but maybe someone else has a counter-argument
>

I definitely think the error should explain that cancellation occurred; I
can also imagine cases where you'd want to know the specifics of how that
cancellation occurred, or how far some operation got before the
cancellation was executed (especially if we're talking about mutating
operations). ConnectionDone definitely doesn't sound good.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/6b680bb4/attachment.html>

From glyph at twistedmatrix.com  Tue Jun 18 11:45:52 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 18 Jun 2013 10:45:52 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <1371569146.32178.140661245381745.62913D07@webmail.messagingengine.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
 <1371569146.32178.140661245381745.62913D07@webmail.messagingengine.com>
Message-ID: <F3D9613E-107F-4D26-86A9-405C3C49F239@twistedmatrix.com>


On Jun 18, 2013, at 8:25 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

> On Tue, Jun 18, 2013, at 4:50, Glyph wrote:
>> On Jun 17, 2013, at 5:48 PM, James Y Knight <foom at fuhm.net> wrote:
> ...
>>> And having a logging system which doesn't even support a basic
>>> log level is just silly. Hopefully the new system can at least
>>> have that.
>> 
>> The new system being proposed does have log levels.  (And, for that
>> matter, so does Twisted currently; we've had log levels for
>> compatibility with stlib Python logging forever.)
> 
> It's quite well hidden, though. Looking at
> http://twistedmatrix.com/documents/current/api/twisted.python.log.html,
> there is no mention of logging levels. For that matter it doesn't
> mention twisted.python.log.msg() either!

Yes; in general, the current logging system's documentation is atrocious.  Part of this new effort should be to completely re-vamp how we explain things.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/fa590eba/attachment-0001.html>

From glyph at twistedmatrix.com  Tue Jun 18 12:22:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 18 Jun 2013 11:22:43 -0700
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
Message-ID: <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>


On Jun 18, 2013, at 8:42 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On Tue, Jun 18, 2013 at 8:37 AM, Itamar Turner-Trauring <itamar at futurefoundries.com> wrote:
> By way of background, Kai Zhang is one of our GSoC interns, working on adding Deferred cancellation support to Twisted. I believe the specific module he is working on is the POP3 client, but it's a general question - should we try to keep CancelledError percolating all the way to the top of callback chain when possible? My first thought is "yes" since that's a more informative reason, but maybe someone else has a counter-argument
> 
> I definitely think the error should explain that cancellation occurred; I can also imagine cases where you'd want to know the specifics of how that cancellation occurred, or how far some operation got before the cancellation was executed (especially if we're talking about mutating operations). ConnectionDone definitely doesn't sound good.

Making an API that previously documented raising (or failing) exception types A, B, and C raise (or fail with) D is not necessarily a compatible change.  Making it raise (or fail with) A' (a subclass of A) is, though.

I would say that if we want to percolate this information up to the caller, there should be a ConnectingCancelled exception that is a subtype of the previous exception type.

After all, if it's interesting that the operation was cancelled, presumably it's interesting at what stage the operation is cancelled.

For precedent, IStreamClientEndpoint went with this strategy by having the (perhaps unfortunately named) UserError.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/56c9492c/attachment.html>

From _ at lvh.io  Tue Jun 18 13:03:21 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 18 Jun 2013 21:03:21 +0200
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
Message-ID: <CAE_Hg6aVMDMBwLOMBaztnkXkustk+0s1pmzYTP0BhbSNojAMEg@mail.gmail.com>

On Tue, Jun 18, 2013 at 8:22 PM, Glyph <glyph at twistedmatrix.com> wrote:

> I would say that if we want to percolate this information up to the
> caller, there should be a ConnectingCancelled exception that is a subtype
> of the previous exception type.
>

Doesn't that mean we'll have many subclasses that mean that something was
cancelled?

If I didn't take backwards compatibility into account, I would say that
composing the original exception into a new CancellationError (or
something) exception would be preferable. Would you agree that it would be
preferable? (Again, not taking compatibility into account -- I'm trying to
get compatibility vs niceness of API to face off against each other.
Personally, I think it's enough of a change in functionality to warrant a
chance in ways a function can fail, but there's no point in even having
that argument if there's no consensus that the composed way would even be
better...)


> After all, if it's interesting that the operation was cancelled,
> presumably it's interesting *at what stage* the operation is cancelled.
>

IIUC that would work the same with composition as inheritance :)


cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/4a93cbaf/attachment.html>

From glyph at twistedmatrix.com  Tue Jun 18 13:54:29 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 18 Jun 2013 12:54:29 -0700
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <CAE_Hg6aVMDMBwLOMBaztnkXkustk+0s1pmzYTP0BhbSNojAMEg@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <CAE_Hg6aVMDMBwLOMBaztnkXkustk+0s1pmzYTP0BhbSNojAMEg@mail.gmail.com>
Message-ID: <219D695E-16F1-4F51-BB6B-0CD9838F7BEF@twistedmatrix.com>


On Jun 18, 2013, at 12:03 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> On Tue, Jun 18, 2013 at 8:22 PM, Glyph <glyph at twistedmatrix.com> wrote:
> I would say that if we want to percolate this information up to the caller, there should be a ConnectingCancelled exception that is a subtype of the previous exception type.
> 
> Doesn't that mean we'll have many subclasses that mean that something was cancelled?
> 
> If I didn't take backwards compatibility into account, I would say that composing the original exception into a new CancellationError (or something) exception would be preferable. Would you agree that it would be preferable? (Again, not taking compatibility into account -- I'm trying to get compatibility vs niceness of API to face off against each other. Personally, I think it's enough of a change in functionality to warrant a chance in ways a function can fail, but there's no point in even having that argument if there's no consensus that the composed way would even be better...)

I agree that it would be preferable, but I don't see how it's possible without making Exception itself composeable.

>  After all, if it's interesting that the operation was cancelled, presumably it's interesting at what stage the operation is cancelled.
> 
> IIUC that would work the same with composition as inheritance :)

Unfortunately inheritance is built into the way Python handles exceptions.  In fact in this case you almost want *multiple* inheritance, so you can say 'except CancelledError:' or 'except ConnectionError:' as appropriate.  :-(

The one saving grace here is that not a whole lot of useful logic can live on the exception objects, so there's a limited amount of opportunity for getting oneself into trouble.

Please prove me wrong, though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/42366f90/attachment.html>

From termim at gmail.com  Tue Jun 18 14:58:04 2013
From: termim at gmail.com (Mikhail Terekhov)
Date: Tue, 18 Jun 2013 16:58:04 -0400
Subject: [Twisted-Python] logging
In-Reply-To: <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
Message-ID: <CALCsMPQowfBDHARBGh+ySqyBKCcnLr=+smO54Czc5DAjWKRs5Q@mail.gmail.com>

On Mon, Jun 17, 2013 at 11:50 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Jun 17, 2013, at 5:48 PM, James Y Knight <foom at fuhm.net> wrote:
>
> And having a logging system which doesn't even support a basic log level
> is just silly. Hopefully the new system can at least have that.
>
> +1


> The new system being proposed does have log levels.  (And, for that
> matter, so does Twisted currently; we've had log levels for compatibility
> with stlib Python logging forever.)
>

But it is impossible to use them in Twisted currently without Python
logging or without writing your own observer AFAICS. If the system being
proposed does have log levels then it is good.


I still don't think that log levels are a particularly useful bit of
> structured information, and this is one reason I want to have our own
> structured format, to make sure that the *other* bits of *more* useful
> information hang around for longer in a useful form.
>

I think you are mixing "structured information" and "structured format"
here. Anyway, current practice proves that log level is one of the most
useful pieces of whatever structured or unstructured information in the log
files. IMHO applies of course.


> I've been convinced that it's unhelpful to be contrarian and omit
> information which can be useful to a whole bunch of other systems and
> existing practices.  (Also, the effort described therein is way too
> ambitious to do in any reasonable time frame unless someone wanted to make
> logging in Twisted their full-time job for at least a year.)  Plus, I've
> seen some utility in Calendar Server from the use of the *intersection* of
> "level" and "namespace", although blanket application of log levels is
> still a crapshoot.
>

That is usually true for any somewhat complex  phenomena - there is no
silver bullet, everything should be used in concert. Take gender for
example - taken alone it doesn't tell everything about a person but still
is a very important piece of information :) Frankly I do not remember a
program or a system where log level was not used in one form or another if
logging was used at all.

(So, other than those caveats, everything I said about identifying the
> audience and intent of messages in <
> http://glyph.twistedmatrix.com/2009/06/who-wants-to-know.html> still
> applies.)
>

I agree. It is so tempting to design something that will rule them all :)
Unfortunately such a generic project usually is destined not to be
completed :( (like Lore to Sphinx conversion ::() (I hope that the number
of smiles is enough to indicate the level of seriousness in the above
paragraphs ;} ) Seriously, the only things that could probably be general
enough to provide ready made interface among gazillions of
applications/domains are the time stamp and the log level. The third one -
the source of the message is also general but its values are very
application specific. Everything else is too application specific to hard
code into generic library like Twisted. There should be a way to implement
them if needed of course. Among these only log level is missing in Twisted
and logPrefix should be fixed to always show correct names.

>From the practical POV the most welcomed first step in updating the Twisted
log system would be introduction of ready made log levels (with an ability
to filter on them in observers), fix of logPrefix thing and somewhat
extended set of available observers (syslog, email, socket, etc.)
Everything else could wait more detailed design etc.


>
> Do all the systems you mentioned have the same set of log levels, or will
> there be some need to harmonize them?
>

IMHO the level of consensus in the set of log levels is not all that bad.
The ones used in Python logging together with ability to add custom levels
is good enough for almost anything.


Regards,
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/0488ae7b/attachment-0001.html>

From itamar at itamarst.org  Tue Jun 18 15:13:45 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 18 Jun 2013 17:13:45 -0400
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
Message-ID: <51C0CD89.6010101@itamarst.org>

On 06/18/2013 02:22 PM, Glyph wrote:
> Making an API that previously documented raising (or failing) 
> exception types A, B, and C raise (or fail with) D is not necessarily 
> a compatible change.  Making it raise (or fail with) A' (a subclass of 
> A) is, though.
>
The API for pop3client does *not* document the expected exceptions, so 
backwards compatibility isn't really an issue here.


From glyph at twistedmatrix.com  Tue Jun 18 15:24:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 18 Jun 2013 14:24:40 -0700
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <51C0CD89.6010101@itamarst.org>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <51C0CD89.6010101@itamarst.org>
Message-ID: <83F58187-A878-4FA5-AB28-3A3CBB511051@twistedmatrix.com>


On Jun 18, 2013, at 2:13 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> On 06/18/2013 02:22 PM, Glyph wrote:
>> Making an API that previously documented raising (or failing) exception types A, B, and C raise (or fail with) D is not necessarily a compatible change.  Making it raise (or fail with) A' (a subclass of A) is, though.
>> 
> The API for pop3client does *not* document the expected exceptions, so backwards compatibility isn't really an issue here.

Hrm.  I would say that if you don't document exceptions, then you just have to support whatever your behavior was before :).

http://twistedmatrix.com/trac/wiki/CompatibilityPolicy does not explore this issue, though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/207606ce/attachment.html>

From terry at jon.es  Tue Jun 18 15:33:14 2013
From: terry at jon.es (Terry Jones)
Date: Tue, 18 Jun 2013 22:33:14 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <219D695E-16F1-4F51-BB6B-0CD9838F7BEF@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <CAE_Hg6aVMDMBwLOMBaztnkXkustk+0s1pmzYTP0BhbSNojAMEg@mail.gmail.com>
 <219D695E-16F1-4F51-BB6B-0CD9838F7BEF@twistedmatrix.com>
Message-ID: <CACqnu4UfWA+uiKKM3-3ChHU5BRnMi3CaodEGTKk-5UqUe=k=GQ@mail.gmail.com>

First off, +1 on propagating the CancelledError failure (or something even
more specific) all the way back up the errback chain.

lvh> Personally, I think it's enough of a change in functionality to
warrant a chance in ways a function can fail

I'm not sure what change in functionality you mean. Deferreds are already
cancelable, and functions aren't going to fail in new ways. The only thing
that's new here is that a different value might be given to the
failure.Failure constructor and passed along the errback chain.

glyph> In fact in this case you almost want *multiple* inheritance, so you
can say 'except CancelledError:' or 'except ConnectionError:' as
appropriate.

If a deferred has been canceled and the errback fired, why can't code like
`fail.check(CancelledError, ConnectionError, ...)` be used?

Sorry if I'm wrong/forgetful (I'm old), but it seems like lvh & glyph are
talking about exceptions when they should be talking about handling Failure
instances arriving via the errback chain.

A couple of comments:

 - There are conceptually 3 places a deferred might be cancelled. 1. The
code that makes the deferred might call cancel for some reason (e.g.,
service shutdown). 2. Intermediate code that called the code that creates
the deferred and which passes the deferred on might cancel it. 3. The
originating code (that uses a Twisted (or other library) API call) might
decide to cancel it (e.g., due to timeout).

In case 1, the documented interface of the API call can say what it does if
it cancels a deferred. E.g., that a CancelledError failure will be
delivered down the errback chain (the default behavior), or that some other
kind of failure will be sent. A function could even allow the calling code
to pass in a value that should be sent down the errback chain (wrapped in a
Failure) when/if the deferred it creates is cancelled.  E.g. (pseudo-code):

    def doSomething(cancelValue=None):
        if cancelValue is not None:
            deferred = Deferred(lambda d:
d.errback(failure.Failure(cancelValue)))
        else:
            deferred = Deferred()
        # Now do other things to arrange for 'deferred' to fire or fail.
        return deferred

Case 2 is almost never going to happen. The intermediate code gets a
deferred from someplace, maybe adds call/errbacks to it, and passes it on.
If that code wants to hold on to the deferred it received and cancel it for
some reason, it could do so, but it wont have any control over the failure
value that comes down the errback chain.

Case 3 is more interesting, and is the main reason deferred cancelation was
interesting me to (please see this thread for some background on how we got
here:
http://twistedmatrix.com/pipermail/twisted-python/2010-January/021298.html).
In this case, the original calling code wants to cancel the deferred.
E.g., it has made a call to something that makes a network call and after
some timeout decides it needs to proceed without the result. Due to its
setup (using deferreds) the cleanest way for that code to proceed is to
trigger the deferred itself. If it can do that, the normal (errback) error
processing chain can simply handle the case where the deferred is cancelled.

A slight difficulty with the current situation is that code that obtains a
deferred made by other code can't tell, if the deferred is cancelled, who
cancelled it (or why). That includes the case where the code that received
the deferred cancels it itself. I.e., if the code that makes the deferred
cancels it (in the default way) or the code that receives the deferred
cancels it (cases 1 and 3 above), the result is the same, a CancelledError
in a failure.

In what I originally proposed (see above link), the caller could errback
the deferred it was given *with a value of its choosing*. That would allow
code to cancel a deferred and also to detect (in an errback) that it had
done so and/or why (code might cancel a deferred for different reasons).
 You can't do that with the implementation that actually landed in Twisted,
though.


A possible way to add some functionality / flexibility (including the above
possibility) in a backwards-compatible way would be to allow
Deferred.cancel to be called with a value argument (default=None to keep it
backwards compat).  If no canceller was given to the Deferred constructor
(or the canceller function did not fire the deferred), Deferred.cancel
would call self.errback(failure.Failure(CancelledError(value))). In that
way, anyone could cancel a deferred and the specific reason passed to
cancel(), if any, would be available in the Python CancelledError instance
as its first argument, as with any Python exception (i.e., args[0]).  In
addition (backwards incompatible, though) the value passed to
Deferred.cancel could also be passed to self._canceller, along with the
deferred itself. I don't think that's needed though, as code doing more
elaborate cancellation can set up any kind of Failure it wants to propagate
back, can document its behavior, and can also allow for caller-specific
values to be passed back (see code fragment above), etc.

OK, sorry if that's all a bit rambling & hard to follow...

Terry



On Tue, Jun 18, 2013 at 8:54 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 18, 2013, at 12:03 PM, Laurens Van Houtven <_ at lvh.io> wrote:
>
> On Tue, Jun 18, 2013 at 8:22 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
>> I would say that if we want to percolate this information up to the
>> caller, there should be a ConnectingCancelled exception that is a subtype
>> of the previous exception type.
>>
>
> Doesn't that mean we'll have many subclasses that mean that something was
> cancelled?
>
> If I didn't take backwards compatibility into account, I would say that
> composing the original exception into a new CancellationError (or
> something) exception would be preferable. Would you agree that it would be
> preferable? (Again, not taking compatibility into account -- I'm trying to
> get compatibility vs niceness of API to face off against each other.
> Personally, I think it's enough of a change in functionality to warrant a
> chance in ways a function can fail, but there's no point in even having
> that argument if there's no consensus that the composed way would even be
> better...)
>
>
> I agree that it would be preferable, but I don't see how it's possible
> without making Exception itself composeable.
>
>  After all, if it's interesting that the operation was cancelled,
> presumably it's interesting *at what stage* the operation is cancelled.
>
> IIUC that would work the same with composition as inheritance :)
>
>
> Unfortunately inheritance is built into the way Python handles exceptions.
>  In fact in this case you almost want *multiple* inheritance, so you can
> say 'except CancelledError:' or 'except ConnectionError:' as appropriate.
>  :-(
>
> The one saving grace here is that not a whole lot of useful logic can live
> on the exception objects, so there's a limited amount of opportunity for
> getting oneself into trouble.
>
> Please prove me wrong, though.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130618/e93c9bfe/attachment.html>

From itamar at itamarst.org  Tue Jun 18 18:36:29 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 18 Jun 2013 20:36:29 -0400
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <83F58187-A878-4FA5-AB28-3A3CBB511051@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <51C0CD89.6010101@itamarst.org>
 <83F58187-A878-4FA5-AB28-3A3CBB511051@twistedmatrix.com>
Message-ID: <51C0FD0D.70002@itamarst.org>

On 06/18/2013 05:24 PM, Glyph wrote:
>
> Hrm.  I would say that if you don't document exceptions, then you just 
> have to support whatever your behavior was before :).
>
> http://twistedmatrix.com/trac/wiki/CompatibilityPolicy does not 
> explore this issue, though.
>
The many possible options in this case include 
ConnectionDone/ConnectionLost/SSL errors and then a few other random 
errors (LineTooLong, ServerGreetingError). Etc. In general for these 
situations it seems like the range of errors is wide enough you always 
need a catch-all error handler anyway.


From tom.prince at ualberta.net  Wed Jun 19 13:49:35 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Wed, 19 Jun 2013 13:49:35 -0600
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
Message-ID: <87y5a5g9tc.fsf@loki.hocat.ca>

Glyph <glyph at twistedmatrix.com> writes:

> On Jun 18, 2013, at 8:42 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:
>
>> On Tue, Jun 18, 2013 at 8:37 AM, Itamar Turner-Trauring <itamar at futurefoundries.com> wrote:
>> I believe the specific module he is working on is the POP3 client,
>> but it's a general question - should we try to keep CancelledError
>> percolating all the way to the top of callback chain when possible?
>> My first thought is "yes" since that's a more informative reason, but
>> maybe someone else has a counter-argument
>> 
>> I definitely think the error should explain that cancellation
>> occurred; I can also imagine cases where you'd want to know the
>> specifics of how that cancellation occurred, or how far some
>> operation got before the cancellation was executed (especially if
>> we're talking about mutating operations). ConnectionDone definitely
>> doesn't sound good.
>
> Making an API that previously documented raising (or failing)
> exception types A, B, and C raise (or fail with) D is not necessarily
> a compatible change.  Making it raise (or fail with) A' (a subclass of
> A) is, though.

Well, it already raises `CancelledError`. Every deferred that doesn't
have explicitly handle cancelling already does:

from twisted.mail import smtp
from twisted.python import log

d = smtp.sendmail("host", "options.sender", [], "")
d.cancel()
d.addErrback(log.err, "Here be CancelledError")


From i at introo.me  Wed Jun 19 20:54:22 2013
From: i at introo.me (Shiyao Ma)
Date: Thu, 20 Jun 2013 10:54:22 +0800
Subject: [Twisted-Python] Switiching to Formal Parser.
Message-ID: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>

Hi. All.
I am a gsoc participant this year, working on switching to formal parser.
This is really an experiment to test whether parsley suits the needs or
not. Tomprince and dash had a talk with me just now and we decided to start
rewriting the twisted.names.dns first.
A new git repo has been made: https://github.com/twisted/parsley-protocols
If you guys have any ideas/interested in that, come on.

-- 

More on: http://about.me/introom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130620/541895a8/attachment.html>

From radix at twistedmatrix.com  Wed Jun 19 21:04:35 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 19 Jun 2013 22:04:35 -0500
Subject: [Twisted-Python] Switiching to Formal Parser.
In-Reply-To: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>
References: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>
Message-ID: <CAPkRfURwvx95HTDgDx8F1nuCH2=Qt12GzV=HqgbyyyV8x4t6=A@mail.gmail.com>

On Wed, Jun 19, 2013 at 9:54 PM, Shiyao Ma <i at introo.me> wrote:

> Hi. All.
> I am a gsoc participant this year, working on switching to formal parser.
> This is really an experiment to test whether parsley suits the needs or
> not. Tomprince and dash had a talk with me just now and we decided to start
> rewriting the twisted.names.dns first.
> A new git repo has been made: https://github.com/twisted/parsley-protocols
> If you guys have any ideas/interested in that, come on.
>
>

Hi Shiyao, I'm happy that you chose Twisted as your SoC project. I just
want to point out that Richard Wall (rwall on IRC) has been working a lot
on DNS lately, he may be interested in the work you're doing.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130619/cd93b03e/attachment.html>

From m-lists at the-moon.net  Thu Jun 20 04:14:24 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Thu, 20 Jun 2013 11:14:24 +0100
Subject: [Twisted-Python] Switiching to Formal Parser.
In-Reply-To: <CAPkRfURwvx95HTDgDx8F1nuCH2=Qt12GzV=HqgbyyyV8x4t6=A@mail.gmail.com>
References: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>
 <CAPkRfURwvx95HTDgDx8F1nuCH2=Qt12GzV=HqgbyyyV8x4t6=A@mail.gmail.com>
Message-ID: <CABefbUpTMSoLgEYDH1P8oFFtBcRz0gQ2t45gWd_g7BKrz2Pq1Q@mail.gmail.com>

On 20 June 2013 04:04, Christopher Armstrong <radix at twistedmatrix.com> wrote:
> Hi Shiyao, I'm happy that you chose Twisted as your SoC project. I just want
> to point out that Richard Wall (rwall on IRC) has been working a lot on DNS
> lately, he may be interested in the work you're doing.

Hello Shiyao,

Yes, I'm really pleased that you chose to start with twisted.names and
I'm looking forward to seeing Parsley in action!

I've been working on EDNS support.  (Building on some patches provided
by Bob Novas last year.)
 * https://twistedmatrix.com/trac/wiki/EDNS0
 * https://twistedmatrix.com/trac/ticket/5668 (OPT Record)
 * https://twistedmatrix.com/trac/ticket/5675 (EDNSMessage)
These are currently wrappers around the existing t.n.dns.RRHeader and
t.n.dns.Message, which may or may not be the right approach (feedback
would be very welcome).

I've also been doing some testing and bug fixing of twisted.names.authority.

Anyway, good luck with your project and I'll be delighted to help if I can.

-RichardW.

PS: Can you post a link to the GSOC project plan and the expected outcomes?
(Perhaps it's on your Github site - I should look)


From i at introo.me  Thu Jun 20 06:39:33 2013
From: i at introo.me (Shiyao Ma)
Date: Thu, 20 Jun 2013 20:39:33 +0800
Subject: [Twisted-Python] Switiching to Formal Parser.
In-Reply-To: <CABefbUpTMSoLgEYDH1P8oFFtBcRz0gQ2t45gWd_g7BKrz2Pq1Q@mail.gmail.com>
References: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>
 <CAPkRfURwvx95HTDgDx8F1nuCH2=Qt12GzV=HqgbyyyV8x4t6=A@mail.gmail.com>
 <CABefbUpTMSoLgEYDH1P8oFFtBcRz0gQ2t45gWd_g7BKrz2Pq1Q@mail.gmail.com>
Message-ID: <CAJQX3DxBuewypPrAVBNVDb76G-yCjt_azBZxcejyP26uMJNQ-w@mail.gmail.com>

My original plan, as suggested by exarkun, is to start with something easy
to implement like netstring and then move on to advanced ones. But after
today's video chat with tom and dash, I will begin by rewriting the
Message.decode/encode part inside names.dns. The expected outcome, I think,
is to test parsley with datagram based protocols (dns) and more complicated
stream protocols.
As said by tom, the code would probably not be merged into trunk, it's just
an experiment.


On Thu, Jun 20, 2013 at 6:14 PM, Richard Wall <m-lists at the-moon.net> wrote:

> On 20 June 2013 04:04, Christopher Armstrong <radix at twistedmatrix.com>
> wrote:
> > Hi Shiyao, I'm happy that you chose Twisted as your SoC project. I just
> want
> > to point out that Richard Wall (rwall on IRC) has been working a lot on
> DNS
> > lately, he may be interested in the work you're doing.
>
> Hello Shiyao,
>
> Yes, I'm really pleased that you chose to start with twisted.names and
> I'm looking forward to seeing Parsley in action!
>


-- 
http://about.me/introom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130620/06c0a1b4/attachment.html>

From exarkun at twistedmatrix.com  Thu Jun 20 13:34:35 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 20 Jun 2013 19:34:35 -0000
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <87y5a5g9tc.fsf@loki.hocat.ca>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
Message-ID: <20130620193435.10961.1679313466.divmod.xquotient.30@top>

On 19 Jun, 07:49 pm, tom.prince at ualberta.net wrote:
>
>Well, it already raises `CancelledError`. Every deferred that doesn't
>have explicitly handle cancelling already does:
>
>from twisted.mail import smtp
>from twisted.python import log
>
>d = smtp.sendmail("host", "options.sender", [], "")
>d.cancel()
>d.addErrback(log.err, "Here be CancelledError")

Thank you for pointing this out.  It seems like an important fact that 
makes the rest of the discussion moot.

By making `Deferred.cancel` work on any Deferred by triggering a 
`CancelledError`, we have already decided on the failure behavior for 
all existing Deferred-returning APIs.  Changing that at this point 
doesn't seem like a very good idea.

I think I'd also like to challenge the idea that Glyph put forwards 
earlier in the thread that this extra information is *necessarily* 
important to the application.

So far, I haven't written any applications that care about the exact 
stage at which the operation is cancelled.  All they care about is that 
the operation *is* cancelled (ie, resources are cleaned up) and that the 
Deferred fires soon.  There's lots of utility in just this level of 
functionality which requires no extra information about the internal 
progress of the operation.

This is not to say that I believe there is no application that might 
want this information, but maybe someone can propose some concrete use 
cases for this information and design can follow from that.  So far I 
don't think any practical justification to do anything other than 
`CancelledError` has been presented.

Jean-Paul


From terry at jon.es  Thu Jun 20 13:54:03 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 20 Jun 2013 20:54:03 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <20130620193435.10961.1679313466.divmod.xquotient.30@top>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
Message-ID: <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>

> Thank you for pointing this out.  It seems like an important fact that
makes the rest of the discussion moot.

OK, maybe someone can explain the original "Well, it already raises
`CancelledError`. Every deferred that doesn't have explicitly handle
cancelling already does:" to me, because I didn't get it at all!

Terry


On Thu, Jun 20, 2013 at 8:34 PM, <exarkun at twistedmatrix.com> wrote:

> On 19 Jun, 07:49 pm, tom.prince at ualberta.net wrote:
>
>>
>> Well, it already raises `CancelledError`. Every deferred that doesn't
>> have explicitly handle cancelling already does:
>>
>> from twisted.mail import smtp
>> from twisted.python import log
>>
>> d = smtp.sendmail("host", "options.sender", [], "")
>> d.cancel()
>> d.addErrback(log.err, "Here be CancelledError")
>>
>
> Thank you for pointing this out.  It seems like an important fact that
> makes the rest of the discussion moot.
>
> By making `Deferred.cancel` work on any Deferred by triggering a
> `CancelledError`, we have already decided on the failure behavior for all
> existing Deferred-returning APIs.  Changing that at this point doesn't seem
> like a very good idea.
>
> I think I'd also like to challenge the idea that Glyph put forwards
> earlier in the thread that this extra information is *necessarily*
> important to the application.
>
> So far, I haven't written any applications that care about the exact stage
> at which the operation is cancelled.  All they care about is that the
> operation *is* cancelled (ie, resources are cleaned up) and that the
> Deferred fires soon.  There's lots of utility in just this level of
> functionality which requires no extra information about the internal
> progress of the operation.
>
> This is not to say that I believe there is no application that might want
> this information, but maybe someone can propose some concrete use cases for
> this information and design can follow from that.  So far I don't think any
> practical justification to do anything other than `CancelledError` has been
> presented.
>
> Jean-Paul
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130620/42d8136f/attachment.html>

From terry at jon.es  Thu Jun 20 15:02:06 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 20 Jun 2013 22:02:06 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <20130620193435.10961.1679313466.divmod.xquotient.30@top>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
Message-ID: <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>

Hi JP

> This is not to say that I believe there is no application that might want
this information, but maybe someone can
> propose some concrete use cases for this information and design can
follow from that.  So far I don't think any
> practical justification to do anything other than `CancelledError` has
been presented.

I pushed to get deferred cancellation in place because I'd wanted it
several times. As a consumer of a deferred-returning API, I wanted to be
able to cancel requests that I had sent off after a certain time. That was
because I was setting up hundreds (or thousands) of network calls and
deferreds that were supposed to run when these completed, etc. If one of
the calls didn't callback or errback for some reason, the whole system
would essentially hang.

So that was one use case, and, as you say, it doesn't need any additional
information.

But, I also built some queuing things where I would have liked extra
information. For example, an app is processing jobs on behalf of a user,
and it might want to be able to cancel jobs in a variety of ways. A user
might indicate that a job should be cancelled. A job might have a certain
timeout and if it doesn't complete in that time then in some cases it
should be retried later. The system might have an adjustable job bandwidth
(like my resizable dispatch queue) and might as a result sometimes need to
cancel jobs that have not started yet (but for which a deferred has been
assigned) or cancel jobs that are actually in progress. These are a
collection of reasons why an app might want to cancel deferreds it has
received or created itself. If there's no way to arrange for any detail on
the reason for cancellation, then things get awkward (you can in some cases
maintain housekeeping info elsewhere, like a dict of deferreds you have
called cancel on that correspond to jobs that need a restart, and check and
clean up that housekeeping info in the errback that handles CancelledError).

In what I originally proposed and implemented in that CancellableDeferred class
(http://twistedmatrix.com/pipermail/twisted-python/2010-January/021298.html)
a deferred could be callbacked or errbacked by anyone who had their hands
on the deferred, with any value of their choosing. So for example my
queuing app might choose to errback a deferred with a CancelledAndResubmit
exception, or similar.

That full flexibility is not what landed in Twisted, though (glyph, and
maybe others, had already done most of an implementation when I arrived at
Pycon that year).

I don't think the ability to callback any deferred you have your hands on
is crucial (though I can think of use cases), but being able to errback is
great, as you can now do, and as you note.

In the mail I sent the other day, I proposed that cancel() could take a
value argument and that that could be given as CancelledError(value) when
the Deferred class triggers the errback, in the case that the cancel method
(if any) for the Deferred instance hasn't already fired the deferred.  That
would give the flexibility I was looking for (as above) for apps to be able
to cancel deferreds and send along any extra information they might
need/want as to why they cancelled it. It would also let apps distinguish
between cases where they cancelled the deferred or something else did.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130620/1b535f5e/attachment.html>

From terry at jon.es  Thu Jun 20 16:26:37 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 20 Jun 2013 23:26:37 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
Message-ID: <CACqnu4Uf89RnrVUi8+BiOgxJKGfVzw3OayC+iCT-0mhKm5J-HQ@mail.gmail.com>

By the way, I don't need any of this to make its way into Twisted. I can
still write my own class that does what I want (well, wanted).  Below is a
2013 version of the  CancelableDeferred. It's untested. The basic idea is
that if you get a regular deferred from somewhere, you can use the class
below to make a new deferred that you can callback, errback, or cancel at
will. You can give a value to 'cancel' and it will be in args[0] of the
CancelledError that your errback will receive.

I still find this approach attractive because it maintains the
power/elegance of coding with Twisted deferreds but also gives the caller
of deferred-producing code more flexibility. That's got to be a good thing,
right?

I hope the code makes the intention more clear, not less.

Terry


from twisted.internet.defer import CancelledError, Deferred
from twisted.python.failure import Failure

class ControllableDeferred2013(object):

    '''A Deferred-like class that takes a regular Twisted Deferred and
    provides a deferred that can be fired at will. If you have a regular
    Twisted Deferred, you can produce a deferred you have more control over
    by using your Deferred instance to make an instance of this class.

    Any time you need to fire a ControllableDeferred2013 instance for any
    reason, call its callback, errback or cancel method. It will fire
    immediately with the value you provide and the original Deferred will
    be cancelled.'''

    def __init__(self, originalDeferred):
        self._fired = False
        self._originalDeferred = originalDeferred
        self._newDeferred = Deferred()
        for method in ('addBoth', 'addCallback', 'addCallbacks',
'addErrback',
                             'chainDeferred'):
            setattr(self, method, getattr(self._newDeferred, method))
        originalDeferred.addBoth(self._originalFired)

    def _originalFired(self, result):
        if not self._fired:
            self._fired = True
            self._originalDeferred.chainDeferred(self._newDeferred)

    def cancel(self, value=None):
        if not self._fired:
            self._fired = True
            self._newDeferred.errback(Failure(CancelledError(value)))
            self._originalDeferred.cancel()

    def callback(self, result=None):
        if not self._fired:
            self._fired = True
            self._newDeferred.callback(result)
            self._originalDeferred.cancel()

    def errback(self, fail=None):
        if not self._fired:
            self._fired = True
            self._newDeferred.errback(fail)
            self._originalDeferred.cancel()

    def pause(self):
        self._newDeferred.pause()
        self._originalDeferred.pause()

    def unpause(self):
        self._newDeferred.unpause()
        self._originalDeferred.unpause()


# BTW, I posted the above code to
http://blogs.fluidinfo.com/terry/2013/06/20/yet-another-cancelable-twisted-deferred-class/as
well.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130620/2e62c911/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Jun 20 17:03:38 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 20 Jun 2013 23:03:38 -0000
Subject: [Twisted-Python] How hard is it to have log levels,
	really?  was: logging
In-Reply-To: <CALCsMPQowfBDHARBGh+ySqyBKCcnLr=+smO54Czc5DAjWKRs5Q@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
 <CALCsMPQowfBDHARBGh+ySqyBKCcnLr=+smO54Czc5DAjWKRs5Q@mail.gmail.com>
Message-ID: <20130620230338.10961.128413721.divmod.xquotient.35@top>

On 18 Jun, 08:58 pm, termim at gmail.com wrote:
> From the practical POV the most welcomed first step in updating the 
>Twisted
>log system would be introduction of ready made log levels (with an 
>ability
>to filter on them in observers), fix of logPrefix thing and somewhat
>extended set of available observers (syslog, email, socket, etc.)
>Everything else could wait more detailed design etc.

Is there an obstacle preventing this from being done with 
twisted.python.log?

A completely new system written from scratch from the ground up might be 
great, but it doesn't seem necessary for something as simple as log 
level support.

Jean-Paul


From tom.prince at ualberta.net  Thu Jun 20 23:12:25 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Thu, 20 Jun 2013 23:12:25 -0600
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
Message-ID: <871u7wkpxi.fsf@hermes.hocat.ca>

Terry Jones <terry at jon.es> writes:
> OK, maybe someone can explain the original "Well, it already raises
> `CancelledError`. Every deferred that doesn't have explicitly handle
> cancelling already does:" to me, because I didn't get it at all!

This is what happens when a deferred is cancelled:

a) If the deferred hasn't been errbacked:
   1. Call the provied canceller (provided when the deferred is constructed)
   2. If a canceller isn't provided, or if the canceller didn't
      callback/errback, then errback with CancelledError.
   3. If a canceller isn't provided, allow callback/errback to be called
      without error once.
b) If the deferred has been fired, and is waiting on another deferred,
   cancel that deferred instead.

Since most apis in twisted don't pass a canceller, the behavior is
a2+a3.

  Tom
    


From tom.prince at ualberta.net  Fri Jun 21 00:18:29 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Fri, 21 Jun 2013 00:18:29 -0600
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
Message-ID: <87y5a4j8ay.fsf@hermes.hocat.ca>

Terry Jones <terry at jon.es> writes:
> But, I also built some queuing things where I would have liked extra
> information. For example, an app is processing jobs on behalf of a user,
> [...]

Thinking about this for a little bit, it seems like there is quite a bit
more state to your jobs, that simply an eventual result (i.e. a
deferred). So, it seems to me that you want to represent your jobs as
more than simply a deferred. At the very least, you need to record what
the jobs is, so that it can be restarted later, if necessary.

Deferreds are a way of abstracting data and/or control flow in
asynchronous way. I'm not sure that trying to think of a deferred as a
job is a useful thing to do; most any example of a job that I can think
of likely involves multiple deferred objects (often chained by returning
them from callbcks).

  Tom


From terry at jon.es  Fri Jun 21 04:26:01 2013
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Jun 2013 11:26:01 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <871u7wkpxi.fsf@hermes.hocat.ca>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
 <871u7wkpxi.fsf@hermes.hocat.ca>
Message-ID: <CACqnu4XZLXF7cXXAxQ1mC8BNheqBe5VtGtk_1jcKNruAufrp1w@mail.gmail.com>

Hi Tom

> Since most apis in twisted don't pass a canceller, the behavior is a2+a3.

Right. That was the intention (glyph's). It was expected that over time
more Twisted apis that create deferreds would add cancellers. As I
understand it, Kai Zhang is now adding cancellers to some apis returning
deferreds, starting with the POP3 client.

Based on JP's comment, I still think I'm missing something here.

The only suggestion I've been making is that, if we wanted to, we could
allow a value to be passed to the cancel call. That would allow errback
functions to receive more information when a Deferred is canceled. You'd
still get a CancelledError in any case, but the value would be in the
exception instance as args[0], as in

In [1]: from twisted.internet.defer import CancelledError
In [2]: e = CancelledError('hey')
In [3]: e.args[0]
Out[3]: 'hey'


Terry


On Fri, Jun 21, 2013 at 6:12 AM, Tom Prince <tom.prince at ualberta.net> wrote:

> Terry Jones <terry at jon.es> writes:
> > OK, maybe someone can explain the original "Well, it already raises
> > `CancelledError`. Every deferred that doesn't have explicitly handle
> > cancelling already does:" to me, because I didn't get it at all!
>
> This is what happens when a deferred is cancelled:
>
> a) If the deferred hasn't been errbacked:
>    1. Call the provied canceller (provided when the deferred is
> constructed)
>    2. If a canceller isn't provided, or if the canceller didn't
>       callback/errback, then errback with CancelledError.
>    3. If a canceller isn't provided, allow callback/errback to be called
>       without error once.
> b) If the deferred has been fired, and is waiting on another deferred,
>    cancel that deferred instead.
>
> Since most apis in twisted don't pass a canceller, the behavior is
> a2+a3.
>
>   Tom
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130621/3b6340c1/attachment.html>

From terry at jon.es  Fri Jun 21 04:41:19 2013
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Jun 2013 11:41:19 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <87y5a4j8ay.fsf@hermes.hocat.ca>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
 <87y5a4j8ay.fsf@hermes.hocat.ca>
Message-ID: <CACqnu4ViCVY8_nagurVvf2SkF3HkyM4X6femLac9QVSZ0PQ4bg@mail.gmail.com>

Hi again Tom

> So, it seems to me that you want to represent your jobs as
> more than simply a deferred. At the very least, you need to record what
> the jobs is, so that it can be restarted later, if necessary.

Yes. The job class contained things like the function to call, its args,
timing information etc., as well a deferred that would fire with the result.

> Deferreds are a way of abstracting data and/or control flow in
> asynchronous way. I'm not sure that trying to think of a deferred as a
> job is a useful thing to do

I wasn't doing that.

The problem that I was originally trying to address by getting 'cancel'
into deferreds is that the control flow you mention gets totally stuck if a
deferred never fires for some reason (this was happening to me in talking
to the Twitter API). E.g., in this case, kicking off a new job relies on an
earlier job finishing (which includes a deferred firing). An app writer
might want to timeout a deferred for some reason. Or the app may need to
shut down. If there's even one deferred that doesn't fire, the whole system
essentially hangs. The idea was simply to increase the amount of control an
app had over the flow of control.

This goes against the thinking that only the code that creates a deferred
can fire it. I don't see anything wrong with that - it just increases the
options that the code which obtains the deferred has. As API writers, we're
used to being in control: we don't think it's a good idea if we create and
return a deferred in a method and the code we return the deferred to then
fires it itself. But as app writers consuming deferreds from these APIs, we
want more control (I do, anyway).  It's possible to have both, which was
what I was trying to provide for. The ControllableDeferred2013 class I
posted last night shows one way. Adding a value arg to cancel() would build
some of that flexibility into Twisted itself.

Hopefully that helps makes things clearer.

Terry


On Fri, Jun 21, 2013 at 7:18 AM, Tom Prince <tom.prince at ualberta.net> wrote:

> Terry Jones <terry at jon.es> writes:
> > But, I also built some queuing things where I would have liked extra
> > information. For example, an app is processing jobs on behalf of a user,
> > [...]
>
> Thinking about this for a little bit, it seems like there is quite a bit
> more state to your jobs, that simply an eventual result (i.e. a
> deferred). So, it seems to me that you want to represent your jobs as
> more than simply a deferred. At the very least, you need to record what
> the jobs is, so that it can be restarted later, if necessary.
>
> Deferreds are a way of abstracting data and/or control flow in
> asynchronous way. I'm not sure that trying to think of a deferred as a
> job is a useful thing to do; most any example of a job that I can think
> of likely involves multiple deferred objects (often chained by returning
> them from callbcks).
>
>   Tom
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130621/fed2cdca/attachment.html>

From i at introo.me  Fri Jun 21 07:41:14 2013
From: i at introo.me (Shiyao Ma)
Date: Fri, 21 Jun 2013 21:41:14 +0800
Subject: [Twisted-Python] Switiching to Formal Parser.
In-Reply-To: <CAJQX3DxBuewypPrAVBNVDb76G-yCjt_azBZxcejyP26uMJNQ-w@mail.gmail.com>
References: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>
 <CAPkRfURwvx95HTDgDx8F1nuCH2=Qt12GzV=HqgbyyyV8x4t6=A@mail.gmail.com>
 <CABefbUpTMSoLgEYDH1P8oFFtBcRz0gQ2t45gWd_g7BKrz2Pq1Q@mail.gmail.com>
 <CAJQX3DxBuewypPrAVBNVDb76G-yCjt_azBZxcejyP26uMJNQ-w@mail.gmail.com>
Message-ID: <CAJQX3DyWUDx_pHjPhRGn25u7edv3ef_V3Z00YUCf=REthAoH4w@mail.gmail.com>

I've come across some problems in parsley. One problem is that dns lables
has a compression scheme "11offset". I dunno how to jump back to the parsed
data to get the labels.


On Thu, Jun 20, 2013 at 8:39 PM, Shiyao Ma <i at introo.me> wrote:

> My original plan, as suggested by exarkun, is to start with something easy
> to implement like netstring and then move on to advanced ones. But after
> today's video chat with tom and dash, I will begin by rewriting the
> Message.decode/encode part inside names.dns. The expected outcome, I think,
> is to test parsley with datagram based protocols (dns) and more complicated
> stream protocols.
> As said by tom, the code would probably not be merged into trunk, it's
> just an experiment.
>
>
> On Thu, Jun 20, 2013 at 6:14 PM, Richard Wall <m-lists at the-moon.net>wrote:
>
>> On 20 June 2013 04:04, Christopher Armstrong <radix at twistedmatrix.com>
>> wrote:
>> > Hi Shiyao, I'm happy that you chose Twisted as your SoC project. I just
>> want
>> > to point out that Richard Wall (rwall on IRC) has been working a lot on
>> DNS
>> > lately, he may be interested in the work you're doing.
>>
>> Hello Shiyao,
>>
>> Yes, I'm really pleased that you chose to start with twisted.names and
>> I'm looking forward to seeing Parsley in action!
>>
>
>
> --
> http://about.me/introom
>
>


-- 
http://about.me/introom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130621/cefa2f80/attachment-0001.html>

From william.mccall at gmail.com  Fri Jun 21 08:20:25 2013
From: william.mccall at gmail.com (William McCall)
Date: Fri, 21 Jun 2013 09:20:25 -0500
Subject: [Twisted-Python] IMAP IDLE
Message-ID: <51C46129.2020705@gmail.com>

All--

Because I have seen it asked before (and because I have plans for it), I 
have a half-way implementation of IMAP IDLE.

Yes, I am aware this is very uhh... fabulously written.

https://github.com/williammccall/twisted-imap-idle

Something I am looking to do is add a method to the Command class so I 
don't have to use the list hack to get the +'s sent to the callback. 
Maybe I'll submit a patch if I'm less lazy.

Comments welcome!

--WM


From exarkun at twistedmatrix.com  Fri Jun 21 08:30:45 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Jun 2013 14:30:45 -0000
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4XZLXF7cXXAxQ1mC8BNheqBe5VtGtk_1jcKNruAufrp1w@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
 <871u7wkpxi.fsf@hermes.hocat.ca>
 <CACqnu4XZLXF7cXXAxQ1mC8BNheqBe5VtGtk_1jcKNruAufrp1w@mail.gmail.com>
Message-ID: <20130621143045.10961.1431395332.divmod.xquotient.57@top>

On 10:26 am, terry at jon.es wrote:
>Hi Tom
>>Since most apis in twisted don't pass a canceller, the behavior is 
>>a2+a3.
>
>Right. That was the intention (glyph's). It was expected that over time
>more Twisted apis that create deferreds would add cancellers. As I
>understand it, Kai Zhang is now adding cancellers to some apis 
>returning
>deferreds, starting with the POP3 client.
>
>Based on JP's comment, I still think I'm missing something here.
>
>The only suggestion I've been making is that, if we wanted to, we could
>allow a value to be passed to the cancel call. That would allow errback
>functions to receive more information when a Deferred is canceled. 
>You'd
>still get a CancelledError in any case, but the value would be in the
>exception instance as args[0], as in

An idea very much like this was discussed when Deferred cancellation was 
being implemented.  My recollection is that it was ultimately explicitly 
rejected, though I don't remember why nor do I find discussion of it on 
the ticket (#990) (lack of this information somewhere seems like a 
failure of the development process).  I admit the idea of being able to 
get additional information passed through the system seems appealing to 
me, but *not* having any additional information does simplify the 
interface.  Considering how much trouble people already have with 
Deferreds without even bringing cancellation into play, maybe the 
simpler interface is a good thing.

My earlier point was that any Deferred for which cancellation is not 
already explicitly implemented already has a cancellation behavior: it 
will fire its errback chain with `CancelledError`.  It is an 
incompatible change to replace this with a different exception type - 
such as `ConnectionDone`.

This is slightly different than your suggestion, Terry, I think - in 
that you propose sticking more information onto the `CancelledError`, 
not changing the type of the `Failure` that is sent down the errback 
chain.  However, the thread was started specifically with the question 
of whether changing `CancelledError` to `ConnectionDone` is acceptable 
and that's the point I was mainly focused on.

Jean-Paul


From exarkun at twistedmatrix.com  Fri Jun 21 09:05:27 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Jun 2013 15:05:27 -0000
Subject: [Twisted-Python] Private positional argument API anti-pattern
Message-ID: <20130621150527.10961.273889498.divmod.xquotient.64@top>

Hello,

I've noticed there are a couple public APIs in Twisted now that accept a 
"private" positional argument.  I use scare quotes because I don't see 
how it's actually possible to make a positional argument private.

Given a function defined like this:

    def foo(_bar=None):
        ...

There is no indication that a use like this is problematic:

    foo(3)

Perhaps the situation will be different with keyword-only arguments, but 
for positional arguments I think it's unproductive and perhaps even 
confusing to name arguments this way.

I suggest we fix the couple places where this has been done so far and 
we avoid introducing any new instances.

FWIW, I found two examples of this in Twisted using:

    $ grep -E '\W_reactor' twisted/ -r --include '*.py' | grep -E 'def\W'

Jean-Paul


From terry at jon.es  Fri Jun 21 09:42:09 2013
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Jun 2013 16:42:09 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <20130621143045.10961.1431395332.divmod.xquotient.57@top>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
 <871u7wkpxi.fsf@hermes.hocat.ca>
 <CACqnu4XZLXF7cXXAxQ1mC8BNheqBe5VtGtk_1jcKNruAufrp1w@mail.gmail.com>
 <20130621143045.10961.1431395332.divmod.xquotient.57@top>
Message-ID: <CACqnu4Wt8RF6wcD6hFLxXz2F=z-Gc27Yb2Pnj4Rmsu4fOmqc5A@mail.gmail.com>

Hi JP

Thanks for the summary. I agree (and agreed in my first post in this
thread) that the CancelledError should (has to) come all the way back. I
missed that we were still talking about that.

Was there a conclusion on Glyph's suggestion of using subclasses of
CancelledError? Chris raised the point that there might be many of them for
a given API. But an API could define a few subclasses, just the most useful
to start with (if there are any at all), and document them, and later
define some more if need be, etc. That would be backwards consistent with
processing by Failure.check and try/except on CancelledError - unless my
Python memory has rotted more than I think. It seems a good path to
providing more info (for APIs that want to). Or is there a problem with it
that I also missed?

Terry



On Fri, Jun 21, 2013 at 3:30 PM, <exarkun at twistedmatrix.com> wrote:

> On 10:26 am, terry at jon.es wrote:
>
>> Hi Tom
>>
>>> Since most apis in twisted don't pass a canceller, the behavior is a2+a3.
>>>
>>
>> Right. That was the intention (glyph's). It was expected that over time
>> more Twisted apis that create deferreds would add cancellers. As I
>> understand it, Kai Zhang is now adding cancellers to some apis returning
>> deferreds, starting with the POP3 client.
>>
>> Based on JP's comment, I still think I'm missing something here.
>>
>> The only suggestion I've been making is that, if we wanted to, we could
>> allow a value to be passed to the cancel call. That would allow errback
>> functions to receive more information when a Deferred is canceled. You'd
>> still get a CancelledError in any case, but the value would be in the
>> exception instance as args[0], as in
>>
>
> An idea very much like this was discussed when Deferred cancellation was
> being implemented.  My recollection is that it was ultimately explicitly
> rejected, though I don't remember why nor do I find discussion of it on the
> ticket (#990) (lack of this information somewhere seems like a failure of
> the development process).  I admit the idea of being able to get additional
> information passed through the system seems appealing to me, but *not*
> having any additional information does simplify the interface.  Considering
> how much trouble people already have with Deferreds without even bringing
> cancellation into play, maybe the simpler interface is a good thing.
>
> My earlier point was that any Deferred for which cancellation is not
> already explicitly implemented already has a cancellation behavior: it will
> fire its errback chain with `CancelledError`.  It is an incompatible change
> to replace this with a different exception type - such as `ConnectionDone`.
>
> This is slightly different than your suggestion, Terry, I think - in that
> you propose sticking more information onto the `CancelledError`, not
> changing the type of the `Failure` that is sent down the errback chain.
>  However, the thread was started specifically with the question of whether
> changing `CancelledError` to `ConnectionDone` is acceptable and that's the
> point I was mainly focused on.
>
>
> Jean-Paul
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130621/f197046c/attachment.html>

From exarkun at twistedmatrix.com  Fri Jun 21 13:35:39 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Jun 2013 19:35:39 -0000
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4Wt8RF6wcD6hFLxXz2F=z-Gc27Yb2Pnj4Rmsu4fOmqc5A@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
 <871u7wkpxi.fsf@hermes.hocat.ca>
 <CACqnu4XZLXF7cXXAxQ1mC8BNheqBe5VtGtk_1jcKNruAufrp1w@mail.gmail.com>
 <20130621143045.10961.1431395332.divmod.xquotient.57@top>
 <CACqnu4Wt8RF6wcD6hFLxXz2F=z-Gc27Yb2Pnj4Rmsu4fOmqc5A@mail.gmail.com>
Message-ID: <20130621193539.10961.1423872571.divmod.xquotient.74@top>

On 03:42 pm, terry at jon.es wrote:
>Hi JP
>
>Thanks for the summary. I agree (and agreed in my first post in this
>thread) that the CancelledError should (has to) come all the way back. 
>I
>missed that we were still talking about that.
>
>Was there a conclusion on Glyph's suggestion of using subclasses of
>CancelledError? Chris raised the point that there might be many of them 
>for
>a given API. But an API could define a few subclasses, just the most 
>useful
>to start with (if there are any at all), and document them, and later
>define some more if need be, etc. That would be backwards consistent 
>with
>processing by Failure.check and try/except on CancelledError - unless 
>my
>Python memory has rotted more than I think. It seems a good path to
>providing more info (for APIs that want to). Or is there a problem with 
>it
>that I also missed?

I think technically that would solve the problem.  It sounds like a bit 
of a nightmare though.  But that's what we get for using types to 
indicate error conditions, I suppose?

Cancellation is still new, and I don't think many people are using it 
yet (how could they, since no one has bothered to write any 
documentation for it).  I suspect different people probably also have 
different ideas about how it *should* be used - and so we've probably 
all started to go off in somewhat different directions, which is going 
to result in disagreement in what practices are best.

I think the best possible next step here is to actually document what 
it's already possible to do with cancellation (I think there are several 
non-obvious tricks - mainly in the area of asynchronous cancellation, a 
feature not *explicitly* supported by the API, but still possible). 
After that, perhaps we'll be able to see what it's *not* possible to do 
and then a discussion about how to fill in the gaps in functionality 
will be a lot easier to have.

Jean-Paul


From glyph at twistedmatrix.com  Fri Jun 21 17:40:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 21 Jun 2013 16:40:40 -0700
Subject: [Twisted-Python] How hard is it to have log levels,
	really?  was: logging
In-Reply-To: <20130620230338.10961.128413721.divmod.xquotient.35@top>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
 <CALCsMPQowfBDHARBGh+ySqyBKCcnLr=+smO54Czc5DAjWKRs5Q@mail.gmail.com>
 <20130620230338.10961.128413721.divmod.xquotient.35@top>
Message-ID: <10868E9B-C3FC-40F6-B510-3503C1D1F495@twistedmatrix.com>


On Jun 20, 2013, at 4:03 PM, exarkun at twistedmatrix.com wrote:

> On 18 Jun, 08:58 pm, termim at gmail.com wrote:
>> From the practical POV the most welcomed first step in updating the Twisted
>> log system would be introduction of ready made log levels (with an ability
>> to filter on them in observers), fix of logPrefix thing and somewhat
>> extended set of available observers (syslog, email, socket, etc.)
>> Everything else could wait more detailed design etc.
> 
> Is there an obstacle preventing this from being done with twisted.python.log?
> 
> A completely new system written from scratch from the ground up might be great, but it doesn't seem necessary for something as simple as log level support.
> 
> Jean-Paul

Nope.  Anyone who wants to start adding log levels to any existing messages is welcome to do so.  There's no particular conflict with the new system, either; more information in log messages will just be even easier to utilize with some of its improvements.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130621/690fd863/attachment.html>

From glyph at twistedmatrix.com  Fri Jun 21 17:45:51 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 21 Jun 2013 16:45:51 -0700
Subject: [Twisted-Python] IMAP IDLE
In-Reply-To: <51C46129.2020705@gmail.com>
References: <51C46129.2020705@gmail.com>
Message-ID: <0183FFA8-FC78-4380-8231-D6E0EF2194E8@twistedmatrix.com>


On Jun 21, 2013, at 7:20 AM, William McCall <william.mccall at gmail.com> wrote:

> Comments welcome!

The main comment I have is: no tests!!! ;)

If you're going to submit this as a patch, it would of course be very helpful to have unit test coverage.

If you need help figuring out how to do that, feel free to ask questions.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130621/889a9c8e/attachment.html>

From glyph at twistedmatrix.com  Fri Jun 21 17:48:05 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 21 Jun 2013 16:48:05 -0700
Subject: [Twisted-Python] Private positional argument API anti-pattern
In-Reply-To: <20130621150527.10961.273889498.divmod.xquotient.64@top>
References: <20130621150527.10961.273889498.divmod.xquotient.64@top>
Message-ID: <208C0D41-E6AC-47BD-B1C5-54ACA2C57E38@twistedmatrix.com>


On Jun 21, 2013, at 8:05 AM, exarkun at twistedmatrix.com wrote:

> Hello,
> 
> I've noticed there are a couple public APIs in Twisted now that accept a "private" positional argument.  I use scare quotes because I don't see how it's actually possible to make a positional argument private.
> 
> Given a function defined like this:
> 
>   def foo(_bar=None):
>       ...
> 
> There is no indication that a use like this is problematic:
> 
>   foo(3)
> 
> Perhaps the situation will be different with keyword-only arguments, but for positional arguments I think it's unproductive and perhaps even confusing to name arguments this way.
> 
> I suggest we fix the couple places where this has been done so far and we avoid introducing any new instances.
> 
> FWIW, I found two examples of this in Twisted using:
> 
>   $ grep -E '\W_reactor' twisted/ -r --include '*.py' | grep -E 'def\W'

I second this suggestion.

Furthermore, in most cases where one is tempted to make a reactor *attribute* private, it's probably best to make it public.  There are lots of legitimate uses to parameterize the reactor and to discover which one a particular object is using.

The case where one is tempted to make an argument private like this seems to be somewhere that we feel that something should be parameterized "only for testing".  If we need to parameterize it for testing, our users probably need to parameterize it for *their* tests, too.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130621/ec943a70/attachment.html>

From glyph at twistedmatrix.com  Fri Jun 21 17:57:41 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 21 Jun 2013 16:57:41 -0700
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <20130620193435.10961.1679313466.divmod.xquotient.30@top>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
Message-ID: <200AFE9D-10BA-4202-8E22-1F69C43CDD99@twistedmatrix.com>


On Jun 20, 2013, at 12:34 PM, exarkun at twistedmatrix.com wrote:

> Thank you for pointing this out.  It seems like an important fact that makes the rest of the discussion moot.
> 
> By making `Deferred.cancel` work on any Deferred by triggering a `CancelledError`, we have already decided on the failure behavior for all existing Deferred-returning APIs.  Changing that at this point doesn't seem like a very good idea.
> 
> I think I'd also like to challenge the idea that Glyph put forwards earlier in the thread that this extra information is *necessarily* important to the application.

These are all pretty good points.

In fact, I think I'm going to withdraw my suggestion.  Having better ways to classify errors would be useful in some circumstances, but it's demonstrably not *necessary*, and a system to arbitrarily classify every single cancellation that any Deferred might raise (not to mention documentation of how to make use of all this information).

So I will save any further words I might write in this thread for narrative documentation for cancellation :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130621/c6306a85/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Jun 22 06:49:54 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 22 Jun 2013 12:49:54 -0000
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <200AFE9D-10BA-4202-8E22-1F69C43CDD99@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <200AFE9D-10BA-4202-8E22-1F69C43CDD99@twistedmatrix.com>
Message-ID: <20130622124954.10961.1233056233.divmod.xquotient.79@top>

On 21 Jun, 11:57 pm, glyph at twistedmatrix.com wrote:
>
>
>So I will save any further words I might write in this thread for 
>narrative documentation for cancellation :).

Woooooooooooooooo
>-glyph


From JP at eukor.com  Sat Jun 22 13:17:31 2013
From: JP at eukor.com (JP at eukor.com)
Date: Sun, 23 Jun 2013 04:17:31 +0900 (KST)
Subject: [Twisted-Python]
	=?euc-kr?q?If_the_errbacks_of_a_canceled_Deferre?=
	=?euc-kr?q?d_are_called_with_error_other_than_CancelledError=2C_is?=
	=?euc-kr?q?_this_acceptable=3F?=
Message-ID: <20130622191731.A5DC4104A63@mmp.eukor21.com>

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130623/17903276/attachment.html>

From tom.prince at ualberta.net  Sat Jun 22 16:14:32 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 22 Jun 2013 16:14:32 -0600
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4ViCVY8_nagurVvf2SkF3HkyM4X6femLac9QVSZ0PQ4bg@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
 <87y5a4j8ay.fsf@hermes.hocat.ca>
 <CACqnu4ViCVY8_nagurVvf2SkF3HkyM4X6femLac9QVSZ0PQ4bg@mail.gmail.com>
Message-ID: <87txkpkd2v.fsf@hermes.hocat.ca>

Terry Jones <terry at jon.es> writes:

> Based on JP's comment, I still think I'm missing something here.

The original subject of this thread? There was a question of what errorq

> The problem that I was originally trying to address by getting 'cancel'
> into deferreds is that the control flow you mention gets totally stuck if a
> deferred never fires for some reason (this was happening to me in talking
> to the Twitter API).

.cancel as currently implemented addresses this, as calling cancel
causes the deferred to fire.

> This goes against the thinking that only the code that creates a deferred
> can fire it.

To allow anything else would be to break the abstraction

    d = Deferred()
    return d
    ...
    d.callback(5)

vs.
    d = Deferred()
    d.addCallback(lambda x: x+1)
    return d
    ...
    d.callback(4)

There is currently no way of distinguishing these to code
snippets. Allowing other code to callback/errback the deferred
would cause different results in the two cases.

> As API writers, we're used to being in control: we don't think it's a
> good idea if we create and return a deferred in a method and the code
> we return the deferred to then fires it itself.

It isn't so much a matter of control, as of abstraction. It isn't
uncommon for a single deferred to be pass through several systems, with
each stage adding more callbacks, changing the value that the next stage
will see in the callbacks they add.

If the "final" consumer could fire the deferred with any value, it would
need to know about all the stagse (or at least the first one) to know
what kind of value to put in.

> But as app writers consuming deferreds from these APIs, we
> want more control (I do, anyway).

Well, the consumer can't control the deferreds that it gets but, as your
code demonstrates, it is easy enough to create a new deferred that
behaves however the consumer wants. The fact that this isn't the same
object isn't signifiant, since the identity of deferreds isn't an
interesting thing.


> The ControllableDeferred2013 class I posted last night shows one
> way.

One comment about the code you posted: There doesn't really seem to be a
need to create a sepearte class, that forwards
.addCallback/.addErrback. You can just create a regular deferred that is
hooked hooked up in the appropriate way. (It may make sense for the
stage that sets this up to have an object, but it shouldn't pass it
along, it should just pass a regular deferred on). There are a few
places that accept deferreds that depend on the object being an instance
of deferred, which your object isn't.

  Tom


From terry at jon.es  Sat Jun 22 17:52:08 2013
From: terry at jon.es (Terry Jones)
Date: Sun, 23 Jun 2013 00:52:08 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <87txkpkd2v.fsf@hermes.hocat.ca>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
 <87y5a4j8ay.fsf@hermes.hocat.ca>
 <CACqnu4ViCVY8_nagurVvf2SkF3HkyM4X6femLac9QVSZ0PQ4bg@mail.gmail.com>
 <87txkpkd2v.fsf@hermes.hocat.ca>
Message-ID: <CACqnu4W7PfSXUmpRVrfSjjZ5eWZaksmB9aRF6nc5P3jV_OHokw@mail.gmail.com>

Hi Tom

I'm not sure we should continue this discussion on the list seeing as the
original issue seems to be settled. Anyway, here's an answer and maybe we
could/should take it offline if there's more to say?

On Sat, Jun 22, 2013 at 11:14 PM, Tom Prince <tom.prince at ualberta.net>wrote:

> Terry Jones <terry at jon.es> writes:
> > The problem that I was originally trying to address by getting 'cancel'
> > into deferreds is that the control flow you mention gets totally stuck
> if a
> > deferred never fires for some reason (this was happening to me in talking
> > to the Twitter API).
>
> .cancel as currently implemented addresses this, as calling cancel
> causes the deferred to fire.


Right. When I say "originally" I mean in Jan 2010, before cancel was
implemented. See the thread URL I posted a couple of times in this thread
to see how it wen t down.


> > This goes against the thinking that only the code that creates a deferred
> > can fire it.
>
> To allow anything else would be to break the abstraction
>
>     d = Deferred()
>     return d
>     ...
>     d.callback(5)
>
> vs.
>     d = Deferred()
>     d.addCallback(lambda x: x+1)
>     return d
>     ...
>     d.callback(4)
>
> There is currently no way of distinguishing these to code
> snippets. Allowing other code to callback/errback the deferred
> would cause different results in the two cases.


That depends how you do it. If you actually have 2 deferreds, the original
(which you can't err/callback yourself cause things will break) and one
that you create yourself (as a "controllable" deferred), then you can allow
the latter to be call/errbacked and hook the former up to the latter if the
former fires first. That's what the code samples I posted do, including the
one from Jan 2010.


> > As API writers, we're used to being in control: we don't think it's a
> > good idea if we create and return a deferred in a method and the code
> > we return the deferred to then fires it itself.
>
> It isn't so much a matter of control, as of abstraction. It isn't
> uncommon for a single deferred to be pass through several systems, with
> each stage adding more callbacks, changing the value that the next stage
> will see in the callbacks they add.
>

Right.


> If the "final" consumer could fire the deferred with any value, it would
> need to know about all the stagse (or at least the first one) to know
> what kind of value to put in.


In the ControlableDeferred2013 class I posted the other night, this isn't
the case. If the deferred using code fires it, the only callbacks and
errbacks that are run are ones that that code added (not ones added to the
original deferred by the code that made it or any intermediates).


> > But as app writers consuming deferreds from these APIs, we
> > want more control (I do, anyway).
>
> Well, the consumer can't control the deferreds that it gets but, as your
> code demonstrates, it is easy enough to create a new deferred that
> behaves however the consumer wants. The fact that this isn't the same
> object isn't signifiant, since the identity of deferreds isn't an
> interesting thing.


Yes.

> The ControllableDeferred2013 class I posted last night shows one
> > way.
>
> One comment about the code you posted: There doesn't really seem to be a
> need to create a sepearte class, that forwards
> .addCallback/.addErrback. You can just create a regular deferred that is
> hooked hooked up in the appropriate way. (It may make sense for the
> stage that sets this up to have an object, but it shouldn't pass it
> along, it should just pass a regular deferred on). There are a few
> places that accept deferreds that depend on the object being an instance
> of deferred, which your object isn't.


Yes, you can do that too (and there are other approaches). Here's a
subclassing version that's similar to what you just described:
http://twistedmatrix.com/pipermail/twisted-python/2010-January/021311.html
They're all basically the same idea (at least the way I do it), just based
on setting up another deferred and hooking the original up to it when/if
needed.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130623/e2d70cf3/attachment.html>

From william.mccall at gmail.com  Sun Jun 23 13:11:22 2013
From: william.mccall at gmail.com (William McCall)
Date: Sun, 23 Jun 2013 14:11:22 -0500
Subject: [Twisted-Python] IMAP IDLE
In-Reply-To: <0183FFA8-FC78-4380-8231-D6E0EF2194E8@twistedmatrix.com>
References: <51C46129.2020705@gmail.com>
 <0183FFA8-FC78-4380-8231-D6E0EF2194E8@twistedmatrix.com>
Message-ID: <51C7485A.1080108@gmail.com>

On 06/21/2013 06:45 PM, Glyph wrote:
>
> On Jun 21, 2013, at 7:20 AM, William McCall <william.mccall at gmail.com 
> <mailto:william.mccall at gmail.com>> wrote:
>
>> Comments welcome!
>
> The main comment I have is: no tests!!! ;)
>
> If you're going to submit this as a patch, it would of course be very 
> helpful to have unit test coverage.
>
> If you need help figuring out how to do that, feel free to ask questions.
>
> -glyph
>
>

Thanks for the comments and support, Glyph. I'll work on that soon.

--WM
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130623/0ac5f1cb/attachment.html>

From rutt.4 at osu.edu  Wed Jun 26 08:15:23 2013
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Wed, 26 Jun 2013 10:15:23 -0400
Subject: [Twisted-Python] deferToThread and thrown exceptions break gc -
	ticket 3853
Message-ID: <CAMWA1_oYZNNP2nhtAoEsaFAH4iuFXB+=O-mQrDYmAigak+Vk9g@mail.gmail.com>

Hi,

I believe I hit http://twistedmatrix.com/trac/ticket/3853 in production
this week, in the form of what looked like a resource leak, but turned out
to be a case of a resource held for much longer than expected.  (I'm using
python 2.7, and twisted 12.3.0).

That is, I had a function invoked by deferToThread, that searched a file by
memory mapping it using the 'mmap' module.  And if my function could not
find what it was looking for in the file, it raised an exception at the
end.  I observed that my process was still hanging on to the mmap, due to
my local variable representing the mmap (which I presumed would have been
gc'd as it went out of scope as part of the throw) not being gc'd when the
function ended.  I can work around it in my function by setting that local
variable to None right before I throw, but this is python, not C, and in
python automatic memory management is assumed.

So, +1 for that issue getting fixed.   From the issue it looks like there
is a deeper issue in python itself that could fix this, but as the fix
discussion is moving at a glacial pace, I say +1 for a twisted workaround,
which from the trac discussion, sounds possible.  Thanks,
-- 
Benjamin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130626/eecc0ff8/attachment.html>

From radix at twistedmatrix.com  Wed Jun 26 11:03:36 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 26 Jun 2013 12:03:36 -0500
Subject: [Twisted-Python] deferToThread and thrown exceptions break gc -
 ticket 3853
In-Reply-To: <CAMWA1_oYZNNP2nhtAoEsaFAH4iuFXB+=O-mQrDYmAigak+Vk9g@mail.gmail.com>
References: <CAMWA1_oYZNNP2nhtAoEsaFAH4iuFXB+=O-mQrDYmAigak+Vk9g@mail.gmail.com>
Message-ID: <CAPkRfUQ5JJswMPseum7X=MJFq6UVhPN4vcLK40NBFxgHRaczig@mail.gmail.com>

On Wed, Jun 26, 2013 at 9:15 AM, Benjamin Rutt <rutt.4 at osu.edu> wrote:

> Hi,
>
> I believe I hit http://twistedmatrix.com/trac/ticket/3853 in production
> this week, in the form of what looked like a resource leak, but turned out
> to be a case of a resource held for much longer than expected.  (I'm using
> python 2.7, and twisted 12.3.0).
>
> That is, I had a function invoked by deferToThread, that searched a file
> by memory mapping it using the 'mmap' module.  And if my function could not
> find what it was looking for in the file, it raised an exception at the
> end.  I observed that my process was still hanging on to the mmap, due to
> my local variable representing the mmap (which I presumed would have been
> gc'd as it went out of scope as part of the throw) not being gc'd when the
> function ended.  I can work around it in my function by setting that local
> variable to None right before I throw, but this is python, not C, and in
> python automatic memory management is assumed.
>
> So, +1 for that issue getting fixed.   From the issue it looks like there
> is a deeper issue in python itself that could fix this, but as the fix
> discussion is moving at a glacial pace, I say +1 for a twisted workaround,
> which from the trac discussion, sounds possible.  Thanks,
>
>
Like you said, it looks like there's already a patch that can solve the
problem. All it needs before it can be reviewed is tests. If you could
spare some time to write one (or however many are needed) then that would
increase the ticket's chances for resolution quite a bit :)


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130626/d0c46f5f/attachment.html>

From rutt.4 at osu.edu  Wed Jun 26 14:15:23 2013
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Wed, 26 Jun 2013 16:15:23 -0400
Subject: [Twisted-Python] deferToThread and thrown exceptions break gc -
 ticket 3853
In-Reply-To: <CAPkRfUQ5JJswMPseum7X=MJFq6UVhPN4vcLK40NBFxgHRaczig@mail.gmail.com>
References: <CAMWA1_oYZNNP2nhtAoEsaFAH4iuFXB+=O-mQrDYmAigak+Vk9g@mail.gmail.com>
 <CAPkRfUQ5JJswMPseum7X=MJFq6UVhPN4vcLK40NBFxgHRaczig@mail.gmail.com>
Message-ID: <CAMWA1_pC=KLMsRj-kDhvjPEm0tp-zRGPd6UfeNsUVg5-h8qOhw@mail.gmail.com>

I am not sure that that trac issue contains a patch that will fix it.  The
most recent patch on that trac issue is for twisted 8.1, and it does not
apply cleanly to twisted 12.3.0.  When I tried to place the 2 lines that
form the patch in the most obvious place in the 12.3.0 codebase (before the
code 'self.waiters.append(ct)') I could not get it to fix the repro I have.
 Here's my repro:

from twisted.internet import reactor
from twisted.internet.threads import deferToThread

class SomeClass(object):
    def __del__(self):
        print 'SomeClass\'s destructor was called!'

def foo():
    sc = SomeClass()
    raise RuntimeError('bah')

def shutmedown(data):
    print 'reactor shutdown happening now'
    reactor.stop()

def go():
    d = deferToThread(foo)
    d.addCallbacks(shutmedown, shutmedown)
reactor.callWhenRunning(go)
reactor.run()

and running it:

$ ./twisted-defertothread-bug.py
reactor shutdown happening now
SomeClass's destructor was called!

The bug is present, as the instance of SomeClass only gets gc'd once the
reactor shuts down (taking the thread pool with it), not when the foo()
function terminates.  Obviously I'm using CPython, which uses reference
counting gc, so there is no reason to delay the reclaim of the SomeClass
instance until after the function exit.


On Wed, Jun 26, 2013 at 1:03 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Wed, Jun 26, 2013 at 9:15 AM, Benjamin Rutt <rutt.4 at osu.edu> wrote:
>
>> Hi,
>>
>> I believe I hit http://twistedmatrix.com/trac/ticket/3853 in production
>> this week, in the form of what looked like a resource leak, but turned out
>> to be a case of a resource held for much longer than expected.  (I'm using
>> python 2.7, and twisted 12.3.0).
>>
>> That is, I had a function invoked by deferToThread, that searched a file
>> by memory mapping it using the 'mmap' module.  And if my function could not
>> find what it was looking for in the file, it raised an exception at the
>> end.  I observed that my process was still hanging on to the mmap, due to
>> my local variable representing the mmap (which I presumed would have been
>> gc'd as it went out of scope as part of the throw) not being gc'd when the
>> function ended.  I can work around it in my function by setting that local
>> variable to None right before I throw, but this is python, not C, and in
>> python automatic memory management is assumed.
>>
>> So, +1 for that issue getting fixed.   From the issue it looks like there
>> is a deeper issue in python itself that could fix this, but as the fix
>> discussion is moving at a glacial pace, I say +1 for a twisted workaround,
>> which from the trac discussion, sounds possible.  Thanks,
>>
>>
> Like you said, it looks like there's already a patch that can solve the
> problem. All it needs before it can be reviewed is tests. If you could
> spare some time to write one (or however many are needed) then that would
> increase the ticket's chances for resolution quite a bit :)
>
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Benjamin Rutt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130626/b23c0eff/attachment.html>

From exarkun at twistedmatrix.com  Wed Jun 26 15:07:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 26 Jun 2013 21:07:25 -0000
Subject: [Twisted-Python] deferToThread and thrown exceptions break gc -
 ticket 3853
In-Reply-To: <CAMWA1_pC=KLMsRj-kDhvjPEm0tp-zRGPd6UfeNsUVg5-h8qOhw@mail.gmail.com>
References: <CAMWA1_oYZNNP2nhtAoEsaFAH4iuFXB+=O-mQrDYmAigak+Vk9g@mail.gmail.com>
 <CAPkRfUQ5JJswMPseum7X=MJFq6UVhPN4vcLK40NBFxgHRaczig@mail.gmail.com>
 <CAMWA1_pC=KLMsRj-kDhvjPEm0tp-zRGPd6UfeNsUVg5-h8qOhw@mail.gmail.com>
Message-ID: <20130626210725.28793.316817.divmod.xquotient.35@top>

On 08:15 pm, rutt.4 at osu.edu wrote:
>I am not sure that that trac issue contains a patch that will fix it. 
>The
>most recent patch on that trac issue is for twisted 8.1, and it does 
>not
>apply cleanly to twisted 12.3.0.  When I tried to place the 2 lines 
>that
>form the patch in the most obvious place in the 12.3.0 codebase (before 
>the
>code 'self.waiters.append(ct)') I could not get it to fix the repro I 
>have.
>Here's my repro:
>
>from twisted.internet import reactor
>from twisted.internet.threads import deferToThread
>
>class SomeClass(object):
>    def __del__(self):
>        print 'SomeClass\'s destructor was called!'

You need to be a little careful here.  Adding an object with a `__del__` 
method is a good way to further confuse garbage collection issues.  For 
this test to be valid, you now also need to prove that this object never 
becomes part of a reference cycle.

It's generally safer to use a weakref with a callback to prove things 
about when objects get collected.

However, I don't think this is a problem in this case.

I did modify your example in another way though:

from twisted.internet import reactor
from twisted.internet.threads import deferToThread

class SomeClass(object):
    def __del__(self):
        print "SomeClass\'s destructor was called!"

def foo():
    sc = SomeClass()
    raise RuntimeError('bah')

def shutmedown(data):
    print 'reactor shutdown happening soon'
    reactor.callLater(1, stop)

def stop():
    print 'reactor shutdown happening now'
    reactor.stop()

def go():
    d = deferToThread(foo)
    d.addCallbacks(shutmedown, shutmedown)
reactor.callWhenRunning(go)
reactor.run()
print 'Reactor shutdown'

Notice that now it doesn't shutdown as soon as the thread completes, but 
lets execution continue for a little while longer.

Against trunk at HEAD on Debian Wheezy, I see this behavior:

reactor shutdown happening soon
reactor shutdown happening now
SomeClass's destructor was called!
Reactor shutdown

This still shows there is a problem, since the object is kept alive for 
an arbitrary amount of time after the function in the thread raises the 
exception.

Then I inserted just the `sys.exc_clear()` call above the "with 
self._workerState..." statement in threadpool.py in trunk at HEAD.  This 
changes the behavior to:

with
reactor shutdown happening soon
SomeClass's destructor was called!
reactor shutdown happening now
Reactor shutdown

Notice the destructor is called sooner.  From watching this run, I can 
also say it is called soon after the callback on the deferToThread 
Deferred fires (not, say, after the 1 second delay I inserted).

Whether or not it's possible to have the destructor called *even* sooner 
than this, I don't know.  This behavior does seem like it's good enough 
for most cases though.

Jean-Paul


From jamesbroadhead at gmail.com  Thu Jun 27 17:12:37 2013
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Fri, 28 Jun 2013 00:12:37 +0100
Subject: [Twisted-Python] EuroPython Sprint Ideas?
Message-ID: <CA+hid6HK2S093KoxdwnNkeOeLz8Y6-hL8pVXo4fZBgen5Z-0tw@mail.gmail.com>

Hi guys,

EuroPython is just around the corner, so I was wondering if there are a few
people from this list going, and whether any of you have suggestions for a
sprinting session. There are around 60 people with the 'Twisted' tag on the
EuroPython site, so we could probably put together a moderate-sized team to
work on a larger feature.
It would be really helpful if someone who has actually made some Twisted
commits could be there too, for process and guidance etc. .

Suggestions / bug links welcome, even if you're not going to be there!

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130628/c2ad5553/attachment.html>

From exarkun at twistedmatrix.com  Thu Jun 27 18:39:47 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 28 Jun 2013 00:39:47 -0000
Subject: [Twisted-Python] EuroPython Sprint Ideas?
In-Reply-To: <CA+hid6HK2S093KoxdwnNkeOeLz8Y6-hL8pVXo4fZBgen5Z-0tw@mail.gmail.com>
References: <CA+hid6HK2S093KoxdwnNkeOeLz8Y6-hL8pVXo4fZBgen5Z-0tw@mail.gmail.com>
Message-ID: <20130628003947.28793.1938984249.divmod.xquotient.41@top>

On 27 Jun, 11:12 pm, jamesbroadhead at gmail.com wrote:
>Hi guys,
>
>EuroPython is just around the corner, so I was wondering if there are a 
>few
>people from this list going, and whether any of you have suggestions 
>for a
>sprinting session. There are around 60 people with the 'Twisted' tag on 
>the
>EuroPython site, so we could probably put together a moderate-sized 
>team to
>work on a larger feature.
>It would be really helpful if someone who has actually made some 
>Twisted
>commits could be there too, for process and guidance etc. .
>
>Suggestions / bug links welcome, even if you're not going to be there!

One project which is massively parallelizable is emptying this page:

    http://twistedmatrix.com/trac/report/15

Instructions for doing so, in some great detail, are available at:

    http://twistedmatrix.com/trac/wiki/ReviewProcess

Whatever happens, I hope everyone attending the conference has a great 
time!

Jean-Paul


From _ at lvh.io  Fri Jun 28 08:50:06 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 28 Jun 2013 16:50:06 +0200
Subject: [Twisted-Python] How do you write a setup.py that installs plugins?
Message-ID: <CAE_Hg6Zhu+UnMGQOC0M9g3dkK+P98b8bMBMBA3_Pv8ZK4jHdNA@mail.gmail.com>

Hi,


How are you supposed to write a setup.py that installs twistd plugins?

I have this piece of tribal knowledge:

----
from setuptools.command import egg_info

def _top_level(name):
    return name.split('.', 1)[0]

def _hacked_write_toplevel_names(cmd, basename, filename):
    names = map(_top_level, cmd.distribution.iter_distribution_names())
    pkgs = dict.fromkeys(set(names) - set(["twisted"]))
    cmd.write_file("top-level names", filename, '\n'.join(pkgs) + '\n')

egg_info.write_toplevel_names = _hacked_write_toplevel_names
---

But I don't actually know what's actually required, and I don't actually
know where this is documented (if at all). Plus, it looks pretty
unsanitary, and appears to introduce a dependency to setuptools.

So, how am I supposed to do this?

Thanks in advance
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130628/370cba6b/attachment.html>

From exarkun at twistedmatrix.com  Fri Jun 28 11:30:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 28 Jun 2013 17:30:25 -0000
Subject: [Twisted-Python] How do you write a setup.py that installs
 plugins?
In-Reply-To: <CAE_Hg6Zhu+UnMGQOC0M9g3dkK+P98b8bMBMBA3_Pv8ZK4jHdNA@mail.gmail.com>
References: <CAE_Hg6Zhu+UnMGQOC0M9g3dkK+P98b8bMBMBA3_Pv8ZK4jHdNA@mail.gmail.com>
Message-ID: <20130628173025.28793.1085345468.divmod.xquotient.44@top>

On 02:50 pm, _ at lvh.io wrote:
>Hi,
>
>
>How are you supposed to write a setup.py that installs twistd plugins?

See http://stackoverflow.com/questions/7275295

Jean-Paul


From glyph at twistedmatrix.com  Fri Jun 28 11:41:30 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 28 Jun 2013 10:41:30 -0700
Subject: [Twisted-Python] How do you write a setup.py that installs
	plugins?
In-Reply-To: <20130628173025.28793.1085345468.divmod.xquotient.44@top>
References: <CAE_Hg6Zhu+UnMGQOC0M9g3dkK+P98b8bMBMBA3_Pv8ZK4jHdNA@mail.gmail.com>
 <20130628173025.28793.1085345468.divmod.xquotient.44@top>
Message-ID: <FACDFCCF-D8AF-4A70-9A03-E2006D357AEF@twistedmatrix.com>


On Jun 28, 2013, at 10:30 AM, exarkun at twistedmatrix.com wrote:

> On 02:50 pm, _ at lvh.io wrote:
>> Hi,
>> 
>> 
>> How are you supposed to write a setup.py that installs twistd plugins?
> 
> See http://stackoverflow.com/questions/7275295

As an open source maintainer, I should be able to tell you how setup.py works... however viewer, it is one of the greatest mysteries in the scientific world.  It would be good to raise this question on a different mailing list; one with lots of people with knowledge of internals of packaging tools.  If any of them need clarification on the Twisted side of things, I'd be happy to expand and improve the question.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130628/6237e91a/attachment.html>

From jaspreetsingh4575 at gmail.com  Fri Jun 28 14:03:23 2013
From: jaspreetsingh4575 at gmail.com (jaspreet singh Kalsi)
Date: Sat, 29 Jun 2013 01:33:23 +0530
Subject: [Twisted-Python] =?windows-1252?q?=93Unhandled_Error=94_comes_whe?=
	=?windows-1252?q?n_TCP_server_tries_to_accept_connections_from_cli?=
	=?windows-1252?q?ent_in_twisted?=
Message-ID: <CACee-Qs3DKf1rpMbBLwMSB2M+mjZWgHevvoJcOrWRxdO8HoG8Q@mail.gmail.com>

from twisted.internet.protocol import Factory,Protocolfrom
twisted.internet import reactor
class ChatServer(Protocol):
    def connectionMade(self):
    print "A Client Has Connected"

factory = Factory()
reactor.listenTCP(80,factory)print "Chat Server Started"

reactor.run()


the above code is running succesfully.but when I try to open
TCP(telnet localhost 80).

Errors occurs :

Unhandled ErrorTraceback (most recent call last):
  File "C:\Python27\lib\site-packages\twisted\python\log.py", line 69,
in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "C:\Python27\lib\site-packages\twisted\python\context.py", line
118, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "C:\Python27\lib\site-packages\twisted\python\context.py", line
81, in callWithContext
    return func(*args,**kw)
  File "C:\Python27\lib\site-packages\twisted\internet\selectreactor.py",
line 150, in _doReadOrWrite
    why = getattr(selectable, method)()--- <exception caught here> ---
  File "C:\Python27\lib\site-packages\twisted\internet\tcp.py", line
718, in doRead
    protocol = self.factory.buildProtocol(self._buildAddr(addr))
  File "C:\Python27\lib\site-packages\twisted\internet\protocol.py",
line 104, in buildProtocol
    p = self.protocol()
exceptions.TypeError: 'NoneType' object is not callable


I m using windows 8,python 2.7 and Twisted 12.0

sir/mam i have also discuss this question on stackoverflow ...but i
did'nt get any appropriate answer.....

please help me .
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130629/b578740e/attachment-0001.html>

From _ at lvh.io  Fri Jun 28 15:12:10 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 28 Jun 2013 23:12:10 +0200
Subject: [Twisted-Python]
	=?windows-1252?q?=93Unhandled_Error=94_comes_whe?=
	=?windows-1252?q?n_TCP_server_tries_to_accept_connections_from_cli?=
	=?windows-1252?q?ent_in_twisted?=
In-Reply-To: <CACee-Qs3DKf1rpMbBLwMSB2M+mjZWgHevvoJcOrWRxdO8HoG8Q@mail.gmail.com>
References: <CACee-Qs3DKf1rpMbBLwMSB2M+mjZWgHevvoJcOrWRxdO8HoG8Q@mail.gmail.com>
Message-ID: <CAE_Hg6b5eRECROw=j7ROBxHMGqQQG1X9X+8YPvBrEt-vowPh3Q@mail.gmail.com>

You forgot to set the protocol attribute of the factory.

factory.protocol = ChatServer
On Jun 28, 2013 10:05 PM, "jaspreet singh Kalsi" <
jaspreetsingh4575 at gmail.com> wrote:

> from twisted.internet.protocol import Factory,Protocolfrom twisted.internet import reactor
> class ChatServer(Protocol):
>     def connectionMade(self):
>     print "A Client Has Connected"
>
> factory = Factory()
> reactor.listenTCP(80,factory)print "Chat Server Started"
>
> reactor.run()
>
>
>
> the above code is running succesfully.but when I try to open TCP(telnet localhost 80).
>
>
> Errors occurs :
>
> Unhandled ErrorTraceback (most recent call last):
>   File "C:\Python27\lib\site-packages\twisted\python\log.py", line 69, in callWithContext
>     return context.call({ILogContext: newCtx}, func, *args, **kw)
>   File "C:\Python27\lib\site-packages\twisted\python\context.py", line 118, in callWithContext
>     return self.currentContext().callWithContext(ctx, func, *args, **kw)
>   File "C:\Python27\lib\site-packages\twisted\python\context.py", line 81, in callWithContext
>     return func(*args,**kw)
>   File "C:\Python27\lib\site-packages\twisted\internet\selectreactor.py", line 150, in _doReadOrWrite
>     why = getattr(selectable, method)()--- <exception caught here> ---
>   File "C:\Python27\lib\site-packages\twisted\internet\tcp.py", line 718, in doRead
>     protocol = self.factory.buildProtocol(self._buildAddr(addr))
>   File "C:\Python27\lib\site-packages\twisted\internet\protocol.py", line 104, in buildProtocol
>     p = self.protocol()
> exceptions.TypeError: 'NoneType' object is not callable
>
>
>
> I m using windows 8,python 2.7 and Twisted 12.0
>
> sir/mam i have also discuss this question on stackoverflow ...but i did'nt get any appropriate answer.....
>
>
> please help me .
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130628/0a6b5064/attachment-0001.html>

From jamesbroadhead at gmail.com  Sat Jun 29 09:07:33 2013
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Sat, 29 Jun 2013 16:07:33 +0100
Subject: [Twisted-Python] EuroPython Sprint Ideas?
In-Reply-To: <20130628003947.28793.1938984249.divmod.xquotient.41@top>
References: <CA+hid6HK2S093KoxdwnNkeOeLz8Y6-hL8pVXo4fZBgen5Z-0tw@mail.gmail.com>
 <20130628003947.28793.1938984249.divmod.xquotient.41@top>
Message-ID: <CA+hid6HdKfWr207v8AqFY==WVpV6SeZVMBtWWfOeAgTmZ3XhJQ@mail.gmail.com>

On 28 June 2013 01:39, <exarkun at twistedmatrix.com> wrote:

>
> One project which is massively parallelizable is emptying this page:
>
>    http://twistedmatrix.com/trac/**report/15<http://twistedmatrix.com/trac/report/15>
>
> Instructions for doing so, in some great detail, are available at:
>
>    http://twistedmatrix.com/trac/**wiki/ReviewProcess<http://twistedmatrix.com/trac/wiki/ReviewProcess>
>
> Whatever happens, I hope everyone attending the conference has a great
> time!
>

Yep, that looks like the right place to start alright -- but having someone
there who is familiar with the process is always really valuable for quick
questions etc.

I'll be sure to be loitering in the chat room when we start work; if any
particular suggestions occur, do let me know. I've vaguely been thinking
about looking at the leaves of the python3x dependency graph, but we'll see
how far I get with the reviews.

I've had one email from an off-list volunteer, so let's see how many turn
up.

JB
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130629/829d2109/attachment.html>

From trac at twistedmatrix.com  Sun Jun 30 02:43:35 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 30 Jun 2013 08:43:35 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1372581815.06.6092008599189335610@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130630/9780cee1/attachment.html>

From ashfall at twistedmatrix.com  Sun Jun 30 07:34:42 2013
From: ashfall at twistedmatrix.com (Ashwini Oruganti)
Date: Sun, 30 Jun 2013 19:04:42 +0530
Subject: [Twisted-Python] Twisted 13.1.0 released
Message-ID: <CAMFCZ-3F=0UnatN9iufbxHy6z+Y_s5iOgGgOcFpnF-V5xa2V8A@mail.gmail.com>

On behalf of  Twisted Matrix Laboratories, I am pleased to announce the
release of
Twisted 13.1.

Highlights for this release include:

  * trial now has an --exitfirst flag which stops the test run after the
first error or failure.

  * twisted.internet.ssl.CertificateOptions now supports chain certificates.

  * twisted.conch.endpoints.SSHCommandClientEndpoint is a new
IStreamClientEndpoint
    which supports connecting a protocol to the stdio of a command running
on a remote host
    via an SSH connection.

  * twisted.web.xmlrpc.QueryProtocol now generates valid Authorization
headers for long user
    names and passwords.

  * twisted.internet.endpoints.connectProtocol allows connecting to a
client endpoint using only
    a protocol instance, rather than requiring a factory.

For more information, see the NEWS file here:
  http://twistedmatrix.com/Releases/Twisted/13.1/NEWS.txt

Download it now from:
  http://pypi.python.org/packages/source/T/Twisted/Twisted-13.1.0.tar.bz2 or

http://pypi.python.org/packages/2.7/T/Twisted/Twisted-13.1.0.win32-py2.7.msi

Many thanks to Tom Prince and Thomas Herv?, whose work on release-process
and answers
to numerous questions made this release possible.
Thanks also to the supporters of the Twisted Software Foundation and to the
many contributors
for this release.

-Ashwini
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130630/0f59da43/attachment.html>

From exarkun at twistedmatrix.com  Sun Jun 30 12:28:45 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 Jun 2013 18:28:45 -0000
Subject: [Twisted-Python] baelnorn
In-Reply-To: <878v1sqbj7.fsf@loki.hocat.ca>
References: <878v1sqbj7.fsf@loki.hocat.ca>
Message-ID: <20130630182845.28793.1215234783.divmod.xquotient.50@top>

On 07:54 am, tom.prince at ualberta.net wrote:
>There appears to be some issue with baelnorn, that is causing it to 
>have
>difficulty connecting via bzr. I'm not sure exactly what is happening.
>
>Rather than letting builds fail, I've temporarily shutdown the
>buildslave there.

As baelnorn hosts around half our supported builders, maybe there 
shouldn't be any more builds until this is addressed.

Also, I don't think this is a cube-administrators issue.  It seems more 
like a twisted-python issue, since continuous integration is central to 
Twisted development.

Jean-Paul


From glyph at twistedmatrix.com  Sat Jun  1 03:18:26 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 1 Jun 2013 02:18:26 -0700
Subject: [Twisted-Python] Twisted on PyPI
In-Reply-To: <20130530124315.25989.1090113342.divmod.xquotient.8@top>
References: <83A14CC3-B102-4660-969B-6098CF19D92F@stufft.io>
 <87vc66mgz2.fsf@hermes.hocat.ca> <8761y1mqc8.fsf@loki.hocat.ca>
 <20130530124315.25989.1090113342.divmod.xquotient.8@top>
Message-ID: <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>


On May 30, 2013, at 5:43 AM, exarkun at twistedmatrix.com wrote:

> On 29 May, 09:24 pm, tom.prince at ualberta.net wrote:
>> Tom Prince <tom.prince at ualberta.net> writes:
>>> Donald Stufft <donald at stufft.io> writes:
>>>> So I'm emailing you all to warn you about this upcoming change since
>>>> Twisted is one of the major projects affected and also to see if the
>>>> Twisted developers would prefer a different rename than Twisted-Web.
>>> 
>>> Looking at the project pages on pypi, those don't appear to be
>>> installable anyway. I think that it might make sense to just remove
>>> them, at this point.
>> 
>> There appears to be a consensus to remove them, but I don't have access
>> to do that.
> 
> What are we removing?  All of the subprojects on PyPI?

Yes.

> If so, the release process will need to be adjusted to avoid re-adding them.

Thomas has already done that: <http://twistedmatrix.com/trac/wiki/ReleaseProcess?action=diff&version=164&old_version=163>

> What makes them uninstallable?  Wouldn't it make as much sense to just fix that?  Is this only a PyPI interaction thing, or is there actually a problem with the packages being distributed?

We never tested installing them in any fashion; we certainly never did any continuous integration on them.  I don't think we ever fully figured out the 'namespace package' thing.  Their distribution names won't satisfy a dependency on 'Twisted', and 'Twisted' won't satisfy a dependency on them, but they install the same files, so if another project attempted to use them as a minimal dependency, you would have gotten a broken mess.

Given all this I can't remember why we bothered to put these on PyPI in the first place, and it makes sense to remove them.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130601/843ef747/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Jun  1 06:00:11 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 01 Jun 2013 12:00:11 -0000
Subject: [Twisted-Python] Twisted on PyPI
In-Reply-To: <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>
References: <83A14CC3-B102-4660-969B-6098CF19D92F@stufft.io>
 <87vc66mgz2.fsf@hermes.hocat.ca> <8761y1mqc8.fsf@loki.hocat.ca>
 <20130530124315.25989.1090113342.divmod.xquotient.8@top>
 <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>
Message-ID: <20130601120011.25989.928264892.divmod.xquotient.10@top>

On 09:18 am, glyph at twistedmatrix.com wrote:
>
>On May 30, 2013, at 5:43 AM, exarkun at twistedmatrix.com wrote:
>>On 29 May, 09:24 pm, tom.prince at ualberta.net wrote:
>>>Tom Prince <tom.prince at ualberta.net> writes:
>>>>Donald Stufft <donald at stufft.io> writes:
>>>>>So I'm emailing you all to warn you about this upcoming change 
>>>>>since
>>>>>Twisted is one of the major projects affected and also to see if 
>>>>>the
>>>>>Twisted developers would prefer a different rename than Twisted- 
>>>>>Web.
>>>>
>>>>Looking at the project pages on pypi, those don't appear to be
>>>>installable anyway. I think that it might make sense to just remove
>>>>them, at this point.
>>>
>>>There appears to be a consensus to remove them, but I don't have 
>>>access
>>>to do that.
>>
>>What are we removing?  All of the subprojects on PyPI?
>
>Yes.
>>If so, the release process will need to be adjusted to avoid re-adding 
>>them.
>
>Thomas has already done that: 
><http://twistedmatrix.com/trac/wiki/ReleaseProcess?action=diff&version=164&old_version=163>
>>What makes them uninstallable?  Wouldn't it make as much sense to just 
>>fix that?  Is this only a PyPI interaction thing, or is there actually 
>>a problem with the packages being distributed?
>
>We never tested installing them in any fashion; we certainly never did 
>any continuous integration on them.  I don't think we ever fully 
>figured out the 'namespace package' thing.  Their distribution names 
>won't satisfy a dependency on 'Twisted', and 'Twisted' won't satisfy a 
>dependency on them, but they install the same files, so if another 
>project attempted to use them as a minimal dependency, you would have 
>gotten a broken mess.
>
>Given all this I can't remember why we bothered to put these on PyPI in 
>the first place, and it makes sense to remove them.

Well, someone seems to have done so now, though I don't see how to find 
out who or when from the PyPI user interface.  Also, Twisted Web2 was 
left alone (ie, it is still on PyPI) which strikes me as an odd 
decision.

Jean-Paul



From pablojavierpy at gmail.com  Sat Jun  1 16:52:24 2013
From: pablojavierpy at gmail.com (Pablo Santa Cruz)
Date: Sat, 1 Jun 2013 18:52:24 -0400
Subject: [Twisted-Python] OSX 10.8 buildslave
In-Reply-To: <87fvx3kp82.fsf@loki.hocat.ca>
References: <87y5b617le.fsf@hermes.hocat.ca> <87fvx5mrmf.fsf@loki.hocat.ca>
 <5E3A89398864414E8EE2CB192E0C965C114C07B86E@EXMBX10.exchhosting.com>
 <87li6xl74m.fsf@loki.hocat.ca>
 <20130530115933.25989.1720691440.divmod.xquotient.4@top>
 <87fvx3kp82.fsf@loki.hocat.ca>
Message-ID: <C99EE341-8126-46C5-B0E8-223AF52C01C6@gmail.com>

Hi Tom,

What would you need as a replacement? A dedicated Mac OS X workstation? Or a Mac OS X workstation to perform builds occasionally?

Regards.

On May 31, 2013, at 1:56 PM, Tom Prince <buildbot at twistematrix.com> wrote:

> Due to circumstances beyond our control, the machine that we have been
> using to host the OSX 10.8 buildslave is currently unavailable.
> 
> As per policy[1], official support will be dropped for this platform before
> the next release, unless a replacement is found.
> 
>  Tom
> 
> [1] https://twistedmatrix.com/trac/wiki/ContinuousIntegration/FixYourDamnBuildSlave
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Sun Jun  2 07:11:49 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 Jun 2013 13:11:49 -0000
Subject: [Twisted-Python] OSX 10.8 buildslave
In-Reply-To: <C99EE341-8126-46C5-B0E8-223AF52C01C6@gmail.com>
References: <87y5b617le.fsf@hermes.hocat.ca> <87fvx5mrmf.fsf@loki.hocat.ca>
 <5E3A89398864414E8EE2CB192E0C965C114C07B86E@EXMBX10.exchhosting.com>
 <87li6xl74m.fsf@loki.hocat.ca>
 <20130530115933.25989.1720691440.divmod.xquotient.4@top>
 <87fvx3kp82.fsf@loki.hocat.ca>
 <C99EE341-8126-46C5-B0E8-223AF52C01C6@gmail.com>
Message-ID: <20130602131149.25989.370350242.divmod.xquotient.14@top>

On 1 Jun, 10:52 pm, pablojavierpy at gmail.com wrote:
>Hi Tom,
>
>What would you need as a replacement? A dedicated Mac OS X workstation? 
>Or a Mac OS X workstation to perform builds occasionally?

Build slaves don't need to be dedicated, but they do need to be online 
24/7 so that a developer can trigger a build at any time.

See https://twistedmatrix.com/trac/wiki/ContinuousIntegration for more 
details.

Jean-Paul



From glyph at twistedmatrix.com  Sun Jun  2 20:19:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 2 Jun 2013 19:19:27 -0700
Subject: [Twisted-Python] Twisted on PyPI
In-Reply-To: <20130601120011.25989.928264892.divmod.xquotient.10@top>
References: <83A14CC3-B102-4660-969B-6098CF19D92F@stufft.io>
 <87vc66mgz2.fsf@hermes.hocat.ca> <8761y1mqc8.fsf@loki.hocat.ca>
 <20130530124315.25989.1090113342.divmod.xquotient.8@top>
 <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>
 <20130601120011.25989.928264892.divmod.xquotient.10@top>
Message-ID: <43BB6ADD-A476-4E3B-B055-32A2E5A5F366@twistedmatrix.com>

On Jun 1, 2013, at 5:00 AM, exarkun at twistedmatrix.com wrote:

> Well, someone seems to have done so now, though I don't see how to find out who or when from the PyPI user interface.

As I said in my message, it was Thomas; if that's ambiguous, I meant Thomas Hervé.

> Also, Twisted Web2 was left alone (ie, it is still on PyPI) which strikes me as an odd decision.

Web2 didn't have the same issues (containing the same files as other distributions but with a different name) since it was always distributed separately.

It might make sense to remove it, too, but if we do, it's for different reasons.  If nothing depends on it, I say we should kill it.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130602/c5b8d90c/attachment-0002.html>

From donald at stufft.io  Sun Jun  2 20:24:47 2013
From: donald at stufft.io (Donald Stufft)
Date: Sun, 2 Jun 2013 22:24:47 -0400
Subject: [Twisted-Python] Twisted on PyPI
In-Reply-To: <43BB6ADD-A476-4E3B-B055-32A2E5A5F366@twistedmatrix.com>
References: <83A14CC3-B102-4660-969B-6098CF19D92F@stufft.io>
 <87vc66mgz2.fsf@hermes.hocat.ca> <8761y1mqc8.fsf@loki.hocat.ca>
 <20130530124315.25989.1090113342.divmod.xquotient.8@top>
 <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>
 <20130601120011.25989.928264892.divmod.xquotient.10@top>
 <43BB6ADD-A476-4E3B-B055-32A2E5A5F366@twistedmatrix.com>
Message-ID: <AFEDC2FA-C498-4832-A1D5-DD76B33F50AC@stufft.io>


On Jun 2, 2013, at 10:19 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Jun 1, 2013, at 5:00 AM, exarkun at twistedmatrix.com wrote:
> 
>> Well, someone seems to have done so now, though I don't see how to find out who or when from the PyPI user interface.
> 
> As I said in my message, it was Thomas; if that's ambiguous, I meant Thomas Hervé.
> 
>> Also, Twisted Web2 was left alone (ie, it is still on PyPI) which strikes me as an odd decision.
> 
> Web2 didn't have the same issues (containing the same files as other distributions but with a different name) since it was always distributed separately.
> 
> It might make sense to remove it, too, but if we do, it's for different reasons.  If nothing depends on it, I say we should kill it.
> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

I'm going to duck out here and unsubscribe :)

If Twisted needs any help getting anything fixed on PyPI feel free to contact me directly.

-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130602/9b937d1f/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20130602/9b937d1f/attachment.sig>

From exarkun at twistedmatrix.com  Mon Jun  3 05:13:18 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 03 Jun 2013 11:13:18 -0000
Subject: [Twisted-Python] Twisted on PyPI
In-Reply-To: <43BB6ADD-A476-4E3B-B055-32A2E5A5F366@twistedmatrix.com>
References: <83A14CC3-B102-4660-969B-6098CF19D92F@stufft.io>
 <87vc66mgz2.fsf@hermes.hocat.ca> <8761y1mqc8.fsf@loki.hocat.ca>
 <20130530124315.25989.1090113342.divmod.xquotient.8@top>
 <E1960F14-ABCF-4663-86A2-71ED8C642984@twistedmatrix.com>
 <20130601120011.25989.928264892.divmod.xquotient.10@top>
 <43BB6ADD-A476-4E3B-B055-32A2E5A5F366@twistedmatrix.com>
Message-ID: <20130603111318.25989.1532068576.divmod.xquotient.21@top>

On 02:19 am, glyph at twistedmatrix.com wrote:
>On Jun 1, 2013, at 5:00 AM, exarkun at twistedmatrix.com wrote:
>>Well, someone seems to have done so now, though I don't see how to 
>>find out who or when from the PyPI user interface.
>
>As I said in my message, it was Thomas; if that's ambiguous, I meant 
>Thomas Hervé.

Sorry, I didn't see the message where you said that.
>>Also, Twisted Web2 was left alone (ie, it is still on PyPI) which 
>>strikes me as an odd decision.
>
>Web2 didn't have the same issues (containing the same files as other 
>distributions but with a different name) since it was always 
>distributed separately.
>
>It might make sense to remove it, too, but if we do, it's for different 
>reasons.  If nothing depends on it, I say we should kill it.

Removing it seems like the right thing to me.  I have no idea if 
anything depends on it, but having it on PyPI only means that things 
could continue to depend on it - or even worse, new things might start 
depending on it.

Jean-Paul



From glyph at twistedmatrix.com  Mon Jun  3 14:59:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 3 Jun 2013 13:59:42 -0700
Subject: [Twisted-Python] github, again
Message-ID: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>

Hi Twisted developers,

This weekend I had a discussion with many Twisted developers, both local to and visiting San Francisco.  The topic came up of how to get more long-term contributors to participate more regularly in the project - particularly, doing code reviews, but also, developing and contributing to complex fixes and features that new contributors might not be able to tackle.

One suggestion that almost everybody made immediately was: we should use Github for code reviews.

In the past, I've heard this suggestion given mainly as a way to contribute more code, which does not appeal to me, since we are already swamped reviewing all the code that is currently being contributed.

This time, however, it's been pitched as a way to get people to do more reviews, which I'm keenly interested in.  Why would people do more reviews on Github?  In a nutshell, it's a lot less work.  Here are some reasons why:

Instead of having to run 'force-builds' on the command line, or load a buildbot status page, Github has a way for a build system to report build success automatically, so you can see immediately within a pull request if the changes that it proposes are "good to merge".  You can see this at work with Travis here: <https://github.com/twisted/klein/pull/11>.  Originally I thought that this was a Travis-CI feature, but have since learned that this is apparently easy - trivial even - to hook up to Buildbot, since it's a simple HTTP API to invoke when a build completes, and there is even some existing buildbot infrastructure (deployed by Django, among others) to automate it.
Instead of having to describe each patch location so that you can comment on it in a single message, if you want to put a comment on a particular part of a diff in a Github pull request, you can just click on it and start typing.
In addition to the diff, it's reasonably easy to see the code in context on the web, which is faster than getting it into one's local development environment.
If a review is successful, instead of having to have a local development environment, a committer can just hit the "approve" button and it's landed immediately.
Instead of having to read through all history ever to see what's still relevant, a pull request will hide comments that address outdated diffs, allowing the change author to easily see what remains.

These advantages are not comprehensive, but they're the more significant ones I remember from this discussion.

A prerequisite for using Github for code reviews would be using Git rather than Subversion.  Luckily there's not much work to do in this area, thanks to Tom's excellent work on the Git import and automatic Github mirror.  As a bonus, by using Git instead of Subversion, we can start properly recording merge metadata.

In this discussion, Alex Gaynor pointed out that Django has a hybrid workflow where they still use Trac for bug tracking, and Github for code review.  We would therefore not need to come up with a way to migrate all of our tickets to Github issues (which seems, oddly, to be fairly unpopular even among those who like github a lot).

What would need to happen in order for this to take place?

We'd need some consensus (hence this message).
We'd need to update the release process <http://twistedmatrix.com/trac/wiki/ReleaseProcess> and our development documentation <http://twistedmatrix.com/trac/wiki/BasicGuideToContributingCode> to refer to the relevant Git commands rather than Subversion commands.
We'd need a redirect from <http://twistedmatrix.com/trac/browser/> and <http://twistedmatrix.com/trac/changeset/> that would point at <https://github.com/twisted/twisted> and <https://github.com/twisted/twisted/commits/> respectively.
We'd need a Github web hook that could poke Buildbot to kick off commits.
We'd need Buildbot integration to update Github pull requests with build results when builds complete.
We'd need someone to install git rather than bzr on all the buildbots, and update the configuration of the builders to get the code from a git rather than Subversion URL.
Someone will need to convert every open ticket in review to a pull request.

I do anticipate some objections.

One objection is that each of the above tasks is going to take some work.

I am fairly confident that some of the people who have educated me here will step forward to volunteer to do it.  Please reply to this message if you'd like to volunteer, saying what you'd like to volunteer to do.  If not, then I guess that objection stands :-).

Another is that this might not be worth that investment of effort.  This is why it was nice to have Alex contributing to the discussion: Django did basically this very change (right down to the "Trac for tickets / Github for pull requests" distinction), at a much higher scale than we have, and as he described it the change was *well* worth it.

Another objection is that Github is proprietary software, and an externally-maintained service that we'd be depending upon.

One solution to the "proprietary software" thing is the availability of the MIT-licensed <http://gitlab.org>.  It's a largely feature-complete clone of Github; if, for some reason, we need to migrate away from Github in a hurry, it will be relatively painless to set up Gitlab instead, and the fact that Git is a DVCS means every contributor will serve as a backup.  The main reason I would not suggest just deploying it is that it creates another sticky infrastructure-management problem, and while Braid is great, I'd prefer to avoid creating more work in that area.  Github also has APIs for literally all of their features, so we can create a backup script.

(Also worth noting: Gitlab is an open-source competitor to Github, but they still trust Github enough to <https://github.com/gitlabhq/> host their own development there.)

Finally, my own minor concern: Github has no notion of a "code review" as a unit of work.  A pull request is just "open" until it is "closed".  Closing pull requests to request changes would be jarring to the cultural norms associated with Github's UI.  All the github users I've spoken with, even those who follow processes which are effectively identical to Twisted's, have assured me that this is not really an issue.  A code review is "accepted" when you merge it; it's "rejected" if the pull request is still open but has some comments on it.  This will make porting over <http://twistedmatrix.com/highscores/> a bit challenging, but I think it would be worth letting that break for the time being.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130603/f0366a99/attachment-0002.html>

From jonathan at stoppani.name  Mon Jun  3 15:32:12 2013
From: jonathan at stoppani.name (Jonathan Stoppani)
Date: Mon, 3 Jun 2013 17:32:12 -0400
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <873CDA58-A541-454C-9A05-9024DB2CCE4A@stoppani.name>

Hi Glyph,

That is great news. I already helped with Braid and would be interested in contributing some work in this area.

Cheers,
Jonathan

On Jun 3, 2013, at 16:59, Glyph <glyph at twistedmatrix.com> wrote:

> Hi Twisted developers,
> 
> This weekend I had a discussion with many Twisted developers, both local to and visiting San Francisco.  The topic came up of how to get more long-term contributors to participate more regularly in the project - particularly, doing code reviews, but also, developing and contributing to complex fixes and features that new contributors might not be able to tackle.
> 
> One suggestion that almost everybody made immediately was: we should use Github for code reviews.
> 
> In the past, I've heard this suggestion given mainly as a way to contribute more code, which does not appeal to me, since we are already swamped reviewing all the code that is currently being contributed.
> 
> This time, however, it's been pitched as a way to get people to do more reviews, which I'm keenly interested in.  Why would people do more reviews on Github?  In a nutshell, it's a lot less work.  Here are some reasons why:
> 
> 	• Instead of having to run 'force-builds' on the command line, or load a buildbot status page, Github has a way for a build system to report build success automatically, so you can see immediately within a pull request if the changes that it proposes are "good to merge".  You can see this at work with Travis here: <https://github.com/twisted/klein/pull/11>.  Originally I thought that this was a Travis-CI feature, but have since learned that this is apparently easy - trivial even - to hook up to Buildbot, since it's a simple HTTP API to invoke when a build completes, and there is even some existing buildbot infrastructure (deployed by Django, among others) to automate it.
> 	• Instead of having to describe each patch location so that you can comment on it in a single message, if you want to put a comment on a particular part of a diff in a Github pull request, you can just click on it and start typing.
> 	• In addition to the diff, it's reasonably easy to see the code in context on the web, which is faster than getting it into one's local development environment.
> 	• If a review is successful, instead of having to have a local development environment, a committer can just hit the "approve" button and it's landed immediately.
> 	• Instead of having to read through all history ever to see what's still relevant, a pull request will hide comments that address outdated diffs, allowing the change author to easily see what remains.
> 
> These advantages are not comprehensive, but they're the more significant ones I remember from this discussion.
> 
> A prerequisite for using Github for code reviews would be using Git rather than Subversion.  Luckily there's not much work to do in this area, thanks to Tom's excellent work on the Git import and automatic Github mirror.  As a bonus, by using Git instead of Subversion, we can start properly recording merge metadata.
> 
> In this discussion, Alex Gaynor pointed out that Django has a hybrid workflow where they still use Trac for bug tracking, and Github for code review.  We would therefore not need to come up with a way to migrate all of our tickets to Github issues (which seems, oddly, to be fairly unpopular even among those who like github a lot).
> 
> What would need to happen in order for this to take place?
> 
> 	• We'd need some consensus (hence this message).
> 	• We'd need to update the release process <http://twistedmatrix.com/trac/wiki/ReleaseProcess> and our development documentation <http://twistedmatrix.com/trac/wiki/BasicGuideToContributingCode> to refer to the relevant Git commands rather than Subversion commands.
> 	• We'd need a redirect from <http://twistedmatrix.com/trac/browser/> and <http://twistedmatrix.com/trac/changeset/> that would point at <https://github.com/twisted/twisted> and <https://github.com/twisted/twisted/commits/> respectively.
> 	• We'd need a Github web hook that could poke Buildbot to kick off commits.
> 	• We'd need Buildbot integration to update Github pull requests with build results when builds complete.
> 	• We'd need someone to install git rather than bzr on all the buildbots, and update the configuration of the builders to get the code from a git rather than Subversion URL.
> 	• Someone will need to convert every open ticket in review to a pull request.
> 
> I do anticipate some objections.
> 
> One objection is that each of the above tasks is going to take some work.
> 
> I am fairly confident that some of the people who have educated me here will step forward to volunteer to do it.  Please reply to this message if you'd like to volunteer, saying what you'd like to volunteer to do.  If not, then I guess that objection stands :-).
> 
> Another is that this might not be worth that investment of effort.  This is why it was nice to have Alex contributing to the discussion: Django did basically this very change (right down to the "Trac for tickets / Github for pull requests" distinction), at a much higher scale than we have, and as he described it the change was *well* worth it.
> 
> Another objection is that Github is proprietary software, and an externally-maintained service that we'd be depending upon.
> 
> One solution to the "proprietary software" thing is the availability of the MIT-licensed <http://gitlab.org>.  It's a largely feature-complete clone of Github; if, for some reason, we need to migrate away from Github in a hurry, it will be relatively painless to set up Gitlab instead, and the fact that Git is a DVCS means every contributor will serve as a backup.  The main reason I would not suggest just deploying it is that it creates another sticky infrastructure-management problem, and while Braid is great, I'd prefer to avoid creating more work in that area.  Github also has APIs for literally all of their features, so we can create a backup script.
> 
> (Also worth noting: Gitlab is an open-source competitor to Github, but they still trust Github enough to <https://github.com/gitlabhq/> host their own development there.)
> 
> Finally, my own minor concern: Github has no notion of a "code review" as a unit of work.  A pull request is just "open" until it is "closed".  Closing pull requests to request changes would be jarring to the cultural norms associated with Github's UI.  All the github users I've spoken with, even those who follow processes which are effectively identical to Twisted's, have assured me that this is not really an issue.  A code review is "accepted" when you merge it; it's "rejected" if the pull request is still open but has some comments on it.  This will make porting over <http://twistedmatrix.com/highscores/> a bit challenging, but I think it would be worth letting that break for the time being.
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From ralphm at ik.nu  Mon Jun  3 15:40:33 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Mon, 03 Jun 2013 23:40:33 +0200
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <51AD0D51.9070508@ik.nu>

On 2013-06-03 22:59, Glyph wrote:
> Hi Twisted developers,
>
> [..]
 >
> One suggestion that almost everybody made immediately was: we should use
> Github for code reviews.

As mentioned on IRC, the only comment I have is about the lack of proper 
e-mail addresses associated with commits. Tom is investigating if this 
can be done with .mailmap, instead of having to make a proper mirror again.

Otherwise: do it.

-- 
ralphm



From chris at emerge-life.de  Mon Jun  3 15:51:19 2013
From: chris at emerge-life.de (Christian Kampka)
Date: Mon, 03 Jun 2013 23:51:19 +0200
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <51AD0FD7.1020800@emerge-life.de>

Am 03.06.2013 22:59, schrieb Glyph:
> Another objection is that Github is proprietary software, and an
> externally-maintained service that we'd be depending upon.
> 
> One solution to the "proprietary software" thing is the availability of
> the MIT-licensed <http://gitlab.org>.  It's a largely feature-complete
> clone of Github; if, for some reason, we need to migrate away from
> Github in a hurry, it will be relatively painless to set up Gitlab
> instead, and the fact that Git is a DVCS means every contributor will
> serve as a backup.  The main reason I would not suggest just deploying
> it is that it creates another sticky infrastructure-management problem,
> and while Braid is great, I'd prefer to avoid creating /more/ work in
> that area.  Github also has APIs for literally all of their features, so
> we can create a backup script.
> 
> (Also worth noting: Gitlab is an open-source competitor to Github, but
> they still trust Github enough to <https://github.com/gitlabhq/> host
> their own development there.)

It may be worth noting that the reason for gitlab being hosted on github
is probably due to the fact that up until very recently, gitlab had no
way for a non-registered user to access gitlab at all. Even though they
have introduced a "public area" for projects this does only include
anonymously cloning of a repository, you still cannot browse code or
look at issues, pull/merge request or wikis without a user account.

Although gitlab is great for internal projects, this lack of a proper
support for public features makes it imo not that suitable for open
projects.

Cheers,
Chris


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 899 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20130603/45142ab0/attachment.sig>

From radix at twistedmatrix.com  Mon Jun  3 17:48:51 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 3 Jun 2013 18:48:51 -0500
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <CAPkRfUQi_Z4N8MX7y7VHXpxQWtp20TmXOicK4Jf=vDkcLiDmxQ@mail.gmail.com>

On Mon, Jun 3, 2013 at 3:59 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> One suggestion that almost everybody made immediately was: we should use
> Github for code reviews.
>

I'm +1 on the whole proposition as described.

Finally, my own minor concern: Github has no notion of a "code review" as a
> unit of work.  A pull request is just "open" until it is "closed".  Closing
> pull requests to request changes would be jarring to the cultural norms
> associated with Github's UI.  All the github users I've spoken with, even
> those who follow processes which are effectively identical to Twisted's,
> have assured me that this is not really an issue.  A code review is
> "accepted" when you merge it; it's "rejected" if the pull request is still
> open but has some comments on it.  This will make porting over <
> http://twistedmatrix.com/highscores/> a bit challenging, but I think it
> would be worth letting that break for the time being.
>

I don't really like the idea of maintaining review state in Trac,
especially since one of the points of this discussion is to make the life
of the reviewer easier. My feeling is that the slight difference in review
workflow on PRs -- the fact that there is no "responsibility transfer"
mechanism -- will not be a serious problem in practice, and that we should
have a culture of closing abandoned PRs.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130603/450ab6dd/attachment-0002.html>

From jkakar at kakar.ca  Mon Jun  3 18:35:54 2013
From: jkakar at kakar.ca (Jamu Kakar)
Date: Mon, 3 Jun 2013 17:35:54 -0700
Subject: [Twisted-Python] github, again
In-Reply-To: <CAPkRfUQi_Z4N8MX7y7VHXpxQWtp20TmXOicK4Jf=vDkcLiDmxQ@mail.gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <CAPkRfUQi_Z4N8MX7y7VHXpxQWtp20TmXOicK4Jf=vDkcLiDmxQ@mail.gmail.com>
Message-ID: <CALWnh8qCo7axQJKndem=95LR-5v16ocbFTe1NmGZh=O_itB-PA@mail.gmail.com>

Hi,

On Mon, Jun 3, 2013 at 4:48 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> On Mon, Jun 3, 2013 at 3:59 PM, Glyph <glyph at twistedmatrix.com> wrote:
>> One suggestion that almost everybody made immediately was: we should use
>> Github for code reviews.
>
> I'm +1 on the whole proposition as described.

Me too.

>> Finally, my own minor concern: Github has no notion of a "code review" as
>> a unit of work.  A pull request is just "open" until it is "closed".
>> Closing pull requests to request changes would be jarring to the cultural
>> norms associated with Github's UI.  All the github users I've spoken with,
>> even those who follow processes which are effectively identical to
>> Twisted's, have assured me that this is not really an issue.  A code review
>> is "accepted" when you merge it; it's "rejected" if the pull request is
>> still open but has some comments on it.  This will make porting over
>> <http://twistedmatrix.com/highscores/> a bit challenging, but I think it
>> would be worth letting that break for the time being.
>
> I don't really like the idea of maintaining review state in Trac, especially
> since one of the points of this discussion is to make the life of the
> reviewer easier. My feeling is that the slight difference in review workflow
> on PRs -- the fact that there is no "responsibility transfer" mechanism --
> will not be a serious problem in practice, and that we should have a culture
> of closing abandoned PRs.

Something that has worked well for me on other projects is to use
simple conventions.  When you finally approve a branch you leave a
comment like 'jkakar:approve'.  If you expect changes you leave a
comment like 'jkakar:needs-fixing'.  In other words, you don't really
need an app-enforced mechanism if you have a simple convention.  I
propose starting with the simplest convention: the reviewing must add
an 'author:approve' comment when they're finally happy.

Thanks,
J.



From glyph at twistedmatrix.com  Mon Jun  3 19:00:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 3 Jun 2013 18:00:42 -0700
Subject: [Twisted-Python] github, again
In-Reply-To: <CALWnh8qCo7axQJKndem=95LR-5v16ocbFTe1NmGZh=O_itB-PA@mail.gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <CAPkRfUQi_Z4N8MX7y7VHXpxQWtp20TmXOicK4Jf=vDkcLiDmxQ@mail.gmail.com>
 <CALWnh8qCo7axQJKndem=95LR-5v16ocbFTe1NmGZh=O_itB-PA@mail.gmail.com>
Message-ID: <678E67F6-525E-4593-A722-9387C776D730@twistedmatrix.com>


On Jun 3, 2013, at 5:35 PM, Jamu Kakar <jkakar at kakar.ca> wrote:

> Hi,
> 
> On Mon, Jun 3, 2013 at 4:48 PM, Christopher Armstrong
> <radix at twistedmatrix.com> wrote:
>> On Mon, Jun 3, 2013 at 3:59 PM, Glyph <glyph at twistedmatrix.com> wrote:
>>> One suggestion that almost everybody made immediately was: we should use
>>> Github for code reviews.
>> 
>> I'm +1 on the whole proposition as described.
> 
> Me too.
> 
>>> Finally, my own minor concern: Github has no notion of a "code review" as
>>> a unit of work.  A pull request is just "open" until it is "closed".
>>> Closing pull requests to request changes would be jarring to the cultural
>>> norms associated with Github's UI.  All the github users I've spoken with,
>>> even those who follow processes which are effectively identical to
>>> Twisted's, have assured me that this is not really an issue.  A code review
>>> is "accepted" when you merge it; it's "rejected" if the pull request is
>>> still open but has some comments on it.  This will make porting over
>>> <http://twistedmatrix.com/highscores/> a bit challenging, but I think it
>>> would be worth letting that break for the time being.
>> 
>> I don't really like the idea of maintaining review state in Trac, especially
>> since one of the points of this discussion is to make the life of the
>> reviewer easier. My feeling is that the slight difference in review workflow
>> on PRs -- the fact that there is no "responsibility transfer" mechanism --
>> will not be a serious problem in practice, and that we should have a culture
>> of closing abandoned PRs.
> 
> Something that has worked well for me on other projects is to use
> simple conventions.  When you finally approve a branch you leave a
> comment like 'jkakar:approve'.  If you expect changes you leave a
> comment like 'jkakar:needs-fixing'.  In other words, you don't really
> need an app-enforced mechanism if you have a simple convention.  I
> propose starting with the simplest convention: the reviewing must add
> an 'author:approve' comment when they're finally happy.

Honestly, we don't have much of an enforcement mechanism as it is.  We just manually add the 'review' keyword when something goes into review, by typing 'review' into the keywords box; you also have to manually un-assign the ticket, and people often forget that part.

The two things that notice this are our IRC bot and our High Scores page.

The lack of a 'keyword' mechanism somewhat distracted me from the main issue though; if we just had high scores and the announcement bot scan the comments for the strings "Please fix." for out-of-review and "Please review." for back-into-review, we could both maintain the exact same workflow and reward politeness ;-).

Thanks for the suggestion, Jamu!

-glyph




From meejah at meejah.ca  Mon Jun  3 19:48:42 2013
From: meejah at meejah.ca (meejah)
Date: Tue, 04 Jun 2013 05:48:42 +0400
Subject: [Twisted-Python] github, again
In-Reply-To: <51AD0FD7.1020800@emerge-life.de> (Christian Kampka's message of
 "Mon, 03 Jun 2013 23:51:19 +0200")
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD0FD7.1020800@emerge-life.de>
Message-ID: <87r4gi7iit.fsf@meejah.ca>

Christian Kampka <chris at emerge-life.de> writes:

> Although gitlab is great for internal projects, this lack of a proper
> support for public features makes it imo not that suitable for open
> projects.

Sorry to butt in, but to add to this Gitlab doesn't support the "fork
and pull request" model of GitHub -- instead they use branches (in one
repo) and "merge requests". This might work fine for you guys, of
course, but if you're expecting a "drop in" replacement for github,
that's not what you'll get ;)

It sounds like aspects of this are currently in the latest stuff,
however, so it might work like github in this respect "soon":

https://github.com/gitlabhq/gitlabhq/pull/3597

Cheers,
meejah



From terry at jon.es  Mon Jun  3 19:55:20 2013
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Jun 2013 02:55:20 +0100
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <CACqnu4V8YPaCe8pvOeVa3AgzrqXbqJ2gUP9U18_p1Q3DUpQc8g@mail.gmail.com>

I sent most of the below off-list to Glyph earlier, as my comments were a
bit half-assed and I'm not really (or not at all) a Twisted contributor.
Glyph suggested I mail them to the list anyway, and to try adding some more
concrete reasons for being +1 on the suggested change.

---  [ Original mail ]

I'm +1 bigtime on moving towards git/github. I really dislike git, but it
gets the job done, and github is awesome. Github changed the way we work,
it removed a ton of friction and overhead in reviewing (you're right, the
click to comment on a diff is really convenient). I don't have too many
complaints about the ticket system, but sure it could be better. The really
impressive thing about Github is how incredibly quickly they move. It gets
better and better and better all the time.  We migrated away from svn +
trac to bzr + launchpad and finally to git + github. The latter blows the
former away massively, IMO.  I'm not trying to give formal quantitative
feedback, just my subjective opinion.  I've also felt for ages that there's
too much overhead in trying to contribute to Twisted. I'm a lazy/selfish
kind of member of the Twisted community, and when I'm faced with the
thought of having to set up all that old-fashioned (from my POV) machinery
like svn and combinator and what-not to think about really contributing or
running tests or whatever, some part of me just thinks "no, no, no, I'm not
going back to that world".  (see above re lazy, if that wasn't clear).

OK, sorry for a bit of a rambling subjective mail. I'm sure you've heard
all this before. The funny thing about these changes is that before you
make them you always think things are pretty much fine. After you make them
you wonder how you ever lived with the old system.  That may not be the
case here for you or for you & the Twisted community, but it certainly was
for me with the move to github.

---

Glyph> Maybe you could be a bit more specific as to the steps that Github
eliminates, and _concrete_ ways in which it is more efficient.

I'd say there are probably dozens of ways in which Gthub improved things
for us. Many of them are minor, of course, but they all add up and the
usability difference between Github and Trac or Launchpad is extreme.

Ease of use and the anticipated amount of effort something is going to take
are very important aspects of tools, in my opinion. If you know some action
- like starting a review or branching or merging or commenting etc. - is
going to take a certain amount of effort, that correlates (unless you're
being paid or doing this out of some extreme reason, like being a core dev
on a project) with how likely you are to do it. (E.g., making branches - it
was possible in sccs, in rcs, in cvs, in svn, but.... oh, the pain! When
making branches *and merging them* became so extraordinarily simple and
pain free, it changed the way people worked.)  As I said above, I'm a
lazy/selfish Twisted onlooker. Many has been the time when I'd have been
happy to chip in on something (e.g., last week someone was asking for some
reviewing help) but the thought of getting the required machinery in place,
and using it, even if it's just svn (ugh, ugh, ugh) stops me.  That's a
feeling I've had about Twisted many times over the last years. It's the
feeling I have when someone asks me to go back to helping them on some old
perl code - you just don't wanna go there :-) It's ugly and not fun.  Sorry
if these are wimpy reasons, but to me usability friction (real or
perceived) is very important.

A very nice thing about Github is that you can have conversations about the
diff right on the page, inline, where the diff is shown. You don't need to
download the branch, to use the command-line (and i LOVE the command line
BTW), or to do anything like that. Github is smart enough to hide the
discussion once a subsequent commit comes in that addresses the line being
discussed (sure, that could go wrong but in practice it doesn't seem to).
 One click to merge branches is great - in fact we made a rule that merging
is always done via Github. Adding of milestones and labels to issues is
smooth, as is viewing various simple subsets of issues. The project
activity graphs in Github are very interesting. GFM (Github flavored
markdown) is really easy to use and the results are attractive. Gists are
great. It's nice being able to have a wiki that's also just a repo. I very
much like the "pull requests are a place where discussion takes place"
approach - as opposed to holding that pull requests are just where branches
go when they're "finished" and ready to be merged. BTW, it's very
interesting to read about how the folks at Github use Github themselves [1,
2]. The workflow we developed is very similar, only slightly more complex.
If people want more examples, I can try to go more systematically through
my usage of Github & say more.

As mentioned above, Github moves (improves) incredibly quickly. They put
pretty much every other project I know to shame (including all of mine) in
terms of how fast they get stuff done and improve the product and how
attractively it's done. In comparison, Trac and Launchpad felt static,
butt-ugly, and like they virtually never improved. Github gets better
underneath you all the time.  E.g., you happen to be sitting on a page
looking at a pull request, and it updates dynamically without you needing
to reload. The pull request is merged maybe, or the author pushes into the
branch again, or conflicts with master get resolved by someone and the page
updates. Little things, but they work damned well and make using the site a
pleasure.

I can't resist adding: a friend in IRC just said re this thread: "2003
called and asked for their shitty tools back."

Terry

[1] http://scottchacon.com/2011/08/31/github-flow.html
[2] https://github.com/blog/1124-how-we-use-pull-requests-to-build-github


On Mon, Jun 3, 2013 at 9:59 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Hi Twisted developers,
>
> This weekend I had a discussion with many Twisted developers, both local
> to and visiting San Francisco.  The topic came up of how to get more
> long-term contributors to participate more regularly in the project -
> particularly, doing code reviews, but also, developing and contributing to
> complex fixes and features that new contributors might not be able to
> tackle.
>
> One suggestion that almost everybody made immediately was: we should use
> Github for code reviews.
>
> In the past, I've heard this suggestion given mainly as a way to *contribute
> more code*, which does not appeal to me, since we are already swamped
> reviewing all the code that is currently being contributed.
>
> This time, however, it's been pitched as a way to get people to *do more
> reviews*, which I'm keenly interested in.  Why would people do more
> reviews on Github?  In a nutshell, it's a lot less work.  Here are some
> reasons why:
>
>
>    - Instead of having to run 'force-builds' on the command line, or load
>    a buildbot status page, Github has a way for a build system to report build
>    success automatically, so you can see immediately within a pull request if
>    the changes that it proposes are "good to merge".  You can see this at work
>    with Travis here: <https://github.com/twisted/klein/pull/11>.
>     Originally I thought that this was a Travis-CI feature, but have since
>    learned that this is apparently easy - trivial even - to hook up to
>    Buildbot, since it's a simple HTTP API to invoke when a build completes,
>    and there is even some existing buildbot infrastructure (deployed by
>    Django, among others) to automate it.
>    - Instead of having to describe each patch location so that you can
>    comment on it in a single message, if you want to put a comment on a
>    particular part of a diff in a Github pull request, you can just click on
>    it and start typing.
>    - In addition to the diff, it's reasonably easy to see the code in
>    context on the web, which is faster than getting it into one's local
>    development environment.
>    - If a review is successful, instead of having to have a local
>    development environment, a committer can just hit the "approve" button and
>    it's landed immediately.
>
>
>    - Instead of having to read through all history ever to see what's
>    still relevant, a pull request will hide comments that address outdated
>    diffs, allowing the change author to easily see what remains.
>
>
> These advantages are not comprehensive, but they're the more significant
> ones I remember from this discussion.
>
> A prerequisite for using Github for code reviews would be using Git rather
> than Subversion.  Luckily there's not much work to do in this area, thanks
> to Tom's excellent work on the Git import and automatic Github mirror.  As
> a bonus, by using Git instead of Subversion, we can start properly
> recording merge metadata.
>
> In this discussion, Alex Gaynor pointed out that Django has a hybrid
> workflow where they still use Trac for bug tracking, and Github for code
> review.  We would therefore *not* need to come up with a way to migrate
> all of our tickets to Github issues (which seems, oddly, to be fairly
> unpopular even among those who like github a lot).
>
> What would need to happen in order for this to take place?
>
>
>    1. We'd need some consensus (hence this message).
>    2. We'd need to update the release process <
>    http://twistedmatrix.com/trac/wiki/ReleaseProcess> and our development
>    documentation <
>    http://twistedmatrix.com/trac/wiki/BasicGuideToContributingCode> to
>    refer to the relevant Git commands rather than Subversion commands.
>    3. We'd need a redirect from <http://twistedmatrix.com/trac/browser/>
>    and <http://twistedmatrix.com/trac/changeset/> that would point at <
>    https://github.com/twisted/twisted> and <
>    https://github.com/twisted/twisted/commits/> respectively.
>    4. We'd need a Github web hook that could poke Buildbot to kick off
>    commits.
>    5. We'd need Buildbot integration to update Github pull requests with
>    build results when builds complete.
>    6. We'd need someone to install git rather than bzr on all the
>    buildbots, and update the configuration of the builders to get the code
>    from a git rather than Subversion URL.
>    7. Someone will need to convert every open ticket in review to a pull
>    request.
>
>
> I do anticipate some objections.
>
> One objection is that each of the above tasks is going to take some work.
>
> I am fairly confident that some of the people who have educated me here
> will step forward to volunteer to do it.  Please reply to this message if
> you'd like to volunteer, saying what you'd like to volunteer to do.  If
> not, then I guess that objection stands :-).
>
> Another is that this might not be worth that investment of effort.  This
> is why it was nice to have Alex contributing to the discussion: Django did
> basically this very change (right down to the "Trac for tickets / Github
> for pull requests" distinction), at a much higher scale than we have, and
> as he described it the change was *well* worth it.
>
> Another objection is that Github is proprietary software, and an
> externally-maintained service that we'd be depending upon.
>
> One solution to the "proprietary software" thing is the availability of
> the MIT-licensed <http://gitlab.org>.  It's a largely feature-complete
> clone of Github; if, for some reason, we need to migrate away from Github
> in a hurry, it will be relatively painless to set up Gitlab instead, and
> the fact that Git is a DVCS means every contributor will serve as a backup.
>  The main reason I would not suggest just deploying it is that it creates
> another sticky infrastructure-management problem, and while Braid is great,
> I'd prefer to avoid creating *more* work in that area.  Github also has
> APIs for literally all of their features, so we can create a backup script.
>
> (Also worth noting: Gitlab is an open-source competitor to Github, but
> they still trust Github enough to <https://github.com/gitlabhq/> host
> their own development there.)
>
> Finally, my own minor concern: Github has no notion of a "code review" as
> a unit of work.  A pull request is just "open" until it is "closed".
>  Closing pull requests to request changes would be jarring to the cultural
> norms associated with Github's UI.  All the github users I've spoken with,
> even those who follow processes which are effectively identical to
> Twisted's, have assured me that this is not really an issue.  A code review
> is "accepted" when you merge it; it's "rejected" if the pull request is
> still open but has some comments on it.  This will make porting over <
> http://twistedmatrix.com/highscores/> a bit challenging, but I think it
> would be worth letting that break for the time being.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130604/0e8587d6/attachment-0002.html>

From radix at twistedmatrix.com  Mon Jun  3 21:15:49 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 3 Jun 2013 22:15:49 -0500
Subject: [Twisted-Python] github, again
In-Reply-To: <87r4gi7iit.fsf@meejah.ca>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD0FD7.1020800@emerge-life.de> <87r4gi7iit.fsf@meejah.ca>
Message-ID: <CAPkRfUQ-VzodUmUANEJCWB4=z5oKLy23-yjKMccXj_6pjVY4wA@mail.gmail.com>

On Mon, Jun 3, 2013 at 8:48 PM, meejah <meejah at meejah.ca> wrote:

>
> It sounds like aspects of this are currently in the latest stuff,
> however, so it might work like github in this respect "soon":
>
> https://github.com/gitlabhq/gitlabhq/pull/3597
>
>

Whoah. Did anyone else notice that "coveralls" bot? that is pretty sweet.


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130603/89eff4fc/attachment-0002.html>

From tds333 at gmail.com  Tue Jun  4 00:49:24 2013
From: tds333 at gmail.com (tds333 at gmail.com)
Date: Tue, 04 Jun 2013 08:49:24 +0200
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <51AD8DF4.5050504@gmail.com>

Hi,

what about Bitbucket (www.bitbucket.org) and mercurial ?

Don't they provide the same features ?

I'm asking because we are in Python land. ;-)




Regards,

Wolfgang





From adi at roiban.ro  Tue Jun  4 01:20:36 2013
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 4 Jun 2013 10:20:36 +0300
Subject: [Twisted-Python] github, again
In-Reply-To: <51AD8DF4.5050504@gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD8DF4.5050504@gmail.com>
Message-ID: <CAFycZ9cEW9NWuB+wzvBHB4y7h5ny4GUtzT=U1u2j6eO+6PoirA@mail.gmail.com>

Thanks for working on this!

Here are the points where I can help:


1. We'd need some consensus (hence this message).

I am still new to Twisted and only sent a few patched, but I am
looking forward for sending reviews in GitHub or BitButcket, any or
them is better than the current read-only SVN branch and attaching
diff files to the slow Trac.


4. We'd need a Github web hook that could poke Buildbot to kick off commits.

GitHub can send webhook for many events, and as a weekend hack I have
implemented a simple server to feed all GitHub activity, back to Trac.

https://github.com/chevah/txghserf

If there is interest in syncing GitHub Pull request with Trac ticket,
I am happy to discuss more details in a separate thread. I am already
doing this for my prorject.

I have also implemented a bit of a workflow on top of GitHub Pull
request. For example leaving a comment in pull request with
needs-review, will set the review state in Trac. Leaving a comment
with needs-changes will remove the review state.


5. We'd need Buildbot integration to update Github pull requests with
build results when builds complete.

The Builbot integration with GitHub status was recently merged. I can
volunteer with support. I am also using this GitHub feature on my own
Buildbot instance.

https://github.com/buildbot/buildbot/pull/635


7. Someone will need to convert every open ticket in review to a pull request.

I can volunteer for that.


Thanks!
-- 
Adi Roiban



From tobias.oberstein at tavendo.de  Tue Jun  4 10:42:39 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 4 Jun 2013 09:42:39 -0700
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>

in general: +1 for this

> Finally, my own minor concern: Github has no notion of a "code review" as a unit of work.  A pull request is just "open" until it is "closed".
> <snip>

I _think_ the following is true (if so, I find that strange) - pls correct me if I'm wrong:

A pull request is not tied to a specific rev, but only to a source repo/branch.
While the pull isn't merged (and hence closed), more commits on the source repo/branch can be added.

So a pull request is kind of moving target ..

GitHub seems to view that as a feature, not bug:
"""
Pull requests can be sent from any branch or commit but it's recommended that a topic branch be used so that follow-up commits can be pushed to update the pull request if necessary.
"""
https://help.github.com/articles/using-pull-requests

"""
It's important to use a new branch for pull requests for several reasons:

It allows you to submit multiple pull requests without confusion. The classical Github gotcha is to continue committing to a pull request branch after making the initial request. When these commits are pushed to the remote, they will become part of the original pull request which often ends up conflating unrelated functionality.
"""
http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/

However: https://github.com/blog/712-pull-requests-2-0
I'm not sure how to interpret that ..

/Tobias



From terry at jon.es  Tue Jun  4 12:10:19 2013
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Jun 2013 19:10:19 +0100
Subject: [Twisted-Python] github, again
In-Reply-To: <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>

The general workflow that's being described is:

 - You open an issue for all bugs, enhancements, etc.
 - When someone starts working on one of these, they create a branch (we
use descriptive branch names and put -NNNN at the end, with the issue
number).
 - When the branch reaches the point where the author feels it could be
merged or wants to open it up for easy discussion, they send a pull request.

The pull request is a signal to the people working on the base code (that
the pull request is against/for, let's just call it "master") that the
author of the branch has it in mind to merge their branch into master. That
may be a way off, it may never happen, or it could be done almost
immediately. Github doesn't have any formal mechanism for having a branch
approved, or even a mechanism for saying "I'm interested in this pull
request and I intend to review / comment on it before it's merged, so
please don't merge it until I've +1'd".  That's a weakness and a strength.
We adopted the convention (as @jkakar mentioned) of having interested
parties just edit the pull request description, to put in a string like
"terrycojones: **pending**" to indicate that you're planning to comment.

The pull requests are discussions about the code, and the code changes
while the pul request is outstanding. That's normal. Other people, who have
the right permission, might want to push changes into the branch that's
being worked on. E.g., there could be a jkakar/fix-race-condition-4772
branch. I switch onto that branch (git remote update --prune jkakar;  git
co jkakar/fix-race-condition-4772) and run the tests, take a look, etc.  I
decided to help out by making a few changes, so I make my own branch:  git
co -b fix-race-condition-4772.  That creates
terrycojones/fix-race-condition-4772 which I can work on, commit to, and
push back to github.  I could then send a pull request to merge that branch
into jkakar/fix-race-condition-4772 or if I have the right perms, just push
it directly into that branch.

The diff in the pull request always reflects the latest changes, as you'd
expect. So over time as there is discussion & code change around the pull
request, the diff will change. As I mentioned, parts that are fixed will
have the conversation disappear (this sounds alarming, perhaps, but it
works).

At some point everyone who's interested will have contributed to the
discussion, to the code, and signed off.  Then you merge it, using the web
UI.  Sometimes a pull request doesn't reach the point where there's
agreement that it should be merged. When that happens, we usually close the
pull request so it's not cluttering up the pull requests page. The branch
doesn't go away, of course, and can be re-proposed for merging via a later
pull request.

I hope that helps.  I think most of this is open-ended and teams can choose
the conventions that suit them. The above is just what we've done, but it
does seem to match up pretty closely with some of the links people have
been posting.

One point of difference that I don't know the best answer to: We tend to
each have our own fork of  a repo, and to send pull requests into the repo
"owned" by the organization. Others (including Github themselves) just have
one repo and anyone can make a branch in that repo and propose it for
merging into the master of the same repo.  I think I prefer the former,
though it has a little more overhead and it requires people to do a git
remote add git at github.com:name/project.git for the other people whose
changes you want to track and pull in etc (via git remote update --prune).

Terry




On Tue, Jun 4, 2013 at 5:42 PM, Tobias Oberstein <
tobias.oberstein at tavendo.de> wrote:

> in general: +1 for this
>
> > Finally, my own minor concern: Github has no notion of a "code review"
> as a unit of work.  A pull request is just "open" until it is "closed".
> > <snip>
>
> I _think_ the following is true (if so, I find that strange) - pls correct
> me if I'm wrong:
>
> A pull request is not tied to a specific rev, but only to a source
> repo/branch.
> While the pull isn't merged (and hence closed), more commits on the source
> repo/branch can be added.
>
> So a pull request is kind of moving target ..
>
> GitHub seems to view that as a feature, not bug:
> """
> Pull requests can be sent from any branch or commit but it's recommended
> that a topic branch be used so that follow-up commits can be pushed to
> update the pull request if necessary.
> """
> https://help.github.com/articles/using-pull-requests
>
> """
> It's important to use a new branch for pull requests for several reasons:
>
> It allows you to submit multiple pull requests without confusion. The
> classical Github gotcha is to continue committing to a pull request branch
> after making the initial request. When these commits are pushed to the
> remote, they will become part of the original pull request which often ends
> up conflating unrelated functionality.
> """
>
> http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/
>
> However: https://github.com/blog/712-pull-requests-2-0
> I'm not sure how to interpret that ..
>
> /Tobias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130604/f744e4ad/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Jun  4 13:09:28 2013
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 4 Jun 2013 12:09:28 -0700
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <CAG=rPVcnu_+-dfvHjCnzx2n3CswnxCTvxUiqnOXHaN+kRB_1Rg@mail.gmail.com>

Hi,

I think moving to github will be a huge win for the Twisted project,
and all the migration/integration issues are manageable.

I would recommend you keep two things in mind:

(1)  I am a member of the FreeBSD project, and am mentoring a Google Summer
of Code student.
      I pushed the student to use the github mirror of the FreeBSD
repository: https://github.com/freebsd/freebsd
      (unsupported officially by the FreeBSD project, but used by a lot of
people).
      github worked great, but the only problem my GSoC student had was a
lot of RPC timeout errors
      when doing "git clone" of the FreeBSD code, which is quite a bit.
The student is in New Delhi, India, so I don't know what the networking
      connectivity to github from around the world is.
      It was not a complete showstopper, because github allows you to click
a link to download a single zip file of the repository, and that
      worked for him.
      So keep this in mind if you have a lot of Twisted developers around
the world.


(2)   Make sure you always have a "Plan B"/"Disaster Recovery" plan to get
the repo out of github.
       It's not that critical, but something worth keeping in your back
pocket.
       In the past, project hosting sites like Sourceforge were very
popular,
       and then the fell out of favor for various reasons.  Today, github
is very popular, but who knows what will happen in future.
       If github works out in the long term, great, but if in future
something bad happens, Twisted should outlive github.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130604/7cc582d4/attachment-0002.html>

From tobias.oberstein at tavendo.de  Tue Jun  4 14:43:40 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 4 Jun 2013 13:43:40 -0700
Subject: [Twisted-Python] github, again
In-Reply-To: <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D4422DC21803@EXVMBX020-12.exch020.serverdata.net>

Terry,

thanks alot for your detailed explanation of a workflow. For me, that sounds reasonable and workable. 

>At some point everyone who's interested will have contributed to the discussion, to the code, and signed off.  Then you merge it, using the web UI

So when the code is ready, the feature branch including any accumulated commits (history) will get merged - and not a clean diff against the main repo?

Just asking .. guess there are arguments for both approaches.

>One point of difference that I don't know the best answer to: We tend to each have our own fork of  a repo, and to send pull requests into the repo "owned" by the organization. Others (including Github >themselves) just have one repo and anyone can make a branch in that repo and propose it for merging into the master of the same repo.  I think I prefer the former, though it has a little more overhead and it >requires people to do a git remote add git at github.com:name/project.git for the other people whose changes you want to track and pull in etc (via git remote update --prune).

+1 for the former (each has it's own repo). p2p scm.

/Tobias


From terry at jon.es  Tue Jun  4 14:55:19 2013
From: terry at jon.es (Terry Jones)
Date: Tue, 4 Jun 2013 21:55:19 +0100
Subject: [Twisted-Python] github, again
In-Reply-To: <634914A010D0B943A035D226786325D4422DC21803@EXVMBX020-12.exch020.serverdata.net>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>
 <634914A010D0B943A035D226786325D4422DC21803@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CACqnu4VGAED4DVy2YEeKEbNWkGwvEU78XA9FVZJqejABSvUsvw@mail.gmail.com>

> So when the code is ready, the feature branch including any accumulated
commits (history) will
> get merged - and not a clean diff against the main repo?

I'm very far from being a git expert. In fact, I'm kind of the opposite -
git and I have a stormy relationship and everyone has to tell me what to do.

But, I believe this is what git rebase is mainly used for. You can rebase
your branch against an updated master and (I'm guessing) make your changes
look like a single diff. Some people don't like that as it changes history,
others do like it and say yes, that's the point - clean up the history so
the commit log isn't full of tiny changes that were all made in order to
effect some change (i.e., address a given ticket/issue).

I'm REALLY far from being a git pro, so someone else should confirm/correct
this.

Terry



On Tue, Jun 4, 2013 at 9:43 PM, Tobias Oberstein <
tobias.oberstein at tavendo.de> wrote:

> Terry,
>
> thanks alot for your detailed explanation of a workflow. For me, that
> sounds reasonable and workable.
>
> >At some point everyone who's interested will have contributed to the
> discussion, to the code, and signed off.  Then you merge it, using the web
> UI
>
> So when the code is ready, the feature branch including any accumulated
> commits (history) will get merged - and not a clean diff against the main
> repo?
>
> Just asking .. guess there are arguments for both approaches.
>
> >One point of difference that I don't know the best answer to: We tend to
> each have our own fork of  a repo, and to send pull requests into the repo
> "owned" by the organization. Others (including Github >themselves) just
> have one repo and anyone can make a branch in that repo and propose it for
> merging into the master of the same repo.  I think I prefer the former,
> though it has a little more overhead and it >requires people to do a git
> remote add git at github.com:name/project.git for the other people whose
> changes you want to track and pull in etc (via git remote update --prune).
>
> +1 for the former (each has it's own repo). p2p scm.
>
> /Tobias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130604/3ca0f1d0/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jun  5 00:29:17 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 4 Jun 2013 23:29:17 -0700
Subject: [Twisted-Python] on contributions
Message-ID: <F1813D88-8CBC-494C-8B03-F3D9E18D6E53@twistedmatrix.com>

A few times recently (most recently in my email on Github) I have mentioned that I am more interested in getting more people to review Twisted tickets than in getting more people to write new patches to Twisted.

Based on some feedback that other contributors have sent me privately, I'm afraid that this may have given the wrong impression.

It's not that I don't want people to write patches for Twisted.  I do.  I want everybody to write patches for Twisted all the time!  It's also not that I don't appreciate the time and effort that went into those patches.  I do.

In fact, it is because I appreciate that time and effort that I have said I want to optimize for reviews.  It bothers me a lot that someone, having gone through the effort to craft a patch to Twisted, might have to wait for weeks or months for a reviewer to even thank them for that patch, let alone do a full review and give them the feedback they need to get it landed.  I am constantly looking for ways to give quicker, feedback and better experiences to new contributors.

I think the tools Github offers might help, but we (the core Twisted team) will still need to think of better ways to motivate ourselves and to induct others into the reviewer community.  (If this has inspired you to do a review, there are plenty waiting: <http://twistedmatrix.com/trac/report/15>.)

So, please, go on contributing patches to Twisted; I thank you for your contribution and I thank you doubly for your patience.

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130604/f7aef14d/attachment-0002.html>

From adi at roiban.ro  Wed Jun  5 01:37:22 2013
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 5 Jun 2013 10:37:22 +0300
Subject: [Twisted-Python] on contributions
In-Reply-To: <F1813D88-8CBC-494C-8B03-F3D9E18D6E53@twistedmatrix.com>
References: <F1813D88-8CBC-494C-8B03-F3D9E18D6E53@twistedmatrix.com>
Message-ID: <CAFycZ9fj=yu1zVM4g8Q5RxU9MRdfuuzbDQi4LnTqMuFJ+HLfVQ@mail.gmail.com>

On 5 June 2013 09:29, Glyph <glyph at twistedmatrix.com> wrote:
[snip]

> So, please, go on contributing patches to Twisted; I thank you for your
> contribution and I thank you doubly for your patience.

>From my point of view, the fact that reviews take so long is one
reason why committing patches to Twisted is not fun. So I think that
you are right to focus on solving the review issues.

I have contributed a few patches to twisted.protocols.ftp and I think
that one of the reason why it took so long to review the code, is due
to the fact that no core developer really cares about FTP
implementation.
I know that everybody want Twisted to be big and great, but there are
limited resources that needs to be managed.

This is not a complain :), but what I wanted to say is that maybe it
is better for Twisted to be a thinner library, and "downgrade" some of
the code to independent projects.

In this way, core developers will have more time to review more
important core features, rather than looking at my minor fixes for FTP
and later maintaining that code.

Thanks!
-- 
Adi Roiban



From jon at multani.info  Wed Jun  5 01:56:09 2013
From: jon at multani.info (Jonathan Ballet)
Date: Wed, 5 Jun 2013 09:56:09 +0200
Subject: [Twisted-Python] github, again
In-Reply-To: <CACqnu4VGAED4DVy2YEeKEbNWkGwvEU78XA9FVZJqejABSvUsvw@mail.gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>
 <634914A010D0B943A035D226786325D4422DC21803@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4VGAED4DVy2YEeKEbNWkGwvEU78XA9FVZJqejABSvUsvw@mail.gmail.com>
Message-ID: <20130605075607.GB22389@debian>

Hi, just shiming in,

On Tue, Jun 04, 2013 at 09:55:19PM +0100, Terry Jones wrote:
> > So when the code is ready, the feature branch including any accumulated
> commits (history) will
> > get merged - and not a clean diff against the main repo?
> 
> I'm very far from being a git expert. In fact, I'm kind of the opposite -
> git and I have a stormy relationship and everyone has to tell me what to do.
> 
> But, I believe this is what git rebase is mainly used for. You can rebase
> your branch against an updated master and (I'm guessing) make your changes
> look like a single diff. Some people don't like that as it changes history,
> others do like it and say yes, that's the point - clean up the history so
> the commit log isn't full of tiny changes that were all made in order to
> effect some change (i.e., address a given ticket/issue).

This is actually called a "squash" in Git terminology - Git has an
option called "--squash" for the "merge" command which precisely do
that. This is, FYI, part of the merge policy used by projects like
PostgreSQL for example [1]

I'm not sure we can exactly say it changes the history: a brand new
commit is actually created, which is the sum of all the commits from the
branch which is merged, but as I see it, it's as if someone else
commited this new feature, and branches become completely throwable in
the end.

I let the Git manual explain the squash feature (extract from "git help
merge"; the second sentence is probably the most useful):

    --squash, --no-squash
        Produce the working tree and index state as if a real merge
        happened (except for the merge information), but do not actually
        make a commit or move the HEAD, nor record $GIT_DIR/MERGE_HEAD
        to cause the next git commit command to create a merge commit.
        This allows you to create a single commit on top of the current
        branch whose effect is the same as merging another branch (or
        more in case of an octopus).

        With --no-squash perform the merge and commit the result.  This
        option can be used to override --squash.


 Jonathan


[1]: http://wiki.postgresql.org/wiki/Committing_with_Git


> I'm REALLY far from being a git pro, so someone else should confirm/correct
> this.
> 
> Terry



From glyph at twistedmatrix.com  Wed Jun  5 02:29:07 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Jun 2013 01:29:07 -0700
Subject: [Twisted-Python] on contributions
In-Reply-To: <CAFycZ9fj=yu1zVM4g8Q5RxU9MRdfuuzbDQi4LnTqMuFJ+HLfVQ@mail.gmail.com>
References: <F1813D88-8CBC-494C-8B03-F3D9E18D6E53@twistedmatrix.com>
 <CAFycZ9fj=yu1zVM4g8Q5RxU9MRdfuuzbDQi4LnTqMuFJ+HLfVQ@mail.gmail.com>
Message-ID: <6334F97B-6093-4E67-876F-E31E4A01737E@twistedmatrix.com>


On Jun 5, 2013, at 12:37 AM, Adi Roiban <adi at roiban.ro> wrote:

> On 5 June 2013 09:29, Glyph <glyph at twistedmatrix.com> wrote:
> [snip]
> 
>> So, please, go on contributing patches to Twisted; I thank you for your
>> contribution and I thank you doubly for your patience.
> 
> From my point of view, the fact that reviews take so long is one
> reason why committing patches to Twisted is not fun. So I think that
> you are right to focus on solving the review issues.
> 
> I have contributed a few patches to twisted.protocols.ftp and I think
> that one of the reason why it took so long to review the code, is due
> to the fact that no core developer really cares about FTP
> implementation.
> I know that everybody want Twisted to be big and great, but there are
> limited resources that needs to be managed.

Would you be interested in contributing to those resources by doing some reviews yourself? :)

As a non-committer, you can do reviews of fixes contributed by committers (like me, exarkun, dreid, radix, therve...).  It's up to the committer to decide whether your review was thorough enough, so it's their fault if you didn't do a good enough job :).  If you clear those tickets out of the queue, it gives committers more time to review tickets from external contributors.

> This is not a complain :), but what I wanted to say is that maybe it
> is better for Twisted to be a thinner library, and "downgrade" some of
> the code to independent projects.
> 
> In this way, core developers will have more time to review more
> important core features, rather than looking at my minor fixes for FTP
> and later maintaining that code.

There are, possibly, some features that Twisted could shed.  But, based on my experience, I don't think that this is a major issue.  A big reason that we need code review is to introduce external contributors to our coding practices so that they can work up to making more significant changes; in that sense, most reviews are similar unless they're really big.

Also, one of the main advantages of Twisted is that it's a feature-rich suite of protocols which work together.  It's nice to have common documentation and testing standards applied to all of them.  (One day, after they've been maintained for another 10 years or so, maybe that'll even mean they all have good documentation and tests! :-)).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130605/808e35e5/attachment-0002.html>

From free at 64studio.com  Wed Jun  5 13:13:02 2013
From: free at 64studio.com (Free Ekanayaka)
Date: Wed, 05 Jun 2013 21:13:02 +0200
Subject: [Twisted-Python] Testing AMP-based code
Message-ID: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>

Hi,

following up from ticket #6502, I'm looking for recommendations/best
practices for writing unit-tests for AMP-based code.

As described in the ticket, the issue I'm currently facing is that the
AMP implementation is subtly not re-entrant safe and doesn't work with a
synchronous transport, for example this code raises an exception:

http://twistedmatrix.com/trac/attachment/ticket/6502/example.py

I'm starting to think that the most appropriate testing strategy would
be to mock/stub AMP.callRemote (or the protocol class altogether)
instead of trying to use a fake transport.

Thoughts?

Cheers,

Free



From twisted-python at 2xlp.com  Thu Jun  6 10:08:59 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 6 Jun 2013 12:08:59 -0400
Subject: [Twisted-Python] github, again
In-Reply-To: <51AD8DF4.5050504@gmail.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD8DF4.5050504@gmail.com>
Message-ID: <EFCD8A0F-ECB9-4EC4-8237-A7692FE263CD@2xlp.com>


On Jun 4, 2013, at 2:49 AM, tds333 at gmail.com wrote:

> Hi,
> 
> what about Bitbucket (www.bitbucket.org) and mercurial ?
> 
> Don't they provide the same features ?
> 
> I'm asking because we are in Python land. ;-)

BitBucket isn't as slick as GitHub.

Mercurial isn't as well known, and the storage isn't as optimal.

SqlAlchemy recently migrated from hg to git -- here is Mike Bayer's rationale:

	http://www.sqlalchemy.org/blog/#sqlalchemy-migrated-to-git

It's trivial to clone a repo with git.  Also, I believe that if you configure a working repository to follow all the upstream changes, you essentially have a full clone.  So if the primary ever went down, one of the package maintainers could instantly become the new upstream.

I use git+github for all my open source work, and subversion for private stuff -- only because i'm too lazy to set up a remote hg repo.  Git was hard to get used to, and can be difficult at times, but it's a significantly better experience.  The biggest win with git for me, is that you have offline commits.  I've found myself forced to be online for a svn commit too many times ( while restructuring projects ).  git is more flexible -- you can do everything locally and never have to push to the server until you're ready ( no more "part 1 of 3" repo commits ).  then you can squash all the commits into a single server push.

The code review process on git and github is great; and the fork + merge model is much easier than working with SVN. 

someone mentioned `rebase` and `squash`.  

these articles do a much better job at describing it than i can:  
	http://git-scm.com/book/en/Git-Branching-Rebasing
	http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html

in a nutshell, rebase allows you to start replaying commits onto a working copy.  you can then pick and choose which are kept, tossed, or merged.  it's basically a way to rewrite or replay history.  

the only downside to git, is that once something goes onto the server... it's there for good.  it's possible to rebase a repo back to a specific commit , then replay without specific commits, and "push -f" to overwrite the history... but if anyone updated against the server, those commits will come back and haunt you.  over and over and over again.  

there's also a great plugin called "git flow"  http://nvie.com/posts/a-successful-git-branching-model/    https://github.com/nvie/gitflow  

it's just some shell scripts that help automate how you organize your branches for fixing issues.






From p.mayers at imperial.ac.uk  Thu Jun  6 10:52:11 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 06 Jun 2013 17:52:11 +0100
Subject: [Twisted-Python] github, again
In-Reply-To: <EFCD8A0F-ECB9-4EC4-8237-A7692FE263CD@2xlp.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD8DF4.5050504@gmail.com> <EFCD8A0F-ECB9-4EC4-8237-A7692FE263CD@2xlp.com>
Message-ID: <51B0BE3B.8030106@imperial.ac.uk>

On 06/06/13 17:08, Jonathan Vanasco wrote:

> the only downside to git, is that once something goes onto the
> server... it's there for good.  it's possible to rebase a repo back
> to a specific commit , then replay without specific commits, and
> "push -f" to overwrite the history... but if anyone updated against
> the server, those commits will come back and haunt you.  over and
> over and over again.

Yes. Never do this. It's hateful to fix, and rude to contributors!

(Obviously not an issue if your git repo will just be a read-only copy 
of SVN used to drive git-based code review tools)



From twisted-python at 2xlp.com  Thu Jun  6 18:42:15 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 6 Jun 2013 20:42:15 -0400
Subject: [Twisted-Python] github, again
In-Reply-To: <51B0BE3B.8030106@imperial.ac.uk>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <51AD8DF4.5050504@gmail.com> <EFCD8A0F-ECB9-4EC4-8237-A7692FE263CD@2xlp.com>
 <51B0BE3B.8030106@imperial.ac.uk>
Message-ID: <A7FFF03C-DE0E-497E-806A-61613D2482A6@2xlp.com>


On Jun 6, 2013, at 12:52 PM, Phil Mayers wrote:

> On 06/06/13 17:08, Jonathan Vanasco wrote:
> 
>> the only downside to git, is that once something goes onto the
>> server... it's there for good.  it's possible to rebase a repo back
>> to a specific commit , then replay without specific commits, and
>> "push -f" to overwrite the history... but if anyone updated against
>> the server, those commits will come back and haunt you.  over and
>> over and over again.
> 
> Yes. Never do this. It's hateful to fix, and rude to contributors!
> 
> (Obviously not an issue if your git repo will just be a read-only copy of SVN used to drive git-based code review tools)

It shouldn't ever happen in an Open Source project, or on "master" but in a corporate setting... you'd be surprised. 

	a - Someone accidentally commits and pushes a config file with credentials in it
	b - You have commits A,B,C,D,E.  D needs to be rebased out in order for a merge to successfully work.  You can't get rebase to work well, so you have to roll back to C, push -f, apply a diff from C-E ( which doesn't have D in it, all done by hand ), and then committed.  

Thankfully when someone brings this to you , you can say to your team "Ok.  everyone nuke your git repos and go to lunch.  i'll fix it for you".

That being said, i'm a HUGE fan of having an "upstream" repo that is only used for merging in changes, and everyone has their own fork to work on.   I'm not a fan of people working in branches on the 'source' at all.







From z858570636 at gmail.com  Thu Jun  6 21:24:07 2013
From: z858570636 at gmail.com (yuyan zhang)
Date: Fri, 7 Jun 2013 11:24:07 +0800
Subject: [Twisted-Python] A bug of the DNSDatagramProtocol
Message-ID: <CA+ggLOLLcZ+MPDy4bmL-KHxgvvq12HUVxfOyobvmrNSQ2XOVww@mail.gmail.com>

when i run the code:
        df = Deferred()
        name = Name('version.bind')
        axf = AXFRController(name,df)
        dns = DNSDatagramProtocol(axf)
        d = dns.query((ip,53),[Query('version.bind',TXT,CH)])
it raise the error :
Traceback (most recent call last):
  File "/usr/local/lib/python2.7/site-packages/twisted/python/log.py", line
73, in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "/usr/local/lib/python2.7/site-packages/twisted/python/context.py",
line 118, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/usr/local/lib/python2.7/site-packages/twisted/python/context.py",
line 81, in callWithContext
    return func(*args,**kw)
  File
"/usr/local/lib/python2.7/site-packages/twisted/internet/posixbase.py",
line 614, in _doReadOrWrite
    why = selectable.doRead()
--- <exception caught here> ---
  File "/usr/local/lib/python2.7/site-packages/twisted/internet/udp.py",
line 149, in doRead
    self.protocol.datagramReceived(data, addr)
  File "/usr/local/lib/python2.7/site-packages/twisted/names/dns.py", line
1936, in datagramReceived
    self.controller.messageReceived(m, self, addr)
exceptions.TypeError: messageReceived() takes exactly 3 arguments (4 given)
Unhandled Error

and the I set the DNSDatagramProtocol.datagramReceived's last row
self.controller.messageReceived(m, self, addr)
to
self.controller.messageReceived(m, self)
it'ok!
And this is a bug????
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130607/f14ec76e/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri Jun  7 05:38:56 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 07 Jun 2013 11:38:56 -0000
Subject: [Twisted-Python] A bug of the DNSDatagramProtocol
In-Reply-To: <CA+ggLOLLcZ+MPDy4bmL-KHxgvvq12HUVxfOyobvmrNSQ2XOVww@mail.gmail.com>
References: <CA+ggLOLLcZ+MPDy4bmL-KHxgvvq12HUVxfOyobvmrNSQ2XOVww@mail.gmail.com>
Message-ID: <20130607113856.25989.1374273059.divmod.xquotient.64@top>

On 03:24 am, z858570636 at gmail.com wrote:
>when i run the code:
>        df = Deferred()
>        name = Name('version.bind')
>        axf = AXFRController(name,df)
>        dns = DNSDatagramProtocol(axf)
>        d = dns.query((ip,53),[Query('version.bind',TXT,CH)])
>it raise the error :
>Traceback (most recent call last):
>  File "/usr/local/lib/python2.7/site-packages/twisted/python/log.py", 
>line
>73, in callWithContext
>    return context.call({ILogContext: newCtx}, func, *args, **kw)
>  File "/usr/local/lib/python2.7/site- 
>packages/twisted/python/context.py",
>line 118, in callWithContext
>    return self.currentContext().callWithContext(ctx, func, *args, **kw)
>  File "/usr/local/lib/python2.7/site- 
>packages/twisted/python/context.py",
>line 81, in callWithContext
>    return func(*args,**kw)
>  File
>"/usr/local/lib/python2.7/site-packages/twisted/internet/posixbase.py",
>line 614, in _doReadOrWrite
>    why = selectable.doRead()
>--- <exception caught here> ---
>  File "/usr/local/lib/python2.7/site-packages/twisted/internet/udp.py",
>line 149, in doRead
>    self.protocol.datagramReceived(data, addr)
>  File "/usr/local/lib/python2.7/site-packages/twisted/names/dns.py", 
>line
>1936, in datagramReceived
>    self.controller.messageReceived(m, self, addr)
>exceptions.TypeError: messageReceived() takes exactly 3 arguments (4 
>given)
>Unhandled Error
>
>and the I set the DNSDatagramProtocol.datagramReceived's last row
>self.controller.messageReceived(m, self, addr)
>to
>self.controller.messageReceived(m, self)
>it'ok!
>And this is a bug????

Hello,

I tried turning your code into an <http://sscce.org/>:

    from __future__ import print_function

    from twisted.internet.defer import Deferred
    from twisted.names.dns import TXT, CH, Name, Query, 
DNSDatagramProtocol
    from twisted.names.client import AXFRController

    from twisted.internet.task import react

    def main(reactor):
        ip = '8.8.8.8'
        df = Deferred()
        name = Name('version.bind')
        axf = AXFRController(name,df)
        dns = DNSDatagramProtocol(axf)
        d = dns.query((ip,53),[Query('version.bind',TXT,CH)])
        d.addCallback(print)
        return d

    react(main, [])

But I wasn't able to reproduce the error you encountered, instead I get 
the output:

    <twisted.names.dns.Message instance at 0x18642d8>

Perhaps the error has something to do with how the DNS server responds. 
If so, can you expand this minimal example to include a server that 
sends a response that triggers the bug (Twisted Names itself can be used 
as such a server, or you could hard-code the response you're seeing 
locally)?  Alternatively if you could turn this into a unit test that 
doesn't actually interact with a network, that would also be great.

Thanks,
Jean-Paul



From tom.prince at ualberta.net  Sat Jun  8 10:07:03 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 08 Jun 2013 10:07:03 -0600
Subject: [Twisted-Python] github, again
In-Reply-To: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
Message-ID: <87r4gctwm0.fsf@loki.hocat.ca>

When I first saw this, I was excited at the possibility of moving to git
(although this doesn't affect me, as I've been using git exclusively for months
already). On the other hand, I'm cautious about moving our workflow to github.

Although being able to comment on the diff inline is very convenient, my
experience is that this encourages looking at changes in a line-by-line fashion,
rather than looking at the overall design.  find that having to compose the
entire review at once leads to a more thoughtful review. So, while it is
convenient, there is a cost to it as well.

Being able to see what comments have been addressed is handy, I usually find
myself opening all the hidden comments, either to see if the change made address
the comment or to provide more context on the current state of the change
(particularly if I wasn't the original reviewer).

While I understand the appeal of being able to merge with a single click (and
wouldn't be opposed to a tool that does this), I'm not sure that github's
implementation is desirable.  I think there is value in composing meaningful
commit messages, for commits to trunk. While github supports this, it doesn't
encourage it. (I've been looking through buildbot's logs recently, and most
commits to master have the message "Merge branch '<branch-name>' of
git://github.com/<user>/buildbot"." Certainly some of this is social, I don't
think github provides any tools to help enforce this.

I'm not entirely sure how the hybrid workflow would make things easier. It seems
like one would need to look at two places for comments rather than just one;
even if all the comments on the code itself are on github, one will still need
to look at the history of the ticket to see any discussion of the design or
other consideration. Potentially more, if more than one person has worked on a
branch; unless everybody involved can push to the same repo, only a single
person can add commits to a specific pull request. For core developers, this
could just be the main repo, but for non-core developers (or when a core
developer takes over from an outside contributor), there will necessarily be
multiple pull requests for a single change.

I wonder how much of the issue that github solves could be addressed by other
means? Forcing a build is now two clicks from the ticket page, and diffs one. I
just discovered https://github.com/Automattic/trac-code-comments-plugin which
allows inline commenting. We could implement a tool to merge to trunk with a
properly formated commit message from the web. There is, of course, the question
of whether it worth the effort to implement this ourselves, when github exists.
That consideration has to be tempered with the fact that github imposes
restrictions on our workflow that seem to run counter to the philosophy of
twisted development.

  Tom




From terry at jon.es  Sat Jun  8 17:41:40 2013
From: terry at jon.es (Terry Jones)
Date: Sun, 9 Jun 2013 00:41:40 +0100
Subject: [Twisted-Python] github, again
In-Reply-To: <87r4gctwm0.fsf@loki.hocat.ca>
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <87r4gctwm0.fsf@loki.hocat.ca>
Message-ID: <CACqnu4WWScaJPrz+f6T342y6YrEmjgTDktrqdR_30vQi0XL7yQ@mail.gmail.com>

Hi Tom

Here are some comments on your thoughts (again, I'm no expert or authority).

On Sat, Jun 8, 2013 at 5:07 PM, Tom Prince <tom.prince at ualberta.net> wrote:

> Although being able to comment on the diff inline is very convenient, my
> experience is that this encourages looking at changes in a line-by-line
> fashion,
> rather than looking at the overall design.  find that having to compose the
> entire review at once leads to a more thoughtful review. So, while it is
> convenient, there is a cost to it as well.
>

I agree with almost all of this, but not so much with the "cost" part. I
know there are many different kinds of tickets, but the majority (that I
see) fall into just a few categories that I have fairly well established
ways of working on (as a reviewer). 1. trivial fixes, which I tend to
review entirely in github. They usually have small/simple changes to
existing code and a small number of entirely new tests.  2. Addition of new
functionality that's not tirivial. These tend to involve mainly new code
and new tests, and again I'll usually do the whole review in github. 3.
More complicated changes that have required thought about the existing
code, its internal interactions, and its tests. I do superficial work on
these using github (commenting on style, suggesting alternate approaches to
local pieces of code, etc). Github makes this process hugely simpler and
faster. But in this case I also pull down the branch and git diff it
manually as well as going into files in the editor to consider changes more
carefully or to search for residual methods that may no longer be used or
method uses which are now no longer defined, etc. I put the result of this
reviewing into the Discussion tab in github.  In all cases I make sure to
pull the branch locally and run the tests (except when I'm SURE I don't
need to, which is when there is ALWAYS a test failure :-)).

I.e., (summarizing/repeating myself) most of the time I do reviewing in
github and it's a clear win (simple / in context / no need to refer to the
code line or cut & paste, etc). But as you say some reviewing needs much
more care and thought, done with an editor, with grep, etc. The result of
that can go into the github discussion.


> While I understand the appeal of being able to merge with a single click
> (and
> wouldn't be opposed to a tool that does this), I'm not sure that github's
> implementation is desirable.  I think there is value in composing
> meaningful
> commit messages, for commits to trunk. While github supports this, it
> doesn't
> encourage it. (I've been looking through buildbot's logs recently, and most
> commits to master have the message "Merge branch '<branch-name>' of
> git://github.com/<user>/buildbot"." Certainly some of this is social, I
> don't
> think github provides any tools to help enforce this.
>

Right, this has to be done by convention. I find it's helpful to write the
issue description with an eye towards the future merging and then to cut &
paste the issue description into the merge message and edit it before
merging. If you're conscious of that workflow you can write an issue
description whose first paragraph can easily become the merge description.
We also put the names (you can use @name) of the reviewers into the merge
(on a separate line, like "R: @name1 @name2") as well as the Fixes #NNNN
line.  Often the merge descriptions would be just one line, as it's easy to
be (or become) lazy.


> I'm not entirely sure how the hybrid workflow would make things easier. It
> seems
> like one would need to look at two places for comments rather than just
> one;
> even if all the comments on the code itself are on github, one will still
> need
> to look at the history of the ticket to see any discussion of the design or
> other consideration.


Do you mean 2 places within the one pull request?  I.e., the Files Changed
and the Discussion tabs?  If so, then I understand. I got used to that
pretty quickly. You can find more substantive discussion in one place
(including reviewers giving +1 or saying they need more time or asking if a
pull request should be withdrawn etc) and code-specific comments in the
Files Changed section.   I find it very useful in the latter if the
original author makes sure they follow up on each suggestion in the Files
Changed section to say "Done" or "Wont do this...." etc.  This helps a
returning reviewer to see that requested changes have been made without
needing to look at the code again.


> Potentially more, if more than one person has worked on a
> branch; unless everybody involved can push to the same repo, only a single
> person can add commits to a specific pull request.


But anyone can comment / review.  And if you happen to have code you want
to add to the branch but you don't have the right to push into that branch
(which we do only rarely), you can just make your own branch, submit a pull
request into the branch you're reviewing, and mention that in the review.
(Unless the Twisted process has changed, I think adding code to a branch
would then rule you out as an ongoing reviewer.)


> For core developers, this
> could just be the main repo, but for non-core developers (or when a core
> developer takes over from an outside contributor), there will necessarily
> be
> multiple pull requests for a single change.
>

I don't think this is the right way to do things.  It makes more sense that
there is one pull request. Those who can/want/dare can push into its
branch. Those who cant but want to suggest other code can suggest their
code is pulled into the branch in question.  Others can just put code into
their reviews - I do that often, just copy a chunk of Python, wrap it in
```python  .... ``` and make a few suggested edits.


> I wonder how much of the issue that github solves could be addressed by
> other
> means? Forcing a build is now two clicks from the ticket page, and diffs
> one. I
> just discovered https://github.com/Automattic/trac-code-comments-pluginwhich
> allows inline commenting. We could implement a tool to merge to trunk with
> a
> properly formated commit message from the web. There is, of course, the
> question
> of whether it worth the effort to implement this ourselves, when github
> exists.
>

I don't think it makes sense to try writing these things. Github is great
and it moves so quickly. It's not perfect and it does leave a lot of things
to coding team convention, but it's very good. In my (painful) experience,
it's rarely worth writing your own stuff in a situation like this and
missing out on all the other goodness that is rapidly making its way into
the mainstream heavily used and very actively developed tools.


> That consideration has to be tempered with the fact that github imposes
> restrictions on our workflow that seem to run counter to the philosophy of
> twisted development.


I'm not sure what these are.  But, I'm barely involved in Twisted
development, so it's likely just ignorance.

Thanks for the comments, mine are just my own small sample experiences and
are probably sub-optimal and/or under-informed etc.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130609/1990005d/attachment-0002.html>

From meejah at meejah.ca  Sat Jun  8 23:23:57 2013
From: meejah at meejah.ca (meejah)
Date: Sun, 09 Jun 2013 09:23:57 +0400
Subject: [Twisted-Python] github, again
In-Reply-To: <20130605075607.GB22389@debian> (Jonathan Ballet's message of
 "Wed, 5 Jun 2013 09:56:09 +0200")
References: <E0BB8B85-9771-4F15-B847-753073702C4D@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4422DC2164F@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4WVaSNTYDRfv+dg5ZxLDy034iP+nSJjOYZBRwFB_ZM95Q@mail.gmail.com>
 <634914A010D0B943A035D226786325D4422DC21803@EXVMBX020-12.exch020.serverdata.net>
 <CACqnu4VGAED4DVy2YEeKEbNWkGwvEU78XA9FVZJqejABSvUsvw@mail.gmail.com>
 <20130605075607.GB22389@debian>
Message-ID: <87obbf6emq.fsf@meejah.ca>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jonathan Ballet <jon at multani.info> writes:
> On Tue, Jun 04, 2013 at 09:55:19PM +0100, Terry Jones wrote:

>> But, I believe this is what git rebase is mainly used for. You can
>> rebase your branch against an updated master and (I'm guessing)
>> make your changes look like a single diff. Some people don't like
>> that as it changes history, others do like it and say yes, that's
>> the point - clean up the history so the commit log isn't full of
>> tiny changes that were all made in order to effect some change
>> (i.e., address a given ticket/issue).

> This is actually called a "squash" in Git terminology - Git has an
> option called "--squash" for the "merge" command which precisely do
> that.

You *can* use "git rebase" to re-write a branch to look like all the
commits were in one (or be more selective, like take one out and
squash three together) -- or you can use the --squash option Jonathan
mentions during an actual merge. Basically, you're rebasing a branch
onto itself -- instead of using rebase to change the branch
point. This latter is a much nicer replacement for what people using
Subversion would call "mering trunk back into my branch" and IMO
more-closely matches what you usually mean: please pretend I branched
off trunk more recently, as I'd really like all those changes now so I
can fix the conflicts...

The rebase way of squashing does re-write the commits. For fun times,
look into "git rebase --interactive" (or as this guy calls it, ``a bit
like git commit --amend hopped up on acid and holding a chainsaw''):

http://tomayko.com/writings/the-thing-about-git

- -- 
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)

iQEcBAEBAgAGBQJRtBFwAAoJEJ0UOBRRgEVQpqYH/366F/9a8GkMxdnqItRTghZY
U/3AgjmYFpZmv14TM06QWAoX9RedzwASOq+x2J8Fiin+u2HPp8MUhrd0kcV7mvET
liyVnYA1v3xKParyS2mM0se0zc2pzQ6QileFYVBXMsmHhZndUPj7AlvNltDD9cXO
UJ7Ex0/eQQbKAybzbY5rSmNuYj01I0FNtfrfSvAHL1I2U4GtwH55lR5GTdEe2agk
WRFyqZgMDDe1e2bWJOYxoA7ZRUKdpgTUXKYWG4W/8uX4YrjBPkIQEZtL5Xu3qAGv
qNfAMhGkN0OLdBhhGpDsJrpsfTaSXW4CwlJSUZsg6fLSAqfe9lF0b0A5iNAscuY=
=K6gl
-----END PGP SIGNATURE-----



From luke at hybridcluster.com  Mon Jun 10 16:31:35 2013
From: luke at hybridcluster.com (Luke Marsden)
Date: Mon, 10 Jun 2013 23:31:35 +0100
Subject: [Twisted-Python] HybridCluster raises $1.5m;
	we are hiring great Twisted devs
Message-ID: <20130610223135.4935820.9216.16952@hybridcluster.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130610/602933ee/attachment-0002.html>

From sajattack at gmail.com  Mon Jun 10 22:38:02 2013
From: sajattack at gmail.com (Paul Sajna)
Date: Mon, 10 Jun 2013 21:38:02 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
	server - ports not closing
Message-ID: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>

I'm having a bit of trouble setting up an ssh-type server with twisted.
When I shutdown or restart the server, the port remains open. Please have a
look at my stackoverflow question. Thank you.

http://stackoverflow.com/questions/16379504/port-object-has-no-attribute-socket/16380253?noredirect=1#comment23490486_16380253
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130610/85a8fe94/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jun 10 23:46:33 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Jun 2013 22:46:33 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
	server - ports not closing
In-Reply-To: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
Message-ID: <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>


On Jun 10, 2013, at 9:38 PM, Paul Sajna <sajattack at gmail.com> wrote:

> I'm having a bit of trouble setting up an ssh-type server with twisted. When I shutdown or restart the server, the port remains open. Please have a look at my stackoverflow question. Thank you.
> 
> http://stackoverflow.com/questions/16379504/port-object-has-no-attribute-socket/16380253?noredirect=1#comment23490486_16380253

Hi Paul,

I'm sorry you're having a hard time working out how to do what you want with Twisted, but there's already an answer on this question.

The answer tells you to stop using threads, but you don't seem to have stopped using threads.  Add an example that doesn't use threads, or try the example I put in my answer.

Also, Twisted 9.0 is 5 years old at this point.  Many, many bugs have been fixed since then.  You may want to upgrade to a more recent version.

I'm still happy to help you with this if you can explain what, exactly, you still don't understand.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130610/9da01eec/attachment-0002.html>

From sajattack at gmail.com  Tue Jun 11 19:20:41 2013
From: sajattack at gmail.com (Paul Sajna)
Date: Tue, 11 Jun 2013 18:20:41 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
 server - ports not closing
In-Reply-To: <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
Message-ID: <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>

I continue to use threads because my application uses a GUI that becomes
blocked when the server starts. Also, I am now having a problem where port
is undefined until the server is stopped and started again.


On 10 June 2013 22:46, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 10, 2013, at 9:38 PM, Paul Sajna <sajattack at gmail.com> wrote:
>
> I'm having a bit of trouble setting up an ssh-type server with twisted.
> When I shutdown or restart the server, the port remains open. Please have a
> look at my stackoverflow question. Thank you.
>
>
> http://stackoverflow.com/questions/16379504/port-object-has-no-attribute-socket/16380253?noredirect=1#comment23490486_16380253
>
>
> Hi Paul,
>
> I'm sorry you're having a hard time working out how to do what you want
> with Twisted, but there's already an answer on this question.
>
> The answer tells you to stop using threads, but you don't seem to have
> stopped using threads.  Add an example that doesn't use threads, or try the
> example I put in my answer.
>
> Also, Twisted 9.0 is 5 years old at this point.  Many, many bugs have been
> fixed since then.  You may want to upgrade to a more recent version.
>
> I'm still happy to help you with this if you can explain what, exactly,
> you still don't understand.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130611/89eab185/attachment-0002.html>

From sajattack at gmail.com  Tue Jun 11 19:35:12 2013
From: sajattack at gmail.com (Paul Sajna)
Date: Tue, 11 Jun 2013 18:35:12 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
 server - ports not closing
In-Reply-To: <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
Message-ID: <CAGNi6+K5cxEcaGwcoD6rsL6_GEXw8V2LYCb5tE0i53x=MdK1-w@mail.gmail.com>

Also, the code shown in the SO post causes the GUI to freeze when
attempting to stop the server.


On 11 June 2013 18:20, Paul Sajna <sajattack at gmail.com> wrote:

> I continue to use threads because my application uses a GUI that becomes
> blocked when the server starts. Also, I am now having a problem where port
> is undefined until the server is stopped and started again.
>
>
> On 10 June 2013 22:46, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On Jun 10, 2013, at 9:38 PM, Paul Sajna <sajattack at gmail.com> wrote:
>>
>> I'm having a bit of trouble setting up an ssh-type server with twisted.
>> When I shutdown or restart the server, the port remains open. Please have a
>> look at my stackoverflow question. Thank you.
>>
>>
>> http://stackoverflow.com/questions/16379504/port-object-has-no-attribute-socket/16380253?noredirect=1#comment23490486_16380253
>>
>>
>> Hi Paul,
>>
>> I'm sorry you're having a hard time working out how to do what you want
>> with Twisted, but there's already an answer on this question.
>>
>> The answer tells you to stop using threads, but you don't seem to have
>> stopped using threads.  Add an example that doesn't use threads, or try the
>> example I put in my answer.
>>
>> Also, Twisted 9.0 is 5 years old at this point.  Many, many bugs have
>> been fixed since then.  You may want to upgrade to a more recent version.
>>
>> I'm still happy to help you with this if you can explain what, exactly,
>> you still don't understand.
>>
>> -glyph
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130611/63dbed9f/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jun 12 01:06:11 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 12 Jun 2013 00:06:11 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
	server - ports not closing
In-Reply-To: <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
Message-ID: <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>


On Jun 11, 2013, at 6:20 PM, Paul Sajna <sajattack at gmail.com> wrote:

> I continue to use threads because my application uses a GUI that becomes blocked when the server starts. Also, I am now having a problem where port is undefined until the server is stopped and started again.

Paul,

Until you stop using threads in this manner, you are using threads in a totally unsupported way and Twisted will be broken.

Twisted supports most GUIs directly though; there is generally no need to use threads.  What GUI library are you using?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130612/2d0bba4f/attachment-0002.html>

From twisted-python at 2xlp.com  Wed Jun 12 11:15:54 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 12 Jun 2013 13:15:54 -0400
Subject: [Twisted-Python] reload / restart best practices ?
In-Reply-To: <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
Message-ID: <72A98F3B-CD60-4930-91E9-8FC7A48B3D22@2xlp.com>


I have a twisted application that seems to occasionally jam up.  It dispatches a lot of work via DeferToThread, and in some instances it appears that the specific thread pool locks up ( haven't found out why yet ).  I'm fairly certain that the problem is stemming from getting HTTP documents ( there's a web indexing component and 3 external api tools ).

An acceptable fix for now would be periodic restarts ( daily or even weekly would more than suffice at this point ). 

Does anyone have a suggestion on how to best approach this ?  I saw some old discussions about ideas for implementing graceful restarts via autoload, and other stuff.   Because my application might be in mid-conversation with external APIs , I don't want to kill the process and respawn.  I'd like them to finish , and shutdown/restart N seconds later ( assuming that I wouldn't be able to fully shutdown because of an issue with a locked thread ).  


From twisted-python at 2xlp.com  Wed Jun 12 12:40:29 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 12 Jun 2013 14:40:29 -0400
Subject: [Twisted-Python] reload / restart best practices ?
In-Reply-To: <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
Message-ID: <CAA283E2-B64E-47CC-B7E4-C5FA00D1E855@2xlp.com>


I have a twisted application that seems to occasionally jam up.  It dispatches a lot of work via DeferToThread, and in some instances it appears that the specific thread pool locks up ( haven't found out why yet ).  I'm fairly certain that the problem is stemming from getting HTTP documents ( there's a web indexing component and 3 external api tools ).

An acceptable fix for now would be periodic restarts ( daily or even weekly would more than suffice at this point ). 

Does anyone have a suggestion on how to best approach this ?  I saw some old discussions about ideas for implementing graceful restarts via autoload, and other stuff.   Because my application might be in mid-conversation with external APIs , I don't want to kill the process and respawn.  I'd like them to finish , and shutdown/restart N seconds later ( assuming that I wouldn't be able to fully shutdown because of an issue with a locked thread ).  


From sajattack at gmail.com  Wed Jun 12 13:58:28 2013
From: sajattack at gmail.com (Paul Sajna)
Date: Wed, 12 Jun 2013 12:58:28 -0700
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
 server - ports not closing
In-Reply-To: <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
Message-ID: <CAGNi6+KAynwxi77BXqFQW45G9=MLmNeD+w_eWNwt8X87_AADug@mail.gmail.com>

I'm using Tkinter. When I do the reactor.listenTCP(), the server takes over
the main thread and the GUI freezes. Could you help me craft a GUI-safe
solution?


On 12 June 2013 00:06, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 11, 2013, at 6:20 PM, Paul Sajna <sajattack at gmail.com> wrote:
>
> I continue to use threads because my application uses a GUI that becomes
> blocked when the server starts. Also, I am now having a problem where port
> is undefined until the server is stopped and started again.
>
>
> Paul,
>
> Until you stop using threads in this manner, you are using threads in a
> totally unsupported way and Twisted will be broken.
>
> Twisted supports most GUIs directly though; there is generally no need to
> use threads.  What GUI library are you using?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130612/fce71c6e/attachment-0002.html>

From _ at lvh.io  Wed Jun 12 14:03:43 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 12 Jun 2013 22:03:43 +0200
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
 server - ports not closing
In-Reply-To: <CAGNi6+KAynwxi77BXqFQW45G9=MLmNeD+w_eWNwt8X87_AADug@mail.gmail.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
 <CAGNi6+KAynwxi77BXqFQW45G9=MLmNeD+w_eWNwt8X87_AADug@mail.gmail.com>
Message-ID: <CAE_Hg6YsqP_VEKFGmbBux+48=dhqEQNOrQJhM_7HEdQJeebMXg@mail.gmail.com>

Hi Paul

The documentation covers how to use Twisted with Tk (and many other event
loops). Here's the link you want:
https://twistedmatrix.com/documents/current/core/howto/choosing-reactor.html#auto16

Hope that helps :)
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130612/2be9fdaf/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jun 12 14:31:55 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 12 Jun 2013 13:31:55 -0700
Subject: [Twisted-Python] reload / restart best practices ?
In-Reply-To: <CAA283E2-B64E-47CC-B7E4-C5FA00D1E855@2xlp.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
 <CAA283E2-B64E-47CC-B7E4-C5FA00D1E855@2xlp.com>
Message-ID: <FF4BEB18-5277-4C04-A3C5-492926D863CA@twistedmatrix.com>


On Jun 12, 2013, at 11:40 AM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:

> Does anyone have a suggestion on how to best approach this ?  I saw some old discussions about ideas for implementing graceful restarts via autoload, and other stuff.

I'm not sure what "autoload" is.  I am assuming it's some kind of auto-re-loading technology though.

> Because my application might be in mid-conversation with external APIs , I don't want to kill the process and respawn.

You do want to re-start your process.  What you're diagnosing is some weird, unknown thread/process interaction and unless you get a clean slate, you don't know what is happening.

You may not want to do so immediately, though, since, as you say:

> I'd like them to finish , and shutdown/restart N seconds later ( assuming that I wouldn't be able to fully shutdown because of an issue with a locked thread ).  

The issue is with letting them finish.  In order to accomplish this, you should write IService implementations that have stopService methods that, when called, will wait for any operations in flight associated with that service.

Once everything is quiesced, you can re-exec ([sys.executable] + sys.argv) and that ought to result in the same process starting up again.  If you've done the appropriate thing and made all your stopService methods wait for their operations to complete, then waiting for them all to complete is just putting them all into a MultiService, calling stopService() on that MultiService, and adding a callback/errback to the Deferred it returns which calls os.exec.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130612/829acbd0/attachment-0002.html>

From twisted-python at 2xlp.com  Wed Jun 12 14:40:08 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 12 Jun 2013 16:40:08 -0400
Subject: [Twisted-Python] reload / restart best practices ?
In-Reply-To: <FF4BEB18-5277-4C04-A3C5-492926D863CA@twistedmatrix.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
 <CAA283E2-B64E-47CC-B7E4-C5FA00D1E855@2xlp.com>
 <FF4BEB18-5277-4C04-A3C5-492926D863CA@twistedmatrix.com>
Message-ID: <7089AB26-9DBC-482F-8187-21F3DB898188@2xlp.com>


On Jun 12, 2013, at 4:31 PM, Glyph wrote:

> I'm not sure what "autoload" is.  I am assuming it's some kind of auto-re-loading technology though.

The earlier discussions talked about Django's autoload, which reloads the entire process on a config file change.

> You do want to re-start your process.  What you're diagnosing is some weird, unknown thread/process interaction and unless you get a clean slate, you don't know what is happening.
> 
> You may not want to do so immediately, though, since, as you say:

Correct on both accounts.  I don't want to kill the current process while it's talking to an API.  I just want it to not talk to any additional APIs, then kill the process a bit later.

>> I'd like them to finish , and shutdown/restart N seconds later ( assuming that I wouldn't be able to fully shutdown because of an issue with a locked thread ).  
> 
> The issue is with letting them finish.  In order to accomplish this, you should write IService implementations that have stopService methods that, when called, will wait for any operations in flight associated with that service.
> 
> Once everything is quiesced, you can re-exec ([sys.executable] + sys.argv) and that ought to result in the same process starting up again.  If you've done the appropriate thing and made all your stopService methods wait for their operations to complete, then waiting for them all to complete is just putting them all into a MultiService, calling stopService() on that MultiService, and adding a callback/errback to the Deferred it returns which calls os.exec.

ok great !  I'll look into StopService and IService tomorrow !

thanks a ton.  that's pretty much what i want/need.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130612/fd6656c6/attachment-0002.html>

From naveenm at enthought.com  Wed Jun 12 14:56:22 2013
From: naveenm at enthought.com (Naveen Michaud-Agraw)
Date: Wed, 12 Jun 2013 16:56:22 -0400
Subject: [Twisted-Python] Difficulty restarting/shutting down a twisted
	server - ports not closing
In-Reply-To: <CAGNi6+KAynwxi77BXqFQW45G9=MLmNeD+w_eWNwt8X87_AADug@mail.gmail.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
 <CAGNi6+KAynwxi77BXqFQW45G9=MLmNeD+w_eWNwt8X87_AADug@mail.gmail.com>
Message-ID: <A6AB2177-502E-4BE8-9177-A0AEC6775FA7@enthought.com>

Hi Paul,

Have you tried the solution listed here:

http://twistedmatrix.com/documents/13.0.0/core/howto/choosing-reactor.html#auto16

With this approach, twisted would manage tkinter and you won't block on any twisted API calls.

Sent from my iPhone

On Jun 12, 2013, at 3:58 PM, Paul Sajna <sajattack at gmail.com> wrote:

> I'm using Tkinter. When I do the reactor.listenTCP(), the server takes over the main thread and the GUI freezes. Could you help me craft a GUI-safe solution?
> 
> 
> On 12 June 2013 00:06, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> On Jun 11, 2013, at 6:20 PM, Paul Sajna <sajattack at gmail.com> wrote:
>> 
>>> I continue to use threads because my application uses a GUI that becomes blocked when the server starts. Also, I am now having a problem where port is undefined until the server is stopped and started again.
>> 
>> Paul,
>> 
>> Until you stop using threads in this manner, you are using threads in a totally unsupported way and Twisted will be broken.
>> 
>> Twisted supports most GUIs directly though; there is generally no need to use threads.  What GUI library are you using?
>> 
>> -glyph
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130612/23f1710e/attachment-0002.html>

From terry at jon.es  Wed Jun 12 15:05:33 2013
From: terry at jon.es (Terry Jones)
Date: Wed, 12 Jun 2013 22:05:33 +0100
Subject: [Twisted-Python] reload / restart best practices ?
In-Reply-To: <7089AB26-9DBC-482F-8187-21F3DB898188@2xlp.com>
References: <CAGNi6+Jkx4TVAPzOwra=YHuF1pFgPPBOxyUyXityzO7iF0dgBA@mail.gmail.com>
 <018C50D1-6971-40EC-A3F6-A0D879A15F6B@twistedmatrix.com>
 <CAGNi6+KCayqjfAUoO4unb29VXWEcBmEmD4_D1sn=PRcyHCoLwQ@mail.gmail.com>
 <F4E2BC4E-D38F-4338-B223-923D026943F0@twistedmatrix.com>
 <CAA283E2-B64E-47CC-B7E4-C5FA00D1E855@2xlp.com>
 <FF4BEB18-5277-4C04-A3C5-492926D863CA@twistedmatrix.com>
 <7089AB26-9DBC-482F-8187-21F3DB898188@2xlp.com>
Message-ID: <CACqnu4VA20iEj08h8OD+wbmFpjrJCh+Ed7m8-DBU_ZTmRnMRqA@mail.gmail.com>

Hi Jonathan

You might also find something like this useful:
http://twistedmatrix.com/pipermail/twisted-python/2009-December/021107.html

Optionally, it would be easy to add a timeout value to the class that could
cancel outstanding deferreds after a certain amount of time and then fire
all the waiters.

Terry



On Wed, Jun 12, 2013 at 9:40 PM, Jonathan Vanasco
<twisted-python at 2xlp.com>wrote:

>
> On Jun 12, 2013, at 4:31 PM, Glyph wrote:
>
> I'm not sure what "autoload" is.  I am assuming it's some kind of
> auto-re-loading technology though.
>
>
> The earlier discussions talked about Django's autoload, which reloads the
> entire process on a config file change.
>
> You *do* want to re-start your process.  What you're diagnosing is some
> weird, unknown thread/process interaction and unless you get a clean slate,
> you don't know what is happening.
>
> You may not want to do so *immediately*, though, since, as you say:
>
>
> Correct on both accounts.  I don't want to kill the current process while
> it's talking to an API.  I just want it to not talk to any additional APIs,
> then kill the process a bit later.
>
> I'd like them to finish , and shutdown/restart N seconds later ( assuming
> that I wouldn't be able to fully shutdown because of an issue with a locked
> thread ).
>
>
> The issue is with letting them finish.  In order to accomplish this, you
> should write IService implementations that have stopService methods that,
> when called, will wait for any operations in flight associated with that
> service.
>
> Once everything is quiesced, you can re-exec ([sys.executable] + sys.argv)
> and that ought to result in the same process starting up again.  If you've
> done the appropriate thing and made all your stopService methods wait for
> their operations to complete, then waiting for them all to complete is just
> putting them all into a MultiService, calling stopService() on that
> MultiService, and adding a callback/errback to the Deferred it returns
> which calls os.exec.
>
>
> ok great !  I'll look into StopService and IService tomorrow !
>
> thanks a ton.  that's pretty much what i want/need.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130612/01e634d7/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Jun 12 17:16:12 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 12 Jun 2013 23:16:12 -0000
Subject: [Twisted-Python] Testing AMP-based code
In-Reply-To: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
Message-ID: <20130612231612.5484.1361672252.divmod.xquotient.46@top>

On 5 Jun, 07:13 pm, free at 64studio.com wrote:
>Hi,
>
>following up from ticket #6502, I'm looking for recommendations/best
>practices for writing unit-tests for AMP-based code.
>
>As described in the ticket, the issue I'm currently facing is that the
>AMP implementation is subtly not re-entrant safe and doesn't work with 
>a
>synchronous transport, for example this code raises an exception:
>
>http://twistedmatrix.com/trac/attachment/ticket/6502/example.py
>
>I'm starting to think that the most appropriate testing strategy would
>be to mock/stub AMP.callRemote (or the protocol class altogether)
>instead of trying to use a fake transport.
>
>Thoughts?

I think this is thinking in the right direction.  Twisted generally 
tries to be responsible for testing its own code, and the serialization 
from commands to bytes (and the reverse) that AMP does is part of 
Twisted, so you should really be free from the burden of testing that 
that stuff works.

One thing it's worth noticing is that the AMP class itself contains very 
little code.  Instead, it inherits most functionality from a few base 
classes.  It's worth learning about the division of responsibility 
between these classes because they can be helpful in writing cleaner AMP 
code and - relevant to this topic - writing AMP unit tests.

One of the base classes, BinaryBoxProtocol, is almost entirely concerned 
with serialization logic.  You can probably ignore this one entirely to 
begin with (although consider the consequences of 
serialization/deserialization living in this one class, independent of 
the rest of the protocol logic: perhaps you want to exchange AMP 
commands with a web browser and would find JSON an easier format to work 
with than AMP's int16 string scheme... etc).

Next, BoxDispatcher.  This one is what actually implements `callRemote` 
and the reverse - ampBoxReceived, turning an AMP box (already parsed), 
into an incoming method call or the result of a previous outgoing method 
call.  It operates on locator (to look up how to handle incoming method 
calls) and a box sender (to send out boxes representing method calls or 
responses).  It doesn't know about the network, so your box sender can 
be a purely in-memory thing, implementing some box handling logic purely 
as Python code and no I/O.

As far as the locator goes, if you want the standard 
`@SomeCommand.responder` functionality, then you can easily get this by 
re-using the next base class of AMP, CommandLocator.  This one's pretty 
straight-forward: subclass it and those decorators will work for you.

Ignore the last one, SimpleStringLocator, it's for extremely old-style 
AMP code that no one should be writing anymore.

So this all means that your application logic can all live on a 
CommandLocator subclass.  When you really want to put this on an AMP 
server, you can hook an AMP instance up to your CommandLocator subclass 
(AMP takes a locator as an __init__ argument).  When you want to test 
your command implementations, you can hook the CommandLocator up to a 
BoxDispatcher and a box sender and throw boxes straight at it with no 
network interation.

Some pieces are probably still missing from the public API - for 
example, you do want to test that your objects all get properly 
serialized and deserialized through AMP, particularly if you're 
implementing custom Argument types.  There are some private APIs, 
_objectsToStrings and _stringsToObjects mostly, that really help with 
testing this, and we should think about how to expose this functionality 
publically.  Also, we should document this whole pile of stuff.  Maybe 
you'd be interested in writing something up after you've had a chance to 
play with these ideas?

Jean-Paul



From glyph at twistedmatrix.com  Wed Jun 12 23:00:24 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 12 Jun 2013 22:00:24 -0700
Subject: [Twisted-Python] Testing AMP-based code
In-Reply-To: <20130612231612.5484.1361672252.divmod.xquotient.46@top>
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
 <20130612231612.5484.1361672252.divmod.xquotient.46@top>
Message-ID: <2CF3114B-3777-4B3B-9796-0D03D322225F@twistedmatrix.com>


On Jun 12, 2013, at 4:16 PM, exarkun at twistedmatrix.com wrote:

[snip]

> So this all means that your application logic can all live on a CommandLocator subclass.  When you really want to put this on an AMP server, you can hook an AMP instance up to your CommandLocator subclass (AMP takes a locator as an __init__ argument).  When you want to test your command implementations, you can hook the CommandLocator up to a BoxDispatcher and a box sender and throw boxes straight at it with no network interation.

Thanks a lot for this description.  Someone (maybe you if you're feeling generous, or someone else if they'd like to volunteer) should take most of the prose from this post, edit it a little bit to fit into the flow, and use it to expand the somewhat bare explanation of these concepts in <http://twistedmatrix.com/documents/current/core/howto/amp.html>.

> Some pieces are probably still missing from the public API - for example, you do want to test that your objects all get properly serialized and deserialized through AMP, particularly if you're implementing custom Argument types.  There are some private APIs, _objectsToStrings and _stringsToObjects mostly, that really help with testing this, and we should think about how to expose this functionality publically.  Also, we should document this whole pile of stuff.  Maybe you'd be interested in writing something up after you've had a chance to play with these ideas?

It would also be nice if someone could find a link to the tickets for this functionality - or, file one, if none exist.

Again, thanks a lot for the great explanation, JP.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130612/0cc20665/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jun 13 16:14:36 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 13 Jun 2013 15:14:36 -0700
Subject: [Twisted-Python] logging
Message-ID: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>

Hello everybody. Today I'd like to talk about everyone's favorite subsystem within Twisted: logging.

There are a number of problems with Twisted's logging system.

The general theme of these problems is that Twisted log system was designed with some intended use-cases in mind, but its implementation was stopped halfway through and none of those use-cases were really well satisfied.

At various conferences, and in person at various times, we've gotten together to express frustration at the logging system, but I don't think that the problems with it have ever been really thoroughly written down.

Wilfredo has been working on logging here: http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py. This began as an attempt to just address some issues with our own logging wrappers, but has been growing into a design that is more fully capable of replacing logging within Twisted wholesale. I hope one of us can contribute it to Twisted soon, but in the meanwhile, please feel free to provide feedback - hopefully if some people can provide a bit of informal feedback now, the formal review process can be shorter and more pleasant :).

Now, back to some explanation of the current problems.

The main intended use-case for Twisted's logging system is to avoid doing unnecessary work in the case where it is not required. One of the reasons we even still have our own logging system is that the stdlib logging module is notorious for doing too much work per log message, and doing it too prematurely.

One aspect of this is that logging would just use the existing 'kwargs' dictionary as its message type, and not actually do any formatting; that is, string-copying, until the message was logged. On Python 1.5.2, that meant no need to allocate anything since the interpreter needed a dict for the kwargs anyway! Woohoo premature optimization! Obviously, at least on PyPy, that optimization is no longer relevant (and we don't have performance tests for logging anyway). But, I don't think we should change that because a dict is still a good object for the sort of extensibility that log messages need.

But, we have never written any filtering logic, nor have we instrumented any of our existing log messages with formatting stuff. Every message with a format string just goes to the log.

For a long time, there's been consensus among at least a few core Twisted developers that log messages ought to be specified in terms of a format message and several relevant keyword arguments, so that tools can extract the values of the keyword arguments without parsing ad-hoc messages or using regexes. In other words, like this:

log.msg(format="Foo happened. Relevant information includes: "
                "bar=%(bar)s baz=%(baz)s boz=%(boz)s",
                bar=bar, baz=baz, boz=boz)

Yet, nothing within Twisted itself does this. There's a bit of a chicken and egg problem: since we have no tools for filtering log messages based on their structured values, there's no obvious motivation to break the structured contents of a message out into those values. And since no messages break out their values into nice structured fields, there's no motivation to write filtering tools that inspect those fields.

And, even if we did have filtering, we don't have a facility to easily defer work. You could, of course, just do something like this:

class GenerateOnlyIfNeeded(object):
    def __str__(self):
        return doSomethingExpensiveToGenerateAString()
log.msg(format="debugging: %(expensive)s",
        logLevel=debug, expensive=GenerateOnlyIfNeeded())

But that's an awful lot of thinking for a single log message, not to mention the temporary class and the method you needed to allocate. Such deferral of work should be easy.

And, speaking of the things that one might filter on, log messages don't typically include information about what module and class they're from; or, for that matter, what object is logging them. This information should be included by default in idiomatic usage of the API, so that a filtering system can inspect them.

Another reason that we - both Twisted itself and Twisted users - don't typically pass keyword arguments and a format string, is that the default argument to msg is, simply, a "message". (It also does a dumb thing where it tries to emulate the argument-passing convention of 'print' and stringify its arguments and join them with spaces; we should get rid of that.) Instead, that argument always ought to be a format string.

We should also have a log writer within Twisted that preserves structure, and dumps the logs using JSON (or similar, perhaps more than one of these; AMP would be another good thing).

It's also not possible to use format strings when you are writing an error log message in Twisted; instead, 'why' is treated completely differently than 'message'. The 'why' argument to 'err', which should be mandatory (what were you doing when you tried to log a message?) is optional, which means that error messages are even more inscrutable.

The portions of the dictionary used by the logging system are not namespaced in any way, even by convention. Therefore it's easy for a user to conflict with the keys used by the system. If users of Twisted actually used the system as intended more pervasively, I'm pretty sure that we would end up seeing people conflict with 'time' and 'system' arguments often.

Speaking of those keys: the 'time' key is unconditionally overwritten by log.msg, which means that re-publishing an event that happened previously is destructive; there's no way to track historical time.

Messages logged before the logging system starts are just lost. It would be good for the initial log observer to keep a (limited-size, of course) buffer of log messages which could be dumped upon failing. This would make it easier, for example, to debug tap plugins that use the log system to report something about their state during makeService. (And, as the maintainer of a phenomenally complex makeService, I can tell you that this would definitely be helpful.)

The naming of methods is bad and confusing. msg? err? Easy to type, but hard to understand. We could have equally short names that are not confusing.

The contract between parts of the system is poorly specified. For example, trial -j has a hard time with log output that includes any non-bytes keys. I imagine this will only become worse when trial actually supports Python 3.

And speaking of encoding, the log system is written in terms of bytes instead of in terms of unicode. Now, there's good reason to be particularly permissive of garbage data in the logging system (logging a message should never provoke an error), but at some point - probably before the data gets to user-written observers - everything should be normalized into a structure that has enough properties that the user can depend on it.

On that note, when presented with unicode encoding errors, Twisted's logger will directly raise an exception back to application code, something that it will otherwise only do when presented with KeyboardInterrupt. That I just don't understand.

We use old, semi-deprecated '%' formatting style. If we're going to introduce a new API, we should use PEP 3101 formatting; in addition to being new and improved instead of old and inferior, it's a lot easier to type {foo} correctly than to type %(foo)s without forgetting the s.

The whole LogContext thing is poorly designed. Mea culpa; this was entirely my fault. One problem with its design was that it was somewhat poorly explained, and so its intent has not carried over years of maintenance. The idea was supposed to be that every event-source within Twisted would provide a useful system key, which would indicate what event-source object (TCP connection, listening port, timed event, UDP port) was being activated when the given message was logged. However, a lot of factors conspire to make this information less than useful. For one thing, especially in database-backed applications, or those that are careful about rate-limiting or flow-control, nothing ever happens except in response to a callFromThread or a callLater; this means that the system argument is always "-". I think that the feature this is trying to support needs to be fundamentally re-thought (and in the intervening decade I've had a lot of ideas about how it might work better). Maybe we can build on some of Chris Armstrong's recent work on Deferred debugging in tracking asynchronous context in Deferreds to help identify the real cause(s) of work being executed.

OK, I think that's it for now.

(NB: The implementation linked above doesn't address all of the issues I've enumerated in this message, and I don't think that it should address every single one of them before being added to Twisted; writing this one message took me long enough, but we should possibly also discuss which ones are fundamental issues with the logging system and which are features that should be considered separately.)

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130613/508ef7ee/attachment-0002.html>

From radix at twistedmatrix.com  Thu Jun 13 17:16:28 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 13 Jun 2013 18:16:28 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
Message-ID: <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>

On Thu, Jun 13, 2013 at 5:14 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> Hello everybody. Today I'd like to talk about everyone's favorite subsystem within Twisted: logging.
>
> There are a number of problems with Twisted's logging system.

Thanks for writing up this email. I'd like to help out with this effort.

> For a long time, there's been consensus among at least a few core Twisted developers that log messages ought to be specified in terms of a format message and several relevant keyword arguments, so that tools can extract the values of the keyword arguments without parsing ad-hoc messages or using regexes. In other words, like this:
>
> log.msg(format="Foo happened. Relevant information includes: "
>                 "bar=%(bar)s baz=%(baz)s boz=%(boz)s",
>                 bar=bar, baz=baz, boz=boz)

There's something that I want to.... not propose, but discuss, that
I've discovered through my writing of actual applications that do
actual log filtering.

Basically, the conclusion I've come to is that English isn't very
useful in logs. It's usually badly written, uninformative, and hard to
filter on. The main thing that I find really important is having what
I call an "event name", which has the following properties:

1. human readable
2. computer readable
3. mandatory
4. unique across a codebase, and specific to the physical logging
statement that it's being passed to.

So, for example:

def frag_message_received(self, fragger, fragee, weapon):
    self.log("frag", fragger=fragger, fraggee=fragee, weapon=weapon)
    ...

Now, your smart log filterer can just filter by event="frag" instead
of message="Frag for \w+ received with weapon \w+" or whatever.

This is just how I've done things in practice, and it has worked very
well for fairly large projects, but there are improvements that I can
think of. For example, the event name should probably be based on a
hierarchy of composable logger objects (kinda like the one David Reid
wrote) so that it's easier to maintain uniqueness in a large codebase.

(Hey David, you should write an email about that logging class :)

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From radix at twistedmatrix.com  Thu Jun 13 19:02:16 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 13 Jun 2013 20:02:16 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
Message-ID: <CAPkRfUQ-e_mMaOdw5HNVH9O-ibstV7spSAZ+Yh79tBvH2oiG5g@mail.gmail.com>

On Thu, Jun 13, 2013 at 5:14 PM, Glyph <glyph at twistedmatrix.com> wrote:
> Hello everybody. Today I'd like to talk about everyone's favorite subsystem
> within Twisted: logging.
>
> There are a number of problems with Twisted's logging system.

I really need to get out of here and go to dinner, but I really
quickly wanted to start a list of use cases for logging.


1. "I need to convey a message with complex information to the user of
my software"
Log files usually aren't good at all for this, but they're
unfortunately used quite often for it. This is pretty much the only
reason to have English in your log statements, I think.

2. "I want to be able to analyze patterns in the execution of this software"
This is where structured data really helps. Keys, values, "systems",
and "events" (as I described below) -- things you can filter by,
graph, or redirect.

3. "I want to investigate certain events that happened in the
execution of this software"
Structured data helps just as much here as with #2. It's nice to be
able to interactively query databases of logs. "show me all the stuff
about this player". "show me everything that happened in this thread".
"show me all of the 'frag' events."

4. "I want to accumulate a bunch of extremely verbose data to be
logged only if it's really necessary, such as in an error case"
This is similar to #3, but there are cases where you have such verbose
data that you don't want to to log it all the time. This is basically
the OOPS system as some developers are familiar with -- the execution
of request-handling can attach data to the request (or some log
context object, or whatever) and if the request ever fails, all of
that data will be zipped up and saved somewhere for further
investigation. If the request succeeds, it'll be thrown out.

5. "I want to be able to track down where this log message came from"
the "event" attribute that I described is helpful here, but having the
filename and line number is even better.

I tried to write a number #6 about including framework-provided data
in your application-level log statements (like request ID, client IP,
URL etc), but I got too hungry.

Sorry for the braindump!


--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From facundobatista at gmail.com  Thu Jun 13 19:41:16 2013
From: facundobatista at gmail.com (Facundo Batista)
Date: Thu, 13 Jun 2013 22:41:16 -0300
Subject: [Twisted-Python] logging
In-Reply-To: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
Message-ID: <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>

On Thu, Jun 13, 2013 at 7:14 PM, Glyph <glyph at twistedmatrix.com> wrote:

> For a long time, there's been consensus among at least a few core Twisted
> developers that log messages ought to be specified in terms of a format
> message and several relevant keyword arguments, so that tools can extract
> the values of the keyword arguments without parsing ad-hoc messages or using
> regexes. In other words, like this:
>
> log.msg(format="Foo happened. Relevant information includes: "
>                 "bar=%(bar)s baz=%(baz)s boz=%(boz)s",
>                 bar=bar, baz=baz, boz=boz)

Mmm... which is the problem with doing:

log.msg("Foo happened. Relevant information includes: "
             "bar=%s baz=%s boz=%s", bar, baz, boz)

Is way more readable, and in the practice the code will just need to
do something like:

def msg(format_string, *args):
    try:
        line = format_string % args
    except:
        # something clever

No regexes involved, and very cheap in the case where it works.

And this is a personal opinion: the "working way" (where programmed
coded all ok) should be as cheap as possible. If something is wrong
with the logging line, it must not crash, and I don't care if it's
expensive, but that line will be fixed, and will work ok, and from
there to the future it will be cheap.

Thanks!

--
.    Facundo

Blog: http://www.taniquetil.com.ar/plog/
PyAr: http://www.python.org/ar/
Twitter: @facundobatista



From jkakar at kakar.ca  Fri Jun 14 00:41:18 2013
From: jkakar at kakar.ca (Jamu Kakar)
Date: Thu, 13 Jun 2013 23:41:18 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
Message-ID: <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>

Hi,

On Thu, Jun 13, 2013 at 6:41 PM, Facundo Batista
<facundobatista at gmail.com> wrote:
> Mmm... which is the problem with doing:
>
> log.msg("Foo happened. Relevant information includes: "
>              "bar=%s baz=%s boz=%s", bar, baz, boz)
>
> Is way more readable, and in the practice the code will just need to
> do something like:
>
> def msg(format_string, *args):
>     try:
>         line = format_string % args
>     except:
>         # something clever
>
> No regexes involved, and very cheap in the case where it works.
>
> And this is a personal opinion: the "working way" (where programmed
> coded all ok) should be as cheap as possible. If something is wrong
> with the logging line, it must not crash, and I don't care if it's
> expensive, but that line will be fixed, and will work ok, and from
> there to the future it will be cheap.

You might be interested in logfmt (which has implementations for Ruby,
Javascript and Go at least):

  https://github.com/jkakar/logfmt-python

The example above could be written in a logfmt-compatible way as:

  log.msg("message=Foo happened bar=%s baz=%s boz=%s", bar, baz, boz)

This is as readable as what you have above while being a touch easier
to parse.  The main point that logs are data and should emitted in a
way that makes consuming them easy is a good one regardless of the
format you choose.  I do wonder if logfmt is unnecessary and if simply
dumping JSON objects would be just as good... logfmt is slightly
prettier but the JSON approach has the advantage of having a parser
available in basically every language anyone would ever care about.

Thanks,
J.



From raketenschnitzel at gmx.de  Fri Jun 14 06:11:20 2013
From: raketenschnitzel at gmx.de (Raketenschnitzel)
Date: Fri, 14 Jun 2013 14:11:20 +0200
Subject: [Twisted-Python] Simple bidirectional Socket Client
Message-ID: <51BB0868.4050405@gmx.de>

Hi there,

i'm new to twisted, but i want to use it in a project for dealing with 
the socket connection to a server for receiving and sending data.
I already did some projects in Delphi and there you have an build-in 
eventdriven socket class. Python itself lacks at this feature (afaik) 
and so i stumpled upon twisted. Since its only a small part of my task, 
im looking for an easy solution but after consulting google for two days 
and testing around im still failing at get it working.

What i got so far:

class ControllerProtocol(Protocol):

     def connectionMade(self):
         # send Greeting
         self.factory.isConnected = True
         self.transport.write("hello, world!")

     def dataReceived(self, data):
         "Parse received data and send corresponding Message."
         self.transport.write(self.factory.reactOnReceive(data))

     def connectionLost(self, reason):
         #try to reconnect
         self.factory.isConnected = False
         print "connection lost"

     def sendMessage(self, data):
         print 'Send:', data
         self.transport.write(data)

class Communicator(ClientFactory):
     protocol = ControllerProtocol

     def __init__(self, Host, Port):
         if isinstance(Host, str) and isinstance(Port, int) :
             self.myHost = Host
             self.myPort = Port
             self.isConnected = False
             print 'Going To connect'
             self.connectToMother()

     def connectToMotherShip(self):
         reactor.connectTCP(self.myHost, self.myPort, self)
         reactor.run()

     def buildProtocol(self, addr):
         p = ClientFactory.buildProtocol(self, addr)
         self.connectedProtocol = p
         return p

     def sendMessage(self, Message):
         self.connectedProtocol.SendMessage(Message)

     def reactOnReceive(self, String):
         #here i parse the received string for different requests after 
converting it to json and update values of the operator
         pass

class Operator:
     def __init__(self):
     self.myCommunicator = Communicator("192.168.1.12", 815)
     do other stuff ...

I want an Operator Object that builds the Communicator. The communicator 
updates values of the Operator asynchronously if it receives messages. 
Each 10 secs the Operator will initiate a Communicator.sendMessage to 
send a status information to the server.

Two questions:
1) Is it possible to solve my task like this with twisted and if so, how 
do I get my Communicator to not block my Operator?
2) If twisted is not the easiest way for this approach, do i have 
alternatives? I want at least something event driven. I also read about 
the asyncore packages, but people often recommend twisted over asyncore.

I simply want to send and receive message with a "threaded" communicator 
class, while doing other stuff in my Operator.

Thanks a lot for your help,
Toni





From marco.giusti at gmail.com  Fri Jun 14 06:31:46 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Fri, 14 Jun 2013 14:31:46 +0200
Subject: [Twisted-Python] Simple bidirectional Socket Client
In-Reply-To: <51BB0868.4050405@gmx.de>
References: <51BB0868.4050405@gmx.de>
Message-ID: <20130614123146.GA3983@murdoc>

On Fri, Jun 14, 2013 at 02:11:20PM +0200, Raketenschnitzel wrote:
...
> class Communicator(ClientFactory):
>     protocol = ControllerProtocol
> 
>     def __init__(self, Host, Port):
>         if isinstance(Host, str) and isinstance(Port, int) :
>             self.myHost = Host
>             self.myPort = Port
>             self.isConnected = False
>             print 'Going To connect'
>             self.connectToMother()
> 
>     def connectToMotherShip(self):
>         reactor.connectTCP(self.myHost, self.myPort, self)
>         reactor.run()
> 
...
> class Operator:
>     def __init__(self):
>     self.myCommunicator = Communicator("192.168.1.12", 815)
>     do other stuff ...
> 
> I want an Operator Object that builds the Communicator. The
> communicator updates values of the Operator asynchronously if it
> receives messages. Each 10 secs the Operator will initiate a
> Communicator.sendMessage to send a status information to the server.
> 
> Two questions:
> 1) Is it possible to solve my task like this with twisted and if so,
> how do I get my Communicator to not block my Operator?

The operator is blocked because reactor.run() is a loop, do not call it
inside the factory constructor.

	class Communicator(ClientFactory):

		isConnected = False

		def __init__(self):
			pass

	class Operator:
		def __init__(self):
			# do other stuff but do not use self.myCommunicator yet


factory = Communicator()
operator = Operator()
operator.myCommunicator = factory
reactor.connectTCP(host, port, factory)
reactor.run()


> 2) If twisted is not the easiest way for this approach, do i have
> alternatives? I want at least something event driven. I also read
> about the asyncore packages, but people often recommend twisted over
> asyncore.
> 
> I simply want to send and receive message with a "threaded"
> communicator class, while doing other stuff in my Operator.

The great advantage of twisted is that you do not need to use threads to
communicate to the external world, use it only if you have to run code
that could "block" the main loop. But in my modest opinion, twisted is
the easiest way to do network programming.

Ciao
m.



From free at 64studio.com  Fri Jun 14 08:39:07 2013
From: free at 64studio.com (Free Ekanayaka)
Date: Fri, 14 Jun 2013 16:39:07 +0200
Subject: [Twisted-Python] Testing AMP-based code
In-Reply-To: <20130612231612.5484.1361672252.divmod.xquotient.46@top>
 (exarkun@twistedmatrix.com's message of "Wed, 12 Jun 2013 23:16:12
 -0000")
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
 <20130612231612.5484.1361672252.divmod.xquotient.46@top>
Message-ID: <87a9msiwok.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>

|--==> On Wed, 12 Jun 2013 23:16:12 -0000, exarkun at twistedmatrix.com said:

  > I think this is thinking in the right direction.  Twisted generally
  > tries to be responsible for testing its own code, and the
  > serialization from commands to bytes (and the reverse) that AMP does
  > is part of Twisted, so you should really be free from the burden of
  > testing that that stuff works.

Agreed. Thanks for the detailed explanation about the AMP internals, I
hadn't take time yet to fully read the implementation, I did now and
your directions helped.

I'm certainly happy to integrate the docs with this information as Glyph
suggested.

  > So this all means that your application logic can all live on a
  > CommandLocator subclass.

Indeed, I had figured out this particular bit already.

  > When you really want to put this on an AMP server, you can hook an
  > AMP instance up to your CommandLocator subclass (AMP takes a locator
  > as an __init__ argument).  When you want to test your command
  > implementations, you can hook the CommandLocator up to a
  > BoxDispatcher and a box sender and throw boxes straight at it with
  > no network interation.

Okay this is where it get interesting and I'd like to hear for opinions
for a few different possibilities. Following the your idea above, I've
put together this little example of application code with tests (it
expands the one attached to the ticket):

http://pastebin.com/6hTw5WDC

I've included some comments that are not really code comments, but
rather just express issues/considerations.

I believe there are two parts of application code that you want to test
(possibly differently). One part are the application-defined AMP
commands and their responders, the other part is the application client
code that make use of them via callRemote. So basically two different
layers.

My question is probably if folks have any opinion about whether to mock
the parts of your applications that invoke callRemote (typically by
providing fakes, so you don't invoke callRemote at all), or
alternatively to fake callRemote itself. As I wrote in the paste, this
probably drifts towards a "state-based vs behavior-based" matter.

  > Some pieces are probably still missing from the public API - for
  > example, you do want to test that your objects all get properly
  > serialized and deserialized through AMP, particularly if you're
  > implementing custom Argument types.  There are some private APIs,
  > _objectsToStrings and _stringsToObjects mostly, that really help with
  > testing this, and we should think about how to expose this
  > functionality publically.  Also, we should document this whole pile of
  > stuff.

I do have custom Argument types. Those could be exercised indirectly by
faking callRemote the way the FakeBoxDispatcher class in the paste does,
but there might be nicer approaches.

  > Maybe you'd be interested in writing something up after you've
  > had a chance to play with these ideas?

Sure. It feels part of these questions are not purely AMP-specific and
are generally relevant for testing application code that uses protocols
indirectly. I guess a popular approach is to wrap protocols inside
"Client" classes and then provide fake versions of those clients, which
at the end is perhaps what I should do in this case too (e.g. fake the
MathClient in the code).

Cheers,

Free



From radix at twistedmatrix.com  Fri Jun 14 13:45:50 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 14 Jun 2013 14:45:50 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
Message-ID: <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>

On Fri, Jun 14, 2013 at 1:41 AM, Jamu Kakar <jkakar at kakar.ca> wrote:
> Hi,
>
> On Thu, Jun 13, 2013 at 6:41 PM, Facundo Batista
> <facundobatista at gmail.com> wrote:
>> Mmm... which is the problem with doing:
>>
>> log.msg("Foo happened. Relevant information includes: "
>>              "bar=%s baz=%s boz=%s", bar, baz, boz)
>>
>> Is way more readable, and in the practice the code will just need to
>> do something like:
>
> The example above could be written in a logfmt-compatible way as:
>
>   log.msg("message=Foo happened bar=%s baz=%s boz=%s", bar, baz, boz)
>
> This is as readable as what you have above while being a touch easier
> to parse.  The main point that logs are data and should emitted in a
> way that makes consuming them easy is a good one regardless of the
> format you choose.  I do wonder if logfmt is unnecessary and if simply
> dumping JSON objects would be just as good... logfmt is slightly
> prettier but the JSON approach has the advantage of having a parser
> available in basically every language anyone would ever care about.


I think both of these should be avoided because they require the user
to specify string interpolation themselves. I'd prefer to avoid that
entirely, by default.

log.msg("Foo happened**", bar=bar, baz=baz, boz=boz)

This is better because:

1. it keeps the data structured
2. it is a lot less typing

** I would prefer this part to be "foo", but I'll keep these
discussions separate :)



--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From exarkun at twistedmatrix.com  Fri Jun 14 15:47:56 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 14 Jun 2013 21:47:56 -0000
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
Message-ID: <20130614214756.5484.127165603.divmod.xquotient.50@top>

On 07:45 pm, radix at twistedmatrix.com wrote:
>On Fri, Jun 14, 2013 at 1:41 AM, Jamu Kakar <jkakar at kakar.ca> wrote:
>>Hi,
>>
>>On Thu, Jun 13, 2013 at 6:41 PM, Facundo Batista
>><facundobatista at gmail.com> wrote:
>>>Mmm... which is the problem with doing:
>>>
>>>log.msg("Foo happened. Relevant information includes: "
>>>              "bar=%s baz=%s boz=%s", bar, baz, boz)
>>>
>>>Is way more readable, and in the practice the code will just need to
>>>do something like:
>>
>>The example above could be written in a logfmt-compatible way as:
>>
>>   log.msg("message=Foo happened bar=%s baz=%s boz=%s", bar, baz, boz)
>>
>>This is as readable as what you have above while being a touch easier
>>to parse.  The main point that logs are data and should emitted in a
>>way that makes consuming them easy is a good one regardless of the
>>format you choose.  I do wonder if logfmt is unnecessary and if simply
>>dumping JSON objects would be just as good... logfmt is slightly
>>prettier but the JSON approach has the advantage of having a parser
>>available in basically every language anyone would ever care about.
>
>
>I think both of these should be avoided because they require the user
>to specify string interpolation themselves. I'd prefer to avoid that
>entirely, by default.
>
>log.msg("Foo happened**", bar=bar, baz=baz, boz=boz)
>
>This is better because:
>
>1. it keeps the data structured
>2. it is a lot less typing
>
>** I would prefer this part to be "foo", but I'll keep these
>discussions separate :)

I think that I agree with this, except I wonder if you could supply some 
more realistic examples here.  Let's say I have a somewhat complex 
50kloc application with a log event emitted around once every 10 lines.

After I use up "foo", "bar", "baz", and "quux" I start having to refer 
to the hacker dictionary.  This doesn't get me very close to the 5000 
event identifiers I'll need.  How does someone come up with this in the 
real world?

Jean-Paul



From radix at twistedmatrix.com  Fri Jun 14 16:43:01 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 14 Jun 2013 17:43:01 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <20130614214756.5484.127165603.divmod.xquotient.50@top>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
Message-ID: <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>

On Fri, Jun 14, 2013 at 4:47 PM,  <exarkun at twistedmatrix.com> wrote:
> On 07:45 pm, radix at twistedmatrix.com wrote:
>> I think both of these should be avoided because they require the user
>> to specify string interpolation themselves. I'd prefer to avoid that
>> entirely, by default.
>>
>> log.msg("Foo happened**", bar=bar, baz=baz, boz=boz)
>>
>> This is better because:
>>
>> 1. it keeps the data structured
>> 2. it is a lot less typing
>>
>> ** I would prefer this part to be "foo", but I'll keep these
>> discussions separate :)
>
>
> I think that I agree with this, except I wonder if you could supply some
> more realistic examples here.  Let's say I have a somewhat complex 50kloc
> application with a log event emitted around once every 10 lines.
>
> After I use up "foo", "bar", "baz", and "quux" I start having to refer to
> the hacker dictionary.  This doesn't get me very close to the 5000 event
> identifiers I'll need.  How does someone come up with this in the real
> world?
>
> Jean-Paul


This really should have been a response to my earlier message where I
talk about the "event" more directly, instead my post about how to do
string formatting, but anyway.

That was a very amusing post, but I guess you were trying to make a
point :) The event name shouldn't be meaningless; you or your ops team
or your users are going to want to type it into their filtering
software, and it's nice if they can keep the event name in their head.
I find it most valuable when it's a short identifier that I think up
with my brain and type into my program. If I'm logging in a call to
received_frag(), for example, I'd probably call the event name "frag".
If I'm logging a message about an error that occurred during a
regularly scheduled database compaction, I would call it
"scheduled-db-compact-failed".

If you're concerned about universal uniqueness, there are two ways I
can think of doing it, both of which should basically have a similar
API as far as where concerns are in your code:

- make the event name hierarchical with a root being identifier by your project

"SpaceCombat.server.db.scheduled-compaction-failed"

(you shouldn't need to type out this full event name every time you
type a log.msg() statement; that's not a hard problem to solve)

- put a hierarchical designator into the "system" field

log("scheduled-compaction-failed", system="SpaceCombat.server.db")

I think I like the idea of using "system" for this, since that
basically seems like the original intent.


--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From glyph at twistedmatrix.com  Fri Jun 14 16:43:10 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 14 Jun 2013 15:43:10 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
Message-ID: <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>


On Jun 13, 2013, at 4:16 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On Thu, Jun 13, 2013 at 5:14 PM, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> Hello everybody. Today I'd like to talk about everyone's favorite subsystem within Twisted: logging.
>> 
>> There are a number of problems with Twisted's logging system.
> 
> Thanks for writing up this email. I'd like to help out with this effort.
> 
>> For a long time, there's been consensus among at least a few core Twisted developers that log messages ought to be specified in terms of a format message and several relevant keyword arguments, so that tools can extract the values of the keyword arguments without parsing ad-hoc messages or using regexes. In other words, like this:
>> 
>> log.msg(format="Foo happened. Relevant information includes: "
>>                "bar=%(bar)s baz=%(baz)s boz=%(boz)s",
>>                bar=bar, baz=baz, boz=boz)


> Basically, the conclusion I've come to is that English isn't very
> useful in logs. It's usually badly written, uninformative, and hard to
> filter on. The main thing that I find really important is having what
> I call an "event name", which has the following properties:

So, I confess that one of my long-term goals here is to de-emphasize the english-language log file and eventually get Twisted using a structured log file as standard.  However, to just do that immediately would probably break everybody's workflow.

> 1. human readable
> 2. computer readable
> 3. mandatory
> 4. unique across a codebase, and specific to the physical logging statement that it's being passed to.

I agree with some of these properties and disagree with others, but you didn't really say *why* these properties are useful.  So let me see if I can explain the properties I think are good, starting with the use-case rather than the other way 'round:

There are several activities that one performs with logging:

while one's writing the code, inserting a log message
while one's administering a system, reading the history of all logged messages
while one's monitoring a system, selecting criteria for future relevant log messages to alert on
while one's debugging a system, selecting criteria for past relevant log messages to display
while one's documenting a system, explaining what various log messages mean and how they may be used for the other use-cases

English (by which I mean "localizable human-readable text") is useful for use-cases 1. and 2.  When you're writing the log message, selecting a unique identifier is tedious; you just want to type in what happened and move on.  When you're reading the messages, it's easier to puzzle out some english text than to go to the documentation for each and every message.

Globally unique identifiers are useful for use-cases 3 and 4.  Filtering messages by random snippets of English text is tedious, error-prone and fragile.  (It doesn't help if a message is unique "across a codebase" if that codebase is a library and it conflicts with another library that an application uses.)

Stable identifiers are particularly useful for use-cases 3 and 5.  While human-readability is useful for all cases, that generally conflicts with the long-term stability of an identifier.  If you write a monitoring system that looks at log messages.

I think that we can satisfy all of these requirements by expanding the notion of an "identifier" a bit.

In the interests of not spending ten hours working on each message to this list, I'll leave this one on a cliffhanger, so you can eagerly await the next episode!

> So, for example:
> 
> def frag_message_received(self, fragger, fragee, weapon):
>    self.log("frag", fragger=fragger, fraggee=fragee, weapon=weapon)
>    ...
> 
> Now, your smart log filterer can just filter by event="frag" instead
> of message="Frag for \w+ received with weapon \w+" or whatever.
> 
> This is just how I've done things in practice, and it has worked very
> well for fairly large projects, but there are improvements that I can
> think of. For example, the event name should probably be based on a
> hierarchy of composable logger objects (kinda like the one David Reid
> wrote) so that it's easier to maintain uniqueness in a large codebase.
> 
> (Hey David, you should write an email about that logging class :)


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130614/178398b6/attachment-0002.html>

From tom.prince at ualberta.net  Fri Jun 14 16:45:07 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Fri, 14 Jun 2013 16:45:07 -0600
Subject: [Twisted-Python] Announcing twisted-dev-tools
Message-ID: <877ghwgvm4.fsf@loki.hocat.ca>

http://labs.twistedmatrix.com/2013/06/announcing-twisted-dev-tools.html

I'd like to announce the release of twisted-dev-tools. It is a project that
collects various python scripts useful for developer working on twisted itself.

Right now, it contains the following tools.

- force-build:
     This is an updated version of force-builds.py from
     twisted-trac-integration.  It has a different (more flexible) syntax.

     If run from a git repository, where the current commit has been pushed to
     svn, running it with no arguments  will automatically build the
     corresponding branch.

- mkbranch:
     A helper for thos use git: it creates a branch in svn, with a standard
     commit message.

     Eventually, this should be enhanced to automatically fetch that commit,
     and switch to the branch locally.

- review-tickets:

     Command-line list of tickets currently in review

- fetch-ticket:
    
    Command-line tool to view a ticket

- get-attachemnt:

    Tool for interacting with trac attachments.

    - list: list all attachments on a given ticket
    - get: gets a gien ticket (defaults to the lat)
    - apply: applies that last attachment to the current git repository, and
             commits it with an appropriate message

Most of the functionality is also exposed as a python library, so custom scripts
are possible as well.

The code is available at https://github.com/twisted/twisted-dev-tools and on
pypi https://pypi.python.org/pypi/twisted-dev-tools



From radix at twistedmatrix.com  Fri Jun 14 16:45:23 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 14 Jun 2013 17:45:23 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
Message-ID: <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>

On Fri, Jun 14, 2013 at 5:43 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> If you're concerned about universal uniqueness, there are two ways I
> can think of doing it, both of which should basically have a similar
> API as far as where concerns are in your code:
>
> - make the event name hierarchical with a root being identifier by your project
>
> "SpaceCombat.server.db.scheduled-compaction-failed"
>
> (you shouldn't need to type out this full event name every time you
> type a log.msg() statement; that's not a hard problem to solve)
>
> - put a hierarchical designator into the "system" field
>
> log("scheduled-compaction-failed", system="SpaceCombat.server.db")
>
> I think I like the idea of using "system" for this, since that
> basically seems like the original intent.


Sorry, let me clarify. You shouldn't need to type out
"SpaceCombat.server.db" multiple times in your log statements *ever*,
in either case above. I imagine a system like the following:

spacecombat/server/db.py:

from twisted.python import log

logger = log.BoundLogger(log, system="SpaceCombat.server.db")

logger.msg("scheduled-compaction-failed")

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From wsanchez at wsanchez.net  Fri Jun 14 17:20:58 2013
From: wsanchez at wsanchez.net (=?ISO-8859-1?Q?Wilfredo_S=E1nchez_Vega?=)
Date: Fri, 14 Jun 2013 16:20:58 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
Message-ID: <51BBA55A.60306@wsanchez.net>

Christopher Armstrong wrote:
> logger.msg("scheduled-compaction-failed")
   I'm confused.  You don't want to use English, but... why not change 
your hyphens to spaces and call it a day?  Also, why did it fail?

   Here's a fuller example, modified to fit the API I'm using:

from twisted.python.log import Logger

log = Logger()

try:
   scheduleCompaction(...)
except Exception as e:
   log.error("Scheduled compaction failed: {why}", why=e,
             id=2C09A260-184C-44F9-B11F-E12B26B26C9C)


   Some things to note about this:

   - `log = Logger()` does some magic so that log.namespace is the name 
of your module "spacecombat.server.db".  So, your "system" identifier is 
perhaps covered by that, with no typing.

   - I have a format string instead of a fixed string.  An observer 
emitting text can emit something informative.  I know you think that 
text logs aren't useful, but a lot of us do.  And you can use observers 
that ignore this format.  Maybe there's an argument for making the 
format optional...

   - Formatting isn't done here, so... cheap if you don't use it in any 
observers.

   - I added a GUID id argument since you seem keen, I think on a unique 
key to identify the code point at which the message is logged.  It's not 
used in the format, but an observer storing things in a DB could use 
that to take you straight to the relevant code, or identify multiple 
instances of that message, etc. if the format string isn't how you want 
to do that.

     -wsv

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130614/b4d40b1d/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jun 14 17:40:21 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 14 Jun 2013 16:40:21 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
Message-ID: <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>


On Jun 14, 2013, at 3:43 PM, Glyph <glyph at twistedmatrix.com> wrote:

> I think that we can satisfy all of these requirements by expanding the notion of an "identifier" a bit.

In our last episode, I mentioned that an identifier should have several properties:

human readable (and potentially non-unique) for ease of writing messages and reading them to get a general sense of the behavior of a system
globally unique (and potentially hard to read) for ease of filtering and monitoring
long-term (and potentially unique to humans) for ease of writing tools to deal with particular messages, whose exact details may change over time

I think we can achieve all of these things by making there be multiple ways to identify a log message.  Here's how that could work:

When you are first writing a log message, just do this, as you usually would; toss off some crummy english message:

log.info("hey check it out I just {verb}ed a {noun}", verb=request.method, noun=request.uri)

Asking the author to write a log message with more detail and care than this is basically just a recipe for disappointment :).

Later, someone might want to instrument these messages.  We've all agreed that re.findall("hey check it out.*") is a crummy way to do this.  The obvious thing would be something like this:

tapEventsLike(myObserver, publisher, log_format="hey check it out I just {verb}ed a {noun}")

That's fine to start with, of course, but it's not very resilient to changes in the code; the developer might later change this line to read:

log.info("hey check it out I just {verb}ed a {noun} and got a {result}", verb=request.method, noun=request.uri, result=request.response.status)

Now the log tap is broken, and there's no reasonable way to fix it; the format string doesn't have a place that it could go.

But, the 'log' in the above example is a logger object associated with a class or module, and so has 3 persistent pieces of information it can use to build a long-term identifier that the event tap can use.  We could reflect that in an API like this:

from example.module import log
tapEventsLike(myObserver, publisher,
              log_id=log.idForOriginalFormat("hey check it out I just {verb}ed a {noun}"))

which could be computed offline, and then specified like this, to be even more resilient to API changes:

tapEventsLike(myObserver, publisher, log_id='604e45b5-2d41-5ba5-9ae1-7205163c3e3f')

That string, of course, is computed like this:

>>> import uuid
>>> from urllib import urlencode
>>> uri = "http://twistedmatrix.com/ns/log/?" + urlencode(dict(format="hey check it out I just {verb}ed a {noun}", module="example.module"))
>>> uuid.uuid5(uuid.NAMESPACE_URL, uri)
UUID('604e45b5-2d41-5ba5-9ae1-7205163c3e3f')

(Although if we decide we like this system, we could of course go with a helpful command-line tool to generate these for you.)

As you evolve your codebase to take logging more seriously, you could change the original 'log.info' call to instead look like this:

verbANoun = log.declare(
    "hey check it out I just {verb}ed a {noun} and got a {result}",
    log_id='604e45b5-2d41-5ba5-9ae1-7205163c3e3f',
)
# ...
verbANoun(verb=request.method, noun=request.uri, result=request.response.status)

and then monitoring can be accomplished via public API:

from example.module import verbANoun
verbANoun.tap(myObserver, theLogPublisher)

So, after some evolution, our message has 3 identifiers:

the original format string, which was easy to come up with on the spot, and need not be unique
a UUID, that was automatically generated but can be carried around to allow for cleaning up the codebase and the message without breaking any code doing monitoring
an API name that the logger and the logee can use to agree on the semantics of a particular message

Best of all, you can get this even for the plethora of existing log messages within Twisted that aren't even using structured values, as we evolve them to have more metadata.  You also now have the ability to localize the format string, if you want to start presenting these log messages in contexts other than log files for system administrators.

Thoughts?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130614/a93e35cb/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jun 14 20:30:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 14 Jun 2013 19:30:42 -0700
Subject: [Twisted-Python] Announcing twisted-dev-tools
In-Reply-To: <877ghwgvm4.fsf@loki.hocat.ca>
References: <877ghwgvm4.fsf@loki.hocat.ca>
Message-ID: <EFFCE5AA-DE4B-4176-A1E7-6A300AA48A8B@twistedmatrix.com>


On Jun 14, 2013, at 3:45 PM, Tom Prince <tom.prince at ualberta.net> wrote:

> http://labs.twistedmatrix.com/2013/06/announcing-twisted-dev-tools.html
> 
> I'd like to announce the release of twisted-dev-tools. It is a project that
> collects various python scripts useful for developer working on twisted itself.

Cool!  It's nice to have all this stuff in one place now.  Maybe we can even get some documentation? :)

> - mkbranch:
>     A helper for thos use git: it creates a branch in svn, with a standard
>     commit message.
> 
>     Eventually, this should be enhanced to automatically fetch that commit,
>     and switch to the branch locally.

This is all great, but, would you mind re-naming it so that I can have both this, and Combinator installed locally?  Until we switch to Git, I'd like to preserve the capacity to work with Subversion natively :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130614/c2789603/attachment-0002.html>

From radix at twistedmatrix.com  Fri Jun 14 23:43:50 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 00:43:50 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <51BBA55A.60306@wsanchez.net>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
Message-ID: <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>

On Fri, Jun 14, 2013 at 6:20 PM, Wilfredo Sánchez Vega
<wsanchez at wsanchez.net> wrote:
> Christopher Armstrong wrote:
>
> logger.msg("scheduled-compaction-failed")
>
>   I'm confused.  You don't want to use English, but… why not change your
> hyphens to spaces and call it a day?  Also, why did it fail?

Because as soon as you introduce spaces, you're probably going to
introduce capitalization and punctuation as well, and then all of a
sudden your log statements are a lot harder to filter.

>   Here's a fuller example, modified to fit the API I'm using:
>
> from twisted.python.log import Logger
>
> log = Logger()
>
> try:
>   scheduleCompaction(…)
> except Exception as e:
>   log.error("Scheduled compaction failed: {why}", why=e,
>             id=2C09A260-184C-44F9-B11F-E12B26B26C9C)
>
>
>   Some things to note about this:
>
>   - `log = Logger()` does some magic so that log.namespace is the name of
> your module "spacecombat.server.db".  So, your "system" identifier is
> perhaps covered by that, with no typing.

I like making it trivial to specify the system, but I don't think it's
a good idea to do it based on the module name. Code moves around a
lot, and you may have lots of implementation modules for one logical
system. I think it's fine to just have people say 'log =
Logger("spacecombat.server.db")' at the top of their file.

>   - I have a format string instead of a fixed string.  An observer emitting
> text can emit something informative.  I know you think that text logs aren't
> useful, but a lot of us do.  And you can use observers that ignore this
> format.  Maybe there's an argument for making the format optional...

I think the argument about English is separate from the argument about
whether we should require specifying the interpolation in the strings.

>   - Formatting isn't done here, so... cheap if you don't use it in any
> observers.

>   - I added a GUID id argument since you seem keen, I think on a unique key
> to identify the code point at which the message is logged.  It's not used in
> the format, but an observer storing things in a DB could use that to take
> you straight to the relevant code, or identify multiple instances of that
> message, etc. if the format string isn't how you want to do that.

I don't think it's worth coming up with some kind of GUID-based
system, because I don't think anyone's going to go to the trouble to
use it, and I think it basically offers no practical benefit over
simple event names.

So, again, I want to reiterate that I wasn't really proposing
mandating an event name and enforcing these rules on it.

As far as actual *proposals* go, I have these ones, that are all independent:

1. include all keyword arguments in log output without requiring
specifying the formatting in the string
2. make it really easy to specify the "system"
3. stop affecting the "system" of application code based on the
framework code that's running the application code (i.e., don't use
callWithContext to specify the system any more)

Of these, I think #2 and #3 have the most benefit; I can do #1 with my
own logging statements just fine, and while IMO it'd be nice if the
whole world adopted a nice identifier-based system, the lion's share
of the benefit comes from my use of it consistently in the
application's codebase.

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From radix at twistedmatrix.com  Fri Jun 14 23:48:42 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 00:48:42 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
Message-ID: <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>

On Fri, Jun 14, 2013 at 6:40 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Jun 14, 2013, at 3:43 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> I think that we can satisfy all of these requirements by expanding the
> notion of an "identifier" a bit.
>
>
> In our last episode, I mentioned that an identifier should have several
> properties:
>
> human readable (and potentially non-unique) for ease of writing messages and
> reading them to get a general sense of the behavior of a system
> globally unique (and potentially hard to read) for ease of filtering and
> monitoring
> long-term (and potentially unique to humans) for ease of writing tools to
> deal with particular messages, whose exact details may change over time
>
>
> I think we can achieve all of these things by making there be multiple ways
> to identify a log message.  Here's how that could work:
>
> When you are first writing a log message, just do this, as you usually
> would; toss off some crummy english message:
>
> log.info("hey check it out I just {verb}ed a {noun}", verb=request.method,
> noun=request.uri)
>
>
> Asking the author to write a log message with more detail and care than this
> is basically just a recipe for disappointment :).
>
> Later, someone might want to instrument these messages.  We've all agreed
> that re.findall("hey check it out.*") is a crummy way to do this.  The
> obvious thing would be something like this:
>
> tapEventsLike(myObserver, publisher, log_format="hey check it out I just
> {verb}ed a {noun}")
>
>
> That's fine to start with, of course, but it's not very resilient to changes
> in the code; the developer might later change this line to read:
>
> log.info("hey check it out I just {verb}ed a {noun} and got a {result}",
> verb=request.method, noun=request.uri, result=request.response.status)
>
>
> Now the log tap is broken, and there's no reasonable way to fix it; the
> format string doesn't have a place that it could go.
>
> But, the 'log' in the above example is a logger object associated with a
> class or module, and so has 3 persistent pieces of information it can use to
> build a long-term identifier that the event tap can use.  We could reflect
> that in an API like this:
>
> from example.module import log
> tapEventsLike(myObserver, publisher,
>               log_id=log.idForOriginalFormat("hey check it out I just
> {verb}ed a {noun}"))
>
>
> which could be computed offline, and then specified like this, to be even
> more resilient to API changes:
>
> tapEventsLike(myObserver, publisher,
> log_id='604e45b5-2d41-5ba5-9ae1-7205163c3e3f')
>
>
> That string, of course, is computed like this:
>
>>>> import uuid
>>>> from urllib import urlencode
>>>> uri = "http://twistedmatrix.com/ns/log/?" + urlencode(dict(format="hey
>>>> check it out I just {verb}ed a {noun}", module="example.module"))
>>>> uuid.uuid5(uuid.NAMESPACE_URL, uri)
> UUID('604e45b5-2d41-5ba5-9ae1-7205163c3e3f')
>
>
> (Although if we decide we like this system, we could of course go with a
> helpful command-line tool to generate these for you.)
>
> As you evolve your codebase to take logging more seriously, you could change
> the original 'log.info' call to instead look like this:
>
> verbANoun = log.declare(
>
>     "hey check it out I just {verb}ed a {noun} and got a {result}",
>
>     log_id='604e45b5-2d41-5ba5-9ae1-7205163c3e3f',
>
> )
>
> # ...
>
> verbANoun(verb=request.method, noun=request.uri,
> result=request.response.status)
>
>
> and then monitoring can be accomplished via public API:
>
> from example.module import verbANoun
> verbANoun.tap(myObserver, theLogPublisher)
>
>
> So, after some evolution, our message has 3 identifiers:
>
> the original format string, which was easy to come up with on the spot, and
> need not be unique
> a UUID, that was automatically generated but can be carried around to allow
> for cleaning up the codebase and the message without breaking any code doing
> monitoring
> an API name that the logger and the logee can use to agree on the semantics
> of a particular message
>
>
> Best of all, you can get this even for the plethora of existing log messages
> within Twisted that aren't even using structured values, as we evolve them
> to have more metadata.  You also now have the ability to localize the format
> string, if you want to start presenting these log messages in contexts other
> than log files for system administrators.
>
> Thoughts?

There's... a lot here. I'm overwhelmed by how complex this system
would be, and I think that end users would be as well. I don't really
want to put UUIDs into my source code, whether I type them or paste
them, and I don't want to have to invoke command line tools to figure
out what those UUIDs in order to be a good developer.

I think there's basically no practical benefit over the hierarchical
"system" + event-identifier system, where:

1. it's trivial to specify a hierarchical, easy-to-read "system" key
that has a small-ish scope
2. you think of a unique event name in that small-ish scope and type it out.

I'm beginning to think #1 is the most important of all, but I think
I'll continue to use event-names to describe all my log statements.

As I said in my response to Wilfredo, I think it's really important to
stop specifying the "system" for application code in Twisted. The
application's code should not be considered a part of the HTTP
protocol's system. There are also other problems with the way we use
system, like putting extra random data like request ID in there.

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From radix at twistedmatrix.com  Sat Jun 15 00:18:45 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 01:18:45 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
Message-ID: <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>

On Sat, Jun 15, 2013 at 12:43 AM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> On Fri, Jun 14, 2013 at 6:20 PM, Wilfredo Sánchez Vega
> <wsanchez at wsanchez.net> wrote:
>> Christopher Armstrong wrote:
>>
>> logger.msg("scheduled-compaction-failed")
>>
>>   I'm confused.  You don't want to use English, but… why not change your
>> hyphens to spaces and call it a day?  Also, why did it fail?
>
> Because as soon as you introduce spaces, you're probably going to
> introduce capitalization and punctuation as well, and then all of a
> sudden your log statements are a lot harder to filter.
>
>>   Here's a fuller example, modified to fit the API I'm using:
>>
>> from twisted.python.log import Logger
>>
>> log = Logger()
>>
>> try:
>>   scheduleCompaction(…)
>> except Exception as e:
>>   log.error("Scheduled compaction failed: {why}", why=e,
>>             id=2C09A260-184C-44F9-B11F-E12B26B26C9C)
>>
>>
>>   Some things to note about this:
>>
>>   - `log = Logger()` does some magic so that log.namespace is the name of
>> your module "spacecombat.server.db".  So, your "system" identifier is
>> perhaps covered by that, with no typing.
>
> I like making it trivial to specify the system, but I don't think it's
> a good idea to do it based on the module name. Code moves around a
> lot, and you may have lots of implementation modules for one logical
> system. I think it's fine to just have people say 'log =
> Logger("spacecombat.server.db")' at the top of their file.
>
>>   - I have a format string instead of a fixed string.  An observer emitting
>> text can emit something informative.  I know you think that text logs aren't
>> useful, but a lot of us do.  And you can use observers that ignore this
>> format.  Maybe there's an argument for making the format optional...
>
> I think the argument about English is separate from the argument about
> whether we should require specifying the interpolation in the strings.
>
>>   - Formatting isn't done here, so... cheap if you don't use it in any
>> observers.
>
>>   - I added a GUID id argument since you seem keen, I think on a unique key
>> to identify the code point at which the message is logged.  It's not used in
>> the format, but an observer storing things in a DB could use that to take
>> you straight to the relevant code, or identify multiple instances of that
>> message, etc. if the format string isn't how you want to do that.
>
> I don't think it's worth coming up with some kind of GUID-based
> system, because I don't think anyone's going to go to the trouble to
> use it, and I think it basically offers no practical benefit over
> simple event names.
>
> So, again, I want to reiterate that I wasn't really proposing
> mandating an event name and enforcing these rules on it.
>
> As far as actual *proposals* go, I have these ones, that are all independent:
>
> 1. include all keyword arguments in log output without requiring
> specifying the formatting in the string
> 2. make it really easy to specify the "system"
> 3. stop affecting the "system" of application code based on the
> framework code that's running the application code (i.e., don't use
> callWithContext to specify the system any more)
>
> Of these, I think #2 and #3 have the most benefit; I can do #1 with my
> own logging statements just fine, and while IMO it'd be nice if the
> whole world adopted a nice identifier-based system, the lion's share
> of the benefit comes from my use of it consistently in the
> application's codebase.



This conversation has gotten pretty sprawling; time to reel it in with
some code.

What do you think of this for an API that meets in the middle?

https://gist.github.com/radeex/5787124

This example implementation only concerns itself with the points under
debate right now; obviously it's completely unusable in general. But
anyway:

1. it supports English logs
2. it doesn't require you to specify a formatting if you want to just
log a bunch of data
3. it makes it easy to specify a system (both manually and based on
the module your code is in)

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From hs at ox.cx  Sat Jun 15 01:18:03 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Sat, 15 Jun 2013 09:18:03 +0200
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
Message-ID: <7FDD43C4-4456-4ED3-9F7F-EF14FC34EB44@ox.cx>


Am 15.06.2013 um 08:18 schrieb Christopher Armstrong <radix at twistedmatrix.com>:

>> As far as actual *proposals* go, I have these ones, that are all independent:
>> 
>> 1. include all keyword arguments in log output without requiring
>> specifying the formatting in the string
>> 2. make it really easy to specify the "system"
>> 3. stop affecting the "system" of application code based on the
>> framework code that's running the application code (i.e., don't use
>> callWithContext to specify the system any more)
>> 
>> Of these, I think #2 and #3 have the most benefit; I can do #1 with my
>> own logging statements just fine, and while IMO it'd be nice if the
>> whole world adopted a nice identifier-based system, the lion's share
>> of the benefit comes from my use of it consistently in the
>> application's codebase.
> 
> This conversation has gotten pretty sprawling; time to reel it in with
> some code.
> 
> What do you think of this for an API that meets in the middle?
> 
> https://gist.github.com/radeex/5787124
> 
> This example implementation only concerns itself with the points under
> debate right now; obviously it's completely unusable in general. But
> anyway:
> 
> 1. it supports English logs
> 2. it doesn't require you to specify a formatting if you want to just
> log a bunch of data
> 3. it makes it easy to specify a system (both manually and based on
> the module your code is in)

I’ve held back from this discussion so far because it seemed to me that I always missed some part of the discussion to fully understand what you’re all talking about. I would like to comment on this concrete proposal though before I hold my peace forever. (NB I’m not replying just to Christopher but try to address everything I saw on the thread so far – I like most of his proposal.)

I find that there’s some kind of false dichotomy brought up in this discussion and API and output are somewhat muddled together a bit (maybe I’m just misunderstanding though – that’s why I didn’t comment until now).

I personally like my logs 100% structured (except for Exceptions) and still be able to “comment” on events in plain English if I need to.

And I don’t see why comments/events should be special case on output (square brackets in this example). If you have an event called user_error, you can always add a key called error for another “symbol” or just an error_msg if you insist on English. When looking for a certain type of user_error, you simply write an AND clause in your logging software (Kibana or whatever). It’s pretty easy to keep *that* consistent across applications.

For example, *my* log would look like this:

event=user_error peer=127.0.0.1 error=pebkac

If the programmer in question hadn’t enough logging pain in their life to see that’s reasonable, they can always do:

event=user_error peer=127.0.0.1 error_msg='Problem exists between keyboard and chair.'

Still perfectly parseable, perfectly readable. And with {!r} easy to achieve. A nice API I would like to have be:

log('user_error', peer=self.transport.getPeer().host, error_msg='Problem exists between keyboard and chair.') – and log figures out itself if it needs to quote. I could also live with them all quoted, i.e.:

event='user_error' peer='127.0.0.1' error='pebkac'

to have less special cases.


I hope that makes some sense, the point I’m trying to make that events don’t need to be distinct by themselves. If you enforce that, you’re forcing structure on them which you could spread over multiple fields that are *much* more pleasant to parse.

Regards,
Hynek

P.S. For convenience, I usually write a log method in Twisted protocols that prepends the messages with state data, peer IP etc, but that JFTR.


From hs at ox.cx  Sat Jun 15 03:15:48 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Sat, 15 Jun 2013 11:15:48 +0200
Subject: [Twisted-Python] 13.1.0 and #6499
Message-ID: <18206C29-6863-4C48-9FEA-C7D1A660D477@ox.cx>

Hi,

#6499 (Teach chain certificates to SSL server endpoints string syntax) has been pronounced ready for merge but since I’m no committer, I can’t do that myself.

It would be *great* if it could be merged before Ashwini cuts the release branch!

Thanks & sorry for the noise,
—h


From glyph at twistedmatrix.com  Sat Jun 15 04:19:14 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 03:19:14 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
Message-ID: <1AB42AF0-F6C1-4E5F-A60B-DEA98CED9BAA@twistedmatrix.com>


On Jun 14, 2013, at 10:43 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I don't think it's worth coming up with some kind of GUID-based
> system, because I don't think anyone's going to go to the trouble to
> use it, and I think it basically offers no practical benefit over
> simple event names.

Here are the benefits over simple event names:

It's opaque, so as code moves around, it doesn't look dated or wrong.  Your 'system' argument looks a whole lot like a FQPN, but as you keep saying, code moves around a lot.  Having a *second* dotted identifier that looks a lot like the module name is going to look a lot like cruft to someone when it stops matching a module name, they're going to be motivated to "clean it up", and then the "cleaned up" version is going to break everyone's logging instrumentation.
Since UUIDs can be derived from other information, you can start off without one and add one later.  If you didn't feel like specifying one in the first place with your log messages, then you're stuck until the monitoring and application code that comes to some agreement.

My view of our present disagreement seems to come down to this: I believe that nobody is going to bother to do logging right in the first place (particularly, they are not going to take the time to specify or enumerate the types of events that are interesting that their system emits), and will only realize they need to extract interesting stuff from their logs later.  I think we need to provide the best possible support for the developer "later" (the opaque UUID they can associate with an API symbol) and the monitoring folks "now" (the derived UUID that they can use in place of a gross and broken-in-the-future regex).

This doesn't mean that the UUID magically makes monitoring always work in the future; developers can still change their format strings willy-nilly.  But, it at least provides a mechanism that they *could* use to avoid breakage if everyone believes it should be avoided.

I understand your point to be that you think that people should, and that they therefore will, go to the trouble to categorize every thing that gets logged as they're writing the logging stuff.

In support of my argument, I offer as evidence the unfortunate mess that is Twisted's current ad-hoc usage of logging, plus the existence of Splunk, a publicly-traded company whose whole reason for existing is that they can run regexes over poorly-structured logs to extract useful information and statistics from them :-).

To be fair, one element in support of your argument is that you managed to write a system that used this idiom and it worked well in practice.  I'm sure that it did, and I think it's a good thing for people to adopt.

My concern is that lots of useful log-worthy events are coming out of an open-source library that won't be exposed to the discipline that a particular team adopts for logging.

Finally, it's worth noting that GUID-based identifiers and textual, hierarchical identifiers are not mutually exclusive.  You can have log.info(log_guid="98185C94-57D7-439A-8206-1D4A2ACBD983", log_system="spaceships.combat.explosion") in a single event.  We could provide both tools to the developer, and they're not obliged to use either.

(I see you've written some other messages, so more forthcoming...)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130615/d2b1cfc8/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Jun 15 04:35:23 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 03:35:23 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
 <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
Message-ID: <4BC045AD-B0BB-4E45-BE70-E7345A9117B4@twistedmatrix.com>


On Jun 14, 2013, at 10:48 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> There's... a lot here. I'm overwhelmed by how complex this system
> would be, and I think that end users would be as well. I don't really
> want to put UUIDs into my source code, whether I type them or paste
> them, and I don't want to have to invoke command line tools to figure
> out what those UUIDs in order to be a good developer.

The system isn't really that complex at all.  It's calling uuid.uuid5 once, and it's even doing that internally in a utility function, so you don't need to understand what it's doing.

> I think there's basically no practical benefit over the hierarchical
> "system" + event-identifier system, where:

I tried to lay out the benefits in my other recent reply.

> 1. it's trivial to specify a hierarchical, easy-to-read "system" key that has a small-ish scope

The fact that you have to say "trivial" here suggests it's not actually trivial :).  I think that the amount of energy people initially put into logging is so low that they will often forget to do something like this.  But, even if they remember in the future, we have to deal with the plethora of messages already within Twisted, and every Twisted library, that *don't* do this.

> 2. you think of a unique event name in that small-ish scope and type it out.

How do you know that your event name is unique though, other than running 'grep'?

> I'm beginning to think #1 is the most important of all, but I think
> I'll continue to use event-names to describe all my log statements.

This might be a good practice anyway.

> As I said in my response to Wilfredo, I think it's really important to
> stop specifying the "system" for application code in Twisted. The
> application's code should not be considered a part of the HTTP
> protocol's system. There are also other problems with the way we use
> system, like putting extra random data like request ID in there.


The "system" that Twisted currently specifies is supposed to be the reactor event which caused a particular chunk of code to run.  This is not related to the subsystem within your application where the functionality that is logging is implemented (which, really, still sounds to me like "module name").  I think this could be quite useful, especially in systems where the same functionality is exposed over multiple protocols and disparate events could cause the same subsystem to eventually get called.

However, there are a ton of problems with the way that's implemented; I can't really argue with you here about the current implementation, because it's so poorly done that I think it's next to useless.  With Failure's extended "exception caught here" stacks, it doesn't provide any information other than the traceback.

However, I'd like to bring it back at some point, especially if we can figure out how to have the causality of an event.  Wouldn't it be fantastic to see a trace like this when something went wrong?

<SomeProtocol at 0xFFFF>.dataReceived
  called callLater(x)
  called callInThread(y)
  which called callFromThread(z)
  and that's why your code is running now


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130615/6e0f604b/attachment-0002.html>

From _ at lvh.io  Sat Jun 15 04:48:42 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sat, 15 Jun 2013 12:48:42 +0200
Subject: [Twisted-Python] 13.1.0 and #6499
In-Reply-To: <18206C29-6863-4C48-9FEA-C7D1A660D477@ox.cx>
References: <18206C29-6863-4C48-9FEA-C7D1A660D477@ox.cx>
Message-ID: <CAE_Hg6ZkTL6xZE+16SAL8kUSv_DU3HmcWT-k2F=7mfTKzsT3wA@mail.gmail.com>

This was resolved :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130615/1ca82d74/attachment-0002.html>

From p.mayers at imperial.ac.uk  Sat Jun 15 04:55:16 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 15 Jun 2013 11:55:16 +0100
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
 <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
Message-ID: <51BC4814.8080006@imperial.ac.uk>

On 06/15/2013 06:48 AM, Christopher Armstrong wrote:

> There's... a lot here. I'm overwhelmed by how complex this system
> would be, and I think that end users would be as well. I don't really
> want to put UUIDs into my source code, whether I type them or paste
> them, and I don't want to have to invoke command line tools to figure
> out what those UUIDs in order to be a good developer.

+1. I like the general idea of better logging via keyword args and an 
"id", but I strongly dislike the idea of using UUIDs as log message 
identifiers.

In fact, I'll go so far as to say I defintely wouldn't use such a 
system, and for Twisted to migrate to it would actually reduce the 
utility of the in-built logging, because I'd have to build and maintain 
something to translate Twisted log messages I cared about into whatever 
system I built to do my own logging :o(

> I think there's basically no practical benefit over the hierarchical
> "system" + event-identifier system, where:

+1. Hierarchial IDs also permit prefix-based wildcarding:

log.observe("twisted.factory.*")
log.exclude("twisted.factory.http.*")
log.observe("myapp.thing")
log.observe("txSomeProject.event.*")

Obviously this is just an example; I haven't put any real thought into it.

>
> 1. it's trivial to specify a hierarchical, easy-to-read "system" key
> that has a small-ish scope
> 2. you think of a unique event name in that small-ish scope and type it out.
>
> I'm beginning to think #1 is the most important of all, but I think
> I'll continue to use event-names to describe all my log statements.

I pretty much agree with all of this.



From glyph at twistedmatrix.com  Sat Jun 15 05:13:33 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 04:13:33 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <51BC4814.8080006@imperial.ac.uk>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
 <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
 <51BC4814.8080006@imperial.ac.uk>
Message-ID: <7E55CCC3-0847-4D8F-AE06-21FB1D48B4C8@twistedmatrix.com>


On Jun 15, 2013, at 3:55 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 06/15/2013 06:48 AM, Christopher Armstrong wrote:
> 
>> There's... a lot here. I'm overwhelmed by how complex this system
>> would be, and I think that end users would be as well. I don't really
>> want to put UUIDs into my source code, whether I type them or paste
>> them, and I don't want to have to invoke command line tools to figure
>> out what those UUIDs in order to be a good developer.
> 
> +1. I like the general idea of better logging via keyword args and an "id", but I strongly dislike the idea of using UUIDs as log message identifiers.
> 
> In fact, I'll go so far as to say I defintely wouldn't use such a system, and for Twisted to migrate to it would actually reduce the utility of the in-built logging, because I'd have to build and maintain something to translate Twisted log messages I cared about into whatever system I built to do my own logging :o(

I am really, really puzzled by this reaction.  I am wondering if you read my message carefully, or if I didn't express myself well.

If I were to implement the system that I have proposed, you could completely ignore it.  You could never deal with a UUID ever, and process logs based on whatever other attributes you like.  There's nothing to translate.  Unless when you say "translate" you mean translating the UUID of a currently ad-hoc message (one which doesn't specify or document its own unique attributes) which is something that would just be impossible without this feature.

The only overhead that you'd ever incur would be a single call per log event - probably per-process-lifetime, since the result could be cached - to uuid.uuid5, which is not exactly the most expensive function.  It would be called internally though; you wouldn't have to call it yourself or be aware that it was being called.

If you had the use-case that I believe many people do - which is to evolve a stable identifier for a previously ad-hoc log message - then you could do that.  Otherwise this wouldn't affect you.

What I've proposed with UUIDs is to identify *specific semantic events* that you might want to do monitoring/alerting on, which may move between systems.

Does this explanation make you feel less worried about the inclusion of such a feature?

>> I think there's basically no practical benefit over the hierarchical
>> "system" + event-identifier system, where:
> 
> +1. Hierarchial IDs also permit prefix-based wildcarding:
> 
> log.observe("twisted.factory.*")
> log.exclude("twisted.factory.http.*")
> log.observe("myapp.thing")
> log.observe("txSomeProject.event.*")

This is already implemented in <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py>; see for example setLogLevelForNamespace() <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py#L175>.

Namespaces are just python module names by default, but nothing requires that; the only requirement is that they're strings separated with dots.  You can instantiate a Logger object with whatever 'namespace' argument you want.

So: again, you can get what you want exactly and ignore the other stuff.

>> 1. it's trivial to specify a hierarchical, easy-to-read "system" key
>> that has a small-ish scope
>> 2. you think of a unique event name in that small-ish scope and type it out.
>> 
>> I'm beginning to think #1 is the most important of all, but I think
>> I'll continue to use event-names to describe all my log statements.
> 
> I pretty much agree with all of this.

I am still not seeing the utility of one of these identifiers beyond class/method name, but you can always just pass the namespace explicitly.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130615/34e490d3/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Jun 15 05:37:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 04:37:40 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
Message-ID: <E746C265-4D12-4423-B971-457E4FF261AD@twistedmatrix.com>


On Jun 14, 2013, at 11:18 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> This conversation has gotten pretty sprawling; time to reel it in with
> some code.
> 
> What do you think of this for an API that meets in the middle?
> 
> https://gist.github.com/radeex/5787124
> 
> This example implementation only concerns itself with the points under
> debate right now; obviously it's completely unusable in general. But
> anyway:
> 
> 1. it supports English logs
> 2. it doesn't require you to specify a formatting if you want to just
> log a bunch of data
> 3. it makes it easy to specify a system (both manually and based on
> the module your code is in)


First off, thanks again for taking the time to correspond about this, I'm very happy for this conversation to be attracting attention and making progress :).

Moving right along...

This code is relying on the semantics of the existing log.msg() call (which are bad, for the reasons I enumerated in the start of this thread), right down to the dependence on %-formatting.  The main thing I'm interested in at the moment is actually fixing those semantics to be more useful; the specific thing we're talking about here, persistent log identifiers, is interesting to me at the moment mostly as it relates to that.

I realize you might just be relying on it for familiarity, you might not have had time to read the whole new thing, so I'm not trying to tear down your idea based on that alone :).

But Wilfredo already implemented a thing which addresses the namespacing-of-log-messaages issue, and it does about 2/3 of what your proposal already does (except it has, like, tests and stuff).  Right down to the _getframe() hack (although  <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py#L312> uses inspect.currentframe() which has a public-sounding name at least :)).  As I mentioned in my immediately-previous reply, the logger's 'namespace' does not need to be the same as your module name, so it can be a "more persistent" identifier if you have one.

More significantly, you're actually going to the trouble of constructing a format string.  This produces output in an ad-hoc format: '='-separated str()s of your log keys (although only the ones you pass directly in your message; those annotating or augmenting the message at subsequent points by other publishers / observers are ignored), which you are presumably relying upon being smooshed into a plain-text log file, right along side many other messages which do not fit this format.  Presumably this could lead to issues like traceback lines with '=' assignments in them showing up in whatever kind of ad-hoc log-analysis you want to do later, and ambiguous unparseable results if any fields in the log message have a '=' and a space in their repr.

Let's not make it the responsibility of the emitter, or the format string, to get those values into a text log file that can be scanned with a regex (albeit in the case of your proposal, a much-simplified regex).  Let's push that responsibility down into the log observer, and actually save it as structured data and *parse* it later.

As all the hip young kids will tell you, this type of data should be persisted with JSON, but we should probably have code to support multiple formats.  Another advantage of serializing and parsing the logs as structured data would allow tools written to work on a "live" log observer to also analyze persistent logs in at least a similar way, if not entirely the same way.

(An object that has survived the grim ordeal of translation to and from JSON will surely be made less by the process, and can't be treated quite the same way by a log observer; but, as I'm sure you'll agree, this is probably better than the alternative of Pickle.  An unpickled object will be brought fully back to life, but, in the words of the recent NIN release, it will have "came back haunted".)

Maybe we could even do a SQLite observer.  Honestly I'm not sure which format is best.

Since it's also important to be able to *filter* logs, and avoid the work of formatting or serializing them at all, it would be best to push this work as far down the line as possible.  The construction of the format string is itself a whole ton of string-copying, the sort of thing I'd really like to avoid.  (Last I measured, dictionary operations that don't cause a reallocation - and most don't, unless you're inserting in a long loop - are cheaper than even apparently small string copies.)

In fact, it strikes me that perhaps *this* is the feature we should be talking about implementing: writing a structured log observer and parser, firming up the contract between emitters and observers so it's clear what to do with data that can't be serialized - more than exactly which fields we use to identify messages that are interesting to us.

Relatedly, we could make log analysis a first-class task; instead of assuming someone will grep the log file later, actually provide a simple log-query tool that users can plug their code into, presuming they're using a log format which is cleanly parseable.  Maybe have a little web resource that serves up nicely formatted views of your logs.

I can implement the UUID thing as a completely separate ticket and we can discuss it on its own merits; meanwhile, you can happily add log IDs to everything in your applications.  I'd be quite happy to table this part of the conversation for a separate ticket; I just thought it would be a nice thing that could fall out of some of the other parts of a new logging system.


-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130615/e3f97758/attachment-0002.html>

From p.mayers at imperial.ac.uk  Sat Jun 15 06:28:06 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 15 Jun 2013 13:28:06 +0100
Subject: [Twisted-Python] logging
In-Reply-To: <7E55CCC3-0847-4D8F-AE06-21FB1D48B4C8@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
 <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
 <51BC4814.8080006@imperial.ac.uk>
 <7E55CCC3-0847-4D8F-AE06-21FB1D48B4C8@twistedmatrix.com>
Message-ID: <51BC5DD6.9040800@imperial.ac.uk>

On 06/15/2013 12:13 PM, Glyph wrote:

> I am really, really puzzled by this reaction.  I am wondering if you
> read my message carefully, or if I didn't express myself well.

Careful re-reading of the very last bit of your message suggests I may 
have misunderstood.

I think I understand the "final" stage, and in that situation the UUID 
is invisible, correct? It's hidden behind the declaration of a "log 
event" object which can be called to emit or observe said events. That 
seems fine, though I'm not sure what the UUID *does* in that situation - 
route/match is via python object access, no?

I *think* I now understand the intermediate stage, where the log events 
are emitted by old code, and observed by UUID. You're suggesting 
calculating the UUID from the module name and static data (format 
string). I guess that's no worse than any other solution - until the log 
emitter is converted to a newer/better API, there's no great way to 
observe it.

Before we proceed, can you confirm I've understood your proposal correctly?



From radix at twistedmatrix.com  Sat Jun 15 09:33:25 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 10:33:25 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <7FDD43C4-4456-4ED3-9F7F-EF14FC34EB44@ox.cx>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
 <7FDD43C4-4456-4ED3-9F7F-EF14FC34EB44@ox.cx>
Message-ID: <CAPkRfUSzhxZ4BHwUWE96-Y2n9JKmd+QfMjQa4yfdruXtu_EtDA@mail.gmail.com>

On Sat, Jun 15, 2013 at 2:18 AM, Hynek Schlawack <hs at ox.cx> wrote:
>
> Am 15.06.2013 um 08:18 schrieb Christopher Armstrong <radix at twistedmatrix.com>:
>> What do you think of this for an API that meets in the middle?
>>
>> https://gist.github.com/radeex/5787124
>>
>> This example implementation only concerns itself with the points under
>> debate right now; obviously it's completely unusable in general. But
>> anyway:
>>
>> 1. it supports English logs
>> 2. it doesn't require you to specify a formatting if you want to just
>> log a bunch of data
>> 3. it makes it easy to specify a system (both manually and based on
>> the module your code is in)
>
> I’ve held back from this discussion so far because it seemed to me that I always missed some part of the discussion to fully understand what you’re all talking about. I would like to comment on this concrete proposal though before I hold my peace forever. (NB I’m not replying just to Christopher but try to address everything I saw on the thread so far – I like most of his proposal.)
>
> I find that there’s some kind of false dichotomy brought up in this discussion and API and output are somewhat muddled together a bit (maybe I’m just misunderstanding though – that’s why I didn’t comment until now).

You're right. I didn't make a strong enough point about the fact that
the output formatting isn't important, but I assumed everyone already
knew that. I should have been more clear.


> I personally like my logs 100% structured (except for Exceptions) and still be able to “comment” on events in plain English if I need to.
>
> And I don’t see why comments/events should be special case on output (square brackets in this example). If you have an event called user_error, you can always add a key called error for another “symbol” or just an error_msg if you insist on English. When looking for a certain type of user_error, you simply write an AND clause in your logging software (Kibana or whatever). It’s pretty easy to keep *that* consistent across applications.
>
> For example, *my* log would look like this:
>
> event=user_error peer=127.0.0.1 error=pebkac

The special formatting in the example I gave was only intended for the
dumb file-based format. I thought it was just a nice touch on the spur
of the moment. In practice, I would use this for local logging, but
then set up a log observer that passed raw key/value data to my real
log aggregation/storage/filtering system. I'm making a distinction
between what we show our users (in a twistd.log file) and what we give
to our automated systems (sent over network protocols to logging
systems).

> If the programmer in question hadn’t enough logging pain in their life to see that’s reasonable, they can always do:
>
> event=user_error peer=127.0.0.1 error_msg='Problem exists between keyboard and chair.'
>
> Still perfectly parseable, perfectly readable. And with {!r} easy to achieve. A nice API I would like to have be:
>
> log('user_error', peer=self.transport.getPeer().host, error_msg='Problem exists between keyboard and chair.') – and log figures out itself if it needs to quote. I could also live with them all quoted, i.e.:
>
> event='user_error' peer='127.0.0.1' error='pebkac'
>
> to have less special cases.

It sounds like you're arguing that the human-readable *.log format
should be closer to the simple key/value representation that we use
underneath.

Would you also argue that instead of having a log line that looks like:

2013-06-15 10:24:21-0500 [-] Server Shut Down.

We should actually format them (in twistd.log) like this?

time=1371331461.0 system='-' msg='Server Shut Down.'

> I hope that makes some sense, the point I’m trying to make that events don’t need to be distinct by themselves. If you enforce that, you’re forcing structure on them which you could spread over multiple fields that are *much* more pleasant to parse.

So, if I had my own way, "event" would be a required argument to the
log() function in my example, so that the only thing I'm forcing on
the structure of a log message is that you *have* an event argument.

But I'm pretty sure that's not going to fly. :-) So the only reason I
wanted to support "event" in a special way in my example is to
emphasize and encourage its use.

> Hynek


--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From radix at twistedmatrix.com  Sat Jun 15 09:46:07 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 10:46:07 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <E746C265-4D12-4423-B971-457E4FF261AD@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
 <E746C265-4D12-4423-B971-457E4FF261AD@twistedmatrix.com>
Message-ID: <CAPkRfUSckcgzeCVr+WN6cGzA-OLGHeSf5PFgs+tdy+J2UrjivA@mail.gmail.com>

On Sat, Jun 15, 2013 at 6:37 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Jun 14, 2013, at 11:18 PM, Christopher Armstrong
> <radix at twistedmatrix.com> wrote:
>
> This conversation has gotten pretty sprawling; time to reel it in with
> some code.
>
> What do you think of this for an API that meets in the middle?
>
> https://gist.github.com/radeex/5787124
>
> This example implementation only concerns itself with the points under
> debate right now; obviously it's completely unusable in general. But
> anyway:
>
> 1. it supports English logs
> 2. it doesn't require you to specify a formatting if you want to just
> log a bunch of data
> 3. it makes it easy to specify a system (both manually and based on
> the module your code is in)
>
>
> First off, thanks again for taking the time to correspond about this, I'm
> very happy for this conversation to be attracting attention and making
> progress :).
>
> Moving right along...
>
> This code is relying on the semantics of the existing log.msg() call (which
> are bad, for the reasons I enumerated in the start of this thread), right
> down to the dependence on %-formatting.  The main thing I'm interested in at
> the moment is actually fixing those semantics to be more useful; the
> specific thing we're talking about here, persistent log identifiers, is
> interesting to me at the moment mostly as it relates to that.
>
> I realize you might just be relying on it for familiarity, you might not
> have had time to read the whole new thing, so I'm not trying to tear down
> your idea based on that alone :).

Yeah... I feel like a lot of the things you say in this email aren't
related to the point I was trying to get across, which was the
interface and effect, not the implementation of it.


>
> But Wilfredo already implemented a thing which addresses the
> namespacing-of-log-messaages issue, and it does about 2/3 of what your
> proposal already does (except it has, like, tests and stuff).  Right down to
> the _getframe() hack (although
> <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py#L312>
> uses inspect.currentframe() which has a public-sounding name at least :)).
> As I mentioned in my immediately-previous reply, the logger's 'namespace'
> does not need to be the same as your module name, so it can be a "more
> persistent" identifier if you have one.
>
> More significantly, you're actually going to the trouble of constructing a
> format string.  This produces output in an ad-hoc format: '='-separated
> str()s of your log keys (although only the ones you pass directly in your
> message; those annotating or augmenting the message at subsequent points by
> other publishers / observers are ignored), which you are presumably relying
> upon being smooshed into a plain-text log file, right along side many other
> messages which do not fit this format.  Presumably this could lead to issues
> like traceback lines with '=' assignments in them showing up in whatever
> kind of ad-hoc log-analysis you want to do later, and ambiguous unparseable
> results if any fields in the log message have a '=' and a space in their
> repr.
>
> Let's not make it the responsibility of the emitter, or the format string,
> to get those values into a text log file that can be scanned with a regex
> (albeit in the case of your proposal, a much-simplified regex).  Let's push
> that responsibility down into the log observer, and actually save it as
> structured data and *parse* it later.
>
> As all the hip young kids will tell you, this type of data should be
> persisted with JSON, but we should probably have code to support multiple
> formats.  Another advantage of serializing and parsing the logs as
> structured data would allow tools written to work on a "live" log observer
> to also analyze persistent logs in at least a similar way, if not entirely
> the same way.
>
> (An object that has survived the grim ordeal of translation to and from JSON
> will surely be made less by the process, and can't be treated quite the same
> way by a log observer; but, as I'm sure you'll agree, this is probably
> better than the alternative of Pickle.  An unpickled object will be brought
> fully back to life, but, in the words of the recent NIN release, it will
> have "came back haunted".)
>
> Maybe we could even do a SQLite observer.  Honestly I'm not sure which
> format is best.

So, I responded to Hynek about this confusion already, so I'll let you
read that. I have always assumed that twistd.log would continue to be
vaguely human-readable, with special formatting for several of the
keys. I also assume that developers will be able to hook up additional
observers to save out .concatenated-json files, or stream to some
network protocol, or whatever. The little bit of formatting my example
does is just a minor convenience for the people still logging at
twistd.log files. The arguments you're making now sounds ilke you want
to et rid of that ad-hoc formatting; is that true? So, instead of


2013-06-15 10:24:21-0500 [-] Server Shut Down.

we should have this?

time=1371331461.0 system='-' msg='Server Shut Down.'

> Since it's also important to be able to *filter* logs, and avoid the work of
> formatting or serializing them at all, it would be best to push this work as
> far down the line as possible.  The construction of the format string is
> itself a whole ton of string-copying, the sort of thing I'd really like to
> avoid.  (Last I measured, dictionary operations that don't cause a
> reallocation - and most don't, unless you're inserting in a long loop - are
> cheaper than even apparently small string copies.)
>
> In fact, it strikes me that perhaps *this* is the feature we should be
> talking about implementing: writing a structured log observer and parser,
> firming up the contract between emitters and observers so it's clear what to
> do with data that can't be serialized - more than exactly which fields we
> use to identify messages that are interesting to us.
>
> Relatedly, we could make log analysis a first-class task; instead of
> assuming someone will grep the log file later, actually provide a simple
> log-query tool that users can plug their code into, presuming they're using
> a log format which is cleanly parseable.  Maybe have a little web resource
> that serves up nicely formatted views of your logs.
>
> I can implement the UUID thing as a completely separate ticket and we can
> discuss it on its own merits; meanwhile, you can happily add log IDs to
> everything in your applications.  I'd be quite happy to table this part of
> the conversation for a separate ticket; I just thought it would be a nice
> thing that could fall out of some of the other parts of a new logging
> system.

Yeah, I'm sorry that this has gotten so much scope-creep. I'll
reiterate that I think redoing what I've been speaking about as the
"system" key is most important (but maybe it should be called
something other than "system", since you've clarified what its intent
was in another email).

--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From radix at twistedmatrix.com  Sat Jun 15 10:09:19 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 11:09:19 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
Message-ID: <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>

On Thu, Jun 13, 2013 at 5:14 PM, Glyph <glyph at twistedmatrix.com> wrote:
> Hello everybody. Today I'd like to talk about everyone's favorite subsystem
> within Twisted: logging.
>
> There are a number of problems with Twisted's logging system.
>
> The general theme of these problems is that Twisted log system was designed
> with some intended use-cases in mind, but its implementation was stopped
> halfway through and none of those use-cases were really well satisfied.
>
> At various conferences, and in person at various times, we've gotten
> together to express frustration at the logging system, but I don't think
> that the problems with it have ever been really thoroughly written down.
>
> Wilfredo has been working on logging here:
> http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py.
> This began as an attempt to just address some issues with our own logging
> wrappers, but has been growing into a design that is more fully capable of
> replacing logging within Twisted wholesale. I hope one of us can contribute
> it to Twisted soon, but in the meanwhile, please feel free to provide
> feedback - hopefully if some people can provide a bit of informal feedback
> now, the formal review process can be shorter and more pleasant :).

I like it. Let's merge it.


--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From radix at twistedmatrix.com  Sat Jun 15 10:17:10 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 11:17:10 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>
Message-ID: <CAPkRfUSyw8nEJb6cuQc-tSo-GC4MdXve9BTAdBQO3fnjwv73RA@mail.gmail.com>

On Sat, Jun 15, 2013 at 11:09 AM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> On Thu, Jun 13, 2013 at 5:14 PM, Glyph <glyph at twistedmatrix.com> wrote:
>> Hello everybody. Today I'd like to talk about everyone's favorite subsystem
>> within Twisted: logging.
>>
>> There are a number of problems with Twisted's logging system.
>>
>> The general theme of these problems is that Twisted log system was designed
>> with some intended use-cases in mind, but its implementation was stopped
>> halfway through and none of those use-cases were really well satisfied.
>>
>> At various conferences, and in person at various times, we've gotten
>> together to express frustration at the logging system, but I don't think
>> that the problems with it have ever been really thoroughly written down.
>>
>> Wilfredo has been working on logging here:
>> http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/python/log.py.
>> This began as an attempt to just address some issues with our own logging
>> wrappers, but has been growing into a design that is more fully capable of
>> replacing logging within Twisted wholesale. I hope one of us can contribute
>> it to Twisted soon, but in the meanwhile, please feel free to provide
>> feedback - hopefully if some people can provide a bit of informal feedback
>> now, the formal review process can be shorter and more pleasant :).
>
> I like it. Let's merge it.


I think I would just want one more feature:

>>> Logger().emit(dudelog.LogLevel.warn, a="hi")

Right now, this doesn't spit out anything into my log file, with
default observers. I want it to emit some simple representation of the
keys and values.

On the other hand, the same is true of log.msg(a="hi"), but maybe this
should be implemented (somehow) in Logger() codepath to avoid breaking
compatibility?


--
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From glyph at twistedmatrix.com  Sat Jun 15 20:03:33 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 19:03:33 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <51BC5DD6.9040800@imperial.ac.uk>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUQym_zQgdiqffjWnm1Gxh0kRBPw=AUDcK21XuPCKaBsbg@mail.gmail.com>
 <CE6E33D3-ACF9-43D7-B234-6AFBAFBE0FE6@twistedmatrix.com>
 <5DBF03B4-6FF3-42E1-95E2-15861877AB34@twistedmatrix.com>
 <CAPkRfUTB8E+XwCai-D=2XcENuutf7AEp-h2zoG7wbvO_B28wmQ@mail.gmail.com>
 <51BC4814.8080006@imperial.ac.uk>
 <7E55CCC3-0847-4D8F-AE06-21FB1D48B4C8@twistedmatrix.com>
 <51BC5DD6.9040800@imperial.ac.uk>
Message-ID: <76853093-1060-493F-8D0B-DFF510EAE1D3@twistedmatrix.com>


On Jun 15, 2013, at 5:28 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 06/15/2013 12:13 PM, Glyph wrote:
> 
>> I am really, really puzzled by this reaction.  I am wondering if you
>> read my message carefully, or if I didn't express myself well.
> 
> Careful re-reading of the very last bit of your message suggests I may have misunderstood.

OK, whew :).

> I think I understand the "final" stage, and in that situation the UUID is invisible, correct? It's hidden behind the declaration of a "log event" object which can be called to emit or observe said events.

That's right.

> That seems fine, though I'm not sure what the UUID *does* in that situation - route/match is via python object access, no?

What it does is it allows *older* monitoring scripts to work.  It also holds on to the UUID internally so that if, for example, the module's name is changed in the future, the API name can be re-named and code can be pointed at it via the normal deprecate/redirect mechanism.  (Of course, _any_ sort of explicit / unique identifier would work for this latter use-case; it's just that this one has the benefit of not visibly containing the string that has now been changed, and so there's no long-term impulse to "clean it up" further and thus break stuff.)

> I *think* I now understand the intermediate stage, where the log events are emitted by old code, and observed by UUID. You're suggesting calculating the UUID from the module name and static data (format string). I guess that's no worse than any other solution - until the log emitter is converted to a newer/better API, there's no great way to observe it.

> Before we proceed, can you confirm I've understood your proposal correctly?

Sounds like you've got it just about right now.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130615/67290cbb/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Jun 15 20:17:11 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 19:17:11 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUSzhxZ4BHwUWE96-Y2n9JKmd+QfMjQa4yfdruXtu_EtDA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
 <7FDD43C4-4456-4ED3-9F7F-EF14FC34EB44@ox.cx>
 <CAPkRfUSzhxZ4BHwUWE96-Y2n9JKmd+QfMjQa4yfdruXtu_EtDA@mail.gmail.com>
Message-ID: <90249514-A365-418C-8A67-D1B862629B57@twistedmatrix.com>


On Jun 15, 2013, at 8:33 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> It sounds like you're arguing that the human-readable *.log format
> should be closer to the simple key/value representation that we use
> underneath.
> 
> Would you also argue that instead of having a log line that looks like:
> 
> 2013-06-15 10:24:21-0500 [-] Server Shut Down.
> 
> We should actually format them (in twistd.log) like this?
> 
> time=1371331461.0 system='-' msg='Server Shut Down.'


I'm actually arguing that, in the log *file* it should look like this:

{"log_format": "{service} service shut down.", "log_system": "-", "log_time": 1371331461.0, "service": "dns"}

When a human actually reads it (with, as a straw man, 'python -m twisted.python.log read twistd.log.json'), I'd rather it still read somewhat like the above starting '2013...': except, for example, with the time translated into their local timezone (or the timezone of the computer where they're reading the logs, at least).

But I'm not saying that we should change the default twistd.log format for now; I'm sure there's tons of tooling built up around the ad-hoc text-based nature of it as it is and I wouldn't want to break that.  I'm just saying that we should add additional options for logging to things other than plain text files, and those are the things that we should build tools to get information back out of.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130615/bff001f4/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Jun 15 20:24:22 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 19:24:22 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUSckcgzeCVr+WN6cGzA-OLGHeSf5PFgs+tdy+J2UrjivA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAM09pzRiHy_qbYsUJ=bXpYxtg2eFqkYBEvprtfx+yh+RN8AYMw@mail.gmail.com>
 <CALWnh8pEkTodTUj6-1bwegrz_-OSnSLHDoXHWQ8naW9DWa9tDg@mail.gmail.com>
 <CAPkRfURjbkcCk77ammk+utjXHg07XL5_Ot714+7Ukqkqd5KYtg@mail.gmail.com>
 <20130614214756.5484.127165603.divmod.xquotient.50@top>
 <CAPkRfURAGEmtQKu9AFKCXLX95iVU2ejjynDFPQkGzahtUvQDPA@mail.gmail.com>
 <CAPkRfUTuhfZoeUzvHmWYUeOC1YebW_1sG_xYKWFKUxbbYEPGog@mail.gmail.com>
 <51BBA55A.60306@wsanchez.net>
 <CAPkRfUSiMf2s5w+Sz9tA_QmU6YaqodMS9+oGVzWc_6g=rqg+jQ@mail.gmail.com>
 <CAPkRfUQw6D208qRYTTbty1uBjzQgEb+cZMEgVeJ8z3s5zN1ybA@mail.gmail.com>
 <E746C265-4D12-4423-B971-457E4FF261AD@twistedmatrix.com>
 <CAPkRfUSckcgzeCVr+WN6cGzA-OLGHeSf5PFgs+tdy+J2UrjivA@mail.gmail.com>
Message-ID: <839B5674-3302-41F6-ABD8-529C3D1695C6@twistedmatrix.com>


On Jun 15, 2013, at 8:46 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> Yeah... I feel like a lot of the things you say in this email aren't
> related to the point I was trying to get across, which was the
> interface and effect, not the implementation of it.

Even if it's not really what you'd intended, I think it's pretty good to keep discussing these issues (avoiding unnecessary formatting, putting the right responsibilities in the right place).

> I also assume that developers will be able to hook up additional
> observers to save out .concatenated-json files, or stream to some
> network protocol, or whatever. 

To reiterate a little from my previous reply, I think we should be, as much as possible, moving to make that the default.  Now, actually making it the default is a pretty disruptive change, but I think we could get as far as "implement the feature at all" before anyone would start complaining ;).

In other words, every developer should not have to realize they should write a JSON(ish) emitter and figure out how to get that to work on their own; we should just provide one that does the right thing.

To dial this back to what we actually need to talk about in the proposed log system, the issue is mostly to do with 

>> I can implement the UUID thing as a completely separate ticket and we can
>> discuss it on its own merits; meanwhile, you can happily add log IDs to
>> everything in your applications.  I'd be quite happy to table this part of
>> the conversation for a separate ticket; I just thought it would be a nice
>> thing that could fall out of some of the other parts of a new logging
>> system.
> 
> Yeah, I'm sorry that this has gotten so much scope-creep.

No problem.  This is all good stuff to talk about; we don't discuss operational concerns of managing Twisted services (either server *or* client side) nearly often enough on this list.  I wish we had more discussions like this!

> I'll reiterate that I think redoing what I've been speaking about as the
> "system" key is most important (but maybe it should be called
> something other than "system", since you've clarified what its intent
> was in another email).


Well, "system" was a pretty horrible name for the thing satisfying that intent.  We have "log_namespace" in the new logging system, and I think that (in combination with an idiomatic "log_id", that only needs to be unique within that namespace) you could get more or less what you want.

I think we're going to drop the "system" key entirely (except in the contexts where it's required for compatibility, of course).  Jean-Paul's recent comment in the quote file is apropos.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130615/93a60515/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Jun 15 20:38:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 15 Jun 2013 19:38:31 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <CAPkRfUSyw8nEJb6cuQc-tSo-GC4MdXve9BTAdBQO3fnjwv73RA@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>
 <CAPkRfUSyw8nEJb6cuQc-tSo-GC4MdXve9BTAdBQO3fnjwv73RA@mail.gmail.com>
Message-ID: <668905ED-ECA7-4CF9-94D2-5D4B910FD854@twistedmatrix.com>


On Jun 15, 2013, at 9:17 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I think I would just want one more feature:
> 
>>>> Logger().emit(dudelog.LogLevel.warn, a="hi")
> 
> Right now, this doesn't spit out anything into my log file, with
> default observers. I want it to emit some simple representation of the
> keys and values.
> 
> On the other hand, the same is true of log.msg(a="hi"), but maybe this
> should be implemented (somehow) in Logger() codepath to avoid breaking
> compatibility?

I keep going back and forth on this.

On the one hand, the main thing I want to do is to just say "if you want your message to appear in the log file, let's just implement a structured log file and you can read it from there.  If you have no human-readable format string to explain your message, clearly you didn't intend for a human to read it."

On the other hand, we already implement log filtering, so filtering the message out of the log based on the absence of the format string is a little overloaded.  And we should really be encouraging people to populate messages with useful structured data.

(I was going to say that without a format string I couldn't have my stand-in UUID feature, but then I realized that namespace + set of keys is probably good enough to generate that too, so never mind.  Also it seems like I'm the only one who likes that feature so maybe it doesn't matter!)

How would you feel about a special token that you have to pass explicitly?

Logger().warn(ALL_KEYS, a="hi")

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130615/93f902cb/attachment-0002.html>

From radix at twistedmatrix.com  Sat Jun 15 22:56:37 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 Jun 2013 23:56:37 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <668905ED-ECA7-4CF9-94D2-5D4B910FD854@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>
 <CAPkRfUSyw8nEJb6cuQc-tSo-GC4MdXve9BTAdBQO3fnjwv73RA@mail.gmail.com>
 <668905ED-ECA7-4CF9-94D2-5D4B910FD854@twistedmatrix.com>
Message-ID: <CAPkRfUQHYMR6NY0i7E+H4beOD_CTQR3bXx=dRLQ1QRADTC1DUQ@mail.gmail.com>

On Sat, Jun 15, 2013 at 9:38 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 15, 2013, at 9:17 AM, Christopher Armstrong <
> radix at twistedmatrix.com> wrote:
>
> I think I would just want one more feature:
>
> Logger().emit(dudelog.LogLevel.warn, a="hi")
>
>
> Right now, this doesn't spit out anything into my log file, with
> default observers. I want it to emit some simple representation of the
> keys and values.
>
> On the other hand, the same is true of log.msg(a="hi"), but maybe this
> should be implemented (somehow) in Logger() codepath to avoid breaking
> compatibility?
>
>
> I keep going back and forth on this.
>
> On the one hand, the main thing I want to do is to just say "if you want
> your message to appear in the log file, let's just implement a structured
> log file and you can read it from there.  If you have no human-readable
> format string to explain your message, clearly you didn't intend for a
> human to read it."
>
> On the other hand, we already implement log filtering, so filtering the
> message out of the log based on the absence of the format string is a
> little overloaded.  And we should really be encouraging people to populate
> messages with useful structured data.
>
> (I was going to say that without a format string I couldn't have my
> stand-in UUID feature, but then I realized that namespace + set of keys is
> probably good enough to generate that too, so never mind.  Also it seems
> like I'm the only one who likes that feature so maybe it doesn't matter!)
>
> How would you feel about a special token that you have to pass explicitly?
>
> Logger().warn(ALL_KEYS, a="hi")
>
>
I'm not wild about the need for an extra constant I'd have to import, but
I'd like to understand why you think the arbitrary keys shouldn't be
included in the message. Can you elaborate on why?


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130615/345f4ab7/attachment-0002.html>

From mithrandi at mithrandi.net  Sun Jun 16 10:58:11 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 16 Jun 2013 18:58:11 +0200
Subject: [Twisted-Python] logging
In-Reply-To: <668905ED-ECA7-4CF9-94D2-5D4B910FD854@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <CAPkRfUS0G07wYoPmvJw2XyssUdFuryV5aoS3U0jfXLQHHhSu2w@mail.gmail.com>
 <CAPkRfUSyw8nEJb6cuQc-tSo-GC4MdXve9BTAdBQO3fnjwv73RA@mail.gmail.com>
 <668905ED-ECA7-4CF9-94D2-5D4B910FD854@twistedmatrix.com>
Message-ID: <CAMcKhMS47QfJMxWXN=aS_0rxHNYic6V2s1FNgNtMyii5khmJWg@mail.gmail.com>

On Sun, Jun 16, 2013 at 4:38 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> (I was going to say that without a format string I couldn't have my
> stand-in UUID feature, but then I realized that namespace + set of keys is
> probably good enough to generate that too, so never mind.  Also it seems
> like I'm the only one who likes that feature so maybe it doesn't matter!)
>

I don't have anything useful to contribute at the moment, but you can add
me to the list of people who like that feature.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130616/78d9fdef/attachment-0002.html>

From ashfall at twistedmatrix.com  Mon Jun 17 09:39:13 2013
From: ashfall at twistedmatrix.com (Ashwini Oruganti)
Date: Mon, 17 Jun 2013 21:09:13 +0530
Subject: [Twisted-Python] Twisted 13.1.0pre1 is here!
Message-ID: <CAMFCZ-1N+2UrcDAhvwRhELTmsimBohxXKMfzUDsqCttvSLangA@mail.gmail.com>

Hi everyone,

I'm pleased to announce that the pre-release for the upcoming Twisted 13.1
is now available!

You can download the tarballs here:

    http://twistedmatrix.com/~ashfall/13.1.0pre1/

Highlights for this release include:

  * trial now has an --exitfirst flag which stops the test run after the
first error or failure.

  * twisted.internet.ssl.CertificateOptions now supports chain certificates.

  * twisted.conch.endpoints.SSHCommandClientEndpoint is a new
IStreamClientEndpoint which supports
    connecting a protocol to the stdio of a command running on a remote
host via an SSH connection.

  * twisted.web.xmlrpc.QueryProtocol now generates valid Authorization
headers for long user names
    and passwords.

  * self.transport.resumeProducing() will no longer raise an AssertionError
if called after
    self.transport.loseConnection()

For the complete list, see the NEWS file.

Please download the tarballs and test them!

-Ashwini
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130617/fbc08253/attachment-0002.html>

From kevin.horn at gmail.com  Mon Jun 17 12:57:13 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 17 Jun 2013 13:57:13 -0500
Subject: [Twisted-Python] Twisted 13.1.0pre1 is here!
In-Reply-To: <CAMFCZ-1N+2UrcDAhvwRhELTmsimBohxXKMfzUDsqCttvSLangA@mail.gmail.com>
References: <CAMFCZ-1N+2UrcDAhvwRhELTmsimBohxXKMfzUDsqCttvSLangA@mail.gmail.com>
Message-ID: <CA+U=zK0WsJNdpVPdcNjTqLWxwDOX14f48hB3oEEsNyDe68+BXg@mail.gmail.com>

<happydance>


On Mon, Jun 17, 2013 at 10:39 AM, Ashwini Oruganti <
ashfall at twistedmatrix.com> wrote:

> Hi everyone,
>
> I'm pleased to announce that the pre-release for the upcoming Twisted 13.1
> is now available!
>
> You can download the tarballs here:
>
>     http://twistedmatrix.com/~ashfall/13.1.0pre1/
>
> Highlights for this release include:
>
>   * trial now has an --exitfirst flag which stops the test run after the
> first error or failure.
>
>   * twisted.internet.ssl.CertificateOptions now supports chain
> certificates.
>
>   * twisted.conch.endpoints.SSHCommandClientEndpoint is a new
> IStreamClientEndpoint which supports
>     connecting a protocol to the stdio of a command running on a remote
> host via an SSH connection.
>
>   * twisted.web.xmlrpc.QueryProtocol now generates valid Authorization
> headers for long user names
>     and passwords.
>
>   * self.transport.resumeProducing() will no longer raise an
> AssertionError if called after
>     self.transport.loseConnection()
>
> For the complete list, see the NEWS file.
>
> Please download the tarballs and test them!
>
> -Ashwini
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130617/d943771f/attachment-0002.html>

From foom at fuhm.net  Mon Jun 17 18:48:03 2013
From: foom at fuhm.net (James Y Knight)
Date: Mon, 17 Jun 2013 20:48:03 -0400
Subject: [Twisted-Python] logging
In-Reply-To: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
Message-ID: <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>

I'm surprised that a thread with 32 messages about logging doesn't seem to have once mentioned windows events, osx structured syslog, or systemd journal as important design points. 

Maybe people are thinking about such things in the background but it looks a lot like this is being designed in a vacuum when there's plenty of air around.

And, no sane sysadmin should ever want a twisted-specific log file format or to write custom python log filters. That's crazy. Gimme a verbosity knob and the ability to emit structured log events to existing systems, with a fallback plain text file format. Great.

The prime goal, it seems to me, should be exposing features useful for facilities present in existing log systems.

And having a logging system which doesn't even support a basic log level is just silly. Hopefully the new system can at least have that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130617/a9b42ad8/attachment-0002.html>

From radix at twistedmatrix.com  Mon Jun 17 21:02:15 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 17 Jun 2013 22:02:15 -0500
Subject: [Twisted-Python] logging
In-Reply-To: <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
Message-ID: <CAPkRfURDfa+rYS6FeJn1w4RuOskicXQaJjFg9V-U078wiNftqg@mail.gmail.com>

On Mon, Jun 17, 2013 at 7:48 PM, James Y Knight <foom at fuhm.net> wrote:

> I'm surprised that a thread with 32 messages about logging doesn't seem to
> have once mentioned windows events, osx structured syslog, or systemd
> journal as important design points.
>
> Maybe people are thinking about such things in the background but it looks
> a lot like this is being designed in a vacuum when there's plenty of air
> around.
>
> And, no sane sysadmin should ever want a twisted-specific log file format
> or to write custom python log filters. That's crazy. Gimme a verbosity knob
> and the ability to emit structured log events to existing systems, with a
> fallback plain text file format. Great.
>
> The prime goal, it seems to me, should be exposing features useful for
> facilities present in existing log systems.
>
> And having a logging system which doesn't even support a basic log level
> is just silly. Hopefully the new system can at least have that.
>
>
The proposed logging module does include levels.

Also, I have definitely been thinking of real logging systems during this
conversation -- in fact, I've been planning on experimenting with some of
the popular *structured* logging systems these days and I plan on
implementing and contributing log observers for them. I do think the "json
file" log format is pretty pointless, though it might be a nifty exercise
(unless there is some structured log aggregation system that reads json
data from disk files?)

I think your accusations of design in a vacuum are too hasty and
inflammatory. The whole reason I'm so interested in this discussion is to
take advantage of *real* logging systems that can aggregate, filter, and
search lots of log streams, based on structured event streams.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130617/42579056/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jun 17 21:50:37 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 17 Jun 2013 20:50:37 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
Message-ID: <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>

On Jun 17, 2013, at 5:48 PM, James Y Knight <foom at fuhm.net> wrote:

> I'm surprised that a thread with 32 messages about logging doesn't seem to have once mentioned windows events, osx structured syslog, or systemd journal as important design points. 

As it happens I was discussing exactly that!  In a sense, they're just observers, and it's just a matter of persisting whatever fields are present to the various backend systems.

> Maybe people are thinking about such things in the background but it looks a lot like this is being designed in a vacuum when there's plenty of air around.

So yes, I, at least, have been thinking about them, abstractly.  But you raise a good point: we should be talking about them concretely and making sure that we could at least take advantage of the facilities they offer before we finalize anything.

However, then you fail to discuss them concretely :).  Do you have any practical experiences with these systems that would indicate what features would be useful to abstract over or how they should be exposed?

> And, no sane sysadmin should ever want a twisted-specific log file format or to write custom python log filters. That's crazy. Gimme a verbosity knob and the ability to emit structured log events to existing systems, with a fallback plain text file format. Great.

There is a reason why we should support such a thing, by which I mean a "Twisted specific" format in the sense of something like line-delimited JSON (or whatever).  We have an API for emitting log messages, and an API for observing log messages as they occur.  If someone were to use the latter API to produce some software that does a useful thing, it would be very good to have a built-in, platform-independent format for logs that could easily be reconstituted into something that is a reasonable enough facsimile of the information available at runtime.  That way log analysis using our log-analysis API would be possible offline without rewriting your online analysis tool to consume input from systemd, ASL, and windows event log instead of a Twisted observer.

I agree that our existing text format is basically pointless, but there are two reasons to keep it around.

First, it seem to be something that some sysadmins expect; there's definitely an archetype of sysadmin who prefers everything to be in "plain text" so they can run their perl scripts over it; someone more comfortable with regexes than structured data.  Maybe you wouldn't characterize these people as sane, but they're definitely extant, and some of them, at least, run Twisted services.

The second reason to keep the text format around is that even sysadmins who would _prefer_ structured data in an existing log facility have probably written some gross hacks to deal with twistd.log by now because we haven't previously exposed it in any meaningful way, so we need to preserve the existing format for some amount of compatibility.

My hope is that we can convince them to upgrade to some sort of structured system on its own merits, at the very least a log file that can be parsed reliably.

> The prime goal, it seems to me, should be exposing features useful for facilities present in existing log systems.

That's certainly a goal, but it's a little longer term than the prime goal, which is to present a logging API that encourages any structure (and filtering based on that structure) to be expressed at all.  It would of course be much better if that structure were aligned with existing logging systems.  If we had logging with structured messages already, there'd at least be a hope of writing a somewhat useful translator to these back-end systems.  As it is, sadly, we're going to have to touch almost every log.msg() call within Twisted to get any useful information out.

> And having a logging system which doesn't even support a basic log level is just silly. Hopefully the new system can at least have that.

The new system being proposed does have log levels.  (And, for that matter, so does Twisted currently; we've had log levels for compatibility with stlib Python logging forever.)

I still don't think that log levels are a particularly useful bit of structured information, and this is one reason I want to have our own structured format, to make sure that the other bits of more useful information hang around for longer in a useful form.  

I've been convinced that it's unhelpful to be contrarian and omit information which can be useful to a whole bunch of other systems and existing practices.  (Also, the effort described therein is way too ambitious to do in any reasonable time frame unless someone wanted to make logging in Twisted their full-time job for at least a year.)  Plus, I've seen some utility in Calendar Server from the use of the intersection of "level" and "namespace", although blanket application of log levels is still a crapshoot.

(So, other than those caveats, everything I said about identifying the audience and intent of messages in <http://glyph.twistedmatrix.com/2009/06/who-wants-to-know.html> still applies.)

Do all the systems you mentioned have the same set of log levels, or will there be some need to harmonize them?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130617/380aaed4/attachment-0002.html>

From xieweikai at gmail.com  Tue Jun 18 00:12:17 2013
From: xieweikai at gmail.com (Weikai (Victor) Xie)
Date: Tue, 18 Jun 2013 16:12:17 +1000
Subject: [Twisted-Python] Problem with installing twisted 13.0 with Python
	2.7 on 64 bit Win 7
Message-ID: <CAHk1ir+0xrAMZx9zsgmkgVv9LJMPr0U0DDOBt_QJWYVSSP0mrw@mail.gmail.com>

Hi, folks,

I was trying to install twisted 13.0 on my 64 bit win 7 but get some
strange problem - there is no sub-packages available under twisted!

Here is a screen copy:

Python 2.7.4 (default, Apr  6 2013, 19:54:46) [MSC v.1500 32 bit (Intel)]
on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import twisted
>>> twisted.web
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'web'
>>> dir(twisted)
['__builtins__', '__doc__', '__file__', '__name__', '__package__',
'__path__', '__version__', '_checkRequirements', '_version', 'python', 'v
ersion']
>>> twisted.version
Version('twisted', 13, 0, 0)


Although the screen copy shows I'm using Python 2.7 32 bits, I have also
tried Python 2.7 64bits and get just the same problem.

I have tried both installing by running the 32bit window binary setup
package from twisted website and building from the source tar ball. Both
ways give the same result.




Regards,

Weikai (Victor)  Xie
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/bbcd525a/attachment-0002.html>

From screwtape at froup.com  Tue Jun 18 02:07:37 2013
From: screwtape at froup.com (Tim Allen)
Date: Tue, 18 Jun 2013 18:07:37 +1000
Subject: [Twisted-Python] Problem with installing twisted 13.0 with
 Python 2.7 on 64 bit Win 7
In-Reply-To: <CAHk1ir+0xrAMZx9zsgmkgVv9LJMPr0U0DDOBt_QJWYVSSP0mrw@mail.gmail.com>
References: <CAHk1ir+0xrAMZx9zsgmkgVv9LJMPr0U0DDOBt_QJWYVSSP0mrw@mail.gmail.com>
Message-ID: <20130618080737.GJ8156@boombah.thristian.org>

On Tue, Jun 18, 2013 at 04:12:17PM +1000, Weikai (Victor) Xie wrote:
> >>> import twisted
> >>> twisted.web
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
> AttributeError: 'module' object has no attribute 'web'

I believe that's just how packages work in Python. On a Linux machine
I have handy:

>>> import twisted
>>> twisted.web
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'web'
>>> import twisted.web
>>> twisted.web
<module 'twisted.web' from '/usr/lib64/python2.6/site-packages/twisted/web/__init__.pyc'>




From therve at twistedmatrix.com  Tue Jun 18 02:07:39 2013
From: therve at twistedmatrix.com (=?UTF-8?Q?Thomas_Herv=C3=A9?=)
Date: Tue, 18 Jun 2013 10:07:39 +0200
Subject: [Twisted-Python] Problem with installing twisted 13.0 with
 Python 2.7 on 64 bit Win 7
In-Reply-To: <CAHk1ir+0xrAMZx9zsgmkgVv9LJMPr0U0DDOBt_QJWYVSSP0mrw@mail.gmail.com>
References: <CAHk1ir+0xrAMZx9zsgmkgVv9LJMPr0U0DDOBt_QJWYVSSP0mrw@mail.gmail.com>
Message-ID: <CA+G4qugumNW+EXTn4wXmivLQPydLo7EJo2pgYp1bv8M44H3PuQ@mail.gmail.com>

On Tue, Jun 18, 2013 at 8:12 AM, Weikai (Victor) Xie <xieweikai at gmail.com>wrote:

> Hi, folks,
>
> I was trying to install twisted 13.0 on my 64 bit win 7 but get some
> strange problem - there is no sub-packages available under twisted!
>
> Here is a screen copy:
>
> Python 2.7.4 (default, Apr  6 2013, 19:54:46) [MSC v.1500 32 bit (Intel)]
> on win32
> Type "help", "copyright", "credits" or "license" for more information.
> >>> import twisted
> >>> twisted.web
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
> AttributeError: 'module' object has no attribute 'web'
> >>> dir(twisted)
> ['__builtins__', '__doc__', '__file__', '__name__', '__package__',
> '__path__', '__version__', '_checkRequirements', '_version', 'python', 'v
> ersion']
> >>> twisted.version
> Version('twisted', 13, 0, 0)
>
>
 That's not how import works. Try "import twisted.web". It'd be interesting
to see what's on your filesystem too (like
os.listdir(os.path.dirname(twisted.__file__))).

-- 
Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/8b589bc0/attachment-0002.html>

From kylerzhang11 at gmail.com  Tue Jun 18 06:12:01 2013
From: kylerzhang11 at gmail.com (zhang kai)
Date: Tue, 18 Jun 2013 20:12:01 +0800
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are called
 with error other than CancelledError, is this acceptable?
Message-ID: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>

If I cancel a Deferred, the errbacks of the Deferred are not called with
CancelledError but with other errors like ConnectionDone, is this
acceptable?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/3e11ac46/attachment-0002.html>

From itamar at futurefoundries.com  Tue Jun 18 07:37:59 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Tue, 18 Jun 2013 09:37:59 -0400
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
Message-ID: <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>

By way of background, Kai Zhang is one of our GSoC interns, working on
adding Deferred cancellation support to Twisted. I believe the specific
module he is working on is the POP3 client, but it's a general question -
should we try to keep CancelledError percolating all the way to the top of
callback chain when possible? My first thought is "yes" since that's a more
informative reason, but maybe someone else has a counter-argument.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/50a00c9f/attachment-0002.html>

From peter.westlake at pobox.com  Tue Jun 18 09:25:46 2013
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 18 Jun 2013 16:25:46 +0100
Subject: [Twisted-Python] logging
In-Reply-To: <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
Message-ID: <1371569146.32178.140661245381745.62913D07@webmail.messagingengine.com>

On Tue, Jun 18, 2013, at 4:50, Glyph wrote:
> On Jun 17, 2013, at 5:48 PM, James Y Knight <foom at fuhm.net> wrote:
...
> > And having a logging system which doesn't even support a basic
> > log level is just silly. Hopefully the new system can at least
> > have that.
>
> The new system being proposed does have log levels.  (And, for that
> matter, so does Twisted currently; we've had log levels for
> compatibility with stlib Python logging forever.)

It's quite well hidden, though. Looking at
http://twistedmatrix.com/documents/current/api/twisted.python.log.html,
there is no mention of logging levels. For that matter it doesn't
mention twisted.python.log.msg() either!

Peter.



From radix at twistedmatrix.com  Tue Jun 18 09:42:50 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 18 Jun 2013 10:42:50 -0500
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
Message-ID: <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>

On Tue, Jun 18, 2013 at 8:37 AM, Itamar Turner-Trauring <
itamar at futurefoundries.com> wrote:

> By way of background, Kai Zhang is one of our GSoC interns, working on
> adding Deferred cancellation support to Twisted. I believe the specific
> module he is working on is the POP3 client, but it's a general question -
> should we try to keep CancelledError percolating all the way to the top of
> callback chain when possible? My first thought is "yes" since that's a more
> informative reason, but maybe someone else has a counter-argument
>

I definitely think the error should explain that cancellation occurred; I
can also imagine cases where you'd want to know the specifics of how that
cancellation occurred, or how far some operation got before the
cancellation was executed (especially if we're talking about mutating
operations). ConnectionDone definitely doesn't sound good.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/6b680bb4/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jun 18 11:45:52 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 18 Jun 2013 10:45:52 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <1371569146.32178.140661245381745.62913D07@webmail.messagingengine.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
 <1371569146.32178.140661245381745.62913D07@webmail.messagingengine.com>
Message-ID: <F3D9613E-107F-4D26-86A9-405C3C49F239@twistedmatrix.com>


On Jun 18, 2013, at 8:25 AM, Peter Westlake <peter.westlake at pobox.com> wrote:

> On Tue, Jun 18, 2013, at 4:50, Glyph wrote:
>> On Jun 17, 2013, at 5:48 PM, James Y Knight <foom at fuhm.net> wrote:
> ...
>>> And having a logging system which doesn't even support a basic
>>> log level is just silly. Hopefully the new system can at least
>>> have that.
>> 
>> The new system being proposed does have log levels.  (And, for that
>> matter, so does Twisted currently; we've had log levels for
>> compatibility with stlib Python logging forever.)
> 
> It's quite well hidden, though. Looking at
> http://twistedmatrix.com/documents/current/api/twisted.python.log.html,
> there is no mention of logging levels. For that matter it doesn't
> mention twisted.python.log.msg() either!

Yes; in general, the current logging system's documentation is atrocious.  Part of this new effort should be to completely re-vamp how we explain things.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/fa590eba/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jun 18 12:22:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 18 Jun 2013 11:22:43 -0700
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
Message-ID: <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>


On Jun 18, 2013, at 8:42 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On Tue, Jun 18, 2013 at 8:37 AM, Itamar Turner-Trauring <itamar at futurefoundries.com> wrote:
> By way of background, Kai Zhang is one of our GSoC interns, working on adding Deferred cancellation support to Twisted. I believe the specific module he is working on is the POP3 client, but it's a general question - should we try to keep CancelledError percolating all the way to the top of callback chain when possible? My first thought is "yes" since that's a more informative reason, but maybe someone else has a counter-argument
> 
> I definitely think the error should explain that cancellation occurred; I can also imagine cases where you'd want to know the specifics of how that cancellation occurred, or how far some operation got before the cancellation was executed (especially if we're talking about mutating operations). ConnectionDone definitely doesn't sound good.

Making an API that previously documented raising (or failing) exception types A, B, and C raise (or fail with) D is not necessarily a compatible change.  Making it raise (or fail with) A' (a subclass of A) is, though.

I would say that if we want to percolate this information up to the caller, there should be a ConnectingCancelled exception that is a subtype of the previous exception type.

After all, if it's interesting that the operation was cancelled, presumably it's interesting at what stage the operation is cancelled.

For precedent, IStreamClientEndpoint went with this strategy by having the (perhaps unfortunately named) UserError.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/56c9492c/attachment-0002.html>

From _ at lvh.io  Tue Jun 18 13:03:21 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 18 Jun 2013 21:03:21 +0200
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
Message-ID: <CAE_Hg6aVMDMBwLOMBaztnkXkustk+0s1pmzYTP0BhbSNojAMEg@mail.gmail.com>

On Tue, Jun 18, 2013 at 8:22 PM, Glyph <glyph at twistedmatrix.com> wrote:

> I would say that if we want to percolate this information up to the
> caller, there should be a ConnectingCancelled exception that is a subtype
> of the previous exception type.
>

Doesn't that mean we'll have many subclasses that mean that something was
cancelled?

If I didn't take backwards compatibility into account, I would say that
composing the original exception into a new CancellationError (or
something) exception would be preferable. Would you agree that it would be
preferable? (Again, not taking compatibility into account -- I'm trying to
get compatibility vs niceness of API to face off against each other.
Personally, I think it's enough of a change in functionality to warrant a
chance in ways a function can fail, but there's no point in even having
that argument if there's no consensus that the composed way would even be
better...)


> After all, if it's interesting that the operation was cancelled,
> presumably it's interesting *at what stage* the operation is cancelled.
>

IIUC that would work the same with composition as inheritance :)


cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/4a93cbaf/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jun 18 13:54:29 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 18 Jun 2013 12:54:29 -0700
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <CAE_Hg6aVMDMBwLOMBaztnkXkustk+0s1pmzYTP0BhbSNojAMEg@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <CAE_Hg6aVMDMBwLOMBaztnkXkustk+0s1pmzYTP0BhbSNojAMEg@mail.gmail.com>
Message-ID: <219D695E-16F1-4F51-BB6B-0CD9838F7BEF@twistedmatrix.com>


On Jun 18, 2013, at 12:03 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> On Tue, Jun 18, 2013 at 8:22 PM, Glyph <glyph at twistedmatrix.com> wrote:
> I would say that if we want to percolate this information up to the caller, there should be a ConnectingCancelled exception that is a subtype of the previous exception type.
> 
> Doesn't that mean we'll have many subclasses that mean that something was cancelled?
> 
> If I didn't take backwards compatibility into account, I would say that composing the original exception into a new CancellationError (or something) exception would be preferable. Would you agree that it would be preferable? (Again, not taking compatibility into account -- I'm trying to get compatibility vs niceness of API to face off against each other. Personally, I think it's enough of a change in functionality to warrant a chance in ways a function can fail, but there's no point in even having that argument if there's no consensus that the composed way would even be better...)

I agree that it would be preferable, but I don't see how it's possible without making Exception itself composeable.

>  After all, if it's interesting that the operation was cancelled, presumably it's interesting at what stage the operation is cancelled.
> 
> IIUC that would work the same with composition as inheritance :)

Unfortunately inheritance is built into the way Python handles exceptions.  In fact in this case you almost want *multiple* inheritance, so you can say 'except CancelledError:' or 'except ConnectionError:' as appropriate.  :-(

The one saving grace here is that not a whole lot of useful logic can live on the exception objects, so there's a limited amount of opportunity for getting oneself into trouble.

Please prove me wrong, though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/42366f90/attachment-0002.html>

From termim at gmail.com  Tue Jun 18 14:58:04 2013
From: termim at gmail.com (Mikhail Terekhov)
Date: Tue, 18 Jun 2013 16:58:04 -0400
Subject: [Twisted-Python] logging
In-Reply-To: <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
Message-ID: <CALCsMPQowfBDHARBGh+ySqyBKCcnLr=+smO54Czc5DAjWKRs5Q@mail.gmail.com>

On Mon, Jun 17, 2013 at 11:50 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Jun 17, 2013, at 5:48 PM, James Y Knight <foom at fuhm.net> wrote:
>
> And having a logging system which doesn't even support a basic log level
> is just silly. Hopefully the new system can at least have that.
>
> +1


> The new system being proposed does have log levels.  (And, for that
> matter, so does Twisted currently; we've had log levels for compatibility
> with stlib Python logging forever.)
>

But it is impossible to use them in Twisted currently without Python
logging or without writing your own observer AFAICS. If the system being
proposed does have log levels then it is good.


I still don't think that log levels are a particularly useful bit of
> structured information, and this is one reason I want to have our own
> structured format, to make sure that the *other* bits of *more* useful
> information hang around for longer in a useful form.
>

I think you are mixing "structured information" and "structured format"
here. Anyway, current practice proves that log level is one of the most
useful pieces of whatever structured or unstructured information in the log
files. IMHO applies of course.


> I've been convinced that it's unhelpful to be contrarian and omit
> information which can be useful to a whole bunch of other systems and
> existing practices.  (Also, the effort described therein is way too
> ambitious to do in any reasonable time frame unless someone wanted to make
> logging in Twisted their full-time job for at least a year.)  Plus, I've
> seen some utility in Calendar Server from the use of the *intersection* of
> "level" and "namespace", although blanket application of log levels is
> still a crapshoot.
>

That is usually true for any somewhat complex  phenomena - there is no
silver bullet, everything should be used in concert. Take gender for
example - taken alone it doesn't tell everything about a person but still
is a very important piece of information :) Frankly I do not remember a
program or a system where log level was not used in one form or another if
logging was used at all.

(So, other than those caveats, everything I said about identifying the
> audience and intent of messages in <
> http://glyph.twistedmatrix.com/2009/06/who-wants-to-know.html> still
> applies.)
>

I agree. It is so tempting to design something that will rule them all :)
Unfortunately such a generic project usually is destined not to be
completed :( (like Lore to Sphinx conversion ::() (I hope that the number
of smiles is enough to indicate the level of seriousness in the above
paragraphs ;} ) Seriously, the only things that could probably be general
enough to provide ready made interface among gazillions of
applications/domains are the time stamp and the log level. The third one -
the source of the message is also general but its values are very
application specific. Everything else is too application specific to hard
code into generic library like Twisted. There should be a way to implement
them if needed of course. Among these only log level is missing in Twisted
and logPrefix should be fixed to always show correct names.

>From the practical POV the most welcomed first step in updating the Twisted
log system would be introduction of ready made log levels (with an ability
to filter on them in observers), fix of logPrefix thing and somewhat
extended set of available observers (syslog, email, socket, etc.)
Everything else could wait more detailed design etc.


>
> Do all the systems you mentioned have the same set of log levels, or will
> there be some need to harmonize them?
>

IMHO the level of consensus in the set of log levels is not all that bad.
The ones used in Python logging together with ability to add custom levels
is good enough for almost anything.


Regards,
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/0488ae7b/attachment-0002.html>

From itamar at itamarst.org  Tue Jun 18 15:13:45 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 18 Jun 2013 17:13:45 -0400
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
Message-ID: <51C0CD89.6010101@itamarst.org>

On 06/18/2013 02:22 PM, Glyph wrote:
> Making an API that previously documented raising (or failing) 
> exception types A, B, and C raise (or fail with) D is not necessarily 
> a compatible change.  Making it raise (or fail with) A' (a subclass of 
> A) is, though.
>
The API for pop3client does *not* document the expected exceptions, so 
backwards compatibility isn't really an issue here.



From glyph at twistedmatrix.com  Tue Jun 18 15:24:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 18 Jun 2013 14:24:40 -0700
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <51C0CD89.6010101@itamarst.org>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <51C0CD89.6010101@itamarst.org>
Message-ID: <83F58187-A878-4FA5-AB28-3A3CBB511051@twistedmatrix.com>


On Jun 18, 2013, at 2:13 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> On 06/18/2013 02:22 PM, Glyph wrote:
>> Making an API that previously documented raising (or failing) exception types A, B, and C raise (or fail with) D is not necessarily a compatible change.  Making it raise (or fail with) A' (a subclass of A) is, though.
>> 
> The API for pop3client does *not* document the expected exceptions, so backwards compatibility isn't really an issue here.

Hrm.  I would say that if you don't document exceptions, then you just have to support whatever your behavior was before :).

http://twistedmatrix.com/trac/wiki/CompatibilityPolicy does not explore this issue, though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/207606ce/attachment-0002.html>

From terry at jon.es  Tue Jun 18 15:33:14 2013
From: terry at jon.es (Terry Jones)
Date: Tue, 18 Jun 2013 22:33:14 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <219D695E-16F1-4F51-BB6B-0CD9838F7BEF@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <CAE_Hg6aVMDMBwLOMBaztnkXkustk+0s1pmzYTP0BhbSNojAMEg@mail.gmail.com>
 <219D695E-16F1-4F51-BB6B-0CD9838F7BEF@twistedmatrix.com>
Message-ID: <CACqnu4UfWA+uiKKM3-3ChHU5BRnMi3CaodEGTKk-5UqUe=k=GQ@mail.gmail.com>

First off, +1 on propagating the CancelledError failure (or something even
more specific) all the way back up the errback chain.

lvh> Personally, I think it's enough of a change in functionality to
warrant a chance in ways a function can fail

I'm not sure what change in functionality you mean. Deferreds are already
cancelable, and functions aren't going to fail in new ways. The only thing
that's new here is that a different value might be given to the
failure.Failure constructor and passed along the errback chain.

glyph> In fact in this case you almost want *multiple* inheritance, so you
can say 'except CancelledError:' or 'except ConnectionError:' as
appropriate.

If a deferred has been canceled and the errback fired, why can't code like
`fail.check(CancelledError, ConnectionError, ...)` be used?

Sorry if I'm wrong/forgetful (I'm old), but it seems like lvh & glyph are
talking about exceptions when they should be talking about handling Failure
instances arriving via the errback chain.

A couple of comments:

 - There are conceptually 3 places a deferred might be cancelled. 1. The
code that makes the deferred might call cancel for some reason (e.g.,
service shutdown). 2. Intermediate code that called the code that creates
the deferred and which passes the deferred on might cancel it. 3. The
originating code (that uses a Twisted (or other library) API call) might
decide to cancel it (e.g., due to timeout).

In case 1, the documented interface of the API call can say what it does if
it cancels a deferred. E.g., that a CancelledError failure will be
delivered down the errback chain (the default behavior), or that some other
kind of failure will be sent. A function could even allow the calling code
to pass in a value that should be sent down the errback chain (wrapped in a
Failure) when/if the deferred it creates is cancelled.  E.g. (pseudo-code):

    def doSomething(cancelValue=None):
        if cancelValue is not None:
            deferred = Deferred(lambda d:
d.errback(failure.Failure(cancelValue)))
        else:
            deferred = Deferred()
        # Now do other things to arrange for 'deferred' to fire or fail.
        return deferred

Case 2 is almost never going to happen. The intermediate code gets a
deferred from someplace, maybe adds call/errbacks to it, and passes it on.
If that code wants to hold on to the deferred it received and cancel it for
some reason, it could do so, but it wont have any control over the failure
value that comes down the errback chain.

Case 3 is more interesting, and is the main reason deferred cancelation was
interesting me to (please see this thread for some background on how we got
here:
http://twistedmatrix.com/pipermail/twisted-python/2010-January/021298.html).
In this case, the original calling code wants to cancel the deferred.
E.g., it has made a call to something that makes a network call and after
some timeout decides it needs to proceed without the result. Due to its
setup (using deferreds) the cleanest way for that code to proceed is to
trigger the deferred itself. If it can do that, the normal (errback) error
processing chain can simply handle the case where the deferred is cancelled.

A slight difficulty with the current situation is that code that obtains a
deferred made by other code can't tell, if the deferred is cancelled, who
cancelled it (or why). That includes the case where the code that received
the deferred cancels it itself. I.e., if the code that makes the deferred
cancels it (in the default way) or the code that receives the deferred
cancels it (cases 1 and 3 above), the result is the same, a CancelledError
in a failure.

In what I originally proposed (see above link), the caller could errback
the deferred it was given *with a value of its choosing*. That would allow
code to cancel a deferred and also to detect (in an errback) that it had
done so and/or why (code might cancel a deferred for different reasons).
 You can't do that with the implementation that actually landed in Twisted,
though.


A possible way to add some functionality / flexibility (including the above
possibility) in a backwards-compatible way would be to allow
Deferred.cancel to be called with a value argument (default=None to keep it
backwards compat).  If no canceller was given to the Deferred constructor
(or the canceller function did not fire the deferred), Deferred.cancel
would call self.errback(failure.Failure(CancelledError(value))). In that
way, anyone could cancel a deferred and the specific reason passed to
cancel(), if any, would be available in the Python CancelledError instance
as its first argument, as with any Python exception (i.e., args[0]).  In
addition (backwards incompatible, though) the value passed to
Deferred.cancel could also be passed to self._canceller, along with the
deferred itself. I don't think that's needed though, as code doing more
elaborate cancellation can set up any kind of Failure it wants to propagate
back, can document its behavior, and can also allow for caller-specific
values to be passed back (see code fragment above), etc.

OK, sorry if that's all a bit rambling & hard to follow...

Terry



On Tue, Jun 18, 2013 at 8:54 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 18, 2013, at 12:03 PM, Laurens Van Houtven <_ at lvh.io> wrote:
>
> On Tue, Jun 18, 2013 at 8:22 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
>> I would say that if we want to percolate this information up to the
>> caller, there should be a ConnectingCancelled exception that is a subtype
>> of the previous exception type.
>>
>
> Doesn't that mean we'll have many subclasses that mean that something was
> cancelled?
>
> If I didn't take backwards compatibility into account, I would say that
> composing the original exception into a new CancellationError (or
> something) exception would be preferable. Would you agree that it would be
> preferable? (Again, not taking compatibility into account -- I'm trying to
> get compatibility vs niceness of API to face off against each other.
> Personally, I think it's enough of a change in functionality to warrant a
> chance in ways a function can fail, but there's no point in even having
> that argument if there's no consensus that the composed way would even be
> better...)
>
>
> I agree that it would be preferable, but I don't see how it's possible
> without making Exception itself composeable.
>
>  After all, if it's interesting that the operation was cancelled,
> presumably it's interesting *at what stage* the operation is cancelled.
>
> IIUC that would work the same with composition as inheritance :)
>
>
> Unfortunately inheritance is built into the way Python handles exceptions.
>  In fact in this case you almost want *multiple* inheritance, so you can
> say 'except CancelledError:' or 'except ConnectionError:' as appropriate.
>  :-(
>
> The one saving grace here is that not a whole lot of useful logic can live
> on the exception objects, so there's a limited amount of opportunity for
> getting oneself into trouble.
>
> Please prove me wrong, though.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130618/e93c9bfe/attachment-0002.html>

From itamar at itamarst.org  Tue Jun 18 18:36:29 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 18 Jun 2013 20:36:29 -0400
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <83F58187-A878-4FA5-AB28-3A3CBB511051@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <51C0CD89.6010101@itamarst.org>
 <83F58187-A878-4FA5-AB28-3A3CBB511051@twistedmatrix.com>
Message-ID: <51C0FD0D.70002@itamarst.org>

On 06/18/2013 05:24 PM, Glyph wrote:
>
> Hrm.  I would say that if you don't document exceptions, then you just 
> have to support whatever your behavior was before :).
>
> http://twistedmatrix.com/trac/wiki/CompatibilityPolicy does not 
> explore this issue, though.
>
The many possible options in this case include 
ConnectionDone/ConnectionLost/SSL errors and then a few other random 
errors (LineTooLong, ServerGreetingError). Etc. In general for these 
situations it seems like the range of errors is wide enough you always 
need a catch-all error handler anyway.



From tom.prince at ualberta.net  Wed Jun 19 13:49:35 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Wed, 19 Jun 2013 13:49:35 -0600
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
Message-ID: <87y5a5g9tc.fsf@loki.hocat.ca>

Glyph <glyph at twistedmatrix.com> writes:

> On Jun 18, 2013, at 8:42 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:
>
>> On Tue, Jun 18, 2013 at 8:37 AM, Itamar Turner-Trauring <itamar at futurefoundries.com> wrote:
>> I believe the specific module he is working on is the POP3 client,
>> but it's a general question - should we try to keep CancelledError
>> percolating all the way to the top of callback chain when possible?
>> My first thought is "yes" since that's a more informative reason, but
>> maybe someone else has a counter-argument
>> 
>> I definitely think the error should explain that cancellation
>> occurred; I can also imagine cases where you'd want to know the
>> specifics of how that cancellation occurred, or how far some
>> operation got before the cancellation was executed (especially if
>> we're talking about mutating operations). ConnectionDone definitely
>> doesn't sound good.
>
> Making an API that previously documented raising (or failing)
> exception types A, B, and C raise (or fail with) D is not necessarily
> a compatible change.  Making it raise (or fail with) A' (a subclass of
> A) is, though.

Well, it already raises `CancelledError`. Every deferred that doesn't
have explicitly handle cancelling already does:

from twisted.mail import smtp
from twisted.python import log

d = smtp.sendmail("host", "options.sender", [], "")
d.cancel()
d.addErrback(log.err, "Here be CancelledError")



From i at introo.me  Wed Jun 19 20:54:22 2013
From: i at introo.me (Shiyao Ma)
Date: Thu, 20 Jun 2013 10:54:22 +0800
Subject: [Twisted-Python] Switiching to Formal Parser.
Message-ID: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>

Hi. All.
I am a gsoc participant this year, working on switching to formal parser.
This is really an experiment to test whether parsley suits the needs or
not. Tomprince and dash had a talk with me just now and we decided to start
rewriting the twisted.names.dns first.
A new git repo has been made: https://github.com/twisted/parsley-protocols
If you guys have any ideas/interested in that, come on.

-- 

More on: http://about.me/introom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130620/541895a8/attachment-0002.html>

From radix at twistedmatrix.com  Wed Jun 19 21:04:35 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 19 Jun 2013 22:04:35 -0500
Subject: [Twisted-Python] Switiching to Formal Parser.
In-Reply-To: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>
References: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>
Message-ID: <CAPkRfURwvx95HTDgDx8F1nuCH2=Qt12GzV=HqgbyyyV8x4t6=A@mail.gmail.com>

On Wed, Jun 19, 2013 at 9:54 PM, Shiyao Ma <i at introo.me> wrote:

> Hi. All.
> I am a gsoc participant this year, working on switching to formal parser.
> This is really an experiment to test whether parsley suits the needs or
> not. Tomprince and dash had a talk with me just now and we decided to start
> rewriting the twisted.names.dns first.
> A new git repo has been made: https://github.com/twisted/parsley-protocols
> If you guys have any ideas/interested in that, come on.
>
>

Hi Shiyao, I'm happy that you chose Twisted as your SoC project. I just
want to point out that Richard Wall (rwall on IRC) has been working a lot
on DNS lately, he may be interested in the work you're doing.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130619/cd93b03e/attachment-0002.html>

From m-lists at the-moon.net  Thu Jun 20 04:14:24 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Thu, 20 Jun 2013 11:14:24 +0100
Subject: [Twisted-Python] Switiching to Formal Parser.
In-Reply-To: <CAPkRfURwvx95HTDgDx8F1nuCH2=Qt12GzV=HqgbyyyV8x4t6=A@mail.gmail.com>
References: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>
 <CAPkRfURwvx95HTDgDx8F1nuCH2=Qt12GzV=HqgbyyyV8x4t6=A@mail.gmail.com>
Message-ID: <CABefbUpTMSoLgEYDH1P8oFFtBcRz0gQ2t45gWd_g7BKrz2Pq1Q@mail.gmail.com>

On 20 June 2013 04:04, Christopher Armstrong <radix at twistedmatrix.com> wrote:
> Hi Shiyao, I'm happy that you chose Twisted as your SoC project. I just want
> to point out that Richard Wall (rwall on IRC) has been working a lot on DNS
> lately, he may be interested in the work you're doing.

Hello Shiyao,

Yes, I'm really pleased that you chose to start with twisted.names and
I'm looking forward to seeing Parsley in action!

I've been working on EDNS support.  (Building on some patches provided
by Bob Novas last year.)
 * https://twistedmatrix.com/trac/wiki/EDNS0
 * https://twistedmatrix.com/trac/ticket/5668 (OPT Record)
 * https://twistedmatrix.com/trac/ticket/5675 (EDNSMessage)
These are currently wrappers around the existing t.n.dns.RRHeader and
t.n.dns.Message, which may or may not be the right approach (feedback
would be very welcome).

I've also been doing some testing and bug fixing of twisted.names.authority.

Anyway, good luck with your project and I'll be delighted to help if I can.

-RichardW.

PS: Can you post a link to the GSOC project plan and the expected outcomes?
(Perhaps it's on your Github site - I should look)



From i at introo.me  Thu Jun 20 06:39:33 2013
From: i at introo.me (Shiyao Ma)
Date: Thu, 20 Jun 2013 20:39:33 +0800
Subject: [Twisted-Python] Switiching to Formal Parser.
In-Reply-To: <CABefbUpTMSoLgEYDH1P8oFFtBcRz0gQ2t45gWd_g7BKrz2Pq1Q@mail.gmail.com>
References: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>
 <CAPkRfURwvx95HTDgDx8F1nuCH2=Qt12GzV=HqgbyyyV8x4t6=A@mail.gmail.com>
 <CABefbUpTMSoLgEYDH1P8oFFtBcRz0gQ2t45gWd_g7BKrz2Pq1Q@mail.gmail.com>
Message-ID: <CAJQX3DxBuewypPrAVBNVDb76G-yCjt_azBZxcejyP26uMJNQ-w@mail.gmail.com>

My original plan, as suggested by exarkun, is to start with something easy
to implement like netstring and then move on to advanced ones. But after
today's video chat with tom and dash, I will begin by rewriting the
Message.decode/encode part inside names.dns. The expected outcome, I think,
is to test parsley with datagram based protocols (dns) and more complicated
stream protocols.
As said by tom, the code would probably not be merged into trunk, it's just
an experiment.


On Thu, Jun 20, 2013 at 6:14 PM, Richard Wall <m-lists at the-moon.net> wrote:

> On 20 June 2013 04:04, Christopher Armstrong <radix at twistedmatrix.com>
> wrote:
> > Hi Shiyao, I'm happy that you chose Twisted as your SoC project. I just
> want
> > to point out that Richard Wall (rwall on IRC) has been working a lot on
> DNS
> > lately, he may be interested in the work you're doing.
>
> Hello Shiyao,
>
> Yes, I'm really pleased that you chose to start with twisted.names and
> I'm looking forward to seeing Parsley in action!
>


-- 
http://about.me/introom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130620/06c0a1b4/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Jun 20 13:34:35 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 20 Jun 2013 19:34:35 -0000
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <87y5a5g9tc.fsf@loki.hocat.ca>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
Message-ID: <20130620193435.10961.1679313466.divmod.xquotient.30@top>

On 19 Jun, 07:49 pm, tom.prince at ualberta.net wrote:
>
>Well, it already raises `CancelledError`. Every deferred that doesn't
>have explicitly handle cancelling already does:
>
>from twisted.mail import smtp
>from twisted.python import log
>
>d = smtp.sendmail("host", "options.sender", [], "")
>d.cancel()
>d.addErrback(log.err, "Here be CancelledError")

Thank you for pointing this out.  It seems like an important fact that 
makes the rest of the discussion moot.

By making `Deferred.cancel` work on any Deferred by triggering a 
`CancelledError`, we have already decided on the failure behavior for 
all existing Deferred-returning APIs.  Changing that at this point 
doesn't seem like a very good idea.

I think I'd also like to challenge the idea that Glyph put forwards 
earlier in the thread that this extra information is *necessarily* 
important to the application.

So far, I haven't written any applications that care about the exact 
stage at which the operation is cancelled.  All they care about is that 
the operation *is* cancelled (ie, resources are cleaned up) and that the 
Deferred fires soon.  There's lots of utility in just this level of 
functionality which requires no extra information about the internal 
progress of the operation.

This is not to say that I believe there is no application that might 
want this information, but maybe someone can propose some concrete use 
cases for this information and design can follow from that.  So far I 
don't think any practical justification to do anything other than 
`CancelledError` has been presented.

Jean-Paul



From terry at jon.es  Thu Jun 20 13:54:03 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 20 Jun 2013 20:54:03 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <20130620193435.10961.1679313466.divmod.xquotient.30@top>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
Message-ID: <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>

> Thank you for pointing this out.  It seems like an important fact that
makes the rest of the discussion moot.

OK, maybe someone can explain the original "Well, it already raises
`CancelledError`. Every deferred that doesn't have explicitly handle
cancelling already does:" to me, because I didn't get it at all!

Terry


On Thu, Jun 20, 2013 at 8:34 PM, <exarkun at twistedmatrix.com> wrote:

> On 19 Jun, 07:49 pm, tom.prince at ualberta.net wrote:
>
>>
>> Well, it already raises `CancelledError`. Every deferred that doesn't
>> have explicitly handle cancelling already does:
>>
>> from twisted.mail import smtp
>> from twisted.python import log
>>
>> d = smtp.sendmail("host", "options.sender", [], "")
>> d.cancel()
>> d.addErrback(log.err, "Here be CancelledError")
>>
>
> Thank you for pointing this out.  It seems like an important fact that
> makes the rest of the discussion moot.
>
> By making `Deferred.cancel` work on any Deferred by triggering a
> `CancelledError`, we have already decided on the failure behavior for all
> existing Deferred-returning APIs.  Changing that at this point doesn't seem
> like a very good idea.
>
> I think I'd also like to challenge the idea that Glyph put forwards
> earlier in the thread that this extra information is *necessarily*
> important to the application.
>
> So far, I haven't written any applications that care about the exact stage
> at which the operation is cancelled.  All they care about is that the
> operation *is* cancelled (ie, resources are cleaned up) and that the
> Deferred fires soon.  There's lots of utility in just this level of
> functionality which requires no extra information about the internal
> progress of the operation.
>
> This is not to say that I believe there is no application that might want
> this information, but maybe someone can propose some concrete use cases for
> this information and design can follow from that.  So far I don't think any
> practical justification to do anything other than `CancelledError` has been
> presented.
>
> Jean-Paul
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130620/42d8136f/attachment-0002.html>

From terry at jon.es  Thu Jun 20 15:02:06 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 20 Jun 2013 22:02:06 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <20130620193435.10961.1679313466.divmod.xquotient.30@top>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
Message-ID: <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>

Hi JP

> This is not to say that I believe there is no application that might want
this information, but maybe someone can
> propose some concrete use cases for this information and design can
follow from that.  So far I don't think any
> practical justification to do anything other than `CancelledError` has
been presented.

I pushed to get deferred cancellation in place because I'd wanted it
several times. As a consumer of a deferred-returning API, I wanted to be
able to cancel requests that I had sent off after a certain time. That was
because I was setting up hundreds (or thousands) of network calls and
deferreds that were supposed to run when these completed, etc. If one of
the calls didn't callback or errback for some reason, the whole system
would essentially hang.

So that was one use case, and, as you say, it doesn't need any additional
information.

But, I also built some queuing things where I would have liked extra
information. For example, an app is processing jobs on behalf of a user,
and it might want to be able to cancel jobs in a variety of ways. A user
might indicate that a job should be cancelled. A job might have a certain
timeout and if it doesn't complete in that time then in some cases it
should be retried later. The system might have an adjustable job bandwidth
(like my resizable dispatch queue) and might as a result sometimes need to
cancel jobs that have not started yet (but for which a deferred has been
assigned) or cancel jobs that are actually in progress. These are a
collection of reasons why an app might want to cancel deferreds it has
received or created itself. If there's no way to arrange for any detail on
the reason for cancellation, then things get awkward (you can in some cases
maintain housekeeping info elsewhere, like a dict of deferreds you have
called cancel on that correspond to jobs that need a restart, and check and
clean up that housekeeping info in the errback that handles CancelledError).

In what I originally proposed and implemented in that CancellableDeferred class
(http://twistedmatrix.com/pipermail/twisted-python/2010-January/021298.html)
a deferred could be callbacked or errbacked by anyone who had their hands
on the deferred, with any value of their choosing. So for example my
queuing app might choose to errback a deferred with a CancelledAndResubmit
exception, or similar.

That full flexibility is not what landed in Twisted, though (glyph, and
maybe others, had already done most of an implementation when I arrived at
Pycon that year).

I don't think the ability to callback any deferred you have your hands on
is crucial (though I can think of use cases), but being able to errback is
great, as you can now do, and as you note.

In the mail I sent the other day, I proposed that cancel() could take a
value argument and that that could be given as CancelledError(value) when
the Deferred class triggers the errback, in the case that the cancel method
(if any) for the Deferred instance hasn't already fired the deferred.  That
would give the flexibility I was looking for (as above) for apps to be able
to cancel deferreds and send along any extra information they might
need/want as to why they cancelled it. It would also let apps distinguish
between cases where they cancelled the deferred or something else did.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130620/1b535f5e/attachment-0002.html>

From terry at jon.es  Thu Jun 20 16:26:37 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 20 Jun 2013 23:26:37 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
Message-ID: <CACqnu4Uf89RnrVUi8+BiOgxJKGfVzw3OayC+iCT-0mhKm5J-HQ@mail.gmail.com>

By the way, I don't need any of this to make its way into Twisted. I can
still write my own class that does what I want (well, wanted).  Below is a
2013 version of the  CancelableDeferred. It's untested. The basic idea is
that if you get a regular deferred from somewhere, you can use the class
below to make a new deferred that you can callback, errback, or cancel at
will. You can give a value to 'cancel' and it will be in args[0] of the
CancelledError that your errback will receive.

I still find this approach attractive because it maintains the
power/elegance of coding with Twisted deferreds but also gives the caller
of deferred-producing code more flexibility. That's got to be a good thing,
right?

I hope the code makes the intention more clear, not less.

Terry


from twisted.internet.defer import CancelledError, Deferred
from twisted.python.failure import Failure

class ControllableDeferred2013(object):

    '''A Deferred-like class that takes a regular Twisted Deferred and
    provides a deferred that can be fired at will. If you have a regular
    Twisted Deferred, you can produce a deferred you have more control over
    by using your Deferred instance to make an instance of this class.

    Any time you need to fire a ControllableDeferred2013 instance for any
    reason, call its callback, errback or cancel method. It will fire
    immediately with the value you provide and the original Deferred will
    be cancelled.'''

    def __init__(self, originalDeferred):
        self._fired = False
        self._originalDeferred = originalDeferred
        self._newDeferred = Deferred()
        for method in ('addBoth', 'addCallback', 'addCallbacks',
'addErrback',
                             'chainDeferred'):
            setattr(self, method, getattr(self._newDeferred, method))
        originalDeferred.addBoth(self._originalFired)

    def _originalFired(self, result):
        if not self._fired:
            self._fired = True
            self._originalDeferred.chainDeferred(self._newDeferred)

    def cancel(self, value=None):
        if not self._fired:
            self._fired = True
            self._newDeferred.errback(Failure(CancelledError(value)))
            self._originalDeferred.cancel()

    def callback(self, result=None):
        if not self._fired:
            self._fired = True
            self._newDeferred.callback(result)
            self._originalDeferred.cancel()

    def errback(self, fail=None):
        if not self._fired:
            self._fired = True
            self._newDeferred.errback(fail)
            self._originalDeferred.cancel()

    def pause(self):
        self._newDeferred.pause()
        self._originalDeferred.pause()

    def unpause(self):
        self._newDeferred.unpause()
        self._originalDeferred.unpause()


# BTW, I posted the above code to
http://blogs.fluidinfo.com/terry/2013/06/20/yet-another-cancelable-twisted-deferred-class/as
well.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130620/2e62c911/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Jun 20 17:03:38 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 20 Jun 2013 23:03:38 -0000
Subject: [Twisted-Python] How hard is it to have log levels,
	really?  was: logging
In-Reply-To: <CALCsMPQowfBDHARBGh+ySqyBKCcnLr=+smO54Czc5DAjWKRs5Q@mail.gmail.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
 <CALCsMPQowfBDHARBGh+ySqyBKCcnLr=+smO54Czc5DAjWKRs5Q@mail.gmail.com>
Message-ID: <20130620230338.10961.128413721.divmod.xquotient.35@top>

On 18 Jun, 08:58 pm, termim at gmail.com wrote:
> From the practical POV the most welcomed first step in updating the 
>Twisted
>log system would be introduction of ready made log levels (with an 
>ability
>to filter on them in observers), fix of logPrefix thing and somewhat
>extended set of available observers (syslog, email, socket, etc.)
>Everything else could wait more detailed design etc.

Is there an obstacle preventing this from being done with 
twisted.python.log?

A completely new system written from scratch from the ground up might be 
great, but it doesn't seem necessary for something as simple as log 
level support.

Jean-Paul



From tom.prince at ualberta.net  Thu Jun 20 23:12:25 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Thu, 20 Jun 2013 23:12:25 -0600
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
Message-ID: <871u7wkpxi.fsf@hermes.hocat.ca>

Terry Jones <terry at jon.es> writes:
> OK, maybe someone can explain the original "Well, it already raises
> `CancelledError`. Every deferred that doesn't have explicitly handle
> cancelling already does:" to me, because I didn't get it at all!

This is what happens when a deferred is cancelled:

a) If the deferred hasn't been errbacked:
   1. Call the provied canceller (provided when the deferred is constructed)
   2. If a canceller isn't provided, or if the canceller didn't
      callback/errback, then errback with CancelledError.
   3. If a canceller isn't provided, allow callback/errback to be called
      without error once.
b) If the deferred has been fired, and is waiting on another deferred,
   cancel that deferred instead.

Since most apis in twisted don't pass a canceller, the behavior is
a2+a3.

  Tom
    



From tom.prince at ualberta.net  Fri Jun 21 00:18:29 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Fri, 21 Jun 2013 00:18:29 -0600
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
Message-ID: <87y5a4j8ay.fsf@hermes.hocat.ca>

Terry Jones <terry at jon.es> writes:
> But, I also built some queuing things where I would have liked extra
> information. For example, an app is processing jobs on behalf of a user,
> [...]

Thinking about this for a little bit, it seems like there is quite a bit
more state to your jobs, that simply an eventual result (i.e. a
deferred). So, it seems to me that you want to represent your jobs as
more than simply a deferred. At the very least, you need to record what
the jobs is, so that it can be restarted later, if necessary.

Deferreds are a way of abstracting data and/or control flow in
asynchronous way. I'm not sure that trying to think of a deferred as a
job is a useful thing to do; most any example of a job that I can think
of likely involves multiple deferred objects (often chained by returning
them from callbcks).

  Tom



From terry at jon.es  Fri Jun 21 04:26:01 2013
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Jun 2013 11:26:01 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <871u7wkpxi.fsf@hermes.hocat.ca>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
 <871u7wkpxi.fsf@hermes.hocat.ca>
Message-ID: <CACqnu4XZLXF7cXXAxQ1mC8BNheqBe5VtGtk_1jcKNruAufrp1w@mail.gmail.com>

Hi Tom

> Since most apis in twisted don't pass a canceller, the behavior is a2+a3.

Right. That was the intention (glyph's). It was expected that over time
more Twisted apis that create deferreds would add cancellers. As I
understand it, Kai Zhang is now adding cancellers to some apis returning
deferreds, starting with the POP3 client.

Based on JP's comment, I still think I'm missing something here.

The only suggestion I've been making is that, if we wanted to, we could
allow a value to be passed to the cancel call. That would allow errback
functions to receive more information when a Deferred is canceled. You'd
still get a CancelledError in any case, but the value would be in the
exception instance as args[0], as in

In [1]: from twisted.internet.defer import CancelledError
In [2]: e = CancelledError('hey')
In [3]: e.args[0]
Out[3]: 'hey'


Terry


On Fri, Jun 21, 2013 at 6:12 AM, Tom Prince <tom.prince at ualberta.net> wrote:

> Terry Jones <terry at jon.es> writes:
> > OK, maybe someone can explain the original "Well, it already raises
> > `CancelledError`. Every deferred that doesn't have explicitly handle
> > cancelling already does:" to me, because I didn't get it at all!
>
> This is what happens when a deferred is cancelled:
>
> a) If the deferred hasn't been errbacked:
>    1. Call the provied canceller (provided when the deferred is
> constructed)
>    2. If a canceller isn't provided, or if the canceller didn't
>       callback/errback, then errback with CancelledError.
>    3. If a canceller isn't provided, allow callback/errback to be called
>       without error once.
> b) If the deferred has been fired, and is waiting on another deferred,
>    cancel that deferred instead.
>
> Since most apis in twisted don't pass a canceller, the behavior is
> a2+a3.
>
>   Tom
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130621/3b6340c1/attachment-0002.html>

From terry at jon.es  Fri Jun 21 04:41:19 2013
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Jun 2013 11:41:19 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <87y5a4j8ay.fsf@hermes.hocat.ca>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
 <87y5a4j8ay.fsf@hermes.hocat.ca>
Message-ID: <CACqnu4ViCVY8_nagurVvf2SkF3HkyM4X6femLac9QVSZ0PQ4bg@mail.gmail.com>

Hi again Tom

> So, it seems to me that you want to represent your jobs as
> more than simply a deferred. At the very least, you need to record what
> the jobs is, so that it can be restarted later, if necessary.

Yes. The job class contained things like the function to call, its args,
timing information etc., as well a deferred that would fire with the result.

> Deferreds are a way of abstracting data and/or control flow in
> asynchronous way. I'm not sure that trying to think of a deferred as a
> job is a useful thing to do

I wasn't doing that.

The problem that I was originally trying to address by getting 'cancel'
into deferreds is that the control flow you mention gets totally stuck if a
deferred never fires for some reason (this was happening to me in talking
to the Twitter API). E.g., in this case, kicking off a new job relies on an
earlier job finishing (which includes a deferred firing). An app writer
might want to timeout a deferred for some reason. Or the app may need to
shut down. If there's even one deferred that doesn't fire, the whole system
essentially hangs. The idea was simply to increase the amount of control an
app had over the flow of control.

This goes against the thinking that only the code that creates a deferred
can fire it. I don't see anything wrong with that - it just increases the
options that the code which obtains the deferred has. As API writers, we're
used to being in control: we don't think it's a good idea if we create and
return a deferred in a method and the code we return the deferred to then
fires it itself. But as app writers consuming deferreds from these APIs, we
want more control (I do, anyway).  It's possible to have both, which was
what I was trying to provide for. The ControllableDeferred2013 class I
posted last night shows one way. Adding a value arg to cancel() would build
some of that flexibility into Twisted itself.

Hopefully that helps makes things clearer.

Terry


On Fri, Jun 21, 2013 at 7:18 AM, Tom Prince <tom.prince at ualberta.net> wrote:

> Terry Jones <terry at jon.es> writes:
> > But, I also built some queuing things where I would have liked extra
> > information. For example, an app is processing jobs on behalf of a user,
> > [...]
>
> Thinking about this for a little bit, it seems like there is quite a bit
> more state to your jobs, that simply an eventual result (i.e. a
> deferred). So, it seems to me that you want to represent your jobs as
> more than simply a deferred. At the very least, you need to record what
> the jobs is, so that it can be restarted later, if necessary.
>
> Deferreds are a way of abstracting data and/or control flow in
> asynchronous way. I'm not sure that trying to think of a deferred as a
> job is a useful thing to do; most any example of a job that I can think
> of likely involves multiple deferred objects (often chained by returning
> them from callbcks).
>
>   Tom
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130621/fed2cdca/attachment-0002.html>

From i at introo.me  Fri Jun 21 07:41:14 2013
From: i at introo.me (Shiyao Ma)
Date: Fri, 21 Jun 2013 21:41:14 +0800
Subject: [Twisted-Python] Switiching to Formal Parser.
In-Reply-To: <CAJQX3DxBuewypPrAVBNVDb76G-yCjt_azBZxcejyP26uMJNQ-w@mail.gmail.com>
References: <CAJQX3Dz8_tH-O8VJO2xd8WzYbTkhzBFwo71nPhxYP6wbnQeDjQ@mail.gmail.com>
 <CAPkRfURwvx95HTDgDx8F1nuCH2=Qt12GzV=HqgbyyyV8x4t6=A@mail.gmail.com>
 <CABefbUpTMSoLgEYDH1P8oFFtBcRz0gQ2t45gWd_g7BKrz2Pq1Q@mail.gmail.com>
 <CAJQX3DxBuewypPrAVBNVDb76G-yCjt_azBZxcejyP26uMJNQ-w@mail.gmail.com>
Message-ID: <CAJQX3DyWUDx_pHjPhRGn25u7edv3ef_V3Z00YUCf=REthAoH4w@mail.gmail.com>

I've come across some problems in parsley. One problem is that dns lables
has a compression scheme "11offset". I dunno how to jump back to the parsed
data to get the labels.


On Thu, Jun 20, 2013 at 8:39 PM, Shiyao Ma <i at introo.me> wrote:

> My original plan, as suggested by exarkun, is to start with something easy
> to implement like netstring and then move on to advanced ones. But after
> today's video chat with tom and dash, I will begin by rewriting the
> Message.decode/encode part inside names.dns. The expected outcome, I think,
> is to test parsley with datagram based protocols (dns) and more complicated
> stream protocols.
> As said by tom, the code would probably not be merged into trunk, it's
> just an experiment.
>
>
> On Thu, Jun 20, 2013 at 6:14 PM, Richard Wall <m-lists at the-moon.net>wrote:
>
>> On 20 June 2013 04:04, Christopher Armstrong <radix at twistedmatrix.com>
>> wrote:
>> > Hi Shiyao, I'm happy that you chose Twisted as your SoC project. I just
>> want
>> > to point out that Richard Wall (rwall on IRC) has been working a lot on
>> DNS
>> > lately, he may be interested in the work you're doing.
>>
>> Hello Shiyao,
>>
>> Yes, I'm really pleased that you chose to start with twisted.names and
>> I'm looking forward to seeing Parsley in action!
>>
>
>
> --
> http://about.me/introom
>
>


-- 
http://about.me/introom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130621/cefa2f80/attachment-0002.html>

From william.mccall at gmail.com  Fri Jun 21 08:20:25 2013
From: william.mccall at gmail.com (William McCall)
Date: Fri, 21 Jun 2013 09:20:25 -0500
Subject: [Twisted-Python] IMAP IDLE
Message-ID: <51C46129.2020705@gmail.com>

All--

Because I have seen it asked before (and because I have plans for it), I 
have a half-way implementation of IMAP IDLE.

Yes, I am aware this is very uhh... fabulously written.

https://github.com/williammccall/twisted-imap-idle

Something I am looking to do is add a method to the Command class so I 
don't have to use the list hack to get the +'s sent to the callback. 
Maybe I'll submit a patch if I'm less lazy.

Comments welcome!

--WM



From exarkun at twistedmatrix.com  Fri Jun 21 08:30:45 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Jun 2013 14:30:45 -0000
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4XZLXF7cXXAxQ1mC8BNheqBe5VtGtk_1jcKNruAufrp1w@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
 <871u7wkpxi.fsf@hermes.hocat.ca>
 <CACqnu4XZLXF7cXXAxQ1mC8BNheqBe5VtGtk_1jcKNruAufrp1w@mail.gmail.com>
Message-ID: <20130621143045.10961.1431395332.divmod.xquotient.57@top>

On 10:26 am, terry at jon.es wrote:
>Hi Tom
>>Since most apis in twisted don't pass a canceller, the behavior is 
>>a2+a3.
>
>Right. That was the intention (glyph's). It was expected that over time
>more Twisted apis that create deferreds would add cancellers. As I
>understand it, Kai Zhang is now adding cancellers to some apis 
>returning
>deferreds, starting with the POP3 client.
>
>Based on JP's comment, I still think I'm missing something here.
>
>The only suggestion I've been making is that, if we wanted to, we could
>allow a value to be passed to the cancel call. That would allow errback
>functions to receive more information when a Deferred is canceled. 
>You'd
>still get a CancelledError in any case, but the value would be in the
>exception instance as args[0], as in

An idea very much like this was discussed when Deferred cancellation was 
being implemented.  My recollection is that it was ultimately explicitly 
rejected, though I don't remember why nor do I find discussion of it on 
the ticket (#990) (lack of this information somewhere seems like a 
failure of the development process).  I admit the idea of being able to 
get additional information passed through the system seems appealing to 
me, but *not* having any additional information does simplify the 
interface.  Considering how much trouble people already have with 
Deferreds without even bringing cancellation into play, maybe the 
simpler interface is a good thing.

My earlier point was that any Deferred for which cancellation is not 
already explicitly implemented already has a cancellation behavior: it 
will fire its errback chain with `CancelledError`.  It is an 
incompatible change to replace this with a different exception type - 
such as `ConnectionDone`.

This is slightly different than your suggestion, Terry, I think - in 
that you propose sticking more information onto the `CancelledError`, 
not changing the type of the `Failure` that is sent down the errback 
chain.  However, the thread was started specifically with the question 
of whether changing `CancelledError` to `ConnectionDone` is acceptable 
and that's the point I was mainly focused on.

Jean-Paul



From exarkun at twistedmatrix.com  Fri Jun 21 09:05:27 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Jun 2013 15:05:27 -0000
Subject: [Twisted-Python] Private positional argument API anti-pattern
Message-ID: <20130621150527.10961.273889498.divmod.xquotient.64@top>

Hello,

I've noticed there are a couple public APIs in Twisted now that accept a 
"private" positional argument.  I use scare quotes because I don't see 
how it's actually possible to make a positional argument private.

Given a function defined like this:

    def foo(_bar=None):
        ...

There is no indication that a use like this is problematic:

    foo(3)

Perhaps the situation will be different with keyword-only arguments, but 
for positional arguments I think it's unproductive and perhaps even 
confusing to name arguments this way.

I suggest we fix the couple places where this has been done so far and 
we avoid introducing any new instances.

FWIW, I found two examples of this in Twisted using:

    $ grep -E '\W_reactor' twisted/ -r --include '*.py' | grep -E 'def\W'

Jean-Paul



From terry at jon.es  Fri Jun 21 09:42:09 2013
From: terry at jon.es (Terry Jones)
Date: Fri, 21 Jun 2013 16:42:09 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <20130621143045.10961.1431395332.divmod.xquotient.57@top>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
 <871u7wkpxi.fsf@hermes.hocat.ca>
 <CACqnu4XZLXF7cXXAxQ1mC8BNheqBe5VtGtk_1jcKNruAufrp1w@mail.gmail.com>
 <20130621143045.10961.1431395332.divmod.xquotient.57@top>
Message-ID: <CACqnu4Wt8RF6wcD6hFLxXz2F=z-Gc27Yb2Pnj4Rmsu4fOmqc5A@mail.gmail.com>

Hi JP

Thanks for the summary. I agree (and agreed in my first post in this
thread) that the CancelledError should (has to) come all the way back. I
missed that we were still talking about that.

Was there a conclusion on Glyph's suggestion of using subclasses of
CancelledError? Chris raised the point that there might be many of them for
a given API. But an API could define a few subclasses, just the most useful
to start with (if there are any at all), and document them, and later
define some more if need be, etc. That would be backwards consistent with
processing by Failure.check and try/except on CancelledError - unless my
Python memory has rotted more than I think. It seems a good path to
providing more info (for APIs that want to). Or is there a problem with it
that I also missed?

Terry



On Fri, Jun 21, 2013 at 3:30 PM, <exarkun at twistedmatrix.com> wrote:

> On 10:26 am, terry at jon.es wrote:
>
>> Hi Tom
>>
>>> Since most apis in twisted don't pass a canceller, the behavior is a2+a3.
>>>
>>
>> Right. That was the intention (glyph's). It was expected that over time
>> more Twisted apis that create deferreds would add cancellers. As I
>> understand it, Kai Zhang is now adding cancellers to some apis returning
>> deferreds, starting with the POP3 client.
>>
>> Based on JP's comment, I still think I'm missing something here.
>>
>> The only suggestion I've been making is that, if we wanted to, we could
>> allow a value to be passed to the cancel call. That would allow errback
>> functions to receive more information when a Deferred is canceled. You'd
>> still get a CancelledError in any case, but the value would be in the
>> exception instance as args[0], as in
>>
>
> An idea very much like this was discussed when Deferred cancellation was
> being implemented.  My recollection is that it was ultimately explicitly
> rejected, though I don't remember why nor do I find discussion of it on the
> ticket (#990) (lack of this information somewhere seems like a failure of
> the development process).  I admit the idea of being able to get additional
> information passed through the system seems appealing to me, but *not*
> having any additional information does simplify the interface.  Considering
> how much trouble people already have with Deferreds without even bringing
> cancellation into play, maybe the simpler interface is a good thing.
>
> My earlier point was that any Deferred for which cancellation is not
> already explicitly implemented already has a cancellation behavior: it will
> fire its errback chain with `CancelledError`.  It is an incompatible change
> to replace this with a different exception type - such as `ConnectionDone`.
>
> This is slightly different than your suggestion, Terry, I think - in that
> you propose sticking more information onto the `CancelledError`, not
> changing the type of the `Failure` that is sent down the errback chain.
>  However, the thread was started specifically with the question of whether
> changing `CancelledError` to `ConnectionDone` is acceptable and that's the
> point I was mainly focused on.
>
>
> Jean-Paul
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130621/f197046c/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri Jun 21 13:35:39 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 21 Jun 2013 19:35:39 -0000
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4Wt8RF6wcD6hFLxXz2F=z-Gc27Yb2Pnj4Rmsu4fOmqc5A@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4USk=fwB80ydmeE0Vd=J2JqRKWo7dD3EO8OHsNPj0BF+Q@mail.gmail.com>
 <871u7wkpxi.fsf@hermes.hocat.ca>
 <CACqnu4XZLXF7cXXAxQ1mC8BNheqBe5VtGtk_1jcKNruAufrp1w@mail.gmail.com>
 <20130621143045.10961.1431395332.divmod.xquotient.57@top>
 <CACqnu4Wt8RF6wcD6hFLxXz2F=z-Gc27Yb2Pnj4Rmsu4fOmqc5A@mail.gmail.com>
Message-ID: <20130621193539.10961.1423872571.divmod.xquotient.74@top>

On 03:42 pm, terry at jon.es wrote:
>Hi JP
>
>Thanks for the summary. I agree (and agreed in my first post in this
>thread) that the CancelledError should (has to) come all the way back. 
>I
>missed that we were still talking about that.
>
>Was there a conclusion on Glyph's suggestion of using subclasses of
>CancelledError? Chris raised the point that there might be many of them 
>for
>a given API. But an API could define a few subclasses, just the most 
>useful
>to start with (if there are any at all), and document them, and later
>define some more if need be, etc. That would be backwards consistent 
>with
>processing by Failure.check and try/except on CancelledError - unless 
>my
>Python memory has rotted more than I think. It seems a good path to
>providing more info (for APIs that want to). Or is there a problem with 
>it
>that I also missed?

I think technically that would solve the problem.  It sounds like a bit 
of a nightmare though.  But that's what we get for using types to 
indicate error conditions, I suppose?

Cancellation is still new, and I don't think many people are using it 
yet (how could they, since no one has bothered to write any 
documentation for it).  I suspect different people probably also have 
different ideas about how it *should* be used - and so we've probably 
all started to go off in somewhat different directions, which is going 
to result in disagreement in what practices are best.

I think the best possible next step here is to actually document what 
it's already possible to do with cancellation (I think there are several 
non-obvious tricks - mainly in the area of asynchronous cancellation, a 
feature not *explicitly* supported by the API, but still possible). 
After that, perhaps we'll be able to see what it's *not* possible to do 
and then a discussion about how to fill in the gaps in functionality 
will be a lot easier to have.

Jean-Paul



From glyph at twistedmatrix.com  Fri Jun 21 17:40:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 21 Jun 2013 16:40:40 -0700
Subject: [Twisted-Python] How hard is it to have log levels,
	really?  was: logging
In-Reply-To: <20130620230338.10961.128413721.divmod.xquotient.35@top>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
 <CALCsMPQowfBDHARBGh+ySqyBKCcnLr=+smO54Czc5DAjWKRs5Q@mail.gmail.com>
 <20130620230338.10961.128413721.divmod.xquotient.35@top>
Message-ID: <10868E9B-C3FC-40F6-B510-3503C1D1F495@twistedmatrix.com>


On Jun 20, 2013, at 4:03 PM, exarkun at twistedmatrix.com wrote:

> On 18 Jun, 08:58 pm, termim at gmail.com wrote:
>> From the practical POV the most welcomed first step in updating the Twisted
>> log system would be introduction of ready made log levels (with an ability
>> to filter on them in observers), fix of logPrefix thing and somewhat
>> extended set of available observers (syslog, email, socket, etc.)
>> Everything else could wait more detailed design etc.
> 
> Is there an obstacle preventing this from being done with twisted.python.log?
> 
> A completely new system written from scratch from the ground up might be great, but it doesn't seem necessary for something as simple as log level support.
> 
> Jean-Paul

Nope.  Anyone who wants to start adding log levels to any existing messages is welcome to do so.  There's no particular conflict with the new system, either; more information in log messages will just be even easier to utilize with some of its improvements.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130621/690fd863/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jun 21 17:45:51 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 21 Jun 2013 16:45:51 -0700
Subject: [Twisted-Python] IMAP IDLE
In-Reply-To: <51C46129.2020705@gmail.com>
References: <51C46129.2020705@gmail.com>
Message-ID: <0183FFA8-FC78-4380-8231-D6E0EF2194E8@twistedmatrix.com>


On Jun 21, 2013, at 7:20 AM, William McCall <william.mccall at gmail.com> wrote:

> Comments welcome!

The main comment I have is: no tests!!! ;)

If you're going to submit this as a patch, it would of course be very helpful to have unit test coverage.

If you need help figuring out how to do that, feel free to ask questions.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130621/889a9c8e/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jun 21 17:48:05 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 21 Jun 2013 16:48:05 -0700
Subject: [Twisted-Python] Private positional argument API anti-pattern
In-Reply-To: <20130621150527.10961.273889498.divmod.xquotient.64@top>
References: <20130621150527.10961.273889498.divmod.xquotient.64@top>
Message-ID: <208C0D41-E6AC-47BD-B1C5-54ACA2C57E38@twistedmatrix.com>


On Jun 21, 2013, at 8:05 AM, exarkun at twistedmatrix.com wrote:

> Hello,
> 
> I've noticed there are a couple public APIs in Twisted now that accept a "private" positional argument.  I use scare quotes because I don't see how it's actually possible to make a positional argument private.
> 
> Given a function defined like this:
> 
>   def foo(_bar=None):
>       ...
> 
> There is no indication that a use like this is problematic:
> 
>   foo(3)
> 
> Perhaps the situation will be different with keyword-only arguments, but for positional arguments I think it's unproductive and perhaps even confusing to name arguments this way.
> 
> I suggest we fix the couple places where this has been done so far and we avoid introducing any new instances.
> 
> FWIW, I found two examples of this in Twisted using:
> 
>   $ grep -E '\W_reactor' twisted/ -r --include '*.py' | grep -E 'def\W'

I second this suggestion.

Furthermore, in most cases where one is tempted to make a reactor *attribute* private, it's probably best to make it public.  There are lots of legitimate uses to parameterize the reactor and to discover which one a particular object is using.

The case where one is tempted to make an argument private like this seems to be somewhere that we feel that something should be parameterized "only for testing".  If we need to parameterize it for testing, our users probably need to parameterize it for *their* tests, too.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130621/ec943a70/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jun 21 17:57:41 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 21 Jun 2013 16:57:41 -0700
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <20130620193435.10961.1679313466.divmod.xquotient.30@top>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
Message-ID: <200AFE9D-10BA-4202-8E22-1F69C43CDD99@twistedmatrix.com>


On Jun 20, 2013, at 12:34 PM, exarkun at twistedmatrix.com wrote:

> Thank you for pointing this out.  It seems like an important fact that makes the rest of the discussion moot.
> 
> By making `Deferred.cancel` work on any Deferred by triggering a `CancelledError`, we have already decided on the failure behavior for all existing Deferred-returning APIs.  Changing that at this point doesn't seem like a very good idea.
> 
> I think I'd also like to challenge the idea that Glyph put forwards earlier in the thread that this extra information is *necessarily* important to the application.

These are all pretty good points.

In fact, I think I'm going to withdraw my suggestion.  Having better ways to classify errors would be useful in some circumstances, but it's demonstrably not *necessary*, and a system to arbitrarily classify every single cancellation that any Deferred might raise (not to mention documentation of how to make use of all this information).

So I will save any further words I might write in this thread for narrative documentation for cancellation :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130621/c6306a85/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Jun 22 06:49:54 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 22 Jun 2013 12:49:54 -0000
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <200AFE9D-10BA-4202-8E22-1F69C43CDD99@twistedmatrix.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <200AFE9D-10BA-4202-8E22-1F69C43CDD99@twistedmatrix.com>
Message-ID: <20130622124954.10961.1233056233.divmod.xquotient.79@top>

On 21 Jun, 11:57 pm, glyph at twistedmatrix.com wrote:
>
>
>So I will save any further words I might write in this thread for 
>narrative documentation for cancellation :).

Woooooooooooooooo
>-glyph



From JP at eukor.com  Sat Jun 22 13:17:31 2013
From: JP at eukor.com (JP at eukor.com)
Date: Sun, 23 Jun 2013 04:17:31 +0900 (KST)
Subject: [Twisted-Python]
	=?euc-kr?q?If_the_errbacks_of_a_canceled_Deferre?=
	=?euc-kr?q?d_are_called_with_error_other_than_CancelledError=2C_is?=
	=?euc-kr?q?_this_acceptable=3F?=
Message-ID: <20130622191731.A5DC4104A63@mmp.eukor21.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130623/17903276/attachment-0002.html>

From tom.prince at ualberta.net  Sat Jun 22 16:14:32 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 22 Jun 2013 16:14:32 -0600
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
	called with error other than CancelledError, is this acceptable?
In-Reply-To: <CACqnu4ViCVY8_nagurVvf2SkF3HkyM4X6femLac9QVSZ0PQ4bg@mail.gmail.com>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
 <87y5a4j8ay.fsf@hermes.hocat.ca>
 <CACqnu4ViCVY8_nagurVvf2SkF3HkyM4X6femLac9QVSZ0PQ4bg@mail.gmail.com>
Message-ID: <87txkpkd2v.fsf@hermes.hocat.ca>

Terry Jones <terry at jon.es> writes:

> Based on JP's comment, I still think I'm missing something here.

The original subject of this thread? There was a question of what errorq

> The problem that I was originally trying to address by getting 'cancel'
> into deferreds is that the control flow you mention gets totally stuck if a
> deferred never fires for some reason (this was happening to me in talking
> to the Twitter API).

.cancel as currently implemented addresses this, as calling cancel
causes the deferred to fire.

> This goes against the thinking that only the code that creates a deferred
> can fire it.

To allow anything else would be to break the abstraction

    d = Deferred()
    return d
    ...
    d.callback(5)

vs.
    d = Deferred()
    d.addCallback(lambda x: x+1)
    return d
    ...
    d.callback(4)

There is currently no way of distinguishing these to code
snippets. Allowing other code to callback/errback the deferred
would cause different results in the two cases.

> As API writers, we're used to being in control: we don't think it's a
> good idea if we create and return a deferred in a method and the code
> we return the deferred to then fires it itself.

It isn't so much a matter of control, as of abstraction. It isn't
uncommon for a single deferred to be pass through several systems, with
each stage adding more callbacks, changing the value that the next stage
will see in the callbacks they add.

If the "final" consumer could fire the deferred with any value, it would
need to know about all the stagse (or at least the first one) to know
what kind of value to put in.

> But as app writers consuming deferreds from these APIs, we
> want more control (I do, anyway).

Well, the consumer can't control the deferreds that it gets but, as your
code demonstrates, it is easy enough to create a new deferred that
behaves however the consumer wants. The fact that this isn't the same
object isn't signifiant, since the identity of deferreds isn't an
interesting thing.


> The ControllableDeferred2013 class I posted last night shows one
> way.

One comment about the code you posted: There doesn't really seem to be a
need to create a sepearte class, that forwards
.addCallback/.addErrback. You can just create a regular deferred that is
hooked hooked up in the appropriate way. (It may make sense for the
stage that sets this up to have an object, but it shouldn't pass it
along, it should just pass a regular deferred on). There are a few
places that accept deferreds that depend on the object being an instance
of deferred, which your object isn't.

  Tom



From terry at jon.es  Sat Jun 22 17:52:08 2013
From: terry at jon.es (Terry Jones)
Date: Sun, 23 Jun 2013 00:52:08 +0100
Subject: [Twisted-Python] If the errbacks of a canceled Deferred are
 called with error other than CancelledError, is this acceptable?
In-Reply-To: <87txkpkd2v.fsf@hermes.hocat.ca>
References: <CAK_130R25zrywg6aShRsZ4uS3chHN16DWmN80u-fJ0XZGZZ6ag@mail.gmail.com>
 <CAOp9P3rWUMM7zO8cNmRkYGFGFbJF4KSpPH4cG1seb078_BT_ZA@mail.gmail.com>
 <CAPkRfUSYXqvNsTq=oXGUb9TAeDgpyaCcmcHPZPo6saUNhsJ8mQ@mail.gmail.com>
 <5202E5B3-E32C-40D6-81A7-2556AA91680A@twistedmatrix.com>
 <87y5a5g9tc.fsf@loki.hocat.ca>
 <20130620193435.10961.1679313466.divmod.xquotient.30@top>
 <CACqnu4UAbXjyvKdFuYSkyBtotx2dBSotFKG6qoAP9Oask81BLg@mail.gmail.com>
 <87y5a4j8ay.fsf@hermes.hocat.ca>
 <CACqnu4ViCVY8_nagurVvf2SkF3HkyM4X6femLac9QVSZ0PQ4bg@mail.gmail.com>
 <87txkpkd2v.fsf@hermes.hocat.ca>
Message-ID: <CACqnu4W7PfSXUmpRVrfSjjZ5eWZaksmB9aRF6nc5P3jV_OHokw@mail.gmail.com>

Hi Tom

I'm not sure we should continue this discussion on the list seeing as the
original issue seems to be settled. Anyway, here's an answer and maybe we
could/should take it offline if there's more to say?

On Sat, Jun 22, 2013 at 11:14 PM, Tom Prince <tom.prince at ualberta.net>wrote:

> Terry Jones <terry at jon.es> writes:
> > The problem that I was originally trying to address by getting 'cancel'
> > into deferreds is that the control flow you mention gets totally stuck
> if a
> > deferred never fires for some reason (this was happening to me in talking
> > to the Twitter API).
>
> .cancel as currently implemented addresses this, as calling cancel
> causes the deferred to fire.


Right. When I say "originally" I mean in Jan 2010, before cancel was
implemented. See the thread URL I posted a couple of times in this thread
to see how it wen t down.


> > This goes against the thinking that only the code that creates a deferred
> > can fire it.
>
> To allow anything else would be to break the abstraction
>
>     d = Deferred()
>     return d
>     ...
>     d.callback(5)
>
> vs.
>     d = Deferred()
>     d.addCallback(lambda x: x+1)
>     return d
>     ...
>     d.callback(4)
>
> There is currently no way of distinguishing these to code
> snippets. Allowing other code to callback/errback the deferred
> would cause different results in the two cases.


That depends how you do it. If you actually have 2 deferreds, the original
(which you can't err/callback yourself cause things will break) and one
that you create yourself (as a "controllable" deferred), then you can allow
the latter to be call/errbacked and hook the former up to the latter if the
former fires first. That's what the code samples I posted do, including the
one from Jan 2010.


> > As API writers, we're used to being in control: we don't think it's a
> > good idea if we create and return a deferred in a method and the code
> > we return the deferred to then fires it itself.
>
> It isn't so much a matter of control, as of abstraction. It isn't
> uncommon for a single deferred to be pass through several systems, with
> each stage adding more callbacks, changing the value that the next stage
> will see in the callbacks they add.
>

Right.


> If the "final" consumer could fire the deferred with any value, it would
> need to know about all the stagse (or at least the first one) to know
> what kind of value to put in.


In the ControlableDeferred2013 class I posted the other night, this isn't
the case. If the deferred using code fires it, the only callbacks and
errbacks that are run are ones that that code added (not ones added to the
original deferred by the code that made it or any intermediates).


> > But as app writers consuming deferreds from these APIs, we
> > want more control (I do, anyway).
>
> Well, the consumer can't control the deferreds that it gets but, as your
> code demonstrates, it is easy enough to create a new deferred that
> behaves however the consumer wants. The fact that this isn't the same
> object isn't signifiant, since the identity of deferreds isn't an
> interesting thing.


Yes.

> The ControllableDeferred2013 class I posted last night shows one
> > way.
>
> One comment about the code you posted: There doesn't really seem to be a
> need to create a sepearte class, that forwards
> .addCallback/.addErrback. You can just create a regular deferred that is
> hooked hooked up in the appropriate way. (It may make sense for the
> stage that sets this up to have an object, but it shouldn't pass it
> along, it should just pass a regular deferred on). There are a few
> places that accept deferreds that depend on the object being an instance
> of deferred, which your object isn't.


Yes, you can do that too (and there are other approaches). Here's a
subclassing version that's similar to what you just described:
http://twistedmatrix.com/pipermail/twisted-python/2010-January/021311.html
They're all basically the same idea (at least the way I do it), just based
on setting up another deferred and hooking the original up to it when/if
needed.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130623/e2d70cf3/attachment-0002.html>

From william.mccall at gmail.com  Sun Jun 23 13:11:22 2013
From: william.mccall at gmail.com (William McCall)
Date: Sun, 23 Jun 2013 14:11:22 -0500
Subject: [Twisted-Python] IMAP IDLE
In-Reply-To: <0183FFA8-FC78-4380-8231-D6E0EF2194E8@twistedmatrix.com>
References: <51C46129.2020705@gmail.com>
 <0183FFA8-FC78-4380-8231-D6E0EF2194E8@twistedmatrix.com>
Message-ID: <51C7485A.1080108@gmail.com>

On 06/21/2013 06:45 PM, Glyph wrote:
>
> On Jun 21, 2013, at 7:20 AM, William McCall <william.mccall at gmail.com 
> <mailto:william.mccall at gmail.com>> wrote:
>
>> Comments welcome!
>
> The main comment I have is: no tests!!! ;)
>
> If you're going to submit this as a patch, it would of course be very 
> helpful to have unit test coverage.
>
> If you need help figuring out how to do that, feel free to ask questions.
>
> -glyph
>
>

Thanks for the comments and support, Glyph. I'll work on that soon.

--WM
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130623/0ac5f1cb/attachment-0002.html>

From rutt.4 at osu.edu  Wed Jun 26 08:15:23 2013
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Wed, 26 Jun 2013 10:15:23 -0400
Subject: [Twisted-Python] deferToThread and thrown exceptions break gc -
	ticket 3853
Message-ID: <CAMWA1_oYZNNP2nhtAoEsaFAH4iuFXB+=O-mQrDYmAigak+Vk9g@mail.gmail.com>

Hi,

I believe I hit http://twistedmatrix.com/trac/ticket/3853 in production
this week, in the form of what looked like a resource leak, but turned out
to be a case of a resource held for much longer than expected.  (I'm using
python 2.7, and twisted 12.3.0).

That is, I had a function invoked by deferToThread, that searched a file by
memory mapping it using the 'mmap' module.  And if my function could not
find what it was looking for in the file, it raised an exception at the
end.  I observed that my process was still hanging on to the mmap, due to
my local variable representing the mmap (which I presumed would have been
gc'd as it went out of scope as part of the throw) not being gc'd when the
function ended.  I can work around it in my function by setting that local
variable to None right before I throw, but this is python, not C, and in
python automatic memory management is assumed.

So, +1 for that issue getting fixed.   From the issue it looks like there
is a deeper issue in python itself that could fix this, but as the fix
discussion is moving at a glacial pace, I say +1 for a twisted workaround,
which from the trac discussion, sounds possible.  Thanks,
-- 
Benjamin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130626/eecc0ff8/attachment-0002.html>

From radix at twistedmatrix.com  Wed Jun 26 11:03:36 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 26 Jun 2013 12:03:36 -0500
Subject: [Twisted-Python] deferToThread and thrown exceptions break gc -
 ticket 3853
In-Reply-To: <CAMWA1_oYZNNP2nhtAoEsaFAH4iuFXB+=O-mQrDYmAigak+Vk9g@mail.gmail.com>
References: <CAMWA1_oYZNNP2nhtAoEsaFAH4iuFXB+=O-mQrDYmAigak+Vk9g@mail.gmail.com>
Message-ID: <CAPkRfUQ5JJswMPseum7X=MJFq6UVhPN4vcLK40NBFxgHRaczig@mail.gmail.com>

On Wed, Jun 26, 2013 at 9:15 AM, Benjamin Rutt <rutt.4 at osu.edu> wrote:

> Hi,
>
> I believe I hit http://twistedmatrix.com/trac/ticket/3853 in production
> this week, in the form of what looked like a resource leak, but turned out
> to be a case of a resource held for much longer than expected.  (I'm using
> python 2.7, and twisted 12.3.0).
>
> That is, I had a function invoked by deferToThread, that searched a file
> by memory mapping it using the 'mmap' module.  And if my function could not
> find what it was looking for in the file, it raised an exception at the
> end.  I observed that my process was still hanging on to the mmap, due to
> my local variable representing the mmap (which I presumed would have been
> gc'd as it went out of scope as part of the throw) not being gc'd when the
> function ended.  I can work around it in my function by setting that local
> variable to None right before I throw, but this is python, not C, and in
> python automatic memory management is assumed.
>
> So, +1 for that issue getting fixed.   From the issue it looks like there
> is a deeper issue in python itself that could fix this, but as the fix
> discussion is moving at a glacial pace, I say +1 for a twisted workaround,
> which from the trac discussion, sounds possible.  Thanks,
>
>
Like you said, it looks like there's already a patch that can solve the
problem. All it needs before it can be reviewed is tests. If you could
spare some time to write one (or however many are needed) then that would
increase the ticket's chances for resolution quite a bit :)


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130626/d0c46f5f/attachment-0002.html>

From rutt.4 at osu.edu  Wed Jun 26 14:15:23 2013
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Wed, 26 Jun 2013 16:15:23 -0400
Subject: [Twisted-Python] deferToThread and thrown exceptions break gc -
 ticket 3853
In-Reply-To: <CAPkRfUQ5JJswMPseum7X=MJFq6UVhPN4vcLK40NBFxgHRaczig@mail.gmail.com>
References: <CAMWA1_oYZNNP2nhtAoEsaFAH4iuFXB+=O-mQrDYmAigak+Vk9g@mail.gmail.com>
 <CAPkRfUQ5JJswMPseum7X=MJFq6UVhPN4vcLK40NBFxgHRaczig@mail.gmail.com>
Message-ID: <CAMWA1_pC=KLMsRj-kDhvjPEm0tp-zRGPd6UfeNsUVg5-h8qOhw@mail.gmail.com>

I am not sure that that trac issue contains a patch that will fix it.  The
most recent patch on that trac issue is for twisted 8.1, and it does not
apply cleanly to twisted 12.3.0.  When I tried to place the 2 lines that
form the patch in the most obvious place in the 12.3.0 codebase (before the
code 'self.waiters.append(ct)') I could not get it to fix the repro I have.
 Here's my repro:

from twisted.internet import reactor
from twisted.internet.threads import deferToThread

class SomeClass(object):
    def __del__(self):
        print 'SomeClass\'s destructor was called!'

def foo():
    sc = SomeClass()
    raise RuntimeError('bah')

def shutmedown(data):
    print 'reactor shutdown happening now'
    reactor.stop()

def go():
    d = deferToThread(foo)
    d.addCallbacks(shutmedown, shutmedown)
reactor.callWhenRunning(go)
reactor.run()

and running it:

$ ./twisted-defertothread-bug.py
reactor shutdown happening now
SomeClass's destructor was called!

The bug is present, as the instance of SomeClass only gets gc'd once the
reactor shuts down (taking the thread pool with it), not when the foo()
function terminates.  Obviously I'm using CPython, which uses reference
counting gc, so there is no reason to delay the reclaim of the SomeClass
instance until after the function exit.


On Wed, Jun 26, 2013 at 1:03 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Wed, Jun 26, 2013 at 9:15 AM, Benjamin Rutt <rutt.4 at osu.edu> wrote:
>
>> Hi,
>>
>> I believe I hit http://twistedmatrix.com/trac/ticket/3853 in production
>> this week, in the form of what looked like a resource leak, but turned out
>> to be a case of a resource held for much longer than expected.  (I'm using
>> python 2.7, and twisted 12.3.0).
>>
>> That is, I had a function invoked by deferToThread, that searched a file
>> by memory mapping it using the 'mmap' module.  And if my function could not
>> find what it was looking for in the file, it raised an exception at the
>> end.  I observed that my process was still hanging on to the mmap, due to
>> my local variable representing the mmap (which I presumed would have been
>> gc'd as it went out of scope as part of the throw) not being gc'd when the
>> function ended.  I can work around it in my function by setting that local
>> variable to None right before I throw, but this is python, not C, and in
>> python automatic memory management is assumed.
>>
>> So, +1 for that issue getting fixed.   From the issue it looks like there
>> is a deeper issue in python itself that could fix this, but as the fix
>> discussion is moving at a glacial pace, I say +1 for a twisted workaround,
>> which from the trac discussion, sounds possible.  Thanks,
>>
>>
> Like you said, it looks like there's already a patch that can solve the
> problem. All it needs before it can be reviewed is tests. If you could
> spare some time to write one (or however many are needed) then that would
> increase the ticket's chances for resolution quite a bit :)
>
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Benjamin Rutt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130626/b23c0eff/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Jun 26 15:07:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 26 Jun 2013 21:07:25 -0000
Subject: [Twisted-Python] deferToThread and thrown exceptions break gc -
 ticket 3853
In-Reply-To: <CAMWA1_pC=KLMsRj-kDhvjPEm0tp-zRGPd6UfeNsUVg5-h8qOhw@mail.gmail.com>
References: <CAMWA1_oYZNNP2nhtAoEsaFAH4iuFXB+=O-mQrDYmAigak+Vk9g@mail.gmail.com>
 <CAPkRfUQ5JJswMPseum7X=MJFq6UVhPN4vcLK40NBFxgHRaczig@mail.gmail.com>
 <CAMWA1_pC=KLMsRj-kDhvjPEm0tp-zRGPd6UfeNsUVg5-h8qOhw@mail.gmail.com>
Message-ID: <20130626210725.28793.316817.divmod.xquotient.35@top>

On 08:15 pm, rutt.4 at osu.edu wrote:
>I am not sure that that trac issue contains a patch that will fix it. 
>The
>most recent patch on that trac issue is for twisted 8.1, and it does 
>not
>apply cleanly to twisted 12.3.0.  When I tried to place the 2 lines 
>that
>form the patch in the most obvious place in the 12.3.0 codebase (before 
>the
>code 'self.waiters.append(ct)') I could not get it to fix the repro I 
>have.
>Here's my repro:
>
>from twisted.internet import reactor
>from twisted.internet.threads import deferToThread
>
>class SomeClass(object):
>    def __del__(self):
>        print 'SomeClass\'s destructor was called!'

You need to be a little careful here.  Adding an object with a `__del__` 
method is a good way to further confuse garbage collection issues.  For 
this test to be valid, you now also need to prove that this object never 
becomes part of a reference cycle.

It's generally safer to use a weakref with a callback to prove things 
about when objects get collected.

However, I don't think this is a problem in this case.

I did modify your example in another way though:

from twisted.internet import reactor
from twisted.internet.threads import deferToThread

class SomeClass(object):
    def __del__(self):
        print "SomeClass\'s destructor was called!"

def foo():
    sc = SomeClass()
    raise RuntimeError('bah')

def shutmedown(data):
    print 'reactor shutdown happening soon'
    reactor.callLater(1, stop)

def stop():
    print 'reactor shutdown happening now'
    reactor.stop()

def go():
    d = deferToThread(foo)
    d.addCallbacks(shutmedown, shutmedown)
reactor.callWhenRunning(go)
reactor.run()
print 'Reactor shutdown'

Notice that now it doesn't shutdown as soon as the thread completes, but 
lets execution continue for a little while longer.

Against trunk at HEAD on Debian Wheezy, I see this behavior:

reactor shutdown happening soon
reactor shutdown happening now
SomeClass's destructor was called!
Reactor shutdown

This still shows there is a problem, since the object is kept alive for 
an arbitrary amount of time after the function in the thread raises the 
exception.

Then I inserted just the `sys.exc_clear()` call above the "with 
self._workerState..." statement in threadpool.py in trunk at HEAD.  This 
changes the behavior to:

with
reactor shutdown happening soon
SomeClass's destructor was called!
reactor shutdown happening now
Reactor shutdown

Notice the destructor is called sooner.  From watching this run, I can 
also say it is called soon after the callback on the deferToThread 
Deferred fires (not, say, after the 1 second delay I inserted).

Whether or not it's possible to have the destructor called *even* sooner 
than this, I don't know.  This behavior does seem like it's good enough 
for most cases though.

Jean-Paul



From jamesbroadhead at gmail.com  Thu Jun 27 17:12:37 2013
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Fri, 28 Jun 2013 00:12:37 +0100
Subject: [Twisted-Python] EuroPython Sprint Ideas?
Message-ID: <CA+hid6HK2S093KoxdwnNkeOeLz8Y6-hL8pVXo4fZBgen5Z-0tw@mail.gmail.com>

Hi guys,

EuroPython is just around the corner, so I was wondering if there are a few
people from this list going, and whether any of you have suggestions for a
sprinting session. There are around 60 people with the 'Twisted' tag on the
EuroPython site, so we could probably put together a moderate-sized team to
work on a larger feature.
It would be really helpful if someone who has actually made some Twisted
commits could be there too, for process and guidance etc. .

Suggestions / bug links welcome, even if you're not going to be there!

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130628/c2ad5553/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Jun 27 18:39:47 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 28 Jun 2013 00:39:47 -0000
Subject: [Twisted-Python] EuroPython Sprint Ideas?
In-Reply-To: <CA+hid6HK2S093KoxdwnNkeOeLz8Y6-hL8pVXo4fZBgen5Z-0tw@mail.gmail.com>
References: <CA+hid6HK2S093KoxdwnNkeOeLz8Y6-hL8pVXo4fZBgen5Z-0tw@mail.gmail.com>
Message-ID: <20130628003947.28793.1938984249.divmod.xquotient.41@top>

On 27 Jun, 11:12 pm, jamesbroadhead at gmail.com wrote:
>Hi guys,
>
>EuroPython is just around the corner, so I was wondering if there are a 
>few
>people from this list going, and whether any of you have suggestions 
>for a
>sprinting session. There are around 60 people with the 'Twisted' tag on 
>the
>EuroPython site, so we could probably put together a moderate-sized 
>team to
>work on a larger feature.
>It would be really helpful if someone who has actually made some 
>Twisted
>commits could be there too, for process and guidance etc. .
>
>Suggestions / bug links welcome, even if you're not going to be there!

One project which is massively parallelizable is emptying this page:

    http://twistedmatrix.com/trac/report/15

Instructions for doing so, in some great detail, are available at:

    http://twistedmatrix.com/trac/wiki/ReviewProcess

Whatever happens, I hope everyone attending the conference has a great 
time!

Jean-Paul



From _ at lvh.io  Fri Jun 28 08:50:06 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 28 Jun 2013 16:50:06 +0200
Subject: [Twisted-Python] How do you write a setup.py that installs plugins?
Message-ID: <CAE_Hg6Zhu+UnMGQOC0M9g3dkK+P98b8bMBMBA3_Pv8ZK4jHdNA@mail.gmail.com>

Hi,


How are you supposed to write a setup.py that installs twistd plugins?

I have this piece of tribal knowledge:

----
from setuptools.command import egg_info

def _top_level(name):
    return name.split('.', 1)[0]

def _hacked_write_toplevel_names(cmd, basename, filename):
    names = map(_top_level, cmd.distribution.iter_distribution_names())
    pkgs = dict.fromkeys(set(names) - set(["twisted"]))
    cmd.write_file("top-level names", filename, '\n'.join(pkgs) + '\n')

egg_info.write_toplevel_names = _hacked_write_toplevel_names
---

But I don't actually know what's actually required, and I don't actually
know where this is documented (if at all). Plus, it looks pretty
unsanitary, and appears to introduce a dependency to setuptools.

So, how am I supposed to do this?

Thanks in advance
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130628/370cba6b/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri Jun 28 11:30:25 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 28 Jun 2013 17:30:25 -0000
Subject: [Twisted-Python] How do you write a setup.py that installs
 plugins?
In-Reply-To: <CAE_Hg6Zhu+UnMGQOC0M9g3dkK+P98b8bMBMBA3_Pv8ZK4jHdNA@mail.gmail.com>
References: <CAE_Hg6Zhu+UnMGQOC0M9g3dkK+P98b8bMBMBA3_Pv8ZK4jHdNA@mail.gmail.com>
Message-ID: <20130628173025.28793.1085345468.divmod.xquotient.44@top>

On 02:50 pm, _ at lvh.io wrote:
>Hi,
>
>
>How are you supposed to write a setup.py that installs twistd plugins?

See http://stackoverflow.com/questions/7275295

Jean-Paul



From glyph at twistedmatrix.com  Fri Jun 28 11:41:30 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 28 Jun 2013 10:41:30 -0700
Subject: [Twisted-Python] How do you write a setup.py that installs
	plugins?
In-Reply-To: <20130628173025.28793.1085345468.divmod.xquotient.44@top>
References: <CAE_Hg6Zhu+UnMGQOC0M9g3dkK+P98b8bMBMBA3_Pv8ZK4jHdNA@mail.gmail.com>
 <20130628173025.28793.1085345468.divmod.xquotient.44@top>
Message-ID: <FACDFCCF-D8AF-4A70-9A03-E2006D357AEF@twistedmatrix.com>


On Jun 28, 2013, at 10:30 AM, exarkun at twistedmatrix.com wrote:

> On 02:50 pm, _ at lvh.io wrote:
>> Hi,
>> 
>> 
>> How are you supposed to write a setup.py that installs twistd plugins?
> 
> See http://stackoverflow.com/questions/7275295

As an open source maintainer, I should be able to tell you how setup.py works... however viewer, it is one of the greatest mysteries in the scientific world.  It would be good to raise this question on a different mailing list; one with lots of people with knowledge of internals of packaging tools.  If any of them need clarification on the Twisted side of things, I'd be happy to expand and improve the question.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130628/6237e91a/attachment-0002.html>

From jaspreetsingh4575 at gmail.com  Fri Jun 28 14:03:23 2013
From: jaspreetsingh4575 at gmail.com (jaspreet singh Kalsi)
Date: Sat, 29 Jun 2013 01:33:23 +0530
Subject: [Twisted-Python] =?windows-1252?q?=93Unhandled_Error=94_comes_whe?=
	=?windows-1252?q?n_TCP_server_tries_to_accept_connections_from_cli?=
	=?windows-1252?q?ent_in_twisted?=
Message-ID: <CACee-Qs3DKf1rpMbBLwMSB2M+mjZWgHevvoJcOrWRxdO8HoG8Q@mail.gmail.com>

from twisted.internet.protocol import Factory,Protocolfrom
twisted.internet import reactor
class ChatServer(Protocol):
    def connectionMade(self):
    print "A Client Has Connected"

factory = Factory()
reactor.listenTCP(80,factory)print "Chat Server Started"

reactor.run()


the above code is running succesfully.but when I try to open
TCP(telnet localhost 80).

Errors occurs :

Unhandled ErrorTraceback (most recent call last):
  File "C:\Python27\lib\site-packages\twisted\python\log.py", line 69,
in callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "C:\Python27\lib\site-packages\twisted\python\context.py", line
118, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "C:\Python27\lib\site-packages\twisted\python\context.py", line
81, in callWithContext
    return func(*args,**kw)
  File "C:\Python27\lib\site-packages\twisted\internet\selectreactor.py",
line 150, in _doReadOrWrite
    why = getattr(selectable, method)()--- <exception caught here> ---
  File "C:\Python27\lib\site-packages\twisted\internet\tcp.py", line
718, in doRead
    protocol = self.factory.buildProtocol(self._buildAddr(addr))
  File "C:\Python27\lib\site-packages\twisted\internet\protocol.py",
line 104, in buildProtocol
    p = self.protocol()
exceptions.TypeError: 'NoneType' object is not callable


I m using windows 8,python 2.7 and Twisted 12.0

sir/mam i have also discuss this question on stackoverflow ...but i
did'nt get any appropriate answer.....

please help me .
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130629/b578740e/attachment-0002.html>

From _ at lvh.io  Fri Jun 28 15:12:10 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 28 Jun 2013 23:12:10 +0200
Subject: [Twisted-Python]
	=?windows-1252?q?=93Unhandled_Error=94_comes_whe?=
	=?windows-1252?q?n_TCP_server_tries_to_accept_connections_from_cli?=
	=?windows-1252?q?ent_in_twisted?=
In-Reply-To: <CACee-Qs3DKf1rpMbBLwMSB2M+mjZWgHevvoJcOrWRxdO8HoG8Q@mail.gmail.com>
References: <CACee-Qs3DKf1rpMbBLwMSB2M+mjZWgHevvoJcOrWRxdO8HoG8Q@mail.gmail.com>
Message-ID: <CAE_Hg6b5eRECROw=j7ROBxHMGqQQG1X9X+8YPvBrEt-vowPh3Q@mail.gmail.com>

You forgot to set the protocol attribute of the factory.

factory.protocol = ChatServer
On Jun 28, 2013 10:05 PM, "jaspreet singh Kalsi" <
jaspreetsingh4575 at gmail.com> wrote:

> from twisted.internet.protocol import Factory,Protocolfrom twisted.internet import reactor
> class ChatServer(Protocol):
>     def connectionMade(self):
>     print "A Client Has Connected"
>
> factory = Factory()
> reactor.listenTCP(80,factory)print "Chat Server Started"
>
> reactor.run()
>
>
>
> the above code is running succesfully.but when I try to open TCP(telnet localhost 80).
>
>
> Errors occurs :
>
> Unhandled ErrorTraceback (most recent call last):
>   File "C:\Python27\lib\site-packages\twisted\python\log.py", line 69, in callWithContext
>     return context.call({ILogContext: newCtx}, func, *args, **kw)
>   File "C:\Python27\lib\site-packages\twisted\python\context.py", line 118, in callWithContext
>     return self.currentContext().callWithContext(ctx, func, *args, **kw)
>   File "C:\Python27\lib\site-packages\twisted\python\context.py", line 81, in callWithContext
>     return func(*args,**kw)
>   File "C:\Python27\lib\site-packages\twisted\internet\selectreactor.py", line 150, in _doReadOrWrite
>     why = getattr(selectable, method)()--- <exception caught here> ---
>   File "C:\Python27\lib\site-packages\twisted\internet\tcp.py", line 718, in doRead
>     protocol = self.factory.buildProtocol(self._buildAddr(addr))
>   File "C:\Python27\lib\site-packages\twisted\internet\protocol.py", line 104, in buildProtocol
>     p = self.protocol()
> exceptions.TypeError: 'NoneType' object is not callable
>
>
>
> I m using windows 8,python 2.7 and Twisted 12.0
>
> sir/mam i have also discuss this question on stackoverflow ...but i did'nt get any appropriate answer.....
>
>
> please help me .
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130628/0a6b5064/attachment-0002.html>

From jamesbroadhead at gmail.com  Sat Jun 29 09:07:33 2013
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Sat, 29 Jun 2013 16:07:33 +0100
Subject: [Twisted-Python] EuroPython Sprint Ideas?
In-Reply-To: <20130628003947.28793.1938984249.divmod.xquotient.41@top>
References: <CA+hid6HK2S093KoxdwnNkeOeLz8Y6-hL8pVXo4fZBgen5Z-0tw@mail.gmail.com>
 <20130628003947.28793.1938984249.divmod.xquotient.41@top>
Message-ID: <CA+hid6HdKfWr207v8AqFY==WVpV6SeZVMBtWWfOeAgTmZ3XhJQ@mail.gmail.com>

On 28 June 2013 01:39, <exarkun at twistedmatrix.com> wrote:

>
> One project which is massively parallelizable is emptying this page:
>
>    http://twistedmatrix.com/trac/**report/15<http://twistedmatrix.com/trac/report/15>
>
> Instructions for doing so, in some great detail, are available at:
>
>    http://twistedmatrix.com/trac/**wiki/ReviewProcess<http://twistedmatrix.com/trac/wiki/ReviewProcess>
>
> Whatever happens, I hope everyone attending the conference has a great
> time!
>

Yep, that looks like the right place to start alright -- but having someone
there who is familiar with the process is always really valuable for quick
questions etc.

I'll be sure to be loitering in the chat room when we start work; if any
particular suggestions occur, do let me know. I've vaguely been thinking
about looking at the leaves of the python3x dependency graph, but we'll see
how far I get with the reviews.

I've had one email from an off-list volunteer, so let's see how many turn
up.

JB
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130629/829d2109/attachment-0002.html>

From trac at twistedmatrix.com  Sun Jun 30 02:43:35 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 30 Jun 2013 08:43:35 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1372581815.06.6092008599189335610@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130630/9780cee1/attachment-0002.html>

From ashfall at twistedmatrix.com  Sun Jun 30 07:34:42 2013
From: ashfall at twistedmatrix.com (Ashwini Oruganti)
Date: Sun, 30 Jun 2013 19:04:42 +0530
Subject: [Twisted-Python] Twisted 13.1.0 released
Message-ID: <CAMFCZ-3F=0UnatN9iufbxHy6z+Y_s5iOgGgOcFpnF-V5xa2V8A@mail.gmail.com>

On behalf of  Twisted Matrix Laboratories, I am pleased to announce the
release of
Twisted 13.1.

Highlights for this release include:

  * trial now has an --exitfirst flag which stops the test run after the
first error or failure.

  * twisted.internet.ssl.CertificateOptions now supports chain certificates.

  * twisted.conch.endpoints.SSHCommandClientEndpoint is a new
IStreamClientEndpoint
    which supports connecting a protocol to the stdio of a command running
on a remote host
    via an SSH connection.

  * twisted.web.xmlrpc.QueryProtocol now generates valid Authorization
headers for long user
    names and passwords.

  * twisted.internet.endpoints.connectProtocol allows connecting to a
client endpoint using only
    a protocol instance, rather than requiring a factory.

For more information, see the NEWS file here:
  http://twistedmatrix.com/Releases/Twisted/13.1/NEWS.txt

Download it now from:
  http://pypi.python.org/packages/source/T/Twisted/Twisted-13.1.0.tar.bz2 or

http://pypi.python.org/packages/2.7/T/Twisted/Twisted-13.1.0.win32-py2.7.msi

Many thanks to Tom Prince and Thomas Hervé, whose work on release-process
and answers
to numerous questions made this release possible.
Thanks also to the supporters of the Twisted Software Foundation and to the
many contributors
for this release.

-Ashwini
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130630/0f59da43/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Jun 30 12:28:45 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 Jun 2013 18:28:45 -0000
Subject: [Twisted-Python] baelnorn
In-Reply-To: <878v1sqbj7.fsf@loki.hocat.ca>
References: <878v1sqbj7.fsf@loki.hocat.ca>
Message-ID: <20130630182845.28793.1215234783.divmod.xquotient.50@top>

On 07:54 am, tom.prince at ualberta.net wrote:
>There appears to be some issue with baelnorn, that is causing it to 
>have
>difficulty connecting via bzr. I'm not sure exactly what is happening.
>
>Rather than letting builds fail, I've temporarily shutdown the
>buildslave there.

As baelnorn hosts around half our supported builders, maybe there 
shouldn't be any more builds until this is addressed.

Also, I don't think this is a cube-administrators issue.  It seems more 
like a twisted-python issue, since continuous integration is central to 
Twisted development.

Jean-Paul



