From grolgh at online.no  Sat Sep  1 03:01:16 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sat, 1 Sep 2001 09:01:16 +0200
Subject: [Twisted-Python] a twisted.ftp
Message-ID: <009801c132b3$e5da2c60$2fc1d9c1@phed>

Hi,

I just commited twisted.ftp, and I think it is pretty neat. Not everything is supported, but it should work with any ftp-client out there. To get it up and running, just 'mktap -r +AH4-/myftp', where '+AH4-/myftp' is the directory you want to leech+ADs- the default is '/pub/usr/local'. Start the server with twistd, and ftp to your server on port 2121. Login as 'twisted' with the password 'twisted'. The password is stored plaintext, so be careful +ADs-) Now have fun with upload and download.

What I haven't told you: I haven't tested it under linux, so I'm curious if it works at all. Also, test it on the most bizarre ftp-clients you have (MSIE works), and tell me how it fared.

// phed
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http:+AC8ALw-twistedmatrix.com+AC8-pipermail+AC8-twisted-python+AC8-attachments+AC8-20010901+AC8-d4cd8c1f+AC8-attachment.htm 

From grolgh at online.no  Sat Sep  1 03:53:09 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sat, 1 Sep 2001 09:53:09 +0200
Subject: [Twisted-Python] twisted.ftp status, and metadatafs
Message-ID: <00ab01c132bb$2516aa00$2fc1d9c1@phed>

Well, I ought to add some words were I think twisted.ftp is heading too. The first things to do, is to add proper authentication, and filling in some holes (eg, resume and hash). A better path-handling, since os.path is silly under windows, and os.path.isabs('+AFw-..'). Distributed is the next big spot. I'm not entirely safe with it yet, but I think it should be easy to nail. One pending 'TODO' is to make it deployable as a systemwide ftp (without requiring each and every user to setup their own ftp-server).

So, if I jump forward in time, and extend the view to storing eg. media-files generally, I think the need of a vfs of some kind arises. What follows is some random notes on it, with varying value, and passing the scope of twisted.ftp with lightyears.
There's two properties it requires: it has to store metadata +AFs-1+AF0-, and it has to support different 'filesystems'. 
The direct effect of the storing the metadata is that the differences between OSes and platforms can be compensated and metadata don't have to be lost due to the filesystems. Though, I think this can be a burden too (should it keep all the metadata in dicts and stored in fragile taps?). 
There's only one filesystem I know which can easily store metadata, and that is a database :) twisted.enterprise could turn handy here, though it seems to require an external SQL-server. Correct me if I'm wrong.
Other filesystems? The OS's filesystem, FTP, Source-Code (hm), 
Some other requirements, is the ability to refer to a file independent of its physical location, pass the reference over PB, do basic operations, and of course, version-checking etc. 

This issue is probably related to the +ACI-File Transfer+ACI--layer which is mentioned in the TODO too:

008:
    File Transfer layer for PB.  This would be especially nice for
    twisted.words+ADs- having standard a way to transfer +ACI-large+ACI- (100MB+-) packets
    across or in tandem with a PB connection without breaking anything would be
    very good.

+AFs-1+AF0- http://arstechnica.com/reviews/01q3/metadata/metadata-1.html 






From twisted at itamarst.org  Sat Sep  1 11:45:56 2001
From: twisted at itamarst.org (Itamar)
Date: Sat, 01 Sep 2001 11:45:56 -0400
Subject: [Twisted-Python] twisted.ftp status, and metadatafs
References: <00ab01c132bb$2516aa00$2fc1d9c1@phed>
Message-ID: <3B9102B4.9080605@itamarst.org>

Benjamin Bruheim wrote:

> So, if I jump forward in time, and extend the view to storing eg. 
> media-files generally, I think the need of a vfs of some kind arises. 
> What follows is some random notes on it, with varying value, and 
> passing the scope of twisted.ftp with lightyears.

Take a look at Medusa (www.nightmare.com/medusa) VFS as an example of
how +ACo-not+ACo- to do it. One thing I learned from it - string paths are EVIL,
especially in FTP where paths such as /baz/.././//foo/../bar are legal.
Paths should therefore be represented by lists, e.g. ['baz', 'foo', 'bar'].

The next problem is that it's usually hard to know if the last item is a
file or a folder (if the path is '/foo/bar', is 'bar' a file or a
folder?). In systems like Zope it's even harder since an object can
function as both.
I would suggest you get a WebDAV implementation going before you (or any
other interested party) start working on a VFS layer. WebDAV is more
generic (it support "collections", not "folders"), supports arbitary
properties on objects (metadata), etc.. And supporting two different
systems will amke sure you don't make any protocol specific design
decisions (such as Medusa's VFS, where it passes the VFS the path string
specified by the user, so the VFS must deal with '..', './../foo//bar'
and all that crap.)





From jasbahr at crash.org  Sat Sep  1 12:28:57 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Sat, 1 Sep 2001 11:28:57 -0500
Subject: [Twisted-Python] twisted.ftp status, and metadatafs
In-Reply-To: <3B9102B4.9080605@itamarst.org>
Message-ID: <EIEFLCFECLLBKGPNJJIMKEAGHEAA.jasbahr@crash.org>

Awesome, Ben!  And good feedback, Itamar!  WebDAV would be a 
good choice -- supporting existing standards and all that.

Jason







From bruheim at c2i.net  Sat Sep  1 12:49:48 2001
From: bruheim at c2i.net (Maj-Britt Bruheim)
Date: Sat, 1 Sep 2001 18:49:48 +0200
Subject: [Twisted-Python] remove a tcp.Port
Message-ID: <001b01c13306$1d7f8000$d0aed9c1@phed>

Hello, 

The first bug I ran into with twisted.ftp is that after 15 tcp.Ports has been opened and closed, skt.Listen starts to fail. This is due to the fact that when calling Port.loseConnection, the actual code called is Server.loseConnection which does not removeReader (actually, the Port.loseConnection is broken, since it calls removeReader and not main.removeReader). Well, there's seems to be two types of behaviour intended with the code, and of course, calling a loseConnection to the server shouldn't remove it entirely, but there should be a function doing that. Another thing, the limit for maximum Ports, where is it? And can shouldn't it be configurable?

And here follows the somewhat confusing traceback. Note that this is upon re-connecting the ftp-server. When the client can't connect to the server, there's nothing on the log.
01/09/2001 18:38 [FTP,1,127.0.0.1] Traceback (most recent call last):
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\internet\main.py", line 267, in doSelect
01/09/2001 18:38 [FTP,1,127.0.0.1] why = getattr(selectable, method)()
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\internet\tcp.py", line 82, in doRead
01/09/2001 18:38 [FTP,1,127.0.0.1] return self.protocol.dataReceived(data)
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\protocols\ftp.py", line 590, in dataReceived
01/09/2001 18:38 [FTP,1,127.0.0.1] self.processLine(line)
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\protocols\ftp.py", line 583, in processLine
01/09/2001 18:38 [FTP,1,127.0.0.1] n = method(params)
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\protocols\ftp.py", line 433, in ftp_Pasv
01/09/2001 18:38 [FTP,1,127.0.0.1] self.createPassiveServer()
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\protocols\ftp.py", line 379, in createPassiveServer
01/09/2001 18:38 [FTP,1,127.0.0.1] self.dtpPort.startListening()
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\internet\tcp.py", line 297, in startListening
01/09/2001 18:38 [FTP,1,127.0.0.1] skt.listen(self.backlog)
01/09/2001 18:38 [FTP,1,127.0.0.1] File "<string>", line 1, in listen
01/09/2001 18:38 [FTP,1,127.0.0.1] error: (10055, 'No buffer space available')






From grolgh at online.no  Sat Sep  1 14:31:11 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sat, 1 Sep 2001 20:31:11 +0200
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- twisted.ftp status, and metadatafs
References: +ADw-00ab01c132bb+ACQ-2516aa00+ACQ-2fc1d9c1+AEA-phed+AD4- +ADw-3B9102B4.9080605+AEA-itamarst.org+AD4-
Message-ID: <001301c13315$af45c6c0$4aafd9c1@phed>

+AD4- Take a look at Medusa (www.nightmare.com/medusa) VFS as an example of
+AD4- how +ACo-not+ACo- to do it. One thing I learned from it - string paths are EVIL,
+AD4- especially in FTP where paths such as /baz/.././//foo/../bar are legal.
+AD4- Paths should therefore be represented by lists, e.g. +AFs-'baz', 'foo', 'bar'+AF0-.

Yes, I figured :) I made the same mistake when writing my first vfs draft +AFs-1+AF0- some time ago. At least it got mount.

+AD4- The next problem is that it's usually hard to know if the last item is a
+AD4- file or a folder (if the path is '/foo/bar', is 'bar' a file or a
+AD4- folder?). In systems like Zope it's even harder since an object can
+AD4- function as both.

Useful for a zip-fs :) My gut-reaction would say that '/foo/bar' is a file, '/foo/bar/' is a directory. In ftp this is a matter of having a client which can handle it (but it will without doubt create problems on +AF8-many+AF8- clients), most of the trouble is solved through context 'RETR +ADw-file+AD4-' vs 'CD +ADw-dir+AD4-'+ADs- but it wont solve 'SITE CHMOD +ADw-path+AD4-' (not implemented :P ). Such cases will create problems, but this is due to badly specified protocols. PB won't have this problem +ADs-)

+AD4- I would suggest you get a WebDAV implementation going before you (or any
+AD4- other interested party) start working on a VFS layer. WebDAV is more
+AD4- generic (it support +ACI-collections+ACI-, not +ACI-folders+ACI-), supports arbitary
+AD4- properties on objects (metadata), etc.. And supporting two different
+AD4- systems will amke sure you don't make any protocol specific design
+AD4- decisions (such as Medusa's VFS, where it passes the VFS the path string
+AD4- specified by the user, so the VFS must deal with '..', './../foo//bar'
+AD4- and all that crap.)

Two different systems? You mean WebDAV and a FTP? Yes, it sounds interesting, though I have to read a bit more on it to understand WebDAV's concept. It seems to fill most of the requirements. The VFS will maybe be just a storage-specific layer, while WebDAV is built on top of it. I need to read on it before I try to fill in anything more. :)

+AFs-1+AF0-: http://www.twistedmatrix.com/users/phed/vfs.py








From m at moshez.org  Sat Sep  1 18:05:08 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun,  2 Sep 2001 01:05:08 +0300 (IDT)
Subject: [Twisted-Python] What the hell?
In-Reply-To: <20010831115145.A993@det.ddts.net>
References: <20010831115145.A993@det.ddts.net>, <3B8FC624.6040404@itamarst.org>
Message-ID: <20010901220508.39E143929@darjeeling>

On Fri, 31 Aug 2001, Chris Clearwater <chris at detriment.org> wrote:

> I agree.  The transport for a client or server should probally not be
> generalized to a socket at all.  Maybe this calls for the creation of
> twisted.transport ?  I am not familiar much with the twisted codebase, so
> don't kill me if something like this already exists :)

I'd like (at least) Port to be able to take a bound socket, instead of
binding it itself. Then have a couple of convinience routines

def InetPort(factory, port, interface='', backlog=5):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind( (interface, port) )
    sock.listen(backlog)
    return Port(factory, socket, 'INET')

def UnixPort(factory, port, interface='', backlog=5):
    ...
    return Port(factory, socket, 'UNIX')

The third argument is passed to the Server class, which puts
it in .getPeer()

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From glyph at twistedmatrix.com  Sat Sep  1 21:28:36 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Sep 2001 20:28:36 -0500
Subject: [Twisted-Python] remove a tcp.Port
In-Reply-To: <001b01c13306$1d7f8000$d0aed9c1@phed>; from bruheim@c2i.net on Sat, Sep 01, 2001 at 06:49:48PM +0200
References: <001b01c13306$1d7f8000$d0aed9c1@phed>
Message-ID: <20010901202836.A12115@twistedmatrix.com>

On Sat, Sep 01, 2001 at 06:49:48PM +0200, Maj-Britt Bruheim wrote:

> The first bug I ran into with twisted.ftp is that after 15 tcp.Ports has been
> opened and closed, skt.Listen starts to fail. This is due to the fact that
> when calling Port.loseConnection, the actual code called is
> Server.loseConnection which does not removeReader (actually, the
> Port.loseConnection is broken, since it calls removeReader and not
> main.removeReader).

Yeah.  The socket wouldn't get closed (In fact, a traceback would prevent
anything from happening at all...) , and so you'd run out of available
listening sockets (15 tcp.Ports = 15 listening sockets * 5 queue entries = 75
queue entries) fairly quickly.  (See below about NT...)

> Well, there's seems to be two types of behaviour intended with the code, and
> of course, calling a loseConnection to the server shouldn't remove it
> entirely, but there should be a function doing that.

Both of those behaviors are necessary.  Calling loseConnection on a Port means
"stop accepting connections on this port" (as the documentation reads).  If you
were to not remove that from the select loop, some ugly behavior would result.

> Another thing, the limit for maximum Ports, where is it? And can shouldn't it
> be configurable?

This is an OS-imposed limit, as far as I know. I can't do anything about it.

> And here follows the somewhat confusing traceback. Note that this is upon
> re-connecting the ftp-server. When the client can't connect to the server,
> there's nothing on the log.

Can you reproduce this on a UNIX?  Is this an NT or 95 derivative Windows
you're using?

I'll hazard a guess that it's NT "Workstation", which has some colorfully
imposed limits on the number of sockets you can listen on.  Although I don't
know if 95 has the same issues.  The "red hat linux installation guide" has
step-by-step instructions for fixing that "bug" :-)

[traceback omitted]

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Sat Sep  1 21:35:56 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Sep 2001 20:35:56 -0500
Subject: [Twisted-Python] What the hell?
In-Reply-To: <20010901220508.39E143929@darjeeling>; from m@moshez.org on Sun, Sep 02, 2001 at 01:05:08AM +0300
References: <20010831115145.A993@det.ddts.net>, <3B8FC624.6040404@itamarst.org> <20010831115145.A993@det.ddts.net> <20010901220508.39E143929@darjeeling>
Message-ID: <20010901203556.B12115@twistedmatrix.com>

On Sun, Sep 02, 2001 at 01:05:08AM +0300, Moshe Zadka wrote:

> I'd like (at least) Port to be able to take a bound socket, instead of
> binding it itself. Then have a couple of convinience routines
> 
> def InetPort(factory, port, interface='', backlog=5):
>     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>     sock.bind( (interface, port) )
>     sock.listen(backlog)
>     return Port(factory, socket, 'INET')
> 
> def UnixPort(factory, port, interface='', backlog=5):
>     ...
>     return Port(factory, socket, 'UNIX')

That would make the Port instance impossible to persist, and adds no value,
unless there's some particular external API we need to interact with that
speaks in terms of sockets...

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Sat Sep  1 22:00:19 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Sep 2001 21:00:19 -0500
Subject: [Twisted-Python] Another tcp.Client question
In-Reply-To: <3B8FDB69.5080200@itamarst.org>; from twisted@itamarst.org on Fri, Aug 31, 2001 at 02:46:01PM -0400
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org>
Message-ID: <20010901210019.C12115@twistedmatrix.com>

I just looked at it and I think that this patch (which I'm about to commit,
after doing some testing) should solve the problem:

diff -u -r1.16 tcp.py
--- twisted/internet/tcp.py     2001/08/29 10:13:55     1.16
+++ twisted/internet/tcp.py     2001/09/02 01:58:55
@@ -159,10 +159,10 @@
             self.socket.connect(self.addr)
         except socket.error, se:
             if se.args[0] in (EWOULDBLOCK, EALREADY, EINPROGRESS):
-                pass
+                self.startWriting()
             else:
                 self.protocol.connectionFailed()
-                return CONNECTION_LOST
+                self.stopWriting()
         # If I have reached this point without raising or returning, that means
         # that the socket is connected.
         del self.doWrite
@@ -332,7 +332,7 @@
         # Since ports can't, by definition, write any data, we can just close
         # instantly (no need for the more complex stuff for selectables which
         # write)
-        removeReader(self)
+        self.stopReading()
         self.connectionLost()
 
     def connectionLost(self):


On Fri, Aug 31, 2001 at 02:46:01PM -0400, Itamar wrote:
> One problem with my patch - both connectionFailed and connectionLost are 
> called on the protocol, instead of just connectionFailed.
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Sat Sep  1 22:03:15 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Sep 2001 21:03:15 -0500
Subject: [Twisted-Python] What the hell?
In-Reply-To: <20010831.204003.607956277.shae@webwitches.com>; from shae@webwitches.com on Fri, Aug 31, 2001 at 08:40:03PM +0300
References: <3B8FC624.6040404@itamarst.org> <20010831.204003.607956277.shae@webwitches.com>
Message-ID: <20010901210315.D12115@twistedmatrix.com>

Right, but only part of the explanation :-).  This has previously been
discussed a little, and my initial this answer is here:

    http://twistedmatrix.com/pipermail/twisted-python/2001-July/000139.html

On Fri, Aug 31, 2001 at 08:40:03PM +0300, Shae Erisson wrote:

> if you're adding xfstt to your fontpath, the url to use is unix:7101/
> xfs is at unix:7100/
> 
> so I'd assume is specific to some kind of IPC.
> Therefore, I bet yer system will act strangely if you make your hostname
> 'unix'

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Sat Sep  1 22:23:39 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Sep 2001 21:23:39 -0500
Subject: [Twisted-Python] reality server vs PUB
In-Reply-To: <OF2381FF76.F17BAF44-ON4A256AB9.00004333@mincom.oz.au>; from Chris.Hadgis@mincom.com on Fri, Aug 31, 2001 at 10:07:23AM +1000
References: <OF2381FF76.F17BAF44-ON4A256AB9.00004333@mincom.oz.au>
Message-ID: <20010901212339.E12115@twistedmatrix.com>

On Fri, Aug 31, 2001 at 10:07:23AM +1000, Chris.Hadgis at mincom.com wrote:
> Is it my imagination, or is twisted.reality somewhat similar to Python 
> Universe Builder? I have just discovered this after reading through the 
> i-f newsgroups this morning.  I plan on downloading it and taking it home 
> to look at.

Yes, they are similiar -- they both use Python to achieve a great deal of
built-in dynamism.  They both use pickle to save game state.  However, PUB is
more solidly focused on single-player games, with a trivial networking module.
(they appear to use neither select nor threading, but expect full messages to
arrive at once and never have a socket block.  This will really only work for
testing on a single machine.  Twisted Reality is more of a small RPG engine to
demonstrate the capabilities of its robust networking layer.

I think that neither one is sufficiently mature to make full-blown
'Jigsaw'-sized games in without hacking on them a bit.

And to let the mask of objectivity drop for a moment, I think that Twisted has
considerably more momentum at this point, even if most of the effort isn't
going into improving Reality itself :-).

> Does anyone else know anything about this?

I have known about it for quite some time :-)

> Btw, how do I go about getting a TM home-page?

Meet me on IRC (#python on irc.openprojects.net) and ask nicely :-). I need to
speak with you in real-time to set up an account, and we can put you on Twisted
CVS at the same time.


-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From grolgh at online.no  Sun Sep  2 04:01:43 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 2 Sep 2001 10:01:43 +0200
Subject: [Twisted-Python] Another tcp.Client question
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com>
Message-ID: <006401c13385$831457e0$c5b2d9c1@phed>

Just out of curiousity:

> -        removeReader(self)
> +        self.stopReading()

That removeReader is _never_ called :) If it were called, the temporary DTP-servers in twisted.ftp would be removed every time I called loseConnection. And it would generate a NameError (I guess), since removeReader resides in main. So, actually this lil' piece of the patch has no effect at all. BTW, what's a good way to close a server? That patch of code does it, but it is overridden elsewhere.

// phed







From grolgh at online.no  Sun Sep  2 04:27:26 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 2 Sep 2001 10:27:26 +0200
Subject: [Twisted-Python] two tkim tracebacks
Message-ID: <008101c13389$19733000$c5b2d9c1@phed>

two tracebacks with tkim:

When sending a message to an offline person on words:

Exception in Tkinter callback
Traceback (most recent call last):
  File "c:\dev\python20\lib\lib-tk\Tkinter.py", line 1287, in __call__
    return apply(self.func, args)
TypeError: not enough arguments; expected 2, got 1

and when connecting to an non-existing server:

Traceback (most recent call last):
  File "c:\dev\twisted\twisted\spread\pb.py", line 999, in connectionFailed
    errback('connection failed')
  File "c:\dev\twisted\twisted\words\ui\gateways\words.py", line 43, in connect
onFailed
    if self.connected:
AttributeError: 'makeConnection' instance has no attribute 'connected'

besides that; there's a lil' problem with closing windows as I mentioned earlier. With my 3 seconds experience with tk I guess you add the wrong master to the "child"-windows.

// phed






From grolgh at online.no  Sun Sep  2 04:49:14 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 2 Sep 2001 10:49:14 +0200
Subject: [Twisted-Python] Re: two tkim tracebacks
References: <008101c13389$19733000$c5b2d9c1@phed>
Message-ID: <008701c1338c$251bc720$c5b2d9c1@phed>

> When sending a message to an offline person on words:
> 
> Exception in Tkinter callback
> Traceback (most recent call last):
>   File "c:\dev\python20\lib\lib-tk\Tkinter.py", line 1287, in __call__
>     return apply(self.func, args)
> TypeError: not enough arguments; expected 2, got 1

actually, when sending a message to an person before I've joined a group








From grolgh at online.no  Sun Sep  2 04:56:43 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 2 Sep 2001 10:56:43 +0200
Subject: [Twisted-Python] Re: two tkim tracebacks
References: <008101c13389$19733000$c5b2d9c1@phed> <008701c1338c$251bc720$c5b2d9c1@phed>
Message-ID: <009f01c1338d$30ce0d20$c5b2d9c1@phed>

>> When sending a message to an offline person on words:
>> 
>> Exception in Tkinter callback
>> Traceback (most recent call last):
>>   File "c:\dev\python20\lib\lib-tk\Tkinter.py", line 1287, in __call__
>>     return apply(self.func, args)
>> TypeError: not enough arguments; expected 2, got 1
>
> actually, when sending a message to an person before I've joined a group

actually actually I should test more before I send 'bugreports' .. its when I press 'send' on personal messagse, enter is okay :)






From glyph at twistedmatrix.com  Sun Sep  2 07:54:19 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 2 Sep 2001 06:54:19 -0500
Subject: [Twisted-Python] Another tcp.Client question
In-Reply-To: <006401c13385$831457e0$c5b2d9c1@phed>; from grolgh@online.no on Sun, Sep 02, 2001 at 10:01:43AM +0200
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com> <006401c13385$831457e0$c5b2d9c1@phed>
Message-ID: <20010902065419.A17803@twistedmatrix.com>

On Sun, Sep 02, 2001 at 10:01:43AM +0200, Benjamin Bruheim wrote:
> Just out of curiousity:
> 
> > -        removeReader(self)
> > +        self.stopReading()
> 
> That removeReader is _never_ called :) If it were called, the temporary
> DTP-servers in twisted.ftp would be removed every time I called
> loseConnection. And it would generate a NameError (I guess), since
> removeReader resides in main. So, actually this lil' piece of the patch has
> no effect at all. BTW, what's a good way to close a server? That patch of
> code does it, but it is overridden elsewhere.

A quick glance over twisted/protocols/ftp.py indicates to me that nowhere is
loseConnection actually called on a Port.  Where is it supposed to be?  (And
what's up with storing it as DTPLoseConnection?  I never see that being
used...)  On my machine, at least, calling loseConnection on a Port *would*
indeed cause it to blow up :)

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From twisted at itamarst.org  Sun Sep  2 09:58:22 2001
From: twisted at itamarst.org (Itamar)
Date: Sun, 02 Sep 2001 09:58:22 -0400
Subject: [Twisted-Python] Another tcp.Client question
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com>
Message-ID: <3B923AFE.1090107@itamarst.org>

Glyph Lefkowitz wrote:
> I just looked at it and I think that this patch (which I'm about to commit,
> after doing some testing) should solve the problem:

I'll test it out as well, if not today (I'm leaving to the airport in 
two hours) then on Monday. I'm not sure it will work however - the logic 
   after the socket.connect exception handler assumes that if you've 
reched that point you are either connected or not (as the comment there 
says). So you'd want to return after the startWriting(). And what are 
the changes to Port for?






From twisted at itamarst.org  Sun Sep  2 10:00:11 2001
From: twisted at itamarst.org (Itamar)
Date: Sun, 02 Sep 2001 10:00:11 -0400
Subject: [Twisted-Python] What the hell?
References: <3B8FC624.6040404@itamarst.org> <20010831.204003.607956277.shae@webwitches.com> <20010901210315.D12115@twistedmatrix.com>
Message-ID: <3B923B6B.9060101@itamarst.org>

Glyph Lefkowitz wrote:
> Right, but only part of the explanation :-).  This has previously been
> discussed a little, and my initial this answer is here:
> 
>     http://twistedmatrix.com/pipermail/twisted-python/2001-July/000139.html

OK. But checking by host == 'unix' is still pretty bad, IMHO. Maybe 
check for the port being a string instead? (and have the tcp.py 
docstrings document this.)





From j.her at t-online.de  Sun Sep  2 11:28:38 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Sun, 02 Sep 2001 17:28:38 +0200
Subject: [Twisted-Python] What the hell?
In-Reply-To: <3B923B6B.9060101@itamarst.org>
Message-ID: <15dZAA-0mSjPUC@fwd01.sul.t-online.com>

On Sun, 02 Sep 2001 10:00:11 -0400, Itamar wrote:

>OK. But checking by host == 'unix' is still pretty bad, IMHO. Maybe 
>check for the port being a string instead? (and have the tcp.py 
>docstrings document this.)

If you want polymrphic addressing, you should use a class per address
family.

i.e.

	tuple -> socket (servername, port)
	class UnixFile -> an instance holding the filename
	...





From m at moshez.org  Sun Sep  2 13:02:12 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun,  2 Sep 2001 20:02:12 +0300 (IDT)
Subject: [Twisted-Python] What the hell?
In-Reply-To: <20010901203556.B12115@twistedmatrix.com>
References: <20010901203556.B12115@twistedmatrix.com>, <20010831115145.A993@det.ddts.net>, <3B8FC624.6040404@itamarst.org> <20010831115145.A993@det.ddts.net> <20010901220508.39E143929@darjeeling>
Message-ID: <20010902170212.84C5C3834@darjeeling>

On Sat, 1 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> That would make the Port instance impossible to persist

Good point

>, and adds no value,
> unless there's some particular external API we need to interact with that
> speaks in terms of sockets...

This would make it possible to bind() as root in a seperate C program
and then to drop privs and execute Twisted. Also, that would help if
you get the socket from another process over a UNIX domain socket.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From glyph at twistedmatrix.com  Sun Sep  2 16:47:01 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 2 Sep 2001 15:47:01 -0500
Subject: [Twisted-Python] What the hell?
In-Reply-To: <20010902170212.84C5C3834@darjeeling>; from m@moshez.org on Sun, Sep 02, 2001 at 08:02:12PM +0300
References: <20010901203556.B12115@twistedmatrix.com>, <20010831115145.A993@det.ddts.net>, <3B8FC624.6040404@itamarst.org> <20010831115145.A993@det.ddts.net> <20010901220508.39E143929@darjeeling> <20010901203556.B12115@twistedmatrix.com> <20010902170212.84C5C3834@darjeeling>
Message-ID: <20010902154701.A8370@twistedmatrix.com>

On Sun, Sep 02, 2001 at 08:02:12PM +0300, Moshe Zadka wrote:
> On Sat, 1 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> > unless there's some particular external API we need to interact with that
> > speaks in terms of sockets...
> 
> This would make it possible to bind() as root in a seperate C program
> and then to drop privs and execute Twisted. Also, that would help if
> you get the socket from another process over a UNIX domain socket.

OK.  First time we see one of these as an actual requirement, let's do it.
'Til then I think it's best to put it off.

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From grolgh at online.no  Sun Sep  2 18:25:08 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Mon, 3 Sep 2001 00:25:08 +0200
Subject: [Twisted-Python] Another tcp.Client question
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com> <006401c13385$831457e0$c5b2d9c1@phed> <20010902065419.A17803@twistedmatrix.com>
Message-ID: <004601c133fe$aa6155e0$bdc5d9c1@phed>

> A quick glance over twisted/protocols/ftp.py indicates to me that nowhere is
> loseConnection actually called on a Port.  Where is it supposed to be?  (And
> what's up with storing it as DTPLoseConnection?  I never see that being
> used...)  On my machine, at least, calling loseConnection on a Port *would*
> indeed cause it to blow up :)

No, it was just a test. Calling DTPLoseConnection actually would remove the server since it would call Port.loseConnection, though trigging some unwanted effects. I don't remember the details so don't mind. :) The port is created in FTP.createPassiveServer, and loseConnection is called in DTP.finishGet (or DTP.finish, I don't think I've commited the namechange). Are you sure you get a (Port n closed) on the log? Here they are all shown (successive) first when I shut down. BTW, The point with my last reply was that I can't see that some of the code changed are ever run, and that makes it hard to test ;)

// phed






From glyph at twistedmatrix.com  Sun Sep  2 18:36:10 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 2 Sep 2001 17:36:10 -0500
Subject: [Twisted-Python] Another tcp.Client question
In-Reply-To: <004601c133fe$aa6155e0$bdc5d9c1@phed>; from grolgh@online.no on Mon, Sep 03, 2001 at 12:25:08AM +0200
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com> <006401c13385$831457e0$c5b2d9c1@phed> <20010902065419.A17803@twistedmatrix.com> <004601c133fe$aa6155e0$bdc5d9c1@phed>
Message-ID: <20010902173610.A16883@twistedmatrix.com>

On Mon, Sep 03, 2001 at 12:25:08AM +0200, Benjamin Bruheim wrote:
> > A quick glance over twisted/protocols/ftp.py indicates to me that nowhere is
> > loseConnection actually called on a Port.  Where is it supposed to be?  (And
> > what's up with storing it as DTPLoseConnection?  I never see that being
> > used...)  On my machine, at least, calling loseConnection on a Port *would*
> > indeed cause it to blow up :)
> 
> No, it was just a test. Calling DTPLoseConnection actually would remove the
> server since it would call Port.loseConnection, though trigging some unwanted
> effects.

Is the dtpPort supposed to accept more than one connection?  I was under the
impression that anywhere one would bind port 0 would be a place that one or
only a few connections would be accepted.

> I don't remember the details so don't mind. :)

I am willing to bet that the unwanted effects you saw were tracebacks on the
code we're talking about :)

> The port is created in FTP.createPassiveServer, and loseConnection is called
> in DTP.finishGet (or DTP.finish, I don't think I've commited the namechange).

You have committed it.  Still: I see no loseConnection being called on a
*Port*, only on a *Server*, which is a connection that got accepted from a
port.

> Are you sure you get a (Port n closed) on the log? Here they are all shown
> (successive) first when I shut down. 

That's as a result of seeing connectionLost, loseConnection is never
necessarily called.

> BTW, The point with my last reply was that I can't see that some of the code
> changed are ever run, and that makes it hard to test ;)

Yes, and my point is that, as far as I understand FTP, you *should* be
exercising that code.  I still don't understand why you're not.

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From grolgh at online.no  Sun Sep  2 18:57:31 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Mon, 3 Sep 2001 00:57:31 +0200
Subject: [Twisted-Python] Another tcp.Client question
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com> <006401c13385$831457e0$c5b2d9c1@phed> <20010902065419.A17803@twistedmatrix.com> <004601c133fe$aa6155e0$bdc5d9c1@phed> <20010902173610.A16883@twistedmatrix.com>
Message-ID: <007001c13402$a6129860$bdc5d9c1@phed>

> > No, it was just a test. Calling DTPLoseConnection actually would remove the
> > server since it would call Port.loseConnection, though trigging some unwanted
> > effects.
> Is the dtpPort supposed to accept more than one connection?  I was under the
> impression that anywhere one would bind port 0 would be a place that one or
> only a few connections would be accepted.

yes, it shall accept one connection, and after the transfer is done, it shall close the connection (and in this way tell the user that the transfer is done). it shall let the tcp time-out, and that's why we change the port; less time is wasted between each new file. I am thinking of letting the user define a range of ports, and cycle through that instead of using port 0.

> > The port is created in FTP.createPassiveServer, and loseConnection is called
> > in DTP.finishGet (or DTP.finish, I don't think I've commited the namechange).
> You have committed it.  Still: I see no loseConnection being called on a
> *Port*, only on a *Server*, which is a connection that got accepted from a
> port.

Isn't 'self.dtpPort = tcp.Port(0, self)' a Port? self.dtp.transport is self.dtpPort, and its method loseConnection is used. Besides, isn't Port the same as a server?

> That's as a result of seeing connectionLost, loseConnection is never
> necessarily called.
Figured :)

> > BTW, The point with my last reply was that I can't see that some of the code
> > changed are ever run, and that makes it hard to test ;)
> Yes, and my point is that, as far as I understand FTP, you *should* be
> exercising that code.  I still don't understand why you're not.

Well, if I could. And how come nobody ever have run into that removeReader with an NameError or something?

// phed






From Chris.Hadgis at mincom.com  Sun Sep  2 19:27:22 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Mon, 3 Sep 2001 09:27:22 +1000
Subject: [Twisted-Python] reality server vs PUB
Message-ID: <OF58640C96.70656666-ON4A256ABB.007FFB6E@mincom.oz.au>

!On Fri, Aug 31, 2001 at 10:07:23AM +1000, Chris.Hadgis at mincom.com wrote:
!> Is it my imagination, or is twisted.reality somewhat similar to Python 
!> Universe Builder? I have just discovered this after reading through the 

!> i-f newsgroups this morning.  I plan on downloading it and taking it 
home 
!> to look at.

!Yes, they are similiar -- they both use Python to achieve a great deal of
!built-in dynamism.  They both use pickle to save game state.  However, 
PUB is
!more solidly focused on single-player games, with a trivial networking 
module.
!(they appear to use neither select nor threading, but expect full 
messages to
!arrive at once and never have a socket block.  This will really only work 
for
!testing on a single machine.  Twisted Reality is more of a small RPG 
engine to
!demonstrate the capabilities of its robust networking layer.

I haven't really looked into the PUB network module at all, but obviously 
you have. I was wondering if there was anything PUB does better than TR, 
or if there was anything TR could borrow from PUB. There certainly must be 
some common code.



!I think that neither one is sufficiently mature to make full-blown
!'Jigsaw'-sized games in without hacking on them a bit.

Is this a viable long-term goal? Porting 'Jigsaw' to TR? Hmm... now *that* 
would be interesting. I confess to not having played 'Jigsaw' yet.



!And to let the mask of objectivity drop for a moment, I think that 
Twisted has
!considerably more momentum at this point, even if most of the effort 
isn't
!going into improving Reality itself :-).

I can't argue about that. I have looked at their sourceforge mailing list 
:)



!> Btw, how do I go about getting a TM home-page?

!Meet me on IRC (#python on irc.openprojects.net) and ask nicely :-). I 
need to
!speak with you in real-time to set up an account, and we can put you on 
Twisted
!CVS at the same time.

I'll have to see what I can do about that. My Internet connection from 
work does not allow IRC (damn that firewall). I do not have Internet 
connection at home as hard as that may be to believe :) Which only leaves 
the Internet cafe I sometimes go to during lunch. Tell you what, I will 
get onto the channel today (I hope) and see what happens. Then we can go 
from there.

I'm not sure what time-zone you are in, either. I am in Brisbane, 
Australia, which is GMT +10:00. This is always a problem when trying to 
communicate real-time with someone overseas.

Cheers,
ChrisH




-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From Chris.Hadgis at mincom.com  Sun Sep  2 19:41:31 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Mon, 3 Sep 2001 09:41:31 +1000
Subject: [Twisted-Python] Reality Servers
Message-ID: <OF34943431.19BDE4BA-ON4A256ABB.0080E5AD@mincom.oz.au>

On Wed, Aug 29, 2001 at 09:24:33AM +1000, Chris.Hadgis at mincom.com wrote:

!> (1) 'pull string' of the John Romero action figure results in the 
!> broadcast messages appearing twice. Calls to broadcastToPair() appear 
but 
!> calls to broadcast() do not. I don't know why. I changed the function 
so 
!> the John Romero messages actually appear now. I don't know why 
broadcast() 
!> won't work from the 'pull string' function.
!
!Interesting.  I'll look into it.

I have some more information about this. I know where the problem is, but 
I don't know the solution. I know *a* solution, but not if it is the right 
one :)

If I 'pull string' when the figure is in the room, I get the messages 
once. If I take the figure and 'pull string', I get the messages twice.

This is because broadcastToPair() sends the message to all containers 
associated with the figure's current location. If I leave the figure where 
it is, the containers are 'Room'. But when I take the figure the 
containers are 'Guest' and 'Room'.

My proposed solution is to not include the location's containers in the 
container list. I am not sure of all of the effects of doing this. I know 
when I do this that I get the messages once whether I have taken the 
figure or not. I don't know how to test this with multiple players :( on 
Win98. And I don't know the code well enough to understand the logic 
behind it.

I also think the set of broadcast routines should be standardised, 
especially at this early stage. That way, there will be some standards for 
TRDemo and Inheritance as well as any future games. Some broadcast 
routines just call others.

I do have plans to port the more common IF examples to TR (Golden Skull, 
Alice In Wonderland) and perhaps the Greedy Gargoyle from PUB :) when I 
run out of things I wish to do to TR.

The 'drop' routine for the figure also needs some work. If I drop it when 
I don't have it, I get the message (the self squeaks). If I take it and 
drop it, I don't get the message. All that is needed is a test to see if 
the current location is a guest and broadcast the message then. I don't 
know why there is a call to InappropriateVerb after the message.

Hopefully I will get some more time later to sort this out.

Cheers,
ChrisH




-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From glyph at twistedmatrix.com  Mon Sep  3 02:01:16 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 3 Sep 2001 01:01:16 -0500
Subject: [Twisted-Python] Another tcp.Client question
In-Reply-To: <007001c13402$a6129860$bdc5d9c1@phed>; from grolgh@online.no on Mon, Sep 03, 2001 at 12:57:31AM +0200
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com> <006401c13385$831457e0$c5b2d9c1@phed> <20010902065419.A17803@twistedmatrix.com> <004601c133fe$aa6155e0$bdc5d9c1@phed> <20010902173610.A16883@twistedmatrix.com> <007001c13402$a6129860$bdc5d9c1@phed>
Message-ID: <20010903010116.A29675@twistedmatrix.com>

On Mon, Sep 03, 2001 at 12:57:31AM +0200, Benjamin Bruheim wrote:
> yes, it shall accept one connection, and after the transfer is done, it shall
> close the connection (and in this way tell the user that the transfer is
> done). it shall let the tcp time-out, and that's why we change the port; less
> time is wasted between each new file. I am thinking of letting the user
> define a range of ports, and cycle through that instead of using port 0.

OK.  That isn't really happening.  :-)

> > You have committed it.  Still: I see no loseConnection being called on a
> > *Port*, only on a *Server*, which is a connection that got accepted from a
> > port.
> 
> Isn't 'self.dtpPort = tcp.Port(0, self)' a Port?

Yes.

> self.dtp.transport is self.dtpPort,

No.

> and its method loseConnection is used.

Yes, for some values of "its" :-)

> Besides, isn't Port the same as a server?

No.

Here's the deal -- tcp.Port creates a _listening socket on a port_.  That
_listening socket on a Port_ creates a _Server connection_; the class Server
represents the byte-stream connection socket, the class Port represents the
listening on a port socket.  Servers are created by a Port.

self.dtp.transport is a twisted.internet.tcp.Server; self.dtpPort is a
twisted.internet.tcp.Port (repr 'em sometime ^_^).  Both must have their
connections lost, at different points.

Port.loseConnection() will cause the socket to stop listening.
Server.loseConnection() will cause that particular connection to be closed.
Port.loseConnection should probably happen in the buildProtocol method of your
ProtocolFactory, since it's explicitly only ever supposed to accept one
connection.

Does this make more sense?

> > Yes, and my point is that, as far as I understand FTP, you *should* be
> > exercising that code.  I still don't understand why you're not.
> 
> Well, if I could. And how come nobody ever have run into that removeReader
> with an NameError or something?

Itamar says he did, I think.  I sure did, when I tried it.  That particular
path of code was never exercised -- although hopefully it will be in FTP fairly
soon.  twisted.protocols.ftp was never calling it, only Server.loseConnection,
which is the source of most of your current troubles, I believe.


-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From grolgh at online.no  Mon Sep  3 22:07:43 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Tue, 4 Sep 2001 04:07:43 +0200
Subject: [Twisted-Python] tcp.Port.stopListening =)
Message-ID: <005101c134e6$6346eec0$e7b2d9c1@phed>

Hm, well, I just ask out of fear of a "security-hole". dtpPort is now a listening Port. Right now I have self.pi.dtpPort.loseConnection() in DTP.connectionLost, so that it won't take any connection as soon as the transfer is done. But won't dtpPort accept connections as long as the transfer is going on? If I put the loseConnection in connectionMade I get that twisted.internet.tcp.Port has no fileno plus an failed attempt of closing the socket (since there's no Port-instance anymore). Should the API behave this way?

// phed - master of the obvious







From Chris.Hadgis at mincom.com  Tue Sep  4 02:47:55 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Tue, 4 Sep 2001 16:47:55 +1000
Subject: [Twisted-Python] Reality Servers
Message-ID: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au>

Further progress...

I have changed the Drop routine for the Romero figure. It first tests if 
the location hasIntelligence() before broadcastToPair() the fact it made a 
noise when dropped. Is testing the location for hasIntelligence() the 
standard way of finding out if the location is a guest/player?

I would think that the broadcast routine could be coded as one routine 
with the following parameters:

(self, subject, to_target, to_subject, to_other)

self = reference for the thing where the broadcast originates from

subject = person acting on the thing

to_target = message for thing

to_subject = message for subject

to_other = message for others

I admit I have not sat down and thought about all the different scenarios. 
I'll get to that soon. Hopefully, there will only need to be a few 
broadcast routines (preferably one) which will be suitable for all 
situations.

Glyph, I will provide a diff as soon as we can work out what to do with 
the container problem I mentioned in this thread yesterday.

Cheers,
ChrisH



-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From glyph at twistedmatrix.com  Tue Sep  4 05:27:10 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 4 Sep 2001 04:27:10 -0500
Subject: [Twisted-Python] Reality Servers
In-Reply-To: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au>; from Chris.Hadgis@mincom.com on Tue, Sep 04, 2001 at 04:47:55PM +1000
References: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au>
Message-ID: <20010904042710.A24748@twistedmatrix.com>

On Tue, Sep 04, 2001 at 04:47:55PM +1000, Chris.Hadgis at mincom.com wrote:
> Further progress...
> 
> I have changed the Drop routine for the Romero figure. It first tests if 
> the location hasIntelligence() before broadcastToPair() the fact it made a 
> noise when dropped. Is testing the location for hasIntelligence() the 
> standard way of finding out if the location is a guest/player?

Yes, but this shouldn't be necessary :-\... if you try it while sitting in a
chair, other interesting things will happen, I'm sure.

> I would think that the broadcast routine could be coded as one routine 
> with the following parameters:
>
> (self, subject, to_target, to_subject, to_other)

Yes, this sounds like a good thing.  Also, allHear/oneHears/pairHears should go
away, as they're basically just versions of 'broadcast' which don't respect
position and containment flags.

> I admit I have not sat down and thought about all the different scenarios.
> I'll get to that soon. Hopefully, there will only need to be a few broadcast
> routines (preferably one) which will be suitable for all situations.

Your broadcast routine sounds fine, except for the fact that it's sometimes
convenient to have defaults for situations where you don't need everything.
I'd like to have 'toOther' (the coding standard has changed since I wrote that
original TR code ^_^) as the first param, so you could say something like

frob.broadcast([frob," frobs!"])

and have everyone hear that, adding more of the parameters as keyword
parameters depending on the complexity of your message.

> Glyph, I will provide a diff as soon as we can work out what to do with the
> container problem I mentioned in this thread yesterday.

Responding to that email separately...

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Tue Sep  4 05:39:16 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 4 Sep 2001 04:39:16 -0500
Subject: [Twisted-Python] Reality Servers
In-Reply-To: <OF34943431.19BDE4BA-ON4A256ABB.0080E5AD@mincom.oz.au>; from Chris.Hadgis@mincom.com on Mon, Sep 03, 2001 at 09:41:31AM +1000
References: <OF34943431.19BDE4BA-ON4A256ABB.0080E5AD@mincom.oz.au>
Message-ID: <20010904043916.B24748@twistedmatrix.com>

On Mon, Sep 03, 2001 at 09:41:31AM +1000, Chris.Hadgis at mincom.com wrote:

> ... broadcastToPair() sends the message to all containers 
> associated with the figure's current location. If I leave the figure where 
> it is, the containers are 'Room'. But when I take the figure the 
> containers are 'Guest' and 'Room'.

Yep, that's right; and it should remain so.  It's important to be able to
determine the 'real' position as well as the other positions of an object.

> My proposed solution is to not include the location's containers in the 
> container list. I am not sure of all of the effects of doing this. I know 
> when I do this that I get the messages once whether I have taken the 
> figure or not. I don't know how to test this with multiple players :( on 
> Win98. And I don't know the code well enough to understand the logic 
> behind it.

I'd say that this is the wrong solution.

> I also think the set of broadcast routines should be standardised, 
> especially at this early stage. That way, there will be some standards for 
> TRDemo and Inheritance as well as any future games. Some broadcast 
> routines just call others.

Yes.  Those routines have been through more revisions than any other code I've
ever worked on, and mostly before I got exposed to the 'simplest thing'
doctrine of XP, as is probably obvious :).  The single-broadcast proposal you I
responded to in my other email seems like a good solution to that, and it
should not require making any changes to the placement code.

Such a unified 'broadcast' ought to collect all the objects in all the
locations that the object is present in, uniquify that list, and *then* start
broadcasting; I was still starry-eyed from reading too many lisp textbooks and
wanted to do everything recursively before :).  Iteration is better suited to
this problem, I think.

> I do have plans to port the more common IF examples to TR (Golden Skull, 
> Alice In Wonderland) and perhaps the Greedy Gargoyle from PUB :) when I 
> run out of things I wish to do to TR.

Cool.  Those ports would be nifty :)

> The 'drop' routine for the figure also needs some work. If I drop it when 
> I don't have it, I get the message (the self squeaks). If I take it and 
> drop it, I don't get the message. All that is needed is a test to see if 
> the current location is a guest and broadcast the message then. I don't 
> know why there is a call to InappropriateVerb after the message.

Feel free to fix it.

It raises InappropriateVerb because that means "Keep going and looking for
other verbs called 'drop', then do that."  "Inappropriate" might be an, erm,
inappropriate word for that. :-)

However, there were plans at one point to replace as many verbs as possible
with 'action' methods, that would be called as pre/post on multiple objects and
somewhat more special-cased as in Inform, and relegate the verb_xxx methods to
parsing.

I still think this is a good idea but don't really have much time to implement
it.

BTW: If you're going to be patching code, I recommend downloading the newest
TRDemo and Inheritance code, as I've modified them to be Twisted Plugins and
modified their README's accordingly.  More documentation forthcoming.

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From dave at dcit.com  Tue Sep  4 11:06:10 2001
From: dave at dcit.com (David Sturgis)
Date: Tue, 4 Sep 2001 10:06:10 -0500
Subject: [Twisted-Python] Reality Servers
In-Reply-To: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au>
References: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au>
Message-ID: <20010904100610.5f03aa53.dave@dcit.com>

On Tue, 4 Sep 2001 16:47:55 +1000
Chris.Hadgis at mincom.com wrote:

> I have changed the Drop routine for the Romero figure. It first tests if 
> the location hasIntelligence() before broadcastToPair() the fact it made a 
> noise when dropped. Is testing the location for hasIntelligence() the 
> standard way of finding out if the location is a guest/player?

     I haven't gotten to do much work on twisted lately (or Reality) but it is nice to know that my test items are still causing trouble.  ;-)  (ask Glyph about the brass cockroach sometime for a good story on beta testing...)

--
David Sturgis
dave at dcit.com
Software Developer
DataConcepts Information Technology Corporation
"The Information Technology Company" (tm)
http://www.dcit.com
724 Bergen Blvd
Ridgefield, NJ 07657
201-313-1845 ext 718
201-941-9699 fax




From lists at itamarst.org  Tue Sep  4 11:00:03 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 04 Sep 2001 18:00:03 +0300
Subject: [Twisted-Python] We need a bug tracking system
References: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au> <20010904100610.5f03aa53.dave@dcit.com>
Message-ID: <3B94EC73.2010808@itamarst.org>

Anyone want to volunteer to setup Roundup (roundup.sf.net) or some other bug 
tracking system of your choice?





From m at moshez.org  Wed Sep  5 14:06:36 2001
From: m at moshez.org (Moshe Zadka)
Date: Wed,  5 Sep 2001 21:06:36 +0300 (IDT)
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/python otp.py,NONE,1.1
In-Reply-To: <E15eeuR-0007ie-00@zaibach.twistedmatrix.com>
References: <E15eeuR-0007ie-00@zaibach.twistedmatrix.com>
Message-ID: <20010905180636.2CD0E3833@darjeeling>

On Wed, 05 Sep 2001, Benjamin Bruheim <phed at twistedmatrix.com> wrote:

> def stringToLong(s):
>     """ Convert bytes to long integer """
...
> def stringToDWords(s):
>     """ Convert bytes to a list of four 32-bits words """
...
> def longToString(l):
>     """ Convert long to digest """
...

Was there a good reason you reimplemented the struct module in Python?

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From Chris.Hadgis at mincom.com  Wed Sep  5 19:51:25 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Thu, 6 Sep 2001 09:51:25 +1000
Subject: [Twisted-Python] Reality Servers - diffs included
Message-ID: <OF89855288.D74AAE8C-ON4A256ABE.0081909C@mincom.oz.au>

Here is a diff for tkfaucet for inclusion in 0.10.2

Changes made are (1) shortcuts, (2) word-wrapped, logically-sized  frames, 
(3) errors in a message box

--- C:\TMLold\Twisted-0.10.0\twisted\reality\ui\tkfaucet.py     Sun Aug 19 
17:52:46 2001
+++ C:\TML\Twisted-0.10.0\twisted\reality\ui\tkfaucet.py        Tue Aug 28 
22:18:54 2001
@@ -20,25 +20,39 @@
 
 from Tkinter import *
 from ScrolledText import *
+from tkMessageBox import *
 
 from twisted.spread import pb
 from twisted.internet import tkinternet, main, tcp
 
 class MainWindow(Toplevel, pb.Referenced):
+
+    shortcuts = {"n":"go north",
+                 "s":"go south",
+                 "e":"go east",
+                 "w":"go west",
+                 "l":"look",
+                 "ne":"go northeast",
+                 "nw":"go northwest",
+                 "sw":"go southwest",
+                 "se":"go southeast",
+                 "u":"go up",
+                 "d":"go down"}
+
     def __init__(self, *args,**kw):
         self.descriptions = {}
         self.items = {}
         self.exits = []
         apply(Toplevel.__init__,(self,)+args,kw)
         self.title("Reality Faucet")
-        self.happenings = ScrolledText(self, height=5, width=5)
+        self.happenings = ScrolledText(self, height=6, width=72, 
wrap='word')
 
         midf = Frame(self)
         ddf = Frame(midf)
         idf = Frame(midf)
 
-        a = self.descriptionField = ScrolledText(ddf, height=5, width=5)
-        b = self.itemsField = ScrolledText(idf, height=5, width=30)
+        a = self.descriptionField = ScrolledText(ddf, height=12, 
width=72, wrap='word')
+        b = self.itemsField = ScrolledText(idf, height=12, width=36, 
wrap='word')
         a.pack(fill=BOTH, expand=YES)
         b.pack(fill=BOTH, expand=YES)
         ddf.pack(side=LEFT, fill=BOTH, expand=YES)
@@ -72,6 +86,7 @@
 
     def tryAgain(self, er):
         print 'oops',er
+        showerror('Oops', er)
 
     def disco(self):
         print 'disconnected'
@@ -128,6 +143,9 @@
 
     def doSend(self, *evstuf):
         sentence = self.entry.get()
+        possible_shortcut = self.shortcuts.get(sentence)
+        if possible_shortcut:
+            sentence = possible_shortcut
         self.doNow(sentence)
         self.entry.delete('0','end')
 


Here is a diff for trdemo for inclusion in 0.10.2

Changes made are (1) correct broadcast for John Romero "pull", (2) correct 
broadcast for John Romero "drop"

--- C:\TMLold\Twisted-0.10.0\trdemo\trdemo\trdemo.py    Mon Aug 20 
21:46:14 2001
+++ C:\TML\Twisted-0.10.0\trdemo\trdemo\trdemo.py       Mon Sep 03 
23:20:02 2001
@@ -175,15 +175,19 @@
         """
         self.broadcastToPair(sentence.subject,
                              to_subject="",
                              to_target=("You pull ",self,"'s string."),
                              to_other =(sentence.subject," pulls 
",self,"'s string."))
         f = whrandom.random()
         if f < 0.3:
-            self.broadcast(self,"'s string reels back in, and it chirps 
\"",whrandom.choice(self.dollSpeech),"\" in a faint, high-pitched voice.")
+            s = (self,"'s string reels back in, and it chirps 
\"",whrandom.choice(self.dollSpeech),"\" in a faint, high-pitched voice.")
         elif f < 0.7:
-            self.broadcast(self,"'s string reels itself back in, and it 
says, \"",whrandom.choice(self.dollSpeech),"\" in a faint, high-pitched 
voice.")
+            s = (self,"'s string reels itself back in, and it says, 
\"",whrandom.choice(self.dollSpeech),"\" in a faint, high-pitched voice.")
         else:
-            self.broadcast("As ",self,"'s string reels in, it squeaks 
\"",whrandom.choice(self.dollSpeech),"\"")
+            s = ("As ",self,"'s string reels in, it squeaks 
\"",whrandom.choice(self.dollSpeech),"\"")
+        self.broadcastToPair(sentence.subject,
+                             to_subject="",
+                             to_target=s,
+                             to_other="")
 
 
     def verb_squeeze(self, sentence):
@@ -202,7 +206,11 @@
 
         Now you can be just like eidos!
         """
-        self.broadcast(self," emits a faint squeak as it lands on the 
floor.")
+        if self.location._hasIntelligence():
+            # self.broadcast(self," emits a faint squeak as it lands on 
the floor.")
+            self.broadcastToPair(sentence.subject, to_subject='',
+                                 to_target = (self," emits a faint squeak 
as it lands on the floor."),
+                                 to_other = '')
         raise error.InappropriateVerb()
 
 class Fountain(thing.Thing):



I will make fixing up the broadcast() and hears() routines my priority 
unless someone else wants to do it. I have not submitted any patches for 
this yet because I am still working on it.

I suggest renaming InappropriateVerb to PassVerb. TADS uses pass when a verb has been "over-written" as in 
this case.

What is the story behind the brass cockroach :)

Cheers,
ChrisH



-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From grolgh at online.no  Wed Sep  5 21:09:35 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Thu, 6 Sep 2001 03:09:35 +0200
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
References: +ADw-E15eeuR-0007ie-00+AEA-zaibach.twistedmatrix.com+AD4- +ADw-20010905180636.2CD0E3833+AEA-darjeeling+AD4-
Message-ID: <003a01c13670$987ab460$2bc3d9c1@phed>

+AD4- +AD4- def stringToLong(s):
+AD4- +AD4-     +ACIAIgAi- Convert bytes to long integer +ACIAIgAi-
+AD4- ...
+AD4- +AD4- def stringToDWords(s):
+AD4- +AD4-     +ACIAIgAi- Convert bytes to a list of four 32-bits words +ACIAIgAi-
+AD4- ...
+AD4- +AD4- def longToString(l):
+AD4- +AD4-     +ACIAIgAi- Convert long to digest +ACIAIgAi-
+AD4- ...
+AD4- 
+AD4- Was there a good reason you reimplemented the struct module in Python?

Well, struct seems almost like an overkill, but could probably replace most usage of these routines. If I should need a good reason for keeping them, it would be my uncertainity of its (structs) endianism/portability since the codes need to be. It just looks like a module only used in interfacing. 

This is an only excuse since I didn't know of struct. :) Thanks for the tip

// phed






From carmstro at twistedmatrix.com  Wed Sep  5 23:02:24 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Wed, 5 Sep 2001 23:02:24 -0400
Subject: [Twisted-Python] Reality Servers - diffs included
In-Reply-To: <OF89855288.D74AAE8C-ON4A256ABE.0081909C@mincom.oz.au>
Message-ID: <20010905230222.A931@Fookidla.org>

Would you mind getting rid of all those "from foo import *"? It's against
the Twisted coding standard (I know it was probably like this before you
hacked it, but since you're already up.. ;-))

On Thu, Sep 06, 2001 at 09:51:25AM +1000, Chris.Hadgis at mincom.com wrote:
> Here is a diff for tkfaucet for inclusion in 0.10.2
> 
> Changes made are (1) shortcuts, (2) word-wrapped, logically-sized  frames, 
> (3) errors in a message box

-- 
Chris Armstrong                        carmstro at twistedmatrix.com
http://twistedmatrix.com/~carmstro     carmstro at dynup.net




From glyph at twistedmatrix.com  Thu Sep  6 02:43:55 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Sep 2001 01:43:55 -0500
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
In-Reply-To: <003a01c13670$987ab460$2bc3d9c1@phed>; from grolgh@online.no on Thu, Sep 06, 2001 at 03:09:35AM +0200
References: <003a01c13670$987ab460$2bc3d9c1@phed>
Message-ID: <20010906014355.A29106@twistedmatrix.com>

On Thu, Sep 06, 2001 at 03:09:35AM +0200, Benjamin Bruheim wrote:

> This is an only excuse since I didn't know of struct. :) Thanks for the tip

To continue the trend of beating on poor Benjamin here, a few comments about
twisted.python.otp... :-)

It seems oddly placed in twisted.python, maybe twisted.protocols would be
better?  I know it's not a wire protocol, but it is an RFC implementation.

It uses the same vocabulary as twisted.python.authenticator, which is hopefully
being obseleted soon (by twisted.internet.passport)  Is that just a
coincidence?  If not, it shouldn't; those classes have nothing to do with each
other, and the parallels are very misleading.  Otherwise, leave the names as
they are, since the other class will be removed soon.

I applaud your effort to do testing, but could you please use the same testing
style as the rest of Twisted, as in the twisted/test directory? :-)  Maybe that
should be in the coding standard...

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From lists at itamarst.org  Thu Sep  6 05:36:27 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Sep 2001 12:36:27 +0300
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/python otp.py,NONE,1.1
References: <E15eeuR-0007ie-00@zaibach.twistedmatrix.com> <20010905180636.2CD0E3833@darjeeling>
Message-ID: <3B97439B.3060400@itamarst.org>

Moshe Zadka wrote:

> Was there a good reason you reimplemented the struct module in Python?

Yes, struct can't deal with arbitarily long integers:

 >>> struct.pack("L", 299999999999999999999999999999999999999999l)
Traceback (most recent call last):
   File "<console>", line 1, in ?
OverflowError: long int too long to convert





From grolgh at online.no  Thu Sep  6 14:01:40 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Thu, 6 Sep 2001 20:01:40 +0200
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
References: <003a01c13670$987ab460$2bc3d9c1@phed> <20010906014355.A29106@twistedmatrix.com>
Message-ID: <000e01c136fd$fd57cca0$cbb3d9c1@phed>

> To continue the trend of beating on poor Benjamin here, a few comments about
> twisted.python.otp... :-)

Oh, I can take it. It kinda stores up my shares for _my_ nasty replies later on ;)

> It seems oddly placed in twisted.python, maybe twisted.protocols would be
> better?  I know it's not a wire protocol, but it is an RFC implementation.

Well, it is selfcontained and is divided into two classes: one with service routines, 
and one which is a selfupdating password container. I can't say that I understand
what these should do in protocols, since they have nothing in common with any
of the other modules in protocols. It can also be used in a calculator as well, which
is the most popular usage of OTP :)

> It uses the same vocabulary as twisted.python.authenticator, which is hopefully
> being obseleted soon (by twisted.internet.passport)  Is that just a
> coincidence?  If not, it shouldn't; those classes have nothing to do with each
> other, and the parallels are very misleading.  Otherwise, leave the names as
> they are, since the other class will be removed soon.

I must admit that I used Authenticator as inspiration for finding names, but it does 
not work the same way at all. I think the parameters and docstrings should make 
that obvious.
I haven't looked into it yet, but I expect that some names may change if I 
add SASL-compliance.

> I applaud your effort to do testing, but could you please use the same testing
> style as the rest of Twisted, as in the twisted/test directory? :-)  Maybe that
> should be in the coding standard...

Hm, I kinda followed the "python-standard" there, but whatever fits :)

Some other issues: SMTP seems to use SASL authentication and I could write some
routines for OTP that can be used in SASL since it supports the OTP authentication
scheme. And there's one big flaw in OTP as well: When the sequence has run out 
(default is 1000 password issued) the sequence has to be reset, this is not done
automatically since this needs to be implemented in each protocol; or by an util
which has to be run on the serverside on a secure connection. 






From glyph at twistedmatrix.com  Thu Sep  6 16:53:29 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Sep 2001 15:53:29 -0500
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
In-Reply-To: <000e01c136fd$fd57cca0$cbb3d9c1@phed>; from grolgh@online.no on Thu, Sep 06, 2001 at 08:01:40PM +0200
References: <003a01c13670$987ab460$2bc3d9c1@phed> <20010906014355.A29106@twistedmatrix.com> <000e01c136fd$fd57cca0$cbb3d9c1@phed>
Message-ID: <20010906155329.A7226@twistedmatrix.com>

On Thu, Sep 06, 2001 at 08:01:40PM +0200, Benjamin Bruheim wrote:
> > To continue the trend of beating on poor Benjamin here, a few comments about
> > twisted.python.otp... :-)
> 
> Oh, I can take it. It kinda stores up my shares for _my_ nasty replies later on ;)

I'm looking forward to it... ;-)

> > It seems oddly placed in twisted.python, maybe twisted.protocols would be
> > better?  I know it's not a wire protocol, but it is an RFC implementation.

> Well, it is selfcontained and is divided into two classes: one with service
> routines, and one which is a selfupdating password container. I can't say
> that I understand what these should do in protocols, since they have nothing
> in common with any of the other modules in protocols. It can also be used in
> a calculator as well, which is the most popular usage of OTP :)

Hmm.  A calculator?  I must admit I'm a little confused by that, but okay...

> Some other issues: SMTP seems to use SASL authentication and I could write
> some routines for OTP that can be used in SASL since it supports the OTP
> authentication scheme. And there's one big flaw in OTP as well: When the
> sequence has run out (default is 1000 password issued) the sequence has to be
> reset, this is not done automatically since this needs to be implemented in
> each protocol; or by an util which has to be run on the serverside on a
> secure connection.

This is the reason I felt it should be in protocols.  It requires specific
support from various protocols, and it's not generally useful in (most?)
non-networked applications...

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From grolgh at online.no  Thu Sep  6 17:20:07 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Thu, 6 Sep 2001 23:20:07 +0200
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
References: <003a01c13670$987ab460$2bc3d9c1@phed> <20010906014355.A29106@twistedmatrix.com> <000e01c136fd$fd57cca0$cbb3d9c1@phed> <20010906155329.A7226@twistedmatrix.com>
Message-ID: <006e01c13719$e54ca4c0$cbb3d9c1@phed>

> > in common with any of the other modules in protocols. It can also be used in
> > a calculator as well, which is the most popular usage of OTP :)
> Hmm.  A calculator?  I must admit I'm a little confused by that, but okay...

A password calculator :)

> > reset, this is not done automatically since this needs to be implemented in
> > each protocol; or by an util which has to be run on the serverside on a
> > secure connection.
> This is the reason I felt it should be in protocols.  It requires specific
> support from various protocols, and it's not generally useful in (most?)
> non-networked applications...

In its current state there is no protocol specific issues. All it does is to return
strings which the protocols may use. The reason I don't feel it shouldn't be in
protocols is that it does not depend on anything in twisted for operation. Nor is it
protocolbound, actually the logic place to use it is in passport.Identity. And generate
the object otp.OTP each time the password is set. But if you wish, I can move it.

// phed






From glyph at twistedmatrix.com  Thu Sep  6 18:34:12 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Sep 2001 17:34:12 -0500
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
In-Reply-To: <006e01c13719$e54ca4c0$cbb3d9c1@phed>; from grolgh@online.no on Thu, Sep 06, 2001 at 11:20:07PM +0200
References: <003a01c13670$987ab460$2bc3d9c1@phed> <20010906014355.A29106@twistedmatrix.com> <000e01c136fd$fd57cca0$cbb3d9c1@phed> <20010906155329.A7226@twistedmatrix.com> <006e01c13719$e54ca4c0$cbb3d9c1@phed>
Message-ID: <20010906173412.A9741@twistedmatrix.com>

On Thu, Sep 06, 2001 at 11:20:07PM +0200, Benjamin Bruheim wrote:
> In its current state there is no protocol specific issues. All it does is to
> return strings which the protocols may use. The reason I don't feel it
> shouldn't be in protocols is that it does not depend on anything in twisted
> for operation. Nor is it protocolbound, actually the logic place to use it is
> in passport.Identity. And generate the object otp.OTP each time the password
> is set. But if you wish, I can move it.

I'll leave it up to your judgement, just take what I said as a suggestion :-).
The ultimate critera for where a particular thing should go would be where the
majority of people would look for it in the codebase; and since I'm not someone
who'd likely be looking for an OTP implementation, I don't know where I'd look
for it.

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Thu Sep  6 19:16:54 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Sep 2001 18:16:54 -0500
Subject: [Twisted-Python] Reality Servers - diffs included
In-Reply-To: <OF89855288.D74AAE8C-ON4A256ABE.0081909C@mincom.oz.au>; from Chris.Hadgis@mincom.com on Thu, Sep 06, 2001 at 09:51:25AM +1000
References: <OF89855288.D74AAE8C-ON4A256ABE.0081909C@mincom.oz.au>
Message-ID: <20010906181654.A10246@twistedmatrix.com>

Just tried to apply this, and patch doesn't like it.  Please configure your MUA
to not break lines, or send the patch as an attachment.

On Thu, Sep 06, 2001 at 09:51:25AM +1000, Chris.Hadgis at mincom.com wrote:
> Here is a diff for tkfaucet for inclusion in 0.10.2

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From Chris.Hadgis at mincom.com  Thu Sep  6 19:29:53 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Fri, 7 Sep 2001 09:29:53 +1000
Subject: [Twisted-Python] Reality Servers - diffs included
Message-ID: <OF6F38F481.DDCC0DA7-ON4A256ABF.00806963@mincom.oz.au>

Sorry about the broken patches.

I blame Lotus Notes and the cretins who forced it upon us.

Please find attached the two diffs.

The next diff will include the change to replace "from foo import *" with 
"from foo import required-stuff".

Please let me know if this comes through okay. I don't trust Lotus Notes.

ChrisH



-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: trdemo.diff
Type: application/octet-stream
Size: 2310 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20010907/b242361d/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: tkfaucet.diff
Type: application/octet-stream
Size: 2218 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20010907/b242361d/attachment-0001.obj 

From bruheim at c2i.net  Fri Sep  7 09:46:50 2001
From: bruheim at c2i.net (Maj-Britt Bruheim)
Date: Fri, 7 Sep 2001 15:46:50 +0200
Subject: [Twisted-Python] tcp.GetHost in twisted.web.server
Message-ID: <003b01c137a3$8c465120$38c3d9c1@phed>

Just checking before I commit :)

Why do this:

    _host = socket.gethostbyaddr(socket.gethostname())[0]
    ...
    def getHost(self):
        return self._host

when this works?

    def getHost(self):
        return self.transport.GetHost()

This at least doesn't make the crash go bad in win98

// phed






From glyph at twistedmatrix.com  Fri Sep  7 17:18:06 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 7 Sep 2001 16:18:06 -0500
Subject: [Twisted-Python] tcp.GetHost in twisted.web.server
In-Reply-To: <003b01c137a3$8c465120$38c3d9c1@phed>; from bruheim@c2i.net on Fri, Sep 07, 2001 at 03:46:50PM +0200
References: <003b01c137a3$8c465120$38c3d9c1@phed>
Message-ID: <20010907161806.A18743@twistedmatrix.com>

On Fri, Sep 07, 2001 at 03:46:50PM +0200, Maj-Britt Bruheim wrote:
> Just checking before I commit :)
> 
> Why do this:
> 
>     _host = socket.gethostbyaddr(socket.gethostname())[0]
>     ...
>     def getHost(self):
>         return self._host
> 
> when this works?
> 
>     def getHost(self):
>         return self.transport.GetHost()

Can't recall any reason for it at the moment except for the fact that your
capitalization is wrong and those methods do subtly different things... :-)

> This at least doesn't make the crash go bad in win98

What crash?

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From m at moshez.org  Sat Sep  8 12:14:09 2001
From: m at moshez.org (Moshe Zadka)
Date: Sat,  8 Sep 2001 19:14:09 +0300 (IDT)
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/web widgets.py,1.6,1.7
In-Reply-To: <E15ffzC-0000Qo-00@zaibach.twistedmatrix.com>
References: <E15ffzC-0000Qo-00@zaibach.twistedmatrix.com>
Message-ID: <20010908161409.A98E03833@darjeeling>

On Sat, 08 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> -import string, time, types, traceback, copy, pprint, sys, os
> +import string, time, types, traceback, copy, pprint, sys, os, string

string is imported twice. No biggie, but it ain't nice

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From grolgh at online.no  Sat Sep  8 15:34:44 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sat, 8 Sep 2001 21:34:44 +0200
Subject: [Twisted-Python] tcp.GetHost in twisted.web.server
References: <003b01c137a3$8c465120$38c3d9c1@phed> <20010907161806.A18743@twistedmatrix.com>
Message-ID: <004901c1389d$50868a60$dbaed9c1@phed>

> >     def getHost(self):
> >         return self.transport.GetHost()
> Can't recall any reason for it at the moment except for the fact that your
> capitalization is wrong and those methods do subtly different things... :-)

Well, it wasn't just that. :) With the correct casing it went nuts (because I 
didn't bother to check if it was run at all; it is only used in connection with
cgi):

    def getHost(self):
        return socket.gethostbyaddr(self.transport.getHost()[1])

works better :) 

> > This at least doesn't make the crash go bad in win98
> What crash?

The bug was that it used the network socket which isn't your only choice all the time.
Now the routine works for localhost too. The reason it went bad under win98 was
because I wasn't always online (modem), and gethostbyaddr couldn't find eg.
the machinename 'phed' :P The big difference is that _host was generated only at 
the creation of the Request-class.

// phed






From moshez at zadka.com  Sun Sep  9 07:44:27 2001
From: moshez at zadka.com (Moshe Zadka)
Date: 9 Sep 2001 11:44:27 -0000
Subject: [Twisted-Python] Time out on client connections
Message-ID: <20010909114427.24228.qmail@green.zadka.com>

Here's a patch, for your review:
(against 0.10.1, but should apply cleanly)

diff -urN Twisted/twisted/internet/main.py changed/twisted/internet/main.py
--- Twisted/twisted/internet/main.py	Mon Aug 20 14:10:14 2001
+++ changed/twisted/internet/main.py	Sun Sep  9 14:27:01 2001
@@ -179,10 +179,12 @@
             run()
             threadable.dispatcher.disown(self)
 
+tempDelayed = delay.Delayed() # A delay for non-peristent delayed actions
+tempDelayed.ticks = 1
 reads = {}
 writes = {}
 running = None
-delayeds = [task.theScheduler]
+delayeds = [tempDelayed, task.theScheduler]
 if threadable.threaded:
     delayeds.append(threadtask.theScheduler)
 shutdowns = []
diff -urN Twisted/twisted/internet/tcp.py changed/twisted/internet/tcp.py
--- Twisted/twisted/internet/tcp.py	Wed Aug 29 13:13:55 2001
+++ changed/twisted/internet/tcp.py	Sun Sep  9 14:41:32 2001
@@ -115,7 +115,7 @@
 class Client(Connection):
     """A client for TCP (and similiar) sockets.
     """
-    def __init__(self, host, port, protocol):
+    def __init__(self, host, port, protocol, timeout=None):
         """Initialize the client, setting up its socket, and request to connect.
         """
         if host == 'unix':
@@ -143,6 +143,13 @@
         self.doWrite = self.doConnect
         self.doConnect()
         self.logstr = self.protocol.__class__.__name__+",client"
+	if timeout is not None:
+	    main.tempDelayed.later(self.failIfNotConnected, timeout)
+
+    def failIfNotConnected(self):
+        if not self.connected:
+	    self.protocol.connectionFailed()
+	    self.loseConnection()
 
     def createInternetSocket(self):
         """(internal) Create an AF_INET socket.





From grolgh at online.no  Sun Sep  9 12:23:55 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 9 Sep 2001 18:23:55 +0200
Subject: [Twisted-Python] WebDAV in twisted.web.server
Message-ID: <002c01c1394c$0d0343a0$67b3d9c1@phed>

Hello,

I have been taking a look on WebDAV, especially RFC 2518, "HTTP Extension for Distributed Authoring -- WEBDAV". The extension concerns four areas, queries and manipulation of properties, handling of collections, locking and namespace operations. The two last areas are not crucial.
Each of these areas has its set of methods, which is dispatched the same way as 'GET' and 'PUT', but usually with a XML-file appended to the request.

The twisted.web architecture of resources is well suited for adding WebDAV. resource.Resource is fitting the term Resource as it is used in the RFC. And twisted.web.server.Request's way of handling requests/responses seems open-ended enough too add a xml-reader/writer that concates the reply with XML (mimed). I will here try to examine the changes that need to be done to twisted.web.server (and protocols.http). Barely nothing else is examined, or needed.
I will blend some explanations into my proposal in case my understanding of twisted.* is wrong :).
 
The methods 'GET', 'PUT', 'HEAD', etc, is not touched by WebDAV. These methods by definitions only concern 'files' (eg. GET retrieves the entity described by the URI).
The WebDAV-Resource '/foo/' is a Resource Collection, and '/foo/file' is a member of the collection. If '/foo/faa/file' exists, then the 'faa'-collection needs to exist because the resource-tree has to be consistent. The trailing slash tells if the files is a collection or not; this is not a rule so the server may correct the client with a MOVED_PERMANENTLY in the same way web.static does. The tree may however contain non-DAV-compliant resources, so there won't be a need to force DAV onto everything. If a putChild should be put into a collection is a discussion on its own :) (I will however mean that a DAVResource should be a good starting point for making everything DAV, by letting the stuff to go DAV inherit DAVResource)
 
Since resource is the dispatcher of methods, then WebDAV can be a simple twisted.web.resource. The request has arguments in the Header and this gets conviently passed to the assigned resource. The request may contain an XML with additional arguments as well. Request.process seems to handle the task well, except that its 'POST'-handler may be rewritten to collect the XML for most methods.
'GET' is done in the regular way, no XML, just send the entity the URI point at (for collections, send eg. the index.html. I don't know the case here, really). This is resource-stuff. All the action will be in resource.render (it will render the response XML, I guess).

Minor thing, yet: If a request take long time to accomplish (eg. MOVE 100M of data over wire) there is a reply 102 PROCESSING which tells the client to keep the line open and wait. I don't know how the details, but I guess a NOT_DONE_YET may stop the block :) The problems with this is that it will send a response later on, I guess this can be hacked in.

The changes that need to be done to protocols.http is simply adding the new error-codes, since that is all that is in it :) If we want to add namespace operations (MOVE, COPY) the http-client needs to be made DAV-compliant. Note that COPY/MOVE also can be done by FTP too ;)

The changes:
Request.resource: retrieve the XML in the request.
Handle the response 102 PROCESSING
protocols.http: Errorcodes
The conclusion:
Everything will happen in the DAV-Resource. :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20010909/e6e39950/attachment.htm 

From grolgh at online.no  Sun Sep  9 12:40:23 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 9 Sep 2001 18:40:23 +0200
Subject: [Twisted-Python] WebDAV in twisted.web.server
References: <002c01c1394c$0d0343a0$67b3d9c1@phed>
Message-ID: <003501c1394e$1f70c100$67b3d9c1@phed>

(I noticed my orginal message was sent Outlookish, tell me if that annoys you or not :P)

Some comments I overlooked:

> everything. If a putChild should be put into a collection is a discussion on its own :) (I 
> will however mean that a DAVResource should be a good starting point for making 
> everything DAV, by letting the stuff to go DAV inherit DAVResource)
The alternative is to phase in DAV into twisted.web.resource itself and make _everything_ WebDAV. A DAVResource will require everything to register the files so that properties can be assigned to them.
 
> Since resource is the dispatcher of methods, then WebDAV can be a simple twisted.web.resource. The 
Resource.render must check request.method that is.

// phed






From grolgh at online.no  Sun Sep  9 12:55:34 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 9 Sep 2001 18:55:34 +0200
Subject: [Twisted-Python] WebDAV in twisted.web.server
References: <002c01c1394c$0d0343a0$67b3d9c1@phed> <003501c1394e$1f70c100$67b3d9c1@phed>
Message-ID: <004001c13950$3f276d80$67b3d9c1@phed>

>> everything. If a putChild should be put into a collection is a discussion on its own :) (I 
>> will however mean that a DAVResource should be a good starting point for making 
>> everything DAV, by letting the stuff to go DAV inherit DAVResource)
> The alternative is to phase in DAV into twisted.web.resource itself and make _everything_ WebDAV. A 
> DAVResource will require everything to register the files so that properties can be assigned to them.

A discussion on its own; I'm already disagreeing with my self; The DAVResource just uses the getChild-construction to run through the tree. It just needs enough data to get a list of its childrens resources ("files"/entities), and the ability to retrieve/patch the dict containing properties for each entity.

// phed






From carmstro at twistedmatrix.com  Sun Sep  9 13:21:04 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Sun, 9 Sep 2001 13:21:04 -0400
Subject: [Twisted-Python] WebDAV in twisted.web.server
In-Reply-To: <003501c1394e$1f70c100$67b3d9c1@phed>
Message-ID: <20010909132104.A7072@Fookidla.org>

I was wondering if it would be possible to implement WebDAV fully in
Resources, and not touching anything else. Resources can munge whatever
headers they want, etc, and we could just have a base DAVResource do all
the XML/Mime encoding.

On Sun, Sep 09, 2001 at 06:40:23PM +0200, Benjamin Bruheim wrote:
> (I noticed my orginal message was sent Outlookish, tell me if that annoys you or not :P)
> 
> Some comments I overlooked:
> 
> > everything. If a putChild should be put into a collection is a discussion on its own :) (I 
> > will however mean that a DAVResource should be a good starting point for making 
> > everything DAV, by letting the stuff to go DAV inherit DAVResource)
> The alternative is to phase in DAV into twisted.web.resource itself and make _everything_ WebDAV. A DAVResource will require everything to register the files so that properties can be assigned to them.
>  
> > Since resource is the dispatcher of methods, then WebDAV can be a simple twisted.web.resource. The 
> Resource.render must check request.method that is.
> 
> // phed
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Chris Armstrong                        carmstro at twistedmatrix.com
http://twistedmatrix.com/~carmstro     carmstro at dynup.net




From grolgh at online.no  Sun Sep  9 18:45:22 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Mon, 10 Sep 2001 00:45:22 +0200
Subject: [Twisted-Python] WebDAV in twisted.web.server
Message-ID: <00fd01c13981$1c554800$67b3d9c1@phed>

I'm resending this because I didn't notice it coming up on the ml; sorry if it is a duplicate

> I was wondering if it would be possible to implement WebDAV fully in
> Resources, and not touching anything else. Resources can munge whatever
> headers they want, etc, and we could just have a base DAVResource do all
> the XML/Mime encoding.

Yes, my last post pointed out how that could be done. Though, the stuff I pointed out (eg to make process able to forward the request content even if the method isn't POST) is really only what needs to be done.
The only stupid stuff is that the child-list for the Resources will be duplicated since they need to be a member of their parent-collection. 

So, the DAVResource needs to both represent resources ("files") and collectionresources. Hm, will it create a new DAVResource for each step down the tree? And if it hits an exisisting resource, refer to it? I am not trained in twisted.web =)

Oh, how many times resource and (dav)resource will confuse

// phed
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20010910/dda394e4/attachment.htm 

From tv at twistedmatrix.com  Mon Sep 10 13:22:01 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 10 Sep 2001 20:22:01 +0300
Subject: [Twisted-Python] twisted.wed.widgets and defer.Deferred() giving a list.
Message-ID: <87ofojarly.fsf@ki.yok.utu.fi>

	Hi. I didn't commit this, as it's a bit of a conceptual change.
        Please give feedback. Patch is at the end.

        This change allows web.widgets to call defer.Deferred's
        callback() with a list instead of a string, making it possible
        to stream a web page to the browser by returning a string and
        then a Deferred object.

        Here's a snippet of a web UI I'm doing that streams LDAP
        search results to the browser as soon as the server sends
        them -- see handle_entry():

class LDAPSearchAndPrint(ldap.LDAPSearch):
    def __init__(self, ldapclient, callback, filter=pureldap.LDAPFilterMatchAll):
        ldap.LDAPSearch.__init__(self, ldapclient,
                                 baseObject='dc=example, dc=com',
                                 filter=filter,
                                 )
        self.result=""
        self.callback=callback
        self.count=0

    def handle_success(self):
        self.callback(["<p>%d entries matched."%self.count])

    def handle_entry(self, objectName, attributes):
        result="<p>%s\n<ul>\n"%objectName

        for a,l in attributes:
            assert len(l)>0
            if len(l)==1:
                result=result+"  <li>%s: %s\n"%(a, l[0])
            else:
                result=result+"  <li>%s:\n    <ul>\n"%a
                for i in l:
                    result=result+"      <li>%s\n"%i
                result=result+"    </ul>\n"

        result=result+"</ul>\n"

        c=self.callback
        d=defer.Deferred()
        self.callback=d.callback
        c([result, d])
        self.count=self.count+1

    def handle_fail(self, resultCode, errorMessage):
        self.callback("fail: %d: %s"%(resultCode, errorMessage or "Unknown error"))


--- twisted/web/widgets.py	2001/09/10 17:13:24	1.8
+++ twisted/web/widgets.py	2001/09/10 17:18:37
@@ -283,12 +283,17 @@
     def callback(self, result, position, decNeedsHeaders):
         if result != FORGET_IT:
             self.needsHeaders = self.needsHeaders - decNeedsHeaders
-        if isinstance(result, defer.Deferred):
-            self._addDeferred(result, position)
-        self.lst[position] = result
+        if not isinstance(result, types.ListType):
+            result=[result]
+        for i in xrange(len(result)):
+            if isinstance(result[i], defer.Deferred):
+                self._addDeferred(result[i], position+i)
+        self.lst[position:position+1] = result
+        assert self.position <= position
         self.keepRendering()
-        if isinstance(result, defer.Deferred):
-            result.arm()
+        for r in result:
+            if isinstance(r, defer.Deferred):
+                r.arm()
 
 
     def keepRendering(self):

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}




From twisted at itamarst.org  Mon Sep 10 14:14:20 2001
From: twisted at itamarst.org (Itamar)
Date: Mon, 10 Sep 2001 14:14:20 -0400
Subject: [Twisted-Python] Server not shutting down in Windows
Message-ID: <3B9D02FC.9090709@itamarst.org>

Hey,

In windows 2000, threaded server, my server does nut shutdown when 
main.shutDown() is called. It seens that main.waker is the problem, 
since it is not removed from the list of readers registered with the 
event loop.

Does the following patch seem reasonable (someone better test on unix) 
or does someone have a better suggestion? It does seem to solve the problem:

Index: main.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/main.py,v
retrieving revision 1.23
diff -c -r1.23 main.py
*** main.py	2001/09/02 14:42:10	1.23
--- main.py	2001/09/10 18:19:29
***************
*** 198,203 ****
--- 198,204 ----
       """
       global running
       if running:
+         removeReader(waker)
           running = 0
           log.msg('Starting Shutdown Sequence.')
           threadable.dispatcher.stop()






From grolgh at online.no  Sun Sep  9 14:09:32 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 9 Sep 2001 20:09:32 +0200
Subject: [Twisted-Python] WebDAV in twisted.web.server
References: <20010909132104.A7072@Fookidla.org>
Message-ID: <00b001c1395a$943314a0$67b3d9c1@phed>

> I was wondering if it would be possible to implement WebDAV fully in
> Resources, and not touching anything else. Resources can munge whatever
> headers they want, etc, and we could just have a base DAVResource do all
> the XML/Mime encoding.

Yes, my last post pointed out how that could be done. Though, the stuff I pointed out (eg to make process able to forward the request content even if the method isn't POST) is really only what needs to be done.
The only stupid stuff is that the child-list for the Resources will be duplicated since they need to be a member of their parent-collection. 

So, the DAVResource needs to both represent resources ("files") and collectionresources. Hm, will it create a new DAVResource for each step down the tree? And if it hits an exisisting resource, refer to it? I am not trained in twisted.web =)

Oh, how many times resource and (dav)resource will confuse

// phed






From glyph at twistedmatrix.com  Mon Sep 10 23:17:29 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 Sep 2001 22:17:29 -0500
Subject: [Twisted-Python] WebDAV in twisted.web.server
In-Reply-To: <00b001c1395a$943314a0$67b3d9c1@phed>; from grolgh@online.no on Sun, Sep 09, 2001 at 08:09:32PM +0200
References: <20010909132104.A7072@Fookidla.org> <00b001c1395a$943314a0$67b3d9c1@phed>
Message-ID: <20010910221729.A31128@twistedmatrix.com>

On Sun, Sep 09, 2001 at 08:09:32PM +0200, Benjamin Bruheim wrote:
> > I was wondering if it would be possible to implement WebDAV fully in
> > Resources, and not touching anything else. Resources can munge whatever
> > headers they want, etc, and we could just have a base DAVResource do all
> > the XML/Mime encoding.
> 
> Yes, my last post pointed out how that could be done. Though, the stuff I
> pointed out (eg to make process able to forward the request content even if
> the method isn't POST) is really only what needs to be done.
> 
> The only stupid stuff is that the child-list for the Resources will be
> duplicated since they need to be a member of their parent-collection. 
> 
> So, the DAVResource needs to both represent resources ("files") and
> collectionresources. Hm, will it create a new DAVResource for each step down
> the tree? And if it hits an exisisting resource, refer to it? I am not
> trained in twisted.web =)

To some extent, static.File already represents both of these things.  Could you
just extend Resource to allow various Resources to implement WebDAV in
different ways?  For example, I'd like to be able to describe a TR object
through WebDAV, and it'd be nice if I just had some extended API to
implement...

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From pezz at clipper.ens.fr  Wed Sep 12 06:32:17 2001
From: pezz at clipper.ens.fr (Itai Ben-Yaacov)
Date: Wed, 12 Sep 2001 12:32:17 +0200 (MET DST)
Subject: [Twisted-Python] UDP patch
Message-ID: <Pine.GSO.4.04.10109121223370.18698-101000@clipper.ens.fr>


Hi

Following a suggestion from Moshez, I rewrote his UDP classes in order to
get them somewhat more usable (eventually aiming at DNS protocol
implementation).

the example in doc/examples/udp-echoserv.py is now obsolete and will not
work.  Instead, UDP integrates neatly into doc/examples/echoserv.py

Pezz.

--

Ita? Ben-Yaacov
?quipe de Logique Math?matique
UFR de Math?matiques (case 7012)
Universit? Paris 7
2 place Jussieu
75251 Paris Cedex 05

Email: pezz at logique.jussieu.fr

-------------- next part --------------
A non-text attachment was scrubbed...
Name: udp-patch.gz
Type: application/octet-stream
Size: 2129 bytes
Desc: 
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20010912/27407064/attachment.obj 

From Chris.Hadgis at mincom.com  Thu Sep 13 18:42:25 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Fri, 14 Sep 2001 08:42:25 +1000
Subject: [Twisted-Python] Reality Servers
Message-ID: <OF5CA3355A.921383DB-ON4A256AC6.007CAA7F@mincom.oz.au>

On Mon, Sep 03, 2001 at 09:41:31AM +1000, Chris.Hadgis at mincom.com wrote:

> > ... broadcastToPair() sends the message to all containers 
> > associated with the figure's current location.

[snip]

> > My proposed solution is to not include the location's containers
> > in the container list.

> I'd say that this is the wrong solution.

Indeed it is. Last night I sorted out the problem. broadcastToPair()
calls pairHears() for each container. Each call to pairHears() calls
hears() for target. This means the target gets the target message once
for each container. This is clearly wrong.

My temporary fix is to call hears() for target once in
broadcastToPair() and remove the call from pairHears().

I say it is a temporary solution because I am still in the middle of
overhauling the broadcast and hears routines.

If the next release goes out before the overhaul is complete, please
let me know and I will make the above fix available.

Cheers,
ChrisH

P.S. My heart-felt condolences go out to the Americans on the list,
and indeed to people wherever they are, for the tragedy which occurred
on Tuesday morning. I have been watching the news on the American news
channels (Fox and CNN) here in Australia and I still can't believe
what I am seeing. Courage and hope to all people affected by these
events.



-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From j.her at t-online.de  Thu Sep 13 21:07:02 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Fri, 14 Sep 2001 03:07:02 +0200
Subject: [Twisted-Python] Traceback with CVS HEAD
Message-ID: <15hhQt-2G7nBAC@fwd02.sul.t-online.com>

jh at zaibach:~$  mkwebserver --personal
Traceback (innermost last):
  File "/home/jh/bin/mkwebserver", line 128, in ?
    service = distrib.ResourcePublisher(site)
TypeError: not enough arguments; expected 3, got 2





From j.her at t-online.de  Thu Sep 13 21:39:40 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Fri, 14 Sep 2001 03:39:40 +0200
Subject: [Twisted-Python] Traceback with CVS HEAD
In-Reply-To: <15hhQt-2G7nBAC@fwd02.sul.t-online.com>
Message-ID: <15hhwT-16XqrYC@fwd02.sul.t-online.com>

On Fri, 14 Sep 2001 03:07:02 +0200, Juergen Hermann wrote:

>jh at zaibach:~$  mkwebserver --personal
>Traceback (innermost last):
>  File "/home/jh/bin/mkwebserver", line 128, in ?
>    service = distrib.ResourcePublisher(site)
>TypeError: not enough arguments; expected 3, got 2

OK, I have to use mktap. ;)





From jasbahr at crash.org  Thu Sep 13 23:44:44 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Thu, 13 Sep 2001 22:44:44 -0500
Subject: [Twisted-Python] Twisted Jython
In-Reply-To: <EIEFLCFECLLBKGPNJJIMAECCGPAA.jasbahr@twistedmatrix.com>
Message-ID: <EIEFLCFECLLBKGPNJJIMMECGHFAA.jasbahr@crash.org>

Twisted on Jython?  Does the beast exist?

Jason





From glyph at twistedmatrix.com  Fri Sep 14 15:25:08 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 14 Sep 2001 14:25:08 -0500
Subject: [Twisted-Python] Twisted Jython
In-Reply-To: <EIEFLCFECLLBKGPNJJIMMECGHFAA.jasbahr@crash.org>; from jasbahr@crash.org on Thu, Sep 13, 2001 at 10:44:44PM -0500
References: <EIEFLCFECLLBKGPNJJIMAECCGPAA.jasbahr@twistedmatrix.com> <EIEFLCFECLLBKGPNJJIMMECGHFAA.jasbahr@crash.org>
Message-ID: <20010914142508.A12664@twistedmatrix.com>

On Thu, Sep 13, 2001 at 10:44:44PM -0500, Jason L. Asbahr wrote:
> 
> Twisted on Jython?  Does the beast exist?
> 
> Jason

No, but it's on the TODO list.  The central issue is getting a synchronously
multiplexing main-loop and associated file-descriptor scanning code
(twisted.internet) running inside Jython.  This will probably be possible with
JDK 1.4's multiplexing stuff, but I think the initial approach should be to
"fake it" by spinning up lots of blocking threads and having them communicate
back to, say, the Swing main loop.

Any takers?

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From lists at itamarst.org  Sun Sep 16 06:23:53 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 16 Sep 2001 13:23:53 +0300
Subject: [Twisted-Python] Suggested API addition to threadtask
Message-ID: <3BA47DB9.90002@itamarst.org>

Hi all,

Background:
internet.threadtask lets threads schedule tasks that are then executed by 
the main event loop (Active Object pattern).

Problem:
The results of these tasks are not returned to the threads, nor do the 
threads have any way of seeing if any exceptions were raised when doing the 
task. In most cases this is not an issue (e.g. writing data to a connection) 
but it is a problem with things like opening a new tcp.Client connection.

Suggested Solution:
Optionally allow returning a DeferredResult object when scheduling tasks, 
which can then be used to get the result (or exception) of the task when it 
is eventually executed by the event loop thread.

Example:
Notice how we can catch the exceptions raised by the scheduled task.

==================================================
def toInt(x):
    return int(x)

dresult = threadtask.scheduleWithResult(toInt, args=("23",))
if dresult.haveResult():
     try:
         result = dresult.get()
     except ValueError:
         print "Not an integer"
     else:
         print "It's an integer: %d" % result

===================================================

Feedback I'm looking for:
1) Initially I had the operation that gets the result (DeferredResult.get) 
block, but this is a bad idea since it can deadlock threads waiting for a 
result that will never be returned, e.g. when shutting down the server. 
Instead now I raise a NotReady exception if no result is available. Would 
callbacks be better?

2) Better method names, "scheduleWithResult" is ugly.

3) Is this idea (DeferredResults) applicable to internet.task as well?

Attached is my updated code.
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: threadtask.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20010916/6470e294/attachment.txt 

From lists at itamarst.org  Sun Sep 16 08:10:39 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 16 Sep 2001 15:10:39 +0300
Subject: [Twisted-Python] Patterns in Twisted
Message-ID: <3BA496BF.6040709@itamarst.org>

I've been reading POSA2, and I see Twisted uses a lot of the patterns there. 
You can find more info on each pattern by searching for it in google - most 
of the content in the book is also in publically accessable papers that can 
be found on the web. I'm including here the one sentence description from 
http://www.cs.wustl.edu/~schmidt/POSA/.


= Reactor =
"* The Reactor  architectural pattern allows event-driven applications to 
demultiplex and dispatch service requests that are delivered to an 
application from one or more clients."

The main event loop in twisted.internt.main is a Reactor - it reacts to 
events from select() and Delayed objects and dispatches them.


= Acceptor-Connector =
"* The Acceptor-Connector design pattern decouples the connection and 
initialization of cooperating peer services in a networked system from the 
processing performed by the peer services after they are connected and 
initialized."

This is how twisted works as well - once a connection has been accepted, a 
new Protocol object is created that registers itself with the event loop and 
from then on it deals with this connection.


= Active Object =
"* The Active Object design pattern decouples method execution from method 
invocation to enhance concurrency and simplify synchronized access to 
objects that reside in their own threads of control."

It does this by having a separate thread that runs the methods that. Which 
is how internet.main.threadtask works - threads add tasks to it which are 
then executed by the event loop's thread.


= Async / Half-Async =
"* The Half-Sync/Half-Async architectural pattern decouples asynchronous and 
synchronous service processing in concurrent systems, to simplify 
programming without unduly reducing performance. The pattern introduces two 
intercommunicating layers, one for asynchronous and one for synchronous 
service processing."

This is how threading protocols can be created (see the echoserv_threaded.py 
example). Protocol instances in the async layer add received messages to a 
queue that the threads read, and their results are added back to async layer 
using an implicit queuing layer, the threadtask Active Object.


Strategized Locking is what threadable.synchronize does, I think, Wrapper 
Facade is is used in making the transport level abstract, and Component 
Configurator is implicit in twisted's abilities to add/remove/configure 
different components at runtime.





From lists at itamarst.org  Mon Sep 17 13:53:25 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 Sep 2001 19:53:25 +0200
Subject: [Twisted-Python] Usenix paper on event dispatch mechanisms
Message-ID: <3BA63895.1050208@itamarst.org>

 From Usenix 2001:

*  Scalability of Linux Event-Dispatch Mechanisms,
http://lass.cs.umass.edu/~abhishek/papers/usenix01/paper.ps

Relevance:
Doing multiple accept() calls  instead of one (after a select() call 
tells you a new connection is available) can speed up your application 
considerably under high loads.





From m at moshez.org  Mon Sep 17 16:49:09 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 17 Sep 2001 23:49:09 +0300 (IDT)
Subject: [Twisted-Python] Usenix paper on event dispatch mechanisms
In-Reply-To: <3BA63895.1050208@itamarst.org>
References: <3BA63895.1050208@itamarst.org>
Message-ID: <20010917204909.654EF381F@darjeeling>

On Mon, 17 Sep 2001, Itamar Shtull-Trauring <lists at itamarst.org> wrote:

> Relevance:
> Doing multiple accept() calls  instead of one (after a select() call 
> tells you a new connection is available) can speed up your application 
> considerably under high loads.

Initial benchmarks show that this is a promising avenue. I got speed-ups
between 10% and 50% depending on the load.

Here is the improved Port class:

>---------- snip ------------<
import fcntl
import FCNTL

class Port(abstract.FileDescriptor):
    """I am a TCP server port, listening for connections.

    When a connection is accepted, I will call my factory's buildProtocol with
    the incoming connection as an argument, according to the specification
    described in twisted.protocols.protocol.Factory.

    If you wish to change the sort of transport that will be used, my
    `transport' attribute will be called with the signature expected for
    Server.__init__, so it can be replaced.
    """

    transport = Server
    sessionno = 0
    unixsocket = None
    interface = ''
    backlog = 5

    def __init__(self, port, factory, backlog=5, interface=''):
        """Initialize with a numeric port to listen on.
        """
        self.port = port
        self.factory = factory
        self.backlog = backlog
        self.interface = interface

    def __repr__(self):
        return "<%s on %s>" % (self.factory.__class__, self.port)

    def createInternetSocket(self):
        """(internal) create an AF_INET socket.
        """
        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        fcntl.fcntl(s.fileno(), FCNTL.F_SETFL, os.O_NONBLOCK)
        return s

    def __getstate__(self):
        """(internal) get my state for persistence
        """
        dct = copy.copy(self.__dict__)
        try: del dct['socket']
        except: pass
        try: del dct['fileno']
        except: pass

        return dct

    def startListening(self):
        """Create and bind my socket, and begin listening on it.

        This is called on unserialization, and must be called after creating a
        server to begin listening on the specified port.
        """
        log.msg("%s starting on %s"%(self.factory.__class__, self.port))
        if type(self.port) == types.StringType:
            skt = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
            skt.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            skt.bind(self.port)
            # Make the socket readable and writable to the world.
            mode = os.stat(self.port)[0]
            os.chmod(self.port, mode | stat.S_IROTH | stat.S_IWOTH)
            self.unixsocket = 1
        else:
            skt = self.createInternetSocket()
            skt.bind( (self.interface, self.port) )
        skt.listen(self.backlog)
        self.connected = 1
        self.socket = skt
        self.fileno = self.socket.fileno
        self.startReading()

    def doRead(self):
        """Called when my socket is ready for reading.

        This accepts a connection and callse self.protocol() to handle the
        wire-level protocol.
        """
        try:
            for i in range(40):
                try:
                    skt,addr = self.socket.accept()
                except socket.error, e:
                    if e.args[0] == EWOULDBLOCK:
                        break
                    raise
                protocol = self.factory.buildProtocol(addr)
                s = self.sessionno
                self.sessionno = s+1
                transport = self.transport(skt, protocol, addr, self, s)
                protocol.makeConnection(transport, self)
        except:
            traceback.print_exc(file=log.logfile)

    def doWrite(self):
        """Raises an AssertionError.
        """
        assert 0, "doWrite called on a %s" % str(self.__class__)

    def loseConnection(self):
        """ Stop accepting connections on this port.

        This will shut down my socket and call self.connectionLost().
        """
        # Since ports can't, by definition, write any data, we can just close
        # instantly (no need for the more complex stuff for selectables which
        # write)
        self.stopReading()
        self.connectionLost()

    def connectionLost(self):
        """Cleans up my socket.
        """
        log.msg('(Port %s Closed)' % self.port)
        abstract.FileDescriptor.connectionLost(self)
        self.connected = 0
        self.socket.close()
        if self.unixsocket:
            os.unlink(self.port)
        del self.socket
        del self.fileno

    def logPrefix(self):
        """Returns the name of my class, to prefix log entries with.
        """
        return str(self.factory.__class__)

>------------ snip ----------------<

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From glyph at twistedmatrix.com  Mon Sep 17 18:01:20 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 17 Sep 2001 17:01:20 -0500
Subject: [Twisted-Python] Usenix paper on event dispatch mechanisms
In-Reply-To: <20010917204909.654EF381F@darjeeling>; from m@moshez.org on Mon, Sep 17, 2001 at 11:49:09PM +0300
References: <3BA63895.1050208@itamarst.org> <20010917204909.654EF381F@darjeeling>
Message-ID: <20010917170120.A4975@twistedmatrix.com>

On Mon, Sep 17, 2001 at 11:49:09PM +0300, Moshe Zadka wrote:
> On Mon, 17 Sep 2001, Itamar Shtull-Trauring <lists at itamarst.org> wrote:
> 
> > Doing multiple accept() calls  instead of one (after a select() call 
> > tells you a new connection is available) can speed up your application 
> > considerably under high loads.
> 
> Initial benchmarks show that this is a promising avenue. I got speed-ups
> between 10% and 50% depending on the load.
> 
> Here is the improved Port class:

Wow.  I just read that 3 times, and my brain just can't accept that it is
_good_ for performance.  Thanks for digging it up, itamar!

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From m at moshez.org  Mon Sep 17 21:57:38 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 18 Sep 2001 04:57:38 +0300 (IDT)
Subject: [Twisted-Python] Usenix paper on event dispatch mechanisms
In-Reply-To: <20010917170120.A4975@twistedmatrix.com>
References: <20010917170120.A4975@twistedmatrix.com>, <3BA63895.1050208@itamarst.org> <20010917204909.654EF381F@darjeeling>
Message-ID: <20010918015738.4FD16381F@darjeeling>

On Mon, 17 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Wow.  I just read that 3 times, and my brain just can't accept that it is
> _good_ for performance.  Thanks for digging it up, itamar!

I've played with it some more, trying to do "Adaptability": raise the
number of maximum accept calls per select on success, lower it on
failure. I'm still playing, but in general it tends to improve results
for medium loads (100 concurrent) while worsening results for heavy
loads (1000 concurrent)
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Tue Sep 18 18:40:41 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 19 Sep 2001 00:40:41 +0200
Subject: [Twisted-Python] Usenix paper on event dispatch mechanisms
References: <3BA63895.1050208@itamarst.org> <20010917204909.654EF381F@darjeeling> <20010917170120.A4975@twistedmatrix.com>
Message-ID: <3BA7CD69.2040901@itamarst.org>

Glyph Lefkowitz wrote:


> Wow.  I just read that 3 times, and my brain just can't accept that it is
> _good_ for performance.  Thanks for digging it up, itamar!

Think about it - a selct() is very expensive, and you have to do one 
before every accept(). This way, if a lot of connections are waiting we 
do them quickly (accept() is apparently less expensive) and can starts 
sending them data on the next select(). The paper has more details.





From m at moshez.org  Wed Sep 19 03:01:42 2001
From: m at moshez.org (Moshe Zadka)
Date: Wed, 19 Sep 2001 10:01:42 +0300 (IDT)
Subject: [Twisted-Python] Adaptive Port
Message-ID: <20010919070142.E302E381F@darjeeling>

Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.22
diff -u -r1.22 tcp.py
--- twisted/internet/tcp.py	2001/09/11 04:08:28	1.22
+++ twisted/internet/tcp.py	2001/09/19 06:49:49
@@ -277,6 +277,7 @@
         """
         s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
         s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
+        s.setblocking(0)
         return s
 
     def __getstate__(self):
@@ -312,12 +313,9 @@
         self.connected = 1
         self.socket = skt
         self.fileno = self.socket.fileno
+        self.numberAccepts = 100
         self.startReading()
 
-    def getSocket(self):
-        skt,addr = self.socket.accept()
-        return skt, addr
-
     def doRead(self):
         """Called when my socket is ready for reading.
 
@@ -325,12 +323,21 @@
         wire-level protocol.
         """
         try:
-            skt, addr = self.getSocket()
-            protocol = self.factory.buildProtocol(addr)
-            s = self.sessionno
-            self.sessionno = s+1
-            transport = self.transport(skt, protocol, addr, self, s)
-            protocol.makeConnection(transport, self)
+            for i in range(self.numberAccepts):
+                try:
+                    skt,addr = self.socket.accept()
+                except socket.error, e:
+                    if e.args[0] == EWOULDBLOCK:
+                        self.numberAccepts = i
+                        break
+                    raise
+                protocol = self.factory.buildProtocol(addr)
+                s = self.sessionno
+                self.sessionno = s+1
+                transport = self.transport(skt, protocol, addr, self, s)
+                protocol.makeConnection(transport, self)
+            else:
+                self.numberAccepts = self.numberAccepts+20
         except:
             traceback.print_exc(file=log.logfile)
 

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Wed Sep 19 04:13:16 2001
From: m at moshez.org (Moshe Zadka)
Date: Wed, 19 Sep 2001 11:13:16 +0300 (IDT)
Subject: [Twisted-Python] Event/Notifier Across Pb Boundaries
Message-ID: <20010919081316.D4834381F@darjeeling>

I've written a small module to do event/notifications. It's a fairly
small and nice example of how to write pb protocols as well as being
something useful

>----------- twisted/internet/event.py ---------------<
# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from twisted.spread import pb
from twisted.internet import passport
from twisted.python import reflect

class EventPublishPerspective(pb.Perspective):
    def perspective_subscribe(self, event, subscriber):
        self.service.subscribe(event, subscriber)

    def perspective_notifyEvent(self, event, *args, **kw):
        self.service.notifyEvent(event, args, kw)

class EventPublishService(pb.Service):

    def __init__(self, *args, **kw):
        apply(pb.Service.__init__, (self,)+args, kw)
        self.eventSubscribers = {}

    def subscribe(self, event, subscriber):
        if not self.eventSubscribers.has_key(event):
            self.eventSubscribers[event] = []
        self.eventSubscribers[event].append(subscriber)

    def notifyEvent(self, event, args, kw):
        for subscriber in self.eventSubscribers.get(event, ()):
            try:
                apply(subscriber.notifyEvent, (event,)+args, kw)
            except pb.ProtocolError:
                pass

    def getPerspectiveNamed(self, name):
        return EventPublishPerspective("any", self)


class EventNotifier(pb.Referenceable):

    def registerAll(self, perspective):
        dct = {}
        reflect.addMethodNamesToDict(self.__class__, dct, "event_")
        for name in dct.keys():
            perspective.subscribe(name, self)

    def remote_notifyEvent(self, event, *args, **kw):
        method = getattr(self, 'event_'+event, None)
        if method is None:
            return
        apply(method, args, kw)

if __name__ == '__main__':
    import event
    from twisted.internet.main import Application
    app = Application("event")
    i = passport.Identity("guest", app)
    i.setPassword("guest")
    app.authorizer.addIdentity(i)
    bf = pb.BrokerFactory(app)
    svc = event.EventPublishService("event", app)
    i.addKeyForPerspective(svc.getPerspectiveNamed('any'))
    app.listenOn(pb.portno, bf)
    app.save("start")
>-----------------------------------------------------------<

>----------- run this to get "event-start.tap" -------------<
from twisted.internet import event, passport, main
from twisted.spread import pb

app = main.Application("event")
i = passport.Identity("guest", app)
i.setPassword("guest")
app.authorizer.addIdentity(i)
bf = pb.BrokerFactory(app)
svc = event.EventPublishService("event", app)
i.addKeyForPerspective(svc.getPerspectiveNamed('any'))
app.listenOn(pb.portno, bf)
app.save("start")
>--------------------------------------------<

>------------ this connects and gets a notification -----------<
from twisted.spread import pb
from twisted.internet import tcp, main, event

class HelloEvent(event.EventNotifier):

    def event_hello(self, who):
        print "hello", who
        main.shutDown()

def failure(error):
    print "Failure...",error
    main.shutDown()

def connected(perspective):
    hello = HelloEvent()
    hello.registerAll(perspective)
    print "registered"
    perspective.notifyEvent("hello", "world", pberrback=failure)
    print "connected."

def preConnected(identity):
    identity.attach("event", "any", None,
                    pbcallback=connected,
                    pberrback=failure)

b = pb.Broker()
b.requestIdentity("guest",  "guest",
                  callback = preConnected,
                  errback  = failure)
tcp.Client("localhost",pb.portno,b)
main.run()
>-------------------------------------------<

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Thu Sep 20 09:14:08 2001
From: m at moshez.org (Moshe Zadka)
Date: Thu, 20 Sep 2001 16:14:08 +0300 (IDT)
Subject: [Twisted-Python] Mail Support
Message-ID: <20010920131408.2C427381F@darjeeling>

Attention everyone: mail support (twisted.mail) is going to be rewritten
completely, breaking backwards compatibility with domains written
by 3rd parties. If you happen to have written any domain, please let
me know. 

Problems which I do not want to fix in a backwards compatible way:
* exists() and saveMessage() are assumed to be synchronous. They
  should not be
* The order of parameters to exists and saveMessage is completely
  wrong

How I am going to fix it:

* exists() and saveMessage() will receive 3 arguments: a User object,
  and callbacks to call on existence/non-existence and successful/unsuccessful
  save (saveMessage will also get the message)

Quite possibly, the User object will contain a reference to the Protocol
object, so they can look inside the factory and transport parameters.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Thu Sep 20 23:07:17 2001
From: m at moshez.org (Moshe Zadka)
Date: Fri, 21 Sep 2001 06:07:17 +0300 (IDT)
Subject: [Twisted-Python] Mail Support
In-Reply-To: <20010920131408.2C427381F@darjeeling>
References: <20010920131408.2C427381F@darjeeling>
Message-ID: <20010921030717.32E8B381F@darjeeling>

On Thu, 20 Sep 2001 16:14:08 +0300 (IDT), Moshe Zadka <m at moshez.org> wrote:

> Attention everyone: mail support (twisted.mail) is going to be rewritten
> completely, breaking backwards compatibility with domains written
> by 3rd parties.

OK, 0.10.2 has been released with a revised interface. 
It still might change...I hope to have something stable soon
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Fri Sep 21 09:42:45 2001
From: m at moshez.org (Moshe Zadka)
Date: Fri, 21 Sep 2001 16:42:45 +0300 (IDT)
Subject: [Twisted-Python] --python and --plugin
Message-ID: <20010921134245.E4C59381F@darjeeling>

I'd like to add a feature, that if there is a 'getPorts' in the namespace
then twistd will create an application itself, and then call 
getPorts() on it which should return a list of [(port num), factory],
and then will call application.listenOn on those tuples.

What is the big win? we can give mktap --plugin and --pyton options too,
which means it will be possible (and easy!) to configure a .tap given
a plugin, which is currently painful.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Fri Sep 21 10:35:17 2001
From: m at moshez.org (Moshe Zadka)
Date: Fri, 21 Sep 2001 17:35:17 +0300 (IDT)
Subject: [Twisted-Python] twistd possible hole
Message-ID: <20010921143517.53445381F@darjeeling>

twistd adds the running-directory to the system include path.
I'm not sure I like it, because it must have write access
to the running directory to dump pickles, and having applications
have write permissions there. What's more, in the case where
the running directory is shared between several twistd instances,
it means one twistd instance can corrupt others via messing with
their path. Why was it done? If there is no good reason,
I suggest we drop it.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Fri Sep 21 11:49:13 2001
From: m at moshez.org (Moshe Zadka)
Date: Fri, 21 Sep 2001 18:49:13 +0300 (IDT)
Subject: [Twisted-Python] (no subject)
Message-ID: <20010921154913.85CF5381F@darjeeling>

>------------------ control_panel.py -----------<
# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from twisted.spread import pb
from twisted.internet import passport, main

class ControlPanelPerspective(pb.Perspective):
    def perspective_shutdown(self):
        main.shutDown()

    def perspective_save(self, name=''):
        import __main__
        __main__.application.save(name)

class ControlPanelService(pb.Service):
    def getPerspectiveNamed(self, name):
        return ControlPanelPerspective("any", self)

if __name__ == '__main__':
    import control_panel
    from twisted.internet.main import Application
    app = Application("control_panel")
    i = passport.Identity("guest", app)
    i.setPassword("guest")
    app.authorizer.addIdentity(i)
    bf = pb.BrokerFactory(app)
    svc = control_panel.ControlPanelService("control_panel", app)
    i.addKeyForPerspective(svc.getPerspectiveNamed('any'))
    app.listenOn(pb.portno, bf)
    app.save("start")
>------------------------------------------------------------<

>----------------- pbshutdown.py -----------------------------<

# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from twisted.spread import pb
from twisted.internet import tcp, main

def failure(error):
    print "Failure...",error
    main.shutDown()

def disconnected():
    print "disconnected."
    main.shutDown()

def connected(perspective):
    perspective.shutdown(pberrback=main.shutDown, pbcallback=main.shutDown)
    print "connected."

def preConnected(identity):
    identity.attach("control_panel", "any", None,
                    pbcallback=connected,
                    pberrback=failure)

# run a client
b = pb.Broker()
b.requestIdentity("guest",  # username
                  "guest",  # password
                  callback = preConnected,
                  errback  = failure)

tcp.Client("localhost",pb.portno,b)

main.run()
>------------------------------------------------------------<

>------------------- pbsave.py  ----------------------------<
# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from twisted.spread import pb
from twisted.internet import tcp, main

def failure(error):
    print "Failure...",error
    main.shutDown()

def disconnected():
    print "disconnected."
    main.shutDown()

def connected(perspective):
    perspective.save('pbservice', pberrback=main.shutDown, pbcallback=main.shutDown)
    print "connected."

def preConnected(identity):
    identity.attach("control_panel", "any", None,
                    pbcallback=connected,
                    pberrback=failure)

# run a client
b = pb.Broker()
b.requestIdentity("guest",  # username
                  "guest",  # password
                  callback = preConnected,
                  errback  = failure)

tcp.Client("localhost",pb.portno,b)

main.run()
>------------------------------------------------------------<

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From tv at debian.org  Sat Sep 22 09:08:54 2001
From: tv at debian.org (Tommi Virtanen)
Date: 22 Sep 2001 16:08:54 +0300
Subject: [Twisted-Python] accepttests mail test fails with python 1.5.2 due to binascii.hexlify
Message-ID: <87n13nmkyh.fsf@ki.yok.utu.fi>

[tv at ki ~/work/twistedmatrix/Twisted]$ WEBBROWSER=links USER=tv IRCCLIENT=run-xchat PYTHONPATH=. ./bin/accepttests
/------
|####
|#### Starting test.
|####
\------
/------
|####
|#### Starting mail test
|####
\------
Running System Command: './bin/mktap mail --domain foo.bar=dump --user postmaster=postmaster'
Saving mail application to mail.tap...
Saved.
Running System Command: './bin/mktap --append mail.tap mail --relay 127.0.0.1,8025=dump2             --smtp 8026 --pop 8111'
Saving mail application to mail.tap...
Saved.
Running Command: './bin/twistd -f mail.tap'
Traceback (innermost last):
  File "./bin/accepttests", line 205, in ?
    runAllTests()
  File "./bin/accepttests", line 189, in runAllTests
    runMailTest()
  File "./bin/accepttests", line 173, in runMailTest
    p.apop('postmaster at foo.bar', 'postmaster')
  File "/usr/lib/python1.5/poplib.py", line 281, in apop
    return self._shortcmd('APOP %s %s' % (user, digest))
  File "/usr/lib/python1.5/poplib.py", line 146, in _shortcmd
    return self._getresp()
  File "/usr/lib/python1.5/poplib.py", line 125, in _getresp
    raise error_proto(resp)
poplib.error_proto: -ERR bad protocol or server: AttributeError: hexlify
zsh: 28133 exit 1     WEBBROWSER=links USER=tv IRCCLIENT=run-xchat PYTHONPATH=. ./bin/accepttests
[tv at ki ~/work/twistedmatrix/Twisted]$ 

        In twisted.mail.maildir.MaildirMailbox.authenticateUserAPOP,
        binascii.hexlify is used. Hexlify is in python2, but not in
        earlier ones..

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}




From glyph at twistedmatrix.com  Sat Sep 22 21:30:40 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 22 Sep 2001 20:30:40 -0500
Subject: [Twisted-Python] twistd possible hole
In-Reply-To: <20010921143517.53445381F@darjeeling>; from m@moshez.org on Fri, Sep 21, 2001 at 05:35:17PM +0300
References: <20010921143517.53445381F@darjeeling>
Message-ID: <20010922203040.A23890@twistedmatrix.com>

I understand your concern, but I don't think we can classify it as a "hole"
unless it violates a specified invariant. Before continuing this discussion, we
should identify the security strategy that twistd will pursue.  I believe that
the working directory of a twistd process should uniquely identify that process
and that the process -- maybe this is not a good idea.  The reason that the
particular feature you're talking about was implemented is purely as a
convenience; hopefully in the future there will be some way to scan for Twisted
plugins, and I was thinking that the Python path might not be the right place
to do that search.  A good security strategy may be to "freeze" a server by not
giving it write permissions to that directory, so that it can never reconfigure
itself, but in that case an additional 'persistence' mechanism will probably be
required.

So, what are our invariants?  In what ways should we buttress those invariants
with OS-specified garuantees?  There are probably some other things we need to
look at eliminating, too.

On Fri, Sep 21, 2001 at 05:35:17PM +0300, Moshe Zadka wrote:
> twistd adds the running-directory to the system include path.
> I'm not sure I like it, because it must have write access
> to the running directory to dump pickles, and having applications
> have write permissions there. What's more, in the case where
> the running directory is shared between several twistd instances,
> it means one twistd instance can corrupt others via messing with
> their path. Why was it done? If there is no good reason,
> I suggest we drop it.

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Sat Sep 22 21:33:11 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 22 Sep 2001 20:33:11 -0500
Subject: [Twisted-Python] (no subject)
In-Reply-To: <20010921154913.85CF5381F@darjeeling>; from m@moshez.org on Fri, Sep 21, 2001 at 06:49:13PM +0300
References: <20010921154913.85CF5381F@darjeeling>
Message-ID: <20010922203311.B23890@twistedmatrix.com>

Hmm.  Looks like a lot of code replicated between pbshutdown and pbsave.
Should we have a 'connect and send a method call' utility method?

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From m at moshez.org  Sat Sep 22 21:45:44 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 04:45:44 +0300 (IDT)
Subject: [Twisted-Python] twistd possible hole
In-Reply-To: <20010922203040.A23890@twistedmatrix.com>
References: <20010922203040.A23890@twistedmatrix.com>, <20010921143517.53445381F@darjeeling>
Message-ID: <20010923014544.4A40B38A7@darjeeling>

On Sat, 22 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> I understand your concern, but I don't think we can classify it as a "hole"
> unless it violates a specified invariant.

It's not a "hole" per-se, I just don't like "trusting" the current directory.
The setups I'm talking about are things similar to the default deployment
strategy in "tap2deb" (obviously, because I wrote it ;-)
Note that the master tap is in /etc, out of reach of the twistd process
(assuming it's not running as root)
So, that means we can safely say "breaking into twistd and tricking it
cannot result in permanent changes". Except for the sys.path thing
obviously. Yes, the -shutdown pickles under /var will be re-written,
but they are used only when it is a concious decision by the admin.

If we want plugin directories, then let's specify which directories there
are. I suggest an option to twistd to append some directory to the plugin
search path.

> So, what are our invariants?

Basically, I want the invariant "permanent changes twistd can make
are untrusted". Which is the usual invariant -- common Apache configurations
are that way, Zope tries to do so. Of course, failures are possible...
we just gotta try hard.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Sat Sep 22 21:47:41 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 04:47:41 +0300 (IDT)
Subject: [Twisted-Python] (no subject)
In-Reply-To: <20010922203311.B23890@twistedmatrix.com>
References: <20010922203311.B23890@twistedmatrix.com>, <20010921154913.85CF5381F@darjeeling>
Message-ID: <20010923014741.B85EE38A7@darjeeling>

On Sat, 22 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Hmm.  Looks like a lot of code replicated between pbshutdown and pbsave.
> Should we have a 'connect and send a method call' utility method?

Perhaps. I mainly sent this out as a proof of concept for what can be
done, not as production-grade stuff.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Sun Sep 23 04:44:56 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 23 Sep 2001 11:44:56 +0300
Subject: [Twisted-Python] Registering functions to be run at shutdown, delayeds
Message-ID: <3BADA108.9040406@itamarst.org>

Right now, functions to be run at shutdown are added by appending to 
twisted.internet.main.shutdowns, and delayeds are added by appending to 
twisted.internet.main.delayeds. I suggest adding functions for both:


Index: main.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/main.py,v
retrieving revision 1.27
diff -c -r1.27 main.py
*** main.py	2001/09/19 12:18:09	1.27
--- main.py	2001/09/23 08:46:55
***************
*** 373,378 ****
--- 373,388 ----
                   callback()
               except:
                   traceback.print_exc(file=log.logfile)
+
+ def addShutdown(function):
+     """Add a function to be called at shutdown.
+     """
+     shutdowns.append(function)
+
+ def addDelayed(delayed):
+     """Add a Delayed object to the event loop"""
+     delayeds.append(delayed)
+
   def addReader(reader):
       """Add a FileDescriptor for notification of data available to read.
       """






From m at moshez.org  Sun Sep 23 08:54:39 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 15:54:39 +0300 (IDT)
Subject: [Twisted-Python] fcntl
Message-ID: <20010923125439.8A2FE38BD@darjeeling>

FCNTL exists in Python 2.2, but gives a DeprecationWarning. We should
all be greatful for this warning in advance of a backwards incompatibility
looming in the future.

Here is a patch to future-proof the code
I've checked it with 1.5.2 and 2.2a3

Please let me know of any objections

Index: twisted/internet/process.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/process.py,v
retrieving revision 1.6
diff -u -r1.6 process.py
--- twisted/internet/process.py	2001/08/18 09:31:01	1.6
+++ twisted/internet/process.py	2001/09/23 13:03:15
@@ -24,7 +24,10 @@
 if os.name == 'posix':
     # Inter-process communication and FCNTL fun isn't available on windows.
     import fcntl
-    import FCNTL
+    if (sys.hexversion >> 16) >= 0x202:
+        FCNTL = fcntl
+    else:
+        import FCNTL
 
 from twisted.persisted import styles
 from twisted.python import log, threadable
@@ -185,7 +188,7 @@
         for fd in stdout_write, stderr_write, stdin_read:
             os.close(fd)
         for fd in (stdout_read, stderr_read):
-            fcntl.fcntl(fd, FCNTL.F_SETFL, FCNTL.O_NONBLOCK)
+            fcntl.fcntl(fd, FCNTL.F_SETFL, os.O_NONBLOCK)
         self.stdout = os.fdopen(stdout_read, 'r')
         self.stderr = os.fdopen(stderr_read, 'r')
         self.stdin = stdin_write

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Sun Sep 23 09:00:06 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 16:00:06 +0300 (IDT)
Subject: [Twisted-Python] Non-blocking Resolution
Message-ID: <20010923130006.61E0938BF@darjeeling>

Here is a patch for stopping to use the native (blocking!) resolve,
and using an internal resolver. Later "mktap" could grow arguments
to set the resolver, and other things.
I have not yet done UDP, but I plan to do it soon enough, if this
patch is deemed acceptable.

Note that this means a resolver must be persistable. The DNS
resolver is not peristable, but I already have a patch to make
it so.

Index: twisted/internet/main.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/main.py,v
retrieving revision 1.27
diff -u -r1.27 main.py
--- twisted/internet/main.py	2001/09/19 12:18:09	1.27
+++ twisted/internet/main.py	2001/09/23 13:07:25
@@ -50,9 +50,13 @@
         if os.name == "posix":
             self.uid = uid or os.getuid()
             self.gid = gid or os.getgid()
+        self.resolver = DummyResolver()
 
-    persistentVersion = 1
+    persistentVersion = 2
 
+    def upgradeToVersion2(self):
+        self.resolver = DummyResolver()
+
     def upgradeToVersion1(self):
         """Version 1 Persistence Upgrade
         """
@@ -161,6 +165,7 @@
     def run(self, save=1):
         """Run this application, running the main loop if necessary.
         """
+        global resolver
         if not self.running:
             threadable.dispatcher.own(self)
             delayeds.extend(self.delayeds)
@@ -174,6 +179,7 @@
                     return
             for service in self.services.values():
                 service.startService()
+            resolver = self.resolver
             self.running = 1
             threadable.dispatcher.disown(self)
         if not running:
@@ -192,6 +198,11 @@
     """
     theTimeouts.later(method, seconds)
 
+class DummyResolver:
+
+    def resolve(self, address, success, fail):
+        fail()
+
 reads = {}
 writes = {}
 running = None
@@ -199,6 +210,7 @@
 if threadable.threaded:
     delayeds.append(threadtask.theScheduler)
 shutdowns = [theTimeouts.runEverything]
+resolver = DummyResolver()
 
 def shutDown(a=None, b=None):
     """Run all shutdown callbacks (save all running Applications) and exit.
@@ -523,6 +535,7 @@
     # currentPlugins = os.path.abspath("TwistedPlugins")
     allPlugins = [systemPlugins, userPlugins, confPlugins] #, currentPlugins]
     sys.path.extend(allPlugins)
+
 
 # Sibling Import
 import process
Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.22
diff -u -r1.22 tcp.py
--- twisted/internet/tcp.py	2001/09/11 04:08:28	1.22
+++ twisted/internet/tcp.py	2001/09/23 13:07:26
@@ -28,6 +28,7 @@
 import socket
 import sys
 import traceback
+import string
 
 if os.name == 'nt':
     EWOULDBLOCK = 10035
@@ -49,7 +50,7 @@
 
 # Sibling Imports
 import abstract
-from main import CONNECTION_LOST, CONNECTION_DONE
+import main
 
 class Connection(abstract.FileDescriptor,
                  protocol.Transport,
@@ -79,9 +80,9 @@
             if se.args[0] == EWOULDBLOCK:
                 return
             else:
-                return CONNECTION_LOST
+                return main.CONNECTION_LOST
         if not data:
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
         return self.protocol.dataReceived(data)
 
     def writeSomeData(self, data):
@@ -95,7 +96,7 @@
         except socket.error, se:
             if se.args[0] == EWOULDBLOCK:
                 return 0
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
 
     def connectionLost(self):
         """See abstract.FileDescriptor.connectionLost().
@@ -145,6 +146,7 @@
         self.port = port
         Connection.__init__(self, skt, protocol)
         self.doWrite = self.doConnect
+        self.resolveAddress()
         self.doConnect()
         self.logstr = self.protocol.__class__.__name__+",client"
 	if timeout is not None:
@@ -161,13 +163,32 @@
         # factored out so as to minimise the code necessary for SecureClient
         return socket.socket(socket.AF_INET,socket.SOCK_STREAM)
 
+    def resolveAddress(self):
+        parts = string.split(self.addr[0], '.')
+        if len(parts) == 4:
+            try:
+                for part in map(int, parts):
+                    if not (0<=part<256):
+                        break
+                else:
+                    self.realAddress = self.addr[0]
+                    return
+            except ValueError:
+                pass
+        main.resolver.resolve(self.addr[0], self.setRealAddress, 
+                                            self.failIfNotConnected)
+
+    def setRealAddress(self, address):
+        self.realAddress = address
+        self.doConnect()
+
     def doConnect(self):
         """I connect the socket.
         
         Then, call the protocol's makeConnection, and start waiting for data.
         """
         try:
-            self.socket.connect(self.addr)
+            self.socket.connect((self.realAddress, self.addr[1]))
         except socket.error, se:
             if se.args[0] == EMYSTERY:
                 self.startWriting()

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Sun Sep 23 09:07:44 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 16:07:44 +0300 (IDT)
Subject: [Twisted-Python] Resolver patch: updated
Message-ID: <20010923130744.0B9E238BF@darjeeling>

Last version had a slight bug, here it is without it.

 
Index: twisted/internet/main.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/main.py,v
retrieving revision 1.27
diff -u -r1.27 main.py
--- twisted/internet/main.py	2001/09/19 12:18:09	1.27
+++ twisted/internet/main.py	2001/09/23 13:18:10
@@ -50,9 +50,13 @@
         if os.name == "posix":
             self.uid = uid or os.getuid()
             self.gid = gid or os.getgid()
+        self.resolver = DummyResolver()
 
-    persistentVersion = 1
+    persistentVersion = 2
 
+    def upgradeToVersion2(self):
+        self.resolver = DummyResolver()
+
     def upgradeToVersion1(self):
         """Version 1 Persistence Upgrade
         """
@@ -161,6 +165,7 @@
     def run(self, save=1):
         """Run this application, running the main loop if necessary.
         """
+        global resolver
         if not self.running:
             threadable.dispatcher.own(self)
             delayeds.extend(self.delayeds)
@@ -174,6 +179,7 @@
                     return
             for service in self.services.values():
                 service.startService()
+            resolver = self.resolver
             self.running = 1
             threadable.dispatcher.disown(self)
         if not running:
@@ -192,6 +198,11 @@
     """
     theTimeouts.later(method, seconds)
 
+class DummyResolver:
+
+    def resolve(self, address, success, fail):
+        fail()
+
 reads = {}
 writes = {}
 running = None
@@ -199,6 +210,7 @@
 if threadable.threaded:
     delayeds.append(threadtask.theScheduler)
 shutdowns = [theTimeouts.runEverything]
+resolver = DummyResolver()
 
 def shutDown(a=None, b=None):
     """Run all shutdown callbacks (save all running Applications) and exit.
@@ -523,6 +535,7 @@
     # currentPlugins = os.path.abspath("TwistedPlugins")
     allPlugins = [systemPlugins, userPlugins, confPlugins] #, currentPlugins]
     sys.path.extend(allPlugins)
+
 
 # Sibling Import
 import process
Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.22
diff -u -r1.22 tcp.py
--- twisted/internet/tcp.py	2001/09/11 04:08:28	1.22
+++ twisted/internet/tcp.py	2001/09/23 13:18:11
@@ -28,6 +28,7 @@
 import socket
 import sys
 import traceback
+import string
 
 if os.name == 'nt':
     EWOULDBLOCK = 10035
@@ -49,7 +50,7 @@
 
 # Sibling Imports
 import abstract
-from main import CONNECTION_LOST, CONNECTION_DONE
+import main
 
 class Connection(abstract.FileDescriptor,
                  protocol.Transport,
@@ -79,9 +80,9 @@
             if se.args[0] == EWOULDBLOCK:
                 return
             else:
-                return CONNECTION_LOST
+                return main.CONNECTION_LOST
         if not data:
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
         return self.protocol.dataReceived(data)
 
     def writeSomeData(self, data):
@@ -95,7 +96,7 @@
         except socket.error, se:
             if se.args[0] == EWOULDBLOCK:
                 return 0
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
 
     def connectionLost(self):
         """See abstract.FileDescriptor.connectionLost().
@@ -145,7 +146,7 @@
         self.port = port
         Connection.__init__(self, skt, protocol)
         self.doWrite = self.doConnect
-        self.doConnect()
+        self.resolveAddress()
         self.logstr = self.protocol.__class__.__name__+",client"
 	if timeout is not None:
 	    main.addTimeout(self.failIfNotConnected, timeout)
@@ -161,13 +162,32 @@
         # factored out so as to minimise the code necessary for SecureClient
         return socket.socket(socket.AF_INET,socket.SOCK_STREAM)
 
+    def resolveAddress(self):
+        parts = string.split(self.addr[0], '.')
+        if len(parts) == 4:
+            try:
+                for part in map(int, parts):
+                    if not (0<=part<256):
+                        break
+                else:
+                    self.setRealdAddress(self.addr[0])
+                    return
+            except ValueError:
+                pass
+        main.resolver.resolve(self.addr[0], self.setRealAddress, 
+                                            self.failIfNotConnected)
+
+    def setRealAddress(self, address):
+        self.realAddress = address
+        self.doConnect()
+
     def doConnect(self):
         """I connect the socket.
         
         Then, call the protocol's makeConnection, and start waiting for data.
         """
         try:
-            self.socket.connect(self.addr)
+            self.socket.connect((self.realAddress, self.addr[1]))
         except socket.error, se:
             if se.args[0] == EMYSTERY:
                 self.startWriting()

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Sun Sep 23 13:14:35 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 20:14:35 +0300 (IDT)
Subject: [Twisted-Python] Release Procedure, Patches and Bugs, oh my!
Message-ID: <20010923171435.25CCC38C2@darjeeling>

We have about 20 items in the TODO file, we have loads of patches,
and I have a suspicion we are not reporting bugs well enough
because it's too frustrating.

I suggest using some kind of bug tracking system. I suggest roundup,
but please don't fight about this -- anything is better then nothing.

Thanks.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Sun Sep 23 18:54:35 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Sep 2001 00:54:35 +0200
Subject: [Twisted-Python] Release Procedure, Patches and Bugs, oh my!
References: <20010923171435.25CCC38C2@darjeeling>
Message-ID: <3BAE682B.508@itamarst.org>

Moshe Zadka wrote:

> We have about 20 items in the TODO file, we have loads of patches,
> and I have a suspicion we are not reporting bugs well enough
> because it's too frustrating.
> 
> I suggest using some kind of bug tracking system. I suggest roundup,
> but please don't fight about this -- anything is better then nothing.


I agree! I'm just not sure how to add CGIs, or I'd add it. Plus it needs 
a dbm module, and bsddb3 is *probably* better than python's bsddb (based 
off bsddb 1.8), so maybe someone with root should install it 
(http://pybsddb.sf.net).

Or we could use SF... But roundup looks prettier, and will probably be 
faster. But we need *something*, and we need it soon.

The patches are:
1. DNS resolver used for lookups (moshez)
2. multiple accept() (moshez)
3. New API for adding delayeds and shutdowns (itamar)
4. --python and --plugin for mktap (moshez)

And I have a few local patches and I'm sure other people have too.






From glyph at twistedmatrix.com  Sun Sep 23 22:29:18 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Sep 2001 21:29:18 -0500
Subject: [Twisted-Python] Release Procedure, Patches and Bugs, oh my!
In-Reply-To: <3BAE682B.508@itamarst.org>; from lists@itamarst.org on Mon, Sep 24, 2001 at 12:54:35AM +0200
References: <20010923171435.25CCC38C2@darjeeling> <3BAE682B.508@itamarst.org>
Message-ID: <20010923212918.A21665@twistedmatrix.com>

On Mon, Sep 24, 2001 at 12:54:35AM +0200, Itamar Shtull-Trauring wrote:
> Moshe Zadka wrote:
>
> > I suggest using some kind of bug tracking system. I suggest roundup,
> > but please don't fight about this -- anything is better then nothing.

Agreed.  Roundup sounds like a good place to start, especially since I have
very little bug tracking system experience.

> I agree! I'm just not sure how to add CGIs, or I'd add it.

Make yourself a --personal --static webserver, and you can run CGIs.

> Plus it needs a dbm module, and bsddb3 is *probably* better than python's
> bsddb (based off bsddb 1.8), so maybe someone with root should install it
> (http://pybsddb.sf.net).

Can we use dirdbm or would that explode too quickly?  I'd rather have stable
than fast, and I've been burned by all varieties of bsddb at one point or
another...

> The patches are:
> 1. DNS resolver used for lookups (moshez)
> 2. multiple accept() (moshez)
> 3. New API for adding delayeds and shutdowns (itamar)
> 4. --python and --plugin for mktap (moshez)

While I don't disagree that we need a system for tracking submitted patches, I
think I've missed out on this corner of open source culture :).

Why are we submitting patches to the mailing list?  I think that if we agree
that something should be done (and it won't break anything) rather than
submitting patches to the list, commit it to CVS.  I think that all the patches
here with the possible exception of the 4th are cool new functionality, and if
there's something that turns out not to fit, we can remove or revert it.  I'm
not against doing things through patches but I don't understand what value it
has...

(Why do I have this weird feeling that somebody's going to point to a mailing
list message I don't remember where I recommend that everyone submit patches to
the mailing list first...? -_-)

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From m at moshez.org  Sun Sep 23 23:52:51 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 05:52:51 +0200 (IST)
Subject: [Twisted-Python] Release Procedure, Patches and Bugs, oh my!
In-Reply-To: <20010923212918.A21665@twistedmatrix.com>
References: <20010923212918.A21665@twistedmatrix.com>, <20010923171435.25CCC38C2@darjeeling> <3BAE682B.508@itamarst.org>
Message-ID: <20010924035251.D310538C2@darjeeling>

On Sun, 23 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> While I don't disagree that we need a system for tracking submitted patches, I
> think I've missed out on this corner of open source culture :).
> 
> Why are we submitting patches to the mailing list?  I think that if we agree
> that something should be done (and it won't break anything) rather than
> submitting patches to the list, commit it to CVS.  I think that all the patches
> here with the possible exception of the 4th are cool new functionality, 

I, for one, sometime like to send out a patch before I commit to get some
feedback. For example, I can send out half-baked code to flow an idea past
you. When we discuss it partly on the mailing list and partly on IRC, there
is no place someone can go to see all discussion about a patch. What's more,
since most patches are appliable (more or less) against the last release,
this gives non-developer an opportunity to comment.

I don't think we have a clear guideline, so my guideline is "things I'm
the authority for I just submit. Things which are simple bugfixes or patches
I ask around, then submit. Changes or big things I ask on the mailing list
first". For example, the resolver patch needs some more discussion: Itamar
had valid (though wrong, IMHO) objections to it and we talked about a reasonable
compromise.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Mon Sep 24 01:37:56 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 07:37:56 +0200 (IST)
Subject: [Twisted-Python] Newest Resolver Patch
Message-ID: <20010924053756.0EF6138DB@darjeeling>

It seems to work, but I'd like people to play with this
a bit more. Note that mktap's default is the native resolver,
but the transparent upgrade is to DummyResolver, which cannot
resolve at all.

Index: bin/mktap
===================================================================
RCS file: /cvs/Twisted/bin/mktap,v
retrieving revision 1.9
diff -u -r1.9 mktap
--- bin/mktap	2001/08/25 07:16:13	1.9
+++ bin/mktap	2001/09/24 05:36:05
@@ -40,6 +40,7 @@
 
 from twisted.protocols import telnet
 from twisted.internet import main,tcp
+from twisted.names import native
 from twisted.python import usage
 import sys, traceback, os, cPickle
 
@@ -90,6 +91,7 @@
 
 if not options.append:
     a = main.Application(options.args[0], int(options.uid), int(options.gid))
+    a.resolver = native.Resolver()
 else:
     a = cPickle.load(open(options.append))
 for num, proto in mod.getPorts(a, config):
Index: twisted/internet/abstract.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/abstract.py,v
retrieving revision 1.5
diff -u -r1.5 abstract.py
--- twisted/internet/abstract.py	2001/08/20 04:15:35	1.5
+++ twisted/internet/abstract.py	2001/09/24 05:36:05
@@ -17,7 +17,7 @@
 
 
 # System Imports
-import types
+import types, string
 
 # Twisted Imports
 from twisted.python import threadable, log
@@ -237,6 +237,19 @@
         raise NotImplementedError(str(self.__class__)+' has no fileno method')
 
 
+
+def isIPAddress(addr):
+    parts = string.split(addr, '.')
+    if len(parts) == 4:
+        try:
+            for part in map(int, parts):
+                if not (0<=part<256):
+                    break
+            else:
+                return 1
+        except ValueError:
+                pass
+    return 0
 
 # Sibling Imports
 import main
Index: twisted/internet/main.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/main.py,v
retrieving revision 1.27
diff -u -r1.27 main.py
--- twisted/internet/main.py	2001/09/19 12:18:09	1.27
+++ twisted/internet/main.py	2001/09/24 05:46:21
@@ -50,9 +50,13 @@
         if os.name == "posix":
             self.uid = uid or os.getuid()
             self.gid = gid or os.getgid()
+        self.resolver = DummyResolver()
 
-    persistentVersion = 1
+    persistentVersion = 2
 
+    def upgradeToVersion2(self):
+        self.resolver = DummyResolver()
+
     def upgradeToVersion1(self):
         """Version 1 Persistence Upgrade
         """
@@ -161,6 +165,7 @@
     def run(self, save=1):
         """Run this application, running the main loop if necessary.
         """
+        global resolver
         if not self.running:
             threadable.dispatcher.own(self)
             delayeds.extend(self.delayeds)
@@ -174,6 +179,7 @@
                     return
             for service in self.services.values():
                 service.startService()
+            resolver = self.resolver
             self.running = 1
             threadable.dispatcher.disown(self)
         if not running:
@@ -192,6 +198,11 @@
     """
     theTimeouts.later(method, seconds)
 
+class DummyResolver:
+
+    def resolve(self, address, success, fail):
+        fail()
+
 reads = {}
 writes = {}
 running = None
@@ -199,6 +210,7 @@
 if threadable.threaded:
     delayeds.append(threadtask.theScheduler)
 shutdowns = [theTimeouts.runEverything]
+resolver = DummyResolver()
 
 def shutDown(a=None, b=None):
     """Run all shutdown callbacks (save all running Applications) and exit.
@@ -523,6 +535,7 @@
     # currentPlugins = os.path.abspath("TwistedPlugins")
     allPlugins = [systemPlugins, userPlugins, confPlugins] #, currentPlugins]
     sys.path.extend(allPlugins)
+
 
 # Sibling Import
 import process
Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.22
diff -u -r1.22 tcp.py
--- twisted/internet/tcp.py	2001/09/11 04:08:28	1.22
+++ twisted/internet/tcp.py	2001/09/24 05:46:21
@@ -28,6 +28,7 @@
 import socket
 import sys
 import traceback
+import string
 
 if os.name == 'nt':
     EWOULDBLOCK = 10035
@@ -49,7 +50,7 @@
 
 # Sibling Imports
 import abstract
-from main import CONNECTION_LOST, CONNECTION_DONE
+import main
 
 class Connection(abstract.FileDescriptor,
                  protocol.Transport,
@@ -79,9 +80,9 @@
             if se.args[0] == EWOULDBLOCK:
                 return
             else:
-                return CONNECTION_LOST
+                return main.CONNECTION_LOST
         if not data:
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
         return self.protocol.dataReceived(data)
 
     def writeSomeData(self, data):
@@ -95,7 +96,7 @@
         except socket.error, se:
             if se.args[0] == EWOULDBLOCK:
                 return 0
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
 
     def connectionLost(self):
         """See abstract.FileDescriptor.connectionLost().
@@ -145,7 +146,7 @@
         self.port = port
         Connection.__init__(self, skt, protocol)
         self.doWrite = self.doConnect
-        self.doConnect()
+        self.resolveAddress()
         self.logstr = self.protocol.__class__.__name__+",client"
 	if timeout is not None:
 	    main.addTimeout(self.failIfNotConnected, timeout)
@@ -161,13 +162,24 @@
         # factored out so as to minimise the code necessary for SecureClient
         return socket.socket(socket.AF_INET,socket.SOCK_STREAM)
 
+    def resolveAddress(self):
+        if abstract.isIPAddress(self.addr[0]):
+            self.setRealdAddress(self.addr[0])
+        else:
+            main.resolver.resolve(self.addr[0], self.setRealAddress, 
+                                                self.failIfNotConnected)
+
+    def setRealAddress(self, address):
+        self.realAddress = address
+        self.doConnect()
+
     def doConnect(self):
         """I connect the socket.
         
         Then, call the protocol's makeConnection, and start waiting for data.
         """
         try:
-            self.socket.connect(self.addr)
+            self.socket.connect((self.realAddress, self.addr[1]))
         except socket.error, se:
             if se.args[0] == EMYSTERY:
                 self.startWriting()
Index: twisted/internet/udp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/udp.py,v
retrieving revision 1.4
diff -u -r1.4 udp.py
--- twisted/internet/udp.py	2001/09/23 01:44:48	1.4
+++ twisted/internet/udp.py	2001/09/24 05:46:23
@@ -35,8 +35,7 @@
 from twisted.python import log
 
 # Sibling Imports
-import abstract
-from main import CONNECTION_LOST, CONNECTION_DONE
+import abstract, main
 
 
 class Connection(abstract.FileDescriptor,
@@ -61,12 +60,26 @@
         self.local = local
         self.sessionno = sessionno
         self.connected = 1
-        self.logstr = "%s,%s,%s (UDP)" % (self.protocol.__class__.__name__, sessionno, self.remote[0])
+        self.logstr = "%s,%s,%s (UDP)" % (self.protocol.__class__.__name__, 
+                                          sessionno, self.remote[0])
+        if abstract.isIPAddress(self.remote[0]):
+            self.realAddress = self.remote[0]
+        else:
+            self.realAddress = None
+            main.resolver.resolve(self.remote[0], self.setRealAddress,
+                                                  self.connectionLost)
+
+            
+    def setRealAddress(self, address):
+        self.realAddress = address
+        self.startWriting()
 
     def write(self,data):
         res = abstract.FileDescriptor.write(self,data)
         if not self.keepConnection:
             self.loseConnection()
+        if self.realAddress is None:
+            self.stopWriting()
         return res
 
     def writeSomeData(self, data):
@@ -81,7 +94,7 @@
             except socket.error, se:
                 if se.args[0] == EWOULDBLOCK:
                     return 0
-                return CONNECTION_LOST
+                return main.CONNECTION_LOST
         else:
             return 0
 
@@ -171,14 +184,11 @@
 
     def createConnection(self, addr):
         """Creates a virtual connection over UDP"""
-        try:
-            protocol = self.factory.buildProtocol(addr)
-            s = self.sessionno
-            self.sessionno = s+1
-            transport = Connection(self.socket.dup(), protocol, addr, self, s)
-            protocol.makeConnection(transport, self)
-        except:
-            traceback.print_exc(file=log.logfile)
+        protocol = self.factory.buildProtocol(addr)
+        s = self.sessionno
+        self.sessionno = s+1
+        transport = Connection(self.socket.dup(), protocol, addr, self, s)
+        protocol.makeConnection(transport, self)
         return transport
 
     def doRead(self):

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Mon Sep 24 09:00:43 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Sep 2001 15:00:43 +0200
Subject: [Twisted-Python] Proposed change to producer/consumer interface
Message-ID: <3BAF2E7B.30301@itamarst.org>

When a producer unregisters itself using stopConsuming() (see 
internet/abstract.py) the consumer closes itself by calling 
loseConnection(). I contend this is silly, and that the consuming 
FileDescriptor should not close itself.

This is howeever a non-backwards compatible change, so anyone using 
producers will need to update their code (though e.g. the FTP code seems to 
explicitly close the consumer.)

So - should I make this change or add a new function "unregisterProducer()" 
the unregisters the producer without closing the connection?





From lists at itamarst.org  Mon Sep 24 10:30:13 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Sep 2001 16:30:13 +0200
Subject: [Twisted-Python] Bug tracker is now live
Message-ID: <3BAF4375.3020304@itamarst.org>

http://twistedmatrix.com:9080/twisted/

Email me or glyph with a password (and an informative topic so we know what 
you're talking about) and we'll set you up an account.





From m at moshez.org  Mon Sep 24 13:18:16 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 19:18:16 +0200 (IST)
Subject: [Twisted-Python] Authorizers
Message-ID: <20010924171816.010FE3889@darjeeling>

Why is there only one authorizer per application?
I want to have an authorizer which is Factory-specific.
Rational:
Suppose you have a pb-mail toaster (like POP toaster, except users
get e-mail via pb instead of POP). The "identities" for each port
might be different, since they might be for different domains.
I want "identities" to correspond to "users" and "perspectives"
to correspond to different top-level directories (you'd have the
"inbox" perspective, the "saved-messages" perspective, etc.)

I want to be able to have a BrokerFactory-like class which has
its own authorizer. Then, in a similar way that tap.mail works
now, I'll add together with the domains, an authorizer that
knows how to authenticate from a dirdbm and finally finish
the remote-mailbox-management protocol that will kill all others.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From carmstro at twistedmatrix.com  Mon Sep 24 13:48:47 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Mon, 24 Sep 2001 13:48:47 -0400
Subject: [Twisted-Python] Authorizers
In-Reply-To: <20010924171816.010FE3889@darjeeling>
References: <20010924171816.010FE3889@darjeeling>
Message-ID: <20010924134846.A14927@Fookidla.org>

On Mon, Sep 24, 2001 at 07:18:16PM +0200, Moshe Zadka wrote:
> I want "identities" to correspond to "users" and "perspectives"
> to correspond to different top-level directories (you'd have the
> "inbox" perspective, the "saved-messages" perspective, etc.)

While I'm not qualified to answer your main question (although I've wondered
about the same thing myself), I can say that I don't really think your match
of perspectives to mail folders (or directories, whatever) really makes
sense, since there is normally only one Perspective per connection to a
service. There should probably be a "mailbox" perspective, with references
to each mail folder.

BTW, are you actually planning to have a mail-through-PB protocol, for
end-user's clients to use? That would be pretty neat, and we could kill
IMAP. =)

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From m at moshez.org  Mon Sep 24 13:52:48 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 19:52:48 +0200 (IST)
Subject: [Twisted-Python] Authorizers
In-Reply-To: <20010924134846.A14927@Fookidla.org>
References: <20010924134846.A14927@Fookidla.org>, <20010924171816.010FE3889@darjeeling>
Message-ID: <20010924175248.38EA83889@darjeeling>

On Mon, 24 Sep 2001, Chris Armstrong <carmstro at twistedmatrix.com> wrote:

> While I'm not qualified to answer your main question (although I've wondered
> about the same thing myself), I can say that I don't really think your match
> of perspectives to mail folders (or directories, whatever) really makes
> sense, since there is normally only one Perspective per connection to a
> service.

I have my reasons.

> BTW, are you actually planning to have a mail-through-PB protocol, for
> end-user's clients to use? That would be pretty neat, and we could kill
> IMAP. =)

A long-time goal of mine. And a high-quality, remote-mailbox-management
interface is long in coming.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Mon Sep 24 13:58:10 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 19:58:10 +0200 (IST)
Subject: [Twisted-Python] twisted.web inflexibility
Message-ID: <20010924175810.AE0E03889@darjeeling>

Would it be possible to have Site not overload buildProtocol
and instead just have the regular "protocol" attribute? This
way, it is possible to change an instance's "protocol" attribute
to change the HTTP request object.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Mon Sep 24 14:15:42 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 20:15:42 +0200 (IST)
Subject: [Twisted-Python] twisted.mail.pb
Message-ID: <20010924181542.CDD9A3889@darjeeling>

This pre-alpha module is where I'm trying to develop something
that will replace IMAP over pb

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From jasbahr at crash.org  Mon Sep 24 19:46:33 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Mon, 24 Sep 2001 18:46:33 -0500
Subject: [Twisted-Python] BoF
In-Reply-To: <3BAF4375.3020304@itamarst.org>
Message-ID: <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org>

Twisters,

I was talking to Chris about everyone getting together at IPC10,
and it dawned on me that we should schedule a Twisted Birds of 
a Feather meeting.  

J




From carmstro at twistedmatrix.com  Mon Sep 24 23:24:43 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Mon, 24 Sep 2001 23:24:43 -0400
Subject: [Twisted-Python] BoF
In-Reply-To: <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org>
References: <3BAF4375.3020304@itamarst.org> <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org>
Message-ID: <20010924232443.B15430@Fookidla.org>

Also, maybe we should see what we can do about getting a discussion into the 
Web and Protocols track.

On Mon, Sep 24, 2001 at 06:46:33PM -0500, Jason L. Asbahr wrote:
> 
> Twisters,
> 
> I was talking to Chris about everyone getting together at IPC10,
> and it dawned on me that we should schedule a Twisted Birds of 
> a Feather meeting.  
> 
> J
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From m at moshez.org  Mon Sep 24 23:58:05 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 05:58:05 +0200 (IST)
Subject: [Twisted-Python] BoF
In-Reply-To: <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org>
References: <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org>
Message-ID: <20010925035805.686343889@darjeeling>

On Mon, 24 Sep 2001, "Jason L. Asbahr" <jasbahr at crash.org> wrote:

> I was talking to Chris about everyone getting together at IPC10,
> and it dawned on me that we should schedule a Twisted Birds of 
> a Feather meeting.  

+1

You, Chris, Allen, Glyph and me are coming. Does anybody know of anyone
else? Five people may be too few.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From jasbahr at crash.org  Tue Sep 25 01:22:29 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Tue, 25 Sep 2001 00:22:29 -0500
Subject: [Twisted-Python] BoF
In-Reply-To: <20010925035805.686343889@darjeeling>
Message-ID: <EIEFLCFECLLBKGPNJJIMMEONHFAA.jasbahr@crash.org>

If we schedule it after the Twisted presentation(s), I bet
we'll have a number of new folks wanting to attend.  :-)

Jason



-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Moshe Zadka
Sent: Monday, September 24, 2001 10:58 PM
To: twisted-python at twistedmatrix.com
Cc: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] BoF


On Mon, 24 Sep 2001, "Jason L. Asbahr" <jasbahr at crash.org> wrote:

> I was talking to Chris about everyone getting together at IPC10,
> and it dawned on me that we should schedule a Twisted Birds of 
> a Feather meeting.  

+1

You, Chris, Allen, Glyph and me are coming. Does anybody know of anyone
else? Five people may be too few.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From m at moshez.org  Tue Sep 25 02:22:45 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 08:22:45 +0200 (IST)
Subject: [Twisted-Python] Naming of Names
Message-ID: <20010925062245.63075388A@darjeeling>

Hi!
I've written the following cool module to help with unit testing
and other beasts. I really want to check it in, but I want to make
sure I don't offend anyone's sensibilities. For me, this name is both
natural and descriptive, but...
(it already found two bugs in the SMTP module, by the way) 

>--------------------------------------<
class MasturbatoryRelay:

    buffer = ''
    shouldLose = 0
    log = ''

    def __init__(self, target):
        self.target = target

    def write(self, data):
        print "writing", `data`
        self.buffer = self.buffer + data

    def clearBuffer(self):
        try:
            self.target.dataReceived(self.buffer)
        finally:
            self.buffer = ''
        if self.shouldLose:
            self.target.connectionLost()

    def loseConnection(self):
        self.shouldLose = 1

def masturbate(server, client):
    serverToClient = MasturbatoryRelay(client)
    clientToServer = MasturbatoryRelay(server)
    server.makeConnection(serverToClient)
    client.makeConnection(clientToServer)
    while 1:
        serverToClient.clearBuffer()
        clientToServer.clearBuffer()
        if serverToClient.shouldLose or clientToServer.shouldLose:
            break
    return clientToServer.log 
>--------------------------------------<

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Tue Sep 25 11:43:33 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 Sep 2001 17:43:33 +0200
Subject: [Twisted-Python] Protocol handler are open to DoS attacks
Message-ID: <3BB0A625.7010106@itamarst.org>

In general, I've been noticing that the behaviour of protocol given illegal 
inputs is problematic - no length limits, and garbage is raised as part of 
exceptions.

Problem 1 leads to giant memory usage - a line receiver can receive MBs of 
MBs of data it will happily buffer until it gets a line break. The other 
problem leads to mucho garbage and exceptions in the log.

See protocols.basic.SafeNetstringReceiver to see how I solved it for 
netstrings.

You can test both things in unix - run a webserver on port 8080, then:

# send infinite data
$ yes | netcat localhost 8080

# send garbage
$ cat /dev/urandom | netcat localhost 8080





From m at moshez.org  Tue Sep 25 14:00:57 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 20:00:57 +0200 (IST)
Subject: [Twisted-Python] System Plugings
Message-ID: <20010925180057.EBCBB388C@darjeeling>

I object to placing plugins/ as a sibling for twisted/ - these
should be in something like /usr/share/twisted/plugins/.
Advice for a way to have the Debian installation append this
directory to the Python page in addDir will be met with thanks.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Tue Sep 25 14:09:37 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 20:09:37 +0200 (IST)
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
In-Reply-To: <E15lu7M-0007DH-00@zaibach.twistedmatrix.com>
References: <E15lu7M-0007DH-00@zaibach.twistedmatrix.com>
Message-ID: <20010925180937.EA318388C@darjeeling>

On Tue, 25 Sep 2001, Itamar Shtull-Trauring <itamarst at twistedmatrix.com> wrote:

> +            assert r.brokenPeer, "connection wasn't closed on illegal netstring %s" % repr(s)

Itamar, and everybody: STOP DOING THAT!!!!!!!!!!!!!!!!!!!!!!!!
Don't use "assert" in tests, since they don't operate under python -O.
Someday, we'll want to test it working ok with -O. (say, if there is some
less-then-trivial code undef "if __debug__".)
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From carmstro at twistedmatrix.com  Tue Sep 25 16:07:49 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Tue, 25 Sep 2001 15:07:49 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
In-Reply-To: <20010925180937.EA318388C@darjeeling>; from m@moshez.org on Tue, Sep 25, 2001 at 08:09:37PM +0200
References: <E15lu7M-0007DH-00@zaibach.twistedmatrix.com> <20010925180937.EA318388C@darjeeling>
Message-ID: <20010925150749.A1676@twistedmatrix.com>

I don't understand. why would you want the *tests* to be optimized? I'm
of course definitely against inappropriate asserts in real code (there are
quite a few in twisted I think), but I think asserts are appropriate for
tests (even if it's just the wording that sounds right).

On Tue, Sep 25, 2001 at 08:09:37PM +0200, Moshe Zadka wrote:
> On Tue, 25 Sep 2001, Itamar Shtull-Trauring <itamarst at twistedmatrix.com> wrote:
> 
> > +            assert r.brokenPeer, "connection wasn't closed on illegal netstring %s" % repr(s)
> 
> Itamar, and everybody: STOP DOING THAT!!!!!!!!!!!!!!!!!!!!!!!!
> Don't use "assert" in tests, since they don't operate under python -O.
> Someday, we'll want to test it working ok with -O. (say, if there is some
> less-then-trivial code undef "if __debug__".)
> -- 
> The Official Moshe Zadka FAQ: http://moshez.geek
> The Official Moshe Zadka FAQ For Dummies: http://moshez.org
> Read the FAQ
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at twistedmatrix.com  Tue Sep 25 16:25:41 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 25 Sep 2001 15:25:41 -0500
Subject: [Twisted-Python] System Plugings
In-Reply-To: <20010925180057.EBCBB388C@darjeeling>; from m@moshez.org on Tue, Sep 25, 2001 at 08:00:57PM +0200
References: <20010925180057.EBCBB388C@darjeeling>
Message-ID: <20010925152541.A360@twistedmatrix.com>

On Tue, Sep 25, 2001 at 08:00:57PM +0200, Moshe Zadka wrote:
> I object to placing plugins/ as a sibling for twisted/ - these
> should be in something like /usr/share/twisted/plugins/.
> Advice for a way to have the Debian installation append this
> directory to the Python page in addDir will be met with thanks.

I think you have a good criticism there, but we need to have a method which
does platform-specific path additions, since most platforms are vastly
different in their management of paths.  Right now, I'm thinking I want to have
/User/%s/Applications/Twisted.app/Contents/Plugins as my plugin directory...
^_^

<rant> I really hate the unix installation scheme.  The fact that Windows is
worse isn't an excuse.  Debian does a great job of covering for some really
basic deficiencies in it, but unless you're on a system with a package manager
there's no way to tell where a file came from.  The one thing that users
actually care about -- end user software, or "Application programs" -- is
basically non-existant unix environment.  There's not even a convention, let
alone a standard, for how a user would install a modified version of an
application for themselves personally.  I want Twisted to be a self-contained
directory on all systems by default, and have specific policy settings only on
those systems where an "installer" or package management system is
advantageous. </rant>

I do think Twisted should be integrated into the installation culture wherever
it goes.  However, /usr/share/twisted/plugins doesn't necessarily make sense
for system-wide installs even on debian.  (Python's maintainer flaunts policy,
why shouldn't we? ^_^)  Probably plugins will have to live under site-python,
in order that appropriate .pyc and .so files may be created (thanks to the
ever-changing bytecode specification).

The strategy that makes the most sense to me right now is just a
twisted/python/path.py which has a big if-tree that adds paths depending on the
platform you're using.  That seems icky though, so I'm open to better
suggestions.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From glyph at twistedmatrix.com  Tue Sep 25 16:38:48 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 25 Sep 2001 15:38:48 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
In-Reply-To: <20010925180937.EA318388C@darjeeling>; from m@moshez.org on Tue, Sep 25, 2001 at 08:09:37PM +0200
References: <E15lu7M-0007DH-00@zaibach.twistedmatrix.com> <20010925180937.EA318388C@darjeeling>
Message-ID: <20010925153848.B360@twistedmatrix.com>

On Tue, Sep 25, 2001 at 08:09:37PM +0200, Moshe Zadka wrote:
> On Tue, 25 Sep 2001, Itamar Shtull-Trauring <itamarst at twistedmatrix.com> wrote:
> 
> > +            assert r.brokenPeer, "connection wasn't closed on illegal netstring %s" % repr(s)
> 
> Itamar, and everybody: STOP DOING THAT!!!!!!!!!!!!!!!!!!!!!!!!
> Don't use "assert" in tests, since they don't operate under python -O.
> Someday, we'll want to test it working ok with -O. (say, if there is some
> less-then-trivial code undef "if __debug__".)

I don't think we should ever assume that Twisted will work under -O.  Does Zope?

Python's -O does change the semantics of the language and get rid of a cool
convenience syntax (albeit in a trivial manner) for an *extremely* marginal
performance boost.  Also, even if you test and test and test until you're SURE
it's perfect, and then you run your 'production code' without any testing
information available, that doesn't change the story when your 'production
code' does fail, as it inevitably will.

I am reminded of the quotefile entry:

"""
<lyn:#lisp> making things fast generally seems to involve trading space for time
<dan`b:#lisp> not so!  you're thinking like a typical lisp programer
<dan`b:#lisp> you can also trade correctness, like any self-respecting C hacker
"""

However in doing some reading before answering this message, I found out that
PyUnit has some nifty useful methods like "assertEquals" and "assertRaises"
that we should probably be using for tests anyway, so maybe the point is moot.
Those that are missing (like 'assertHasAttribute') we can probably write
ourselves.  :-)

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From m at moshez.org  Tue Sep 25 16:56:17 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 22:56:17 +0200 (IST)
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
In-Reply-To: <20010925150749.A1676@twistedmatrix.com>
References: <20010925150749.A1676@twistedmatrix.com>, <E15lu7M-0007DH-00@zaibach.twistedmatrix.com> <20010925180937.EA318388C@darjeeling>
Message-ID: <20010925205617.B05EF388C@darjeeling>

On Tue, 25 Sep 2001, Chris Armstrong <carmstro at twistedmatrix.com> wrote:

> I don't understand. why would you want the *tests* to be optimized?

Because if the code is optimized, then I want to test the code as it will
be executed in production.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Tue Sep 25 16:36:50 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 22:36:50 +0200 (IST)
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
In-Reply-To: <20010925153848.B360@twistedmatrix.com>
References: <20010925153848.B360@twistedmatrix.com>, <E15lu7M-0007DH-00@zaibach.twistedmatrix.com> <20010925180937.EA318388C@darjeeling>
Message-ID: <20010925203650.1CFCE388C@darjeeling>

On Tue, 25 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Python's -O does change the semantics of the language and get rid of a cool
> convenience syntax (albeit in a trivial manner) for an *extremely* marginal
> performance boost.

No, it gets rid of asserts, because that's what asserts are there for.
And it's not extremely marginal, either.

> Also, even if you test and test and test until you're SURE
> it's perfect, and then you run your 'production code' without any testing
> information available, that doesn't change the story when your 'production
> code' does fail, as it inevitably will.

You still have tracebacks.

> However in doing some reading before answering this message, I found out that
> PyUnit has some nifty useful methods like "assertEquals" and "assertRaises"
> that we should probably be using for tests anyway, so maybe the point is moot.

Yes.

> Those that are missing (like 'assertHasAttribute') we can probably write
> ourselves.  :-)

Yes again. And contribute upstream, too.

> ______      you are in a maze of twisted little applications, all
> |   |_\     remarkably consistent.

Way cool sig.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Tue Sep 25 16:49:34 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 22:49:34 +0200 (IST)
Subject: [Twisted-Python] System Plugings
In-Reply-To: <20010925152541.A360@twistedmatrix.com>
References: <20010925152541.A360@twistedmatrix.com>, <20010925180057.EBCBB388C@darjeeling>
Message-ID: <20010925204934.5FAB9388C@darjeeling>

On Tue, 25 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:


> I think you have a good criticism there, but we need to have a method which
> does platform-specific path additions

Yes.
How about a global configuration file?
The "system" parameters can be in twisted.config, which will be a sane
default for installation, contain just variable assignment, and expected
to be rewritten in any installer?

> , since most platforms are vastly
> different in their management of paths.

Hence my limitation for "Debian-specific". 
I note I do not want to put such things in the .diff.gz. Ideally,
I'd like the .diff.gz to be empty.

> Right now, I'm thinking I want to have
> /User/%s/Applications/Twisted.app/Contents/Plugins as my plugin directory...
> ^_^

Cool ;-)

> <rant> I really hate the unix installation scheme.

No, what you hate is that UNIX sucks, not the standards. If UNIX could
have a "private view of the filesystem", there'd be no /home, no dot-files
(just change the /etc/whatever in "your" filesystem) and dead easy package
management.
 
>  The fact that Windows is
> worse isn't an excuse.

"Windows' biggest crime is that they made UNIX look like a good operating
system. UNIX's biggest crime is that it made Windows look user-friendly"
-- Me

> Debian does a great job of covering for some really
> basic deficiencies in it, but unless you're on a system with a package manager
> there's no way to tell where a file came from.

Yep. You should read DJB's stuff.

> I want Twisted to be a self-contained
> directory on all systems by default, and have specific policy settings only on
> those systems where an "installer" or package management system is
> advantageous. </rant>

You won't here a peep from me about such policy. Mostly because the only
system I care about falls within your exception ;-)

> I do think Twisted should be integrated into the installation culture wherever
> it goes.  However, /usr/share/twisted/plugins doesn't necessarily make sense
> for system-wide installs even on debian.  (Python's maintainer flaunts policy,
> why shouldn't we? ^_^)  Probably plugins will have to live under site-python,
> in order that appropriate .pyc and .so files may be created (thanks to the
> ever-changing bytecode specification).

Living under site-python won't help that. Trust me on that -- it will only
make things worse for no good use. (I've sat on the debian-python list
for that information. I had looong discussions with co-developers.)

> The strategy that makes the most sense to me right now is just a
> twisted/python/path.py which has a big if-tree that adds paths depending on 
> the
> platform you're using.  That seems icky though, so I'm open to better
> suggestions.

Well, I can assure you that if that happens, debian/rules first job will
be to rewrite twisted/python/path.py into one line ;-)
Which is why I want it to be one line in the first place ;-)
The installer-builder will rewrite it anyway, and the developer won't mind
turning on an environment variable.

Also see the way mailman handles configuration.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Tue Sep 25 19:05:08 2001
From: m at moshez.org (Moshe Zadka)
Date: Wed, 26 Sep 2001 01:05:08 +0200 (IST)
Subject: [Twisted-Python] Seperate Out pb.Broker.expressionReceived
Message-ID: <20010925230508.7C481388C@darjeeling>

Can pb.Broker inherit from pb.Protocol which will inherit from
banana.Banana? I want to use just the proto_ stuff without out
all the authorizer stuff in the way.

Currently, I'll just copy.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From grolgh at online.no  Tue Sep 25 23:11:56 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Wed, 26 Sep 2001 05:11:56 +0200
Subject: [Twisted-Python] System Plugings
References: <20010925180057.EBCBB388C@darjeeling> <20010925152541.A360@twistedmatrix.com>
Message-ID: <004101c14639$0049c7c0$66aed9c1@phed>

Hepp,

> different in their management of paths.  Right now, I'm thinking I want to have
> /User/%s/Applications/Twisted.app/Contents/Plugins as my plugin directory...
> ^_^

Yes, this looks nice. However, for windows it should be managed relative to the /<my-documents-folder-internationalized>/. There's some user-specific semantic under windows I have yet to discover though. I wonder, does python have any simple cross-platform ways of filling this gap? Windows 2k and XP does show signs on how this conformity should work (No write access outside shared and private folders).

And now; me playing "luser":
A few silly questions, which may contain sever misunderstandings on pb & identities since I have worked just with single-server principles etc etc. Think 'user': can a identity itself be spread across servers? can a identity be intertwined with an other unknown user because of this?
Maybe I have misunderstood the main point with identities, but I thought they would be a 'by-perspective'-revealed object which could be interchanged between servers upon request (by time). Somebody ought to write a doc on terms used in pb. The extreme potentials for pb (and it siblings) is in my mind 'ungraspable' atm, and they can't be that sick.

// phed (user since 1996)






From moshez at zadka.com  Wed Sep 26 06:29:12 2001
From: moshez at zadka.com (Moshe Zadka)
Date: 26 Sep 2001 10:29:12 -0000
Subject: [Twisted-Python] Blocking
Message-ID: <20010926102912.21382.qmail@green.zadka.com>

Hi!
I whipped up the following to help regular client applications use
pb even if they are written in a linear manner.

class _Blocker:

    callbackName = 'callback'
    errbackName = 'errback'

    def __init__(self, method, args, kw):
        self.method = method
	self.args = args
	self.kw = kw

    def callback(self, value):
        self.state = 1
        self.value = value
	main.shutDown()

    def errback(self, value=None):
        self.state = 0
	self.value = value
	main.shutDown()

    def block(self):
        kw = self.kw.copy()
	kw[self.callbackName] = self.callback
	kw[self.errbackName] = self.errback
        apply(self.method, args, kw)
	main.run()
	if self.state:
	    return self.value
        raise BlockingError, self.value

def block(method, *args, **kw):
    return _Blocker(method, args, kw).block()

Any feedback? 




From lists at itamarst.org  Wed Sep 26 10:05:47 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Sep 2001 16:05:47 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
References: <20010925150749.A1676@twistedmatrix.com>, <E15lu7M-0007DH-00@zaibach.twistedmatrix.com> <20010925180937.EA318388C@darjeeling> <20010925205617.B05EF388C@darjeeling>
Message-ID: <3BB1E0BB.2060306@itamarst.org>

I agree with Moshe, asserts should not be used for test code and twisted 
should run correctly in -O mode (which AFICT it does).

In order to support this, places where "assert 0" is used for failure 
should be replaced with "raise RuntimeError".





From lists at itamarst.org  Wed Sep 26 11:18:53 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Sep 2001 17:18:53 +0200
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
Message-ID: <3BB1F1DD.8090206@itamarst.org>

We have *got* to support this protocol:

<http://community.roxen.com/developers/idocs/rfc/rfc3091.html>





From lists at itamarst.org  Wed Sep 26 11:51:52 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Sep 2001 17:51:52 +0200
Subject: [Twisted-Python] This might be interesting
Message-ID: <3BB1F998.9050300@itamarst.org>

<http://web.lfw.org/python/delegate.py>





From carmstro at twistedmatrix.com  Wed Sep 26 14:01:18 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Wed, 26 Sep 2001 14:01:18 -0400
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
In-Reply-To: <3BB1F1DD.8090206@itamarst.org>
References: <3BB1F1DD.8090206@itamarst.org>
Message-ID: <20010926140118.A16802@Fookidla.org>

 As almost every secure Internet protocol requires a highly accurate value
 of Pi in order to function correctly, it is imperative that clients only
 use a trusted PIgen server. The imminent collapse of the Internet is
 assured if this guideline is not strictly followed.

Hilarious. =)

On Wed, Sep 26, 2001 at 05:18:53PM +0200, Itamar Shtull-Trauring wrote:
> We have *got* to support this protocol:
> 
> <http://community.roxen.com/developers/idocs/rfc/rfc3091.html>
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From lists at itamarst.org  Wed Sep 26 18:01:53 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 27 Sep 2001 00:01:53 +0200
Subject: [Twisted-Python] Anon CVS
Message-ID: <3BB25051.5040601@itamarst.org>

A few days ago glyph gave in and said he'd set up anonymous CVS and that 
viewcvs could be setup. So bug him till he does :)





From carmstro at twistedmatrix.com  Thu Sep 27 00:00:30 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Thu, 27 Sep 2001 00:00:30 -0400
Subject: [Twisted-Python] Bug tracker is now live
In-Reply-To: <3BAF4375.3020304@itamarst.org>
References: <3BAF4375.3020304@itamarst.org>
Message-ID: <20010927000030.A17364@Fookidla.org>

Ok, how is it recommended we use this thing? Should it be used strickly
for bugs, for wishlist items, todo list?

On Mon, Sep 24, 2001 at 04:30:13PM +0200, Itamar Shtull-Trauring wrote:
> http://twistedmatrix.com:9080/twisted/
> 
> Email me or glyph with a password (and an informative topic so we know what 
> you're talking about) and we'll set you up an account.
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From tv at twistedmatrix.com  Thu Sep 27 03:17:07 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 27 Sep 2001 10:17:07 +0300
Subject: [Twisted-Python] Union mounts
In-Reply-To: <20010925204934.5FAB9388C@darjeeling>
References: <20010925152541.A360@twistedmatrix.com>
	<20010925180057.EBCBB388C@darjeeling>
	<20010925204934.5FAB9388C@darjeeling>
Message-ID: <87k7ylksr0.fsf_-_@ki.yok.utu.fi>

Moshe Zadka <m at moshez.org> writes:

> No, what you hate is that UNIX sucks, not the standards. If UNIX could
> have a "private view of the filesystem", there'd be no /home, no dot-files
> (just change the /etc/whatever in "your" filesystem) and dead easy package
> management.

	You want to offer free time, money and other gifts to Al Viro.
        He's working on exactly that for Linux.

        Oh, and he happens to need testers for his patches.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}




From carmstro at twistedmatrix.com  Thu Sep 27 13:40:55 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Thu, 27 Sep 2001 12:40:55 -0500
Subject: [Twisted-Python] connectionLost patch
Message-ID: <20010927124055.A12284@twistedmatrix.com>

I patched connectionLost in server.request to call 'connectionLost' on
resources if they have it. This is not a very good patch, and a bad
solution, I think, but redoz wanted it for some functionality he needed
in a streaming chat web thingy.

Any ideas on a better solution for disconnect notification? should this just
stay a third party feature?


-------------- next part --------------
Index: server.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/server.py,v
retrieving revision 1.16
diff -u -r1.16 server.py
--- server.py	2001/09/08 11:08:13	1.16
+++ server.py	2001/09/25 20:52:10
@@ -144,6 +144,20 @@
 
     _host = socket.gethostbyaddr(socket.gethostname())[0]
 
+    def connectionLost(self):
+        log.msg("%s's connection was lost" % self)
+        try:
+            self.prepath = []
+            self.postpath = string.split(self.path[1:], '/')
+            resrc = self.site.getResourceFor(self)
+            if hasattr(resrc, "connectionLost"):
+                resrc.connectionLost(self)
+        except:
+            io = StringIO()
+            traceback.print_exc(file=io)
+            log.msg("Unkown error during connectionLost :-(\n%s" % io.getvalue())
+            http.HTTP.connectionLost(self)
+
     def process(self):
         "Process a request."
         # Log the request to a file.

From carmstro at twistedmatrix.com  Thu Sep 27 13:54:09 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Thu, 27 Sep 2001 12:54:09 -0500
Subject: [Twisted-Python] connectionLost patch
In-Reply-To: <20010927124055.A12284@twistedmatrix.com>; from carmstro@twistedmatrix.com on Thu, Sep 27, 2001 at 12:40:55PM -0500
References: <20010927124055.A12284@twistedmatrix.com>
Message-ID: <20010927125409.A18597@twistedmatrix.com>

oops. I swear I tested this thing. That "StringIO()" should be
"StringIO.StringIO()". bitrot from tuesday. =)

On Thu, Sep 27, 2001 at 12:40:55PM -0500, Chris Armstrong wrote:
> I patched connectionLost in server.request to call 'connectionLost' on
> resources if they have it. This is not a very good patch, and a bad
> solution, I think, but redoz wanted it for some functionality he needed
> in a streaming chat web thingy.
> 
> Any ideas on a better solution for disconnect notification? should this just
> stay a third party feature?
> 
> 

> Index: server.py
> ===================================================================
> RCS file: /cvs/Twisted/twisted/web/server.py,v
> retrieving revision 1.16
> diff -u -r1.16 server.py
> --- server.py	2001/09/08 11:08:13	1.16
> +++ server.py	2001/09/25 20:52:10
> @@ -144,6 +144,20 @@
>  
>      _host = socket.gethostbyaddr(socket.gethostname())[0]
>  
> +    def connectionLost(self):
> +        log.msg("%s's connection was lost" % self)
> +        try:
> +            self.prepath = []
> +            self.postpath = string.split(self.path[1:], '/')
> +            resrc = self.site.getResourceFor(self)
> +            if hasattr(resrc, "connectionLost"):
> +                resrc.connectionLost(self)
> +        except:
> +            io = StringIO()
> +            traceback.print_exc(file=io)
> +            log.msg("Unkown error during connectionLost :-(\n%s" % io.getvalue())
> +            http.HTTP.connectionLost(self)
> +
>      def process(self):
>          "Process a request."
>          # Log the request to a file.





From m at moshez.org  Fri Sep 28 06:35:53 2001
From: m at moshez.org (Moshe Zadka)
Date: Fri, 28 Sep 2001 12:35:53 +0200 (IST)
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
In-Reply-To: <3BB1F1DD.8090206@itamarst.org>
References: <3BB1F1DD.8090206@itamarst.org>
Message-ID: <20010928103553.5A222388A@darjeeling>

On Wed, 26 Sep 2001, Itamar Shtull-Trauring <lists at itamarst.org> wrote:

> We have *got* to support this protocol:
> 
> <http://community.roxen.com/developers/idocs/rfc/rfc3091.html>

This isn't a joke.
I feel that there are significat problems with the protocol/transport
communication that make implementation of something like this needlessly
hard. Specifically, I want the protocol to be notified if doWrite() was
called when the buffer is empty, and for the protocol to notify the
transport that it always "wants to write".
 
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From glyph at twistedmatrix.com  Fri Sep 28 06:52:02 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 28 Sep 2001 05:52:02 -0500
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
In-Reply-To: <20010928103553.5A222388A@darjeeling>
Message-ID: <E15mvQ7-00083t-00@zaibach.twistedmatrix.com>

On Friday, September 28, 2001, at 05:35 AM, Moshe Zadka wrote:

> On Wed, 26 Sep 2001, Itamar Shtull-Trauring <lists at itamarst.org> wrote:
> This isn't a joke.
> I feel that there are significat problems with the protocol/transport
> communication that make implementation of something like this needlessly
> hard. Specifically, I want the protocol to be notified if doWrite() was
> called when the buffer is empty, and for the protocol to notify the
> transport that it always "wants to write".

That's what the Producer mechanism is for.  You can also have your 
protocol be your producer, if you want.  What's the problem with that?  
Is this just a documentation issue or is there something I'm missing?

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From lists at itamarst.org  Fri Sep 28 07:08:45 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 28 Sep 2001 13:08:45 +0200
Subject: [Twisted-Python] Bug tracker is now live
References: <3BAF4375.3020304@itamarst.org> <20010927000030.A17364@Fookidla.org>
Message-ID: <3BB45A3D.3010800@itamarst.org>

Chris Armstrong wrote:

> Ok, how is it recommended we use this thing? Should it be used strickly
> for bugs, for wishlist items, todo list?

At the very least bugs that you don't have the time to fix in the near 
future (e.g. I just added the fact that lynx and w3m don't work with 
twisted.web.)






From carmstro at twistedmatrix.com  Fri Sep 28 08:27:27 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 28 Sep 2001 07:27:27 -0500
Subject: [Twisted-Python] Bug tracker is now live
In-Reply-To: <3BB45A3D.3010800@itamarst.org>; from lists@itamarst.org on Fri, Sep 28, 2001 at 01:08:45PM +0200
References: <3BAF4375.3020304@itamarst.org> <20010927000030.A17364@Fookidla.org> <3BB45A3D.3010800@itamarst.org>
Message-ID: <20010928072727.A9741@twistedmatrix.com>

Yeah, I just saw that. When I use lynx on zaibach I can view
http://twistedmatrix.com just fine.. Oh, and btw, remember that the bug
tracker is password-protected. most of the people in #python can't go to the
URL in the topic =)

On Fri, Sep 28, 2001 at 01:08:45PM +0200, Itamar Shtull-Trauring wrote:
> Chris Armstrong wrote:
> 
> > Ok, how is it recommended we use this thing? Should it be used strickly
> > for bugs, for wishlist items, todo list?
> 
> At the very least bugs that you don't have the time to fix in the near 
> future (e.g. I just added the fact that lynx and w3m don't work with 
> twisted.web.)
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From carmstro at twistedmatrix.com  Fri Sep 28 12:13:10 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 28 Sep 2001 11:13:10 -0500
Subject: [Twisted-Python] This is Reality: The Next Generation.
Message-ID: <20010928111310.A19740@twistedmatrix.com>

Hello, all. Jason Asbahr and I have been collaborating and discussing
simulation systems, especially (my interest) a spatial/graphical MMPG
system. We've decided the best route to follow right now is to refactor
twisted.reality into a Simulation Base and a Text Simulation. We will
also create a Spatial Simulation down the road.

All of you who are interested in Reality should be perking your ears
up right now =). Reality's been stagnant for a while, not seeing any
real development, until now. Hopefully this will make Reality a better
product in the end.

As some of you may know, Jason's got experience in this field, and I'm
pretty excited that he's helping us with this. My dream for this project is
to be The Open Source Sim Engine, and it just may come about, eventually. =)
Anyway, Jason has an article that he's been working on for a while, that
he'd like to publish to Linux Journal (and maybe other places) in the near
future. It'll be about Simulation environments, and specifically deal with
Twisted. He told me he'll be posting it to the list after he works it over a
little bit more, to get everyone's reactions. It'd be great if everyone
would give a few words about it. Thanks. =)

Discussion/documentation on the new MMPG system is on the pound-python wiki.
Let's try to keep ideas and discussion about the MMPG system in general
there, instead of here on the mailling list. Actual technical things
involving Twisted can stay on the ML. Thanks! Oh yeah, the URL --
http://purl.org/wiki/python/OpenMmpg =)

Thanks all. If you're interested, give a holler. =)
--
Chris Armstrong




From kthangavelu at earthlink.net  Fri Sep 28 06:12:01 2001
From: kthangavelu at earthlink.net (kapil thangavelu)
Date: Fri, 28 Sep 2001 03:12:01 -0700
Subject: [Twisted-Python] BoF
In-Reply-To: <20010925035805.686343889@darjeeling>
References: <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org> <20010925035805.686343889@darjeeling>
Message-ID: <200109281703.f8SH3B0172782@pimout4-int.prodigy.net>

On Monday 24 September 2001 08:58 pm, you wrote:

> You, Chris, Allen, Glyph and me are coming. Does anybody know of anyone
> else? Five people may be too few.

i'll be there.

kapil




From m at moshez.org  Sat Sep 29 05:37:20 2001
From: m at moshez.org (Moshe Zadka)
Date: Sat, 29 Sep 2001 11:37:20 +0200 (IST)
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
In-Reply-To: <E15mvQ7-00083t-00@zaibach.twistedmatrix.com>
References: <E15mvQ7-00083t-00@zaibach.twistedmatrix.com>
Message-ID: <20010929093720.9A135388C@darjeeling>

On Fri, 28 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> That's what the Producer mechanism is for.  You can also have your 
> protocol be your producer, if you want.  What's the problem with that?  
> Is this just a documentation issue or is there something I'm missing?

I can't be sure. Document it, I'll try and implement the RFC, and I'll
see if there is something missing...

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Sat Sep 29 07:34:03 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 29 Sep 2001 13:34:03 +0200
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
References: <E15mvQ7-00083t-00@zaibach.twistedmatrix.com> <20010929093720.9A135388C@darjeeling>
Message-ID: <3BB5B1AB.8040909@itamarst.org>

Moshe Zadka wrote:


> I can't be sure. Document it, I'll try and implement the RFC, and I'll
> see if there is something missing...

I think you just need to self.registerProducer(self, 0), and then every 
time the protocol needs data it will call self.resumeProducing(). The 
docstrings in abstract.FileDescriptor are pretty good.





From m at moshez.org  Sat Sep 29 12:29:46 2001
From: m at moshez.org (Moshe Zadka)
Date: Sat, 29 Sep 2001 18:29:46 +0200 (IST)
Subject: [Twisted-Python] Curses
Message-ID: <20010929162946.63E8D38CD@darjeeling>

As the last living dinosaur, I've written a curses module:
it's at http://moshez.org/tcurses.py

Here is an example usage program:

>---------------------------------------------<
from twisted.internet import main
from twisted.python import delay, log
import tcurses
import curses

log.startLogging(open("twistd.log", "ab+"))

screen = tcurses.Screen()
protocol = tcurses.WindowProtocol()
window = tcurses.LineInput(15, 0, 79)
protocol.addWindow(window)
screen.setProtocol(protocol)

app = main.Application("curses-demo")
app.addPort(screen)
app.run()
>------------------------------------------------<

I know it's not exactly a "port", but it's sure close enough in the
Twisted scheme of things (IOW, it's got startListening ;-)
(and yes, I know LineInput could use a *lot* of work. But it's pretty
cool regardless)
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From jason at crash.org  Sun Sep 30 10:59:44 2001
From: jason at crash.org (Jason L. Asbahr)
Date: Sun, 30 Sep 2001 09:59:44 -0500
Subject: [Twisted-Python] Hacking Reality
Message-ID: <EIEFLCFECLLBKGPNJJIMKEFMHGAA.jason@crash.org>

Greetings, Twisted folks,

As Chris mentioned, Reality is about to undergo some refactoring.  
If you are interested in this process, drop a line.  Perhaps a new
reality-dev list at twistedmatrix.com is in order.

For those of you I haven't met yet, I'm a game developer and serious
Python addict.  I've committed a large portion of my adult life 
working toward the growth and development of virtual worlds.  My 
current project is the culmination of many years of work.  

The specific game design I'm working on is called "Netsu" (which is
Japanese for "heat" or "fever").  It's an anime-inspired world which
incorporates multiple perspectives of play and a reputation network
for players to self-organize.  It's going to be fun.  :-)

As I develop use cases and other design documentation for Netsu, I
intend to keep them as portable as possible between gaming systems, 
so that they can benefit the most people.  I anticipate this work
feeding back into Twisted Reality, expanding it to be a more general
simulation framework.

And now a little history...  

The genesis of the project began with my work on virtual reality
systems in the early 90's.  I developed virtual building 
walkthroughs for architects, VR games, and created the first 
hardware accelerated PC-based virtual actor system for Compaq.  

This work was all done with C and C++, and it was during this 
period that I realized the need for a dynamic and interactive 
way to "reach inside" the simulation and manipulate it.  And 
that's how I first became acquainted with Python.  :-)

The next major phase was to build a 3D client engine with Python 
embedded as a control language.  The fruits of that effort are 
described in the paper I presented at Python 7, "Beyond: A Portable 
Virtual World Simulation Framework".   (This was also the first 
mention of 'Netsu'.)

In 1998, the next phase of development took a turn when I was 
recruited into Origin Systems to work on developing the Python 
foundation for the Ultima Online 2 project.  The focus during the 
period was on innovation on the server side and on client-server 
communication.  The results of that labor are described in another 
paper presented at Python 9, "Python for Massively Multiplayer 
Virtual Worlds".  

[ Both papers at: http://www.asbahr.com/papers.html ]

To this point, the software developed was all closed source.  The
desire for an open source virtual world system was lurking in my 
head, but it wasn't until the O'Reilly Open Source conference in 
2000 that my plan for the open source virtual world crystallized. 

[ The notes made during that period have evolved into the Linux 
Journal article which I'll share with you shortly. ]

At the 2001 O'Reilly conference, while presenting on the UO2 design 
work, I took the opportunity to discuss my plans for the future 
open source virtual world system.  The response was extremely 
positive, which included the invitation to write the LJ article 
on the subject.  :-)

Currently, I'm working on combining a number of existing open 
source technologies to build the new virtual world system.  
These include the 'Nebula Device' 3D engine from Germany on 
the client side, the Twisted framework for server-side and 
client-server communication, and the OpenCyc knowledge base 
as server-side archetype repository and artificial intelligence
server.  

Glyph and I have been meeting periodically over the last few 
months to discuss these issues, which intersect nicely with his
long term plans for gaming.  I've also been meeting with the 
Cycorp folks (who happen to be just down the road from me) to 
discuss integrating Cyc and driving Python class generation 
from Cyc.  I'm in the process of integrating Python into the 
Nebula Device, which will be quickly followed by integrating 
PB and making Nebula one of the first 3D clients for Twisted.  
(Yay!)  

Recently, Chris and I began to share some thoughts.  As I 
mentioned to him, after I wrap up my current consulting project
(porting Python to the Playstation 2 and developing a GUI for
designers to build Python logic), I'm devoting 100% of my time 
to Netsu and open source development.

I am committed to delivering the next generation open source 
virtual world framework for gaming, education, simulation, and
training.  It is my hope that this collaborative approach for 
virtual world simulation grows, spreading the Twisted word and
providing a foundation to help other developers achieve their 
own goals.  

Join us!  :-)

Cheers,

Jason




From lists at itamarst.org  Sun Sep 30 12:01:29 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Sep 2001 18:01:29 +0200
Subject: [Twisted-Python] NBIO: Java Non-blocking I/O Library
Message-ID: <3BB741D9.5060506@itamarst.org>

<http://www.cs.berkeley.edu/~mdw/proj/java-nbio/#copyright>





From lists at itamarst.org  Sun Sep 30 12:14:38 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Sep 2001 18:14:38 +0200
Subject: [Twisted-Python] Earthweb Networking and Communications: Java: Simulating select() in Java
Message-ID: <3BB744EE.9060703@itamarst.org>

<http://softwaredev.earthweb.com/java/article/0,,12082_626271,00.html>





From lists at itamarst.org  Sun Sep 30 12:38:32 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Sep 2001 18:38:32 +0200
Subject: [Twisted-Python] Two Zope proposals that may be relevant someday
Message-ID: <3BB74A88.9050509@itamarst.org>

http://dev.zope.org/Wikis/DevSite/Proposals/ToleratingHangsAndLeaks
http://dev.zope.org/Wikis/DevSite/Proposals/ExtendedForensicLogging





From carmstro at twistedmatrix.com  Sun Sep 30 13:45:56 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Sun, 30 Sep 2001 13:45:56 -0400
Subject: [Twisted-Python] NBIO: Java Non-blocking I/O Library
In-Reply-To: <3BB741D9.5060506@itamarst.org>
References: <3BB741D9.5060506@itamarst.org>
Message-ID: <20010930134556.A19941@Fookidla.org>

On Sun, Sep 30, 2001 at 06:01:29PM +0200, Itamar Shtull-Trauring wrote:
> 
> <http://www.cs.berkeley.edu/~mdw/proj/java-nbio/#copyright>

Welp, guess Glyph is going to have start hacking Java again, to get this
working under win32.

*runs away after unleashing the beast*

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From mattcampbell at pobox.com  Sun Sep 30 14:20:56 2001
From: mattcampbell at pobox.com (Matt Campbell)
Date: Sun, 30 Sep 2001 13:20:56 -0500
Subject: [Twisted-Python] Questions about twisted.python.delay.Delayed
Message-ID: <20010930132056.A4019@mattcamp.dyn.dhs.org>

Hello,

I'm a relatively new user of Twisted (started using it in late August
to write a custom server), and I have a few questions about the
twisted.python.delay.Delayed class.

1.  Why does Delayed measure time in units of five-second ticks by
default?

2.  Why is Delayed.run() called every five seconds or so even when there
are no delayed tasks scheduled?  Wouldn't the process's CPU usage be
slightly lower if Delayed.timeout() returned None when the queue is empty?

3.  What is the recommended way to specify, for example, that a function
should be called approximately 30 seconds from now?  Should I pass 6 as
the number of ticks to Delayed.later(), or is there a better way to do it?

Thank you.
-- 
Matt Campbell <http://www.pobox.com/~mattcampbell/>




From m at moshez.org  Sun Sep 30 14:31:51 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 30 Sep 2001 20:31:51 +0200 (IST)
Subject: [Twisted-Python] Questions about twisted.python.delay.Delayed
In-Reply-To: <20010930132056.A4019@mattcamp.dyn.dhs.org>
References: <20010930132056.A4019@mattcamp.dyn.dhs.org>
Message-ID: <20010930183151.33805388A@darjeeling>

On Sun, 30 Sep 2001, Matt Campbell <mattcampbell at pobox.com> wrote:

> 1.  Why does Delayed measure time in units of five-second ticks by
> default?

Why does it matter? In general, I create my own, 1-second-tick,
delayeds.

> 3.  What is the recommended way to specify, for example, that a function
> should be called approximately 30 seconds from now?  Should I pass 6 as
> the number of ticks to Delayed.later(), or is there a better way to do it?

Depends on the tick time. main.theTimeouts's ticktime is 1.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From glyph at twistedmatrix.com  Sun Sep 30 18:10:04 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 30 Sep 2001 17:10:04 -0500
Subject: [Twisted-Python] NBIO: Java Non-blocking I/O Library
In-Reply-To: <3BB741D9.5060506@itamarst.org>
Message-ID: <E15noxX-0001YF-00@zaibach.twistedmatrix.com>

I've seen it, but I don't think it's really worthwhile to cooperate with 
it at this point.  As he says...

>> "The recently-announced JDK 1.4 beta includes the package java.nio 
>> which, among other things, provides nonblocking I/O primitives for 
>> Java. As it turns out I am on the expert group for the Sun Java 
>> Specification Request for this package (see this link for more 
>> details). More details on this new API can be found at this URL; as 
>> you can see, java.nio has been influenced somewhat by the NBIO APIs."
>>

On Sunday, September 30, 2001, at 11:01  AM, Itamar Shtull-Trauring 
wrote:

> <http://www.cs.berkeley.edu/~mdw/proj/java-nbio/#copyright>
--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From glyph at twistedmatrix.com  Sun Sep 30 18:34:59 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 30 Sep 2001 17:34:59 -0500
Subject: [Twisted-Python] Questions about twisted.python.delay.Delayed
In-Reply-To: <20010930132056.A4019@mattcamp.dyn.dhs.org>
Message-ID: <E15npLe-0001cF-00@zaibach.twistedmatrix.com>

On Sunday, September 30, 2001, at 01:20  PM, Matt Campbell wrote:

> I'm a relatively new user of Twisted (started using it in late August
> to write a custom server), and I have a few questions about the
> twisted.python.delay.Delayed class.

Welcome to the club!

> 1.  Why does Delayed measure time in units of five-second ticks by
> default?

To highlight the fact that tick-time is not the same thing as 
real-time.  It's adjustable.

> 2.  Why is Delayed.run() called every five seconds or so even when there
> are no delayed tasks scheduled?  Wouldn't the process's CPU usage be
> slightly lower if Delayed.timeout() returned None when the queue is 
> empty?

A Delayed is a simulation, which is advancing through time at some 
multipler of real time.  I originally intended that other kinds of 
scheduled callbacks would work differently, but it so happens that 
Delayed works really fulfill that whole requirement.

Your optimization sounds like a good idea, though.

> 3.  What is the recommended way to specify, for example, that a function
> should be called approximately 30 seconds from now?  Should I pass 6 as
> the number of ticks to Delayed.later(), or is there a better way to do 
> it?

You should create your own Delayed for processing whatever type of 
events these are, and give it an appropriate ticktime.  If you have an 
event that happens every 30 seconds, make the ticktime 30, and use 
Delayed.loop with an argument of 1 to kick off your callback.

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From grolgh at online.no  Sat Sep  1 01:01:16 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sat, 1 Sep 2001 09:01:16 +0200
Subject: [Twisted-Python] a twisted.ftp
Message-ID: <009801c132b3$e5da2c60$2fc1d9c1@phed>

Hi,

I just commited twisted.ftp, and I think it is pretty neat. Not everything is supported, but it should work with any ftp-client out there. To get it up and running, just 'mktap -r ~/myftp', where '~/myftp' is the directory you want to leech; the default is '/pub/usr/local'. Start the server with twistd, and ftp to your server on port 2121. Login as 'twisted' with the password 'twisted'. The password is stored plaintext, so be careful ;) Now have fun with upload and download.

What I haven't told you: I haven't tested it under linux, so I'm curious if it works at all. Also, test it on the most bizarre ftp-clients you have (MSIE works), and tell me how it fared.

// phed
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20010901/d4cd8c1f/attachment.html>

From grolgh at online.no  Sat Sep  1 01:53:09 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sat, 1 Sep 2001 09:53:09 +0200
Subject: [Twisted-Python] twisted.ftp status, and metadatafs
Message-ID: <00ab01c132bb$2516aa00$2fc1d9c1@phed>

Well, I ought to add some words were I think twisted.ftp is heading too. The first things to do, is to add proper authentication, and filling in some holes (eg, resume and hash). A better path-handling, since os.path is silly under windows, and os.path.isabs('\..'). Distributed is the next big spot. I'm not entirely safe with it yet, but I think it should be easy to nail. One pending 'TODO' is to make it deployable as a systemwide ftp (without requiring each and every user to setup their own ftp-server).

So, if I jump forward in time, and extend the view to storing eg. media-files generally, I think the need of a vfs of some kind arises. What follows is some random notes on it, with varying value, and passing the scope of twisted.ftp with lightyears.
There's two properties it requires: it has to store metadata [1], and it has to support different 'filesystems'. 
The direct effect of the storing the metadata is that the differences between OSes and platforms can be compensated and metadata don't have to be lost due to the filesystems. Though, I think this can be a burden too (should it keep all the metadata in dicts and stored in fragile taps?). 
There's only one filesystem I know which can easily store metadata, and that is a database :) twisted.enterprise could turn handy here, though it seems to require an external SQL-server. Correct me if I'm wrong.
Other filesystems? The OS's filesystem, FTP, Source-Code (hm), 
Some other requirements, is the ability to refer to a file independent of its physical location, pass the reference over PB, do basic operations, and of course, version-checking etc. 

This issue is probably related to the "File Transfer"-layer which is mentioned in the TODO too:

008:
    File Transfer layer for PB.  This would be especially nice for
    twisted.words; having standard a way to transfer "large" (100MB+) packets
    across or in tandem with a PB connection without breaking anything would be
    very good.

[1] http://arstechnica.com/reviews/01q3/metadata/metadata-1.html 






From twisted at itamarst.org  Sat Sep  1 09:45:56 2001
From: twisted at itamarst.org (Itamar)
Date: Sat, 01 Sep 2001 11:45:56 -0400
Subject: [Twisted-Python] twisted.ftp status, and metadatafs
References: <00ab01c132bb$2516aa00$2fc1d9c1@phed>
Message-ID: <3B9102B4.9080605@itamarst.org>

Benjamin Bruheim wrote:

> So, if I jump forward in time, and extend the view to storing eg. 
> media-files generally, I think the need of a vfs of some kind arises. 
> What follows is some random notes on it, with varying value, and 
> passing the scope of twisted.ftp with lightyears.

Take a look at Medusa (www.nightmare.com/medusa) VFS as an example of
how *not* to do it. One thing I learned from it - string paths are EVIL,
especially in FTP where paths such as /baz/.././//foo/../bar are legal.
Paths should therefore be represented by lists, e.g. ['baz', 'foo', 'bar'].

The next problem is that it's usually hard to know if the last item is a
file or a folder (if the path is '/foo/bar', is 'bar' a file or a
folder?). In systems like Zope it's even harder since an object can
function as both.
I would suggest you get a WebDAV implementation going before you (or any
other interested party) start working on a VFS layer. WebDAV is more
generic (it support "collections", not "folders"), supports arbitary
properties on objects (metadata), etc.. And supporting two different
systems will amke sure you don't make any protocol specific design
decisions (such as Medusa's VFS, where it passes the VFS the path string
specified by the user, so the VFS must deal with '..', './../foo//bar'
and all that crap.)





From jasbahr at crash.org  Sat Sep  1 10:28:57 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Sat, 1 Sep 2001 11:28:57 -0500
Subject: [Twisted-Python] twisted.ftp status, and metadatafs
In-Reply-To: <3B9102B4.9080605@itamarst.org>
Message-ID: <EIEFLCFECLLBKGPNJJIMKEAGHEAA.jasbahr@crash.org>

Awesome, Ben!  And good feedback, Itamar!  WebDAV would be a 
good choice -- supporting existing standards and all that.

Jason







From bruheim at c2i.net  Sat Sep  1 10:49:48 2001
From: bruheim at c2i.net (Maj-Britt Bruheim)
Date: Sat, 1 Sep 2001 18:49:48 +0200
Subject: [Twisted-Python] remove a tcp.Port
Message-ID: <001b01c13306$1d7f8000$d0aed9c1@phed>

Hello, 

The first bug I ran into with twisted.ftp is that after 15 tcp.Ports has been opened and closed, skt.Listen starts to fail. This is due to the fact that when calling Port.loseConnection, the actual code called is Server.loseConnection which does not removeReader (actually, the Port.loseConnection is broken, since it calls removeReader and not main.removeReader). Well, there's seems to be two types of behaviour intended with the code, and of course, calling a loseConnection to the server shouldn't remove it entirely, but there should be a function doing that. Another thing, the limit for maximum Ports, where is it? And can shouldn't it be configurable?

And here follows the somewhat confusing traceback. Note that this is upon re-connecting the ftp-server. When the client can't connect to the server, there's nothing on the log.
01/09/2001 18:38 [FTP,1,127.0.0.1] Traceback (most recent call last):
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\internet\main.py", line 267, in doSelect
01/09/2001 18:38 [FTP,1,127.0.0.1] why = getattr(selectable, method)()
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\internet\tcp.py", line 82, in doRead
01/09/2001 18:38 [FTP,1,127.0.0.1] return self.protocol.dataReceived(data)
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\protocols\ftp.py", line 590, in dataReceived
01/09/2001 18:38 [FTP,1,127.0.0.1] self.processLine(line)
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\protocols\ftp.py", line 583, in processLine
01/09/2001 18:38 [FTP,1,127.0.0.1] n = method(params)
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\protocols\ftp.py", line 433, in ftp_Pasv
01/09/2001 18:38 [FTP,1,127.0.0.1] self.createPassiveServer()
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\protocols\ftp.py", line 379, in createPassiveServer
01/09/2001 18:38 [FTP,1,127.0.0.1] self.dtpPort.startListening()
01/09/2001 18:38 [FTP,1,127.0.0.1] File "c:\dev\twisted\twisted\internet\tcp.py", line 297, in startListening
01/09/2001 18:38 [FTP,1,127.0.0.1] skt.listen(self.backlog)
01/09/2001 18:38 [FTP,1,127.0.0.1] File "<string>", line 1, in listen
01/09/2001 18:38 [FTP,1,127.0.0.1] error: (10055, 'No buffer space available')






From grolgh at online.no  Sat Sep  1 12:31:11 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sat, 1 Sep 2001 20:31:11 +0200
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- twisted.ftp status, and metadatafs
References: +ADw-00ab01c132bb+ACQ-2516aa00+ACQ-2fc1d9c1+AEA-phed+AD4- +ADw-3B9102B4.9080605+AEA-itamarst.org+AD4-
Message-ID: <001301c13315$af45c6c0$4aafd9c1@phed>

> Take a look at Medusa (www.nightmare.com/medusa) VFS as an example of
> how *not* to do it. One thing I learned from it - string paths are EVIL,
> especially in FTP where paths such as /baz/.././//foo/../bar are legal.
> Paths should therefore be represented by lists, e.g. ['baz', 'foo', 'bar'].

Yes, I figured :) I made the same mistake when writing my first vfs draft [1] some time ago. At least it got mount.

> The next problem is that it's usually hard to know if the last item is a
> file or a folder (if the path is '/foo/bar', is 'bar' a file or a
> folder?). In systems like Zope it's even harder since an object can
> function as both.

Useful for a zip-fs :) My gut-reaction would say that '/foo/bar' is a file, '/foo/bar/' is a directory. In ftp this is a matter of having a client which can handle it (but it will without doubt create problems on _many_ clients), most of the trouble is solved through context 'RETR <file>' vs 'CD <dir>'; but it wont solve 'SITE CHMOD <path>' (not implemented :P ). Such cases will create problems, but this is due to badly specified protocols. PB won't have this problem ;)

> I would suggest you get a WebDAV implementation going before you (or any
> other interested party) start working on a VFS layer. WebDAV is more
> generic (it support "collections", not "folders"), supports arbitary
> properties on objects (metadata), etc.. And supporting two different
> systems will amke sure you don't make any protocol specific design
> decisions (such as Medusa's VFS, where it passes the VFS the path string
> specified by the user, so the VFS must deal with '..', './../foo//bar'
> and all that crap.)

Two different systems? You mean WebDAV and a FTP? Yes, it sounds interesting, though I have to read a bit more on it to understand WebDAV's concept. It seems to fill most of the requirements. The VFS will maybe be just a storage-specific layer, while WebDAV is built on top of it. I need to read on it before I try to fill in anything more. :)

[1]: http://www.twistedmatrix.com/users/phed/vfs.py








From m at moshez.org  Sat Sep  1 16:05:08 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun,  2 Sep 2001 01:05:08 +0300 (IDT)
Subject: [Twisted-Python] What the hell?
In-Reply-To: <20010831115145.A993@det.ddts.net>
References: <20010831115145.A993@det.ddts.net>, <3B8FC624.6040404@itamarst.org>
Message-ID: <20010901220508.39E143929@darjeeling>

On Fri, 31 Aug 2001, Chris Clearwater <chris at detriment.org> wrote:

> I agree.  The transport for a client or server should probally not be
> generalized to a socket at all.  Maybe this calls for the creation of
> twisted.transport ?  I am not familiar much with the twisted codebase, so
> don't kill me if something like this already exists :)

I'd like (at least) Port to be able to take a bound socket, instead of
binding it itself. Then have a couple of convinience routines

def InetPort(factory, port, interface='', backlog=5):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind( (interface, port) )
    sock.listen(backlog)
    return Port(factory, socket, 'INET')

def UnixPort(factory, port, interface='', backlog=5):
    ...
    return Port(factory, socket, 'UNIX')

The third argument is passed to the Server class, which puts
it in .getPeer()

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From glyph at twistedmatrix.com  Sat Sep  1 19:28:36 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Sep 2001 20:28:36 -0500
Subject: [Twisted-Python] remove a tcp.Port
In-Reply-To: <001b01c13306$1d7f8000$d0aed9c1@phed>; from bruheim@c2i.net on Sat, Sep 01, 2001 at 06:49:48PM +0200
References: <001b01c13306$1d7f8000$d0aed9c1@phed>
Message-ID: <20010901202836.A12115@twistedmatrix.com>

On Sat, Sep 01, 2001 at 06:49:48PM +0200, Maj-Britt Bruheim wrote:

> The first bug I ran into with twisted.ftp is that after 15 tcp.Ports has been
> opened and closed, skt.Listen starts to fail. This is due to the fact that
> when calling Port.loseConnection, the actual code called is
> Server.loseConnection which does not removeReader (actually, the
> Port.loseConnection is broken, since it calls removeReader and not
> main.removeReader).

Yeah.  The socket wouldn't get closed (In fact, a traceback would prevent
anything from happening at all...) , and so you'd run out of available
listening sockets (15 tcp.Ports = 15 listening sockets * 5 queue entries = 75
queue entries) fairly quickly.  (See below about NT...)

> Well, there's seems to be two types of behaviour intended with the code, and
> of course, calling a loseConnection to the server shouldn't remove it
> entirely, but there should be a function doing that.

Both of those behaviors are necessary.  Calling loseConnection on a Port means
"stop accepting connections on this port" (as the documentation reads).  If you
were to not remove that from the select loop, some ugly behavior would result.

> Another thing, the limit for maximum Ports, where is it? And can shouldn't it
> be configurable?

This is an OS-imposed limit, as far as I know. I can't do anything about it.

> And here follows the somewhat confusing traceback. Note that this is upon
> re-connecting the ftp-server. When the client can't connect to the server,
> there's nothing on the log.

Can you reproduce this on a UNIX?  Is this an NT or 95 derivative Windows
you're using?

I'll hazard a guess that it's NT "Workstation", which has some colorfully
imposed limits on the number of sockets you can listen on.  Although I don't
know if 95 has the same issues.  The "red hat linux installation guide" has
step-by-step instructions for fixing that "bug" :-)

[traceback omitted]

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Sat Sep  1 19:35:56 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Sep 2001 20:35:56 -0500
Subject: [Twisted-Python] What the hell?
In-Reply-To: <20010901220508.39E143929@darjeeling>; from m@moshez.org on Sun, Sep 02, 2001 at 01:05:08AM +0300
References: <20010831115145.A993@det.ddts.net>, <3B8FC624.6040404@itamarst.org> <20010831115145.A993@det.ddts.net> <20010901220508.39E143929@darjeeling>
Message-ID: <20010901203556.B12115@twistedmatrix.com>

On Sun, Sep 02, 2001 at 01:05:08AM +0300, Moshe Zadka wrote:

> I'd like (at least) Port to be able to take a bound socket, instead of
> binding it itself. Then have a couple of convinience routines
> 
> def InetPort(factory, port, interface='', backlog=5):
>     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>     sock.bind( (interface, port) )
>     sock.listen(backlog)
>     return Port(factory, socket, 'INET')
> 
> def UnixPort(factory, port, interface='', backlog=5):
>     ...
>     return Port(factory, socket, 'UNIX')

That would make the Port instance impossible to persist, and adds no value,
unless there's some particular external API we need to interact with that
speaks in terms of sockets...

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Sat Sep  1 20:00:19 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Sep 2001 21:00:19 -0500
Subject: [Twisted-Python] Another tcp.Client question
In-Reply-To: <3B8FDB69.5080200@itamarst.org>; from twisted@itamarst.org on Fri, Aug 31, 2001 at 02:46:01PM -0400
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org>
Message-ID: <20010901210019.C12115@twistedmatrix.com>

I just looked at it and I think that this patch (which I'm about to commit,
after doing some testing) should solve the problem:

diff -u -r1.16 tcp.py
--- twisted/internet/tcp.py     2001/08/29 10:13:55     1.16
+++ twisted/internet/tcp.py     2001/09/02 01:58:55
@@ -159,10 +159,10 @@
             self.socket.connect(self.addr)
         except socket.error, se:
             if se.args[0] in (EWOULDBLOCK, EALREADY, EINPROGRESS):
-                pass
+                self.startWriting()
             else:
                 self.protocol.connectionFailed()
-                return CONNECTION_LOST
+                self.stopWriting()
         # If I have reached this point without raising or returning, that means
         # that the socket is connected.
         del self.doWrite
@@ -332,7 +332,7 @@
         # Since ports can't, by definition, write any data, we can just close
         # instantly (no need for the more complex stuff for selectables which
         # write)
-        removeReader(self)
+        self.stopReading()
         self.connectionLost()
 
     def connectionLost(self):


On Fri, Aug 31, 2001 at 02:46:01PM -0400, Itamar wrote:
> One problem with my patch - both connectionFailed and connectionLost are 
> called on the protocol, instead of just connectionFailed.
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Sat Sep  1 20:03:15 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Sep 2001 21:03:15 -0500
Subject: [Twisted-Python] What the hell?
In-Reply-To: <20010831.204003.607956277.shae@webwitches.com>; from shae@webwitches.com on Fri, Aug 31, 2001 at 08:40:03PM +0300
References: <3B8FC624.6040404@itamarst.org> <20010831.204003.607956277.shae@webwitches.com>
Message-ID: <20010901210315.D12115@twistedmatrix.com>

Right, but only part of the explanation :-).  This has previously been
discussed a little, and my initial this answer is here:

    http://twistedmatrix.com/pipermail/twisted-python/2001-July/000139.html

On Fri, Aug 31, 2001 at 08:40:03PM +0300, Shae Erisson wrote:

> if you're adding xfstt to your fontpath, the url to use is unix:7101/
> xfs is at unix:7100/
> 
> so I'd assume is specific to some kind of IPC.
> Therefore, I bet yer system will act strangely if you make your hostname
> 'unix'

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Sat Sep  1 20:23:39 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 1 Sep 2001 21:23:39 -0500
Subject: [Twisted-Python] reality server vs PUB
In-Reply-To: <OF2381FF76.F17BAF44-ON4A256AB9.00004333@mincom.oz.au>; from Chris.Hadgis@mincom.com on Fri, Aug 31, 2001 at 10:07:23AM +1000
References: <OF2381FF76.F17BAF44-ON4A256AB9.00004333@mincom.oz.au>
Message-ID: <20010901212339.E12115@twistedmatrix.com>

On Fri, Aug 31, 2001 at 10:07:23AM +1000, Chris.Hadgis at mincom.com wrote:
> Is it my imagination, or is twisted.reality somewhat similar to Python 
> Universe Builder? I have just discovered this after reading through the 
> i-f newsgroups this morning.  I plan on downloading it and taking it home 
> to look at.

Yes, they are similiar -- they both use Python to achieve a great deal of
built-in dynamism.  They both use pickle to save game state.  However, PUB is
more solidly focused on single-player games, with a trivial networking module.
(they appear to use neither select nor threading, but expect full messages to
arrive at once and never have a socket block.  This will really only work for
testing on a single machine.  Twisted Reality is more of a small RPG engine to
demonstrate the capabilities of its robust networking layer.

I think that neither one is sufficiently mature to make full-blown
'Jigsaw'-sized games in without hacking on them a bit.

And to let the mask of objectivity drop for a moment, I think that Twisted has
considerably more momentum at this point, even if most of the effort isn't
going into improving Reality itself :-).

> Does anyone else know anything about this?

I have known about it for quite some time :-)

> Btw, how do I go about getting a TM home-page?

Meet me on IRC (#python on irc.openprojects.net) and ask nicely :-). I need to
speak with you in real-time to set up an account, and we can put you on Twisted
CVS at the same time.


-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From grolgh at online.no  Sun Sep  2 02:01:43 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 2 Sep 2001 10:01:43 +0200
Subject: [Twisted-Python] Another tcp.Client question
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com>
Message-ID: <006401c13385$831457e0$c5b2d9c1@phed>

Just out of curiousity:

> -        removeReader(self)
> +        self.stopReading()

That removeReader is _never_ called :) If it were called, the temporary DTP-servers in twisted.ftp would be removed every time I called loseConnection. And it would generate a NameError (I guess), since removeReader resides in main. So, actually this lil' piece of the patch has no effect at all. BTW, what's a good way to close a server? That patch of code does it, but it is overridden elsewhere.

// phed







From grolgh at online.no  Sun Sep  2 02:27:26 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 2 Sep 2001 10:27:26 +0200
Subject: [Twisted-Python] two tkim tracebacks
Message-ID: <008101c13389$19733000$c5b2d9c1@phed>

two tracebacks with tkim:

When sending a message to an offline person on words:

Exception in Tkinter callback
Traceback (most recent call last):
  File "c:\dev\python20\lib\lib-tk\Tkinter.py", line 1287, in __call__
    return apply(self.func, args)
TypeError: not enough arguments; expected 2, got 1

and when connecting to an non-existing server:

Traceback (most recent call last):
  File "c:\dev\twisted\twisted\spread\pb.py", line 999, in connectionFailed
    errback('connection failed')
  File "c:\dev\twisted\twisted\words\ui\gateways\words.py", line 43, in connect
onFailed
    if self.connected:
AttributeError: 'makeConnection' instance has no attribute 'connected'

besides that; there's a lil' problem with closing windows as I mentioned earlier. With my 3 seconds experience with tk I guess you add the wrong master to the "child"-windows.

// phed






From grolgh at online.no  Sun Sep  2 02:49:14 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 2 Sep 2001 10:49:14 +0200
Subject: [Twisted-Python] Re: two tkim tracebacks
References: <008101c13389$19733000$c5b2d9c1@phed>
Message-ID: <008701c1338c$251bc720$c5b2d9c1@phed>

> When sending a message to an offline person on words:
> 
> Exception in Tkinter callback
> Traceback (most recent call last):
>   File "c:\dev\python20\lib\lib-tk\Tkinter.py", line 1287, in __call__
>     return apply(self.func, args)
> TypeError: not enough arguments; expected 2, got 1

actually, when sending a message to an person before I've joined a group








From grolgh at online.no  Sun Sep  2 02:56:43 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 2 Sep 2001 10:56:43 +0200
Subject: [Twisted-Python] Re: two tkim tracebacks
References: <008101c13389$19733000$c5b2d9c1@phed> <008701c1338c$251bc720$c5b2d9c1@phed>
Message-ID: <009f01c1338d$30ce0d20$c5b2d9c1@phed>

>> When sending a message to an offline person on words:
>> 
>> Exception in Tkinter callback
>> Traceback (most recent call last):
>>   File "c:\dev\python20\lib\lib-tk\Tkinter.py", line 1287, in __call__
>>     return apply(self.func, args)
>> TypeError: not enough arguments; expected 2, got 1
>
> actually, when sending a message to an person before I've joined a group

actually actually I should test more before I send 'bugreports' .. its when I press 'send' on personal messagse, enter is okay :)






From glyph at twistedmatrix.com  Sun Sep  2 05:54:19 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 2 Sep 2001 06:54:19 -0500
Subject: [Twisted-Python] Another tcp.Client question
In-Reply-To: <006401c13385$831457e0$c5b2d9c1@phed>; from grolgh@online.no on Sun, Sep 02, 2001 at 10:01:43AM +0200
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com> <006401c13385$831457e0$c5b2d9c1@phed>
Message-ID: <20010902065419.A17803@twistedmatrix.com>

On Sun, Sep 02, 2001 at 10:01:43AM +0200, Benjamin Bruheim wrote:
> Just out of curiousity:
> 
> > -        removeReader(self)
> > +        self.stopReading()
> 
> That removeReader is _never_ called :) If it were called, the temporary
> DTP-servers in twisted.ftp would be removed every time I called
> loseConnection. And it would generate a NameError (I guess), since
> removeReader resides in main. So, actually this lil' piece of the patch has
> no effect at all. BTW, what's a good way to close a server? That patch of
> code does it, but it is overridden elsewhere.

A quick glance over twisted/protocols/ftp.py indicates to me that nowhere is
loseConnection actually called on a Port.  Where is it supposed to be?  (And
what's up with storing it as DTPLoseConnection?  I never see that being
used...)  On my machine, at least, calling loseConnection on a Port *would*
indeed cause it to blow up :)

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From twisted at itamarst.org  Sun Sep  2 07:58:22 2001
From: twisted at itamarst.org (Itamar)
Date: Sun, 02 Sep 2001 09:58:22 -0400
Subject: [Twisted-Python] Another tcp.Client question
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com>
Message-ID: <3B923AFE.1090107@itamarst.org>

Glyph Lefkowitz wrote:
> I just looked at it and I think that this patch (which I'm about to commit,
> after doing some testing) should solve the problem:

I'll test it out as well, if not today (I'm leaving to the airport in 
two hours) then on Monday. I'm not sure it will work however - the logic 
   after the socket.connect exception handler assumes that if you've 
reched that point you are either connected or not (as the comment there 
says). So you'd want to return after the startWriting(). And what are 
the changes to Port for?






From twisted at itamarst.org  Sun Sep  2 08:00:11 2001
From: twisted at itamarst.org (Itamar)
Date: Sun, 02 Sep 2001 10:00:11 -0400
Subject: [Twisted-Python] What the hell?
References: <3B8FC624.6040404@itamarst.org> <20010831.204003.607956277.shae@webwitches.com> <20010901210315.D12115@twistedmatrix.com>
Message-ID: <3B923B6B.9060101@itamarst.org>

Glyph Lefkowitz wrote:
> Right, but only part of the explanation :-).  This has previously been
> discussed a little, and my initial this answer is here:
> 
>     http://twistedmatrix.com/pipermail/twisted-python/2001-July/000139.html

OK. But checking by host == 'unix' is still pretty bad, IMHO. Maybe 
check for the port being a string instead? (and have the tcp.py 
docstrings document this.)





From j.her at t-online.de  Sun Sep  2 09:28:38 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Sun, 02 Sep 2001 17:28:38 +0200
Subject: [Twisted-Python] What the hell?
In-Reply-To: <3B923B6B.9060101@itamarst.org>
Message-ID: <15dZAA-0mSjPUC@fwd01.sul.t-online.com>

On Sun, 02 Sep 2001 10:00:11 -0400, Itamar wrote:

>OK. But checking by host == 'unix' is still pretty bad, IMHO. Maybe 
>check for the port being a string instead? (and have the tcp.py 
>docstrings document this.)

If you want polymrphic addressing, you should use a class per address
family.

i.e.

	tuple -> socket (servername, port)
	class UnixFile -> an instance holding the filename
	...





From m at moshez.org  Sun Sep  2 11:02:12 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun,  2 Sep 2001 20:02:12 +0300 (IDT)
Subject: [Twisted-Python] What the hell?
In-Reply-To: <20010901203556.B12115@twistedmatrix.com>
References: <20010901203556.B12115@twistedmatrix.com>, <20010831115145.A993@det.ddts.net>, <3B8FC624.6040404@itamarst.org> <20010831115145.A993@det.ddts.net> <20010901220508.39E143929@darjeeling>
Message-ID: <20010902170212.84C5C3834@darjeeling>

On Sat, 1 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> That would make the Port instance impossible to persist

Good point

>, and adds no value,
> unless there's some particular external API we need to interact with that
> speaks in terms of sockets...

This would make it possible to bind() as root in a seperate C program
and then to drop privs and execute Twisted. Also, that would help if
you get the socket from another process over a UNIX domain socket.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From glyph at twistedmatrix.com  Sun Sep  2 14:47:01 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 2 Sep 2001 15:47:01 -0500
Subject: [Twisted-Python] What the hell?
In-Reply-To: <20010902170212.84C5C3834@darjeeling>; from m@moshez.org on Sun, Sep 02, 2001 at 08:02:12PM +0300
References: <20010901203556.B12115@twistedmatrix.com>, <20010831115145.A993@det.ddts.net>, <3B8FC624.6040404@itamarst.org> <20010831115145.A993@det.ddts.net> <20010901220508.39E143929@darjeeling> <20010901203556.B12115@twistedmatrix.com> <20010902170212.84C5C3834@darjeeling>
Message-ID: <20010902154701.A8370@twistedmatrix.com>

On Sun, Sep 02, 2001 at 08:02:12PM +0300, Moshe Zadka wrote:
> On Sat, 1 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> > unless there's some particular external API we need to interact with that
> > speaks in terms of sockets...
> 
> This would make it possible to bind() as root in a seperate C program
> and then to drop privs and execute Twisted. Also, that would help if
> you get the socket from another process over a UNIX domain socket.

OK.  First time we see one of these as an actual requirement, let's do it.
'Til then I think it's best to put it off.

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From grolgh at online.no  Sun Sep  2 16:25:08 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Mon, 3 Sep 2001 00:25:08 +0200
Subject: [Twisted-Python] Another tcp.Client question
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com> <006401c13385$831457e0$c5b2d9c1@phed> <20010902065419.A17803@twistedmatrix.com>
Message-ID: <004601c133fe$aa6155e0$bdc5d9c1@phed>

> A quick glance over twisted/protocols/ftp.py indicates to me that nowhere is
> loseConnection actually called on a Port.  Where is it supposed to be?  (And
> what's up with storing it as DTPLoseConnection?  I never see that being
> used...)  On my machine, at least, calling loseConnection on a Port *would*
> indeed cause it to blow up :)

No, it was just a test. Calling DTPLoseConnection actually would remove the server since it would call Port.loseConnection, though trigging some unwanted effects. I don't remember the details so don't mind. :) The port is created in FTP.createPassiveServer, and loseConnection is called in DTP.finishGet (or DTP.finish, I don't think I've commited the namechange). Are you sure you get a (Port n closed) on the log? Here they are all shown (successive) first when I shut down. BTW, The point with my last reply was that I can't see that some of the code changed are ever run, and that makes it hard to test ;)

// phed






From glyph at twistedmatrix.com  Sun Sep  2 16:36:10 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 2 Sep 2001 17:36:10 -0500
Subject: [Twisted-Python] Another tcp.Client question
In-Reply-To: <004601c133fe$aa6155e0$bdc5d9c1@phed>; from grolgh@online.no on Mon, Sep 03, 2001 at 12:25:08AM +0200
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com> <006401c13385$831457e0$c5b2d9c1@phed> <20010902065419.A17803@twistedmatrix.com> <004601c133fe$aa6155e0$bdc5d9c1@phed>
Message-ID: <20010902173610.A16883@twistedmatrix.com>

On Mon, Sep 03, 2001 at 12:25:08AM +0200, Benjamin Bruheim wrote:
> > A quick glance over twisted/protocols/ftp.py indicates to me that nowhere is
> > loseConnection actually called on a Port.  Where is it supposed to be?  (And
> > what's up with storing it as DTPLoseConnection?  I never see that being
> > used...)  On my machine, at least, calling loseConnection on a Port *would*
> > indeed cause it to blow up :)
> 
> No, it was just a test. Calling DTPLoseConnection actually would remove the
> server since it would call Port.loseConnection, though trigging some unwanted
> effects.

Is the dtpPort supposed to accept more than one connection?  I was under the
impression that anywhere one would bind port 0 would be a place that one or
only a few connections would be accepted.

> I don't remember the details so don't mind. :)

I am willing to bet that the unwanted effects you saw were tracebacks on the
code we're talking about :)

> The port is created in FTP.createPassiveServer, and loseConnection is called
> in DTP.finishGet (or DTP.finish, I don't think I've commited the namechange).

You have committed it.  Still: I see no loseConnection being called on a
*Port*, only on a *Server*, which is a connection that got accepted from a
port.

> Are you sure you get a (Port n closed) on the log? Here they are all shown
> (successive) first when I shut down. 

That's as a result of seeing connectionLost, loseConnection is never
necessarily called.

> BTW, The point with my last reply was that I can't see that some of the code
> changed are ever run, and that makes it hard to test ;)

Yes, and my point is that, as far as I understand FTP, you *should* be
exercising that code.  I still don't understand why you're not.

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From grolgh at online.no  Sun Sep  2 16:57:31 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Mon, 3 Sep 2001 00:57:31 +0200
Subject: [Twisted-Python] Another tcp.Client question
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com> <006401c13385$831457e0$c5b2d9c1@phed> <20010902065419.A17803@twistedmatrix.com> <004601c133fe$aa6155e0$bdc5d9c1@phed> <20010902173610.A16883@twistedmatrix.com>
Message-ID: <007001c13402$a6129860$bdc5d9c1@phed>

> > No, it was just a test. Calling DTPLoseConnection actually would remove the
> > server since it would call Port.loseConnection, though trigging some unwanted
> > effects.
> Is the dtpPort supposed to accept more than one connection?  I was under the
> impression that anywhere one would bind port 0 would be a place that one or
> only a few connections would be accepted.

yes, it shall accept one connection, and after the transfer is done, it shall close the connection (and in this way tell the user that the transfer is done). it shall let the tcp time-out, and that's why we change the port; less time is wasted between each new file. I am thinking of letting the user define a range of ports, and cycle through that instead of using port 0.

> > The port is created in FTP.createPassiveServer, and loseConnection is called
> > in DTP.finishGet (or DTP.finish, I don't think I've commited the namechange).
> You have committed it.  Still: I see no loseConnection being called on a
> *Port*, only on a *Server*, which is a connection that got accepted from a
> port.

Isn't 'self.dtpPort = tcp.Port(0, self)' a Port? self.dtp.transport is self.dtpPort, and its method loseConnection is used. Besides, isn't Port the same as a server?

> That's as a result of seeing connectionLost, loseConnection is never
> necessarily called.
Figured :)

> > BTW, The point with my last reply was that I can't see that some of the code
> > changed are ever run, and that makes it hard to test ;)
> Yes, and my point is that, as far as I understand FTP, you *should* be
> exercising that code.  I still don't understand why you're not.

Well, if I could. And how come nobody ever have run into that removeReader with an NameError or something?

// phed






From Chris.Hadgis at mincom.com  Sun Sep  2 17:27:22 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Mon, 3 Sep 2001 09:27:22 +1000
Subject: [Twisted-Python] reality server vs PUB
Message-ID: <OF58640C96.70656666-ON4A256ABB.007FFB6E@mincom.oz.au>

!On Fri, Aug 31, 2001 at 10:07:23AM +1000, Chris.Hadgis at mincom.com wrote:
!> Is it my imagination, or is twisted.reality somewhat similar to Python 
!> Universe Builder? I have just discovered this after reading through the 

!> i-f newsgroups this morning.  I plan on downloading it and taking it 
home 
!> to look at.

!Yes, they are similiar -- they both use Python to achieve a great deal of
!built-in dynamism.  They both use pickle to save game state.  However, 
PUB is
!more solidly focused on single-player games, with a trivial networking 
module.
!(they appear to use neither select nor threading, but expect full 
messages to
!arrive at once and never have a socket block.  This will really only work 
for
!testing on a single machine.  Twisted Reality is more of a small RPG 
engine to
!demonstrate the capabilities of its robust networking layer.

I haven't really looked into the PUB network module at all, but obviously 
you have. I was wondering if there was anything PUB does better than TR, 
or if there was anything TR could borrow from PUB. There certainly must be 
some common code.



!I think that neither one is sufficiently mature to make full-blown
!'Jigsaw'-sized games in without hacking on them a bit.

Is this a viable long-term goal? Porting 'Jigsaw' to TR? Hmm... now *that* 
would be interesting. I confess to not having played 'Jigsaw' yet.



!And to let the mask of objectivity drop for a moment, I think that 
Twisted has
!considerably more momentum at this point, even if most of the effort 
isn't
!going into improving Reality itself :-).

I can't argue about that. I have looked at their sourceforge mailing list 
:)



!> Btw, how do I go about getting a TM home-page?

!Meet me on IRC (#python on irc.openprojects.net) and ask nicely :-). I 
need to
!speak with you in real-time to set up an account, and we can put you on 
Twisted
!CVS at the same time.

I'll have to see what I can do about that. My Internet connection from 
work does not allow IRC (damn that firewall). I do not have Internet 
connection at home as hard as that may be to believe :) Which only leaves 
the Internet cafe I sometimes go to during lunch. Tell you what, I will 
get onto the channel today (I hope) and see what happens. Then we can go 
from there.

I'm not sure what time-zone you are in, either. I am in Brisbane, 
Australia, which is GMT +10:00. This is always a problem when trying to 
communicate real-time with someone overseas.

Cheers,
ChrisH




-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From Chris.Hadgis at mincom.com  Sun Sep  2 17:41:31 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Mon, 3 Sep 2001 09:41:31 +1000
Subject: [Twisted-Python] Reality Servers
Message-ID: <OF34943431.19BDE4BA-ON4A256ABB.0080E5AD@mincom.oz.au>

On Wed, Aug 29, 2001 at 09:24:33AM +1000, Chris.Hadgis at mincom.com wrote:

!> (1) 'pull string' of the John Romero action figure results in the 
!> broadcast messages appearing twice. Calls to broadcastToPair() appear 
but 
!> calls to broadcast() do not. I don't know why. I changed the function 
so 
!> the John Romero messages actually appear now. I don't know why 
broadcast() 
!> won't work from the 'pull string' function.
!
!Interesting.  I'll look into it.

I have some more information about this. I know where the problem is, but 
I don't know the solution. I know *a* solution, but not if it is the right 
one :)

If I 'pull string' when the figure is in the room, I get the messages 
once. If I take the figure and 'pull string', I get the messages twice.

This is because broadcastToPair() sends the message to all containers 
associated with the figure's current location. If I leave the figure where 
it is, the containers are 'Room'. But when I take the figure the 
containers are 'Guest' and 'Room'.

My proposed solution is to not include the location's containers in the 
container list. I am not sure of all of the effects of doing this. I know 
when I do this that I get the messages once whether I have taken the 
figure or not. I don't know how to test this with multiple players :( on 
Win98. And I don't know the code well enough to understand the logic 
behind it.

I also think the set of broadcast routines should be standardised, 
especially at this early stage. That way, there will be some standards for 
TRDemo and Inheritance as well as any future games. Some broadcast 
routines just call others.

I do have plans to port the more common IF examples to TR (Golden Skull, 
Alice In Wonderland) and perhaps the Greedy Gargoyle from PUB :) when I 
run out of things I wish to do to TR.

The 'drop' routine for the figure also needs some work. If I drop it when 
I don't have it, I get the message (the self squeaks). If I take it and 
drop it, I don't get the message. All that is needed is a test to see if 
the current location is a guest and broadcast the message then. I don't 
know why there is a call to InappropriateVerb after the message.

Hopefully I will get some more time later to sort this out.

Cheers,
ChrisH




-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From glyph at twistedmatrix.com  Mon Sep  3 00:01:16 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 3 Sep 2001 01:01:16 -0500
Subject: [Twisted-Python] Another tcp.Client question
In-Reply-To: <007001c13402$a6129860$bdc5d9c1@phed>; from grolgh@online.no on Mon, Sep 03, 2001 at 12:57:31AM +0200
References: <3B8FCD9A.1090606@itamarst.org> <3B8FDB69.5080200@itamarst.org> <20010901210019.C12115@twistedmatrix.com> <006401c13385$831457e0$c5b2d9c1@phed> <20010902065419.A17803@twistedmatrix.com> <004601c133fe$aa6155e0$bdc5d9c1@phed> <20010902173610.A16883@twistedmatrix.com> <007001c13402$a6129860$bdc5d9c1@phed>
Message-ID: <20010903010116.A29675@twistedmatrix.com>

On Mon, Sep 03, 2001 at 12:57:31AM +0200, Benjamin Bruheim wrote:
> yes, it shall accept one connection, and after the transfer is done, it shall
> close the connection (and in this way tell the user that the transfer is
> done). it shall let the tcp time-out, and that's why we change the port; less
> time is wasted between each new file. I am thinking of letting the user
> define a range of ports, and cycle through that instead of using port 0.

OK.  That isn't really happening.  :-)

> > You have committed it.  Still: I see no loseConnection being called on a
> > *Port*, only on a *Server*, which is a connection that got accepted from a
> > port.
> 
> Isn't 'self.dtpPort = tcp.Port(0, self)' a Port?

Yes.

> self.dtp.transport is self.dtpPort,

No.

> and its method loseConnection is used.

Yes, for some values of "its" :-)

> Besides, isn't Port the same as a server?

No.

Here's the deal -- tcp.Port creates a _listening socket on a port_.  That
_listening socket on a Port_ creates a _Server connection_; the class Server
represents the byte-stream connection socket, the class Port represents the
listening on a port socket.  Servers are created by a Port.

self.dtp.transport is a twisted.internet.tcp.Server; self.dtpPort is a
twisted.internet.tcp.Port (repr 'em sometime ^_^).  Both must have their
connections lost, at different points.

Port.loseConnection() will cause the socket to stop listening.
Server.loseConnection() will cause that particular connection to be closed.
Port.loseConnection should probably happen in the buildProtocol method of your
ProtocolFactory, since it's explicitly only ever supposed to accept one
connection.

Does this make more sense?

> > Yes, and my point is that, as far as I understand FTP, you *should* be
> > exercising that code.  I still don't understand why you're not.
> 
> Well, if I could. And how come nobody ever have run into that removeReader
> with an NameError or something?

Itamar says he did, I think.  I sure did, when I tried it.  That particular
path of code was never exercised -- although hopefully it will be in FTP fairly
soon.  twisted.protocols.ftp was never calling it, only Server.loseConnection,
which is the source of most of your current troubles, I believe.


-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From grolgh at online.no  Mon Sep  3 20:07:43 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Tue, 4 Sep 2001 04:07:43 +0200
Subject: [Twisted-Python] tcp.Port.stopListening =)
Message-ID: <005101c134e6$6346eec0$e7b2d9c1@phed>

Hm, well, I just ask out of fear of a "security-hole". dtpPort is now a listening Port. Right now I have self.pi.dtpPort.loseConnection() in DTP.connectionLost, so that it won't take any connection as soon as the transfer is done. But won't dtpPort accept connections as long as the transfer is going on? If I put the loseConnection in connectionMade I get that twisted.internet.tcp.Port has no fileno plus an failed attempt of closing the socket (since there's no Port-instance anymore). Should the API behave this way?

// phed - master of the obvious







From Chris.Hadgis at mincom.com  Tue Sep  4 00:47:55 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Tue, 4 Sep 2001 16:47:55 +1000
Subject: [Twisted-Python] Reality Servers
Message-ID: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au>

Further progress...

I have changed the Drop routine for the Romero figure. It first tests if 
the location hasIntelligence() before broadcastToPair() the fact it made a 
noise when dropped. Is testing the location for hasIntelligence() the 
standard way of finding out if the location is a guest/player?

I would think that the broadcast routine could be coded as one routine 
with the following parameters:

(self, subject, to_target, to_subject, to_other)

self = reference for the thing where the broadcast originates from

subject = person acting on the thing

to_target = message for thing

to_subject = message for subject

to_other = message for others

I admit I have not sat down and thought about all the different scenarios. 
I'll get to that soon. Hopefully, there will only need to be a few 
broadcast routines (preferably one) which will be suitable for all 
situations.

Glyph, I will provide a diff as soon as we can work out what to do with 
the container problem I mentioned in this thread yesterday.

Cheers,
ChrisH



-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From glyph at twistedmatrix.com  Tue Sep  4 03:27:10 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 4 Sep 2001 04:27:10 -0500
Subject: [Twisted-Python] Reality Servers
In-Reply-To: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au>; from Chris.Hadgis@mincom.com on Tue, Sep 04, 2001 at 04:47:55PM +1000
References: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au>
Message-ID: <20010904042710.A24748@twistedmatrix.com>

On Tue, Sep 04, 2001 at 04:47:55PM +1000, Chris.Hadgis at mincom.com wrote:
> Further progress...
> 
> I have changed the Drop routine for the Romero figure. It first tests if 
> the location hasIntelligence() before broadcastToPair() the fact it made a 
> noise when dropped. Is testing the location for hasIntelligence() the 
> standard way of finding out if the location is a guest/player?

Yes, but this shouldn't be necessary :-\... if you try it while sitting in a
chair, other interesting things will happen, I'm sure.

> I would think that the broadcast routine could be coded as one routine 
> with the following parameters:
>
> (self, subject, to_target, to_subject, to_other)

Yes, this sounds like a good thing.  Also, allHear/oneHears/pairHears should go
away, as they're basically just versions of 'broadcast' which don't respect
position and containment flags.

> I admit I have not sat down and thought about all the different scenarios.
> I'll get to that soon. Hopefully, there will only need to be a few broadcast
> routines (preferably one) which will be suitable for all situations.

Your broadcast routine sounds fine, except for the fact that it's sometimes
convenient to have defaults for situations where you don't need everything.
I'd like to have 'toOther' (the coding standard has changed since I wrote that
original TR code ^_^) as the first param, so you could say something like

frob.broadcast([frob," frobs!"])

and have everyone hear that, adding more of the parameters as keyword
parameters depending on the complexity of your message.

> Glyph, I will provide a diff as soon as we can work out what to do with the
> container problem I mentioned in this thread yesterday.

Responding to that email separately...

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Tue Sep  4 03:39:16 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 4 Sep 2001 04:39:16 -0500
Subject: [Twisted-Python] Reality Servers
In-Reply-To: <OF34943431.19BDE4BA-ON4A256ABB.0080E5AD@mincom.oz.au>; from Chris.Hadgis@mincom.com on Mon, Sep 03, 2001 at 09:41:31AM +1000
References: <OF34943431.19BDE4BA-ON4A256ABB.0080E5AD@mincom.oz.au>
Message-ID: <20010904043916.B24748@twistedmatrix.com>

On Mon, Sep 03, 2001 at 09:41:31AM +1000, Chris.Hadgis at mincom.com wrote:

> ... broadcastToPair() sends the message to all containers 
> associated with the figure's current location. If I leave the figure where 
> it is, the containers are 'Room'. But when I take the figure the 
> containers are 'Guest' and 'Room'.

Yep, that's right; and it should remain so.  It's important to be able to
determine the 'real' position as well as the other positions of an object.

> My proposed solution is to not include the location's containers in the 
> container list. I am not sure of all of the effects of doing this. I know 
> when I do this that I get the messages once whether I have taken the 
> figure or not. I don't know how to test this with multiple players :( on 
> Win98. And I don't know the code well enough to understand the logic 
> behind it.

I'd say that this is the wrong solution.

> I also think the set of broadcast routines should be standardised, 
> especially at this early stage. That way, there will be some standards for 
> TRDemo and Inheritance as well as any future games. Some broadcast 
> routines just call others.

Yes.  Those routines have been through more revisions than any other code I've
ever worked on, and mostly before I got exposed to the 'simplest thing'
doctrine of XP, as is probably obvious :).  The single-broadcast proposal you I
responded to in my other email seems like a good solution to that, and it
should not require making any changes to the placement code.

Such a unified 'broadcast' ought to collect all the objects in all the
locations that the object is present in, uniquify that list, and *then* start
broadcasting; I was still starry-eyed from reading too many lisp textbooks and
wanted to do everything recursively before :).  Iteration is better suited to
this problem, I think.

> I do have plans to port the more common IF examples to TR (Golden Skull, 
> Alice In Wonderland) and perhaps the Greedy Gargoyle from PUB :) when I 
> run out of things I wish to do to TR.

Cool.  Those ports would be nifty :)

> The 'drop' routine for the figure also needs some work. If I drop it when 
> I don't have it, I get the message (the self squeaks). If I take it and 
> drop it, I don't get the message. All that is needed is a test to see if 
> the current location is a guest and broadcast the message then. I don't 
> know why there is a call to InappropriateVerb after the message.

Feel free to fix it.

It raises InappropriateVerb because that means "Keep going and looking for
other verbs called 'drop', then do that."  "Inappropriate" might be an, erm,
inappropriate word for that. :-)

However, there were plans at one point to replace as many verbs as possible
with 'action' methods, that would be called as pre/post on multiple objects and
somewhat more special-cased as in Inform, and relegate the verb_xxx methods to
parsing.

I still think this is a good idea but don't really have much time to implement
it.

BTW: If you're going to be patching code, I recommend downloading the newest
TRDemo and Inheritance code, as I've modified them to be Twisted Plugins and
modified their README's accordingly.  More documentation forthcoming.

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From dave at dcit.com  Tue Sep  4 09:06:10 2001
From: dave at dcit.com (David Sturgis)
Date: Tue, 4 Sep 2001 10:06:10 -0500
Subject: [Twisted-Python] Reality Servers
In-Reply-To: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au>
References: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au>
Message-ID: <20010904100610.5f03aa53.dave@dcit.com>

On Tue, 4 Sep 2001 16:47:55 +1000
Chris.Hadgis at mincom.com wrote:

> I have changed the Drop routine for the Romero figure. It first tests if 
> the location hasIntelligence() before broadcastToPair() the fact it made a 
> noise when dropped. Is testing the location for hasIntelligence() the 
> standard way of finding out if the location is a guest/player?

     I haven't gotten to do much work on twisted lately (or Reality) but it is nice to know that my test items are still causing trouble.  ;-)  (ask Glyph about the brass cockroach sometime for a good story on beta testing...)

--
David Sturgis
dave at dcit.com
Software Developer
DataConcepts Information Technology Corporation
"The Information Technology Company" (tm)
http://www.dcit.com
724 Bergen Blvd
Ridgefield, NJ 07657
201-313-1845 ext 718
201-941-9699 fax




From lists at itamarst.org  Tue Sep  4 09:00:03 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 04 Sep 2001 18:00:03 +0300
Subject: [Twisted-Python] We need a bug tracking system
References: <OF50AA22C0.3DECB5AF-ON4A256ABD.0024AFD0@mincom.oz.au> <20010904100610.5f03aa53.dave@dcit.com>
Message-ID: <3B94EC73.2010808@itamarst.org>

Anyone want to volunteer to setup Roundup (roundup.sf.net) or some other bug 
tracking system of your choice?





From m at moshez.org  Wed Sep  5 12:06:36 2001
From: m at moshez.org (Moshe Zadka)
Date: Wed,  5 Sep 2001 21:06:36 +0300 (IDT)
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/python otp.py,NONE,1.1
In-Reply-To: <E15eeuR-0007ie-00@zaibach.twistedmatrix.com>
References: <E15eeuR-0007ie-00@zaibach.twistedmatrix.com>
Message-ID: <20010905180636.2CD0E3833@darjeeling>

On Wed, 05 Sep 2001, Benjamin Bruheim <phed at twistedmatrix.com> wrote:

> def stringToLong(s):
>     """ Convert bytes to long integer """
...
> def stringToDWords(s):
>     """ Convert bytes to a list of four 32-bits words """
...
> def longToString(l):
>     """ Convert long to digest """
...

Was there a good reason you reimplemented the struct module in Python?

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From Chris.Hadgis at mincom.com  Wed Sep  5 17:51:25 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Thu, 6 Sep 2001 09:51:25 +1000
Subject: [Twisted-Python] Reality Servers - diffs included
Message-ID: <OF89855288.D74AAE8C-ON4A256ABE.0081909C@mincom.oz.au>

Here is a diff for tkfaucet for inclusion in 0.10.2

Changes made are (1) shortcuts, (2) word-wrapped, logically-sized  frames, 
(3) errors in a message box

--- C:\TMLold\Twisted-0.10.0\twisted\reality\ui\tkfaucet.py     Sun Aug 19 
17:52:46 2001
+++ C:\TML\Twisted-0.10.0\twisted\reality\ui\tkfaucet.py        Tue Aug 28 
22:18:54 2001
@@ -20,25 +20,39 @@
 
 from Tkinter import *
 from ScrolledText import *
+from tkMessageBox import *
 
 from twisted.spread import pb
 from twisted.internet import tkinternet, main, tcp
 
 class MainWindow(Toplevel, pb.Referenced):
+
+    shortcuts = {"n":"go north",
+                 "s":"go south",
+                 "e":"go east",
+                 "w":"go west",
+                 "l":"look",
+                 "ne":"go northeast",
+                 "nw":"go northwest",
+                 "sw":"go southwest",
+                 "se":"go southeast",
+                 "u":"go up",
+                 "d":"go down"}
+
     def __init__(self, *args,**kw):
         self.descriptions = {}
         self.items = {}
         self.exits = []
         apply(Toplevel.__init__,(self,)+args,kw)
         self.title("Reality Faucet")
-        self.happenings = ScrolledText(self, height=5, width=5)
+        self.happenings = ScrolledText(self, height=6, width=72, 
wrap='word')
 
         midf = Frame(self)
         ddf = Frame(midf)
         idf = Frame(midf)
 
-        a = self.descriptionField = ScrolledText(ddf, height=5, width=5)
-        b = self.itemsField = ScrolledText(idf, height=5, width=30)
+        a = self.descriptionField = ScrolledText(ddf, height=12, 
width=72, wrap='word')
+        b = self.itemsField = ScrolledText(idf, height=12, width=36, 
wrap='word')
         a.pack(fill=BOTH, expand=YES)
         b.pack(fill=BOTH, expand=YES)
         ddf.pack(side=LEFT, fill=BOTH, expand=YES)
@@ -72,6 +86,7 @@
 
     def tryAgain(self, er):
         print 'oops',er
+        showerror('Oops', er)
 
     def disco(self):
         print 'disconnected'
@@ -128,6 +143,9 @@
 
     def doSend(self, *evstuf):
         sentence = self.entry.get()
+        possible_shortcut = self.shortcuts.get(sentence)
+        if possible_shortcut:
+            sentence = possible_shortcut
         self.doNow(sentence)
         self.entry.delete('0','end')
 


Here is a diff for trdemo for inclusion in 0.10.2

Changes made are (1) correct broadcast for John Romero "pull", (2) correct 
broadcast for John Romero "drop"

--- C:\TMLold\Twisted-0.10.0\trdemo\trdemo\trdemo.py    Mon Aug 20 
21:46:14 2001
+++ C:\TML\Twisted-0.10.0\trdemo\trdemo\trdemo.py       Mon Sep 03 
23:20:02 2001
@@ -175,15 +175,19 @@
         """
         self.broadcastToPair(sentence.subject,
                              to_subject="",
                              to_target=("You pull ",self,"'s string."),
                              to_other =(sentence.subject," pulls 
",self,"'s string."))
         f = whrandom.random()
         if f < 0.3:
-            self.broadcast(self,"'s string reels back in, and it chirps 
\"",whrandom.choice(self.dollSpeech),"\" in a faint, high-pitched voice.")
+            s = (self,"'s string reels back in, and it chirps 
\"",whrandom.choice(self.dollSpeech),"\" in a faint, high-pitched voice.")
         elif f < 0.7:
-            self.broadcast(self,"'s string reels itself back in, and it 
says, \"",whrandom.choice(self.dollSpeech),"\" in a faint, high-pitched 
voice.")
+            s = (self,"'s string reels itself back in, and it says, 
\"",whrandom.choice(self.dollSpeech),"\" in a faint, high-pitched voice.")
         else:
-            self.broadcast("As ",self,"'s string reels in, it squeaks 
\"",whrandom.choice(self.dollSpeech),"\"")
+            s = ("As ",self,"'s string reels in, it squeaks 
\"",whrandom.choice(self.dollSpeech),"\"")
+        self.broadcastToPair(sentence.subject,
+                             to_subject="",
+                             to_target=s,
+                             to_other="")
 
 
     def verb_squeeze(self, sentence):
@@ -202,7 +206,11 @@
 
         Now you can be just like eidos!
         """
-        self.broadcast(self," emits a faint squeak as it lands on the 
floor.")
+        if self.location._hasIntelligence():
+            # self.broadcast(self," emits a faint squeak as it lands on 
the floor.")
+            self.broadcastToPair(sentence.subject, to_subject='',
+                                 to_target = (self," emits a faint squeak 
as it lands on the floor."),
+                                 to_other = '')
         raise error.InappropriateVerb()
 
 class Fountain(thing.Thing):



I will make fixing up the broadcast() and hears() routines my priority 
unless someone else wants to do it. I have not submitted any patches for 
this yet because I am still working on it.

I suggest renaming InappropriateVerb to PassVerb. TADS uses pass when a verb has been "over-written" as in 
this case.

What is the story behind the brass cockroach :)

Cheers,
ChrisH



-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From grolgh at online.no  Wed Sep  5 19:09:35 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Thu, 6 Sep 2001 03:09:35 +0200
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
References: +ADw-E15eeuR-0007ie-00+AEA-zaibach.twistedmatrix.com+AD4- +ADw-20010905180636.2CD0E3833+AEA-darjeeling+AD4-
Message-ID: <003a01c13670$987ab460$2bc3d9c1@phed>

> > def stringToLong(s):
> >     """ Convert bytes to long integer """
> ...
> > def stringToDWords(s):
> >     """ Convert bytes to a list of four 32-bits words """
> ...
> > def longToString(l):
> >     """ Convert long to digest """
> ...
> 
> Was there a good reason you reimplemented the struct module in Python?

Well, struct seems almost like an overkill, but could probably replace most usage of these routines. If I should need a good reason for keeping them, it would be my uncertainity of its (structs) endianism/portability since the codes need to be. It just looks like a module only used in interfacing. 

This is an only excuse since I didn't know of struct. :) Thanks for the tip

// phed






From carmstro at twistedmatrix.com  Wed Sep  5 21:02:24 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Wed, 5 Sep 2001 23:02:24 -0400
Subject: [Twisted-Python] Reality Servers - diffs included
In-Reply-To: <OF89855288.D74AAE8C-ON4A256ABE.0081909C@mincom.oz.au>
Message-ID: <20010905230222.A931@Fookidla.org>

Would you mind getting rid of all those "from foo import *"? It's against
the Twisted coding standard (I know it was probably like this before you
hacked it, but since you're already up.. ;-))

On Thu, Sep 06, 2001 at 09:51:25AM +1000, Chris.Hadgis at mincom.com wrote:
> Here is a diff for tkfaucet for inclusion in 0.10.2
> 
> Changes made are (1) shortcuts, (2) word-wrapped, logically-sized  frames, 
> (3) errors in a message box

-- 
Chris Armstrong                        carmstro at twistedmatrix.com
http://twistedmatrix.com/~carmstro     carmstro at dynup.net




From glyph at twistedmatrix.com  Thu Sep  6 00:43:55 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Sep 2001 01:43:55 -0500
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
In-Reply-To: <003a01c13670$987ab460$2bc3d9c1@phed>; from grolgh@online.no on Thu, Sep 06, 2001 at 03:09:35AM +0200
References: <003a01c13670$987ab460$2bc3d9c1@phed>
Message-ID: <20010906014355.A29106@twistedmatrix.com>

On Thu, Sep 06, 2001 at 03:09:35AM +0200, Benjamin Bruheim wrote:

> This is an only excuse since I didn't know of struct. :) Thanks for the tip

To continue the trend of beating on poor Benjamin here, a few comments about
twisted.python.otp... :-)

It seems oddly placed in twisted.python, maybe twisted.protocols would be
better?  I know it's not a wire protocol, but it is an RFC implementation.

It uses the same vocabulary as twisted.python.authenticator, which is hopefully
being obseleted soon (by twisted.internet.passport)  Is that just a
coincidence?  If not, it shouldn't; those classes have nothing to do with each
other, and the parallels are very misleading.  Otherwise, leave the names as
they are, since the other class will be removed soon.

I applaud your effort to do testing, but could you please use the same testing
style as the rest of Twisted, as in the twisted/test directory? :-)  Maybe that
should be in the coding standard...

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From lists at itamarst.org  Thu Sep  6 03:36:27 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Sep 2001 12:36:27 +0300
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/python otp.py,NONE,1.1
References: <E15eeuR-0007ie-00@zaibach.twistedmatrix.com> <20010905180636.2CD0E3833@darjeeling>
Message-ID: <3B97439B.3060400@itamarst.org>

Moshe Zadka wrote:

> Was there a good reason you reimplemented the struct module in Python?

Yes, struct can't deal with arbitarily long integers:

 >>> struct.pack("L", 299999999999999999999999999999999999999999l)
Traceback (most recent call last):
   File "<console>", line 1, in ?
OverflowError: long int too long to convert





From grolgh at online.no  Thu Sep  6 12:01:40 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Thu, 6 Sep 2001 20:01:40 +0200
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
References: <003a01c13670$987ab460$2bc3d9c1@phed> <20010906014355.A29106@twistedmatrix.com>
Message-ID: <000e01c136fd$fd57cca0$cbb3d9c1@phed>

> To continue the trend of beating on poor Benjamin here, a few comments about
> twisted.python.otp... :-)

Oh, I can take it. It kinda stores up my shares for _my_ nasty replies later on ;)

> It seems oddly placed in twisted.python, maybe twisted.protocols would be
> better?  I know it's not a wire protocol, but it is an RFC implementation.

Well, it is selfcontained and is divided into two classes: one with service routines, 
and one which is a selfupdating password container. I can't say that I understand
what these should do in protocols, since they have nothing in common with any
of the other modules in protocols. It can also be used in a calculator as well, which
is the most popular usage of OTP :)

> It uses the same vocabulary as twisted.python.authenticator, which is hopefully
> being obseleted soon (by twisted.internet.passport)  Is that just a
> coincidence?  If not, it shouldn't; those classes have nothing to do with each
> other, and the parallels are very misleading.  Otherwise, leave the names as
> they are, since the other class will be removed soon.

I must admit that I used Authenticator as inspiration for finding names, but it does 
not work the same way at all. I think the parameters and docstrings should make 
that obvious.
I haven't looked into it yet, but I expect that some names may change if I 
add SASL-compliance.

> I applaud your effort to do testing, but could you please use the same testing
> style as the rest of Twisted, as in the twisted/test directory? :-)  Maybe that
> should be in the coding standard...

Hm, I kinda followed the "python-standard" there, but whatever fits :)

Some other issues: SMTP seems to use SASL authentication and I could write some
routines for OTP that can be used in SASL since it supports the OTP authentication
scheme. And there's one big flaw in OTP as well: When the sequence has run out 
(default is 1000 password issued) the sequence has to be reset, this is not done
automatically since this needs to be implemented in each protocol; or by an util
which has to be run on the serverside on a secure connection. 






From glyph at twistedmatrix.com  Thu Sep  6 14:53:29 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Sep 2001 15:53:29 -0500
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
In-Reply-To: <000e01c136fd$fd57cca0$cbb3d9c1@phed>; from grolgh@online.no on Thu, Sep 06, 2001 at 08:01:40PM +0200
References: <003a01c13670$987ab460$2bc3d9c1@phed> <20010906014355.A29106@twistedmatrix.com> <000e01c136fd$fd57cca0$cbb3d9c1@phed>
Message-ID: <20010906155329.A7226@twistedmatrix.com>

On Thu, Sep 06, 2001 at 08:01:40PM +0200, Benjamin Bruheim wrote:
> > To continue the trend of beating on poor Benjamin here, a few comments about
> > twisted.python.otp... :-)
> 
> Oh, I can take it. It kinda stores up my shares for _my_ nasty replies later on ;)

I'm looking forward to it... ;-)

> > It seems oddly placed in twisted.python, maybe twisted.protocols would be
> > better?  I know it's not a wire protocol, but it is an RFC implementation.

> Well, it is selfcontained and is divided into two classes: one with service
> routines, and one which is a selfupdating password container. I can't say
> that I understand what these should do in protocols, since they have nothing
> in common with any of the other modules in protocols. It can also be used in
> a calculator as well, which is the most popular usage of OTP :)

Hmm.  A calculator?  I must admit I'm a little confused by that, but okay...

> Some other issues: SMTP seems to use SASL authentication and I could write
> some routines for OTP that can be used in SASL since it supports the OTP
> authentication scheme. And there's one big flaw in OTP as well: When the
> sequence has run out (default is 1000 password issued) the sequence has to be
> reset, this is not done automatically since this needs to be implemented in
> each protocol; or by an util which has to be run on the serverside on a
> secure connection.

This is the reason I felt it should be in protocols.  It requires specific
support from various protocols, and it's not generally useful in (most?)
non-networked applications...

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From grolgh at online.no  Thu Sep  6 15:20:07 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Thu, 6 Sep 2001 23:20:07 +0200
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
References: <003a01c13670$987ab460$2bc3d9c1@phed> <20010906014355.A29106@twistedmatrix.com> <000e01c136fd$fd57cca0$cbb3d9c1@phed> <20010906155329.A7226@twistedmatrix.com>
Message-ID: <006e01c13719$e54ca4c0$cbb3d9c1@phed>

> > in common with any of the other modules in protocols. It can also be used in
> > a calculator as well, which is the most popular usage of OTP :)
> Hmm.  A calculator?  I must admit I'm a little confused by that, but okay...

A password calculator :)

> > reset, this is not done automatically since this needs to be implemented in
> > each protocol; or by an util which has to be run on the serverside on a
> > secure connection.
> This is the reason I felt it should be in protocols.  It requires specific
> support from various protocols, and it's not generally useful in (most?)
> non-networked applications...

In its current state there is no protocol specific issues. All it does is to return
strings which the protocols may use. The reason I don't feel it shouldn't be in
protocols is that it does not depend on anything in twisted for operation. Nor is it
protocolbound, actually the logic place to use it is in passport.Identity. And generate
the object otp.OTP each time the password is set. But if you wish, I can move it.

// phed






From glyph at twistedmatrix.com  Thu Sep  6 16:34:12 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Sep 2001 17:34:12 -0500
Subject: [Twisted-Python] Re: +AFs-Twisted-Python+AF0- Re: +AFs-Twisted-commits+AF0- CVS: Twisted/twisted/python otp.py,NONE,1.1
In-Reply-To: <006e01c13719$e54ca4c0$cbb3d9c1@phed>; from grolgh@online.no on Thu, Sep 06, 2001 at 11:20:07PM +0200
References: <003a01c13670$987ab460$2bc3d9c1@phed> <20010906014355.A29106@twistedmatrix.com> <000e01c136fd$fd57cca0$cbb3d9c1@phed> <20010906155329.A7226@twistedmatrix.com> <006e01c13719$e54ca4c0$cbb3d9c1@phed>
Message-ID: <20010906173412.A9741@twistedmatrix.com>

On Thu, Sep 06, 2001 at 11:20:07PM +0200, Benjamin Bruheim wrote:
> In its current state there is no protocol specific issues. All it does is to
> return strings which the protocols may use. The reason I don't feel it
> shouldn't be in protocols is that it does not depend on anything in twisted
> for operation. Nor is it protocolbound, actually the logic place to use it is
> in passport.Identity. And generate the object otp.OTP each time the password
> is set. But if you wish, I can move it.

I'll leave it up to your judgement, just take what I said as a suggestion :-).
The ultimate critera for where a particular thing should go would be where the
majority of people would look for it in the codebase; and since I'm not someone
who'd likely be looking for an OTP implementation, I don't know where I'd look
for it.

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Thu Sep  6 17:16:54 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 6 Sep 2001 18:16:54 -0500
Subject: [Twisted-Python] Reality Servers - diffs included
In-Reply-To: <OF89855288.D74AAE8C-ON4A256ABE.0081909C@mincom.oz.au>; from Chris.Hadgis@mincom.com on Thu, Sep 06, 2001 at 09:51:25AM +1000
References: <OF89855288.D74AAE8C-ON4A256ABE.0081909C@mincom.oz.au>
Message-ID: <20010906181654.A10246@twistedmatrix.com>

Just tried to apply this, and patch doesn't like it.  Please configure your MUA
to not break lines, or send the patch as an attachment.

On Thu, Sep 06, 2001 at 09:51:25AM +1000, Chris.Hadgis at mincom.com wrote:
> Here is a diff for tkfaucet for inclusion in 0.10.2

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From Chris.Hadgis at mincom.com  Thu Sep  6 17:29:53 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Fri, 7 Sep 2001 09:29:53 +1000
Subject: [Twisted-Python] Reality Servers - diffs included
Message-ID: <OF6F38F481.DDCC0DA7-ON4A256ABF.00806963@mincom.oz.au>

Sorry about the broken patches.

I blame Lotus Notes and the cretins who forced it upon us.

Please find attached the two diffs.

The next diff will include the change to replace "from foo import *" with 
"from foo import required-stuff".

Please let me know if this comes through okay. I don't trust Lotus Notes.

ChrisH



-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: trdemo.diff
Type: application/octet-stream
Size: 2311 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20010907/b242361d/attachment-0004.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: tkfaucet.diff
Type: application/octet-stream
Size: 2219 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20010907/b242361d/attachment-0005.obj>

From bruheim at c2i.net  Fri Sep  7 07:46:50 2001
From: bruheim at c2i.net (Maj-Britt Bruheim)
Date: Fri, 7 Sep 2001 15:46:50 +0200
Subject: [Twisted-Python] tcp.GetHost in twisted.web.server
Message-ID: <003b01c137a3$8c465120$38c3d9c1@phed>

Just checking before I commit :)

Why do this:

    _host = socket.gethostbyaddr(socket.gethostname())[0]
    ...
    def getHost(self):
        return self._host

when this works?

    def getHost(self):
        return self.transport.GetHost()

This at least doesn't make the crash go bad in win98

// phed






From glyph at twistedmatrix.com  Fri Sep  7 15:18:06 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 7 Sep 2001 16:18:06 -0500
Subject: [Twisted-Python] tcp.GetHost in twisted.web.server
In-Reply-To: <003b01c137a3$8c465120$38c3d9c1@phed>; from bruheim@c2i.net on Fri, Sep 07, 2001 at 03:46:50PM +0200
References: <003b01c137a3$8c465120$38c3d9c1@phed>
Message-ID: <20010907161806.A18743@twistedmatrix.com>

On Fri, Sep 07, 2001 at 03:46:50PM +0200, Maj-Britt Bruheim wrote:
> Just checking before I commit :)
> 
> Why do this:
> 
>     _host = socket.gethostbyaddr(socket.gethostname())[0]
>     ...
>     def getHost(self):
>         return self._host
> 
> when this works?
> 
>     def getHost(self):
>         return self.transport.GetHost()

Can't recall any reason for it at the moment except for the fact that your
capitalization is wrong and those methods do subtly different things... :-)

> This at least doesn't make the crash go bad in win98

What crash?

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From m at moshez.org  Sat Sep  8 10:14:09 2001
From: m at moshez.org (Moshe Zadka)
Date: Sat,  8 Sep 2001 19:14:09 +0300 (IDT)
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/web widgets.py,1.6,1.7
In-Reply-To: <E15ffzC-0000Qo-00@zaibach.twistedmatrix.com>
References: <E15ffzC-0000Qo-00@zaibach.twistedmatrix.com>
Message-ID: <20010908161409.A98E03833@darjeeling>

On Sat, 08 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> -import string, time, types, traceback, copy, pprint, sys, os
> +import string, time, types, traceback, copy, pprint, sys, os, string

string is imported twice. No biggie, but it ain't nice

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From grolgh at online.no  Sat Sep  8 13:34:44 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sat, 8 Sep 2001 21:34:44 +0200
Subject: [Twisted-Python] tcp.GetHost in twisted.web.server
References: <003b01c137a3$8c465120$38c3d9c1@phed> <20010907161806.A18743@twistedmatrix.com>
Message-ID: <004901c1389d$50868a60$dbaed9c1@phed>

> >     def getHost(self):
> >         return self.transport.GetHost()
> Can't recall any reason for it at the moment except for the fact that your
> capitalization is wrong and those methods do subtly different things... :-)

Well, it wasn't just that. :) With the correct casing it went nuts (because I 
didn't bother to check if it was run at all; it is only used in connection with
cgi):

    def getHost(self):
        return socket.gethostbyaddr(self.transport.getHost()[1])

works better :) 

> > This at least doesn't make the crash go bad in win98
> What crash?

The bug was that it used the network socket which isn't your only choice all the time.
Now the routine works for localhost too. The reason it went bad under win98 was
because I wasn't always online (modem), and gethostbyaddr couldn't find eg.
the machinename 'phed' :P The big difference is that _host was generated only at 
the creation of the Request-class.

// phed






From moshez at zadka.com  Sun Sep  9 05:44:27 2001
From: moshez at zadka.com (Moshe Zadka)
Date: 9 Sep 2001 11:44:27 -0000
Subject: [Twisted-Python] Time out on client connections
Message-ID: <20010909114427.24228.qmail@green.zadka.com>

Here's a patch, for your review:
(against 0.10.1, but should apply cleanly)

diff -urN Twisted/twisted/internet/main.py changed/twisted/internet/main.py
--- Twisted/twisted/internet/main.py	Mon Aug 20 14:10:14 2001
+++ changed/twisted/internet/main.py	Sun Sep  9 14:27:01 2001
@@ -179,10 +179,12 @@
             run()
             threadable.dispatcher.disown(self)
 
+tempDelayed = delay.Delayed() # A delay for non-peristent delayed actions
+tempDelayed.ticks = 1
 reads = {}
 writes = {}
 running = None
-delayeds = [task.theScheduler]
+delayeds = [tempDelayed, task.theScheduler]
 if threadable.threaded:
     delayeds.append(threadtask.theScheduler)
 shutdowns = []
diff -urN Twisted/twisted/internet/tcp.py changed/twisted/internet/tcp.py
--- Twisted/twisted/internet/tcp.py	Wed Aug 29 13:13:55 2001
+++ changed/twisted/internet/tcp.py	Sun Sep  9 14:41:32 2001
@@ -115,7 +115,7 @@
 class Client(Connection):
     """A client for TCP (and similiar) sockets.
     """
-    def __init__(self, host, port, protocol):
+    def __init__(self, host, port, protocol, timeout=None):
         """Initialize the client, setting up its socket, and request to connect.
         """
         if host == 'unix':
@@ -143,6 +143,13 @@
         self.doWrite = self.doConnect
         self.doConnect()
         self.logstr = self.protocol.__class__.__name__+",client"
+	if timeout is not None:
+	    main.tempDelayed.later(self.failIfNotConnected, timeout)
+
+    def failIfNotConnected(self):
+        if not self.connected:
+	    self.protocol.connectionFailed()
+	    self.loseConnection()
 
     def createInternetSocket(self):
         """(internal) Create an AF_INET socket.





From grolgh at online.no  Sun Sep  9 10:23:55 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 9 Sep 2001 18:23:55 +0200
Subject: [Twisted-Python] WebDAV in twisted.web.server
Message-ID: <002c01c1394c$0d0343a0$67b3d9c1@phed>

Hello,

I have been taking a look on WebDAV, especially RFC 2518, "HTTP Extension for Distributed Authoring -- WEBDAV". The extension concerns four areas, queries and manipulation of properties, handling of collections, locking and namespace operations. The two last areas are not crucial.
Each of these areas has its set of methods, which is dispatched the same way as 'GET' and 'PUT', but usually with a XML-file appended to the request.

The twisted.web architecture of resources is well suited for adding WebDAV. resource.Resource is fitting the term Resource as it is used in the RFC. And twisted.web.server.Request's way of handling requests/responses seems open-ended enough too add a xml-reader/writer that concates the reply with XML (mimed). I will here try to examine the changes that need to be done to twisted.web.server (and protocols.http). Barely nothing else is examined, or needed.
I will blend some explanations into my proposal in case my understanding of twisted.* is wrong :).
 
The methods 'GET', 'PUT', 'HEAD', etc, is not touched by WebDAV. These methods by definitions only concern 'files' (eg. GET retrieves the entity described by the URI).
The WebDAV-Resource '/foo/' is a Resource Collection, and '/foo/file' is a member of the collection. If '/foo/faa/file' exists, then the 'faa'-collection needs to exist because the resource-tree has to be consistent. The trailing slash tells if the files is a collection or not; this is not a rule so the server may correct the client with a MOVED_PERMANENTLY in the same way web.static does. The tree may however contain non-DAV-compliant resources, so there won't be a need to force DAV onto everything. If a putChild should be put into a collection is a discussion on its own :) (I will however mean that a DAVResource should be a good starting point for making everything DAV, by letting the stuff to go DAV inherit DAVResource)
 
Since resource is the dispatcher of methods, then WebDAV can be a simple twisted.web.resource. The request has arguments in the Header and this gets conviently passed to the assigned resource. The request may contain an XML with additional arguments as well. Request.process seems to handle the task well, except that its 'POST'-handler may be rewritten to collect the XML for most methods.
'GET' is done in the regular way, no XML, just send the entity the URI point at (for collections, send eg. the index.html. I don't know the case here, really). This is resource-stuff. All the action will be in resource.render (it will render the response XML, I guess).

Minor thing, yet: If a request take long time to accomplish (eg. MOVE 100M of data over wire) there is a reply 102 PROCESSING which tells the client to keep the line open and wait. I don't know how the details, but I guess a NOT_DONE_YET may stop the block :) The problems with this is that it will send a response later on, I guess this can be hacked in.

The changes that need to be done to protocols.http is simply adding the new error-codes, since that is all that is in it :) If we want to add namespace operations (MOVE, COPY) the http-client needs to be made DAV-compliant. Note that COPY/MOVE also can be done by FTP too ;)

The changes:
Request.resource: retrieve the XML in the request.
Handle the response 102 PROCESSING
protocols.http: Errorcodes
The conclusion:
Everything will happen in the DAV-Resource. :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20010909/e6e39950/attachment.html>

From grolgh at online.no  Sun Sep  9 10:40:23 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 9 Sep 2001 18:40:23 +0200
Subject: [Twisted-Python] WebDAV in twisted.web.server
References: <002c01c1394c$0d0343a0$67b3d9c1@phed>
Message-ID: <003501c1394e$1f70c100$67b3d9c1@phed>

(I noticed my orginal message was sent Outlookish, tell me if that annoys you or not :P)

Some comments I overlooked:

> everything. If a putChild should be put into a collection is a discussion on its own :) (I 
> will however mean that a DAVResource should be a good starting point for making 
> everything DAV, by letting the stuff to go DAV inherit DAVResource)
The alternative is to phase in DAV into twisted.web.resource itself and make _everything_ WebDAV. A DAVResource will require everything to register the files so that properties can be assigned to them.
 
> Since resource is the dispatcher of methods, then WebDAV can be a simple twisted.web.resource. The 
Resource.render must check request.method that is.

// phed






From grolgh at online.no  Sun Sep  9 10:55:34 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 9 Sep 2001 18:55:34 +0200
Subject: [Twisted-Python] WebDAV in twisted.web.server
References: <002c01c1394c$0d0343a0$67b3d9c1@phed> <003501c1394e$1f70c100$67b3d9c1@phed>
Message-ID: <004001c13950$3f276d80$67b3d9c1@phed>

>> everything. If a putChild should be put into a collection is a discussion on its own :) (I 
>> will however mean that a DAVResource should be a good starting point for making 
>> everything DAV, by letting the stuff to go DAV inherit DAVResource)
> The alternative is to phase in DAV into twisted.web.resource itself and make _everything_ WebDAV. A 
> DAVResource will require everything to register the files so that properties can be assigned to them.

A discussion on its own; I'm already disagreeing with my self; The DAVResource just uses the getChild-construction to run through the tree. It just needs enough data to get a list of its childrens resources ("files"/entities), and the ability to retrieve/patch the dict containing properties for each entity.

// phed






From carmstro at twistedmatrix.com  Sun Sep  9 11:21:04 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Sun, 9 Sep 2001 13:21:04 -0400
Subject: [Twisted-Python] WebDAV in twisted.web.server
In-Reply-To: <003501c1394e$1f70c100$67b3d9c1@phed>
Message-ID: <20010909132104.A7072@Fookidla.org>

I was wondering if it would be possible to implement WebDAV fully in
Resources, and not touching anything else. Resources can munge whatever
headers they want, etc, and we could just have a base DAVResource do all
the XML/Mime encoding.

On Sun, Sep 09, 2001 at 06:40:23PM +0200, Benjamin Bruheim wrote:
> (I noticed my orginal message was sent Outlookish, tell me if that annoys you or not :P)
> 
> Some comments I overlooked:
> 
> > everything. If a putChild should be put into a collection is a discussion on its own :) (I 
> > will however mean that a DAVResource should be a good starting point for making 
> > everything DAV, by letting the stuff to go DAV inherit DAVResource)
> The alternative is to phase in DAV into twisted.web.resource itself and make _everything_ WebDAV. A DAVResource will require everything to register the files so that properties can be assigned to them.
>  
> > Since resource is the dispatcher of methods, then WebDAV can be a simple twisted.web.resource. The 
> Resource.render must check request.method that is.
> 
> // phed
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Chris Armstrong                        carmstro at twistedmatrix.com
http://twistedmatrix.com/~carmstro     carmstro at dynup.net




From grolgh at online.no  Sun Sep  9 16:45:22 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Mon, 10 Sep 2001 00:45:22 +0200
Subject: [Twisted-Python] WebDAV in twisted.web.server
Message-ID: <00fd01c13981$1c554800$67b3d9c1@phed>

I'm resending this because I didn't notice it coming up on the ml; sorry if it is a duplicate

> I was wondering if it would be possible to implement WebDAV fully in
> Resources, and not touching anything else. Resources can munge whatever
> headers they want, etc, and we could just have a base DAVResource do all
> the XML/Mime encoding.

Yes, my last post pointed out how that could be done. Though, the stuff I pointed out (eg to make process able to forward the request content even if the method isn't POST) is really only what needs to be done.
The only stupid stuff is that the child-list for the Resources will be duplicated since they need to be a member of their parent-collection. 

So, the DAVResource needs to both represent resources ("files") and collectionresources. Hm, will it create a new DAVResource for each step down the tree? And if it hits an exisisting resource, refer to it? I am not trained in twisted.web =)

Oh, how many times resource and (dav)resource will confuse

// phed
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20010910/dda394e4/attachment.html>

From tv at twistedmatrix.com  Mon Sep 10 11:22:01 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 10 Sep 2001 20:22:01 +0300
Subject: [Twisted-Python] twisted.wed.widgets and defer.Deferred() giving a list.
Message-ID: <87ofojarly.fsf@ki.yok.utu.fi>

	Hi. I didn't commit this, as it's a bit of a conceptual change.
        Please give feedback. Patch is at the end.

        This change allows web.widgets to call defer.Deferred's
        callback() with a list instead of a string, making it possible
        to stream a web page to the browser by returning a string and
        then a Deferred object.

        Here's a snippet of a web UI I'm doing that streams LDAP
        search results to the browser as soon as the server sends
        them -- see handle_entry():

class LDAPSearchAndPrint(ldap.LDAPSearch):
    def __init__(self, ldapclient, callback, filter=pureldap.LDAPFilterMatchAll):
        ldap.LDAPSearch.__init__(self, ldapclient,
                                 baseObject='dc=example, dc=com',
                                 filter=filter,
                                 )
        self.result=""
        self.callback=callback
        self.count=0

    def handle_success(self):
        self.callback(["<p>%d entries matched."%self.count])

    def handle_entry(self, objectName, attributes):
        result="<p>%s\n<ul>\n"%objectName

        for a,l in attributes:
            assert len(l)>0
            if len(l)==1:
                result=result+"  <li>%s: %s\n"%(a, l[0])
            else:
                result=result+"  <li>%s:\n    <ul>\n"%a
                for i in l:
                    result=result+"      <li>%s\n"%i
                result=result+"    </ul>\n"

        result=result+"</ul>\n"

        c=self.callback
        d=defer.Deferred()
        self.callback=d.callback
        c([result, d])
        self.count=self.count+1

    def handle_fail(self, resultCode, errorMessage):
        self.callback("fail: %d: %s"%(resultCode, errorMessage or "Unknown error"))


--- twisted/web/widgets.py	2001/09/10 17:13:24	1.8
+++ twisted/web/widgets.py	2001/09/10 17:18:37
@@ -283,12 +283,17 @@
     def callback(self, result, position, decNeedsHeaders):
         if result != FORGET_IT:
             self.needsHeaders = self.needsHeaders - decNeedsHeaders
-        if isinstance(result, defer.Deferred):
-            self._addDeferred(result, position)
-        self.lst[position] = result
+        if not isinstance(result, types.ListType):
+            result=[result]
+        for i in xrange(len(result)):
+            if isinstance(result[i], defer.Deferred):
+                self._addDeferred(result[i], position+i)
+        self.lst[position:position+1] = result
+        assert self.position <= position
         self.keepRendering()
-        if isinstance(result, defer.Deferred):
-            result.arm()
+        for r in result:
+            if isinstance(r, defer.Deferred):
+                r.arm()
 
 
     def keepRendering(self):

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}




From twisted at itamarst.org  Mon Sep 10 12:14:20 2001
From: twisted at itamarst.org (Itamar)
Date: Mon, 10 Sep 2001 14:14:20 -0400
Subject: [Twisted-Python] Server not shutting down in Windows
Message-ID: <3B9D02FC.9090709@itamarst.org>

Hey,

In windows 2000, threaded server, my server does nut shutdown when 
main.shutDown() is called. It seens that main.waker is the problem, 
since it is not removed from the list of readers registered with the 
event loop.

Does the following patch seem reasonable (someone better test on unix) 
or does someone have a better suggestion? It does seem to solve the problem:

Index: main.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/main.py,v
retrieving revision 1.23
diff -c -r1.23 main.py
*** main.py	2001/09/02 14:42:10	1.23
--- main.py	2001/09/10 18:19:29
***************
*** 198,203 ****
--- 198,204 ----
       """
       global running
       if running:
+         removeReader(waker)
           running = 0
           log.msg('Starting Shutdown Sequence.')
           threadable.dispatcher.stop()






From grolgh at online.no  Sun Sep  9 12:09:32 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Sun, 9 Sep 2001 20:09:32 +0200
Subject: [Twisted-Python] WebDAV in twisted.web.server
References: <20010909132104.A7072@Fookidla.org>
Message-ID: <00b001c1395a$943314a0$67b3d9c1@phed>

> I was wondering if it would be possible to implement WebDAV fully in
> Resources, and not touching anything else. Resources can munge whatever
> headers they want, etc, and we could just have a base DAVResource do all
> the XML/Mime encoding.

Yes, my last post pointed out how that could be done. Though, the stuff I pointed out (eg to make process able to forward the request content even if the method isn't POST) is really only what needs to be done.
The only stupid stuff is that the child-list for the Resources will be duplicated since they need to be a member of their parent-collection. 

So, the DAVResource needs to both represent resources ("files") and collectionresources. Hm, will it create a new DAVResource for each step down the tree? And if it hits an exisisting resource, refer to it? I am not trained in twisted.web =)

Oh, how many times resource and (dav)resource will confuse

// phed






From glyph at twistedmatrix.com  Mon Sep 10 21:17:29 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 Sep 2001 22:17:29 -0500
Subject: [Twisted-Python] WebDAV in twisted.web.server
In-Reply-To: <00b001c1395a$943314a0$67b3d9c1@phed>; from grolgh@online.no on Sun, Sep 09, 2001 at 08:09:32PM +0200
References: <20010909132104.A7072@Fookidla.org> <00b001c1395a$943314a0$67b3d9c1@phed>
Message-ID: <20010910221729.A31128@twistedmatrix.com>

On Sun, Sep 09, 2001 at 08:09:32PM +0200, Benjamin Bruheim wrote:
> > I was wondering if it would be possible to implement WebDAV fully in
> > Resources, and not touching anything else. Resources can munge whatever
> > headers they want, etc, and we could just have a base DAVResource do all
> > the XML/Mime encoding.
> 
> Yes, my last post pointed out how that could be done. Though, the stuff I
> pointed out (eg to make process able to forward the request content even if
> the method isn't POST) is really only what needs to be done.
> 
> The only stupid stuff is that the child-list for the Resources will be
> duplicated since they need to be a member of their parent-collection. 
> 
> So, the DAVResource needs to both represent resources ("files") and
> collectionresources. Hm, will it create a new DAVResource for each step down
> the tree? And if it hits an exisisting resource, refer to it? I am not
> trained in twisted.web =)

To some extent, static.File already represents both of these things.  Could you
just extend Resource to allow various Resources to implement WebDAV in
different ways?  For example, I'd like to be able to describe a TR object
through WebDAV, and it'd be nice if I just had some extended API to
implement...

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From pezz at clipper.ens.fr  Wed Sep 12 04:32:17 2001
From: pezz at clipper.ens.fr (Itai Ben-Yaacov)
Date: Wed, 12 Sep 2001 12:32:17 +0200 (MET DST)
Subject: [Twisted-Python] UDP patch
Message-ID: <Pine.GSO.4.04.10109121223370.18698-101000@clipper.ens.fr>


Hi

Following a suggestion from Moshez, I rewrote his UDP classes in order to
get them somewhat more usable (eventually aiming at DNS protocol
implementation).

the example in doc/examples/udp-echoserv.py is now obsolete and will not
work.  Instead, UDP integrates neatly into doc/examples/echoserv.py

Pezz.

--

Itaï Ben-Yaacov
Équipe de Logique Mathématique
UFR de Mathématiques (case 7012)
Université Paris 7
2 place Jussieu
75251 Paris Cedex 05

Email: pezz at logique.jussieu.fr

-------------- next part --------------
A non-text attachment was scrubbed...
Name: udp-patch.gz
Type: application/octet-stream
Size: 2129 bytes
Desc: 
URL: </pipermail/twisted-python/attachments/20010912/27407064/attachment-0002.obj>

From Chris.Hadgis at mincom.com  Thu Sep 13 16:42:25 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Fri, 14 Sep 2001 08:42:25 +1000
Subject: [Twisted-Python] Reality Servers
Message-ID: <OF5CA3355A.921383DB-ON4A256AC6.007CAA7F@mincom.oz.au>

On Mon, Sep 03, 2001 at 09:41:31AM +1000, Chris.Hadgis at mincom.com wrote:

> > ... broadcastToPair() sends the message to all containers 
> > associated with the figure's current location.

[snip]

> > My proposed solution is to not include the location's containers
> > in the container list.

> I'd say that this is the wrong solution.

Indeed it is. Last night I sorted out the problem. broadcastToPair()
calls pairHears() for each container. Each call to pairHears() calls
hears() for target. This means the target gets the target message once
for each container. This is clearly wrong.

My temporary fix is to call hears() for target once in
broadcastToPair() and remove the call from pairHears().

I say it is a temporary solution because I am still in the middle of
overhauling the broadcast and hears routines.

If the next release goes out before the overhaul is complete, please
let me know and I will make the above fix available.

Cheers,
ChrisH

P.S. My heart-felt condolences go out to the Americans on the list,
and indeed to people wherever they are, for the tragedy which occurred
on Tuesday morning. I have been watching the news on the American news
channels (Fox and CNN) here in Australia and I still can't believe
what I am seeing. Courage and hope to all people affected by these
events.



-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From j.her at t-online.de  Thu Sep 13 19:07:02 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Fri, 14 Sep 2001 03:07:02 +0200
Subject: [Twisted-Python] Traceback with CVS HEAD
Message-ID: <15hhQt-2G7nBAC@fwd02.sul.t-online.com>

jh at zaibach:~$  mkwebserver --personal
Traceback (innermost last):
  File "/home/jh/bin/mkwebserver", line 128, in ?
    service = distrib.ResourcePublisher(site)
TypeError: not enough arguments; expected 3, got 2





From j.her at t-online.de  Thu Sep 13 19:39:40 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Fri, 14 Sep 2001 03:39:40 +0200
Subject: [Twisted-Python] Traceback with CVS HEAD
In-Reply-To: <15hhQt-2G7nBAC@fwd02.sul.t-online.com>
Message-ID: <15hhwT-16XqrYC@fwd02.sul.t-online.com>

On Fri, 14 Sep 2001 03:07:02 +0200, Juergen Hermann wrote:

>jh at zaibach:~$  mkwebserver --personal
>Traceback (innermost last):
>  File "/home/jh/bin/mkwebserver", line 128, in ?
>    service = distrib.ResourcePublisher(site)
>TypeError: not enough arguments; expected 3, got 2

OK, I have to use mktap. ;)





From jasbahr at crash.org  Thu Sep 13 21:44:44 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Thu, 13 Sep 2001 22:44:44 -0500
Subject: [Twisted-Python] Twisted Jython
In-Reply-To: <EIEFLCFECLLBKGPNJJIMAECCGPAA.jasbahr@twistedmatrix.com>
Message-ID: <EIEFLCFECLLBKGPNJJIMMECGHFAA.jasbahr@crash.org>

Twisted on Jython?  Does the beast exist?

Jason





From glyph at twistedmatrix.com  Fri Sep 14 13:25:08 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 14 Sep 2001 14:25:08 -0500
Subject: [Twisted-Python] Twisted Jython
In-Reply-To: <EIEFLCFECLLBKGPNJJIMMECGHFAA.jasbahr@crash.org>; from jasbahr@crash.org on Thu, Sep 13, 2001 at 10:44:44PM -0500
References: <EIEFLCFECLLBKGPNJJIMAECCGPAA.jasbahr@twistedmatrix.com> <EIEFLCFECLLBKGPNJJIMMECGHFAA.jasbahr@crash.org>
Message-ID: <20010914142508.A12664@twistedmatrix.com>

On Thu, Sep 13, 2001 at 10:44:44PM -0500, Jason L. Asbahr wrote:
> 
> Twisted on Jython?  Does the beast exist?
> 
> Jason

No, but it's on the TODO list.  The central issue is getting a synchronously
multiplexing main-loop and associated file-descriptor scanning code
(twisted.internet) running inside Jython.  This will probably be possible with
JDK 1.4's multiplexing stuff, but I think the initial approach should be to
"fake it" by spinning up lots of blocking threads and having them communicate
back to, say, the Swing main loop.

Any takers?

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From lists at itamarst.org  Sun Sep 16 04:23:53 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 16 Sep 2001 13:23:53 +0300
Subject: [Twisted-Python] Suggested API addition to threadtask
Message-ID: <3BA47DB9.90002@itamarst.org>

Hi all,

Background:
internet.threadtask lets threads schedule tasks that are then executed by 
the main event loop (Active Object pattern).

Problem:
The results of these tasks are not returned to the threads, nor do the 
threads have any way of seeing if any exceptions were raised when doing the 
task. In most cases this is not an issue (e.g. writing data to a connection) 
but it is a problem with things like opening a new tcp.Client connection.

Suggested Solution:
Optionally allow returning a DeferredResult object when scheduling tasks, 
which can then be used to get the result (or exception) of the task when it 
is eventually executed by the event loop thread.

Example:
Notice how we can catch the exceptions raised by the scheduled task.

==================================================
def toInt(x):
    return int(x)

dresult = threadtask.scheduleWithResult(toInt, args=("23",))
if dresult.haveResult():
     try:
         result = dresult.get()
     except ValueError:
         print "Not an integer"
     else:
         print "It's an integer: %d" % result

===================================================

Feedback I'm looking for:
1) Initially I had the operation that gets the result (DeferredResult.get) 
block, but this is a bad idea since it can deadlock threads waiting for a 
result that will never be returned, e.g. when shutting down the server. 
Instead now I raise a NotReady exception if no result is available. Would 
callbacks be better?

2) Better method names, "scheduleWithResult" is ugly.

3) Is this idea (DeferredResults) applicable to internet.task as well?

Attached is my updated code.
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: threadtask.py
URL: </pipermail/twisted-python/attachments/20010916/6470e294/attachment.ksh>

From lists at itamarst.org  Sun Sep 16 06:10:39 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 16 Sep 2001 15:10:39 +0300
Subject: [Twisted-Python] Patterns in Twisted
Message-ID: <3BA496BF.6040709@itamarst.org>

I've been reading POSA2, and I see Twisted uses a lot of the patterns there. 
You can find more info on each pattern by searching for it in google - most 
of the content in the book is also in publically accessable papers that can 
be found on the web. I'm including here the one sentence description from 
http://www.cs.wustl.edu/~schmidt/POSA/.


= Reactor =
"* The Reactor  architectural pattern allows event-driven applications to 
demultiplex and dispatch service requests that are delivered to an 
application from one or more clients."

The main event loop in twisted.internt.main is a Reactor - it reacts to 
events from select() and Delayed objects and dispatches them.


= Acceptor-Connector =
"* The Acceptor-Connector design pattern decouples the connection and 
initialization of cooperating peer services in a networked system from the 
processing performed by the peer services after they are connected and 
initialized."

This is how twisted works as well - once a connection has been accepted, a 
new Protocol object is created that registers itself with the event loop and 
from then on it deals with this connection.


= Active Object =
"* The Active Object design pattern decouples method execution from method 
invocation to enhance concurrency and simplify synchronized access to 
objects that reside in their own threads of control."

It does this by having a separate thread that runs the methods that. Which 
is how internet.main.threadtask works - threads add tasks to it which are 
then executed by the event loop's thread.


= Async / Half-Async =
"* The Half-Sync/Half-Async architectural pattern decouples asynchronous and 
synchronous service processing in concurrent systems, to simplify 
programming without unduly reducing performance. The pattern introduces two 
intercommunicating layers, one for asynchronous and one for synchronous 
service processing."

This is how threading protocols can be created (see the echoserv_threaded.py 
example). Protocol instances in the async layer add received messages to a 
queue that the threads read, and their results are added back to async layer 
using an implicit queuing layer, the threadtask Active Object.


Strategized Locking is what threadable.synchronize does, I think, Wrapper 
Facade is is used in making the transport level abstract, and Component 
Configurator is implicit in twisted's abilities to add/remove/configure 
different components at runtime.





From lists at itamarst.org  Mon Sep 17 11:53:25 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 Sep 2001 19:53:25 +0200
Subject: [Twisted-Python] Usenix paper on event dispatch mechanisms
Message-ID: <3BA63895.1050208@itamarst.org>

 From Usenix 2001:

*  Scalability of Linux Event-Dispatch Mechanisms,
http://lass.cs.umass.edu/~abhishek/papers/usenix01/paper.ps

Relevance:
Doing multiple accept() calls  instead of one (after a select() call 
tells you a new connection is available) can speed up your application 
considerably under high loads.





From m at moshez.org  Mon Sep 17 14:49:09 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 17 Sep 2001 23:49:09 +0300 (IDT)
Subject: [Twisted-Python] Usenix paper on event dispatch mechanisms
In-Reply-To: <3BA63895.1050208@itamarst.org>
References: <3BA63895.1050208@itamarst.org>
Message-ID: <20010917204909.654EF381F@darjeeling>

On Mon, 17 Sep 2001, Itamar Shtull-Trauring <lists at itamarst.org> wrote:

> Relevance:
> Doing multiple accept() calls  instead of one (after a select() call 
> tells you a new connection is available) can speed up your application 
> considerably under high loads.

Initial benchmarks show that this is a promising avenue. I got speed-ups
between 10% and 50% depending on the load.

Here is the improved Port class:

>---------- snip ------------<
import fcntl
import FCNTL

class Port(abstract.FileDescriptor):
    """I am a TCP server port, listening for connections.

    When a connection is accepted, I will call my factory's buildProtocol with
    the incoming connection as an argument, according to the specification
    described in twisted.protocols.protocol.Factory.

    If you wish to change the sort of transport that will be used, my
    `transport' attribute will be called with the signature expected for
    Server.__init__, so it can be replaced.
    """

    transport = Server
    sessionno = 0
    unixsocket = None
    interface = ''
    backlog = 5

    def __init__(self, port, factory, backlog=5, interface=''):
        """Initialize with a numeric port to listen on.
        """
        self.port = port
        self.factory = factory
        self.backlog = backlog
        self.interface = interface

    def __repr__(self):
        return "<%s on %s>" % (self.factory.__class__, self.port)

    def createInternetSocket(self):
        """(internal) create an AF_INET socket.
        """
        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        fcntl.fcntl(s.fileno(), FCNTL.F_SETFL, os.O_NONBLOCK)
        return s

    def __getstate__(self):
        """(internal) get my state for persistence
        """
        dct = copy.copy(self.__dict__)
        try: del dct['socket']
        except: pass
        try: del dct['fileno']
        except: pass

        return dct

    def startListening(self):
        """Create and bind my socket, and begin listening on it.

        This is called on unserialization, and must be called after creating a
        server to begin listening on the specified port.
        """
        log.msg("%s starting on %s"%(self.factory.__class__, self.port))
        if type(self.port) == types.StringType:
            skt = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
            skt.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            skt.bind(self.port)
            # Make the socket readable and writable to the world.
            mode = os.stat(self.port)[0]
            os.chmod(self.port, mode | stat.S_IROTH | stat.S_IWOTH)
            self.unixsocket = 1
        else:
            skt = self.createInternetSocket()
            skt.bind( (self.interface, self.port) )
        skt.listen(self.backlog)
        self.connected = 1
        self.socket = skt
        self.fileno = self.socket.fileno
        self.startReading()

    def doRead(self):
        """Called when my socket is ready for reading.

        This accepts a connection and callse self.protocol() to handle the
        wire-level protocol.
        """
        try:
            for i in range(40):
                try:
                    skt,addr = self.socket.accept()
                except socket.error, e:
                    if e.args[0] == EWOULDBLOCK:
                        break
                    raise
                protocol = self.factory.buildProtocol(addr)
                s = self.sessionno
                self.sessionno = s+1
                transport = self.transport(skt, protocol, addr, self, s)
                protocol.makeConnection(transport, self)
        except:
            traceback.print_exc(file=log.logfile)

    def doWrite(self):
        """Raises an AssertionError.
        """
        assert 0, "doWrite called on a %s" % str(self.__class__)

    def loseConnection(self):
        """ Stop accepting connections on this port.

        This will shut down my socket and call self.connectionLost().
        """
        # Since ports can't, by definition, write any data, we can just close
        # instantly (no need for the more complex stuff for selectables which
        # write)
        self.stopReading()
        self.connectionLost()

    def connectionLost(self):
        """Cleans up my socket.
        """
        log.msg('(Port %s Closed)' % self.port)
        abstract.FileDescriptor.connectionLost(self)
        self.connected = 0
        self.socket.close()
        if self.unixsocket:
            os.unlink(self.port)
        del self.socket
        del self.fileno

    def logPrefix(self):
        """Returns the name of my class, to prefix log entries with.
        """
        return str(self.factory.__class__)

>------------ snip ----------------<

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From glyph at twistedmatrix.com  Mon Sep 17 16:01:20 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 17 Sep 2001 17:01:20 -0500
Subject: [Twisted-Python] Usenix paper on event dispatch mechanisms
In-Reply-To: <20010917204909.654EF381F@darjeeling>; from m@moshez.org on Mon, Sep 17, 2001 at 11:49:09PM +0300
References: <3BA63895.1050208@itamarst.org> <20010917204909.654EF381F@darjeeling>
Message-ID: <20010917170120.A4975@twistedmatrix.com>

On Mon, Sep 17, 2001 at 11:49:09PM +0300, Moshe Zadka wrote:
> On Mon, 17 Sep 2001, Itamar Shtull-Trauring <lists at itamarst.org> wrote:
> 
> > Doing multiple accept() calls  instead of one (after a select() call 
> > tells you a new connection is available) can speed up your application 
> > considerably under high loads.
> 
> Initial benchmarks show that this is a promising avenue. I got speed-ups
> between 10% and 50% depending on the load.
> 
> Here is the improved Port class:

Wow.  I just read that 3 times, and my brain just can't accept that it is
_good_ for performance.  Thanks for digging it up, itamar!

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From m at moshez.org  Mon Sep 17 19:57:38 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 18 Sep 2001 04:57:38 +0300 (IDT)
Subject: [Twisted-Python] Usenix paper on event dispatch mechanisms
In-Reply-To: <20010917170120.A4975@twistedmatrix.com>
References: <20010917170120.A4975@twistedmatrix.com>, <3BA63895.1050208@itamarst.org> <20010917204909.654EF381F@darjeeling>
Message-ID: <20010918015738.4FD16381F@darjeeling>

On Mon, 17 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Wow.  I just read that 3 times, and my brain just can't accept that it is
> _good_ for performance.  Thanks for digging it up, itamar!

I've played with it some more, trying to do "Adaptability": raise the
number of maximum accept calls per select on success, lower it on
failure. I'm still playing, but in general it tends to improve results
for medium loads (100 concurrent) while worsening results for heavy
loads (1000 concurrent)
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Tue Sep 18 16:40:41 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 19 Sep 2001 00:40:41 +0200
Subject: [Twisted-Python] Usenix paper on event dispatch mechanisms
References: <3BA63895.1050208@itamarst.org> <20010917204909.654EF381F@darjeeling> <20010917170120.A4975@twistedmatrix.com>
Message-ID: <3BA7CD69.2040901@itamarst.org>

Glyph Lefkowitz wrote:


> Wow.  I just read that 3 times, and my brain just can't accept that it is
> _good_ for performance.  Thanks for digging it up, itamar!

Think about it - a selct() is very expensive, and you have to do one 
before every accept(). This way, if a lot of connections are waiting we 
do them quickly (accept() is apparently less expensive) and can starts 
sending them data on the next select(). The paper has more details.





From m at moshez.org  Wed Sep 19 01:01:42 2001
From: m at moshez.org (Moshe Zadka)
Date: Wed, 19 Sep 2001 10:01:42 +0300 (IDT)
Subject: [Twisted-Python] Adaptive Port
Message-ID: <20010919070142.E302E381F@darjeeling>

Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.22
diff -u -r1.22 tcp.py
--- twisted/internet/tcp.py	2001/09/11 04:08:28	1.22
+++ twisted/internet/tcp.py	2001/09/19 06:49:49
@@ -277,6 +277,7 @@
         """
         s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
         s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
+        s.setblocking(0)
         return s
 
     def __getstate__(self):
@@ -312,12 +313,9 @@
         self.connected = 1
         self.socket = skt
         self.fileno = self.socket.fileno
+        self.numberAccepts = 100
         self.startReading()
 
-    def getSocket(self):
-        skt,addr = self.socket.accept()
-        return skt, addr
-
     def doRead(self):
         """Called when my socket is ready for reading.
 
@@ -325,12 +323,21 @@
         wire-level protocol.
         """
         try:
-            skt, addr = self.getSocket()
-            protocol = self.factory.buildProtocol(addr)
-            s = self.sessionno
-            self.sessionno = s+1
-            transport = self.transport(skt, protocol, addr, self, s)
-            protocol.makeConnection(transport, self)
+            for i in range(self.numberAccepts):
+                try:
+                    skt,addr = self.socket.accept()
+                except socket.error, e:
+                    if e.args[0] == EWOULDBLOCK:
+                        self.numberAccepts = i
+                        break
+                    raise
+                protocol = self.factory.buildProtocol(addr)
+                s = self.sessionno
+                self.sessionno = s+1
+                transport = self.transport(skt, protocol, addr, self, s)
+                protocol.makeConnection(transport, self)
+            else:
+                self.numberAccepts = self.numberAccepts+20
         except:
             traceback.print_exc(file=log.logfile)
 

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Wed Sep 19 02:13:16 2001
From: m at moshez.org (Moshe Zadka)
Date: Wed, 19 Sep 2001 11:13:16 +0300 (IDT)
Subject: [Twisted-Python] Event/Notifier Across Pb Boundaries
Message-ID: <20010919081316.D4834381F@darjeeling>

I've written a small module to do event/notifications. It's a fairly
small and nice example of how to write pb protocols as well as being
something useful

>----------- twisted/internet/event.py ---------------<
# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from twisted.spread import pb
from twisted.internet import passport
from twisted.python import reflect

class EventPublishPerspective(pb.Perspective):
    def perspective_subscribe(self, event, subscriber):
        self.service.subscribe(event, subscriber)

    def perspective_notifyEvent(self, event, *args, **kw):
        self.service.notifyEvent(event, args, kw)

class EventPublishService(pb.Service):

    def __init__(self, *args, **kw):
        apply(pb.Service.__init__, (self,)+args, kw)
        self.eventSubscribers = {}

    def subscribe(self, event, subscriber):
        if not self.eventSubscribers.has_key(event):
            self.eventSubscribers[event] = []
        self.eventSubscribers[event].append(subscriber)

    def notifyEvent(self, event, args, kw):
        for subscriber in self.eventSubscribers.get(event, ()):
            try:
                apply(subscriber.notifyEvent, (event,)+args, kw)
            except pb.ProtocolError:
                pass

    def getPerspectiveNamed(self, name):
        return EventPublishPerspective("any", self)


class EventNotifier(pb.Referenceable):

    def registerAll(self, perspective):
        dct = {}
        reflect.addMethodNamesToDict(self.__class__, dct, "event_")
        for name in dct.keys():
            perspective.subscribe(name, self)

    def remote_notifyEvent(self, event, *args, **kw):
        method = getattr(self, 'event_'+event, None)
        if method is None:
            return
        apply(method, args, kw)

if __name__ == '__main__':
    import event
    from twisted.internet.main import Application
    app = Application("event")
    i = passport.Identity("guest", app)
    i.setPassword("guest")
    app.authorizer.addIdentity(i)
    bf = pb.BrokerFactory(app)
    svc = event.EventPublishService("event", app)
    i.addKeyForPerspective(svc.getPerspectiveNamed('any'))
    app.listenOn(pb.portno, bf)
    app.save("start")
>-----------------------------------------------------------<

>----------- run this to get "event-start.tap" -------------<
from twisted.internet import event, passport, main
from twisted.spread import pb

app = main.Application("event")
i = passport.Identity("guest", app)
i.setPassword("guest")
app.authorizer.addIdentity(i)
bf = pb.BrokerFactory(app)
svc = event.EventPublishService("event", app)
i.addKeyForPerspective(svc.getPerspectiveNamed('any'))
app.listenOn(pb.portno, bf)
app.save("start")
>--------------------------------------------<

>------------ this connects and gets a notification -----------<
from twisted.spread import pb
from twisted.internet import tcp, main, event

class HelloEvent(event.EventNotifier):

    def event_hello(self, who):
        print "hello", who
        main.shutDown()

def failure(error):
    print "Failure...",error
    main.shutDown()

def connected(perspective):
    hello = HelloEvent()
    hello.registerAll(perspective)
    print "registered"
    perspective.notifyEvent("hello", "world", pberrback=failure)
    print "connected."

def preConnected(identity):
    identity.attach("event", "any", None,
                    pbcallback=connected,
                    pberrback=failure)

b = pb.Broker()
b.requestIdentity("guest",  "guest",
                  callback = preConnected,
                  errback  = failure)
tcp.Client("localhost",pb.portno,b)
main.run()
>-------------------------------------------<

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Thu Sep 20 07:14:08 2001
From: m at moshez.org (Moshe Zadka)
Date: Thu, 20 Sep 2001 16:14:08 +0300 (IDT)
Subject: [Twisted-Python] Mail Support
Message-ID: <20010920131408.2C427381F@darjeeling>

Attention everyone: mail support (twisted.mail) is going to be rewritten
completely, breaking backwards compatibility with domains written
by 3rd parties. If you happen to have written any domain, please let
me know. 

Problems which I do not want to fix in a backwards compatible way:
* exists() and saveMessage() are assumed to be synchronous. They
  should not be
* The order of parameters to exists and saveMessage is completely
  wrong

How I am going to fix it:

* exists() and saveMessage() will receive 3 arguments: a User object,
  and callbacks to call on existence/non-existence and successful/unsuccessful
  save (saveMessage will also get the message)

Quite possibly, the User object will contain a reference to the Protocol
object, so they can look inside the factory and transport parameters.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Thu Sep 20 21:07:17 2001
From: m at moshez.org (Moshe Zadka)
Date: Fri, 21 Sep 2001 06:07:17 +0300 (IDT)
Subject: [Twisted-Python] Mail Support
In-Reply-To: <20010920131408.2C427381F@darjeeling>
References: <20010920131408.2C427381F@darjeeling>
Message-ID: <20010921030717.32E8B381F@darjeeling>

On Thu, 20 Sep 2001 16:14:08 +0300 (IDT), Moshe Zadka <m at moshez.org> wrote:

> Attention everyone: mail support (twisted.mail) is going to be rewritten
> completely, breaking backwards compatibility with domains written
> by 3rd parties.

OK, 0.10.2 has been released with a revised interface. 
It still might change...I hope to have something stable soon
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Fri Sep 21 07:42:45 2001
From: m at moshez.org (Moshe Zadka)
Date: Fri, 21 Sep 2001 16:42:45 +0300 (IDT)
Subject: [Twisted-Python] --python and --plugin
Message-ID: <20010921134245.E4C59381F@darjeeling>

I'd like to add a feature, that if there is a 'getPorts' in the namespace
then twistd will create an application itself, and then call 
getPorts() on it which should return a list of [(port num), factory],
and then will call application.listenOn on those tuples.

What is the big win? we can give mktap --plugin and --pyton options too,
which means it will be possible (and easy!) to configure a .tap given
a plugin, which is currently painful.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Fri Sep 21 08:35:17 2001
From: m at moshez.org (Moshe Zadka)
Date: Fri, 21 Sep 2001 17:35:17 +0300 (IDT)
Subject: [Twisted-Python] twistd possible hole
Message-ID: <20010921143517.53445381F@darjeeling>

twistd adds the running-directory to the system include path.
I'm not sure I like it, because it must have write access
to the running directory to dump pickles, and having applications
have write permissions there. What's more, in the case where
the running directory is shared between several twistd instances,
it means one twistd instance can corrupt others via messing with
their path. Why was it done? If there is no good reason,
I suggest we drop it.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Fri Sep 21 09:49:13 2001
From: m at moshez.org (Moshe Zadka)
Date: Fri, 21 Sep 2001 18:49:13 +0300 (IDT)
Subject: [Twisted-Python] (no subject)
Message-ID: <20010921154913.85CF5381F@darjeeling>

>------------------ control_panel.py -----------<
# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from twisted.spread import pb
from twisted.internet import passport, main

class ControlPanelPerspective(pb.Perspective):
    def perspective_shutdown(self):
        main.shutDown()

    def perspective_save(self, name=''):
        import __main__
        __main__.application.save(name)

class ControlPanelService(pb.Service):
    def getPerspectiveNamed(self, name):
        return ControlPanelPerspective("any", self)

if __name__ == '__main__':
    import control_panel
    from twisted.internet.main import Application
    app = Application("control_panel")
    i = passport.Identity("guest", app)
    i.setPassword("guest")
    app.authorizer.addIdentity(i)
    bf = pb.BrokerFactory(app)
    svc = control_panel.ControlPanelService("control_panel", app)
    i.addKeyForPerspective(svc.getPerspectiveNamed('any'))
    app.listenOn(pb.portno, bf)
    app.save("start")
>------------------------------------------------------------<

>----------------- pbshutdown.py -----------------------------<

# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from twisted.spread import pb
from twisted.internet import tcp, main

def failure(error):
    print "Failure...",error
    main.shutDown()

def disconnected():
    print "disconnected."
    main.shutDown()

def connected(perspective):
    perspective.shutdown(pberrback=main.shutDown, pbcallback=main.shutDown)
    print "connected."

def preConnected(identity):
    identity.attach("control_panel", "any", None,
                    pbcallback=connected,
                    pberrback=failure)

# run a client
b = pb.Broker()
b.requestIdentity("guest",  # username
                  "guest",  # password
                  callback = preConnected,
                  errback  = failure)

tcp.Client("localhost",pb.portno,b)

main.run()
>------------------------------------------------------------<

>------------------- pbsave.py  ----------------------------<
# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from twisted.spread import pb
from twisted.internet import tcp, main

def failure(error):
    print "Failure...",error
    main.shutDown()

def disconnected():
    print "disconnected."
    main.shutDown()

def connected(perspective):
    perspective.save('pbservice', pberrback=main.shutDown, pbcallback=main.shutDown)
    print "connected."

def preConnected(identity):
    identity.attach("control_panel", "any", None,
                    pbcallback=connected,
                    pberrback=failure)

# run a client
b = pb.Broker()
b.requestIdentity("guest",  # username
                  "guest",  # password
                  callback = preConnected,
                  errback  = failure)

tcp.Client("localhost",pb.portno,b)

main.run()
>------------------------------------------------------------<

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From tv at debian.org  Sat Sep 22 07:08:54 2001
From: tv at debian.org (Tommi Virtanen)
Date: 22 Sep 2001 16:08:54 +0300
Subject: [Twisted-Python] accepttests mail test fails with python 1.5.2 due to binascii.hexlify
Message-ID: <87n13nmkyh.fsf@ki.yok.utu.fi>

[tv at ki ~/work/twistedmatrix/Twisted]$ WEBBROWSER=links USER=tv IRCCLIENT=run-xchat PYTHONPATH=. ./bin/accepttests
/------
|####
|#### Starting test.
|####
\------
/------
|####
|#### Starting mail test
|####
\------
Running System Command: './bin/mktap mail --domain foo.bar=dump --user postmaster=postmaster'
Saving mail application to mail.tap...
Saved.
Running System Command: './bin/mktap --append mail.tap mail --relay 127.0.0.1,8025=dump2             --smtp 8026 --pop 8111'
Saving mail application to mail.tap...
Saved.
Running Command: './bin/twistd -f mail.tap'
Traceback (innermost last):
  File "./bin/accepttests", line 205, in ?
    runAllTests()
  File "./bin/accepttests", line 189, in runAllTests
    runMailTest()
  File "./bin/accepttests", line 173, in runMailTest
    p.apop('postmaster at foo.bar', 'postmaster')
  File "/usr/lib/python1.5/poplib.py", line 281, in apop
    return self._shortcmd('APOP %s %s' % (user, digest))
  File "/usr/lib/python1.5/poplib.py", line 146, in _shortcmd
    return self._getresp()
  File "/usr/lib/python1.5/poplib.py", line 125, in _getresp
    raise error_proto(resp)
poplib.error_proto: -ERR bad protocol or server: AttributeError: hexlify
zsh: 28133 exit 1     WEBBROWSER=links USER=tv IRCCLIENT=run-xchat PYTHONPATH=. ./bin/accepttests
[tv at ki ~/work/twistedmatrix/Twisted]$ 

        In twisted.mail.maildir.MaildirMailbox.authenticateUserAPOP,
        binascii.hexlify is used. Hexlify is in python2, but not in
        earlier ones..

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}




From glyph at twistedmatrix.com  Sat Sep 22 19:30:40 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 22 Sep 2001 20:30:40 -0500
Subject: [Twisted-Python] twistd possible hole
In-Reply-To: <20010921143517.53445381F@darjeeling>; from m@moshez.org on Fri, Sep 21, 2001 at 05:35:17PM +0300
References: <20010921143517.53445381F@darjeeling>
Message-ID: <20010922203040.A23890@twistedmatrix.com>

I understand your concern, but I don't think we can classify it as a "hole"
unless it violates a specified invariant. Before continuing this discussion, we
should identify the security strategy that twistd will pursue.  I believe that
the working directory of a twistd process should uniquely identify that process
and that the process -- maybe this is not a good idea.  The reason that the
particular feature you're talking about was implemented is purely as a
convenience; hopefully in the future there will be some way to scan for Twisted
plugins, and I was thinking that the Python path might not be the right place
to do that search.  A good security strategy may be to "freeze" a server by not
giving it write permissions to that directory, so that it can never reconfigure
itself, but in that case an additional 'persistence' mechanism will probably be
required.

So, what are our invariants?  In what ways should we buttress those invariants
with OS-specified garuantees?  There are probably some other things we need to
look at eliminating, too.

On Fri, Sep 21, 2001 at 05:35:17PM +0300, Moshe Zadka wrote:
> twistd adds the running-directory to the system include path.
> I'm not sure I like it, because it must have write access
> to the running directory to dump pickles, and having applications
> have write permissions there. What's more, in the case where
> the running directory is shared between several twistd instances,
> it means one twistd instance can corrupt others via messing with
> their path. Why was it done? If there is no good reason,
> I suggest we drop it.

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From glyph at twistedmatrix.com  Sat Sep 22 19:33:11 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 22 Sep 2001 20:33:11 -0500
Subject: [Twisted-Python] (no subject)
In-Reply-To: <20010921154913.85CF5381F@darjeeling>; from m@moshez.org on Fri, Sep 21, 2001 at 06:49:13PM +0300
References: <20010921154913.85CF5381F@darjeeling>
Message-ID: <20010922203311.B23890@twistedmatrix.com>

Hmm.  Looks like a lot of code replicated between pbshutdown and pbsave.
Should we have a 'connect and send a method call' utility method?

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From m at moshez.org  Sat Sep 22 19:45:44 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 04:45:44 +0300 (IDT)
Subject: [Twisted-Python] twistd possible hole
In-Reply-To: <20010922203040.A23890@twistedmatrix.com>
References: <20010922203040.A23890@twistedmatrix.com>, <20010921143517.53445381F@darjeeling>
Message-ID: <20010923014544.4A40B38A7@darjeeling>

On Sat, 22 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> I understand your concern, but I don't think we can classify it as a "hole"
> unless it violates a specified invariant.

It's not a "hole" per-se, I just don't like "trusting" the current directory.
The setups I'm talking about are things similar to the default deployment
strategy in "tap2deb" (obviously, because I wrote it ;-)
Note that the master tap is in /etc, out of reach of the twistd process
(assuming it's not running as root)
So, that means we can safely say "breaking into twistd and tricking it
cannot result in permanent changes". Except for the sys.path thing
obviously. Yes, the -shutdown pickles under /var will be re-written,
but they are used only when it is a concious decision by the admin.

If we want plugin directories, then let's specify which directories there
are. I suggest an option to twistd to append some directory to the plugin
search path.

> So, what are our invariants?

Basically, I want the invariant "permanent changes twistd can make
are untrusted". Which is the usual invariant -- common Apache configurations
are that way, Zope tries to do so. Of course, failures are possible...
we just gotta try hard.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Sat Sep 22 19:47:41 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 04:47:41 +0300 (IDT)
Subject: [Twisted-Python] (no subject)
In-Reply-To: <20010922203311.B23890@twistedmatrix.com>
References: <20010922203311.B23890@twistedmatrix.com>, <20010921154913.85CF5381F@darjeeling>
Message-ID: <20010923014741.B85EE38A7@darjeeling>

On Sat, 22 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Hmm.  Looks like a lot of code replicated between pbshutdown and pbsave.
> Should we have a 'connect and send a method call' utility method?

Perhaps. I mainly sent this out as a proof of concept for what can be
done, not as production-grade stuff.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Sun Sep 23 02:44:56 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 23 Sep 2001 11:44:56 +0300
Subject: [Twisted-Python] Registering functions to be run at shutdown, delayeds
Message-ID: <3BADA108.9040406@itamarst.org>

Right now, functions to be run at shutdown are added by appending to 
twisted.internet.main.shutdowns, and delayeds are added by appending to 
twisted.internet.main.delayeds. I suggest adding functions for both:


Index: main.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/main.py,v
retrieving revision 1.27
diff -c -r1.27 main.py
*** main.py	2001/09/19 12:18:09	1.27
--- main.py	2001/09/23 08:46:55
***************
*** 373,378 ****
--- 373,388 ----
                   callback()
               except:
                   traceback.print_exc(file=log.logfile)
+
+ def addShutdown(function):
+     """Add a function to be called at shutdown.
+     """
+     shutdowns.append(function)
+
+ def addDelayed(delayed):
+     """Add a Delayed object to the event loop"""
+     delayeds.append(delayed)
+
   def addReader(reader):
       """Add a FileDescriptor for notification of data available to read.
       """






From m at moshez.org  Sun Sep 23 06:54:39 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 15:54:39 +0300 (IDT)
Subject: [Twisted-Python] fcntl
Message-ID: <20010923125439.8A2FE38BD@darjeeling>

FCNTL exists in Python 2.2, but gives a DeprecationWarning. We should
all be greatful for this warning in advance of a backwards incompatibility
looming in the future.

Here is a patch to future-proof the code
I've checked it with 1.5.2 and 2.2a3

Please let me know of any objections

Index: twisted/internet/process.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/process.py,v
retrieving revision 1.6
diff -u -r1.6 process.py
--- twisted/internet/process.py	2001/08/18 09:31:01	1.6
+++ twisted/internet/process.py	2001/09/23 13:03:15
@@ -24,7 +24,10 @@
 if os.name == 'posix':
     # Inter-process communication and FCNTL fun isn't available on windows.
     import fcntl
-    import FCNTL
+    if (sys.hexversion >> 16) >= 0x202:
+        FCNTL = fcntl
+    else:
+        import FCNTL
 
 from twisted.persisted import styles
 from twisted.python import log, threadable
@@ -185,7 +188,7 @@
         for fd in stdout_write, stderr_write, stdin_read:
             os.close(fd)
         for fd in (stdout_read, stderr_read):
-            fcntl.fcntl(fd, FCNTL.F_SETFL, FCNTL.O_NONBLOCK)
+            fcntl.fcntl(fd, FCNTL.F_SETFL, os.O_NONBLOCK)
         self.stdout = os.fdopen(stdout_read, 'r')
         self.stderr = os.fdopen(stderr_read, 'r')
         self.stdin = stdin_write

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Sun Sep 23 07:00:06 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 16:00:06 +0300 (IDT)
Subject: [Twisted-Python] Non-blocking Resolution
Message-ID: <20010923130006.61E0938BF@darjeeling>

Here is a patch for stopping to use the native (blocking!) resolve,
and using an internal resolver. Later "mktap" could grow arguments
to set the resolver, and other things.
I have not yet done UDP, but I plan to do it soon enough, if this
patch is deemed acceptable.

Note that this means a resolver must be persistable. The DNS
resolver is not peristable, but I already have a patch to make
it so.

Index: twisted/internet/main.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/main.py,v
retrieving revision 1.27
diff -u -r1.27 main.py
--- twisted/internet/main.py	2001/09/19 12:18:09	1.27
+++ twisted/internet/main.py	2001/09/23 13:07:25
@@ -50,9 +50,13 @@
         if os.name == "posix":
             self.uid = uid or os.getuid()
             self.gid = gid or os.getgid()
+        self.resolver = DummyResolver()
 
-    persistentVersion = 1
+    persistentVersion = 2
 
+    def upgradeToVersion2(self):
+        self.resolver = DummyResolver()
+
     def upgradeToVersion1(self):
         """Version 1 Persistence Upgrade
         """
@@ -161,6 +165,7 @@
     def run(self, save=1):
         """Run this application, running the main loop if necessary.
         """
+        global resolver
         if not self.running:
             threadable.dispatcher.own(self)
             delayeds.extend(self.delayeds)
@@ -174,6 +179,7 @@
                     return
             for service in self.services.values():
                 service.startService()
+            resolver = self.resolver
             self.running = 1
             threadable.dispatcher.disown(self)
         if not running:
@@ -192,6 +198,11 @@
     """
     theTimeouts.later(method, seconds)
 
+class DummyResolver:
+
+    def resolve(self, address, success, fail):
+        fail()
+
 reads = {}
 writes = {}
 running = None
@@ -199,6 +210,7 @@
 if threadable.threaded:
     delayeds.append(threadtask.theScheduler)
 shutdowns = [theTimeouts.runEverything]
+resolver = DummyResolver()
 
 def shutDown(a=None, b=None):
     """Run all shutdown callbacks (save all running Applications) and exit.
@@ -523,6 +535,7 @@
     # currentPlugins = os.path.abspath("TwistedPlugins")
     allPlugins = [systemPlugins, userPlugins, confPlugins] #, currentPlugins]
     sys.path.extend(allPlugins)
+
 
 # Sibling Import
 import process
Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.22
diff -u -r1.22 tcp.py
--- twisted/internet/tcp.py	2001/09/11 04:08:28	1.22
+++ twisted/internet/tcp.py	2001/09/23 13:07:26
@@ -28,6 +28,7 @@
 import socket
 import sys
 import traceback
+import string
 
 if os.name == 'nt':
     EWOULDBLOCK = 10035
@@ -49,7 +50,7 @@
 
 # Sibling Imports
 import abstract
-from main import CONNECTION_LOST, CONNECTION_DONE
+import main
 
 class Connection(abstract.FileDescriptor,
                  protocol.Transport,
@@ -79,9 +80,9 @@
             if se.args[0] == EWOULDBLOCK:
                 return
             else:
-                return CONNECTION_LOST
+                return main.CONNECTION_LOST
         if not data:
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
         return self.protocol.dataReceived(data)
 
     def writeSomeData(self, data):
@@ -95,7 +96,7 @@
         except socket.error, se:
             if se.args[0] == EWOULDBLOCK:
                 return 0
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
 
     def connectionLost(self):
         """See abstract.FileDescriptor.connectionLost().
@@ -145,6 +146,7 @@
         self.port = port
         Connection.__init__(self, skt, protocol)
         self.doWrite = self.doConnect
+        self.resolveAddress()
         self.doConnect()
         self.logstr = self.protocol.__class__.__name__+",client"
 	if timeout is not None:
@@ -161,13 +163,32 @@
         # factored out so as to minimise the code necessary for SecureClient
         return socket.socket(socket.AF_INET,socket.SOCK_STREAM)
 
+    def resolveAddress(self):
+        parts = string.split(self.addr[0], '.')
+        if len(parts) == 4:
+            try:
+                for part in map(int, parts):
+                    if not (0<=part<256):
+                        break
+                else:
+                    self.realAddress = self.addr[0]
+                    return
+            except ValueError:
+                pass
+        main.resolver.resolve(self.addr[0], self.setRealAddress, 
+                                            self.failIfNotConnected)
+
+    def setRealAddress(self, address):
+        self.realAddress = address
+        self.doConnect()
+
     def doConnect(self):
         """I connect the socket.
         
         Then, call the protocol's makeConnection, and start waiting for data.
         """
         try:
-            self.socket.connect(self.addr)
+            self.socket.connect((self.realAddress, self.addr[1]))
         except socket.error, se:
             if se.args[0] == EMYSTERY:
                 self.startWriting()

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Sun Sep 23 07:07:44 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 16:07:44 +0300 (IDT)
Subject: [Twisted-Python] Resolver patch: updated
Message-ID: <20010923130744.0B9E238BF@darjeeling>

Last version had a slight bug, here it is without it.

 
Index: twisted/internet/main.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/main.py,v
retrieving revision 1.27
diff -u -r1.27 main.py
--- twisted/internet/main.py	2001/09/19 12:18:09	1.27
+++ twisted/internet/main.py	2001/09/23 13:18:10
@@ -50,9 +50,13 @@
         if os.name == "posix":
             self.uid = uid or os.getuid()
             self.gid = gid or os.getgid()
+        self.resolver = DummyResolver()
 
-    persistentVersion = 1
+    persistentVersion = 2
 
+    def upgradeToVersion2(self):
+        self.resolver = DummyResolver()
+
     def upgradeToVersion1(self):
         """Version 1 Persistence Upgrade
         """
@@ -161,6 +165,7 @@
     def run(self, save=1):
         """Run this application, running the main loop if necessary.
         """
+        global resolver
         if not self.running:
             threadable.dispatcher.own(self)
             delayeds.extend(self.delayeds)
@@ -174,6 +179,7 @@
                     return
             for service in self.services.values():
                 service.startService()
+            resolver = self.resolver
             self.running = 1
             threadable.dispatcher.disown(self)
         if not running:
@@ -192,6 +198,11 @@
     """
     theTimeouts.later(method, seconds)
 
+class DummyResolver:
+
+    def resolve(self, address, success, fail):
+        fail()
+
 reads = {}
 writes = {}
 running = None
@@ -199,6 +210,7 @@
 if threadable.threaded:
     delayeds.append(threadtask.theScheduler)
 shutdowns = [theTimeouts.runEverything]
+resolver = DummyResolver()
 
 def shutDown(a=None, b=None):
     """Run all shutdown callbacks (save all running Applications) and exit.
@@ -523,6 +535,7 @@
     # currentPlugins = os.path.abspath("TwistedPlugins")
     allPlugins = [systemPlugins, userPlugins, confPlugins] #, currentPlugins]
     sys.path.extend(allPlugins)
+
 
 # Sibling Import
 import process
Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.22
diff -u -r1.22 tcp.py
--- twisted/internet/tcp.py	2001/09/11 04:08:28	1.22
+++ twisted/internet/tcp.py	2001/09/23 13:18:11
@@ -28,6 +28,7 @@
 import socket
 import sys
 import traceback
+import string
 
 if os.name == 'nt':
     EWOULDBLOCK = 10035
@@ -49,7 +50,7 @@
 
 # Sibling Imports
 import abstract
-from main import CONNECTION_LOST, CONNECTION_DONE
+import main
 
 class Connection(abstract.FileDescriptor,
                  protocol.Transport,
@@ -79,9 +80,9 @@
             if se.args[0] == EWOULDBLOCK:
                 return
             else:
-                return CONNECTION_LOST
+                return main.CONNECTION_LOST
         if not data:
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
         return self.protocol.dataReceived(data)
 
     def writeSomeData(self, data):
@@ -95,7 +96,7 @@
         except socket.error, se:
             if se.args[0] == EWOULDBLOCK:
                 return 0
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
 
     def connectionLost(self):
         """See abstract.FileDescriptor.connectionLost().
@@ -145,7 +146,7 @@
         self.port = port
         Connection.__init__(self, skt, protocol)
         self.doWrite = self.doConnect
-        self.doConnect()
+        self.resolveAddress()
         self.logstr = self.protocol.__class__.__name__+",client"
 	if timeout is not None:
 	    main.addTimeout(self.failIfNotConnected, timeout)
@@ -161,13 +162,32 @@
         # factored out so as to minimise the code necessary for SecureClient
         return socket.socket(socket.AF_INET,socket.SOCK_STREAM)
 
+    def resolveAddress(self):
+        parts = string.split(self.addr[0], '.')
+        if len(parts) == 4:
+            try:
+                for part in map(int, parts):
+                    if not (0<=part<256):
+                        break
+                else:
+                    self.setRealdAddress(self.addr[0])
+                    return
+            except ValueError:
+                pass
+        main.resolver.resolve(self.addr[0], self.setRealAddress, 
+                                            self.failIfNotConnected)
+
+    def setRealAddress(self, address):
+        self.realAddress = address
+        self.doConnect()
+
     def doConnect(self):
         """I connect the socket.
         
         Then, call the protocol's makeConnection, and start waiting for data.
         """
         try:
-            self.socket.connect(self.addr)
+            self.socket.connect((self.realAddress, self.addr[1]))
         except socket.error, se:
             if se.args[0] == EMYSTERY:
                 self.startWriting()

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Sun Sep 23 11:14:35 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 23 Sep 2001 20:14:35 +0300 (IDT)
Subject: [Twisted-Python] Release Procedure, Patches and Bugs, oh my!
Message-ID: <20010923171435.25CCC38C2@darjeeling>

We have about 20 items in the TODO file, we have loads of patches,
and I have a suspicion we are not reporting bugs well enough
because it's too frustrating.

I suggest using some kind of bug tracking system. I suggest roundup,
but please don't fight about this -- anything is better then nothing.

Thanks.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Sun Sep 23 16:54:35 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Sep 2001 00:54:35 +0200
Subject: [Twisted-Python] Release Procedure, Patches and Bugs, oh my!
References: <20010923171435.25CCC38C2@darjeeling>
Message-ID: <3BAE682B.508@itamarst.org>

Moshe Zadka wrote:

> We have about 20 items in the TODO file, we have loads of patches,
> and I have a suspicion we are not reporting bugs well enough
> because it's too frustrating.
> 
> I suggest using some kind of bug tracking system. I suggest roundup,
> but please don't fight about this -- anything is better then nothing.


I agree! I'm just not sure how to add CGIs, or I'd add it. Plus it needs 
a dbm module, and bsddb3 is *probably* better than python's bsddb (based 
off bsddb 1.8), so maybe someone with root should install it 
(http://pybsddb.sf.net).

Or we could use SF... But roundup looks prettier, and will probably be 
faster. But we need *something*, and we need it soon.

The patches are:
1. DNS resolver used for lookups (moshez)
2. multiple accept() (moshez)
3. New API for adding delayeds and shutdowns (itamar)
4. --python and --plugin for mktap (moshez)

And I have a few local patches and I'm sure other people have too.






From glyph at twistedmatrix.com  Sun Sep 23 20:29:18 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 23 Sep 2001 21:29:18 -0500
Subject: [Twisted-Python] Release Procedure, Patches and Bugs, oh my!
In-Reply-To: <3BAE682B.508@itamarst.org>; from lists@itamarst.org on Mon, Sep 24, 2001 at 12:54:35AM +0200
References: <20010923171435.25CCC38C2@darjeeling> <3BAE682B.508@itamarst.org>
Message-ID: <20010923212918.A21665@twistedmatrix.com>

On Mon, Sep 24, 2001 at 12:54:35AM +0200, Itamar Shtull-Trauring wrote:
> Moshe Zadka wrote:
>
> > I suggest using some kind of bug tracking system. I suggest roundup,
> > but please don't fight about this -- anything is better then nothing.

Agreed.  Roundup sounds like a good place to start, especially since I have
very little bug tracking system experience.

> I agree! I'm just not sure how to add CGIs, or I'd add it.

Make yourself a --personal --static webserver, and you can run CGIs.

> Plus it needs a dbm module, and bsddb3 is *probably* better than python's
> bsddb (based off bsddb 1.8), so maybe someone with root should install it
> (http://pybsddb.sf.net).

Can we use dirdbm or would that explode too quickly?  I'd rather have stable
than fast, and I've been burned by all varieties of bsddb at one point or
another...

> The patches are:
> 1. DNS resolver used for lookups (moshez)
> 2. multiple accept() (moshez)
> 3. New API for adding delayeds and shutdowns (itamar)
> 4. --python and --plugin for mktap (moshez)

While I don't disagree that we need a system for tracking submitted patches, I
think I've missed out on this corner of open source culture :).

Why are we submitting patches to the mailing list?  I think that if we agree
that something should be done (and it won't break anything) rather than
submitting patches to the list, commit it to CVS.  I think that all the patches
here with the possible exception of the 4th are cool new functionality, and if
there's something that turns out not to fit, we can remove or revert it.  I'm
not against doing things through patches but I don't understand what value it
has...

(Why do I have this weird feeling that somebody's going to point to a mailing
list message I don't remember where I recommend that everyone submit patches to
the mailing list first...? -_-)

-- 
                      ______      __   __  _____  _     _
                     |  ____ |      \_/   |_____] |_____|
                     |_____| |_____  |    |       |     |
                     @ t w i s t e d m a t r i x  . c o m
                     http://twistedmatrix.com/users/glyph




From m at moshez.org  Sun Sep 23 21:52:51 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 05:52:51 +0200 (IST)
Subject: [Twisted-Python] Release Procedure, Patches and Bugs, oh my!
In-Reply-To: <20010923212918.A21665@twistedmatrix.com>
References: <20010923212918.A21665@twistedmatrix.com>, <20010923171435.25CCC38C2@darjeeling> <3BAE682B.508@itamarst.org>
Message-ID: <20010924035251.D310538C2@darjeeling>

On Sun, 23 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> While I don't disagree that we need a system for tracking submitted patches, I
> think I've missed out on this corner of open source culture :).
> 
> Why are we submitting patches to the mailing list?  I think that if we agree
> that something should be done (and it won't break anything) rather than
> submitting patches to the list, commit it to CVS.  I think that all the patches
> here with the possible exception of the 4th are cool new functionality, 

I, for one, sometime like to send out a patch before I commit to get some
feedback. For example, I can send out half-baked code to flow an idea past
you. When we discuss it partly on the mailing list and partly on IRC, there
is no place someone can go to see all discussion about a patch. What's more,
since most patches are appliable (more or less) against the last release,
this gives non-developer an opportunity to comment.

I don't think we have a clear guideline, so my guideline is "things I'm
the authority for I just submit. Things which are simple bugfixes or patches
I ask around, then submit. Changes or big things I ask on the mailing list
first". For example, the resolver patch needs some more discussion: Itamar
had valid (though wrong, IMHO) objections to it and we talked about a reasonable
compromise.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Sun Sep 23 23:37:56 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 07:37:56 +0200 (IST)
Subject: [Twisted-Python] Newest Resolver Patch
Message-ID: <20010924053756.0EF6138DB@darjeeling>

It seems to work, but I'd like people to play with this
a bit more. Note that mktap's default is the native resolver,
but the transparent upgrade is to DummyResolver, which cannot
resolve at all.

Index: bin/mktap
===================================================================
RCS file: /cvs/Twisted/bin/mktap,v
retrieving revision 1.9
diff -u -r1.9 mktap
--- bin/mktap	2001/08/25 07:16:13	1.9
+++ bin/mktap	2001/09/24 05:36:05
@@ -40,6 +40,7 @@
 
 from twisted.protocols import telnet
 from twisted.internet import main,tcp
+from twisted.names import native
 from twisted.python import usage
 import sys, traceback, os, cPickle
 
@@ -90,6 +91,7 @@
 
 if not options.append:
     a = main.Application(options.args[0], int(options.uid), int(options.gid))
+    a.resolver = native.Resolver()
 else:
     a = cPickle.load(open(options.append))
 for num, proto in mod.getPorts(a, config):
Index: twisted/internet/abstract.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/abstract.py,v
retrieving revision 1.5
diff -u -r1.5 abstract.py
--- twisted/internet/abstract.py	2001/08/20 04:15:35	1.5
+++ twisted/internet/abstract.py	2001/09/24 05:36:05
@@ -17,7 +17,7 @@
 
 
 # System Imports
-import types
+import types, string
 
 # Twisted Imports
 from twisted.python import threadable, log
@@ -237,6 +237,19 @@
         raise NotImplementedError(str(self.__class__)+' has no fileno method')
 
 
+
+def isIPAddress(addr):
+    parts = string.split(addr, '.')
+    if len(parts) == 4:
+        try:
+            for part in map(int, parts):
+                if not (0<=part<256):
+                    break
+            else:
+                return 1
+        except ValueError:
+                pass
+    return 0
 
 # Sibling Imports
 import main
Index: twisted/internet/main.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/main.py,v
retrieving revision 1.27
diff -u -r1.27 main.py
--- twisted/internet/main.py	2001/09/19 12:18:09	1.27
+++ twisted/internet/main.py	2001/09/24 05:46:21
@@ -50,9 +50,13 @@
         if os.name == "posix":
             self.uid = uid or os.getuid()
             self.gid = gid or os.getgid()
+        self.resolver = DummyResolver()
 
-    persistentVersion = 1
+    persistentVersion = 2
 
+    def upgradeToVersion2(self):
+        self.resolver = DummyResolver()
+
     def upgradeToVersion1(self):
         """Version 1 Persistence Upgrade
         """
@@ -161,6 +165,7 @@
     def run(self, save=1):
         """Run this application, running the main loop if necessary.
         """
+        global resolver
         if not self.running:
             threadable.dispatcher.own(self)
             delayeds.extend(self.delayeds)
@@ -174,6 +179,7 @@
                     return
             for service in self.services.values():
                 service.startService()
+            resolver = self.resolver
             self.running = 1
             threadable.dispatcher.disown(self)
         if not running:
@@ -192,6 +198,11 @@
     """
     theTimeouts.later(method, seconds)
 
+class DummyResolver:
+
+    def resolve(self, address, success, fail):
+        fail()
+
 reads = {}
 writes = {}
 running = None
@@ -199,6 +210,7 @@
 if threadable.threaded:
     delayeds.append(threadtask.theScheduler)
 shutdowns = [theTimeouts.runEverything]
+resolver = DummyResolver()
 
 def shutDown(a=None, b=None):
     """Run all shutdown callbacks (save all running Applications) and exit.
@@ -523,6 +535,7 @@
     # currentPlugins = os.path.abspath("TwistedPlugins")
     allPlugins = [systemPlugins, userPlugins, confPlugins] #, currentPlugins]
     sys.path.extend(allPlugins)
+
 
 # Sibling Import
 import process
Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.22
diff -u -r1.22 tcp.py
--- twisted/internet/tcp.py	2001/09/11 04:08:28	1.22
+++ twisted/internet/tcp.py	2001/09/24 05:46:21
@@ -28,6 +28,7 @@
 import socket
 import sys
 import traceback
+import string
 
 if os.name == 'nt':
     EWOULDBLOCK = 10035
@@ -49,7 +50,7 @@
 
 # Sibling Imports
 import abstract
-from main import CONNECTION_LOST, CONNECTION_DONE
+import main
 
 class Connection(abstract.FileDescriptor,
                  protocol.Transport,
@@ -79,9 +80,9 @@
             if se.args[0] == EWOULDBLOCK:
                 return
             else:
-                return CONNECTION_LOST
+                return main.CONNECTION_LOST
         if not data:
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
         return self.protocol.dataReceived(data)
 
     def writeSomeData(self, data):
@@ -95,7 +96,7 @@
         except socket.error, se:
             if se.args[0] == EWOULDBLOCK:
                 return 0
-            return CONNECTION_LOST
+            return main.CONNECTION_LOST
 
     def connectionLost(self):
         """See abstract.FileDescriptor.connectionLost().
@@ -145,7 +146,7 @@
         self.port = port
         Connection.__init__(self, skt, protocol)
         self.doWrite = self.doConnect
-        self.doConnect()
+        self.resolveAddress()
         self.logstr = self.protocol.__class__.__name__+",client"
 	if timeout is not None:
 	    main.addTimeout(self.failIfNotConnected, timeout)
@@ -161,13 +162,24 @@
         # factored out so as to minimise the code necessary for SecureClient
         return socket.socket(socket.AF_INET,socket.SOCK_STREAM)
 
+    def resolveAddress(self):
+        if abstract.isIPAddress(self.addr[0]):
+            self.setRealdAddress(self.addr[0])
+        else:
+            main.resolver.resolve(self.addr[0], self.setRealAddress, 
+                                                self.failIfNotConnected)
+
+    def setRealAddress(self, address):
+        self.realAddress = address
+        self.doConnect()
+
     def doConnect(self):
         """I connect the socket.
         
         Then, call the protocol's makeConnection, and start waiting for data.
         """
         try:
-            self.socket.connect(self.addr)
+            self.socket.connect((self.realAddress, self.addr[1]))
         except socket.error, se:
             if se.args[0] == EMYSTERY:
                 self.startWriting()
Index: twisted/internet/udp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/udp.py,v
retrieving revision 1.4
diff -u -r1.4 udp.py
--- twisted/internet/udp.py	2001/09/23 01:44:48	1.4
+++ twisted/internet/udp.py	2001/09/24 05:46:23
@@ -35,8 +35,7 @@
 from twisted.python import log
 
 # Sibling Imports
-import abstract
-from main import CONNECTION_LOST, CONNECTION_DONE
+import abstract, main
 
 
 class Connection(abstract.FileDescriptor,
@@ -61,12 +60,26 @@
         self.local = local
         self.sessionno = sessionno
         self.connected = 1
-        self.logstr = "%s,%s,%s (UDP)" % (self.protocol.__class__.__name__, sessionno, self.remote[0])
+        self.logstr = "%s,%s,%s (UDP)" % (self.protocol.__class__.__name__, 
+                                          sessionno, self.remote[0])
+        if abstract.isIPAddress(self.remote[0]):
+            self.realAddress = self.remote[0]
+        else:
+            self.realAddress = None
+            main.resolver.resolve(self.remote[0], self.setRealAddress,
+                                                  self.connectionLost)
+
+            
+    def setRealAddress(self, address):
+        self.realAddress = address
+        self.startWriting()
 
     def write(self,data):
         res = abstract.FileDescriptor.write(self,data)
         if not self.keepConnection:
             self.loseConnection()
+        if self.realAddress is None:
+            self.stopWriting()
         return res
 
     def writeSomeData(self, data):
@@ -81,7 +94,7 @@
             except socket.error, se:
                 if se.args[0] == EWOULDBLOCK:
                     return 0
-                return CONNECTION_LOST
+                return main.CONNECTION_LOST
         else:
             return 0
 
@@ -171,14 +184,11 @@
 
     def createConnection(self, addr):
         """Creates a virtual connection over UDP"""
-        try:
-            protocol = self.factory.buildProtocol(addr)
-            s = self.sessionno
-            self.sessionno = s+1
-            transport = Connection(self.socket.dup(), protocol, addr, self, s)
-            protocol.makeConnection(transport, self)
-        except:
-            traceback.print_exc(file=log.logfile)
+        protocol = self.factory.buildProtocol(addr)
+        s = self.sessionno
+        self.sessionno = s+1
+        transport = Connection(self.socket.dup(), protocol, addr, self, s)
+        protocol.makeConnection(transport, self)
         return transport
 
     def doRead(self):

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Mon Sep 24 07:00:43 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Sep 2001 15:00:43 +0200
Subject: [Twisted-Python] Proposed change to producer/consumer interface
Message-ID: <3BAF2E7B.30301@itamarst.org>

When a producer unregisters itself using stopConsuming() (see 
internet/abstract.py) the consumer closes itself by calling 
loseConnection(). I contend this is silly, and that the consuming 
FileDescriptor should not close itself.

This is howeever a non-backwards compatible change, so anyone using 
producers will need to update their code (though e.g. the FTP code seems to 
explicitly close the consumer.)

So - should I make this change or add a new function "unregisterProducer()" 
the unregisters the producer without closing the connection?





From lists at itamarst.org  Mon Sep 24 08:30:13 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Sep 2001 16:30:13 +0200
Subject: [Twisted-Python] Bug tracker is now live
Message-ID: <3BAF4375.3020304@itamarst.org>

http://twistedmatrix.com:9080/twisted/

Email me or glyph with a password (and an informative topic so we know what 
you're talking about) and we'll set you up an account.





From m at moshez.org  Mon Sep 24 11:18:16 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 19:18:16 +0200 (IST)
Subject: [Twisted-Python] Authorizers
Message-ID: <20010924171816.010FE3889@darjeeling>

Why is there only one authorizer per application?
I want to have an authorizer which is Factory-specific.
Rational:
Suppose you have a pb-mail toaster (like POP toaster, except users
get e-mail via pb instead of POP). The "identities" for each port
might be different, since they might be for different domains.
I want "identities" to correspond to "users" and "perspectives"
to correspond to different top-level directories (you'd have the
"inbox" perspective, the "saved-messages" perspective, etc.)

I want to be able to have a BrokerFactory-like class which has
its own authorizer. Then, in a similar way that tap.mail works
now, I'll add together with the domains, an authorizer that
knows how to authenticate from a dirdbm and finally finish
the remote-mailbox-management protocol that will kill all others.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From carmstro at twistedmatrix.com  Mon Sep 24 11:48:47 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Mon, 24 Sep 2001 13:48:47 -0400
Subject: [Twisted-Python] Authorizers
In-Reply-To: <20010924171816.010FE3889@darjeeling>
References: <20010924171816.010FE3889@darjeeling>
Message-ID: <20010924134846.A14927@Fookidla.org>

On Mon, Sep 24, 2001 at 07:18:16PM +0200, Moshe Zadka wrote:
> I want "identities" to correspond to "users" and "perspectives"
> to correspond to different top-level directories (you'd have the
> "inbox" perspective, the "saved-messages" perspective, etc.)

While I'm not qualified to answer your main question (although I've wondered
about the same thing myself), I can say that I don't really think your match
of perspectives to mail folders (or directories, whatever) really makes
sense, since there is normally only one Perspective per connection to a
service. There should probably be a "mailbox" perspective, with references
to each mail folder.

BTW, are you actually planning to have a mail-through-PB protocol, for
end-user's clients to use? That would be pretty neat, and we could kill
IMAP. =)

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From m at moshez.org  Mon Sep 24 11:52:48 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 19:52:48 +0200 (IST)
Subject: [Twisted-Python] Authorizers
In-Reply-To: <20010924134846.A14927@Fookidla.org>
References: <20010924134846.A14927@Fookidla.org>, <20010924171816.010FE3889@darjeeling>
Message-ID: <20010924175248.38EA83889@darjeeling>

On Mon, 24 Sep 2001, Chris Armstrong <carmstro at twistedmatrix.com> wrote:

> While I'm not qualified to answer your main question (although I've wondered
> about the same thing myself), I can say that I don't really think your match
> of perspectives to mail folders (or directories, whatever) really makes
> sense, since there is normally only one Perspective per connection to a
> service.

I have my reasons.

> BTW, are you actually planning to have a mail-through-PB protocol, for
> end-user's clients to use? That would be pretty neat, and we could kill
> IMAP. =)

A long-time goal of mine. And a high-quality, remote-mailbox-management
interface is long in coming.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Mon Sep 24 11:58:10 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 19:58:10 +0200 (IST)
Subject: [Twisted-Python] twisted.web inflexibility
Message-ID: <20010924175810.AE0E03889@darjeeling>

Would it be possible to have Site not overload buildProtocol
and instead just have the regular "protocol" attribute? This
way, it is possible to change an instance's "protocol" attribute
to change the HTTP request object.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Mon Sep 24 12:15:42 2001
From: m at moshez.org (Moshe Zadka)
Date: Mon, 24 Sep 2001 20:15:42 +0200 (IST)
Subject: [Twisted-Python] twisted.mail.pb
Message-ID: <20010924181542.CDD9A3889@darjeeling>

This pre-alpha module is where I'm trying to develop something
that will replace IMAP over pb

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From jasbahr at crash.org  Mon Sep 24 17:46:33 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Mon, 24 Sep 2001 18:46:33 -0500
Subject: [Twisted-Python] BoF
In-Reply-To: <3BAF4375.3020304@itamarst.org>
Message-ID: <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org>

Twisters,

I was talking to Chris about everyone getting together at IPC10,
and it dawned on me that we should schedule a Twisted Birds of 
a Feather meeting.  

J




From carmstro at twistedmatrix.com  Mon Sep 24 21:24:43 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Mon, 24 Sep 2001 23:24:43 -0400
Subject: [Twisted-Python] BoF
In-Reply-To: <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org>
References: <3BAF4375.3020304@itamarst.org> <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org>
Message-ID: <20010924232443.B15430@Fookidla.org>

Also, maybe we should see what we can do about getting a discussion into the 
Web and Protocols track.

On Mon, Sep 24, 2001 at 06:46:33PM -0500, Jason L. Asbahr wrote:
> 
> Twisters,
> 
> I was talking to Chris about everyone getting together at IPC10,
> and it dawned on me that we should schedule a Twisted Birds of 
> a Feather meeting.  
> 
> J
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From m at moshez.org  Mon Sep 24 21:58:05 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 05:58:05 +0200 (IST)
Subject: [Twisted-Python] BoF
In-Reply-To: <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org>
References: <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org>
Message-ID: <20010925035805.686343889@darjeeling>

On Mon, 24 Sep 2001, "Jason L. Asbahr" <jasbahr at crash.org> wrote:

> I was talking to Chris about everyone getting together at IPC10,
> and it dawned on me that we should schedule a Twisted Birds of 
> a Feather meeting.  

+1

You, Chris, Allen, Glyph and me are coming. Does anybody know of anyone
else? Five people may be too few.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From jasbahr at crash.org  Mon Sep 24 23:22:29 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Tue, 25 Sep 2001 00:22:29 -0500
Subject: [Twisted-Python] BoF
In-Reply-To: <20010925035805.686343889@darjeeling>
Message-ID: <EIEFLCFECLLBKGPNJJIMMEONHFAA.jasbahr@crash.org>

If we schedule it after the Twisted presentation(s), I bet
we'll have a number of new folks wanting to attend.  :-)

Jason



-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Moshe Zadka
Sent: Monday, September 24, 2001 10:58 PM
To: twisted-python at twistedmatrix.com
Cc: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] BoF


On Mon, 24 Sep 2001, "Jason L. Asbahr" <jasbahr at crash.org> wrote:

> I was talking to Chris about everyone getting together at IPC10,
> and it dawned on me that we should schedule a Twisted Birds of 
> a Feather meeting.  

+1

You, Chris, Allen, Glyph and me are coming. Does anybody know of anyone
else? Five people may be too few.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From m at moshez.org  Tue Sep 25 00:22:45 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 08:22:45 +0200 (IST)
Subject: [Twisted-Python] Naming of Names
Message-ID: <20010925062245.63075388A@darjeeling>

Hi!
I've written the following cool module to help with unit testing
and other beasts. I really want to check it in, but I want to make
sure I don't offend anyone's sensibilities. For me, this name is both
natural and descriptive, but...
(it already found two bugs in the SMTP module, by the way) 

>--------------------------------------<
class MasturbatoryRelay:

    buffer = ''
    shouldLose = 0
    log = ''

    def __init__(self, target):
        self.target = target

    def write(self, data):
        print "writing", `data`
        self.buffer = self.buffer + data

    def clearBuffer(self):
        try:
            self.target.dataReceived(self.buffer)
        finally:
            self.buffer = ''
        if self.shouldLose:
            self.target.connectionLost()

    def loseConnection(self):
        self.shouldLose = 1

def masturbate(server, client):
    serverToClient = MasturbatoryRelay(client)
    clientToServer = MasturbatoryRelay(server)
    server.makeConnection(serverToClient)
    client.makeConnection(clientToServer)
    while 1:
        serverToClient.clearBuffer()
        clientToServer.clearBuffer()
        if serverToClient.shouldLose or clientToServer.shouldLose:
            break
    return clientToServer.log 
>--------------------------------------<

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Tue Sep 25 09:43:33 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 Sep 2001 17:43:33 +0200
Subject: [Twisted-Python] Protocol handler are open to DoS attacks
Message-ID: <3BB0A625.7010106@itamarst.org>

In general, I've been noticing that the behaviour of protocol given illegal 
inputs is problematic - no length limits, and garbage is raised as part of 
exceptions.

Problem 1 leads to giant memory usage - a line receiver can receive MBs of 
MBs of data it will happily buffer until it gets a line break. The other 
problem leads to mucho garbage and exceptions in the log.

See protocols.basic.SafeNetstringReceiver to see how I solved it for 
netstrings.

You can test both things in unix - run a webserver on port 8080, then:

# send infinite data
$ yes | netcat localhost 8080

# send garbage
$ cat /dev/urandom | netcat localhost 8080





From m at moshez.org  Tue Sep 25 12:00:57 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 20:00:57 +0200 (IST)
Subject: [Twisted-Python] System Plugings
Message-ID: <20010925180057.EBCBB388C@darjeeling>

I object to placing plugins/ as a sibling for twisted/ - these
should be in something like /usr/share/twisted/plugins/.
Advice for a way to have the Debian installation append this
directory to the Python page in addDir will be met with thanks.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Tue Sep 25 12:09:37 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 20:09:37 +0200 (IST)
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
In-Reply-To: <E15lu7M-0007DH-00@zaibach.twistedmatrix.com>
References: <E15lu7M-0007DH-00@zaibach.twistedmatrix.com>
Message-ID: <20010925180937.EA318388C@darjeeling>

On Tue, 25 Sep 2001, Itamar Shtull-Trauring <itamarst at twistedmatrix.com> wrote:

> +            assert r.brokenPeer, "connection wasn't closed on illegal netstring %s" % repr(s)

Itamar, and everybody: STOP DOING THAT!!!!!!!!!!!!!!!!!!!!!!!!
Don't use "assert" in tests, since they don't operate under python -O.
Someday, we'll want to test it working ok with -O. (say, if there is some
less-then-trivial code undef "if __debug__".)
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From carmstro at twistedmatrix.com  Tue Sep 25 14:07:49 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Tue, 25 Sep 2001 15:07:49 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
In-Reply-To: <20010925180937.EA318388C@darjeeling>; from m@moshez.org on Tue, Sep 25, 2001 at 08:09:37PM +0200
References: <E15lu7M-0007DH-00@zaibach.twistedmatrix.com> <20010925180937.EA318388C@darjeeling>
Message-ID: <20010925150749.A1676@twistedmatrix.com>

I don't understand. why would you want the *tests* to be optimized? I'm
of course definitely against inappropriate asserts in real code (there are
quite a few in twisted I think), but I think asserts are appropriate for
tests (even if it's just the wording that sounds right).

On Tue, Sep 25, 2001 at 08:09:37PM +0200, Moshe Zadka wrote:
> On Tue, 25 Sep 2001, Itamar Shtull-Trauring <itamarst at twistedmatrix.com> wrote:
> 
> > +            assert r.brokenPeer, "connection wasn't closed on illegal netstring %s" % repr(s)
> 
> Itamar, and everybody: STOP DOING THAT!!!!!!!!!!!!!!!!!!!!!!!!
> Don't use "assert" in tests, since they don't operate under python -O.
> Someday, we'll want to test it working ok with -O. (say, if there is some
> less-then-trivial code undef "if __debug__".)
> -- 
> The Official Moshe Zadka FAQ: http://moshez.geek
> The Official Moshe Zadka FAQ For Dummies: http://moshez.org
> Read the FAQ
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at twistedmatrix.com  Tue Sep 25 14:25:41 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 25 Sep 2001 15:25:41 -0500
Subject: [Twisted-Python] System Plugings
In-Reply-To: <20010925180057.EBCBB388C@darjeeling>; from m@moshez.org on Tue, Sep 25, 2001 at 08:00:57PM +0200
References: <20010925180057.EBCBB388C@darjeeling>
Message-ID: <20010925152541.A360@twistedmatrix.com>

On Tue, Sep 25, 2001 at 08:00:57PM +0200, Moshe Zadka wrote:
> I object to placing plugins/ as a sibling for twisted/ - these
> should be in something like /usr/share/twisted/plugins/.
> Advice for a way to have the Debian installation append this
> directory to the Python page in addDir will be met with thanks.

I think you have a good criticism there, but we need to have a method which
does platform-specific path additions, since most platforms are vastly
different in their management of paths.  Right now, I'm thinking I want to have
/User/%s/Applications/Twisted.app/Contents/Plugins as my plugin directory...
^_^

<rant> I really hate the unix installation scheme.  The fact that Windows is
worse isn't an excuse.  Debian does a great job of covering for some really
basic deficiencies in it, but unless you're on a system with a package manager
there's no way to tell where a file came from.  The one thing that users
actually care about -- end user software, or "Application programs" -- is
basically non-existant unix environment.  There's not even a convention, let
alone a standard, for how a user would install a modified version of an
application for themselves personally.  I want Twisted to be a self-contained
directory on all systems by default, and have specific policy settings only on
those systems where an "installer" or package management system is
advantageous. </rant>

I do think Twisted should be integrated into the installation culture wherever
it goes.  However, /usr/share/twisted/plugins doesn't necessarily make sense
for system-wide installs even on debian.  (Python's maintainer flaunts policy,
why shouldn't we? ^_^)  Probably plugins will have to live under site-python,
in order that appropriate .pyc and .so files may be created (thanks to the
ever-changing bytecode specification).

The strategy that makes the most sense to me right now is just a
twisted/python/path.py which has a big if-tree that adds paths depending on the
platform you're using.  That seems icky though, so I'm open to better
suggestions.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From glyph at twistedmatrix.com  Tue Sep 25 14:38:48 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 25 Sep 2001 15:38:48 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
In-Reply-To: <20010925180937.EA318388C@darjeeling>; from m@moshez.org on Tue, Sep 25, 2001 at 08:09:37PM +0200
References: <E15lu7M-0007DH-00@zaibach.twistedmatrix.com> <20010925180937.EA318388C@darjeeling>
Message-ID: <20010925153848.B360@twistedmatrix.com>

On Tue, Sep 25, 2001 at 08:09:37PM +0200, Moshe Zadka wrote:
> On Tue, 25 Sep 2001, Itamar Shtull-Trauring <itamarst at twistedmatrix.com> wrote:
> 
> > +            assert r.brokenPeer, "connection wasn't closed on illegal netstring %s" % repr(s)
> 
> Itamar, and everybody: STOP DOING THAT!!!!!!!!!!!!!!!!!!!!!!!!
> Don't use "assert" in tests, since they don't operate under python -O.
> Someday, we'll want to test it working ok with -O. (say, if there is some
> less-then-trivial code undef "if __debug__".)

I don't think we should ever assume that Twisted will work under -O.  Does Zope?

Python's -O does change the semantics of the language and get rid of a cool
convenience syntax (albeit in a trivial manner) for an *extremely* marginal
performance boost.  Also, even if you test and test and test until you're SURE
it's perfect, and then you run your 'production code' without any testing
information available, that doesn't change the story when your 'production
code' does fail, as it inevitably will.

I am reminded of the quotefile entry:

"""
<lyn:#lisp> making things fast generally seems to involve trading space for time
<dan`b:#lisp> not so!  you're thinking like a typical lisp programer
<dan`b:#lisp> you can also trade correctness, like any self-respecting C hacker
"""

However in doing some reading before answering this message, I found out that
PyUnit has some nifty useful methods like "assertEquals" and "assertRaises"
that we should probably be using for tests anyway, so maybe the point is moot.
Those that are missing (like 'assertHasAttribute') we can probably write
ourselves.  :-)

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From m at moshez.org  Tue Sep 25 14:56:17 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 22:56:17 +0200 (IST)
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
In-Reply-To: <20010925150749.A1676@twistedmatrix.com>
References: <20010925150749.A1676@twistedmatrix.com>, <E15lu7M-0007DH-00@zaibach.twistedmatrix.com> <20010925180937.EA318388C@darjeeling>
Message-ID: <20010925205617.B05EF388C@darjeeling>

On Tue, 25 Sep 2001, Chris Armstrong <carmstro at twistedmatrix.com> wrote:

> I don't understand. why would you want the *tests* to be optimized?

Because if the code is optimized, then I want to test the code as it will
be executed in production.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Tue Sep 25 14:36:50 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 22:36:50 +0200 (IST)
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
In-Reply-To: <20010925153848.B360@twistedmatrix.com>
References: <20010925153848.B360@twistedmatrix.com>, <E15lu7M-0007DH-00@zaibach.twistedmatrix.com> <20010925180937.EA318388C@darjeeling>
Message-ID: <20010925203650.1CFCE388C@darjeeling>

On Tue, 25 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Python's -O does change the semantics of the language and get rid of a cool
> convenience syntax (albeit in a trivial manner) for an *extremely* marginal
> performance boost.

No, it gets rid of asserts, because that's what asserts are there for.
And it's not extremely marginal, either.

> Also, even if you test and test and test until you're SURE
> it's perfect, and then you run your 'production code' without any testing
> information available, that doesn't change the story when your 'production
> code' does fail, as it inevitably will.

You still have tracebacks.

> However in doing some reading before answering this message, I found out that
> PyUnit has some nifty useful methods like "assertEquals" and "assertRaises"
> that we should probably be using for tests anyway, so maybe the point is moot.

Yes.

> Those that are missing (like 'assertHasAttribute') we can probably write
> ourselves.  :-)

Yes again. And contribute upstream, too.

> ______      you are in a maze of twisted little applications, all
> |   |_\     remarkably consistent.

Way cool sig.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Tue Sep 25 14:49:34 2001
From: m at moshez.org (Moshe Zadka)
Date: Tue, 25 Sep 2001 22:49:34 +0200 (IST)
Subject: [Twisted-Python] System Plugings
In-Reply-To: <20010925152541.A360@twistedmatrix.com>
References: <20010925152541.A360@twistedmatrix.com>, <20010925180057.EBCBB388C@darjeeling>
Message-ID: <20010925204934.5FAB9388C@darjeeling>

On Tue, 25 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:


> I think you have a good criticism there, but we need to have a method which
> does platform-specific path additions

Yes.
How about a global configuration file?
The "system" parameters can be in twisted.config, which will be a sane
default for installation, contain just variable assignment, and expected
to be rewritten in any installer?

> , since most platforms are vastly
> different in their management of paths.

Hence my limitation for "Debian-specific". 
I note I do not want to put such things in the .diff.gz. Ideally,
I'd like the .diff.gz to be empty.

> Right now, I'm thinking I want to have
> /User/%s/Applications/Twisted.app/Contents/Plugins as my plugin directory...
> ^_^

Cool ;-)

> <rant> I really hate the unix installation scheme.

No, what you hate is that UNIX sucks, not the standards. If UNIX could
have a "private view of the filesystem", there'd be no /home, no dot-files
(just change the /etc/whatever in "your" filesystem) and dead easy package
management.
 
>  The fact that Windows is
> worse isn't an excuse.

"Windows' biggest crime is that they made UNIX look like a good operating
system. UNIX's biggest crime is that it made Windows look user-friendly"
-- Me

> Debian does a great job of covering for some really
> basic deficiencies in it, but unless you're on a system with a package manager
> there's no way to tell where a file came from.

Yep. You should read DJB's stuff.

> I want Twisted to be a self-contained
> directory on all systems by default, and have specific policy settings only on
> those systems where an "installer" or package management system is
> advantageous. </rant>

You won't here a peep from me about such policy. Mostly because the only
system I care about falls within your exception ;-)

> I do think Twisted should be integrated into the installation culture wherever
> it goes.  However, /usr/share/twisted/plugins doesn't necessarily make sense
> for system-wide installs even on debian.  (Python's maintainer flaunts policy,
> why shouldn't we? ^_^)  Probably plugins will have to live under site-python,
> in order that appropriate .pyc and .so files may be created (thanks to the
> ever-changing bytecode specification).

Living under site-python won't help that. Trust me on that -- it will only
make things worse for no good use. (I've sat on the debian-python list
for that information. I had looong discussions with co-developers.)

> The strategy that makes the most sense to me right now is just a
> twisted/python/path.py which has a big if-tree that adds paths depending on 
> the
> platform you're using.  That seems icky though, so I'm open to better
> suggestions.

Well, I can assure you that if that happens, debian/rules first job will
be to rewrite twisted/python/path.py into one line ;-)
Which is why I want it to be one line in the first place ;-)
The installer-builder will rewrite it anyway, and the developer won't mind
turning on an environment variable.

Also see the way mailman handles configuration.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From m at moshez.org  Tue Sep 25 17:05:08 2001
From: m at moshez.org (Moshe Zadka)
Date: Wed, 26 Sep 2001 01:05:08 +0200 (IST)
Subject: [Twisted-Python] Seperate Out pb.Broker.expressionReceived
Message-ID: <20010925230508.7C481388C@darjeeling>

Can pb.Broker inherit from pb.Protocol which will inherit from
banana.Banana? I want to use just the proto_ stuff without out
all the authorizer stuff in the way.

Currently, I'll just copy.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From grolgh at online.no  Tue Sep 25 21:11:56 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Wed, 26 Sep 2001 05:11:56 +0200
Subject: [Twisted-Python] System Plugings
References: <20010925180057.EBCBB388C@darjeeling> <20010925152541.A360@twistedmatrix.com>
Message-ID: <004101c14639$0049c7c0$66aed9c1@phed>

Hepp,

> different in their management of paths.  Right now, I'm thinking I want to have
> /User/%s/Applications/Twisted.app/Contents/Plugins as my plugin directory...
> ^_^

Yes, this looks nice. However, for windows it should be managed relative to the /<my-documents-folder-internationalized>/. There's some user-specific semantic under windows I have yet to discover though. I wonder, does python have any simple cross-platform ways of filling this gap? Windows 2k and XP does show signs on how this conformity should work (No write access outside shared and private folders).

And now; me playing "luser":
A few silly questions, which may contain sever misunderstandings on pb & identities since I have worked just with single-server principles etc etc. Think 'user': can a identity itself be spread across servers? can a identity be intertwined with an other unknown user because of this?
Maybe I have misunderstood the main point with identities, but I thought they would be a 'by-perspective'-revealed object which could be interchanged between servers upon request (by time). Somebody ought to write a doc on terms used in pb. The extreme potentials for pb (and it siblings) is in my mind 'ungraspable' atm, and they can't be that sick.

// phed (user since 1996)






From moshez at zadka.com  Wed Sep 26 04:29:12 2001
From: moshez at zadka.com (Moshe Zadka)
Date: 26 Sep 2001 10:29:12 -0000
Subject: [Twisted-Python] Blocking
Message-ID: <20010926102912.21382.qmail@green.zadka.com>

Hi!
I whipped up the following to help regular client applications use
pb even if they are written in a linear manner.

class _Blocker:

    callbackName = 'callback'
    errbackName = 'errback'

    def __init__(self, method, args, kw):
        self.method = method
	self.args = args
	self.kw = kw

    def callback(self, value):
        self.state = 1
        self.value = value
	main.shutDown()

    def errback(self, value=None):
        self.state = 0
	self.value = value
	main.shutDown()

    def block(self):
        kw = self.kw.copy()
	kw[self.callbackName] = self.callback
	kw[self.errbackName] = self.errback
        apply(self.method, args, kw)
	main.run()
	if self.state:
	    return self.value
        raise BlockingError, self.value

def block(method, *args, **kw):
    return _Blocker(method, args, kw).block()

Any feedback? 




From lists at itamarst.org  Wed Sep 26 08:05:47 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Sep 2001 16:05:47 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_protocols.py,1.6,1.7
References: <20010925150749.A1676@twistedmatrix.com>, <E15lu7M-0007DH-00@zaibach.twistedmatrix.com> <20010925180937.EA318388C@darjeeling> <20010925205617.B05EF388C@darjeeling>
Message-ID: <3BB1E0BB.2060306@itamarst.org>

I agree with Moshe, asserts should not be used for test code and twisted 
should run correctly in -O mode (which AFICT it does).

In order to support this, places where "assert 0" is used for failure 
should be replaced with "raise RuntimeError".





From lists at itamarst.org  Wed Sep 26 09:18:53 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Sep 2001 17:18:53 +0200
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
Message-ID: <3BB1F1DD.8090206@itamarst.org>

We have *got* to support this protocol:

<http://community.roxen.com/developers/idocs/rfc/rfc3091.html>





From lists at itamarst.org  Wed Sep 26 09:51:52 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Sep 2001 17:51:52 +0200
Subject: [Twisted-Python] This might be interesting
Message-ID: <3BB1F998.9050300@itamarst.org>

<http://web.lfw.org/python/delegate.py>





From carmstro at twistedmatrix.com  Wed Sep 26 12:01:18 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Wed, 26 Sep 2001 14:01:18 -0400
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
In-Reply-To: <3BB1F1DD.8090206@itamarst.org>
References: <3BB1F1DD.8090206@itamarst.org>
Message-ID: <20010926140118.A16802@Fookidla.org>

 As almost every secure Internet protocol requires a highly accurate value
 of Pi in order to function correctly, it is imperative that clients only
 use a trusted PIgen server. The imminent collapse of the Internet is
 assured if this guideline is not strictly followed.

Hilarious. =)

On Wed, Sep 26, 2001 at 05:18:53PM +0200, Itamar Shtull-Trauring wrote:
> We have *got* to support this protocol:
> 
> <http://community.roxen.com/developers/idocs/rfc/rfc3091.html>
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From lists at itamarst.org  Wed Sep 26 16:01:53 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 27 Sep 2001 00:01:53 +0200
Subject: [Twisted-Python] Anon CVS
Message-ID: <3BB25051.5040601@itamarst.org>

A few days ago glyph gave in and said he'd set up anonymous CVS and that 
viewcvs could be setup. So bug him till he does :)





From carmstro at twistedmatrix.com  Wed Sep 26 22:00:30 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Thu, 27 Sep 2001 00:00:30 -0400
Subject: [Twisted-Python] Bug tracker is now live
In-Reply-To: <3BAF4375.3020304@itamarst.org>
References: <3BAF4375.3020304@itamarst.org>
Message-ID: <20010927000030.A17364@Fookidla.org>

Ok, how is it recommended we use this thing? Should it be used strickly
for bugs, for wishlist items, todo list?

On Mon, Sep 24, 2001 at 04:30:13PM +0200, Itamar Shtull-Trauring wrote:
> http://twistedmatrix.com:9080/twisted/
> 
> Email me or glyph with a password (and an informative topic so we know what 
> you're talking about) and we'll set you up an account.
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From tv at twistedmatrix.com  Thu Sep 27 01:17:07 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 27 Sep 2001 10:17:07 +0300
Subject: [Twisted-Python] Union mounts
In-Reply-To: <20010925204934.5FAB9388C@darjeeling>
References: <20010925152541.A360@twistedmatrix.com>
	<20010925180057.EBCBB388C@darjeeling>
	<20010925204934.5FAB9388C@darjeeling>
Message-ID: <87k7ylksr0.fsf_-_@ki.yok.utu.fi>

Moshe Zadka <m at moshez.org> writes:

> No, what you hate is that UNIX sucks, not the standards. If UNIX could
> have a "private view of the filesystem", there'd be no /home, no dot-files
> (just change the /etc/whatever in "your" filesystem) and dead easy package
> management.

	You want to offer free time, money and other gifts to Al Viro.
        He's working on exactly that for Linux.

        Oh, and he happens to need testers for his patches.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}




From carmstro at twistedmatrix.com  Thu Sep 27 11:40:55 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Thu, 27 Sep 2001 12:40:55 -0500
Subject: [Twisted-Python] connectionLost patch
Message-ID: <20010927124055.A12284@twistedmatrix.com>

I patched connectionLost in server.request to call 'connectionLost' on
resources if they have it. This is not a very good patch, and a bad
solution, I think, but redoz wanted it for some functionality he needed
in a streaming chat web thingy.

Any ideas on a better solution for disconnect notification? should this just
stay a third party feature?


-------------- next part --------------
Index: server.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/server.py,v
retrieving revision 1.16
diff -u -r1.16 server.py
--- server.py	2001/09/08 11:08:13	1.16
+++ server.py	2001/09/25 20:52:10
@@ -144,6 +144,20 @@
 
     _host = socket.gethostbyaddr(socket.gethostname())[0]
 
+    def connectionLost(self):
+        log.msg("%s's connection was lost" % self)
+        try:
+            self.prepath = []
+            self.postpath = string.split(self.path[1:], '/')
+            resrc = self.site.getResourceFor(self)
+            if hasattr(resrc, "connectionLost"):
+                resrc.connectionLost(self)
+        except:
+            io = StringIO()
+            traceback.print_exc(file=io)
+            log.msg("Unkown error during connectionLost :-(\n%s" % io.getvalue())
+            http.HTTP.connectionLost(self)
+
     def process(self):
         "Process a request."
         # Log the request to a file.

From carmstro at twistedmatrix.com  Thu Sep 27 11:54:09 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Thu, 27 Sep 2001 12:54:09 -0500
Subject: [Twisted-Python] connectionLost patch
In-Reply-To: <20010927124055.A12284@twistedmatrix.com>; from carmstro@twistedmatrix.com on Thu, Sep 27, 2001 at 12:40:55PM -0500
References: <20010927124055.A12284@twistedmatrix.com>
Message-ID: <20010927125409.A18597@twistedmatrix.com>

oops. I swear I tested this thing. That "StringIO()" should be
"StringIO.StringIO()". bitrot from tuesday. =)

On Thu, Sep 27, 2001 at 12:40:55PM -0500, Chris Armstrong wrote:
> I patched connectionLost in server.request to call 'connectionLost' on
> resources if they have it. This is not a very good patch, and a bad
> solution, I think, but redoz wanted it for some functionality he needed
> in a streaming chat web thingy.
> 
> Any ideas on a better solution for disconnect notification? should this just
> stay a third party feature?
> 
> 

> Index: server.py
> ===================================================================
> RCS file: /cvs/Twisted/twisted/web/server.py,v
> retrieving revision 1.16
> diff -u -r1.16 server.py
> --- server.py	2001/09/08 11:08:13	1.16
> +++ server.py	2001/09/25 20:52:10
> @@ -144,6 +144,20 @@
>  
>      _host = socket.gethostbyaddr(socket.gethostname())[0]
>  
> +    def connectionLost(self):
> +        log.msg("%s's connection was lost" % self)
> +        try:
> +            self.prepath = []
> +            self.postpath = string.split(self.path[1:], '/')
> +            resrc = self.site.getResourceFor(self)
> +            if hasattr(resrc, "connectionLost"):
> +                resrc.connectionLost(self)
> +        except:
> +            io = StringIO()
> +            traceback.print_exc(file=io)
> +            log.msg("Unkown error during connectionLost :-(\n%s" % io.getvalue())
> +            http.HTTP.connectionLost(self)
> +
>      def process(self):
>          "Process a request."
>          # Log the request to a file.





From m at moshez.org  Fri Sep 28 04:35:53 2001
From: m at moshez.org (Moshe Zadka)
Date: Fri, 28 Sep 2001 12:35:53 +0200 (IST)
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
In-Reply-To: <3BB1F1DD.8090206@itamarst.org>
References: <3BB1F1DD.8090206@itamarst.org>
Message-ID: <20010928103553.5A222388A@darjeeling>

On Wed, 26 Sep 2001, Itamar Shtull-Trauring <lists at itamarst.org> wrote:

> We have *got* to support this protocol:
> 
> <http://community.roxen.com/developers/idocs/rfc/rfc3091.html>

This isn't a joke.
I feel that there are significat problems with the protocol/transport
communication that make implementation of something like this needlessly
hard. Specifically, I want the protocol to be notified if doWrite() was
called when the buffer is empty, and for the protocol to notify the
transport that it always "wants to write".
 
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From glyph at twistedmatrix.com  Fri Sep 28 04:52:02 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 28 Sep 2001 05:52:02 -0500
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
In-Reply-To: <20010928103553.5A222388A@darjeeling>
Message-ID: <E15mvQ7-00083t-00@zaibach.twistedmatrix.com>

On Friday, September 28, 2001, at 05:35 AM, Moshe Zadka wrote:

> On Wed, 26 Sep 2001, Itamar Shtull-Trauring <lists at itamarst.org> wrote:
> This isn't a joke.
> I feel that there are significat problems with the protocol/transport
> communication that make implementation of something like this needlessly
> hard. Specifically, I want the protocol to be notified if doWrite() was
> called when the buffer is empty, and for the protocol to notify the
> transport that it always "wants to write".

That's what the Producer mechanism is for.  You can also have your 
protocol be your producer, if you want.  What's the problem with that?  
Is this just a documentation issue or is there something I'm missing?

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From lists at itamarst.org  Fri Sep 28 05:08:45 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 28 Sep 2001 13:08:45 +0200
Subject: [Twisted-Python] Bug tracker is now live
References: <3BAF4375.3020304@itamarst.org> <20010927000030.A17364@Fookidla.org>
Message-ID: <3BB45A3D.3010800@itamarst.org>

Chris Armstrong wrote:

> Ok, how is it recommended we use this thing? Should it be used strickly
> for bugs, for wishlist items, todo list?

At the very least bugs that you don't have the time to fix in the near 
future (e.g. I just added the fact that lynx and w3m don't work with 
twisted.web.)






From carmstro at twistedmatrix.com  Fri Sep 28 06:27:27 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 28 Sep 2001 07:27:27 -0500
Subject: [Twisted-Python] Bug tracker is now live
In-Reply-To: <3BB45A3D.3010800@itamarst.org>; from lists@itamarst.org on Fri, Sep 28, 2001 at 01:08:45PM +0200
References: <3BAF4375.3020304@itamarst.org> <20010927000030.A17364@Fookidla.org> <3BB45A3D.3010800@itamarst.org>
Message-ID: <20010928072727.A9741@twistedmatrix.com>

Yeah, I just saw that. When I use lynx on zaibach I can view
http://twistedmatrix.com just fine.. Oh, and btw, remember that the bug
tracker is password-protected. most of the people in #python can't go to the
URL in the topic =)

On Fri, Sep 28, 2001 at 01:08:45PM +0200, Itamar Shtull-Trauring wrote:
> Chris Armstrong wrote:
> 
> > Ok, how is it recommended we use this thing? Should it be used strickly
> > for bugs, for wishlist items, todo list?
> 
> At the very least bugs that you don't have the time to fix in the near 
> future (e.g. I just added the fact that lynx and w3m don't work with 
> twisted.web.)
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From carmstro at twistedmatrix.com  Fri Sep 28 10:13:10 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 28 Sep 2001 11:13:10 -0500
Subject: [Twisted-Python] This is Reality: The Next Generation.
Message-ID: <20010928111310.A19740@twistedmatrix.com>

Hello, all. Jason Asbahr and I have been collaborating and discussing
simulation systems, especially (my interest) a spatial/graphical MMPG
system. We've decided the best route to follow right now is to refactor
twisted.reality into a Simulation Base and a Text Simulation. We will
also create a Spatial Simulation down the road.

All of you who are interested in Reality should be perking your ears
up right now =). Reality's been stagnant for a while, not seeing any
real development, until now. Hopefully this will make Reality a better
product in the end.

As some of you may know, Jason's got experience in this field, and I'm
pretty excited that he's helping us with this. My dream for this project is
to be The Open Source Sim Engine, and it just may come about, eventually. =)
Anyway, Jason has an article that he's been working on for a while, that
he'd like to publish to Linux Journal (and maybe other places) in the near
future. It'll be about Simulation environments, and specifically deal with
Twisted. He told me he'll be posting it to the list after he works it over a
little bit more, to get everyone's reactions. It'd be great if everyone
would give a few words about it. Thanks. =)

Discussion/documentation on the new MMPG system is on the pound-python wiki.
Let's try to keep ideas and discussion about the MMPG system in general
there, instead of here on the mailling list. Actual technical things
involving Twisted can stay on the ML. Thanks! Oh yeah, the URL --
http://purl.org/wiki/python/OpenMmpg =)

Thanks all. If you're interested, give a holler. =)
--
Chris Armstrong




From kthangavelu at earthlink.net  Fri Sep 28 04:12:01 2001
From: kthangavelu at earthlink.net (kapil thangavelu)
Date: Fri, 28 Sep 2001 03:12:01 -0700
Subject: [Twisted-Python] BoF
In-Reply-To: <20010925035805.686343889@darjeeling>
References: <EIEFLCFECLLBKGPNJJIMIEOKHFAA.jasbahr@crash.org> <20010925035805.686343889@darjeeling>
Message-ID: <200109281703.f8SH3B0172782@pimout4-int.prodigy.net>

On Monday 24 September 2001 08:58 pm, you wrote:

> You, Chris, Allen, Glyph and me are coming. Does anybody know of anyone
> else? Five people may be too few.

i'll be there.

kapil




From m at moshez.org  Sat Sep 29 03:37:20 2001
From: m at moshez.org (Moshe Zadka)
Date: Sat, 29 Sep 2001 11:37:20 +0200 (IST)
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
In-Reply-To: <E15mvQ7-00083t-00@zaibach.twistedmatrix.com>
References: <E15mvQ7-00083t-00@zaibach.twistedmatrix.com>
Message-ID: <20010929093720.9A135388C@darjeeling>

On Fri, 28 Sep 2001, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> That's what the Producer mechanism is for.  You can also have your 
> protocol be your producer, if you want.  What's the problem with that?  
> Is this just a documentation issue or is there something I'm missing?

I can't be sure. Document it, I'll try and implement the RFC, and I'll
see if there is something missing...

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From lists at itamarst.org  Sat Sep 29 05:34:03 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 29 Sep 2001 13:34:03 +0200
Subject: [Twisted-Python] Roxen Community: RFC 3091 Pi Digit Generation Protocol (Informational)
References: <E15mvQ7-00083t-00@zaibach.twistedmatrix.com> <20010929093720.9A135388C@darjeeling>
Message-ID: <3BB5B1AB.8040909@itamarst.org>

Moshe Zadka wrote:


> I can't be sure. Document it, I'll try and implement the RFC, and I'll
> see if there is something missing...

I think you just need to self.registerProducer(self, 0), and then every 
time the protocol needs data it will call self.resumeProducing(). The 
docstrings in abstract.FileDescriptor are pretty good.





From m at moshez.org  Sat Sep 29 10:29:46 2001
From: m at moshez.org (Moshe Zadka)
Date: Sat, 29 Sep 2001 18:29:46 +0200 (IST)
Subject: [Twisted-Python] Curses
Message-ID: <20010929162946.63E8D38CD@darjeeling>

As the last living dinosaur, I've written a curses module:
it's at http://moshez.org/tcurses.py

Here is an example usage program:

>---------------------------------------------<
from twisted.internet import main
from twisted.python import delay, log
import tcurses
import curses

log.startLogging(open("twistd.log", "ab+"))

screen = tcurses.Screen()
protocol = tcurses.WindowProtocol()
window = tcurses.LineInput(15, 0, 79)
protocol.addWindow(window)
screen.setProtocol(protocol)

app = main.Application("curses-demo")
app.addPort(screen)
app.run()
>------------------------------------------------<

I know it's not exactly a "port", but it's sure close enough in the
Twisted scheme of things (IOW, it's got startListening ;-)
(and yes, I know LineInput could use a *lot* of work. But it's pretty
cool regardless)
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From jason at crash.org  Sun Sep 30 08:59:44 2001
From: jason at crash.org (Jason L. Asbahr)
Date: Sun, 30 Sep 2001 09:59:44 -0500
Subject: [Twisted-Python] Hacking Reality
Message-ID: <EIEFLCFECLLBKGPNJJIMKEFMHGAA.jason@crash.org>

Greetings, Twisted folks,

As Chris mentioned, Reality is about to undergo some refactoring.  
If you are interested in this process, drop a line.  Perhaps a new
reality-dev list at twistedmatrix.com is in order.

For those of you I haven't met yet, I'm a game developer and serious
Python addict.  I've committed a large portion of my adult life 
working toward the growth and development of virtual worlds.  My 
current project is the culmination of many years of work.  

The specific game design I'm working on is called "Netsu" (which is
Japanese for "heat" or "fever").  It's an anime-inspired world which
incorporates multiple perspectives of play and a reputation network
for players to self-organize.  It's going to be fun.  :-)

As I develop use cases and other design documentation for Netsu, I
intend to keep them as portable as possible between gaming systems, 
so that they can benefit the most people.  I anticipate this work
feeding back into Twisted Reality, expanding it to be a more general
simulation framework.

And now a little history...  

The genesis of the project began with my work on virtual reality
systems in the early 90's.  I developed virtual building 
walkthroughs for architects, VR games, and created the first 
hardware accelerated PC-based virtual actor system for Compaq.  

This work was all done with C and C++, and it was during this 
period that I realized the need for a dynamic and interactive 
way to "reach inside" the simulation and manipulate it.  And 
that's how I first became acquainted with Python.  :-)

The next major phase was to build a 3D client engine with Python 
embedded as a control language.  The fruits of that effort are 
described in the paper I presented at Python 7, "Beyond: A Portable 
Virtual World Simulation Framework".   (This was also the first 
mention of 'Netsu'.)

In 1998, the next phase of development took a turn when I was 
recruited into Origin Systems to work on developing the Python 
foundation for the Ultima Online 2 project.  The focus during the 
period was on innovation on the server side and on client-server 
communication.  The results of that labor are described in another 
paper presented at Python 9, "Python for Massively Multiplayer 
Virtual Worlds".  

[ Both papers at: http://www.asbahr.com/papers.html ]

To this point, the software developed was all closed source.  The
desire for an open source virtual world system was lurking in my 
head, but it wasn't until the O'Reilly Open Source conference in 
2000 that my plan for the open source virtual world crystallized. 

[ The notes made during that period have evolved into the Linux 
Journal article which I'll share with you shortly. ]

At the 2001 O'Reilly conference, while presenting on the UO2 design 
work, I took the opportunity to discuss my plans for the future 
open source virtual world system.  The response was extremely 
positive, which included the invitation to write the LJ article 
on the subject.  :-)

Currently, I'm working on combining a number of existing open 
source technologies to build the new virtual world system.  
These include the 'Nebula Device' 3D engine from Germany on 
the client side, the Twisted framework for server-side and 
client-server communication, and the OpenCyc knowledge base 
as server-side archetype repository and artificial intelligence
server.  

Glyph and I have been meeting periodically over the last few 
months to discuss these issues, which intersect nicely with his
long term plans for gaming.  I've also been meeting with the 
Cycorp folks (who happen to be just down the road from me) to 
discuss integrating Cyc and driving Python class generation 
from Cyc.  I'm in the process of integrating Python into the 
Nebula Device, which will be quickly followed by integrating 
PB and making Nebula one of the first 3D clients for Twisted.  
(Yay!)  

Recently, Chris and I began to share some thoughts.  As I 
mentioned to him, after I wrap up my current consulting project
(porting Python to the Playstation 2 and developing a GUI for
designers to build Python logic), I'm devoting 100% of my time 
to Netsu and open source development.

I am committed to delivering the next generation open source 
virtual world framework for gaming, education, simulation, and
training.  It is my hope that this collaborative approach for 
virtual world simulation grows, spreading the Twisted word and
providing a foundation to help other developers achieve their 
own goals.  

Join us!  :-)

Cheers,

Jason




From lists at itamarst.org  Sun Sep 30 10:01:29 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Sep 2001 18:01:29 +0200
Subject: [Twisted-Python] NBIO: Java Non-blocking I/O Library
Message-ID: <3BB741D9.5060506@itamarst.org>

<http://www.cs.berkeley.edu/~mdw/proj/java-nbio/#copyright>





From lists at itamarst.org  Sun Sep 30 10:14:38 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Sep 2001 18:14:38 +0200
Subject: [Twisted-Python] Earthweb Networking and Communications: Java: Simulating select() in Java
Message-ID: <3BB744EE.9060703@itamarst.org>

<http://softwaredev.earthweb.com/java/article/0,,12082_626271,00.html>





From lists at itamarst.org  Sun Sep 30 10:38:32 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 Sep 2001 18:38:32 +0200
Subject: [Twisted-Python] Two Zope proposals that may be relevant someday
Message-ID: <3BB74A88.9050509@itamarst.org>

http://dev.zope.org/Wikis/DevSite/Proposals/ToleratingHangsAndLeaks
http://dev.zope.org/Wikis/DevSite/Proposals/ExtendedForensicLogging





From carmstro at twistedmatrix.com  Sun Sep 30 11:45:56 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Sun, 30 Sep 2001 13:45:56 -0400
Subject: [Twisted-Python] NBIO: Java Non-blocking I/O Library
In-Reply-To: <3BB741D9.5060506@itamarst.org>
References: <3BB741D9.5060506@itamarst.org>
Message-ID: <20010930134556.A19941@Fookidla.org>

On Sun, Sep 30, 2001 at 06:01:29PM +0200, Itamar Shtull-Trauring wrote:
> 
> <http://www.cs.berkeley.edu/~mdw/proj/java-nbio/#copyright>

Welp, guess Glyph is going to have start hacking Java again, to get this
working under win32.

*runs away after unleashing the beast*

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From mattcampbell at pobox.com  Sun Sep 30 12:20:56 2001
From: mattcampbell at pobox.com (Matt Campbell)
Date: Sun, 30 Sep 2001 13:20:56 -0500
Subject: [Twisted-Python] Questions about twisted.python.delay.Delayed
Message-ID: <20010930132056.A4019@mattcamp.dyn.dhs.org>

Hello,

I'm a relatively new user of Twisted (started using it in late August
to write a custom server), and I have a few questions about the
twisted.python.delay.Delayed class.

1.  Why does Delayed measure time in units of five-second ticks by
default?

2.  Why is Delayed.run() called every five seconds or so even when there
are no delayed tasks scheduled?  Wouldn't the process's CPU usage be
slightly lower if Delayed.timeout() returned None when the queue is empty?

3.  What is the recommended way to specify, for example, that a function
should be called approximately 30 seconds from now?  Should I pass 6 as
the number of ticks to Delayed.later(), or is there a better way to do it?

Thank you.
-- 
Matt Campbell <http://www.pobox.com/~mattcampbell/>




From m at moshez.org  Sun Sep 30 12:31:51 2001
From: m at moshez.org (Moshe Zadka)
Date: Sun, 30 Sep 2001 20:31:51 +0200 (IST)
Subject: [Twisted-Python] Questions about twisted.python.delay.Delayed
In-Reply-To: <20010930132056.A4019@mattcamp.dyn.dhs.org>
References: <20010930132056.A4019@mattcamp.dyn.dhs.org>
Message-ID: <20010930183151.33805388A@darjeeling>

On Sun, 30 Sep 2001, Matt Campbell <mattcampbell at pobox.com> wrote:

> 1.  Why does Delayed measure time in units of five-second ticks by
> default?

Why does it matter? In general, I create my own, 1-second-tick,
delayeds.

> 3.  What is the recommended way to specify, for example, that a function
> should be called approximately 30 seconds from now?  Should I pass 6 as
> the number of ticks to Delayed.later(), or is there a better way to do it?

Depends on the tick time. main.theTimeouts's ticktime is 1.
-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From glyph at twistedmatrix.com  Sun Sep 30 16:10:04 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 30 Sep 2001 17:10:04 -0500
Subject: [Twisted-Python] NBIO: Java Non-blocking I/O Library
In-Reply-To: <3BB741D9.5060506@itamarst.org>
Message-ID: <E15noxX-0001YF-00@zaibach.twistedmatrix.com>

I've seen it, but I don't think it's really worthwhile to cooperate with 
it at this point.  As he says...

>> "The recently-announced JDK 1.4 beta includes the package java.nio 
>> which, among other things, provides nonblocking I/O primitives for 
>> Java. As it turns out I am on the expert group for the Sun Java 
>> Specification Request for this package (see this link for more 
>> details). More details on this new API can be found at this URL; as 
>> you can see, java.nio has been influenced somewhat by the NBIO APIs."
>>

On Sunday, September 30, 2001, at 11:01  AM, Itamar Shtull-Trauring 
wrote:

> <http://www.cs.berkeley.edu/~mdw/proj/java-nbio/#copyright>
--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From glyph at twistedmatrix.com  Sun Sep 30 16:34:59 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 30 Sep 2001 17:34:59 -0500
Subject: [Twisted-Python] Questions about twisted.python.delay.Delayed
In-Reply-To: <20010930132056.A4019@mattcamp.dyn.dhs.org>
Message-ID: <E15npLe-0001cF-00@zaibach.twistedmatrix.com>

On Sunday, September 30, 2001, at 01:20  PM, Matt Campbell wrote:

> I'm a relatively new user of Twisted (started using it in late August
> to write a custom server), and I have a few questions about the
> twisted.python.delay.Delayed class.

Welcome to the club!

> 1.  Why does Delayed measure time in units of five-second ticks by
> default?

To highlight the fact that tick-time is not the same thing as 
real-time.  It's adjustable.

> 2.  Why is Delayed.run() called every five seconds or so even when there
> are no delayed tasks scheduled?  Wouldn't the process's CPU usage be
> slightly lower if Delayed.timeout() returned None when the queue is 
> empty?

A Delayed is a simulation, which is advancing through time at some 
multipler of real time.  I originally intended that other kinds of 
scheduled callbacks would work differently, but it so happens that 
Delayed works really fulfill that whole requirement.

Your optimization sounds like a good idea, though.

> 3.  What is the recommended way to specify, for example, that a function
> should be called approximately 30 seconds from now?  Should I pass 6 as
> the number of ticks to Delayed.later(), or is there a better way to do 
> it?

You should create your own Delayed for processing whatever type of 
events these are, and give it an appropriate ticktime.  If you have an 
event that happens every 30 seconds, make the ticktime 30, and use 
Delayed.loop with an argument of 1 to kick off your callback.

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




