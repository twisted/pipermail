From therve at free.fr  Mon Feb  1 03:13:40 2010
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Mon, 01 Feb 2010 09:13:40 +0100
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
Message-ID: <1265012020.2695.4.camel@brainwave>

Le dimanche 31 janvier 2010 ? 22:26 +0000, exarkun at twistedmatrix.com a
?crit :
> Hi all,
> 
> If there are enough interested people, there will be a Twisted sprint at 
> PyCon this year.  If you'll be at PyCon and are interested in sprinting 
> on some Twisted topic, give a shout.  Also, let us know what specific 
> topics you're interested in so we can let other people know what to 
> expect in the general announcement.

I'll be there until Wednesday afternoon. I'm interested in web client,
wsgi container, websocket support, inotify...

-- 
Thomas



From landreville at deadtreepages.com  Mon Feb  1 10:24:07 2010
From: landreville at deadtreepages.com (Landreville)
Date: Mon, 1 Feb 2010 10:24:07 -0500
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <20100130071601.GC2456@steerpike.home.puzzling.org>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<19298.5040.965899.805489@jon.es>
	<20100129101722.GX23607@ruber.office.udmvt.ru>
	<20100130071601.GC2456@steerpike.home.puzzling.org>
Message-ID: <9d748c781002010724p15d96b6fk32df6bab047c736e@mail.gmail.com>

On Sat, Jan 30, 2010 at 2:16 AM, Andrew Bennetts <andrew at bemusement.org> wrote:
> twisted-web at udmvt.ru wrote:
> [...]
>> Is it true, that adding many callback functions as filters is elegant,
>> but impractical solution?
>> Since there is only a [linear] list of pairs (callback, errback), the last errbacks
>> have to be complex to distinguish the failures, that came from the previous callback
>> from failures, that traverse the errback chain from the beginning.
>
> This is no different to regular Python code, which has a linear call stack which
> can have exception handlers at any point on the stack. ?The exact same tradeoffs
> apply about which exceptions to raise and which to catch, and at what points.
>
> -Andrew.
>

In normal python code you might put each filter into a try/except
block, wouldn't this be equivalent to putting a callback and errback
(addCallbacks) each time you are adding a callback. So that the
errback would then know which callback (the previous one) failed.


From kevin.horn at gmail.com  Mon Feb  1 11:14:05 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 1 Feb 2010 10:14:05 -0600
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
Message-ID: <562bcc11002010814p28e5da6drb3e8f34fcede47b2@mail.gmail.com>

On Sun, Jan 31, 2010 at 4:26 PM, <exarkun at twistedmatrix.com> wrote:

> Hi all,
>
> If there are enough interested people, there will be a Twisted sprint at
> PyCon this year.  If you'll be at PyCon and are interested in sprinting
> on some Twisted topic, give a shout.  Also, let us know what specific
> topics you're interested in so we can let other people know what to
> expect in the general announcement.
>
> Jean-Paul
>
>
I plan on being around for most of the first day of sprints (22nd).  I'd be
interested in most of the topics listed above, but also getting the Generic
SASL support working, as well as stdio/console support on Win32.

And of course, getting the Twisted Docs transitioned to Sphinx.
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100201/3b7d8ccb/attachment.htm 

From terry at jon.es  Mon Feb  1 19:13:39 2010
From: terry at jon.es (Terry Jones)
Date: Mon, 1 Feb 2010 19:13:39 -0500
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: Your message at 14:17:22 on Friday, 29 January 2010
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<19298.5040.965899.805489@jon.es>
	<20100129101722.GX23607@ruber.office.udmvt.ru>
Message-ID: <19303.28211.344816.837753@jon.es>

>>>>> "Alexey" == twisted-web  <twisted-web at udmvt.ru> writes:

Alexey> Is it true, that adding many callback functions as filters is
Alexey> elegant, but impractical solution?

Many callbacks as a filter is elegant & practical.

But there's a difference with errbacks, as people are touching on. That's,
with a bit of hand-waving, because when things are going right there's only
one thing happening - you're in the middle of a computation figuring out
the single result. With errors though, there are multiple types of errors,
many ways of dealing with them, multiple different possible outcomes when
an error occurs.

So the callback chain is great when everything is working, but the errback
chain can sometimes feel like it's not quite the right tool for the job.
But there are some techniques to mitigate that, and I think they work quite
well.

Alexey> Since there is only a [linear] list of pairs (callback, errback),
Alexey> the last errbacks have to be complex to distinguish the failures,
Alexey> that came from the previous callback from failures, that traverse
Alexey> the errback chain from the beginning.

Alexey> Should I only use errbacks as a means of catching errors only from
Alexey> who have produced the Deferred?  And never use them to catch
Alexey> errors, that came from my callbacks?

No. One thing to think about is the flow down the call/errback chain. You
can do something like this.

  d = IReturnADeferred()

  d.addErrback(e1)
  d.addCallback(c1)

  d.addErrback(e2, 'first')

  d.addCallback(c2)
  d.addCallback(c3)
  d.addErrback(e2, 'second')

Here e1 will only get errors created by IReturnADeferred. If
IReturnADeferred has no problem, you're into c1 and e1 is "behind" you on
the call/errback chain. Note that I add e2 to the errback chain twice.
That's a way of having the same function be called for (perhaps) the same
reason, but on the chain in 2 places. By the time the flow of control gets
to c2 or c3, e2 can only be called with 'second' as its argument.

Alexey> Nevertheless the Deferred mechanism always catch the exceptions in
Alexey> my callbacks, I have to always catch them myself and never let them
Alexey> out uncontrolled (since I cannot distinguish, say TypeError that
Alexey> came from the first callback from TypeError, that came from the
Alexey> next callback, and they are not the same for me, since I try to do
Alexey> a cleanup)?  But then I have to translate all errors to my invented
Alexey> exceptions, so they will differ.

See the above example.

Alexey> Or just tell me, that I have missed something, I'm still getting
Alexey> into the theme!

The other thing that's very useful is to write errbacks like this:

  def e1(fail):
    fail.trap(TypeError, KeyError)
    # Do stuff to handle just TypeError, KeyError

  def e2(fail):
    fail.trap(MyException)
    # Do stuff to handle MyException

then you just do

  d = IReturnADeferred()
  d.addErrback(e1)
  d.addErrback(e2)

The fail.trap will cause the function to immediately return the current
failure if it's not one of the mentioned types. See also fail.check (which
is what trap uses).  I.e., go read the source of twisted.python.failure

That approach is nice because you can write your err handling methods
completely separately, and can probably not worry about the order you list
them in, etc. The failure just falls down the errback chain until it hits
something that can deal with it ("trap" it).


Another thing you could do (a bit of a hack) is to add an attribute to a
failure object to mark that you've processed it (e.g., that it has been
logged).

And you might want to read the recent post to this list by Brian Warner
(which I've also been meaning to reply to - hi Brian!). See
http://twistedmatrix.com/pipermail/twisted-python/2010-January/021330.html

Probably others have suggestions on nice ways to handle particular
cases. Those are just some that I've used.

Terry


From mebly5343 at gmail.com  Mon Feb  1 21:15:04 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Mon, 1 Feb 2010 21:15:04 -0500
Subject: [Twisted-Python] How do I get data from a Queue (or "outside") into
	a Telnet Server?
Message-ID: <dc408fe51002011815w2eb0edfaje8b3eabb72e0936a@mail.gmail.com>

Good day, everyone:

I'm trying to learn Python and Twisted at the same time and having fun
(mostly).

I'm writing an application that is collecting data from multiple sources,
filtering the data, and providing it to users through a Telnet server.  I
can set up a polling loop for the server but I can't figure out how to get
send the data to users connected to my server.

I thought I'd put the server in a thread and use a Queue to send data to
it.  But, I could do the work within the server application...

The server I'm playing with, including the polling loop, is:

from twisted.conch.telnet import StatefulTelnetProtocol
from twisted.internet import reactor, protocol

class TelnetEcho(StatefulTelnetProtocol):

    def lineReceived(self, data):
        print "Type of self: " + str(type(self))
        data = data.rstrip('\n\r')
        self.sendLine("Unrecognized command: %r\r" % (data,))


def checkforspots():
    print "running checkforspots()"
    reactor.callLater(1.0,checkforspots)

def createTelnetServer():
    factory = protocol.ServerFactory()

    instance = TelnetEcho
    factory.protocol = instance

    port = reactor.listenTCP(8023,factory)
    print "Listening on port 8023"

    print "Type of port: " + str(type(port))
    checkforspots()

    return port

if __name__ == "__main__":
    reactor.callWhenRunning(createTelnetServer)
    reactor.run()


Any suggestions greatly appreciated.  I've been unable to find anything
using my "google-fu" on this issue - I'm stuck.

Thanks.

Mark Bailey
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100201/711a4d3b/attachment.htm 

From warner at lothar.com  Tue Feb  2 01:19:09 2010
From: warner at lothar.com (Brian Warner)
Date: Mon, 01 Feb 2010 22:19:09 -0800
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
Message-ID: <4B67C3DD.6060109@lothar.com>

I'll be there until wednesday afternoon.
 -Brian



From zookog at gmail.com  Tue Feb  2 02:19:25 2010
From: zookog at gmail.com (Zooko O'Whielacronx)
Date: Tue, 2 Feb 2010 00:19:25 -0700
Subject: [Twisted-Python] ANNOUNCING Tahoe, the Least-Authority File System,
	v1.6
Message-ID: <cd6401a1002012319x78b7b4ci33ecbd0538a38ef1@mail.gmail.com>

This highly reliable distributed data store is built on top of
Twisted. Thanks for the excellent tool!

Regards,

Zooko Wilcox-O'Hearn


ANNOUNCING Tahoe, the Least-Authority File System, v1.6

We are pleased to announce the immediate availability of
version 1.6 of Tahoe-LAFS, an extremely reliable distributed
data store.

Tahoe-LAFS is the first cloud storage system which offers
"provider-independent security" -- meaning that not even your
cloud service provider can read or alter your data without your
consent.  Here is the one-page explanation of its unique
security and fault-tolerance properties:

http://allmydata.org/source/tahoe/trunk/docs/about.html

Tahoe-LAFS v1.6.0 is the successor to v1.5.0, which was
released August 1, 2009 [1]. This release includes major
performance improvements, usability improvements, and one major
new feature: deep-immutable directories (cryptographically
unalterable permanent snapshots). See the NEWS file [2] for
details.


WHAT IS IT GOOD FOR?

With Tahoe-LAFS, you spread your filesystem across multiple
servers, and even if some of the servers fail or are taken over
by an attacker, the entire filesystem continues to work
correctly, and continues to preserve your privacy and
security. You can easily and securely share chosen files and
directories with others.

In addition to the core storage system itself, volunteers have
developed related projects to integrate it with other
tools. These include frontends for Windows, Macintosh,
JavaScript, and iPhone, and plugins for Hadoop, bzr, duplicity,
TiddlyWiki, and more. As of this release, contributors have
added an Android frontend and a working read-only FUSE
frontend. See the Related Projects page on the wiki [3].

We believe that the combination of erasure coding, strong
encryption, Free/Open Source Software and careful engineering
make Tahoe-LAFS safer than RAID, removable drive, tape, on-line
backup or other Cloud storage systems.

This software is developed under thorough unit tests, and there
are no known bugs or security flaws which would compromise
confidentiality or data integrity under normal use. (For all
currently known issues please see the known_issues.txt file
[4].)


COMPATIBILITY

This release is fully compatible with the version 1 series of
Tahoe-LAFS. Clients from this release can write files and
directories in the format used by clients of all versions back
to v1.0 (which was released March 25, 2008). Clients from this
release can read files and directories produced by clients of
all versions since v1.0. Servers from this release can serve
clients of all versions back to v1.0 and clients from this
release can use servers of all versions back to v1.0.

This is the seventh release in the version 1 series. The
version 1 series of Tahoe-LAFS will be actively supported and
maintained for the forseeable future, and future versions of
Tahoe-LAFS will retain the ability to read and write files
compatible with Tahoe-LAFS v1.

In addition, version 1.6 improves forward-compatibility with
planned future directory formats, allowing updates to a
directory containing both current and future links, without
loss of information.


LICENCE

You may use this package under the GNU General Public License,
version 2 or, at your option, any later version. See the file
"COPYING.GPL" [5] for the terms of the GNU General Public
License, version 2.

You may use this package under the Transitive Grace Period
Public Licence, version 1 or, at your option, any later
version. (The Transitive Grace Period Public Licence has
requirements similar to the GPL except that it allows you to
wait for up to twelve months after you redistribute a derived
work before releasing the source code of your derived work.)
See the file "COPYING.TGPPL.html" [6] for the terms of the
Transitive Grace Period Public Licence, version 1.

(You may choose to use this package under the terms of either
licence, at your option.)


INSTALLATION

Tahoe-LAFS works on Linux, Mac OS X, Windows, Cygwin, Solaris,
*BSD, and probably most other systems. Start with
"docs/install.html" [7].


HACKING AND COMMUNITY

Please join us on the mailing list [8]. Patches are gratefully
accepted -- the RoadMap page [9] shows the next improvements
that we plan to make and CREDITS [10] lists the names of people
who've contributed to the project. The Dev page [11] contains
resources for hackers.


SPONSORSHIP

Tahoe-LAFS was originally developed thanks to the sponsorship
of Allmydata, Inc. [12], a provider of commercial backup
services. Allmydata founded the Tahoe-LAFS project and
contributed hardware, software, ideas, bug reports,
suggestions, demands, and they employed several Tahoe-LAFS
hackers and instructed them to spend part of their work time on
this Free Software project. Also they awarded customized
t-shirts to hackers who found security flaws in Tahoe-LAFS (see
the Hack Tahoe-LAFS Hall Of Fame [13]). After discontinuing
funding of Tahoe-LAFS R&D in early 2009, Allmydata, Inc. has
continued to provide servers, co-lo space, bandwidth, and small
personal gifts as tokens of appreciation. (Also they continue
to provide bug reports.) Thank you to Allmydata, Inc. for their
generous and public-spirited support.

This is the third release of Tahoe-LAFS to be created solely as
a labor of love by volunteers. Thank you very much to the
dedicated team of "hackers in the public interest" who make
Tahoe-LAFS possible.

Zooko Wilcox-O'Hearn
on behalf of the Tahoe-LAFS team

February 1, 2010
Boulder, Colorado, USA

[1] http://allmydata.org/trac/tahoe/browser/relnotes.txt?rev=4042
[2] http://allmydata.org/trac/tahoe/browser/NEWS?rev=4189
[3] http://allmydata.org/trac/tahoe/wiki/RelatedProjects
[4] http://allmydata.org/trac/tahoe/browser/docs/known_issues.txt
[5] http://allmydata.org/trac/tahoe/browser/COPYING.GPL
[6] http://allmydata.org/source/tahoe/trunk/COPYING.TGPPL.html
[7] http://allmydata.org/source/tahoe/trunk/docs/install.html
[8] http://allmydata.org/cgi-bin/mailman/listinfo/tahoe-dev
[9] http://allmydata.org/trac/tahoe/roadmap
[10] http://allmydata.org/trac/tahoe/browser/CREDITS?rev=4186
[11] http://allmydata.org/trac/tahoe/wiki/Dev
[12] http://allmydata.com
[13] http://hacktahoe.org


From andrew at bemusement.org  Tue Feb  2 04:57:02 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 2 Feb 2010 20:57:02 +1100
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <9d748c781002010724p15d96b6fk32df6bab047c736e@mail.gmail.com>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<19298.5040.965899.805489@jon.es>
	<20100129101722.GX23607@ruber.office.udmvt.ru>
	<20100130071601.GC2456@steerpike.home.puzzling.org>
	<9d748c781002010724p15d96b6fk32df6bab047c736e@mail.gmail.com>
Message-ID: <20100202095702.GE2456@steerpike.home.puzzling.org>

Landreville wrote:
> On Sat, Jan 30, 2010 at 2:16 AM, Andrew Bennetts <andrew at bemusement.org> wrote:
> > twisted-web at udmvt.ru wrote:
> > [...]
> >> Is it true, that adding many callback functions as filters is elegant,
> >> but impractical solution?
> >> Since there is only a [linear] list of pairs (callback, errback), the last errbacks
> >> have to be complex to distinguish the failures, that came from the previous callback
> >> from failures, that traverse the errback chain from the beginning.
> >
> > This is no different to regular Python code, which has a linear call stack which
> > can have exception handlers at any point on the stack. ?The exact same tradeoffs
> > apply about which exceptions to raise and which to catch, and at what points.
> >
> > -Andrew.
> >
> 
> In normal python code you might put each filter into a try/except
> block, wouldn't this be equivalent to putting a callback and errback
> (addCallbacks) each time you are adding a callback. So that the
> errback would then know which callback (the previous one) failed.

Yes and no.

Yes, you could use addCallbacks as you suggest to get a clearer idea of
where an exception was raised from, and that approach certainly suits
some code.

But unless your Python code usually uses bare excepts (?except:? rather
than ?except SpecifcException:?), which is generally bad style, you
can't be sure without horrible introspection where precisely in the code
the exception was raised from.  But then, you generally don't need to
know... e.g. it rarely matters where a KeyboardInterrupt happened, you
probably will always want to respond to it the same way.

Again, to mind at least, the tradeoffs of bare excepts vs. specific
exception handlers have very direct parallels with Deferred
callback/errback chains.  Ditto for how much code should be inside a
?try? block, etc.  They are just exception handlers for async code, the
way you should deal with exceptions might be spelled rather differently
but the principles are the same.

-Andrew.



From exarkun at twistedmatrix.com  Tue Feb  2 08:47:43 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 02 Feb 2010 13:47:43 -0000
Subject: [Twisted-Python] How do I get data from a Queue (or
	"outside")	into a Telnet Server?
In-Reply-To: <dc408fe51002011815w2eb0edfaje8b3eabb72e0936a@mail.gmail.com>
References: <dc408fe51002011815w2eb0edfaje8b3eabb72e0936a@mail.gmail.com>
Message-ID: <20100202134743.26099.1216579116.divmod.xquotient.75@localhost.localdomain>

On 02:15 am, mebly5343 at gmail.com wrote:
>Good day, everyone:
>
>I'm trying to learn Python and Twisted at the same time and having fun
>(mostly).
>
>I'm writing an application that is collecting data from multiple 
>sources,
>filtering the data, and providing it to users through a Telnet server. 
>I
>can set up a polling loop for the server but I can't figure out how to 
>get
>send the data to users connected to my server.

What about this specifically are you having difficulty with?  The 
solution should probably be little more than a normal Python method 
call.
>
>I thought I'd put the server in a thread and use a Queue to send data 
>to
>it.  But, I could do the work within the server application...

I'd skip the thread and the queue.  From what you've said so far, there 
doesn't seem to be any reason to involve either.
>
>The server I'm playing with, including the polling loop, is:
>
>from twisted.conch.telnet import StatefulTelnetProtocol
>from twisted.internet import reactor, protocol
>
>class TelnetEcho(StatefulTelnetProtocol):
>
>    def lineReceived(self, data):
>        print "Type of self: " + str(type(self))
>        data = data.rstrip('\n\r')
>        self.sendLine("Unrecognized command: %r\r" % (data,))
>
>
>def checkforspots():
>    print "running checkforspots()"
>    reactor.callLater(1.0,checkforspots)
>
>def createTelnetServer():
>    factory = protocol.ServerFactory()
>
>    instance = TelnetEcho
>    factory.protocol = instance

This isn't exactly wrong, but it's sort of misleading.  You've defined 
the name "instance" here, but it's not bound to an instance.  It's bound 
to the TelnetEcho class.  Since you go on to set "factory.protocol" to 
this, it's right - that attribute is supposed to be a class, not an 
instance - but calling this "instance" suggests you might be confused, 
or it might confuse someone later reading the code.
>
>    port = reactor.listenTCP(8023,factory)
>    print "Listening on port 8023"
>
>    print "Type of port: " + str(type(port))
>    checkforspots()
>
>    return port
>
>if __name__ == "__main__":
>    reactor.callWhenRunning(createTelnetServer)
>    reactor.run()
>
>
>Any suggestions greatly appreciated.  I've been unable to find anything
>using my "google-fu" on this issue - I'm stuck.

It's possible this FAQ entry will help:

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother

Jean-Paul


From mebly5343 at gmail.com  Tue Feb  2 10:45:28 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Tue, 2 Feb 2010 10:45:28 -0500
Subject: [Twisted-Python] How do I get data from a Queue (or "outside")
	into a Telnet Server?
In-Reply-To: <20100202134743.26099.1216579116.divmod.xquotient.75@localhost.localdomain>
References: <dc408fe51002011815w2eb0edfaje8b3eabb72e0936a@mail.gmail.com>
	<20100202134743.26099.1216579116.divmod.xquotient.75@localhost.localdomain>
Message-ID: <dc408fe51002020745x38002195id5ee5e40026db872@mail.gmail.com>

Good day, Jean-Paul:

On Tue, Feb 2, 2010 at 8:47 AM, <exarkun at twistedmatrix.com> wrote:

> On 02:15 am, mebly5343 at gmail.com wrote:
> [...]
>


> What about this specifically are you having difficulty with?
>

Actually, what I was having trouble with was getting an instance of the
protocol class.  (The "instance" was from a
debugging line I forgot to take back out.) The FAQ entry does answer my
questions (which I didn't understand well
enough to ask clearly:-) ):

How do I get access to an instance of the protocol class?  (The answer is to
derive a class from Factory and use that to
store "self" from the protocol class.  The FAQ entry shows exactly how to do
this through the __init__ method - thanks.)

Thanks also for steering me away from complexities like threads and Queue.
callWhenRunning allows me to run in the context
of the reactor and access other Python objects, so that solves my problem.

I will probably end up using a socket for that connection and running the
server as a seperate process - but that is not the
key.


> This isn't exactly wrong, but it's sort of misleading.  You've defined
> the name "instance" here, but it's not bound to an instance.  It's bound
> to the TelnetEcho class.
> [...]
>
> It's possible this FAQ entry will help:
>
>
> http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother
>
> Jean-Paul
>

Thanks again for the very prompt and useful response.

Mark
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100202/55d1d937/attachment-0001.htm 

From dialtone at gmail.com  Tue Feb  2 14:59:39 2010
From: dialtone at gmail.com (Valentino Volonghi)
Date: Tue, 2 Feb 2010 11:59:39 -0800
Subject: [Twisted-Python] [ANN] Ampoule 0.2.0 released
Message-ID: <3D0C302D-6F0D-4360-AD4B-0ED9ED84BFE2@gmail.com>

After a LOT of time I am finally, with Canonical Ltd. (Aaron Bentley) help, happy to release a new version of Ampoule.

The changelog is not terribly long, hopefully this means that the library kind of works well for most use cases :).

Have fun!

For those that don't know Ampoule (a lot):

ampoule is a process pool implementation written on top of Twisted Matrix. Its name comes from the use of AMP as the default communication protocol between the pool and all its children. It's different from other alternative solutions because it provides an API that is very close to the ThreadPool built into Twisted itself. It also provides the helper function deferToAMPProcess that is also conceptually similar to deferToThread.

Ampoule 0.2.0 (2010-02-02)
==========================
Changes
--------
  - Fixed bug #317287: Twisted was required by setup.py due to import
      of application code to get the version number. The setup.py now
      tries to do the same thing but if it fails it uses a separate
      hardcoded version.
  - Fixed bug #317077: Ampoule didn't work on windows xp due to childFD
      customization, now on windows ampoule uses the standard 0,1,2 fds.
  - Added pyOpenSSL as an explicit dependency since Twisted doesn't
    require it but AMP does.
  - Greatly simplify setup.py and support plain distutils too.
  - Bootstrap code now supports context managers
  - Support for execution deadline on child calls
  - Parametrize the timeout signal to send to the child
  - Pass arguments directly from the ProcessPool object for the child
    process creation.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.6
http://www.adroll.com/



From radix at twistedmatrix.com  Tue Feb  2 15:13:00 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 2 Feb 2010 14:13:00 -0600
Subject: [Twisted-Python] [ANN] Ampoule 0.2.0 released
In-Reply-To: <3D0C302D-6F0D-4360-AD4B-0ED9ED84BFE2@gmail.com>
References: <3D0C302D-6F0D-4360-AD4B-0ED9ED84BFE2@gmail.com>
Message-ID: <60ed19d41002021213g3df090d4tac4b6990365baaa6@mail.gmail.com>

On Tue, Feb 2, 2010 at 1:59 PM, Valentino Volonghi <dialtone at gmail.com> wrote:
> After a LOT of time I am finally, with Canonical Ltd. (Aaron Bentley) help, happy to release a new version of Ampoule.
>
> The changelog is not terribly long, hopefully this means that the library kind of works well for most use cases :).
>
> Have fun!
>
> For those that don't know Ampoule (a lot):
>
> ampoule is a process pool implementation written on top of Twisted Matrix.

You may want to read
http://glyph.twistedmatrix.com/2010/01/some-common-onomatological-errors.html

There's no project named "Twisted Matrix". It's called "Twisted" :-)

Other than that, thanks very much for the release!

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From drew.smathers at gmail.com  Tue Feb  2 15:32:47 2010
From: drew.smathers at gmail.com (Drew Smathers)
Date: Tue, 2 Feb 2010 15:32:47 -0500
Subject: [Twisted-Python] [ANN] Ampoule 0.2.0 released
In-Reply-To: <60ed19d41002021213g3df090d4tac4b6990365baaa6@mail.gmail.com>
References: <3D0C302D-6F0D-4360-AD4B-0ED9ED84BFE2@gmail.com>
	<60ed19d41002021213g3df090d4tac4b6990365baaa6@mail.gmail.com>
Message-ID: <368574aa1002021232n9ce258dq38bfba10b9219a5b@mail.gmail.com>

On Tue, Feb 2, 2010 at 3:13 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Tue, Feb 2, 2010 at 1:59 PM, Valentino Volonghi <dialtone at gmail.com>
> wrote:
> > After a LOT of time I am finally, with Canonical Ltd. (Aaron Bentley)
> help, happy to release a new version of Ampoule.
> >
> > The changelog is not terribly long, hopefully this means that the library
> kind of works well for most use cases :).
> >
> > Have fun!
> >
> > For those that don't know Ampoule (a lot):
> >
> > ampoule is a process pool implementation written on top of Twisted
> Matrix.
>
> You may want to read
>
> http://glyph.twistedmatrix.com/2010/01/some-common-onomatological-errors.html
>
> There's no project named "Twisted Matrix". It's called "Twisted" :-)
>
> Other than that, thanks very much for the release!
>
>
I think both "Twisted Matrix" and "Twisted Python" have sunk into the common
jargon amongst general Python devs, so maybe the only solution to the
problem is to stop being picky about nomenclature ;)

By the way, the only Google adwords advertising related to Twisted seems to
be on the broad phrase "twisted python", which is kind of interesting.  So
after a little research, I can only conclude that Wingware's Internet
marketing team is responsible for bastardizing the Twisted brand.

(Thanks also for the release; I'm really hoping to evaluate ampoule more and
maybe use in some future projects.)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100202/92ed3b6a/attachment.htm 

From drew.smathers at gmail.com  Tue Feb  2 16:13:02 2010
From: drew.smathers at gmail.com (Drew Smathers)
Date: Tue, 2 Feb 2010 16:13:02 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <4B67C3DD.6060109@lothar.com>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<4B67C3DD.6060109@lothar.com>
Message-ID: <368574aa1002021313o78f650abye3360226a7a08851@mail.gmail.com>

On Tue, Feb 2, 2010 at 1:19 AM, Brian Warner <warner at lothar.com> wrote:

> I'll be there until wednesday afternoon.
>  -Brian
>
>
>
I plan on going Monday.  This will be my first Twisted sprint, so don't hold
me to the fire on being super productive.

Not sure what I'll work on yet, but I'd like to revive the idea of a
"Twisted Game" contest similar to PyWeek -- this was mentioned at PyCon
2008.  It would be cool to map out how we could do this if anyone has an
interest in this still.

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100202/38723588/attachment.htm 

From jbardin at bu.edu  Tue Feb  2 16:24:08 2010
From: jbardin at bu.edu (james bardin)
Date: Tue, 2 Feb 2010 16:24:08 -0500
Subject: [Twisted-Python] Conch channel blocked
Message-ID: <a3b675321002021324l5e3761baw7794be341819f88@mail.gmail.com>

Hello,

I'm trying to get a feel for twisted.conch, and not getting very far.
I know the documentation is lacking, but I'm not here to complain, I'm
here to figure this out. I only have a cursory knowledge of twisted so
far, so that may be some of my problem. I am however fairly familiar
with the internals of ssh, so I thought I could start there...

I started with the sshsimpleclient example, took some pieces, and
began experimenting.
The example worked as expected.
Next, I wanted to pipe arbitrary data over the channel, as if I called
"ssh hostname 'cat > file'"
This however fills the remote buffer, and hangs

Here's a small example
###############
class ClientConnection(connection.SSHConnection):
    def serviceStarted(self):
        self.openChannel(CatChannel(conn = self))

class CatChannel(channel.SSHChannel):
    name = 'session'
    def channelOpen(self, data):
        d = self.conn.sendRequest(self, 'exec', common.NS('cat >
/tmp/testfile'),
                                  wantReply = 1)
        d.addCallback(self._cbSendRequest)

    def _cbSendRequest(self, ignored):
        f = open('testfile')
        chunk = f.read(4096)
        while chunk:
            self.write(chunk)
            chunk = f.read(4096)
        f.close()
        self.conn.sendEOF(self)
        self.loseConnection()
################


Also, setting the channel name to 'session', sending the 'exec'
request with the command as a netstring, etc. seem like something that
should be abstracted away. SSHSession with request_exec seemed like
the obvious choice, but I had no success in using that class for
anything.

Does anyone know if any projects making good use of twisted.conch,
where I can see the source in action, and in depth?


Thanks,
-jim


From glyph at twistedmatrix.com  Tue Feb  2 16:34:02 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 2 Feb 2010 16:34:02 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <368574aa1002021313o78f650abye3360226a7a08851@mail.gmail.com>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<4B67C3DD.6060109@lothar.com>
	<368574aa1002021313o78f650abye3360226a7a08851@mail.gmail.com>
Message-ID: <88ECB4FF-5517-47C3-A8AA-61F34B44EDC2@twistedmatrix.com>


On Feb 2, 2010, at 4:13 PM, Drew Smathers wrote:

> I plan on going Monday.  This will be my first Twisted sprint, so don't hold me to the fire on being super productive.

Who told you that we hold super-productive people to the fire?  That sounds backwards!  We only put you in the fire if you _aren't_ productive.  ;-)

> Not sure what I'll work on yet, but I'd like to revive the idea of a "Twisted Game" contest similar to PyWeek -- this was mentioned at PyCon 2008.  It would be cool to map out how we could do this if anyone has an interest in this still.

It would be awesome if you could organize that.



From drew.smathers at gmail.com  Tue Feb  2 16:49:31 2010
From: drew.smathers at gmail.com (Drew Smathers)
Date: Tue, 2 Feb 2010 16:49:31 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <88ECB4FF-5517-47C3-A8AA-61F34B44EDC2@twistedmatrix.com>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<4B67C3DD.6060109@lothar.com>
	<368574aa1002021313o78f650abye3360226a7a08851@mail.gmail.com>
	<88ECB4FF-5517-47C3-A8AA-61F34B44EDC2@twistedmatrix.com>
Message-ID: <368574aa1002021349m79f55424xe36ea6b5ae0aad3c@mail.gmail.com>

On Tue, Feb 2, 2010 at 4:34 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Feb 2, 2010, at 4:13 PM, Drew Smathers wrote:
>
> > I plan on going Monday.  This will be my first Twisted sprint, so don't
> hold me to the fire on being super productive.
>
> Who told you that we hold super-productive people to the fire?  That sounds
> backwards!  We only put you in the fire if you _aren't_ productive.  ;-)
>
>
A grammatical mistake on my part: ".. don't hold me to the fire if i'm not
super productive."  From your explanation, it sounds like a Twisted sprint
turns into something like the Donner party expedition; I am afraid now.


> > Not sure what I'll work on yet, but I'd like to revive the idea of a
> "Twisted Game" contest similar to PyWeek -- this was mentioned at PyCon
> 2008.  It would be cool to map out how we could do this if anyone has an
> interest in this still.
>
> It would be awesome if you could organize that.
>
>
 Cool, I'll try to setup another "Twisted for Games" BOF to get the
discussion started.

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100202/b249ffab/attachment.htm 

From mebly5343 at gmail.com  Tue Feb  2 21:47:56 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Tue, 2 Feb 2010 21:47:56 -0500
Subject: [Twisted-Python] How do I get data from a Queue (or "outside")
	into a Telnet Server?
In-Reply-To: <20100202134743.26099.1216579116.divmod.xquotient.75@localhost.localdomain>
References: <dc408fe51002011815w2eb0edfaje8b3eabb72e0936a@mail.gmail.com>
	<20100202134743.26099.1216579116.divmod.xquotient.75@localhost.localdomain>
Message-ID: <dc408fe51002021847o70c61f3fw354a12ce97f9f355@mail.gmail.com>

On Feb 2, 2010 8:54 AM, <exarkun at twistedmatrix.com> wrote:

On 02:15 am, mebly5343 at gmail.com wrote:
>Good day, everyone:
>
>>Good day, everyone:
>
>I'm trying to learn Python and Twisted at the same time and having fun
>(mostly).
>
>I'm writing an application that is collecting data from multiple
>sources, filtering the data, and providing it to users through a Telnet
server.
>I can set up a polling loop for the server but I can't figure out how to
>send the data to users connected to my server.
It's possible this FAQ entry will help:

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother

Jean-Paul

Thanks, Jean-Paul.  The following appears to do exactly what I want, based
on your FAQ entry.  It reads data from a socket
connection and sends it to clients connected to the Telnet server.  I think
I've captured the correct instances this time.  :-)

Now, I need to work oncollecting the data and play with tksupport to provide
a GUI...!

Thanks again.

Mark

from twisted.conch.telnet import StatefulTelnetProtocol
from twisted.internet import reactor, protocol
from twisted.protocols.basic import LineReceiver

class mySocket(LineReceiver):
    def connectionMade(self):
        self.factory.connection = self
        self.factory.data = []

    def lineReceived(self, line):
        self.factory.data.append(line)

    def connectionLost(self, reason):
        self.factory.connection = None

class mySocketFactory(protocol.Factory):
    protocol = mySocket
    def __init__(self):
        self.connection = None
        self.data = []


class TelnetEcho(StatefulTelnetProtocol):
    def connectionMade(self):
        self.factory.connection = self
        self.sendLine("Welcome to the ClusterMerge 0.9Beta 20100203 telnet
port\r\n\narc >\r")


    def lineReceived(self, data):
        data = data.rstrip('\n\r')

        if data.upper() == 'BYE':
            self.sendLine("Goodbye...\r")
            self.transport.loseConnection()
            self.factory.connection = None
        else:
            self.sendLine("Unrecognized command: %r\r" % (data,))  #  will
implement help, set/filter, and show/filter later

    def connectionLost(self, reason):
        self.factory.connection = None


class TelnetEchoFactory(protocol.Factory):
    protocol = TelnetEcho
    def __init__(self):
        self.connection = None


def checkforspots(telnetinstance, socketinstance):
    while len(socketinstance.data) > 0:
        line = socketinstance.data.pop()
        if telnetinstance.connection:
            telnetinstance.connection.sendLine(line + "\r")

    reactor.callLater(1.0,checkforspots, telnetinstance, socketinstance)

def createTelnetServer(port=7300, myport=7301):
    telnetinstance = TelnetEchoFactory()
    reactor.listenTCP(port,telnetinstance)

    socketinstance = mySocketFactory()
    reactor.listenTCP(myport, socketinstance)

    checkforspots(telnetinstance, socketinstance)


if __name__ == "__main__":
    port = 8023
    reactor.callWhenRunning(createTelnetServer, port)
    reactor.run()




_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100202/6cadc86a/attachment-0001.htm 

From raq at cttc.upc.edu  Wed Feb  3 07:48:39 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Wed, 03 Feb 2010 13:48:39 +0100
Subject: [Twisted-Python] Using Twisted and GTK2
Message-ID: <1265201319.9055.40.camel@mundo>

Hi everybody,

I recently new about Twisted and saw it as the best way to deal with a
client/server network application (I use python long time ago). Really
wonderful. I now intend to write a GTK client that can send commands and
transfers files to the server and from it.
I started to learn how to write applications not using 'Perspective
Broker', but when I reached to the example pbgtk2.py to authenticate and
send echo commands, I could no see a way the same with a PB. Is that
true?. Is, anyway the best alternative (I mean PB) to write the
application I intend to?

Thanks in advance
Regards
 
-- 
Ramiro Alba

Centre Tecnol?gic de Tranfer?ncia de Calor
http://www.cttc.upc.edu


Escola T?cnica Superior d'Enginyeries
Industrial i Aeron?utica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est? net.



From free at 64studio.com  Wed Feb  3 09:28:52 2010
From: free at 64studio.com (Free Ekanayaka)
Date: Wed, 03 Feb 2010 15:28:52 +0100
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <1265201319.9055.40.camel@mundo> (Ramiro Alba Queipo's message of
	"Wed, 03 Feb 2010 13:48:39 +0100")
References: <1265201319.9055.40.camel@mundo>
Message-ID: <87636emlzv.fsf@canonical.com>

Hi,

|--==> On Wed, 03 Feb 2010 13:48:39 +0100, Ramiro Alba Queipo <raq at cttc.upc.edu> said:

  RAQ> Hi everybody,
  RAQ> I recently new about Twisted and saw it as the best way to deal with a
  RAQ> client/server network application (I use python long time ago). Really
  RAQ> wonderful. I now intend to write a GTK client that can send commands and
  RAQ> transfers files to the server and from it.
  RAQ> I started to learn how to write applications not using 'Perspective
  RAQ> Broker', but when I reached to the example pbgtk2.py to authenticate and
  RAQ> send echo commands, I could no see a way the same with a PB. Is that
  RAQ> true?. Is, anyway the best alternative (I mean PB) to write the
  RAQ> application I intend to?

If you don't need all the features of PB and something simpler is
enough, you might want to consider AMP:

http://twistedmatrix.com/documents/9.0.0/api/twisted.protocols.amp.html

Cheers,

Free


From raq at cttc.upc.edu  Wed Feb  3 10:13:03 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Wed, 03 Feb 2010 16:13:03 +0100
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <87636emlzv.fsf@canonical.com>
References: <1265201319.9055.40.camel@mundo>  <87636emlzv.fsf@canonical.com>
Message-ID: <1265209983.9055.45.camel@mundo>

Free,

Really interesting. I did not realized, but I do not know if it is too
simple as, I want to use a SQL Database authentication an a view from a
web client.

On Wed, 2010-02-03 at 15:28 +0100, Free Ekanayaka wrote:
> Hi,
> 
> |--==> On Wed, 03 Feb 2010 13:48:39 +0100, Ramiro Alba Queipo <raq at cttc.upc.edu> said:
> 
>   RAQ> Hi everybody,
>   RAQ> I recently new about Twisted and saw it as the best way to deal with a
>   RAQ> client/server network application (I use python long time ago). Really
>   RAQ> wonderful. I now intend to write a GTK client that can send commands and
>   RAQ> transfers files to the server and from it.
>   RAQ> I started to learn how to write applications not using 'Perspective
>   RAQ> Broker', but when I reached to the example pbgtk2.py to authenticate and
>   RAQ> send echo commands, I could no see a way the same with a PB. Is that
>   RAQ> true?. Is, anyway the best alternative (I mean PB) to write the
>   RAQ> application I intend to?
> 
> If you don't need all the features of PB and something simpler is
> enough, you might want to consider AMP:
> 
> http://twistedmatrix.com/documents/9.0.0/api/twisted.protocols.amp.html
> 
> Cheers,
> 
> Free
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-- 
Ramiro Alba

Centre Tecnol?gic de Tranfer?ncia de Calor
http://www.cttc.upc.edu


Escola T?cnica Superior d'Enginyeries
Industrial i Aeron?utica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est? net.



From dripton at ripton.net  Wed Feb  3 14:03:32 2010
From: dripton at ripton.net (David Ripton)
Date: Wed, 3 Feb 2010 11:03:32 -0800
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <1265201319.9055.40.camel@mundo>
References: <1265201319.9055.40.camel@mundo>
Message-ID: <20100203190332.GA737@vidar.dreamhost.com>

On 2010.02.03 13:48:39 +0100, Ramiro Alba Queipo wrote:
> I recently new about Twisted and saw it as the best way to deal with a
> client/server network application (I use python long time ago). Really
> wonderful. I now intend to write a GTK client that can send commands and
> transfers files to the server and from it.
> I started to learn how to write applications not using 'Perspective
> Broker', but when I reached to the example pbgtk2.py to authenticate and
> send echo commands, I could no see a way the same with a PB. Is that
> true?. Is, anyway the best alternative (I mean PB) to write the
> application I intend to?

PB is fine.  AMP or Foolscap might be better for some tasks, but PB is
mature and works.

PB features integration with Cred, which is Twisted's pluggable
authentication mechanism.

http://twistedmatrix.com/documents/current/core/howto/cred.html

Cred is very flexible.  The integration between PB and Cred isn't quite
as flexible, but it works fine for straightforward cases.

If you're looking for larger sample code, I have a game that uses PyGTK
and PB and Cred, here:

http://github.com/dripton/Slugathon

-- 
David Ripton    dripton at ripton.net


From rich at noir.com  Wed Feb  3 19:48:36 2010
From: rich at noir.com (K. Richard Pixley)
Date: Wed, 03 Feb 2010 16:48:36 -0800
Subject: [Twisted-Python] twisted + virtual synchrony
Message-ID: <4B6A1964.3080000@noir.com>

Has anyone done any work towards integrating any virtual synchrony 
system, (like spread - http://spread.org), into twisted?

--rich


From raq at cttc.upc.edu  Thu Feb  4 04:11:51 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Thu, 04 Feb 2010 10:11:51 +0100
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <20100203190332.GA737@vidar.dreamhost.com>
References: <1265201319.9055.40.camel@mundo>
	<20100203190332.GA737@vidar.dreamhost.com>
Message-ID: <1265274711.9055.49.camel@mundo>

Thanks David. I'll take a look on your code

Regards

On Wed, 2010-02-03 at 11:03 -0800, David Ripton wrote:
> On 2010.02.03 13:48:39 +0100, Ramiro Alba Queipo wrote:
> > I recently new about Twisted and saw it as the best way to deal with a
> > client/server network application (I use python long time ago). Really
> > wonderful. I now intend to write a GTK client that can send commands and
> > transfers files to the server and from it.
> > I started to learn how to write applications not using 'Perspective
> > Broker', but when I reached to the example pbgtk2.py to authenticate and
> > send echo commands, I could no see a way the same with a PB. Is that
> > true?. Is, anyway the best alternative (I mean PB) to write the
> > application I intend to?
> 
> PB is fine.  AMP or Foolscap might be better for some tasks, but PB is
> mature and works.
> 
> PB features integration with Cred, which is Twisted's pluggable
> authentication mechanism.
> 
> http://twistedmatrix.com/documents/current/core/howto/cred.html
> 
> Cred is very flexible.  The integration between PB and Cred isn't quite
> as flexible, but it works fine for straightforward cases.
> 
> If you're looking for larger sample code, I have a game that uses PyGTK
> and PB and Cred, here:
> 
> http://github.com/dripton/Slugathon
> 
> -- 
> David Ripton    dripton at ripton.net
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-- 
Ramiro Alba

Centre Tecnol?gic de Tranfer?ncia de Calor
http://www.cttc.upc.edu


Escola T?cnica Superior d'Enginyeries
Industrial i Aeron?utica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est? net.



From gabriel.rossetti at arimaz.com  Thu Feb  4 05:48:28 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 04 Feb 2010 11:48:28 +0100
Subject: [Twisted-Python] domish.Element.__getattr__() or xpath.XPathQuery
Message-ID: <4B6AA5FC.7070302@arimaz.com>

Hello everyone,

I was wondering what you would recommend, accessing nodes via 
domish.Element.__getattr__()
(e.g. el.node1.node1_1, where el is /msg) or via xpath.XPathQuery()
(e.g. xpath.XPathQuery("/msg/node1/node1_1").queryForNodes(el)[0])?

I was wondering which would be faster, the __getattr__() is O(n) (in my 
example there are 2 calls) but what about xpath.XPathQuery()?

Thank you,
Gabriel


From alexandre at quessy.net  Thu Feb  4 08:23:20 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Thu, 4 Feb 2010 08:23:20 -0500
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <1265274711.9055.49.camel@mundo>
References: <1265201319.9055.40.camel@mundo>
	<20100203190332.GA737@vidar.dreamhost.com>
	<1265274711.9055.49.camel@mundo>
Message-ID: <72236ba91002040523q7bc68c5cq2a668b751aecf334@mail.gmail.com>

Hello everyone,
Though, as far as I know, PB is not transfered in clear text. That
means it's a little harder to debug the TCP streams, using a tool like
Wireshark. Am I wrong?

a

2010/2/4 Ramiro Alba Queipo <raq at cttc.upc.edu>:
> Thanks David. I'll take a look on your code
>
> Regards
>
> On Wed, 2010-02-03 at 11:03 -0800, David Ripton wrote:
>> On 2010.02.03 13:48:39 +0100, Ramiro Alba Queipo wrote:
>> > I recently new about Twisted and saw it as the best way to deal with a
>> > client/server network application (I use python long time ago). Really
>> > wonderful. I now intend to write a GTK client that can send commands and
>> > transfers files to the server and from it.
>> > I started to learn how to write applications not using 'Perspective
>> > Broker', but when I reached to the example pbgtk2.py to authenticate and
>> > send echo commands, I could no see a way the same with a PB. Is that
>> > true?. Is, anyway the best alternative (I mean PB) to write the
>> > application I intend to?
>>
>> PB is fine. ?AMP or Foolscap might be better for some tasks, but PB is
>> mature and works.
>>
>> PB features integration with Cred, which is Twisted's pluggable
>> authentication mechanism.
>>
>> http://twistedmatrix.com/documents/current/core/howto/cred.html
>>
>> Cred is very flexible. ?The integration between PB and Cred isn't quite
>> as flexible, but it works fine for straightforward cases.
>>
>> If you're looking for larger sample code, I have a game that uses PyGTK
>> and PB and Cred, here:
>>
>> http://github.com/dripton/Slugathon
>>
>> --
>> David Ripton ? ?dripton at ripton.net
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> --
> Ramiro Alba
>
> Centre Tecnol?gic de Tranfer?ncia de Calor
> http://www.cttc.upc.edu
>
>
> Escola T?cnica Superior d'Enginyeries
> Industrial i Aeron?utica de Terrassa
> Colom 11, E-08222, Terrassa, Barcelona, Spain
> Tel: (+34) 93 739 86 46
>
>
> --
> Aquest missatge ha estat analitzat per MailScanner
> a la cerca de virus i d'altres continguts perillosos,
> i es considera que est? net.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/


From exarkun at twistedmatrix.com  Thu Feb  4 09:01:57 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 04 Feb 2010 14:01:57 -0000
Subject: [Twisted-Python] Conch channel blocked
In-Reply-To: <a3b675321002021324l5e3761baw7794be341819f88@mail.gmail.com>
References: <a3b675321002021324l5e3761baw7794be341819f88@mail.gmail.com>
Message-ID: <20100204140157.26099.310807650.divmod.xquotient.137@localhost.localdomain>

On 2 Feb, 09:24 pm, jbardin at bu.edu wrote:
>Hello,
>
>I'm trying to get a feel for twisted.conch, and not getting very far.
>I know the documentation is lacking, but I'm not here to complain, I'm
>here to figure this out. I only have a cursory knowledge of twisted so
>far, so that may be some of my problem. I am however fairly familiar
>with the internals of ssh, so I thought I could start there...
>
>I started with the sshsimpleclient example, took some pieces, and
>began experimenting.
>The example worked as expected.
>Next, I wanted to pipe arbitrary data over the channel, as if I called
>"ssh hostname 'cat > file'"
>This however fills the remote buffer, and hangs
>
>Here's a small example
>###############
>class ClientConnection(connection.SSHConnection):
>    def serviceStarted(self):
>        self.openChannel(CatChannel(conn = self))
>
>class CatChannel(channel.SSHChannel):
>    name = 'session'
>    def channelOpen(self, data):
>        d = self.conn.sendRequest(self, 'exec', common.NS('cat >
>/tmp/testfile'),
>                                  wantReply = 1)
>        d.addCallback(self._cbSendRequest)
>
>    def _cbSendRequest(self, ignored):
>        f = open('testfile')
>        chunk = f.read(4096)
>        while chunk:
>            self.write(chunk)
>            chunk = f.read(4096)
>        f.close()
>        self.conn.sendEOF(self)
>        self.loseConnection()
>################
>
>
>Also, setting the channel name to 'session', sending the 'exec'
>request with the command as a netstring, etc. seem like something that
>should be abstracted away. SSHSession with request_exec seemed like
>the obvious choice, but I had no success in using that class for
>anything.

I can't run your example code, since it's not a complete example.  That 
makes it harder to point out what's wrong with it.  However, one thing 
does strike me as wrong:
>        while chunk:
>            self.write(chunk)
>            chunk = f.read(4096)

This is a pattern you typically want to avoid, in Conch or anything else 
Twisted-based.  I don't know if SSHChannel is a consumer, but if not it 
should be, and you should be writing the file using a producer.  See:

http://twistedmatrix.com/documents/current/core/howto/producers.html
>
>Does anyone know if any projects making good use of twisted.conch,
>where I can see the source in action, and in depth?

Mantissa uses Twisted Conch a bit:

http://divmod.org/trac/browser/trunk/Mantissa/xmantissa/terminal.py

But you won't find any code sending any exec requests there.

Jean-Paul


From jbardin at bu.edu  Thu Feb  4 09:20:34 2010
From: jbardin at bu.edu (james bardin)
Date: Thu, 4 Feb 2010 09:20:34 -0500
Subject: [Twisted-Python] Conch channel blocked
In-Reply-To: <20100204140157.26099.310807650.divmod.xquotient.137@localhost.localdomain>
References: <a3b675321002021324l5e3761baw7794be341819f88@mail.gmail.com>
	<20100204140157.26099.310807650.divmod.xquotient.137@localhost.localdomain>
Message-ID: <a3b675321002040620p73d67e2eh1a357266804455f1@mail.gmail.com>

On Thu, Feb 4, 2010 at 9:01 AM,  <exarkun at twistedmatrix.com> wrote:
>
> I can't run your example code, since it's not a complete example. ?That
> makes it harder to point out what's wrong with it. ?However, one thing
> does strike me as wrong:
>> ? ? ? ?while chunk:
>> ? ? ? ? ? ?self.write(chunk)
>> ? ? ? ? ? ?chunk = f.read(4096)
>
> This is a pattern you typically want to avoid, in Conch or anything else
> Twisted-based. ?I don't know if SSHChannel is a consumer, but if not it
> should be, and you should be writing the file using a producer. ?See:
>

It looked awkward, but the one example in the documentation was my
only starting point.
http://twistedmatrix.com/documents/current/conch/howto/conch_client.html

This is only a slightly modified version of that example, which writes
directly through the session channel, which makes sense in the
ssh-protocol, but apparently not here.


> http://twistedmatrix.com/documents/current/core/howto/producers.html
>>

Thanks. I'll see if I can relate that into conch.

>>Does anyone know if any projects making good use of twisted.conch,
>>where I can see the source in action, and in depth?
>
> Mantissa uses Twisted Conch a bit:
>
> http://divmod.org/trac/browser/trunk/Mantissa/xmantissa/terminal.py
>
> But you won't find any code sending any exec requests there.
>

That's OK. any little bit helps.
I have a twisted service, and it needs to tunnel some information
through an ssh channel. Although this would take me a couple minutes
with another library, I feel I should be able to make use of what's
already built in to twisted, and not add another dependency.

-jim


From dripton at ripton.net  Thu Feb  4 10:02:50 2010
From: dripton at ripton.net (David Ripton)
Date: Thu, 4 Feb 2010 07:02:50 -0800
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <72236ba91002040523q7bc68c5cq2a668b751aecf334@mail.gmail.com>
References: <1265201319.9055.40.camel@mundo>
	<20100203190332.GA737@vidar.dreamhost.com>
	<1265274711.9055.49.camel@mundo>
	<72236ba91002040523q7bc68c5cq2a668b751aecf334@mail.gmail.com>
Message-ID: <20100204150249.GA31036@vidar.dreamhost.com>

On 2010.02.04 08:23:20 -0500, Alexandre Quessy wrote:
> Though, as far as I know, PB is not transfered in clear text. That
> means it's a little harder to debug the TCP streams, using a tool like
> Wireshark. Am I wrong?

The PB wire format is documented here:
http://twistedmatrix.com/documents/9.0.0/api/twisted.spread.jelly.html

It's human-readable S-expressions.

-- 
David Ripton    dripton at ripton.net


From exarkun at twistedmatrix.com  Thu Feb  4 10:44:03 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 04 Feb 2010 15:44:03 -0000
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <20100204150249.GA31036@vidar.dreamhost.com>
References: <1265201319.9055.40.camel@mundo>
	<20100203190332.GA737@vidar.dreamhost.com>
	<1265274711.9055.49.camel@mundo>
	<72236ba91002040523q7bc68c5cq2a668b751aecf334@mail.gmail.com>
	<20100204150249.GA31036@vidar.dreamhost.com>
Message-ID: <20100204154403.26099.693792219.divmod.xquotient.151@localhost.localdomain>

On 03:02 pm, dripton at ripton.net wrote:
>On 2010.02.04 08:23:20 -0500, Alexandre Quessy wrote:
>>Though, as far as I know, PB is not transfered in clear text. That
>>means it's a little harder to debug the TCP streams, using a tool like
>>Wireshark. Am I wrong?
>
>The PB wire format is documented here:
>http://twistedmatrix.com/documents/9.0.0/api/twisted.spread.jelly.html
>
>It's human-readable S-expressions.

Well, sort of...

Jelly is the first stage of processing, but the output is lists of 
simple Python objects, which you can't put into a socket.  So banana is 
the next stage of processing, which converts the output of jelly into 
bytes.  It's fair to say that banana is not human readable.

Just speaking from personal experience, I've never wanted to get 
wireshark (or similar tools) involved to debug a PB-using applications. 
As an application the developer, the problems encountered when using PB 
are things that are more easily debugged with pdb, unit tests, or 
inserting logging at a higher level (such as the PB message dispatch 
code).  Banana works.  Jelly works.  It's very uncommon for them to get 
in your way.

Jean-Paul


From jakamkon at gmail.com  Thu Feb  4 11:30:59 2010
From: jakamkon at gmail.com (Kuba Konczyk)
Date: Thu, 4 Feb 2010 17:30:59 +0100
Subject: [Twisted-Python] Conch channel blocked
In-Reply-To: <a3b675321002040620p73d67e2eh1a357266804455f1@mail.gmail.com>
References: <a3b675321002021324l5e3761baw7794be341819f88@mail.gmail.com>
	<20100204140157.26099.310807650.divmod.xquotient.137@localhost.localdomain>
	<a3b675321002040620p73d67e2eh1a357266804455f1@mail.gmail.com>
Message-ID: <2e947fbb1002040830k5453c413o2d8b5cb8b07b9a30@mail.gmail.com>

2010/2/4 james bardin <jbardin at bu.edu>:
> On Thu, Feb 4, 2010 at 9:01 AM, ?<exarkun at twistedmatrix.com> wrote:
>>
>> I can't run your example code, since it's not a complete example. ?That
>> makes it harder to point out what's wrong with it. ?However, one thing
>> does strike me as wrong:
>>> ? ? ? ?while chunk:
>>> ? ? ? ? ? ?self.write(chunk)
>>> ? ? ? ? ? ?chunk = f.read(4096)
>>
>> This is a pattern you typically want to avoid, in Conch or anything else
>> Twisted-based. ?I don't know if SSHChannel is a consumer, but if not it
>> should be, and you should be writing the file using a producer. ?See:
>>
>
> It looked awkward, but the one example in the documentation was my
> only starting point.
> http://twistedmatrix.com/documents/current/conch/howto/conch_client.html
>
> This is only a slightly modified version of that example, which writes
> directly through the session channel, which makes sense in the
> ssh-protocol, but apparently not here.
>
>
>> http://twistedmatrix.com/documents/current/core/howto/producers.html
>>>
>
> Thanks. I'll see if I can relate that into conch.
>
>>>Does anyone know if any projects making good use of twisted.conch,
>>>where I can see the source in action, and in depth?
>>
>> Mantissa uses Twisted Conch a bit:
>>
>> http://divmod.org/trac/browser/trunk/Mantissa/xmantissa/terminal.py
>>
>> But you won't find any code sending any exec requests there.
>>
>
> That's OK. any little bit helps.
> I have a twisted service, and it needs to tunnel some information
> through an ssh channel. Although this would take me a couple minutes
> with another library, I feel I should be able to make use of what's
> already built in to twisted, and not add another dependency.
Maybe you can use connection forwarding in conch? Have a look at
http://twistedmatrix.com/trac/browser/trunk/twisted/conch/scripts/conch.py
to see how the forwarding API works.

Kuba
>
> -jim
>


From ssteinerx at gmail.com  Thu Feb  4 12:07:06 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 4 Feb 2010 12:07:06 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <D685EBDD-3589-43CF-A838-CA02408D5F42@twistedmatrix.com>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<D685EBDD-3589-43CF-A838-CA02408D5F42@twistedmatrix.com>
Message-ID: <591BB37C-3D2B-4E4D-AAF3-00AB87E49A59@gmail.com>


On Jan 31, 2010, at 7:05 PM, Glyph Lefkowitz wrote:

> On Jan 31, 2010, at 5:26 PM, exarkun at twistedmatrix.com wrote:
> 
>> If there are enough interested people, there will be a Twisted sprint at 
>> PyCon this year.  If you'll be at PyCon and are interested in sprinting 
>> on some Twisted topic, give a shout.  Also, let us know what specific 
>> topics you're interested in so we can let other people know what to 
>> expect in the general announcement.
> 
> I will be there for one day of the sprints.  I'm interested in web2

By "web2" do you mean porting more of web2 back to web?

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100204/0a661745/attachment.htm 

From ssteinerx at gmail.com  Thu Feb  4 16:16:09 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 4 Feb 2010 16:16:09 -0500
Subject: [Twisted-Python] web2 -> web ToDo List
Message-ID: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>

While I see tickets in the tracker for web2 and others for web, I couldn't find a 'cherry pick' list of things to be moved from web2 back into web.

Is there one?

Thanks,

S



From kevin.horn at gmail.com  Fri Feb  5 13:15:46 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 12:15:46 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
Message-ID: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>

This time on "How the Docs Conversion Turns"...

Moving along at about the same pace, but this time have some very visible
results!

Here's the latest:

    - The generated toctree directives now preserve the order of the links
      from the original source documents.  This makes the "prev"/"next"
links
      work in a sane fashion in the resulting Sphinx docs.

    - Comments in Lore docs are now translated properly.

    - You want Trac integration?  I got your Trac integration right here!

      http://twistedsphinx.funsize.net/

      OK, so it's not quite done yet, but I was pretty impressed at the
      results of what amounts to about a day's work.  It still needs some
      tweaks here and there, but I'm mostly satisfied with it.  If there
      are any CSS gurus out there who are willing to take a look at this,
      there are a few spots that are giving me fits.  Send me an email or
      look me up on IRC.

      In any case, I'd appreciate it if everyone would take a look and
      tell me what they think.

      (Disclaimer: I haven't really tested this in anything but Firefox,
except
      for a brief glance in IE, so if people could test it out in Safari,
etc.
      that would be helpful)

    - The previous look (which was just the default theme, with a color
      scheme to match the Twisted website) has been moved into it's own
      Sphinx theme.  Sphinx's theme inheritance made this really easy.
      This way people can build the docs with the "old" look if they wish,
      or maybe we can use it for docs tarballs or .CHM files or something.

Still to come:

    - <code class="API"> tags still need handling.

    - Certain links need special handling as they don't quite display
properly.

    - "Inline markup" still needs a bit more work.

    - XHTML entities need resolving, but as I've mentioned previously, this
      will probably be the very last thing I address.

All in all, I think this is starting to come together.  I'm hoping to have
the rest completed by PyCon, but if I don't manage that, I'll probably
sprint on this on Monday.

code is here: http://bitbucket.org/khorn/lore2sphinx/

current converted docs here: http://twistedsphinx.funsize.net/

Until next time..


Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/b302cb33/attachment.htm 

From terry at jon.es  Fri Feb  5 14:00:27 2010
From: terry at jon.es (Terry Jones)
Date: Fri, 5 Feb 2010 14:00:27 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: Your message at 12:15:46 on Friday, 5 February 2010
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
Message-ID: <19308.27339.33450.515148@jon.es>

Hi Kevin

I think this is looking really good. Here are a few superficial / quick
comments.

 - It looks fine under Google chrome

 - You could reduce visual repetition / density of some of the high-level
   pages by taking out a word like "Documentation" which appears in the
   heading and on every line of things like this:

         Twisted Documentation Table of Contents
            Twisted Conch Documentation
            Twisted Core Documentation
            Historical Documents
            Twisted Lore Documentation
            Twisted Mail Documentation
            Twisted Names Documentation
            Twisted Pair Documentation
            Twisted VFS Documentation
            Twisted Web Documentation
            Twisted Web2 Documentation
            Twisted Words Documentation

   See also http://twistedsphinx.funsize.net/contents.html which is very
   cluttered with repeated content.

   I realize these are probably just being picked up out of the .rst header
   line, and that one of those documents when seen in isolation probably
   should have a full title. I'm not sure how best to simplify the
   top-level, though I guess it's possible to extend the sphinx layout.html
   and override something... may be more trouble than it's worth.

 - I think it would improve appearance a little to have a non-intrusive
   border around the green source code boxes.

I'll see if I can find/make time to have a look at the CSS.

Terry


From terry at jon.es  Fri Feb  5 14:11:28 2010
From: terry at jon.es (Terry Jones)
Date: Fri, 5 Feb 2010 14:11:28 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: Your message at 14:00:27 on Friday, 5 February 2010
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
Message-ID: <19308.28000.743189.199484@jon.es>

>  - It looks fine under Google chrome

Argh, having said that, I just noticed the table of contents is below and
to the right of the main page content.  An example page that exhibits this
is http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html

Terry


From kevin.horn at gmail.com  Fri Feb  5 14:19:00 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 13:19:00 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <19308.27339.33450.515148@jon.es>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
Message-ID: <562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>

On Fri, Feb 5, 2010 at 1:00 PM, Terry Jones <terry at jon.es> wrote:

> Hi Kevin
>
> I think this is looking really good. Here are a few superficial / quick
> comments.
>
>  - It looks fine under Google chrome
>

Good to hear!

  - You could reduce visual repetition / density of some of the high-level
>   pages by taking out a word like "Documentation" which appears in the
>   heading and on every line of things like this:
>
>         Twisted Documentation Table of Contents
>            Twisted Conch Documentation
>            Twisted Core Documentation
>            Historical Documents
>            Twisted Lore Documentation
>            Twisted Mail Documentation
>            Twisted Names Documentation
>            Twisted Pair Documentation
>            Twisted VFS Documentation
>            Twisted Web Documentation
>            Twisted Web2 Documentation
>            Twisted Words Documentation
>
>   See also http://twistedsphinx.funsize.net/contents.html which is very
>   cluttered with repeated content.
>
>   I realize these are probably just being picked up out of the .rst header
>   line, and that one of those documents when seen in isolation probably
>   should have a full title. I'm not sure how best to simplify the
>   top-level, though I guess it's possible to extend the sphinx layout.html
>   and override something... may be more trouble than it's worth.
>

A lot of this is because the auto-generated TOC is being shown, and it is
indeed picking up the document titles out of the source file it happens to
be pointing to.  In the final version, I'm thinking we won't really need to
show the toctrees at all, since most of the docs have index files already
(which I'm generating the toctree directives from), so most of this will
"fix itself".


>  - I think it would improve appearance a little to have a non-intrusive
>   border around the green source code boxes.
>

Not a bad idea.  Or maybe an "outline" instead of a "border"?


> I'll see if I can find/make time to have a look at the CSS.
>

That would be really great.  There are a few things that are driving me
bonkers.  For example: the prev/next/index links on the right hand side of
the gray navbar are 1 freakin' pixel lower than the "breadcrumb" links on
the left hand side of the same navbar () at least on this machine), and I
have no idea why.


> Terry
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/927a462a/attachment.htm 

From kevin.horn at gmail.com  Fri Feb  5 14:21:56 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 13:21:56 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <19308.28000.743189.199484@jon.es>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es> <19308.28000.743189.199484@jon.es>
Message-ID: <562bcc11002051121t1c2d2201kb17c7009384bc0c4@mail.gmail.com>

On Fri, Feb 5, 2010 at 1:11 PM, Terry Jones <terry at jon.es> wrote:

> >  - It looks fine under Google chrome
>
> Argh, having said that, I just noticed the table of contents is below and
> to the right of the main page content.  An example page that exhibits this
> is http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html
>
>
I think this has to do with the (extremely hackish, and certainly not very
solid) way that the layout is done at the moment.  It's a combination of
Trac and Sphinx layout, so it ends up kinda goofy, with strange floats and
negative margins and whatnot (though not in a way that makes sense to me).

I don't see the problem you describe unless I shrink my browser down below a
certain minimum size.  It could certainly stand improvement.


> Terry
>
>
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/0c13ab1e/attachment.htm 

From ssteinerx at gmail.com  Fri Feb  5 14:22:19 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 5 Feb 2010 14:22:19 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <19308.28000.743189.199484@jon.es>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<19308.28000.743189.199484@jon.es>
Message-ID: <8CEAF4A9-774A-4AD6-B42F-8F6476DE6ABB@gmail.com>


On Feb 5, 2010, at 2:11 PM, Terry Jones wrote:

>> - It looks fine under Google chrome
> 
> Argh, having said that, I just noticed the table of contents is below and
> to the right of the main page content.  An example page that exhibits this
> is http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html

It looks fine in Firefox and I'll bet if you just make sure these 4 errors are cleared up, it'll be fine in Chrome, too.

http://validator.w3.org/check?verbose=1&uri=http%3A%2F%2Ftwistedsphinx.funsize.net%2Fprojects%2Fconch%2Fhowto%2Fconch_client.html

S



From ssteinerx at gmail.com  Fri Feb  5 14:25:42 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 5 Feb 2010 14:25:42 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <19308.28000.743189.199484@jon.es>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<19308.28000.743189.199484@jon.es>
Message-ID: <87DED872-6693-4CE2-A36E-C89F3C0F6724@gmail.com>


On Feb 5, 2010, at 2:11 PM, Terry Jones wrote:

>> - It looks fine under Google chrome
> 
> Argh, having said that, I just noticed the table of contents is below and
> to the right of the main page content.  An example page that exhibits this
> is http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html

Looks fine in Chrome 4.0.249.49 (35163) beta on OS X.  

Gotta love that version number; looks like a Microsoft IE version number; scary.

S



From kevin.horn at gmail.com  Fri Feb  5 14:26:44 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 13:26:44 -0600
Subject: [Twisted-Python] Lore 2 Sphinx addendum: Divmod docs
Message-ID: <562bcc11002051126l2f6554bah7377545ab41c7d74@mail.gmail.com>

For those that are interested, my current Sphinx versions of the docs for
the 3 Divmod projects that have Lore-format docs (Epsilon, Mantissa, and
Nevow) are here:

http://divmodsphinx.funsize.net/

They just use the default Sphinx theme at the moment.

Enjoy!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/0371985c/attachment.htm 

From terry at jon.es  Fri Feb  5 14:33:28 2010
From: terry at jon.es (Terry Jones)
Date: Fri, 5 Feb 2010 14:33:28 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: Your message at 13:19:00 on Friday, 5 February 2010
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
Message-ID: <19308.29320.906563.206155@jon.es>

Hi Kevin

I just tried building under Python 2.5.2 and got this:

    $ python lore2sphinx.py
    Traceback (most recent call last):
      File "lore2sphinx.py", line 32, in <module>
        from table import Table
      File "/home/terry/s/net/lore2sphinx/table.py", line 214
        row_lines = list(izip_longest(*row_split, fillvalue=''))
                                                          ^
    SyntaxError: invalid syntax


From kevin.horn at gmail.com  Fri Feb  5 15:16:50 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 14:16:50 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <19308.29320.906563.206155@jon.es>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
	<19308.29320.906563.206155@jon.es>
Message-ID: <562bcc11002051216s3c114566ld53e0e59e77218f1@mail.gmail.com>

On Fri, Feb 5, 2010 at 1:33 PM, Terry Jones <terry at jon.es> wrote:

> Hi Kevin
>
> I just tried building under Python 2.5.2 and got this:
>
>    $ python lore2sphinx.py
>    Traceback (most recent call last):
>      File "lore2sphinx.py", line 32, in <module>
>        from table import Table
>      File "/home/terry/s/net/lore2sphinx/table.py", line 214
>        row_lines = list(izip_longest(*row_split, fillvalue=''))
>                                                          ^
>    SyntaxError: invalid syntax
>
> From a quick look at table.py, I don't see the problem.  I have to go to a
> meeting now, so can't dig into it ATM. Also, I have Spinx 0.6.3 installed,
> not 0.6.4
>

That's odd...I have no idea what's going on there.  I'm actually kind of
surprised you even got that far...see below.


> BTW, why is there a Python 2.6 requirement?  I wrote all the FluidDB docs
> in Sphinx with 2.5 (http://doc.fluidinfo.com/fluidDB/).
>
> Terry
>

The original reason for it was because I wanted to use (and am using)
os.path.relpath, which was (according to the Python docs) introduced in
Python 2.6.  It also happeed to be what I had installed on this machine.
Since I decided to use 2.6, though, some other 2.6-only stuff might have
snuck in, though nothing comes to mind at the moment.

If you feel like modifying the code to work on 2.5, please feel free, though
since this tool should only be used "for real" a couple of times, I don't
think it's worth spending a whole lot of effort on, unless you just feel
like helping out and are stuck on 2.5.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/c1596f30/attachment.htm 

From kevin.horn at gmail.com  Fri Feb  5 15:18:56 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 14:18:56 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <562bcc11002051216s3c114566ld53e0e59e77218f1@mail.gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
	<19308.29320.906563.206155@jon.es>
	<562bcc11002051216s3c114566ld53e0e59e77218f1@mail.gmail.com>
Message-ID: <562bcc11002051218n895830dgd4f6aa1ca4e214f7@mail.gmail.com>

On Fri, Feb 5, 2010 at 2:16 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Fri, Feb 5, 2010 at 1:33 PM, Terry Jones <terry at jon.es> wrote:
>
>> Hi Kevin
>>
>> I just tried building under Python 2.5.2 and got this:
>>
>>    $ python lore2sphinx.py
>>    Traceback (most recent call last):
>>      File "lore2sphinx.py", line 32, in <module>
>>        from table import Table
>>      File "/home/terry/s/net/lore2sphinx/table.py", line 214
>>        row_lines = list(izip_longest(*row_split, fillvalue=''))
>>                                                          ^
>>    SyntaxError: invalid syntax
>>
>> From a quick look at table.py, I don't see the problem.  I have to go to a
>> meeting now, so can't dig into it ATM. Also, I have Spinx 0.6.3 installed,
>> not 0.6.4
>>
>
> That's odd...I have no idea what's going on there.  I'm actually kind of
> surprised you even got that far...see below.
>
>
>
After looking at this some more, it looks as though "izip_longest" is the
culprit...introduced in 2.6.

Why its giving a syntax error, though, is beyond me.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/d4878428/attachment.htm 

From mithrandi at mithrandi.net  Fri Feb  5 15:38:33 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 5 Feb 2010 22:38:33 +0200
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <562bcc11002051218n895830dgd4f6aa1ca4e214f7@mail.gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
	<19308.29320.906563.206155@jon.es>
	<562bcc11002051216s3c114566ld53e0e59e77218f1@mail.gmail.com>
	<562bcc11002051218n895830dgd4f6aa1ca4e214f7@mail.gmail.com>
Message-ID: <f5eea9171002051238i6ee19123i16fb29615ad0172f@mail.gmail.com>

On Fri, Feb 5, 2010 at 10:18 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> After looking at this some more, it looks as though "izip_longest" is the
> culprit...introduced in 2.6.
>
> Why its giving a syntax error, though, is beyond me.

The problem is the function call syntax:

>>>        row_lines = list(izip_longest(*row_split, fillvalue=''))
>>>                                                          ^
>>>    SyntaxError: invalid syntax

You have keyword arguments after *args, and this is only valid in 2.6 and up.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From kevin.horn at gmail.com  Fri Feb  5 15:44:44 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 14:44:44 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <8CEAF4A9-774A-4AD6-B42F-8F6476DE6ABB@gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es> <19308.28000.743189.199484@jon.es>
	<8CEAF4A9-774A-4AD6-B42F-8F6476DE6ABB@gmail.com>
Message-ID: <562bcc11002051244y2975d61cr795a9a04fff1d222@mail.gmail.com>

On Fri, Feb 5, 2010 at 1:22 PM, ssteinerX at gmail.com <ssteinerx at gmail.com>wrote:

>
> On Feb 5, 2010, at 2:11 PM, Terry Jones wrote:
>
> >> - It looks fine under Google chrome
> >
> > Argh, having said that, I just noticed the table of contents is below and
> > to the right of the main page content.  An example page that exhibits
> this
> > is
> http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html
>
> It looks fine in Firefox and I'll bet if you just make sure these 4 errors
> are cleared up, it'll be fine in Chrome, too.
>
>
> http://validator.w3.org/check?verbose=1&uri=http%3A%2F%2Ftwistedsphinx.funsize.net%2Fprojects%2Fconch%2Fhowto%2Fconch_client.html
>
> S
>
>
>
Hmmm...that part of the template is straight out of Sphinx proper.  I wonder
if it's because the Sphinx templates use a TRANSITIONAL doctype, while I'm
using STRICT (since that's what the Trac site uses)...

I'm not entirely convinced that these are real errors, though.  The <input>
elements are inside a <form>, which are only inside <div>s (and of course
<body> and <html>).

(goes looking on the intarwebz)

Huh.  Apparently you aren't allowed to put <input>s directly in <form>s.
You have to use a <p> or <fieldset> or something to wrap it.  That's
extremely goofy.  Wonder why I've never run into that before...

Guess I don't use XHTML STRICT very often.  Seems it's valid in
TRANSITIONAL.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/cb14f0ea/attachment.htm 

From kevin.horn at gmail.com  Fri Feb  5 15:48:14 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 14:48:14 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <f5eea9171002051238i6ee19123i16fb29615ad0172f@mail.gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
	<19308.29320.906563.206155@jon.es>
	<562bcc11002051216s3c114566ld53e0e59e77218f1@mail.gmail.com>
	<562bcc11002051218n895830dgd4f6aa1ca4e214f7@mail.gmail.com>
	<f5eea9171002051238i6ee19123i16fb29615ad0172f@mail.gmail.com>
Message-ID: <562bcc11002051248s362314e3m167259682e5385ab@mail.gmail.com>

On Fri, Feb 5, 2010 at 2:38 PM, Tristan Seligmann
<mithrandi at mithrandi.net>wrote:

> On Fri, Feb 5, 2010 at 10:18 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> > After looking at this some more, it looks as though "izip_longest" is the
> > culprit...introduced in 2.6.
> >
> > Why its giving a syntax error, though, is beyond me.
>
> The problem is the function call syntax:
>
> >>>        row_lines = list(izip_longest(*row_split, fillvalue=''))
> >>>                                                          ^
> >>>    SyntaxError: invalid syntax
>
> You have keyword arguments after *args, and this is only valid in 2.6 and
> up.
> --
> mithrandi, i Ainil en-Balandor, a faer Ambar
>
>
Ah, thanks for that.  I don't typically use that syntax, and I thought it
looked kind of goofy, but that's the way the signature for izip_longest is
in the docs, so I used it there.  And since it was introduced in 2.6...

All makes sense now...

Thanks again!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/d5db70f7/attachment.htm 

From ssteinerx at gmail.com  Fri Feb  5 16:45:57 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 5 Feb 2010 16:45:57 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <562bcc11002051244y2975d61cr795a9a04fff1d222@mail.gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<19308.28000.743189.199484@jon.es>
	<8CEAF4A9-774A-4AD6-B42F-8F6476DE6ABB@gmail.com>
	<562bcc11002051244y2975d61cr795a9a04fff1d222@mail.gmail.com>
Message-ID: <4653822C-F91D-421A-9CAC-51001A30B83B@gmail.com>


On Feb 5, 2010, at 3:44 PM, Kevin Horn wrote:

> On Fri, Feb 5, 2010 at 1:22 PM, ssteinerX at gmail.com <ssteinerx at gmail.com> wrote:
> 
> On Feb 5, 2010, at 2:11 PM, Terry Jones wrote:
> 
> >> - It looks fine under Google chrome
> >
> > Argh, having said that, I just noticed the table of contents is below and
> > to the right of the main page content.  An example page that exhibits this
> > is http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html
> 
> It looks fine in Firefox and I'll bet if you just make sure these 4 errors are cleared up, it'll be fine in Chrome, too.
> 
> http://validator.w3.org/check?verbose=1&uri=http%3A%2F%2Ftwistedsphinx.funsize.net%2Fprojects%2Fconch%2Fhowto%2Fconch_client.html
> 
> S
> 
> 
> 
> Hmmm...that part of the template is straight out of Sphinx proper.  I wonder if it's because the Sphinx templates use a TRANSITIONAL doctype, while I'm using STRICT (since that's what the Trac site uses)...
> 
> I'm not entirely convinced that these are real errors, though.  The <input> elements are inside a <form>, which are only inside <div>s (and of course <body> and <html>).
> 
> (goes looking on the intarwebz)
> 
> Huh.  Apparently you aren't allowed to put <input>s directly in <form>s.  You have to use a <p> or <fieldset> or something to wrap it.  That's extremely goofy.  Wonder why I've never run into that before...
> 
> Guess I don't use XHTML STRICT very often.  Seems it's valid in TRANSITIONAL.

It's still not valid; it's just one of those things that's set to be ignored in "TRANSITIONAL"  'cause it's so common.

XHTML STRICT pretty much eliminates cross-browser issues...except for IE, of course.  

At least you have a fighting chance if it passes STRICT, otherwise you can chase rendering bugs around in a circle forever.  Works here, doesn't work there...tweak...great, works there, uh oh, doesn't work here...tweak...etc.

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/bb0fc552/attachment-0001.htm 

From mebly5343 at gmail.com  Fri Feb  5 19:23:04 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Fri, 5 Feb 2010 19:23:04 -0500
Subject: [Twisted-Python] Question about ReconnectingClientFactory and conch
	StatefulTelnetProtocol
Message-ID: <dc408fe51002051623w2cd97611kada178fad8df5030@mail.gmail.com>

Good day, everyone:

Continuing my effort to learn Python and Twisted, I need to create several
Telnet clients and somehow send two arguments to each and receive data from
each.

I tried the same pattern that I used with the Telnet server and created a
Factory, actually a ReconnectingClientFactory.  It doesn't work.  My source
and the error (no attribute 'factory') are below.

Do the "conch" protocols not support a factory?  Is there an alternative
that provides a Telnet client with a lineReceived method?

What am I doing wrong?  :-)  I suppose I could pass arguments to
ClusterClient by overriding __init__, but that seems inelegant.

Thanks for your help.

Mark

----------

from twisted.internet.protocol import Protocol, ReconnectingClientFactory
from sys import stdout

from twisted.internet import reactor

from twisted.conch.telnet import StatefulTelnetProtocol

class ClusterClient(StatefulTelnetProtocol):

    def lineReceived(self, data):
        print self.factory.prompt, self.factory.call
        print data

class ClusterClientFactory(ReconnectingClientFactory):

    protocol = ClusterClient

    def __init__(self):
        self.prompt = "call:"
        self.call = "kd4d"

    def startedConnecting(self, connector):
        print 'Started to connect.'

    def buildProtocol(self, addr):
        print 'Connected.'
        self.resetDelay()
        return ClusterClient()

    def clientConnectionLost(self, connector, reason):
        print 'Lost connection.  Reason:', reason
        ReconnectingClientFactory.clientConnectionLost(self, connector,
reason)

    def clientConnectionFailed(self, connector, reason):
        print 'Connection failed. Reason:', reason
        ReconnectingClientFactory.clientConnectionFailed(self, connector,
                                                         reason)
if __name__ == '__main__':
    factory = ClusterClientFactory()
    factory.maxDelay = 120  #  two minutes
    print factory.prompt, factory.call
    reactor.connectTCP("localhost", 8023, factory)


    reactor.run()

-----------------

  File "ClusterClient.py", line 11, in lineReceived
    print self.factory.prompt, self.factory.call
exceptions.AttributeError: ClusterClient instance has no attribute 'factory'
Lost connection.  Reason: [Failure instance: Traceback (failure with no
frames):
 <type 'exceptions.AttributeError'>: ClusterClient instance has no attribute
'fa
ctory'
]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/a725d2ac/attachment.htm 

From ltaylor.volks at gmail.com  Fri Feb  5 20:04:03 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Fri, 05 Feb 2010 18:04:03 -0700
Subject: [Twisted-Python] Question about ReconnectingClientFactory and
 conch	StatefulTelnetProtocol
In-Reply-To: <dc408fe51002051623w2cd97611kada178fad8df5030@mail.gmail.com>
References: <dc408fe51002051623w2cd97611kada178fad8df5030@mail.gmail.com>
Message-ID: <4B6CC003.7020802@gmail.com>

On 2/5/10 5:23 PM, Mark Bailey wrote:
> Good day, everyone:
> 
> Continuing my effort to learn Python and Twisted, I need to create
> several Telnet clients and somehow send two arguments to each and
> receive data from each.
> 
> I tried the same pattern that I used with the Telnet server and created
> a Factory, actually a ReconnectingClientFactory.  It doesn't work.  My
> source and the error (no attribute 'factory') are below.
> 
> Do the "conch" protocols not support a factory?  Is there an alternative
> that provides a Telnet client with a lineReceived method?
> 
> What am I doing wrong?  :-)  I suppose I could pass arguments to
> ClusterClient by overriding __init__, but that seems inelegant.
> 
> Thanks for your help.
> 
> Mark
>
> ----------
> 
> from twisted.internet.protocol import Protocol, ReconnectingClientFactory
> from sys import stdout
> 
> from twisted.internet import reactor
> 
> from twisted.conch.telnet import StatefulTelnetProtocol
> 
> class ClusterClient(StatefulTelnetProtocol):
> 
>     def lineReceived(self, data):
>         print self.factory.prompt, self.factory.call
>         print data
> 
> class ClusterClientFactory(ReconnectingClientFactory):
> 
>     protocol = ClusterClient
> 
>     def __init__(self):
>         self.prompt = "call:"
>         self.call = "kd4d"
> 
>     def startedConnecting(self, connector):
>         print 'Started to connect.'
> 
>     def buildProtocol(self, addr):
>         print 'Connected.'
>         self.resetDelay()
>         return ClusterClient()
> 
>     def clientConnectionLost(self, connector, reason):
>         print 'Lost connection.  Reason:', reason
>         ReconnectingClientFactory.clientConnectionLost(self, connector,
> reason)
> 
>     def clientConnectionFailed(self, connector, reason):
>         print 'Connection failed. Reason:', reason
>         ReconnectingClientFactory.clientConnectionFailed(self, connector,
>                                                          reason)
> if __name__ == '__main__':
>     factory = ClusterClientFactory()
>     factory.maxDelay = 120  #  two minutes
>     print factory.prompt, factory.call
>     reactor.connectTCP("localhost", 8023, factory)
> 
> 
>     reactor.run()
> 
> -----------------
> 
>   File "ClusterClient.py", line 11, in lineReceived
>     print self.factory.prompt, self.factory.call
> exceptions.AttributeError: ClusterClient instance has no attribute 'factory'
> Lost connection.  Reason: [Failure instance: Traceback (failure with no
> frames):
>  <type 'exceptions.AttributeError'>: ClusterClient instance has no
> attribute 'fa
> ctory'
> ]
> 



Hi Mark,

The problem is that you have overridden buildProtocol in your Factory
and not set the factory attribute on the protocol instance
(ClusterClient instance has no attribute 'factory').

buildProtocol is responsible for creating the protocol instance and the
default implementation takes care of assigning the factory to the protocol.

see the source for Factory and buildProtocol...it's very concise:

http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted/internet/protocol.py#L87
http://twistedmatrix.com/documents/9.0.0/api/twisted.internet.protocol.Factory.html#buildProtocol


So something like this should work in your case:

    def buildProtocol(self, addr):
        print 'Connected.'
        self.resetDelay()
        p = self.protocol()
        p.factory = self
	return p


This doc is also helpful for understanding the relationship between
Protocols and Factories:
http://twistedmatrix.com/documents/current/core/howto/servers.html

It may be worth emphasizing that there's no real magic going on
here...you're just assigning a python object as an attribute of the
protocol instance.


Lucas



From mebly5343 at gmail.com  Fri Feb  5 20:29:09 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Fri, 5 Feb 2010 20:29:09 -0500
Subject: [Twisted-Python] Question about ReconnectingClientFactory and
	conch StatefulTelnetProtocol
In-Reply-To: <4B6CC003.7020802@gmail.com>
References: <dc408fe51002051623w2cd97611kada178fad8df5030@mail.gmail.com>
	<4B6CC003.7020802@gmail.com>
Message-ID: <dc408fe51002051729h3859bf1bu11c732e6dcab264c@mail.gmail.com>

Thanks, Lucas.  I spent several hours struggling with this.  The source code
DOES make it very obvious.  :-)  I hadn't realized from the buildProtocol
API documentation that it assigned the factory attribute to the protocol
instance.  It's so obvious now... :-)

And, now, I understand the "magic" of assigning the protocol to a factory
which I did not before.

It runs fine!

Mark

On Fri, Feb 5, 2010 at 8:04 PM, Lucas Taylor <ltaylor.volks at gmail.com>wrote:

> On 2/5/10 5:23 PM, Mark Bailey wrote:
>
> Hi Mark,
>
> The problem is that you have overridden buildProtocol in your Factory
> and not set the factory attribute on the protocol instance
> (ClusterClient instance has no attribute 'factory').
>
> buildProtocol is responsible for creating the protocol instance and the
> default implementation takes care of assigning the factory to the protocol.
>
> see the source for Factory and buildProtocol...it's very concise:
>
>
> http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted/internet/protocol.py#L87
>
> http://twistedmatrix.com/documents/9.0.0/api/twisted.internet.protocol.Factory.html#buildProtocol
>
>
> So something like this should work in your case:
>
>    def buildProtocol(self, addr):
>        print 'Connected.'
>        self.resetDelay()
>         p = self.protocol()
>        p.factory = self
>        return p
>
>
> This doc is also helpful for understanding the relationship between
> Protocols and Factories:
> http://twistedmatrix.com/documents/current/core/howto/servers.html
>
> It may be worth emphasizing that there's no real magic going on
> here...you're just assigning a python object as an attribute of the
> protocol instance.
>
>
> Lucas
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/181202ba/attachment.htm 

From screwtape at froup.com  Fri Feb  5 22:23:14 2010
From: screwtape at froup.com (Timothy Allen)
Date: Sat, 6 Feb 2010 14:23:14 +1100
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
Message-ID: <20100206142314.5be72fb7@hepzibah>

On Fri, 5 Feb 2010 13:19:00 -0600
Kevin Horn <kevin.horn at gmail.com> wrote:
> > I'll see if I can find/make time to have a look at the CSS.
> 
> That would be really great.  There are a few things that are driving
> me bonkers.  For example: the prev/next/index links on the right hand
> side of the gray navbar are 1 freakin' pixel lower than the
> "breadcrumb" links on the left hand side of the same navbar () at
> least on this machine), and I have no idea why.

After spending a few minutes poking about with Firebug, the reason
becomes clear:

 - In twistedtrac.css line 38, the navbar list items are set to
   "display: inline", which makes them layout like "<span>" and stack
   up nicely on the left, but also makes them ignore certain vertical
   adjustments like margin and padding.
 - In twistedtrac.css line 42, the navbar list items on the right are
   set to "float: right", which makes them stack up nicely on the right
   but also happens to make them respond to margin and padding again.
 - In trac.css line 179, the navbar list items are set to "padding:
   0.25em 0", giving them vertical padding. This is ignored by the
   inline list items on the left, but respected by the floated list
   items on the right.

I haven't studied the CSS of the main Twisted site, so I don't know how
they get around it there.

One easy way around it for the docs might be to change "display:
inline" to "float: left", which also makes them stack up on the left,
and behave consistently with the ones on the right.


From kevin.horn at gmail.com  Sat Feb  6 00:02:13 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 23:02:13 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <20100206142314.5be72fb7@hepzibah>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
	<20100206142314.5be72fb7@hepzibah>
Message-ID: <562bcc11002052102g5fab751ar7683ed576ecb1ef5@mail.gmail.com>

On Fri, Feb 5, 2010 at 9:23 PM, Timothy Allen <screwtape at froup.com> wrote:

> On Fri, 5 Feb 2010 13:19:00 -0600
> Kevin Horn <kevin.horn at gmail.com> wrote:
> > > I'll see if I can find/make time to have a look at the CSS.
> >
> > That would be really great.  There are a few things that are driving
> > me bonkers.  For example: the prev/next/index links on the right hand
> > side of the gray navbar are 1 freakin' pixel lower than the
> > "breadcrumb" links on the left hand side of the same navbar () at
> > least on this machine), and I have no idea why.
>
> After spending a few minutes poking about with Firebug, the reason
> becomes clear:
>
>  - In twistedtrac.css line 38, the navbar list items are set to
>   "display: inline", which makes them layout like "<span>" and stack
>   up nicely on the left, but also makes them ignore certain vertical
>   adjustments like margin and padding.
>  - In twistedtrac.css line 42, the navbar list items on the right are
>   set to "float: right", which makes them stack up nicely on the right
>   but also happens to make them respond to margin and padding again.
>  - In trac.css line 179, the navbar list items are set to "padding:
>   0.25em 0", giving them vertical padding. This is ignored by the
>   inline list items on the left, but respected by the floated list
>   items on the right.
>

Brilliant!

It may only have taken you a few minutes, but it would have taken
me...considerably longer. :)


> I haven't studied the CSS of the main Twisted site, so I don't know how
> they get around it there.
>

On the main twisted site, they don't have anything on the left...not sure
how the Sphinx templates handle it though...


> One easy way around it for the docs might be to change "display:
> inline" to "float: left", which also makes them stack up on the left,
> and behave consistently with the ones on the right.
>
>
Actually that jacks up the height on the navbar completely (at least for
me).

Overriding the padding in twistedtrac.css seems to work though, so I think
that's what I'll go with.

Thanks for the help!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100205/6fb6d47e/attachment-0001.htm 

From sleeepd at gmail.com  Sat Feb  6 01:30:45 2010
From: sleeepd at gmail.com (=?GB2312?B?0OzHxw==?=)
Date: Sat, 6 Feb 2010 14:30:45 +0800
Subject: [Twisted-Python] Simple gateway server
Message-ID: <4fe037b11002052230y400383c7tdc37660bd12cb03f@mail.gmail.com>

I need to write a gateway server that forwarding data between client and
data server?I use a Protocol instance for incoming connection from client,
and creating another Protocol instance to connect data server when received
data from client:

Exp.1
...
Class ToClientProtocol(Protocol):
""" Protocol for incoming connection from client. """

    def connectionMade(self):

        self.data_server = reactor.connectTCP('localhost', 8888,
DataServerFactory())        # make connection to data server

        self.data_server.transport.write('hello!')         # send a message
to data server, but not work
...

The connetion to data server can be made, BUT the data server received
nothing. self.data_server.transport.write() not work.

It will work if I write like that:
Exp. 2
...
Class ToClientProtocol(Protocol):
""" Protocol for incoming connection from client. """

    def connectionMade(self):

        self.data_server = reactor.connectTCP('localhost', 8888,
DataServerFactory(self))        # make connection to data server

Class DataServer(Protocol):
""" Protocol for connection to data server. """

    def __init__(self, client):
        self.client = client

    def connectionMade(self):
        self.client.data_server.transport.wirte('hello!')        # send
message to data server, it's work now!

Class DataServerFactory(self):

    def __init__(self, client):
        self.client = client

    def buildProtocol(self, addr):
        return DataServer(self.client)
...

I don't think this is the best way. Why I can't simply wirte like Exp.1?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100206/e53c9bd4/attachment.htm 

From knezan94 at gmail.com  Sat Feb  6 05:07:25 2010
From: knezan94 at gmail.com (Knezan)
Date: Sat, 6 Feb 2010 11:07:25 +0100
Subject: [Twisted-Python] Fwd: Twisted + python = TELNET server (without
	AUTH)
In-Reply-To: <62a313511002060205x63543164tdd9b38f04e561941@mail.gmail.com>
References: <62a313511002060205x63543164tdd9b38f04e561941@mail.gmail.com>
Message-ID: <62a313511002060207uab34491se43840e367498c8f@mail.gmail.com>

Hi.

I am long time in python and having twisted is good thing.
I want to make telnet server (with python or linux prompt)
but without auth, beacuse i'd use it via serial port (RS232)

ideas?

Greetings, Vatts




-- 
case(word == "ping"): # TABLE TENNIS!!!
   say "pong "+params
   return
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100206/1264b24f/attachment.htm 

From exarkun at twistedmatrix.com  Sat Feb  6 10:31:26 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 15:31:26 -0000
Subject: [Twisted-Python] domish.Element.__getattr__() or
	xpath.XPathQuery
In-Reply-To: <4B6AA5FC.7070302@arimaz.com>
References: <4B6AA5FC.7070302@arimaz.com>
Message-ID: <20100206153126.26099.435133660.divmod.xquotient.501@localhost.localdomain>

On 4 Feb, 10:48 am, gabriel.rossetti at arimaz.com wrote:
>Hello everyone,
>
>I was wondering what you would recommend, accessing nodes via
>domish.Element.__getattr__()
>(e.g. el.node1.node1_1, where el is /msg) or via xpath.XPathQuery()
>(e.g. xpath.XPathQuery("/msg/node1/node1_1").queryForNodes(el)[0])?
>
>I was wondering which would be faster, the __getattr__() is O(n) (in my
>example there are 2 calls) but what about xpath.XPathQuery()?

I don't think you'll find the xpath API to be much more optimized.  I 
haven't used XMPP much, but considering the xpath implementation is 
incomplete (and afaik there's little documentation about what subset is 
supported), I'd stick with the simpler (if still terrible) 
Element.__getattr__.

Jean-Paul


From exarkun at twistedmatrix.com  Sat Feb  6 10:34:44 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 15:34:44 -0000
Subject: [Twisted-Python] web2 -> web ToDo List
In-Reply-To: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>
References: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>
Message-ID: <20100206153444.26099.538054602.divmod.xquotient.508@localhost.localdomain>

On 4 Feb, 09:16 pm, ssteinerx at gmail.com wrote:
>While I see tickets in the tracker for web2 and others for web, I 
>couldn't find a 'cherry pick' list of things to be moved from web2 back 
>into web.
>
>Is there one?

Not really.  It'd be great to have such a list.  Any time anyone brings 
up their use of web2, I ask them what features it provides that caused 
them to select it or prevent them from switching to Twisted Web.  One 
answer that a lot of people give is streaming access to uploads (which 
Twisted Web indeed makes very inconvenient now).  There's a ticket for 
this, #288.  The other answers people tend to give are "I don't know" or 
"nothing in particular".  Sometimes they also say "HTTP/1.1 support", 
but when further questioned about this, they can't actually explain what 
that means.

So, the list of tickets for Web2 -> Web "backporting" seems to currently 
be:

    - #288

Jean-Paul


From exarkun at twistedmatrix.com  Sat Feb  6 10:37:05 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 15:37:05 -0000
Subject: [Twisted-Python] Simple gateway server
In-Reply-To: <4fe037b11002052230y400383c7tdc37660bd12cb03f@mail.gmail.com>
References: <4fe037b11002052230y400383c7tdc37660bd12cb03f@mail.gmail.com>
Message-ID: <20100206153705.26099.430281482.divmod.xquotient.512@localhost.localdomain>

On 06:30 am, sleeepd at gmail.com wrote:
>I need to write a gateway server that forwarding data between client 
>and
>data server002I use a Protocol instance for incoming connection from 
>client,
>and creating another Protocol instance to connect data server when 
>received
>data from client:

You can find an example of this in Twisted itself:

http://twistedmatrix.com/trac/browser/trunk/twisted/protocols/portforward.py
>
>Exp.1
>...
>Class ToClientProtocol(Protocol):
>""" Protocol for incoming connection from client. """
>
>    def connectionMade(self):
>
>        self.data_server = reactor.connectTCP('localhost', 8888,
>DataServerFactory())        # make connection to data server
>
>        self.data_server.transport.write('hello!')         # send a 
>message
>to data server, but not work
>...

Right.  data_server has no transport attribute.  reactor.connectTCP 
doesn't return a protocol, it returns a "connector", which is really not 
useful for very much.  The main thing you can do with it is cancel the 
connection attempt.
>
>The connetion to data server can be made, BUT the data server received
>nothing. self.data_server.transport.write() not work.
>
>It will work if I write like that:
>Exp. 2
>...
>Class ToClientProtocol(Protocol):
>""" Protocol for incoming connection from client. """
>
>    def connectionMade(self):
>
>        self.data_server = reactor.connectTCP('localhost', 8888,
>DataServerFactory(self))        # make connection to data server
>
>Class DataServer(Protocol):
>""" Protocol for connection to data server. """
>
>    def __init__(self, client):
>        self.client = client
>
>    def connectionMade(self):
>        self.client.data_server.transport.wirte('hello!')        # send
>message to data server, it's work now!
>
>Class DataServerFactory(self):
>
>    def __init__(self, client):
>        self.client = client
>
>    def buildProtocol(self, addr):
>        return DataServer(self.client)
>...
>
>I don't think this is the best way. Why I can't simply wirte like 
>Exp.1?

Actually this is a better way.  What in particular do you think is bad 
about it?

Jean-Paul


From exarkun at twistedmatrix.com  Sat Feb  6 10:38:40 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 15:38:40 -0000
Subject: [Twisted-Python] Fwd: Twisted + python = TELNET server
	(without	AUTH)
In-Reply-To: <62a313511002060207uab34491se43840e367498c8f@mail.gmail.com>
References: <62a313511002060205x63543164tdd9b38f04e561941@mail.gmail.com>
	<62a313511002060207uab34491se43840e367498c8f@mail.gmail.com>
Message-ID: <20100206153840.26099.430260500.divmod.xquotient.515@localhost.localdomain>

On 10:07 am, knezan94 at gmail.com wrote:
>Hi.
>
>I am long time in python and having twisted is good thing.
>I want to make telnet server (with python or linux prompt)
>but without auth, beacuse i'd use it via serial port (RS232)
>
>ideas?

Here's an example which uses Twisted to communicate via a serial port:

    http://twistedmatrix.com/documents/current/core/examples/mouse.py

Jean-Paul


From darren at ontrenet.com  Sat Feb  6 11:42:42 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sat, 06 Feb 2010 11:42:42 -0500
Subject: [Twisted-Python] Sending a stream via Protocol?
Message-ID: <1265474562.2805.3.camel@kratos>

Hi,
  I have a simple protocol listening on a port. I send it a text message
(a filename)
and the protocol tries to stream back the bytes of the file. Mostly,
this works
but in some cases, the receiving side receives less bytes than is
written by:

self.transport.write(bytes)

I read the API which says it can receive less than expected bytes or
messages. Why?

So how can I reliably send a sequences of bytes via "dataReceived" in my
protocol?

Thanks for any help!
Darren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100206/f3e25368/attachment.htm 

From valeriy.zamarayev at gmail.com  Sat Feb  6 12:06:59 2010
From: valeriy.zamarayev at gmail.com (Valeriy Zamarayev)
Date: Sat, 6 Feb 2010 19:06:59 +0200
Subject: [Twisted-Python] web2 -> web ToDo List
In-Reply-To: <20100206153444.26099.538054602.divmod.xquotient.508@localhost.localdomain>
References: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>
	<20100206153444.26099.538054602.divmod.xquotient.508@localhost.localdomain>
Message-ID: <BF7D3202-9A60-46C0-97DE-2D0CBF894CB9@gmail.com>

On 6 Feb 2010, 17:34, exarkun at twistedmatrix.com wrote:

> On 4 Feb, 09:16 pm, ssteinerx at gmail.com wrote:
>> While I see tickets in the tracker for web2 and others for web, I
>> couldn't find a 'cherry pick' list of things to be moved from web2  
>> back
>> into web.
>>
>> Is there one?
>
> Not really.  It'd be great to have such a list.  Any time anyone  
> brings
> up their use of web2, I ask them what features it provides that caused
> them to select it or prevent them from switching to Twisted Web.  One
> answer that a lot of people give is streaming access to uploads (which
> Twisted Web indeed makes very inconvenient now).  There's a ticket for
> this, #288.  The other answers people tend to give are "I don't  
> know" or
> "nothing in particular".  Sometimes they also say "HTTP/1.1 support",
> but when further questioned about this, they can't actually explain  
> what
> that means.

I also depend on 100-Continue support. This is somehow related to  
#288, but not
explicitly mentioned. If one wants to stream POST data, it's better to
have 'expect/continue' working. It allows to check various conditions,  
including
authentication before allowing the client to proceed.

Regards,
Valeriy



From exarkun at twistedmatrix.com  Sat Feb  6 12:13:28 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 17:13:28 -0000
Subject: [Twisted-Python] Sending a stream via Protocol?
In-Reply-To: <1265474562.2805.3.camel@kratos>
References: <1265474562.2805.3.camel@kratos>
Message-ID: <20100206171328.26099.373721670.divmod.xquotient.531@localhost.localdomain>

On 04:42 pm, darren at ontrenet.com wrote:
>Hi,
>  I have a simple protocol listening on a port. I send it a text message
>(a filename)
>and the protocol tries to stream back the bytes of the file. Mostly,
>this works
>but in some cases, the receiving side receives less bytes than is
>written by:
>
>self.transport.write(bytes)
>
>I read the API which says it can receive less than expected bytes or
>messages. Why?

That's how TCP works.  Bytes you send with one call to write may be 
split into two or more chunks and delivered to the remote dataReceived 
separately, or bytes you send with two or more calls to write may be 
combined into fewer chunks and delivered to the remote dataReceived all 
as one string.
>
>So how can I reliably send a sequences of bytes via "dataReceived" in 
>my
>protocol?

If you want "framing" - a byte format built on top of the basic 
functionality provided by TCP, allowing you to differentiate bytes 
belonging to different logical messages from each other - then you 
should take a look at some of the protocols in twisted.protocols.basic 
(NetstringReceiver, Int32StringReceiver, etc) or twisted.protocols.amp 
which expands on this idea to a much greater degree.

You can read a lot more about these ideas in this series of articles by 
Itamar Turner-Trauring:

  http://www.xml.com/pub/au/215

Jean-Paul


From exarkun at twistedmatrix.com  Sat Feb  6 12:23:45 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 17:23:45 -0000
Subject: [Twisted-Python] web2 -> web ToDo List
In-Reply-To: <BF7D3202-9A60-46C0-97DE-2D0CBF894CB9@gmail.com>
References: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>
	<20100206153444.26099.538054602.divmod.xquotient.508@localhost.localdomain>
	<BF7D3202-9A60-46C0-97DE-2D0CBF894CB9@gmail.com>
Message-ID: <20100206172345.26099.1877063066.divmod.xquotient.534@localhost.localdomain>

On 05:06 pm, valeriy.zamarayev at gmail.com wrote:
>On 6 Feb 2010, 17:34, exarkun at twistedmatrix.com wrote:
>>On 4 Feb, 09:16 pm, ssteinerx at gmail.com wrote:
>>>While I see tickets in the tracker for web2 and others for web, I
>>>couldn't find a 'cherry pick' list of things to be moved from web2
>>>back
>>>into web.
>>>
>>>Is there one?
>>
>>Not really.  It'd be great to have such a list.  Any time anyone
>>brings
>>up their use of web2, I ask them what features it provides that caused
>>them to select it or prevent them from switching to Twisted Web.  One
>>answer that a lot of people give is streaming access to uploads (which
>>Twisted Web indeed makes very inconvenient now).  There's a ticket for
>>this, #288.  The other answers people tend to give are "I don't
>>know" or
>>"nothing in particular".  Sometimes they also say "HTTP/1.1 support",
>>but when further questioned about this, they can't actually explain
>>what
>>that means.
>
>I also depend on 100-Continue support. This is somehow related to
>#288, but not
>explicitly mentioned. If one wants to stream POST data, it's better to
>have 'expect/continue' working. It allows to check various conditions,
>including
>authentication before allowing the client to proceed.

Awesome, thanks for adding to the list. :)  Now that there are two items 
on it, I've added a section to the end of 
<http://twistedmatrix.com/trac/wiki/TwistedWebPlan>.  I encourage anyone 
with interest in this area to suggest more items for this list.

Jean-Paul


From darren at ontrenet.com  Sat Feb  6 12:30:34 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sat, 06 Feb 2010 12:30:34 -0500
Subject: [Twisted-Python] Sending a stream via Protocol?
In-Reply-To: <20100206171328.26099.373721670.divmod.xquotient.531@localhost.localdomain>
References: <1265474562.2805.3.camel@kratos>
	<20100206171328.26099.373721670.divmod.xquotient.531@localhost.localdomain>
Message-ID: <1265477434.2805.6.camel@kratos>

On Sat, 2010-02-06 at 17:13 +0000, exarkun at twistedmatrix.com wrote:

> On 04:42 pm, darren at ontrenet.com wrote:
> >Hi,
> >  I have a simple protocol listening on a port. I send it a text message
> >(a filename)
> >and the protocol tries to stream back the bytes of the file. Mostly,
> >this works
> >but in some cases, the receiving side receives less bytes than is
> >written by:
> >
> >self.transport.write(bytes)
> >
> >I read the API which says it can receive less than expected bytes or
> >messages. Why?
> 
> That's how TCP works.  Bytes you send with one call to write may be 
> split into two or more chunks and delivered to the remote dataReceived 
> separately, or bytes you send with two or more calls to write may be 
> combined into fewer chunks and delivered to the remote dataReceived all 
> as one string.

Yes, at the lower OSI layers it does. But in most modern programming
languages,
the notion of an I/O stream is built atop it (e.g. sockets will
recombine and order
the packets, but twisted does not?). So naturally, I don't want to
emulate IP in
my Twisted app.


> >
> >So how can I reliably send a sequences of bytes via "dataReceived" in 
> >my
> >protocol?
> 
> If you want "framing" - a byte format built on top of the basic 
> functionality provided by TCP, allowing you to differentiate bytes 
> belonging to different logical messages from each other - then you 
> should take a look at some of the protocols in twisted.protocols.basic 
> (NetstringReceiver, Int32StringReceiver, etc) or twisted.protocols.amp 
> which expands on this idea to a much greater degree.

Ok, cool. I thought this would be easier in Twisted, but I will research
it more.

> 
> You can read a lot more about these ideas in this series of articles by 
> Itamar Turner-Trauring:
> 
>   http://www.xml.com/pub/au/215

Thanks again.

> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100206/953a3d01/attachment.htm 

From exarkun at twistedmatrix.com  Sat Feb  6 12:47:41 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 17:47:41 -0000
Subject: [Twisted-Python] Sending a stream via Protocol?
In-Reply-To: <1265477434.2805.6.camel@kratos>
References: <1265474562.2805.3.camel@kratos>
	<20100206171328.26099.373721670.divmod.xquotient.531@localhost.localdomain>
	<1265477434.2805.6.camel@kratos>
Message-ID: <20100206174741.26099.1374031153.divmod.xquotient.539@localhost.localdomain>

On 05:30 pm, darren at ontrenet.com wrote:
>On Sat, 2010-02-06 at 17:13 +0000, exarkun at twistedmatrix.com wrote:
>>That's how TCP works.  Bytes you send with one call to write may be
>>split into two or more chunks and delivered to the remote dataReceived
>>separately, or bytes you send with two or more calls to write may be
>>combined into fewer chunks and delivered to the remote dataReceived 
>>all
>>as one string.
>
>Yes, at the lower OSI layers it does. But in most modern programming
>languages,
>the notion of an I/O stream is built atop it (e.g. sockets will
>recombine and order
>the packets, but twisted does not?). So naturally, I don't want to
>emulate IP in
>my Twisted app.

I don't think so.  There's simply not enough information available for 
fragmented packets to be recombined, or for coalesced packets to be 
split up again.  This is what the other APIs I mentioned are for: they 
add the necessary information to the underlying TCP byte stream so that 
this can be done.

Ordering is preserved, though, even if you only do what you were trying 
to do, because TCP guarantees ordering.

Jean-Paul


From kevin.horn at gmail.com  Sat Feb  6 13:33:48 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sat, 6 Feb 2010 12:33:48 -0600
Subject: [Twisted-Python] web2 -> web ToDo List
In-Reply-To: <20100206172345.26099.1877063066.divmod.xquotient.534@localhost.localdomain>
References: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>
	<20100206153444.26099.538054602.divmod.xquotient.508@localhost.localdomain>
	<BF7D3202-9A60-46C0-97DE-2D0CBF894CB9@gmail.com>
	<20100206172345.26099.1877063066.divmod.xquotient.534@localhost.localdomain>
Message-ID: <562bcc11002061033i61a22c3yf37f9b8c4614a20f@mail.gmail.com>

On Sat, Feb 6, 2010 at 11:23 AM, <exarkun at twistedmatrix.com> wrote:

> On 05:06 pm, valeriy.zamarayev at gmail.com wrote:
> >On 6 Feb 2010, 17:34, exarkun at twistedmatrix.com wrote:
> >>On 4 Feb, 09:16 pm, ssteinerx at gmail.com wrote:
> >>>While I see tickets in the tracker for web2 and others for web, I
> >>>couldn't find a 'cherry pick' list of things to be moved from web2
> >>>back
> >>>into web.
> >>>
> >>>Is there one?
> >>
> >>Not really.  It'd be great to have such a list.  Any time anyone
> >>brings
> >>up their use of web2, I ask them what features it provides that caused
> >>them to select it or prevent them from switching to Twisted Web.  One
> >>answer that a lot of people give is streaming access to uploads (which
> >>Twisted Web indeed makes very inconvenient now).  There's a ticket for
> >>this, #288.  The other answers people tend to give are "I don't
> >>know" or
> >>"nothing in particular".  Sometimes they also say "HTTP/1.1 support",
> >>but when further questioned about this, they can't actually explain
> >>what
> >>that means.
> >
> >I also depend on 100-Continue support. This is somehow related to
> >#288, but not
> >explicitly mentioned. If one wants to stream POST data, it's better to
> >have 'expect/continue' working. It allows to check various conditions,
> >including
> >authentication before allowing the client to proceed.
>
> Awesome, thanks for adding to the list. :)  Now that there are two items
> on it, I've added a section to the end of
> <http://twistedmatrix.com/trac/wiki/TwistedWebPlan>.  I encourage anyone
> with interest in this area to suggest more items for this list.
>
> Jean-Paul
>
>
This page: http://www.jmarshall.com/easy/http/

seems like it might be a good guide to upgrading to HTTP 1.1.

See the section entitled "Upgrading to HTTP 1/1". :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100206/49ec4727/attachment.htm 

From exarkun at twistedmatrix.com  Sun Feb  7 00:05:18 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 07 Feb 2010 05:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1265519118.48.1476576732@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100207/38a45888/attachment-0001.htm 

From gabriel.rossetti at arimaz.com  Mon Feb  8 02:26:43 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Mon, 08 Feb 2010 08:26:43 +0100
Subject: [Twisted-Python] domish.Element.__getattr__()
	or	xpath.XPathQuery
In-Reply-To: <20100206153126.26099.435133660.divmod.xquotient.501@localhost.localdomain>
References: <4B6AA5FC.7070302@arimaz.com>
	<20100206153126.26099.435133660.divmod.xquotient.501@localhost.localdomain>
Message-ID: <4B6FBCB3.1020605@arimaz.com>

exarkun at twistedmatrix.com wrote:
> On 4 Feb, 10:48 am, gabriel.rossetti at arimaz.com wrote:
>   
>> Hello everyone,
>>
>> I was wondering what you would recommend, accessing nodes via
>> domish.Element.__getattr__()
>> (e.g. el.node1.node1_1, where el is /msg) or via xpath.XPathQuery()
>> (e.g. xpath.XPathQuery("/msg/node1/node1_1").queryForNodes(el)[0])?
>>
>> I was wondering which would be faster, the __getattr__() is O(n) (in my
>> example there are 2 calls) but what about xpath.XPathQuery()?
>>     
>
> I don't think you'll find the xpath API to be much more optimized.  I 
> haven't used XMPP much, but considering the xpath implementation is 
> incomplete (and afaik there's little documentation about what subset is 
> supported), I'd stick with the simpler (if still terrible) 
> Element.__getattr__.
>
> Jean-Paul
>
>   
Ok, thank you. Just a question, would it be interesting to anyone to be 
able
to choose in between the internal XPATH implementation and an external
lib/implementation for the XMPP stuff? I have often wondered if it would
not be better to allow the user to choose.

Gabriel


From screwtape at froup.com  Mon Feb  8 06:03:59 2010
From: screwtape at froup.com (Tim Allen)
Date: Mon, 8 Feb 2010 22:03:59 +1100
Subject: [Twisted-Python] domish.Element.__getattr__() or
 xpath.XPathQuery
In-Reply-To: <4B6FBCB3.1020605@arimaz.com>
References: <4B6AA5FC.7070302@arimaz.com>
	<20100206153126.26099.435133660.divmod.xquotient.501@localhost.localdomain>
	<4B6FBCB3.1020605@arimaz.com>
Message-ID: <20100208110359.GE28374@boombah.thristian.org>

On Mon, Feb 08, 2010 at 08:26:43AM +0100, Gabriel Rossetti wrote:
> Ok, thank you. Just a question, would it be interesting to anyone to
> be able to choose in between the internal XPATH implementation and an
> external lib/implementation for the XMPP stuff? I have often wondered
> if it would not be better to allow the user to choose.

I seem to recall that the last time people discussed reusing a generic XML
library rather than a custom one, it was discovered that XMPP isn't
quite actually XML - it has a bunch of crazy restrictions that basically
mean you need an XMPP-specific library. If there's a third-part XMPP
library that could be plugged in, that would be a very interesting thing
to know.


From jml at mumak.net  Mon Feb  8 06:23:23 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 8 Feb 2010 11:23:23 +0000
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
Message-ID: <d06a5cd31002080323r380fa3dcw3693b59278e2795a@mail.gmail.com>

On Sun, Jan 31, 2010 at 10:26 PM,  <exarkun at twistedmatrix.com> wrote:
> Hi all,
>
> If there are enough interested people, there will be a Twisted sprint at
> PyCon this year. ?If you'll be at PyCon and are interested in sprinting
> on some Twisted topic, give a shout. ?Also, let us know what specific
> topics you're interested in so we can let other people know what to
> expect in the general announcement.
>

I'll be there for all of the sprint days.

I'm interested in fixing bugs in Conch, getting a release out, pair
programming fun, toolchain work and making it easier for casual
contributors to contribute casually. In roughly that order.

jml


From exarkun at twistedmatrix.com  Mon Feb  8 08:38:52 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 08 Feb 2010 13:38:52 -0000
Subject: [Twisted-Python] domish.Element.__getattr__() or
	xpath.XPathQuery
In-Reply-To: <20100208110359.GE28374@boombah.thristian.org>
References: <4B6AA5FC.7070302@arimaz.com>
	<20100206153126.26099.435133660.divmod.xquotient.501@localhost.localdomain>
	<4B6FBCB3.1020605@arimaz.com>
	<20100208110359.GE28374@boombah.thristian.org>
Message-ID: <20100208133852.26099.399426214.divmod.xquotient.618@localhost.localdomain>

On 11:03 am, screwtape at froup.com wrote:
>On Mon, Feb 08, 2010 at 08:26:43AM +0100, Gabriel Rossetti wrote:
>>Ok, thank you. Just a question, would it be interesting to anyone to
>>be able to choose in between the internal XPATH implementation and an
>>external lib/implementation for the XMPP stuff? I have often wondered
>>if it would not be better to allow the user to choose.
>
>I seem to recall that the last time people discussed reusing a generic 
>XML
>library rather than a custom one, it was discovered that XMPP isn't
>quite actually XML - it has a bunch of crazy restrictions that 
>basically
>mean you need an XMPP-specific library. If there's a third-part XMPP
>library that could be plugged in, that would be a very interesting 
>thing
>to know.

The discussion is mostly summarized here:

  http://twistedmatrix.com/trac/ticket/3201

I hope that eventually someone will find a good XML library which has 
the the features described there, and then we can switch to it.

Jean-Paul


From bra at fsn.hu  Mon Feb  8 11:20:31 2010
From: bra at fsn.hu (Attila Nagy)
Date: Mon, 08 Feb 2010 17:20:31 +0100
Subject: [Twisted-Python] Handling exceptions in twisted.internet.udp?
Message-ID: <4B7039CF.2070601@fsn.hu>

Hello,

I have a code, which opens persistent (connected, see: 
http://twistedmatrix.com/documents/current/core/howto/udp.html#auto2) 
UDP connections, and sends and receives data on them.

The problem is that occasionally I receive ICMP 13 (administratively 
prohibited) errors from the destinations, which triggers and exception 
and closes the UDP socket. I would like to keep that open, no matter 
what happens.
On FreeBSD the exception comes during writing into the socket with 
transport.write, so this is an easy one.
But on Linux it's a little bit harder, because there I get exception not 
during writing, but reading, which is handled here:
http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted/internet/udp.py#L113

The exception looks like this:
2010-02-08 12:09:15+0100 [-] reactor class: 
twisted.internet.selectreactor.SelectReactor.
2010-02-08 12:10:22+0100 [__builtin__.connectedUDP (UDP)] Unhandled Error
        Traceback (most recent call last):
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/python/log.py", 
line 84, in callWithLogger
            return callWithContext({"system": lp}, func, *args, **kw)
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/python/log.py", 
line 69, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/python/context.py", 
line 59, in callWithContext
            return self.currentContext().callWithContext(ctx, func, 
*args, **kw)
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/python/context.py", 
line 37, in callWithContext
            return func(*args,**kw)
        --- <exception caught here> ---
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/internet/selectreactor.py", 
line 146, in _doReadOrWrite
            why = getattr(selectable, method)()
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/internet/udp.py", 
line 109, in doRead
            data, addr = self.socket.recvfrom(self.maxPacketSize)
        socket.error: [Errno 113] No route to host

I wonder what is the preferred way of achieving that the socket will be 
write()-able and kept open regardless what ICMP or other sending or 
receiving error occurs?

Thanks,



From exarkun at twistedmatrix.com  Mon Feb  8 11:57:05 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 08 Feb 2010 16:57:05 -0000
Subject: [Twisted-Python] Handling exceptions in twisted.internet.udp?
In-Reply-To: <4B7039CF.2070601@fsn.hu>
References: <4B7039CF.2070601@fsn.hu>
Message-ID: <20100208165705.26099.1521985357.divmod.xquotient.793@localhost.localdomain>

On 04:20 pm, bra at fsn.hu wrote:
>Hello,
>
>I have a code, which opens persistent (connected, see:
>http://twistedmatrix.com/documents/current/core/howto/udp.html#auto2)
>UDP connections, and sends and receives data on them.
>
>The problem is that occasionally I receive ICMP 13 (administratively
>prohibited) errors from the destinations, which triggers and exception
>and closes the UDP socket. I would like to keep that open, no matter
>what happens.
>On FreeBSD the exception comes during writing into the socket with
>transport.write, so this is an easy one.

This is probably a bug:

  http://twistedmatrix.com/trac/ticket/2790

So you're right that you have to handle it in your app code (and that 
it's easy to do so, fortunately).  Hopefully someday this will no longer 
be true.
>But on Linux it's a little bit harder, because there I get exception 
>not
>during writing, but reading, which is handled here:
>http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted/internet/udp.py#L113

And this looks like another bug. :)
>[snip]
>"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux- 
>x86_64.egg/twisted/internet/udp.py",
>line 109, in doRead
>            data, addr = self.socket.recvfrom(self.maxPacketSize)
>        socket.error: [Errno 113] No route to host
>
>I wonder what is the preferred way of achieving that the socket will be
>write()-able and kept open regardless what ICMP or other sending or
>receiving error occurs?

It seems like udp.py should be handling EHOSTUNREACH (and probably 
several more errors that it also misses currently).  There's already a 
`connectionRefused` callback which could be invoked to handle these 
cases.

This seems pretty related to another open ticket:

  http://twistedmatrix.com/trac/ticket/3396

Aside from monkey-patching the doRead method, I don't see a way for an 
application to handle this one.

Development has started on fixing each of these issues.  The latter 
seems to even have been reviewed and is now waiting for someone to 
address the review feedback.

Jean-Paul


From bra at fsn.hu  Mon Feb  8 14:17:57 2010
From: bra at fsn.hu (Attila Nagy)
Date: Mon, 08 Feb 2010 20:17:57 +0100
Subject: [Twisted-Python] Handling exceptions in twisted.internet.udp?
In-Reply-To: <20100208165705.26099.1521985357.divmod.xquotient.793@localhost.localdomain>
References: <4B7039CF.2070601@fsn.hu>
	<20100208165705.26099.1521985357.divmod.xquotient.793@localhost.localdomain>
Message-ID: <4B706365.7070709@fsn.hu>

exarkun at twistedmatrix.com wrote:
>> [snip]
>> "/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux- 
>> x86_64.egg/twisted/internet/udp.py",
>> line 109, in doRead
>>            data, addr = self.socket.recvfrom(self.maxPacketSize)
>>        socket.error: [Errno 113] No route to host
>>
>> I wonder what is the preferred way of achieving that the socket will be
>> write()-able and kept open regardless what ICMP or other sending or
>> receiving error occurs?
>>     
>
> It seems like udp.py should be handling EHOSTUNREACH (and probably 
> several more errors that it also misses currently).  There's already a 
> `connectionRefused` callback which could be invoked to handle these 
> cases.
>
> This seems pretty related to another open ticket:
>
>   http://twistedmatrix.com/trac/ticket/3396
>
> Aside from monkey-patching the doRead method, I don't see a way for an 
> application to handle this one.
>   
Currently the page is inaccessible (TimeoutError), but that doesn't 
sound good. :(
I will work around this by modifying udp.py, that's easier in this 
moment than overloading half of twisted. :)
> Development has started on fixing each of these issues.  The latter 
> seems to even have been reviewed and is now waiting for someone to 
> address the review feedback.
>   
OK, let's hope that these will be fixed soon.

Thanks!


From brad.milne at devx.runthered.com  Mon Feb  8 14:23:31 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Tue, 9 Feb 2010 08:23:31 +1300
Subject: [Twisted-Python] Light-est-weight http authentication
Message-ID: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>

I have a backend Twisted application with a front end in Django. Some of
their communication is via web services. Currently they are deployed on the
same box but may be separated in future. I want to enforce some basic
authentication on the web services, so some lightweight http header
authentication looks best. I've found the twisted.web.guard api, but it
seems to be more heavyweight than I require (e.g. running up a Portal).
Given the breadth of the Twisted apis, I'm confident I wouldn't have to
hand-craft something to check the auth header myself. What do you guys
suggest?

Thanks
Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100209/869e3a0c/attachment.htm 

From exarkun at twistedmatrix.com  Mon Feb  8 14:32:37 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 08 Feb 2010 19:32:37 -0000
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
Message-ID: <20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>

On 07:23 pm, brad.milne at devx.runthered.com wrote:
>I have a backend Twisted application with a front end in Django. Some 
>of
>their communication is via web services. Currently they are deployed on 
>the
>same box but may be separated in future. I want to enforce some basic
>authentication on the web services, so some lightweight http header
>authentication looks best. I've found the twisted.web.guard api, but it
>seems to be more heavyweight than I require (e.g. running up a Portal).
>Given the breadth of the Twisted apis, I'm confident I wouldn't have to
>hand-craft something to check the auth header myself. What do you guys
>suggest?

A portal takes about 28.9 ?W to "run up" (given contemporary hardware). 
What makes you say this is "heavyweight"?

Jean-Paul


From rich at noir.com  Mon Feb  8 14:46:45 2010
From: rich at noir.com (K. Richard Pixley)
Date: Mon, 08 Feb 2010 11:46:45 -0800
Subject: [Twisted-Python] minor doc patch - IWriteDesriptor
In-Reply-To: <20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
Message-ID: <4B706A25.4010502@noir.com>

--- twisted/internet/interfaces.py.~1~    2009-01-22 06:01:46.000000000 
-0800
+++ twisted/internet/interfaces.py    2010-02-08 11:42:03.000000000 -0800
@@ -833,7 +833,7 @@
         I add writer to the set of file descriptors to get write events 
for.
 
         @param writer: An L{IWriteDescriptor} provider that will be 
checked for
-                       read events until it is removed from the reactor 
with
+                       write events until it is removed from the 
reactor with
                        L{removeWriter}.
 
         @return: C{None}.



From brad.milne at devx.runthered.com  Mon Feb  8 15:19:04 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Tue, 9 Feb 2010 09:19:04 +1300
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
Message-ID: <19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>

Just in terms of configuration. It seems that Guard, for example, is
designed to cache the credentials and maintain a session. My requirement is
just for a single request, so session maintenance seems like overhead.

Also in upskill time. The Twisted NPE book, for example, says "It might take
you a little while to understand all the classes and interfaces in
twisted.cred, and at first you might wonder why it's necessary to have a
system with so many moving parts. The answer is that this system is designed
to be extremely flexible." (pg 92)
That sounds like a great toolset, but the cost is to those that require the
minimalist solution, but still need to develop an understanding of the
greater picture to achieve that.

Finding Twisted documentation seems to be generally difficult, so if I can
find the 'lightest' (extra code) and 'lightest' (ramp-up time) solution,
that what I was hoping for a pointer towards.

Thanks
Brad

PS - did you mean ?s?? Or have you really measured the power consumption in
Watts?


On 9 February 2010 08:32, <exarkun at twistedmatrix.com> wrote:

> On 07:23 pm, brad.milne at devx.runthered.com wrote:
>
>> I have a backend Twisted application with a front end in Django. Some of
>> their communication is via web services. Currently they are deployed on
>> the
>> same box but may be separated in future. I want to enforce some basic
>> authentication on the web services, so some lightweight http header
>> authentication looks best. I've found the twisted.web.guard api, but it
>> seems to be more heavyweight than I require (e.g. running up a Portal).
>> Given the breadth of the Twisted apis, I'm confident I wouldn't have to
>> hand-craft something to check the auth header myself. What do you guys
>> suggest?
>>
>
> A portal takes about 28.9 ?W to "run up" (given contemporary hardware).
> What makes you say this is "heavyweight"?
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100209/e305c475/attachment.htm 

From exarkun at twistedmatrix.com  Mon Feb  8 16:02:26 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 08 Feb 2010 21:02:26 -0000
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
	<19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>
Message-ID: <20100208210226.26099.695917310.divmod.xquotient.838@localhost.localdomain>

On 08:19 pm, brad.milne at devx.runthered.com wrote:
>Just in terms of configuration. It seems that Guard, for example, is
>designed to cache the credentials and maintain a session. My 
>requirement is
>just for a single request, so session maintenance seems like overhead.

Ah, I see.  Past versions of Guard were much more into that whole thing 
than what you'll currently find at twisted.web.guard.  There is no 
caching and no implication of a session.
>Also in upskill time. The Twisted NPE book, for example, says "It might 
>take
>you a little while to understand all the classes and interfaces in
>twisted.cred, and at first you might wonder why it's necessary to have 
>a
>system with so many moving parts. The answer is that this system is 
>designed
>to be extremely flexible." (pg 92)
>That sounds like a great toolset, but the cost is to those that require 
>the
>minimalist solution, but still need to develop an understanding of the
>greater picture to achieve that.

Argh.  I don't know what the point is of saying something is complicated 
in the explanation of the thing.  Either the explanation will seem 
complicated to the reader or it won't.  All you can hope to accomplish 
by announcing it in advance is to scare off people who would have other 
been able to understand what was going on.
>Finding Twisted documentation seems to be generally difficult, so if I 
>can
>find the 'lightest' (extra code) and 'lightest' (ramp-up time) 
>solution,
>that what I was hoping for a pointer towards.

It's definitely true that there isn't a lot of documentation for Guard. 
I've written up something, though (which hopefully will soon be included 
in Twisted itself, to make it easier to find), which I think will get 
you up to speed on using Guard pretty quickly:

    http://jcalderone.livejournal.com/53074.html

The final example, which sets up an actual Twisted Web server protected 
by digest auth (basic is even easier), only takes 16 lines.

If that's still not to your liking, then you can always fall back to the 
much more tedious, much less elegant, request.getUsername() and 
request.getPassword() approach. :)  You'll have to rely on the API docs 
for that approach, though, as far as I know there are no prose-style 
introductions for it.
>Thanks
>Brad
>
>PS - did you mean ?s?? Or have you really measured the power 
>consumption in
>Watts?

A fairly accurate conversion between ?s and ?W is pretty 
straightforward, given a few things about your hardware...  :)

Jean-Paul


From thatmattbone at gmail.com  Mon Feb  8 18:03:46 2010
From: thatmattbone at gmail.com (Matt Bone)
Date: Mon, 8 Feb 2010 17:03:46 -0600
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <d06a5cd31002080323r380fa3dcw3693b59278e2795a@mail.gmail.com>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<d06a5cd31002080323r380fa3dcw3693b59278e2795a@mail.gmail.com>
Message-ID: <dfbf29b01002081503j14c2076brc89cd985098d801f@mail.gmail.com>

I'm still pretty new to twisted but would like to help out in the
sprint however I can.  I'm interested in web/web2, spread, inotify,
and deferToProcess.

I'll be around Friday-Tuesday morning.

--matt

On Mon, Feb 8, 2010 at 5:23 AM, Jonathan Lange <jml at mumak.net> wrote:
> On Sun, Jan 31, 2010 at 10:26 PM, ?<exarkun at twistedmatrix.com> wrote:
>> Hi all,
>>
>> If there are enough interested people, there will be a Twisted sprint at
>> PyCon this year. ?If you'll be at PyCon and are interested in sprinting
>> on some Twisted topic, give a shout. ?Also, let us know what specific
>> topics you're interested in so we can let other people know what to
>> expect in the general announcement.
>>
>
> I'll be there for all of the sprint days.
>
> I'm interested in fixing bugs in Conch, getting a release out, pair
> programming fun, toolchain work and making it easier for casual
> contributors to contribute casually. In roughly that order.
>
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From rich at noir.com  Tue Feb  9 20:47:25 2010
From: rich at noir.com (K. Richard Pixley)
Date: Tue, 09 Feb 2010 17:47:25 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
Message-ID: <4B72102D.4010306@noir.com>

I'm confused be the response I get to the attached program.

In a nutshell, I'm building a reader, attaching it with addReader, later 
removing it with removeReader.  And I'm getting this:

    time python test_reactor.py
    Traceback (most recent call last):
    Failure: twisted.internet.error.ConnectionFdescWentAway: Uh:
    Filedescriptor went away.

Which seems to be telling me that I don't know as much yet as I'd hoped.

Why would the reactor care about a closed file descriptor that isn't 
even in it's interest set?

--rich
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100209/153f427d/attachment.htm 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: test_reactor.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100209/153f427d/attachment.txt 

From darren at ontrenet.com  Wed Feb 10 12:22:59 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Wed, 10 Feb 2010 12:22:59 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
Message-ID: <1265822579.2532.21.camel@kratos>

Hi,
  Is there an existing protocol that can provide the following?

- Accept stream binary data FROM a client (e.g. very large file
transfer)
- Receive data IN ORDER (i.e. stream. not out of order random packets)

I want to stream FROM a client to the protocol server and have the
server process the stream bytes incrementally so it doesn't have 
to store or write the entire data stream (too large).

I looked at FileTransferServer and Client, but I'm not sure it provides
what I need. 

Any tips appreciated!
Darren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/864e2bd8/attachment.htm 

From vishalshetye at gmail.com  Wed Feb 10 12:28:51 2010
From: vishalshetye at gmail.com (Vishal Shetye)
Date: Wed, 10 Feb 2010 22:58:51 +0530
Subject: [Twisted-Python] Error handling for modules which use
	twisted.enterprise.adbapi
Message-ID: <6a2dc2341002100928l192e024v869e8e174eabb071@mail.gmail.com>

Hi,

I have an application that uses twisted.enterprise.adbapi for
accessing sqlite database.
Recently I had to replace sqlite3 shipped with python 2.5 with latest
version of pysqlite2. This was for taking advantage of newer fixes in
pysqlite2.
I thought it would be worthwhile to support both.

However, functions called using runInteraction have a code block as given below.
try:
    txn.execute(?update query?)
except sqlite3.IntegrityError:
    handleDuplicateValues()

or
an errback on the function runQuery/Interaction/Operation. They all
used twisted.python.failure.check/trap on some exception of the form
sqlite3.some_dbapi_exception.
Now, all such places need to import exceptions from pysqlite2 instead
of sqlite3.

However, to handle multiple dbapi modules one of which will be
configured for use by the user, I thought, I will have a global name
having reference of the current dbapi module being used. This will be
used by errbacks and except blocks.

Is there a better way of handling exceptions in such cases?

I came across http://svn.sqlalchemy.org/sqlalchemy/trunk/lib/sqlalchemy/exc.py.
I think sqlalchemy wraps dbapi erros in DBAPIError exception.
I imagine doing something similar in twisted as,
try:
    txn.execute(?update query?)
except adbapi.IntegrityError:
    handleDuplicateValues()

I also came across
http://mail.python.org/pipermail/db-sig/2003-September/003686.html
which suggests exceptions raised by different modules for same type of
error may not be consistent, atleast with respect to the information
provided.

Any suggestions on this would be very helpful.

Just to note http://twistedsphinx.funsize.net/projects/core/howto/rdbms.html
does not have error handling related info.

-- 
vishal shetye


From marco.giusti at gmail.com  Wed Feb 10 13:23:24 2010
From: marco.giusti at gmail.com (Marco Giusti)
Date: Wed, 10 Feb 2010 19:23:24 +0100
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1265822579.2532.21.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
Message-ID: <20100210182324.GB7892@murdoc>

On Wed, Feb 10, 2010 at 12:22:59PM -0500, Darren Govoni wrote:
> Hi,
>   Is there an existing protocol that can provide the following?
> 
> - Accept stream binary data FROM a client (e.g. very large file
> transfer)

HTTP and FTP just to say two of many,

> - Receive data IN ORDER (i.e. stream. not out of order random packets)

TCP

> I want to stream FROM a client to the protocol server and have the
> server process the stream bytes incrementally so it doesn't have 
> to store or write the entire data stream (too large).

http://twistedmatrix.com/documents/current/core/howto/producers.html


-- 
Hofstadter's Law:
It always takes longer than you expect, even when you take into account
Hofstadter's Law.


From mebly5343 at gmail.com  Wed Feb 10 13:36:15 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 13:36:15 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1265822579.2532.21.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
Message-ID: <dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>

Hi Darren:

Why not use TCP?  You can send the length of the file at the beginning so
you know how many bytes to listen for.
TCP guarantees delivery and ordering.

Mark

On Wed, Feb 10, 2010 at 12:22 PM, Darren Govoni <darren at ontrenet.com> wrote:

>  Hi,
>   Is there an existing protocol that can provide the following?
>
> - Accept stream binary data FROM a client (e.g. very large file transfer)
> - Receive data IN ORDER (i.e. stream. not out of order random packets)
>
> I want to stream FROM a client to the protocol server and have the
> server process the stream bytes incrementally so it doesn't have
> to store or write the entire data stream (too large).
>
> I looked at FileTransferServer and Client, but I'm not sure it provides
> what I need.
>
> Any tips appreciated!
> Darren
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/cafdc1fb/attachment.htm 

From mebly5343 at gmail.com  Wed Feb 10 13:53:49 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 13:53:49 -0500
Subject: [Twisted-Python] How can I send unique configuration data for
	multiple connections through a factory?
Message-ID: <dc408fe51002101053g4234a5c3nc1040f9c72a9abae@mail.gmail.com>

Good day:

I've been having fun with Twisted.  I have my application running fine, with
multiple server and client connections using Telnet.  :-)

However, users always want something.  I need to send some unique
configuration information to each connection.  The connections are made
using connectTCP.  My first attempt assumed that the connection was made
when the call to connectTCP was executed.  It didn't work!  :-(

-------------------------------

from twisted.internet.protocol import ClientFactory
from twisted.internet import reactor
from twisted.conch.telnet import StatefulTelnetProtocol

class testClient(StatefulTelnetProtocol):

    def connectionMade(self):
        self.title = self.factory.connectString
        print "Client Connected: " + self.title
        self.setRawMode()
        self.factory.connections.append(self)

    def connectionLost(self, reason):
        if self in self.factory.connections:
            self.factory.connections.remove(self)

    def rawDataReceived(self,data):
        print data + "\n"

class ClusterClientFactory(ClientFactory):

    protocol = testClient

    def __init__(self):
        self.connections = []
        self.connectString = ''

    def startFactory(self):
        print "startFactory: " + self.connectString

    def startedConnecting(self, connector):
        print "Started connecting: " + str(connector)
        print self.connectString

    def buildProtocol(self, addr):
        print "bulldProtocol: " + str(addr)
        print "buildProtocol: " + self.connectString

        p = self.protocol()
        p.factory = self
        return p

if __name__ == '__main__':


    def startUp():

        factory = ClusterClientFactory()
        factory.maxDelay = 120  #  two minutes

        factory.connectString = "FirstString..."
        reactor.connectTCP("localhost", 7300, factory)

        factory.connectString = "SecondString"
        reactor.connectTCP("localhost", 7300, factory)

    reactor.callWhenRunning(startUp)
    reactor.run()

----------------------------------

The results are that buildProtocol gets the second string both times.
startedConnecting gets the correct string, but all I have there is a
connection object.  I need the correct data in buildProtocol to do it this
way.

------------------------------------

C:\Users\Mark\src\play>python testclient.py
startFactory: FirstString...
Started connecting: <twisted.internet.tcp.Connector instance at 0x01DAB620>
FirstString...
Started connecting: <twisted.internet.tcp.Connector instance at 0x01E0EFD0>
SecondString
bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
buildProtocol: SecondString
Client Connected: SecondString
Welcome to SimpleServer5



bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
buildProtocol: SecondString
Client Connected: SecondString
Welcome to SimpleServer5

--------------------------


My "best" idea is to pass the strings to the factory in a dictionary indexed
by the IP address and the port.  Then, buildProtocol() can use that to
recover the string and I can use reactor.resolve() to translate the host
name to the IP address.  The real application won't have multiple
connections to the same host and port like this example, so this would work.

There MUST be a better way.  :-)

My "simpleserver" is below if you want to run this.

THANKS for all of your help.  I have the basic application running now
(including a Tkinter GUI  :-) ) and Twisted has saved me hundreds or even
thousands of lines of code...

Mark Bailey

------------------------------

from twisted.conch.telnet import StatefulTelnetProtocol
from twisted.internet import reactor, protocol
from twisted.protocols.basic import LineReceiver

class TelnetEcho(StatefulTelnetProtocol):
    def connectionMade(self):
        self.factory.connection.append(self)
        self.sendLine("Welcome to SimpleServer5\r\n")


    def lineReceived(self, data):
        data = data.rstrip('\n\r')

        if data.upper() == 'BYE':
            self.sendLine("Goodbye...\r")
            self.transport.loseConnection()
        else:
            self.sendLine("Unrecognized command: %r\r" % (data,))

    def connectionLost(self, reason):
        self.factory.connection.remove(self)


class TelnetEchoFactory(protocol.Factory):
    protocol = TelnetEcho
    def __init__(self):
        self.connection = []


def createTelnetServer(port=7300):
    telnetinstance = TelnetEchoFactory()       #  needs to be a list
    reactor.listenTCP(port,telnetinstance)

if __name__ == "__main__":
    reactor.callWhenRunning(createTelnetServer)
    reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/acc93b9c/attachment.htm 

From darren at ontrenet.com  Wed Feb 10 13:54:54 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Wed, 10 Feb 2010 13:54:54 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
Message-ID: <1265828094.2532.23.camel@kratos>

Hey Mark,
   Yeah, that's what I want, but in the 'twisted' way. I can write
socket servers, etc. But didn't notice a good example of how to do this
in Twisted (sparing me the socket programming),  until I found this old
message[1] with the classes I think might work.

[1]
http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html

Darren

On Wed, 2010-02-10 at 13:36 -0500, Mark Bailey wrote:

> Hi Darren:
> 
> Why not use TCP?  You can send the length of the file at the beginning
> so you know how many bytes to listen for.
> TCP guarantees delivery and ordering.
> 
> Mark
> 
> 
> On Wed, Feb 10, 2010 at 12:22 PM, Darren Govoni <darren at ontrenet.com>
> wrote:
> 
>         Hi,
>           Is there an existing protocol that can provide the
>         following?
>         
>         - Accept stream binary data FROM a client (e.g. very large
>         file transfer)
>         - Receive data IN ORDER (i.e. stream. not out of order random
>         packets)
>         
>         I want to stream FROM a client to the protocol server and have
>         the
>         server process the stream bytes incrementally so it doesn't
>         have 
>         to store or write the entire data stream (too large).
>         
>         I looked at FileTransferServer and Client, but I'm not sure it
>         provides
>         what I need. 
>         
>         Any tips appreciated!
>         Darren
>         
>         
>         _______________________________________________
>         Twisted-Python mailing list
>         Twisted-Python at twistedmatrix.com
>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>         
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/02bbedcc/attachment-0001.htm 

From mebly5343 at gmail.com  Wed Feb 10 13:57:35 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 13:57:35 -0500
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <4B72102D.4010306@noir.com>
References: <4B72102D.4010306@noir.com>
Message-ID: <dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>

Hi:

Aren't you adding two readers?  One is added in the __init__ method of
inputFile, the other in the test code.

I'm also a newbie so maybe I'm equally confused...

On Tue, Feb 9, 2010 at 8:47 PM, K. Richard Pixley <rich at noir.com> wrote:

>  I'm confused be the response I get to the attached program.
>
> In a nutshell, I'm building a reader, attaching it with addReader, later
> removing it with removeReader.  And I'm getting this:
>
> time python test_reactor.py
> Traceback (most recent call last):
> Failure: twisted.internet.error.ConnectionFdescWentAway: Uh: Filedescriptor
> went away.
>
> Which seems to be telling me that I don't know as much yet as I'd hoped.
>
> Why would the reactor care about a closed file descriptor that isn't even
> in it's interest set?
>
> --rich
>
> #!/usr/bin/env python
> # -*- coding: utf-8 -*-
>
> import os
>
> from zope.interface import implements
> from twisted.internet import reactor
> from twisted.internet.interfaces import IReadDescriptor
>
> class inputFile(object):
>    implements(IReadDescriptor)
>
>    def __init__(self, filename):
>        self.filename = filename
>        self.filedes = os.open(filename, os.O_RDONLY | os.O_NONBLOCK)
>        reactor.addReader(self)
>
>    def fileno(self):
>        return self.filedes
>
>    def connectionLost(self, reason):
>        raise reason
>
>    def logPrefix(self):
>        return 'inputFile'
>
>    def doRead(self):
>        reactor.removeReader(self)
>        os.close(self.filedes)
>        self.filedes = -1
>        reactor.stop()
>
> if __name__ == '__main__':
>    r = inputFile('/etc/group')
>    reactor.addReader(r)
>    reactor.run()
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/889edcd3/attachment.htm 

From mebly5343 at gmail.com  Wed Feb 10 14:08:31 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 14:08:31 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1265828094.2532.23.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
Message-ID: <dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>

How about:


# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.


"""
An example client. Run simpleserv.py first before running this.
"""

from twisted.internet import reactor, protocol


# a client protocol

class EchoClient(protocol.Protocol):
    """Once connected, send a message, then print the result."""

    def connectionMade(self):
        self.transport.write("hello, world!")

    def dataReceived(self, data):
        "As soon as any data is received, write it back."
        print "Server said:", data
        self.transport.loseConnection()

    def connectionLost(self, reason):
        print "connection lost"

class EchoFactory(protocol.ClientFactory):
    protocol = EchoClient

    def clientConnectionFailed(self, connector, reason):
        print "Connection failed - goodbye!"
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print "Connection lost - goodbye!"
        reactor.stop()


# this connects the protocol to a server runing on port 8000
def main():
    f = EchoFactory()
    reactor.connectTCP("localhost", 8000, f)
    reactor.run()

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()


-------------------------


# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.


from twisted.internet import reactor, protocol


class Echo(protocol.Protocol):
    """This is just about the simplest possible protocol"""

    def dataReceived(self, data):
        "As soon as any data is received, write it back."
        self.transport.write(data)


def main():
    """This runs the protocol on port 8000"""
    factory = protocol.ServerFactory()
    factory.protocol = Echo
    reactor.listenTCP(8000,factory)
    reactor.run()

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()

-----

Mark


On Wed, Feb 10, 2010 at 1:54 PM, Darren Govoni <darren at ontrenet.com> wrote:

>  Hey Mark,
>    Yeah, that's what I want, but in the 'twisted' way. I can write socket
> servers, etc. But didn't notice a good example of how to do this in Twisted
> (sparing me the socket programming),  until I found this old message[1] with
> the classes I think might work.
>
> [1]
> http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
>
> Darren
>
> On Wed, 2010-02-10 at 13:36 -0500, Mark Bailey wrote:
>
> Hi Darren:
>
> Why not use TCP?  You can send the length of the file at the beginning so
> you know how many bytes to listen for.
> TCP guarantees delivery and ordering.
>
> Mark
>
>  On Wed, Feb 10, 2010 at 12:22 PM, Darren Govoni <darren at ontrenet.com>
> wrote:
>
>  Hi,
>   Is there an existing protocol that can provide the following?
>
> - Accept stream binary data FROM a client (e.g. very large file transfer)
> - Receive data IN ORDER (i.e. stream. not out of order random packets)
>
> I want to stream FROM a client to the protocol server and have the
> server process the stream bytes incrementally so it doesn't have
> to store or write the entire data stream (too large).
>
> I looked at FileTransferServer and Client, but I'm not sure it provides
> what I need.
>
> Any tips appreciated!
> Darren
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing listTwisted-Python at twistedmatrix.comhttp://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/73851f55/attachment.htm 

From brad.milne at devx.runthered.com  Wed Feb 10 14:20:49 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 11 Feb 2010 08:20:49 +1300
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <20100208210226.26099.695917310.divmod.xquotient.838@localhost.localdomain>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
	<19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>
	<20100208210226.26099.695917310.divmod.xquotient.838@localhost.localdomain>
Message-ID: <19ae58271002101120k117bd70crb27f2382b119f452@mail.gmail.com>

Thanks. I had actually already found your page and you're right, it does
seem to be the best resource out there. Since your email I've had a second
look at it, as initially I wasn't sure how to use the example to return a
web resource (handler with render_GET etc) in place of the file you
returned. Turns out it wasn't actually too bad, and looks something like:

{code}

from zope.interface import implements

from twisted.cred.portal import IRealm, Portal
from twisted.cred.checkers import FilePasswordDB
from twisted.web.static import File
from twisted.web.resource import IResource
from twisted.web.guard import HTTPAuthSessionWrapper, DigestCredentialFactory

def secureServer():
    class PublicHTMLRealm(object):
        implements(IRealm)

        def requestAvatar(self, avatarId, mind, *interfaces):
            if IResource in interfaces:
                return (IResource, WebResource(), lambda: None)
            raise NotImplementedError()

    portal = Portal(PublicHTMLRealm(), [FilePasswordDB('httpd.password')])

    credentialFactory = BasicCredentialFactory("MyRealm")
    rsrc = HTTPAuthSessionWrapper(portal, [credentialFactory])

    return rsrc

class WebResource(resource.Resource):
    def __init__():
        ....

    def getChild(self, path, request):
        if path == self.expected:
            return ValidHandler()
        else:
            return InvalidUrlHandler()

# Create server
my_server = secureServer(...)
site = server.Site(my_server)

{code}

This has worked great so far where ValidHandler contains a render_GET, but
when calling a POST or PUT on handler that has render_POST or render_PUT
using this technique returns a message which I think is Method Not Allowed
(on the train right now, so don't have in front of me, sorry). Is there a
better way to form the above to prevent this?

Thanks again
Brad

On 9 February 2010 10:02, <exarkun at twistedmatrix.com> wrote:
...

> It's definitely true that there isn't a lot of documentation for Guard.
> I've written up something, though (which hopefully will soon be included in
> Twisted itself, to make it easier to find), which I think will get you up to
> speed on using Guard pretty quickly:
>
>   http://jcalderone.livejournal.com/53074.html
>
> The final example, which sets up an actual Twisted Web server protected by
> digest auth (basic is even easier), only takes 16 lines.
>
> If that's still not to your liking, then you can always fall back to the
> much more tedious, much less elegant, request.getUsername() and
> request.getPassword() approach. :)  You'll have to rely on the API docs for
> that approach, though, as far as I know there are no prose-style
> introductions for it.
>
...

>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100211/a1309ba7/attachment.htm 

From darren at ontrenet.com  Wed Feb 10 14:23:19 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Wed, 10 Feb 2010 14:23:19 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
Message-ID: <1265829799.2532.27.camel@kratos>

>From what I learned in other posts, the dataReceived(self, data): in the
Echo server
will get called with out-of-order data/bytes from the client. Of course,
I could be misinformed,
but what I understood before was that in this type of Protocol, I would
have to re-order
and re-assemble the bytes.  And I'm trying to avoid that, since of
course, TCP already does it.

But like I said, I could have been misinformed because it seems pretty
basic to write 1,2,3
to a server and have it received 1,2,3, guaranteed.

On Wed, 2010-02-10 at 14:08 -0500, Mark Bailey wrote:

> How about:
> 
> 
> # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
> # See LICENSE for details.
> 
> 
> """
> An example client. Run simpleserv.py first before running this.
> """
> 
> from twisted.internet import reactor, protocol
> 
> 
> # a client protocol
> 
> class EchoClient(protocol.Protocol):
>     """Once connected, send a message, then print the result."""
>     
>     def connectionMade(self):
>         self.transport.write("hello, world!")
>     
>     def dataReceived(self, data):
>         "As soon as any data is received, write it back."
>         print "Server said:", data
>         self.transport.loseConnection()
>     
>     def connectionLost(self, reason):
>         print "connection lost"
> 
> class EchoFactory(protocol.ClientFactory):
>     protocol = EchoClient
> 
>     def clientConnectionFailed(self, connector, reason):
>         print "Connection failed - goodbye!"
>         reactor.stop()
>     
>     def clientConnectionLost(self, connector, reason):
>         print "Connection lost - goodbye!"
>         reactor.stop()
> 
> 
> # this connects the protocol to a server runing on port 8000
> def main():
>     f = EchoFactory()
>     reactor.connectTCP("localhost", 8000, f)
>     reactor.run()
> 
> # this only runs if the module was *not* imported
> if __name__ == '__main__':
>     main()
> 
> 
> -------------------------
> 
> 
> # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
> # See LICENSE for details.
> 
> 
> from twisted.internet import reactor, protocol
> 
> 
> class Echo(protocol.Protocol):
>     """This is just about the simplest possible protocol"""
>     
>     def dataReceived(self, data):
>         "As soon as any data is received, write it back."
>         self.transport.write(data)
> 
> 
> def main():
>     """This runs the protocol on port 8000"""
>     factory = protocol.ServerFactory()
>     factory.protocol = Echo
>     reactor.listenTCP(8000,factory)
>     reactor.run()
> 
> # this only runs if the module was *not* imported
> if __name__ == '__main__':
>     main()
> 
> -----
> 
> Mark
> 
> 
> 
> On Wed, Feb 10, 2010 at 1:54 PM, Darren Govoni <darren at ontrenet.com>
> wrote:
> 
>         Hey Mark,
>            Yeah, that's what I want, but in the 'twisted' way. I can
>         write socket servers, etc. But didn't notice a good example of
>         how to do this in Twisted (sparing me the socket programming),
>         until I found this old message[1] with the classes I think
>         might work.
>         
>         [1]
>         http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
>         
>         Darren
>         
>         On Wed, 2010-02-10 at 13:36 -0500, Mark Bailey wrote:
>         
>         > Hi Darren:
>         > 
>         > Why not use TCP?  You can send the length of the file at the
>         > beginning so you know how many bytes to listen for.
>         > TCP guarantees delivery and ordering.
>         > 
>         > Mark
>         > 
>         > On Wed, Feb 10, 2010 at 12:22 PM, Darren Govoni
>         > <darren at ontrenet.com> wrote:
>         > 
>         >         Hi,
>         >           Is there an existing protocol that can provide the
>         >         following?
>         >         
>         >         - Accept stream binary data FROM a client (e.g. very
>         >         large file transfer)
>         >         - Receive data IN ORDER (i.e. stream. not out of
>         >         order random packets)
>         >         
>         >         I want to stream FROM a client to the protocol
>         >         server and have the
>         >         server process the stream bytes incrementally so it
>         >         doesn't have 
>         >         to store or write the entire data stream (too
>         >         large).
>         >         
>         >         I looked at FileTransferServer and Client, but I'm
>         >         not sure it provides
>         >         what I need. 
>         >         
>         >         Any tips appreciated!
>         >         Darren 
>         >         
>         >         _______________________________________________
>         >         Twisted-Python mailing list
>         >         Twisted-Python at twistedmatrix.com
>         >         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>         >         
>         > 
>         > 
>         > 
>         > _______________________________________________
>         > Twisted-Python mailing list
>         > Twisted-Python at twistedmatrix.com
>         > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>         
>         
>         
>         
>         
>         _______________________________________________
>         Twisted-Python mailing list
>         Twisted-Python at twistedmatrix.com
>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>         
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/e6c1a5fc/attachment-0001.htm 

From rich at noir.com  Wed Feb 10 14:24:29 2010
From: rich at noir.com (K. Richard Pixley)
Date: Wed, 10 Feb 2010 11:24:29 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
References: <4B72102D.4010306@noir.com>
	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
Message-ID: <4B7307ED.4010400@noir.com>

I don't think so.  I believe the reactor is actually added during the 
import.  (I learned this as I discovered that reactors can't be 
restarted, which means you have to manually create a new one as a 
fixture for simple unittest work.)

I looked through the code and there's a call in the reactor to fileno 
immediately after the call to doRead.  It seems to be attempting to 
check for file descriptors which broke during the read, but I think 
that's a mistake.  (Or at least, I'm confused about how else to do it).  
Seems to me that the only time my object has control in order to remove 
itself is during doRead.  So I'm thinking that either...

a) there's some other way to close out my object that I just haven't 
discovered or

b) the code which checks the file descriptor, (which may have been 
closed), after doRead is doing so mistakenly.

For now, in my real code, I'm just leaving the file descriptor.  But I'd 
like to know how this is intended to be used.

--rich (still a newbie)

Mark Bailey wrote:
> Hi:
>
> Aren't you adding two readers?  One is added in the __init__ method of 
> inputFile, the other in the test code.
>
> I'm also a newbie so maybe I'm equally confused...
>
> On Tue, Feb 9, 2010 at 8:47 PM, K. Richard Pixley <rich at noir.com 
> <mailto:rich at noir.com>> wrote:
>
>     I'm confused be the response I get to the attached program.
>
>     In a nutshell, I'm building a reader, attaching it with addReader,
>     later removing it with removeReader.  And I'm getting this:
>
>         time python test_reactor.py
>         Traceback (most recent call last):
>         Failure: twisted.internet.error.ConnectionFdescWentAway: Uh:
>         Filedescriptor went away.
>
>     Which seems to be telling me that I don't know as much yet as I'd
>     hoped.
>
>     Why would the reactor care about a closed file descriptor that
>     isn't even in it's interest set?
>
>     --rich
>
>     #!/usr/bin/env python
>     # -*- coding: utf-8 -*-
>
>     import os
>
>     from zope.interface import implements
>     from twisted.internet import reactor
>     from twisted.internet.interfaces import IReadDescriptor
>
>     class inputFile(object):
>        implements(IReadDescriptor)
>
>        def __init__(self, filename):
>            self.filename = filename
>            self.filedes = os.open(filename, os.O_RDONLY | os.O_NONBLOCK)
>            reactor.addReader(self)
>
>        def fileno(self):
>            return self.filedes
>
>        def connectionLost(self, reason):
>            raise reason
>
>        def logPrefix(self):
>            return 'inputFile'
>
>        def doRead(self):
>            reactor.removeReader(self)
>            os.close(self.filedes)
>            self.filedes = -1
>            reactor.stop()
>
>     if __name__ == '__main__':
>        r = inputFile('/etc/group')
>        reactor.addReader(r)
>        reactor.run()
>
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/3597b75d/attachment.htm 

From arjan at scherpenisse.net  Wed Feb 10 14:38:48 2010
From: arjan at scherpenisse.net (Arjan Scherpenisse)
Date: Wed, 10 Feb 2010 20:38:48 +0100
Subject: [Twisted-Python] How can I send unique configuration data for
 multiple connections through a factory?
In-Reply-To: <dc408fe51002101053g4234a5c3nc1040f9c72a9abae@mail.gmail.com>
References: <dc408fe51002101053g4234a5c3nc1040f9c72a9abae@mail.gmail.com>
Message-ID: <4B730B48.3070206@scherpenisse.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

If you create two instances of your ClusterClientFactory, each with a
unique string, you should be fine. Requires only a small modification:

         factory = ClusterClientFactory()
         factory.maxDelay = 120  #  two minutes
         factory.connectString = "FirstString..."
         reactor.connectTCP("localhost", 7300, factory)

         factory2 = ClusterClientFactory()
         factory2.maxDelay = 120  #  two minutes
         factory2.connectString = "SecondString"
         reactor2.connectTCP("localhost", 7300, factory)

You can clean this up by putting the maxDelay and connectString in the
constructor of the factory:

reactor2.connectTCP("localhost", 7300, ClusterClientFactory(120, "First"))
reactor2.connectTCP("localhost", 7300, ClusterClientFactory(120, "Second"))

Arjan

Mark Bailey wrote:
> Good day:
> 
> I've been having fun with Twisted.  I have my application running fine,
> with multiple server and client connections using Telnet.  :-)
> 
> However, users always want something.  I need to send some unique
> configuration information to each connection.  The connections are made
> using connectTCP.  My first attempt assumed that the connection was made
> when the call to connectTCP was executed.  It didn't work!  :-(
> 
> -------------------------------
> 
> from twisted.internet.protocol import ClientFactory
> from twisted.internet import reactor
> from twisted.conch.telnet import StatefulTelnetProtocol
> 
> class testClient(StatefulTelnetProtocol):
> 
>     def connectionMade(self):
>         self.title = self.factory.connectString
>         print "Client Connected: " + self.title
>         self.setRawMode()
>         self.factory.connections.append(self)
> 
>     def connectionLost(self, reason):
>         if self in self.factory.connections:
>             self.factory.connections.remove(self)
> 
>     def rawDataReceived(self,data):
>         print data + "\n"
> 
> class ClusterClientFactory(ClientFactory):
> 
>     protocol = testClient
> 
>     def __init__(self):
>         self.connections = []
>         self.connectString = ''
> 
>     def startFactory(self):
>         print "startFactory: " + self.connectString
> 
>     def startedConnecting(self, connector):
>         print "Started connecting: " + str(connector)
>         print self.connectString
> 
>     def buildProtocol(self, addr):
>         print "bulldProtocol: " + str(addr)
>         print "buildProtocol: " + self.connectString
> 
>         p = self.protocol()
>         p.factory = self
>         return p
> 
> if __name__ == '__main__':
> 
> 
>     def startUp():
> 
>         factory = ClusterClientFactory()
>         factory.maxDelay = 120  #  two minutes
> 
>         factory.connectString = "FirstString..."
>         reactor.connectTCP("localhost", 7300, factory)
> 
>         factory.connectString = "SecondString"
>         reactor.connectTCP("localhost", 7300, factory)
> 
>     reactor.callWhenRunning(startUp)
>     reactor.run()
> 
> ----------------------------------
> 
> The results are that buildProtocol gets the second string both times. 
> startedConnecting gets the correct string, but all I have there is a
> connection object.  I need the correct data in buildProtocol to do it
> this way.
> 
> ------------------------------------
> 
> C:\Users\Mark\src\play>python testclient.py
> startFactory: FirstString...
> Started connecting: <twisted.internet.tcp.Connector instance at 0x01DAB620>
> FirstString...
> Started connecting: <twisted.internet.tcp.Connector instance at 0x01E0EFD0>
> SecondString
> bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
> buildProtocol: SecondString
> Client Connected: SecondString
> Welcome to SimpleServer5
> 
> 
> 
> bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
> buildProtocol: SecondString
> Client Connected: SecondString
> Welcome to SimpleServer5
> 
> --------------------------
> 
> 
> My "best" idea is to pass the strings to the factory in a dictionary
> indexed by the IP address and the port.  Then, buildProtocol() can use
> that to recover the string and I can use reactor.resolve() to translate
> the host name to the IP address.  The real application won't have
> multiple connections to the same host and port like this example, so
> this would work.
> 
> There MUST be a better way.  :-)
> 
> My "simpleserver" is below if you want to run this.
> 
> THANKS for all of your help.  I have the basic application running now
> (including a Tkinter GUI  :-) ) and Twisted has saved me hundreds or
> even thousands of lines of code...
> 
> Mark Bailey
> 
> ------------------------------
> 
> from twisted.conch.telnet import StatefulTelnetProtocol
> from twisted.internet import reactor, protocol
> from twisted.protocols.basic import LineReceiver
> 
> class TelnetEcho(StatefulTelnetProtocol):
>     def connectionMade(self):
>         self.factory.connection.append(self)
>         self.sendLine("Welcome to SimpleServer5\r\n")
> 
> 
>     def lineReceived(self, data):
>         data = data.rstrip('\n\r')
> 
>         if data.upper() == 'BYE':
>             self.sendLine("Goodbye...\r")
>             self.transport.loseConnection()
>         else:
>             self.sendLine("Unrecognized command: %r\r" % (data,))
> 
>     def connectionLost(self, reason):
>         self.factory.connection.remove(self)
> 
> 
> class TelnetEchoFactory(protocol.Factory):
>     protocol = TelnetEcho
>     def __init__(self):
>         self.connection = []
> 
> 
> def createTelnetServer(port=7300):
>     telnetinstance = TelnetEchoFactory()       #  needs to be a list
>     reactor.listenTCP(port,telnetinstance)
> 
> if __name__ == "__main__":
>     reactor.callWhenRunning(createTelnetServer)
>     reactor.run()
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAktzC0MACgkQigE4AbflYer9nwCgixra0FaTD6ubvGJufjApRG/m
A34An3C2ng+4x3/halWSgGQUvQvsCiTM
=Cg6W
-----END PGP SIGNATURE-----


From mebly5343 at gmail.com  Wed Feb 10 14:44:12 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 14:44:12 -0500
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <4B7307ED.4010400@noir.com>
References: <4B72102D.4010306@noir.com>
	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
	<4B7307ED.4010400@noir.com>
Message-ID: <dc408fe51002101144h6558578dtddcf6f724cfa2e32@mail.gmail.com>

Hi Rich:

Try removing the "reactor.addReader(self)" call from "__init__" and see what
happens.  That call is made when "r" is created in

   r = inputFile('/etc/group')

and immediately after that you are calling
   reactor.addReader(r)

So, you are calling reactor.addReader() twice on the same instance.

Mark

On Wed, Feb 10, 2010 at 2:24 PM, K. Richard Pixley <rich at noir.com> wrote:

>  I don't think so.  I believe the reactor is actually added during the
> import.  (I learned this as I discovered that reactors can't be restarted,
> which means you have to manually create a new one as a fixture for simple
> unittest work.)
>
> I looked through the code and there's a call in the reactor to fileno
> immediately after the call to doRead.  It seems to be attempting to check
> for file descriptors which broke during the read, but I think that's a
> mistake.  (Or at least, I'm confused about how else to do it).  Seems to me
> that the only time my object has control in order to remove itself is during
> doRead.  So I'm thinking that either...
>
> a) there's some other way to close out my object that I just haven't
> discovered or
>
> b) the code which checks the file descriptor, (which may have been closed),
> after doRead is doing so mistakenly.
>
> For now, in my real code, I'm just leaving the file descriptor.  But I'd
> like to know how this is intended to be used.
>
> --rich (still a newbie)
>
> Mark Bailey wrote:
>
> Hi:
>
> Aren't you adding two readers?  One is added in the __init__ method of
> inputFile, the other in the test code.
>
> I'm also a newbie so maybe I'm equally confused...
>
> On Tue, Feb 9, 2010 at 8:47 PM, K. Richard Pixley <rich at noir.com> wrote:
>
>> I'm confused be the response I get to the attached program.
>>
>> In a nutshell, I'm building a reader, attaching it with addReader, later
>> removing it with removeReader.  And I'm getting this:
>>
>> time python test_reactor.py
>> Traceback (most recent call last):
>> Failure: twisted.internet.error.ConnectionFdescWentAway: Uh:
>> Filedescriptor went away.
>>
>> Which seems to be telling me that I don't know as much yet as I'd hoped.
>>
>> Why would the reactor care about a closed file descriptor that isn't even
>> in it's interest set?
>>
>> --rich
>>
>> #!/usr/bin/env python
>> # -*- coding: utf-8 -*-
>>
>> import os
>>
>> from zope.interface import implements
>> from twisted.internet import reactor
>> from twisted.internet.interfaces import IReadDescriptor
>>
>> class inputFile(object):
>>    implements(IReadDescriptor)
>>
>>    def __init__(self, filename):
>>        self.filename = filename
>>        self.filedes = os.open(filename, os.O_RDONLY | os.O_NONBLOCK)
>>        reactor.addReader(self)
>>
>>    def fileno(self):
>>        return self.filedes
>>
>>    def connectionLost(self, reason):
>>        raise reason
>>
>>    def logPrefix(self):
>>        return 'inputFile'
>>
>>    def doRead(self):
>>        reactor.removeReader(self)
>>        os.close(self.filedes)
>>        self.filedes = -1
>>        reactor.stop()
>>
>> if __name__ == '__main__':
>>    r = inputFile('/etc/group')
>>    reactor.addReader(r)
>>    reactor.run()
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
> ------------------------------
>
> _______________________________________________
> Twisted-Python mailing listTwisted-Python at twistedmatrix.comhttp://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/e870621b/attachment.htm 

From brad.milne at devx.runthered.com  Wed Feb 10 14:59:08 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 11 Feb 2010 08:59:08 +1300
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <19ae58271002101120k117bd70crb27f2382b119f452@mail.gmail.com>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
	<19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>
	<20100208210226.26099.695917310.divmod.xquotient.838@localhost.localdomain>
	<19ae58271002101120k117bd70crb27f2382b119f452@mail.gmail.com>
Message-ID: <19ae58271002101159l46874244jeac3f2e7d4de800e@mail.gmail.com>

End of trace is:
  File "C:\Python26\lib\site-packages\twisted\web\resource.py", line 189, in
render
    raise UnsupportedMethod(getattr(self, 'allowedMethods', ()))
twisted.web.server.UnsupportedMethod: ()

On 11 February 2010 08:20, Brad Milne <brad.milne at devx.runthered.com> wrote:

> Thanks. I had actually already found your page and you're right, it does
> seem to be the best resource out there. Since your email I've had a second
> look at it, as initially I wasn't sure how to use the example to return a
> web resource (handler with render_GET etc) in place of the file you
> returned. Turns out it wasn't actually too bad, and looks something like:
>
> {code}
>
> from zope.interface import implements
>
> from twisted.cred.portal import IRealm, Portal
> from twisted.cred.checkers import FilePasswordDB
> from twisted.web.static import File
> from twisted.web.resource import IResource
>
> from twisted.web.guard import HTTPAuthSessionWrapper, DigestCredentialFactory
>
> def secureServer():
>     class PublicHTMLRealm(object):
>         implements(IRealm)
>
>         def requestAvatar(self, avatarId, mind, *interfaces):
>
>             if IResource in interfaces:
>                 return (IResource, WebResource(), lambda: None)
>             raise NotImplementedError()
>
>     portal = Portal(PublicHTMLRealm(), [FilePasswordDB('httpd.password')])
>
>     credentialFactory = BasicCredentialFactory("MyRealm")
>     rsrc = HTTPAuthSessionWrapper(portal, [credentialFactory])
>
>     return rsrc
>
> class WebResource(resource.Resource):
>     def __init__():
>
>         ....
>
>     def getChild(self, path, request):
>         if path == self.expected:
>             return ValidHandler()
>         else:
>             return InvalidUrlHandler()
>
> # Create server
> my_server = secureServer(...)
>
> site = server.Site(my_server)
>
> {code}
>
> This has worked great so far where ValidHandler contains a render_GET, but
> when calling a POST or PUT on handler that has render_POST or render_PUT
> using this technique returns a message which I think is Method Not Allowed
> (on the train right now, so don't have in front of me, sorry). Is there a
> better way to form the above to prevent this?
>
> Thanks again
> Brad
>
> On 9 February 2010 10:02, <exarkun at twistedmatrix.com> wrote:
> ...
>
> It's definitely true that there isn't a lot of documentation for Guard.
>> I've written up something, though (which hopefully will soon be included in
>> Twisted itself, to make it easier to find), which I think will get you up to
>> speed on using Guard pretty quickly:
>>
>>   http://jcalderone.livejournal.com/53074.html
>>
>> The final example, which sets up an actual Twisted Web server protected by
>> digest auth (basic is even easier), only takes 16 lines.
>>
>> If that's still not to your liking, then you can always fall back to the
>> much more tedious, much less elegant, request.getUsername() and
>> request.getPassword() approach. :)  You'll have to rely on the API docs for
>> that approach, though, as far as I know there are no prose-style
>> introductions for it.
>>
> ...
>
>>
>> Jean-Paul
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100211/202e13d0/attachment-0001.htm 

From brad.milne at devx.runthered.com  Wed Feb 10 15:09:42 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 11 Feb 2010 09:09:42 +1300
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <19ae58271002101159l46874244jeac3f2e7d4de800e@mail.gmail.com>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
	<19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>
	<20100208210226.26099.695917310.divmod.xquotient.838@localhost.localdomain>
	<19ae58271002101120k117bd70crb27f2382b119f452@mail.gmail.com>
	<19ae58271002101159l46874244jeac3f2e7d4de800e@mail.gmail.com>
Message-ID: <19ae58271002101209y2f2c9bd8n940a22981fc35e10@mail.gmail.com>

Haha, resolved now. Previously my setup wasn't sensitive to a missing
trailing slash on my PUT and POSTs, but now it is. I don't know why, but at
least it's solvable.

Thanks for the help
Brad

On 11 February 2010 08:59, Brad Milne <brad.milne at devx.runthered.com> wrote:

> End of trace is:
>   File "C:\Python26\lib\site-packages\twisted\web\resource.py", line 189,
> in render
>     raise UnsupportedMethod(getattr(self, 'allowedMethods', ()))
> twisted.web.server.UnsupportedMethod: ()
>
> On 11 February 2010 08:20, Brad Milne <brad.milne at devx.runthered.com>wrote:
>
>> Thanks. I had actually already found your page and you're right, it does
>> seem to be the best resource out there. Since your email I've had a second
>> look at it, as initially I wasn't sure how to use the example to return a
>> web resource (handler with render_GET etc) in place of the file you
>> returned. Turns out it wasn't actually too bad, and looks something like:
>>
>> {code}
>>
>> from zope.interface import implements
>>
>> from twisted.cred.portal import IRealm, Portal
>> from twisted.cred.checkers import FilePasswordDB
>> from twisted.web.static import File
>>
>> from twisted.web.resource import IResource
>>
>> from twisted.web.guard import HTTPAuthSessionWrapper, DigestCredentialFactory
>>
>> def secureServer():
>>     class PublicHTMLRealm(object):
>>         implements(IRealm)
>>
>>         def requestAvatar(self, avatarId, mind, *interfaces):
>>
>>
>>             if IResource in interfaces:
>>                 return (IResource, WebResource(), lambda: None)
>>             raise NotImplementedError()
>>
>>     portal = Portal(PublicHTMLRealm(), [FilePasswordDB('httpd.password')])
>>
>>
>>     credentialFactory = BasicCredentialFactory("MyRealm")
>>     rsrc = HTTPAuthSessionWrapper(portal, [credentialFactory])
>>
>>     return rsrc
>>
>> class WebResource(resource.Resource):
>>     def __init__():
>>
>>
>>         ....
>>
>>     def getChild(self, path, request):
>>         if path == self.expected:
>>             return ValidHandler()
>>         else:
>>             return InvalidUrlHandler()
>>
>> # Create server
>> my_server = secureServer(...)
>>
>>
>> site = server.Site(my_server)
>>
>> {code}
>>
>> This has worked great so far where ValidHandler contains a render_GET, but
>> when calling a POST or PUT on handler that has render_POST or render_PUT
>> using this technique returns a message which I think is Method Not Allowed
>> (on the train right now, so don't have in front of me, sorry). Is there a
>> better way to form the above to prevent this?
>>
>> Thanks again
>> Brad
>>
>> On 9 February 2010 10:02, <exarkun at twistedmatrix.com> wrote:
>> ...
>>
>> It's definitely true that there isn't a lot of documentation for Guard.
>>> I've written up something, though (which hopefully will soon be included in
>>> Twisted itself, to make it easier to find), which I think will get you up to
>>> speed on using Guard pretty quickly:
>>>
>>>   http://jcalderone.livejournal.com/53074.html
>>>
>>> The final example, which sets up an actual Twisted Web server protected
>>> by digest auth (basic is even easier), only takes 16 lines.
>>>
>>> If that's still not to your liking, then you can always fall back to the
>>> much more tedious, much less elegant, request.getUsername() and
>>> request.getPassword() approach. :)  You'll have to rely on the API docs for
>>> that approach, though, as far as I know there are no prose-style
>>> introductions for it.
>>>
>> ...
>>
>>>
>>> Jean-Paul
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100211/450bf268/attachment.htm 

From rich at noir.com  Wed Feb 10 15:20:10 2010
From: rich at noir.com (K. Richard Pixley)
Date: Wed, 10 Feb 2010 12:20:10 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <dc408fe51002101144h6558578dtddcf6f724cfa2e32@mail.gmail.com>
References: <4B72102D.4010306@noir.com>	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>	<4B7307ED.4010400@noir.com>
	<dc408fe51002101144h6558578dtddcf6f724cfa2e32@mail.gmail.com>
Message-ID: <4B7314FA.2080304@noir.com>

Doh.  You're right about the double registration.  Thanks.  But that 
doesn't change my problem.

The reactor still complains about the busted descriptor after removing 
the reader and reseting my descriptor to -1.

--rich

Mark Bailey wrote:
> Hi Rich:
>
> Try removing the "reactor.addReader(self)" call from "__init__" and 
> see what happens.  That call is made when "r" is created in
>
>    r = inputFile('/etc/group')
>
> and immediately after that you are calling
>    reactor.addReader(r)
>
> So, you are calling reactor.addReader() twice on the same instance.
>
> Mark
>
> On Wed, Feb 10, 2010 at 2:24 PM, K. Richard Pixley <rich at noir.com 
> <mailto:rich at noir.com>> wrote:
>
>     I don't think so.  I believe the reactor is actually added during
>     the import.  (I learned this as I discovered that reactors can't
>     be restarted, which means you have to manually create a new one as
>     a fixture for simple unittest work.)
>
>     I looked through the code and there's a call in the reactor to
>     fileno immediately after the call to doRead.  It seems to be
>     attempting to check for file descriptors which broke during the
>     read, but I think that's a mistake.  (Or at least, I'm confused
>     about how else to do it).  Seems to me that the only time my
>     object has control in order to remove itself is during doRead.  So
>     I'm thinking that either...
>
>     a) there's some other way to close out my object that I just
>     haven't discovered or
>
>     b) the code which checks the file descriptor, (which may have been
>     closed), after doRead is doing so mistakenly.
>
>     For now, in my real code, I'm just leaving the file descriptor. 
>     But I'd like to know how this is intended to be used.
>
>     --rich (still a newbie)
>
>     Mark Bailey wrote:
>>     Hi:
>>
>>     Aren't you adding two readers?  One is added in the __init__
>>     method of inputFile, the other in the test code.
>>
>>     I'm also a newbie so maybe I'm equally confused...
>>
>>     On Tue, Feb 9, 2010 at 8:47 PM, K. Richard Pixley <rich at noir.com
>>     <mailto:rich at noir.com>> wrote:
>>
>>         I'm confused be the response I get to the attached program.
>>
>>         In a nutshell, I'm building a reader, attaching it with
>>         addReader, later removing it with removeReader.  And I'm
>>         getting this:
>>
>>             time python test_reactor.py
>>             Traceback (most recent call last):
>>             Failure: twisted.internet.error.ConnectionFdescWentAway:
>>             Uh: Filedescriptor went away.
>>
>>         Which seems to be telling me that I don't know as much yet as
>>         I'd hoped.
>>
>>         Why would the reactor care about a closed file descriptor
>>         that isn't even in it's interest set?
>>
>>         --rich
>>
>>         #!/usr/bin/env python
>>         # -*- coding: utf-8 -*-
>>
>>         import os
>>
>>         from zope.interface import implements
>>         from twisted.internet import reactor
>>         from twisted.internet.interfaces import IReadDescriptor
>>
>>         class inputFile(object):
>>            implements(IReadDescriptor)
>>
>>            def __init__(self, filename):
>>                self.filename = filename
>>                self.filedes = os.open(filename, os.O_RDONLY |
>>         os.O_NONBLOCK)
>>                reactor.addReader(self)
>>
>>            def fileno(self):
>>                return self.filedes
>>
>>            def connectionLost(self, reason):
>>                raise reason
>>
>>            def logPrefix(self):
>>                return 'inputFile'
>>
>>            def doRead(self):
>>                reactor.removeReader(self)
>>                os.close(self.filedes)
>>                self.filedes = -1
>>                reactor.stop()
>>
>>         if __name__ == '__main__':
>>            r = inputFile('/etc/group')
>>            reactor.addReader(r)
>>            reactor.run()
>>
>>         _______________________________________________
>>         Twisted-Python mailing list
>>         Twisted-Python at twistedmatrix.com
>>         <mailto:Twisted-Python at twistedmatrix.com>
>>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>     ------------------------------------------------------------------------
>>     _______________________________________________ Twisted-Python
>>     mailing list Twisted-Python at twistedmatrix.com
>>     <mailto:Twisted-Python at twistedmatrix.com>
>>     http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/1287de41/attachment.htm 

From exarkun at twistedmatrix.com  Wed Feb 10 15:32:24 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 10 Feb 2010 20:32:24 -0000
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1265829799.2532.27.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
Message-ID: <20100210203224.26099.1312694566.divmod.xquotient.1023@localhost.localdomain>

On 07:23 pm, darren at ontrenet.com wrote:
>> From what I learned in other posts, the dataReceived(self, data): in 
>>the
>Echo server
>will get called with out-of-order data/bytes from the client. Of 
>course,
>I could be misinformed,
>but what I understood before was that in this type of Protocol, I would
>have to re-order
>and re-assemble the bytes.  And I'm trying to avoid that, since of
>course, TCP already does it.
>
>But like I said, I could have been misinformed because it seems pretty
>basic to write 1,2,3
>to a server and have it received 1,2,3, guaranteed.

Order is guaranteed, as long as you're using one of the TCP, SSL, or 
UNIX transports.

Jean-Paul


From exarkun at twistedmatrix.com  Wed Feb 10 15:39:57 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 10 Feb 2010 20:39:57 -0000
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <4B7307ED.4010400@noir.com>
References: <4B72102D.4010306@noir.com>
	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
	<4B7307ED.4010400@noir.com>
Message-ID: <20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>

On 07:24 pm, rich at noir.com wrote:
>I don't think so.  I believe the reactor is actually added during the 
>import.  (I learned this as I discovered that reactors can't be 
>restarted, which means you have to manually create a new one as a 
>fixture for simple unittest work.)
>
>I looked through the code and there's a call in the reactor to fileno 
>immediately after the call to doRead.  It seems to be attempting to 
>check for file descriptors which broke during the read, but I think 
>that's a mistake.  (Or at least, I'm confused about how else to do it). 
>Seems to me that the only time my object has control in order to remove 
>itself is during doRead.  So I'm thinking that either...
>
>a) there's some other way to close out my object that I just haven't 
>discovered or
>
>b) the code which checks the file descriptor, (which may have been 
>closed), after doRead is doing so mistakenly.
>
>For now, in my real code, I'm just leaving the file descriptor.  But 
>I'd like to know how this is intended to be used.

It isn't `doRead`'s job to close the file descriptor.  At most, it's 
`doRead`'s job to signal that the descriptor is no longer worth keeping 
open by returning something like an instance of ConnectionDone or 
ConnectionLost.  Then the reactor will call connectionLost on your 
object and you can close the file descriptor there.

The documentation for how this all works could probably be improved. 
Once you figure it out, would you mind submitting a patch?

Also, you won't accomplish much by adding a file descriptor for a normal 
file to the reactor.  Select, poll, etc, will always indicate that such 
descriptors are both readable and writeable.

Jean-Paul


From db3l.net at gmail.com  Wed Feb 10 16:01:08 2010
From: db3l.net at gmail.com (David Bolen)
Date: Wed, 10 Feb 2010 16:01:08 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
Message-ID: <m2vde44xgr.fsf@valheru.db3l.homeip.net>

Darren Govoni <darren at ontrenet.com> writes:

>>From what I learned in other posts, the dataReceived(self, data): in the
> Echo server
> will get called with out-of-order data/bytes from the client. Of course,
> I could be misinformed,
> but what I understood before was that in this type of Protocol, I would
> have to re-order
> and re-assemble the bytes.  And I'm trying to avoid that, since of
> course, TCP already does it.

Data being received out of order can't happen, as long as the Protocol
is layered on top of TCP, since as you say, TCP already provides that
guarantee.  The dataReceived() method is really just how the data
being received from TCP is handed to the Protocol object.

UDP can be out of order, as it provides very few guarantees above and
beyond IP itself.  But I'm not sure you can layer an IProtocol over
UDP with Twisted.

There is a general issue where you may receive the data in differently
sized chunks in dataReceived() than it might have been transmitted
originally, which is a common source of confusion to people new to
stream protocols, so perhaps you were thinking of that issue?

The stream nature (and possibility for early disconnect from the
client) is why having some internal length information for bulk
transfers is sensible.  For your original question, I was going to
suggest an older posting of mine for a similar situation where I needed
a bulk upload to augment a PB-based server, but it appears that you've
located it in the archives yourself.

> But like I said, I could have been misinformed because it seems pretty
> basic to write 1,2,3
> to a server and have it received 1,2,3, guaranteed.

Yes - TCP guarantees that what you transmit at one end will be
received in order at the other end or not at all (e.g., outages,
disconnects, etc...).  It has a weaker guarantee in terms of no
corruption, but one that is, in combination with typical link layer
protections, generally more than sufficient for the vast majority of
connections using it each day.

-- David



From mebly5343 at gmail.com  Wed Feb 10 16:15:40 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 16:15:40 -0500
Subject: [Twisted-Python] How can I send unique configuration data for
	multiple connections through a factory?
In-Reply-To: <4B730B48.3070206@scherpenisse.net>
References: <dc408fe51002101053g4234a5c3nc1040f9c72a9abae@mail.gmail.com>
	<4B730B48.3070206@scherpenisse.net>
Message-ID: <dc408fe51002101315o6e05c750x4493983e308aed48@mail.gmail.com>

Thanks, Arjan.  Of course, factories are breeding like rabbits, but that was
the obvious solution!  :-)  I wish I had thought of it.

You saved me several MORE hours...I've spend all day on this.

(It's snowing and work was CLOSED!  Yeehah!)

Mark

On Wed, Feb 10, 2010 at 2:38 PM, Arjan Scherpenisse
<arjan at scherpenisse.net>wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> If you create two instances of your ClusterClientFactory, each with a
> unique string, you should be fine. Requires only a small modification:
>
>         factory = ClusterClientFactory()
>         factory.maxDelay = 120  #  two minutes
>         factory.connectString = "FirstString..."
>         reactor.connectTCP("localhost", 7300, factory)
>
>          factory2 = ClusterClientFactory()
>         factory2.maxDelay = 120  #  two minutes
>         factory2.connectString = "SecondString"
>         reactor2.connectTCP("localhost", 7300, factory)
>
> You can clean this up by putting the maxDelay and connectString in the
> constructor of the factory:
>
> reactor2.connectTCP("localhost", 7300, ClusterClientFactory(120, "First"))
> reactor2.connectTCP("localhost", 7300, ClusterClientFactory(120, "Second"))
>
> Arjan
>
> Mark Bailey wrote:
> > Good day:
> >
> > I've been having fun with Twisted.  I have my application running fine,
> > with multiple server and client connections using Telnet.  :-)
> >
> > However, users always want something.  I need to send some unique
> > configuration information to each connection.  The connections are made
> > using connectTCP.  My first attempt assumed that the connection was made
> > when the call to connectTCP was executed.  It didn't work!  :-(
> >
> > -------------------------------
> >
> > from twisted.internet.protocol import ClientFactory
> > from twisted.internet import reactor
> > from twisted.conch.telnet import StatefulTelnetProtocol
> >
> > class testClient(StatefulTelnetProtocol):
> >
> >     def connectionMade(self):
> >         self.title = self.factory.connectString
> >         print "Client Connected: " + self.title
> >         self.setRawMode()
> >         self.factory.connections.append(self)
> >
> >     def connectionLost(self, reason):
> >         if self in self.factory.connections:
> >             self.factory.connections.remove(self)
> >
> >     def rawDataReceived(self,data):
> >         print data + "\n"
> >
> > class ClusterClientFactory(ClientFactory):
> >
> >     protocol = testClient
> >
> >     def __init__(self):
> >         self.connections = []
> >         self.connectString = ''
> >
> >     def startFactory(self):
> >         print "startFactory: " + self.connectString
> >
> >     def startedConnecting(self, connector):
> >         print "Started connecting: " + str(connector)
> >         print self.connectString
> >
> >     def buildProtocol(self, addr):
> >         print "bulldProtocol: " + str(addr)
> >         print "buildProtocol: " + self.connectString
> >
> >         p = self.protocol()
> >         p.factory = self
> >         return p
> >
> > if __name__ == '__main__':
> >
> >
> >     def startUp():
> >
> >         factory = ClusterClientFactory()
> >         factory.maxDelay = 120  #  two minutes
> >
> >         factory.connectString = "FirstString..."
> >         reactor.connectTCP("localhost", 7300, factory)
> >
> >         factory.connectString = "SecondString"
> >         reactor.connectTCP("localhost", 7300, factory)
> >
> >     reactor.callWhenRunning(startUp)
> >     reactor.run()
> >
> > ----------------------------------
> >
> > The results are that buildProtocol gets the second string both times.
> > startedConnecting gets the correct string, but all I have there is a
> > connection object.  I need the correct data in buildProtocol to do it
> > this way.
> >
> > ------------------------------------
> >
> > C:\Users\Mark\src\play>python testclient.py
> > startFactory: FirstString...
> > Started connecting: <twisted.internet.tcp.Connector instance at
> 0x01DAB620>
> > FirstString...
> > Started connecting: <twisted.internet.tcp.Connector instance at
> 0x01E0EFD0>
> > SecondString
> > bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
> > buildProtocol: SecondString
> > Client Connected: SecondString
> > Welcome to SimpleServer5
> >
> >
> >
> > bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
> > buildProtocol: SecondString
> > Client Connected: SecondString
> > Welcome to SimpleServer5
> >
> > --------------------------
> >
> >
> > My "best" idea is to pass the strings to the factory in a dictionary
> > indexed by the IP address and the port.  Then, buildProtocol() can use
> > that to recover the string and I can use reactor.resolve() to translate
> > the host name to the IP address.  The real application won't have
> > multiple connections to the same host and port like this example, so
> > this would work.
> >
> > There MUST be a better way.  :-)
> >
> > My "simpleserver" is below if you want to run this.
> >
> > THANKS for all of your help.  I have the basic application running now
> > (including a Tkinter GUI  :-) ) and Twisted has saved me hundreds or
> > even thousands of lines of code...
> >
> > Mark Bailey
> >
> > ------------------------------
> >
> > from twisted.conch.telnet import StatefulTelnetProtocol
> > from twisted.internet import reactor, protocol
> > from twisted.protocols.basic import LineReceiver
> >
> > class TelnetEcho(StatefulTelnetProtocol):
> >     def connectionMade(self):
> >         self.factory.connection.append(self)
> >         self.sendLine("Welcome to SimpleServer5\r\n")
> >
> >
> >     def lineReceived(self, data):
> >         data = data.rstrip('\n\r')
> >
> >         if data.upper() == 'BYE':
> >             self.sendLine("Goodbye...\r")
> >             self.transport.loseConnection()
> >         else:
> >             self.sendLine("Unrecognized command: %r\r" % (data,))
> >
> >     def connectionLost(self, reason):
> >         self.factory.connection.remove(self)
> >
> >
> > class TelnetEchoFactory(protocol.Factory):
> >     protocol = TelnetEcho
> >     def __init__(self):
> >         self.connection = []
> >
> >
> > def createTelnetServer(port=7300):
> >     telnetinstance = TelnetEchoFactory()       #  needs to be a list
> >     reactor.listenTCP(port,telnetinstance)
> >
> > if __name__ == "__main__":
> >     reactor.callWhenRunning(createTelnetServer)
> >     reactor.run()
> >
> >
> > ------------------------------------------------------------------------
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.9 (GNU/Linux)
> Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/
>
> iEYEARECAAYFAktzC0MACgkQigE4AbflYer9nwCgixra0FaTD6ubvGJufjApRG/m
> A34An3C2ng+4x3/halWSgGQUvQvsCiTM
> =Cg6W
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/99001b18/attachment.htm 

From darren at ontrenet.com  Wed Feb 10 18:34:09 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Wed, 10 Feb 2010 18:34:09 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <m2vde44xgr.fsf@valheru.db3l.homeip.net>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
Message-ID: <1265844849.2532.28.camel@kratos>

Thanks for that explanation David. Makes sense! 

On Wed, 2010-02-10 at 16:01 -0500, David Bolen wrote:

> Darren Govoni <darren at ontrenet.com> writes:
> 
> >>From what I learned in other posts, the dataReceived(self, data): in the
> > Echo server
> > will get called with out-of-order data/bytes from the client. Of course,
> > I could be misinformed,
> > but what I understood before was that in this type of Protocol, I would
> > have to re-order
> > and re-assemble the bytes.  And I'm trying to avoid that, since of
> > course, TCP already does it.
> 
> Data being received out of order can't happen, as long as the Protocol
> is layered on top of TCP, since as you say, TCP already provides that
> guarantee.  The dataReceived() method is really just how the data
> being received from TCP is handed to the Protocol object.
> 
> UDP can be out of order, as it provides very few guarantees above and
> beyond IP itself.  But I'm not sure you can layer an IProtocol over
> UDP with Twisted.
> 
> There is a general issue where you may receive the data in differently
> sized chunks in dataReceived() than it might have been transmitted
> originally, which is a common source of confusion to people new to
> stream protocols, so perhaps you were thinking of that issue?
> 
> The stream nature (and possibility for early disconnect from the
> client) is why having some internal length information for bulk
> transfers is sensible.  For your original question, I was going to
> suggest an older posting of mine for a similar situation where I needed
> a bulk upload to augment a PB-based server, but it appears that you've
> located it in the archives yourself.
> 
> > But like I said, I could have been misinformed because it seems pretty
> > basic to write 1,2,3
> > to a server and have it received 1,2,3, guaranteed.
> 
> Yes - TCP guarantees that what you transmit at one end will be
> received in order at the other end or not at all (e.g., outages,
> disconnects, etc...).  It has a weaker guarantee in terms of no
> corruption, but one that is, in combination with typical link layer
> protections, generally more than sufficient for the vast majority of
> connections using it each day.
> 
> -- David
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100210/67cbbcba/attachment-0001.htm 

From petshmidt at googlemail.com  Thu Feb 11 07:41:12 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 11 Feb 2010 13:41:12 +0100
Subject: [Twisted-Python] multiple versions of twisted on same machine
Message-ID: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>

Hi,

I'd like to upgrade twisted to the newest version and obviously first
test if my application works fine with new version. What is the best
(safest) way to do it?

Thanks for help, Pet


From thatmattbone at gmail.com  Thu Feb 11 07:55:36 2010
From: thatmattbone at gmail.com (Matt Bone)
Date: Thu, 11 Feb 2010 06:55:36 -0600
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
Message-ID: <dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>

You could try virtualenv:

http://pypi.python.org/pypi/virtualenv

And have one virtual environment with Twisted 9.0 and another with
Twisted 8.2, etc, etc.

--matt

On Thu, Feb 11, 2010 at 6:41 AM, Pet <petshmidt at googlemail.com> wrote:
> Hi,
>
> I'd like to upgrade twisted to the newest version and obviously first
> test if my application works fine with new version. What is the best
> (safest) way to do it?
>
> Thanks for help, Pet
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From kevin.horn at gmail.com  Thu Feb 11 11:41:45 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 11 Feb 2010 10:41:45 -0600
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
Message-ID: <562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>

FYI, this totally fails on Windows XP, Py2.6, Twisted 9.0.0...

[command line oputput]
(venv) C:\Documents and
Settings\hornk\Desktop\twisted_venv_test\venv>easy_install Twisted
Searching for Twisted
Reading http://pypi.python.org/simple/Twisted/
Reading http://twistedmatrix.com/
Reading http://www.twistedmatrix.com
Reading http://twistedmatrix.com/products/download
Reading http://twistedmatrix.com/projects/core/
Best match: Twisted 9.0.0
Downloading
http://tmrc.mit.edu/mirror/twisted/Twisted/9.0/Twisted-9.0.0.win32-py2.6.exe
Processing Twisted-9.0.0.win32-py2.6.exe
error:
c:\docume~1\hornk\locals~1\temp\easy_install-ftwcae\Twisted-9.0.0.win32-py2.6.exe
is not a valid distutils Windows .exe
[end command line output]

Am I missing something or should I file a ticket for this?

Kevin Horn

On Thu, Feb 11, 2010 at 6:55 AM, Matt Bone <thatmattbone at gmail.com> wrote:

> You could try virtualenv:
>
> http://pypi.python.org/pypi/virtualenv
>
> And have one virtual environment with Twisted 9.0 and another with
> Twisted 8.2, etc, etc.
>
> --matt
>
> On Thu, Feb 11, 2010 at 6:41 AM, Pet <petshmidt at googlemail.com> wrote:
> > Hi,
> >
> > I'd like to upgrade twisted to the newest version and obviously first
> > test if my application works fine with new version. What is the best
> > (safest) way to do it?
> >
> > Thanks for help, Pet
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100211/2ec7dfda/attachment.htm 

From exarkun at twistedmatrix.com  Thu Feb 11 12:05:35 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 11 Feb 2010 17:05:35 -0000
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
	<562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>
Message-ID: <20100211170535.26099.2118225748.divmod.xquotient.1087@localhost.localdomain>

On 04:41 pm, kevin.horn at gmail.com wrote:
>FYI, this totally fails on Windows XP, Py2.6, Twisted 9.0.0...

This is an interesting problem.

easy_install identifies 
http://tmrc.mit.edu/mirror/twisted/Twisted/9.0/Twisted-9.0.0.win32-py2.6.exe 
as some kind of package it can install - maybe a self-extracting zip?  I 
don't know - but that's not what it is.  This seems to be because the 
name matches the scheme setuptools uses for naming certain kinds of 
distribution files.

We presently are not distributing binary eggs for Windows, so 
easy_install isn't likely to be the best installation strategy anyway.

Jean-Paul


From kevin.horn at gmail.com  Thu Feb 11 12:54:47 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 11 Feb 2010 11:54:47 -0600
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <20100211170535.26099.2118225748.divmod.xquotient.1087@localhost.localdomain>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
	<562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>
	<20100211170535.26099.2118225748.divmod.xquotient.1087@localhost.localdomain>
Message-ID: <562bcc11002110954v3ed9a9a4u3c20344fecb583cc@mail.gmail.com>

On Thu, Feb 11, 2010 at 11:05 AM, <exarkun at twistedmatrix.com> wrote:

> On 04:41 pm, kevin.horn at gmail.com wrote:
> >FYI, this totally fails on Windows XP, Py2.6, Twisted 9.0.0...
>
> This is an interesting problem.
>
> easy_install identifies
>
> http://tmrc.mit.edu/mirror/twisted/Twisted/9.0/Twisted-9.0.0.win32-py2.6.exe
> as some kind of package it can install - maybe a self-extracting zip?  I
> don't know - but that's not what it is.  This seems to be because the
> name matches the scheme setuptools uses for naming certain kinds of
> distribution files.
>

I think it thinks that it's an executable created using "python setup.py
bdist_wininst" or something similar...


>
> We presently are not distributing binary eggs for Windows, so
> easy_install isn't likely to be the best installation strategy anyway.
>


Well, the second thing I do on a new machine (after installing Python of
course) is install MinGW and set distutils up to use it as a compiler for
Python extensions, so for me it usually works just fine. :)

However, in the general case, I agree that most people won't necessarily
have a compiler installed on Windows.
Not entirely related to this discussion (though not entirely unrelated), I
think that Twisted's whole release/distribution system needs to be revamped
a little. I've been meaning to talk to radix about this, but haven't found
the time...maybe this will give me the kick in the pants I needed...

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100211/64b291fa/attachment.htm 

From screwtape at froup.com  Thu Feb 11 17:27:36 2010
From: screwtape at froup.com (Timothy Allen)
Date: Fri, 12 Feb 2010 09:27:36 +1100
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <562bcc11002110954v3ed9a9a4u3c20344fecb583cc@mail.gmail.com>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
	<562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>
	<20100211170535.26099.2118225748.divmod.xquotient.1087@localhost.localdomain>
	<562bcc11002110954v3ed9a9a4u3c20344fecb583cc@mail.gmail.com>
Message-ID: <20100212092736.418241dd@hepzibah>

On Thu, 11 Feb 2010 11:54:47 -0600
Kevin Horn <kevin.horn at gmail.com> wrote:
> Not entirely related to this discussion (though not entirely
> unrelated), I think that Twisted's whole release/distribution system
> needs to be revamped a little. I've been meaning to talk to radix
> about this, but haven't found the time...maybe this will give me the
> kick in the pants I needed...

Oh ho ho ho ho, boy.

As one who has tinkered with Twisted's release/distribution system
(unsuccessfully so far - see ticket 1696 and 4138), I'd be very
interested to hear what you propose.

Oh, you might also be interested in ticket 1533.


From matusis at yahoo.com  Thu Feb 11 19:16:39 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Thu, 11 Feb 2010 16:16:39 -0800
Subject: [Twisted-Python] new epoll error after upgrading to 9.0.0
Message-ID: <040f01caab78$a5fdf670$f1f9e350$@com>

I upgraded to 9.0.0 and I am now seeing a new error, not present in 8.2.0 or
earlier:

2010-02-10 17:38:33-0800 [TagProtocol,9794986,68.126.204.104] Unhandled
Error
        Traceback (most recent call last):
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/application/app.py", line 348, in
runReactorWithLogging
            reactor.run()
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/base.py", line 1166, in run
            self.mainLoop()
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/base.py", line 1178, in mainLoop
            self.doIteration(t)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 194, in doPoll
            log.callWithLogger(selectable, _drdw, selectable, fd, event)
        --- <exception caught here> ---
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/python/log.py", line 84, in callWithLogger
            return callWithContext({"system": lp}, func, *args, **kw)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/python/log.py", line 69, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/python/context.py", line 59, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args,
**kw)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/python/context.py", line 37, in callWithContext
            return func(*args,**kw)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 223, in
_doReadOrWrite
            self._disconnectSelectable(selectable, why, inRead)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/posixbase.py", line 188, in
_disconnectSelectable
            selectable.readConnectionLost(f)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/tcp.py", line 508, in
readConnectionLost
            self.connectionLost(reason)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/tcp.py", line 513, in connectionLost
            abstract.FileDescriptor.connectionLost(self, reason)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/abstract.py", line 67, in
connectionLost
            self.stopWriting()
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/abstract.py", line 267, in stopWriting
            self.reactor.removeWriter(self)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 145, in
removeWriter
            self._remove(writer, self._writes, self._reads,
self._selectables, _epoll.OUT, _epoll.IN)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 131, in _remove
            self._poller._control(cmd, fd, flags)
          File "_epoll.pyx", line 125, in _epoll.epoll._control
            
        exceptions.IOError: [Errno 2] No such file or directory

The error is highy intemittent and occurs only under high connection client
rate. Any idea of what this could be?





From exarkun at twistedmatrix.com  Thu Feb 11 21:54:37 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 12 Feb 2010 02:54:37 -0000
Subject: [Twisted-Python] new epoll error after upgrading to 9.0.0
In-Reply-To: <040f01caab78$a5fdf670$f1f9e350$@com>
References: <040f01caab78$a5fdf670$f1f9e350$@com>
Message-ID: <20100212025437.26099.1766559741.divmod.xquotient.1156@localhost.localdomain>

On 12:16 am, matusis at yahoo.com wrote:
>I upgraded to 9.0.0 and I am now seeing a new error, not present in 
>8.2.0 or
>earlier:
>
>[snip]
>"/usr/local/encap/python-2.6.4/lib/python2.6/site- 
>packages/Twisted-9.0.0-py2
>.6-linux-x86_64.egg/twisted/internet/abstract.py", line 267, in 
>stopWriting
>            self.reactor.removeWriter(self)
>          File
>"/usr/local/encap/python-2.6.4/lib/python2.6/site- 
>packages/Twisted-9.0.0-py2
>.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 145, in
>removeWriter
>            self._remove(writer, self._writes, self._reads,
>self._selectables, _epoll.OUT, _epoll.IN)
>          File
>"/usr/local/encap/python-2.6.4/lib/python2.6/site- 
>packages/Twisted-9.0.0-py2
>.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 131, in 
>_remove
>            self._poller._control(cmd, fd, flags)
>          File "_epoll.pyx", line 125, in _epoll.epoll._control
>
>        exceptions.IOError: [Errno 2] No such file or directory
>
>The error is highy intemittent and occurs only under high connection 
>client
>rate. Any idea of what this could be?

Translating into English, a descriptor being monitored for writeability 
is being removed from the reactor, but epoll thinks it isn't being 
monitored in the first place.

It seems likely this is caused by an attempt to double remove something. 
However, why that would happen will probably take a bit more digging.

There was one direct change to epollreactor.py between 8.2 and 9.0:

  http://twistedmatrix.com/trac/changeset/26118#file1

It was to reactor shutdown code, though, so it seems like it probably 
isn't coming in to play in your case.

A number of other indirect changes were made, though (eg to the epoll 
reactor's base classes or other support code it uses).  It's conceivable 
one of these introduced the problem.  One could also imagine that the 
problem existed all along, and one of the changes merely nudged some 
race condition and now it's going badly for your app.

As far as suggestions for how to track this down go...

Well, minimizing the example is always nice. ;)  Aside from that, one 
idea that presents itself to me is to instrument the reactor to record 
addWriter/removeWriter events, and then log the complete stream of them 
for a particular writer when a double removeWriter is attempted. 
Initially you might just track that they happen, and use the result to 
confirm or reject the double removeWriter hypothesis.  If it holds up, 
it might be useful to add stack recording, in order to see why things 
are happening.

It may even be easy to implement this as a tiny reactor wrapper, which 
would make it easier to deploy and enable/disable.  If this doesn't 
disrupt your production environment overly, it might be worth trying.

Keep us updated. :)

Jean-Paul


From petshmidt at googlemail.com  Fri Feb 12 10:30:07 2010
From: petshmidt at googlemail.com (Pet)
Date: Fri, 12 Feb 2010 16:30:07 +0100
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com> 
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
Message-ID: <b460e9631002120730s5e993c64qf72db50e049842e2@mail.gmail.com>

On Thu, Feb 11, 2010 at 1:55 PM, Matt Bone <thatmattbone at gmail.com> wrote:
> You could try virtualenv:
>
> http://pypi.python.org/pypi/virtualenv
>
> And have one virtual environment with Twisted 9.0 and another with
> Twisted 8.2, etc, etc.
>

Thanks! Will try it out

> --matt
>
> On Thu, Feb 11, 2010 at 6:41 AM, Pet <petshmidt at googlemail.com> wrote:
>> Hi,
>>
>> I'd like to upgrade twisted to the newest version and obviously first
>> test if my application works fine with new version. What is the best
>> (safest) way to do it?
>>
>> Thanks for help, Pet
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From raq at cttc.upc.edu  Fri Feb 12 13:03:00 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Fri, 12 Feb 2010 19:03:00 +0100
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
Message-ID: <1265997780.12763.175.camel@mundo>

Hello everybody,

I am trying to build a a client/server application using Perspective
Broker and wanting to authenticate against a PostgreSQL database.
Everything works fine if I user plain text passwords, but when trying to
hash then using md5 using

from hashlib import md5
md5Password = md5(password).hexdigest()

then it does not authenticate (I use
credentials.checkMD5Password(password) at the checker class)

Then after reading 

twisted/spread/pb.py

I saw that everything is done in the functions:

respond(challenge, password)
challenge()

and the methods

checkMD5Password(self, md5Password)
checkPassword(self, password)

at the 

class _PortalAuthChallenger(Referenceable, _JellyableAvatarMixin)
 
By changing digest() with hexdigest(), it works.

The question is:

I there some way to make it work without making changes at the 'pb.py'
module?

Yes. I should use md5Password = md5(password).digest() to produce the
password, but then I cant authenticate with a 'pure-ftpd' daemon I need
to work with.

Any alternatives?

Thanks in advance.

Regards

-- 
Ramiro Alba

Centre Tecnol?gic de Tranfer?ncia de Calor
http://www.cttc.upc.edu


Escola T?cnica Superior d'Enginyeries
Industrial i Aeron?utica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est? net.



From rich at noir.com  Fri Feb 12 14:35:03 2010
From: rich at noir.com (K. Richard Pixley)
Date: Fri, 12 Feb 2010 11:35:03 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
References: <4B72102D.4010306@noir.com>	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>	<4B7307ED.4010400@noir.com>
	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
Message-ID: <4B75AD67.7090802@noir.com>

exarkun at twistedmatrix.com wrote:
> It isn't `doRead`'s job to close the file descriptor.  At most, it's 
> `doRead`'s job to signal that the descriptor is no longer worth keeping 
> open by returning something like an instance of ConnectionDone or 
> ConnectionLost.  Then the reactor will call connectionLost on your 
> object and you can close the file descriptor there.
>   
Thank you!  That's the info I was looking for.
> The documentation for how this all works could probably be improved. 
> Once you figure it out, would you mind submitting a patch?
>   
I don't think I've even seen mention of ConnectionDone in the doc yet.

I think there's a design decision here about the doc.  It seems to me 
that the return codes are part of the interface and as such should 
probably be documented in twisted.internet.interfaces.py whereas there's 
almost nothing there now.  Instead, some of this is in 
twisted.internet.abstract.  Granted, the distinction between an abstract 
class and a "zope.interface.Interface" is subtle.

As a newbie, the interface is the thing I find first and most easily.  
I'm directed there by the doc and by the reference material.  I have to 
dig around to even notice that the abstract class exists.
> Also, you won't accomplish much by adding a file descriptor for a normal 
> file to the reactor.  Select, poll, etc, will always indicate that such 
> descriptors are both readable and writeable.
I could swear that wasn't true when I first mucked about with select, 
but that was a couple decades ago.  Thanks for the update.

In any case, my point was more about illustration and testing.

--rich


From rich at noir.com  Fri Feb 12 14:59:44 2010
From: rich at noir.com (K. Richard Pixley)
Date: Fri, 12 Feb 2010 11:59:44 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
References: <4B72102D.4010306@noir.com>	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>	<4B7307ED.4010400@noir.com>
	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
Message-ID: <4B75B330.9040905@noir.com>

exarkun at twistedmatrix.com wrote:
> Also, you won't accomplish much by adding a file descriptor for a normal 
> file to the reactor.  Select, poll, etc, will always indicate that such 
> descriptors are both readable and writeable.
Er... on second thought... isn't there still a utility in asynchronous 
file io which yields to the reactor?

It may be always readable/writable, but if I simply read/write, I'll 
block the process for as long as that takes, block on read, block on 
write.  Whereas if I use async io on the descriptor and go through the 
reactor, I'm effectively yielding to the reactor and any other 
actionable descriptors on each loop as well as allowing my reads and 
writes to happen simultaneously.

Or am I missing something?

--rich


From exarkun at twistedmatrix.com  Fri Feb 12 15:06:06 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 12 Feb 2010 20:06:06 -0000
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <1265997780.12763.175.camel@mundo>
References: <1265997780.12763.175.camel@mundo>
Message-ID: <20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>

On 06:03 pm, raq at cttc.upc.edu wrote:
>Hello everybody,
>
>I am trying to build a a client/server application using Perspective
>Broker and wanting to authenticate against a PostgreSQL database.
>Everything works fine if I user plain text passwords, but when trying 
>to
>hash then using md5 using

What do you mean when you say you're using plain text passwords? 
Authentication involves multiple parties handling the password in 
multiple ways, and the "plain text"-ness of the password changes from 
step to step.
>from hashlib import md5
>md5Password = md5(password).hexdigest()
>
>then it does not authenticate (I use
>credentials.checkMD5Password(password) at the checker class)
>
>Then after reading
>
>twisted/spread/pb.py
>
>I saw that everything is done in the functions:
>
>respond(challenge, password)
>challenge()
>
>and the methods
>
>checkMD5Password(self, md5Password)
>checkPassword(self, password)
>
>at the
>
>class _PortalAuthChallenger(Referenceable, _JellyableAvatarMixin)
>
>By changing digest() with hexdigest(), it works.
>
>The question is:
>
>I there some way to make it work without making changes at the 'pb.py'
>module?
>
>Yes. I should use md5Password = md5(password).digest() to produce the
>password, but then I cant authenticate with a 'pure-ftpd' daemon I need
>to work with.
>
>Any alternatives?

You should register an IUsernameHashedPassword checker with the portal 
you pass to PBServerFactory and use PBClientFactory.login.  See 
pbbenchserver.py and pbbenchclient.py for examples of this.  Despite the 
fact that you're passing a UsernamePassword instance to 
PBClientFactory.login, the plain text password is never sent over the 
network.

Also, IUsernameMD5Password is about to be deprecated, along with the 
checkMD5Password method of _PortalAuthChallenger.

Jean-Paul


From exarkun at twistedmatrix.com  Fri Feb 12 15:11:38 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 12 Feb 2010 20:11:38 -0000
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <4B75AD67.7090802@noir.com>
References: <4B72102D.4010306@noir.com>
	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
	<4B7307ED.4010400@noir.com>
	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
	<4B75AD67.7090802@noir.com>
Message-ID: <20100212201138.26099.1039642509.divmod.xquotient.1208@localhost.localdomain>

On 07:35 pm, rich at noir.com wrote:
>exarkun at twistedmatrix.com wrote:
>>It isn't `doRead`'s job to close the file descriptor.  At most, it's
>>`doRead`'s job to signal that the descriptor is no longer worth 
>>keeping
>>open by returning something like an instance of ConnectionDone or
>>ConnectionLost.  Then the reactor will call connectionLost on your
>>object and you can close the file descriptor there.
>Thank you!  That's the info I was looking for.
>>The documentation for how this all works could probably be improved.
>>Once you figure it out, would you mind submitting a patch?
>I don't think I've even seen mention of ConnectionDone in the doc yet.
>
>I think there's a design decision here about the doc.  It seems to me
>that the return codes are part of the interface and as such should
>probably be documented in twisted.internet.interfaces.py whereas 
>there's
>almost nothing there now.  Instead, some of this is in
>twisted.internet.abstract.  Granted, the distinction between an 
>abstract
>class and a "zope.interface.Interface" is subtle.
>
>As a newbie, the interface is the thing I find first and most easily.
>I'm directed there by the doc and by the reference material.  I have to
>dig around to even notice that the abstract class exists.

You're absolutely right.  These interfaces should be documenting the 
meaning of the return value for these methods, since it is an integral 
part of the required interface.
>>Also, you won't accomplish much by adding a file descriptor for a 
>>normal
>>file to the reactor.  Select, poll, etc, will always indicate that 
>>such
>>descriptors are both readable and writeable.

>Er... on second thought... isn't there still a utility in asynchronous
>file io which yields to the reactor?
>
>It may be always readable/writable, but if I simply read/write, I'll
>block the process for as long as that takes, block on read, block on
>write.  Whereas if I use async io on the descriptor and go through the
>reactor, I'm effectively yielding to the reactor and any other
>actionable descriptors on each loop as well as allowing my reads and
>writes to happen simultaneously.
>
>Or am I missing something?

There could be utility in such, but Twisted has no support for it, 
largely because actual support on various platforms is still pretty 
ragged.

On Linux, you can get the aio_* family of functions, but they're pretty 
crap.  They have tons of limitations (only block-aligned reads allowed, 
only a certain number of outstanding operations (system wide) at a time, 
etc, and the failure mode for not complying with these limitations is 
that the APIs block).

It's a bit better on Windows, so someone could probably fashion an 
extension to iocpreactor for this.  There isn't a lot of developer 
attention focused on implementing Windows-only extensions right now, 
though.

Jean-Paul


From glyph at twistedmatrix.com  Fri Feb 12 20:58:46 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 12 Feb 2010 20:58:46 -0500
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <20100212201138.26099.1039642509.divmod.xquotient.1208@localhost.localdomain>
References: <4B72102D.4010306@noir.com>
	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
	<4B7307ED.4010400@noir.com>
	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
	<4B75AD67.7090802@noir.com>
	<20100212201138.26099.1039642509.divmod.xquotient.1208@localhost.localdomain>
Message-ID: <9D980C3C-84F2-48C5-A89A-245978D4996E@twistedmatrix.com>


On Feb 12, 2010, at 3:11 PM, exarkun at twistedmatrix.com wrote:

> On 07:35 pm, rich at noir.com wrote:
>> 

>> Er... on second thought... isn't there still a utility in asynchronous
>> file io which yields to the reactor?
>> 
>> It may be always readable/writable, but if I simply read/write, I'll
>> block the process for as long as that takes, block on read, block on
>> write.  Whereas if I use async io on the descriptor and go through the
>> reactor, I'm effectively yielding to the reactor and any other
>> actionable descriptors on each loop as well as allowing my reads and
>> writes to happen simultaneously.
>> 
>> Or am I missing something?
> 
> There could be utility in such, but Twisted has no support for it, 
> largely because actual support on various platforms is still pretty 
> ragged.
> 
> On Linux, you can get the aio_* family of functions, but they're pretty 
> crap.  They have tons of limitations (only block-aligned reads allowed, 
> only a certain number of outstanding operations (system wide) at a time, 
> etc, and the failure mode for not complying with these limitations is 
> that the APIs block).
> 
> It's a bit better on Windows, so someone could probably fashion an 
> extension to iocpreactor for this.  There isn't a lot of developer 
> attention focused on implementing Windows-only extensions right now, 
> though.

In my opinion, the right way to go about something like this would be to come up with an API for asynchronous File I/O in Twisted, implement that API using subprocesses or maybe the reactor threadpool, and then attempt to optimize and simplify it using special platform-speciifc APIs later.  (Important note: do not _expose_ the threaded nature of the code to application code at any point: just deliver the data to something in the reactor thread, to dispatch as it sees fit.)

My impression is that OS-level asynchronous file I/O APIs are fairly raw because, unlike network connectivity, you won't get thousands of connections at once.  If you only have one disk, you can only really get a benefit from two, maybe three file I/O slave processes, and that's a fairly small amount of resources to manage.  Granted, it's tricky to really identify how many "disks" you've got in a system, and the performance characteristics change radically based on what kind of disk technology is involved, but generally speaking a few worker threads and a queue of I/O operations would cover the vast majority of use-cases.

From rich at noir.com  Fri Feb 12 21:51:29 2010
From: rich at noir.com (K. Richard Pixley)
Date: Fri, 12 Feb 2010 18:51:29 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <9D980C3C-84F2-48C5-A89A-245978D4996E@twistedmatrix.com>
References: <4B72102D.4010306@noir.com>	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>	<4B7307ED.4010400@noir.com>	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>	<4B75AD67.7090802@noir.com>	<20100212201138.26099.1039642509.divmod.xquotient.1208@localhost.localdomain>
	<9D980C3C-84F2-48C5-A89A-245978D4996E@twistedmatrix.com>
Message-ID: <4B7613B1.6090505@noir.com>

Glyph Lefkowitz wrote:
> If you only have one disk, you can only really get a benefit from two, maybe three file I/O slave processes, and that's a fairly small amount of resources to manage.  Granted, it's tricky to really identify how many "disks" you've got in a system, and the performance characteristics change radically based on what kind of disk technology is involved, but generally speaking a few worker threads and a queue of I/O operations would cover the vast majority of use-cases.
I'm working with parallelized build servers.  We often have raided 
disks, solid state disks, servers with huge amounts of disk cache 
specifically so that an entire build happens in memory, etc.  File io is 
our bottleneck.

I think you probably are also forgetting about NFS.  NFS isn't slower 
than native disk in terms of throughput, only in terms of latency, which 
is a fabulous opportunity for asyncronous file io.  (Granted, NFS seems 
to have fallen out of fashion recently.)

I think twisted already has everything that's required.  It could 
probably use a slightly more friendly interface paradigm so the user 
doesn't have to do his own os.open, but really, even that wouldn't save 
much.

Reactor core was enough to sell me on twisted.  That's probably all I'll 
even be using.  And compared to writing my own, that's enough to be useful.

--rich


From glyph at twistedmatrix.com  Fri Feb 12 23:05:00 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 12 Feb 2010 23:05:00 -0500
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <20100212092736.418241dd@hepzibah>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
	<562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>
	<20100211170535.26099.2118225748.divmod.xquotient.1087@localhost.localdomain>
	<562bcc11002110954v3ed9a9a4u3c20344fecb583cc@mail.gmail.com>
	<20100212092736.418241dd@hepzibah>
Message-ID: <55BF52F4-C317-4ADA-9754-62E2E96FA8DF@twistedmatrix.com>

On Feb 11, 2010, at 5:27 PM, Timothy Allen wrote:

> On Thu, 11 Feb 2010 11:54:47 -0600
> Kevin Horn <kevin.horn at gmail.com> wrote:
>> Not entirely related to this discussion (though not entirely
>> unrelated), I think that Twisted's whole release/distribution system
>> needs to be revamped a little. I've been meaning to talk to radix
>> about this, but haven't found the time...maybe this will give me the
>> kick in the pants I needed...
> 
> Oh ho ho ho ho, boy.
> 
> As one who has tinkered with Twisted's release/distribution system
> (unsuccessfully so far - see ticket 1696 and 4138), I'd be very
> interested to hear what you propose.

On the contrary - I think your progress on 1696 especially has been *very* successful!  perhaps not quite *complete* yet, though :).



From glyph at twistedmatrix.com  Fri Feb 12 23:13:57 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 12 Feb 2010 23:13:57 -0500
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <4B7613B1.6090505@noir.com>
References: <4B72102D.4010306@noir.com>	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>	<4B7307ED.4010400@noir.com>	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>	<4B75AD67.7090802@noir.com>	<20100212201138.26099.1039642509.divmod.xquotient.1208@localhost.localdomain>
	<9D980C3C-84F2-48C5-A89A-245978D4996E@twistedmatrix.com>
	<4B7613B1.6090505@noir.com>
Message-ID: <8B600131-6491-47C2-93AB-1AE868C72EF8@twistedmatrix.com>


On Feb 12, 2010, at 9:51 PM, K. Richard Pixley wrote:

> I'm working with parallelized build servers.  We often have raided 
> disks, solid state disks, servers with huge amounts of disk cache 
> specifically so that an entire build happens in memory, etc.  File io is 
> our bottleneck.

Yeah, this level of disk manipulation is past the point where a little bit less blocking on I/O will help... I imagine you've already got some kind of process/thread pooling solution already, or at least you'll need one.

> I think you probably are also forgetting about NFS.  NFS isn't slower 
> than native disk in terms of throughput, only in terms of latency, which 
> is a fabulous opportunity for asyncronous file io.  (Granted, NFS seems 
> to have fallen out of fashion recently.)

No, I'm not forgetting about it: I'm just saying that once you've got an API that applications can start using that gives *some* performance benefit (non-blocking disk I/O at the expense of spinning up a few threads / processes behind the scenes), you can always optimize it for other use-cases later, without necessarily changing the API.

> I think twisted already has everything that's required.  It could 
> probably use a slightly more friendly interface paradigm so the user 
> doesn't have to do his own os.open, but really, even that wouldn't save 
> much.

It would allow us to do it more portably, I think.  os.open()'s behavior can vary a lot depending on what you do with it.

> Reactor core was enough to sell me on twisted.  That's probably all I'll 
> even be using.  And compared to writing my own, that's enough to be useful.

Great, glad to hear it!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100212/2dcf9499/attachment-0001.htm 

From darren at ontrenet.com  Sat Feb 13 16:53:38 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sat, 13 Feb 2010 16:53:38 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1265844849.2532.28.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos>
Message-ID: <1266098018.2532.63.camel@kratos>

I spoke too fast. But pardon my noobiness.

Ok, so I am using a simple protocol that is listening on a TCP port.

One the client side, I write 4096 bytes using
self.transport.write(bytes)

on dataReceived side, I get only 1448. 

Now, what I "want" to happen is when I issue a write of a known number
of bytes.
I "want" those bytes to arrive in total because they represent a pickled
object.
The server has no idea if the bytes are split and scattered (again, I
want the
control protocol to take affect).

1) Am I doing something wrong here?
2) Can I force twisted to send ALL the bytes I issue in the write
without
re-thinking TCP or forcing me to re-implement TCP?

thanks!
Darren

On Wed, 2010-02-10 at 18:34 -0500, Darren Govoni wrote:

> Thanks for that explanation David. Makes sense! 
> 
> On Wed, 2010-02-10 at 16:01 -0500, David Bolen wrote: 
> 
> > Darren Govoni <darren at ontrenet.com> writes:
> > 
> > >>From what I learned in other posts, the dataReceived(self, data): in the
> > > Echo server
> > > will get called with out-of-order data/bytes from the client. Of course,
> > > I could be misinformed,
> > > but what I understood before was that in this type of Protocol, I would
> > > have to re-order
> > > and re-assemble the bytes.  And I'm trying to avoid that, since of
> > > course, TCP already does it.
> > 
> > Data being received out of order can't happen, as long as the Protocol
> > is layered on top of TCP, since as you say, TCP already provides that
> > guarantee.  The dataReceived() method is really just how the data
> > being received from TCP is handed to the Protocol object.
> > 
> > UDP can be out of order, as it provides very few guarantees above and
> > beyond IP itself.  But I'm not sure you can layer an IProtocol over
> > UDP with Twisted.
> > 
> > There is a general issue where you may receive the data in differently
> > sized chunks in dataReceived() than it might have been transmitted
> > originally, which is a common source of confusion to people new to
> > stream protocols, so perhaps you were thinking of that issue?
> > 
> > The stream nature (and possibility for early disconnect from the
> > client) is why having some internal length information for bulk
> > transfers is sensible.  For your original question, I was going to
> > suggest an older posting of mine for a similar situation where I needed
> > a bulk upload to augment a PB-based server, but it appears that you've
> > located it in the archives yourself.
> > 
> > > But like I said, I could have been misinformed because it seems pretty
> > > basic to write 1,2,3
> > > to a server and have it received 1,2,3, guaranteed.
> > 
> > Yes - TCP guarantees that what you transmit at one end will be
> > received in order at the other end or not at all (e.g., outages,
> > disconnects, etc...).  It has a weaker guarantee in terms of no
> > corruption, but one that is, in combination with typical link layer
> > protections, generally more than sufficient for the vast majority of
> > connections using it each day.
> > 
> > -- David
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100213/5189171c/attachment.htm 

From JOHN at egh.com  Sat Feb 13 17:41:29 2010
From: JOHN at egh.com (John Santos)
Date: Sat, 13 Feb 2010 17:41:29 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1266098018.2532.63.camel@kratos>
Message-ID: <1100213171054.1317B-400000@Ives.egh.com>


Hi -

I still regard myself as a newbie, and may have mangled some of
the terminology, but ...


A question I can answer!  I had the same problem...



Make your protocol class be an Int16StringReceiver (or 
Int<size>StringReceiver, I think there is an 8 and a 32 available
as well), and Twisted will do it for you.  When writing, it will
prepend the size to each message, and on the receiving side it
will accumulate pieces until it gets the full message, and then
call your stringReceived() method with the full message (length
stripped off.)

It you lose the connection in the middle of a message, I think
you'll get a connectionLost event, rather than a partial message
or an indefinite hang.

So your stringReceived() and sendString() usage looks exactly
the same, but behind the scenes, Twisted does all the work.

(TCP always delivers all the data you send in the correct order,
but the fragmentation can be random.  A single message can get
split into multiple chunks, and I think multiple messages could
get appended into a single chunk.  But the byte order seen by the
receiver is preserved, so the receiver can tell when a complete
message has arrived if it lays some sort of protocol on top of
the TCP stream.  It could be message lengths (this is what the
Int*StringReceiver protocols do), or it could be "start" and
"Stop" characters embedded in the stream (for example, FTP in
text mode or SMTP use <CR><LF> to indicate ends of lines), or
it could be an agreed-upon count (I think FTP in binary mode
expects a series of 512-byte blocks, though I could be wrong
about this, and the receiver just partitions the incoming TCP
stream into groups of 512 bytes.)  I'm sure there are lots of
other ways to do it as well.  But the Twisted Int* protocol
should work fine for you.)

OBTW, the "16" is the number of bits in the message size
value; you should select a size large enough to hold your
largest message: "8" for up to 255 bytes, 16 allows for 65535
bytes and 32 allows something like 4MB.

The only two lines I had to change from my original code:

> from twisted.protocols.basic import Int16StringReceiver

> class MyProtocol(Int16StringReceiver):
    [...]

Hope this helps.

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539
-------------- next part --------------
I spoke too fast. But pardon my noobiness.



Ok, so I am using a simple protocol that is listening on a TCP port.



One the client side, I write 4096 bytes using

self.transport.write(bytes)



on dataReceived side, I get only 1448. 



Now, what I "want" to happen is when I issue a write of a known number

of bytes.

I "want" those bytes to arrive in total because they represent a pickled

object.

The server has no idea if the bytes are split and scattered (again, I

want the

control protocol to take affect).



1) Am I doing something wrong here?

2) Can I force twisted to send ALL the bytes I issue in the write

without

re-thinking TCP or forcing me to re-implement TCP?



thanks!

Darren



On Wed, 2010-02-10 at 18:34 -0500, Darren Govoni wrote:



> Thanks for that explanation David. Makes sense! 

> 

> On Wed, 2010-02-10 at 16:01 -0500, David Bolen wrote: 

> 

> > Darren Govoni <darren at ontrenet.com> writes:

> > 

> > >>From what I learned in other posts, the dataReceived(self, data): in the

> > > Echo server

> > > will get called with out-of-order data/bytes from the client. Of course,

> > > I could be misinformed,

> > > but what I understood before was that in this type of Protocol, I would

> > > have to re-order

> > > and re-assemble the bytes.  And I'm trying to avoid that, since of

> > > course, TCP already does it.

> > 

> > Data being received out of order can't happen, as long as the Protocol

> > is layered on top of TCP, since as you say, TCP already provides that

> > guarantee.  The dataReceived() method is really just how the data

> > being received from TCP is handed to the Protocol object.

> > 

> > UDP can be out of order, as it provides very few guarantees above and

> > beyond IP itself.  But I'm not sure you can layer an IProtocol over

> > UDP with Twisted.

> > 

> > There is a general issue where you may receive the data in differently

> > sized chunks in dataReceived() than it might have been transmitted

> > originally, which is a common source of confusion to people new to

> > stream protocols, so perhaps you were thinking of that issue?

> > 

> > The stream nature (and possibility for early disconnect from the

> > client) is why having some internal length information for bulk

> > transfers is sensible.  For your original question, I was going to

> > suggest an older posting of mine for a similar situation where I needed

> > a bulk upload to augment a PB-based server, but it appears that you've

> > located it in the archives yourself.

> > 

> > > But like I said, I could have been misinformed because it seems pretty

> > > basic to write 1,2,3

> > > to a server and have it received 1,2,3, guaranteed.

> > 

> > Yes - TCP guarantees that what you transmit at one end will be

> > received in order at the other end or not at all (e.g., outages,

> > disconnects, etc...).  It has a weaker guarantee in terms of no

> > corruption, but one that is, in combination with typical link layer

> > protections, generally more than sufficient for the vast majority of

> > connections using it each day.

> > 

> > -- David

> > 

> > 

> > _______________________________________________

> > Twisted-Python mailing list

> > Twisted-Python at twistedmatrix.com

> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

> 

> 

> 

> _______________________________________________

> Twisted-Python mailing list

> Twisted-Python at twistedmatrix.com

> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100213/ee8b4353/attachment.htm 
-------------- next part --------------
_______________________________________________

Twisted-Python mailing list

Twisted-Python at twistedmatrix.com

http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From andrew at bemusement.org  Sat Feb 13 18:06:19 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Sun, 14 Feb 2010 10:06:19 +1100
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1266098018.2532.63.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
Message-ID: <20100213230619.GC18546@steerpike.home.puzzling.org>

Darren Govoni wrote:
>    I spoke too fast. But pardon my noobiness.
> 
>    Ok, so I am using a simple protocol that is listening on a TCP port.
> 
>    One the client side, I write 4096 bytes using self.transport.write(bytes)
> 
>    on dataReceived side, I get only 1448.
> 
>    Now, what I "want" to happen is when I issue a write of a known
>    number of bytes.  I "want" those bytes to arrive in total because
>    they represent a pickled object.  The server has no idea if the
>    bytes are split and scattered (again, I want the control protocol
>    to take affect).
> 
>    1) Am I doing something wrong here?

Yes.  You are expecting guarantees that aren't provided by TCP.  TCP
only guarantees that a stream of bytes will arrive in order (or not at
all).  It guarantees nothing about what size packets those bytes will
arrive in.  As you've already noticed it is common for packets to be
broken up into less than 1500 bytes (1500 is a common MTU for internet
hops[1]), and depending on the network links between your hosts it could
quite easily be broken up even further.

So, you need to use some sort of framing in your protocol.

>    2) Can I force twisted to send ALL the bytes I issue in the write without
>    re-thinking TCP or forcing me to re-implement TCP?

Twisted by itself cannot solve this for you.  Even if there were some
way to guarantee that your write was written to the network in a single
packet (and there can't be due to how TCP works, but let's assume you
can), it wouldn't matter because the next hop in the network connection
would be free to break up that large packet into smaller pieces, and
probably would.

Your data needs to be self-describe how long each message is, i.e. frame
them.  See <http://www.xml.com/pub/a/ws/2003/11/25/protocols.html> (and
the rest of the series at <http://www.xml.com/pub/au/215>).

Twisted provides some facilities for building protocols with different
kinds of framing, e.g. delimited by a special marker (LineReceiver) or
length-prefixed (NetstringReceiver, Int32StringReceiver).  Those classes
can be found in twisted.protocols.basic.

-Andrew.

[1] http://en.wikipedia.org/wiki/Maximum_transmission_unit


From andrew at bemusement.org  Sat Feb 13 18:08:12 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Sun, 14 Feb 2010 10:08:12 +1100
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1266098018.2532.63.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
Message-ID: <20100213230812.GD18546@steerpike.home.puzzling.org>

Darren Govoni wrote:
[...]
>    2) Can I force twisted to send ALL the bytes I issue in the write without
>    re-thinking TCP or forcing me to re-implement TCP?

Also,
<http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>

-Andrew.



From burslem2001 at yahoo.com  Sat Feb 13 18:23:27 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 13 Feb 2010 15:23:27 -0800 (PST)
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <20100213230619.GC18546@steerpike.home.puzzling.org>
Message-ID: <124746.49764.qm@web112509.mail.gq1.yahoo.com>

Hello,

I want to send raw binary data but also text in the message. I am currently sending ascii data to the twisted server via open-ssl.
Its great and twisted is cool. However I want to send a name of document and then the raw data in the same message? Is this possible with twisted.
Essentially I want to store the file in a location based upon its name.
Is this even practical to do this? Not sure.

Say for instance

<FILENAME>gazza.doc</FILENAME>
<RAWDATA>0101110100101010010010110010101010101101010</RAWDATA>

I dont know if the SAX parser which I am using could parse this data?

Thanks,
Garyc






From darren at ontrenet.com  Sat Feb 13 18:39:13 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sat, 13 Feb 2010 18:39:13 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <20100213230812.GD18546@steerpike.home.puzzling.org>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<20100213230812.GD18546@steerpike.home.puzzling.org>
Message-ID: <1266104353.2532.65.camel@kratos>

Thanks. I'm a shameless noob....

On Sun, 2010-02-14 at 10:08 +1100, Andrew Bennetts wrote:

> Darren Govoni wrote:
> [...]
> >    2) Can I force twisted to send ALL the bytes I issue in the write without
> >    re-thinking TCP or forcing me to re-implement TCP?
> 
> Also,
> <http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>
> 
> -Andrew.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100213/0b013b4a/attachment.htm 

From alexandre at quessy.net  Sat Feb 13 18:40:48 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sat, 13 Feb 2010 18:40:48 -0500
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <124746.49764.qm@web112509.mail.gq1.yahoo.com>
References: <20100213230619.GC18546@steerpike.home.puzzling.org>
	<124746.49764.qm@web112509.mail.gq1.yahoo.com>
Message-ID: <72236ba91002131540r602c86b5s4173dcf3f809c824@mail.gmail.com>

Hello,
I have the same kind of task to do, and for now, I am thinking about
using some kind of file sharing utility, such as Samba, to do so. It's
probably a lot more efficient, since they are used to sharing files !
I would just send the file name, not the data itself.

This said, sending them using a programmer's solution - not a sysadmin
solution - would be closer to my own skills, so I am interested in
knowing if this could be suitable. I think, though, that it would be
faster to use a transfert protocol that would be implemented in C, not
Python. Am I wrong?

a

2010/2/13 gary clark <burslem2001 at yahoo.com>:
> Hello,
>
> I want to send raw binary data but also text in the message. I am currently sending ascii data to the twisted server via open-ssl.
> Its great and twisted is cool. However I want to send a name of document and then the raw data in the same message? Is this possible with twisted.
> Essentially I want to store the file in a location based upon its name.
> Is this even practical to do this? Not sure.
>
> Say for instance
>
> <FILENAME>gazza.doc</FILENAME>
> <RAWDATA>0101110100101010010010110010101010101101010</RAWDATA>
>
> I dont know if the SAX parser which I am using could parse this data?
>
> Thanks,
> Garyc
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/


From maarten at treewalker.org  Sat Feb 13 19:02:25 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Sun, 14 Feb 2010 01:02:25 +0100
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <124746.49764.qm@web112509.mail.gq1.yahoo.com>
References: <124746.49764.qm@web112509.mail.gq1.yahoo.com>
Message-ID: <201002140102.25908.maarten@treewalker.org>

On Sunday 14 February 2010, gary clark wrote:

> I want to send raw binary data but also text in the message. I am
> currently sending ascii data to the twisted server via open-ssl. Its
> great and twisted is cool. However I want to send a name of document and
> then the raw data in the same message? Is this possible with twisted.
> Essentially I want to store the file in a location based upon its name.
> Is this even practical to do this? Not sure.

Unless you really cannot open a new TCP connection, the HTTP PUT command 
sounds like a good option for this. If you need more file management 
operations later, you could adopt the WebDAV extensions to HTTP:
  http://en.wikipedia.org/wiki/Webdav
 
> Say for instance
> 
> <FILENAME>gazza.doc</FILENAME>
> <RAWDATA>0101110100101010010010110010101010101101010</RAWDATA>
> 
> I dont know if the SAX parser which I am using could parse this data?

You could use base64 encoding: put all the data in a Python string and call 
"s.encode('base64')".

Bye,
		Maarten


From maarten at treewalker.org  Sat Feb 13 19:07:31 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Sun, 14 Feb 2010 01:07:31 +0100
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <72236ba91002131540r602c86b5s4173dcf3f809c824@mail.gmail.com>
References: <20100213230619.GC18546@steerpike.home.puzzling.org>
	<124746.49764.qm@web112509.mail.gq1.yahoo.com>
	<72236ba91002131540r602c86b5s4173dcf3f809c824@mail.gmail.com>
Message-ID: <201002140107.31749.maarten@treewalker.org>

On Sunday 14 February 2010, Alexandre Quessy wrote:

> This said, sending them using a programmer's solution - not a sysadmin
> solution - would be closer to my own skills, so I am interested in
> knowing if this could be suitable. I think, though, that it would be
> faster to use a transfert protocol that would be implemented in C, not
> Python. Am I wrong?

I would suggest to implement it in Python first and then benchmark it. Maybe 
the simplest implementation is already fast enough. Maybe the bottleneck is 
the network or the disk you're writing to; in that case you would be better 
off upgrading your switches or buying an SSD instead of writing C code.

Bye,
		Maarten


From db3l.net at gmail.com  Sat Feb 13 20:22:10 2010
From: db3l.net at gmail.com (David Bolen)
Date: Sat, 13 Feb 2010 20:22:10 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
Message-ID: <m2k4ug4nnh.fsf@valheru.db3l.homeip.net>

Darren Govoni <darren at ontrenet.com> writes:

> I spoke too fast. But pardon my noobiness.
>
> Ok, so I am using a simple protocol that is listening on a TCP port.
>
> One the client side, I write 4096 bytes using
> self.transport.write(bytes)
>
> on dataReceived side, I get only 1448. 

Quite possible, and even likely with a chunk of 4096, given likely
network latencies and the physical packet sizes at each network hop
along the way.

However, dataReceived will eventually be called additional times until
all of the 4096 bytes that was transmitted and received over the
socket connection have been handed off to your protocol.  That's just
the nature of a stream protocol - it's a constant stream of data being
fed by one end and drained on the other, without any natural
boundaries or structures within (other than, I suppose, the boundary
of an octet since you can't receive a partial octet).

The alternative is to use a datagram protocol like UDP, but then you
have all the negatives of no guaranteed delivery, out of order
delivery, completely impossible delivery (when trying a datagram
larger than the UDP limit), etc...

Far easier to just handle the TCP stream properly.

> Now, what I "want" to happen is when I issue a write of a known
> number of bytes. I "want" those bytes to arrive in total because
> they represent a pickled object.  The server has no idea if the
> bytes are split and scattered (again, I want the control protocol to
> take affect).

I suspect it may just be a difference in phrasing, but note that I
consider "arrive in total" to be different from "arrive in the same
number of I/O operations".  TCP guarantees the former (sans dropped
connections) but not the latter.  It's a trade-off that you make in
order to get the other benefits of guaranteed delivery with TCP,
regardless of network disruptions, latency, etc...

You're fine as long as you just accept up front that you can't make
any assumptions as to how the data will arrive at the receiving end.
So combine the data in whatever sizes it is received (and any number
of received chunks) until you have it all.  You can then de-pickle it
or do anything else with it.  As a comparison, that's really all PB is
doing, although it's banana-encoding the object on the wire rather
than pickling.

Depending on the client/server interaction, you may also have the
opposite problem - the final chunk of data received may cover more
than one client transmission, and you'll have to split it up
appropriately.

That's why if you will be transmitting multiple sets of data over a
single connection, you'll want some structure (unique boundary codes,
encoded length information, parseable data like XML, etc...) in the wire
protocol so your server knows when it is done.

> 1) Am I doing something wrong here?

Not so much wrong, as perhaps a little misguided in terms of trying to
have a stream protocol work less as a stream than it does.

I suspect you may also be over-estimating a little the complexity of
handling this aspect of TCP in your own code.

> 2) Can I force twisted to send ALL the bytes I issue in the write
> without re-thinking TCP or forcing me to re-implement TCP?

Again, distinguish between "send ALL the bytes" which *does* in fact
happen, versus "receive bytes in identically sized chunks" which will
not happen.  Though I seriously doubt that your demands are such that
it requires "re-thinking" or "re-implement[ing]" TCP.

Much easier to stick with the TCP base (loads of benefits), and just
encode enough structure into your stream to permit the server to
identify the boundaries of the requests.  Then, code the server to
look for such boundaries while accepting data in any size chunks, and
you're done.  It's pretty much what every other TCP protocol that has
structure to its data does, whether that's length counted, flag bytes,
specific textual content (such as the final empty line in an HTTP
request), etc...

As has been posted in another response, you may find some of the
existing protocols in twisted.protocol.basic to be helpful for this.
The older posting of mine that you referenced used a subclass of
LineReceiver to encode the length in ASCII as part of an initial
header, for example, though it closed the connection when done.  And,
for example, Netstring or the Int##String classes takes care of the
counting on your behalf, and even give subclasses a nice single entry
point (stringReceived) to use instead of dataReceived, so your server
need not think about the aggregation or splitting of chunks.

If nothing else, reading the source to one of those receiver classes
might help provide a concrete example of the aggregation (or
splitting) of the stream data that I mention above.

-- David



From exarkun at twistedmatrix.com  Sun Feb 14 00:05:14 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 14 Feb 2010 05:05:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1266123914.82.1775326560@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100214/ed95f7fb/attachment-0001.htm 

From burslem2001 at yahoo.com  Sun Feb 14 08:42:20 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Sun, 14 Feb 2010 05:42:20 -0800 (PST)
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <201002140107.31749.maarten@treewalker.org>
Message-ID: <585.17458.qm@web112516.mail.gq1.yahoo.com>

There are probably several way to accomplish this I just needed to think about it a wee bit longer. One way would be to prepend an identifier to the file,strip the header from the raw data on reception and then save the image. I dont think its complicated. I may need a seperate server to handle the files though.

Thanks,
Garyc

--- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org> wrote:

> From: Maarten ter Huurne <maarten at treewalker.org>
> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Saturday, February 13, 2010, 6:07 PM
> On Sunday 14 February 2010, Alexandre
> Quessy wrote:
> 
> > This said, sending them using a programmer's solution
> - not a sysadmin
> > solution - would be closer to my own skills, so I am
> interested in
> > knowing if this could be suitable. I think, though,
> that it would be
> > faster to use a transfert protocol that would be
> implemented in C, not
> > Python. Am I wrong?
> 
> I would suggest to implement it in Python first and then
> benchmark it. Maybe 
> the simplest implementation is already fast enough. Maybe
> the bottleneck is 
> the network or the disk you're writing to; in that case you
> would be better 
> off upgrading your switches or buying an SSD instead of
> writing C code.
> 
> Bye,
> ??? ??? Maarten
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From alexandre at quessy.net  Sun Feb 14 12:10:59 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sun, 14 Feb 2010 12:10:59 -0500
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <585.17458.qm@web112516.mail.gq1.yahoo.com>
References: <585.17458.qm@web112516.mail.gq1.yahoo.com>
Message-ID: <4B782EA3.8010906@quessy.net>

Hello again everyone,
Maybe using two senders/receivers would help. The control protocol,
which can use XML or JSON, or whatever, would identify the files by
their md5 sum? The file transfert protocol would detect the header of
each file to separate them.

a

gary clark wrote:
> There are probably several way to accomplish this I just needed to think about it a wee bit longer. One way would be to prepend an identifier to the file,strip the header from the raw data on reception and then save the image. I dont think its complicated. I may need a seperate server to handle the files though.
> 
> Thanks,
> Garyc
> 
> --- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org> wrote:
> 
>> From: Maarten ter Huurne <maarten at treewalker.org>
>> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
>> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> Date: Saturday, February 13, 2010, 6:07 PM
>> On Sunday 14 February 2010, Alexandre
>> Quessy wrote:
>>
>>> This said, sending them using a programmer's solution
>> - not a sysadmin
>>> solution - would be closer to my own skills, so I am
>> interested in
>>> knowing if this could be suitable. I think, though,
>> that it would be
>>> faster to use a transfert protocol that would be
>> implemented in C, not
>>> Python. Am I wrong?
>> I would suggest to implement it in Python first and then
>> benchmark it. Maybe 
>> the simplest implementation is already fast enough. Maybe
>> the bottleneck is 
>> the network or the disk you're writing to; in that case you
>> would be better 
>> off upgrading your switches or buying an SSD instead of
>> writing C code.
>>
>> Bye,
>>         Maarten
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


From burslem2001 at yahoo.com  Sun Feb 14 13:18:53 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Sun, 14 Feb 2010 10:18:53 -0800 (PST)
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <4B782EA3.8010906@quessy.net>
Message-ID: <438497.3245.qm@web112503.mail.gq1.yahoo.com>


hey Alexandra,

The only reason why I suggested another server would be to distribute the
load on the system. Essentially the files that are intended to be sent over will consume alot of processing since .jpeg etc are humongous.
Yes two connections would be required. Well you could use the MD5 sum, I will not, essentially your after a unique identifier that represents the file your sending. What I intend to do is simply embed the filename and unique identifier as a header. Hence I do not not need to recompute the MD5 at the receiving end, which to be honest seems overkill. 

Anyway good luck. KISS for software is the best approach.

Thanks,
Garyc


--- On Sun, 2/14/10, Alexandre Quessy <alexandre at quessy.net> wrote:

> From: Alexandre Quessy <alexandre at quessy.net>
> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Sunday, February 14, 2010, 11:10 AM
> Hello again everyone,
> Maybe using two senders/receivers would help. The control
> protocol,
> which can use XML or JSON, or whatever, would identify the
> files by
> their md5 sum? The file transfert protocol would detect the
> header of
> each file to separate them.
> 
> a
> 
> gary clark wrote:
> > There are probably several way to accomplish this I
> just needed to think about it a wee bit longer. One way
> would be to prepend an identifier to the file,strip the
> header from the raw data on reception and then save the
> image. I dont think its complicated. I may need a seperate
> server to handle the files though.
> > 
> > Thanks,
> > Garyc
> > 
> > --- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org>
> wrote:
> > 
> >> From: Maarten ter Huurne <maarten at treewalker.org>
> >> Subject: Re: [Twisted-Python] Sending jpeg data
> over TCP/IP
> >> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> >> Date: Saturday, February 13, 2010, 6:07 PM
> >> On Sunday 14 February 2010, Alexandre
> >> Quessy wrote:
> >>
> >>> This said, sending them using a programmer's
> solution
> >> - not a sysadmin
> >>> solution - would be closer to my own skills,
> so I am
> >> interested in
> >>> knowing if this could be suitable. I think,
> though,
> >> that it would be
> >>> faster to use a transfert protocol that would
> be
> >> implemented in C, not
> >>> Python. Am I wrong?
> >> I would suggest to implement it in Python first
> and then
> >> benchmark it. Maybe 
> >> the simplest implementation is already fast
> enough. Maybe
> >> the bottleneck is 
> >> the network or the disk you're writing to; in that
> case you
> >> would be better 
> >> off upgrading your switches or buying an SSD
> instead of
> >> writing C code.
> >>
> >> Bye,
> >>? ? ? ???Maarten
> >>
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From alexandre at quessy.net  Sun Feb 14 13:22:03 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sun, 14 Feb 2010 13:22:03 -0500
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <4B782EA3.8010906@quessy.net>
References: <585.17458.qm@web112516.mail.gq1.yahoo.com>
	<4B782EA3.8010906@quessy.net>
Message-ID: <72236ba91002141022o473ee1a4t6a14e15393cf3cfd@mail.gmail.com>

Hello again,
I've just read the HTTP PUT proposal email. I think it's a great idea.
Avoid reinventing the wheel, whenever possible !
Alternatively, sending only the file name could work if the client
then GET the file from an HTTP server that serves static files.

Using Nevow:
from nevow import static
...
self.child_files = static.File(self.static_files_path)

(see my media RSS server in
http://bitbucket.org/aalex/toonfeed/src/tip/toonfeed/web.py ... which
is not in a working state right now)

How can I server static files like this, not using nevow?

a


2010/2/14 Alexandre Quessy <alexandre at quessy.net>:
> Hello again everyone,
> Maybe using two senders/receivers would help. The control protocol,
> which can use XML or JSON, or whatever, would identify the files by
> their md5 sum? The file transfert protocol would detect the header of
> each file to separate them.
>
> a
>
> gary clark wrote:
>> There are probably several way to accomplish this I just needed to think about it a wee bit longer. One way would be to prepend an identifier to the file,strip the header from the raw data on reception and then save the image. I dont think its complicated. I may need a seperate server to handle the files though.
>>
>> Thanks,
>> Garyc
>>
>> --- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org> wrote:
>>
>>> From: Maarten ter Huurne <maarten at treewalker.org>
>>> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
>>> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>>> Date: Saturday, February 13, 2010, 6:07 PM
>>> On Sunday 14 February 2010, Alexandre
>>> Quessy wrote:
>>>
>>>> This said, sending them using a programmer's solution
>>> - not a sysadmin
>>>> solution - would be closer to my own skills, so I am
>>> interested in
>>>> knowing if this could be suitable. I think, though,
>>> that it would be
>>>> faster to use a transfert protocol that would be
>>> implemented in C, not
>>>> Python. Am I wrong?
>>> I would suggest to implement it in Python first and then
>>> benchmark it. Maybe
>>> the simplest implementation is already fast enough. Maybe
>>> the bottleneck is
>>> the network or the disk you're writing to; in that case you
>>> would be better
>>> off upgrading your switches or buying an SSD instead of
>>> writing C code.
>>>
>>> Bye,
>>> ? ? ? ? Maarten
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/


From giskard at autistici.org  Sun Feb 14 16:36:27 2010
From: giskard at autistici.org (giskard)
Date: Sun, 14 Feb 2010 22:36:27 +0100
Subject: [Twisted-Python] reactor.run hangs
Message-ID: <FFCCC0BD-5DE4-419B-A74A-0013C0D99822@autistici.org>

Hi all,

i think i'm not doing things in the right way:

http://paste.debian.net/59855/

this code implement a simple jabber client, if you remove the class defnition 
and run it (removing also the run def) it works!

but if i 'class' it and run via:
http://paste.debian.net/59856/

reactor.run() hangs.

where i'm wrong?

thank you in advance,
--
ciao,
giskard





From darren at ontrenet.com  Sun Feb 14 16:45:19 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sun, 14 Feb 2010 16:45:19 -0500
Subject: [Twisted-Python] reactor.run hangs
In-Reply-To: <FFCCC0BD-5DE4-419B-A74A-0013C0D99822@autistici.org>
References: <FFCCC0BD-5DE4-419B-A74A-0013C0D99822@autistici.org>
Message-ID: <1266183919.2532.73.camel@kratos>

I believe reactor.run() never returns and always blocks the calling
thread until reactor.stop() is called, afterwhich you cannot call
reactor.run() again. Not sure if that helps you though.

On Sun, 2010-02-14 at 22:36 +0100, giskard wrote:

> Hi all,
> 
> i think i'm not doing things in the right way:
> 
> http://paste.debian.net/59855/
> 
> this code implement a simple jabber client, if you remove the class defnition 
> and run it (removing also the run def) it works!
> 
> but if i 'class' it and run via:
> http://paste.debian.net/59856/
> 
> reactor.run() hangs.
> 
> where i'm wrong?
> 
> thank you in advance,
> --
> ciao,
> giskard
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100214/bfc1a8fa/attachment.htm 

From alexandre at quessy.net  Mon Feb 15 00:30:36 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Mon, 15 Feb 2010 00:30:36 -0500
Subject: [Twisted-Python] reactor.run hangs
In-Reply-To: <1266183919.2532.73.camel@kratos>
References: <FFCCC0BD-5DE4-419B-A74A-0013C0D99822@autistici.org>
	<1266183919.2532.73.camel@kratos>
Message-ID: <72236ba91002142130m2527df4fn9c5a600f32ad087a@mail.gmail.com>

Hello giskard,
I suggest you leave the reactor.run() in the if __name__ == "__main__"
of your application. It's a blocking call, until you call
reactor.stop().
Thats make things a lot easier when you need to merge many
applications, classes, etc. together.

Next, to start your Jabber client, you should probably do it when
reactor is running. To do so, you can use a reactor.callLater.

if __name__ == "__main__":
  def _later():
    # do stuff
  reactor.callLater(0, _later)
  reactor.run()


2010/2/14 Darren Govoni <darren at ontrenet.com>:
> I believe reactor.run() never returns and always blocks the calling thread
> until reactor.stop() is called, afterwhich you cannot call reactor.run()
> again. Not sure if that helps you though.
>
> On Sun, 2010-02-14 at 22:36 +0100, giskard wrote:
>
> Hi all,
>
> i think i'm not doing things in the right way:
>
> http://paste.debian.net/59855/
>
> this code implement a simple jabber client, if you remove the class
> defnition
> and run it (removing also the run def) it works!
>
> but if i 'class' it and run via:
> http://paste.debian.net/59856/
>
> reactor.run() hangs.
>
> where i'm wrong?
>
> thank you in advance,
> --
> ciao,
> giskard
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/


From giskard at autistici.org  Mon Feb 15 04:37:08 2010
From: giskard at autistici.org (giskard)
Date: Mon, 15 Feb 2010 10:37:08 +0100
Subject: [Twisted-Python] reactor.run hangs
In-Reply-To: <72236ba91002142130m2527df4fn9c5a600f32ad087a@mail.gmail.com>
References: <FFCCC0BD-5DE4-419B-A74A-0013C0D99822@autistici.org>
	<1266183919.2532.73.camel@kratos>
	<72236ba91002142130m2527df4fn9c5a600f32ad087a@mail.gmail.com>
Message-ID: <1E61B4D5-3C19-4152-A635-721CE8DDF1A4@autistici.org>

Hi all,

i've moved reactor.run() out of the class and put in the main()

in the class i've:

  def addReactor(self):
    print 'dentro al run'
    factory = client.basicClientFactory(self.jid, self.option['jabber']['password'])
    print "factory initialized"
    factory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT, self.authd)
    print 'factory bootsraped'
    reactor.connectTCP(self.option['jabber']['server'], 5222, factory)

and in the main():

    jabber = MyJabber(options, to_irc)
    jabber.addReactor()
    reactor.run()

the ouput of the app,

edvige:jabber giskard$ python jabber2irc.py  config.yaml 
dentro al run
factory initialized
factory bootsraped

with tcpdum i see connection to jabber.org, but nothing else.
the presence is not set and so on..


Il giorno 15/feb/2010, alle ore 06.30, Alexandre Quessy ha scritto:

> Hello giskard,
> I suggest you leave the reactor.run() in the if __name__ == "__main__"
> of your application. It's a blocking call, until you call
> reactor.stop().
> Thats make things a lot easier when you need to merge many
> applications, classes, etc. together.
> 
> Next, to start your Jabber client, you should probably do it when
> reactor is running. To do so, you can use a reactor.callLater.
> 
> if __name__ == "__main__":
>  def _later():
>    # do stuff
>  reactor.callLater(0, _later)
>  reactor.run()
> 
> 
> 2010/2/14 Darren Govoni <darren at ontrenet.com>:
>> I believe reactor.run() never returns and always blocks the calling thread
>> until reactor.stop() is called, afterwhich you cannot call reactor.run()
>> again. Not sure if that helps you though.
>> 
>> On Sun, 2010-02-14 at 22:36 +0100, giskard wrote:
>> 
>> Hi all,
>> 
>> i think i'm not doing things in the right way:
>> 
>> http://paste.debian.net/59855/
>> 
>> this code implement a simple jabber client, if you remove the class
>> defnition
>> and run it (removing also the run def) it works!
>> 
>> but if i 'class' it and run via:
>> http://paste.debian.net/59856/
>> 
>> reactor.run() hangs.
>> 
>> where i'm wrong?
>> 
>> thank you in advance,
>> --
>> ciao,
>> giskard
>> 
>> 
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
> 
> 
> 
> -- 
> Alexandre Quessy
> http://alexandre.quessy.net/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

--
ciao,
giskard





From raq at cttc.upc.edu  Mon Feb 15 04:54:55 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Mon, 15 Feb 2010 10:54:55 +0100
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
Message-ID: <1266227696.12763.200.camel@mundo>

Jean-Paul,

Thanks for your answers. Answers bellow. Also attachments of
client/server application tests.

On Fri, 2010-02-12 at 20:06 +0000, exarkun at twistedmatrix.com wrote:
> On 06:03 pm, raq at cttc.upc.edu wrote:
> >Hello everybody,
> >
> >I am trying to build a a client/server application using Perspective
> >Broker and wanting to authenticate against a PostgreSQL database.
> >Everything works fine if I user plain text passwords, but when trying 
> >to
> >hash then using md5 using
> 
> What do you mean when you say you're using plain text passwords? 
> Authentication involves multiple parties handling the password in 
> multiple ways, and the "plain text"-ness of the password changes from 
> step to step.

I mean that the the server authenticates the client using a NOT HASHED
password. In my case using a VARCHAR field in a PostgreSQL table

> >from hashlib import md5
> >md5Password = md5(password).hexdigest()
> >
> >then it does not authenticate (I use
> >credentials.checkMD5Password(password) at the checker class)
> >
> >Then after reading
> >
> >twisted/spread/pb.py
> >
> >I saw that everything is done in the functions:
> >
> >respond(challenge, password)
> >challenge()
> >
> >and the methods
> >
> >checkMD5Password(self, md5Password)
> >checkPassword(self, password)
> >
> >at the
> >
> >class _PortalAuthChallenger(Referenceable, _JellyableAvatarMixin)
> >
> >By changing digest() with hexdigest(), it works.
> >
> >The question is:
> >
> >I there some way to make it work without making changes at the 'pb.py'
> >module?
> >
> >Yes. I should use md5Password = md5(password).digest() to produce the
> >password, but then I cant authenticate with a 'pure-ftpd' daemon I need
> >to work with.
> >
> >Any alternatives?
> 
> You should register an IUsernameHashedPassword checker with the portal 
> you pass to PBServerFactory and use PBClientFactory.login.  See 
> pbbenchserver.py and pbbenchclient.py for examples of this.  Despite the 

Yes I did so. You can see the attached examples I am testing with

> fact that you're passing a UsernamePassword instance to 
> PBClientFactory.login, the plain text password is never sent over the 
> network.

Yes I Know. You do that at the 'respond(challenge, password)' in
'pb.py', do you?

> 
> Also, IUsernameMD5Password is about to be deprecated, along with the 
> checkMD5Password method of _PortalAuthChallenger.

So, how should I do it in order not to be using deprecated code? I would
like to know some details so that I can have a better understanding of
how authentication is working.


Jean-Paul:

To sum up. I would like to use md5 hashed password, so as the password
can not be read at the server, but as it is at a database table it is
not as terrible as if I where using a simple text file. Furthermore I am
having problems to use a python ftp client with ssl to connect to
'pure-ftpd' with TLS, and in this case, I am really sending password
clear-text over the wire even if using hashed passwords at the server.

Thanks again for your interest

Regards

> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-- 
Ramiro Alba

Centre Tecnol?gic de Tranfer?ncia de Calor
http://www.cttc.upc.edu


Escola T?cnica Superior d'Enginyeries
Industrial i Aeron?utica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46

-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est? net.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: client-test.py
Type: text/x-python
Size: 705 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100215/495633e9/attachment-0002.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: rqueuesrv.py
Type: text/x-python
Size: 4217 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100215/495633e9/attachment-0003.py 

From exarkun at twistedmatrix.com  Mon Feb 15 08:25:04 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 15 Feb 2010 13:25:04 -0000
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <1266227696.12763.200.camel@mundo>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
Message-ID: <20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>

On 09:54 am, raq at cttc.upc.edu wrote:
>Jean-Paul,
>
>Thanks for your answers. Answers bellow. Also attachments of
>client/server application tests.
>
>On Fri, 2010-02-12 at 20:06 +0000, exarkun at twistedmatrix.com wrote:
>>On 06:03 pm, raq at cttc.upc.edu wrote:
>> >Hello everybody,
>> >
>> >I am trying to build a a client/server application using Perspective
>> >Broker and wanting to authenticate against a PostgreSQL database.
>> >Everything works fine if I user plain text passwords, but when trying
>> >to
>> >hash then using md5 using
>>
>>What do you mean when you say you're using plain text passwords?
>>Authentication involves multiple parties handling the password in
>>multiple ways, and the "plain text"-ness of the password changes from
>>step to step.
>
>I mean that the the server authenticates the client using a NOT HASHED
>password. In my case using a VARCHAR field in a PostgreSQL table
>> >from hashlib import md5
>> >md5Password = md5(password).hexdigest()
>> >

I'm confused here.  I don't see this code in your checker implementation 
in the attached code.  Is this code running someplace else?
>> >then it does not authenticate (I use
>> >credentials.checkMD5Password(password) at the checker class)
>> >
>> >Then after reading
>> >
>> >twisted/spread/pb.py
>> >
>> >I saw that everything is done in the functions:
>> >
>> >respond(challenge, password)
>> >challenge()
>> >
>> >and the methods
>> >
>> >checkMD5Password(self, md5Password)
>> >checkPassword(self, password)
>> >
>> >at the
>> >
>> >class _PortalAuthChallenger(Referenceable, _JellyableAvatarMixin)
>> >
>> >By changing digest() with hexdigest(), it works.

Indeed.  `checkMD5Password` needs to be passed the MD5 digest of the 
password, not the hex encoded MD5 digest (despite being documented as 
taking the plaintext password itself).
>> >
>> >The question is:
>> >
>> >I there some way to make it work without making changes at the 
>>'pb.py'
>> >module?
>> >
>> >Yes. I should use md5Password = md5(password).digest() to produce the
>> >password, but then I cant authenticate with a 'pure-ftpd' daemon I 
>>need
>> >to work with.

This seems to be the crux of the matter.  I'm not sure how the PB auth 
code and the FTP auth code interact, though.  Perhaps your FTP code can 
just do its own password hashing?
>> >Any alternatives?
>>
>>You should register an IUsernameHashedPassword checker with the portal
>>you pass to PBServerFactory and use PBClientFactory.login.  See
>>pbbenchserver.py and pbbenchclient.py for examples of this.  Despite 
>>the
>
>Yes I did so. You can see the attached examples I am testing with
>>fact that you're passing a UsernamePassword instance to
>>PBClientFactory.login, the plain text password is never sent over the
>>network.
>
>Yes I Know. You do that at the 'respond(challenge, password)' in
>'pb.py', do you?
>>
>>Also, IUsernameMD5Password is about to be deprecated, along with the
>>checkMD5Password method of _PortalAuthChallenger.
>
>So, how should I do it in order not to be using deprecated code? I 
>would
>like to know some details so that I can have a better understanding of
>how authentication is working.

If you have the plaintext password in the PB server, then you can just 
call `checkPassword` instead of `checkMD5Password` in 
DBCredentialsChecker._cbAuthenticate.

Jean-Paul


From raq at cttc.upc.edu  Mon Feb 15 11:32:10 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Mon, 15 Feb 2010 17:32:10 +0100
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
Message-ID: <1266251530.12763.221.camel@mundo>

Jean-Paul:

On Mon, 2010-02-15 at 13:25 +0000, exarkun at twistedmatrix.com wrote:
> >>What do you mean when you say you're using plain text passwords?
> >>Authentication involves multiple parties handling the password in
> >>multiple ways, and the "plain text"-ness of the password changes from
> >>step to step.
> >
> >I mean that the the server authenticates the client using a NOT HASHED
> >password. In my case using a VARCHAR field in a PostgreSQL table
> >> >from hashlib import md5
> >> >md5Password = md5(password).hexdigest()
> >> >
> 
> I'm confused here.  I don't see this code in your checker implementation 
> in the attached code.  Is this code running someplace else?

No, of course you can not. This is only a little python script I use to
produce I hashed password that I can put in the VARCHAR field of my
PostgreSQL table. This way I can make 'pure-ftpd' authenticate using md5
hashed passwords, but for that reason I have to change pb.py code at
twisted, swaping '.digest()' with '.hexdigest()'.
That way it works but at the price of having to change original twisted
code, which is not the option I want to support.

> >> >then it does not authenticate (I use
> >> >credentials.checkMD5Password(password) at the checker class)
> >> >
> >> >Then after reading
> >> >
> >> >twisted/spread/pb.py
> >> >
> >> >I saw that everything is done in the functions:
> >> >
> >> >respond(challenge, password)
> >> >challenge()
> >> >
> >> >and the methods
> >> >
> >> >checkMD5Password(self, md5Password)
> >> >checkPassword(self, password)
> >> >
> >> >at the
> >> >
> >> >class _PortalAuthChallenger(Referenceable, _JellyableAvatarMixin)
> >> >
> >> >By changing digest() with hexdigest(), it works.
> 
> Indeed.  `checkMD5Password` needs to be passed the MD5 digest of the 
> password, not the hex encoded MD5 digest (despite being documented as 
> taking the plaintext password itself).

Yes I can understand that. So if I could put ha md5 hashed password in
the database but using digest() instead of hexdigest() I could make the
server authenticate but using 'checkMD5Password()' method directly a the
checker, but as you have said this is going to be deprecated.

> >
> >Yes I Know. You do that at the 'respond(challenge, password)' in
> >'pb.py', do you?
> >>
> >>Also, IUsernameMD5Password is about to be deprecated, along with the
> >>checkMD5Password method of _PortalAuthChallenger.
> >
> >So, how should I do it in order not to be using deprecated code? I 
> >would
> >like to know some details so that I can have a better understanding of
> >how authentication is working.
> 
> If you have the plaintext password in the PB server, then you can just 
> call `checkPassword` instead of `checkMD5Password` in 
> DBCredentialsChecker._cbAuthenticate.

Yes. This is working with plaintext password in the PB server, but not
with md5 hashed passwords, right?

Regards

-- 
Ramiro Alba

Centre Tecnol?gic de Tranfer?ncia de Calor
http://www.cttc.upc.edu


Escola T?cnica Superior d'Enginyeries
Industrial i Aeron?utica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est? net.



From exarkun at twistedmatrix.com  Mon Feb 15 11:45:11 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 15 Feb 2010 16:45:11 -0000
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <1266251530.12763.221.camel@mundo>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
Message-ID: <20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>

On 04:32 pm, raq at cttc.upc.edu wrote:
>Jean-Paul:
>
>On Mon, 2010-02-15 at 13:25 +0000, exarkun at twistedmatrix.com wrote:
>> >>What do you mean when you say you're using plain text passwords?
>> >>Authentication involves multiple parties handling the password in
>> >>multiple ways, and the "plain text"-ness of the password changes 
>>from
>> >>step to step.
>> >
>> >I mean that the the server authenticates the client using a NOT 
>>HASHED
>> >password. In my case using a VARCHAR field in a PostgreSQL table
>> >> >from hashlib import md5
>> >> >md5Password = md5(password).hexdigest()
>> >> >
>>
>>I'm confused here.  I don't see this code in your checker 
>>implementation
>>in the attached code.  Is this code running someplace else?
>
>No, of course you can not. This is only a little python script I use to
>produce I hashed password that I can put in the VARCHAR field of my
>PostgreSQL table. This way I can make 'pure-ftpd' authenticate using 
>md5
>hashed passwords, but for that reason I have to change pb.py code at
>twisted, swaping '.digest()' with '.hexdigest()'.
>That way it works but at the price of having to change original twisted
>code, which is not the option I want to support.

Ah, I see.  I didn't understand that you had MD5 hashed passwords stored 
in your database.

Fortunately, the .digest() and .hexdigest() outputs of an MD5 object are 
related in a simple way.  You can go from one to the other using 
str.encode('hex') or str.decode('hex').

So, if you have hex encoded MD5 digests in your database table, then you 
can convert them to the regular MD5 digests expected by PB with 
hex_digest_password.decode('hex') and pass the result of that to 
`checkMD5Password`.
>>
>>Indeed.  `checkMD5Password` needs to be passed the MD5 digest of the
>>password, not the hex encoded MD5 digest (despite being documented as
>>taking the plaintext password itself).
>
>Yes I can understand that. So if I could put ha md5 hashed password in
>the database but using digest() instead of hexdigest() I could make the
>server authenticate but using 'checkMD5Password()' method directly a 
>the
>checker, but as you have said this is going to be deprecated.

This discussion has led me to realize that checkMD5Password probably 
shouldn't be deprecated.  Instead the documentation should be fixed so 
that it's clear why it's useful.

So, assuming we don't deprecate it, and you use the decode('hex') 
approach above, does that let you do your authentication for both apps 
and let you avoid keeping a modified version of Twisted?
>> >So, how should I do it in order not to be using deprecated code? I
>> >would
>> >like to know some details so that I can have a better understanding 
>>of
>> >how authentication is working.
>>
>>If you have the plaintext password in the PB server, then you can just
>>call `checkPassword` instead of `checkMD5Password` in
>>DBCredentialsChecker._cbAuthenticate.
>
>Yes. This is working with plaintext password in the PB server, but not
>with md5 hashed passwords, right?

Right, which doesn't make sense for you, but I suggested this thinking 
that your database had plaintext passwords in it.

Jean-Paul


From einar.twisted at norsk-esport.no  Mon Feb 15 12:54:57 2010
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?Einar_S=2E_Ids=F8?=)
Date: Mon, 15 Feb 2010 18:54:57 +0100
Subject: [Twisted-Python] Need help for structured application development
Message-ID: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>

Hi,

I am planning to develop an application that will query a number of
services at given intervals, and Twisted seems like a very nice
platform to do so. However, because of little previous experience with
Twisted, especially with building proper applications, using
interfaces and using plugins, I could really need some pointers to get
me started.

In the following I will try to explain in broad terms what the
application will do, and humbly ask for input on how I may structure
it using factories, protocols etc.:

1. A number of more-or-less similar server applications (5-10) have a
number of concurrent instances/servers (1-30) each.
2. I need to acquire the status of each instance at given intervals.
These will typically range from every 20 seconds to every 3 minutes,
and depend on the which service the instance is based on.
3. A list of the server instances shall be acquired via an XML-query
every few minutes to pick up on new or removed instances.
4. An executable already exists which can be used to status-poll
almost all services using different parameters. I will be calling it
from my application to do the polling instead of recreating it in
Python.
5. I need to be able to create my own polling-protocol for at least
one of the service types which is incompatible with the executable.
6. Some services can not only be polled at intervals, but additionally
stream information that I am interested in listening to.
7. At a later point in time, I wish to be able to communicate with
IRC, MSN and other services/protocols using the queried and streamed
data.

My initial general thought is the following:
1. Design a class for each server application, where all classes
implement the same interface. The class defines how to deal with
server instances of its corresponding server application type. Classes
are created as Twisted-plugins.
2. For each new server instance that is discovered, create an object
which contains a timer and polls the server at specific intervals,
writing the result to a globally accessible data structure.
3. For server instances that stream data continuously in addition to
being polled at regular intervals, create a separate object which
listens to the server.

I believe I should somehow have a global data structure which contains
references to all the server instance objects, regardless of type, and
allows them to store data. This is sort of like the factory does for
protocols, except in my case I don't think I can use a regular factory
since I need both clients (to poll at intervals) and servers (to
listen to streaming data). I suppose I could use a ClientFactory for
the pollers and a Factory for the stream-listeners, and let them have
a common data-store? But is it possible to use a single ClientFactory
to spawn all poller-objects regardless of server type? Or do I need
one ClientFactory for each server type? Do I perhaps need one
ClientFactory per server instance? Or should I just ignore factories
all together since it is primarily the timer and asyncronicity of
Twisted I need?

I am quite certain there is a correct twistified way of handling this
sort of problem. I am just not sure what it is, and would sincerely
welcome all feedback on how this should be done. Feel free to point to
examples of applications that are similar to what I sketched above,
and tell me to study the code :)

Cheers,
Einar


From raq at cttc.upc.edu  Mon Feb 15 13:35:57 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Mon, 15 Feb 2010 19:35:57 +0100
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
Message-ID: <1266258957.12763.228.camel@mundo>

Jean-Paul,

On Mon, 2010-02-15 at 16:45 +0000, exarkun at twistedmatrix.com wrote:
> >checker, but as you have said this is going to be deprecated.
> 
> This discussion has led me to realize that checkMD5Password probably 
> shouldn't be deprecated.  Instead the documentation should be fixed so 
> that it's clear why it's useful.
> 
> So, assuming we don't deprecate it, and you use the decode('hex') 
> approach above, does that let you do your authentication for both apps 
> and let you avoid keeping a modified version of Twisted?

YES. BOTH are are working now on an unmodified twisted. Wonderful.
Jean-Paul, really grateful to you.
Now please, let me know if you are not finally deprecating
'checkMD5Password' method, or if so if I have an option to keep using
MD5 hashed passwords at the server.

Thanks again.

Regards


-- 
Ramiro Alba

Centre Tecnol?gic de Tranfer?ncia de Calor
http://www.cttc.upc.edu


Escola T?cnica Superior d'Enginyeries
Industrial i Aeron?utica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que est? net.



From exarkun at twistedmatrix.com  Mon Feb 15 14:37:11 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 15 Feb 2010 19:37:11 -0000
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <1266258957.12763.228.camel@mundo>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
	<1266258957.12763.228.camel@mundo>
Message-ID: <20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>

On 06:35 pm, raq at cttc.upc.edu wrote:
>Jean-Paul,
>
>On Mon, 2010-02-15 at 16:45 +0000, exarkun at twistedmatrix.com wrote:
>> >checker, but as you have said this is going to be deprecated.
>>
>>This discussion has led me to realize that checkMD5Password probably
>>shouldn't be deprecated.  Instead the documentation should be fixed so
>>that it's clear why it's useful.
>>
>>So, assuming we don't deprecate it, and you use the decode('hex')
>>approach above, does that let you do your authentication for both apps
>>and let you avoid keeping a modified version of Twisted?
>
>YES. BOTH are are working now on an unmodified twisted. Wonderful.
>Jean-Paul, really grateful to you.
>Now please, let me know if you are not finally deprecating
>'checkMD5Password' method, or if so if I have an option to keep using
>MD5 hashed passwords at the server.

You can follow this on http://twistedmatrix.com/trac/ticket/3056

Jean-Paul


From wthie at thiengineering.ch  Mon Feb 15 19:47:31 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Mon, 15 Feb 2010 14:47:31 -1000
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>
References: <1265997780.12763.175.camel@mundo>	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>	<1266227696.12763.200.camel@mundo>	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>	<1266251530.12763.221.camel@mundo>	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>	<1266258957.12763.228.camel@mundo>
	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>
Message-ID: <4B79EB23.5020101@thiengineering.ch>

Hi

Although I'mm using twisted/nevow now for more than three years it was 
only recently that I felt the need to look into the words section of 
twisted. After googling 'python xmpp server' I found two projects aiming 
at writing an xmpp server in python, namely pjabberd (non twisted) and 
pretzel.

Checking out their code via SVN shows an empty pretzel project and after 
some digging I was able to locate some code snippets, but not in an 
usable state. pjabberd checks out ok, also seems to run and is able and 
ready to accept handlers. I also found a very old post dating back to 
2005 where an effort to write a twisted XMPP server was mentioned.

http://twistedmatrix.com/pipermail/twisted-python/2005-July/011009.html

Being new in the XMPP world I ask myself and now the group, how would 
you tackle the problem of a twisted based XMPP server. Is there really 
only the Java breed of servers like OpenFire, Tigase or Erlang/Lua based 
stuff like ejabberd/Prosody available or am I simply blind.

Thanks for enlightening me, Werner




From radix at twistedmatrix.com  Mon Feb 15 20:24:50 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 15 Feb 2010 19:24:50 -0600
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <4B79EB23.5020101@thiengineering.ch>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
	<1266258957.12763.228.camel@mundo>
	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>
	<4B79EB23.5020101@thiengineering.ch>
Message-ID: <60ed19d41002151724m49086b41tfe73d8fd2b46fcb8@mail.gmail.com>

On Mon, Feb 15, 2010 at 6:47 PM, Werner Thie <wthie at thiengineering.ch> wrote:
> Hi
>
> Although I'mm using twisted/nevow now for more than three years it was
> only recently that I felt the need to look into the words section of
> twisted. After googling 'python xmpp server' I found two projects aiming
> at writing an xmpp server in python, namely pjabberd (non twisted) and
> pretzel.
>
> Checking out their code via SVN shows an empty pretzel project and after
> some digging I was able to locate some code snippets, but not in an
> usable state. pjabberd checks out ok, also seems to run and is able and
> ready to accept handlers. I also found a very old post dating back to
> 2005 where an effort to write a twisted XMPP server was mentioned.
>
> http://twistedmatrix.com/pipermail/twisted-python/2005-July/011009.html
>
> Being new in the XMPP world I ask myself and now the group, how would
> you tackle the problem of a twisted based XMPP server. Is there really
> only the Java breed of servers like OpenFire, Tigase or Erlang/Lua based
> stuff like ejabberd/Prosody available or am I simply blind.
>
> Thanks for enlightening me, Werner

As someone who has recently started heavily using Twisted-based XMPP
technologies, I honestly don't see a big reason to have an XMPP server
written using Twisted. I don't know what kind of use cases there are
for it, but I don't think it would solve any problems for me. It seems
it's possible to do anything interesting by just using regular old
XMPP clients or External Components (all written using Twisted-based
XMPP tech such as twisted.words, Wokkel, Idavoll, or what have you).
The XMPP server is pretty much interchangeable. And I wouldn't want to
create a project to compete with ejabberd without a very good reason
:-)

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From adelagon at gmail.com  Mon Feb 15 20:54:48 2010
From: adelagon at gmail.com (Alvin Delagon)
Date: Tue, 16 Feb 2010 09:54:48 +0800
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <60ed19d41002151724m49086b41tfe73d8fd2b46fcb8@mail.gmail.com>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
	<1266258957.12763.228.camel@mundo>
	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>
	<4B79EB23.5020101@thiengineering.ch>
	<60ed19d41002151724m49086b41tfe73d8fd2b46fcb8@mail.gmail.com>
Message-ID: <7a01f6c01002151754x493f6ab3x1ceb73b1f155b067@mail.gmail.com>

Hello,

I used to write XMPP servers and clients using twisted (currently in
production) using what's available in twisted.words.xish. The docs are
scarce but you can start off reading the code and the api doc here:
http://twistedmatrix.com/documents/8.2.0/api/twisted.words.xish.htmlspecially
the domish element.


Cheers,
Alvin

On Tue, Feb 16, 2010 at 9:24 AM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Mon, Feb 15, 2010 at 6:47 PM, Werner Thie <wthie at thiengineering.ch>
> wrote:
> > Hi
> >
> > Although I'mm using twisted/nevow now for more than three years it was
> > only recently that I felt the need to look into the words section of
> > twisted. After googling 'python xmpp server' I found two projects aiming
> > at writing an xmpp server in python, namely pjabberd (non twisted) and
> > pretzel.
> >
> > Checking out their code via SVN shows an empty pretzel project and after
> > some digging I was able to locate some code snippets, but not in an
> > usable state. pjabberd checks out ok, also seems to run and is able and
> > ready to accept handlers. I also found a very old post dating back to
> > 2005 where an effort to write a twisted XMPP server was mentioned.
> >
> > http://twistedmatrix.com/pipermail/twisted-python/2005-July/011009.html
> >
> > Being new in the XMPP world I ask myself and now the group, how would
> > you tackle the problem of a twisted based XMPP server. Is there really
> > only the Java breed of servers like OpenFire, Tigase or Erlang/Lua based
> > stuff like ejabberd/Prosody available or am I simply blind.
> >
> > Thanks for enlightening me, Werner
>
> As someone who has recently started heavily using Twisted-based XMPP
> technologies, I honestly don't see a big reason to have an XMPP server
> written using Twisted. I don't know what kind of use cases there are
> for it, but I don't think it would solve any problems for me. It seems
> it's possible to do anything interesting by just using regular old
> XMPP clients or External Components (all written using Twisted-based
> XMPP tech such as twisted.words, Wokkel, Idavoll, or what have you).
> The XMPP server is pretty much interchangeable. And I wouldn't want to
> create a project to compete with ejabberd without a very good reason
> :-)
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100216/5ae1c446/attachment.htm 

From wthie at thiengineering.ch  Tue Feb 16 00:06:59 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Mon, 15 Feb 2010 19:06:59 -1000
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <7a01f6c01002151754x493f6ab3x1ceb73b1f155b067@mail.gmail.com>
References: <1265997780.12763.175.camel@mundo>	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>	<1266227696.12763.200.camel@mundo>	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>	<1266251530.12763.221.camel@mundo>	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>	<1266258957.12763.228.camel@mundo>	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>	<4B79EB23.5020101@thiengineering.ch>	<60ed19d41002151724m49086b41tfe73d8fd2b46fcb8@mail.gmail.com>
	<7a01f6c01002151754x493f6ab3x1ceb73b1f155b067@mail.gmail.com>
Message-ID: <4B7A27F3.2050806@thiengineering.ch>

Hmm, thanks for the advice, I was leaning to the lean side of a server 
something like pjabberd seems to have taken as an approach, so to say a 
skeleton where one can hang the meat, ending up with the functionality I 
need and no more. So with t.w.xish I seem to have the bones and no 
blueprint for the skeleton and on the other side I have full fledged 
Java monsters or or other implementations which do not always get the 
best grades in stability (see the discussion of the XMPP server 
Chesspark uses, they ran into memory problems such that periodic 
rebooting was the only solution). Politically I'm wary to introduce a 
heavy piece of software for some partial functionality written in a 
completely different language now when every body has grudgingly left 
the PHP train and had to be brought a board twisted.

So again thanks, if choosing a server is no problem and poses no 
problems, then which one would you chose?

Mahalo, Werner

Alvin Delagon wrote:
> Hello,
> 
> I used to write XMPP servers and clients using twisted (currently in
> production) using what's available in twisted.words.xish. The docs are
> scarce but you can start off reading the code and the api doc here:
> http://twistedmatrix.com/documents/8.2.0/api/twisted.words.xish.htmlspecially
> the domish element.
> 
> 
> Cheers,
> Alvin
> 
> On Tue, Feb 16, 2010 at 9:24 AM, Christopher Armstrong <
> radix at twistedmatrix.com> wrote:
> 
>> On Mon, Feb 15, 2010 at 6:47 PM, Werner Thie <wthie at thiengineering.ch>
>> wrote:
>>> Hi
>>>
>>> Although I'mm using twisted/nevow now for more than three years it was
>>> only recently that I felt the need to look into the words section of
>>> twisted. After googling 'python xmpp server' I found two projects aiming
>>> at writing an xmpp server in python, namely pjabberd (non twisted) and
>>> pretzel.
>>>
>>> Checking out their code via SVN shows an empty pretzel project and after
>>> some digging I was able to locate some code snippets, but not in an
>>> usable state. pjabberd checks out ok, also seems to run and is able and
>>> ready to accept handlers. I also found a very old post dating back to
>>> 2005 where an effort to write a twisted XMPP server was mentioned.
>>>
>>> http://twistedmatrix.com/pipermail/twisted-python/2005-July/011009.html
>>>
>>> Being new in the XMPP world I ask myself and now the group, how would
>>> you tackle the problem of a twisted based XMPP server. Is there really
>>> only the Java breed of servers like OpenFire, Tigase or Erlang/Lua based
>>> stuff like ejabberd/Prosody available or am I simply blind.
>>>
>>> Thanks for enlightening me, Werner
>> As someone who has recently started heavily using Twisted-based XMPP
>> technologies, I honestly don't see a big reason to have an XMPP server
>> written using Twisted. I don't know what kind of use cases there are
>> for it, but I don't think it would solve any problems for me. It seems
>> it's possible to do anything interesting by just using regular old
>> XMPP clients or External Components (all written using Twisted-based
>> XMPP tech such as twisted.words, Wokkel, Idavoll, or what have you).
>> The XMPP server is pretty much interchangeable. And I wouldn't want to
>> create a project to compete with ejabberd without a very good reason
>> :-)
>>
>> --
>> Christopher Armstrong
>> http://radix.twistedmatrix.com/
>> http://planet-if.com/
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> 
> 
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From p.mayers at imperial.ac.uk  Tue Feb 16 05:09:59 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 16 Feb 2010 10:09:59 +0000
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <4B7A27F3.2050806@thiengineering.ch>
References: <1265997780.12763.175.camel@mundo>	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>	<1266227696.12763.200.camel@mundo>	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>	<1266251530.12763.221.camel@mundo>	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>	<1266258957.12763.228.camel@mundo>	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>	<4B79EB23.5020101@thiengineering.ch>	<60ed19d41002151724m49086b41tfe73d8fd2b46fcb8@mail.gmail.com>	<7a01f6c01002151754x493f6ab3x1ceb73b1f155b067@mail.gmail.com>
	<4B7A27F3.2050806@thiengineering.ch>
Message-ID: <4B7A6EF7.7000903@imperial.ac.uk>

On 02/16/2010 05:06 AM, Werner Thie wrote:
> best grades in stability (see the discussion of the XMPP server
> Chesspark uses, they ran into memory problems such that periodic
> rebooting was the only solution). Politically I'm wary to introduce a

That was jabberd2 I think. They moved to ejabberd in 2008 IIRC.

> heavy piece of software for some partial functionality written in a
> completely different language now when every body has grudgingly left
> the PHP train and had to be brought a board twisted.
>
> So again thanks, if choosing a server is no problem and poses no
> problems, then which one would you chose?

ejabberd without a shadow of a doubt.


From alexandre at quessy.net  Tue Feb 16 05:57:02 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Tue, 16 Feb 2010 05:57:02 -0500
Subject: [Twisted-Python] Need help for structured application
	development
In-Reply-To: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
Message-ID: <72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>

Hello Einar,
This is a quite long email.
What I can tell you, is that querying many command line applications
with t.i.utils.getProcessOutput and gathering them in a DeferredList
worked for me. Example: the list_cameras in
http://svn.sat.qc.ca/trac/miville/browser/trunk/py/scenic/devices/cameras.py

Good luck !

a


2010/2/15 Einar S. Ids? <einar.twisted at norsk-esport.no>:
> Hi,
>
> I am planning to develop an application that will query a number of
> services at given intervals, and Twisted seems like a very nice
> platform to do so. However, because of little previous experience with
> Twisted, especially with building proper applications, using
> interfaces and using plugins, I could really need some pointers to get
> me started.
>
> In the following I will try to explain in broad terms what the
> application will do, and humbly ask for input on how I may structure
> it using factories, protocols etc.:
>
> 1. A number of more-or-less similar server applications (5-10) have a
> number of concurrent instances/servers (1-30) each.
> 2. I need to acquire the status of each instance at given intervals.
> These will typically range from every 20 seconds to every 3 minutes,
> and depend on the which service the instance is based on.
> 3. A list of the server instances shall be acquired via an XML-query
> every few minutes to pick up on new or removed instances.
> 4. An executable already exists which can be used to status-poll
> almost all services using different parameters. I will be calling it
> from my application to do the polling instead of recreating it in
> Python.
> 5. I need to be able to create my own polling-protocol for at least
> one of the service types which is incompatible with the executable.
> 6. Some services can not only be polled at intervals, but additionally
> stream information that I am interested in listening to.
> 7. At a later point in time, I wish to be able to communicate with
> IRC, MSN and other services/protocols using the queried and streamed
> data.
>
> My initial general thought is the following:
> 1. Design a class for each server application, where all classes
> implement the same interface. The class defines how to deal with
> server instances of its corresponding server application type. Classes
> are created as Twisted-plugins.
> 2. For each new server instance that is discovered, create an object
> which contains a timer and polls the server at specific intervals,
> writing the result to a globally accessible data structure.
> 3. For server instances that stream data continuously in addition to
> being polled at regular intervals, create a separate object which
> listens to the server.
>
> I believe I should somehow have a global data structure which contains
> references to all the server instance objects, regardless of type, and
> allows them to store data. This is sort of like the factory does for
> protocols, except in my case I don't think I can use a regular factory
> since I need both clients (to poll at intervals) and servers (to
> listen to streaming data). I suppose I could use a ClientFactory for
> the pollers and a Factory for the stream-listeners, and let them have
> a common data-store? But is it possible to use a single ClientFactory
> to spawn all poller-objects regardless of server type? Or do I need
> one ClientFactory for each server type? Do I perhaps need one
> ClientFactory per server instance? Or should I just ignore factories
> all together since it is primarily the timer and asyncronicity of
> Twisted I need?
>
> I am quite certain there is a correct twistified way of handling this
> sort of problem. I am just not sure what it is, and would sincerely
> welcome all feedback on how this should be done. Feel free to point to
> examples of applications that are similar to what I sketched above,
> and tell me to study the code :)
>
> Cheers,
> Einar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/


From burslem2001 at yahoo.com  Tue Feb 16 11:15:48 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Tue, 16 Feb 2010 08:15:48 -0800 (PST)
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <4B7A6EF7.7000903@imperial.ac.uk>
Message-ID: <106211.96862.qm@web112509.mail.gq1.yahoo.com>

Hello,

I'm tested my client server model. The server being a twisted server.
I am using the class NetstringReceiver. When I close down the client the appropriate call to close the connection is made "connectionLost". However when I just pull the client connection cable from the network. I would expect the call to be made to indicate a connection is lost at the twisted server. I dont see this. 

I am going through a local hub and not sure what at the moment to think of this. I am using ssl to communicate.

If somebody could shed some light on this that would be great.

Thanks,
Garyc





From adelagon at gmail.com  Tue Feb 16 11:31:16 2010
From: adelagon at gmail.com (Alvin Delagon)
Date: Wed, 17 Feb 2010 00:31:16 +0800
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <106211.96862.qm@web112509.mail.gq1.yahoo.com>
References: <4B7A6EF7.7000903@imperial.ac.uk>
	<106211.96862.qm@web112509.mail.gq1.yahoo.com>
Message-ID: <7a01f6c01002160831w1c77d834mf20440a755ebe68f@mail.gmail.com>

Hello Garyc,

This is not twisted's fault. Pulling a network plug doesn't tell the server
that the client went away immediately since the connection wasn't closed
properly. Pulling the plug produces TCP half-open scenario when one thinks
that the connection is still up. This can be remedied by
polling/hearbeat/keepalive logic. You can make your twisted server aware of
the keepalive timeouts by turning on setTcpKeepAlive to 1:

self.transport.setTcpKeepAlive(1)

Cheers,
Alvin


On Wed, Feb 17, 2010 at 12:15 AM, gary clark <burslem2001 at yahoo.com> wrote:

> Hello,
>
> I'm tested my client server model. The server being a twisted server.
> I am using the class NetstringReceiver. When I close down the client the
> appropriate call to close the connection is made "connectionLost". However
> when I just pull the client connection cable from the network. I would
> expect the call to be made to indicate a connection is lost at the twisted
> server. I dont see this.
>
> I am going through a local hub and not sure what at the moment to think of
> this. I am using ssl to communicate.
>
> If somebody could shed some light on this that would be great.
>
> Thanks,
> Garyc
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100217/4a93ba1d/attachment.htm 

From burslem2001 at yahoo.com  Tue Feb 16 11:52:34 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Tue, 16 Feb 2010 08:52:34 -0800 (PST)
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <7a01f6c01002160831w1c77d834mf20440a755ebe68f@mail.gmail.com>
Message-ID: <39737.12990.qm@web112519.mail.gq1.yahoo.com>

Much appreciated Alvin.

--- On Tue, 2/16/10, Alvin Delagon <adelagon at gmail.com> wrote:

> From: Alvin Delagon <adelagon at gmail.com>
> Subject: Re: [Twisted-Python] Pulling the ethernet cable out
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Tuesday, February 16, 2010, 10:31 AM
> Hello Garyc,
> This is not twisted's fault. Pulling a
> network plug doesn't tell the server that the client
> went away immediately since the connection wasn't closed
> properly. Pulling the plug produces TCP half-open scenario
> when one thinks that the connection is still up. This can be
> remedied by polling/hearbeat/keepalive logic. You can make
> your twisted server aware of the keepalive timeouts by
> turning on setTcpKeepAlive to 1:
> 
> self.transport.setTcpKeepAlive(1)
> Cheers,Alvin
> 
> On Wed, Feb 17, 2010 at 12:15 AM,
> gary clark <burslem2001 at yahoo.com>
> wrote:
> 
> Hello,
> 
> 
> 
> I'm tested my client server model. The server being a
> twisted server.
> 
> I am using the class NetstringReceiver. When I close down
> the client the appropriate call to close the connection is
> made "connectionLost". However when I just pull
> the client connection cable from the network. I would expect
> the call to be made to indicate a connection is lost at the
> twisted server. I dont see this.
> 
> 
> 
> 
> I am going through a local hub and not sure what at the
> moment to think of this. I am using ssl to communicate.
> 
> 
> 
> If somebody could shed some light on this that would be
> great.
> 
> 
> 
> Thanks,
> 
> Garyc
> 
> 
> 
> 
> 
> 
> 
> 
> 
> _______________________________________________
> 
> Twisted-Python mailing list
> 
> Twisted-Python at twistedmatrix.com
> 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> -- 
> http://www.alvinatorsplayground.blogspot.com/
> 
> 
> 
> -----Inline Attachment Follows-----
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From burslem2001 at yahoo.com  Tue Feb 16 12:06:34 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Tue, 16 Feb 2010 09:06:34 -0800 (PST)
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <106211.96862.qm@web112509.mail.gq1.yahoo.com>
Message-ID: <725070.67723.qm@web112512.mail.gq1.yahoo.com>

I have to poll at the twisted server "getTcpKeepAlive" for the state of the keep alive.


Thanks,
Garyc

--- On Tue, 2/16/10, gary clark <burslem2001 at yahoo.com> wrote:

> From: gary clark <burslem2001 at yahoo.com>
> Subject: [Twisted-Python] Pulling the ethernet cable out
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Tuesday, February 16, 2010, 10:15 AM
> Hello,
> 
> I'm tested my client server model. The server being a
> twisted server.
> I am using the class NetstringReceiver. When I close down
> the client the appropriate call to close the connection is
> made "connectionLost". However when I just pull the client
> connection cable from the network. I would expect the call
> to be made to indicate a connection is lost at the twisted
> server. I dont see this. 
> 
> I am going through a local hub and not sure what at the
> moment to think of this. I am using ssl to communicate.
> 
> If somebody could shed some light on this that would be
> great.
> 
> Thanks,
> Garyc
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From adelagon at gmail.com  Tue Feb 16 12:19:10 2010
From: adelagon at gmail.com (Alvin Delagon)
Date: Wed, 17 Feb 2010 01:19:10 +0800
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <725070.67723.qm@web112512.mail.gq1.yahoo.com>
References: <106211.96862.qm@web112509.mail.gq1.yahoo.com>
	<725070.67723.qm@web112512.mail.gq1.yahoo.com>
Message-ID: <7a01f6c01002160919t7d424c57sa609d22d8ef2b6a8@mail.gmail.com>

Hello,

No, getTcpKeepAlive will only tell you if SO_KEEPALIVE is enabled. It's
setTcpKeepAlive you want. If it's enabled, once the keepalive times out on a
half-open scenario, the connectionLost method will be triggered. You can
read the API docs here:

http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connection.html#getTcpKeepAlive
http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connection.html#setTcpKeepAlive

Best Regards,
Alvin


On Wed, Feb 17, 2010 at 1:06 AM, gary clark <burslem2001 at yahoo.com> wrote:

> I have to poll at the twisted server "getTcpKeepAlive" for the state of the
> keep alive.
>
>
> Thanks,
> Garyc
>
> --- On Tue, 2/16/10, gary clark <burslem2001 at yahoo.com> wrote:
>
> > From: gary clark <burslem2001 at yahoo.com>
> > Subject: [Twisted-Python] Pulling the ethernet cable out
> > To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> > Date: Tuesday, February 16, 2010, 10:15 AM
> > Hello,
> >
> > I'm tested my client server model. The server being a
> > twisted server.
> > I am using the class NetstringReceiver. When I close down
> > the client the appropriate call to close the connection is
> > made "connectionLost". However when I just pull the client
> > connection cable from the network. I would expect the call
> > to be made to indicate a connection is lost at the twisted
> > server. I dont see this.
> >
> > I am going through a local hub and not sure what at the
> > moment to think of this. I am using ssl to communicate.
> >
> > If somebody could shed some light on this that would be
> > great.
> >
> > Thanks,
> > Garyc
> >
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100217/673ef14b/attachment.htm 

From rich at noir.com  Tue Feb 16 13:17:31 2010
From: rich at noir.com (K. Richard Pixley)
Date: Tue, 16 Feb 2010 10:17:31 -0800
Subject: [Twisted-Python] web page on doc...
Message-ID: <4B7AE13B.3050403@noir.com>

I've been going around and around on documentation with/for twisted for 
a few days now. For example, I read things like "the documentation is 
written in epytext" and "documentation is processed by trial" and 
conclude that trial processes epytext.  I think I'm beginning to 
understand what's really going on now but two things would have helped me.

1) a brief overview of the documentation.  (proposal below).
2) if references to "the documentation" could be clarified to refer to 
"howto documentation" vs "API documentation".

If agreed, then I will volunteer to help find and patch #2.  As a 
proposal for #1, I offer the following as an insertion into 
http://twistedmatrix.com/trac/wiki/ReviewingDocumentation as a second 
section:

UNDERSTANDING DOCUMENTATION ORGANIZATION

Documentation for Twisted comes in four primary parts.

The first part is a collection of "Howto" documents which are composed 
in xhtml, processed by twisted's "trial", into html.  The source for the 
Howto documents lives in subversion under doc in the various "howto" 
directories.

The second part is a collection of examples.  These examples are 
included inline in the "howto" doc.  These are written in python and 
twisted and are included in the various "examples" directories under 
"doc" in the source.

The third part is the API documentation which is produced by pydoctor 
from the docstrings scattered throughout the twisted source code.  The 
doc strings are written in epytext format.

The fourth part are traditional unix man pages.  These are written in 
troff -ms format and the sources are stored in the various "man" 
directories in the source under "doc".

--rich


From burslem2001 at yahoo.com  Tue Feb 16 13:18:53 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Tue, 16 Feb 2010 10:18:53 -0800 (PST)
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <7a01f6c01002160919t7d424c57sa609d22d8ef2b6a8@mail.gmail.com>
Message-ID: <48812.58225.qm@web112519.mail.gq1.yahoo.com>

Hey Alvin,

In the document link you provided the packets are being sent periodically every 2 hours for setTcpKeepAlive(1). I am assuming that
the a packet is sent straight away and then waits. At the moment I dont see the connection lost. The getTcpKeepAlive() is returning 1 indicating that keep alive is set.

Is there a way to change the delay?

Thanks,
Garyc



--- On Tue, 2/16/10, Alvin Delagon <adelagon at gmail.com> wrote:

> From: Alvin Delagon <adelagon at gmail.com>
> Subject: Re: [Twisted-Python] Pulling the ethernet cable out
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Tuesday, February 16, 2010, 11:19 AM
> Hello,
> No, getTcpKeepAlive will only tell you if
> SO_KEEPALIVE is enabled. It's setTcpKeepAlive you want.
> If it's enabled, once the keepalive times out on a
> half-open scenario, the connectionLost method will be
> triggered. You can read the API docs here:
> 
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connection.html#getTcpKeepAlive
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connection.html#setTcpKeepAlive
> 
> Best Regards,Alvin
> 
> On Wed, Feb 17, 2010 at 1:06 AM,
> gary clark <burslem2001 at yahoo.com>
> wrote:
> 
> I have to
> poll at the twisted server "getTcpKeepAlive" for
> the state of the keep alive.
> 
> 
> 
> 
> 
> Thanks,
> 
> Garyc
> 
> 
> 
> --- On Tue, 2/16/10, gary clark <burslem2001 at yahoo.com>
> wrote:
> 
> 
> 
> > From: gary clark <burslem2001 at yahoo.com>
> 
> > Subject: [Twisted-Python] Pulling the ethernet cable
> out
> 
> > To: "Twisted general
> discussion" <twisted-python at twistedmatrix.com>
> 
> > Date: Tuesday, February 16, 2010, 10:15 AM
> 
> > Hello,
> 
> >
> 
> > I'm tested my client server model. The server
> being a
> 
> > twisted server.
> 
> > I am using the class NetstringReceiver. When I close
> down
> 
> > the client the appropriate call to close the
> connection is
> 
> > made "connectionLost". However when I just
> pull the client
> 
> > connection cable from the network. I would expect the
> call
> 
> > to be made to indicate a connection is lost at the
> twisted
> 
> > server. I dont see this.
> 
> >
> 
> > I am going through a local hub and not sure what at
> the
> 
> > moment to think of this. I am using ssl to
> communicate.
> 
> >
> 
> > If somebody could shed some light on this that would
> be
> 
> > great.
> 
> >
> 
> > Thanks,
> 
> > Garyc
> 
> >
> 
> >
> 
> >
> 
> >
> 
> > _______________________________________________
> 
> > Twisted-Python mailing list
> 
> > Twisted-Python at twistedmatrix.com
> 
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> >
> 
> 
> 
> 
> 
> _______________________________________________
> 
> Twisted-Python mailing list
> 
> Twisted-Python at twistedmatrix.com
> 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> -- 
> http://www.alvinatorsplayground.blogspot.com/
> 
> 
> 
> -----Inline Attachment Follows-----
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From kevin.horn at gmail.com  Tue Feb 16 13:59:59 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 16 Feb 2010 12:59:59 -0600
Subject: [Twisted-Python] web page on doc...
In-Reply-To: <4B7AE13B.3050403@noir.com>
References: <4B7AE13B.3050403@noir.com>
Message-ID: <562bcc11002161059s54cd40f9w7273e7d2059410c2@mail.gmail.com>

On Tue, Feb 16, 2010 at 12:17 PM, K. Richard Pixley <rich at noir.com> wrote:

> I've been going around and around on documentation with/for twisted for
> a few days now. For example, I read things like "the documentation is
> written in epytext" and "documentation is processed by trial" and
> conclude that trial processes epytext.  I think I'm beginning to
> understand what's really going on now but two things would have helped me.
>
> 1) a brief overview of the documentation.  (proposal below).
> 2) if references to "the documentation" could be clarified to refer to
> "howto documentation" vs "API documentation".
>
> If agreed, then I will volunteer to help find and patch #2.  As a
> proposal for #1, I offer the following as an insertion into
> http://twistedmatrix.com/trac/wiki/ReviewingDocumentation as a second
> section:
>
> UNDERSTANDING DOCUMENTATION ORGANIZATION
>
> Documentation for Twisted comes in four primary parts.
>
> The first part is a collection of "Howto" documents which are composed
> in xhtml, processed by twisted's "trial", into html.  The source for the
> Howto documents lives in subversion under doc in the various "howto"
> directories.
>
> The second part is a collection of examples.  These examples are
> included inline in the "howto" doc.  These are written in python and
> twisted and are included in the various "examples" directories under
> "doc" in the source.
>
> The third part is the API documentation which is produced by pydoctor
> from the docstrings scattered throughout the twisted source code.  The
> doc strings are written in epytext format.
>
> The fourth part are traditional unix man pages.  These are written in
> troff -ms format and the sources are stored in the various "man"
> directories in the source under "doc".
>
> --rich
>
>
I think that an overview like this is a great idea, though in your text
above,
the xhtml is processed into html by "lore" not "trial".  With any luck this
will
change soon, and the long-form documentation (how-tos, etc.) will transition
to Sphinx.  If you'd like to see what that looks like, see here:
http://twistedsphinx.funsize.net

Other than that, something very like what you have described should
definitely
be _somewhere_ on the Twisted site.

(As an aside, I think a lot of things that are currently on the wiki should
be merged
into the documentation proper, but that's a topic for another post.)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100216/743f57ab/attachment.htm 

From vlad.shevchenko at gmail.com  Tue Feb 16 14:46:48 2010
From: vlad.shevchenko at gmail.com (Vlad Shevchenko)
Date: Tue, 16 Feb 2010 21:46:48 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
Message-ID: <572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>

Hi,

I have developed two kind of servers:
   api - http server
   memory_db - dict-based server with some logic of putting data to dict and
getting it back.

Api communicate with memory_db via txJSON-RPC but response time is huge
under high load. I also try implementation with replacement txJSON-RPC ->
Perspective Broker with no success. PB implementation has 10+ times faster
responses when returning data is small (dict with few keys and values like
list of 1-5 strings). However, PM much depends on size of returning value.
When I return a list of 600 items (each is string with length 20) response
time incredibly growing up. Unlike PB, json-rpc implementation keeps it
response-time near the same lever as with small return data.

Can you suggest some protocol with a small response? Or should I look into
development of my own?

-- 
WBR, Vlad Shevchenko
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100216/3e198378/attachment-0001.htm 

From phil at bubblehouse.org  Tue Feb 16 15:08:46 2010
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 16 Feb 2010 15:08:46 -0500
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
Message-ID: <7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>

On Feb 16, 2010, at 2:46 PM, Vlad Shevchenko wrote:
> I have developed two kind of servers:
>    api - http server
>    memory_db - dict-based server with some logic of putting data to dict and getting it back.
> 
> Api communicate with memory_db via txJSON-RPC but response time is huge under high load. I also try implementation with replacement txJSON-RPC -> Perspective Broker with no success. PB implementation has 10+ times faster responses when returning data is small (dict with few keys and values like list of 1-5 strings). However, PM much depends on size of returning value. When I return a list of 600 items (each is string with length 20) response time incredibly growing up. Unlike PB, json-rpc implementation keeps it response-time near the same lever as with small return data.
> 
> Can you suggest some protocol with a small response? Or should I look into development of my own?

It definitely depends on your use case...

PB can still be a good solution for you if you change your architecture a little bit. Instead of returning a 600-item list, you could return a pb.Referencable object that can iteratively return each row at a time.

You may also want to look into using Copyable or Cacheable PB objects. More on that here:

	http://twistedmatrix.com/documents/current/core/howto/pb-copyable.html

Of course, if you need a large amount of data to be available before you can begin calculations or whatnot, you're going to have to wait for it to be sent no matter what protocol you use.

-phil




From matusis at yahoo.com  Tue Feb 16 15:47:07 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Tue, 16 Feb 2010 12:47:07 -0800
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <48812.58225.qm@web112519.mail.gq1.yahoo.com>
References: <7a01f6c01002160919t7d424c57sa609d22d8ef2b6a8@mail.gmail.com>
	<48812.58225.qm@web112519.mail.gq1.yahoo.com>
Message-ID: <02a301caaf49$34bd6020$9e382060$@com>

Assuming you are on Linux, you can run

#man tcp 

and take a look at the tunable parameters that control TCP protocol
timeouts:

tcp_keepalive_intvl
tcp_keepalive_probes
tcp_keepalive_time

They can be tuned via /proc filesystem.
These changes are system-wide, so you should consider the performance of
other applications on this system with those changes.

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of gary clark
> Sent: Tuesday, February 16, 2010 10:19 AM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] Pulling the ethernet cable out
> 
> Hey Alvin,
> 
> In the document link you provided the packets are being sent periodically
> every 2 hours for setTcpKeepAlive(1). I am assuming that
> the a packet is sent straight away and then waits. At the moment I dont
see
> the connection lost. The getTcpKeepAlive() is returning 1 indicating that
keep
> alive is set.
> 
> Is there a way to change the delay?
> 
> Thanks,
> Garyc
> 
> 
> 
> --- On Tue, 2/16/10, Alvin Delagon <adelagon at gmail.com> wrote:
> 
> > From: Alvin Delagon <adelagon at gmail.com>
> > Subject: Re: [Twisted-Python] Pulling the ethernet cable out
> > To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> > Date: Tuesday, February 16, 2010, 11:19 AM
> > Hello,
> > No, getTcpKeepAlive will only tell you if
> > SO_KEEPALIVE is enabled. It's setTcpKeepAlive you want.
> > If it's enabled, once the keepalive times out on a
> > half-open scenario, the connectionLost method will be
> > triggered. You can read the API docs here:
> >
> >
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connecti
> on.html#getTcpKeepAlive
> >
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connecti
> on.html#setTcpKeepAlive
> >
> > Best Regards,Alvin
> >
> > On Wed, Feb 17, 2010 at 1:06 AM,
> > gary clark <burslem2001 at yahoo.com>
> > wrote:
> >
> > I have to
> > poll at the twisted server "getTcpKeepAlive" for
> > the state of the keep alive.
> >
> >
> >
> >
> >
> > Thanks,
> >
> > Garyc
> >
> >
> >
> > --- On Tue, 2/16/10, gary clark <burslem2001 at yahoo.com>
> > wrote:
> >
> >
> >
> > > From: gary clark <burslem2001 at yahoo.com>
> >
> > > Subject: [Twisted-Python] Pulling the ethernet cable
> > out
> >
> > > To: "Twisted general
> > discussion" <twisted-python at twistedmatrix.com>
> >
> > > Date: Tuesday, February 16, 2010, 10:15 AM
> >
> > > Hello,
> >
> > >
> >
> > > I'm tested my client server model. The server
> > being a
> >
> > > twisted server.
> >
> > > I am using the class NetstringReceiver. When I close
> > down
> >
> > > the client the appropriate call to close the
> > connection is
> >
> > > made "connectionLost". However when I just
> > pull the client
> >
> > > connection cable from the network. I would expect the
> > call
> >
> > > to be made to indicate a connection is lost at the
> > twisted
> >
> > > server. I dont see this.
> >
> > >
> >
> > > I am going through a local hub and not sure what at
> > the
> >
> > > moment to think of this. I am using ssl to
> > communicate.
> >
> > >
> >
> > > If somebody could shed some light on this that would
> > be
> >
> > > great.
> >
> > >
> >
> > > Thanks,
> >
> > > Garyc
> >
> > >
> >
> > >
> >
> > >
> >
> > >
> >
> > > _______________________________________________
> >
> > > Twisted-Python mailing list
> >
> > > Twisted-Python at twistedmatrix.com
> >
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> > >
> >
> >
> >
> >
> >
> > _______________________________________________
> >
> > Twisted-Python mailing list
> >
> > Twisted-Python at twistedmatrix.com
> >
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> >
> >
> > --
> > http://www.alvinatorsplayground.blogspot.com/
> >
> >
> >
> > -----Inline Attachment Follows-----
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From burslem2001 at yahoo.com  Tue Feb 16 16:56:36 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Tue, 16 Feb 2010 13:56:36 -0800 (PST)
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <02a301caaf49$34bd6020$9e382060$@com>
Message-ID: <583281.73556.qm@web112519.mail.gq1.yahoo.com>


Much appreciated the response. setTcpKeepAlive(1) is good for calling
connectionLst, however I have to send a packet out to trigger this event.
Its too bad, just had to send periodically a small stay-alive packet.

Thanks,
Garyc



--- On Tue, 2/16/10, Alec Matusis <matusis at yahoo.com> wrote:

> From: Alec Matusis <matusis at yahoo.com>
> Subject: Re: [Twisted-Python] Pulling the ethernet cable out
> To: "'Twisted general discussion'" <twisted-python at twistedmatrix.com>
> Date: Tuesday, February 16, 2010, 2:47 PM
> Assuming you are on Linux, you can
> run
> 
> #man tcp 
> 
> and take a look at the tunable parameters that control TCP
> protocol
> timeouts:
> 
> tcp_keepalive_intvl
> tcp_keepalive_probes
> tcp_keepalive_time
> 
> They can be tuned via /proc filesystem.
> These changes are system-wide, so you should consider the
> performance of
> other applications on this system with those changes.
> 
> > -----Original Message-----
> > From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-
> > bounces at twistedmatrix.com]
> On Behalf Of gary clark
> > Sent: Tuesday, February 16, 2010 10:19 AM
> > To: Twisted general discussion
> > Subject: Re: [Twisted-Python] Pulling the ethernet
> cable out
> > 
> > Hey Alvin,
> > 
> > In the document link you provided the packets are
> being sent periodically
> > every 2 hours for setTcpKeepAlive(1). I am assuming
> that
> > the a packet is sent straight away and then waits. At
> the moment I dont
> see
> > the connection lost. The getTcpKeepAlive() is
> returning 1 indicating that
> keep
> > alive is set.
> > 
> > Is there a way to change the delay?
> > 
> > Thanks,
> > Garyc
> > 
> > 
> > 
> > --- On Tue, 2/16/10, Alvin Delagon <adelagon at gmail.com>
> wrote:
> > 
> > > From: Alvin Delagon <adelagon at gmail.com>
> > > Subject: Re: [Twisted-Python] Pulling the
> ethernet cable out
> > > To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> > > Date: Tuesday, February 16, 2010, 11:19 AM
> > > Hello,
> > > No, getTcpKeepAlive will only tell you if
> > > SO_KEEPALIVE is enabled. It's setTcpKeepAlive you
> want.
> > > If it's enabled, once the keepalive times out on
> a
> > > half-open scenario, the connectionLost method
> will be
> > > triggered. You can read the API docs here:
> > >
> > >
> > http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connecti
> > on.html#getTcpKeepAlive
> > >
> > http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connecti
> > on.html#setTcpKeepAlive
> > >
> > > Best Regards,Alvin
> > >
> > > On Wed, Feb 17, 2010 at 1:06 AM,
> > > gary clark <burslem2001 at yahoo.com>
> > > wrote:
> > >
> > > I have to
> > > poll at the twisted server "getTcpKeepAlive" for
> > > the state of the keep alive.
> > >
> > >
> > >
> > >
> > >
> > > Thanks,
> > >
> > > Garyc
> > >
> > >
> > >
> > > --- On Tue, 2/16/10, gary clark <burslem2001 at yahoo.com>
> > > wrote:
> > >
> > >
> > >
> > > > From: gary clark <burslem2001 at yahoo.com>
> > >
> > > > Subject: [Twisted-Python] Pulling the
> ethernet cable
> > > out
> > >
> > > > To: "Twisted general
> > > discussion" <twisted-python at twistedmatrix.com>
> > >
> > > > Date: Tuesday, February 16, 2010, 10:15 AM
> > >
> > > > Hello,
> > >
> > > >
> > >
> > > > I'm tested my client server model. The
> server
> > > being a
> > >
> > > > twisted server.
> > >
> > > > I am using the class NetstringReceiver. When
> I close
> > > down
> > >
> > > > the client the appropriate call to close
> the
> > > connection is
> > >
> > > > made "connectionLost". However when I just
> > > pull the client
> > >
> > > > connection cable from the network. I would
> expect the
> > > call
> > >
> > > > to be made to indicate a connection is lost
> at the
> > > twisted
> > >
> > > > server. I dont see this.
> > >
> > > >
> > >
> > > > I am going through a local hub and not sure
> what at
> > > the
> > >
> > > > moment to think of this. I am using ssl to
> > > communicate.
> > >
> > > >
> > >
> > > > If somebody could shed some light on this
> that would
> > > be
> > >
> > > > great.
> > >
> > > >
> > >
> > > > Thanks,
> > >
> > > > Garyc
> > >
> > > >
> > >
> > > >
> > >
> > > >
> > >
> > > >
> > >
> > > >
> _______________________________________________
> > >
> > > > Twisted-Python mailing list
> > >
> > > > Twisted-Python at twistedmatrix.com
> > >
> > > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > > >
> > >
> > >
> > >
> > >
> > >
> > > _______________________________________________
> > >
> > > Twisted-Python mailing list
> > >
> > > Twisted-Python at twistedmatrix.com
> > >
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > >
> > >
> > >
> > > --
> > > http://www.alvinatorsplayground.blogspot.com/
> > >
> > >
> > >
> > > -----Inline Attachment Follows-----
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From kevin.horn at gmail.com  Tue Feb 16 17:55:07 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 16 Feb 2010 16:55:07 -0600
Subject: [Twisted-Python] web page on doc...
In-Reply-To: <4B7AFDB0.8080309@noir.com>
References: <4B7AE13B.3050403@noir.com>
	<562bcc11002161059s54cd40f9w7273e7d2059410c2@mail.gmail.com>
	<4B7AFDB0.8080309@noir.com>
Message-ID: <562bcc11002161455y1a299b75q914285bd460be6e@mail.gmail.com>

On Tue, Feb 16, 2010 at 2:18 PM, K. Richard Pixley <rich at noir.com> wrote:

>  Kevin Horn wrote:
>
> xhtml is processed into html by "lore" not "trial".
>
> Doh.  Thanks.  I *knew* that.  I haven't gotten either to work yet, but
> neither is really on my radar right now either.
>
>
Well, I haven't gotten Lore to work (on Windows at least) in a looooooong
time.  The only way I can get trial to work on Windows is by using the
"Twisted Command Prompt", or some hairy PATH manipulation.


>  <http://twistedsphinx.funsize.net>Other than that, something very like
> what you have described should definitely
> be _somewhere_ on the Twisted site.
>
> (As an aside, I think a lot of things that are currently on the wiki should
> be merged
> into the documentation proper, but that's a topic for another post.)
>
> I think I'd need to hear more.
>
> I think there's a subtle distinction between describing the code, usage,
> and interfaces of the twisted library, and describing the people, policies,
> and interfaces of the twisted project.  Generally I think I'd prefer to keep
> them as clearly segregated as possible but there's certainly some grey area
> in between.
>
> --rich
>

For example, if you want to contribute to Twisted, you need to read (at the
very least):

http://twistedmatrix.com/documents/current/core/development/index.html

but you also need to read:
http://twistedmatrix.com/trac/wiki/TwistedDevelopment
http://twistedmatrix.com/trac/wiki/ReviewProcess
and maybe:
http://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs

to really get a full picture.

A lot of this is incomplete on a given page, and you need to have read the
others to really understand what's going on.
Some of that stuff should be merged into the actual development docs (like
the stuff on commit messages, for example).

Some of it certainly belongs in the wiki, but not all of it, and some of
that could be condensed into one page.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100216/7a7703f5/attachment.htm 

From vlad.shevchenko at gmail.com  Tue Feb 16 18:23:10 2010
From: vlad.shevchenko at gmail.com (Vlad Shevchenko)
Date: Wed, 17 Feb 2010 01:23:10 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
Message-ID: <572f045e1002161523r4fa25193w1328bf7a323f76a6@mail.gmail.com>

Really I need a large amount of data to be available before I can
begin calculations, Json-PRC vs. PB provide a 10+ times smaller
response time for same returning data


On Tue, Feb 16, 2010 at 10:08 PM, Phil Christensen <phil at bubblehouse.org>wrote:

> On Feb 16, 2010, at 2:46 PM, Vlad Shevchenko wrote:
> > I have developed two kind of servers:
> >    api - http server
> >    memory_db - dict-based server with some logic of putting data to dict
> and getting it back.
> >
> > Api communicate with memory_db via txJSON-RPC but response time is huge
> under high load. I also try implementation with replacement txJSON-RPC ->
> Perspective Broker with no success. PB implementation has 10+ times faster
> responses when returning data is small (dict with few keys and values like
> list of 1-5 strings). However, PM much depends on size of returning value.
> When I return a list of 600 items (each is string with length 20) response
> time incredibly growing up. Unlike PB, json-rpc implementation keeps it
> response-time near the same lever as with small return data.
> >
> > Can you suggest some protocol with a small response? Or should I look
> into development of my own?
>
> It definitely depends on your use case...
>
> PB can still be a good solution for you if you change your architecture a
> little bit. Instead of returning a 600-item list, you could return a
> pb.Referencable object that can iteratively return each row at a time.
>
> You may also want to look into using Copyable or Cacheable PB objects. More
> on that here:
>
>
> http://twistedmatrix.com/documents/current/core/howto/pb-copyable.html
>
> Of course, if you need a large amount of data to be available before you
> can begin calculations or whatnot, you're going to have to wait for it to be
> sent no matter what protocol you use.
>
> -phil
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
WBR, Vlad Shevchenko
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100217/ead197fa/attachment-0001.htm 

From vlad.shevchenko at gmail.com  Tue Feb 16 18:25:57 2010
From: vlad.shevchenko at gmail.com (Vlad Shevchenko)
Date: Wed, 17 Feb 2010 01:25:57 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
Message-ID: <572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>

here is some statistic:

low network traffic
===========================================
Json-RPC                  PB

average MIN 0.016         average MIN 0.011
average MAX 0.044         average MAX 0.029
AVG 0.027                 AVG 0.017
90% line 0.027            90% line 0.017
CLIENTS 139               CLIENTS 142
ERRORS 0                  ERRORS 0

average MIN 0.029         average MIN 0.023
average MAX 0.426         average MAX 0.159
AVG 0.151                 AVG 0.062
90% line 0.124            90% line 0.052
CLIENTS 317               CLIENTS 316
ERRORS 0                  ERRORS 0

average MIN 0.32          average MIN 0.115
average MAX 2.763         average MAX 1.521
AVG 1.064                 AVG 0.405
90% line 0.908            90% line 0.308
CLIENTS 456               CLIENTS 479
ERRORS 0                  ERRORS 0

average MIN 0.253         average MIN 0.02
average MAX 4.031         average MAX 1.486
AVG 1.123                 AVG 0.296
90% line 0.859            90% line 0.189
CLIENTS 482               CLIENTS 501
ERRORS 30                 ERRORS 0


hight network traffic  (string 7000 length)
===========================================
Json-RPC                  PB

average MIN 0.016         average MIN 1.755
average MAX 0.114         average MAX 3.517
AVG 0.045                 AVG 2.58
90% line 0.043            90% line 2.58
CLIENTS 138               CLIENTS 88
ERRORS 0                  ERRORS 0

average MIN 0.333         average MIN 4.923
average MAX 1.516         average MAX 9.019
AVG 0.732                 AVG 6.746
90% line 0.652            90% line 6.746
CLIENTS 288               CLIENTS 173
ERRORS 0                  ERRORS 0

average MIN 0.409         average MIN 9.505
average MAX 2.372         average MAX 16.546
AVG 1.221                 AVG 12.486
90% line 1.119            90% line 12.448
CLIENTS 429               CLIENTS 273
ERRORS 0                  ERRORS 0

average MIN 0.414         average MIN 14.22
average MAX 3.932         average MAX 22.986
AVG 1.639                 AVG 17.987
90% line 1.426            90% line 17.866
CLIENTS 496               CLIENTS 392
ERRORS 27                 ERRORS 0


On Tue, Feb 16, 2010 at 10:08 PM, Phil Christensen <phil at bubblehouse.org>wrote:

> On Feb 16, 2010, at 2:46 PM, Vlad Shevchenko wrote:
> > I have developed two kind of servers:
> >    api - http server
> >    memory_db - dict-based server with some logic of putting data to dict
> and getting it back.
> >
> > Api communicate with memory_db via txJSON-RPC but response time is huge
> under high load. I also try implementation with replacement txJSON-RPC ->
> Perspective Broker with no success. PB implementation has 10+ times faster
> responses when returning data is small (dict with few keys and values like
> list of 1-5 strings). However, PM much depends on size of returning value.
> When I return a list of 600 items (each is string with length 20) response
> time incredibly growing up. Unlike PB, json-rpc implementation keeps it
> response-time near the same lever as with small return data.
> >
> > Can you suggest some protocol with a small response? Or should I look
> into development of my own?
>
> It definitely depends on your use case...
>
> PB can still be a good solution for you if you change your architecture a
> little bit. Instead of returning a 600-item list, you could return a
> pb.Referencable object that can iteratively return each row at a time.
>
> You may also want to look into using Copyable or Cacheable PB objects. More
> on that here:
>
>
> http://twistedmatrix.com/documents/current/core/howto/pb-copyable.html
>
> Of course, if you need a large amount of data to be available before you
> can begin calculations or whatnot, you're going to have to wait for it to be
> sent no matter what protocol you use.
>
> -phil
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
WBR, Vlad Shevchenko
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100217/c7360663/attachment.htm 

From stephen at thorne.id.au  Tue Feb 16 18:32:09 2010
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 17 Feb 2010 09:32:09 +1000
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
	<572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>
Message-ID: <20100216233209.GA20490@thorne.id.au>

Vlad,

Have you considered using twisted.protocols.amp ?

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue


From micahel at gmail.com  Tue Feb 16 19:10:09 2010
From: micahel at gmail.com (Michael Hudson-Doyle)
Date: Wed, 17 Feb 2010 13:10:09 +1300
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <583281.73556.qm@web112519.mail.gq1.yahoo.com>
References: <02a301caaf49$34bd6020$9e382060$@com>
	<583281.73556.qm@web112519.mail.gq1.yahoo.com>
Message-ID: <aa0dfd861002161610w26662e4fn8650b6230f09a08d@mail.gmail.com>

On 17 February 2010 10:56, gary clark <burslem2001 at yahoo.com> wrote:
>
> Much appreciated the response. setTcpKeepAlive(1) is good for calling
> connectionLst, however I have to send a packet out to trigger this event.
> Its too bad, just had to send periodically a small stay-alive packet.

That's just a fact of life with TCP.  It's upside is that you can
sometimes sleep your laptop for the night and still have all your ssh
connections going when you start again the next day :-)

Cheers,
mwh


From wthie at thiengineering.ch  Tue Feb 16 19:58:59 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Tue, 16 Feb 2010 14:58:59 -1000
Subject: [Twisted-Python] web page on doc...
In-Reply-To: <562bcc11002161455y1a299b75q914285bd460be6e@mail.gmail.com>
References: <4B7AE13B.3050403@noir.com>	<562bcc11002161059s54cd40f9w7273e7d2059410c2@mail.gmail.com>	<4B7AFDB0.8080309@noir.com>
	<562bcc11002161455y1a299b75q914285bd460be6e@mail.gmail.com>
Message-ID: <4B7B3F53.3070702@thiengineering.ch>

...snip
> Well, I haven't gotten Lore to work (on Windows at least) in a looooooong
> time.  The only way I can get trial to work on Windows is by using the
> "Twisted Command Prompt", or some hairy PATH manipulation.
snip...

Not to my knowledge, I'm running trial on MSW with JScript and all 
enabled  for Twisted itself and divmod devs Nevow too.

The simple solution is a trial.bat file in the scripts section and .pth 
files for working with detached (not python installed) SVN controlled 
projects.

The PATH variable must of course have an entry pointing to the scripts 
directory for the Python install your using.

twistd.bat in the scripts directory
------------------------------------------
@echo off
c:\Python25\python.exe c:\proj\twisted\bin\twistd %1 %2 %3 %4 %5 %6 %7
------------------------------------------

twisted.pth in the Lib/site-packages directory
------------------------------------------
c:\proj\twisted
------------------------------------------

Use this pattern for trial or whatever **x shell script accordingly.

Works like a charm under MSW, see also my post on divmod-dev concerning 
using trial for nevow automated testing.

I never used lore in MSW though but will give it a try when being out of 
that pothole I'm in.

HTH, Werner




From itamar at itamarst.org  Tue Feb 16 20:08:54 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 16 Feb 2010 20:08:54 -0500
Subject: [Twisted-Python] Help Twisted at PyCon (or anywhere else)
Message-ID: <1266368934.4771.362.camel@pintsize>

Hello Twisted users,

Does Twisted help you with your job, hobby or homework? Here's how you
can help Twisted in return, especially if you're coming to PyCon:

* Talk to us!
We want to hear what features you want, what problems you are having.
But especially, we want to hear about the cool stuff you build with
Twisted, because that makes us happy (and even happier to work on
Twisted and help you.)

* Develop Twisted!
Whether it's writing documentation or fixing bugs, we always appreciate
help from new developers. Some of us will be hacking at PyCon (aka
"talking a lot and occasionally coding"), so drop by and join us. After
PyCon some developers will be staying around for a sprint, which you are
welcome to join -- some topics people have expressed interest in:

        web client
        wsgi container
        websocket
        inotify
        generic sasl
        win32 stdio/console
        sphinx docs conversion
        PyWeek / "Twisted Game"
        web2
        deferred cancellation
        endpoints
        release
        deferToProcess
        spread
        conch bug fixing
        toolchain improvements for casual contributors
        
* Get your company to donate!
Or at least, introduce us to your boss. Much of our development (coding
and bug reviews) is done by volunteers, but a large chunk is also paid
for by tax-deductible donations via our friends at the Software Freedom
Conservancy. Donating helps us fix bugs and add new features more
quickly.

* Hire (some of) us!
Jean-Paul Calderone and possibly others would be happy to consult with
your organization.

* Buy us a beer on your per diem!
Or two. We also accept other beverages.

Many of us will be at PyCon -- and no doubt we'll have an open space
session -- so please do track us down. Thanks for using Twisted!


  --Itamar Turner-Trauring, on behalf of the Twisted development team




From eero.nevalainen at indagon.com  Wed Feb 17 04:03:49 2010
From: eero.nevalainen at indagon.com (Eero Nevalainen)
Date: Wed, 17 Feb 2010 11:03:49 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
Message-ID: <4B7BB0F5.9060006@indagon.com>

Vlad Shevchenko wrote:
> I have developed two kind of servers:
>    api - http server
>    memory_db - dict-based server with some logic of putting data to dict
> and getting it back.

Sounds a bit like tuple spaces.

-- 
Eero



From adam at happy.cat  Wed Feb 17 08:46:20 2010
From: adam at happy.cat (Adam Hayward)
Date: Wed, 17 Feb 2010 14:46:20 +0100
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <4B79EB23.5020101@thiengineering.ch>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
	<1266258957.12763.228.camel@mundo>
	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>
	<4B79EB23.5020101@thiengineering.ch>
Message-ID: <a4fb4c571002170546h29dcde7fk7d55942a638dc80c@mail.gmail.com>

On 16 February 2010 01:47, Werner Thie <wthie at thiengineering.ch> wrote:

>
> Being new in the XMPP world I ask myself and now the group, how would
> you tackle the problem of a twisted based XMPP server. Is there really
> only the Java breed of servers like OpenFire, Tigase or Erlang/Lua based
> stuff like ejabberd/Prosody available or am I simply blind.
>
>
Hi there,

going the twisted route, have a look at Wokkel: http://wokkel.ik.nu/

Jack Moffet has written a simple bot example with wokkel and twisted:
http://metajack.im/2008/09/25/an-xmpp-echo-bot-with-twisted-and-wokkel/


~Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100217/cb17f90a/attachment-0001.htm 

From einar.twisted at norsk-esport.no  Wed Feb 17 13:14:37 2010
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?Einar_S=2E_Ids=F8?=)
Date: Wed, 17 Feb 2010 19:14:37 +0100
Subject: [Twisted-Python] Need help for structured application
	development
In-Reply-To: <72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
Message-ID: <e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>

Yeah, sorry about the long mail. I thought it would be a good idea to
explain my app and its requirements, and thereby get better advice on
how to structure it, than having to iterate to and from this list a
number of times. Perhaps that was the wrong strategy.

Thanks for your assistance. I've looked at t.i.utils.getProcessOutput,
and it is what I need to run my query software. Unfortunately that is
only 5% of the puzzle - my real problem is working out what kind of
top-level classes I should be using to spawn my service-checkers as
they are needed. I guess I need a factory that launches server checker
objects not as a result of a TCP/UDP connection, but as a result of
new servers being detected. This is not how I've seen factories being
used regularly, and I would love to get some input on this.

If I am not making sense at all, please let me know :)

Cheers,
Einar

On Tue, Feb 16, 2010 at 11:57 AM, Alexandre Quessy <alexandre at quessy.net> wrote:
> Hello Einar,
> This is a quite long email.
> What I can tell you, is that querying many command line applications
> with t.i.utils.getProcessOutput and gathering them in a DeferredList
> worked for me. Example: the list_cameras in
> http://svn.sat.qc.ca/trac/miville/browser/trunk/py/scenic/devices/cameras.py
>
> Good luck !
>
> a
>
>
> 2010/2/15 Einar S. Ids? <einar.twisted at norsk-esport.no>:
>> Hi,
>>
>> I am planning to develop an application that will query a number of
>> services at given intervals, and Twisted seems like a very nice
>> platform to do so. However, because of little previous experience with
>> Twisted, especially with building proper applications, using
>> interfaces and using plugins, I could really need some pointers to get
>> me started.
>>
>> In the following I will try to explain in broad terms what the
>> application will do, and humbly ask for input on how I may structure
>> it using factories, protocols etc.:
>>
>> 1. A number of more-or-less similar server applications (5-10) have a
>> number of concurrent instances/servers (1-30) each.
>> 2. I need to acquire the status of each instance at given intervals.
>> These will typically range from every 20 seconds to every 3 minutes,
>> and depend on the which service the instance is based on.
>> 3. A list of the server instances shall be acquired via an XML-query
>> every few minutes to pick up on new or removed instances.
>> 4. An executable already exists which can be used to status-poll
>> almost all services using different parameters. I will be calling it
>> from my application to do the polling instead of recreating it in
>> Python.
>> 5. I need to be able to create my own polling-protocol for at least
>> one of the service types which is incompatible with the executable.
>> 6. Some services can not only be polled at intervals, but additionally
>> stream information that I am interested in listening to.
>> 7. At a later point in time, I wish to be able to communicate with
>> IRC, MSN and other services/protocols using the queried and streamed
>> data.
>>
>> My initial general thought is the following:
>> 1. Design a class for each server application, where all classes
>> implement the same interface. The class defines how to deal with
>> server instances of its corresponding server application type. Classes
>> are created as Twisted-plugins.
>> 2. For each new server instance that is discovered, create an object
>> which contains a timer and polls the server at specific intervals,
>> writing the result to a globally accessible data structure.
>> 3. For server instances that stream data continuously in addition to
>> being polled at regular intervals, create a separate object which
>> listens to the server.
>>
>> I believe I should somehow have a global data structure which contains
>> references to all the server instance objects, regardless of type, and
>> allows them to store data. This is sort of like the factory does for
>> protocols, except in my case I don't think I can use a regular factory
>> since I need both clients (to poll at intervals) and servers (to
>> listen to streaming data). I suppose I could use a ClientFactory for
>> the pollers and a Factory for the stream-listeners, and let them have
>> a common data-store? But is it possible to use a single ClientFactory
>> to spawn all poller-objects regardless of server type? Or do I need
>> one ClientFactory for each server type? Do I perhaps need one
>> ClientFactory per server instance? Or should I just ignore factories
>> all together since it is primarily the timer and asyncronicity of
>> Twisted I need?
>>
>> I am quite certain there is a correct twistified way of handling this
>> sort of problem. I am just not sure what it is, and would sincerely
>> welcome all feedback on how this should be done. Feel free to point to
>> examples of applications that are similar to what I sketched above,
>> and tell me to study the code :)
>>
>> Cheers,
>> Einar
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> Alexandre Quessy
> http://alexandre.quessy.net/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From glyph at twistedmatrix.com  Thu Feb 18 03:04:38 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 18 Feb 2010 03:04:38 -0500
Subject: [Twisted-Python] Need help for structured application
	development
In-Reply-To: <e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
	<e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
Message-ID: <4818088B-75C0-47E7-AAE7-DB05D00951B0@twistedmatrix.com>


On Feb 17, 2010, at 1:14 PM, Einar S. Ids? wrote:

> Yeah, sorry about the long mail. I thought it would be a good idea to
> explain my app and its requirements, and thereby get better advice on
> how to structure it, than having to iterate to and from this list a
> number of times. Perhaps that was the wrong strategy.

It is definitely the right strategy :).  If you provide these requirements, then it's much easier to just provide an answer, rather than having to ask you for more about what you're really trying to do.  Please feel free to include lots of detail in your next question too!

From tuxattack14 at gmail.com  Thu Feb 18 04:30:21 2010
From: tuxattack14 at gmail.com (Tux Attack)
Date: Thu, 18 Feb 2010 15:00:21 +0530
Subject: [Twisted-Python] Running php script on twisted server
Message-ID: <bed370f31002180130j432c222cs2147ecb5d5cdfce5@mail.gmail.com>

I am trying to run a php script on a webserver written in twisted.For that i
am using twcgi module.
Here is my code.
This is code for webServer.py ->


from twisted.internet import reactor
from twisted.web import static,script,twcgi,server
from twisted.python.log import startLogging
import sys

class PHPScript(twcgi.FilteredScript):

filter='/media/DATA/Documents/project-docs/twisted/twisted-programs/testPHP/twisted-php.py'

root=static.File('html_files')
root.indexNames=['index.php']
root.processors={'.php':twcgi.PHPScript}
site=server.Site(root)
reactor.listenTCP(8000,site)
startLogging(sys.stdout)
reactor.run()


And here is another file used in program twisted-php.py ->

#!/usr/bin/env python
> import os, sys, commands
> print "Content-type: text/html\n\n";
> command = 'php ' + sys.argv.pop(1)
> data = commands.getstatusoutput(command)
> print data[1]
>


Now my problem is if i try to acess some url like
http://localhost:8000/list.php then everything works fine but if i enter url
with parameters like http://localhost:8000/list.php?file=sample.txt then
twisted is not passing parameters after '?' to twisted-php.py
I verified this in twisted-php.py
Is there any way i can use such php scripts with parameters in twisted?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100218/87373559/attachment.htm 

From johann.borck at densedata.com  Thu Feb 18 05:36:01 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Thu, 18 Feb 2010 10:36:01 +0000
Subject: [Twisted-Python] Need help for structured
	application	development
In-Reply-To: <e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
	<e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
Message-ID: <4B7D1811.1070204@densedata.com>

Einar S. Ids? wrote:
> [...]  I guess I need a factory that launches server checker
> objects not as a result of a TCP/UDP connection, but as a result of
> new servers being detected.
How does this detection work? Are those servers based on twisted? Also, 
do you control them (start/stop/configuration), do you have access to 
the machines they're on, or are you detecting them over network only?

Johann


From einar.twisted at norsk-esport.no  Thu Feb 18 17:41:56 2010
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?Einar_S=2E_Ids=F8?=)
Date: Thu, 18 Feb 2010 23:41:56 +0100
Subject: [Twisted-Python] Need help for structured application
	development
In-Reply-To: <4B7D1811.1070204@densedata.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
	<e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
	<4B7D1811.1070204@densedata.com>
Message-ID: <e97d8e3b1002181441s1b07fc4dsbc6e151f41c0d0aa@mail.gmail.com>

On Thu, Feb 18, 2010 at 11:36 AM, Johann Borck
<johann.borck at densedata.com> wrote:
> Einar S. Ids? wrote:
>> [...] ?I guess I need a factory that launches server checker
>> objects not as a result of a TCP/UDP connection, but as a result of
>> new servers being detected.
> How does this detection work? Are those servers based on twisted? Also,
> do you control them (start/stop/configuration), do you have access to
> the machines they're on, or are you detecting them over network only?

Johann: Thanks for your response. I do control these services myself,
and they run on our own hosts, but they are created and spawned via an
external web interface which also has a Soap API. I do not plan on
starting/stopping them via this application I'm developing. I just
need to get the list of servers and start polling them. I get the list
by calling the Soap webservice. It simply outputs a list of servers,
and it is my job to query each and every one at specific intervals for
status.

I was thinking I would have the Soap-query run as a timed function
every few minutes, and compare the new list with the old to work out
any new/removed servers. Whenever a new server is identified, I will
spawn a new object to deal with it, including, but not limited to,
polling at given intervals. What kind of object should this be? A
ClientFactory? Another kind of object that is already defined
somewhere in Twisted? A completely custom object, built from scratch?
I am leaning towards ClientFactory, but I am definitely not certain.

Glyph: Thanks for letting me know I'm at least asking correctly :)

Cheers,
Einar


From johann.borck at densedata.com  Thu Feb 18 23:45:28 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 19 Feb 2010 04:45:28 +0000
Subject: [Twisted-Python] Need help for structured
	application	development
In-Reply-To: <e97d8e3b1002181441s1b07fc4dsbc6e151f41c0d0aa@mail.gmail.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>	<e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>	<4B7D1811.1070204@densedata.com>
	<e97d8e3b1002181441s1b07fc4dsbc6e151f41c0d0aa@mail.gmail.com>
Message-ID: <4B7E1768.8030608@densedata.com>

Einar S. Ids? wrote:
> On Thu, Feb 18, 2010 at 11:36 AM, Johann Borck
> <johann.borck at densedata.com> wrote:
>   
>> Einar S. Ids? wrote:
>>     
>>> [...]  I guess I need a factory that launches server checker
>>> objects not as a result of a TCP/UDP connection, but as a result of
>>> new servers being detected.
>>>       
>> How does this detection work? Are those servers based on twisted? Also,
>> do you control them (start/stop/configuration), do you have access to
>> the machines they're on, or are you detecting them over network only?
>>     
>
> Johann: Thanks for your response. I do control these services myself,
> and they run on our own hosts, but they are created and spawned via an
> external web interface which also has a Soap API. I do not plan on
> starting/stopping them via this application I'm developing. I just
> need to get the list of servers and start polling them. I get the list
> by calling the Soap webservice. It simply outputs a list of servers,
> and it is my job to query each and every one at specific intervals for
> status.
>
> I was thinking I would have the Soap-query run as a timed function
> every few minutes, and compare the new list with the old to work out
> any new/removed servers. Whenever a new server is identified, I will
> spawn a new object to deal with it, including, but not limited to,
> polling at given intervals. What kind of object should this be? A
> ClientFactory? Another kind of object that is already defined
> somewhere in Twisted? A completely custom object, built from scratch?
> I am leaning towards ClientFactory, but I am definitely not certain.
>
>   
I see. So if I get these requirements right you have 5-10 services with 
1-30 instances of each, with following properties relevant to the task 
at hand:

1. those pollable by your existing program.
2. those incompatible with your existing program.
3. those that do not stream additional data.
4. those that do stream additional data.

since sets  (1 and 2) and (3 and 4) are distinct, the combinations 
(1,3),(1,4),(2,3),(2,4) are possible.

(1,3) the easy one, obviously you just need an object that polls the 
service using your program in intervals specific to the service.
(1,4) Question: will the data you're interested in be collected by your 
existing program or by twisted? In the former case, it's basically the 
same as (1,3), in the latter you'll have to implement a protocol.
(2,3) for these you'll need to implement a protocol class.
(2,4) here you'll have to implement one or two protocols, depending on 
how the service is implemented.

Is the above about correct? I think it would be a good idea to have an 
object OB that keeps references to all objects that gather data from the 
services, grouped by the type of service they're responsible for 
(defaultdict(list or dict) comes to mind). And then you'll probably 
either want factories that take care of handing newly created protocol 
instances over to OB or some instances (one or two per service in sets 
(2,3,4) ) of a multipurpose factory that can be initialized with the 
respective protocol and the information how to pass the created protocol 
over to OB, maybe  just a simple method that is able to distinguish the 
protocols by the interfaces they implement.

One pitfall might be your polling program in case you're using 
t.i.u.getProcessOutput. It (t.i.u...) provides an asynchronous 
interface, so the worst that can happen is a stray process that doesn't 
return, but you still might want to consider implementing a 
ProcessProtocol 
(http://twistedmatrix.com/documents/current/core/howto/process.html) 
with a reasonable timeout, to be able to kill the spawned process in 
case it doesn't terminate. Thinking about it, it's the better solution 
anyway, because process protocols are just another type of protocol in 
twisted, and can be integrated consistently with the rest of your app.

Another utility you might want is t.i.task.LoopingCall, for obvious 
reasons. Given your requirements something along these lines would be my 
approach, although I'd probably reimplement the polling thingy in 
twisted if it's not too complex :)

hope that makes sense,
Johann



From ssoni at nextdigital.com  Thu Feb 18 23:17:07 2010
From: ssoni at nextdigital.com (Sury Soni)
Date: Fri, 19 Feb 2010 15:17:07 +1100
Subject: [Twisted-Python] Nevow question
Message-ID: <1BE49492956ECA42BEB0D78F67665E1F01395DCE@exchange.wdg>

Hi,

 

How do we disable traceback on Nevow production site?

 

Right now, by default, any nevow site will print full length of
traceback on web browser if there is some exception within the
application.

 

I have gone through the ticket http://twistedmatrix.com/trac/ticket/135
but could not find quick place to disable/enable the same in my nevow
application.

 

Sury Prakash Soni



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100219/9b7587ad/attachment.htm 

From marco.giusti at gmail.com  Fri Feb 19 06:11:37 2010
From: marco.giusti at gmail.com (Marco Giusti)
Date: Fri, 19 Feb 2010 12:11:37 +0100
Subject: [Twisted-Python] Nevow question
In-Reply-To: <1BE49492956ECA42BEB0D78F67665E1F01395DCE@exchange.wdg>
References: <1BE49492956ECA42BEB0D78F67665E1F01395DCE@exchange.wdg>
Message-ID: <20100219111137.GE16399@murdoc>

On Fri, Feb 19, 2010 at 03:17:07PM +1100, Sury Soni wrote:
> Hi,
> 
> How do we disable traceback on Nevow production site?
> 
> Right now, by default, any nevow site will print full length of
> traceback on web browser if there is some exception within the
> application.
[cut]

something like this?

http://divmod.org/trac/wiki/DivmodNevow/ErrorHandling


-- 
Hofstadter's Law:
It always takes longer than you expect, even when you take into account
Hofstadter's Law.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100219/53a90f0b/attachment.pgp 

From darren at ontrenet.com  Fri Feb 19 06:33:22 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Fri, 19 Feb 2010 06:33:22 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
Message-ID: <1266579203.2532.124.camel@kratos>

Hi again,
   Ok, so now it seems the Int32StringReceiver does not receive
"stringReceived" events if the sent bytes
exceed a certain amount. If I send from the client, say 5000 bytes. It
receives it.

But when i send 7376896 bytes at a time, the client indicates it wrote
the bytes, but there is not one
stringReceived callback on the server side of the protocol. No error or
exception. nothing. 
Is this normal behavior?

thanks,
Darren

On Sat, 2010-02-13 at 20:22 -0500, David Bolen wrote:

> Darren Govoni <darren at ontrenet.com> writes:
> 
> > I spoke too fast. But pardon my noobiness.
> >
> > Ok, so I am using a simple protocol that is listening on a TCP port.
> >
> > One the client side, I write 4096 bytes using
> > self.transport.write(bytes)
> >
> > on dataReceived side, I get only 1448. 
> 
> Quite possible, and even likely with a chunk of 4096, given likely
> network latencies and the physical packet sizes at each network hop
> along the way.
> 
> However, dataReceived will eventually be called additional times until
> all of the 4096 bytes that was transmitted and received over the
> socket connection have been handed off to your protocol.  That's just
> the nature of a stream protocol - it's a constant stream of data being
> fed by one end and drained on the other, without any natural
> boundaries or structures within (other than, I suppose, the boundary
> of an octet since you can't receive a partial octet).
> 
> The alternative is to use a datagram protocol like UDP, but then you
> have all the negatives of no guaranteed delivery, out of order
> delivery, completely impossible delivery (when trying a datagram
> larger than the UDP limit), etc...
> 
> Far easier to just handle the TCP stream properly.
> 
> > Now, what I "want" to happen is when I issue a write of a known
> > number of bytes. I "want" those bytes to arrive in total because
> > they represent a pickled object.  The server has no idea if the
> > bytes are split and scattered (again, I want the control protocol to
> > take affect).
> 
> I suspect it may just be a difference in phrasing, but note that I
> consider "arrive in total" to be different from "arrive in the same
> number of I/O operations".  TCP guarantees the former (sans dropped
> connections) but not the latter.  It's a trade-off that you make in
> order to get the other benefits of guaranteed delivery with TCP,
> regardless of network disruptions, latency, etc...
> 
> You're fine as long as you just accept up front that you can't make
> any assumptions as to how the data will arrive at the receiving end.
> So combine the data in whatever sizes it is received (and any number
> of received chunks) until you have it all.  You can then de-pickle it
> or do anything else with it.  As a comparison, that's really all PB is
> doing, although it's banana-encoding the object on the wire rather
> than pickling.
> 
> Depending on the client/server interaction, you may also have the
> opposite problem - the final chunk of data received may cover more
> than one client transmission, and you'll have to split it up
> appropriately.
> 
> That's why if you will be transmitting multiple sets of data over a
> single connection, you'll want some structure (unique boundary codes,
> encoded length information, parseable data like XML, etc...) in the wire
> protocol so your server knows when it is done.
> 
> > 1) Am I doing something wrong here?
> 
> Not so much wrong, as perhaps a little misguided in terms of trying to
> have a stream protocol work less as a stream than it does.
> 
> I suspect you may also be over-estimating a little the complexity of
> handling this aspect of TCP in your own code.
> 
> > 2) Can I force twisted to send ALL the bytes I issue in the write
> > without re-thinking TCP or forcing me to re-implement TCP?
> 
> Again, distinguish between "send ALL the bytes" which *does* in fact
> happen, versus "receive bytes in identically sized chunks" which will
> not happen.  Though I seriously doubt that your demands are such that
> it requires "re-thinking" or "re-implement[ing]" TCP.
> 
> Much easier to stick with the TCP base (loads of benefits), and just
> encode enough structure into your stream to permit the server to
> identify the boundaries of the requests.  Then, code the server to
> look for such boundaries while accepting data in any size chunks, and
> you're done.  It's pretty much what every other TCP protocol that has
> structure to its data does, whether that's length counted, flag bytes,
> specific textual content (such as the final empty line in an HTTP
> request), etc...
> 
> As has been posted in another response, you may find some of the
> existing protocols in twisted.protocol.basic to be helpful for this.
> The older posting of mine that you referenced used a subclass of
> LineReceiver to encode the length in ASCII as part of an initial
> header, for example, though it closed the connection when done.  And,
> for example, Netstring or the Int##String classes takes care of the
> counting on your behalf, and even give subclasses a nice single entry
> point (stringReceived) to use instead of dataReceived, so your server
> need not think about the aggregation or splitting of chunks.
> 
> If nothing else, reading the source to one of those receiver classes
> might help provide a concrete example of the aggregation (or
> splitting) of the stream data that I mention above.
> 
> -- David
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100219/dd2d5f0f/attachment-0001.htm 

From exarkun at twistedmatrix.com  Fri Feb 19 08:12:56 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 19 Feb 2010 13:12:56 -0000
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1266579203.2532.124.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
	<1266579203.2532.124.camel@kratos>
Message-ID: <20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>

On 11:33 am, darren at ontrenet.com wrote:
>Hi again,
>   Ok, so now it seems the Int32StringReceiver does not receive
>"stringReceived" events if the sent bytes
>exceed a certain amount. If I send from the client, say 5000 bytes. It
>receives it.
>
>But when i send 7376896 bytes at a time, the client indicates it wrote
>the bytes, but there is not one
>stringReceived callback on the server side of the protocol. No error or
>exception. nothing.
>Is this normal behavior?

Yes.  You've hit the arbitrary additional limit on the maximum length of 
a single string that Int32StringReceiver will accept.  When this limit 
is exceeded, the connection is dropped.  If you really want to accept 
7MB strings from your peer, set the MAX_LENGTH attribute of your 
Int32StringReceiver subclass (or instance) to large enough value.  You 
can also get notification when this limit is exceeded by overriding the 
lengthLimitExceeded method (the default implementation of which is what 
drops the connection).

Jean-Paul


From darren at ontrenet.com  Fri Feb 19 13:11:37 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Fri, 19 Feb 2010 13:11:37 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
	<1266579203.2532.124.camel@kratos>
	<20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>
Message-ID: <1266603097.2532.134.camel@kratos>

Jean-Paul,
   Thank you for this tip! I will try it. Much appreciated.

Darren

On Fri, 2010-02-19 at 13:12 +0000, exarkun at twistedmatrix.com wrote:

> On 11:33 am, darren at ontrenet.com wrote:
> >Hi again,
> >   Ok, so now it seems the Int32StringReceiver does not receive
> >"stringReceived" events if the sent bytes
> >exceed a certain amount. If I send from the client, say 5000 bytes. It
> >receives it.
> >
> >But when i send 7376896 bytes at a time, the client indicates it wrote
> >the bytes, but there is not one
> >stringReceived callback on the server side of the protocol. No error or
> >exception. nothing.
> >Is this normal behavior?
> 
> Yes.  You've hit the arbitrary additional limit on the maximum length of 
> a single string that Int32StringReceiver will accept.  When this limit 
> is exceeded, the connection is dropped.  If you really want to accept 
> 7MB strings from your peer, set the MAX_LENGTH attribute of your 
> Int32StringReceiver subclass (or instance) to large enough value.  You 
> can also get notification when this limit is exceeded by overriding the 
> lengthLimitExceeded method (the default implementation of which is what 
> drops the connection).
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100219/fe88f17d/attachment.htm 

From darren at ontrenet.com  Fri Feb 19 13:38:37 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Fri, 19 Feb 2010 13:38:37 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
	<1266579203.2532.124.camel@kratos>
	<20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>
Message-ID: <1266604717.2532.142.camel@kratos>

Hmmmm. I set self.MAX_LENGTH in my subclass
(self.MAX_LENGTH=73768960000) but still no callback happens to
strongReceived. Also, the connection is not lost.

Its like it doesn't notice it on the server, while the client writes
successfully. Still investigating.



On Fri, 2010-02-19 at 13:12 +0000, exarkun at twistedmatrix.com wrote:

> On 11:33 am, darren at ontrenet.com wrote:
> >Hi again,
> >   Ok, so now it seems the Int32StringReceiver does not receive
> >"stringReceived" events if the sent bytes
> >exceed a certain amount. If I send from the client, say 5000 bytes. It
> >receives it.
> >
> >But when i send 7376896 bytes at a time, the client indicates it wrote
> >the bytes, but there is not one
> >stringReceived callback on the server side of the protocol. No error or
> >exception. nothing.
> >Is this normal behavior?
> 
> Yes.  You've hit the arbitrary additional limit on the maximum length of 
> a single string that Int32StringReceiver will accept.  When this limit 
> is exceeded, the connection is dropped.  If you really want to accept 
> 7MB strings from your peer, set the MAX_LENGTH attribute of your 
> Int32StringReceiver subclass (or instance) to large enough value.  You 
> can also get notification when this limit is exceeded by overriding the 
> lengthLimitExceeded method (the default implementation of which is what 
> drops the connection).
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100219/c52f424f/attachment.htm 

From darren at ontrenet.com  Fri Feb 19 13:42:14 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Fri, 19 Feb 2010 13:42:14 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1266604717.2532.142.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
	<1266579203.2532.124.camel@kratos>
	<20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>
	<1266604717.2532.142.camel@kratos>
Message-ID: <1266604934.2532.144.camel@kratos>

Ignore me. There was a lag, but it worked. Thanks.

On Fri, 2010-02-19 at 13:38 -0500, Darren Govoni wrote:

> Hmmmm. I set self.MAX_LENGTH in my subclass
> (self.MAX_LENGTH=73768960000) but still no callback happens to
> strongReceived. Also, the connection is not lost.
> 
> Its like it doesn't notice it on the server, while the client writes
> successfully. Still investigating.
> 
> 
> 
> On Fri, 2010-02-19 at 13:12 +0000, exarkun at twistedmatrix.com wrote: 
> 
> > On 11:33 am, darren at ontrenet.com wrote:
> > >Hi again,
> > >   Ok, so now it seems the Int32StringReceiver does not receive
> > >"stringReceived" events if the sent bytes
> > >exceed a certain amount. If I send from the client, say 5000 bytes. It
> > >receives it.
> > >
> > >But when i send 7376896 bytes at a time, the client indicates it wrote
> > >the bytes, but there is not one
> > >stringReceived callback on the server side of the protocol. No error or
> > >exception. nothing.
> > >Is this normal behavior?
> > 
> > Yes.  You've hit the arbitrary additional limit on the maximum length of 
> > a single string that Int32StringReceiver will accept.  When this limit 
> > is exceeded, the connection is dropped.  If you really want to accept 
> > 7MB strings from your peer, set the MAX_LENGTH attribute of your 
> > Int32StringReceiver subclass (or instance) to large enough value.  You 
> > can also get notification when this limit is exceeded by overriding the 
> > lengthLimitExceeded method (the default implementation of which is what 
> > drops the connection).
> > 
> > Jean-Paul
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100219/17edb71a/attachment.htm 

From matusis at yahoo.com  Fri Feb 19 17:52:34 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Fri, 19 Feb 2010 14:52:34 -0800
Subject: [Twisted-Python] debugging a memory leak
Message-ID: <01a701cab1b6$3a039d00$ae0ad700$@com>

I modified a tolerably leaking (about 40MB/day) Twisted server: when the new
code was pushed, the memory leak  became catastrophic (about 100MB/hr).
We could tolerate 40MB/day, but the new code needs to be debugged.
First, I reverted to the old version, that is leaking 40MB/day (The leak
rate is actually proportional to the number of new connections per second,
(which correlates with the CPU utilization of the process): if CPU as
measured by $top jumps to >90%, the leak can accelerate to 50MB/hr)
I took two steps to debug the leak:

1) Using guppy/heapy via manhole:

>>> hp = hpy()
>>> h = hp.heap()
>>> h
Partition of a set of 1157084 objects. Total size = 140911144 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0 785798  68 48463680  34  48463680  34 str
     1   7357   1 24660664  18  73124344  52 dict of service.TagSession
     2  11735   1 12298280   9  85422624  61 dict of
twisted.internet.base.DelayedCall
     3   7377   1  7731096   5  93153720  66 dict of
twisted.internet.tcp.Server
     4   7375   1  7729000   5 100882720  72 dict of protocols.TagProtocol
     5  30925   3  7174600   5 108057320  77 __builtin__.set
     6   9193   1  6373336   5 114430656  81 dict (no owner)
     7  15557   1  3396904   2 117827560  84 list
     8  44833   4  3227976   2 121055536  86 types.BuiltinFunctionType
     9  38142   3  3051360   2 124106896  88 types.MethodType
<328 more rows. Type e.g. '_.more' to view.>

Note that the total size of all objects is 140911144 bytes 
The 1st, 3d and 4th items in this list show the actual number of connected
clients. I wait for about 48 hrs, and then execute the same command, and I
see approximately the same Total size, of 130MB.
So the total size that Heapy sees via the manhole is stable, fluctuating
around 140MB. 

The problem is that the total RSS size of the process visible by the OS is
much larger, it is  871680KB = 851MB:
$ps -o pid,vsz,rss,sz,size -p 11236
  PID     VSZ           RSS       SZ           SZ
11236 1303180 871680 325795 1174388

It is this total RSS size that keeps leaking at 40MB per day. 

As far as I understand, this means that this is not the problem with purely
Python code, since Heapy shows that the total size of all Python objects is
more or less constant.
Is this a correct assumption?

2) So now I turn to valgrind. I am no expert in using valgrind, so what I
did was based only on general logic/rough guesses. 
Since I cannot run this under valgrind on a production machine due to
performance reasons, I recompile python on the staging machine:
./configure --enable-shared --without-pymalloc
--prefix=/nail/encap/python-2.6.4-valgrind
I then follow the instructions in
http://svn.python.org/projects/python/trunk/Misc/README.valgrind
Then I run twistd process like this:

valgrind  --tool=memcheck
--suppressions=/nail/sys/src/Python-2.6.4/Misc/valgrind-python.supp
--leak-check=full --log-file=/tmp/valgrind.log  /usr/local/bin/twistd
--no_save --reactor=epoll --pidfile=logs/tagserv.pid
--logfile=logs/tagserv.log --python=tagserv.py

The memory for the process shown by the OS is now 5x normal, and the
performance is about 5x worse, since it's running inside valgrind's
synthetic CPU.
Because this is done on the staging box where I cannot accurately reproduce
the real load, the memory leaks from simulated load seen by $ps -o rss are
pretty small, about 1 to 10MB.
Still, I am interested in finding out what they are.

Now I encounter the problems with my understanding of how to use valgrind.
This may not be the appropriate list for this, but perhaps someone could
recognize the problem.
When I start the server, about 240 lines is written to valgrind log file,
--log-file=/tmp/valgrind.log  
When I shut it down, it adds another 100 lines.
No matter what I do in between, it always results in the log file with
exactly 343 lines.
I can have server runs with a leak of 1MB, or with 10MB, but in the end, I
get pretty much the same log file. Moreover, when look for all lost memory
reports:
$grep lost valgrind.log.1  
 17,352 bytes in 31 blocks are possibly lost in loss record 49 of 62
 203,312 bytes in 478 blocks are possibly lost in loss record 57 of 62
    definitely lost: 0 bytes in 0 blocks.
      possibly lost: 220,664 bytes in 509 blocks.
 64 bytes in 2 blocks are definitely lost in loss record 12 of 63
 17,352 bytes in 31 blocks are possibly lost in loss record 50 of 63
 203,824 bytes in 479 blocks are possibly lost in loss record 58 of 63
    definitely lost: 64 bytes in 2 blocks.
      possibly lost: 221,176 bytes in 510 blocks.
 47 bytes in 1 blocks are definitely lost in loss record 8 of 63
 128 bytes in 4 blocks are definitely lost in loss record 16 of 63
 584 (104 direct, 480 indirect) bytes in 2 blocks are definitely lost in
loss record 26 of 63
 1,008 bytes in 6 blocks are definitely lost in loss record 31 of 63
 22,296 bytes in 41 blocks are possibly lost in loss record 50 of 63
 183,368 bytes in 381 blocks are possibly lost in loss record 59 of 63
    definitely lost: 1,287 bytes in 13 blocks.
    indirectly lost: 480 bytes in 20 blocks.
      possibly lost: 205,664 bytes in 422 blocks.

If I add up all those numbers, I get less than 1MB. How do I track down the
10MB leak?

Are there any alternative strategies in finding this leak?





From wthie at thiengineering.ch  Fri Feb 19 19:09:47 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Sat, 20 Feb 2010 01:09:47 +0100
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <01a701cab1b6$3a039d00$ae0ad700$@com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
Message-ID: <4B7F284B.70801@thiengineering.ch>

Hi Alec

...and they promised you that with a gc'ed language there will never be 
a memory problem again, you just plain forget about it.

I was stuck in the same position as you and after lots of probing the 
following attempt helped a lot to correct what was later proofed to be 
overly optimistic coding by holding on to objects for 
performance/practical reasons in other objects. Producing non collect 
able cycles in twisted is probably as easy as to forget about memory 
when you have Alzheimer.

Proofing and working on the problem was only possible on the production 
machine under real load situations. I went ahead and created a manhole 
service on the production server, allowing me to peek at the python 
object space without disturbing it too much. What I used as a tool was 
the code you find later on included.

After cleaning all the self produced cycles out our servers processes 
stabilized at roughly 280 to 320 MB per process and are now running 
stable for months with more than 20k logins per day and a usual time of 
connect per user on the average of 25 minutes playing games delivered by 
nevow/athena LivePages.

As I said before, all cycles I found in our SW were introduced by 
patterns like

def beforeRender(self, ctx):
     self.session = inevow.ISession(ctx)

The included code helps to identify the amount of objects being around. 
Although it's a primitive tool it shines the light where its needed and 
if you see certain object counts run away then you have at least 
identified the surrounding where the non collect able cycles are built.

Why didn't I use heapy/guppy and found out that way? I wasn't able to 
find the evidence for what I was suspecting with all the tools I tried 
(and boy I tried for WEEKS). Avid users of heapy will most probably 
disagree and tell me it would have been easy. But in a situation as this 
everything that works to move you out of that pothole you're in is the 
right thing to do.

HTH, Werner

exc = [
   "function",
   "type",
   "list",
   "dict",
   "tuple",
   "wrapper_descriptor",
   "module",
   "method_descriptor",
   "member_descriptor",
   "instancemethod",
   "builtin_function_or_method",
   "frame",
   "classmethod",
   "classmethod_descriptor",
   "_Environ",
   "MemoryError",
   "_Printer",
   "_Helper",
   "getset_descriptor",
   "weakreaf"
]

inc = [
   'myFirstSuspect',
   'mySecondSuspect'
]

prev = {}

def dumpObjects(delta=True, limit=0, include=inc, exclude=[]):
   global prev
   if include != [] and exclude != []:
     print 'cannot use include and exclude at the same time'
     return
   print 'working with:'
   print '   delta: ', delta
   print '   limit: ', limit
   print ' include: ', include
   print ' exclude: ', exclude
   objects = {}
   gc.collect()
   oo = gc.get_objects()
   for o in oo:
     if getattr(o, "__class__", None):
       name = o.__class__.__name__
       if ((exclude == [] and include == [])       or \
           (exclude != [] and name not in exclude) or \
           (include != [] and name in include)):
         objects[name] = objects.get(name, 0) + 1
##    if more:
##      print o
   pk = prev.keys()
   pk.sort()
   names = objects.keys()
   names.sort()
   for name in names:
     if limit == 0 or objects[name] > limit:
       if not prev.has_key(name):
         prev[name] = objects[name]
       dt = objects[name] - prev[name]
       if delta or dt != 0:
         print '%0.6d -- %0.6d -- ' % (dt, objects[name]),  name
       prev[name] = objects[name]

def getObjects(oname):
   """
   gets an object list with all the named objects out of the sea of
   gc'ed objects
   """
   olist = []
   objects = {}
   gc.collect()
   oo = gc.get_objects()
   for o in oo:
     if getattr(o, "__class__", None):
       name = o.__class__.__name__
       if (name == oname):
         olist.append(o)
   return olist

dumpObject = dumpobj.dumpObj

Alec Matusis wrote:
> I modified a tolerably leaking (about 40MB/day) Twisted server: when the new
> code was pushed, the memory leak  became catastrophic (about 100MB/hr).
> We could tolerate 40MB/day, but the new code needs to be debugged.
> First, I reverted to the old version, that is leaking 40MB/day (The leak
> rate is actually proportional to the number of new connections per second,
> (which correlates with the CPU utilization of the process): if CPU as
> measured by $top jumps to >90%, the leak can accelerate to 50MB/hr)
> I took two steps to debug the leak:
> 
> 1) Using guppy/heapy via manhole:
> 
>>>> hp = hpy()
>>>> h = hp.heap()
>>>> h
> Partition of a set of 1157084 objects. Total size = 140911144 bytes.
>  Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
>      0 785798  68 48463680  34  48463680  34 str
>      1   7357   1 24660664  18  73124344  52 dict of service.TagSession
>      2  11735   1 12298280   9  85422624  61 dict of
> twisted.internet.base.DelayedCall
>      3   7377   1  7731096   5  93153720  66 dict of
> twisted.internet.tcp.Server
>      4   7375   1  7729000   5 100882720  72 dict of protocols.TagProtocol
>      5  30925   3  7174600   5 108057320  77 __builtin__.set
>      6   9193   1  6373336   5 114430656  81 dict (no owner)
>      7  15557   1  3396904   2 117827560  84 list
>      8  44833   4  3227976   2 121055536  86 types.BuiltinFunctionType
>      9  38142   3  3051360   2 124106896  88 types.MethodType
> <328 more rows. Type e.g. '_.more' to view.>
> 
> Note that the total size of all objects is 140911144 bytes 
> The 1st, 3d and 4th items in this list show the actual number of connected
> clients. I wait for about 48 hrs, and then execute the same command, and I
> see approximately the same Total size, of 130MB.
> So the total size that Heapy sees via the manhole is stable, fluctuating
> around 140MB. 
> 
> The problem is that the total RSS size of the process visible by the OS is
> much larger, it is  871680KB = 851MB:
> $ps -o pid,vsz,rss,sz,size -p 11236
>   PID     VSZ           RSS       SZ           SZ
> 11236 1303180 871680 325795 1174388
> 
> It is this total RSS size that keeps leaking at 40MB per day. 
> 
> As far as I understand, this means that this is not the problem with purely
> Python code, since Heapy shows that the total size of all Python objects is
> more or less constant.
> Is this a correct assumption?
> 
> 2) So now I turn to valgrind. I am no expert in using valgrind, so what I
> did was based only on general logic/rough guesses. 
> Since I cannot run this under valgrind on a production machine due to
> performance reasons, I recompile python on the staging machine:
> ./configure --enable-shared --without-pymalloc
> --prefix=/nail/encap/python-2.6.4-valgrind
> I then follow the instructions in
> http://svn.python.org/projects/python/trunk/Misc/README.valgrind
> Then I run twistd process like this:
> 
> valgrind  --tool=memcheck
> --suppressions=/nail/sys/src/Python-2.6.4/Misc/valgrind-python.supp
> --leak-check=full --log-file=/tmp/valgrind.log  /usr/local/bin/twistd
> --no_save --reactor=epoll --pidfile=logs/tagserv.pid
> --logfile=logs/tagserv.log --python=tagserv.py
> 
> The memory for the process shown by the OS is now 5x normal, and the
> performance is about 5x worse, since it's running inside valgrind's
> synthetic CPU.
> Because this is done on the staging box where I cannot accurately reproduce
> the real load, the memory leaks from simulated load seen by $ps -o rss are
> pretty small, about 1 to 10MB.
> Still, I am interested in finding out what they are.
> 
> Now I encounter the problems with my understanding of how to use valgrind.
> This may not be the appropriate list for this, but perhaps someone could
> recognize the problem.
> When I start the server, about 240 lines is written to valgrind log file,
> --log-file=/tmp/valgrind.log  
> When I shut it down, it adds another 100 lines.
> No matter what I do in between, it always results in the log file with
> exactly 343 lines.
> I can have server runs with a leak of 1MB, or with 10MB, but in the end, I
> get pretty much the same log file. Moreover, when look for all lost memory
> reports:
> $grep lost valgrind.log.1  
>  17,352 bytes in 31 blocks are possibly lost in loss record 49 of 62
>  203,312 bytes in 478 blocks are possibly lost in loss record 57 of 62
>     definitely lost: 0 bytes in 0 blocks.
>       possibly lost: 220,664 bytes in 509 blocks.
>  64 bytes in 2 blocks are definitely lost in loss record 12 of 63
>  17,352 bytes in 31 blocks are possibly lost in loss record 50 of 63
>  203,824 bytes in 479 blocks are possibly lost in loss record 58 of 63
>     definitely lost: 64 bytes in 2 blocks.
>       possibly lost: 221,176 bytes in 510 blocks.
>  47 bytes in 1 blocks are definitely lost in loss record 8 of 63
>  128 bytes in 4 blocks are definitely lost in loss record 16 of 63
>  584 (104 direct, 480 indirect) bytes in 2 blocks are definitely lost in
> loss record 26 of 63
>  1,008 bytes in 6 blocks are definitely lost in loss record 31 of 63
>  22,296 bytes in 41 blocks are possibly lost in loss record 50 of 63
>  183,368 bytes in 381 blocks are possibly lost in loss record 59 of 63
>     definitely lost: 1,287 bytes in 13 blocks.
>     indirectly lost: 480 bytes in 20 blocks.
>       possibly lost: 205,664 bytes in 422 blocks.
> 
> If I add up all those numbers, I get less than 1MB. How do I track down the
> 10MB leak?
> 
> Are there any alternative strategies in finding this leak?
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From matusis at yahoo.com  Sat Feb 20 01:00:48 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Fri, 19 Feb 2010 22:00:48 -0800
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <4B7F284B.70801@thiengineering.ch>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
	<4B7F284B.70801@thiengineering.ch>
Message-ID: <028101cab1f2$0d228ad0$2767a070$@com>

Thank you Werner!

I am playing with your object counter. But before I can interpret the
results, I have to ask a possibly stupid question.
Can someone explain to me this behavior of python 2.6 on x86 linux 2.6.24:

1) start interpreter
Check the size of the interpreter process:
$ps -orss -p24316
  RSS
 4212

Size is 4MB, fine.

2) Allocate a huge chunk of memory:
>>> x=range(1,10000000)
Check the size of the interpreter process:
$ps -orss -p24316
  RSS
 322460

The RSS memory grew by 322460KB =314MB, as I expected

3) Delete this object:
>>> del x
Check the size of the interpreter process:
$ps -orss -p24316
  RSS
 244332

So, the memory is far off its original value! It's up by nearly 240MB, and
it never gets released. Why is that?

4) 
>>> import gc
>>> gc.collect()
0
$ps -orss -p24316
  RSS
244404
Not much luck here!


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Werner Thie
> Sent: Friday, February 19, 2010 4:10 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] debugging a memory leak
> 
> Hi Alec
> 
> ...and they promised you that with a gc'ed language there will never be
> a memory problem again, you just plain forget about it.
> 
> I was stuck in the same position as you and after lots of probing the
> following attempt helped a lot to correct what was later proofed to be
> overly optimistic coding by holding on to objects for
> performance/practical reasons in other objects. Producing non collect
> able cycles in twisted is probably as easy as to forget about memory
> when you have Alzheimer.
> 
> Proofing and working on the problem was only possible on the production
> machine under real load situations. I went ahead and created a manhole
> service on the production server, allowing me to peek at the python
> object space without disturbing it too much. What I used as a tool was
> the code you find later on included.
> 
> After cleaning all the self produced cycles out our servers processes
> stabilized at roughly 280 to 320 MB per process and are now running
> stable for months with more than 20k logins per day and a usual time of
> connect per user on the average of 25 minutes playing games delivered by
> nevow/athena LivePages.
> 
> As I said before, all cycles I found in our SW were introduced by
> patterns like
> 
> def beforeRender(self, ctx):
>      self.session = inevow.ISession(ctx)
> 
> The included code helps to identify the amount of objects being around.
> Although it's a primitive tool it shines the light where its needed and
> if you see certain object counts run away then you have at least
> identified the surrounding where the non collect able cycles are built.
> 
> Why didn't I use heapy/guppy and found out that way? I wasn't able to
> find the evidence for what I was suspecting with all the tools I tried
> (and boy I tried for WEEKS). Avid users of heapy will most probably
> disagree and tell me it would have been easy. But in a situation as this
> everything that works to move you out of that pothole you're in is the
> right thing to do.
> 
> HTH, Werner
> 
> exc = [
>    "function",
>    "type",
>    "list",
>    "dict",
>    "tuple",
>    "wrapper_descriptor",
>    "module",
>    "method_descriptor",
>    "member_descriptor",
>    "instancemethod",
>    "builtin_function_or_method",
>    "frame",
>    "classmethod",
>    "classmethod_descriptor",
>    "_Environ",
>    "MemoryError",
>    "_Printer",
>    "_Helper",
>    "getset_descriptor",
>    "weakreaf"
> ]
> 
> inc = [
>    'myFirstSuspect',
>    'mySecondSuspect'
> ]
> 
> prev = {}
> 
> def dumpObjects(delta=True, limit=0, include=inc, exclude=[]):
>    global prev
>    if include != [] and exclude != []:
>      print 'cannot use include and exclude at the same time'
>      return
>    print 'working with:'
>    print '   delta: ', delta
>    print '   limit: ', limit
>    print ' include: ', include
>    print ' exclude: ', exclude
>    objects = {}
>    gc.collect()
>    oo = gc.get_objects()
>    for o in oo:
>      if getattr(o, "__class__", None):
>        name = o.__class__.__name__
>        if ((exclude == [] and include == [])       or \
>            (exclude != [] and name not in exclude) or \
>            (include != [] and name in include)):
>          objects[name] = objects.get(name, 0) + 1
> ##    if more:
> ##      print o
>    pk = prev.keys()
>    pk.sort()
>    names = objects.keys()
>    names.sort()
>    for name in names:
>      if limit == 0 or objects[name] > limit:
>        if not prev.has_key(name):
>          prev[name] = objects[name]
>        dt = objects[name] - prev[name]
>        if delta or dt != 0:
>          print '%0.6d -- %0.6d -- ' % (dt, objects[name]),  name
>        prev[name] = objects[name]
> 
> def getObjects(oname):
>    """
>    gets an object list with all the named objects out of the sea of
>    gc'ed objects
>    """
>    olist = []
>    objects = {}
>    gc.collect()
>    oo = gc.get_objects()
>    for o in oo:
>      if getattr(o, "__class__", None):
>        name = o.__class__.__name__
>        if (name == oname):
>          olist.append(o)
>    return olist
> 
> dumpObject = dumpobj.dumpObj
> 
> Alec Matusis wrote:
> > I modified a tolerably leaking (about 40MB/day) Twisted server: when the
> new
> > code was pushed, the memory leak  became catastrophic (about
> 100MB/hr).
> > We could tolerate 40MB/day, but the new code needs to be debugged.
> > First, I reverted to the old version, that is leaking 40MB/day (The leak
> > rate is actually proportional to the number of new connections per
second,
> > (which correlates with the CPU utilization of the process): if CPU as
> > measured by $top jumps to >90%, the leak can accelerate to 50MB/hr)
> > I took two steps to debug the leak:
> >
> > 1) Using guppy/heapy via manhole:
> >
> >>>> hp = hpy()
> >>>> h = hp.heap()
> >>>> h
> > Partition of a set of 1157084 objects. Total size = 140911144 bytes.
> >  Index  Count   %     Size   % Cumulative  % Kind (class / dict of
class)
> >      0 785798  68 48463680  34  48463680  34 str
> >      1   7357   1 24660664  18  73124344  52 dict of service.TagSession
> >      2  11735   1 12298280   9  85422624  61 dict of
> > twisted.internet.base.DelayedCall
> >      3   7377   1  7731096   5  93153720  66 dict of
> > twisted.internet.tcp.Server
> >      4   7375   1  7729000   5 100882720  72 dict of
protocols.TagProtocol
> >      5  30925   3  7174600   5 108057320  77 __builtin__.set
> >      6   9193   1  6373336   5 114430656  81 dict (no owner)
> >      7  15557   1  3396904   2 117827560  84 list
> >      8  44833   4  3227976   2 121055536  86 types.BuiltinFunctionType
> >      9  38142   3  3051360   2 124106896  88 types.MethodType
> > <328 more rows. Type e.g. '_.more' to view.>
> >
> > Note that the total size of all objects is 140911144 bytes
> > The 1st, 3d and 4th items in this list show the actual number of
connected
> > clients. I wait for about 48 hrs, and then execute the same command, and
I
> > see approximately the same Total size, of 130MB.
> > So the total size that Heapy sees via the manhole is stable, fluctuating
> > around 140MB.
> >
> > The problem is that the total RSS size of the process visible by the OS
is
> > much larger, it is  871680KB = 851MB:
> > $ps -o pid,vsz,rss,sz,size -p 11236
> >   PID     VSZ           RSS       SZ           SZ
> > 11236 1303180 871680 325795 1174388
> >
> > It is this total RSS size that keeps leaking at 40MB per day.
> >
> > As far as I understand, this means that this is not the problem with
purely
> > Python code, since Heapy shows that the total size of all Python objects
is
> > more or less constant.
> > Is this a correct assumption?
> >
> > 2) So now I turn to valgrind. I am no expert in using valgrind, so what
I
> > did was based only on general logic/rough guesses.
> > Since I cannot run this under valgrind on a production machine due to
> > performance reasons, I recompile python on the staging machine:
> > ./configure --enable-shared --without-pymalloc
> > --prefix=/nail/encap/python-2.6.4-valgrind
> > I then follow the instructions in
> > http://svn.python.org/projects/python/trunk/Misc/README.valgrind
> > Then I run twistd process like this:
> >
> > valgrind  --tool=memcheck
> > --suppressions=/nail/sys/src/Python-2.6.4/Misc/valgrind-python.supp
> > --leak-check=full --log-file=/tmp/valgrind.log  /usr/local/bin/twistd
> > --no_save --reactor=epoll --pidfile=logs/tagserv.pid
> > --logfile=logs/tagserv.log --python=tagserv.py
> >
> > The memory for the process shown by the OS is now 5x normal, and the
> > performance is about 5x worse, since it's running inside valgrind's
> > synthetic CPU.
> > Because this is done on the staging box where I cannot accurately
> reproduce
> > the real load, the memory leaks from simulated load seen by $ps -o rss
are
> > pretty small, about 1 to 10MB.
> > Still, I am interested in finding out what they are.
> >
> > Now I encounter the problems with my understanding of how to use
> valgrind.
> > This may not be the appropriate list for this, but perhaps someone could
> > recognize the problem.
> > When I start the server, about 240 lines is written to valgrind log
file,
> > --log-file=/tmp/valgrind.log
> > When I shut it down, it adds another 100 lines.
> > No matter what I do in between, it always results in the log file with
> > exactly 343 lines.
> > I can have server runs with a leak of 1MB, or with 10MB, but in the end,
I
> > get pretty much the same log file. Moreover, when look for all lost
memory
> > reports:
> > $grep lost valgrind.log.1
> >  17,352 bytes in 31 blocks are possibly lost in loss record 49 of 62
> >  203,312 bytes in 478 blocks are possibly lost in loss record 57 of 62
> >     definitely lost: 0 bytes in 0 blocks.
> >       possibly lost: 220,664 bytes in 509 blocks.
> >  64 bytes in 2 blocks are definitely lost in loss record 12 of 63
> >  17,352 bytes in 31 blocks are possibly lost in loss record 50 of 63
> >  203,824 bytes in 479 blocks are possibly lost in loss record 58 of 63
> >     definitely lost: 64 bytes in 2 blocks.
> >       possibly lost: 221,176 bytes in 510 blocks.
> >  47 bytes in 1 blocks are definitely lost in loss record 8 of 63
> >  128 bytes in 4 blocks are definitely lost in loss record 16 of 63
> >  584 (104 direct, 480 indirect) bytes in 2 blocks are definitely lost in
> > loss record 26 of 63
> >  1,008 bytes in 6 blocks are definitely lost in loss record 31 of 63
> >  22,296 bytes in 41 blocks are possibly lost in loss record 50 of 63
> >  183,368 bytes in 381 blocks are possibly lost in loss record 59 of 63
> >     definitely lost: 1,287 bytes in 13 blocks.
> >     indirectly lost: 480 bytes in 20 blocks.
> >       possibly lost: 205,664 bytes in 422 blocks.
> >
> > If I add up all those numbers, I get less than 1MB. How do I track down
the
> > 10MB leak?
> >
> > Are there any alternative strategies in finding this leak?
> >
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From lasizoillo at gmail.com  Sat Feb 20 01:56:44 2010
From: lasizoillo at gmail.com (lasizoillo)
Date: Sat, 20 Feb 2010 07:56:44 +0100
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <028101cab1f2$0d228ad0$2767a070$@com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
	<4B7F284B.70801@thiengineering.ch>
	<028101cab1f2$0d228ad0$2767a070$@com>
Message-ID: <49414f571002192256w51ab2cf0k8ade9e323e9b47ee@mail.gmail.com>

2010/2/20 Alec Matusis <matusis at yahoo.com>:
> Thank you Werner!
>
> I am playing with your object counter. But before I can interpret the
> results, I have to ask a possibly stupid question.
> Can someone explain to me this behavior of python 2.6 on x86 linux 2.6.24:
>
> 1) start interpreter
> Check the size of the interpreter process:
> $ps -orss -p24316
> ?RSS
> ?4212
>
> Size is 4MB, fine.
>
> 2) Allocate a huge chunk of memory:
>>>> x=range(1,10000000)
> Check the size of the interpreter process:
> $ps -orss -p24316
> ?RSS
> ?322460
>
> The RSS memory grew by 322460KB =314MB, as I expected
>
> 3) Delete this object:
>>>> del x
> Check the size of the interpreter process:
> $ps -orss -p24316
> ?RSS
> ?244332
>
> So, the memory is far off its original value! It's up by nearly 240MB, and
> it never gets released. Why is that?
>
> 4)
>>>> import gc
>>>> gc.collect()
> 0
> $ps -orss -p24316
> ?RSS
> 244404
> Not much luck here!
>
>

Repeat steps 2 to 4. No more memory is used. Python don't leaks more memory.

Repeat the steps reserving memory like this:
x = [0] * 10000000

The memory is cleaned. The problem is in the virtual machine use of integers.

Excuse my poor explanation. My english is very bad,

Reggards,

Javi


From exarkun at twistedmatrix.com  Sun Feb 21 00:05:15 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 21 Feb 2010 05:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1266728715.05.1525512846@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100221/1cdc9c9f/attachment.htm 

From einar.twisted at norsk-esport.no  Sun Feb 21 06:56:38 2010
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?Einar_S=2E_Ids=F8?=)
Date: Sun, 21 Feb 2010 12:56:38 +0100
Subject: [Twisted-Python] Need help for structured application
	development
In-Reply-To: <4B7E1768.8030608@densedata.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
	<e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
	<4B7D1811.1070204@densedata.com>
	<e97d8e3b1002181441s1b07fc4dsbc6e151f41c0d0aa@mail.gmail.com>
	<4B7E1768.8030608@densedata.com>
Message-ID: <e97d8e3b1002210356k422e9feag3ecc5b9ac435e227@mail.gmail.com>

On Fri, Feb 19, 2010 at 5:45 AM, Johann Borck
<johann.borck at densedata.com> wrote:
> I see. So if I get these requirements right you have 5-10 services with
> 1-30 instances of each, with following properties relevant to the task
> at hand:
>
> 1. those pollable by your existing program.
> 2. those incompatible with your existing program.
> 3. those that do not stream additional data.
> 4. those that do stream additional data.
>
> since sets ?(1 and 2) and (3 and 4) are distinct, the combinations
> (1,3),(1,4),(2,3),(2,4) are possible.
>
> (1,3) the easy one, obviously you just need an object that polls the
> service using your program in intervals specific to the service.
> (1,4) Question: will the data you're interested in be collected by your
> existing program or by twisted? In the former case, it's basically the
> same as (1,3), in the latter you'll have to implement a protocol.
> (2,3) for these you'll need to implement a protocol class.
> (2,4) here you'll have to implement one or two protocols, depending on
> how the service is implemented.
>
> Is the above about correct? I think it would be a good idea to have an
> object OB that keeps references to all objects that gather data from the
> services, grouped by the type of service they're responsible for
> (defaultdict(list or dict) comes to mind). And then you'll probably
> either want factories that take care of handing newly created protocol
> instances over to OB or some instances (one or two per service in sets
> (2,3,4) ) of a multipurpose factory that can be initialized with the
> respective protocol and the information how to pass the created protocol
> over to OB, maybe ?just a simple method that is able to distinguish the
> protocols by the interfaces they implement.
>
> One pitfall might be your polling program in case you're using
> t.i.u.getProcessOutput. It (t.i.u...) provides an asynchronous
> interface, so the worst that can happen is a stray process that doesn't
> return, but you still might want to consider implementing a
> ProcessProtocol
> (http://twistedmatrix.com/documents/current/core/howto/process.html)
> with a reasonable timeout, to be able to kill the spawned process in
> case it doesn't terminate. Thinking about it, it's the better solution
> anyway, because process protocols are just another type of protocol in
> twisted, and can be integrated consistently with the rest of your app.
>
> Another utility you might want is t.i.task.LoopingCall, for obvious
> reasons. Given your requirements something along these lines would be my
> approach, although I'd probably reimplement the polling thingy in
> twisted if it's not too complex :)
>
> hope that makes sense,
> Johann

Johann,

Thank you very much for your detailed response. It is greatly appreciated.

I think what you describe makes sense, and I hope I understand what
you mean and how I can implement it: I need to create a "suberobject"
OB which references all the poller-objects. I need to create one
object per detected server instance, which takes care of creating a
timed spawning of the external poller-process, and passing it along to
OB. For those servers that require streamlisteners, I really only need
one factory per server type, with the ablity to match streamed data
with polled data via the poller-object. Is this somewhat on the right
track?

I absolutely hate creating lots of code just to find that it was done
in the "wrong" way, structurally speaking, and that it requires a lot
of work to rewrite in the "correct way" to allow for further expansion
of the application. Your answers are very helpful in letting me avoid
spaghetti-code.

Cheers,
Einar


From vlad.shevchenko at gmail.com  Sun Feb 21 12:04:53 2010
From: vlad.shevchenko at gmail.com (Vlad Shevchenko)
Date: Sun, 21 Feb 2010 19:04:53 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <20100216233209.GA20490@thorne.id.au>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
	<572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>
	<20100216233209.GA20490@thorne.id.au>
Message-ID: <572f045e1002210904iea4d53al1b0edd62ca1f5bd6@mail.gmail.com>

Thanks a lot, Stephen.

AMP probably is what I looking for. Now I can handle a much more
clients (2 times more without significantly increasing response time).
Server can also handle 3 times more clients without any errors, but
response time grow up. I check for netstat and find out Recv-Q about
1706013 on client-side of AMP and Send-Q about 642288 on AMP
server-side. Is this meant:
    - OS needs tuning (ulimit or ifconfig)
    - or Twisted/Python can't handle so much amp-connections?

CPU utilization < 10%, free memory about 500M from 1.7G.

I'd appreciate any help.


On Wed, Feb 17, 2010 at 1:32 AM, Stephen Thorne <stephen at thorne.id.au> wrote:
>
> Vlad,
>
> Have you considered using twisted.protocols.amp ?
>
> --
> Regards,
> Stephen Thorne
> Development Engineer
> Netbox Blue
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



--
WBR, Vlad Shevchenko


From johann.borck at densedata.com  Sun Feb 21 13:18:22 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Sun, 21 Feb 2010 18:18:22 +0000
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <572f045e1002210904iea4d53al1b0edd62ca1f5bd6@mail.gmail.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>	<572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>	<20100216233209.GA20490@thorne.id.au>
	<572f045e1002210904iea4d53al1b0edd62ca1f5bd6@mail.gmail.com>
Message-ID: <4B8178EE.3060805@densedata.com>

Vlad Shevchenko wrote:
> Thanks a lot, Stephen.
>
> AMP probably is what I looking for. Now I can handle a much more
> clients (2 times more without significantly increasing response time).
> Server can also handle 3 times more clients without any errors, but
> response time grow up. I check for netstat and find out Recv-Q about
> 1706013 on client-side of AMP and Send-Q about 642288 on AMP
> server-side. Is this meant:
>     - OS needs tuning (ulimit or ifconfig)
>     - or Twisted/Python can't handle so much amp-connections?
>
>   
How many connections are there? Are the queues that big for all of them?
> CPU utilization < 10%, free memory about 500M from 1.7G.
>
>   
Is this the total system CPU load (how many cores/CPUs)?

Johann



From vlad.shevchenko at gmail.com  Sun Feb 21 13:26:55 2010
From: vlad.shevchenko at gmail.com (Vlad Shevchenko)
Date: Sun, 21 Feb 2010 20:26:55 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <4B8178EE.3060805@densedata.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
	<572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>
	<20100216233209.GA20490@thorne.id.au>
	<572f045e1002210904iea4d53al1b0edd62ca1f5bd6@mail.gmail.com>
	<4B8178EE.3060805@densedata.com>
Message-ID: <572f045e1002211026r2b4a219cie2ddc1d03b264f10@mail.gmail.com>

Hi, Johann

Few words about load script: each "client" is a thread, which wait
from 7 to 15 seconds and then make request to nginx, nginx proxy
requests to api-server. On every request api-server makes 3 callRemote
to memory-db. Delay between creating clients - 0.1 sec.

Currently I use 1 amp-connection for api<=>memory-db. Response time dependency:
clients < 1500 = api-response < 1s
1500 < clients < 3000 = api-response < 14s

Recv-q/Send-q appears on 1500 clients line.

API-server utilization on 3K clients
=========================

Recv-Q ~ 750000...1000000

# top
top - 17:38:47 up 222 days, 23:29,  2 users,  load average: 1.05, 0.77, 0.34
Tasks:  45 total,   3 running,  42 sleeping,   0 stopped,   0 zombie
Cpu(s): 37.1%us,  2.6%sy,  0.0%ni,  0.0%id,  0.0%wa,  0.0%hi,  0.0%si, 60.3%st
Mem:   1747764k total,   574376k used,  1173388k free,   157632k buffers
Swap:   917496k total,        0k used,   917496k free,   273236k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 2492 root      25   0  151m  46m 3568 R 39.7  2.7   2:19.66 python


Memory-db-server utilization on 3K clients
==============================
Send-Q ~ 400000...450000

# top
top - 17:38:08 up 16 days, 22:07,  4 users,  load average: 16.59, 9.40, 4.00
Tasks:  65 total,   6 running,  56 sleeping,   0 stopped,   3 zombie
Cpu(s): 37.6%us,  5.6%sy,  0.0%ni,  0.0%id,  0.0%wa,  0.0%hi,  0.3%si, 56.4%st
Mem:   1747764k total,  1308636k used,   439128k free,   281048k buffers
Swap:   917496k total,        0k used,   917496k free,   616676k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
31804 root      15   0 56596  51m 2820 R 25.7  3.0  16:44.27 python
<----- memory-db
30788 root      15   0 1622m 164m 2648 S  6.9  9.6   0:31.89 python
<----- load script
 1449 root      25   0     0    0    0 Z  4.3  0.0   0:00.35 python <defunct>

I tried tests with 30/50/100 amp connections (with round-robin
algorithm of choosing conn). Thats partially solve the problem: server
can keeps response time 2-4s, but max number of clients going down
with more amp connections. With 100 amp connections load script got
270 errors when achieve 2.7K clients (nginx reported about dropped
connections because of timeout, my nginx proxy timeout settings 120
sec). Recv-Q still exists on most from 100 connections, but
proportionally smaller.
Note about environment: Amazon EC2, both servers are small instances --
1.7 GB of memory, 1 EC2 Compute Unit (1 virtual core with 1 EC2
Compute Unit), 32-bit platform
One EC2 Compute Unit provides the equivalent CPU capacity of a 1.0-1.2
GHz 2007 Opteron or 2007 Xeon processor
OS - Ubuntu Hardy

On Sun, Feb 21, 2010 at 8:18 PM, Johann Borck
<johann.borck at densedata.com> wrote:
> Vlad Shevchenko wrote:
>> Thanks a lot, Stephen.
>>
>> AMP probably is what I looking for. Now I can handle a much more
>> clients (2 times more without significantly increasing response time).
>> Server can also handle 3 times more clients without any errors, but
>> response time grow up. I check for netstat and find out Recv-Q about
>> 1706013 on client-side of AMP and Send-Q about 642288 on AMP
>> server-side. Is this meant:
>> ? ? - OS needs tuning (ulimit or ifconfig)
>> ? ? - or Twisted/Python can't handle so much amp-connections?
>>
>>
> How many connections are there? Are the queues that big for all of them?
>> CPU utilization < 10%, free memory about 500M from 1.7G.
>>
>>
> Is this the total system CPU load (how many cores/CPUs)?
>
> Johann
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
WBR, Vlad Shevchenko


From darren at ontrenet.com  Sun Feb 21 13:43:21 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sun, 21 Feb 2010 13:43:21 -0500
Subject: [Twisted-Python] multiprocessing capability?
Message-ID: <1266777801.2532.176.camel@kratos>

Hi,
  I looked at the source for the threads module and wondered if the
current Twisted supports Python's (2.6) multiprocessing threading?
If not, is there a stable package somewhere that patches Twisted to
support this? I saw one from last summer but not sure if its stable.

Thanks!
Darren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100221/e18895d0/attachment.htm 

From drew.smathers at gmail.com  Sun Feb 21 15:45:55 2010
From: drew.smathers at gmail.com (Drew Smathers)
Date: Sun, 21 Feb 2010 15:45:55 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <1266777801.2532.176.camel@kratos>
References: <1266777801.2532.176.camel@kratos>
Message-ID: <368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>

On Sun, Feb 21, 2010 at 1:43 PM, Darren Govoni <darren at ontrenet.com> wrote:

>  Hi,
>   I looked at the source for the threads module and wondered if the current
> Twisted supports Python's (2.6) multiprocessing threading?
> If not, is there a stable package somewhere that patches Twisted to support
> this? I saw one from last summer but not sure if its stable.
>
>
Hi Darren,
I don't think there's any explicit support for multiprocessing, although I
have seen some people using multiprocessing to run twisted in multiple
processes.  This doesn't answer your question, but you might be interested
in ampoule as this provides a nice process protocol implemented on twisted
or specifically twisted.protocols.amp:

https://launchpad.net/ampoule

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100221/d3d7d286/attachment.htm 

From ssoni at nextdigital.com  Sun Feb 21 17:59:28 2010
From: ssoni at nextdigital.com (Sury Soni)
Date: Mon, 22 Feb 2010 09:59:28 +1100
Subject: [Twisted-Python] Nevow question
In-Reply-To: <20100219111137.GE16399@murdoc>
References: <1BE49492956ECA42BEB0D78F67665E1F01395DCE@exchange.wdg>
	<20100219111137.GE16399@murdoc>
Message-ID: <1BE49492956ECA42BEB0D78F67665E1F01395ED8@exchange.wdg>

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Marco Giusti
> Sent: Friday, 19 February 2010 10:12 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] Nevow question

> 

> On Fri, Feb 19, 2010 at 03:17:07PM +1100, Sury Soni wrote:

> > Hi,

> > 

> > How do we disable traceback on Nevow production site?

> > 

> > Right now, by default, any nevow site will print full length of 

> > traceback on web browser if there is some exception within the 

> > application.

> [cut]

> 

> something like this?

> 

> http://divmod.org/trac/wiki/DivmodNevow/ErrorHandling

 

Thank you Marco, this is exactly, what I was looking for.

 

The example mentions ticket, http://divmod.org/trac/ticket/526

 

?

?

site = appserver.NevowSite(root)

# You should be able to do this instead of in locateChild, but there seems to be a bug

# http://divmod.org/trac/ticket/526

#site.remember(The404Page(), inevow.ICanHandleNotFound)

#site.remember(The500Page(), inevow.ICanHandleException)

?

?

 

There was a last post on above ticket 4 years ago. And this ticket is not closed. But seems to be working fine.

 

I am using:

 

twistd 8.2.0

nevow 0.9.33

python 2.6.3

 

Any potential bug should I be worried about, if I use site.remember stuff in production?

 

Regards,

 

Surya

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100222/a01da3b8/attachment-0001.htm 

From alexandre at quessy.net  Sun Feb 21 20:00:49 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sun, 21 Feb 2010 20:00:49 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
Message-ID: <72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>

Hello everyone,
I have done something similar to this, but I used the children IO
stream to control them. Maybe I should have done that using some
higher level protocol, such as AMP or PB.
(I think AMP is more robust than PB, though)
The project that uses the children IO and process protocols is Lunch.
See http://svn.sat.qc.ca/trac/lunch

a

2010/2/21 Drew Smathers <drew.smathers at gmail.com>:
> On Sun, Feb 21, 2010 at 1:43 PM, Darren Govoni <darren at ontrenet.com> wrote:
>>
>> Hi,
>> ? I looked at the source for the threads module and wondered if the
>> current Twisted supports Python's (2.6) multiprocessing threading?
>> If not, is there a stable package somewhere that patches Twisted to
>> support this? I saw one from last summer but not sure if its stable.
>>
>
> Hi Darren,
> I don't think there's any explicit support for multiprocessing, although I
> have seen some people using multiprocessing to run twisted in multiple
> processes. ?This doesn't answer your question, but you might be interested
> in ampoule as this provides a nice process protocol implemented on twisted
> or specifically twisted.protocols.amp:
> https://launchpad.net/ampoule
> -Drew
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/


From donal.mcmullan at gmail.com  Sun Feb 21 21:10:05 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Mon, 22 Feb 2010 15:10:05 +1300
Subject: [Twisted-Python] Many connections and TIME_WAIT
In-Reply-To: <20100127130516.1898.1655832039.divmod.xquotient.807@localhost.localdomain>
References: <634095dc1001262050t5b5e54eayd2de93afa013f3b2@mail.gmail.com>
	<20100127130516.1898.1655832039.divmod.xquotient.807@localhost.localdomain>
Message-ID: <634095dc1002211810m2594af22l849e98e74911e129@mail.gmail.com>

I've been meaning to update this for a while - it turned out to be caused by
a bug in my code.

X-o

Sorry guys - & thanks for helping me work it out.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100222/652aaf8e/attachment.htm 

From jml at mumak.net  Sun Feb 21 21:50:31 2010
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 21 Feb 2010 21:50:31 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
Message-ID: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>

Live from PyCon Atlanta, I'm pleased to herald the approaching
footsteps of the 10.0 release.

Tarballs for the first Twisted 10.0.0 pre-release are now available at:
  http://people.canonical.com/~jml/Twisted/

This release is the first release ever with the new NEWS building
system, which turns out to be utterly fantastic.

We're also using this release to actually hammer out a release
process. You can find the draft at:
  http://twistedmatrix.com/trac/wiki/ReleaseProcess

Please feel free to update it with questions, thoughts, corrections and advice.

Thanks,
jml


From jbauer at rubic.com  Sun Feb 21 21:57:10 2010
From: jbauer at rubic.com (Jeff Bauer)
Date: Sun, 21 Feb 2010 20:57:10 -0600
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
Message-ID: <4B81F286.4060902@rubic.com>

I'm not opposed to Jinja2 as a templating engine, though
Django would need to be the default:

http://jinja.pocoo.org/2/

Jeff Bauer
Rubicon, Inc.
615.297.3511
615.301.6533 fax

On 02/21/2010 08:50 PM, Jonathan Lange wrote:
> Live from PyCon Atlanta, I'm pleased to herald the approaching
> footsteps of the 10.0 release.
>
> Tarballs for the first Twisted 10.0.0 pre-release are now available at:
>    http://people.canonical.com/~jml/Twisted/
>
> This release is the first release ever with the new NEWS building
> system, which turns out to be utterly fantastic.
>
> We're also using this release to actually hammer out a release
> process. You can find the draft at:
>    http://twistedmatrix.com/trac/wiki/ReleaseProcess
>
> Please feel free to update it with questions, thoughts, corrections and advice.
>
> Thanks,
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Sun Feb 21 22:04:34 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 21 Feb 2010 22:04:34 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <4B81F286.4060902@rubic.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<4B81F286.4060902@rubic.com>
Message-ID: <1346EB23-09A9-4024-880A-E5EC32152862@twistedmatrix.com>

Hi Jeff,

On Feb 21, 2010, at 9:57 PM, Jeff Bauer wrote:

> I'm not opposed to Jinja2 as a templating engine, though
> Django would need to be the default:

This reply appears to have nothing to do with the release announcement.  Wrong list, maybe?

> http://jinja.pocoo.org/2/
> 
> Jeff Bauer
> Rubicon, Inc.
> 615.297.3511
> 615.301.6533 fax
> 
> On 02/21/2010 08:50 PM, Jonathan Lange wrote:
>> Live from PyCon Atlanta, I'm pleased to herald the approaching
>> footsteps of the 10.0 release.
...

-glyph

From jbauer at rubic.com  Sun Feb 21 22:12:39 2010
From: jbauer at rubic.com (Jeff Bauer)
Date: Sun, 21 Feb 2010 21:12:39 -0600
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <1346EB23-09A9-4024-880A-E5EC32152862@twistedmatrix.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>	<4B81F286.4060902@rubic.com>
	<1346EB23-09A9-4024-880A-E5EC32152862@twistedmatrix.com>
Message-ID: <4B81F627.1010904@rubic.com>

Sorry, wrong list (slippery fingers).  Congrats on 10.0, BTW!

Jeff Bauer
Rubicon, Inc.


From glyph at twistedmatrix.com  Sun Feb 21 22:15:40 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 21 Feb 2010 22:15:40 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
Message-ID: <CDBCFEB7-C0D0-46B4-946C-00FE4A28B013@twistedmatrix.com>


On Feb 21, 2010, at 9:50 PM, Jonathan Lange wrote:

> Live from PyCon Atlanta, I'm pleased to herald the approaching
> footsteps of the 10.0 release.

Woo!

> Tarballs for the first Twisted 10.0.0 pre-release are now available at:
>  http://people.canonical.com/~jml/Twisted/

WOO!

> This release is the first release ever with the new NEWS building
> system, which turns out to be utterly fantastic.

WOOOOOOO!

> We're also using this release to actually hammer out a release
> process. You can find the draft at:
>  http://twistedmatrix.com/trac/wiki/ReleaseProcess

YYYYYYYEEEEEEAAAAAAAAAAHHHHHHHHHHH!!!!

> Please feel free to update it with questions, thoughts, corrections and advice.

Can you make "a public website" a bit more specific?  What kind of public website?  (I realize that the answer is probably "any arbitrary public website, not twistedmatrix.com", but it would be good to say that.)



From jml at mumak.net  Sun Feb 21 22:28:07 2010
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 21 Feb 2010 22:28:07 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <CDBCFEB7-C0D0-46B4-946C-00FE4A28B013@twistedmatrix.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<CDBCFEB7-C0D0-46B4-946C-00FE4A28B013@twistedmatrix.com>
Message-ID: <d06a5cd31002211928s4773ec4cl970cc9512881ab34@mail.gmail.com>

On Sun, Feb 21, 2010 at 10:15 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Feb 21, 2010, at 9:50 PM, Jonathan Lange wrote:
>
...
>> Please feel free to update it with questions, thoughts, corrections and advice.
>
> Can you make "a public website" a bit more specific? ?What kind of public website? ?(I realize that the answer is probably "any arbitrary public website, not twistedmatrix.com", but it would be good to say that.)

I'll say that for now. Ideally, I'd like there to be a standard place
to upload the pre-release tarballs.

jml


From darren at ontrenet.com  Sun Feb 21 22:57:09 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sun, 21 Feb 2010 22:57:09 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
Message-ID: <1266811029.2532.177.camel@kratos>

Hi,
  This is great!

Is there a list of new features or improvements for this release? I'd
like to start planning my update.

Darren

On Sun, 2010-02-21 at 21:50 -0500, Jonathan Lange wrote:

> Live from PyCon Atlanta, I'm pleased to herald the approaching
> footsteps of the 10.0 release.
> 
> Tarballs for the first Twisted 10.0.0 pre-release are now available at:
>   http://people.canonical.com/~jml/Twisted/
> 
> This release is the first release ever with the new NEWS building
> system, which turns out to be utterly fantastic.
> 
> We're also using this release to actually hammer out a release
> process. You can find the draft at:
>   http://twistedmatrix.com/trac/wiki/ReleaseProcess
> 
> Please feel free to update it with questions, thoughts, corrections and advice.
> 
> Thanks,
> jml
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100221/fffdbb85/attachment.htm 

From jml at mumak.net  Sun Feb 21 23:08:14 2010
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 21 Feb 2010 23:08:14 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <1266811029.2532.177.camel@kratos>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<1266811029.2532.177.camel@kratos>
Message-ID: <d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>

On Sun, Feb 21, 2010 at 10:57 PM, Darren Govoni <darren at ontrenet.com> wrote:
> Hi,
> ? This is great!
>
> Is there a list of new features or improvements for this release? I'd like
> to start planning my update.
>

Each of the tarballs has a NEWS file.

jml


From general at vultaire.net  Mon Feb 22 02:03:12 2010
From: general at vultaire.net (Paul Goins)
Date: Mon, 22 Feb 2010 16:03:12 +0900
Subject: [Twisted-Python] Try/catching yielded Exceptions and getting proper
	tracebacks
Message-ID: <4B822C30.2050709@vultaire.net>

I'm frequently using the inlineCallbacks idiom for writing code, but am
often finding myself frustrated with rather counterintuitive tracebacks.

Let's say I'm writing an XML-RPC handler, and even if an exception
occurs, I want it to return something to the user and dump the exception
to the log file.  However, if an exception occurs when I'm using the
inlineCallbacks decorator, I sometimes get lacking tracebacks.  Maybe
I'll have the line number of the function that yielded the exception,
but I'll have no detailed information as to where the exception really
came from.

For example, in the example I've pasted at the end of this mail, I get a
traceback as follows:

Traceback (most recent call last):
  File "exceptions.py", line 13, in xmlrpc_dosomething
    result = yield self._do_something_else()
Exception: die die die!!!

However, the exception happens within _do_something_else on line 20.

I have a simple complete example copy/pasted below.  Is there a better
way to accomplish this?

Thanks.

- Paul Goins

-----------------------------------
from twisted.web.xmlrpc import XMLRPC
from twisted.web.server import Site
from twisted.web.resource import Resource
from twisted.internet import reactor, defer
import sys, traceback


class MyApp(XMLRPC):

    @defer.inlineCallbacks
    def xmlrpc_dosomething(self):
        try:
            result = yield self._do_something_else()
            defer.returnValue(result)
        except Exception:
            print >> sys.stderr, traceback.format_exc()

    @defer.inlineCallbacks
    def _do_something_else(self):
        yield
        raise Exception("die die die!!!")

@defer.inlineCallbacks
def cause_trouble(app):
    val = yield app.xmlrpc_dosomething()
    print val
    reactor.stop()

if __name__ == "__main__":
    app = MyApp()
    r = Resource()
    r.putChild("RPC2", app)
    s = Site(r)
    reactor.listenTCP(8123, s)
    reactor.callLater(0.2, cause_trouble, app)
    reactor.run()




From burslem2001 at yahoo.com  Mon Feb 22 03:03:04 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Mon, 22 Feb 2010 00:03:04 -0800 (PST)
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
Message-ID: <321817.5815.qm@web112504.mail.gq1.yahoo.com>

The correct way I think is to use base64 and just one connection after more research. Good to research.

Thanks,
Garyc

--- On Sun, 2/14/10, gary clark <burslem2001 at yahoo.com> wrote:

> From: gary clark <burslem2001 at yahoo.com>
> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Sunday, February 14, 2010, 12:18 PM
> 
> hey Alexandra,
> 
> The only reason why I suggested another server would be to
> distribute the
> load on the system. Essentially the files that are intended
> to be sent over will consume alot of processing since .jpeg
> etc are humongous.
> Yes two connections would be required. Well you could use
> the MD5 sum, I will not, essentially your after a unique
> identifier that represents the file your sending. What I
> intend to do is simply embed the filename and unique
> identifier as a header. Hence I do not not need to recompute
> the MD5 at the receiving end, which to be honest seems
> overkill. 
> 
> Anyway good luck. KISS for software is the best approach.
> 
> Thanks,
> Garyc
> 
> 
> --- On Sun, 2/14/10, Alexandre Quessy <alexandre at quessy.net>
> wrote:
> 
> > From: Alexandre Quessy <alexandre at quessy.net>
> > Subject: Re: [Twisted-Python] Sending jpeg data over
> TCP/IP
> > To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> > Date: Sunday, February 14, 2010, 11:10 AM
> > Hello again everyone,
> > Maybe using two senders/receivers would help. The
> control
> > protocol,
> > which can use XML or JSON, or whatever, would identify
> the
> > files by
> > their md5 sum? The file transfert protocol would
> detect the
> > header of
> > each file to separate them.
> > 
> > a
> > 
> > gary clark wrote:
> > > There are probably several way to accomplish this
> I
> > just needed to think about it a wee bit longer. One
> way
> > would be to prepend an identifier to the file,strip
> the
> > header from the raw data on reception and then save
> the
> > image. I dont think its complicated. I may need a
> seperate
> > server to handle the files though.
> > > 
> > > Thanks,
> > > Garyc
> > > 
> > > --- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org>
> > wrote:
> > > 
> > >> From: Maarten ter Huurne <maarten at treewalker.org>
> > >> Subject: Re: [Twisted-Python] Sending jpeg
> data
> > over TCP/IP
> > >> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> > >> Date: Saturday, February 13, 2010, 6:07 PM
> > >> On Sunday 14 February 2010, Alexandre
> > >> Quessy wrote:
> > >>
> > >>> This said, sending them using a
> programmer's
> > solution
> > >> - not a sysadmin
> > >>> solution - would be closer to my own
> skills,
> > so I am
> > >> interested in
> > >>> knowing if this could be suitable. I
> think,
> > though,
> > >> that it would be
> > >>> faster to use a transfert protocol that
> would
> > be
> > >> implemented in C, not
> > >>> Python. Am I wrong?
> > >> I would suggest to implement it in Python
> first
> > and then
> > >> benchmark it. Maybe 
> > >> the simplest implementation is already fast
> > enough. Maybe
> > >> the bottleneck is 
> > >> the network or the disk you're writing to; in
> that
> > case you
> > >> would be better 
> > >> off upgrading your switches or buying an SSD
> > instead of
> > >> writing C code.
> > >>
> > >> Bye,
> > >>? ? ? ???Maarten
> > >>
> > >>
> _______________________________________________
> > >> Twisted-Python mailing list
> > >> Twisted-Python at twistedmatrix.com
> > >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >>
> > > 
> > > 
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> 



From radix at twistedmatrix.com  Mon Feb 22 09:13:16 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 22 Feb 2010 08:13:16 -0600
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <321817.5815.qm@web112504.mail.gq1.yahoo.com>
References: <321817.5815.qm@web112504.mail.gq1.yahoo.com>
Message-ID: <60ed19d41002220613n504ccbf5i467e94052d0c9ce2@mail.gmail.com>

On Mon, Feb 22, 2010 at 2:03 AM, gary clark <burslem2001 at yahoo.com> wrote:
> The correct way I think is to use base64 and just one connection after more research. Good to research.
>
> Thanks,
> Garyc

No, base64ing file contents is a terrible thing to do if you're
already writing your own TCP-based protocol. Just length-prefix the
data.


>
> --- On Sun, 2/14/10, gary clark <burslem2001 at yahoo.com> wrote:
>
>> From: gary clark <burslem2001 at yahoo.com>
>> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
>> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> Date: Sunday, February 14, 2010, 12:18 PM
>>
>> hey Alexandra,
>>
>> The only reason why I suggested another server would be to
>> distribute the
>> load on the system. Essentially the files that are intended
>> to be sent over will consume alot of processing since .jpeg
>> etc are humongous.
>> Yes two connections would be required. Well you could use
>> the MD5 sum, I will not, essentially your after a unique
>> identifier that represents the file your sending. What I
>> intend to do is simply embed the filename and unique
>> identifier as a header. Hence I do not not need to recompute
>> the MD5 at the receiving end, which to be honest seems
>> overkill.
>>
>> Anyway good luck. KISS for software is the best approach.
>>
>> Thanks,
>> Garyc
>>
>>
>> --- On Sun, 2/14/10, Alexandre Quessy <alexandre at quessy.net>
>> wrote:
>>
>> > From: Alexandre Quessy <alexandre at quessy.net>
>> > Subject: Re: [Twisted-Python] Sending jpeg data over
>> TCP/IP
>> > To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> > Date: Sunday, February 14, 2010, 11:10 AM
>> > Hello again everyone,
>> > Maybe using two senders/receivers would help. The
>> control
>> > protocol,
>> > which can use XML or JSON, or whatever, would identify
>> the
>> > files by
>> > their md5 sum? The file transfert protocol would
>> detect the
>> > header of
>> > each file to separate them.
>> >
>> > a
>> >
>> > gary clark wrote:
>> > > There are probably several way to accomplish this
>> I
>> > just needed to think about it a wee bit longer. One
>> way
>> > would be to prepend an identifier to the file,strip
>> the
>> > header from the raw data on reception and then save
>> the
>> > image. I dont think its complicated. I may need a
>> seperate
>> > server to handle the files though.
>> > >
>> > > Thanks,
>> > > Garyc
>> > >
>> > > --- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org>
>> > wrote:
>> > >
>> > >> From: Maarten ter Huurne <maarten at treewalker.org>
>> > >> Subject: Re: [Twisted-Python] Sending jpeg
>> data
>> > over TCP/IP
>> > >> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> > >> Date: Saturday, February 13, 2010, 6:07 PM
>> > >> On Sunday 14 February 2010, Alexandre
>> > >> Quessy wrote:
>> > >>
>> > >>> This said, sending them using a
>> programmer's
>> > solution
>> > >> - not a sysadmin
>> > >>> solution - would be closer to my own
>> skills,
>> > so I am
>> > >> interested in
>> > >>> knowing if this could be suitable. I
>> think,
>> > though,
>> > >> that it would be
>> > >>> faster to use a transfert protocol that
>> would
>> > be
>> > >> implemented in C, not
>> > >>> Python. Am I wrong?
>> > >> I would suggest to implement it in Python
>> first
>> > and then
>> > >> benchmark it. Maybe
>> > >> the simplest implementation is already fast
>> > enough. Maybe
>> > >> the bottleneck is
>> > >> the network or the disk you're writing to; in
>> that
>> > case you
>> > >> would be better
>> > >> off upgrading your switches or buying an SSD
>> > instead of
>> > >> writing C code.
>> > >>
>> > >> Bye,
>> > >>? ? ? ???Maarten
>> > >>
>> > >>
>> _______________________________________________
>> > >> Twisted-Python mailing list
>> > >> Twisted-Python at twistedmatrix.com
>> > >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> > >>
>> > >
>> > >
>> > > _______________________________________________
>> > > Twisted-Python mailing list
>> > > Twisted-Python at twistedmatrix.com
>> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> > >
>> >
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From terry at jon.es  Mon Feb 22 09:36:24 2010
From: terry at jon.es (Terry Jones)
Date: Mon, 22 Feb 2010 09:36:24 -0500
Subject: [Twisted-Python] Try/catching yielded Exceptions and getting
	proper	tracebacks
In-Reply-To: Your message at 16:03:12 on Monday, 22 February 2010
References: <4B822C30.2050709@vultaire.net>
Message-ID: <19330.38504.593788.930963@jon.es>

Hi Paul

>>>>> "Paul" == Paul Goins <general at vultaire.net> writes:

You're only printing the exception, not a full traceback, so you don't see
much. I tend to write what you're doing as follows:

    from twisted.python import log

    @defer.inlineCallbacks
    def xmlrpc_dosomething(self):
        d = self._do_something_else()
        d.addErrback(log.err)
        result = yield d
        defer.returnValue(result)

If you try that you'll see a full traceback. The above lets log.err handle
the failure that comes back via the errback on the deferred you get from
_do_something_else, and log.err knows how to get the full traceback.

I don't know if it's clear, but whenever you call an inlineCallbacks
decorated method/func, you get a deferred back (unless you happen to
mistakenly use inlineCallbacks to decorate something that's not a
generator). You can add errbacks to that deferred, just like any other, and
if you're making the call from inside another inlineCallbacks decorated
function, you can just do as above: add call/errbacks to the deferred, and
then yield it.

Terry


From nicolas.dietrich at hkx-online.de  Mon Feb 22 10:49:47 2010
From: nicolas.dietrich at hkx-online.de (Nicolas Dietrich)
Date: Mon, 22 Feb 2010 16:49:47 +0100
Subject: [Twisted-Python] Looking for companies doing Twisted
Message-ID: <201002221650.13981.nicolas.dietrich@hkx-online.de>

Hi there,
I'm not sure if this is the right place to ask, so sorry for the spam in 
advance. Anyway:

I'm looking for companies which might be interested in developing a booking 
system for an emerging Germany-based long-distance railway undertaking during 
this year. This will be a distributed system, so Twisted might be a good 
solution for this.

Please approach me directly for any details.

Thankful for all hints,
Nicolas
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100222/cc3c099c/attachment.pgp 

From celord at gmail.com  Mon Feb 22 11:25:58 2010
From: celord at gmail.com (=?ISO-8859-1?B?Q+lzYXIgR2FyY+1h?=)
Date: Mon, 22 Feb 2010 10:25:58 -0600
Subject: [Twisted-Python] IMAP4 Client extrange behavior
Message-ID: <b302bf881002220825g2be89yf0aa7ec7503ab1de@mail.gmail.com>

Hello all, I have this imap4 client http://www.pastebin.com/m4e387f1a
most of the code is barrowed from a IRC friend, bob_f , it works fine
but as soon as more that 1 email arrrives to the inbox, it only prints
the first new messages but not the others,  I wonder what am I doing
wrong

Thanks a lot







Here is the code:

#!/usr/bin/env python
#coding=utf-8


"""
Client de IMAP4 que descarga contenido del INBOX de una cuenta en especifico
para luego extraer el numero de telefono que debe venir en los correos enviados
"""

import StringIO
import sys
from Config import retCredentials

from twisted.internet.task import LoopingCall
from twisted.internet import protocol
from twisted.internet import defer
from twisted.mail import imap4
from twisted.python import util
from twisted.python import log
from twisted.internet import reactor
debug = 1

class IMAP4Client(imap4.IMAP4Client):

    def serverGreeting(self,caps):
        """
        Metodo llamado cuando el servidor contesta
        """
        if debug: print "On serverGreeting"

        self.serverCapabilities = caps
        if self.greetDeferred is not None:
            d, self.greetDeferred = self.greetDeferred, None
            d.addCallback(self.cbLogin)
            d.callback(self)


    def cbLogin(self, proto):
        """
        Callback to IMAP login
        """
        if debug: print "On Login"

        login =  self.login(self.factory.username, self.factory.password)
        login.addCallback(self.startPolling)


    def startPolling(self, proto):
        """
        Callback to poll every x seconds
        """
        call = LoopingCall(self.selectMailbox,mailbox="INBOX")
        call.start(20, now=True)


    def selectMailbox(self, mailbox):
        """
        Select the mailbox to examin
        """
        if debug: print "On selectMailbox"

        mailbox = self.factory.mailbox
        return self.select(mailbox).addCallback(self.cbSelectSuccess)


    def cbSelectSuccess(self, selected):
        """
        Examine the INBOX mailbox for new mails

        """
        if debug: print "On cbSelectSuccess"


        self.messageCount = selected['EXISTS']
        print "Messages: ", self.messageCount

        unseen = selected['EXISTS'] - selected['RECENT']

        if selected['RECENT'] == 0:
            print "No new messages"
            return

        return self.fetchMessage("%s:*" % (unseen)
                ).addCallback(self.cbProcMessages)

    def cbProcMessages(self,messages):

        print messages


class IMAP4ClientFactory(protocol.ClientFactory):

    protocol = IMAP4Client

    def __init__(self, username, password,  onConn):

        self.username = username
        self.password = password
        self.mailbox = 'INBOX'
        self.onConn = onConn

    def buildProtocol(self,addr):
        if debug: print "On buildProtocol"
        p = self.protocol()
        p.factory = self
        p.greetDeferred = self.onConn
        auth = imap4.CramMD5ClientAuthenticator(self.username)
        p.registerAuthenticator(auth)

        return p

    def clientConectionFailed(self, connector, reason):
        d, self.onConn = self.onConn, None
        d.errback(reason)



def ebConnection(reason):
    log.startLogging(sys.stdout)
    log.err(reason)
    reactor.stop()



PORT = 143
RESULT = "INBOX"


def main():
    credentials = retCredentials()
    hostname = credentials['server']
    username = credentials['mailbox']
    password = util.getPassword('IMAP4 Password: ')

    onConn = defer.Deferred(
            ).addErrback(ebConnection
            )

    factory = IMAP4ClientFactory(username, password, onConn)


    reactor.connectTCP(hostname, PORT, factory)
    reactor.run()

if  __name__ == "__main__":
    main()

-- 
http://celord.blogspot.com/


From kevin.horn at gmail.com  Mon Feb 22 13:23:59 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 22 Feb 2010 13:23:59 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
Message-ID: <562bcc11002221023t186f64feqfc1e87dca7c6376c@mail.gmail.com>

On Sun, Feb 21, 2010 at 9:50 PM, Jonathan Lange <jml at mumak.net> wrote:

> Live from PyCon Atlanta, I'm pleased to herald the approaching
> footsteps of the 10.0 release.
>
> Tarballs for the first Twisted 10.0.0 pre-release are now available at:
>  http://people.canonical.com/~jml/Twisted/<http://people.canonical.com/%7Ejml/Twisted/>
>
> This release is the first release ever with the new NEWS building
> system, which turns out to be utterly fantastic.
>
> We're also using this release to actually hammer out a release
> process. You can find the draft at:
>  http://twistedmatrix.com/trac/wiki/ReleaseProcess
>
> Please feel free to update it with questions, thoughts, corrections and
> advice.
>
>
Here's a few...perhaps these should be added to the "Open Questions"
section:

1. How/when in this process are the Windows installers and/or MacOS .dmg
files created?
   (I presume .deb and .rpm packages are left up to Linux distro packagers)
2. How/when in this process are the docs built?
3. When should the front page of the wiki be updated?


> Thanks,
> jml
>
>
No, thank _you_. :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100222/61e20ea2/attachment.htm 

From lormayna at libero.it  Mon Feb 22 16:06:04 2010
From: lormayna at libero.it (Lorenzo Mainardi)
Date: Mon, 22 Feb 2010 22:06:04 +0100
Subject: [Twisted-Python] twisted.protocol.sip
Message-ID: <4B82F1BC.8060705@libero.it>

Hello,
I'm trying to extend the class twisted.protocols.sip.MessageParser for
create my parser.
I had read the documentation and I found this: "Shouldn't
be connected to actual transport.".
What does it means? I can't use that binding it to a socket?

I found also that many other object in twisted.protocols.sip are not
complete and/or not working (some of that return everytime
NotImplementedYet). Is it correct or I'm doing some mistakes?

-- 
LORENZO MAINARDI
Email: lormayna at gmail.com
Linux Registered User: 461615
Key Fingerprint: AC63 5C15 562F 71AF C853  4D4A C03F 75EB 52F4 A0D0


From matusis at yahoo.com  Mon Feb 22 20:52:17 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Mon, 22 Feb 2010 17:52:17 -0800
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <4B7F284B.70801@thiengineering.ch>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
	<4B7F284B.70801@thiengineering.ch>
Message-ID: <007601cab42a$d4c755e0$7e5601a0$@com>

Werner

I am using your code, and it shows essentially the same thing as Heapy:
the counts of all common objects more or less agree.
The 'Total size' shown in Heapy

When I start the process, both python object sizes and their counts rise
proportionally to the numbers of reconnected clients, and then they
stabilize after all clients have reconnected.
At that moment, the "external" RSS process size is about 260MB. The
"internal size" of all python objects reported by Heapy is about 150MB.
After two days, the internal sizes/counts stay the same, but the external
size grows to 1500MB.

Python object counts/total sizes are measured from the manhole.
Is this sufficient to conclude that this is a C memory leak in one of the
external modules or in the Python interpreter itself?

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Werner Thie
> Sent: Friday, February 19, 2010 4:10 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] debugging a memory leak
> 
> Hi Alec
> 
> ...and they promised you that with a gc'ed language there will never be
> a memory problem again, you just plain forget about it.
> 
> I was stuck in the same position as you and after lots of probing the
> following attempt helped a lot to correct what was later proofed to be
> overly optimistic coding by holding on to objects for
> performance/practical reasons in other objects. Producing non collect
> able cycles in twisted is probably as easy as to forget about memory
> when you have Alzheimer.
> 
> Proofing and working on the problem was only possible on the production
> machine under real load situations. I went ahead and created a manhole
> service on the production server, allowing me to peek at the python
> object space without disturbing it too much. What I used as a tool was
> the code you find later on included.
> 
> After cleaning all the self produced cycles out our servers processes
> stabilized at roughly 280 to 320 MB per process and are now running
> stable for months with more than 20k logins per day and a usual time of
> connect per user on the average of 25 minutes playing games delivered by
> nevow/athena LivePages.
> 
> As I said before, all cycles I found in our SW were introduced by
> patterns like
> 
> def beforeRender(self, ctx):
>      self.session = inevow.ISession(ctx)
> 
> The included code helps to identify the amount of objects being around.
> Although it's a primitive tool it shines the light where its needed and
> if you see certain object counts run away then you have at least
> identified the surrounding where the non collect able cycles are built.
> 
> Why didn't I use heapy/guppy and found out that way? I wasn't able to
> find the evidence for what I was suspecting with all the tools I tried
> (and boy I tried for WEEKS). Avid users of heapy will most probably
> disagree and tell me it would have been easy. But in a situation as this
> everything that works to move you out of that pothole you're in is the
> right thing to do.
> 
> HTH, Werner
> 
> exc = [
>    "function",
>    "type",
>    "list",
>    "dict",
>    "tuple",
>    "wrapper_descriptor",
>    "module",
>    "method_descriptor",
>    "member_descriptor",
>    "instancemethod",
>    "builtin_function_or_method",
>    "frame",
>    "classmethod",
>    "classmethod_descriptor",
>    "_Environ",
>    "MemoryError",
>    "_Printer",
>    "_Helper",
>    "getset_descriptor",
>    "weakreaf"
> ]
> 
> inc = [
>    'myFirstSuspect',
>    'mySecondSuspect'
> ]
> 
> prev = {}
> 
> def dumpObjects(delta=True, limit=0, include=inc, exclude=[]):
>    global prev
>    if include != [] and exclude != []:
>      print 'cannot use include and exclude at the same time'
>      return
>    print 'working with:'
>    print '   delta: ', delta
>    print '   limit: ', limit
>    print ' include: ', include
>    print ' exclude: ', exclude
>    objects = {}
>    gc.collect()
>    oo = gc.get_objects()
>    for o in oo:
>      if getattr(o, "__class__", None):
>        name = o.__class__.__name__
>        if ((exclude == [] and include == [])       or \
>            (exclude != [] and name not in exclude) or \
>            (include != [] and name in include)):
>          objects[name] = objects.get(name, 0) + 1
> ##    if more:
> ##      print o
>    pk = prev.keys()
>    pk.sort()
>    names = objects.keys()
>    names.sort()
>    for name in names:
>      if limit == 0 or objects[name] > limit:
>        if not prev.has_key(name):
>          prev[name] = objects[name]
>        dt = objects[name] - prev[name]
>        if delta or dt != 0:
>          print '%0.6d -- %0.6d -- ' % (dt, objects[name]),  name
>        prev[name] = objects[name]
> 
> def getObjects(oname):
>    """
>    gets an object list with all the named objects out of the sea of
>    gc'ed objects
>    """
>    olist = []
>    objects = {}
>    gc.collect()
>    oo = gc.get_objects()
>    for o in oo:
>      if getattr(o, "__class__", None):
>        name = o.__class__.__name__
>        if (name == oname):
>          olist.append(o)
>    return olist
> 
> dumpObject = dumpobj.dumpObj
> 
> Alec Matusis wrote:
> > I modified a tolerably leaking (about 40MB/day) Twisted server: when the
> new
> > code was pushed, the memory leak  became catastrophic (about
> 100MB/hr).
> > We could tolerate 40MB/day, but the new code needs to be debugged.
> > First, I reverted to the old version, that is leaking 40MB/day (The leak
> > rate is actually proportional to the number of new connections per
second,
> > (which correlates with the CPU utilization of the process): if CPU as
> > measured by $top jumps to >90%, the leak can accelerate to 50MB/hr)
> > I took two steps to debug the leak:
> >
> > 1) Using guppy/heapy via manhole:
> >
> >>>> hp = hpy()
> >>>> h = hp.heap()
> >>>> h
> > Partition of a set of 1157084 objects. Total size = 140911144 bytes.
> >  Index  Count   %     Size   % Cumulative  % Kind (class / dict of
class)
> >      0 785798  68 48463680  34  48463680  34 str
> >      1   7357   1 24660664  18  73124344  52 dict of service.TagSession
> >      2  11735   1 12298280   9  85422624  61 dict of
> > twisted.internet.base.DelayedCall
> >      3   7377   1  7731096   5  93153720  66 dict of
> > twisted.internet.tcp.Server
> >      4   7375   1  7729000   5 100882720  72 dict of
protocols.TagProtocol
> >      5  30925   3  7174600   5 108057320  77 __builtin__.set
> >      6   9193   1  6373336   5 114430656  81 dict (no owner)
> >      7  15557   1  3396904   2 117827560  84 list
> >      8  44833   4  3227976   2 121055536  86 types.BuiltinFunctionType
> >      9  38142   3  3051360   2 124106896  88 types.MethodType
> > <328 more rows. Type e.g. '_.more' to view.>
> >
> > Note that the total size of all objects is 140911144 bytes
> > The 1st, 3d and 4th items in this list show the actual number of
connected
> > clients. I wait for about 48 hrs, and then execute the same command, and
I
> > see approximately the same Total size, of 130MB.
> > So the total size that Heapy sees via the manhole is stable, fluctuating
> > around 140MB.
> >
> > The problem is that the total RSS size of the process visible by the OS
is
> > much larger, it is  871680KB = 851MB:
> > $ps -o pid,vsz,rss,sz,size -p 11236
> >   PID     VSZ           RSS       SZ           SZ
> > 11236 1303180 871680 325795 1174388
> >
> > It is this total RSS size that keeps leaking at 40MB per day.
> >
> > As far as I understand, this means that this is not the problem with
purely
> > Python code, since Heapy shows that the total size of all Python objects
is
> > more or less constant.
> > Is this a correct assumption?
> >
> > 2) So now I turn to valgrind. I am no expert in using valgrind, so what
I
> > did was based only on general logic/rough guesses.
> > Since I cannot run this under valgrind on a production machine due to
> > performance reasons, I recompile python on the staging machine:
> > ./configure --enable-shared --without-pymalloc
> > --prefix=/nail/encap/python-2.6.4-valgrind
> > I then follow the instructions in
> > http://svn.python.org/projects/python/trunk/Misc/README.valgrind
> > Then I run twistd process like this:
> >
> > valgrind  --tool=memcheck
> > --suppressions=/nail/sys/src/Python-2.6.4/Misc/valgrind-python.supp
> > --leak-check=full --log-file=/tmp/valgrind.log  /usr/local/bin/twistd
> > --no_save --reactor=epoll --pidfile=logs/tagserv.pid
> > --logfile=logs/tagserv.log --python=tagserv.py
> >
> > The memory for the process shown by the OS is now 5x normal, and the
> > performance is about 5x worse, since it's running inside valgrind's
> > synthetic CPU.
> > Because this is done on the staging box where I cannot accurately
> reproduce
> > the real load, the memory leaks from simulated load seen by $ps -o rss
are
> > pretty small, about 1 to 10MB.
> > Still, I am interested in finding out what they are.
> >
> > Now I encounter the problems with my understanding of how to use
> valgrind.
> > This may not be the appropriate list for this, but perhaps someone could
> > recognize the problem.
> > When I start the server, about 240 lines is written to valgrind log
file,
> > --log-file=/tmp/valgrind.log
> > When I shut it down, it adds another 100 lines.
> > No matter what I do in between, it always results in the log file with
> > exactly 343 lines.
> > I can have server runs with a leak of 1MB, or with 10MB, but in the end,
I
> > get pretty much the same log file. Moreover, when look for all lost
memory
> > reports:
> > $grep lost valgrind.log.1
> >  17,352 bytes in 31 blocks are possibly lost in loss record 49 of 62
> >  203,312 bytes in 478 blocks are possibly lost in loss record 57 of 62
> >     definitely lost: 0 bytes in 0 blocks.
> >       possibly lost: 220,664 bytes in 509 blocks.
> >  64 bytes in 2 blocks are definitely lost in loss record 12 of 63
> >  17,352 bytes in 31 blocks are possibly lost in loss record 50 of 63
> >  203,824 bytes in 479 blocks are possibly lost in loss record 58 of 63
> >     definitely lost: 64 bytes in 2 blocks.
> >       possibly lost: 221,176 bytes in 510 blocks.
> >  47 bytes in 1 blocks are definitely lost in loss record 8 of 63
> >  128 bytes in 4 blocks are definitely lost in loss record 16 of 63
> >  584 (104 direct, 480 indirect) bytes in 2 blocks are definitely lost in
> > loss record 26 of 63
> >  1,008 bytes in 6 blocks are definitely lost in loss record 31 of 63
> >  22,296 bytes in 41 blocks are possibly lost in loss record 50 of 63
> >  183,368 bytes in 381 blocks are possibly lost in loss record 59 of 63
> >     definitely lost: 1,287 bytes in 13 blocks.
> >     indirectly lost: 480 bytes in 20 blocks.
> >       possibly lost: 205,664 bytes in 422 blocks.
> >
> > If I add up all those numbers, I get less than 1MB. How do I track down
the
> > 10MB leak?
> >
> > Are there any alternative strategies in finding this leak?
> >
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From maarten at treewalker.org  Mon Feb 22 21:24:24 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Tue, 23 Feb 2010 03:24:24 +0100
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <007601cab42a$d4c755e0$7e5601a0$@com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
	<4B7F284B.70801@thiengineering.ch>
	<007601cab42a$d4c755e0$7e5601a0$@com>
Message-ID: <201002230324.24883.maarten@treewalker.org>

On Tuesday 23 February 2010, Alec Matusis wrote:

> When I start the process, both python object sizes and their counts rise
> proportionally to the numbers of reconnected clients, and then they
> stabilize after all clients have reconnected.
> At that moment, the "external" RSS process size is about 260MB. The
> "internal size" of all python objects reported by Heapy is about 150MB.
> After two days, the internal sizes/counts stay the same, but the external
> size grows to 1500MB.
> 
> Python object counts/total sizes are measured from the manhole.
> Is this sufficient to conclude that this is a C memory leak in one of the
> external modules or in the Python interpreter itself?

In general, there are other reasons why heap size and RSS size do not match:
1. pages are empty but not returned to the OS
2. pages cannot be returned to the OS because they are not completely empty

It seems Python has different allocators for small and large objects:
http://www.mail-archive.com/python-list at python.org/msg256116.html
http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-
a-large-object.htm

Assuming Python uses malloc for all its allocations (does it?), it is the 
malloc implementation that determines whether empty pages are returned to 
the OS. Under Linux with glibc (your system?), empty pages are returned, so 
there reason 1 does not apply.

Depending on the allocation behaviour of Python, the pages may not be empty 
though, so reason 2 is a likely suspect.

Python extensions written in C could also leak or fragment memory. Are you 
using any extensions that are not pure Python?

Bye,
		Maarten


From general at vultaire.net  Mon Feb 22 22:50:52 2010
From: general at vultaire.net (Paul Goins)
Date: Tue, 23 Feb 2010 12:50:52 +0900
Subject: [Twisted-Python] Try/catching yielded Exceptions and getting
 proper	tracebacks
In-Reply-To: <19330.38504.593788.930963@jon.es>
References: <4B822C30.2050709@vultaire.net> <19330.38504.593788.930963@jon.es>
Message-ID: <4B83509C.30502@vultaire.net>

Hi Terry,

> You're only printing the exception, not a full traceback, so you don't see
> much. I tend to write what you're doing as follows: [...]

Excellent.  I'll give it a try.  I had a feeling it was something like
that which I was missing.

I already understood that inlineCallbacks returns Deferreds, but the
clarification is appreciated nonetheless.  I think it was just my lack
of understanding of how Failures are handled, logged, etc.

- Paul



From matusis at yahoo.com  Tue Feb 23 00:37:16 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Mon, 22 Feb 2010 21:37:16 -0800
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <201002230324.24883.maarten@treewalker.org>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>	<4B7F284B.70801@thiengineering.ch>	<007601cab42a$d4c755e0$7e5601a0$@com>
	<201002230324.24883.maarten@treewalker.org>
Message-ID: <007401cab44a$42294160$c67bc420$@com>

Hi Maarten,

Your link
http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-
a-large-object.htm 
seems to suggest that even though the interpreter does not release memory
back to the OS, it can be re-used by the interpreter.
If this was our problem, I'd expect the memory to be set by the highest
usage, as opposed to it constantly leaking: in my case, the load is
virtually constant, but the memory still leaks over time.

The environment is Linux 2.6.24 x86-64, the extensions used are MySQLdb,
pyCrypto (latest stable releases for both).

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Maarten ter Huurne
> Sent: Monday, February 22, 2010 6:24 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] debugging a memory leak
> 
> On Tuesday 23 February 2010, Alec Matusis wrote:
> 
> > When I start the process, both python object sizes and their counts rise
> > proportionally to the numbers of reconnected clients, and then they
> > stabilize after all clients have reconnected.
> > At that moment, the "external" RSS process size is about 260MB. The
> > "internal size" of all python objects reported by Heapy is about 150MB.
> > After two days, the internal sizes/counts stay the same, but the
external
> > size grows to 1500MB.
> >
> > Python object counts/total sizes are measured from the manhole.
> > Is this sufficient to conclude that this is a C memory leak in one of
the
> > external modules or in the Python interpreter itself?
> 
> In general, there are other reasons why heap size and RSS size do not
match:
> 1. pages are empty but not returned to the OS
> 2. pages cannot be returned to the OS because they are not completely
empty
> 
> It seems Python has different allocators for small and large objects:
> http://www.mail-archive.com/python-list at python.org/msg256116.html
> http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-
> delete-
> a-large-object.htm
> 
> Assuming Python uses malloc for all its allocations (does it?), it is the
> malloc implementation that determines whether empty pages are returned to
> the OS. Under Linux with glibc (your system?), empty pages are returned,
so
> there reason 1 does not apply.
> 
> Depending on the allocation behaviour of Python, the pages may not be
> empty
> though, so reason 2 is a likely suspect.
> 
> Python extensions written in C could also leak or fragment memory. Are you
> using any extensions that are not pure Python?
> 
> Bye,
> 		Maarten
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From wthie at thiengineering.ch  Tue Feb 23 02:39:01 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Tue, 23 Feb 2010 08:39:01 +0100
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <007401cab44a$42294160$c67bc420$@com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>	<4B7F284B.70801@thiengineering.ch>	<007601cab42a$d4c755e0$7e5601a0$@com>	<201002230324.24883.maarten@treewalker.org>
	<007401cab44a$42294160$c67bc420$@com>
Message-ID: <4B838615.8060205@thiengineering.ch>

Hi

Assuming that if memory not released to the OS can be reused by the 
interpreter because of a suballocation system used in the interpreter 
should eventually lead to a leveling out of the overall memory usage 
over time, that's what I observe with our processes (sitting at several 
100 MB per process). We are using external C libraries which do lots of 
malloc/free and one of the bigger sources of pain is indeed to bring 
such a library to a point where its clean not only by freeing all memory 
allocated in every circumstance but also Python refcounting wise. I 
usually go thru all the motions to build up a complete debug chain for 
all modules involved in a project and write a test bed to proof clean 
and proper implementation.

So if your using C/C++ based modules in your project I would mark them 
as highly suspicious to be responsible for leaks until proven otherwise.

Not to bother you with numbers but I usually allocate about 30% of 
overall project time to bring a server into a production ready state, 
meaning uptimes of months/years, no fishy feelings, no performance 
oscillations, predictable caving and recuperating when overloaded, just 
all the things you have to tick to sign off a project as completed, 
meaning you don't have to do daily 'tire kicking' maintenance and 
periodic reboots.

Werner

Alec Matusis wrote:
> Hi Maarten,
> 
> Your link
> http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-
> a-large-object.htm 
> seems to suggest that even though the interpreter does not release memory
> back to the OS, it can be re-used by the interpreter.
> If this was our problem, I'd expect the memory to be set by the highest
> usage, as opposed to it constantly leaking: in my case, the load is
> virtually constant, but the memory still leaks over time.
> 
> The environment is Linux 2.6.24 x86-64, the extensions used are MySQLdb,
> pyCrypto (latest stable releases for both).
> 
>> -----Original Message-----
>> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
>> bounces at twistedmatrix.com] On Behalf Of Maarten ter Huurne
>> Sent: Monday, February 22, 2010 6:24 PM
>> To: Twisted general discussion
>> Subject: Re: [Twisted-Python] debugging a memory leak
>>
>> On Tuesday 23 February 2010, Alec Matusis wrote:
>>
>>> When I start the process, both python object sizes and their counts rise
>>> proportionally to the numbers of reconnected clients, and then they
>>> stabilize after all clients have reconnected.
>>> At that moment, the "external" RSS process size is about 260MB. The
>>> "internal size" of all python objects reported by Heapy is about 150MB.
>>> After two days, the internal sizes/counts stay the same, but the
> external
>>> size grows to 1500MB.
>>>
>>> Python object counts/total sizes are measured from the manhole.
>>> Is this sufficient to conclude that this is a C memory leak in one of
> the
>>> external modules or in the Python interpreter itself?
>> In general, there are other reasons why heap size and RSS size do not
> match:
>> 1. pages are empty but not returned to the OS
>> 2. pages cannot be returned to the OS because they are not completely
> empty
>> It seems Python has different allocators for small and large objects:
>> http://www.mail-archive.com/python-list at python.org/msg256116.html
>> http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-
>> delete-
>> a-large-object.htm
>>
>> Assuming Python uses malloc for all its allocations (does it?), it is the
>> malloc implementation that determines whether empty pages are returned to
>> the OS. Under Linux with glibc (your system?), empty pages are returned,
> so
>> there reason 1 does not apply.
>>
>> Depending on the allocation behaviour of Python, the pages may not be
>> empty
>> though, so reason 2 is a likely suspect.
>>
>> Python extensions written in C could also leak or fragment memory. Are you
>> using any extensions that are not pure Python?
>>
>> Bye,
>> 		Maarten
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From landreville at deadtreepages.com  Tue Feb 23 10:00:07 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 23 Feb 2010 10:00:07 -0500
Subject: [Twisted-Python] twisted.protocol.sip
In-Reply-To: <4B82F1BC.8060705@libero.it>
References: <4B82F1BC.8060705@libero.it>
Message-ID: <9d748c781002230700m94c8b06xaf27a8aa33a2952@mail.gmail.com>

On Mon, Feb 22, 2010 at 4:06 PM, Lorenzo Mainardi <lormayna at libero.it> wrote:
> Hello,
> I'm trying to extend the class twisted.protocols.sip.MessageParser for
> create my parser.
> I had read the documentation and I found this: "Shouldn't
> be connected to actual transport.".
> What does it means? I can't use that binding it to a socket?
>
> I found also that many other object in twisted.protocols.sip are not
> complete and/or not working (some of that return everytime
> NotImplementedYet). Is it correct or I'm doing some mistakes?
>

The SIP implementation is not entirely complete. I've started a little
project of making a sip client mostly by subclassing the current sip
implementation and adding some things that are missing. I'm just using
it for registering and subscribing to notifications though and my code
probably isn't the best. I'll put it up somewhere so you can see it,
but I'm fairly new at twisted so someone else might say it is the
wrong approach.


From landreville at deadtreepages.com  Tue Feb 23 13:22:35 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 23 Feb 2010 13:22:35 -0500
Subject: [Twisted-Python] twisted.protocol.sip
In-Reply-To: <5fbea29a1002230728q39fecafcj2aa12c0f180cf16f@mail.gmail.com>
References: <4B82F1BC.8060705@libero.it>
	<9d748c781002230700m94c8b06xaf27a8aa33a2952@mail.gmail.com>
	<5fbea29a1002230728q39fecafcj2aa12c0f180cf16f@mail.gmail.com>
Message-ID: <9d748c781002231022u1bc6fb9cw26f98e85903cc608@mail.gmail.com>

On Tue, Feb 23, 2010 at 10:28 AM, Lorenzo Mainardi <lormayna at gmail.com> wrote:
> 2010/2/23 Landreville <landreville at deadtreepages.com>:
>
>> I'll put it up somewhere so you can see it,
>> but I'm fairly new at twisted so someone else might say it is the
>> wrong approach.
>>
>
> Hi, I'm start doing the same, so we can merge the works.
> At the moment I don't have so much code, but you can put in google
> code or somewhere (If it's possible I prefer to use mercurial instead
> of SVN or GIT).
>

I've got it up on launchpad at: https://launchpad.net/sipper

I don't have time right now to explain it all, but the reactor is
started in SIPPhone.py and thats where the registration is started as
well.


From landreville at deadtreepages.com  Tue Feb 23 20:09:36 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 23 Feb 2010 20:09:36 -0500
Subject: [Twisted-Python] twisted.protocol.sip
In-Reply-To: <4B844BB5.5000607@gmail.com>
References: <4B82F1BC.8060705@libero.it>
	<9d748c781002230700m94c8b06xaf27a8aa33a2952@mail.gmail.com>
	<5fbea29a1002230728q39fecafcj2aa12c0f180cf16f@mail.gmail.com>
	<9d748c781002231022u1bc6fb9cw26f98e85903cc608@mail.gmail.com>
	<4B844BB5.5000607@gmail.com>
Message-ID: <9d748c781002231709w633ef305ye1c328b356f38bb7@mail.gmail.com>

On Tue, Feb 23, 2010 at 4:42 PM, Lorenzo Mainardi <lormayna at gmail.com> wrote:
> Landreville ha scritto:
>> On Tue, Feb 23, 2010 at 10:28 AM, Lorenzo Mainardi <lormayna at gmail.com> wrote:
>>> 2010/2/23 Landreville <landreville at deadtreepages.com>:
>>>
>>>> I'll put it up somewhere so you can see it,
>>>> but I'm fairly new at twisted so someone else might say it is the
>>>> wrong approach.
>>>>
>>> Hi, I'm start doing the same, so we can merge the works.
>>> At the moment I don't have so much code, but you can put in google
>>> code or somewhere (If it's possible I prefer to use mercurial instead
>>> of SVN or GIT).
>>>
>>
>> I've got it up on launchpad at: https://launchpad.net/sipper
>
> Hi download the branch and subscribed the mailing list.
> I'll try to write some code.
>

I'm just using this as a SIP client, not as a proxy server. What are
you making with  SIP?


From David.Watson at windriver.com  Tue Feb 23 20:15:55 2010
From: David.Watson at windriver.com (Watson, David)
Date: Tue, 23 Feb 2010 17:15:55 -0800
Subject: [Twisted-Python] Reactor events help request ..
Message-ID: <58BD0469C48A7443A479A13D101685E303EA8F0B@ala-mail09.corp.ad.wrs.com>

Hi Folks ..
 
I'm not entirely a newbie a python and twisted, but I have come to the
point where I need a bit more expertise on this topic, so I am hoping
that I have come to the right place .. 
 
What  I'm hoping, that  you folks can help out with a minor problem that
I am having with the twistd reactor class and/or the callLater function
  
I have been using a reactor.callLater function to schedule an event that
happens in the reactor to send out a heartbeat type message at regular
intervals .. This works great !
 
However, it appears to me that the self.sendLine(msg)  and or the
self.transport.write(msg) writing  functions are blocked functions
waiting for a reactor event to occur at a future scheduled time before
acutally flushing out the internal write buffers ..  
 
I am currently using the twistd protocol factory to create a custom
protocol to communicate between a server and client,  which up until now
has not been a real concern, but I am trying to improve the preformance
and turn around time between the client and server and this blocking
operation is a major source of  unneeded delay .. 
 
My problem is that I have scheduled heartbeat events that I want to send
to the server .. as well as  the  non scheduled events that I want to go
to the server imediately .. 
 
I have been scouring the various python/twistd  document sites, but to
no avial,  on all of the sites that I have seen, the method used have
all done the same thing ,  by re-scheduling something into the future
with a reactor.callLater () function, which causes a delayed write to
occur .. not a problem for something that is 1 or 2 second s in the
furture, but it is a serious problem when the next event is 120 seconds
away .. 
 
I have tried using a self.transport.write(msg) function, but the actual
communication still seems to be buffered and stuck waiting for the
scheduled reactor event .. 
 
What I think I need is something similar to  self.transport.flush()
which would flush out the write buffers on demand, but does not seen to
exist ..
 
I am hoping that someone has faced the same/similar stituation and give
me some guidance and/or to point me in the correct direction .. 
 
Thanks for any help you can offer ..
 
Cheers
 
Dave Watson
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100223/e08ff1bb/attachment.htm 

From glyph at twistedmatrix.com  Tue Feb 23 22:21:35 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 23 Feb 2010 22:21:35 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<1266811029.2532.177.camel@kratos>
	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>
Message-ID: <4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>


On Feb 21, 2010, at 11:08 PM, Jonathan Lange wrote:

> On Sun, Feb 21, 2010 at 10:57 PM, Darren Govoni <darren at ontrenet.com> wrote:
>> Hi,
>>   This is great!
>> 
>> Is there a list of new features or improvements for this release? I'd like
>> to start planning my update.
>> 
> 
> Each of the tarballs has a NEWS file.

A thought for future releases: since we'd really like folks to download the prereleases and try them out, perhaps we should put the NEWS file on the web somewhere official, too, so they can see all the cool stuff they can try out?

Here's a not-so-official link to the 10.0.0 prerelease NEWS:

http://twistedmatrix.com/trac/browser/branches/release-x-4290/NEWS?format=raw




From tim at commsecure.com.au  Tue Feb 23 22:45:43 2010
From: tim at commsecure.com.au (Tim Allen)
Date: Wed, 24 Feb 2010 14:45:43 +1100
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>	<1266811029.2532.177.camel@kratos>	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>
	<4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>
Message-ID: <4B84A0E7.4010206@commsecure.com.au>

On 02/24/2010 02:21 PM, Glyph Lefkowitz wrote:
> On Feb 21, 2010, at 11:08 PM, Jonathan Lange wrote:
>> On Sun, Feb 21, 2010 at 10:57 PM, Darren Govoni<darren at ontrenet.com>  wrote:
>>> Hi,
>>>    This is great!
>>>
>>> Is there a list of new features or improvements for this release? I'd like
>>> to start planning my update.
>>
>> Each of the tarballs has a NEWS file.
>
> A thought for future releases: since we'd really like folks to download the prereleases and try them out, perhaps we should put the NEWS file on the web somewhere official, too, so they can see all the cool stuff they can try out?
>
> Here's a not-so-official link to the 10.0.0 prerelease NEWS:
>
> http://twistedmatrix.com/trac/browser/branches/release-x-4290/NEWS?format=raw

It seems a pity that the "other fixes" bug numbers aren't URLs to the 
bugs in question, but I suppose that would make them take up an awful 
lot of room in plain-text.


From foom at fuhm.net  Tue Feb 23 22:56:13 2010
From: foom at fuhm.net (James Y Knight)
Date: Tue, 23 Feb 2010 22:56:13 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <4B84A0E7.4010206@commsecure.com.au>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>	<1266811029.2532.177.camel@kratos>	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>
	<4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>
	<4B84A0E7.4010206@commsecure.com.au>
Message-ID: <E16B26FF-E770-45CB-9CEA-0F1D126A2844@fuhm.net>


On Feb 23, 2010, at 10:45 PM, Tim Allen wrote:

> On 02/24/2010 02:21 PM, Glyph Lefkowitz wrote:
>> On Feb 21, 2010, at 11:08 PM, Jonathan Lange wrote:
>>> On Sun, Feb 21, 2010 at 10:57 PM, Darren  
>>> Govoni<darren at ontrenet.com>  wrote:
>>>> Hi,
>>>>   This is great!
>>>>
>>>> Is there a list of new features or improvements for this release?  
>>>> I'd like
>>>> to start planning my update.
>>>
>>> Each of the tarballs has a NEWS file.
>>
>> A thought for future releases: since we'd really like folks to  
>> download the prereleases and try them out, perhaps we should put  
>> the NEWS file on the web somewhere official, too, so they can see  
>> all the cool stuff they can try out?
>>
>> Here's a not-so-official link to the 10.0.0 prerelease NEWS:
>>
>> http://twistedmatrix.com/trac/browser/branches/release-x-4290/NEWS?format=raw
>
> It seems a pity that the "other fixes" bug numbers aren't URLs to the
> bugs in question, but I suppose that would make them take up an awful
> lot of room in plain-text.

Yeah: an auto-HTMLized version to put on the website would be nice,  
even if the only change was to add links for the ticket numbers.

James


From tim at commsecure.com.au  Tue Feb 23 23:02:33 2010
From: tim at commsecure.com.au (Tim Allen)
Date: Wed, 24 Feb 2010 15:02:33 +1100
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <E16B26FF-E770-45CB-9CEA-0F1D126A2844@fuhm.net>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>	<1266811029.2532.177.camel@kratos>	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>	<4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>	<4B84A0E7.4010206@commsecure.com.au>
	<E16B26FF-E770-45CB-9CEA-0F1D126A2844@fuhm.net>
Message-ID: <4B84A4D9.4030806@commsecure.com.au>

On 02/24/2010 02:56 PM, James Y Knight wrote:
> On Feb 23, 2010, at 10:45 PM, Tim Allen wrote:
>> On 02/24/2010 02:21 PM, Glyph Lefkowitz wrote:
>>> Here's a not-so-official link to the 10.0.0 prerelease NEWS:
>>>
>>> http://twistedmatrix.com/trac/browser/branches/release-x-4290/NEWS?format=raw
>>
>> It seems a pity that the "other fixes" bug numbers aren't URLs to the
>> bugs in question, but I suppose that would make them take up an awful
>> lot of room in plain-text.
>
> Yeah: an auto-HTMLized version to put on the website would be nice,
> even if the only change was to add links for the ticket numbers.

If the text version were Trac-markup, presumably it would be possible to 
automate creating a /trac/Releases/x.y.z/ReleaseNotes wiki page, and all 
the bug numbers would become links as per the usual Trac magic.


From andrew at bemusement.org  Wed Feb 24 02:01:00 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 24 Feb 2010 18:01:00 +1100
Subject: [Twisted-Python] Reactor events help request ..
In-Reply-To: <58BD0469C48A7443A479A13D101685E303EA8F0B@ala-mail09.corp.ad.wrs.com>
References: <58BD0469C48A7443A479A13D101685E303EA8F0B@ala-mail09.corp.ad.wrs.com>
Message-ID: <20100224070100.GT18546@steerpike.home.puzzling.org>

Watson, David wrote:
[...]
>    However, it appears to me that the self.sendLine(msg)??and or the
>    self.transport.write(msg) writing? functions?are blocked
>    functions?waiting?for?a?reactor event to occur?at a future scheduled time
>    before acutally flushing out the internal write buffers ..??

This sounds very much like you are calling Twisted APIs from threads (other than
the thread the reactor is running in).  If so, that's your problem.  See
<http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#WhydoesittakealongtimefordataIsendwithtransport.writetoarriveattheothersideoftheconnection>
and <http://twistedmatrix.com/documents/current/core/howto/threading.html>.

-Andrew.



From David.Watson at windriver.com  Wed Feb 24 09:31:59 2010
From: David.Watson at windriver.com (Watson, David)
Date: Wed, 24 Feb 2010 06:31:59 -0800
Subject: [Twisted-Python] Reactor events help request ..
In-Reply-To: <20100224070100.GT18546@steerpike.home.puzzling.org>
References: <58BD0469C48A7443A479A13D101685E303EA8F0B@ala-mail09.corp.ad.wrs.com>
	<20100224070100.GT18546@steerpike.home.puzzling.org>
Message-ID: <58BD0469C48A7443A479A13D101685E303EA8F9A@ala-mail09.corp.ad.wrs.com>

Hi Andrew ..

I want to thank you for your help .. I just looked at the link articles that you suggested and that sounds like the correct diagnosis to the problem .. I thought that there was a solution somewhere, I was just not able to find the correct information to aid in finding out what was actually happening .. With your guidance, I think this may be the problem, I'll let you know how I fair out ..

Thanks again for your help, I had just about given up on solving this problem ..

Cheers

Dave W.

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Andrew Bennetts
Sent: Wednesday, February 24, 2010 2:01 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] Reactor events help request ..

Watson, David wrote:
[...]
>    However, it appears to me that the self.sendLine(msg)??and or the
>    self.transport.write(msg) writing? functions?are blocked
>    functions?waiting?for?a?reactor event to occur?at a future scheduled time
>    before acutally flushing out the internal write buffers ..

This sounds very much like you are calling Twisted APIs from threads (other than the thread the reactor is running in).  If so, that's your problem.  See <http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#WhydoesittakealongtimefordataIsendwithtransport.writetoarriveattheothersideoftheconnection>
and <http://twistedmatrix.com/documents/current/core/howto/threading.html>.

-Andrew.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From kevin.horn at gmail.com  Wed Feb 24 11:01:45 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 24 Feb 2010 10:01:45 -0600
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <562bcc11002221023t186f64feqfc1e87dca7c6376c@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<562bcc11002221023t186f64feqfc1e87dca7c6376c@mail.gmail.com>
Message-ID: <562bcc11002240801q1448aa3ewa81ebafb5a368f7b@mail.gmail.com>

On Mon, Feb 22, 2010 at 12:23 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Sun, Feb 21, 2010 at 9:50 PM, Jonathan Lange <jml at mumak.net> wrote:
>
>> Live from PyCon Atlanta, I'm pleased to herald the approaching
>> footsteps of the 10.0 release.
>>
>> Tarballs for the first Twisted 10.0.0 pre-release are now available at:
>>  http://people.canonical.com/~jml/Twisted/<http://people.canonical.com/%7Ejml/Twisted/>
>>
>> This release is the first release ever with the new NEWS building
>> system, which turns out to be utterly fantastic.
>>
>> We're also using this release to actually hammer out a release
>> process. You can find the draft at:
>>  http://twistedmatrix.com/trac/wiki/ReleaseProcess
>>
>> Please feel free to update it with questions, thoughts, corrections and
>> advice.
>>
>>
> Here's a few...perhaps these should be added to the "Open Questions"
> section:
>
> 1. How/when in this process are the Windows installers and/or MacOS .dmg
> files created?
>    (I presume .deb and .rpm packages are left up to Linux distro packagers)
> 2. How/when in this process are the docs built?
> 3. When should the front page of the wiki be updated?
>
>
>> Thanks,
>> jml
>>
>>
> No, thank _you_. :)
>
> Kevin Horn
>
>
Here's one more:

Document how and when to tag releases in SVN.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100224/aa613dec/attachment.htm 

From glyph at twistedmatrix.com  Wed Feb 24 09:23:33 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 24 Feb 2010 09:23:33 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
Message-ID: <7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>


On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote:

> Hello everyone,
> I have done something similar to this, but I used the children IO
> stream to control them. Maybe I should have done that using some
> higher level protocol, such as AMP or PB.

Using a higher-level protocol is generally better, if for no other reason that it gives you a framework within which to document your design decisions.  It's much easier to say "An AMP command with a 'foo' String argument and a 'bar' Integer argument" than to say "The first two bytes of the message are the length of the first argument.  The next n bytes are the first argument.  The first argument shall be interpreted as... (etc, etc)"

> (I think AMP is more robust than PB, though)

Why do you say that?  I think AMP is simpler than PB, but PB works pretty well if you need its functionality.



From glyph at twistedmatrix.com  Wed Feb 24 09:31:50 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 24 Feb 2010 09:31:50 -0500
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <60ed19d41002220613n504ccbf5i467e94052d0c9ce2@mail.gmail.com>
References: <321817.5815.qm@web112504.mail.gq1.yahoo.com>
	<60ed19d41002220613n504ccbf5i467e94052d0c9ce2@mail.gmail.com>
Message-ID: <B39CD44A-BFEE-4BD0-8CF7-905F8286B28E@twistedmatrix.com>


On Feb 22, 2010, at 9:13 AM, Christopher Armstrong wrote:

> On Mon, Feb 22, 2010 at 2:03 AM, gary clark <burslem2001 at yahoo.com> wrote:
>> The correct way I think is to use base64 and just one connection after more research. Good to research.
>> 
>> Thanks,
>> Garyc
> 
> No, base64ing file contents is a terrible thing to do if you're
> already writing your own TCP-based protocol. Just length-prefix the
> data.

In Twisted, lots of classes exist to help you do this.  For simple length prefixing, have a look at any of the *stringReceiver classes in twisted.protocols.basic.  (NetstringReceiver, Int32StringReceiver, etc)

You can transmit binary data over many higher-level protocols as well; HTTP can handle binary entity-bodies just fine, as can twisted's "native" protocools, PB and AMP.




From glyph at twistedmatrix.com  Wed Feb 24 11:20:19 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 24 Feb 2010 11:20:19 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <4B84A4D9.4030806@commsecure.com.au>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>	<1266811029.2532.177.camel@kratos>	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>	<4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>	<4B84A0E7.4010206@commsecure.com.au>
	<E16B26FF-E770-45CB-9CEA-0F1D126A2844@fuhm.net>
	<4B84A4D9.4030806@commsecure.com.au>
Message-ID: <A0F41B04-228F-442C-938F-767ED916F0B2@twistedmatrix.com>


On Feb 23, 2010, at 11:02 PM, Tim Allen wrote:

> On 02/24/2010 02:56 PM, James Y Knight wrote:
>> On Feb 23, 2010, at 10:45 PM, Tim Allen wrote:
>>> On 02/24/2010 02:21 PM, Glyph Lefkowitz wrote:
>>>> Here's a not-so-official link to the 10.0.0 prerelease NEWS:
>>>> 
>>>> http://twistedmatrix.com/trac/browser/branches/release-x-4290/NEWS?format=raw
>>> 
>>> It seems a pity that the "other fixes" bug numbers aren't URLs to the
>>> bugs in question, but I suppose that would make them take up an awful
>>> lot of room in plain-text.
>> 
>> Yeah: an auto-HTMLized version to put on the website would be nice,
>> even if the only change was to add links for the ticket numbers.
> 
> If the text version were Trac-markup, presumably it would be possible to 
> automate creating a /trac/Releases/x.y.z/ReleaseNotes wiki page, and all 
> the bug numbers would become links as per the usual Trac magic.

Much as I don't like ReST, it's a heck of a lot better than trac markup.  You can't really manipulate trac markup with anything but trac, but ReST gives you all of docutils.

If we used ReST, we could integrate it with the rest of the documentation once lore's gone, and we can use the {{{<<<###$$$<html> syntax that Trac has (I was offline while writing this email, sorry that's not exact) to get it into the wiki.




From rich at noir.com  Wed Feb 24 15:04:31 2010
From: rich at noir.com (K. Richard Pixley)
Date: Wed, 24 Feb 2010 12:04:31 -0800
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
References: <1266777801.2532.176.camel@kratos>	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
Message-ID: <4B85864F.6090301@noir.com>

Glyph Lefkowitz wrote:
> On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote
>> Hello everyone,
>> I have done something similar to this, but I used the children IO
>> stream to control them. Maybe I should have done that using some
>> higher level protocol, such as AMP or PB.
>>     
> Using a higher-level protocol is generally better, if for no other reason that it gives you a framework within which to document your design decisions.  It's much easier to say "An AMP command with a 'foo' String argument and a 'bar' Integer argument" than to say "The first two bytes of the message are the length of the first argument.  The next n bytes are the first argument.  The first argument shall be interpreted as... (etc, etc)"
I'm working on an interface right now to the spread toolkit, 
(http://spread.org), which implements virtual synchrony, 
(http://en.wikipedia.org/wiki/Virtual_synchrony).

For distributed, symmetric, fault tolerant parallelism in small to 
medium scale with high reliability, this might be an option.

--rich
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100224/1c14125a/attachment.htm 

From twisted at ralphm.ik.nu  Wed Feb 24 15:08:46 2010
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Wed, 24 Feb 2010 21:08:46 +0100
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <A0F41B04-228F-442C-938F-767ED916F0B2@twistedmatrix.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<1266811029.2532.177.camel@kratos>
	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>
	<4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>
	<4B84A0E7.4010206@commsecure.com.au>
	<E16B26FF-E770-45CB-9CEA-0F1D126A2844@fuhm.net>
	<4B84A4D9.4030806@commsecure.com.au>
	<A0F41B04-228F-442C-938F-767ED916F0B2@twistedmatrix.com>
Message-ID: <1267042126.7668.6.camel@dwaal>

On Wed, 2010-02-24 at 11:20 -0500, Glyph Lefkowitz wrote:
> [..]
>
> Much as I don't like ReST, it's a heck of a lot better than trac markup.  You can't really manipulate trac markup with anything but trac, but ReST gives you all of docutils.
> 
> If we used ReST, we could integrate it with the rest of the documentation once lore's gone, and we can use the {{{<<<###$$$<html> syntax that Trac has (I was offline while writing this email, sorry that's not exact) to get it into the wiki.

By default, there should be a ReST handler in Trac, if docutils is
installed. This can be used with {{{#!rst ...}}}.

ralphm 



From darren at ontrenet.com  Wed Feb 24 15:11:11 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Wed, 24 Feb 2010 15:11:11 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B85864F.6090301@noir.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com>
Message-ID: <1267042271.2532.200.camel@kratos>

Looks interesting. I'm going to check out that package.


My original request was more along the lines of using Python's new
support for native CPU core's and processes (the multiprocessing package
is for this). Python's built-in thread support has global lock
constraints that underperform in some situations.

But I ran into a problem using multiprocessing module with Twisted that
was pointed out on the Twisted trac with pickling class methods and
apparently Python's CPU threading support attempts to do this in some
situations (e.g. when I try to pass a class method to a native thread).

On Wed, 2010-02-24 at 12:04 -0800, K. Richard Pixley wrote:

> Glyph Lefkowitz wrote: 
> 
> > On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote
> > 
> > > Hello everyone,
> > > I have done something similar to this, but I used the children IO
> > > stream to control them. Maybe I should have done that using some
> > > higher level protocol, such as AMP or PB.
> > >     
> > 
> > Using a higher-level protocol is generally better, if for no other reason that it gives you a framework within which to document your design decisions.  It's much easier to say "An AMP command with a 'foo' String argument and a 'bar' Integer argument" than to say "The first two bytes of the message are the length of the first argument.  The next n bytes are the first argument.  The first argument shall be interpreted as... (etc, etc)"
> 
> I'm working on an interface right now to the spread toolkit,
> (http://spread.org), which implements virtual synchrony,
> (http://en.wikipedia.org/wiki/Virtual_synchrony).
> 
> For distributed, symmetric, fault tolerant parallelism in small to
> medium scale with high reliability, this might be an option.
> 
> --rich
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100224/42cc609b/attachment.htm 

From t.bordemann at web.de  Wed Feb 24 15:27:35 2010
From: t.bordemann at web.de (Tim Bordemann)
Date: Wed, 24 Feb 2010 21:27:35 +0100 (CET)
Subject: [Twisted-Python] Newbie question: Is this possible with twisted?
In-Reply-To: <383673302.0.1267042460421.JavaMail.root@mail.onvalue.de>
Message-ID: <1067095596.2.1267043255773.JavaMail.root@mail.onvalue.de>

Hi,

first of all: I've no experience with network-programming yet, but need to go in for creating a "simple" client-server application.
In the end I'd like to connect a web-form (django) with a twisted-server, which then should do some long-lasting calculations.

So far I got a simple xmlrpc-server, which "defers" the calculation to a new thread and a client which sends the initial request to do the calculation. Though I have the problem that the client stays connected until the calculations are done.

Could someone tell me if it's somehow possible to disconnect the client right after sending the request to the server?

Thanks,
Tim


From rlotun at gmail.com  Wed Feb 24 15:40:44 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Wed, 24 Feb 2010 20:40:44 +0000
Subject: [Twisted-Python] Newbie question: Is this possible with twisted?
In-Reply-To: <1067095596.2.1267043255773.JavaMail.root@mail.onvalue.de>
References: <383673302.0.1267042460421.JavaMail.root@mail.onvalue.de>
	<1067095596.2.1267043255773.JavaMail.root@mail.onvalue.de>
Message-ID: <95bb10691002241240j76d3ab70i8ce52e069308548f@mail.gmail.com>

Hi Tim,

> first of all: I've no experience with network-programming yet, but need to go in for creating a "simple" client-server application.

No problem.

> In the end I'd like to connect a web-form (django) with a twisted-server, which then should do some long-lasting calculations.
>
> So far I got a simple xmlrpc-server, which "defers" the calculation to a new thread and a client which sends the initial request to do the calculation. Though I have the problem that the client stays connected until the calculations are done.

Keep in mind you can run this "calculation server" as a separate
server-process and connect to it via loopback (localhost:SOME_PORT).
This makes it easier to put it on another machine one day without
changing the code.

Also, if you're doing a blocking calculation in Python (i.e. if it's
not a special C-module), then because of the Python Global Interpreter
Lock (GIL), you're not going to be able to paralllelise that
calculation effectively.

> Could someone tell me if it's somehow possible to disconnect the client right after sending the request to the server?

Well, it depends. Does the client need the result of that calculation?
Probably not, so what you can do is issue a job id back to the client,
and associate the job id to the result of that job. This is all very
doable in Twisted.

However, I'm going to suggest something different, which seems like a
better fit for what you're trying to do. Check out Celery
(http://celeryproject.org/) which is a distributed task queue. The
idea is that you set up a queue system, like RabbitMQ, which implement
a job queue via Celery. You write tasks as Python functions in a
module somewhere. When a client connects, you issue a task, and return
the task id back to the client. By and by the job is picked up by some
worker, and the result is stored in some persistent database, like
MySQL or Redis. Celery also has excellent integration with Django.

Hope that helps you out.

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From markscottwright at gmail.com  Wed Feb 24 15:46:45 2010
From: markscottwright at gmail.com (Mark Wright)
Date: Wed, 24 Feb 2010 14:46:45 -0600
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B85864F.6090301@noir.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com>
Message-ID: <db986be81002241246y4fc9e9aaqf129f07e48911e1a@mail.gmail.com>

Weird, I was looking into doing something similar for the Paxos
algorithm (http://en.wikipedia.org/wiki/Paxos_algorithm), but I
decided I didn't have the time right now.

If you haven't, I recommend that you check out Paxos Made Live:
http://labs.google.com/papers/paxos_made_live.html

That paper has some nice details about google's experience
implementing a production quality Paxos library - most importantly,
don't let the simplicity of the algorithm mislead you into thinking
that a real implementation will also be simple.  I found it a little
depressing...

On Wed, Feb 24, 2010 at 2:04 PM, K. Richard Pixley <rich at noir.com> wrote:
> Glyph Lefkowitz wrote:
>
> On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote
>
> Hello everyone,
> I have done something similar to this, but I used the children IO
> stream to control them. Maybe I should have done that using some
> higher level protocol, such as AMP or PB.
>
>
> Using a higher-level protocol is generally better, if for no other reason
> that it gives you a framework within which to document your design
> decisions.  It's much easier to say "An AMP command with a 'foo' String
> argument and a 'bar' Integer argument" than to say "The first two bytes of
> the message are the length of the first argument.  The next n bytes are the
> first argument.  The first argument shall be interpreted as... (etc, etc)"
>
> I'm working on an interface right now to the spread toolkit,
> (http://spread.org), which implements virtual synchrony,
> (http://en.wikipedia.org/wiki/Virtual_synchrony).
>
> For distributed, symmetric, fault tolerant parallelism in small to medium
> scale with high reliability, this might be an option.
>
> --rich
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



-- 
Mark Wright
markscottwright at gmail.com


From termim at gmail.com  Wed Feb 24 16:03:20 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Wed, 24 Feb 2010 16:03:20 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B85864F.6090301@noir.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com>
Message-ID: <12aaa0811002241303n53d8ebfeg3665628015fc8a0b@mail.gmail.com>

On Wed, Feb 24, 2010 at 3:04 PM, K. Richard Pixley <rich at noir.com> wrote:
>
> I'm working on an interface right now to the spread toolkit,
> (http://spread.org), which implements virtual synchrony,
> (http://en.wikipedia.org/wiki/Virtual_synchrony).
>
> For distributed, symmetric, fault tolerant parallelism in small to medium
> scale with high reliability, this might be an option.
>

Are you working on the twisted's interface to Spread or on python-Spread
interface like http://zope.org/Members/tim_one/spread ?

Regards,
-- 
Mikhail Terekhov


From t.bordemann at web.de  Wed Feb 24 16:06:38 2010
From: t.bordemann at web.de (Tim Bordemann)
Date: Wed, 24 Feb 2010 22:06:38 +0100
Subject: [Twisted-Python] Newbie question: Is this possible with twisted?
In-Reply-To: <95bb10691002241240j76d3ab70i8ce52e069308548f@mail.gmail.com>
References: <383673302.0.1267042460421.JavaMail.root@mail.onvalue.de>
	<1067095596.2.1267043255773.JavaMail.root@mail.onvalue.de>
	<95bb10691002241240j76d3ab70i8ce52e069308548f@mail.gmail.com>
Message-ID: <1267045598.10278.2.camel@tim-laptop>

Hi Reza.

> However, I'm going to suggest something different, which seems like a
> better fit for what you're trying to do. Check out Celery
> (http://celeryproject.org/) which is a distributed task queue. The
> idea is that you set up a queue system, like RabbitMQ, which implement
> a job queue via Celery. You write tasks as Python functions in a
> module somewhere. When a client connects, you issue a task, and return
> the task id back to the client. By and by the job is picked up by some
> worker, and the result is stored in some persistent database, like
> MySQL or Redis. Celery also has excellent integration with Django.

Great, this seems to be exactly what I am searching for. :)

Cheers,
Tim




From matusis at yahoo.com  Wed Feb 24 16:57:16 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Wed, 24 Feb 2010 13:57:16 -0800
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <4B838615.8060205@thiengineering.ch>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>	<4B7F284B.70801@thiengineering.ch>	<007601cab42a$d4c755e0$7e5601a0$@com>	<201002230324.24883.maarten@treewalker.org>	<007401cab44a$42294160$c67bc420$@com>
	<4B838615.8060205@thiengineering.ch>
Message-ID: <005701cab59c$548fdb40$fdaf91c0$@com>

In desperation of not finding the real memory leak on the production server,

I wrote a test server that I can push to arbitrary high RSS memory. I am far
from sure if this the same leak that I observe in production, but I would
like to understand what this one is. 
This is the server code:

Server.py:

import twisted.protocols.basic
from twisted.internet.protocol import Factory
from twisted.internet import reactor
        
class HiRate(twisted.protocols.basic.LineOnlyReceiver):
        MAX_LENGTH = 20000
        
        def lineReceived(self, line):
                if line == 'get':
                        out = 'a'*4000+'\r\r' 
                        self.transport.write(out)
        
                
                
factory = Factory()
factory.protocol = HiRate
        
reactor.listenTCP(8007, factory, backlog=50, interface='10.18.0.2')
reactor.run()   

This server has to be flooded by "get" requests from this client:

Client.py:

import socket, time

HOST='10.18.0.2'
PORT=8007
def client():
    """high rate client, needs a dedicated CPU to run"""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect((HOST,PORT))
    except socket.error, e:
        print 'client error is %s' %e
        return
    n=0
    while 1:
        #print "iter %s" %n
        #time.sleep(.001)
        s.send('get\r\n')
        s.setblocking(0)
        try:
            r = s.recv(1024)
        except:
            r=0
        while r:
            #print r
            try:
                r=s.recv(1024)
            except socket.error, e:
                r=0
        s.setblocking(1)
        n+=1

client()

To reproduce the memory leak, I either need two machines with fast LAN
between them (since the client program takes 100% CPU), or possibly one
machine with a dual core CPU (I have not tried that). It is important that
client.py is given a separate CPU to run.
When the length of the response from the server is sufficient,  (out =
'a'*4000+'\r\r' ,  4000 is enough in my case), the RSS of the server process
starts to leak without a bound.
If you introduce a small delay in the client (#time.sleep(.001)), the leak
does not occur.

Looking at tcpdump on the server machine, I sometimes see many "get" packets
from the client in a row, that are not followed by response packets from the
server with payload 'aaaaa...'.  Only when the server is in this
"overwhelmed" state, the memory seems to grow unbounded.
I first thought it may be an issue of the unbounded send queue on the
server, but the examination of Send-Q with netstat shows that Send-Q
saturates to a certain ceiling value, while the RSS memory of the server
process continues to grow.  

Here are some commands I was using to watch the parameters of the server:
Watch send-Q and recv-Q:
root$ watch -n1 netstat -an 
RSS memory of the server:
root$ watch -n1 ps -orss -p`netstat -nlp | grep :8007 | awk '{print $7}' |
cut -d/ -f1`
Traffic to/from the server:
root$ tcpdump -A -s10024 -nn -i eth1 'port 8007' (in my case I use eth1 for
LAN to the client)

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Werner Thie
> Sent: Monday, February 22, 2010 11:39 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] debugging a memory leak
> 
> Hi
> 
> Assuming that if memory not released to the OS can be reused by the
> interpreter because of a suballocation system used in the interpreter
> should eventually lead to a leveling out of the overall memory usage
> over time, that's what I observe with our processes (sitting at several
> 100 MB per process). We are using external C libraries which do lots of
> malloc/free and one of the bigger sources of pain is indeed to bring
> such a library to a point where its clean not only by freeing all memory
> allocated in every circumstance but also Python refcounting wise. I
> usually go thru all the motions to build up a complete debug chain for
> all modules involved in a project and write a test bed to proof clean
> and proper implementation.
> 
> So if your using C/C++ based modules in your project I would mark them
> as highly suspicious to be responsible for leaks until proven otherwise.
> 
> Not to bother you with numbers but I usually allocate about 30% of
> overall project time to bring a server into a production ready state,
> meaning uptimes of months/years, no fishy feelings, no performance
> oscillations, predictable caving and recuperating when overloaded, just
> all the things you have to tick to sign off a project as completed,
> meaning you don't have to do daily 'tire kicking' maintenance and
> periodic reboots.
> 
> Werner
> 
> Alec Matusis wrote:
> > Hi Maarten,
> >
> > Your link
> > http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-
> delete-
> > a-large-object.htm
> > seems to suggest that even though the interpreter does not release
memory
> > back to the OS, it can be re-used by the interpreter.
> > If this was our problem, I'd expect the memory to be set by the highest
> > usage, as opposed to it constantly leaking: in my case, the load is
> > virtually constant, but the memory still leaks over time.
> >
> > The environment is Linux 2.6.24 x86-64, the extensions used are MySQLdb,
> > pyCrypto (latest stable releases for both).
> >
> >> -----Original Message-----
> >> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-
> python-
> >> bounces at twistedmatrix.com] On Behalf Of Maarten ter Huurne
> >> Sent: Monday, February 22, 2010 6:24 PM
> >> To: Twisted general discussion
> >> Subject: Re: [Twisted-Python] debugging a memory leak
> >>
> >> On Tuesday 23 February 2010, Alec Matusis wrote:
> >>
> >>> When I start the process, both python object sizes and their counts
rise
> >>> proportionally to the numbers of reconnected clients, and then they
> >>> stabilize after all clients have reconnected.
> >>> At that moment, the "external" RSS process size is about 260MB. The
> >>> "internal size" of all python objects reported by Heapy is about
150MB.
> >>> After two days, the internal sizes/counts stay the same, but the
> > external
> >>> size grows to 1500MB.
> >>>
> >>> Python object counts/total sizes are measured from the manhole.
> >>> Is this sufficient to conclude that this is a C memory leak in one of
> > the
> >>> external modules or in the Python interpreter itself?
> >> In general, there are other reasons why heap size and RSS size do not
> > match:
> >> 1. pages are empty but not returned to the OS
> >> 2. pages cannot be returned to the OS because they are not completely
> > empty
> >> It seems Python has different allocators for small and large objects:
> >> http://www.mail-archive.com/python-list at python.org/msg256116.html
> >> http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-
> >> delete-
> >> a-large-object.htm
> >>
> >> Assuming Python uses malloc for all its allocations (does it?), it is
the
> >> malloc implementation that determines whether empty pages are returned
> to
> >> the OS. Under Linux with glibc (your system?), empty pages are
returned,
> > so
> >> there reason 1 does not apply.
> >>
> >> Depending on the allocation behaviour of Python, the pages may not be
> >> empty
> >> though, so reason 2 is a likely suspect.
> >>
> >> Python extensions written in C could also leak or fragment memory. Are
> you
> >> using any extensions that are not pure Python?
> >>
> >> Bye,
> >> 		Maarten
> >>
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From jml at mumak.net  Thu Feb 25 09:50:12 2010
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 25 Feb 2010 09:50:12 -0500
Subject: [Twisted-Python] Please test 10.0.0pre2!
Message-ID: <d06a5cd31002250650p1e056d9aj9c57675981c776a9@mail.gmail.com>

Hello,

We inch ever closer to the precipice of our collective doom. The sun
will one day burn cold; all things must end; Twisted shall be
released.

I've uploaded 10.0.0pre2 tarballs to
http://people.canonical.com/~jml/Twisted/. The changes since the pre1
are mostly to do with version numbers in documentation, and rolling
back a fix for #3292 that introduced failures on our Fedora test
suite.

I hope to release the final tarball sometime next week.

jml


From rich at noir.com  Thu Feb 25 13:21:03 2010
From: rich at noir.com (K. Richard Pixley)
Date: Thu, 25 Feb 2010 10:21:03 -0800
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <1267042271.2532.200.camel@kratos>
References: <1266777801.2532.176.camel@kratos>	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>	<4B85864F.6090301@noir.com>
	<1267042271.2532.200.camel@kratos>
Message-ID: <4B86BF8F.5050406@noir.com>

Single threaded, event loop based code like twisted rocks hard.

Once upon a time, threads were like that too and the distinction between 
threads and event loops was grey.  But with the advent of mandatory 
preemptive thread scheduling and the ability to run multiple threads on 
separate shared memory processors, the difference between programming 
with threads and programming with parallel heavy weight processes that 
share memory became extremely grey, (aside from the problems debugging 
threads which don't exist for heavy weight processes).

Threads routinely use shared memory and shared memory (generally) 
requires a common kernel.  OTOH, message passing can use a common kernel 
but can also extend out to other machines on the network.  If you use 
twisted for highly efficient "single thread/multiple task" heavy weight 
processes, and something like spread, you end up with the best of all 
worlds.  Highly efficient, symmetric, network based parallelism, with 
fault tolerance thrown in for free.

My point here is that there are other ways to go about exploiting 
symmetric multiprocessor machines, even banks of them, that neither 
require threads, nor the multiprocessing package.

--rich

Darren Govoni wrote:
> Looks interesting. I'm going to check out that package.
>
>
> My original request was more along the lines of using Python's new 
> support for native CPU core's and processes (the multiprocessing 
> package is for this). Python's built-in thread support has global lock 
> constraints that underperform in some situations.
>
> But I ran into a problem using multiprocessing module with Twisted 
> that was pointed out on the Twisted trac with pickling class methods 
> and apparently Python's CPU threading support attempts to do this in 
> some situations (e.g. when I try to pass a class method to a native 
> thread).
>
> On Wed, 2010-02-24 at 12:04 -0800, K. Richard Pixley wrote:
>> Glyph Lefkowitz wrote:
>>> On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote
>>>       
>>>> Hello everyone,
>>>> I have done something similar to this, but I used the children IO
>>>> stream to control them. Maybe I should have done that using some
>>>> higher level protocol, such as AMP or PB.
>>>>     
>>>>         
>>> Using a higher-level protocol is generally better, if for no other reason that it gives you a framework within which to document your design decisions.  It's much easier to say "An AMP command with a 'foo' String argument and a 'bar' Integer argument" than to say "The first two bytes of the message are the length of the first argument.  The next n bytes are the first argument.  The first argument shall be interpreted as... (etc, etc)"
>>>       
>> I'm working on an interface right now to the spread toolkit, 
>> (http://spread.org), which implements virtual synchrony, 
>> (http://en.wikipedia.org/wiki/Virtual_synchrony).
>>
>> For distributed, symmetric, fault tolerant parallelism in small to 
>> medium scale with high reliability, this might be an option.
>>
>> --rich
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>     
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100225/3702680b/attachment.htm 

From rich at noir.com  Thu Feb 25 13:48:31 2010
From: rich at noir.com (K. Richard Pixley)
Date: Thu, 25 Feb 2010 10:48:31 -0800
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <12aaa0811002241303n53d8ebfeg3665628015fc8a0b@mail.gmail.com>
References: <1266777801.2532.176.camel@kratos>	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>	<4B85864F.6090301@noir.com>
	<12aaa0811002241303n53d8ebfeg3665628015fc8a0b@mail.gmail.com>
Message-ID: <4B86C5FF.50701@noir.com>

Mikhail Terekhov wrote:
> On Wed, Feb 24, 2010 at 3:04 PM, K. Richard Pixley <rich at noir.com> wrote:
>   
>> I'm working on an interface right now to the spread toolkit,
>> (http://spread.org), which implements virtual synchrony,
>> (http://en.wikipedia.org/wiki/Virtual_synchrony).
>>
>> For distributed, symmetric, fault tolerant parallelism in small to medium
>> scale with high reliability, this might be an option
> Are you working on the twisted's interface to Spread or on python-Spread
> interface like http://zope.org/Members/tim_one/spread ?
I'm using http://zope.org/Members/tim_one/spread (aka, the debian 
package python-spread, aka the python package SpreadModule), and twisted 
to produce a new, extended interface to twisted.

I'm not sure how long SpreadModule will work for me, but aside from some 
minor questions, (unicode group names, nonblocking IO, 
copying/subclassing it's message types), it's holding up so far.

--rich
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100225/1f706d10/attachment.htm 

From rich at noir.com  Thu Feb 25 13:50:19 2010
From: rich at noir.com (K. Richard Pixley)
Date: Thu, 25 Feb 2010 10:50:19 -0800
Subject: [Twisted-Python] python3 story?
Message-ID: <4B86C66B.8010609@noir.com>

Does twisted have a python3 story?

Whatever it is, it should probably be in the release 10 doc and perhaps 
also on the web site.

--rich


From mithrandi at mithrandi.net  Thu Feb 25 13:59:46 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 25 Feb 2010 20:59:46 +0200
Subject: [Twisted-Python] python3 story?
In-Reply-To: <4B86C66B.8010609@noir.com>
References: <4B86C66B.8010609@noir.com>
Message-ID: <f5eea9171002251059y6eab5c25ja1b541f38af6b2d@mail.gmail.com>

On Thu, Feb 25, 2010 at 8:50 PM, K. Richard Pixley <rich at noir.com> wrote:
> Does twisted have a python3 story?

http://stackoverflow.com/questions/172306/how-are-you-planning-on-handling-the-migration-to-python-3/214601#214601
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From jml at mumak.net  Thu Feb 25 16:39:52 2010
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 25 Feb 2010 16:39:52 -0500
Subject: [Twisted-Python] PyCon sprint 2010
Message-ID: <d06a5cd31002251339m73a804a2pe6cc18d320fa35ef@mail.gmail.com>

Hey guys,

There's a bunch of cool stuff on
http://twistedmatrix.com/trac/wiki/PyconSprint2010 about what we did
at the sprint in PyCon.

I want to write this up & blog about it for labs.tm.com, but before I
do that, I'd like you to look at that page and tell me if anything is
missing -- no matter how small. In particular, if you attended and
your name isn't there, I want to hear from you.

Thanks,
jml


From darren at ontrenet.com  Thu Feb 25 16:43:52 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Thu, 25 Feb 2010 16:43:52 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B86BF8F.5050406@noir.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com> <1267042271.2532.200.camel@kratos>
	<4B86BF8F.5050406@noir.com>
Message-ID: <1267134232.2532.222.camel@kratos>

The nice thing about using Python's process support is that you can
spawn native Processes that run in separate heaps directly from ONE
Python Twisted app. Not many running side-by-side, which adds the
complexity of now coordinating among them (however easy with additional
protocols like spread).

Inter-Process communication is also supported in Python's new
multiprocessing package. And again, it can all be orchestrated from a
single service _instance_.

In my code, I need to run "on the metal" for some tasks and not others.
Agreed, the event-based reactor threading in Twisted is great.
But not for all modes of computation. For those, I offload onto OS
processes directly onto CPU cores. Twisted does not provide a way to
leverage its API against Python's support for this feature. So I have to
find a way to marry the two.

What I ended up doing was using the multiprocess package to kick off
hard Process objects in a Python Process pool executing Python
functions.

Those functions make calls into Twisted, but for it to work, they had to
start their own reactors because a Process has its own, separate OS
memory, etc. Running compute intensive tasks in processes with their own
memory makes a lot of sense for some things that Python cannot do with
virtual machine thread contexts.

Darren

On Thu, 2010-02-25 at 10:21 -0800, K. Richard Pixley wrote:

> Single threaded, event loop based code like twisted rocks hard.
> 
> Once upon a time, threads were like that too and the distinction
> between threads and event loops was grey.  But with the advent of
> mandatory preemptive thread scheduling and the ability to run multiple
> threads on separate shared memory processors, the difference between
> programming with threads and programming with parallel heavy weight
> processes that share memory became extremely grey, (aside from the
> problems debugging threads which don't exist for heavy weight
> processes).
> 
> Threads routinely use shared memory and shared memory (generally)
> requires a common kernel.  OTOH, message passing can use a common
> kernel but can also extend out to other machines on the network.  If
> you use twisted for highly efficient "single thread/multiple task"
> heavy weight processes, and something like spread, you end up with the
> best of all worlds.  Highly efficient, symmetric, network based
> parallelism, with fault tolerance thrown in for free.
> 
> My point here is that there are other ways to go about exploiting
> symmetric multiprocessor machines, even banks of them, that neither
> require threads, nor the multiprocessing package.
> 
> --rich
> 
> Darren Govoni wrote: 
> 
> > Looks interesting. I'm going to check out that package.
> > 
> > 
> > My original request was more along the lines of using Python's new
> > support for native CPU core's and processes (the multiprocessing
> > package is for this). Python's built-in thread support has global
> > lock constraints that underperform in some situations.
> > 
> > But I ran into a problem using multiprocessing module with Twisted
> > that was pointed out on the Twisted trac with pickling class methods
> > and apparently Python's CPU threading support attempts to do this in
> > some situations (e.g. when I try to pass a class method to a native
> > thread).
> > 
> > On Wed, 2010-02-24 at 12:04 -0800, K. Richard Pixley wrote:
> > 
> > > Glyph Lefkowitz wrote: 
> > > 
> > > > On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote
> > > >       
> > > > 
> > > > > Hello everyone,
> > > > > I have done something similar to this, but I used the children IO
> > > > > stream to control them. Maybe I should have done that using some
> > > > > higher level protocol, such as AMP or PB.
> > > > >     
> > > > >         
> > > > 
> > > > Using a higher-level protocol is generally better, if for no other reason that it gives you a framework within which to document your design decisions.  It's much easier to say "An AMP command with a 'foo' String argument and a 'bar' Integer argument" than to say "The first two bytes of the message are the length of the first argument.  The next n bytes are the first argument.  The first argument shall be interpreted as... (etc, etc)"
> > > >       
> > > 
> > > I'm working on an interface right now to the spread toolkit,
> > > (http://spread.org), which implements virtual synchrony,
> > > (http://en.wikipedia.org/wiki/Virtual_synchrony).
> > > 
> > > For distributed, symmetric, fault tolerant parallelism in small to
> > > medium scale with high reliability, this might be an option.
> > > 
> > > --rich 
> > > 
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >     
> > 
> > 
> > 
> > 
> > ____________________________________________________________________
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >   
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100225/0dc7336e/attachment-0001.htm 

From kevin.horn at gmail.com  Thu Feb 25 17:14:35 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 25 Feb 2010 16:14:35 -0600
Subject: [Twisted-Python] PyCon sprint 2010
In-Reply-To: <d06a5cd31002251339m73a804a2pe6cc18d320fa35ef@mail.gmail.com>
References: <d06a5cd31002251339m73a804a2pe6cc18d320fa35ef@mail.gmail.com>
Message-ID: <562bcc11002251414o1b7cfda8s33f4575ebdf666d8@mail.gmail.com>

I was there a bit Sunday night and most of Monday sprinting on the
lore->sphinx docs conversion.  It's _almost_ done.  No really, I mean it!

Kevin Horn (khorn on irc)

On Thu, Feb 25, 2010 at 3:39 PM, Jonathan Lange <jml at mumak.net> wrote:

> Hey guys,
>
> There's a bunch of cool stuff on
> http://twistedmatrix.com/trac/wiki/PyconSprint2010 about what we did
> at the sprint in PyCon.
>
> I want to write this up & blog about it for labs.tm.com, but before I
> do that, I'd like you to look at that page and tell me if anything is
> missing -- no matter how small. In particular, if you attended and
> your name isn't there, I want to hear from you.
>
> Thanks,
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100225/72f28e65/attachment.htm 

From drew.smathers at gmail.com  Thu Feb 25 17:39:45 2010
From: drew.smathers at gmail.com (Drew Smathers)
Date: Thu, 25 Feb 2010 17:39:45 -0500
Subject: [Twisted-Python] PyCon sprint 2010
In-Reply-To: <d06a5cd31002251339m73a804a2pe6cc18d320fa35ef@mail.gmail.com>
References: <d06a5cd31002251339m73a804a2pe6cc18d320fa35ef@mail.gmail.com>
Message-ID: <368574aa1002251439s71220963k88db7dc743090c37@mail.gmail.com>

On Thu, Feb 25, 2010 at 4:39 PM, Jonathan Lange <jml at mumak.net> wrote:

> [snip]

In particular, if you attended and your name isn't there, I want to hear
> from you.
>
>
Hey, I was there for the spring Monday night doing very little beyond
getting acquainted with the review process and submitting a few patches for
some "easy" bugs.  Thanks to the Twisted developers for organizing this
sprint.

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100225/08c40010/attachment.htm 

From johann.borck at densedata.com  Thu Feb 25 20:13:00 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 26 Feb 2010 01:13:00 +0000
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <1267134232.2532.222.camel@kratos>
References: <1266777801.2532.176.camel@kratos>	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>	<4B85864F.6090301@noir.com>
	<1267042271.2532.200.camel@kratos>	<4B86BF8F.5050406@noir.com>
	<1267134232.2532.222.camel@kratos>
Message-ID: <4B87201C.1030809@densedata.com>

Darren Govoni wrote:
> The nice thing about using Python's process support is that you can 
> spawn native Processes that run in separate heaps directly from ONE 
> Python Twisted app. Not many running side-by-side, which adds the 
> complexity of now coordinating among them (however easy with 
> additional protocols like spread).
>
> Inter-Process communication is also supported in Python's new 
> multiprocessing package. And again, it can all be orchestrated from a 
> single service _instance_.
>
> In my code, I need to run "on the metal" for some tasks and not 
> others. Agreed, the event-based reactor threading in Twisted is great.
> But not for all modes of computation. For those, I offload onto OS 
> processes directly onto CPU cores. Twisted does not provide a way to 
> leverage its API against Python's support for this feature. 
But twisted provides this feature *itself*, and has done so long before 
the multiprocessing module existed - look at Process Protocol 
http://twistedmatrix.com/documents/current/core/howto/process.html and 
the stdio stuff: 
http://twistedmatrix.com/documents/current/core/examples/stdiodemo.py, 
or, as has been mentioned before, ampoule. Of course, if you get 
multiprocess to work with twisted, that's fine, but you're probably 
unnecessarily adding complexity to your application while substracting 
compatibility with python versions  before 2.6 for no good reason, at 
least none you mentioned so far.

regards,
Johann


From johann.borck at densedata.com  Thu Feb 25 20:24:13 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 26 Feb 2010 01:24:13 +0000
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <005701cab59c$548fdb40$fdaf91c0$@com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>	<4B7F284B.70801@thiengineering.ch>	<007601cab42a$d4c755e0$7e5601a0$@com>	<201002230324.24883.maarten@treewalker.org>	<007401cab44a$42294160$c67bc420$@com>	<4B838615.8060205@thiengineering.ch>
	<005701cab59c$548fdb40$fdaf91c0$@com>
Message-ID: <4B8722BD.2060900@densedata.com>

Alec Matusis wrote:
> In desperation of not finding the real memory leak on the production server,
>
> I wrote a test server that I can push to arbitrary high RSS memory. I am far
> from sure if this the same leak that I observe in production, but I would
> like to understand what this one is. 
> This is the server code:
>
> Server.py:
>
> import twisted.protocols.basic
> from twisted.internet.protocol import Factory
> from twisted.internet import reactor
>         
> class HiRate(twisted.protocols.basic.LineOnlyReceiver):
>         MAX_LENGTH = 20000
>         
>         def lineReceived(self, line):
>                 if line == 'get':
>                         out = 'a'*4000+'\r\r' 
>                         self.transport.write(out)
>         
>                 
>                 
> factory = Factory()
> factory.protocol = HiRate
>         
> reactor.listenTCP(8007, factory, backlog=50, interface='10.18.0.2')
> reactor.run()   
> [...]
> To reproduce the memory leak, I either need two machines with fast LAN
> between them (since the client program takes 100% CPU), or possibly one
> machine with a dual core CPU (I have not tried that). It is important that
> client.py is given a separate CPU to run.
> When the length of the response from the server is sufficient,  (out =
> 'a'*4000+'\r\r' ,  4000 is enough in my case), the RSS of the server process
> starts to leak without a bound.
> If you introduce a small delay in the client (#time.sleep(.001)), the leak
> does not occur.
>
>   
Hi Alec,
I wouldn't call that a memory leak. In your example  ( SC/s = (n* CS) / 
s ;  n > 1, SC: bytes sent to the client, CS: bytes sent to the server ) 
there is some CS that satifies the condition SC/s > [available 
bandwidth]. For all CS that exceed that limit, the data will be first 
queued in the Send-Q of the socket and then inside twisted, because the 
Send-Q is full. That's the reason why you see increasing memory usage, 
but it's not a leak, it is a server that can not cope with this kind of 
DOS attack. Twisted can not handle this situation for you because that 
would mean it had to decide which packets, connections, etc. to drop. 
Such decisions have to be made by your application.

regards,
Johann



From exarkun at twistedmatrix.com  Thu Feb 25 19:50:59 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 26 Feb 2010 00:50:59 -0000
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <4B8722BD.2060900@densedata.com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
	<4B7F284B.70801@thiengineering.ch>
	<007601cab42a$d4c755e0$7e5601a0$@com>
	<201002230324.24883.maarten@treewalker.org>
	<007401cab44a$42294160$c67bc420$@com>
	<4B838615.8060205@thiengineering.ch>
	<005701cab59c$548fdb40$fdaf91c0$@com>
	<4B8722BD.2060900@densedata.com>
Message-ID: <20100226005059.2792.1034517271.divmod.xquotient.93@localhost.localdomain>

On 01:24 am, johann.borck at densedata.com wrote:
>Alec Matusis wrote:
>>In desperation of not finding the real memory leak on the production 
>>server,
>>
>>I wrote a test server that I can push to arbitrary high RSS memory. I 
>>am far
>>from sure if this the same leak that I observe in production, but I 
>>would
>>like to understand what this one is.
>>This is the server code:
>>
>>Server.py:
>>
>>import twisted.protocols.basic
>>from twisted.internet.protocol import Factory
>>from twisted.internet import reactor
>>
>>class HiRate(twisted.protocols.basic.LineOnlyReceiver):
>>         MAX_LENGTH = 20000
>>
>>         def lineReceived(self, line):
>>                 if line == 'get':
>>                         out = 'a'*4000+'\r\r'
>>                         self.transport.write(out)
>>
>>
>>
>>factory = Factory()
>>factory.protocol = HiRate
>>
>>reactor.listenTCP(8007, factory, backlog=50, interface='10.18.0.2')
>>reactor.run()
>>[...]
>>To reproduce the memory leak, I either need two machines with fast LAN
>>between them (since the client program takes 100% CPU), or possibly 
>>one
>>machine with a dual core CPU (I have not tried that). It is important 
>>that
>>client.py is given a separate CPU to run.
>>When the length of the response from the server is sufficient,  (out =
>>'a'*4000+'\r\r' ,  4000 is enough in my case), the RSS of the server 
>>process
>>starts to leak without a bound.
>>If you introduce a small delay in the client (#time.sleep(.001)), the 
>>leak
>>does not occur.
>Hi Alec,
>I wouldn't call that a memory leak. In your example  ( SC/s = (n* CS) /
>s ;  n > 1, SC: bytes sent to the client, CS: bytes sent to the server 
>)
>there is some CS that satifies the condition SC/s > [available
>bandwidth]. For all CS that exceed that limit, the data will be first
>queued in the Send-Q of the socket and then inside twisted, because the
>Send-Q is full. That's the reason why you see increasing memory usage,
>but it's not a leak, it is a server that can not cope with this kind of
>DOS attack. Twisted can not handle this situation for you because that
>would mean it had to decide which packets, connections, etc. to drop.
>Such decisions have to be made by your application.

You can get notifications about when your send buffers are full by 
registering a producer with the transport. 
http://twistedmatrix.com/documents/current/core/howto/producers.html 
describes the APIs involved.  This will help you make these decisions in 
your application.

Jean-Paul


From darren at ontrenet.com  Thu Feb 25 20:33:52 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Thu, 25 Feb 2010 20:33:52 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B87201C.1030809@densedata.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com> <1267042271.2532.200.camel@kratos>
	<4B86BF8F.5050406@noir.com> <1267134232.2532.222.camel@kratos>
	<4B87201C.1030809@densedata.com>
Message-ID: <1267148032.2532.228.camel@kratos>

What you refer to is different than what I need. The real 'Process'
implementation is new to Python 2.6
http://docs.python.org/library/multiprocessing.html
and is not supported in Twisted at the moment. The Process or threads in
Twisted now, use Python threading/process constructs outside of the new
multiprocessing module, will suffer from the Python GIL limitations -
which hinders higher performance computing.
It works, sure. But its not what I'm asking about.

However, I found a workaround for now.

Ideally, what I wanted to do was use something like
threads.deferToPool() or similar, that _would_ use Python's new support
for OS processes.
Someone wrote a wrapper to this on the net, but I was curious if this
will be supported in Twisted.

Darren

On Fri, 2010-02-26 at 01:13 +0000, Johann Borck wrote:

> Darren Govoni wrote:
> > The nice thing about using Python's process support is that you can 
> > spawn native Processes that run in separate heaps directly from ONE 
> > Python Twisted app. Not many running side-by-side, which adds the 
> > complexity of now coordinating among them (however easy with 
> > additional protocols like spread).
> >
> > Inter-Process communication is also supported in Python's new 
> > multiprocessing package. And again, it can all be orchestrated from a 
> > single service _instance_.
> >
> > In my code, I need to run "on the metal" for some tasks and not 
> > others. Agreed, the event-based reactor threading in Twisted is great.
> > But not for all modes of computation. For those, I offload onto OS 
> > processes directly onto CPU cores. Twisted does not provide a way to 
> > leverage its API against Python's support for this feature. 
> But twisted provides this feature *itself*, and has done so long before 
> the multiprocessing module existed - look at Process Protocol 
> http://twistedmatrix.com/documents/current/core/howto/process.html and 
> the stdio stuff: 
> http://twistedmatrix.com/documents/current/core/examples/stdiodemo.py, 
> or, as has been mentioned before, ampoule. Of course, if you get 
> multiprocess to work with twisted, that's fine, but you're probably 
> unnecessarily adding complexity to your application while substracting 
> compatibility with python versions  before 2.6 for no good reason, at 
> least none you mentioned so far.
> 
> regards,
> Johann
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100225/3e79c305/attachment.htm 

From radix at twistedmatrix.com  Thu Feb 25 20:54:17 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 25 Feb 2010 19:54:17 -0600
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <1267148032.2532.228.camel@kratos>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com> <1267042271.2532.200.camel@kratos>
	<4B86BF8F.5050406@noir.com> <1267134232.2532.222.camel@kratos>
	<4B87201C.1030809@densedata.com> <1267148032.2532.228.camel@kratos>
Message-ID: <60ed19d41002251754p36c817dq7f71aa2623fb6705@mail.gmail.com>

On Thu, Feb 25, 2010 at 7:33 PM, Darren Govoni <darren at ontrenet.com> wrote:
> What you refer to is different than what I need. The real 'Process'
> implementation is new to Python 2.6
> http://docs.python.org/library/multiprocessing.html
> and is not supported in Twisted at the moment. The Process or threads in
> Twisted now, use Python threading/process constructs outside of the new
> multiprocessing module, will suffer from the Python GIL limitations - which
> hinders higher performance computing.
> It works, sure. But its not what I'm asking about.


I think you're a bit confused. You said "use Python threading/process
constructs outside of the new multiprocessing module, will suffer from
the Python GIL limitations".

The "GIL limitations" *only* apply to threads, not processes. You can
take advantage of multiple CPUs in Python by running multiple
processes, no matter what technology you use to start those processes.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From darren at ontrenet.com  Thu Feb 25 21:01:44 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Thu, 25 Feb 2010 21:01:44 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <60ed19d41002251754p36c817dq7f71aa2623fb6705@mail.gmail.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com> <1267042271.2532.200.camel@kratos>
	<4B86BF8F.5050406@noir.com> <1267134232.2532.222.camel@kratos>
	<4B87201C.1030809@densedata.com> <1267148032.2532.228.camel@kratos>
	<60ed19d41002251754p36c817dq7f71aa2623fb6705@mail.gmail.com>
Message-ID: <1267149704.2532.229.camel@kratos>

Thank you for that clarification.

On Thu, 2010-02-25 at 19:54 -0600, Christopher Armstrong wrote:

> On Thu, Feb 25, 2010 at 7:33 PM, Darren Govoni <darren at ontrenet.com> wrote:
> > What you refer to is different than what I need. The real 'Process'
> > implementation is new to Python 2.6
> > http://docs.python.org/library/multiprocessing.html
> > and is not supported in Twisted at the moment. The Process or threads in
> > Twisted now, use Python threading/process constructs outside of the new
> > multiprocessing module, will suffer from the Python GIL limitations - which
> > hinders higher performance computing.
> > It works, sure. But its not what I'm asking about.
> 
> 
> I think you're a bit confused. You said "use Python threading/process
> constructs outside of the new multiprocessing module, will suffer from
> the Python GIL limitations".
> 
> The "GIL limitations" *only* apply to threads, not processes. You can
> take advantage of multiple CPUs in Python by running multiple
> processes, no matter what technology you use to start those processes.
> 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100225/e49ee28e/attachment.htm 

From johann.borck at densedata.com  Thu Feb 25 22:06:03 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 26 Feb 2010 03:06:03 +0000
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <1267148032.2532.228.camel@kratos>
References: <1266777801.2532.176.camel@kratos>	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>	<4B85864F.6090301@noir.com>
	<1267042271.2532.200.camel@kratos>	<4B86BF8F.5050406@noir.com>
	<1267134232.2532.222.camel@kratos>	<4B87201C.1030809@densedata.com>
	<1267148032.2532.228.camel@kratos>
Message-ID: <4B873A9B.60505@densedata.com>

Darren Govoni wrote:
> What you refer to is different than what I need. The real 'Process' 
> implementation is new to Python 2.6
> http://docs.python.org/library/multiprocessing.html
> and is not supported in Twisted at the moment. The Process or threads 
> in Twisted now, use Python threading/process constructs outside of the 
> new multiprocessing module, will suffer from the Python GIL 
> limitations - which hinders higher performance computing.
Hi Darren,
Sometimes "that's wrong" is good news: Python Processes spawned using 
the twisted API twisted don't suffer any more from GIL limitations than 
any other Python Process. That's only true for threads. You seem to 
think the multiprocessing module does something that wasn't possible in 
Python before, but that's not the case, the twisted version just has a 
different API, but does essentially the same thing.

regards,
Johann


From alexandre at quessy.net  Thu Feb 25 21:11:49 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Thu, 25 Feb 2010 21:11:49 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B87201C.1030809@densedata.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com> <1267042271.2532.200.camel@kratos>
	<4B86BF8F.5050406@noir.com> <1267134232.2532.222.camel@kratos>
	<4B87201C.1030809@densedata.com>
Message-ID: <72236ba91002251811i73721b1dv305ae6d180198403@mail.gmail.com>

Hello !

2010/2/25 Johann Borck <johann.borck at densedata.com>:
> Darren Govoni wrote:
>> The nice thing about using Python's process support is that you can
>> spawn native Processes that run in separate heaps directly from ONE
>> Python Twisted app. Not many running side-by-side, which adds the
>> complexity of now coordinating among them (however easy with
>> additional protocols like spread).
>>
>> Inter-Process communication is also supported in Python's new
>> multiprocessing package. And again, it can all be orchestrated from a
>> single service _instance_.
>>
>> In my code, I need to run "on the metal" for some tasks and not
>> others. Agreed, the event-based reactor threading in Twisted is great.
>> But not for all modes of computation. For those, I offload onto OS
>> processes directly onto CPU cores. Twisted does not provide a way to
>> leverage its API against Python's support for this feature.
> But twisted provides this feature *itself*, and has done so long before
> the multiprocessing module existed - look at Process Protocol
> http://twistedmatrix.com/documents/current/core/howto/process.html and
> the stdio stuff:
> http://twistedmatrix.com/documents/current/core/examples/stdiodemo.py,

That's exactly what I have done with my application Lunch, and I am
very satisfied with the results. It can be distributed on many hosts
via SSH ! That comes free with standard IO and process management. You
can get the source code from http://svn.sat.qc.ca/trac/lunch

Cheers,
Alexandre


> or, as has been mentioned before, ampoule. Of course, if you get
> multiprocess to work with twisted, that's fine, but you're probably
> unnecessarily adding complexity to your application while substracting
> compatibility with python versions ?before 2.6 for no good reason, at
> least none you mentioned so far.
>
> regards,
> Johann
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/


From rich at noir.com  Thu Feb 25 22:55:28 2010
From: rich at noir.com (K. Richard Pixley)
Date: Thu, 25 Feb 2010 19:55:28 -0800
Subject: [Twisted-Python] Another newbie question... out of file descriptors?
Message-ID: <4B874630.5070209@noir.com>

Can anyone explain this result to me?

It looks to me as though the SelectReactor is leaking file descriptors.  
Granted, it's a pathological case, but it's not uncommon if you're 
running a bunch of tests.

--rich

rich at black.noir.com> cat demo.py
from twisted.internet.selectreactor import SelectReactor

for i in xrange(1024):
    SelectReactor()
rich at black.noir.com> python demo.py
Traceback (most recent call last):
  File "demo.py", line 4, in <module>
    SelectReactor()
  File 
"/home/rich/projects/sprained/sprained-dev/lib/python2.6/site-packages/Twisted-9.0.0_r28543-py2.6-linux-x86_64.egg/twisted/internet/selectreactor.py", 
line 72, in __init__
    posixbase.PosixReactorBase.__init__(self)
  File 
"/home/rich/projects/sprained/sprained-dev/lib/python2.6/site-packages/Twisted-9.0.0_r28543-py2.6-linux-x86_64.egg/twisted/internet/base.py", 
line 471, in __init__
    self.installWaker()
  File 
"/home/rich/projects/sprained/sprained-dev/lib/python2.6/site-packages/Twisted-9.0.0_r28543-py2.6-linux-x86_64.egg/twisted/internet/posixbase.py", 
line 266, in installWaker
    self.waker = _Waker(self)
  File 
"/home/rich/projects/sprained/sprained-dev/lib/python2.6/site-packages/Twisted-9.0.0_r28543-py2.6-linux-x86_64.egg/twisted/internet/posixbase.py", 
line 128, in __init__
    self.i, self.o = os.pipe()
OSError: [Errno 24] Too many open files
rich at black.noir.com> lsb_release -a
No LSB modules are available.
Distributor ID:    Ubuntu
Description:    Ubuntu lucid (development branch)
Release:    10.04
Codename:    lucid



From exarkun at twistedmatrix.com  Thu Feb 25 23:00:28 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 26 Feb 2010 04:00:28 -0000
Subject: [Twisted-Python] Another newbie question... out of
	file	descriptors?
In-Reply-To: <4B874630.5070209@noir.com>
References: <4B874630.5070209@noir.com>
Message-ID: <20100226040028.2792.693305345.divmod.xquotient.94@localhost.localdomain>

On 03:55 am, rich at noir.com wrote:
>Can anyone explain this result to me?
>
>It looks to me as though the SelectReactor is leaking file descriptors.
>Granted, it's a pathological case, but it's not uncommon if you're
>running a bunch of tests.

See ticket #3063.

Jean-Paul


From glyph at twistedmatrix.com  Thu Feb 25 23:35:49 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 25 Feb 2010 22:35:49 -0600
Subject: [Twisted-Python] Another newbie question... out of file
	descriptors?
In-Reply-To: <20100226040028.2792.693305345.divmod.xquotient.94@localhost.localdomain>
References: <4B874630.5070209@noir.com>
	<20100226040028.2792.693305345.divmod.xquotient.94@localhost.localdomain>
Message-ID: <61B2571F-7D17-4CE5-A40C-15A1D8A83DF8@twistedmatrix.com>


On Feb 25, 2010, at 10:00 PM, exarkun at twistedmatrix.com wrote:

> On 03:55 am, rich at noir.com wrote:
>> Can anyone explain this result to me?
>> 
>> It looks to me as though the SelectReactor is leaking file descriptors.
>> Granted, it's a pathological case, but it's not uncommon if you're
>> running a bunch of tests.
> 
> See ticket #3063.
> 
> Jean-Paul

For your clicking (and google's indexing) enjoyment, that's <http://twistedmatrix.com/trac/ticket/3063>.



From rich at noir.com  Fri Feb 26 01:26:27 2010
From: rich at noir.com (K. Richard Pixley)
Date: Thu, 25 Feb 2010 22:26:27 -0800
Subject: [Twisted-Python] Another newbie question... out of
	file	descriptors?
In-Reply-To: <61B2571F-7D17-4CE5-A40C-15A1D8A83DF8@twistedmatrix.com>
References: <4B874630.5070209@noir.com>	<20100226040028.2792.693305345.divmod.xquotient.94@localhost.localdomain>
	<61B2571F-7D17-4CE5-A40C-15A1D8A83DF8@twistedmatrix.com>
Message-ID: <4B876993.5060608@noir.com>

Glyph Lefkowitz wrote:
> On Feb 25, 2010, at 10:00 PM, exarkun at twistedmatrix.com wrote:
>
>   
>> On 03:55 am, rich at noir.com wrote:
>>     
>>> Can anyone explain this result to me?
>>>
>>> It looks to me as though the SelectReactor is leaking file descriptors.
>>> Granted, it's a pathological case, but it's not uncommon if you're
>>> running a bunch of tests.
>>>       
>> See ticket #3063.
>>
>> Jean-Paul
>>     
>
> For your clicking (and google's indexing) enjoyment, that's <http://twistedmatrix.com/trac/ticket/3063>.
>   
Thanks.

Is it a reasonable workaround, or are there any nonobvious downsides to 
using reactor.waker.connectionLost(None)  either...

a) immediately after instantiating my reactor, (assuming I don't need a 
waker), or...
b) immediately before or after calling reactor.stop

I guess I'm asking why that hasn't been included in reactor.stop already.

--rich
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100225/f5b7305a/attachment.htm 

From glyph at twistedmatrix.com  Fri Feb 26 02:58:33 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 26 Feb 2010 01:58:33 -0600
Subject: [Twisted-Python] Another newbie question... out of file
	descriptors?
In-Reply-To: <4B876993.5060608@noir.com>
References: <4B874630.5070209@noir.com>	<20100226040028.2792.693305345.divmod.xquotient.94@localhost.localdomain>
	<61B2571F-7D17-4CE5-A40C-15A1D8A83DF8@twistedmatrix.com>
	<4B876993.5060608@noir.com>
Message-ID: <0CC7EB77-CDDE-449B-94DE-87C4F1556061@twistedmatrix.com>

On Feb 26, 2010, at 12:26 AM, K. Richard Pixley wrote:

> Is it a reasonable workaround, or are there any nonobvious downsides to using reactor.waker.connectionLost(None)  either...

Yes.  Lots.  This is an _extremely_ hazardous area of Twisted to be mucking around with, as it may appear to work until it completely locks up your process.

> a) immediately after instantiating my reactor, (assuming I don't need a waker), or...

You always need a waker.  Twisted uses threads internally for several things: the two that come to mind immediately are name resolution and signal handling.  If you remove the waker, you will get hangs and crashes.

> b) immediately before or after calling reactor.stop

You need to wait for the reactor to fully shut down (i.e. 'run' exits, not 'stop' has been called) since service cleanup may be asynchronous and need to do things like resolve DNS names and handle further signals during shutdown (especially SIGCHLD, as subprocesses will typically exit during shutdown).

> I guess I'm asking why that hasn't been included in reactor.stop already.

The implementation is tricky, and you have to audit all the internal state that the reactor keeps.  To make matters worse, the test coverage for this area of Twisted is worse than others, because it's old code that works well enough and therefore (A) was written before Twisted had strong quality requirements such as complete test coverage, and (B) since it works well enough, it hasn't been extensively modified and therefore hasn't had to be re-examined to improve its test coverage to 100%.

But please, contribute patches to fix it!  It isn't *that* hard, mostly it's just that we've had lots of other stuff to do.  (See the weekly emails from trac about how many open tickets there are!)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100226/e09d855e/attachment-0001.htm 

From ravikant.4784 at gmail.com  Fri Feb 26 06:45:46 2010
From: ravikant.4784 at gmail.com (Ravikant Patil)
Date: Fri, 26 Feb 2010 17:15:46 +0530
Subject: [Twisted-Python] double slash '//' problem in url - authentication
	with guard.HTTPAuthSessionWrapper
Message-ID: <e5f1e201002260345u62dc7bddu8068fb55fa0de1fc@mail.gmail.com>

Hi,

I am trying to understand how basic authentication can be used with
twisted.web. twistedmatrix provides an example on the same which is
reproduced at

>> *http://pastebin.com/hE5TFpZT
*
when I use this example code to login, it works fine but returns with double
slash '//' in url before index file or rather for any file accessed. like:

>> http://localhost:8889//index.html

it will work for all files with double slash

>> http://localhost:8889//vision.html

but will return index page for any request with single slash

>> http://localhost:8889/anything.html/ will always return index page.

Please help me figuring out what is the problem and what can be possible fix
to it.

Thank you.


Regards,

Ravikant.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100226/81030058/attachment.htm 

From exarkun at twistedmatrix.com  Fri Feb 26 10:40:58 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 26 Feb 2010 15:40:58 -0000
Subject: [Twisted-Python] double slash '//' problem in url
	-	authentication with guard.HTTPAuthSessionWrapper
In-Reply-To: <e5f1e201002260345u62dc7bddu8068fb55fa0de1fc@mail.gmail.com>
References: <e5f1e201002260345u62dc7bddu8068fb55fa0de1fc@mail.gmail.com>
Message-ID: <20100226154058.2792.1949119804.divmod.xquotient.98@localhost.localdomain>




On 11:45 am, ravikant.4784 at gmail.com wrote:
>Hi,
>
>I am trying to understand how basic authentication can be used with
>twisted.web. twistedmatrix provides an example on the same which is
>reproduced at
>>>*http://pastebin.com/hE5TFpZT
>*
>when I use this example code to login, it works fine but returns with 
>double
>slash '//' in url before index file or rather for any file accessed. 
>like:
>>>http://localhost:8889//index.html
>
>it will work for all files with double slash
>>>http://localhost:8889//vision.html
>
>but will return index page for any request with single slash
>>>http://localhost:8889/anything.html/ will always return index page.
>
>Please help me figuring out what is the problem and what can be 
>possible fix
>to it.

With current trunk I can't reproduce this behavior.  If I request 
//index.html or /index.html/, the response is a 404.  If I request 
/index.html or /clients.html, the response is the expected page.

Jean-Paul


From skyepn at gmail.com  Sat Feb 27 08:19:17 2010
From: skyepn at gmail.com (Skye)
Date: Sat, 27 Feb 2010 13:19:17 +0000 (UTC)
Subject: [Twisted-Python] Getting factory with AuthenticatingTelnetProtocol
Message-ID: <loom.20100227T141302-831@post.gmane.org>

Hello,

I used the code from this thread to figure out how to use 
the twisted.conch.telnet.AuthenticatingTelnetProtocol class:

http://www.mail-archive.com/twisted-python at twistedmatrix.com/msg01581.html

(with the addition of av.state = 'Command' in requestAvatar(), it works great)

However, after the handoff to the new protocol MyTelnet, self.factory 
isn't set.  How can I pass along the parent factory from the 
AuthenticatingTelnetProtocol  instance to the StatefulTelnetProtocol instance?

Sorry if this isn't phrased correctly - I'm new to Twisted.  

Thanks,
Skye




From bra at fsn.hu  Sat Feb 27 16:59:46 2010
From: bra at fsn.hu (Attila Nagy)
Date: Sat, 27 Feb 2010 22:59:46 +0100
Subject: [Twisted-Python] Is AMP secure enough for the internet?
Message-ID: <4B8995D2.8040909@fsn.hu>

Hello,

I'm planning a data collector gateway and wondering whether Twisted's
AMP would be good for the task.
AMP seems to be a good fit for the job, but I'm not sure about the
security. I make the client side too, but I won't operate it, bad guys
can take over that side and I want to protect my side.

What would I like to do:
1. authenticate and authorize connecting clients with their SSL certificates
2. securely transfer arbitrary (binary and json) data from and to the
clients (both the server and client would be twisted)
3. protect the server from malicious clients

I have some concerns about all three. For the first, is this OK now:
http://twistedmatrix.com/pipermail/twisted-python/2007-August/015926.html ?
For the second: the server should not be affected by the data which the
client sends. I mean exploiting bugs in the data paths and limited
protection from DoS, like abusing blocking pieces of code and therefore
halting the reactor, or preventing memory overflow (if it sends 3TBs of
data, it shouldn't be queued up in RAM, I should be in control about
what happens in this case, or twisted should be clear measures for
these) etc...
And by the third I mean the above, plus for example if I have only one
command defined for AMP with one string argument then no matter what
happens, the client should only access that function  with that argument
and no other part of the program.

How do you feel, is Twisted and AMP a good choice for that?

Thanks,


From ltaylor.volks at gmail.com  Sat Feb 27 19:43:48 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Sat, 27 Feb 2010 17:43:48 -0700
Subject: [Twisted-Python] Getting factory with
	AuthenticatingTelnetProtocol
In-Reply-To: <loom.20100227T141302-831@post.gmane.org>
References: <loom.20100227T141302-831@post.gmane.org>
Message-ID: <4B89BC44.7090909@gmail.com>

On 2/27/10 6:19 AM, Skye wrote:
> Hello,
> 
> I used the code from this thread to figure out how to use 
> the twisted.conch.telnet.AuthenticatingTelnetProtocol class:
> 
> http://www.mail-archive.com/twisted-python at twistedmatrix.com/msg01581.html
> 
> (with the addition of av.state = 'Command' in requestAvatar(), it works great)
> 
> However, after the handoff to the new protocol MyTelnet, self.factory 
> isn't set.  How can I pass along the parent factory from the 
> AuthenticatingTelnetProtocol  instance to the StatefulTelnetProtocol instance?
> 
> Sorry if this isn't phrased correctly - I'm new to Twisted.  
> 
> Thanks,
> Skye
> 

Rather than pass it around, you could set the factory instance as an
attribute of the transport:

f = protocol.ServerFactory()
f.protocol = lambda: TelnetTransport(AuthenticatingTelnetProtocol, p)
f.protocol.factory = f

then the factory will be available from MyTelnet.transport:

class MyTelnet(StatefulTelnetProtocol):
    def telnet_Command(self, line):
        print "line received via telnet", line
        print "The Server factory is a: %s" % (self.transport.factory)


Lucas


From skyepn at gmail.com  Sat Feb 27 20:12:06 2010
From: skyepn at gmail.com (Skye)
Date: Sun, 28 Feb 2010 01:12:06 +0000 (UTC)
Subject: [Twisted-Python]
	=?utf-8?q?Getting_factory_with=09AuthenticatingT?=
	=?utf-8?q?elnetProtocol?=
References: <loom.20100227T141302-831@post.gmane.org>
	<4B89BC44.7090909@gmail.com>
Message-ID: <loom.20100228T021106-854@post.gmane.org>

Lucas Taylor <ltaylor.volks <at> gmail.com> writes:

> Rather than pass it around, you could set the factory instance as an
> attribute of the transport:
> 

Perfect.  

Thanks!





From exarkun at twistedmatrix.com  Sun Feb 28 00:05:16 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 28 Feb 2010 05:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1267333516.45.836580031@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100228/42e60c92/attachment-0001.htm 

From codeprophecy1 at gmail.com  Sun Feb 28 18:31:36 2010
From: codeprophecy1 at gmail.com (code prophecy)
Date: Sun, 28 Feb 2010 17:31:36 -0600
Subject: [Twisted-Python] autoincrement in axiom
Message-ID: <3700bbff1002281531y327ab3b1l8ce22e211e6b9430@mail.gmail.com>

Hi,

Is there a way to use autoincrement in axiom ? I need a property in my model
that reflects the last  row id after every insert operation. Also, is it
safe to use non-db variables in axiom model ? something like

class test1(Item):
  name = attributes.text()

  surname = "my non db variable"

The interpretor does throw an error but that can be overcome by using
self.__dict__['surname'] = "non db" . Just wanted to know if this is
recommended or not

sorry, if this' already been answered; i did search but couldn't find the
answer.

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100228/24cac92c/attachment.htm 

From mithrandi at mithrandi.net  Sun Feb 28 19:27:40 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 1 Mar 2010 02:27:40 +0200
Subject: [Twisted-Python] autoincrement in axiom
In-Reply-To: <3700bbff1002281531y327ab3b1l8ce22e211e6b9430@mail.gmail.com>
References: <3700bbff1002281531y327ab3b1l8ce22e211e6b9430@mail.gmail.com>
Message-ID: <f5eea9171002281627g7d2e8b0ft1296da8d77e5134@mail.gmail.com>

On Mon, Mar 1, 2010 at 1:31 AM, code prophecy <codeprophecy1 at gmail.com> wrote:
> Is there a way to use autoincrement in axiom ? I need a property in my model
> that reflects the last? row id after every insert operation.

There isn't currently any way to have an autoincrement attribute.
However, the storeID attribute is unique across every Item in a Store;
perhaps this is sufficient for your purposes?

> Also, is it
> safe to use non-db variables in axiom model ? something like
>
> class test1(Item):
> ? name = attributes.text()
>
> ? surname = "my non db variable"
>
> The interpretor does throw an error but that can be overcome by using
> self.__dict__['surname'] = "non db" . Just wanted to know if this is
> recommended or not

You should declare the attribute like this:

surname = attributes.inmemory()

Axiom will then allow you to set the attribute, which will not be
persisted in the database.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From mithrandi at mithrandi.net  Sun Feb 28 19:33:15 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 1 Mar 2010 02:33:15 +0200
Subject: [Twisted-Python] Is AMP secure enough for the internet?
In-Reply-To: <4B8995D2.8040909@fsn.hu>
References: <4B8995D2.8040909@fsn.hu>
Message-ID: <f5eea9171002281633s6ee01b2dp5c6ce27e3acdf4f6@mail.gmail.com>

On Sat, Feb 27, 2010 at 11:59 PM, Attila Nagy <bra at fsn.hu> wrote:
> What would I like to do:
> 1. authenticate and authorize connecting clients with their SSL certificates
> 2. securely transfer arbitrary (binary and json) data from and to the
> clients (both the server and client would be twisted)

If you're using SSL, then points 1 and 2 are the responsibility of
SSL, not AMP, and you should be fine.

> 3. protect the server from malicious clients

I can't really comment on this, as I haven't studied the AMP
implementation much; I think there are some built-in limits which will
protect against certain kinds of resource DoS, but hopefully somebody
else can comment in more detail.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From teratorn at gmail.com  Sun Feb 28 23:09:30 2010
From: teratorn at gmail.com (Eric P. Mangold)
Date: Mon, 01 Mar 2010 15:09:30 +1100
Subject: [Twisted-Python] Is AMP secure enough for the internet?
In-Reply-To: <f5eea9171002281633s6ee01b2dp5c6ce27e3acdf4f6@mail.gmail.com>
References: <4B8995D2.8040909@fsn.hu>
	<f5eea9171002281633s6ee01b2dp5c6ce27e3acdf4f6@mail.gmail.com>
Message-ID: <1267416570.32241.76.camel@Snowflake>

On Mon, 2010-03-01 at 02:33 +0200, Tristan Seligmann wrote:
> On Sat, Feb 27, 2010 at 11:59 PM, Attila Nagy <bra at fsn.hu> wrote:
> > What would I like to do:
> > 1. authenticate and authorize connecting clients with their SSL certificates
> > 2. securely transfer arbitrary (binary and json) data from and to the
> > clients (both the server and client would be twisted)
> 
> If you're using SSL, then points 1 and 2 are the responsibility of
> SSL, not AMP, and you should be fine.
> 
> > 3. protect the server from malicious clients
> 
> I can't really comment on this, as I haven't studied the AMP
> implementation much; I think there are some built-in limits which will
> protect against certain kinds of resource DoS, but hopefully somebody
> else can comment in more detail.

AMP "keys" are limited to 256 bytes and "values" are limited to 64k. So
that will prevent your program from handling a malformed AMP packet that
tries to exceed those limits....

If the AMP parser detects a parsing problem it will drop the connection.

One of the things you will need to implement yourself is preventing an
otherwise legit client from flooding your server with legitimate
requests... this is application-specific, and Twisted can't implement a
generalized protection mechanize here.

There should not be any way for a client to "access" any parts of your
program apart from your pre-defined AMP command-handlers, and anything
else for which you "give" access.

Everything in AMP is length-prefixed, so this precludes any
"quote-escaping" type vulnerabilities.

There shouldn't be any issues with any of the built-in data types that
AMP knows how to handle... if the data doesn't fall within acceptable
parameters Python will thrown an Exception, and I *imagine* that also
results in a connection tear-down, but it's been a while since I've
studied the code in depth.

Good luck, and let us know when you're AMP-DOSing test-suite is
available ;)

-teratorn 




From glyph at twistedmatrix.com  Sun Feb 28 18:34:26 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 28 Feb 2010 17:34:26 -0600
Subject: [Twisted-Python] Is AMP secure enough for the internet?
In-Reply-To: <4B8995D2.8040909@fsn.hu>
References: <4B8995D2.8040909@fsn.hu>
Message-ID: <389E5688-EDCF-4F8B-8223-D90632D40F27@twistedmatrix.com>

On Feb 27, 2010, at 3:59 PM, Attila Nagy wrote:

> Hello,

Hello!

> I'm planning a data collector gateway and wondering whether Twisted's
> AMP would be good for the task.

Yes, I believe so.

> AMP seems to be a good fit for the job, but I'm not sure about the
> security. I make the client side too, but I won't operate it, bad guys
> can take over that side and I want to protect my side.

This is a good rule to live by with any internet protocol :).

> What would I like to do:
> 1. authenticate and authorize connecting clients with their SSL certificates
> 2. securely transfer arbitrary (binary and json) data from and to the
> clients (both the server and client would be twisted)
> 3. protect the server from malicious clients
> 
> I have some concerns about all three. For the first, is this OK now:
> http://twistedmatrix.com/pipermail/twisted-python/2007-August/015926.html ?

I'm not sure what you're asking.  The example given in that message is doing a blocking handshake, which is still a bad idea.  I don't believe the bug being described has been fixed (although I hope someone will correct me and tell me I'm wrong).

However, you can authenticate connections with TLS certificates by using a command that inherits from AMP's StartTLS, and do the verification in the provided callback.

Bootstrapping the TLS connection off of a plaintext connection is generally a better idea anyway, since that way you can support features like virtual hosting - when your client asks to secure the connection, the server can know who the client thinks it is talking to and intermediaries can route the connection to the appropriate back-end endpoint without necessarily understanding the protocol past that point.

> For the second: the server should not be affected by the data which the
> client sends. I mean exploiting bugs in the data paths and limited
> protection from DoS, like abusing blocking pieces of code and therefore
> halting the reactor, or preventing memory overflow (if it sends 3TBs of
> data, it shouldn't be queued up in RAM, I should be in control about
> what happens in this case, or twisted should be clear measures for
> these) etc...

If you really want to harden Twisted's AMP implementation, you'll have to do a bit more work.  Right now, individual AMP keys can only be 255 bytes, individual values are restricted to 65535 bytes, but boxes (messages of key/value pairs) can be arbitrarily big.  It would be good to have a limit which restricted their size, and it would be fairly simple to do.

Really DoS-proof protocols are really hard, but AMP's wire-level design is intentionally simple to make it amenable to lots of implementation hardening against many different types of attack.

In other words, it is not already the protocol code that you want, but it would be easier to make AMP into the code that you want than to start from scratch.

> And by the third I mean the above, plus for example if I have only one
> command defined for AMP with one string argument then no matter what
> happens, the client should only access that function  with that argument
> and no other part of the program.

To my knowledge, AMP is already completely secure in this sense.  I'm not a security auditor, but I would be _very_ surprised if you could execute arbitrary code by sending any sequence of bytes to a simple Twisted AMP server which only took a string argument.

> How do you feel, is Twisted and AMP a good choice for that?

Yes.

Thanks for considering it,

-glyph



From therve at free.fr  Mon Feb  1 01:13:40 2010
From: therve at free.fr (Thomas =?ISO-8859-1?Q?Herv=E9?=)
Date: Mon, 01 Feb 2010 09:13:40 +0100
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
Message-ID: <1265012020.2695.4.camel@brainwave>

Le dimanche 31 janvier 2010 à 22:26 +0000, exarkun at twistedmatrix.com a
écrit :
> Hi all,
> 
> If there are enough interested people, there will be a Twisted sprint at 
> PyCon this year.  If you'll be at PyCon and are interested in sprinting 
> on some Twisted topic, give a shout.  Also, let us know what specific 
> topics you're interested in so we can let other people know what to 
> expect in the general announcement.

I'll be there until Wednesday afternoon. I'm interested in web client,
wsgi container, websocket support, inotify...

-- 
Thomas




From landreville at deadtreepages.com  Mon Feb  1 08:24:07 2010
From: landreville at deadtreepages.com (Landreville)
Date: Mon, 1 Feb 2010 10:24:07 -0500
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <20100130071601.GC2456@steerpike.home.puzzling.org>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<19298.5040.965899.805489@jon.es>
	<20100129101722.GX23607@ruber.office.udmvt.ru>
	<20100130071601.GC2456@steerpike.home.puzzling.org>
Message-ID: <9d748c781002010724p15d96b6fk32df6bab047c736e@mail.gmail.com>

On Sat, Jan 30, 2010 at 2:16 AM, Andrew Bennetts <andrew at bemusement.org> wrote:
> twisted-web at udmvt.ru wrote:
> [...]
>> Is it true, that adding many callback functions as filters is elegant,
>> but impractical solution?
>> Since there is only a [linear] list of pairs (callback, errback), the last errbacks
>> have to be complex to distinguish the failures, that came from the previous callback
>> from failures, that traverse the errback chain from the beginning.
>
> This is no different to regular Python code, which has a linear call stack which
> can have exception handlers at any point on the stack.  The exact same tradeoffs
> apply about which exceptions to raise and which to catch, and at what points.
>
> -Andrew.
>

In normal python code you might put each filter into a try/except
block, wouldn't this be equivalent to putting a callback and errback
(addCallbacks) each time you are adding a callback. So that the
errback would then know which callback (the previous one) failed.



From kevin.horn at gmail.com  Mon Feb  1 09:14:05 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 1 Feb 2010 10:14:05 -0600
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
Message-ID: <562bcc11002010814p28e5da6drb3e8f34fcede47b2@mail.gmail.com>

On Sun, Jan 31, 2010 at 4:26 PM, <exarkun at twistedmatrix.com> wrote:

> Hi all,
>
> If there are enough interested people, there will be a Twisted sprint at
> PyCon this year.  If you'll be at PyCon and are interested in sprinting
> on some Twisted topic, give a shout.  Also, let us know what specific
> topics you're interested in so we can let other people know what to
> expect in the general announcement.
>
> Jean-Paul
>
>
I plan on being around for most of the first day of sprints (22nd).  I'd be
interested in most of the topics listed above, but also getting the Generic
SASL support working, as well as stdio/console support on Win32.

And of course, getting the Twisted Docs transitioned to Sphinx.
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100201/3b7d8ccb/attachment.html>

From terry at jon.es  Mon Feb  1 17:13:39 2010
From: terry at jon.es (Terry Jones)
Date: Mon, 1 Feb 2010 19:13:39 -0500
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: Your message at 14:17:22 on Friday, 29 January 2010
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<19298.5040.965899.805489@jon.es>
	<20100129101722.GX23607@ruber.office.udmvt.ru>
Message-ID: <19303.28211.344816.837753@jon.es>

>>>>> "Alexey" == twisted-web  <twisted-web at udmvt.ru> writes:

Alexey> Is it true, that adding many callback functions as filters is
Alexey> elegant, but impractical solution?

Many callbacks as a filter is elegant & practical.

But there's a difference with errbacks, as people are touching on. That's,
with a bit of hand-waving, because when things are going right there's only
one thing happening - you're in the middle of a computation figuring out
the single result. With errors though, there are multiple types of errors,
many ways of dealing with them, multiple different possible outcomes when
an error occurs.

So the callback chain is great when everything is working, but the errback
chain can sometimes feel like it's not quite the right tool for the job.
But there are some techniques to mitigate that, and I think they work quite
well.

Alexey> Since there is only a [linear] list of pairs (callback, errback),
Alexey> the last errbacks have to be complex to distinguish the failures,
Alexey> that came from the previous callback from failures, that traverse
Alexey> the errback chain from the beginning.

Alexey> Should I only use errbacks as a means of catching errors only from
Alexey> who have produced the Deferred?  And never use them to catch
Alexey> errors, that came from my callbacks?

No. One thing to think about is the flow down the call/errback chain. You
can do something like this.

  d = IReturnADeferred()

  d.addErrback(e1)
  d.addCallback(c1)

  d.addErrback(e2, 'first')

  d.addCallback(c2)
  d.addCallback(c3)
  d.addErrback(e2, 'second')

Here e1 will only get errors created by IReturnADeferred. If
IReturnADeferred has no problem, you're into c1 and e1 is "behind" you on
the call/errback chain. Note that I add e2 to the errback chain twice.
That's a way of having the same function be called for (perhaps) the same
reason, but on the chain in 2 places. By the time the flow of control gets
to c2 or c3, e2 can only be called with 'second' as its argument.

Alexey> Nevertheless the Deferred mechanism always catch the exceptions in
Alexey> my callbacks, I have to always catch them myself and never let them
Alexey> out uncontrolled (since I cannot distinguish, say TypeError that
Alexey> came from the first callback from TypeError, that came from the
Alexey> next callback, and they are not the same for me, since I try to do
Alexey> a cleanup)?  But then I have to translate all errors to my invented
Alexey> exceptions, so they will differ.

See the above example.

Alexey> Or just tell me, that I have missed something, I'm still getting
Alexey> into the theme!

The other thing that's very useful is to write errbacks like this:

  def e1(fail):
    fail.trap(TypeError, KeyError)
    # Do stuff to handle just TypeError, KeyError

  def e2(fail):
    fail.trap(MyException)
    # Do stuff to handle MyException

then you just do

  d = IReturnADeferred()
  d.addErrback(e1)
  d.addErrback(e2)

The fail.trap will cause the function to immediately return the current
failure if it's not one of the mentioned types. See also fail.check (which
is what trap uses).  I.e., go read the source of twisted.python.failure

That approach is nice because you can write your err handling methods
completely separately, and can probably not worry about the order you list
them in, etc. The failure just falls down the errback chain until it hits
something that can deal with it ("trap" it).


Another thing you could do (a bit of a hack) is to add an attribute to a
failure object to mark that you've processed it (e.g., that it has been
logged).

And you might want to read the recent post to this list by Brian Warner
(which I've also been meaning to reply to - hi Brian!). See
http://twistedmatrix.com/pipermail/twisted-python/2010-January/021330.html

Probably others have suggestions on nice ways to handle particular
cases. Those are just some that I've used.

Terry



From mebly5343 at gmail.com  Mon Feb  1 19:15:04 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Mon, 1 Feb 2010 21:15:04 -0500
Subject: [Twisted-Python] How do I get data from a Queue (or "outside") into
	a Telnet Server?
Message-ID: <dc408fe51002011815w2eb0edfaje8b3eabb72e0936a@mail.gmail.com>

Good day, everyone:

I'm trying to learn Python and Twisted at the same time and having fun
(mostly).

I'm writing an application that is collecting data from multiple sources,
filtering the data, and providing it to users through a Telnet server.  I
can set up a polling loop for the server but I can't figure out how to get
send the data to users connected to my server.

I thought I'd put the server in a thread and use a Queue to send data to
it.  But, I could do the work within the server application...

The server I'm playing with, including the polling loop, is:

from twisted.conch.telnet import StatefulTelnetProtocol
from twisted.internet import reactor, protocol

class TelnetEcho(StatefulTelnetProtocol):

    def lineReceived(self, data):
        print "Type of self: " + str(type(self))
        data = data.rstrip('\n\r')
        self.sendLine("Unrecognized command: %r\r" % (data,))


def checkforspots():
    print "running checkforspots()"
    reactor.callLater(1.0,checkforspots)

def createTelnetServer():
    factory = protocol.ServerFactory()

    instance = TelnetEcho
    factory.protocol = instance

    port = reactor.listenTCP(8023,factory)
    print "Listening on port 8023"

    print "Type of port: " + str(type(port))
    checkforspots()

    return port

if __name__ == "__main__":
    reactor.callWhenRunning(createTelnetServer)
    reactor.run()


Any suggestions greatly appreciated.  I've been unable to find anything
using my "google-fu" on this issue - I'm stuck.

Thanks.

Mark Bailey
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100201/711a4d3b/attachment.html>

From warner at lothar.com  Mon Feb  1 23:19:09 2010
From: warner at lothar.com (Brian Warner)
Date: Mon, 01 Feb 2010 22:19:09 -0800
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
Message-ID: <4B67C3DD.6060109@lothar.com>

I'll be there until wednesday afternoon.
 -Brian




From zookog at gmail.com  Tue Feb  2 00:19:25 2010
From: zookog at gmail.com (Zooko O'Whielacronx)
Date: Tue, 2 Feb 2010 00:19:25 -0700
Subject: [Twisted-Python] ANNOUNCING Tahoe, the Least-Authority File System,
	v1.6
Message-ID: <cd6401a1002012319x78b7b4ci33ecbd0538a38ef1@mail.gmail.com>

This highly reliable distributed data store is built on top of
Twisted. Thanks for the excellent tool!

Regards,

Zooko Wilcox-O'Hearn


ANNOUNCING Tahoe, the Least-Authority File System, v1.6

We are pleased to announce the immediate availability of
version 1.6 of Tahoe-LAFS, an extremely reliable distributed
data store.

Tahoe-LAFS is the first cloud storage system which offers
"provider-independent security" -- meaning that not even your
cloud service provider can read or alter your data without your
consent.  Here is the one-page explanation of its unique
security and fault-tolerance properties:

http://allmydata.org/source/tahoe/trunk/docs/about.html

Tahoe-LAFS v1.6.0 is the successor to v1.5.0, which was
released August 1, 2009 [1]. This release includes major
performance improvements, usability improvements, and one major
new feature: deep-immutable directories (cryptographically
unalterable permanent snapshots). See the NEWS file [2] for
details.


WHAT IS IT GOOD FOR?

With Tahoe-LAFS, you spread your filesystem across multiple
servers, and even if some of the servers fail or are taken over
by an attacker, the entire filesystem continues to work
correctly, and continues to preserve your privacy and
security. You can easily and securely share chosen files and
directories with others.

In addition to the core storage system itself, volunteers have
developed related projects to integrate it with other
tools. These include frontends for Windows, Macintosh,
JavaScript, and iPhone, and plugins for Hadoop, bzr, duplicity,
TiddlyWiki, and more. As of this release, contributors have
added an Android frontend and a working read-only FUSE
frontend. See the Related Projects page on the wiki [3].

We believe that the combination of erasure coding, strong
encryption, Free/Open Source Software and careful engineering
make Tahoe-LAFS safer than RAID, removable drive, tape, on-line
backup or other Cloud storage systems.

This software is developed under thorough unit tests, and there
are no known bugs or security flaws which would compromise
confidentiality or data integrity under normal use. (For all
currently known issues please see the known_issues.txt file
[4].)


COMPATIBILITY

This release is fully compatible with the version 1 series of
Tahoe-LAFS. Clients from this release can write files and
directories in the format used by clients of all versions back
to v1.0 (which was released March 25, 2008). Clients from this
release can read files and directories produced by clients of
all versions since v1.0. Servers from this release can serve
clients of all versions back to v1.0 and clients from this
release can use servers of all versions back to v1.0.

This is the seventh release in the version 1 series. The
version 1 series of Tahoe-LAFS will be actively supported and
maintained for the forseeable future, and future versions of
Tahoe-LAFS will retain the ability to read and write files
compatible with Tahoe-LAFS v1.

In addition, version 1.6 improves forward-compatibility with
planned future directory formats, allowing updates to a
directory containing both current and future links, without
loss of information.


LICENCE

You may use this package under the GNU General Public License,
version 2 or, at your option, any later version. See the file
"COPYING.GPL" [5] for the terms of the GNU General Public
License, version 2.

You may use this package under the Transitive Grace Period
Public Licence, version 1 or, at your option, any later
version. (The Transitive Grace Period Public Licence has
requirements similar to the GPL except that it allows you to
wait for up to twelve months after you redistribute a derived
work before releasing the source code of your derived work.)
See the file "COPYING.TGPPL.html" [6] for the terms of the
Transitive Grace Period Public Licence, version 1.

(You may choose to use this package under the terms of either
licence, at your option.)


INSTALLATION

Tahoe-LAFS works on Linux, Mac OS X, Windows, Cygwin, Solaris,
*BSD, and probably most other systems. Start with
"docs/install.html" [7].


HACKING AND COMMUNITY

Please join us on the mailing list [8]. Patches are gratefully
accepted -- the RoadMap page [9] shows the next improvements
that we plan to make and CREDITS [10] lists the names of people
who've contributed to the project. The Dev page [11] contains
resources for hackers.


SPONSORSHIP

Tahoe-LAFS was originally developed thanks to the sponsorship
of Allmydata, Inc. [12], a provider of commercial backup
services. Allmydata founded the Tahoe-LAFS project and
contributed hardware, software, ideas, bug reports,
suggestions, demands, and they employed several Tahoe-LAFS
hackers and instructed them to spend part of their work time on
this Free Software project. Also they awarded customized
t-shirts to hackers who found security flaws in Tahoe-LAFS (see
the Hack Tahoe-LAFS Hall Of Fame [13]). After discontinuing
funding of Tahoe-LAFS R&D in early 2009, Allmydata, Inc. has
continued to provide servers, co-lo space, bandwidth, and small
personal gifts as tokens of appreciation. (Also they continue
to provide bug reports.) Thank you to Allmydata, Inc. for their
generous and public-spirited support.

This is the third release of Tahoe-LAFS to be created solely as
a labor of love by volunteers. Thank you very much to the
dedicated team of "hackers in the public interest" who make
Tahoe-LAFS possible.

Zooko Wilcox-O'Hearn
on behalf of the Tahoe-LAFS team

February 1, 2010
Boulder, Colorado, USA

[1] http://allmydata.org/trac/tahoe/browser/relnotes.txt?rev=4042
[2] http://allmydata.org/trac/tahoe/browser/NEWS?rev=4189
[3] http://allmydata.org/trac/tahoe/wiki/RelatedProjects
[4] http://allmydata.org/trac/tahoe/browser/docs/known_issues.txt
[5] http://allmydata.org/trac/tahoe/browser/COPYING.GPL
[6] http://allmydata.org/source/tahoe/trunk/COPYING.TGPPL.html
[7] http://allmydata.org/source/tahoe/trunk/docs/install.html
[8] http://allmydata.org/cgi-bin/mailman/listinfo/tahoe-dev
[9] http://allmydata.org/trac/tahoe/roadmap
[10] http://allmydata.org/trac/tahoe/browser/CREDITS?rev=4186
[11] http://allmydata.org/trac/tahoe/wiki/Dev
[12] http://allmydata.com
[13] http://hacktahoe.org



From andrew at bemusement.org  Tue Feb  2 02:57:02 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Tue, 2 Feb 2010 20:57:02 +1100
Subject: [Twisted-Python] understanding deferreds
In-Reply-To: <9d748c781002010724p15d96b6fk32df6bab047c736e@mail.gmail.com>
References: <20100128222837.GA5449@anton.digitaltorque.ca>
	<19298.5040.965899.805489@jon.es>
	<20100129101722.GX23607@ruber.office.udmvt.ru>
	<20100130071601.GC2456@steerpike.home.puzzling.org>
	<9d748c781002010724p15d96b6fk32df6bab047c736e@mail.gmail.com>
Message-ID: <20100202095702.GE2456@steerpike.home.puzzling.org>

Landreville wrote:
> On Sat, Jan 30, 2010 at 2:16 AM, Andrew Bennetts <andrew at bemusement.org> wrote:
> > twisted-web at udmvt.ru wrote:
> > [...]
> >> Is it true, that adding many callback functions as filters is elegant,
> >> but impractical solution?
> >> Since there is only a [linear] list of pairs (callback, errback), the last errbacks
> >> have to be complex to distinguish the failures, that came from the previous callback
> >> from failures, that traverse the errback chain from the beginning.
> >
> > This is no different to regular Python code, which has a linear call stack which
> > can have exception handlers at any point on the stack.  The exact same tradeoffs
> > apply about which exceptions to raise and which to catch, and at what points.
> >
> > -Andrew.
> >
> 
> In normal python code you might put each filter into a try/except
> block, wouldn't this be equivalent to putting a callback and errback
> (addCallbacks) each time you are adding a callback. So that the
> errback would then know which callback (the previous one) failed.

Yes and no.

Yes, you could use addCallbacks as you suggest to get a clearer idea of
where an exception was raised from, and that approach certainly suits
some code.

But unless your Python code usually uses bare excepts (“except:” rather
than “except SpecifcException:”), which is generally bad style, you
can't be sure without horrible introspection where precisely in the code
the exception was raised from.  But then, you generally don't need to
know... e.g. it rarely matters where a KeyboardInterrupt happened, you
probably will always want to respond to it the same way.

Again, to mind at least, the tradeoffs of bare excepts vs. specific
exception handlers have very direct parallels with Deferred
callback/errback chains.  Ditto for how much code should be inside a
“try” block, etc.  They are just exception handlers for async code, the
way you should deal with exceptions might be spelled rather differently
but the principles are the same.

-Andrew.




From exarkun at twistedmatrix.com  Tue Feb  2 06:47:43 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 02 Feb 2010 13:47:43 -0000
Subject: [Twisted-Python] How do I get data from a Queue (or
	"outside")	into a Telnet Server?
In-Reply-To: <dc408fe51002011815w2eb0edfaje8b3eabb72e0936a@mail.gmail.com>
References: <dc408fe51002011815w2eb0edfaje8b3eabb72e0936a@mail.gmail.com>
Message-ID: <20100202134743.26099.1216579116.divmod.xquotient.75@localhost.localdomain>

On 02:15 am, mebly5343 at gmail.com wrote:
>Good day, everyone:
>
>I'm trying to learn Python and Twisted at the same time and having fun
>(mostly).
>
>I'm writing an application that is collecting data from multiple 
>sources,
>filtering the data, and providing it to users through a Telnet server. 
>I
>can set up a polling loop for the server but I can't figure out how to 
>get
>send the data to users connected to my server.

What about this specifically are you having difficulty with?  The 
solution should probably be little more than a normal Python method 
call.
>
>I thought I'd put the server in a thread and use a Queue to send data 
>to
>it.  But, I could do the work within the server application...

I'd skip the thread and the queue.  From what you've said so far, there 
doesn't seem to be any reason to involve either.
>
>The server I'm playing with, including the polling loop, is:
>
>from twisted.conch.telnet import StatefulTelnetProtocol
>from twisted.internet import reactor, protocol
>
>class TelnetEcho(StatefulTelnetProtocol):
>
>    def lineReceived(self, data):
>        print "Type of self: " + str(type(self))
>        data = data.rstrip('\n\r')
>        self.sendLine("Unrecognized command: %r\r" % (data,))
>
>
>def checkforspots():
>    print "running checkforspots()"
>    reactor.callLater(1.0,checkforspots)
>
>def createTelnetServer():
>    factory = protocol.ServerFactory()
>
>    instance = TelnetEcho
>    factory.protocol = instance

This isn't exactly wrong, but it's sort of misleading.  You've defined 
the name "instance" here, but it's not bound to an instance.  It's bound 
to the TelnetEcho class.  Since you go on to set "factory.protocol" to 
this, it's right - that attribute is supposed to be a class, not an 
instance - but calling this "instance" suggests you might be confused, 
or it might confuse someone later reading the code.
>
>    port = reactor.listenTCP(8023,factory)
>    print "Listening on port 8023"
>
>    print "Type of port: " + str(type(port))
>    checkforspots()
>
>    return port
>
>if __name__ == "__main__":
>    reactor.callWhenRunning(createTelnetServer)
>    reactor.run()
>
>
>Any suggestions greatly appreciated.  I've been unable to find anything
>using my "google-fu" on this issue - I'm stuck.

It's possible this FAQ entry will help:

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother

Jean-Paul



From mebly5343 at gmail.com  Tue Feb  2 08:45:28 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Tue, 2 Feb 2010 10:45:28 -0500
Subject: [Twisted-Python] How do I get data from a Queue (or "outside")
	into a Telnet Server?
In-Reply-To: <20100202134743.26099.1216579116.divmod.xquotient.75@localhost.localdomain>
References: <dc408fe51002011815w2eb0edfaje8b3eabb72e0936a@mail.gmail.com>
	<20100202134743.26099.1216579116.divmod.xquotient.75@localhost.localdomain>
Message-ID: <dc408fe51002020745x38002195id5ee5e40026db872@mail.gmail.com>

Good day, Jean-Paul:

On Tue, Feb 2, 2010 at 8:47 AM, <exarkun at twistedmatrix.com> wrote:

> On 02:15 am, mebly5343 at gmail.com wrote:
> [...]
>


> What about this specifically are you having difficulty with?
>

Actually, what I was having trouble with was getting an instance of the
protocol class.  (The "instance" was from a
debugging line I forgot to take back out.) The FAQ entry does answer my
questions (which I didn't understand well
enough to ask clearly:-) ):

How do I get access to an instance of the protocol class?  (The answer is to
derive a class from Factory and use that to
store "self" from the protocol class.  The FAQ entry shows exactly how to do
this through the __init__ method - thanks.)

Thanks also for steering me away from complexities like threads and Queue.
callWhenRunning allows me to run in the context
of the reactor and access other Python objects, so that solves my problem.

I will probably end up using a socket for that connection and running the
server as a seperate process - but that is not the
key.


> This isn't exactly wrong, but it's sort of misleading.  You've defined
> the name "instance" here, but it's not bound to an instance.  It's bound
> to the TelnetEcho class.
> [...]
>
> It's possible this FAQ entry will help:
>
>
> http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother
>
> Jean-Paul
>

Thanks again for the very prompt and useful response.

Mark
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100202/55d1d937/attachment.html>

From dialtone at gmail.com  Tue Feb  2 12:59:39 2010
From: dialtone at gmail.com (Valentino Volonghi)
Date: Tue, 2 Feb 2010 11:59:39 -0800
Subject: [Twisted-Python] [ANN] Ampoule 0.2.0 released
Message-ID: <3D0C302D-6F0D-4360-AD4B-0ED9ED84BFE2@gmail.com>

After a LOT of time I am finally, with Canonical Ltd. (Aaron Bentley) help, happy to release a new version of Ampoule.

The changelog is not terribly long, hopefully this means that the library kind of works well for most use cases :).

Have fun!

For those that don't know Ampoule (a lot):

ampoule is a process pool implementation written on top of Twisted Matrix. Its name comes from the use of AMP as the default communication protocol between the pool and all its children. It's different from other alternative solutions because it provides an API that is very close to the ThreadPool built into Twisted itself. It also provides the helper function deferToAMPProcess that is also conceptually similar to deferToThread.

Ampoule 0.2.0 (2010-02-02)
==========================
Changes
--------
  - Fixed bug #317287: Twisted was required by setup.py due to import
      of application code to get the version number. The setup.py now
      tries to do the same thing but if it fails it uses a separate
      hardcoded version.
  - Fixed bug #317077: Ampoule didn't work on windows xp due to childFD
      customization, now on windows ampoule uses the standard 0,1,2 fds.
  - Added pyOpenSSL as an explicit dependency since Twisted doesn't
    require it but AMP does.
  - Greatly simplify setup.py and support plain distutils too.
  - Bootstrap code now supports context managers
  - Support for execution deadline on child calls
  - Parametrize the timeout signal to send to the child
  - Pass arguments directly from the ProcessPool object for the child
    process creation.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.6
http://www.adroll.com/




From radix at twistedmatrix.com  Tue Feb  2 13:13:00 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 2 Feb 2010 14:13:00 -0600
Subject: [Twisted-Python] [ANN] Ampoule 0.2.0 released
In-Reply-To: <3D0C302D-6F0D-4360-AD4B-0ED9ED84BFE2@gmail.com>
References: <3D0C302D-6F0D-4360-AD4B-0ED9ED84BFE2@gmail.com>
Message-ID: <60ed19d41002021213g3df090d4tac4b6990365baaa6@mail.gmail.com>

On Tue, Feb 2, 2010 at 1:59 PM, Valentino Volonghi <dialtone at gmail.com> wrote:
> After a LOT of time I am finally, with Canonical Ltd. (Aaron Bentley) help, happy to release a new version of Ampoule.
>
> The changelog is not terribly long, hopefully this means that the library kind of works well for most use cases :).
>
> Have fun!
>
> For those that don't know Ampoule (a lot):
>
> ampoule is a process pool implementation written on top of Twisted Matrix.

You may want to read
http://glyph.twistedmatrix.com/2010/01/some-common-onomatological-errors.html

There's no project named "Twisted Matrix". It's called "Twisted" :-)

Other than that, thanks very much for the release!

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From drew.smathers at gmail.com  Tue Feb  2 13:32:47 2010
From: drew.smathers at gmail.com (Drew Smathers)
Date: Tue, 2 Feb 2010 15:32:47 -0500
Subject: [Twisted-Python] [ANN] Ampoule 0.2.0 released
In-Reply-To: <60ed19d41002021213g3df090d4tac4b6990365baaa6@mail.gmail.com>
References: <3D0C302D-6F0D-4360-AD4B-0ED9ED84BFE2@gmail.com>
	<60ed19d41002021213g3df090d4tac4b6990365baaa6@mail.gmail.com>
Message-ID: <368574aa1002021232n9ce258dq38bfba10b9219a5b@mail.gmail.com>

On Tue, Feb 2, 2010 at 3:13 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Tue, Feb 2, 2010 at 1:59 PM, Valentino Volonghi <dialtone at gmail.com>
> wrote:
> > After a LOT of time I am finally, with Canonical Ltd. (Aaron Bentley)
> help, happy to release a new version of Ampoule.
> >
> > The changelog is not terribly long, hopefully this means that the library
> kind of works well for most use cases :).
> >
> > Have fun!
> >
> > For those that don't know Ampoule (a lot):
> >
> > ampoule is a process pool implementation written on top of Twisted
> Matrix.
>
> You may want to read
>
> http://glyph.twistedmatrix.com/2010/01/some-common-onomatological-errors.html
>
> There's no project named "Twisted Matrix". It's called "Twisted" :-)
>
> Other than that, thanks very much for the release!
>
>
I think both "Twisted Matrix" and "Twisted Python" have sunk into the common
jargon amongst general Python devs, so maybe the only solution to the
problem is to stop being picky about nomenclature ;)

By the way, the only Google adwords advertising related to Twisted seems to
be on the broad phrase "twisted python", which is kind of interesting.  So
after a little research, I can only conclude that Wingware's Internet
marketing team is responsible for bastardizing the Twisted brand.

(Thanks also for the release; I'm really hoping to evaluate ampoule more and
maybe use in some future projects.)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100202/92ed3b6a/attachment.html>

From drew.smathers at gmail.com  Tue Feb  2 14:13:02 2010
From: drew.smathers at gmail.com (Drew Smathers)
Date: Tue, 2 Feb 2010 16:13:02 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <4B67C3DD.6060109@lothar.com>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<4B67C3DD.6060109@lothar.com>
Message-ID: <368574aa1002021313o78f650abye3360226a7a08851@mail.gmail.com>

On Tue, Feb 2, 2010 at 1:19 AM, Brian Warner <warner at lothar.com> wrote:

> I'll be there until wednesday afternoon.
>  -Brian
>
>
>
I plan on going Monday.  This will be my first Twisted sprint, so don't hold
me to the fire on being super productive.

Not sure what I'll work on yet, but I'd like to revive the idea of a
"Twisted Game" contest similar to PyWeek -- this was mentioned at PyCon
2008.  It would be cool to map out how we could do this if anyone has an
interest in this still.

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100202/38723588/attachment.html>

From jbardin at bu.edu  Tue Feb  2 14:24:08 2010
From: jbardin at bu.edu (james bardin)
Date: Tue, 2 Feb 2010 16:24:08 -0500
Subject: [Twisted-Python] Conch channel blocked
Message-ID: <a3b675321002021324l5e3761baw7794be341819f88@mail.gmail.com>

Hello,

I'm trying to get a feel for twisted.conch, and not getting very far.
I know the documentation is lacking, but I'm not here to complain, I'm
here to figure this out. I only have a cursory knowledge of twisted so
far, so that may be some of my problem. I am however fairly familiar
with the internals of ssh, so I thought I could start there...

I started with the sshsimpleclient example, took some pieces, and
began experimenting.
The example worked as expected.
Next, I wanted to pipe arbitrary data over the channel, as if I called
"ssh hostname 'cat > file'"
This however fills the remote buffer, and hangs

Here's a small example
###############
class ClientConnection(connection.SSHConnection):
    def serviceStarted(self):
        self.openChannel(CatChannel(conn = self))

class CatChannel(channel.SSHChannel):
    name = 'session'
    def channelOpen(self, data):
        d = self.conn.sendRequest(self, 'exec', common.NS('cat >
/tmp/testfile'),
                                  wantReply = 1)
        d.addCallback(self._cbSendRequest)

    def _cbSendRequest(self, ignored):
        f = open('testfile')
        chunk = f.read(4096)
        while chunk:
            self.write(chunk)
            chunk = f.read(4096)
        f.close()
        self.conn.sendEOF(self)
        self.loseConnection()
################


Also, setting the channel name to 'session', sending the 'exec'
request with the command as a netstring, etc. seem like something that
should be abstracted away. SSHSession with request_exec seemed like
the obvious choice, but I had no success in using that class for
anything.

Does anyone know if any projects making good use of twisted.conch,
where I can see the source in action, and in depth?


Thanks,
-jim



From glyph at twistedmatrix.com  Tue Feb  2 14:34:02 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 2 Feb 2010 16:34:02 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <368574aa1002021313o78f650abye3360226a7a08851@mail.gmail.com>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<4B67C3DD.6060109@lothar.com>
	<368574aa1002021313o78f650abye3360226a7a08851@mail.gmail.com>
Message-ID: <88ECB4FF-5517-47C3-A8AA-61F34B44EDC2@twistedmatrix.com>


On Feb 2, 2010, at 4:13 PM, Drew Smathers wrote:

> I plan on going Monday.  This will be my first Twisted sprint, so don't hold me to the fire on being super productive.

Who told you that we hold super-productive people to the fire?  That sounds backwards!  We only put you in the fire if you _aren't_ productive.  ;-)

> Not sure what I'll work on yet, but I'd like to revive the idea of a "Twisted Game" contest similar to PyWeek -- this was mentioned at PyCon 2008.  It would be cool to map out how we could do this if anyone has an interest in this still.

It would be awesome if you could organize that.




From drew.smathers at gmail.com  Tue Feb  2 14:49:31 2010
From: drew.smathers at gmail.com (Drew Smathers)
Date: Tue, 2 Feb 2010 16:49:31 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <88ECB4FF-5517-47C3-A8AA-61F34B44EDC2@twistedmatrix.com>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<4B67C3DD.6060109@lothar.com>
	<368574aa1002021313o78f650abye3360226a7a08851@mail.gmail.com>
	<88ECB4FF-5517-47C3-A8AA-61F34B44EDC2@twistedmatrix.com>
Message-ID: <368574aa1002021349m79f55424xe36ea6b5ae0aad3c@mail.gmail.com>

On Tue, Feb 2, 2010 at 4:34 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Feb 2, 2010, at 4:13 PM, Drew Smathers wrote:
>
> > I plan on going Monday.  This will be my first Twisted sprint, so don't
> hold me to the fire on being super productive.
>
> Who told you that we hold super-productive people to the fire?  That sounds
> backwards!  We only put you in the fire if you _aren't_ productive.  ;-)
>
>
A grammatical mistake on my part: ".. don't hold me to the fire if i'm not
super productive."  From your explanation, it sounds like a Twisted sprint
turns into something like the Donner party expedition; I am afraid now.


> > Not sure what I'll work on yet, but I'd like to revive the idea of a
> "Twisted Game" contest similar to PyWeek -- this was mentioned at PyCon
> 2008.  It would be cool to map out how we could do this if anyone has an
> interest in this still.
>
> It would be awesome if you could organize that.
>
>
 Cool, I'll try to setup another "Twisted for Games" BOF to get the
discussion started.

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100202/b249ffab/attachment.html>

From mebly5343 at gmail.com  Tue Feb  2 19:47:56 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Tue, 2 Feb 2010 21:47:56 -0500
Subject: [Twisted-Python] How do I get data from a Queue (or "outside")
	into a Telnet Server?
In-Reply-To: <20100202134743.26099.1216579116.divmod.xquotient.75@localhost.localdomain>
References: <dc408fe51002011815w2eb0edfaje8b3eabb72e0936a@mail.gmail.com>
	<20100202134743.26099.1216579116.divmod.xquotient.75@localhost.localdomain>
Message-ID: <dc408fe51002021847o70c61f3fw354a12ce97f9f355@mail.gmail.com>

On Feb 2, 2010 8:54 AM, <exarkun at twistedmatrix.com> wrote:

On 02:15 am, mebly5343 at gmail.com wrote:
>Good day, everyone:
>
>>Good day, everyone:
>
>I'm trying to learn Python and Twisted at the same time and having fun
>(mostly).
>
>I'm writing an application that is collecting data from multiple
>sources, filtering the data, and providing it to users through a Telnet
server.
>I can set up a polling loop for the server but I can't figure out how to
>send the data to users connected to my server.
It's possible this FAQ entry will help:

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeinputononeconnectionresultinoutputonanother

Jean-Paul

Thanks, Jean-Paul.  The following appears to do exactly what I want, based
on your FAQ entry.  It reads data from a socket
connection and sends it to clients connected to the Telnet server.  I think
I've captured the correct instances this time.  :-)

Now, I need to work oncollecting the data and play with tksupport to provide
a GUI...!

Thanks again.

Mark

from twisted.conch.telnet import StatefulTelnetProtocol
from twisted.internet import reactor, protocol
from twisted.protocols.basic import LineReceiver

class mySocket(LineReceiver):
    def connectionMade(self):
        self.factory.connection = self
        self.factory.data = []

    def lineReceived(self, line):
        self.factory.data.append(line)

    def connectionLost(self, reason):
        self.factory.connection = None

class mySocketFactory(protocol.Factory):
    protocol = mySocket
    def __init__(self):
        self.connection = None
        self.data = []


class TelnetEcho(StatefulTelnetProtocol):
    def connectionMade(self):
        self.factory.connection = self
        self.sendLine("Welcome to the ClusterMerge 0.9Beta 20100203 telnet
port\r\n\narc >\r")


    def lineReceived(self, data):
        data = data.rstrip('\n\r')

        if data.upper() == 'BYE':
            self.sendLine("Goodbye...\r")
            self.transport.loseConnection()
            self.factory.connection = None
        else:
            self.sendLine("Unrecognized command: %r\r" % (data,))  #  will
implement help, set/filter, and show/filter later

    def connectionLost(self, reason):
        self.factory.connection = None


class TelnetEchoFactory(protocol.Factory):
    protocol = TelnetEcho
    def __init__(self):
        self.connection = None


def checkforspots(telnetinstance, socketinstance):
    while len(socketinstance.data) > 0:
        line = socketinstance.data.pop()
        if telnetinstance.connection:
            telnetinstance.connection.sendLine(line + "\r")

    reactor.callLater(1.0,checkforspots, telnetinstance, socketinstance)

def createTelnetServer(port=7300, myport=7301):
    telnetinstance = TelnetEchoFactory()
    reactor.listenTCP(port,telnetinstance)

    socketinstance = mySocketFactory()
    reactor.listenTCP(myport, socketinstance)

    checkforspots(telnetinstance, socketinstance)


if __name__ == "__main__":
    port = 8023
    reactor.callWhenRunning(createTelnetServer, port)
    reactor.run()




_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100202/6cadc86a/attachment.html>

From raq at cttc.upc.edu  Wed Feb  3 05:48:39 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Wed, 03 Feb 2010 13:48:39 +0100
Subject: [Twisted-Python] Using Twisted and GTK2
Message-ID: <1265201319.9055.40.camel@mundo>

Hi everybody,

I recently new about Twisted and saw it as the best way to deal with a
client/server network application (I use python long time ago). Really
wonderful. I now intend to write a GTK client that can send commands and
transfers files to the server and from it.
I started to learn how to write applications not using 'Perspective
Broker', but when I reached to the example pbgtk2.py to authenticate and
send echo commands, I could no see a way the same with a PB. Is that
true?. Is, anyway the best alternative (I mean PB) to write the
application I intend to?

Thanks in advance
Regards
 
-- 
Ramiro Alba

Centre Tecnològic de Tranferència de Calor
http://www.cttc.upc.edu


Escola Tècnica Superior d'Enginyeries
Industrial i Aeronàutica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que està net.




From free at 64studio.com  Wed Feb  3 07:28:52 2010
From: free at 64studio.com (Free Ekanayaka)
Date: Wed, 03 Feb 2010 15:28:52 +0100
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <1265201319.9055.40.camel@mundo> (Ramiro Alba Queipo's message of
	"Wed, 03 Feb 2010 13:48:39 +0100")
References: <1265201319.9055.40.camel@mundo>
Message-ID: <87636emlzv.fsf@canonical.com>

Hi,

|--==> On Wed, 03 Feb 2010 13:48:39 +0100, Ramiro Alba Queipo <raq at cttc.upc.edu> said:

  RAQ> Hi everybody,
  RAQ> I recently new about Twisted and saw it as the best way to deal with a
  RAQ> client/server network application (I use python long time ago). Really
  RAQ> wonderful. I now intend to write a GTK client that can send commands and
  RAQ> transfers files to the server and from it.
  RAQ> I started to learn how to write applications not using 'Perspective
  RAQ> Broker', but when I reached to the example pbgtk2.py to authenticate and
  RAQ> send echo commands, I could no see a way the same with a PB. Is that
  RAQ> true?. Is, anyway the best alternative (I mean PB) to write the
  RAQ> application I intend to?

If you don't need all the features of PB and something simpler is
enough, you might want to consider AMP:

http://twistedmatrix.com/documents/9.0.0/api/twisted.protocols.amp.html

Cheers,

Free



From raq at cttc.upc.edu  Wed Feb  3 08:13:03 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Wed, 03 Feb 2010 16:13:03 +0100
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <87636emlzv.fsf@canonical.com>
References: <1265201319.9055.40.camel@mundo>  <87636emlzv.fsf@canonical.com>
Message-ID: <1265209983.9055.45.camel@mundo>

Free,

Really interesting. I did not realized, but I do not know if it is too
simple as, I want to use a SQL Database authentication an a view from a
web client.

On Wed, 2010-02-03 at 15:28 +0100, Free Ekanayaka wrote:
> Hi,
> 
> |--==> On Wed, 03 Feb 2010 13:48:39 +0100, Ramiro Alba Queipo <raq at cttc.upc.edu> said:
> 
>   RAQ> Hi everybody,
>   RAQ> I recently new about Twisted and saw it as the best way to deal with a
>   RAQ> client/server network application (I use python long time ago). Really
>   RAQ> wonderful. I now intend to write a GTK client that can send commands and
>   RAQ> transfers files to the server and from it.
>   RAQ> I started to learn how to write applications not using 'Perspective
>   RAQ> Broker', but when I reached to the example pbgtk2.py to authenticate and
>   RAQ> send echo commands, I could no see a way the same with a PB. Is that
>   RAQ> true?. Is, anyway the best alternative (I mean PB) to write the
>   RAQ> application I intend to?
> 
> If you don't need all the features of PB and something simpler is
> enough, you might want to consider AMP:
> 
> http://twistedmatrix.com/documents/9.0.0/api/twisted.protocols.amp.html
> 
> Cheers,
> 
> Free
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-- 
Ramiro Alba

Centre Tecnològic de Tranferència de Calor
http://www.cttc.upc.edu


Escola Tècnica Superior d'Enginyeries
Industrial i Aeronàutica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que està net.




From dripton at ripton.net  Wed Feb  3 12:03:32 2010
From: dripton at ripton.net (David Ripton)
Date: Wed, 3 Feb 2010 11:03:32 -0800
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <1265201319.9055.40.camel@mundo>
References: <1265201319.9055.40.camel@mundo>
Message-ID: <20100203190332.GA737@vidar.dreamhost.com>

On 2010.02.03 13:48:39 +0100, Ramiro Alba Queipo wrote:
> I recently new about Twisted and saw it as the best way to deal with a
> client/server network application (I use python long time ago). Really
> wonderful. I now intend to write a GTK client that can send commands and
> transfers files to the server and from it.
> I started to learn how to write applications not using 'Perspective
> Broker', but when I reached to the example pbgtk2.py to authenticate and
> send echo commands, I could no see a way the same with a PB. Is that
> true?. Is, anyway the best alternative (I mean PB) to write the
> application I intend to?

PB is fine.  AMP or Foolscap might be better for some tasks, but PB is
mature and works.

PB features integration with Cred, which is Twisted's pluggable
authentication mechanism.

http://twistedmatrix.com/documents/current/core/howto/cred.html

Cred is very flexible.  The integration between PB and Cred isn't quite
as flexible, but it works fine for straightforward cases.

If you're looking for larger sample code, I have a game that uses PyGTK
and PB and Cred, here:

http://github.com/dripton/Slugathon

-- 
David Ripton    dripton at ripton.net



From rich at noir.com  Wed Feb  3 17:48:36 2010
From: rich at noir.com (K. Richard Pixley)
Date: Wed, 03 Feb 2010 16:48:36 -0800
Subject: [Twisted-Python] twisted + virtual synchrony
Message-ID: <4B6A1964.3080000@noir.com>

Has anyone done any work towards integrating any virtual synchrony 
system, (like spread - http://spread.org), into twisted?

--rich



From raq at cttc.upc.edu  Thu Feb  4 02:11:51 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Thu, 04 Feb 2010 10:11:51 +0100
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <20100203190332.GA737@vidar.dreamhost.com>
References: <1265201319.9055.40.camel@mundo>
	<20100203190332.GA737@vidar.dreamhost.com>
Message-ID: <1265274711.9055.49.camel@mundo>

Thanks David. I'll take a look on your code

Regards

On Wed, 2010-02-03 at 11:03 -0800, David Ripton wrote:
> On 2010.02.03 13:48:39 +0100, Ramiro Alba Queipo wrote:
> > I recently new about Twisted and saw it as the best way to deal with a
> > client/server network application (I use python long time ago). Really
> > wonderful. I now intend to write a GTK client that can send commands and
> > transfers files to the server and from it.
> > I started to learn how to write applications not using 'Perspective
> > Broker', but when I reached to the example pbgtk2.py to authenticate and
> > send echo commands, I could no see a way the same with a PB. Is that
> > true?. Is, anyway the best alternative (I mean PB) to write the
> > application I intend to?
> 
> PB is fine.  AMP or Foolscap might be better for some tasks, but PB is
> mature and works.
> 
> PB features integration with Cred, which is Twisted's pluggable
> authentication mechanism.
> 
> http://twistedmatrix.com/documents/current/core/howto/cred.html
> 
> Cred is very flexible.  The integration between PB and Cred isn't quite
> as flexible, but it works fine for straightforward cases.
> 
> If you're looking for larger sample code, I have a game that uses PyGTK
> and PB and Cred, here:
> 
> http://github.com/dripton/Slugathon
> 
> -- 
> David Ripton    dripton at ripton.net
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-- 
Ramiro Alba

Centre Tecnològic de Tranferència de Calor
http://www.cttc.upc.edu


Escola Tècnica Superior d'Enginyeries
Industrial i Aeronàutica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que està net.




From gabriel.rossetti at arimaz.com  Thu Feb  4 03:48:28 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Thu, 04 Feb 2010 11:48:28 +0100
Subject: [Twisted-Python] domish.Element.__getattr__() or xpath.XPathQuery
Message-ID: <4B6AA5FC.7070302@arimaz.com>

Hello everyone,

I was wondering what you would recommend, accessing nodes via 
domish.Element.__getattr__()
(e.g. el.node1.node1_1, where el is /msg) or via xpath.XPathQuery()
(e.g. xpath.XPathQuery("/msg/node1/node1_1").queryForNodes(el)[0])?

I was wondering which would be faster, the __getattr__() is O(n) (in my 
example there are 2 calls) but what about xpath.XPathQuery()?

Thank you,
Gabriel



From alexandre at quessy.net  Thu Feb  4 06:23:20 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Thu, 4 Feb 2010 08:23:20 -0500
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <1265274711.9055.49.camel@mundo>
References: <1265201319.9055.40.camel@mundo>
	<20100203190332.GA737@vidar.dreamhost.com>
	<1265274711.9055.49.camel@mundo>
Message-ID: <72236ba91002040523q7bc68c5cq2a668b751aecf334@mail.gmail.com>

Hello everyone,
Though, as far as I know, PB is not transfered in clear text. That
means it's a little harder to debug the TCP streams, using a tool like
Wireshark. Am I wrong?

a

2010/2/4 Ramiro Alba Queipo <raq at cttc.upc.edu>:
> Thanks David. I'll take a look on your code
>
> Regards
>
> On Wed, 2010-02-03 at 11:03 -0800, David Ripton wrote:
>> On 2010.02.03 13:48:39 +0100, Ramiro Alba Queipo wrote:
>> > I recently new about Twisted and saw it as the best way to deal with a
>> > client/server network application (I use python long time ago). Really
>> > wonderful. I now intend to write a GTK client that can send commands and
>> > transfers files to the server and from it.
>> > I started to learn how to write applications not using 'Perspective
>> > Broker', but when I reached to the example pbgtk2.py to authenticate and
>> > send echo commands, I could no see a way the same with a PB. Is that
>> > true?. Is, anyway the best alternative (I mean PB) to write the
>> > application I intend to?
>>
>> PB is fine.  AMP or Foolscap might be better for some tasks, but PB is
>> mature and works.
>>
>> PB features integration with Cred, which is Twisted's pluggable
>> authentication mechanism.
>>
>> http://twistedmatrix.com/documents/current/core/howto/cred.html
>>
>> Cred is very flexible.  The integration between PB and Cred isn't quite
>> as flexible, but it works fine for straightforward cases.
>>
>> If you're looking for larger sample code, I have a game that uses PyGTK
>> and PB and Cred, here:
>>
>> http://github.com/dripton/Slugathon
>>
>> --
>> David Ripton    dripton at ripton.net
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> --
> Ramiro Alba
>
> Centre Tecnològic de Tranferència de Calor
> http://www.cttc.upc.edu
>
>
> Escola Tècnica Superior d'Enginyeries
> Industrial i Aeronàutica de Terrassa
> Colom 11, E-08222, Terrassa, Barcelona, Spain
> Tel: (+34) 93 739 86 46
>
>
> --
> Aquest missatge ha estat analitzat per MailScanner
> a la cerca de virus i d'altres continguts perillosos,
> i es considera que està net.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/



From exarkun at twistedmatrix.com  Thu Feb  4 07:01:57 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 04 Feb 2010 14:01:57 -0000
Subject: [Twisted-Python] Conch channel blocked
In-Reply-To: <a3b675321002021324l5e3761baw7794be341819f88@mail.gmail.com>
References: <a3b675321002021324l5e3761baw7794be341819f88@mail.gmail.com>
Message-ID: <20100204140157.26099.310807650.divmod.xquotient.137@localhost.localdomain>

On 2 Feb, 09:24 pm, jbardin at bu.edu wrote:
>Hello,
>
>I'm trying to get a feel for twisted.conch, and not getting very far.
>I know the documentation is lacking, but I'm not here to complain, I'm
>here to figure this out. I only have a cursory knowledge of twisted so
>far, so that may be some of my problem. I am however fairly familiar
>with the internals of ssh, so I thought I could start there...
>
>I started with the sshsimpleclient example, took some pieces, and
>began experimenting.
>The example worked as expected.
>Next, I wanted to pipe arbitrary data over the channel, as if I called
>"ssh hostname 'cat > file'"
>This however fills the remote buffer, and hangs
>
>Here's a small example
>###############
>class ClientConnection(connection.SSHConnection):
>    def serviceStarted(self):
>        self.openChannel(CatChannel(conn = self))
>
>class CatChannel(channel.SSHChannel):
>    name = 'session'
>    def channelOpen(self, data):
>        d = self.conn.sendRequest(self, 'exec', common.NS('cat >
>/tmp/testfile'),
>                                  wantReply = 1)
>        d.addCallback(self._cbSendRequest)
>
>    def _cbSendRequest(self, ignored):
>        f = open('testfile')
>        chunk = f.read(4096)
>        while chunk:
>            self.write(chunk)
>            chunk = f.read(4096)
>        f.close()
>        self.conn.sendEOF(self)
>        self.loseConnection()
>################
>
>
>Also, setting the channel name to 'session', sending the 'exec'
>request with the command as a netstring, etc. seem like something that
>should be abstracted away. SSHSession with request_exec seemed like
>the obvious choice, but I had no success in using that class for
>anything.

I can't run your example code, since it's not a complete example.  That 
makes it harder to point out what's wrong with it.  However, one thing 
does strike me as wrong:
>        while chunk:
>            self.write(chunk)
>            chunk = f.read(4096)

This is a pattern you typically want to avoid, in Conch or anything else 
Twisted-based.  I don't know if SSHChannel is a consumer, but if not it 
should be, and you should be writing the file using a producer.  See:

http://twistedmatrix.com/documents/current/core/howto/producers.html
>
>Does anyone know if any projects making good use of twisted.conch,
>where I can see the source in action, and in depth?

Mantissa uses Twisted Conch a bit:

http://divmod.org/trac/browser/trunk/Mantissa/xmantissa/terminal.py

But you won't find any code sending any exec requests there.

Jean-Paul



From jbardin at bu.edu  Thu Feb  4 07:20:34 2010
From: jbardin at bu.edu (james bardin)
Date: Thu, 4 Feb 2010 09:20:34 -0500
Subject: [Twisted-Python] Conch channel blocked
In-Reply-To: <20100204140157.26099.310807650.divmod.xquotient.137@localhost.localdomain>
References: <a3b675321002021324l5e3761baw7794be341819f88@mail.gmail.com>
	<20100204140157.26099.310807650.divmod.xquotient.137@localhost.localdomain>
Message-ID: <a3b675321002040620p73d67e2eh1a357266804455f1@mail.gmail.com>

On Thu, Feb 4, 2010 at 9:01 AM,  <exarkun at twistedmatrix.com> wrote:
>
> I can't run your example code, since it's not a complete example.  That
> makes it harder to point out what's wrong with it.  However, one thing
> does strike me as wrong:
>>        while chunk:
>>            self.write(chunk)
>>            chunk = f.read(4096)
>
> This is a pattern you typically want to avoid, in Conch or anything else
> Twisted-based.  I don't know if SSHChannel is a consumer, but if not it
> should be, and you should be writing the file using a producer.  See:
>

It looked awkward, but the one example in the documentation was my
only starting point.
http://twistedmatrix.com/documents/current/conch/howto/conch_client.html

This is only a slightly modified version of that example, which writes
directly through the session channel, which makes sense in the
ssh-protocol, but apparently not here.


> http://twistedmatrix.com/documents/current/core/howto/producers.html
>>

Thanks. I'll see if I can relate that into conch.

>>Does anyone know if any projects making good use of twisted.conch,
>>where I can see the source in action, and in depth?
>
> Mantissa uses Twisted Conch a bit:
>
> http://divmod.org/trac/browser/trunk/Mantissa/xmantissa/terminal.py
>
> But you won't find any code sending any exec requests there.
>

That's OK. any little bit helps.
I have a twisted service, and it needs to tunnel some information
through an ssh channel. Although this would take me a couple minutes
with another library, I feel I should be able to make use of what's
already built in to twisted, and not add another dependency.

-jim



From dripton at ripton.net  Thu Feb  4 08:02:50 2010
From: dripton at ripton.net (David Ripton)
Date: Thu, 4 Feb 2010 07:02:50 -0800
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <72236ba91002040523q7bc68c5cq2a668b751aecf334@mail.gmail.com>
References: <1265201319.9055.40.camel@mundo>
	<20100203190332.GA737@vidar.dreamhost.com>
	<1265274711.9055.49.camel@mundo>
	<72236ba91002040523q7bc68c5cq2a668b751aecf334@mail.gmail.com>
Message-ID: <20100204150249.GA31036@vidar.dreamhost.com>

On 2010.02.04 08:23:20 -0500, Alexandre Quessy wrote:
> Though, as far as I know, PB is not transfered in clear text. That
> means it's a little harder to debug the TCP streams, using a tool like
> Wireshark. Am I wrong?

The PB wire format is documented here:
http://twistedmatrix.com/documents/9.0.0/api/twisted.spread.jelly.html

It's human-readable S-expressions.

-- 
David Ripton    dripton at ripton.net



From exarkun at twistedmatrix.com  Thu Feb  4 08:44:03 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 04 Feb 2010 15:44:03 -0000
Subject: [Twisted-Python] Using Twisted and GTK2
In-Reply-To: <20100204150249.GA31036@vidar.dreamhost.com>
References: <1265201319.9055.40.camel@mundo>
	<20100203190332.GA737@vidar.dreamhost.com>
	<1265274711.9055.49.camel@mundo>
	<72236ba91002040523q7bc68c5cq2a668b751aecf334@mail.gmail.com>
	<20100204150249.GA31036@vidar.dreamhost.com>
Message-ID: <20100204154403.26099.693792219.divmod.xquotient.151@localhost.localdomain>

On 03:02 pm, dripton at ripton.net wrote:
>On 2010.02.04 08:23:20 -0500, Alexandre Quessy wrote:
>>Though, as far as I know, PB is not transfered in clear text. That
>>means it's a little harder to debug the TCP streams, using a tool like
>>Wireshark. Am I wrong?
>
>The PB wire format is documented here:
>http://twistedmatrix.com/documents/9.0.0/api/twisted.spread.jelly.html
>
>It's human-readable S-expressions.

Well, sort of...

Jelly is the first stage of processing, but the output is lists of 
simple Python objects, which you can't put into a socket.  So banana is 
the next stage of processing, which converts the output of jelly into 
bytes.  It's fair to say that banana is not human readable.

Just speaking from personal experience, I've never wanted to get 
wireshark (or similar tools) involved to debug a PB-using applications. 
As an application the developer, the problems encountered when using PB 
are things that are more easily debugged with pdb, unit tests, or 
inserting logging at a higher level (such as the PB message dispatch 
code).  Banana works.  Jelly works.  It's very uncommon for them to get 
in your way.

Jean-Paul



From jakamkon at gmail.com  Thu Feb  4 09:30:59 2010
From: jakamkon at gmail.com (Kuba Konczyk)
Date: Thu, 4 Feb 2010 17:30:59 +0100
Subject: [Twisted-Python] Conch channel blocked
In-Reply-To: <a3b675321002040620p73d67e2eh1a357266804455f1@mail.gmail.com>
References: <a3b675321002021324l5e3761baw7794be341819f88@mail.gmail.com>
	<20100204140157.26099.310807650.divmod.xquotient.137@localhost.localdomain>
	<a3b675321002040620p73d67e2eh1a357266804455f1@mail.gmail.com>
Message-ID: <2e947fbb1002040830k5453c413o2d8b5cb8b07b9a30@mail.gmail.com>

2010/2/4 james bardin <jbardin at bu.edu>:
> On Thu, Feb 4, 2010 at 9:01 AM,  <exarkun at twistedmatrix.com> wrote:
>>
>> I can't run your example code, since it's not a complete example.  That
>> makes it harder to point out what's wrong with it.  However, one thing
>> does strike me as wrong:
>>>        while chunk:
>>>            self.write(chunk)
>>>            chunk = f.read(4096)
>>
>> This is a pattern you typically want to avoid, in Conch or anything else
>> Twisted-based.  I don't know if SSHChannel is a consumer, but if not it
>> should be, and you should be writing the file using a producer.  See:
>>
>
> It looked awkward, but the one example in the documentation was my
> only starting point.
> http://twistedmatrix.com/documents/current/conch/howto/conch_client.html
>
> This is only a slightly modified version of that example, which writes
> directly through the session channel, which makes sense in the
> ssh-protocol, but apparently not here.
>
>
>> http://twistedmatrix.com/documents/current/core/howto/producers.html
>>>
>
> Thanks. I'll see if I can relate that into conch.
>
>>>Does anyone know if any projects making good use of twisted.conch,
>>>where I can see the source in action, and in depth?
>>
>> Mantissa uses Twisted Conch a bit:
>>
>> http://divmod.org/trac/browser/trunk/Mantissa/xmantissa/terminal.py
>>
>> But you won't find any code sending any exec requests there.
>>
>
> That's OK. any little bit helps.
> I have a twisted service, and it needs to tunnel some information
> through an ssh channel. Although this would take me a couple minutes
> with another library, I feel I should be able to make use of what's
> already built in to twisted, and not add another dependency.
Maybe you can use connection forwarding in conch? Have a look at
http://twistedmatrix.com/trac/browser/trunk/twisted/conch/scripts/conch.py
to see how the forwarding API works.

Kuba
>
> -jim
>



From ssteinerx at gmail.com  Thu Feb  4 10:07:06 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 4 Feb 2010 12:07:06 -0500
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <D685EBDD-3589-43CF-A838-CA02408D5F42@twistedmatrix.com>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<D685EBDD-3589-43CF-A838-CA02408D5F42@twistedmatrix.com>
Message-ID: <591BB37C-3D2B-4E4D-AAF3-00AB87E49A59@gmail.com>


On Jan 31, 2010, at 7:05 PM, Glyph Lefkowitz wrote:

> On Jan 31, 2010, at 5:26 PM, exarkun at twistedmatrix.com wrote:
> 
>> If there are enough interested people, there will be a Twisted sprint at 
>> PyCon this year.  If you'll be at PyCon and are interested in sprinting 
>> on some Twisted topic, give a shout.  Also, let us know what specific 
>> topics you're interested in so we can let other people know what to 
>> expect in the general announcement.
> 
> I will be there for one day of the sprints.  I'm interested in web2

By "web2" do you mean porting more of web2 back to web?

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100204/0a661745/attachment-0001.html>

From ssteinerx at gmail.com  Thu Feb  4 14:16:09 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 4 Feb 2010 16:16:09 -0500
Subject: [Twisted-Python] web2 -> web ToDo List
Message-ID: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>

While I see tickets in the tracker for web2 and others for web, I couldn't find a 'cherry pick' list of things to be moved from web2 back into web.

Is there one?

Thanks,

S




From kevin.horn at gmail.com  Fri Feb  5 11:15:46 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 12:15:46 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
Message-ID: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>

This time on "How the Docs Conversion Turns"...

Moving along at about the same pace, but this time have some very visible
results!

Here's the latest:

    - The generated toctree directives now preserve the order of the links
      from the original source documents.  This makes the "prev"/"next"
links
      work in a sane fashion in the resulting Sphinx docs.

    - Comments in Lore docs are now translated properly.

    - You want Trac integration?  I got your Trac integration right here!

      http://twistedsphinx.funsize.net/

      OK, so it's not quite done yet, but I was pretty impressed at the
      results of what amounts to about a day's work.  It still needs some
      tweaks here and there, but I'm mostly satisfied with it.  If there
      are any CSS gurus out there who are willing to take a look at this,
      there are a few spots that are giving me fits.  Send me an email or
      look me up on IRC.

      In any case, I'd appreciate it if everyone would take a look and
      tell me what they think.

      (Disclaimer: I haven't really tested this in anything but Firefox,
except
      for a brief glance in IE, so if people could test it out in Safari,
etc.
      that would be helpful)

    - The previous look (which was just the default theme, with a color
      scheme to match the Twisted website) has been moved into it's own
      Sphinx theme.  Sphinx's theme inheritance made this really easy.
      This way people can build the docs with the "old" look if they wish,
      or maybe we can use it for docs tarballs or .CHM files or something.

Still to come:

    - <code class="API"> tags still need handling.

    - Certain links need special handling as they don't quite display
properly.

    - "Inline markup" still needs a bit more work.

    - XHTML entities need resolving, but as I've mentioned previously, this
      will probably be the very last thing I address.

All in all, I think this is starting to come together.  I'm hoping to have
the rest completed by PyCon, but if I don't manage that, I'll probably
sprint on this on Monday.

code is here: http://bitbucket.org/khorn/lore2sphinx/

current converted docs here: http://twistedsphinx.funsize.net/

Until next time..


Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/b302cb33/attachment.html>

From terry at jon.es  Fri Feb  5 12:00:27 2010
From: terry at jon.es (Terry Jones)
Date: Fri, 5 Feb 2010 14:00:27 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: Your message at 12:15:46 on Friday, 5 February 2010
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
Message-ID: <19308.27339.33450.515148@jon.es>

Hi Kevin

I think this is looking really good. Here are a few superficial / quick
comments.

 - It looks fine under Google chrome

 - You could reduce visual repetition / density of some of the high-level
   pages by taking out a word like "Documentation" which appears in the
   heading and on every line of things like this:

         Twisted Documentation Table of Contents
            Twisted Conch Documentation
            Twisted Core Documentation
            Historical Documents
            Twisted Lore Documentation
            Twisted Mail Documentation
            Twisted Names Documentation
            Twisted Pair Documentation
            Twisted VFS Documentation
            Twisted Web Documentation
            Twisted Web2 Documentation
            Twisted Words Documentation

   See also http://twistedsphinx.funsize.net/contents.html which is very
   cluttered with repeated content.

   I realize these are probably just being picked up out of the .rst header
   line, and that one of those documents when seen in isolation probably
   should have a full title. I'm not sure how best to simplify the
   top-level, though I guess it's possible to extend the sphinx layout.html
   and override something... may be more trouble than it's worth.

 - I think it would improve appearance a little to have a non-intrusive
   border around the green source code boxes.

I'll see if I can find/make time to have a look at the CSS.

Terry



From terry at jon.es  Fri Feb  5 12:11:28 2010
From: terry at jon.es (Terry Jones)
Date: Fri, 5 Feb 2010 14:11:28 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: Your message at 14:00:27 on Friday, 5 February 2010
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
Message-ID: <19308.28000.743189.199484@jon.es>

>  - It looks fine under Google chrome

Argh, having said that, I just noticed the table of contents is below and
to the right of the main page content.  An example page that exhibits this
is http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html

Terry



From kevin.horn at gmail.com  Fri Feb  5 12:19:00 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 13:19:00 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <19308.27339.33450.515148@jon.es>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
Message-ID: <562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>

On Fri, Feb 5, 2010 at 1:00 PM, Terry Jones <terry at jon.es> wrote:

> Hi Kevin
>
> I think this is looking really good. Here are a few superficial / quick
> comments.
>
>  - It looks fine under Google chrome
>

Good to hear!

  - You could reduce visual repetition / density of some of the high-level
>   pages by taking out a word like "Documentation" which appears in the
>   heading and on every line of things like this:
>
>         Twisted Documentation Table of Contents
>            Twisted Conch Documentation
>            Twisted Core Documentation
>            Historical Documents
>            Twisted Lore Documentation
>            Twisted Mail Documentation
>            Twisted Names Documentation
>            Twisted Pair Documentation
>            Twisted VFS Documentation
>            Twisted Web Documentation
>            Twisted Web2 Documentation
>            Twisted Words Documentation
>
>   See also http://twistedsphinx.funsize.net/contents.html which is very
>   cluttered with repeated content.
>
>   I realize these are probably just being picked up out of the .rst header
>   line, and that one of those documents when seen in isolation probably
>   should have a full title. I'm not sure how best to simplify the
>   top-level, though I guess it's possible to extend the sphinx layout.html
>   and override something... may be more trouble than it's worth.
>

A lot of this is because the auto-generated TOC is being shown, and it is
indeed picking up the document titles out of the source file it happens to
be pointing to.  In the final version, I'm thinking we won't really need to
show the toctrees at all, since most of the docs have index files already
(which I'm generating the toctree directives from), so most of this will
"fix itself".


>  - I think it would improve appearance a little to have a non-intrusive
>   border around the green source code boxes.
>

Not a bad idea.  Or maybe an "outline" instead of a "border"?


> I'll see if I can find/make time to have a look at the CSS.
>

That would be really great.  There are a few things that are driving me
bonkers.  For example: the prev/next/index links on the right hand side of
the gray navbar are 1 freakin' pixel lower than the "breadcrumb" links on
the left hand side of the same navbar () at least on this machine), and I
have no idea why.


> Terry
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/927a462a/attachment.html>

From kevin.horn at gmail.com  Fri Feb  5 12:21:56 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 13:21:56 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <19308.28000.743189.199484@jon.es>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es> <19308.28000.743189.199484@jon.es>
Message-ID: <562bcc11002051121t1c2d2201kb17c7009384bc0c4@mail.gmail.com>

On Fri, Feb 5, 2010 at 1:11 PM, Terry Jones <terry at jon.es> wrote:

> >  - It looks fine under Google chrome
>
> Argh, having said that, I just noticed the table of contents is below and
> to the right of the main page content.  An example page that exhibits this
> is http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html
>
>
I think this has to do with the (extremely hackish, and certainly not very
solid) way that the layout is done at the moment.  It's a combination of
Trac and Sphinx layout, so it ends up kinda goofy, with strange floats and
negative margins and whatnot (though not in a way that makes sense to me).

I don't see the problem you describe unless I shrink my browser down below a
certain minimum size.  It could certainly stand improvement.


> Terry
>
>
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/0c13ab1e/attachment.html>

From ssteinerx at gmail.com  Fri Feb  5 12:22:19 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 5 Feb 2010 14:22:19 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <19308.28000.743189.199484@jon.es>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<19308.28000.743189.199484@jon.es>
Message-ID: <8CEAF4A9-774A-4AD6-B42F-8F6476DE6ABB@gmail.com>


On Feb 5, 2010, at 2:11 PM, Terry Jones wrote:

>> - It looks fine under Google chrome
> 
> Argh, having said that, I just noticed the table of contents is below and
> to the right of the main page content.  An example page that exhibits this
> is http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html

It looks fine in Firefox and I'll bet if you just make sure these 4 errors are cleared up, it'll be fine in Chrome, too.

http://validator.w3.org/check?verbose=1&uri=http%3A%2F%2Ftwistedsphinx.funsize.net%2Fprojects%2Fconch%2Fhowto%2Fconch_client.html

S




From ssteinerx at gmail.com  Fri Feb  5 12:25:42 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 5 Feb 2010 14:25:42 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <19308.28000.743189.199484@jon.es>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<19308.28000.743189.199484@jon.es>
Message-ID: <87DED872-6693-4CE2-A36E-C89F3C0F6724@gmail.com>


On Feb 5, 2010, at 2:11 PM, Terry Jones wrote:

>> - It looks fine under Google chrome
> 
> Argh, having said that, I just noticed the table of contents is below and
> to the right of the main page content.  An example page that exhibits this
> is http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html

Looks fine in Chrome 4.0.249.49 (35163) beta on OS X.  

Gotta love that version number; looks like a Microsoft IE version number; scary.

S




From kevin.horn at gmail.com  Fri Feb  5 12:26:44 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 13:26:44 -0600
Subject: [Twisted-Python] Lore 2 Sphinx addendum: Divmod docs
Message-ID: <562bcc11002051126l2f6554bah7377545ab41c7d74@mail.gmail.com>

For those that are interested, my current Sphinx versions of the docs for
the 3 Divmod projects that have Lore-format docs (Epsilon, Mantissa, and
Nevow) are here:

http://divmodsphinx.funsize.net/

They just use the default Sphinx theme at the moment.

Enjoy!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/0371985c/attachment.html>

From terry at jon.es  Fri Feb  5 12:33:28 2010
From: terry at jon.es (Terry Jones)
Date: Fri, 5 Feb 2010 14:33:28 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: Your message at 13:19:00 on Friday, 5 February 2010
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
Message-ID: <19308.29320.906563.206155@jon.es>

Hi Kevin

I just tried building under Python 2.5.2 and got this:

    $ python lore2sphinx.py
    Traceback (most recent call last):
      File "lore2sphinx.py", line 32, in <module>
        from table import Table
      File "/home/terry/s/net/lore2sphinx/table.py", line 214
        row_lines = list(izip_longest(*row_split, fillvalue=''))
                                                          ^
    SyntaxError: invalid syntax

>From a quick look at table.py, I don't see the problem.  I have to go to a
meeting now, so can't dig into it ATM. Also, I have Spinx 0.6.3 installed,
not 0.6.4

BTW, why is there a Python 2.6 requirement?  I wrote all the FluidDB docs
in Sphinx with 2.5 (http://doc.fluidinfo.com/fluidDB/).

Terry



From kevin.horn at gmail.com  Fri Feb  5 13:16:50 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 14:16:50 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <19308.29320.906563.206155@jon.es>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
	<19308.29320.906563.206155@jon.es>
Message-ID: <562bcc11002051216s3c114566ld53e0e59e77218f1@mail.gmail.com>

On Fri, Feb 5, 2010 at 1:33 PM, Terry Jones <terry at jon.es> wrote:

> Hi Kevin
>
> I just tried building under Python 2.5.2 and got this:
>
>    $ python lore2sphinx.py
>    Traceback (most recent call last):
>      File "lore2sphinx.py", line 32, in <module>
>        from table import Table
>      File "/home/terry/s/net/lore2sphinx/table.py", line 214
>        row_lines = list(izip_longest(*row_split, fillvalue=''))
>                                                          ^
>    SyntaxError: invalid syntax
>
> From a quick look at table.py, I don't see the problem.  I have to go to a
> meeting now, so can't dig into it ATM. Also, I have Spinx 0.6.3 installed,
> not 0.6.4
>

That's odd...I have no idea what's going on there.  I'm actually kind of
surprised you even got that far...see below.


> BTW, why is there a Python 2.6 requirement?  I wrote all the FluidDB docs
> in Sphinx with 2.5 (http://doc.fluidinfo.com/fluidDB/).
>
> Terry
>

The original reason for it was because I wanted to use (and am using)
os.path.relpath, which was (according to the Python docs) introduced in
Python 2.6.  It also happeed to be what I had installed on this machine.
Since I decided to use 2.6, though, some other 2.6-only stuff might have
snuck in, though nothing comes to mind at the moment.

If you feel like modifying the code to work on 2.5, please feel free, though
since this tool should only be used "for real" a couple of times, I don't
think it's worth spending a whole lot of effort on, unless you just feel
like helping out and are stuck on 2.5.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/c1596f30/attachment.html>

From kevin.horn at gmail.com  Fri Feb  5 13:18:56 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 14:18:56 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <562bcc11002051216s3c114566ld53e0e59e77218f1@mail.gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
	<19308.29320.906563.206155@jon.es>
	<562bcc11002051216s3c114566ld53e0e59e77218f1@mail.gmail.com>
Message-ID: <562bcc11002051218n895830dgd4f6aa1ca4e214f7@mail.gmail.com>

On Fri, Feb 5, 2010 at 2:16 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Fri, Feb 5, 2010 at 1:33 PM, Terry Jones <terry at jon.es> wrote:
>
>> Hi Kevin
>>
>> I just tried building under Python 2.5.2 and got this:
>>
>>    $ python lore2sphinx.py
>>    Traceback (most recent call last):
>>      File "lore2sphinx.py", line 32, in <module>
>>        from table import Table
>>      File "/home/terry/s/net/lore2sphinx/table.py", line 214
>>        row_lines = list(izip_longest(*row_split, fillvalue=''))
>>                                                          ^
>>    SyntaxError: invalid syntax
>>
>> From a quick look at table.py, I don't see the problem.  I have to go to a
>> meeting now, so can't dig into it ATM. Also, I have Spinx 0.6.3 installed,
>> not 0.6.4
>>
>
> That's odd...I have no idea what's going on there.  I'm actually kind of
> surprised you even got that far...see below.
>
>
>
After looking at this some more, it looks as though "izip_longest" is the
culprit...introduced in 2.6.

Why its giving a syntax error, though, is beyond me.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/d4878428/attachment.html>

From mithrandi at mithrandi.net  Fri Feb  5 13:38:33 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 5 Feb 2010 22:38:33 +0200
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <562bcc11002051218n895830dgd4f6aa1ca4e214f7@mail.gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
	<19308.29320.906563.206155@jon.es>
	<562bcc11002051216s3c114566ld53e0e59e77218f1@mail.gmail.com>
	<562bcc11002051218n895830dgd4f6aa1ca4e214f7@mail.gmail.com>
Message-ID: <f5eea9171002051238i6ee19123i16fb29615ad0172f@mail.gmail.com>

On Fri, Feb 5, 2010 at 10:18 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> After looking at this some more, it looks as though "izip_longest" is the
> culprit...introduced in 2.6.
>
> Why its giving a syntax error, though, is beyond me.

The problem is the function call syntax:

>>>        row_lines = list(izip_longest(*row_split, fillvalue=''))
>>>                                                          ^
>>>    SyntaxError: invalid syntax

You have keyword arguments after *args, and this is only valid in 2.6 and up.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From kevin.horn at gmail.com  Fri Feb  5 13:44:44 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 14:44:44 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <8CEAF4A9-774A-4AD6-B42F-8F6476DE6ABB@gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es> <19308.28000.743189.199484@jon.es>
	<8CEAF4A9-774A-4AD6-B42F-8F6476DE6ABB@gmail.com>
Message-ID: <562bcc11002051244y2975d61cr795a9a04fff1d222@mail.gmail.com>

On Fri, Feb 5, 2010 at 1:22 PM, ssteinerX at gmail.com <ssteinerx at gmail.com>wrote:

>
> On Feb 5, 2010, at 2:11 PM, Terry Jones wrote:
>
> >> - It looks fine under Google chrome
> >
> > Argh, having said that, I just noticed the table of contents is below and
> > to the right of the main page content.  An example page that exhibits
> this
> > is
> http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html
>
> It looks fine in Firefox and I'll bet if you just make sure these 4 errors
> are cleared up, it'll be fine in Chrome, too.
>
>
> http://validator.w3.org/check?verbose=1&uri=http%3A%2F%2Ftwistedsphinx.funsize.net%2Fprojects%2Fconch%2Fhowto%2Fconch_client.html
>
> S
>
>
>
Hmmm...that part of the template is straight out of Sphinx proper.  I wonder
if it's because the Sphinx templates use a TRANSITIONAL doctype, while I'm
using STRICT (since that's what the Trac site uses)...

I'm not entirely convinced that these are real errors, though.  The <input>
elements are inside a <form>, which are only inside <div>s (and of course
<body> and <html>).

(goes looking on the intarwebz)

Huh.  Apparently you aren't allowed to put <input>s directly in <form>s.
You have to use a <p> or <fieldset> or something to wrap it.  That's
extremely goofy.  Wonder why I've never run into that before...

Guess I don't use XHTML STRICT very often.  Seems it's valid in
TRANSITIONAL.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/cb14f0ea/attachment.html>

From kevin.horn at gmail.com  Fri Feb  5 13:48:14 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 14:48:14 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <f5eea9171002051238i6ee19123i16fb29615ad0172f@mail.gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
	<19308.29320.906563.206155@jon.es>
	<562bcc11002051216s3c114566ld53e0e59e77218f1@mail.gmail.com>
	<562bcc11002051218n895830dgd4f6aa1ca4e214f7@mail.gmail.com>
	<f5eea9171002051238i6ee19123i16fb29615ad0172f@mail.gmail.com>
Message-ID: <562bcc11002051248s362314e3m167259682e5385ab@mail.gmail.com>

On Fri, Feb 5, 2010 at 2:38 PM, Tristan Seligmann
<mithrandi at mithrandi.net>wrote:

> On Fri, Feb 5, 2010 at 10:18 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> > After looking at this some more, it looks as though "izip_longest" is the
> > culprit...introduced in 2.6.
> >
> > Why its giving a syntax error, though, is beyond me.
>
> The problem is the function call syntax:
>
> >>>        row_lines = list(izip_longest(*row_split, fillvalue=''))
> >>>                                                          ^
> >>>    SyntaxError: invalid syntax
>
> You have keyword arguments after *args, and this is only valid in 2.6 and
> up.
> --
> mithrandi, i Ainil en-Balandor, a faer Ambar
>
>
Ah, thanks for that.  I don't typically use that syntax, and I thought it
looked kind of goofy, but that's the way the signature for izip_longest is
in the docs, so I used it there.  And since it was introduced in 2.6...

All makes sense now...

Thanks again!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/d5db70f7/attachment.html>

From ssteinerx at gmail.com  Fri Feb  5 14:45:57 2010
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Fri, 5 Feb 2010 16:45:57 -0500
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <562bcc11002051244y2975d61cr795a9a04fff1d222@mail.gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<19308.28000.743189.199484@jon.es>
	<8CEAF4A9-774A-4AD6-B42F-8F6476DE6ABB@gmail.com>
	<562bcc11002051244y2975d61cr795a9a04fff1d222@mail.gmail.com>
Message-ID: <4653822C-F91D-421A-9CAC-51001A30B83B@gmail.com>


On Feb 5, 2010, at 3:44 PM, Kevin Horn wrote:

> On Fri, Feb 5, 2010 at 1:22 PM, ssteinerX at gmail.com <ssteinerx at gmail.com> wrote:
> 
> On Feb 5, 2010, at 2:11 PM, Terry Jones wrote:
> 
> >> - It looks fine under Google chrome
> >
> > Argh, having said that, I just noticed the table of contents is below and
> > to the right of the main page content.  An example page that exhibits this
> > is http://twistedsphinx.funsize.net/projects/conch/howto/conch_client.html
> 
> It looks fine in Firefox and I'll bet if you just make sure these 4 errors are cleared up, it'll be fine in Chrome, too.
> 
> http://validator.w3.org/check?verbose=1&uri=http%3A%2F%2Ftwistedsphinx.funsize.net%2Fprojects%2Fconch%2Fhowto%2Fconch_client.html
> 
> S
> 
> 
> 
> Hmmm...that part of the template is straight out of Sphinx proper.  I wonder if it's because the Sphinx templates use a TRANSITIONAL doctype, while I'm using STRICT (since that's what the Trac site uses)...
> 
> I'm not entirely convinced that these are real errors, though.  The <input> elements are inside a <form>, which are only inside <div>s (and of course <body> and <html>).
> 
> (goes looking on the intarwebz)
> 
> Huh.  Apparently you aren't allowed to put <input>s directly in <form>s.  You have to use a <p> or <fieldset> or something to wrap it.  That's extremely goofy.  Wonder why I've never run into that before...
> 
> Guess I don't use XHTML STRICT very often.  Seems it's valid in TRANSITIONAL.

It's still not valid; it's just one of those things that's set to be ignored in "TRANSITIONAL"  'cause it's so common.

XHTML STRICT pretty much eliminates cross-browser issues...except for IE, of course.  

At least you have a fighting chance if it passes STRICT, otherwise you can chase rendering bugs around in a circle forever.  Works here, doesn't work there...tweak...great, works there, uh oh, doesn't work here...tweak...etc.

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/bb0fc552/attachment.html>

From mebly5343 at gmail.com  Fri Feb  5 17:23:04 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Fri, 5 Feb 2010 19:23:04 -0500
Subject: [Twisted-Python] Question about ReconnectingClientFactory and conch
	StatefulTelnetProtocol
Message-ID: <dc408fe51002051623w2cd97611kada178fad8df5030@mail.gmail.com>

Good day, everyone:

Continuing my effort to learn Python and Twisted, I need to create several
Telnet clients and somehow send two arguments to each and receive data from
each.

I tried the same pattern that I used with the Telnet server and created a
Factory, actually a ReconnectingClientFactory.  It doesn't work.  My source
and the error (no attribute 'factory') are below.

Do the "conch" protocols not support a factory?  Is there an alternative
that provides a Telnet client with a lineReceived method?

What am I doing wrong?  :-)  I suppose I could pass arguments to
ClusterClient by overriding __init__, but that seems inelegant.

Thanks for your help.

Mark

----------

from twisted.internet.protocol import Protocol, ReconnectingClientFactory
from sys import stdout

from twisted.internet import reactor

from twisted.conch.telnet import StatefulTelnetProtocol

class ClusterClient(StatefulTelnetProtocol):

    def lineReceived(self, data):
        print self.factory.prompt, self.factory.call
        print data

class ClusterClientFactory(ReconnectingClientFactory):

    protocol = ClusterClient

    def __init__(self):
        self.prompt = "call:"
        self.call = "kd4d"

    def startedConnecting(self, connector):
        print 'Started to connect.'

    def buildProtocol(self, addr):
        print 'Connected.'
        self.resetDelay()
        return ClusterClient()

    def clientConnectionLost(self, connector, reason):
        print 'Lost connection.  Reason:', reason
        ReconnectingClientFactory.clientConnectionLost(self, connector,
reason)

    def clientConnectionFailed(self, connector, reason):
        print 'Connection failed. Reason:', reason
        ReconnectingClientFactory.clientConnectionFailed(self, connector,
                                                         reason)
if __name__ == '__main__':
    factory = ClusterClientFactory()
    factory.maxDelay = 120  #  two minutes
    print factory.prompt, factory.call
    reactor.connectTCP("localhost", 8023, factory)


    reactor.run()

-----------------

  File "ClusterClient.py", line 11, in lineReceived
    print self.factory.prompt, self.factory.call
exceptions.AttributeError: ClusterClient instance has no attribute 'factory'
Lost connection.  Reason: [Failure instance: Traceback (failure with no
frames):
 <type 'exceptions.AttributeError'>: ClusterClient instance has no attribute
'fa
ctory'
]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/a725d2ac/attachment.html>

From ltaylor.volks at gmail.com  Fri Feb  5 18:04:03 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Fri, 05 Feb 2010 18:04:03 -0700
Subject: [Twisted-Python] Question about ReconnectingClientFactory and
 conch	StatefulTelnetProtocol
In-Reply-To: <dc408fe51002051623w2cd97611kada178fad8df5030@mail.gmail.com>
References: <dc408fe51002051623w2cd97611kada178fad8df5030@mail.gmail.com>
Message-ID: <4B6CC003.7020802@gmail.com>

On 2/5/10 5:23 PM, Mark Bailey wrote:
> Good day, everyone:
> 
> Continuing my effort to learn Python and Twisted, I need to create
> several Telnet clients and somehow send two arguments to each and
> receive data from each.
> 
> I tried the same pattern that I used with the Telnet server and created
> a Factory, actually a ReconnectingClientFactory.  It doesn't work.  My
> source and the error (no attribute 'factory') are below.
> 
> Do the "conch" protocols not support a factory?  Is there an alternative
> that provides a Telnet client with a lineReceived method?
> 
> What am I doing wrong?  :-)  I suppose I could pass arguments to
> ClusterClient by overriding __init__, but that seems inelegant.
> 
> Thanks for your help.
> 
> Mark
>
> ----------
> 
> from twisted.internet.protocol import Protocol, ReconnectingClientFactory
> from sys import stdout
> 
> from twisted.internet import reactor
> 
> from twisted.conch.telnet import StatefulTelnetProtocol
> 
> class ClusterClient(StatefulTelnetProtocol):
> 
>     def lineReceived(self, data):
>         print self.factory.prompt, self.factory.call
>         print data
> 
> class ClusterClientFactory(ReconnectingClientFactory):
> 
>     protocol = ClusterClient
> 
>     def __init__(self):
>         self.prompt = "call:"
>         self.call = "kd4d"
> 
>     def startedConnecting(self, connector):
>         print 'Started to connect.'
> 
>     def buildProtocol(self, addr):
>         print 'Connected.'
>         self.resetDelay()
>         return ClusterClient()
> 
>     def clientConnectionLost(self, connector, reason):
>         print 'Lost connection.  Reason:', reason
>         ReconnectingClientFactory.clientConnectionLost(self, connector,
> reason)
> 
>     def clientConnectionFailed(self, connector, reason):
>         print 'Connection failed. Reason:', reason
>         ReconnectingClientFactory.clientConnectionFailed(self, connector,
>                                                          reason)
> if __name__ == '__main__':
>     factory = ClusterClientFactory()
>     factory.maxDelay = 120  #  two minutes
>     print factory.prompt, factory.call
>     reactor.connectTCP("localhost", 8023, factory)
> 
> 
>     reactor.run()
> 
> -----------------
> 
>   File "ClusterClient.py", line 11, in lineReceived
>     print self.factory.prompt, self.factory.call
> exceptions.AttributeError: ClusterClient instance has no attribute 'factory'
> Lost connection.  Reason: [Failure instance: Traceback (failure with no
> frames):
>  <type 'exceptions.AttributeError'>: ClusterClient instance has no
> attribute 'fa
> ctory'
> ]
> 



Hi Mark,

The problem is that you have overridden buildProtocol in your Factory
and not set the factory attribute on the protocol instance
(ClusterClient instance has no attribute 'factory').

buildProtocol is responsible for creating the protocol instance and the
default implementation takes care of assigning the factory to the protocol.

see the source for Factory and buildProtocol...it's very concise:

http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted/internet/protocol.py#L87
http://twistedmatrix.com/documents/9.0.0/api/twisted.internet.protocol.Factory.html#buildProtocol


So something like this should work in your case:

    def buildProtocol(self, addr):
        print 'Connected.'
        self.resetDelay()
        p = self.protocol()
        p.factory = self
	return p


This doc is also helpful for understanding the relationship between
Protocols and Factories:
http://twistedmatrix.com/documents/current/core/howto/servers.html

It may be worth emphasizing that there's no real magic going on
here...you're just assigning a python object as an attribute of the
protocol instance.


Lucas




From mebly5343 at gmail.com  Fri Feb  5 18:29:09 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Fri, 5 Feb 2010 20:29:09 -0500
Subject: [Twisted-Python] Question about ReconnectingClientFactory and
	conch StatefulTelnetProtocol
In-Reply-To: <4B6CC003.7020802@gmail.com>
References: <dc408fe51002051623w2cd97611kada178fad8df5030@mail.gmail.com>
	<4B6CC003.7020802@gmail.com>
Message-ID: <dc408fe51002051729h3859bf1bu11c732e6dcab264c@mail.gmail.com>

Thanks, Lucas.  I spent several hours struggling with this.  The source code
DOES make it very obvious.  :-)  I hadn't realized from the buildProtocol
API documentation that it assigned the factory attribute to the protocol
instance.  It's so obvious now... :-)

And, now, I understand the "magic" of assigning the protocol to a factory
which I did not before.

It runs fine!

Mark

On Fri, Feb 5, 2010 at 8:04 PM, Lucas Taylor <ltaylor.volks at gmail.com>wrote:

> On 2/5/10 5:23 PM, Mark Bailey wrote:
>
> Hi Mark,
>
> The problem is that you have overridden buildProtocol in your Factory
> and not set the factory attribute on the protocol instance
> (ClusterClient instance has no attribute 'factory').
>
> buildProtocol is responsible for creating the protocol instance and the
> default implementation takes care of assigning the factory to the protocol.
>
> see the source for Factory and buildProtocol...it's very concise:
>
>
> http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted/internet/protocol.py#L87
>
> http://twistedmatrix.com/documents/9.0.0/api/twisted.internet.protocol.Factory.html#buildProtocol
>
>
> So something like this should work in your case:
>
>    def buildProtocol(self, addr):
>        print 'Connected.'
>        self.resetDelay()
>         p = self.protocol()
>        p.factory = self
>        return p
>
>
> This doc is also helpful for understanding the relationship between
> Protocols and Factories:
> http://twistedmatrix.com/documents/current/core/howto/servers.html
>
> It may be worth emphasizing that there's no real magic going on
> here...you're just assigning a python object as an attribute of the
> protocol instance.
>
>
> Lucas
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/181202ba/attachment.html>

From screwtape at froup.com  Fri Feb  5 20:23:14 2010
From: screwtape at froup.com (Timothy Allen)
Date: Sat, 6 Feb 2010 14:23:14 +1100
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
Message-ID: <20100206142314.5be72fb7@hepzibah>

On Fri, 5 Feb 2010 13:19:00 -0600
Kevin Horn <kevin.horn at gmail.com> wrote:
> > I'll see if I can find/make time to have a look at the CSS.
> 
> That would be really great.  There are a few things that are driving
> me bonkers.  For example: the prev/next/index links on the right hand
> side of the gray navbar are 1 freakin' pixel lower than the
> "breadcrumb" links on the left hand side of the same navbar () at
> least on this machine), and I have no idea why.

After spending a few minutes poking about with Firebug, the reason
becomes clear:

 - In twistedtrac.css line 38, the navbar list items are set to
   "display: inline", which makes them layout like "<span>" and stack
   up nicely on the left, but also makes them ignore certain vertical
   adjustments like margin and padding.
 - In twistedtrac.css line 42, the navbar list items on the right are
   set to "float: right", which makes them stack up nicely on the right
   but also happens to make them respond to margin and padding again.
 - In trac.css line 179, the navbar list items are set to "padding:
   0.25em 0", giving them vertical padding. This is ignored by the
   inline list items on the left, but respected by the floated list
   items on the right.

I haven't studied the CSS of the main Twisted site, so I don't know how
they get around it there.

One easy way around it for the docs might be to change "display:
inline" to "float: left", which also makes them stack up on the left,
and behave consistently with the ones on the right.



From kevin.horn at gmail.com  Fri Feb  5 22:02:13 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 5 Feb 2010 23:02:13 -0600
Subject: [Twisted-Python] Lore to Sphinx Conversion Progress Report 5
In-Reply-To: <20100206142314.5be72fb7@hepzibah>
References: <562bcc11002051015h4f636e9cl92f4b645b7acd8d3@mail.gmail.com>
	<19308.27339.33450.515148@jon.es>
	<562bcc11002051119s20559db1me858a9880ca9e51@mail.gmail.com>
	<20100206142314.5be72fb7@hepzibah>
Message-ID: <562bcc11002052102g5fab751ar7683ed576ecb1ef5@mail.gmail.com>

On Fri, Feb 5, 2010 at 9:23 PM, Timothy Allen <screwtape at froup.com> wrote:

> On Fri, 5 Feb 2010 13:19:00 -0600
> Kevin Horn <kevin.horn at gmail.com> wrote:
> > > I'll see if I can find/make time to have a look at the CSS.
> >
> > That would be really great.  There are a few things that are driving
> > me bonkers.  For example: the prev/next/index links on the right hand
> > side of the gray navbar are 1 freakin' pixel lower than the
> > "breadcrumb" links on the left hand side of the same navbar () at
> > least on this machine), and I have no idea why.
>
> After spending a few minutes poking about with Firebug, the reason
> becomes clear:
>
>  - In twistedtrac.css line 38, the navbar list items are set to
>   "display: inline", which makes them layout like "<span>" and stack
>   up nicely on the left, but also makes them ignore certain vertical
>   adjustments like margin and padding.
>  - In twistedtrac.css line 42, the navbar list items on the right are
>   set to "float: right", which makes them stack up nicely on the right
>   but also happens to make them respond to margin and padding again.
>  - In trac.css line 179, the navbar list items are set to "padding:
>   0.25em 0", giving them vertical padding. This is ignored by the
>   inline list items on the left, but respected by the floated list
>   items on the right.
>

Brilliant!

It may only have taken you a few minutes, but it would have taken
me...considerably longer. :)


> I haven't studied the CSS of the main Twisted site, so I don't know how
> they get around it there.
>

On the main twisted site, they don't have anything on the left...not sure
how the Sphinx templates handle it though...


> One easy way around it for the docs might be to change "display:
> inline" to "float: left", which also makes them stack up on the left,
> and behave consistently with the ones on the right.
>
>
Actually that jacks up the height on the navbar completely (at least for
me).

Overriding the padding in twistedtrac.css seems to work though, so I think
that's what I'll go with.

Thanks for the help!

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100205/6fb6d47e/attachment.html>

From sleeepd at gmail.com  Fri Feb  5 23:30:45 2010
From: sleeepd at gmail.com (=?GB2312?B?0OzHxw==?=)
Date: Sat, 6 Feb 2010 14:30:45 +0800
Subject: [Twisted-Python] Simple gateway server
Message-ID: <4fe037b11002052230y400383c7tdc37660bd12cb03f@mail.gmail.com>

I need to write a gateway server that forwarding data between client and
data server。I use a Protocol instance for incoming connection from client,
and creating another Protocol instance to connect data server when received
data from client:

Exp.1
...
Class ToClientProtocol(Protocol):
""" Protocol for incoming connection from client. """

    def connectionMade(self):

        self.data_server = reactor.connectTCP('localhost', 8888,
DataServerFactory())        # make connection to data server

        self.data_server.transport.write('hello!')         # send a message
to data server, but not work
...

The connetion to data server can be made, BUT the data server received
nothing. self.data_server.transport.write() not work.

It will work if I write like that:
Exp. 2
...
Class ToClientProtocol(Protocol):
""" Protocol for incoming connection from client. """

    def connectionMade(self):

        self.data_server = reactor.connectTCP('localhost', 8888,
DataServerFactory(self))        # make connection to data server

Class DataServer(Protocol):
""" Protocol for connection to data server. """

    def __init__(self, client):
        self.client = client

    def connectionMade(self):
        self.client.data_server.transport.wirte('hello!')        # send
message to data server, it's work now!

Class DataServerFactory(self):

    def __init__(self, client):
        self.client = client

    def buildProtocol(self, addr):
        return DataServer(self.client)
...

I don't think this is the best way. Why I can't simply wirte like Exp.1?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100206/e53c9bd4/attachment-0001.html>

From knezan94 at gmail.com  Sat Feb  6 03:07:25 2010
From: knezan94 at gmail.com (Knezan)
Date: Sat, 6 Feb 2010 11:07:25 +0100
Subject: [Twisted-Python] Fwd: Twisted + python = TELNET server (without
	AUTH)
In-Reply-To: <62a313511002060205x63543164tdd9b38f04e561941@mail.gmail.com>
References: <62a313511002060205x63543164tdd9b38f04e561941@mail.gmail.com>
Message-ID: <62a313511002060207uab34491se43840e367498c8f@mail.gmail.com>

Hi.

I am long time in python and having twisted is good thing.
I want to make telnet server (with python or linux prompt)
but without auth, beacuse i'd use it via serial port (RS232)

ideas?

Greetings, Vatts




-- 
case(word == "ping"): # TABLE TENNIS!!!
   say "pong "+params
   return
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100206/1264b24f/attachment.html>

From exarkun at twistedmatrix.com  Sat Feb  6 08:31:26 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 15:31:26 -0000
Subject: [Twisted-Python] domish.Element.__getattr__() or
	xpath.XPathQuery
In-Reply-To: <4B6AA5FC.7070302@arimaz.com>
References: <4B6AA5FC.7070302@arimaz.com>
Message-ID: <20100206153126.26099.435133660.divmod.xquotient.501@localhost.localdomain>

On 4 Feb, 10:48 am, gabriel.rossetti at arimaz.com wrote:
>Hello everyone,
>
>I was wondering what you would recommend, accessing nodes via
>domish.Element.__getattr__()
>(e.g. el.node1.node1_1, where el is /msg) or via xpath.XPathQuery()
>(e.g. xpath.XPathQuery("/msg/node1/node1_1").queryForNodes(el)[0])?
>
>I was wondering which would be faster, the __getattr__() is O(n) (in my
>example there are 2 calls) but what about xpath.XPathQuery()?

I don't think you'll find the xpath API to be much more optimized.  I 
haven't used XMPP much, but considering the xpath implementation is 
incomplete (and afaik there's little documentation about what subset is 
supported), I'd stick with the simpler (if still terrible) 
Element.__getattr__.

Jean-Paul



From exarkun at twistedmatrix.com  Sat Feb  6 08:34:44 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 15:34:44 -0000
Subject: [Twisted-Python] web2 -> web ToDo List
In-Reply-To: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>
References: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>
Message-ID: <20100206153444.26099.538054602.divmod.xquotient.508@localhost.localdomain>

On 4 Feb, 09:16 pm, ssteinerx at gmail.com wrote:
>While I see tickets in the tracker for web2 and others for web, I 
>couldn't find a 'cherry pick' list of things to be moved from web2 back 
>into web.
>
>Is there one?

Not really.  It'd be great to have such a list.  Any time anyone brings 
up their use of web2, I ask them what features it provides that caused 
them to select it or prevent them from switching to Twisted Web.  One 
answer that a lot of people give is streaming access to uploads (which 
Twisted Web indeed makes very inconvenient now).  There's a ticket for 
this, #288.  The other answers people tend to give are "I don't know" or 
"nothing in particular".  Sometimes they also say "HTTP/1.1 support", 
but when further questioned about this, they can't actually explain what 
that means.

So, the list of tickets for Web2 -> Web "backporting" seems to currently 
be:

    - #288

Jean-Paul



From exarkun at twistedmatrix.com  Sat Feb  6 08:37:05 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 15:37:05 -0000
Subject: [Twisted-Python] Simple gateway server
In-Reply-To: <4fe037b11002052230y400383c7tdc37660bd12cb03f@mail.gmail.com>
References: <4fe037b11002052230y400383c7tdc37660bd12cb03f@mail.gmail.com>
Message-ID: <20100206153705.26099.430281482.divmod.xquotient.512@localhost.localdomain>

On 06:30 am, sleeepd at gmail.com wrote:
>I need to write a gateway server that forwarding data between client 
>and
>data server002I use a Protocol instance for incoming connection from 
>client,
>and creating another Protocol instance to connect data server when 
>received
>data from client:

You can find an example of this in Twisted itself:

http://twistedmatrix.com/trac/browser/trunk/twisted/protocols/portforward.py
>
>Exp.1
>...
>Class ToClientProtocol(Protocol):
>""" Protocol for incoming connection from client. """
>
>    def connectionMade(self):
>
>        self.data_server = reactor.connectTCP('localhost', 8888,
>DataServerFactory())        # make connection to data server
>
>        self.data_server.transport.write('hello!')         # send a 
>message
>to data server, but not work
>...

Right.  data_server has no transport attribute.  reactor.connectTCP 
doesn't return a protocol, it returns a "connector", which is really not 
useful for very much.  The main thing you can do with it is cancel the 
connection attempt.
>
>The connetion to data server can be made, BUT the data server received
>nothing. self.data_server.transport.write() not work.
>
>It will work if I write like that:
>Exp. 2
>...
>Class ToClientProtocol(Protocol):
>""" Protocol for incoming connection from client. """
>
>    def connectionMade(self):
>
>        self.data_server = reactor.connectTCP('localhost', 8888,
>DataServerFactory(self))        # make connection to data server
>
>Class DataServer(Protocol):
>""" Protocol for connection to data server. """
>
>    def __init__(self, client):
>        self.client = client
>
>    def connectionMade(self):
>        self.client.data_server.transport.wirte('hello!')        # send
>message to data server, it's work now!
>
>Class DataServerFactory(self):
>
>    def __init__(self, client):
>        self.client = client
>
>    def buildProtocol(self, addr):
>        return DataServer(self.client)
>...
>
>I don't think this is the best way. Why I can't simply wirte like 
>Exp.1?

Actually this is a better way.  What in particular do you think is bad 
about it?

Jean-Paul



From exarkun at twistedmatrix.com  Sat Feb  6 08:38:40 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 15:38:40 -0000
Subject: [Twisted-Python] Fwd: Twisted + python = TELNET server
	(without	AUTH)
In-Reply-To: <62a313511002060207uab34491se43840e367498c8f@mail.gmail.com>
References: <62a313511002060205x63543164tdd9b38f04e561941@mail.gmail.com>
	<62a313511002060207uab34491se43840e367498c8f@mail.gmail.com>
Message-ID: <20100206153840.26099.430260500.divmod.xquotient.515@localhost.localdomain>

On 10:07 am, knezan94 at gmail.com wrote:
>Hi.
>
>I am long time in python and having twisted is good thing.
>I want to make telnet server (with python or linux prompt)
>but without auth, beacuse i'd use it via serial port (RS232)
>
>ideas?

Here's an example which uses Twisted to communicate via a serial port:

    http://twistedmatrix.com/documents/current/core/examples/mouse.py

Jean-Paul



From darren at ontrenet.com  Sat Feb  6 09:42:42 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sat, 06 Feb 2010 11:42:42 -0500
Subject: [Twisted-Python] Sending a stream via Protocol?
Message-ID: <1265474562.2805.3.camel@kratos>

Hi,
  I have a simple protocol listening on a port. I send it a text message
(a filename)
and the protocol tries to stream back the bytes of the file. Mostly,
this works
but in some cases, the receiving side receives less bytes than is
written by:

self.transport.write(bytes)

I read the API which says it can receive less than expected bytes or
messages. Why?

So how can I reliably send a sequences of bytes via "dataReceived" in my
protocol?

Thanks for any help!
Darren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100206/f3e25368/attachment.html>

From valeriy.zamarayev at gmail.com  Sat Feb  6 10:06:59 2010
From: valeriy.zamarayev at gmail.com (Valeriy Zamarayev)
Date: Sat, 6 Feb 2010 19:06:59 +0200
Subject: [Twisted-Python] web2 -> web ToDo List
In-Reply-To: <20100206153444.26099.538054602.divmod.xquotient.508@localhost.localdomain>
References: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>
	<20100206153444.26099.538054602.divmod.xquotient.508@localhost.localdomain>
Message-ID: <BF7D3202-9A60-46C0-97DE-2D0CBF894CB9@gmail.com>

On 6 Feb 2010, 17:34, exarkun at twistedmatrix.com wrote:

> On 4 Feb, 09:16 pm, ssteinerx at gmail.com wrote:
>> While I see tickets in the tracker for web2 and others for web, I
>> couldn't find a 'cherry pick' list of things to be moved from web2  
>> back
>> into web.
>>
>> Is there one?
>
> Not really.  It'd be great to have such a list.  Any time anyone  
> brings
> up their use of web2, I ask them what features it provides that caused
> them to select it or prevent them from switching to Twisted Web.  One
> answer that a lot of people give is streaming access to uploads (which
> Twisted Web indeed makes very inconvenient now).  There's a ticket for
> this, #288.  The other answers people tend to give are "I don't  
> know" or
> "nothing in particular".  Sometimes they also say "HTTP/1.1 support",
> but when further questioned about this, they can't actually explain  
> what
> that means.

I also depend on 100-Continue support. This is somehow related to  
#288, but not
explicitly mentioned. If one wants to stream POST data, it's better to
have 'expect/continue' working. It allows to check various conditions,  
including
authentication before allowing the client to proceed.

Regards,
Valeriy




From exarkun at twistedmatrix.com  Sat Feb  6 10:13:28 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 17:13:28 -0000
Subject: [Twisted-Python] Sending a stream via Protocol?
In-Reply-To: <1265474562.2805.3.camel@kratos>
References: <1265474562.2805.3.camel@kratos>
Message-ID: <20100206171328.26099.373721670.divmod.xquotient.531@localhost.localdomain>

On 04:42 pm, darren at ontrenet.com wrote:
>Hi,
>  I have a simple protocol listening on a port. I send it a text message
>(a filename)
>and the protocol tries to stream back the bytes of the file. Mostly,
>this works
>but in some cases, the receiving side receives less bytes than is
>written by:
>
>self.transport.write(bytes)
>
>I read the API which says it can receive less than expected bytes or
>messages. Why?

That's how TCP works.  Bytes you send with one call to write may be 
split into two or more chunks and delivered to the remote dataReceived 
separately, or bytes you send with two or more calls to write may be 
combined into fewer chunks and delivered to the remote dataReceived all 
as one string.
>
>So how can I reliably send a sequences of bytes via "dataReceived" in 
>my
>protocol?

If you want "framing" - a byte format built on top of the basic 
functionality provided by TCP, allowing you to differentiate bytes 
belonging to different logical messages from each other - then you 
should take a look at some of the protocols in twisted.protocols.basic 
(NetstringReceiver, Int32StringReceiver, etc) or twisted.protocols.amp 
which expands on this idea to a much greater degree.

You can read a lot more about these ideas in this series of articles by 
Itamar Turner-Trauring:

  http://www.xml.com/pub/au/215

Jean-Paul



From exarkun at twistedmatrix.com  Sat Feb  6 10:23:45 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 17:23:45 -0000
Subject: [Twisted-Python] web2 -> web ToDo List
In-Reply-To: <BF7D3202-9A60-46C0-97DE-2D0CBF894CB9@gmail.com>
References: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>
	<20100206153444.26099.538054602.divmod.xquotient.508@localhost.localdomain>
	<BF7D3202-9A60-46C0-97DE-2D0CBF894CB9@gmail.com>
Message-ID: <20100206172345.26099.1877063066.divmod.xquotient.534@localhost.localdomain>

On 05:06 pm, valeriy.zamarayev at gmail.com wrote:
>On 6 Feb 2010, 17:34, exarkun at twistedmatrix.com wrote:
>>On 4 Feb, 09:16 pm, ssteinerx at gmail.com wrote:
>>>While I see tickets in the tracker for web2 and others for web, I
>>>couldn't find a 'cherry pick' list of things to be moved from web2
>>>back
>>>into web.
>>>
>>>Is there one?
>>
>>Not really.  It'd be great to have such a list.  Any time anyone
>>brings
>>up their use of web2, I ask them what features it provides that caused
>>them to select it or prevent them from switching to Twisted Web.  One
>>answer that a lot of people give is streaming access to uploads (which
>>Twisted Web indeed makes very inconvenient now).  There's a ticket for
>>this, #288.  The other answers people tend to give are "I don't
>>know" or
>>"nothing in particular".  Sometimes they also say "HTTP/1.1 support",
>>but when further questioned about this, they can't actually explain
>>what
>>that means.
>
>I also depend on 100-Continue support. This is somehow related to
>#288, but not
>explicitly mentioned. If one wants to stream POST data, it's better to
>have 'expect/continue' working. It allows to check various conditions,
>including
>authentication before allowing the client to proceed.

Awesome, thanks for adding to the list. :)  Now that there are two items 
on it, I've added a section to the end of 
<http://twistedmatrix.com/trac/wiki/TwistedWebPlan>.  I encourage anyone 
with interest in this area to suggest more items for this list.

Jean-Paul



From darren at ontrenet.com  Sat Feb  6 10:30:34 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sat, 06 Feb 2010 12:30:34 -0500
Subject: [Twisted-Python] Sending a stream via Protocol?
In-Reply-To: <20100206171328.26099.373721670.divmod.xquotient.531@localhost.localdomain>
References: <1265474562.2805.3.camel@kratos>
	<20100206171328.26099.373721670.divmod.xquotient.531@localhost.localdomain>
Message-ID: <1265477434.2805.6.camel@kratos>

On Sat, 2010-02-06 at 17:13 +0000, exarkun at twistedmatrix.com wrote:

> On 04:42 pm, darren at ontrenet.com wrote:
> >Hi,
> >  I have a simple protocol listening on a port. I send it a text message
> >(a filename)
> >and the protocol tries to stream back the bytes of the file. Mostly,
> >this works
> >but in some cases, the receiving side receives less bytes than is
> >written by:
> >
> >self.transport.write(bytes)
> >
> >I read the API which says it can receive less than expected bytes or
> >messages. Why?
> 
> That's how TCP works.  Bytes you send with one call to write may be 
> split into two or more chunks and delivered to the remote dataReceived 
> separately, or bytes you send with two or more calls to write may be 
> combined into fewer chunks and delivered to the remote dataReceived all 
> as one string.

Yes, at the lower OSI layers it does. But in most modern programming
languages,
the notion of an I/O stream is built atop it (e.g. sockets will
recombine and order
the packets, but twisted does not?). So naturally, I don't want to
emulate IP in
my Twisted app.


> >
> >So how can I reliably send a sequences of bytes via "dataReceived" in 
> >my
> >protocol?
> 
> If you want "framing" - a byte format built on top of the basic 
> functionality provided by TCP, allowing you to differentiate bytes 
> belonging to different logical messages from each other - then you 
> should take a look at some of the protocols in twisted.protocols.basic 
> (NetstringReceiver, Int32StringReceiver, etc) or twisted.protocols.amp 
> which expands on this idea to a much greater degree.

Ok, cool. I thought this would be easier in Twisted, but I will research
it more.

> 
> You can read a lot more about these ideas in this series of articles by 
> Itamar Turner-Trauring:
> 
>   http://www.xml.com/pub/au/215

Thanks again.

> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100206/953a3d01/attachment.html>

From exarkun at twistedmatrix.com  Sat Feb  6 10:47:41 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Feb 2010 17:47:41 -0000
Subject: [Twisted-Python] Sending a stream via Protocol?
In-Reply-To: <1265477434.2805.6.camel@kratos>
References: <1265474562.2805.3.camel@kratos>
	<20100206171328.26099.373721670.divmod.xquotient.531@localhost.localdomain>
	<1265477434.2805.6.camel@kratos>
Message-ID: <20100206174741.26099.1374031153.divmod.xquotient.539@localhost.localdomain>

On 05:30 pm, darren at ontrenet.com wrote:
>On Sat, 2010-02-06 at 17:13 +0000, exarkun at twistedmatrix.com wrote:
>>That's how TCP works.  Bytes you send with one call to write may be
>>split into two or more chunks and delivered to the remote dataReceived
>>separately, or bytes you send with two or more calls to write may be
>>combined into fewer chunks and delivered to the remote dataReceived 
>>all
>>as one string.
>
>Yes, at the lower OSI layers it does. But in most modern programming
>languages,
>the notion of an I/O stream is built atop it (e.g. sockets will
>recombine and order
>the packets, but twisted does not?). So naturally, I don't want to
>emulate IP in
>my Twisted app.

I don't think so.  There's simply not enough information available for 
fragmented packets to be recombined, or for coalesced packets to be 
split up again.  This is what the other APIs I mentioned are for: they 
add the necessary information to the underlying TCP byte stream so that 
this can be done.

Ordering is preserved, though, even if you only do what you were trying 
to do, because TCP guarantees ordering.

Jean-Paul



From kevin.horn at gmail.com  Sat Feb  6 11:33:48 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sat, 6 Feb 2010 12:33:48 -0600
Subject: [Twisted-Python] web2 -> web ToDo List
In-Reply-To: <20100206172345.26099.1877063066.divmod.xquotient.534@localhost.localdomain>
References: <2F213830-E178-46BB-A225-721F656680EC@gmail.com>
	<20100206153444.26099.538054602.divmod.xquotient.508@localhost.localdomain>
	<BF7D3202-9A60-46C0-97DE-2D0CBF894CB9@gmail.com>
	<20100206172345.26099.1877063066.divmod.xquotient.534@localhost.localdomain>
Message-ID: <562bcc11002061033i61a22c3yf37f9b8c4614a20f@mail.gmail.com>

On Sat, Feb 6, 2010 at 11:23 AM, <exarkun at twistedmatrix.com> wrote:

> On 05:06 pm, valeriy.zamarayev at gmail.com wrote:
> >On 6 Feb 2010, 17:34, exarkun at twistedmatrix.com wrote:
> >>On 4 Feb, 09:16 pm, ssteinerx at gmail.com wrote:
> >>>While I see tickets in the tracker for web2 and others for web, I
> >>>couldn't find a 'cherry pick' list of things to be moved from web2
> >>>back
> >>>into web.
> >>>
> >>>Is there one?
> >>
> >>Not really.  It'd be great to have such a list.  Any time anyone
> >>brings
> >>up their use of web2, I ask them what features it provides that caused
> >>them to select it or prevent them from switching to Twisted Web.  One
> >>answer that a lot of people give is streaming access to uploads (which
> >>Twisted Web indeed makes very inconvenient now).  There's a ticket for
> >>this, #288.  The other answers people tend to give are "I don't
> >>know" or
> >>"nothing in particular".  Sometimes they also say "HTTP/1.1 support",
> >>but when further questioned about this, they can't actually explain
> >>what
> >>that means.
> >
> >I also depend on 100-Continue support. This is somehow related to
> >#288, but not
> >explicitly mentioned. If one wants to stream POST data, it's better to
> >have 'expect/continue' working. It allows to check various conditions,
> >including
> >authentication before allowing the client to proceed.
>
> Awesome, thanks for adding to the list. :)  Now that there are two items
> on it, I've added a section to the end of
> <http://twistedmatrix.com/trac/wiki/TwistedWebPlan>.  I encourage anyone
> with interest in this area to suggest more items for this list.
>
> Jean-Paul
>
>
This page: http://www.jmarshall.com/easy/http/

seems like it might be a good guide to upgrading to HTTP 1.1.

See the section entitled "Upgrading to HTTP 1/1". :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100206/49ec4727/attachment.html>

From exarkun at twistedmatrix.com  Sat Feb  6 22:05:18 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 07 Feb 2010 05:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1265519118.48.1476576732@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100207/38a45888/attachment.html>

From gabriel.rossetti at arimaz.com  Mon Feb  8 00:26:43 2010
From: gabriel.rossetti at arimaz.com (Gabriel Rossetti)
Date: Mon, 08 Feb 2010 08:26:43 +0100
Subject: [Twisted-Python] domish.Element.__getattr__()
	or	xpath.XPathQuery
In-Reply-To: <20100206153126.26099.435133660.divmod.xquotient.501@localhost.localdomain>
References: <4B6AA5FC.7070302@arimaz.com>
	<20100206153126.26099.435133660.divmod.xquotient.501@localhost.localdomain>
Message-ID: <4B6FBCB3.1020605@arimaz.com>

exarkun at twistedmatrix.com wrote:
> On 4 Feb, 10:48 am, gabriel.rossetti at arimaz.com wrote:
>   
>> Hello everyone,
>>
>> I was wondering what you would recommend, accessing nodes via
>> domish.Element.__getattr__()
>> (e.g. el.node1.node1_1, where el is /msg) or via xpath.XPathQuery()
>> (e.g. xpath.XPathQuery("/msg/node1/node1_1").queryForNodes(el)[0])?
>>
>> I was wondering which would be faster, the __getattr__() is O(n) (in my
>> example there are 2 calls) but what about xpath.XPathQuery()?
>>     
>
> I don't think you'll find the xpath API to be much more optimized.  I 
> haven't used XMPP much, but considering the xpath implementation is 
> incomplete (and afaik there's little documentation about what subset is 
> supported), I'd stick with the simpler (if still terrible) 
> Element.__getattr__.
>
> Jean-Paul
>
>   
Ok, thank you. Just a question, would it be interesting to anyone to be 
able
to choose in between the internal XPATH implementation and an external
lib/implementation for the XMPP stuff? I have often wondered if it would
not be better to allow the user to choose.

Gabriel



From screwtape at froup.com  Mon Feb  8 04:03:59 2010
From: screwtape at froup.com (Tim Allen)
Date: Mon, 8 Feb 2010 22:03:59 +1100
Subject: [Twisted-Python] domish.Element.__getattr__() or
 xpath.XPathQuery
In-Reply-To: <4B6FBCB3.1020605@arimaz.com>
References: <4B6AA5FC.7070302@arimaz.com>
	<20100206153126.26099.435133660.divmod.xquotient.501@localhost.localdomain>
	<4B6FBCB3.1020605@arimaz.com>
Message-ID: <20100208110359.GE28374@boombah.thristian.org>

On Mon, Feb 08, 2010 at 08:26:43AM +0100, Gabriel Rossetti wrote:
> Ok, thank you. Just a question, would it be interesting to anyone to
> be able to choose in between the internal XPATH implementation and an
> external lib/implementation for the XMPP stuff? I have often wondered
> if it would not be better to allow the user to choose.

I seem to recall that the last time people discussed reusing a generic XML
library rather than a custom one, it was discovered that XMPP isn't
quite actually XML - it has a bunch of crazy restrictions that basically
mean you need an XMPP-specific library. If there's a third-part XMPP
library that could be plugged in, that would be a very interesting thing
to know.



From jml at mumak.net  Mon Feb  8 04:23:23 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 8 Feb 2010 11:23:23 +0000
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
Message-ID: <d06a5cd31002080323r380fa3dcw3693b59278e2795a@mail.gmail.com>

On Sun, Jan 31, 2010 at 10:26 PM,  <exarkun at twistedmatrix.com> wrote:
> Hi all,
>
> If there are enough interested people, there will be a Twisted sprint at
> PyCon this year.  If you'll be at PyCon and are interested in sprinting
> on some Twisted topic, give a shout.  Also, let us know what specific
> topics you're interested in so we can let other people know what to
> expect in the general announcement.
>

I'll be there for all of the sprint days.

I'm interested in fixing bugs in Conch, getting a release out, pair
programming fun, toolchain work and making it easier for casual
contributors to contribute casually. In roughly that order.

jml



From exarkun at twistedmatrix.com  Mon Feb  8 06:38:52 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 08 Feb 2010 13:38:52 -0000
Subject: [Twisted-Python] domish.Element.__getattr__() or
	xpath.XPathQuery
In-Reply-To: <20100208110359.GE28374@boombah.thristian.org>
References: <4B6AA5FC.7070302@arimaz.com>
	<20100206153126.26099.435133660.divmod.xquotient.501@localhost.localdomain>
	<4B6FBCB3.1020605@arimaz.com>
	<20100208110359.GE28374@boombah.thristian.org>
Message-ID: <20100208133852.26099.399426214.divmod.xquotient.618@localhost.localdomain>

On 11:03 am, screwtape at froup.com wrote:
>On Mon, Feb 08, 2010 at 08:26:43AM +0100, Gabriel Rossetti wrote:
>>Ok, thank you. Just a question, would it be interesting to anyone to
>>be able to choose in between the internal XPATH implementation and an
>>external lib/implementation for the XMPP stuff? I have often wondered
>>if it would not be better to allow the user to choose.
>
>I seem to recall that the last time people discussed reusing a generic 
>XML
>library rather than a custom one, it was discovered that XMPP isn't
>quite actually XML - it has a bunch of crazy restrictions that 
>basically
>mean you need an XMPP-specific library. If there's a third-part XMPP
>library that could be plugged in, that would be a very interesting 
>thing
>to know.

The discussion is mostly summarized here:

  http://twistedmatrix.com/trac/ticket/3201

I hope that eventually someone will find a good XML library which has 
the the features described there, and then we can switch to it.

Jean-Paul



From bra at fsn.hu  Mon Feb  8 09:20:31 2010
From: bra at fsn.hu (Attila Nagy)
Date: Mon, 08 Feb 2010 17:20:31 +0100
Subject: [Twisted-Python] Handling exceptions in twisted.internet.udp?
Message-ID: <4B7039CF.2070601@fsn.hu>

Hello,

I have a code, which opens persistent (connected, see: 
http://twistedmatrix.com/documents/current/core/howto/udp.html#auto2) 
UDP connections, and sends and receives data on them.

The problem is that occasionally I receive ICMP 13 (administratively 
prohibited) errors from the destinations, which triggers and exception 
and closes the UDP socket. I would like to keep that open, no matter 
what happens.
On FreeBSD the exception comes during writing into the socket with 
transport.write, so this is an easy one.
But on Linux it's a little bit harder, because there I get exception not 
during writing, but reading, which is handled here:
http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted/internet/udp.py#L113

The exception looks like this:
2010-02-08 12:09:15+0100 [-] reactor class: 
twisted.internet.selectreactor.SelectReactor.
2010-02-08 12:10:22+0100 [__builtin__.connectedUDP (UDP)] Unhandled Error
        Traceback (most recent call last):
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/python/log.py", 
line 84, in callWithLogger
            return callWithContext({"system": lp}, func, *args, **kw)
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/python/log.py", 
line 69, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/python/context.py", 
line 59, in callWithContext
            return self.currentContext().callWithContext(ctx, func, 
*args, **kw)
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/python/context.py", 
line 37, in callWithContext
            return func(*args,**kw)
        --- <exception caught here> ---
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/internet/selectreactor.py", 
line 146, in _doReadOrWrite
            why = getattr(selectable, method)()
          File 
"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux-x86_64.egg/twisted/internet/udp.py", 
line 109, in doRead
            data, addr = self.socket.recvfrom(self.maxPacketSize)
        socket.error: [Errno 113] No route to host

I wonder what is the preferred way of achieving that the socket will be 
write()-able and kept open regardless what ICMP or other sending or 
receiving error occurs?

Thanks,




From exarkun at twistedmatrix.com  Mon Feb  8 09:57:05 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 08 Feb 2010 16:57:05 -0000
Subject: [Twisted-Python] Handling exceptions in twisted.internet.udp?
In-Reply-To: <4B7039CF.2070601@fsn.hu>
References: <4B7039CF.2070601@fsn.hu>
Message-ID: <20100208165705.26099.1521985357.divmod.xquotient.793@localhost.localdomain>

On 04:20 pm, bra at fsn.hu wrote:
>Hello,
>
>I have a code, which opens persistent (connected, see:
>http://twistedmatrix.com/documents/current/core/howto/udp.html#auto2)
>UDP connections, and sends and receives data on them.
>
>The problem is that occasionally I receive ICMP 13 (administratively
>prohibited) errors from the destinations, which triggers and exception
>and closes the UDP socket. I would like to keep that open, no matter
>what happens.
>On FreeBSD the exception comes during writing into the socket with
>transport.write, so this is an easy one.

This is probably a bug:

  http://twistedmatrix.com/trac/ticket/2790

So you're right that you have to handle it in your app code (and that 
it's easy to do so, fortunately).  Hopefully someday this will no longer 
be true.
>But on Linux it's a little bit harder, because there I get exception 
>not
>during writing, but reading, which is handled here:
>http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted/internet/udp.py#L113

And this looks like another bug. :)
>[snip]
>"/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux- 
>x86_64.egg/twisted/internet/udp.py",
>line 109, in doRead
>            data, addr = self.socket.recvfrom(self.maxPacketSize)
>        socket.error: [Errno 113] No route to host
>
>I wonder what is the preferred way of achieving that the socket will be
>write()-able and kept open regardless what ICMP or other sending or
>receiving error occurs?

It seems like udp.py should be handling EHOSTUNREACH (and probably 
several more errors that it also misses currently).  There's already a 
`connectionRefused` callback which could be invoked to handle these 
cases.

This seems pretty related to another open ticket:

  http://twistedmatrix.com/trac/ticket/3396

Aside from monkey-patching the doRead method, I don't see a way for an 
application to handle this one.

Development has started on fixing each of these issues.  The latter 
seems to even have been reviewed and is now waiting for someone to 
address the review feedback.

Jean-Paul



From bra at fsn.hu  Mon Feb  8 12:17:57 2010
From: bra at fsn.hu (Attila Nagy)
Date: Mon, 08 Feb 2010 20:17:57 +0100
Subject: [Twisted-Python] Handling exceptions in twisted.internet.udp?
In-Reply-To: <20100208165705.26099.1521985357.divmod.xquotient.793@localhost.localdomain>
References: <4B7039CF.2070601@fsn.hu>
	<20100208165705.26099.1521985357.divmod.xquotient.793@localhost.localdomain>
Message-ID: <4B706365.7070709@fsn.hu>

exarkun at twistedmatrix.com wrote:
>> [snip]
>> "/usr/lib64/python2.6/site-packages/Twisted-9.0.0_r27775-py2.6-linux- 
>> x86_64.egg/twisted/internet/udp.py",
>> line 109, in doRead
>>            data, addr = self.socket.recvfrom(self.maxPacketSize)
>>        socket.error: [Errno 113] No route to host
>>
>> I wonder what is the preferred way of achieving that the socket will be
>> write()-able and kept open regardless what ICMP or other sending or
>> receiving error occurs?
>>     
>
> It seems like udp.py should be handling EHOSTUNREACH (and probably 
> several more errors that it also misses currently).  There's already a 
> `connectionRefused` callback which could be invoked to handle these 
> cases.
>
> This seems pretty related to another open ticket:
>
>   http://twistedmatrix.com/trac/ticket/3396
>
> Aside from monkey-patching the doRead method, I don't see a way for an 
> application to handle this one.
>   
Currently the page is inaccessible (TimeoutError), but that doesn't 
sound good. :(
I will work around this by modifying udp.py, that's easier in this 
moment than overloading half of twisted. :)
> Development has started on fixing each of these issues.  The latter 
> seems to even have been reviewed and is now waiting for someone to 
> address the review feedback.
>   
OK, let's hope that these will be fixed soon.

Thanks!



From brad.milne at devx.runthered.com  Mon Feb  8 12:23:31 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Tue, 9 Feb 2010 08:23:31 +1300
Subject: [Twisted-Python] Light-est-weight http authentication
Message-ID: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>

I have a backend Twisted application with a front end in Django. Some of
their communication is via web services. Currently they are deployed on the
same box but may be separated in future. I want to enforce some basic
authentication on the web services, so some lightweight http header
authentication looks best. I've found the twisted.web.guard api, but it
seems to be more heavyweight than I require (e.g. running up a Portal).
Given the breadth of the Twisted apis, I'm confident I wouldn't have to
hand-craft something to check the auth header myself. What do you guys
suggest?

Thanks
Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100209/869e3a0c/attachment-0001.html>

From exarkun at twistedmatrix.com  Mon Feb  8 12:32:37 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 08 Feb 2010 19:32:37 -0000
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
Message-ID: <20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>

On 07:23 pm, brad.milne at devx.runthered.com wrote:
>I have a backend Twisted application with a front end in Django. Some 
>of
>their communication is via web services. Currently they are deployed on 
>the
>same box but may be separated in future. I want to enforce some basic
>authentication on the web services, so some lightweight http header
>authentication looks best. I've found the twisted.web.guard api, but it
>seems to be more heavyweight than I require (e.g. running up a Portal).
>Given the breadth of the Twisted apis, I'm confident I wouldn't have to
>hand-craft something to check the auth header myself. What do you guys
>suggest?

A portal takes about 28.9 �W to "run up" (given contemporary hardware). 
What makes you say this is "heavyweight"?

Jean-Paul



From rich at noir.com  Mon Feb  8 12:46:45 2010
From: rich at noir.com (K. Richard Pixley)
Date: Mon, 08 Feb 2010 11:46:45 -0800
Subject: [Twisted-Python] minor doc patch - IWriteDesriptor
In-Reply-To: <20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
Message-ID: <4B706A25.4010502@noir.com>

--- twisted/internet/interfaces.py.~1~    2009-01-22 06:01:46.000000000 
-0800
+++ twisted/internet/interfaces.py    2010-02-08 11:42:03.000000000 -0800
@@ -833,7 +833,7 @@
         I add writer to the set of file descriptors to get write events 
for.
 
         @param writer: An L{IWriteDescriptor} provider that will be 
checked for
-                       read events until it is removed from the reactor 
with
+                       write events until it is removed from the 
reactor with
                        L{removeWriter}.
 
         @return: C{None}.




From brad.milne at devx.runthered.com  Mon Feb  8 13:19:04 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Tue, 9 Feb 2010 09:19:04 +1300
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
Message-ID: <19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>

Just in terms of configuration. It seems that Guard, for example, is
designed to cache the credentials and maintain a session. My requirement is
just for a single request, so session maintenance seems like overhead.

Also in upskill time. The Twisted NPE book, for example, says "It might take
you a little while to understand all the classes and interfaces in
twisted.cred, and at first you might wonder why it's necessary to have a
system with so many moving parts. The answer is that this system is designed
to be extremely flexible." (pg 92)
That sounds like a great toolset, but the cost is to those that require the
minimalist solution, but still need to develop an understanding of the
greater picture to achieve that.

Finding Twisted documentation seems to be generally difficult, so if I can
find the 'lightest' (extra code) and 'lightest' (ramp-up time) solution,
that what I was hoping for a pointer towards.

Thanks
Brad

PS - did you mean µs?? Or have you really measured the power consumption in
Watts?


On 9 February 2010 08:32, <exarkun at twistedmatrix.com> wrote:

> On 07:23 pm, brad.milne at devx.runthered.com wrote:
>
>> I have a backend Twisted application with a front end in Django. Some of
>> their communication is via web services. Currently they are deployed on
>> the
>> same box but may be separated in future. I want to enforce some basic
>> authentication on the web services, so some lightweight http header
>> authentication looks best. I've found the twisted.web.guard api, but it
>> seems to be more heavyweight than I require (e.g. running up a Portal).
>> Given the breadth of the Twisted apis, I'm confident I wouldn't have to
>> hand-craft something to check the auth header myself. What do you guys
>> suggest?
>>
>
> A portal takes about 28.9 µW to "run up" (given contemporary hardware).
> What makes you say this is "heavyweight"?
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100209/e305c475/attachment.html>

From exarkun at twistedmatrix.com  Mon Feb  8 14:02:26 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 08 Feb 2010 21:02:26 -0000
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
	<19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>
Message-ID: <20100208210226.26099.695917310.divmod.xquotient.838@localhost.localdomain>

On 08:19 pm, brad.milne at devx.runthered.com wrote:
>Just in terms of configuration. It seems that Guard, for example, is
>designed to cache the credentials and maintain a session. My 
>requirement is
>just for a single request, so session maintenance seems like overhead.

Ah, I see.  Past versions of Guard were much more into that whole thing 
than what you'll currently find at twisted.web.guard.  There is no 
caching and no implication of a session.
>Also in upskill time. The Twisted NPE book, for example, says "It might 
>take
>you a little while to understand all the classes and interfaces in
>twisted.cred, and at first you might wonder why it's necessary to have 
>a
>system with so many moving parts. The answer is that this system is 
>designed
>to be extremely flexible." (pg 92)
>That sounds like a great toolset, but the cost is to those that require 
>the
>minimalist solution, but still need to develop an understanding of the
>greater picture to achieve that.

Argh.  I don't know what the point is of saying something is complicated 
in the explanation of the thing.  Either the explanation will seem 
complicated to the reader or it won't.  All you can hope to accomplish 
by announcing it in advance is to scare off people who would have other 
been able to understand what was going on.
>Finding Twisted documentation seems to be generally difficult, so if I 
>can
>find the 'lightest' (extra code) and 'lightest' (ramp-up time) 
>solution,
>that what I was hoping for a pointer towards.

It's definitely true that there isn't a lot of documentation for Guard. 
I've written up something, though (which hopefully will soon be included 
in Twisted itself, to make it easier to find), which I think will get 
you up to speed on using Guard pretty quickly:

    http://jcalderone.livejournal.com/53074.html

The final example, which sets up an actual Twisted Web server protected 
by digest auth (basic is even easier), only takes 16 lines.

If that's still not to your liking, then you can always fall back to the 
much more tedious, much less elegant, request.getUsername() and 
request.getPassword() approach. :)  You'll have to rely on the API docs 
for that approach, though, as far as I know there are no prose-style 
introductions for it.
>Thanks
>Brad
>
>PS - did you mean �s?? Or have you really measured the power 
>consumption in
>Watts?

A fairly accurate conversion between �s and �W is pretty 
straightforward, given a few things about your hardware...  :)

Jean-Paul



From thatmattbone at gmail.com  Mon Feb  8 16:03:46 2010
From: thatmattbone at gmail.com (Matt Bone)
Date: Mon, 8 Feb 2010 17:03:46 -0600
Subject: [Twisted-Python] PyCon 2010 Twisted Sprint
In-Reply-To: <d06a5cd31002080323r380fa3dcw3693b59278e2795a@mail.gmail.com>
References: <20100131222614.26099.1129803934.divmod.xquotient.17@localhost.localdomain>
	<d06a5cd31002080323r380fa3dcw3693b59278e2795a@mail.gmail.com>
Message-ID: <dfbf29b01002081503j14c2076brc89cd985098d801f@mail.gmail.com>

I'm still pretty new to twisted but would like to help out in the
sprint however I can.  I'm interested in web/web2, spread, inotify,
and deferToProcess.

I'll be around Friday-Tuesday morning.

--matt

On Mon, Feb 8, 2010 at 5:23 AM, Jonathan Lange <jml at mumak.net> wrote:
> On Sun, Jan 31, 2010 at 10:26 PM,  <exarkun at twistedmatrix.com> wrote:
>> Hi all,
>>
>> If there are enough interested people, there will be a Twisted sprint at
>> PyCon this year.  If you'll be at PyCon and are interested in sprinting
>> on some Twisted topic, give a shout.  Also, let us know what specific
>> topics you're interested in so we can let other people know what to
>> expect in the general announcement.
>>
>
> I'll be there for all of the sprint days.
>
> I'm interested in fixing bugs in Conch, getting a release out, pair
> programming fun, toolchain work and making it easier for casual
> contributors to contribute casually. In roughly that order.
>
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From rich at noir.com  Tue Feb  9 18:47:25 2010
From: rich at noir.com (K. Richard Pixley)
Date: Tue, 09 Feb 2010 17:47:25 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
Message-ID: <4B72102D.4010306@noir.com>

I'm confused be the response I get to the attached program.

In a nutshell, I'm building a reader, attaching it with addReader, later 
removing it with removeReader.  And I'm getting this:

    time python test_reactor.py
    Traceback (most recent call last):
    Failure: twisted.internet.error.ConnectionFdescWentAway: Uh:
    Filedescriptor went away.

Which seems to be telling me that I don't know as much yet as I'd hoped.

Why would the reactor care about a closed file descriptor that isn't 
even in it's interest set?

--rich
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100209/153f427d/attachment-0001.html>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: test_reactor.py
URL: </pipermail/twisted-python/attachments/20100209/153f427d/attachment.ksh>

From darren at ontrenet.com  Wed Feb 10 10:22:59 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Wed, 10 Feb 2010 12:22:59 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
Message-ID: <1265822579.2532.21.camel@kratos>

Hi,
  Is there an existing protocol that can provide the following?

- Accept stream binary data FROM a client (e.g. very large file
transfer)
- Receive data IN ORDER (i.e. stream. not out of order random packets)

I want to stream FROM a client to the protocol server and have the
server process the stream bytes incrementally so it doesn't have 
to store or write the entire data stream (too large).

I looked at FileTransferServer and Client, but I'm not sure it provides
what I need. 

Any tips appreciated!
Darren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/864e2bd8/attachment.html>

From vishalshetye at gmail.com  Wed Feb 10 10:28:51 2010
From: vishalshetye at gmail.com (Vishal Shetye)
Date: Wed, 10 Feb 2010 22:58:51 +0530
Subject: [Twisted-Python] Error handling for modules which use
	twisted.enterprise.adbapi
Message-ID: <6a2dc2341002100928l192e024v869e8e174eabb071@mail.gmail.com>

Hi,

I have an application that uses twisted.enterprise.adbapi for
accessing sqlite database.
Recently I had to replace sqlite3 shipped with python 2.5 with latest
version of pysqlite2. This was for taking advantage of newer fixes in
pysqlite2.
I thought it would be worthwhile to support both.

However, functions called using runInteraction have a code block as given below.
try:
    txn.execute(“update query”)
except sqlite3.IntegrityError:
    handleDuplicateValues()

or
an errback on the function runQuery/Interaction/Operation. They all
used twisted.python.failure.check/trap on some exception of the form
sqlite3.some_dbapi_exception.
Now, all such places need to import exceptions from pysqlite2 instead
of sqlite3.

However, to handle multiple dbapi modules one of which will be
configured for use by the user, I thought, I will have a global name
having reference of the current dbapi module being used. This will be
used by errbacks and except blocks.

Is there a better way of handling exceptions in such cases?

I came across http://svn.sqlalchemy.org/sqlalchemy/trunk/lib/sqlalchemy/exc.py.
I think sqlalchemy wraps dbapi erros in DBAPIError exception.
I imagine doing something similar in twisted as,
try:
    txn.execute(“update query”)
except adbapi.IntegrityError:
    handleDuplicateValues()

I also came across
http://mail.python.org/pipermail/db-sig/2003-September/003686.html
which suggests exceptions raised by different modules for same type of
error may not be consistent, atleast with respect to the information
provided.

Any suggestions on this would be very helpful.

Just to note http://twistedsphinx.funsize.net/projects/core/howto/rdbms.html
does not have error handling related info.

-- 
vishal shetye



From marco.giusti at gmail.com  Wed Feb 10 11:23:24 2010
From: marco.giusti at gmail.com (Marco Giusti)
Date: Wed, 10 Feb 2010 19:23:24 +0100
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1265822579.2532.21.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
Message-ID: <20100210182324.GB7892@murdoc>

On Wed, Feb 10, 2010 at 12:22:59PM -0500, Darren Govoni wrote:
> Hi,
>   Is there an existing protocol that can provide the following?
> 
> - Accept stream binary data FROM a client (e.g. very large file
> transfer)

HTTP and FTP just to say two of many,

> - Receive data IN ORDER (i.e. stream. not out of order random packets)

TCP

> I want to stream FROM a client to the protocol server and have the
> server process the stream bytes incrementally so it doesn't have 
> to store or write the entire data stream (too large).

http://twistedmatrix.com/documents/current/core/howto/producers.html


-- 
Hofstadter's Law:
It always takes longer than you expect, even when you take into account
Hofstadter's Law.



From mebly5343 at gmail.com  Wed Feb 10 11:36:15 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 13:36:15 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1265822579.2532.21.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
Message-ID: <dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>

Hi Darren:

Why not use TCP?  You can send the length of the file at the beginning so
you know how many bytes to listen for.
TCP guarantees delivery and ordering.

Mark

On Wed, Feb 10, 2010 at 12:22 PM, Darren Govoni <darren at ontrenet.com> wrote:

>  Hi,
>   Is there an existing protocol that can provide the following?
>
> - Accept stream binary data FROM a client (e.g. very large file transfer)
> - Receive data IN ORDER (i.e. stream. not out of order random packets)
>
> I want to stream FROM a client to the protocol server and have the
> server process the stream bytes incrementally so it doesn't have
> to store or write the entire data stream (too large).
>
> I looked at FileTransferServer and Client, but I'm not sure it provides
> what I need.
>
> Any tips appreciated!
> Darren
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/cafdc1fb/attachment.html>

From mebly5343 at gmail.com  Wed Feb 10 11:53:49 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 13:53:49 -0500
Subject: [Twisted-Python] How can I send unique configuration data for
	multiple connections through a factory?
Message-ID: <dc408fe51002101053g4234a5c3nc1040f9c72a9abae@mail.gmail.com>

Good day:

I've been having fun with Twisted.  I have my application running fine, with
multiple server and client connections using Telnet.  :-)

However, users always want something.  I need to send some unique
configuration information to each connection.  The connections are made
using connectTCP.  My first attempt assumed that the connection was made
when the call to connectTCP was executed.  It didn't work!  :-(

-------------------------------

from twisted.internet.protocol import ClientFactory
from twisted.internet import reactor
from twisted.conch.telnet import StatefulTelnetProtocol

class testClient(StatefulTelnetProtocol):

    def connectionMade(self):
        self.title = self.factory.connectString
        print "Client Connected: " + self.title
        self.setRawMode()
        self.factory.connections.append(self)

    def connectionLost(self, reason):
        if self in self.factory.connections:
            self.factory.connections.remove(self)

    def rawDataReceived(self,data):
        print data + "\n"

class ClusterClientFactory(ClientFactory):

    protocol = testClient

    def __init__(self):
        self.connections = []
        self.connectString = ''

    def startFactory(self):
        print "startFactory: " + self.connectString

    def startedConnecting(self, connector):
        print "Started connecting: " + str(connector)
        print self.connectString

    def buildProtocol(self, addr):
        print "bulldProtocol: " + str(addr)
        print "buildProtocol: " + self.connectString

        p = self.protocol()
        p.factory = self
        return p

if __name__ == '__main__':


    def startUp():

        factory = ClusterClientFactory()
        factory.maxDelay = 120  #  two minutes

        factory.connectString = "FirstString..."
        reactor.connectTCP("localhost", 7300, factory)

        factory.connectString = "SecondString"
        reactor.connectTCP("localhost", 7300, factory)

    reactor.callWhenRunning(startUp)
    reactor.run()

----------------------------------

The results are that buildProtocol gets the second string both times.
startedConnecting gets the correct string, but all I have there is a
connection object.  I need the correct data in buildProtocol to do it this
way.

------------------------------------

C:\Users\Mark\src\play>python testclient.py
startFactory: FirstString...
Started connecting: <twisted.internet.tcp.Connector instance at 0x01DAB620>
FirstString...
Started connecting: <twisted.internet.tcp.Connector instance at 0x01E0EFD0>
SecondString
bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
buildProtocol: SecondString
Client Connected: SecondString
Welcome to SimpleServer5



bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
buildProtocol: SecondString
Client Connected: SecondString
Welcome to SimpleServer5

--------------------------


My "best" idea is to pass the strings to the factory in a dictionary indexed
by the IP address and the port.  Then, buildProtocol() can use that to
recover the string and I can use reactor.resolve() to translate the host
name to the IP address.  The real application won't have multiple
connections to the same host and port like this example, so this would work.

There MUST be a better way.  :-)

My "simpleserver" is below if you want to run this.

THANKS for all of your help.  I have the basic application running now
(including a Tkinter GUI  :-) ) and Twisted has saved me hundreds or even
thousands of lines of code...

Mark Bailey

------------------------------

from twisted.conch.telnet import StatefulTelnetProtocol
from twisted.internet import reactor, protocol
from twisted.protocols.basic import LineReceiver

class TelnetEcho(StatefulTelnetProtocol):
    def connectionMade(self):
        self.factory.connection.append(self)
        self.sendLine("Welcome to SimpleServer5\r\n")


    def lineReceived(self, data):
        data = data.rstrip('\n\r')

        if data.upper() == 'BYE':
            self.sendLine("Goodbye...\r")
            self.transport.loseConnection()
        else:
            self.sendLine("Unrecognized command: %r\r" % (data,))

    def connectionLost(self, reason):
        self.factory.connection.remove(self)


class TelnetEchoFactory(protocol.Factory):
    protocol = TelnetEcho
    def __init__(self):
        self.connection = []


def createTelnetServer(port=7300):
    telnetinstance = TelnetEchoFactory()       #  needs to be a list
    reactor.listenTCP(port,telnetinstance)

if __name__ == "__main__":
    reactor.callWhenRunning(createTelnetServer)
    reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/acc93b9c/attachment.html>

From darren at ontrenet.com  Wed Feb 10 11:54:54 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Wed, 10 Feb 2010 13:54:54 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
Message-ID: <1265828094.2532.23.camel@kratos>

Hey Mark,
   Yeah, that's what I want, but in the 'twisted' way. I can write
socket servers, etc. But didn't notice a good example of how to do this
in Twisted (sparing me the socket programming),  until I found this old
message[1] with the classes I think might work.

[1]
http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html

Darren

On Wed, 2010-02-10 at 13:36 -0500, Mark Bailey wrote:

> Hi Darren:
> 
> Why not use TCP?  You can send the length of the file at the beginning
> so you know how many bytes to listen for.
> TCP guarantees delivery and ordering.
> 
> Mark
> 
> 
> On Wed, Feb 10, 2010 at 12:22 PM, Darren Govoni <darren at ontrenet.com>
> wrote:
> 
>         Hi,
>           Is there an existing protocol that can provide the
>         following?
>         
>         - Accept stream binary data FROM a client (e.g. very large
>         file transfer)
>         - Receive data IN ORDER (i.e. stream. not out of order random
>         packets)
>         
>         I want to stream FROM a client to the protocol server and have
>         the
>         server process the stream bytes incrementally so it doesn't
>         have 
>         to store or write the entire data stream (too large).
>         
>         I looked at FileTransferServer and Client, but I'm not sure it
>         provides
>         what I need. 
>         
>         Any tips appreciated!
>         Darren
>         
>         
>         _______________________________________________
>         Twisted-Python mailing list
>         Twisted-Python at twistedmatrix.com
>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>         
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/02bbedcc/attachment.html>

From mebly5343 at gmail.com  Wed Feb 10 11:57:35 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 13:57:35 -0500
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <4B72102D.4010306@noir.com>
References: <4B72102D.4010306@noir.com>
Message-ID: <dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>

Hi:

Aren't you adding two readers?  One is added in the __init__ method of
inputFile, the other in the test code.

I'm also a newbie so maybe I'm equally confused...

On Tue, Feb 9, 2010 at 8:47 PM, K. Richard Pixley <rich at noir.com> wrote:

>  I'm confused be the response I get to the attached program.
>
> In a nutshell, I'm building a reader, attaching it with addReader, later
> removing it with removeReader.  And I'm getting this:
>
> time python test_reactor.py
> Traceback (most recent call last):
> Failure: twisted.internet.error.ConnectionFdescWentAway: Uh: Filedescriptor
> went away.
>
> Which seems to be telling me that I don't know as much yet as I'd hoped.
>
> Why would the reactor care about a closed file descriptor that isn't even
> in it's interest set?
>
> --rich
>
> #!/usr/bin/env python
> # -*- coding: utf-8 -*-
>
> import os
>
> from zope.interface import implements
> from twisted.internet import reactor
> from twisted.internet.interfaces import IReadDescriptor
>
> class inputFile(object):
>    implements(IReadDescriptor)
>
>    def __init__(self, filename):
>        self.filename = filename
>        self.filedes = os.open(filename, os.O_RDONLY | os.O_NONBLOCK)
>        reactor.addReader(self)
>
>    def fileno(self):
>        return self.filedes
>
>    def connectionLost(self, reason):
>        raise reason
>
>    def logPrefix(self):
>        return 'inputFile'
>
>    def doRead(self):
>        reactor.removeReader(self)
>        os.close(self.filedes)
>        self.filedes = -1
>        reactor.stop()
>
> if __name__ == '__main__':
>    r = inputFile('/etc/group')
>    reactor.addReader(r)
>    reactor.run()
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/889edcd3/attachment.html>

From mebly5343 at gmail.com  Wed Feb 10 12:08:31 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 14:08:31 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1265828094.2532.23.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
Message-ID: <dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>

How about:


# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.


"""
An example client. Run simpleserv.py first before running this.
"""

from twisted.internet import reactor, protocol


# a client protocol

class EchoClient(protocol.Protocol):
    """Once connected, send a message, then print the result."""

    def connectionMade(self):
        self.transport.write("hello, world!")

    def dataReceived(self, data):
        "As soon as any data is received, write it back."
        print "Server said:", data
        self.transport.loseConnection()

    def connectionLost(self, reason):
        print "connection lost"

class EchoFactory(protocol.ClientFactory):
    protocol = EchoClient

    def clientConnectionFailed(self, connector, reason):
        print "Connection failed - goodbye!"
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print "Connection lost - goodbye!"
        reactor.stop()


# this connects the protocol to a server runing on port 8000
def main():
    f = EchoFactory()
    reactor.connectTCP("localhost", 8000, f)
    reactor.run()

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()


-------------------------


# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.


from twisted.internet import reactor, protocol


class Echo(protocol.Protocol):
    """This is just about the simplest possible protocol"""

    def dataReceived(self, data):
        "As soon as any data is received, write it back."
        self.transport.write(data)


def main():
    """This runs the protocol on port 8000"""
    factory = protocol.ServerFactory()
    factory.protocol = Echo
    reactor.listenTCP(8000,factory)
    reactor.run()

# this only runs if the module was *not* imported
if __name__ == '__main__':
    main()

-----

Mark


On Wed, Feb 10, 2010 at 1:54 PM, Darren Govoni <darren at ontrenet.com> wrote:

>  Hey Mark,
>    Yeah, that's what I want, but in the 'twisted' way. I can write socket
> servers, etc. But didn't notice a good example of how to do this in Twisted
> (sparing me the socket programming),  until I found this old message[1] with
> the classes I think might work.
>
> [1]
> http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
>
> Darren
>
> On Wed, 2010-02-10 at 13:36 -0500, Mark Bailey wrote:
>
> Hi Darren:
>
> Why not use TCP?  You can send the length of the file at the beginning so
> you know how many bytes to listen for.
> TCP guarantees delivery and ordering.
>
> Mark
>
>  On Wed, Feb 10, 2010 at 12:22 PM, Darren Govoni <darren at ontrenet.com>
> wrote:
>
>  Hi,
>   Is there an existing protocol that can provide the following?
>
> - Accept stream binary data FROM a client (e.g. very large file transfer)
> - Receive data IN ORDER (i.e. stream. not out of order random packets)
>
> I want to stream FROM a client to the protocol server and have the
> server process the stream bytes incrementally so it doesn't have
> to store or write the entire data stream (too large).
>
> I looked at FileTransferServer and Client, but I'm not sure it provides
> what I need.
>
> Any tips appreciated!
> Darren
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing listTwisted-Python at twistedmatrix.comhttp://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/73851f55/attachment.html>

From brad.milne at devx.runthered.com  Wed Feb 10 12:20:49 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 11 Feb 2010 08:20:49 +1300
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <20100208210226.26099.695917310.divmod.xquotient.838@localhost.localdomain>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
	<19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>
	<20100208210226.26099.695917310.divmod.xquotient.838@localhost.localdomain>
Message-ID: <19ae58271002101120k117bd70crb27f2382b119f452@mail.gmail.com>

Thanks. I had actually already found your page and you're right, it does
seem to be the best resource out there. Since your email I've had a second
look at it, as initially I wasn't sure how to use the example to return a
web resource (handler with render_GET etc) in place of the file you
returned. Turns out it wasn't actually too bad, and looks something like:

{code}

from zope.interface import implements

from twisted.cred.portal import IRealm, Portal
from twisted.cred.checkers import FilePasswordDB
from twisted.web.static import File
from twisted.web.resource import IResource
from twisted.web.guard import HTTPAuthSessionWrapper, DigestCredentialFactory

def secureServer():
    class PublicHTMLRealm(object):
        implements(IRealm)

        def requestAvatar(self, avatarId, mind, *interfaces):
            if IResource in interfaces:
                return (IResource, WebResource(), lambda: None)
            raise NotImplementedError()

    portal = Portal(PublicHTMLRealm(), [FilePasswordDB('httpd.password')])

    credentialFactory = BasicCredentialFactory("MyRealm")
    rsrc = HTTPAuthSessionWrapper(portal, [credentialFactory])

    return rsrc

class WebResource(resource.Resource):
    def __init__():
        ....

    def getChild(self, path, request):
        if path == self.expected:
            return ValidHandler()
        else:
            return InvalidUrlHandler()

# Create server
my_server = secureServer(...)
site = server.Site(my_server)

{code}

This has worked great so far where ValidHandler contains a render_GET, but
when calling a POST or PUT on handler that has render_POST or render_PUT
using this technique returns a message which I think is Method Not Allowed
(on the train right now, so don't have in front of me, sorry). Is there a
better way to form the above to prevent this?

Thanks again
Brad

On 9 February 2010 10:02, <exarkun at twistedmatrix.com> wrote:
...

> It's definitely true that there isn't a lot of documentation for Guard.
> I've written up something, though (which hopefully will soon be included in
> Twisted itself, to make it easier to find), which I think will get you up to
> speed on using Guard pretty quickly:
>
>   http://jcalderone.livejournal.com/53074.html
>
> The final example, which sets up an actual Twisted Web server protected by
> digest auth (basic is even easier), only takes 16 lines.
>
> If that's still not to your liking, then you can always fall back to the
> much more tedious, much less elegant, request.getUsername() and
> request.getPassword() approach. :)  You'll have to rely on the API docs for
> that approach, though, as far as I know there are no prose-style
> introductions for it.
>
...

>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100211/a1309ba7/attachment.html>

From darren at ontrenet.com  Wed Feb 10 12:23:19 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Wed, 10 Feb 2010 14:23:19 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
Message-ID: <1265829799.2532.27.camel@kratos>

>From what I learned in other posts, the dataReceived(self, data): in the
Echo server
will get called with out-of-order data/bytes from the client. Of course,
I could be misinformed,
but what I understood before was that in this type of Protocol, I would
have to re-order
and re-assemble the bytes.  And I'm trying to avoid that, since of
course, TCP already does it.

But like I said, I could have been misinformed because it seems pretty
basic to write 1,2,3
to a server and have it received 1,2,3, guaranteed.

On Wed, 2010-02-10 at 14:08 -0500, Mark Bailey wrote:

> How about:
> 
> 
> # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
> # See LICENSE for details.
> 
> 
> """
> An example client. Run simpleserv.py first before running this.
> """
> 
> from twisted.internet import reactor, protocol
> 
> 
> # a client protocol
> 
> class EchoClient(protocol.Protocol):
>     """Once connected, send a message, then print the result."""
>     
>     def connectionMade(self):
>         self.transport.write("hello, world!")
>     
>     def dataReceived(self, data):
>         "As soon as any data is received, write it back."
>         print "Server said:", data
>         self.transport.loseConnection()
>     
>     def connectionLost(self, reason):
>         print "connection lost"
> 
> class EchoFactory(protocol.ClientFactory):
>     protocol = EchoClient
> 
>     def clientConnectionFailed(self, connector, reason):
>         print "Connection failed - goodbye!"
>         reactor.stop()
>     
>     def clientConnectionLost(self, connector, reason):
>         print "Connection lost - goodbye!"
>         reactor.stop()
> 
> 
> # this connects the protocol to a server runing on port 8000
> def main():
>     f = EchoFactory()
>     reactor.connectTCP("localhost", 8000, f)
>     reactor.run()
> 
> # this only runs if the module was *not* imported
> if __name__ == '__main__':
>     main()
> 
> 
> -------------------------
> 
> 
> # Copyright (c) 2001-2004 Twisted Matrix Laboratories.
> # See LICENSE for details.
> 
> 
> from twisted.internet import reactor, protocol
> 
> 
> class Echo(protocol.Protocol):
>     """This is just about the simplest possible protocol"""
>     
>     def dataReceived(self, data):
>         "As soon as any data is received, write it back."
>         self.transport.write(data)
> 
> 
> def main():
>     """This runs the protocol on port 8000"""
>     factory = protocol.ServerFactory()
>     factory.protocol = Echo
>     reactor.listenTCP(8000,factory)
>     reactor.run()
> 
> # this only runs if the module was *not* imported
> if __name__ == '__main__':
>     main()
> 
> -----
> 
> Mark
> 
> 
> 
> On Wed, Feb 10, 2010 at 1:54 PM, Darren Govoni <darren at ontrenet.com>
> wrote:
> 
>         Hey Mark,
>            Yeah, that's what I want, but in the 'twisted' way. I can
>         write socket servers, etc. But didn't notice a good example of
>         how to do this in Twisted (sparing me the socket programming),
>         until I found this old message[1] with the classes I think
>         might work.
>         
>         [1]
>         http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
>         
>         Darren
>         
>         On Wed, 2010-02-10 at 13:36 -0500, Mark Bailey wrote:
>         
>         > Hi Darren:
>         > 
>         > Why not use TCP?  You can send the length of the file at the
>         > beginning so you know how many bytes to listen for.
>         > TCP guarantees delivery and ordering.
>         > 
>         > Mark
>         > 
>         > On Wed, Feb 10, 2010 at 12:22 PM, Darren Govoni
>         > <darren at ontrenet.com> wrote:
>         > 
>         >         Hi,
>         >           Is there an existing protocol that can provide the
>         >         following?
>         >         
>         >         - Accept stream binary data FROM a client (e.g. very
>         >         large file transfer)
>         >         - Receive data IN ORDER (i.e. stream. not out of
>         >         order random packets)
>         >         
>         >         I want to stream FROM a client to the protocol
>         >         server and have the
>         >         server process the stream bytes incrementally so it
>         >         doesn't have 
>         >         to store or write the entire data stream (too
>         >         large).
>         >         
>         >         I looked at FileTransferServer and Client, but I'm
>         >         not sure it provides
>         >         what I need. 
>         >         
>         >         Any tips appreciated!
>         >         Darren 
>         >         
>         >         _______________________________________________
>         >         Twisted-Python mailing list
>         >         Twisted-Python at twistedmatrix.com
>         >         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>         >         
>         > 
>         > 
>         > 
>         > _______________________________________________
>         > Twisted-Python mailing list
>         > Twisted-Python at twistedmatrix.com
>         > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>         
>         
>         
>         
>         
>         _______________________________________________
>         Twisted-Python mailing list
>         Twisted-Python at twistedmatrix.com
>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>         
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/e6c1a5fc/attachment.html>

From rich at noir.com  Wed Feb 10 12:24:29 2010
From: rich at noir.com (K. Richard Pixley)
Date: Wed, 10 Feb 2010 11:24:29 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
References: <4B72102D.4010306@noir.com>
	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
Message-ID: <4B7307ED.4010400@noir.com>

I don't think so.  I believe the reactor is actually added during the 
import.  (I learned this as I discovered that reactors can't be 
restarted, which means you have to manually create a new one as a 
fixture for simple unittest work.)

I looked through the code and there's a call in the reactor to fileno 
immediately after the call to doRead.  It seems to be attempting to 
check for file descriptors which broke during the read, but I think 
that's a mistake.  (Or at least, I'm confused about how else to do it).  
Seems to me that the only time my object has control in order to remove 
itself is during doRead.  So I'm thinking that either...

a) there's some other way to close out my object that I just haven't 
discovered or

b) the code which checks the file descriptor, (which may have been 
closed), after doRead is doing so mistakenly.

For now, in my real code, I'm just leaving the file descriptor.  But I'd 
like to know how this is intended to be used.

--rich (still a newbie)

Mark Bailey wrote:
> Hi:
>
> Aren't you adding two readers?  One is added in the __init__ method of 
> inputFile, the other in the test code.
>
> I'm also a newbie so maybe I'm equally confused...
>
> On Tue, Feb 9, 2010 at 8:47 PM, K. Richard Pixley <rich at noir.com 
> <mailto:rich at noir.com>> wrote:
>
>     I'm confused be the response I get to the attached program.
>
>     In a nutshell, I'm building a reader, attaching it with addReader,
>     later removing it with removeReader.  And I'm getting this:
>
>         time python test_reactor.py
>         Traceback (most recent call last):
>         Failure: twisted.internet.error.ConnectionFdescWentAway: Uh:
>         Filedescriptor went away.
>
>     Which seems to be telling me that I don't know as much yet as I'd
>     hoped.
>
>     Why would the reactor care about a closed file descriptor that
>     isn't even in it's interest set?
>
>     --rich
>
>     #!/usr/bin/env python
>     # -*- coding: utf-8 -*-
>
>     import os
>
>     from zope.interface import implements
>     from twisted.internet import reactor
>     from twisted.internet.interfaces import IReadDescriptor
>
>     class inputFile(object):
>        implements(IReadDescriptor)
>
>        def __init__(self, filename):
>            self.filename = filename
>            self.filedes = os.open(filename, os.O_RDONLY | os.O_NONBLOCK)
>            reactor.addReader(self)
>
>        def fileno(self):
>            return self.filedes
>
>        def connectionLost(self, reason):
>            raise reason
>
>        def logPrefix(self):
>            return 'inputFile'
>
>        def doRead(self):
>            reactor.removeReader(self)
>            os.close(self.filedes)
>            self.filedes = -1
>            reactor.stop()
>
>     if __name__ == '__main__':
>        r = inputFile('/etc/group')
>        reactor.addReader(r)
>        reactor.run()
>
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/3597b75d/attachment.html>

From arjan at scherpenisse.net  Wed Feb 10 12:38:48 2010
From: arjan at scherpenisse.net (Arjan Scherpenisse)
Date: Wed, 10 Feb 2010 20:38:48 +0100
Subject: [Twisted-Python] How can I send unique configuration data for
 multiple connections through a factory?
In-Reply-To: <dc408fe51002101053g4234a5c3nc1040f9c72a9abae@mail.gmail.com>
References: <dc408fe51002101053g4234a5c3nc1040f9c72a9abae@mail.gmail.com>
Message-ID: <4B730B48.3070206@scherpenisse.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

If you create two instances of your ClusterClientFactory, each with a
unique string, you should be fine. Requires only a small modification:

         factory = ClusterClientFactory()
         factory.maxDelay = 120  #  two minutes
         factory.connectString = "FirstString..."
         reactor.connectTCP("localhost", 7300, factory)

         factory2 = ClusterClientFactory()
         factory2.maxDelay = 120  #  two minutes
         factory2.connectString = "SecondString"
         reactor2.connectTCP("localhost", 7300, factory)

You can clean this up by putting the maxDelay and connectString in the
constructor of the factory:

reactor2.connectTCP("localhost", 7300, ClusterClientFactory(120, "First"))
reactor2.connectTCP("localhost", 7300, ClusterClientFactory(120, "Second"))

Arjan

Mark Bailey wrote:
> Good day:
> 
> I've been having fun with Twisted.  I have my application running fine,
> with multiple server and client connections using Telnet.  :-)
> 
> However, users always want something.  I need to send some unique
> configuration information to each connection.  The connections are made
> using connectTCP.  My first attempt assumed that the connection was made
> when the call to connectTCP was executed.  It didn't work!  :-(
> 
> -------------------------------
> 
> from twisted.internet.protocol import ClientFactory
> from twisted.internet import reactor
> from twisted.conch.telnet import StatefulTelnetProtocol
> 
> class testClient(StatefulTelnetProtocol):
> 
>     def connectionMade(self):
>         self.title = self.factory.connectString
>         print "Client Connected: " + self.title
>         self.setRawMode()
>         self.factory.connections.append(self)
> 
>     def connectionLost(self, reason):
>         if self in self.factory.connections:
>             self.factory.connections.remove(self)
> 
>     def rawDataReceived(self,data):
>         print data + "\n"
> 
> class ClusterClientFactory(ClientFactory):
> 
>     protocol = testClient
> 
>     def __init__(self):
>         self.connections = []
>         self.connectString = ''
> 
>     def startFactory(self):
>         print "startFactory: " + self.connectString
> 
>     def startedConnecting(self, connector):
>         print "Started connecting: " + str(connector)
>         print self.connectString
> 
>     def buildProtocol(self, addr):
>         print "bulldProtocol: " + str(addr)
>         print "buildProtocol: " + self.connectString
> 
>         p = self.protocol()
>         p.factory = self
>         return p
> 
> if __name__ == '__main__':
> 
> 
>     def startUp():
> 
>         factory = ClusterClientFactory()
>         factory.maxDelay = 120  #  two minutes
> 
>         factory.connectString = "FirstString..."
>         reactor.connectTCP("localhost", 7300, factory)
> 
>         factory.connectString = "SecondString"
>         reactor.connectTCP("localhost", 7300, factory)
> 
>     reactor.callWhenRunning(startUp)
>     reactor.run()
> 
> ----------------------------------
> 
> The results are that buildProtocol gets the second string both times. 
> startedConnecting gets the correct string, but all I have there is a
> connection object.  I need the correct data in buildProtocol to do it
> this way.
> 
> ------------------------------------
> 
> C:\Users\Mark\src\play>python testclient.py
> startFactory: FirstString...
> Started connecting: <twisted.internet.tcp.Connector instance at 0x01DAB620>
> FirstString...
> Started connecting: <twisted.internet.tcp.Connector instance at 0x01E0EFD0>
> SecondString
> bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
> buildProtocol: SecondString
> Client Connected: SecondString
> Welcome to SimpleServer5
> 
> 
> 
> bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
> buildProtocol: SecondString
> Client Connected: SecondString
> Welcome to SimpleServer5
> 
> --------------------------
> 
> 
> My "best" idea is to pass the strings to the factory in a dictionary
> indexed by the IP address and the port.  Then, buildProtocol() can use
> that to recover the string and I can use reactor.resolve() to translate
> the host name to the IP address.  The real application won't have
> multiple connections to the same host and port like this example, so
> this would work.
> 
> There MUST be a better way.  :-)
> 
> My "simpleserver" is below if you want to run this.
> 
> THANKS for all of your help.  I have the basic application running now
> (including a Tkinter GUI  :-) ) and Twisted has saved me hundreds or
> even thousands of lines of code...
> 
> Mark Bailey
> 
> ------------------------------
> 
> from twisted.conch.telnet import StatefulTelnetProtocol
> from twisted.internet import reactor, protocol
> from twisted.protocols.basic import LineReceiver
> 
> class TelnetEcho(StatefulTelnetProtocol):
>     def connectionMade(self):
>         self.factory.connection.append(self)
>         self.sendLine("Welcome to SimpleServer5\r\n")
> 
> 
>     def lineReceived(self, data):
>         data = data.rstrip('\n\r')
> 
>         if data.upper() == 'BYE':
>             self.sendLine("Goodbye...\r")
>             self.transport.loseConnection()
>         else:
>             self.sendLine("Unrecognized command: %r\r" % (data,))
> 
>     def connectionLost(self, reason):
>         self.factory.connection.remove(self)
> 
> 
> class TelnetEchoFactory(protocol.Factory):
>     protocol = TelnetEcho
>     def __init__(self):
>         self.connection = []
> 
> 
> def createTelnetServer(port=7300):
>     telnetinstance = TelnetEchoFactory()       #  needs to be a list
>     reactor.listenTCP(port,telnetinstance)
> 
> if __name__ == "__main__":
>     reactor.callWhenRunning(createTelnetServer)
>     reactor.run()
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAktzC0MACgkQigE4AbflYer9nwCgixra0FaTD6ubvGJufjApRG/m
A34An3C2ng+4x3/halWSgGQUvQvsCiTM
=Cg6W
-----END PGP SIGNATURE-----



From mebly5343 at gmail.com  Wed Feb 10 12:44:12 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 14:44:12 -0500
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <4B7307ED.4010400@noir.com>
References: <4B72102D.4010306@noir.com>
	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
	<4B7307ED.4010400@noir.com>
Message-ID: <dc408fe51002101144h6558578dtddcf6f724cfa2e32@mail.gmail.com>

Hi Rich:

Try removing the "reactor.addReader(self)" call from "__init__" and see what
happens.  That call is made when "r" is created in

   r = inputFile('/etc/group')

and immediately after that you are calling
   reactor.addReader(r)

So, you are calling reactor.addReader() twice on the same instance.

Mark

On Wed, Feb 10, 2010 at 2:24 PM, K. Richard Pixley <rich at noir.com> wrote:

>  I don't think so.  I believe the reactor is actually added during the
> import.  (I learned this as I discovered that reactors can't be restarted,
> which means you have to manually create a new one as a fixture for simple
> unittest work.)
>
> I looked through the code and there's a call in the reactor to fileno
> immediately after the call to doRead.  It seems to be attempting to check
> for file descriptors which broke during the read, but I think that's a
> mistake.  (Or at least, I'm confused about how else to do it).  Seems to me
> that the only time my object has control in order to remove itself is during
> doRead.  So I'm thinking that either...
>
> a) there's some other way to close out my object that I just haven't
> discovered or
>
> b) the code which checks the file descriptor, (which may have been closed),
> after doRead is doing so mistakenly.
>
> For now, in my real code, I'm just leaving the file descriptor.  But I'd
> like to know how this is intended to be used.
>
> --rich (still a newbie)
>
> Mark Bailey wrote:
>
> Hi:
>
> Aren't you adding two readers?  One is added in the __init__ method of
> inputFile, the other in the test code.
>
> I'm also a newbie so maybe I'm equally confused...
>
> On Tue, Feb 9, 2010 at 8:47 PM, K. Richard Pixley <rich at noir.com> wrote:
>
>> I'm confused be the response I get to the attached program.
>>
>> In a nutshell, I'm building a reader, attaching it with addReader, later
>> removing it with removeReader.  And I'm getting this:
>>
>> time python test_reactor.py
>> Traceback (most recent call last):
>> Failure: twisted.internet.error.ConnectionFdescWentAway: Uh:
>> Filedescriptor went away.
>>
>> Which seems to be telling me that I don't know as much yet as I'd hoped.
>>
>> Why would the reactor care about a closed file descriptor that isn't even
>> in it's interest set?
>>
>> --rich
>>
>> #!/usr/bin/env python
>> # -*- coding: utf-8 -*-
>>
>> import os
>>
>> from zope.interface import implements
>> from twisted.internet import reactor
>> from twisted.internet.interfaces import IReadDescriptor
>>
>> class inputFile(object):
>>    implements(IReadDescriptor)
>>
>>    def __init__(self, filename):
>>        self.filename = filename
>>        self.filedes = os.open(filename, os.O_RDONLY | os.O_NONBLOCK)
>>        reactor.addReader(self)
>>
>>    def fileno(self):
>>        return self.filedes
>>
>>    def connectionLost(self, reason):
>>        raise reason
>>
>>    def logPrefix(self):
>>        return 'inputFile'
>>
>>    def doRead(self):
>>        reactor.removeReader(self)
>>        os.close(self.filedes)
>>        self.filedes = -1
>>        reactor.stop()
>>
>> if __name__ == '__main__':
>>    r = inputFile('/etc/group')
>>    reactor.addReader(r)
>>    reactor.run()
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
> ------------------------------
>
> _______________________________________________
> Twisted-Python mailing listTwisted-Python at twistedmatrix.comhttp://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/e870621b/attachment.html>

From brad.milne at devx.runthered.com  Wed Feb 10 12:59:08 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 11 Feb 2010 08:59:08 +1300
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <19ae58271002101120k117bd70crb27f2382b119f452@mail.gmail.com>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
	<19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>
	<20100208210226.26099.695917310.divmod.xquotient.838@localhost.localdomain>
	<19ae58271002101120k117bd70crb27f2382b119f452@mail.gmail.com>
Message-ID: <19ae58271002101159l46874244jeac3f2e7d4de800e@mail.gmail.com>

End of trace is:
  File "C:\Python26\lib\site-packages\twisted\web\resource.py", line 189, in
render
    raise UnsupportedMethod(getattr(self, 'allowedMethods', ()))
twisted.web.server.UnsupportedMethod: ()

On 11 February 2010 08:20, Brad Milne <brad.milne at devx.runthered.com> wrote:

> Thanks. I had actually already found your page and you're right, it does
> seem to be the best resource out there. Since your email I've had a second
> look at it, as initially I wasn't sure how to use the example to return a
> web resource (handler with render_GET etc) in place of the file you
> returned. Turns out it wasn't actually too bad, and looks something like:
>
> {code}
>
> from zope.interface import implements
>
> from twisted.cred.portal import IRealm, Portal
> from twisted.cred.checkers import FilePasswordDB
> from twisted.web.static import File
> from twisted.web.resource import IResource
>
> from twisted.web.guard import HTTPAuthSessionWrapper, DigestCredentialFactory
>
> def secureServer():
>     class PublicHTMLRealm(object):
>         implements(IRealm)
>
>         def requestAvatar(self, avatarId, mind, *interfaces):
>
>             if IResource in interfaces:
>                 return (IResource, WebResource(), lambda: None)
>             raise NotImplementedError()
>
>     portal = Portal(PublicHTMLRealm(), [FilePasswordDB('httpd.password')])
>
>     credentialFactory = BasicCredentialFactory("MyRealm")
>     rsrc = HTTPAuthSessionWrapper(portal, [credentialFactory])
>
>     return rsrc
>
> class WebResource(resource.Resource):
>     def __init__():
>
>         ....
>
>     def getChild(self, path, request):
>         if path == self.expected:
>             return ValidHandler()
>         else:
>             return InvalidUrlHandler()
>
> # Create server
> my_server = secureServer(...)
>
> site = server.Site(my_server)
>
> {code}
>
> This has worked great so far where ValidHandler contains a render_GET, but
> when calling a POST or PUT on handler that has render_POST or render_PUT
> using this technique returns a message which I think is Method Not Allowed
> (on the train right now, so don't have in front of me, sorry). Is there a
> better way to form the above to prevent this?
>
> Thanks again
> Brad
>
> On 9 February 2010 10:02, <exarkun at twistedmatrix.com> wrote:
> ...
>
> It's definitely true that there isn't a lot of documentation for Guard.
>> I've written up something, though (which hopefully will soon be included in
>> Twisted itself, to make it easier to find), which I think will get you up to
>> speed on using Guard pretty quickly:
>>
>>   http://jcalderone.livejournal.com/53074.html
>>
>> The final example, which sets up an actual Twisted Web server protected by
>> digest auth (basic is even easier), only takes 16 lines.
>>
>> If that's still not to your liking, then you can always fall back to the
>> much more tedious, much less elegant, request.getUsername() and
>> request.getPassword() approach. :)  You'll have to rely on the API docs for
>> that approach, though, as far as I know there are no prose-style
>> introductions for it.
>>
> ...
>
>>
>> Jean-Paul
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100211/202e13d0/attachment.html>

From brad.milne at devx.runthered.com  Wed Feb 10 13:09:42 2010
From: brad.milne at devx.runthered.com (Brad Milne)
Date: Thu, 11 Feb 2010 09:09:42 +1300
Subject: [Twisted-Python] Light-est-weight http authentication
In-Reply-To: <19ae58271002101159l46874244jeac3f2e7d4de800e@mail.gmail.com>
References: <19ae58271002081123xa900c6dy10c8e43837587af6@mail.gmail.com>
	<20100208193237.26099.1912443649.divmod.xquotient.798@localhost.localdomain>
	<19ae58271002081219y2538219bwb4dd9855108ce398@mail.gmail.com>
	<20100208210226.26099.695917310.divmod.xquotient.838@localhost.localdomain>
	<19ae58271002101120k117bd70crb27f2382b119f452@mail.gmail.com>
	<19ae58271002101159l46874244jeac3f2e7d4de800e@mail.gmail.com>
Message-ID: <19ae58271002101209y2f2c9bd8n940a22981fc35e10@mail.gmail.com>

Haha, resolved now. Previously my setup wasn't sensitive to a missing
trailing slash on my PUT and POSTs, but now it is. I don't know why, but at
least it's solvable.

Thanks for the help
Brad

On 11 February 2010 08:59, Brad Milne <brad.milne at devx.runthered.com> wrote:

> End of trace is:
>   File "C:\Python26\lib\site-packages\twisted\web\resource.py", line 189,
> in render
>     raise UnsupportedMethod(getattr(self, 'allowedMethods', ()))
> twisted.web.server.UnsupportedMethod: ()
>
> On 11 February 2010 08:20, Brad Milne <brad.milne at devx.runthered.com>wrote:
>
>> Thanks. I had actually already found your page and you're right, it does
>> seem to be the best resource out there. Since your email I've had a second
>> look at it, as initially I wasn't sure how to use the example to return a
>> web resource (handler with render_GET etc) in place of the file you
>> returned. Turns out it wasn't actually too bad, and looks something like:
>>
>> {code}
>>
>> from zope.interface import implements
>>
>> from twisted.cred.portal import IRealm, Portal
>> from twisted.cred.checkers import FilePasswordDB
>> from twisted.web.static import File
>>
>> from twisted.web.resource import IResource
>>
>> from twisted.web.guard import HTTPAuthSessionWrapper, DigestCredentialFactory
>>
>> def secureServer():
>>     class PublicHTMLRealm(object):
>>         implements(IRealm)
>>
>>         def requestAvatar(self, avatarId, mind, *interfaces):
>>
>>
>>             if IResource in interfaces:
>>                 return (IResource, WebResource(), lambda: None)
>>             raise NotImplementedError()
>>
>>     portal = Portal(PublicHTMLRealm(), [FilePasswordDB('httpd.password')])
>>
>>
>>     credentialFactory = BasicCredentialFactory("MyRealm")
>>     rsrc = HTTPAuthSessionWrapper(portal, [credentialFactory])
>>
>>     return rsrc
>>
>> class WebResource(resource.Resource):
>>     def __init__():
>>
>>
>>         ....
>>
>>     def getChild(self, path, request):
>>         if path == self.expected:
>>             return ValidHandler()
>>         else:
>>             return InvalidUrlHandler()
>>
>> # Create server
>> my_server = secureServer(...)
>>
>>
>> site = server.Site(my_server)
>>
>> {code}
>>
>> This has worked great so far where ValidHandler contains a render_GET, but
>> when calling a POST or PUT on handler that has render_POST or render_PUT
>> using this technique returns a message which I think is Method Not Allowed
>> (on the train right now, so don't have in front of me, sorry). Is there a
>> better way to form the above to prevent this?
>>
>> Thanks again
>> Brad
>>
>> On 9 February 2010 10:02, <exarkun at twistedmatrix.com> wrote:
>> ...
>>
>> It's definitely true that there isn't a lot of documentation for Guard.
>>> I've written up something, though (which hopefully will soon be included in
>>> Twisted itself, to make it easier to find), which I think will get you up to
>>> speed on using Guard pretty quickly:
>>>
>>>   http://jcalderone.livejournal.com/53074.html
>>>
>>> The final example, which sets up an actual Twisted Web server protected
>>> by digest auth (basic is even easier), only takes 16 lines.
>>>
>>> If that's still not to your liking, then you can always fall back to the
>>> much more tedious, much less elegant, request.getUsername() and
>>> request.getPassword() approach. :)  You'll have to rely on the API docs for
>>> that approach, though, as far as I know there are no prose-style
>>> introductions for it.
>>>
>> ...
>>
>>>
>>> Jean-Paul
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100211/450bf268/attachment.html>

From rich at noir.com  Wed Feb 10 13:20:10 2010
From: rich at noir.com (K. Richard Pixley)
Date: Wed, 10 Feb 2010 12:20:10 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <dc408fe51002101144h6558578dtddcf6f724cfa2e32@mail.gmail.com>
References: <4B72102D.4010306@noir.com>	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>	<4B7307ED.4010400@noir.com>
	<dc408fe51002101144h6558578dtddcf6f724cfa2e32@mail.gmail.com>
Message-ID: <4B7314FA.2080304@noir.com>

Doh.  You're right about the double registration.  Thanks.  But that 
doesn't change my problem.

The reactor still complains about the busted descriptor after removing 
the reader and reseting my descriptor to -1.

--rich

Mark Bailey wrote:
> Hi Rich:
>
> Try removing the "reactor.addReader(self)" call from "__init__" and 
> see what happens.  That call is made when "r" is created in
>
>    r = inputFile('/etc/group')
>
> and immediately after that you are calling
>    reactor.addReader(r)
>
> So, you are calling reactor.addReader() twice on the same instance.
>
> Mark
>
> On Wed, Feb 10, 2010 at 2:24 PM, K. Richard Pixley <rich at noir.com 
> <mailto:rich at noir.com>> wrote:
>
>     I don't think so.  I believe the reactor is actually added during
>     the import.  (I learned this as I discovered that reactors can't
>     be restarted, which means you have to manually create a new one as
>     a fixture for simple unittest work.)
>
>     I looked through the code and there's a call in the reactor to
>     fileno immediately after the call to doRead.  It seems to be
>     attempting to check for file descriptors which broke during the
>     read, but I think that's a mistake.  (Or at least, I'm confused
>     about how else to do it).  Seems to me that the only time my
>     object has control in order to remove itself is during doRead.  So
>     I'm thinking that either...
>
>     a) there's some other way to close out my object that I just
>     haven't discovered or
>
>     b) the code which checks the file descriptor, (which may have been
>     closed), after doRead is doing so mistakenly.
>
>     For now, in my real code, I'm just leaving the file descriptor. 
>     But I'd like to know how this is intended to be used.
>
>     --rich (still a newbie)
>
>     Mark Bailey wrote:
>>     Hi:
>>
>>     Aren't you adding two readers?  One is added in the __init__
>>     method of inputFile, the other in the test code.
>>
>>     I'm also a newbie so maybe I'm equally confused...
>>
>>     On Tue, Feb 9, 2010 at 8:47 PM, K. Richard Pixley <rich at noir.com
>>     <mailto:rich at noir.com>> wrote:
>>
>>         I'm confused be the response I get to the attached program.
>>
>>         In a nutshell, I'm building a reader, attaching it with
>>         addReader, later removing it with removeReader.  And I'm
>>         getting this:
>>
>>             time python test_reactor.py
>>             Traceback (most recent call last):
>>             Failure: twisted.internet.error.ConnectionFdescWentAway:
>>             Uh: Filedescriptor went away.
>>
>>         Which seems to be telling me that I don't know as much yet as
>>         I'd hoped.
>>
>>         Why would the reactor care about a closed file descriptor
>>         that isn't even in it's interest set?
>>
>>         --rich
>>
>>         #!/usr/bin/env python
>>         # -*- coding: utf-8 -*-
>>
>>         import os
>>
>>         from zope.interface import implements
>>         from twisted.internet import reactor
>>         from twisted.internet.interfaces import IReadDescriptor
>>
>>         class inputFile(object):
>>            implements(IReadDescriptor)
>>
>>            def __init__(self, filename):
>>                self.filename = filename
>>                self.filedes = os.open(filename, os.O_RDONLY |
>>         os.O_NONBLOCK)
>>                reactor.addReader(self)
>>
>>            def fileno(self):
>>                return self.filedes
>>
>>            def connectionLost(self, reason):
>>                raise reason
>>
>>            def logPrefix(self):
>>                return 'inputFile'
>>
>>            def doRead(self):
>>                reactor.removeReader(self)
>>                os.close(self.filedes)
>>                self.filedes = -1
>>                reactor.stop()
>>
>>         if __name__ == '__main__':
>>            r = inputFile('/etc/group')
>>            reactor.addReader(r)
>>            reactor.run()
>>
>>         _______________________________________________
>>         Twisted-Python mailing list
>>         Twisted-Python at twistedmatrix.com
>>         <mailto:Twisted-Python at twistedmatrix.com>
>>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>     ------------------------------------------------------------------------
>>     _______________________________________________ Twisted-Python
>>     mailing list Twisted-Python at twistedmatrix.com
>>     <mailto:Twisted-Python at twistedmatrix.com>
>>     http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/1287de41/attachment.html>

From exarkun at twistedmatrix.com  Wed Feb 10 13:32:24 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 10 Feb 2010 20:32:24 -0000
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1265829799.2532.27.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
Message-ID: <20100210203224.26099.1312694566.divmod.xquotient.1023@localhost.localdomain>

On 07:23 pm, darren at ontrenet.com wrote:
>> From what I learned in other posts, the dataReceived(self, data): in 
>>the
>Echo server
>will get called with out-of-order data/bytes from the client. Of 
>course,
>I could be misinformed,
>but what I understood before was that in this type of Protocol, I would
>have to re-order
>and re-assemble the bytes.  And I'm trying to avoid that, since of
>course, TCP already does it.
>
>But like I said, I could have been misinformed because it seems pretty
>basic to write 1,2,3
>to a server and have it received 1,2,3, guaranteed.

Order is guaranteed, as long as you're using one of the TCP, SSL, or 
UNIX transports.

Jean-Paul



From exarkun at twistedmatrix.com  Wed Feb 10 13:39:57 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 10 Feb 2010 20:39:57 -0000
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <4B7307ED.4010400@noir.com>
References: <4B72102D.4010306@noir.com>
	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
	<4B7307ED.4010400@noir.com>
Message-ID: <20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>

On 07:24 pm, rich at noir.com wrote:
>I don't think so.  I believe the reactor is actually added during the 
>import.  (I learned this as I discovered that reactors can't be 
>restarted, which means you have to manually create a new one as a 
>fixture for simple unittest work.)
>
>I looked through the code and there's a call in the reactor to fileno 
>immediately after the call to doRead.  It seems to be attempting to 
>check for file descriptors which broke during the read, but I think 
>that's a mistake.  (Or at least, I'm confused about how else to do it). 
>Seems to me that the only time my object has control in order to remove 
>itself is during doRead.  So I'm thinking that either...
>
>a) there's some other way to close out my object that I just haven't 
>discovered or
>
>b) the code which checks the file descriptor, (which may have been 
>closed), after doRead is doing so mistakenly.
>
>For now, in my real code, I'm just leaving the file descriptor.  But 
>I'd like to know how this is intended to be used.

It isn't `doRead`'s job to close the file descriptor.  At most, it's 
`doRead`'s job to signal that the descriptor is no longer worth keeping 
open by returning something like an instance of ConnectionDone or 
ConnectionLost.  Then the reactor will call connectionLost on your 
object and you can close the file descriptor there.

The documentation for how this all works could probably be improved. 
Once you figure it out, would you mind submitting a patch?

Also, you won't accomplish much by adding a file descriptor for a normal 
file to the reactor.  Select, poll, etc, will always indicate that such 
descriptors are both readable and writeable.

Jean-Paul



From db3l.net at gmail.com  Wed Feb 10 14:01:08 2010
From: db3l.net at gmail.com (David Bolen)
Date: Wed, 10 Feb 2010 16:01:08 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
Message-ID: <m2vde44xgr.fsf@valheru.db3l.homeip.net>

Darren Govoni <darren at ontrenet.com> writes:

>>From what I learned in other posts, the dataReceived(self, data): in the
> Echo server
> will get called with out-of-order data/bytes from the client. Of course,
> I could be misinformed,
> but what I understood before was that in this type of Protocol, I would
> have to re-order
> and re-assemble the bytes.  And I'm trying to avoid that, since of
> course, TCP already does it.

Data being received out of order can't happen, as long as the Protocol
is layered on top of TCP, since as you say, TCP already provides that
guarantee.  The dataReceived() method is really just how the data
being received from TCP is handed to the Protocol object.

UDP can be out of order, as it provides very few guarantees above and
beyond IP itself.  But I'm not sure you can layer an IProtocol over
UDP with Twisted.

There is a general issue where you may receive the data in differently
sized chunks in dataReceived() than it might have been transmitted
originally, which is a common source of confusion to people new to
stream protocols, so perhaps you were thinking of that issue?

The stream nature (and possibility for early disconnect from the
client) is why having some internal length information for bulk
transfers is sensible.  For your original question, I was going to
suggest an older posting of mine for a similar situation where I needed
a bulk upload to augment a PB-based server, but it appears that you've
located it in the archives yourself.

> But like I said, I could have been misinformed because it seems pretty
> basic to write 1,2,3
> to a server and have it received 1,2,3, guaranteed.

Yes - TCP guarantees that what you transmit at one end will be
received in order at the other end or not at all (e.g., outages,
disconnects, etc...).  It has a weaker guarantee in terms of no
corruption, but one that is, in combination with typical link layer
protections, generally more than sufficient for the vast majority of
connections using it each day.

-- David




From mebly5343 at gmail.com  Wed Feb 10 14:15:40 2010
From: mebly5343 at gmail.com (Mark Bailey)
Date: Wed, 10 Feb 2010 16:15:40 -0500
Subject: [Twisted-Python] How can I send unique configuration data for
	multiple connections through a factory?
In-Reply-To: <4B730B48.3070206@scherpenisse.net>
References: <dc408fe51002101053g4234a5c3nc1040f9c72a9abae@mail.gmail.com>
	<4B730B48.3070206@scherpenisse.net>
Message-ID: <dc408fe51002101315o6e05c750x4493983e308aed48@mail.gmail.com>

Thanks, Arjan.  Of course, factories are breeding like rabbits, but that was
the obvious solution!  :-)  I wish I had thought of it.

You saved me several MORE hours...I've spend all day on this.

(It's snowing and work was CLOSED!  Yeehah!)

Mark

On Wed, Feb 10, 2010 at 2:38 PM, Arjan Scherpenisse
<arjan at scherpenisse.net>wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> If you create two instances of your ClusterClientFactory, each with a
> unique string, you should be fine. Requires only a small modification:
>
>         factory = ClusterClientFactory()
>         factory.maxDelay = 120  #  two minutes
>         factory.connectString = "FirstString..."
>         reactor.connectTCP("localhost", 7300, factory)
>
>          factory2 = ClusterClientFactory()
>         factory2.maxDelay = 120  #  two minutes
>         factory2.connectString = "SecondString"
>         reactor2.connectTCP("localhost", 7300, factory)
>
> You can clean this up by putting the maxDelay and connectString in the
> constructor of the factory:
>
> reactor2.connectTCP("localhost", 7300, ClusterClientFactory(120, "First"))
> reactor2.connectTCP("localhost", 7300, ClusterClientFactory(120, "Second"))
>
> Arjan
>
> Mark Bailey wrote:
> > Good day:
> >
> > I've been having fun with Twisted.  I have my application running fine,
> > with multiple server and client connections using Telnet.  :-)
> >
> > However, users always want something.  I need to send some unique
> > configuration information to each connection.  The connections are made
> > using connectTCP.  My first attempt assumed that the connection was made
> > when the call to connectTCP was executed.  It didn't work!  :-(
> >
> > -------------------------------
> >
> > from twisted.internet.protocol import ClientFactory
> > from twisted.internet import reactor
> > from twisted.conch.telnet import StatefulTelnetProtocol
> >
> > class testClient(StatefulTelnetProtocol):
> >
> >     def connectionMade(self):
> >         self.title = self.factory.connectString
> >         print "Client Connected: " + self.title
> >         self.setRawMode()
> >         self.factory.connections.append(self)
> >
> >     def connectionLost(self, reason):
> >         if self in self.factory.connections:
> >             self.factory.connections.remove(self)
> >
> >     def rawDataReceived(self,data):
> >         print data + "\n"
> >
> > class ClusterClientFactory(ClientFactory):
> >
> >     protocol = testClient
> >
> >     def __init__(self):
> >         self.connections = []
> >         self.connectString = ''
> >
> >     def startFactory(self):
> >         print "startFactory: " + self.connectString
> >
> >     def startedConnecting(self, connector):
> >         print "Started connecting: " + str(connector)
> >         print self.connectString
> >
> >     def buildProtocol(self, addr):
> >         print "bulldProtocol: " + str(addr)
> >         print "buildProtocol: " + self.connectString
> >
> >         p = self.protocol()
> >         p.factory = self
> >         return p
> >
> > if __name__ == '__main__':
> >
> >
> >     def startUp():
> >
> >         factory = ClusterClientFactory()
> >         factory.maxDelay = 120  #  two minutes
> >
> >         factory.connectString = "FirstString..."
> >         reactor.connectTCP("localhost", 7300, factory)
> >
> >         factory.connectString = "SecondString"
> >         reactor.connectTCP("localhost", 7300, factory)
> >
> >     reactor.callWhenRunning(startUp)
> >     reactor.run()
> >
> > ----------------------------------
> >
> > The results are that buildProtocol gets the second string both times.
> > startedConnecting gets the correct string, but all I have there is a
> > connection object.  I need the correct data in buildProtocol to do it
> > this way.
> >
> > ------------------------------------
> >
> > C:\Users\Mark\src\play>python testclient.py
> > startFactory: FirstString...
> > Started connecting: <twisted.internet.tcp.Connector instance at
> 0x01DAB620>
> > FirstString...
> > Started connecting: <twisted.internet.tcp.Connector instance at
> 0x01E0EFD0>
> > SecondString
> > bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
> > buildProtocol: SecondString
> > Client Connected: SecondString
> > Welcome to SimpleServer5
> >
> >
> >
> > bulldProtocol: IPv4Address(TCP, '127.0.0.1', 7300)
> > buildProtocol: SecondString
> > Client Connected: SecondString
> > Welcome to SimpleServer5
> >
> > --------------------------
> >
> >
> > My "best" idea is to pass the strings to the factory in a dictionary
> > indexed by the IP address and the port.  Then, buildProtocol() can use
> > that to recover the string and I can use reactor.resolve() to translate
> > the host name to the IP address.  The real application won't have
> > multiple connections to the same host and port like this example, so
> > this would work.
> >
> > There MUST be a better way.  :-)
> >
> > My "simpleserver" is below if you want to run this.
> >
> > THANKS for all of your help.  I have the basic application running now
> > (including a Tkinter GUI  :-) ) and Twisted has saved me hundreds or
> > even thousands of lines of code...
> >
> > Mark Bailey
> >
> > ------------------------------
> >
> > from twisted.conch.telnet import StatefulTelnetProtocol
> > from twisted.internet import reactor, protocol
> > from twisted.protocols.basic import LineReceiver
> >
> > class TelnetEcho(StatefulTelnetProtocol):
> >     def connectionMade(self):
> >         self.factory.connection.append(self)
> >         self.sendLine("Welcome to SimpleServer5\r\n")
> >
> >
> >     def lineReceived(self, data):
> >         data = data.rstrip('\n\r')
> >
> >         if data.upper() == 'BYE':
> >             self.sendLine("Goodbye...\r")
> >             self.transport.loseConnection()
> >         else:
> >             self.sendLine("Unrecognized command: %r\r" % (data,))
> >
> >     def connectionLost(self, reason):
> >         self.factory.connection.remove(self)
> >
> >
> > class TelnetEchoFactory(protocol.Factory):
> >     protocol = TelnetEcho
> >     def __init__(self):
> >         self.connection = []
> >
> >
> > def createTelnetServer(port=7300):
> >     telnetinstance = TelnetEchoFactory()       #  needs to be a list
> >     reactor.listenTCP(port,telnetinstance)
> >
> > if __name__ == "__main__":
> >     reactor.callWhenRunning(createTelnetServer)
> >     reactor.run()
> >
> >
> > ------------------------------------------------------------------------
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.9 (GNU/Linux)
> Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/
>
> iEYEARECAAYFAktzC0MACgkQigE4AbflYer9nwCgixra0FaTD6ubvGJufjApRG/m
> A34An3C2ng+4x3/halWSgGQUvQvsCiTM
> =Cg6W
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/99001b18/attachment.html>

From darren at ontrenet.com  Wed Feb 10 16:34:09 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Wed, 10 Feb 2010 18:34:09 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <m2vde44xgr.fsf@valheru.db3l.homeip.net>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
Message-ID: <1265844849.2532.28.camel@kratos>

Thanks for that explanation David. Makes sense! 

On Wed, 2010-02-10 at 16:01 -0500, David Bolen wrote:

> Darren Govoni <darren at ontrenet.com> writes:
> 
> >>From what I learned in other posts, the dataReceived(self, data): in the
> > Echo server
> > will get called with out-of-order data/bytes from the client. Of course,
> > I could be misinformed,
> > but what I understood before was that in this type of Protocol, I would
> > have to re-order
> > and re-assemble the bytes.  And I'm trying to avoid that, since of
> > course, TCP already does it.
> 
> Data being received out of order can't happen, as long as the Protocol
> is layered on top of TCP, since as you say, TCP already provides that
> guarantee.  The dataReceived() method is really just how the data
> being received from TCP is handed to the Protocol object.
> 
> UDP can be out of order, as it provides very few guarantees above and
> beyond IP itself.  But I'm not sure you can layer an IProtocol over
> UDP with Twisted.
> 
> There is a general issue where you may receive the data in differently
> sized chunks in dataReceived() than it might have been transmitted
> originally, which is a common source of confusion to people new to
> stream protocols, so perhaps you were thinking of that issue?
> 
> The stream nature (and possibility for early disconnect from the
> client) is why having some internal length information for bulk
> transfers is sensible.  For your original question, I was going to
> suggest an older posting of mine for a similar situation where I needed
> a bulk upload to augment a PB-based server, but it appears that you've
> located it in the archives yourself.
> 
> > But like I said, I could have been misinformed because it seems pretty
> > basic to write 1,2,3
> > to a server and have it received 1,2,3, guaranteed.
> 
> Yes - TCP guarantees that what you transmit at one end will be
> received in order at the other end or not at all (e.g., outages,
> disconnects, etc...).  It has a weaker guarantee in terms of no
> corruption, but one that is, in combination with typical link layer
> protections, generally more than sufficient for the vast majority of
> connections using it each day.
> 
> -- David
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100210/67cbbcba/attachment.html>

From petshmidt at googlemail.com  Thu Feb 11 05:41:12 2010
From: petshmidt at googlemail.com (Pet)
Date: Thu, 11 Feb 2010 13:41:12 +0100
Subject: [Twisted-Python] multiple versions of twisted on same machine
Message-ID: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>

Hi,

I'd like to upgrade twisted to the newest version and obviously first
test if my application works fine with new version. What is the best
(safest) way to do it?

Thanks for help, Pet



From thatmattbone at gmail.com  Thu Feb 11 05:55:36 2010
From: thatmattbone at gmail.com (Matt Bone)
Date: Thu, 11 Feb 2010 06:55:36 -0600
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
Message-ID: <dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>

You could try virtualenv:

http://pypi.python.org/pypi/virtualenv

And have one virtual environment with Twisted 9.0 and another with
Twisted 8.2, etc, etc.

--matt

On Thu, Feb 11, 2010 at 6:41 AM, Pet <petshmidt at googlemail.com> wrote:
> Hi,
>
> I'd like to upgrade twisted to the newest version and obviously first
> test if my application works fine with new version. What is the best
> (safest) way to do it?
>
> Thanks for help, Pet
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From kevin.horn at gmail.com  Thu Feb 11 09:41:45 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 11 Feb 2010 10:41:45 -0600
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
Message-ID: <562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>

FYI, this totally fails on Windows XP, Py2.6, Twisted 9.0.0...

[command line oputput]
(venv) C:\Documents and
Settings\hornk\Desktop\twisted_venv_test\venv>easy_install Twisted
Searching for Twisted
Reading http://pypi.python.org/simple/Twisted/
Reading http://twistedmatrix.com/
Reading http://www.twistedmatrix.com
Reading http://twistedmatrix.com/products/download
Reading http://twistedmatrix.com/projects/core/
Best match: Twisted 9.0.0
Downloading
http://tmrc.mit.edu/mirror/twisted/Twisted/9.0/Twisted-9.0.0.win32-py2.6.exe
Processing Twisted-9.0.0.win32-py2.6.exe
error:
c:\docume~1\hornk\locals~1\temp\easy_install-ftwcae\Twisted-9.0.0.win32-py2.6.exe
is not a valid distutils Windows .exe
[end command line output]

Am I missing something or should I file a ticket for this?

Kevin Horn

On Thu, Feb 11, 2010 at 6:55 AM, Matt Bone <thatmattbone at gmail.com> wrote:

> You could try virtualenv:
>
> http://pypi.python.org/pypi/virtualenv
>
> And have one virtual environment with Twisted 9.0 and another with
> Twisted 8.2, etc, etc.
>
> --matt
>
> On Thu, Feb 11, 2010 at 6:41 AM, Pet <petshmidt at googlemail.com> wrote:
> > Hi,
> >
> > I'd like to upgrade twisted to the newest version and obviously first
> > test if my application works fine with new version. What is the best
> > (safest) way to do it?
> >
> > Thanks for help, Pet
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100211/2ec7dfda/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Feb 11 10:05:35 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 11 Feb 2010 17:05:35 -0000
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
	<562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>
Message-ID: <20100211170535.26099.2118225748.divmod.xquotient.1087@localhost.localdomain>

On 04:41 pm, kevin.horn at gmail.com wrote:
>FYI, this totally fails on Windows XP, Py2.6, Twisted 9.0.0...

This is an interesting problem.

easy_install identifies 
http://tmrc.mit.edu/mirror/twisted/Twisted/9.0/Twisted-9.0.0.win32-py2.6.exe 
as some kind of package it can install - maybe a self-extracting zip?  I 
don't know - but that's not what it is.  This seems to be because the 
name matches the scheme setuptools uses for naming certain kinds of 
distribution files.

We presently are not distributing binary eggs for Windows, so 
easy_install isn't likely to be the best installation strategy anyway.

Jean-Paul



From kevin.horn at gmail.com  Thu Feb 11 10:54:47 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 11 Feb 2010 11:54:47 -0600
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <20100211170535.26099.2118225748.divmod.xquotient.1087@localhost.localdomain>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
	<562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>
	<20100211170535.26099.2118225748.divmod.xquotient.1087@localhost.localdomain>
Message-ID: <562bcc11002110954v3ed9a9a4u3c20344fecb583cc@mail.gmail.com>

On Thu, Feb 11, 2010 at 11:05 AM, <exarkun at twistedmatrix.com> wrote:

> On 04:41 pm, kevin.horn at gmail.com wrote:
> >FYI, this totally fails on Windows XP, Py2.6, Twisted 9.0.0...
>
> This is an interesting problem.
>
> easy_install identifies
>
> http://tmrc.mit.edu/mirror/twisted/Twisted/9.0/Twisted-9.0.0.win32-py2.6.exe
> as some kind of package it can install - maybe a self-extracting zip?  I
> don't know - but that's not what it is.  This seems to be because the
> name matches the scheme setuptools uses for naming certain kinds of
> distribution files.
>

I think it thinks that it's an executable created using "python setup.py
bdist_wininst" or something similar...


>
> We presently are not distributing binary eggs for Windows, so
> easy_install isn't likely to be the best installation strategy anyway.
>


Well, the second thing I do on a new machine (after installing Python of
course) is install MinGW and set distutils up to use it as a compiler for
Python extensions, so for me it usually works just fine. :)

However, in the general case, I agree that most people won't necessarily
have a compiler installed on Windows.
Not entirely related to this discussion (though not entirely unrelated), I
think that Twisted's whole release/distribution system needs to be revamped
a little. I've been meaning to talk to radix about this, but haven't found
the time...maybe this will give me the kick in the pants I needed...

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100211/64b291fa/attachment-0001.html>

From screwtape at froup.com  Thu Feb 11 15:27:36 2010
From: screwtape at froup.com (Timothy Allen)
Date: Fri, 12 Feb 2010 09:27:36 +1100
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <562bcc11002110954v3ed9a9a4u3c20344fecb583cc@mail.gmail.com>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
	<562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>
	<20100211170535.26099.2118225748.divmod.xquotient.1087@localhost.localdomain>
	<562bcc11002110954v3ed9a9a4u3c20344fecb583cc@mail.gmail.com>
Message-ID: <20100212092736.418241dd@hepzibah>

On Thu, 11 Feb 2010 11:54:47 -0600
Kevin Horn <kevin.horn at gmail.com> wrote:
> Not entirely related to this discussion (though not entirely
> unrelated), I think that Twisted's whole release/distribution system
> needs to be revamped a little. I've been meaning to talk to radix
> about this, but haven't found the time...maybe this will give me the
> kick in the pants I needed...

Oh ho ho ho ho, boy.

As one who has tinkered with Twisted's release/distribution system
(unsuccessfully so far - see ticket 1696 and 4138), I'd be very
interested to hear what you propose.

Oh, you might also be interested in ticket 1533.



From matusis at yahoo.com  Thu Feb 11 17:16:39 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Thu, 11 Feb 2010 16:16:39 -0800
Subject: [Twisted-Python] new epoll error after upgrading to 9.0.0
Message-ID: <040f01caab78$a5fdf670$f1f9e350$@com>

I upgraded to 9.0.0 and I am now seeing a new error, not present in 8.2.0 or
earlier:

2010-02-10 17:38:33-0800 [TagProtocol,9794986,68.126.204.104] Unhandled
Error
        Traceback (most recent call last):
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/application/app.py", line 348, in
runReactorWithLogging
            reactor.run()
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/base.py", line 1166, in run
            self.mainLoop()
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/base.py", line 1178, in mainLoop
            self.doIteration(t)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 194, in doPoll
            log.callWithLogger(selectable, _drdw, selectable, fd, event)
        --- <exception caught here> ---
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/python/log.py", line 84, in callWithLogger
            return callWithContext({"system": lp}, func, *args, **kw)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/python/log.py", line 69, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/python/context.py", line 59, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args,
**kw)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/python/context.py", line 37, in callWithContext
            return func(*args,**kw)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 223, in
_doReadOrWrite
            self._disconnectSelectable(selectable, why, inRead)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/posixbase.py", line 188, in
_disconnectSelectable
            selectable.readConnectionLost(f)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/tcp.py", line 508, in
readConnectionLost
            self.connectionLost(reason)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/tcp.py", line 513, in connectionLost
            abstract.FileDescriptor.connectionLost(self, reason)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/abstract.py", line 67, in
connectionLost
            self.stopWriting()
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/abstract.py", line 267, in stopWriting
            self.reactor.removeWriter(self)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 145, in
removeWriter
            self._remove(writer, self._writes, self._reads,
self._selectables, _epoll.OUT, _epoll.IN)
          File
"/usr/local/encap/python-2.6.4/lib/python2.6/site-packages/Twisted-9.0.0-py2
.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 131, in _remove
            self._poller._control(cmd, fd, flags)
          File "_epoll.pyx", line 125, in _epoll.epoll._control
            
        exceptions.IOError: [Errno 2] No such file or directory

The error is highy intemittent and occurs only under high connection client
rate. Any idea of what this could be?






From exarkun at twistedmatrix.com  Thu Feb 11 19:54:37 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 12 Feb 2010 02:54:37 -0000
Subject: [Twisted-Python] new epoll error after upgrading to 9.0.0
In-Reply-To: <040f01caab78$a5fdf670$f1f9e350$@com>
References: <040f01caab78$a5fdf670$f1f9e350$@com>
Message-ID: <20100212025437.26099.1766559741.divmod.xquotient.1156@localhost.localdomain>

On 12:16 am, matusis at yahoo.com wrote:
>I upgraded to 9.0.0 and I am now seeing a new error, not present in 
>8.2.0 or
>earlier:
>
>[snip]
>"/usr/local/encap/python-2.6.4/lib/python2.6/site- 
>packages/Twisted-9.0.0-py2
>.6-linux-x86_64.egg/twisted/internet/abstract.py", line 267, in 
>stopWriting
>            self.reactor.removeWriter(self)
>          File
>"/usr/local/encap/python-2.6.4/lib/python2.6/site- 
>packages/Twisted-9.0.0-py2
>.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 145, in
>removeWriter
>            self._remove(writer, self._writes, self._reads,
>self._selectables, _epoll.OUT, _epoll.IN)
>          File
>"/usr/local/encap/python-2.6.4/lib/python2.6/site- 
>packages/Twisted-9.0.0-py2
>.6-linux-x86_64.egg/twisted/internet/epollreactor.py", line 131, in 
>_remove
>            self._poller._control(cmd, fd, flags)
>          File "_epoll.pyx", line 125, in _epoll.epoll._control
>
>        exceptions.IOError: [Errno 2] No such file or directory
>
>The error is highy intemittent and occurs only under high connection 
>client
>rate. Any idea of what this could be?

Translating into English, a descriptor being monitored for writeability 
is being removed from the reactor, but epoll thinks it isn't being 
monitored in the first place.

It seems likely this is caused by an attempt to double remove something. 
However, why that would happen will probably take a bit more digging.

There was one direct change to epollreactor.py between 8.2 and 9.0:

  http://twistedmatrix.com/trac/changeset/26118#file1

It was to reactor shutdown code, though, so it seems like it probably 
isn't coming in to play in your case.

A number of other indirect changes were made, though (eg to the epoll 
reactor's base classes or other support code it uses).  It's conceivable 
one of these introduced the problem.  One could also imagine that the 
problem existed all along, and one of the changes merely nudged some 
race condition and now it's going badly for your app.

As far as suggestions for how to track this down go...

Well, minimizing the example is always nice. ;)  Aside from that, one 
idea that presents itself to me is to instrument the reactor to record 
addWriter/removeWriter events, and then log the complete stream of them 
for a particular writer when a double removeWriter is attempted. 
Initially you might just track that they happen, and use the result to 
confirm or reject the double removeWriter hypothesis.  If it holds up, 
it might be useful to add stack recording, in order to see why things 
are happening.

It may even be easy to implement this as a tiny reactor wrapper, which 
would make it easier to deploy and enable/disable.  If this doesn't 
disrupt your production environment overly, it might be worth trying.

Keep us updated. :)

Jean-Paul



From petshmidt at googlemail.com  Fri Feb 12 08:30:07 2010
From: petshmidt at googlemail.com (Pet)
Date: Fri, 12 Feb 2010 16:30:07 +0100
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com> 
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
Message-ID: <b460e9631002120730s5e993c64qf72db50e049842e2@mail.gmail.com>

On Thu, Feb 11, 2010 at 1:55 PM, Matt Bone <thatmattbone at gmail.com> wrote:
> You could try virtualenv:
>
> http://pypi.python.org/pypi/virtualenv
>
> And have one virtual environment with Twisted 9.0 and another with
> Twisted 8.2, etc, etc.
>

Thanks! Will try it out

> --matt
>
> On Thu, Feb 11, 2010 at 6:41 AM, Pet <petshmidt at googlemail.com> wrote:
>> Hi,
>>
>> I'd like to upgrade twisted to the newest version and obviously first
>> test if my application works fine with new version. What is the best
>> (safest) way to do it?
>>
>> Thanks for help, Pet
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From raq at cttc.upc.edu  Fri Feb 12 11:03:00 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Fri, 12 Feb 2010 19:03:00 +0100
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
Message-ID: <1265997780.12763.175.camel@mundo>

Hello everybody,

I am trying to build a a client/server application using Perspective
Broker and wanting to authenticate against a PostgreSQL database.
Everything works fine if I user plain text passwords, but when trying to
hash then using md5 using

from hashlib import md5
md5Password = md5(password).hexdigest()

then it does not authenticate (I use
credentials.checkMD5Password(password) at the checker class)

Then after reading 

twisted/spread/pb.py

I saw that everything is done in the functions:

respond(challenge, password)
challenge()

and the methods

checkMD5Password(self, md5Password)
checkPassword(self, password)

at the 

class _PortalAuthChallenger(Referenceable, _JellyableAvatarMixin)
 
By changing digest() with hexdigest(), it works.

The question is:

I there some way to make it work without making changes at the 'pb.py'
module?

Yes. I should use md5Password = md5(password).digest() to produce the
password, but then I cant authenticate with a 'pure-ftpd' daemon I need
to work with.

Any alternatives?

Thanks in advance.

Regards

-- 
Ramiro Alba

Centre Tecnològic de Tranferència de Calor
http://www.cttc.upc.edu


Escola Tècnica Superior d'Enginyeries
Industrial i Aeronàutica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que està net.




From rich at noir.com  Fri Feb 12 12:35:03 2010
From: rich at noir.com (K. Richard Pixley)
Date: Fri, 12 Feb 2010 11:35:03 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
References: <4B72102D.4010306@noir.com>	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>	<4B7307ED.4010400@noir.com>
	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
Message-ID: <4B75AD67.7090802@noir.com>

exarkun at twistedmatrix.com wrote:
> It isn't `doRead`'s job to close the file descriptor.  At most, it's 
> `doRead`'s job to signal that the descriptor is no longer worth keeping 
> open by returning something like an instance of ConnectionDone or 
> ConnectionLost.  Then the reactor will call connectionLost on your 
> object and you can close the file descriptor there.
>   
Thank you!  That's the info I was looking for.
> The documentation for how this all works could probably be improved. 
> Once you figure it out, would you mind submitting a patch?
>   
I don't think I've even seen mention of ConnectionDone in the doc yet.

I think there's a design decision here about the doc.  It seems to me 
that the return codes are part of the interface and as such should 
probably be documented in twisted.internet.interfaces.py whereas there's 
almost nothing there now.  Instead, some of this is in 
twisted.internet.abstract.  Granted, the distinction between an abstract 
class and a "zope.interface.Interface" is subtle.

As a newbie, the interface is the thing I find first and most easily.  
I'm directed there by the doc and by the reference material.  I have to 
dig around to even notice that the abstract class exists.
> Also, you won't accomplish much by adding a file descriptor for a normal 
> file to the reactor.  Select, poll, etc, will always indicate that such 
> descriptors are both readable and writeable.
I could swear that wasn't true when I first mucked about with select, 
but that was a couple decades ago.  Thanks for the update.

In any case, my point was more about illustration and testing.

--rich



From rich at noir.com  Fri Feb 12 12:59:44 2010
From: rich at noir.com (K. Richard Pixley)
Date: Fri, 12 Feb 2010 11:59:44 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
References: <4B72102D.4010306@noir.com>	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>	<4B7307ED.4010400@noir.com>
	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
Message-ID: <4B75B330.9040905@noir.com>

exarkun at twistedmatrix.com wrote:
> Also, you won't accomplish much by adding a file descriptor for a normal 
> file to the reactor.  Select, poll, etc, will always indicate that such 
> descriptors are both readable and writeable.
Er... on second thought... isn't there still a utility in asynchronous 
file io which yields to the reactor?

It may be always readable/writable, but if I simply read/write, I'll 
block the process for as long as that takes, block on read, block on 
write.  Whereas if I use async io on the descriptor and go through the 
reactor, I'm effectively yielding to the reactor and any other 
actionable descriptors on each loop as well as allowing my reads and 
writes to happen simultaneously.

Or am I missing something?

--rich



From exarkun at twistedmatrix.com  Fri Feb 12 13:06:06 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 12 Feb 2010 20:06:06 -0000
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <1265997780.12763.175.camel@mundo>
References: <1265997780.12763.175.camel@mundo>
Message-ID: <20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>

On 06:03 pm, raq at cttc.upc.edu wrote:
>Hello everybody,
>
>I am trying to build a a client/server application using Perspective
>Broker and wanting to authenticate against a PostgreSQL database.
>Everything works fine if I user plain text passwords, but when trying 
>to
>hash then using md5 using

What do you mean when you say you're using plain text passwords? 
Authentication involves multiple parties handling the password in 
multiple ways, and the "plain text"-ness of the password changes from 
step to step.
>from hashlib import md5
>md5Password = md5(password).hexdigest()
>
>then it does not authenticate (I use
>credentials.checkMD5Password(password) at the checker class)
>
>Then after reading
>
>twisted/spread/pb.py
>
>I saw that everything is done in the functions:
>
>respond(challenge, password)
>challenge()
>
>and the methods
>
>checkMD5Password(self, md5Password)
>checkPassword(self, password)
>
>at the
>
>class _PortalAuthChallenger(Referenceable, _JellyableAvatarMixin)
>
>By changing digest() with hexdigest(), it works.
>
>The question is:
>
>I there some way to make it work without making changes at the 'pb.py'
>module?
>
>Yes. I should use md5Password = md5(password).digest() to produce the
>password, but then I cant authenticate with a 'pure-ftpd' daemon I need
>to work with.
>
>Any alternatives?

You should register an IUsernameHashedPassword checker with the portal 
you pass to PBServerFactory and use PBClientFactory.login.  See 
pbbenchserver.py and pbbenchclient.py for examples of this.  Despite the 
fact that you're passing a UsernamePassword instance to 
PBClientFactory.login, the plain text password is never sent over the 
network.

Also, IUsernameMD5Password is about to be deprecated, along with the 
checkMD5Password method of _PortalAuthChallenger.

Jean-Paul



From exarkun at twistedmatrix.com  Fri Feb 12 13:11:38 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 12 Feb 2010 20:11:38 -0000
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <4B75AD67.7090802@noir.com>
References: <4B72102D.4010306@noir.com>
	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
	<4B7307ED.4010400@noir.com>
	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
	<4B75AD67.7090802@noir.com>
Message-ID: <20100212201138.26099.1039642509.divmod.xquotient.1208@localhost.localdomain>

On 07:35 pm, rich at noir.com wrote:
>exarkun at twistedmatrix.com wrote:
>>It isn't `doRead`'s job to close the file descriptor.  At most, it's
>>`doRead`'s job to signal that the descriptor is no longer worth 
>>keeping
>>open by returning something like an instance of ConnectionDone or
>>ConnectionLost.  Then the reactor will call connectionLost on your
>>object and you can close the file descriptor there.
>Thank you!  That's the info I was looking for.
>>The documentation for how this all works could probably be improved.
>>Once you figure it out, would you mind submitting a patch?
>I don't think I've even seen mention of ConnectionDone in the doc yet.
>
>I think there's a design decision here about the doc.  It seems to me
>that the return codes are part of the interface and as such should
>probably be documented in twisted.internet.interfaces.py whereas 
>there's
>almost nothing there now.  Instead, some of this is in
>twisted.internet.abstract.  Granted, the distinction between an 
>abstract
>class and a "zope.interface.Interface" is subtle.
>
>As a newbie, the interface is the thing I find first and most easily.
>I'm directed there by the doc and by the reference material.  I have to
>dig around to even notice that the abstract class exists.

You're absolutely right.  These interfaces should be documenting the 
meaning of the return value for these methods, since it is an integral 
part of the required interface.
>>Also, you won't accomplish much by adding a file descriptor for a 
>>normal
>>file to the reactor.  Select, poll, etc, will always indicate that 
>>such
>>descriptors are both readable and writeable.

>Er... on second thought... isn't there still a utility in asynchronous
>file io which yields to the reactor?
>
>It may be always readable/writable, but if I simply read/write, I'll
>block the process for as long as that takes, block on read, block on
>write.  Whereas if I use async io on the descriptor and go through the
>reactor, I'm effectively yielding to the reactor and any other
>actionable descriptors on each loop as well as allowing my reads and
>writes to happen simultaneously.
>
>Or am I missing something?

There could be utility in such, but Twisted has no support for it, 
largely because actual support on various platforms is still pretty 
ragged.

On Linux, you can get the aio_* family of functions, but they're pretty 
crap.  They have tons of limitations (only block-aligned reads allowed, 
only a certain number of outstanding operations (system wide) at a time, 
etc, and the failure mode for not complying with these limitations is 
that the APIs block).

It's a bit better on Windows, so someone could probably fashion an 
extension to iocpreactor for this.  There isn't a lot of developer 
attention focused on implementing Windows-only extensions right now, 
though.

Jean-Paul



From glyph at twistedmatrix.com  Fri Feb 12 18:58:46 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 12 Feb 2010 20:58:46 -0500
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <20100212201138.26099.1039642509.divmod.xquotient.1208@localhost.localdomain>
References: <4B72102D.4010306@noir.com>
	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>
	<4B7307ED.4010400@noir.com>
	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>
	<4B75AD67.7090802@noir.com>
	<20100212201138.26099.1039642509.divmod.xquotient.1208@localhost.localdomain>
Message-ID: <9D980C3C-84F2-48C5-A89A-245978D4996E@twistedmatrix.com>


On Feb 12, 2010, at 3:11 PM, exarkun at twistedmatrix.com wrote:

> On 07:35 pm, rich at noir.com wrote:
>> 

>> Er... on second thought... isn't there still a utility in asynchronous
>> file io which yields to the reactor?
>> 
>> It may be always readable/writable, but if I simply read/write, I'll
>> block the process for as long as that takes, block on read, block on
>> write.  Whereas if I use async io on the descriptor and go through the
>> reactor, I'm effectively yielding to the reactor and any other
>> actionable descriptors on each loop as well as allowing my reads and
>> writes to happen simultaneously.
>> 
>> Or am I missing something?
> 
> There could be utility in such, but Twisted has no support for it, 
> largely because actual support on various platforms is still pretty 
> ragged.
> 
> On Linux, you can get the aio_* family of functions, but they're pretty 
> crap.  They have tons of limitations (only block-aligned reads allowed, 
> only a certain number of outstanding operations (system wide) at a time, 
> etc, and the failure mode for not complying with these limitations is 
> that the APIs block).
> 
> It's a bit better on Windows, so someone could probably fashion an 
> extension to iocpreactor for this.  There isn't a lot of developer 
> attention focused on implementing Windows-only extensions right now, 
> though.

In my opinion, the right way to go about something like this would be to come up with an API for asynchronous File I/O in Twisted, implement that API using subprocesses or maybe the reactor threadpool, and then attempt to optimize and simplify it using special platform-speciifc APIs later.  (Important note: do not _expose_ the threaded nature of the code to application code at any point: just deliver the data to something in the reactor thread, to dispatch as it sees fit.)

My impression is that OS-level asynchronous file I/O APIs are fairly raw because, unlike network connectivity, you won't get thousands of connections at once.  If you only have one disk, you can only really get a benefit from two, maybe three file I/O slave processes, and that's a fairly small amount of resources to manage.  Granted, it's tricky to really identify how many "disks" you've got in a system, and the performance characteristics change radically based on what kind of disk technology is involved, but generally speaking a few worker threads and a queue of I/O operations would cover the vast majority of use-cases.


From rich at noir.com  Fri Feb 12 19:51:29 2010
From: rich at noir.com (K. Richard Pixley)
Date: Fri, 12 Feb 2010 18:51:29 -0800
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <9D980C3C-84F2-48C5-A89A-245978D4996E@twistedmatrix.com>
References: <4B72102D.4010306@noir.com>	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>	<4B7307ED.4010400@noir.com>	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>	<4B75AD67.7090802@noir.com>	<20100212201138.26099.1039642509.divmod.xquotient.1208@localhost.localdomain>
	<9D980C3C-84F2-48C5-A89A-245978D4996E@twistedmatrix.com>
Message-ID: <4B7613B1.6090505@noir.com>

Glyph Lefkowitz wrote:
> If you only have one disk, you can only really get a benefit from two, maybe three file I/O slave processes, and that's a fairly small amount of resources to manage.  Granted, it's tricky to really identify how many "disks" you've got in a system, and the performance characteristics change radically based on what kind of disk technology is involved, but generally speaking a few worker threads and a queue of I/O operations would cover the vast majority of use-cases.
I'm working with parallelized build servers.  We often have raided 
disks, solid state disks, servers with huge amounts of disk cache 
specifically so that an entire build happens in memory, etc.  File io is 
our bottleneck.

I think you probably are also forgetting about NFS.  NFS isn't slower 
than native disk in terms of throughput, only in terms of latency, which 
is a fabulous opportunity for asyncronous file io.  (Granted, NFS seems 
to have fallen out of fashion recently.)

I think twisted already has everything that's required.  It could 
probably use a slightly more friendly interface paradigm so the user 
doesn't have to do his own os.open, but really, even that wouldn't save 
much.

Reactor core was enough to sell me on twisted.  That's probably all I'll 
even be using.  And compared to writing my own, that's enough to be useful.

--rich



From glyph at twistedmatrix.com  Fri Feb 12 21:05:00 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 12 Feb 2010 23:05:00 -0500
Subject: [Twisted-Python] multiple versions of twisted on same machine
In-Reply-To: <20100212092736.418241dd@hepzibah>
References: <b460e9631002110441h3a9b91d4kdb6bab01ddadc2b5@mail.gmail.com>
	<dfbf29b01002110455p33443380o5cfc81aff8829653@mail.gmail.com>
	<562bcc11002110841w443dbc4bs3c0b6e1bfc68364a@mail.gmail.com>
	<20100211170535.26099.2118225748.divmod.xquotient.1087@localhost.localdomain>
	<562bcc11002110954v3ed9a9a4u3c20344fecb583cc@mail.gmail.com>
	<20100212092736.418241dd@hepzibah>
Message-ID: <55BF52F4-C317-4ADA-9754-62E2E96FA8DF@twistedmatrix.com>

On Feb 11, 2010, at 5:27 PM, Timothy Allen wrote:

> On Thu, 11 Feb 2010 11:54:47 -0600
> Kevin Horn <kevin.horn at gmail.com> wrote:
>> Not entirely related to this discussion (though not entirely
>> unrelated), I think that Twisted's whole release/distribution system
>> needs to be revamped a little. I've been meaning to talk to radix
>> about this, but haven't found the time...maybe this will give me the
>> kick in the pants I needed...
> 
> Oh ho ho ho ho, boy.
> 
> As one who has tinkered with Twisted's release/distribution system
> (unsuccessfully so far - see ticket 1696 and 4138), I'd be very
> interested to hear what you propose.

On the contrary - I think your progress on 1696 especially has been *very* successful!  perhaps not quite *complete* yet, though :).




From glyph at twistedmatrix.com  Fri Feb 12 21:13:57 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 12 Feb 2010 23:13:57 -0500
Subject: [Twisted-Python] newbie confusion - puzzling reactor response
In-Reply-To: <4B7613B1.6090505@noir.com>
References: <4B72102D.4010306@noir.com>	<dc408fe51002101057k6d4159e6o132500fe8628d790@mail.gmail.com>	<4B7307ED.4010400@noir.com>	<20100210203957.26099.2137222895.divmod.xquotient.1033@localhost.localdomain>	<4B75AD67.7090802@noir.com>	<20100212201138.26099.1039642509.divmod.xquotient.1208@localhost.localdomain>
	<9D980C3C-84F2-48C5-A89A-245978D4996E@twistedmatrix.com>
	<4B7613B1.6090505@noir.com>
Message-ID: <8B600131-6491-47C2-93AB-1AE868C72EF8@twistedmatrix.com>


On Feb 12, 2010, at 9:51 PM, K. Richard Pixley wrote:

> I'm working with parallelized build servers.  We often have raided 
> disks, solid state disks, servers with huge amounts of disk cache 
> specifically so that an entire build happens in memory, etc.  File io is 
> our bottleneck.

Yeah, this level of disk manipulation is past the point where a little bit less blocking on I/O will help... I imagine you've already got some kind of process/thread pooling solution already, or at least you'll need one.

> I think you probably are also forgetting about NFS.  NFS isn't slower 
> than native disk in terms of throughput, only in terms of latency, which 
> is a fabulous opportunity for asyncronous file io.  (Granted, NFS seems 
> to have fallen out of fashion recently.)

No, I'm not forgetting about it: I'm just saying that once you've got an API that applications can start using that gives *some* performance benefit (non-blocking disk I/O at the expense of spinning up a few threads / processes behind the scenes), you can always optimize it for other use-cases later, without necessarily changing the API.

> I think twisted already has everything that's required.  It could 
> probably use a slightly more friendly interface paradigm so the user 
> doesn't have to do his own os.open, but really, even that wouldn't save 
> much.

It would allow us to do it more portably, I think.  os.open()'s behavior can vary a lot depending on what you do with it.

> Reactor core was enough to sell me on twisted.  That's probably all I'll 
> even be using.  And compared to writing my own, that's enough to be useful.

Great, glad to hear it!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100212/2dcf9499/attachment.html>

From darren at ontrenet.com  Sat Feb 13 14:53:38 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sat, 13 Feb 2010 16:53:38 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1265844849.2532.28.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos>
Message-ID: <1266098018.2532.63.camel@kratos>

I spoke too fast. But pardon my noobiness.

Ok, so I am using a simple protocol that is listening on a TCP port.

One the client side, I write 4096 bytes using
self.transport.write(bytes)

on dataReceived side, I get only 1448. 

Now, what I "want" to happen is when I issue a write of a known number
of bytes.
I "want" those bytes to arrive in total because they represent a pickled
object.
The server has no idea if the bytes are split and scattered (again, I
want the
control protocol to take affect).

1) Am I doing something wrong here?
2) Can I force twisted to send ALL the bytes I issue in the write
without
re-thinking TCP or forcing me to re-implement TCP?

thanks!
Darren

On Wed, 2010-02-10 at 18:34 -0500, Darren Govoni wrote:

> Thanks for that explanation David. Makes sense! 
> 
> On Wed, 2010-02-10 at 16:01 -0500, David Bolen wrote: 
> 
> > Darren Govoni <darren at ontrenet.com> writes:
> > 
> > >>From what I learned in other posts, the dataReceived(self, data): in the
> > > Echo server
> > > will get called with out-of-order data/bytes from the client. Of course,
> > > I could be misinformed,
> > > but what I understood before was that in this type of Protocol, I would
> > > have to re-order
> > > and re-assemble the bytes.  And I'm trying to avoid that, since of
> > > course, TCP already does it.
> > 
> > Data being received out of order can't happen, as long as the Protocol
> > is layered on top of TCP, since as you say, TCP already provides that
> > guarantee.  The dataReceived() method is really just how the data
> > being received from TCP is handed to the Protocol object.
> > 
> > UDP can be out of order, as it provides very few guarantees above and
> > beyond IP itself.  But I'm not sure you can layer an IProtocol over
> > UDP with Twisted.
> > 
> > There is a general issue where you may receive the data in differently
> > sized chunks in dataReceived() than it might have been transmitted
> > originally, which is a common source of confusion to people new to
> > stream protocols, so perhaps you were thinking of that issue?
> > 
> > The stream nature (and possibility for early disconnect from the
> > client) is why having some internal length information for bulk
> > transfers is sensible.  For your original question, I was going to
> > suggest an older posting of mine for a similar situation where I needed
> > a bulk upload to augment a PB-based server, but it appears that you've
> > located it in the archives yourself.
> > 
> > > But like I said, I could have been misinformed because it seems pretty
> > > basic to write 1,2,3
> > > to a server and have it received 1,2,3, guaranteed.
> > 
> > Yes - TCP guarantees that what you transmit at one end will be
> > received in order at the other end or not at all (e.g., outages,
> > disconnects, etc...).  It has a weaker guarantee in terms of no
> > corruption, but one that is, in combination with typical link layer
> > protections, generally more than sufficient for the vast majority of
> > connections using it each day.
> > 
> > -- David
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100213/5189171c/attachment.html>

From JOHN at egh.com  Sat Feb 13 15:41:29 2010
From: JOHN at egh.com (John Santos)
Date: Sat, 13 Feb 2010 17:41:29 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1266098018.2532.63.camel@kratos>
Message-ID: <1100213171054.1317B-400000@Ives.egh.com>


Hi -

I still regard myself as a newbie, and may have mangled some of
the terminology, but ...


A question I can answer!  I had the same problem...



Make your protocol class be an Int16StringReceiver (or 
Int<size>StringReceiver, I think there is an 8 and a 32 available
as well), and Twisted will do it for you.  When writing, it will
prepend the size to each message, and on the receiving side it
will accumulate pieces until it gets the full message, and then
call your stringReceived() method with the full message (length
stripped off.)

It you lose the connection in the middle of a message, I think
you'll get a connectionLost event, rather than a partial message
or an indefinite hang.

So your stringReceived() and sendString() usage looks exactly
the same, but behind the scenes, Twisted does all the work.

(TCP always delivers all the data you send in the correct order,
but the fragmentation can be random.  A single message can get
split into multiple chunks, and I think multiple messages could
get appended into a single chunk.  But the byte order seen by the
receiver is preserved, so the receiver can tell when a complete
message has arrived if it lays some sort of protocol on top of
the TCP stream.  It could be message lengths (this is what the
Int*StringReceiver protocols do), or it could be "start" and
"Stop" characters embedded in the stream (for example, FTP in
text mode or SMTP use <CR><LF> to indicate ends of lines), or
it could be an agreed-upon count (I think FTP in binary mode
expects a series of 512-byte blocks, though I could be wrong
about this, and the receiver just partitions the incoming TCP
stream into groups of 512 bytes.)  I'm sure there are lots of
other ways to do it as well.  But the Twisted Int* protocol
should work fine for you.)

OBTW, the "16" is the number of bits in the message size
value; you should select a size large enough to hold your
largest message: "8" for up to 255 bytes, 16 allows for 65535
bytes and 32 allows something like 4MB.

The only two lines I had to change from my original code:

> from twisted.protocols.basic import Int16StringReceiver

> class MyProtocol(Int16StringReceiver):
    [...]

Hope this helps.

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539
-------------- next part --------------
I spoke too fast. But pardon my noobiness.



Ok, so I am using a simple protocol that is listening on a TCP port.



One the client side, I write 4096 bytes using

self.transport.write(bytes)



on dataReceived side, I get only 1448. 



Now, what I "want" to happen is when I issue a write of a known number

of bytes.

I "want" those bytes to arrive in total because they represent a pickled

object.

The server has no idea if the bytes are split and scattered (again, I

want the

control protocol to take affect).



1) Am I doing something wrong here?

2) Can I force twisted to send ALL the bytes I issue in the write

without

re-thinking TCP or forcing me to re-implement TCP?



thanks!

Darren



On Wed, 2010-02-10 at 18:34 -0500, Darren Govoni wrote:



> Thanks for that explanation David. Makes sense! 

> 

> On Wed, 2010-02-10 at 16:01 -0500, David Bolen wrote: 

> 

> > Darren Govoni <darren at ontrenet.com> writes:

> > 

> > >>From what I learned in other posts, the dataReceived(self, data): in the

> > > Echo server

> > > will get called with out-of-order data/bytes from the client. Of course,

> > > I could be misinformed,

> > > but what I understood before was that in this type of Protocol, I would

> > > have to re-order

> > > and re-assemble the bytes.  And I'm trying to avoid that, since of

> > > course, TCP already does it.

> > 

> > Data being received out of order can't happen, as long as the Protocol

> > is layered on top of TCP, since as you say, TCP already provides that

> > guarantee.  The dataReceived() method is really just how the data

> > being received from TCP is handed to the Protocol object.

> > 

> > UDP can be out of order, as it provides very few guarantees above and

> > beyond IP itself.  But I'm not sure you can layer an IProtocol over

> > UDP with Twisted.

> > 

> > There is a general issue where you may receive the data in differently

> > sized chunks in dataReceived() than it might have been transmitted

> > originally, which is a common source of confusion to people new to

> > stream protocols, so perhaps you were thinking of that issue?

> > 

> > The stream nature (and possibility for early disconnect from the

> > client) is why having some internal length information for bulk

> > transfers is sensible.  For your original question, I was going to

> > suggest an older posting of mine for a similar situation where I needed

> > a bulk upload to augment a PB-based server, but it appears that you've

> > located it in the archives yourself.

> > 

> > > But like I said, I could have been misinformed because it seems pretty

> > > basic to write 1,2,3

> > > to a server and have it received 1,2,3, guaranteed.

> > 

> > Yes - TCP guarantees that what you transmit at one end will be

> > received in order at the other end or not at all (e.g., outages,

> > disconnects, etc...).  It has a weaker guarantee in terms of no

> > corruption, but one that is, in combination with typical link layer

> > protections, generally more than sufficient for the vast majority of

> > connections using it each day.

> > 

> > -- David

> > 

> > 

> > _______________________________________________

> > Twisted-Python mailing list

> > Twisted-Python at twistedmatrix.com

> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

> 

> 

> 

> _______________________________________________

> Twisted-Python mailing list

> Twisted-Python at twistedmatrix.com

> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100213/ee8b4353/attachment.html>
-------------- next part --------------
_______________________________________________

Twisted-Python mailing list

Twisted-Python at twistedmatrix.com

http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From andrew at bemusement.org  Sat Feb 13 16:06:19 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Sun, 14 Feb 2010 10:06:19 +1100
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1266098018.2532.63.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
Message-ID: <20100213230619.GC18546@steerpike.home.puzzling.org>

Darren Govoni wrote:
>    I spoke too fast. But pardon my noobiness.
> 
>    Ok, so I am using a simple protocol that is listening on a TCP port.
> 
>    One the client side, I write 4096 bytes using self.transport.write(bytes)
> 
>    on dataReceived side, I get only 1448.
> 
>    Now, what I "want" to happen is when I issue a write of a known
>    number of bytes.  I "want" those bytes to arrive in total because
>    they represent a pickled object.  The server has no idea if the
>    bytes are split and scattered (again, I want the control protocol
>    to take affect).
> 
>    1) Am I doing something wrong here?

Yes.  You are expecting guarantees that aren't provided by TCP.  TCP
only guarantees that a stream of bytes will arrive in order (or not at
all).  It guarantees nothing about what size packets those bytes will
arrive in.  As you've already noticed it is common for packets to be
broken up into less than 1500 bytes (1500 is a common MTU for internet
hops[1]), and depending on the network links between your hosts it could
quite easily be broken up even further.

So, you need to use some sort of framing in your protocol.

>    2) Can I force twisted to send ALL the bytes I issue in the write without
>    re-thinking TCP or forcing me to re-implement TCP?

Twisted by itself cannot solve this for you.  Even if there were some
way to guarantee that your write was written to the network in a single
packet (and there can't be due to how TCP works, but let's assume you
can), it wouldn't matter because the next hop in the network connection
would be free to break up that large packet into smaller pieces, and
probably would.

Your data needs to be self-describe how long each message is, i.e. frame
them.  See <http://www.xml.com/pub/a/ws/2003/11/25/protocols.html> (and
the rest of the series at <http://www.xml.com/pub/au/215>).

Twisted provides some facilities for building protocols with different
kinds of framing, e.g. delimited by a special marker (LineReceiver) or
length-prefixed (NetstringReceiver, Int32StringReceiver).  Those classes
can be found in twisted.protocols.basic.

-Andrew.

[1] http://en.wikipedia.org/wiki/Maximum_transmission_unit



From andrew at bemusement.org  Sat Feb 13 16:08:12 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Sun, 14 Feb 2010 10:08:12 +1100
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1266098018.2532.63.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
Message-ID: <20100213230812.GD18546@steerpike.home.puzzling.org>

Darren Govoni wrote:
[...]
>    2) Can I force twisted to send ALL the bytes I issue in the write without
>    re-thinking TCP or forcing me to re-implement TCP?

Also,
<http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>

-Andrew.




From burslem2001 at yahoo.com  Sat Feb 13 16:23:27 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 13 Feb 2010 15:23:27 -0800 (PST)
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <20100213230619.GC18546@steerpike.home.puzzling.org>
Message-ID: <124746.49764.qm@web112509.mail.gq1.yahoo.com>

Hello,

I want to send raw binary data but also text in the message. I am currently sending ascii data to the twisted server via open-ssl.
Its great and twisted is cool. However I want to send a name of document and then the raw data in the same message? Is this possible with twisted.
Essentially I want to store the file in a location based upon its name.
Is this even practical to do this? Not sure.

Say for instance

<FILENAME>gazza.doc</FILENAME>
<RAWDATA>0101110100101010010010110010101010101101010</RAWDATA>

I dont know if the SAX parser which I am using could parse this data?

Thanks,
Garyc







From darren at ontrenet.com  Sat Feb 13 16:39:13 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sat, 13 Feb 2010 18:39:13 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <20100213230812.GD18546@steerpike.home.puzzling.org>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<20100213230812.GD18546@steerpike.home.puzzling.org>
Message-ID: <1266104353.2532.65.camel@kratos>

Thanks. I'm a shameless noob....

On Sun, 2010-02-14 at 10:08 +1100, Andrew Bennetts wrote:

> Darren Govoni wrote:
> [...]
> >    2) Can I force twisted to send ALL the bytes I issue in the write without
> >    re-thinking TCP or forcing me to re-implement TCP?
> 
> Also,
> <http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>
> 
> -Andrew.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100213/0b013b4a/attachment.html>

From alexandre at quessy.net  Sat Feb 13 16:40:48 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sat, 13 Feb 2010 18:40:48 -0500
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <124746.49764.qm@web112509.mail.gq1.yahoo.com>
References: <20100213230619.GC18546@steerpike.home.puzzling.org>
	<124746.49764.qm@web112509.mail.gq1.yahoo.com>
Message-ID: <72236ba91002131540r602c86b5s4173dcf3f809c824@mail.gmail.com>

Hello,
I have the same kind of task to do, and for now, I am thinking about
using some kind of file sharing utility, such as Samba, to do so. It's
probably a lot more efficient, since they are used to sharing files !
I would just send the file name, not the data itself.

This said, sending them using a programmer's solution - not a sysadmin
solution - would be closer to my own skills, so I am interested in
knowing if this could be suitable. I think, though, that it would be
faster to use a transfert protocol that would be implemented in C, not
Python. Am I wrong?

a

2010/2/13 gary clark <burslem2001 at yahoo.com>:
> Hello,
>
> I want to send raw binary data but also text in the message. I am currently sending ascii data to the twisted server via open-ssl.
> Its great and twisted is cool. However I want to send a name of document and then the raw data in the same message? Is this possible with twisted.
> Essentially I want to store the file in a location based upon its name.
> Is this even practical to do this? Not sure.
>
> Say for instance
>
> <FILENAME>gazza.doc</FILENAME>
> <RAWDATA>0101110100101010010010110010101010101101010</RAWDATA>
>
> I dont know if the SAX parser which I am using could parse this data?
>
> Thanks,
> Garyc
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/



From maarten at treewalker.org  Sat Feb 13 17:02:25 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Sun, 14 Feb 2010 01:02:25 +0100
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <124746.49764.qm@web112509.mail.gq1.yahoo.com>
References: <124746.49764.qm@web112509.mail.gq1.yahoo.com>
Message-ID: <201002140102.25908.maarten@treewalker.org>

On Sunday 14 February 2010, gary clark wrote:

> I want to send raw binary data but also text in the message. I am
> currently sending ascii data to the twisted server via open-ssl. Its
> great and twisted is cool. However I want to send a name of document and
> then the raw data in the same message? Is this possible with twisted.
> Essentially I want to store the file in a location based upon its name.
> Is this even practical to do this? Not sure.

Unless you really cannot open a new TCP connection, the HTTP PUT command 
sounds like a good option for this. If you need more file management 
operations later, you could adopt the WebDAV extensions to HTTP:
  http://en.wikipedia.org/wiki/Webdav
 
> Say for instance
> 
> <FILENAME>gazza.doc</FILENAME>
> <RAWDATA>0101110100101010010010110010101010101101010</RAWDATA>
> 
> I dont know if the SAX parser which I am using could parse this data?

You could use base64 encoding: put all the data in a Python string and call 
"s.encode('base64')".

Bye,
		Maarten



From maarten at treewalker.org  Sat Feb 13 17:07:31 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Sun, 14 Feb 2010 01:07:31 +0100
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <72236ba91002131540r602c86b5s4173dcf3f809c824@mail.gmail.com>
References: <20100213230619.GC18546@steerpike.home.puzzling.org>
	<124746.49764.qm@web112509.mail.gq1.yahoo.com>
	<72236ba91002131540r602c86b5s4173dcf3f809c824@mail.gmail.com>
Message-ID: <201002140107.31749.maarten@treewalker.org>

On Sunday 14 February 2010, Alexandre Quessy wrote:

> This said, sending them using a programmer's solution - not a sysadmin
> solution - would be closer to my own skills, so I am interested in
> knowing if this could be suitable. I think, though, that it would be
> faster to use a transfert protocol that would be implemented in C, not
> Python. Am I wrong?

I would suggest to implement it in Python first and then benchmark it. Maybe 
the simplest implementation is already fast enough. Maybe the bottleneck is 
the network or the disk you're writing to; in that case you would be better 
off upgrading your switches or buying an SSD instead of writing C code.

Bye,
		Maarten



From db3l.net at gmail.com  Sat Feb 13 18:22:10 2010
From: db3l.net at gmail.com (David Bolen)
Date: Sat, 13 Feb 2010 20:22:10 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
Message-ID: <m2k4ug4nnh.fsf@valheru.db3l.homeip.net>

Darren Govoni <darren at ontrenet.com> writes:

> I spoke too fast. But pardon my noobiness.
>
> Ok, so I am using a simple protocol that is listening on a TCP port.
>
> One the client side, I write 4096 bytes using
> self.transport.write(bytes)
>
> on dataReceived side, I get only 1448. 

Quite possible, and even likely with a chunk of 4096, given likely
network latencies and the physical packet sizes at each network hop
along the way.

However, dataReceived will eventually be called additional times until
all of the 4096 bytes that was transmitted and received over the
socket connection have been handed off to your protocol.  That's just
the nature of a stream protocol - it's a constant stream of data being
fed by one end and drained on the other, without any natural
boundaries or structures within (other than, I suppose, the boundary
of an octet since you can't receive a partial octet).

The alternative is to use a datagram protocol like UDP, but then you
have all the negatives of no guaranteed delivery, out of order
delivery, completely impossible delivery (when trying a datagram
larger than the UDP limit), etc...

Far easier to just handle the TCP stream properly.

> Now, what I "want" to happen is when I issue a write of a known
> number of bytes. I "want" those bytes to arrive in total because
> they represent a pickled object.  The server has no idea if the
> bytes are split and scattered (again, I want the control protocol to
> take affect).

I suspect it may just be a difference in phrasing, but note that I
consider "arrive in total" to be different from "arrive in the same
number of I/O operations".  TCP guarantees the former (sans dropped
connections) but not the latter.  It's a trade-off that you make in
order to get the other benefits of guaranteed delivery with TCP,
regardless of network disruptions, latency, etc...

You're fine as long as you just accept up front that you can't make
any assumptions as to how the data will arrive at the receiving end.
So combine the data in whatever sizes it is received (and any number
of received chunks) until you have it all.  You can then de-pickle it
or do anything else with it.  As a comparison, that's really all PB is
doing, although it's banana-encoding the object on the wire rather
than pickling.

Depending on the client/server interaction, you may also have the
opposite problem - the final chunk of data received may cover more
than one client transmission, and you'll have to split it up
appropriately.

That's why if you will be transmitting multiple sets of data over a
single connection, you'll want some structure (unique boundary codes,
encoded length information, parseable data like XML, etc...) in the wire
protocol so your server knows when it is done.

> 1) Am I doing something wrong here?

Not so much wrong, as perhaps a little misguided in terms of trying to
have a stream protocol work less as a stream than it does.

I suspect you may also be over-estimating a little the complexity of
handling this aspect of TCP in your own code.

> 2) Can I force twisted to send ALL the bytes I issue in the write
> without re-thinking TCP or forcing me to re-implement TCP?

Again, distinguish between "send ALL the bytes" which *does* in fact
happen, versus "receive bytes in identically sized chunks" which will
not happen.  Though I seriously doubt that your demands are such that
it requires "re-thinking" or "re-implement[ing]" TCP.

Much easier to stick with the TCP base (loads of benefits), and just
encode enough structure into your stream to permit the server to
identify the boundaries of the requests.  Then, code the server to
look for such boundaries while accepting data in any size chunks, and
you're done.  It's pretty much what every other TCP protocol that has
structure to its data does, whether that's length counted, flag bytes,
specific textual content (such as the final empty line in an HTTP
request), etc...

As has been posted in another response, you may find some of the
existing protocols in twisted.protocol.basic to be helpful for this.
The older posting of mine that you referenced used a subclass of
LineReceiver to encode the length in ASCII as part of an initial
header, for example, though it closed the connection when done.  And,
for example, Netstring or the Int##String classes takes care of the
counting on your behalf, and even give subclasses a nice single entry
point (stringReceived) to use instead of dataReceived, so your server
need not think about the aggregation or splitting of chunks.

If nothing else, reading the source to one of those receiver classes
might help provide a concrete example of the aggregation (or
splitting) of the stream data that I mention above.

-- David




From exarkun at twistedmatrix.com  Sat Feb 13 22:05:14 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 14 Feb 2010 05:05:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1266123914.82.1775326560@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100214/ed95f7fb/attachment.html>

From burslem2001 at yahoo.com  Sun Feb 14 06:42:20 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Sun, 14 Feb 2010 05:42:20 -0800 (PST)
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <201002140107.31749.maarten@treewalker.org>
Message-ID: <585.17458.qm@web112516.mail.gq1.yahoo.com>

There are probably several way to accomplish this I just needed to think about it a wee bit longer. One way would be to prepend an identifier to the file,strip the header from the raw data on reception and then save the image. I dont think its complicated. I may need a seperate server to handle the files though.

Thanks,
Garyc

--- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org> wrote:

> From: Maarten ter Huurne <maarten at treewalker.org>
> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Saturday, February 13, 2010, 6:07 PM
> On Sunday 14 February 2010, Alexandre
> Quessy wrote:
> 
> > This said, sending them using a programmer's solution
> - not a sysadmin
> > solution - would be closer to my own skills, so I am
> interested in
> > knowing if this could be suitable. I think, though,
> that it would be
> > faster to use a transfert protocol that would be
> implemented in C, not
> > Python. Am I wrong?
> 
> I would suggest to implement it in Python first and then
> benchmark it. Maybe 
> the simplest implementation is already fast enough. Maybe
> the bottleneck is 
> the network or the disk you're writing to; in that case you
> would be better 
> off upgrading your switches or buying an SSD instead of
> writing C code.
> 
> Bye,
>         Maarten
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From alexandre at quessy.net  Sun Feb 14 10:10:59 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sun, 14 Feb 2010 12:10:59 -0500
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <585.17458.qm@web112516.mail.gq1.yahoo.com>
References: <585.17458.qm@web112516.mail.gq1.yahoo.com>
Message-ID: <4B782EA3.8010906@quessy.net>

Hello again everyone,
Maybe using two senders/receivers would help. The control protocol,
which can use XML or JSON, or whatever, would identify the files by
their md5 sum? The file transfert protocol would detect the header of
each file to separate them.

a

gary clark wrote:
> There are probably several way to accomplish this I just needed to think about it a wee bit longer. One way would be to prepend an identifier to the file,strip the header from the raw data on reception and then save the image. I dont think its complicated. I may need a seperate server to handle the files though.
> 
> Thanks,
> Garyc
> 
> --- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org> wrote:
> 
>> From: Maarten ter Huurne <maarten at treewalker.org>
>> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
>> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> Date: Saturday, February 13, 2010, 6:07 PM
>> On Sunday 14 February 2010, Alexandre
>> Quessy wrote:
>>
>>> This said, sending them using a programmer's solution
>> - not a sysadmin
>>> solution - would be closer to my own skills, so I am
>> interested in
>>> knowing if this could be suitable. I think, though,
>> that it would be
>>> faster to use a transfert protocol that would be
>> implemented in C, not
>>> Python. Am I wrong?
>> I would suggest to implement it in Python first and then
>> benchmark it. Maybe 
>> the simplest implementation is already fast enough. Maybe
>> the bottleneck is 
>> the network or the disk you're writing to; in that case you
>> would be better 
>> off upgrading your switches or buying an SSD instead of
>> writing C code.
>>
>> Bye,
>>         Maarten
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From burslem2001 at yahoo.com  Sun Feb 14 11:18:53 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Sun, 14 Feb 2010 10:18:53 -0800 (PST)
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <4B782EA3.8010906@quessy.net>
Message-ID: <438497.3245.qm@web112503.mail.gq1.yahoo.com>


hey Alexandra,

The only reason why I suggested another server would be to distribute the
load on the system. Essentially the files that are intended to be sent over will consume alot of processing since .jpeg etc are humongous.
Yes two connections would be required. Well you could use the MD5 sum, I will not, essentially your after a unique identifier that represents the file your sending. What I intend to do is simply embed the filename and unique identifier as a header. Hence I do not not need to recompute the MD5 at the receiving end, which to be honest seems overkill. 

Anyway good luck. KISS for software is the best approach.

Thanks,
Garyc


--- On Sun, 2/14/10, Alexandre Quessy <alexandre at quessy.net> wrote:

> From: Alexandre Quessy <alexandre at quessy.net>
> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Sunday, February 14, 2010, 11:10 AM
> Hello again everyone,
> Maybe using two senders/receivers would help. The control
> protocol,
> which can use XML or JSON, or whatever, would identify the
> files by
> their md5 sum? The file transfert protocol would detect the
> header of
> each file to separate them.
> 
> a
> 
> gary clark wrote:
> > There are probably several way to accomplish this I
> just needed to think about it a wee bit longer. One way
> would be to prepend an identifier to the file,strip the
> header from the raw data on reception and then save the
> image. I dont think its complicated. I may need a seperate
> server to handle the files though.
> > 
> > Thanks,
> > Garyc
> > 
> > --- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org>
> wrote:
> > 
> >> From: Maarten ter Huurne <maarten at treewalker.org>
> >> Subject: Re: [Twisted-Python] Sending jpeg data
> over TCP/IP
> >> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> >> Date: Saturday, February 13, 2010, 6:07 PM
> >> On Sunday 14 February 2010, Alexandre
> >> Quessy wrote:
> >>
> >>> This said, sending them using a programmer's
> solution
> >> - not a sysadmin
> >>> solution - would be closer to my own skills,
> so I am
> >> interested in
> >>> knowing if this could be suitable. I think,
> though,
> >> that it would be
> >>> faster to use a transfert protocol that would
> be
> >> implemented in C, not
> >>> Python. Am I wrong?
> >> I would suggest to implement it in Python first
> and then
> >> benchmark it. Maybe 
> >> the simplest implementation is already fast
> enough. Maybe
> >> the bottleneck is 
> >> the network or the disk you're writing to; in that
> case you
> >> would be better 
> >> off upgrading your switches or buying an SSD
> instead of
> >> writing C code.
> >>
> >> Bye,
> >>         Maarten
> >>
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >>
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From alexandre at quessy.net  Sun Feb 14 11:22:03 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sun, 14 Feb 2010 13:22:03 -0500
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <4B782EA3.8010906@quessy.net>
References: <585.17458.qm@web112516.mail.gq1.yahoo.com>
	<4B782EA3.8010906@quessy.net>
Message-ID: <72236ba91002141022o473ee1a4t6a14e15393cf3cfd@mail.gmail.com>

Hello again,
I've just read the HTTP PUT proposal email. I think it's a great idea.
Avoid reinventing the wheel, whenever possible !
Alternatively, sending only the file name could work if the client
then GET the file from an HTTP server that serves static files.

Using Nevow:
from nevow import static
...
self.child_files = static.File(self.static_files_path)

(see my media RSS server in
http://bitbucket.org/aalex/toonfeed/src/tip/toonfeed/web.py ... which
is not in a working state right now)

How can I server static files like this, not using nevow?

a


2010/2/14 Alexandre Quessy <alexandre at quessy.net>:
> Hello again everyone,
> Maybe using two senders/receivers would help. The control protocol,
> which can use XML or JSON, or whatever, would identify the files by
> their md5 sum? The file transfert protocol would detect the header of
> each file to separate them.
>
> a
>
> gary clark wrote:
>> There are probably several way to accomplish this I just needed to think about it a wee bit longer. One way would be to prepend an identifier to the file,strip the header from the raw data on reception and then save the image. I dont think its complicated. I may need a seperate server to handle the files though.
>>
>> Thanks,
>> Garyc
>>
>> --- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org> wrote:
>>
>>> From: Maarten ter Huurne <maarten at treewalker.org>
>>> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
>>> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>>> Date: Saturday, February 13, 2010, 6:07 PM
>>> On Sunday 14 February 2010, Alexandre
>>> Quessy wrote:
>>>
>>>> This said, sending them using a programmer's solution
>>> - not a sysadmin
>>>> solution - would be closer to my own skills, so I am
>>> interested in
>>>> knowing if this could be suitable. I think, though,
>>> that it would be
>>>> faster to use a transfert protocol that would be
>>> implemented in C, not
>>>> Python. Am I wrong?
>>> I would suggest to implement it in Python first and then
>>> benchmark it. Maybe
>>> the simplest implementation is already fast enough. Maybe
>>> the bottleneck is
>>> the network or the disk you're writing to; in that case you
>>> would be better
>>> off upgrading your switches or buying an SSD instead of
>>> writing C code.
>>>
>>> Bye,
>>>         Maarten
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/



From giskard at autistici.org  Sun Feb 14 14:36:27 2010
From: giskard at autistici.org (giskard)
Date: Sun, 14 Feb 2010 22:36:27 +0100
Subject: [Twisted-Python] reactor.run hangs
Message-ID: <FFCCC0BD-5DE4-419B-A74A-0013C0D99822@autistici.org>

Hi all,

i think i'm not doing things in the right way:

http://paste.debian.net/59855/

this code implement a simple jabber client, if you remove the class defnition 
and run it (removing also the run def) it works!

but if i 'class' it and run via:
http://paste.debian.net/59856/

reactor.run() hangs.

where i'm wrong?

thank you in advance,
--
ciao,
giskard






From darren at ontrenet.com  Sun Feb 14 14:45:19 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sun, 14 Feb 2010 16:45:19 -0500
Subject: [Twisted-Python] reactor.run hangs
In-Reply-To: <FFCCC0BD-5DE4-419B-A74A-0013C0D99822@autistici.org>
References: <FFCCC0BD-5DE4-419B-A74A-0013C0D99822@autistici.org>
Message-ID: <1266183919.2532.73.camel@kratos>

I believe reactor.run() never returns and always blocks the calling
thread until reactor.stop() is called, afterwhich you cannot call
reactor.run() again. Not sure if that helps you though.

On Sun, 2010-02-14 at 22:36 +0100, giskard wrote:

> Hi all,
> 
> i think i'm not doing things in the right way:
> 
> http://paste.debian.net/59855/
> 
> this code implement a simple jabber client, if you remove the class defnition 
> and run it (removing also the run def) it works!
> 
> but if i 'class' it and run via:
> http://paste.debian.net/59856/
> 
> reactor.run() hangs.
> 
> where i'm wrong?
> 
> thank you in advance,
> --
> ciao,
> giskard
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100214/bfc1a8fa/attachment.html>

From alexandre at quessy.net  Sun Feb 14 22:30:36 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Mon, 15 Feb 2010 00:30:36 -0500
Subject: [Twisted-Python] reactor.run hangs
In-Reply-To: <1266183919.2532.73.camel@kratos>
References: <FFCCC0BD-5DE4-419B-A74A-0013C0D99822@autistici.org>
	<1266183919.2532.73.camel@kratos>
Message-ID: <72236ba91002142130m2527df4fn9c5a600f32ad087a@mail.gmail.com>

Hello giskard,
I suggest you leave the reactor.run() in the if __name__ == "__main__"
of your application. It's a blocking call, until you call
reactor.stop().
Thats make things a lot easier when you need to merge many
applications, classes, etc. together.

Next, to start your Jabber client, you should probably do it when
reactor is running. To do so, you can use a reactor.callLater.

if __name__ == "__main__":
  def _later():
    # do stuff
  reactor.callLater(0, _later)
  reactor.run()


2010/2/14 Darren Govoni <darren at ontrenet.com>:
> I believe reactor.run() never returns and always blocks the calling thread
> until reactor.stop() is called, afterwhich you cannot call reactor.run()
> again. Not sure if that helps you though.
>
> On Sun, 2010-02-14 at 22:36 +0100, giskard wrote:
>
> Hi all,
>
> i think i'm not doing things in the right way:
>
> http://paste.debian.net/59855/
>
> this code implement a simple jabber client, if you remove the class
> defnition
> and run it (removing also the run def) it works!
>
> but if i 'class' it and run via:
> http://paste.debian.net/59856/
>
> reactor.run() hangs.
>
> where i'm wrong?
>
> thank you in advance,
> --
> ciao,
> giskard
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/



From giskard at autistici.org  Mon Feb 15 02:37:08 2010
From: giskard at autistici.org (giskard)
Date: Mon, 15 Feb 2010 10:37:08 +0100
Subject: [Twisted-Python] reactor.run hangs
In-Reply-To: <72236ba91002142130m2527df4fn9c5a600f32ad087a@mail.gmail.com>
References: <FFCCC0BD-5DE4-419B-A74A-0013C0D99822@autistici.org>
	<1266183919.2532.73.camel@kratos>
	<72236ba91002142130m2527df4fn9c5a600f32ad087a@mail.gmail.com>
Message-ID: <1E61B4D5-3C19-4152-A635-721CE8DDF1A4@autistici.org>

Hi all,

i've moved reactor.run() out of the class and put in the main()

in the class i've:

  def addReactor(self):
    print 'dentro al run'
    factory = client.basicClientFactory(self.jid, self.option['jabber']['password'])
    print "factory initialized"
    factory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT, self.authd)
    print 'factory bootsraped'
    reactor.connectTCP(self.option['jabber']['server'], 5222, factory)

and in the main():

    jabber = MyJabber(options, to_irc)
    jabber.addReactor()
    reactor.run()

the ouput of the app,

edvige:jabber giskard$ python jabber2irc.py  config.yaml 
dentro al run
factory initialized
factory bootsraped

with tcpdum i see connection to jabber.org, but nothing else.
the presence is not set and so on..


Il giorno 15/feb/2010, alle ore 06.30, Alexandre Quessy ha scritto:

> Hello giskard,
> I suggest you leave the reactor.run() in the if __name__ == "__main__"
> of your application. It's a blocking call, until you call
> reactor.stop().
> Thats make things a lot easier when you need to merge many
> applications, classes, etc. together.
> 
> Next, to start your Jabber client, you should probably do it when
> reactor is running. To do so, you can use a reactor.callLater.
> 
> if __name__ == "__main__":
>  def _later():
>    # do stuff
>  reactor.callLater(0, _later)
>  reactor.run()
> 
> 
> 2010/2/14 Darren Govoni <darren at ontrenet.com>:
>> I believe reactor.run() never returns and always blocks the calling thread
>> until reactor.stop() is called, afterwhich you cannot call reactor.run()
>> again. Not sure if that helps you though.
>> 
>> On Sun, 2010-02-14 at 22:36 +0100, giskard wrote:
>> 
>> Hi all,
>> 
>> i think i'm not doing things in the right way:
>> 
>> http://paste.debian.net/59855/
>> 
>> this code implement a simple jabber client, if you remove the class
>> defnition
>> and run it (removing also the run def) it works!
>> 
>> but if i 'class' it and run via:
>> http://paste.debian.net/59856/
>> 
>> reactor.run() hangs.
>> 
>> where i'm wrong?
>> 
>> thank you in advance,
>> --
>> ciao,
>> giskard
>> 
>> 
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
> 
> 
> 
> -- 
> Alexandre Quessy
> http://alexandre.quessy.net/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

--
ciao,
giskard






From raq at cttc.upc.edu  Mon Feb 15 02:54:55 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Mon, 15 Feb 2010 10:54:55 +0100
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
Message-ID: <1266227696.12763.200.camel@mundo>

Jean-Paul,

Thanks for your answers. Answers bellow. Also attachments of
client/server application tests.

On Fri, 2010-02-12 at 20:06 +0000, exarkun at twistedmatrix.com wrote:
> On 06:03 pm, raq at cttc.upc.edu wrote:
> >Hello everybody,
> >
> >I am trying to build a a client/server application using Perspective
> >Broker and wanting to authenticate against a PostgreSQL database.
> >Everything works fine if I user plain text passwords, but when trying 
> >to
> >hash then using md5 using
> 
> What do you mean when you say you're using plain text passwords? 
> Authentication involves multiple parties handling the password in 
> multiple ways, and the "plain text"-ness of the password changes from 
> step to step.

I mean that the the server authenticates the client using a NOT HASHED
password. In my case using a VARCHAR field in a PostgreSQL table

> >from hashlib import md5
> >md5Password = md5(password).hexdigest()
> >
> >then it does not authenticate (I use
> >credentials.checkMD5Password(password) at the checker class)
> >
> >Then after reading
> >
> >twisted/spread/pb.py
> >
> >I saw that everything is done in the functions:
> >
> >respond(challenge, password)
> >challenge()
> >
> >and the methods
> >
> >checkMD5Password(self, md5Password)
> >checkPassword(self, password)
> >
> >at the
> >
> >class _PortalAuthChallenger(Referenceable, _JellyableAvatarMixin)
> >
> >By changing digest() with hexdigest(), it works.
> >
> >The question is:
> >
> >I there some way to make it work without making changes at the 'pb.py'
> >module?
> >
> >Yes. I should use md5Password = md5(password).digest() to produce the
> >password, but then I cant authenticate with a 'pure-ftpd' daemon I need
> >to work with.
> >
> >Any alternatives?
> 
> You should register an IUsernameHashedPassword checker with the portal 
> you pass to PBServerFactory and use PBClientFactory.login.  See 
> pbbenchserver.py and pbbenchclient.py for examples of this.  Despite the 

Yes I did so. You can see the attached examples I am testing with

> fact that you're passing a UsernamePassword instance to 
> PBClientFactory.login, the plain text password is never sent over the 
> network.

Yes I Know. You do that at the 'respond(challenge, password)' in
'pb.py', do you?

> 
> Also, IUsernameMD5Password is about to be deprecated, along with the 
> checkMD5Password method of _PortalAuthChallenger.

So, how should I do it in order not to be using deprecated code? I would
like to know some details so that I can have a better understanding of
how authentication is working.


Jean-Paul:

To sum up. I would like to use md5 hashed password, so as the password
can not be read at the server, but as it is at a database table it is
not as terrible as if I where using a simple text file. Furthermore I am
having problems to use a python ftp client with ssl to connect to
'pure-ftpd' with TLS, and in this case, I am really sending password
clear-text over the wire even if using hashed passwords at the server.

Thanks again for your interest

Regards

> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-- 
Ramiro Alba

Centre Tecnològic de Tranferència de Calor
http://www.cttc.upc.edu


Escola Tècnica Superior d'Enginyeries
Industrial i Aeronàutica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46

-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que està net.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: client-test.py
Type: text/x-python
Size: 705 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20100215/495633e9/attachment-0004.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: rqueuesrv.py
Type: text/x-python
Size: 4217 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20100215/495633e9/attachment-0005.py>

From exarkun at twistedmatrix.com  Mon Feb 15 06:25:04 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 15 Feb 2010 13:25:04 -0000
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <1266227696.12763.200.camel@mundo>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
Message-ID: <20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>

On 09:54 am, raq at cttc.upc.edu wrote:
>Jean-Paul,
>
>Thanks for your answers. Answers bellow. Also attachments of
>client/server application tests.
>
>On Fri, 2010-02-12 at 20:06 +0000, exarkun at twistedmatrix.com wrote:
>>On 06:03 pm, raq at cttc.upc.edu wrote:
>> >Hello everybody,
>> >
>> >I am trying to build a a client/server application using Perspective
>> >Broker and wanting to authenticate against a PostgreSQL database.
>> >Everything works fine if I user plain text passwords, but when trying
>> >to
>> >hash then using md5 using
>>
>>What do you mean when you say you're using plain text passwords?
>>Authentication involves multiple parties handling the password in
>>multiple ways, and the "plain text"-ness of the password changes from
>>step to step.
>
>I mean that the the server authenticates the client using a NOT HASHED
>password. In my case using a VARCHAR field in a PostgreSQL table
>> >from hashlib import md5
>> >md5Password = md5(password).hexdigest()
>> >

I'm confused here.  I don't see this code in your checker implementation 
in the attached code.  Is this code running someplace else?
>> >then it does not authenticate (I use
>> >credentials.checkMD5Password(password) at the checker class)
>> >
>> >Then after reading
>> >
>> >twisted/spread/pb.py
>> >
>> >I saw that everything is done in the functions:
>> >
>> >respond(challenge, password)
>> >challenge()
>> >
>> >and the methods
>> >
>> >checkMD5Password(self, md5Password)
>> >checkPassword(self, password)
>> >
>> >at the
>> >
>> >class _PortalAuthChallenger(Referenceable, _JellyableAvatarMixin)
>> >
>> >By changing digest() with hexdigest(), it works.

Indeed.  `checkMD5Password` needs to be passed the MD5 digest of the 
password, not the hex encoded MD5 digest (despite being documented as 
taking the plaintext password itself).
>> >
>> >The question is:
>> >
>> >I there some way to make it work without making changes at the 
>>'pb.py'
>> >module?
>> >
>> >Yes. I should use md5Password = md5(password).digest() to produce the
>> >password, but then I cant authenticate with a 'pure-ftpd' daemon I 
>>need
>> >to work with.

This seems to be the crux of the matter.  I'm not sure how the PB auth 
code and the FTP auth code interact, though.  Perhaps your FTP code can 
just do its own password hashing?
>> >Any alternatives?
>>
>>You should register an IUsernameHashedPassword checker with the portal
>>you pass to PBServerFactory and use PBClientFactory.login.  See
>>pbbenchserver.py and pbbenchclient.py for examples of this.  Despite 
>>the
>
>Yes I did so. You can see the attached examples I am testing with
>>fact that you're passing a UsernamePassword instance to
>>PBClientFactory.login, the plain text password is never sent over the
>>network.
>
>Yes I Know. You do that at the 'respond(challenge, password)' in
>'pb.py', do you?
>>
>>Also, IUsernameMD5Password is about to be deprecated, along with the
>>checkMD5Password method of _PortalAuthChallenger.
>
>So, how should I do it in order not to be using deprecated code? I 
>would
>like to know some details so that I can have a better understanding of
>how authentication is working.

If you have the plaintext password in the PB server, then you can just 
call `checkPassword` instead of `checkMD5Password` in 
DBCredentialsChecker._cbAuthenticate.

Jean-Paul



From raq at cttc.upc.edu  Mon Feb 15 09:32:10 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Mon, 15 Feb 2010 17:32:10 +0100
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
Message-ID: <1266251530.12763.221.camel@mundo>

Jean-Paul:

On Mon, 2010-02-15 at 13:25 +0000, exarkun at twistedmatrix.com wrote:
> >>What do you mean when you say you're using plain text passwords?
> >>Authentication involves multiple parties handling the password in
> >>multiple ways, and the "plain text"-ness of the password changes from
> >>step to step.
> >
> >I mean that the the server authenticates the client using a NOT HASHED
> >password. In my case using a VARCHAR field in a PostgreSQL table
> >> >from hashlib import md5
> >> >md5Password = md5(password).hexdigest()
> >> >
> 
> I'm confused here.  I don't see this code in your checker implementation 
> in the attached code.  Is this code running someplace else?

No, of course you can not. This is only a little python script I use to
produce I hashed password that I can put in the VARCHAR field of my
PostgreSQL table. This way I can make 'pure-ftpd' authenticate using md5
hashed passwords, but for that reason I have to change pb.py code at
twisted, swaping '.digest()' with '.hexdigest()'.
That way it works but at the price of having to change original twisted
code, which is not the option I want to support.

> >> >then it does not authenticate (I use
> >> >credentials.checkMD5Password(password) at the checker class)
> >> >
> >> >Then after reading
> >> >
> >> >twisted/spread/pb.py
> >> >
> >> >I saw that everything is done in the functions:
> >> >
> >> >respond(challenge, password)
> >> >challenge()
> >> >
> >> >and the methods
> >> >
> >> >checkMD5Password(self, md5Password)
> >> >checkPassword(self, password)
> >> >
> >> >at the
> >> >
> >> >class _PortalAuthChallenger(Referenceable, _JellyableAvatarMixin)
> >> >
> >> >By changing digest() with hexdigest(), it works.
> 
> Indeed.  `checkMD5Password` needs to be passed the MD5 digest of the 
> password, not the hex encoded MD5 digest (despite being documented as 
> taking the plaintext password itself).

Yes I can understand that. So if I could put ha md5 hashed password in
the database but using digest() instead of hexdigest() I could make the
server authenticate but using 'checkMD5Password()' method directly a the
checker, but as you have said this is going to be deprecated.

> >
> >Yes I Know. You do that at the 'respond(challenge, password)' in
> >'pb.py', do you?
> >>
> >>Also, IUsernameMD5Password is about to be deprecated, along with the
> >>checkMD5Password method of _PortalAuthChallenger.
> >
> >So, how should I do it in order not to be using deprecated code? I 
> >would
> >like to know some details so that I can have a better understanding of
> >how authentication is working.
> 
> If you have the plaintext password in the PB server, then you can just 
> call `checkPassword` instead of `checkMD5Password` in 
> DBCredentialsChecker._cbAuthenticate.

Yes. This is working with plaintext password in the PB server, but not
with md5 hashed passwords, right?

Regards

-- 
Ramiro Alba

Centre Tecnològic de Tranferència de Calor
http://www.cttc.upc.edu


Escola Tècnica Superior d'Enginyeries
Industrial i Aeronàutica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que està net.




From exarkun at twistedmatrix.com  Mon Feb 15 09:45:11 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 15 Feb 2010 16:45:11 -0000
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <1266251530.12763.221.camel@mundo>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
Message-ID: <20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>

On 04:32 pm, raq at cttc.upc.edu wrote:
>Jean-Paul:
>
>On Mon, 2010-02-15 at 13:25 +0000, exarkun at twistedmatrix.com wrote:
>> >>What do you mean when you say you're using plain text passwords?
>> >>Authentication involves multiple parties handling the password in
>> >>multiple ways, and the "plain text"-ness of the password changes 
>>from
>> >>step to step.
>> >
>> >I mean that the the server authenticates the client using a NOT 
>>HASHED
>> >password. In my case using a VARCHAR field in a PostgreSQL table
>> >> >from hashlib import md5
>> >> >md5Password = md5(password).hexdigest()
>> >> >
>>
>>I'm confused here.  I don't see this code in your checker 
>>implementation
>>in the attached code.  Is this code running someplace else?
>
>No, of course you can not. This is only a little python script I use to
>produce I hashed password that I can put in the VARCHAR field of my
>PostgreSQL table. This way I can make 'pure-ftpd' authenticate using 
>md5
>hashed passwords, but for that reason I have to change pb.py code at
>twisted, swaping '.digest()' with '.hexdigest()'.
>That way it works but at the price of having to change original twisted
>code, which is not the option I want to support.

Ah, I see.  I didn't understand that you had MD5 hashed passwords stored 
in your database.

Fortunately, the .digest() and .hexdigest() outputs of an MD5 object are 
related in a simple way.  You can go from one to the other using 
str.encode('hex') or str.decode('hex').

So, if you have hex encoded MD5 digests in your database table, then you 
can convert them to the regular MD5 digests expected by PB with 
hex_digest_password.decode('hex') and pass the result of that to 
`checkMD5Password`.
>>
>>Indeed.  `checkMD5Password` needs to be passed the MD5 digest of the
>>password, not the hex encoded MD5 digest (despite being documented as
>>taking the plaintext password itself).
>
>Yes I can understand that. So if I could put ha md5 hashed password in
>the database but using digest() instead of hexdigest() I could make the
>server authenticate but using 'checkMD5Password()' method directly a 
>the
>checker, but as you have said this is going to be deprecated.

This discussion has led me to realize that checkMD5Password probably 
shouldn't be deprecated.  Instead the documentation should be fixed so 
that it's clear why it's useful.

So, assuming we don't deprecate it, and you use the decode('hex') 
approach above, does that let you do your authentication for both apps 
and let you avoid keeping a modified version of Twisted?
>> >So, how should I do it in order not to be using deprecated code? I
>> >would
>> >like to know some details so that I can have a better understanding 
>>of
>> >how authentication is working.
>>
>>If you have the plaintext password in the PB server, then you can just
>>call `checkPassword` instead of `checkMD5Password` in
>>DBCredentialsChecker._cbAuthenticate.
>
>Yes. This is working with plaintext password in the PB server, but not
>with md5 hashed passwords, right?

Right, which doesn't make sense for you, but I suggested this thinking 
that your database had plaintext passwords in it.

Jean-Paul



From einar.twisted at norsk-esport.no  Mon Feb 15 10:54:57 2010
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?Einar_S=2E_Ids=F8?=)
Date: Mon, 15 Feb 2010 18:54:57 +0100
Subject: [Twisted-Python] Need help for structured application development
Message-ID: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>

Hi,

I am planning to develop an application that will query a number of
services at given intervals, and Twisted seems like a very nice
platform to do so. However, because of little previous experience with
Twisted, especially with building proper applications, using
interfaces and using plugins, I could really need some pointers to get
me started.

In the following I will try to explain in broad terms what the
application will do, and humbly ask for input on how I may structure
it using factories, protocols etc.:

1. A number of more-or-less similar server applications (5-10) have a
number of concurrent instances/servers (1-30) each.
2. I need to acquire the status of each instance at given intervals.
These will typically range from every 20 seconds to every 3 minutes,
and depend on the which service the instance is based on.
3. A list of the server instances shall be acquired via an XML-query
every few minutes to pick up on new or removed instances.
4. An executable already exists which can be used to status-poll
almost all services using different parameters. I will be calling it
from my application to do the polling instead of recreating it in
Python.
5. I need to be able to create my own polling-protocol for at least
one of the service types which is incompatible with the executable.
6. Some services can not only be polled at intervals, but additionally
stream information that I am interested in listening to.
7. At a later point in time, I wish to be able to communicate with
IRC, MSN and other services/protocols using the queried and streamed
data.

My initial general thought is the following:
1. Design a class for each server application, where all classes
implement the same interface. The class defines how to deal with
server instances of its corresponding server application type. Classes
are created as Twisted-plugins.
2. For each new server instance that is discovered, create an object
which contains a timer and polls the server at specific intervals,
writing the result to a globally accessible data structure.
3. For server instances that stream data continuously in addition to
being polled at regular intervals, create a separate object which
listens to the server.

I believe I should somehow have a global data structure which contains
references to all the server instance objects, regardless of type, and
allows them to store data. This is sort of like the factory does for
protocols, except in my case I don't think I can use a regular factory
since I need both clients (to poll at intervals) and servers (to
listen to streaming data). I suppose I could use a ClientFactory for
the pollers and a Factory for the stream-listeners, and let them have
a common data-store? But is it possible to use a single ClientFactory
to spawn all poller-objects regardless of server type? Or do I need
one ClientFactory for each server type? Do I perhaps need one
ClientFactory per server instance? Or should I just ignore factories
all together since it is primarily the timer and asyncronicity of
Twisted I need?

I am quite certain there is a correct twistified way of handling this
sort of problem. I am just not sure what it is, and would sincerely
welcome all feedback on how this should be done. Feel free to point to
examples of applications that are similar to what I sketched above,
and tell me to study the code :)

Cheers,
Einar



From raq at cttc.upc.edu  Mon Feb 15 11:35:57 2010
From: raq at cttc.upc.edu (Ramiro Alba Queipo)
Date: Mon, 15 Feb 2010 19:35:57 +0100
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
Message-ID: <1266258957.12763.228.camel@mundo>

Jean-Paul,

On Mon, 2010-02-15 at 16:45 +0000, exarkun at twistedmatrix.com wrote:
> >checker, but as you have said this is going to be deprecated.
> 
> This discussion has led me to realize that checkMD5Password probably 
> shouldn't be deprecated.  Instead the documentation should be fixed so 
> that it's clear why it's useful.
> 
> So, assuming we don't deprecate it, and you use the decode('hex') 
> approach above, does that let you do your authentication for both apps 
> and let you avoid keeping a modified version of Twisted?

YES. BOTH are are working now on an unmodified twisted. Wonderful.
Jean-Paul, really grateful to you.
Now please, let me know if you are not finally deprecating
'checkMD5Password' method, or if so if I have an option to keep using
MD5 hashed passwords at the server.

Thanks again.

Regards


-- 
Ramiro Alba

Centre Tecnològic de Tranferència de Calor
http://www.cttc.upc.edu


Escola Tècnica Superior d'Enginyeries
Industrial i Aeronàutica de Terrassa
Colom 11, E-08222, Terrassa, Barcelona, Spain
Tel: (+34) 93 739 86 46


-- 
Aquest missatge ha estat analitzat per MailScanner
a la cerca de virus i d'altres continguts perillosos,
i es considera que està net.




From exarkun at twistedmatrix.com  Mon Feb 15 12:37:11 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 15 Feb 2010 19:37:11 -0000
Subject: [Twisted-Python] Authenticating with md5 hashed passwords
In-Reply-To: <1266258957.12763.228.camel@mundo>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
	<1266258957.12763.228.camel@mundo>
Message-ID: <20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>

On 06:35 pm, raq at cttc.upc.edu wrote:
>Jean-Paul,
>
>On Mon, 2010-02-15 at 16:45 +0000, exarkun at twistedmatrix.com wrote:
>> >checker, but as you have said this is going to be deprecated.
>>
>>This discussion has led me to realize that checkMD5Password probably
>>shouldn't be deprecated.  Instead the documentation should be fixed so
>>that it's clear why it's useful.
>>
>>So, assuming we don't deprecate it, and you use the decode('hex')
>>approach above, does that let you do your authentication for both apps
>>and let you avoid keeping a modified version of Twisted?
>
>YES. BOTH are are working now on an unmodified twisted. Wonderful.
>Jean-Paul, really grateful to you.
>Now please, let me know if you are not finally deprecating
>'checkMD5Password' method, or if so if I have an option to keep using
>MD5 hashed passwords at the server.

You can follow this on http://twistedmatrix.com/trac/ticket/3056

Jean-Paul



From wthie at thiengineering.ch  Mon Feb 15 17:47:31 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Mon, 15 Feb 2010 14:47:31 -1000
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>
References: <1265997780.12763.175.camel@mundo>	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>	<1266227696.12763.200.camel@mundo>	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>	<1266251530.12763.221.camel@mundo>	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>	<1266258957.12763.228.camel@mundo>
	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>
Message-ID: <4B79EB23.5020101@thiengineering.ch>

Hi

Although I'mm using twisted/nevow now for more than three years it was 
only recently that I felt the need to look into the words section of 
twisted. After googling 'python xmpp server' I found two projects aiming 
at writing an xmpp server in python, namely pjabberd (non twisted) and 
pretzel.

Checking out their code via SVN shows an empty pretzel project and after 
some digging I was able to locate some code snippets, but not in an 
usable state. pjabberd checks out ok, also seems to run and is able and 
ready to accept handlers. I also found a very old post dating back to 
2005 where an effort to write a twisted XMPP server was mentioned.

http://twistedmatrix.com/pipermail/twisted-python/2005-July/011009.html

Being new in the XMPP world I ask myself and now the group, how would 
you tackle the problem of a twisted based XMPP server. Is there really 
only the Java breed of servers like OpenFire, Tigase or Erlang/Lua based 
stuff like ejabberd/Prosody available or am I simply blind.

Thanks for enlightening me, Werner





From radix at twistedmatrix.com  Mon Feb 15 18:24:50 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 15 Feb 2010 19:24:50 -0600
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <4B79EB23.5020101@thiengineering.ch>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
	<1266258957.12763.228.camel@mundo>
	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>
	<4B79EB23.5020101@thiengineering.ch>
Message-ID: <60ed19d41002151724m49086b41tfe73d8fd2b46fcb8@mail.gmail.com>

On Mon, Feb 15, 2010 at 6:47 PM, Werner Thie <wthie at thiengineering.ch> wrote:
> Hi
>
> Although I'mm using twisted/nevow now for more than three years it was
> only recently that I felt the need to look into the words section of
> twisted. After googling 'python xmpp server' I found two projects aiming
> at writing an xmpp server in python, namely pjabberd (non twisted) and
> pretzel.
>
> Checking out their code via SVN shows an empty pretzel project and after
> some digging I was able to locate some code snippets, but not in an
> usable state. pjabberd checks out ok, also seems to run and is able and
> ready to accept handlers. I also found a very old post dating back to
> 2005 where an effort to write a twisted XMPP server was mentioned.
>
> http://twistedmatrix.com/pipermail/twisted-python/2005-July/011009.html
>
> Being new in the XMPP world I ask myself and now the group, how would
> you tackle the problem of a twisted based XMPP server. Is there really
> only the Java breed of servers like OpenFire, Tigase or Erlang/Lua based
> stuff like ejabberd/Prosody available or am I simply blind.
>
> Thanks for enlightening me, Werner

As someone who has recently started heavily using Twisted-based XMPP
technologies, I honestly don't see a big reason to have an XMPP server
written using Twisted. I don't know what kind of use cases there are
for it, but I don't think it would solve any problems for me. It seems
it's possible to do anything interesting by just using regular old
XMPP clients or External Components (all written using Twisted-based
XMPP tech such as twisted.words, Wokkel, Idavoll, or what have you).
The XMPP server is pretty much interchangeable. And I wouldn't want to
create a project to compete with ejabberd without a very good reason
:-)

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From adelagon at gmail.com  Mon Feb 15 18:54:48 2010
From: adelagon at gmail.com (Alvin Delagon)
Date: Tue, 16 Feb 2010 09:54:48 +0800
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <60ed19d41002151724m49086b41tfe73d8fd2b46fcb8@mail.gmail.com>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
	<1266258957.12763.228.camel@mundo>
	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>
	<4B79EB23.5020101@thiengineering.ch>
	<60ed19d41002151724m49086b41tfe73d8fd2b46fcb8@mail.gmail.com>
Message-ID: <7a01f6c01002151754x493f6ab3x1ceb73b1f155b067@mail.gmail.com>

Hello,

I used to write XMPP servers and clients using twisted (currently in
production) using what's available in twisted.words.xish. The docs are
scarce but you can start off reading the code and the api doc here:
http://twistedmatrix.com/documents/8.2.0/api/twisted.words.xish.htmlspecially
the domish element.


Cheers,
Alvin

On Tue, Feb 16, 2010 at 9:24 AM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Mon, Feb 15, 2010 at 6:47 PM, Werner Thie <wthie at thiengineering.ch>
> wrote:
> > Hi
> >
> > Although I'mm using twisted/nevow now for more than three years it was
> > only recently that I felt the need to look into the words section of
> > twisted. After googling 'python xmpp server' I found two projects aiming
> > at writing an xmpp server in python, namely pjabberd (non twisted) and
> > pretzel.
> >
> > Checking out their code via SVN shows an empty pretzel project and after
> > some digging I was able to locate some code snippets, but not in an
> > usable state. pjabberd checks out ok, also seems to run and is able and
> > ready to accept handlers. I also found a very old post dating back to
> > 2005 where an effort to write a twisted XMPP server was mentioned.
> >
> > http://twistedmatrix.com/pipermail/twisted-python/2005-July/011009.html
> >
> > Being new in the XMPP world I ask myself and now the group, how would
> > you tackle the problem of a twisted based XMPP server. Is there really
> > only the Java breed of servers like OpenFire, Tigase or Erlang/Lua based
> > stuff like ejabberd/Prosody available or am I simply blind.
> >
> > Thanks for enlightening me, Werner
>
> As someone who has recently started heavily using Twisted-based XMPP
> technologies, I honestly don't see a big reason to have an XMPP server
> written using Twisted. I don't know what kind of use cases there are
> for it, but I don't think it would solve any problems for me. It seems
> it's possible to do anything interesting by just using regular old
> XMPP clients or External Components (all written using Twisted-based
> XMPP tech such as twisted.words, Wokkel, Idavoll, or what have you).
> The XMPP server is pretty much interchangeable. And I wouldn't want to
> create a project to compete with ejabberd without a very good reason
> :-)
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100216/5ae1c446/attachment.html>

From wthie at thiengineering.ch  Mon Feb 15 22:06:59 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Mon, 15 Feb 2010 19:06:59 -1000
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <7a01f6c01002151754x493f6ab3x1ceb73b1f155b067@mail.gmail.com>
References: <1265997780.12763.175.camel@mundo>	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>	<1266227696.12763.200.camel@mundo>	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>	<1266251530.12763.221.camel@mundo>	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>	<1266258957.12763.228.camel@mundo>	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>	<4B79EB23.5020101@thiengineering.ch>	<60ed19d41002151724m49086b41tfe73d8fd2b46fcb8@mail.gmail.com>
	<7a01f6c01002151754x493f6ab3x1ceb73b1f155b067@mail.gmail.com>
Message-ID: <4B7A27F3.2050806@thiengineering.ch>

Hmm, thanks for the advice, I was leaning to the lean side of a server 
something like pjabberd seems to have taken as an approach, so to say a 
skeleton where one can hang the meat, ending up with the functionality I 
need and no more. So with t.w.xish I seem to have the bones and no 
blueprint for the skeleton and on the other side I have full fledged 
Java monsters or or other implementations which do not always get the 
best grades in stability (see the discussion of the XMPP server 
Chesspark uses, they ran into memory problems such that periodic 
rebooting was the only solution). Politically I'm wary to introduce a 
heavy piece of software for some partial functionality written in a 
completely different language now when every body has grudgingly left 
the PHP train and had to be brought a board twisted.

So again thanks, if choosing a server is no problem and poses no 
problems, then which one would you chose?

Mahalo, Werner

Alvin Delagon wrote:
> Hello,
> 
> I used to write XMPP servers and clients using twisted (currently in
> production) using what's available in twisted.words.xish. The docs are
> scarce but you can start off reading the code and the api doc here:
> http://twistedmatrix.com/documents/8.2.0/api/twisted.words.xish.htmlspecially
> the domish element.
> 
> 
> Cheers,
> Alvin
> 
> On Tue, Feb 16, 2010 at 9:24 AM, Christopher Armstrong <
> radix at twistedmatrix.com> wrote:
> 
>> On Mon, Feb 15, 2010 at 6:47 PM, Werner Thie <wthie at thiengineering.ch>
>> wrote:
>>> Hi
>>>
>>> Although I'mm using twisted/nevow now for more than three years it was
>>> only recently that I felt the need to look into the words section of
>>> twisted. After googling 'python xmpp server' I found two projects aiming
>>> at writing an xmpp server in python, namely pjabberd (non twisted) and
>>> pretzel.
>>>
>>> Checking out their code via SVN shows an empty pretzel project and after
>>> some digging I was able to locate some code snippets, but not in an
>>> usable state. pjabberd checks out ok, also seems to run and is able and
>>> ready to accept handlers. I also found a very old post dating back to
>>> 2005 where an effort to write a twisted XMPP server was mentioned.
>>>
>>> http://twistedmatrix.com/pipermail/twisted-python/2005-July/011009.html
>>>
>>> Being new in the XMPP world I ask myself and now the group, how would
>>> you tackle the problem of a twisted based XMPP server. Is there really
>>> only the Java breed of servers like OpenFire, Tigase or Erlang/Lua based
>>> stuff like ejabberd/Prosody available or am I simply blind.
>>>
>>> Thanks for enlightening me, Werner
>> As someone who has recently started heavily using Twisted-based XMPP
>> technologies, I honestly don't see a big reason to have an XMPP server
>> written using Twisted. I don't know what kind of use cases there are
>> for it, but I don't think it would solve any problems for me. It seems
>> it's possible to do anything interesting by just using regular old
>> XMPP clients or External Components (all written using Twisted-based
>> XMPP tech such as twisted.words, Wokkel, Idavoll, or what have you).
>> The XMPP server is pretty much interchangeable. And I wouldn't want to
>> create a project to compete with ejabberd without a very good reason
>> :-)
>>
>> --
>> Christopher Armstrong
>> http://radix.twistedmatrix.com/
>> http://planet-if.com/
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> 
> 
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From p.mayers at imperial.ac.uk  Tue Feb 16 03:09:59 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 16 Feb 2010 10:09:59 +0000
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <4B7A27F3.2050806@thiengineering.ch>
References: <1265997780.12763.175.camel@mundo>	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>	<1266227696.12763.200.camel@mundo>	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>	<1266251530.12763.221.camel@mundo>	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>	<1266258957.12763.228.camel@mundo>	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>	<4B79EB23.5020101@thiengineering.ch>	<60ed19d41002151724m49086b41tfe73d8fd2b46fcb8@mail.gmail.com>	<7a01f6c01002151754x493f6ab3x1ceb73b1f155b067@mail.gmail.com>
	<4B7A27F3.2050806@thiengineering.ch>
Message-ID: <4B7A6EF7.7000903@imperial.ac.uk>

On 02/16/2010 05:06 AM, Werner Thie wrote:
> best grades in stability (see the discussion of the XMPP server
> Chesspark uses, they ran into memory problems such that periodic
> rebooting was the only solution). Politically I'm wary to introduce a

That was jabberd2 I think. They moved to ejabberd in 2008 IIRC.

> heavy piece of software for some partial functionality written in a
> completely different language now when every body has grudgingly left
> the PHP train and had to be brought a board twisted.
>
> So again thanks, if choosing a server is no problem and poses no
> problems, then which one would you chose?

ejabberd without a shadow of a doubt.



From alexandre at quessy.net  Tue Feb 16 03:57:02 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Tue, 16 Feb 2010 05:57:02 -0500
Subject: [Twisted-Python] Need help for structured application
	development
In-Reply-To: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
Message-ID: <72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>

Hello Einar,
This is a quite long email.
What I can tell you, is that querying many command line applications
with t.i.utils.getProcessOutput and gathering them in a DeferredList
worked for me. Example: the list_cameras in
http://svn.sat.qc.ca/trac/miville/browser/trunk/py/scenic/devices/cameras.py

Good luck !

a


2010/2/15 Einar S. Idsø <einar.twisted at norsk-esport.no>:
> Hi,
>
> I am planning to develop an application that will query a number of
> services at given intervals, and Twisted seems like a very nice
> platform to do so. However, because of little previous experience with
> Twisted, especially with building proper applications, using
> interfaces and using plugins, I could really need some pointers to get
> me started.
>
> In the following I will try to explain in broad terms what the
> application will do, and humbly ask for input on how I may structure
> it using factories, protocols etc.:
>
> 1. A number of more-or-less similar server applications (5-10) have a
> number of concurrent instances/servers (1-30) each.
> 2. I need to acquire the status of each instance at given intervals.
> These will typically range from every 20 seconds to every 3 minutes,
> and depend on the which service the instance is based on.
> 3. A list of the server instances shall be acquired via an XML-query
> every few minutes to pick up on new or removed instances.
> 4. An executable already exists which can be used to status-poll
> almost all services using different parameters. I will be calling it
> from my application to do the polling instead of recreating it in
> Python.
> 5. I need to be able to create my own polling-protocol for at least
> one of the service types which is incompatible with the executable.
> 6. Some services can not only be polled at intervals, but additionally
> stream information that I am interested in listening to.
> 7. At a later point in time, I wish to be able to communicate with
> IRC, MSN and other services/protocols using the queried and streamed
> data.
>
> My initial general thought is the following:
> 1. Design a class for each server application, where all classes
> implement the same interface. The class defines how to deal with
> server instances of its corresponding server application type. Classes
> are created as Twisted-plugins.
> 2. For each new server instance that is discovered, create an object
> which contains a timer and polls the server at specific intervals,
> writing the result to a globally accessible data structure.
> 3. For server instances that stream data continuously in addition to
> being polled at regular intervals, create a separate object which
> listens to the server.
>
> I believe I should somehow have a global data structure which contains
> references to all the server instance objects, regardless of type, and
> allows them to store data. This is sort of like the factory does for
> protocols, except in my case I don't think I can use a regular factory
> since I need both clients (to poll at intervals) and servers (to
> listen to streaming data). I suppose I could use a ClientFactory for
> the pollers and a Factory for the stream-listeners, and let them have
> a common data-store? But is it possible to use a single ClientFactory
> to spawn all poller-objects regardless of server type? Or do I need
> one ClientFactory for each server type? Do I perhaps need one
> ClientFactory per server instance? Or should I just ignore factories
> all together since it is primarily the timer and asyncronicity of
> Twisted I need?
>
> I am quite certain there is a correct twistified way of handling this
> sort of problem. I am just not sure what it is, and would sincerely
> welcome all feedback on how this should be done. Feel free to point to
> examples of applications that are similar to what I sketched above,
> and tell me to study the code :)
>
> Cheers,
> Einar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/



From burslem2001 at yahoo.com  Tue Feb 16 09:15:48 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Tue, 16 Feb 2010 08:15:48 -0800 (PST)
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <4B7A6EF7.7000903@imperial.ac.uk>
Message-ID: <106211.96862.qm@web112509.mail.gq1.yahoo.com>

Hello,

I'm tested my client server model. The server being a twisted server.
I am using the class NetstringReceiver. When I close down the client the appropriate call to close the connection is made "connectionLost". However when I just pull the client connection cable from the network. I would expect the call to be made to indicate a connection is lost at the twisted server. I dont see this. 

I am going through a local hub and not sure what at the moment to think of this. I am using ssl to communicate.

If somebody could shed some light on this that would be great.

Thanks,
Garyc






From adelagon at gmail.com  Tue Feb 16 09:31:16 2010
From: adelagon at gmail.com (Alvin Delagon)
Date: Wed, 17 Feb 2010 00:31:16 +0800
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <106211.96862.qm@web112509.mail.gq1.yahoo.com>
References: <4B7A6EF7.7000903@imperial.ac.uk>
	<106211.96862.qm@web112509.mail.gq1.yahoo.com>
Message-ID: <7a01f6c01002160831w1c77d834mf20440a755ebe68f@mail.gmail.com>

Hello Garyc,

This is not twisted's fault. Pulling a network plug doesn't tell the server
that the client went away immediately since the connection wasn't closed
properly. Pulling the plug produces TCP half-open scenario when one thinks
that the connection is still up. This can be remedied by
polling/hearbeat/keepalive logic. You can make your twisted server aware of
the keepalive timeouts by turning on setTcpKeepAlive to 1:

self.transport.setTcpKeepAlive(1)

Cheers,
Alvin


On Wed, Feb 17, 2010 at 12:15 AM, gary clark <burslem2001 at yahoo.com> wrote:

> Hello,
>
> I'm tested my client server model. The server being a twisted server.
> I am using the class NetstringReceiver. When I close down the client the
> appropriate call to close the connection is made "connectionLost". However
> when I just pull the client connection cable from the network. I would
> expect the call to be made to indicate a connection is lost at the twisted
> server. I dont see this.
>
> I am going through a local hub and not sure what at the moment to think of
> this. I am using ssl to communicate.
>
> If somebody could shed some light on this that would be great.
>
> Thanks,
> Garyc
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100217/4a93ba1d/attachment-0001.html>

From burslem2001 at yahoo.com  Tue Feb 16 09:52:34 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Tue, 16 Feb 2010 08:52:34 -0800 (PST)
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <7a01f6c01002160831w1c77d834mf20440a755ebe68f@mail.gmail.com>
Message-ID: <39737.12990.qm@web112519.mail.gq1.yahoo.com>

Much appreciated Alvin.

--- On Tue, 2/16/10, Alvin Delagon <adelagon at gmail.com> wrote:

> From: Alvin Delagon <adelagon at gmail.com>
> Subject: Re: [Twisted-Python] Pulling the ethernet cable out
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Tuesday, February 16, 2010, 10:31 AM
> Hello Garyc,
> This is not twisted's fault. Pulling a
> network plug doesn't tell the server that the client
> went away immediately since the connection wasn't closed
> properly. Pulling the plug produces TCP half-open scenario
> when one thinks that the connection is still up. This can be
> remedied by polling/hearbeat/keepalive logic. You can make
> your twisted server aware of the keepalive timeouts by
> turning on setTcpKeepAlive to 1:
> 
> self.transport.setTcpKeepAlive(1)
> Cheers,Alvin
> 
> On Wed, Feb 17, 2010 at 12:15 AM,
> gary clark <burslem2001 at yahoo.com>
> wrote:
> 
> Hello,
> 
> 
> 
> I'm tested my client server model. The server being a
> twisted server.
> 
> I am using the class NetstringReceiver. When I close down
> the client the appropriate call to close the connection is
> made "connectionLost". However when I just pull
> the client connection cable from the network. I would expect
> the call to be made to indicate a connection is lost at the
> twisted server. I dont see this.
> 
> 
> 
> 
> I am going through a local hub and not sure what at the
> moment to think of this. I am using ssl to communicate.
> 
> 
> 
> If somebody could shed some light on this that would be
> great.
> 
> 
> 
> Thanks,
> 
> Garyc
> 
> 
> 
> 
> 
> 
> 
> 
> 
> _______________________________________________
> 
> Twisted-Python mailing list
> 
> Twisted-Python at twistedmatrix.com
> 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> -- 
> http://www.alvinatorsplayground.blogspot.com/
> 
> 
> 
> -----Inline Attachment Follows-----
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From burslem2001 at yahoo.com  Tue Feb 16 10:06:34 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Tue, 16 Feb 2010 09:06:34 -0800 (PST)
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <106211.96862.qm@web112509.mail.gq1.yahoo.com>
Message-ID: <725070.67723.qm@web112512.mail.gq1.yahoo.com>

I have to poll at the twisted server "getTcpKeepAlive" for the state of the keep alive.


Thanks,
Garyc

--- On Tue, 2/16/10, gary clark <burslem2001 at yahoo.com> wrote:

> From: gary clark <burslem2001 at yahoo.com>
> Subject: [Twisted-Python] Pulling the ethernet cable out
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Tuesday, February 16, 2010, 10:15 AM
> Hello,
> 
> I'm tested my client server model. The server being a
> twisted server.
> I am using the class NetstringReceiver. When I close down
> the client the appropriate call to close the connection is
> made "connectionLost". However when I just pull the client
> connection cable from the network. I would expect the call
> to be made to indicate a connection is lost at the twisted
> server. I dont see this. 
> 
> I am going through a local hub and not sure what at the
> moment to think of this. I am using ssl to communicate.
> 
> If somebody could shed some light on this that would be
> great.
> 
> Thanks,
> Garyc
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From adelagon at gmail.com  Tue Feb 16 10:19:10 2010
From: adelagon at gmail.com (Alvin Delagon)
Date: Wed, 17 Feb 2010 01:19:10 +0800
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <725070.67723.qm@web112512.mail.gq1.yahoo.com>
References: <106211.96862.qm@web112509.mail.gq1.yahoo.com>
	<725070.67723.qm@web112512.mail.gq1.yahoo.com>
Message-ID: <7a01f6c01002160919t7d424c57sa609d22d8ef2b6a8@mail.gmail.com>

Hello,

No, getTcpKeepAlive will only tell you if SO_KEEPALIVE is enabled. It's
setTcpKeepAlive you want. If it's enabled, once the keepalive times out on a
half-open scenario, the connectionLost method will be triggered. You can
read the API docs here:

http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connection.html#getTcpKeepAlive
http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connection.html#setTcpKeepAlive

Best Regards,
Alvin


On Wed, Feb 17, 2010 at 1:06 AM, gary clark <burslem2001 at yahoo.com> wrote:

> I have to poll at the twisted server "getTcpKeepAlive" for the state of the
> keep alive.
>
>
> Thanks,
> Garyc
>
> --- On Tue, 2/16/10, gary clark <burslem2001 at yahoo.com> wrote:
>
> > From: gary clark <burslem2001 at yahoo.com>
> > Subject: [Twisted-Python] Pulling the ethernet cable out
> > To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> > Date: Tuesday, February 16, 2010, 10:15 AM
> > Hello,
> >
> > I'm tested my client server model. The server being a
> > twisted server.
> > I am using the class NetstringReceiver. When I close down
> > the client the appropriate call to close the connection is
> > made "connectionLost". However when I just pull the client
> > connection cable from the network. I would expect the call
> > to be made to indicate a connection is lost at the twisted
> > server. I dont see this.
> >
> > I am going through a local hub and not sure what at the
> > moment to think of this. I am using ssl to communicate.
> >
> > If somebody could shed some light on this that would be
> > great.
> >
> > Thanks,
> > Garyc
> >
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
http://www.alvinatorsplayground.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100217/673ef14b/attachment.html>

From rich at noir.com  Tue Feb 16 11:17:31 2010
From: rich at noir.com (K. Richard Pixley)
Date: Tue, 16 Feb 2010 10:17:31 -0800
Subject: [Twisted-Python] web page on doc...
Message-ID: <4B7AE13B.3050403@noir.com>

I've been going around and around on documentation with/for twisted for 
a few days now. For example, I read things like "the documentation is 
written in epytext" and "documentation is processed by trial" and 
conclude that trial processes epytext.  I think I'm beginning to 
understand what's really going on now but two things would have helped me.

1) a brief overview of the documentation.  (proposal below).
2) if references to "the documentation" could be clarified to refer to 
"howto documentation" vs "API documentation".

If agreed, then I will volunteer to help find and patch #2.  As a 
proposal for #1, I offer the following as an insertion into 
http://twistedmatrix.com/trac/wiki/ReviewingDocumentation as a second 
section:

UNDERSTANDING DOCUMENTATION ORGANIZATION

Documentation for Twisted comes in four primary parts.

The first part is a collection of "Howto" documents which are composed 
in xhtml, processed by twisted's "trial", into html.  The source for the 
Howto documents lives in subversion under doc in the various "howto" 
directories.

The second part is a collection of examples.  These examples are 
included inline in the "howto" doc.  These are written in python and 
twisted and are included in the various "examples" directories under 
"doc" in the source.

The third part is the API documentation which is produced by pydoctor 
from the docstrings scattered throughout the twisted source code.  The 
doc strings are written in epytext format.

The fourth part are traditional unix man pages.  These are written in 
troff -ms format and the sources are stored in the various "man" 
directories in the source under "doc".

--rich



From burslem2001 at yahoo.com  Tue Feb 16 11:18:53 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Tue, 16 Feb 2010 10:18:53 -0800 (PST)
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <7a01f6c01002160919t7d424c57sa609d22d8ef2b6a8@mail.gmail.com>
Message-ID: <48812.58225.qm@web112519.mail.gq1.yahoo.com>

Hey Alvin,

In the document link you provided the packets are being sent periodically every 2 hours for setTcpKeepAlive(1). I am assuming that
the a packet is sent straight away and then waits. At the moment I dont see the connection lost. The getTcpKeepAlive() is returning 1 indicating that keep alive is set.

Is there a way to change the delay?

Thanks,
Garyc



--- On Tue, 2/16/10, Alvin Delagon <adelagon at gmail.com> wrote:

> From: Alvin Delagon <adelagon at gmail.com>
> Subject: Re: [Twisted-Python] Pulling the ethernet cable out
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Tuesday, February 16, 2010, 11:19 AM
> Hello,
> No, getTcpKeepAlive will only tell you if
> SO_KEEPALIVE is enabled. It's setTcpKeepAlive you want.
> If it's enabled, once the keepalive times out on a
> half-open scenario, the connectionLost method will be
> triggered. You can read the API docs here:
> 
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connection.html#getTcpKeepAlive
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connection.html#setTcpKeepAlive
> 
> Best Regards,Alvin
> 
> On Wed, Feb 17, 2010 at 1:06 AM,
> gary clark <burslem2001 at yahoo.com>
> wrote:
> 
> I have to
> poll at the twisted server "getTcpKeepAlive" for
> the state of the keep alive.
> 
> 
> 
> 
> 
> Thanks,
> 
> Garyc
> 
> 
> 
> --- On Tue, 2/16/10, gary clark <burslem2001 at yahoo.com>
> wrote:
> 
> 
> 
> > From: gary clark <burslem2001 at yahoo.com>
> 
> > Subject: [Twisted-Python] Pulling the ethernet cable
> out
> 
> > To: "Twisted general
> discussion" <twisted-python at twistedmatrix.com>
> 
> > Date: Tuesday, February 16, 2010, 10:15 AM
> 
> > Hello,
> 
> >
> 
> > I'm tested my client server model. The server
> being a
> 
> > twisted server.
> 
> > I am using the class NetstringReceiver. When I close
> down
> 
> > the client the appropriate call to close the
> connection is
> 
> > made "connectionLost". However when I just
> pull the client
> 
> > connection cable from the network. I would expect the
> call
> 
> > to be made to indicate a connection is lost at the
> twisted
> 
> > server. I dont see this.
> 
> >
> 
> > I am going through a local hub and not sure what at
> the
> 
> > moment to think of this. I am using ssl to
> communicate.
> 
> >
> 
> > If somebody could shed some light on this that would
> be
> 
> > great.
> 
> >
> 
> > Thanks,
> 
> > Garyc
> 
> >
> 
> >
> 
> >
> 
> >
> 
> > _______________________________________________
> 
> > Twisted-Python mailing list
> 
> > Twisted-Python at twistedmatrix.com
> 
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> >
> 
> 
> 
> 
> 
> _______________________________________________
> 
> Twisted-Python mailing list
> 
> Twisted-Python at twistedmatrix.com
> 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> -- 
> http://www.alvinatorsplayground.blogspot.com/
> 
> 
> 
> -----Inline Attachment Follows-----
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From kevin.horn at gmail.com  Tue Feb 16 11:59:59 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 16 Feb 2010 12:59:59 -0600
Subject: [Twisted-Python] web page on doc...
In-Reply-To: <4B7AE13B.3050403@noir.com>
References: <4B7AE13B.3050403@noir.com>
Message-ID: <562bcc11002161059s54cd40f9w7273e7d2059410c2@mail.gmail.com>

On Tue, Feb 16, 2010 at 12:17 PM, K. Richard Pixley <rich at noir.com> wrote:

> I've been going around and around on documentation with/for twisted for
> a few days now. For example, I read things like "the documentation is
> written in epytext" and "documentation is processed by trial" and
> conclude that trial processes epytext.  I think I'm beginning to
> understand what's really going on now but two things would have helped me.
>
> 1) a brief overview of the documentation.  (proposal below).
> 2) if references to "the documentation" could be clarified to refer to
> "howto documentation" vs "API documentation".
>
> If agreed, then I will volunteer to help find and patch #2.  As a
> proposal for #1, I offer the following as an insertion into
> http://twistedmatrix.com/trac/wiki/ReviewingDocumentation as a second
> section:
>
> UNDERSTANDING DOCUMENTATION ORGANIZATION
>
> Documentation for Twisted comes in four primary parts.
>
> The first part is a collection of "Howto" documents which are composed
> in xhtml, processed by twisted's "trial", into html.  The source for the
> Howto documents lives in subversion under doc in the various "howto"
> directories.
>
> The second part is a collection of examples.  These examples are
> included inline in the "howto" doc.  These are written in python and
> twisted and are included in the various "examples" directories under
> "doc" in the source.
>
> The third part is the API documentation which is produced by pydoctor
> from the docstrings scattered throughout the twisted source code.  The
> doc strings are written in epytext format.
>
> The fourth part are traditional unix man pages.  These are written in
> troff -ms format and the sources are stored in the various "man"
> directories in the source under "doc".
>
> --rich
>
>
I think that an overview like this is a great idea, though in your text
above,
the xhtml is processed into html by "lore" not "trial".  With any luck this
will
change soon, and the long-form documentation (how-tos, etc.) will transition
to Sphinx.  If you'd like to see what that looks like, see here:
http://twistedsphinx.funsize.net

Other than that, something very like what you have described should
definitely
be _somewhere_ on the Twisted site.

(As an aside, I think a lot of things that are currently on the wiki should
be merged
into the documentation proper, but that's a topic for another post.)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100216/743f57ab/attachment.html>

From vlad.shevchenko at gmail.com  Tue Feb 16 12:46:48 2010
From: vlad.shevchenko at gmail.com (Vlad Shevchenko)
Date: Tue, 16 Feb 2010 21:46:48 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
Message-ID: <572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>

Hi,

I have developed two kind of servers:
   api - http server
   memory_db - dict-based server with some logic of putting data to dict and
getting it back.

Api communicate with memory_db via txJSON-RPC but response time is huge
under high load. I also try implementation with replacement txJSON-RPC ->
Perspective Broker with no success. PB implementation has 10+ times faster
responses when returning data is small (dict with few keys and values like
list of 1-5 strings). However, PM much depends on size of returning value.
When I return a list of 600 items (each is string with length 20) response
time incredibly growing up. Unlike PB, json-rpc implementation keeps it
response-time near the same lever as with small return data.

Can you suggest some protocol with a small response? Or should I look into
development of my own?

-- 
WBR, Vlad Shevchenko
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100216/3e198378/attachment.html>

From phil at bubblehouse.org  Tue Feb 16 13:08:46 2010
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 16 Feb 2010 15:08:46 -0500
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
Message-ID: <7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>

On Feb 16, 2010, at 2:46 PM, Vlad Shevchenko wrote:
> I have developed two kind of servers:
>    api - http server
>    memory_db - dict-based server with some logic of putting data to dict and getting it back.
> 
> Api communicate with memory_db via txJSON-RPC but response time is huge under high load. I also try implementation with replacement txJSON-RPC -> Perspective Broker with no success. PB implementation has 10+ times faster responses when returning data is small (dict with few keys and values like list of 1-5 strings). However, PM much depends on size of returning value. When I return a list of 600 items (each is string with length 20) response time incredibly growing up. Unlike PB, json-rpc implementation keeps it response-time near the same lever as with small return data.
> 
> Can you suggest some protocol with a small response? Or should I look into development of my own?

It definitely depends on your use case...

PB can still be a good solution for you if you change your architecture a little bit. Instead of returning a 600-item list, you could return a pb.Referencable object that can iteratively return each row at a time.

You may also want to look into using Copyable or Cacheable PB objects. More on that here:

	http://twistedmatrix.com/documents/current/core/howto/pb-copyable.html

Of course, if you need a large amount of data to be available before you can begin calculations or whatnot, you're going to have to wait for it to be sent no matter what protocol you use.

-phil





From matusis at yahoo.com  Tue Feb 16 13:47:07 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Tue, 16 Feb 2010 12:47:07 -0800
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <48812.58225.qm@web112519.mail.gq1.yahoo.com>
References: <7a01f6c01002160919t7d424c57sa609d22d8ef2b6a8@mail.gmail.com>
	<48812.58225.qm@web112519.mail.gq1.yahoo.com>
Message-ID: <02a301caaf49$34bd6020$9e382060$@com>

Assuming you are on Linux, you can run

#man tcp 

and take a look at the tunable parameters that control TCP protocol
timeouts:

tcp_keepalive_intvl
tcp_keepalive_probes
tcp_keepalive_time

They can be tuned via /proc filesystem.
These changes are system-wide, so you should consider the performance of
other applications on this system with those changes.

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of gary clark
> Sent: Tuesday, February 16, 2010 10:19 AM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] Pulling the ethernet cable out
> 
> Hey Alvin,
> 
> In the document link you provided the packets are being sent periodically
> every 2 hours for setTcpKeepAlive(1). I am assuming that
> the a packet is sent straight away and then waits. At the moment I dont
see
> the connection lost. The getTcpKeepAlive() is returning 1 indicating that
keep
> alive is set.
> 
> Is there a way to change the delay?
> 
> Thanks,
> Garyc
> 
> 
> 
> --- On Tue, 2/16/10, Alvin Delagon <adelagon at gmail.com> wrote:
> 
> > From: Alvin Delagon <adelagon at gmail.com>
> > Subject: Re: [Twisted-Python] Pulling the ethernet cable out
> > To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> > Date: Tuesday, February 16, 2010, 11:19 AM
> > Hello,
> > No, getTcpKeepAlive will only tell you if
> > SO_KEEPALIVE is enabled. It's setTcpKeepAlive you want.
> > If it's enabled, once the keepalive times out on a
> > half-open scenario, the connectionLost method will be
> > triggered. You can read the API docs here:
> >
> >
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connecti
> on.html#getTcpKeepAlive
> >
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connecti
> on.html#setTcpKeepAlive
> >
> > Best Regards,Alvin
> >
> > On Wed, Feb 17, 2010 at 1:06 AM,
> > gary clark <burslem2001 at yahoo.com>
> > wrote:
> >
> > I have to
> > poll at the twisted server "getTcpKeepAlive" for
> > the state of the keep alive.
> >
> >
> >
> >
> >
> > Thanks,
> >
> > Garyc
> >
> >
> >
> > --- On Tue, 2/16/10, gary clark <burslem2001 at yahoo.com>
> > wrote:
> >
> >
> >
> > > From: gary clark <burslem2001 at yahoo.com>
> >
> > > Subject: [Twisted-Python] Pulling the ethernet cable
> > out
> >
> > > To: "Twisted general
> > discussion" <twisted-python at twistedmatrix.com>
> >
> > > Date: Tuesday, February 16, 2010, 10:15 AM
> >
> > > Hello,
> >
> > >
> >
> > > I'm tested my client server model. The server
> > being a
> >
> > > twisted server.
> >
> > > I am using the class NetstringReceiver. When I close
> > down
> >
> > > the client the appropriate call to close the
> > connection is
> >
> > > made "connectionLost". However when I just
> > pull the client
> >
> > > connection cable from the network. I would expect the
> > call
> >
> > > to be made to indicate a connection is lost at the
> > twisted
> >
> > > server. I dont see this.
> >
> > >
> >
> > > I am going through a local hub and not sure what at
> > the
> >
> > > moment to think of this. I am using ssl to
> > communicate.
> >
> > >
> >
> > > If somebody could shed some light on this that would
> > be
> >
> > > great.
> >
> > >
> >
> > > Thanks,
> >
> > > Garyc
> >
> > >
> >
> > >
> >
> > >
> >
> > >
> >
> > > _______________________________________________
> >
> > > Twisted-Python mailing list
> >
> > > Twisted-Python at twistedmatrix.com
> >
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> > >
> >
> >
> >
> >
> >
> > _______________________________________________
> >
> > Twisted-Python mailing list
> >
> > Twisted-Python at twistedmatrix.com
> >
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> >
> >
> > --
> > http://www.alvinatorsplayground.blogspot.com/
> >
> >
> >
> > -----Inline Attachment Follows-----
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From burslem2001 at yahoo.com  Tue Feb 16 14:56:36 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Tue, 16 Feb 2010 13:56:36 -0800 (PST)
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <02a301caaf49$34bd6020$9e382060$@com>
Message-ID: <583281.73556.qm@web112519.mail.gq1.yahoo.com>


Much appreciated the response. setTcpKeepAlive(1) is good for calling
connectionLst, however I have to send a packet out to trigger this event.
Its too bad, just had to send periodically a small stay-alive packet.

Thanks,
Garyc



--- On Tue, 2/16/10, Alec Matusis <matusis at yahoo.com> wrote:

> From: Alec Matusis <matusis at yahoo.com>
> Subject: Re: [Twisted-Python] Pulling the ethernet cable out
> To: "'Twisted general discussion'" <twisted-python at twistedmatrix.com>
> Date: Tuesday, February 16, 2010, 2:47 PM
> Assuming you are on Linux, you can
> run
> 
> #man tcp 
> 
> and take a look at the tunable parameters that control TCP
> protocol
> timeouts:
> 
> tcp_keepalive_intvl
> tcp_keepalive_probes
> tcp_keepalive_time
> 
> They can be tuned via /proc filesystem.
> These changes are system-wide, so you should consider the
> performance of
> other applications on this system with those changes.
> 
> > -----Original Message-----
> > From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-
> > bounces at twistedmatrix.com]
> On Behalf Of gary clark
> > Sent: Tuesday, February 16, 2010 10:19 AM
> > To: Twisted general discussion
> > Subject: Re: [Twisted-Python] Pulling the ethernet
> cable out
> > 
> > Hey Alvin,
> > 
> > In the document link you provided the packets are
> being sent periodically
> > every 2 hours for setTcpKeepAlive(1). I am assuming
> that
> > the a packet is sent straight away and then waits. At
> the moment I dont
> see
> > the connection lost. The getTcpKeepAlive() is
> returning 1 indicating that
> keep
> > alive is set.
> > 
> > Is there a way to change the delay?
> > 
> > Thanks,
> > Garyc
> > 
> > 
> > 
> > --- On Tue, 2/16/10, Alvin Delagon <adelagon at gmail.com>
> wrote:
> > 
> > > From: Alvin Delagon <adelagon at gmail.com>
> > > Subject: Re: [Twisted-Python] Pulling the
> ethernet cable out
> > > To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> > > Date: Tuesday, February 16, 2010, 11:19 AM
> > > Hello,
> > > No, getTcpKeepAlive will only tell you if
> > > SO_KEEPALIVE is enabled. It's setTcpKeepAlive you
> want.
> > > If it's enabled, once the keepalive times out on
> a
> > > half-open scenario, the connectionLost method
> will be
> > > triggered. You can read the API docs here:
> > >
> > >
> > http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connecti
> > on.html#getTcpKeepAlive
> > >
> > http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.tcp.Connecti
> > on.html#setTcpKeepAlive
> > >
> > > Best Regards,Alvin
> > >
> > > On Wed, Feb 17, 2010 at 1:06 AM,
> > > gary clark <burslem2001 at yahoo.com>
> > > wrote:
> > >
> > > I have to
> > > poll at the twisted server "getTcpKeepAlive" for
> > > the state of the keep alive.
> > >
> > >
> > >
> > >
> > >
> > > Thanks,
> > >
> > > Garyc
> > >
> > >
> > >
> > > --- On Tue, 2/16/10, gary clark <burslem2001 at yahoo.com>
> > > wrote:
> > >
> > >
> > >
> > > > From: gary clark <burslem2001 at yahoo.com>
> > >
> > > > Subject: [Twisted-Python] Pulling the
> ethernet cable
> > > out
> > >
> > > > To: "Twisted general
> > > discussion" <twisted-python at twistedmatrix.com>
> > >
> > > > Date: Tuesday, February 16, 2010, 10:15 AM
> > >
> > > > Hello,
> > >
> > > >
> > >
> > > > I'm tested my client server model. The
> server
> > > being a
> > >
> > > > twisted server.
> > >
> > > > I am using the class NetstringReceiver. When
> I close
> > > down
> > >
> > > > the client the appropriate call to close
> the
> > > connection is
> > >
> > > > made "connectionLost". However when I just
> > > pull the client
> > >
> > > > connection cable from the network. I would
> expect the
> > > call
> > >
> > > > to be made to indicate a connection is lost
> at the
> > > twisted
> > >
> > > > server. I dont see this.
> > >
> > > >
> > >
> > > > I am going through a local hub and not sure
> what at
> > > the
> > >
> > > > moment to think of this. I am using ssl to
> > > communicate.
> > >
> > > >
> > >
> > > > If somebody could shed some light on this
> that would
> > > be
> > >
> > > > great.
> > >
> > > >
> > >
> > > > Thanks,
> > >
> > > > Garyc
> > >
> > > >
> > >
> > > >
> > >
> > > >
> > >
> > > >
> > >
> > > >
> _______________________________________________
> > >
> > > > Twisted-Python mailing list
> > >
> > > > Twisted-Python at twistedmatrix.com
> > >
> > > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > > >
> > >
> > >
> > >
> > >
> > >
> > > _______________________________________________
> > >
> > > Twisted-Python mailing list
> > >
> > > Twisted-Python at twistedmatrix.com
> > >
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > >
> > >
> > >
> > > --
> > > http://www.alvinatorsplayground.blogspot.com/
> > >
> > >
> > >
> > > -----Inline Attachment Follows-----
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From kevin.horn at gmail.com  Tue Feb 16 15:55:07 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 16 Feb 2010 16:55:07 -0600
Subject: [Twisted-Python] web page on doc...
In-Reply-To: <4B7AFDB0.8080309@noir.com>
References: <4B7AE13B.3050403@noir.com>
	<562bcc11002161059s54cd40f9w7273e7d2059410c2@mail.gmail.com>
	<4B7AFDB0.8080309@noir.com>
Message-ID: <562bcc11002161455y1a299b75q914285bd460be6e@mail.gmail.com>

On Tue, Feb 16, 2010 at 2:18 PM, K. Richard Pixley <rich at noir.com> wrote:

>  Kevin Horn wrote:
>
> xhtml is processed into html by "lore" not "trial".
>
> Doh.  Thanks.  I *knew* that.  I haven't gotten either to work yet, but
> neither is really on my radar right now either.
>
>
Well, I haven't gotten Lore to work (on Windows at least) in a looooooong
time.  The only way I can get trial to work on Windows is by using the
"Twisted Command Prompt", or some hairy PATH manipulation.


>  <http://twistedsphinx.funsize.net>Other than that, something very like
> what you have described should definitely
> be _somewhere_ on the Twisted site.
>
> (As an aside, I think a lot of things that are currently on the wiki should
> be merged
> into the documentation proper, but that's a topic for another post.)
>
> I think I'd need to hear more.
>
> I think there's a subtle distinction between describing the code, usage,
> and interfaces of the twisted library, and describing the people, policies,
> and interfaces of the twisted project.  Generally I think I'd prefer to keep
> them as clearly segregated as possible but there's certainly some grey area
> in between.
>
> --rich
>

For example, if you want to contribute to Twisted, you need to read (at the
very least):

http://twistedmatrix.com/documents/current/core/development/index.html

but you also need to read:
http://twistedmatrix.com/trac/wiki/TwistedDevelopment
http://twistedmatrix.com/trac/wiki/ReviewProcess
and maybe:
http://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs

to really get a full picture.

A lot of this is incomplete on a given page, and you need to have read the
others to really understand what's going on.
Some of that stuff should be merged into the actual development docs (like
the stuff on commit messages, for example).

Some of it certainly belongs in the wiki, but not all of it, and some of
that could be condensed into one page.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100216/7a7703f5/attachment.html>

From vlad.shevchenko at gmail.com  Tue Feb 16 16:23:10 2010
From: vlad.shevchenko at gmail.com (Vlad Shevchenko)
Date: Wed, 17 Feb 2010 01:23:10 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
Message-ID: <572f045e1002161523r4fa25193w1328bf7a323f76a6@mail.gmail.com>

Really I need a large amount of data to be available before I can
begin calculations, Json-PRC vs. PB provide a 10+ times smaller
response time for same returning data


On Tue, Feb 16, 2010 at 10:08 PM, Phil Christensen <phil at bubblehouse.org>wrote:

> On Feb 16, 2010, at 2:46 PM, Vlad Shevchenko wrote:
> > I have developed two kind of servers:
> >    api - http server
> >    memory_db - dict-based server with some logic of putting data to dict
> and getting it back.
> >
> > Api communicate with memory_db via txJSON-RPC but response time is huge
> under high load. I also try implementation with replacement txJSON-RPC ->
> Perspective Broker with no success. PB implementation has 10+ times faster
> responses when returning data is small (dict with few keys and values like
> list of 1-5 strings). However, PM much depends on size of returning value.
> When I return a list of 600 items (each is string with length 20) response
> time incredibly growing up. Unlike PB, json-rpc implementation keeps it
> response-time near the same lever as with small return data.
> >
> > Can you suggest some protocol with a small response? Or should I look
> into development of my own?
>
> It definitely depends on your use case...
>
> PB can still be a good solution for you if you change your architecture a
> little bit. Instead of returning a 600-item list, you could return a
> pb.Referencable object that can iteratively return each row at a time.
>
> You may also want to look into using Copyable or Cacheable PB objects. More
> on that here:
>
>
> http://twistedmatrix.com/documents/current/core/howto/pb-copyable.html
>
> Of course, if you need a large amount of data to be available before you
> can begin calculations or whatnot, you're going to have to wait for it to be
> sent no matter what protocol you use.
>
> -phil
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
WBR, Vlad Shevchenko
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100217/ead197fa/attachment.html>

From vlad.shevchenko at gmail.com  Tue Feb 16 16:25:57 2010
From: vlad.shevchenko at gmail.com (Vlad Shevchenko)
Date: Wed, 17 Feb 2010 01:25:57 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
Message-ID: <572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>

here is some statistic:

low network traffic
===========================================
Json-RPC                  PB

average MIN 0.016         average MIN 0.011
average MAX 0.044         average MAX 0.029
AVG 0.027                 AVG 0.017
90% line 0.027            90% line 0.017
CLIENTS 139               CLIENTS 142
ERRORS 0                  ERRORS 0

average MIN 0.029         average MIN 0.023
average MAX 0.426         average MAX 0.159
AVG 0.151                 AVG 0.062
90% line 0.124            90% line 0.052
CLIENTS 317               CLIENTS 316
ERRORS 0                  ERRORS 0

average MIN 0.32          average MIN 0.115
average MAX 2.763         average MAX 1.521
AVG 1.064                 AVG 0.405
90% line 0.908            90% line 0.308
CLIENTS 456               CLIENTS 479
ERRORS 0                  ERRORS 0

average MIN 0.253         average MIN 0.02
average MAX 4.031         average MAX 1.486
AVG 1.123                 AVG 0.296
90% line 0.859            90% line 0.189
CLIENTS 482               CLIENTS 501
ERRORS 30                 ERRORS 0


hight network traffic  (string 7000 length)
===========================================
Json-RPC                  PB

average MIN 0.016         average MIN 1.755
average MAX 0.114         average MAX 3.517
AVG 0.045                 AVG 2.58
90% line 0.043            90% line 2.58
CLIENTS 138               CLIENTS 88
ERRORS 0                  ERRORS 0

average MIN 0.333         average MIN 4.923
average MAX 1.516         average MAX 9.019
AVG 0.732                 AVG 6.746
90% line 0.652            90% line 6.746
CLIENTS 288               CLIENTS 173
ERRORS 0                  ERRORS 0

average MIN 0.409         average MIN 9.505
average MAX 2.372         average MAX 16.546
AVG 1.221                 AVG 12.486
90% line 1.119            90% line 12.448
CLIENTS 429               CLIENTS 273
ERRORS 0                  ERRORS 0

average MIN 0.414         average MIN 14.22
average MAX 3.932         average MAX 22.986
AVG 1.639                 AVG 17.987
90% line 1.426            90% line 17.866
CLIENTS 496               CLIENTS 392
ERRORS 27                 ERRORS 0


On Tue, Feb 16, 2010 at 10:08 PM, Phil Christensen <phil at bubblehouse.org>wrote:

> On Feb 16, 2010, at 2:46 PM, Vlad Shevchenko wrote:
> > I have developed two kind of servers:
> >    api - http server
> >    memory_db - dict-based server with some logic of putting data to dict
> and getting it back.
> >
> > Api communicate with memory_db via txJSON-RPC but response time is huge
> under high load. I also try implementation with replacement txJSON-RPC ->
> Perspective Broker with no success. PB implementation has 10+ times faster
> responses when returning data is small (dict with few keys and values like
> list of 1-5 strings). However, PM much depends on size of returning value.
> When I return a list of 600 items (each is string with length 20) response
> time incredibly growing up. Unlike PB, json-rpc implementation keeps it
> response-time near the same lever as with small return data.
> >
> > Can you suggest some protocol with a small response? Or should I look
> into development of my own?
>
> It definitely depends on your use case...
>
> PB can still be a good solution for you if you change your architecture a
> little bit. Instead of returning a 600-item list, you could return a
> pb.Referencable object that can iteratively return each row at a time.
>
> You may also want to look into using Copyable or Cacheable PB objects. More
> on that here:
>
>
> http://twistedmatrix.com/documents/current/core/howto/pb-copyable.html
>
> Of course, if you need a large amount of data to be available before you
> can begin calculations or whatnot, you're going to have to wait for it to be
> sent no matter what protocol you use.
>
> -phil
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
WBR, Vlad Shevchenko
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100217/c7360663/attachment.html>

From stephen at thorne.id.au  Tue Feb 16 16:32:09 2010
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 17 Feb 2010 09:32:09 +1000
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
	<572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>
Message-ID: <20100216233209.GA20490@thorne.id.au>

Vlad,

Have you considered using twisted.protocols.amp ?

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue



From micahel at gmail.com  Tue Feb 16 17:10:09 2010
From: micahel at gmail.com (Michael Hudson-Doyle)
Date: Wed, 17 Feb 2010 13:10:09 +1300
Subject: [Twisted-Python] Pulling the ethernet cable out
In-Reply-To: <583281.73556.qm@web112519.mail.gq1.yahoo.com>
References: <02a301caaf49$34bd6020$9e382060$@com>
	<583281.73556.qm@web112519.mail.gq1.yahoo.com>
Message-ID: <aa0dfd861002161610w26662e4fn8650b6230f09a08d@mail.gmail.com>

On 17 February 2010 10:56, gary clark <burslem2001 at yahoo.com> wrote:
>
> Much appreciated the response. setTcpKeepAlive(1) is good for calling
> connectionLst, however I have to send a packet out to trigger this event.
> Its too bad, just had to send periodically a small stay-alive packet.

That's just a fact of life with TCP.  It's upside is that you can
sometimes sleep your laptop for the night and still have all your ssh
connections going when you start again the next day :-)

Cheers,
mwh



From wthie at thiengineering.ch  Tue Feb 16 17:58:59 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Tue, 16 Feb 2010 14:58:59 -1000
Subject: [Twisted-Python] web page on doc...
In-Reply-To: <562bcc11002161455y1a299b75q914285bd460be6e@mail.gmail.com>
References: <4B7AE13B.3050403@noir.com>	<562bcc11002161059s54cd40f9w7273e7d2059410c2@mail.gmail.com>	<4B7AFDB0.8080309@noir.com>
	<562bcc11002161455y1a299b75q914285bd460be6e@mail.gmail.com>
Message-ID: <4B7B3F53.3070702@thiengineering.ch>

...snip
> Well, I haven't gotten Lore to work (on Windows at least) in a looooooong
> time.  The only way I can get trial to work on Windows is by using the
> "Twisted Command Prompt", or some hairy PATH manipulation.
snip...

Not to my knowledge, I'm running trial on MSW with JScript and all 
enabled  for Twisted itself and divmod devs Nevow too.

The simple solution is a trial.bat file in the scripts section and .pth 
files for working with detached (not python installed) SVN controlled 
projects.

The PATH variable must of course have an entry pointing to the scripts 
directory for the Python install your using.

twistd.bat in the scripts directory
------------------------------------------
@echo off
c:\Python25\python.exe c:\proj\twisted\bin\twistd %1 %2 %3 %4 %5 %6 %7
------------------------------------------

twisted.pth in the Lib/site-packages directory
------------------------------------------
c:\proj\twisted
------------------------------------------

Use this pattern for trial or whatever **x shell script accordingly.

Works like a charm under MSW, see also my post on divmod-dev concerning 
using trial for nevow automated testing.

I never used lore in MSW though but will give it a try when being out of 
that pothole I'm in.

HTH, Werner





From itamar at itamarst.org  Tue Feb 16 18:08:54 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 16 Feb 2010 20:08:54 -0500
Subject: [Twisted-Python] Help Twisted at PyCon (or anywhere else)
Message-ID: <1266368934.4771.362.camel@pintsize>

Hello Twisted users,

Does Twisted help you with your job, hobby or homework? Here's how you
can help Twisted in return, especially if you're coming to PyCon:

* Talk to us!
We want to hear what features you want, what problems you are having.
But especially, we want to hear about the cool stuff you build with
Twisted, because that makes us happy (and even happier to work on
Twisted and help you.)

* Develop Twisted!
Whether it's writing documentation or fixing bugs, we always appreciate
help from new developers. Some of us will be hacking at PyCon (aka
"talking a lot and occasionally coding"), so drop by and join us. After
PyCon some developers will be staying around for a sprint, which you are
welcome to join -- some topics people have expressed interest in:

        web client
        wsgi container
        websocket
        inotify
        generic sasl
        win32 stdio/console
        sphinx docs conversion
        PyWeek / "Twisted Game"
        web2
        deferred cancellation
        endpoints
        release
        deferToProcess
        spread
        conch bug fixing
        toolchain improvements for casual contributors
        
* Get your company to donate!
Or at least, introduce us to your boss. Much of our development (coding
and bug reviews) is done by volunteers, but a large chunk is also paid
for by tax-deductible donations via our friends at the Software Freedom
Conservancy. Donating helps us fix bugs and add new features more
quickly.

* Hire (some of) us!
Jean-Paul Calderone and possibly others would be happy to consult with
your organization.

* Buy us a beer on your per diem!
Or two. We also accept other beverages.

Many of us will be at PyCon -- and no doubt we'll have an open space
session -- so please do track us down. Thanks for using Twisted!


  --Itamar Turner-Trauring, on behalf of the Twisted development team





From eero.nevalainen at indagon.com  Wed Feb 17 02:03:49 2010
From: eero.nevalainen at indagon.com (Eero Nevalainen)
Date: Wed, 17 Feb 2010 11:03:49 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
Message-ID: <4B7BB0F5.9060006@indagon.com>

Vlad Shevchenko wrote:
> I have developed two kind of servers:
>    api - http server
>    memory_db - dict-based server with some logic of putting data to dict
> and getting it back.

Sounds a bit like tuple spaces.

-- 
Eero




From adam at happy.cat  Wed Feb 17 06:46:20 2010
From: adam at happy.cat (Adam Hayward)
Date: Wed, 17 Feb 2010 14:46:20 +0100
Subject: [Twisted-Python] XMPP server implementations with twisted/words
In-Reply-To: <4B79EB23.5020101@thiengineering.ch>
References: <1265997780.12763.175.camel@mundo>
	<20100212200606.26099.921471754.divmod.xquotient.1199@localhost.localdomain>
	<1266227696.12763.200.camel@mundo>
	<20100215132504.26099.1129318130.divmod.xquotient.1329@localhost.localdomain>
	<1266251530.12763.221.camel@mundo>
	<20100215164511.26099.288315412.divmod.xquotient.1343@localhost.localdomain>
	<1266258957.12763.228.camel@mundo>
	<20100215193711.26099.2072438938.divmod.xquotient.1380@localhost.localdomain>
	<4B79EB23.5020101@thiengineering.ch>
Message-ID: <a4fb4c571002170546h29dcde7fk7d55942a638dc80c@mail.gmail.com>

On 16 February 2010 01:47, Werner Thie <wthie at thiengineering.ch> wrote:

>
> Being new in the XMPP world I ask myself and now the group, how would
> you tackle the problem of a twisted based XMPP server. Is there really
> only the Java breed of servers like OpenFire, Tigase or Erlang/Lua based
> stuff like ejabberd/Prosody available or am I simply blind.
>
>
Hi there,

going the twisted route, have a look at Wokkel: http://wokkel.ik.nu/

Jack Moffet has written a simple bot example with wokkel and twisted:
http://metajack.im/2008/09/25/an-xmpp-echo-bot-with-twisted-and-wokkel/


~Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100217/cb17f90a/attachment.html>

From einar.twisted at norsk-esport.no  Wed Feb 17 11:14:37 2010
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?Einar_S=2E_Ids=F8?=)
Date: Wed, 17 Feb 2010 19:14:37 +0100
Subject: [Twisted-Python] Need help for structured application
	development
In-Reply-To: <72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
Message-ID: <e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>

Yeah, sorry about the long mail. I thought it would be a good idea to
explain my app and its requirements, and thereby get better advice on
how to structure it, than having to iterate to and from this list a
number of times. Perhaps that was the wrong strategy.

Thanks for your assistance. I've looked at t.i.utils.getProcessOutput,
and it is what I need to run my query software. Unfortunately that is
only 5% of the puzzle - my real problem is working out what kind of
top-level classes I should be using to spawn my service-checkers as
they are needed. I guess I need a factory that launches server checker
objects not as a result of a TCP/UDP connection, but as a result of
new servers being detected. This is not how I've seen factories being
used regularly, and I would love to get some input on this.

If I am not making sense at all, please let me know :)

Cheers,
Einar

On Tue, Feb 16, 2010 at 11:57 AM, Alexandre Quessy <alexandre at quessy.net> wrote:
> Hello Einar,
> This is a quite long email.
> What I can tell you, is that querying many command line applications
> with t.i.utils.getProcessOutput and gathering them in a DeferredList
> worked for me. Example: the list_cameras in
> http://svn.sat.qc.ca/trac/miville/browser/trunk/py/scenic/devices/cameras.py
>
> Good luck !
>
> a
>
>
> 2010/2/15 Einar S. Idsø <einar.twisted at norsk-esport.no>:
>> Hi,
>>
>> I am planning to develop an application that will query a number of
>> services at given intervals, and Twisted seems like a very nice
>> platform to do so. However, because of little previous experience with
>> Twisted, especially with building proper applications, using
>> interfaces and using plugins, I could really need some pointers to get
>> me started.
>>
>> In the following I will try to explain in broad terms what the
>> application will do, and humbly ask for input on how I may structure
>> it using factories, protocols etc.:
>>
>> 1. A number of more-or-less similar server applications (5-10) have a
>> number of concurrent instances/servers (1-30) each.
>> 2. I need to acquire the status of each instance at given intervals.
>> These will typically range from every 20 seconds to every 3 minutes,
>> and depend on the which service the instance is based on.
>> 3. A list of the server instances shall be acquired via an XML-query
>> every few minutes to pick up on new or removed instances.
>> 4. An executable already exists which can be used to status-poll
>> almost all services using different parameters. I will be calling it
>> from my application to do the polling instead of recreating it in
>> Python.
>> 5. I need to be able to create my own polling-protocol for at least
>> one of the service types which is incompatible with the executable.
>> 6. Some services can not only be polled at intervals, but additionally
>> stream information that I am interested in listening to.
>> 7. At a later point in time, I wish to be able to communicate with
>> IRC, MSN and other services/protocols using the queried and streamed
>> data.
>>
>> My initial general thought is the following:
>> 1. Design a class for each server application, where all classes
>> implement the same interface. The class defines how to deal with
>> server instances of its corresponding server application type. Classes
>> are created as Twisted-plugins.
>> 2. For each new server instance that is discovered, create an object
>> which contains a timer and polls the server at specific intervals,
>> writing the result to a globally accessible data structure.
>> 3. For server instances that stream data continuously in addition to
>> being polled at regular intervals, create a separate object which
>> listens to the server.
>>
>> I believe I should somehow have a global data structure which contains
>> references to all the server instance objects, regardless of type, and
>> allows them to store data. This is sort of like the factory does for
>> protocols, except in my case I don't think I can use a regular factory
>> since I need both clients (to poll at intervals) and servers (to
>> listen to streaming data). I suppose I could use a ClientFactory for
>> the pollers and a Factory for the stream-listeners, and let them have
>> a common data-store? But is it possible to use a single ClientFactory
>> to spawn all poller-objects regardless of server type? Or do I need
>> one ClientFactory for each server type? Do I perhaps need one
>> ClientFactory per server instance? Or should I just ignore factories
>> all together since it is primarily the timer and asyncronicity of
>> Twisted I need?
>>
>> I am quite certain there is a correct twistified way of handling this
>> sort of problem. I am just not sure what it is, and would sincerely
>> welcome all feedback on how this should be done. Feel free to point to
>> examples of applications that are similar to what I sketched above,
>> and tell me to study the code :)
>>
>> Cheers,
>> Einar
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> Alexandre Quessy
> http://alexandre.quessy.net/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From glyph at twistedmatrix.com  Thu Feb 18 01:04:38 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 18 Feb 2010 03:04:38 -0500
Subject: [Twisted-Python] Need help for structured application
	development
In-Reply-To: <e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
	<e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
Message-ID: <4818088B-75C0-47E7-AAE7-DB05D00951B0@twistedmatrix.com>


On Feb 17, 2010, at 1:14 PM, Einar S. Idsø wrote:

> Yeah, sorry about the long mail. I thought it would be a good idea to
> explain my app and its requirements, and thereby get better advice on
> how to structure it, than having to iterate to and from this list a
> number of times. Perhaps that was the wrong strategy.

It is definitely the right strategy :).  If you provide these requirements, then it's much easier to just provide an answer, rather than having to ask you for more about what you're really trying to do.  Please feel free to include lots of detail in your next question too!


From tuxattack14 at gmail.com  Thu Feb 18 02:30:21 2010
From: tuxattack14 at gmail.com (Tux Attack)
Date: Thu, 18 Feb 2010 15:00:21 +0530
Subject: [Twisted-Python] Running php script on twisted server
Message-ID: <bed370f31002180130j432c222cs2147ecb5d5cdfce5@mail.gmail.com>

I am trying to run a php script on a webserver written in twisted.For that i
am using twcgi module.
Here is my code.
This is code for webServer.py ->


from twisted.internet import reactor
from twisted.web import static,script,twcgi,server
from twisted.python.log import startLogging
import sys

class PHPScript(twcgi.FilteredScript):

filter='/media/DATA/Documents/project-docs/twisted/twisted-programs/testPHP/twisted-php.py'

root=static.File('html_files')
root.indexNames=['index.php']
root.processors={'.php':twcgi.PHPScript}
site=server.Site(root)
reactor.listenTCP(8000,site)
startLogging(sys.stdout)
reactor.run()


And here is another file used in program twisted-php.py ->

#!/usr/bin/env python
> import os, sys, commands
> print "Content-type: text/html\n\n";
> command = 'php ' + sys.argv.pop(1)
> data = commands.getstatusoutput(command)
> print data[1]
>


Now my problem is if i try to acess some url like
http://localhost:8000/list.php then everything works fine but if i enter url
with parameters like http://localhost:8000/list.php?file=sample.txt then
twisted is not passing parameters after '?' to twisted-php.py
I verified this in twisted-php.py
Is there any way i can use such php scripts with parameters in twisted?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100218/87373559/attachment-0001.html>

From johann.borck at densedata.com  Thu Feb 18 03:36:01 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Thu, 18 Feb 2010 10:36:01 +0000
Subject: [Twisted-Python] Need help for structured
	application	development
In-Reply-To: <e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
	<e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
Message-ID: <4B7D1811.1070204@densedata.com>

Einar S. Idsø wrote:
> [...]  I guess I need a factory that launches server checker
> objects not as a result of a TCP/UDP connection, but as a result of
> new servers being detected.
How does this detection work? Are those servers based on twisted? Also, 
do you control them (start/stop/configuration), do you have access to 
the machines they're on, or are you detecting them over network only?

Johann



From einar.twisted at norsk-esport.no  Thu Feb 18 15:41:56 2010
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?Einar_S=2E_Ids=F8?=)
Date: Thu, 18 Feb 2010 23:41:56 +0100
Subject: [Twisted-Python] Need help for structured application
	development
In-Reply-To: <4B7D1811.1070204@densedata.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
	<e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
	<4B7D1811.1070204@densedata.com>
Message-ID: <e97d8e3b1002181441s1b07fc4dsbc6e151f41c0d0aa@mail.gmail.com>

On Thu, Feb 18, 2010 at 11:36 AM, Johann Borck
<johann.borck at densedata.com> wrote:
> Einar S. Idsø wrote:
>> [...]  I guess I need a factory that launches server checker
>> objects not as a result of a TCP/UDP connection, but as a result of
>> new servers being detected.
> How does this detection work? Are those servers based on twisted? Also,
> do you control them (start/stop/configuration), do you have access to
> the machines they're on, or are you detecting them over network only?

Johann: Thanks for your response. I do control these services myself,
and they run on our own hosts, but they are created and spawned via an
external web interface which also has a Soap API. I do not plan on
starting/stopping them via this application I'm developing. I just
need to get the list of servers and start polling them. I get the list
by calling the Soap webservice. It simply outputs a list of servers,
and it is my job to query each and every one at specific intervals for
status.

I was thinking I would have the Soap-query run as a timed function
every few minutes, and compare the new list with the old to work out
any new/removed servers. Whenever a new server is identified, I will
spawn a new object to deal with it, including, but not limited to,
polling at given intervals. What kind of object should this be? A
ClientFactory? Another kind of object that is already defined
somewhere in Twisted? A completely custom object, built from scratch?
I am leaning towards ClientFactory, but I am definitely not certain.

Glyph: Thanks for letting me know I'm at least asking correctly :)

Cheers,
Einar



From johann.borck at densedata.com  Thu Feb 18 21:45:28 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 19 Feb 2010 04:45:28 +0000
Subject: [Twisted-Python] Need help for structured
	application	development
In-Reply-To: <e97d8e3b1002181441s1b07fc4dsbc6e151f41c0d0aa@mail.gmail.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>	<e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>	<4B7D1811.1070204@densedata.com>
	<e97d8e3b1002181441s1b07fc4dsbc6e151f41c0d0aa@mail.gmail.com>
Message-ID: <4B7E1768.8030608@densedata.com>

Einar S. Idsø wrote:
> On Thu, Feb 18, 2010 at 11:36 AM, Johann Borck
> <johann.borck at densedata.com> wrote:
>   
>> Einar S. Idsø wrote:
>>     
>>> [...]  I guess I need a factory that launches server checker
>>> objects not as a result of a TCP/UDP connection, but as a result of
>>> new servers being detected.
>>>       
>> How does this detection work? Are those servers based on twisted? Also,
>> do you control them (start/stop/configuration), do you have access to
>> the machines they're on, or are you detecting them over network only?
>>     
>
> Johann: Thanks for your response. I do control these services myself,
> and they run on our own hosts, but they are created and spawned via an
> external web interface which also has a Soap API. I do not plan on
> starting/stopping them via this application I'm developing. I just
> need to get the list of servers and start polling them. I get the list
> by calling the Soap webservice. It simply outputs a list of servers,
> and it is my job to query each and every one at specific intervals for
> status.
>
> I was thinking I would have the Soap-query run as a timed function
> every few minutes, and compare the new list with the old to work out
> any new/removed servers. Whenever a new server is identified, I will
> spawn a new object to deal with it, including, but not limited to,
> polling at given intervals. What kind of object should this be? A
> ClientFactory? Another kind of object that is already defined
> somewhere in Twisted? A completely custom object, built from scratch?
> I am leaning towards ClientFactory, but I am definitely not certain.
>
>   
I see. So if I get these requirements right you have 5-10 services with 
1-30 instances of each, with following properties relevant to the task 
at hand:

1. those pollable by your existing program.
2. those incompatible with your existing program.
3. those that do not stream additional data.
4. those that do stream additional data.

since sets  (1 and 2) and (3 and 4) are distinct, the combinations 
(1,3),(1,4),(2,3),(2,4) are possible.

(1,3) the easy one, obviously you just need an object that polls the 
service using your program in intervals specific to the service.
(1,4) Question: will the data you're interested in be collected by your 
existing program or by twisted? In the former case, it's basically the 
same as (1,3), in the latter you'll have to implement a protocol.
(2,3) for these you'll need to implement a protocol class.
(2,4) here you'll have to implement one or two protocols, depending on 
how the service is implemented.

Is the above about correct? I think it would be a good idea to have an 
object OB that keeps references to all objects that gather data from the 
services, grouped by the type of service they're responsible for 
(defaultdict(list or dict) comes to mind). And then you'll probably 
either want factories that take care of handing newly created protocol 
instances over to OB or some instances (one or two per service in sets 
(2,3,4) ) of a multipurpose factory that can be initialized with the 
respective protocol and the information how to pass the created protocol 
over to OB, maybe  just a simple method that is able to distinguish the 
protocols by the interfaces they implement.

One pitfall might be your polling program in case you're using 
t.i.u.getProcessOutput. It (t.i.u...) provides an asynchronous 
interface, so the worst that can happen is a stray process that doesn't 
return, but you still might want to consider implementing a 
ProcessProtocol 
(http://twistedmatrix.com/documents/current/core/howto/process.html) 
with a reasonable timeout, to be able to kill the spawned process in 
case it doesn't terminate. Thinking about it, it's the better solution 
anyway, because process protocols are just another type of protocol in 
twisted, and can be integrated consistently with the rest of your app.

Another utility you might want is t.i.task.LoopingCall, for obvious 
reasons. Given your requirements something along these lines would be my 
approach, although I'd probably reimplement the polling thingy in 
twisted if it's not too complex :)

hope that makes sense,
Johann




From ssoni at nextdigital.com  Thu Feb 18 21:17:07 2010
From: ssoni at nextdigital.com (Sury Soni)
Date: Fri, 19 Feb 2010 15:17:07 +1100
Subject: [Twisted-Python] Nevow question
Message-ID: <1BE49492956ECA42BEB0D78F67665E1F01395DCE@exchange.wdg>

Hi,

 

How do we disable traceback on Nevow production site?

 

Right now, by default, any nevow site will print full length of
traceback on web browser if there is some exception within the
application.

 

I have gone through the ticket http://twistedmatrix.com/trac/ticket/135
but could not find quick place to disable/enable the same in my nevow
application.

 

Sury Prakash Soni



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100219/9b7587ad/attachment.html>

From marco.giusti at gmail.com  Fri Feb 19 04:11:37 2010
From: marco.giusti at gmail.com (Marco Giusti)
Date: Fri, 19 Feb 2010 12:11:37 +0100
Subject: [Twisted-Python] Nevow question
In-Reply-To: <1BE49492956ECA42BEB0D78F67665E1F01395DCE@exchange.wdg>
References: <1BE49492956ECA42BEB0D78F67665E1F01395DCE@exchange.wdg>
Message-ID: <20100219111137.GE16399@murdoc>

On Fri, Feb 19, 2010 at 03:17:07PM +1100, Sury Soni wrote:
> Hi,
> 
> How do we disable traceback on Nevow production site?
> 
> Right now, by default, any nevow site will print full length of
> traceback on web browser if there is some exception within the
> application.
[cut]

something like this?

http://divmod.org/trac/wiki/DivmodNevow/ErrorHandling


-- 
Hofstadter's Law:
It always takes longer than you expect, even when you take into account
Hofstadter's Law.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20100219/53a90f0b/attachment.sig>

From darren at ontrenet.com  Fri Feb 19 04:33:22 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Fri, 19 Feb 2010 06:33:22 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
Message-ID: <1266579203.2532.124.camel@kratos>

Hi again,
   Ok, so now it seems the Int32StringReceiver does not receive
"stringReceived" events if the sent bytes
exceed a certain amount. If I send from the client, say 5000 bytes. It
receives it.

But when i send 7376896 bytes at a time, the client indicates it wrote
the bytes, but there is not one
stringReceived callback on the server side of the protocol. No error or
exception. nothing. 
Is this normal behavior?

thanks,
Darren

On Sat, 2010-02-13 at 20:22 -0500, David Bolen wrote:

> Darren Govoni <darren at ontrenet.com> writes:
> 
> > I spoke too fast. But pardon my noobiness.
> >
> > Ok, so I am using a simple protocol that is listening on a TCP port.
> >
> > One the client side, I write 4096 bytes using
> > self.transport.write(bytes)
> >
> > on dataReceived side, I get only 1448. 
> 
> Quite possible, and even likely with a chunk of 4096, given likely
> network latencies and the physical packet sizes at each network hop
> along the way.
> 
> However, dataReceived will eventually be called additional times until
> all of the 4096 bytes that was transmitted and received over the
> socket connection have been handed off to your protocol.  That's just
> the nature of a stream protocol - it's a constant stream of data being
> fed by one end and drained on the other, without any natural
> boundaries or structures within (other than, I suppose, the boundary
> of an octet since you can't receive a partial octet).
> 
> The alternative is to use a datagram protocol like UDP, but then you
> have all the negatives of no guaranteed delivery, out of order
> delivery, completely impossible delivery (when trying a datagram
> larger than the UDP limit), etc...
> 
> Far easier to just handle the TCP stream properly.
> 
> > Now, what I "want" to happen is when I issue a write of a known
> > number of bytes. I "want" those bytes to arrive in total because
> > they represent a pickled object.  The server has no idea if the
> > bytes are split and scattered (again, I want the control protocol to
> > take affect).
> 
> I suspect it may just be a difference in phrasing, but note that I
> consider "arrive in total" to be different from "arrive in the same
> number of I/O operations".  TCP guarantees the former (sans dropped
> connections) but not the latter.  It's a trade-off that you make in
> order to get the other benefits of guaranteed delivery with TCP,
> regardless of network disruptions, latency, etc...
> 
> You're fine as long as you just accept up front that you can't make
> any assumptions as to how the data will arrive at the receiving end.
> So combine the data in whatever sizes it is received (and any number
> of received chunks) until you have it all.  You can then de-pickle it
> or do anything else with it.  As a comparison, that's really all PB is
> doing, although it's banana-encoding the object on the wire rather
> than pickling.
> 
> Depending on the client/server interaction, you may also have the
> opposite problem - the final chunk of data received may cover more
> than one client transmission, and you'll have to split it up
> appropriately.
> 
> That's why if you will be transmitting multiple sets of data over a
> single connection, you'll want some structure (unique boundary codes,
> encoded length information, parseable data like XML, etc...) in the wire
> protocol so your server knows when it is done.
> 
> > 1) Am I doing something wrong here?
> 
> Not so much wrong, as perhaps a little misguided in terms of trying to
> have a stream protocol work less as a stream than it does.
> 
> I suspect you may also be over-estimating a little the complexity of
> handling this aspect of TCP in your own code.
> 
> > 2) Can I force twisted to send ALL the bytes I issue in the write
> > without re-thinking TCP or forcing me to re-implement TCP?
> 
> Again, distinguish between "send ALL the bytes" which *does* in fact
> happen, versus "receive bytes in identically sized chunks" which will
> not happen.  Though I seriously doubt that your demands are such that
> it requires "re-thinking" or "re-implement[ing]" TCP.
> 
> Much easier to stick with the TCP base (loads of benefits), and just
> encode enough structure into your stream to permit the server to
> identify the boundaries of the requests.  Then, code the server to
> look for such boundaries while accepting data in any size chunks, and
> you're done.  It's pretty much what every other TCP protocol that has
> structure to its data does, whether that's length counted, flag bytes,
> specific textual content (such as the final empty line in an HTTP
> request), etc...
> 
> As has been posted in another response, you may find some of the
> existing protocols in twisted.protocol.basic to be helpful for this.
> The older posting of mine that you referenced used a subclass of
> LineReceiver to encode the length in ASCII as part of an initial
> header, for example, though it closed the connection when done.  And,
> for example, Netstring or the Int##String classes takes care of the
> counting on your behalf, and even give subclasses a nice single entry
> point (stringReceived) to use instead of dataReceived, so your server
> need not think about the aggregation or splitting of chunks.
> 
> If nothing else, reading the source to one of those receiver classes
> might help provide a concrete example of the aggregation (or
> splitting) of the stream data that I mention above.
> 
> -- David
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100219/dd2d5f0f/attachment.html>

From exarkun at twistedmatrix.com  Fri Feb 19 06:12:56 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 19 Feb 2010 13:12:56 -0000
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1266579203.2532.124.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
	<1266579203.2532.124.camel@kratos>
Message-ID: <20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>

On 11:33 am, darren at ontrenet.com wrote:
>Hi again,
>   Ok, so now it seems the Int32StringReceiver does not receive
>"stringReceived" events if the sent bytes
>exceed a certain amount. If I send from the client, say 5000 bytes. It
>receives it.
>
>But when i send 7376896 bytes at a time, the client indicates it wrote
>the bytes, but there is not one
>stringReceived callback on the server side of the protocol. No error or
>exception. nothing.
>Is this normal behavior?

Yes.  You've hit the arbitrary additional limit on the maximum length of 
a single string that Int32StringReceiver will accept.  When this limit 
is exceeded, the connection is dropped.  If you really want to accept 
7MB strings from your peer, set the MAX_LENGTH attribute of your 
Int32StringReceiver subclass (or instance) to large enough value.  You 
can also get notification when this limit is exceeded by overriding the 
lengthLimitExceeded method (the default implementation of which is what 
drops the connection).

Jean-Paul



From darren at ontrenet.com  Fri Feb 19 11:11:37 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Fri, 19 Feb 2010 13:11:37 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
	<1266579203.2532.124.camel@kratos>
	<20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>
Message-ID: <1266603097.2532.134.camel@kratos>

Jean-Paul,
   Thank you for this tip! I will try it. Much appreciated.

Darren

On Fri, 2010-02-19 at 13:12 +0000, exarkun at twistedmatrix.com wrote:

> On 11:33 am, darren at ontrenet.com wrote:
> >Hi again,
> >   Ok, so now it seems the Int32StringReceiver does not receive
> >"stringReceived" events if the sent bytes
> >exceed a certain amount. If I send from the client, say 5000 bytes. It
> >receives it.
> >
> >But when i send 7376896 bytes at a time, the client indicates it wrote
> >the bytes, but there is not one
> >stringReceived callback on the server side of the protocol. No error or
> >exception. nothing.
> >Is this normal behavior?
> 
> Yes.  You've hit the arbitrary additional limit on the maximum length of 
> a single string that Int32StringReceiver will accept.  When this limit 
> is exceeded, the connection is dropped.  If you really want to accept 
> 7MB strings from your peer, set the MAX_LENGTH attribute of your 
> Int32StringReceiver subclass (or instance) to large enough value.  You 
> can also get notification when this limit is exceeded by overriding the 
> lengthLimitExceeded method (the default implementation of which is what 
> drops the connection).
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100219/fe88f17d/attachment.html>

From darren at ontrenet.com  Fri Feb 19 11:38:37 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Fri, 19 Feb 2010 13:38:37 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
	<1266579203.2532.124.camel@kratos>
	<20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>
Message-ID: <1266604717.2532.142.camel@kratos>

Hmmmm. I set self.MAX_LENGTH in my subclass
(self.MAX_LENGTH=73768960000) but still no callback happens to
strongReceived. Also, the connection is not lost.

Its like it doesn't notice it on the server, while the client writes
successfully. Still investigating.



On Fri, 2010-02-19 at 13:12 +0000, exarkun at twistedmatrix.com wrote:

> On 11:33 am, darren at ontrenet.com wrote:
> >Hi again,
> >   Ok, so now it seems the Int32StringReceiver does not receive
> >"stringReceived" events if the sent bytes
> >exceed a certain amount. If I send from the client, say 5000 bytes. It
> >receives it.
> >
> >But when i send 7376896 bytes at a time, the client indicates it wrote
> >the bytes, but there is not one
> >stringReceived callback on the server side of the protocol. No error or
> >exception. nothing.
> >Is this normal behavior?
> 
> Yes.  You've hit the arbitrary additional limit on the maximum length of 
> a single string that Int32StringReceiver will accept.  When this limit 
> is exceeded, the connection is dropped.  If you really want to accept 
> 7MB strings from your peer, set the MAX_LENGTH attribute of your 
> Int32StringReceiver subclass (or instance) to large enough value.  You 
> can also get notification when this limit is exceeded by overriding the 
> lengthLimitExceeded method (the default implementation of which is what 
> drops the connection).
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100219/c52f424f/attachment.html>

From darren at ontrenet.com  Fri Feb 19 11:42:14 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Fri, 19 Feb 2010 13:42:14 -0500
Subject: [Twisted-Python] Streaming File Transfer Protocol?
In-Reply-To: <1266604717.2532.142.camel@kratos>
References: <1265822579.2532.21.camel@kratos>
	<dc408fe51002101036t4e36ea94icce5e432719a402d@mail.gmail.com>
	<1265828094.2532.23.camel@kratos>
	<dc408fe51002101108g687762dbsbcfdca33555470ad@mail.gmail.com>
	<1265829799.2532.27.camel@kratos>
	<m2vde44xgr.fsf@valheru.db3l.homeip.net>
	<1265844849.2532.28.camel@kratos> <1266098018.2532.63.camel@kratos>
	<m2k4ug4nnh.fsf@valheru.db3l.homeip.net>
	<1266579203.2532.124.camel@kratos>
	<20100219131256.2792.389753556.divmod.xquotient.13@localhost.localdomain>
	<1266604717.2532.142.camel@kratos>
Message-ID: <1266604934.2532.144.camel@kratos>

Ignore me. There was a lag, but it worked. Thanks.

On Fri, 2010-02-19 at 13:38 -0500, Darren Govoni wrote:

> Hmmmm. I set self.MAX_LENGTH in my subclass
> (self.MAX_LENGTH=73768960000) but still no callback happens to
> strongReceived. Also, the connection is not lost.
> 
> Its like it doesn't notice it on the server, while the client writes
> successfully. Still investigating.
> 
> 
> 
> On Fri, 2010-02-19 at 13:12 +0000, exarkun at twistedmatrix.com wrote: 
> 
> > On 11:33 am, darren at ontrenet.com wrote:
> > >Hi again,
> > >   Ok, so now it seems the Int32StringReceiver does not receive
> > >"stringReceived" events if the sent bytes
> > >exceed a certain amount. If I send from the client, say 5000 bytes. It
> > >receives it.
> > >
> > >But when i send 7376896 bytes at a time, the client indicates it wrote
> > >the bytes, but there is not one
> > >stringReceived callback on the server side of the protocol. No error or
> > >exception. nothing.
> > >Is this normal behavior?
> > 
> > Yes.  You've hit the arbitrary additional limit on the maximum length of 
> > a single string that Int32StringReceiver will accept.  When this limit 
> > is exceeded, the connection is dropped.  If you really want to accept 
> > 7MB strings from your peer, set the MAX_LENGTH attribute of your 
> > Int32StringReceiver subclass (or instance) to large enough value.  You 
> > can also get notification when this limit is exceeded by overriding the 
> > lengthLimitExceeded method (the default implementation of which is what 
> > drops the connection).
> > 
> > Jean-Paul
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100219/17edb71a/attachment.html>

From matusis at yahoo.com  Fri Feb 19 15:52:34 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Fri, 19 Feb 2010 14:52:34 -0800
Subject: [Twisted-Python] debugging a memory leak
Message-ID: <01a701cab1b6$3a039d00$ae0ad700$@com>

I modified a tolerably leaking (about 40MB/day) Twisted server: when the new
code was pushed, the memory leak  became catastrophic (about 100MB/hr).
We could tolerate 40MB/day, but the new code needs to be debugged.
First, I reverted to the old version, that is leaking 40MB/day (The leak
rate is actually proportional to the number of new connections per second,
(which correlates with the CPU utilization of the process): if CPU as
measured by $top jumps to >90%, the leak can accelerate to 50MB/hr)
I took two steps to debug the leak:

1) Using guppy/heapy via manhole:

>>> hp = hpy()
>>> h = hp.heap()
>>> h
Partition of a set of 1157084 objects. Total size = 140911144 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0 785798  68 48463680  34  48463680  34 str
     1   7357   1 24660664  18  73124344  52 dict of service.TagSession
     2  11735   1 12298280   9  85422624  61 dict of
twisted.internet.base.DelayedCall
     3   7377   1  7731096   5  93153720  66 dict of
twisted.internet.tcp.Server
     4   7375   1  7729000   5 100882720  72 dict of protocols.TagProtocol
     5  30925   3  7174600   5 108057320  77 __builtin__.set
     6   9193   1  6373336   5 114430656  81 dict (no owner)
     7  15557   1  3396904   2 117827560  84 list
     8  44833   4  3227976   2 121055536  86 types.BuiltinFunctionType
     9  38142   3  3051360   2 124106896  88 types.MethodType
<328 more rows. Type e.g. '_.more' to view.>

Note that the total size of all objects is 140911144 bytes 
The 1st, 3d and 4th items in this list show the actual number of connected
clients. I wait for about 48 hrs, and then execute the same command, and I
see approximately the same Total size, of 130MB.
So the total size that Heapy sees via the manhole is stable, fluctuating
around 140MB. 

The problem is that the total RSS size of the process visible by the OS is
much larger, it is  871680KB = 851MB:
$ps -o pid,vsz,rss,sz,size -p 11236
  PID     VSZ           RSS       SZ           SZ
11236 1303180 871680 325795 1174388

It is this total RSS size that keeps leaking at 40MB per day. 

As far as I understand, this means that this is not the problem with purely
Python code, since Heapy shows that the total size of all Python objects is
more or less constant.
Is this a correct assumption?

2) So now I turn to valgrind. I am no expert in using valgrind, so what I
did was based only on general logic/rough guesses. 
Since I cannot run this under valgrind on a production machine due to
performance reasons, I recompile python on the staging machine:
./configure --enable-shared --without-pymalloc
--prefix=/nail/encap/python-2.6.4-valgrind
I then follow the instructions in
http://svn.python.org/projects/python/trunk/Misc/README.valgrind
Then I run twistd process like this:

valgrind  --tool=memcheck
--suppressions=/nail/sys/src/Python-2.6.4/Misc/valgrind-python.supp
--leak-check=full --log-file=/tmp/valgrind.log  /usr/local/bin/twistd
--no_save --reactor=epoll --pidfile=logs/tagserv.pid
--logfile=logs/tagserv.log --python=tagserv.py

The memory for the process shown by the OS is now 5x normal, and the
performance is about 5x worse, since it's running inside valgrind's
synthetic CPU.
Because this is done on the staging box where I cannot accurately reproduce
the real load, the memory leaks from simulated load seen by $ps -o rss are
pretty small, about 1 to 10MB.
Still, I am interested in finding out what they are.

Now I encounter the problems with my understanding of how to use valgrind.
This may not be the appropriate list for this, but perhaps someone could
recognize the problem.
When I start the server, about 240 lines is written to valgrind log file,
--log-file=/tmp/valgrind.log  
When I shut it down, it adds another 100 lines.
No matter what I do in between, it always results in the log file with
exactly 343 lines.
I can have server runs with a leak of 1MB, or with 10MB, but in the end, I
get pretty much the same log file. Moreover, when look for all lost memory
reports:
$grep lost valgrind.log.1  
 17,352 bytes in 31 blocks are possibly lost in loss record 49 of 62
 203,312 bytes in 478 blocks are possibly lost in loss record 57 of 62
    definitely lost: 0 bytes in 0 blocks.
      possibly lost: 220,664 bytes in 509 blocks.
 64 bytes in 2 blocks are definitely lost in loss record 12 of 63
 17,352 bytes in 31 blocks are possibly lost in loss record 50 of 63
 203,824 bytes in 479 blocks are possibly lost in loss record 58 of 63
    definitely lost: 64 bytes in 2 blocks.
      possibly lost: 221,176 bytes in 510 blocks.
 47 bytes in 1 blocks are definitely lost in loss record 8 of 63
 128 bytes in 4 blocks are definitely lost in loss record 16 of 63
 584 (104 direct, 480 indirect) bytes in 2 blocks are definitely lost in
loss record 26 of 63
 1,008 bytes in 6 blocks are definitely lost in loss record 31 of 63
 22,296 bytes in 41 blocks are possibly lost in loss record 50 of 63
 183,368 bytes in 381 blocks are possibly lost in loss record 59 of 63
    definitely lost: 1,287 bytes in 13 blocks.
    indirectly lost: 480 bytes in 20 blocks.
      possibly lost: 205,664 bytes in 422 blocks.

If I add up all those numbers, I get less than 1MB. How do I track down the
10MB leak?

Are there any alternative strategies in finding this leak?






From wthie at thiengineering.ch  Fri Feb 19 17:09:47 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Sat, 20 Feb 2010 01:09:47 +0100
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <01a701cab1b6$3a039d00$ae0ad700$@com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
Message-ID: <4B7F284B.70801@thiengineering.ch>

Hi Alec

...and they promised you that with a gc'ed language there will never be 
a memory problem again, you just plain forget about it.

I was stuck in the same position as you and after lots of probing the 
following attempt helped a lot to correct what was later proofed to be 
overly optimistic coding by holding on to objects for 
performance/practical reasons in other objects. Producing non collect 
able cycles in twisted is probably as easy as to forget about memory 
when you have Alzheimer.

Proofing and working on the problem was only possible on the production 
machine under real load situations. I went ahead and created a manhole 
service on the production server, allowing me to peek at the python 
object space without disturbing it too much. What I used as a tool was 
the code you find later on included.

After cleaning all the self produced cycles out our servers processes 
stabilized at roughly 280 to 320 MB per process and are now running 
stable for months with more than 20k logins per day and a usual time of 
connect per user on the average of 25 minutes playing games delivered by 
nevow/athena LivePages.

As I said before, all cycles I found in our SW were introduced by 
patterns like

def beforeRender(self, ctx):
     self.session = inevow.ISession(ctx)

The included code helps to identify the amount of objects being around. 
Although it's a primitive tool it shines the light where its needed and 
if you see certain object counts run away then you have at least 
identified the surrounding where the non collect able cycles are built.

Why didn't I use heapy/guppy and found out that way? I wasn't able to 
find the evidence for what I was suspecting with all the tools I tried 
(and boy I tried for WEEKS). Avid users of heapy will most probably 
disagree and tell me it would have been easy. But in a situation as this 
everything that works to move you out of that pothole you're in is the 
right thing to do.

HTH, Werner

exc = [
   "function",
   "type",
   "list",
   "dict",
   "tuple",
   "wrapper_descriptor",
   "module",
   "method_descriptor",
   "member_descriptor",
   "instancemethod",
   "builtin_function_or_method",
   "frame",
   "classmethod",
   "classmethod_descriptor",
   "_Environ",
   "MemoryError",
   "_Printer",
   "_Helper",
   "getset_descriptor",
   "weakreaf"
]

inc = [
   'myFirstSuspect',
   'mySecondSuspect'
]

prev = {}

def dumpObjects(delta=True, limit=0, include=inc, exclude=[]):
   global prev
   if include != [] and exclude != []:
     print 'cannot use include and exclude at the same time'
     return
   print 'working with:'
   print '   delta: ', delta
   print '   limit: ', limit
   print ' include: ', include
   print ' exclude: ', exclude
   objects = {}
   gc.collect()
   oo = gc.get_objects()
   for o in oo:
     if getattr(o, "__class__", None):
       name = o.__class__.__name__
       if ((exclude == [] and include == [])       or \
           (exclude != [] and name not in exclude) or \
           (include != [] and name in include)):
         objects[name] = objects.get(name, 0) + 1
##    if more:
##      print o
   pk = prev.keys()
   pk.sort()
   names = objects.keys()
   names.sort()
   for name in names:
     if limit == 0 or objects[name] > limit:
       if not prev.has_key(name):
         prev[name] = objects[name]
       dt = objects[name] - prev[name]
       if delta or dt != 0:
         print '%0.6d -- %0.6d -- ' % (dt, objects[name]),  name
       prev[name] = objects[name]

def getObjects(oname):
   """
   gets an object list with all the named objects out of the sea of
   gc'ed objects
   """
   olist = []
   objects = {}
   gc.collect()
   oo = gc.get_objects()
   for o in oo:
     if getattr(o, "__class__", None):
       name = o.__class__.__name__
       if (name == oname):
         olist.append(o)
   return olist

dumpObject = dumpobj.dumpObj

Alec Matusis wrote:
> I modified a tolerably leaking (about 40MB/day) Twisted server: when the new
> code was pushed, the memory leak  became catastrophic (about 100MB/hr).
> We could tolerate 40MB/day, but the new code needs to be debugged.
> First, I reverted to the old version, that is leaking 40MB/day (The leak
> rate is actually proportional to the number of new connections per second,
> (which correlates with the CPU utilization of the process): if CPU as
> measured by $top jumps to >90%, the leak can accelerate to 50MB/hr)
> I took two steps to debug the leak:
> 
> 1) Using guppy/heapy via manhole:
> 
>>>> hp = hpy()
>>>> h = hp.heap()
>>>> h
> Partition of a set of 1157084 objects. Total size = 140911144 bytes.
>  Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
>      0 785798  68 48463680  34  48463680  34 str
>      1   7357   1 24660664  18  73124344  52 dict of service.TagSession
>      2  11735   1 12298280   9  85422624  61 dict of
> twisted.internet.base.DelayedCall
>      3   7377   1  7731096   5  93153720  66 dict of
> twisted.internet.tcp.Server
>      4   7375   1  7729000   5 100882720  72 dict of protocols.TagProtocol
>      5  30925   3  7174600   5 108057320  77 __builtin__.set
>      6   9193   1  6373336   5 114430656  81 dict (no owner)
>      7  15557   1  3396904   2 117827560  84 list
>      8  44833   4  3227976   2 121055536  86 types.BuiltinFunctionType
>      9  38142   3  3051360   2 124106896  88 types.MethodType
> <328 more rows. Type e.g. '_.more' to view.>
> 
> Note that the total size of all objects is 140911144 bytes 
> The 1st, 3d and 4th items in this list show the actual number of connected
> clients. I wait for about 48 hrs, and then execute the same command, and I
> see approximately the same Total size, of 130MB.
> So the total size that Heapy sees via the manhole is stable, fluctuating
> around 140MB. 
> 
> The problem is that the total RSS size of the process visible by the OS is
> much larger, it is  871680KB = 851MB:
> $ps -o pid,vsz,rss,sz,size -p 11236
>   PID     VSZ           RSS       SZ           SZ
> 11236 1303180 871680 325795 1174388
> 
> It is this total RSS size that keeps leaking at 40MB per day. 
> 
> As far as I understand, this means that this is not the problem with purely
> Python code, since Heapy shows that the total size of all Python objects is
> more or less constant.
> Is this a correct assumption?
> 
> 2) So now I turn to valgrind. I am no expert in using valgrind, so what I
> did was based only on general logic/rough guesses. 
> Since I cannot run this under valgrind on a production machine due to
> performance reasons, I recompile python on the staging machine:
> ./configure --enable-shared --without-pymalloc
> --prefix=/nail/encap/python-2.6.4-valgrind
> I then follow the instructions in
> http://svn.python.org/projects/python/trunk/Misc/README.valgrind
> Then I run twistd process like this:
> 
> valgrind  --tool=memcheck
> --suppressions=/nail/sys/src/Python-2.6.4/Misc/valgrind-python.supp
> --leak-check=full --log-file=/tmp/valgrind.log  /usr/local/bin/twistd
> --no_save --reactor=epoll --pidfile=logs/tagserv.pid
> --logfile=logs/tagserv.log --python=tagserv.py
> 
> The memory for the process shown by the OS is now 5x normal, and the
> performance is about 5x worse, since it's running inside valgrind's
> synthetic CPU.
> Because this is done on the staging box where I cannot accurately reproduce
> the real load, the memory leaks from simulated load seen by $ps -o rss are
> pretty small, about 1 to 10MB.
> Still, I am interested in finding out what they are.
> 
> Now I encounter the problems with my understanding of how to use valgrind.
> This may not be the appropriate list for this, but perhaps someone could
> recognize the problem.
> When I start the server, about 240 lines is written to valgrind log file,
> --log-file=/tmp/valgrind.log  
> When I shut it down, it adds another 100 lines.
> No matter what I do in between, it always results in the log file with
> exactly 343 lines.
> I can have server runs with a leak of 1MB, or with 10MB, but in the end, I
> get pretty much the same log file. Moreover, when look for all lost memory
> reports:
> $grep lost valgrind.log.1  
>  17,352 bytes in 31 blocks are possibly lost in loss record 49 of 62
>  203,312 bytes in 478 blocks are possibly lost in loss record 57 of 62
>     definitely lost: 0 bytes in 0 blocks.
>       possibly lost: 220,664 bytes in 509 blocks.
>  64 bytes in 2 blocks are definitely lost in loss record 12 of 63
>  17,352 bytes in 31 blocks are possibly lost in loss record 50 of 63
>  203,824 bytes in 479 blocks are possibly lost in loss record 58 of 63
>     definitely lost: 64 bytes in 2 blocks.
>       possibly lost: 221,176 bytes in 510 blocks.
>  47 bytes in 1 blocks are definitely lost in loss record 8 of 63
>  128 bytes in 4 blocks are definitely lost in loss record 16 of 63
>  584 (104 direct, 480 indirect) bytes in 2 blocks are definitely lost in
> loss record 26 of 63
>  1,008 bytes in 6 blocks are definitely lost in loss record 31 of 63
>  22,296 bytes in 41 blocks are possibly lost in loss record 50 of 63
>  183,368 bytes in 381 blocks are possibly lost in loss record 59 of 63
>     definitely lost: 1,287 bytes in 13 blocks.
>     indirectly lost: 480 bytes in 20 blocks.
>       possibly lost: 205,664 bytes in 422 blocks.
> 
> If I add up all those numbers, I get less than 1MB. How do I track down the
> 10MB leak?
> 
> Are there any alternative strategies in finding this leak?
> 
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From matusis at yahoo.com  Fri Feb 19 23:00:48 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Fri, 19 Feb 2010 22:00:48 -0800
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <4B7F284B.70801@thiengineering.ch>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
	<4B7F284B.70801@thiengineering.ch>
Message-ID: <028101cab1f2$0d228ad0$2767a070$@com>

Thank you Werner!

I am playing with your object counter. But before I can interpret the
results, I have to ask a possibly stupid question.
Can someone explain to me this behavior of python 2.6 on x86 linux 2.6.24:

1) start interpreter
Check the size of the interpreter process:
$ps -orss -p24316
  RSS
 4212

Size is 4MB, fine.

2) Allocate a huge chunk of memory:
>>> x=range(1,10000000)
Check the size of the interpreter process:
$ps -orss -p24316
  RSS
 322460

The RSS memory grew by 322460KB =314MB, as I expected

3) Delete this object:
>>> del x
Check the size of the interpreter process:
$ps -orss -p24316
  RSS
 244332

So, the memory is far off its original value! It's up by nearly 240MB, and
it never gets released. Why is that?

4) 
>>> import gc
>>> gc.collect()
0
$ps -orss -p24316
  RSS
244404
Not much luck here!


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Werner Thie
> Sent: Friday, February 19, 2010 4:10 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] debugging a memory leak
> 
> Hi Alec
> 
> ...and they promised you that with a gc'ed language there will never be
> a memory problem again, you just plain forget about it.
> 
> I was stuck in the same position as you and after lots of probing the
> following attempt helped a lot to correct what was later proofed to be
> overly optimistic coding by holding on to objects for
> performance/practical reasons in other objects. Producing non collect
> able cycles in twisted is probably as easy as to forget about memory
> when you have Alzheimer.
> 
> Proofing and working on the problem was only possible on the production
> machine under real load situations. I went ahead and created a manhole
> service on the production server, allowing me to peek at the python
> object space without disturbing it too much. What I used as a tool was
> the code you find later on included.
> 
> After cleaning all the self produced cycles out our servers processes
> stabilized at roughly 280 to 320 MB per process and are now running
> stable for months with more than 20k logins per day and a usual time of
> connect per user on the average of 25 minutes playing games delivered by
> nevow/athena LivePages.
> 
> As I said before, all cycles I found in our SW were introduced by
> patterns like
> 
> def beforeRender(self, ctx):
>      self.session = inevow.ISession(ctx)
> 
> The included code helps to identify the amount of objects being around.
> Although it's a primitive tool it shines the light where its needed and
> if you see certain object counts run away then you have at least
> identified the surrounding where the non collect able cycles are built.
> 
> Why didn't I use heapy/guppy and found out that way? I wasn't able to
> find the evidence for what I was suspecting with all the tools I tried
> (and boy I tried for WEEKS). Avid users of heapy will most probably
> disagree and tell me it would have been easy. But in a situation as this
> everything that works to move you out of that pothole you're in is the
> right thing to do.
> 
> HTH, Werner
> 
> exc = [
>    "function",
>    "type",
>    "list",
>    "dict",
>    "tuple",
>    "wrapper_descriptor",
>    "module",
>    "method_descriptor",
>    "member_descriptor",
>    "instancemethod",
>    "builtin_function_or_method",
>    "frame",
>    "classmethod",
>    "classmethod_descriptor",
>    "_Environ",
>    "MemoryError",
>    "_Printer",
>    "_Helper",
>    "getset_descriptor",
>    "weakreaf"
> ]
> 
> inc = [
>    'myFirstSuspect',
>    'mySecondSuspect'
> ]
> 
> prev = {}
> 
> def dumpObjects(delta=True, limit=0, include=inc, exclude=[]):
>    global prev
>    if include != [] and exclude != []:
>      print 'cannot use include and exclude at the same time'
>      return
>    print 'working with:'
>    print '   delta: ', delta
>    print '   limit: ', limit
>    print ' include: ', include
>    print ' exclude: ', exclude
>    objects = {}
>    gc.collect()
>    oo = gc.get_objects()
>    for o in oo:
>      if getattr(o, "__class__", None):
>        name = o.__class__.__name__
>        if ((exclude == [] and include == [])       or \
>            (exclude != [] and name not in exclude) or \
>            (include != [] and name in include)):
>          objects[name] = objects.get(name, 0) + 1
> ##    if more:
> ##      print o
>    pk = prev.keys()
>    pk.sort()
>    names = objects.keys()
>    names.sort()
>    for name in names:
>      if limit == 0 or objects[name] > limit:
>        if not prev.has_key(name):
>          prev[name] = objects[name]
>        dt = objects[name] - prev[name]
>        if delta or dt != 0:
>          print '%0.6d -- %0.6d -- ' % (dt, objects[name]),  name
>        prev[name] = objects[name]
> 
> def getObjects(oname):
>    """
>    gets an object list with all the named objects out of the sea of
>    gc'ed objects
>    """
>    olist = []
>    objects = {}
>    gc.collect()
>    oo = gc.get_objects()
>    for o in oo:
>      if getattr(o, "__class__", None):
>        name = o.__class__.__name__
>        if (name == oname):
>          olist.append(o)
>    return olist
> 
> dumpObject = dumpobj.dumpObj
> 
> Alec Matusis wrote:
> > I modified a tolerably leaking (about 40MB/day) Twisted server: when the
> new
> > code was pushed, the memory leak  became catastrophic (about
> 100MB/hr).
> > We could tolerate 40MB/day, but the new code needs to be debugged.
> > First, I reverted to the old version, that is leaking 40MB/day (The leak
> > rate is actually proportional to the number of new connections per
second,
> > (which correlates with the CPU utilization of the process): if CPU as
> > measured by $top jumps to >90%, the leak can accelerate to 50MB/hr)
> > I took two steps to debug the leak:
> >
> > 1) Using guppy/heapy via manhole:
> >
> >>>> hp = hpy()
> >>>> h = hp.heap()
> >>>> h
> > Partition of a set of 1157084 objects. Total size = 140911144 bytes.
> >  Index  Count   %     Size   % Cumulative  % Kind (class / dict of
class)
> >      0 785798  68 48463680  34  48463680  34 str
> >      1   7357   1 24660664  18  73124344  52 dict of service.TagSession
> >      2  11735   1 12298280   9  85422624  61 dict of
> > twisted.internet.base.DelayedCall
> >      3   7377   1  7731096   5  93153720  66 dict of
> > twisted.internet.tcp.Server
> >      4   7375   1  7729000   5 100882720  72 dict of
protocols.TagProtocol
> >      5  30925   3  7174600   5 108057320  77 __builtin__.set
> >      6   9193   1  6373336   5 114430656  81 dict (no owner)
> >      7  15557   1  3396904   2 117827560  84 list
> >      8  44833   4  3227976   2 121055536  86 types.BuiltinFunctionType
> >      9  38142   3  3051360   2 124106896  88 types.MethodType
> > <328 more rows. Type e.g. '_.more' to view.>
> >
> > Note that the total size of all objects is 140911144 bytes
> > The 1st, 3d and 4th items in this list show the actual number of
connected
> > clients. I wait for about 48 hrs, and then execute the same command, and
I
> > see approximately the same Total size, of 130MB.
> > So the total size that Heapy sees via the manhole is stable, fluctuating
> > around 140MB.
> >
> > The problem is that the total RSS size of the process visible by the OS
is
> > much larger, it is  871680KB = 851MB:
> > $ps -o pid,vsz,rss,sz,size -p 11236
> >   PID     VSZ           RSS       SZ           SZ
> > 11236 1303180 871680 325795 1174388
> >
> > It is this total RSS size that keeps leaking at 40MB per day.
> >
> > As far as I understand, this means that this is not the problem with
purely
> > Python code, since Heapy shows that the total size of all Python objects
is
> > more or less constant.
> > Is this a correct assumption?
> >
> > 2) So now I turn to valgrind. I am no expert in using valgrind, so what
I
> > did was based only on general logic/rough guesses.
> > Since I cannot run this under valgrind on a production machine due to
> > performance reasons, I recompile python on the staging machine:
> > ./configure --enable-shared --without-pymalloc
> > --prefix=/nail/encap/python-2.6.4-valgrind
> > I then follow the instructions in
> > http://svn.python.org/projects/python/trunk/Misc/README.valgrind
> > Then I run twistd process like this:
> >
> > valgrind  --tool=memcheck
> > --suppressions=/nail/sys/src/Python-2.6.4/Misc/valgrind-python.supp
> > --leak-check=full --log-file=/tmp/valgrind.log  /usr/local/bin/twistd
> > --no_save --reactor=epoll --pidfile=logs/tagserv.pid
> > --logfile=logs/tagserv.log --python=tagserv.py
> >
> > The memory for the process shown by the OS is now 5x normal, and the
> > performance is about 5x worse, since it's running inside valgrind's
> > synthetic CPU.
> > Because this is done on the staging box where I cannot accurately
> reproduce
> > the real load, the memory leaks from simulated load seen by $ps -o rss
are
> > pretty small, about 1 to 10MB.
> > Still, I am interested in finding out what they are.
> >
> > Now I encounter the problems with my understanding of how to use
> valgrind.
> > This may not be the appropriate list for this, but perhaps someone could
> > recognize the problem.
> > When I start the server, about 240 lines is written to valgrind log
file,
> > --log-file=/tmp/valgrind.log
> > When I shut it down, it adds another 100 lines.
> > No matter what I do in between, it always results in the log file with
> > exactly 343 lines.
> > I can have server runs with a leak of 1MB, or with 10MB, but in the end,
I
> > get pretty much the same log file. Moreover, when look for all lost
memory
> > reports:
> > $grep lost valgrind.log.1
> >  17,352 bytes in 31 blocks are possibly lost in loss record 49 of 62
> >  203,312 bytes in 478 blocks are possibly lost in loss record 57 of 62
> >     definitely lost: 0 bytes in 0 blocks.
> >       possibly lost: 220,664 bytes in 509 blocks.
> >  64 bytes in 2 blocks are definitely lost in loss record 12 of 63
> >  17,352 bytes in 31 blocks are possibly lost in loss record 50 of 63
> >  203,824 bytes in 479 blocks are possibly lost in loss record 58 of 63
> >     definitely lost: 64 bytes in 2 blocks.
> >       possibly lost: 221,176 bytes in 510 blocks.
> >  47 bytes in 1 blocks are definitely lost in loss record 8 of 63
> >  128 bytes in 4 blocks are definitely lost in loss record 16 of 63
> >  584 (104 direct, 480 indirect) bytes in 2 blocks are definitely lost in
> > loss record 26 of 63
> >  1,008 bytes in 6 blocks are definitely lost in loss record 31 of 63
> >  22,296 bytes in 41 blocks are possibly lost in loss record 50 of 63
> >  183,368 bytes in 381 blocks are possibly lost in loss record 59 of 63
> >     definitely lost: 1,287 bytes in 13 blocks.
> >     indirectly lost: 480 bytes in 20 blocks.
> >       possibly lost: 205,664 bytes in 422 blocks.
> >
> > If I add up all those numbers, I get less than 1MB. How do I track down
the
> > 10MB leak?
> >
> > Are there any alternative strategies in finding this leak?
> >
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From lasizoillo at gmail.com  Fri Feb 19 23:56:44 2010
From: lasizoillo at gmail.com (lasizoillo)
Date: Sat, 20 Feb 2010 07:56:44 +0100
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <028101cab1f2$0d228ad0$2767a070$@com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
	<4B7F284B.70801@thiengineering.ch>
	<028101cab1f2$0d228ad0$2767a070$@com>
Message-ID: <49414f571002192256w51ab2cf0k8ade9e323e9b47ee@mail.gmail.com>

2010/2/20 Alec Matusis <matusis at yahoo.com>:
> Thank you Werner!
>
> I am playing with your object counter. But before I can interpret the
> results, I have to ask a possibly stupid question.
> Can someone explain to me this behavior of python 2.6 on x86 linux 2.6.24:
>
> 1) start interpreter
> Check the size of the interpreter process:
> $ps -orss -p24316
>  RSS
>  4212
>
> Size is 4MB, fine.
>
> 2) Allocate a huge chunk of memory:
>>>> x=range(1,10000000)
> Check the size of the interpreter process:
> $ps -orss -p24316
>  RSS
>  322460
>
> The RSS memory grew by 322460KB =314MB, as I expected
>
> 3) Delete this object:
>>>> del x
> Check the size of the interpreter process:
> $ps -orss -p24316
>  RSS
>  244332
>
> So, the memory is far off its original value! It's up by nearly 240MB, and
> it never gets released. Why is that?
>
> 4)
>>>> import gc
>>>> gc.collect()
> 0
> $ps -orss -p24316
>  RSS
> 244404
> Not much luck here!
>
>

Repeat steps 2 to 4. No more memory is used. Python don't leaks more memory.

Repeat the steps reserving memory like this:
x = [0] * 10000000

The memory is cleaned. The problem is in the virtual machine use of integers.

Excuse my poor explanation. My english is very bad,

Reggards,

Javi



From exarkun at twistedmatrix.com  Sat Feb 20 22:05:15 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 21 Feb 2010 05:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1266728715.05.1525512846@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100221/1cdc9c9f/attachment-0001.html>

From einar.twisted at norsk-esport.no  Sun Feb 21 04:56:38 2010
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?Einar_S=2E_Ids=F8?=)
Date: Sun, 21 Feb 2010 12:56:38 +0100
Subject: [Twisted-Python] Need help for structured application
	development
In-Reply-To: <4B7E1768.8030608@densedata.com>
References: <e97d8e3b1002150954s727640a7l587ac9f450beb4e2@mail.gmail.com>
	<72236ba91002160257x68c623f6n5c8bc0ff1310e66d@mail.gmail.com>
	<e97d8e3b1002171014o3b368a49ree4ccf9c178d2a47@mail.gmail.com>
	<4B7D1811.1070204@densedata.com>
	<e97d8e3b1002181441s1b07fc4dsbc6e151f41c0d0aa@mail.gmail.com>
	<4B7E1768.8030608@densedata.com>
Message-ID: <e97d8e3b1002210356k422e9feag3ecc5b9ac435e227@mail.gmail.com>

On Fri, Feb 19, 2010 at 5:45 AM, Johann Borck
<johann.borck at densedata.com> wrote:
> I see. So if I get these requirements right you have 5-10 services with
> 1-30 instances of each, with following properties relevant to the task
> at hand:
>
> 1. those pollable by your existing program.
> 2. those incompatible with your existing program.
> 3. those that do not stream additional data.
> 4. those that do stream additional data.
>
> since sets  (1 and 2) and (3 and 4) are distinct, the combinations
> (1,3),(1,4),(2,3),(2,4) are possible.
>
> (1,3) the easy one, obviously you just need an object that polls the
> service using your program in intervals specific to the service.
> (1,4) Question: will the data you're interested in be collected by your
> existing program or by twisted? In the former case, it's basically the
> same as (1,3), in the latter you'll have to implement a protocol.
> (2,3) for these you'll need to implement a protocol class.
> (2,4) here you'll have to implement one or two protocols, depending on
> how the service is implemented.
>
> Is the above about correct? I think it would be a good idea to have an
> object OB that keeps references to all objects that gather data from the
> services, grouped by the type of service they're responsible for
> (defaultdict(list or dict) comes to mind). And then you'll probably
> either want factories that take care of handing newly created protocol
> instances over to OB or some instances (one or two per service in sets
> (2,3,4) ) of a multipurpose factory that can be initialized with the
> respective protocol and the information how to pass the created protocol
> over to OB, maybe  just a simple method that is able to distinguish the
> protocols by the interfaces they implement.
>
> One pitfall might be your polling program in case you're using
> t.i.u.getProcessOutput. It (t.i.u...) provides an asynchronous
> interface, so the worst that can happen is a stray process that doesn't
> return, but you still might want to consider implementing a
> ProcessProtocol
> (http://twistedmatrix.com/documents/current/core/howto/process.html)
> with a reasonable timeout, to be able to kill the spawned process in
> case it doesn't terminate. Thinking about it, it's the better solution
> anyway, because process protocols are just another type of protocol in
> twisted, and can be integrated consistently with the rest of your app.
>
> Another utility you might want is t.i.task.LoopingCall, for obvious
> reasons. Given your requirements something along these lines would be my
> approach, although I'd probably reimplement the polling thingy in
> twisted if it's not too complex :)
>
> hope that makes sense,
> Johann

Johann,

Thank you very much for your detailed response. It is greatly appreciated.

I think what you describe makes sense, and I hope I understand what
you mean and how I can implement it: I need to create a "suberobject"
OB which references all the poller-objects. I need to create one
object per detected server instance, which takes care of creating a
timed spawning of the external poller-process, and passing it along to
OB. For those servers that require streamlisteners, I really only need
one factory per server type, with the ablity to match streamed data
with polled data via the poller-object. Is this somewhat on the right
track?

I absolutely hate creating lots of code just to find that it was done
in the "wrong" way, structurally speaking, and that it requires a lot
of work to rewrite in the "correct way" to allow for further expansion
of the application. Your answers are very helpful in letting me avoid
spaghetti-code.

Cheers,
Einar



From vlad.shevchenko at gmail.com  Sun Feb 21 10:04:53 2010
From: vlad.shevchenko at gmail.com (Vlad Shevchenko)
Date: Sun, 21 Feb 2010 19:04:53 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <20100216233209.GA20490@thorne.id.au>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
	<572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>
	<20100216233209.GA20490@thorne.id.au>
Message-ID: <572f045e1002210904iea4d53al1b0edd62ca1f5bd6@mail.gmail.com>

Thanks a lot, Stephen.

AMP probably is what I looking for. Now I can handle a much more
clients (2 times more without significantly increasing response time).
Server can also handle 3 times more clients without any errors, but
response time grow up. I check for netstat and find out Recv-Q about
1706013 on client-side of AMP and Send-Q about 642288 on AMP
server-side. Is this meant:
    - OS needs tuning (ulimit or ifconfig)
    - or Twisted/Python can't handle so much amp-connections?

CPU utilization < 10%, free memory about 500M from 1.7G.

I'd appreciate any help.


On Wed, Feb 17, 2010 at 1:32 AM, Stephen Thorne <stephen at thorne.id.au> wrote:
>
> Vlad,
>
> Have you considered using twisted.protocols.amp ?
>
> --
> Regards,
> Stephen Thorne
> Development Engineer
> Netbox Blue
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



--
WBR, Vlad Shevchenko



From johann.borck at densedata.com  Sun Feb 21 11:18:22 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Sun, 21 Feb 2010 18:18:22 +0000
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <572f045e1002210904iea4d53al1b0edd62ca1f5bd6@mail.gmail.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>	<572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>	<20100216233209.GA20490@thorne.id.au>
	<572f045e1002210904iea4d53al1b0edd62ca1f5bd6@mail.gmail.com>
Message-ID: <4B8178EE.3060805@densedata.com>

Vlad Shevchenko wrote:
> Thanks a lot, Stephen.
>
> AMP probably is what I looking for. Now I can handle a much more
> clients (2 times more without significantly increasing response time).
> Server can also handle 3 times more clients without any errors, but
> response time grow up. I check for netstat and find out Recv-Q about
> 1706013 on client-side of AMP and Send-Q about 642288 on AMP
> server-side. Is this meant:
>     - OS needs tuning (ulimit or ifconfig)
>     - or Twisted/Python can't handle so much amp-connections?
>
>   
How many connections are there? Are the queues that big for all of them?
> CPU utilization < 10%, free memory about 500M from 1.7G.
>
>   
Is this the total system CPU load (how many cores/CPUs)?

Johann




From vlad.shevchenko at gmail.com  Sun Feb 21 11:26:55 2010
From: vlad.shevchenko at gmail.com (Vlad Shevchenko)
Date: Sun, 21 Feb 2010 20:26:55 +0200
Subject: [Twisted-Python] fast high load protocol
In-Reply-To: <4B8178EE.3060805@densedata.com>
References: <572f045e1002161141x7d0f3412t5e6ee67d486309@mail.gmail.com>
	<572f045e1002161146y4234b1aen946ff3743badc6a0@mail.gmail.com>
	<7F4D8CA3-7F37-4CE4-BEC6-0A4D10C6CB41@bubblehouse.org>
	<572f045e1002161525m7bd617bauee8b001f18c55bdc@mail.gmail.com>
	<20100216233209.GA20490@thorne.id.au>
	<572f045e1002210904iea4d53al1b0edd62ca1f5bd6@mail.gmail.com>
	<4B8178EE.3060805@densedata.com>
Message-ID: <572f045e1002211026r2b4a219cie2ddc1d03b264f10@mail.gmail.com>

Hi, Johann

Few words about load script: each "client" is a thread, which wait
from 7 to 15 seconds and then make request to nginx, nginx proxy
requests to api-server. On every request api-server makes 3 callRemote
to memory-db. Delay between creating clients - 0.1 sec.

Currently I use 1 amp-connection for api<=>memory-db. Response time dependency:
clients < 1500 = api-response < 1s
1500 < clients < 3000 = api-response < 14s

Recv-q/Send-q appears on 1500 clients line.

API-server utilization on 3K clients
=========================

Recv-Q ~ 750000...1000000

# top
top - 17:38:47 up 222 days, 23:29,  2 users,  load average: 1.05, 0.77, 0.34
Tasks:  45 total,   3 running,  42 sleeping,   0 stopped,   0 zombie
Cpu(s): 37.1%us,  2.6%sy,  0.0%ni,  0.0%id,  0.0%wa,  0.0%hi,  0.0%si, 60.3%st
Mem:   1747764k total,   574376k used,  1173388k free,   157632k buffers
Swap:   917496k total,        0k used,   917496k free,   273236k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 2492 root      25   0  151m  46m 3568 R 39.7  2.7   2:19.66 python


Memory-db-server utilization on 3K clients
==============================
Send-Q ~ 400000...450000

# top
top - 17:38:08 up 16 days, 22:07,  4 users,  load average: 16.59, 9.40, 4.00
Tasks:  65 total,   6 running,  56 sleeping,   0 stopped,   3 zombie
Cpu(s): 37.6%us,  5.6%sy,  0.0%ni,  0.0%id,  0.0%wa,  0.0%hi,  0.3%si, 56.4%st
Mem:   1747764k total,  1308636k used,   439128k free,   281048k buffers
Swap:   917496k total,        0k used,   917496k free,   616676k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
31804 root      15   0 56596  51m 2820 R 25.7  3.0  16:44.27 python
<----- memory-db
30788 root      15   0 1622m 164m 2648 S  6.9  9.6   0:31.89 python
<----- load script
 1449 root      25   0     0    0    0 Z  4.3  0.0   0:00.35 python <defunct>

I tried tests with 30/50/100 amp connections (with round-robin
algorithm of choosing conn). Thats partially solve the problem: server
can keeps response time 2-4s, but max number of clients going down
with more amp connections. With 100 amp connections load script got
270 errors when achieve 2.7K clients (nginx reported about dropped
connections because of timeout, my nginx proxy timeout settings 120
sec). Recv-Q still exists on most from 100 connections, but
proportionally smaller.
Note about environment: Amazon EC2, both servers are small instances --
1.7 GB of memory, 1 EC2 Compute Unit (1 virtual core with 1 EC2
Compute Unit), 32-bit platform
One EC2 Compute Unit provides the equivalent CPU capacity of a 1.0-1.2
GHz 2007 Opteron or 2007 Xeon processor
OS - Ubuntu Hardy

On Sun, Feb 21, 2010 at 8:18 PM, Johann Borck
<johann.borck at densedata.com> wrote:
> Vlad Shevchenko wrote:
>> Thanks a lot, Stephen.
>>
>> AMP probably is what I looking for. Now I can handle a much more
>> clients (2 times more without significantly increasing response time).
>> Server can also handle 3 times more clients without any errors, but
>> response time grow up. I check for netstat and find out Recv-Q about
>> 1706013 on client-side of AMP and Send-Q about 642288 on AMP
>> server-side. Is this meant:
>>     - OS needs tuning (ulimit or ifconfig)
>>     - or Twisted/Python can't handle so much amp-connections?
>>
>>
> How many connections are there? Are the queues that big for all of them?
>> CPU utilization < 10%, free memory about 500M from 1.7G.
>>
>>
> Is this the total system CPU load (how many cores/CPUs)?
>
> Johann
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
WBR, Vlad Shevchenko



From darren at ontrenet.com  Sun Feb 21 11:43:21 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sun, 21 Feb 2010 13:43:21 -0500
Subject: [Twisted-Python] multiprocessing capability?
Message-ID: <1266777801.2532.176.camel@kratos>

Hi,
  I looked at the source for the threads module and wondered if the
current Twisted supports Python's (2.6) multiprocessing threading?
If not, is there a stable package somewhere that patches Twisted to
support this? I saw one from last summer but not sure if its stable.

Thanks!
Darren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100221/e18895d0/attachment.html>

From drew.smathers at gmail.com  Sun Feb 21 13:45:55 2010
From: drew.smathers at gmail.com (Drew Smathers)
Date: Sun, 21 Feb 2010 15:45:55 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <1266777801.2532.176.camel@kratos>
References: <1266777801.2532.176.camel@kratos>
Message-ID: <368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>

On Sun, Feb 21, 2010 at 1:43 PM, Darren Govoni <darren at ontrenet.com> wrote:

>  Hi,
>   I looked at the source for the threads module and wondered if the current
> Twisted supports Python's (2.6) multiprocessing threading?
> If not, is there a stable package somewhere that patches Twisted to support
> this? I saw one from last summer but not sure if its stable.
>
>
Hi Darren,
I don't think there's any explicit support for multiprocessing, although I
have seen some people using multiprocessing to run twisted in multiple
processes.  This doesn't answer your question, but you might be interested
in ampoule as this provides a nice process protocol implemented on twisted
or specifically twisted.protocols.amp:

https://launchpad.net/ampoule

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100221/d3d7d286/attachment.html>

From ssoni at nextdigital.com  Sun Feb 21 15:59:28 2010
From: ssoni at nextdigital.com (Sury Soni)
Date: Mon, 22 Feb 2010 09:59:28 +1100
Subject: [Twisted-Python] Nevow question
In-Reply-To: <20100219111137.GE16399@murdoc>
References: <1BE49492956ECA42BEB0D78F67665E1F01395DCE@exchange.wdg>
	<20100219111137.GE16399@murdoc>
Message-ID: <1BE49492956ECA42BEB0D78F67665E1F01395ED8@exchange.wdg>

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Marco Giusti
> Sent: Friday, 19 February 2010 10:12 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] Nevow question

> 

> On Fri, Feb 19, 2010 at 03:17:07PM +1100, Sury Soni wrote:

> > Hi,

> > 

> > How do we disable traceback on Nevow production site?

> > 

> > Right now, by default, any nevow site will print full length of 

> > traceback on web browser if there is some exception within the 

> > application.

> [cut]

> 

> something like this?

> 

> http://divmod.org/trac/wiki/DivmodNevow/ErrorHandling

 

Thank you Marco, this is exactly, what I was looking for.

 

The example mentions ticket, http://divmod.org/trac/ticket/526

 

…

…

site = appserver.NevowSite(root)

# You should be able to do this instead of in locateChild, but there seems to be a bug

# http://divmod.org/trac/ticket/526

#site.remember(The404Page(), inevow.ICanHandleNotFound)

#site.remember(The500Page(), inevow.ICanHandleException)

…

…

 

There was a last post on above ticket 4 years ago. And this ticket is not closed. But seems to be working fine.

 

I am using:

 

twistd 8.2.0

nevow 0.9.33

python 2.6.3

 

Any potential bug should I be worried about, if I use site.remember stuff in production?

 

Regards,

 

Surya

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100222/a01da3b8/attachment.html>

From alexandre at quessy.net  Sun Feb 21 18:00:49 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Sun, 21 Feb 2010 20:00:49 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
Message-ID: <72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>

Hello everyone,
I have done something similar to this, but I used the children IO
stream to control them. Maybe I should have done that using some
higher level protocol, such as AMP or PB.
(I think AMP is more robust than PB, though)
The project that uses the children IO and process protocols is Lunch.
See http://svn.sat.qc.ca/trac/lunch

a

2010/2/21 Drew Smathers <drew.smathers at gmail.com>:
> On Sun, Feb 21, 2010 at 1:43 PM, Darren Govoni <darren at ontrenet.com> wrote:
>>
>> Hi,
>>   I looked at the source for the threads module and wondered if the
>> current Twisted supports Python's (2.6) multiprocessing threading?
>> If not, is there a stable package somewhere that patches Twisted to
>> support this? I saw one from last summer but not sure if its stable.
>>
>
> Hi Darren,
> I don't think there's any explicit support for multiprocessing, although I
> have seen some people using multiprocessing to run twisted in multiple
> processes.  This doesn't answer your question, but you might be interested
> in ampoule as this provides a nice process protocol implemented on twisted
> or specifically twisted.protocols.amp:
> https://launchpad.net/ampoule
> -Drew
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/



From donal.mcmullan at gmail.com  Sun Feb 21 19:10:05 2010
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Mon, 22 Feb 2010 15:10:05 +1300
Subject: [Twisted-Python] Many connections and TIME_WAIT
In-Reply-To: <20100127130516.1898.1655832039.divmod.xquotient.807@localhost.localdomain>
References: <634095dc1001262050t5b5e54eayd2de93afa013f3b2@mail.gmail.com>
	<20100127130516.1898.1655832039.divmod.xquotient.807@localhost.localdomain>
Message-ID: <634095dc1002211810m2594af22l849e98e74911e129@mail.gmail.com>

I've been meaning to update this for a while - it turned out to be caused by
a bug in my code.

X-o

Sorry guys - & thanks for helping me work it out.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100222/652aaf8e/attachment.html>

From jml at mumak.net  Sun Feb 21 19:50:31 2010
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 21 Feb 2010 21:50:31 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
Message-ID: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>

Live from PyCon Atlanta, I'm pleased to herald the approaching
footsteps of the 10.0 release.

Tarballs for the first Twisted 10.0.0 pre-release are now available at:
  http://people.canonical.com/~jml/Twisted/

This release is the first release ever with the new NEWS building
system, which turns out to be utterly fantastic.

We're also using this release to actually hammer out a release
process. You can find the draft at:
  http://twistedmatrix.com/trac/wiki/ReleaseProcess

Please feel free to update it with questions, thoughts, corrections and advice.

Thanks,
jml



From jbauer at rubic.com  Sun Feb 21 19:57:10 2010
From: jbauer at rubic.com (Jeff Bauer)
Date: Sun, 21 Feb 2010 20:57:10 -0600
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
Message-ID: <4B81F286.4060902@rubic.com>

I'm not opposed to Jinja2 as a templating engine, though
Django would need to be the default:

http://jinja.pocoo.org/2/

Jeff Bauer
Rubicon, Inc.
615.297.3511
615.301.6533 fax

On 02/21/2010 08:50 PM, Jonathan Lange wrote:
> Live from PyCon Atlanta, I'm pleased to herald the approaching
> footsteps of the 10.0 release.
>
> Tarballs for the first Twisted 10.0.0 pre-release are now available at:
>    http://people.canonical.com/~jml/Twisted/
>
> This release is the first release ever with the new NEWS building
> system, which turns out to be utterly fantastic.
>
> We're also using this release to actually hammer out a release
> process. You can find the draft at:
>    http://twistedmatrix.com/trac/wiki/ReleaseProcess
>
> Please feel free to update it with questions, thoughts, corrections and advice.
>
> Thanks,
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Sun Feb 21 20:04:34 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 21 Feb 2010 22:04:34 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <4B81F286.4060902@rubic.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<4B81F286.4060902@rubic.com>
Message-ID: <1346EB23-09A9-4024-880A-E5EC32152862@twistedmatrix.com>

Hi Jeff,

On Feb 21, 2010, at 9:57 PM, Jeff Bauer wrote:

> I'm not opposed to Jinja2 as a templating engine, though
> Django would need to be the default:

This reply appears to have nothing to do with the release announcement.  Wrong list, maybe?

> http://jinja.pocoo.org/2/
> 
> Jeff Bauer
> Rubicon, Inc.
> 615.297.3511
> 615.301.6533 fax
> 
> On 02/21/2010 08:50 PM, Jonathan Lange wrote:
>> Live from PyCon Atlanta, I'm pleased to herald the approaching
>> footsteps of the 10.0 release.
...

-glyph


From jbauer at rubic.com  Sun Feb 21 20:12:39 2010
From: jbauer at rubic.com (Jeff Bauer)
Date: Sun, 21 Feb 2010 21:12:39 -0600
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <1346EB23-09A9-4024-880A-E5EC32152862@twistedmatrix.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>	<4B81F286.4060902@rubic.com>
	<1346EB23-09A9-4024-880A-E5EC32152862@twistedmatrix.com>
Message-ID: <4B81F627.1010904@rubic.com>

Sorry, wrong list (slippery fingers).  Congrats on 10.0, BTW!

Jeff Bauer
Rubicon, Inc.



From glyph at twistedmatrix.com  Sun Feb 21 20:15:40 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 21 Feb 2010 22:15:40 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
Message-ID: <CDBCFEB7-C0D0-46B4-946C-00FE4A28B013@twistedmatrix.com>


On Feb 21, 2010, at 9:50 PM, Jonathan Lange wrote:

> Live from PyCon Atlanta, I'm pleased to herald the approaching
> footsteps of the 10.0 release.

Woo!

> Tarballs for the first Twisted 10.0.0 pre-release are now available at:
>  http://people.canonical.com/~jml/Twisted/

WOO!

> This release is the first release ever with the new NEWS building
> system, which turns out to be utterly fantastic.

WOOOOOOO!

> We're also using this release to actually hammer out a release
> process. You can find the draft at:
>  http://twistedmatrix.com/trac/wiki/ReleaseProcess

YYYYYYYEEEEEEAAAAAAAAAAHHHHHHHHHHH!!!!

> Please feel free to update it with questions, thoughts, corrections and advice.

Can you make "a public website" a bit more specific?  What kind of public website?  (I realize that the answer is probably "any arbitrary public website, not twistedmatrix.com", but it would be good to say that.)




From jml at mumak.net  Sun Feb 21 20:28:07 2010
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 21 Feb 2010 22:28:07 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <CDBCFEB7-C0D0-46B4-946C-00FE4A28B013@twistedmatrix.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<CDBCFEB7-C0D0-46B4-946C-00FE4A28B013@twistedmatrix.com>
Message-ID: <d06a5cd31002211928s4773ec4cl970cc9512881ab34@mail.gmail.com>

On Sun, Feb 21, 2010 at 10:15 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Feb 21, 2010, at 9:50 PM, Jonathan Lange wrote:
>
...
>> Please feel free to update it with questions, thoughts, corrections and advice.
>
> Can you make "a public website" a bit more specific?  What kind of public website?  (I realize that the answer is probably "any arbitrary public website, not twistedmatrix.com", but it would be good to say that.)

I'll say that for now. Ideally, I'd like there to be a standard place
to upload the pre-release tarballs.

jml



From darren at ontrenet.com  Sun Feb 21 20:57:09 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Sun, 21 Feb 2010 22:57:09 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
Message-ID: <1266811029.2532.177.camel@kratos>

Hi,
  This is great!

Is there a list of new features or improvements for this release? I'd
like to start planning my update.

Darren

On Sun, 2010-02-21 at 21:50 -0500, Jonathan Lange wrote:

> Live from PyCon Atlanta, I'm pleased to herald the approaching
> footsteps of the 10.0 release.
> 
> Tarballs for the first Twisted 10.0.0 pre-release are now available at:
>   http://people.canonical.com/~jml/Twisted/
> 
> This release is the first release ever with the new NEWS building
> system, which turns out to be utterly fantastic.
> 
> We're also using this release to actually hammer out a release
> process. You can find the draft at:
>   http://twistedmatrix.com/trac/wiki/ReleaseProcess
> 
> Please feel free to update it with questions, thoughts, corrections and advice.
> 
> Thanks,
> jml
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100221/fffdbb85/attachment.html>

From jml at mumak.net  Sun Feb 21 21:08:14 2010
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 21 Feb 2010 23:08:14 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <1266811029.2532.177.camel@kratos>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<1266811029.2532.177.camel@kratos>
Message-ID: <d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>

On Sun, Feb 21, 2010 at 10:57 PM, Darren Govoni <darren at ontrenet.com> wrote:
> Hi,
>   This is great!
>
> Is there a list of new features or improvements for this release? I'd like
> to start planning my update.
>

Each of the tarballs has a NEWS file.

jml



From general at vultaire.net  Mon Feb 22 00:03:12 2010
From: general at vultaire.net (Paul Goins)
Date: Mon, 22 Feb 2010 16:03:12 +0900
Subject: [Twisted-Python] Try/catching yielded Exceptions and getting proper
	tracebacks
Message-ID: <4B822C30.2050709@vultaire.net>

I'm frequently using the inlineCallbacks idiom for writing code, but am
often finding myself frustrated with rather counterintuitive tracebacks.

Let's say I'm writing an XML-RPC handler, and even if an exception
occurs, I want it to return something to the user and dump the exception
to the log file.  However, if an exception occurs when I'm using the
inlineCallbacks decorator, I sometimes get lacking tracebacks.  Maybe
I'll have the line number of the function that yielded the exception,
but I'll have no detailed information as to where the exception really
came from.

For example, in the example I've pasted at the end of this mail, I get a
traceback as follows:

Traceback (most recent call last):
  File "exceptions.py", line 13, in xmlrpc_dosomething
    result = yield self._do_something_else()
Exception: die die die!!!

However, the exception happens within _do_something_else on line 20.

I have a simple complete example copy/pasted below.  Is there a better
way to accomplish this?

Thanks.

- Paul Goins

-----------------------------------
from twisted.web.xmlrpc import XMLRPC
from twisted.web.server import Site
from twisted.web.resource import Resource
from twisted.internet import reactor, defer
import sys, traceback


class MyApp(XMLRPC):

    @defer.inlineCallbacks
    def xmlrpc_dosomething(self):
        try:
            result = yield self._do_something_else()
            defer.returnValue(result)
        except Exception:
            print >> sys.stderr, traceback.format_exc()

    @defer.inlineCallbacks
    def _do_something_else(self):
        yield
        raise Exception("die die die!!!")

@defer.inlineCallbacks
def cause_trouble(app):
    val = yield app.xmlrpc_dosomething()
    print val
    reactor.stop()

if __name__ == "__main__":
    app = MyApp()
    r = Resource()
    r.putChild("RPC2", app)
    s = Site(r)
    reactor.listenTCP(8123, s)
    reactor.callLater(0.2, cause_trouble, app)
    reactor.run()





From burslem2001 at yahoo.com  Mon Feb 22 01:03:04 2010
From: burslem2001 at yahoo.com (gary clark)
Date: Mon, 22 Feb 2010 00:03:04 -0800 (PST)
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
Message-ID: <321817.5815.qm@web112504.mail.gq1.yahoo.com>

The correct way I think is to use base64 and just one connection after more research. Good to research.

Thanks,
Garyc

--- On Sun, 2/14/10, gary clark <burslem2001 at yahoo.com> wrote:

> From: gary clark <burslem2001 at yahoo.com>
> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Sunday, February 14, 2010, 12:18 PM
> 
> hey Alexandra,
> 
> The only reason why I suggested another server would be to
> distribute the
> load on the system. Essentially the files that are intended
> to be sent over will consume alot of processing since .jpeg
> etc are humongous.
> Yes two connections would be required. Well you could use
> the MD5 sum, I will not, essentially your after a unique
> identifier that represents the file your sending. What I
> intend to do is simply embed the filename and unique
> identifier as a header. Hence I do not not need to recompute
> the MD5 at the receiving end, which to be honest seems
> overkill. 
> 
> Anyway good luck. KISS for software is the best approach.
> 
> Thanks,
> Garyc
> 
> 
> --- On Sun, 2/14/10, Alexandre Quessy <alexandre at quessy.net>
> wrote:
> 
> > From: Alexandre Quessy <alexandre at quessy.net>
> > Subject: Re: [Twisted-Python] Sending jpeg data over
> TCP/IP
> > To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> > Date: Sunday, February 14, 2010, 11:10 AM
> > Hello again everyone,
> > Maybe using two senders/receivers would help. The
> control
> > protocol,
> > which can use XML or JSON, or whatever, would identify
> the
> > files by
> > their md5 sum? The file transfert protocol would
> detect the
> > header of
> > each file to separate them.
> > 
> > a
> > 
> > gary clark wrote:
> > > There are probably several way to accomplish this
> I
> > just needed to think about it a wee bit longer. One
> way
> > would be to prepend an identifier to the file,strip
> the
> > header from the raw data on reception and then save
> the
> > image. I dont think its complicated. I may need a
> seperate
> > server to handle the files though.
> > > 
> > > Thanks,
> > > Garyc
> > > 
> > > --- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org>
> > wrote:
> > > 
> > >> From: Maarten ter Huurne <maarten at treewalker.org>
> > >> Subject: Re: [Twisted-Python] Sending jpeg
> data
> > over TCP/IP
> > >> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> > >> Date: Saturday, February 13, 2010, 6:07 PM
> > >> On Sunday 14 February 2010, Alexandre
> > >> Quessy wrote:
> > >>
> > >>> This said, sending them using a
> programmer's
> > solution
> > >> - not a sysadmin
> > >>> solution - would be closer to my own
> skills,
> > so I am
> > >> interested in
> > >>> knowing if this could be suitable. I
> think,
> > though,
> > >> that it would be
> > >>> faster to use a transfert protocol that
> would
> > be
> > >> implemented in C, not
> > >>> Python. Am I wrong?
> > >> I would suggest to implement it in Python
> first
> > and then
> > >> benchmark it. Maybe 
> > >> the simplest implementation is already fast
> > enough. Maybe
> > >> the bottleneck is 
> > >> the network or the disk you're writing to; in
> that
> > case you
> > >> would be better 
> > >> off upgrading your switches or buying an SSD
> > instead of
> > >> writing C code.
> > >>
> > >> Bye,
> > >>         Maarten
> > >>
> > >>
> _______________________________________________
> > >> Twisted-Python mailing list
> > >> Twisted-Python at twistedmatrix.com
> > >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >>
> > > 
> > > 
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> 




From radix at twistedmatrix.com  Mon Feb 22 07:13:16 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 22 Feb 2010 08:13:16 -0600
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <321817.5815.qm@web112504.mail.gq1.yahoo.com>
References: <321817.5815.qm@web112504.mail.gq1.yahoo.com>
Message-ID: <60ed19d41002220613n504ccbf5i467e94052d0c9ce2@mail.gmail.com>

On Mon, Feb 22, 2010 at 2:03 AM, gary clark <burslem2001 at yahoo.com> wrote:
> The correct way I think is to use base64 and just one connection after more research. Good to research.
>
> Thanks,
> Garyc

No, base64ing file contents is a terrible thing to do if you're
already writing your own TCP-based protocol. Just length-prefix the
data.


>
> --- On Sun, 2/14/10, gary clark <burslem2001 at yahoo.com> wrote:
>
>> From: gary clark <burslem2001 at yahoo.com>
>> Subject: Re: [Twisted-Python] Sending jpeg data over TCP/IP
>> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> Date: Sunday, February 14, 2010, 12:18 PM
>>
>> hey Alexandra,
>>
>> The only reason why I suggested another server would be to
>> distribute the
>> load on the system. Essentially the files that are intended
>> to be sent over will consume alot of processing since .jpeg
>> etc are humongous.
>> Yes two connections would be required. Well you could use
>> the MD5 sum, I will not, essentially your after a unique
>> identifier that represents the file your sending. What I
>> intend to do is simply embed the filename and unique
>> identifier as a header. Hence I do not not need to recompute
>> the MD5 at the receiving end, which to be honest seems
>> overkill.
>>
>> Anyway good luck. KISS for software is the best approach.
>>
>> Thanks,
>> Garyc
>>
>>
>> --- On Sun, 2/14/10, Alexandre Quessy <alexandre at quessy.net>
>> wrote:
>>
>> > From: Alexandre Quessy <alexandre at quessy.net>
>> > Subject: Re: [Twisted-Python] Sending jpeg data over
>> TCP/IP
>> > To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> > Date: Sunday, February 14, 2010, 11:10 AM
>> > Hello again everyone,
>> > Maybe using two senders/receivers would help. The
>> control
>> > protocol,
>> > which can use XML or JSON, or whatever, would identify
>> the
>> > files by
>> > their md5 sum? The file transfert protocol would
>> detect the
>> > header of
>> > each file to separate them.
>> >
>> > a
>> >
>> > gary clark wrote:
>> > > There are probably several way to accomplish this
>> I
>> > just needed to think about it a wee bit longer. One
>> way
>> > would be to prepend an identifier to the file,strip
>> the
>> > header from the raw data on reception and then save
>> the
>> > image. I dont think its complicated. I may need a
>> seperate
>> > server to handle the files though.
>> > >
>> > > Thanks,
>> > > Garyc
>> > >
>> > > --- On Sat, 2/13/10, Maarten ter Huurne <maarten at treewalker.org>
>> > wrote:
>> > >
>> > >> From: Maarten ter Huurne <maarten at treewalker.org>
>> > >> Subject: Re: [Twisted-Python] Sending jpeg
>> data
>> > over TCP/IP
>> > >> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> > >> Date: Saturday, February 13, 2010, 6:07 PM
>> > >> On Sunday 14 February 2010, Alexandre
>> > >> Quessy wrote:
>> > >>
>> > >>> This said, sending them using a
>> programmer's
>> > solution
>> > >> - not a sysadmin
>> > >>> solution - would be closer to my own
>> skills,
>> > so I am
>> > >> interested in
>> > >>> knowing if this could be suitable. I
>> think,
>> > though,
>> > >> that it would be
>> > >>> faster to use a transfert protocol that
>> would
>> > be
>> > >> implemented in C, not
>> > >>> Python. Am I wrong?
>> > >> I would suggest to implement it in Python
>> first
>> > and then
>> > >> benchmark it. Maybe
>> > >> the simplest implementation is already fast
>> > enough. Maybe
>> > >> the bottleneck is
>> > >> the network or the disk you're writing to; in
>> that
>> > case you
>> > >> would be better
>> > >> off upgrading your switches or buying an SSD
>> > instead of
>> > >> writing C code.
>> > >>
>> > >> Bye,
>> > >>         Maarten
>> > >>
>> > >>
>> _______________________________________________
>> > >> Twisted-Python mailing list
>> > >> Twisted-Python at twistedmatrix.com
>> > >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> > >>
>> > >
>> > >
>> > > _______________________________________________
>> > > Twisted-Python mailing list
>> > > Twisted-Python at twistedmatrix.com
>> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> > >
>> >
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> >
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From terry at jon.es  Mon Feb 22 07:36:24 2010
From: terry at jon.es (Terry Jones)
Date: Mon, 22 Feb 2010 09:36:24 -0500
Subject: [Twisted-Python] Try/catching yielded Exceptions and getting
	proper	tracebacks
In-Reply-To: Your message at 16:03:12 on Monday, 22 February 2010
References: <4B822C30.2050709@vultaire.net>
Message-ID: <19330.38504.593788.930963@jon.es>

Hi Paul

>>>>> "Paul" == Paul Goins <general at vultaire.net> writes:

You're only printing the exception, not a full traceback, so you don't see
much. I tend to write what you're doing as follows:

    from twisted.python import log

    @defer.inlineCallbacks
    def xmlrpc_dosomething(self):
        d = self._do_something_else()
        d.addErrback(log.err)
        result = yield d
        defer.returnValue(result)

If you try that you'll see a full traceback. The above lets log.err handle
the failure that comes back via the errback on the deferred you get from
_do_something_else, and log.err knows how to get the full traceback.

I don't know if it's clear, but whenever you call an inlineCallbacks
decorated method/func, you get a deferred back (unless you happen to
mistakenly use inlineCallbacks to decorate something that's not a
generator). You can add errbacks to that deferred, just like any other, and
if you're making the call from inside another inlineCallbacks decorated
function, you can just do as above: add call/errbacks to the deferred, and
then yield it.

Terry



From nicolas.dietrich at hkx-online.de  Mon Feb 22 08:49:47 2010
From: nicolas.dietrich at hkx-online.de (Nicolas Dietrich)
Date: Mon, 22 Feb 2010 16:49:47 +0100
Subject: [Twisted-Python] Looking for companies doing Twisted
Message-ID: <201002221650.13981.nicolas.dietrich@hkx-online.de>

Hi there,
I'm not sure if this is the right place to ask, so sorry for the spam in 
advance. Anyway:

I'm looking for companies which might be interested in developing a booking 
system for an emerging Germany-based long-distance railway undertaking during 
this year. This will be a distributed system, so Twisted might be a good 
solution for this.

Please approach me directly for any details.

Thankful for all hints,
Nicolas
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20100222/cc3c099c/attachment.sig>

From celord at gmail.com  Mon Feb 22 09:25:58 2010
From: celord at gmail.com (=?ISO-8859-1?B?Q+lzYXIgR2FyY+1h?=)
Date: Mon, 22 Feb 2010 10:25:58 -0600
Subject: [Twisted-Python] IMAP4 Client extrange behavior
Message-ID: <b302bf881002220825g2be89yf0aa7ec7503ab1de@mail.gmail.com>

Hello all, I have this imap4 client http://www.pastebin.com/m4e387f1a
most of the code is barrowed from a IRC friend, bob_f , it works fine
but as soon as more that 1 email arrrives to the inbox, it only prints
the first new messages but not the others,  I wonder what am I doing
wrong

Thanks a lot







Here is the code:

#!/usr/bin/env python
#coding=utf-8


"""
Client de IMAP4 que descarga contenido del INBOX de una cuenta en especifico
para luego extraer el numero de telefono que debe venir en los correos enviados
"""

import StringIO
import sys
from Config import retCredentials

from twisted.internet.task import LoopingCall
from twisted.internet import protocol
from twisted.internet import defer
from twisted.mail import imap4
from twisted.python import util
from twisted.python import log
from twisted.internet import reactor
debug = 1

class IMAP4Client(imap4.IMAP4Client):

    def serverGreeting(self,caps):
        """
        Metodo llamado cuando el servidor contesta
        """
        if debug: print "On serverGreeting"

        self.serverCapabilities = caps
        if self.greetDeferred is not None:
            d, self.greetDeferred = self.greetDeferred, None
            d.addCallback(self.cbLogin)
            d.callback(self)


    def cbLogin(self, proto):
        """
        Callback to IMAP login
        """
        if debug: print "On Login"

        login =  self.login(self.factory.username, self.factory.password)
        login.addCallback(self.startPolling)


    def startPolling(self, proto):
        """
        Callback to poll every x seconds
        """
        call = LoopingCall(self.selectMailbox,mailbox="INBOX")
        call.start(20, now=True)


    def selectMailbox(self, mailbox):
        """
        Select the mailbox to examin
        """
        if debug: print "On selectMailbox"

        mailbox = self.factory.mailbox
        return self.select(mailbox).addCallback(self.cbSelectSuccess)


    def cbSelectSuccess(self, selected):
        """
        Examine the INBOX mailbox for new mails

        """
        if debug: print "On cbSelectSuccess"


        self.messageCount = selected['EXISTS']
        print "Messages: ", self.messageCount

        unseen = selected['EXISTS'] - selected['RECENT']

        if selected['RECENT'] == 0:
            print "No new messages"
            return

        return self.fetchMessage("%s:*" % (unseen)
                ).addCallback(self.cbProcMessages)

    def cbProcMessages(self,messages):

        print messages


class IMAP4ClientFactory(protocol.ClientFactory):

    protocol = IMAP4Client

    def __init__(self, username, password,  onConn):

        self.username = username
        self.password = password
        self.mailbox = 'INBOX'
        self.onConn = onConn

    def buildProtocol(self,addr):
        if debug: print "On buildProtocol"
        p = self.protocol()
        p.factory = self
        p.greetDeferred = self.onConn
        auth = imap4.CramMD5ClientAuthenticator(self.username)
        p.registerAuthenticator(auth)

        return p

    def clientConectionFailed(self, connector, reason):
        d, self.onConn = self.onConn, None
        d.errback(reason)



def ebConnection(reason):
    log.startLogging(sys.stdout)
    log.err(reason)
    reactor.stop()



PORT = 143
RESULT = "INBOX"


def main():
    credentials = retCredentials()
    hostname = credentials['server']
    username = credentials['mailbox']
    password = util.getPassword('IMAP4 Password: ')

    onConn = defer.Deferred(
            ).addErrback(ebConnection
            )

    factory = IMAP4ClientFactory(username, password, onConn)


    reactor.connectTCP(hostname, PORT, factory)
    reactor.run()

if  __name__ == "__main__":
    main()

-- 
http://celord.blogspot.com/



From kevin.horn at gmail.com  Mon Feb 22 11:23:59 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 22 Feb 2010 13:23:59 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
Message-ID: <562bcc11002221023t186f64feqfc1e87dca7c6376c@mail.gmail.com>

On Sun, Feb 21, 2010 at 9:50 PM, Jonathan Lange <jml at mumak.net> wrote:

> Live from PyCon Atlanta, I'm pleased to herald the approaching
> footsteps of the 10.0 release.
>
> Tarballs for the first Twisted 10.0.0 pre-release are now available at:
>  http://people.canonical.com/~jml/Twisted/<http://people.canonical.com/%7Ejml/Twisted/>
>
> This release is the first release ever with the new NEWS building
> system, which turns out to be utterly fantastic.
>
> We're also using this release to actually hammer out a release
> process. You can find the draft at:
>  http://twistedmatrix.com/trac/wiki/ReleaseProcess
>
> Please feel free to update it with questions, thoughts, corrections and
> advice.
>
>
Here's a few...perhaps these should be added to the "Open Questions"
section:

1. How/when in this process are the Windows installers and/or MacOS .dmg
files created?
   (I presume .deb and .rpm packages are left up to Linux distro packagers)
2. How/when in this process are the docs built?
3. When should the front page of the wiki be updated?


> Thanks,
> jml
>
>
No, thank _you_. :)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100222/61e20ea2/attachment.html>

From lormayna at libero.it  Mon Feb 22 14:06:04 2010
From: lormayna at libero.it (Lorenzo Mainardi)
Date: Mon, 22 Feb 2010 22:06:04 +0100
Subject: [Twisted-Python] twisted.protocol.sip
Message-ID: <4B82F1BC.8060705@libero.it>

Hello,
I'm trying to extend the class twisted.protocols.sip.MessageParser for
create my parser.
I had read the documentation and I found this: "Shouldn't
be connected to actual transport.".
What does it means? I can't use that binding it to a socket?

I found also that many other object in twisted.protocols.sip are not
complete and/or not working (some of that return everytime
NotImplementedYet). Is it correct or I'm doing some mistakes?

-- 
LORENZO MAINARDI
Email: lormayna at gmail.com
Linux Registered User: 461615
Key Fingerprint: AC63 5C15 562F 71AF C853  4D4A C03F 75EB 52F4 A0D0



From matusis at yahoo.com  Mon Feb 22 18:52:17 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Mon, 22 Feb 2010 17:52:17 -0800
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <4B7F284B.70801@thiengineering.ch>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
	<4B7F284B.70801@thiengineering.ch>
Message-ID: <007601cab42a$d4c755e0$7e5601a0$@com>

Werner

I am using your code, and it shows essentially the same thing as Heapy:
the counts of all common objects more or less agree.
The 'Total size' shown in Heapy

When I start the process, both python object sizes and their counts rise
proportionally to the numbers of reconnected clients, and then they
stabilize after all clients have reconnected.
At that moment, the "external" RSS process size is about 260MB. The
"internal size" of all python objects reported by Heapy is about 150MB.
After two days, the internal sizes/counts stay the same, but the external
size grows to 1500MB.

Python object counts/total sizes are measured from the manhole.
Is this sufficient to conclude that this is a C memory leak in one of the
external modules or in the Python interpreter itself?

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Werner Thie
> Sent: Friday, February 19, 2010 4:10 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] debugging a memory leak
> 
> Hi Alec
> 
> ...and they promised you that with a gc'ed language there will never be
> a memory problem again, you just plain forget about it.
> 
> I was stuck in the same position as you and after lots of probing the
> following attempt helped a lot to correct what was later proofed to be
> overly optimistic coding by holding on to objects for
> performance/practical reasons in other objects. Producing non collect
> able cycles in twisted is probably as easy as to forget about memory
> when you have Alzheimer.
> 
> Proofing and working on the problem was only possible on the production
> machine under real load situations. I went ahead and created a manhole
> service on the production server, allowing me to peek at the python
> object space without disturbing it too much. What I used as a tool was
> the code you find later on included.
> 
> After cleaning all the self produced cycles out our servers processes
> stabilized at roughly 280 to 320 MB per process and are now running
> stable for months with more than 20k logins per day and a usual time of
> connect per user on the average of 25 minutes playing games delivered by
> nevow/athena LivePages.
> 
> As I said before, all cycles I found in our SW were introduced by
> patterns like
> 
> def beforeRender(self, ctx):
>      self.session = inevow.ISession(ctx)
> 
> The included code helps to identify the amount of objects being around.
> Although it's a primitive tool it shines the light where its needed and
> if you see certain object counts run away then you have at least
> identified the surrounding where the non collect able cycles are built.
> 
> Why didn't I use heapy/guppy and found out that way? I wasn't able to
> find the evidence for what I was suspecting with all the tools I tried
> (and boy I tried for WEEKS). Avid users of heapy will most probably
> disagree and tell me it would have been easy. But in a situation as this
> everything that works to move you out of that pothole you're in is the
> right thing to do.
> 
> HTH, Werner
> 
> exc = [
>    "function",
>    "type",
>    "list",
>    "dict",
>    "tuple",
>    "wrapper_descriptor",
>    "module",
>    "method_descriptor",
>    "member_descriptor",
>    "instancemethod",
>    "builtin_function_or_method",
>    "frame",
>    "classmethod",
>    "classmethod_descriptor",
>    "_Environ",
>    "MemoryError",
>    "_Printer",
>    "_Helper",
>    "getset_descriptor",
>    "weakreaf"
> ]
> 
> inc = [
>    'myFirstSuspect',
>    'mySecondSuspect'
> ]
> 
> prev = {}
> 
> def dumpObjects(delta=True, limit=0, include=inc, exclude=[]):
>    global prev
>    if include != [] and exclude != []:
>      print 'cannot use include and exclude at the same time'
>      return
>    print 'working with:'
>    print '   delta: ', delta
>    print '   limit: ', limit
>    print ' include: ', include
>    print ' exclude: ', exclude
>    objects = {}
>    gc.collect()
>    oo = gc.get_objects()
>    for o in oo:
>      if getattr(o, "__class__", None):
>        name = o.__class__.__name__
>        if ((exclude == [] and include == [])       or \
>            (exclude != [] and name not in exclude) or \
>            (include != [] and name in include)):
>          objects[name] = objects.get(name, 0) + 1
> ##    if more:
> ##      print o
>    pk = prev.keys()
>    pk.sort()
>    names = objects.keys()
>    names.sort()
>    for name in names:
>      if limit == 0 or objects[name] > limit:
>        if not prev.has_key(name):
>          prev[name] = objects[name]
>        dt = objects[name] - prev[name]
>        if delta or dt != 0:
>          print '%0.6d -- %0.6d -- ' % (dt, objects[name]),  name
>        prev[name] = objects[name]
> 
> def getObjects(oname):
>    """
>    gets an object list with all the named objects out of the sea of
>    gc'ed objects
>    """
>    olist = []
>    objects = {}
>    gc.collect()
>    oo = gc.get_objects()
>    for o in oo:
>      if getattr(o, "__class__", None):
>        name = o.__class__.__name__
>        if (name == oname):
>          olist.append(o)
>    return olist
> 
> dumpObject = dumpobj.dumpObj
> 
> Alec Matusis wrote:
> > I modified a tolerably leaking (about 40MB/day) Twisted server: when the
> new
> > code was pushed, the memory leak  became catastrophic (about
> 100MB/hr).
> > We could tolerate 40MB/day, but the new code needs to be debugged.
> > First, I reverted to the old version, that is leaking 40MB/day (The leak
> > rate is actually proportional to the number of new connections per
second,
> > (which correlates with the CPU utilization of the process): if CPU as
> > measured by $top jumps to >90%, the leak can accelerate to 50MB/hr)
> > I took two steps to debug the leak:
> >
> > 1) Using guppy/heapy via manhole:
> >
> >>>> hp = hpy()
> >>>> h = hp.heap()
> >>>> h
> > Partition of a set of 1157084 objects. Total size = 140911144 bytes.
> >  Index  Count   %     Size   % Cumulative  % Kind (class / dict of
class)
> >      0 785798  68 48463680  34  48463680  34 str
> >      1   7357   1 24660664  18  73124344  52 dict of service.TagSession
> >      2  11735   1 12298280   9  85422624  61 dict of
> > twisted.internet.base.DelayedCall
> >      3   7377   1  7731096   5  93153720  66 dict of
> > twisted.internet.tcp.Server
> >      4   7375   1  7729000   5 100882720  72 dict of
protocols.TagProtocol
> >      5  30925   3  7174600   5 108057320  77 __builtin__.set
> >      6   9193   1  6373336   5 114430656  81 dict (no owner)
> >      7  15557   1  3396904   2 117827560  84 list
> >      8  44833   4  3227976   2 121055536  86 types.BuiltinFunctionType
> >      9  38142   3  3051360   2 124106896  88 types.MethodType
> > <328 more rows. Type e.g. '_.more' to view.>
> >
> > Note that the total size of all objects is 140911144 bytes
> > The 1st, 3d and 4th items in this list show the actual number of
connected
> > clients. I wait for about 48 hrs, and then execute the same command, and
I
> > see approximately the same Total size, of 130MB.
> > So the total size that Heapy sees via the manhole is stable, fluctuating
> > around 140MB.
> >
> > The problem is that the total RSS size of the process visible by the OS
is
> > much larger, it is  871680KB = 851MB:
> > $ps -o pid,vsz,rss,sz,size -p 11236
> >   PID     VSZ           RSS       SZ           SZ
> > 11236 1303180 871680 325795 1174388
> >
> > It is this total RSS size that keeps leaking at 40MB per day.
> >
> > As far as I understand, this means that this is not the problem with
purely
> > Python code, since Heapy shows that the total size of all Python objects
is
> > more or less constant.
> > Is this a correct assumption?
> >
> > 2) So now I turn to valgrind. I am no expert in using valgrind, so what
I
> > did was based only on general logic/rough guesses.
> > Since I cannot run this under valgrind on a production machine due to
> > performance reasons, I recompile python on the staging machine:
> > ./configure --enable-shared --without-pymalloc
> > --prefix=/nail/encap/python-2.6.4-valgrind
> > I then follow the instructions in
> > http://svn.python.org/projects/python/trunk/Misc/README.valgrind
> > Then I run twistd process like this:
> >
> > valgrind  --tool=memcheck
> > --suppressions=/nail/sys/src/Python-2.6.4/Misc/valgrind-python.supp
> > --leak-check=full --log-file=/tmp/valgrind.log  /usr/local/bin/twistd
> > --no_save --reactor=epoll --pidfile=logs/tagserv.pid
> > --logfile=logs/tagserv.log --python=tagserv.py
> >
> > The memory for the process shown by the OS is now 5x normal, and the
> > performance is about 5x worse, since it's running inside valgrind's
> > synthetic CPU.
> > Because this is done on the staging box where I cannot accurately
> reproduce
> > the real load, the memory leaks from simulated load seen by $ps -o rss
are
> > pretty small, about 1 to 10MB.
> > Still, I am interested in finding out what they are.
> >
> > Now I encounter the problems with my understanding of how to use
> valgrind.
> > This may not be the appropriate list for this, but perhaps someone could
> > recognize the problem.
> > When I start the server, about 240 lines is written to valgrind log
file,
> > --log-file=/tmp/valgrind.log
> > When I shut it down, it adds another 100 lines.
> > No matter what I do in between, it always results in the log file with
> > exactly 343 lines.
> > I can have server runs with a leak of 1MB, or with 10MB, but in the end,
I
> > get pretty much the same log file. Moreover, when look for all lost
memory
> > reports:
> > $grep lost valgrind.log.1
> >  17,352 bytes in 31 blocks are possibly lost in loss record 49 of 62
> >  203,312 bytes in 478 blocks are possibly lost in loss record 57 of 62
> >     definitely lost: 0 bytes in 0 blocks.
> >       possibly lost: 220,664 bytes in 509 blocks.
> >  64 bytes in 2 blocks are definitely lost in loss record 12 of 63
> >  17,352 bytes in 31 blocks are possibly lost in loss record 50 of 63
> >  203,824 bytes in 479 blocks are possibly lost in loss record 58 of 63
> >     definitely lost: 64 bytes in 2 blocks.
> >       possibly lost: 221,176 bytes in 510 blocks.
> >  47 bytes in 1 blocks are definitely lost in loss record 8 of 63
> >  128 bytes in 4 blocks are definitely lost in loss record 16 of 63
> >  584 (104 direct, 480 indirect) bytes in 2 blocks are definitely lost in
> > loss record 26 of 63
> >  1,008 bytes in 6 blocks are definitely lost in loss record 31 of 63
> >  22,296 bytes in 41 blocks are possibly lost in loss record 50 of 63
> >  183,368 bytes in 381 blocks are possibly lost in loss record 59 of 63
> >     definitely lost: 1,287 bytes in 13 blocks.
> >     indirectly lost: 480 bytes in 20 blocks.
> >       possibly lost: 205,664 bytes in 422 blocks.
> >
> > If I add up all those numbers, I get less than 1MB. How do I track down
the
> > 10MB leak?
> >
> > Are there any alternative strategies in finding this leak?
> >
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From maarten at treewalker.org  Mon Feb 22 19:24:24 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Tue, 23 Feb 2010 03:24:24 +0100
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <007601cab42a$d4c755e0$7e5601a0$@com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
	<4B7F284B.70801@thiengineering.ch>
	<007601cab42a$d4c755e0$7e5601a0$@com>
Message-ID: <201002230324.24883.maarten@treewalker.org>

On Tuesday 23 February 2010, Alec Matusis wrote:

> When I start the process, both python object sizes and their counts rise
> proportionally to the numbers of reconnected clients, and then they
> stabilize after all clients have reconnected.
> At that moment, the "external" RSS process size is about 260MB. The
> "internal size" of all python objects reported by Heapy is about 150MB.
> After two days, the internal sizes/counts stay the same, but the external
> size grows to 1500MB.
> 
> Python object counts/total sizes are measured from the manhole.
> Is this sufficient to conclude that this is a C memory leak in one of the
> external modules or in the Python interpreter itself?

In general, there are other reasons why heap size and RSS size do not match:
1. pages are empty but not returned to the OS
2. pages cannot be returned to the OS because they are not completely empty

It seems Python has different allocators for small and large objects:
http://www.mail-archive.com/python-list at python.org/msg256116.html
http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-
a-large-object.htm

Assuming Python uses malloc for all its allocations (does it?), it is the 
malloc implementation that determines whether empty pages are returned to 
the OS. Under Linux with glibc (your system?), empty pages are returned, so 
there reason 1 does not apply.

Depending on the allocation behaviour of Python, the pages may not be empty 
though, so reason 2 is a likely suspect.

Python extensions written in C could also leak or fragment memory. Are you 
using any extensions that are not pure Python?

Bye,
		Maarten



From general at vultaire.net  Mon Feb 22 20:50:52 2010
From: general at vultaire.net (Paul Goins)
Date: Tue, 23 Feb 2010 12:50:52 +0900
Subject: [Twisted-Python] Try/catching yielded Exceptions and getting
 proper	tracebacks
In-Reply-To: <19330.38504.593788.930963@jon.es>
References: <4B822C30.2050709@vultaire.net> <19330.38504.593788.930963@jon.es>
Message-ID: <4B83509C.30502@vultaire.net>

Hi Terry,

> You're only printing the exception, not a full traceback, so you don't see
> much. I tend to write what you're doing as follows: [...]

Excellent.  I'll give it a try.  I had a feeling it was something like
that which I was missing.

I already understood that inlineCallbacks returns Deferreds, but the
clarification is appreciated nonetheless.  I think it was just my lack
of understanding of how Failures are handled, logged, etc.

- Paul




From matusis at yahoo.com  Mon Feb 22 22:37:16 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Mon, 22 Feb 2010 21:37:16 -0800
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <201002230324.24883.maarten@treewalker.org>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>	<4B7F284B.70801@thiengineering.ch>	<007601cab42a$d4c755e0$7e5601a0$@com>
	<201002230324.24883.maarten@treewalker.org>
Message-ID: <007401cab44a$42294160$c67bc420$@com>

Hi Maarten,

Your link
http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-
a-large-object.htm 
seems to suggest that even though the interpreter does not release memory
back to the OS, it can be re-used by the interpreter.
If this was our problem, I'd expect the memory to be set by the highest
usage, as opposed to it constantly leaking: in my case, the load is
virtually constant, but the memory still leaks over time.

The environment is Linux 2.6.24 x86-64, the extensions used are MySQLdb,
pyCrypto (latest stable releases for both).

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Maarten ter Huurne
> Sent: Monday, February 22, 2010 6:24 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] debugging a memory leak
> 
> On Tuesday 23 February 2010, Alec Matusis wrote:
> 
> > When I start the process, both python object sizes and their counts rise
> > proportionally to the numbers of reconnected clients, and then they
> > stabilize after all clients have reconnected.
> > At that moment, the "external" RSS process size is about 260MB. The
> > "internal size" of all python objects reported by Heapy is about 150MB.
> > After two days, the internal sizes/counts stay the same, but the
external
> > size grows to 1500MB.
> >
> > Python object counts/total sizes are measured from the manhole.
> > Is this sufficient to conclude that this is a C memory leak in one of
the
> > external modules or in the Python interpreter itself?
> 
> In general, there are other reasons why heap size and RSS size do not
match:
> 1. pages are empty but not returned to the OS
> 2. pages cannot be returned to the OS because they are not completely
empty
> 
> It seems Python has different allocators for small and large objects:
> http://www.mail-archive.com/python-list at python.org/msg256116.html
> http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-
> delete-
> a-large-object.htm
> 
> Assuming Python uses malloc for all its allocations (does it?), it is the
> malloc implementation that determines whether empty pages are returned to
> the OS. Under Linux with glibc (your system?), empty pages are returned,
so
> there reason 1 does not apply.
> 
> Depending on the allocation behaviour of Python, the pages may not be
> empty
> though, so reason 2 is a likely suspect.
> 
> Python extensions written in C could also leak or fragment memory. Are you
> using any extensions that are not pure Python?
> 
> Bye,
> 		Maarten
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From wthie at thiengineering.ch  Tue Feb 23 00:39:01 2010
From: wthie at thiengineering.ch (Werner Thie)
Date: Tue, 23 Feb 2010 08:39:01 +0100
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <007401cab44a$42294160$c67bc420$@com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>	<4B7F284B.70801@thiengineering.ch>	<007601cab42a$d4c755e0$7e5601a0$@com>	<201002230324.24883.maarten@treewalker.org>
	<007401cab44a$42294160$c67bc420$@com>
Message-ID: <4B838615.8060205@thiengineering.ch>

Hi

Assuming that if memory not released to the OS can be reused by the 
interpreter because of a suballocation system used in the interpreter 
should eventually lead to a leveling out of the overall memory usage 
over time, that's what I observe with our processes (sitting at several 
100 MB per process). We are using external C libraries which do lots of 
malloc/free and one of the bigger sources of pain is indeed to bring 
such a library to a point where its clean not only by freeing all memory 
allocated in every circumstance but also Python refcounting wise. I 
usually go thru all the motions to build up a complete debug chain for 
all modules involved in a project and write a test bed to proof clean 
and proper implementation.

So if your using C/C++ based modules in your project I would mark them 
as highly suspicious to be responsible for leaks until proven otherwise.

Not to bother you with numbers but I usually allocate about 30% of 
overall project time to bring a server into a production ready state, 
meaning uptimes of months/years, no fishy feelings, no performance 
oscillations, predictable caving and recuperating when overloaded, just 
all the things you have to tick to sign off a project as completed, 
meaning you don't have to do daily 'tire kicking' maintenance and 
periodic reboots.

Werner

Alec Matusis wrote:
> Hi Maarten,
> 
> Your link
> http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-
> a-large-object.htm 
> seems to suggest that even though the interpreter does not release memory
> back to the OS, it can be re-used by the interpreter.
> If this was our problem, I'd expect the memory to be set by the highest
> usage, as opposed to it constantly leaking: in my case, the load is
> virtually constant, but the memory still leaks over time.
> 
> The environment is Linux 2.6.24 x86-64, the extensions used are MySQLdb,
> pyCrypto (latest stable releases for both).
> 
>> -----Original Message-----
>> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
>> bounces at twistedmatrix.com] On Behalf Of Maarten ter Huurne
>> Sent: Monday, February 22, 2010 6:24 PM
>> To: Twisted general discussion
>> Subject: Re: [Twisted-Python] debugging a memory leak
>>
>> On Tuesday 23 February 2010, Alec Matusis wrote:
>>
>>> When I start the process, both python object sizes and their counts rise
>>> proportionally to the numbers of reconnected clients, and then they
>>> stabilize after all clients have reconnected.
>>> At that moment, the "external" RSS process size is about 260MB. The
>>> "internal size" of all python objects reported by Heapy is about 150MB.
>>> After two days, the internal sizes/counts stay the same, but the
> external
>>> size grows to 1500MB.
>>>
>>> Python object counts/total sizes are measured from the manhole.
>>> Is this sufficient to conclude that this is a C memory leak in one of
> the
>>> external modules or in the Python interpreter itself?
>> In general, there are other reasons why heap size and RSS size do not
> match:
>> 1. pages are empty but not returned to the OS
>> 2. pages cannot be returned to the OS because they are not completely
> empty
>> It seems Python has different allocators for small and large objects:
>> http://www.mail-archive.com/python-list at python.org/msg256116.html
>> http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-
>> delete-
>> a-large-object.htm
>>
>> Assuming Python uses malloc for all its allocations (does it?), it is the
>> malloc implementation that determines whether empty pages are returned to
>> the OS. Under Linux with glibc (your system?), empty pages are returned,
> so
>> there reason 1 does not apply.
>>
>> Depending on the allocation behaviour of Python, the pages may not be
>> empty
>> though, so reason 2 is a likely suspect.
>>
>> Python extensions written in C could also leak or fragment memory. Are you
>> using any extensions that are not pure Python?
>>
>> Bye,
>> 		Maarten
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From landreville at deadtreepages.com  Tue Feb 23 08:00:07 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 23 Feb 2010 10:00:07 -0500
Subject: [Twisted-Python] twisted.protocol.sip
In-Reply-To: <4B82F1BC.8060705@libero.it>
References: <4B82F1BC.8060705@libero.it>
Message-ID: <9d748c781002230700m94c8b06xaf27a8aa33a2952@mail.gmail.com>

On Mon, Feb 22, 2010 at 4:06 PM, Lorenzo Mainardi <lormayna at libero.it> wrote:
> Hello,
> I'm trying to extend the class twisted.protocols.sip.MessageParser for
> create my parser.
> I had read the documentation and I found this: "Shouldn't
> be connected to actual transport.".
> What does it means? I can't use that binding it to a socket?
>
> I found also that many other object in twisted.protocols.sip are not
> complete and/or not working (some of that return everytime
> NotImplementedYet). Is it correct or I'm doing some mistakes?
>

The SIP implementation is not entirely complete. I've started a little
project of making a sip client mostly by subclassing the current sip
implementation and adding some things that are missing. I'm just using
it for registering and subscribing to notifications though and my code
probably isn't the best. I'll put it up somewhere so you can see it,
but I'm fairly new at twisted so someone else might say it is the
wrong approach.



From landreville at deadtreepages.com  Tue Feb 23 11:22:35 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 23 Feb 2010 13:22:35 -0500
Subject: [Twisted-Python] twisted.protocol.sip
In-Reply-To: <5fbea29a1002230728q39fecafcj2aa12c0f180cf16f@mail.gmail.com>
References: <4B82F1BC.8060705@libero.it>
	<9d748c781002230700m94c8b06xaf27a8aa33a2952@mail.gmail.com>
	<5fbea29a1002230728q39fecafcj2aa12c0f180cf16f@mail.gmail.com>
Message-ID: <9d748c781002231022u1bc6fb9cw26f98e85903cc608@mail.gmail.com>

On Tue, Feb 23, 2010 at 10:28 AM, Lorenzo Mainardi <lormayna at gmail.com> wrote:
> 2010/2/23 Landreville <landreville at deadtreepages.com>:
>
>> I'll put it up somewhere so you can see it,
>> but I'm fairly new at twisted so someone else might say it is the
>> wrong approach.
>>
>
> Hi, I'm start doing the same, so we can merge the works.
> At the moment I don't have so much code, but you can put in google
> code or somewhere (If it's possible I prefer to use mercurial instead
> of SVN or GIT).
>

I've got it up on launchpad at: https://launchpad.net/sipper

I don't have time right now to explain it all, but the reactor is
started in SIPPhone.py and thats where the registration is started as
well.



From landreville at deadtreepages.com  Tue Feb 23 18:09:36 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 23 Feb 2010 20:09:36 -0500
Subject: [Twisted-Python] twisted.protocol.sip
In-Reply-To: <4B844BB5.5000607@gmail.com>
References: <4B82F1BC.8060705@libero.it>
	<9d748c781002230700m94c8b06xaf27a8aa33a2952@mail.gmail.com>
	<5fbea29a1002230728q39fecafcj2aa12c0f180cf16f@mail.gmail.com>
	<9d748c781002231022u1bc6fb9cw26f98e85903cc608@mail.gmail.com>
	<4B844BB5.5000607@gmail.com>
Message-ID: <9d748c781002231709w633ef305ye1c328b356f38bb7@mail.gmail.com>

On Tue, Feb 23, 2010 at 4:42 PM, Lorenzo Mainardi <lormayna at gmail.com> wrote:
> Landreville ha scritto:
>> On Tue, Feb 23, 2010 at 10:28 AM, Lorenzo Mainardi <lormayna at gmail.com> wrote:
>>> 2010/2/23 Landreville <landreville at deadtreepages.com>:
>>>
>>>> I'll put it up somewhere so you can see it,
>>>> but I'm fairly new at twisted so someone else might say it is the
>>>> wrong approach.
>>>>
>>> Hi, I'm start doing the same, so we can merge the works.
>>> At the moment I don't have so much code, but you can put in google
>>> code or somewhere (If it's possible I prefer to use mercurial instead
>>> of SVN or GIT).
>>>
>>
>> I've got it up on launchpad at: https://launchpad.net/sipper
>
> Hi download the branch and subscribed the mailing list.
> I'll try to write some code.
>

I'm just using this as a SIP client, not as a proxy server. What are
you making with  SIP?



From David.Watson at windriver.com  Tue Feb 23 18:15:55 2010
From: David.Watson at windriver.com (Watson, David)
Date: Tue, 23 Feb 2010 17:15:55 -0800
Subject: [Twisted-Python] Reactor events help request ..
Message-ID: <58BD0469C48A7443A479A13D101685E303EA8F0B@ala-mail09.corp.ad.wrs.com>

Hi Folks ..
 
I'm not entirely a newbie a python and twisted, but I have come to the
point where I need a bit more expertise on this topic, so I am hoping
that I have come to the right place .. 
 
What  I'm hoping, that  you folks can help out with a minor problem that
I am having with the twistd reactor class and/or the callLater function
  
I have been using a reactor.callLater function to schedule an event that
happens in the reactor to send out a heartbeat type message at regular
intervals .. This works great !
 
However, it appears to me that the self.sendLine(msg)  and or the
self.transport.write(msg) writing  functions are blocked functions
waiting for a reactor event to occur at a future scheduled time before
acutally flushing out the internal write buffers ..  
 
I am currently using the twistd protocol factory to create a custom
protocol to communicate between a server and client,  which up until now
has not been a real concern, but I am trying to improve the preformance
and turn around time between the client and server and this blocking
operation is a major source of  unneeded delay .. 
 
My problem is that I have scheduled heartbeat events that I want to send
to the server .. as well as  the  non scheduled events that I want to go
to the server imediately .. 
 
I have been scouring the various python/twistd  document sites, but to
no avial,  on all of the sites that I have seen, the method used have
all done the same thing ,  by re-scheduling something into the future
with a reactor.callLater () function, which causes a delayed write to
occur .. not a problem for something that is 1 or 2 second s in the
furture, but it is a serious problem when the next event is 120 seconds
away .. 
 
I have tried using a self.transport.write(msg) function, but the actual
communication still seems to be buffered and stuck waiting for the
scheduled reactor event .. 
 
What I think I need is something similar to  self.transport.flush()
which would flush out the write buffers on demand, but does not seen to
exist ..
 
I am hoping that someone has faced the same/similar stituation and give
me some guidance and/or to point me in the correct direction .. 
 
Thanks for any help you can offer ..
 
Cheers
 
Dave Watson
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100223/e08ff1bb/attachment.html>

From glyph at twistedmatrix.com  Tue Feb 23 20:21:35 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 23 Feb 2010 22:21:35 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<1266811029.2532.177.camel@kratos>
	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>
Message-ID: <4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>


On Feb 21, 2010, at 11:08 PM, Jonathan Lange wrote:

> On Sun, Feb 21, 2010 at 10:57 PM, Darren Govoni <darren at ontrenet.com> wrote:
>> Hi,
>>   This is great!
>> 
>> Is there a list of new features or improvements for this release? I'd like
>> to start planning my update.
>> 
> 
> Each of the tarballs has a NEWS file.

A thought for future releases: since we'd really like folks to download the prereleases and try them out, perhaps we should put the NEWS file on the web somewhere official, too, so they can see all the cool stuff they can try out?

Here's a not-so-official link to the 10.0.0 prerelease NEWS:

http://twistedmatrix.com/trac/browser/branches/release-x-4290/NEWS?format=raw





From tim at commsecure.com.au  Tue Feb 23 20:45:43 2010
From: tim at commsecure.com.au (Tim Allen)
Date: Wed, 24 Feb 2010 14:45:43 +1100
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>	<1266811029.2532.177.camel@kratos>	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>
	<4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>
Message-ID: <4B84A0E7.4010206@commsecure.com.au>

On 02/24/2010 02:21 PM, Glyph Lefkowitz wrote:
> On Feb 21, 2010, at 11:08 PM, Jonathan Lange wrote:
>> On Sun, Feb 21, 2010 at 10:57 PM, Darren Govoni<darren at ontrenet.com>  wrote:
>>> Hi,
>>>    This is great!
>>>
>>> Is there a list of new features or improvements for this release? I'd like
>>> to start planning my update.
>>
>> Each of the tarballs has a NEWS file.
>
> A thought for future releases: since we'd really like folks to download the prereleases and try them out, perhaps we should put the NEWS file on the web somewhere official, too, so they can see all the cool stuff they can try out?
>
> Here's a not-so-official link to the 10.0.0 prerelease NEWS:
>
> http://twistedmatrix.com/trac/browser/branches/release-x-4290/NEWS?format=raw

It seems a pity that the "other fixes" bug numbers aren't URLs to the 
bugs in question, but I suppose that would make them take up an awful 
lot of room in plain-text.



From foom at fuhm.net  Tue Feb 23 20:56:13 2010
From: foom at fuhm.net (James Y Knight)
Date: Tue, 23 Feb 2010 22:56:13 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <4B84A0E7.4010206@commsecure.com.au>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>	<1266811029.2532.177.camel@kratos>	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>
	<4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>
	<4B84A0E7.4010206@commsecure.com.au>
Message-ID: <E16B26FF-E770-45CB-9CEA-0F1D126A2844@fuhm.net>


On Feb 23, 2010, at 10:45 PM, Tim Allen wrote:

> On 02/24/2010 02:21 PM, Glyph Lefkowitz wrote:
>> On Feb 21, 2010, at 11:08 PM, Jonathan Lange wrote:
>>> On Sun, Feb 21, 2010 at 10:57 PM, Darren  
>>> Govoni<darren at ontrenet.com>  wrote:
>>>> Hi,
>>>>   This is great!
>>>>
>>>> Is there a list of new features or improvements for this release?  
>>>> I'd like
>>>> to start planning my update.
>>>
>>> Each of the tarballs has a NEWS file.
>>
>> A thought for future releases: since we'd really like folks to  
>> download the prereleases and try them out, perhaps we should put  
>> the NEWS file on the web somewhere official, too, so they can see  
>> all the cool stuff they can try out?
>>
>> Here's a not-so-official link to the 10.0.0 prerelease NEWS:
>>
>> http://twistedmatrix.com/trac/browser/branches/release-x-4290/NEWS?format=raw
>
> It seems a pity that the "other fixes" bug numbers aren't URLs to the
> bugs in question, but I suppose that would make them take up an awful
> lot of room in plain-text.

Yeah: an auto-HTMLized version to put on the website would be nice,  
even if the only change was to add links for the ticket numbers.

James



From tim at commsecure.com.au  Tue Feb 23 21:02:33 2010
From: tim at commsecure.com.au (Tim Allen)
Date: Wed, 24 Feb 2010 15:02:33 +1100
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <E16B26FF-E770-45CB-9CEA-0F1D126A2844@fuhm.net>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>	<1266811029.2532.177.camel@kratos>	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>	<4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>	<4B84A0E7.4010206@commsecure.com.au>
	<E16B26FF-E770-45CB-9CEA-0F1D126A2844@fuhm.net>
Message-ID: <4B84A4D9.4030806@commsecure.com.au>

On 02/24/2010 02:56 PM, James Y Knight wrote:
> On Feb 23, 2010, at 10:45 PM, Tim Allen wrote:
>> On 02/24/2010 02:21 PM, Glyph Lefkowitz wrote:
>>> Here's a not-so-official link to the 10.0.0 prerelease NEWS:
>>>
>>> http://twistedmatrix.com/trac/browser/branches/release-x-4290/NEWS?format=raw
>>
>> It seems a pity that the "other fixes" bug numbers aren't URLs to the
>> bugs in question, but I suppose that would make them take up an awful
>> lot of room in plain-text.
>
> Yeah: an auto-HTMLized version to put on the website would be nice,
> even if the only change was to add links for the ticket numbers.

If the text version were Trac-markup, presumably it would be possible to 
automate creating a /trac/Releases/x.y.z/ReleaseNotes wiki page, and all 
the bug numbers would become links as per the usual Trac magic.



From andrew at bemusement.org  Wed Feb 24 00:01:00 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 24 Feb 2010 18:01:00 +1100
Subject: [Twisted-Python] Reactor events help request ..
In-Reply-To: <58BD0469C48A7443A479A13D101685E303EA8F0B@ala-mail09.corp.ad.wrs.com>
References: <58BD0469C48A7443A479A13D101685E303EA8F0B@ala-mail09.corp.ad.wrs.com>
Message-ID: <20100224070100.GT18546@steerpike.home.puzzling.org>

Watson, David wrote:
[...]
>    However, it appears to me that the self.sendLine(msg)  and or the
>    self.transport.write(msg) writing  functions are blocked
>    functions waiting for a reactor event to occur at a future scheduled time
>    before acutally flushing out the internal write buffers ..  

This sounds very much like you are calling Twisted APIs from threads (other than
the thread the reactor is running in).  If so, that's your problem.  See
<http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#WhydoesittakealongtimefordataIsendwithtransport.writetoarriveattheothersideoftheconnection>
and <http://twistedmatrix.com/documents/current/core/howto/threading.html>.

-Andrew.




From David.Watson at windriver.com  Wed Feb 24 07:31:59 2010
From: David.Watson at windriver.com (Watson, David)
Date: Wed, 24 Feb 2010 06:31:59 -0800
Subject: [Twisted-Python] Reactor events help request ..
In-Reply-To: <20100224070100.GT18546@steerpike.home.puzzling.org>
References: <58BD0469C48A7443A479A13D101685E303EA8F0B@ala-mail09.corp.ad.wrs.com>
	<20100224070100.GT18546@steerpike.home.puzzling.org>
Message-ID: <58BD0469C48A7443A479A13D101685E303EA8F9A@ala-mail09.corp.ad.wrs.com>

Hi Andrew ..

I want to thank you for your help .. I just looked at the link articles that you suggested and that sounds like the correct diagnosis to the problem .. I thought that there was a solution somewhere, I was just not able to find the correct information to aid in finding out what was actually happening .. With your guidance, I think this may be the problem, I'll let you know how I fair out ..

Thanks again for your help, I had just about given up on solving this problem ..

Cheers

Dave W.

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Andrew Bennetts
Sent: Wednesday, February 24, 2010 2:01 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] Reactor events help request ..

Watson, David wrote:
[...]
>    However, it appears to me that the self.sendLine(msg)  and or the
>    self.transport.write(msg) writing  functions are blocked
>    functions waiting for a reactor event to occur at a future scheduled time
>    before acutally flushing out the internal write buffers ..

This sounds very much like you are calling Twisted APIs from threads (other than the thread the reactor is running in).  If so, that's your problem.  See <http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#WhydoesittakealongtimefordataIsendwithtransport.writetoarriveattheothersideoftheconnection>
and <http://twistedmatrix.com/documents/current/core/howto/threading.html>.

-Andrew.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From kevin.horn at gmail.com  Wed Feb 24 09:01:45 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 24 Feb 2010 10:01:45 -0600
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <562bcc11002221023t186f64feqfc1e87dca7c6376c@mail.gmail.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<562bcc11002221023t186f64feqfc1e87dca7c6376c@mail.gmail.com>
Message-ID: <562bcc11002240801q1448aa3ewa81ebafb5a368f7b@mail.gmail.com>

On Mon, Feb 22, 2010 at 12:23 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Sun, Feb 21, 2010 at 9:50 PM, Jonathan Lange <jml at mumak.net> wrote:
>
>> Live from PyCon Atlanta, I'm pleased to herald the approaching
>> footsteps of the 10.0 release.
>>
>> Tarballs for the first Twisted 10.0.0 pre-release are now available at:
>>  http://people.canonical.com/~jml/Twisted/<http://people.canonical.com/%7Ejml/Twisted/>
>>
>> This release is the first release ever with the new NEWS building
>> system, which turns out to be utterly fantastic.
>>
>> We're also using this release to actually hammer out a release
>> process. You can find the draft at:
>>  http://twistedmatrix.com/trac/wiki/ReleaseProcess
>>
>> Please feel free to update it with questions, thoughts, corrections and
>> advice.
>>
>>
> Here's a few...perhaps these should be added to the "Open Questions"
> section:
>
> 1. How/when in this process are the Windows installers and/or MacOS .dmg
> files created?
>    (I presume .deb and .rpm packages are left up to Linux distro packagers)
> 2. How/when in this process are the docs built?
> 3. When should the front page of the wiki be updated?
>
>
>> Thanks,
>> jml
>>
>>
> No, thank _you_. :)
>
> Kevin Horn
>
>
Here's one more:

Document how and when to tag releases in SVN.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100224/aa613dec/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Feb 24 07:23:33 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 24 Feb 2010 09:23:33 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
Message-ID: <7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>


On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote:

> Hello everyone,
> I have done something similar to this, but I used the children IO
> stream to control them. Maybe I should have done that using some
> higher level protocol, such as AMP or PB.

Using a higher-level protocol is generally better, if for no other reason that it gives you a framework within which to document your design decisions.  It's much easier to say "An AMP command with a 'foo' String argument and a 'bar' Integer argument" than to say "The first two bytes of the message are the length of the first argument.  The next n bytes are the first argument.  The first argument shall be interpreted as... (etc, etc)"

> (I think AMP is more robust than PB, though)

Why do you say that?  I think AMP is simpler than PB, but PB works pretty well if you need its functionality.




From glyph at twistedmatrix.com  Wed Feb 24 07:31:50 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 24 Feb 2010 09:31:50 -0500
Subject: [Twisted-Python] Sending jpeg data over TCP/IP
In-Reply-To: <60ed19d41002220613n504ccbf5i467e94052d0c9ce2@mail.gmail.com>
References: <321817.5815.qm@web112504.mail.gq1.yahoo.com>
	<60ed19d41002220613n504ccbf5i467e94052d0c9ce2@mail.gmail.com>
Message-ID: <B39CD44A-BFEE-4BD0-8CF7-905F8286B28E@twistedmatrix.com>


On Feb 22, 2010, at 9:13 AM, Christopher Armstrong wrote:

> On Mon, Feb 22, 2010 at 2:03 AM, gary clark <burslem2001 at yahoo.com> wrote:
>> The correct way I think is to use base64 and just one connection after more research. Good to research.
>> 
>> Thanks,
>> Garyc
> 
> No, base64ing file contents is a terrible thing to do if you're
> already writing your own TCP-based protocol. Just length-prefix the
> data.

In Twisted, lots of classes exist to help you do this.  For simple length prefixing, have a look at any of the *stringReceiver classes in twisted.protocols.basic.  (NetstringReceiver, Int32StringReceiver, etc)

You can transmit binary data over many higher-level protocols as well; HTTP can handle binary entity-bodies just fine, as can twisted's "native" protocools, PB and AMP.





From glyph at twistedmatrix.com  Wed Feb 24 09:20:19 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 24 Feb 2010 11:20:19 -0500
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <4B84A4D9.4030806@commsecure.com.au>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>	<1266811029.2532.177.camel@kratos>	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>	<4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>	<4B84A0E7.4010206@commsecure.com.au>
	<E16B26FF-E770-45CB-9CEA-0F1D126A2844@fuhm.net>
	<4B84A4D9.4030806@commsecure.com.au>
Message-ID: <A0F41B04-228F-442C-938F-767ED916F0B2@twistedmatrix.com>


On Feb 23, 2010, at 11:02 PM, Tim Allen wrote:

> On 02/24/2010 02:56 PM, James Y Knight wrote:
>> On Feb 23, 2010, at 10:45 PM, Tim Allen wrote:
>>> On 02/24/2010 02:21 PM, Glyph Lefkowitz wrote:
>>>> Here's a not-so-official link to the 10.0.0 prerelease NEWS:
>>>> 
>>>> http://twistedmatrix.com/trac/browser/branches/release-x-4290/NEWS?format=raw
>>> 
>>> It seems a pity that the "other fixes" bug numbers aren't URLs to the
>>> bugs in question, but I suppose that would make them take up an awful
>>> lot of room in plain-text.
>> 
>> Yeah: an auto-HTMLized version to put on the website would be nice,
>> even if the only change was to add links for the ticket numbers.
> 
> If the text version were Trac-markup, presumably it would be possible to 
> automate creating a /trac/Releases/x.y.z/ReleaseNotes wiki page, and all 
> the bug numbers would become links as per the usual Trac magic.

Much as I don't like ReST, it's a heck of a lot better than trac markup.  You can't really manipulate trac markup with anything but trac, but ReST gives you all of docutils.

If we used ReST, we could integrate it with the rest of the documentation once lore's gone, and we can use the {{{<<<###$$$<html> syntax that Trac has (I was offline while writing this email, sorry that's not exact) to get it into the wiki.





From rich at noir.com  Wed Feb 24 13:04:31 2010
From: rich at noir.com (K. Richard Pixley)
Date: Wed, 24 Feb 2010 12:04:31 -0800
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
References: <1266777801.2532.176.camel@kratos>	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
Message-ID: <4B85864F.6090301@noir.com>

Glyph Lefkowitz wrote:
> On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote
>> Hello everyone,
>> I have done something similar to this, but I used the children IO
>> stream to control them. Maybe I should have done that using some
>> higher level protocol, such as AMP or PB.
>>     
> Using a higher-level protocol is generally better, if for no other reason that it gives you a framework within which to document your design decisions.  It's much easier to say "An AMP command with a 'foo' String argument and a 'bar' Integer argument" than to say "The first two bytes of the message are the length of the first argument.  The next n bytes are the first argument.  The first argument shall be interpreted as... (etc, etc)"
I'm working on an interface right now to the spread toolkit, 
(http://spread.org), which implements virtual synchrony, 
(http://en.wikipedia.org/wiki/Virtual_synchrony).

For distributed, symmetric, fault tolerant parallelism in small to 
medium scale with high reliability, this might be an option.

--rich
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100224/1c14125a/attachment.html>

From twisted at ralphm.ik.nu  Wed Feb 24 13:08:46 2010
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Wed, 24 Feb 2010 21:08:46 +0100
Subject: [Twisted-Python] [ANNOUNCE] Twisted 10.0.0pre1 is now released
In-Reply-To: <A0F41B04-228F-442C-938F-767ED916F0B2@twistedmatrix.com>
References: <d06a5cd31002211850t3dc3da64g2d3bb6e8e902a34d@mail.gmail.com>
	<1266811029.2532.177.camel@kratos>
	<d06a5cd31002212008h1d61ee49t596893d98a15b438@mail.gmail.com>
	<4B7029ED-5918-40BC-B288-6ABB73EBF5BC@twistedmatrix.com>
	<4B84A0E7.4010206@commsecure.com.au>
	<E16B26FF-E770-45CB-9CEA-0F1D126A2844@fuhm.net>
	<4B84A4D9.4030806@commsecure.com.au>
	<A0F41B04-228F-442C-938F-767ED916F0B2@twistedmatrix.com>
Message-ID: <1267042126.7668.6.camel@dwaal>

On Wed, 2010-02-24 at 11:20 -0500, Glyph Lefkowitz wrote:
> [..]
>
> Much as I don't like ReST, it's a heck of a lot better than trac markup.  You can't really manipulate trac markup with anything but trac, but ReST gives you all of docutils.
> 
> If we used ReST, we could integrate it with the rest of the documentation once lore's gone, and we can use the {{{<<<###$$$<html> syntax that Trac has (I was offline while writing this email, sorry that's not exact) to get it into the wiki.

By default, there should be a ReST handler in Trac, if docutils is
installed. This can be used with {{{#!rst ...}}}.

ralphm 




From darren at ontrenet.com  Wed Feb 24 13:11:11 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Wed, 24 Feb 2010 15:11:11 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B85864F.6090301@noir.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com>
Message-ID: <1267042271.2532.200.camel@kratos>

Looks interesting. I'm going to check out that package.


My original request was more along the lines of using Python's new
support for native CPU core's and processes (the multiprocessing package
is for this). Python's built-in thread support has global lock
constraints that underperform in some situations.

But I ran into a problem using multiprocessing module with Twisted that
was pointed out on the Twisted trac with pickling class methods and
apparently Python's CPU threading support attempts to do this in some
situations (e.g. when I try to pass a class method to a native thread).

On Wed, 2010-02-24 at 12:04 -0800, K. Richard Pixley wrote:

> Glyph Lefkowitz wrote: 
> 
> > On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote
> > 
> > > Hello everyone,
> > > I have done something similar to this, but I used the children IO
> > > stream to control them. Maybe I should have done that using some
> > > higher level protocol, such as AMP or PB.
> > >     
> > 
> > Using a higher-level protocol is generally better, if for no other reason that it gives you a framework within which to document your design decisions.  It's much easier to say "An AMP command with a 'foo' String argument and a 'bar' Integer argument" than to say "The first two bytes of the message are the length of the first argument.  The next n bytes are the first argument.  The first argument shall be interpreted as... (etc, etc)"
> 
> I'm working on an interface right now to the spread toolkit,
> (http://spread.org), which implements virtual synchrony,
> (http://en.wikipedia.org/wiki/Virtual_synchrony).
> 
> For distributed, symmetric, fault tolerant parallelism in small to
> medium scale with high reliability, this might be an option.
> 
> --rich
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100224/42cc609b/attachment.html>

From t.bordemann at web.de  Wed Feb 24 13:27:35 2010
From: t.bordemann at web.de (Tim Bordemann)
Date: Wed, 24 Feb 2010 21:27:35 +0100 (CET)
Subject: [Twisted-Python] Newbie question: Is this possible with twisted?
In-Reply-To: <383673302.0.1267042460421.JavaMail.root@mail.onvalue.de>
Message-ID: <1067095596.2.1267043255773.JavaMail.root@mail.onvalue.de>

Hi,

first of all: I've no experience with network-programming yet, but need to go in for creating a "simple" client-server application.
In the end I'd like to connect a web-form (django) with a twisted-server, which then should do some long-lasting calculations.

So far I got a simple xmlrpc-server, which "defers" the calculation to a new thread and a client which sends the initial request to do the calculation. Though I have the problem that the client stays connected until the calculations are done.

Could someone tell me if it's somehow possible to disconnect the client right after sending the request to the server?

Thanks,
Tim



From rlotun at gmail.com  Wed Feb 24 13:40:44 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Wed, 24 Feb 2010 20:40:44 +0000
Subject: [Twisted-Python] Newbie question: Is this possible with twisted?
In-Reply-To: <1067095596.2.1267043255773.JavaMail.root@mail.onvalue.de>
References: <383673302.0.1267042460421.JavaMail.root@mail.onvalue.de>
	<1067095596.2.1267043255773.JavaMail.root@mail.onvalue.de>
Message-ID: <95bb10691002241240j76d3ab70i8ce52e069308548f@mail.gmail.com>

Hi Tim,

> first of all: I've no experience with network-programming yet, but need to go in for creating a "simple" client-server application.

No problem.

> In the end I'd like to connect a web-form (django) with a twisted-server, which then should do some long-lasting calculations.
>
> So far I got a simple xmlrpc-server, which "defers" the calculation to a new thread and a client which sends the initial request to do the calculation. Though I have the problem that the client stays connected until the calculations are done.

Keep in mind you can run this "calculation server" as a separate
server-process and connect to it via loopback (localhost:SOME_PORT).
This makes it easier to put it on another machine one day without
changing the code.

Also, if you're doing a blocking calculation in Python (i.e. if it's
not a special C-module), then because of the Python Global Interpreter
Lock (GIL), you're not going to be able to paralllelise that
calculation effectively.

> Could someone tell me if it's somehow possible to disconnect the client right after sending the request to the server?

Well, it depends. Does the client need the result of that calculation?
Probably not, so what you can do is issue a job id back to the client,
and associate the job id to the result of that job. This is all very
doable in Twisted.

However, I'm going to suggest something different, which seems like a
better fit for what you're trying to do. Check out Celery
(http://celeryproject.org/) which is a distributed task queue. The
idea is that you set up a queue system, like RabbitMQ, which implement
a job queue via Celery. You write tasks as Python functions in a
module somewhere. When a client connects, you issue a task, and return
the task id back to the client. By and by the job is picked up by some
worker, and the result is stored in some persistent database, like
MySQL or Redis. Celery also has excellent integration with Django.

Hope that helps you out.

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From markscottwright at gmail.com  Wed Feb 24 13:46:45 2010
From: markscottwright at gmail.com (Mark Wright)
Date: Wed, 24 Feb 2010 14:46:45 -0600
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B85864F.6090301@noir.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com>
Message-ID: <db986be81002241246y4fc9e9aaqf129f07e48911e1a@mail.gmail.com>

Weird, I was looking into doing something similar for the Paxos
algorithm (http://en.wikipedia.org/wiki/Paxos_algorithm), but I
decided I didn't have the time right now.

If you haven't, I recommend that you check out Paxos Made Live:
http://labs.google.com/papers/paxos_made_live.html

That paper has some nice details about google's experience
implementing a production quality Paxos library - most importantly,
don't let the simplicity of the algorithm mislead you into thinking
that a real implementation will also be simple.  I found it a little
depressing...

On Wed, Feb 24, 2010 at 2:04 PM, K. Richard Pixley <rich at noir.com> wrote:
> Glyph Lefkowitz wrote:
>
> On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote
>
> Hello everyone,
> I have done something similar to this, but I used the children IO
> stream to control them. Maybe I should have done that using some
> higher level protocol, such as AMP or PB.
>
>
> Using a higher-level protocol is generally better, if for no other reason
> that it gives you a framework within which to document your design
> decisions.  It's much easier to say "An AMP command with a 'foo' String
> argument and a 'bar' Integer argument" than to say "The first two bytes of
> the message are the length of the first argument.  The next n bytes are the
> first argument.  The first argument shall be interpreted as... (etc, etc)"
>
> I'm working on an interface right now to the spread toolkit,
> (http://spread.org), which implements virtual synchrony,
> (http://en.wikipedia.org/wiki/Virtual_synchrony).
>
> For distributed, symmetric, fault tolerant parallelism in small to medium
> scale with high reliability, this might be an option.
>
> --rich
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



-- 
Mark Wright
markscottwright at gmail.com



From termim at gmail.com  Wed Feb 24 14:03:20 2010
From: termim at gmail.com (Mikhail Terekhov)
Date: Wed, 24 Feb 2010 16:03:20 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B85864F.6090301@noir.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com>
Message-ID: <12aaa0811002241303n53d8ebfeg3665628015fc8a0b@mail.gmail.com>

On Wed, Feb 24, 2010 at 3:04 PM, K. Richard Pixley <rich at noir.com> wrote:
>
> I'm working on an interface right now to the spread toolkit,
> (http://spread.org), which implements virtual synchrony,
> (http://en.wikipedia.org/wiki/Virtual_synchrony).
>
> For distributed, symmetric, fault tolerant parallelism in small to medium
> scale with high reliability, this might be an option.
>

Are you working on the twisted's interface to Spread or on python-Spread
interface like http://zope.org/Members/tim_one/spread ?

Regards,
-- 
Mikhail Terekhov



From t.bordemann at web.de  Wed Feb 24 14:06:38 2010
From: t.bordemann at web.de (Tim Bordemann)
Date: Wed, 24 Feb 2010 22:06:38 +0100
Subject: [Twisted-Python] Newbie question: Is this possible with twisted?
In-Reply-To: <95bb10691002241240j76d3ab70i8ce52e069308548f@mail.gmail.com>
References: <383673302.0.1267042460421.JavaMail.root@mail.onvalue.de>
	<1067095596.2.1267043255773.JavaMail.root@mail.onvalue.de>
	<95bb10691002241240j76d3ab70i8ce52e069308548f@mail.gmail.com>
Message-ID: <1267045598.10278.2.camel@tim-laptop>

Hi Reza.

> However, I'm going to suggest something different, which seems like a
> better fit for what you're trying to do. Check out Celery
> (http://celeryproject.org/) which is a distributed task queue. The
> idea is that you set up a queue system, like RabbitMQ, which implement
> a job queue via Celery. You write tasks as Python functions in a
> module somewhere. When a client connects, you issue a task, and return
> the task id back to the client. By and by the job is picked up by some
> worker, and the result is stored in some persistent database, like
> MySQL or Redis. Celery also has excellent integration with Django.

Great, this seems to be exactly what I am searching for. :)

Cheers,
Tim





From matusis at yahoo.com  Wed Feb 24 14:57:16 2010
From: matusis at yahoo.com (Alec Matusis)
Date: Wed, 24 Feb 2010 13:57:16 -0800
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <4B838615.8060205@thiengineering.ch>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>	<4B7F284B.70801@thiengineering.ch>	<007601cab42a$d4c755e0$7e5601a0$@com>	<201002230324.24883.maarten@treewalker.org>	<007401cab44a$42294160$c67bc420$@com>
	<4B838615.8060205@thiengineering.ch>
Message-ID: <005701cab59c$548fdb40$fdaf91c0$@com>

In desperation of not finding the real memory leak on the production server,

I wrote a test server that I can push to arbitrary high RSS memory. I am far
from sure if this the same leak that I observe in production, but I would
like to understand what this one is. 
This is the server code:

Server.py:

import twisted.protocols.basic
from twisted.internet.protocol import Factory
from twisted.internet import reactor
        
class HiRate(twisted.protocols.basic.LineOnlyReceiver):
        MAX_LENGTH = 20000
        
        def lineReceived(self, line):
                if line == 'get':
                        out = 'a'*4000+'\r\r' 
                        self.transport.write(out)
        
                
                
factory = Factory()
factory.protocol = HiRate
        
reactor.listenTCP(8007, factory, backlog=50, interface='10.18.0.2')
reactor.run()   

This server has to be flooded by "get" requests from this client:

Client.py:

import socket, time

HOST='10.18.0.2'
PORT=8007
def client():
    """high rate client, needs a dedicated CPU to run"""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect((HOST,PORT))
    except socket.error, e:
        print 'client error is %s' %e
        return
    n=0
    while 1:
        #print "iter %s" %n
        #time.sleep(.001)
        s.send('get\r\n')
        s.setblocking(0)
        try:
            r = s.recv(1024)
        except:
            r=0
        while r:
            #print r
            try:
                r=s.recv(1024)
            except socket.error, e:
                r=0
        s.setblocking(1)
        n+=1

client()

To reproduce the memory leak, I either need two machines with fast LAN
between them (since the client program takes 100% CPU), or possibly one
machine with a dual core CPU (I have not tried that). It is important that
client.py is given a separate CPU to run.
When the length of the response from the server is sufficient,  (out =
'a'*4000+'\r\r' ,  4000 is enough in my case), the RSS of the server process
starts to leak without a bound.
If you introduce a small delay in the client (#time.sleep(.001)), the leak
does not occur.

Looking at tcpdump on the server machine, I sometimes see many "get" packets
from the client in a row, that are not followed by response packets from the
server with payload 'aaaaa...'.  Only when the server is in this
"overwhelmed" state, the memory seems to grow unbounded.
I first thought it may be an issue of the unbounded send queue on the
server, but the examination of Send-Q with netstat shows that Send-Q
saturates to a certain ceiling value, while the RSS memory of the server
process continues to grow.  

Here are some commands I was using to watch the parameters of the server:
Watch send-Q and recv-Q:
root$ watch -n1 netstat -an 
RSS memory of the server:
root$ watch -n1 ps -orss -p`netstat -nlp | grep :8007 | awk '{print $7}' |
cut -d/ -f1`
Traffic to/from the server:
root$ tcpdump -A -s10024 -nn -i eth1 'port 8007' (in my case I use eth1 for
LAN to the client)

> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] On Behalf Of Werner Thie
> Sent: Monday, February 22, 2010 11:39 PM
> To: Twisted general discussion
> Subject: Re: [Twisted-Python] debugging a memory leak
> 
> Hi
> 
> Assuming that if memory not released to the OS can be reused by the
> interpreter because of a suballocation system used in the interpreter
> should eventually lead to a leveling out of the overall memory usage
> over time, that's what I observe with our processes (sitting at several
> 100 MB per process). We are using external C libraries which do lots of
> malloc/free and one of the bigger sources of pain is indeed to bring
> such a library to a point where its clean not only by freeing all memory
> allocated in every circumstance but also Python refcounting wise. I
> usually go thru all the motions to build up a complete debug chain for
> all modules involved in a project and write a test bed to proof clean
> and proper implementation.
> 
> So if your using C/C++ based modules in your project I would mark them
> as highly suspicious to be responsible for leaks until proven otherwise.
> 
> Not to bother you with numbers but I usually allocate about 30% of
> overall project time to bring a server into a production ready state,
> meaning uptimes of months/years, no fishy feelings, no performance
> oscillations, predictable caving and recuperating when overloaded, just
> all the things you have to tick to sign off a project as completed,
> meaning you don't have to do daily 'tire kicking' maintenance and
> periodic reboots.
> 
> Werner
> 
> Alec Matusis wrote:
> > Hi Maarten,
> >
> > Your link
> > http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-
> delete-
> > a-large-object.htm
> > seems to suggest that even though the interpreter does not release
memory
> > back to the OS, it can be re-used by the interpreter.
> > If this was our problem, I'd expect the memory to be set by the highest
> > usage, as opposed to it constantly leaking: in my case, the load is
> > virtually constant, but the memory still leaks over time.
> >
> > The environment is Linux 2.6.24 x86-64, the extensions used are MySQLdb,
> > pyCrypto (latest stable releases for both).
> >
> >> -----Original Message-----
> >> From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-
> python-
> >> bounces at twistedmatrix.com] On Behalf Of Maarten ter Huurne
> >> Sent: Monday, February 22, 2010 6:24 PM
> >> To: Twisted general discussion
> >> Subject: Re: [Twisted-Python] debugging a memory leak
> >>
> >> On Tuesday 23 February 2010, Alec Matusis wrote:
> >>
> >>> When I start the process, both python object sizes and their counts
rise
> >>> proportionally to the numbers of reconnected clients, and then they
> >>> stabilize after all clients have reconnected.
> >>> At that moment, the "external" RSS process size is about 260MB. The
> >>> "internal size" of all python objects reported by Heapy is about
150MB.
> >>> After two days, the internal sizes/counts stay the same, but the
> > external
> >>> size grows to 1500MB.
> >>>
> >>> Python object counts/total sizes are measured from the manhole.
> >>> Is this sufficient to conclude that this is a C memory leak in one of
> > the
> >>> external modules or in the Python interpreter itself?
> >> In general, there are other reasons why heap size and RSS size do not
> > match:
> >> 1. pages are empty but not returned to the OS
> >> 2. pages cannot be returned to the OS because they are not completely
> > empty
> >> It seems Python has different allocators for small and large objects:
> >> http://www.mail-archive.com/python-list at python.org/msg256116.html
> >> http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-
> >> delete-
> >> a-large-object.htm
> >>
> >> Assuming Python uses malloc for all its allocations (does it?), it is
the
> >> malloc implementation that determines whether empty pages are returned
> to
> >> the OS. Under Linux with glibc (your system?), empty pages are
returned,
> > so
> >> there reason 1 does not apply.
> >>
> >> Depending on the allocation behaviour of Python, the pages may not be
> >> empty
> >> though, so reason 2 is a likely suspect.
> >>
> >> Python extensions written in C could also leak or fragment memory. Are
> you
> >> using any extensions that are not pure Python?
> >>
> >> Bye,
> >> 		Maarten
> >>
> >> _______________________________________________
> >> Twisted-Python mailing list
> >> Twisted-Python at twistedmatrix.com
> >> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From jml at mumak.net  Thu Feb 25 07:50:12 2010
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 25 Feb 2010 09:50:12 -0500
Subject: [Twisted-Python] Please test 10.0.0pre2!
Message-ID: <d06a5cd31002250650p1e056d9aj9c57675981c776a9@mail.gmail.com>

Hello,

We inch ever closer to the precipice of our collective doom. The sun
will one day burn cold; all things must end; Twisted shall be
released.

I've uploaded 10.0.0pre2 tarballs to
http://people.canonical.com/~jml/Twisted/. The changes since the pre1
are mostly to do with version numbers in documentation, and rolling
back a fix for #3292 that introduced failures on our Fedora test
suite.

I hope to release the final tarball sometime next week.

jml



From rich at noir.com  Thu Feb 25 11:21:03 2010
From: rich at noir.com (K. Richard Pixley)
Date: Thu, 25 Feb 2010 10:21:03 -0800
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <1267042271.2532.200.camel@kratos>
References: <1266777801.2532.176.camel@kratos>	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>	<4B85864F.6090301@noir.com>
	<1267042271.2532.200.camel@kratos>
Message-ID: <4B86BF8F.5050406@noir.com>

Single threaded, event loop based code like twisted rocks hard.

Once upon a time, threads were like that too and the distinction between 
threads and event loops was grey.  But with the advent of mandatory 
preemptive thread scheduling and the ability to run multiple threads on 
separate shared memory processors, the difference between programming 
with threads and programming with parallel heavy weight processes that 
share memory became extremely grey, (aside from the problems debugging 
threads which don't exist for heavy weight processes).

Threads routinely use shared memory and shared memory (generally) 
requires a common kernel.  OTOH, message passing can use a common kernel 
but can also extend out to other machines on the network.  If you use 
twisted for highly efficient "single thread/multiple task" heavy weight 
processes, and something like spread, you end up with the best of all 
worlds.  Highly efficient, symmetric, network based parallelism, with 
fault tolerance thrown in for free.

My point here is that there are other ways to go about exploiting 
symmetric multiprocessor machines, even banks of them, that neither 
require threads, nor the multiprocessing package.

--rich

Darren Govoni wrote:
> Looks interesting. I'm going to check out that package.
>
>
> My original request was more along the lines of using Python's new 
> support for native CPU core's and processes (the multiprocessing 
> package is for this). Python's built-in thread support has global lock 
> constraints that underperform in some situations.
>
> But I ran into a problem using multiprocessing module with Twisted 
> that was pointed out on the Twisted trac with pickling class methods 
> and apparently Python's CPU threading support attempts to do this in 
> some situations (e.g. when I try to pass a class method to a native 
> thread).
>
> On Wed, 2010-02-24 at 12:04 -0800, K. Richard Pixley wrote:
>> Glyph Lefkowitz wrote:
>>> On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote
>>>       
>>>> Hello everyone,
>>>> I have done something similar to this, but I used the children IO
>>>> stream to control them. Maybe I should have done that using some
>>>> higher level protocol, such as AMP or PB.
>>>>     
>>>>         
>>> Using a higher-level protocol is generally better, if for no other reason that it gives you a framework within which to document your design decisions.  It's much easier to say "An AMP command with a 'foo' String argument and a 'bar' Integer argument" than to say "The first two bytes of the message are the length of the first argument.  The next n bytes are the first argument.  The first argument shall be interpreted as... (etc, etc)"
>>>       
>> I'm working on an interface right now to the spread toolkit, 
>> (http://spread.org), which implements virtual synchrony, 
>> (http://en.wikipedia.org/wiki/Virtual_synchrony).
>>
>> For distributed, symmetric, fault tolerant parallelism in small to 
>> medium scale with high reliability, this might be an option.
>>
>> --rich
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>     
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100225/3702680b/attachment.html>

From rich at noir.com  Thu Feb 25 11:48:31 2010
From: rich at noir.com (K. Richard Pixley)
Date: Thu, 25 Feb 2010 10:48:31 -0800
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <12aaa0811002241303n53d8ebfeg3665628015fc8a0b@mail.gmail.com>
References: <1266777801.2532.176.camel@kratos>	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>	<4B85864F.6090301@noir.com>
	<12aaa0811002241303n53d8ebfeg3665628015fc8a0b@mail.gmail.com>
Message-ID: <4B86C5FF.50701@noir.com>

Mikhail Terekhov wrote:
> On Wed, Feb 24, 2010 at 3:04 PM, K. Richard Pixley <rich at noir.com> wrote:
>   
>> I'm working on an interface right now to the spread toolkit,
>> (http://spread.org), which implements virtual synchrony,
>> (http://en.wikipedia.org/wiki/Virtual_synchrony).
>>
>> For distributed, symmetric, fault tolerant parallelism in small to medium
>> scale with high reliability, this might be an option
> Are you working on the twisted's interface to Spread or on python-Spread
> interface like http://zope.org/Members/tim_one/spread ?
I'm using http://zope.org/Members/tim_one/spread (aka, the debian 
package python-spread, aka the python package SpreadModule), and twisted 
to produce a new, extended interface to twisted.

I'm not sure how long SpreadModule will work for me, but aside from some 
minor questions, (unicode group names, nonblocking IO, 
copying/subclassing it's message types), it's holding up so far.

--rich
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100225/1f706d10/attachment.html>

From rich at noir.com  Thu Feb 25 11:50:19 2010
From: rich at noir.com (K. Richard Pixley)
Date: Thu, 25 Feb 2010 10:50:19 -0800
Subject: [Twisted-Python] python3 story?
Message-ID: <4B86C66B.8010609@noir.com>

Does twisted have a python3 story?

Whatever it is, it should probably be in the release 10 doc and perhaps 
also on the web site.

--rich



From mithrandi at mithrandi.net  Thu Feb 25 11:59:46 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 25 Feb 2010 20:59:46 +0200
Subject: [Twisted-Python] python3 story?
In-Reply-To: <4B86C66B.8010609@noir.com>
References: <4B86C66B.8010609@noir.com>
Message-ID: <f5eea9171002251059y6eab5c25ja1b541f38af6b2d@mail.gmail.com>

On Thu, Feb 25, 2010 at 8:50 PM, K. Richard Pixley <rich at noir.com> wrote:
> Does twisted have a python3 story?

http://stackoverflow.com/questions/172306/how-are-you-planning-on-handling-the-migration-to-python-3/214601#214601
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From jml at mumak.net  Thu Feb 25 14:39:52 2010
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 25 Feb 2010 16:39:52 -0500
Subject: [Twisted-Python] PyCon sprint 2010
Message-ID: <d06a5cd31002251339m73a804a2pe6cc18d320fa35ef@mail.gmail.com>

Hey guys,

There's a bunch of cool stuff on
http://twistedmatrix.com/trac/wiki/PyconSprint2010 about what we did
at the sprint in PyCon.

I want to write this up & blog about it for labs.tm.com, but before I
do that, I'd like you to look at that page and tell me if anything is
missing -- no matter how small. In particular, if you attended and
your name isn't there, I want to hear from you.

Thanks,
jml



From darren at ontrenet.com  Thu Feb 25 14:43:52 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Thu, 25 Feb 2010 16:43:52 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B86BF8F.5050406@noir.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com> <1267042271.2532.200.camel@kratos>
	<4B86BF8F.5050406@noir.com>
Message-ID: <1267134232.2532.222.camel@kratos>

The nice thing about using Python's process support is that you can
spawn native Processes that run in separate heaps directly from ONE
Python Twisted app. Not many running side-by-side, which adds the
complexity of now coordinating among them (however easy with additional
protocols like spread).

Inter-Process communication is also supported in Python's new
multiprocessing package. And again, it can all be orchestrated from a
single service _instance_.

In my code, I need to run "on the metal" for some tasks and not others.
Agreed, the event-based reactor threading in Twisted is great.
But not for all modes of computation. For those, I offload onto OS
processes directly onto CPU cores. Twisted does not provide a way to
leverage its API against Python's support for this feature. So I have to
find a way to marry the two.

What I ended up doing was using the multiprocess package to kick off
hard Process objects in a Python Process pool executing Python
functions.

Those functions make calls into Twisted, but for it to work, they had to
start their own reactors because a Process has its own, separate OS
memory, etc. Running compute intensive tasks in processes with their own
memory makes a lot of sense for some things that Python cannot do with
virtual machine thread contexts.

Darren

On Thu, 2010-02-25 at 10:21 -0800, K. Richard Pixley wrote:

> Single threaded, event loop based code like twisted rocks hard.
> 
> Once upon a time, threads were like that too and the distinction
> between threads and event loops was grey.  But with the advent of
> mandatory preemptive thread scheduling and the ability to run multiple
> threads on separate shared memory processors, the difference between
> programming with threads and programming with parallel heavy weight
> processes that share memory became extremely grey, (aside from the
> problems debugging threads which don't exist for heavy weight
> processes).
> 
> Threads routinely use shared memory and shared memory (generally)
> requires a common kernel.  OTOH, message passing can use a common
> kernel but can also extend out to other machines on the network.  If
> you use twisted for highly efficient "single thread/multiple task"
> heavy weight processes, and something like spread, you end up with the
> best of all worlds.  Highly efficient, symmetric, network based
> parallelism, with fault tolerance thrown in for free.
> 
> My point here is that there are other ways to go about exploiting
> symmetric multiprocessor machines, even banks of them, that neither
> require threads, nor the multiprocessing package.
> 
> --rich
> 
> Darren Govoni wrote: 
> 
> > Looks interesting. I'm going to check out that package.
> > 
> > 
> > My original request was more along the lines of using Python's new
> > support for native CPU core's and processes (the multiprocessing
> > package is for this). Python's built-in thread support has global
> > lock constraints that underperform in some situations.
> > 
> > But I ran into a problem using multiprocessing module with Twisted
> > that was pointed out on the Twisted trac with pickling class methods
> > and apparently Python's CPU threading support attempts to do this in
> > some situations (e.g. when I try to pass a class method to a native
> > thread).
> > 
> > On Wed, 2010-02-24 at 12:04 -0800, K. Richard Pixley wrote:
> > 
> > > Glyph Lefkowitz wrote: 
> > > 
> > > > On Feb 21, 2010, at 8:00 PM, Alexandre Quessy wrote
> > > >       
> > > > 
> > > > > Hello everyone,
> > > > > I have done something similar to this, but I used the children IO
> > > > > stream to control them. Maybe I should have done that using some
> > > > > higher level protocol, such as AMP or PB.
> > > > >     
> > > > >         
> > > > 
> > > > Using a higher-level protocol is generally better, if for no other reason that it gives you a framework within which to document your design decisions.  It's much easier to say "An AMP command with a 'foo' String argument and a 'bar' Integer argument" than to say "The first two bytes of the message are the length of the first argument.  The next n bytes are the first argument.  The first argument shall be interpreted as... (etc, etc)"
> > > >       
> > > 
> > > I'm working on an interface right now to the spread toolkit,
> > > (http://spread.org), which implements virtual synchrony,
> > > (http://en.wikipedia.org/wiki/Virtual_synchrony).
> > > 
> > > For distributed, symmetric, fault tolerant parallelism in small to
> > > medium scale with high reliability, this might be an option.
> > > 
> > > --rich 
> > > 
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >     
> > 
> > 
> > 
> > 
> > ____________________________________________________________________
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >   
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100225/0dc7336e/attachment.html>

From kevin.horn at gmail.com  Thu Feb 25 15:14:35 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 25 Feb 2010 16:14:35 -0600
Subject: [Twisted-Python] PyCon sprint 2010
In-Reply-To: <d06a5cd31002251339m73a804a2pe6cc18d320fa35ef@mail.gmail.com>
References: <d06a5cd31002251339m73a804a2pe6cc18d320fa35ef@mail.gmail.com>
Message-ID: <562bcc11002251414o1b7cfda8s33f4575ebdf666d8@mail.gmail.com>

I was there a bit Sunday night and most of Monday sprinting on the
lore->sphinx docs conversion.  It's _almost_ done.  No really, I mean it!

Kevin Horn (khorn on irc)

On Thu, Feb 25, 2010 at 3:39 PM, Jonathan Lange <jml at mumak.net> wrote:

> Hey guys,
>
> There's a bunch of cool stuff on
> http://twistedmatrix.com/trac/wiki/PyconSprint2010 about what we did
> at the sprint in PyCon.
>
> I want to write this up & blog about it for labs.tm.com, but before I
> do that, I'd like you to look at that page and tell me if anything is
> missing -- no matter how small. In particular, if you attended and
> your name isn't there, I want to hear from you.
>
> Thanks,
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100225/72f28e65/attachment.html>

From drew.smathers at gmail.com  Thu Feb 25 15:39:45 2010
From: drew.smathers at gmail.com (Drew Smathers)
Date: Thu, 25 Feb 2010 17:39:45 -0500
Subject: [Twisted-Python] PyCon sprint 2010
In-Reply-To: <d06a5cd31002251339m73a804a2pe6cc18d320fa35ef@mail.gmail.com>
References: <d06a5cd31002251339m73a804a2pe6cc18d320fa35ef@mail.gmail.com>
Message-ID: <368574aa1002251439s71220963k88db7dc743090c37@mail.gmail.com>

On Thu, Feb 25, 2010 at 4:39 PM, Jonathan Lange <jml at mumak.net> wrote:

> [snip]

In particular, if you attended and your name isn't there, I want to hear
> from you.
>
>
Hey, I was there for the spring Monday night doing very little beyond
getting acquainted with the review process and submitting a few patches for
some "easy" bugs.  Thanks to the Twisted developers for organizing this
sprint.

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100225/08c40010/attachment.html>

From johann.borck at densedata.com  Thu Feb 25 18:13:00 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 26 Feb 2010 01:13:00 +0000
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <1267134232.2532.222.camel@kratos>
References: <1266777801.2532.176.camel@kratos>	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>	<4B85864F.6090301@noir.com>
	<1267042271.2532.200.camel@kratos>	<4B86BF8F.5050406@noir.com>
	<1267134232.2532.222.camel@kratos>
Message-ID: <4B87201C.1030809@densedata.com>

Darren Govoni wrote:
> The nice thing about using Python's process support is that you can 
> spawn native Processes that run in separate heaps directly from ONE 
> Python Twisted app. Not many running side-by-side, which adds the 
> complexity of now coordinating among them (however easy with 
> additional protocols like spread).
>
> Inter-Process communication is also supported in Python's new 
> multiprocessing package. And again, it can all be orchestrated from a 
> single service _instance_.
>
> In my code, I need to run "on the metal" for some tasks and not 
> others. Agreed, the event-based reactor threading in Twisted is great.
> But not for all modes of computation. For those, I offload onto OS 
> processes directly onto CPU cores. Twisted does not provide a way to 
> leverage its API against Python's support for this feature. 
But twisted provides this feature *itself*, and has done so long before 
the multiprocessing module existed - look at Process Protocol 
http://twistedmatrix.com/documents/current/core/howto/process.html and 
the stdio stuff: 
http://twistedmatrix.com/documents/current/core/examples/stdiodemo.py, 
or, as has been mentioned before, ampoule. Of course, if you get 
multiprocess to work with twisted, that's fine, but you're probably 
unnecessarily adding complexity to your application while substracting 
compatibility with python versions  before 2.6 for no good reason, at 
least none you mentioned so far.

regards,
Johann



From johann.borck at densedata.com  Thu Feb 25 18:24:13 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 26 Feb 2010 01:24:13 +0000
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <005701cab59c$548fdb40$fdaf91c0$@com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>	<4B7F284B.70801@thiengineering.ch>	<007601cab42a$d4c755e0$7e5601a0$@com>	<201002230324.24883.maarten@treewalker.org>	<007401cab44a$42294160$c67bc420$@com>	<4B838615.8060205@thiengineering.ch>
	<005701cab59c$548fdb40$fdaf91c0$@com>
Message-ID: <4B8722BD.2060900@densedata.com>

Alec Matusis wrote:
> In desperation of not finding the real memory leak on the production server,
>
> I wrote a test server that I can push to arbitrary high RSS memory. I am far
> from sure if this the same leak that I observe in production, but I would
> like to understand what this one is. 
> This is the server code:
>
> Server.py:
>
> import twisted.protocols.basic
> from twisted.internet.protocol import Factory
> from twisted.internet import reactor
>         
> class HiRate(twisted.protocols.basic.LineOnlyReceiver):
>         MAX_LENGTH = 20000
>         
>         def lineReceived(self, line):
>                 if line == 'get':
>                         out = 'a'*4000+'\r\r' 
>                         self.transport.write(out)
>         
>                 
>                 
> factory = Factory()
> factory.protocol = HiRate
>         
> reactor.listenTCP(8007, factory, backlog=50, interface='10.18.0.2')
> reactor.run()   
> [...]
> To reproduce the memory leak, I either need two machines with fast LAN
> between them (since the client program takes 100% CPU), or possibly one
> machine with a dual core CPU (I have not tried that). It is important that
> client.py is given a separate CPU to run.
> When the length of the response from the server is sufficient,  (out =
> 'a'*4000+'\r\r' ,  4000 is enough in my case), the RSS of the server process
> starts to leak without a bound.
> If you introduce a small delay in the client (#time.sleep(.001)), the leak
> does not occur.
>
>   
Hi Alec,
I wouldn't call that a memory leak. In your example  ( SC/s = (n* CS) / 
s ;  n > 1, SC: bytes sent to the client, CS: bytes sent to the server ) 
there is some CS that satifies the condition SC/s > [available 
bandwidth]. For all CS that exceed that limit, the data will be first 
queued in the Send-Q of the socket and then inside twisted, because the 
Send-Q is full. That's the reason why you see increasing memory usage, 
but it's not a leak, it is a server that can not cope with this kind of 
DOS attack. Twisted can not handle this situation for you because that 
would mean it had to decide which packets, connections, etc. to drop. 
Such decisions have to be made by your application.

regards,
Johann




From exarkun at twistedmatrix.com  Thu Feb 25 17:50:59 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 26 Feb 2010 00:50:59 -0000
Subject: [Twisted-Python] debugging a memory leak
In-Reply-To: <4B8722BD.2060900@densedata.com>
References: <01a701cab1b6$3a039d00$ae0ad700$@com>
	<4B7F284B.70801@thiengineering.ch>
	<007601cab42a$d4c755e0$7e5601a0$@com>
	<201002230324.24883.maarten@treewalker.org>
	<007401cab44a$42294160$c67bc420$@com>
	<4B838615.8060205@thiengineering.ch>
	<005701cab59c$548fdb40$fdaf91c0$@com>
	<4B8722BD.2060900@densedata.com>
Message-ID: <20100226005059.2792.1034517271.divmod.xquotient.93@localhost.localdomain>

On 01:24 am, johann.borck at densedata.com wrote:
>Alec Matusis wrote:
>>In desperation of not finding the real memory leak on the production 
>>server,
>>
>>I wrote a test server that I can push to arbitrary high RSS memory. I 
>>am far
>>from sure if this the same leak that I observe in production, but I 
>>would
>>like to understand what this one is.
>>This is the server code:
>>
>>Server.py:
>>
>>import twisted.protocols.basic
>>from twisted.internet.protocol import Factory
>>from twisted.internet import reactor
>>
>>class HiRate(twisted.protocols.basic.LineOnlyReceiver):
>>         MAX_LENGTH = 20000
>>
>>         def lineReceived(self, line):
>>                 if line == 'get':
>>                         out = 'a'*4000+'\r\r'
>>                         self.transport.write(out)
>>
>>
>>
>>factory = Factory()
>>factory.protocol = HiRate
>>
>>reactor.listenTCP(8007, factory, backlog=50, interface='10.18.0.2')
>>reactor.run()
>>[...]
>>To reproduce the memory leak, I either need two machines with fast LAN
>>between them (since the client program takes 100% CPU), or possibly 
>>one
>>machine with a dual core CPU (I have not tried that). It is important 
>>that
>>client.py is given a separate CPU to run.
>>When the length of the response from the server is sufficient,  (out =
>>'a'*4000+'\r\r' ,  4000 is enough in my case), the RSS of the server 
>>process
>>starts to leak without a bound.
>>If you introduce a small delay in the client (#time.sleep(.001)), the 
>>leak
>>does not occur.
>Hi Alec,
>I wouldn't call that a memory leak. In your example  ( SC/s = (n* CS) /
>s ;  n > 1, SC: bytes sent to the client, CS: bytes sent to the server 
>)
>there is some CS that satifies the condition SC/s > [available
>bandwidth]. For all CS that exceed that limit, the data will be first
>queued in the Send-Q of the socket and then inside twisted, because the
>Send-Q is full. That's the reason why you see increasing memory usage,
>but it's not a leak, it is a server that can not cope with this kind of
>DOS attack. Twisted can not handle this situation for you because that
>would mean it had to decide which packets, connections, etc. to drop.
>Such decisions have to be made by your application.

You can get notifications about when your send buffers are full by 
registering a producer with the transport. 
http://twistedmatrix.com/documents/current/core/howto/producers.html 
describes the APIs involved.  This will help you make these decisions in 
your application.

Jean-Paul



From darren at ontrenet.com  Thu Feb 25 18:33:52 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Thu, 25 Feb 2010 20:33:52 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B87201C.1030809@densedata.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com> <1267042271.2532.200.camel@kratos>
	<4B86BF8F.5050406@noir.com> <1267134232.2532.222.camel@kratos>
	<4B87201C.1030809@densedata.com>
Message-ID: <1267148032.2532.228.camel@kratos>

What you refer to is different than what I need. The real 'Process'
implementation is new to Python 2.6
http://docs.python.org/library/multiprocessing.html
and is not supported in Twisted at the moment. The Process or threads in
Twisted now, use Python threading/process constructs outside of the new
multiprocessing module, will suffer from the Python GIL limitations -
which hinders higher performance computing.
It works, sure. But its not what I'm asking about.

However, I found a workaround for now.

Ideally, what I wanted to do was use something like
threads.deferToPool() or similar, that _would_ use Python's new support
for OS processes.
Someone wrote a wrapper to this on the net, but I was curious if this
will be supported in Twisted.

Darren

On Fri, 2010-02-26 at 01:13 +0000, Johann Borck wrote:

> Darren Govoni wrote:
> > The nice thing about using Python's process support is that you can 
> > spawn native Processes that run in separate heaps directly from ONE 
> > Python Twisted app. Not many running side-by-side, which adds the 
> > complexity of now coordinating among them (however easy with 
> > additional protocols like spread).
> >
> > Inter-Process communication is also supported in Python's new 
> > multiprocessing package. And again, it can all be orchestrated from a 
> > single service _instance_.
> >
> > In my code, I need to run "on the metal" for some tasks and not 
> > others. Agreed, the event-based reactor threading in Twisted is great.
> > But not for all modes of computation. For those, I offload onto OS 
> > processes directly onto CPU cores. Twisted does not provide a way to 
> > leverage its API against Python's support for this feature. 
> But twisted provides this feature *itself*, and has done so long before 
> the multiprocessing module existed - look at Process Protocol 
> http://twistedmatrix.com/documents/current/core/howto/process.html and 
> the stdio stuff: 
> http://twistedmatrix.com/documents/current/core/examples/stdiodemo.py, 
> or, as has been mentioned before, ampoule. Of course, if you get 
> multiprocess to work with twisted, that's fine, but you're probably 
> unnecessarily adding complexity to your application while substracting 
> compatibility with python versions  before 2.6 for no good reason, at 
> least none you mentioned so far.
> 
> regards,
> Johann
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100225/3e79c305/attachment.html>

From radix at twistedmatrix.com  Thu Feb 25 18:54:17 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 25 Feb 2010 19:54:17 -0600
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <1267148032.2532.228.camel@kratos>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com> <1267042271.2532.200.camel@kratos>
	<4B86BF8F.5050406@noir.com> <1267134232.2532.222.camel@kratos>
	<4B87201C.1030809@densedata.com> <1267148032.2532.228.camel@kratos>
Message-ID: <60ed19d41002251754p36c817dq7f71aa2623fb6705@mail.gmail.com>

On Thu, Feb 25, 2010 at 7:33 PM, Darren Govoni <darren at ontrenet.com> wrote:
> What you refer to is different than what I need. The real 'Process'
> implementation is new to Python 2.6
> http://docs.python.org/library/multiprocessing.html
> and is not supported in Twisted at the moment. The Process or threads in
> Twisted now, use Python threading/process constructs outside of the new
> multiprocessing module, will suffer from the Python GIL limitations - which
> hinders higher performance computing.
> It works, sure. But its not what I'm asking about.


I think you're a bit confused. You said "use Python threading/process
constructs outside of the new multiprocessing module, will suffer from
the Python GIL limitations".

The "GIL limitations" *only* apply to threads, not processes. You can
take advantage of multiple CPUs in Python by running multiple
processes, no matter what technology you use to start those processes.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From darren at ontrenet.com  Thu Feb 25 19:01:44 2010
From: darren at ontrenet.com (Darren Govoni)
Date: Thu, 25 Feb 2010 21:01:44 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <60ed19d41002251754p36c817dq7f71aa2623fb6705@mail.gmail.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com> <1267042271.2532.200.camel@kratos>
	<4B86BF8F.5050406@noir.com> <1267134232.2532.222.camel@kratos>
	<4B87201C.1030809@densedata.com> <1267148032.2532.228.camel@kratos>
	<60ed19d41002251754p36c817dq7f71aa2623fb6705@mail.gmail.com>
Message-ID: <1267149704.2532.229.camel@kratos>

Thank you for that clarification.

On Thu, 2010-02-25 at 19:54 -0600, Christopher Armstrong wrote:

> On Thu, Feb 25, 2010 at 7:33 PM, Darren Govoni <darren at ontrenet.com> wrote:
> > What you refer to is different than what I need. The real 'Process'
> > implementation is new to Python 2.6
> > http://docs.python.org/library/multiprocessing.html
> > and is not supported in Twisted at the moment. The Process or threads in
> > Twisted now, use Python threading/process constructs outside of the new
> > multiprocessing module, will suffer from the Python GIL limitations - which
> > hinders higher performance computing.
> > It works, sure. But its not what I'm asking about.
> 
> 
> I think you're a bit confused. You said "use Python threading/process
> constructs outside of the new multiprocessing module, will suffer from
> the Python GIL limitations".
> 
> The "GIL limitations" *only* apply to threads, not processes. You can
> take advantage of multiple CPUs in Python by running multiple
> processes, no matter what technology you use to start those processes.
> 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100225/e49ee28e/attachment.html>

From johann.borck at densedata.com  Thu Feb 25 20:06:03 2010
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 26 Feb 2010 03:06:03 +0000
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <1267148032.2532.228.camel@kratos>
References: <1266777801.2532.176.camel@kratos>	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>	<4B85864F.6090301@noir.com>
	<1267042271.2532.200.camel@kratos>	<4B86BF8F.5050406@noir.com>
	<1267134232.2532.222.camel@kratos>	<4B87201C.1030809@densedata.com>
	<1267148032.2532.228.camel@kratos>
Message-ID: <4B873A9B.60505@densedata.com>

Darren Govoni wrote:
> What you refer to is different than what I need. The real 'Process' 
> implementation is new to Python 2.6
> http://docs.python.org/library/multiprocessing.html
> and is not supported in Twisted at the moment. The Process or threads 
> in Twisted now, use Python threading/process constructs outside of the 
> new multiprocessing module, will suffer from the Python GIL 
> limitations - which hinders higher performance computing.
Hi Darren,
Sometimes "that's wrong" is good news: Python Processes spawned using 
the twisted API twisted don't suffer any more from GIL limitations than 
any other Python Process. That's only true for threads. You seem to 
think the multiprocessing module does something that wasn't possible in 
Python before, but that's not the case, the twisted version just has a 
different API, but does essentially the same thing.

regards,
Johann



From alexandre at quessy.net  Thu Feb 25 19:11:49 2010
From: alexandre at quessy.net (Alexandre Quessy)
Date: Thu, 25 Feb 2010 21:11:49 -0500
Subject: [Twisted-Python] multiprocessing capability?
In-Reply-To: <4B87201C.1030809@densedata.com>
References: <1266777801.2532.176.camel@kratos>
	<368574aa1002211245p179de30an5c6193dab760316d@mail.gmail.com>
	<72236ba91002211700q53950e45se16087744d1e5d90@mail.gmail.com>
	<7F0C8F2E-852D-421E-8025-5F371D36A737@twistedmatrix.com>
	<4B85864F.6090301@noir.com> <1267042271.2532.200.camel@kratos>
	<4B86BF8F.5050406@noir.com> <1267134232.2532.222.camel@kratos>
	<4B87201C.1030809@densedata.com>
Message-ID: <72236ba91002251811i73721b1dv305ae6d180198403@mail.gmail.com>

Hello !

2010/2/25 Johann Borck <johann.borck at densedata.com>:
> Darren Govoni wrote:
>> The nice thing about using Python's process support is that you can
>> spawn native Processes that run in separate heaps directly from ONE
>> Python Twisted app. Not many running side-by-side, which adds the
>> complexity of now coordinating among them (however easy with
>> additional protocols like spread).
>>
>> Inter-Process communication is also supported in Python's new
>> multiprocessing package. And again, it can all be orchestrated from a
>> single service _instance_.
>>
>> In my code, I need to run "on the metal" for some tasks and not
>> others. Agreed, the event-based reactor threading in Twisted is great.
>> But not for all modes of computation. For those, I offload onto OS
>> processes directly onto CPU cores. Twisted does not provide a way to
>> leverage its API against Python's support for this feature.
> But twisted provides this feature *itself*, and has done so long before
> the multiprocessing module existed - look at Process Protocol
> http://twistedmatrix.com/documents/current/core/howto/process.html and
> the stdio stuff:
> http://twistedmatrix.com/documents/current/core/examples/stdiodemo.py,

That's exactly what I have done with my application Lunch, and I am
very satisfied with the results. It can be distributed on many hosts
via SSH ! That comes free with standard IO and process management. You
can get the source code from http://svn.sat.qc.ca/trac/lunch

Cheers,
Alexandre


> or, as has been mentioned before, ampoule. Of course, if you get
> multiprocess to work with twisted, that's fine, but you're probably
> unnecessarily adding complexity to your application while substracting
> compatibility with python versions  before 2.6 for no good reason, at
> least none you mentioned so far.
>
> regards,
> Johann
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alexandre Quessy
http://alexandre.quessy.net/



From rich at noir.com  Thu Feb 25 20:55:28 2010
From: rich at noir.com (K. Richard Pixley)
Date: Thu, 25 Feb 2010 19:55:28 -0800
Subject: [Twisted-Python] Another newbie question... out of file descriptors?
Message-ID: <4B874630.5070209@noir.com>

Can anyone explain this result to me?

It looks to me as though the SelectReactor is leaking file descriptors.  
Granted, it's a pathological case, but it's not uncommon if you're 
running a bunch of tests.

--rich

rich at black.noir.com> cat demo.py
from twisted.internet.selectreactor import SelectReactor

for i in xrange(1024):
    SelectReactor()
rich at black.noir.com> python demo.py
Traceback (most recent call last):
  File "demo.py", line 4, in <module>
    SelectReactor()
  File 
"/home/rich/projects/sprained/sprained-dev/lib/python2.6/site-packages/Twisted-9.0.0_r28543-py2.6-linux-x86_64.egg/twisted/internet/selectreactor.py", 
line 72, in __init__
    posixbase.PosixReactorBase.__init__(self)
  File 
"/home/rich/projects/sprained/sprained-dev/lib/python2.6/site-packages/Twisted-9.0.0_r28543-py2.6-linux-x86_64.egg/twisted/internet/base.py", 
line 471, in __init__
    self.installWaker()
  File 
"/home/rich/projects/sprained/sprained-dev/lib/python2.6/site-packages/Twisted-9.0.0_r28543-py2.6-linux-x86_64.egg/twisted/internet/posixbase.py", 
line 266, in installWaker
    self.waker = _Waker(self)
  File 
"/home/rich/projects/sprained/sprained-dev/lib/python2.6/site-packages/Twisted-9.0.0_r28543-py2.6-linux-x86_64.egg/twisted/internet/posixbase.py", 
line 128, in __init__
    self.i, self.o = os.pipe()
OSError: [Errno 24] Too many open files
rich at black.noir.com> lsb_release -a
No LSB modules are available.
Distributor ID:    Ubuntu
Description:    Ubuntu lucid (development branch)
Release:    10.04
Codename:    lucid




From exarkun at twistedmatrix.com  Thu Feb 25 21:00:28 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 26 Feb 2010 04:00:28 -0000
Subject: [Twisted-Python] Another newbie question... out of
	file	descriptors?
In-Reply-To: <4B874630.5070209@noir.com>
References: <4B874630.5070209@noir.com>
Message-ID: <20100226040028.2792.693305345.divmod.xquotient.94@localhost.localdomain>

On 03:55 am, rich at noir.com wrote:
>Can anyone explain this result to me?
>
>It looks to me as though the SelectReactor is leaking file descriptors.
>Granted, it's a pathological case, but it's not uncommon if you're
>running a bunch of tests.

See ticket #3063.

Jean-Paul



From glyph at twistedmatrix.com  Thu Feb 25 21:35:49 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 25 Feb 2010 22:35:49 -0600
Subject: [Twisted-Python] Another newbie question... out of file
	descriptors?
In-Reply-To: <20100226040028.2792.693305345.divmod.xquotient.94@localhost.localdomain>
References: <4B874630.5070209@noir.com>
	<20100226040028.2792.693305345.divmod.xquotient.94@localhost.localdomain>
Message-ID: <61B2571F-7D17-4CE5-A40C-15A1D8A83DF8@twistedmatrix.com>


On Feb 25, 2010, at 10:00 PM, exarkun at twistedmatrix.com wrote:

> On 03:55 am, rich at noir.com wrote:
>> Can anyone explain this result to me?
>> 
>> It looks to me as though the SelectReactor is leaking file descriptors.
>> Granted, it's a pathological case, but it's not uncommon if you're
>> running a bunch of tests.
> 
> See ticket #3063.
> 
> Jean-Paul

For your clicking (and google's indexing) enjoyment, that's <http://twistedmatrix.com/trac/ticket/3063>.




From rich at noir.com  Thu Feb 25 23:26:27 2010
From: rich at noir.com (K. Richard Pixley)
Date: Thu, 25 Feb 2010 22:26:27 -0800
Subject: [Twisted-Python] Another newbie question... out of
	file	descriptors?
In-Reply-To: <61B2571F-7D17-4CE5-A40C-15A1D8A83DF8@twistedmatrix.com>
References: <4B874630.5070209@noir.com>	<20100226040028.2792.693305345.divmod.xquotient.94@localhost.localdomain>
	<61B2571F-7D17-4CE5-A40C-15A1D8A83DF8@twistedmatrix.com>
Message-ID: <4B876993.5060608@noir.com>

Glyph Lefkowitz wrote:
> On Feb 25, 2010, at 10:00 PM, exarkun at twistedmatrix.com wrote:
>
>   
>> On 03:55 am, rich at noir.com wrote:
>>     
>>> Can anyone explain this result to me?
>>>
>>> It looks to me as though the SelectReactor is leaking file descriptors.
>>> Granted, it's a pathological case, but it's not uncommon if you're
>>> running a bunch of tests.
>>>       
>> See ticket #3063.
>>
>> Jean-Paul
>>     
>
> For your clicking (and google's indexing) enjoyment, that's <http://twistedmatrix.com/trac/ticket/3063>.
>   
Thanks.

Is it a reasonable workaround, or are there any nonobvious downsides to 
using reactor.waker.connectionLost(None)  either...

a) immediately after instantiating my reactor, (assuming I don't need a 
waker), or...
b) immediately before or after calling reactor.stop

I guess I'm asking why that hasn't been included in reactor.stop already.

--rich
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100225/f5b7305a/attachment.html>

From glyph at twistedmatrix.com  Fri Feb 26 00:58:33 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 26 Feb 2010 01:58:33 -0600
Subject: [Twisted-Python] Another newbie question... out of file
	descriptors?
In-Reply-To: <4B876993.5060608@noir.com>
References: <4B874630.5070209@noir.com>	<20100226040028.2792.693305345.divmod.xquotient.94@localhost.localdomain>
	<61B2571F-7D17-4CE5-A40C-15A1D8A83DF8@twistedmatrix.com>
	<4B876993.5060608@noir.com>
Message-ID: <0CC7EB77-CDDE-449B-94DE-87C4F1556061@twistedmatrix.com>

On Feb 26, 2010, at 12:26 AM, K. Richard Pixley wrote:

> Is it a reasonable workaround, or are there any nonobvious downsides to using reactor.waker.connectionLost(None)  either...

Yes.  Lots.  This is an _extremely_ hazardous area of Twisted to be mucking around with, as it may appear to work until it completely locks up your process.

> a) immediately after instantiating my reactor, (assuming I don't need a waker), or...

You always need a waker.  Twisted uses threads internally for several things: the two that come to mind immediately are name resolution and signal handling.  If you remove the waker, you will get hangs and crashes.

> b) immediately before or after calling reactor.stop

You need to wait for the reactor to fully shut down (i.e. 'run' exits, not 'stop' has been called) since service cleanup may be asynchronous and need to do things like resolve DNS names and handle further signals during shutdown (especially SIGCHLD, as subprocesses will typically exit during shutdown).

> I guess I'm asking why that hasn't been included in reactor.stop already.

The implementation is tricky, and you have to audit all the internal state that the reactor keeps.  To make matters worse, the test coverage for this area of Twisted is worse than others, because it's old code that works well enough and therefore (A) was written before Twisted had strong quality requirements such as complete test coverage, and (B) since it works well enough, it hasn't been extensively modified and therefore hasn't had to be re-examined to improve its test coverage to 100%.

But please, contribute patches to fix it!  It isn't *that* hard, mostly it's just that we've had lots of other stuff to do.  (See the weekly emails from trac about how many open tickets there are!)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100226/e09d855e/attachment.html>

From ravikant.4784 at gmail.com  Fri Feb 26 04:45:46 2010
From: ravikant.4784 at gmail.com (Ravikant Patil)
Date: Fri, 26 Feb 2010 17:15:46 +0530
Subject: [Twisted-Python] double slash '//' problem in url - authentication
	with guard.HTTPAuthSessionWrapper
Message-ID: <e5f1e201002260345u62dc7bddu8068fb55fa0de1fc@mail.gmail.com>

Hi,

I am trying to understand how basic authentication can be used with
twisted.web. twistedmatrix provides an example on the same which is
reproduced at

>> *http://pastebin.com/hE5TFpZT
*
when I use this example code to login, it works fine but returns with double
slash '//' in url before index file or rather for any file accessed. like:

>> http://localhost:8889//index.html

it will work for all files with double slash

>> http://localhost:8889//vision.html

but will return index page for any request with single slash

>> http://localhost:8889/anything.html/ will always return index page.

Please help me figuring out what is the problem and what can be possible fix
to it.

Thank you.


Regards,

Ravikant.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100226/81030058/attachment-0001.html>

From exarkun at twistedmatrix.com  Fri Feb 26 08:40:58 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 26 Feb 2010 15:40:58 -0000
Subject: [Twisted-Python] double slash '//' problem in url
	-	authentication with guard.HTTPAuthSessionWrapper
In-Reply-To: <e5f1e201002260345u62dc7bddu8068fb55fa0de1fc@mail.gmail.com>
References: <e5f1e201002260345u62dc7bddu8068fb55fa0de1fc@mail.gmail.com>
Message-ID: <20100226154058.2792.1949119804.divmod.xquotient.98@localhost.localdomain>




On 11:45 am, ravikant.4784 at gmail.com wrote:
>Hi,
>
>I am trying to understand how basic authentication can be used with
>twisted.web. twistedmatrix provides an example on the same which is
>reproduced at
>>>*http://pastebin.com/hE5TFpZT
>*
>when I use this example code to login, it works fine but returns with 
>double
>slash '//' in url before index file or rather for any file accessed. 
>like:
>>>http://localhost:8889//index.html
>
>it will work for all files with double slash
>>>http://localhost:8889//vision.html
>
>but will return index page for any request with single slash
>>>http://localhost:8889/anything.html/ will always return index page.
>
>Please help me figuring out what is the problem and what can be 
>possible fix
>to it.

With current trunk I can't reproduce this behavior.  If I request 
//index.html or /index.html/, the response is a 404.  If I request 
/index.html or /clients.html, the response is the expected page.

Jean-Paul



From skyepn at gmail.com  Sat Feb 27 06:19:17 2010
From: skyepn at gmail.com (Skye)
Date: Sat, 27 Feb 2010 13:19:17 +0000 (UTC)
Subject: [Twisted-Python] Getting factory with AuthenticatingTelnetProtocol
Message-ID: <loom.20100227T141302-831@post.gmane.org>

Hello,

I used the code from this thread to figure out how to use 
the twisted.conch.telnet.AuthenticatingTelnetProtocol class:

http://www.mail-archive.com/twisted-python at twistedmatrix.com/msg01581.html

(with the addition of av.state = 'Command' in requestAvatar(), it works great)

However, after the handoff to the new protocol MyTelnet, self.factory 
isn't set.  How can I pass along the parent factory from the 
AuthenticatingTelnetProtocol  instance to the StatefulTelnetProtocol instance?

Sorry if this isn't phrased correctly - I'm new to Twisted.  

Thanks,
Skye





From bra at fsn.hu  Sat Feb 27 14:59:46 2010
From: bra at fsn.hu (Attila Nagy)
Date: Sat, 27 Feb 2010 22:59:46 +0100
Subject: [Twisted-Python] Is AMP secure enough for the internet?
Message-ID: <4B8995D2.8040909@fsn.hu>

Hello,

I'm planning a data collector gateway and wondering whether Twisted's
AMP would be good for the task.
AMP seems to be a good fit for the job, but I'm not sure about the
security. I make the client side too, but I won't operate it, bad guys
can take over that side and I want to protect my side.

What would I like to do:
1. authenticate and authorize connecting clients with their SSL certificates
2. securely transfer arbitrary (binary and json) data from and to the
clients (both the server and client would be twisted)
3. protect the server from malicious clients

I have some concerns about all three. For the first, is this OK now:
http://twistedmatrix.com/pipermail/twisted-python/2007-August/015926.html ?
For the second: the server should not be affected by the data which the
client sends. I mean exploiting bugs in the data paths and limited
protection from DoS, like abusing blocking pieces of code and therefore
halting the reactor, or preventing memory overflow (if it sends 3TBs of
data, it shouldn't be queued up in RAM, I should be in control about
what happens in this case, or twisted should be clear measures for
these) etc...
And by the third I mean the above, plus for example if I have only one
command defined for AMP with one string argument then no matter what
happens, the client should only access that function  with that argument
and no other part of the program.

How do you feel, is Twisted and AMP a good choice for that?

Thanks,



From ltaylor.volks at gmail.com  Sat Feb 27 17:43:48 2010
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Sat, 27 Feb 2010 17:43:48 -0700
Subject: [Twisted-Python] Getting factory with
	AuthenticatingTelnetProtocol
In-Reply-To: <loom.20100227T141302-831@post.gmane.org>
References: <loom.20100227T141302-831@post.gmane.org>
Message-ID: <4B89BC44.7090909@gmail.com>

On 2/27/10 6:19 AM, Skye wrote:
> Hello,
> 
> I used the code from this thread to figure out how to use 
> the twisted.conch.telnet.AuthenticatingTelnetProtocol class:
> 
> http://www.mail-archive.com/twisted-python at twistedmatrix.com/msg01581.html
> 
> (with the addition of av.state = 'Command' in requestAvatar(), it works great)
> 
> However, after the handoff to the new protocol MyTelnet, self.factory 
> isn't set.  How can I pass along the parent factory from the 
> AuthenticatingTelnetProtocol  instance to the StatefulTelnetProtocol instance?
> 
> Sorry if this isn't phrased correctly - I'm new to Twisted.  
> 
> Thanks,
> Skye
> 

Rather than pass it around, you could set the factory instance as an
attribute of the transport:

f = protocol.ServerFactory()
f.protocol = lambda: TelnetTransport(AuthenticatingTelnetProtocol, p)
f.protocol.factory = f

then the factory will be available from MyTelnet.transport:

class MyTelnet(StatefulTelnetProtocol):
    def telnet_Command(self, line):
        print "line received via telnet", line
        print "The Server factory is a: %s" % (self.transport.factory)


Lucas



From skyepn at gmail.com  Sat Feb 27 18:12:06 2010
From: skyepn at gmail.com (Skye)
Date: Sun, 28 Feb 2010 01:12:06 +0000 (UTC)
Subject: [Twisted-Python]
	=?utf-8?q?Getting_factory_with=09AuthenticatingT?=
	=?utf-8?q?elnetProtocol?=
References: <loom.20100227T141302-831@post.gmane.org>
	<4B89BC44.7090909@gmail.com>
Message-ID: <loom.20100228T021106-854@post.gmane.org>

Lucas Taylor <ltaylor.volks <at> gmail.com> writes:

> Rather than pass it around, you could set the factory instance as an
> attribute of the transport:
> 

Perfect.  

Thanks!






From exarkun at twistedmatrix.com  Sat Feb 27 22:05:16 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 28 Feb 2010 05:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1267333516.45.836580031@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100228/42e60c92/attachment.html>

From codeprophecy1 at gmail.com  Sun Feb 28 16:31:36 2010
From: codeprophecy1 at gmail.com (code prophecy)
Date: Sun, 28 Feb 2010 17:31:36 -0600
Subject: [Twisted-Python] autoincrement in axiom
Message-ID: <3700bbff1002281531y327ab3b1l8ce22e211e6b9430@mail.gmail.com>

Hi,

Is there a way to use autoincrement in axiom ? I need a property in my model
that reflects the last  row id after every insert operation. Also, is it
safe to use non-db variables in axiom model ? something like

class test1(Item):
  name = attributes.text()

  surname = "my non db variable"

The interpretor does throw an error but that can be overcome by using
self.__dict__['surname'] = "non db" . Just wanted to know if this is
recommended or not

sorry, if this' already been answered; i did search but couldn't find the
answer.

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100228/24cac92c/attachment.html>

From mithrandi at mithrandi.net  Sun Feb 28 17:27:40 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 1 Mar 2010 02:27:40 +0200
Subject: [Twisted-Python] autoincrement in axiom
In-Reply-To: <3700bbff1002281531y327ab3b1l8ce22e211e6b9430@mail.gmail.com>
References: <3700bbff1002281531y327ab3b1l8ce22e211e6b9430@mail.gmail.com>
Message-ID: <f5eea9171002281627g7d2e8b0ft1296da8d77e5134@mail.gmail.com>

On Mon, Mar 1, 2010 at 1:31 AM, code prophecy <codeprophecy1 at gmail.com> wrote:
> Is there a way to use autoincrement in axiom ? I need a property in my model
> that reflects the last  row id after every insert operation.

There isn't currently any way to have an autoincrement attribute.
However, the storeID attribute is unique across every Item in a Store;
perhaps this is sufficient for your purposes?

> Also, is it
> safe to use non-db variables in axiom model ? something like
>
> class test1(Item):
>   name = attributes.text()
>
>   surname = "my non db variable"
>
> The interpretor does throw an error but that can be overcome by using
> self.__dict__['surname'] = "non db" . Just wanted to know if this is
> recommended or not

You should declare the attribute like this:

surname = attributes.inmemory()

Axiom will then allow you to set the attribute, which will not be
persisted in the database.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From mithrandi at mithrandi.net  Sun Feb 28 17:33:15 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 1 Mar 2010 02:33:15 +0200
Subject: [Twisted-Python] Is AMP secure enough for the internet?
In-Reply-To: <4B8995D2.8040909@fsn.hu>
References: <4B8995D2.8040909@fsn.hu>
Message-ID: <f5eea9171002281633s6ee01b2dp5c6ce27e3acdf4f6@mail.gmail.com>

On Sat, Feb 27, 2010 at 11:59 PM, Attila Nagy <bra at fsn.hu> wrote:
> What would I like to do:
> 1. authenticate and authorize connecting clients with their SSL certificates
> 2. securely transfer arbitrary (binary and json) data from and to the
> clients (both the server and client would be twisted)

If you're using SSL, then points 1 and 2 are the responsibility of
SSL, not AMP, and you should be fine.

> 3. protect the server from malicious clients

I can't really comment on this, as I haven't studied the AMP
implementation much; I think there are some built-in limits which will
protect against certain kinds of resource DoS, but hopefully somebody
else can comment in more detail.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From teratorn at gmail.com  Sun Feb 28 21:09:30 2010
From: teratorn at gmail.com (Eric P. Mangold)
Date: Mon, 01 Mar 2010 15:09:30 +1100
Subject: [Twisted-Python] Is AMP secure enough for the internet?
In-Reply-To: <f5eea9171002281633s6ee01b2dp5c6ce27e3acdf4f6@mail.gmail.com>
References: <4B8995D2.8040909@fsn.hu>
	<f5eea9171002281633s6ee01b2dp5c6ce27e3acdf4f6@mail.gmail.com>
Message-ID: <1267416570.32241.76.camel@Snowflake>

On Mon, 2010-03-01 at 02:33 +0200, Tristan Seligmann wrote:
> On Sat, Feb 27, 2010 at 11:59 PM, Attila Nagy <bra at fsn.hu> wrote:
> > What would I like to do:
> > 1. authenticate and authorize connecting clients with their SSL certificates
> > 2. securely transfer arbitrary (binary and json) data from and to the
> > clients (both the server and client would be twisted)
> 
> If you're using SSL, then points 1 and 2 are the responsibility of
> SSL, not AMP, and you should be fine.
> 
> > 3. protect the server from malicious clients
> 
> I can't really comment on this, as I haven't studied the AMP
> implementation much; I think there are some built-in limits which will
> protect against certain kinds of resource DoS, but hopefully somebody
> else can comment in more detail.

AMP "keys" are limited to 256 bytes and "values" are limited to 64k. So
that will prevent your program from handling a malformed AMP packet that
tries to exceed those limits....

If the AMP parser detects a parsing problem it will drop the connection.

One of the things you will need to implement yourself is preventing an
otherwise legit client from flooding your server with legitimate
requests... this is application-specific, and Twisted can't implement a
generalized protection mechanize here.

There should not be any way for a client to "access" any parts of your
program apart from your pre-defined AMP command-handlers, and anything
else for which you "give" access.

Everything in AMP is length-prefixed, so this precludes any
"quote-escaping" type vulnerabilities.

There shouldn't be any issues with any of the built-in data types that
AMP knows how to handle... if the data doesn't fall within acceptable
parameters Python will thrown an Exception, and I *imagine* that also
results in a connection tear-down, but it's been a while since I've
studied the code in depth.

Good luck, and let us know when you're AMP-DOSing test-suite is
available ;)

-teratorn 





From glyph at twistedmatrix.com  Sun Feb 28 16:34:26 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 28 Feb 2010 17:34:26 -0600
Subject: [Twisted-Python] Is AMP secure enough for the internet?
In-Reply-To: <4B8995D2.8040909@fsn.hu>
References: <4B8995D2.8040909@fsn.hu>
Message-ID: <389E5688-EDCF-4F8B-8223-D90632D40F27@twistedmatrix.com>

On Feb 27, 2010, at 3:59 PM, Attila Nagy wrote:

> Hello,

Hello!

> I'm planning a data collector gateway and wondering whether Twisted's
> AMP would be good for the task.

Yes, I believe so.

> AMP seems to be a good fit for the job, but I'm not sure about the
> security. I make the client side too, but I won't operate it, bad guys
> can take over that side and I want to protect my side.

This is a good rule to live by with any internet protocol :).

> What would I like to do:
> 1. authenticate and authorize connecting clients with their SSL certificates
> 2. securely transfer arbitrary (binary and json) data from and to the
> clients (both the server and client would be twisted)
> 3. protect the server from malicious clients
> 
> I have some concerns about all three. For the first, is this OK now:
> http://twistedmatrix.com/pipermail/twisted-python/2007-August/015926.html ?

I'm not sure what you're asking.  The example given in that message is doing a blocking handshake, which is still a bad idea.  I don't believe the bug being described has been fixed (although I hope someone will correct me and tell me I'm wrong).

However, you can authenticate connections with TLS certificates by using a command that inherits from AMP's StartTLS, and do the verification in the provided callback.

Bootstrapping the TLS connection off of a plaintext connection is generally a better idea anyway, since that way you can support features like virtual hosting - when your client asks to secure the connection, the server can know who the client thinks it is talking to and intermediaries can route the connection to the appropriate back-end endpoint without necessarily understanding the protocol past that point.

> For the second: the server should not be affected by the data which the
> client sends. I mean exploiting bugs in the data paths and limited
> protection from DoS, like abusing blocking pieces of code and therefore
> halting the reactor, or preventing memory overflow (if it sends 3TBs of
> data, it shouldn't be queued up in RAM, I should be in control about
> what happens in this case, or twisted should be clear measures for
> these) etc...

If you really want to harden Twisted's AMP implementation, you'll have to do a bit more work.  Right now, individual AMP keys can only be 255 bytes, individual values are restricted to 65535 bytes, but boxes (messages of key/value pairs) can be arbitrarily big.  It would be good to have a limit which restricted their size, and it would be fairly simple to do.

Really DoS-proof protocols are really hard, but AMP's wire-level design is intentionally simple to make it amenable to lots of implementation hardening against many different types of attack.

In other words, it is not already the protocol code that you want, but it would be easier to make AMP into the code that you want than to start from scratch.

> And by the third I mean the above, plus for example if I have only one
> command defined for AMP with one string argument then no matter what
> happens, the client should only access that function  with that argument
> and no other part of the program.

To my knowledge, AMP is already completely secure in this sense.  I'm not a security auditor, but I would be _very_ surprised if you could execute arbitrary code by sending any sequence of bytes to a simple Twisted AMP server which only took a string argument.

> How do you feel, is Twisted and AMP a good choice for that?

Yes.

Thanks for considering it,

-glyph




