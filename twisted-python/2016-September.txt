From yuri_abzyanov at fastmail.fm  Thu Sep  1 07:42:02 2016
From: yuri_abzyanov at fastmail.fm (Yuri)
Date: Thu, 1 Sep 2016 20:42:02 +0700
Subject: [Twisted-Python] "twistd" in Twisted 16.4.0 can't import
 modules/packages from current working directory
Message-ID: <57C8302A.1050703@fastmail.fm>

Hi all

I couldn't find Twisted-specific group, so posting here.

Recently Twisted 16.4.0 got released. Yesterday I've tried to upgrade it 
for my apps and got an error.

I've created simple example, which demonstrates it.

File service.tac:
=======================================
import os
from twisted.application import service, internet

import mymodule

application = service.Application("Demo application")
----------------------------------------


File mymodule.py:
========================================
def myfunction(asd):
     """ Stub function """
----------------------------------------


If you try to run it with twistd -y service.tac you'll get an error:
== output ==============================
Unhandled Error
Traceback (most recent call last):
   File 
"/usr/local/lib/python2.7/site-packages/twisted/application/app.py", 
line 648, in run
     runApp(config)
   File 
"/usr/local/lib/python2.7/site-packages/twisted/scripts/twistd.py", line 
25, in runApp
     _SomeApplicationRunner(config).run()
   File 
"/usr/local/lib/python2.7/site-packages/twisted/application/app.py", 
line 379, in run
     self.application = self.createOrGetApplication()
   File 
"/usr/local/lib/python2.7/site-packages/twisted/application/app.py", 
line 444, in createOrGetApplication
     application = getApplication(self.config, passphrase)
--- <exception caught here> ---
   File 
"/usr/local/lib/python2.7/site-packages/twisted/application/app.py", 
line 455, in getApplication
     application = service.loadApplication(filename, style, passphrase)
   File 
"/usr/local/lib/python2.7/site-packages/twisted/application/service.py", 
line 411, in loadApplication
     passphrase)
   File 
"/usr/local/lib/python2.7/site-packages/twisted/persisted/sob.py", line 
223, in loadValueFromFile
     eval(codeObj, d, d)
   File "service.tac", line 7, in <module>
     import mymodule
exceptions.ImportError: No module named mymodule


Failed to load application: No module named mymodule
----------------------------------------


The errors comes down to this: twistd script does not add current 
working directory to python path (or removes it, I don't know what 
exactly happens), so it fails to import any packages/modules from it. 
The issue does not appear in previous version (Twisted 16.3.2).

Any ideas what caused it?



From yuri_abzyanov at fastmail.fm  Thu Sep  1 07:54:46 2016
From: yuri_abzyanov at fastmail.fm (Yuri)
Date: Thu, 1 Sep 2016 20:54:46 +0700
Subject: [Twisted-Python] "twistd" in Twisted 16.4.0 can't import
 modules/packages from current working directory
In-Reply-To: <57C8302A.1050703@fastmail.fm>
References: <57C8302A.1050703@fastmail.fm>
Message-ID: <nq9bv5$unc$2@blaine.gmane.org>

On 01/09/16 20:42, Yuri wrote:
>
> I couldn't find Twisted-specific group, so posting here.
>

Sorry, obviously this IS Twisted-specific group. I've copied the message 
from python list, where I initially posted it and was redirected to this 
group.



From hawkowl at atleastfornow.net  Thu Sep  1 09:36:12 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Thu, 1 Sep 2016 23:36:12 +0800
Subject: [Twisted-Python] "twistd" in Twisted 16.4.0 can't import
	modules/packages from current working directory
In-Reply-To: <57C8302A.1050703@fastmail.fm>
References: <57C8302A.1050703@fastmail.fm>
Message-ID: <C6F37597-5AF5-4AC7-80BB-07153F4D4824@atleastfornow.net>


> On 1 Sep 2016, at 21:42, Yuri <yuri_abzyanov at fastmail.fm> wrote:
> 
> Hi all
> 
> I couldn't find Twisted-specific group, so posting here.
> 
> Recently Twisted 16.4.0 got released. Yesterday I've tried to upgrade it for my apps and got an error.
> 
> ...
> 
> The errors comes down to this: twistd script does not add current working directory to python path (or removes it, I don't know what exactly happens), so it fails to import any packages/modules from it. The issue does not appear in previous version (Twisted 16.3.2).
> 
> Any ideas what caused it?

Yes -- we moved to using setuptools console scripts, and these console scripts don't add "." to the PYTHONPATH. We realised this in prerelease but decided against fixing it, as it adding the current working dir to the PATH has lead to a lot of  subtle bugs in the past and this is a good chance to make a break from them.

So, in short, this is expected behaviour -- we generally want people to be running twistd, trial, etc on *installed* Python packages -- testing or running from checkouts often hides many bugs about what is or isn't included in the installed package by accident. If you rely on this behaviour, though, set the PYTHONPATH environment variable to "." -- e.g. `env PYTHONPATH=. twistd -n myplugin`.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160901/3683747c/attachment.pgp>

From markrwilliams at gmail.com  Thu Sep  1 09:35:51 2016
From: markrwilliams at gmail.com (Mark Williams)
Date: Thu, 1 Sep 2016 08:35:51 -0700
Subject: [Twisted-Python] "twistd" in Twisted 16.4.0 can't import
 modules/packages from current working directory
In-Reply-To: <57C8302A.1050703@fastmail.fm>
References: <57C8302A.1050703@fastmail.fm>
Message-ID: <20160901153550.GA29410@hammal>

On Thu, Sep 01, 2016 at 08:42:02PM +0700, Yuri wrote:
> The errors comes down to this: twistd script does not add current working
> directory to python path (or removes it, I don't know what exactly happens),
> so it fails to import any packages/modules from it. The issue does not
> appear in previous version (Twisted 16.3.2).
>
> Any ideas what caused it?
>
The commits that closed this ticket:
http://twistedmatrix.com/trac/ticket/8491

Generally:
https://github.com/twisted/twisted/commit/c5a4c635de259cd1b92a555c930aa426164f9cce
Specifically:
https://github.com/twisted/twisted/commit/c5a4c635de259cd1b92a555c930aa426164f9cce#diff-a7270bb5043e420fd7a98b81e48ac082

The bin/twistd script would add the current working directory to
sys.path prior to running the actual twistd logic.  This was not
ported over.

I'm going to say that was a conscious decision, as it coincided with
moving twisted to a src/ layout and a fair bit of discussion (visible
in that ticket) about how these changes have made trial only discover
installed code and not whatever's in the current working directory.

To a developer of Twisted it's clear that the project's trying to
replace magical code discovery with boring code importing.  To a user,
that's not clear, and we need to clearly document this.

Being a Twisted developer, I do think in general that it's better to
install your code into an existing sys.path entry instead of adding a
sys.path entry that contains your code.

Would this be difficult for your application, and if so, why?  If it's
possible to make it easier for your application I'd like to help.

Thanks for using Twisted!

-Mark


From yuri_abzyanov at fastmail.fm  Thu Sep  1 20:03:54 2016
From: yuri_abzyanov at fastmail.fm (Yuri)
Date: Fri, 2 Sep 2016 09:03:54 +0700
Subject: [Twisted-Python] "twistd" in Twisted 16.4.0 can't import
 modules/packages from current working directory
In-Reply-To: <57C8302A.1050703@fastmail.fm>
References: <57C8302A.1050703@fastmail.fm>
Message-ID: <57C8DE0A.6020001@fastmail.fm>

Thanks for swift response!

I do not tend to install my applications. Never did that to be honest, 
and don't know what kind of issues to expect. Definitely should try it.

For now workaround will be fine.

Just wanted to confirm that it's an intended behavior and find out the 
reasons why that was changed.



From hs at ox.cx  Sat Sep  3 05:32:11 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Sat, 3 Sep 2016 13:32:11 +0200
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <CA+U=zK34Mz_5LsSCfv2O4B3mhAviw50hhviBDf1wvuKvbmRpUA@mail.gmail.com>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>
 <CA+U=zK34Mz_5LsSCfv2O4B3mhAviw50hhviBDf1wvuKvbmRpUA@mail.gmail.com>
Message-ID: <1BACC9A4-D24A-4FC1-B3ED-42AF22575B91@ox.cx>

Since this kind of fell to slumber: I'm upping my ante to $100 however many coins that gives me.

Sent from my phone.

> Am 20.06.2016 um 18:33 schrieb Kevin Horn <kevin.horn at gmail.com>:
> 
> I haven't been very active in a while, but:
> 
> a) this is a really cool idea
> b) I'd really like one of these for myself
> 
> So, sign me up for 5 coins.  I might be willing to up that to 10 if it makes a difference in this happening or not.
> 
> 
> 
>> On Wed, Jun 15, 2016 at 12:20 PM, lvh <_ at lvh.io> wrote:
>> Hey,
>> 
>> 
>> > On Jun 14, 2016, at 8:44 PM, Ashwini Oruganti <ashfall at twistedmatrix.com> wrote:
>> >
>> > Hello!
>> >
>> > We are planning to get us some challenge coins, which is exciting! You should also be excited with us because this means:
>> >
>> > - we can now give it out to contributors at sprints and meetups.
>> > - challenge coins are awesome.
>> >
>> > Each coin costs about $6, and the minimum order is 100 coins. Glyph thinks everyone should have some to give out as tokens of appreciation to other contributors, and glyph's thoughts are usually worth following.
>> 
>> 5 seems like the number, but we?ll see if we get up to the required minimum order :)
>> 
>> 
>> lvh
>> 
>> > So, if you are a Twisted contributor and would like to own a challenge coin, please respond to this email. Also, do mention how many coins you would like, and where you are located so that we can send you your coin(s).
>> >
>> >
>> > -ashfall
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> -- 
> --
> Kevin Horn
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160903/d424e9c3/attachment.html>

From cory at lukasa.co.uk  Mon Sep  5 08:21:46 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 5 Sep 2016 15:21:46 +0100
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <1BACC9A4-D24A-4FC1-B3ED-42AF22575B91@ox.cx>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>
 <CA+U=zK34Mz_5LsSCfv2O4B3mhAviw50hhviBDf1wvuKvbmRpUA@mail.gmail.com>
 <1BACC9A4-D24A-4FC1-B3ED-42AF22575B91@ox.cx>
Message-ID: <D910FC43-07B6-4C37-A9EA-D88A89028954@lukasa.co.uk>

Let?s get this done. I?ll go up to $100 as well.

Cory

> On 3 Sep 2016, at 12:32, Hynek Schlawack <hs at ox.cx> wrote:
> 
> Since this kind of fell to slumber: I'm upping my ante to $100 however many coins that gives me.
> 
> Sent from my phone.
> 
> Am 20.06.2016 um 18:33 schrieb Kevin Horn <kevin.horn at gmail.com <mailto:kevin.horn at gmail.com>>:
> 
>> I haven't been very active in a while, but:
>> 
>> a) this is a really cool idea
>> b) I'd really like one of these for myself
>> 
>> So, sign me up for 5 coins.  I might be willing to up that to 10 if it makes a difference in this happening or not.
>> 
>> 
>> 
>> On Wed, Jun 15, 2016 at 12:20 PM, lvh <_ at lvh.io <mailto:_ at lvh.io>> wrote:
>> Hey,
>> 
>> 
>> > On Jun 14, 2016, at 8:44 PM, Ashwini Oruganti <ashfall at twistedmatrix.com <mailto:ashfall at twistedmatrix.com>> wrote:
>> >
>> > Hello!
>> >
>> > We are planning to get us some challenge coins, which is exciting! You should also be excited with us because this means:
>> >
>> > - we can now give it out to contributors at sprints and meetups.
>> > - challenge coins are awesome.
>> >
>> > Each coin costs about $6, and the minimum order is 100 coins. Glyph thinks everyone should have some to give out as tokens of appreciation to other contributors, and glyph's thoughts are usually worth following.
>> 
>> 5 seems like the number, but we?ll see if we get up to the required minimum order :)
>> 
>> 
>> lvh
>> 
>> > So, if you are a Twisted contributor and would like to own a challenge coin, please respond to this email. Also, do mention how many coins you would like, and where you are located so that we can send you your coin(s).
>> >
>> >
>> > -ashfall
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> 
>> 
>> -- 
>> --
>> Kevin Horn
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160905/a092b721/attachment.html>

From mithrandi at mithrandi.net  Tue Sep  6 12:55:03 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 06 Sep 2016 18:55:03 +0000
Subject: [Twisted-Python] Endpoint composition syntax
Message-ID: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>

I'm kicking off this discussion on the mailing list as I don't have
anything well-formed enough to take to the bug tracker, and I am hoping to
get some more engagement on the matter.

Currently there is no way to explicitly compose Twisted endpoints, but
several endpoint implementations have arisen that explicitly wrap another
endpoint, and so have needed a way to do this. So far, this has been
implementing by passing in an endpoint description, and then calling
serverFromString/clientFromString internally in the endpoint to construct
the wrapped endpoint. I've seen two different ways of encoding the "inner"
endpoint:

1. Backslash escaping; for example:

tls:awesome.site.example.com:443:endpoint=tcp\:7.6.5.4\:443

This has the advantage that it is endlessly nestable, for example:

tls:internal.hostname.whatever:42:endpoint=tls\:awesome.site.example.com
\:443\:endpoint=tcp\\\:7.6.5.4\\\:443

It has the disadvantage that it is a bit tricky to read and write.

2. Splitting keyword and positional arguments; for example:

txsni:/srv/certs:tcp:443

This has the advantage that it is easier to read and write, but the
disadvantage that it isn't nestable. It also starts to break down when you
have a lot of parameters, as the positional syntax becomes much harder to
read.

Neither of these solutions is entirely satisfactory; I initially followed
approach 2 for txacme, but now that I need to add more parameters to the
le:/lets: endpoints, it is starting to break down.

Cory suggested a third possibility; an explicit syntax for composing
endpoints. In this model, the endpoint string parsing machinery would
construct the different endpoints, and compose them together (presumably
the API of the parsers would need to be extended a bit for this). For
example:

tls:awesome.site.example.com:443->tcp:7.6.5.4:443

A less whimsical syntax than "->" might be better; for example, semicolons,
or something like that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160906/d3de1850/attachment.html>

From meejah at meejah.ca  Tue Sep  6 14:43:08 2016
From: meejah at meejah.ca (meejah)
Date: Wed, 07 Sep 2016 00:43:08 +0400
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 (Tristan Seligmann's message of "Tue, 06 Sep 2016 18:55:03 +0000")
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
Message-ID: <86fupcn4ir.fsf@atlantis.meejah.ca>

Tristan Seligmann <mithrandi at mithrandi.net> writes:

> Currently there is no way to explicitly compose Twisted endpoints, but
> several endpoint implementations have arisen that explicitly wrap
> another endpoint, and so have needed a way to do this.

A couple other examples:

Autobahn provides 'Web Application Messaging Protocol' (WAMP) endpoints
that can use either a Unix, TCP or WebSockets protocol under the hood --
having a proper endpoint syntax for this would be nice. There is *some*
support for endpoint-strings in Autobahn using the backslash trick, but
this also results in some ugliness like:

   r"autobahn:tcp\:9000\:interface\=0.0.0.0:url=ws\://localhost\:9000:compress=false"
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ~~~~~~~~~~~~~~~~~~~~~

Ideally txtorcon would have a way to specify "how" to connect for
client-side connections meaning "I want a stream over the Tor whose
control-port is 'unix:/foo' that connects via SOCKS at unix:/bar to
https://meejah.ca". (This can only be done in code, currently, not
endpoint-strings) Now think about specifying that you want the above
Autobahn connection to go over Tor ;) that is, replacing
"https://meejah.ca" with the monster above...

     *   *   *

On a possible tangent: I wonder if this also ties in with trying to wrap
protocols to "hand off" their transport to another one? Examples of this
are: SOCKS (e.g. speaking one protocol "after" another), or in Autobahn
where it's nice to listen for both "normal" Web requests and also
WebSockets requests on the same port (so there's a protocol that "peeks"
and hands off to HTTP or WebSockets handlers).

I can also imagine doing the same thing with http://magic-wormhole.io
where you would establish a connection via the wormhole mechanism, and
then pass over the established transport to the "real" protocol
(e.g. could be HTTP, WAMP, SSH, WebSockets, something custom, etc) and
this at least has an obvious need for a corresponding string-parser
syntax like the one suggested.

> tls:awesome.site.example.com:443->tcp:7.6.5.4:443 A less whimsical
> syntax than "->" might be better; for example, semicolons, or
> something like that.

I wonder if a simple space would work? Downsides would be: requiring
quoting on shells; maybe it would present problems in config-file
use-cases; ...

So, we want "something" the highest-level parser can split on before
handing off bits (or all) of it to the actual plugins:

 - can't have ":" since that's already a separatator
 - can't have "=" since it's already used
 - shouldn't already be in popular protocols/options (e.g. anything
   valid in a URI?)

In some ways having a two-character separator could be really nice, as
it's far less likely to collide with things? I like that the intent of
"->" is also reasonably obvious, I think. Or at least hopefully looks
strange enough that you'll look it up ;)

Thanks for kicking off discussion :)

-- 
meejah


From glyph at twistedmatrix.com  Tue Sep  6 17:05:40 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Sep 2016 16:05:40 -0700
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
Message-ID: <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>


> On Sep 6, 2016, at 11:55 AM, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> 
> Currently there is no way to explicitly compose Twisted endpoints, but several endpoint implementations have arisen that explicitly wrap another endpoint, and so have needed a way to do this. So far, this has been implementing by passing in an endpoint description, and then calling serverFromString/clientFromString internally in the endpoint to construct the wrapped endpoint. I've seen two different ways of encoding the "inner" endpoint:
> 

Some other points to keep in mind for this discussion:

We may want a syntax that supports composing multiple endpoints, not just 2.
The existing syntax is kind of crummy; ":" as a separator has serious problems, considering its presence in both URLs and IPv6 literals.  I wouldn't say we should necessarily re-design the whole syntax to accommodate this, but just having a whole new syntax might not be a bad thing either.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160906/1b392ab8/attachment.html>

From kevinjacobconway at gmail.com  Tue Sep  6 20:11:33 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Wed, 07 Sep 2016 02:11:33 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
Message-ID: <CAKF=+di9h1+sd5MfinqsFsAeiW+mEAedAVcVYgMh=98gFGc8Qw@mail.gmail.com>

I'm not opposed to a fresh syntax, but I do believe the current
implementation can be used for composition. The parser for endpoint strings
is simplistic, like Glyph points out, but there is nothing preventing it
from having nested endpoint definitions. We used the existing syntax when
writing the HAProxy endpoint wrapper:
https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/haproxy/_parser.py
.

Granted, this case doesn't come with any configuration options but it shows
a potential path for adding wrapping functionality in the current
implementation. I think are some downsides when it comes to args, kwargs
management. To support them across multiple, arbitrary nested endpoints the
kwargs would need to have non-colliding names and the wrapper would need to
do some amount of introspection on args to determine if the leading values
are for it or another endpoint.

I don't think the developer experience would be a good one, but there _is_
a way to compose endpoints if you're set on doing so.

On Tue, Sep 6, 2016 at 6:08 PM Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Sep 6, 2016, at 11:55 AM, Tristan Seligmann <mithrandi at mithrandi.net>
> wrote:
>
> Currently there is no way to explicitly compose Twisted endpoints, but
> several endpoint implementations have arisen that explicitly wrap another
> endpoint, and so have needed a way to do this. So far, this has been
> implementing by passing in an endpoint description, and then calling
> serverFromString/clientFromString internally in the endpoint to construct
> the wrapped endpoint. I've seen two different ways of encoding the "inner"
> endpoint:
>
>
> Some other points to keep in mind for this discussion:
>
>
>    1. We may want a syntax that supports composing multiple endpoints,
>    not just 2.
>    2. The existing syntax is kind of crummy; ":" as a separator has
>    serious problems, considering its presence in both URLs and IPv6 literals.
>    I wouldn't say we should *necessarily* re-design the whole syntax to
>    accommodate this, but just having a whole new syntax might not be a bad
>    thing either.
>
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160907/cae21253/attachment.html>

From cory at lukasa.co.uk  Wed Sep  7 06:23:33 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 7 Sep 2016 13:23:33 +0100
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
Message-ID: <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>


> On 7 Sep 2016, at 00:05, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Sep 6, 2016, at 11:55 AM, Tristan Seligmann <mithrandi at mithrandi.net <mailto:mithrandi at mithrandi.net>> wrote:
>> 
>> Currently there is no way to explicitly compose Twisted endpoints, but several endpoint implementations have arisen that explicitly wrap another endpoint, and so have needed a way to do this. So far, this has been implementing by passing in an endpoint description, and then calling serverFromString/clientFromString internally in the endpoint to construct the wrapped endpoint. I've seen two different ways of encoding the "inner" endpoint:
>> 
> 
> Some other points to keep in mind for this discussion:
> 
> We may want a syntax that supports composing multiple endpoints, not just 2.
> The existing syntax is kind of crummy; ":" as a separator has serious problems, considering its presence in both URLs and IPv6 literals.  I wouldn't say we should necessarily re-design the whole syntax to accommodate this, but just having a whole new syntax might not be a bad thing either.

I mentioned this casually to Tristan in IRC, but the current syntax and use of endpoints in Twisted gets close to a quite profound idea about protocol nesting that is lurking in the space of convention. Extending the endpoint syntax to have a blessed way of essentially composing endpoints together gives the potential of using the endpoint syntax to design and implement various ?tunneling? features that are very useful.

If we take the arrow syntax, for a moment, you could conceive a truly insane client wanting to write an endpoint to run FTP over that?s a bit like:

    tcp:host=someftp.server:port=21->http:verb=connect->tcp:->socks5:targetname=mypersonalhttpproxy.server->tcp:host=mycorporatesocksproxy.server:port=2121

This would represent tunneling FTP over TCP over HTTP over TCP over SOCKS over TCP. For extra fun you can throw in some Tor.

Alternatively, and quite a bit more realistically, you could have a userspace SCTP implementation that supports being tunnelled over UDP. In this instance, rather than write a single ?sctp-over-udp? endpoint, you could write a generic sctp endpoint that, if it is composed with another endpoint, expects that endpoint to provide a datagram-style transport to it.

All of this is rather pie in the sky, and potentially the purest example of YAGNI that it?s possible to imagine. However, it?s worth highlighting that endpoints are inches away from being a really powerful composable tool for saying ?tunnel this protocol over this other protocol?. We may not *want* that, but it?s an interesting thought.

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160907/b9a0f39b/attachment-0001.html>

From kevinjacobconway at gmail.com  Wed Sep  7 07:21:36 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Wed, 07 Sep 2016 13:21:36 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
Message-ID: <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>

> However, it?s worth highlighting that endpoints are inches away from
being a really powerful composable tool for saying ?tunnel this protocol
over this other protocol?.

I'm not sure if this is the same concern as the OP. What you've described
is mixing the ideas of composing protocols and composing transports (which
may be inherent to endpoints). TCP, UDP, and UNIX socks are transport layer
choices and adapting them to each other requires opening new file
descriptors. Protocols are transport agnostic and can already be infinitely
composed if implemented as well behaved protocol wrappers.

On Wed, Sep 7, 2016, 07:26 Cory Benfield <cory at lukasa.co.uk> wrote:

>
> On 7 Sep 2016, at 00:05, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>
> On Sep 6, 2016, at 11:55 AM, Tristan Seligmann <mithrandi at mithrandi.net>
> wrote:
>
> Currently there is no way to explicitly compose Twisted endpoints, but
> several endpoint implementations have arisen that explicitly wrap another
> endpoint, and so have needed a way to do this. So far, this has been
> implementing by passing in an endpoint description, and then calling
> serverFromString/clientFromString internally in the endpoint to construct
> the wrapped endpoint. I've seen two different ways of encoding the "inner"
> endpoint:
>
>
> Some other points to keep in mind for this discussion:
>
>
>    1. We may want a syntax that supports composing multiple endpoints,
>    not just 2.
>    2. The existing syntax is kind of crummy; ":" as a separator has
>    serious problems, considering its presence in both URLs and IPv6 literals.
>    I wouldn't say we should *necessarily* re-design the whole syntax to
>    accommodate this, but just having a whole new syntax might not be a bad
>    thing either.
>
>
> I mentioned this casually to Tristan in IRC, but the current syntax and
> use of endpoints in Twisted gets close to a quite profound idea about
> protocol nesting that is lurking in the space of convention. Extending the
> endpoint syntax to have a blessed way of essentially composing endpoints
> together gives the potential of using the endpoint syntax to design and
> implement various ?tunneling? features that are very useful.
>
> If we take the arrow syntax, for a moment, you could conceive a truly
> insane client wanting to write an endpoint to run FTP over that?s a bit
> like:
>
>
> tcp:host=someftp.server:port=21->http:verb=connect->tcp:->socks5:targetname=mypersonalhttpproxy.server->tcp:host=mycorporatesocksproxy.server:port=2121
>
> This would represent tunneling FTP over TCP over HTTP over TCP over SOCKS
> over TCP. For extra fun you can throw in some Tor.
>
> Alternatively, and quite a bit more realistically, you could have a
> userspace SCTP implementation that supports being tunnelled over UDP. In
> this instance, rather than write a single ?sctp-over-udp? endpoint, you
> could write a generic sctp endpoint that, if it is composed with another
> endpoint, expects that endpoint to provide a datagram-style transport to it.
>
> All of this is rather pie in the sky, and potentially the purest example
> of YAGNI that it?s possible to imagine. However, it?s worth highlighting
> that endpoints are inches away from being a really powerful composable tool
> for saying ?tunnel this protocol over this other protocol?. We may not
> *want* that, but it?s an interesting thought.
>
> Cory
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160907/451f122c/attachment.html>

From glyph at twistedmatrix.com  Wed Sep  7 19:18:12 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 Sep 2016 18:18:12 -0700
Subject: [Twisted-Python] eliminating MSI builder
Message-ID: <CFD17FC5-8CC1-4136-9FFC-792B23CD5EC6@twistedmatrix.com>

I think MSIs are generally a bad way to distribute Python libraries.  We are still building them for some reason, and the builder has a bad recent track record of build failures:

https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-msi

Is there any reason we shouldn't get rid of this?

Thanks all,

-glyph

From hawkowl at atleastfornow.net  Wed Sep  7 19:49:38 2016
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Wed, 7 Sep 2016 18:49:38 -0700
Subject: [Twisted-Python] eliminating MSI builder
In-Reply-To: <CFD17FC5-8CC1-4136-9FFC-792B23CD5EC6@twistedmatrix.com>
References: <CFD17FC5-8CC1-4136-9FFC-792B23CD5EC6@twistedmatrix.com>
Message-ID: <CAMxb2iu2FuCTT7u8S5FjqCgKPhDR_0C8HmW-9mb-dbUqByz3QQ@mail.gmail.com>

They actually build wheels now (lol), the builder having some upgrades has
meant that the whl has a different name (cp27-cp27m, not cp27-none). I
noticed it last night, just went to bed before I fixed it :)

On 8 Sep 2016 9:19 AM, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:

> I think MSIs are generally a bad way to distribute Python libraries.  We
> are still building them for some reason, and the builder has a bad recent
> track record of build failures:
>
> https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-msi
>
> Is there any reason we shouldn't get rid of this?
>
> Thanks all,
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160907/47236994/attachment.html>

From glyph at twistedmatrix.com  Wed Sep  7 20:16:04 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 Sep 2016 19:16:04 -0700
Subject: [Twisted-Python] eliminating MSI builder
In-Reply-To: <CAMxb2iu2FuCTT7u8S5FjqCgKPhDR_0C8HmW-9mb-dbUqByz3QQ@mail.gmail.com>
References: <CFD17FC5-8CC1-4136-9FFC-792B23CD5EC6@twistedmatrix.com>
 <CAMxb2iu2FuCTT7u8S5FjqCgKPhDR_0C8HmW-9mb-dbUqByz3QQ@mail.gmail.com>
Message-ID: <F61CA5FE-76B3-4048-90E4-6586BFD71788@twistedmatrix.com>


> On Sep 7, 2016, at 6:49 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> They actually build wheels now (lol), the builder having some upgrades has meant that the whl has a different name (cp27-cp27m, not cp27-none). I noticed it last night, just went to bed before I fixed it :)
> 
> 

aaaaand this is why we ask stuff on the mailing list before randomly deleting stuff :)

Do you think you'll be getting to this today?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160907/8fb9cc68/attachment.html>

From adi at roiban.ro  Thu Sep  8 01:58:18 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 8 Sep 2016 08:58:18 +0100
Subject: [Twisted-Python] eliminating MSI builder
In-Reply-To: <F61CA5FE-76B3-4048-90E4-6586BFD71788@twistedmatrix.com>
References: <CFD17FC5-8CC1-4136-9FFC-792B23CD5EC6@twistedmatrix.com>
 <CAMxb2iu2FuCTT7u8S5FjqCgKPhDR_0C8HmW-9mb-dbUqByz3QQ@mail.gmail.com>
 <F61CA5FE-76B3-4048-90E4-6586BFD71788@twistedmatrix.com>
Message-ID: <CAFycZ9d1h92zMrfCKE07cBph7DK0JWLt87rTX8K3s7g_eU7fiQ@mail.gmail.com>

On 8 September 2016 at 03:16, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Sep 7, 2016, at 6:49 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
>
> They actually build wheels now (lol), the builder having some upgrades has
> meant that the whl has a different name (cp27-cp27m, not cp27-none). I
> noticed it last night, just went to bed before I fixed it :)
>
>
>
> aaaaand this is why we ask stuff on the mailing list before randomly
> deleting stuff :)

There is a ticket in the review queue for adding a tox env for
building the wheel https://twistedmatrix.com/trac/ticket/8544

Once that is done, there is a follow up ticket for moving the builder
on Appveyor https://twistedmatrix.com/trac/ticket/8676

-- 
Adi Roiban


From trac at twistedmatrix.com  Sun Sep 18 00:28:57 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 18 Sep 2016 06:28:57 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1474180137.09.8573515791463394790@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160918/9917bc89/attachment.html>

From trac at twistedmatrix.com  Sun Sep 25 00:05:21 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 25 Sep 2016 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1474783521.44.238916932278620577@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160925/5c90970a/attachment.html>

From knursimu at ciena.com  Wed Sep 28 07:13:58 2016
From: knursimu at ciena.com (Nursimulu, Khen)
Date: Wed, 28 Sep 2016 13:13:58 +0000
Subject: [Twisted-Python] gRPC support in Twisted Python
Message-ID: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>

Hello,

Is there a plan (or an implementation) to support gRPC within Twisted Python?   My understanding is that gRPC is built using Futures and creates its own threads for all its event handling.  There is also a gRPC Python package (grpcio 1.0.0) that is available for python 2.7.    In order to use gRPC with Twisted Python in 2.7 is the only way to have gRPC run in its own thread?

Thanks
Khen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160928/5fbd7a74/attachment.html>

From glyph at twistedmatrix.com  Wed Sep 28 12:15:19 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 28 Sep 2016 11:15:19 -0700
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
Message-ID: <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>


> On Sep 28, 2016, at 6:13 AM, Nursimulu, Khen <knursimu at ciena.com> wrote:

> Is there a plan (or an implementation) to support gRPC within Twisted Python?   My understanding is that gRPC is built using Futures and creates its own threads for all its event handling.  There is also a gRPC Python package (grpcio 1.0.0) that is available for python 2.7.    In order to use gRPC with Twisted Python in 2.7 is the only way to have gRPC run in its own thread?

There's no plan that I'm aware of.  You could definitely run gRPC in a thread currently, although it would be nice if grpc worked natively with Twisted.

Probably contributing this upstream into the gRPC project would be the best way to start, and if they're not receptive, starting a separate 'txgRPC' project.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160928/010c785d/attachment.html>

From knursimu at ciena.com  Wed Sep 28 13:13:26 2016
From: knursimu at ciena.com (Nursimulu, Khen)
Date: Wed, 28 Sep 2016 19:13:26 +0000
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
Message-ID: <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>

Thanks Glyth for the prompt response.

From: <twisted-python-bounces at twistedmatrix.com> on behalf of Glyph Lefkowitz <glyph at twistedmatrix.com>
Reply-To: "twisted-python at twistedmatrix.com" <twisted-python at twistedmatrix.com>
Date: Wednesday, September 28, 2016 at 2:15 PM
To: "twisted-python at twistedmatrix.com" <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] gRPC support in Twisted Python


On Sep 28, 2016, at 6:13 AM, Nursimulu, Khen <knursimu at ciena.com<mailto:knursimu at ciena.com>> wrote:


Is there a plan (or an implementation) to support gRPC within Twisted Python?   My understanding is that gRPC is built using Futures and creates its own threads for all its event handling.  There is also a gRPC Python package (grpcio 1.0.0) that is available for python 2.7.    In order to use gRPC with Twisted Python in 2.7 is the only way to have gRPC run in its own thread?

There's no plan that I'm aware of.  You could definitely run gRPC in a thread currently, although it would be nice if grpc worked natively with Twisted.

Probably contributing this upstream into the gRPC project would be the best way to start, and if they're not receptive, starting a separate 'txgRPC' project.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160928/d7f831ee/attachment.html>

From werner at thieprojects.ch  Wed Sep 28 13:43:13 2016
From: werner at thieprojects.ch (Werner Thie)
Date: Wed, 28 Sep 2016 09:43:13 -1000
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
Message-ID: <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>

On 9/28/16 9:13 AM, Nursimulu, Khen wrote:
> Thanks Glyth for the prompt response.

>     On Sep 28, 2016, at 6:13 AM, Nursimulu, Khen <knursimu at ciena.com
>     <mailto:knursimu at ciena.com>> wrote:
>
>     Is there a plan (or an implementation) to support gRPC within
>     Twisted Python?   My understanding is that gRPC is built using
>     Futures and creates its own threads for all its event handling.
>     There is also a gRPC Python package (grpcio 1.0.0) that is available
>     for python 2.7.    In order to use gRPC with Twisted Python in 2.7
>     is the only way to have gRPC run in its own thread?
>
> There's no plan that I'm aware of.  You could definitely run gRPC in a
> thread currently, although it would be nice if grpc worked natively with
> Twisted.
>
> Probably contributing this upstream into the gRPC project would be the
> best way to start, and if they're not receptive, starting a separate
> 'txgRPC' project.
>

Interesting, with the browser implementation in the works this could 
become a full replacement of nevow/athena

Werner


From glyph at twistedmatrix.com  Wed Sep 28 21:47:29 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 28 Sep 2016 20:47:29 -0700
Subject: [Twisted-Python] How do you determine the buffer size of a
	transport - a use-case for not using back pressure
In-Reply-To: <CAPxhEGccVASQQsh9kGODOVnu3ygHrjDAdo+8_gwYLWwmaqQ1mA@mail.gmail.com>
References: <CAPxhEGccVASQQsh9kGODOVnu3ygHrjDAdo+8_gwYLWwmaqQ1mA@mail.gmail.com>
Message-ID: <A57C76E6-5EE9-442D-A059-FD4346C1E88A@twistedmatrix.com>

Hi Steve,

It looks like I had marked this message as interesting and warranting a reply, but never got around to it.  I'm sorry it's been quite a while!  I appreciate the amount of research you did here :-).

> On Aug 17, 2016, at 3:43 PM, Steve Morin <steve.morin at gmail.com> wrote:
> 
> Twisted Community
> 
> Problem: How do you determine the buffer size of a transport, to know how much data is waiting to be transmitted from using transport.write?
> 
> Wait! You're going to say: use the Producer Consumer API ( http://twistedmatrix.com/documents/current/core/howto/producers.html <http://twistedmatrix.com/documents/current/core/howto/producers.html> )

This is, unfortunately, the only solution :).

> To do what: So that instead of using back pressure I can check the buffer and when it's "too big/full" can decide to do something to the transport I am writing to:

I think when you say "back pressure" you're referring to your program exerting back-pressure on its peer.  I understand why you don't want to do that.  However, there's another kind of back pressure - your peer exerting back pressure on your program.

Commensurately, there are two ways to use back pressure:

To exert back pressure on your peer, call `self.transport.pauseProducing()`.  Later, when you're ready to receive more data, call `self.transport.resumeProducing()`.  This is what you don't want to do.
To detect when back pressure is applied from your peer, call `self.transport.registerProducer(self, True)`; then the reactor will call pauseProducing() when its buffer is full and and resumeProducing() when it empties out again.

Your list of things you might want to do here:

> - Buffer to disk instead of memory
> - Kill the transport
> - Decide to skip sending some data
> - Send an error or message to the transport I am writing to
> - Reduce the resolution, increase the compression (things like video or audio)

is a good one, and all these things can be achieved.  Going through them:

If you want to buffer to disk instead of memory, have a method like:

def someDataToSendToPeer(self, someData):
    if self.isProducing:
        self.transport.write(someData)
    else:
        self.bufferFile.write(someData)

def pauseProducing(self):
    self.isProducing = False
    self.bufferFile = open("buffer.file", "wb")

def resumeProducing(self):
    self.isProducing = True
    self.startUbufferingFromFile()

If you want to kill the transport,

def pauseProducing(self):
    self.transport.abortConnection()

If you want to reduce video stream quality,

def streamSomeRawVideo(self, someRawVideo):
    if self.isProducing:
        self.transport.write(self.videoBuffer.addAndEncodeToBytes(someRawVideo))
    else:
        self.videoBuffer.addAndCompressSomeMore(someRawVideo)

and so on, and so on.

Basically, you can treat the buffer as "empty" until pauseProducing() is called.  Once it is, you can treat it as "full".

Hope this was helpful, and still timely enough for you to make some use of it :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160928/99042030/attachment-0001.html>

From stephen at thorne.id.au  Thu Sep 29 01:34:40 2016
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 29 Sep 2016 07:34:40 +0000
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
Message-ID: <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>

[+Nathaniel]

https://groups.google.com/forum/m/#!topic/grpc-io/RpkyqqQy8TU/discussion

Hi. I'd like to link you to the above discussion and cc it's original
poster.

On Wed, Sep 28, 2016, 22:51 Werner Thie <werner at thieprojects.ch> wrote:

> On 9/28/16 9:13 AM, Nursimulu, Khen wrote:
> > Thanks Glyth for the prompt response.
>
> >     On Sep 28, 2016, at 6:13 AM, Nursimulu, Khen <knursimu at ciena.com
> >     <mailto:knursimu at ciena.com>> wrote:
> >
> >     Is there a plan (or an implementation) to support gRPC within
> >     Twisted Python?   My understanding is that gRPC is built using
> >     Futures and creates its own threads for all its event handling.
> >     There is also a gRPC Python package (grpcio 1.0.0) that is available
> >     for python 2.7.    In order to use gRPC with Twisted Python in 2.7
> >     is the only way to have gRPC run in its own thread?
> >
> > There's no plan that I'm aware of.  You could definitely run gRPC in a
> > thread currently, although it would be nice if grpc worked natively with
> > Twisted.
> >
> > Probably contributing this upstream into the gRPC project would be the
> > best way to start, and if they're not receptive, starting a separate
> > 'txgRPC' project.
> >
>
> Interesting, with the browser implementation in the works this could
> become a full replacement of nevow/athena
>
> Werner
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160929/9d698389/attachment.html>

From jamesbroadhead at gmail.com  Thu Sep 29 18:41:14 2016
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Fri, 30 Sep 2016 01:41:14 +0100
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
 <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
Message-ID: <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>

If you're planning on working on this, it'd probably be worth taking a look
at the Twisted bindings for Thrift (a competing RPC system from FB, based
on the Google PB paper).

The generator[2] isn't the best place to start (imperative C++ that outputs
python), but the code that it generates served us very well for years
(generally, communicating twisted->cassandra, or twisted->scala services).

[1] https://thrift.apache.org/
[2]
https://github.com/apache/thrift/blob/master/compiler/cpp/src/thrift/generate/t_py_generator.cc

On 29 September 2016 at 08:34, Stephen Thorne <stephen at thorne.id.au> wrote:

> [+Nathaniel]
>
> https://groups.google.com/forum/m/#!topic/grpc-io/RpkyqqQy8TU/discussion
>
> Hi. I'd like to link you to the above discussion and cc it's original
> poster.
>
>
> On Wed, Sep 28, 2016, 22:51 Werner Thie <werner at thieprojects.ch> wrote:
>
>> On 9/28/16 9:13 AM, Nursimulu, Khen wrote:
>> > Thanks Glyth for the prompt response.
>>
>> >     On Sep 28, 2016, at 6:13 AM, Nursimulu, Khen <knursimu at ciena.com
>> >     <mailto:knursimu at ciena.com>> wrote:
>> >
>> >     Is there a plan (or an implementation) to support gRPC within
>> >     Twisted Python?   My understanding is that gRPC is built using
>> >     Futures and creates its own threads for all its event handling.
>> >     There is also a gRPC Python package (grpcio 1.0.0) that is available
>> >     for python 2.7.    In order to use gRPC with Twisted Python in 2.7
>> >     is the only way to have gRPC run in its own thread?
>> >
>> > There's no plan that I'm aware of.  You could definitely run gRPC in a
>> > thread currently, although it would be nice if grpc worked natively with
>> > Twisted.
>> >
>> > Probably contributing this upstream into the gRPC project would be the
>> > best way to start, and if they're not receptive, starting a separate
>> > 'txgRPC' project.
>> >
>>
>> Interesting, with the browser implementation in the works this could
>> become a full replacement of nevow/athena
>>
>> Werner
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160930/a452da62/attachment.html>

From cristobal23 at gmail.com  Fri Sep 30 21:19:30 2016
From: cristobal23 at gmail.com (=?UTF-8?Q?Crist=C3=B3bal_Villarroel?=)
Date: Fri, 30 Sep 2016 20:19:30 -0700
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <D910FC43-07B6-4C37-A9EA-D88A89028954@lukasa.co.uk>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>
 <CA+U=zK34Mz_5LsSCfv2O4B3mhAviw50hhviBDf1wvuKvbmRpUA@mail.gmail.com>
 <1BACC9A4-D24A-4FC1-B3ED-42AF22575B91@ox.cx>
 <D910FC43-07B6-4C37-A9EA-D88A89028954@lukasa.co.uk>
Message-ID: <CA+C14gKdzmKZarH8py-rNwnVPFPLB5y+-ZgsYajtZNgN-MwxKA@mail.gmail.com>

Hi Ashwini,

I would like to contribute $100 towards this effort.

Cheers,
Cris

On Mon, Sep 5, 2016 at 7:21 AM, Cory Benfield <cory at lukasa.co.uk> wrote:

> Let?s get this done. I?ll go up to $100 as well.
>
> Cory
>
> On 3 Sep 2016, at 12:32, Hynek Schlawack <hs at ox.cx> wrote:
>
> Since this kind of fell to slumber: I'm upping my ante to $100 however
> many coins that gives me.
>
> Sent from my phone.
>
> Am 20.06.2016 um 18:33 schrieb Kevin Horn <kevin.horn at gmail.com>:
>
> I haven't been very active in a while, but:
>
> a) this is a really cool idea
> b) I'd really like one of these for myself
>
> So, sign me up for 5 coins.  I might be willing to up that to 10 if it
> makes a difference in this happening or not.
>
>
>
> On Wed, Jun 15, 2016 at 12:20 PM, lvh <_ at lvh.io> wrote:
>
>> Hey,
>>
>>
>> > On Jun 14, 2016, at 8:44 PM, Ashwini Oruganti <
>> ashfall at twistedmatrix.com> wrote:
>> >
>> > Hello!
>> >
>> > We are planning to get us some challenge coins, which is exciting! You
>> should also be excited with us because this means:
>> >
>> > - we can now give it out to contributors at sprints and meetups.
>> > - challenge coins are awesome.
>> >
>> > Each coin costs about $6, and the minimum order is 100 coins. Glyph
>> thinks everyone should have some to give out as tokens of appreciation to
>> other contributors, and glyph's thoughts are usually worth following.
>>
>> 5 seems like the number, but we?ll see if we get up to the required
>> minimum order :)
>>
>>
>> lvh
>>
>> > So, if you are a Twisted contributor and would like to own a challenge
>> coin, please respond to this email. Also, do mention how many coins you
>> would like, and where you are located so that we can send you your coin(s).
>> >
>> >
>> > -ashfall
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> --
> Kevin Horn
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160930/749de5b8/attachment.html>

From yuri_abzyanov at fastmail.fm  Thu Sep  1 07:42:02 2016
From: yuri_abzyanov at fastmail.fm (Yuri)
Date: Thu, 1 Sep 2016 20:42:02 +0700
Subject: [Twisted-Python] "twistd" in Twisted 16.4.0 can't import
 modules/packages from current working directory
Message-ID: <57C8302A.1050703@fastmail.fm>

Hi all

I couldn't find Twisted-specific group, so posting here.

Recently Twisted 16.4.0 got released. Yesterday I've tried to upgrade it 
for my apps and got an error.

I've created simple example, which demonstrates it.

File service.tac:
=======================================
import os
from twisted.application import service, internet

import mymodule

application = service.Application("Demo application")
----------------------------------------


File mymodule.py:
========================================
def myfunction(asd):
     """ Stub function """
----------------------------------------


If you try to run it with twistd -y service.tac you'll get an error:
== output ==============================
Unhandled Error
Traceback (most recent call last):
   File 
"/usr/local/lib/python2.7/site-packages/twisted/application/app.py", 
line 648, in run
     runApp(config)
   File 
"/usr/local/lib/python2.7/site-packages/twisted/scripts/twistd.py", line 
25, in runApp
     _SomeApplicationRunner(config).run()
   File 
"/usr/local/lib/python2.7/site-packages/twisted/application/app.py", 
line 379, in run
     self.application = self.createOrGetApplication()
   File 
"/usr/local/lib/python2.7/site-packages/twisted/application/app.py", 
line 444, in createOrGetApplication
     application = getApplication(self.config, passphrase)
--- <exception caught here> ---
   File 
"/usr/local/lib/python2.7/site-packages/twisted/application/app.py", 
line 455, in getApplication
     application = service.loadApplication(filename, style, passphrase)
   File 
"/usr/local/lib/python2.7/site-packages/twisted/application/service.py", 
line 411, in loadApplication
     passphrase)
   File 
"/usr/local/lib/python2.7/site-packages/twisted/persisted/sob.py", line 
223, in loadValueFromFile
     eval(codeObj, d, d)
   File "service.tac", line 7, in <module>
     import mymodule
exceptions.ImportError: No module named mymodule


Failed to load application: No module named mymodule
----------------------------------------


The errors comes down to this: twistd script does not add current 
working directory to python path (or removes it, I don't know what 
exactly happens), so it fails to import any packages/modules from it. 
The issue does not appear in previous version (Twisted 16.3.2).

Any ideas what caused it?




From yuri_abzyanov at fastmail.fm  Thu Sep  1 07:54:46 2016
From: yuri_abzyanov at fastmail.fm (Yuri)
Date: Thu, 1 Sep 2016 20:54:46 +0700
Subject: [Twisted-Python] "twistd" in Twisted 16.4.0 can't import
 modules/packages from current working directory
In-Reply-To: <57C8302A.1050703@fastmail.fm>
References: <57C8302A.1050703@fastmail.fm>
Message-ID: <nq9bv5$unc$2@blaine.gmane.org>

On 01/09/16 20:42, Yuri wrote:
>
> I couldn't find Twisted-specific group, so posting here.
>

Sorry, obviously this IS Twisted-specific group. I've copied the message 
from python list, where I initially posted it and was redirected to this 
group.




From hawkowl at atleastfornow.net  Thu Sep  1 09:36:12 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Thu, 1 Sep 2016 23:36:12 +0800
Subject: [Twisted-Python] "twistd" in Twisted 16.4.0 can't import
	modules/packages from current working directory
In-Reply-To: <57C8302A.1050703@fastmail.fm>
References: <57C8302A.1050703@fastmail.fm>
Message-ID: <C6F37597-5AF5-4AC7-80BB-07153F4D4824@atleastfornow.net>


> On 1 Sep 2016, at 21:42, Yuri <yuri_abzyanov at fastmail.fm> wrote:
> 
> Hi all
> 
> I couldn't find Twisted-specific group, so posting here.
> 
> Recently Twisted 16.4.0 got released. Yesterday I've tried to upgrade it for my apps and got an error.
> 
> ...
> 
> The errors comes down to this: twistd script does not add current working directory to python path (or removes it, I don't know what exactly happens), so it fails to import any packages/modules from it. The issue does not appear in previous version (Twisted 16.3.2).
> 
> Any ideas what caused it?

Yes -- we moved to using setuptools console scripts, and these console scripts don't add "." to the PYTHONPATH. We realised this in prerelease but decided against fixing it, as it adding the current working dir to the PATH has lead to a lot of  subtle bugs in the past and this is a good chance to make a break from them.

So, in short, this is expected behaviour -- we generally want people to be running twistd, trial, etc on *installed* Python packages -- testing or running from checkouts often hides many bugs about what is or isn't included in the installed package by accident. If you rely on this behaviour, though, set the PYTHONPATH environment variable to "." -- e.g. `env PYTHONPATH=. twistd -n myplugin`.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160901/3683747c/attachment.sig>

From markrwilliams at gmail.com  Thu Sep  1 09:35:51 2016
From: markrwilliams at gmail.com (Mark Williams)
Date: Thu, 1 Sep 2016 08:35:51 -0700
Subject: [Twisted-Python] "twistd" in Twisted 16.4.0 can't import
 modules/packages from current working directory
In-Reply-To: <57C8302A.1050703@fastmail.fm>
References: <57C8302A.1050703@fastmail.fm>
Message-ID: <20160901153550.GA29410@hammal>

On Thu, Sep 01, 2016 at 08:42:02PM +0700, Yuri wrote:
> The errors comes down to this: twistd script does not add current working
> directory to python path (or removes it, I don't know what exactly happens),
> so it fails to import any packages/modules from it. The issue does not
> appear in previous version (Twisted 16.3.2).
>
> Any ideas what caused it?
>
The commits that closed this ticket:
http://twistedmatrix.com/trac/ticket/8491

Generally:
https://github.com/twisted/twisted/commit/c5a4c635de259cd1b92a555c930aa426164f9cce
Specifically:
https://github.com/twisted/twisted/commit/c5a4c635de259cd1b92a555c930aa426164f9cce#diff-a7270bb5043e420fd7a98b81e48ac082

The bin/twistd script would add the current working directory to
sys.path prior to running the actual twistd logic.  This was not
ported over.

I'm going to say that was a conscious decision, as it coincided with
moving twisted to a src/ layout and a fair bit of discussion (visible
in that ticket) about how these changes have made trial only discover
installed code and not whatever's in the current working directory.

To a developer of Twisted it's clear that the project's trying to
replace magical code discovery with boring code importing.  To a user,
that's not clear, and we need to clearly document this.

Being a Twisted developer, I do think in general that it's better to
install your code into an existing sys.path entry instead of adding a
sys.path entry that contains your code.

Would this be difficult for your application, and if so, why?  If it's
possible to make it easier for your application I'd like to help.

Thanks for using Twisted!

-Mark



From yuri_abzyanov at fastmail.fm  Thu Sep  1 20:03:54 2016
From: yuri_abzyanov at fastmail.fm (Yuri)
Date: Fri, 2 Sep 2016 09:03:54 +0700
Subject: [Twisted-Python] "twistd" in Twisted 16.4.0 can't import
 modules/packages from current working directory
In-Reply-To: <57C8302A.1050703@fastmail.fm>
References: <57C8302A.1050703@fastmail.fm>
Message-ID: <57C8DE0A.6020001@fastmail.fm>

Thanks for swift response!

I do not tend to install my applications. Never did that to be honest, 
and don't know what kind of issues to expect. Definitely should try it.

For now workaround will be fine.

Just wanted to confirm that it's an intended behavior and find out the 
reasons why that was changed.




From hs at ox.cx  Sat Sep  3 05:32:11 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Sat, 3 Sep 2016 13:32:11 +0200
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <CA+U=zK34Mz_5LsSCfv2O4B3mhAviw50hhviBDf1wvuKvbmRpUA@mail.gmail.com>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>
 <CA+U=zK34Mz_5LsSCfv2O4B3mhAviw50hhviBDf1wvuKvbmRpUA@mail.gmail.com>
Message-ID: <1BACC9A4-D24A-4FC1-B3ED-42AF22575B91@ox.cx>

Since this kind of fell to slumber: I'm upping my ante to $100 however many coins that gives me.

Sent from my phone.

> Am 20.06.2016 um 18:33 schrieb Kevin Horn <kevin.horn at gmail.com>:
> 
> I haven't been very active in a while, but:
> 
> a) this is a really cool idea
> b) I'd really like one of these for myself
> 
> So, sign me up for 5 coins.  I might be willing to up that to 10 if it makes a difference in this happening or not.
> 
> 
> 
>> On Wed, Jun 15, 2016 at 12:20 PM, lvh <_ at lvh.io> wrote:
>> Hey,
>> 
>> 
>> > On Jun 14, 2016, at 8:44 PM, Ashwini Oruganti <ashfall at twistedmatrix.com> wrote:
>> >
>> > Hello!
>> >
>> > We are planning to get us some challenge coins, which is exciting! You should also be excited with us because this means:
>> >
>> > - we can now give it out to contributors at sprints and meetups.
>> > - challenge coins are awesome.
>> >
>> > Each coin costs about $6, and the minimum order is 100 coins. Glyph thinks everyone should have some to give out as tokens of appreciation to other contributors, and glyph's thoughts are usually worth following.
>> 
>> 5 seems like the number, but we’ll see if we get up to the required minimum order :)
>> 
>> 
>> lvh
>> 
>> > So, if you are a Twisted contributor and would like to own a challenge coin, please respond to this email. Also, do mention how many coins you would like, and where you are located so that we can send you your coin(s).
>> >
>> >
>> > -ashfall
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> -- 
> --
> Kevin Horn
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160903/d424e9c3/attachment-0002.html>

From cory at lukasa.co.uk  Mon Sep  5 08:21:46 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 5 Sep 2016 15:21:46 +0100
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <1BACC9A4-D24A-4FC1-B3ED-42AF22575B91@ox.cx>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>
 <CA+U=zK34Mz_5LsSCfv2O4B3mhAviw50hhviBDf1wvuKvbmRpUA@mail.gmail.com>
 <1BACC9A4-D24A-4FC1-B3ED-42AF22575B91@ox.cx>
Message-ID: <D910FC43-07B6-4C37-A9EA-D88A89028954@lukasa.co.uk>

Let’s get this done. I’ll go up to $100 as well.

Cory

> On 3 Sep 2016, at 12:32, Hynek Schlawack <hs at ox.cx> wrote:
> 
> Since this kind of fell to slumber: I'm upping my ante to $100 however many coins that gives me.
> 
> Sent from my phone.
> 
> Am 20.06.2016 um 18:33 schrieb Kevin Horn <kevin.horn at gmail.com <mailto:kevin.horn at gmail.com>>:
> 
>> I haven't been very active in a while, but:
>> 
>> a) this is a really cool idea
>> b) I'd really like one of these for myself
>> 
>> So, sign me up for 5 coins.  I might be willing to up that to 10 if it makes a difference in this happening or not.
>> 
>> 
>> 
>> On Wed, Jun 15, 2016 at 12:20 PM, lvh <_ at lvh.io <mailto:_ at lvh.io>> wrote:
>> Hey,
>> 
>> 
>> > On Jun 14, 2016, at 8:44 PM, Ashwini Oruganti <ashfall at twistedmatrix.com <mailto:ashfall at twistedmatrix.com>> wrote:
>> >
>> > Hello!
>> >
>> > We are planning to get us some challenge coins, which is exciting! You should also be excited with us because this means:
>> >
>> > - we can now give it out to contributors at sprints and meetups.
>> > - challenge coins are awesome.
>> >
>> > Each coin costs about $6, and the minimum order is 100 coins. Glyph thinks everyone should have some to give out as tokens of appreciation to other contributors, and glyph's thoughts are usually worth following.
>> 
>> 5 seems like the number, but we’ll see if we get up to the required minimum order :)
>> 
>> 
>> lvh
>> 
>> > So, if you are a Twisted contributor and would like to own a challenge coin, please respond to this email. Also, do mention how many coins you would like, and where you are located so that we can send you your coin(s).
>> >
>> >
>> > -ashfall
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> 
>> 
>> -- 
>> --
>> Kevin Horn
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160905/a092b721/attachment-0002.html>

From mithrandi at mithrandi.net  Tue Sep  6 12:55:03 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 06 Sep 2016 18:55:03 +0000
Subject: [Twisted-Python] Endpoint composition syntax
Message-ID: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>

I'm kicking off this discussion on the mailing list as I don't have
anything well-formed enough to take to the bug tracker, and I am hoping to
get some more engagement on the matter.

Currently there is no way to explicitly compose Twisted endpoints, but
several endpoint implementations have arisen that explicitly wrap another
endpoint, and so have needed a way to do this. So far, this has been
implementing by passing in an endpoint description, and then calling
serverFromString/clientFromString internally in the endpoint to construct
the wrapped endpoint. I've seen two different ways of encoding the "inner"
endpoint:

1. Backslash escaping; for example:

tls:awesome.site.example.com:443:endpoint=tcp\:7.6.5.4\:443

This has the advantage that it is endlessly nestable, for example:

tls:internal.hostname.whatever:42:endpoint=tls\:awesome.site.example.com
\:443\:endpoint=tcp\\\:7.6.5.4\\\:443

It has the disadvantage that it is a bit tricky to read and write.

2. Splitting keyword and positional arguments; for example:

txsni:/srv/certs:tcp:443

This has the advantage that it is easier to read and write, but the
disadvantage that it isn't nestable. It also starts to break down when you
have a lot of parameters, as the positional syntax becomes much harder to
read.

Neither of these solutions is entirely satisfactory; I initially followed
approach 2 for txacme, but now that I need to add more parameters to the
le:/lets: endpoints, it is starting to break down.

Cory suggested a third possibility; an explicit syntax for composing
endpoints. In this model, the endpoint string parsing machinery would
construct the different endpoints, and compose them together (presumably
the API of the parsers would need to be extended a bit for this). For
example:

tls:awesome.site.example.com:443->tcp:7.6.5.4:443

A less whimsical syntax than "->" might be better; for example, semicolons,
or something like that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160906/d3de1850/attachment-0002.html>

From meejah at meejah.ca  Tue Sep  6 14:43:08 2016
From: meejah at meejah.ca (meejah)
Date: Wed, 07 Sep 2016 00:43:08 +0400
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 (Tristan Seligmann's message of "Tue, 06 Sep 2016 18:55:03 +0000")
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
Message-ID: <86fupcn4ir.fsf@atlantis.meejah.ca>

Tristan Seligmann <mithrandi at mithrandi.net> writes:

> Currently there is no way to explicitly compose Twisted endpoints, but
> several endpoint implementations have arisen that explicitly wrap
> another endpoint, and so have needed a way to do this.

A couple other examples:

Autobahn provides 'Web Application Messaging Protocol' (WAMP) endpoints
that can use either a Unix, TCP or WebSockets protocol under the hood --
having a proper endpoint syntax for this would be nice. There is *some*
support for endpoint-strings in Autobahn using the backslash trick, but
this also results in some ugliness like:

   r"autobahn:tcp\:9000\:interface\=0.0.0.0:url=ws\://localhost\:9000:compress=false"
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ~~~~~~~~~~~~~~~~~~~~~

Ideally txtorcon would have a way to specify "how" to connect for
client-side connections meaning "I want a stream over the Tor whose
control-port is 'unix:/foo' that connects via SOCKS at unix:/bar to
https://meejah.ca". (This can only be done in code, currently, not
endpoint-strings) Now think about specifying that you want the above
Autobahn connection to go over Tor ;) that is, replacing
"https://meejah.ca" with the monster above...

     *   *   *

On a possible tangent: I wonder if this also ties in with trying to wrap
protocols to "hand off" their transport to another one? Examples of this
are: SOCKS (e.g. speaking one protocol "after" another), or in Autobahn
where it's nice to listen for both "normal" Web requests and also
WebSockets requests on the same port (so there's a protocol that "peeks"
and hands off to HTTP or WebSockets handlers).

I can also imagine doing the same thing with http://magic-wormhole.io
where you would establish a connection via the wormhole mechanism, and
then pass over the established transport to the "real" protocol
(e.g. could be HTTP, WAMP, SSH, WebSockets, something custom, etc) and
this at least has an obvious need for a corresponding string-parser
syntax like the one suggested.

> tls:awesome.site.example.com:443->tcp:7.6.5.4:443 A less whimsical
> syntax than "->" might be better; for example, semicolons, or
> something like that.

I wonder if a simple space would work? Downsides would be: requiring
quoting on shells; maybe it would present problems in config-file
use-cases; ...

So, we want "something" the highest-level parser can split on before
handing off bits (or all) of it to the actual plugins:

 - can't have ":" since that's already a separatator
 - can't have "=" since it's already used
 - shouldn't already be in popular protocols/options (e.g. anything
   valid in a URI?)

In some ways having a two-character separator could be really nice, as
it's far less likely to collide with things? I like that the intent of
"->" is also reasonably obvious, I think. Or at least hopefully looks
strange enough that you'll look it up ;)

Thanks for kicking off discussion :)

-- 
meejah



From glyph at twistedmatrix.com  Tue Sep  6 17:05:40 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Sep 2016 16:05:40 -0700
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
Message-ID: <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>


> On Sep 6, 2016, at 11:55 AM, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> 
> Currently there is no way to explicitly compose Twisted endpoints, but several endpoint implementations have arisen that explicitly wrap another endpoint, and so have needed a way to do this. So far, this has been implementing by passing in an endpoint description, and then calling serverFromString/clientFromString internally in the endpoint to construct the wrapped endpoint. I've seen two different ways of encoding the "inner" endpoint:
> 

Some other points to keep in mind for this discussion:

We may want a syntax that supports composing multiple endpoints, not just 2.
The existing syntax is kind of crummy; ":" as a separator has serious problems, considering its presence in both URLs and IPv6 literals.  I wouldn't say we should necessarily re-design the whole syntax to accommodate this, but just having a whole new syntax might not be a bad thing either.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160906/1b392ab8/attachment-0002.html>

From kevinjacobconway at gmail.com  Tue Sep  6 20:11:33 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Wed, 07 Sep 2016 02:11:33 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
Message-ID: <CAKF=+di9h1+sd5MfinqsFsAeiW+mEAedAVcVYgMh=98gFGc8Qw@mail.gmail.com>

I'm not opposed to a fresh syntax, but I do believe the current
implementation can be used for composition. The parser for endpoint strings
is simplistic, like Glyph points out, but there is nothing preventing it
from having nested endpoint definitions. We used the existing syntax when
writing the HAProxy endpoint wrapper:
https://github.com/twisted/twisted/blob/trunk/src/twisted/protocols/haproxy/_parser.py
.

Granted, this case doesn't come with any configuration options but it shows
a potential path for adding wrapping functionality in the current
implementation. I think are some downsides when it comes to args, kwargs
management. To support them across multiple, arbitrary nested endpoints the
kwargs would need to have non-colliding names and the wrapper would need to
do some amount of introspection on args to determine if the leading values
are for it or another endpoint.

I don't think the developer experience would be a good one, but there _is_
a way to compose endpoints if you're set on doing so.

On Tue, Sep 6, 2016 at 6:08 PM Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Sep 6, 2016, at 11:55 AM, Tristan Seligmann <mithrandi at mithrandi.net>
> wrote:
>
> Currently there is no way to explicitly compose Twisted endpoints, but
> several endpoint implementations have arisen that explicitly wrap another
> endpoint, and so have needed a way to do this. So far, this has been
> implementing by passing in an endpoint description, and then calling
> serverFromString/clientFromString internally in the endpoint to construct
> the wrapped endpoint. I've seen two different ways of encoding the "inner"
> endpoint:
>
>
> Some other points to keep in mind for this discussion:
>
>
>    1. We may want a syntax that supports composing multiple endpoints,
>    not just 2.
>    2. The existing syntax is kind of crummy; ":" as a separator has
>    serious problems, considering its presence in both URLs and IPv6 literals.
>    I wouldn't say we should *necessarily* re-design the whole syntax to
>    accommodate this, but just having a whole new syntax might not be a bad
>    thing either.
>
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160907/cae21253/attachment-0002.html>

From cory at lukasa.co.uk  Wed Sep  7 06:23:33 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 7 Sep 2016 13:23:33 +0100
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
Message-ID: <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>


> On 7 Sep 2016, at 00:05, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Sep 6, 2016, at 11:55 AM, Tristan Seligmann <mithrandi at mithrandi.net <mailto:mithrandi at mithrandi.net>> wrote:
>> 
>> Currently there is no way to explicitly compose Twisted endpoints, but several endpoint implementations have arisen that explicitly wrap another endpoint, and so have needed a way to do this. So far, this has been implementing by passing in an endpoint description, and then calling serverFromString/clientFromString internally in the endpoint to construct the wrapped endpoint. I've seen two different ways of encoding the "inner" endpoint:
>> 
> 
> Some other points to keep in mind for this discussion:
> 
> We may want a syntax that supports composing multiple endpoints, not just 2.
> The existing syntax is kind of crummy; ":" as a separator has serious problems, considering its presence in both URLs and IPv6 literals.  I wouldn't say we should necessarily re-design the whole syntax to accommodate this, but just having a whole new syntax might not be a bad thing either.

I mentioned this casually to Tristan in IRC, but the current syntax and use of endpoints in Twisted gets close to a quite profound idea about protocol nesting that is lurking in the space of convention. Extending the endpoint syntax to have a blessed way of essentially composing endpoints together gives the potential of using the endpoint syntax to design and implement various “tunneling” features that are very useful.

If we take the arrow syntax, for a moment, you could conceive a truly insane client wanting to write an endpoint to run FTP over that’s a bit like:

    tcp:host=someftp.server:port=21->http:verb=connect->tcp:->socks5:targetname=mypersonalhttpproxy.server->tcp:host=mycorporatesocksproxy.server:port=2121

This would represent tunneling FTP over TCP over HTTP over TCP over SOCKS over TCP. For extra fun you can throw in some Tor.

Alternatively, and quite a bit more realistically, you could have a userspace SCTP implementation that supports being tunnelled over UDP. In this instance, rather than write a single “sctp-over-udp” endpoint, you could write a generic sctp endpoint that, if it is composed with another endpoint, expects that endpoint to provide a datagram-style transport to it.

All of this is rather pie in the sky, and potentially the purest example of YAGNI that it’s possible to imagine. However, it’s worth highlighting that endpoints are inches away from being a really powerful composable tool for saying “tunnel this protocol over this other protocol”. We may not *want* that, but it’s an interesting thought.

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160907/b9a0f39b/attachment-0002.html>

From kevinjacobconway at gmail.com  Wed Sep  7 07:21:36 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Wed, 07 Sep 2016 13:21:36 +0000
Subject: [Twisted-Python] Endpoint composition syntax
In-Reply-To: <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
References: <CAMcKhMQ+3F4w+Zqyz7TX4NfMySCupsXFTFy2Y8xD-cXHTjHh1A@mail.gmail.com>
 <B3BD0EF9-2977-4FEB-B370-08E230837273@twistedmatrix.com>
 <018ED295-4055-4EC4-AF38-C9558A858309@lukasa.co.uk>
Message-ID: <CAKF=+dgexw+23iGUNhc_+TnJV8c93eZLBx3Ev27cTUyDGzoCDA@mail.gmail.com>

> However, it’s worth highlighting that endpoints are inches away from
being a really powerful composable tool for saying “tunnel this protocol
over this other protocol”.

I'm not sure if this is the same concern as the OP. What you've described
is mixing the ideas of composing protocols and composing transports (which
may be inherent to endpoints). TCP, UDP, and UNIX socks are transport layer
choices and adapting them to each other requires opening new file
descriptors. Protocols are transport agnostic and can already be infinitely
composed if implemented as well behaved protocol wrappers.

On Wed, Sep 7, 2016, 07:26 Cory Benfield <cory at lukasa.co.uk> wrote:

>
> On 7 Sep 2016, at 00:05, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>
> On Sep 6, 2016, at 11:55 AM, Tristan Seligmann <mithrandi at mithrandi.net>
> wrote:
>
> Currently there is no way to explicitly compose Twisted endpoints, but
> several endpoint implementations have arisen that explicitly wrap another
> endpoint, and so have needed a way to do this. So far, this has been
> implementing by passing in an endpoint description, and then calling
> serverFromString/clientFromString internally in the endpoint to construct
> the wrapped endpoint. I've seen two different ways of encoding the "inner"
> endpoint:
>
>
> Some other points to keep in mind for this discussion:
>
>
>    1. We may want a syntax that supports composing multiple endpoints,
>    not just 2.
>    2. The existing syntax is kind of crummy; ":" as a separator has
>    serious problems, considering its presence in both URLs and IPv6 literals.
>    I wouldn't say we should *necessarily* re-design the whole syntax to
>    accommodate this, but just having a whole new syntax might not be a bad
>    thing either.
>
>
> I mentioned this casually to Tristan in IRC, but the current syntax and
> use of endpoints in Twisted gets close to a quite profound idea about
> protocol nesting that is lurking in the space of convention. Extending the
> endpoint syntax to have a blessed way of essentially composing endpoints
> together gives the potential of using the endpoint syntax to design and
> implement various “tunneling” features that are very useful.
>
> If we take the arrow syntax, for a moment, you could conceive a truly
> insane client wanting to write an endpoint to run FTP over that’s a bit
> like:
>
>
> tcp:host=someftp.server:port=21->http:verb=connect->tcp:->socks5:targetname=mypersonalhttpproxy.server->tcp:host=mycorporatesocksproxy.server:port=2121
>
> This would represent tunneling FTP over TCP over HTTP over TCP over SOCKS
> over TCP. For extra fun you can throw in some Tor.
>
> Alternatively, and quite a bit more realistically, you could have a
> userspace SCTP implementation that supports being tunnelled over UDP. In
> this instance, rather than write a single “sctp-over-udp” endpoint, you
> could write a generic sctp endpoint that, if it is composed with another
> endpoint, expects that endpoint to provide a datagram-style transport to it.
>
> All of this is rather pie in the sky, and potentially the purest example
> of YAGNI that it’s possible to imagine. However, it’s worth highlighting
> that endpoints are inches away from being a really powerful composable tool
> for saying “tunnel this protocol over this other protocol”. We may not
> *want* that, but it’s an interesting thought.
>
> Cory
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160907/451f122c/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Sep  7 19:18:12 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 Sep 2016 18:18:12 -0700
Subject: [Twisted-Python] eliminating MSI builder
Message-ID: <CFD17FC5-8CC1-4136-9FFC-792B23CD5EC6@twistedmatrix.com>

I think MSIs are generally a bad way to distribute Python libraries.  We are still building them for some reason, and the builder has a bad recent track record of build failures:

https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-msi

Is there any reason we shouldn't get rid of this?

Thanks all,

-glyph


From hawkowl at atleastfornow.net  Wed Sep  7 19:49:38 2016
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Wed, 7 Sep 2016 18:49:38 -0700
Subject: [Twisted-Python] eliminating MSI builder
In-Reply-To: <CFD17FC5-8CC1-4136-9FFC-792B23CD5EC6@twistedmatrix.com>
References: <CFD17FC5-8CC1-4136-9FFC-792B23CD5EC6@twistedmatrix.com>
Message-ID: <CAMxb2iu2FuCTT7u8S5FjqCgKPhDR_0C8HmW-9mb-dbUqByz3QQ@mail.gmail.com>

They actually build wheels now (lol), the builder having some upgrades has
meant that the whl has a different name (cp27-cp27m, not cp27-none). I
noticed it last night, just went to bed before I fixed it :)

On 8 Sep 2016 9:19 AM, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:

> I think MSIs are generally a bad way to distribute Python libraries.  We
> are still building them for some reason, and the builder has a bad recent
> track record of build failures:
>
> https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-msi
>
> Is there any reason we shouldn't get rid of this?
>
> Thanks all,
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160907/47236994/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Sep  7 20:16:04 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 Sep 2016 19:16:04 -0700
Subject: [Twisted-Python] eliminating MSI builder
In-Reply-To: <CAMxb2iu2FuCTT7u8S5FjqCgKPhDR_0C8HmW-9mb-dbUqByz3QQ@mail.gmail.com>
References: <CFD17FC5-8CC1-4136-9FFC-792B23CD5EC6@twistedmatrix.com>
 <CAMxb2iu2FuCTT7u8S5FjqCgKPhDR_0C8HmW-9mb-dbUqByz3QQ@mail.gmail.com>
Message-ID: <F61CA5FE-76B3-4048-90E4-6586BFD71788@twistedmatrix.com>


> On Sep 7, 2016, at 6:49 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> They actually build wheels now (lol), the builder having some upgrades has meant that the whl has a different name (cp27-cp27m, not cp27-none). I noticed it last night, just went to bed before I fixed it :)
> 
> 

aaaaand this is why we ask stuff on the mailing list before randomly deleting stuff :)

Do you think you'll be getting to this today?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160907/8fb9cc68/attachment-0002.html>

From adi at roiban.ro  Thu Sep  8 01:58:18 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 8 Sep 2016 08:58:18 +0100
Subject: [Twisted-Python] eliminating MSI builder
In-Reply-To: <F61CA5FE-76B3-4048-90E4-6586BFD71788@twistedmatrix.com>
References: <CFD17FC5-8CC1-4136-9FFC-792B23CD5EC6@twistedmatrix.com>
 <CAMxb2iu2FuCTT7u8S5FjqCgKPhDR_0C8HmW-9mb-dbUqByz3QQ@mail.gmail.com>
 <F61CA5FE-76B3-4048-90E4-6586BFD71788@twistedmatrix.com>
Message-ID: <CAFycZ9d1h92zMrfCKE07cBph7DK0JWLt87rTX8K3s7g_eU7fiQ@mail.gmail.com>

On 8 September 2016 at 03:16, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Sep 7, 2016, at 6:49 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
>
> They actually build wheels now (lol), the builder having some upgrades has
> meant that the whl has a different name (cp27-cp27m, not cp27-none). I
> noticed it last night, just went to bed before I fixed it :)
>
>
>
> aaaaand this is why we ask stuff on the mailing list before randomly
> deleting stuff :)

There is a ticket in the review queue for adding a tox env for
building the wheel https://twistedmatrix.com/trac/ticket/8544

Once that is done, there is a follow up ticket for moving the builder
on Appveyor https://twistedmatrix.com/trac/ticket/8676

-- 
Adi Roiban



From trac at twistedmatrix.com  Sun Sep 18 00:28:57 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 18 Sep 2016 06:28:57 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1474180137.09.8573515791463394790@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160918/9917bc89/attachment-0002.html>

From trac at twistedmatrix.com  Sun Sep 25 00:05:21 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 25 Sep 2016 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1474783521.44.238916932278620577@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160925/5c90970a/attachment-0002.html>

From knursimu at ciena.com  Wed Sep 28 07:13:58 2016
From: knursimu at ciena.com (Nursimulu, Khen)
Date: Wed, 28 Sep 2016 13:13:58 +0000
Subject: [Twisted-Python] gRPC support in Twisted Python
Message-ID: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>

Hello,

Is there a plan (or an implementation) to support gRPC within Twisted Python?   My understanding is that gRPC is built using Futures and creates its own threads for all its event handling.  There is also a gRPC Python package (grpcio 1.0.0) that is available for python 2.7.    In order to use gRPC with Twisted Python in 2.7 is the only way to have gRPC run in its own thread?

Thanks
Khen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160928/5fbd7a74/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Sep 28 12:15:19 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 28 Sep 2016 11:15:19 -0700
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
Message-ID: <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>


> On Sep 28, 2016, at 6:13 AM, Nursimulu, Khen <knursimu at ciena.com> wrote:

> Is there a plan (or an implementation) to support gRPC within Twisted Python?   My understanding is that gRPC is built using Futures and creates its own threads for all its event handling.  There is also a gRPC Python package (grpcio 1.0.0) that is available for python 2.7.    In order to use gRPC with Twisted Python in 2.7 is the only way to have gRPC run in its own thread?

There's no plan that I'm aware of.  You could definitely run gRPC in a thread currently, although it would be nice if grpc worked natively with Twisted.

Probably contributing this upstream into the gRPC project would be the best way to start, and if they're not receptive, starting a separate 'txgRPC' project.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160928/010c785d/attachment-0002.html>

From knursimu at ciena.com  Wed Sep 28 13:13:26 2016
From: knursimu at ciena.com (Nursimulu, Khen)
Date: Wed, 28 Sep 2016 19:13:26 +0000
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
Message-ID: <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>

Thanks Glyth for the prompt response.

From: <twisted-python-bounces at twistedmatrix.com> on behalf of Glyph Lefkowitz <glyph at twistedmatrix.com>
Reply-To: "twisted-python at twistedmatrix.com" <twisted-python at twistedmatrix.com>
Date: Wednesday, September 28, 2016 at 2:15 PM
To: "twisted-python at twistedmatrix.com" <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] gRPC support in Twisted Python


On Sep 28, 2016, at 6:13 AM, Nursimulu, Khen <knursimu at ciena.com<mailto:knursimu at ciena.com>> wrote:


Is there a plan (or an implementation) to support gRPC within Twisted Python?   My understanding is that gRPC is built using Futures and creates its own threads for all its event handling.  There is also a gRPC Python package (grpcio 1.0.0) that is available for python 2.7.    In order to use gRPC with Twisted Python in 2.7 is the only way to have gRPC run in its own thread?

There's no plan that I'm aware of.  You could definitely run gRPC in a thread currently, although it would be nice if grpc worked natively with Twisted.

Probably contributing this upstream into the gRPC project would be the best way to start, and if they're not receptive, starting a separate 'txgRPC' project.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160928/d7f831ee/attachment-0002.html>

From werner at thieprojects.ch  Wed Sep 28 13:43:13 2016
From: werner at thieprojects.ch (Werner Thie)
Date: Wed, 28 Sep 2016 09:43:13 -1000
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
Message-ID: <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>

On 9/28/16 9:13 AM, Nursimulu, Khen wrote:
> Thanks Glyth for the prompt response.

>     On Sep 28, 2016, at 6:13 AM, Nursimulu, Khen <knursimu at ciena.com
>     <mailto:knursimu at ciena.com>> wrote:
>
>     Is there a plan (or an implementation) to support gRPC within
>     Twisted Python?   My understanding is that gRPC is built using
>     Futures and creates its own threads for all its event handling.
>     There is also a gRPC Python package (grpcio 1.0.0) that is available
>     for python 2.7.    In order to use gRPC with Twisted Python in 2.7
>     is the only way to have gRPC run in its own thread?
>
> There's no plan that I'm aware of.  You could definitely run gRPC in a
> thread currently, although it would be nice if grpc worked natively with
> Twisted.
>
> Probably contributing this upstream into the gRPC project would be the
> best way to start, and if they're not receptive, starting a separate
> 'txgRPC' project.
>

Interesting, with the browser implementation in the works this could 
become a full replacement of nevow/athena

Werner



From glyph at twistedmatrix.com  Wed Sep 28 21:47:29 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 28 Sep 2016 20:47:29 -0700
Subject: [Twisted-Python] How do you determine the buffer size of a
	transport - a use-case for not using back pressure
In-Reply-To: <CAPxhEGccVASQQsh9kGODOVnu3ygHrjDAdo+8_gwYLWwmaqQ1mA@mail.gmail.com>
References: <CAPxhEGccVASQQsh9kGODOVnu3ygHrjDAdo+8_gwYLWwmaqQ1mA@mail.gmail.com>
Message-ID: <A57C76E6-5EE9-442D-A059-FD4346C1E88A@twistedmatrix.com>

Hi Steve,

It looks like I had marked this message as interesting and warranting a reply, but never got around to it.  I'm sorry it's been quite a while!  I appreciate the amount of research you did here :-).

> On Aug 17, 2016, at 3:43 PM, Steve Morin <steve.morin at gmail.com> wrote:
> 
> Twisted Community
> 
> Problem: How do you determine the buffer size of a transport, to know how much data is waiting to be transmitted from using transport.write?
> 
> Wait! You're going to say: use the Producer Consumer API ( http://twistedmatrix.com/documents/current/core/howto/producers.html <http://twistedmatrix.com/documents/current/core/howto/producers.html> )

This is, unfortunately, the only solution :).

> To do what: So that instead of using back pressure I can check the buffer and when it's "too big/full" can decide to do something to the transport I am writing to:

I think when you say "back pressure" you're referring to your program exerting back-pressure on its peer.  I understand why you don't want to do that.  However, there's another kind of back pressure - your peer exerting back pressure on your program.

Commensurately, there are two ways to use back pressure:

To exert back pressure on your peer, call `self.transport.pauseProducing()`.  Later, when you're ready to receive more data, call `self.transport.resumeProducing()`.  This is what you don't want to do.
To detect when back pressure is applied from your peer, call `self.transport.registerProducer(self, True)`; then the reactor will call pauseProducing() when its buffer is full and and resumeProducing() when it empties out again.

Your list of things you might want to do here:

> - Buffer to disk instead of memory
> - Kill the transport
> - Decide to skip sending some data
> - Send an error or message to the transport I am writing to
> - Reduce the resolution, increase the compression (things like video or audio)

is a good one, and all these things can be achieved.  Going through them:

If you want to buffer to disk instead of memory, have a method like:

def someDataToSendToPeer(self, someData):
    if self.isProducing:
        self.transport.write(someData)
    else:
        self.bufferFile.write(someData)

def pauseProducing(self):
    self.isProducing = False
    self.bufferFile = open("buffer.file", "wb")

def resumeProducing(self):
    self.isProducing = True
    self.startUbufferingFromFile()

If you want to kill the transport,

def pauseProducing(self):
    self.transport.abortConnection()

If you want to reduce video stream quality,

def streamSomeRawVideo(self, someRawVideo):
    if self.isProducing:
        self.transport.write(self.videoBuffer.addAndEncodeToBytes(someRawVideo))
    else:
        self.videoBuffer.addAndCompressSomeMore(someRawVideo)

and so on, and so on.

Basically, you can treat the buffer as "empty" until pauseProducing() is called.  Once it is, you can treat it as "full".

Hope this was helpful, and still timely enough for you to make some use of it :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160928/99042030/attachment-0002.html>

From stephen at thorne.id.au  Thu Sep 29 01:34:40 2016
From: stephen at thorne.id.au (Stephen Thorne)
Date: Thu, 29 Sep 2016 07:34:40 +0000
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
Message-ID: <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>

[+Nathaniel]

https://groups.google.com/forum/m/#!topic/grpc-io/RpkyqqQy8TU/discussion

Hi. I'd like to link you to the above discussion and cc it's original
poster.

On Wed, Sep 28, 2016, 22:51 Werner Thie <werner at thieprojects.ch> wrote:

> On 9/28/16 9:13 AM, Nursimulu, Khen wrote:
> > Thanks Glyth for the prompt response.
>
> >     On Sep 28, 2016, at 6:13 AM, Nursimulu, Khen <knursimu at ciena.com
> >     <mailto:knursimu at ciena.com>> wrote:
> >
> >     Is there a plan (or an implementation) to support gRPC within
> >     Twisted Python?   My understanding is that gRPC is built using
> >     Futures and creates its own threads for all its event handling.
> >     There is also a gRPC Python package (grpcio 1.0.0) that is available
> >     for python 2.7.    In order to use gRPC with Twisted Python in 2.7
> >     is the only way to have gRPC run in its own thread?
> >
> > There's no plan that I'm aware of.  You could definitely run gRPC in a
> > thread currently, although it would be nice if grpc worked natively with
> > Twisted.
> >
> > Probably contributing this upstream into the gRPC project would be the
> > best way to start, and if they're not receptive, starting a separate
> > 'txgRPC' project.
> >
>
> Interesting, with the browser implementation in the works this could
> become a full replacement of nevow/athena
>
> Werner
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160929/9d698389/attachment-0002.html>

From jamesbroadhead at gmail.com  Thu Sep 29 18:41:14 2016
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Fri, 30 Sep 2016 01:41:14 +0100
Subject: [Twisted-Python] gRPC support in Twisted Python
In-Reply-To: <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
References: <520761B2-261C-42EA-86EC-DCC6C084351B@ciena.com>
 <CA9F440E-0891-4E91-B127-73EEDB4AE06D@twistedmatrix.com>
 <69C2D467-3087-4597-9663-DF8C8205D5C3@ciena.com>
 <cda7b11c-3641-3d19-809a-388d798337b8@thieprojects.ch>
 <CAFPU7=tBmGb6-yMMT6Yuetw99BtMp8RPf8+9t-jVFS7fjO_grw@mail.gmail.com>
Message-ID: <CA+hid6Ea4qVmfXURxnR5qnOrLTAW+GcfKocyi4tk+0ov4+xX4A@mail.gmail.com>

If you're planning on working on this, it'd probably be worth taking a look
at the Twisted bindings for Thrift (a competing RPC system from FB, based
on the Google PB paper).

The generator[2] isn't the best place to start (imperative C++ that outputs
python), but the code that it generates served us very well for years
(generally, communicating twisted->cassandra, or twisted->scala services).

[1] https://thrift.apache.org/
[2]
https://github.com/apache/thrift/blob/master/compiler/cpp/src/thrift/generate/t_py_generator.cc

On 29 September 2016 at 08:34, Stephen Thorne <stephen at thorne.id.au> wrote:

> [+Nathaniel]
>
> https://groups.google.com/forum/m/#!topic/grpc-io/RpkyqqQy8TU/discussion
>
> Hi. I'd like to link you to the above discussion and cc it's original
> poster.
>
>
> On Wed, Sep 28, 2016, 22:51 Werner Thie <werner at thieprojects.ch> wrote:
>
>> On 9/28/16 9:13 AM, Nursimulu, Khen wrote:
>> > Thanks Glyth for the prompt response.
>>
>> >     On Sep 28, 2016, at 6:13 AM, Nursimulu, Khen <knursimu at ciena.com
>> >     <mailto:knursimu at ciena.com>> wrote:
>> >
>> >     Is there a plan (or an implementation) to support gRPC within
>> >     Twisted Python?   My understanding is that gRPC is built using
>> >     Futures and creates its own threads for all its event handling.
>> >     There is also a gRPC Python package (grpcio 1.0.0) that is available
>> >     for python 2.7.    In order to use gRPC with Twisted Python in 2.7
>> >     is the only way to have gRPC run in its own thread?
>> >
>> > There's no plan that I'm aware of.  You could definitely run gRPC in a
>> > thread currently, although it would be nice if grpc worked natively with
>> > Twisted.
>> >
>> > Probably contributing this upstream into the gRPC project would be the
>> > best way to start, and if they're not receptive, starting a separate
>> > 'txgRPC' project.
>> >
>>
>> Interesting, with the browser implementation in the works this could
>> become a full replacement of nevow/athena
>>
>> Werner
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160930/a452da62/attachment-0002.html>

From cristobal23 at gmail.com  Fri Sep 30 21:19:30 2016
From: cristobal23 at gmail.com (=?UTF-8?Q?Crist=C3=B3bal_Villarroel?=)
Date: Fri, 30 Sep 2016 20:19:30 -0700
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <D910FC43-07B6-4C37-A9EA-D88A89028954@lukasa.co.uk>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>
 <CA+U=zK34Mz_5LsSCfv2O4B3mhAviw50hhviBDf1wvuKvbmRpUA@mail.gmail.com>
 <1BACC9A4-D24A-4FC1-B3ED-42AF22575B91@ox.cx>
 <D910FC43-07B6-4C37-A9EA-D88A89028954@lukasa.co.uk>
Message-ID: <CA+C14gKdzmKZarH8py-rNwnVPFPLB5y+-ZgsYajtZNgN-MwxKA@mail.gmail.com>

Hi Ashwini,

I would like to contribute $100 towards this effort.

Cheers,
Cris

On Mon, Sep 5, 2016 at 7:21 AM, Cory Benfield <cory at lukasa.co.uk> wrote:

> Let’s get this done. I’ll go up to $100 as well.
>
> Cory
>
> On 3 Sep 2016, at 12:32, Hynek Schlawack <hs at ox.cx> wrote:
>
> Since this kind of fell to slumber: I'm upping my ante to $100 however
> many coins that gives me.
>
> Sent from my phone.
>
> Am 20.06.2016 um 18:33 schrieb Kevin Horn <kevin.horn at gmail.com>:
>
> I haven't been very active in a while, but:
>
> a) this is a really cool idea
> b) I'd really like one of these for myself
>
> So, sign me up for 5 coins.  I might be willing to up that to 10 if it
> makes a difference in this happening or not.
>
>
>
> On Wed, Jun 15, 2016 at 12:20 PM, lvh <_ at lvh.io> wrote:
>
>> Hey,
>>
>>
>> > On Jun 14, 2016, at 8:44 PM, Ashwini Oruganti <
>> ashfall at twistedmatrix.com> wrote:
>> >
>> > Hello!
>> >
>> > We are planning to get us some challenge coins, which is exciting! You
>> should also be excited with us because this means:
>> >
>> > - we can now give it out to contributors at sprints and meetups.
>> > - challenge coins are awesome.
>> >
>> > Each coin costs about $6, and the minimum order is 100 coins. Glyph
>> thinks everyone should have some to give out as tokens of appreciation to
>> other contributors, and glyph's thoughts are usually worth following.
>>
>> 5 seems like the number, but we’ll see if we get up to the required
>> minimum order :)
>>
>>
>> lvh
>>
>> > So, if you are a Twisted contributor and would like to own a challenge
>> coin, please respond to this email. Also, do mention how many coins you
>> would like, and where you are located so that we can send you your coin(s).
>> >
>> >
>> > -ashfall
>> > _______________________________________________
>> > Twisted-Python mailing list
>> > Twisted-Python at twistedmatrix.com
>> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> --
> --
> Kevin Horn
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160930/749de5b8/attachment-0002.html>

