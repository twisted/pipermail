From trac at twistedmatrix.com  Sun Jan  3 00:05:16 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Jan 2021 07:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1609657516.55.7540884275726905006@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210103/64a03530/attachment.htm>

From exarkun at twistedmatrix.com  Sun Jan  3 13:29:35 2021
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 3 Jan 2021 15:29:35 -0500
Subject: [Twisted-Python] Plan/Goal for GitHub Sponsors
In-Reply-To: <CAFycZ9cB4YBXqiBB+FB5-AybV1M=9H+snRty-re6dnbemXZcUQ@mail.gmail.com>
References: <CAFycZ9cB4YBXqiBB+FB5-AybV1M=9H+snRty-re6dnbemXZcUQ@mail.gmail.com>
Message-ID: <CAEeXt4Of0rzq+ZSiJjiFVCeapnhi5zrtCyTSd2yYfWtTP0fbsw@mail.gmail.com>

On Wed, Dec 23, 2020 at 4:41 PM Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> I started a separate discussion to confirm the goal for a future
> fundraising.
>
> Top priority - Pay someone to help with the review queue
> Nice to have - Move server/services to Azure VM -  We have at least $100
> monthly allowance for Azure.... not sure if we still have the huge $2000
> allowance on rackspace.
> Nice to have - Migrate Trac wiki to GitHub Wiki
> Nice to have - Migrate Trac Ticket to GitHub Issues
>

I have a suggestion for another priority to be inserted above that top
priority - pay someone to look after the day-to-day logistics of the
project.  For example: to triage tickets in the issue tracker (identify
duplicates to avoid redundant effort, classify issues by feature request vs
defect vs regression, etc), keep track of the release process so releases
are completed in a timely manner, identify and eliminate friction in the
development process, and identify big-picture directions / priorities /
roadmap items and track and coordinate efforts to achieve them.  I don't
think someone could be hired to set the Twisted roadmap but someone could
be hired to solicit this information from core developers and the wider
community and organize it into a coherent plan.

Ideally this person could also look after fundraising efforts to ensure
that there are funds to continue to support their other activities.

Helping with the review queue is great but it's a purely reactive
activity.  This is fine so far as it goes but it leaves the project without
a coherent direction, which in turn makes less productive use of the
resources available.  The project should continue to operate reactively to
address issues raised by the community but to really stay relevant, the
core Twisted team itself also needs to identify coherent future goals and
work to achieve them.

Messing with CI configuration, wikis, issue tracking, etc, may also all be
beneficial but they're not useful goals in themselves - they should all be
in support of a goal like reducing operational overhead to allow resources
to be directed elsewhere or removing roadblocks that stand in the way of
other contributors having an impact.

Jean-Paul


>
> That is all..but first we should solve the release queue.
> Cheers
> --
> Adi Roiban
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210103/734b3acf/attachment.htm>

From adi at roiban.ro  Sun Jan  3 15:46:42 2021
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 3 Jan 2021 22:46:42 +0000
Subject: [Twisted-Python] Plan/Goal for GitHub Sponsors
In-Reply-To: <CAEeXt4Of0rzq+ZSiJjiFVCeapnhi5zrtCyTSd2yYfWtTP0fbsw@mail.gmail.com>
References: <CAFycZ9cB4YBXqiBB+FB5-AybV1M=9H+snRty-re6dnbemXZcUQ@mail.gmail.com>
 <CAEeXt4Of0rzq+ZSiJjiFVCeapnhi5zrtCyTSd2yYfWtTP0fbsw@mail.gmail.com>
Message-ID: <CAFycZ9cXKW2j7PUrt=2pioJs=UXSQW6-RgrPbQREO+zAjAbJsA@mail.gmail.com>

On Sun, 3 Jan 2021 at 20:30, Jean-Paul Calderone <exarkun at twistedmatrix.com>
wrote:

> On Wed, Dec 23, 2020 at 4:41 PM Adi Roiban <adi at roiban.ro> wrote:
>
>> Hi,
>>
>> I started a separate discussion to confirm the goal for a future
>> fundraising.
>>
>> Top priority - Pay someone to help with the review queue
>> Nice to have - Move server/services to Azure VM -  We have at least $100
>> monthly allowance for Azure.... not sure if we still have the huge $2000
>> allowance on rackspace.
>> Nice to have - Migrate Trac wiki to GitHub Wiki
>> Nice to have - Migrate Trac Ticket to GitHub Issues
>>
>
> I have a suggestion for another priority to be inserted above that top
> priority - pay someone to look after the day-to-day logistics of the
> project.  For example: to triage tickets in the issue tracker (identify
> duplicates to avoid redundant effort, classify issues by feature request vs
> defect vs regression, etc), keep track of the release process so releases
> are completed in a timely manner, identify and eliminate friction in the
> development process, and identify big-picture directions / priorities /
> roadmap items and track and coordinate efforts to achieve them.  I don't
> think someone could be hired to set the Twisted roadmap but someone could
> be hired to solicit this information from core developers and the wider
> community and organize it into a coherent plan.
>
>
Many thanks for your comments.
I agree.

In this case, I think that for any near-future fundraising effort
(including GitHub Sponsors) we should have a single goal:

1. Raise money to hire a project manager.

That will be a part time job and the person will work on other projects.

The job activities will be (non exhaustive list - feel free to suggest):

* triage tickets
* act as the release manager (the actual release has some automation) so
this is more about communication
* identify friction in the development process and document and try to get
consensus for a propose solution (the actual implementation can be done by
someone else)
* identify big-picture directions / priorities / roadmap items and track
and coordinate efforts to achieve them.
* help with fundraising / communication to future sponsors

--------

Do you have any idea of the required effort for a project manager for
Twisted?
Maybe we can start with raising money to hire someone for 10 hours per week.
Please suggest a different number of hours if you think that 10 hours are
not a good start.

I think that at least for the first month, 10 hours per week is not much...
but maybe after the second month, we can have 5 hours per week for project
management
and use extra money for the review queue or implement the top priority
tasks identified by the project manager.

---------------

Then, if we raise more than 10 hours per week, we can dedicate that money
to code review.

Then, if we ran out of reviews in the queue, use the leftover money for
reducing operation overhead / removing roadblock.


> Ideally this person could also look after fundraising efforts to ensure
> that there are funds to continue to support their other activities.
>
>
We have a catch-22 situation here ... we need to hire someone to work on
fundraising ... we need to raise funds to hire someone :)

I can volunteer to bootstrap this effort and try to raise initial money to
find a project manager that can look after future fundraising.
I don't have much free time and I am not a good project manager or
communication manager :)

Right now, I don't know who we could hire and what could be the selection
criteria ...

But I think that we can focus to see if we can raise 10 hours per week and
then worry about finding the right person :)

Helping with the review queue is great but it's a purely reactive
> activity.  This is fine so far as it goes but it leaves the project without
> a coherent direction, which in turn makes less productive use of the
> resources available.  The project should continue to operate reactively to
> address issues raised by the community but to really stay relevant, the
> core Twisted team itself also needs to identify coherent future goals and
> work to achieve them.
>
> Messing with CI configuration, wikis, issue tracking, etc, may also all be
> beneficial but they're not useful goals in themselves - they should all be
> in support of a goal like reducing operational overhead to allow resources
> to be directed elsewhere or removing roadblocks that stand in the way of
> other contributors having an impact.
> <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>

True.

See the updated GitHub Sponsor page

https://github.com/sponsors/twisted?preview=true

Let me know what you think and if you think that is ready to make it public.

We need feedback on everything on the preview page:

* Project goal
* Support tiers
* Project description

Cheers
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210103/e97c4c9c/attachment.htm>

From glyph at twistedmatrix.com  Sun Jan  3 16:32:56 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 3 Jan 2021 15:32:56 -0800
Subject: [Twisted-Python] Plan/Goal for GitHub Sponsors
In-Reply-To: <CAFycZ9cXKW2j7PUrt=2pioJs=UXSQW6-RgrPbQREO+zAjAbJsA@mail.gmail.com>
References: <CAFycZ9cXKW2j7PUrt=2pioJs=UXSQW6-RgrPbQREO+zAjAbJsA@mail.gmail.com>
Message-ID: <etPan.5ff254f1.327b23c6.b53f@fastmail.com>

You can’t fundraise for a job opening that you haven’t cleared with the SFC as mission-aligned and properly transparent; this could get them in trouble with the IRS. You’ll need to clear this by writing a grant proposal and having it approved first. Please delete this posting from the sponsors page as soon as you can, since even posting to this list probably constitutes public advertising.

On January 3, 2021 at 2:46:42 PM, Adi Roiban (adi at roiban.ro(mailto:adi at roiban.ro)) wrote:

>  
>  
> On Sun, 3 Jan 2021 at 20:30, Jean-Paul Calderone <exarkun at twistedmatrix.com(mailto:exarkun at twistedmatrix.com)> wrote:
> > On Wed, Dec 23, 2020 at 4:41 PM Adi Roiban <adi at roiban.ro(mailto:adi at roiban.ro)> wrote:
> > > Hi,  
> > >  
> > > I started a separate discussion to confirm the goal for a future fundraising.  
> > >  
> > > Top priority - Pay someone to help with the review queue  
> > > Nice to have - Move server/services to Azure VM - We have at least $100 monthly allowance for Azure.... not sure if we still have the huge $2000 allowance on rackspace.
> > > Nice to have - Migrate Trac wiki to GitHub Wiki
> > > Nice to have - Migrate Trac Ticket to GitHub Issues
> >  
> > I have a suggestion for another priority to be inserted above that top priority - pay someone to look after the day-to-day logistics of the project. For example: to triage tickets in the issue tracker (identify duplicates to avoid redundant effort, classify issues by feature request vs defect vs regression, etc), keep track of the release process so releases are completed in a timely manner, identify and eliminate friction in the development process, and identify big-picture directions / priorities / roadmap items and track and coordinate efforts to achieve them. I don't think someone could be hired to set the Twisted roadmap but someone could be hired to solicit this information from core developers and the wider community and organize it into a coherent plan.  
> >  
>  
> Many thanks for your comments.  
> I agree.
>  
> In this case, I think that for any near-future fundraising effort (including GitHub Sponsors) we should have a single goal:  
>  
> 1. Raise money to hire a project manager.  
>  
> That will be a part time job and the person will work on other projects.
>  
> The job activities will be (non exhaustive list - feel free to suggest):  
>  
> * triage tickets
> * act as the release manager (the actual release has some automation) so this is more about communication
> * identify friction in the development process and document and try to get consensus for a propose solution (the actual implementation can be done by someone else)
> * identify big-picture directions / priorities / roadmap items and track and coordinate efforts to achieve them.
> * help with fundraising / communication to future sponsors  
>  
> --------
>  
> Do you have any idea of the required effort for a project manager for Twisted?
> Maybe we can start with raising money to hire someone for 10 hours per week.  
> Please suggest a different number of hours if you think that 10 hours are not a good start.
>  
> I think that at least for the first month, 10 hours per week is not much...  
> but maybe after the second month, we can have 5 hours per week for project management
> and use extra money for the review queue or implement the top priority tasks identified by the project manager.
>  
> ---------------
>  
> Then, if we raise more than 10 hours per week, we can dedicate that money to code review.  
>  
> Then, if we ran out of reviews in the queue, use the leftover money for reducing operation overhead / removing roadblock.
>  
> > Ideally this person could also look after fundraising efforts to ensure that there are funds to continue to support their other activities.
> >  
>  
> We have a catch-22 situation here ... we need to hire someone to work on fundraising ... we need to raise funds to hire someone :)
>  
> I can volunteer to bootstrap this effort and try to raise initial money to find a project manager that can look after future fundraising.
> I don't have much free time and I am not a good project manager or communication manager :)
>  
> Right now, I don't know who we could hire and what could be the selection criteria ...
>  
> But I think that we can focus to see if we can raise 10 hours per week and then worry about finding the right person :)  
>  
> > Helping with the review queue is great but it's a purely reactive activity. This is fine so far as it goes but it leaves the project without a coherent direction, which in turn makes less productive use of the resources available. The project should continue to operate reactively to address issues raised by the community but to really stay relevant, the core Twisted team itself also needs to identify coherent future goals and work to achieve them.  
> >  
> > Messing with CI configuration, wikis, issue tracking, etc, may also all be beneficial but they're not useful goals in themselves - they should all be in support of a goal like reducing operational overhead to allow resources to be directed elsewhere or removing roadblocks that stand in the way of other contributors having an impact.  
>  
> True.  
>  
> See the updated GitHub Sponsor page  
>  
> https://github.com/sponsors/twisted?preview=true  
>  
> Let me know what you think and if you think that is ready to make it public.  
>  
> We need feedback on everything on the preview page:  
>  
> * Project goal  
> * Support tiers
> * Project description
>  
> Cheers
> --
> Adi Roiban _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210103/257810b7/attachment-0001.htm>

From glyph at twistedmatrix.com  Sun Jan  3 16:40:28 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 3 Jan 2021 15:40:28 -0800
Subject: [Twisted-Python] Plan/Goal for GitHub Sponsors
In-Reply-To: <etPan.5ff254f1.327b23c6.b53f@fastmail.com>
References: <etPan.5ff254f1.327b23c6.b53f@fastmail.com>
Message-ID: <etPan.5ff256fa.74b0dc51.b53f@fastmail.com>

(It might be generally good to stop discussing these priorities on a public list, and instead make a private list that anyone can request to join, but e.g. having joined precludes or disqualifies one from bidding on any resulting funded efforts. The big thing to avoid here is self dealing, ie having a clown showing up and advocating really aggressively that the thing Twisted really needs is a bunch of balloon animals that conveniently only they know how to make. Having a private group with documented members for discussion provides a nice audit trail that this isn’t happening.)

On January 3, 2021 at 3:32:56 PM, Glyph (glyph at twistedmatrix.com(mailto:glyph at twistedmatrix.com)) wrote:

> You can’t fundraise for a job opening that you haven’t cleared with the SFC as mission-aligned and properly transparent; this could get them in trouble with the IRS. You’ll need to clear this by writing a grant proposal and having it approved first. Please delete this posting from the sponsors page as soon as you can, since even posting to this list probably constitutes public advertising.
>  
> On January 3, 2021 at 2:46:42 PM, Adi Roiban (adi at roiban.ro(mailto:adi at roiban.ro)) wrote:
>  
> >  
> >  
> > On Sun, 3 Jan 2021 at 20:30, Jean-Paul Calderone <exarkun at twistedmatrix.com(mailto:exarkun at twistedmatrix.com)> wrote:
> > > On Wed, Dec 23, 2020 at 4:41 PM Adi Roiban <adi at roiban.ro(mailto:adi at roiban.ro)> wrote:
> > > > Hi,  
> > > >  
> > > > I started a separate discussion to confirm the goal for a future fundraising.  
> > > >  
> > > > Top priority - Pay someone to help with the review queue  
> > > > Nice to have - Move server/services to Azure VM - We have at least $100 monthly allowance for Azure.... not sure if we still have the huge $2000 allowance on rackspace.
> > > > Nice to have - Migrate Trac wiki to GitHub Wiki
> > > > Nice to have - Migrate Trac Ticket to GitHub Issues
> > >  
> > > I have a suggestion for another priority to be inserted above that top priority - pay someone to look after the day-to-day logistics of the project. For example: to triage tickets in the issue tracker (identify duplicates to avoid redundant effort, classify issues by feature request vs defect vs regression, etc), keep track of the release process so releases are completed in a timely manner, identify and eliminate friction in the development process, and identify big-picture directions / priorities / roadmap items and track and coordinate efforts to achieve them. I don't think someone could be hired to set the Twisted roadmap but someone could be hired to solicit this information from core developers and the wider community and organize it into a coherent plan.  
> > >  
> >  
> > Many thanks for your comments.  
> > I agree.
> >  
> > In this case, I think that for any near-future fundraising effort (including GitHub Sponsors) we should have a single goal:  
> >  
> > 1. Raise money to hire a project manager.  
> >  
> > That will be a part time job and the person will work on other projects.
> >  
> > The job activities will be (non exhaustive list - feel free to suggest):  
> >  
> > * triage tickets
> > * act as the release manager (the actual release has some automation) so this is more about communication
> > * identify friction in the development process and document and try to get consensus for a propose solution (the actual implementation can be done by someone else)
> > * identify big-picture directions / priorities / roadmap items and track and coordinate efforts to achieve them.
> > * help with fundraising / communication to future sponsors  
> >  
> > --------
> >  
> > Do you have any idea of the required effort for a project manager for Twisted?
> > Maybe we can start with raising money to hire someone for 10 hours per week.  
> > Please suggest a different number of hours if you think that 10 hours are not a good start.
> >  
> > I think that at least for the first month, 10 hours per week is not much...  
> > but maybe after the second month, we can have 5 hours per week for project management
> > and use extra money for the review queue or implement the top priority tasks identified by the project manager.
> >  
> > ---------------
> >  
> > Then, if we raise more than 10 hours per week, we can dedicate that money to code review.  
> >  
> > Then, if we ran out of reviews in the queue, use the leftover money for reducing operation overhead / removing roadblock.
> >  
> > > Ideally this person could also look after fundraising efforts to ensure that there are funds to continue to support their other activities.
> > >  
> >  
> > We have a catch-22 situation here ... we need to hire someone to work on fundraising ... we need to raise funds to hire someone :)
> >  
> > I can volunteer to bootstrap this effort and try to raise initial money to find a project manager that can look after future fundraising.
> > I don't have much free time and I am not a good project manager or communication manager :)
> >  
> > Right now, I don't know who we could hire and what could be the selection criteria ...
> >  
> > But I think that we can focus to see if we can raise 10 hours per week and then worry about finding the right person :)  
> >  
> > > Helping with the review queue is great but it's a purely reactive activity. This is fine so far as it goes but it leaves the project without a coherent direction, which in turn makes less productive use of the resources available. The project should continue to operate reactively to address issues raised by the community but to really stay relevant, the core Twisted team itself also needs to identify coherent future goals and work to achieve them.  
> > >  
> > > Messing with CI configuration, wikis, issue tracking, etc, may also all be beneficial but they're not useful goals in themselves - they should all be in support of a goal like reducing operational overhead to allow resources to be directed elsewhere or removing roadblocks that stand in the way of other contributors having an impact.  
> >  
> > True.  
> >  
> > See the updated GitHub Sponsor page  
> >  
> > https://github.com/sponsors/twisted?preview=true  
> >  
> > Let me know what you think and if you think that is ready to make it public.  
> >  
> > We need feedback on everything on the preview page:  
> >  
> > * Project goal  
> > * Support tiers
> > * Project description
> >  
> > Cheers
> > --
> > Adi Roiban _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210103/1da7bc3e/attachment.htm>

From rodrigc at crodrigues.org  Sun Jan  3 16:50:04 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 3 Jan 2021 15:50:04 -0800
Subject: [Twisted-Python] Plan/Goal for GitHub Sponsors
In-Reply-To: <CAFycZ9cB4YBXqiBB+FB5-AybV1M=9H+snRty-re6dnbemXZcUQ@mail.gmail.com>
References: <CAFycZ9cB4YBXqiBB+FB5-AybV1M=9H+snRty-re6dnbemXZcUQ@mail.gmail.com>
Message-ID: <CAG=rPVd9k_=wEPRMEXF7_pVgyapp_zk+oSWvVnAdrmZrZVoHSQ@mail.gmail.com>

On Wed, Dec 23, 2020 at 1:41 PM Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> I started a separate discussion to confirm the goal for a future
> fundraising.
>
> Top priority - Pay someone to help with the review queue
> Nice to have - Move server/services to Azure VM -  We have at least $100
> monthly allowance for Azure.... not sure if we still have the huge $2000
> allowance on rackspace.
> Nice to have - Migrate Trac wiki to GitHub Wiki
>
>
Adi,

I am glad that you are enthusiastic about the Twisted project,
but I just want to raise my voice that I disagree with most of what you
recommend as future actions.

I am skeptical about your recommendation when it comes to accepting
donations, spending
money, and hiring people, etc.   If these things are necessary, I would
like to see this as part of
a fully fleshed out plan that is approved by a proper governance structure.

Personally, I'm not convinced that getting more monetary donations and
hiring people will improve the Twisted project.  I could be wrong about
this,
but I need to be convinced.

In this thread:
https://twistedmatrix.com/pipermail/twisted-python/2020-December/065341.html
you raised some valid points about the project leadership committee.  I
would like to see the points in that
thread discussed to completion.
For starters, the people on the existing project leadership committee
should be given the chance
to respond, and hand the baton to the next project leadership committee.

The fact that details of the project committee are not written down in a
place which is available to the public
seems like something that we can fix, without involving discussions about
spending money and hiring people.

Once there is a proper governance structure in place for the Twisted
project,
I think that any discussions about spending money and hiring can be
discussed more easily.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210103/3dde3c4d/attachment.htm>

From adi at roiban.ro  Sun Jan  3 17:29:17 2021
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 4 Jan 2021 00:29:17 +0000
Subject: [Twisted-Python] Plan/Goal for GitHub Sponsors
In-Reply-To: <etPan.5ff254f1.327b23c6.b53f@fastmail.com>
References: <CAFycZ9cXKW2j7PUrt=2pioJs=UXSQW6-RgrPbQREO+zAjAbJsA@mail.gmail.com>
 <etPan.5ff254f1.327b23c6.b53f@fastmail.com>
Message-ID: <CAFycZ9eBzzWjrPCFnpT8CY77rfdmhvW4OFnq+ig2x2BqXKODbQ@mail.gmail.com>

On Sun, 3 Jan 2021 at 23:36, Glyph <glyph at twistedmatrix.com> wrote:

> You can’t fundraise for a job opening that you haven’t cleared with the
> SFC as mission-aligned and properly transparent; this could get them in
> trouble with the IRS. You’ll need to clear this by writing a grant proposal
> and having it approved first. Please delete this posting from the sponsors
> page as soon as you can, since even posting to this list probably
> constitutes public advertising.
>

Hi,

I have remove the info.
The fundraising was never active. This was still WIP waiting for some
format approval.

I think that I have mentioned that I have no intention to apply for any of
these jobs and only volunteer to bootstrap this process.

I hope nobody will get into any trouble by my actions.

To me it makes no sense.
How can the IRS think that SFC is at fault for a public message posted by
me, someone with no affiliation to Twisted or SFC ?

Cheers


> On January 3, 2021 at 2:46:42 PM, Adi Roiban (adi at roiban.ro) wrote:
>
>>
>>
>> On Sun, 3 Jan 2021 at 20:30, Jean-Paul Calderone <
>> exarkun at twistedmatrix.com> wrote:
>>
>>> On Wed, Dec 23, 2020 at 4:41 PM Adi Roiban <adi at roiban.ro> wrote:
>>>
>>>> Hi,
>>>>
>>>> I started a separate discussion to confirm the goal for a future
>>>> fundraising.
>>>>
>>>> Top priority - Pay someone to help with the review queue
>>>> Nice to have - Move server/services to Azure VM -  We have at least
>>>> $100 monthly allowance for Azure.... not sure if we still have the huge
>>>> $2000 allowance on rackspace.
>>>> Nice to have - Migrate Trac wiki to GitHub Wiki
>>>> Nice to have - Migrate Trac Ticket to GitHub Issues
>>>>
>>>
>>> I have a suggestion for another priority to be inserted above that top
>>> priority - pay someone to look after the day-to-day logistics of the
>>> project.  For example: to triage tickets in the issue tracker (identify
>>> duplicates to avoid redundant effort, classify issues by feature request vs
>>> defect vs regression, etc), keep track of the release process so releases
>>> are completed in a timely manner, identify and eliminate friction in the
>>> development process, and identify big-picture directions / priorities /
>>> roadmap items and track and coordinate efforts to achieve them.  I don't
>>> think someone could be hired to set the Twisted roadmap but someone could
>>> be hired to solicit this information from core developers and the wider
>>> community and organize it into a coherent plan.
>>>
>>>
>> Many thanks for your comments.
>> I agree.
>>
>> In this case, I think that for any near-future fundraising effort
>> (including GitHub Sponsors) we should have a single goal:
>>
>> 1. Raise money to hire a project manager.
>>
>> That will be a part time job and the person will work on other projects.
>>
>> The job activities will be (non exhaustive list - feel free to suggest):
>>
>> * triage tickets
>> * act as the release manager (the actual release has some automation) so
>> this is more about communication
>> * identify friction in the development process and document and try to
>> get consensus for a propose solution (the actual implementation can be done
>> by someone else)
>> * identify big-picture directions / priorities / roadmap items and track
>> and coordinate efforts to achieve them.
>> * help with fundraising / communication to future sponsors
>>
>> --------
>>
>> Do you have any idea of the required effort for a project manager for
>> Twisted?
>> Maybe we can start with raising money to hire someone for 10 hours per
>> week.
>> Please suggest a different number of hours if you think that 10 hours are
>> not a good start.
>>
>> I think that at least for the first month, 10 hours per week is not
>> much...
>> but maybe after the second month, we can have 5 hours per week for
>> project management
>> and use extra money for the review queue or implement the top priority
>> tasks identified by the project manager.
>>
>> ---------------
>>
>> Then, if we raise more than 10 hours per week, we can dedicate that money
>> to code review.
>>
>> Then, if we ran out of reviews in the queue, use the leftover money for
>> reducing operation overhead / removing roadblock.
>>
>>
>>> Ideally this person could also look after fundraising efforts to ensure
>>> that there are funds to continue to support their other activities.
>>>
>>>
>> We have a catch-22 situation here ... we need to hire someone to work on
>> fundraising ... we need to raise funds to hire someone :)
>>
>> I can volunteer to bootstrap this effort and try to raise initial money
>> to find a project manager that can look after future fundraising.
>> I don't have much free time and I am not a good project manager or
>> communication manager :)
>>
>> Right now, I don't know who we could hire and what could be the selection
>> criteria ...
>>
>> But I think that we can focus to see if we can raise 10 hours per week
>> and then worry about finding the right person :)
>>
>> Helping with the review queue is great but it's a purely reactive
>>> activity.  This is fine so far as it goes but it leaves the project without
>>> a coherent direction, which in turn makes less productive use of the
>>> resources available.  The project should continue to operate reactively to
>>> address issues raised by the community but to really stay relevant, the
>>> core Twisted team itself also needs to identify coherent future goals and
>>> work to achieve them.
>>>
>>> Messing with CI configuration, wikis, issue tracking, etc, may also all
>>> be beneficial but they're not useful goals in themselves - they should all
>>> be in support of a goal like reducing operational overhead to allow
>>> resources to be directed elsewhere or removing roadblocks that stand in the
>>> way of other contributors having an impact.
>>> <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>>
>>
>> True.
>>
>> See the updated GitHub Sponsor page
>>
>> https://github.com/sponsors/twisted?preview=true
>>
>> Let me know what you think and if you think that is ready to make it
>> public.
>>
>> We need feedback on everything on the preview page:
>>
>> * Project goal
>> * Support tiers
>> * Project description
>>
>> Cheers
>> --
>> Adi Roiban
>>
>
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210104/64f2512f/attachment-0001.htm>

From glyph at twistedmatrix.com  Sun Jan  3 17:44:42 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 3 Jan 2021 16:44:42 -0800
Subject: [Twisted-Python] Plan/Goal for GitHub Sponsors
In-Reply-To: <CAFycZ9eBzzWjrPCFnpT8CY77rfdmhvW4OFnq+ig2x2BqXKODbQ@mail.gmail.com>
References: <CAFycZ9eBzzWjrPCFnpT8CY77rfdmhvW4OFnq+ig2x2BqXKODbQ@mail.gmail.com>
Message-ID: <etPan.5ff266f5.625558ec.b53f@fastmail.com>

It’s complicated and I’m not a lawyer, so maybe it is indeed not a problem. But in brief it’s like trademark protection, kind of, in that it becomes SFC’s problem to be aware that you’ve said these things and tell you not to say them. The twisted project (which is a bit of an amorphous concept to begin with) has authorized SFC to be its fiscal sponsor, the SFC has gone through the rigamarole with the IRS to ensure this is an exempt-able public benefit activity, and now someone is making claims about the project hiring, which they’re on the hook for. How does the IRS know your status of affiliation with the project or the conservancy for sure? Somebody has to investigate it, investigating means asking a bunch of questions and sucking up the SFC’s time and energy, even if no enforcement action is ever formally taken.  

In short: talk to the SFC first about the project’s status, get an actual official recommendation and not my random opinion about what may or may not be a problem, before doing anything related to fundraising. I can’t say anything authoritative about what is allowed, because as far as I understand it, *nothing* is allowed without untangling the PLC/approval process first. :-)  

(Except to raise money for the already-authorized expenses related to the continued hosting of twistedmatrix.com, of course.)  

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210103/fc2fc0b5/attachment.htm>

From adi at roiban.ro  Sun Jan  3 17:59:03 2021
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 4 Jan 2021 00:59:03 +0000
Subject: [Twisted-Python] Plan/Goal for GitHub Sponsors
In-Reply-To: <etPan.5ff266f5.625558ec.b53f@fastmail.com>
References: <CAFycZ9eBzzWjrPCFnpT8CY77rfdmhvW4OFnq+ig2x2BqXKODbQ@mail.gmail.com>
 <etPan.5ff266f5.625558ec.b53f@fastmail.com>
Message-ID: <CAFycZ9d-u4uPVmMYdWfjMub05U2Wb2R1wN0Em+6nc5JyrPBeaA@mail.gmail.com>

On Mon, 4 Jan 2021 at 00:54, Glyph <glyph at twistedmatrix.com> wrote:

> It’s complicated and I’m not a lawyer, so maybe it is indeed not a
> problem. But in brief it’s like trademark protection, kind of, in that it
> becomes SFC’s problem to be aware that you’ve said these things and tell
> you not to say them. The twisted project (which is a bit of an amorphous
> concept to begin with) has authorized SFC to be its fiscal sponsor, the SFC
> has gone through  the rigamarole with the IRS to ensure this is an
> exempt-able public benefit activity, and now someone is making claims about
> the project hiring, which they’re on the hook for. How does the IRS know
> your status of affiliation with the project or the conservancy for sure?
> Somebody has to investigate it, investigating means asking a bunch of
> questions and sucking up the SFC’s time and energy, even if no enforcement
> action is ever formally taken.
>
> In short: talk to the SFC first about the project’s status, get an actual
> official recommendation and not my random opinion about what may or may not
> be a problem, before doing anything related to fundraising. I can’t say
> anything authoritative about what is allowed, because as far as I
> understand it, *nothing* is allowed without untangling the PLC/approval
> process first. :-)
>
> (Except to raise money for the already-authorized expenses related to the
> continued hosting of twistedmatrix.com, of course.)
>

Thanks for the info and sorry for the trouble :)

I will try to send a (private) message to SFC these days to untangle the
PLC team and I will add you to CC.

Until we solve the PLC issue, I would consider this discussion blocked.

Cheers
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210104/5c865e6a/attachment.htm>

From ian at haywood.id.au  Sun Jan  3 19:59:48 2021
From: ian at haywood.id.au (Ian Haywood)
Date: Mon, 4 Jan 2021 13:59:48 +1100
Subject: [Twisted-Python] Plan/Goal for GitHub Sponsors
In-Reply-To: <CAFycZ9d-u4uPVmMYdWfjMub05U2Wb2R1wN0Em+6nc5JyrPBeaA@mail.gmail.com>
References: <CAFycZ9eBzzWjrPCFnpT8CY77rfdmhvW4OFnq+ig2x2BqXKODbQ@mail.gmail.com>
 <etPan.5ff266f5.625558ec.b53f@fastmail.com>
 <CAFycZ9d-u4uPVmMYdWfjMub05U2Wb2R1wN0Em+6nc5JyrPBeaA@mail.gmail.com>
Message-ID: <ec88ab6d-63bb-e69d-1c32-339def4dec63@haywood.id.au>

I think having a project coordinator as   a *first* priority isn't a 
good idea (not saying it isn't down the track)

Currently there's little to coordinate as the core team aren't active in 
planning or review. can the team be expanded ? (I'm not angling for a 
role myself)

Ian

On 4/01/2021 11:59 am, Adi Roiban wrote:
>
>
> On Mon, 4 Jan 2021 at 00:54, Glyph <glyph at twistedmatrix.com 
> <mailto:glyph at twistedmatrix.com>> wrote:
>
>     It’s complicated and I’m not a lawyer, so maybe it is indeed not a
>     problem. But in brief it’s like trademark protection, kind of, in
>     that it becomes SFC’s problem to be aware that you’ve said these
>     things and tell you not to say them. The twisted project (which is
>     a bit of an amorphous concept to begin with) has authorized SFC to
>     be its fiscal sponsor, the SFC has gone through  the rigamarole
>     with the IRS to ensure this is an exempt-able public benefit
>     activity, and now someone is making claims about the project
>     hiring, which they’re on the hook for. How does the IRS know your
>     status of affiliation with the project or the conservancy for
>     sure? Somebody has to investigate it, investigating means asking a
>     bunch of questions and sucking up the SFC’s time and energy, even
>     if no enforcement action is ever formally taken.
>
>     In short: talk to the SFC first about the project’s status, get an
>     actual official recommendation and not my random opinion about
>     what may or may not be a problem, before doing anything related to
>     fundraising. I can’t say anything authoritative about what is
>     allowed, because as far as I understand it, *nothing* is allowed
>     without untangling the PLC/approval process first. :-)
>
>     (Except to raise money for the already-authorized expenses related
>     to the continued hosting of twistedmatrix.com
>     <http://twistedmatrix.com>, of course.)
>
>
> Thanks for the info and sorry for the trouble :)
>
> I will try to send a (private) message to SFC these days to untangle 
> the PLC team and I will add you to CC.
>
> Until we solve the PLC issue, I would consider this discussion blocked.
>
> Cheers
> -- 
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210104/7e599c10/attachment.htm>

From ian at haywood.id.au  Sun Jan  3 21:01:42 2021
From: ian at haywood.id.au (Ian Haywood)
Date: Mon, 4 Jan 2021 15:01:42 +1100
Subject: [Twisted-Python] reactor for Linux io_uring
Message-ID: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>

In investigating async file I/O I came across this. In a nutshell it's 
the new epoll()

It's marginally more efficient although this is only apparent at very 
high loads. What's more interesting is that io_uring accepts files as 
well as network/pipe handles: avoiding the need for threads.

Here's a good intro: https://unixism.net/loti/index.html

If people think an IoUringReactor is worthwhile I'll open a ticket and 
make a start.

However it will need a reviewer... :-)

Ian


From glyph at twistedmatrix.com  Sun Jan  3 22:41:17 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 3 Jan 2021 21:41:17 -0800
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
Message-ID: <F903BCE6-677D-48B6-8EDB-6A1C8EBA9AC2@twistedmatrix.com>

I suspect that this may require somewhat less... cognitive surface area than your other contributions :).

And hey, we have a vaccine now, which means that maybe things will go back to normal or close enough to it that I'll have enough capacity to get back to it myself :)

-g

> On Jan 3, 2021, at 8:01 PM, Ian Haywood <ian at haywood.id.au> wrote:
> 
> In investigating async file I/O I came across this. In a nutshell it's the new epoll()
> 
> It's marginally more efficient although this is only apparent at very high loads. What's more interesting is that io_uring accepts files as well as network/pipe handles: avoiding the need for threads.
> 
> Here's a good intro: https://unixism.net/loti/index.html
> 
> If people think an IoUringReactor is worthwhile I'll open a ticket and make a start.
> 
> However it will need a reviewer... :-)
> 
> Ian
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Mon Jan  4 06:44:12 2021
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 4 Jan 2021 08:44:12 -0500
Subject: [Twisted-Python] Plan/Goal for GitHub Sponsors
In-Reply-To: <ec88ab6d-63bb-e69d-1c32-339def4dec63@haywood.id.au>
References: <CAFycZ9eBzzWjrPCFnpT8CY77rfdmhvW4OFnq+ig2x2BqXKODbQ@mail.gmail.com>
 <etPan.5ff266f5.625558ec.b53f@fastmail.com>
 <CAFycZ9d-u4uPVmMYdWfjMub05U2Wb2R1wN0Em+6nc5JyrPBeaA@mail.gmail.com>
 <ec88ab6d-63bb-e69d-1c32-339def4dec63@haywood.id.au>
Message-ID: <CAEeXt4OuAUPAY+XpLbboo9rT5wbA3RmB7aJKfunKYbaPjWJ6Lg@mail.gmail.com>

On Sun, Jan 3, 2021 at 10:00 PM Ian Haywood <ian at haywood.id.au> wrote:

> I think having a project coordinator as   a *first* priority isn't a good
> idea (not saying it isn't down the track)
>
> Currently there's little to coordinate as the core team aren't active in
> planning or review. can the team be expanded ? (I'm not angling for a role
> myself)
>

Since Glyph has asked that this discussion move to a different forum, I
won't respond to this counter-proposal here.

Jean-Paul


> Ian
> On 4/01/2021 11:59 am, Adi Roiban wrote:
>
>
>
> On Mon, 4 Jan 2021 at 00:54, Glyph <glyph at twistedmatrix.com> wrote:
>
>> It’s complicated and I’m not a lawyer, so maybe it is indeed not a
>> problem. But in brief it’s like trademark protection, kind of, in that it
>> becomes SFC’s problem to be aware that you’ve said these things and tell
>> you not to say them. The twisted project (which is a bit of an amorphous
>> concept to begin with) has authorized SFC to be its fiscal sponsor, the SFC
>> has gone through  the rigamarole with the IRS to ensure this is an
>> exempt-able public benefit activity, and now someone is making claims about
>> the project hiring, which they’re on the hook for. How does the IRS know
>> your status of affiliation with the project or the conservancy for sure?
>> Somebody has to investigate it, investigating means asking a bunch of
>> questions and sucking up the SFC’s time and energy, even if no enforcement
>> action is ever formally taken.
>>
>> In short: talk to the SFC first about the project’s status, get an actual
>> official recommendation and not my random opinion about what may or may not
>> be a problem, before doing anything related to fundraising. I can’t say
>> anything authoritative about what is allowed, because as far as I
>> understand it, *nothing* is allowed without untangling the PLC/approval
>> process first. :-)
>>
>> (Except to raise money for the already-authorized expenses related to the
>> continued hosting of twistedmatrix.com, of course.)
>>
>
> Thanks for the info and sorry for the trouble :)
>
> I will try to send a (private) message to SFC these days to untangle the
> PLC team and I will add you to CC.
>
> Until we solve the PLC issue, I would consider this discussion blocked.
>
> Cheers
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing listTwisted-Python at twistedmatrix.comhttps://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210104/1f5ba415/attachment.htm>

From barry.scott at forcepoint.com  Mon Jan  4 08:15:36 2021
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 04 Jan 2021 15:15:36 +0000
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
Message-ID: <9820060.nUPlyArG6x@fpbarry>

On Monday, 4 January 2021 04:01:42 GMT Ian Haywood wrote:
> In investigating async file I/O I came across this. In a nutshell it's 
> the new epoll()

> It's marginally more efficient although this is only apparent at very 
> high loads.

> What's more interesting is that io_uring accepts files as 
> well as network/pipe handles: avoiding the need for threads.

What threads? Why do you call out file FDs different from socket FDs?

The point of io_uring is to avoid transitions between user and kernel right?
Nothing to do with thread.

In current twisted you can run complex network code without threads
already.

> Here's a good intro: https://unixism.net/loti/index.html

Also there is full coverage of io_uring on lwn.net.
Its a fast evolving kernel API.

> If people think an IoUringReactor is worthwhile I'll open a ticket and 
> make a start.

I'm guessing that you will need to write a Python extension to get at
io_uring or use ctypes. Is that what you where expecting?

> However it will need a reviewer... :-)

Yes this is going to be complex code that few people have any experience with.

Barry

> Ian
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 





From exarkun at twistedmatrix.com  Tue Jan  5 06:31:49 2021
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 5 Jan 2021 08:31:49 -0500
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <9820060.nUPlyArG6x@fpbarry>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
Message-ID: <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>

On Tue, Jan 5, 2021 at 6:49 AM Barry Scott <barry.scott at forcepoint.com>
wrote:

> On Monday, 4 January 2021 04:01:42 GMT Ian Haywood wrote:
> > In investigating async file I/O I came across this. In a nutshell it's
> > the new epoll()
>
> > It's marginally more efficient although this is only apparent at very
> > high loads.
>
> > What's more interesting is that io_uring accepts files as
> > well as network/pipe handles: avoiding the need for threads.
>
> What threads? Why do you call out file FDs different from socket FDs?
>
> The point of io_uring is to avoid transitions between user and kernel
> right?
> Nothing to do with thread.
>
> In current twisted you can run complex network code without threads
> already.
>
> > Here's a good intro: https://unixism.net/loti/index.html
>
> Also there is full coverage of io_uring on lwn.net.
> Its a fast evolving kernel API.
>
> > If people think an IoUringReactor is worthwhile I'll open a ticket and
> > make a start.
>
> I'm guessing that you will need to write a Python extension to get at
> io_uring or use ctypes. Is that what you where expecting?
>
> > However it will need a reviewer... :-)
>
> Yes this is going to be complex code that few people have any experience
> with.
>

Just so there's a counter-perspective out there, I would like to suggest
that reactors are neither magical nor particular complex in the grand
scheme of software and that if you start with the assumption that a piece
of code is going to be complex and hard to review then you will almost
certainly create a piece of software that is complex and hard to review.

My recommendation would be to instead start with the assumption that it's
just a bit more mundane code binding a relatively small and straightforward
C API related to copying bytes from one location to another.  Yea, maybe
there will be some hassles getting it to compile smoothly in all the
desired environments or maybe there will be a few tricky areas for memory
management or some other kind of low-level, localized bookkeeping - but
those kinds of issues don't have to make for a complex piece of code.
Starting from this assumption, try to produce an implementation that is
straightforward, well-factored, and easily reviewed.  What do you have to
lose?

Jean-Paul


>
> Barry
>
> > Ian
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210105/ac1f399c/attachment.htm>

From hs at ox.cx  Tue Jan  5 06:38:11 2021
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 5 Jan 2021 14:38:11 +0100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <9820060.nUPlyArG6x@fpbarry>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
Message-ID: <4C2666E8-CA1F-4E64-B9EA-888184EEBE4A@ox.cx>

>> What's more interesting is that io_uring accepts files as 
>> well as network/pipe handles: avoiding the need for threads.
> 
> What threads? Why do you call out file FDs different from socket FDs?
> 
> The point of io_uring is to avoid transitions between user and kernel right?
> Nothing to do with thread.
> 
> In current twisted you can run complex network code without threads
> already.

Because before io_uring there was no reliable way on Linux to do async file I/O and everybody is forced to use thread pools for it.

From barry.scott at forcepoint.com  Tue Jan  5 06:56:36 2021
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 05 Jan 2021 13:56:36 +0000
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
Message-ID: <43513963.fMDQidcC6G@fpbarry>

On Tuesday, 5 January 2021 13:31:49 GMT Jean-Paul Calderone wrote:
> On Tue, Jan 5, 2021 at 6:49 AM Barry Scott <barry.scott at forcepoint.com>
> wrote:
> 
> > On Monday, 4 January 2021 04:01:42 GMT Ian Haywood wrote:
> > > In investigating async file I/O I came across this. In a nutshell it's
> > > the new epoll()
> >
> > > It's marginally more efficient although this is only apparent at very
> > > high loads.
> >
> > > What's more interesting is that io_uring accepts files as
> > > well as network/pipe handles: avoiding the need for threads.
> >
> > What threads? Why do you call out file FDs different from socket FDs?
> >
> > The point of io_uring is to avoid transitions between user and kernel
> > right?
> > Nothing to do with thread.
> >
> > In current twisted you can run complex network code without threads
> > already.
> >
> > > Here's a good intro: https://unixism.net/loti/index.html
> >
> > Also there is full coverage of io_uring on lwn.net.
> > Its a fast evolving kernel API.
> >
> > > If people think an IoUringReactor is worthwhile I'll open a ticket and
> > > make a start.
> >
> > I'm guessing that you will need to write a Python extension to get at
> > io_uring or use ctypes. Is that what you where expecting?
> >
> > > However it will need a reviewer... :-)
> >
> > Yes this is going to be complex code that few people have any experience
> > with.
> >
> 
> Just so there's a counter-perspective out there, I would like to suggest
> that reactors are neither magical nor particular complex in the grand
> scheme of software and that if you start with the assumption that a piece
> of code is going to be complex and hard to review then you will almost
> certainly create a piece of software that is complex and hard to review.
>
> My recommendation would be to instead start with the assumption that it's
> just a bit more mundane code binding a relatively small and straightforward
> C API related to copying bytes from one location to another.  Yea, maybe
> there will be some hassles getting it to compile smoothly in all the
> desired environments or maybe there will be a few tricky areas for memory
> management or some other kind of low-level, localized bookkeeping - but
> those kinds of issues don't have to make for a complex piece of code.
> Starting from this assumption, try to produce an implementation that is
> straightforward, well-factored, and easily reviewed.  What do you have to
> lose?

I'm not against doing this and would love to see a PoC.
I've been following the io_uring work with great interest.

But my experience with things like this inside kernels leads me to expect
complexity.

Barry

> 
> Jean-Paul
> 
> 
> >
> > Barry
> >
> > > Ian
> > >
> > > _______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> > >
> >
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> 





From barry.scott at forcepoint.com  Tue Jan  5 06:57:42 2021
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 05 Jan 2021 13:57:42 +0000
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <4C2666E8-CA1F-4E64-B9EA-888184EEBE4A@ox.cx>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry> <4C2666E8-CA1F-4E64-B9EA-888184EEBE4A@ox.cx>
Message-ID: <107328039.nniJfEyVGO@fpbarry>

On Tuesday, 5 January 2021 13:38:11 GMT Hynek Schlawack wrote:
> >> What's more interesting is that io_uring accepts files as 
> >> well as network/pipe handles: avoiding the need for threads.
> > 
> > What threads? Why do you call out file FDs different from socket FDs?
> > 
> > The point of io_uring is to avoid transitions between user and kernel right?
> > Nothing to do with thread.
> > 
> > In current twisted you can run complex network code without threads
> > already.
> 
> Because before io_uring there was no reliable way on Linux to do async file I/O and everybody is forced to use thread pools for it.

You mean like the way that opening a file can block as the kernel walks the directories?

Barry




From sda at fstab.net  Tue Jan  5 07:02:33 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Tue, 05 Jan 2021 09:02:33 -0500
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <9820060.nUPlyArG6x@fpbarry>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
Message-ID: <bb6897da556b0949c8e2cff23f280564@fstab.net>



On 2021-01-04 10:15, Barry Scott wrote:
> On Monday, 4 January 2021 04:01:42 GMT Ian Haywood wrote:
>> If people think an IoUringReactor is worthwhile I'll open a ticket and
>> make a start.
> 
> I'm guessing that you will need to write a Python extension to get at
> io_uring or use ctypes. Is that what you where expecting?

FYI, there is https://github.com/YoSTEALTH/liburing.  I have no basis to 
say if it is good or not, just that it's there.

Cheers,
-kyle


From adi at roiban.ro  Tue Jan  5 07:04:36 2021
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 5 Jan 2021 14:04:36 +0000
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
Message-ID: <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>

On Tue, 5 Jan 2021 at 13:44, Jean-Paul Calderone <exarkun at twistedmatrix.com>
wrote:

> On Tue, Jan 5, 2021 at 6:49 AM Barry Scott <barry.scott at forcepoint.com>
> wrote:
>
>> On Monday, 4 January 2021 04:01:42 GMT Ian Haywood wrote:
>> > In investigating async file I/O I came across this. In a nutshell it's
>> > the new epoll()
>>
>> > It's marginally more efficient although this is only apparent at very
>> > high loads.
>>
>> > What's more interesting is that io_uring accepts files as
>> > well as network/pipe handles: avoiding the need for threads.
>>
>> What threads? Why do you call out file FDs different from socket FDs?
>>
>> The point of io_uring is to avoid transitions between user and kernel
>> right?
>> Nothing to do with thread.
>>
>> In current twisted you can run complex network code without threads
>> already.
>>
>> > Here's a good intro: https://unixism.net/loti/index.html
>>
>> Also there is full coverage of io_uring on lwn.net.
>> Its a fast evolving kernel API.
>>
>> > If people think an IoUringReactor is worthwhile I'll open a ticket and
>> > make a start.
>>
>> I'm guessing that you will need to write a Python extension to get at
>> io_uring or use ctypes. Is that what you where expecting?
>>
>> > However it will need a reviewer... :-)
>>
>> Yes this is going to be complex code that few people have any experience
>> with.
>>
>
> Just so there's a counter-perspective out there, I would like to suggest
> that reactors are neither magical nor particular complex in the grand
> scheme of software and that if you start with the assumption that a piece
> of code is going to be complex and hard to review then you will almost
> certainly create a piece of software that is complex and hard to review.
>
> My recommendation would be to instead start with the assumption that it's
> just a bit more mundane code binding a relatively small and straightforward
> C API related to copying bytes from one location to another.  Yea, maybe
> there will be some hassles getting it to compile smoothly in all the
> desired environments or maybe there will be a few tricky areas for memory
> management or some other kind of low-level, localized bookkeeping - but
> those kinds of issues don't have to make for a complex piece of code.
> Starting from this assumption, try to produce an implementation that is
> straightforward, well-factored, and easily reviewed.  What do you have to
> lose?
>
> Jean-Paul
>
>
Hi,

There is this wrapper https://pypi.org/project/liburing/

I can give it a try and review a possible implementation.


My suggestion is to find a real world / production use case for the new
reactor so that we can run more than unit / functional tests.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210105/dc8df077/attachment.htm>

From ian at haywood.id.au  Tue Jan  5 17:35:00 2021
From: ian at haywood.id.au (Ian Haywood)
Date: Wed, 6 Jan 2021 11:35:00 +1100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <F903BCE6-677D-48B6-8EDB-6A1C8EBA9AC2@twistedmatrix.com>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <F903BCE6-677D-48B6-8EDB-6A1C8EBA9AC2@twistedmatrix.com>
Message-ID: <3099ed8c-90db-8729-d599-e8d610144927@haywood.id.au>

Proprietary protocols like SMB tend to be over-eng

On 4/01/2021 4:41 pm, Glyph wrote:
> I suspect that this may require somewhat less... cognitive surface area than your other contributions :).
>
> And hey, we have a vaccine now, which means that maybe things will go back to normal or close enough to it that I'll have enough capacity to get back to it myself :)
>
> -g
>
>> On Jan 3, 2021, at 8:01 PM, Ian Haywood <ian at haywood.id.au> wrote:
>>
>> In investigating async file I/O I came across this. In a nutshell it's the new epoll()
>>
>> It's marginally more efficient although this is only apparent at very high loads. What's more interesting is that io_uring accepts files as well as network/pipe handles: avoiding the need for threads.
>>
>> Here's a good intro: https://unixism.net/loti/index.html
>>
>> If people think an IoUringReactor is worthwhile I'll open a ticket and make a start.
>>
>> However it will need a reviewer... :-)
>>
>> Ian
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From ian at haywood.id.au  Tue Jan  5 17:52:16 2021
From: ian at haywood.id.au (Ian Haywood)
Date: Wed, 6 Jan 2021 11:52:16 +1100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <3099ed8c-90db-8729-d599-e8d610144927@haywood.id.au>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <F903BCE6-677D-48B6-8EDB-6A1C8EBA9AC2@twistedmatrix.com>
 <3099ed8c-90db-8729-d599-e8d610144927@haywood.id.au>
Message-ID: <88f1a2f3-fb8d-6e31-871c-6122d3e73dd3@haywood.id.au>

over engineered but don't exactly break new ground in a CS sense.

On 6/01/2021 11:35 am, Ian Haywood wrote:
> Proprietary protocols like SMB tend to be over-eng
>
> On 4/01/2021 4:41 pm, Glyph wrote:
>> I suspect that this may require somewhat less... cognitive surface 
>> area than your other contributions :).
>>
>> And hey, we have a vaccine now, which means that maybe things will go 
>> back to normal or close enough to it that I'll have enough capacity 
>> to get back to it myself :)
>>
>> -g
>>
>>> On Jan 3, 2021, at 8:01 PM, Ian Haywood <ian at haywood.id.au> wrote:
>>>
>>> In investigating async file I/O I came across this. In a nutshell 
>>> it's the new epoll()
>>>
>>> It's marginally more efficient although this is only apparent at 
>>> very high loads. What's more interesting is that io_uring accepts 
>>> files as well as network/pipe handles: avoiding the need for threads.
>>>
>>> Here's a good intro: https://unixism.net/loti/index.html
>>>
>>> If people think an IoUringReactor is worthwhile I'll open a ticket 
>>> and make a start.
>>>
>>> However it will need a reviewer... :-)
>>>
>>> Ian
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From ian at haywood.id.au  Thu Jan  7 04:24:51 2021
From: ian at haywood.id.au (Ian Haywood)
Date: Thu, 7 Jan 2021 22:24:51 +1100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
 <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
Message-ID: <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>

On 6/01/2021 1:04 am, Adi Roiban wrote:
> On Tue, 5 Jan 2021 at 13:44, Jean-Paul Calderone 
> <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>
>     On Tue, Jan 5, 2021 at 6:49 AM Barry Scott
>     <barry.scott at forcepoint.com <mailto:barry.scott at forcepoint.com>>
>     wrote:
>
>
>         What threads? Why do you call out file FDs different from
>         socket FDs?
>
If you give epoll()/select() a file FD it lies and says the FD is always 
"ready" even when, as you point out, file operations can block.

> My suggestion is to find a real world / production use case for the 
> new reactor so that we can run more than unit / functional tests.
>
> -- 
> Adi Roiban

As a "standard" reactor any twisted app would stress-test it for 
network/pipe operations, no?

For async file I/O my plan would be to export a new IFilesystem (which 
is closely based on conch.interfaces.ISFTPServer) apps would be have to 
be written to use it, conch could with minimal tweaking,  and 
unsurprisingly the SMB server will.

Apps can fallback to thread-based or aio(7) based implementations that 
already  exists as PoC: https://github.com/twisted/twisted/pull/1420

Ian

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210107/3d9ec971/attachment.htm>

From glyph at twistedmatrix.com  Thu Jan  7 13:23:44 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 7 Jan 2021 12:23:44 -0800
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
 <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
 <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>
Message-ID: <66870E3A-6FA9-466B-B1FB-E263A882EFC2@twistedmatrix.com>



> On Jan 7, 2021, at 3:24 AM, Ian Haywood <ian at haywood.id.au> wrote:
> 
> For async file I/O my plan would be to export a new IFilesystem (which is closely based on conch.interfaces.ISFTPServer) apps would be have to be written to use it, conch could with minimal tweaking,  and unsurprisingly the SMB server will. 
> 
> Apps can fallback to thread-based or aio(7) based implementations that already  exists as PoC:https://github.com/twisted/twisted/pull/1420 <https://github.com/twisted/twisted/pull/1420>  
> 

The mess of ctypes stuff seems somewhat irrelevant to the "asynchronous filesystem" part of this PR - do you think you could do a smaller version of this which decouples it from smb and ctypes?  It would be very nice for twisted.web.static.File to be able to use this as well.  And it would be much easier to review in isolation.  (And also easier to review as concrete "clear asynchronous file I/O interface" functionality, rather than tying it to the term "VFS" which has a fairly checkered past within Twisted :)).

(It would also be nice to have an interface that acts as an IProducer to integrate more natively with Twisted's support for backpressure rather than only having a custom readChunk method.  I think readChunk is still necessary for completeness since you need to be able to seek and offset, though.)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210107/7d615a78/attachment.htm>

From zelnaga at gmail.com  Sat Jan  9 10:03:28 2021
From: zelnaga at gmail.com (Thomas Anderson)
Date: Sat, 9 Jan 2021 11:03:28 -0600
Subject: [Twisted-Python] how to run ckeygen
Message-ID: <CAEe4Dn8UWx-tqAuE3vc16bOMb_D=QfQg4EBUVweWqnK3SN8yVg@mail.gmail.com>

I did "pip install twisted" and it seemed to install okay.

Now I'm trying to get
https://twistedmatrix.com/documents/current/_downloads/9620a18fe21cabe0de79cc9c0efe1043/sshsimpleserver.py
running locally. To do so it says I need to first do "ckeygen -t rsa -f
ssh-keys/ssh_host_rsa_key". ssh-keygen is a command that's commonly
available on Linux systems but ckeygen...  that appears to be a twisted
thing. When I try to run that on Ubuntu I get a "-bash: ckeygen: command
not found" error.

Maybe there's a ckeygen.py file that I need to be running but if so idk
where it is. Maybe if I did I could rename it to ckeygen and then copy it
to /usr/bin or whatever and run it from there but idk.

Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210109/c3d0d110/attachment.htm>

From cjwatson at debian.org  Sat Jan  9 11:23:12 2021
From: cjwatson at debian.org (Colin Watson)
Date: Sat, 9 Jan 2021 18:23:12 +0000
Subject: [Twisted-Python] how to run ckeygen
In-Reply-To: <CAEe4Dn8UWx-tqAuE3vc16bOMb_D=QfQg4EBUVweWqnK3SN8yVg@mail.gmail.com>
References: <CAEe4Dn8UWx-tqAuE3vc16bOMb_D=QfQg4EBUVweWqnK3SN8yVg@mail.gmail.com>
Message-ID: <20210109182312.GY13361@riva.ucam.org>

On Sat, Jan 09, 2021 at 11:03:28AM -0600, Thomas Anderson wrote:
> I did "pip install twisted" and it seemed to install okay.
> 
> Now I'm trying to get
> https://twistedmatrix.com/documents/current/_downloads/9620a18fe21cabe0de79cc9c0efe1043/sshsimpleserver.py
> running locally. To do so it says I need to first do "ckeygen -t rsa -f
> ssh-keys/ssh_host_rsa_key". ssh-keygen is a command that's commonly
> available on Linux systems but ckeygen...  that appears to be a twisted
> thing. When I try to run that on Ubuntu I get a "-bash: ckeygen: command
> not found" error.

It's in the Twisted distribution (perhaps pip has installed it to
somewhere not on your $PATH?  On Linux, hopefully you're using pip in
conjunction with a virtualenv, in which case you may need to activate
the virtualenv), but you do need to use "pip install 'Twisted[conch]'"
to get the right dependencies.

  $ virtualenv twisted-test
  $ twisted-test/bin/pip install 'Twisted[conch]'
  $ twisted-test/bin/ckeygen --help
  Usage:    ckeygen [options]
  Options:
    -C, --comment=              Provide new comment.
    -N, --newpass=              Provide new passphrase.
    -P, --pass=                 Provide old passphrase.
    -b, --bits=                 Number of bits in the key to create.
    -f, --filename=             Filename of the key file.
        --help                  Display this help and exit.
    -l, --fingerprint           Show fingerprint of key file.
        --no-passphrase         Create the key with no passphrase.
    -o, --format=               Fingerprint format of key file. [default:
                                sha256-base64]
    -p, --changepass            Change passphrase of private key file.
        --private-key-subtype=  OpenSSH private key subtype to write ("PEM" or
                                "v1"). [default: PEM]
    -q, --quiet                 Quiet.
    -t, --type=                 Specify type of key to create.
        --version               Display Twisted version and exit.
    -y, --showpub               Read private key file and print public key.
  
  ckeygen manipulates public/private keys in various ways.

Alternatively, if you don't mind having a Twisted version of an age that
roughly matches when the Ubuntu version you're running was being
prepared, then you can run "sudo apt install python3-twisted" to get a
system-installed version.  That'll give you /usr/bin/ckeygen3 rather
than ckeygen, but close enough.  Whether the older version is good
enough depends on what you're doing.

-- 
Colin Watson (he/him)                              [cjwatson at debian.org]


From trac at twistedmatrix.com  Sun Jan 10 00:05:18 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 Jan 2021 07:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1610262318.06.1413440412934020569@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210110/d8e3f69f/attachment.htm>

From ian at haywood.id.au  Sun Jan 10 17:42:37 2021
From: ian at haywood.id.au (Ian Haywood)
Date: Mon, 11 Jan 2021 11:42:37 +1100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <66870E3A-6FA9-466B-B1FB-E263A882EFC2@twistedmatrix.com>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
 <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
 <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>
 <66870E3A-6FA9-466B-B1FB-E263A882EFC2@twistedmatrix.com>
Message-ID: <c86de384-e48f-9567-260d-438440fd2634@haywood.id.au>


On 8/01/2021 7:23 am, Glyph wrote:
>
> The mess of ctypes stuff

unclear what you mean: either the aio implementation or statx.py

> seems somewhat irrelevant to the "asynchronous filesystem" part of 
> this PR - do you think you could do a smaller version of this which 
> decouples it from smb and ctypes?
but yes both can be spun out easily, so it's just the interface and a 
plain portable threads-based implementation. Where in the twisted tree 
should the interface and implementation go?
> (It would also be nice to have an interface that acts as an IProducer 
> to integrate more natively with Twisted's support for backpressure 
> rather than only having a custom readChunk method.  I think readChunk 
> is still necessary for completeness since you need to be able to seek 
> and offset, though.)

certainly will look at this. It fits well with FTP's filesystem 
interaction.

Ian

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210111/b07d7a1c/attachment.htm>

From glyph at twistedmatrix.com  Mon Jan 11 02:26:13 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 Jan 2021 01:26:13 -0800
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <c86de384-e48f-9567-260d-438440fd2634@haywood.id.au>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
 <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
 <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>
 <66870E3A-6FA9-466B-B1FB-E263A882EFC2@twistedmatrix.com>
 <c86de384-e48f-9567-260d-438440fd2634@haywood.id.au>
Message-ID: <F741CA12-4B49-4FD2-A87E-142B4B964B10@twistedmatrix.com>



> On Jan 10, 2021, at 4:42 PM, Ian Haywood <ian at haywood.id.au> wrote:
> 
> 
> 
> On 8/01/2021 7:23 am, Glyph wrote:
>> 
>> The mess of ctypes stuff
> unclear what you mean: either the aio implementation or statx.py 
> 
Both, really, but I was mainly talking about statx.py.
>> seems somewhat irrelevant to the "asynchronous filesystem" part of this PR - do you think you could do a smaller version of this which decouples it from smb and ctypes?
> but yes both can be spun out easily, so it's just the interface and a plain portable threads-based implementation. Where in the twisted tree should the interface and implementation go?

I'd say probably twisted.internet?  (This is something that might get modified as folks review & comment)

>> (It would also be nice to have an interface that acts as an IProducer to integrate more natively with Twisted's support for backpressure rather than only having a custom readChunk method.  I think readChunk is still necessary for completeness since you need to be able to seek and offset, though.)
> certainly will look at this. It fits well with FTP's filesystem interaction. 
> 
> 
Thank you so much!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210111/0901cdd3/attachment.htm>

From glyph at twistedmatrix.com  Fri Jan 15 11:42:02 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 15 Jan 2021 10:42:02 -0800
Subject: [Twisted-Python] Upcoming Twisted Release
In-Reply-To: <099D757E-591B-49F0-BF85-92467667FB77@twistedmatrix.com>
References: <CAFycZ9dQ04S6O1w4VhAv2z4=YX6VVT-Z5DEHNq6XzQ9nagKpMg@mail.gmail.com>
 <CAG=rPVfHNdcnFwuVN9zD6-oTizTQ2t8h3n++UoftnoQA+Ag_Hw@mail.gmail.com>
 <CAFycZ9cCn6+GJhbom5EwrYc-uizBpAkSFcQ6yidRL7vrn5tipQ@mail.gmail.com>
 <CAG=rPVc23Pyy9JOyRXjN9csJS8jDsZh59Ven0kc0LDWxPvz38g@mail.gmail.com>
 <099D757E-591B-49F0-BF85-92467667FB77@twistedmatrix.com>
Message-ID: <9C0B8503-AA21-46BC-AB73-7625050BBC8C@twistedmatrix.com>



> On Dec 28, 2020, at 9:53 AM, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> It might take me a few days to complete this, since I am in the middle of holidays now, 
>> so won't be able to complete a release until the beginning of January.
> 
> Everybody should be able to take a break on a holiday (or heck, whenever you want, for as long as you want, we're all volunteers here) but "please don't make progress while I'm gone" is a surefire recipe for the person asking to complete the thing themselves getting distracted and wandering away.  The release is stuck enough as it is with CI issues and regressions, so if someone has energy to make some forward progress let's please not hold it up.

Following up on this, since we are now officially past the "beginning" of January: Craig, is a release imminent or can someone else pick up some tasks yet?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210115/5f0cd968/attachment.htm>

From rodrigc at crodrigues.org  Fri Jan 15 19:56:13 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 15 Jan 2021 18:56:13 -0800
Subject: [Twisted-Python] Upcoming Twisted Release
In-Reply-To: <9C0B8503-AA21-46BC-AB73-7625050BBC8C@twistedmatrix.com>
References: <CAFycZ9dQ04S6O1w4VhAv2z4=YX6VVT-Z5DEHNq6XzQ9nagKpMg@mail.gmail.com>
 <CAG=rPVfHNdcnFwuVN9zD6-oTizTQ2t8h3n++UoftnoQA+Ag_Hw@mail.gmail.com>
 <CAFycZ9cCn6+GJhbom5EwrYc-uizBpAkSFcQ6yidRL7vrn5tipQ@mail.gmail.com>
 <CAG=rPVc23Pyy9JOyRXjN9csJS8jDsZh59Ven0kc0LDWxPvz38g@mail.gmail.com>
 <099D757E-591B-49F0-BF85-92467667FB77@twistedmatrix.com>
 <9C0B8503-AA21-46BC-AB73-7625050BBC8C@twistedmatrix.com>
Message-ID: <CAG=rPVd_J0OK2e0H3VP_hRvqEDOXzfYW+9ne42ekNavExLCxhg@mail.gmail.com>

On Fri, Jan 15, 2021 at 10:42 AM Glyph <glyph at twistedmatrix.com> wrote:

>
>
>
> Following up on this, since we are now officially past the "beginning" of
> January: Craig, is a release imminent or can someone else pick up some
> tasks yet?
>
>
I'm close to getting this done, and want to complete this.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210115/99627305/attachment.htm>

From trac at twistedmatrix.com  Sun Jan 17 00:05:20 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Jan 2021 07:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1610867120.09.3882667741734246574@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210117/e9549e62/attachment.htm>

From peter.westlake at pobox.com  Fri Jan 22 03:59:59 2021
From: peter.westlake at pobox.com (Peter Westlake)
Date: Fri, 22 Jan 2021 10:59:59 +0000
Subject: [Twisted-Python] Ldaptor attributes in Python 3
Message-ID: <146e2aad-3679-4464-97fb-1e151b8fcc4d@www.fastmail.com>

I'm using Ldaptor for LDAP access because it fits in with Twisted, and the results are a bit mystifying. The results that come back from a search are a list of LDAPEntryWithClient.  Indexing this, e.g. entry['cn'], gives an object of type JournaledLDAPAttributeSet, which is a subclass of set. It contains the name of the attribute and a list containing the value:

JournaledLDAPAttributeSet(b'cn', [b'Peter Westlake'])

Getting the value out of that isn't straightforward: I'd have to check the elements of the set for a list. Is there a better way?

I've also found that the items() method gives something more tractable:

>>> entry.items()
[
(b'cn', b'Peter Westlake'),
...
]

so I can turn that into a dict and index that. But again, this seems like an odd design for an API. Is there a better way to extract the value of an attribute from an entry?

Peter.


From rodrigc at crodrigues.org  Sat Jan 23 14:36:40 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 23 Jan 2021 13:36:40 -0800
Subject: [Twisted-Python] Questions about Project Leadership committee
Message-ID: <CAG=rPVc9KUcp_eaTE=ciakR3iZA4mT9mCFdnyFkH=kLJDF9pNg@mail.gmail.com>

Hi,
I asked some questions about the Twisted project leadership committee here:

https://twistedmatrix.com/pipermail/twisted-python/2020-December/065367.html

but it looks like my questions got lost in the thread, and no one aso I
will ask again.
Who are the current members of the committee?
What are the titles/roles/responsibilities of the current committee members?
Is there a mailing list, IRC channel, or some other venue which the current
committee members belong to
so that they can communicate amongst themselves, and also with the outside
world, such as the Software Freedom Conservancy?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210123/1d52993e/attachment.htm>

From adi at roiban.ro  Sat Jan 23 15:09:17 2021
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 23 Jan 2021 22:09:17 +0000
Subject: [Twisted-Python] Ldaptor attributes in Python 3
In-Reply-To: <146e2aad-3679-4464-97fb-1e151b8fcc4d@www.fastmail.com>
References: <146e2aad-3679-4464-97fb-1e151b8fcc4d@www.fastmail.com>
Message-ID: <CAFycZ9cqMd7opB0nJQK9A6OOEjq--xt9G5coJwatS8PY2LGfCw@mail.gmail.com>

Hi,

On Fri, 22 Jan 2021 at 11:15, Peter Westlake <peter.westlake at pobox.com>
wrote:

> I'm using Ldaptor for LDAP access because it fits in with Twisted, and the
> results are a bit mystifying. The results that come back from a search are
> a list of LDAPEntryWithClient.  Indexing this, e.g. entry['cn'], gives an
> object of type JournaledLDAPAttributeSet, which is a subclass of set. It
> contains the name of the attribute and a list containing the value:
>
> JournaledLDAPAttributeSet(b'cn', [b'Peter Westlake'])
>
> Getting the value out of that isn't straightforward: I'd have to check the
> elements of the set for a list. Is there a better way?
>
> I've also found that the items() method gives something more tractable:
>
> >>> entry.items()
> [
> (b'cn', b'Peter Westlake'),
> ...
> ]
>
> so I can turn that into a dict and index that. But again, this seems like
> an odd design for an API. Is there a better way to extract the value of an
> attribute from an entry?
>
>
Can you send a full example of how you would like the  API to behave ? Or
send a PR ? :)

I am doing a client-side search like this and I was happy with API

o = LDAPEntry(client, base_dn)
results = yield o.search(
    attributes=[b'objectclass'],
    scope=LDAP_SCOPE_wholeSubtree,
    filterText='(cn=test)',
    )
for result in results:
    print (result['objectclass'])

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210123/d9c34b71/attachment.htm>

From peter.westlake at pobox.com  Sat Jan 23 17:48:44 2021
From: peter.westlake at pobox.com (Peter Westlake)
Date: Sun, 24 Jan 2021 00:48:44 +0000
Subject: [Twisted-Python] Ldaptor attributes in Python 3
In-Reply-To: <CAFycZ9cqMd7opB0nJQK9A6OOEjq--xt9G5coJwatS8PY2LGfCw@mail.gmail.com>
References: <146e2aad-3679-4464-97fb-1e151b8fcc4d@www.fastmail.com>
 <CAFycZ9cqMd7opB0nJQK9A6OOEjq--xt9G5coJwatS8PY2LGfCw@mail.gmail.com>
Message-ID: <466fbe30-32d4-4365-88ae-ef1ea9c11795@www.fastmail.com>

On Sat, 23 Jan 2021, at 22:09, Adi Roiban wrote:
> Hi,
> 
> On Fri, 22 Jan 2021 at 11:15, Peter Westlake <peter.westlake at pobox.com> wrote:
>> I'm using Ldaptor for LDAP access because it fits in with Twisted, and the results are a bit mystifying.
>> ...
> 
> Can you send a full example of how you would like the  API to behave ? Or send a PR ? :)
> 
> I am doing a client-side search like this and I was happy with API
> 
> o = LDAPEntry(client, base_dn)
> results = yield o.search(
>     attributes=[b'objectclass'],
>     scope=LDAP_SCOPE_wholeSubtree,
>     filterText='(cn=test)',
>     )
> for result in results:
>     print (result['objectclass'])

Thanks, Adi! 

My code looks like this:

> o = LDAPEntry(client, base_dn)
> results = yield o.search(filterText='(uid=peterw)')
> for result in results:
>     print (result['cn'])

I would like this to print:

   Peter Westlake

or

  b'Peter Westlake'

What it actually prints is:

  JournaledLDAPAttributeSet(b'cn', [b'Peter Westlake])

Having searched the WWW for examples, it looks as though other people have seen it behaving in exactly the way I want, but it's not doing that for me, with Python 3.6.8 on CentOS 7.

Peter.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/e9117b70/attachment.htm>

From glyph at twistedmatrix.com  Sat Jan 23 17:43:21 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Jan 2021 16:43:21 -0800
Subject: [Twisted-Python] Questions about Project Leadership committee
In-Reply-To: <CAG=rPVc9KUcp_eaTE=ciakR3iZA4mT9mCFdnyFkH=kLJDF9pNg@mail.gmail.com>
References: <CAG=rPVc9KUcp_eaTE=ciakR3iZA4mT9mCFdnyFkH=kLJDF9pNg@mail.gmail.com>
Message-ID: <etPan.600cc4f5.327b23c6.16ad3@fastmail.com>



On January 23, 2021 at 1:36:40 PM, Craig Rodrigues (rodrigc at crodrigues.org(mailto:rodrigc at crodrigues.org)) wrote:

> Hi,
> I asked some questions about the Twisted project leadership committee here:
>  
> https://twistedmatrix.com/pipermail/twisted-python/2020-December/065367.html
>  
> but it looks like my questions got lost in the thread, and no one aso I will ask again.
> Who are the current members of the committee?  

At the time the committee was created, I don’t remember if this was public, so I don’t feel comfortable sharing identities publicly because it wasn’t part of the deal at the time. This is not the way I’d structure things now, but given that several members are unresponsive and don’t seem to want to be associated with the project any more, I can’t ask them if it’s OK with them. If you can find any old public documentation feel free to share though; the issue is that I’m not sure it *has* been public. If it has, it can by all means remain public.


I can at least share that as I recall there are 6 members and I’m one of them. But you’d want to confirm this with the conservancy, so please join Adi’s private thread with them for further discussion.

>  
> What are the titles/roles/responsibilities of the current committee members?  

There are no titles or roles.

>  
> Is there a mailing list, IRC channel, or some other venue which the current committee members belong to
> so that they can communicate amongst themselves, and also with the outside world, such as the Software Freedom Conservancy?  

There’s theoretically a mailing list but it hasn’t seen a post in more than 4 years. I’m not even sure if it still works in our new mail service configuration. So functionally, “no”.

>  
>  
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210123/c028cd6c/attachment-0001.htm>

From rodrigc at crodrigues.org  Sat Jan 23 19:10:04 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 23 Jan 2021 18:10:04 -0800
Subject: [Twisted-Python] Questions about Project Leadership committee
In-Reply-To: <etPan.600cc4f5.327b23c6.16ad3@fastmail.com>
References: <CAG=rPVc9KUcp_eaTE=ciakR3iZA4mT9mCFdnyFkH=kLJDF9pNg@mail.gmail.com>
 <etPan.600cc4f5.327b23c6.16ad3@fastmail.com>
Message-ID: <CAG=rPVe+eqqm_Lgfj4YVCzsesPVqVtsxFwbf1EySqFEPfTfT6A@mail.gmail.com>

On Sat, Jan 23, 2021 at 4:54 PM Glyph <glyph at twistedmatrix.com> wrote:

> At the time the committee was created, I don’t remember if this was
> public, so I don’t feel comfortable sharing identities publicly because it
> wasn’t part of the deal at the time. This is not the way I’d structure
> things now, but given that several members are unresponsive and don’t seem
> to want to be associated with the project any more, I can’t ask them if
> it’s OK with them. If you can find any old public documentation feel free
> to share though; the issue is that I’m not sure it *has* been public. If it
> has, it can by all means remain public.
>
> I can at least share that as I recall there are 6 members and I’m one of
> them. But you’d want to confirm this with the conservancy, so please join
> Adi’s private thread with them for further discussion.
>

Thanks for the clarification.
Have you recently contacted the 5 other committee members to confirm if
they want to remain on the committee or not,
and either received confirmation (or feedback timeout)?

In this e-mail:
https://twistedmatrix.com/pipermail/twisted-python/2020-December/065364.html
, I mentioned that I
tried to look for documentation about this committee at
https://twistedmatrix.com and could not find any.

So if you are not aware of any public documentation regarding this
committee, then I think it is reasonable
to assume that such documentation does not exist.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210123/f044be4f/attachment.htm>

From glyph at twistedmatrix.com  Sat Jan 23 21:27:41 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 Jan 2021 20:27:41 -0800
Subject: [Twisted-Python] Questions about Project Leadership committee
In-Reply-To: <CAG=rPVe+eqqm_Lgfj4YVCzsesPVqVtsxFwbf1EySqFEPfTfT6A@mail.gmail.com>
References: <CAG=rPVe+eqqm_Lgfj4YVCzsesPVqVtsxFwbf1EySqFEPfTfT6A@mail.gmail.com>
Message-ID: <etPan.600cf7a6.2ae8944a.16c91@fastmail.com>



On January 23, 2021 at 6:10:04 PM, Craig Rodrigues (rodrigc at crodrigues.org(mailto:rodrigc at crodrigues.org)) wrote:

>  
>  
> On Sat, Jan 23, 2021 at 4:54 PM Glyph <glyph at twistedmatrix.com(mailto:glyph at twistedmatrix.com)> wrote:  
> >  
> >  
> > At the time the committee was created, I don’t remember if this was public, so I don’t feel comfortable sharing identities publicly because it wasn’t part of the deal at the time. This is not the way I’d structure things now, but given that several members are unresponsive and don’t seem to want to be associated with the project any more, I can’t ask them if it’s OK with them. If you can find any old public documentation feel free to share though; the issue is that I’m not sure it *has* been public. If it has, it can by all means remain public.
> >  
> >  
> > I can at least share that as I recall there are 6 members and I’m one of them. But you’d want to confirm this with the conservancy, so please join Adi’s private thread with them for further discussion.
> >  
> >  
>  
>  
> Thanks for the clarification.  
> Have you recently contacted the 5 other committee members to confirm if they want to remain on the committee or not,
> and either received confirmation (or feedback timeout)?
>  
>  
>  
>  


Not recently although I’ve reached out several times in the past. I have no plans to reach out again until someone has worked out with the SFC what our options are and proposed a concrete plan.

>  
> In this e-mail: https://twistedmatrix.com/pipermail/twisted-python/2020-December/065364.html , I mentioned that I  
> tried to look for documentation about this committee at https://twistedmatrix.com and could not find any.
>  
> So if you are not aware of any public documentation regarding this committee, then I think it is reasonable  
> to assume that such documentation does not exist.
> --
> Craig
>  
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210123/e5044f75/attachment.htm>

From trac at twistedmatrix.com  Sun Jan 24 00:05:17 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Jan 2021 07:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1611471917.33.2556078543639173141@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/b9529279/attachment.htm>

From adi at roiban.ro  Sun Jan 24 02:24:25 2021
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 24 Jan 2021 09:24:25 +0000
Subject: [Twisted-Python] Questions about Project Leadership committee
In-Reply-To: <etPan.600cf7a6.2ae8944a.16c91@fastmail.com>
References: <CAG=rPVe+eqqm_Lgfj4YVCzsesPVqVtsxFwbf1EySqFEPfTfT6A@mail.gmail.com>
 <etPan.600cf7a6.2ae8944a.16c91@fastmail.com>
Message-ID: <CAFycZ9dAK2bMf0QW3ar70Zi0+xc-xGgeRswvZF3kmCgeZ=KfBA@mail.gmail.com>

Hi,

On Sun, 24 Jan 2021 at 04:29, Glyph <glyph at twistedmatrix.com> wrote:

>
> On January 23, 2021 at 6:10:04 PM, Craig Rodrigues (rodrigc at crodrigues.org)
> wrote:
>
>>
>>
>> On Sat, Jan 23, 2021 at 4:54 PM Glyph <glyph at twistedmatrix.com> wrote:
>>
>>> At the time the committee was created, I don’t remember if this was
>>> public, so I don’t feel comfortable sharing identities publicly because it
>>> wasn’t part of the deal at the time. This is not the way I’d structure
>>> things now, but given that several members are unresponsive and don’t seem
>>> to want to be associated with the project any more, I can’t ask them if
>>> it’s OK with them. If you can find any old public documentation feel free
>>> to share though; the issue is that I’m not sure it *has* been public. If it
>>> has, it can by all means remain public.
>>>
>>> I can at least share that as I recall there are 6 members and I’m one of
>>> them. But you’d want to confirm this with the conservancy, so please join
>>> Adi’s private thread with them for further discussion.
>>>
>>
>> Thanks for the clarification.
>> Have you recently contacted the 5 other committee members to confirm if
>> they want to remain on the committee or not,
>> and either received confirmation (or feedback timeout)?
>>
> Not recently although I’ve reached out several times in the past. I have
> no plans to reach out again until someone has worked out with the SFC what
> our options are and proposed a concrete plan.
>
I was in contact with SFC over IRC.

The first thing that someone need to do is send a message to
twisted at sfconservancy.org

Only after no response is received in time (I don't know how long that
is...maybe 3 weeks) we can contact SFC and they
will allocate extra resources to help solve this issue.

I have not sent a message to that list.
For now, I don't plan to do it.
I feel there is no consensus across the current active Twisted developers.

I encourage anyone else who wants to do it, to send the message to
twisted at sfconservancy.org

Good luck
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/d4117db5/attachment-0001.htm>

From glyph at twistedmatrix.com  Sun Jan 24 02:57:30 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Jan 2021 01:57:30 -0800
Subject: [Twisted-Python] Questions about Project Leadership committee
In-Reply-To: <CAFycZ9dAK2bMf0QW3ar70Zi0+xc-xGgeRswvZF3kmCgeZ=KfBA@mail.gmail.com>
References: <CAG=rPVe+eqqm_Lgfj4YVCzsesPVqVtsxFwbf1EySqFEPfTfT6A@mail.gmail.com>
 <etPan.600cf7a6.2ae8944a.16c91@fastmail.com>
 <CAFycZ9dAK2bMf0QW3ar70Zi0+xc-xGgeRswvZF3kmCgeZ=KfBA@mail.gmail.com>
Message-ID: <C6857C4A-98C6-4F80-91FF-371327FE62BF@twistedmatrix.com>


> On Jan 24, 2021, at 1:24 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> On Sun, 24 Jan 2021 at 04:29, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> On January 23, 2021 at 6:10:04 PM, Craig Rodrigues (rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>) wrote:
> 
>> 
>> 
>> On Sat, Jan 23, 2021 at 4:54 PM Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> At the time the committee was created, I don’t remember if this was public, so I don’t feel comfortable sharing identities publicly because it wasn’t part of the deal at the time. This is not the way I’d structure things now, but given that several members are unresponsive and don’t seem to want to be associated with the project any more, I can’t ask them if it’s OK with them. If you can find any old public documentation feel free to share though; the issue is that I’m not sure it *has* been public. If it has, it can by all means remain public.
>> 
>> I can at least share that as I recall there are 6 members and I’m one of them. But you’d want to confirm this with the conservancy, so please join Adi’s private thread with them for further discussion.
>> 
>> 
>> Thanks for the clarification.
>> Have you recently contacted the 5 other committee members to confirm if they want to remain on the committee or not,
>> and either received confirmation (or feedback timeout)?
> Not recently although I’ve reached out several times in the past. I have no plans to reach out again until someone has worked out with the SFC what our options are and proposed a concrete plan.
> 
> I was in contact with SFC over IRC.
> 
> The first thing that someone need to do is send a message to twisted at sfconservancy.org <mailto:twisted at sfconservancy.org>
> Only after no response is received in time (I don't know how long that is...maybe 3 weeks) we can contact SFC and they
> will allocate extra resources to help solve this issue.
> 
> I have not sent a message to that list.
> For now, I don't plan to do it.
> I feel there is no consensus across the current active Twisted developers.
> 
> I encourage anyone else who wants to do it, to send the message to twisted at sfconservancy.org <mailto:twisted at sfconservancy.org>
> 
> Good luck

Thanks for the update, Adi; I appreciate your taking the initiative on this.

If we want to have a private deliberation among committers about next steps, I believe https://github.com/orgs/twisted/teams/twisted-contributors/discussions <https://github.com/orgs/twisted/teams/twisted-contributors/discussions> makes it possible to do that, so that might be a tool to use.

(To be clear, I think any conclusions from this discussions need to be made public and transparent, but for reasons previously mentioned in this conversation, we may want to be able to share ideas less publicly before we pick one to avoid muddling things like future bidding on work.)

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/75803685/attachment.htm>

From adi at roiban.ro  Sun Jan 24 06:48:16 2021
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 24 Jan 2021 13:48:16 +0000
Subject: [Twisted-Python] Questions about Project Leadership committee
In-Reply-To: <C6857C4A-98C6-4F80-91FF-371327FE62BF@twistedmatrix.com>
References: <CAG=rPVe+eqqm_Lgfj4YVCzsesPVqVtsxFwbf1EySqFEPfTfT6A@mail.gmail.com>
 <etPan.600cf7a6.2ae8944a.16c91@fastmail.com>
 <CAFycZ9dAK2bMf0QW3ar70Zi0+xc-xGgeRswvZF3kmCgeZ=KfBA@mail.gmail.com>
 <C6857C4A-98C6-4F80-91FF-371327FE62BF@twistedmatrix.com>
Message-ID: <CAFycZ9cS3E2MmjrOEhphaajkL5zfJ+ecAjiQMpZd-WnAi-RXZQ@mail.gmail.com>

On Sun, 24 Jan 2021 at 09:57, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jan 24, 2021, at 1:24 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> On Sun, 24 Jan 2021 at 04:29, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On January 23, 2021 at 6:10:04 PM, Craig Rodrigues (
>> rodrigc at crodrigues.org) wrote:
>>
>>>
>>>
>>> On Sat, Jan 23, 2021 at 4:54 PM Glyph <glyph at twistedmatrix.com> wrote:
>>>
>>>> At the time the committee was created, I don’t remember if this was
>>>> public, so I don’t feel comfortable sharing identities publicly because it
>>>> wasn’t part of the deal at the time. This is not the way I’d structure
>>>> things now, but given that several members are unresponsive and don’t seem
>>>> to want to be associated with the project any more, I can’t ask them if
>>>> it’s OK with them. If you can find any old public documentation feel free
>>>> to share though; the issue is that I’m not sure it *has* been public. If it
>>>> has, it can by all means remain public.
>>>>
>>>> I can at least share that as I recall there are 6 members and I’m one
>>>> of them. But you’d want to confirm this with the conservancy, so please
>>>> join Adi’s private thread with them for further discussion.
>>>>
>>>
>>> Thanks for the clarification.
>>> Have you recently contacted the 5 other committee members to confirm if
>>> they want to remain on the committee or not,
>>> and either received confirmation (or feedback timeout)?
>>>
>> Not recently although I’ve reached out several times in the past. I have
>> no plans to reach out again until someone has worked out with the SFC what
>> our options are and proposed a concrete plan.
>>
> I was in contact with SFC over IRC.
>
> The first thing that someone need to do is send a message to
> twisted at sfconservancy.org
>
> Only after no response is received in time (I don't know how long that
> is...maybe 3 weeks) we can contact SFC and they
> will allocate extra resources to help solve this issue.
>
> I have not sent a message to that list.
> For now, I don't plan to do it.
> I feel there is no consensus across the current active Twisted developers.
>
> I encourage anyone else who wants to do it, to send the message to
> twisted at sfconservancy.org
>
> Good luck
>
>
> Thanks for the update, Adi; I appreciate your taking the initiative on
> this.
>
>
OK. I am a liar :)
I have just sent an email to twisted at sfconservancy.org with what I think
can be done to activate the committee.
I added Glypt and Craig to CC.

Let me know if you are also interested in that private discussion.


> If we want to have a private deliberation among committers about next
> steps, I believe
> https://github.com/orgs/twisted/teams/twisted-contributors/discussions makes
> it possible to do that, so that might be a tool to use.
>
>
I have created this team private  thread on GitHub

https://github.com/orgs/twisted/teams/twisted-contributors/discussions/1


> (To be clear, I think any conclusions from this discussions need to be
> made public and transparent, but for reasons previously mentioned in this
> conversation, we may want to be able to share ideas less publicly before we
> pick one to avoid muddling things like future bidding on work.)
>
>
I will try to follow up if I get something.
I have also asked the committee to come back with a conclusion over the
mailing list.

Glyphs, I understand you very well in regard to the conflict to interest.
And you are right. Nothing personal.

It's just a personal frustration that we need to make extra effort, when we
don't have much time and energy for code reviews.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/81c26320/attachment.htm>

From robert.difalco at gmail.com  Sun Jan 24 10:44:36 2021
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Sun, 24 Jan 2021 09:44:36 -0800
Subject: [Twisted-Python] Thread Cancelled
Message-ID: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>

Hi, I apologize this question is a little vague. I'm looking for pointers.
I have a klein route that makes an underlying deferToThread call with a
simple single thread (an IO based sync call I can't change, a boto3 sqs
write). The thread pool is simple, just a couple of threads, nothing fancy.

VERY rarely it appears that Klein cancels the thread. What techniques can I
use to figure out why my thread is being Canceled? There's nothing in the
failure to tell me "who, why, or where" it was canceled. Also, I cannot get
this down to a reproducible case, but here's the boto3 sqs wrapper, this
fall back works fine, but it's a band-aide for an error I can't track down.:

def write(self, payload):
    """
    Write message to SQS async from thread pool. If twisted cancels the
    thread, instead write synchronously.

    def _retrySynchronously(error):
        if error.type != CancelledError:
            return error

        log.warn("Async SQS write cancelled. Calling synchronously.")
        return defer.succeed(self._writeSyncFallback(payload))

    deferredCall = self._deferToThread(self.sqs.write, payload)
    deferredCall.addErrback(_retrySynchronously)
    return deferredCall

def _writeSyncFallback(self, payload):
    return self.sqs.write(payload)

The _deferToThread call just uses my own thread pool with 2 threads, but is
otherwise stock.

Is there a level of logging I'm missing or some other thing that would tell
me why the thread is being canceled? The retry works great and Klein does
not return an error from the route.

Thanks in advance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/9ecc0d44/attachment-0001.htm>

From colin.dunklau at gmail.com  Sun Jan 24 12:31:51 2021
From: colin.dunklau at gmail.com (Colin Dunklau)
Date: Sun, 24 Jan 2021 13:31:51 -0600
Subject: [Twisted-Python] Thread Cancelled
In-Reply-To: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>
References: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>
Message-ID: <CAMTx_3Az-pUea7fC=FyAhrBkN657iok_ab+yftPVn40c730JOw@mail.gmail.com>

On Sun, Jan 24, 2021 at 11:45 AM Robert DiFalco <robert.difalco at gmail.com>
wrote:

> Hi, I apologize this question is a little vague. I'm looking for pointers.
> I have a klein route that makes an underlying deferToThread call with a
> simple single thread (an IO based sync call I can't change, a boto3 sqs
> write). The thread pool is simple, just a couple of threads, nothing fancy.
>
> VERY rarely it appears that Klein cancels the thread. What techniques can
> I use to figure out why my thread is being Canceled? There's nothing in the
> failure to tell me "who, why, or where" it was canceled. Also, I cannot get
> this down to a reproducible case, but here's the boto3 sqs wrapper, this
> fall back works fine, but it's a band-aide for an error I can't track down.:
>
> def write(self, payload):
>     """
>     Write message to SQS async from thread pool. If twisted cancels the
>     thread, instead write synchronously.
>
>     def _retrySynchronously(error):
>         if error.type != CancelledError:
>             return error
>
>         log.warn("Async SQS write cancelled. Calling synchronously.")
>         return defer.succeed(self._writeSyncFallback(payload))
>
>     deferredCall = self._deferToThread(self.sqs.write, payload)
>     deferredCall.addErrback(_retrySynchronously)
>     return deferredCall
>
> def _writeSyncFallback(self, payload):
>     return self.sqs.write(payload)
>
> The _deferToThread call just uses my own thread pool with 2 threads, but
> is otherwise stock.
>
> Is there a level of logging I'm missing or some other thing that would
> tell me why the thread is being canceled? The retry works great and Klein
> does not return an error from the route.
>
> Thanks in advance.
>
>
I think we'll need to see more code for this, specifically the caller of
that `write` method, and its callers, etc. Note that the thread itself
isn't being cancelled, the Deferred you get from _deferToThread is... so
you'll most likely need to find out what code interacts with that object to
progress in isolating this.

In my quick skim of the deferToThread and ThreadPool source, I can't find
any explicit cancellations. While that certainly doesn't rule it out, it
does make me think you're more likely to find the issue by inspecting the
callers involved.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/55094bb6/attachment.htm>

From robert.difalco at gmail.com  Sun Jan 24 12:57:33 2021
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Sun, 24 Jan 2021 11:57:33 -0800
Subject: [Twisted-Python] Thread Cancelled
In-Reply-To: <CAMTx_3Az-pUea7fC=FyAhrBkN657iok_ab+yftPVn40c730JOw@mail.gmail.com>
References: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>
 <CAMTx_3Az-pUea7fC=FyAhrBkN657iok_ab+yftPVn40c730JOw@mail.gmail.com>
Message-ID: <CAAXGW-zjmz-nqf4kidYRUYjfvWJuJZKo=HMCpcRYoeG=AoRTmA@mail.gmail.com>

You're absolutely right, I meant "cancel the deferred". I don't grok server
sockets very well so maybe someone can help. But apparently, klein does a
.doRead from our server socket (getting the request from the client?). This
returns a "why" of "connection done" so that closes the connection before
we have written our response to the client, and that cancels the deferred
SQS write.

https://github.com/racker/python-twisted-core/blob/master/twisted/internet/selectreactor.py#L148-L155

The method above is "doRead". Which calls this:
https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L239

I guess if If socket.rcv() returns an empty string it simply closes the
connection.
https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L249-L250

Is that normal? I mean I guess it must be but then why is the read getting
an empty string and closing the connection? I can't really account for it?
Some kind of back pressure due to load?

Thanks for any thoughts.



On Sun, Jan 24, 2021 at 11:32 AM Colin Dunklau <colin.dunklau at gmail.com>
wrote:

>
>
> On Sun, Jan 24, 2021 at 11:45 AM Robert DiFalco <robert.difalco at gmail.com>
> wrote:
>
>> Hi, I apologize this question is a little vague. I'm looking for
>> pointers. I have a klein route that makes an underlying deferToThread call
>> with a simple single thread (an IO based sync call I can't change, a boto3
>> sqs write). The thread pool is simple, just a couple of threads, nothing
>> fancy.
>>
>> VERY rarely it appears that Klein cancels the thread. What techniques can
>> I use to figure out why my thread is being Canceled? There's nothing in the
>> failure to tell me "who, why, or where" it was canceled. Also, I cannot get
>> this down to a reproducible case, but here's the boto3 sqs wrapper, this
>> fall back works fine, but it's a band-aide for an error I can't track down.:
>>
>> def write(self, payload):
>>     """
>>     Write message to SQS async from thread pool. If twisted cancels the
>>     thread, instead write synchronously.
>>
>>     def _retrySynchronously(error):
>>         if error.type != CancelledError:
>>             return error
>>
>>         log.warn("Async SQS write cancelled. Calling synchronously.")
>>         return defer.succeed(self._writeSyncFallback(payload))
>>
>>     deferredCall = self._deferToThread(self.sqs.write, payload)
>>     deferredCall.addErrback(_retrySynchronously)
>>     return deferredCall
>>
>> def _writeSyncFallback(self, payload):
>>     return self.sqs.write(payload)
>>
>> The _deferToThread call just uses my own thread pool with 2 threads, but
>> is otherwise stock.
>>
>> Is there a level of logging I'm missing or some other thing that would
>> tell me why the thread is being canceled? The retry works great and Klein
>> does not return an error from the route.
>>
>> Thanks in advance.
>>
>>
> I think we'll need to see more code for this, specifically the caller of
> that `write` method, and its callers, etc. Note that the thread itself
> isn't being cancelled, the Deferred you get from _deferToThread is... so
> you'll most likely need to find out what code interacts with that object to
> progress in isolating this.
>
> In my quick skim of the deferToThread and ThreadPool source, I can't find
> any explicit cancellations. While that certainly doesn't rule it out, it
> does make me think you're more likely to find the issue by inspecting the
> callers involved.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/23d4c670/attachment.htm>

From glyph at twistedmatrix.com  Sun Jan 24 15:41:04 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Jan 2021 14:41:04 -0800
Subject: [Twisted-Python] Thread Cancelled
In-Reply-To: <CAAXGW-zjmz-nqf4kidYRUYjfvWJuJZKo=HMCpcRYoeG=AoRTmA@mail.gmail.com>
References: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>
 <CAMTx_3Az-pUea7fC=FyAhrBkN657iok_ab+yftPVn40c730JOw@mail.gmail.com>
 <CAAXGW-zjmz-nqf4kidYRUYjfvWJuJZKo=HMCpcRYoeG=AoRTmA@mail.gmail.com>
Message-ID: <F9F0647F-97BC-4A73-B4D2-BDDD20D680BE@twistedmatrix.com>

While a socket is open and receiving data, recv() will either give you a non-zero number of bytes if bytes are ready, or an EWOULDBLOCK (AKA EAGAIN) if no bytes are ready.  A result of zero bytes (the empty string) means "end of file" - the other end has closed the socket.

So what's happening here is your client is timing out or otherwise canceling its request by closing the socket, and this is the correct, intentional response to that scenario.

-g

> On Jan 24, 2021, at 11:57 AM, Robert DiFalco <robert.difalco at gmail.com> wrote:
> 
> You're absolutely right, I meant "cancel the deferred". I don't grok server sockets very well so maybe someone can help. But apparently, klein does a .doRead from our server socket (getting the request from the client?). This returns a "why" of "connection done" so that closes the connection before we have written our response to the client, and that cancels the deferred SQS write.
> 
> https://github.com/racker/python-twisted-core/blob/master/twisted/internet/selectreactor.py#L148-L155 <https://github.com/racker/python-twisted-core/blob/master/twisted/internet/selectreactor.py#L148-L155>
> 
> The method above is "doRead". Which calls this:
> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L239 <https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L239>
> 
> I guess if If socket.rcv() returns an empty string it simply closes the connection.
> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L249-L250 <https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L249-L250>
> 
> Is that normal? I mean I guess it must be but then why is the read getting an empty string and closing the connection? I can't really account for it? Some kind of back pressure due to load? 
> 
> Thanks for any thoughts.
> 
> 
> 
> On Sun, Jan 24, 2021 at 11:32 AM Colin Dunklau <colin.dunklau at gmail.com <mailto:colin.dunklau at gmail.com>> wrote:
> 
> 
> On Sun, Jan 24, 2021 at 11:45 AM Robert DiFalco <robert.difalco at gmail.com <mailto:robert.difalco at gmail.com>> wrote:
> Hi, I apologize this question is a little vague. I'm looking for pointers. I have a klein route that makes an underlying deferToThread call with a simple single thread (an IO based sync call I can't change, a boto3 sqs write). The thread pool is simple, just a couple of threads, nothing fancy. 
> 
> VERY rarely it appears that Klein cancels the thread. What techniques can I use to figure out why my thread is being Canceled? There's nothing in the failure to tell me "who, why, or where" it was canceled. Also, I cannot get this down to a reproducible case, but here's the boto3 sqs wrapper, this fall back works fine, but it's a band-aide for an error I can't track down.:
> def write(self, payload):
>     """
>     Write message to SQS async from thread pool. If twisted cancels the
>     thread, instead write synchronously.
> 
>     def _retrySynchronously(error):
>         if error.type != CancelledError:
>             return error
> 
>         log.warn("Async SQS write cancelled. Calling synchronously.")
>         return defer.succeed(self._writeSyncFallback(payload))
> 
>     deferredCall = self._deferToThread(self.sqs.write, payload)
>     deferredCall.addErrback(_retrySynchronously)
>     return deferredCall
> 
> def _writeSyncFallback(self, payload):
>     return self.sqs.write(payload)
> 
> The _deferToThread call just uses my own thread pool with 2 threads, but is otherwise stock. 
> 
> Is there a level of logging I'm missing or some other thing that would tell me why the thread is being canceled? The retry works great and Klein does not return an error from the route.
> 
> Thanks in advance.
> 
> 
> I think we'll need to see more code for this, specifically the caller of that `write` method, and its callers, etc. Note that the thread itself isn't being cancelled, the Deferred you get from _deferToThread is... so you'll most likely need to find out what code interacts with that object to progress in isolating this.
> 
> In my quick skim of the deferToThread and ThreadPool source, I can't find any explicit cancellations. While that certainly doesn't rule it out, it does make me think you're more likely to find the issue by inspecting the callers involved.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/cd7fb081/attachment-0001.htm>

From glyph at twistedmatrix.com  Sun Jan 24 15:41:22 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Jan 2021 14:41:22 -0800
Subject: [Twisted-Python] Questions about Project Leadership committee
In-Reply-To: <CAFycZ9cS3E2MmjrOEhphaajkL5zfJ+ecAjiQMpZd-WnAi-RXZQ@mail.gmail.com>
References: <CAG=rPVe+eqqm_Lgfj4YVCzsesPVqVtsxFwbf1EySqFEPfTfT6A@mail.gmail.com>
 <etPan.600cf7a6.2ae8944a.16c91@fastmail.com>
 <CAFycZ9dAK2bMf0QW3ar70Zi0+xc-xGgeRswvZF3kmCgeZ=KfBA@mail.gmail.com>
 <C6857C4A-98C6-4F80-91FF-371327FE62BF@twistedmatrix.com>
 <CAFycZ9cS3E2MmjrOEhphaajkL5zfJ+ecAjiQMpZd-WnAi-RXZQ@mail.gmail.com>
Message-ID: <7CB9413B-70E6-4AC8-8238-61067876DD75@twistedmatrix.com>



> On Jan 24, 2021, at 5:48 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> It's just a personal frustration that we need to make extra effort, when we don't have much time and energy for code reviews.
> 

I feel this every single day :)

Thanks,

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/6429a52f/attachment.htm>

From robert.difalco at gmail.com  Sun Jan 24 15:58:29 2021
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Sun, 24 Jan 2021 14:58:29 -0800
Subject: [Twisted-Python] Thread Cancelled
In-Reply-To: <F9F0647F-97BC-4A73-B4D2-BDDD20D680BE@twistedmatrix.com>
References: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>
 <CAMTx_3Az-pUea7fC=FyAhrBkN657iok_ab+yftPVn40c730JOw@mail.gmail.com>
 <CAAXGW-zjmz-nqf4kidYRUYjfvWJuJZKo=HMCpcRYoeG=AoRTmA@mail.gmail.com>
 <F9F0647F-97BC-4A73-B4D2-BDDD20D680BE@twistedmatrix.com>
Message-ID: <CAAXGW-zJqd6Trx5G5E8atyXJtDTQvpyCsKGEgcyhUz2mBmmxSQ@mail.gmail.com>

That makes sense, thank you. A timeout seems unlikely but maybe the client
is closing the connection due to a network issue. This is an extremely rare
occurrence.

On Sun, Jan 24, 2021 at 2:41 PM Glyph <glyph at twistedmatrix.com> wrote:

> While a socket is open and receiving data, recv() will either give you a
> non-zero number of bytes if bytes are ready, or an EWOULDBLOCK (AKA EAGAIN)
> if no bytes are ready.  A result of zero bytes (the empty string) means
> "end of file" - the other end has closed the socket.
>
> So what's happening here is your client is timing out or otherwise
> canceling its request by closing the socket, and this is the correct,
> intentional response to that scenario.
>
> -g
>
> On Jan 24, 2021, at 11:57 AM, Robert DiFalco <robert.difalco at gmail.com>
> wrote:
>
> You're absolutely right, I meant "cancel the deferred". I don't grok
> server sockets very well so maybe someone can help. But apparently, klein
> does a .doRead from our server socket (getting the request from the
> client?). This returns a "why" of "connection done" so that closes the
> connection before we have written our response to the client, and that
> cancels the deferred SQS write.
>
>
> https://github.com/racker/python-twisted-core/blob/master/twisted/internet/selectreactor.py#L148-L155
>
> The method above is "doRead". Which calls this:
>
> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L239
>
> I guess if If socket.rcv() returns an empty string it simply closes the
> connection.
>
> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L249-L250
>
> Is that normal? I mean I guess it must be but then why is the read getting
> an empty string and closing the connection? I can't really account for it?
> Some kind of back pressure due to load?
>
> Thanks for any thoughts.
>
>
>
> On Sun, Jan 24, 2021 at 11:32 AM Colin Dunklau <colin.dunklau at gmail.com>
> wrote:
>
>>
>>
>> On Sun, Jan 24, 2021 at 11:45 AM Robert DiFalco <robert.difalco at gmail.com>
>> wrote:
>>
>>> Hi, I apologize this question is a little vague. I'm looking for
>>> pointers. I have a klein route that makes an underlying deferToThread call
>>> with a simple single thread (an IO based sync call I can't change, a boto3
>>> sqs write). The thread pool is simple, just a couple of threads, nothing
>>> fancy.
>>>
>>> VERY rarely it appears that Klein cancels the thread. What techniques
>>> can I use to figure out why my thread is being Canceled? There's nothing in
>>> the failure to tell me "who, why, or where" it was canceled. Also, I cannot
>>> get this down to a reproducible case, but here's the boto3 sqs wrapper,
>>> this fall back works fine, but it's a band-aide for an error I can't track
>>> down.:
>>>
>>> def write(self, payload):
>>>     """
>>>     Write message to SQS async from thread pool. If twisted cancels the
>>>     thread, instead write synchronously.
>>>
>>>     def _retrySynchronously(error):
>>>         if error.type != CancelledError:
>>>             return error
>>>
>>>         log.warn("Async SQS write cancelled. Calling synchronously.")
>>>         return defer.succeed(self._writeSyncFallback(payload))
>>>
>>>     deferredCall = self._deferToThread(self.sqs.write, payload)
>>>     deferredCall.addErrback(_retrySynchronously)
>>>     return deferredCall
>>>
>>> def _writeSyncFallback(self, payload):
>>>     return self.sqs.write(payload)
>>>
>>> The _deferToThread call just uses my own thread pool with 2 threads, but
>>> is otherwise stock.
>>>
>>> Is there a level of logging I'm missing or some other thing that would
>>> tell me why the thread is being canceled? The retry works great and Klein
>>> does not return an error from the route.
>>>
>>> Thanks in advance.
>>>
>>>
>> I think we'll need to see more code for this, specifically the caller of
>> that `write` method, and its callers, etc. Note that the thread itself
>> isn't being cancelled, the Deferred you get from _deferToThread is... so
>> you'll most likely need to find out what code interacts with that object to
>> progress in isolating this.
>>
>> In my quick skim of the deferToThread and ThreadPool source, I can't find
>> any explicit cancellations. While that certainly doesn't rule it out, it
>> does make me think you're more likely to find the issue by inspecting the
>> callers involved.
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/5f2fa88c/attachment.htm>

From glyph at twistedmatrix.com  Sun Jan 24 16:21:45 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Jan 2021 15:21:45 -0800
Subject: [Twisted-Python] Thread Cancelled
In-Reply-To: <CAAXGW-zJqd6Trx5G5E8atyXJtDTQvpyCsKGEgcyhUz2mBmmxSQ@mail.gmail.com>
References: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>
 <CAMTx_3Az-pUea7fC=FyAhrBkN657iok_ab+yftPVn40c730JOw@mail.gmail.com>
 <CAAXGW-zjmz-nqf4kidYRUYjfvWJuJZKo=HMCpcRYoeG=AoRTmA@mail.gmail.com>
 <F9F0647F-97BC-4A73-B4D2-BDDD20D680BE@twistedmatrix.com>
 <CAAXGW-zJqd6Trx5G5E8atyXJtDTQvpyCsKGEgcyhUz2mBmmxSQ@mail.gmail.com>
Message-ID: <363689E8-9EE5-4CBB-B478-6455F6E7A49F@twistedmatrix.com>

If you're dealing with lots of clients on the public internet, sometimes this is just gonna happen, for a variety of reasons; it's normal.  We would welcome better error reporting for this scenario so it doesn't require the kind of debugging you just did :-).

-g

> On Jan 24, 2021, at 2:58 PM, Robert DiFalco <robert.difalco at gmail.com> wrote:
> 
> That makes sense, thank you. A timeout seems unlikely but maybe the client is closing the connection due to a network issue. This is an extremely rare occurrence.
> 
> On Sun, Jan 24, 2021 at 2:41 PM Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> While a socket is open and receiving data, recv() will either give you a non-zero number of bytes if bytes are ready, or an EWOULDBLOCK (AKA EAGAIN) if no bytes are ready.  A result of zero bytes (the empty string) means "end of file" - the other end has closed the socket.
> 
> So what's happening here is your client is timing out or otherwise canceling its request by closing the socket, and this is the correct, intentional response to that scenario.
> 
> -g
> 
>> On Jan 24, 2021, at 11:57 AM, Robert DiFalco <robert.difalco at gmail.com <mailto:robert.difalco at gmail.com>> wrote:
>> 
>> You're absolutely right, I meant "cancel the deferred". I don't grok server sockets very well so maybe someone can help. But apparently, klein does a .doRead from our server socket (getting the request from the client?). This returns a "why" of "connection done" so that closes the connection before we have written our response to the client, and that cancels the deferred SQS write.
>> 
>> https://github.com/racker/python-twisted-core/blob/master/twisted/internet/selectreactor.py#L148-L155 <https://github.com/racker/python-twisted-core/blob/master/twisted/internet/selectreactor.py#L148-L155>
>> 
>> The method above is "doRead". Which calls this:
>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L239 <https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L239>
>> 
>> I guess if If socket.rcv() returns an empty string it simply closes the connection.
>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L249-L250 <https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L249-L250>
>> 
>> Is that normal? I mean I guess it must be but then why is the read getting an empty string and closing the connection? I can't really account for it? Some kind of back pressure due to load? 
>> 
>> Thanks for any thoughts.
>> 
>> 
>> 
>> On Sun, Jan 24, 2021 at 11:32 AM Colin Dunklau <colin.dunklau at gmail.com <mailto:colin.dunklau at gmail.com>> wrote:
>> 
>> 
>> On Sun, Jan 24, 2021 at 11:45 AM Robert DiFalco <robert.difalco at gmail.com <mailto:robert.difalco at gmail.com>> wrote:
>> Hi, I apologize this question is a little vague. I'm looking for pointers. I have a klein route that makes an underlying deferToThread call with a simple single thread (an IO based sync call I can't change, a boto3 sqs write). The thread pool is simple, just a couple of threads, nothing fancy. 
>> 
>> VERY rarely it appears that Klein cancels the thread. What techniques can I use to figure out why my thread is being Canceled? There's nothing in the failure to tell me "who, why, or where" it was canceled. Also, I cannot get this down to a reproducible case, but here's the boto3 sqs wrapper, this fall back works fine, but it's a band-aide for an error I can't track down.:
>> def write(self, payload):
>>     """
>>     Write message to SQS async from thread pool. If twisted cancels the
>>     thread, instead write synchronously.
>> 
>>     def _retrySynchronously(error):
>>         if error.type != CancelledError:
>>             return error
>> 
>>         log.warn("Async SQS write cancelled. Calling synchronously.")
>>         return defer.succeed(self._writeSyncFallback(payload))
>> 
>>     deferredCall = self._deferToThread(self.sqs.write, payload)
>>     deferredCall.addErrback(_retrySynchronously)
>>     return deferredCall
>> 
>> def _writeSyncFallback(self, payload):
>>     return self.sqs.write(payload)
>> 
>> The _deferToThread call just uses my own thread pool with 2 threads, but is otherwise stock. 
>> 
>> Is there a level of logging I'm missing or some other thing that would tell me why the thread is being canceled? The retry works great and Klein does not return an error from the route.
>> 
>> Thanks in advance.
>> 
>> 
>> I think we'll need to see more code for this, specifically the caller of that `write` method, and its callers, etc. Note that the thread itself isn't being cancelled, the Deferred you get from _deferToThread is... so you'll most likely need to find out what code interacts with that object to progress in isolating this.
>> 
>> In my quick skim of the deferToThread and ThreadPool source, I can't find any explicit cancellations. While that certainly doesn't rule it out, it does make me think you're more likely to find the issue by inspecting the callers involved.
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/ecb6ff77/attachment-0001.htm>

From robert.difalco at gmail.com  Sun Jan 24 20:40:03 2021
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Sun, 24 Jan 2021 19:40:03 -0800
Subject: [Twisted-Python] Thread Cancelled
In-Reply-To: <363689E8-9EE5-4CBB-B478-6455F6E7A49F@twistedmatrix.com>
References: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>
 <CAMTx_3Az-pUea7fC=FyAhrBkN657iok_ab+yftPVn40c730JOw@mail.gmail.com>
 <CAAXGW-zjmz-nqf4kidYRUYjfvWJuJZKo=HMCpcRYoeG=AoRTmA@mail.gmail.com>
 <F9F0647F-97BC-4A73-B4D2-BDDD20D680BE@twistedmatrix.com>
 <CAAXGW-zJqd6Trx5G5E8atyXJtDTQvpyCsKGEgcyhUz2mBmmxSQ@mail.gmail.com>
 <363689E8-9EE5-4CBB-B478-6455F6E7A49F@twistedmatrix.com>
Message-ID: <CAAXGW-ywpGhi=vjN8=szChN785GsQsXfbv=DVQRd5pjje3qLAw@mail.gmail.com>

Well, I've dealt with this issue with other languages. Not sure how to deal
with it in Klein/Twisted. This operation is idempotent so I suppose what
I'd like to happen is have the whole chain of deferred's succeed but then
just not be able to write the response to the socket -- but not interrupt
the chain. Unfortunately, what I really need is my operations to be atomic
-- introduce a two phase commit or some such. But that's too big of a job
on this legacy code base for now. Right now I'd be content if I could save
the database record and then send the SQS message to AWS and not have that
SQS send interrupted if the client closed the socket.. Is there a simple
way to achieve that? If I got the request body I'm good, I don't care if I
can't write the response.

One other thing that would be nice is to know why a deferred was canceled.
If the client close a connection I might like to ignore the cancel, but I
think what is happening is that Twisted is pretty smart. So it either knows
I'm going to make a write to SQS using Boto that is inbound, so it is
somehow able to cancel that operation -- perhaps more likely the client
closed the connection and the connection canceled defers after I called
deferToThread but before a thread was available to run on. Either way, I'd
like them all to run, and just fail to write the final response from the
end of the chain.

Sorry, too many words.




On Sun, Jan 24, 2021 at 3:22 PM Glyph <glyph at twistedmatrix.com> wrote:

> If you're dealing with lots of clients on the public internet, sometimes
> this is just gonna happen, for a variety of reasons; it's normal.  We would
> welcome better error reporting for this scenario so it doesn't require the
> kind of debugging you just did :-).
>
> -g
>
> On Jan 24, 2021, at 2:58 PM, Robert DiFalco <robert.difalco at gmail.com>
> wrote:
>
> That makes sense, thank you. A timeout seems unlikely but maybe the client
> is closing the connection due to a network issue. This is an extremely rare
> occurrence.
>
> On Sun, Jan 24, 2021 at 2:41 PM Glyph <glyph at twistedmatrix.com> wrote:
>
>> While a socket is open and receiving data, recv() will either give you a
>> non-zero number of bytes if bytes are ready, or an EWOULDBLOCK (AKA EAGAIN)
>> if no bytes are ready.  A result of zero bytes (the empty string) means
>> "end of file" - the other end has closed the socket.
>>
>> So what's happening here is your client is timing out or otherwise
>> canceling its request by closing the socket, and this is the correct,
>> intentional response to that scenario.
>>
>> -g
>>
>> On Jan 24, 2021, at 11:57 AM, Robert DiFalco <robert.difalco at gmail.com>
>> wrote:
>>
>> You're absolutely right, I meant "cancel the deferred". I don't grok
>> server sockets very well so maybe someone can help. But apparently, klein
>> does a .doRead from our server socket (getting the request from the
>> client?). This returns a "why" of "connection done" so that closes the
>> connection before we have written our response to the client, and that
>> cancels the deferred SQS write.
>>
>>
>> https://github.com/racker/python-twisted-core/blob/master/twisted/internet/selectreactor.py#L148-L155
>>
>> The method above is "doRead". Which calls this:
>>
>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L239
>>
>> I guess if If socket.rcv() returns an empty string it simply closes the
>> connection.
>>
>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L249-L250
>>
>> Is that normal? I mean I guess it must be but then why is the read
>> getting an empty string and closing the connection? I can't really account
>> for it? Some kind of back pressure due to load?
>>
>> Thanks for any thoughts.
>>
>>
>>
>> On Sun, Jan 24, 2021 at 11:32 AM Colin Dunklau <colin.dunklau at gmail.com>
>> wrote:
>>
>>>
>>>
>>> On Sun, Jan 24, 2021 at 11:45 AM Robert DiFalco <
>>> robert.difalco at gmail.com> wrote:
>>>
>>>> Hi, I apologize this question is a little vague. I'm looking for
>>>> pointers. I have a klein route that makes an underlying deferToThread call
>>>> with a simple single thread (an IO based sync call I can't change, a boto3
>>>> sqs write). The thread pool is simple, just a couple of threads, nothing
>>>> fancy.
>>>>
>>>> VERY rarely it appears that Klein cancels the thread. What techniques
>>>> can I use to figure out why my thread is being Canceled? There's nothing in
>>>> the failure to tell me "who, why, or where" it was canceled. Also, I cannot
>>>> get this down to a reproducible case, but here's the boto3 sqs wrapper,
>>>> this fall back works fine, but it's a band-aide for an error I can't track
>>>> down.:
>>>>
>>>> def write(self, payload):
>>>>     """
>>>>     Write message to SQS async from thread pool. If twisted cancels the
>>>>     thread, instead write synchronously.
>>>>
>>>>     def _retrySynchronously(error):
>>>>         if error.type != CancelledError:
>>>>             return error
>>>>
>>>>         log.warn("Async SQS write cancelled. Calling synchronously.")
>>>>         return defer.succeed(self._writeSyncFallback(payload))
>>>>
>>>>     deferredCall = self._deferToThread(self.sqs.write, payload)
>>>>     deferredCall.addErrback(_retrySynchronously)
>>>>     return deferredCall
>>>>
>>>> def _writeSyncFallback(self, payload):
>>>>     return self.sqs.write(payload)
>>>>
>>>> The _deferToThread call just uses my own thread pool with 2 threads,
>>>> but is otherwise stock.
>>>>
>>>> Is there a level of logging I'm missing or some other thing that would
>>>> tell me why the thread is being canceled? The retry works great and Klein
>>>> does not return an error from the route.
>>>>
>>>> Thanks in advance.
>>>>
>>>>
>>> I think we'll need to see more code for this, specifically the caller of
>>> that `write` method, and its callers, etc. Note that the thread itself
>>> isn't being cancelled, the Deferred you get from _deferToThread is... so
>>> you'll most likely need to find out what code interacts with that object to
>>> progress in isolating this.
>>>
>>> In my quick skim of the deferToThread and ThreadPool source, I can't
>>> find any explicit cancellations. While that certainly doesn't rule it out,
>>> it does make me think you're more likely to find the issue by inspecting
>>> the callers involved.
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210124/e3606c1e/attachment.htm>

From robert.difalco at gmail.com  Mon Jan 25 15:14:12 2021
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Mon, 25 Jan 2021 14:14:12 -0800
Subject: [Twisted-Python] Thread Cancelled
In-Reply-To: <CAAXGW-ywpGhi=vjN8=szChN785GsQsXfbv=DVQRd5pjje3qLAw@mail.gmail.com>
References: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>
 <CAMTx_3Az-pUea7fC=FyAhrBkN657iok_ab+yftPVn40c730JOw@mail.gmail.com>
 <CAAXGW-zjmz-nqf4kidYRUYjfvWJuJZKo=HMCpcRYoeG=AoRTmA@mail.gmail.com>
 <F9F0647F-97BC-4A73-B4D2-BDDD20D680BE@twistedmatrix.com>
 <CAAXGW-zJqd6Trx5G5E8atyXJtDTQvpyCsKGEgcyhUz2mBmmxSQ@mail.gmail.com>
 <363689E8-9EE5-4CBB-B478-6455F6E7A49F@twistedmatrix.com>
 <CAAXGW-ywpGhi=vjN8=szChN785GsQsXfbv=DVQRd5pjje3qLAw@mail.gmail.com>
Message-ID: <CAAXGW-xqv-icj5UE7UhmSdaLKKiyPnVomBNpCp4zF3tRFiGJ4g@mail.gmail.com>

So I have a simple question from all this. Is there a twisted idiom I can
use so that deferred returned from a Klein route are not canceled if the
client resets the connection? It's fine if it's before I've gotten the
request body, but once I've gotten the request body I want all deferreds to
succeed. I only wan't the streaming of the final result to fail.

On Sun, Jan 24, 2021 at 7:40 PM Robert DiFalco <robert.difalco at gmail.com>
wrote:

> Well, I've dealt with this issue with other languages. Not sure how to
> deal with it in Klein/Twisted. This operation is idempotent so I suppose
> what I'd like to happen is have the whole chain of deferred's succeed but
> then just not be able to write the response to the socket -- but not
> interrupt the chain. Unfortunately, what I really need is my operations to
> be atomic -- introduce a two phase commit or some such. But that's too big
> of a job on this legacy code base for now. Right now I'd be content if I
> could save the database record and then send the SQS message to AWS and not
> have that SQS send interrupted if the client closed the socket.. Is there a
> simple way to achieve that? If I got the request body I'm good, I don't
> care if I can't write the response.
>
> One other thing that would be nice is to know why a deferred was canceled.
> If the client close a connection I might like to ignore the cancel, but I
> think what is happening is that Twisted is pretty smart. So it either knows
> I'm going to make a write to SQS using Boto that is inbound, so it is
> somehow able to cancel that operation -- perhaps more likely the client
> closed the connection and the connection canceled defers after I called
> deferToThread but before a thread was available to run on. Either way, I'd
> like them all to run, and just fail to write the final response from the
> end of the chain.
>
> Sorry, too many words.
>
>
>
>
> On Sun, Jan 24, 2021 at 3:22 PM Glyph <glyph at twistedmatrix.com> wrote:
>
>> If you're dealing with lots of clients on the public internet, sometimes
>> this is just gonna happen, for a variety of reasons; it's normal.  We would
>> welcome better error reporting for this scenario so it doesn't require the
>> kind of debugging you just did :-).
>>
>> -g
>>
>> On Jan 24, 2021, at 2:58 PM, Robert DiFalco <robert.difalco at gmail.com>
>> wrote:
>>
>> That makes sense, thank you. A timeout seems unlikely but maybe the
>> client is closing the connection due to a network issue. This is an
>> extremely rare occurrence.
>>
>> On Sun, Jan 24, 2021 at 2:41 PM Glyph <glyph at twistedmatrix.com> wrote:
>>
>>> While a socket is open and receiving data, recv() will either give you a
>>> non-zero number of bytes if bytes are ready, or an EWOULDBLOCK (AKA EAGAIN)
>>> if no bytes are ready.  A result of zero bytes (the empty string) means
>>> "end of file" - the other end has closed the socket.
>>>
>>> So what's happening here is your client is timing out or otherwise
>>> canceling its request by closing the socket, and this is the correct,
>>> intentional response to that scenario.
>>>
>>> -g
>>>
>>> On Jan 24, 2021, at 11:57 AM, Robert DiFalco <robert.difalco at gmail.com>
>>> wrote:
>>>
>>> You're absolutely right, I meant "cancel the deferred". I don't grok
>>> server sockets very well so maybe someone can help. But apparently, klein
>>> does a .doRead from our server socket (getting the request from the
>>> client?). This returns a "why" of "connection done" so that closes the
>>> connection before we have written our response to the client, and that
>>> cancels the deferred SQS write.
>>>
>>>
>>> https://github.com/racker/python-twisted-core/blob/master/twisted/internet/selectreactor.py#L148-L155
>>>
>>> The method above is "doRead". Which calls this:
>>>
>>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L239
>>>
>>> I guess if If socket.rcv() returns an empty string it simply closes the
>>> connection.
>>>
>>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L249-L250
>>>
>>> Is that normal? I mean I guess it must be but then why is the read
>>> getting an empty string and closing the connection? I can't really account
>>> for it? Some kind of back pressure due to load?
>>>
>>> Thanks for any thoughts.
>>>
>>>
>>>
>>> On Sun, Jan 24, 2021 at 11:32 AM Colin Dunklau <colin.dunklau at gmail.com>
>>> wrote:
>>>
>>>>
>>>>
>>>> On Sun, Jan 24, 2021 at 11:45 AM Robert DiFalco <
>>>> robert.difalco at gmail.com> wrote:
>>>>
>>>>> Hi, I apologize this question is a little vague. I'm looking for
>>>>> pointers. I have a klein route that makes an underlying deferToThread call
>>>>> with a simple single thread (an IO based sync call I can't change, a boto3
>>>>> sqs write). The thread pool is simple, just a couple of threads, nothing
>>>>> fancy.
>>>>>
>>>>> VERY rarely it appears that Klein cancels the thread. What techniques
>>>>> can I use to figure out why my thread is being Canceled? There's nothing in
>>>>> the failure to tell me "who, why, or where" it was canceled. Also, I cannot
>>>>> get this down to a reproducible case, but here's the boto3 sqs wrapper,
>>>>> this fall back works fine, but it's a band-aide for an error I can't track
>>>>> down.:
>>>>>
>>>>> def write(self, payload):
>>>>>     """
>>>>>     Write message to SQS async from thread pool. If twisted cancels the
>>>>>     thread, instead write synchronously.
>>>>>
>>>>>     def _retrySynchronously(error):
>>>>>         if error.type != CancelledError:
>>>>>             return error
>>>>>
>>>>>         log.warn("Async SQS write cancelled. Calling synchronously.")
>>>>>         return defer.succeed(self._writeSyncFallback(payload))
>>>>>
>>>>>     deferredCall = self._deferToThread(self.sqs.write, payload)
>>>>>     deferredCall.addErrback(_retrySynchronously)
>>>>>     return deferredCall
>>>>>
>>>>> def _writeSyncFallback(self, payload):
>>>>>     return self.sqs.write(payload)
>>>>>
>>>>> The _deferToThread call just uses my own thread pool with 2 threads,
>>>>> but is otherwise stock.
>>>>>
>>>>> Is there a level of logging I'm missing or some other thing that would
>>>>> tell me why the thread is being canceled? The retry works great and Klein
>>>>> does not return an error from the route.
>>>>>
>>>>> Thanks in advance.
>>>>>
>>>>>
>>>> I think we'll need to see more code for this, specifically the caller
>>>> of that `write` method, and its callers, etc. Note that the thread itself
>>>> isn't being cancelled, the Deferred you get from _deferToThread is... so
>>>> you'll most likely need to find out what code interacts with that object to
>>>> progress in isolating this.
>>>>
>>>> In my quick skim of the deferToThread and ThreadPool source, I can't
>>>> find any explicit cancellations. While that certainly doesn't rule it out,
>>>> it does make me think you're more likely to find the issue by inspecting
>>>> the callers involved.
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210125/88d5de15/attachment.htm>

From exarkun at twistedmatrix.com  Mon Jan 25 16:50:19 2021
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 25 Jan 2021 18:50:19 -0500
Subject: [Twisted-Python] Thread Cancelled
In-Reply-To: <CAAXGW-xqv-icj5UE7UhmSdaLKKiyPnVomBNpCp4zF3tRFiGJ4g@mail.gmail.com>
References: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>
 <CAMTx_3Az-pUea7fC=FyAhrBkN657iok_ab+yftPVn40c730JOw@mail.gmail.com>
 <CAAXGW-zjmz-nqf4kidYRUYjfvWJuJZKo=HMCpcRYoeG=AoRTmA@mail.gmail.com>
 <F9F0647F-97BC-4A73-B4D2-BDDD20D680BE@twistedmatrix.com>
 <CAAXGW-zJqd6Trx5G5E8atyXJtDTQvpyCsKGEgcyhUz2mBmmxSQ@mail.gmail.com>
 <363689E8-9EE5-4CBB-B478-6455F6E7A49F@twistedmatrix.com>
 <CAAXGW-ywpGhi=vjN8=szChN785GsQsXfbv=DVQRd5pjje3qLAw@mail.gmail.com>
 <CAAXGW-xqv-icj5UE7UhmSdaLKKiyPnVomBNpCp4zF3tRFiGJ4g@mail.gmail.com>
Message-ID: <CAEeXt4MNwDQCicqSBs-uLNCXMJjNxAd9Q0mCprFiz97NTK_Jzw@mail.gmail.com>

On Mon, Jan 25, 2021 at 5:14 PM Robert DiFalco <robert.difalco at gmail.com>
wrote:

> So I have a simple question from all this. Is there a twisted idiom I can
> use so that deferred returned from a Klein route are not canceled if the
> client resets the connection? It's fine if it's before I've gotten the
> request body, but once I've gotten the request body I want all deferreds to
> succeed. I only wan't the streaming of the final result to fail.
>

As far as I know, you can't make Klein not cancel that Deferred.  However,
you can return a different Deferred.

def ignore_cancellation(d):

    ignore_d = Deferred()

    d.chainDeferred(ignore_d)

    return ignore_d


Wherever you're returning a Deferred to Klein now, if you return
ignore_cancellation(that_deferred) instead then either:

   - it will run to completion and deliver its result to ignore_d which
   will deliver it to Klein; or
   - Klein will cancel it and the cancellation will not propagate to the
   original Deferred so that operation can complete (when it does, it will
   deliver the result to the cancelled Deferred which will drop it on the
   floor)

The documentation for Deferred cancellation could be a little bit clearer
on how cancellation works for Deferreds that are related in various ways,
including this way.  I'm not sure how you would discover this behavior
except for reading the implementation or doing experiments.  The way that
might make sense to think about it, though, is that results only propagate
in one direction down the chain - from d to ignore_d - they never flow the
other way.  So anything that happens to ignore_d cannot affect d.

Jean-Paul



> On Sun, Jan 24, 2021 at 7:40 PM Robert DiFalco <robert.difalco at gmail.com>
> wrote:
>
>> Well, I've dealt with this issue with other languages. Not sure how to
>> deal with it in Klein/Twisted. This operation is idempotent so I suppose
>> what I'd like to happen is have the whole chain of deferred's succeed but
>> then just not be able to write the response to the socket -- but not
>> interrupt the chain. Unfortunately, what I really need is my operations to
>> be atomic -- introduce a two phase commit or some such. But that's too big
>> of a job on this legacy code base for now. Right now I'd be content if I
>> could save the database record and then send the SQS message to AWS and not
>> have that SQS send interrupted if the client closed the socket.. Is there a
>> simple way to achieve that? If I got the request body I'm good, I don't
>> care if I can't write the response.
>>
>> One other thing that would be nice is to know why a deferred was
>> canceled. If the client close a connection I might like to ignore the
>> cancel, but I think what is happening is that Twisted is pretty smart. So
>> it either knows I'm going to make a write to SQS using Boto that is
>> inbound, so it is somehow able to cancel that operation -- perhaps more
>> likely the client closed the connection and the connection canceled defers
>> after I called deferToThread but before a thread was available to run on.
>> Either way, I'd like them all to run, and just fail to write the final
>> response from the end of the chain.
>>
>> Sorry, too many words.
>>
>>
>>
>>
>> On Sun, Jan 24, 2021 at 3:22 PM Glyph <glyph at twistedmatrix.com> wrote:
>>
>>> If you're dealing with lots of clients on the public internet, sometimes
>>> this is just gonna happen, for a variety of reasons; it's normal.  We would
>>> welcome better error reporting for this scenario so it doesn't require the
>>> kind of debugging you just did :-).
>>>
>>> -g
>>>
>>> On Jan 24, 2021, at 2:58 PM, Robert DiFalco <robert.difalco at gmail.com>
>>> wrote:
>>>
>>> That makes sense, thank you. A timeout seems unlikely but maybe the
>>> client is closing the connection due to a network issue. This is an
>>> extremely rare occurrence.
>>>
>>> On Sun, Jan 24, 2021 at 2:41 PM Glyph <glyph at twistedmatrix.com> wrote:
>>>
>>>> While a socket is open and receiving data, recv() will either give you
>>>> a non-zero number of bytes if bytes are ready, or an EWOULDBLOCK (AKA
>>>> EAGAIN) if no bytes are ready.  A result of zero bytes (the empty string)
>>>> means "end of file" - the other end has closed the socket.
>>>>
>>>> So what's happening here is your client is timing out or otherwise
>>>> canceling its request by closing the socket, and this is the correct,
>>>> intentional response to that scenario.
>>>>
>>>> -g
>>>>
>>>> On Jan 24, 2021, at 11:57 AM, Robert DiFalco <robert.difalco at gmail.com>
>>>> wrote:
>>>>
>>>> You're absolutely right, I meant "cancel the deferred". I don't grok
>>>> server sockets very well so maybe someone can help. But apparently, klein
>>>> does a .doRead from our server socket (getting the request from the
>>>> client?). This returns a "why" of "connection done" so that closes the
>>>> connection before we have written our response to the client, and that
>>>> cancels the deferred SQS write.
>>>>
>>>>
>>>> https://github.com/racker/python-twisted-core/blob/master/twisted/internet/selectreactor.py#L148-L155
>>>>
>>>> The method above is "doRead". Which calls this:
>>>>
>>>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L239
>>>>
>>>> I guess if If socket.rcv() returns an empty string it simply closes the
>>>> connection.
>>>>
>>>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L249-L250
>>>>
>>>> Is that normal? I mean I guess it must be but then why is the read
>>>> getting an empty string and closing the connection? I can't really account
>>>> for it? Some kind of back pressure due to load?
>>>>
>>>> Thanks for any thoughts.
>>>>
>>>>
>>>>
>>>> On Sun, Jan 24, 2021 at 11:32 AM Colin Dunklau <colin.dunklau at gmail.com>
>>>> wrote:
>>>>
>>>>>
>>>>>
>>>>> On Sun, Jan 24, 2021 at 11:45 AM Robert DiFalco <
>>>>> robert.difalco at gmail.com> wrote:
>>>>>
>>>>>> Hi, I apologize this question is a little vague. I'm looking for
>>>>>> pointers. I have a klein route that makes an underlying deferToThread call
>>>>>> with a simple single thread (an IO based sync call I can't change, a boto3
>>>>>> sqs write). The thread pool is simple, just a couple of threads, nothing
>>>>>> fancy.
>>>>>>
>>>>>> VERY rarely it appears that Klein cancels the thread. What techniques
>>>>>> can I use to figure out why my thread is being Canceled? There's nothing in
>>>>>> the failure to tell me "who, why, or where" it was canceled. Also, I cannot
>>>>>> get this down to a reproducible case, but here's the boto3 sqs wrapper,
>>>>>> this fall back works fine, but it's a band-aide for an error I can't track
>>>>>> down.:
>>>>>>
>>>>>> def write(self, payload):
>>>>>>     """
>>>>>>     Write message to SQS async from thread pool. If twisted cancels the
>>>>>>     thread, instead write synchronously.
>>>>>>
>>>>>>     def _retrySynchronously(error):
>>>>>>         if error.type != CancelledError:
>>>>>>             return error
>>>>>>
>>>>>>         log.warn("Async SQS write cancelled. Calling synchronously.")
>>>>>>         return defer.succeed(self._writeSyncFallback(payload))
>>>>>>
>>>>>>     deferredCall = self._deferToThread(self.sqs.write, payload)
>>>>>>     deferredCall.addErrback(_retrySynchronously)
>>>>>>     return deferredCall
>>>>>>
>>>>>> def _writeSyncFallback(self, payload):
>>>>>>     return self.sqs.write(payload)
>>>>>>
>>>>>> The _deferToThread call just uses my own thread pool with 2 threads,
>>>>>> but is otherwise stock.
>>>>>>
>>>>>> Is there a level of logging I'm missing or some other thing that
>>>>>> would tell me why the thread is being canceled? The retry works great and
>>>>>> Klein does not return an error from the route.
>>>>>>
>>>>>> Thanks in advance.
>>>>>>
>>>>>>
>>>>> I think we'll need to see more code for this, specifically the caller
>>>>> of that `write` method, and its callers, etc. Note that the thread itself
>>>>> isn't being cancelled, the Deferred you get from _deferToThread is... so
>>>>> you'll most likely need to find out what code interacts with that object to
>>>>> progress in isolating this.
>>>>>
>>>>> In my quick skim of the deferToThread and ThreadPool source, I can't
>>>>> find any explicit cancellations. While that certainly doesn't rule it out,
>>>>> it does make me think you're more likely to find the issue by inspecting
>>>>> the callers involved.
>>>>> _______________________________________________
>>>>> Twisted-Python mailing list
>>>>> Twisted-Python at twistedmatrix.com
>>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210125/1c4bdbc0/attachment-0001.htm>

From robert.difalco at gmail.com  Tue Jan 26 14:52:47 2021
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Tue, 26 Jan 2021 13:52:47 -0800
Subject: [Twisted-Python] Thread Cancelled
In-Reply-To: <CAEeXt4MNwDQCicqSBs-uLNCXMJjNxAd9Q0mCprFiz97NTK_Jzw@mail.gmail.com>
References: <CAAXGW-z5F+1a_u7gvBG1JSzpvLmjOapHa9AeZB4uJt8JtamckQ@mail.gmail.com>
 <CAMTx_3Az-pUea7fC=FyAhrBkN657iok_ab+yftPVn40c730JOw@mail.gmail.com>
 <CAAXGW-zjmz-nqf4kidYRUYjfvWJuJZKo=HMCpcRYoeG=AoRTmA@mail.gmail.com>
 <F9F0647F-97BC-4A73-B4D2-BDDD20D680BE@twistedmatrix.com>
 <CAAXGW-zJqd6Trx5G5E8atyXJtDTQvpyCsKGEgcyhUz2mBmmxSQ@mail.gmail.com>
 <363689E8-9EE5-4CBB-B478-6455F6E7A49F@twistedmatrix.com>
 <CAAXGW-ywpGhi=vjN8=szChN785GsQsXfbv=DVQRd5pjje3qLAw@mail.gmail.com>
 <CAAXGW-xqv-icj5UE7UhmSdaLKKiyPnVomBNpCp4zF3tRFiGJ4g@mail.gmail.com>
 <CAEeXt4MNwDQCicqSBs-uLNCXMJjNxAd9Q0mCprFiz97NTK_Jzw@mail.gmail.com>
Message-ID: <CAAXGW-x-ZB6Sh8zt=UzwahrtwXRDThsVhiN1T=vP5GD8EASbCw@mail.gmail.com>

This is great Jean-Paul, see so much for me to learn. I didn't realize that
you could break the propagation of Cancel errors like that. thanks!

On Mon, Jan 25, 2021 at 3:51 PM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Mon, Jan 25, 2021 at 5:14 PM Robert DiFalco <robert.difalco at gmail.com>
> wrote:
>
>> So I have a simple question from all this. Is there a twisted idiom I can
>> use so that deferred returned from a Klein route are not canceled if the
>> client resets the connection? It's fine if it's before I've gotten the
>> request body, but once I've gotten the request body I want all deferreds to
>> succeed. I only wan't the streaming of the final result to fail.
>>
>
> As far as I know, you can't make Klein not cancel that Deferred.  However,
> you can return a different Deferred.
>
> def ignore_cancellation(d):
>
>     ignore_d = Deferred()
>
>     d.chainDeferred(ignore_d)
>
>     return ignore_d
>
>
> Wherever you're returning a Deferred to Klein now, if you return
> ignore_cancellation(that_deferred) instead then either:
>
>    - it will run to completion and deliver its result to ignore_d which
>    will deliver it to Klein; or
>    - Klein will cancel it and the cancellation will not propagate to the
>    original Deferred so that operation can complete (when it does, it will
>    deliver the result to the cancelled Deferred which will drop it on the
>    floor)
>
> The documentation for Deferred cancellation could be a little bit clearer
> on how cancellation works for Deferreds that are related in various ways,
> including this way.  I'm not sure how you would discover this behavior
> except for reading the implementation or doing experiments.  The way that
> might make sense to think about it, though, is that results only propagate
> in one direction down the chain - from d to ignore_d - they never flow
> the other way.  So anything that happens to ignore_d cannot affect d.
>
> Jean-Paul
>
>
>
>> On Sun, Jan 24, 2021 at 7:40 PM Robert DiFalco <robert.difalco at gmail.com>
>> wrote:
>>
>>> Well, I've dealt with this issue with other languages. Not sure how to
>>> deal with it in Klein/Twisted. This operation is idempotent so I suppose
>>> what I'd like to happen is have the whole chain of deferred's succeed but
>>> then just not be able to write the response to the socket -- but not
>>> interrupt the chain. Unfortunately, what I really need is my operations to
>>> be atomic -- introduce a two phase commit or some such. But that's too big
>>> of a job on this legacy code base for now. Right now I'd be content if I
>>> could save the database record and then send the SQS message to AWS and not
>>> have that SQS send interrupted if the client closed the socket.. Is there a
>>> simple way to achieve that? If I got the request body I'm good, I don't
>>> care if I can't write the response.
>>>
>>> One other thing that would be nice is to know why a deferred was
>>> canceled. If the client close a connection I might like to ignore the
>>> cancel, but I think what is happening is that Twisted is pretty smart. So
>>> it either knows I'm going to make a write to SQS using Boto that is
>>> inbound, so it is somehow able to cancel that operation -- perhaps more
>>> likely the client closed the connection and the connection canceled defers
>>> after I called deferToThread but before a thread was available to run on.
>>> Either way, I'd like them all to run, and just fail to write the final
>>> response from the end of the chain.
>>>
>>> Sorry, too many words.
>>>
>>>
>>>
>>>
>>> On Sun, Jan 24, 2021 at 3:22 PM Glyph <glyph at twistedmatrix.com> wrote:
>>>
>>>> If you're dealing with lots of clients on the public internet,
>>>> sometimes this is just gonna happen, for a variety of reasons; it's
>>>> normal.  We would welcome better error reporting for this scenario so it
>>>> doesn't require the kind of debugging you just did :-).
>>>>
>>>> -g
>>>>
>>>> On Jan 24, 2021, at 2:58 PM, Robert DiFalco <robert.difalco at gmail.com>
>>>> wrote:
>>>>
>>>> That makes sense, thank you. A timeout seems unlikely but maybe the
>>>> client is closing the connection due to a network issue. This is an
>>>> extremely rare occurrence.
>>>>
>>>> On Sun, Jan 24, 2021 at 2:41 PM Glyph <glyph at twistedmatrix.com> wrote:
>>>>
>>>>> While a socket is open and receiving data, recv() will either give you
>>>>> a non-zero number of bytes if bytes are ready, or an EWOULDBLOCK (AKA
>>>>> EAGAIN) if no bytes are ready.  A result of zero bytes (the empty string)
>>>>> means "end of file" - the other end has closed the socket.
>>>>>
>>>>> So what's happening here is your client is timing out or otherwise
>>>>> canceling its request by closing the socket, and this is the correct,
>>>>> intentional response to that scenario.
>>>>>
>>>>> -g
>>>>>
>>>>> On Jan 24, 2021, at 11:57 AM, Robert DiFalco <robert.difalco at gmail.com>
>>>>> wrote:
>>>>>
>>>>> You're absolutely right, I meant "cancel the deferred". I don't grok
>>>>> server sockets very well so maybe someone can help. But apparently, klein
>>>>> does a .doRead from our server socket (getting the request from the
>>>>> client?). This returns a "why" of "connection done" so that closes the
>>>>> connection before we have written our response to the client, and that
>>>>> cancels the deferred SQS write.
>>>>>
>>>>>
>>>>> https://github.com/racker/python-twisted-core/blob/master/twisted/internet/selectreactor.py#L148-L155
>>>>>
>>>>> The method above is "doRead". Which calls this:
>>>>>
>>>>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L239
>>>>>
>>>>> I guess if If socket.rcv() returns an empty string it simply closes
>>>>> the connection.
>>>>>
>>>>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/tcp.py#L249-L250
>>>>>
>>>>> Is that normal? I mean I guess it must be but then why is the read
>>>>> getting an empty string and closing the connection? I can't really account
>>>>> for it? Some kind of back pressure due to load?
>>>>>
>>>>> Thanks for any thoughts.
>>>>>
>>>>>
>>>>>
>>>>> On Sun, Jan 24, 2021 at 11:32 AM Colin Dunklau <
>>>>> colin.dunklau at gmail.com> wrote:
>>>>>
>>>>>>
>>>>>>
>>>>>> On Sun, Jan 24, 2021 at 11:45 AM Robert DiFalco <
>>>>>> robert.difalco at gmail.com> wrote:
>>>>>>
>>>>>>> Hi, I apologize this question is a little vague. I'm looking for
>>>>>>> pointers. I have a klein route that makes an underlying deferToThread call
>>>>>>> with a simple single thread (an IO based sync call I can't change, a boto3
>>>>>>> sqs write). The thread pool is simple, just a couple of threads, nothing
>>>>>>> fancy.
>>>>>>>
>>>>>>> VERY rarely it appears that Klein cancels the thread. What
>>>>>>> techniques can I use to figure out why my thread is being Canceled? There's
>>>>>>> nothing in the failure to tell me "who, why, or where" it was canceled.
>>>>>>> Also, I cannot get this down to a reproducible case, but here's the boto3
>>>>>>> sqs wrapper, this fall back works fine, but it's a band-aide for an error I
>>>>>>> can't track down.:
>>>>>>>
>>>>>>> def write(self, payload):
>>>>>>>     """
>>>>>>>     Write message to SQS async from thread pool. If twisted cancels the
>>>>>>>     thread, instead write synchronously.
>>>>>>>
>>>>>>>     def _retrySynchronously(error):
>>>>>>>         if error.type != CancelledError:
>>>>>>>             return error
>>>>>>>
>>>>>>>         log.warn("Async SQS write cancelled. Calling synchronously.")
>>>>>>>         return defer.succeed(self._writeSyncFallback(payload))
>>>>>>>
>>>>>>>     deferredCall = self._deferToThread(self.sqs.write, payload)
>>>>>>>     deferredCall.addErrback(_retrySynchronously)
>>>>>>>     return deferredCall
>>>>>>>
>>>>>>> def _writeSyncFallback(self, payload):
>>>>>>>     return self.sqs.write(payload)
>>>>>>>
>>>>>>> The _deferToThread call just uses my own thread pool with 2 threads,
>>>>>>> but is otherwise stock.
>>>>>>>
>>>>>>> Is there a level of logging I'm missing or some other thing that
>>>>>>> would tell me why the thread is being canceled? The retry works great and
>>>>>>> Klein does not return an error from the route.
>>>>>>>
>>>>>>> Thanks in advance.
>>>>>>>
>>>>>>>
>>>>>> I think we'll need to see more code for this, specifically the caller
>>>>>> of that `write` method, and its callers, etc. Note that the thread itself
>>>>>> isn't being cancelled, the Deferred you get from _deferToThread is... so
>>>>>> you'll most likely need to find out what code interacts with that object to
>>>>>> progress in isolating this.
>>>>>>
>>>>>> In my quick skim of the deferToThread and ThreadPool source, I can't
>>>>>> find any explicit cancellations. While that certainly doesn't rule it out,
>>>>>> it does make me think you're more likely to find the issue by inspecting
>>>>>> the callers involved.
>>>>>> _______________________________________________
>>>>>> Twisted-Python mailing list
>>>>>> Twisted-Python at twistedmatrix.com
>>>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>>>
>>>>> _______________________________________________
>>>>> Twisted-Python mailing list
>>>>> Twisted-Python at twistedmatrix.com
>>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> Twisted-Python mailing list
>>>>> Twisted-Python at twistedmatrix.com
>>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>
>>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210126/3673d251/attachment-0001.htm>

From trac at twistedmatrix.com  Sun Jan 31 00:05:17 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 31 Jan 2021 07:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1612076717.21.2088153588799944798@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210131/a8ff8444/attachment.htm>

