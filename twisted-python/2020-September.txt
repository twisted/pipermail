From johnaherne at rocs.co.uk  Tue Sep  1 03:08:23 2020
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 1 Sep 2020 10:08:23 +0100
Subject: [Twisted-Python] Block TLS 1.0 and TLS 1.1 support on windows
In-Reply-To: <C779BA3D-E06D-400F-BFDD-8DA3B5915798@twistedmatrix.com>
References: <CAKmUHjahRQ6TeG-42adF+RBpGSjMEQ=2SrzRo2-=d791nrBQEw@mail.gmail.com>
 <A00C9A04-35D7-40FD-82F6-AB729639D100@me.com>
 <CAKmUHja9Fb3RctE1Wkaarh8ZsZZLKP+MGi24PUPSeo7-D9LiaQ@mail.gmail.com>
 <7E3D8992-FB27-493E-802E-AC47725B3C56@me.com>
 <CAKmUHjaSzx2V_qMOpFZjZY2VTSUo2kRkdQ4VjL6EbdzcL=Q0vw@mail.gmail.com>
 <C779BA3D-E06D-400F-BFDD-8DA3B5915798@twistedmatrix.com>
Message-ID: <CAKmUHjaH=AycTttswdYMXTvQhuErxLyV+2HB9b7NUMgJOe5jsg@mail.gmail.com>

Yes. I could see _parseSSL wasn't checking for all the options. So I
decided to drop the endpoints for now.

Thanks

John


On Tue, Sep 1, 2020 at 5:48 AM Glyph <glyph at twistedmatrix.com> wrote:

> Super glad you got this working!
>
> However, what L. Daniel Burr suggested is correct - whether there's an
> existing ticket or not, the string endpoint should support all of these
> features.
>
> (However, using pem is fine, too.)
>
> -g
>
> On Aug 31, 2020, at 1:16 PM, John Aherne <johnaherne at rocs.co.uk> wrote:
>
> Thanks for looking all this up.
>
> I'd already decided to drop the endpoint server from string.
>
> So I'm using Hynek Schlaweck PEM package to build the certificate options.
>
> That seems to be working. Anyway I'm getting an A from Qualys at the
> moment having reset the _defaultMinimumTLSVersion back to its default of
> tlsv1_0 and passing the raiseMinimumTo as TLSVersion.TLS1_2
>
> Thanks for the pointers.
>
> John
>
>
>
> On Mon, Aug 31, 2020 at 7:26 PM L. Daniel Burr <ldanielburr at me.com> wrote:
>
>> Hi John,
>>
>> I don't think you can accomplish it via a change to the description
>> string, because serverFromString relies on the existing _parseSSL function
>> is only passing the deprecated ssl method argument to CertificateOptions.
>>
>> I haven't tried this myself, but I think the solution is to provide your
>> own plugin, implementing IPlugin and IStreamServerEndpointStringParser,
>> e.g. "MyTLSParser" and use your own description string, e.g.,
>> "tls:443:raiseMinimumTo=...".
>>
>> Or maybe there's a ticket somewhere about updating the existing ssl
>> description and parser to handle the new CertificateOptions arguments.
>> That might be the right thing to implement.
>>
>> Hope this helps,
>>
>> L. Daniel Burr
>>
>> On Aug 31, 2020, at 12:02 PM, John Aherne <johnaherne at rocs.co.uk> wrote:
>>
>> Thanks. That was quick.
>>
>> Just wondering how I can add that to my endpoint_description create
>> serverfromstring.
>>
>> Or will I have to drop that.
>>
>> Let me  take a look.
>>
>> Cheers
>>
>> John
>>
>> On Mon, Aug 31, 2020 at 4:58 PM L. Daniel Burr <ldanielburr at me.com>
>> wrote:
>>
>>> Hi John,
>>>
>>> I think you want
>>> https://twistedmatrix.com/documents/20.3.0/api/twisted.internet.ssl.CertificateOptions.html,
>>> specifically, you want to pass the "raiseMinimumTo" parameter,
>>>
>>> Hope this helps,
>>>
>>> L. Daniel Burr
>>>
>>> On Aug 31, 2020, at 10:47 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
>>>
>>>  I'm using twisted 20.3 and python3.6.8 and Windows 10
>>>
>>> I'm using endpoint_description with a tac file to start up a server.
>>>
>>> But I need to disable tls 1.0 and 1.1.
>>>
>>> I was hoping to find a parameter I could pass in to make the system only
>>> recognise 1.2 and 1.3. But could not find anything that would do that. I
>>> thought sslmethod would be what I wanted but that is limited to :
>>>
>>> Must be one of: "SSLv23_METHOD", "SSLv2_METHOD", "SSLv3_METHOD",
>>> "TLSv1_METHOD". If I choose TLSv1_METHOD, TLS1.0 and 1.1 are still enabled
>>> and QUALYS complains and downgrades the rating to B
>>> In the end I found _defaultMinimumTLSVersion in _sslverify.py.
>>>
>>> I set this to TLSVersion.TLSv1_2 and that seemed to do the trick.
>>>
>>> But I don't think I should be doing that. I think I've missed some
>>> obvious place where I can pass in a value to change this.
>>>
>>> Anyone  know where I should be looking.
>>>
>>> Thanks for any info
>>>
>>> --
>>> *John Aherne*
>>>
>>>
>>>
>>>
>>> *www.rocs.co.uk <http://www.rocs.co.uk/>*
>>> 020 7223 7567
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>> --
>> *John Aherne*
>>
>>
>>
>>
>> *www.rocs.co.uk <http://www.rocs.co.uk/>*
>> 020 7223 7567
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> --
> *John Aherne*
>
>
>
>
> *www.rocs.co.uk <http://www.rocs.co.uk/>*
> 020 7223 7567
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200901/8c96b758/attachment-0001.htm>

From borepstein at gmail.com  Sat Sep  5 11:24:57 2020
From: borepstein at gmail.com (Boris Epstein)
Date: Sat, 5 Sep 2020 13:24:57 -0400
Subject: [Twisted-Python] code contribution/participation policy
In-Reply-To: <CADeF1XGAWAgrf43G4_8NfvN97mHWcHjWNcT7gGCMLfCC2HrsTQ@mail.gmail.com>
References: <CADeF1XGfzb8WYUkCN9pJ20_7fkf=jDehyJkxO92oSO6OFQCrJw@mail.gmail.com>
 <CAMTx_3BEGy=d8PZ_euzaT1YJgm01Dzgxr1pQAxvFnDSNym4TbQ@mail.gmail.com>
 <92EC7A79-EB92-4517-B0DE-3F3C8DD3237C@twistedmatrix.com>
 <CADeF1XGAWAgrf43G4_8NfvN97mHWcHjWNcT7gGCMLfCC2HrsTQ@mail.gmail.com>
Message-ID: <CADeF1XGqUFmZcAgnpHT=0Tc54uM8Lbqj_JhUHEJzR8hU23WBNQ@mail.gmail.com>

Hello all,

Thanks again for your help.

OK, so I think I have taken the first step:

https://twistedmatrix.com/trac/ticket/9951

Now how do I proceed? What is the convention for Git brach names, etc?

Cheers,

Boris.


On Sat, Aug 29, 2020 at 9:39 AM Boris Epstein <borepstein at gmail.com> wrote:

> Hi Glyph,
>
> Thanks.
>
> So I presume I should just follow the procedures delineated below, right?
>
> It makes sense - you identify an issue, document it and then work on it.
>
> Regards,
>
> Boris.
>
>
> On Sat, Aug 22, 2020 at 1:54 AM Glyph <glyph at twistedmatrix.com> wrote:
>
>> Welcome, Boris!
>>
>> If you're looking for stuff to work on, please feel free to discuss on
>> this list.  We *absolutely* could use more volunteers to maintain stuff,
>> particularly improving the documentation!
>>
>> -glyph
>>
>> On Aug 21, 2020, at 12:04 PM, Colin Dunklau <colin.dunklau at gmail.com>
>> wrote:
>>
>> Hi Boris,
>>
>> Probably the best starting point is
>> https://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#RequestsandContributing
>> and specifically
>> https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs and
>> https://twistedmatrix.com/trac/wiki/TwistedDevelopment
>>
>> There are a lot of little details in those documents, please read them
>> carefully... but overall, the process is (1) Find/make a ticket (on trac,
>> not github), (2) Make a github pull request, and (3) set the trac ticket up
>> to be reviewed.
>>
>> Happy hacking!
>>
>> Colin
>>
>> On Fri, Aug 21, 2020 at 7:36 PM Boris Epstein <borepstein at gmail.com>
>> wrote:
>>
>>> Hi all,
>>>
>>> I have started working with Twisted and found it to be a very powerful
>>> package. That said, some modules are not documented very thoroughly (big
>>> surprise in the world of software, right?) and I also found some
>>> questionable code, too.
>>>
>>> If I were to contribute fixes/improvements, what is the submission
>>> procedure?
>>>
>>> Thanks.
>>>
>>> Boris.
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200905/398db4af/attachment.htm>

From rodrigc at crodrigues.org  Sat Sep  5 12:17:37 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 5 Sep 2020 11:17:37 -0700
Subject: [Twisted-Python] code contribution/participation policy
In-Reply-To: <CADeF1XGqUFmZcAgnpHT=0Tc54uM8Lbqj_JhUHEJzR8hU23WBNQ@mail.gmail.com>
References: <CADeF1XGfzb8WYUkCN9pJ20_7fkf=jDehyJkxO92oSO6OFQCrJw@mail.gmail.com>
 <CAMTx_3BEGy=d8PZ_euzaT1YJgm01Dzgxr1pQAxvFnDSNym4TbQ@mail.gmail.com>
 <92EC7A79-EB92-4517-B0DE-3F3C8DD3237C@twistedmatrix.com>
 <CADeF1XGAWAgrf43G4_8NfvN97mHWcHjWNcT7gGCMLfCC2HrsTQ@mail.gmail.com>
 <CADeF1XGqUFmZcAgnpHT=0Tc54uM8Lbqj_JhUHEJzR8hU23WBNQ@mail.gmail.com>
Message-ID: <CAG=rPVdFb5HuS=w-1rNya7wCiqcJ=JNLwQ80JzpJa1Y9v-6_QA@mail.gmail.com>

On Sat, Sep 5, 2020 at 10:25 AM Boris Epstein <borepstein at gmail.com> wrote:

>
> Now how do I proceed? What is the convention for Git brach names, etc?
>
>
This document should give you the steps to create a Git branch and proceed
with a PR:

https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200905/4fe5692f/attachment.htm>

From trac at twistedmatrix.com  Sun Sep  6 00:05:17 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 06 Sep 2020 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1599372317.95.3791935709923699630@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200906/71eb6b77/attachment.htm>

From ian at haywood.id.au  Tue Sep  8 05:18:06 2020
From: ian at haywood.id.au (Ian Haywood)
Date: Tue, 8 Sep 2020 21:18:06 +1000
Subject: [Twisted-Python] smb component progress
Message-ID: <39de2dee-7d52-2530-9be9-59e8e080b6d3@haywood.id.au>

I have continued to work slowly on this project. Named pipes are 
supported, the samba client can connect and list available shares.

i am currently working on a vfs layer using deferToThread to provide 
asynchronous file access

  I have tried to keep the code divided into logically separate chunks . 
my first chunk received comments from glyph 2 months ago but has 
remained in the review queue since.

https://twistedmatrix.com/trac/ticket/9818

is there anyone available to review this code to progress it ?

Ian


From chris at cmsconstruct.com  Fri Sep 11 11:34:30 2020
From: chris at cmsconstruct.com (chris at cmsconstruct.com)
Date: Fri, 11 Sep 2020 12:34:30 -0500
Subject: [Twisted-Python] doWrite on twisted.internet.tcp.Port
Message-ID: <035001d68861$cf2c4ac0$6d84e040$@cmsconstruct.com>

Hey guys,

 

Last year I hit a condition discussed in this ticket:
https://twistedmatrix.com/trac/ticket/4759 for doWrite called on a
twisted.internet.tcp.Port.  

 

I ignored it at the time since it was just on Linux, and my main platform
was Windows.  Now I'm coming back to it.  I'll add context on the problem
below, but first I want to ask a high-level, design-type question with
multiprocessing and Twisted:

 

Referencing Jean-Paul's comment at the end of ticket 4759, I read you
shouldn't fork a process (multiprocessing module) that already has a Twisted
reactor.  Understood.  But what about a parent process (not doing anything
Twisted) forking child processes, where each child process starts their own
Twisted reactor?  Is that intended to work from the Twisted perspective?

 

 

Context:

I only hit this problem on Linux, not Windows.

 

The software project (github.com/opencontentplatform/ocp) has been a lot of
fun, especially with walking the tight rope in using multi-processing,
multi-threading, and Twisted reactors.  The main controller process kicks
off about 10 child processes, each doing different types of work.  In
general though, the child processes individually start a Twisted reactor,
connect to Kafka, connect to a database, use a shared REST API, and some
listen for connecting clients to accomplish work.

 

I test on Linux about once a year, so too many changes to rollback and
figure out that way.  It was working on Linux 2 years ago, but last year's
testing and current testing, receive the doWrite error.  It continues
running fine on Windows.  I've gone back about 2 years of versions with
Python3, Twisted, and dependent libs. on both Windows and Linux.  Every
version change yields the same result - continues to work on Windows and
continues to hit the error on Linux.  So something I added has caused Linux
to throw that error.  

 

I'm not explicitly sharing much between the main process and the sub
processes.  They are spun up with (1) a shared multiprocessing.Event() - to
have the main process shut the children down, (2) their own unique
multiprocessing.Event() - to have the child processes notify back to the
parent, and (3) a deep copy of a dictionary (containing a bunch of settings
that remain constant).  The main process uses twisted.logger, but for
testing I strip that out to remove any twisted imports in the main process.
So I'm not importing anything Twisted in the main process, and I don't
believe I'm explicitly sharing something I shouldn't.  Seems like something
is implicitly being exposed/shared across Linux child processes, that aren't
on Windows.

 

The tracebacks come through on Linux (sometimes randomly), on the console of
the parent controller process.  No need to paste here, since it's the same
as the ticket shows.  I can't reliably reproduce the problem, but I know if
I stop/start client connections
(ServerFactory/twisted.internet.interfaces.IReactorTCP and
twisted.internet.protocol.ReconnectingClientFactory) then it will eventually
happen.  I need to devote time at whittling down the code and attempting to
create a reliable test case. if even possible.

 

The error is slightly different when running HTTP vs HTTPS, but the story is
the same.  It cripples whatever child process that hits it, from doing much
of anything thereafter.  Not much luck with troubleshooting.  The tracebacks
do not include a calling function from my code, to tell me where to start.
And it happens across different child process types, so not the same one
each time.  When I throw debuggers on the child processes, the problem seems
to mask itself.  Well, at least I didn't hit the problem over the last 3
days using pudb and stepping through code at breakpoints.

 

I'm absolutely open to suggestions for troubleshooting, but first wanted to
take a HUGE step back and ask a design question regarding Twisted and
multiprocessing.

 

Thanks!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200911/2f9e1396/attachment.htm>

From exarkun at twistedmatrix.com  Fri Sep 11 12:28:13 2020
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 11 Sep 2020 14:28:13 -0400
Subject: [Twisted-Python] doWrite on twisted.internet.tcp.Port
In-Reply-To: <035001d68861$cf2c4ac0$6d84e040$@cmsconstruct.com>
References: <035001d68861$cf2c4ac0$6d84e040$@cmsconstruct.com>
Message-ID: <CAEeXt4MoV8voL_faqNif7Wuduyn3gsx=jz7NU6pzmO-85eH7Eg@mail.gmail.com>

On Fri, Sep 11, 2020 at 1:34 PM <chris at cmsconstruct.com> wrote:

> Hey guys,
>
>
>
> Last year I hit a condition discussed in this ticket:
> https://twistedmatrix.com/trac/ticket/4759 for doWrite called on a
> twisted.internet.tcp.Port.
>
>
>
> I ignored it at the time since it was just on Linux, and my main platform
> was Windows.  Now I’m coming back to it.  I’ll add context on the problem
> below, but first I want to ask a high-level, design-type question with
> multiprocessing and Twisted:
>
>
>
> Referencing Jean-Paul’s comment at the end of ticket 4759, I read you
> shouldn’t fork a process (multiprocessing module) that already has a
> Twisted reactor.  Understood.  But what about a parent process (not doing
> anything Twisted) forking child processes, where each child process starts
> their own Twisted reactor?  Is that intended to work from the Twisted
> perspective?
>

To answer the asked question, I don't think there is rigorous (or even
casual) testing of very much of Twisted in the context of "some Twisted
code has been loaded into memory and then the process forked".  So while it
seems like a reasonable thing, I wouldn't say there's currently much effort
being put towards making it a *supported* usage of Twisted.  Of course this
can change at almost any moment if someone decides to commit the effort.

To dig a bit further into the specific problem, even if you only *import* the
reactor in the parent process and then fork a child and try to start the
reactor in the child, I strongly suspect epollreactor will break.  This is
because the epoll object is created by reactor instantiation (as opposed to
being delayed until the reactor is run).  epoll objects have a lot of weird
behavior.  See the *Questions and Answers* section of the epoll(7) man page.

I don't know if this is the cause of your particular expression of these
symptoms (it certainly doesn't apply to the *original* bug report which is
on FreeBSD where there is no epoll) but it's at least *a possible* cause.

This could probably be fixed in Twisted by only creating the epoll object
when run is called.  There's nothing particularly difficult about that
change but it does involve touching a lot of the book-keeping logic since
that all assumes it can register file descriptors before the reactor is
started (think reactor.listenTCP(...); reactor.run()).

I'm not sure but it may also be the case that only delaying creation of the
*waker* until the reactor starts would also fix this.  This is because as
long as the epoll object remains empty a lot of the weird behavior is
avoided and the waker is probably the only thing that actually gets added
to it if you're just *importing* the reactor but not *running* it before
forking.

Alternatively, your application *should* be able to fix it by studiously
avoiding the import of twisted.internet.reactor (directly or transitively,
of course).  You could add some kind of assertion about the state of
sys.modules immediately before your forking code to develop some confidence
you've managed this.

And if this is really an epoll problem then switching to poll or select
reactor would also presumably get rid of the issue.

Jean-Paul


>
>
>
> Context:
>
> I only hit this problem on Linux, not Windows.
>
>
>
> The software project (github.com/opencontentplatform/ocp) has been a lot
> of fun, especially with walking the tight rope in using multi-processing,
> multi-threading, and Twisted reactors.  The main controller process kicks
> off about 10 child processes, each doing different types of work.  In
> general though, the child processes individually start a Twisted reactor,
> connect to Kafka, connect to a database, use a shared REST API, and some
> listen for connecting clients to accomplish work.
>
>
>
> I test on Linux about once a year, so too many changes to rollback and
> figure out that way.  It was working on Linux 2 years ago, but last year’s
> testing and current testing, receive the doWrite error.  It continues
> running fine on Windows.  I’ve gone back about 2 years of versions with
> Python3, Twisted, and dependent libs… on both Windows and Linux.  Every
> version change yields the same result - continues to work on Windows and
> continues to hit the error on Linux.  So something I added has caused Linux
> to throw that error.
>
>
>
> I’m not explicitly sharing much between the main process and the sub
> processes.  They are spun up with (1) a shared multiprocessing.Event() - to
> have the main process shut the children down, (2) their own unique
> multiprocessing.Event() - to have the child processes notify back to the
> parent, and (3) a deep copy of a dictionary (containing a bunch of settings
> that remain constant).  The main process uses twisted.logger, but for
> testing I strip that out to remove any twisted imports in the main
> process.  So I’m not importing anything Twisted in the main process, and I
> don’t believe I’m explicitly sharing something I shouldn’t.  Seems like
> something is implicitly being exposed/shared across Linux child processes,
> that aren’t on Windows.
>
>
>
> The tracebacks come through on Linux (sometimes randomly), on the console
> of the parent controller process.  No need to paste here, since it’s the
> same as the ticket shows.  I can’t reliably reproduce the problem, but I
> know if I stop/start client connections
> (ServerFactory/twisted.internet.interfaces.IReactorTCP and
> twisted.internet.protocol.ReconnectingClientFactory) then it will
> eventually happen.  I need to devote time at whittling down the code and
> attempting to create a reliable test case… if even possible.
>
>
>
> The error is slightly different when running HTTP vs HTTPS, but the story
> is the same.  It cripples whatever child process that hits it, from doing
> much of anything thereafter.  Not much luck with troubleshooting.  The
> tracebacks do not include a calling function from my code, to tell me where
> to start. And it happens across different child process types, so not the
> same one each time.  When I throw debuggers on the child processes, the
> problem seems to mask itself.  Well, at least I didn’t hit the problem over
> the last 3 days using pudb and stepping through code at breakpoints.
>
>
>
> I’m absolutely open to suggestions for troubleshooting, but first wanted
> to take a HUGE step back and ask a design question regarding Twisted and
> multiprocessing.
>
>
>
> Thanks!
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200911/e69a2ccc/attachment.htm>

From twm at freecog.net  Sat Sep 12 01:05:53 2020
From: twm at freecog.net (Tom Most)
Date: Sat, 12 Sep 2020 00:05:53 -0700
Subject: [Twisted-Python] 
 =?utf-8?q?Pycodestyle_disabled_in_trunk=2C_time?=
 =?utf-8?q?_to_enable_black=3F?=
In-Reply-To: <CAG=rPVcv3xTpYvJmdqepqWrQgrqgwrzo-PqWDZdNp3shhoPkUg@mail.gmail.com>
References: <CAG=rPVcv3xTpYvJmdqepqWrQgrqgwrzo-PqWDZdNp3shhoPkUg@mail.gmail.com>
Message-ID: <9d3bd752-aa6b-4856-996a-a4195799c009@www.fastmail.com>

On Mon, Aug 31, 2020, at 10:06 AM, Craig Rodrigues wrote:
> In this PR:
> https://github.com/twisted/twisted/pull/1365
> 
> pycodestyle was disabled in trunk in order to make it easier to merge changes
> and not have pycodestyle error out, due to the code not meeting existing Twisted style guidelines.
> So this means that the old pycodestyle is not enforced in trunk.
> 
> In this PR:
> https://github.com/twisted/twisted/pull/1356
> 
> a `.git-blame-ignore-revs <https://github.com/twisted/twisted/pull/1356/commits/294aaf3eeaba41d64a80644bd3355a9b153047e8>` file was added to the tree.  I guess in future,
> if the entire tree is reformatted, then we can add that git SHA for the PR which reformats
> the tree, so that that revision will be ignored during a `git blame`.
> 
> There is this pending (over 1 year) PR to add black to CI:
> 
> https://github.com/twisted/twisted/pull/1134
> 
> There are some comments in there related to documentation changes.
> Can the non-documentation changes be pulled out of PR 1134 and merged to trunk now?

I created a PR without them here: https://github.com/twisted/twisted/pull/1380

> I guess whenever black is merged to trunk, then a follow-up PR to update `.git-blame-ignore-devs` would be required?

I think merging that PR should involve immediately running tox -e black-reformat, isort, committing the result, and adding that commit to .git-blame-ignore-revs. Those two commits should be pushed directly to trunk.

They can then proceed to push formatting commits to the open PR branches where that is possible. I went through all of these and dealt with the conflicts a while back.

I'd like to get this in this weekend.

---Tom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200912/465628cd/attachment.htm>

From chris at cmsconstruct.com  Sat Sep 12 11:06:30 2020
From: chris at cmsconstruct.com (chris at cmsconstruct.com)
Date: Sat, 12 Sep 2020 12:06:30 -0500
Subject: [Twisted-Python] doWrite on twisted.internet.tcp.Port
In-Reply-To: <CAEeXt4MoV8voL_faqNif7Wuduyn3gsx=jz7NU6pzmO-85eH7Eg@mail.gmail.com>
References: <035001d68861$cf2c4ac0$6d84e040$@cmsconstruct.com>
 <CAEeXt4MoV8voL_faqNif7Wuduyn3gsx=jz7NU6pzmO-85eH7Eg@mail.gmail.com>
Message-ID: <03ed01d68927$1052a5b0$30f7f110$@cmsconstruct.com>

Hi Jean-Paul,

 

Thank you very much for the detailed answer.  And my appologies for not providing OS details; I’ve tested on CentOS and RedHat EL variants, not FreeBSD as the ticket discussed.  Looks like Red Hat (EL 7.6) is using epoll reactor, and the Windows side is using the select reactor.

 

Thanks for the direction on checking out sys.modules.  To avoid the reactor being loaded in the parent process, I can presumably move twisted imports within the multiprocessing child modules (from top, down into the run() functions).  I will see how far I need to go (e.g. if I can continue using Twisted’s JSON logging or if absolutely everything should be isolated until after child process startup).  But knowing I need to head that direction for epoll or other potential reactor conflicts - is very helpful.

 

Reminds me of the GI Joe cartoon in the early 1980’s that would end with, “knowing is half the battle.”

 

-Chris

 

 

From: Twisted-Python <twisted-python-bounces at twistedmatrix.com> On Behalf Of Jean-Paul Calderone
Sent: Friday, September 11, 2020 1:28 PM
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] doWrite on twisted.internet.tcp.Port

 

On Fri, Sep 11, 2020 at 1:34 PM <chris at cmsconstruct.com <mailto:chris at cmsconstruct.com> > wrote:

Hey guys,

 

Last year I hit a condition discussed in this ticket: https://twistedmatrix.com/trac/ticket/4759 for doWrite called on a twisted.internet.tcp.Port.  

 

I ignored it at the time since it was just on Linux, and my main platform was Windows.  Now I’m coming back to it.  I’ll add context on the problem below, but first I want to ask a high-level, design-type question with multiprocessing and Twisted:

 

Referencing Jean-Paul’s comment at the end of ticket 4759, I read you shouldn’t fork a process (multiprocessing module) that already has a Twisted reactor.  Understood.  But what about a parent process (not doing anything Twisted) forking child processes, where each child process starts their own Twisted reactor?  Is that intended to work from the Twisted perspective?

 

To answer the asked question, I don't think there is rigorous (or even casual) testing of very much of Twisted in the context of "some Twisted code has been loaded into memory and then the process forked".  So while it seems like a reasonable thing, I wouldn't say there's currently much effort being put towards making it a supported usage of Twisted.  Of course this can change at almost any moment if someone decides to commit the effort.

 

To dig a bit further into the specific problem, even if you only import the reactor in the parent process and then fork a child and try to start the reactor in the child, I strongly suspect epollreactor will break.  This is because the epoll object is created by reactor instantiation (as opposed to being delayed until the reactor is run).  epoll objects have a lot of weird behavior.  See the Questions and Answers section of the epoll(7) man page.

 

I don't know if this is the cause of your particular expression of these symptoms (it certainly doesn't apply to the original bug report which is on FreeBSD where there is no epoll) but it's at least a possible cause.

 

This could probably be fixed in Twisted by only creating the epoll object when run is called.  There's nothing particularly difficult about that change but it does involve touching a lot of the book-keeping logic since that all assumes it can register file descriptors before the reactor is started (think reactor.listenTCP(...); reactor.run()).

 

I'm not sure but it may also be the case that only delaying creation of the waker until the reactor starts would also fix this.  This is because as long as the epoll object remains empty a lot of the weird behavior is avoided and the waker is probably the only thing that actually gets added to it if you're just importing the reactor but not running it before forking.

 

Alternatively, your application should be able to fix it by studiously avoiding the import of twisted.internet.reactor (directly or transitively, of course).  You could add some kind of assertion about the state of sys.modules immediately before your forking code to develop some confidence you've managed this.

 

And if this is really an epoll problem then switching to poll or select reactor would also presumably get rid of the issue.

 

Jean-Paul

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200912/92730eba/attachment-0001.htm>

From trac at twistedmatrix.com  Sun Sep 13 00:05:16 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 13 Sep 2020 06:05:16 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1599977116.17.2597946876310959065@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200913/402f17b1/attachment.htm>

From twm at freecog.net  Mon Sep 14 00:45:43 2020
From: twm at freecog.net (Tom Most)
Date: Sun, 13 Sep 2020 23:45:43 -0700
Subject: [Twisted-Python] Black enabled in trunk
Message-ID: <01b03380-d8fe-4c0c-842b-8719b4ce4791@www.fastmail.com>

Hi all,

Craig and I have been working to land a switch to The *Black* Coding Style <https://black.readthedocs.io/en/stable/the_black_code_style.html>. It's in! The tree has been reformatted <https://github.com/twisted/twisted/commit/bc96c774be6e307e8e3e4d39780d37b045d0973a>. Some notable changes:

* 3-2-1 blank lines are replaced by PEP 8 style 2-1-1.
* String syntax uses "double quotes".

Run this command to exclude the formatting from git blame <https://github.com/twisted/twisted/blob/trunk/.git-blame-ignore-revs>:

    git config blame.ignoreRevsFile .git-blame-ignore-revs

There are two new Tox testenvs. To check style:

    tox -e black

To adjust the formatting:

    tox -e black-reformat

The formatting is checked by a new GitHub Actions lint built.

There is some follow-up work planned:

* Many PRs have conflicts (more on this below).
* Various wiki pages need updates. I've done a few, but there are probably more.
* The coding standard should be updated <https://twistedmatrix.com/trac/ticket/9957#ticket>.
* The PR template needs an update <https://twistedmatrix.com/trac/ticket/9956#ticket>.
* A few examples need reformatting <https://tm.tl/#9952> (they weren't formatted because they fail to lint).

Inevitably, changes like this cause conflicts. For small PRs it's easiest to merge forward and then run tox -e black-reformat. For larger ones it can help to apply formatting before merge. To do this:

* Run black on the files your branch changes (be sure to use Black 20.8b1, not an older version)
* Commit the result, like `git commit -am "Fade to black"`
* Add that commit to .git-blame-ignore-revs to avoid polluting git blame.
* Merge forward. You can ignore formatting while performing the merge.
* Then run `tox -e black-reformat` to ensure you are in sync. Commit any changes it generates.

A big thanks to Hawkowl for kicking this all off and Craig for quick review turnaround. May we all be mildly displeased with the formatting, yet never have to review it again!

---Tom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200913/39f550a0/attachment.htm>

From borepstein at gmail.com  Mon Sep 14 11:11:38 2020
From: borepstein at gmail.com (Boris Epstein)
Date: Mon, 14 Sep 2020 13:11:38 -0400
Subject: [Twisted-Python] code contribution/participation policy
In-Reply-To: <CAG=rPVdFb5HuS=w-1rNya7wCiqcJ=JNLwQ80JzpJa1Y9v-6_QA@mail.gmail.com>
References: <CADeF1XGfzb8WYUkCN9pJ20_7fkf=jDehyJkxO92oSO6OFQCrJw@mail.gmail.com>
 <CAMTx_3BEGy=d8PZ_euzaT1YJgm01Dzgxr1pQAxvFnDSNym4TbQ@mail.gmail.com>
 <92EC7A79-EB92-4517-B0DE-3F3C8DD3237C@twistedmatrix.com>
 <CADeF1XGAWAgrf43G4_8NfvN97mHWcHjWNcT7gGCMLfCC2HrsTQ@mail.gmail.com>
 <CADeF1XGqUFmZcAgnpHT=0Tc54uM8Lbqj_JhUHEJzR8hU23WBNQ@mail.gmail.com>
 <CAG=rPVdFb5HuS=w-1rNya7wCiqcJ=JNLwQ80JzpJa1Y9v-6_QA@mail.gmail.com>
Message-ID: <CADeF1XGKhJRQGh=4ckfQaKXoiefDnRahggQP9afefHH7QghHUQ@mail.gmail.com>

Hello Craig,

Thanks. So basically you just work on the main Git repo, not on a clone -
and you do the pull directly, not submit a pull request?

Boris.

On Sat, Sep 5, 2020 at 2:19 PM Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

>
>
> On Sat, Sep 5, 2020 at 10:25 AM Boris Epstein <borepstein at gmail.com>
> wrote:
>
>>
>> Now how do I proceed? What is the convention for Git brach names, etc?
>>
>>
> This document should give you the steps to create a Git branch and proceed
> with a PR:
>
> https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch
>
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200914/e4f8aea6/attachment.htm>

From glyph at twistedmatrix.com  Mon Sep 14 11:43:55 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 14 Sep 2020 10:43:55 -0700
Subject: [Twisted-Python] Black enabled in trunk
In-Reply-To: <01b03380-d8fe-4c0c-842b-8719b4ce4791@www.fastmail.com>
References: <01b03380-d8fe-4c0c-842b-8719b4ce4791@www.fastmail.com>
Message-ID: <E3D6259B-68B2-495D-BA30-0F36050DFE40@twistedmatrix.com>



> On Sep 13, 2020, at 11:45 PM, Tom Most <twm at freecog.net> wrote:
> 
> Hi all,
> 
> Craig and I have been working to land a switch to The Black Coding Style <https://black.readthedocs.io/en/stable/the_black_code_style.html>. It's in! The tree has been reformatted <https://github.com/twisted/twisted/commit/bc96c774be6e307e8e3e4d39780d37b045d0973a>. Some notable changes:

Happy to hear we're making progress on this!  I'm the tiniest bit grumpy that this went forward without having the follow-up work already landed or ready-to-land simultaneously — my experience suggests that the fact that this is now complete means that neither you nor Craig will ever contribute to Twisted, or in fact ever answer your email, ever again — but if we can get it all landed promptly I will be over the moon :-).

> * 3-2-1 blank lines are replaced by PEP 8 style 2-1-1.
> * String syntax uses "double quotes".
> 
> Run this command to exclude the formatting from git blame <https://github.com/twisted/twisted/blob/trunk/.git-blame-ignore-revs>:
> 
>     git config blame.ignoreRevsFile .git-blame-ignore-revs
> 
> There are two new Tox testenvs. To check style:
> 
>     tox -e black
> 
> To adjust the formatting:
> 
>     tox -e black-reformat
> 
> The formatting is checked by a new GitHub Actions lint built.

Could we possibly use something like this:

https://github.com/cclauss/autoblack <https://github.com/cclauss/autoblack>

to just do the formatting rather than "check" if it's correct?  PR templates are all well and good but the best checklist item is the one that's already checked off...

> There is some follow-up work planned:
> 
> * Many PRs have conflicts (more on this below).
> * Various wiki pages need updates. I've done a few, but there are probably more.
> * The coding standard should be updated <https://twistedmatrix.com/trac/ticket/9957#ticket>.
> * The PR template needs an update <https://twistedmatrix.com/trac/ticket/9956#ticket>.
> * A few examples need reformatting <https://tm.tl/#9952> (they weren't formatted because they fail to lint).
> 
> Inevitably, changes like this cause conflicts. For small PRs it's easiest to merge forward and then run tox -e black-reformat. For larger ones it can help to apply formatting before merge. To do this:
> 
> * Run black on the files your branch changes (be sure to use Black 20.8b1, not an older version)
> * Commit the result, like `git commit -am "Fade to black"`
> * Add that commit to .git-blame-ignore-revs to avoid polluting git blame.
> * Merge forward. You can ignore formatting while performing the merge.
> * Then run `tox -e black-reformat` to ensure you are in sync. Commit any changes it generates.

Can we please get this bulleted list in the form of a tool that people can run against a PR, so we don't need everyone to write their own bespoke shell script for fixing up their Twisted PRs?  This is the thing I'm the most worried about - I'd like to have it done automatically because I'm seriously worried about work in progress getting abandoned because somebody backs themselves into a corner with an apparently intractable mega-conflict by not knowing how to properly use Git to apply this sort of modification.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200914/247f8225/attachment-0001.htm>

From glyph at twistedmatrix.com  Mon Sep 14 11:48:38 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 14 Sep 2020 10:48:38 -0700
Subject: [Twisted-Python] code contribution/participation policy
In-Reply-To: <CADeF1XGKhJRQGh=4ckfQaKXoiefDnRahggQP9afefHH7QghHUQ@mail.gmail.com>
References: <CADeF1XGfzb8WYUkCN9pJ20_7fkf=jDehyJkxO92oSO6OFQCrJw@mail.gmail.com>
 <CAMTx_3BEGy=d8PZ_euzaT1YJgm01Dzgxr1pQAxvFnDSNym4TbQ@mail.gmail.com>
 <92EC7A79-EB92-4517-B0DE-3F3C8DD3237C@twistedmatrix.com>
 <CADeF1XGAWAgrf43G4_8NfvN97mHWcHjWNcT7gGCMLfCC2HrsTQ@mail.gmail.com>
 <CADeF1XGqUFmZcAgnpHT=0Tc54uM8Lbqj_JhUHEJzR8hU23WBNQ@mail.gmail.com>
 <CAG=rPVdFb5HuS=w-1rNya7wCiqcJ=JNLwQ80JzpJa1Y9v-6_QA@mail.gmail.com>
 <CADeF1XGKhJRQGh=4ckfQaKXoiefDnRahggQP9afefHH7QghHUQ@mail.gmail.com>
Message-ID: <070269B8-7931-41B1-8FF6-97EE54E5EE0D@twistedmatrix.com>



> On Sep 14, 2020, at 10:11 AM, Boris Epstein <borepstein at gmail.com> wrote:
> 
> Hello Craig,
> 
> Thanks. So basically you just work on the main Git repo, not on a clone - and you do the pull directly, not submit a pull request?
> 
> Boris.

Hi Boris,

No, not at all.  Work on your clone, and submit a PR as normal.  The PR template should walk you through the rest.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200914/9ca6acd3/attachment.htm>

From sda at fstab.net  Tue Sep 15 08:26:12 2020
From: sda at fstab.net (Kyle Altendorf)
Date: Tue, 15 Sep 2020 10:26:12 -0400
Subject: [Twisted-Python] Black enabled in trunk
In-Reply-To: <E3D6259B-68B2-495D-BA30-0F36050DFE40@twistedmatrix.com>
References: <01b03380-d8fe-4c0c-842b-8719b4ce4791@www.fastmail.com>
 <E3D6259B-68B2-495D-BA30-0F36050DFE40@twistedmatrix.com>
Message-ID: <72a600e72b0c370e4b7a8ab80b50fbf6@fstab.net>

On 2020-09-14 13:43, Glyph wrote:

>> On Sep 13, 2020, at 11:45 PM, Tom Most <twm at freecog.net> wrote:
>> To adjust the formatting:
>> 
>> tox -e black-reformat
>> 
>> The formatting is checked by a new GitHub Actions lint built.
> 
> Could we possibly use something like this:
> 
> https://github.com/cclauss/autoblack
> 
> to just _do_ the formatting rather than "check" if it's correct?  PR 
> templates are all well and good but the best checklist item is the one 
> that's already checked off...

It might be worthwhile but I think there is some downside to CI 
frequently injecting commits (or amending them).

>> Inevitably, changes like this cause conflicts. For small PRs it's 
>> easiest to merge forward and then run tox -e black-reformat. For 
>> larger ones it can help to apply formatting before merge. To do this:
>> 
>> * Run black on the files your branch changes (be sure to use Black 
>> 20.8b1, not an older version)
>> * Commit the result, like `git commit -am "Fade to black"`
>> * Add that commit to .git-blame-ignore-revs to avoid polluting git 
>> blame.

Is .git-blame-ignore-revs going to be the next 'newsfile' what with 
every PR adding lines to it?  Also, for the record, this doesn't address 
GitHub blame and does require everyone set the previously mentioned git 
config since it doesn't go with the repo.  :[  Though that's mostly an 
annoyance with git.

Oh yeah...  thanks!

Cheers,
-kyle


From barry.scott at forcepoint.com  Tue Sep 15 11:05:47 2020
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 15 Sep 2020 18:05:47 +0100
Subject: [Twisted-Python] doWrite on twisted.internet.tcp.Port
In-Reply-To: <CAEeXt4MoV8voL_faqNif7Wuduyn3gsx=jz7NU6pzmO-85eH7Eg@mail.gmail.com>
References: <035001d68861$cf2c4ac0$6d84e040$@cmsconstruct.com>
 <CAEeXt4MoV8voL_faqNif7Wuduyn3gsx=jz7NU6pzmO-85eH7Eg@mail.gmail.com>
Message-ID: <3324875.iIbC2pHGDl@fpbarry>

On Friday, 11 September 2020 19:28:13 BST Jean-Paul Calderone wrote:
> On Fri, Sep 11, 2020 at 1:34 PM <chris at cmsconstruct.com> wrote:
> 
> > Hey guys,
> >
> >
> >
> > Last year I hit a condition discussed in this ticket:
> > https://twistedmatrix.com/trac/ticket/4759 for doWrite called on a
> > twisted.internet.tcp.Port.
> >
> >
> >
> > I ignored it at the time since it was just on Linux, and my main platform
> > was Windows.  Now I’m coming back to it.  I’ll add context on the problem
> > below, but first I want to ask a high-level, design-type question with
> > multiprocessing and Twisted:
> >
> >
> >
> > Referencing Jean-Paul’s comment at the end of ticket 4759, I read you
> > shouldn’t fork a process (multiprocessing module) that already has a
> > Twisted reactor.  Understood.  But what about a parent process (not doing
> > anything Twisted) forking child processes, where each child process starts
> > their own Twisted reactor?  Is that intended to work from the Twisted
> > perspective?
> >
> 
> To answer the asked question, I don't think there is rigorous (or even
> casual) testing of very much of Twisted in the context of "some Twisted
> code has been loaded into memory and then the process forked".  So while it
> seems like a reasonable thing, I wouldn't say there's currently much effort
> being put towards making it a *supported* usage of Twisted.  Of course this
> can change at almost any moment if someone decides to commit the effort.
> 
> To dig a bit further into the specific problem, even if you only *import* the
> reactor in the parent process and then fork a child and try to start the
> reactor in the child, I strongly suspect epollreactor will break.  This is
> because the epoll object is created by reactor instantiation (as opposed to
> being delayed until the reactor is run).  epoll objects have a lot of weird
> behavior.  See the *Questions and Answers* section of the epoll(7) man page.

Suspect no longer. It breaks very badly.

I guess by weird you mean that the epoll uses an FD, sounds
like a great feature to me, the state is managed in the kernel.
Of course you have to be aware of this and that the FD is inherited
into children where the reactor will fail in various ways.

You now have each child that adds and removes FD's is doing it on
one shared epoll FD, but events get delivered to all the children.

What we did is use the PollReactor not the EPollReactor.
And before we fork we call reactor.removeReader on each of
the ports (sockets) we setup in the parent.

Then in the children we add the ports back in with reactor.addReader.
After that the children run just fine.

We do this so that we can open priv'ed ports that the children will share.
We drop priv's after the priv'ed ports are opened.

If you do not need to listen on sockets in the parent then simply
avoid importing reactor before you fork.

Barry


> 
> I don't know if this is the cause of your particular expression of these
> symptoms (it certainly doesn't apply to the *original* bug report which is
> on FreeBSD where there is no epoll) but it's at least *a possible* cause.
> 
> This could probably be fixed in Twisted by only creating the epoll object
> when run is called.  There's nothing particularly difficult about that
> change but it does involve touching a lot of the book-keeping logic since
> that all assumes it can register file descriptors before the reactor is
> started (think reactor.listenTCP(...); reactor.run()).
> 
> I'm not sure but it may also be the case that only delaying creation of the
> *waker* until the reactor starts would also fix this.  This is because as
> long as the epoll object remains empty a lot of the weird behavior is
> avoided and the waker is probably the only thing that actually gets added
> to it if you're just *importing* the reactor but not *running* it before
> forking.
> 
> Alternatively, your application *should* be able to fix it by studiously
> avoiding the import of twisted.internet.reactor (directly or transitively,
> of course).  You could add some kind of assertion about the state of
> sys.modules immediately before your forking code to develop some confidence
> you've managed this.
> 
> And if this is really an epoll problem then switching to poll or select
> reactor would also presumably get rid of the issue.
> 
> Jean-Paul
> 
> 
> >
> >
> >
> > Context:
> >
> > I only hit this problem on Linux, not Windows.
> >
> >
> >
> > The software project (github.com/opencontentplatform/ocp) has been a lot
> > of fun, especially with walking the tight rope in using multi-processing,
> > multi-threading, and Twisted reactors.  The main controller process kicks
> > off about 10 child processes, each doing different types of work.  In
> > general though, the child processes individually start a Twisted reactor,
> > connect to Kafka, connect to a database, use a shared REST API, and some
> > listen for connecting clients to accomplish work.
> >
> >
> >
> > I test on Linux about once a year, so too many changes to rollback and
> > figure out that way.  It was working on Linux 2 years ago, but last year’s
> > testing and current testing, receive the doWrite error.  It continues
> > running fine on Windows.  I’ve gone back about 2 years of versions with
> > Python3, Twisted, and dependent libs… on both Windows and Linux.  Every
> > version change yields the same result - continues to work on Windows and
> > continues to hit the error on Linux.  So something I added has caused Linux
> > to throw that error.
> >
> >
> >
> > I’m not explicitly sharing much between the main process and the sub
> > processes.  They are spun up with (1) a shared multiprocessing.Event() - to
> > have the main process shut the children down, (2) their own unique
> > multiprocessing.Event() - to have the child processes notify back to the
> > parent, and (3) a deep copy of a dictionary (containing a bunch of settings
> > that remain constant).  The main process uses twisted.logger, but for
> > testing I strip that out to remove any twisted imports in the main
> > process.  So I’m not importing anything Twisted in the main process, and I
> > don’t believe I’m explicitly sharing something I shouldn’t.  Seems like
> > something is implicitly being exposed/shared across Linux child processes,
> > that aren’t on Windows.
> >
> >
> >
> > The tracebacks come through on Linux (sometimes randomly), on the console
> > of the parent controller process.  No need to paste here, since it’s the
> > same as the ticket shows.  I can’t reliably reproduce the problem, but I
> > know if I stop/start client connections
> > (ServerFactory/twisted.internet.interfaces.IReactorTCP and
> > twisted.internet.protocol.ReconnectingClientFactory) then it will
> > eventually happen.  I need to devote time at whittling down the code and
> > attempting to create a reliable test case… if even possible.
> >
> >
> >
> > The error is slightly different when running HTTP vs HTTPS, but the story
> > is the same.  It cripples whatever child process that hits it, from doing
> > much of anything thereafter.  Not much luck with troubleshooting.  The
> > tracebacks do not include a calling function from my code, to tell me where
> > to start. And it happens across different child process types, so not the
> > same one each time.  When I throw debuggers on the child processes, the
> > problem seems to mask itself.  Well, at least I didn’t hit the problem over
> > the last 3 days using pudb and stepping through code at breakpoints.
> >
> >
> >
> > I’m absolutely open to suggestions for troubleshooting, but first wanted
> > to take a HUGE step back and ask a design question regarding Twisted and
> > multiprocessing.
> >
> >
> >
> > Thanks!
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> 





From barry.scott at forcepoint.com  Tue Sep 15 11:08:17 2020
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 15 Sep 2020 18:08:17 +0100
Subject: [Twisted-Python] Black enabled in trunk
In-Reply-To: <01b03380-d8fe-4c0c-842b-8719b4ce4791@www.fastmail.com>
References: <01b03380-d8fe-4c0c-842b-8719b4ce4791@www.fastmail.com>
Message-ID: <3007212.5fSG56mABF@fpbarry>

On Monday, 14 September 2020 07:45:43 BST Tom Most wrote:
> Hi all,
> 
> Craig and I have been working to land a switch to The *Black* Coding Style <https://black.readthedocs.io/en/stable/the_black_code_style.html>. It's in! The tree has been reformatted <https://github.com/twisted/twisted/commit/bc96c774be6e307e8e3e4d39780d37b045d0973a>. Some notable changes:

How does this work with backwards compatibility?
There are lots of symbols are that not black right?

Barry

> 
> * 3-2-1 blank lines are replaced by PEP 8 style 2-1-1.
> * String syntax uses "double quotes".
> 
> Run this command to exclude the formatting from git blame <https://github.com/twisted/twisted/blob/trunk/.git-blame-ignore-revs>:
> 
>     git config blame.ignoreRevsFile .git-blame-ignore-revs
> 
> There are two new Tox testenvs. To check style:
> 
>     tox -e black
> 
> To adjust the formatting:
> 
>     tox -e black-reformat
> 
> The formatting is checked by a new GitHub Actions lint built.
> 
> There is some follow-up work planned:
> 
> * Many PRs have conflicts (more on this below).
> * Various wiki pages need updates. I've done a few, but there are probably more.
> * The coding standard should be updated <https://twistedmatrix.com/trac/ticket/9957#ticket>.
> * The PR template needs an update <https://twistedmatrix.com/trac/ticket/9956#ticket>.
> * A few examples need reformatting <https://tm.tl/#9952> (they weren't formatted because they fail to lint).
> 
> Inevitably, changes like this cause conflicts. For small PRs it's easiest to merge forward and then run tox -e black-reformat. For larger ones it can help to apply formatting before merge. To do this:
> 
> * Run black on the files your branch changes (be sure to use Black 20.8b1, not an older version)
> * Commit the result, like `git commit -am "Fade to black"`
> * Add that commit to .git-blame-ignore-revs to avoid polluting git blame.
> * Merge forward. You can ignore formatting while performing the merge.
> * Then run `tox -e black-reformat` to ensure you are in sync. Commit any changes it generates.
> 
> A big thanks to Hawkowl for kicking this all off and Craig for quick review turnaround. May we all be mildly displeased with the formatting, yet never have to review it again!
> 
> ---Tom





From glyph at twistedmatrix.com  Tue Sep 15 12:37:41 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 15 Sep 2020 11:37:41 -0700
Subject: [Twisted-Python] doWrite on twisted.internet.tcp.Port
In-Reply-To: <3324875.iIbC2pHGDl@fpbarry>
References: <035001d68861$cf2c4ac0$6d84e040$@cmsconstruct.com>
 <CAEeXt4MoV8voL_faqNif7Wuduyn3gsx=jz7NU6pzmO-85eH7Eg@mail.gmail.com>
 <3324875.iIbC2pHGDl@fpbarry>
Message-ID: <0030DC38-3CA9-4703-9948-06533A784FB0@twistedmatrix.com>

> On Sep 15, 2020, at 10:05 AM, Barry Scott <barry.scott at forcepoint.com> wrote:
> 
> We do this so that we can open priv'ed ports that the children will share.
> We drop priv's after the priv'ed ports are opened.

A better way to do this might be to use something like the systemd activation endpoint, so you never need privileges in your code in the first place:

https://twistedmatrix.com/documents/current/core/howto/systemd.html#socket-activation <https://twistedmatrix.com/documents/current/core/howto/systemd.html#socket-activation>

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200915/fb472ce7/attachment.htm>

From glyph at twistedmatrix.com  Tue Sep 15 12:36:06 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 15 Sep 2020 11:36:06 -0700
Subject: [Twisted-Python] Black enabled in trunk
In-Reply-To: <3007212.5fSG56mABF@fpbarry>
References: <01b03380-d8fe-4c0c-842b-8719b4ce4791@www.fastmail.com>
 <3007212.5fSG56mABF@fpbarry>
Message-ID: <0E06DFB0-C1DE-43A7-A2D8-FD47A0C5D8EB@twistedmatrix.com>


> On Sep 15, 2020, at 10:08 AM, Barry Scott <barry.scott at forcepoint.com> wrote:
> 
> How does this work with backwards compatibility?
> There are lots of symbols are that not black right?

PEP8 suggests (but does not mandate) snake_case identifiers where Twisted uses camelCase.  But Black doesn't care at all about identifiers; its job is more or less exclusively about formatting whitespace.  So there's no compatibility concern here.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200915/f409af12/attachment.htm>

From twm at freecog.net  Wed Sep 16 00:02:50 2020
From: twm at freecog.net (Tom Most)
Date: Tue, 15 Sep 2020 23:02:50 -0700
Subject: [Twisted-Python] Black enabled in trunk
In-Reply-To: <72a600e72b0c370e4b7a8ab80b50fbf6@fstab.net>
References: <01b03380-d8fe-4c0c-842b-8719b4ce4791@www.fastmail.com>
 <E3D6259B-68B2-495D-BA30-0F36050DFE40@twistedmatrix.com>
 <72a600e72b0c370e4b7a8ab80b50fbf6@fstab.net>
Message-ID: <dbed6c9f-6c9b-4a10-87ac-6e82cb79fc43@www.fastmail.com>

On Tue, Sep 15, 2020, at 7:26 AM, Kyle Altendorf wrote:
> On 2020-09-14 13:43, Glyph wrote:
> 
> >> On Sep 13, 2020, at 11:45 PM, Tom Most <twm at freecog.net> wrote:
> >> To adjust the formatting:
> >> 
> >> tox -e black-reformat
> >> 
> >> The formatting is checked by a new GitHub Actions lint built.
> > 
> > Could we possibly use something like this:
> > 
> > https://github.com/cclauss/autoblack
> > 
> > to just _do_ the formatting rather than "check" if it's correct?  PR 
> > templates are all well and good but the best checklist item is the one 
> > that's already checked off...
> 
> It might be worthwhile but I think there is some downside to CI 
> frequently injecting commits (or amending them).

I'm not opposed to it in principle, but is there a version of this that works? That link says "tl;dr: It does not work."

I don't want to develop custom tooling. This project is about moving away from that!

> >> Inevitably, changes like this cause conflicts. For small PRs it's 
> >> easiest to merge forward and then run tox -e black-reformat. For 
> >> larger ones it can help to apply formatting before merge. To do this:
> >> 
> >> * Run black on the files your branch changes (be sure to use Black 
> >> 20.8b1, not an older version)
> >> * Commit the result, like `git commit -am "Fade to black"`
> >> * Add that commit to .git-blame-ignore-revs to avoid polluting git 
> >> blame.
> 
> Is .git-blame-ignore-revs going to be the next 'newsfile' what with 
> every PR adding lines to it?  Also, for the record, this doesn't address 
> GitHub blame and does require everyone set the previously mentioned git 
> config since it doesn't go with the repo.  :[  Though that's mostly an 
> annoyance with git.

I don't expect so. There aren't that many PRs large enough to benefit from this technique, and large PRs tend to enter the codebase slowly. 

> Oh yeah...  thanks!

You're welcome! 


From barry.scott at forcepoint.com  Wed Sep 16 02:10:21 2020
From: barry.scott at forcepoint.com (Barry Scott)
Date: Wed, 16 Sep 2020 09:10:21 +0100
Subject: [Twisted-Python] doWrite on twisted.internet.tcp.Port
In-Reply-To: <0030DC38-3CA9-4703-9948-06533A784FB0@twistedmatrix.com>
References: <035001d68861$cf2c4ac0$6d84e040$@cmsconstruct.com>
 <3324875.iIbC2pHGDl@fpbarry>
 <0030DC38-3CA9-4703-9948-06533A784FB0@twistedmatrix.com>
Message-ID: <1854972.usQuhbGJ8B@fpbarry>

On Tuesday, 15 September 2020 19:37:41 BST Glyph wrote:
> > On Sep 15, 2020, at 10:05 AM, Barry Scott <barry.scott at forcepoint.com> wrote:
> > 
> > We do this so that we can open priv'ed ports that the children will share.
> > We drop priv's after the priv'ed ports are opened.
> 
> A better way to do this might be to use something like the systemd activation endpoint, so you never need privileges in your code in the first place:
> 
> https://twistedmatrix.com/documents/current/core/howto/systemd.html#socket-activation <https://twistedmatrix.com/documents/current/core/howto/systemd.html#socket-activation>

Yep, but at the moment I'm on Centos 6 (no systemd) porting to Centos 8 at the moment.

I'm not sure socket activation is the way forward, but there are a lot of other tricks in systemd that should help.
Also there is the idea to pass the prived FD's over sockets into the non priv'ed code etc.

Barry




From glyph at twistedmatrix.com  Wed Sep 16 12:09:19 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 16 Sep 2020 11:09:19 -0700
Subject: [Twisted-Python] Black enabled in trunk
In-Reply-To: <dbed6c9f-6c9b-4a10-87ac-6e82cb79fc43@www.fastmail.com>
References: <01b03380-d8fe-4c0c-842b-8719b4ce4791@www.fastmail.com>
 <E3D6259B-68B2-495D-BA30-0F36050DFE40@twistedmatrix.com>
 <72a600e72b0c370e4b7a8ab80b50fbf6@fstab.net>
 <dbed6c9f-6c9b-4a10-87ac-6e82cb79fc43@www.fastmail.com>
Message-ID: <A81B1B94-9FB4-47FB-93BC-0A03AA4F0FA7@twistedmatrix.com>

On September 15, 2020 at 11:04:45 PM, Tom Most (twm at freecog.net <mailto:twm at freecog.net>) wrote:
> On Tue, Sep 15, 2020, at 7:26 AM, Kyle Altendorf wrote:
> > On 2020-09-14 13:43, Glyph wrote:
> > 
> > >> On Sep 13, 2020, at 11:45 PM, Tom Most <twm at freecog.net <mailto:twm at freecog.net>> wrote:
> > >> To adjust the formatting:
> > >> 
> > >> tox -e black-reformat
> > >> 
> > >> The formatting is checked by a new GitHub Actions lint built.
> > > 
> > > Could we possibly use something like this:
> > > 
> > > https://github.com/cclauss/autoblack <https://github.com/cclauss/autoblack>
> > > 
> > > to just _do_ the formatting rather than "check" if it's correct? PR 
> > > templates are all well and good but the best checklist item is the one 
> > > that's already checked off...
> > 
> > It might be worthwhile but I think there is some downside to CI 
> > frequently injecting commits (or amending them).
> 
> I'm not opposed to it in principle, but is there a version of this that works? That link says "tl;dr: It does not work."

If you dig around you can see that there are various ways to make it work, including deploying the slash-command version rather than the on-push version.

> I don't want to develop custom tooling. This project is about moving away from that!

At least if we're building new tooling we could build it separately from Twisted so it could apply across different projects; at least different projects in the org, a the very least ;)

> > >> Inevitably, changes like this cause conflicts. For small PRs it's 
> > >> easiest to merge forward and then run tox -e black-reformat. For 
> > >> larger ones it can help to apply formatting before merge. To do this:
> > >> 
> > >> * Run black on the files your branch changes (be sure to use Black 
> > >> 20.8b1, not an older version)
> > >> * Commit the result, like `git commit -am "Fade to black"`
> > >> * Add that commit to .git-blame-ignore-revs to avoid polluting git 
> > >> blame.
> > 
> > Is .git-blame-ignore-revs going to be the next 'newsfile' what with 
> > every PR adding lines to it? Also, for the record, this doesn't address 
> > GitHub blame and does require everyone set the previously mentioned git 
> > config since it doesn't go with the repo. :[ Though that's mostly an 
> > annoyance with git.
> 
> I don't expect so. There aren't that many PRs large enough to benefit from this technique, and large PRs tend to enter the codebase slowly. 

I'm not usually a huge fan of rebasing, but presumably some history-rewriting could help avoid needing this?

> 
> > Oh yeah... thanks!
> 
> You're welcome! 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200916/8f89f0ee/attachment.htm>

From rodrigc at crodrigues.org  Wed Sep 16 15:36:25 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 16 Sep 2020 14:36:25 -0700
Subject: [Twisted-Python] Broken Javascript on https://twistedmatrix.com ?
Message-ID: <CAG=rPVchCgFEkX4dYfqM=zYNKrP_1-jRBP45UXp_3YK9U8muGw@mail.gmail.com>

If I go to https://twistedmatrix.com and click on
one of the tabs in the *Code Examples* section,
such as *Publish/Subscribe*, the tab does not switch.

This looks like a Javascript problem.  Does anyone with knowledge
of Javascript have an idea what the problem is?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200916/f2a6ace9/attachment.htm>

From ldanielburr at me.com  Wed Sep 16 15:53:42 2020
From: ldanielburr at me.com (L. Daniel Burr)
Date: Wed, 16 Sep 2020 16:53:42 -0500
Subject: [Twisted-Python] Broken Javascript on https://twistedmatrix.com
 ?
In-Reply-To: <CAG=rPVchCgFEkX4dYfqM=zYNKrP_1-jRBP45UXp_3YK9U8muGw@mail.gmail.com>
References: <CAG=rPVchCgFEkX4dYfqM=zYNKrP_1-jRBP45UXp_3YK9U8muGw@mail.gmail.com>
Message-ID: <B5F15466-78F1-4E03-81ED-997FE8EA954D@me.com>

Hi Craig,

No error is being emitted to the console when you click on a tab.  There are some cross-origin script failures being logged, and Firefox blocked google urchin, which causes some more error messages.

As far as I can tell, the JS code that is supposed to hook up the clicking of the tab (an anchor tag with a relative href) is not being executed, either because it is being blocked by the browser, or as a side-effect of other things being blocked.

Hope this helps,

Daniel
--
L. Daniel Burr
ldanielburr at me.com
(312) 656-8387

> On Sep 16, 2020, at 4:36 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> If I go to https://twistedmatrix.com <https://twistedmatrix.com/> and click on
> one of the tabs in the Code Examples section,
> such as Publish/Subscribe, the tab does not switch.
> 
> This looks like a Javascript problem.  Does anyone with knowledge
> of Javascript have an idea what the problem is?
> 
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200916/15441892/attachment.htm>

From glyph at twistedmatrix.com  Thu Sep 17 00:26:09 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 16 Sep 2020 23:26:09 -0700
Subject: [Twisted-Python] Broken Javascript on https://twistedmatrix.com
 ?
In-Reply-To: <B5F15466-78F1-4E03-81ED-997FE8EA954D@me.com>
References: <CAG=rPVchCgFEkX4dYfqM=zYNKrP_1-jRBP45UXp_3YK9U8muGw@mail.gmail.com>
 <B5F15466-78F1-4E03-81ED-997FE8EA954D@me.com>
Message-ID: <E3598617-342E-439F-B269-97D04D009C24@twistedmatrix.com>

We were depending on some Google APIs that were disabled a really long time ago, so I pushed & deployed this commit <https://github.com/twisted-infra/braid/commit/1df63c5d8b44e079487be2f0bf099108a77872e5 <https://github.com/twisted-infra/braid/commit/1df63c5d8b44e079487be2f0bf099108a77872e5>> to get the front page back to working.

-g

> On Sep 16, 2020, at 2:53 PM, L. Daniel Burr <ldanielburr at me.com> wrote:
> 
> Hi Craig,
> 
> No error is being emitted to the console when you click on a tab.  There are some cross-origin script failures being logged, and Firefox blocked google urchin, which causes some more error messages.
> 
> As far as I can tell, the JS code that is supposed to hook up the clicking of the tab (an anchor tag with a relative href) is not being executed, either because it is being blocked by the browser, or as a side-effect of other things being blocked.
> 
> Hope this helps,
> 
> Daniel
> --
> L. Daniel Burr
> ldanielburr at me.com <mailto:ldanielburr at me.com>
> (312) 656-8387
> 
>> On Sep 16, 2020, at 4:36 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>> 
>> If I go to https://twistedmatrix.com <https://twistedmatrix.com/> and click on
>> one of the tabs in the Code Examples section,
>> such as Publish/Subscribe, the tab does not switch.
>> 
>> This looks like a Javascript problem.  Does anyone with knowledge
>> of Javascript have an idea what the problem is?
>> 
>> --
>> Craig
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200916/a6ed6e45/attachment-0001.htm>

From rodrigc at crodrigues.org  Thu Sep 17 09:37:14 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 17 Sep 2020 08:37:14 -0700
Subject: [Twisted-Python] Broken Javascript on https://twistedmatrix.com
 ?
In-Reply-To: <E3598617-342E-439F-B269-97D04D009C24@twistedmatrix.com>
References: <CAG=rPVchCgFEkX4dYfqM=zYNKrP_1-jRBP45UXp_3YK9U8muGw@mail.gmail.com>
 <B5F15466-78F1-4E03-81ED-997FE8EA954D@me.com>
 <E3598617-342E-439F-B269-97D04D009C24@twistedmatrix.com>
Message-ID: <CAG=rPVf8jAJ=Na3MPqxFQejn+=FQZJV3+N62jztkMF7Rp60xkw@mail.gmail.com>

Thanks for looking into this.  Now I am seeing this error on the
https://twistedmatrix.com :

jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:136
Uncaught Error: Must call google.charts.load before
google.charts.setOnLoadCallback
    at Object.J.R [as setOnLoadCallback]
(jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:136)
    at twisted.js:92
jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:141
Uncaught Error: Module "feeds" is not supported.
    at
jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:141


Where is that coming from?


--
Craig

On Wed, Sep 16, 2020 at 11:28 PM Glyph <glyph at twistedmatrix.com> wrote:

> We were depending on some Google APIs that were disabled a really long
> time ago, so I pushed & deployed this commit <
> https://github.com/twisted-infra/braid/commit/1df63c5d8b44e079487be2f0bf099108a77872e5>
> to get the front page back to working.
>
> -g
>
> On Sep 16, 2020, at 2:53 PM, L. Daniel Burr <ldanielburr at me.com> wrote:
>
> Hi Craig,
>
> No error is being emitted to the console when you click on a tab.  There
> are some cross-origin script failures being logged, and Firefox blocked
> google urchin, which causes some more error messages.
>
> As far as I can tell, the JS code that is supposed to hook up the clicking
> of the tab (an anchor tag with a relative href) is not being executed,
> either because it is being blocked by the browser, or as a side-effect of
> other things being blocked.
>
> Hope this helps,
>
> Daniel
> --
> L. Daniel Burr
> ldanielburr at me.com
> (312) 656-8387
>
> On Sep 16, 2020, at 4:36 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> If I go to https://twistedmatrix.com and click on
> one of the tabs in the *Code Examples* section,
> such as *Publish/Subscribe*, the tab does not switch.
>
> This looks like a Javascript problem.  Does anyone with knowledge
> of Javascript have an idea what the problem is?
>
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200917/83f931a9/attachment.htm>

From glyph at twistedmatrix.com  Thu Sep 17 12:27:37 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 17 Sep 2020 11:27:37 -0700
Subject: [Twisted-Python] Broken Javascript on https://twistedmatrix.com
 ?
In-Reply-To: <CAG=rPVf8jAJ=Na3MPqxFQejn+=FQZJV3+N62jztkMF7Rp60xkw@mail.gmail.com>
References: <CAG=rPVchCgFEkX4dYfqM=zYNKrP_1-jRBP45UXp_3YK9U8muGw@mail.gmail.com>
 <B5F15466-78F1-4E03-81ED-997FE8EA954D@me.com>
 <E3598617-342E-439F-B269-97D04D009C24@twistedmatrix.com>
 <CAG=rPVf8jAJ=Na3MPqxFQejn+=FQZJV3+N62jztkMF7Rp60xkw@mail.gmail.com>
Message-ID: <55EABE35-52DE-478F-9D22-1155BEEE4C3A@twistedmatrix.com>

This is the JS that I specifically changed, which is no longer being served by twistedmatrix.com <http://twistedmatrix.com/>, so just like… reload harder, or something.  Clear your cookies, zap your caches, restart your browser, repent of your sins, etc.  Maybe repent before clearing the caches so you don't have any cached sins either.

If you want to work on this yourself, we do have something of a local staging infrastructure set up with... vagrant, I think?, but I haven't tried it.  If you want to test your changes in developmestuction, check out braid, edit the HTML and JS in t-web, push to master, and then `fab config.production t-web.update`.

Good luck,

-g

P.S.: braid still requires python2, so anybody enthusiastic about python3 porting is encouraged to take a look at it :-).

> On Sep 17, 2020, at 8:37 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Thanks for looking into this.  Now I am seeing this error on the https://twistedmatrix.com <https://twistedmatrix.com/> :
> 
> jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:136 Uncaught Error: Must call google.charts.load before google.charts.setOnLoadCallback
>     at Object.J.R [as setOnLoadCallback] (jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:136)
>     at twisted.js:92
> jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:141 Uncaught Error: Module "feeds" is not supported.
>     at jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:141
> 
> 
> Where is that coming from?
> 
> 
> --
> Craig
> 
> On Wed, Sep 16, 2020 at 11:28 PM Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> We were depending on some Google APIs that were disabled a really long time ago, so I pushed & deployed this commit <https://github.com/twisted-infra/braid/commit/1df63c5d8b44e079487be2f0bf099108a77872e5 <https://github.com/twisted-infra/braid/commit/1df63c5d8b44e079487be2f0bf099108a77872e5>> to get the front page back to working.
> 
> -g
> 
>> On Sep 16, 2020, at 2:53 PM, L. Daniel Burr <ldanielburr at me.com <mailto:ldanielburr at me.com>> wrote:
>> 
>> Hi Craig,
>> 
>> No error is being emitted to the console when you click on a tab.  There are some cross-origin script failures being logged, and Firefox blocked google urchin, which causes some more error messages.
>> 
>> As far as I can tell, the JS code that is supposed to hook up the clicking of the tab (an anchor tag with a relative href) is not being executed, either because it is being blocked by the browser, or as a side-effect of other things being blocked.
>> 
>> Hope this helps,
>> 
>> Daniel
>> --
>> L. Daniel Burr
>> ldanielburr at me.com <mailto:ldanielburr at me.com>
>> (312) 656-8387
>> 
>>> On Sep 16, 2020, at 4:36 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>>> 
>>> If I go to https://twistedmatrix.com <https://twistedmatrix.com/> and click on
>>> one of the tabs in the Code Examples section,
>>> such as Publish/Subscribe, the tab does not switch.
>>> 
>>> This looks like a Javascript problem.  Does anyone with knowledge
>>> of Javascript have an idea what the problem is?
>>> 
>>> --
>>> Craig
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200917/7a89d121/attachment.htm>

From rodrigc at crodrigues.org  Thu Sep 17 13:47:25 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 17 Sep 2020 12:47:25 -0700
Subject: [Twisted-Python] Broken Javascript on https://twistedmatrix.com
 ?
In-Reply-To: <55EABE35-52DE-478F-9D22-1155BEEE4C3A@twistedmatrix.com>
References: <CAG=rPVchCgFEkX4dYfqM=zYNKrP_1-jRBP45UXp_3YK9U8muGw@mail.gmail.com>
 <B5F15466-78F1-4E03-81ED-997FE8EA954D@me.com>
 <E3598617-342E-439F-B269-97D04D009C24@twistedmatrix.com>
 <CAG=rPVf8jAJ=Na3MPqxFQejn+=FQZJV3+N62jztkMF7Rp60xkw@mail.gmail.com>
 <55EABE35-52DE-478F-9D22-1155BEEE4C3A@twistedmatrix.com>
Message-ID: <CAG=rPVfP4kELVhbHh2uWA39DKJpGm1Tce_TwXq=umzwocTfRoQ@mail.gmail.com>

Doing a force refresh in my browser fixed it.  I can now click on
*Publish/Subscribe* and switch the tab.

I'm still seeing these errors which is causing the Paypal and Flattr gif's
not to load:

Access to image at 'https://www.paypalobjects.com/en_US/i/scr/pixel.gif'
from origin 'https://twistedmatrix.com' has been blocked by CORS policy: No
'Access-Control-Allow-Origin' header is present on the requested resource.
(Access to image at 'https://button.flattr.com/flattr-badge-large.png' from
origin 'https://twistedmatrix.com' has been blocked by CORS policy: No
'Access-Control-Allow-Origin' header is present on the requested resource.

I'm not familiar with CORS, so don't know what the proper fix for this is.

Thanks for fixing this.
--
Craig




On Thu, Sep 17, 2020 at 11:55 AM Glyph <glyph at twistedmatrix.com> wrote:

> This is the JS that I specifically changed, which is no longer being
> served by twistedmatrix.com, so just like… reload harder, or something.
> Clear your cookies, zap your caches, restart your browser, repent of your
> sins, etc.  Maybe repent before clearing the caches so you don't have any
> cached sins either.
>
> If you want to work on this yourself, we do have *something* of a local
> staging infrastructure set up with... vagrant, I think?, but I haven't
> tried it.  If you want to test your changes in developmestuction, check out
> braid, edit the HTML and JS in t-web, push to master, and then `fab
> config.production t-web.update`.
>
> Good luck,
>
> -g
>
> P.S.: braid still requires python2, so anybody enthusiastic about python3
> porting is encouraged to take a look at it :-).
>
> On Sep 17, 2020, at 8:37 AM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> Thanks for looking into this.  Now I am seeing this error on the
> https://twistedmatrix.com :
>
> jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:136
> Uncaught Error: Must call google.charts.load before
> google.charts.setOnLoadCallback
>     at Object.J.R [as setOnLoadCallback]
> (jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:136)
>     at twisted.js:92
> jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:141
> Uncaught Error: Module "feeds" is not supported.
>     at
> jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:141
>
>
> Where is that coming from?
>
>
> --
> Craig
>
> On Wed, Sep 16, 2020 at 11:28 PM Glyph <glyph at twistedmatrix.com> wrote:
>
>> We were depending on some Google APIs that were disabled a really long
>> time ago, so I pushed & deployed this commit <
>> https://github.com/twisted-infra/braid/commit/1df63c5d8b44e079487be2f0bf099108a77872e5>
>> to get the front page back to working.
>>
>> -g
>>
>> On Sep 16, 2020, at 2:53 PM, L. Daniel Burr <ldanielburr at me.com> wrote:
>>
>> Hi Craig,
>>
>> No error is being emitted to the console when you click on a tab.  There
>> are some cross-origin script failures being logged, and Firefox blocked
>> google urchin, which causes some more error messages.
>>
>> As far as I can tell, the JS code that is supposed to hook up the
>> clicking of the tab (an anchor tag with a relative href) is not being
>> executed, either because it is being blocked by the browser, or as a
>> side-effect of other things being blocked.
>>
>> Hope this helps,
>>
>> Daniel
>> --
>> L. Daniel Burr
>> ldanielburr at me.com
>> (312) 656-8387
>>
>> On Sep 16, 2020, at 4:36 PM, Craig Rodrigues <rodrigc at crodrigues.org>
>> wrote:
>>
>> If I go to https://twistedmatrix.com and click on
>> one of the tabs in the *Code Examples* section,
>> such as *Publish/Subscribe*, the tab does not switch.
>>
>> This looks like a Javascript problem.  Does anyone with knowledge
>> of Javascript have an idea what the problem is?
>>
>> --
>> Craig
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200917/805a537a/attachment-0001.htm>

From twm at freecog.net  Thu Sep 17 15:14:10 2020
From: twm at freecog.net (Tom Most)
Date: Thu, 17 Sep 2020 14:14:10 -0700
Subject: [Twisted-Python] Broken Javascript on https://twistedmatrix.com
 ?
In-Reply-To: <CAG=rPVfP4kELVhbHh2uWA39DKJpGm1Tce_TwXq=umzwocTfRoQ@mail.gmail.com>
References: <CAG=rPVchCgFEkX4dYfqM=zYNKrP_1-jRBP45UXp_3YK9U8muGw@mail.gmail.com>
 <B5F15466-78F1-4E03-81ED-997FE8EA954D@me.com>
 <E3598617-342E-439F-B269-97D04D009C24@twistedmatrix.com>
 <CAG=rPVf8jAJ=Na3MPqxFQejn+=FQZJV3+N62jztkMF7Rp60xkw@mail.gmail.com>
 <55EABE35-52DE-478F-9D22-1155BEEE4C3A@twistedmatrix.com>
 <CAG=rPVfP4kELVhbHh2uWA39DKJpGm1Tce_TwXq=umzwocTfRoQ@mail.gmail.com>
Message-ID: <ccb403b3-ce7f-43ba-97c3-7f14ee7d4a81@www.fastmail.com>

Access-Control-Allow-Origin is a header that would need to be set on PayPal/Flattr's side. 

They may have newer versions of these buttons that permit hotlinking, but the best solution is probably to host the images locally. That's what's best for performance of the page because you avoid extra DNS resolutions and can reuse the connection(s) used to load the rest of the page.

---Tom

On Thu, Sep 17, 2020, at 12:47 PM, Craig Rodrigues wrote:
> Doing a force refresh in my browser fixed it.  I can now click on *Publish/Subscribe* and switch the tab.
> 
> I'm still seeing these errors which is causing the Paypal and Flattr gif's not to load:
> 
> Access to image at 'https://www.paypalobjects.com/en_US/i/scr/pixel.gif' from origin 'https://twistedmatrix.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
> (Access to image at 'https://button.flattr.com/flattr-badge-large.png' from origin 'https://twistedmatrix.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
> 
> I'm not familiar with CORS, so don't know what the proper fix for this is.
> 
> Thanks for fixing this.
> --
> Craig
> 
> 
> 
> 
> On Thu, Sep 17, 2020 at 11:55 AM Glyph <glyph at twistedmatrix.com> wrote:
>> This is the JS that I specifically changed, which is no longer being served by twistedmatrix.com, so just like… reload harder, or something.  Clear your cookies, zap your caches, restart your browser, repent of your sins, etc.  Maybe repent before clearing the caches so you don't have any cached sins either.
>> 
>> If you want to work on this yourself, we do have *something* of a local staging infrastructure set up with... vagrant, I think?, but I haven't tried it.  If you want to test your changes in developmestuction, check out braid, edit the HTML and JS in t-web, push to master, and then `fab config.production t-web.update`.
>> 
>> Good luck,
>> 
>> -g
>> 
>> P.S.: braid still requires python2, so anybody enthusiastic about python3 porting is encouraged to take a look at it :-).
>> 
>>> On Sep 17, 2020, at 8:37 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>>> 
>>> Thanks for looking into this.  Now I am seeing this error on the https://twistedmatrix.com :
>>> 
>>> jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:136 Uncaught Error: Must call google.charts.load before google.charts.setOnLoadCallback
>>>     at Object.J.R [as setOnLoadCallback] (jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:136)
>>>     at twisted.js:92
>>> jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:141 Uncaught Error: Module "feeds" is not supported.
>>>     at jsapi?key=ABQIAAAAJE-f7vmwI1-jxkmwRe4lUxTAs18ELyhzmLGaHoc1qJwmpJy3zhR3LMRRdwqg5PSY4tnVO684msUklQ:141
>>> 
>>> 
>>> Where is that coming from?
>>> 
>>> 
>>> --
>>> Craig
>>> 
>>> On Wed, Sep 16, 2020 at 11:28 PM Glyph <glyph at twistedmatrix.com> wrote:
>>>> We were depending on some Google APIs that were disabled a really long time ago, so I pushed & deployed this commit <https://github.com/twisted-infra/braid/commit/1df63c5d8b44e079487be2f0bf099108a77872e5> to get the front page back to working.
>>>> 
>>>> -g
>>>> 
>>>>> On Sep 16, 2020, at 2:53 PM, L. Daniel Burr <ldanielburr at me.com> wrote:
>>>>> 
>>>>> Hi Craig,
>>>>> 
>>>>> No error is being emitted to the console when you click on a tab.  There are some cross-origin script failures being logged, and Firefox blocked google urchin, which causes some more error messages.
>>>>> 
>>>>> As far as I can tell, the JS code that is supposed to hook up the clicking of the tab (an anchor tag with a relative href) is not being executed, either because it is being blocked by the browser, or as a side-effect of other things being blocked.
>>>>> 
>>>>> Hope this helps,
>>>>> 
>>>>> Daniel
>>>>> --
>>>>> L. Daniel Burr
>>>>> ldanielburr at me.com
>>>>> (312) 656-8387
>>>>> 
>>>>>> On Sep 16, 2020, at 4:36 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>>>>>> 
>>>>>> If I go to https://twistedmatrix.com and click on
>>>>>> one of the tabs in the *Code Examples* section,
>>>>>> such as *Publish/Subscribe*, the tab does not switch.
>>>>>> 
>>>>>> This looks like a Javascript problem.  Does anyone with knowledge
>>>>>> of Javascript have an idea what the problem is?
>>>>>> 
>>>>>> --
>>>>>> Craig
>>>>>> _______________________________________________
>>>>>> Twisted-Python mailing list
>>>>>> Twisted-Python at twistedmatrix.com
>>>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>>> 
>>>>> _______________________________________________
>>>>> Twisted-Python mailing list
>>>>> Twisted-Python at twistedmatrix.com
>>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>> 
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200917/c1313868/attachment.htm>

From rodrigc at crodrigues.org  Fri Sep 18 20:44:40 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 18 Sep 2020 19:44:40 -0700
Subject: [Twisted-Python] Broken Javascript on https://twistedmatrix.com
 ?
In-Reply-To: <CAG=rPVfP4kELVhbHh2uWA39DKJpGm1Tce_TwXq=umzwocTfRoQ@mail.gmail.com>
References: <CAG=rPVchCgFEkX4dYfqM=zYNKrP_1-jRBP45UXp_3YK9U8muGw@mail.gmail.com>
 <B5F15466-78F1-4E03-81ED-997FE8EA954D@me.com>
 <E3598617-342E-439F-B269-97D04D009C24@twistedmatrix.com>
 <CAG=rPVf8jAJ=Na3MPqxFQejn+=FQZJV3+N62jztkMF7Rp60xkw@mail.gmail.com>
 <55EABE35-52DE-478F-9D22-1155BEEE4C3A@twistedmatrix.com>
 <CAG=rPVfP4kELVhbHh2uWA39DKJpGm1Tce_TwXq=umzwocTfRoQ@mail.gmail.com>
Message-ID: <CAG=rPVeN5xpVSNFnN3OiS2=q-FVeHOeRa9Pe6qECf=SgamWtyA@mail.gmail.com>

For https://button.flattr.com/flattr-badge-badge-large.png it looks like
this was deprecated in 2017.
In this blog post:
https://blog.flattr.com/2017/10/the-flattr-relaunch-what-to-expect/ :

*As the Flattr button is history you should not add it to your site
anymore.*


For https://www.paypalobjects.com/en_US/i/scr/pixel.gif' , I filed this
bug:

https://github.com/paypal/paypal-checkout-components/issues/1432

--
Craig


On Thu, Sep 17, 2020 at 12:47 PM Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Doing a force refresh in my browser fixed it.  I can now click on
> *Publish/Subscribe* and switch the tab.
>
> I'm still seeing these errors which is causing the Paypal and Flattr gif's
> not to load:
>
> Access to image at 'https://www.paypalobjects.com/en_US/i/scr/pixel.gif'
> from origin 'https://twistedmatrix.com' has been blocked by CORS policy:
> No 'Access-Control-Allow-Origin' header is present on the requested
> resource.
> (Access to image at 'https://button.flattr.com/flattr-badge-large.png'
> from origin 'https://twistedmatrix.com' has been blocked by CORS policy:
> No 'Access-Control-Allow-Origin' header is present on the requested
> resource.
>
> I'm not familiar with CORS, so don't know what the proper fix for this is.
>
> Thanks for fixing this.
> --
> Craig
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200918/41674348/attachment.htm>

From rodrigc at crodrigues.org  Sat Sep 19 14:30:35 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 19 Sep 2020 13:30:35 -0700
Subject: [Twisted-Python] Only run Azure, Travis,
 or CircleCI if GitHub actions pass
Message-ID: <CAG=rPVc-1-SDJML1pGBEj-t=q=WamGdz=rEw-wWQe0G+EySKyw@mail.gmail.com>

Adi,

Is it possible to configure the CI so that
Azure, Travis and CircleCI only runs if GitHub actions pass?

For example here:

https://github.com/twisted/twisted/runs/1137175269

*Azure Pipelines* and *Travis* should only run if the GitHub actions pass.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200919/9f3da57a/attachment.htm>

From adi at roiban.ro  Sat Sep 19 18:27:04 2020
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 20 Sep 2020 01:27:04 +0100
Subject: [Twisted-Python] Only run Azure, Travis,
 or CircleCI if GitHub actions pass
In-Reply-To: <CAG=rPVc-1-SDJML1pGBEj-t=q=WamGdz=rEw-wWQe0G+EySKyw@mail.gmail.com>
References: <CAG=rPVc-1-SDJML1pGBEj-t=q=WamGdz=rEw-wWQe0G+EySKyw@mail.gmail.com>
Message-ID: <CAFycZ9fxrZDxzOnAPOrssvGVjaUaD_RzP7fYQGx4mLoifO8dtw@mail.gmail.com>

On Sat, 19 Sep 2020 at 21:30, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Adi,
>
> Is it possible to configure the CI so that
> Azure, Travis and CircleCI only runs if GitHub actions pass?
>
> For example here:
>
> https://github.com/twisted/twisted/runs/1137175269
>
> *Azure Pipelines* and *Travis* should only run if the GitHub actions pass.
>
>
I think that is partially possible...but complicated.

My question: Why does Twisted need Azure Pipelines (sharing infastructure
with GihutActions), Travis-CI and Circle-Ci.

Why can't Twisted just use GitHub actions?

You can trigger one GitHub action workflow from another workflow, or
everything as depende jobs inside one workflow.

GitHub Action API is pretty good. I was able to implement a quick hack
which sends a diff to GitHub and executes a test without a commit,
just like Builbot Try [3].
I don't know how to implement something similar with Travis or Circle-Ci.

---------

Travis-CI builds can be triggered over the  HTTP API [1]...but I feel that
implementing it is complicated.
There should be a dedicated token... which should be created by a person,
and then stored as a secret in GttHub Actions.

I don't know how to trigger Circle-CI .. here is some info here [2] but
looks like it will be deprecated

I don't know how to trigger Azure Pipelines. but I guess that at some point
MS will kill Azure Pipelines

[1] https://docs.travis-ci.com/user/triggering-builds/
[2] https://circleci.com/docs/2.0/api-job-trigger/
[3] https://asciinema.org/a/nn1U7FLtbyWm57b0dT7U5sKD0
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200920/cd6fe561/attachment.htm>

From trac at twistedmatrix.com  Sun Sep 20 00:05:19 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 20 Sep 2020 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1600581919.67.6352634719956544499@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200920/abf0dcc9/attachment.htm>

From glyph at twistedmatrix.com  Sun Sep 20 22:21:51 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 20 Sep 2020 21:21:51 -0700
Subject: [Twisted-Python] Only run Azure, Travis,
 or CircleCI if GitHub actions pass
In-Reply-To: <CAFycZ9fxrZDxzOnAPOrssvGVjaUaD_RzP7fYQGx4mLoifO8dtw@mail.gmail.com>
References: <CAG=rPVc-1-SDJML1pGBEj-t=q=WamGdz=rEw-wWQe0G+EySKyw@mail.gmail.com>
 <CAFycZ9fxrZDxzOnAPOrssvGVjaUaD_RzP7fYQGx4mLoifO8dtw@mail.gmail.com>
Message-ID: <FDB25B4A-DEFC-4F2A-B943-22B190109785@twistedmatrix.com>



> On Sep 19, 2020, at 5:27 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On Sat, 19 Sep 2020 at 21:30, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
> Adi,
> 
> Is it possible to configure the CI so that
> Azure, Travis and CircleCI only runs if GitHub actions pass?
> 
> For example here:
> 
> https://github.com/twisted/twisted/runs/1137175269 <https://github.com/twisted/twisted/runs/1137175269>
> 
> Azure Pipelines and Travis should only run if the GitHub actions pass.
> 

My question is: why would we want to do this?  It seems like it would just make it slower to get feedback for contributors.

> I think that is partially possible...but complicated.
> 
> My question: Why does Twisted need Azure Pipelines (sharing infastructure with GihutActions), Travis-CI and Circle-Ci.
> 
> Why can't Twisted just use GitHub actions?

In a word: capacity. We have a large test matrix and more services = more parallel builds.

The calculus on this is changing all the time; the amount of free stuff that Github Actions gives us has substantially increased, other services have stood still, things that used to be special dispensations for extra parallel builds are now just the default, we test on fewer kernels than we used to (no FreeBSD, for example).

If we no longer get a substantial capacity benefit from using multiple services, we should definitely simplify and unify on one service.

> You can trigger one GitHub action workflow from another workflow, or everything as depende jobs inside one workflow.
> 
> GitHub Action API is pretty good. I was able to implement a quick hack which sends a diff to GitHub and executes a test without a commit, just like Builbot Try [3].
> I don't know how to implement something similar with Travis or Circle-Ci.
> 
> ---------
> 
> Travis-CI builds can be triggered over the  HTTP API [1]...but I feel that implementing it is complicated.
> There should be a dedicated token... which should be created by a person, and then stored as a secret in GttHub Actions.
> 
> I don't know how to trigger Circle-CI .. here is some info here [2] but looks like it will be deprecated
> 
> I don't know how to trigger Azure Pipelines. but I guess that at some point MS will kill Azure Pipelines 
> 
> [1] https://docs.travis-ci.com/user/triggering-builds/ <https://docs.travis-ci.com/user/triggering-builds/>
> [2] https://circleci.com/docs/2.0/api-job-trigger/ <https://circleci.com/docs/2.0/api-job-trigger/>
> [3] https://asciinema.org/a/nn1U7FLtbyWm57b0dT7U5sKD0 <https://asciinema.org/a/nn1U7FLtbyWm57b0dT7U5sKD0>-- 
> Adi Roiban
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200920/61d5a1c7/attachment.htm>

From rodrigc at crodrigues.org  Mon Sep 21 18:59:25 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 21 Sep 2020 17:59:25 -0700
Subject: [Twisted-Python] Only run Azure, Travis,
 or CircleCI if GitHub actions pass
In-Reply-To: <FDB25B4A-DEFC-4F2A-B943-22B190109785@twistedmatrix.com>
References: <CAG=rPVc-1-SDJML1pGBEj-t=q=WamGdz=rEw-wWQe0G+EySKyw@mail.gmail.com>
 <CAFycZ9fxrZDxzOnAPOrssvGVjaUaD_RzP7fYQGx4mLoifO8dtw@mail.gmail.com>
 <FDB25B4A-DEFC-4F2A-B943-22B190109785@twistedmatrix.com>
Message-ID: <CAG=rPVc=qeZ=Jvsw4QfnfpdU39Za6skX=m1Dy2TO0Ph9oZg=2g@mail.gmail.com>

On Sun, Sep 20, 2020 at 9:22 PM Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Sep 19, 2020, at 5:27 PM, Adi Roiban <adi at roiban.ro> wrote:
>
>
>
> On Sat, 19 Sep 2020 at 21:30, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
>> Adi,
>>
>> Is it possible to configure the CI so that
>> Azure, Travis and CircleCI only runs if GitHub actions pass?
>>
>> For example here:
>>
>> https://github.com/twisted/twisted/runs/1137175269
>>
>> *Azure Pipelines* and *Travis* should only run if the GitHub actions
>> pass.
>>
>>
> My question is: why would we want to do this?  It seems like it would just
> make it slower to get feedback for contributors.
>


If some jobs such as lint or mypy fail first quickly, then there is no
point in running the full
test suite.  That would give feedback faster to contributors that they need
to do some minor
fixes, before wasting cycles running the full test suite.

When CI using Azure Pipelines was implemented for Twisted,  Azure Pipelines
offered runners that ran on Windows which seemed to be more reliable than
Appveyor (which was what was used at the time).  Azure Pipelines also
offers runners that run on MacOS X.
If GitHub Actions offers runners for Windows and MacOS X which are reliable
enough,
the existing CI for Azure Pipelines could be moved to GitHub Actions quite
easily.

For CircleCI and Travis, probably those CI's could be moved to GitHub
Actions if we wanted, since those are running on Linux,
and aren't doing anything too sophisticated.

For the free version of GitHub Actions, the limits are 20 concurrent jobs
(I guess on Linux), and 5 concurrent jobs on  MacOS:

https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration#usage-limits

I think that is more than enough for Twisted's CI needs.

There is no rush to move everything to GitHub Actions, but that is
something we can consider over time.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200921/83029fab/attachment.htm>

From robert.difalco at gmail.com  Tue Sep 22 09:42:55 2020
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Tue, 22 Sep 2020 08:42:55 -0700
Subject: [Twisted-Python] Conch SFTP Questions
Message-ID: <CAAXGW-ycf3zJao0Gatc-jH3UfSE1EDEWnYGdU-T62JA1B6o+8g@mail.gmail.com>

Hey folks, I've cobbled together an SFTP client based on bits and pieces
I've found around the web. The issue is that it appears to be almost one
shot. I will need to send many files (the number not known ahead of time).
It's not clear to me when the connection is closed or how many factories
I'm creating. All the code I've grabbed looks like it's creating a new
factory for every SFTP file I send. Here's some of the code I have. It's
fairly straight forward in that it creates a directory if it doesn't exist
and then writes a file.

@attr.s(frozen=True)
class FileInfo(object):
    """
    Class that tells SFTP details about the file to send.
    """
    directory = attr.ib(converter=str)  # type: str
    name = attr.ib(converter=str)  # type: str
    data = attr.ib()  # type: str
    chunk_size = attr.ib(converter=int, default=CHUNK_SIZE)  # type: int

    def to_path(self):
        """
        Turns the folder and file name into a file path.
        """
        return self.directory + "/" + self.name


@attr.s(frozen=True)
class SFTPClientOptions(object):
    """
    Client options for sending SFTP files.

    :param host: the host of the SFTP server
    :param port: the port ofo the SFTP server
    :param fingerprint: the expected fingerprint of the host
    :param user: the user to login as
    :param identity: the identity file, optional and like the "-i"
command line option
    :param password: an optional password
    """
    host = attr.ib(converter=str)  # type: str
    port = attr.ib(converter=int)  # type: int
    fingerprint = attr.ib(converter=str)  # type: str
    user = attr.ib(converter=str)  # type: str
    identity = attr.ib(converter=optional(str), default=None)  # type:
Optional[str]
    password = attr.ib(converter=optional(str), default=None)  # type:
Optional[str]


@inlineCallbacks
def sftp_send(client_options, file_info):
    # type: (SFTPClientOptions, FileInfo)->Deferred
    """
    Primary function to send an file over SFTP. You can send a
password, identity, or both.
    :param client_options: the client connection options
    :param file_info: contains the file info to write
    :return: A deferred that signals "OK" if successful.
    """
    options = ClientOptions()
    options["host"] = client_options.host
    options["port"] = client_options.port
    options["password"] = client_options.password
    options["fingerprint"] = client_options.fingerprint

    if client_options.identity:
        options.identitys = [client_options.identity]

    conn = SFTPConnection()
    auth = SFTPUserAuthClient(client_options.user, options, conn)
    yield connect(client_options.host, client_options.port, options,
_verify_host_key, auth)

    sftpClient = yield conn.getSftpClientDeferred()
    yield _send_file(sftpClient, file_info)

    returnValue("OK")


def _verify_host_key(transport, host, pubKey, fingerprint):
    """
    Verify a host's key. Based on what is specified in options.

    @param host: Due to a bug in L{SSHClientTransport.verifyHostKey}, this is
    always the dotted-quad IP address of the host being connected to.
    @type host: L{str}

    @param transport: the client transport which is attempting to connect to
    the given host.
    @type transport: L{SSHClientTransport}

    @param fingerprint: the fingerprint of the given public key, in
    xx:xx:xx:... format.

    @param pubKey: The public key of the server being connected to.
    @type pubKey: L{str}

    @return: a L{Deferred} which is success or error
    """
    expected = transport.factory.options.get("fingerprint", "no_fingerprint")
    if fingerprint == expected:
        return succeed(1)

    log.error(
        "SSH Host Key fingerprint of ({fp}) does not match the
expected value of ({expected}).",
        fp=fingerprint, expected=expected)

    return fail(ConchError("Host fingerprint is unexpected."))


class SFTPSession(SSHChannel):
    """
    Creates an SFTP session.
    """
    name = "session"

    @inlineCallbacks
    def channelOpen(self, whatever):
        """
        Called when the channel is opened.  "whatever" is any data that the
        other side sent us when opening the channel.

        @type whatever: L{bytes}
        """
        yield self.conn.sendRequest(self, "subsystem", NS("sftp"),
wantReply=True)

        client = FileTransferClient()
        client.makeConnection(self)
        self.dataReceived = client.dataReceived
        self.conn.notifyClientIsReady(client)


class SFTPConnection(SSHConnection):
    def __init__(self):
        """
        Adds a deferred here so client can add a callback when the
SFTP client is ready.
        """
        SSHConnection.__init__(self)
        self._sftpClient = Deferred()

    def serviceStarted(self):
        """
        Opens an SFTP session when the SSH connection has been started.
        """
        self.openChannel(SFTPSession())

    def notifyClientIsReady(self, client):
        """
        Trigger callbacks associated with our SFTP client deferred. It's ready!
        """
        self._sftpClient.callback(client)

    def getSftpClientDeferred(self):
        return self._sftpClient


class SFTPUserAuthClient(SSHUserAuthClient):
    """
    Twisted Conch doesn't have a way of getting a password. By default
it gets it from stdin. This allows it
    to be retrieved from options instead.
    """
    def getPassword(self, prompt = None):
        """
        Get the password from the client options, is specified.
        """
        if "password" in self.options:
            return succeed(self.options["password"])

        return SSHUserAuthClient.getPassword(self, prompt)


@inlineCallbacks
def _send_file(client, file_info):
    # type: (FileTransferClient, FileInfo) -> Deferred
    """
    Creates a directory if required and then creates the file.
    :param client: the SFTP client to use
    :param file_info: contains file name, directory, and data
    """
    try:
        yield client.makeDirectory(file_info.directory, {})

    except SFTPError as e:
        # In testing on various system, either a 4 or an 11 will
indicate the directory
        # already exist. We are fine with that and want to continue if
it does. If we misinterpreted
        # error code here we are probably still ok since we will just
get the more systemic error
        # again on the next call to openFile.
        if e.code != 4 and e.code != 11:
            raise e

    f = yield client.openFile(file_info.to_path(), FXF_WRITE |
FXF_CREAT | FXF_TRUNC, {})

    try:
        yield _write_chunks(f, file_info.data, file_info.chunk_size)

    finally:
        yield f.close()


@inlineCallbacks
def _write_chunks(f, data, chunk_size):
    # type: (ClientFile, str, int) -> Deferred
    """
    Convenience function to write data in chunks

    :param f: the file to write to
    :param data: the data to write
    :param chunk_size: the chunk size
    """
    for offset in range(0, len(data), chunk_size):
        chunk = data[offset: offset + chunk_size]
        yield f.writeChunk(offset, chunk)


It gets called like this:

return sftp.sftp_send(
    client_options=SFTPClientOptions(
        host=self.options.host,
        port=self.options.port,
        user=self.options.user,
        fingerprint=self.options.fingerprint,
        identity=getattr(self.options, "identity", None),
        password=self._getPassword()),
    file_info=sftp.FileInfo(
        directory=self.options.directory,
        name=fileName,
        data=data,
        chunk_size=getattr(self.options, "chunkSize", sftp.CHUNK_SIZE)))

But I supposed I'd like to see something more like this:

sftpClient = self.getSftpClient(
    client_options=SFTPClientOptions(
        host=self.options.host,
        port=self.options.port,
        user=self.options.user,
        fingerprint=self.options.fingerprint,
        identity=getattr(self.options, "identity", None),
        password=self._getPassword()))

return sftpClient.send(
    file_info=sftp.FileInfo(
        directory=self.options.directory,
        name=fileName,
        data=data,
        chunk_size=getattr(self.options, "chunkSize", sftp.CHUNK_SIZE)))

Where sftpClient reuses the existing SSH connection if it is active (rather
than logging in each time). But maybe the sftp service doesn't multiplex so
I have to create a new SSHClientFactory every time I want to send a
distinct file?

Sorry for all the questions, new to twisted and a bit confused. Thanks!

Robert
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200922/22e56931/attachment-0001.htm>

From adi at roiban.ro  Tue Sep 22 13:56:37 2020
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 22 Sep 2020 20:56:37 +0100
Subject: [Twisted-Python] Conch SFTP Questions
In-Reply-To: <CAAXGW-ycf3zJao0Gatc-jH3UfSE1EDEWnYGdU-T62JA1B6o+8g@mail.gmail.com>
References: <CAAXGW-ycf3zJao0Gatc-jH3UfSE1EDEWnYGdU-T62JA1B6o+8g@mail.gmail.com>
Message-ID: <CAFycZ9foaYnP085_J__NvVfFyCf-b7E3jedp_zyWhka96qKVPw@mail.gmail.com>

Hi Robers

On Tue, 22 Sep 2020 at 16:43, Robert DiFalco <robert.difalco at gmail.com>
wrote:

> Hey folks, I've cobbled together an SFTP client based on bits and pieces
> I've found around the web. The issue is that it appears to be almost one
> shot. I will need to send many files (the number not known ahead of time).
> It's not clear to me when the connection is closed or how many factories
> I'm creating. All the code I've grabbed looks like it's creating a new
> factory for every SFTP file I send. Here's some of the code I have. It's
> fairly straight forward in that it creates a directory if it doesn't exist
> and then writes a file.
>
> @attr.s(frozen=True)
> class FileInfo(object):
>     """
>     Class that tells SFTP details about the file to send.
>     """
>     directory = attr.ib(converter=str)  # type: str
>     name = attr.ib(converter=str)  # type: str
>     data = attr.ib()  # type: str
>     chunk_size = attr.ib(converter=int, default=CHUNK_SIZE)  # type: int
>
>     def to_path(self):
>         """
>         Turns the folder and file name into a file path.
>         """
>         return self.directory + "/" + self.name
>
>
> @attr.s(frozen=True)
> class SFTPClientOptions(object):
>     """
>     Client options for sending SFTP files.
>
>     :param host: the host of the SFTP server
>     :param port: the port ofo the SFTP server
>     :param fingerprint: the expected fingerprint of the host
>     :param user: the user to login as
>     :param identity: the identity file, optional and like the "-i" command line option
>     :param password: an optional password
>     """
>     host = attr.ib(converter=str)  # type: str
>     port = attr.ib(converter=int)  # type: int
>     fingerprint = attr.ib(converter=str)  # type: str
>     user = attr.ib(converter=str)  # type: str
>     identity = attr.ib(converter=optional(str), default=None)  # type: Optional[str]
>     password = attr.ib(converter=optional(str), default=None)  # type: Optional[str]
>
>
> @inlineCallbacks
> def sftp_send(client_options, file_info):
>     # type: (SFTPClientOptions, FileInfo)->Deferred
>     """
>     Primary function to send an file over SFTP. You can send a password, identity, or both.
>     :param client_options: the client connection options
>     :param file_info: contains the file info to write
>     :return: A deferred that signals "OK" if successful.
>     """
>     options = ClientOptions()
>     options["host"] = client_options.host
>     options["port"] = client_options.port
>     options["password"] = client_options.password
>     options["fingerprint"] = client_options.fingerprint
>
>     if client_options.identity:
>         options.identitys = [client_options.identity]
>
>     conn = SFTPConnection()
>     auth = SFTPUserAuthClient(client_options.user, options, conn)
>     yield connect(client_options.host, client_options.port, options, _verify_host_key, auth)
>
>     sftpClient = yield conn.getSftpClientDeferred()
>     yield _send_file(sftpClient, file_info)
>
>     returnValue("OK")
>
>
> def _verify_host_key(transport, host, pubKey, fingerprint):
>     """
>     Verify a host's key. Based on what is specified in options.
>
>     @param host: Due to a bug in L{SSHClientTransport.verifyHostKey}, this is
>     always the dotted-quad IP address of the host being connected to.
>     @type host: L{str}
>
>     @param transport: the client transport which is attempting to connect to
>     the given host.
>     @type transport: L{SSHClientTransport}
>
>     @param fingerprint: the fingerprint of the given public key, in
>     xx:xx:xx:... format.
>
>     @param pubKey: The public key of the server being connected to.
>     @type pubKey: L{str}
>
>     @return: a L{Deferred} which is success or error
>     """
>     expected = transport.factory.options.get("fingerprint", "no_fingerprint")
>     if fingerprint == expected:
>         return succeed(1)
>
>     log.error(
>         "SSH Host Key fingerprint of ({fp}) does not match the expected value of ({expected}).",
>         fp=fingerprint, expected=expected)
>
>     return fail(ConchError("Host fingerprint is unexpected."))
>
>
> class SFTPSession(SSHChannel):
>     """
>     Creates an SFTP session.
>     """
>     name = "session"
>
>     @inlineCallbacks
>     def channelOpen(self, whatever):
>         """
>         Called when the channel is opened.  "whatever" is any data that the
>         other side sent us when opening the channel.
>
>         @type whatever: L{bytes}
>         """
>         yield self.conn.sendRequest(self, "subsystem", NS("sftp"), wantReply=True)
>
>         client = FileTransferClient()
>         client.makeConnection(self)
>         self.dataReceived = client.dataReceived
>         self.conn.notifyClientIsReady(client)
>
>
> class SFTPConnection(SSHConnection):
>     def __init__(self):
>         """
>         Adds a deferred here so client can add a callback when the SFTP client is ready.
>         """
>         SSHConnection.__init__(self)
>         self._sftpClient = Deferred()
>
>     def serviceStarted(self):
>         """
>         Opens an SFTP session when the SSH connection has been started.
>         """
>         self.openChannel(SFTPSession())
>
>     def notifyClientIsReady(self, client):
>         """
>         Trigger callbacks associated with our SFTP client deferred. It's ready!
>         """
>         self._sftpClient.callback(client)
>
>     def getSftpClientDeferred(self):
>         return self._sftpClient
>
>
> class SFTPUserAuthClient(SSHUserAuthClient):
>     """
>     Twisted Conch doesn't have a way of getting a password. By default it gets it from stdin. This allows it
>     to be retrieved from options instead.
>     """
>     def getPassword(self, prompt = None):
>         """
>         Get the password from the client options, is specified.
>         """
>         if "password" in self.options:
>             return succeed(self.options["password"])
>
>         return SSHUserAuthClient.getPassword(self, prompt)
>
>
> @inlineCallbacks
> def _send_file(client, file_info):
>     # type: (FileTransferClient, FileInfo) -> Deferred
>     """
>     Creates a directory if required and then creates the file.
>     :param client: the SFTP client to use
>     :param file_info: contains file name, directory, and data
>     """
>     try:
>         yield client.makeDirectory(file_info.directory, {})
>
>     except SFTPError as e:
>         # In testing on various system, either a 4 or an 11 will indicate the directory
>         # already exist. We are fine with that and want to continue if it does. If we misinterpreted
>         # error code here we are probably still ok since we will just get the more systemic error
>         # again on the next call to openFile.
>         if e.code != 4 and e.code != 11:
>             raise e
>
>     f = yield client.openFile(file_info.to_path(), FXF_WRITE | FXF_CREAT | FXF_TRUNC, {})
>
>     try:
>         yield _write_chunks(f, file_info.data, file_info.chunk_size)
>
>     finally:
>         yield f.close()
>
>
> @inlineCallbacks
> def _write_chunks(f, data, chunk_size):
>     # type: (ClientFile, str, int) -> Deferred
>     """
>     Convenience function to write data in chunks
>
>     :param f: the file to write to
>     :param data: the data to write
>     :param chunk_size: the chunk size
>     """
>     for offset in range(0, len(data), chunk_size):
>         chunk = data[offset: offset + chunk_size]
>         yield f.writeChunk(offset, chunk)
>
>
> It gets called like this:
>
> return sftp.sftp_send(
>     client_options=SFTPClientOptions(
>         host=self.options.host,
>         port=self.options.port,
>         user=self.options.user,
>         fingerprint=self.options.fingerprint,
>         identity=getattr(self.options, "identity", None),
>         password=self._getPassword()),
>     file_info=sftp.FileInfo(
>         directory=self.options.directory,
>         name=fileName,
>         data=data,
>         chunk_size=getattr(self.options, "chunkSize", sftp.CHUNK_SIZE)))
>
> But I supposed I'd like to see something more like this:
>
> sftpClient = self.getSftpClient(
>     client_options=SFTPClientOptions(
>         host=self.options.host,
>         port=self.options.port,
>         user=self.options.user,
>         fingerprint=self.options.fingerprint,
>         identity=getattr(self.options, "identity", None),
>         password=self._getPassword()))
>
> return sftpClient.send(
>     file_info=sftp.FileInfo(
>         directory=self.options.directory,
>         name=fileName,
>         data=data,
>         chunk_size=getattr(self.options, "chunkSize", sftp.CHUNK_SIZE)))
>
> Where sftpClient reuses the existing SSH connection if it is active
> (rather than logging in each time). But maybe the sftp service doesn't
> multiplex so I have to create a new SSHClientFactory every time I want to
> send a distinct file?
>
> Sorry for all the questions, new to twisted and a bit confused. Thanks!
>
> Robert
>
> It would help to have the full code...maybe a gist or repo.
I am not sure what `connect` from `yield connect(client_options.host,
client_options.port, options, _verify_host_key, auth)` is.

You will need to understand the low-level Twisted connection API and
implement a reconnecting factory.

When a new client-side connection is made, Twisted will use a factory to
create the protocol/code used to handle that connection,
You will then need to hook into the connectionLost method and do an
auto-connection if the connection is lost (when you were not expecting it).

---------

For my project, I am doing in this way:

I have my own subclass of FileTransferClient which overwrites the default
FileTransferClient,connectionLost method.
With that, I am notified when the SFTP subsystem was closed and I can then
trigger a new connection

-------------

If you want to reuse an SFTP session for multiple operations just reuse the
`sftpClient` instance that you got to trigger multiple operations

sftpClient = yield conn.getSftpClientDeferred()
for file_info in list_of_files_to_send:
    yield _send_file(sftpClient, file_info)

----------

Hope it helps

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200922/95ca83f5/attachment-0001.htm>

From rodrigc at crodrigues.org  Tue Sep 22 16:42:29 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 22 Sep 2020 15:42:29 -0700
Subject: [Twisted-Python] Request for new Twisted release?
Message-ID: <CAG=rPVdTO2SUOL+2rYvvYPPbnyz_FqATmvn0-85Qi4ahbnRpBw@mail.gmail.com>

Amber,

Can we have a new Twisted release within the next two months, say in
Nov./Dec. timeframe, or
sooner if you'd like?

In Twisted trunk, there are a lot of things that would be good to have in a
new release.

Here are some of the high order items:

*Python 3 Fixes*

   - twist dns --pyzone now works on Python 3   (I had a project 6 months
   ago where I would have liked to have this in a release)
   - twisted.web.twcgi now works on Python 3


*Python 3.8 Fixes*

   - all tests pass on all platforms on Python 3.8, including asyncio tests
   on Windows


*Python 3.9 Fixes*

   - all tests pass on Python 3.9.0rc2 (at least on Mac and Linux), (thanks
   to Michał Górny)


*Python 2.7*

   - Python 2.7 support has been dropped in trunk

*Black*

   - black code formatter has been integrated into the CI for Twisted, and
   all Twisted code is now formatted with Black (thanks to Tom Most)

*Mypy*

   - mypy is now run as part of Twisted CI and checks the code for every
   PR.  Type annotations compatible with Python 3.5+ are slowly being added to
   the codebase.


There are a lot of other small fixes and enhancements that people have
contributed since the last Twisted release.

I would like this new release to be the last release supporting Python 3.5,
so that Python 3.5 support can be removed in trunk, and PEP-526 style
variable annotations can be added in trunk.

Thanks for your consideration.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200922/dca56c86/attachment.htm>

From robert.difalco at gmail.com  Tue Sep 22 16:47:14 2020
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Tue, 22 Sep 2020 15:47:14 -0700
Subject: [Twisted-Python] Conch SFTP Questions
In-Reply-To: <CAFycZ9foaYnP085_J__NvVfFyCf-b7E3jedp_zyWhka96qKVPw@mail.gmail.com>
References: <CAAXGW-ycf3zJao0Gatc-jH3UfSE1EDEWnYGdU-T62JA1B6o+8g@mail.gmail.com>
 <CAFycZ9foaYnP085_J__NvVfFyCf-b7E3jedp_zyWhka96qKVPw@mail.gmail.com>
Message-ID: <CAAXGW-zTuYAQQEqQeCUd4cbmbH9fOEkRgX0pp2P8Ue4moEK2EA@mail.gmail.com>

Thanks! That is the full code. `connect` is from the conch library.

On Tue, Sep 22, 2020 at 12:57 PM Adi Roiban <adi at roiban.ro> wrote:

> Hi Robers
>
> On Tue, 22 Sep 2020 at 16:43, Robert DiFalco <robert.difalco at gmail.com>
> wrote:
>
>> Hey folks, I've cobbled together an SFTP client based on bits and pieces
>> I've found around the web. The issue is that it appears to be almost one
>> shot. I will need to send many files (the number not known ahead of time).
>> It's not clear to me when the connection is closed or how many factories
>> I'm creating. All the code I've grabbed looks like it's creating a new
>> factory for every SFTP file I send. Here's some of the code I have. It's
>> fairly straight forward in that it creates a directory if it doesn't exist
>> and then writes a file.
>>
>> @attr.s(frozen=True)
>> class FileInfo(object):
>>     """
>>     Class that tells SFTP details about the file to send.
>>     """
>>     directory = attr.ib(converter=str)  # type: str
>>     name = attr.ib(converter=str)  # type: str
>>     data = attr.ib()  # type: str
>>     chunk_size = attr.ib(converter=int, default=CHUNK_SIZE)  # type: int
>>
>>     def to_path(self):
>>         """
>>         Turns the folder and file name into a file path.
>>         """
>>         return self.directory + "/" + self.name
>>
>>
>> @attr.s(frozen=True)
>> class SFTPClientOptions(object):
>>     """
>>     Client options for sending SFTP files.
>>
>>     :param host: the host of the SFTP server
>>     :param port: the port ofo the SFTP server
>>     :param fingerprint: the expected fingerprint of the host
>>     :param user: the user to login as
>>     :param identity: the identity file, optional and like the "-i" command line option
>>     :param password: an optional password
>>     """
>>     host = attr.ib(converter=str)  # type: str
>>     port = attr.ib(converter=int)  # type: int
>>     fingerprint = attr.ib(converter=str)  # type: str
>>     user = attr.ib(converter=str)  # type: str
>>     identity = attr.ib(converter=optional(str), default=None)  # type: Optional[str]
>>     password = attr.ib(converter=optional(str), default=None)  # type: Optional[str]
>>
>>
>> @inlineCallbacks
>> def sftp_send(client_options, file_info):
>>     # type: (SFTPClientOptions, FileInfo)->Deferred
>>     """
>>     Primary function to send an file over SFTP. You can send a password, identity, or both.
>>     :param client_options: the client connection options
>>     :param file_info: contains the file info to write
>>     :return: A deferred that signals "OK" if successful.
>>     """
>>     options = ClientOptions()
>>     options["host"] = client_options.host
>>     options["port"] = client_options.port
>>     options["password"] = client_options.password
>>     options["fingerprint"] = client_options.fingerprint
>>
>>     if client_options.identity:
>>         options.identitys = [client_options.identity]
>>
>>     conn = SFTPConnection()
>>     auth = SFTPUserAuthClient(client_options.user, options, conn)
>>     yield connect(client_options.host, client_options.port, options, _verify_host_key, auth)
>>
>>     sftpClient = yield conn.getSftpClientDeferred()
>>     yield _send_file(sftpClient, file_info)
>>
>>     returnValue("OK")
>>
>>
>> def _verify_host_key(transport, host, pubKey, fingerprint):
>>     """
>>     Verify a host's key. Based on what is specified in options.
>>
>>     @param host: Due to a bug in L{SSHClientTransport.verifyHostKey}, this is
>>     always the dotted-quad IP address of the host being connected to.
>>     @type host: L{str}
>>
>>     @param transport: the client transport which is attempting to connect to
>>     the given host.
>>     @type transport: L{SSHClientTransport}
>>
>>     @param fingerprint: the fingerprint of the given public key, in
>>     xx:xx:xx:... format.
>>
>>     @param pubKey: The public key of the server being connected to.
>>     @type pubKey: L{str}
>>
>>     @return: a L{Deferred} which is success or error
>>     """
>>     expected = transport.factory.options.get("fingerprint", "no_fingerprint")
>>     if fingerprint == expected:
>>         return succeed(1)
>>
>>     log.error(
>>         "SSH Host Key fingerprint of ({fp}) does not match the expected value of ({expected}).",
>>         fp=fingerprint, expected=expected)
>>
>>     return fail(ConchError("Host fingerprint is unexpected."))
>>
>>
>> class SFTPSession(SSHChannel):
>>     """
>>     Creates an SFTP session.
>>     """
>>     name = "session"
>>
>>     @inlineCallbacks
>>     def channelOpen(self, whatever):
>>         """
>>         Called when the channel is opened.  "whatever" is any data that the
>>         other side sent us when opening the channel.
>>
>>         @type whatever: L{bytes}
>>         """
>>         yield self.conn.sendRequest(self, "subsystem", NS("sftp"), wantReply=True)
>>
>>         client = FileTransferClient()
>>         client.makeConnection(self)
>>         self.dataReceived = client.dataReceived
>>         self.conn.notifyClientIsReady(client)
>>
>>
>> class SFTPConnection(SSHConnection):
>>     def __init__(self):
>>         """
>>         Adds a deferred here so client can add a callback when the SFTP client is ready.
>>         """
>>         SSHConnection.__init__(self)
>>         self._sftpClient = Deferred()
>>
>>     def serviceStarted(self):
>>         """
>>         Opens an SFTP session when the SSH connection has been started.
>>         """
>>         self.openChannel(SFTPSession())
>>
>>     def notifyClientIsReady(self, client):
>>         """
>>         Trigger callbacks associated with our SFTP client deferred. It's ready!
>>         """
>>         self._sftpClient.callback(client)
>>
>>     def getSftpClientDeferred(self):
>>         return self._sftpClient
>>
>>
>> class SFTPUserAuthClient(SSHUserAuthClient):
>>     """
>>     Twisted Conch doesn't have a way of getting a password. By default it gets it from stdin. This allows it
>>     to be retrieved from options instead.
>>     """
>>     def getPassword(self, prompt = None):
>>         """
>>         Get the password from the client options, is specified.
>>         """
>>         if "password" in self.options:
>>             return succeed(self.options["password"])
>>
>>         return SSHUserAuthClient.getPassword(self, prompt)
>>
>>
>> @inlineCallbacks
>> def _send_file(client, file_info):
>>     # type: (FileTransferClient, FileInfo) -> Deferred
>>     """
>>     Creates a directory if required and then creates the file.
>>     :param client: the SFTP client to use
>>     :param file_info: contains file name, directory, and data
>>     """
>>     try:
>>         yield client.makeDirectory(file_info.directory, {})
>>
>>     except SFTPError as e:
>>         # In testing on various system, either a 4 or an 11 will indicate the directory
>>         # already exist. We are fine with that and want to continue if it does. If we misinterpreted
>>         # error code here we are probably still ok since we will just get the more systemic error
>>         # again on the next call to openFile.
>>         if e.code != 4 and e.code != 11:
>>             raise e
>>
>>     f = yield client.openFile(file_info.to_path(), FXF_WRITE | FXF_CREAT | FXF_TRUNC, {})
>>
>>     try:
>>         yield _write_chunks(f, file_info.data, file_info.chunk_size)
>>
>>     finally:
>>         yield f.close()
>>
>>
>> @inlineCallbacks
>> def _write_chunks(f, data, chunk_size):
>>     # type: (ClientFile, str, int) -> Deferred
>>     """
>>     Convenience function to write data in chunks
>>
>>     :param f: the file to write to
>>     :param data: the data to write
>>     :param chunk_size: the chunk size
>>     """
>>     for offset in range(0, len(data), chunk_size):
>>         chunk = data[offset: offset + chunk_size]
>>         yield f.writeChunk(offset, chunk)
>>
>>
>> It gets called like this:
>>
>> return sftp.sftp_send(
>>     client_options=SFTPClientOptions(
>>         host=self.options.host,
>>         port=self.options.port,
>>         user=self.options.user,
>>         fingerprint=self.options.fingerprint,
>>         identity=getattr(self.options, "identity", None),
>>         password=self._getPassword()),
>>     file_info=sftp.FileInfo(
>>         directory=self.options.directory,
>>         name=fileName,
>>         data=data,
>>         chunk_size=getattr(self.options, "chunkSize", sftp.CHUNK_SIZE)))
>>
>> But I supposed I'd like to see something more like this:
>>
>> sftpClient = self.getSftpClient(
>>     client_options=SFTPClientOptions(
>>         host=self.options.host,
>>         port=self.options.port,
>>         user=self.options.user,
>>         fingerprint=self.options.fingerprint,
>>         identity=getattr(self.options, "identity", None),
>>         password=self._getPassword()))
>>
>> return sftpClient.send(
>>     file_info=sftp.FileInfo(
>>         directory=self.options.directory,
>>         name=fileName,
>>         data=data,
>>         chunk_size=getattr(self.options, "chunkSize", sftp.CHUNK_SIZE)))
>>
>> Where sftpClient reuses the existing SSH connection if it is active
>> (rather than logging in each time). But maybe the sftp service doesn't
>> multiplex so I have to create a new SSHClientFactory every time I want to
>> send a distinct file?
>>
>> Sorry for all the questions, new to twisted and a bit confused. Thanks!
>>
>> Robert
>>
>> It would help to have the full code...maybe a gist or repo.
> I am not sure what `connect` from `yield connect(client_options.host,
> client_options.port, options, _verify_host_key, auth)` is.
>
> You will need to understand the low-level Twisted connection API and
> implement a reconnecting factory.
>
> When a new client-side connection is made, Twisted will use a factory to
> create the protocol/code used to handle that connection,
> You will then need to hook into the connectionLost method and do an
> auto-connection if the connection is lost (when you were not expecting it).
>
> ---------
>
> For my project, I am doing in this way:
>
> I have my own subclass of FileTransferClient which overwrites the default
> FileTransferClient,connectionLost method.
> With that, I am notified when the SFTP subsystem was closed and I can then
> trigger a new connection
>
> -------------
>
> If you want to reuse an SFTP session for multiple operations just reuse
> the `sftpClient` instance that you got to trigger multiple operations
>
> sftpClient = yield conn.getSftpClientDeferred()
> for file_info in list_of_files_to_send:
>     yield _send_file(sftpClient, file_info)
>
> ----------
>
> Hope it helps
>
> --
> Adi Roiban
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200922/04ce963d/attachment-0001.htm>

From glyph at twistedmatrix.com  Wed Sep 23 10:43:38 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Sep 2020 09:43:38 -0700
Subject: [Twisted-Python] Conch SFTP Questions
In-Reply-To: <CAAXGW-zTuYAQQEqQeCUd4cbmbH9fOEkRgX0pp2P8Ue4moEK2EA@mail.gmail.com>
References: <CAAXGW-ycf3zJao0Gatc-jH3UfSE1EDEWnYGdU-T62JA1B6o+8g@mail.gmail.com>
 <CAFycZ9foaYnP085_J__NvVfFyCf-b7E3jedp_zyWhka96qKVPw@mail.gmail.com>
 <CAAXGW-zTuYAQQEqQeCUd4cbmbH9fOEkRgX0pp2P8Ue4moEK2EA@mail.gmail.com>
Message-ID: <594B5844-1518-4EA7-9913-867FF7260FF6@twistedmatrix.com>


> On Sep 22, 2020, at 3:47 PM, Robert DiFalco <robert.difalco at gmail.com> wrote:
> 
> Thanks! That is the full code. `connect` is from the conch library. 

To clarify Adi's comment somewhat, the "full" code would mean following the rules of http://sscce.org <http://sscce.org/> here; i.e. minimize the example to be runnable on its own, then attach the code as you actually run it (as a .py file, or in a link to a gist or a repo), rather than pasted into the body of the email which can easily lead to transcription errors.

For example, when I do paste your code into a file and run it, what I get is:

Traceback (most recent call last):
  File "stuff.py", line 1, in <module>
    @attr.s(frozen=True)
NameError: name 'attr' is not defined

and yeah, one could guess as to where to get `import attr`, from — me especially ;-) - but then we have to repeat that process for dozens of names, one at a time, gradually reassembling your code into something that approximates what it looked like to you; then we have to hook up your connection example to be runnable on its own, and after we're done guessing at all the imports we have to guess at the versions of things in your environment.  So a `requires.txt` generated by `pip freeze` or similar would also be a helpful addition here, just so someone attempting to tinker with your code can quickly get to the point rather than spending lots of time setting up things you've already done.

Thanks for using Twisted, and good luck with Conch!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200923/d54b3590/attachment.htm>

From glyph at twistedmatrix.com  Wed Sep 23 11:10:29 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Sep 2020 10:10:29 -0700
Subject: [Twisted-Python] Request for new Twisted release?
In-Reply-To: <CAG=rPVdTO2SUOL+2rYvvYPPbnyz_FqATmvn0-85Qi4ahbnRpBw@mail.gmail.com>
References: <CAG=rPVdTO2SUOL+2rYvvYPPbnyz_FqATmvn0-85Qi4ahbnRpBw@mail.gmail.com>
Message-ID: <68FFD1F6-1F25-4FD0-B5A8-9F17133D55E2@twistedmatrix.com>



> On Sep 22, 2020, at 3:42 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Amber,
> 
> Can we have a new Twisted release within the next two months, say in Nov./Dec. timeframe, or
> sooner if you'd like?

Given that Amber hasn't been super responsive lately, and that I firmly believe it should be possible to take breaks from open source (particularly amidst the, you know, global collapse of civilization and stuff), I will take the opportunity point out yet again that http://twisted.readthedocs.org/en/latest/core/development/policy/release-process.html <http://twisted.readthedocs.org/en/latest/core/development/policy/release-process.html> documents the release process and any sufficiently-motivated volunteer (with at least a bit of history & trust within the community) can step forward and receive all the permissions necessary to do all of these steps.

I will personally volunteer to fill in the permissions gaps for any interested parties, although I don't have much bandwidth for the release itself.

Amber, if you want to do it, go ahead and get started, I'm just saying we don't need to put this on your shoulders :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200923/69df5af2/attachment.htm>

From robert.difalco at gmail.com  Thu Sep 24 12:42:54 2020
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Thu, 24 Sep 2020 11:42:54 -0700
Subject: [Twisted-Python] Conch SFTP Questions
In-Reply-To: <594B5844-1518-4EA7-9913-867FF7260FF6@twistedmatrix.com>
References: <CAAXGW-ycf3zJao0Gatc-jH3UfSE1EDEWnYGdU-T62JA1B6o+8g@mail.gmail.com>
 <CAFycZ9foaYnP085_J__NvVfFyCf-b7E3jedp_zyWhka96qKVPw@mail.gmail.com>
 <CAAXGW-zTuYAQQEqQeCUd4cbmbH9fOEkRgX0pp2P8Ue4moEK2EA@mail.gmail.com>
 <594B5844-1518-4EA7-9913-867FF7260FF6@twistedmatrix.com>
Message-ID: <CAAXGW-zQRd7PO2MJ1LTNUs_3rf8xKkAfNqh423xZAjot1eRG_A@mail.gmail.com>

Here's a gist and here are my high level questions, I hope they make sense
and this is enough context.

https://gist.github.com/radifalco/5a5cca4bf8d49d5c61113e36f9be7553

1. I would expect a `makeDirectory` to raise an exception when the SSH
server closes a connection that is idle for too long (or any connection
error/issue). However, it appears like `makeConnection` never fires any
callbacks OR errbacks? In fact it doesn't seem to yield at all. It detects
the connection is closed, calls closed, but `makeDirectory` never has any
callbacks triggered. What am I missing? Is there a timeout I'm not setting?
I wouldn't think so since the FileTransferClient and underlying transport
already know the connection is no good.

https://gist.github.com/radifalco/5a5cca4bf8d49d5c61113e36f9be7553#file-sftp-py-L280-L297

2. I can't quite figure out the reconnect/retry logic when the server
closes the connection. Because when it recreates the connection the
SFTPFileTransferClient has already been sent to the deferred. Maybe I need
to retain that instance and call makeConnection on it again and not fire
the deferred? As you can see I tried that but it doesn't work.

On Wed, Sep 23, 2020 at 9:43 AM Glyph <glyph at twistedmatrix.com> wrote:

>
> On Sep 22, 2020, at 3:47 PM, Robert DiFalco <robert.difalco at gmail.com>
> wrote:
>
> Thanks! That is the full code. `connect` is from the conch library.
>
>
> To clarify Adi's comment somewhat, the "full" code would mean following
> the rules of http://sscce.org here; i.e. minimize the example to be
> runnable on its own, then attach the code as you actually run it (as a .py
> file, or in a link to a gist or a repo), rather than pasted into the body
> of the email which can easily lead to transcription errors.
>
> For example, when I do paste your code into a file and run it, what I get
> is:
>
> Traceback (most recent call last):
>   File "stuff.py", line 1, in <module>
>     @attr.s(frozen=True)
> NameError: name 'attr' is not defined
>
>
> and yeah, one could guess as to where to get `import attr`, from — me
> especially ;-) - but then we have to repeat that process for dozens of
> names, one at a time, gradually reassembling your code into something that
> approximates what it looked like to you; then we have to hook up your
> connection example to be runnable on its own, and after we're done guessing
> at all the imports we have to guess at the versions of things in your
> environment.  So a `requires.txt` generated by `pip freeze` or similar
> would also be a helpful addition here, just so someone attempting to tinker
> with your code can quickly get to the point rather than spending lots of
> time setting up things you've already done.
>
> Thanks for using Twisted, and good luck with Conch!
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200924/a9638b60/attachment.htm>

From robert.difalco at gmail.com  Thu Sep 24 17:15:15 2020
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Thu, 24 Sep 2020 16:15:15 -0700
Subject: [Twisted-Python] Retry: Conch Issues
Message-ID: <CAAXGW-zuSCKq1fJHyfNzkZFf8zAYK_hYBCiaiTKXA1MvbmMEYw@mail.gmail.com>

I am having troubles with Conch. I've been able to reproduce them in a unit
test and all the code is here along with requirements.txt:
   https://github.com/radifalco/conch_issues

I'm trying to reuse my connection, but if it is idle too long the server
shuts it down. What I don't understand is why the next call to
`FileTransferClient` does not call back or errback? It will just hang
forever even though the Factory and Transport know the connection was
closed (as evidenced by the log messages).

I don't ever want to hang, if I use FileTransferClient I would like it
always call a callback or errback. I feel like Conch is missing a deferred
somewhere but damned if I can find it.

Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200924/b4d9e8c6/attachment.htm>

From adi at roiban.ro  Thu Sep 24 17:31:05 2020
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 25 Sep 2020 00:31:05 +0100
Subject: [Twisted-Python] Request for new Twisted release?
In-Reply-To: <68FFD1F6-1F25-4FD0-B5A8-9F17133D55E2@twistedmatrix.com>
References: <CAG=rPVdTO2SUOL+2rYvvYPPbnyz_FqATmvn0-85Qi4ahbnRpBw@mail.gmail.com>
 <68FFD1F6-1F25-4FD0-B5A8-9F17133D55E2@twistedmatrix.com>
Message-ID: <CAFycZ9fEFJed-7=youyMfO2jQZmrtHLmKuK=xUq3XrtKNdCAmg@mail.gmail.com>

On Wed, 23 Sep 2020 at 18:11, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Sep 22, 2020, at 3:42 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> Amber,
>
> Can we have a new Twisted release within the next two months, say in
> Nov./Dec. timeframe, or
> sooner if you'd like?
>
>
> Given that Amber hasn't been super responsive lately, and that I firmly
> believe it should be possible to take breaks from open source (particularly
> amidst the, you know, global collapse of civilization and stuff), I will
> take the opportunity point out yet again that
> http://twisted.readthedocs.org/en/latest/core/development/policy/release-process.html documents
> the release process and any sufficiently-motivated volunteer (with at least
> a *bit* of history & trust within the community) can step forward and
> receive all the permissions necessary to do all of these steps.
>
> I will personally volunteer to fill in the permissions gaps for any
> interested parties, although I don't have much bandwidth for the release
> itself.
>
> Amber, if you want to do it, go ahead and get started, I'm just saying we
> don't need to put this on your shoulders :).
>
>
Hi,

To me, the current release process seems complicated and requires manual
work and I think that the release document needs some update.

The release documentation starts with "Tarballs for Twisted as a whole, and
for each of its sub-projects".
Is that still the case?

Maybe the release can be simplified and automated:

* Build the source and binary wheel in GitHub actions as this can be done
for Linux (Ubuntu), Windows and macOS.
* Host the download source and wheel files only on PyPi and publish them
automatically from GitHub action on a new tag is created.
* Host the documentation only on the Read The Docs.
* Hos the API documentation on Read The Docs - might need some hacking, but
at release we can create an API docs package as an artifact which is then
pulled when Read The Docs documentation is created and copied as extra HTML
files.
* Move Twisted blog to GitHub pages... or even read the docs with a
separate theme like Crate [1] ... if the blog is still required.

------

With the above implemented the release should look like:

* Each time the tests for a PR are executed, pydoctor will run and
automatically create the API files as an artifact available for download.
* *Manually* create a new branch in which the version is updated and the
changelog/news/release note is created and all the news fragment files are
removed/ . Have the branch reviewed and approved with all the tests passed.
When the pydoctor tests are executed, the API docs are created.
* The release branches can have a naming convention line 'release-20.0.0`.
At first the release branch can have a release candidate version and a
GitHub can automatically push the release to PyPi.
* *Manually* send an email to Twisted mailing list to announce the
pre-release.
* Once the branch is merged, *manually* push a new tag
* The new tag should trigger the GitHub action for publishing the release
on PyPi
* The new merge in master should trigger the Read The Docs build... which
now will also include the static API docs pages.
* Once the release is done, *manually* send a new email to the mailing list.

There are still many manual steps, but the only permissions required is
commit to the repo.
This will no longer use any of the Twisted own infrastructure.

[1] https://sphinx-themes.org/html/crate-docs-theme/crate/basic.html

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200925/80719734/attachment-0001.htm>

From adi at roiban.ro  Thu Sep 24 18:35:55 2020
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 25 Sep 2020 01:35:55 +0100
Subject: [Twisted-Python] Retry: Conch Issues
In-Reply-To: <CAAXGW-zuSCKq1fJHyfNzkZFf8zAYK_hYBCiaiTKXA1MvbmMEYw@mail.gmail.com>
References: <CAAXGW-zuSCKq1fJHyfNzkZFf8zAYK_hYBCiaiTKXA1MvbmMEYw@mail.gmail.com>
Message-ID: <CAFycZ9dmy3EfC5Fz-62Mgr1sOZHknBApVQmfbAFsHH6EehEegA@mail.gmail.com>

Hi

On Fri, 25 Sep 2020 at 00:15, Robert DiFalco <robert.difalco at gmail.com>
wrote:

> I am having troubles with Conch. I've been able to reproduce them in a
> unit test and all the code is here along with requirements.txt:
>    https://github.com/radifalco/conch_issues
>
> I'm trying to reuse my connection, but if it is idle too long the server
> shuts it down. What I don't understand is why the next call to
> `FileTransferClient` does not call back or errback? It will just hang
> forever even though the Factory and Transport know the connection was
> closed (as evidenced by the log messages).
>
> I don't ever want to hang, if I use FileTransferClient I would like it
> always call a callback or errback. I feel like Conch is missing a deferred
> somewhere but damned if I can find it.
>
> Thanks!
>
> Have you checked
https://twistedmatrix.com/documents/current/core/howto/clients.html#reconnection
?

I see that `connector.connect()` is commented in your code.

The theory is that once a client connection is lost, you will need to call
again the whole chain starting with reactor.connectTCP.

---------

I know the pain here with SFTP as there is a lot of wrapping: TCP client,
SSH high level protocol, SSH session, SSH channel, SSH subsystem.

One option is to use MySSHClientFactory as a proxy for any SFTP operation.
When the SSH channel is open and you have received the response from the
subsystem request, pass the SFTP client all the way down to the factory.
The factory will know when the connection is lost and then trigger a new
connection... which will update the SFTP client instance on the factory.

That is, instead of getting the SFTP client, the SFTP client will be pushed
to the factory.

I think that the main issue with your code is that it tries to work
directly with the SFTP client, instead of using the factory as a proxy for
SFTP operations.

A protocol represents a single connection that is already made and it can't
reconnect itself.
The factory is responsible for handling new connections, or triggering new
connections.

So, your high-level API is using a very low-level object.
The SFTP client represents an SSH connection that was already made,
authenticated and the SFTP subsystem requested.

For my production code I am doing something like this:
MySSHClientFactory is instantiated with the reactor and the
SFTPClientOptions.
Then, when I want to list a directory I call
sftp_factory.listDir('some/path')
The factory can then check if it needs to get an SFTP client or reuse an
existing one.
A SFTP client is obtained by triggering a new connectTCP to the reactor
with `self` as the factory.

Does it make sense?

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200925/e5dbe4ce/attachment.htm>

From robert.difalco at gmail.com  Thu Sep 24 18:54:01 2020
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Thu, 24 Sep 2020 17:54:01 -0700
Subject: [Twisted-Python] Retry: Conch Issues
In-Reply-To: <CAFycZ9dmy3EfC5Fz-62Mgr1sOZHknBApVQmfbAFsHH6EehEegA@mail.gmail.com>
References: <CAAXGW-zuSCKq1fJHyfNzkZFf8zAYK_hYBCiaiTKXA1MvbmMEYw@mail.gmail.com>
 <CAFycZ9dmy3EfC5Fz-62Mgr1sOZHknBApVQmfbAFsHH6EehEegA@mail.gmail.com>
Message-ID: <CAAXGW-z-9xXfsZcKhrkV6pm7zWz-56jdBF_=uKCBg7Xemnx41g@mail.gmail.com>

Thank you so much Aldi! Yes there are so many little decoupled pieces it's
difficult to figre out how to use them in concert. .Let's leave aside the
reconnecting option for a minute and just talk about how to percolate
errors up. Because currently I want to be able to always return from a
FileTransferClient call. By upleveling things do you mean like this?

Wait, ha, I actually don't know because the deferreds are one shot? Why
exactly is makeDirectory not firing any callbacks or errbacks and what can
I add at the Factory level to make it do so?

class MySSHClientFactory(SSHClientFactory):
    def clientConnectionLost(self, connector, reason):
        self.op.addErrback(reason)

    def makeDirectory(self, path, attrs):
        self.op = Deferred()
        def _cbSuccess(result):
            self.op.callback(result)

        return self.sftpClient.makeDirectory(path,
attrs).addCallback(_cbSuccess)d

That won't work. If you can give me a breadcrumb or idiom I can apply it
across everything. I'm just too new to twisted to know the correct idiom
here. Totally good with moving the methods up to the factory, just not sure
how.



On Thu, Sep 24, 2020 at 5:36 PM Adi Roiban <adi at roiban.ro> wrote:

> Hi
>
> On Fri, 25 Sep 2020 at 00:15, Robert DiFalco <robert.difalco at gmail.com>
> wrote:
>
>> I am having troubles with Conch. I've been able to reproduce them in a
>> unit test and all the code is here along with requirements.txt:
>>    https://github.com/radifalco/conch_issues
>>
>> I'm trying to reuse my connection, but if it is idle too long the server
>> shuts it down. What I don't understand is why the next call to
>> `FileTransferClient` does not call back or errback? It will just hang
>> forever even though the Factory and Transport know the connection was
>> closed (as evidenced by the log messages).
>>
>> I don't ever want to hang, if I use FileTransferClient I would like it
>> always call a callback or errback. I feel like Conch is missing a deferred
>> somewhere but damned if I can find it.
>>
>> Thanks!
>>
>> Have you checked
> https://twistedmatrix.com/documents/current/core/howto/clients.html#reconnection
> ?
>
> I see that `connector.connect()` is commented in your code.
>
> The theory is that once a client connection is lost, you will need to call
> again the whole chain starting with reactor.connectTCP.
>
> ---------
>
> I know the pain here with SFTP as there is a lot of wrapping: TCP client,
> SSH high level protocol, SSH session, SSH channel, SSH subsystem.
>
> One option is to use MySSHClientFactory as a proxy for any SFTP operation.
> When the SSH channel is open and you have received the response from the
> subsystem request, pass the SFTP client all the way down to the factory.
> The factory will know when the connection is lost and then trigger a new
> connection... which will update the SFTP client instance on the factory.
>
> That is, instead of getting the SFTP client, the SFTP client will be
> pushed to the factory.
>
> I think that the main issue with your code is that it tries to work
> directly with the SFTP client, instead of using the factory as a proxy for
> SFTP operations.
>
> A protocol represents a single connection that is already made and it
> can't reconnect itself.
> The factory is responsible for handling new connections, or triggering new
> connections.
>
> So, your high-level API is using a very low-level object.
> The SFTP client represents an SSH connection that was already made,
> authenticated and the SFTP subsystem requested.
>
> For my production code I am doing something like this:
> MySSHClientFactory is instantiated with the reactor and the
> SFTPClientOptions.
> Then, when I want to list a directory I call
> sftp_factory.listDir('some/path')
> The factory can then check if it needs to get an SFTP client or reuse an
> existing one.
> A SFTP client is obtained by triggering a new connectTCP to the reactor
> with `self` as the factory.
>
> Does it make sense?
>
> --
> Adi Roiban
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200924/ce0015e7/attachment.htm>

From exarkun at twistedmatrix.com  Fri Sep 25 04:40:33 2020
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 25 Sep 2020 06:40:33 -0400
Subject: [Twisted-Python] Retry: Conch Issues
In-Reply-To: <CAAXGW-z-9xXfsZcKhrkV6pm7zWz-56jdBF_=uKCBg7Xemnx41g@mail.gmail.com>
References: <CAAXGW-zuSCKq1fJHyfNzkZFf8zAYK_hYBCiaiTKXA1MvbmMEYw@mail.gmail.com>
 <CAFycZ9dmy3EfC5Fz-62Mgr1sOZHknBApVQmfbAFsHH6EehEegA@mail.gmail.com>
 <CAAXGW-z-9xXfsZcKhrkV6pm7zWz-56jdBF_=uKCBg7Xemnx41g@mail.gmail.com>
Message-ID: <CAEeXt4OEZFqp5-KpKBdmwvbLhbvrw=Y-DtrDdDzFV4kJbjW+ZQ@mail.gmail.com>

On Thu, Sep 24, 2020 at 8:54 PM Robert DiFalco <robert.difalco at gmail.com>
wrote:

> Why exactly is makeDirectory not firing any callbacks or errbacks and what
> can I add at the Factory level to make it do so?
>

class MySSHClientFactory(SSHClientFactory):
>     def clientConnectionLost(self, connector, reason):
>         self.op.addErrback(reason)
>
>     def makeDirectory(self, path, attrs):
>         self.op = Deferred()
>         def _cbSuccess(result):
>             self.op.callback(result)
>
>         return self.sftpClient.makeDirectory(path, attrs).addCallback(_cbSuccess)d
>
>
This code is wrong.  It takes what *may* be a perfectly good Deferred from
makeDirectory and breaks the error chain off of it.  The correct way to do
this would be more like `makeDirectory(...).chainDeferred(self.op)`.
However, `self.op` and `_cbSuccess` are doing nothing useful here so you
may as well just delete all that and return the `makeDirectory(...)`
Deferred.

If *that* Deferred doesn't fire its errback chain when the connection is
closed, that's a bug in Conch.  If you can put together a minimal example
and file a ticket, that would be wonderful and perhaps someone can get it
fixed for you.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200925/dc2984ca/attachment-0001.htm>

From robert.difalco at gmail.com  Fri Sep 25 08:42:36 2020
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Fri, 25 Sep 2020 07:42:36 -0700
Subject: [Twisted-Python] Retry: Conch Issues
In-Reply-To: <CAEeXt4OEZFqp5-KpKBdmwvbLhbvrw=Y-DtrDdDzFV4kJbjW+ZQ@mail.gmail.com>
References: <CAAXGW-zuSCKq1fJHyfNzkZFf8zAYK_hYBCiaiTKXA1MvbmMEYw@mail.gmail.com>
 <CAFycZ9dmy3EfC5Fz-62Mgr1sOZHknBApVQmfbAFsHH6EehEegA@mail.gmail.com>
 <CAAXGW-z-9xXfsZcKhrkV6pm7zWz-56jdBF_=uKCBg7Xemnx41g@mail.gmail.com>
 <CAEeXt4OEZFqp5-KpKBdmwvbLhbvrw=Y-DtrDdDzFV4kJbjW+ZQ@mail.gmail.com>
Message-ID: <CAAXGW-xFKgZDeFQbzkANQzsgqgYEvR+CGxmkXV7oLc_SDq5pxw@mail.gmail.com>

I agree it's a bug in conch and I believe my repo shows a reproducible
example. Run the test, it never completes because the deferred from
`makeDirectory` never fires. .

On Fri, Sep 25, 2020 at 3:41 AM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Thu, Sep 24, 2020 at 8:54 PM Robert DiFalco <robert.difalco at gmail.com>
> wrote:
>
>> Why exactly is makeDirectory not firing any callbacks or errbacks and
>> what can I add at the Factory level to make it do so?
>>
>
> class MySSHClientFactory(SSHClientFactory):
>>     def clientConnectionLost(self, connector, reason):
>>         self.op.addErrback(reason)
>>
>>     def makeDirectory(self, path, attrs):
>>         self.op = Deferred()
>>         def _cbSuccess(result):
>>             self.op.callback(result)
>>
>>         return self.sftpClient.makeDirectory(path, attrs).addCallback(_cbSuccess)d
>>
>>
> This code is wrong.  It takes what *may* be a perfectly good Deferred
> from makeDirectory and breaks the error chain off of it.  The correct way
> to do this would be more like `makeDirectory(...).chainDeferred(self.op)`.
> However, `self.op` and `_cbSuccess` are doing nothing useful here so you
> may as well just delete all that and return the `makeDirectory(...)`
> Deferred.
>
> If *that* Deferred doesn't fire its errback chain when the connection is
> closed, that's a bug in Conch.  If you can put together a minimal example
> and file a ticket, that would be wonderful and perhaps someone can get it
> fixed for you.
>
> Jean-Paul
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200925/e36d9ba8/attachment.htm>

From robert.difalco at gmail.com  Fri Sep 25 15:16:53 2020
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Fri, 25 Sep 2020 14:16:53 -0700
Subject: [Twisted-Python] Retry: Conch Issues
In-Reply-To: <CAAXGW-xFKgZDeFQbzkANQzsgqgYEvR+CGxmkXV7oLc_SDq5pxw@mail.gmail.com>
References: <CAAXGW-zuSCKq1fJHyfNzkZFf8zAYK_hYBCiaiTKXA1MvbmMEYw@mail.gmail.com>
 <CAFycZ9dmy3EfC5Fz-62Mgr1sOZHknBApVQmfbAFsHH6EehEegA@mail.gmail.com>
 <CAAXGW-z-9xXfsZcKhrkV6pm7zWz-56jdBF_=uKCBg7Xemnx41g@mail.gmail.com>
 <CAEeXt4OEZFqp5-KpKBdmwvbLhbvrw=Y-DtrDdDzFV4kJbjW+ZQ@mail.gmail.com>
 <CAAXGW-xFKgZDeFQbzkANQzsgqgYEvR+CGxmkXV7oLc_SDq5pxw@mail.gmail.com>
Message-ID: <CAAXGW-wbV6az5-XUMden9E5htnx3LMACHQwrkXT3-+3R4Y+tiA@mail.gmail.com>

My work around for the twisted/conch bug if anyone is interested.
FileTransferHandler was not handling closed connections properly. Btw, this
is with release version 20.3.0, which seems to be the latest version.
However, if I look in the Twisted repo it looks like someone is trying to
address this bug for the next release.

https://github.com/radifalco/conch_issues/commit/c25aa6bca20201f51d59c3a6dca4c1fb2aed2242?branch=c25aa6bca20201f51d59c3a6dca4c1fb2aed2242&diff=split

On Fri, Sep 25, 2020 at 7:42 AM Robert DiFalco <robert.difalco at gmail.com>
wrote:

> I agree it's a bug in conch and I believe my repo shows a reproducible
> example. Run the test, it never completes because the deferred from
> `makeDirectory` never fires. .
>
> On Fri, Sep 25, 2020 at 3:41 AM Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
>> On Thu, Sep 24, 2020 at 8:54 PM Robert DiFalco <robert.difalco at gmail.com>
>> wrote:
>>
>>> Why exactly is makeDirectory not firing any callbacks or errbacks and
>>> what can I add at the Factory level to make it do so?
>>>
>>
>> class MySSHClientFactory(SSHClientFactory):
>>>     def clientConnectionLost(self, connector, reason):
>>>         self.op.addErrback(reason)
>>>
>>>     def makeDirectory(self, path, attrs):
>>>         self.op = Deferred()
>>>         def _cbSuccess(result):
>>>             self.op.callback(result)
>>>
>>>         return self.sftpClient.makeDirectory(path, attrs).addCallback(_cbSuccess)d
>>>
>>>
>> This code is wrong.  It takes what *may* be a perfectly good Deferred
>> from makeDirectory and breaks the error chain off of it.  The correct way
>> to do this would be more like `makeDirectory(...).chainDeferred(self.op)`.
>> However, `self.op` and `_cbSuccess` are doing nothing useful here so you
>> may as well just delete all that and return the `makeDirectory(...)`
>> Deferred.
>>
>> If *that* Deferred doesn't fire its errback chain when the connection is
>> closed, that's a bug in Conch.  If you can put together a minimal example
>> and file a ticket, that would be wonderful and perhaps someone can get it
>> fixed for you.
>>
>> Jean-Paul
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200925/6436bcb4/attachment.htm>

From trac at twistedmatrix.com  Sun Sep 27 00:05:15 2020
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 27 Sep 2020 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1601186715.82.53868004707374627@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200927/64fbc1b3/attachment.htm>

From rodrigc at crodrigues.org  Mon Sep 28 10:25:03 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 28 Sep 2020 09:25:03 -0700
Subject: [Twisted-Python] Request for new Twisted release?
In-Reply-To: <CAFycZ9fEFJed-7=youyMfO2jQZmrtHLmKuK=xUq3XrtKNdCAmg@mail.gmail.com>
References: <CAG=rPVdTO2SUOL+2rYvvYPPbnyz_FqATmvn0-85Qi4ahbnRpBw@mail.gmail.com>
 <68FFD1F6-1F25-4FD0-B5A8-9F17133D55E2@twistedmatrix.com>
 <CAFycZ9fEFJed-7=youyMfO2jQZmrtHLmKuK=xUq3XrtKNdCAmg@mail.gmail.com>
Message-ID: <CAG=rPVeAd+4Ae99w5gGem-Ro0hAw9dws4NL0AapPKgf0jmA4cg@mail.gmail.com>

Adi,

In this Twisted subproject, you implemented something which releases to
Pypi upon creation of a tag:

https://github.com/twisted/twistedchecker/blob/master/.travis.yml#L23

Maybe we can do something similar for the main Twisted project.

GitHub Actions allows you to run a specific workflow in response to a
GitHub Release event:

https://github.com/actions/create-release
https://docs.github.com/en/free-pro-team at latest/actions/reference/events-that-trigger-workflows#release

So maybe we can implement your suggested steps in a new GitHub Actions
workflow specific to doing a release.

--
Craig


On Thu, Sep 24, 2020 at 4:32 PM Adi Roiban <adi at roiban.ro> wrote:

>
>
> Maybe the release can be simplified and automated:
>
> * Build the source and binary wheel in GitHub actions as this can be done
> for Linux (Ubuntu), Windows and macOS.
> * Host the download source and wheel files only on PyPi and publish them
> automatically from GitHub action on a new tag is created.
> * Host the documentation only on the Read The Docs.
> * Hos the API documentation on Read The Docs - might need some hacking,
> but at release we can create an API docs package as an artifact which is
> then pulled when Read The Docs documentation is created and copied as extra
> HTML files.
> * Move Twisted blog to GitHub pages... or even read the docs with a
> separate theme like Crate [1] ... if the blog is still required.
>
> ------
>
> With the above implemented the release should look like:
>
> * Each time the tests for a PR are executed, pydoctor will run and
> automatically create the API files as an artifact available for download.
> * *Manually* create a new branch in which the version is updated and the
> changelog/news/release note is created and all the news fragment files are
> removed/ . Have the branch reviewed and approved with all the tests passed.
> When the pydoctor tests are executed, the API docs are created.
> * The release branches can have a naming convention line 'release-20.0.0`.
> At first the release branch can have a release candidate version and a
> GitHub can automatically push the release to PyPi.
> * *Manually* send an email to Twisted mailing list to announce the
> pre-release.
> * Once the branch is merged, *manually* push a new tag
> * The new tag should trigger the GitHub action for publishing the release
> on PyPi
> * The new merge in master should trigger the Read The Docs build... which
> now will also include the static API docs pages.
> * Once the release is done, *manually* send a new email to the mailing
> list.
>
> There are still many manual steps, but the only permissions required is
> commit to the repo.
> This will no longer use any of the Twisted own infrastructure.
>
> [1] https://sphinx-themes.org/html/crate-docs-theme/crate/basic.html
>
> --
> Adi Roiban
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200928/65a6e4e8/attachment.htm>

From glyph at twistedmatrix.com  Mon Sep 28 11:48:39 2020
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 28 Sep 2020 10:48:39 -0700
Subject: [Twisted-Python] Request for new Twisted release?
In-Reply-To: <CAG=rPVeAd+4Ae99w5gGem-Ro0hAw9dws4NL0AapPKgf0jmA4cg@mail.gmail.com>
References: <CAG=rPVdTO2SUOL+2rYvvYPPbnyz_FqATmvn0-85Qi4ahbnRpBw@mail.gmail.com>
 <68FFD1F6-1F25-4FD0-B5A8-9F17133D55E2@twistedmatrix.com>
 <CAFycZ9fEFJed-7=youyMfO2jQZmrtHLmKuK=xUq3XrtKNdCAmg@mail.gmail.com>
 <CAG=rPVeAd+4Ae99w5gGem-Ro0hAw9dws4NL0AapPKgf0jmA4cg@mail.gmail.com>
Message-ID: <5C81EF38-BB7E-465F-A585-1FF069753536@twistedmatrix.com>

Yes, please, let's do this!  I have been trying to fix or enable automated releases for smaller Twisted-org projects as I have time, but Twisted itself is a bit too tricky for my level of capacity during the end times.

Kyle Altendorf has done quite a bit of work on this, so let's be sure to leverage that work and not to start over: https://twistedmatrix.com/trac/ticket/9531 <https://twistedmatrix.com/trac/ticket/9531>.

-g

> On Sep 28, 2020, at 9:25 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Adi,
> 
> In this Twisted subproject, you implemented something which releases to Pypi upon creation of a tag:
> 
> https://github.com/twisted/twistedchecker/blob/master/.travis.yml#L23 <https://github.com/twisted/twistedchecker/blob/master/.travis.yml#L23>
> 
> Maybe we can do something similar for the main Twisted project.
> 
> GitHub Actions allows you to run a specific workflow in response to a GitHub Release event:
> 
> https://github.com/actions/create-release <https://github.com/actions/create-release>
> https://docs.github.com/en/free-pro-team at latest/actions/reference/events-that-trigger-workflows#release <https://docs.github.com/en/free-pro-team at latest/actions/reference/events-that-trigger-workflows#release>
> 
> So maybe we can implement your suggested steps in a new GitHub Actions workflow specific to doing a release.
> 
> --
> Craig
> 
> 
> On Thu, Sep 24, 2020 at 4:32 PM Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
> 
> 
> Maybe the release can be simplified and automated:
> 
> * Build the source and binary wheel in GitHub actions as this can be done for Linux (Ubuntu), Windows and macOS.
> * Host the download source and wheel files only on PyPi and publish them automatically from GitHub action on a new tag is created.
> * Host the documentation only on the Read The Docs.
> * Hos the API documentation on Read The Docs - might need some hacking, but at release we can create an API docs package as an artifact which is then pulled when Read The Docs documentation is created and copied as extra HTML files.
> * Move Twisted blog to GitHub pages... or even read the docs with a separate theme like Crate [1] ... if the blog is still required.
> 
> ------
> 
> With the above implemented the release should look like:
> 
> * Each time the tests for a PR are executed, pydoctor will run and automatically create the API files as an artifact available for download.
> * Manually create a new branch in which the version is updated and the changelog/news/release note is created and all the news fragment files are removed/ . Have the branch reviewed and approved with all the tests passed. When the pydoctor tests are executed, the API docs are created.
> * The release branches can have a naming convention line 'release-20.0.0`. At first the release branch can have a release candidate version and a GitHub can automatically push the release to PyPi.
> * Manually send an email to Twisted mailing list to announce the pre-release.
> * Once the branch is merged, manually push a new tag
> * The new tag should trigger the GitHub action for publishing the release on PyPi
> * The new merge in master should trigger the Read The Docs build... which now will also include the static API docs pages.
> * Once the release is done, manually send a new email to the mailing list.
> 
> There are still many manual steps, but the only permissions required is commit to the repo.
> This will no longer use any of the Twisted own infrastructure.
> 
> [1] https://sphinx-themes.org/html/crate-docs-theme/crate/basic.html <https://sphinx-themes.org/html/crate-docs-theme/crate/basic.html>
> 
> -- 
> Adi Roiban
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200928/bffed467/attachment.htm>

From sda at fstab.net  Mon Sep 28 12:35:11 2020
From: sda at fstab.net (Kyle Altendorf)
Date: Mon, 28 Sep 2020 14:35:11 -0400
Subject: [Twisted-Python] Request for new Twisted release?
In-Reply-To: <5C81EF38-BB7E-465F-A585-1FF069753536@twistedmatrix.com>
References: <CAG=rPVdTO2SUOL+2rYvvYPPbnyz_FqATmvn0-85Qi4ahbnRpBw@mail.gmail.com>
 <68FFD1F6-1F25-4FD0-B5A8-9F17133D55E2@twistedmatrix.com>
 <CAFycZ9fEFJed-7=youyMfO2jQZmrtHLmKuK=xUq3XrtKNdCAmg@mail.gmail.com>
 <CAG=rPVeAd+4Ae99w5gGem-Ro0hAw9dws4NL0AapPKgf0jmA4cg@mail.gmail.com>
 <5C81EF38-BB7E-465F-A585-1FF069753536@twistedmatrix.com>
Message-ID: <38e2f8bea7f7e8bfaa827f7986c41288@fstab.net>

I guess this one is top-posting...  Anyways, I would personally default
away from CI-provider-specific solutions.  It seems like a command line
tool ought to suffice?  But maybe there's some security something or
other I'm missing.  I just see that we presently use four CI systems so
picking one and expecting to stick with it seems a bit naive. 

Presumably someone will (helpfully) find an issue with this but I've
copied this between a few projects. 

https://github.com/altendky/pyqt5-tools/blob/b0ecb9bf53ded53c28763d76f1e87d0b8180d2b8/twineontag.py


I know there are many other solutions. 

Since this topic is a bit more general than just PyPI uploads I've also
got a few comments about towncrier.  Per the link below I added
towncrier to my RTD builds so that PRs will render the newsfragments. 
Also, I started to vaguely think through some option for using towncrier
that would allow for creating a release by pushing a tag rather than
pulling a PR and doing various manual steps and modifying a generated
news file etc.  No answers yet, just a thing I'd like to get going at
some point.  Certainly `release by pushing a tag` is harder in bigger
projects but I don't have in mind yet a reason it can't happen. 

https://github.com/altendky/qtrio/blob/7a268c3fc14afe4cde7cbedd423d1f74f616a299/docs/source/conf.py#L133-L148


Cheers, 

-kyle 

On 2020-09-28 13:48, Glyph wrote:

> Yes, please, let's do this!  I have been trying to fix or enable automated releases for smaller Twisted-org projects as I have time, but Twisted itself is a bit too tricky for my level of capacity during the end times. 
> 
> Kyle Altendorf has done quite a bit of work on this, so let's be sure to leverage that work and not to start over: https://twistedmatrix.com/trac/ticket/9531. 
> 
> -g
> 
> On Sep 28, 2020, at 9:25 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote: 
> 
> Adi, 
> 
> In this Twisted subprostlject, you implemented something which releases to Pypi upon creation of a tag: 
> 
> https://github.com/twisted/twistedchecker/blob/master/.travis.yml#L23 
> 
> Maybe we can do something similar for the main Twisted project. 
> 
> GitHub Actions allows you to run a specific workflow in response to a GitHub Release event:
> 
> https://github.com/actions/create-release 
> https://docs.github.com/en/free-pro-team at latest/actions/reference/events-that-trigger-workflows#release 
> 
> So maybe we can implement your suggested steps in a new GitHub Actions workflow specific to doing a release. 
> 
> -- 
> Craig 
> 
> On Thu, Sep 24, 2020 at 4:32 PM Adi Roiban <adi at roiban.ro> wrote: 
> 
> Maybe the release can be simplified and automated: 
> 
> * Build the source and binary wheel in GitHub actions as this can be done for Linux (Ubuntu), Windows and macOS. 
> * Host the download source and wheel files only on PyPi and publish them automatically from GitHub action on a new tag is created. 
> * Host the documentation only on the Read The Docs. 
> * Hos the API documentation on Read The Docs - might need some hacking, but at release we can create an API docs package as an artifact which is then pulled when Read The Docs documentation is created and copied as extra HTML files. 
> * Move Twisted blog to GitHub pages... or even read the docs with a separate theme like Crate [1] ... if the blog is still required. 
> 
> ------ 
> 
> With the above implemented the release should look like: 
> 
> * Each time the tests for a PR are executed, pydoctor will run and automatically create the API files as an artifact available for download. 
> * Manually create a new branch in which the version is updated and the changelog/news/release note is created and all the news fragment files are removed/ . Have the branch reviewed and approved with all the tests passed. When the pydoctor tests are executed, the API docs are created. 
> * The release branches can have a naming convention line 'release-20.0.0`. At first the release branch can have a release candidate version and a GitHub can automatically push the release to PyPi. 
> * Manually send an email to Twisted mailing list to announce the pre-release. 
> * Once the branch is merged, manually push a new tag 
> * The new tag should trigger the GitHub action for publishing the release on PyPi 
> * The new merge in master should trigger the Read The Docs build... which now will also include the static API docs pages. 
> * Once the release is done, manually send a new email to the mailing list. 
> 
> There are still many manual steps, but the only permissions required is commit to the repo. 
> This will no longer use any of the Twisted own infrastructure. 
> 
> [1] https://sphinx-themes.org/html/crate-docs-theme/crate/basic.html 
> -- 
> Adi Roiban _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200928/517f4045/attachment.htm>

From rodrigc at crodrigues.org  Tue Sep 29 16:24:46 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 29 Sep 2020 15:24:46 -0700
Subject: [Twisted-Python] Twisted with pypy3 on Ubuntu 20.4,
 SSL error: 'ee key too small'
Message-ID: <CAG=rPVfYDwBXM76ohxX6O6KqVC1YnB-=-dsT_Rz=ysTC45dzkQ@mail.gmail.com>

Hi,

I ran an experiment to run the Twisted tests on Ubuntu 20.4 using this
version of using pypy3:

*Python 3.6.9 (2ad108f17bdb, Apr 07 2020, 02:29:05*
*Pypy 7.3.1 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)*


A bunch of the conch tests failed in this Ubuntu environment:
https://github.com/twisted/twisted/runs/1173397508
like this:



























*===============================================================================Error:
Traceback (most recent call last):  File
"/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/test/test_sslverify.py",
line 1780, in test_ellipticCurveDiffieHellman    onData=onData,  File
"/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/test/test_sslverify.py",
line 716, in loopback    self.serverPort = reactor.listenSSL(0,
serverFactory, serverCertOpts)  File
"/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/internet/posixbase.py",
line 593, in listenSSL    tlsFactory =
tls.TLSMemoryBIOFactory(contextFactory, False, factory)  File
"/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/protocols/tls.py",
line 748, in __init__    contextFactory =
_ContextFactoryToConnectionFactory(contextFactory)  File
"/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/protocols/tls.py",
line 629, in __init__    oldStyleContextFactory.getContext()  File
"/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/internet/_sslverify.py",
line 1636, in getContext    self._context = self._makeContext()  File
"/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/internet/_sslverify.py",
line 1645, in _makeContext    ctx.use_certificate(self.certificate)  File
"/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/OpenSSL/SSL.py",
line 960, in use_certificate    _raise_current_error()  File
"/opt/hostedtoolcache/PyPy/3.6.9/x64/lib_pypy/_functools.py", line 80, in
__call__    return self._func(*(self._args + fargs), **fkeywords)  File
"/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/OpenSSL/_util.py",
line 54, in exception_from_error_queue    raise
exception_type(errors)OpenSSL.SSL.Error: [('SSL routines',
'SSL_CTX_use_certificate', 'ee key too
small')]twisted.test.test_sslverify.OpenSSLOptionsECDHIntegrationTests.test_ellipticCurveDiffieHellman===============================================================================*



I'm not sure what the root problem is, but my suspicion is that the SSL
library in this particular Ubuntu environment
does not permit keys smaller than 2048 bits.

Anyone have any other ideas as to the cause of this error?

Thanks.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200929/bb045dc0/attachment.htm>

From adi at roiban.ro  Tue Sep 29 16:33:37 2020
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 29 Sep 2020 23:33:37 +0100
Subject: [Twisted-Python] Twisted with pypy3 on Ubuntu 20.4,
 SSL error: 'ee key too small'
In-Reply-To: <CAG=rPVfYDwBXM76ohxX6O6KqVC1YnB-=-dsT_Rz=ysTC45dzkQ@mail.gmail.com>
References: <CAG=rPVfYDwBXM76ohxX6O6KqVC1YnB-=-dsT_Rz=ysTC45dzkQ@mail.gmail.com>
Message-ID: <CAFycZ9fwiH=HdHoh0Ytvnxc+sFOx-YMB1O48RyGk=kJtrN_Yiw@mail.gmail.com>

On Tue, 29 Sep 2020 at 23:25, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Hi,
>
> I ran an experiment to run the Twisted tests on Ubuntu 20.4 using this
> version of using pypy3:
>
> *Python 3.6.9 (2ad108f17bdb, Apr 07 2020, 02:29:05*
> *Pypy 7.3.1 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)*
>
>
> A bunch of the conch tests failed in this Ubuntu environment:
> https://github.com/twisted/twisted/runs/1173397508
> like this:
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
> *===============================================================================Error:
> Traceback (most recent call last):  File
> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/test/test_sslverify.py",
> line 1780, in test_ellipticCurveDiffieHellman    onData=onData,  File
> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/test/test_sslverify.py",
> line 716, in loopback    self.serverPort = reactor.listenSSL(0,
> serverFactory, serverCertOpts)  File
> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/internet/posixbase.py",
> line 593, in listenSSL    tlsFactory =
> tls.TLSMemoryBIOFactory(contextFactory, False, factory)  File
> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/protocols/tls.py",
> line 748, in __init__    contextFactory =
> _ContextFactoryToConnectionFactory(contextFactory)  File
> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/protocols/tls.py",
> line 629, in __init__    oldStyleContextFactory.getContext()  File
> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/internet/_sslverify.py",
> line 1636, in getContext    self._context = self._makeContext()  File
> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/internet/_sslverify.py",
> line 1645, in _makeContext    ctx.use_certificate(self.certificate)  File
> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/OpenSSL/SSL.py",
> line 960, in use_certificate    _raise_current_error()  File
> "/opt/hostedtoolcache/PyPy/3.6.9/x64/lib_pypy/_functools.py", line 80, in
> __call__    return self._func(*(self._args + fargs), **fkeywords)  File
> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/OpenSSL/_util.py",
> line 54, in exception_from_error_queue    raise
> exception_type(errors)OpenSSL.SSL.Error: [('SSL routines',
> 'SSL_CTX_use_certificate', 'ee key too
> small')]twisted.test.test_sslverify.OpenSSLOptionsECDHIntegrationTests.test_ellipticCurveDiffieHellman===============================================================================*
>
>
>
> I'm not sure what the root problem is, but my suspicion is that the SSL
> library in this particular Ubuntu environment
> does not permit keys smaller than 2048 bits.
>
> Anyone have any other ideas as to the cause of this error?
>
>
Hi,

That is the case.

One work around is append @SECLEVEL=0 to the cipher list.... but I think
it's better to update the tests to use 2048 bits key.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200929/cda5c04b/attachment.htm>

From chris at cmsconstruct.com  Wed Sep 30 07:38:02 2020
From: chris at cmsconstruct.com (chris at cmsconstruct.com)
Date: Wed, 30 Sep 2020 08:38:02 -0500
Subject: [Twisted-Python] doWrite on twisted.internet.tcp.Port
In-Reply-To: <03ed01d68927$1052a5b0$30f7f110$@cmsconstruct.com>
References: <035001d68861$cf2c4ac0$6d84e040$@cmsconstruct.com>
 <CAEeXt4MoV8voL_faqNif7Wuduyn3gsx=jz7NU6pzmO-85eH7Eg@mail.gmail.com>
 <03ed01d68927$1052a5b0$30f7f110$@cmsconstruct.com>
Message-ID: <013c01d6972e$ec23b060$c46b1120$@cmsconstruct.com>

[Closing the loop for future contextual searches]

 

This solved the problem.  Moving all Twisted reactor-related imports inside overloaded multiprocessing.Process.run() functions, allows a single controller process to manage many Twisted reactors running in child processes.  

 

Thanks again.

-Chris

 

 

From: Twisted-Python <twisted-python-bounces at twistedmatrix.com> On Behalf Of chris at cmsconstruct.com
Sent: Saturday, September 12, 2020 12:07 PM
To: 'Twisted general discussion' <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] doWrite on twisted.internet.tcp.Port

 

Hi Jean-Paul,

 

Thank you very much for the detailed answer.  And my appologies for not providing OS details; I’ve tested on CentOS and RedHat EL variants, not FreeBSD as the ticket discussed.  Looks like Red Hat (EL 7.6) is using epoll reactor, and the Windows side is using the select reactor.

 

Thanks for the direction on checking out sys.modules.  To avoid the reactor being loaded in the parent process, I can presumably move twisted imports within the multiprocessing child modules (from top, down into the run() functions).  I will see how far I need to go (e.g. if I can continue using Twisted’s JSON logging or if absolutely everything should be isolated until after child process startup).  But knowing I need to head that direction for epoll or other potential reactor conflicts - is very helpful.

 

Reminds me of the GI Joe cartoon in the early 1980’s that would end with, “knowing is half the battle.”

 

-Chris

 

 

From: Twisted-Python <twisted-python-bounces at twistedmatrix.com <mailto:twisted-python-bounces at twistedmatrix.com> > On Behalf Of Jean-Paul Calderone
Sent: Friday, September 11, 2020 1:28 PM
To: Twisted general discussion <twisted-python at twistedmatrix.com <mailto:twisted-python at twistedmatrix.com> >
Subject: Re: [Twisted-Python] doWrite on twisted.internet.tcp.Port

 

On Fri, Sep 11, 2020 at 1:34 PM <chris at cmsconstruct.com <mailto:chris at cmsconstruct.com> > wrote:

Hey guys,

 

Last year I hit a condition discussed in this ticket: https://twistedmatrix.com/trac/ticket/4759 for doWrite called on a twisted.internet.tcp.Port.  

 

I ignored it at the time since it was just on Linux, and my main platform was Windows.  Now I’m coming back to it.  I’ll add context on the problem below, but first I want to ask a high-level, design-type question with multiprocessing and Twisted:

 

Referencing Jean-Paul’s comment at the end of ticket 4759, I read you shouldn’t fork a process (multiprocessing module) that already has a Twisted reactor.  Understood.  But what about a parent process (not doing anything Twisted) forking child processes, where each child process starts their own Twisted reactor?  Is that intended to work from the Twisted perspective?

 

To answer the asked question, I don't think there is rigorous (or even casual) testing of very much of Twisted in the context of "some Twisted code has been loaded into memory and then the process forked".  So while it seems like a reasonable thing, I wouldn't say there's currently much effort being put towards making it a supported usage of Twisted.  Of course this can change at almost any moment if someone decides to commit the effort.

 

To dig a bit further into the specific problem, even if you only import the reactor in the parent process and then fork a child and try to start the reactor in the child, I strongly suspect epollreactor will break.  This is because the epoll object is created by reactor instantiation (as opposed to being delayed until the reactor is run).  epoll objects have a lot of weird behavior.  See the Questions and Answers section of the epoll(7) man page.

 

I don't know if this is the cause of your particular expression of these symptoms (it certainly doesn't apply to the original bug report which is on FreeBSD where there is no epoll) but it's at least a possible cause.

 

This could probably be fixed in Twisted by only creating the epoll object when run is called.  There's nothing particularly difficult about that change but it does involve touching a lot of the book-keeping logic since that all assumes it can register file descriptors before the reactor is started (think reactor.listenTCP(...); reactor.run()).

 

I'm not sure but it may also be the case that only delaying creation of the waker until the reactor starts would also fix this.  This is because as long as the epoll object remains empty a lot of the weird behavior is avoided and the waker is probably the only thing that actually gets added to it if you're just importing the reactor but not running it before forking.

 

Alternatively, your application should be able to fix it by studiously avoiding the import of twisted.internet.reactor (directly or transitively, of course).  You could add some kind of assertion about the state of sys.modules immediately before your forking code to develop some confidence you've managed this.

 

And if this is really an epoll problem then switching to poll or select reactor would also presumably get rid of the issue.

 

Jean-Paul

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200930/33ef2b00/attachment-0001.htm>

From rodrigc at crodrigues.org  Wed Sep 30 18:18:08 2020
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 30 Sep 2020 17:18:08 -0700
Subject: [Twisted-Python] Twisted with pypy3 on Ubuntu 20.4,
 SSL error: 'ee key too small'
In-Reply-To: <CAFycZ9fwiH=HdHoh0Ytvnxc+sFOx-YMB1O48RyGk=kJtrN_Yiw@mail.gmail.com>
References: <CAG=rPVfYDwBXM76ohxX6O6KqVC1YnB-=-dsT_Rz=ysTC45dzkQ@mail.gmail.com>
 <CAFycZ9fwiH=HdHoh0Ytvnxc+sFOx-YMB1O48RyGk=kJtrN_Yiw@mail.gmail.com>
Message-ID: <CAG=rPVc6m2nPRnyonJ=G5BtOK4MDGusCkZwFokhsNi=5okNb5A@mail.gmail.com>

Adi,

Thanks for the tip.  Yes, increasing the key size in the tests definitely
eliminated this error:

https://github.com/twisted/twisted/pull/1411

--
Craig

On Tue, Sep 29, 2020 at 3:34 PM Adi Roiban <adi at roiban.ro> wrote:

>
>
> On Tue, 29 Sep 2020 at 23:25, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
>> Hi,
>>
>> I ran an experiment to run the Twisted tests on Ubuntu 20.4 using this
>> version of using pypy3:
>>
>> *Python 3.6.9 (2ad108f17bdb, Apr 07 2020, 02:29:05*
>> *Pypy 7.3.1 with GCC 7.3.1 20180303 (Red Hat 7.3.1-5)*
>>
>>
>> A bunch of the conch tests failed in this Ubuntu environment:
>> https://github.com/twisted/twisted/runs/1173397508
>> like this:
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>> *===============================================================================Error:
>> Traceback (most recent call last):  File
>> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/test/test_sslverify.py",
>> line 1780, in test_ellipticCurveDiffieHellman    onData=onData,  File
>> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/test/test_sslverify.py",
>> line 716, in loopback    self.serverPort = reactor.listenSSL(0,
>> serverFactory, serverCertOpts)  File
>> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/internet/posixbase.py",
>> line 593, in listenSSL    tlsFactory =
>> tls.TLSMemoryBIOFactory(contextFactory, False, factory)  File
>> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/protocols/tls.py",
>> line 748, in __init__    contextFactory =
>> _ContextFactoryToConnectionFactory(contextFactory)  File
>> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/protocols/tls.py",
>> line 629, in __init__    oldStyleContextFactory.getContext()  File
>> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/internet/_sslverify.py",
>> line 1636, in getContext    self._context = self._makeContext()  File
>> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/twisted/internet/_sslverify.py",
>> line 1645, in _makeContext    ctx.use_certificate(self.certificate)  File
>> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/OpenSSL/SSL.py",
>> line 960, in use_certificate    _raise_current_error()  File
>> "/opt/hostedtoolcache/PyPy/3.6.9/x64/lib_pypy/_functools.py", line 80, in
>> __call__    return self._func(*(self._args + fargs), **fkeywords)  File
>> "/home/runner/work/twisted/twisted/build/alldeps-withcov-posix/site-packages/OpenSSL/_util.py",
>> line 54, in exception_from_error_queue    raise
>> exception_type(errors)OpenSSL.SSL.Error: [('SSL routines',
>> 'SSL_CTX_use_certificate', 'ee key too
>> small')]twisted.test.test_sslverify.OpenSSLOptionsECDHIntegrationTests.test_ellipticCurveDiffieHellman===============================================================================*
>>
>>
>>
>> I'm not sure what the root problem is, but my suspicion is that the SSL
>> library in this particular Ubuntu environment
>> does not permit keys smaller than 2048 bits.
>>
>> Anyone have any other ideas as to the cause of this error?
>>
>>
> Hi,
>
> That is the case.
>
> One work around is append @SECLEVEL=0 to the cipher list.... but I think
> it's better to update the tests to use 2048 bits key.
>
> --
> Adi Roiban
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20200930/e8d6da25/attachment.htm>

