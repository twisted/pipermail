From d00jb at efd.lth.se  Wed Sep  1 05:09:21 2004
From: d00jb at efd.lth.se (Joakim Bech)
Date: Wed, 1 Sep 2004 11:09:21 +0200 (MEST)
Subject: [Twisted-Python] Perspective Broker and UDP, is it possible?
Message-ID: <Pine.GSO.4.58.0409011022080.11345@login-10.efd.lth.se>

I'm doing my master thesis in computer science, and the topic
for the project is "Managment of network delays in computer games".
The software im going to use is Python with Twisted and Pygame.
Right now I'm trying to get to know how different parts of Twisted
interact with each other. And my first question is:

Is it possible to use Perspective Broker with UDP?
I've tried modifying the examples here
(http://www.twistedmatrix.com/documents/current/howto/pb-usage),
with DatagramProtocol and so on, but I haven't got it to work.
I suspect that it is impossible due to that UDPs is connectionless,
but there's a lot of "magic" in Twisted, so I thought I'd better
ask the pros'.





Mvh // Joakim Bech
Mail: d00jb at efd.lth.se



From exarkun at divmod.com  Wed Sep  1 10:02:45 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 01 Sep 2004 10:02:45 -0400
Subject: [Twisted-Python] Perspective Broker and UDP, is it possible?
In-Reply-To: <Pine.GSO.4.58.0409011022080.11345@login-10.efd.lth.se>
References: <Pine.GSO.4.58.0409011022080.11345@login-10.efd.lth.se>
Message-ID: <4135D685.1060202@divmod.com>

Joakim Bech wrote:
> I'm doing my master thesis in computer science, and the topic
> for the project is "Managment of network delays in computer games".
> The software im going to use is Python with Twisted and Pygame.
> Right now I'm trying to get to know how different parts of Twisted
> interact with each other. And my first question is:
> 
> Is it possible to use Perspective Broker with UDP?
> I've tried modifying the examples here
> (http://www.twistedmatrix.com/documents/current/howto/pb-usage),
> with DatagramProtocol and so on, but I haven't got it to work.
> I suspect that it is impossible due to that UDPs is connectionless,
> but there's a lot of "magic" in Twisted, so I thought I'd better
> ask the pros'.
> 

   The current version of PB has no support for UDP.

   Jp



From matt.feifarek at gmail.com  Wed Sep  1 14:31:43 2004
From: matt.feifarek at gmail.com (Matt Feifarek)
Date: Wed, 1 Sep 2004 14:31:43 -0400
Subject: [Twisted-Python] Spawning processes and multiple CPU's.
Message-ID: <6fb6dbfe04090111314cdd53f4@mail.gmail.com>

I'm using reactor.spawnProcess to perform some inherently-blocking
code (imagemagick scripts).

I'm curious if multiple CPU's would help me out. I know that a single
python (and therefore a single reactor) cannot benefit from multiple
CPU's, but since the spawn process is a kernel call, will it be sent
to both processors?

Thanks.



From corydodt at twistedmatrix.com  Wed Sep  1 14:42:11 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Wed, 01 Sep 2004 11:42:11 -0700
Subject: [Twisted-Python] Spawning processes and multiple CPU's.
In-Reply-To: <6fb6dbfe04090111314cdd53f4@mail.gmail.com>
References: <6fb6dbfe04090111314cdd53f4@mail.gmail.com>
Message-ID: <41361803.2050909@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

The invocation of an imagemagick process is certainly a candidate for the
kernel to put on a different CPU.  Indeed, that's one of the biggest
advantages of using spawnProcess instead of (well, lots of other things).

C


Matt Feifarek wrote:

| I'm using reactor.spawnProcess to perform some inherently-blocking
| code (imagemagick scripts).
|
| I'm curious if multiple CPU's would help me out. I know that a single
| python (and therefore a single reactor) cannot benefit from multiple
| CPU's, but since the spawn process is a kernel call, will it be sent
| to both processors?
|
| Thanks.
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBNhgD3A5SrXAiHQcRAjWgAJ0R0rgaMRMGMKXKwUgjdS+dYKUozwCgho1c
aKEAcIv0yCee3dv/2IzHvPo=
=K95F
-----END PGP SIGNATURE-----



From general at eepatents.com  Wed Sep  1 15:41:30 2004
From: general at eepatents.com (Ed Suominen)
Date: Wed, 1 Sep 2004 12:41:30 -0700
Subject: [Twisted-Python] Re: Perspective Broker and UDP, is it possible?
In-Reply-To: <E1C2ZOv-0001HG-02@pyramid.twistedmatrix.com>
References: <E1C2ZOv-0001HG-02@pyramid.twistedmatrix.com>
Message-ID: <200409011241.30140.general@eepatents.com>

> I'm doing my master thesis in computer science, and the topic
> for the project is "Managment of network delays in computer games".
> The software im going to use is Python with Twisted and Pygame.
> Right now I'm trying to get to know how different parts of Twisted
> interact with each other. And my first question is:
> 
> Is it possible to use Perspective Broker with UDP?
> I've tried modifying the examples here
> (http://www.twistedmatrix.com/documents/current/howto/pb-usage),
> with DatagramProtocol and so on, but I haven't got it to work.
> I suspect that it is impossible due to that UDPs is connectionless,
> but there's a lot of "magic" in Twisted, so I thought I'd better
> ask the pros'.

It is certainly possible, just not with the current version of PB. In any 
modified version (go for it!), I think you would need to provide client 
identifying info with each burst of data, or limit "connections" to just one 
client at a time per port, to keep track of things.

I'm not a twisted expert, but I do use it extensively. I have also learned an 
embarrassingly large amount of stuff about low-level TCP/IP due to too much 
experience with a vastly inferior high-level language [1].

[1] http://tinyurl.com/5nrkp

Ed Suominen
Registered Patent Agent
Open-Source Software Author (yes, both...)
Web Site: http://www.eepatents.com



From tv at twistedmatrix.com  Thu Sep  2 03:16:35 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 02 Sep 2004 10:16:35 +0300
Subject: [Twisted-Python] Re: Perspective Broker and UDP, is it possible?
In-Reply-To: <200409011241.30140.general@eepatents.com>
References: <E1C2ZOv-0001HG-02@pyramid.twistedmatrix.com>
	<200409011241.30140.general@eepatents.com>
Message-ID: <4136C8D3.5010002@twistedmatrix.com>

Ed Suominen wrote:
> It is certainly possible, just not with the current version of PB. In any 
> modified version (go for it!), I think you would need to provide client 
> identifying info with each burst of data, or limit "connections" to just one 
> client at a time per port, to keep track of things.

The UDP pseudoconnection can be identified by 
(srcIP,srcPort,dstIP,dstPort), so one server port can serve everything 
as long as all the clients use different source IP addresses or ports.

To modify a protocol from TCP to UDP, you need to consider the things 
TCP used to provide you with:

- reliability (resending, acknowledgement)
- segmentation (long messages that will not fit a packet)
- bandwidth estimation (no point in sending at 100% rate, as the 
internet connection will never be that fast)
- antispoof (to fake TCP, you really need to be able to receive packets 
sent to the IP address you are spoofing; UDP with no extra checks can be 
spoofed blind)

etc.

Quite often, it's just not worth it to drop TCP. Especially when the 
problem at hand is _not_ tightly interconnected clusters in a secure and 
managed LAN, but WAN connections with untrusted parties over an 
untrusted network without guaranteed performance.



From matt.feifarek at gmail.com  Thu Sep  2 11:45:23 2004
From: matt.feifarek at gmail.com (Matt Feifarek)
Date: Thu, 2 Sep 2004 10:45:23 -0500
Subject: [Twisted-Python] Spawning processes and multiple CPU's.
In-Reply-To: <41361803.2050909@twistedmatrix.com>
References: <6fb6dbfe04090111314cdd53f4@mail.gmail.com>
	<41361803.2050909@twistedmatrix.com>
Message-ID: <6fb6dbfe04090208452c8598f7@mail.gmail.com>

Yes, I agree that it's a candidate. Does it work that way? 

Does spawnProcess take advantage of multiple CPU's?

On Wed, 01 Sep 2004 11:42:11 -0700, Cory Dodt
<corydodt at twistedmatrix.com> wrote:
> 
> The invocation of an imagemagick process is certainly a candidate for the
> kernel to put on a different CPU.  Indeed, that's one of the biggest
> advantages of using spawnProcess instead of (well, lots of other things).
> 
> C
> 
> Matt Feifarek wrote:
> 
> | I'm using reactor.spawnProcess to perform some inherently-blocking



From corydodt at twistedmatrix.com  Thu Sep  2 11:57:53 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 02 Sep 2004 08:57:53 -0700
Subject: [Twisted-Python] Spawning processes and multiple CPU's.
In-Reply-To: <6fb6dbfe04090208452c8598f7@mail.gmail.com>
References: <6fb6dbfe04090111314cdd53f4@mail.gmail.com>	<41361803.2050909@twistedmatrix.com>
	<6fb6dbfe04090208452c8598f7@mail.gmail.com>
Message-ID: <41374301.5090100@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Basically, Twisted can't guarantee that the kernel will use both CPU's.  But
if the CPU would normally put the process on the other CPU, then it will.
That you're using spawnProcess to start the process doesn't make any difference.

C


Matt Feifarek wrote:

| Yes, I agree that it's a candidate. Does it work that way?
|
| Does spawnProcess take advantage of multiple CPU's?
|
| On Wed, 01 Sep 2004 11:42:11 -0700, Cory Dodt
| <corydodt at twistedmatrix.com> wrote:
|
|>The invocation of an imagemagick process is certainly a candidate for the
|>kernel to put on a different CPU.  Indeed, that's one of the biggest
|>advantages of using spawnProcess instead of (well, lots of other things).
|>
|>C
|>
|>Matt Feifarek wrote:
|>
|>| I'm using reactor.spawnProcess to perform some inherently-blocking
|
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBN0MB3A5SrXAiHQcRAjTNAJ9HLh1OVMxVhPATNY8fV+MaSHf9bwCdF+4p
T7ktijeoM9I2i27aZl0BYVI=
=VnKl
-----END PGP SIGNATURE-----



From andreas at kostyrka.org  Fri Sep  3 06:15:57 2004
From: andreas at kostyrka.org (Andreas Kostyrka)
Date: Fri, 03 Sep 2004 12:15:57 +0200
Subject: [Twisted-Python] Small bug fix for twisted.mail.pop3
Message-ID: <1094206557.7276.26.camel@andi-lap>

Hi!

I'd propose to include this small patch, as it seems to be
unconditionally verbose:


Index: twisted/mail/pop3.py
===================================================================
--- twisted/mail/pop3.py        (revision 11428)
+++ twisted/mail/pop3.py        (working copy)
@@ -148,7 +148,8 @@
             self.magic = self.generateMagic()
         self.successResponse(self.magic)
         self.setTimeout(self.timeOut)
-        log.msg("New connection from " + str(self.transport.getPeer()))
+       if self.factory.noisy:
+            log.msg("New connection from " + str(self.transport.getPeer()))

     def connectionLost(self, reason):
         if self._onLogout is not None:


As noisy is defined twisted.internet.protocol.Factory, it should benign,
running trial on twisted/test doesn't seem to produce anything worse
than a heap of Deprecation warnings.

TIA,

Andreas
-- 
Andreas Kostyrka
Josef-Mayer-Strasse 5
83043 Bad Aibling



From junk at mnjdesigns.com  Fri Sep  3 14:38:36 2004
From: junk at mnjdesigns.com (junk at mnjdesigns.com)
Date: Fri, 3 Sep 2004 14:38:36 -0400 (EDT)
Subject: [Twisted-Python] How to install to another directory?
Message-ID: <61817.66.149.250.85.1094236716.squirrel@mail.rpg-works.net>

How do I install to another directory other then the default using python
setup.py install.  Any help appreciated!

- M



From mcfletch at rogers.com  Fri Sep  3 15:48:24 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Fri, 03 Sep 2004 15:48:24 -0400
Subject: [Twisted-Python] How to install to another directory?
In-Reply-To: <61817.66.149.250.85.1094236716.squirrel@mail.rpg-works.net>
References: <61817.66.149.250.85.1094236716.squirrel@mail.rpg-works.net>
Message-ID: <4138CA88.30701@rogers.com>

setup.py install --install-lib=/some/other/directory

HTH,
Mike

junk at mnjdesigns.com wrote:

>How do I install to another directory other then the default using python
>setup.py install.  Any help appreciated!
>  
>
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From exarkun at divmod.com  Fri Sep  3 15:56:11 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 03 Sep 2004 15:56:11 -0400
Subject: [Twisted-Python] How to install to another directory?
In-Reply-To: <61817.66.149.250.85.1094236716.squirrel@mail.rpg-works.net>
References: <61817.66.149.250.85.1094236716.squirrel@mail.rpg-works.net>
Message-ID: <4138CC5B.1010503@divmod.com>

junk at mnjdesigns.com wrote:
> How do I install to another directory other then the default using python
> setup.py install.  Any help appreciated!
> 

   ./setup.py install --prefix /another/directory/

   This is more of a general Python question.  If you have more like it, 
you should ask python-list at python.org, or another general Python help
forum.

   Jp



From paul at ref.nmedia.net  Fri Sep  3 16:33:29 2004
From: paul at ref.nmedia.net (Paul Campbell)
Date: Fri, 3 Sep 2004 13:33:29 -0700
Subject: [Twisted-Python] Making non-blocking code blocking?
Message-ID: <20040903203329.GA8222@ref.nmedia.net>

Here's the situation...

I've been writing all my code to defer correctly. Every time it gets to a point
where the call can block, I've inserted the appropriate callback function.

However, it occurred to me (for testing purposes) that it would
be nice some times to INTENTIONALLY block.

Right now, it seems like the only point where you can actually "block" is
when you reach the top level where the code is interacting with the reactor
interface.

So far, it seems like once you get the idea of writing deferred code (which
is essentially continuation passing style, right?) that it is hard to get OUT
of the mindset of writing deferreds into everything.


I'm writing a whole lot of RPC-based code right now, which means there are
LOTS of places where blocking actions can happen, so almost everything ends
up wrapped with deferreds. The alternative is to use threads, but...ugh! I
think those are even uglier.



From exarkun at divmod.com  Fri Sep  3 18:19:15 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 03 Sep 2004 18:19:15 -0400
Subject: [Twisted-Python] Making non-blocking code blocking?
In-Reply-To: <20040903203329.GA8222@ref.nmedia.net>
References: <20040903203329.GA8222@ref.nmedia.net>
Message-ID: <4138EDE3.7030508@divmod.com>

Paul Campbell wrote:
> Here's the situation...
> 
> I've been writing all my code to defer correctly. Every time it gets to a point
> where the call can block, I've inserted the appropriate callback function.
> 
> However, it occurred to me (for testing purposes) that it would
> be nice some times to INTENTIONALLY block.
> 

   Trial exposes some utilities for this.  twisted.trial.util.wait() is 
the most useful of them.  It takes a Deferred.  It returns the result of 
the Deferred, or raises an exception if the Deferred fails.  It supports 
timeouts, and by default will fail after 10 seconds if no result arrives.

   Jp



From james at delx.cjb.net  Sat Sep  4 02:45:40 2004
From: james at delx.cjb.net (James Bunton)
Date: Sat, 4 Sep 2004 16:45:40 +1000
Subject: [Twisted-Python] Patch for MSN protocol & Jabber protocol
Message-ID: <200409041645.40198.james@delx.cjb.net>

Here's a patch that fixes a few bugs in the Twisted MSN support.
* An exception will no longer be thrown on an incoming NOT (notification) 
message.
* A fix for occasional exceptions on receiving messages.
* Fix receiving of contact status and friendly name changes to be safer, and 
to actually update the factory =P (friendly name updates didn't occur 
previously)
* Removed a stray print statement


I've been using these fixes for a while, as they were necessary to get the 
Jabber PyMSNt to work. They seem to be stable. It'd be great to get them into 
the next version.


Now for the Jabber support in Twisted. There's a list of patches on this 
website here that it would be great to have included. Especially the 
domish.py patch, without that an exception is thrown on some XML that many 
Jabber clients send with every packet. That makes it almost unusable.

http://idavoll.jabberstudio.org/2.html


---

James
-------------- next part --------------
A non-text attachment was scrubbed...
Name: msn.py.diff
Type: text/x-diff
Size: 3702 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040904/8ee90db7/attachment.diff 

From james at delx.cjb.net  Sat Sep  4 02:47:09 2004
From: james at delx.cjb.net (James Bunton)
Date: Sat, 4 Sep 2004 16:47:09 +1000
Subject: [Twisted-Python] HTTPS proxy
Message-ID: <200409041647.09933.james@delx.cjb.net>

Hi all. Me again =)

Is there any way to specify a proxy to use for an HTTPS connection? I've had a 
bit of a look around and I can't seem to find anything.

Any help would be much appreciated.

---

James



From glyph at divmod.com  Sat Sep  4 03:51:21 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 04 Sep 2004 03:51:21 -0400
Subject: [Twisted-Python] Patch for MSN protocol & Jabber protocol
In-Reply-To: <200409041645.40198.james@delx.cjb.net>
References: <200409041645.40198.james@delx.cjb.net>
Message-ID: <1094284281.2991.7.camel@localhost>

On Sat, 2004-09-04 at 16:45 +1000, James Bunton wrote:
> Here's a patch that fixes a few bugs in the Twisted MSN support.

Patches to the tracker, please - and assign it to someone, probably
dizzyd (unless he doesn't even read it any more...)

http://www.twistedmatrix.com/bugs/




From exarkun at divmod.com  Sat Sep  4 13:09:09 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 04 Sep 2004 13:09:09 -0400
Subject: [Twisted-Python] Patch for MSN protocol & Jabber protocol
In-Reply-To: <200409041645.40198.james@delx.cjb.net>
References: <200409041645.40198.james@delx.cjb.net>
Message-ID: <4139F6B5.6040408@divmod.com>

James Bunton wrote:
> Here's a patch that fixes a few bugs in the Twisted MSN support.
> * An exception will no longer be thrown on an incoming NOT (notification) 
> message.
> * A fix for occasional exceptions on receiving messages.
> * Fix receiving of contact status and friendly name changes to be safer, and 
> to actually update the factory =P (friendly name updates didn't occur 
> previously)
> * Removed a stray print statement
> 

   Thanks for the patches, James.  In addition to Glyph's comments, I 
wonder if you could include unit tests which:

     1) fail when run against the current Twisted code and
     2) pass with your changes

   This is especially important for protocol code.  Without extremely 
good test coverage, different people begin to depend on different 
(unknown) chunks of functionality.  Then there is no way to know what 
future changes can be made without breaking existing code (in this case, 
potentially yours ;).

   Jp




From pje at telecommunity.com  Sat Sep  4 13:41:21 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Sat, 04 Sep 2004 17:41:21 -0000
Subject: [Distutils] Re: [Twisted-Python] Re: Twisted - Python 2.3 - Windows
In-Reply-To: <zniuvd74.fsf@python.net>
References: <20030731114303.19165.89412.Mailman@pyramid.twistedmatrix.com>
	<3F294288.4000009@yahoo.com>
Message-ID: <5.1.1.6.0.20030731133337.01dc7020@telecommunity.com>

At 07:05 PM 7/31/03 +0200, Thomas Heller wrote:
>Cory Dodt <corydodt at yahoo.com> writes:
>
> >>Subject: [Twisted-Python] Twisted - Python 2.3 - Windows
> >>
> >>Hi,
> >>
> >> anyone who knows when the first Python 2.3 build of twisted for
> >> windows will be available? Which version will it be?
> >>
> >> I tried to build it myself but got into trouble. I first installed
> >> Cygwin and then tried 'setup.py build --compiler=mingw32' as per
> >> documentation, but I got an error message that Python itself is
> >> build with Visual Studio 6.
> >>I don't feel building python myself and I don't have VS6.
> >>
> >
> > I'm with you man,  I don't feel like building Python myself either.  I
> > have asked the appropriate list
> > (http://mail.python.org/pipermail/distutils-sig/2003-July/003333.html )
> > about this problem.  I also tried using distutils from CVS instead of
> > the bundled copy with Python 2.3, and no luck.

It looks like the error occurs when an MSVCCompiler instance is created; I 
haven't yet figured out *why* such an instance is being created.  I don't 
have 2.3 installed on Win32, so as an experiment, I added a 'raise' 
statement to 2.2's MSVCCompiler.  If I specified compilation with msvc, I 
get the error I raised.  If I specify mingw32, I don't.  So, evidently 
2.2's distutils don't create an MSVCCompiler instance when specifying 
mingw32.  I can't fathom why 2.3 would do so.


_______________________________________________
Distutils-SIG maillist  -  Distutils-SIG at python.org
http://mail.python.org/mailman/listinfo/distutils-sig




From james at delx.cjb.net  Sun Sep  5 05:13:20 2004
From: james at delx.cjb.net (James Bunton)
Date: Sun, 5 Sep 2004 19:13:20 +1000
Subject: [Twisted-Python] Patch for MSN protocol & Jabber protocol
In-Reply-To: <E1C3epe-0001wC-01@pyramid.twistedmatrix.com>
References: <E1C3epe-0001wC-01@pyramid.twistedmatrix.com>
Message-ID: <200409051913.20996.james@delx.cjb.net>

On Sun, 5 Sep 2004 04:00 am, Jp Calderone <exarkun at divmod.com> wrote:
> ? ?Thanks for the patches, James. ?In addition to Glyph's comments, I
> wonder if you could include unit tests which:
>
> ? ? ?1) fail when run against the current Twisted code and
> ? ? ?2) pass with your changes
>
> ? ?This is especially important for protocol code. ?Without extremely
> good test coverage, different people begin to depend on different
> (unknown) chunks of functionality. ?Then there is no way to know what
> future changes can be made without breaking existing code (in this case,
> potentially yours ;).
>
> ? ?Jp

Ok. They're both in the tracker as Issue701 (Jabber stuff, assigned to dizzyd) 
and Issue702 (MSN stuff, assigned to nobody).

I wrote a unit test for the Jabber stuff, and for the parts of the MSN fixes 
where it makes sense (the NOT message, aka MSN alerts fixes).

It'd be great for these to get into the next Twisted release.

---

James



From jason at pengale.com  Mon Sep  6 01:02:30 2004
From: jason at pengale.com (Jason Stitt)
Date: Mon, 06 Sep 2004 00:02:30 -0500
Subject: [Twisted-Python] Implementing a custom FTP server
Message-ID: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>

Hi, all,

I'm trying to implement a custom FTP server (eventually SFTP, but I 
want to get the basics down.) It won't operate on the file system; the 
back end will be a database, and the server will generate virtual 
directories and folders on the fly.

I have a basic Twisted-based FTP server running. I can log in, and I 
have successfully overridden ftp_LIST to display a custom "file" list.

I have gotten stuck on ftp_STOR and ftp_RETR. There is no 
implementation of ftp_STOR in the base FTP class, so I have no 
reference to work against, and I am also having a hard time figuring 
out how ftp_RETR works. How or where is the actual file data passed 
back and forth?

Any pointers would be greatly appreciated.

Thanks,

Jason

P.S. A lack of documentation aside, though, Twisted has been quite easy 
to work with so far. Even fun :)

P.P.S. is SFTP different enough from FTP that I should be thinking 
about implementing it from the start, rather than later, or can I just 
graft an SSL layer onto my FTP server?




From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Sep  6 09:43:04 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 06 Sep 2004 15:43:04 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
Message-ID: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>

Hi everyone!

I'm running a network simulator on top of Twisted and that made me realize a heavy performance bottleneck.

When I'm simulating a larger number of network nodes each of which uses two or three delayed calls, that adds up and then adding and cancelling calls becomes /really/ expensive. We are talking about ~ one millisecond per add and even a few milliseconds per cancel.

The problem is the implementation that uses a linear list. A heap would be /much/ more appropriate. But especially the cancel could be spead up by factors by not actually removing the object but just setting a flag that it was canceled. The canceled DelayedCall objects would then be filtered out when looking for the next delay.

I already implemented that in my simulator when I was trying to eliminate the calls to dc.cancel(). Works perfectly well, but I'd rather see Twisted scale better itself.

Are there any objections to replacing the current implementation?

Otherwise I'd just send a patch to the list as soon as I have integrated my version into the respective classes.

Stefan



From itamar at itamarst.org  Mon Sep  6 09:58:32 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 06 Sep 2004 09:58:32 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
Message-ID: <1094479111.28078.0.camel@sheriffpony>

On Mon, 2004-09-06 at 09:43, Stefan Behnel wrote:

> Are there any objections to replacing the current implementation?

Not if yours is faster :) I would like to see some benchmarks comparing
speed of adding and cancelling for cases with many scheduled calls, but
also for cases with few calls, so we can see if your patches slow down
other cases.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Sep  6 10:29:55 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 06 Sep 2004 16:29:55 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094479111.28078.0.camel@sheriffpony>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
Message-ID: <413C7463.40708@gkec.informatik.tu-darmstadt.de>


Itamar Shtull-Trauring schrieb:
 > I would like to see some benchmarks comparing
 > speed of adding and cancelling for cases with many scheduled calls, but
 > also for cases with few calls, so we can see if your patches slow down
 > other cases.


For the first part, I did a few profiler runs that showed results similar to the following. Please note that although I removed a few lines that only belong to my personal code, the top three lines actually /were/ the top three. The "AckManager" lines are a simplified form of my own implementation, see it as a second level callLater. The __run_callbacks method is so slow because it calls "reactor.callLater" to be run repeatedly.

---------------------------------------
          9577183 function calls (9577108 primitive calls) in 117.349 CPU seconds

    Ordered by: internal time, call count

    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    506487   22.837    0.000   30.519    0.000 bisect.py:3(insort_right)
     50830   12.002    0.000  103.742    0.002 base.py:400(runUntilCurrent)
    506487    8.974    0.000   47.078    0.000 base.py:362(callLater)
    498759    8.865    0.000   66.300    0.000 AckManager.py:81(__run_callbacks)
     50830    8.700    0.000    8.911    0.000 default.py:472(doSelect)
   3922829    7.682    0.000    7.682    0.000 base.py:132(__lt__)
    506487    7.585    0.000    7.585    0.000 base.py:54(__init__)
    500901    5.998    0.000    5.998    0.000 AckManager.py:59(__remove_inactive_entries_from_queue)
    500181    5.953    0.000   51.499    0.000 AckManager.py:68(__schedule_run)
         1    2.463    2.463  117.348  117.348 default.py:127(mainLoop)
     50830    2.232    0.000    2.232    0.000 base.py:391(timeout)
---------------------------------------

I think it is actually easy to see here that bisect becomes a serious bottleneck when the list gets longer. I didn't include any results from cancel() as I immediately eliminated all calls to the method after my first profiler run. Believe me, it was absolutely worth it.

I'll just continue reimplementing the IReactorTime stuff and then re-run the profiler for you.

I'll also try to run a few test cases with cancel() - thanks to CVS, I should still have some old code around...

Stefan




From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Sep  6 12:44:50 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 06 Sep 2004 18:44:50 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094479111.28078.0.camel@sheriffpony>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
Message-ID: <413C9402.2020002@gkec.informatik.tu-darmstadt.de>

Itamar Shtull-Trauring schrieb:
> I would like to see some benchmarks comparing
> speed of adding and cancelling for cases with many scheduled calls, but
> also for cases with few calls, so we can see if your patches slow down
> other cases.

So here's a comparison. I had to take a different example to actually see a difference since the profiling run I sent last time was about the same complexity.

Original list-based version:
-------------------------------------------------------------
          11647647 function calls (11647337 primitive calls) in 153.122 CPU seconds

    Ordered by: internal time, call count

    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48733    5.322    0.000    8.469    0.000 bisect.py:3(insort_right)
    595267    3.147    0.000    3.147    0.000 base.py:132(__lt__)
     48733    1.754    0.000   11.545    0.000 base.py:362(callLater)
     48733    1.323    0.000    1.323    0.000 base.py:54(__init__)
        30    1.232    0.041  151.715    5.057 base.py:400(runUntilCurrent)
      3171    0.134    0.000    3.309    0.001 AckManager.py:81(__run_callbacks)
      6801    0.067    0.000    0.426    0.000 AckManager.py:68(__schedule_run)
         1    0.042    0.042    0.042    0.042 base.py:71(cancel)
        30    0.000    0.000    0.000    0.000 base.py:391(timeout)
-------------------------------------------------------------


My heap-based version:
-------------------------------------------------------------
          11726288 function calls (11725973 primitive calls) in 159.055 CPU seconds

    Ordered by: internal time, call count

    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     41752    4.097    0.000    5.420    0.000 heapq.py:226(_siftup)
        24    2.199    0.092  156.848    6.535 base.py:417(runUntilCurrent)
     89610    1.603    0.000    1.779    0.000 heapq.py:174(_siftdown)
    572391    1.212    0.000    1.212    0.000 base.py:134(__le__)
     47858    0.697    0.000    2.778    0.000 base.py:363(callLater)
     47858    0.327    0.000    0.327    0.000 base.py:56(__init__)
     41752    0.288    0.000    5.707    0.000 heapq.py:136(heappop)
     47858    0.262    0.000    1.754    0.000 heapq.py:131(heappush)
      2902    0.150    0.000    4.824    0.002 AckManager.py:81(__run_callbacks)
      6365    0.070    0.000    0.171    0.000 AckManager.py:68(__schedule_run)
        24    0.000    0.000    0.000    0.000 base.py:407(timeout)
        24    0.000    0.000    0.000    0.000 base.py:375(_cleanUpCallLater)
         6    0.000    0.000    0.000    0.000 base.py:72(cancel)
-------------------------------------------------------------

What I found is that callLater becomes /much/ faster in my implementation, while runUntilCurrent /does/ get slower. But that's Ok, I guess, since there is at least one call to callLater for each iteration in runUntilCurrent. So, if there's more calls to callLater, it pays off. I didn't test the cancel() part very well yet, but since the method calls should be almost instantaneous now, I guess, the speed up there will be absolutely increadible. Do not forget, also, that calls to callLater, delay and reset can occurr multiple times before a call is actually executed, so I guess it is /really/ the right thing if runUntilCurrent does more work than the others.

In the first run, there happens to be only one call to cancel(), but that one already takes ages compared to the six calls in the second run.

I hope this is somewhat convincing. Could anyone else please do some testing to see if there are other cases I've overseen?

Stefan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py.diff
Type: text/x-patch
Size: 4235 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040906/d0eebfd2/attachment.bin 

From bob at redivi.com  Mon Sep  6 13:19:17 2004
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 6 Sep 2004 13:19:17 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094479111.28078.0.camel@sheriffpony>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
Message-ID: <E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>


On Sep 6, 2004, at 9:58 AM, Itamar Shtull-Trauring wrote:

> On Mon, 2004-09-06 at 09:43, Stefan Behnel wrote:
>
>> Are there any objections to replacing the current implementation?
>
> Not if yours is faster :) I would like to see some benchmarks comparing
> speed of adding and cancelling for cases with many scheduled calls, but
> also for cases with few calls, so we can see if your patches slow down
> other cases.

There's also the fact that this:

def infiniteLoop():
	reactor.callLater(0.0, infiniteLoop)

will just destroy Twisted because the current loop iteration will never 
finish.

In my non-Twisted implementation of the same concept, during each 
iteration I keep a list of new timers, which gets merged into the heap 
at the end of each iteration (so that they will be in the heap for the 
next round).

I'm not sure I understand the logic behind _cleanUpCallLater in the 
patch?  It doesn't seem right, especially for delayed, but I didn't 
really read very carefully.

-bob



From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Sep  6 13:28:18 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 06 Sep 2004 19:28:18 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413C9402.2020002@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>
	<413C9402.2020002@gkec.informatik.tu-darmstadt.de>
Message-ID: <413C9E32.60608@gkec.informatik.tu-darmstadt.de>

Hi!

I wondered if the Constructor parameters of DelayedCall were important elsewhere. Maybe they should stay the same - I don't know. So for your convenience, here's two complete patches, one that removes the "reset" and "cancel" parameters from the constructor and one that doesn't. It doesn't actually change much to leave them in, it only moves a part of the work from runUntilCurrent back into the cancel and reset methods. I figure you'd rarely see a difference, so you may as well leave them in.

Have fun,
Stefan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py+resetter+canceller.diff
Type: text/x-patch
Size: 4202 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040906/0183eb30/attachment.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py-without-resetter-canceller.diff
Type: text/x-patch
Size: 4342 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040906/0183eb30/attachment-0001.bin 

From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Sep  6 13:53:26 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 06 Sep 2004 19:53:26 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
Message-ID: <413CA416.6020009@gkec.informatik.tu-darmstadt.de>


Bob Ippolito schrieb:
> There's also the fact that this:
> 
> def infiniteLoop():
>     reactor.callLater(0.0, infiniteLoop)
> 
> will just destroy Twisted because the current loop iteration will never 
> finish.
> In my non-Twisted implementation of the same concept, during each 
> iteration I keep a list of new timers, which gets merged into the heap 
> at the end of each iteration (so that they will be in the heap for the 
> next round).

I think that's the way to go. That's actually easy to do, here's a patch against my implementation that does exactly that. It moves a bit more work into runUntilCurrent, but I think I already made my point in that regard.


> I'm not sure I understand the logic behind _cleanUpCallLater in the 
> patch?  It doesn't seem right, especially for delayed, but I didn't 
> really read very carefully.

In the cancelled case, it just pops the cancelled call - done (and obviously correct). In the delayed case it pops the changed call (that possibly temporarily brakes the heap invariant) and replaces it with itself, so it actually re-inserts the call at the right position.

Though, ... I guess I do see a problem if the value of a call somewhere in the heap is changed. That brakes the heap invariant and may conflict with further changes to the heap. Let me think about it.

Stefan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py+merge_later.diff
Type: text/x-patch
Size: 1163 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040906/6c8479fd/attachment.bin 

From itamar at itamarst.org  Mon Sep  6 15:15:40 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 06 Sep 2004 15:15:40 -0400
Subject: [Twisted-Python] Implementing a custom FTP server
In-Reply-To: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
Message-ID: <1094498140.28078.4.camel@sheriffpony>

On Mon, 2004-09-06 at 01:02, Jason Stitt wrote:

> I'm trying to implement a custom FTP server (eventually SFTP, but I 
> want to get the basics down.) 

Are you aware that:

1. Twisted's FTP server has in theory support for generic backends?
(though it is currently being rewritten, so you could help with that).

2. SFTP (SSH's transfer protocol) is very different protocol than FTP.

3. Twisted also has a SFTP implementation.

> P.P.S. is SFTP different enough from FTP that I should be thinking 
> about implementing it from the start, rather than later, or can I just 
> graft an SSL layer onto my FTP server?

Oh, hm. Perhaps you should clarify. When you say "sftp" do you mean
SSH2's sftp protocol (totally different than FTP) or FTP over TLS?

As far as details about how the protocol works, you should check out Dan
Bernstein's FTP docs and of course the RFCs.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From jason at pengale.com  Mon Sep  6 15:34:39 2004
From: jason at pengale.com (Jason Stitt)
Date: Mon, 06 Sep 2004 14:34:39 -0500
Subject: [Twisted-Python] Implementing a custom FTP server
In-Reply-To: <1094498140.28078.4.camel@sheriffpony>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
Message-ID: <CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>

On Sep 6, 2004, at 2:15 PM, Itamar Shtull-Trauring wrote:

> On Mon, 2004-09-06 at 01:02, Jason Stitt wrote:
>
>> I'm trying to implement a custom FTP server (eventually SFTP, but I
>> want to get the basics down.)
>
> Are you aware that:
>
> 1. Twisted's FTP server has in theory support for generic backends?
> (though it is currently being rewritten, so you could help with that).

I'm not quite sure what you mean. Right now, I am subclassing 
twisted.protocols.ftp.FTP and selectively overriding methods such as 
ftp_LIST, etc. Is there a better way?

And I'd be glad to help with the rewrite if I knew where to start, as 
it looks like I will be doing quite a bit of work with it.

> 2. SFTP (SSH's transfer protocol) is very different protocol than FTP.
>
> 3. Twisted also has a SFTP implementation.

I thought it might.

To answer your further questions, I'm not that experienced with 
programming the FTP or SFTP protocol (yet...) so I don't know a lot 
about the differences. I want to use SFTP eventually for security 
reasons but figured that FTP would be simpler to start out with. If 
they're that different, perhaps I should start looking into SFTP from 
the start.

Thanks,

Jason




From z3p at twistedmatrix.com  Mon Sep  6 15:52:44 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Mon, 06 Sep 2004 15:52:44 -0400
Subject: [Twisted-Python] Implementing a custom FTP server
In-Reply-To: <CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
Message-ID: <1094500365.23898.2.camel@petra>

On Mon, 2004-09-06 at 14:34 -0500, Jason Stitt wrote:
> To answer your further questions, I'm not that experienced with 
> programming the FTP or SFTP protocol (yet...) so I don't know a lot 
> about the differences. I want to use SFTP eventually for security 
> reasons but figured that FTP would be simpler to start out with. If 
> they're that different, perhaps I should start looking into SFTP from 
> the start.

It's easier to talk about the similarities between SFTP and FTP than the
differences.  The only real similarities between the two protocols are
1) the names 2) that they interface to a filesystem.  Other than that,
they're two entirely different protocols.  The Interfaces that Conch's
SFTP implementation uses are twisted.conch.interfaces.ISFTPServer and
ISFTPFile.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040906/ef656006/attachment.pgp 

From andy at thecablelounge.com  Mon Sep  6 21:35:34 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue, 07 Sep 2004 11:35:34 +1000
Subject: [Twisted-Python] Implementing a custom FTP server
In-Reply-To: <1094500365.23898.2.camel@petra>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>	<1094498140.28078.4.camel@sheriffpony>	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra>
Message-ID: <413D1066.7070704@thecablelounge.com>


>> On Mon, 2004-09-06 at 14:34 -0500, Jason Stitt wrote:
>>To answer your further questions, I'm not that experienced with 
>>programming the FTP or SFTP protocol (yet...) so I don't know a lot 
>>about the differences. I want to use SFTP eventually for security 
>>reasons but figured that FTP would be simpler to start out with. If 
>>they're that different, perhaps I should start looking into SFTP from 
>>the start.


Paul Swartz wrote:
> It's easier to talk about the similarities between SFTP and FTP than the
> differences.  The only real similarities between the two protocols are
> 1) the names 2) that they interface to a filesystem.  Other than that,
> they're two entirely different protocols.  The Interfaces that Conch's
> SFTP implementation uses are twisted.conch.interfaces.ISFTPServer and
> ISFTPFile.

G'dday Jason,

I'm chipping away in this area as well as I find time.  I started with 
SFTP - but also want to support all filelike interfaces in the future.

I've opened up svn access to what I have so far:

svn list svn://twisted.cablelounge.com/welsh/trunk

Its very rough .. pretty embarrassing really :) .. hopefully its of some 
help though, and it'd be good to get feedback - particularly as you're 
working with FTP.

The general strategy is to represent your file store independent of any 
protocol.  I've a simple sambaish like file store in file.py.  Then for 
each protocol write an adaptor from your file store objects to the 
interface that protocols expects.  fileadapt.py does this for SFTP. 
realm.py ties it all together.

You can play with it by creating a tap file:

mktap welsh -p 5822 -d /etc/ssh

or something similiar - it's pretty much conch ..

Then create a file 'welshpasswd' to define the accounts on your system 
and place it in the same directory as the tap file.

The file sets up a users variable:

users = {
     loginuserid : {
         nameOfVirtualDirectory  : (uid, gid, realSystemDirectory),
         nameOfVirtualDirectory2 : (uid, gid, realSystemDirectory2),
     }
}

example welshpasswd:
---------------------
users = {
     "andy" : {
             "home"   : ( 509, 509, "/home/andy" ),
     },
     "az" : {
             "home"              : ( 518, 518, "/home/az/incoming" ),
             "giiwa"             : ( 108, 108, "/home/giiwa" ),
             "muddypigrecords"   : (  99,  99, "/home/muddypigrecords" ),
     },
}
----------------------

erg, apologies for the roughness :(

When az logins in, he'll see three directories, home, giiwa and 
muddypigrecords - while working in those directories he'll assume the 
uid and gid and be working in the physical directory as defined above.

 > Itamar Shtull-Trauring wrote:
> 1. Twisted's FTP server has in theory support for generic backends?
> (though it is currently being rewritten, so you could help with that).

Good luck!  I'm yet to take a look, but wouldn't mind helping out if the 
FTP backend needs a bit of work to be made more accessible.

Andy.












From jason at pengale.com  Mon Sep  6 22:55:32 2004
From: jason at pengale.com (Jason Stitt)
Date: Mon, 06 Sep 2004 21:55:32 -0500
Subject: [Twisted-Python] Implementing a custom FTP server
In-Reply-To: <413D1066.7070704@thecablelounge.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
Message-ID: <621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>

> G'dday Jason,
>
> I'm chipping away in this area as well as I find time.  I started with 
> SFTP - but also want to support all filelike interfaces in the future.

This sounds like a good idea. Unfortunately, I cannot get twistd and 
mktap working properly on OS X.  I've been just using reactor objects 
directly, as the simpler examples do. So I'll have to set it up on my 
Linux server sometime to try it out. I'll get you some feedback when I 
do.

Jason




From vng1 at mac.com  Tue Sep  7 01:43:05 2004
From: vng1 at mac.com (vng1 at mac.com)
Date: Tue, 7 Sep 2004 01:43:05 -0400
Subject: [Twisted-Python] Is anyone working on CFReactor?
Message-ID: <CA8DE351-0090-11D9-B140-000A95C5186E@mac.com>

Is anyone looking at what's wrong with the CFReactor in Twisted 1.3 and 
OSX?

http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue648

I vaguely remember seeing a posting about the GIL causing problems, but 
I can't seem to find that article now.

vic
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2353 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040907/17b01850/attachment.bin 

From jordan at krushen.com  Tue Sep  7 03:46:15 2004
From: jordan at krushen.com (Jordan Krushen)
Date: Tue, 7 Sep 2004 00:46:15 -0700
Subject: [Twisted-Python] Is anyone working on CFReactor?
In-Reply-To: <CA8DE351-0090-11D9-B140-000A95C5186E@mac.com>
References: <CA8DE351-0090-11D9-B140-000A95C5186E@mac.com>
Message-ID: <FF022D9F-00A1-11D9-9FCD-000A958E9340@krushen.com>

On 6-Sep-04, at 10:43 PM, vng1 at mac.com wrote:

> Is anyone looking at what's wrong with the CFReactor in Twisted 1.3 
> and OSX?
>
> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue648
>
> I vaguely remember seeing a posting about the GIL causing problems, 
> but I can't seem to find that article now.

I think Bob had mentioned recent changes to the GIL as one possibility, 
but I don't know if he's investigated it further.  I know he's busy, so 
if anyone else here can get CFReactor working, that would be 
appreciated -- I currently have one project on hold due to this bug.

J.




From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue Sep  7 04:51:12 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 07 Sep 2004 10:51:12 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413CA416.6020009@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
Message-ID: <413D7680.6060103@gkec.informatik.tu-darmstadt.de>


Stefan Behnel schrieb:
> I guess I do see a problem if the value of a call somewhere 
> in the heap is changed. That brakes the heap invariant and may conflict 
> with further changes to the heap. Let me think about it.

Ok, I thought about it. And I believe the best way to do this is to write a specialized heap version. I copied the heapq implementation and adapted it so that it keeps track of the position in the heap for each DelayedCall. That makes it possible to remove a call without linear overhead and in log(N) time.

So, comparing the complexity of the heap version with the original version:

callLater:
	ORIG:	O(log(N)) for binary search + O(N) for array insertion (python lists are arrays as far as I know)
	HEAP:	O(1) as it is only appended to a list. Insertion is done in runUntilCurrent (as late as possible)

cancel:
	ORIG:	O(N) for linear array deletion
	HEAP:	O(log(N)) if it was already inserted, O(1) if it was only stored for later insertion (see post by Bob)

reset:
	ORIG:	O(N) for linear array deletion + O(log(N)) for binary search + O(N) for array insertion
	HEAP:	O(log(N)) for removal + O(log(N)) for insertion if it was already inserted
		O(1) if it was only stored

delay:
	see reset - could actually be implemented twice as fast in the heap (only _siftup), but I didn't do that - it's fast enough anyway

runUntilCurrent:
	heap implementation is about log(N) times slower, which is still much faster than the original implementaion if you add it up with callLater. There is always one call to callLater and at most (!) one iteration in runUntilCurrent for each DelayedCall.


So, summing it up, it kicks ass.


Other things to mention:

getDelayCalls has a slight change in semantics: It only returns the delayed calls that were already inserted into the heap, so if you run callLater and getDelayCalls in the same iteration of the main loop, you will not find your delayed call in the returned tuple. This is due to the change Bob proposed.


Now, are there any test cases in Twisted for the ReactorTime part? I'd like to see them run over my implementation to check if it works as expected in all cases.

You should also consider running pychecker over the old version, there were some unused variables and that kind of stuff.

Hoping for approval,
Stefan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py.diff
Type: text/x-patch
Size: 8016 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040907/d2473bac/attachment.bin 

From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue Sep  7 05:17:32 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 07 Sep 2004 11:17:32 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater - clean
	patch
In-Reply-To: <413D7680.6060103@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
Message-ID: <413D7CAC.3080400@gkec.informatik.tu-darmstadt.de>

Sorry for spamming - here's a slightly cleaned up patch that does not include some left overs - no changes in behaviour.

Stefan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py.diff.gz
Type: application/x-gzip
Size: 1877 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040907/6c0e4996/attachment.bin 

From serj_trejo at hotmail.com  Tue Sep  7 06:19:39 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Tue, 07 Sep 2004 06:19:39 -0400
Subject: [Twisted-Python] PB / XML
Message-ID: <BAY12-F39BHkJxz6LHQ00019bf1@hotmail.com>

I read with interest a thread that was discussed over a year ago on the 
mailing list which was initiated by Uwe C. Schroeder discussing use of 
Perspective Broker to pipe around data (in which PB has some size 
restrictions on how much it will vend over the wire between PB Client and PB 
Server):

http://twistedmatrix.com/pipermail/twisted-python/2003-May/003986.html

Similar to Uwe, I want to push around some XML data. I don't need SOAP and I 
don't need XML-RPC. I just want to push little chunks of XML between PB 
Client and PB Server, and I want to do so in a manner that adheres to the 
strictness of PB and its data size limits per the thread mentioned above.

What I am curious about is if any twisted developers can recommend a means 
for encoding and decoding an XML document before / after sending such 
encoded document over the wire via PB? It would be nice to be able to 
validate the XML). I have taken notice of twisted.protocols.sux but in 
reading the API documents, it doesn't appear as if sux is going to be 
applicable to PB usage since sux can not perform *any* external actions 
under *any* circumstances" ... plus sux doesn't validate. So, can anyone 
recommend a known method for taking XML data  into a generic Python object 
which is compatable with PB?

Eventually I want to take the XML data and persist it into an atop data base 
but that's later down the pipeline and better left for the divmod list.

Thanks for any feedback / experiences,

Serg

_________________________________________________________________
MSN 8 with e-mail virus protection service: 2 months FREE* 
http://join.msn.com/?page=features/virus




From mwh at python.net  Tue Sep  7 06:21:50 2004
From: mwh at python.net (Michael Hudson)
Date: Tue, 07 Sep 2004 11:21:50 +0100
Subject: [Twisted-Python] Re: Implementing a custom FTP server
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
Message-ID: <2mzn421irl.fsf@starship.python.net>

Jason Stitt <jason at pengale.com> writes:

>> G'dday Jason,
>>
>> I'm chipping away in this area as well as I find time.  I started
>> with SFTP - but also want to support all filelike interfaces in the
>> future.
>
> This sounds like a good idea. Unfortunately, I cannot get twistd and
> mktap working properly on OS X. 

What have you been trying?  Admittedly. I'm not using mktap, but I'm
using twistd on OS X with approximately no issues at all (apart from
the fact that it got installed in the back of beyond, under
/Library/Frameworks/...).

Cheers,
mwh

-- 
 All parts should go together without forcing. You must remember that
 the parts you are  reassembling were disassembled by you.  Therefore,
 if you can't get them together again, there must be a reason. By all
 means, do not use a hammer.           -- IBM maintenance manual, 1925




From pkelly at vigilantminds.com  Tue Sep  7 09:23:04 2004
From: pkelly at vigilantminds.com (Patrick Kelly)
Date: Tue, 7 Sep 2004 09:23:04 -0400
Subject: [Twisted-Python] Twisted XML-RPC Database Interface
Message-ID: <6E4E9A51D91C044F9879FD72389600F7B044AF@new_iron.vigilantminds.com>

Hi,

 

I'm new to twisted and fairly new to python.  I'm toying with a way to
use Twisted/XML-RPC to make calls to a mysql database.  I've gone
through the examples on the web page, but I'm still having trouble
putting it all together.  Is there some good example code somewhere else
that will help write the server and client?

 

Thanks for you help

Patrick

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040907/10e5f9f7/attachment.htm 

From abe at fettig.net  Tue Sep  7 10:32:01 2004
From: abe at fettig.net (Abe Fettig)
Date: Tue, 07 Sep 2004 10:32:01 -0400
Subject: [Twisted-Python] Using setuid/setgid correctly
Message-ID: <413DC661.4010900@fettig.net>

Hi folks,

Can anyone give me a quick primer (or point me to some documentation) on 
using uid/gids with twisted.application and mktap?  I'm looking to run a 
server process under an unprivileged user account, while still being 
able to bind to reserved ports at startup.

Thanks!

Abe



From itamar at itamarst.org  Tue Sep  7 12:30:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 07 Sep 2004 12:30:53 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater -
	clean patch
In-Reply-To: <413D7CAC.3080400@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413D7CAC.3080400@gkec.informatik.tu-darmstadt.de>
Message-ID: <1094574653.30837.2.camel@sheriffpony>

On Tue, 2004-09-07 at 05:17, Stefan Behnel wrote:
> Sorry for spamming - here's a slightly cleaned up patch that does not include some left overs - no changes in behaviour.

Thanks - add it to twistedmatrix.com/bugs/ and assign to me.




From exarkun at divmod.com  Tue Sep  7 13:07:46 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 07 Sep 2004 13:07:46 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413D7680.6060103@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
Message-ID: <413DEAE2.7050701@divmod.com>

Stefan Behnel wrote:
> 
> Stefan Behnel schrieb:
> 
>> I guess I do see a problem if the value of a call somewhere in the 
>> heap is changed. That brakes the heap invariant and may conflict with 
>> further changes to the heap. Let me think about it.
> 
> 
> Ok, I thought about it. And I believe the best way to do this is to 
> write a specialized heap version. I copied the heapq implementation and 
> adapted it so that it keeps track of the position in the heap for each 
> DelayedCall. That makes it possible to remove a call without linear 
> overhead and in log(N) time.
 > [snip]
> 

   heapq.py is under the PSF license.  PSF is roughly similar to MIT. 
Is this going to be okay for inclusion in Twisted?

   Jp



From mwh at python.net  Tue Sep  7 13:25:08 2004
From: mwh at python.net (Michael Hudson)
Date: Tue, 07 Sep 2004 18:25:08 +0100
Subject: [Twisted-Python] Re: Performance issue in reactor.callLater
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com>
Message-ID: <2moeki0z63.fsf@starship.python.net>

Jp Calderone <exarkun at divmod.com> writes:

> Stefan Behnel wrote:
>> Stefan Behnel schrieb:
>> 
>>> I guess I do see a problem if the value of a call somewhere in the
>>> heap is changed. That brakes the heap invariant and may conflict
>>> with further changes to the heap. Let me think about it.
>> Ok, I thought about it. And I believe the best way to do this is to
>> write a specialized heap version. I copied the heapq implementation
>> and adapted it so that it keeps track of the position in the heap
>> for each DelayedCall. That makes it possible to remove a call
>> without linear overhead and in log(N) time.
>  > [snip]
>> 
>
>    heapq.py is under the PSF license.  PSF is roughly similar to
>    MIT. Is this going to be okay for inclusion in Twisted?

It's also one of the newer, and hence less complicated in this
respect, bits of Python.  You can probably just get permission from
whoever wrote it...

# Original code by Kevin O'Connor, augmented by Tim Peters and Raymond Hettinger

it seems.

Cheers,
mwh

-- 
  "Also, does the simple algorithm you used in Cyclops have a name?"
  "Not officially, but it answers to "hey, dumb-ass!"
                       -- Neil Schemenauer and Tim Peters, 23 Feb 2001




From glyph at divmod.com  Tue Sep  7 14:13:41 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 07 Sep 2004 14:13:41 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413DEAE2.7050701@divmod.com>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com>
Message-ID: <1094580821.21920.6.camel@kazekage>

On Tue, 2004-09-07 at 13:07, Jp Calderone wrote:

>    heapq.py is under the PSF license.  PSF is roughly similar to MIT. 
> Is this going to be okay for inclusion in Twisted?

It's part of Python, so I don't see why that would be necessary.

However, I have profiled various heapq-based schemes for callLater in
the past, and they always end up losing pretty big in the average case,
and winning only in perverse cases such as hundreds of callLater(0)s per
tick.  I saw a little discussion of the performance impact, but I am
still not entirely convinced that it's a good idea.




From jason at pengale.com  Tue Sep  7 14:23:50 2004
From: jason at pengale.com (Jason Stitt)
Date: Tue, 07 Sep 2004 13:23:50 -0500
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <2mzn421irl.fsf@starship.python.net>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
Message-ID: <112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>

On Sep 7, 2004, at 5:21 AM, Michael Hudson wrote:

> Jason Stitt <jason at pengale.com> writes:
>>
>> This sounds like a good idea. Unfortunately, I cannot get twistd and
>> mktap working properly on OS X.
>
> What have you been trying?  Admittedly. I'm not using mktap, but I'm
> using twistd on OS X with approximately no issues at all (apart from
> the fact that it got installed in the back of beyond, under
> /Library/Frameworks/...).

Originally, twistd contained a hard-coded check that told me I was 
using Windows (the nerve!) and told me to use twistw (which, of course, 
didn't work). I removed that. Now I'm still having some problems with 
twistd not respecting the working directory and, thus, not being able 
to find modules to import.

Jason




From itamar at itamarst.org  Tue Sep  7 14:28:34 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 07 Sep 2004 14:28:34 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094580821.21920.6.camel@kazekage>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com>  <1094580821.21920.6.camel@kazekage>
Message-ID: <1094581714.31032.3.camel@sheriffpony>

On Tue, 2004-09-07 at 14:13, Glyph Lefkowitz wrote:

> >    heapq.py is under the PSF license.  PSF is roughly similar to MIT. 
> > Is this going to be okay for inclusion in Twisted?
> 
> It's part of Python, so I don't see why that would be necessary.

This is patched / somehow different version.

> However, I have profiled various heapq-based schemes for callLater in
> the past, and they always end up losing pretty big in the average case,
> and winning only in perverse cases such as hundreds of callLater(0)s per
> tick.  I saw a little discussion of the performance impact, but I am
> still not entirely convinced that it's a good idea.
> 

Obviously we wouldn't commit without further performance testing.




From radeex at gmail.com  Tue Sep  7 14:29:19 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 7 Sep 2004 14:29:19 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <60ed19d40409071129715728ef@mail.gmail.com>

On Tue, 07 Sep 2004 13:23:50 -0500, Jason Stitt <jason at pengale.com> wrote:
> On Sep 7, 2004, at 5:21 AM, Michael Hudson wrote:
> 
> Originally, twistd contained a hard-coded check that told me I was
> using Windows (the nerve!) and told me to use twistw (which, of course,
> didn't work). 

If this happened to you, it's because you're not calling the right
thing. You should be calling the twistd in Python2X\Scripts (IIRC),
*not* Python2X\Lib\site-packages\twisted\scripts\twistd.py. If you use
the twisted-environment command line that's placed into your Start
menu, just typing "twistd" should work.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From itamar at itamarst.org  Tue Sep  7 14:30:33 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 07 Sep 2004 14:30:33 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <1094581833.31027.6.camel@sheriffpony>

On Tue, 2004-09-07 at 14:23, Jason Stitt wrote:

> didn't work). I removed that. Now I'm still having some problems with 
> twistd not respecting the working directory and, thus, not being able 
> to find modules to import.

This happens on all platforms when you run as root. It's a security
feature. It will not be removed. So your best bet is to add the
directory where your package is to PYTHONPATH, as with all Python
programs. 

Oh, and, why twistw? I'd expect twistd to use the unix version on Mac OS
X.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From radeex at gmail.com  Tue Sep  7 14:35:59 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 7 Sep 2004 14:35:59 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <1094581833.31027.6.camel@sheriffpony>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
Message-ID: <60ed19d404090711356a82ab05@mail.gmail.com>

On Tue, 07 Sep 2004 14:30:33 -0400, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> Oh, and, why twistw? I'd expect twistd to use the unix version on Mac OS
> X.

Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
there? Guess that check should more explicitly check for win32.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From bob at redivi.com  Tue Sep  7 14:47:42 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 7 Sep 2004 14:47:42 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <60ed19d404090711356a82ab05@mail.gmail.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra>
	<413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
Message-ID: <662FE660-00FE-11D9-9C5C-000A95686CD8@redivi.com>


On Sep 7, 2004, at 2:35 PM, Christopher Armstrong wrote:

> On Tue, 07 Sep 2004 14:30:33 -0400, Itamar Shtull-Trauring
> <itamar at itamarst.org> wrote:
>> Oh, and, why twistw? I'd expect twistd to use the unix version on Mac 
>> OS
>> X.
>
> Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
> there? Guess that check should more explicitly check for win32.

uh, of course sys.platform == 'posix'

I dunno what the heck he is doing, but twistd has always worked fine 
for me on OS X.

-bob



From bob at redivi.com  Tue Sep  7 14:51:14 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 7 Sep 2004 14:51:14 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094581714.31032.3.camel@sheriffpony>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com> <1094580821.21920.6.camel@kazekage>
	<1094581714.31032.3.camel@sheriffpony>
Message-ID: <E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>


On Sep 7, 2004, at 2:28 PM, Itamar Shtull-Trauring wrote:

> On Tue, 2004-09-07 at 14:13, Glyph Lefkowitz wrote:
>
>>>    heapq.py is under the PSF license.  PSF is roughly similar to MIT.
>>> Is this going to be okay for inclusion in Twisted?
>>
>> It's part of Python, so I don't see why that would be necessary.
>
> This is patched / somehow different version.
>
>> However, I have profiled various heapq-based schemes for callLater in
>> the past, and they always end up losing pretty big in the average 
>> case,
>> and winning only in perverse cases such as hundreds of callLater(0)s 
>> per
>> tick.  I saw a little discussion of the performance impact, but I am
>> still not entirely convinced that it's a good idea.
>>
>
> Obviously we wouldn't commit without further performance testing.

What is the "average" case anyway?  For what application?  Where are 
the performance tests coming from?

There is at least one scenario where it makes perfect sense to do a lot 
of callLater(0.0, ...), when you're doing computation but trying not to 
block.

Though, of course, you would do something like callLater(0.00001, ...) 
in the current Twisted, because callLater(0.0, ...) pretty much blocks.

-bob



From jason at pengale.com  Tue Sep  7 14:54:40 2004
From: jason at pengale.com (Jason Stitt)
Date: Tue, 07 Sep 2004 13:54:40 -0500
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <60ed19d404090711356a82ab05@mail.gmail.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
Message-ID: <5F9DCD40-00FF-11D9-A692-000D93AF8AD2@pengale.com>

On Sep 7, 2004, at 1:35 PM, Christopher Armstrong wrote:

> On Tue, 07 Sep 2004 14:30:33 -0400, Itamar Shtull-Trauring
> <itamar at itamarst.org> wrote:
>> Oh, and, why twistw? I'd expect twistd to use the unix version on Mac 
>> OS
>> X.
>
> Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
> there? Guess that check should more explicitly check for win32.

Right. sys.platform is 'darwin' on OS X.

> -- 
>  Twisted | Christopher Armstrong: International Man of Twistery
>   Radix  |          Release Manager,  Twisted Project
> ---------+            http://radix.twistedmatrix.com
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From bob at redivi.com  Tue Sep  7 15:07:46 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 7 Sep 2004 15:07:46 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <5F9DCD40-00FF-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra>
	<413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
	<5F9DCD40-00FF-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <3462B114-0101-11D9-9892-000A95686CD8@redivi.com>


On Sep 7, 2004, at 2:54 PM, Jason Stitt wrote:

> On Sep 7, 2004, at 1:35 PM, Christopher Armstrong wrote:
>
>> On Tue, 07 Sep 2004 14:30:33 -0400, Itamar Shtull-Trauring
>> <itamar at itamarst.org> wrote:
>>> Oh, and, why twistw? I'd expect twistd to use the unix version on 
>>> Mac OS
>>> X.
>>
>> Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
>> there? Guess that check should more explicitly check for win32.
>
> Right. sys.platform is 'darwin' on OS X.

Presumably he meant os.name .. I don't think sys.platform == 'posix' 
anywhere.

-bob



From jason at pengale.com  Tue Sep  7 15:11:03 2004
From: jason at pengale.com (Jason Stitt)
Date: Tue, 07 Sep 2004 14:11:03 -0500
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <1094581833.31027.6.camel@sheriffpony>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
Message-ID: <A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>


On Sep 7, 2004, at 1:30 PM, Itamar Shtull-Trauring wrote:

> On Tue, 2004-09-07 at 14:23, Jason Stitt wrote:
>
>> didn't work). I removed that. Now I'm still having some problems with
>> twistd not respecting the working directory and, thus, not being able
>> to find modules to import.
>
> This happens on all platforms when you run as root. It's a security
> feature. It will not be removed. So your best bet is to add the
> directory where your package is to PYTHONPATH, as with all Python
> programs.

That makes sense. I just figured out I was getting a little confused -- 
not all my import problems were local. One of the examples I downloaded 
from the Twisted site (the SSH server, sshsimpleserver.py) tries to 
import realm from twisted.conch, which does not have a realm module 
(it's not in the API docs, either). Was this removed at some point, 
perhaps?

Jason




From fdrake at acm.org  Tue Sep  7 15:14:14 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 7 Sep 2004 15:14:14 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <662FE660-00FE-11D9-9C5C-000A95686CD8@redivi.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<60ed19d404090711356a82ab05@mail.gmail.com>
	<662FE660-00FE-11D9-9C5C-000A95686CD8@redivi.com>
Message-ID: <200409071514.14491.fdrake@acm.org>

On Tuesday 07 September 2004 02:47 pm, Bob Ippolito wrote:
 > uh, of course sys.platform == 'posix'
 >
 > I dunno what the heck he is doing, but twistd has always worked fine
 > for me on OS X.

Mac OS X 10.2.8 says this:

Python 2.2 (#1, 07/14/02, 23:25:09)
[GCC Apple cpp-precomp 6.14] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import os, sys
>>> os.name
'posix'
>>> sys.platform
'darwin'

On Windows, I expect os.name == "nt" and sys.platform[:3].lower() == "win".


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>




From z3p at twistedmatrix.com  Tue Sep  7 15:24:16 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 07 Sep 2004 15:24:16 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <1094585056.23898.10.camel@petra>

On Tue, 2004-09-07 at 14:11 -0500, Jason Stitt wrote:
> One of the examples I downloaded 
> from the Twisted site (the SSH server, sshsimpleserver.py) tries to 
> import realm from twisted.conch, which does not have a realm module 
> (it's not in the API docs, either). Was this removed at some point, 
> perhaps?

Yes, the stuff in realm.py was refactored and moved into unix.py.  SVN
has a working version.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040907/a95fafb3/attachment.pgp 

From jason at pengale.com  Tue Sep  7 15:36:46 2004
From: jason at pengale.com (Jason Stitt)
Date: Tue, 07 Sep 2004 14:36:46 -0500
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <3462B114-0101-11D9-9892-000A95686CD8@redivi.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
	<5F9DCD40-00FF-11D9-A692-000D93AF8AD2@pengale.com>
	<3462B114-0101-11D9-9892-000A95686CD8@redivi.com>
Message-ID: <411D3A17-0105-11D9-A692-000D93AF8AD2@pengale.com>

All right. I think I had some version problems or something. I checked 
with my Linux install, and it uses twisted.python.runtime.platformType, 
which correctly identifies OS X as 'posix'.

So twistd is no longer telling me that I run Windows. Thank goodness.

Jason




From itamar at itamarst.org  Tue Sep  7 15:54:45 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 07 Sep 2004 15:54:45 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <60ed19d404090711356a82ab05@mail.gmail.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
Message-ID: <1094586885.31029.8.camel@sheriffpony>

On Tue, 2004-09-07 at 14:35, Christopher Armstrong wrote:

> Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
> there? Guess that check should more explicitly check for win32.

The code does not check sys.platform. It checks
twisted.python.runtime.platformType, which should be "posix" on OS X,
regardless of what sys.platform is.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From radeex at gmail.com  Tue Sep  7 15:58:20 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 7 Sep 2004 15:58:20 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <1094586885.31029.8.camel@sheriffpony>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
	<1094586885.31029.8.camel@sheriffpony>
Message-ID: <60ed19d4040907125853c6354e@mail.gmail.com>

On Tue, 07 Sep 2004 15:54:45 -0400, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Tue, 2004-09-07 at 14:35, Christopher Armstrong wrote:
> 
> > Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
> > there? Guess that check should more explicitly check for win32.
> 
> The code does not check sys.platform. It checks
> twisted.python.runtime.platformType, which should be "posix" on OS X,
> regardless of what sys.platform is.

Sorry, I was accidentally looking at 1.3.0. :-)



-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From andy at thecablelounge.com  Tue Sep  7 20:40:16 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Wed, 08 Sep 2004 10:40:16 +1000
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <1094585056.23898.10.camel@petra>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>	<1094498140.28078.4.camel@sheriffpony>	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>	<1094500365.23898.2.camel@petra>
	<413D1066.7070704@thecablelounge.com>	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>	<2mzn421irl.fsf@starship.python.net>	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>	<1094581833.31027.6.camel@sheriffpony>	<A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>
	<1094585056.23898.10.camel@petra>
Message-ID: <413E54F0.5040201@thecablelounge.com>

Paul Swartz wrote:
> On Tue, 2004-09-07 at 14:11 -0500, Jason Stitt wrote:
> 
>>One of the examples I downloaded 
>>from the Twisted site (the SSH server, sshsimpleserver.py) tries to 
>>import realm from twisted.conch, which does not have a realm module 
>>(it's not in the API docs, either). Was this removed at some point, 
>>perhaps?
> 
> 
> Yes, the stuff in realm.py was refactored and moved into unix.py.  SVN
> has a working version.

Jason, just a quick note.

I've been putting off changing over to the new component architecture so 
I'm working against a pretty out of date version of trunk.

I'm currently running welsh against Twisted r10936 in pseudo production 
(if you call serving up a few mates sites production:)).  It looks like 
Paul made the above refactored in r10415, so that's there.

This is a good spur to finally make the change over, so I should get to 
it in the next weekend of so.

Andy.



From mailinglist at ltsai.com  Tue Sep  7 20:54:37 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Wed, 08 Sep 2004 08:54:37 +0800
Subject: [Twisted-Python] twistd quietness
Message-ID: <chll95$l4h$1@sea.gmane.org>

Hi

Is there an option in twistd from showing stderr messages from 
appearing, specifically "Removing stale pidfile /var/run/myProg.pid"?

# twistd -y myProg.tac -q --pid /var/run/myProg.pid

I'm already using the quiet option. Do I simply redirect stderr to 
/dev/null?

-Liming




From cce at clarkevans.com  Tue Sep  7 21:59:18 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 7 Sep 2004 21:59:18 -0400
Subject: [Twisted-Python] FWD: PEP 334 - Simple Coroutines via
	SuspendIteration
Message-ID: <20040908015918.GB52384@prometheusresearch.com>

Perhaps with a bit of low-level help from the Python Interpreter,
"flow" can be rendered obsolete. - Clark

----- Forwarded message from "Clark C. Evans" <cce at clarkevans.com> -----
Date: Tue, 7 Sep 2004 21:48:45 -0400
From: "Clark C. Evans" <cce at clarkevans.com>
To: python-dev at python.org
Subject: [Python-Dev] PEP 334 - Simple Coroutines via SuspendIteration

I've packaged up the idea of a coroutine facility using iterators and an
exception, SuspendIteration.  This would require some rather deep
changes to how generators are implemented, however, it seems backwards
compatible, implementable /w JVM or CLR, and would make most of my
database/web development work far more pleasant.

http://www.python.org/peps/pep-0334.html

Cheers!

Clark

...

PEP: 334
Title: Simple Coroutines via SuspendIteration
Version: $Revision: 1.1 $
Last-Modified: $Date: 2004/09/08 00:11:18 $
Author: Clark C. Evans <info at clarkevans.com>
Status: Draft
Type: Standards Track
Python-Version: 3.0
Content-Type: text/x-rst
Created: 26-Aug-2004
Post-History: 


Abstract
========

Asynchronous application frameworks such as Twisted [1]_ and Peak
[2]_, are based on a cooperative multitasking via event queues or
deferred execution.  While this approach to application development
does not involve threads and thus avoids a whole class of problems
[3]_, it creates a different sort of programming challenge.  When an
I/O operation would block, a user request must suspend so that other
requests can proceed.  The concept of a coroutine [4]_ promises to
help the application developer grapple with this state management
difficulty.

This PEP proposes a limited approach to coroutines based on an
extension to the iterator protocol [5]_.  Currently, an iterator may
raise a StopIteration exception to indicate that it is done producing
values.  This proposal adds another exception to this protocol,
SuspendIteration, which indicates that the given iterator may have
more values to produce, but is unable to do so at this time.


Rationale
=========

There are two current approaches to bringing co-routines to Python.
Christian Tismer's Stackless [6]_ involves a ground-up restructuring
of Python's execution model by hacking the 'C' stack.  While this
approach works, its operation is hard to describe and keep portable. A
related approach is to compile Python code to Parrot [7]_, a
register-based virtual machine, which has coroutines.  Unfortunately,
neither of these solutions is portable with IronPython (CLR) or Jython
(JavaVM).

It is thought that a more limited approach, based on iterators, could
provide a coroutine facility to application programmers and still be
portable across runtimes.

* Iterators keep their state in local variables that are not on the
  "C" stack.  Iterators can be viewed as classes, with state stored in
  member variables that are persistent across calls to its next()
  method.

* While an uncaught exception may terminate a function's execution, an
  uncaught exception need not invalidate an iterator.  The proposed
  exception, SuspendIteration, uses this feature.  In other words,
  just because one call to next() results in an exception does not
  necessarily need to imply that the iterator itself is no longer
  capable of producing values.

There are four places where this new exception impacts:

* The simple generator [8]_ mechanism could be extended to safely
  'catch' this SuspendIteration exception, stuff away its current
  state, and pass the exception on to the caller.

* Various iterator filters [9]_ in the standard library, such as
  itertools.izip should be made aware of this exception so that it can
  transparently propagate SuspendIteration.

* Iterators generated from I/O operations, such as a file or socket
  reader, could be modified to have a non-blocking variety.  This
  option would raise a subclass of SuspendIteration if the requested
  operation would block.

* The asyncore library could be updated to provide a basic 'runner'
  that pulls from an iterator; if the SuspendIteration exception is
  caught, then it moves on to the next iterator in its runlist [10]_.
  External frameworks like Twisted would provide alternative
  implementations, perhaps based on FreeBSD's kqueue or Linux's epoll.

While these may seem dramatic changes, it is a very small amount of
work compared with the utility provided by continuations.


Semantics
=========

This section will explain, at a high level, how the introduction of
this new SuspendIteration exception would behave.


Simple Iterators
----------------

The current functionality of iterators is best seen with a simple
example which produces two values 'one' and 'two'. ::

    class States:

        def __iter__(self):
            self._next = self.state_one
            return self

        def next(self):
            return self._next()

        def state_one(self):
            self._next = self.state_two
            return "one"

        def state_two(self):
            self._next = self.state_stop
            return "two"

        def state_stop(self):
            raise StopIteration

    print list(States())

An equivalent iteration could, of course, be created by the
following generator::

    def States():
        yield 'one'
        yield 'two'

    print list(States())


Introducing SuspendIteration
----------------------------

Suppose that between producing 'one' and 'two', the generator above
could block on a socket read.  In this case, we would want to raise
SuspendIteration to signal that the iterator is not done producing,
but is unable to provide a value at the current moment. ::

    from random import randint
    from time import sleep

    class SuspendIteration(Exception):
          pass

    class NonBlockingResource:

        """Randomly unable to produce the second value"""

        def __iter__(self):
            self._next = self.state_one
            return self

        def next(self):
            return self._next()

        def state_one(self):
            self._next = self.state_suspend
            return "one"

        def state_suspend(self):
            rand = randint(1,10)
            if 2 == rand:
                self._next = self.state_two
                return self.state_two()
            raise SuspendIteration()

        def state_two(self):
            self._next = self.state_stop
            return "two"

        def state_stop(self):
            raise StopIteration

    def sleeplist(iterator, timeout = .1):
        """
        Do other things (e.g. sleep) while resource is
        unable to provide the next value
        """
        it = iter(iterator)
        retval = []
        while True:
            try:
                retval.append(it.next())
            except SuspendIteration:
                sleep(timeout)
                continue
            except StopIteration:
                break
        return retval

    print sleeplist(NonBlockingResource())

In a real-world situation, the NonBlockingResource would be a file
iterator, socket handle, or other I/O based producer.  The sleeplist
would instead be an async reactor, such as those found in asyncore or
Twisted.  The non-blocking resource could, of course, be written as a
generator::

    def NonBlockingResource():
        yield "one"
        while True:
            rand = randint(1,10)
            if 2 == rand:
                break
            raise SuspendIteration()
        yield "two"

It is not necessary to add a keyword, 'suspend', since most real
content generators will not be in application code, they will be in
low-level I/O based operations.  Since most programmers need not be
exposed to the SuspendIteration() mechanism, a keyword is not needed.


Application Iterators
---------------------

The previous example is rather contrived, a more 'real-world' example
would be a web page generator which yields HTML content, and pulls
from a database.  Note that this is an example of neither the
'producer' nor the 'consumer', but rather of a filter. ::

    def ListAlbums(cursor):
        cursor.execute("SELECT title, artist FROM album")
        yield '<html><body><table><tr><td>Title</td><td>Artist</td></tr>'
        for (title, artist) in cursor:
            yield '<tr><td>%s</td><td>%s</td></tr>' % (title, artist)
        yield '</table></body></html>'

The problem, of course, is that the database may block for some time
before any rows are returned, and that during execution, rows may be
returned in blocks of 10 or 100 at a time. Ideally, if the database
blocks for the next set of rows, another user connection could be
serviced.  Note the complete absence of SuspendIterator in the above
code.  If done correctly, application developers would be able to
focus on functionality rather than concurrency issues.

The iterator created by the above generator should do the magic
necessary to maintain state, yet pass the exception through to a
lower-level async framework.  Here is an example of what the
corresponding iterator would look like if coded up as a class::

    class ListAlbums:

        def __init__(self, cursor):
            self.cursor = cursor

        def __iter__(self):
            self.cursor.execute("SELECT title, artist FROM album")
            self._iter = iter(self._cursor)
            self._next = self.state_head
            return self

        def next(self):
            return self._next()

        def state_head(self):
            self._next = self.state_cursor
            return "<html><body><table><tr><td>\
                    Title</td><td>Artist</td></tr>"

        def state_tail(self):
            self._next = self.state_stop
            return "</table></body></html>"

        def state_cursor(self):
            try:
                (title,artist) = self._iter.next()
                return '<tr><td>%s</td><td>%s</td></tr>' % (title, artist)
            except StopIteration:
                self._next = self.state_tail
                return self.next()
            except SuspendIteration:
                # just pass-through
                raise

        def state_stop(self):
            raise StopIteration


Complicating Factors
--------------------

While the above example is straight-forward, things are a bit more
complicated if the intermediate generator 'condenses' values, that is,
it pulls in two or more values for each value it produces. For
example, ::

    def pair(iterLeft,iterRight):
        rhs = iter(iterRight)
        lhs = iter(iterLeft)
        while True:
           yield (rhs.next(), lhs.next())

In this case, the corresponding iterator behavior has to be a bit more
subtle to handle the case of either the right or left iterator raising
SuspendIteration.  It seems to be a matter of decomposing the
generator to recognize intermediate states where a SuspendIterator
exception from the producing context could happen. ::

    class pair:

        def __init__(self, iterLeft, iterRight):
            self.iterLeft = iterLeft
            self.iterRight = iterRight

        def __iter__(self):
            self.rhs = iter(iterRight)
            self.lhs = iter(iterLeft)
            self._temp_rhs = None
            self._temp_lhs = None
            self._next = self.state_rhs
            return self

        def next(self):
            return self._next()

        def state_rhs(self):
            self._temp_rhs = self.rhs.next()
            self._next = self.state_lhs
            return self.next()

        def state_lhs(self):
            self._temp_lhs = self.lhs.next()
            self._next = self.state_pair
            return self.next()

        def state_pair(self):
            self._next = self.state_rhs
            return (self._temp_rhs, self._temp_lhs)

This proposal assumes that a corresponding iterator written using
this class-based method is possible for existing generators.  The
challenge seems to be the identification of distinct states within
the generator where suspension could occur.


Resource Cleanup
----------------

The current generator mechanism has a strange interaction with
exceptions where a 'yield' statement is not allowed within a
try/finally block.  The SuspendIterator exception provides another
similar issue.  The impacts of this issue are not clear. However it
may be that re-writing the generator into a state machine, as the
previous section did, could resolve this issue allowing for the
situation to be no-worse than, and perhaps even removing the
yield/finally situation.  More investigation is needed in this area.


API and Limitations
-------------------

This proposal only covers 'suspending' a chain of iterators, and does
not cover (of course) suspending general functions, methods, or "C"
extension function.  While there could be no direct support for
creating generators in "C" code, native "C" iterators which comply
with the SuspendIterator semantics are certainly possible.


Low-Level Implementation
========================

The author of the PEP is not yet familiar with the Python execution
model to comment in this area.


References
==========

.. [1] Twisted
   (http://twistedmatrix.com)

.. [2] Peak
   (http://peak.telecommunity.com)

.. [3] C10K
   (http://www.kegel.com/c10k.html)

.. [4] Coroutines
   (http://c2.com/cgi/wiki?CallWithCurrentContinuation)

.. [5] PEP 234, Iterators
   (http://www.python.org/peps/pep-0234.html)

.. [6] Stackless Python
   (http://stackless.com)

.. [7] Parrot /w coroutines
   (http://www.sidhe.org/~dan/blog/archives/000178.html)

.. [8] PEP 255, Simple Generators
   (http://www.python.org/peps/pep-0255.html)

.. [9] itertools - Functions creating iterators
   (http://docs.python.org/lib/module-itertools.html)

.. [10] Microthreads in Python, David Mertz
   (http://www-106.ibm.com/developerworks/linux/library/l-pythrd.html)


Copyright
=========

This document has been placed in the public domain.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:

-- 
Clark C. Evans                      Prometheus Research, LLC.
                                    http://www.prometheusresearch.com/
    o                               office: +1.203.777.2550 
  ~/ ,                              mobile: +1.203.444.0557 
 //
((   Prometheus Research: Transforming Data Into Knowledge
 \\  ,
   \/    - Research Exchange Database
   /\    - Survey & Assessment Technologies
   ` \   - Software Tools for Researchers
    ~ *
_______________________________________________
Python-Dev mailing list
Python-Dev at python.org
http://mail.python.org/mailman/listinfo/python-dev
Unsubscribe: http://mail.python.org/mailman/options/python-dev/cce%40clarkevans.com


----- End forwarded message -----

-- 
Clark C. Evans                      Prometheus Research, LLC.
                                    http://www.prometheusresearch.com/
    o                               office: +1.203.777.2550 
  ~/ ,                              mobile: +1.203.444.0557 
 //
((   Prometheus Research: Transforming Data Into Knowledge
 \\  ,
   \/    - Research Exchange Database
   /\    - Survey & Assessment Technologies
   ` \   - Software Tools for Researchers
    ~ *



From jason at pengale.com  Tue Sep  7 22:03:21 2004
From: jason at pengale.com (Jason Stitt)
Date: Tue, 07 Sep 2004 21:03:21 -0500
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <413E54F0.5040201@thecablelounge.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>
	<1094585056.23898.10.camel@petra> <413E54F0.5040201@thecablelounge.com>
Message-ID: <42A8FF86-013B-11D9-A692-000D93AF8AD2@pengale.com>

On Sep 7, 2004, at 7:40 PM, Andy Gayton wrote:

> Paul Swartz wrote:

> Jason, just a quick note.
>
> I've been putting off changing over to the new component architecture 
> so I'm working against a pretty out of date version of trunk.

It's not just you :)  I downloaded SFTPGateway, a Twisted program that 
serves as a secure proxy to a regular FTP server, because I thought I 
could glean some insights into SFTP from it. But it doesn't use any of 
Twisted's actual SFTP implementation code, as far as I can tell, and 
I'm not sure I want to pick apart all the code they wrote from scratch. 
(Plus, it's for Zope, not standalone...)

In other news, I downloaded the latest SVN and am trying to pick apart 
the sshsimpleserver.py example again. The log output, below, claims the 
factory has been created and is opening the port, but I can't connect 
to it, and using nmap I can see that the port is not actually open. 
There's one warning I can't quite interpret. Can anyone help me figure 
this out?

The regular echoserver example works just fine.

Thanks,

Jason

--STARTUP--
2004/09/07 22:01 EDT [-] Log opened.
2004/09/07 22:01 EDT [-] __main__.ExampleFactory starting on 5022
2004/09/07 22:01 EDT [-] Starting factory <__main__.ExampleFactory 
instance at 0x406f4d0c>
2004/09/07 22:01 EDT [-] disabling diffie-hellman-group-exchange 
because we cannot find moduli file

--SHUTDOWN--
2004/09/07 22:02 EDT [-] Received SIGINT, shutting down.
2004/09/07 22:02 EDT [__main__.ExampleFactory] (Port 5022 Closed)
2004/09/07 22:02 EDT [__main__.ExampleFactory] Stopping factory 
<__main__.ExampleFactory instance at 0x406f4d0c>
2004/09/07 22:02 EDT [-] Main loop terminated.




From z3p at twistedmatrix.com  Tue Sep  7 22:34:25 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 07 Sep 2004 22:34:25 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <42A8FF86-013B-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>
	<1094585056.23898.10.camel@petra> <413E54F0.5040201@thecablelounge.com>
	<42A8FF86-013B-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <1094610865.23898.18.camel@petra>

On Tue, 2004-09-07 at 21:03 -0500, Jason Stitt wrote:
> It's not just you :)  I downloaded SFTPGateway, a Twisted program
> that 
> serves as a secure proxy to a regular FTP server, because I thought I 
> could glean some insights into SFTP from it. But it doesn't use any
> of 
> Twisted's actual SFTP implementation code, as far as I can tell, and 
> I'm not sure I want to pick apart all the code they wrote from
> scratch. 
> (Plus, it's for Zope, not standalone...)

Yes it does, it inherits from filetransfer.FileTransferServer, which is
Conch's SFTP implementation.

> 2004/09/07 22:01 EDT [-] disabling diffie-hellman-group-exchange 
> because we cannot find moduli file

You can ignore that.  There are two types of key exchanges that Conch
supports: one using some fixed values, and other that uses a moduli
(usually /etc/ssh/moduli) file to get lots of values.  If it can't find
the moduli file, it falls back to the other kind.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040907/e486b840/attachment.pgp 

From fdrake at acm.org  Tue Sep  7 23:12:55 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 7 Sep 2004 23:12:55 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <42A8FF86-013B-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<413E54F0.5040201@thecablelounge.com>
	<42A8FF86-013B-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <200409072312.55209.fdrake@acm.org>

On Tuesday 07 September 2004 10:03 pm, Jason Stitt wrote:
 > It's not just you :)  I downloaded SFTPGateway, a Twisted program that
 > serves as a secure proxy to a regular FTP server, because I thought I
 > could glean some insights into SFTP from it. But it doesn't use any of
 > Twisted's actual SFTP implementation code, as far as I can tell, and
 > I'm not sure I want to pick apart all the code they wrote from scratch.
 > (Plus, it's for Zope, not standalone...)

Hehe.  As Paul noted, yes, the SFTP Gateway does use his SFTP implementation.  
There's a lot of code there, but it's really just the code that implements 
the FTP client that the SFTP server uses as the backend (in 
sftpgateway.connector).  The FileTransferServer interface was finallized 
based substantially on what we did in SFTP Gateway.

I will note that it was written against Twisted 1.1.0, so the APIs on 
Twisted's side have changed a bit, but that mostly affects the code in 
sftpgateway.application and maybe sftpgateway.authentication.  From what I 
recall from a discussion with Paul at PyCon'04, the changes in Twisted really 
are an improvement.  I wish I had the time to bring that up to date.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>




From ronaldoussoren at mac.com  Tue Sep  7 15:34:37 2004
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Tue, 7 Sep 2004 21:34:37 +0200
Subject: [Twisted-Python] Is anyone working on CFReactor?
In-Reply-To: <FF022D9F-00A1-11D9-9FCD-000A958E9340@krushen.com>
References: <CA8DE351-0090-11D9-B140-000A95C5186E@mac.com>
	<FF022D9F-00A1-11D9-9FCD-000A958E9340@krushen.com>
Message-ID: <F42EECEA-0104-11D9-904B-000A95C77748@mac.com>


On 7-sep-04, at 9:46, Jordan Krushen wrote:

> On 6-Sep-04, at 10:43 PM, vng1 at mac.com wrote:
>
>> Is anyone looking at what's wrong with the CFReactor in Twisted 1.3 
>> and OSX?
>>
>> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue648
>>
>> I vaguely remember seeing a posting about the GIL causing problems, 
>> but I can't seem to find that article now.
>
> I think Bob had mentioned recent changes to the GIL as one 
> possibility, but I don't know if he's investigated it further.  I know 
> he's busy, so if anyone else here can get CFReactor working, that 
> would be appreciated -- I currently have one project on hold due to 
> this bug.

Looking at the stack-trace it's probably a change to how the GIL is 
managed in PyObjC 1.1 (as oposed to earlier versions). Starting from 
PyObjC 1.1 we give up the GIL when calling Cocoa code (such as in 
objc_NSApplicationMain when calling NSApplicationMain).

I'd be surprised if the code generated from cfsupport.pyx contains 
calls to PyGILState_Acquire, which would give interesting events when 
runLoopTimerCallBack is called ;)

Ronald


--
X|support bv            http://www.xsupport.nl/
T:  +31 610271479       F:  +31 204416173




From behnel_ml at gkec.informatik.tu-darmstadt.de  Wed Sep  8 03:58:05 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Wed, 08 Sep 2004 09:58:05 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>
	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>
	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>
Message-ID: <413EBB8D.20204@gkec.informatik.tu-darmstadt.de>


Bob Ippolito schrieb:
 >>>>    heapq.py is under the PSF license.  PSF is roughly similar to MIT.
 >>>> Is this going to be okay for inclusion in Twisted?
 >>>
 >>> It's part of Python, so I don't see why that would be necessary.
 >>
 >> This is patched / somehow different version.

Right, it needs to keep track of the array position where a DelayedCall is stored in order to remove them as quickly as possible.


 >>> However, I have profiled various heapq-based schemes for callLater in
 >>> the past, and they always end up losing pretty big in the average case,
 >>> and winning only in perverse cases such as hundreds of callLater(0)s per
 >>> tick.  I saw a little discussion of the performance impact, but I am
 >>> still not entirely convinced that it's a good idea.
 >
 > What is the "average" case anyway?  For what application?  Where are the
 > performance tests coming from?

Yes, I think that's a problem. Now, as far as I see it, the implementation makes the case where there are a lot of interleaved callLater/cancel/reset calls /much/ faster. And in a case where there is only a few calls it shouldn't matter anyway.

Just to repeat myself: what really get's slower is runUntilCurrent, but the gain in callLater should compensate that. So, for the case where each callLater leads to a delayed call, the performance gain should be marginal (my patch already avoids shifting the list in linear time) and in all cases where there are more calls to callLater, reset and cancel (added up) than launched delayed calls, I expect the heap implementation to be faster by orders of magnitude.


 > There is at least one scenario where it makes perfect sense to do a lot
 > of callLater(0.0, ...), when you're doing computation but trying not to
 > block.
 >
 > Though, of course, you would do something like callLater(0.00001, ...)
 > in the current Twisted, because callLater(0.0, ...) pretty much blocks.

What you may gain in that case is that it is no longer necessary to shift the complete list when adding a new call, so there already is a shift from linear time to log(N).

And again: if there is only a few calls to callLater then this is not the place to look for performance bottlenecks anyway. But that is up to the application programmer.

Stefan


BTW: I went to http://www.twistedmatrix.com/bugs, but I can't find the obvious link saying "file a bug report HERE". So I registered, but I don't seem to get a reply - and I can't login either. Looks like the web server is running with the /old/ version of Twisted... :o)




From mwh at python.net  Wed Sep  8 07:00:04 2004
From: mwh at python.net (Michael Hudson)
Date: Wed, 08 Sep 2004 12:00:04 +0100
Subject: [Twisted-Python] Re: Performance issue in reactor.callLater
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com> <1094580821.21920.6.camel@kazekage>
	<1094581714.31032.3.camel@sheriffpony>
	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>
	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>
Message-ID: <2md60x10wb.fsf@starship.python.net>

Stefan Behnel <behnel_ml at gkec.informatik.tu-darmstadt.de> writes:

> BTW: I went to http://www.twistedmatrix.com/bugs, but I can't find
> the obvious link saying "file a bug report HERE". So I registered,
> but I don't seem to get a reply - and I can't login either. Looks
> like the web server is running with the /old/ version of
> Twisted... :o)

You probably will get a reply, eventually -- at least that's what
happened to me.  Took about 8 hours, IIRC.

Cheers,
mwh

-- 
  That's why the smartest companies use Common Lisp, but lie about it
  so all their competitors think Lisp is slow and C++ is fast.  (This
  rumor has, however, gotten a little out of hand. :)
                                        -- Erik Naggum, comp.lang.lisp




From glyph at divmod.com  Wed Sep  8 10:12:50 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 08 Sep 2004 10:12:50 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413EBB8D.20204@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com> <1094580821.21920.6.camel@kazekage>
	<1094581714.31032.3.camel@sheriffpony>
	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>
	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>
Message-ID: <1094652770.21920.82.camel@kazekage>

On Wed, 2004-09-08 at 03:58, Stefan Behnel wrote:

> Just to repeat myself: what really get's slower is runUntilCurrent,
> but the gain in callLater should compensate that. So, for the case
> where each callLater leads to a delayed call, the performance gain
> should be marginal (my patch already avoids shifting the list in
> linear time) and in all cases where there are more calls to callLater,
> reset and cancel (added up) than launched delayed calls, I expect the
> heap implementation to be faster by orders of magnitude.

runUntilCurrent happens every tick; callLater only happens sometimes.
Rather than say "average" applications: In my understanding, this will
speed up applications that have lots of timed events scheduled at the
expense of applications that transfer data over the network.

Anthony, if you're listening, do you have a profiling setup that could
give us some authoritative numbers?




From behnel_ml at gkec.informatik.tu-darmstadt.de  Wed Sep  8 10:37:04 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Wed, 08 Sep 2004 16:37:04 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094652770.21920.82.camel@kazekage>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>
	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>
	<1094652770.21920.82.camel@kazekage>
Message-ID: <413F1910.6050006@gkec.informatik.tu-darmstadt.de>


Glyph Lefkowitz schrieb:
 > runUntilCurrent happens every tick; callLater only happens sometimes.

Calling the method "runUntilCurrent", yes. But that's not important. What makes a difference is that each iteration of the loop in runUntilCurrent is called at most once per callLater, so there is never fewer calls to callLater than iterations in runUntilCurrent - but in many cases there will be more calls to callLater, which gets even worse if you also count calls to cancel and reset. "runUntilCurrent" really is the right place to make the trade-off.


 > Rather than say "average" applications: In my understanding, this will
 > speed up applications that have lots of timed events scheduled at the
 > expense of applications that transfer data over the network.

Just to make myself a bit clearer: runUntilCurrent only gets slower /per delayed call/. So if there are no delayed calls there should be no (measurable) slow down. But if there are delayed calls you will get the speed up.

Stefan




From foom at fuhm.net  Wed Sep  8 14:47:15 2004
From: foom at fuhm.net (James Y Knight)
Date: Wed, 8 Sep 2004 14:47:15 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413F1910.6050006@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>
	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>
	<1094652770.21920.82.camel@kazekage>
	<413F1910.6050006@gkec.informatik.tu-darmstadt.de>
Message-ID: <80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>


On Sep 8, 2004, at 10:37 AM, Stefan Behnel wrote:
> Just to make myself a bit clearer: runUntilCurrent only gets slower 
> /per delayed call/. So if there are no delayed calls there should be 
> no (measurable) slow down. But if there are delayed calls you will get 
> the speed up.

Sounds like the right tradeoff to me.

However, I'm unconvinced about the reasoning in:
> Ok, I thought about it. And I believe the best way to do this is to 
> write a specialized heap version. I copied the heapq implementation 
> and adapted it so that it keeps track of the position in the heap for 
> each DelayedCall. That makes it possible to remove a call without 
> linear overhead and in log(N) time.

To me, it seems like the right thing is what I think you had before:
1) on cancel, mark it canceled
2) on delay, mark it delayed
3) when about to run a DelayedCall, if it is cancelled, ignore it. If 
it is delayed, reinsert it into the heap in the proper place.

Why did you change to the current method from that?

james




From thomas.weholt at gmail.com  Wed Sep  8 17:50:12 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Wed, 8 Sep 2004 23:50:12 +0200
Subject: [Twisted-Python] Recursive filescanning in Twisted??
Message-ID: <ffb7b7f804090814507d4804a6@mail.gmail.com>

Hi,

I want to run a web-server which displays information about files on
my filesystems. The info will be stored in either a mysql or sqlite
database. The number of files to be scanned can be many and huge in
size. I want to click on a link which goes to a specified
page/resource on the server which starts the filescanning, generates
checksums for the files processed ( sha/md5 ) and stores this info in
the database. The process cannot block the server, at least not the
filescanning itself. The database interactions is not that critical.
It would be nice to have some kind of indication available for users
to see that a filescan was in progress, perhaps even some kind of
progress indication.

Can anybody show me how to do a non-blocking filescan like I've
described in a Twisted-based web-application which generates
sha/md5-checkums in the process?

-- 
Mvh,
Thomas Weholt
http://www.weholt.org - thomas kr?ll weholt d?tt org
-----------------------------------------------------------------------------------------------------------------
Alltid morsomt ? h?re r?ykere snakke om inneklima og luftkvalitet.



From exarkun at divmod.com  Wed Sep  8 19:42:30 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 08 Sep 2004 19:42:30 -0400
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <ffb7b7f804090814507d4804a6@mail.gmail.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
Message-ID: <413F98E6.7000602@divmod.com>

Thomas Weholt wrote:
> Hi,
> 
> I want to run a web-server which displays information about files on
> my filesystems. The info will be stored in either a mysql or sqlite
> database. The number of files to be scanned can be many and huge in
> size. I want to click on a link which goes to a specified
> page/resource on the server which starts the filescanning, generates
> checksums for the files processed ( sha/md5 ) and stores this info in
> the database. The process cannot block the server, at least not the
> filescanning itself. The database interactions is not that critical.
> It would be nice to have some kind of indication available for users
> to see that a filescan was in progress, perhaps even some kind of
> progress indication.
> 
> Can anybody show me how to do a non-blocking filescan like I've
> described in a Twisted-based web-application which generates
> sha/md5-checkums in the process?
> 

   Something like this, perhaps?  (defgen.py from radix's Twisted sandbox)

   Jp
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: defwalk.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040908/93b9a2fe/attachment.txt 

From matt.feifarek at gmail.com  Thu Sep  9 00:17:51 2004
From: matt.feifarek at gmail.com (Matt Feifarek)
Date: Thu, 9 Sep 2004 00:17:51 -0400
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <413F98E6.7000602@divmod.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
	<413F98E6.7000602@divmod.com>
Message-ID: <6fb6dbfe0409082117a5a8374@mail.gmail.com>

Also, in python 2.3, os.walk() is a generator by default. Works great.



From mcfletch at rogers.com  Thu Sep  9 01:12:31 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Thu, 09 Sep 2004 01:12:31 -0400
Subject: [Twisted-Python] Why don't Connectors use deferreds?
Message-ID: <413FE63F.2000104@rogers.com>

I've been wasting yet more time today looking for the "right" way to do 
a very simple thing:

    * Given a protocol
    * Given a destination (e.g. a TCP port)
    * Connect to the TCP port using the given protocol and return the
      protocol object to be used by client code

Now, I know the "normal" way to do this is to create a one-off factory 
such as is seen in twisted.web.client and then use the factory to do the 
after-connection operations.  What I'm wondering is why the code doesn't 
use deferred's to make the operations simpler.  That is, a connector 
succeeds if it completes connecting, and fails otherwise.  The return 
value would be a protocol (and thereby an attached transport).

So something like:

    df = reactor.connectTCP( address, port, factory )
    df.addCallbacks(
    doSomethingWithPortObject,doSomethingIfFailsOrCancelled )

Sure, that doesn't give you the ability to cancel the connection, but 
I'd guess it's a fairly common pattern for client-side code.

With less modification of current code, simply adding a deferred to the 
connector that is fired on either failure-to-connect or connection would 
seem reasonable, so:

    connector = reactor.connectTCP( address, port, factory )
    connector.defer.addCallbacks(
    doSomethingWithPortObject,doSomethingIfFailsOrCancelled )

After all, we're dealing with a classic case of a deferred operation 
(completion of the connection), so why not make it use the standard 
deferred mechanisms.

I've hacked in a solution for my current code where the factory calls 
defer.errback in clientConnectionFailed and the protocol calls 
defer.callback in connectionMade, but that seems extremely inelegant 
(and to be honest, I'm not sure it really guarantees that the deferred 
will eventually be called, there may be cases where neither of those 
methods are called).

Maybe I'm just missing something about the "proper" way to do this in 
Twisted, if so, feel free to point out the one-true-way,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From thomas.weholt at gmail.com  Thu Sep  9 02:45:43 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Thu, 9 Sep 2004 08:45:43 +0200
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <6fb6dbfe0409082117a5a8374@mail.gmail.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
	<413F98E6.7000602@divmod.com>
	<6fb6dbfe0409082117a5a8374@mail.gmail.com>
Message-ID: <ffb7b7f804090823454dae15b3@mail.gmail.com>

Ok, thanks!!! Got to get defgen from Subversion, right? And if I was
to put the file-info into a database should I do this as another
callback to ....  eh ... what?


Thomas


On Thu, 9 Sep 2004 00:17:51 -0400, Matt Feifarek
<matt.feifarek at gmail.com> wrote:
> Also, in python 2.3, os.walk() is a generator by default. Works great.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



-- 
Mvh,
Thomas Weholt
http://www.weholt.org - thomas kr?ll weholt d?tt org
-----------------------------------------------------------------------------------------------------------------
Alltid morsomt ? h?re r?ykere snakke om inneklima og luftkvalitet.



From behnel_ml at gkec.informatik.tu-darmstadt.de  Thu Sep  9 03:21:35 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Thu, 09 Sep 2004 09:21:35 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>	<1094652770.21920.82.camel@kazekage>	<413F1910.6050006@gkec.informatik.tu-darmstadt.de>
	<80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <4140047F.8020203@gkec.informatik.tu-darmstadt.de>


James Y Knight schrieb:
> However, I'm unconvinced about the reasoning in:
> 
>> Ok, I thought about it. And I believe the best way to do this is to 
>> write a specialized heap version. I copied the heapq implementation 
>> and adapted it so that it keeps track of the position in the heap for 
>> each DelayedCall. That makes it possible to remove a call without 
>> linear overhead and in log(N) time.
> 
> 
> To me, it seems like the right thing is what I think you had before:
> 1) on cancel, mark it canceled

That works. However, in cases with many pending delayed calls leaving the cancelled ones on the heap may unnecessarily increase the heap size quite a bit, so I figured it might be better to keep the size low. But I admit that this is an undermotivated decision.

I personally had the case of an ACK tracker where my first approach was to start a timeout for each ACK and then cancel it. But when I saw the desastrous performance of the original Twisted implementation I quickly wrote my own queue for it. Anyway, in such a case you'd have a lot of cancelled delayed calls on the heap and they'd unnecessarily increase the time for new insertions (which is done, as I said, as late as possible, but before the run-loop).

I played with the idea of giving cancel() a new boolean parameter "quick_cancel" that would skip the removal step if set to True. All you'd need to (re-)add in that case would be the check in the runUntilCurrent loop if the current call was cancelled. That may be a good compromise.


> 2) on delay, mark it delayed

That doesn't work.


> 3) when about to run a DelayedCall, if it is cancelled, ignore it. If it 
> is delayed, reinsert it into the heap in the proper place.
> 
> Why did you change to the current method from that?

Delaying a call breaks the heap invariant and therefore may hinder new insertions. There is a simple work around for delay: Store the delay time somewhere in the object and set it when we find the call as first item. /Then/ move it to the right position. This lessens the number of reinsertions if the call is delayed more often. Could be worth it.

However, this doesn't work for reset. Reset accepts an arbitrary time value that may be lower than the original. A work around here could be to correct the heap position in either direction when the time value changes, but that is about as much work as removing and reinserting it.


I chose the current solution as I figured it would be a good trade-off between code complexity, special cases and performance. The quick_cancel thing is easy to implement (4 lines), though.

Could I have other opinions on this?

Stefan




From behnel_ml at gkec.informatik.tu-darmstadt.de  Thu Sep  9 05:39:07 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Thu, 09 Sep 2004 11:39:07 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>	<1094652770.21920.82.camel@kazekage>	<413F1910.6050006@gkec.informatik.tu-darmstadt.de>
	<80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <414024BB.5040500@gkec.informatik.tu-darmstadt.de>


James Y Knight schrieb:
> To me, it seems like the right thing is what I think you had before:
> 1) on cancel, mark it canceled

Sorry, I do not think that that is a good idea anymore.

The reason is:

1) If we remove the entry during the call to cancel(), it takes log(N) time and is only done once.

2) If we do /not/ remove the entry, cancel() takes constant time (set a flag), but runUntilCurrent has to deal with a larger stack on each iteration. So this may slow down things considerably if many delayed calls are cancelled and remain on the stack.

Here the right place for the trade-off is in cancel().

The patch I finally submitted as a bug report does 1).

Stefan




From itamar at itamarst.org  Thu Sep  9 10:55:49 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 09 Sep 2004 10:55:49 -0400
Subject: [Twisted-Python] Why don't Connectors use deferreds?
In-Reply-To: <413FE63F.2000104@rogers.com>
References: <413FE63F.2000104@rogers.com>
Message-ID: <1094741748.1016.25.camel@sheriffpony>

On Thu, 2004-09-09 at 01:12, Mike C. Fletcher wrote:

> Maybe I'm just missing something about the "proper" way to do this in 
> Twisted, if so, feel free to point out the one-true-way,

There's a utility class for this in twisted.internet.protocol:

deferredOfProtocolInstance =
ClientCreator(MyProtocol).connectTCP("localhost", 1234)

If this matches your needs I suggest adding an issue to
twistedmatrix.com/bugs/ about adding this to the client howto and assign
to hypatia or me.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From LAFORGE49 at peoplepc.com  Thu Sep  9 10:56:16 2004
From: LAFORGE49 at peoplepc.com (William la Forge Jr)
Date: Thu, 9 Sep 2004 10:56:16 -0400
Subject: [Twisted-Python] PEP 334 - Simple Coroutines via SuspendIteration
Message-ID: <NPEFJHLAHPGFKBEPBJJNCEFOCAAA.LAFORGE49@peoplepc.com>

Clark,

I'll note that you are still coupling data flow and control flow.
If you think of coroutines as light-weight threads that operate
very nicely in an asynchronous environment, then it becomes apparent
that coroutines could easily move data via an asynchronously implemented
pipe or queue.

Which is exactly what I'm doing in CompStrm. ;-)

Bill la Forge
http://compstrm.sourceforge.net/




From jlb at houseofdistraction.com  Thu Sep  9 13:23:27 2004
From: jlb at houseofdistraction.com (Jeff Bowden)
Date: Thu, 09 Sep 2004 10:23:27 -0700
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <ffb7b7f804090814507d4804a6@mail.gmail.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
Message-ID: <4140918F.6030700@houseofdistraction.com>

On Linux, file descriptors for disk files are always "ready".  Since 
twisted is based on select() or poll() I'm guessing you will end up 
actually blocking on file reads.  I think you can get non-blocking file 
reads using the new AIO stuff but it's not really a good match for a 
single process server like twisted. 

I don't know about BSD/OSX or Windows.

I would love to be wrong about this, BTW, so if anyone has better info 
I'd like to here it.


Thomas Weholt wrote:

>Hi,
>
>I want to run a web-server which displays information about files on
>my filesystems. The info will be stored in either a mysql or sqlite
>database. The number of files to be scanned can be many and huge in
>size. I want to click on a link which goes to a specified
>page/resource on the server which starts the filescanning, generates
>checksums for the files processed ( sha/md5 ) and stores this info in
>the database. The process cannot block the server, at least not the
>filescanning itself. The database interactions is not that critical.
>It would be nice to have some kind of indication available for users
>to see that a filescan was in progress, perhaps even some kind of
>progress indication.
>
>Can anybody show me how to do a non-blocking filescan like I've
>described in a Twisted-based web-application which generates
>sha/md5-checkums in the process?
>
>  
>




From mcfletch at rogers.com  Thu Sep  9 13:41:29 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Thu, 09 Sep 2004 13:41:29 -0400
Subject: [Twisted-Python] Why don't Connectors use deferreds?
In-Reply-To: <1094741748.1016.25.camel@sheriffpony>
References: <413FE63F.2000104@rogers.com>
	<1094741748.1016.25.camel@sheriffpony>
Message-ID: <414095C9.3050704@rogers.com>

Itamar Shtull-Trauring wrote:
...

>There's a utility class for this in twisted.internet.protocol:
>
>deferredOfProtocolInstance =
>ClientCreator(MyProtocol).connectTCP("localhost", 1234)
>
>If this matches your needs I suggest adding an issue to
>twistedmatrix.com/bugs/ about adding this to the client howto and assign
>to hypatia or me.
>  
>
Okay, issue added to the tracker.  Clarification just so no-one else 
needs to spelunk through to answer the question I had:

The return value is a *connected* protocol.  I gather so because it 
looks as though buildProtocol is called by connector.doRead which then 
calls protocol.makeConnection, which in turn calls 
protocol.connectionMade, and the use of callLater( 0, ...) makes the 
callback fire *after* the protocol has had connectionMade called.

There appear to be cases where the callback can be called with a 
protocol that has failed to initialise, that is, if connectionMade (or 
any of the other operations between callback scheduling and execution) 
fails for some reason, the callback will still be called.  As such the 
callback really is just notifying that the connection has gone through 
(more precisely, that the protocol has been built), not necessarily that 
the protocol is fully initialised and ready-to-go.

Still, it does everything I need with a little bit of checking to be 
sure that the initialisation completed.

Thanks,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From exarkun at divmod.com  Thu Sep  9 14:03:17 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 09 Sep 2004 14:03:17 -0400
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <4140918F.6030700@houseofdistraction.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
	<4140918F.6030700@houseofdistraction.com>
Message-ID: <41409AE5.8050009@divmod.com>

Jeff Bowden wrote:
> On Linux, file descriptors for disk files are always "ready".  

   Right.

> Since 
> twisted is based on select() or poll() I'm guessing you will end up 
> actually blocking on file reads.

   Right.

> I think you can get non-blocking file 
> reads using the new AIO stuff 

   On some systems, right.

> but it's not really a good match for a 
> single process server like twisted.

   Hmm.  Why do you say this?  It's true that AIO will require reactor 
support (IOCP is essentially such a reactor, except for Windows).  I 
don't see a problem with using AIO in a single process, though, and 
apparently neither did Pavel when he wrote IOCP.

> I don't know about BSD/OSX or Windows.

   KQueue supports on-disk files, I suspect.  There is no working KQueue 
reactor, though, so that takes care of BSD/OSX.  Windows has IO 
Completion Ports, which IOCP uses (hence the name ;).

   Jp



From foom at fuhm.net  Thu Sep  9 15:59:21 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 9 Sep 2004 15:59:21 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <414024BB.5040500@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>	<1094652770.21920.82.camel@kazekage>	<413F1910.6050006@gkec.informatik.tu-darmstadt.de>
	<80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>
	<414024BB.5040500@gkec.informatik.tu-darmstadt.de>
Message-ID: <BD9EA809-029A-11D9-AC9C-000A95A50FB2@fuhm.net>


On Sep 9, 2004, at 5:39 AM, Stefan Behnel wrote:

> 1) If we remove the entry during the call to cancel(), it takes log(N) 
> time and is only done once.
>
> 2) If we do /not/ remove the entry, cancel() takes constant time (set 
> a flag), but runUntilCurrent has to deal with a larger stack on each 
> iteration. So this may slow down things considerably if many delayed 
> calls are cancelled and remain on the stack.

I'm thinking of something like:
- When you call cancel, set the cancelled flag, and increment a counter 
of cancelled items.
- in runUntilCurrent, if the number of cancelled items in the list is 
both > 50 and > 1/2 of the total items, filter them out and re-heapify 
the list.

Now, the only thing left that needs the heap_pos is moving a 
delayedcall to a sooner time. This is an unlikely event, and thus we 
should not be overly concerned about its speed.

Now we can use the builtin heapq, which is written in C in Python 2.4.

Patch attached to bug.

James




From thomas.weholt at gmail.com  Thu Sep  9 17:50:55 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Thu, 9 Sep 2004 23:50:55 +0200
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <41409AE5.8050009@divmod.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
	<4140918F.6030700@houseofdistraction.com>
	<41409AE5.8050009@divmod.com>
Message-ID: <ffb7b7f8040909145078e254e0@mail.gmail.com>

Ok, all the stuff about AIO ( I guess it's async. IO ) and IOCP
doesn't mean much to me right now, but is it possible to just throw
the heavy, blocking code into a seperate thread and synchronize
writing data to the database, which is the only thing the seperate
thread and the main thread Twisted is running in is sharing? Or I'm I
over-simplifying things?

Any such example if doable would be great. Thanks for your input so far.

Thomas


On Thu, 09 Sep 2004 14:03:17 -0400, Jp Calderone <exarkun at divmod.com> wrote:
> Jeff Bowden wrote:
> > On Linux, file descriptors for disk files are always "ready".
> 
>   Right.
> 
> > Since
> > twisted is based on select() or poll() I'm guessing you will end up
> > actually blocking on file reads.
> 
>   Right.
> 
> > I think you can get non-blocking file
> > reads using the new AIO stuff
> 
>   On some systems, right.
> 
> > but it's not really a good match for a
> > single process server like twisted.
> 
>   Hmm.  Why do you say this?  It's true that AIO will require reactor
> support (IOCP is essentially such a reactor, except for Windows).  I
> don't see a problem with using AIO in a single process, though, and
> apparently neither did Pavel when he wrote IOCP.
> 
> > I don't know about BSD/OSX or Windows.
> 
>   KQueue supports on-disk files, I suspect.  There is no working KQueue
> reactor, though, so that takes care of BSD/OSX.  Windows has IO
> Completion Ports, which IOCP uses (hence the name ;).
> 
>   Jp
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



-- 
Mvh,
Thomas Weholt
http://www.weholt.org - thomas kr?ll weholt d?tt org
-----------------------------------------------------------------------------------------------------------------
Alltid morsomt ? h?re r?ykere snakke om inneklima og luftkvalitet.



From jlb at houseofdistraction.com  Thu Sep  9 17:55:20 2004
From: jlb at houseofdistraction.com (Jeff Bowden)
Date: Thu, 09 Sep 2004 14:55:20 -0700
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <41409AE5.8050009@divmod.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>	<4140918F.6030700@houseofdistraction.com>
	<41409AE5.8050009@divmod.com>
Message-ID: <4140D148.7030900@houseofdistraction.com>

Jp Calderone wrote:

> Jeff Bowden wrote:
>
>> On Linux, file descriptors for disk files are always "ready".  
>
>
>   Right.
>
>> Since twisted is based on select() or poll() I'm guessing you will 
>> end up actually blocking on file reads.
>
>
>   Right.
>
>> I think you can get non-blocking file reads using the new AIO stuff 
>
>
>   On some systems, right.
>
>> but it's not really a good match for a single process server like 
>> twisted.
>
>
>   Hmm.  Why do you say this?  It's true that AIO will require reactor 
> support (IOCP is essentially such a reactor, except for Windows).  I 
> don't see a problem with using AIO in a single process, though, and 
> apparently neither did Pavel when he wrote IOCP.
>
>> I don't know about BSD/OSX or Windows.
>
>
>   KQueue supports on-disk files, I suspect.  There is no working 
> KQueue reactor, though, so that takes care of BSD/OSX.  Windows has IO 
> Completion Ports, which IOCP uses (hence the name ;).



I'm confused.  It sounds like you're saying that there is a reactor 
called IOCP that runs on Linux and uses AIO.  But it also sounds like 
it's Windows only.  Which?

Also, it occurred to me since I wrote my original response that I 
remember a while ago seeing support for async file i/o as a bullet item 
on the epoll TODO list.  I can't find any reference to it at the moment 
though.




From radeex at gmail.com  Thu Sep  9 18:09:24 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 9 Sep 2004 18:09:24 -0400
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <ffb7b7f8040909145078e254e0@mail.gmail.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
	<4140918F.6030700@houseofdistraction.com>
	<41409AE5.8050009@divmod.com>
	<ffb7b7f8040909145078e254e0@mail.gmail.com>
Message-ID: <60ed19d4040909150959acfc44@mail.gmail.com>

On Thu, 9 Sep 2004 23:50:55 +0200, Thomas Weholt
<thomas.weholt at gmail.com> wrote:
> Ok, all the stuff about AIO ( I guess it's async. IO ) and IOCP
> doesn't mean much to me right now, but is it possible to just throw
> the heavy, blocking code into a seperate thread and synchronize
> writing data to the database, which is the only thing the seperate
> thread and the main thread Twisted is running in is sharing? Or I'm I
> over-simplifying things?
> 
> Any such example if doable would be great. Thanks for your input so far.

Unless you're reading off of a network filesystem or similar slow FS
layer, you don't need to worry about the filesystem blocking. If the
files are big, it should be fine to just read only N kilobytes per
reactor iteration, or whatever. That's how twisted.web's static file
serving code works, and it works fine.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From josh at chatgris.com  Fri Sep 10 12:01:31 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Fri, 10 Sep 2004 12:01:31 -0400
Subject: [Twisted-Python] What does this error mean? (Port 12345 Closed)
Message-ID: <200409101201.31519.josh@chatgris.com>

To start off with, last night I had a major bottleneck in python's generic iasynchat modules for large amounts of data..  so I switched to twisted last night.

It ran great, 50x faster!!.  It ran for about 2.5 hours, and then I received this error..

2004/09/10 02:54 CDT [-] (Port 12345 Closed)
2004/09/10 02:54 CDT [-] Stopping factory <twisted.internet.protocol.ServerFactory instance at 0x4076628c>
2004/09/10 02:54 CDT [-] Saving chatserver application to chatserver-shutdown.tap...
2004/09/10 02:54 CDT [-] Traceback (most recent call last):
          File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 227, in callback
            self._startRunCallbacks(result)
          File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 288, in _startRunCallbacks
            self._runCallbacks()
          File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 313, in _runCallbacks
            self.result = callback(self.result, *args, **kw)
          File "/usr/lib/python2.3/site-packages/twisted/internet/base.py", line 317, in _cbContinueSystemEvent
            self._continueSystemEvent(eventType)
        --- <exception caught here> ---
          File "/usr/lib/python2.3/site-packages/twisted/internet/base.py", line 325, in _continueSystemEvent
            callable(*args, **kw)
          File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 135, in save
            self._saveTemp(filename, passphrase, dumpFunc)
          File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 103, in _saveTemp
            dumpFunc(self.original, f)
          File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 119, in dumpFunc
            pickle.dump(obj, file, 1)
        cPickle.PicklingError: Can't pickle __builtin__.SqlSocket: attribute lookup __builtin__.SqlSocket failed

I am rather confused as to how a port can be closed?  I am very new to twisted.

Could anyone shed some light on this?  I need a stable long running daemon, and I am attempting to figure out why this shutdown occurred..

Thanks, Joshua Moore-Oliva



From radeex at gmail.com  Fri Sep 10 12:15:04 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Fri, 10 Sep 2004 12:15:04 -0400
Subject: [Twisted-Python] What does this error mean? (Port 12345 Closed)
In-Reply-To: <200409101201.31519.josh@chatgris.com>
References: <200409101201.31519.josh@chatgris.com>
Message-ID: <60ed19d404091009151b2f906@mail.gmail.com>

On Fri, 10 Sep 2004 12:01:31 -0400, Joshua Moore-Oliva
<josh at chatgris.com> wrote:
> It ran great, 50x faster!!.  It ran for about 2.5 hours, and then I received this error..
> 
> 2004/09/10 02:54 CDT [-] (Port 12345 Closed)
> 2004/09/10 02:54 CDT [-] Stopping factory <twisted.internet.protocol.ServerFactory instance at 0x4076628c>
> 2004/09/10 02:54 CDT [-] Saving chatserver application to chatserver-shutdown.tap...
> 2004/09/10 02:54 CDT [-] Traceback (most recent call last):
...
>         cPickle.PicklingError: Can't pickle __builtin__.SqlSocket: attribute lookup __builtin__.SqlSocket failed
> 
> I am rather confused as to how a port can be closed?  I am very new to twisted.
> 
> Could anyone shed some light on this?  I need a stable long running daemon, 
> and I am attempting to figure out why this shutdown occurred..

"(Port 12345 Closed)" just means that it stopped listening on 12345 in
response to a request for shutdown. The traceback is totally
unrelated, and probably unimportant. twistd saves the state of your
app on shutdown unless you pass the "-o" option. You should probably
pass the "-o" option unless you have a good reason to save the state.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From josh at chatgris.com  Fri Sep 10 12:19:10 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Fri, 10 Sep 2004 12:19:10 -0400
Subject: [Twisted-Python] What does this error mean? (Port 12345 Closed)
	-- Ignore
In-Reply-To: <200409101201.31519.josh@chatgris.com>
References: <200409101201.31519.josh@chatgris.com>
Message-ID: <200409101219.10326.josh@chatgris.com>

Sorry to bother you all, I just realised it was killed via OOM..  I believe the db lib I'm using has a leak in it.

Joshua Moore-Oliva.

On September 10, 2004 12:01 pm, Joshua Moore-Oliva wrote:
> To start off with, last night I had a major bottleneck in python's generic iasynchat modules for large amounts of data..  so I switched to twisted last night.
> 
> It ran great, 50x faster!!.  It ran for about 2.5 hours, and then I received this error..
> 
> 2004/09/10 02:54 CDT [-] (Port 12345 Closed)
> 2004/09/10 02:54 CDT [-] Stopping factory <twisted.internet.protocol.ServerFactory instance at 0x4076628c>
> 2004/09/10 02:54 CDT [-] Saving chatserver application to chatserver-shutdown.tap...
> 2004/09/10 02:54 CDT [-] Traceback (most recent call last):
>           File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 227, in callback
>             self._startRunCallbacks(result)
>           File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 288, in _startRunCallbacks
>             self._runCallbacks()
>           File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 313, in _runCallbacks
>             self.result = callback(self.result, *args, **kw)
>           File "/usr/lib/python2.3/site-packages/twisted/internet/base.py", line 317, in _cbContinueSystemEvent
>             self._continueSystemEvent(eventType)
>         --- <exception caught here> ---
>           File "/usr/lib/python2.3/site-packages/twisted/internet/base.py", line 325, in _continueSystemEvent
>             callable(*args, **kw)
>           File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 135, in save
>             self._saveTemp(filename, passphrase, dumpFunc)
>           File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 103, in _saveTemp
>             dumpFunc(self.original, f)
>           File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 119, in dumpFunc
>             pickle.dump(obj, file, 1)
>         cPickle.PicklingError: Can't pickle __builtin__.SqlSocket: attribute lookup __builtin__.SqlSocket failed
> 
> I am rather confused as to how a port can be closed?  I am very new to twisted.
> 
> Could anyone shed some light on this?  I need a stable long running daemon, and I am attempting to figure out why this shutdown occurred..
> 
> Thanks, Joshua Moore-Oliva
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From josh at chatgris.com  Fri Sep 10 13:57:45 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Fri, 10 Sep 2004 13:57:45 -0400
Subject: [Twisted-Python] Subclassing processProtocol.
Message-ID: <200409101357.45369.josh@chatgris.com>

I have an application that needs to communicate via netstrings over pipes that I am porting to twisted.

Is it possible to use the netstring protocol that already exists with a processProtocol?

SInce my terminology is probably all incorrect, in simpler terms..

I would like to be able to spawn a process, and communicate with that process via netstrings.

The netstring module would be perfect for this, except that I only know how to get it to work with sockets not processes.

I could write my own netstring protocol on top of the processProtocol, but I would prefer to use the current Netstring protocol if possible as it would
save time and would probably be better than code I would write :)

Is it possible to launch a process and communicate with it via the twisted.protocols.basic.NetstringReceiver class?

Thanks, Joshua Moore-Oliva



From foom at fuhm.net  Fri Sep 10 15:27:06 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 10 Sep 2004 15:27:06 -0400
Subject: [Twisted-Python] Things that Need to be Done for 2.0
In-Reply-To: <60ed19d40408141300723da7a9@mail.gmail.com>
References: <60ed19d40408141300723da7a9@mail.gmail.com>
Message-ID: <66B3AD7C-035F-11D9-AC9C-000A95A50FB2@fuhm.net>

Release progress status check...

Also, I'd like to add another thing to the list of Stuff That Needs to 
be Done:

- Go through bugs marked Urgent, and either fix them or downgrade them. 
Also, upgrade any bugs to "urgent" that should block the release.

On Aug 14, 2004, at 4:00 PM, Christopher Armstrong wrote:
> glyph: Come up with a precise license and copyright policy. Do that,
> and someone (probably me) can change trunk HEAD to use it.

Done.

> Everyone: Get rid of all deprecation warnings when running current 
> APIs.

Done?

> Me: Finish converting our packaging to use zpkgtools, obsoleting half
> of release-twisted. Then improve release-twisted (fix bugs in SVN
> workflow, etc).

Not done.

> Me: Write documentation on release process and teach people how to do 
> it.

Not done.

> Moshez: At least do the initial work for Debian packages for each of
> our subprojects.

Not done.

> Web Sites, in order of importance:

> Someone: Move existing Twisted-core-specific content to a new Core
> project web site.
> foom, fzZzy, dreid: Write a project web site for Web.
> z3p: Write a project web site for Conch.
> exarkun: Write project web sites for names, news, and mail.
> spiv: Write a project web site for Lore and Runner.
> glyph, z3p, exarkun, ???: Write a project web site for Words.
> cce: Write a project web site for Flow.
> Tv: Write a project web site for Pair.

Not done, except for Conch, and News.

> Project web sites are to be placed at
> http://twistedmatrix.com/projects/*/, where * is 'core', 'conch',
> 'web', etc. Put your content in the WebSite svn repository in
> "twistedmatrix.com/projects/". If anybody needs access to this
> repository shoot me a message.
>
> Obviously, not all of these are terribly urgent. The urgent ones are
> core, names, conch, lore, and web. If nobody gets around to creating
> real web sites for the others, I'll put in place a basic stock web
> page.

James




From foom at fuhm.net  Fri Sep 10 18:40:48 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 10 Sep 2004 18:40:48 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <75C75851-037A-11D9-AC9C-000A95A50FB2@fuhm.net>

Okay, I made a script that generates this from Roundup -- I'm going to 
put it in a crontab and have it email out every week from now on. 
Alternate formatting suggestions welcome.


Bug summary
______________________
Since 2004-09-03 22:45:53.767335:
   Bugs opened: 10   Bugs closed: 5   Total open bugs: 305 (+5)

New / Reopened Bugs
______________________
returning None from buildProtocol in ReconnectingClientFactory causes 
exception  (2 hours ago)
        http://www.twistedmatrix.com/bugs/issue710 opened by djk121

Oscar html function broken  (yesterday)
CLOSED http://www.twistedmatrix.com/bugs/issue709 opened by jadestorm

[CORE] ReactorTime has serious performance issues  (yesterday)
        http://www.twistedmatrix.com/bugs/issue707 opened by stefan

Add ClientCreator example to TCP Client howto  (yesterday)
        http://www.twistedmatrix.com/bugs/issue708 opened by mcfletch

[DOCUMENTATION] failure.check() docstring  (2 days ago)
        http://www.twistedmatrix.com/bugs/issue706 opened by thomasvs

retrial util.deferredError blows up on failure  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue705 opened by warner

[CHAT] MSN Protocol bugs (with patches &amp; unit tests)  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue702 opened by delx

[XISH] Jabber xmlstream parse bug (with patch and unit test)  (5 days 
ago)
        http://www.twistedmatrix.com/bugs/issue701 opened by delx

SCGI server protocol implementation  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue704 opened by fog

SCGI server protocol implementation  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue703 opened by fog

Bugs Closed
______________________
Oscar html function broken  (yesterday)
        http://www.twistedmatrix.com/bugs/issue709 opened by jadestorm

[PB] callRemote exception handler relies on possibly unbound local 
`req'  (8 months ago)
        http://www.twistedmatrix.com/bugs/issue459 opened by exarkun

[PB] Copyable and Referenceable undefined in pb.py (sandbox)  (8 months 
ago)
        http://www.twistedmatrix.com/bugs/issue461 opened by exarkun

reconnecting ConnectionPools  (1 month ago)
        http://www.twistedmatrix.com/bugs/issue657 opened by davep

Error reporting for unslicable objects isn't very informative  (8 
months ago)
        http://www.twistedmatrix.com/bugs/issue462 opened by exarkun




From exarkun at divmod.com  Fri Sep 10 19:10:29 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 10 Sep 2004 23:10:29 GMT
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <75C75851-037A-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <20040910231029.29723.636040870.divmod.quotient.537@ohm>

On Fri, 10 Sep 2004 18:40:48 -0400, James Y Knight <foom at fuhm.net> wrote:
>Okay, I made a script that generates this from Roundup -- I'm going to 
> put it in a crontab and have it email out every week from now on. 
> Alternate formatting suggestions welcome.
> 
> [snip]

  Awesome awesome awesome.  Thank you, James.

  Jp




From james at delx.cjb.net  Sat Sep 11 07:35:58 2004
From: james at delx.cjb.net (James Bunton)
Date: Sat, 11 Sep 2004 21:35:58 +1000
Subject: [Twisted-Python] MSN & Jabber patches
Message-ID: <200409112135.58848.james@delx.cjb.net>

Hiya all.

Just a friendly reminding prod to whoever that issue 701 and 702 are both 
sitting in the Twisted tracker with patches and unit tests. =)

---

James



From tim.stebbing at nunatak.com.au  Sat Sep 11 07:44:33 2004
From: tim.stebbing at nunatak.com.au (Timothy Stebbing)
Date: Sat, 11 Sep 2004 21:44:33 +1000 (EST)
Subject: [Twisted-Python] a little thingo
In-Reply-To: <200409112135.58848.james@delx.cjb.net>
References: <200409112135.58848.james@delx.cjb.net>
Message-ID: <41376.144.139.77.193.1094903073.squirrel@mail.nunatak.com.au>

gday,

LordVan had a query the other night, he was writing a test app for a PB
server, and on receiving his root object from a deferred, he wanted to
call each consecutive remote method to test them.

Initially he was adding each test as a callback of the last, and passing
on the root object each time. He wanted to know how to run many callbacks
on the initial return value consecutivly, without chaining.

I wrote this little snippet, which in the end he didn't use, however I
thought it might be of interest to others for some purpose.

problems I didnt bother fixing:

a)  if a test callback modifies the value, the next test gets a modified
value. if this is an issue the Repeater should copy the value.

b) you can't pass extra args to the callbacks.

from twisted.internet import reactor, defer

class Repeater(object):

    def dFactory(self, v):
        while 1:
            d = defer.Deferred()
            d.callback(v)
            yield d

    def __call__(self, v, list):
        g = self.dFactory(v)
        l = []
        for i in list:
            l.append(g.next().addCallback(i))
        return l

##TEST:
def test1(v):
    print v

def test2(v):
    print v

def test3(v):
    print v

r = Repeater()
d = defer.Deferred()
d.callback('foo')
print d.addCallback(r, [test1, test2, test3])
reactor.run()

-tjs



From mailinglist at ltsai.com  Sat Sep 11 21:34:34 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Sun, 12 Sep 2004 09:34:34 +0800
Subject: [Twisted-Python] [repost] twistd quietness
Message-ID: <ci094l$g1n$1@sea.gmane.org>

Hi

Is there an option in twistd from showing stderr messages from
appearing, specifically "Removing stale pidfile /var/run/myProg.pid"?

# twistd -y myProg.tac -q --pid /var/run/myProg.pid

I'm already using the quiet option. Do I simply redirect stderr to
/dev/null?

-Liming




From josh at chatgris.com  Sun Sep 12 16:06:13 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Sun, 12 Sep 2004 16:06:13 -0400
Subject: [Twisted-Python] Handling (intercepting) exceptions in twisted
Message-ID: <200409121606.13647.josh@chatgris.com>

Whenever an exception is raised, I would like to handle it instead of twisted so I can syslog and exit the application.

Is there an excepthook for twisted that I can override to provide this functionality?

Thanks, Joshua Moore-Oliva



From itamar at itamarst.org  Sun Sep 12 16:30:34 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 12 Sep 2004 16:30:34 -0400
Subject: [Twisted-Python] Handling (intercepting) exceptions in twisted
In-Reply-To: <200409121606.13647.josh@chatgris.com>
References: <200409121606.13647.josh@chatgris.com>
Message-ID: <1095021033.9924.2.camel@sheriffpony>

On Sun, 2004-09-12 at 16:06, Joshua Moore-Oliva wrote:
> Whenever an exception is raised, I would like to handle it instead of twisted so I can syslog and exit the application.
> 
> Is there an excepthook for twisted that I can override to provide this functionality?

Something along the lines of:

def f(**kwargs):
    if kwargs.has_key("failure"): # do your thing
twisted.python.log.addObserver(f)

# f will get called on all logged messages.

Note twisted has code (twisted.python.syslog) for hooking up the log system to syslog.




From jason at pengale.com  Sun Sep 12 18:53:33 2004
From: jason at pengale.com (Jason Stitt)
Date: Sun, 12 Sep 2004 17:53:33 -0500
Subject: [Twisted-Python] SSH server silently failing to open port
Message-ID: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>

Hi,

I'm still trying to get my SFTP server up. After looking over 
SFTPGateway in some detail, I think I have an idea of where all the 
pieces fit, but I'm still having the problem I had before with the 
sshsimpleserver example. Even though my factory is being instantiated 
and the log output says it's starting on the port I specified, the port 
is not, in fact, open to any connections.

Because there is no error reported, I'm having a hard time debugging 
this. I know that my factory's __init__ method completes successfully, 
and startFactory is also called. After that... nothing.

Can anyone help me figure out where to start looking, at least?

Thanks,

Jason

Here's my Factory class, minus a few comments and debug print 
statements:

class Factory(factory.SSHFactory):

     def __init__(self):
         self.portal = portal.Portal(Realm())

         def makeConnection(*args, **kw):
             return Connection(*args, **kw)

         self.services = {
             'ssh-userauth': userauth.SSHUserAuthServer,
             'ssh-connection': makeConnection,
         }

         # TODO: replace this with keys loaded from a file
         self.__private_keys = {
             'ssh-rsa': keys.getPublicKeyString(data=publicKey)
         }
         self.__public_keys = {
             'ssh-rsa': keys.getPrivateKeyObject(data=privateKey)
         }

     def buildProtocol(self, address):
         # Note: this function does not use its address parameter. I 
don't know
         # why it's there.
         return factory.SSHFactory.buildProtocol(self, address)

     def getPrivateKeys(self):
         return self.__private_keys.copy()

     def getPublicKeys(self):
         return self.__public_keys.copy()




From z3p at twistedmatrix.com  Sun Sep 12 20:07:58 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Sun, 12 Sep 2004 20:07:58 -0400
Subject: [Twisted-Python] SSH server silently failing to open port
In-Reply-To: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
References: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
Message-ID: <1095034078.22763.3.camel@petra>

On Sun, 2004-09-12 at 17:53 -0500, Jason Stitt wrote:
> Can anyone help me figure out where to start looking, at least?

It's hard to debug with just a class.  A single file that demonstrates
the problem (ideally a minimal example) is much better.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040912/f82f49d0/attachment.pgp 

From tom.samplonius at gmail.com  Sun Sep 12 20:34:36 2004
From: tom.samplonius at gmail.com (Tom Samplonius)
Date: Sun, 12 Sep 2004 17:34:36 -0700
Subject: [Twisted-Python] Async Message Queue?
Message-ID: <ff2e0a1a04091217343f8cc6a2@mail.gmail.com>

  Is there an implementation of an async message queue?  I would like
to be send messages to another server, with the guarrentee that
accepted messages can not be lost, if even if the destination server
is down.

Tom



From foom at fuhm.net  Sun Sep 12 20:44:43 2004
From: foom at fuhm.net (James Y Knight)
Date: Sun, 12 Sep 2004 20:44:43 -0400
Subject: [Twisted-Python] Including code under PSF license for backwards
	compatibility?
Message-ID: <1A917BDB-051E-11D9-AC9C-000A95A50FB2@fuhm.net>

Regarding licensing:
Is it okay to include Python library code in twisted for purposes of 
backwards compatibility. Two examples recently:
- Heapq is new in python 2.3. Therefore, regardless of whether we 
modify it or not, if we use it, we either need to depend on python >= 
2.3, or include a copy for compatibility purposes. It has a pure python 
implementation.
- yacc on IRC wanted to use tempfile.mkstemp. This only exists on >= 
2.3. Again, pure python implementation.

Therefore,
Glyph: a pronouncement is necessary on whether, and under what 
conditions, it is acceptable to include PSF-licensed code in twisted.

Select one:
a) It is always okay. Copy freely from python into twisted.
b) It is okay, as long as the modules are included for backwards 
compatibility only and can be removed as soon as the minimum required 
version moves up to 2.3 (or whatever the latest and greatest version we 
need modules from). Also the code under PSF must be segregated in a 
separate file.
c) It is okay <fill in the blank>
d) It is never okay.

As you can probably tell, my initial inclination is (b).

James




From jason at pengale.com  Sun Sep 12 21:27:23 2004
From: jason at pengale.com (Jason Stitt)
Date: Sun, 12 Sep 2004 20:27:23 -0500
Subject: [Twisted-Python] SSH server silently failing to open port
In-Reply-To: <1095034078.22763.3.camel@petra>
References: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
	<1095034078.22763.3.camel@petra>
Message-ID: <104D0589-0524-11D9-8493-000D93AF8AD2@pengale.com>

On Sep 12, 2004, at 7:07 PM, Paul Swartz wrote:

> On Sun, 2004-09-12 at 17:53 -0500, Jason Stitt wrote:
>> Can anyone help me figure out where to start looking, at least?
>
> It's hard to debug with just a class.  A single file that demonstrates
> the problem (ideally a minimal example) is much better.

The sshsimpleserver.py included with Twisted is a fairly minimal 
example. As I mentioned, that's where I first noticed this problem. 
It's in the doc/conch/examples directory in the latest SVN (the one on 
the Web site doesn't work, as we established on the SFTP thread, 
because of a bad import). I guess another question is: Does anybody 
else have this problem?

Jason




From z3p at twistedmatrix.com  Sun Sep 12 21:44:30 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Sun, 12 Sep 2004 21:44:30 -0400
Subject: [Twisted-Python] SSH server silently failing to open port
In-Reply-To: <104D0589-0524-11D9-8493-000D93AF8AD2@pengale.com>
References: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
	<1095034078.22763.3.camel@petra>
	<104D0589-0524-11D9-8493-000D93AF8AD2@pengale.com>
Message-ID: <1095039870.22763.6.camel@petra>

On Sun, 2004-09-12 at 20:27 -0500, Jason Stitt wrote:
> I guess another question is: Does anybody 
> else have this problem?

I don't see it here (SVN head).  Does this happen with other listening
examples?  Try doc/core/examples/echoserv.py and see if that works.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040912/712cf981/attachment.pgp 

From glyph at divmod.com  Sun Sep 12 21:54:37 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sun, 12 Sep 2004 21:54:37 -0400
Subject: [Twisted-Python] Including code under PSF license for
	backwards compatibility?
In-Reply-To: <1A917BDB-051E-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <1A917BDB-051E-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <1095040477.3599.3.camel@localhost>

On Sun, 2004-09-12 at 20:44 -0400, James Y Knight wrote:

> b) It is okay, as long as the modules are included for backwards 
> compatibility only and can be removed as soon as the minimum required 
> version moves up to 2.3 (or whatever the latest and greatest version we 
> need modules from). Also the code under PSF must be segregated in a 
> separate file.

> As you can probably tell, my initial inclination is (b).

I agree.  Consider that the pronouncement :).  Code included under non-
MIT licenses for any reason must have its license agreements preserved
in the files themselves.

For any MIT-licensed code from third parties, we should have an
aggregate copyright declarations file for each project included at the
top level.  (This way we don't have to copy and paste
licensing/copyright junk around when we refactor between files.)




From jason at pengale.com  Sun Sep 12 22:37:28 2004
From: jason at pengale.com (Jason Stitt)
Date: Sun, 12 Sep 2004 21:37:28 -0500
Subject: [Twisted-Python] SSH server silently failing to open port
In-Reply-To: <1095039870.22763.6.camel@petra>
References: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
	<1095034078.22763.3.camel@petra>
	<104D0589-0524-11D9-8493-000D93AF8AD2@pengale.com>
	<1095039870.22763.6.camel@petra>
Message-ID: <DAF846C8-052D-11D9-8493-000D93AF8AD2@pengale.com>

On Sep 12, 2004, at 8:44 PM, Paul Swartz wrote:

> On Sun, 2004-09-12 at 20:27 -0500, Jason Stitt wrote:
>> I guess another question is: Does anybody
>> else have this problem?
>
> I don't see it here (SVN head).  Does this happen with other listening
> examples?  Try doc/core/examples/echoserv.py and see if that works.

Yes. Plain echoserv works. Interestingly, the echoserv_ssl example in 
the same directory also works, whereas the conch/ssh example, which I 
tried again, still does not. I'll have to look into this. Perhaps I 
should try using reactor.listenSSL instead of conch. But would that 
even work at all with SFTP?

> -p
> -- 
>        Paul Swartz
> (o_    http://z3p.livejournal.com/
> //\    z3p at twistedmatrix.com
> V_/_   AIM: z3penguin  GPG:5CF0B1C9
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From z3p at twistedmatrix.com  Sun Sep 12 22:46:28 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Sun, 12 Sep 2004 22:46:28 -0400
Subject: [Twisted-Python] SSH server silently failing to open port
In-Reply-To: <DAF846C8-052D-11D9-8493-000D93AF8AD2@pengale.com>
References: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
	<1095034078.22763.3.camel@petra>
	<104D0589-0524-11D9-8493-000D93AF8AD2@pengale.com>
	<1095039870.22763.6.camel@petra>
	<DAF846C8-052D-11D9-8493-000D93AF8AD2@pengale.com>
Message-ID: <1095043588.22763.10.camel@petra>

On Sun, 2004-09-12 at 21:37 -0500, Jason Stitt wrote:
> Yes. Plain echoserv works. Interestingly, the echoserv_ssl example in 
> the same directory also works, whereas the conch/ssh example, which I 
> tried again, still does not. I'll have to look into this. Perhaps I 
> should try using reactor.listenSSL instead of conch. But would that 
> even work at all with SFTP?

SFTP is just another protocol.  It usually runs over a Conch-provided
secure channel, but it will run over SSL or even a regular TCP
connection.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040912/176b41b8/attachment.pgp 

From andy at thecablelounge.com  Mon Sep 13 00:10:53 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Mon, 13 Sep 2004 14:10:53 +1000
Subject: [Twisted-Python] ftp: LIST blocking issues
Message-ID: <41451DCD.4010504@thecablelounge.com>

Hi there,

I'm finding that the ftp server hangs the client when performing a LIST. 
    I thought it was something to do with what I was doing, but find it 
happens with the standard tap anonymous ftp server as well.

It looks like processCommand adds requests to a blocked queue if 
dtpInstance is None - which it is in my case:

----
2004/09/13 14:03 EST [FTP,0,127.0.0.1] 'PORT 127,0,0,1,152,65'
2004/09/13 14:03 EST [FTP,0,127.0.0.1] processing command ['PORT', 
'127,0,0,1,152,65']
2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd = PORT, 
args = ('127,0,0,1,152,65',)
2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd PORT in 
blockingCommands
2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: 
self.dtpInstance = None
2004/09/13 14:03 EST [FTP,0,127.0.0.1] during dtp setup, blocked = 
[('PORT', ('127,0,0,1,152,65',))]
----

I created the server with 'mktap ftp --root=/tmp' against Twisted trunk 
r11660

Is there something I'm missing?

thanks,
Andy.






From mary-twisted at puzzling.org  Mon Sep 13 06:50:13 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 13 Sep 2004 10:50:13 +0000
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <75C75851-037A-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <75C75851-037A-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <20040913105013.GG6648@fuchsia.puzzling.org>

On Fri, Sep 10, 2004, James Y Knight wrote:
> Okay, I made a script that generates this from Roundup -- I'm going to 
> put it in a crontab and have it email out every week from now on. 
> Alternate formatting suggestions welcome.

You could have breakdown of bug numbers by component, and also
some summary of unassigned bugs (by component?)

-Mary



From pbouige at pasteur.fr  Tue Sep 14 07:58:37 2004
From: pbouige at pasteur.fr (Philippe Bouige)
Date: Tue, 14 Sep 2004 13:58:37 +0200
Subject: [Twisted-Python] Problem with process ?
Message-ID: <20040914135837.A458656@electre.pasteur.fr>


Hello,

   I have problem with getProcessOutput, I attempt this code (*)
   and i change the line :
   return utils.getProcessOutput("ls",["-l", "-a"])
 
   by :
   return utils.getProcessOutput("ls",["-l, "."])

   it's Ok for this...

   But when i change
   by :
   return utils.getProcessOutput("ls",["-l *"])   
   or :
   return utils.getProcessOutput("ls",["-l -a"])
   or :
   return utils.getProcessOutput("ls",["-l ."])

   and i have allways this error, but I don't undestand ??

   *--- Failure #5 ---
--- <exception caught here> ---
*--- End of Failure #5 ---
Traceback (most recent call last):
  File
  "/home/foo/twisted/internet/default.py", line 526, in doSelect
....etc..
  "/home/foo/twisted/internet/utils.py", line 44, in errReceived
    self.deferred.errback(failure.Failure(IOError("got stderr")))
exceptions.AttributeError: 'NoneType' object has no attribute
'errback'
*--- Failure #9 ---
--- <exception caught here> ---
*--- End of Failure #9 ---
Traceback (most recent call last):
  File
  "/home/foo/twisted/internet/default.py", line 526, in doSelect
    _logrun(selectable, _drdw, selectable, method, dict)
......etc..
  File
  "/home/foo/twisted/internet/utils.py", line 44, in errReceived
    self.deferred.errback(failure.Failure(IOError("got stderr")))
exceptions.AttributeError: 'NoneType' object has no attribute
'errback'
*--- Failure #13 ---
--- <exception caught here> ---
*--- End of Failure #13 ---


   Thank you very much for your help.

(*)--------------------------------------------------------
from twisted.internet import protocol, reactor, defer, utils
from twisted.protocols import basic

class FingerProtocol(basic.LineReceiver):

    def lineReceived(self, user):
        self.factory.getUser(user
            ).addCallback(lambda m:
                      (self.transport.write(m+"\r\n\n"))
            ).addErrback(lambda x : x.printDetailedTraceback())

class FingerFactory(protocol.ServerFactory):

    protocol = FingerProtocol

    def getUser(self, user):
        return utils.getProcessOutput("ls",["-l -a"])

reactor.listenTCP(1079, FingerFactory())
reactor.run()





-- 

                       Cordialement Philippe



From glyph at divmod.com  Tue Sep 14 08:30:42 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 14 Sep 2004 08:30:42 -0400
Subject: [Twisted-Python] Problem with process ?
In-Reply-To: <20040914135837.A458656@electre.pasteur.fr>
References: <20040914135837.A458656@electre.pasteur.fr>
Message-ID: <1095165042.3599.15.camel@localhost>

On Tue, 2004-09-14 at 13:58 +0200, Philippe Bouige wrote:
> Hello,

> 
>    But when i change
>    by :
>    return utils.getProcessOutput("ls",["-l *"])   
>    or :
>    return utils.getProcessOutput("ls",["-l -a"])
>    or :
>    return utils.getProcessOutput("ls",["-l ."])
> 
>    and i have allways this error, but I don't undestand ??

Philippe,

Twisted's getProcessOutput doesn't invoke your operating system's shell
to run commands.  When your shell sees "ls -l *" in a directory with the
files "file1 file2 file3", it converts it (through a series of
manipulations described in 'man 1 sh' on your platform) to ['/bin/ls',
'-l', 'file1', 'file2', 'file3'].

If you are really sure that is what you want, you can run
getProcessOutput like this:

utils.getProcessOutput("/bin/sh", ["-c", "ls -l *"])

but I recommend you do some reading up on how your operating system
processes commands first.




From andrew-twisted at puzzling.org  Tue Sep 14 08:31:36 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 14 Sep 2004 13:31:36 +0100
Subject: [Twisted-Python] Problem with process ?
In-Reply-To: <20040914135837.A458656@electre.pasteur.fr>
References: <20040914135837.A458656@electre.pasteur.fr>
Message-ID: <20040914123136.GH6700@frobozz>

On Tue, Sep 14, 2004 at 01:58:37PM +0200, Philippe Bouige wrote:
[...]
> 
>    But when i change
>    by :
>    return utils.getProcessOutput("ls",["-l *"])   
>    or :
>    return utils.getProcessOutput("ls",["-l -a"])
>    or :
>    return utils.getProcessOutput("ls",["-l ."])
> 
>    and i have allways this error, but I don't undestand ??

It's because you need to pass the paramater list that's passed to exec(2),
not a command string that's passed to sh(1).

At the kernel (i.e. syscall) level, the exec syscall receives a list of
strings, where each argument in argv is a string, and can contain spaces or
* or anything character, except '\0'.

At the level you're probably used to, the shell, you just type "ls -ld *" or
whatever, and the shell expands and splits that up into the list of strings
for the exec syscall (in this example, something like ["ls", "-ld", "file1",
"file2", ...]).

If you want to do the shell's expansion and splitting of a commandline, just
explicitly invoke then shell:

    return utils.getProcessOutput('sh', ['-c "ls -l *"'])

(But beware passing user input directly into that; it's potentially a big
security hole that will allow running of arbitrary shell commands)

-Andrew.




From andrew-twisted at puzzling.org  Tue Sep 14 08:41:27 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 14 Sep 2004 13:41:27 +0100
Subject: [Twisted-Python] Problem with process ?
In-Reply-To: <20040914123136.GH6700@frobozz>
References: <20040914135837.A458656@electre.pasteur.fr>
	<20040914123136.GH6700@frobozz>
Message-ID: <20040914124127.GA16005@frobozz>

On Tue, Sep 14, 2004 at 01:31:36PM +0100, Andrew Bennetts wrote:
[...]
> If you want to do the shell's expansion and splitting of a commandline, just
> explicitly invoke then shell:
> 
>     return utils.getProcessOutput('sh', ['-c "ls -l *"'])

Gah, I of course meant:

    return utils.getProcessOutput('sh', ['-c', 'ls -l *'])

-Andrew.




From nico at tekNico.net  Thu Sep 16 15:11:56 2004
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 16 Sep 2004 21:11:56 +0200
Subject: [Twisted-Python] PyHeartbeat cookbook recipe
Message-ID: <200409162111.59992.nico@tekNico.net>

My old PyHeartbeat recipe on the Cookbook site, included in the O'Reilly book 
too, has got a fresh new look, and a new Twisted implementation besides the 
old threaded one.

Its shortness and double implementation may make it a nice first example for 
those trying to disentangle themselves from those pesky threads. ;-)

PyHeartbeat - detecting inactive computers
http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52302


-- 
Nicola Larosa - nico at tekNico.net

"Laugh. But you too are going to sound like and old fart one day.
And the respect you show or don't show for those that came before you
is going to be what you instill in those that come after you."
 -- EvilTwinSkippy, Slashdot, June 2004

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040916/f010fc09/attachment.pgp 

From andy at thecablelounge.com  Thu Sep 16 18:20:38 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 17 Sep 2004 08:20:38 +1000
Subject: [Twisted-Python] ftp: LIST blocking issues
In-Reply-To: <41451DCD.4010504@thecablelounge.com>
References: <41451DCD.4010504@thecablelounge.com>
Message-ID: <414A11B6.4030406@thecablelounge.com>

Andy Gayton wrote:
> I'm finding that the ftp server hangs the client when performing a LIST. 
>    I thought it was something to do with what I was doing, but find it 
> happens with the standard tap anonymous ftp server as well.
> 
> It looks like processCommand adds requests to a blocked queue if 
> dtpInstance is None - which it is in my case:
> 
> ----
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] 'PORT 127,0,0,1,152,65'
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] processing command ['PORT', 
> '127,0,0,1,152,65']
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd = PORT, 
> args = ('127,0,0,1,152,65',)
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd PORT in 
> blockingCommands
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: 
> self.dtpInstance = None
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] during dtp setup, blocked = 
> [('PORT', ('127,0,0,1,152,65',))]
> ----
> 
> I created the server with 'mktap ftp --root=/tmp' against Twisted trunk 
> r11660
> 
> Is there something I'm missing?

As far as I can tell the ftp protocol is only creating a dtpInstance 
when processing a PASV or PORT command.  But the PORT command blocks if 
there is no dtpInstance - so only passive clients can get a dtpInstance.

I used pftp to the standard tap anonymous ftp server and it works fine.

Does anyone know if this was intentional?  non-passive clients did work 
with Twisted r9390 and before which is fair while ago, so I'm guessing 
it is .. ?

I don't know anything about the inards of the ftp protocol, so just 
trying to get my head around what's going on.

Any clarification would be appreciated,

cheers,

Andy.



From josh at chatgris.com  Thu Sep 16 20:03:38 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Thu, 16 Sep 2004 20:03:38 -0400
Subject: [Twisted-Python] Memory leak//problem in twisted write procedures
Message-ID: <200409162003.38140.josh@chatgris.com>

I believe I have identified a memory problem in twisted.

A quick background..

I've been developing a program that has to use mssql for reasons beyond my control.

Due to the chaotic nature of mssql tds implementations, I created a program to pipe queries through to a windows box.

In the beginning, I was using asyn* for my communications, however asyn* was very inefficient when writing large amounts of data as after each write the
string would be spliced to remove the data written.

I then moved to twisted to use it's far more efficient buffer implementation, and the performance problems went away.

However, I have since been hit with an apparent memory leak.  After reading through the twisted source (specifically the write routines in twisted/internet/abstract.py) 
I believe I have come across the problem.

***

the write implementation continually increases it's write databuffer, only freeing up memory when the data buffer is all sent

However, successive write operations append data to the data buffer..  So if a program is able to keep the data buffer from ever completely emptying (which mine is)
then the data buffer will forever grow, resulting in a memory problem.

I have added some output to print out the length of the data buffer and the offset, and after only 10 minutes of running the numbers are already

offset == 76906496 

dataBuffer len == 120768384

***

Now, reading through the source to fix this problem, the fastest solution (requiring the least change to the existing code) would be to splice//reduce the size of the 
dataBuffer after offset exceeds a certain number.

However, I'm not too intimate with the source..  I will try that above solution to see if it does any good..  otherwise, i think that this is a fairly serious bug that should be addressed
by someone more intimate with the source.

Thanks, Joshua Moore-Oliva



From exarkun at divmod.com  Thu Sep 16 20:29:48 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 17 Sep 2004 00:29:48 GMT
Subject: [Twisted-Python] Memory leak//problem in twisted write procedures
In-Reply-To: <200409162003.38140.josh@chatgris.com>
Message-ID: <20040917002948.29723.693365409.divmod.quotient.2129@ohm>

On Thu, 16 Sep 2004 20:03:38 -0400, Joshua Moore-Oliva <josh at chatgris.com> wrote:
>I believe I have identified a memory problem in twisted.
> 
> [snip]
> 
> However, I have since been hit with an apparent memory leak.  After reading through the twisted source (specifically the write routines in twisted/internet/abstract.py) 
> I believe I have come across the problem.
> 
> ***
> 
> the write implementation continually increases it's write databuffer, only freeing up memory when the data buffer is all sent
> 
> However, successive write operations append data to the data buffer..  So if a program is able to keep the data buffer from ever completely emptying (which mine is)
> then the data buffer will forever grow, resulting in a memory problem.
> 
> I have added some output to print out the length of the data buffer and the offset, and after only 10 minutes of running the numbers are already
> 
> offset == 76906496 
> 
> dataBuffer len == 120768384
> 
> ***
> 

  Whether or not "leak" is the appropriate term for this is debatable.  That aside, it is somewhat undesirable, but it is completely avoidable without making any changes to Twisted*.  There are two concepts involved, Producers and Consumers.  The transport is a Consumer in this case, and whatever protocol you have that is writing to it is the Producer.  The Consumer will notify the Producer when it would be a good idea to write more bytes.  Since this will only happen when the write buffer is empty, it avoids the problem of an ever growing buffer in the transport.

  Producers and Consumers aren't _too_ well documented, but the relevant interfaces are quite simple:

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IProducer.html
http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IConsumer.html

  There are a few examples throughout Twisted itself.  One such (FileSender, at the end of bottom of the module):

http://cvs.twistedmatrix.com/cvs/trunk/twisted/protocols/basic.py?view=markup&rev=11450&root=Twisted


> Now, reading through the source to fix this problem, the fastest solution (requiring the least change to the existing code) would be to splice//reduce the size of the 
> dataBuffer after offset exceeds a certain number.
> 

  It is the easiest change to make, but it leads to detrimental string copying behavior.  Which this is a minor concern in the case where many small writes are being made while the buffer is large (because huge amounts of copying is already going on), it is a noticable slowdown in the more common case when the buffer is typically empty or almost empty.

  Jp

  * A change _should_ be made to Twisted eventually.  A good solution would involve a zero-copy buffering system, such as a list.  There is an implementation of this, but it involves so many nasty hacks that I don't feel it is worth including.  Shortly after 2.0 I plan to find time to clean up many of the low-level TCP implementation details, as they have grown increasingly crufty over the last year.



From josh at chatgris.com  Thu Sep 16 20:44:28 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Thu, 16 Sep 2004 20:44:28 -0400
Subject: [Twisted-Python] Memory leak//problem in twisted write procedures
In-Reply-To: <20040917002948.29723.693365409.divmod.quotient.2129@ohm>
References: <20040917002948.29723.693365409.divmod.quotient.2129@ohm>
Message-ID: <200409162044.28955.josh@chatgris.com>


>   Whether or not "leak" is the appropriate term for this is debatable.  

I agree there, hence my use of Memory leak//problem :)

> 

> > Now, reading through the source to fix this problem, the fastest solution (requiring the least change to the existing code) would be to splice//reduce the size of the 
> > dataBuffer after offset exceeds a certain number.
> > 
> 
>   It is the easiest change to make, but it leads to detrimental string copying behavior.  
>>   Which this is a minor concern in the case where many small writes are being made while the buffer is large (because huge amounts of copying is already going on), 
>>   it is a noticable slowdown in the more common case when the buffer is typically empty or almost empty.  

I do not think my idea was properly communicated..

An interim change I think could work quite well along these lines 

from the abstract.py file
def doWrite(self):

      ...
        # If there is nothing left to send,
        if self.offset == len(self.dataBuffer):
            self.dataBuffer = ""
            self.offset = 0
            ...
       elif self.offset > 1000000: #This would be best pre-defined somewhere
           self.dataBuffer = self.dataBuffer[self.offset:]
           self.offset=0
        
        return result

Note that these changes are just done in 'real-time' while writing my email, no guarantees that the change will even let pythons tartup without syntax errors :)

However, notice the check for offset > a particular value.

This would prevent performance degredation for the more common case where the buffer is typically empty or almost empty, as the string would only be 
reduced in the event that too much memory was being wasted (even 10MB would be a good limit)

> 
>   Jp
> 
>   * A change _should_ be made to Twisted eventually.  A good solution would involve a zero-copy buffering system, such as a list.  There is an implementation of this, but it involves so many nasty hacks that I don't feel it is worth including.  Shortly after 2.0 I plan to find time to clean up many of the low-level TCP implementation details, as they have grown increasingly crufty over the last year.

I agree with you that a list would be the best solution in the long term, but the above proposed solution would remove the current problem, as well as not affecting the more
common small buffer cases.

Joshua Moore-Oliva



From itamar at itamarst.org  Thu Sep 16 22:26:30 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 16 Sep 2004 22:26:30 -0400
Subject: [Twisted-Python] PyHeartbeat cookbook recipe
In-Reply-To: <200409162111.59992.nico@tekNico.net>
References: <200409162111.59992.nico@tekNico.net>
Message-ID: <1095387990.1084.15.camel@sheriffpony>

On Thu, 2004-09-16 at 15:11, Nicola Larosa wrote:

> Its shortness and double implementation may make it a nice first example for 
> those trying to disentangle themselves from those pesky threads. ;-)

Yes indeed, thanks for doing this. One comment though - it'd be better
to use reactor.listenUDP and reactor.run() directly for simplicity's
sake, the extra abstraction layers of services and application just make
the example harder to understand. I don't want people to think Twisted
is *too* abstract ;)




From nico at tekNico.net  Fri Sep 17 02:28:14 2004
From: nico at tekNico.net (Nicola Larosa)
Date: Fri, 17 Sep 2004 08:28:14 +0200
Subject: [Twisted-Python] Re: PyHeartbeat cookbook recipe
References: <200409162111.59992.nico@tekNico.net>
	<1095387990.1084.15.camel@sheriffpony>
Message-ID: <cie06b$2f4$1@sea.gmane.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

> One comment though - it'd be better to use reactor.listenUDP and
> reactor.run() directly for simplicity's sake, the extra abstraction layers
> of services and application just make the example harder to understand.

I thought about that, and concluded that the recipe would come out longer
and less structured that way, and that it would be best to directly show
people the "right" way of setting up things.

Maybe it's just that I'm now so accustomed to think in terms of app and
services, that it's harder to go back to the old way.


> I don't want people to think Twisted is *too* abstract ;)

But indeed it is, isn't it? Hiding the truth is tough, sometimes. ;-)))


- -- 
Nicola Larosa - nico at tekNico.net

"Laugh. But you too are going to sound like and old fart one day.
And the respect you show or don't show for those that came before you
is going to be what you instill in those that come after you."
 -- EvilTwinSkippy, Slashdot, June 2004


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (GNU/Linux)

iD8DBQFBSoQDXv0hgDImBm4RAkJ/AKCEM3VHvwOWBvWB/h0jh2jZokDDYACfYTJI
h83j1egtYFtq4ui7lk5aZ8E=
=Gi1t
-----END PGP SIGNATURE-----




From foom at fuhm.net  Fri Sep 17 10:24:48 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 17 Sep 2004 10:24:48 -0400
Subject: [Twisted-Python] Re: PyHeartbeat cookbook recipe
In-Reply-To: <cie06b$2f4$1@sea.gmane.org>
References: <200409162111.59992.nico@tekNico.net>
	<1095387990.1084.15.camel@sheriffpony> <cie06b$2f4$1@sea.gmane.org>
Message-ID: <549D0DCA-08B5-11D9-AC9C-000A95A50FB2@fuhm.net>

On Sep 17, 2004, at 2:28 AM, Nicola Larosa wrote:
>> One comment though - it'd be better to use reactor.listenUDP and
>> reactor.run() directly for simplicity's sake, the extra abstraction 
>> layers
>> of services and application just make the example harder to 
>> understand.
>
> I thought about that, and concluded that the recipe would come out 
> longer
> and less structured that way, and that it would be best to directly 
> show
> people the "right" way of setting up things.
>
> Maybe it's just that I'm now so accustomed to think in terms of app and
> services, that it's harder to go back to the old way.

I agree -- I think it's not a good idea to make all the examples use 
reactor.run() and then when someone actually wants to write a program 
say "well gee now why the heck are you using *that*??"

James




From arthur.lutz at logilab.fr  Fri Sep 17 10:29:21 2004
From: arthur.lutz at logilab.fr (Arthur Lutz)
Date: Fri, 17 Sep 2004 16:29:21 +0200
Subject: [Twisted-Python] domish.Element and deepcopy problem
Message-ID: <1095431360.789.21.camel@sagittarius.logilab.fr>

Hi,

I'm having a problem with domish.Element, here it is (isolated) : 

from twisted.xish import domish
from copy import deepcopy

invitation = domish.Element(('jabber:client', 'message'))
invitation2 = deepcopy(invitation)

gives me : 

Traceback (most recent call last):
  File "modules/isolated_bug.py", line 5, in ?
    invitation2 = deepcopy(invitation)
  File "/usr/lib/python2.3/copy.py", line 198, in deepcopy
    rv = reductor(2)
TypeError: 'NoneType' object is not callable


Python version : 
Python 2.3.4 (#2, Jul  5 2004, 09:15:05) 
[GCC 3.3.4 (Debian 1:3.3.4-2)] on linux2
Type "help", "copyright", "credits" or "license" for more information.


Hope this is enough for a diagnostic. 

Thanks a lot for the good work, 

-- 
Arthur LUTZ
LOGILAB, Paris (France).
http://www.logilab.com   http://www.logilab.fr http://www.logilab.org
Advanced Computing -  Knowledge Management -  Artificial Intelligence
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 307 bytes
Desc: Ceci est une partie de message
	=?ISO-8859-1?Q?num=E9riquement?= =?ISO-8859-1?Q?_sign=E9e=2E?=
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040917/40970d67/attachment.pgp 

From itamar at itamarst.org  Fri Sep 17 12:05:41 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 17 Sep 2004 12:05:41 -0400
Subject: [Twisted-Python] domish.Element and deepcopy problem
In-Reply-To: <1095431360.789.21.camel@sagittarius.logilab.fr>
References: <1095431360.789.21.camel@sagittarius.logilab.fr>
Message-ID: <1095437141.1297.0.camel@sheriffpony>

Could you add this to twistedmatrix.com/bugs/ and assign to dizzyd?




From itamar at itamarst.org  Fri Sep 17 12:09:13 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 17 Sep 2004 12:09:13 -0400
Subject: [Twisted-Python] Re: PyHeartbeat cookbook recipe
In-Reply-To: <cie06b$2f4$1@sea.gmane.org>
References: <200409162111.59992.nico@tekNico.net>
	<1095387990.1084.15.camel@sheriffpony>  <cie06b$2f4$1@sea.gmane.org>
Message-ID: <1095437353.1297.5.camel@sheriffpony>

On Fri, 2004-09-17 at 02:28, Nicola Larosa wrote:

> I thought about that, and concluded that the recipe would come out longer
> and less structured that way, and that it would be best to directly show
> people the "right" way of setting up things.

It'd come out slightly shorter, actually. As for the right way... using
twistd is generally the right thing to do, yes, but if as in your
previous example you want to show people how relatively low-level APIs
work, reactor is probably better. The services abstraction isn't all
that relevant to your example, since it's so simple.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From foom at fuhm.net  Fri Sep 17 16:04:33 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 17 Sep 2004 16:04:33 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <CAD7B7D0-08E4-11D9-AC9C-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2004-09-10 22:45:53.770000:
   Bugs opened: 9   Bugs closed: 9   Total open bugs: 305 (+0)

New / Reopened Bugs
______________________
[WORDS] IRC examples bug fix/improvment  (9 hours ago)
        http://www.twistedmatrix.com/bugs/issue721 opened by yacc

cfreactor breaks LoopingCall  (yesterday)
CLOSED http://www.twistedmatrix.com/bugs/issue717 opened by anthony

[MAIL] MaildirMailbox.appendMessage implementation.  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue714 opened by yacc

Pluggable Application loaders  (yesterday)
        http://www.twistedmatrix.com/bugs/issue720 opened by exarkun

tempfile.mkstemp in twisted.python.compat  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue713 opened by yacc

[CORE] better pluggable reactor support for twistd  (yesterday)
        http://www.twistedmatrix.com/bugs/issue719 opened by itamarst

[CORE] Allow specifying exit code in generic way (supporting use and 
non-use of twistd)  (yesterday)
        http://www.twistedmatrix.com/bugs/issue718 opened by itamarst

[CONCH] weirdness in conch's connection forwarding  (yesterday)
        http://www.twistedmatrix.com/bugs/issue716 opened by z3p

[CORE] No way to override the default signal handler  (2 days ago)
CLOSED http://www.twistedmatrix.com/bugs/issue715 opened by loic

Bugs Closed
______________________
cfreactor breaks LoopingCall  (yesterday)
        http://www.twistedmatrix.com/bugs/issue717 opened by anthony

[MAIL] twisted.mail.pop3.POP3 unconditionally chatty  (2 weeks ago)
        http://www.twistedmatrix.com/bugs/issue700 opened by yacc

[DOCUMENTATION, RELEASE MANAGEMENT] Twisted 1.3 identifying itself as 
1.3.0rc1  (2 months ago)
        http://www.twistedmatrix.com/bugs/issue641 opened by br1

[DOCUMENTATION, TWISTD] twistd or twistw?  (2 months ago)
        http://www.twistedmatrix.com/bugs/issue640 opened by br1

spec file in Twisted-1.3.0 tarball has wrong version and source 
information  (1 month ago)
        http://www.twistedmatrix.com/bugs/issue679 opened by jawildman

[WEB] SCGI server protocol implementation  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue703 opened by fog

Implement spawnProcess for default reactor on Windows  (5 months ago)
        http://www.twistedmatrix.com/bugs/issue591 opened by justinj

[CORE] Port t.p.c to Zope3 components  (5 months ago)
        http://www.twistedmatrix.com/bugs/issue572 opened by itamarst

[CORE] No way to override the default signal handler  (2 days ago)
        http://www.twistedmatrix.com/bugs/issue715 opened by loic




From exarkun at divmod.com  Sat Sep 18 23:30:48 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sun, 19 Sep 2004 03:30:48 GMT
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: 0
Message-ID: <20040919033048.29723.1152737553.divmod.quotient.3244@ohm>

Begin forwarded message:

> From: Jp Calderone <exarkun at wolfwood.twistedmatrix.com>
> Date: Sat, 18 Sep 2004 21:25:57 -0600
> To: twisted-commits at twistedmatrix.com
> Subject: [Twisted-commits] r11721 - revert r11685
> Reply-to: twisted-python at twistedmatrix.com
> 
> Author: exarkun
> Date: Sat Sep 18 21:25:57 2004
> New Revision: 11721
> 
> Removed:
>    trunk/doc/web/howto/newweb.xhtml
>    trunk/twisted/web2/
> Log:
> revert r11685
> 
> twisted/web2 has an unacceptable dependency on nevow that will need to be 
> discussed or removed before this subpackage can be added.
> 
> 
> _______________________________________________
> Twisted-commits mailing list
> Twisted-commits at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-commits
> 



From projects at reedflute.com  Sun Sep 19 04:47:45 2004
From: projects at reedflute.com (Eugene Coetzee)
Date: Sun, 19 Sep 2004 10:47:45 +0200
Subject: [Twisted-Python] TCP wrapper support for twisted servers
Message-ID: <414D47B1.8090300@reedflute.com>

Hi everyone,

I was wondering if anybody knows about a Python wrapper  for  libwrap. 
I'm aware of libwrap function libraries  for PHP and libwrap-ruby for 
Ruby - but could not google anything similar for Python.

I want to control access to my twisted servers using hosts.allow/deny. I 
have read someting about "inetd setup" options planned for tap2deb 
(couldn't get any docs regarding inetd/tcp -wrapper support though).

Alternatively, is there anything included in twisted that can be used 
get tcp wrapper support without having to run from inetd.

regards,
Eugene
   

Web                 -> www.reedflute.com
=============================================== 





From itamar at itamarst.org  Sun Sep 19 10:07:57 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 19 Sep 2004 10:07:57 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <20040919033048.29723.1152737553.divmod.quotient.3244@ohm>
References: <20040919033048.29723.1152737553.divmod.quotient.3244@ohm>
Message-ID: <1095602876.1291.11.camel@sheriffpony>

Why is this unacceptable? We depend on pyOpenSSL for TLS support, etc..




From exarkun at divmod.com  Sun Sep 19 12:30:31 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sun, 19 Sep 2004 16:30:31 GMT
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095602876.1291.11.camel@sheriffpony>
Message-ID: <20040919163031.29723.1465129106.divmod.quotient.3557@ohm>

On Sun, 19 Sep 2004 10:07:57 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>Why is this unacceptable? We depend on pyOpenSSL for TLS support, etc..
> 

  The logistical reasons:

    There is no release of Nevow.

    None of the buildslaves have even an SVN trunk checkout installed, nor have any of them been asked to install one.

    Developers weren't told about this new dependency, so they may not have it installed.  This leads to strangely failing tests, making it difficult to tell if outstanding changes that a developer wants to commit are broken.

  The technical reasons:

    Nevow imports Twisted.  Therefore, Twisted should not import Nevow.

    Twisted is the networking framework and the web server framework.  It is lower level than the application server and the templating system.  The latter should depend on the former, if a dependency exists, not the reverse.  _If_ it is desired for Twisted to gain functionality from a Nevow installed, Nevow must be careful to only import certain things from Twisted.  

 I would much prefer if Nevow gained functionality from Twisted and not the reverse, but if twisted.web/nevow developers desire things to work as they do currently in twisted.web2, at least the above issues need to be addressed.  This thread should serve to resolve one of them (hopefully Twisted developers are now aware of the potential dependency ;).

  Jp



From fu at donfu.com  Sun Sep 19 15:44:34 2004
From: fu at donfu.com (donfu)
Date: Sun, 19 Sep 2004 21:44:34 +0200
Subject: [Twisted-Python] problems with trial and adbapi
Message-ID: <5562CB50-0A74-11D9-8055-000393DC7B7C@donfu.com>

Dear Twisters

I'm diving into the twisted matrix. Mostly really enjoying it, but 
sometimes it's a tough ground :)

Now i'm trying to set up unittests with trial for a small twisted 
datastore. the store itself works outside of trial, but strange things 
happen when running the tests.

The first thing I had to learn, is to explicitly start the dbpool with 
dbpool.start(). Now the tests work sometimes, but sometimes not. I 
guess the problem has something to do with adbapi's usage of threads 
and my using of 'deferredResult()' in the tests.

can someone help me here?

thanks,
donfu.




From slyphon at twistedmatrix.com  Sun Sep 19 16:08:14 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 19 Sep 2004 16:08:14 -0400
Subject: [Twisted-Python] retrial,
	the new-and-improved unittesting framework for twisted
Message-ID: <414DE72E.4020305@twistedmatrix.com>

Hello twisted people,

Many of you know that I've been working on rewriting the
twisted-framework's unittesting program "trial".

This message is for those of you who don't ;)

I've nearly completely redesigned trial in terms of both it's
user-facing features, and it's internal workings. In initial testing,
it's shown a 4x speed increase over regular trial, running twisted's
tests in roughly 220s on a p3-1Ghz machine (as compared to 800+ seconds
on the same box).

here are some of the features you can look forward to (from the
twisted.trial.unittest docstring, so please excuse the epydoc markup):

  1. B{Trial now understands deferreds!}
    - There is no reason to use L{twisted.trial.util.wait} or
      L{twisted.trial.util.deferredResult}. Write your deferred handling
      code as you normally would, make your assertions in your callbacks
      and errbacks, then I{return the deferred from your test method}.
      Trial will spin the reactor (correctly) and will wait for the
      results before running the next test. This will allow developers to
      write more natural-looking tests for their asynchronous code.
    - there is a new attribute that has been introduced, C{.timeout}.
      Trial will wait a default 4 seconds for a result from a deferred
      that is returned from a test method. If you wish to make this value
      smaller or larger:

          >>> from twisted.trial.unittest import TestCase
          >>> from twisted.internet import defer
          >>> class MyTestCase(TestCase):
          ...     def testThatReturnsADeferred(self):
          ...         return defer.success('Hooray!')
          ...     testThatReturnsADeferred.timeout = 2.8
          ...
          >>>

      This would cause trial to wait up to 2.8 seconds (quite needlessly in
      this case) for the deferred to either callback or errback

  2. B{Trial is now 100% compatible with new-style classes and zope
     interfaces}
    - Some people (the maintainer included), have been bitten in the past
      by trial's mediocre support for new-style classes (classes which
      inherit from object). In v2.0, nearly all of the classes that
      comprise the framework inherit from object, so support is built-in.
      Whereas before the TestCase finding machinery used a test for
      inheritance from L{twisted.trial.unittest.TestCase}, the new
      mechanism tests that L{twisted.trial.interfaces.ITestCaseFactory}
      is supplied by your class B{type}. You can write a custom TestCase,
      and trial will detect it and use it as a class to test, if you do:

          >>> import zope.interface as zi
          >>> from twisted.trial.interfaces import ITestCaseFactory
          >>> from twisted.trial.interfaces import ITestCase
          >>> class MyTestCase(object):
          ...     zi.classProvides(ITestCaseFactory)
          ...     zi.implements(ITestCase)
          >>>

      Naturally, the class should actually provide an implementation of
      L{twisted.trial.interfaces.ITestCase}.
    - To avoid any possible conflicts (and to provide component
      de-registration), trial uses it's own private adapter registry, see
      L{twisted.trial.__init__} for details.
    - Trial makes use of zope.interface.Interfaces to allow flexibility
      and adaptation. All objects implement interfaces, and those
      interfaces are centralized and documented in
      L{twisted.trial.interfaces}.


  3. B{All assert* and fail* methods are now top-level functions of the
  unittest module}
    - Previously they were only available as instance-methods on the
      TestCase. You can now import all of the assert* and fail* variants
      and use them as functions. This will allow you to use this
      functionality in helper classes and functions that aren't part of
      your TestCase (plus less typing ;])
    - Note: these methods are no longer part of the ITestCase API, but
      are provided as a backwards-compatability to classes written to use
      the original TestCase class.


  4. B{The trial script now accepts a --reporter option}
    - This is to allow for custom reporter classes. If you want to run a
      trial process remotely, and gain access to the output, or if you
      would just like to have your reporting formatted differently, you
      can supply the fully-qualified class name (of a class that
      implements L{twisted.trial.interfaces.IReporter}) to --reporter,
      and trial will report results to your class.
    - The Reporter is now (almost) totally stateless. All stats on the
      test run are held in the TestSuite and are reported as necessary
      using the ITestStats interface. This allows for greatly simplified
      design in the Reporter implementation.
    - The Reporter API has been greatly simplified by changing the method
      signatures so that methods are called with a single object that can
      easily be adapted to provide all information necessary about a
      given test phase.


  5. B{Compatibility for PyUnit tests}
    - Trial now supports stdlib unittest.TestCase classes transparently.
      This functionality is unstable, and has not been heavily tested.
    - Note: Trial accomplishes this by monkey-patching unittest.TestCase
      in L{twisted.trial.__init__}.
    - Please report any bugs you find with this feature to the
      twisted-python mailing list


  6. B{Experimental support for doctests}
    - The trial script now supports a --doctest=[module] option. The
      argument is a fully-qualified module name, and trial will use a
      modified version of DocTestSuite to run the doctests it finds.
    - My support for doctests is broken when using Python 2.4-alpha3,
      hopefully, i'll get this fixed by the time the first major-release
      comes out.
    - Note: you cannot use .skip or .todo attributes with doctests, all
      tests will be reported as pass/fail
    - Please report any bugs you find with this feature to the
      twisted-python mailing list


  7. B{expectedAssertions} is no longer supported
    - it was just too difficult to make radix's clever
      deferred-doublecheck feature work with this code revision. With his
      permisison, this feature has been removed.


Trial's 'special' attributes:

  1. .todo attributes can either be set on the TestCase or on an
  individual test* method, and indicate that the test is expected to
  fail. New tests (for which the underlying functionality has not yet
  been added) should set this flag while the code is being written. Once
  the feature is added and the test starts to pass, the flag should be
  removed.

  2. Tests of highly-unstable in-development code should consider using
  .skip to turn off the tests until the code has reached a point where
  the success rate is expected to be monotonically increasing.

  3. Tests that return deferreds may alter the default timeout period of
  4.0 seconds by adding a method attribute C{.timeout} which is the
  number of seconds as a float that trial should wait for a result.


I am currently developing this in a branch in the twisted repository. I
would like to encourage anyone who is curious to check it out and play
with it and its new features. I'd like to make it as bug free as
possible before I merge it back into trunk, and the more eyes I can get
on it, the better.

you can check it out by doing
"svn co svn://svn.twistedmatrix.com/svn/Twisted/branches/slyphon/retrial-2"

and thank you for your support....

-Jonathan "slyphon" Simms




From slyphon at twistedmatrix.com  Sun Sep 19 17:22:02 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 19 Sep 2004 17:22:02 -0400
Subject: [Twisted-Python] ftp: LIST blocking issues
In-Reply-To: <414A11B6.4030406@thecablelounge.com>
References: <41451DCD.4010504@thecablelounge.com>
	<414A11B6.4030406@thecablelounge.com>
Message-ID: <414DF87A.8050006@twistedmatrix.com>

Andy Gayton wrote:

> Andy Gayton wrote:
>
>> I'm finding that the ftp server hangs the client when performing a 
>> LIST.    I thought it was something to do with what I was doing, but 
>> find it happens with the standard tap anonymous ftp server as well.
>>
>> It looks like processCommand adds requests to a blocked queue if 
>> dtpInstance is None - which it is in my case:
>>
>> ----
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] 'PORT 127,0,0,1,152,65'
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] processing command ['PORT', 
>> '127,0,0,1,152,65']
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd = 
>> PORT, args = ('127,0,0,1,152,65',)
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd PORT 
>> in blockingCommands
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: 
>> self.dtpInstance = None
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] during dtp setup, blocked = 
>> [('PORT', ('127,0,0,1,152,65',))]
>> ----
>>
>> I created the server with 'mktap ftp --root=/tmp' against Twisted 
>> trunk r11660
>>
>> Is there something I'm missing?
>
>
> As far as I can tell the ftp protocol is only creating a dtpInstance 
> when processing a PASV or PORT command.  But the PORT command blocks 
> if there is no dtpInstance - so only passive clients can get a 
> dtpInstance.
>
> I used pftp to the standard tap anonymous ftp server and it works fine.
>
> Does anyone know if this was intentional?  non-passive clients did 
> work with Twisted r9390 and before which is fair while ago, so I'm 
> guessing it is .. ?
>
> I don't know anything about the inards of the ftp protocol, so just 
> trying to get my head around what's going on.
>
> Any clarification would be appreciated,
>
> cheers,
>
> Andy.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Well, basically, ftp is broken in subtle ways.  IIRC, the support for 
the PORT command was iffy at best.

The best thing you can do is go to twistedmatrix.com and file a bug 
report. The protoocol is in the middle of yet-another rewrite, and 
having this issue in the bug-tracker will help to make sure that it gets 
fixed.

-Jonathan Simms








From dave at krondo.com  Sun Sep 19 19:50:51 2004
From: dave at krondo.com (Dave Peticolas)
Date: Sun, 19 Sep 2004 16:50:51 -0700
Subject: [Twisted-Python] problems with trial and adbapi
In-Reply-To: <5562CB50-0A74-11D9-8055-000393DC7B7C@donfu.com>
References: <5562CB50-0A74-11D9-8055-000393DC7B7C@donfu.com>
Message-ID: <1095637851.13805.51.camel@oneiros>

On Sun, 2004-09-19 at 12:44, donfu wrote:
> Dear Twisters
> 
> I'm diving into the twisted matrix. Mostly really enjoying it, but 
> sometimes it's a tough ground :)
> 
> Now i'm trying to set up unittests with trial for a small twisted 
> datastore. the store itself works outside of trial, but strange things 
> happen when running the tests.
> 
> The first thing I had to learn, is to explicitly start the dbpool with 
> dbpool.start(). Now the tests work sometimes, but sometimes not. I 
> guess the problem has something to do with adbapi's usage of threads 
> and my using of 'deferredResult()' in the tests.

deferredResult should work just fine, I use it all the
time with db-related tests. Are you calling db.close()
after the tests are done?

dave





From foom at fuhm.net  Sun Sep 19 20:19:42 2004
From: foom at fuhm.net (James Y Knight)
Date: Sun, 19 Sep 2004 20:19:42 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <20040919163031.29723.1465129106.divmod.quotient.3557@ohm>
References: <20040919163031.29723.1465129106.divmod.quotient.3557@ohm>
Message-ID: <C4DA5F5A-0A9A-11D9-92A7-000A95A50FB2@fuhm.net>

On Sep 19, 2004, at 12:30 PM, <exarkun at divmod.com> wrote:
> twisted/web2 has an unacceptable dependency on nevow that will need to 
> be
> discussed or removed before this subpackage can be added.

First off -- I consider this a rude thing to do, considering I am far 
from being unreachable. What was the emergency that prompted this 
removal at midnight on a saturday night? None? Yeah, that's what I 
thought.

> On Sun, 19 Sep 2004 10:07:57 -0400, Itamar Shtull-Trauring 
> <itamar at itamarst.org> wrote:
>> Why is this unacceptable? We depend on pyOpenSSL for TLS support, 
>> etc..
>>
>
>   The logistical reasons:
>
>     There is no release of Nevow.

There is. Although it's old. This is a very good reason for not 
releasing twisted.web2. Fortunately, since we have decoupled releases 
now, it doesn't affect anything else.

>     None of the buildslaves have even an SVN trunk checkout installed, 
> nor have any of them been asked to install one.

True.

>     Developers weren't told about this new dependency, so they may not 
> have it installed.

twisted-web ml was. I don't expect developers that don't care about 
twisted web to install Nevow.

> This leads to strangely failing tests, making it difficult to tell if 
> outstanding changes that a developer wants to commit are broken.

I assume you mean "Could not import twisted.web2.test.test_web: 
Traceback: exceptions.ImportError, No module named nevow.". If so,  
"strangely failing tests" is quite a hyperbole.

>   The technical reasons:
>
>     Nevow imports Twisted.  Therefore, Twisted should not import Nevow.
>
>     Twisted is the networking framework and the web server framework.  
> It is lower level than the application server and the templating 
> system.  The latter should depend on the former, if a dependency 
> exists, not the reverse.  _If_ it is desired for Twisted to gain 
> functionality from a Nevow installed, Nevow must be careful to only 
> import certain things from Twisted.
>
>  I would much prefer if Nevow gained functionality from Twisted and 
> not the reverse, but if twisted.web/nevow developers desire things to 
> work as they do currently in twisted.web2, at least the above issues 
> need to be addressed.  This thread should serve to resolve one of them 
> (hopefully Twisted developers are now aware of the potential 
> dependency ;).

Most of Twisted web2 does not/will not depend on Nevow. Generation of 
some server-generated pages does/will. Those tests should just be 
skipped if Nevow isn't installed. That they aren't is an issue, sure.

If you want to have any input on these technical matters I suggest 
participating on the twisted-web mailing list instead of just randomly 
removing code.

Please re-add it.

James




From itamar at itamarst.org  Sun Sep 19 22:02:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 19 Sep 2004 22:02:35 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <20040919163031.29723.1465129106.divmod.quotient.3557@ohm>
References: <20040919163031.29723.1465129106.divmod.quotient.3557@ohm>
Message-ID: <1095645755.4213.1.camel@sheriffpony>

On Sun, 2004-09-19 at 12:30, exarkun at divmod.com wrote:

>     Nevow imports Twisted.  Therefore, Twisted should not import Nevow.

Incorrect. If nevow imports twisted.internet and twisted.web2 imports 
nevow that is fine since it is a different project.

I think having twisted,web2 at least be semi-functional without nevow
(i.e. importable and tests running) would be good enough for your
concerns?




From exarkun at divmod.com  Sun Sep 19 22:35:48 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 20 Sep 2004 02:35:48 GMT
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <C4DA5F5A-0A9A-11D9-92A7-000A95A50FB2@fuhm.net>
Message-ID: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>

On Sun, 19 Sep 2004 20:19:42 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Sep 19, 2004, at 12:30 PM, <exarkun at divmod.com> wrote:
> > twisted/web2 has an unacceptable dependency on nevow that will need to 
> > be
> > discussed or removed before this subpackage can be added.
> 
> First off -- I consider this a rude thing to do, considering I am far 
> from being unreachable. What was the emergency that prompted this 
> removal at midnight on a saturday night? None? Yeah, that's what I 
> thought.

  I'm sorry you took it this way.  I assure you I had nothing in mind but the best interest of Twisted at the time.  I appreciate all the work you've done on the web rewrite.

  As to the "emergency" which prompted the removal: I was trying to commit a patch to twisted.mail; various problems led to this taking several hours.  Several of these problems had nothing to do with web2, but the failing web2 tests were a contributing factor.

  I did not come up with the idea to revert the web2 commit on the spot.  Commits which introduce broken tests have always been fair game for reversion.  Since the web2 tests were _new_, perhaps a different policy might apply.  I'd certainly be willing to entertain arguments to that effect to decide what should be done in the future.  I do not think reverting the commit was unreasonable here, though.

> [snip]
> >
> >     There is no release of Nevow.
> 
> There is. Although it's old. This is a very good reason for not 
> releasing twisted.web2. Fortunately, since we have decoupled releases 
> now, it doesn't affect anything else.

  Perhaps I should have added "that which make this code work."

  Decoupled releases are good, yes.  That solves one problem with checking broken tests (the tests may pass with nevow installed, I still haven't tried, that doesn't mean they aren't broken though).  There are others.

> 
> >     None of the buildslaves have even an SVN trunk checkout installed, 
> > nor have any of them been asked to install one.
> 
> True.

  So before we re-add twisted.web2, let's see what we can do about fixing this situation.

> 
> >     Developers weren't told about this new dependency, so they may not 
> > have it installed.
> 
> twisted-web ml was. I don't expect developers that don't care about 
> twisted web to install Nevow.

  If the tests were skipped when nevow was not installed, this would be reasonable.  Since they're not, developers who don't care about twisted web are forced to care about it.

> 
> > This leads to strangely failing tests, making it difficult to tell if 
> > outstanding changes that a developer wants to commit are broken.
> 
> I assume you mean "Could not import twisted.web2.test.test_web: 
> Traceback: exceptions.ImportError, No module named nevow.". If so,  
> "strangely failing tests" is quite a hyperbole.
> 
> >   The technical reasons:
> >
> >     Nevow imports Twisted.  Therefore, Twisted should not import Nevow.
> >
> >     Twisted is the networking framework and the web server framework.  
> > It is lower level than the application server and the templating 
> > system.  The latter should depend on the former, if a dependency 
> > exists, not the reverse.  _If_ it is desired for Twisted to gain 
> > functionality from a Nevow installed, Nevow must be careful to only 
> > import certain things from Twisted.
> >
> >  I would much prefer if Nevow gained functionality from Twisted and 
> > not the reverse, but if twisted.web/nevow developers desire things to 
> > work as they do currently in twisted.web2, at least the above issues 
> > need to be addressed.  This thread should serve to resolve one of them 
> > (hopefully Twisted developers are now aware of the potential 
> > dependency ;).
> 
> Most of Twisted web2 does not/will not depend on Nevow. Generation of 
> some server-generated pages does/will. Those tests should just be 
> skipped if Nevow isn't installed. That they aren't is an issue, sure.

  Okay, let's get that fixed as well, then I will gladly re-add web2 for you.  If you like, I will also merge the minor fixes that were made to trunk into the web2 branch, so that those are not lost.

> 
> If you want to have any input on these technical matters I suggest 
> participating on the twisted-web mailing list instead of just randomly 
> removing code.

  I am happy with my current level of avoidance of twisted web, discounting this most recent event.  I hope that in the future web2 can be handled in such a way that it is not disruptive to those of us who are not interested in it.

  Jp



From exarkun at divmod.com  Sun Sep 19 22:38:44 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 20 Sep 2004 02:38:44 GMT
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095645755.4213.1.camel@sheriffpony>
Message-ID: <20040920023844.29723.2041791403.divmod.quotient.3802@ohm>

On Sun, 19 Sep 2004 22:02:35 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Sun, 2004-09-19 at 12:30, exarkun at divmod.com wrote:
> 
> >     Nevow imports Twisted.  Therefore, Twisted should not import Nevow.
> 
> Incorrect. If nevow imports twisted.internet and twisted.web2 imports 
> nevow that is fine since it is a different project.
> 
> I think having twisted,web2 at least be semi-functional without nevow
> (i.e. importable and tests running) would be good enough for your
> concerns?
> 

  If twisted.web2 provided a reduced level of functionality in the absence of nevow, that'd be fine.  Good enough for me will be having the web2 tests skipped when its dependencies are not installed.

  Jp



From glyph at divmod.com  Mon Sep 20 00:40:15 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 20 Sep 2004 00:40:15 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
Message-ID: <1095655215.31595.25.camel@kazekage>

On Sun, 2004-09-19 at 22:35, exarkun at divmod.com wrote:

>   I did not come up with the idea to revert the web2 commit on the
> spot.  Commits which introduce broken tests have always been fair game
> for reversion.  Since the web2 tests were _new_, perhaps a different
> policy might apply.  I'd certainly be willing to entertain arguments
> to that effect to decide what should be done in the future.  I do not
> think reverting the commit was unreasonable here, though.

No, I don't think that a different policy should apply - revision
history exists for a reason.

This point is worth emphasizing.  We don't have a very rigorous process
in place for development, but this has always been the case - trunk
should be in a working state at all times.  If you check in code that
breaks the tests, it is at the discretion of any other developer to
decide that your code is toast: it doesn't matter if you are available
on IRC in real time.  You can fix your breakages locally, without
everyone else waiting for you.

> > [snip]
> > >
> > >     There is no release of Nevow.
> > 
> > There is. Although it's old. This is a very good reason for not 
> > releasing twisted.web2. Fortunately, since we have decoupled releases 
> > now, it doesn't affect anything else.

The first release of Twisted 2.0 will not be decoupled.  It is important
that we don't treat the releases as decoupled until we have actually
successfully made at least one decoupled release of each project.  I
don't think this policy will change when project release cycles are
separated though.

Even when trunk is in a completely working state, it is still difficult
to get a release done right now, so I see no reason to accept tests
which do not import, or tests which fail, in trunk.  If you want to add
a dependency on something new, this needs to be discussed before
checking in.

> > Most of Twisted web2 does not/will not depend on Nevow. Generation of 
> > some server-generated pages does/will. Those tests should just be 
> > skipped if Nevow isn't installed. That they aren't is an issue, sure.

Do those server-side pages have simple, non-nevow fallbacks?  If they
can't, then perhaps we should be considering a merged release.

> > If you want to have any input on these technical matters I suggest 
> > participating on the twisted-web mailing list instead of just randomly 
> > removing code.

Personally I believe this is worth discussing generally, because these
are not "web development" issues, although they do touch web code - I
don't subscribe to twisted-web because I'm not interested in the
particulars of HTTP rfc compliance or url argument parsing, but I most
certainly *am* interested in circular dependencies threading through
libraries which are distributed separately.  There is perhaps a larger
discussion here about the relationship between twisted-web and nevow, 
and Twisted and Divmod in general, that needs to happen on divmod-dev.

>   I am happy with my current level of avoidance of twisted web,
> discounting this most recent event.  I hope that in the future web2
> can be handled in such a way that it is not disruptive to those of us
> who are not interested in it.

Maybe I need to be a little more involved than I have been.  I find the
presence of both web and web2 in the same source tree a little upsetting
- this harkens back the web.widgets / web.domtemplate / web.woven API
disaster, which still haunts us.

Let's try to figure out which web server we are supporting and then
actually support it, rather than having 9 different half-assed,
half-supported implementations floating around.




From golux at comcast.net  Mon Sep 20 02:04:19 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Mon, 20 Sep 2004 02:04:19 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095655215.31595.25.camel@kazekage>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
Message-ID: <414E72E3.90009@comcast.net>

Glyph Lefkowitz wrote:
> Let's try to figure out which web server we are supporting and then
> actually support it, rather than having 9 different half-assed,
> half-supported implementations floating around.

<delurk>
+1
</delurk>



From fu at donfu.com  Mon Sep 20 05:51:58 2004
From: fu at donfu.com (donfu)
Date: Mon, 20 Sep 2004 11:51:58 +0200
Subject: [Twisted-Python] problems with trial and adbapi
In-Reply-To: <1095637851.13805.51.camel@oneiros>
References: <5562CB50-0A74-11D9-8055-000393DC7B7C@donfu.com>
	<1095637851.13805.51.camel@oneiros>
Message-ID: <414EA83E.7010400@donfu.com>

> deferredResult should work just fine, I use it all the
> time with db-related tests. 

I knew beforehand that the mistake was to be searched on my side :-)
I got still much to learn in twistedland.. I forgot to actually return the 
deferred from the database insert operation, so trial didn't wait for the 
insert to complete, and the next operation failed.

to sum it up:

   how to shoot yourself in the foot with twisted:
   you return a deferred to shoot yourself in the foot. when the deferred
   finally fires (!) your foot is already rotten and garbage collected...

;)
donfu.



From dp at ulaluma.com  Mon Sep 20 10:07:22 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Mon, 20 Sep 2004 10:07:22 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095655215.31595.25.camel@kazekage>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
Message-ID: <6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>


On Sep 20, 2004, at 12:40 AM, Glyph Lefkowitz wrote:

> Let's try to figure out which web server we are supporting and then
> actually support it, rather than having 9 different half-assed,
> half-supported implementations floating around.

Well, certainly nobody who wrote the original twisted.web code is 
supporting it, but that doesn't mean it's unusable. On the contrary, 
it's very usable, and there are probably lots and lots of applications 
which depend on all sorts of subtle and broken semantics it uses 
(people being far more interested in developing web related things than 
finger related things). I don't see any sane way to perform a complete 
rewrite with better semantics while still living in the old twisted.web 
namespace, especially given the miniscule amount of time most of the 
major developers of this project have to put against it. Developing 
backwards compatibility with the old APIs would be a death march, would 
never quite work anyway, and wouldn't really benefit anyone in 
particular.

We already figured out which web server we ("we" being those developers 
who actually care about the web) are going to be supporting. 
twisted.web2. web should have a deprecation warning in __init__ for a 
release, and then should be terminated with extreme prejudice.

As far as the nevow dependency, I have already suggested to James that 
twisted.web2 should work without it, but he didn't feel it was worth 
the effort. If it is worth the effort to someone else, I suggest they 
do it. My suggestion is simply not to have pages like directory 
listings and traceback renderings, but to have simple string templates 
which are returned in the case of nevow not being installed. This way 
you can use web2 with no dependencies to do a completely custom web 
server, but you're not going to get much out of the box.

dp




From foom at fuhm.net  Mon Sep 20 10:44:10 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 20 Sep 2004 10:44:10 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095655215.31595.25.camel@kazekage>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
Message-ID: <888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>

Since people who care about web apparently don't read the twisted-web 
mailing list, I'm forwarding the relevant [portions of] messages to 
this mailing list, where they'll hopefully get read before any more 
responses are written on this topic.

James

> From: James Y Knight <foom at fuhm.net>
> Date: September 14, 2004 10:19:14 PM EDT
> Subject: [Twisted-web] Twisted.web2
>
> Itamar and I had dinner today and talked about new-web a bit. Here is 
> what was discussed:
> 1) We need to keep compatibility with old Nevow resources
> 2) We ought to keep compatibility with old twisted.web resources
> 3) The new request API isn't the same as old request API.
> 4) new-web depends on Twisted 2.0. Nevow will be depending on new-web, 
> so the next Nevow will depend on twisted 2.0. Thus it cannot be 
> released until Twisted 2.0. According to itamar the goal for next 
> Twisted release is around halloween, although I hadn't seen that 
> mentioned anywhere before. ;)
> 5) Rumors are Anthony is writing a non-sucky HTTP client. (is this 
> true?). J. Simms (slyphon) mentioned something about writing one to me 
> a few weeks ago but I didn't hear anything after. This should be 
> coordinated so the API for the client and server is as similar as 
> possible.
>
>
> Conclusions for action:
> 1) new-web will be called twisted.web2. I will put what I've got into 
> svn trunk as twisted.web2 tomorrow, assuming no objections. This will 
> allow easy backwards compatibility at the cost of a 2.
> 2) Nevow's resource traversal API must be moved to twisted.web2. This 
> will probably have to be done by branching Nevow to remove those bits. 
> Therefore, the resource traversal part of nevow should be 
> mostly-frozen while this happens.
> 3) For distribution: twisted.web2 depends on Nevow (for static 
> directory listings, and error pages), so will be distributed with it. 
> Nevow recommends Twisted but does not require it for simple cases 
> (e.g. flattening to a string from a CGI script), so there can also be 
> a limited-functionality distribution of standalone Nevow.
>
> Current status of new-web: the low-level HTTP protocol and header 
> parsing is in passable shape. The high-level Resource API needs to be 
> copied over from Nevow (again), because Nevow's API changed. Backwards 
> compatibility adapters for the t.w.Request/nevow.inevow.IRequest and 
> (possibly) nevow.inevow.IResource should be added.
>
> I am not able to do everything myself. I will need help, especially 
> from dp would be helpful for the Nevow transition, to make this 
> happen. If we do it right, twisted.web2 might even be ready in time 
> for the release of Twisted 2.0.
>
> James



> From: William Dode <wilk-ml at flibuste.net>
> Date: September 15, 2004 12:26:08 PM EDT
> Subject: Re: [Twisted-web] Twisted.web2
>
> James Y Knight <foom at fuhm.net> writes:
>> 3) For distribution: twisted.web2 depends on Nevow (for static
>> directory listings, and error pages), so will be distributed with
>> it. Nevow recommends Twisted but does not require it for simple cases
>> (e.g. flattening to a string from a CGI script), so there can also be
>> a limited-functionality distribution of standalone Nevow.
>
> It could be great if the server could not depend on any framework (i
> mean nevow).



> From: James Y Knight <foom at fuhm.net>
> Date: September 15, 2004 1:49:26 PM EDT
> Subject: Re: [Twisted-web] Twisted.web2
>
> On Sep 15, 2004, at 12:26 PM, William Dode wrote:
>> It could be great if the server could not depend on any framework (i
>> mean nevow).
>
> It will use nevow to render the pages the webserver generates, such as 
> errors and directory listings. This does not mean you need to use 
> nevow for your own pages. You can use whatever templating language you 
> want (or none at all) to render your pages, assuming you can hook it 
> up to twisted web somehow.
>
> If you want to make a custom hacked-up copy of twisted.web without 
> Nevow included, it will work, other than default server-generated 
> pages. However, I don't see any reason to not include it by default.



> From: Donovan Preston <dp at ulaluma.com>
> Date: September 15, 2004 2:08:35 PM EDT
> Subject: Re: [Twisted-web] Twisted.web2
>
> On Sep 15, 2004, at 12:26 PM, William Dode wrote:
>> It could be great if the server could not depend on any framework (i
>> mean nevow).
>
> The server would depend on Nevow in order to generate the HTML for 
> various automatically generated pages, such as directory listings. I 
> suggested to James that having a standalone twisted.web server that 
> didn't depend on Nevow and wasn't capable of generating any pages 
> itself would be possible, but James didn't think it was worth the 
> effort.



> From: James Y Knight <foom at fuhm.net>
> Date: September 15, 2004 7:00:08 PM EDT
> Subject: [Twisted-web] Partial freeze of nevow coming up.
>
> Here's the plan. The following modules will be removed from Nevow, and 
> merged/copied/whatever into twisted.web2:
> appserver.py
> static.py
> half of context.py
> dirlist.py
> failure.py
> guard.py
> static.py
> vhost.py
> url.py, perhaps.
>
> I want to create a nevow web2 integration branch, and while they are 
> being removed from Nevow, and merged back into web2, I don't want the 
> Nevow copy radically changing cause that just creates extra work.
>
> So if there's any changes you want to make to any of those, please do 
> it soon. The rest of Nevow can continue changing during the transition 
> without problem.
>
> Sidenote: Divmod needs to approve the relicensing of the code that 
> moves into web2 from nevow under MIT license. Or else move all of 
> Nevow under MIT license.



> From: Donovan Preston <dp at ulaluma.com>
> Date: September 15, 2004 7:22:23 PM EDT
> Subject: Re: [Twisted-web] Partial freeze of nevow coming up.
>
>> Sidenote: Divmod needs to approve the relicensing of the code that 
>> moves into web2 from nevow under MIT license. Or else move all of 
>> Nevow under MIT license.
>
> Moving Nevow to MIT license has already been approved. There is an 
> issue in our RT tracker (which unfortunately nobody else can see) for 
> switching to MIT license, but nobody has gotten time to do it. Anyone 
> with commit access who has some spare time, feel free...




From glyph at divmod.com  Mon Sep 20 10:49:40 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 20 Sep 2004 10:49:40 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
Message-ID: <1095691780.31595.82.camel@kazekage>

On Mon, 2004-09-20 at 10:07, Donovan Preston wrote:
> On Sep 20, 2004, at 12:40 AM, Glyph Lefkowitz wrote:
> 
> > Let's try to figure out which web server we are supporting and then
> > actually support it, rather than having 9 different half-assed,
> > half-supported implementations floating around.
> 
> Well, certainly nobody who wrote the original twisted.web code is 
> supporting it, but that doesn't mean it's unusable. On the contrary, 
> it's very usable, and there are probably lots and lots of applications 
> which depend on all sorts of subtle and broken semantics it uses 
> (people being far more interested in developing web related things than 
> finger related things).

The twisted 1.3 release will available for download for the forseeable
future, for those who need it.  I don't believe we should release stuff
with subtle, broken semantics in twisted 2.0 - the release number
implies that we are changing a few things, so this would be a good
opportunity to abandon support for the old code.

> I don't see any sane way to perform a complete 
> rewrite with better semantics while still living in the old twisted.web 
> namespace, especially given the miniscule amount of time most of the 
> major developers of this project have to put against it. Developing 
> backwards compatibility with the old APIs would be a death march, would 
> never quite work anyway, and wouldn't really benefit anyone in 
> particular.

If there is to be no backwards compatibility, why bother with the
separate namespace?  Do we want to do this with other modules in the
future, e.g. twisted.spread2?  Our last discussion of this was
inconclusive because I don't think we foresaw the web rewrite being so
radically different.  I guess we have to drag that dead horse out here
to beat it one more time ;).

Even if the namespace changes, there should only be one of these in svn
at a time.  If further development on twisted web 1 is going to continue
it should be in a maintenance branch, and then we need to discuss how
we're going to manage maintenance releases.

> We already figured out which web server we ("we" being those developers 
> who actually care about the web) are going to be supporting. 
> twisted.web2. web should have a deprecation warning in __init__ for a 
> release, and then should be terminated with extreme prejudice.

I would terminate before providing a deprecation warning.  If you want
to provide a backwards-compatibility release for using web1 with the new
reactor core, that's fine, but I don't see any reason to include web1
with the new download.

> As far as the nevow dependency, [...] you're not going to get much out of the box.

It really sounds like nevow and web2 ought to be merged.  Traffic on the
twisted-web list suggests that anyone who is using one is using the
other, at least in some capacity.  The marketing aspect of this
certainly requires some discussion, but it seems that one's utility is
greatly reduced without the other, and the dependency is circular.  For
specialized cases, such as using nevow for CGI scripts, there is no
problem with having the other code around as long as it can avoid being
imported.




From foom at fuhm.net  Mon Sep 20 11:00:35 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 20 Sep 2004 11:00:35 -0400
Subject: [Twisted-Python] On the lighter side...
Message-ID: <D35F80F1-0B15-11D9-BF25-000A95A50FB2@fuhm.net>

Some publicity:

 From LWN.net <http://lwn.net/Articles/102742/>:
>  ZDNet Australia covers an MPAA screwup 
> <http://news.zdnet.co.uk/business/0,39020645,39167160,00.htm>. "Linux 
> Australia president Pia Smith told Builder AU the MPAA had issued 
> Linux Australia with a notice of claimed infringement demanding the 
> group cease providing access to two copyrighted movies -- one called 
> 'Grind' and the other 'Twisted' -- and ordering it to 'take 
> appropriate action against the account holder'. However, the files in 
> question had nothing to do with those movies. The file entitled 
> Twisted is a download of the popular framework written in Python and 
> Grind refers to a download of Valgrind, a tool for developers to 
> locate memory management." Linux Australia looks set to have some fun 
> with this one.

The ZDNet article even links to the twistedmatrix website. Woo. :)

James




From itamar at itamarst.org  Mon Sep 20 11:08:46 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 20 Sep 2004 11:08:46 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095691780.31595.82.camel@kazekage>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
Message-ID: <1095692925.4581.3.camel@sheriffpony>

On Mon, 2004-09-20 at 10:49, Glyph Lefkowitz wrote:

> > We already figured out which web server we ("we" being those developers 
> > who actually care about the web) are going to be supporting. 
> > twisted.web2. web should have a deprecation warning in __init__ for a 
> > release, and then should be terminated with extreme prejudice.
> 
> I would terminate before providing a deprecation warning.  If you want
> to provide a backwards-compatibility release for using web1 with the new
> reactor core, that's fine, but I don't see any reason to include web1
> with the new download.

twisted.web will not be included. There will be two downloads ("Twisted
Web 1 - Deprecated", "Twisted Web 2"). Most people will not download the
first ever. The first will likely not have new releases unless we fine
security issues. Moving it to branch and only doing releases from there
may be fine (if our release infrastructure is up to it!) but I still
think newweb should be twisted.web2.


Summary:

1. twisted.web2 remains web2.
2. Move twisted.web (and any other security bugfix only packages, I
guess) to a "deprecated" branch.

Yes? No?

If yes, that just leaves the nevow/twisted.web2 merger question, which
should probably be done on twisted-web mailing list.





From radeex at gmail.com  Mon Sep 20 11:35:24 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 20 Sep 2004 11:35:24 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095692925.4581.3.camel@sheriffpony>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
Message-ID: <60ed19d404092008353b3add5b@mail.gmail.com>

On Mon, 20 Sep 2004 11:08:46 -0400, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Mon, 2004-09-20 at 10:49, Glyph Lefkowitz wrote:
> 1. twisted.web2 remains web2.
> 2. Move twisted.web (and any other security bugfix only packages, I
> guess) to a "deprecated" branch.
> 
> Yes? No?

Don't bother moving twisted.web to a branch; the repository layout of
trunk is (will be) decoupled from how releases are done, and since
both will potentially be changed (e.g. for security) then I don't
think it should be in a separate branch.

And +1 on keeping the name twisted.web2.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From corydodt at twistedmatrix.com  Mon Sep 20 11:46:57 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon, 20 Sep 2004 08:46:57 -0700
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095692925.4581.3.camel@sheriffpony>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>	<1095655215.31595.25.camel@kazekage>	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
Message-ID: <414EFB71.6070701@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Urgh.  I usually avoid getting involved in these discussions--not because I
don't want to participate but because the ML style does not work very well
with my brain.  There's all these different parts of this proposal and some
are being rejected by some people and modified by other people and it's very
hard for me to figure out what the whole picture is.

In this case, I have to say something because this is pretty important to the
product I'm developing.  I just spent 6 weeks doing a conversion to Nevow
because Woven isn't being supported any more.  I do *not* want to do the same
thing with Web.  I've made modifications to Twisted trunk that I was hoping to
get out of 2.0 for our official release, but if there's not going to be a web1
any more, that puts this project in jeopardy again because it means I may not
be able to use 2.0.

So here's what I have to say: please *summarize*.  I need to get a sense of:

1) Timeline.. when are changes being implemented, in what order, tied to what
release etc.
2) How is the svn repo going to change?
3) What is going to be put into what release by whom?
4) What's the impact if you're currently using web1 and you want to be using
web2 because 1 isn't supported any more?
5) What's the impact if you stay with web1?

If you haven't decided yet, go ahead and decide, but then summarize
afterwards. :-)

Thanks..

C



Itamar Shtull-Trauring wrote:
| On Mon, 2004-09-20 at 10:49, Glyph Lefkowitz wrote:
|
|
|>>We already figured out which web server we ("we" being those developers
|>>who actually care about the web) are going to be supporting.
|>>twisted.web2. web should have a deprecation warning in __init__ for a
|>>release, and then should be terminated with extreme prejudice.
|>
|>I would terminate before providing a deprecation warning.  If you want
|>to provide a backwards-compatibility release for using web1 with the new
|>reactor core, that's fine, but I don't see any reason to include web1
|>with the new download.
|
|
| twisted.web will not be included. There will be two downloads ("Twisted
| Web 1 - Deprecated", "Twisted Web 2"). Most people will not download the
| first ever. The first will likely not have new releases unless we fine
| security issues. Moving it to branch and only doing releases from there
| may be fine (if our release infrastructure is up to it!) but I still
| think newweb should be twisted.web2.
|
|
| Summary:
|
| 1. twisted.web2 remains web2.
| 2. Move twisted.web (and any other security bugfix only packages, I
| guess) to a "deprecated" branch.
|
| Yes? No?
|
| If yes, that just leaves the nevow/twisted.web2 merger question, which
| should probably be done on twisted-web mailing list.
|
|
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBTvtx3A5SrXAiHQcRApINAKCggxacS+kFLmAszBQmrQeuByJHBgCgnyov
jBEWFaH7dZ6TZBbtljvVZTg=
=tLpe
-----END PGP SIGNATURE-----



From glyph at divmod.com  Mon Sep 20 11:59:27 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 20 Sep 2004 11:59:27 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095692925.4581.3.camel@sheriffpony>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
Message-ID: <1095695967.31595.109.camel@kazekage>

On Mon, 2004-09-20 at 11:08, Itamar Shtull-Trauring wrote:

> twisted.web will not be included. There will be two downloads ("Twisted
> Web 1 - Deprecated", "Twisted Web 2"). Most people will not download the
> first ever. The first will likely not have new releases unless we fine
> security issues. Moving it to branch and only doing releases from there
> may be fine (if our release infrastructure is up to it!) but I still
> think newweb should be twisted.web2.

OK.  I am going to re-propose my way of versioning interfaces since this
is a subset of it, but in the interests of not holding this up, this is
fine :).

> Summary:
> 
> 1. twisted.web2 remains web2.
+1

> 2. Move twisted.web (and any other security bugfix only packages, I
> guess) to a "deprecated" branch.

Thinking about this a little more: +0

My main concern was that there was going to be a single download.  Upon
further reflection, we are probably going to need some good policy for
how to do this - branching from all of trunk is bad since you don't want
to capture other buggy code along with it...

I'd like to see some way that we can clearly mark deprecated modules in
trunk though, for new developers.

> Yes? No?

Sounds fine to me, as long as no other package maintainers have a
problem with tacking on a version number to the end of their package
names when they make large API changes.  I forsee we are going to have a
lot of those :).

> If yes, that just leaves the nevow/twisted.web2 merger question, which
> should probably be done on twisted-web mailing list.

I can get divmod to provide a conference line if this would benefit from
a real-time discussion, which I think it might.




From glyph at divmod.com  Mon Sep 20 11:59:54 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 20 Sep 2004 11:59:54 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <60ed19d404092008353b3add5b@mail.gmail.com>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
	<60ed19d404092008353b3add5b@mail.gmail.com>
Message-ID: <1095695994.31595.111.camel@kazekage>

On Mon, 2004-09-20 at 11:35, Christopher Armstrong wrote:

> Don't bother moving twisted.web to a branch; the repository layout of
> trunk is (will be) decoupled from how releases are done, and since
> both will potentially be changed (e.g. for security) then I don't
> think it should be in a separate branch.
> 
> And +1 on keeping the name twisted.web2.

The release manager has spoken.  I guess it's out of my hands now ;)




From mary-twisted at puzzling.org  Mon Sep 20 12:35:21 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 20 Sep 2004 17:35:21 +0100
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <20040920163521.GB4826@fuchsia.puzzling.org>

On Mon, Sep 20, 2004, James Y Knight wrote:
> Since people who care about web apparently don't read the twisted-web 
> mailing list, I'm forwarding the relevant [portions of] messages to 
> this mailing list, where they'll hopefully get read before any more 
> responses are written on this topic.

Conversely, I expect there are a number of people who haven't seen this
thread due to being interested in all that web stuff, but not otherwise
interested in Twisted enough to subscribe to this.

-Mary



From anthony at interlink.com.au  Mon Sep 20 12:37:10 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Tue, 21 Sep 2004 02:37:10 +1000
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>	<1095655215.31595.25.camel@kazekage>
	<888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <414F0736.5000607@interlink.com.au>

James Y Knight wrote:
>> 5) Rumors are Anthony is writing a non-sucky HTTP client. (is this 
>> true?). J. Simms (slyphon) mentioned something about writing one to me 
>> a few weeks ago but I didn't hear anything after. This should be 
>> coordinated so the API for the client and server is as similar as 
>> possible.

I have something that Works For Me. It makes sense to me (from an API
point of view), and, more importantly for my current use-cases, works
with urllib's Request objects, which means you can drop ClientForm on
top of it directly, and it Just Works. This is good. It also works on
top of a UDP transport, which the current http client does not. While
HTTP-over-UDP is an Abomination In The Eyes of Great Cthulu, it's also
used in some sick and warped protocols, which I need to support.

Anthony



From anthony at interlink.com.au  Mon Sep 20 12:46:58 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Tue, 21 Sep 2004 02:46:58 +1000
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <414F0736.5000607@interlink.com.au>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>	<1095655215.31595.25.camel@kazekage>	<888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>
	<414F0736.5000607@interlink.com.au>
Message-ID: <414F0982.1070508@interlink.com.au>

A snapshot of the stuff I have working is at:

http://www.interlink.com.au/anthony/tmp/nonsuckhttp.py

I'm not sure if this is the absolute latest version - will check
tomorrow morning after sleeps.

Anthony



From foom at fuhm.net  Mon Sep 20 13:16:39 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 20 Sep 2004 13:16:39 -0400
Subject: [Twisted-web] Re: [Twisted-Python] Fwd: [Twisted-commits] r11721
	- revert r11685
In-Reply-To: <414EFB71.6070701@twistedmatrix.com>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>	<1095655215.31595.25.camel@kazekage>	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
	<414EFB71.6070701@twistedmatrix.com>
Message-ID: <D5EE735E-0B28-11D9-BF25-000A95A50FB2@fuhm.net>

I guess I'll keep the crossposting, since this may be of interest to 
those who do not read the twisted-web list.

On Sep 20, 2004, at 11:46 AM, Cory Dodt wrote:
> Urgh.  I usually avoid getting involved in these discussions--not 
> because I
> don't want to participate but because the ML style does not work very 
> well
> with my brain.  There's all these different parts of this proposal and 
> some
> are being rejected by some people and modified by other people and 
> it's very
> hard for me to figure out what the whole picture is.
>
> In this case, I have to say something because this is pretty important 
> to the
> product I'm developing.  I just spent 6 weeks doing a conversion to 
> Nevow
> because Woven isn't being supported any more.  I do *not* want to do 
> the same
> thing with Web.  I've made modifications to Twisted trunk that I was 
> hoping to
> get out of 2.0 for our official release, but if there's not going to 
> be a web1
> any more, that puts this project in jeopardy again because it means I 
> may not
> be able to use 2.0.

I do not want that to happen. Note foremost what web2 is. 1) A rewrite 
of the Request/low level HTTP layer. 2) *Migrating* the Nevow resource 
model back into the core webserver where it belongs.

Where there are conflicting statements by others, I'd go with what I 
say since so far I seem to be in charge of web2. ;)

In quick?summary: since you've already migrated to Nevow, I expect to 
be able to provide easy compatibility with your app so you can use new 
releases of Nevow that depend on web2 with little work. If you 
currently have web1 resources working with Nevow, they will also work 
with Nevow/web2.

> So here's what I have to say: please *summarize*.  I need to get a 
> sense of:
>
> 1) Timeline.. when are changes being implemented, in what order, tied 
> to what
> release etc.

Web2 will be done when it is done, hopefully by the time Twisted 2.0 
releases, but if not, then not. In parallel with development of web2, a 
branch of the Nevow repository will be developed that uses t.web2. That 
should be released at the same time. Web1 will stay around for the 
indefinite future. SVN trunk of Nevow will remain dependent only upon 
web1 until such a time as web2&nevow-which-uses-it work sufficiently 
well at which point that branch will merge with the trunk.

> 2) How is the svn repo going to change?

Right now? t.web2 gets added to Twisted. Nevow gets a branch.

> 3) What is going to be put into what release by whom?

I don't know what you're asking.

> 4) What's the impact if you're currently using web1 and you want to be 
> using
> web2 because 1 isn't supported any more?

The migration from web1 to web2 will be about the same difficulty as 
the migration from web1 to Nevow.

However, you are currently not using (most of) web1, so that is the 
wrong question to ask. You are using Nevow's appserver, which is 
basically the same as what web2's appserver will be.

Web2 will be mostly compatible with current Nevow. I say mostly only 
because it may not be feasible to provide absolutely complete 
compatibility, but I'd like to provide compatibility for all the things 
that normal apps use (Nevow Resource API and app-facing parts of the 
Request object).

Web2 will be somewhat compatible with web1 Resources. "Somewhat" here 
means basically the same thing it already means with Nevow (since the 
code will be essentially the same code).

If you're using the Nevow "appserver" now, ideally you will not have to 
change your app for it to work with web2, although you may want to 
change some things to avoid deprecation warnings. Not everything always 
turns out ideally, so I can't promise that, but it is the goal.

> 5) What's the impact if you stay with web1?

You cannot use new releases of Nevow after <whenever web2 is done and 
the Nevow branch is merged>. Web1 will continue to have the same amount 
of maintenance as it does now (namely: almost none)

James



From itamar at itamarst.org  Mon Sep 20 14:43:49 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 20 Sep 2004 14:43:49 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095695994.31595.111.camel@kazekage>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
	<60ed19d404092008353b3add5b@mail.gmail.com>
	<1095695994.31595.111.camel@kazekage>
Message-ID: <1095705828.4577.12.camel@sheriffpony>

OK, final summary:

1. twisted.web2 stays as named and in trunk.
2. twisted.web stays as named and in trunk.
3. Both get releases post-2.0 split up (but after that twisted.web only
gets security fix releases).

Nevow is separate issue, to be discussed on twisted-web, but note that
stuff in twisted trunk really ought to have passing tests.





From glyph at divmod.com  Mon Sep 20 15:30:34 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 20 Sep 2004 15:30:34 -0400
Subject: [Twisted-web] Re: [Twisted-Python] Fwd: [Twisted-commits]
	r11721 - revert r11685
In-Reply-To: <D5EE735E-0B28-11D9-BF25-000A95A50FB2@fuhm.net>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
	<414EFB71.6070701@twistedmatrix.com>
	<D5EE735E-0B28-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <1095708634.31595.116.camel@kazekage>

On Mon, 2004-09-20 at 13:16, James Y Knight wrote:
> I guess I'll keep the crossposting, since this may be of interest to 
> those who do not read the twisted-web list.

Thanks james, that was a great summary of just about every web issue
that I am concerned with.  And thanks for the questions, MFen...

Unless anybody else objects I think this thread should be the last of
the crossposting :)




From mailinglist at ltsai.com  Mon Sep 20 23:14:38 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 21 Sep 2004 11:14:38 +0800
Subject: [Twisted-Python] log rotation
Message-ID: <cio6au$4pb$1@sea.gmane.org>

Hi

Has anyone used logrotate or simple use a cron job to send a SIGUSR1 to 
the process?

If I understand the twistd man page properly, the log file will be 
rotated on SIGUSR1, therefore I'm wont be able to use logrotate to do 
the rotation?

Thanks
-Liming




From exarkun at divmod.com  Tue Sep 21 09:21:09 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 21 Sep 2004 13:21:09 GMT
Subject: [Twisted-Python] log rotation
In-Reply-To: <cio6au$4pb$1@sea.gmane.org>
Message-ID: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>

On Tue, 21 Sep 2004 11:14:38 +0800, Tsai Li Ming <mailinglist at ltsai.com> wrote:
>Hi
> 
> Has anyone used logrotate or simple use a cron job to send a SIGUSR1 to 
> the process?
> 
> If I understand the twistd man page properly, the log file will be 
> rotated on SIGUSR1, therefore I'm wont be able to use logrotate to do 
> the rotation?

  logrotate should rotate twistd logfiles just fine.  It shuts down a process, moves its log files around, then restarts it.

  Why you'd _want_ to rotate them this way, instead of just letting them automatically be rotated by twistd (which they will be), I dunno.  Is there some feature logrotate has that twistd lacks that you're interested in?

  Jp



From claw at kanga.nu  Tue Sep 21 09:40:56 2004
From: claw at kanga.nu (J C Lawrence)
Date: Tue, 21 Sep 2004 09:40:56 -0400
Subject: [Twisted-Python] log rotation 
In-Reply-To: Message from <exarkun@divmod.com> of "Tue,
	21 Sep 2004 13:21:09 GMT."
	<20040921132109.29723.1440903240.divmod.quotient.4625@ohm> 
References: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm> 
Message-ID: <30926.1095774056@kanga.nu>

On Tue, 21 Sep 2004 13:21:09 GMT 
exarkun  <exarkun at divmod.com> wrote:

> Why you'd _want_ to rotate them this way, instead of just letting them
> automatically be rotated by twistd (which they will be), I dunno.  Is
> there some feature logrotate has that twistd lacks that you're
> interested in?

In my case its the simple fact that logrotate is responsible for all log
rotation for every system on the network.  Making twisted-based apps a
special case which I then have to tell everybody about, remind them
repeatedly etc, is not particularly welcome.

-- 
J C Lawrence
---------(*)                Satan, oscillate my metallic sonatas.
claw at kanga.nu               He lived as a devil, eh?
http://www.kanga.nu/~claw/  Evil is a name of a foeman, as I live.



From mailinglist at ltsai.com  Tue Sep 21 10:29:08 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 21 Sep 2004 22:29:08 +0800
Subject: [Twisted-Python] Re: log rotation
In-Reply-To: <30926.1095774056@kanga.nu>
References: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
	<30926.1095774056@kanga.nu>
Message-ID: <cipdt7$2q4$1@sea.gmane.org>

J C Lawrence wrote:
> On Tue, 21 Sep 2004 13:21:09 GMT 
> exarkun  <exarkun at divmod.com> wrote:
> 
> 
>>Why you'd _want_ to rotate them this way, instead of just letting them
>>automatically be rotated by twistd (which they will be), I dunno.  Is
>>there some feature logrotate has that twistd lacks that you're
>>interested in?
> 
> 
> In my case its the simple fact that logrotate is responsible for all log
> rotation for every system on the network.  Making twisted-based apps a
> special case which I then have to tell everybody about, remind them
> repeatedly etc, is not particularly welcome.
> 

 >
Same for me too. However, how do I do that in logrotate? I notice that 
if I send a SIGUSR1 to the twisted process, it will rotate the log file 
itself.


/var/log/server.log {
     postrotate
         /bin/kill -SIGUSR1 `cat /var/run/server.pid 2>/dev/null` 2> 
/dev/null || true
     endscript
}

-Liming





From mailinglist at ltsai.com  Tue Sep 21 10:42:47 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 21 Sep 2004 22:42:47 +0800
Subject: [Twisted-Python] Re: log rotation
In-Reply-To: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
References: <cio6au$4pb$1@sea.gmane.org>
	<20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
Message-ID: <cipems$5po$1@sea.gmane.org>

exarkun at divmod.com wrote:
> On Tue, 21 Sep 2004 11:14:38 +0800, Tsai Li Ming <mailinglist at ltsai.com> wrote:
> 
>>Hi
>>
>>Has anyone used logrotate or simple use a cron job to send a SIGUSR1 to 
>>the process?
>>
>>If I understand the twistd man page properly, the log file will be 
>>rotated on SIGUSR1, therefore I'm wont be able to use logrotate to do 
>>the rotation?
> 
> 
>   logrotate should rotate twistd logfiles just fine.  It shuts down a process, moves its log files around, then restarts it.
> 
>   Why you'd _want_ to rotate them this way, instead of just letting them automatically be rotated by twistd (which they will be), I dunno.  Is there some feature logrotate has that twistd lacks that you're interested in?
> 
>   Jp


When you say twisted will automatically rotate the log files, how does 
it do that? Will it automatically rotate the log files periodically?

-Liming




From projects at reedflute.com  Tue Sep 21 12:00:27 2004
From: projects at reedflute.com (Eugene Coetzee)
Date: Tue, 21 Sep 2004 18:00:27 +0200
Subject: [Twisted-Python] TCP wrapper support for twisted servers -
	solution !
In-Reply-To: <414D47B1.8090300@reedflute.com>
References: <414D47B1.8090300@reedflute.com>
Message-ID: <4150501B.3090502@reedflute.com>

Eugene Coetzee wrote:

> Hi everyone,
>
> I was wondering if anybody knows about a Python wrapper  for  libwrap. 
> I'm aware of libwrap function libraries  for PHP and libwrap-ruby for 
> Ruby - but could not google anything similar for Python.
>
> I want to control access to my twisted servers using hosts.allow/deny. 
> I have read someting about "inetd setup" options planned for tap2deb 
> (couldn't get any docs regarding inetd/tcp -wrapper support though).
>
> Alternatively, is there anything included in twisted that can be used 
> get tcp wrapper support without having to run from inetd.

OK - I had the ich and I just *had to* scratch it. I have built a Python 
wrapper (I'll call it PyTCPWrapper) to libwrap which is working very 
much like Perl's 
http://cpan.uwinnipeg.ca/htdocs/Authen-Libwrap/README.html. I will 
release it on sourceforge under the GPL pretty soon.

Now - I want to use PyTCPWrapper inside twisted.protocol.http.Request to 
control access to my http server possibly passing the result of 
http.Request.getHost() to PyTCPWrapper.hosts_ctl().

*but* from http.py :

def getHost(self):
        """Get my originally requesting transport's host.

        Don't rely on the 'transport' attribute, since Request objects 
may be
        copied remotely.  For information on this method's return value, see
        twisted.internet.tcp.Port.
        """
        return self.host

If I "should not rely on transport" (I imagine this refers to IP 
spoofing) - what is the most reliable way of getting  the client's IP 
address from inside an instance of http.Request ? I would also like to 
drop the illegal connection as quickly as possible - much sooner than 
http.Request.process() happens.

Any advise thoughts ideas would be appreciated.

regards,

Eugene

Web                 -> www.reedflute.com
=============================================== 





From projects at reedflute.com  Tue Sep 21 12:04:41 2004
From: projects at reedflute.com (Eugene Coetzee)
Date: Tue, 21 Sep 2004 18:04:41 +0200
Subject: [Twisted-Python] TCP wrapper support for twisted servers -
	solution (correction LGPL)
In-Reply-To: <4150501B.3090502@reedflute.com>
References: <414D47B1.8090300@reedflute.com> <4150501B.3090502@reedflute.com>
Message-ID: <41505119.2030104@reedflute.com>

Eugene Coetzee wrote:

>
> OK - I had the ich and I just *had to* scratch it. I have built a 
> Python wrapper (I'll call it PyTCPWrapper) to libwrap which is working 
> very much like Perl's 
> http://cpan.uwinnipeg.ca/htdocs/Authen-Libwrap/README.html. I will 
> release it on sourceforge under the GPL pretty soon.
>
Correction - I will release it under LGPL.


Web                 -> www.reedflute.com
=============================================== 





From itamar at itamarst.org  Tue Sep 21 12:44:08 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 21 Sep 2004 12:44:08 -0400
Subject: [Twisted-Python] TCP wrapper support for twisted servers -
	solution !
In-Reply-To: <4150501B.3090502@reedflute.com>
References: <414D47B1.8090300@reedflute.com> <4150501B.3090502@reedflute.com>
Message-ID: <1095785048.4582.19.camel@sheriffpony>

On Tue, 2004-09-21 at 12:00, Eugene Coetzee wrote:

> If I "should not rely on transport" (I imagine this refers to IP 
> spoofing) - what is the most reliable way of getting  the client's IP 
> address from inside an instance of http.Request ? I would also like to 
> drop the illegal connection as quickly as possible - much sooner than 
> http.Request.process() happens.

That's how you do it. The comment is basically telling you that stuff
like TCP Wrappers is just a stopgap and not a real security measure :)






From exarkun at divmod.com  Tue Sep 21 13:11:02 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 21 Sep 2004 17:11:02 GMT
Subject: [Twisted-Python] TCP wrapper support for twisted servers -
	solution !
In-Reply-To: <4150501B.3090502@reedflute.com>
Message-ID: <20040921171102.29723.1008032729.divmod.quotient.4717@ohm>

On Tue, 21 Sep 2004 18:00:27 +0200, Eugene Coetzee <projects at reedflute.com> wrote:
> [snip]
> If I "should not rely on transport" (I imagine this refers to IP 
> spoofing) - what is the most reliable way of getting  the client's IP 
> address from inside an instance of http.Request ? I would also like to 
> drop the illegal connection as quickly as possible - much sooner than 
> http.Request.process() happens.

  Indeed you do want to do it much sooner - I don't think you want to be modifying HTTP code to use TCP wrappers.

  I think you want to modify the protocol factory (Site, in the case of HTTP) to use TCP wrappers.  buildProtocol takes an address argument.  If the factory returns None, the connection is dropped before any bytes are read from it.

  You should be able to implement this as a factory wrapper, too, so that it is useable with any existing factory.  See twisted.protocols.policies for examples of how to do this.

  Jp



From slyphon at twistedmatrix.com  Tue Sep 21 14:06:23 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Tue, 21 Sep 2004 14:06:23 -0400
Subject: [Twisted-Python] Re: log rotation
In-Reply-To: <cipems$5po$1@sea.gmane.org>
References: <cio6au$4pb$1@sea.gmane.org>	<20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
	<cipems$5po$1@sea.gmane.org>
Message-ID: <41506D9F.8080404@twistedmatrix.com>

Tsai Li Ming wrote:

> exarkun at divmod.com wrote:
>
>> On Tue, 21 Sep 2004 11:14:38 +0800, Tsai Li Ming 
>> <mailinglist at ltsai.com> wrote:
>>
>>> Hi
>>>
>>> Has anyone used logrotate or simple use a cron job to send a SIGUSR1 
>>> to the process?
>>>
>>> If I understand the twistd man page properly, the log file will be 
>>> rotated on SIGUSR1, therefore I'm wont be able to use logrotate to 
>>> do the rotation?
>>
>>
>>
>>   logrotate should rotate twistd logfiles just fine.  It shuts down a 
>> process, moves its log files around, then restarts it.
>>
>>   Why you'd _want_ to rotate them this way, instead of just letting 
>> them automatically be rotated by twistd (which they will be), I 
>> dunno.  Is there some feature logrotate has that twistd lacks that 
>> you're interested in?
>>
>>   Jp
>
>
>
> When you say twisted will automatically rotate the log files, how does 
> it do that? Will it automatically rotate the log files periodically?
>
> -Liming
>
>
yes, in twisted.python.logfile.LogFile there is an option to __init__ 
'rotateLength' that is by default 1000000. So at 100000 bytes, it will 
rotate the file.



From projects at reedflute.com  Tue Sep 21 14:18:45 2004
From: projects at reedflute.com (Eugene Coetzee)
Date: Tue, 21 Sep 2004 20:18:45 +0200
Subject: [Twisted-Python] TCP wrapper support for twisted servers
	-	solution !
In-Reply-To: <20040921171102.29723.1008032729.divmod.quotient.4717@ohm>
References: <20040921171102.29723.1008032729.divmod.quotient.4717@ohm>
Message-ID: <41507085.8070901@reedflute.com>

exarkun at divmod.com wrote:

>buildProtocol takes an address argument.  If the factory returns None, the connection is dropped before any bytes are read from it.
>  
>
yep. that's exactly what I'm going to do. Thanks for the advise.

Web                 -> www.reedflute.com
=============================================== 





From naoya at matsulab.is.titech.ac.jp  Wed Sep 22 00:10:38 2004
From: naoya at matsulab.is.titech.ac.jp (Naoya Maruyama)
Date: Tue, 21 Sep 2004 23:10:38 -0500
Subject: [Twisted-Python] question on pb-client
Message-ID: <4150FB3E.3040004@matsulab.is.titech.ac.jp>

Hello,

I'm new to Twisted and want to use the Perspective Broker. I read the
howto pages of the web site, but I coundn't find answer of my question.

I'm testing the echo server/clinet (pbsimpleserver.py and
pbsimpleclient.py). I can successfully run them, but if I change the
client to the following, the result seems strange.

---
from twisted.spread import pb
from twisted.internet import reactor
from twisted.python import util

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)

def test():
    d = factory.getRootObject()
    d.addCallback(lambda object: object.callRemote("echo", "hello network"))
    d.addCallback(lambda echo: 'server echoed: '+echo)
    d.addErrback(lambda reason: 'error: '+str(reason.value))
    d.addCallback(util.println)
    d.addCallback(lambda _: reactor.stop())
    reactor.run()
    return

# calls test twice
test()
test()
---

If I execute this client code, the client doesn't finish running. And
the server prints out "echoing: hello network" only once. So, it seems
that the client failed to get the root object, or to call the remote
method. What's the problem? I can't get the root object multiple times?

Thanks,

naoya




From uwe at oss4u.com  Wed Sep 22 00:34:34 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 21 Sep 2004 21:34:34 -0700
Subject: [Twisted-Python] question on pb-client
In-Reply-To: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
References: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
Message-ID: <200409212134.34781.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


The problem you have is that reactor.run() never returns. It's the main-loop.

On Tuesday 21 September 2004 09:10 pm, Naoya Maruyama wrote:
> Hello,
>
> I'm new to Twisted and want to use the Perspective Broker. I read the
> howto pages of the web site, but I coundn't find answer of my question.
>
> I'm testing the echo server/clinet (pbsimpleserver.py and
> pbsimpleclient.py). I can successfully run them, but if I change the
> client to the following, the result seems strange.
>
> ---
> from twisted.spread import pb
> from twisted.internet import reactor
> from twisted.python import util
>
> factory = pb.PBClientFactory()
> reactor.connectTCP("localhost", 8789, factory)
>
> def test():
>     d = factory.getRootObject()
>     d.addCallback(lambda object: object.callRemote("echo", "hello
> network")) d.addCallback(lambda echo: 'server echoed: '+echo)
>     d.addErrback(lambda reason: 'error: '+str(reason.value))
>     d.addCallback(util.println)
>     d.addCallback(lambda _: reactor.stop())
>     reactor.run()
>     return
>
> # calls test twice
> test()
> test()
> ---
>
> If I execute this client code, the client doesn't finish running. And
> the server prints out "echoing: hello network" only once. So, it seems
> that the client failed to get the root object, or to call the remote
> method. What's the problem? I can't get the root object multiple times?
>
> Thanks,
>
> naoya
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBUQDajqGXBvRToM4RAnclAJ9ByucFmmEwRwEFSWax29p4jqh+BQCgt5NM
WY8m9UwJRGFCCtjSa+r0SV8=
=M2T2
-----END PGP SIGNATURE-----




From radeex at gmail.com  Wed Sep 22 00:34:49 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 22 Sep 2004 00:34:49 -0400
Subject: [Twisted-Python] question on pb-client
In-Reply-To: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
References: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
Message-ID: <60ed19d4040921213470236aa4@mail.gmail.com>

On Tue, 21 Sep 2004 23:10:38 -0500, Naoya Maruyama
<naoya at matsulab.is.titech.ac.jp> wrote:

> def test():
>     d = factory.getRootObject()
>     d.addCallback(lambda object: object.callRemote("echo", "hello network"))
>     d.addCallback(lambda echo: 'server echoed: '+echo)
>     d.addErrback(lambda reason: 'error: '+str(reason.value))
>     d.addCallback(util.println)
>     d.addCallback(lambda _: reactor.stop())
>     reactor.run()
>     return

Just call reactor.run() once, at the very end of this script, and only
call reactor.stop() once, as a callback to the second test() call. So,
in summary, make test() *not* addCallback a reactor.stop, make it
_not_ call reactor.run, and change your second test() call to
test().addCallback(lambda _: reactor.stop()) and then put
reactor.run() after that.

> 
> # calls test twice
> test()
> test()

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From naoya at matsulab.is.titech.ac.jp  Wed Sep 22 02:23:33 2004
From: naoya at matsulab.is.titech.ac.jp (Naoya Maruyama)
Date: Wed, 22 Sep 2004 01:23:33 -0500
Subject: [Twisted-Python] question on pb-client
In-Reply-To: <60ed19d4040921213470236aa4@mail.gmail.com>
References: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
	<60ed19d4040921213470236aa4@mail.gmail.com>
Message-ID: <41511A65.1010906@matsulab.is.titech.ac.jp>

So, is there no way to stop the reactor and rerun it?

naoya

Christopher Armstrong wrote:
> On Tue, 21 Sep 2004 23:10:38 -0500, Naoya Maruyama
> <naoya at matsulab.is.titech.ac.jp> wrote:
> 
> 
>>def test():
>>    d = factory.getRootObject()
>>    d.addCallback(lambda object: object.callRemote("echo", "hello network"))
>>    d.addCallback(lambda echo: 'server echoed: '+echo)
>>    d.addErrback(lambda reason: 'error: '+str(reason.value))
>>    d.addCallback(util.println)
>>    d.addCallback(lambda _: reactor.stop())
>>    reactor.run()
>>    return
> 
> 
> Just call reactor.run() once, at the very end of this script, and only
> call reactor.stop() once, as a callback to the second test() call. So,
> in summary, make test() *not* addCallback a reactor.stop, make it
> _not_ call reactor.run, and change your second test() call to
> test().addCallback(lambda _: reactor.stop()) and then put
> reactor.run() after that.
> 
> 
>># calls test twice
>>test()
>>test()
> 
> 



From naoya at matsulab.is.titech.ac.jp  Wed Sep 22 02:26:31 2004
From: naoya at matsulab.is.titech.ac.jp (Naoya Maruyama)
Date: Wed, 22 Sep 2004 01:26:31 -0500
Subject: [Twisted-Python] question on pb-client
In-Reply-To: <200409212134.34781.uwe@oss4u.com>
References: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
	<200409212134.34781.uwe@oss4u.com>
Message-ID: <41511B17.7040102@matsulab.is.titech.ac.jp>

Thanks for your reply. I think the first call of reactor.run() does
return, because there is a callback  that calls reactor.stop().

naoya

Uwe C. Schroeder wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> 
> The problem you have is that reactor.run() never returns. It's the main-loop.
> 
> On Tuesday 21 September 2004 09:10 pm, Naoya Maruyama wrote:
> 
>>Hello,
>>
>>I'm new to Twisted and want to use the Perspective Broker. I read the
>>howto pages of the web site, but I coundn't find answer of my question.
>>
>>I'm testing the echo server/clinet (pbsimpleserver.py and
>>pbsimpleclient.py). I can successfully run them, but if I change the
>>client to the following, the result seems strange.
>>
>>---
>>from twisted.spread import pb
>>from twisted.internet import reactor
>>from twisted.python import util
>>
>>factory = pb.PBClientFactory()
>>reactor.connectTCP("localhost", 8789, factory)
>>
>>def test():
>>    d = factory.getRootObject()
>>    d.addCallback(lambda object: object.callRemote("echo", "hello
>>network")) d.addCallback(lambda echo: 'server echoed: '+echo)
>>    d.addErrback(lambda reason: 'error: '+str(reason.value))
>>    d.addCallback(util.println)
>>    d.addCallback(lambda _: reactor.stop())
>>    reactor.run()
>>    return
>>
>># calls test twice
>>test()
>>test()
>>---
>>
>>If I execute this client code, the client doesn't finish running. And
>>the server prints out "echoing: hello network" only once. So, it seems
>>that the client failed to get the root object, or to call the remote
>>method. What's the problem? I can't get the root object multiple times?
>>
>>Thanks,
>>
>>naoya
>>
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> - -- 
> 	UC
> 
> - --
> Open Source Solutions 4U, LLC	2570 Fleetwood Drive
> Phone:  +1 650 872 2425		San Bruno, CA 94066
> Cell:   +1 650 302 2405		United States
> Fax:    +1 650 872 2417
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.3 (GNU/Linux)
> 
> iD8DBQFBUQDajqGXBvRToM4RAnclAJ9ByucFmmEwRwEFSWax29p4jqh+BQCgt5NM
> WY8m9UwJRGFCCtjSa+r0SV8=
> =M2T2
> -----END PGP SIGNATURE-----
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From simon at hedberg.net  Wed Sep 22 06:32:19 2004
From: simon at hedberg.net (Simon)
Date: Wed, 22 Sep 2004 12:32:19 +0200
Subject: [Twisted-Python] Twisted app structure
Message-ID: <000001c4a08f$707d3dc0$456271d5@hp>

Hi everyone,
I've recently discovered Twisted and am now thinking of shifting my
development from PHP to Python. I'm writing to you to get some input on
how Python and especially Twisted could be used in my development.

The main app I want to build could be described as a dynamic messaging
service system. It will listen for events on different protocols and
react to them according to a service description that is set up for that
event.
A service description will contain a chain of calls to different modules
of the system, for example UserModule->GetUser(event.owner),
MsgStore->Retrieve(event.msgid),
GroupModule->StoreContact(group,msg.sender). 

It seems to me that this system would be suitable to implement in
Twisted. Would you agree?
I also would like to know what you think would be best; building a main
app that handles traffic on all protocols and reacts to it, or building
gateway apps for each protocol that store data in a db which a main app
retrieves and acts on?
Would appreciate any thoughts on this.

Looking forward to hearing from you.
/Simon




From exarkun at divmod.com  Wed Sep 22 09:11:34 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 22 Sep 2004 13:11:34 GMT
Subject: [Twisted-Python] question on pb-client
In-Reply-To: <41511A65.1010906@matsulab.is.titech.ac.jp>
Message-ID: <20040922131134.29723.367837571.divmod.quotient.5053@ohm>

On Wed, 22 Sep 2004 01:23:33 -0500, Naoya Maruyama <naoya at matsulab.is.titech.ac.jp> wrote:
>So, is there no way to stop the reactor and rerun it?
> 

  Correct.

  Jp



From jean-marc.pouchoulon at ac-montpellier.fr  Thu Sep 23 04:41:05 2004
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Thu, 23 Sep 2004 10:41:05 +0200
Subject: [Twisted-Python] tesdns.py basic question 
Message-ID: <41528C21.3030809@ac-montpellier.fr>

Bonjour,
I run testdns.py example on my dns.
I don't understand why I can't see a classic ip address  as with:

 host webprod.mondomaine.fr
gave me
    webprod.mondomaine.fr has address 192.168.61.2

with
r.lookupAddress(sys.argv[1]).addCallback(gotAddress).addErrback(gotError)
that give me
 

Addresses:  [<RR name=webprod.mondomain.fr type=A class=IN ttl=86400s 
auth=False>], [<RR name=mondomain.fr
type=NS class=IN ttl=86400s auth=False>, <RR name=mondomain.fr type=NS 
class=IN ttl=86400s auth=False>, <RR name
=mondomain.fr type=NS class=IN ttl=86400s auth=False>, <RR 
name=mondomain.fr type=NS class=IN ttl=86400s au
th=False>, <RR name=mondomain.fr type=NS class=IN ttl=86400s 
auth=False>, <RR name=mondomain.fr type=NS cla
ss=IN ttl=86400s auth=False>, <RR name=mondomain.fr type=NS class=IN 
ttl=86400s auth=False>, <RR name=mondomain.fr type=NS class=IN 
ttl=86400s auth=False>, <RR name=mondomain.fr type=NS class=IN 
ttl=86400s auth=False>,
<RR name=mondomain.fr type=NS class=IN ttl=86400s auth=False>], [<RR 
name=dns.mondomain.fr type=A class=IN
ttl=86400s auth=False>, <RR name=ia30n.i30.in.mondomain.fr type=A 
class=IN ttl=86400s auth=False>, <RR name=ia34
m.i34.in.mondomain.fr type=A class=IN ttl=86400s auth=False>, <RR 
name=linux.i48.in.mondomain.fr type=A cla
ss=IN ttl=86400s auth=False>, <RR name=ia66-3.i66.in.mondomain.fr type=A 
class=IN ttl=86400s auth=False>, <RR na
me=l1serv2.in.mondomain.fr type=A class=IN ttl=86400s auth=False>, <RR 
name=l1serv4.in.mondomain.fr type=A
class=IN ttl=86400s auth=False>, <RR name=l1serv5.in.mondomain.fr type=A 
class=IN ttl=86400s auth=False>, <RR na
me=l2serv1.mondomain.fr type=A class=IN ttl=86400s auth=False>, <RR 
name=ia11-dns.i11.in.mondomain.fr type=
A class=IN ttl=86400s auth=False>]

On a CNAME I have  the corresponding A record
[<RR name=www.mondomain.fr type=CNAME class=IN ttl=30s auth=False>, <RR 
name=webprod.mondomain.fr
   
I certainly misunderstand  a basic thing.

Thanks  for you help.






From foom at fuhm.net  Thu Sep 23 11:45:46 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 23 Sep 2004 11:45:46 -0400
Subject: [Twisted-Python] log rotation
In-Reply-To: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
References: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
Message-ID: <A2B40215-0D77-11D9-BF25-000A95A50FB2@fuhm.net>

On Sep 21, 2004, at 9:21 AM, <exarkun at divmod.com> wrote:
>   logrotate should rotate twistd logfiles just fine.  It shuts down a 
> process, moves its log files around, then restarts it.

That's not how it normally works.

Generally one of two strategies is employed:
- Move the current log files, then send a signal to the process to tell 
it to reload its configuration file, which causes it to reopen the 
logfiles.
- Copy the log files, and truncate the old file.

The first option is much nicer, so ideally for integration with 
logrotate, you would want to install some signal-handler that tells 
twistd to reopen all its logfiles.

James




From exarkun at divmod.com  Thu Sep 23 15:00:42 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 23 Sep 2004 15:00:42 -0400
Subject: [Twisted-Python] Status of Twisted Tests
Message-ID: <41531D5A.5040700@divmod.com>


   Python 2.2:

===============================================================================
ERROR: testOurServerCmdLineClient 
(twisted.conch.test.test_conch.SSHTransportTestCase)
-------------------------------------------------------------------------------
Traceback: twisted.trial.unittest.FailTest, unexpectedly lost connection 
<twisted.conch.test.test_conch.SSHTestServer instance at 0x8dc2a5c>
[Failure instance: Traceback: twisted.internet.error.ConnectionDone, 
Connection was closed cleanly.
]
/home/buildbot/run/full2.2/Twisted/twisted/python/log.py:53:callWithLogger
/home/buildbot/run/full2.2/Twisted/twisted/python/log.py:40:callWithContext
/home/buildbot/run/full2.2/Twisted/twisted/python/context.py:52:callWithContext
/home/buildbot/run/full2.2/Twisted/twisted/python/context.py:31:callWithContext
/home/buildbot/run/full2.2/Twisted/twisted/internet/default.py:521:_doReadOrWrite
/home/buildbot/run/full2.2/Twisted/twisted/internet/tcp.py:296:connectionLost
/home/buildbot/run/full2.2/Twisted/twisted/conch/test/test_conch.py:334:connectionLost
/home/buildbot/run/full2.2/Twisted/twisted/trial/unittest.py:86:fail
-------------------------------------------------------------------------------

   Python 2.3:

===============================================================================
FAILURE: testBasicFunction (twisted.test.test_task.LoopTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 240, in _runPhase
     stage(*args, **kwargs)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 262, in _main
     self.runner(self.method)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/runner.py", 
line 95, in runTest
     method()
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/test/test_task.py", 
line 25, in testBasicFunction
     self.failUnless(9 <= len(L) <= 11)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 98, in failUnless
     raise FailTest, message
FailTest
===============================================================================
FAILURE: testIdleClientDoesDisconnect (twisted.mail.test.test_imap.Timeout)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 240, in _runPhase
     stage(*args, **kwargs)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 262, in _main
     self.runner(self.method)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/runner.py", 
line 95, in runTest
     method()
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/mail/test/test_imap.py", 
line 2348, in testIdleClientDoesDisconnect
     self.failUnless(time.time() - now < 0.4)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 98, in failUnless
     raise FailTest, message
FailTest
===============================================================================
ERROR: testOurServerCmdLineClient 
(twisted.conch.test.test_conch.SSHTransportTestCase)
-------------------------------------------------------------------------------
Traceback: twisted.trial.unittest.FailTest, unexpectedly lost connection 
<twisted.conch.test.test_conch.SSHTestServer instance at 0x40e1492c>
[Failure instance: Traceback: twisted.internet.error.ConnectionDone, 
Connection was closed cleanly.
]
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/python/log.py:53:callWithLogger
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/python/log.py:40:callWithContext
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/python/context.py:52:callWithContext
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/python/context.py:31:callWithContext
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/internet/default.py:521:_doReadOrWrite
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/internet/tcp.py:296:connectionLost
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/conch/test/test_conch.py:334:connectionLost
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py:86:fail
-------------------------------------------------------------------------------

   Python 2.4:

testAPileOfThings (twisted.mail.test.test_imap.TLSTestCase) ...
/home/buildbot/run/full2.4/Twisted/twisted/internet/tcp.py:531: 
exceptions.RuntimeWarning: startTLS with unwritten buffered data 
currently doesn't work right. See issue #686. Closing connection.
command timed out: 1200 seconds without output, killing pid 10997
process killed by signal 9
program finished with exit code -1

   OS X:
===============================================================================
ERROR: testOurServerCmdLineClient 
(twisted.conch.test.test_conch.SSHTransportTestCase)
-------------------------------------------------------------------------------
Traceback: twisted.trial.unittest.FailTest, unexpectedly lost connection 
<twisted.conch.test.test_conch.SSHTestServer instance at 0x220c3c8>
[Failure instance: Traceback: twisted.internet.error.ConnectionDone, 
Connection was closed cleanly.
]
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/python/log.py:53:callWithLogger
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/python/log.py:40:callWithContext
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/python/context.py:52:callWithContext
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/python/context.py:31:callWithContext
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/internet/default.py:521:_doReadOrWrite
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/internet/tcp.py:296:connectionLost
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/conch/test/test_conch.py:334:connectionLost
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/trial/unittest.py:86:fail
-------------------------------------------------------------------------------


   Win32Reactor:

===============================================================================
FAILURE: testWriter (twisted.test.test_tcp.LargeBufferTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
240, in _runPhase
     stage(*args, **kwargs)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
262, in _main
     self.runner(self.method)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\runner.py", line 95, 
in runTest
     method()
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_tcp.py", line 
696, in testWriter
     self.failUnless(clientF.done, "client didn't see connection dropped")
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
98, in failUnless
     raise FailTest, message
FailTest: client didn't see connection dropped
===============================================================================
FAILURE: test_loseConnection 
(twisted.test.test_wprocess.ProcessOnWin32TestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
240, in _runPhase
     stage(*args, **kwargs)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
262, in _main
     self.runner(self.method)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\runner.py", line 95, 
in runTest
     method()
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py", 
line 103, in test_loseConnection
     self._dieDieDie(diefunc = 'loseConnection')
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py", 
line 122, in _dieDieDie
     self.failUnless(actual.startswith('1\r\n'))
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
98, in failUnless
     raise FailTest, message
FailTest
===============================================================================
ERROR: test_bad_exit (twisted.test.test_wprocess.ProcessOnWin32TestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
240, in _runPhase
     stage(*args, **kwargs)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
262, in _main
     self.runner(self.method)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\runner.py", line 95, 
in runTest
     method()
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py", 
line 38, in test_bad_exit
     reason = util.wait(self.deferred)['reason']
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\util.py", line 78, in 
wait
     result.raiseException()
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\python\failure.py", line 
242, in raiseException
     raise self.value.__class__, self.value, self.tb
TimeoutError: Callback timed out
===============================================================================
ERROR: test_err_python (twisted.test.test_wprocess.ProcessOnWin32TestCase)
-------------------------------------------------------------------------------
Traceback: twisted.internet.defer.AlreadyCalledError,
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:326:_runCallbacks
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\wprocess.py:120:connectionLost
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py:21:processEnded
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:240:callback
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:287:_startRunCallbacks
-------------------------------------------------------------------------------

Additionally,

Could not import twisted.conch.test.test_sftp: Traceback: 
exceptions.ImportError, No module named fcntl
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py:344:addModule
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\python\reflect.py:344:namedModule
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\conch\test\test_sftp.py:1:?
d:\Program Files\buildslave\W32-full2.2\Twisted\twisted\conch\unix.py:8:?
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\process.py:33:?
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\fdesc.py:15:?

   This bodes ill of a 2.0 release in the foreseeable future.  If you 
have recently committed broken code, please fix it or revert it (or I 
may do it for you).  We have a sandbox and svn has reasonably good 
branch support.  Use 'em.

   Jp




From corydodt at twistedmatrix.com  Thu Sep 23 17:03:38 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 23 Sep 2004 14:03:38 -0700
Subject: [Twisted-Python] Status of Twisted Tests
In-Reply-To: <41531D5A.5040700@divmod.com>
References: <41531D5A.5040700@divmod.com>
Message-ID: <41533A2A.3060200@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

The two below must be my broken test code.  I will investigate.

Someone should look at the sftp thing and make it .skip'd for Windows, since
it imports fcntl.

C


Jp Calderone wrote:
|
|   Win32Reactor:
|
| FAILURE: test_loseConnection
| (twisted.test.test_wprocess.ProcessOnWin32TestCase)
| -------------------------------------------------------------------------------
|
| Traceback (most recent call last):
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line
| 240, in _runPhase
|     stage(*args, **kwargs)
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line
| 262, in _main
|     self.runner(self.method)
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\runner.py", line 95,
| in runTest
|     method()
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py",
| line 103, in test_loseConnection
|     self._dieDieDie(diefunc = 'loseConnection')
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py",
| line 122, in _dieDieDie
|     self.failUnless(actual.startswith('1\r\n'))
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line
| 98, in failUnless
|     raise FailTest, message
| FailTest
| ===============================================================================
|
| ERROR: test_bad_exit (twisted.test.test_wprocess.ProcessOnWin32TestCase)
| -------------------------------------------------------------------------------
|
| Traceback (most recent call last):
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line
| 240, in _runPhase
|     stage(*args, **kwargs)
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line
| 262, in _main
|     self.runner(self.method)
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\runner.py", line 95,
| in runTest
|     method()
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py",
| line 38, in test_bad_exit
|     reason = util.wait(self.deferred)['reason']
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\util.py", line 78, in
| wait
|     result.raiseException()
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\python\failure.py", line
| 242, in raiseException
|     raise self.value.__class__, self.value, self.tb
| TimeoutError: Callback timed out
| ===============================================================================
|
| ERROR: test_err_python (twisted.test.test_wprocess.ProcessOnWin32TestCase)
| -------------------------------------------------------------------------------
|
| Traceback: twisted.internet.defer.AlreadyCalledError,
| d:\Program
|
Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:326:_runCallbacks
|
| d:\Program
|
Files\buildslave\W32-full2.2\Twisted\twisted\internet\wprocess.py:120:connectionLost

|
| d:\Program
|
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py:21:processEnded

|
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:240:callback
| d:\Program
|
Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:287:_startRunCallbacks

|
| -------------------------------------------------------------------------------



Someone please .skip this:....


|
| Additionally,
|
| Could not import twisted.conch.test.test_sftp: Traceback:
| exceptions.ImportError, No module named fcntl
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py:344:addModule
|
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\python\reflect.py:344:namedModule
|
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\conch\test\test_sftp.py:1:?
| d:\Program Files\buildslave\W32-full2.2\Twisted\twisted\conch\unix.py:8:?
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\internet\process.py:33:?
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\internet\fdesc.py:15:?
|
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBUzoq3A5SrXAiHQcRAv/uAJ41y7B3r1ZvKkF3Wq3lHOK8cA7R2wCdHXhM
NomMhNIfvDKTeCcBCji2KHU=
=My8x
-----END PGP SIGNATURE-----



From foom at fuhm.net  Thu Sep 23 17:37:40 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 23 Sep 2004 17:37:40 -0400
Subject: [Twisted-Python] Status of Twisted Tests
In-Reply-To: <41531D5A.5040700@divmod.com>
References: <41531D5A.5040700@divmod.com>
Message-ID: <CB91E540-0DA8-11D9-BF25-000A95A50FB2@fuhm.net>

On Sep 23, 2004, at 3:00 PM, Jp Calderone wrote:
> ======================================================================= 
> ========
> ERROR: testOurServerCmdLineClient  
> (twisted.conch.test.test_conch.SSHTransportTestCase)
> ----------------------------------------------------------------------- 
> --------
> Traceback: twisted.trial.unittest.FailTest, unexpectedly lost  
> connection <twisted.conch.test.test_conch.SSHTestServer instance at  
> 0x8dc2a5c>
> [Failure instance: Traceback: twisted.internet.error.ConnectionDone,  
> Connection was closed cleanly.
> ]
> /home/buildbot/run/full2.2/Twisted/twisted/python/log.py:53: 
> callWithLogger
> /home/buildbot/run/full2.2/Twisted/twisted/python/log.py:40: 
> callWithContext
> /home/buildbot/run/full2.2/Twisted/twisted/python/context.py:52: 
> callWithContext
> /home/buildbot/run/full2.2/Twisted/twisted/python/context.py:31: 
> callWithContext
> /home/buildbot/run/full2.2/Twisted/twisted/internet/default.py:521: 
> _doReadOrWrite
> /home/buildbot/run/full2.2/Twisted/twisted/internet/tcp.py:296: 
> connectionLost
> /home/buildbot/run/full2.2/Twisted/twisted/conch/test/test_conch.py: 
> 334:connectionLost
> /home/buildbot/run/full2.2/Twisted/twisted/trial/unittest.py:86:fail
> ----------------------------------------------------------------------- 
> --------

Since this one appeared to be my fault I investigated it, and found the  
following:
The test is highly sensitive to what order events come back. It wants  
them in the following order:
1) The pipe from the SSH client subprocess has the data "goodbye"  
appear on it.
2) The ssh server's connection to the client gets closed.
3) The ssh client process dies

However, with my buffering change, *sometimes* (not always) the  
following happens instead:
1) The ssh server's connection to the client gets closed.
2) The pipe from the SSH client subprocess has the data "goodbye"  
appear on it.
3) The ssh client process dies

It seems to me that this ordering change could have happened before, as  
there is nothing that guarantees the ordering of data sent over  
different sockets. So, I think this is a bug in the test.

>   Python 2.4:
> testAPileOfThings (twisted.mail.test.test_imap.TLSTestCase) ...
> /home/buildbot/run/full2.4/Twisted/twisted/internet/tcp.py:531:  
> exceptions.RuntimeWarning: startTLS with unwritten buffered data  
> currently doesn't work right. See issue #686. Closing connection.

*No* idea why this would show up only in Py 2.4...if anyone could help  
out here..

James




From foom at fuhm.net  Thu Sep 23 17:56:35 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 23 Sep 2004 17:56:35 -0400
Subject: [Twisted-Python] Status of Twisted Tests
In-Reply-To: <CB91E540-0DA8-11D9-BF25-000A95A50FB2@fuhm.net>
References: <41531D5A.5040700@divmod.com>
	<CB91E540-0DA8-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <7054FB98-0DAB-11D9-BF25-000A95A50FB2@fuhm.net>

On Sep 23, 2004, at 5:37 PM, James Y Knight wrote:
> It seems to me that this ordering change could have happened before, 
> as there is nothing that guarantees the ordering of data sent over 
> different sockets. So, I think this is a bug in the test.

I marked it skip for the moment -- this obviously shouldn't stay, 
though. Hopefully someone who knows about conch will fix it instead of 
me. :)

James




From foom at fuhm.net  Thu Sep 23 19:01:38 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 23 Sep 2004 19:01:38 -0400
Subject: [Twisted-Python] Status of Twisted Tests
In-Reply-To: <CB91E540-0DA8-11D9-BF25-000A95A50FB2@fuhm.net>
References: <41531D5A.5040700@divmod.com>
	<CB91E540-0DA8-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <864F567F-0DB4-11D9-BF25-000A95A50FB2@fuhm.net>


On Sep 23, 2004, at 5:37 PM, James Y Knight wrote:

>
>>   Python 2.4:
>> testAPileOfThings (twisted.mail.test.test_imap.TLSTestCase) ...
>> /home/buildbot/run/full2.4/Twisted/twisted/internet/tcp.py:531: 
>> exceptions.RuntimeWarning: startTLS with unwritten buffered data 
>> currently doesn't work right. See issue #686. Closing connection.
>
> *No* idea why this would show up only in Py 2.4...if anyone could help 
> out here..

Okay, figured it out. Submitted as Python bug #1033720 
<http://www.python.org/sf/1033720>

print str(buffer(buffer("asdf", 0), 0, 131072))

On Python < 2.4, this prints 'asdf' as it should.
On Python 2.4, this prints '', as it most certainly *should not*.

It may have something to do with:
Python 2.4a2 (#61, Sep  9 2004, 22:24:36)
 >>> buffer("asdf", 0)
<read-only buffer for 0x40234360, size -1, offset 0 at 0x40234280>
(size -1, WTF??)

vs.

Python 2.3.4 (#2, Jul  5 2004, 09:15:05)
 >>> buffer("asdf", 0)
<read-only buffer for 0x402194a0, ptr 0x402194b4, size 4 at 0x40219460>

James




From mailinglist at ltsai.com  Thu Sep 23 20:40:35 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Fri, 24 Sep 2004 08:40:35 +0800
Subject: [Twisted-Python] Re: log rotation
In-Reply-To: <A2B40215-0D77-11D9-BF25-000A95A50FB2@fuhm.net>
References: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
	<A2B40215-0D77-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <civqe2$qgu$1@sea.gmane.org>



James Y Knight wrote:
> On Sep 21, 2004, at 9:21 AM, <exarkun at divmod.com> wrote:
> 
>>   logrotate should rotate twistd logfiles just fine.  It shuts down a 
>> process, moves its log files around, then restarts it.
> 
> 
> That's not how it normally works.
> 
> Generally one of two strategies is employed:
> - Move the current log files, then send a signal to the process to tell 
> it to reload its configuration file, which causes it to reopen the 
> logfiles.
> - Copy the log files, and truncate the old file.
> 
> The first option is much nicer, so ideally for integration with 
> logrotate, you would want to install some signal-handler that tells 
> twistd to reopen all its logfiles.
> 
> James


Hi James,

That's what I would thought too.

1. logrotate will rotate the file. (server -> server.1)
2. a signal (usually a HUP) is sent to the process and the process will 
close the log file's FD. (server.1)
3. Process will reload it's current configuration and write to a new log 
file. (server)

However, Twisted has its own mechanism of handling log rotation.

Liming




From mailinglist at ltsai.com  Fri Sep 24 11:20:30 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Fri, 24 Sep 2004 23:20:30 +0800
Subject: [Twisted-Python] system event trigger
Message-ID: <cj1e1j$lmh$1@sea.gmane.org>

Hi

Anyone has any sample codes for adding your own function that will be 
called when system wide events such as shutdown is fired?

Thanks,
Liming




From mailinglist at ltsai.com  Fri Sep 24 11:28:12 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Fri, 24 Sep 2004 23:28:12 +0800
Subject: [Twisted-Python] Re: system event trigger
In-Reply-To: <cj1e1j$lmh$1@sea.gmane.org>
References: <cj1e1j$lmh$1@sea.gmane.org>
Message-ID: <cj1eg1$mk8$1@sea.gmane.org>

Tsai Li Ming wrote:
> Hi
> 
> Anyone has any sample codes for adding your own function that will be 
> called when system wide events such as shutdown is fired?
> 
> Thanks,
> Liming

I think I found my answer, should be reactor.addSystemEventTrigger.

-Liming




From cce at clarkevans.com  Fri Sep 24 16:58:35 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 24 Sep 2004 16:58:35 -0400
Subject: [Twisted-Python] Seeking Twisted/Python Contractors
Message-ID: <20040924205835.GA89572@prometheusresearch.com>

Hello.  We have a core toolset written with Twisted (that will most
likely be made open source) and have several applications of this
toolset to the medical research field.  I'm looking for someone to
continue to build out the product by implementing customer requested
features.  In particular, we need several user interface improvements, 
as well as a whole slew of custom, one-off programming tasks.
Depending on the particular task, some of the code could quite
possibly be donated to the Twisted project.

I'm looking for someone very familiar with Python, who has good
track record building test-driven code, and who is responsive over
the Internet.  Experience with Python, HTTP and HTML is a must,
Javascript a plus, and XSLT is a very nice bonus.   This is a
contract position, and need not be local; although if you are within
'visiting' distance to New Haven, CT (say NYC or Boston) that is icing.

If you are interested, please send me information you consider 
relevant, your hourly rate expectations, and your availability; if
you are not a 'visible' person in the Twisted community a few
references would be quite helpful.

Cheers!

Clark 

-- 
Clark C. Evans                      Prometheus Research, LLC.
                                    http://www.prometheusresearch.com/
    o                               office: +1.203.777.2550 
  ~/ ,                              mobile: +1.203.444.0557 
 //
((   Prometheus Research: Transforming Data Into Knowledge
 \\  ,
   \/    - Research Exchange Database
   /\    - Survey & Assessment Technologies
   ` \   - Software Tools for Researchers
    ~ *



From wilk-ml at flibuste.net  Sat Sep 25 06:10:44 2004
From: wilk-ml at flibuste.net (William Dode)
Date: Sat, 25 Sep 2004 12:10:44 +0200
Subject: [Twisted-Python] jabber
Message-ID: <87acvehd5n.fsf@blakie.riol>

Hi,

Are there people using jabber with twisted ?

I found only this example for a jabber client :
http://randomthoughts.vandorp.ca/WK/blog/706?t=item

It works, it's not very difficult to use, but it could be a little bit
more complete. Is there somewhere others examples ?

bye

-- 
William Dod? - http://flibuste.net



From sflist at ihonk.com  Sat Sep 25 09:15:08 2004
From: sflist at ihonk.com (Steve Freitas)
Date: Sat, 25 Sep 2004 06:15:08 -0700
Subject: [Twisted-Python] LoopingCall(): Threaded or not?
Message-ID: <200409250615.08911.sflist@ihonk.com>

Hi all,

I'm using twisted.internet.task.LoopingCall() to perform various housekeeping 
chores. One of the things I'm using it for is to clean up stale locks left 
behind by stalled network clients. However, I don't want it cleaning up a 
lock while my other twisted code is executing, as that could introduce a race 
condition. So, my question is whether a LoopingCall() will only run in the 
single thread of execution used for application code, or if it is threaded 
off and could very well be executing at the same time as my own code.

Hope that was clear enough. Thanks!

Steve



From itamar at itamarst.org  Sat Sep 25 10:50:08 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 25 Sep 2004 10:50:08 -0400
Subject: [Twisted-Python] LoopingCall(): Threaded or not?
In-Reply-To: <200409250615.08911.sflist@ihonk.com>
References: <200409250615.08911.sflist@ihonk.com>
Message-ID: <1096123807.19067.0.camel@sheriffpony>

Twisted does not use threads as a rule. Exceptions are the database pool
code and functions that mention threads (reactor.callInThread, say). So
you need not worry.




From foom at fuhm.net  Sat Sep 25 13:52:52 2004
From: foom at fuhm.net (James Y Knight)
Date: Sat, 25 Sep 2004 13:52:52 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <B92194FA-0F1B-11D9-BF25-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2004-09-17 20:03:10.310000:
   Bugs opened: 11   Bugs closed: 5   Total open bugs: 311 (+6)

New / Reopened Bugs
______________________
[WEBSITE] Website needs to be suitable for 2.0  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue728 opened by hypatia

t.p.c.MetaInterface.__getattr__  causes infinite recursion  (yesterday)
        http://www.twistedmatrix.com/bugs/issue730 opened by slyphon

twisted.names.dns.Record_NULL is stupid  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue729 opened by anthony

twisted.internet.{tcp,udp}.Port lie when port == 0  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue725 opened by anthony

domish.Element and deepcopy problem  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue724 opened by arthur.lutz

ftp blocks unless using a passive client  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue723 opened by cablehead

ReconnectingClientFactory can fail to reconnect on connection timeouts  
(7 days ago)
        http://www.twistedmatrix.com/bugs/issue722 opened by exarkun

[DOCUMENTATION, WEB] Document reasons for web2 interface and design 
changes  (9 hours ago)
        http://www.twistedmatrix.com/bugs/issue731 opened by hypatia

[CORE] Compression for rotated log files  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue727 opened by itamarst

[CORE] Allow passing --uid and --gid to twistd  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue726 opened by itamarst

[CORE] No way to override the default signal handler  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue715 opened by loic

Bugs Closed
______________________
[DOCUMENTATION, WORDS] IRC examples bug fix/improvment  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue721 opened by yacc

Allow SIP to work over TCP  (12 months ago)
        http://www.twistedmatrix.com/bugs/issue293 opened by exarkun

[MAIL] MaildirMailbox.appendMessage implementation.  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue714 opened by yacc

[WEB] [PATCH] Optionally preserve all whitespace in microdom  (5 months 
ago)
        http://www.twistedmatrix.com/bugs/issue571 opened by anglerud

[TRIAL] --psyco speedup option for trial, for everything else too  (14 
months ago)
        http://www.twistedmatrix.com/bugs/issue145 opened by ne1uno




From uwe at oss4u.com  Sat Sep 25 16:31:12 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 25 Sep 2004 13:31:12 -0700
Subject: [Twisted-Python] PB release connection
Message-ID: <200409251331.12841.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Hi,

after browsing the docs,api and mailinglist I couldn't find what I'm looking 
for. I'm using a simple pb server with a pb.Root object (don't need 
authentication). What I want to do is release the connection from the 
server-side. Server code looks like:

class MyPerspective(pb.Root):
	....
	....


main:
reactor.listenTCP(port,pb.PBServerFactory(MyPerspective(self)))


so far so good. MyPerspective receives all the remote_ calls. Now I'd like to 
be able to get rid of a specific client (which holds a remote-reference to 
MyPerspective). With the old pb api there was a way to do call
perspective.broker.transport.loseConnection(), which I was using on the client 
side to end the connection. 

I can't see anything like this with the new API that would allow me to 
initiate the "kick off" from the server side.

Can this be done? What would be the propper way to release a connection from 
the server side?

Thanks for any enlightenment.

	Uwe


- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBVdWQjqGXBvRToM4RAuzVAJ4jeJHgNGGVwP3pGWh8wWBo+pkXKwCfbJsk
BZN9uUIFMkUb9w7deq0iwDE=
=b1g5
-----END PGP SIGNATURE-----




From jasper at peak.org  Sat Sep 25 19:28:49 2004
From: jasper at peak.org (Jasper Phillips)
Date: Sat, 25 Sep 2004 16:28:49 -0700 (PDT)
Subject: [Twisted-Python] PB release connection
In-Reply-To: <200409251331.12841.uwe@oss4u.com>
References: <200409251331.12841.uwe@oss4u.com>
Message-ID: <Pine.LNX.4.53.0409251614280.11872@a.shell.peak.org>


On Sat, 25 Sep 2004, Uwe C. Schroeder wrote:
[snip]
> Now I'd like to be able to get rid of a specific client (which holds a
> remote-reference to MyPerspective). With the old pb api there was a way to
> do call perspective.broker.transport.loseConnection(), which I was using
> on the client side to end the connection. 
> 
> I can't see anything like this with the new API that would allow me to 
> initiate the "kick off" from the server side.
> 
> Can this be done? What would be the propper way to release a connection from 
> the server side?
> 
> Thanks for any enlightenment.
> 
> 	Uwe

I don't know what the "proper" way to release a connection is, but
"perspective".broker.transport.loseConnection() works for me, where
"perspective" is whatever name you assign to the arg of the "connected"
callback attached to PBClientFactory.login()

Here's a minimal snippet of what I use, cutting out code specific to my
purposes.

class NetworkClient( pb.Referenceable ):
  def __init__( self ):
      self.remote = None

  def connect( self, ipAddress, port, user, password ):
      factory = pb.PBClientFactory()
      reactor.connectTCP( ipAddress, port, factory )
      defer = factory.login( credentials.UsernamePassword( user, password),
                             client=self )
      defer.addCallbacks( self.connected, self.connectFailled )
      return defer

  def disconnect( self ):
      self.remote.broker.transport.loseConnection()

  def connected( self, perspective ):
      print "Connect Succeeded to:", self.remote 
      self.remote = perspective
      self.remote.notifyOnDisconnect( self.disconnected )

    def disconnected( self, perspective ):
        print "Connection Severed"


-Jasper




From uwe at oss4u.com  Sun Sep 26 04:59:46 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sun, 26 Sep 2004 01:59:46 -0700
Subject: [Twisted-Python] PB release connection
In-Reply-To: <Pine.LNX.4.53.0409251614280.11872@a.shell.peak.org>
References: <200409251331.12841.uwe@oss4u.com>
	<Pine.LNX.4.53.0409251614280.11872@a.shell.peak.org>
Message-ID: <200409260159.46806.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


That works for me too. Maybe I need to reword that.
How do you release the connection from a PBServerFactory instance (where you 
usually don't have a reference to) ?

On Saturday 25 September 2004 04:28 pm, Jasper Phillips wrote:
> On Sat, 25 Sep 2004, Uwe C. Schroeder wrote:
> [snip]
>
> > Now I'd like to be able to get rid of a specific client (which holds a
> > remote-reference to MyPerspective). With the old pb api there was a way
> > to do call perspective.broker.transport.loseConnection(), which I was
> > using on the client side to end the connection.
> >
> > I can't see anything like this with the new API that would allow me to
> > initiate the "kick off" from the server side.
> >
> > Can this be done? What would be the propper way to release a connection
> > from the server side?
> >
> > Thanks for any enlightenment.
> >
> > 	Uwe
>
> I don't know what the "proper" way to release a connection is, but
> "perspective".broker.transport.loseConnection() works for me, where
> "perspective" is whatever name you assign to the arg of the "connected"
> callback attached to PBClientFactory.login()
>
> Here's a minimal snippet of what I use, cutting out code specific to my
> purposes.
>
> class NetworkClient( pb.Referenceable ):
>   def __init__( self ):
>       self.remote = None
>
>   def connect( self, ipAddress, port, user, password ):
>       factory = pb.PBClientFactory()
>       reactor.connectTCP( ipAddress, port, factory )
>       defer = factory.login( credentials.UsernamePassword( user, password),
>                              client=self )
>       defer.addCallbacks( self.connected, self.connectFailled )
>       return defer
>
>   def disconnect( self ):
>       self.remote.broker.transport.loseConnection()
>
>   def connected( self, perspective ):
>       print "Connect Succeeded to:", self.remote
>       self.remote = perspective
>       self.remote.notifyOnDisconnect( self.disconnected )
>
>     def disconnected( self, perspective ):
>         print "Connection Severed"
>
>
> -Jasper
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBVoUCjqGXBvRToM4RApIEAJ92/LrL0AcDASLTNX9oVb1pSnLdtwCfaflD
iyTI7f7FlUAlkJ+HPC7e0d4=
=ydeD
-----END PGP SIGNATURE-----




From p.mayers at imperial.ac.uk  Sun Sep 26 14:32:46 2004
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 26 Sep 2004 19:32:46 +0100
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
Message-ID: <41570B4E.9090109@imperial.ac.uk>

I have an SNMP poller written in Python that I'd like to turn into a 
long-running server process. The obvious thing (it is obvious - I really 
need the support infrastructure) is to convert it to twisted, since it 
provides easy support to turn the process into a server as well as a 
client (e.g. XMLRPC query mapping onto an SNMP fetch; using DBAPI to 
update node status, all hooked in via deferred, etc.)

However, I've done a couple of proof-of-concept ports and am having 
scalability problems related to the way reactors work. I'm not entirely 
certain I've got the problem nailed, since the reactor sources are... 
complex... but I think what happens is this: The framework is heavily 
oriented towards getting IO out as soon as possible, and since there's 
no "scheduling" of receive events, protocol instances talking to "fast" 
clients eat all the CPU, and the socket buffer overflows since each 
datagramReceived triggers another write().

Possibly an example would help:

class agent:
     def start(self):
         d = self.get_table('ifTable')
         d.addCallbacks(self.step2, self.die)
     def step2(self, ifTable):
         # Do some processing, then more data fetch
         d = self.get_table('ipAddrTable')
         d.addCallbacks(self.step3, self.die)
     def step3(self, ipAddrTable):
         # etc. etc.

def do_timeouts(reactor):
     # get the list of sent PDUs
     now = time.time()
     for pdu in pdus:
         if pdu.due < now:
             pdu.deferred.errback(Timeout())
     reactor.callLater(1, do_timeouts, reactor)

import sys
from twisted.internet import reactor

for host in sys.argv[1:]:
     a = agent(host)
     reactor.callLater(0, a.start)
reactor.callLater(1, do_timeouts, reactor)
reactor.run()


Now, I know there are scalability problems with callLater, but that's 
only being used for the startup because I can't think of a cleaner way 
of doing it - future activity is all triggered by deferreds. I'm 
handling the timeouts by running a once-per-second expiry which is 
sufficient for my needs.

The *problem* is that the SNMP agents I'm talking to have an extremely 
wide range of performances, response times and quantity of data to 
retrieve, and the faster endpoints are consuming a disproportionate 
quantity of the CPU time; so much so in fact, that the UDP socket 
receive queue limit is being exceeded (I'm using a single UDP socket for 
all the clients, and breaking the responses back out based on SNMP 
message ID - this is to overcome FD limits).

We're talking 750-1000 clients here BTW.

What I really need is some way of making the reactor do a fair-queuing 
style of transmit/receive; I have some not-very-clear notion in my head 
of transport.write not actually doing the write, but just putting the 
output data onto a per-agent queue, and the reactor emptying those 
queues in a strictly round-robin fashion, *but* stopping immediately to 
service input data if it arrives.

Hmm. I suppose I could implement that by subclassing the UDP transport:

class queuedtransport:
     def write(self, data, host=None):
         if not host in self.host2queue:
             queue = max(self.host2queue.values()) + 1
             self.host2queue[host] = queue
         else:
             queue = self.host2queue[host]
         self.queues.setdefault(queue, []).append(data)
     def queue(self):
         if not self.queues:
            return reactor.callLater(1, self.queue)
         while True:
             self.pos = (self.pos + 1) % len(self.queues)
             if not self.queues[self.pos]:
                 continue
             self._write(self.queues[self.pos].pop(0))
             break

Or something - I'm fairly sure that code wouldn't quite work, but 
something similar.

Does anyone have any suggestions how to handle this? My existing 
(home-grown, nasty) async framework can handle a lot of queries a 
second; upwards of several hundred, and it does a very good job of 
sharing out the load evenly so that fast systems complete quickly but 
the slower ones still get enough time to a) not suffer PDU timeouts and 
b) not exhaust inbound socket buffers.

The way my current code works is:

def receive():
     r,w,x = select.select(fds,[],[])
     for rfd in r:
         while True:
             try:
                 pdu = r.read()
                 if not pdu:
                     break
                 mark_answered(pdu)
              except:
                  pass
         return len(r)
     else:
         return None

while self.jobs:
     while True:
         if not receive():
             break
         job = job.nextptr
         if job.waiting:
             if job.waiting.answered:
                 job.receive()
             elif job.waiting.due < now:
                 try:
                     job.waiting.retry()
                 except:
                     # Out of retries
                     job.cancel()


You can probably see the way this works - on every loop, receive IO 
takes absolute precedence but goes into an input queue, and the input 
queue only has one "receive" event per IO-empty - *and* there's a 
pointer into the queue of jobs to ensure that they're serviced in a 
round-robin fashion if ready. Sadly, the pseudo-code above makes it look 
much cleaner than the real code, and I want the other protocol / service 
support along with other things like the deferred pattern and such.

I would welcome any suggestions.



From itamar at itamarst.org  Sun Sep 26 14:54:10 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 26 Sep 2004 14:54:10 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <41570B4E.9090109@imperial.ac.uk>
References: <41570B4E.9090109@imperial.ac.uk>
Message-ID: <1096224850.19065.17.camel@sheriffpony>

Rather than doing queuing in the transport, do it in your
DatagramProtocol code - instead of doing transport.write add stuff to a
queue that schedules writes fairly for different machines.




From p.mayers at imperial.ac.uk  Sun Sep 26 15:35:33 2004
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 26 Sep 2004 20:35:33 +0100
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <1096224850.19065.17.camel@sheriffpony>
References: <41570B4E.9090109@imperial.ac.uk>
	<1096224850.19065.17.camel@sheriffpony>
Message-ID: <41571A05.7050508@imperial.ac.uk>

Itamar Shtull-Trauring wrote:

> Rather than doing queuing in the transport, do it in your
> DatagramProtocol code - instead of doing transport.write add stuff to a
> queue that schedules writes fairly for different machines.
> 
> 

If I do this, I'll need:

def xmit(self):
     while True:
         txqueue = self.txcurrent
         self.txcurrent = txqueue.next
         if txqueue:
             self.write(txqueue.pop(0))
             break
     reactor.callLater(0, self.xmit)
def write(self, data, address):
     self.getqueue(address).append(data)

def rcv(self):
     while True:
         rxqueue = self.rxcurrent
         self.rxcurrent = rxqueue.next
         if rxqueue:
             pdu = rxqueue.pop(0)
             pdu.callback()
             break

def datagramReceived(self, data, addr):
     pdu, queue = self.parse(data, addr)
     queue.append(pdu)
     reactor.callLater(0, self.rcv)

I'm concerned about all those reactor.callLater - since one of the main 
problems is the UDP socket queue overflowing, every time I xmit I have 
to get *out* of the protocol code ASAP and back into the select() loop, 
however one of the problems with the reactors (problems for me at any 
rate) is that they do pending calls and thread stuff before IO, which 
IMHO is not quite the right way round.

I'm also slightly concerned about the number of function calls involved 
in jumping in and out of the reactor that many times a second (several 
thousand, if I can get it to go as fast as my previous code) given how 
expensive they are under Python. It would certainly be quicker to 
implement this inside the reactor.mainLoop.

Anyway, I'll give it a go, but I thought I saw stuff recently about 
scalability of callLater; and certainly I've had problems with a lot of 
callLaters (I used to use them for the timeouts before going for a 
simpler expiry scan) - maybe callLater will go faster in Python 2.4 with 
the C bisect.insort?

Thanks for the tips



From itamar at itamarst.org  Sun Sep 26 16:25:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 26 Sep 2004 16:25:35 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <41571A05.7050508@imperial.ac.uk>
References: <41570B4E.9090109@imperial.ac.uk>
	<1096224850.19065.17.camel@sheriffpony>
	<41571A05.7050508@imperial.ac.uk>
Message-ID: <1096230335.19062.22.camel@sheriffpony>

On Sun, 2004-09-26 at 15:35, Phil Mayers wrote:

> 
> def xmit(self):
>      while True:
>          txqueue = self.txcurrent
>          self.txcurrent = txqueue.next
>          if txqueue:
>              self.write(txqueue.pop(0))
>              break
>      reactor.callLater(0, self.xmit)

This code confuses me. What is the "next" bit for?

> I'm concerned about all those reactor.callLater - since one of the main 
> problems is the UDP socket queue overflowing, every time I xmit I have 
> to get *out* of the protocol code ASAP and back into the select() loop, 
> however one of the problems with the reactors (problems for me at any 
> rate) is that they do pending calls and thread stuff before IO, which 
> IMHO is not quite the right way round.

ABABAB
BABABA

These are indistinguishable once you've done half an iteration, ABABAB
is BABABA slightly timeshifted, it just affects the first and last
iterations.

> I'm also slightly concerned about the number of function calls involved 
> in jumping in and out of the reactor that many times a second (several 
> thousand, if I can get it to go as fast as my previous code) given how 
> expensive they are under Python. It would certainly be quicker to 
> implement this inside the reactor.mainLoop.

Just have a single reactor.callLater(0, f), and f() then calls all the
functions you want done in that iteration.





From jasper at peak.org  Mon Sep 27 04:23:01 2004
From: jasper at peak.org (Jasper Phillips)
Date: Mon, 27 Sep 2004 01:23:01 -0700 (PDT)
Subject: [Twisted-Python] PB release connection
In-Reply-To: <200409260159.46806.uwe@oss4u.com>
References: <200409251331.12841.uwe@oss4u.com>
	<Pine.LNX.4.53.0409251614280.11872@a.shell.peak.org>
	<200409260159.46806.uwe@oss4u.com>
Message-ID: <Pine.LNX.4.53.0409270102580.26110@a.shell.peak.org>


On Sun, 26 Sep 2004, Uwe C. Schroeder wrote:
> That works for me too. Maybe I need to reword that.
> How do you release the connection from a PBServerFactory instance (where you 
> usually don't have a reference to) ?

Ahh, I misunderstood.  I don't know much about PBServerFactory, as I only
create one to pass to reactor.listenTCP().  I imagine there must be a method
somewhere in the object heirarchy beneath the Port returned by listenTCP(),
but I don't see anything off hand.

I suppose you could call remotely to the client and have it disconnect
itself. ;-)  There must be a better way however...

-Jasper


PS Incidentally a reference to a PBServerFactory is kept on the Port
returned by listenTCP(), i.e. port.factory .



From maoy at cis.upenn.edu  Mon Sep 27 15:57:33 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Mon, 27 Sep 2004 15:57:33 -0400 (EDT)
Subject: [Twisted-Python] Async reverse DNS lookup?
In-Reply-To: <Pine.LNX.4.53.0409270102580.26110@a.shell.peak.org>
References: <200409251331.12841.uwe@oss4u.com>
	<Pine.LNX.4.53.0409251614280.11872@a.shell.peak.org>
	<200409260159.46806.uwe@oss4u.com>
	<Pine.LNX.4.53.0409270102580.26110@a.shell.peak.org>
Message-ID: <Pine.LNX.4.56.0409271554100.10851@klondike.cis.upenn.edu>

I'm currently using socket.gethostbyaddr(ip), and sometimes it will block
my program for quite a while. What's the correct way to do this in
twisted? Do I have to create a thread for that? Thanks!
Yun




From exarkun at divmod.com  Mon Sep 27 17:03:30 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 27 Sep 2004 21:03:30 GMT
Subject: [Twisted-Python] Async reverse DNS lookup?
In-Reply-To: <Pine.LNX.4.56.0409271554100.10851@klondike.cis.upenn.edu>
Message-ID: <20040927210330.29723.1840318759.divmod.quotient.6767@ohm>

On Mon, 27 Sep 2004 15:57:33 -0400 (EDT), Yun Mao <maoy at cis.upenn.edu> wrote:
>I'm currently using socket.gethostbyaddr(ip), and sometimes it will block
> my program for quite a while. What's the correct way to do this in
> twisted? Do I have to create a thread for that? Thanks!
> Yun
> 

  from twisted.names import client
  from twisted.python import util, log
  from twisted.internet import reactor

  addr = '198.49.126.190'
  ptr = '.'.join(addr.split('.')[::-1]) + '.in-addr.arpa'
  client.lookupPointer(ptr
      ).addCallback(lambda (ans, auth, add): util.println(ans[0].payload.name)
      ).addErrback(log.err
      ).addBoth(lambda r: reactor.stop()
      )
  reactor.run()

  Jp



From maoy at cis.upenn.edu  Mon Sep 27 18:17:02 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Mon, 27 Sep 2004 18:17:02 -0400 (EDT)
Subject: [Twisted-Python] Async reverse DNS lookup?
In-Reply-To: <20040927210330.29723.1840318759.divmod.quotient.6767@ohm>
References: <20040927210330.29723.1840318759.divmod.quotient.6767@ohm>
Message-ID: <Pine.LNX.4.56.0409271811300.10851@klondike.cis.upenn.edu>

Thank you!

Continuing on the topic of DNS lookup, does the default setting call
socket.gethostbyname() when each time I do connectTCP()? I also noticed
that my program is not responsive when DNS operation took a long time to
finish.

I took a short look into the code:  the base.py says that if self.resovler
is None then it will call _internalResolve(), which calls gethostbyname().
If I am right, how to set the default resolver?

Yun


On Mon, 27 Sep 2004 exarkun at divmod.com wrote:

> On Mon, 27 Sep 2004 15:57:33 -0400 (EDT), Yun Mao <maoy at cis.upenn.edu> wrote:
> >I'm currently using socket.gethostbyaddr(ip), and sometimes it will block
> > my program for quite a while. What's the correct way to do this in
> > twisted? Do I have to create a thread for that? Thanks!
> > Yun
> >
>
>   from twisted.names import client
>   from twisted.python import util, log
>   from twisted.internet import reactor
>
>   addr = '198.49.126.190'
>   ptr = '.'.join(addr.split('.')[::-1]) + '.in-addr.arpa'
>   client.lookupPointer(ptr
>       ).addCallback(lambda (ans, auth, add): util.println(ans[0].payload.name)
>       ).addErrback(log.err
>       ).addBoth(lambda r: reactor.stop()
>       )
>   reactor.run()
>
>   Jp
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at divmod.com  Mon Sep 27 21:32:17 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 28 Sep 2004 01:32:17 GMT
Subject: [Twisted-Python] Async reverse DNS lookup?
In-Reply-To: <Pine.LNX.4.56.0409271811300.10851@klondike.cis.upenn.edu>
Message-ID: <20040928013217.29723.1681491466.divmod.quotient.6887@ohm>

On Mon, 27 Sep 2004 18:17:02 -0400 (EDT), Yun Mao <maoy at cis.upenn.edu> wrote:
>Thank you!
> 
> Continuing on the topic of DNS lookup, does the default setting call
> socket.gethostbyname() when each time I do connectTCP()? I also noticed
> that my program is not responsive when DNS operation took a long time to
> finish.
> 
> I took a short look into the code:  the base.py says that if self.resovler
> is None then it will call _internalResolve(), which calls gethostbyname().
> If I am right, how to set the default resolver?
> 
> Yun
> 

  The reactor has a method, "installResolver", which you can pass an object which impleemnts IResolverSimple.  twisted.names.client.theResolver should be usable in this capacity.  It is little tested, as most people simply accept the default blocking lookup behavior, so there may be problems.  If you run across any, please give a shout :)  I'm more than happy to attempt to fix them.

  Jp




From maoy at cis.upenn.edu  Mon Sep 27 22:02:40 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Mon, 27 Sep 2004 22:02:40 -0400 (EDT)
Subject: [Twisted-Python] Async reverse DNS lookup?
In-Reply-To: <20040928013217.29723.1681491466.divmod.quotient.6887@ohm>
References: <20040928013217.29723.1681491466.divmod.quotient.6887@ohm>
Message-ID: <Pine.LNX.4.56.0409272159290.10851@klondike.cis.upenn.edu>

I care about this problem because I'm using twisted in a unstable network,
which is suppose to be up and down often.

I took a look, and felt that the ThreadedResolver looks simple and stable.
I'll give it a shot. Thanks.

Yun


On Tue, 28 Sep 2004 exarkun at divmod.com wrote:

>
>   The reactor has a method, "installResolver", which you can pass an
> object which impleemnts IResolverSimple.
> twisted.names.client.theResolver should be usable in this capacity.  It
> is little tested, as most people simply accept the default blocking
> lookup behavior, so there may be problems.  If you run across any,
> please give a shout :)  I'm more than happy to attempt to fix them.
>
>   Jp
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From maoy at cis.upenn.edu  Mon Sep 27 23:46:47 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Mon, 27 Sep 2004 23:46:47 -0400 (EDT)
Subject: [Twisted-Python] how to get peer IP address in xmlrpc?
In-Reply-To: <Pine.LNX.4.56.0409272159290.10851@klondike.cis.upenn.edu>
References: <20040928013217.29723.1681491466.divmod.quotient.6887@ohm>
	<Pine.LNX.4.56.0409272159290.10851@klondike.cis.upenn.edu>
Message-ID: <Pine.LNX.4.56.0409272344570.10851@klondike.cis.upenn.edu>

Hi twisted folks,

where is the transport class in a twisted.xml.XMLRPC so that I can call
getPeer() to get the IP and port? Or, is there another way to do this?
Thx.

Yun




From daedalus at eigenmagic.com  Tue Sep 28 05:54:54 2004
From: daedalus at eigenmagic.com (Justin Warren)
Date: Tue, 28 Sep 2004 19:54:54 +1000
Subject: [Twisted-Python] BEEPy 0.5 released
Message-ID: <1096365294.26216.31.camel@snafu.melbourne.eigenmagic.net>

Hey folks,

Hope you don't mind my posting this here. I've just released version 0.5
of BEEPy which is an implemention of the Blocks Extensible Exchange
Protocol (BEEP), written using twisted and released under the LGPL.

Check it out if you're so inclined.

-- 
Justin Warren <daedalus at eigenmagic.com>




From selwyn.mccracken at stonebow.otago.ac.nz  Tue Sep 28 07:08:17 2004
From: selwyn.mccracken at stonebow.otago.ac.nz (Selwyn McCracken)
Date: Tue, 28 Sep 2004 23:08:17 +1200
Subject: [Twisted-Python] adding etag and modified arguments to twisted
	feedparser 
Message-ID: <41594621.9000804@stonebow.otago.ac.nz>

hi,

I am having trouble modifying the twisted-based rss aggregator from the 
python cookbook so that feedparser can make use of the update related 
arguments of 'etag' and 'modified' and save bandwith.

(see http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277099)

I realise that the problem is deferred related, but I can't seem to 
resolve the problem, even after reading the deferred documentation.

Anyway, the series of deferred functions that I think are relevant are:

1) def getPage(self, data, args): #args is the rss feed link
         return client.getPage(args,timeout=TIMEOUT)


2) def parseFeed(self, feed):
	parsed = feedparser.parse(cStringIO.StringIO(feed))

The problem is that getPage() requests the entire rss feed, and then 
passes the stream through to feedparser.parse. Normally however, 
feedparser.parse() takes furthers arguments of 'etag' and 'modified' so 
that only new feed information is returned, thereby saving bandwidth.

I tried modifying getPage() to return feedparser.parse(args), but it 
runs substantially slower than the original method, I presume in a 
synchronous manner.

Any assistance would be greatly appreciated.

cheers,
Selwyn




From exarkun at divmod.com  Tue Sep 28 09:14:47 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 28 Sep 2004 13:14:47 GMT
Subject: [Twisted-Python] adding etag and modified arguments to twisted
	feedparser 
In-Reply-To: <41594621.9000804@stonebow.otago.ac.nz>
Message-ID: <20040928131447.29723.176798352.divmod.quotient.7177@ohm>

On Tue, 28 Sep 2004 23:08:17 +1200, Selwyn McCracken <selwyn.mccracken at stonebow.otago.ac.nz> wrote:
>hi,
> 
> I am having trouble modifying the twisted-based rss aggregator from the 
> python cookbook so that feedparser can make use of the update related 
> arguments of 'etag' and 'modified' and save bandwith.
> 
> [snip]

  Hi Selwyn,

    You may want to ask this question on the twisted-web mailing list.

  Jp



From thomas.weholt at gmail.com  Tue Sep 28 09:32:09 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Tue, 28 Sep 2004 15:32:09 +0200
Subject: [Twisted-Python] Serving files from other web-servers on a
	web-server
Message-ID: <ffb7b7f804092806322f3c2730@mail.gmail.com>

Hi,

I got a subnett full of web-servers using twisted and a main
web-server based on twisted as well. The main server is available to
the outside world. I want to serve files on the other web-servers on
the subnett thru the main web-server. There may be many concurrent
users on the main server so it has to be able to handle many clients.

A few users connect to the main server, requesting files on the
subnett web-servers. The main server reads data from several subnett
servers and writes the data back to the requesting clients. How can I
do this in twisted, without blocking, and handle several clients?
We're not talking hardcore P2P here with thousands of clients, most
likely 2-5 concurrent users, 10 at the most.

Any hints? Or doesn't this make any sense?

-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From itamar at itamarst.org  Tue Sep 28 10:12:51 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 28 Sep 2004 10:12:51 -0400
Subject: [Twisted-Python] how to get peer IP address in xmlrpc?
In-Reply-To: <Pine.LNX.4.56.0409272344570.10851@klondike.cis.upenn.edu>
References: <20040928013217.29723.1681491466.divmod.quotient.6887@ohm>
	<Pine.LNX.4.56.0409272159290.10851@klondike.cis.upenn.edu>
	<Pine.LNX.4.56.0409272344570.10851@klondike.cis.upenn.edu>
Message-ID: <1096380771.22248.2.camel@sheriffpony>

On Mon, 2004-09-27 at 23:46, Yun Mao wrote:

> where is the transport class in a twisted.xml.XMLRPC so that I can call
> getPeer() to get the IP and port? Or, is there another way to do this?
> Thx.

Make a wrapper resource that provides this to the xmlrpc resource. In
any case, web questions probably belong on the twisted-web mailing list.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From exarkun at divmod.com  Tue Sep 28 10:58:50 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 28 Sep 2004 14:58:50 GMT
Subject: [Twisted-Python] Serving files from other web-servers on a
	web-server
In-Reply-To: <ffb7b7f804092806322f3c2730@mail.gmail.com>
Message-ID: <20040928145850.29723.918582170.divmod.quotient.7221@ohm>

On Tue, 28 Sep 2004 15:32:09 +0200, Thomas Weholt <thomas.weholt at gmail.com> wrote:
>Hi,
> 
> I got a subnett full of web-servers using twisted and a main
> web-server based on twisted as well. The main server is available to
> the outside world. I want to serve files on the other web-servers on
> the subnett thru the main web-server. There may be many concurrent
> users on the main server so it has to be able to handle many clients.
> 
> A few users connect to the main server, requesting files on the
> subnett web-servers. The main server reads data from several subnett
> servers and writes the data back to the requesting clients. How can I
> do this in twisted, without blocking, and handle several clients?
> We're not talking hardcore P2P here with thousands of clients, most
> likely 2-5 concurrent users, 10 at the most.
> 
> Any hints? Or doesn't this make any sense?

  Hi Thomas,

    You may want to use distrib or one of the proxy classes.  Please direct further questions to the twisted-web mailing list.

  Jp



From smadi at power.eng.mcmaster.ca  Tue Sep 28 16:21:38 2004
From: smadi at power.eng.mcmaster.ca (m. smadi)
Date: Tue, 28 Sep 2004 16:21:38 -0400
Subject: [Twisted-Python] new to twisted
Message-ID: <4159C7D2.4090706@power.eng.mcmaster.ca>

hi;

i was writing third party sip call controller when a friend suggested i 
use twisted.  I think it will save me a lot of time, but i had trouble 
with the following when installing:
cvs the pserial and pcrypto required package.  the cvs server complians 
about a wrong password (any hints)

i continued without these package and installed using setup.py.  Where 
is a good place to start (the tutorial provided is not really very 
great) - any other suggestions?

moe smadi



From selwyn.mccracken at stonebow.otago.ac.nz  Tue Sep 28 17:44:32 2004
From: selwyn.mccracken at stonebow.otago.ac.nz (Selwyn McCracken)
Date: Wed, 29 Sep 2004 09:44:32 +1200
Subject: [Twisted-Python] adding etag and modified arguments to twisted
	feedparser
In-Reply-To: <20040928131447.29723.176798352.divmod.quotient.7177@ohm>
References: <20040928131447.29723.176798352.divmod.quotient.7177@ohm>
Message-ID: <4159DB40.7020000@stonebow.otago.ac.nz>

sorry, and thanks

exarkun at divmod.com wrote:
> On Tue, 28 Sep 2004 23:08:17 +1200, Selwyn McCracken <selwyn.mccracken at stonebow.otago.ac.nz> wrote:
> 
>>hi,
>>
>>I am having trouble modifying the twisted-based rss aggregator from the 
>>python cookbook so that feedparser can make use of the update related 
>>arguments of 'etag' and 'modified' and save bandwith.
>>
>>[snip]
> 
> 
>   Hi Selwyn,
> 
>     You may want to ask this question on the twisted-web mailing list.
> 
>   Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From exarkun at divmod.com  Tue Sep 28 19:22:36 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 28 Sep 2004 23:22:36 GMT
Subject: [Twisted-Python] new to twisted
In-Reply-To: <4159C7D2.4090706@power.eng.mcmaster.ca>
Message-ID: <20040928232236.29723.417593103.divmod.quotient.7457@ohm>

On Tue, 28 Sep 2004 16:21:38 -0400, "m. smadi" <smadi at power.eng.mcmaster.ca> wrote:
>hi;
> 
> i was writing third party sip call controller when a friend suggested i 
> use twisted.  I think it will save me a lot of time, but i had trouble 
> with the following when installing:
> cvs the pserial and pcrypto required package.  the cvs server complians 
> about a wrong password (any hints)

  Twisted doesn't use CVS anymore.  You want to download the released version, 1.3.0, or the packaged version for your platform, or use SVN to check it out.

  PySerial and PyCrypto are optional.  As long as you're only interested SIP, you won't miss them.

> 
> i continued without these package and installed using setup.py.  Where 
> is a good place to start (the tutorial provided is not really very 
> great) - any other suggestions?

  The IRC channel (#twisted / irc.freenode.net), the mailing list, the source code.  I doubt you'll find much documentation on using the SIP code, beyond the automatically generated API documents.  Reading the UDP howto and the cred howto is probably a good start, since SIP relies on both of those aspects of Twisted.

  Jp




From uwe at oss4u.com  Tue Sep 28 20:50:59 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 28 Sep 2004 17:50:59 -0700
Subject: [Twisted-Python] PB release connection
In-Reply-To: <200409251331.12841.uwe@oss4u.com>
References: <200409251331.12841.uwe@oss4u.com>
Message-ID: <200409281750.59862.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Ok, I have to answer this one myself (after 2 days....)
It's not easy to release a connection from the server side since the avatar 
object retains no reference to the underlying transport.
What I did now is subclass the pb.Avatar class and add the line

self.broker=broker
to the perspectiveMessageReceived method.

Not a nice solution, but it works. After the first message that came thru the 
socket (in my case) you can call
self.broker.transport.loseConnection()
in your usual "perspective" (which needs to implement the modified Avatar 
class).

If you're using a pb.Root object you can overwrite the rootObject method to 
retain a reference to the broker instance (meaning subclass the flavor.Root 
class with a modified rootObject method and use this new root class as 
argument to the ServerFactory)

Hope that saves someone a day of digging in the sources.

Uwe

On Saturday 25 September 2004 01:31 pm, Uwe C. Schroeder wrote:
> Hi,
>
> after browsing the docs,api and mailinglist I couldn't find what I'm
> looking for. I'm using a simple pb server with a pb.Root object (don't need
> authentication). What I want to do is release the connection from the
> server-side. Server code looks like:
>
> class MyPerspective(pb.Root):
> 	....
> 	....
>
>
> main:
> reactor.listenTCP(port,pb.PBServerFactory(MyPerspective(self)))
>
>
> so far so good. MyPerspective receives all the remote_ calls. Now I'd like
> to be able to get rid of a specific client (which holds a remote-reference
> to MyPerspective). With the old pb api there was a way to do call
> perspective.broker.transport.loseConnection(), which I was using on the
> client side to end the connection.
>
> I can't see anything like this with the new API that would allow me to
> initiate the "kick off" from the server side.
>
> Can this be done? What would be the propper way to release a connection
> from the server side?
>
> Thanks for any enlightenment.
>
> 	Uwe

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBWgbzjqGXBvRToM4RAtmRAJ9FaV9+6S46hbzw1HMj1BmXkLJUygCePlf0
TXAB+B5mDgndRz1M/mAWxEA=
=K25y
-----END PGP SIGNATURE-----




From zanesdad at bellsouth.net  Wed Sep 29 09:02:22 2004
From: zanesdad at bellsouth.net (Jeremy Jones)
Date: Wed, 29 Sep 2004 09:02:22 -0400
Subject: [Twisted-Python] new to twisted
In-Reply-To: <4159C7D2.4090706@power.eng.mcmaster.ca>
References: <4159C7D2.4090706@power.eng.mcmaster.ca>
Message-ID: <415AB25E.2040701@bellsouth.net>

m. smadi wrote:

> hi;
>
> i was writing third party sip call controller when a friend suggested 
> i use twisted.  I think it will save me a lot of time, but i had 
> trouble with the following when installing:
> cvs the pserial and pcrypto required package.  the cvs server 
> complians about a wrong password (any hints)
>
> i continued without these package and installed using setup.py.  Where 
> is a good place to start (the tutorial provided is not really very 
> great) - any other suggestions?
>
> moe smadi
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

I wonder if Shtoom will be of any assistance to you.  Check out 
http://www.divmod.org/Home/Projects/Shtoom/  From the webpage:

"""

Shtoom is a open-source, cross-platform VoIP softphone, implemented in 
Python. As well as the basic phone, the package also includes a number 
of other applications -

    * shtoom - the end-user phone
    * shtam - a simple answering machine/voicemail application
    * shmessage - an announcement server

"""

It uses Twisted.  Not sure to what extent, though.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040929/1843deac/attachment.htm 

From tom.dyson at torchbox.com  Wed Sep 29 11:22:32 2004
From: tom.dyson at torchbox.com (tom dyson)
Date: Wed, 29 Sep 2004 16:22:32 +0100
Subject: [Twisted-Python] Communicating between listeners
Message-ID: <622628E9-122B-11D9-887F-0003938AE36A@torchbox.com>

I'm new to Twisted, and network programming in general. Can anyone 
provide an example that might help me code the following functionality:

* Server listens on two ports, one TCP, one UDP
* Incoming UDP datagrams contain an identifying string
* A message is broadcast to all connected TCP clients whose username 
matches the UDP ID.

In particular, I can't work out how to access details of the current 
TCP clients - and trigger a new message to some of them - from the UDP 
listener.

Many thanks

Tom

-----------------+
tom dyson
t: +44 (0)1608 811870
m: +44 (0)7958 752657
http://torchbox.com




From exarkun at divmod.com  Wed Sep 29 13:28:30 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 29 Sep 2004 17:28:30 GMT
Subject: [Twisted-Python] Communicating between listeners
In-Reply-To: <622628E9-122B-11D9-887F-0003938AE36A@torchbox.com>
Message-ID: <20040929172830.29723.26053217.divmod.quotient.7911@ohm>

On Wed, 29 Sep 2004 16:22:32 +0100, tom dyson <tom.dyson at torchbox.com> wrote:
>I'm new to Twisted, and network programming in general. Can anyone 
> provide an example that might help me code the following functionality:
> 
> * Server listens on two ports, one TCP, one UDP
> * Incoming UDP datagrams contain an identifying string
> * A message is broadcast to all connected TCP clients whose username 
> matches the UDP ID.
> 
> In particular, I can't work out how to access details of the current 
> TCP clients - and trigger a new message to some of them - from the UDP 
> listener.
> 
> Many thanks

  Something like this, perhaps:

    from twisted.internet import protocol, reactor
    from twisted.application import service

    class SomeFactory(protocol.ServerFactory):
        def __init__(self, service):
            self.service = service

        def buildProtocol(self, addr):
            p = protocol.ServerFactory.buildProtocol(self, addr)
            self.service.addClient(p)
            return p

    class SomeDatagramProtocol(protocol.DatagramProtocol):
        def __init__(self, service):
            self.service = service

        def datagramReceived(self, dgram, addr):
            id, msg = extractStuff(dgram)
            self.service.broadcastMessage(id, msg)

    class FoobleService(service.Service):
        def startService(self):
            udpP = SomeDatagramProtocol(self)
            self.udpPort = reactor.listenUDP(..., udpP)
            tcpF = SomeFactory(self)
            self.tcpPort = reactor.listenTCP(..., tcpF)
            self.clients = []

        def stopService(self):
            self.udpPort.stopListening()
            self.tcpPort.stopListening()
            del self.udpPort, self.tcpPort

        # The interesting bit
        def addClient(self, proto):
            self.clients.append(proto)

        def broadcastMessage(self, id, msg):
            for c in self.clients:
                if c.id == id:
                    c.sendMessage(msg)

  In other words, construct a system for tracking clients, based on the callbacks Twisted does provide, and then access those clients as desired.  Cleaning up after clients which drop their connection is left as an exercise for the reader.

  Jp




From dchesmore at mcleodusa.com  Wed Sep 29 15:37:48 2004
From: dchesmore at mcleodusa.com (Chesmore, Daniel R.)
Date: Wed, 29 Sep 2004 14:37:48 -0500
Subject: [Twisted-Python] RE: Twisted-Python Digest, Vol 6, Issue 37
Message-ID: <A71A102F102594419C79D595A14A96AE013CB697@iacedexch09.mcld.net>

Has anyone started making a yahoo client like the aim and msn client that is
in twisted? 

Daniel Chesmore 
Systems Admin
E-Mail: dchesmore at mcleodusa.com 
Web Site: http://www.mcleodusa.com




NOTICE: This electronic mail transmission may contain confidential
information and is intended only for the person(s) named.  Any use, copying
or disclosure by any other person is strictly prohibited. If you have
received this transmission in error, please notify the sender via e-mail.






From thomas.weholt at gmail.com  Wed Sep 29 17:47:37 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Wed, 29 Sep 2004 23:47:37 +0200
Subject: [Twisted-Python] Problems using Twisted adbapi
Message-ID: <ffb7b7f80409291447776b6f47@mail.gmail.com>

Hi,

My code below is an attempt to write a general database-abstraction
layer for Twisted. I got one allready supporting SQLite and MySQL (
MSSQL and PostgreSQL in the works ) but it blocks and doesn't use
deffereds etc so I thought I'd try to write one that fits better with
the Twisted framework. It will mainly be used in web-applications. The
basic example is ( and don't laugh, this is my first attempt at using
deferreds etc. ) :

from twisted.enterprise import adbapi

class TestConn:

    def __init__(self, dbname):
        self.dbname = dbname
        self.dbpool = adbapi.ConnectionPool("sqlite", db=dbname)

    def returnOk(self, o):
        return True

    def returnFailure(self, o):
        return False

    def returnResult(self, result):
        return result

    def _returnResult(self, deferred, count = None):
        if count:
            return self.dbpool.fetchmany(count)
        else:
            return self.dbpool.fetchall()

    def execSql(self, sql, params = {}):
        def run(sql, params):
            return self.dbpool.runQuery(sql, params)
        d = run(sql, params)
        d.addCallback(self._returnResult)
        d.addErrback(self.returnFailure)
        d.addCallback(self.returnResult)

    def fetch(self, sql, params = {}):
        def run(sql, params):
            return self.dbpool.runQuery(sql, params)
        d = run(sql, params)
        d.addCallback(self.returnResult)
        d.addErrback(self.returnFailure)

s = TestConn(r'c:\temp\db1.db')
print s.execSql('create table table1 (a int, b int)')
print s.execSql('insert into table1 (a,b) values (1,1)')
print s.execSql('insert into table1 (a,b) values (1,2)')
print s.execSql('insert into table1 (a,b) values (2,2)')
print s.fetch('select * from table1')
print s.fetch('select a from table1')

And the result is :

None
None
None
None
None
None

Why ??? What I want is a general purpose "connection"-class which can
execute queries and fetch data from a database, without having to
create special methods returning deferreds, adding callbacks etc. to
get the result of the query.

-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From exarkun at divmod.com  Wed Sep 29 18:12:04 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 29 Sep 2004 22:12:04 GMT
Subject: [Twisted-Python] Problems using Twisted adbapi
In-Reply-To: <ffb7b7f80409291447776b6f47@mail.gmail.com>
Message-ID: <20040929221204.29723.1831406569.divmod.quotient.8046@ohm>

On Wed, 29 Sep 2004 23:47:37 +0200, Thomas Weholt <thomas.weholt at gmail.com> wrote:
>Hi,
> 
> My code below is an attempt to write a general database-abstraction
> layer for Twisted. I got one allready supporting SQLite and MySQL (
> MSSQL and PostgreSQL in the works ) but it blocks and doesn't use
> deffereds etc so I thought I'd try to write one that fits better with
> the Twisted framework. It will mainly be used in web-applications. The
> basic example is ( and don't laugh, this is my first attempt at using
> deferreds etc. ) :

  Hey Thomas,

    I think you're pretty close.  See below for a couple minor code changes.

> 
> from twisted.enterprise import adbapi
> 
> class TestConn:
> 
>     def __init__(self, dbname):
>         self.dbname = dbname
>         self.dbpool = adbapi.ConnectionPool("sqlite", db=dbname)
> 
>     def returnOk(self, o):
>         return True
> 
>     def returnFailure(self, o):
>         return False
> 
>     def returnResult(self, result):
>         return result
> 
>     def _returnResult(self, deferred, count = None):
>         if count:
>             return self.dbpool.fetchmany(count)
>         else:
>             return self.dbpool.fetchall()
> 
>     def execSql(self, sql, params = {}):
>         def run(sql, params):
>             return self.dbpool.runQuery(sql, params)
>         d = run(sql, params)
>         d.addCallback(self._returnResult)
>         d.addErrback(self.returnFailure)
>         d.addCallback(self.returnResult)
          return d
> 
>     def fetch(self, sql, params = {}):
>         def run(sql, params):
>             return self.dbpool.runQuery(sql, params)
>         d = run(sql, params)
>         d.addCallback(self.returnResult)
>         d.addErrback(self.returnFailure)
          return d
> 
> s = TestConn(r'c:\temp\db1.db')
> print s.execSql('create table table1 (a int, b int)')
> print s.execSql('insert into table1 (a,b) values (1,1)')
> print s.execSql('insert into table1 (a,b) values (1,2)')
> print s.execSql('insert into table1 (a,b) values (2,2)')
> print s.fetch('select * from table1')
> print s.fetch('select a from table1')
> 

  With the two added returns, you should no longer see None in the output, although you will also not see your actual results.  I think this is what you expected, though.

  Jp



From slyphon at twistedmatrix.com  Thu Sep 30 01:25:43 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Thu, 30 Sep 2004 01:25:43 -0400
Subject: [Twisted-Python] Seeking Twisted/Python Contractors
In-Reply-To: <20040924205835.GA89572@prometheusresearch.com>
References: <20040924205835.GA89572@prometheusresearch.com>
Message-ID: <415B98D7.8090502@twistedmatrix.com>



Mr. Evans,

Hello, my name is Jonathan Simms, and I've been part of the Twisted core
team for a little over a year, and have worked for the Divmod
Corporation for ten months.

While working for Divmod, I wrote a web-based functional testing
framework to automate testing of their web application, Quotient. It
consisted of an HTTP client, a dom-parsing/inspection API, and a
test-descriptiopn API called "Navtags" that allowed a person to specify
the steps that the tests were to take traversing the site and the
assertions to be made without having to write nasty deferred callback
code. I wrote Divmod's release scripts, several repository-management
scripts, performance-statistics collection and stress testing code,
automated/remote application management code, and documentation pieces
for the developers.

I am currently refactoring the Twisted test framework, trial, and have
succeeded in making it three to four times faster than the current
version in Twisted's svn-trunk. It is now also easily extensible, and
will be integrated more tightly with Brian Warner's Buildbot program.
I have written tutorials on twisted, one of which was a step-by-step
tutorial on how to create a web application using the (now deprecated)
woven package. Another one, which is still in the works, deals with the
new zope.interface component system.

I have been working as part of a distributed team for almost a year now.
I am a competent programmer, a talented communicator, motivated, and I am
available immediately.

If it makes a difference, I have a Bachelor of Science degree in
Computer Science from the State University of New York.

If you need references, you can speak with Glyph Lefkowitz
(glyph at divmod.com) or JP Calderone (exarkun at divmod.com), either of whom
can speak for both the quality of my code, and my dedication to my work.

I would be very interested in talking with you further about what kind
of projects you have.

Thank You,

Jonathan Simms
slyphon at twistedmatrix.com






From behnel_ml at gkec.informatik.tu-darmstadt.de  Thu Sep 30 04:12:18 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Thu, 30 Sep 2004 10:12:18 +0200
Subject: [Twisted-Python] twisted.internet and IPv6
Message-ID: <415BBFE2.1090401@gkec.informatik.tu-darmstadt.de>

Hi!

I'm curious: how much work would it be to enable IPv6 support in twisted.internet?

When I do

---------------------------------------
cd twisted/internet
fgrep INET *.py
---------------------------------------

I get a number of references to IPv4 that make me believe that t.i.* is not quite IPv6 clean by itself:

---------------------------------------
default.py:        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
default.py:        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
javareactor.py:        return ('INET', InetAddress.getLocalHost().getHostAddress(), self.jport.port)
javareactor.py:        return ('INET', addr.getHostAddress(), self.skt.getPort())
javareactor.py:        return ("INET", self.host, self.port)
tcp.py:    addressFamily = socket.AF_INET
tcp.py:        return address.IPv4Address('TCP', *(self.socket.getsockname() + ('INET',)))
tcp.py:        return address.IPv4Address('TCP', *(self.addr + ('INET',)))
tcp.py:        return address.IPv4Address('TCP', *(self.socket.getsockname() + ('INET',)))
tcp.py:        return address.IPv4Address('TCP', *(self.client + ('INET',)))
tcp.py:    addressFamily = socket.AF_INET
tcp.py:        return address.IPv4Address('TCP', *(self.socket.getsockname() + ('INET',)))
tcp.py:        return address.IPv4Address('TCP', self.host, self.port, 'INET')
udp.py:    addressFamily = socket.AF_INET
udp.py:        return address.IPv4Address('UDP', *(self.socket.getsockname() + ('INET_UDP',)))
udp.py:        Returns a tuple of ('INET_UDP', hostname, port), indicating
udp.py:        return address.IPv4Address('UDP', self.remotehost, self.remoteport, 'INET_UDP')
---------------------------------------

What would be needed? Would a new reactor be a good solution? "reactor6" ? Or rather extending the current one?

I'd say a reactor6 would be cleaner, but on the other hand, a simple flag could do the trick from the API perspective.

Any comments on this?

Stefan




From dialtone at gmail.com  Thu Sep 30 05:24:20 2004
From: dialtone at gmail.com (Valentino Volonghi)
Date: Thu, 30 Sep 2004 11:24:20 +0200
Subject: [Twisted-Python] twisted.internet and IPv6
In-Reply-To: <415BBFE2.1090401@gkec.informatik.tu-darmstadt.de>
References: <415BBFE2.1090401@gkec.informatik.tu-darmstadt.de>
Message-ID: <c893b85304093002245477a208@mail.gmail.com>

On Thu, 30 Sep 2004 10:12:18 +0200, Stefan Behnel
<behnel_ml at gkec.informatik.tu-darmstadt.de> wrote:
> Hi!
> 
> I'm curious: how much work would it be to enable IPv6 support in twisted.internet?

> I get a number of references to IPv4 that make me believe that t.i.* is not quite IPv6 clean by itself:

> What would be needed? Would a new reactor be a good solution? "reactor6" ? Or rather extending the current one?
> 
> I'd say a reactor6 would be cleaner, but on the other hand, a simple flag could do the trick from the API perspective.
> 
> Any comments on this?

That a new reactor would solve nothing since the reactor is not the
responsible for connections. Connection.py and tcp.py are the modules
you are looking for (those that create the connection).

Also there's a problem if you only write a new reactor, that IPv6
couldn't be used in other reactors, which is bad :).

I'd rather hack on tcp.py and Connection.py and address.py (all in
twisted.internet).

Those sockets that you see in default.py are to wake up the main
thread under windows IIRC.

Since Twisted is very layered what happens at a lower level is
actually unknown to the upper layers. So yes, twisted is not yet ready
for IPv6, but implementing it won't brake anything (unless you use
IPv6 by default).

Maybe providing connectTCP6 could be a solution.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Proud Gentoo User
Blog: http://vvolonghi.blogspot.com
Home Page: http://xoomer.virgilio.it/dialtone/



From exarkun at divmod.com  Thu Sep 30 09:19:35 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Thu, 30 Sep 2004 13:19:35 GMT
Subject: [Twisted-Python] twisted.internet and IPv6
In-Reply-To: <415BBFE2.1090401@gkec.informatik.tu-darmstadt.de>
Message-ID: <20040930131935.29723.282179053.divmod.quotient.8399@ohm>

On Thu, 30 Sep 2004 10:12:18 +0200, Stefan Behnel <behnel_ml at gkec.informatik.tu-darmstadt.de> wrote:
>Hi!
> 
> I'm curious: how much work would it be to enable IPv6 support in twisted.internet?
> 

  Not very much.  About a year ago, I wrote this:

    http://cvs.twistedmatrix.com/cvs/trunk/sandbox/exarkun/ipv6.py?view=markup&rev=10540&root=Twisted

  This is no longer how I'd like to see IPv6 supported in Twisted, but it gives an idea of how few changes are required.

  Jp



From simon at hedberg.net  Thu Sep 30 14:46:41 2004
From: simon at hedberg.net (Simon)
Date: Thu, 30 Sep 2004 20:46:41 +0200
Subject: [Twisted-Python] Problems using Twisted adbapi
In-Reply-To: <E1CD5Dq-0007cJ-01@pyramid.twistedmatrix.com>
Message-ID: <000001c4a71d$d397af00$456271d5@hp>

In response to Thomas Weholts question regarding writing a general
database-abstraction layer for Twisted I thought I'd share this with you
all. I have made a rewrite of the adbapi to use ADOdb for Python
(http://adodb.sourceforge.net/#pydownload). It seems to be working fine
but I haven't really tested it since I just finished it yesterday.
Let me know of this is something that sounds useful to any of you. 
I'm also thinking of doing a rewrite of the sqlreflector and rowobject
to support a more dynamic type checking and validation.
Since I'm quite new in this community I don't really know what has been
done before and not. So any input is appreciated.

Cheers,
Simon




From dave at krondo.com  Thu Sep 30 16:03:16 2004
From: dave at krondo.com (Dave Peticolas)
Date: Thu, 30 Sep 2004 13:03:16 -0700
Subject: [Twisted-Python] Problems using Twisted adbapi
In-Reply-To: <000001c4a71d$d397af00$456271d5@hp>
References: <000001c4a71d$d397af00$456271d5@hp>
Message-ID: <1096574596.18124.52.camel@oneiros>

On Thu, 2004-09-30 at 11:46, Simon wrote:
> In response to Thomas Weholts question regarding writing a general
> database-abstraction layer for Twisted I thought I'd share this with you
> all. I have made a rewrite of the adbapi to use ADOdb for Python
> (http://adodb.sourceforge.net/#pydownload). It seems to be working fine
> but I haven't really tested it since I just finished it yesterday.
> Let me know of this is something that sounds useful to any of you. 
> I'm also thinking of doing a rewrite of the sqlreflector and rowobject
> to support a more dynamic type checking and validation.
> Since I'm quite new in this community I don't really know what has been
> done before and not. So any input is appreciated.

I'm not too familiar with ADOdb, what are the benefits?
By rewrite, do you mean that the new version only uses
ADOdb, or have you added ADOdb as a supported back-end?

sqlreflector and row could definitely use a reworking.
I don't think they are used much. I think people mainly
use adbapi and write their own object mapping system.
What sort of things did you have in mind?

dave





From d00jb at efd.lth.se  Wed Sep  1 03:09:21 2004
From: d00jb at efd.lth.se (Joakim Bech)
Date: Wed, 1 Sep 2004 11:09:21 +0200 (MEST)
Subject: [Twisted-Python] Perspective Broker and UDP, is it possible?
Message-ID: <Pine.GSO.4.58.0409011022080.11345@login-10.efd.lth.se>

I'm doing my master thesis in computer science, and the topic
for the project is "Managment of network delays in computer games".
The software im going to use is Python with Twisted and Pygame.
Right now I'm trying to get to know how different parts of Twisted
interact with each other. And my first question is:

Is it possible to use Perspective Broker with UDP?
I've tried modifying the examples here
(http://www.twistedmatrix.com/documents/current/howto/pb-usage),
with DatagramProtocol and so on, but I haven't got it to work.
I suspect that it is impossible due to that UDPs is connectionless,
but there's a lot of "magic" in Twisted, so I thought I'd better
ask the pros'.





Mvh // Joakim Bech
Mail: d00jb at efd.lth.se



From exarkun at divmod.com  Wed Sep  1 08:02:45 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 01 Sep 2004 10:02:45 -0400
Subject: [Twisted-Python] Perspective Broker and UDP, is it possible?
In-Reply-To: <Pine.GSO.4.58.0409011022080.11345@login-10.efd.lth.se>
References: <Pine.GSO.4.58.0409011022080.11345@login-10.efd.lth.se>
Message-ID: <4135D685.1060202@divmod.com>

Joakim Bech wrote:
> I'm doing my master thesis in computer science, and the topic
> for the project is "Managment of network delays in computer games".
> The software im going to use is Python with Twisted and Pygame.
> Right now I'm trying to get to know how different parts of Twisted
> interact with each other. And my first question is:
> 
> Is it possible to use Perspective Broker with UDP?
> I've tried modifying the examples here
> (http://www.twistedmatrix.com/documents/current/howto/pb-usage),
> with DatagramProtocol and so on, but I haven't got it to work.
> I suspect that it is impossible due to that UDPs is connectionless,
> but there's a lot of "magic" in Twisted, so I thought I'd better
> ask the pros'.
> 

   The current version of PB has no support for UDP.

   Jp



From matt.feifarek at gmail.com  Wed Sep  1 12:31:43 2004
From: matt.feifarek at gmail.com (Matt Feifarek)
Date: Wed, 1 Sep 2004 14:31:43 -0400
Subject: [Twisted-Python] Spawning processes and multiple CPU's.
Message-ID: <6fb6dbfe04090111314cdd53f4@mail.gmail.com>

I'm using reactor.spawnProcess to perform some inherently-blocking
code (imagemagick scripts).

I'm curious if multiple CPU's would help me out. I know that a single
python (and therefore a single reactor) cannot benefit from multiple
CPU's, but since the spawn process is a kernel call, will it be sent
to both processors?

Thanks.



From corydodt at twistedmatrix.com  Wed Sep  1 12:42:11 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Wed, 01 Sep 2004 11:42:11 -0700
Subject: [Twisted-Python] Spawning processes and multiple CPU's.
In-Reply-To: <6fb6dbfe04090111314cdd53f4@mail.gmail.com>
References: <6fb6dbfe04090111314cdd53f4@mail.gmail.com>
Message-ID: <41361803.2050909@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

The invocation of an imagemagick process is certainly a candidate for the
kernel to put on a different CPU.  Indeed, that's one of the biggest
advantages of using spawnProcess instead of (well, lots of other things).

C


Matt Feifarek wrote:

| I'm using reactor.spawnProcess to perform some inherently-blocking
| code (imagemagick scripts).
|
| I'm curious if multiple CPU's would help me out. I know that a single
| python (and therefore a single reactor) cannot benefit from multiple
| CPU's, but since the spawn process is a kernel call, will it be sent
| to both processors?
|
| Thanks.
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBNhgD3A5SrXAiHQcRAjWgAJ0R0rgaMRMGMKXKwUgjdS+dYKUozwCgho1c
aKEAcIv0yCee3dv/2IzHvPo=
=K95F
-----END PGP SIGNATURE-----



From general at eepatents.com  Wed Sep  1 13:41:30 2004
From: general at eepatents.com (Ed Suominen)
Date: Wed, 1 Sep 2004 12:41:30 -0700
Subject: [Twisted-Python] Re: Perspective Broker and UDP, is it possible?
In-Reply-To: <E1C2ZOv-0001HG-02@pyramid.twistedmatrix.com>
References: <E1C2ZOv-0001HG-02@pyramid.twistedmatrix.com>
Message-ID: <200409011241.30140.general@eepatents.com>

> I'm doing my master thesis in computer science, and the topic
> for the project is "Managment of network delays in computer games".
> The software im going to use is Python with Twisted and Pygame.
> Right now I'm trying to get to know how different parts of Twisted
> interact with each other. And my first question is:
> 
> Is it possible to use Perspective Broker with UDP?
> I've tried modifying the examples here
> (http://www.twistedmatrix.com/documents/current/howto/pb-usage),
> with DatagramProtocol and so on, but I haven't got it to work.
> I suspect that it is impossible due to that UDPs is connectionless,
> but there's a lot of "magic" in Twisted, so I thought I'd better
> ask the pros'.

It is certainly possible, just not with the current version of PB. In any 
modified version (go for it!), I think you would need to provide client 
identifying info with each burst of data, or limit "connections" to just one 
client at a time per port, to keep track of things.

I'm not a twisted expert, but I do use it extensively. I have also learned an 
embarrassingly large amount of stuff about low-level TCP/IP due to too much 
experience with a vastly inferior high-level language [1].

[1] http://tinyurl.com/5nrkp

Ed Suominen
Registered Patent Agent
Open-Source Software Author (yes, both...)
Web Site: http://www.eepatents.com



From tv at twistedmatrix.com  Thu Sep  2 01:16:35 2004
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 02 Sep 2004 10:16:35 +0300
Subject: [Twisted-Python] Re: Perspective Broker and UDP, is it possible?
In-Reply-To: <200409011241.30140.general@eepatents.com>
References: <E1C2ZOv-0001HG-02@pyramid.twistedmatrix.com>
	<200409011241.30140.general@eepatents.com>
Message-ID: <4136C8D3.5010002@twistedmatrix.com>

Ed Suominen wrote:
> It is certainly possible, just not with the current version of PB. In any 
> modified version (go for it!), I think you would need to provide client 
> identifying info with each burst of data, or limit "connections" to just one 
> client at a time per port, to keep track of things.

The UDP pseudoconnection can be identified by 
(srcIP,srcPort,dstIP,dstPort), so one server port can serve everything 
as long as all the clients use different source IP addresses or ports.

To modify a protocol from TCP to UDP, you need to consider the things 
TCP used to provide you with:

- reliability (resending, acknowledgement)
- segmentation (long messages that will not fit a packet)
- bandwidth estimation (no point in sending at 100% rate, as the 
internet connection will never be that fast)
- antispoof (to fake TCP, you really need to be able to receive packets 
sent to the IP address you are spoofing; UDP with no extra checks can be 
spoofed blind)

etc.

Quite often, it's just not worth it to drop TCP. Especially when the 
problem at hand is _not_ tightly interconnected clusters in a secure and 
managed LAN, but WAN connections with untrusted parties over an 
untrusted network without guaranteed performance.



From matt.feifarek at gmail.com  Thu Sep  2 09:45:23 2004
From: matt.feifarek at gmail.com (Matt Feifarek)
Date: Thu, 2 Sep 2004 10:45:23 -0500
Subject: [Twisted-Python] Spawning processes and multiple CPU's.
In-Reply-To: <41361803.2050909@twistedmatrix.com>
References: <6fb6dbfe04090111314cdd53f4@mail.gmail.com>
	<41361803.2050909@twistedmatrix.com>
Message-ID: <6fb6dbfe04090208452c8598f7@mail.gmail.com>

Yes, I agree that it's a candidate. Does it work that way? 

Does spawnProcess take advantage of multiple CPU's?

On Wed, 01 Sep 2004 11:42:11 -0700, Cory Dodt
<corydodt at twistedmatrix.com> wrote:
> 
> The invocation of an imagemagick process is certainly a candidate for the
> kernel to put on a different CPU.  Indeed, that's one of the biggest
> advantages of using spawnProcess instead of (well, lots of other things).
> 
> C
> 
> Matt Feifarek wrote:
> 
> | I'm using reactor.spawnProcess to perform some inherently-blocking



From corydodt at twistedmatrix.com  Thu Sep  2 09:57:53 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 02 Sep 2004 08:57:53 -0700
Subject: [Twisted-Python] Spawning processes and multiple CPU's.
In-Reply-To: <6fb6dbfe04090208452c8598f7@mail.gmail.com>
References: <6fb6dbfe04090111314cdd53f4@mail.gmail.com>	<41361803.2050909@twistedmatrix.com>
	<6fb6dbfe04090208452c8598f7@mail.gmail.com>
Message-ID: <41374301.5090100@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Basically, Twisted can't guarantee that the kernel will use both CPU's.  But
if the CPU would normally put the process on the other CPU, then it will.
That you're using spawnProcess to start the process doesn't make any difference.

C


Matt Feifarek wrote:

| Yes, I agree that it's a candidate. Does it work that way?
|
| Does spawnProcess take advantage of multiple CPU's?
|
| On Wed, 01 Sep 2004 11:42:11 -0700, Cory Dodt
| <corydodt at twistedmatrix.com> wrote:
|
|>The invocation of an imagemagick process is certainly a candidate for the
|>kernel to put on a different CPU.  Indeed, that's one of the biggest
|>advantages of using spawnProcess instead of (well, lots of other things).
|>
|>C
|>
|>Matt Feifarek wrote:
|>
|>| I'm using reactor.spawnProcess to perform some inherently-blocking
|
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBN0MB3A5SrXAiHQcRAjTNAJ9HLh1OVMxVhPATNY8fV+MaSHf9bwCdF+4p
T7ktijeoM9I2i27aZl0BYVI=
=VnKl
-----END PGP SIGNATURE-----



From andreas at kostyrka.org  Fri Sep  3 04:15:57 2004
From: andreas at kostyrka.org (Andreas Kostyrka)
Date: Fri, 03 Sep 2004 12:15:57 +0200
Subject: [Twisted-Python] Small bug fix for twisted.mail.pop3
Message-ID: <1094206557.7276.26.camel@andi-lap>

Hi!

I'd propose to include this small patch, as it seems to be
unconditionally verbose:


Index: twisted/mail/pop3.py
===================================================================
--- twisted/mail/pop3.py        (revision 11428)
+++ twisted/mail/pop3.py        (working copy)
@@ -148,7 +148,8 @@
             self.magic = self.generateMagic()
         self.successResponse(self.magic)
         self.setTimeout(self.timeOut)
-        log.msg("New connection from " + str(self.transport.getPeer()))
+       if self.factory.noisy:
+            log.msg("New connection from " + str(self.transport.getPeer()))

     def connectionLost(self, reason):
         if self._onLogout is not None:


As noisy is defined twisted.internet.protocol.Factory, it should benign,
running trial on twisted/test doesn't seem to produce anything worse
than a heap of Deprecation warnings.

TIA,

Andreas
-- 
Andreas Kostyrka
Josef-Mayer-Strasse 5
83043 Bad Aibling



From junk at mnjdesigns.com  Fri Sep  3 12:38:36 2004
From: junk at mnjdesigns.com (junk at mnjdesigns.com)
Date: Fri, 3 Sep 2004 14:38:36 -0400 (EDT)
Subject: [Twisted-Python] How to install to another directory?
Message-ID: <61817.66.149.250.85.1094236716.squirrel@mail.rpg-works.net>

How do I install to another directory other then the default using python
setup.py install.  Any help appreciated!

- M



From mcfletch at rogers.com  Fri Sep  3 13:48:24 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Fri, 03 Sep 2004 15:48:24 -0400
Subject: [Twisted-Python] How to install to another directory?
In-Reply-To: <61817.66.149.250.85.1094236716.squirrel@mail.rpg-works.net>
References: <61817.66.149.250.85.1094236716.squirrel@mail.rpg-works.net>
Message-ID: <4138CA88.30701@rogers.com>

setup.py install --install-lib=/some/other/directory

HTH,
Mike

junk at mnjdesigns.com wrote:

>How do I install to another directory other then the default using python
>setup.py install.  Any help appreciated!
>  
>
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From exarkun at divmod.com  Fri Sep  3 13:56:11 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 03 Sep 2004 15:56:11 -0400
Subject: [Twisted-Python] How to install to another directory?
In-Reply-To: <61817.66.149.250.85.1094236716.squirrel@mail.rpg-works.net>
References: <61817.66.149.250.85.1094236716.squirrel@mail.rpg-works.net>
Message-ID: <4138CC5B.1010503@divmod.com>

junk at mnjdesigns.com wrote:
> How do I install to another directory other then the default using python
> setup.py install.  Any help appreciated!
> 

   ./setup.py install --prefix /another/directory/

   This is more of a general Python question.  If you have more like it, 
you should ask python-list at python.org, or another general Python help
forum.

   Jp



From paul at ref.nmedia.net  Fri Sep  3 14:33:29 2004
From: paul at ref.nmedia.net (Paul Campbell)
Date: Fri, 3 Sep 2004 13:33:29 -0700
Subject: [Twisted-Python] Making non-blocking code blocking?
Message-ID: <20040903203329.GA8222@ref.nmedia.net>

Here's the situation...

I've been writing all my code to defer correctly. Every time it gets to a point
where the call can block, I've inserted the appropriate callback function.

However, it occurred to me (for testing purposes) that it would
be nice some times to INTENTIONALLY block.

Right now, it seems like the only point where you can actually "block" is
when you reach the top level where the code is interacting with the reactor
interface.

So far, it seems like once you get the idea of writing deferred code (which
is essentially continuation passing style, right?) that it is hard to get OUT
of the mindset of writing deferreds into everything.


I'm writing a whole lot of RPC-based code right now, which means there are
LOTS of places where blocking actions can happen, so almost everything ends
up wrapped with deferreds. The alternative is to use threads, but...ugh! I
think those are even uglier.



From exarkun at divmod.com  Fri Sep  3 16:19:15 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 03 Sep 2004 18:19:15 -0400
Subject: [Twisted-Python] Making non-blocking code blocking?
In-Reply-To: <20040903203329.GA8222@ref.nmedia.net>
References: <20040903203329.GA8222@ref.nmedia.net>
Message-ID: <4138EDE3.7030508@divmod.com>

Paul Campbell wrote:
> Here's the situation...
> 
> I've been writing all my code to defer correctly. Every time it gets to a point
> where the call can block, I've inserted the appropriate callback function.
> 
> However, it occurred to me (for testing purposes) that it would
> be nice some times to INTENTIONALLY block.
> 

   Trial exposes some utilities for this.  twisted.trial.util.wait() is 
the most useful of them.  It takes a Deferred.  It returns the result of 
the Deferred, or raises an exception if the Deferred fails.  It supports 
timeouts, and by default will fail after 10 seconds if no result arrives.

   Jp



From james at delx.cjb.net  Sat Sep  4 00:45:40 2004
From: james at delx.cjb.net (James Bunton)
Date: Sat, 4 Sep 2004 16:45:40 +1000
Subject: [Twisted-Python] Patch for MSN protocol & Jabber protocol
Message-ID: <200409041645.40198.james@delx.cjb.net>

Here's a patch that fixes a few bugs in the Twisted MSN support.
* An exception will no longer be thrown on an incoming NOT (notification) 
message.
* A fix for occasional exceptions on receiving messages.
* Fix receiving of contact status and friendly name changes to be safer, and 
to actually update the factory =P (friendly name updates didn't occur 
previously)
* Removed a stray print statement


I've been using these fixes for a while, as they were necessary to get the 
Jabber PyMSNt to work. They seem to be stable. It'd be great to get them into 
the next version.


Now for the Jabber support in Twisted. There's a list of patches on this 
website here that it would be great to have included. Especially the 
domish.py patch, without that an exception is thrown on some XML that many 
Jabber clients send with every packet. That makes it almost unusable.

http://idavoll.jabberstudio.org/2.html


---

James
-------------- next part --------------
A non-text attachment was scrubbed...
Name: msn.py.diff
Type: text/x-diff
Size: 3702 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040904/8ee90db7/attachment-0002.diff>

From james at delx.cjb.net  Sat Sep  4 00:47:09 2004
From: james at delx.cjb.net (James Bunton)
Date: Sat, 4 Sep 2004 16:47:09 +1000
Subject: [Twisted-Python] HTTPS proxy
Message-ID: <200409041647.09933.james@delx.cjb.net>

Hi all. Me again =)

Is there any way to specify a proxy to use for an HTTPS connection? I've had a 
bit of a look around and I can't seem to find anything.

Any help would be much appreciated.

---

James



From glyph at divmod.com  Sat Sep  4 01:51:21 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 04 Sep 2004 03:51:21 -0400
Subject: [Twisted-Python] Patch for MSN protocol & Jabber protocol
In-Reply-To: <200409041645.40198.james@delx.cjb.net>
References: <200409041645.40198.james@delx.cjb.net>
Message-ID: <1094284281.2991.7.camel@localhost>

On Sat, 2004-09-04 at 16:45 +1000, James Bunton wrote:
> Here's a patch that fixes a few bugs in the Twisted MSN support.

Patches to the tracker, please - and assign it to someone, probably
dizzyd (unless he doesn't even read it any more...)

http://www.twistedmatrix.com/bugs/




From exarkun at divmod.com  Sat Sep  4 11:09:09 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 04 Sep 2004 13:09:09 -0400
Subject: [Twisted-Python] Patch for MSN protocol & Jabber protocol
In-Reply-To: <200409041645.40198.james@delx.cjb.net>
References: <200409041645.40198.james@delx.cjb.net>
Message-ID: <4139F6B5.6040408@divmod.com>

James Bunton wrote:
> Here's a patch that fixes a few bugs in the Twisted MSN support.
> * An exception will no longer be thrown on an incoming NOT (notification) 
> message.
> * A fix for occasional exceptions on receiving messages.
> * Fix receiving of contact status and friendly name changes to be safer, and 
> to actually update the factory =P (friendly name updates didn't occur 
> previously)
> * Removed a stray print statement
> 

   Thanks for the patches, James.  In addition to Glyph's comments, I 
wonder if you could include unit tests which:

     1) fail when run against the current Twisted code and
     2) pass with your changes

   This is especially important for protocol code.  Without extremely 
good test coverage, different people begin to depend on different 
(unknown) chunks of functionality.  Then there is no way to know what 
future changes can be made without breaking existing code (in this case, 
potentially yours ;).

   Jp




From pje at telecommunity.com  Sat Sep  4 11:41:21 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Sat, 04 Sep 2004 17:41:21 -0000
Subject: [Distutils] Re: [Twisted-Python] Re: Twisted - Python 2.3 - Windows
In-Reply-To: <zniuvd74.fsf@python.net>
References: <20030731114303.19165.89412.Mailman@pyramid.twistedmatrix.com>
	<3F294288.4000009@yahoo.com>
Message-ID: <5.1.1.6.0.20030731133337.01dc7020@telecommunity.com>

At 07:05 PM 7/31/03 +0200, Thomas Heller wrote:
>Cory Dodt <corydodt at yahoo.com> writes:
>
> >>Subject: [Twisted-Python] Twisted - Python 2.3 - Windows
> >>
> >>Hi,
> >>
> >> anyone who knows when the first Python 2.3 build of twisted for
> >> windows will be available? Which version will it be?
> >>
> >> I tried to build it myself but got into trouble. I first installed
> >> Cygwin and then tried 'setup.py build --compiler=mingw32' as per
> >> documentation, but I got an error message that Python itself is
> >> build with Visual Studio 6.
> >>I don't feel building python myself and I don't have VS6.
> >>
> >
> > I'm with you man,  I don't feel like building Python myself either.  I
> > have asked the appropriate list
> > (http://mail.python.org/pipermail/distutils-sig/2003-July/003333.html )
> > about this problem.  I also tried using distutils from CVS instead of
> > the bundled copy with Python 2.3, and no luck.

It looks like the error occurs when an MSVCCompiler instance is created; I 
haven't yet figured out *why* such an instance is being created.  I don't 
have 2.3 installed on Win32, so as an experiment, I added a 'raise' 
statement to 2.2's MSVCCompiler.  If I specified compilation with msvc, I 
get the error I raised.  If I specify mingw32, I don't.  So, evidently 
2.2's distutils don't create an MSVCCompiler instance when specifying 
mingw32.  I can't fathom why 2.3 would do so.


_______________________________________________
Distutils-SIG maillist  -  Distutils-SIG at python.org
http://mail.python.org/mailman/listinfo/distutils-sig




From james at delx.cjb.net  Sun Sep  5 03:13:20 2004
From: james at delx.cjb.net (James Bunton)
Date: Sun, 5 Sep 2004 19:13:20 +1000
Subject: [Twisted-Python] Patch for MSN protocol & Jabber protocol
In-Reply-To: <E1C3epe-0001wC-01@pyramid.twistedmatrix.com>
References: <E1C3epe-0001wC-01@pyramid.twistedmatrix.com>
Message-ID: <200409051913.20996.james@delx.cjb.net>

On Sun, 5 Sep 2004 04:00 am, Jp Calderone <exarkun at divmod.com> wrote:
>    Thanks for the patches, James.  In addition to Glyph's comments, I
> wonder if you could include unit tests which:
>
>      1) fail when run against the current Twisted code and
>      2) pass with your changes
>
>    This is especially important for protocol code.  Without extremely
> good test coverage, different people begin to depend on different
> (unknown) chunks of functionality.  Then there is no way to know what
> future changes can be made without breaking existing code (in this case,
> potentially yours ;).
>
>    Jp

Ok. They're both in the tracker as Issue701 (Jabber stuff, assigned to dizzyd) 
and Issue702 (MSN stuff, assigned to nobody).

I wrote a unit test for the Jabber stuff, and for the parts of the MSN fixes 
where it makes sense (the NOT message, aka MSN alerts fixes).

It'd be great for these to get into the next Twisted release.

---

James



From jason at pengale.com  Sun Sep  5 23:02:30 2004
From: jason at pengale.com (Jason Stitt)
Date: Mon, 06 Sep 2004 00:02:30 -0500
Subject: [Twisted-Python] Implementing a custom FTP server
Message-ID: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>

Hi, all,

I'm trying to implement a custom FTP server (eventually SFTP, but I 
want to get the basics down.) It won't operate on the file system; the 
back end will be a database, and the server will generate virtual 
directories and folders on the fly.

I have a basic Twisted-based FTP server running. I can log in, and I 
have successfully overridden ftp_LIST to display a custom "file" list.

I have gotten stuck on ftp_STOR and ftp_RETR. There is no 
implementation of ftp_STOR in the base FTP class, so I have no 
reference to work against, and I am also having a hard time figuring 
out how ftp_RETR works. How or where is the actual file data passed 
back and forth?

Any pointers would be greatly appreciated.

Thanks,

Jason

P.S. A lack of documentation aside, though, Twisted has been quite easy 
to work with so far. Even fun :)

P.P.S. is SFTP different enough from FTP that I should be thinking 
about implementing it from the start, rather than later, or can I just 
graft an SSL layer onto my FTP server?




From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Sep  6 07:43:04 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 06 Sep 2004 15:43:04 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
Message-ID: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>

Hi everyone!

I'm running a network simulator on top of Twisted and that made me realize a heavy performance bottleneck.

When I'm simulating a larger number of network nodes each of which uses two or three delayed calls, that adds up and then adding and cancelling calls becomes /really/ expensive. We are talking about ~ one millisecond per add and even a few milliseconds per cancel.

The problem is the implementation that uses a linear list. A heap would be /much/ more appropriate. But especially the cancel could be spead up by factors by not actually removing the object but just setting a flag that it was canceled. The canceled DelayedCall objects would then be filtered out when looking for the next delay.

I already implemented that in my simulator when I was trying to eliminate the calls to dc.cancel(). Works perfectly well, but I'd rather see Twisted scale better itself.

Are there any objections to replacing the current implementation?

Otherwise I'd just send a patch to the list as soon as I have integrated my version into the respective classes.

Stefan



From itamar at itamarst.org  Mon Sep  6 07:58:32 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 06 Sep 2004 09:58:32 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
Message-ID: <1094479111.28078.0.camel@sheriffpony>

On Mon, 2004-09-06 at 09:43, Stefan Behnel wrote:

> Are there any objections to replacing the current implementation?

Not if yours is faster :) I would like to see some benchmarks comparing
speed of adding and cancelling for cases with many scheduled calls, but
also for cases with few calls, so we can see if your patches slow down
other cases.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Sep  6 08:29:55 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 06 Sep 2004 16:29:55 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094479111.28078.0.camel@sheriffpony>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
Message-ID: <413C7463.40708@gkec.informatik.tu-darmstadt.de>


Itamar Shtull-Trauring schrieb:
 > I would like to see some benchmarks comparing
 > speed of adding and cancelling for cases with many scheduled calls, but
 > also for cases with few calls, so we can see if your patches slow down
 > other cases.


For the first part, I did a few profiler runs that showed results similar to the following. Please note that although I removed a few lines that only belong to my personal code, the top three lines actually /were/ the top three. The "AckManager" lines are a simplified form of my own implementation, see it as a second level callLater. The __run_callbacks method is so slow because it calls "reactor.callLater" to be run repeatedly.

---------------------------------------
          9577183 function calls (9577108 primitive calls) in 117.349 CPU seconds

    Ordered by: internal time, call count

    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    506487   22.837    0.000   30.519    0.000 bisect.py:3(insort_right)
     50830   12.002    0.000  103.742    0.002 base.py:400(runUntilCurrent)
    506487    8.974    0.000   47.078    0.000 base.py:362(callLater)
    498759    8.865    0.000   66.300    0.000 AckManager.py:81(__run_callbacks)
     50830    8.700    0.000    8.911    0.000 default.py:472(doSelect)
   3922829    7.682    0.000    7.682    0.000 base.py:132(__lt__)
    506487    7.585    0.000    7.585    0.000 base.py:54(__init__)
    500901    5.998    0.000    5.998    0.000 AckManager.py:59(__remove_inactive_entries_from_queue)
    500181    5.953    0.000   51.499    0.000 AckManager.py:68(__schedule_run)
         1    2.463    2.463  117.348  117.348 default.py:127(mainLoop)
     50830    2.232    0.000    2.232    0.000 base.py:391(timeout)
---------------------------------------

I think it is actually easy to see here that bisect becomes a serious bottleneck when the list gets longer. I didn't include any results from cancel() as I immediately eliminated all calls to the method after my first profiler run. Believe me, it was absolutely worth it.

I'll just continue reimplementing the IReactorTime stuff and then re-run the profiler for you.

I'll also try to run a few test cases with cancel() - thanks to CVS, I should still have some old code around...

Stefan




From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Sep  6 10:44:50 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 06 Sep 2004 18:44:50 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094479111.28078.0.camel@sheriffpony>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
Message-ID: <413C9402.2020002@gkec.informatik.tu-darmstadt.de>

Itamar Shtull-Trauring schrieb:
> I would like to see some benchmarks comparing
> speed of adding and cancelling for cases with many scheduled calls, but
> also for cases with few calls, so we can see if your patches slow down
> other cases.

So here's a comparison. I had to take a different example to actually see a difference since the profiling run I sent last time was about the same complexity.

Original list-based version:
-------------------------------------------------------------
          11647647 function calls (11647337 primitive calls) in 153.122 CPU seconds

    Ordered by: internal time, call count

    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     48733    5.322    0.000    8.469    0.000 bisect.py:3(insort_right)
    595267    3.147    0.000    3.147    0.000 base.py:132(__lt__)
     48733    1.754    0.000   11.545    0.000 base.py:362(callLater)
     48733    1.323    0.000    1.323    0.000 base.py:54(__init__)
        30    1.232    0.041  151.715    5.057 base.py:400(runUntilCurrent)
      3171    0.134    0.000    3.309    0.001 AckManager.py:81(__run_callbacks)
      6801    0.067    0.000    0.426    0.000 AckManager.py:68(__schedule_run)
         1    0.042    0.042    0.042    0.042 base.py:71(cancel)
        30    0.000    0.000    0.000    0.000 base.py:391(timeout)
-------------------------------------------------------------


My heap-based version:
-------------------------------------------------------------
          11726288 function calls (11725973 primitive calls) in 159.055 CPU seconds

    Ordered by: internal time, call count

    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     41752    4.097    0.000    5.420    0.000 heapq.py:226(_siftup)
        24    2.199    0.092  156.848    6.535 base.py:417(runUntilCurrent)
     89610    1.603    0.000    1.779    0.000 heapq.py:174(_siftdown)
    572391    1.212    0.000    1.212    0.000 base.py:134(__le__)
     47858    0.697    0.000    2.778    0.000 base.py:363(callLater)
     47858    0.327    0.000    0.327    0.000 base.py:56(__init__)
     41752    0.288    0.000    5.707    0.000 heapq.py:136(heappop)
     47858    0.262    0.000    1.754    0.000 heapq.py:131(heappush)
      2902    0.150    0.000    4.824    0.002 AckManager.py:81(__run_callbacks)
      6365    0.070    0.000    0.171    0.000 AckManager.py:68(__schedule_run)
        24    0.000    0.000    0.000    0.000 base.py:407(timeout)
        24    0.000    0.000    0.000    0.000 base.py:375(_cleanUpCallLater)
         6    0.000    0.000    0.000    0.000 base.py:72(cancel)
-------------------------------------------------------------

What I found is that callLater becomes /much/ faster in my implementation, while runUntilCurrent /does/ get slower. But that's Ok, I guess, since there is at least one call to callLater for each iteration in runUntilCurrent. So, if there's more calls to callLater, it pays off. I didn't test the cancel() part very well yet, but since the method calls should be almost instantaneous now, I guess, the speed up there will be absolutely increadible. Do not forget, also, that calls to callLater, delay and reset can occurr multiple times before a call is actually executed, so I guess it is /really/ the right thing if runUntilCurrent does more work than the others.

In the first run, there happens to be only one call to cancel(), but that one already takes ages compared to the six calls in the second run.

I hope this is somewhat convincing. Could anyone else please do some testing to see if there are other cases I've overseen?

Stefan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py.diff
Type: text/x-patch
Size: 4235 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040906/d0eebfd2/attachment-0002.bin>

From bob at redivi.com  Mon Sep  6 11:19:17 2004
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 6 Sep 2004 13:19:17 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094479111.28078.0.camel@sheriffpony>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
Message-ID: <E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>


On Sep 6, 2004, at 9:58 AM, Itamar Shtull-Trauring wrote:

> On Mon, 2004-09-06 at 09:43, Stefan Behnel wrote:
>
>> Are there any objections to replacing the current implementation?
>
> Not if yours is faster :) I would like to see some benchmarks comparing
> speed of adding and cancelling for cases with many scheduled calls, but
> also for cases with few calls, so we can see if your patches slow down
> other cases.

There's also the fact that this:

def infiniteLoop():
	reactor.callLater(0.0, infiniteLoop)

will just destroy Twisted because the current loop iteration will never 
finish.

In my non-Twisted implementation of the same concept, during each 
iteration I keep a list of new timers, which gets merged into the heap 
at the end of each iteration (so that they will be in the heap for the 
next round).

I'm not sure I understand the logic behind _cleanUpCallLater in the 
patch?  It doesn't seem right, especially for delayed, but I didn't 
really read very carefully.

-bob



From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Sep  6 11:28:18 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 06 Sep 2004 19:28:18 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413C9402.2020002@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>
	<413C9402.2020002@gkec.informatik.tu-darmstadt.de>
Message-ID: <413C9E32.60608@gkec.informatik.tu-darmstadt.de>

Hi!

I wondered if the Constructor parameters of DelayedCall were important elsewhere. Maybe they should stay the same - I don't know. So for your convenience, here's two complete patches, one that removes the "reset" and "cancel" parameters from the constructor and one that doesn't. It doesn't actually change much to leave them in, it only moves a part of the work from runUntilCurrent back into the cancel and reset methods. I figure you'd rarely see a difference, so you may as well leave them in.

Have fun,
Stefan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py+resetter+canceller.diff
Type: text/x-patch
Size: 4202 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040906/0183eb30/attachment-0004.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py-without-resetter-canceller.diff
Type: text/x-patch
Size: 4342 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040906/0183eb30/attachment-0005.bin>

From behnel_ml at gkec.informatik.tu-darmstadt.de  Mon Sep  6 11:53:26 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Mon, 06 Sep 2004 19:53:26 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
Message-ID: <413CA416.6020009@gkec.informatik.tu-darmstadt.de>


Bob Ippolito schrieb:
> There's also the fact that this:
> 
> def infiniteLoop():
>     reactor.callLater(0.0, infiniteLoop)
> 
> will just destroy Twisted because the current loop iteration will never 
> finish.
> In my non-Twisted implementation of the same concept, during each 
> iteration I keep a list of new timers, which gets merged into the heap 
> at the end of each iteration (so that they will be in the heap for the 
> next round).

I think that's the way to go. That's actually easy to do, here's a patch against my implementation that does exactly that. It moves a bit more work into runUntilCurrent, but I think I already made my point in that regard.


> I'm not sure I understand the logic behind _cleanUpCallLater in the 
> patch?  It doesn't seem right, especially for delayed, but I didn't 
> really read very carefully.

In the cancelled case, it just pops the cancelled call - done (and obviously correct). In the delayed case it pops the changed call (that possibly temporarily brakes the heap invariant) and replaces it with itself, so it actually re-inserts the call at the right position.

Though, ... I guess I do see a problem if the value of a call somewhere in the heap is changed. That brakes the heap invariant and may conflict with further changes to the heap. Let me think about it.

Stefan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py+merge_later.diff
Type: text/x-patch
Size: 1163 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040906/6c8479fd/attachment-0002.bin>

From itamar at itamarst.org  Mon Sep  6 13:15:40 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 06 Sep 2004 15:15:40 -0400
Subject: [Twisted-Python] Implementing a custom FTP server
In-Reply-To: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
Message-ID: <1094498140.28078.4.camel@sheriffpony>

On Mon, 2004-09-06 at 01:02, Jason Stitt wrote:

> I'm trying to implement a custom FTP server (eventually SFTP, but I 
> want to get the basics down.) 

Are you aware that:

1. Twisted's FTP server has in theory support for generic backends?
(though it is currently being rewritten, so you could help with that).

2. SFTP (SSH's transfer protocol) is very different protocol than FTP.

3. Twisted also has a SFTP implementation.

> P.P.S. is SFTP different enough from FTP that I should be thinking 
> about implementing it from the start, rather than later, or can I just 
> graft an SSL layer onto my FTP server?

Oh, hm. Perhaps you should clarify. When you say "sftp" do you mean
SSH2's sftp protocol (totally different than FTP) or FTP over TLS?

As far as details about how the protocol works, you should check out Dan
Bernstein's FTP docs and of course the RFCs.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From jason at pengale.com  Mon Sep  6 13:34:39 2004
From: jason at pengale.com (Jason Stitt)
Date: Mon, 06 Sep 2004 14:34:39 -0500
Subject: [Twisted-Python] Implementing a custom FTP server
In-Reply-To: <1094498140.28078.4.camel@sheriffpony>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
Message-ID: <CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>

On Sep 6, 2004, at 2:15 PM, Itamar Shtull-Trauring wrote:

> On Mon, 2004-09-06 at 01:02, Jason Stitt wrote:
>
>> I'm trying to implement a custom FTP server (eventually SFTP, but I
>> want to get the basics down.)
>
> Are you aware that:
>
> 1. Twisted's FTP server has in theory support for generic backends?
> (though it is currently being rewritten, so you could help with that).

I'm not quite sure what you mean. Right now, I am subclassing 
twisted.protocols.ftp.FTP and selectively overriding methods such as 
ftp_LIST, etc. Is there a better way?

And I'd be glad to help with the rewrite if I knew where to start, as 
it looks like I will be doing quite a bit of work with it.

> 2. SFTP (SSH's transfer protocol) is very different protocol than FTP.
>
> 3. Twisted also has a SFTP implementation.

I thought it might.

To answer your further questions, I'm not that experienced with 
programming the FTP or SFTP protocol (yet...) so I don't know a lot 
about the differences. I want to use SFTP eventually for security 
reasons but figured that FTP would be simpler to start out with. If 
they're that different, perhaps I should start looking into SFTP from 
the start.

Thanks,

Jason




From z3p at twistedmatrix.com  Mon Sep  6 13:52:44 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Mon, 06 Sep 2004 15:52:44 -0400
Subject: [Twisted-Python] Implementing a custom FTP server
In-Reply-To: <CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
Message-ID: <1094500365.23898.2.camel@petra>

On Mon, 2004-09-06 at 14:34 -0500, Jason Stitt wrote:
> To answer your further questions, I'm not that experienced with 
> programming the FTP or SFTP protocol (yet...) so I don't know a lot 
> about the differences. I want to use SFTP eventually for security 
> reasons but figured that FTP would be simpler to start out with. If 
> they're that different, perhaps I should start looking into SFTP from 
> the start.

It's easier to talk about the similarities between SFTP and FTP than the
differences.  The only real similarities between the two protocols are
1) the names 2) that they interface to a filesystem.  Other than that,
they're two entirely different protocols.  The Interfaces that Conch's
SFTP implementation uses are twisted.conch.interfaces.ISFTPServer and
ISFTPFile.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040906/ef656006/attachment.sig>

From andy at thecablelounge.com  Mon Sep  6 19:35:34 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue, 07 Sep 2004 11:35:34 +1000
Subject: [Twisted-Python] Implementing a custom FTP server
In-Reply-To: <1094500365.23898.2.camel@petra>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>	<1094498140.28078.4.camel@sheriffpony>	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra>
Message-ID: <413D1066.7070704@thecablelounge.com>


>> On Mon, 2004-09-06 at 14:34 -0500, Jason Stitt wrote:
>>To answer your further questions, I'm not that experienced with 
>>programming the FTP or SFTP protocol (yet...) so I don't know a lot 
>>about the differences. I want to use SFTP eventually for security 
>>reasons but figured that FTP would be simpler to start out with. If 
>>they're that different, perhaps I should start looking into SFTP from 
>>the start.


Paul Swartz wrote:
> It's easier to talk about the similarities between SFTP and FTP than the
> differences.  The only real similarities between the two protocols are
> 1) the names 2) that they interface to a filesystem.  Other than that,
> they're two entirely different protocols.  The Interfaces that Conch's
> SFTP implementation uses are twisted.conch.interfaces.ISFTPServer and
> ISFTPFile.

G'dday Jason,

I'm chipping away in this area as well as I find time.  I started with 
SFTP - but also want to support all filelike interfaces in the future.

I've opened up svn access to what I have so far:

svn list svn://twisted.cablelounge.com/welsh/trunk

Its very rough .. pretty embarrassing really :) .. hopefully its of some 
help though, and it'd be good to get feedback - particularly as you're 
working with FTP.

The general strategy is to represent your file store independent of any 
protocol.  I've a simple sambaish like file store in file.py.  Then for 
each protocol write an adaptor from your file store objects to the 
interface that protocols expects.  fileadapt.py does this for SFTP. 
realm.py ties it all together.

You can play with it by creating a tap file:

mktap welsh -p 5822 -d /etc/ssh

or something similiar - it's pretty much conch ..

Then create a file 'welshpasswd' to define the accounts on your system 
and place it in the same directory as the tap file.

The file sets up a users variable:

users = {
     loginuserid : {
         nameOfVirtualDirectory  : (uid, gid, realSystemDirectory),
         nameOfVirtualDirectory2 : (uid, gid, realSystemDirectory2),
     }
}

example welshpasswd:
---------------------
users = {
     "andy" : {
             "home"   : ( 509, 509, "/home/andy" ),
     },
     "az" : {
             "home"              : ( 518, 518, "/home/az/incoming" ),
             "giiwa"             : ( 108, 108, "/home/giiwa" ),
             "muddypigrecords"   : (  99,  99, "/home/muddypigrecords" ),
     },
}
----------------------

erg, apologies for the roughness :(

When az logins in, he'll see three directories, home, giiwa and 
muddypigrecords - while working in those directories he'll assume the 
uid and gid and be working in the physical directory as defined above.

 > Itamar Shtull-Trauring wrote:
> 1. Twisted's FTP server has in theory support for generic backends?
> (though it is currently being rewritten, so you could help with that).

Good luck!  I'm yet to take a look, but wouldn't mind helping out if the 
FTP backend needs a bit of work to be made more accessible.

Andy.












From jason at pengale.com  Mon Sep  6 20:55:32 2004
From: jason at pengale.com (Jason Stitt)
Date: Mon, 06 Sep 2004 21:55:32 -0500
Subject: [Twisted-Python] Implementing a custom FTP server
In-Reply-To: <413D1066.7070704@thecablelounge.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
Message-ID: <621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>

> G'dday Jason,
>
> I'm chipping away in this area as well as I find time.  I started with 
> SFTP - but also want to support all filelike interfaces in the future.

This sounds like a good idea. Unfortunately, I cannot get twistd and 
mktap working properly on OS X.  I've been just using reactor objects 
directly, as the simpler examples do. So I'll have to set it up on my 
Linux server sometime to try it out. I'll get you some feedback when I 
do.

Jason




From vng1 at mac.com  Mon Sep  6 23:43:05 2004
From: vng1 at mac.com (vng1 at mac.com)
Date: Tue, 7 Sep 2004 01:43:05 -0400
Subject: [Twisted-Python] Is anyone working on CFReactor?
Message-ID: <CA8DE351-0090-11D9-B140-000A95C5186E@mac.com>

Is anyone looking at what's wrong with the CFReactor in Twisted 1.3 and 
OSX?

http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue648

I vaguely remember seeing a posting about the GIL causing problems, but 
I can't seem to find that article now.

vic
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2353 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040907/17b01850/attachment-0002.bin>

From jordan at krushen.com  Tue Sep  7 01:46:15 2004
From: jordan at krushen.com (Jordan Krushen)
Date: Tue, 7 Sep 2004 00:46:15 -0700
Subject: [Twisted-Python] Is anyone working on CFReactor?
In-Reply-To: <CA8DE351-0090-11D9-B140-000A95C5186E@mac.com>
References: <CA8DE351-0090-11D9-B140-000A95C5186E@mac.com>
Message-ID: <FF022D9F-00A1-11D9-9FCD-000A958E9340@krushen.com>

On 6-Sep-04, at 10:43 PM, vng1 at mac.com wrote:

> Is anyone looking at what's wrong with the CFReactor in Twisted 1.3 
> and OSX?
>
> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue648
>
> I vaguely remember seeing a posting about the GIL causing problems, 
> but I can't seem to find that article now.

I think Bob had mentioned recent changes to the GIL as one possibility, 
but I don't know if he's investigated it further.  I know he's busy, so 
if anyone else here can get CFReactor working, that would be 
appreciated -- I currently have one project on hold due to this bug.

J.




From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue Sep  7 02:51:12 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 07 Sep 2004 10:51:12 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413CA416.6020009@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
Message-ID: <413D7680.6060103@gkec.informatik.tu-darmstadt.de>


Stefan Behnel schrieb:
> I guess I do see a problem if the value of a call somewhere 
> in the heap is changed. That brakes the heap invariant and may conflict 
> with further changes to the heap. Let me think about it.

Ok, I thought about it. And I believe the best way to do this is to write a specialized heap version. I copied the heapq implementation and adapted it so that it keeps track of the position in the heap for each DelayedCall. That makes it possible to remove a call without linear overhead and in log(N) time.

So, comparing the complexity of the heap version with the original version:

callLater:
	ORIG:	O(log(N)) for binary search + O(N) for array insertion (python lists are arrays as far as I know)
	HEAP:	O(1) as it is only appended to a list. Insertion is done in runUntilCurrent (as late as possible)

cancel:
	ORIG:	O(N) for linear array deletion
	HEAP:	O(log(N)) if it was already inserted, O(1) if it was only stored for later insertion (see post by Bob)

reset:
	ORIG:	O(N) for linear array deletion + O(log(N)) for binary search + O(N) for array insertion
	HEAP:	O(log(N)) for removal + O(log(N)) for insertion if it was already inserted
		O(1) if it was only stored

delay:
	see reset - could actually be implemented twice as fast in the heap (only _siftup), but I didn't do that - it's fast enough anyway

runUntilCurrent:
	heap implementation is about log(N) times slower, which is still much faster than the original implementaion if you add it up with callLater. There is always one call to callLater and at most (!) one iteration in runUntilCurrent for each DelayedCall.


So, summing it up, it kicks ass.


Other things to mention:

getDelayCalls has a slight change in semantics: It only returns the delayed calls that were already inserted into the heap, so if you run callLater and getDelayCalls in the same iteration of the main loop, you will not find your delayed call in the returned tuple. This is due to the change Bob proposed.


Now, are there any test cases in Twisted for the ReactorTime part? I'd like to see them run over my implementation to check if it works as expected in all cases.

You should also consider running pychecker over the old version, there were some unused variables and that kind of stuff.

Hoping for approval,
Stefan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py.diff
Type: text/x-patch
Size: 8016 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040907/d2473bac/attachment-0002.bin>

From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue Sep  7 03:17:32 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 07 Sep 2004 11:17:32 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater - clean
	patch
In-Reply-To: <413D7680.6060103@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
Message-ID: <413D7CAC.3080400@gkec.informatik.tu-darmstadt.de>

Sorry for spamming - here's a slightly cleaned up patch that does not include some left overs - no changes in behaviour.

Stefan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.py.diff.gz
Type: application/x-gzip
Size: 1877 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040907/6c0e4996/attachment-0002.bin>

From serj_trejo at hotmail.com  Tue Sep  7 04:19:39 2004
From: serj_trejo at hotmail.com (Sergio Trejo)
Date: Tue, 07 Sep 2004 06:19:39 -0400
Subject: [Twisted-Python] PB / XML
Message-ID: <BAY12-F39BHkJxz6LHQ00019bf1@hotmail.com>

I read with interest a thread that was discussed over a year ago on the 
mailing list which was initiated by Uwe C. Schroeder discussing use of 
Perspective Broker to pipe around data (in which PB has some size 
restrictions on how much it will vend over the wire between PB Client and PB 
Server):

http://twistedmatrix.com/pipermail/twisted-python/2003-May/003986.html

Similar to Uwe, I want to push around some XML data. I don't need SOAP and I 
don't need XML-RPC. I just want to push little chunks of XML between PB 
Client and PB Server, and I want to do so in a manner that adheres to the 
strictness of PB and its data size limits per the thread mentioned above.

What I am curious about is if any twisted developers can recommend a means 
for encoding and decoding an XML document before / after sending such 
encoded document over the wire via PB? It would be nice to be able to 
validate the XML). I have taken notice of twisted.protocols.sux but in 
reading the API documents, it doesn't appear as if sux is going to be 
applicable to PB usage since sux can not perform *any* external actions 
under *any* circumstances" ... plus sux doesn't validate. So, can anyone 
recommend a known method for taking XML data  into a generic Python object 
which is compatable with PB?

Eventually I want to take the XML data and persist it into an atop data base 
but that's later down the pipeline and better left for the divmod list.

Thanks for any feedback / experiences,

Serg

_________________________________________________________________
MSN 8 with e-mail virus protection service: 2 months FREE* 
http://join.msn.com/?page=features/virus




From mwh at python.net  Tue Sep  7 04:21:50 2004
From: mwh at python.net (Michael Hudson)
Date: Tue, 07 Sep 2004 11:21:50 +0100
Subject: [Twisted-Python] Re: Implementing a custom FTP server
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
Message-ID: <2mzn421irl.fsf@starship.python.net>

Jason Stitt <jason at pengale.com> writes:

>> G'dday Jason,
>>
>> I'm chipping away in this area as well as I find time.  I started
>> with SFTP - but also want to support all filelike interfaces in the
>> future.
>
> This sounds like a good idea. Unfortunately, I cannot get twistd and
> mktap working properly on OS X. 

What have you been trying?  Admittedly. I'm not using mktap, but I'm
using twistd on OS X with approximately no issues at all (apart from
the fact that it got installed in the back of beyond, under
/Library/Frameworks/...).

Cheers,
mwh

-- 
 All parts should go together without forcing. You must remember that
 the parts you are  reassembling were disassembled by you.  Therefore,
 if you can't get them together again, there must be a reason. By all
 means, do not use a hammer.           -- IBM maintenance manual, 1925




From pkelly at vigilantminds.com  Tue Sep  7 07:23:04 2004
From: pkelly at vigilantminds.com (Patrick Kelly)
Date: Tue, 7 Sep 2004 09:23:04 -0400
Subject: [Twisted-Python] Twisted XML-RPC Database Interface
Message-ID: <6E4E9A51D91C044F9879FD72389600F7B044AF@new_iron.vigilantminds.com>

Hi,

 

I'm new to twisted and fairly new to python.  I'm toying with a way to
use Twisted/XML-RPC to make calls to a mysql database.  I've gone
through the examples on the web page, but I'm still having trouble
putting it all together.  Is there some good example code somewhere else
that will help write the server and client?

 

Thanks for you help

Patrick

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040907/10e5f9f7/attachment.html>

From abe at fettig.net  Tue Sep  7 08:32:01 2004
From: abe at fettig.net (Abe Fettig)
Date: Tue, 07 Sep 2004 10:32:01 -0400
Subject: [Twisted-Python] Using setuid/setgid correctly
Message-ID: <413DC661.4010900@fettig.net>

Hi folks,

Can anyone give me a quick primer (or point me to some documentation) on 
using uid/gids with twisted.application and mktap?  I'm looking to run a 
server process under an unprivileged user account, while still being 
able to bind to reserved ports at startup.

Thanks!

Abe



From itamar at itamarst.org  Tue Sep  7 10:30:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 07 Sep 2004 12:30:53 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater -
	clean patch
In-Reply-To: <413D7CAC.3080400@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413D7CAC.3080400@gkec.informatik.tu-darmstadt.de>
Message-ID: <1094574653.30837.2.camel@sheriffpony>

On Tue, 2004-09-07 at 05:17, Stefan Behnel wrote:
> Sorry for spamming - here's a slightly cleaned up patch that does not include some left overs - no changes in behaviour.

Thanks - add it to twistedmatrix.com/bugs/ and assign to me.




From exarkun at divmod.com  Tue Sep  7 11:07:46 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 07 Sep 2004 13:07:46 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413D7680.6060103@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
Message-ID: <413DEAE2.7050701@divmod.com>

Stefan Behnel wrote:
> 
> Stefan Behnel schrieb:
> 
>> I guess I do see a problem if the value of a call somewhere in the 
>> heap is changed. That brakes the heap invariant and may conflict with 
>> further changes to the heap. Let me think about it.
> 
> 
> Ok, I thought about it. And I believe the best way to do this is to 
> write a specialized heap version. I copied the heapq implementation and 
> adapted it so that it keeps track of the position in the heap for each 
> DelayedCall. That makes it possible to remove a call without linear 
> overhead and in log(N) time.
 > [snip]
> 

   heapq.py is under the PSF license.  PSF is roughly similar to MIT. 
Is this going to be okay for inclusion in Twisted?

   Jp



From mwh at python.net  Tue Sep  7 11:25:08 2004
From: mwh at python.net (Michael Hudson)
Date: Tue, 07 Sep 2004 18:25:08 +0100
Subject: [Twisted-Python] Re: Performance issue in reactor.callLater
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com>
Message-ID: <2moeki0z63.fsf@starship.python.net>

Jp Calderone <exarkun at divmod.com> writes:

> Stefan Behnel wrote:
>> Stefan Behnel schrieb:
>> 
>>> I guess I do see a problem if the value of a call somewhere in the
>>> heap is changed. That brakes the heap invariant and may conflict
>>> with further changes to the heap. Let me think about it.
>> Ok, I thought about it. And I believe the best way to do this is to
>> write a specialized heap version. I copied the heapq implementation
>> and adapted it so that it keeps track of the position in the heap
>> for each DelayedCall. That makes it possible to remove a call
>> without linear overhead and in log(N) time.
>  > [snip]
>> 
>
>    heapq.py is under the PSF license.  PSF is roughly similar to
>    MIT. Is this going to be okay for inclusion in Twisted?

It's also one of the newer, and hence less complicated in this
respect, bits of Python.  You can probably just get permission from
whoever wrote it...

# Original code by Kevin O'Connor, augmented by Tim Peters and Raymond Hettinger

it seems.

Cheers,
mwh

-- 
  "Also, does the simple algorithm you used in Cyclops have a name?"
  "Not officially, but it answers to "hey, dumb-ass!"
                       -- Neil Schemenauer and Tim Peters, 23 Feb 2001




From glyph at divmod.com  Tue Sep  7 12:13:41 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 07 Sep 2004 14:13:41 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413DEAE2.7050701@divmod.com>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com>
Message-ID: <1094580821.21920.6.camel@kazekage>

On Tue, 2004-09-07 at 13:07, Jp Calderone wrote:

>    heapq.py is under the PSF license.  PSF is roughly similar to MIT. 
> Is this going to be okay for inclusion in Twisted?

It's part of Python, so I don't see why that would be necessary.

However, I have profiled various heapq-based schemes for callLater in
the past, and they always end up losing pretty big in the average case,
and winning only in perverse cases such as hundreds of callLater(0)s per
tick.  I saw a little discussion of the performance impact, but I am
still not entirely convinced that it's a good idea.




From jason at pengale.com  Tue Sep  7 12:23:50 2004
From: jason at pengale.com (Jason Stitt)
Date: Tue, 07 Sep 2004 13:23:50 -0500
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <2mzn421irl.fsf@starship.python.net>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
Message-ID: <112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>

On Sep 7, 2004, at 5:21 AM, Michael Hudson wrote:

> Jason Stitt <jason at pengale.com> writes:
>>
>> This sounds like a good idea. Unfortunately, I cannot get twistd and
>> mktap working properly on OS X.
>
> What have you been trying?  Admittedly. I'm not using mktap, but I'm
> using twistd on OS X with approximately no issues at all (apart from
> the fact that it got installed in the back of beyond, under
> /Library/Frameworks/...).

Originally, twistd contained a hard-coded check that told me I was 
using Windows (the nerve!) and told me to use twistw (which, of course, 
didn't work). I removed that. Now I'm still having some problems with 
twistd not respecting the working directory and, thus, not being able 
to find modules to import.

Jason




From itamar at itamarst.org  Tue Sep  7 12:28:34 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 07 Sep 2004 14:28:34 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094580821.21920.6.camel@kazekage>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com>  <1094580821.21920.6.camel@kazekage>
Message-ID: <1094581714.31032.3.camel@sheriffpony>

On Tue, 2004-09-07 at 14:13, Glyph Lefkowitz wrote:

> >    heapq.py is under the PSF license.  PSF is roughly similar to MIT. 
> > Is this going to be okay for inclusion in Twisted?
> 
> It's part of Python, so I don't see why that would be necessary.

This is patched / somehow different version.

> However, I have profiled various heapq-based schemes for callLater in
> the past, and they always end up losing pretty big in the average case,
> and winning only in perverse cases such as hundreds of callLater(0)s per
> tick.  I saw a little discussion of the performance impact, but I am
> still not entirely convinced that it's a good idea.
> 

Obviously we wouldn't commit without further performance testing.




From radeex at gmail.com  Tue Sep  7 12:29:19 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 7 Sep 2004 14:29:19 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <60ed19d40409071129715728ef@mail.gmail.com>

On Tue, 07 Sep 2004 13:23:50 -0500, Jason Stitt <jason at pengale.com> wrote:
> On Sep 7, 2004, at 5:21 AM, Michael Hudson wrote:
> 
> Originally, twistd contained a hard-coded check that told me I was
> using Windows (the nerve!) and told me to use twistw (which, of course,
> didn't work). 

If this happened to you, it's because you're not calling the right
thing. You should be calling the twistd in Python2X\Scripts (IIRC),
*not* Python2X\Lib\site-packages\twisted\scripts\twistd.py. If you use
the twisted-environment command line that's placed into your Start
menu, just typing "twistd" should work.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From itamar at itamarst.org  Tue Sep  7 12:30:33 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 07 Sep 2004 14:30:33 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <1094581833.31027.6.camel@sheriffpony>

On Tue, 2004-09-07 at 14:23, Jason Stitt wrote:

> didn't work). I removed that. Now I'm still having some problems with 
> twistd not respecting the working directory and, thus, not being able 
> to find modules to import.

This happens on all platforms when you run as root. It's a security
feature. It will not be removed. So your best bet is to add the
directory where your package is to PYTHONPATH, as with all Python
programs. 

Oh, and, why twistw? I'd expect twistd to use the unix version on Mac OS
X.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From radeex at gmail.com  Tue Sep  7 12:35:59 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 7 Sep 2004 14:35:59 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <1094581833.31027.6.camel@sheriffpony>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
Message-ID: <60ed19d404090711356a82ab05@mail.gmail.com>

On Tue, 07 Sep 2004 14:30:33 -0400, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> Oh, and, why twistw? I'd expect twistd to use the unix version on Mac OS
> X.

Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
there? Guess that check should more explicitly check for win32.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From bob at redivi.com  Tue Sep  7 12:47:42 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 7 Sep 2004 14:47:42 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <60ed19d404090711356a82ab05@mail.gmail.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra>
	<413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
Message-ID: <662FE660-00FE-11D9-9C5C-000A95686CD8@redivi.com>


On Sep 7, 2004, at 2:35 PM, Christopher Armstrong wrote:

> On Tue, 07 Sep 2004 14:30:33 -0400, Itamar Shtull-Trauring
> <itamar at itamarst.org> wrote:
>> Oh, and, why twistw? I'd expect twistd to use the unix version on Mac 
>> OS
>> X.
>
> Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
> there? Guess that check should more explicitly check for win32.

uh, of course sys.platform == 'posix'

I dunno what the heck he is doing, but twistd has always worked fine 
for me on OS X.

-bob



From bob at redivi.com  Tue Sep  7 12:51:14 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 7 Sep 2004 14:51:14 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094581714.31032.3.camel@sheriffpony>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com> <1094580821.21920.6.camel@kazekage>
	<1094581714.31032.3.camel@sheriffpony>
Message-ID: <E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>


On Sep 7, 2004, at 2:28 PM, Itamar Shtull-Trauring wrote:

> On Tue, 2004-09-07 at 14:13, Glyph Lefkowitz wrote:
>
>>>    heapq.py is under the PSF license.  PSF is roughly similar to MIT.
>>> Is this going to be okay for inclusion in Twisted?
>>
>> It's part of Python, so I don't see why that would be necessary.
>
> This is patched / somehow different version.
>
>> However, I have profiled various heapq-based schemes for callLater in
>> the past, and they always end up losing pretty big in the average 
>> case,
>> and winning only in perverse cases such as hundreds of callLater(0)s 
>> per
>> tick.  I saw a little discussion of the performance impact, but I am
>> still not entirely convinced that it's a good idea.
>>
>
> Obviously we wouldn't commit without further performance testing.

What is the "average" case anyway?  For what application?  Where are 
the performance tests coming from?

There is at least one scenario where it makes perfect sense to do a lot 
of callLater(0.0, ...), when you're doing computation but trying not to 
block.

Though, of course, you would do something like callLater(0.00001, ...) 
in the current Twisted, because callLater(0.0, ...) pretty much blocks.

-bob



From jason at pengale.com  Tue Sep  7 12:54:40 2004
From: jason at pengale.com (Jason Stitt)
Date: Tue, 07 Sep 2004 13:54:40 -0500
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <60ed19d404090711356a82ab05@mail.gmail.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
Message-ID: <5F9DCD40-00FF-11D9-A692-000D93AF8AD2@pengale.com>

On Sep 7, 2004, at 1:35 PM, Christopher Armstrong wrote:

> On Tue, 07 Sep 2004 14:30:33 -0400, Itamar Shtull-Trauring
> <itamar at itamarst.org> wrote:
>> Oh, and, why twistw? I'd expect twistd to use the unix version on Mac 
>> OS
>> X.
>
> Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
> there? Guess that check should more explicitly check for win32.

Right. sys.platform is 'darwin' on OS X.

> -- 
>  Twisted | Christopher Armstrong: International Man of Twistery
>   Radix  |          Release Manager,  Twisted Project
> ---------+            http://radix.twistedmatrix.com
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From bob at redivi.com  Tue Sep  7 13:07:46 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 7 Sep 2004 15:07:46 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <5F9DCD40-00FF-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra>
	<413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
	<5F9DCD40-00FF-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <3462B114-0101-11D9-9892-000A95686CD8@redivi.com>


On Sep 7, 2004, at 2:54 PM, Jason Stitt wrote:

> On Sep 7, 2004, at 1:35 PM, Christopher Armstrong wrote:
>
>> On Tue, 07 Sep 2004 14:30:33 -0400, Itamar Shtull-Trauring
>> <itamar at itamarst.org> wrote:
>>> Oh, and, why twistw? I'd expect twistd to use the unix version on 
>>> Mac OS
>>> X.
>>
>> Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
>> there? Guess that check should more explicitly check for win32.
>
> Right. sys.platform is 'darwin' on OS X.

Presumably he meant os.name .. I don't think sys.platform == 'posix' 
anywhere.

-bob



From jason at pengale.com  Tue Sep  7 13:11:03 2004
From: jason at pengale.com (Jason Stitt)
Date: Tue, 07 Sep 2004 14:11:03 -0500
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <1094581833.31027.6.camel@sheriffpony>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
Message-ID: <A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>


On Sep 7, 2004, at 1:30 PM, Itamar Shtull-Trauring wrote:

> On Tue, 2004-09-07 at 14:23, Jason Stitt wrote:
>
>> didn't work). I removed that. Now I'm still having some problems with
>> twistd not respecting the working directory and, thus, not being able
>> to find modules to import.
>
> This happens on all platforms when you run as root. It's a security
> feature. It will not be removed. So your best bet is to add the
> directory where your package is to PYTHONPATH, as with all Python
> programs.

That makes sense. I just figured out I was getting a little confused -- 
not all my import problems were local. One of the examples I downloaded 
from the Twisted site (the SSH server, sshsimpleserver.py) tries to 
import realm from twisted.conch, which does not have a realm module 
(it's not in the API docs, either). Was this removed at some point, 
perhaps?

Jason




From fdrake at acm.org  Tue Sep  7 13:14:14 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 7 Sep 2004 15:14:14 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <662FE660-00FE-11D9-9C5C-000A95686CD8@redivi.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<60ed19d404090711356a82ab05@mail.gmail.com>
	<662FE660-00FE-11D9-9C5C-000A95686CD8@redivi.com>
Message-ID: <200409071514.14491.fdrake@acm.org>

On Tuesday 07 September 2004 02:47 pm, Bob Ippolito wrote:
 > uh, of course sys.platform == 'posix'
 >
 > I dunno what the heck he is doing, but twistd has always worked fine
 > for me on OS X.

Mac OS X 10.2.8 says this:

Python 2.2 (#1, 07/14/02, 23:25:09)
[GCC Apple cpp-precomp 6.14] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import os, sys
>>> os.name
'posix'
>>> sys.platform
'darwin'

On Windows, I expect os.name == "nt" and sys.platform[:3].lower() == "win".


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>




From z3p at twistedmatrix.com  Tue Sep  7 13:24:16 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 07 Sep 2004 15:24:16 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <1094585056.23898.10.camel@petra>

On Tue, 2004-09-07 at 14:11 -0500, Jason Stitt wrote:
> One of the examples I downloaded 
> from the Twisted site (the SSH server, sshsimpleserver.py) tries to 
> import realm from twisted.conch, which does not have a realm module 
> (it's not in the API docs, either). Was this removed at some point, 
> perhaps?

Yes, the stuff in realm.py was refactored and moved into unix.py.  SVN
has a working version.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040907/a95fafb3/attachment.sig>

From jason at pengale.com  Tue Sep  7 13:36:46 2004
From: jason at pengale.com (Jason Stitt)
Date: Tue, 07 Sep 2004 14:36:46 -0500
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <3462B114-0101-11D9-9892-000A95686CD8@redivi.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
	<5F9DCD40-00FF-11D9-A692-000D93AF8AD2@pengale.com>
	<3462B114-0101-11D9-9892-000A95686CD8@redivi.com>
Message-ID: <411D3A17-0105-11D9-A692-000D93AF8AD2@pengale.com>

All right. I think I had some version problems or something. I checked 
with my Linux install, and it uses twisted.python.runtime.platformType, 
which correctly identifies OS X as 'posix'.

So twistd is no longer telling me that I run Windows. Thank goodness.

Jason




From itamar at itamarst.org  Tue Sep  7 13:54:45 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 07 Sep 2004 15:54:45 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <60ed19d404090711356a82ab05@mail.gmail.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
Message-ID: <1094586885.31029.8.camel@sheriffpony>

On Tue, 2004-09-07 at 14:35, Christopher Armstrong wrote:

> Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
> there? Guess that check should more explicitly check for win32.

The code does not check sys.platform. It checks
twisted.python.runtime.platformType, which should be "posix" on OS X,
regardless of what sys.platform is.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From radeex at gmail.com  Tue Sep  7 13:58:20 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 7 Sep 2004 15:58:20 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <1094586885.31029.8.camel@sheriffpony>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<60ed19d404090711356a82ab05@mail.gmail.com>
	<1094586885.31029.8.camel@sheriffpony>
Message-ID: <60ed19d4040907125853c6354e@mail.gmail.com>

On Tue, 07 Sep 2004 15:54:45 -0400, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Tue, 2004-09-07 at 14:35, Christopher Armstrong wrote:
> 
> > Oh, I didn't realize he was on OSX. I take it sys.platform != "posix"
> > there? Guess that check should more explicitly check for win32.
> 
> The code does not check sys.platform. It checks
> twisted.python.runtime.platformType, which should be "posix" on OS X,
> regardless of what sys.platform is.

Sorry, I was accidentally looking at 1.3.0. :-)



-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From andy at thecablelounge.com  Tue Sep  7 18:40:16 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Wed, 08 Sep 2004 10:40:16 +1000
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <1094585056.23898.10.camel@petra>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>	<1094498140.28078.4.camel@sheriffpony>	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>	<1094500365.23898.2.camel@petra>
	<413D1066.7070704@thecablelounge.com>	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>	<2mzn421irl.fsf@starship.python.net>	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>	<1094581833.31027.6.camel@sheriffpony>	<A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>
	<1094585056.23898.10.camel@petra>
Message-ID: <413E54F0.5040201@thecablelounge.com>

Paul Swartz wrote:
> On Tue, 2004-09-07 at 14:11 -0500, Jason Stitt wrote:
> 
>>One of the examples I downloaded 
>>from the Twisted site (the SSH server, sshsimpleserver.py) tries to 
>>import realm from twisted.conch, which does not have a realm module 
>>(it's not in the API docs, either). Was this removed at some point, 
>>perhaps?
> 
> 
> Yes, the stuff in realm.py was refactored and moved into unix.py.  SVN
> has a working version.

Jason, just a quick note.

I've been putting off changing over to the new component architecture so 
I'm working against a pretty out of date version of trunk.

I'm currently running welsh against Twisted r10936 in pseudo production 
(if you call serving up a few mates sites production:)).  It looks like 
Paul made the above refactored in r10415, so that's there.

This is a good spur to finally make the change over, so I should get to 
it in the next weekend of so.

Andy.



From mailinglist at ltsai.com  Tue Sep  7 18:54:37 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Wed, 08 Sep 2004 08:54:37 +0800
Subject: [Twisted-Python] twistd quietness
Message-ID: <chll95$l4h$1@sea.gmane.org>

Hi

Is there an option in twistd from showing stderr messages from 
appearing, specifically "Removing stale pidfile /var/run/myProg.pid"?

# twistd -y myProg.tac -q --pid /var/run/myProg.pid

I'm already using the quiet option. Do I simply redirect stderr to 
/dev/null?

-Liming




From cce at clarkevans.com  Tue Sep  7 19:59:18 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 7 Sep 2004 21:59:18 -0400
Subject: [Twisted-Python] FWD: PEP 334 - Simple Coroutines via
	SuspendIteration
Message-ID: <20040908015918.GB52384@prometheusresearch.com>

Perhaps with a bit of low-level help from the Python Interpreter,
"flow" can be rendered obsolete. - Clark

----- Forwarded message from "Clark C. Evans" <cce at clarkevans.com> -----
Date: Tue, 7 Sep 2004 21:48:45 -0400
From: "Clark C. Evans" <cce at clarkevans.com>
To: python-dev at python.org
Subject: [Python-Dev] PEP 334 - Simple Coroutines via SuspendIteration

I've packaged up the idea of a coroutine facility using iterators and an
exception, SuspendIteration.  This would require some rather deep
changes to how generators are implemented, however, it seems backwards
compatible, implementable /w JVM or CLR, and would make most of my
database/web development work far more pleasant.

http://www.python.org/peps/pep-0334.html

Cheers!

Clark

...

PEP: 334
Title: Simple Coroutines via SuspendIteration
Version: $Revision: 1.1 $
Last-Modified: $Date: 2004/09/08 00:11:18 $
Author: Clark C. Evans <info at clarkevans.com>
Status: Draft
Type: Standards Track
Python-Version: 3.0
Content-Type: text/x-rst
Created: 26-Aug-2004
Post-History: 


Abstract
========

Asynchronous application frameworks such as Twisted [1]_ and Peak
[2]_, are based on a cooperative multitasking via event queues or
deferred execution.  While this approach to application development
does not involve threads and thus avoids a whole class of problems
[3]_, it creates a different sort of programming challenge.  When an
I/O operation would block, a user request must suspend so that other
requests can proceed.  The concept of a coroutine [4]_ promises to
help the application developer grapple with this state management
difficulty.

This PEP proposes a limited approach to coroutines based on an
extension to the iterator protocol [5]_.  Currently, an iterator may
raise a StopIteration exception to indicate that it is done producing
values.  This proposal adds another exception to this protocol,
SuspendIteration, which indicates that the given iterator may have
more values to produce, but is unable to do so at this time.


Rationale
=========

There are two current approaches to bringing co-routines to Python.
Christian Tismer's Stackless [6]_ involves a ground-up restructuring
of Python's execution model by hacking the 'C' stack.  While this
approach works, its operation is hard to describe and keep portable. A
related approach is to compile Python code to Parrot [7]_, a
register-based virtual machine, which has coroutines.  Unfortunately,
neither of these solutions is portable with IronPython (CLR) or Jython
(JavaVM).

It is thought that a more limited approach, based on iterators, could
provide a coroutine facility to application programmers and still be
portable across runtimes.

* Iterators keep their state in local variables that are not on the
  "C" stack.  Iterators can be viewed as classes, with state stored in
  member variables that are persistent across calls to its next()
  method.

* While an uncaught exception may terminate a function's execution, an
  uncaught exception need not invalidate an iterator.  The proposed
  exception, SuspendIteration, uses this feature.  In other words,
  just because one call to next() results in an exception does not
  necessarily need to imply that the iterator itself is no longer
  capable of producing values.

There are four places where this new exception impacts:

* The simple generator [8]_ mechanism could be extended to safely
  'catch' this SuspendIteration exception, stuff away its current
  state, and pass the exception on to the caller.

* Various iterator filters [9]_ in the standard library, such as
  itertools.izip should be made aware of this exception so that it can
  transparently propagate SuspendIteration.

* Iterators generated from I/O operations, such as a file or socket
  reader, could be modified to have a non-blocking variety.  This
  option would raise a subclass of SuspendIteration if the requested
  operation would block.

* The asyncore library could be updated to provide a basic 'runner'
  that pulls from an iterator; if the SuspendIteration exception is
  caught, then it moves on to the next iterator in its runlist [10]_.
  External frameworks like Twisted would provide alternative
  implementations, perhaps based on FreeBSD's kqueue or Linux's epoll.

While these may seem dramatic changes, it is a very small amount of
work compared with the utility provided by continuations.


Semantics
=========

This section will explain, at a high level, how the introduction of
this new SuspendIteration exception would behave.


Simple Iterators
----------------

The current functionality of iterators is best seen with a simple
example which produces two values 'one' and 'two'. ::

    class States:

        def __iter__(self):
            self._next = self.state_one
            return self

        def next(self):
            return self._next()

        def state_one(self):
            self._next = self.state_two
            return "one"

        def state_two(self):
            self._next = self.state_stop
            return "two"

        def state_stop(self):
            raise StopIteration

    print list(States())

An equivalent iteration could, of course, be created by the
following generator::

    def States():
        yield 'one'
        yield 'two'

    print list(States())


Introducing SuspendIteration
----------------------------

Suppose that between producing 'one' and 'two', the generator above
could block on a socket read.  In this case, we would want to raise
SuspendIteration to signal that the iterator is not done producing,
but is unable to provide a value at the current moment. ::

    from random import randint
    from time import sleep

    class SuspendIteration(Exception):
          pass

    class NonBlockingResource:

        """Randomly unable to produce the second value"""

        def __iter__(self):
            self._next = self.state_one
            return self

        def next(self):
            return self._next()

        def state_one(self):
            self._next = self.state_suspend
            return "one"

        def state_suspend(self):
            rand = randint(1,10)
            if 2 == rand:
                self._next = self.state_two
                return self.state_two()
            raise SuspendIteration()

        def state_two(self):
            self._next = self.state_stop
            return "two"

        def state_stop(self):
            raise StopIteration

    def sleeplist(iterator, timeout = .1):
        """
        Do other things (e.g. sleep) while resource is
        unable to provide the next value
        """
        it = iter(iterator)
        retval = []
        while True:
            try:
                retval.append(it.next())
            except SuspendIteration:
                sleep(timeout)
                continue
            except StopIteration:
                break
        return retval

    print sleeplist(NonBlockingResource())

In a real-world situation, the NonBlockingResource would be a file
iterator, socket handle, or other I/O based producer.  The sleeplist
would instead be an async reactor, such as those found in asyncore or
Twisted.  The non-blocking resource could, of course, be written as a
generator::

    def NonBlockingResource():
        yield "one"
        while True:
            rand = randint(1,10)
            if 2 == rand:
                break
            raise SuspendIteration()
        yield "two"

It is not necessary to add a keyword, 'suspend', since most real
content generators will not be in application code, they will be in
low-level I/O based operations.  Since most programmers need not be
exposed to the SuspendIteration() mechanism, a keyword is not needed.


Application Iterators
---------------------

The previous example is rather contrived, a more 'real-world' example
would be a web page generator which yields HTML content, and pulls
from a database.  Note that this is an example of neither the
'producer' nor the 'consumer', but rather of a filter. ::

    def ListAlbums(cursor):
        cursor.execute("SELECT title, artist FROM album")
        yield '<html><body><table><tr><td>Title</td><td>Artist</td></tr>'
        for (title, artist) in cursor:
            yield '<tr><td>%s</td><td>%s</td></tr>' % (title, artist)
        yield '</table></body></html>'

The problem, of course, is that the database may block for some time
before any rows are returned, and that during execution, rows may be
returned in blocks of 10 or 100 at a time. Ideally, if the database
blocks for the next set of rows, another user connection could be
serviced.  Note the complete absence of SuspendIterator in the above
code.  If done correctly, application developers would be able to
focus on functionality rather than concurrency issues.

The iterator created by the above generator should do the magic
necessary to maintain state, yet pass the exception through to a
lower-level async framework.  Here is an example of what the
corresponding iterator would look like if coded up as a class::

    class ListAlbums:

        def __init__(self, cursor):
            self.cursor = cursor

        def __iter__(self):
            self.cursor.execute("SELECT title, artist FROM album")
            self._iter = iter(self._cursor)
            self._next = self.state_head
            return self

        def next(self):
            return self._next()

        def state_head(self):
            self._next = self.state_cursor
            return "<html><body><table><tr><td>\
                    Title</td><td>Artist</td></tr>"

        def state_tail(self):
            self._next = self.state_stop
            return "</table></body></html>"

        def state_cursor(self):
            try:
                (title,artist) = self._iter.next()
                return '<tr><td>%s</td><td>%s</td></tr>' % (title, artist)
            except StopIteration:
                self._next = self.state_tail
                return self.next()
            except SuspendIteration:
                # just pass-through
                raise

        def state_stop(self):
            raise StopIteration


Complicating Factors
--------------------

While the above example is straight-forward, things are a bit more
complicated if the intermediate generator 'condenses' values, that is,
it pulls in two or more values for each value it produces. For
example, ::

    def pair(iterLeft,iterRight):
        rhs = iter(iterRight)
        lhs = iter(iterLeft)
        while True:
           yield (rhs.next(), lhs.next())

In this case, the corresponding iterator behavior has to be a bit more
subtle to handle the case of either the right or left iterator raising
SuspendIteration.  It seems to be a matter of decomposing the
generator to recognize intermediate states where a SuspendIterator
exception from the producing context could happen. ::

    class pair:

        def __init__(self, iterLeft, iterRight):
            self.iterLeft = iterLeft
            self.iterRight = iterRight

        def __iter__(self):
            self.rhs = iter(iterRight)
            self.lhs = iter(iterLeft)
            self._temp_rhs = None
            self._temp_lhs = None
            self._next = self.state_rhs
            return self

        def next(self):
            return self._next()

        def state_rhs(self):
            self._temp_rhs = self.rhs.next()
            self._next = self.state_lhs
            return self.next()

        def state_lhs(self):
            self._temp_lhs = self.lhs.next()
            self._next = self.state_pair
            return self.next()

        def state_pair(self):
            self._next = self.state_rhs
            return (self._temp_rhs, self._temp_lhs)

This proposal assumes that a corresponding iterator written using
this class-based method is possible for existing generators.  The
challenge seems to be the identification of distinct states within
the generator where suspension could occur.


Resource Cleanup
----------------

The current generator mechanism has a strange interaction with
exceptions where a 'yield' statement is not allowed within a
try/finally block.  The SuspendIterator exception provides another
similar issue.  The impacts of this issue are not clear. However it
may be that re-writing the generator into a state machine, as the
previous section did, could resolve this issue allowing for the
situation to be no-worse than, and perhaps even removing the
yield/finally situation.  More investigation is needed in this area.


API and Limitations
-------------------

This proposal only covers 'suspending' a chain of iterators, and does
not cover (of course) suspending general functions, methods, or "C"
extension function.  While there could be no direct support for
creating generators in "C" code, native "C" iterators which comply
with the SuspendIterator semantics are certainly possible.


Low-Level Implementation
========================

The author of the PEP is not yet familiar with the Python execution
model to comment in this area.


References
==========

.. [1] Twisted
   (http://twistedmatrix.com)

.. [2] Peak
   (http://peak.telecommunity.com)

.. [3] C10K
   (http://www.kegel.com/c10k.html)

.. [4] Coroutines
   (http://c2.com/cgi/wiki?CallWithCurrentContinuation)

.. [5] PEP 234, Iterators
   (http://www.python.org/peps/pep-0234.html)

.. [6] Stackless Python
   (http://stackless.com)

.. [7] Parrot /w coroutines
   (http://www.sidhe.org/~dan/blog/archives/000178.html)

.. [8] PEP 255, Simple Generators
   (http://www.python.org/peps/pep-0255.html)

.. [9] itertools - Functions creating iterators
   (http://docs.python.org/lib/module-itertools.html)

.. [10] Microthreads in Python, David Mertz
   (http://www-106.ibm.com/developerworks/linux/library/l-pythrd.html)


Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:

-- 
Clark C. Evans                      Prometheus Research, LLC.
                                    http://www.prometheusresearch.com/
    o                               office: +1.203.777.2550 
  ~/ ,                              mobile: +1.203.444.0557 
 //
((   Prometheus Research: Transforming Data Into Knowledge
 \\  ,
   \/    - Research Exchange Database
   /\    - Survey & Assessment Technologies
   ` \   - Software Tools for Researchers
    ~ *
_______________________________________________
Python-Dev mailing list
Python-Dev at python.org
http://mail.python.org/mailman/listinfo/python-dev
Unsubscribe: http://mail.python.org/mailman/options/python-dev/cce%40clarkevans.com


----- End forwarded message -----

-- 
Clark C. Evans                      Prometheus Research, LLC.
                                    http://www.prometheusresearch.com/
    o                               office: +1.203.777.2550 
  ~/ ,                              mobile: +1.203.444.0557 
 //
((   Prometheus Research: Transforming Data Into Knowledge
 \\  ,
   \/    - Research Exchange Database
   /\    - Survey & Assessment Technologies
   ` \   - Software Tools for Researchers
    ~ *



From jason at pengale.com  Tue Sep  7 20:03:21 2004
From: jason at pengale.com (Jason Stitt)
Date: Tue, 07 Sep 2004 21:03:21 -0500
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <413E54F0.5040201@thecablelounge.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>
	<1094585056.23898.10.camel@petra> <413E54F0.5040201@thecablelounge.com>
Message-ID: <42A8FF86-013B-11D9-A692-000D93AF8AD2@pengale.com>

On Sep 7, 2004, at 7:40 PM, Andy Gayton wrote:

> Paul Swartz wrote:

> Jason, just a quick note.
>
> I've been putting off changing over to the new component architecture 
> so I'm working against a pretty out of date version of trunk.

It's not just you :)  I downloaded SFTPGateway, a Twisted program that 
serves as a secure proxy to a regular FTP server, because I thought I 
could glean some insights into SFTP from it. But it doesn't use any of 
Twisted's actual SFTP implementation code, as far as I can tell, and 
I'm not sure I want to pick apart all the code they wrote from scratch. 
(Plus, it's for Zope, not standalone...)

In other news, I downloaded the latest SVN and am trying to pick apart 
the sshsimpleserver.py example again. The log output, below, claims the 
factory has been created and is opening the port, but I can't connect 
to it, and using nmap I can see that the port is not actually open. 
There's one warning I can't quite interpret. Can anyone help me figure 
this out?

The regular echoserver example works just fine.

Thanks,

Jason

--STARTUP--
2004/09/07 22:01 EDT [-] Log opened.
2004/09/07 22:01 EDT [-] __main__.ExampleFactory starting on 5022
2004/09/07 22:01 EDT [-] Starting factory <__main__.ExampleFactory 
instance at 0x406f4d0c>
2004/09/07 22:01 EDT [-] disabling diffie-hellman-group-exchange 
because we cannot find moduli file

--SHUTDOWN--
2004/09/07 22:02 EDT [-] Received SIGINT, shutting down.
2004/09/07 22:02 EDT [__main__.ExampleFactory] (Port 5022 Closed)
2004/09/07 22:02 EDT [__main__.ExampleFactory] Stopping factory 
<__main__.ExampleFactory instance at 0x406f4d0c>
2004/09/07 22:02 EDT [-] Main loop terminated.




From z3p at twistedmatrix.com  Tue Sep  7 20:34:25 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Tue, 07 Sep 2004 22:34:25 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <42A8FF86-013B-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<1094498140.28078.4.camel@sheriffpony>
	<CB076FD4-003B-11D9-834A-000D93AF8AD2@pengale.com>
	<1094500365.23898.2.camel@petra> <413D1066.7070704@thecablelounge.com>
	<621F4375-0079-11D9-834A-000D93AF8AD2@pengale.com>
	<2mzn421irl.fsf@starship.python.net>
	<112F0E80-00FB-11D9-A692-000D93AF8AD2@pengale.com>
	<1094581833.31027.6.camel@sheriffpony>
	<A9739103-0101-11D9-A692-000D93AF8AD2@pengale.com>
	<1094585056.23898.10.camel@petra> <413E54F0.5040201@thecablelounge.com>
	<42A8FF86-013B-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <1094610865.23898.18.camel@petra>

On Tue, 2004-09-07 at 21:03 -0500, Jason Stitt wrote:
> It's not just you :)  I downloaded SFTPGateway, a Twisted program
> that 
> serves as a secure proxy to a regular FTP server, because I thought I 
> could glean some insights into SFTP from it. But it doesn't use any
> of 
> Twisted's actual SFTP implementation code, as far as I can tell, and 
> I'm not sure I want to pick apart all the code they wrote from
> scratch. 
> (Plus, it's for Zope, not standalone...)

Yes it does, it inherits from filetransfer.FileTransferServer, which is
Conch's SFTP implementation.

> 2004/09/07 22:01 EDT [-] disabling diffie-hellman-group-exchange 
> because we cannot find moduli file

You can ignore that.  There are two types of key exchanges that Conch
supports: one using some fixed values, and other that uses a moduli
(usually /etc/ssh/moduli) file to get lots of values.  If it can't find
the moduli file, it falls back to the other kind.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040907/e486b840/attachment.sig>

From fdrake at acm.org  Tue Sep  7 21:12:55 2004
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 7 Sep 2004 23:12:55 -0400
Subject: [Twisted-Python] Re: Implementing a custom FTP server
In-Reply-To: <42A8FF86-013B-11D9-A692-000D93AF8AD2@pengale.com>
References: <F47151B9-FFC1-11D8-834A-000D93AF8AD2@pengale.com>
	<413E54F0.5040201@thecablelounge.com>
	<42A8FF86-013B-11D9-A692-000D93AF8AD2@pengale.com>
Message-ID: <200409072312.55209.fdrake@acm.org>

On Tuesday 07 September 2004 10:03 pm, Jason Stitt wrote:
 > It's not just you :)  I downloaded SFTPGateway, a Twisted program that
 > serves as a secure proxy to a regular FTP server, because I thought I
 > could glean some insights into SFTP from it. But it doesn't use any of
 > Twisted's actual SFTP implementation code, as far as I can tell, and
 > I'm not sure I want to pick apart all the code they wrote from scratch.
 > (Plus, it's for Zope, not standalone...)

Hehe.  As Paul noted, yes, the SFTP Gateway does use his SFTP implementation.  
There's a lot of code there, but it's really just the code that implements 
the FTP client that the SFTP server uses as the backend (in 
sftpgateway.connector).  The FileTransferServer interface was finallized 
based substantially on what we did in SFTP Gateway.

I will note that it was written against Twisted 1.1.0, so the APIs on 
Twisted's side have changed a bit, but that mostly affects the code in 
sftpgateway.application and maybe sftpgateway.authentication.  From what I 
recall from a discussion with Paul at PyCon'04, the changes in Twisted really 
are an improvement.  I wish I had the time to bring that up to date.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>




From ronaldoussoren at mac.com  Tue Sep  7 13:34:37 2004
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Tue, 7 Sep 2004 21:34:37 +0200
Subject: [Twisted-Python] Is anyone working on CFReactor?
In-Reply-To: <FF022D9F-00A1-11D9-9FCD-000A958E9340@krushen.com>
References: <CA8DE351-0090-11D9-B140-000A95C5186E@mac.com>
	<FF022D9F-00A1-11D9-9FCD-000A958E9340@krushen.com>
Message-ID: <F42EECEA-0104-11D9-904B-000A95C77748@mac.com>


On 7-sep-04, at 9:46, Jordan Krushen wrote:

> On 6-Sep-04, at 10:43 PM, vng1 at mac.com wrote:
>
>> Is anyone looking at what's wrong with the CFReactor in Twisted 1.3 
>> and OSX?
>>
>> http://www.twistedmatrix.com/users/roundup.twistd/twisted/issue648
>>
>> I vaguely remember seeing a posting about the GIL causing problems, 
>> but I can't seem to find that article now.
>
> I think Bob had mentioned recent changes to the GIL as one 
> possibility, but I don't know if he's investigated it further.  I know 
> he's busy, so if anyone else here can get CFReactor working, that 
> would be appreciated -- I currently have one project on hold due to 
> this bug.

Looking at the stack-trace it's probably a change to how the GIL is 
managed in PyObjC 1.1 (as oposed to earlier versions). Starting from 
PyObjC 1.1 we give up the GIL when calling Cocoa code (such as in 
objc_NSApplicationMain when calling NSApplicationMain).

I'd be surprised if the code generated from cfsupport.pyx contains 
calls to PyGILState_Acquire, which would give interesting events when 
runLoopTimerCallBack is called ;)

Ronald


--
X|support bv            http://www.xsupport.nl/
T:  +31 610271479       F:  +31 204416173




From behnel_ml at gkec.informatik.tu-darmstadt.de  Wed Sep  8 01:58:05 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Wed, 08 Sep 2004 09:58:05 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>
	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>
	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>
Message-ID: <413EBB8D.20204@gkec.informatik.tu-darmstadt.de>


Bob Ippolito schrieb:
 >>>>    heapq.py is under the PSF license.  PSF is roughly similar to MIT.
 >>>> Is this going to be okay for inclusion in Twisted?
 >>>
 >>> It's part of Python, so I don't see why that would be necessary.
 >>
 >> This is patched / somehow different version.

Right, it needs to keep track of the array position where a DelayedCall is stored in order to remove them as quickly as possible.


 >>> However, I have profiled various heapq-based schemes for callLater in
 >>> the past, and they always end up losing pretty big in the average case,
 >>> and winning only in perverse cases such as hundreds of callLater(0)s per
 >>> tick.  I saw a little discussion of the performance impact, but I am
 >>> still not entirely convinced that it's a good idea.
 >
 > What is the "average" case anyway?  For what application?  Where are the
 > performance tests coming from?

Yes, I think that's a problem. Now, as far as I see it, the implementation makes the case where there are a lot of interleaved callLater/cancel/reset calls /much/ faster. And in a case where there is only a few calls it shouldn't matter anyway.

Just to repeat myself: what really get's slower is runUntilCurrent, but the gain in callLater should compensate that. So, for the case where each callLater leads to a delayed call, the performance gain should be marginal (my patch already avoids shifting the list in linear time) and in all cases where there are more calls to callLater, reset and cancel (added up) than launched delayed calls, I expect the heap implementation to be faster by orders of magnitude.


 > There is at least one scenario where it makes perfect sense to do a lot
 > of callLater(0.0, ...), when you're doing computation but trying not to
 > block.
 >
 > Though, of course, you would do something like callLater(0.00001, ...)
 > in the current Twisted, because callLater(0.0, ...) pretty much blocks.

What you may gain in that case is that it is no longer necessary to shift the complete list when adding a new call, so there already is a shift from linear time to log(N).

And again: if there is only a few calls to callLater then this is not the place to look for performance bottlenecks anyway. But that is up to the application programmer.

Stefan


BTW: I went to http://www.twistedmatrix.com/bugs, but I can't find the obvious link saying "file a bug report HERE". So I registered, but I don't seem to get a reply - and I can't login either. Looks like the web server is running with the /old/ version of Twisted... :o)




From mwh at python.net  Wed Sep  8 05:00:04 2004
From: mwh at python.net (Michael Hudson)
Date: Wed, 08 Sep 2004 12:00:04 +0100
Subject: [Twisted-Python] Re: Performance issue in reactor.callLater
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com> <1094580821.21920.6.camel@kazekage>
	<1094581714.31032.3.camel@sheriffpony>
	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>
	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>
Message-ID: <2md60x10wb.fsf@starship.python.net>

Stefan Behnel <behnel_ml at gkec.informatik.tu-darmstadt.de> writes:

> BTW: I went to http://www.twistedmatrix.com/bugs, but I can't find
> the obvious link saying "file a bug report HERE". So I registered,
> but I don't seem to get a reply - and I can't login either. Looks
> like the web server is running with the /old/ version of
> Twisted... :o)

You probably will get a reply, eventually -- at least that's what
happened to me.  Took about 8 hours, IIRC.

Cheers,
mwh

-- 
  That's why the smartest companies use Common Lisp, but lie about it
  so all their competitors think Lisp is slow and C++ is fast.  (This
  rumor has, however, gotten a little out of hand. :)
                                        -- Erik Naggum, comp.lang.lisp




From glyph at divmod.com  Wed Sep  8 08:12:50 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 08 Sep 2004 10:12:50 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413EBB8D.20204@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>
	<1094479111.28078.0.camel@sheriffpony>
	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>
	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>
	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>
	<413DEAE2.7050701@divmod.com> <1094580821.21920.6.camel@kazekage>
	<1094581714.31032.3.camel@sheriffpony>
	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>
	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>
Message-ID: <1094652770.21920.82.camel@kazekage>

On Wed, 2004-09-08 at 03:58, Stefan Behnel wrote:

> Just to repeat myself: what really get's slower is runUntilCurrent,
> but the gain in callLater should compensate that. So, for the case
> where each callLater leads to a delayed call, the performance gain
> should be marginal (my patch already avoids shifting the list in
> linear time) and in all cases where there are more calls to callLater,
> reset and cancel (added up) than launched delayed calls, I expect the
> heap implementation to be faster by orders of magnitude.

runUntilCurrent happens every tick; callLater only happens sometimes.
Rather than say "average" applications: In my understanding, this will
speed up applications that have lots of timed events scheduled at the
expense of applications that transfer data over the network.

Anthony, if you're listening, do you have a profiling setup that could
give us some authoritative numbers?




From behnel_ml at gkec.informatik.tu-darmstadt.de  Wed Sep  8 08:37:04 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Wed, 08 Sep 2004 16:37:04 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <1094652770.21920.82.camel@kazekage>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>
	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>
	<1094652770.21920.82.camel@kazekage>
Message-ID: <413F1910.6050006@gkec.informatik.tu-darmstadt.de>


Glyph Lefkowitz schrieb:
 > runUntilCurrent happens every tick; callLater only happens sometimes.

Calling the method "runUntilCurrent", yes. But that's not important. What makes a difference is that each iteration of the loop in runUntilCurrent is called at most once per callLater, so there is never fewer calls to callLater than iterations in runUntilCurrent - but in many cases there will be more calls to callLater, which gets even worse if you also count calls to cancel and reset. "runUntilCurrent" really is the right place to make the trade-off.


 > Rather than say "average" applications: In my understanding, this will
 > speed up applications that have lots of timed events scheduled at the
 > expense of applications that transfer data over the network.

Just to make myself a bit clearer: runUntilCurrent only gets slower /per delayed call/. So if there are no delayed calls there should be no (measurable) slow down. But if there are delayed calls you will get the speed up.

Stefan




From foom at fuhm.net  Wed Sep  8 12:47:15 2004
From: foom at fuhm.net (James Y Knight)
Date: Wed, 8 Sep 2004 14:47:15 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <413F1910.6050006@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>
	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>
	<1094652770.21920.82.camel@kazekage>
	<413F1910.6050006@gkec.informatik.tu-darmstadt.de>
Message-ID: <80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>


On Sep 8, 2004, at 10:37 AM, Stefan Behnel wrote:
> Just to make myself a bit clearer: runUntilCurrent only gets slower 
> /per delayed call/. So if there are no delayed calls there should be 
> no (measurable) slow down. But if there are delayed calls you will get 
> the speed up.

Sounds like the right tradeoff to me.

However, I'm unconvinced about the reasoning in:
> Ok, I thought about it. And I believe the best way to do this is to 
> write a specialized heap version. I copied the heapq implementation 
> and adapted it so that it keeps track of the position in the heap for 
> each DelayedCall. That makes it possible to remove a call without 
> linear overhead and in log(N) time.

To me, it seems like the right thing is what I think you had before:
1) on cancel, mark it canceled
2) on delay, mark it delayed
3) when about to run a DelayedCall, if it is cancelled, ignore it. If 
it is delayed, reinsert it into the heap in the proper place.

Why did you change to the current method from that?

james




From thomas.weholt at gmail.com  Wed Sep  8 15:50:12 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Wed, 8 Sep 2004 23:50:12 +0200
Subject: [Twisted-Python] Recursive filescanning in Twisted??
Message-ID: <ffb7b7f804090814507d4804a6@mail.gmail.com>

Hi,

I want to run a web-server which displays information about files on
my filesystems. The info will be stored in either a mysql or sqlite
database. The number of files to be scanned can be many and huge in
size. I want to click on a link which goes to a specified
page/resource on the server which starts the filescanning, generates
checksums for the files processed ( sha/md5 ) and stores this info in
the database. The process cannot block the server, at least not the
filescanning itself. The database interactions is not that critical.
It would be nice to have some kind of indication available for users
to see that a filescan was in progress, perhaps even some kind of
progress indication.

Can anybody show me how to do a non-blocking filescan like I've
described in a Twisted-based web-application which generates
sha/md5-checkums in the process?

-- 
Mvh,
Thomas Weholt
http://www.weholt.org - thomas krøll weholt dått org
-----------------------------------------------------------------------------------------------------------------
Alltid morsomt å høre røykere snakke om inneklima og luftkvalitet.



From exarkun at divmod.com  Wed Sep  8 17:42:30 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 08 Sep 2004 19:42:30 -0400
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <ffb7b7f804090814507d4804a6@mail.gmail.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
Message-ID: <413F98E6.7000602@divmod.com>

Thomas Weholt wrote:
> Hi,
> 
> I want to run a web-server which displays information about files on
> my filesystems. The info will be stored in either a mysql or sqlite
> database. The number of files to be scanned can be many and huge in
> size. I want to click on a link which goes to a specified
> page/resource on the server which starts the filescanning, generates
> checksums for the files processed ( sha/md5 ) and stores this info in
> the database. The process cannot block the server, at least not the
> filescanning itself. The database interactions is not that critical.
> It would be nice to have some kind of indication available for users
> to see that a filescan was in progress, perhaps even some kind of
> progress indication.
> 
> Can anybody show me how to do a non-blocking filescan like I've
> described in a Twisted-based web-application which generates
> sha/md5-checkums in the process?
> 

   Something like this, perhaps?  (defgen.py from radix's Twisted sandbox)

   Jp
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: defwalk.py
URL: </pipermail/twisted-python/attachments/20040908/93b9a2fe/attachment.ksh>

From matt.feifarek at gmail.com  Wed Sep  8 22:17:51 2004
From: matt.feifarek at gmail.com (Matt Feifarek)
Date: Thu, 9 Sep 2004 00:17:51 -0400
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <413F98E6.7000602@divmod.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
	<413F98E6.7000602@divmod.com>
Message-ID: <6fb6dbfe0409082117a5a8374@mail.gmail.com>

Also, in python 2.3, os.walk() is a generator by default. Works great.



From mcfletch at rogers.com  Wed Sep  8 23:12:31 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Thu, 09 Sep 2004 01:12:31 -0400
Subject: [Twisted-Python] Why don't Connectors use deferreds?
Message-ID: <413FE63F.2000104@rogers.com>

I've been wasting yet more time today looking for the "right" way to do 
a very simple thing:

    * Given a protocol
    * Given a destination (e.g. a TCP port)
    * Connect to the TCP port using the given protocol and return the
      protocol object to be used by client code

Now, I know the "normal" way to do this is to create a one-off factory 
such as is seen in twisted.web.client and then use the factory to do the 
after-connection operations.  What I'm wondering is why the code doesn't 
use deferred's to make the operations simpler.  That is, a connector 
succeeds if it completes connecting, and fails otherwise.  The return 
value would be a protocol (and thereby an attached transport).

So something like:

    df = reactor.connectTCP( address, port, factory )
    df.addCallbacks(
    doSomethingWithPortObject,doSomethingIfFailsOrCancelled )

Sure, that doesn't give you the ability to cancel the connection, but 
I'd guess it's a fairly common pattern for client-side code.

With less modification of current code, simply adding a deferred to the 
connector that is fired on either failure-to-connect or connection would 
seem reasonable, so:

    connector = reactor.connectTCP( address, port, factory )
    connector.defer.addCallbacks(
    doSomethingWithPortObject,doSomethingIfFailsOrCancelled )

After all, we're dealing with a classic case of a deferred operation 
(completion of the connection), so why not make it use the standard 
deferred mechanisms.

I've hacked in a solution for my current code where the factory calls 
defer.errback in clientConnectionFailed and the protocol calls 
defer.callback in connectionMade, but that seems extremely inelegant 
(and to be honest, I'm not sure it really guarantees that the deferred 
will eventually be called, there may be cases where neither of those 
methods are called).

Maybe I'm just missing something about the "proper" way to do this in 
Twisted, if so, feel free to point out the one-true-way,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From thomas.weholt at gmail.com  Thu Sep  9 00:45:43 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Thu, 9 Sep 2004 08:45:43 +0200
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <6fb6dbfe0409082117a5a8374@mail.gmail.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
	<413F98E6.7000602@divmod.com>
	<6fb6dbfe0409082117a5a8374@mail.gmail.com>
Message-ID: <ffb7b7f804090823454dae15b3@mail.gmail.com>

Ok, thanks!!! Got to get defgen from Subversion, right? And if I was
to put the file-info into a database should I do this as another
callback to ....  eh ... what?


Thomas


On Thu, 9 Sep 2004 00:17:51 -0400, Matt Feifarek
<matt.feifarek at gmail.com> wrote:
> Also, in python 2.3, os.walk() is a generator by default. Works great.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



-- 
Mvh,
Thomas Weholt
http://www.weholt.org - thomas krøll weholt dått org
-----------------------------------------------------------------------------------------------------------------
Alltid morsomt å høre røykere snakke om inneklima og luftkvalitet.



From behnel_ml at gkec.informatik.tu-darmstadt.de  Thu Sep  9 01:21:35 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Thu, 09 Sep 2004 09:21:35 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>	<1094652770.21920.82.camel@kazekage>	<413F1910.6050006@gkec.informatik.tu-darmstadt.de>
	<80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <4140047F.8020203@gkec.informatik.tu-darmstadt.de>


James Y Knight schrieb:
> However, I'm unconvinced about the reasoning in:
> 
>> Ok, I thought about it. And I believe the best way to do this is to 
>> write a specialized heap version. I copied the heapq implementation 
>> and adapted it so that it keeps track of the position in the heap for 
>> each DelayedCall. That makes it possible to remove a call without 
>> linear overhead and in log(N) time.
> 
> 
> To me, it seems like the right thing is what I think you had before:
> 1) on cancel, mark it canceled

That works. However, in cases with many pending delayed calls leaving the cancelled ones on the heap may unnecessarily increase the heap size quite a bit, so I figured it might be better to keep the size low. But I admit that this is an undermotivated decision.

I personally had the case of an ACK tracker where my first approach was to start a timeout for each ACK and then cancel it. But when I saw the desastrous performance of the original Twisted implementation I quickly wrote my own queue for it. Anyway, in such a case you'd have a lot of cancelled delayed calls on the heap and they'd unnecessarily increase the time for new insertions (which is done, as I said, as late as possible, but before the run-loop).

I played with the idea of giving cancel() a new boolean parameter "quick_cancel" that would skip the removal step if set to True. All you'd need to (re-)add in that case would be the check in the runUntilCurrent loop if the current call was cancelled. That may be a good compromise.


> 2) on delay, mark it delayed

That doesn't work.


> 3) when about to run a DelayedCall, if it is cancelled, ignore it. If it 
> is delayed, reinsert it into the heap in the proper place.
> 
> Why did you change to the current method from that?

Delaying a call breaks the heap invariant and therefore may hinder new insertions. There is a simple work around for delay: Store the delay time somewhere in the object and set it when we find the call as first item. /Then/ move it to the right position. This lessens the number of reinsertions if the call is delayed more often. Could be worth it.

However, this doesn't work for reset. Reset accepts an arbitrary time value that may be lower than the original. A work around here could be to correct the heap position in either direction when the time value changes, but that is about as much work as removing and reinserting it.


I chose the current solution as I figured it would be a good trade-off between code complexity, special cases and performance. The quick_cancel thing is easy to implement (4 lines), though.

Could I have other opinions on this?

Stefan




From behnel_ml at gkec.informatik.tu-darmstadt.de  Thu Sep  9 03:39:07 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Thu, 09 Sep 2004 11:39:07 +0200
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>	<1094652770.21920.82.camel@kazekage>	<413F1910.6050006@gkec.informatik.tu-darmstadt.de>
	<80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <414024BB.5040500@gkec.informatik.tu-darmstadt.de>


James Y Knight schrieb:
> To me, it seems like the right thing is what I think you had before:
> 1) on cancel, mark it canceled

Sorry, I do not think that that is a good idea anymore.

The reason is:

1) If we remove the entry during the call to cancel(), it takes log(N) time and is only done once.

2) If we do /not/ remove the entry, cancel() takes constant time (set a flag), but runUntilCurrent has to deal with a larger stack on each iteration. So this may slow down things considerably if many delayed calls are cancelled and remain on the stack.

Here the right place for the trade-off is in cancel().

The patch I finally submitted as a bug report does 1).

Stefan




From itamar at itamarst.org  Thu Sep  9 08:55:49 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 09 Sep 2004 10:55:49 -0400
Subject: [Twisted-Python] Why don't Connectors use deferreds?
In-Reply-To: <413FE63F.2000104@rogers.com>
References: <413FE63F.2000104@rogers.com>
Message-ID: <1094741748.1016.25.camel@sheriffpony>

On Thu, 2004-09-09 at 01:12, Mike C. Fletcher wrote:

> Maybe I'm just missing something about the "proper" way to do this in 
> Twisted, if so, feel free to point out the one-true-way,

There's a utility class for this in twisted.internet.protocol:

deferredOfProtocolInstance =
ClientCreator(MyProtocol).connectTCP("localhost", 1234)

If this matches your needs I suggest adding an issue to
twistedmatrix.com/bugs/ about adding this to the client howto and assign
to hypatia or me.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From LAFORGE49 at peoplepc.com  Thu Sep  9 08:56:16 2004
From: LAFORGE49 at peoplepc.com (William la Forge Jr)
Date: Thu, 9 Sep 2004 10:56:16 -0400
Subject: [Twisted-Python] PEP 334 - Simple Coroutines via SuspendIteration
Message-ID: <NPEFJHLAHPGFKBEPBJJNCEFOCAAA.LAFORGE49@peoplepc.com>

Clark,

I'll note that you are still coupling data flow and control flow.
If you think of coroutines as light-weight threads that operate
very nicely in an asynchronous environment, then it becomes apparent
that coroutines could easily move data via an asynchronously implemented
pipe or queue.

Which is exactly what I'm doing in CompStrm. ;-)

Bill la Forge
http://compstrm.sourceforge.net/




From jlb at houseofdistraction.com  Thu Sep  9 11:23:27 2004
From: jlb at houseofdistraction.com (Jeff Bowden)
Date: Thu, 09 Sep 2004 10:23:27 -0700
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <ffb7b7f804090814507d4804a6@mail.gmail.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
Message-ID: <4140918F.6030700@houseofdistraction.com>

On Linux, file descriptors for disk files are always "ready".  Since 
twisted is based on select() or poll() I'm guessing you will end up 
actually blocking on file reads.  I think you can get non-blocking file 
reads using the new AIO stuff but it's not really a good match for a 
single process server like twisted. 

I don't know about BSD/OSX or Windows.

I would love to be wrong about this, BTW, so if anyone has better info 
I'd like to here it.


Thomas Weholt wrote:

>Hi,
>
>I want to run a web-server which displays information about files on
>my filesystems. The info will be stored in either a mysql or sqlite
>database. The number of files to be scanned can be many and huge in
>size. I want to click on a link which goes to a specified
>page/resource on the server which starts the filescanning, generates
>checksums for the files processed ( sha/md5 ) and stores this info in
>the database. The process cannot block the server, at least not the
>filescanning itself. The database interactions is not that critical.
>It would be nice to have some kind of indication available for users
>to see that a filescan was in progress, perhaps even some kind of
>progress indication.
>
>Can anybody show me how to do a non-blocking filescan like I've
>described in a Twisted-based web-application which generates
>sha/md5-checkums in the process?
>
>  
>




From mcfletch at rogers.com  Thu Sep  9 11:41:29 2004
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Thu, 09 Sep 2004 13:41:29 -0400
Subject: [Twisted-Python] Why don't Connectors use deferreds?
In-Reply-To: <1094741748.1016.25.camel@sheriffpony>
References: <413FE63F.2000104@rogers.com>
	<1094741748.1016.25.camel@sheriffpony>
Message-ID: <414095C9.3050704@rogers.com>

Itamar Shtull-Trauring wrote:
...

>There's a utility class for this in twisted.internet.protocol:
>
>deferredOfProtocolInstance =
>ClientCreator(MyProtocol).connectTCP("localhost", 1234)
>
>If this matches your needs I suggest adding an issue to
>twistedmatrix.com/bugs/ about adding this to the client howto and assign
>to hypatia or me.
>  
>
Okay, issue added to the tracker.  Clarification just so no-one else 
needs to spelunk through to answer the question I had:

The return value is a *connected* protocol.  I gather so because it 
looks as though buildProtocol is called by connector.doRead which then 
calls protocol.makeConnection, which in turn calls 
protocol.connectionMade, and the use of callLater( 0, ...) makes the 
callback fire *after* the protocol has had connectionMade called.

There appear to be cases where the callback can be called with a 
protocol that has failed to initialise, that is, if connectionMade (or 
any of the other operations between callback scheduling and execution) 
fails for some reason, the callback will still be called.  As such the 
callback really is just notifying that the connection has gone through 
(more precisely, that the protocol has been built), not necessarily that 
the protocol is fully initialised and ready-to-go.

Still, it does everything I need with a little bit of checking to be 
sure that the initialisation completed.

Thanks,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From exarkun at divmod.com  Thu Sep  9 12:03:17 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 09 Sep 2004 14:03:17 -0400
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <4140918F.6030700@houseofdistraction.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
	<4140918F.6030700@houseofdistraction.com>
Message-ID: <41409AE5.8050009@divmod.com>

Jeff Bowden wrote:
> On Linux, file descriptors for disk files are always "ready".  

   Right.

> Since 
> twisted is based on select() or poll() I'm guessing you will end up 
> actually blocking on file reads.

   Right.

> I think you can get non-blocking file 
> reads using the new AIO stuff 

   On some systems, right.

> but it's not really a good match for a 
> single process server like twisted.

   Hmm.  Why do you say this?  It's true that AIO will require reactor 
support (IOCP is essentially such a reactor, except for Windows).  I 
don't see a problem with using AIO in a single process, though, and 
apparently neither did Pavel when he wrote IOCP.

> I don't know about BSD/OSX or Windows.

   KQueue supports on-disk files, I suspect.  There is no working KQueue 
reactor, though, so that takes care of BSD/OSX.  Windows has IO 
Completion Ports, which IOCP uses (hence the name ;).

   Jp



From foom at fuhm.net  Thu Sep  9 13:59:21 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 9 Sep 2004 15:59:21 -0400
Subject: [Twisted-Python] Performance issue in reactor.callLater
In-Reply-To: <414024BB.5040500@gkec.informatik.tu-darmstadt.de>
References: <413C6968.8000100@gkec.informatik.tu-darmstadt.de>	<1094479111.28078.0.camel@sheriffpony>	<E20BD795-0028-11D9-96FE-000A95686CD8@redivi.com>	<413CA416.6020009@gkec.informatik.tu-darmstadt.de>	<413D7680.6060103@gkec.informatik.tu-darmstadt.de>	<413DEAE2.7050701@divmod.com>	<1094580821.21920.6.camel@kazekage>	<1094581714.31032.3.camel@sheriffpony>	<E4EAAE3D-00FE-11D9-9C5C-000A95686CD8@redivi.com>	<413EBB8D.20204@gkec.informatik.tu-darmstadt.de>	<1094652770.21920.82.camel@kazekage>	<413F1910.6050006@gkec.informatik.tu-darmstadt.de>
	<80F37A35-01C7-11D9-AC9C-000A95A50FB2@fuhm.net>
	<414024BB.5040500@gkec.informatik.tu-darmstadt.de>
Message-ID: <BD9EA809-029A-11D9-AC9C-000A95A50FB2@fuhm.net>


On Sep 9, 2004, at 5:39 AM, Stefan Behnel wrote:

> 1) If we remove the entry during the call to cancel(), it takes log(N) 
> time and is only done once.
>
> 2) If we do /not/ remove the entry, cancel() takes constant time (set 
> a flag), but runUntilCurrent has to deal with a larger stack on each 
> iteration. So this may slow down things considerably if many delayed 
> calls are cancelled and remain on the stack.

I'm thinking of something like:
- When you call cancel, set the cancelled flag, and increment a counter 
of cancelled items.
- in runUntilCurrent, if the number of cancelled items in the list is 
both > 50 and > 1/2 of the total items, filter them out and re-heapify 
the list.

Now, the only thing left that needs the heap_pos is moving a 
delayedcall to a sooner time. This is an unlikely event, and thus we 
should not be overly concerned about its speed.

Now we can use the builtin heapq, which is written in C in Python 2.4.

Patch attached to bug.

James




From thomas.weholt at gmail.com  Thu Sep  9 15:50:55 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Thu, 9 Sep 2004 23:50:55 +0200
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <41409AE5.8050009@divmod.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
	<4140918F.6030700@houseofdistraction.com>
	<41409AE5.8050009@divmod.com>
Message-ID: <ffb7b7f8040909145078e254e0@mail.gmail.com>

Ok, all the stuff about AIO ( I guess it's async. IO ) and IOCP
doesn't mean much to me right now, but is it possible to just throw
the heavy, blocking code into a seperate thread and synchronize
writing data to the database, which is the only thing the seperate
thread and the main thread Twisted is running in is sharing? Or I'm I
over-simplifying things?

Any such example if doable would be great. Thanks for your input so far.

Thomas


On Thu, 09 Sep 2004 14:03:17 -0400, Jp Calderone <exarkun at divmod.com> wrote:
> Jeff Bowden wrote:
> > On Linux, file descriptors for disk files are always "ready".
> 
>   Right.
> 
> > Since
> > twisted is based on select() or poll() I'm guessing you will end up
> > actually blocking on file reads.
> 
>   Right.
> 
> > I think you can get non-blocking file
> > reads using the new AIO stuff
> 
>   On some systems, right.
> 
> > but it's not really a good match for a
> > single process server like twisted.
> 
>   Hmm.  Why do you say this?  It's true that AIO will require reactor
> support (IOCP is essentially such a reactor, except for Windows).  I
> don't see a problem with using AIO in a single process, though, and
> apparently neither did Pavel when he wrote IOCP.
> 
> > I don't know about BSD/OSX or Windows.
> 
>   KQueue supports on-disk files, I suspect.  There is no working KQueue
> reactor, though, so that takes care of BSD/OSX.  Windows has IO
> Completion Ports, which IOCP uses (hence the name ;).
> 
>   Jp
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



-- 
Mvh,
Thomas Weholt
http://www.weholt.org - thomas krøll weholt dått org
-----------------------------------------------------------------------------------------------------------------
Alltid morsomt å høre røykere snakke om inneklima og luftkvalitet.



From jlb at houseofdistraction.com  Thu Sep  9 15:55:20 2004
From: jlb at houseofdistraction.com (Jeff Bowden)
Date: Thu, 09 Sep 2004 14:55:20 -0700
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <41409AE5.8050009@divmod.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>	<4140918F.6030700@houseofdistraction.com>
	<41409AE5.8050009@divmod.com>
Message-ID: <4140D148.7030900@houseofdistraction.com>

Jp Calderone wrote:

> Jeff Bowden wrote:
>
>> On Linux, file descriptors for disk files are always "ready".  
>
>
>   Right.
>
>> Since twisted is based on select() or poll() I'm guessing you will 
>> end up actually blocking on file reads.
>
>
>   Right.
>
>> I think you can get non-blocking file reads using the new AIO stuff 
>
>
>   On some systems, right.
>
>> but it's not really a good match for a single process server like 
>> twisted.
>
>
>   Hmm.  Why do you say this?  It's true that AIO will require reactor 
> support (IOCP is essentially such a reactor, except for Windows).  I 
> don't see a problem with using AIO in a single process, though, and 
> apparently neither did Pavel when he wrote IOCP.
>
>> I don't know about BSD/OSX or Windows.
>
>
>   KQueue supports on-disk files, I suspect.  There is no working 
> KQueue reactor, though, so that takes care of BSD/OSX.  Windows has IO 
> Completion Ports, which IOCP uses (hence the name ;).



I'm confused.  It sounds like you're saying that there is a reactor 
called IOCP that runs on Linux and uses AIO.  But it also sounds like 
it's Windows only.  Which?

Also, it occurred to me since I wrote my original response that I 
remember a while ago seeing support for async file i/o as a bullet item 
on the epoll TODO list.  I can't find any reference to it at the moment 
though.




From radeex at gmail.com  Thu Sep  9 16:09:24 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 9 Sep 2004 18:09:24 -0400
Subject: [Twisted-Python] Recursive filescanning in Twisted??
In-Reply-To: <ffb7b7f8040909145078e254e0@mail.gmail.com>
References: <ffb7b7f804090814507d4804a6@mail.gmail.com>
	<4140918F.6030700@houseofdistraction.com>
	<41409AE5.8050009@divmod.com>
	<ffb7b7f8040909145078e254e0@mail.gmail.com>
Message-ID: <60ed19d4040909150959acfc44@mail.gmail.com>

On Thu, 9 Sep 2004 23:50:55 +0200, Thomas Weholt
<thomas.weholt at gmail.com> wrote:
> Ok, all the stuff about AIO ( I guess it's async. IO ) and IOCP
> doesn't mean much to me right now, but is it possible to just throw
> the heavy, blocking code into a seperate thread and synchronize
> writing data to the database, which is the only thing the seperate
> thread and the main thread Twisted is running in is sharing? Or I'm I
> over-simplifying things?
> 
> Any such example if doable would be great. Thanks for your input so far.

Unless you're reading off of a network filesystem or similar slow FS
layer, you don't need to worry about the filesystem blocking. If the
files are big, it should be fine to just read only N kilobytes per
reactor iteration, or whatever. That's how twisted.web's static file
serving code works, and it works fine.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From josh at chatgris.com  Fri Sep 10 10:01:31 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Fri, 10 Sep 2004 12:01:31 -0400
Subject: [Twisted-Python] What does this error mean? (Port 12345 Closed)
Message-ID: <200409101201.31519.josh@chatgris.com>

To start off with, last night I had a major bottleneck in python's generic iasynchat modules for large amounts of data..  so I switched to twisted last night.

It ran great, 50x faster!!.  It ran for about 2.5 hours, and then I received this error..

2004/09/10 02:54 CDT [-] (Port 12345 Closed)
2004/09/10 02:54 CDT [-] Stopping factory <twisted.internet.protocol.ServerFactory instance at 0x4076628c>
2004/09/10 02:54 CDT [-] Saving chatserver application to chatserver-shutdown.tap...
2004/09/10 02:54 CDT [-] Traceback (most recent call last):
          File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 227, in callback
            self._startRunCallbacks(result)
          File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 288, in _startRunCallbacks
            self._runCallbacks()
          File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 313, in _runCallbacks
            self.result = callback(self.result, *args, **kw)
          File "/usr/lib/python2.3/site-packages/twisted/internet/base.py", line 317, in _cbContinueSystemEvent
            self._continueSystemEvent(eventType)
        --- <exception caught here> ---
          File "/usr/lib/python2.3/site-packages/twisted/internet/base.py", line 325, in _continueSystemEvent
            callable(*args, **kw)
          File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 135, in save
            self._saveTemp(filename, passphrase, dumpFunc)
          File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 103, in _saveTemp
            dumpFunc(self.original, f)
          File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 119, in dumpFunc
            pickle.dump(obj, file, 1)
        cPickle.PicklingError: Can't pickle __builtin__.SqlSocket: attribute lookup __builtin__.SqlSocket failed

I am rather confused as to how a port can be closed?  I am very new to twisted.

Could anyone shed some light on this?  I need a stable long running daemon, and I am attempting to figure out why this shutdown occurred..

Thanks, Joshua Moore-Oliva



From radeex at gmail.com  Fri Sep 10 10:15:04 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Fri, 10 Sep 2004 12:15:04 -0400
Subject: [Twisted-Python] What does this error mean? (Port 12345 Closed)
In-Reply-To: <200409101201.31519.josh@chatgris.com>
References: <200409101201.31519.josh@chatgris.com>
Message-ID: <60ed19d404091009151b2f906@mail.gmail.com>

On Fri, 10 Sep 2004 12:01:31 -0400, Joshua Moore-Oliva
<josh at chatgris.com> wrote:
> It ran great, 50x faster!!.  It ran for about 2.5 hours, and then I received this error..
> 
> 2004/09/10 02:54 CDT [-] (Port 12345 Closed)
> 2004/09/10 02:54 CDT [-] Stopping factory <twisted.internet.protocol.ServerFactory instance at 0x4076628c>
> 2004/09/10 02:54 CDT [-] Saving chatserver application to chatserver-shutdown.tap...
> 2004/09/10 02:54 CDT [-] Traceback (most recent call last):
...
>         cPickle.PicklingError: Can't pickle __builtin__.SqlSocket: attribute lookup __builtin__.SqlSocket failed
> 
> I am rather confused as to how a port can be closed?  I am very new to twisted.
> 
> Could anyone shed some light on this?  I need a stable long running daemon, 
> and I am attempting to figure out why this shutdown occurred..

"(Port 12345 Closed)" just means that it stopped listening on 12345 in
response to a request for shutdown. The traceback is totally
unrelated, and probably unimportant. twistd saves the state of your
app on shutdown unless you pass the "-o" option. You should probably
pass the "-o" option unless you have a good reason to save the state.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From josh at chatgris.com  Fri Sep 10 10:19:10 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Fri, 10 Sep 2004 12:19:10 -0400
Subject: [Twisted-Python] What does this error mean? (Port 12345 Closed)
	-- Ignore
In-Reply-To: <200409101201.31519.josh@chatgris.com>
References: <200409101201.31519.josh@chatgris.com>
Message-ID: <200409101219.10326.josh@chatgris.com>

Sorry to bother you all, I just realised it was killed via OOM..  I believe the db lib I'm using has a leak in it.

Joshua Moore-Oliva.

On September 10, 2004 12:01 pm, Joshua Moore-Oliva wrote:
> To start off with, last night I had a major bottleneck in python's generic iasynchat modules for large amounts of data..  so I switched to twisted last night.
> 
> It ran great, 50x faster!!.  It ran for about 2.5 hours, and then I received this error..
> 
> 2004/09/10 02:54 CDT [-] (Port 12345 Closed)
> 2004/09/10 02:54 CDT [-] Stopping factory <twisted.internet.protocol.ServerFactory instance at 0x4076628c>
> 2004/09/10 02:54 CDT [-] Saving chatserver application to chatserver-shutdown.tap...
> 2004/09/10 02:54 CDT [-] Traceback (most recent call last):
>           File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 227, in callback
>             self._startRunCallbacks(result)
>           File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 288, in _startRunCallbacks
>             self._runCallbacks()
>           File "/usr/lib/python2.3/site-packages/twisted/internet/defer.py", line 313, in _runCallbacks
>             self.result = callback(self.result, *args, **kw)
>           File "/usr/lib/python2.3/site-packages/twisted/internet/base.py", line 317, in _cbContinueSystemEvent
>             self._continueSystemEvent(eventType)
>         --- <exception caught here> ---
>           File "/usr/lib/python2.3/site-packages/twisted/internet/base.py", line 325, in _continueSystemEvent
>             callable(*args, **kw)
>           File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 135, in save
>             self._saveTemp(filename, passphrase, dumpFunc)
>           File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 103, in _saveTemp
>             dumpFunc(self.original, f)
>           File "/usr/lib/python2.3/site-packages/twisted/persisted/sob.py", line 119, in dumpFunc
>             pickle.dump(obj, file, 1)
>         cPickle.PicklingError: Can't pickle __builtin__.SqlSocket: attribute lookup __builtin__.SqlSocket failed
> 
> I am rather confused as to how a port can be closed?  I am very new to twisted.
> 
> Could anyone shed some light on this?  I need a stable long running daemon, and I am attempting to figure out why this shutdown occurred..
> 
> Thanks, Joshua Moore-Oliva
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From josh at chatgris.com  Fri Sep 10 11:57:45 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Fri, 10 Sep 2004 13:57:45 -0400
Subject: [Twisted-Python] Subclassing processProtocol.
Message-ID: <200409101357.45369.josh@chatgris.com>

I have an application that needs to communicate via netstrings over pipes that I am porting to twisted.

Is it possible to use the netstring protocol that already exists with a processProtocol?

SInce my terminology is probably all incorrect, in simpler terms..

I would like to be able to spawn a process, and communicate with that process via netstrings.

The netstring module would be perfect for this, except that I only know how to get it to work with sockets not processes.

I could write my own netstring protocol on top of the processProtocol, but I would prefer to use the current Netstring protocol if possible as it would
save time and would probably be better than code I would write :)

Is it possible to launch a process and communicate with it via the twisted.protocols.basic.NetstringReceiver class?

Thanks, Joshua Moore-Oliva



From foom at fuhm.net  Fri Sep 10 13:27:06 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 10 Sep 2004 15:27:06 -0400
Subject: [Twisted-Python] Things that Need to be Done for 2.0
In-Reply-To: <60ed19d40408141300723da7a9@mail.gmail.com>
References: <60ed19d40408141300723da7a9@mail.gmail.com>
Message-ID: <66B3AD7C-035F-11D9-AC9C-000A95A50FB2@fuhm.net>

Release progress status check...

Also, I'd like to add another thing to the list of Stuff That Needs to 
be Done:

- Go through bugs marked Urgent, and either fix them or downgrade them. 
Also, upgrade any bugs to "urgent" that should block the release.

On Aug 14, 2004, at 4:00 PM, Christopher Armstrong wrote:
> glyph: Come up with a precise license and copyright policy. Do that,
> and someone (probably me) can change trunk HEAD to use it.

Done.

> Everyone: Get rid of all deprecation warnings when running current 
> APIs.

Done?

> Me: Finish converting our packaging to use zpkgtools, obsoleting half
> of release-twisted. Then improve release-twisted (fix bugs in SVN
> workflow, etc).

Not done.

> Me: Write documentation on release process and teach people how to do 
> it.

Not done.

> Moshez: At least do the initial work for Debian packages for each of
> our subprojects.

Not done.

> Web Sites, in order of importance:

> Someone: Move existing Twisted-core-specific content to a new Core
> project web site.
> foom, fzZzy, dreid: Write a project web site for Web.
> z3p: Write a project web site for Conch.
> exarkun: Write project web sites for names, news, and mail.
> spiv: Write a project web site for Lore and Runner.
> glyph, z3p, exarkun, ???: Write a project web site for Words.
> cce: Write a project web site for Flow.
> Tv: Write a project web site for Pair.

Not done, except for Conch, and News.

> Project web sites are to be placed at
> http://twistedmatrix.com/projects/*/, where * is 'core', 'conch',
> 'web', etc. Put your content in the WebSite svn repository in
> "twistedmatrix.com/projects/". If anybody needs access to this
> repository shoot me a message.
>
> Obviously, not all of these are terribly urgent. The urgent ones are
> core, names, conch, lore, and web. If nobody gets around to creating
> real web sites for the others, I'll put in place a basic stock web
> page.

James




From foom at fuhm.net  Fri Sep 10 16:40:48 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 10 Sep 2004 18:40:48 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <75C75851-037A-11D9-AC9C-000A95A50FB2@fuhm.net>

Okay, I made a script that generates this from Roundup -- I'm going to 
put it in a crontab and have it email out every week from now on. 
Alternate formatting suggestions welcome.


Bug summary
______________________
Since 2004-09-03 22:45:53.767335:
   Bugs opened: 10   Bugs closed: 5   Total open bugs: 305 (+5)

New / Reopened Bugs
______________________
returning None from buildProtocol in ReconnectingClientFactory causes 
exception  (2 hours ago)
        http://www.twistedmatrix.com/bugs/issue710 opened by djk121

Oscar html function broken  (yesterday)
CLOSED http://www.twistedmatrix.com/bugs/issue709 opened by jadestorm

[CORE] ReactorTime has serious performance issues  (yesterday)
        http://www.twistedmatrix.com/bugs/issue707 opened by stefan

Add ClientCreator example to TCP Client howto  (yesterday)
        http://www.twistedmatrix.com/bugs/issue708 opened by mcfletch

[DOCUMENTATION] failure.check() docstring  (2 days ago)
        http://www.twistedmatrix.com/bugs/issue706 opened by thomasvs

retrial util.deferredError blows up on failure  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue705 opened by warner

[CHAT] MSN Protocol bugs (with patches &amp; unit tests)  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue702 opened by delx

[XISH] Jabber xmlstream parse bug (with patch and unit test)  (5 days 
ago)
        http://www.twistedmatrix.com/bugs/issue701 opened by delx

SCGI server protocol implementation  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue704 opened by fog

SCGI server protocol implementation  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue703 opened by fog

Bugs Closed
______________________
Oscar html function broken  (yesterday)
        http://www.twistedmatrix.com/bugs/issue709 opened by jadestorm

[PB] callRemote exception handler relies on possibly unbound local 
`req'  (8 months ago)
        http://www.twistedmatrix.com/bugs/issue459 opened by exarkun

[PB] Copyable and Referenceable undefined in pb.py (sandbox)  (8 months 
ago)
        http://www.twistedmatrix.com/bugs/issue461 opened by exarkun

reconnecting ConnectionPools  (1 month ago)
        http://www.twistedmatrix.com/bugs/issue657 opened by davep

Error reporting for unslicable objects isn't very informative  (8 
months ago)
        http://www.twistedmatrix.com/bugs/issue462 opened by exarkun




From exarkun at divmod.com  Fri Sep 10 17:10:29 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 10 Sep 2004 23:10:29 GMT
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <75C75851-037A-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <20040910231029.29723.636040870.divmod.quotient.537@ohm>

On Fri, 10 Sep 2004 18:40:48 -0400, James Y Knight <foom at fuhm.net> wrote:
>Okay, I made a script that generates this from Roundup -- I'm going to 
> put it in a crontab and have it email out every week from now on. 
> Alternate formatting suggestions welcome.
> 
> [snip]

  Awesome awesome awesome.  Thank you, James.

  Jp




From james at delx.cjb.net  Sat Sep 11 05:35:58 2004
From: james at delx.cjb.net (James Bunton)
Date: Sat, 11 Sep 2004 21:35:58 +1000
Subject: [Twisted-Python] MSN & Jabber patches
Message-ID: <200409112135.58848.james@delx.cjb.net>

Hiya all.

Just a friendly reminding prod to whoever that issue 701 and 702 are both 
sitting in the Twisted tracker with patches and unit tests. =)

---

James



From tim.stebbing at nunatak.com.au  Sat Sep 11 05:44:33 2004
From: tim.stebbing at nunatak.com.au (Timothy Stebbing)
Date: Sat, 11 Sep 2004 21:44:33 +1000 (EST)
Subject: [Twisted-Python] a little thingo
In-Reply-To: <200409112135.58848.james@delx.cjb.net>
References: <200409112135.58848.james@delx.cjb.net>
Message-ID: <41376.144.139.77.193.1094903073.squirrel@mail.nunatak.com.au>

gday,

LordVan had a query the other night, he was writing a test app for a PB
server, and on receiving his root object from a deferred, he wanted to
call each consecutive remote method to test them.

Initially he was adding each test as a callback of the last, and passing
on the root object each time. He wanted to know how to run many callbacks
on the initial return value consecutivly, without chaining.

I wrote this little snippet, which in the end he didn't use, however I
thought it might be of interest to others for some purpose.

problems I didnt bother fixing:

a)  if a test callback modifies the value, the next test gets a modified
value. if this is an issue the Repeater should copy the value.

b) you can't pass extra args to the callbacks.

from twisted.internet import reactor, defer

class Repeater(object):

    def dFactory(self, v):
        while 1:
            d = defer.Deferred()
            d.callback(v)
            yield d

    def __call__(self, v, list):
        g = self.dFactory(v)
        l = []
        for i in list:
            l.append(g.next().addCallback(i))
        return l

##TEST:
def test1(v):
    print v

def test2(v):
    print v

def test3(v):
    print v

r = Repeater()
d = defer.Deferred()
d.callback('foo')
print d.addCallback(r, [test1, test2, test3])
reactor.run()

-tjs



From mailinglist at ltsai.com  Sat Sep 11 19:34:34 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Sun, 12 Sep 2004 09:34:34 +0800
Subject: [Twisted-Python] [repost] twistd quietness
Message-ID: <ci094l$g1n$1@sea.gmane.org>

Hi

Is there an option in twistd from showing stderr messages from
appearing, specifically "Removing stale pidfile /var/run/myProg.pid"?

# twistd -y myProg.tac -q --pid /var/run/myProg.pid

I'm already using the quiet option. Do I simply redirect stderr to
/dev/null?

-Liming




From josh at chatgris.com  Sun Sep 12 14:06:13 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Sun, 12 Sep 2004 16:06:13 -0400
Subject: [Twisted-Python] Handling (intercepting) exceptions in twisted
Message-ID: <200409121606.13647.josh@chatgris.com>

Whenever an exception is raised, I would like to handle it instead of twisted so I can syslog and exit the application.

Is there an excepthook for twisted that I can override to provide this functionality?

Thanks, Joshua Moore-Oliva



From itamar at itamarst.org  Sun Sep 12 14:30:34 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 12 Sep 2004 16:30:34 -0400
Subject: [Twisted-Python] Handling (intercepting) exceptions in twisted
In-Reply-To: <200409121606.13647.josh@chatgris.com>
References: <200409121606.13647.josh@chatgris.com>
Message-ID: <1095021033.9924.2.camel@sheriffpony>

On Sun, 2004-09-12 at 16:06, Joshua Moore-Oliva wrote:
> Whenever an exception is raised, I would like to handle it instead of twisted so I can syslog and exit the application.
> 
> Is there an excepthook for twisted that I can override to provide this functionality?

Something along the lines of:

def f(**kwargs):
    if kwargs.has_key("failure"): # do your thing
twisted.python.log.addObserver(f)

# f will get called on all logged messages.

Note twisted has code (twisted.python.syslog) for hooking up the log system to syslog.




From jason at pengale.com  Sun Sep 12 16:53:33 2004
From: jason at pengale.com (Jason Stitt)
Date: Sun, 12 Sep 2004 17:53:33 -0500
Subject: [Twisted-Python] SSH server silently failing to open port
Message-ID: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>

Hi,

I'm still trying to get my SFTP server up. After looking over 
SFTPGateway in some detail, I think I have an idea of where all the 
pieces fit, but I'm still having the problem I had before with the 
sshsimpleserver example. Even though my factory is being instantiated 
and the log output says it's starting on the port I specified, the port 
is not, in fact, open to any connections.

Because there is no error reported, I'm having a hard time debugging 
this. I know that my factory's __init__ method completes successfully, 
and startFactory is also called. After that... nothing.

Can anyone help me figure out where to start looking, at least?

Thanks,

Jason

Here's my Factory class, minus a few comments and debug print 
statements:

class Factory(factory.SSHFactory):

     def __init__(self):
         self.portal = portal.Portal(Realm())

         def makeConnection(*args, **kw):
             return Connection(*args, **kw)

         self.services = {
             'ssh-userauth': userauth.SSHUserAuthServer,
             'ssh-connection': makeConnection,
         }

         # TODO: replace this with keys loaded from a file
         self.__private_keys = {
             'ssh-rsa': keys.getPublicKeyString(data=publicKey)
         }
         self.__public_keys = {
             'ssh-rsa': keys.getPrivateKeyObject(data=privateKey)
         }

     def buildProtocol(self, address):
         # Note: this function does not use its address parameter. I 
don't know
         # why it's there.
         return factory.SSHFactory.buildProtocol(self, address)

     def getPrivateKeys(self):
         return self.__private_keys.copy()

     def getPublicKeys(self):
         return self.__public_keys.copy()




From z3p at twistedmatrix.com  Sun Sep 12 18:07:58 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Sun, 12 Sep 2004 20:07:58 -0400
Subject: [Twisted-Python] SSH server silently failing to open port
In-Reply-To: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
References: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
Message-ID: <1095034078.22763.3.camel@petra>

On Sun, 2004-09-12 at 17:53 -0500, Jason Stitt wrote:
> Can anyone help me figure out where to start looking, at least?

It's hard to debug with just a class.  A single file that demonstrates
the problem (ideally a minimal example) is much better.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040912/f82f49d0/attachment.sig>

From tom.samplonius at gmail.com  Sun Sep 12 18:34:36 2004
From: tom.samplonius at gmail.com (Tom Samplonius)
Date: Sun, 12 Sep 2004 17:34:36 -0700
Subject: [Twisted-Python] Async Message Queue?
Message-ID: <ff2e0a1a04091217343f8cc6a2@mail.gmail.com>

  Is there an implementation of an async message queue?  I would like
to be send messages to another server, with the guarrentee that
accepted messages can not be lost, if even if the destination server
is down.

Tom



From foom at fuhm.net  Sun Sep 12 18:44:43 2004
From: foom at fuhm.net (James Y Knight)
Date: Sun, 12 Sep 2004 20:44:43 -0400
Subject: [Twisted-Python] Including code under PSF license for backwards
	compatibility?
Message-ID: <1A917BDB-051E-11D9-AC9C-000A95A50FB2@fuhm.net>

Regarding licensing:
Is it okay to include Python library code in twisted for purposes of 
backwards compatibility. Two examples recently:
- Heapq is new in python 2.3. Therefore, regardless of whether we 
modify it or not, if we use it, we either need to depend on python >= 
2.3, or include a copy for compatibility purposes. It has a pure python 
implementation.
- yacc on IRC wanted to use tempfile.mkstemp. This only exists on >= 
2.3. Again, pure python implementation.

Therefore,
Glyph: a pronouncement is necessary on whether, and under what 
conditions, it is acceptable to include PSF-licensed code in twisted.

Select one:
a) It is always okay. Copy freely from python into twisted.
b) It is okay, as long as the modules are included for backwards 
compatibility only and can be removed as soon as the minimum required 
version moves up to 2.3 (or whatever the latest and greatest version we 
need modules from). Also the code under PSF must be segregated in a 
separate file.
c) It is okay <fill in the blank>
d) It is never okay.

As you can probably tell, my initial inclination is (b).

James




From jason at pengale.com  Sun Sep 12 19:27:23 2004
From: jason at pengale.com (Jason Stitt)
Date: Sun, 12 Sep 2004 20:27:23 -0500
Subject: [Twisted-Python] SSH server silently failing to open port
In-Reply-To: <1095034078.22763.3.camel@petra>
References: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
	<1095034078.22763.3.camel@petra>
Message-ID: <104D0589-0524-11D9-8493-000D93AF8AD2@pengale.com>

On Sep 12, 2004, at 7:07 PM, Paul Swartz wrote:

> On Sun, 2004-09-12 at 17:53 -0500, Jason Stitt wrote:
>> Can anyone help me figure out where to start looking, at least?
>
> It's hard to debug with just a class.  A single file that demonstrates
> the problem (ideally a minimal example) is much better.

The sshsimpleserver.py included with Twisted is a fairly minimal 
example. As I mentioned, that's where I first noticed this problem. 
It's in the doc/conch/examples directory in the latest SVN (the one on 
the Web site doesn't work, as we established on the SFTP thread, 
because of a bad import). I guess another question is: Does anybody 
else have this problem?

Jason




From z3p at twistedmatrix.com  Sun Sep 12 19:44:30 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Sun, 12 Sep 2004 21:44:30 -0400
Subject: [Twisted-Python] SSH server silently failing to open port
In-Reply-To: <104D0589-0524-11D9-8493-000D93AF8AD2@pengale.com>
References: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
	<1095034078.22763.3.camel@petra>
	<104D0589-0524-11D9-8493-000D93AF8AD2@pengale.com>
Message-ID: <1095039870.22763.6.camel@petra>

On Sun, 2004-09-12 at 20:27 -0500, Jason Stitt wrote:
> I guess another question is: Does anybody 
> else have this problem?

I don't see it here (SVN head).  Does this happen with other listening
examples?  Try doc/core/examples/echoserv.py and see if that works.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040912/712cf981/attachment.sig>

From glyph at divmod.com  Sun Sep 12 19:54:37 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sun, 12 Sep 2004 21:54:37 -0400
Subject: [Twisted-Python] Including code under PSF license for
	backwards compatibility?
In-Reply-To: <1A917BDB-051E-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <1A917BDB-051E-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <1095040477.3599.3.camel@localhost>

On Sun, 2004-09-12 at 20:44 -0400, James Y Knight wrote:

> b) It is okay, as long as the modules are included for backwards 
> compatibility only and can be removed as soon as the minimum required 
> version moves up to 2.3 (or whatever the latest and greatest version we 
> need modules from). Also the code under PSF must be segregated in a 
> separate file.

> As you can probably tell, my initial inclination is (b).

I agree.  Consider that the pronouncement :).  Code included under non-
MIT licenses for any reason must have its license agreements preserved
in the files themselves.

For any MIT-licensed code from third parties, we should have an
aggregate copyright declarations file for each project included at the
top level.  (This way we don't have to copy and paste
licensing/copyright junk around when we refactor between files.)




From jason at pengale.com  Sun Sep 12 20:37:28 2004
From: jason at pengale.com (Jason Stitt)
Date: Sun, 12 Sep 2004 21:37:28 -0500
Subject: [Twisted-Python] SSH server silently failing to open port
In-Reply-To: <1095039870.22763.6.camel@petra>
References: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
	<1095034078.22763.3.camel@petra>
	<104D0589-0524-11D9-8493-000D93AF8AD2@pengale.com>
	<1095039870.22763.6.camel@petra>
Message-ID: <DAF846C8-052D-11D9-8493-000D93AF8AD2@pengale.com>

On Sep 12, 2004, at 8:44 PM, Paul Swartz wrote:

> On Sun, 2004-09-12 at 20:27 -0500, Jason Stitt wrote:
>> I guess another question is: Does anybody
>> else have this problem?
>
> I don't see it here (SVN head).  Does this happen with other listening
> examples?  Try doc/core/examples/echoserv.py and see if that works.

Yes. Plain echoserv works. Interestingly, the echoserv_ssl example in 
the same directory also works, whereas the conch/ssh example, which I 
tried again, still does not. I'll have to look into this. Perhaps I 
should try using reactor.listenSSL instead of conch. But would that 
even work at all with SFTP?

> -p
> -- 
>        Paul Swartz
> (o_    http://z3p.livejournal.com/
> //\    z3p at twistedmatrix.com
> V_/_   AIM: z3penguin  GPG:5CF0B1C9
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From z3p at twistedmatrix.com  Sun Sep 12 20:46:28 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Sun, 12 Sep 2004 22:46:28 -0400
Subject: [Twisted-Python] SSH server silently failing to open port
In-Reply-To: <DAF846C8-052D-11D9-8493-000D93AF8AD2@pengale.com>
References: <930D949C-050E-11D9-8493-000D93AF8AD2@pengale.com>
	<1095034078.22763.3.camel@petra>
	<104D0589-0524-11D9-8493-000D93AF8AD2@pengale.com>
	<1095039870.22763.6.camel@petra>
	<DAF846C8-052D-11D9-8493-000D93AF8AD2@pengale.com>
Message-ID: <1095043588.22763.10.camel@petra>

On Sun, 2004-09-12 at 21:37 -0500, Jason Stitt wrote:
> Yes. Plain echoserv works. Interestingly, the echoserv_ssl example in 
> the same directory also works, whereas the conch/ssh example, which I 
> tried again, still does not. I'll have to look into this. Perhaps I 
> should try using reactor.listenSSL instead of conch. But would that 
> even work at all with SFTP?

SFTP is just another protocol.  It usually runs over a Conch-provided
secure channel, but it will run over SSL or even a regular TCP
connection.

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040912/176b41b8/attachment.sig>

From andy at thecablelounge.com  Sun Sep 12 22:10:53 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Mon, 13 Sep 2004 14:10:53 +1000
Subject: [Twisted-Python] ftp: LIST blocking issues
Message-ID: <41451DCD.4010504@thecablelounge.com>

Hi there,

I'm finding that the ftp server hangs the client when performing a LIST. 
    I thought it was something to do with what I was doing, but find it 
happens with the standard tap anonymous ftp server as well.

It looks like processCommand adds requests to a blocked queue if 
dtpInstance is None - which it is in my case:

----
2004/09/13 14:03 EST [FTP,0,127.0.0.1] 'PORT 127,0,0,1,152,65'
2004/09/13 14:03 EST [FTP,0,127.0.0.1] processing command ['PORT', 
'127,0,0,1,152,65']
2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd = PORT, 
args = ('127,0,0,1,152,65',)
2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd PORT in 
blockingCommands
2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: 
self.dtpInstance = None
2004/09/13 14:03 EST [FTP,0,127.0.0.1] during dtp setup, blocked = 
[('PORT', ('127,0,0,1,152,65',))]
----

I created the server with 'mktap ftp --root=/tmp' against Twisted trunk 
r11660

Is there something I'm missing?

thanks,
Andy.






From mary-twisted at puzzling.org  Mon Sep 13 04:50:13 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 13 Sep 2004 10:50:13 +0000
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <75C75851-037A-11D9-AC9C-000A95A50FB2@fuhm.net>
References: <75C75851-037A-11D9-AC9C-000A95A50FB2@fuhm.net>
Message-ID: <20040913105013.GG6648@fuchsia.puzzling.org>

On Fri, Sep 10, 2004, James Y Knight wrote:
> Okay, I made a script that generates this from Roundup -- I'm going to 
> put it in a crontab and have it email out every week from now on. 
> Alternate formatting suggestions welcome.

You could have breakdown of bug numbers by component, and also
some summary of unassigned bugs (by component?)

-Mary



From pbouige at pasteur.fr  Tue Sep 14 05:58:37 2004
From: pbouige at pasteur.fr (Philippe Bouige)
Date: Tue, 14 Sep 2004 13:58:37 +0200
Subject: [Twisted-Python] Problem with process ?
Message-ID: <20040914135837.A458656@electre.pasteur.fr>


Hello,

   I have problem with getProcessOutput, I attempt this code (*)
   and i change the line :
   return utils.getProcessOutput("ls",["-l", "-a"])
 
   by :
   return utils.getProcessOutput("ls",["-l, "."])

   it's Ok for this...

   But when i change
   by :
   return utils.getProcessOutput("ls",["-l *"])   
   or :
   return utils.getProcessOutput("ls",["-l -a"])
   or :
   return utils.getProcessOutput("ls",["-l ."])

   and i have allways this error, but I don't undestand ??

   *--- Failure #5 ---
--- <exception caught here> ---
*--- End of Failure #5 ---
Traceback (most recent call last):
  File
  "/home/foo/twisted/internet/default.py", line 526, in doSelect
....etc..
  "/home/foo/twisted/internet/utils.py", line 44, in errReceived
    self.deferred.errback(failure.Failure(IOError("got stderr")))
exceptions.AttributeError: 'NoneType' object has no attribute
'errback'
*--- Failure #9 ---
--- <exception caught here> ---
*--- End of Failure #9 ---
Traceback (most recent call last):
  File
  "/home/foo/twisted/internet/default.py", line 526, in doSelect
    _logrun(selectable, _drdw, selectable, method, dict)
......etc..
  File
  "/home/foo/twisted/internet/utils.py", line 44, in errReceived
    self.deferred.errback(failure.Failure(IOError("got stderr")))
exceptions.AttributeError: 'NoneType' object has no attribute
'errback'
*--- Failure #13 ---
--- <exception caught here> ---
*--- End of Failure #13 ---


   Thank you very much for your help.

(*)--------------------------------------------------------
from twisted.internet import protocol, reactor, defer, utils
from twisted.protocols import basic

class FingerProtocol(basic.LineReceiver):

    def lineReceived(self, user):
        self.factory.getUser(user
            ).addCallback(lambda m:
                      (self.transport.write(m+"\r\n\n"))
            ).addErrback(lambda x : x.printDetailedTraceback())

class FingerFactory(protocol.ServerFactory):

    protocol = FingerProtocol

    def getUser(self, user):
        return utils.getProcessOutput("ls",["-l -a"])

reactor.listenTCP(1079, FingerFactory())
reactor.run()





-- 

                       Cordialement Philippe



From glyph at divmod.com  Tue Sep 14 06:30:42 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 14 Sep 2004 08:30:42 -0400
Subject: [Twisted-Python] Problem with process ?
In-Reply-To: <20040914135837.A458656@electre.pasteur.fr>
References: <20040914135837.A458656@electre.pasteur.fr>
Message-ID: <1095165042.3599.15.camel@localhost>

On Tue, 2004-09-14 at 13:58 +0200, Philippe Bouige wrote:
> Hello,

> 
>    But when i change
>    by :
>    return utils.getProcessOutput("ls",["-l *"])   
>    or :
>    return utils.getProcessOutput("ls",["-l -a"])
>    or :
>    return utils.getProcessOutput("ls",["-l ."])
> 
>    and i have allways this error, but I don't undestand ??

Philippe,

Twisted's getProcessOutput doesn't invoke your operating system's shell
to run commands.  When your shell sees "ls -l *" in a directory with the
files "file1 file2 file3", it converts it (through a series of
manipulations described in 'man 1 sh' on your platform) to ['/bin/ls',
'-l', 'file1', 'file2', 'file3'].

If you are really sure that is what you want, you can run
getProcessOutput like this:

utils.getProcessOutput("/bin/sh", ["-c", "ls -l *"])

but I recommend you do some reading up on how your operating system
processes commands first.




From andrew-twisted at puzzling.org  Tue Sep 14 06:31:36 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 14 Sep 2004 13:31:36 +0100
Subject: [Twisted-Python] Problem with process ?
In-Reply-To: <20040914135837.A458656@electre.pasteur.fr>
References: <20040914135837.A458656@electre.pasteur.fr>
Message-ID: <20040914123136.GH6700@frobozz>

On Tue, Sep 14, 2004 at 01:58:37PM +0200, Philippe Bouige wrote:
[...]
> 
>    But when i change
>    by :
>    return utils.getProcessOutput("ls",["-l *"])   
>    or :
>    return utils.getProcessOutput("ls",["-l -a"])
>    or :
>    return utils.getProcessOutput("ls",["-l ."])
> 
>    and i have allways this error, but I don't undestand ??

It's because you need to pass the paramater list that's passed to exec(2),
not a command string that's passed to sh(1).

At the kernel (i.e. syscall) level, the exec syscall receives a list of
strings, where each argument in argv is a string, and can contain spaces or
* or anything character, except '\0'.

At the level you're probably used to, the shell, you just type "ls -ld *" or
whatever, and the shell expands and splits that up into the list of strings
for the exec syscall (in this example, something like ["ls", "-ld", "file1",
"file2", ...]).

If you want to do the shell's expansion and splitting of a commandline, just
explicitly invoke then shell:

    return utils.getProcessOutput('sh', ['-c "ls -l *"'])

(But beware passing user input directly into that; it's potentially a big
security hole that will allow running of arbitrary shell commands)

-Andrew.




From andrew-twisted at puzzling.org  Tue Sep 14 06:41:27 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 14 Sep 2004 13:41:27 +0100
Subject: [Twisted-Python] Problem with process ?
In-Reply-To: <20040914123136.GH6700@frobozz>
References: <20040914135837.A458656@electre.pasteur.fr>
	<20040914123136.GH6700@frobozz>
Message-ID: <20040914124127.GA16005@frobozz>

On Tue, Sep 14, 2004 at 01:31:36PM +0100, Andrew Bennetts wrote:
[...]
> If you want to do the shell's expansion and splitting of a commandline, just
> explicitly invoke then shell:
> 
>     return utils.getProcessOutput('sh', ['-c "ls -l *"'])

Gah, I of course meant:

    return utils.getProcessOutput('sh', ['-c', 'ls -l *'])

-Andrew.




From nico at tekNico.net  Thu Sep 16 13:11:56 2004
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 16 Sep 2004 21:11:56 +0200
Subject: [Twisted-Python] PyHeartbeat cookbook recipe
Message-ID: <200409162111.59992.nico@tekNico.net>

My old PyHeartbeat recipe on the Cookbook site, included in the O'Reilly book 
too, has got a fresh new look, and a new Twisted implementation besides the 
old threaded one.

Its shortness and double implementation may make it a nice first example for 
those trying to disentangle themselves from those pesky threads. ;-)

PyHeartbeat - detecting inactive computers
http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52302


-- 
Nicola Larosa - nico at tekNico.net

"Laugh. But you too are going to sound like and old fart one day.
And the respect you show or don't show for those that came before you
is going to be what you instill in those that come after you."
 -- EvilTwinSkippy, Slashdot, June 2004

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040916/f010fc09/attachment.sig>

From andy at thecablelounge.com  Thu Sep 16 16:20:38 2004
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 17 Sep 2004 08:20:38 +1000
Subject: [Twisted-Python] ftp: LIST blocking issues
In-Reply-To: <41451DCD.4010504@thecablelounge.com>
References: <41451DCD.4010504@thecablelounge.com>
Message-ID: <414A11B6.4030406@thecablelounge.com>

Andy Gayton wrote:
> I'm finding that the ftp server hangs the client when performing a LIST. 
>    I thought it was something to do with what I was doing, but find it 
> happens with the standard tap anonymous ftp server as well.
> 
> It looks like processCommand adds requests to a blocked queue if 
> dtpInstance is None - which it is in my case:
> 
> ----
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] 'PORT 127,0,0,1,152,65'
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] processing command ['PORT', 
> '127,0,0,1,152,65']
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd = PORT, 
> args = ('127,0,0,1,152,65',)
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd PORT in 
> blockingCommands
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: 
> self.dtpInstance = None
> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] during dtp setup, blocked = 
> [('PORT', ('127,0,0,1,152,65',))]
> ----
> 
> I created the server with 'mktap ftp --root=/tmp' against Twisted trunk 
> r11660
> 
> Is there something I'm missing?

As far as I can tell the ftp protocol is only creating a dtpInstance 
when processing a PASV or PORT command.  But the PORT command blocks if 
there is no dtpInstance - so only passive clients can get a dtpInstance.

I used pftp to the standard tap anonymous ftp server and it works fine.

Does anyone know if this was intentional?  non-passive clients did work 
with Twisted r9390 and before which is fair while ago, so I'm guessing 
it is .. ?

I don't know anything about the inards of the ftp protocol, so just 
trying to get my head around what's going on.

Any clarification would be appreciated,

cheers,

Andy.



From josh at chatgris.com  Thu Sep 16 18:03:38 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Thu, 16 Sep 2004 20:03:38 -0400
Subject: [Twisted-Python] Memory leak//problem in twisted write procedures
Message-ID: <200409162003.38140.josh@chatgris.com>

I believe I have identified a memory problem in twisted.

A quick background..

I've been developing a program that has to use mssql for reasons beyond my control.

Due to the chaotic nature of mssql tds implementations, I created a program to pipe queries through to a windows box.

In the beginning, I was using asyn* for my communications, however asyn* was very inefficient when writing large amounts of data as after each write the
string would be spliced to remove the data written.

I then moved to twisted to use it's far more efficient buffer implementation, and the performance problems went away.

However, I have since been hit with an apparent memory leak.  After reading through the twisted source (specifically the write routines in twisted/internet/abstract.py) 
I believe I have come across the problem.

***

the write implementation continually increases it's write databuffer, only freeing up memory when the data buffer is all sent

However, successive write operations append data to the data buffer..  So if a program is able to keep the data buffer from ever completely emptying (which mine is)
then the data buffer will forever grow, resulting in a memory problem.

I have added some output to print out the length of the data buffer and the offset, and after only 10 minutes of running the numbers are already

offset == 76906496 

dataBuffer len == 120768384

***

Now, reading through the source to fix this problem, the fastest solution (requiring the least change to the existing code) would be to splice//reduce the size of the 
dataBuffer after offset exceeds a certain number.

However, I'm not too intimate with the source..  I will try that above solution to see if it does any good..  otherwise, i think that this is a fairly serious bug that should be addressed
by someone more intimate with the source.

Thanks, Joshua Moore-Oliva



From exarkun at divmod.com  Thu Sep 16 18:29:48 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Fri, 17 Sep 2004 00:29:48 GMT
Subject: [Twisted-Python] Memory leak//problem in twisted write procedures
In-Reply-To: <200409162003.38140.josh@chatgris.com>
Message-ID: <20040917002948.29723.693365409.divmod.quotient.2129@ohm>

On Thu, 16 Sep 2004 20:03:38 -0400, Joshua Moore-Oliva <josh at chatgris.com> wrote:
>I believe I have identified a memory problem in twisted.
> 
> [snip]
> 
> However, I have since been hit with an apparent memory leak.  After reading through the twisted source (specifically the write routines in twisted/internet/abstract.py) 
> I believe I have come across the problem.
> 
> ***
> 
> the write implementation continually increases it's write databuffer, only freeing up memory when the data buffer is all sent
> 
> However, successive write operations append data to the data buffer..  So if a program is able to keep the data buffer from ever completely emptying (which mine is)
> then the data buffer will forever grow, resulting in a memory problem.
> 
> I have added some output to print out the length of the data buffer and the offset, and after only 10 minutes of running the numbers are already
> 
> offset == 76906496 
> 
> dataBuffer len == 120768384
> 
> ***
> 

  Whether or not "leak" is the appropriate term for this is debatable.  That aside, it is somewhat undesirable, but it is completely avoidable without making any changes to Twisted*.  There are two concepts involved, Producers and Consumers.  The transport is a Consumer in this case, and whatever protocol you have that is writing to it is the Producer.  The Consumer will notify the Producer when it would be a good idea to write more bytes.  Since this will only happen when the write buffer is empty, it avoids the problem of an ever growing buffer in the transport.

  Producers and Consumers aren't _too_ well documented, but the relevant interfaces are quite simple:

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IProducer.html
http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IConsumer.html

  There are a few examples throughout Twisted itself.  One such (FileSender, at the end of bottom of the module):

http://cvs.twistedmatrix.com/cvs/trunk/twisted/protocols/basic.py?view=markup&rev=11450&root=Twisted


> Now, reading through the source to fix this problem, the fastest solution (requiring the least change to the existing code) would be to splice//reduce the size of the 
> dataBuffer after offset exceeds a certain number.
> 

  It is the easiest change to make, but it leads to detrimental string copying behavior.  Which this is a minor concern in the case where many small writes are being made while the buffer is large (because huge amounts of copying is already going on), it is a noticable slowdown in the more common case when the buffer is typically empty or almost empty.

  Jp

  * A change _should_ be made to Twisted eventually.  A good solution would involve a zero-copy buffering system, such as a list.  There is an implementation of this, but it involves so many nasty hacks that I don't feel it is worth including.  Shortly after 2.0 I plan to find time to clean up many of the low-level TCP implementation details, as they have grown increasingly crufty over the last year.



From josh at chatgris.com  Thu Sep 16 18:44:28 2004
From: josh at chatgris.com (Joshua Moore-Oliva)
Date: Thu, 16 Sep 2004 20:44:28 -0400
Subject: [Twisted-Python] Memory leak//problem in twisted write procedures
In-Reply-To: <20040917002948.29723.693365409.divmod.quotient.2129@ohm>
References: <20040917002948.29723.693365409.divmod.quotient.2129@ohm>
Message-ID: <200409162044.28955.josh@chatgris.com>


>   Whether or not "leak" is the appropriate term for this is debatable.  

I agree there, hence my use of Memory leak//problem :)

> 

> > Now, reading through the source to fix this problem, the fastest solution (requiring the least change to the existing code) would be to splice//reduce the size of the 
> > dataBuffer after offset exceeds a certain number.
> > 
> 
>   It is the easiest change to make, but it leads to detrimental string copying behavior.  
>>   Which this is a minor concern in the case where many small writes are being made while the buffer is large (because huge amounts of copying is already going on), 
>>   it is a noticable slowdown in the more common case when the buffer is typically empty or almost empty.  

I do not think my idea was properly communicated..

An interim change I think could work quite well along these lines 

from the abstract.py file
def doWrite(self):

      ...
        # If there is nothing left to send,
        if self.offset == len(self.dataBuffer):
            self.dataBuffer = ""
            self.offset = 0
            ...
       elif self.offset > 1000000: #This would be best pre-defined somewhere
           self.dataBuffer = self.dataBuffer[self.offset:]
           self.offset=0
        
        return result

Note that these changes are just done in 'real-time' while writing my email, no guarantees that the change will even let pythons tartup without syntax errors :)

However, notice the check for offset > a particular value.

This would prevent performance degredation for the more common case where the buffer is typically empty or almost empty, as the string would only be 
reduced in the event that too much memory was being wasted (even 10MB would be a good limit)

> 
>   Jp
> 
>   * A change _should_ be made to Twisted eventually.  A good solution would involve a zero-copy buffering system, such as a list.  There is an implementation of this, but it involves so many nasty hacks that I don't feel it is worth including.  Shortly after 2.0 I plan to find time to clean up many of the low-level TCP implementation details, as they have grown increasingly crufty over the last year.

I agree with you that a list would be the best solution in the long term, but the above proposed solution would remove the current problem, as well as not affecting the more
common small buffer cases.

Joshua Moore-Oliva



From itamar at itamarst.org  Thu Sep 16 20:26:30 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 16 Sep 2004 22:26:30 -0400
Subject: [Twisted-Python] PyHeartbeat cookbook recipe
In-Reply-To: <200409162111.59992.nico@tekNico.net>
References: <200409162111.59992.nico@tekNico.net>
Message-ID: <1095387990.1084.15.camel@sheriffpony>

On Thu, 2004-09-16 at 15:11, Nicola Larosa wrote:

> Its shortness and double implementation may make it a nice first example for 
> those trying to disentangle themselves from those pesky threads. ;-)

Yes indeed, thanks for doing this. One comment though - it'd be better
to use reactor.listenUDP and reactor.run() directly for simplicity's
sake, the extra abstraction layers of services and application just make
the example harder to understand. I don't want people to think Twisted
is *too* abstract ;)




From nico at tekNico.net  Fri Sep 17 00:28:14 2004
From: nico at tekNico.net (Nicola Larosa)
Date: Fri, 17 Sep 2004 08:28:14 +0200
Subject: [Twisted-Python] Re: PyHeartbeat cookbook recipe
References: <200409162111.59992.nico@tekNico.net>
	<1095387990.1084.15.camel@sheriffpony>
Message-ID: <cie06b$2f4$1@sea.gmane.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

> One comment though - it'd be better to use reactor.listenUDP and
> reactor.run() directly for simplicity's sake, the extra abstraction layers
> of services and application just make the example harder to understand.

I thought about that, and concluded that the recipe would come out longer
and less structured that way, and that it would be best to directly show
people the "right" way of setting up things.

Maybe it's just that I'm now so accustomed to think in terms of app and
services, that it's harder to go back to the old way.


> I don't want people to think Twisted is *too* abstract ;)

But indeed it is, isn't it? Hiding the truth is tough, sometimes. ;-)))


- -- 
Nicola Larosa - nico at tekNico.net

"Laugh. But you too are going to sound like and old fart one day.
And the respect you show or don't show for those that came before you
is going to be what you instill in those that come after you."
 -- EvilTwinSkippy, Slashdot, June 2004


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (GNU/Linux)

iD8DBQFBSoQDXv0hgDImBm4RAkJ/AKCEM3VHvwOWBvWB/h0jh2jZokDDYACfYTJI
h83j1egtYFtq4ui7lk5aZ8E=
=Gi1t
-----END PGP SIGNATURE-----




From foom at fuhm.net  Fri Sep 17 08:24:48 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 17 Sep 2004 10:24:48 -0400
Subject: [Twisted-Python] Re: PyHeartbeat cookbook recipe
In-Reply-To: <cie06b$2f4$1@sea.gmane.org>
References: <200409162111.59992.nico@tekNico.net>
	<1095387990.1084.15.camel@sheriffpony> <cie06b$2f4$1@sea.gmane.org>
Message-ID: <549D0DCA-08B5-11D9-AC9C-000A95A50FB2@fuhm.net>

On Sep 17, 2004, at 2:28 AM, Nicola Larosa wrote:
>> One comment though - it'd be better to use reactor.listenUDP and
>> reactor.run() directly for simplicity's sake, the extra abstraction 
>> layers
>> of services and application just make the example harder to 
>> understand.
>
> I thought about that, and concluded that the recipe would come out 
> longer
> and less structured that way, and that it would be best to directly 
> show
> people the "right" way of setting up things.
>
> Maybe it's just that I'm now so accustomed to think in terms of app and
> services, that it's harder to go back to the old way.

I agree -- I think it's not a good idea to make all the examples use 
reactor.run() and then when someone actually wants to write a program 
say "well gee now why the heck are you using *that*??"

James




From arthur.lutz at logilab.fr  Fri Sep 17 08:29:21 2004
From: arthur.lutz at logilab.fr (Arthur Lutz)
Date: Fri, 17 Sep 2004 16:29:21 +0200
Subject: [Twisted-Python] domish.Element and deepcopy problem
Message-ID: <1095431360.789.21.camel@sagittarius.logilab.fr>

Hi,

I'm having a problem with domish.Element, here it is (isolated) : 

from twisted.xish import domish
from copy import deepcopy

invitation = domish.Element(('jabber:client', 'message'))
invitation2 = deepcopy(invitation)

gives me : 

Traceback (most recent call last):
  File "modules/isolated_bug.py", line 5, in ?
    invitation2 = deepcopy(invitation)
  File "/usr/lib/python2.3/copy.py", line 198, in deepcopy
    rv = reductor(2)
TypeError: 'NoneType' object is not callable


Python version : 
Python 2.3.4 (#2, Jul  5 2004, 09:15:05) 
[GCC 3.3.4 (Debian 1:3.3.4-2)] on linux2
Type "help", "copyright", "credits" or "license" for more information.


Hope this is enough for a diagnostic. 

Thanks a lot for the good work, 

-- 
Arthur LUTZ
LOGILAB, Paris (France).
http://www.logilab.com   http://www.logilab.fr http://www.logilab.org
Advanced Computing -  Knowledge Management -  Artificial Intelligence
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 307 bytes
Desc: Ceci est une partie de message numériquement signée.
URL: </pipermail/twisted-python/attachments/20040917/40970d67/attachment.sig>

From itamar at itamarst.org  Fri Sep 17 10:05:41 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 17 Sep 2004 12:05:41 -0400
Subject: [Twisted-Python] domish.Element and deepcopy problem
In-Reply-To: <1095431360.789.21.camel@sagittarius.logilab.fr>
References: <1095431360.789.21.camel@sagittarius.logilab.fr>
Message-ID: <1095437141.1297.0.camel@sheriffpony>

Could you add this to twistedmatrix.com/bugs/ and assign to dizzyd?




From itamar at itamarst.org  Fri Sep 17 10:09:13 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 17 Sep 2004 12:09:13 -0400
Subject: [Twisted-Python] Re: PyHeartbeat cookbook recipe
In-Reply-To: <cie06b$2f4$1@sea.gmane.org>
References: <200409162111.59992.nico@tekNico.net>
	<1095387990.1084.15.camel@sheriffpony>  <cie06b$2f4$1@sea.gmane.org>
Message-ID: <1095437353.1297.5.camel@sheriffpony>

On Fri, 2004-09-17 at 02:28, Nicola Larosa wrote:

> I thought about that, and concluded that the recipe would come out longer
> and less structured that way, and that it would be best to directly show
> people the "right" way of setting up things.

It'd come out slightly shorter, actually. As for the right way... using
twistd is generally the right thing to do, yes, but if as in your
previous example you want to show people how relatively low-level APIs
work, reactor is probably better. The services abstraction isn't all
that relevant to your example, since it's so simple.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From foom at fuhm.net  Fri Sep 17 14:04:33 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 17 Sep 2004 16:04:33 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <CAD7B7D0-08E4-11D9-AC9C-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2004-09-10 22:45:53.770000:
   Bugs opened: 9   Bugs closed: 9   Total open bugs: 305 (+0)

New / Reopened Bugs
______________________
[WORDS] IRC examples bug fix/improvment  (9 hours ago)
        http://www.twistedmatrix.com/bugs/issue721 opened by yacc

cfreactor breaks LoopingCall  (yesterday)
CLOSED http://www.twistedmatrix.com/bugs/issue717 opened by anthony

[MAIL] MaildirMailbox.appendMessage implementation.  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue714 opened by yacc

Pluggable Application loaders  (yesterday)
        http://www.twistedmatrix.com/bugs/issue720 opened by exarkun

tempfile.mkstemp in twisted.python.compat  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue713 opened by yacc

[CORE] better pluggable reactor support for twistd  (yesterday)
        http://www.twistedmatrix.com/bugs/issue719 opened by itamarst

[CORE] Allow specifying exit code in generic way (supporting use and 
non-use of twistd)  (yesterday)
        http://www.twistedmatrix.com/bugs/issue718 opened by itamarst

[CONCH] weirdness in conch's connection forwarding  (yesterday)
        http://www.twistedmatrix.com/bugs/issue716 opened by z3p

[CORE] No way to override the default signal handler  (2 days ago)
CLOSED http://www.twistedmatrix.com/bugs/issue715 opened by loic

Bugs Closed
______________________
cfreactor breaks LoopingCall  (yesterday)
        http://www.twistedmatrix.com/bugs/issue717 opened by anthony

[MAIL] twisted.mail.pop3.POP3 unconditionally chatty  (2 weeks ago)
        http://www.twistedmatrix.com/bugs/issue700 opened by yacc

[DOCUMENTATION, RELEASE MANAGEMENT] Twisted 1.3 identifying itself as 
1.3.0rc1  (2 months ago)
        http://www.twistedmatrix.com/bugs/issue641 opened by br1

[DOCUMENTATION, TWISTD] twistd or twistw?  (2 months ago)
        http://www.twistedmatrix.com/bugs/issue640 opened by br1

spec file in Twisted-1.3.0 tarball has wrong version and source 
information  (1 month ago)
        http://www.twistedmatrix.com/bugs/issue679 opened by jawildman

[WEB] SCGI server protocol implementation  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue703 opened by fog

Implement spawnProcess for default reactor on Windows  (5 months ago)
        http://www.twistedmatrix.com/bugs/issue591 opened by justinj

[CORE] Port t.p.c to Zope3 components  (5 months ago)
        http://www.twistedmatrix.com/bugs/issue572 opened by itamarst

[CORE] No way to override the default signal handler  (2 days ago)
        http://www.twistedmatrix.com/bugs/issue715 opened by loic




From exarkun at divmod.com  Sat Sep 18 21:30:48 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sun, 19 Sep 2004 03:30:48 GMT
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: 0
Message-ID: <20040919033048.29723.1152737553.divmod.quotient.3244@ohm>

Begin forwarded message:

> From: Jp Calderone <exarkun at wolfwood.twistedmatrix.com>
> Date: Sat, 18 Sep 2004 21:25:57 -0600
> To: twisted-commits at twistedmatrix.com
> Subject: [Twisted-commits] r11721 - revert r11685
> Reply-to: twisted-python at twistedmatrix.com
> 
> Author: exarkun
> Date: Sat Sep 18 21:25:57 2004
> New Revision: 11721
> 
> Removed:
>    trunk/doc/web/howto/newweb.xhtml
>    trunk/twisted/web2/
> Log:
> revert r11685
> 
> twisted/web2 has an unacceptable dependency on nevow that will need to be 
> discussed or removed before this subpackage can be added.
> 
> 
> _______________________________________________
> Twisted-commits mailing list
> Twisted-commits at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-commits
> 



From projects at reedflute.com  Sun Sep 19 02:47:45 2004
From: projects at reedflute.com (Eugene Coetzee)
Date: Sun, 19 Sep 2004 10:47:45 +0200
Subject: [Twisted-Python] TCP wrapper support for twisted servers
Message-ID: <414D47B1.8090300@reedflute.com>

Hi everyone,

I was wondering if anybody knows about a Python wrapper  for  libwrap. 
I'm aware of libwrap function libraries  for PHP and libwrap-ruby for 
Ruby - but could not google anything similar for Python.

I want to control access to my twisted servers using hosts.allow/deny. I 
have read someting about "inetd setup" options planned for tap2deb 
(couldn't get any docs regarding inetd/tcp -wrapper support though).

Alternatively, is there anything included in twisted that can be used 
get tcp wrapper support without having to run from inetd.

regards,
Eugene
   

Web                 -> www.reedflute.com
=============================================== 





From itamar at itamarst.org  Sun Sep 19 08:07:57 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 19 Sep 2004 10:07:57 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <20040919033048.29723.1152737553.divmod.quotient.3244@ohm>
References: <20040919033048.29723.1152737553.divmod.quotient.3244@ohm>
Message-ID: <1095602876.1291.11.camel@sheriffpony>

Why is this unacceptable? We depend on pyOpenSSL for TLS support, etc..




From exarkun at divmod.com  Sun Sep 19 10:30:31 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sun, 19 Sep 2004 16:30:31 GMT
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095602876.1291.11.camel@sheriffpony>
Message-ID: <20040919163031.29723.1465129106.divmod.quotient.3557@ohm>

On Sun, 19 Sep 2004 10:07:57 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>Why is this unacceptable? We depend on pyOpenSSL for TLS support, etc..
> 

  The logistical reasons:

    There is no release of Nevow.

    None of the buildslaves have even an SVN trunk checkout installed, nor have any of them been asked to install one.

    Developers weren't told about this new dependency, so they may not have it installed.  This leads to strangely failing tests, making it difficult to tell if outstanding changes that a developer wants to commit are broken.

  The technical reasons:

    Nevow imports Twisted.  Therefore, Twisted should not import Nevow.

    Twisted is the networking framework and the web server framework.  It is lower level than the application server and the templating system.  The latter should depend on the former, if a dependency exists, not the reverse.  _If_ it is desired for Twisted to gain functionality from a Nevow installed, Nevow must be careful to only import certain things from Twisted.  

 I would much prefer if Nevow gained functionality from Twisted and not the reverse, but if twisted.web/nevow developers desire things to work as they do currently in twisted.web2, at least the above issues need to be addressed.  This thread should serve to resolve one of them (hopefully Twisted developers are now aware of the potential dependency ;).

  Jp



From fu at donfu.com  Sun Sep 19 13:44:34 2004
From: fu at donfu.com (donfu)
Date: Sun, 19 Sep 2004 21:44:34 +0200
Subject: [Twisted-Python] problems with trial and adbapi
Message-ID: <5562CB50-0A74-11D9-8055-000393DC7B7C@donfu.com>

Dear Twisters

I'm diving into the twisted matrix. Mostly really enjoying it, but 
sometimes it's a tough ground :)

Now i'm trying to set up unittests with trial for a small twisted 
datastore. the store itself works outside of trial, but strange things 
happen when running the tests.

The first thing I had to learn, is to explicitly start the dbpool with 
dbpool.start(). Now the tests work sometimes, but sometimes not. I 
guess the problem has something to do with adbapi's usage of threads 
and my using of 'deferredResult()' in the tests.

can someone help me here?

thanks,
donfu.




From slyphon at twistedmatrix.com  Sun Sep 19 14:08:14 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 19 Sep 2004 16:08:14 -0400
Subject: [Twisted-Python] retrial,
	the new-and-improved unittesting framework for twisted
Message-ID: <414DE72E.4020305@twistedmatrix.com>

Hello twisted people,

Many of you know that I've been working on rewriting the
twisted-framework's unittesting program "trial".

This message is for those of you who don't ;)

I've nearly completely redesigned trial in terms of both it's
user-facing features, and it's internal workings. In initial testing,
it's shown a 4x speed increase over regular trial, running twisted's
tests in roughly 220s on a p3-1Ghz machine (as compared to 800+ seconds
on the same box).

here are some of the features you can look forward to (from the
twisted.trial.unittest docstring, so please excuse the epydoc markup):

  1. B{Trial now understands deferreds!}
    - There is no reason to use L{twisted.trial.util.wait} or
      L{twisted.trial.util.deferredResult}. Write your deferred handling
      code as you normally would, make your assertions in your callbacks
      and errbacks, then I{return the deferred from your test method}.
      Trial will spin the reactor (correctly) and will wait for the
      results before running the next test. This will allow developers to
      write more natural-looking tests for their asynchronous code.
    - there is a new attribute that has been introduced, C{.timeout}.
      Trial will wait a default 4 seconds for a result from a deferred
      that is returned from a test method. If you wish to make this value
      smaller or larger:

          >>> from twisted.trial.unittest import TestCase
          >>> from twisted.internet import defer
          >>> class MyTestCase(TestCase):
          ...     def testThatReturnsADeferred(self):
          ...         return defer.success('Hooray!')
          ...     testThatReturnsADeferred.timeout = 2.8
          ...
          >>>

      This would cause trial to wait up to 2.8 seconds (quite needlessly in
      this case) for the deferred to either callback or errback

  2. B{Trial is now 100% compatible with new-style classes and zope
     interfaces}
    - Some people (the maintainer included), have been bitten in the past
      by trial's mediocre support for new-style classes (classes which
      inherit from object). In v2.0, nearly all of the classes that
      comprise the framework inherit from object, so support is built-in.
      Whereas before the TestCase finding machinery used a test for
      inheritance from L{twisted.trial.unittest.TestCase}, the new
      mechanism tests that L{twisted.trial.interfaces.ITestCaseFactory}
      is supplied by your class B{type}. You can write a custom TestCase,
      and trial will detect it and use it as a class to test, if you do:

          >>> import zope.interface as zi
          >>> from twisted.trial.interfaces import ITestCaseFactory
          >>> from twisted.trial.interfaces import ITestCase
          >>> class MyTestCase(object):
          ...     zi.classProvides(ITestCaseFactory)
          ...     zi.implements(ITestCase)
          >>>

      Naturally, the class should actually provide an implementation of
      L{twisted.trial.interfaces.ITestCase}.
    - To avoid any possible conflicts (and to provide component
      de-registration), trial uses it's own private adapter registry, see
      L{twisted.trial.__init__} for details.
    - Trial makes use of zope.interface.Interfaces to allow flexibility
      and adaptation. All objects implement interfaces, and those
      interfaces are centralized and documented in
      L{twisted.trial.interfaces}.


  3. B{All assert* and fail* methods are now top-level functions of the
  unittest module}
    - Previously they were only available as instance-methods on the
      TestCase. You can now import all of the assert* and fail* variants
      and use them as functions. This will allow you to use this
      functionality in helper classes and functions that aren't part of
      your TestCase (plus less typing ;])
    - Note: these methods are no longer part of the ITestCase API, but
      are provided as a backwards-compatability to classes written to use
      the original TestCase class.


  4. B{The trial script now accepts a --reporter option}
    - This is to allow for custom reporter classes. If you want to run a
      trial process remotely, and gain access to the output, or if you
      would just like to have your reporting formatted differently, you
      can supply the fully-qualified class name (of a class that
      implements L{twisted.trial.interfaces.IReporter}) to --reporter,
      and trial will report results to your class.
    - The Reporter is now (almost) totally stateless. All stats on the
      test run are held in the TestSuite and are reported as necessary
      using the ITestStats interface. This allows for greatly simplified
      design in the Reporter implementation.
    - The Reporter API has been greatly simplified by changing the method
      signatures so that methods are called with a single object that can
      easily be adapted to provide all information necessary about a
      given test phase.


  5. B{Compatibility for PyUnit tests}
    - Trial now supports stdlib unittest.TestCase classes transparently.
      This functionality is unstable, and has not been heavily tested.
    - Note: Trial accomplishes this by monkey-patching unittest.TestCase
      in L{twisted.trial.__init__}.
    - Please report any bugs you find with this feature to the
      twisted-python mailing list


  6. B{Experimental support for doctests}
    - The trial script now supports a --doctest=[module] option. The
      argument is a fully-qualified module name, and trial will use a
      modified version of DocTestSuite to run the doctests it finds.
    - My support for doctests is broken when using Python 2.4-alpha3,
      hopefully, i'll get this fixed by the time the first major-release
      comes out.
    - Note: you cannot use .skip or .todo attributes with doctests, all
      tests will be reported as pass/fail
    - Please report any bugs you find with this feature to the
      twisted-python mailing list


  7. B{expectedAssertions} is no longer supported
    - it was just too difficult to make radix's clever
      deferred-doublecheck feature work with this code revision. With his
      permisison, this feature has been removed.


Trial's 'special' attributes:

  1. .todo attributes can either be set on the TestCase or on an
  individual test* method, and indicate that the test is expected to
  fail. New tests (for which the underlying functionality has not yet
  been added) should set this flag while the code is being written. Once
  the feature is added and the test starts to pass, the flag should be
  removed.

  2. Tests of highly-unstable in-development code should consider using
  .skip to turn off the tests until the code has reached a point where
  the success rate is expected to be monotonically increasing.

  3. Tests that return deferreds may alter the default timeout period of
  4.0 seconds by adding a method attribute C{.timeout} which is the
  number of seconds as a float that trial should wait for a result.


I am currently developing this in a branch in the twisted repository. I
would like to encourage anyone who is curious to check it out and play
with it and its new features. I'd like to make it as bug free as
possible before I merge it back into trunk, and the more eyes I can get
on it, the better.

you can check it out by doing
"svn co svn://svn.twistedmatrix.com/svn/Twisted/branches/slyphon/retrial-2"

and thank you for your support....

-Jonathan "slyphon" Simms




From slyphon at twistedmatrix.com  Sun Sep 19 15:22:02 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Sun, 19 Sep 2004 17:22:02 -0400
Subject: [Twisted-Python] ftp: LIST blocking issues
In-Reply-To: <414A11B6.4030406@thecablelounge.com>
References: <41451DCD.4010504@thecablelounge.com>
	<414A11B6.4030406@thecablelounge.com>
Message-ID: <414DF87A.8050006@twistedmatrix.com>

Andy Gayton wrote:

> Andy Gayton wrote:
>
>> I'm finding that the ftp server hangs the client when performing a 
>> LIST.    I thought it was something to do with what I was doing, but 
>> find it happens with the standard tap anonymous ftp server as well.
>>
>> It looks like processCommand adds requests to a blocked queue if 
>> dtpInstance is None - which it is in my case:
>>
>> ----
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] 'PORT 127,0,0,1,152,65'
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] processing command ['PORT', 
>> '127,0,0,1,152,65']
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd = 
>> PORT, args = ('127,0,0,1,152,65',)
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: cmd PORT 
>> in blockingCommands
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] FTP.processCommand: 
>> self.dtpInstance = None
>> 2004/09/13 14:03 EST [FTP,0,127.0.0.1] during dtp setup, blocked = 
>> [('PORT', ('127,0,0,1,152,65',))]
>> ----
>>
>> I created the server with 'mktap ftp --root=/tmp' against Twisted 
>> trunk r11660
>>
>> Is there something I'm missing?
>
>
> As far as I can tell the ftp protocol is only creating a dtpInstance 
> when processing a PASV or PORT command.  But the PORT command blocks 
> if there is no dtpInstance - so only passive clients can get a 
> dtpInstance.
>
> I used pftp to the standard tap anonymous ftp server and it works fine.
>
> Does anyone know if this was intentional?  non-passive clients did 
> work with Twisted r9390 and before which is fair while ago, so I'm 
> guessing it is .. ?
>
> I don't know anything about the inards of the ftp protocol, so just 
> trying to get my head around what's going on.
>
> Any clarification would be appreciated,
>
> cheers,
>
> Andy.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Well, basically, ftp is broken in subtle ways.  IIRC, the support for 
the PORT command was iffy at best.

The best thing you can do is go to twistedmatrix.com and file a bug 
report. The protoocol is in the middle of yet-another rewrite, and 
having this issue in the bug-tracker will help to make sure that it gets 
fixed.

-Jonathan Simms








From dave at krondo.com  Sun Sep 19 17:50:51 2004
From: dave at krondo.com (Dave Peticolas)
Date: Sun, 19 Sep 2004 16:50:51 -0700
Subject: [Twisted-Python] problems with trial and adbapi
In-Reply-To: <5562CB50-0A74-11D9-8055-000393DC7B7C@donfu.com>
References: <5562CB50-0A74-11D9-8055-000393DC7B7C@donfu.com>
Message-ID: <1095637851.13805.51.camel@oneiros>

On Sun, 2004-09-19 at 12:44, donfu wrote:
> Dear Twisters
> 
> I'm diving into the twisted matrix. Mostly really enjoying it, but 
> sometimes it's a tough ground :)
> 
> Now i'm trying to set up unittests with trial for a small twisted 
> datastore. the store itself works outside of trial, but strange things 
> happen when running the tests.
> 
> The first thing I had to learn, is to explicitly start the dbpool with 
> dbpool.start(). Now the tests work sometimes, but sometimes not. I 
> guess the problem has something to do with adbapi's usage of threads 
> and my using of 'deferredResult()' in the tests.

deferredResult should work just fine, I use it all the
time with db-related tests. Are you calling db.close()
after the tests are done?

dave





From foom at fuhm.net  Sun Sep 19 18:19:42 2004
From: foom at fuhm.net (James Y Knight)
Date: Sun, 19 Sep 2004 20:19:42 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <20040919163031.29723.1465129106.divmod.quotient.3557@ohm>
References: <20040919163031.29723.1465129106.divmod.quotient.3557@ohm>
Message-ID: <C4DA5F5A-0A9A-11D9-92A7-000A95A50FB2@fuhm.net>

On Sep 19, 2004, at 12:30 PM, <exarkun at divmod.com> wrote:
> twisted/web2 has an unacceptable dependency on nevow that will need to 
> be
> discussed or removed before this subpackage can be added.

First off -- I consider this a rude thing to do, considering I am far 
from being unreachable. What was the emergency that prompted this 
removal at midnight on a saturday night? None? Yeah, that's what I 
thought.

> On Sun, 19 Sep 2004 10:07:57 -0400, Itamar Shtull-Trauring 
> <itamar at itamarst.org> wrote:
>> Why is this unacceptable? We depend on pyOpenSSL for TLS support, 
>> etc..
>>
>
>   The logistical reasons:
>
>     There is no release of Nevow.

There is. Although it's old. This is a very good reason for not 
releasing twisted.web2. Fortunately, since we have decoupled releases 
now, it doesn't affect anything else.

>     None of the buildslaves have even an SVN trunk checkout installed, 
> nor have any of them been asked to install one.

True.

>     Developers weren't told about this new dependency, so they may not 
> have it installed.

twisted-web ml was. I don't expect developers that don't care about 
twisted web to install Nevow.

> This leads to strangely failing tests, making it difficult to tell if 
> outstanding changes that a developer wants to commit are broken.

I assume you mean "Could not import twisted.web2.test.test_web: 
Traceback: exceptions.ImportError, No module named nevow.". If so,  
"strangely failing tests" is quite a hyperbole.

>   The technical reasons:
>
>     Nevow imports Twisted.  Therefore, Twisted should not import Nevow.
>
>     Twisted is the networking framework and the web server framework.  
> It is lower level than the application server and the templating 
> system.  The latter should depend on the former, if a dependency 
> exists, not the reverse.  _If_ it is desired for Twisted to gain 
> functionality from a Nevow installed, Nevow must be careful to only 
> import certain things from Twisted.
>
>  I would much prefer if Nevow gained functionality from Twisted and 
> not the reverse, but if twisted.web/nevow developers desire things to 
> work as they do currently in twisted.web2, at least the above issues 
> need to be addressed.  This thread should serve to resolve one of them 
> (hopefully Twisted developers are now aware of the potential 
> dependency ;).

Most of Twisted web2 does not/will not depend on Nevow. Generation of 
some server-generated pages does/will. Those tests should just be 
skipped if Nevow isn't installed. That they aren't is an issue, sure.

If you want to have any input on these technical matters I suggest 
participating on the twisted-web mailing list instead of just randomly 
removing code.

Please re-add it.

James




From itamar at itamarst.org  Sun Sep 19 20:02:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 19 Sep 2004 22:02:35 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <20040919163031.29723.1465129106.divmod.quotient.3557@ohm>
References: <20040919163031.29723.1465129106.divmod.quotient.3557@ohm>
Message-ID: <1095645755.4213.1.camel@sheriffpony>

On Sun, 2004-09-19 at 12:30, exarkun at divmod.com wrote:

>     Nevow imports Twisted.  Therefore, Twisted should not import Nevow.

Incorrect. If nevow imports twisted.internet and twisted.web2 imports 
nevow that is fine since it is a different project.

I think having twisted,web2 at least be semi-functional without nevow
(i.e. importable and tests running) would be good enough for your
concerns?




From exarkun at divmod.com  Sun Sep 19 20:35:48 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 20 Sep 2004 02:35:48 GMT
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <C4DA5F5A-0A9A-11D9-92A7-000A95A50FB2@fuhm.net>
Message-ID: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>

On Sun, 19 Sep 2004 20:19:42 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Sep 19, 2004, at 12:30 PM, <exarkun at divmod.com> wrote:
> > twisted/web2 has an unacceptable dependency on nevow that will need to 
> > be
> > discussed or removed before this subpackage can be added.
> 
> First off -- I consider this a rude thing to do, considering I am far 
> from being unreachable. What was the emergency that prompted this 
> removal at midnight on a saturday night? None? Yeah, that's what I 
> thought.

  I'm sorry you took it this way.  I assure you I had nothing in mind but the best interest of Twisted at the time.  I appreciate all the work you've done on the web rewrite.

  As to the "emergency" which prompted the removal: I was trying to commit a patch to twisted.mail; various problems led to this taking several hours.  Several of these problems had nothing to do with web2, but the failing web2 tests were a contributing factor.

  I did not come up with the idea to revert the web2 commit on the spot.  Commits which introduce broken tests have always been fair game for reversion.  Since the web2 tests were _new_, perhaps a different policy might apply.  I'd certainly be willing to entertain arguments to that effect to decide what should be done in the future.  I do not think reverting the commit was unreasonable here, though.

> [snip]
> >
> >     There is no release of Nevow.
> 
> There is. Although it's old. This is a very good reason for not 
> releasing twisted.web2. Fortunately, since we have decoupled releases 
> now, it doesn't affect anything else.

  Perhaps I should have added "that which make this code work."

  Decoupled releases are good, yes.  That solves one problem with checking broken tests (the tests may pass with nevow installed, I still haven't tried, that doesn't mean they aren't broken though).  There are others.

> 
> >     None of the buildslaves have even an SVN trunk checkout installed, 
> > nor have any of them been asked to install one.
> 
> True.

  So before we re-add twisted.web2, let's see what we can do about fixing this situation.

> 
> >     Developers weren't told about this new dependency, so they may not 
> > have it installed.
> 
> twisted-web ml was. I don't expect developers that don't care about 
> twisted web to install Nevow.

  If the tests were skipped when nevow was not installed, this would be reasonable.  Since they're not, developers who don't care about twisted web are forced to care about it.

> 
> > This leads to strangely failing tests, making it difficult to tell if 
> > outstanding changes that a developer wants to commit are broken.
> 
> I assume you mean "Could not import twisted.web2.test.test_web: 
> Traceback: exceptions.ImportError, No module named nevow.". If so,  
> "strangely failing tests" is quite a hyperbole.
> 
> >   The technical reasons:
> >
> >     Nevow imports Twisted.  Therefore, Twisted should not import Nevow.
> >
> >     Twisted is the networking framework and the web server framework.  
> > It is lower level than the application server and the templating 
> > system.  The latter should depend on the former, if a dependency 
> > exists, not the reverse.  _If_ it is desired for Twisted to gain 
> > functionality from a Nevow installed, Nevow must be careful to only 
> > import certain things from Twisted.
> >
> >  I would much prefer if Nevow gained functionality from Twisted and 
> > not the reverse, but if twisted.web/nevow developers desire things to 
> > work as they do currently in twisted.web2, at least the above issues 
> > need to be addressed.  This thread should serve to resolve one of them 
> > (hopefully Twisted developers are now aware of the potential 
> > dependency ;).
> 
> Most of Twisted web2 does not/will not depend on Nevow. Generation of 
> some server-generated pages does/will. Those tests should just be 
> skipped if Nevow isn't installed. That they aren't is an issue, sure.

  Okay, let's get that fixed as well, then I will gladly re-add web2 for you.  If you like, I will also merge the minor fixes that were made to trunk into the web2 branch, so that those are not lost.

> 
> If you want to have any input on these technical matters I suggest 
> participating on the twisted-web mailing list instead of just randomly 
> removing code.

  I am happy with my current level of avoidance of twisted web, discounting this most recent event.  I hope that in the future web2 can be handled in such a way that it is not disruptive to those of us who are not interested in it.

  Jp



From exarkun at divmod.com  Sun Sep 19 20:38:44 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 20 Sep 2004 02:38:44 GMT
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095645755.4213.1.camel@sheriffpony>
Message-ID: <20040920023844.29723.2041791403.divmod.quotient.3802@ohm>

On Sun, 19 Sep 2004 22:02:35 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Sun, 2004-09-19 at 12:30, exarkun at divmod.com wrote:
> 
> >     Nevow imports Twisted.  Therefore, Twisted should not import Nevow.
> 
> Incorrect. If nevow imports twisted.internet and twisted.web2 imports 
> nevow that is fine since it is a different project.
> 
> I think having twisted,web2 at least be semi-functional without nevow
> (i.e. importable and tests running) would be good enough for your
> concerns?
> 

  If twisted.web2 provided a reduced level of functionality in the absence of nevow, that'd be fine.  Good enough for me will be having the web2 tests skipped when its dependencies are not installed.

  Jp



From glyph at divmod.com  Sun Sep 19 22:40:15 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 20 Sep 2004 00:40:15 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
Message-ID: <1095655215.31595.25.camel@kazekage>

On Sun, 2004-09-19 at 22:35, exarkun at divmod.com wrote:

>   I did not come up with the idea to revert the web2 commit on the
> spot.  Commits which introduce broken tests have always been fair game
> for reversion.  Since the web2 tests were _new_, perhaps a different
> policy might apply.  I'd certainly be willing to entertain arguments
> to that effect to decide what should be done in the future.  I do not
> think reverting the commit was unreasonable here, though.

No, I don't think that a different policy should apply - revision
history exists for a reason.

This point is worth emphasizing.  We don't have a very rigorous process
in place for development, but this has always been the case - trunk
should be in a working state at all times.  If you check in code that
breaks the tests, it is at the discretion of any other developer to
decide that your code is toast: it doesn't matter if you are available
on IRC in real time.  You can fix your breakages locally, without
everyone else waiting for you.

> > [snip]
> > >
> > >     There is no release of Nevow.
> > 
> > There is. Although it's old. This is a very good reason for not 
> > releasing twisted.web2. Fortunately, since we have decoupled releases 
> > now, it doesn't affect anything else.

The first release of Twisted 2.0 will not be decoupled.  It is important
that we don't treat the releases as decoupled until we have actually
successfully made at least one decoupled release of each project.  I
don't think this policy will change when project release cycles are
separated though.

Even when trunk is in a completely working state, it is still difficult
to get a release done right now, so I see no reason to accept tests
which do not import, or tests which fail, in trunk.  If you want to add
a dependency on something new, this needs to be discussed before
checking in.

> > Most of Twisted web2 does not/will not depend on Nevow. Generation of 
> > some server-generated pages does/will. Those tests should just be 
> > skipped if Nevow isn't installed. That they aren't is an issue, sure.

Do those server-side pages have simple, non-nevow fallbacks?  If they
can't, then perhaps we should be considering a merged release.

> > If you want to have any input on these technical matters I suggest 
> > participating on the twisted-web mailing list instead of just randomly 
> > removing code.

Personally I believe this is worth discussing generally, because these
are not "web development" issues, although they do touch web code - I
don't subscribe to twisted-web because I'm not interested in the
particulars of HTTP rfc compliance or url argument parsing, but I most
certainly *am* interested in circular dependencies threading through
libraries which are distributed separately.  There is perhaps a larger
discussion here about the relationship between twisted-web and nevow, 
and Twisted and Divmod in general, that needs to happen on divmod-dev.

>   I am happy with my current level of avoidance of twisted web,
> discounting this most recent event.  I hope that in the future web2
> can be handled in such a way that it is not disruptive to those of us
> who are not interested in it.

Maybe I need to be a little more involved than I have been.  I find the
presence of both web and web2 in the same source tree a little upsetting
- this harkens back the web.widgets / web.domtemplate / web.woven API
disaster, which still haunts us.

Let's try to figure out which web server we are supporting and then
actually support it, rather than having 9 different half-assed,
half-supported implementations floating around.




From golux at comcast.net  Mon Sep 20 00:04:19 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Mon, 20 Sep 2004 02:04:19 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095655215.31595.25.camel@kazekage>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
Message-ID: <414E72E3.90009@comcast.net>

Glyph Lefkowitz wrote:
> Let's try to figure out which web server we are supporting and then
> actually support it, rather than having 9 different half-assed,
> half-supported implementations floating around.

<delurk>
+1
</delurk>



From fu at donfu.com  Mon Sep 20 03:51:58 2004
From: fu at donfu.com (donfu)
Date: Mon, 20 Sep 2004 11:51:58 +0200
Subject: [Twisted-Python] problems with trial and adbapi
In-Reply-To: <1095637851.13805.51.camel@oneiros>
References: <5562CB50-0A74-11D9-8055-000393DC7B7C@donfu.com>
	<1095637851.13805.51.camel@oneiros>
Message-ID: <414EA83E.7010400@donfu.com>

> deferredResult should work just fine, I use it all the
> time with db-related tests. 

I knew beforehand that the mistake was to be searched on my side :-)
I got still much to learn in twistedland.. I forgot to actually return the 
deferred from the database insert operation, so trial didn't wait for the 
insert to complete, and the next operation failed.

to sum it up:

   how to shoot yourself in the foot with twisted:
   you return a deferred to shoot yourself in the foot. when the deferred
   finally fires (!) your foot is already rotten and garbage collected...

;)
donfu.



From dp at ulaluma.com  Mon Sep 20 08:07:22 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Mon, 20 Sep 2004 10:07:22 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095655215.31595.25.camel@kazekage>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
Message-ID: <6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>


On Sep 20, 2004, at 12:40 AM, Glyph Lefkowitz wrote:

> Let's try to figure out which web server we are supporting and then
> actually support it, rather than having 9 different half-assed,
> half-supported implementations floating around.

Well, certainly nobody who wrote the original twisted.web code is 
supporting it, but that doesn't mean it's unusable. On the contrary, 
it's very usable, and there are probably lots and lots of applications 
which depend on all sorts of subtle and broken semantics it uses 
(people being far more interested in developing web related things than 
finger related things). I don't see any sane way to perform a complete 
rewrite with better semantics while still living in the old twisted.web 
namespace, especially given the miniscule amount of time most of the 
major developers of this project have to put against it. Developing 
backwards compatibility with the old APIs would be a death march, would 
never quite work anyway, and wouldn't really benefit anyone in 
particular.

We already figured out which web server we ("we" being those developers 
who actually care about the web) are going to be supporting. 
twisted.web2. web should have a deprecation warning in __init__ for a 
release, and then should be terminated with extreme prejudice.

As far as the nevow dependency, I have already suggested to James that 
twisted.web2 should work without it, but he didn't feel it was worth 
the effort. If it is worth the effort to someone else, I suggest they 
do it. My suggestion is simply not to have pages like directory 
listings and traceback renderings, but to have simple string templates 
which are returned in the case of nevow not being installed. This way 
you can use web2 with no dependencies to do a completely custom web 
server, but you're not going to get much out of the box.

dp




From foom at fuhm.net  Mon Sep 20 08:44:10 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 20 Sep 2004 10:44:10 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095655215.31595.25.camel@kazekage>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
Message-ID: <888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>

Since people who care about web apparently don't read the twisted-web 
mailing list, I'm forwarding the relevant [portions of] messages to 
this mailing list, where they'll hopefully get read before any more 
responses are written on this topic.

James

> From: James Y Knight <foom at fuhm.net>
> Date: September 14, 2004 10:19:14 PM EDT
> Subject: [Twisted-web] Twisted.web2
>
> Itamar and I had dinner today and talked about new-web a bit. Here is 
> what was discussed:
> 1) We need to keep compatibility with old Nevow resources
> 2) We ought to keep compatibility with old twisted.web resources
> 3) The new request API isn't the same as old request API.
> 4) new-web depends on Twisted 2.0. Nevow will be depending on new-web, 
> so the next Nevow will depend on twisted 2.0. Thus it cannot be 
> released until Twisted 2.0. According to itamar the goal for next 
> Twisted release is around halloween, although I hadn't seen that 
> mentioned anywhere before. ;)
> 5) Rumors are Anthony is writing a non-sucky HTTP client. (is this 
> true?). J. Simms (slyphon) mentioned something about writing one to me 
> a few weeks ago but I didn't hear anything after. This should be 
> coordinated so the API for the client and server is as similar as 
> possible.
>
>
> Conclusions for action:
> 1) new-web will be called twisted.web2. I will put what I've got into 
> svn trunk as twisted.web2 tomorrow, assuming no objections. This will 
> allow easy backwards compatibility at the cost of a 2.
> 2) Nevow's resource traversal API must be moved to twisted.web2. This 
> will probably have to be done by branching Nevow to remove those bits. 
> Therefore, the resource traversal part of nevow should be 
> mostly-frozen while this happens.
> 3) For distribution: twisted.web2 depends on Nevow (for static 
> directory listings, and error pages), so will be distributed with it. 
> Nevow recommends Twisted but does not require it for simple cases 
> (e.g. flattening to a string from a CGI script), so there can also be 
> a limited-functionality distribution of standalone Nevow.
>
> Current status of new-web: the low-level HTTP protocol and header 
> parsing is in passable shape. The high-level Resource API needs to be 
> copied over from Nevow (again), because Nevow's API changed. Backwards 
> compatibility adapters for the t.w.Request/nevow.inevow.IRequest and 
> (possibly) nevow.inevow.IResource should be added.
>
> I am not able to do everything myself. I will need help, especially 
> from dp would be helpful for the Nevow transition, to make this 
> happen. If we do it right, twisted.web2 might even be ready in time 
> for the release of Twisted 2.0.
>
> James



> From: William Dode <wilk-ml at flibuste.net>
> Date: September 15, 2004 12:26:08 PM EDT
> Subject: Re: [Twisted-web] Twisted.web2
>
> James Y Knight <foom at fuhm.net> writes:
>> 3) For distribution: twisted.web2 depends on Nevow (for static
>> directory listings, and error pages), so will be distributed with
>> it. Nevow recommends Twisted but does not require it for simple cases
>> (e.g. flattening to a string from a CGI script), so there can also be
>> a limited-functionality distribution of standalone Nevow.
>
> It could be great if the server could not depend on any framework (i
> mean nevow).



> From: James Y Knight <foom at fuhm.net>
> Date: September 15, 2004 1:49:26 PM EDT
> Subject: Re: [Twisted-web] Twisted.web2
>
> On Sep 15, 2004, at 12:26 PM, William Dode wrote:
>> It could be great if the server could not depend on any framework (i
>> mean nevow).
>
> It will use nevow to render the pages the webserver generates, such as 
> errors and directory listings. This does not mean you need to use 
> nevow for your own pages. You can use whatever templating language you 
> want (or none at all) to render your pages, assuming you can hook it 
> up to twisted web somehow.
>
> If you want to make a custom hacked-up copy of twisted.web without 
> Nevow included, it will work, other than default server-generated 
> pages. However, I don't see any reason to not include it by default.



> From: Donovan Preston <dp at ulaluma.com>
> Date: September 15, 2004 2:08:35 PM EDT
> Subject: Re: [Twisted-web] Twisted.web2
>
> On Sep 15, 2004, at 12:26 PM, William Dode wrote:
>> It could be great if the server could not depend on any framework (i
>> mean nevow).
>
> The server would depend on Nevow in order to generate the HTML for 
> various automatically generated pages, such as directory listings. I 
> suggested to James that having a standalone twisted.web server that 
> didn't depend on Nevow and wasn't capable of generating any pages 
> itself would be possible, but James didn't think it was worth the 
> effort.



> From: James Y Knight <foom at fuhm.net>
> Date: September 15, 2004 7:00:08 PM EDT
> Subject: [Twisted-web] Partial freeze of nevow coming up.
>
> Here's the plan. The following modules will be removed from Nevow, and 
> merged/copied/whatever into twisted.web2:
> appserver.py
> static.py
> half of context.py
> dirlist.py
> failure.py
> guard.py
> static.py
> vhost.py
> url.py, perhaps.
>
> I want to create a nevow web2 integration branch, and while they are 
> being removed from Nevow, and merged back into web2, I don't want the 
> Nevow copy radically changing cause that just creates extra work.
>
> So if there's any changes you want to make to any of those, please do 
> it soon. The rest of Nevow can continue changing during the transition 
> without problem.
>
> Sidenote: Divmod needs to approve the relicensing of the code that 
> moves into web2 from nevow under MIT license. Or else move all of 
> Nevow under MIT license.



> From: Donovan Preston <dp at ulaluma.com>
> Date: September 15, 2004 7:22:23 PM EDT
> Subject: Re: [Twisted-web] Partial freeze of nevow coming up.
>
>> Sidenote: Divmod needs to approve the relicensing of the code that 
>> moves into web2 from nevow under MIT license. Or else move all of 
>> Nevow under MIT license.
>
> Moving Nevow to MIT license has already been approved. There is an 
> issue in our RT tracker (which unfortunately nobody else can see) for 
> switching to MIT license, but nobody has gotten time to do it. Anyone 
> with commit access who has some spare time, feel free...




From glyph at divmod.com  Mon Sep 20 08:49:40 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 20 Sep 2004 10:49:40 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
Message-ID: <1095691780.31595.82.camel@kazekage>

On Mon, 2004-09-20 at 10:07, Donovan Preston wrote:
> On Sep 20, 2004, at 12:40 AM, Glyph Lefkowitz wrote:
> 
> > Let's try to figure out which web server we are supporting and then
> > actually support it, rather than having 9 different half-assed,
> > half-supported implementations floating around.
> 
> Well, certainly nobody who wrote the original twisted.web code is 
> supporting it, but that doesn't mean it's unusable. On the contrary, 
> it's very usable, and there are probably lots and lots of applications 
> which depend on all sorts of subtle and broken semantics it uses 
> (people being far more interested in developing web related things than 
> finger related things).

The twisted 1.3 release will available for download for the forseeable
future, for those who need it.  I don't believe we should release stuff
with subtle, broken semantics in twisted 2.0 - the release number
implies that we are changing a few things, so this would be a good
opportunity to abandon support for the old code.

> I don't see any sane way to perform a complete 
> rewrite with better semantics while still living in the old twisted.web 
> namespace, especially given the miniscule amount of time most of the 
> major developers of this project have to put against it. Developing 
> backwards compatibility with the old APIs would be a death march, would 
> never quite work anyway, and wouldn't really benefit anyone in 
> particular.

If there is to be no backwards compatibility, why bother with the
separate namespace?  Do we want to do this with other modules in the
future, e.g. twisted.spread2?  Our last discussion of this was
inconclusive because I don't think we foresaw the web rewrite being so
radically different.  I guess we have to drag that dead horse out here
to beat it one more time ;).

Even if the namespace changes, there should only be one of these in svn
at a time.  If further development on twisted web 1 is going to continue
it should be in a maintenance branch, and then we need to discuss how
we're going to manage maintenance releases.

> We already figured out which web server we ("we" being those developers 
> who actually care about the web) are going to be supporting. 
> twisted.web2. web should have a deprecation warning in __init__ for a 
> release, and then should be terminated with extreme prejudice.

I would terminate before providing a deprecation warning.  If you want
to provide a backwards-compatibility release for using web1 with the new
reactor core, that's fine, but I don't see any reason to include web1
with the new download.

> As far as the nevow dependency, [...] you're not going to get much out of the box.

It really sounds like nevow and web2 ought to be merged.  Traffic on the
twisted-web list suggests that anyone who is using one is using the
other, at least in some capacity.  The marketing aspect of this
certainly requires some discussion, but it seems that one's utility is
greatly reduced without the other, and the dependency is circular.  For
specialized cases, such as using nevow for CGI scripts, there is no
problem with having the other code around as long as it can avoid being
imported.




From foom at fuhm.net  Mon Sep 20 09:00:35 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 20 Sep 2004 11:00:35 -0400
Subject: [Twisted-Python] On the lighter side...
Message-ID: <D35F80F1-0B15-11D9-BF25-000A95A50FB2@fuhm.net>

Some publicity:

 From LWN.net <http://lwn.net/Articles/102742/>:
>  ZDNet Australia covers an MPAA screwup 
> <http://news.zdnet.co.uk/business/0,39020645,39167160,00.htm>. "Linux 
> Australia president Pia Smith told Builder AU the MPAA had issued 
> Linux Australia with a notice of claimed infringement demanding the 
> group cease providing access to two copyrighted movies -- one called 
> 'Grind' and the other 'Twisted' -- and ordering it to 'take 
> appropriate action against the account holder'. However, the files in 
> question had nothing to do with those movies. The file entitled 
> Twisted is a download of the popular framework written in Python and 
> Grind refers to a download of Valgrind, a tool for developers to 
> locate memory management." Linux Australia looks set to have some fun 
> with this one.

The ZDNet article even links to the twistedmatrix website. Woo. :)

James




From itamar at itamarst.org  Mon Sep 20 09:08:46 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 20 Sep 2004 11:08:46 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095691780.31595.82.camel@kazekage>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
Message-ID: <1095692925.4581.3.camel@sheriffpony>

On Mon, 2004-09-20 at 10:49, Glyph Lefkowitz wrote:

> > We already figured out which web server we ("we" being those developers 
> > who actually care about the web) are going to be supporting. 
> > twisted.web2. web should have a deprecation warning in __init__ for a 
> > release, and then should be terminated with extreme prejudice.
> 
> I would terminate before providing a deprecation warning.  If you want
> to provide a backwards-compatibility release for using web1 with the new
> reactor core, that's fine, but I don't see any reason to include web1
> with the new download.

twisted.web will not be included. There will be two downloads ("Twisted
Web 1 - Deprecated", "Twisted Web 2"). Most people will not download the
first ever. The first will likely not have new releases unless we fine
security issues. Moving it to branch and only doing releases from there
may be fine (if our release infrastructure is up to it!) but I still
think newweb should be twisted.web2.


Summary:

1. twisted.web2 remains web2.
2. Move twisted.web (and any other security bugfix only packages, I
guess) to a "deprecated" branch.

Yes? No?

If yes, that just leaves the nevow/twisted.web2 merger question, which
should probably be done on twisted-web mailing list.





From radeex at gmail.com  Mon Sep 20 09:35:24 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 20 Sep 2004 11:35:24 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095692925.4581.3.camel@sheriffpony>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
Message-ID: <60ed19d404092008353b3add5b@mail.gmail.com>

On Mon, 20 Sep 2004 11:08:46 -0400, Itamar Shtull-Trauring
<itamar at itamarst.org> wrote:
> On Mon, 2004-09-20 at 10:49, Glyph Lefkowitz wrote:
> 1. twisted.web2 remains web2.
> 2. Move twisted.web (and any other security bugfix only packages, I
> guess) to a "deprecated" branch.
> 
> Yes? No?

Don't bother moving twisted.web to a branch; the repository layout of
trunk is (will be) decoupled from how releases are done, and since
both will potentially be changed (e.g. for security) then I don't
think it should be in a separate branch.

And +1 on keeping the name twisted.web2.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From corydodt at twistedmatrix.com  Mon Sep 20 09:46:57 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon, 20 Sep 2004 08:46:57 -0700
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095692925.4581.3.camel@sheriffpony>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>	<1095655215.31595.25.camel@kazekage>	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
Message-ID: <414EFB71.6070701@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Urgh.  I usually avoid getting involved in these discussions--not because I
don't want to participate but because the ML style does not work very well
with my brain.  There's all these different parts of this proposal and some
are being rejected by some people and modified by other people and it's very
hard for me to figure out what the whole picture is.

In this case, I have to say something because this is pretty important to the
product I'm developing.  I just spent 6 weeks doing a conversion to Nevow
because Woven isn't being supported any more.  I do *not* want to do the same
thing with Web.  I've made modifications to Twisted trunk that I was hoping to
get out of 2.0 for our official release, but if there's not going to be a web1
any more, that puts this project in jeopardy again because it means I may not
be able to use 2.0.

So here's what I have to say: please *summarize*.  I need to get a sense of:

1) Timeline.. when are changes being implemented, in what order, tied to what
release etc.
2) How is the svn repo going to change?
3) What is going to be put into what release by whom?
4) What's the impact if you're currently using web1 and you want to be using
web2 because 1 isn't supported any more?
5) What's the impact if you stay with web1?

If you haven't decided yet, go ahead and decide, but then summarize
afterwards. :-)

Thanks..

C



Itamar Shtull-Trauring wrote:
| On Mon, 2004-09-20 at 10:49, Glyph Lefkowitz wrote:
|
|
|>>We already figured out which web server we ("we" being those developers
|>>who actually care about the web) are going to be supporting.
|>>twisted.web2. web should have a deprecation warning in __init__ for a
|>>release, and then should be terminated with extreme prejudice.
|>
|>I would terminate before providing a deprecation warning.  If you want
|>to provide a backwards-compatibility release for using web1 with the new
|>reactor core, that's fine, but I don't see any reason to include web1
|>with the new download.
|
|
| twisted.web will not be included. There will be two downloads ("Twisted
| Web 1 - Deprecated", "Twisted Web 2"). Most people will not download the
| first ever. The first will likely not have new releases unless we fine
| security issues. Moving it to branch and only doing releases from there
| may be fine (if our release infrastructure is up to it!) but I still
| think newweb should be twisted.web2.
|
|
| Summary:
|
| 1. twisted.web2 remains web2.
| 2. Move twisted.web (and any other security bugfix only packages, I
| guess) to a "deprecated" branch.
|
| Yes? No?
|
| If yes, that just leaves the nevow/twisted.web2 merger question, which
| should probably be done on twisted-web mailing list.
|
|
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBTvtx3A5SrXAiHQcRApINAKCggxacS+kFLmAszBQmrQeuByJHBgCgnyov
jBEWFaH7dZ6TZBbtljvVZTg=
=tLpe
-----END PGP SIGNATURE-----



From glyph at divmod.com  Mon Sep 20 09:59:27 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 20 Sep 2004 11:59:27 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095692925.4581.3.camel@sheriffpony>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
Message-ID: <1095695967.31595.109.camel@kazekage>

On Mon, 2004-09-20 at 11:08, Itamar Shtull-Trauring wrote:

> twisted.web will not be included. There will be two downloads ("Twisted
> Web 1 - Deprecated", "Twisted Web 2"). Most people will not download the
> first ever. The first will likely not have new releases unless we fine
> security issues. Moving it to branch and only doing releases from there
> may be fine (if our release infrastructure is up to it!) but I still
> think newweb should be twisted.web2.

OK.  I am going to re-propose my way of versioning interfaces since this
is a subset of it, but in the interests of not holding this up, this is
fine :).

> Summary:
> 
> 1. twisted.web2 remains web2.
+1

> 2. Move twisted.web (and any other security bugfix only packages, I
> guess) to a "deprecated" branch.

Thinking about this a little more: +0

My main concern was that there was going to be a single download.  Upon
further reflection, we are probably going to need some good policy for
how to do this - branching from all of trunk is bad since you don't want
to capture other buggy code along with it...

I'd like to see some way that we can clearly mark deprecated modules in
trunk though, for new developers.

> Yes? No?

Sounds fine to me, as long as no other package maintainers have a
problem with tacking on a version number to the end of their package
names when they make large API changes.  I forsee we are going to have a
lot of those :).

> If yes, that just leaves the nevow/twisted.web2 merger question, which
> should probably be done on twisted-web mailing list.

I can get divmod to provide a conference line if this would benefit from
a real-time discussion, which I think it might.




From glyph at divmod.com  Mon Sep 20 09:59:54 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 20 Sep 2004 11:59:54 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <60ed19d404092008353b3add5b@mail.gmail.com>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
	<60ed19d404092008353b3add5b@mail.gmail.com>
Message-ID: <1095695994.31595.111.camel@kazekage>

On Mon, 2004-09-20 at 11:35, Christopher Armstrong wrote:

> Don't bother moving twisted.web to a branch; the repository layout of
> trunk is (will be) decoupled from how releases are done, and since
> both will potentially be changed (e.g. for security) then I don't
> think it should be in a separate branch.
> 
> And +1 on keeping the name twisted.web2.

The release manager has spoken.  I guess it's out of my hands now ;)




From mary-twisted at puzzling.org  Mon Sep 20 10:35:21 2004
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 20 Sep 2004 17:35:21 +0100
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <20040920163521.GB4826@fuchsia.puzzling.org>

On Mon, Sep 20, 2004, James Y Knight wrote:
> Since people who care about web apparently don't read the twisted-web 
> mailing list, I'm forwarding the relevant [portions of] messages to 
> this mailing list, where they'll hopefully get read before any more 
> responses are written on this topic.

Conversely, I expect there are a number of people who haven't seen this
thread due to being interested in all that web stuff, but not otherwise
interested in Twisted enough to subscribe to this.

-Mary



From anthony at interlink.com.au  Mon Sep 20 10:37:10 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Tue, 21 Sep 2004 02:37:10 +1000
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>	<1095655215.31595.25.camel@kazekage>
	<888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <414F0736.5000607@interlink.com.au>

James Y Knight wrote:
>> 5) Rumors are Anthony is writing a non-sucky HTTP client. (is this 
>> true?). J. Simms (slyphon) mentioned something about writing one to me 
>> a few weeks ago but I didn't hear anything after. This should be 
>> coordinated so the API for the client and server is as similar as 
>> possible.

I have something that Works For Me. It makes sense to me (from an API
point of view), and, more importantly for my current use-cases, works
with urllib's Request objects, which means you can drop ClientForm on
top of it directly, and it Just Works. This is good. It also works on
top of a UDP transport, which the current http client does not. While
HTTP-over-UDP is an Abomination In The Eyes of Great Cthulu, it's also
used in some sick and warped protocols, which I need to support.

Anthony



From anthony at interlink.com.au  Mon Sep 20 10:46:58 2004
From: anthony at interlink.com.au (Anthony Baxter)
Date: Tue, 21 Sep 2004 02:46:58 +1000
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <414F0736.5000607@interlink.com.au>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>	<1095655215.31595.25.camel@kazekage>	<888899EC-0B13-11D9-BF25-000A95A50FB2@fuhm.net>
	<414F0736.5000607@interlink.com.au>
Message-ID: <414F0982.1070508@interlink.com.au>

A snapshot of the stuff I have working is at:

http://www.interlink.com.au/anthony/tmp/nonsuckhttp.py

I'm not sure if this is the absolute latest version - will check
tomorrow morning after sleeps.

Anthony



From foom at fuhm.net  Mon Sep 20 11:16:39 2004
From: foom at fuhm.net (James Y Knight)
Date: Mon, 20 Sep 2004 13:16:39 -0400
Subject: [Twisted-web] Re: [Twisted-Python] Fwd: [Twisted-commits] r11721
	- revert r11685
In-Reply-To: <414EFB71.6070701@twistedmatrix.com>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>	<1095655215.31595.25.camel@kazekage>	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
	<414EFB71.6070701@twistedmatrix.com>
Message-ID: <D5EE735E-0B28-11D9-BF25-000A95A50FB2@fuhm.net>

I guess I'll keep the crossposting, since this may be of interest to 
those who do not read the twisted-web list.

On Sep 20, 2004, at 11:46 AM, Cory Dodt wrote:
> Urgh.  I usually avoid getting involved in these discussions--not 
> because I
> don't want to participate but because the ML style does not work very 
> well
> with my brain.  There's all these different parts of this proposal and 
> some
> are being rejected by some people and modified by other people and 
> it's very
> hard for me to figure out what the whole picture is.
>
> In this case, I have to say something because this is pretty important 
> to the
> product I'm developing.  I just spent 6 weeks doing a conversion to 
> Nevow
> because Woven isn't being supported any more.  I do *not* want to do 
> the same
> thing with Web.  I've made modifications to Twisted trunk that I was 
> hoping to
> get out of 2.0 for our official release, but if there's not going to 
> be a web1
> any more, that puts this project in jeopardy again because it means I 
> may not
> be able to use 2.0.

I do not want that to happen. Note foremost what web2 is. 1) A rewrite 
of the Request/low level HTTP layer. 2) *Migrating* the Nevow resource 
model back into the core webserver where it belongs.

Where there are conflicting statements by others, I'd go with what I 
say since so far I seem to be in charge of web2. ;)

In quick summary: since you've already migrated to Nevow, I expect to 
be able to provide easy compatibility with your app so you can use new 
releases of Nevow that depend on web2 with little work. If you 
currently have web1 resources working with Nevow, they will also work 
with Nevow/web2.

> So here's what I have to say: please *summarize*.  I need to get a 
> sense of:
>
> 1) Timeline.. when are changes being implemented, in what order, tied 
> to what
> release etc.

Web2 will be done when it is done, hopefully by the time Twisted 2.0 
releases, but if not, then not. In parallel with development of web2, a 
branch of the Nevow repository will be developed that uses t.web2. That 
should be released at the same time. Web1 will stay around for the 
indefinite future. SVN trunk of Nevow will remain dependent only upon 
web1 until such a time as web2&nevow-which-uses-it work sufficiently 
well at which point that branch will merge with the trunk.

> 2) How is the svn repo going to change?

Right now? t.web2 gets added to Twisted. Nevow gets a branch.

> 3) What is going to be put into what release by whom?

I don't know what you're asking.

> 4) What's the impact if you're currently using web1 and you want to be 
> using
> web2 because 1 isn't supported any more?

The migration from web1 to web2 will be about the same difficulty as 
the migration from web1 to Nevow.

However, you are currently not using (most of) web1, so that is the 
wrong question to ask. You are using Nevow's appserver, which is 
basically the same as what web2's appserver will be.

Web2 will be mostly compatible with current Nevow. I say mostly only 
because it may not be feasible to provide absolutely complete 
compatibility, but I'd like to provide compatibility for all the things 
that normal apps use (Nevow Resource API and app-facing parts of the 
Request object).

Web2 will be somewhat compatible with web1 Resources. "Somewhat" here 
means basically the same thing it already means with Nevow (since the 
code will be essentially the same code).

If you're using the Nevow "appserver" now, ideally you will not have to 
change your app for it to work with web2, although you may want to 
change some things to avoid deprecation warnings. Not everything always 
turns out ideally, so I can't promise that, but it is the goal.

> 5) What's the impact if you stay with web1?

You cannot use new releases of Nevow after <whenever web2 is done and 
the Nevow branch is merged>. Web1 will continue to have the same amount 
of maintenance as it does now (namely: almost none)

James



From itamar at itamarst.org  Mon Sep 20 12:43:49 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 20 Sep 2004 14:43:49 -0400
Subject: [Twisted-Python] Fwd: [Twisted-commits] r11721 - revert r11685
In-Reply-To: <1095695994.31595.111.camel@kazekage>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
	<60ed19d404092008353b3add5b@mail.gmail.com>
	<1095695994.31595.111.camel@kazekage>
Message-ID: <1095705828.4577.12.camel@sheriffpony>

OK, final summary:

1. twisted.web2 stays as named and in trunk.
2. twisted.web stays as named and in trunk.
3. Both get releases post-2.0 split up (but after that twisted.web only
gets security fix releases).

Nevow is separate issue, to be discussed on twisted-web, but note that
stuff in twisted trunk really ought to have passing tests.





From glyph at divmod.com  Mon Sep 20 13:30:34 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 20 Sep 2004 15:30:34 -0400
Subject: [Twisted-web] Re: [Twisted-Python] Fwd: [Twisted-commits]
	r11721 - revert r11685
In-Reply-To: <D5EE735E-0B28-11D9-BF25-000A95A50FB2@fuhm.net>
References: <20040920023548.29723.666105682.divmod.quotient.3800@ohm>
	<1095655215.31595.25.camel@kazekage>
	<6431B7DA-0B0E-11D9-A035-000A95864FC4@ulaluma.com>
	<1095691780.31595.82.camel@kazekage>
	<1095692925.4581.3.camel@sheriffpony>
	<414EFB71.6070701@twistedmatrix.com>
	<D5EE735E-0B28-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <1095708634.31595.116.camel@kazekage>

On Mon, 2004-09-20 at 13:16, James Y Knight wrote:
> I guess I'll keep the crossposting, since this may be of interest to 
> those who do not read the twisted-web list.

Thanks james, that was a great summary of just about every web issue
that I am concerned with.  And thanks for the questions, MFen...

Unless anybody else objects I think this thread should be the last of
the crossposting :)




From mailinglist at ltsai.com  Mon Sep 20 21:14:38 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 21 Sep 2004 11:14:38 +0800
Subject: [Twisted-Python] log rotation
Message-ID: <cio6au$4pb$1@sea.gmane.org>

Hi

Has anyone used logrotate or simple use a cron job to send a SIGUSR1 to 
the process?

If I understand the twistd man page properly, the log file will be 
rotated on SIGUSR1, therefore I'm wont be able to use logrotate to do 
the rotation?

Thanks
-Liming




From exarkun at divmod.com  Tue Sep 21 07:21:09 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 21 Sep 2004 13:21:09 GMT
Subject: [Twisted-Python] log rotation
In-Reply-To: <cio6au$4pb$1@sea.gmane.org>
Message-ID: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>

On Tue, 21 Sep 2004 11:14:38 +0800, Tsai Li Ming <mailinglist at ltsai.com> wrote:
>Hi
> 
> Has anyone used logrotate or simple use a cron job to send a SIGUSR1 to 
> the process?
> 
> If I understand the twistd man page properly, the log file will be 
> rotated on SIGUSR1, therefore I'm wont be able to use logrotate to do 
> the rotation?

  logrotate should rotate twistd logfiles just fine.  It shuts down a process, moves its log files around, then restarts it.

  Why you'd _want_ to rotate them this way, instead of just letting them automatically be rotated by twistd (which they will be), I dunno.  Is there some feature logrotate has that twistd lacks that you're interested in?

  Jp



From claw at kanga.nu  Tue Sep 21 07:40:56 2004
From: claw at kanga.nu (J C Lawrence)
Date: Tue, 21 Sep 2004 09:40:56 -0400
Subject: [Twisted-Python] log rotation 
In-Reply-To: Message from <exarkun@divmod.com> of "Tue,
	21 Sep 2004 13:21:09 GMT."
	<20040921132109.29723.1440903240.divmod.quotient.4625@ohm> 
References: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm> 
Message-ID: <30926.1095774056@kanga.nu>

On Tue, 21 Sep 2004 13:21:09 GMT 
exarkun  <exarkun at divmod.com> wrote:

> Why you'd _want_ to rotate them this way, instead of just letting them
> automatically be rotated by twistd (which they will be), I dunno.  Is
> there some feature logrotate has that twistd lacks that you're
> interested in?

In my case its the simple fact that logrotate is responsible for all log
rotation for every system on the network.  Making twisted-based apps a
special case which I then have to tell everybody about, remind them
repeatedly etc, is not particularly welcome.

-- 
J C Lawrence
---------(*)                Satan, oscillate my metallic sonatas.
claw at kanga.nu               He lived as a devil, eh?
http://www.kanga.nu/~claw/  Evil is a name of a foeman, as I live.



From mailinglist at ltsai.com  Tue Sep 21 08:29:08 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 21 Sep 2004 22:29:08 +0800
Subject: [Twisted-Python] Re: log rotation
In-Reply-To: <30926.1095774056@kanga.nu>
References: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
	<30926.1095774056@kanga.nu>
Message-ID: <cipdt7$2q4$1@sea.gmane.org>

J C Lawrence wrote:
> On Tue, 21 Sep 2004 13:21:09 GMT 
> exarkun  <exarkun at divmod.com> wrote:
> 
> 
>>Why you'd _want_ to rotate them this way, instead of just letting them
>>automatically be rotated by twistd (which they will be), I dunno.  Is
>>there some feature logrotate has that twistd lacks that you're
>>interested in?
> 
> 
> In my case its the simple fact that logrotate is responsible for all log
> rotation for every system on the network.  Making twisted-based apps a
> special case which I then have to tell everybody about, remind them
> repeatedly etc, is not particularly welcome.
> 

 >
Same for me too. However, how do I do that in logrotate? I notice that 
if I send a SIGUSR1 to the twisted process, it will rotate the log file 
itself.


/var/log/server.log {
     postrotate
         /bin/kill -SIGUSR1 `cat /var/run/server.pid 2>/dev/null` 2> 
/dev/null || true
     endscript
}

-Liming





From mailinglist at ltsai.com  Tue Sep 21 08:42:47 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Tue, 21 Sep 2004 22:42:47 +0800
Subject: [Twisted-Python] Re: log rotation
In-Reply-To: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
References: <cio6au$4pb$1@sea.gmane.org>
	<20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
Message-ID: <cipems$5po$1@sea.gmane.org>

exarkun at divmod.com wrote:
> On Tue, 21 Sep 2004 11:14:38 +0800, Tsai Li Ming <mailinglist at ltsai.com> wrote:
> 
>>Hi
>>
>>Has anyone used logrotate or simple use a cron job to send a SIGUSR1 to 
>>the process?
>>
>>If I understand the twistd man page properly, the log file will be 
>>rotated on SIGUSR1, therefore I'm wont be able to use logrotate to do 
>>the rotation?
> 
> 
>   logrotate should rotate twistd logfiles just fine.  It shuts down a process, moves its log files around, then restarts it.
> 
>   Why you'd _want_ to rotate them this way, instead of just letting them automatically be rotated by twistd (which they will be), I dunno.  Is there some feature logrotate has that twistd lacks that you're interested in?
> 
>   Jp


When you say twisted will automatically rotate the log files, how does 
it do that? Will it automatically rotate the log files periodically?

-Liming




From projects at reedflute.com  Tue Sep 21 10:00:27 2004
From: projects at reedflute.com (Eugene Coetzee)
Date: Tue, 21 Sep 2004 18:00:27 +0200
Subject: [Twisted-Python] TCP wrapper support for twisted servers -
	solution !
In-Reply-To: <414D47B1.8090300@reedflute.com>
References: <414D47B1.8090300@reedflute.com>
Message-ID: <4150501B.3090502@reedflute.com>

Eugene Coetzee wrote:

> Hi everyone,
>
> I was wondering if anybody knows about a Python wrapper  for  libwrap. 
> I'm aware of libwrap function libraries  for PHP and libwrap-ruby for 
> Ruby - but could not google anything similar for Python.
>
> I want to control access to my twisted servers using hosts.allow/deny. 
> I have read someting about "inetd setup" options planned for tap2deb 
> (couldn't get any docs regarding inetd/tcp -wrapper support though).
>
> Alternatively, is there anything included in twisted that can be used 
> get tcp wrapper support without having to run from inetd.

OK - I had the ich and I just *had to* scratch it. I have built a Python 
wrapper (I'll call it PyTCPWrapper) to libwrap which is working very 
much like Perl's 
http://cpan.uwinnipeg.ca/htdocs/Authen-Libwrap/README.html. I will 
release it on sourceforge under the GPL pretty soon.

Now - I want to use PyTCPWrapper inside twisted.protocol.http.Request to 
control access to my http server possibly passing the result of 
http.Request.getHost() to PyTCPWrapper.hosts_ctl().

*but* from http.py :

def getHost(self):
        """Get my originally requesting transport's host.

        Don't rely on the 'transport' attribute, since Request objects 
may be
        copied remotely.  For information on this method's return value, see
        twisted.internet.tcp.Port.
        """
        return self.host

If I "should not rely on transport" (I imagine this refers to IP 
spoofing) - what is the most reliable way of getting  the client's IP 
address from inside an instance of http.Request ? I would also like to 
drop the illegal connection as quickly as possible - much sooner than 
http.Request.process() happens.

Any advise thoughts ideas would be appreciated.

regards,

Eugene

Web                 -> www.reedflute.com
=============================================== 





From projects at reedflute.com  Tue Sep 21 10:04:41 2004
From: projects at reedflute.com (Eugene Coetzee)
Date: Tue, 21 Sep 2004 18:04:41 +0200
Subject: [Twisted-Python] TCP wrapper support for twisted servers -
	solution (correction LGPL)
In-Reply-To: <4150501B.3090502@reedflute.com>
References: <414D47B1.8090300@reedflute.com> <4150501B.3090502@reedflute.com>
Message-ID: <41505119.2030104@reedflute.com>

Eugene Coetzee wrote:

>
> OK - I had the ich and I just *had to* scratch it. I have built a 
> Python wrapper (I'll call it PyTCPWrapper) to libwrap which is working 
> very much like Perl's 
> http://cpan.uwinnipeg.ca/htdocs/Authen-Libwrap/README.html. I will 
> release it on sourceforge under the GPL pretty soon.
>
Correction - I will release it under LGPL.


Web                 -> www.reedflute.com
=============================================== 





From itamar at itamarst.org  Tue Sep 21 10:44:08 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 21 Sep 2004 12:44:08 -0400
Subject: [Twisted-Python] TCP wrapper support for twisted servers -
	solution !
In-Reply-To: <4150501B.3090502@reedflute.com>
References: <414D47B1.8090300@reedflute.com> <4150501B.3090502@reedflute.com>
Message-ID: <1095785048.4582.19.camel@sheriffpony>

On Tue, 2004-09-21 at 12:00, Eugene Coetzee wrote:

> If I "should not rely on transport" (I imagine this refers to IP 
> spoofing) - what is the most reliable way of getting  the client's IP 
> address from inside an instance of http.Request ? I would also like to 
> drop the illegal connection as quickly as possible - much sooner than 
> http.Request.process() happens.

That's how you do it. The comment is basically telling you that stuff
like TCP Wrappers is just a stopgap and not a real security measure :)






From exarkun at divmod.com  Tue Sep 21 11:11:02 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 21 Sep 2004 17:11:02 GMT
Subject: [Twisted-Python] TCP wrapper support for twisted servers -
	solution !
In-Reply-To: <4150501B.3090502@reedflute.com>
Message-ID: <20040921171102.29723.1008032729.divmod.quotient.4717@ohm>

On Tue, 21 Sep 2004 18:00:27 +0200, Eugene Coetzee <projects at reedflute.com> wrote:
> [snip]
> If I "should not rely on transport" (I imagine this refers to IP 
> spoofing) - what is the most reliable way of getting  the client's IP 
> address from inside an instance of http.Request ? I would also like to 
> drop the illegal connection as quickly as possible - much sooner than 
> http.Request.process() happens.

  Indeed you do want to do it much sooner - I don't think you want to be modifying HTTP code to use TCP wrappers.

  I think you want to modify the protocol factory (Site, in the case of HTTP) to use TCP wrappers.  buildProtocol takes an address argument.  If the factory returns None, the connection is dropped before any bytes are read from it.

  You should be able to implement this as a factory wrapper, too, so that it is useable with any existing factory.  See twisted.protocols.policies for examples of how to do this.

  Jp



From slyphon at twistedmatrix.com  Tue Sep 21 12:06:23 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Tue, 21 Sep 2004 14:06:23 -0400
Subject: [Twisted-Python] Re: log rotation
In-Reply-To: <cipems$5po$1@sea.gmane.org>
References: <cio6au$4pb$1@sea.gmane.org>	<20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
	<cipems$5po$1@sea.gmane.org>
Message-ID: <41506D9F.8080404@twistedmatrix.com>

Tsai Li Ming wrote:

> exarkun at divmod.com wrote:
>
>> On Tue, 21 Sep 2004 11:14:38 +0800, Tsai Li Ming 
>> <mailinglist at ltsai.com> wrote:
>>
>>> Hi
>>>
>>> Has anyone used logrotate or simple use a cron job to send a SIGUSR1 
>>> to the process?
>>>
>>> If I understand the twistd man page properly, the log file will be 
>>> rotated on SIGUSR1, therefore I'm wont be able to use logrotate to 
>>> do the rotation?
>>
>>
>>
>>   logrotate should rotate twistd logfiles just fine.  It shuts down a 
>> process, moves its log files around, then restarts it.
>>
>>   Why you'd _want_ to rotate them this way, instead of just letting 
>> them automatically be rotated by twistd (which they will be), I 
>> dunno.  Is there some feature logrotate has that twistd lacks that 
>> you're interested in?
>>
>>   Jp
>
>
>
> When you say twisted will automatically rotate the log files, how does 
> it do that? Will it automatically rotate the log files periodically?
>
> -Liming
>
>
yes, in twisted.python.logfile.LogFile there is an option to __init__ 
'rotateLength' that is by default 1000000. So at 100000 bytes, it will 
rotate the file.



From projects at reedflute.com  Tue Sep 21 12:18:45 2004
From: projects at reedflute.com (Eugene Coetzee)
Date: Tue, 21 Sep 2004 20:18:45 +0200
Subject: [Twisted-Python] TCP wrapper support for twisted servers
	-	solution !
In-Reply-To: <20040921171102.29723.1008032729.divmod.quotient.4717@ohm>
References: <20040921171102.29723.1008032729.divmod.quotient.4717@ohm>
Message-ID: <41507085.8070901@reedflute.com>

exarkun at divmod.com wrote:

>buildProtocol takes an address argument.  If the factory returns None, the connection is dropped before any bytes are read from it.
>  
>
yep. that's exactly what I'm going to do. Thanks for the advise.

Web                 -> www.reedflute.com
=============================================== 





From naoya at matsulab.is.titech.ac.jp  Tue Sep 21 22:10:38 2004
From: naoya at matsulab.is.titech.ac.jp (Naoya Maruyama)
Date: Tue, 21 Sep 2004 23:10:38 -0500
Subject: [Twisted-Python] question on pb-client
Message-ID: <4150FB3E.3040004@matsulab.is.titech.ac.jp>

Hello,

I'm new to Twisted and want to use the Perspective Broker. I read the
howto pages of the web site, but I coundn't find answer of my question.

I'm testing the echo server/clinet (pbsimpleserver.py and
pbsimpleclient.py). I can successfully run them, but if I change the
client to the following, the result seems strange.

---
from twisted.spread import pb
from twisted.internet import reactor
from twisted.python import util

factory = pb.PBClientFactory()
reactor.connectTCP("localhost", 8789, factory)

def test():
    d = factory.getRootObject()
    d.addCallback(lambda object: object.callRemote("echo", "hello network"))
    d.addCallback(lambda echo: 'server echoed: '+echo)
    d.addErrback(lambda reason: 'error: '+str(reason.value))
    d.addCallback(util.println)
    d.addCallback(lambda _: reactor.stop())
    reactor.run()
    return

# calls test twice
test()
test()
---

If I execute this client code, the client doesn't finish running. And
the server prints out "echoing: hello network" only once. So, it seems
that the client failed to get the root object, or to call the remote
method. What's the problem? I can't get the root object multiple times?

Thanks,

naoya




From uwe at oss4u.com  Tue Sep 21 22:34:34 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 21 Sep 2004 21:34:34 -0700
Subject: [Twisted-Python] question on pb-client
In-Reply-To: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
References: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
Message-ID: <200409212134.34781.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


The problem you have is that reactor.run() never returns. It's the main-loop.

On Tuesday 21 September 2004 09:10 pm, Naoya Maruyama wrote:
> Hello,
>
> I'm new to Twisted and want to use the Perspective Broker. I read the
> howto pages of the web site, but I coundn't find answer of my question.
>
> I'm testing the echo server/clinet (pbsimpleserver.py and
> pbsimpleclient.py). I can successfully run them, but if I change the
> client to the following, the result seems strange.
>
> ---
> from twisted.spread import pb
> from twisted.internet import reactor
> from twisted.python import util
>
> factory = pb.PBClientFactory()
> reactor.connectTCP("localhost", 8789, factory)
>
> def test():
>     d = factory.getRootObject()
>     d.addCallback(lambda object: object.callRemote("echo", "hello
> network")) d.addCallback(lambda echo: 'server echoed: '+echo)
>     d.addErrback(lambda reason: 'error: '+str(reason.value))
>     d.addCallback(util.println)
>     d.addCallback(lambda _: reactor.stop())
>     reactor.run()
>     return
>
> # calls test twice
> test()
> test()
> ---
>
> If I execute this client code, the client doesn't finish running. And
> the server prints out "echoing: hello network" only once. So, it seems
> that the client failed to get the root object, or to call the remote
> method. What's the problem? I can't get the root object multiple times?
>
> Thanks,
>
> naoya
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBUQDajqGXBvRToM4RAnclAJ9ByucFmmEwRwEFSWax29p4jqh+BQCgt5NM
WY8m9UwJRGFCCtjSa+r0SV8=
=M2T2
-----END PGP SIGNATURE-----




From radeex at gmail.com  Tue Sep 21 22:34:49 2004
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 22 Sep 2004 00:34:49 -0400
Subject: [Twisted-Python] question on pb-client
In-Reply-To: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
References: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
Message-ID: <60ed19d4040921213470236aa4@mail.gmail.com>

On Tue, 21 Sep 2004 23:10:38 -0500, Naoya Maruyama
<naoya at matsulab.is.titech.ac.jp> wrote:

> def test():
>     d = factory.getRootObject()
>     d.addCallback(lambda object: object.callRemote("echo", "hello network"))
>     d.addCallback(lambda echo: 'server echoed: '+echo)
>     d.addErrback(lambda reason: 'error: '+str(reason.value))
>     d.addCallback(util.println)
>     d.addCallback(lambda _: reactor.stop())
>     reactor.run()
>     return

Just call reactor.run() once, at the very end of this script, and only
call reactor.stop() once, as a callback to the second test() call. So,
in summary, make test() *not* addCallback a reactor.stop, make it
_not_ call reactor.run, and change your second test() call to
test().addCallback(lambda _: reactor.stop()) and then put
reactor.run() after that.

> 
> # calls test twice
> test()
> test()

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+            http://radix.twistedmatrix.com



From naoya at matsulab.is.titech.ac.jp  Wed Sep 22 00:23:33 2004
From: naoya at matsulab.is.titech.ac.jp (Naoya Maruyama)
Date: Wed, 22 Sep 2004 01:23:33 -0500
Subject: [Twisted-Python] question on pb-client
In-Reply-To: <60ed19d4040921213470236aa4@mail.gmail.com>
References: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
	<60ed19d4040921213470236aa4@mail.gmail.com>
Message-ID: <41511A65.1010906@matsulab.is.titech.ac.jp>

So, is there no way to stop the reactor and rerun it?

naoya

Christopher Armstrong wrote:
> On Tue, 21 Sep 2004 23:10:38 -0500, Naoya Maruyama
> <naoya at matsulab.is.titech.ac.jp> wrote:
> 
> 
>>def test():
>>    d = factory.getRootObject()
>>    d.addCallback(lambda object: object.callRemote("echo", "hello network"))
>>    d.addCallback(lambda echo: 'server echoed: '+echo)
>>    d.addErrback(lambda reason: 'error: '+str(reason.value))
>>    d.addCallback(util.println)
>>    d.addCallback(lambda _: reactor.stop())
>>    reactor.run()
>>    return
> 
> 
> Just call reactor.run() once, at the very end of this script, and only
> call reactor.stop() once, as a callback to the second test() call. So,
> in summary, make test() *not* addCallback a reactor.stop, make it
> _not_ call reactor.run, and change your second test() call to
> test().addCallback(lambda _: reactor.stop()) and then put
> reactor.run() after that.
> 
> 
>># calls test twice
>>test()
>>test()
> 
> 



From naoya at matsulab.is.titech.ac.jp  Wed Sep 22 00:26:31 2004
From: naoya at matsulab.is.titech.ac.jp (Naoya Maruyama)
Date: Wed, 22 Sep 2004 01:26:31 -0500
Subject: [Twisted-Python] question on pb-client
In-Reply-To: <200409212134.34781.uwe@oss4u.com>
References: <4150FB3E.3040004@matsulab.is.titech.ac.jp>
	<200409212134.34781.uwe@oss4u.com>
Message-ID: <41511B17.7040102@matsulab.is.titech.ac.jp>

Thanks for your reply. I think the first call of reactor.run() does
return, because there is a callback  that calls reactor.stop().

naoya

Uwe C. Schroeder wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> 
> The problem you have is that reactor.run() never returns. It's the main-loop.
> 
> On Tuesday 21 September 2004 09:10 pm, Naoya Maruyama wrote:
> 
>>Hello,
>>
>>I'm new to Twisted and want to use the Perspective Broker. I read the
>>howto pages of the web site, but I coundn't find answer of my question.
>>
>>I'm testing the echo server/clinet (pbsimpleserver.py and
>>pbsimpleclient.py). I can successfully run them, but if I change the
>>client to the following, the result seems strange.
>>
>>---
>>from twisted.spread import pb
>>from twisted.internet import reactor
>>from twisted.python import util
>>
>>factory = pb.PBClientFactory()
>>reactor.connectTCP("localhost", 8789, factory)
>>
>>def test():
>>    d = factory.getRootObject()
>>    d.addCallback(lambda object: object.callRemote("echo", "hello
>>network")) d.addCallback(lambda echo: 'server echoed: '+echo)
>>    d.addErrback(lambda reason: 'error: '+str(reason.value))
>>    d.addCallback(util.println)
>>    d.addCallback(lambda _: reactor.stop())
>>    reactor.run()
>>    return
>>
>># calls test twice
>>test()
>>test()
>>---
>>
>>If I execute this client code, the client doesn't finish running. And
>>the server prints out "echoing: hello network" only once. So, it seems
>>that the client failed to get the root object, or to call the remote
>>method. What's the problem? I can't get the root object multiple times?
>>
>>Thanks,
>>
>>naoya
>>
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> - -- 
> 	UC
> 
> - --
> Open Source Solutions 4U, LLC	2570 Fleetwood Drive
> Phone:  +1 650 872 2425		San Bruno, CA 94066
> Cell:   +1 650 302 2405		United States
> Fax:    +1 650 872 2417
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.3 (GNU/Linux)
> 
> iD8DBQFBUQDajqGXBvRToM4RAnclAJ9ByucFmmEwRwEFSWax29p4jqh+BQCgt5NM
> WY8m9UwJRGFCCtjSa+r0SV8=
> =M2T2
> -----END PGP SIGNATURE-----
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From simon at hedberg.net  Wed Sep 22 04:32:19 2004
From: simon at hedberg.net (Simon)
Date: Wed, 22 Sep 2004 12:32:19 +0200
Subject: [Twisted-Python] Twisted app structure
Message-ID: <000001c4a08f$707d3dc0$456271d5@hp>

Hi everyone,
I've recently discovered Twisted and am now thinking of shifting my
development from PHP to Python. I'm writing to you to get some input on
how Python and especially Twisted could be used in my development.

The main app I want to build could be described as a dynamic messaging
service system. It will listen for events on different protocols and
react to them according to a service description that is set up for that
event.
A service description will contain a chain of calls to different modules
of the system, for example UserModule->GetUser(event.owner),
MsgStore->Retrieve(event.msgid),
GroupModule->StoreContact(group,msg.sender). 

It seems to me that this system would be suitable to implement in
Twisted. Would you agree?
I also would like to know what you think would be best; building a main
app that handles traffic on all protocols and reacts to it, or building
gateway apps for each protocol that store data in a db which a main app
retrieves and acts on?
Would appreciate any thoughts on this.

Looking forward to hearing from you.
/Simon




From exarkun at divmod.com  Wed Sep 22 07:11:34 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 22 Sep 2004 13:11:34 GMT
Subject: [Twisted-Python] question on pb-client
In-Reply-To: <41511A65.1010906@matsulab.is.titech.ac.jp>
Message-ID: <20040922131134.29723.367837571.divmod.quotient.5053@ohm>

On Wed, 22 Sep 2004 01:23:33 -0500, Naoya Maruyama <naoya at matsulab.is.titech.ac.jp> wrote:
>So, is there no way to stop the reactor and rerun it?
> 

  Correct.

  Jp



From jean-marc.pouchoulon at ac-montpellier.fr  Thu Sep 23 02:41:05 2004
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Thu, 23 Sep 2004 10:41:05 +0200
Subject: [Twisted-Python] tesdns.py basic question 
Message-ID: <41528C21.3030809@ac-montpellier.fr>

Bonjour,
I run testdns.py example on my dns.
I don't understand why I can't see a classic ip address  as with:

 host webprod.mondomaine.fr
gave me
    webprod.mondomaine.fr has address 192.168.61.2

with
r.lookupAddress(sys.argv[1]).addCallback(gotAddress).addErrback(gotError)
that give me
 

Addresses:  [<RR name=webprod.mondomain.fr type=A class=IN ttl=86400s 
auth=False>], [<RR name=mondomain.fr
type=NS class=IN ttl=86400s auth=False>, <RR name=mondomain.fr type=NS 
class=IN ttl=86400s auth=False>, <RR name
=mondomain.fr type=NS class=IN ttl=86400s auth=False>, <RR 
name=mondomain.fr type=NS class=IN ttl=86400s au
th=False>, <RR name=mondomain.fr type=NS class=IN ttl=86400s 
auth=False>, <RR name=mondomain.fr type=NS cla
ss=IN ttl=86400s auth=False>, <RR name=mondomain.fr type=NS class=IN 
ttl=86400s auth=False>, <RR name=mondomain.fr type=NS class=IN 
ttl=86400s auth=False>, <RR name=mondomain.fr type=NS class=IN 
ttl=86400s auth=False>,
<RR name=mondomain.fr type=NS class=IN ttl=86400s auth=False>], [<RR 
name=dns.mondomain.fr type=A class=IN
ttl=86400s auth=False>, <RR name=ia30n.i30.in.mondomain.fr type=A 
class=IN ttl=86400s auth=False>, <RR name=ia34
m.i34.in.mondomain.fr type=A class=IN ttl=86400s auth=False>, <RR 
name=linux.i48.in.mondomain.fr type=A cla
ss=IN ttl=86400s auth=False>, <RR name=ia66-3.i66.in.mondomain.fr type=A 
class=IN ttl=86400s auth=False>, <RR na
me=l1serv2.in.mondomain.fr type=A class=IN ttl=86400s auth=False>, <RR 
name=l1serv4.in.mondomain.fr type=A
class=IN ttl=86400s auth=False>, <RR name=l1serv5.in.mondomain.fr type=A 
class=IN ttl=86400s auth=False>, <RR na
me=l2serv1.mondomain.fr type=A class=IN ttl=86400s auth=False>, <RR 
name=ia11-dns.i11.in.mondomain.fr type=
A class=IN ttl=86400s auth=False>]

On a CNAME I have  the corresponding A record
[<RR name=www.mondomain.fr type=CNAME class=IN ttl=30s auth=False>, <RR 
name=webprod.mondomain.fr
   
I certainly misunderstand  a basic thing.

Thanks  for you help.






From foom at fuhm.net  Thu Sep 23 09:45:46 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 23 Sep 2004 11:45:46 -0400
Subject: [Twisted-Python] log rotation
In-Reply-To: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
References: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
Message-ID: <A2B40215-0D77-11D9-BF25-000A95A50FB2@fuhm.net>

On Sep 21, 2004, at 9:21 AM, <exarkun at divmod.com> wrote:
>   logrotate should rotate twistd logfiles just fine.  It shuts down a 
> process, moves its log files around, then restarts it.

That's not how it normally works.

Generally one of two strategies is employed:
- Move the current log files, then send a signal to the process to tell 
it to reload its configuration file, which causes it to reopen the 
logfiles.
- Copy the log files, and truncate the old file.

The first option is much nicer, so ideally for integration with 
logrotate, you would want to install some signal-handler that tells 
twistd to reopen all its logfiles.

James




From exarkun at divmod.com  Thu Sep 23 13:00:42 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 23 Sep 2004 15:00:42 -0400
Subject: [Twisted-Python] Status of Twisted Tests
Message-ID: <41531D5A.5040700@divmod.com>


   Python 2.2:

===============================================================================
ERROR: testOurServerCmdLineClient 
(twisted.conch.test.test_conch.SSHTransportTestCase)
-------------------------------------------------------------------------------
Traceback: twisted.trial.unittest.FailTest, unexpectedly lost connection 
<twisted.conch.test.test_conch.SSHTestServer instance at 0x8dc2a5c>
[Failure instance: Traceback: twisted.internet.error.ConnectionDone, 
Connection was closed cleanly.
]
/home/buildbot/run/full2.2/Twisted/twisted/python/log.py:53:callWithLogger
/home/buildbot/run/full2.2/Twisted/twisted/python/log.py:40:callWithContext
/home/buildbot/run/full2.2/Twisted/twisted/python/context.py:52:callWithContext
/home/buildbot/run/full2.2/Twisted/twisted/python/context.py:31:callWithContext
/home/buildbot/run/full2.2/Twisted/twisted/internet/default.py:521:_doReadOrWrite
/home/buildbot/run/full2.2/Twisted/twisted/internet/tcp.py:296:connectionLost
/home/buildbot/run/full2.2/Twisted/twisted/conch/test/test_conch.py:334:connectionLost
/home/buildbot/run/full2.2/Twisted/twisted/trial/unittest.py:86:fail
-------------------------------------------------------------------------------

   Python 2.3:

===============================================================================
FAILURE: testBasicFunction (twisted.test.test_task.LoopTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 240, in _runPhase
     stage(*args, **kwargs)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 262, in _main
     self.runner(self.method)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/runner.py", 
line 95, in runTest
     method()
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/test/test_task.py", 
line 25, in testBasicFunction
     self.failUnless(9 <= len(L) <= 11)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 98, in failUnless
     raise FailTest, message
FailTest
===============================================================================
FAILURE: testIdleClientDoesDisconnect (twisted.mail.test.test_imap.Timeout)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 240, in _runPhase
     stage(*args, **kwargs)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 262, in _main
     self.runner(self.method)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/runner.py", 
line 95, in runTest
     method()
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/mail/test/test_imap.py", 
line 2348, in testIdleClientDoesDisconnect
     self.failUnless(time.time() - now < 0.4)
   File 
"/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py", 
line 98, in failUnless
     raise FailTest, message
FailTest
===============================================================================
ERROR: testOurServerCmdLineClient 
(twisted.conch.test.test_conch.SSHTransportTestCase)
-------------------------------------------------------------------------------
Traceback: twisted.trial.unittest.FailTest, unexpectedly lost connection 
<twisted.conch.test.test_conch.SSHTestServer instance at 0x40e1492c>
[Failure instance: Traceback: twisted.internet.error.ConnectionDone, 
Connection was closed cleanly.
]
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/python/log.py:53:callWithLogger
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/python/log.py:40:callWithContext
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/python/context.py:52:callWithContext
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/python/context.py:31:callWithContext
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/internet/default.py:521:_doReadOrWrite
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/internet/tcp.py:296:connectionLost
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/conch/test/test_conch.py:334:connectionLost
/home/buildbot/BuildBot/slave/full2.3/Twisted/twisted/trial/unittest.py:86:fail
-------------------------------------------------------------------------------

   Python 2.4:

testAPileOfThings (twisted.mail.test.test_imap.TLSTestCase) ...
/home/buildbot/run/full2.4/Twisted/twisted/internet/tcp.py:531: 
exceptions.RuntimeWarning: startTLS with unwritten buffered data 
currently doesn't work right. See issue #686. Closing connection.
command timed out: 1200 seconds without output, killing pid 10997
process killed by signal 9
program finished with exit code -1

   OS X:
===============================================================================
ERROR: testOurServerCmdLineClient 
(twisted.conch.test.test_conch.SSHTransportTestCase)
-------------------------------------------------------------------------------
Traceback: twisted.trial.unittest.FailTest, unexpectedly lost connection 
<twisted.conch.test.test_conch.SSHTestServer instance at 0x220c3c8>
[Failure instance: Traceback: twisted.internet.error.ConnectionDone, 
Connection was closed cleanly.
]
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/python/log.py:53:callWithLogger
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/python/log.py:40:callWithContext
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/python/context.py:52:callWithContext
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/python/context.py:31:callWithContext
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/internet/default.py:521:_doReadOrWrite
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/internet/tcp.py:296:connectionLost
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/conch/test/test_conch.py:334:connectionLost
/Users/buildbot/Buildbot/twisted/OSX-full2.3/Twisted/twisted/trial/unittest.py:86:fail
-------------------------------------------------------------------------------


   Win32Reactor:

===============================================================================
FAILURE: testWriter (twisted.test.test_tcp.LargeBufferTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
240, in _runPhase
     stage(*args, **kwargs)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
262, in _main
     self.runner(self.method)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\runner.py", line 95, 
in runTest
     method()
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_tcp.py", line 
696, in testWriter
     self.failUnless(clientF.done, "client didn't see connection dropped")
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
98, in failUnless
     raise FailTest, message
FailTest: client didn't see connection dropped
===============================================================================
FAILURE: test_loseConnection 
(twisted.test.test_wprocess.ProcessOnWin32TestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
240, in _runPhase
     stage(*args, **kwargs)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
262, in _main
     self.runner(self.method)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\runner.py", line 95, 
in runTest
     method()
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py", 
line 103, in test_loseConnection
     self._dieDieDie(diefunc = 'loseConnection')
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py", 
line 122, in _dieDieDie
     self.failUnless(actual.startswith('1\r\n'))
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
98, in failUnless
     raise FailTest, message
FailTest
===============================================================================
ERROR: test_bad_exit (twisted.test.test_wprocess.ProcessOnWin32TestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
240, in _runPhase
     stage(*args, **kwargs)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line 
262, in _main
     self.runner(self.method)
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\runner.py", line 95, 
in runTest
     method()
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py", 
line 38, in test_bad_exit
     reason = util.wait(self.deferred)['reason']
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\util.py", line 78, in 
wait
     result.raiseException()
   File "d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\python\failure.py", line 
242, in raiseException
     raise self.value.__class__, self.value, self.tb
TimeoutError: Callback timed out
===============================================================================
ERROR: test_err_python (twisted.test.test_wprocess.ProcessOnWin32TestCase)
-------------------------------------------------------------------------------
Traceback: twisted.internet.defer.AlreadyCalledError,
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:326:_runCallbacks
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\wprocess.py:120:connectionLost
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py:21:processEnded
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:240:callback
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:287:_startRunCallbacks
-------------------------------------------------------------------------------

Additionally,

Could not import twisted.conch.test.test_sftp: Traceback: 
exceptions.ImportError, No module named fcntl
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py:344:addModule
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\python\reflect.py:344:namedModule
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\conch\test\test_sftp.py:1:?
d:\Program Files\buildslave\W32-full2.2\Twisted\twisted\conch\unix.py:8:?
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\process.py:33:?
d:\Program 
Files\buildslave\W32-full2.2\Twisted\twisted\internet\fdesc.py:15:?

   This bodes ill of a 2.0 release in the foreseeable future.  If you 
have recently committed broken code, please fix it or revert it (or I 
may do it for you).  We have a sandbox and svn has reasonably good 
branch support.  Use 'em.

   Jp




From corydodt at twistedmatrix.com  Thu Sep 23 15:03:38 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 23 Sep 2004 14:03:38 -0700
Subject: [Twisted-Python] Status of Twisted Tests
In-Reply-To: <41531D5A.5040700@divmod.com>
References: <41531D5A.5040700@divmod.com>
Message-ID: <41533A2A.3060200@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

The two below must be my broken test code.  I will investigate.

Someone should look at the sftp thing and make it .skip'd for Windows, since
it imports fcntl.

C


Jp Calderone wrote:
|
|   Win32Reactor:
|
| FAILURE: test_loseConnection
| (twisted.test.test_wprocess.ProcessOnWin32TestCase)
| -------------------------------------------------------------------------------
|
| Traceback (most recent call last):
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line
| 240, in _runPhase
|     stage(*args, **kwargs)
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line
| 262, in _main
|     self.runner(self.method)
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\runner.py", line 95,
| in runTest
|     method()
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py",
| line 103, in test_loseConnection
|     self._dieDieDie(diefunc = 'loseConnection')
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py",
| line 122, in _dieDieDie
|     self.failUnless(actual.startswith('1\r\n'))
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line
| 98, in failUnless
|     raise FailTest, message
| FailTest
| ===============================================================================
|
| ERROR: test_bad_exit (twisted.test.test_wprocess.ProcessOnWin32TestCase)
| -------------------------------------------------------------------------------
|
| Traceback (most recent call last):
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line
| 240, in _runPhase
|     stage(*args, **kwargs)
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py", line
| 262, in _main
|     self.runner(self.method)
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\runner.py", line 95,
| in runTest
|     method()
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py",
| line 38, in test_bad_exit
|     reason = util.wait(self.deferred)['reason']
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\util.py", line 78, in
| wait
|     result.raiseException()
|   File "d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\python\failure.py", line
| 242, in raiseException
|     raise self.value.__class__, self.value, self.tb
| TimeoutError: Callback timed out
| ===============================================================================
|
| ERROR: test_err_python (twisted.test.test_wprocess.ProcessOnWin32TestCase)
| -------------------------------------------------------------------------------
|
| Traceback: twisted.internet.defer.AlreadyCalledError,
| d:\Program
|
Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:326:_runCallbacks
|
| d:\Program
|
Files\buildslave\W32-full2.2\Twisted\twisted\internet\wprocess.py:120:connectionLost

|
| d:\Program
|
Files\buildslave\W32-full2.2\Twisted\twisted\test\test_wprocess.py:21:processEnded

|
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:240:callback
| d:\Program
|
Files\buildslave\W32-full2.2\Twisted\twisted\internet\defer.py:287:_startRunCallbacks

|
| -------------------------------------------------------------------------------



Someone please .skip this:....


|
| Additionally,
|
| Could not import twisted.conch.test.test_sftp: Traceback:
| exceptions.ImportError, No module named fcntl
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\trial\unittest.py:344:addModule
|
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\python\reflect.py:344:namedModule
|
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\conch\test\test_sftp.py:1:?
| d:\Program Files\buildslave\W32-full2.2\Twisted\twisted\conch\unix.py:8:?
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\internet\process.py:33:?
| d:\Program
| Files\buildslave\W32-full2.2\Twisted\twisted\internet\fdesc.py:15:?
|
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBUzoq3A5SrXAiHQcRAv/uAJ41y7B3r1ZvKkF3Wq3lHOK8cA7R2wCdHXhM
NomMhNIfvDKTeCcBCji2KHU=
=My8x
-----END PGP SIGNATURE-----



From foom at fuhm.net  Thu Sep 23 15:37:40 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 23 Sep 2004 17:37:40 -0400
Subject: [Twisted-Python] Status of Twisted Tests
In-Reply-To: <41531D5A.5040700@divmod.com>
References: <41531D5A.5040700@divmod.com>
Message-ID: <CB91E540-0DA8-11D9-BF25-000A95A50FB2@fuhm.net>

On Sep 23, 2004, at 3:00 PM, Jp Calderone wrote:
> ======================================================================= 
> ========
> ERROR: testOurServerCmdLineClient  
> (twisted.conch.test.test_conch.SSHTransportTestCase)
> ----------------------------------------------------------------------- 
> --------
> Traceback: twisted.trial.unittest.FailTest, unexpectedly lost  
> connection <twisted.conch.test.test_conch.SSHTestServer instance at  
> 0x8dc2a5c>
> [Failure instance: Traceback: twisted.internet.error.ConnectionDone,  
> Connection was closed cleanly.
> ]
> /home/buildbot/run/full2.2/Twisted/twisted/python/log.py:53: 
> callWithLogger
> /home/buildbot/run/full2.2/Twisted/twisted/python/log.py:40: 
> callWithContext
> /home/buildbot/run/full2.2/Twisted/twisted/python/context.py:52: 
> callWithContext
> /home/buildbot/run/full2.2/Twisted/twisted/python/context.py:31: 
> callWithContext
> /home/buildbot/run/full2.2/Twisted/twisted/internet/default.py:521: 
> _doReadOrWrite
> /home/buildbot/run/full2.2/Twisted/twisted/internet/tcp.py:296: 
> connectionLost
> /home/buildbot/run/full2.2/Twisted/twisted/conch/test/test_conch.py: 
> 334:connectionLost
> /home/buildbot/run/full2.2/Twisted/twisted/trial/unittest.py:86:fail
> ----------------------------------------------------------------------- 
> --------

Since this one appeared to be my fault I investigated it, and found the  
following:
The test is highly sensitive to what order events come back. It wants  
them in the following order:
1) The pipe from the SSH client subprocess has the data "goodbye"  
appear on it.
2) The ssh server's connection to the client gets closed.
3) The ssh client process dies

However, with my buffering change, *sometimes* (not always) the  
following happens instead:
1) The ssh server's connection to the client gets closed.
2) The pipe from the SSH client subprocess has the data "goodbye"  
appear on it.
3) The ssh client process dies

It seems to me that this ordering change could have happened before, as  
there is nothing that guarantees the ordering of data sent over  
different sockets. So, I think this is a bug in the test.

>   Python 2.4:
> testAPileOfThings (twisted.mail.test.test_imap.TLSTestCase) ...
> /home/buildbot/run/full2.4/Twisted/twisted/internet/tcp.py:531:  
> exceptions.RuntimeWarning: startTLS with unwritten buffered data  
> currently doesn't work right. See issue #686. Closing connection.

*No* idea why this would show up only in Py 2.4...if anyone could help  
out here..

James




From foom at fuhm.net  Thu Sep 23 15:56:35 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 23 Sep 2004 17:56:35 -0400
Subject: [Twisted-Python] Status of Twisted Tests
In-Reply-To: <CB91E540-0DA8-11D9-BF25-000A95A50FB2@fuhm.net>
References: <41531D5A.5040700@divmod.com>
	<CB91E540-0DA8-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <7054FB98-0DAB-11D9-BF25-000A95A50FB2@fuhm.net>

On Sep 23, 2004, at 5:37 PM, James Y Knight wrote:
> It seems to me that this ordering change could have happened before, 
> as there is nothing that guarantees the ordering of data sent over 
> different sockets. So, I think this is a bug in the test.

I marked it skip for the moment -- this obviously shouldn't stay, 
though. Hopefully someone who knows about conch will fix it instead of 
me. :)

James




From foom at fuhm.net  Thu Sep 23 17:01:38 2004
From: foom at fuhm.net (James Y Knight)
Date: Thu, 23 Sep 2004 19:01:38 -0400
Subject: [Twisted-Python] Status of Twisted Tests
In-Reply-To: <CB91E540-0DA8-11D9-BF25-000A95A50FB2@fuhm.net>
References: <41531D5A.5040700@divmod.com>
	<CB91E540-0DA8-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <864F567F-0DB4-11D9-BF25-000A95A50FB2@fuhm.net>


On Sep 23, 2004, at 5:37 PM, James Y Knight wrote:

>
>>   Python 2.4:
>> testAPileOfThings (twisted.mail.test.test_imap.TLSTestCase) ...
>> /home/buildbot/run/full2.4/Twisted/twisted/internet/tcp.py:531: 
>> exceptions.RuntimeWarning: startTLS with unwritten buffered data 
>> currently doesn't work right. See issue #686. Closing connection.
>
> *No* idea why this would show up only in Py 2.4...if anyone could help 
> out here..

Okay, figured it out. Submitted as Python bug #1033720 
<http://www.python.org/sf/1033720>

print str(buffer(buffer("asdf", 0), 0, 131072))

On Python < 2.4, this prints 'asdf' as it should.
On Python 2.4, this prints '', as it most certainly *should not*.

It may have something to do with:
Python 2.4a2 (#61, Sep  9 2004, 22:24:36)
 >>> buffer("asdf", 0)
<read-only buffer for 0x40234360, size -1, offset 0 at 0x40234280>
(size -1, WTF??)

vs.

Python 2.3.4 (#2, Jul  5 2004, 09:15:05)
 >>> buffer("asdf", 0)
<read-only buffer for 0x402194a0, ptr 0x402194b4, size 4 at 0x40219460>

James




From mailinglist at ltsai.com  Thu Sep 23 18:40:35 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Fri, 24 Sep 2004 08:40:35 +0800
Subject: [Twisted-Python] Re: log rotation
In-Reply-To: <A2B40215-0D77-11D9-BF25-000A95A50FB2@fuhm.net>
References: <20040921132109.29723.1440903240.divmod.quotient.4625@ohm>
	<A2B40215-0D77-11D9-BF25-000A95A50FB2@fuhm.net>
Message-ID: <civqe2$qgu$1@sea.gmane.org>



James Y Knight wrote:
> On Sep 21, 2004, at 9:21 AM, <exarkun at divmod.com> wrote:
> 
>>   logrotate should rotate twistd logfiles just fine.  It shuts down a 
>> process, moves its log files around, then restarts it.
> 
> 
> That's not how it normally works.
> 
> Generally one of two strategies is employed:
> - Move the current log files, then send a signal to the process to tell 
> it to reload its configuration file, which causes it to reopen the 
> logfiles.
> - Copy the log files, and truncate the old file.
> 
> The first option is much nicer, so ideally for integration with 
> logrotate, you would want to install some signal-handler that tells 
> twistd to reopen all its logfiles.
> 
> James


Hi James,

That's what I would thought too.

1. logrotate will rotate the file. (server -> server.1)
2. a signal (usually a HUP) is sent to the process and the process will 
close the log file's FD. (server.1)
3. Process will reload it's current configuration and write to a new log 
file. (server)

However, Twisted has its own mechanism of handling log rotation.

Liming




From mailinglist at ltsai.com  Fri Sep 24 09:20:30 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Fri, 24 Sep 2004 23:20:30 +0800
Subject: [Twisted-Python] system event trigger
Message-ID: <cj1e1j$lmh$1@sea.gmane.org>

Hi

Anyone has any sample codes for adding your own function that will be 
called when system wide events such as shutdown is fired?

Thanks,
Liming




From mailinglist at ltsai.com  Fri Sep 24 09:28:12 2004
From: mailinglist at ltsai.com (Tsai Li Ming)
Date: Fri, 24 Sep 2004 23:28:12 +0800
Subject: [Twisted-Python] Re: system event trigger
In-Reply-To: <cj1e1j$lmh$1@sea.gmane.org>
References: <cj1e1j$lmh$1@sea.gmane.org>
Message-ID: <cj1eg1$mk8$1@sea.gmane.org>

Tsai Li Ming wrote:
> Hi
> 
> Anyone has any sample codes for adding your own function that will be 
> called when system wide events such as shutdown is fired?
> 
> Thanks,
> Liming

I think I found my answer, should be reactor.addSystemEventTrigger.

-Liming




From cce at clarkevans.com  Fri Sep 24 14:58:35 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 24 Sep 2004 16:58:35 -0400
Subject: [Twisted-Python] Seeking Twisted/Python Contractors
Message-ID: <20040924205835.GA89572@prometheusresearch.com>

Hello.  We have a core toolset written with Twisted (that will most
likely be made open source) and have several applications of this
toolset to the medical research field.  I'm looking for someone to
continue to build out the product by implementing customer requested
features.  In particular, we need several user interface improvements, 
as well as a whole slew of custom, one-off programming tasks.
Depending on the particular task, some of the code could quite
possibly be donated to the Twisted project.

I'm looking for someone very familiar with Python, who has good
track record building test-driven code, and who is responsive over
the Internet.  Experience with Python, HTTP and HTML is a must,
Javascript a plus, and XSLT is a very nice bonus.   This is a
contract position, and need not be local; although if you are within
'visiting' distance to New Haven, CT (say NYC or Boston) that is icing.

If you are interested, please send me information you consider 
relevant, your hourly rate expectations, and your availability; if
you are not a 'visible' person in the Twisted community a few
references would be quite helpful.

Cheers!

Clark 

-- 
Clark C. Evans                      Prometheus Research, LLC.
                                    http://www.prometheusresearch.com/
    o                               office: +1.203.777.2550 
  ~/ ,                              mobile: +1.203.444.0557 
 //
((   Prometheus Research: Transforming Data Into Knowledge
 \\  ,
   \/    - Research Exchange Database
   /\    - Survey & Assessment Technologies
   ` \   - Software Tools for Researchers
    ~ *



From wilk-ml at flibuste.net  Sat Sep 25 04:10:44 2004
From: wilk-ml at flibuste.net (William Dode)
Date: Sat, 25 Sep 2004 12:10:44 +0200
Subject: [Twisted-Python] jabber
Message-ID: <87acvehd5n.fsf@blakie.riol>

Hi,

Are there people using jabber with twisted ?

I found only this example for a jabber client :
http://randomthoughts.vandorp.ca/WK/blog/706?t=item

It works, it's not very difficult to use, but it could be a little bit
more complete. Is there somewhere others examples ?

bye

-- 
William Dodé - http://flibuste.net



From sflist at ihonk.com  Sat Sep 25 07:15:08 2004
From: sflist at ihonk.com (Steve Freitas)
Date: Sat, 25 Sep 2004 06:15:08 -0700
Subject: [Twisted-Python] LoopingCall(): Threaded or not?
Message-ID: <200409250615.08911.sflist@ihonk.com>

Hi all,

I'm using twisted.internet.task.LoopingCall() to perform various housekeeping 
chores. One of the things I'm using it for is to clean up stale locks left 
behind by stalled network clients. However, I don't want it cleaning up a 
lock while my other twisted code is executing, as that could introduce a race 
condition. So, my question is whether a LoopingCall() will only run in the 
single thread of execution used for application code, or if it is threaded 
off and could very well be executing at the same time as my own code.

Hope that was clear enough. Thanks!

Steve



From itamar at itamarst.org  Sat Sep 25 08:50:08 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 25 Sep 2004 10:50:08 -0400
Subject: [Twisted-Python] LoopingCall(): Threaded or not?
In-Reply-To: <200409250615.08911.sflist@ihonk.com>
References: <200409250615.08911.sflist@ihonk.com>
Message-ID: <1096123807.19067.0.camel@sheriffpony>

Twisted does not use threads as a rule. Exceptions are the database pool
code and functions that mention threads (reactor.callInThread, say). So
you need not worry.




From foom at fuhm.net  Sat Sep 25 11:52:52 2004
From: foom at fuhm.net (James Y Knight)
Date: Sat, 25 Sep 2004 13:52:52 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <B92194FA-0F1B-11D9-BF25-000A95A50FB2@fuhm.net>

Bug summary
______________________
Since 2004-09-17 20:03:10.310000:
   Bugs opened: 11   Bugs closed: 5   Total open bugs: 311 (+6)

New / Reopened Bugs
______________________
[WEBSITE] Website needs to be suitable for 2.0  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue728 opened by hypatia

t.p.c.MetaInterface.__getattr__  causes infinite recursion  (yesterday)
        http://www.twistedmatrix.com/bugs/issue730 opened by slyphon

twisted.names.dns.Record_NULL is stupid  (3 days ago)
        http://www.twistedmatrix.com/bugs/issue729 opened by anthony

twisted.internet.{tcp,udp}.Port lie when port == 0  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue725 opened by anthony

domish.Element and deepcopy problem  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue724 opened by arthur.lutz

ftp blocks unless using a passive client  (5 days ago)
        http://www.twistedmatrix.com/bugs/issue723 opened by cablehead

ReconnectingClientFactory can fail to reconnect on connection timeouts  
(7 days ago)
        http://www.twistedmatrix.com/bugs/issue722 opened by exarkun

[DOCUMENTATION, WEB] Document reasons for web2 interface and design 
changes  (9 hours ago)
        http://www.twistedmatrix.com/bugs/issue731 opened by hypatia

[CORE] Compression for rotated log files  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue727 opened by itamarst

[CORE] Allow passing --uid and --gid to twistd  (4 days ago)
        http://www.twistedmatrix.com/bugs/issue726 opened by itamarst

[CORE] No way to override the default signal handler  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue715 opened by loic

Bugs Closed
______________________
[DOCUMENTATION, WORDS] IRC examples bug fix/improvment  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue721 opened by yacc

Allow SIP to work over TCP  (12 months ago)
        http://www.twistedmatrix.com/bugs/issue293 opened by exarkun

[MAIL] MaildirMailbox.appendMessage implementation.  (1 week ago)
        http://www.twistedmatrix.com/bugs/issue714 opened by yacc

[WEB] [PATCH] Optionally preserve all whitespace in microdom  (5 months 
ago)
        http://www.twistedmatrix.com/bugs/issue571 opened by anglerud

[TRIAL] --psyco speedup option for trial, for everything else too  (14 
months ago)
        http://www.twistedmatrix.com/bugs/issue145 opened by ne1uno




From uwe at oss4u.com  Sat Sep 25 14:31:12 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sat, 25 Sep 2004 13:31:12 -0700
Subject: [Twisted-Python] PB release connection
Message-ID: <200409251331.12841.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Hi,

after browsing the docs,api and mailinglist I couldn't find what I'm looking 
for. I'm using a simple pb server with a pb.Root object (don't need 
authentication). What I want to do is release the connection from the 
server-side. Server code looks like:

class MyPerspective(pb.Root):
	....
	....


main:
reactor.listenTCP(port,pb.PBServerFactory(MyPerspective(self)))


so far so good. MyPerspective receives all the remote_ calls. Now I'd like to 
be able to get rid of a specific client (which holds a remote-reference to 
MyPerspective). With the old pb api there was a way to do call
perspective.broker.transport.loseConnection(), which I was using on the client 
side to end the connection. 

I can't see anything like this with the new API that would allow me to 
initiate the "kick off" from the server side.

Can this be done? What would be the propper way to release a connection from 
the server side?

Thanks for any enlightenment.

	Uwe


- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBVdWQjqGXBvRToM4RAuzVAJ4jeJHgNGGVwP3pGWh8wWBo+pkXKwCfbJsk
BZN9uUIFMkUb9w7deq0iwDE=
=b1g5
-----END PGP SIGNATURE-----




From jasper at peak.org  Sat Sep 25 17:28:49 2004
From: jasper at peak.org (Jasper Phillips)
Date: Sat, 25 Sep 2004 16:28:49 -0700 (PDT)
Subject: [Twisted-Python] PB release connection
In-Reply-To: <200409251331.12841.uwe@oss4u.com>
References: <200409251331.12841.uwe@oss4u.com>
Message-ID: <Pine.LNX.4.53.0409251614280.11872@a.shell.peak.org>


On Sat, 25 Sep 2004, Uwe C. Schroeder wrote:
[snip]
> Now I'd like to be able to get rid of a specific client (which holds a
> remote-reference to MyPerspective). With the old pb api there was a way to
> do call perspective.broker.transport.loseConnection(), which I was using
> on the client side to end the connection. 
> 
> I can't see anything like this with the new API that would allow me to 
> initiate the "kick off" from the server side.
> 
> Can this be done? What would be the propper way to release a connection from 
> the server side?
> 
> Thanks for any enlightenment.
> 
> 	Uwe

I don't know what the "proper" way to release a connection is, but
"perspective".broker.transport.loseConnection() works for me, where
"perspective" is whatever name you assign to the arg of the "connected"
callback attached to PBClientFactory.login()

Here's a minimal snippet of what I use, cutting out code specific to my
purposes.

class NetworkClient( pb.Referenceable ):
  def __init__( self ):
      self.remote = None

  def connect( self, ipAddress, port, user, password ):
      factory = pb.PBClientFactory()
      reactor.connectTCP( ipAddress, port, factory )
      defer = factory.login( credentials.UsernamePassword( user, password),
                             client=self )
      defer.addCallbacks( self.connected, self.connectFailled )
      return defer

  def disconnect( self ):
      self.remote.broker.transport.loseConnection()

  def connected( self, perspective ):
      print "Connect Succeeded to:", self.remote 
      self.remote = perspective
      self.remote.notifyOnDisconnect( self.disconnected )

    def disconnected( self, perspective ):
        print "Connection Severed"


-Jasper




From uwe at oss4u.com  Sun Sep 26 02:59:46 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Sun, 26 Sep 2004 01:59:46 -0700
Subject: [Twisted-Python] PB release connection
In-Reply-To: <Pine.LNX.4.53.0409251614280.11872@a.shell.peak.org>
References: <200409251331.12841.uwe@oss4u.com>
	<Pine.LNX.4.53.0409251614280.11872@a.shell.peak.org>
Message-ID: <200409260159.46806.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


That works for me too. Maybe I need to reword that.
How do you release the connection from a PBServerFactory instance (where you 
usually don't have a reference to) ?

On Saturday 25 September 2004 04:28 pm, Jasper Phillips wrote:
> On Sat, 25 Sep 2004, Uwe C. Schroeder wrote:
> [snip]
>
> > Now I'd like to be able to get rid of a specific client (which holds a
> > remote-reference to MyPerspective). With the old pb api there was a way
> > to do call perspective.broker.transport.loseConnection(), which I was
> > using on the client side to end the connection.
> >
> > I can't see anything like this with the new API that would allow me to
> > initiate the "kick off" from the server side.
> >
> > Can this be done? What would be the propper way to release a connection
> > from the server side?
> >
> > Thanks for any enlightenment.
> >
> > 	Uwe
>
> I don't know what the "proper" way to release a connection is, but
> "perspective".broker.transport.loseConnection() works for me, where
> "perspective" is whatever name you assign to the arg of the "connected"
> callback attached to PBClientFactory.login()
>
> Here's a minimal snippet of what I use, cutting out code specific to my
> purposes.
>
> class NetworkClient( pb.Referenceable ):
>   def __init__( self ):
>       self.remote = None
>
>   def connect( self, ipAddress, port, user, password ):
>       factory = pb.PBClientFactory()
>       reactor.connectTCP( ipAddress, port, factory )
>       defer = factory.login( credentials.UsernamePassword( user, password),
>                              client=self )
>       defer.addCallbacks( self.connected, self.connectFailled )
>       return defer
>
>   def disconnect( self ):
>       self.remote.broker.transport.loseConnection()
>
>   def connected( self, perspective ):
>       print "Connect Succeeded to:", self.remote
>       self.remote = perspective
>       self.remote.notifyOnDisconnect( self.disconnected )
>
>     def disconnected( self, perspective ):
>         print "Connection Severed"
>
>
> -Jasper
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBVoUCjqGXBvRToM4RApIEAJ92/LrL0AcDASLTNX9oVb1pSnLdtwCfaflD
iyTI7f7FlUAlkJ+HPC7e0d4=
=ydeD
-----END PGP SIGNATURE-----




From p.mayers at imperial.ac.uk  Sun Sep 26 12:32:46 2004
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 26 Sep 2004 19:32:46 +0100
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
Message-ID: <41570B4E.9090109@imperial.ac.uk>

I have an SNMP poller written in Python that I'd like to turn into a 
long-running server process. The obvious thing (it is obvious - I really 
need the support infrastructure) is to convert it to twisted, since it 
provides easy support to turn the process into a server as well as a 
client (e.g. XMLRPC query mapping onto an SNMP fetch; using DBAPI to 
update node status, all hooked in via deferred, etc.)

However, I've done a couple of proof-of-concept ports and am having 
scalability problems related to the way reactors work. I'm not entirely 
certain I've got the problem nailed, since the reactor sources are... 
complex... but I think what happens is this: The framework is heavily 
oriented towards getting IO out as soon as possible, and since there's 
no "scheduling" of receive events, protocol instances talking to "fast" 
clients eat all the CPU, and the socket buffer overflows since each 
datagramReceived triggers another write().

Possibly an example would help:

class agent:
     def start(self):
         d = self.get_table('ifTable')
         d.addCallbacks(self.step2, self.die)
     def step2(self, ifTable):
         # Do some processing, then more data fetch
         d = self.get_table('ipAddrTable')
         d.addCallbacks(self.step3, self.die)
     def step3(self, ipAddrTable):
         # etc. etc.

def do_timeouts(reactor):
     # get the list of sent PDUs
     now = time.time()
     for pdu in pdus:
         if pdu.due < now:
             pdu.deferred.errback(Timeout())
     reactor.callLater(1, do_timeouts, reactor)

import sys
from twisted.internet import reactor

for host in sys.argv[1:]:
     a = agent(host)
     reactor.callLater(0, a.start)
reactor.callLater(1, do_timeouts, reactor)
reactor.run()


Now, I know there are scalability problems with callLater, but that's 
only being used for the startup because I can't think of a cleaner way 
of doing it - future activity is all triggered by deferreds. I'm 
handling the timeouts by running a once-per-second expiry which is 
sufficient for my needs.

The *problem* is that the SNMP agents I'm talking to have an extremely 
wide range of performances, response times and quantity of data to 
retrieve, and the faster endpoints are consuming a disproportionate 
quantity of the CPU time; so much so in fact, that the UDP socket 
receive queue limit is being exceeded (I'm using a single UDP socket for 
all the clients, and breaking the responses back out based on SNMP 
message ID - this is to overcome FD limits).

We're talking 750-1000 clients here BTW.

What I really need is some way of making the reactor do a fair-queuing 
style of transmit/receive; I have some not-very-clear notion in my head 
of transport.write not actually doing the write, but just putting the 
output data onto a per-agent queue, and the reactor emptying those 
queues in a strictly round-robin fashion, *but* stopping immediately to 
service input data if it arrives.

Hmm. I suppose I could implement that by subclassing the UDP transport:

class queuedtransport:
     def write(self, data, host=None):
         if not host in self.host2queue:
             queue = max(self.host2queue.values()) + 1
             self.host2queue[host] = queue
         else:
             queue = self.host2queue[host]
         self.queues.setdefault(queue, []).append(data)
     def queue(self):
         if not self.queues:
            return reactor.callLater(1, self.queue)
         while True:
             self.pos = (self.pos + 1) % len(self.queues)
             if not self.queues[self.pos]:
                 continue
             self._write(self.queues[self.pos].pop(0))
             break

Or something - I'm fairly sure that code wouldn't quite work, but 
something similar.

Does anyone have any suggestions how to handle this? My existing 
(home-grown, nasty) async framework can handle a lot of queries a 
second; upwards of several hundred, and it does a very good job of 
sharing out the load evenly so that fast systems complete quickly but 
the slower ones still get enough time to a) not suffer PDU timeouts and 
b) not exhaust inbound socket buffers.

The way my current code works is:

def receive():
     r,w,x = select.select(fds,[],[])
     for rfd in r:
         while True:
             try:
                 pdu = r.read()
                 if not pdu:
                     break
                 mark_answered(pdu)
              except:
                  pass
         return len(r)
     else:
         return None

while self.jobs:
     while True:
         if not receive():
             break
         job = job.nextptr
         if job.waiting:
             if job.waiting.answered:
                 job.receive()
             elif job.waiting.due < now:
                 try:
                     job.waiting.retry()
                 except:
                     # Out of retries
                     job.cancel()


You can probably see the way this works - on every loop, receive IO 
takes absolute precedence but goes into an input queue, and the input 
queue only has one "receive" event per IO-empty - *and* there's a 
pointer into the queue of jobs to ensure that they're serviced in a 
round-robin fashion if ready. Sadly, the pseudo-code above makes it look 
much cleaner than the real code, and I want the other protocol / service 
support along with other things like the deferred pattern and such.

I would welcome any suggestions.



From itamar at itamarst.org  Sun Sep 26 12:54:10 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 26 Sep 2004 14:54:10 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <41570B4E.9090109@imperial.ac.uk>
References: <41570B4E.9090109@imperial.ac.uk>
Message-ID: <1096224850.19065.17.camel@sheriffpony>

Rather than doing queuing in the transport, do it in your
DatagramProtocol code - instead of doing transport.write add stuff to a
queue that schedules writes fairly for different machines.




From p.mayers at imperial.ac.uk  Sun Sep 26 13:35:33 2004
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 26 Sep 2004 20:35:33 +0100
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <1096224850.19065.17.camel@sheriffpony>
References: <41570B4E.9090109@imperial.ac.uk>
	<1096224850.19065.17.camel@sheriffpony>
Message-ID: <41571A05.7050508@imperial.ac.uk>

Itamar Shtull-Trauring wrote:

> Rather than doing queuing in the transport, do it in your
> DatagramProtocol code - instead of doing transport.write add stuff to a
> queue that schedules writes fairly for different machines.
> 
> 

If I do this, I'll need:

def xmit(self):
     while True:
         txqueue = self.txcurrent
         self.txcurrent = txqueue.next
         if txqueue:
             self.write(txqueue.pop(0))
             break
     reactor.callLater(0, self.xmit)
def write(self, data, address):
     self.getqueue(address).append(data)

def rcv(self):
     while True:
         rxqueue = self.rxcurrent
         self.rxcurrent = rxqueue.next
         if rxqueue:
             pdu = rxqueue.pop(0)
             pdu.callback()
             break

def datagramReceived(self, data, addr):
     pdu, queue = self.parse(data, addr)
     queue.append(pdu)
     reactor.callLater(0, self.rcv)

I'm concerned about all those reactor.callLater - since one of the main 
problems is the UDP socket queue overflowing, every time I xmit I have 
to get *out* of the protocol code ASAP and back into the select() loop, 
however one of the problems with the reactors (problems for me at any 
rate) is that they do pending calls and thread stuff before IO, which 
IMHO is not quite the right way round.

I'm also slightly concerned about the number of function calls involved 
in jumping in and out of the reactor that many times a second (several 
thousand, if I can get it to go as fast as my previous code) given how 
expensive they are under Python. It would certainly be quicker to 
implement this inside the reactor.mainLoop.

Anyway, I'll give it a go, but I thought I saw stuff recently about 
scalability of callLater; and certainly I've had problems with a lot of 
callLaters (I used to use them for the timeouts before going for a 
simpler expiry scan) - maybe callLater will go faster in Python 2.4 with 
the C bisect.insort?

Thanks for the tips



From itamar at itamarst.org  Sun Sep 26 14:25:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 26 Sep 2004 16:25:35 -0400
Subject: [Twisted-Python] Twisted scalability with hundreds of outbound
	(client) connections
In-Reply-To: <41571A05.7050508@imperial.ac.uk>
References: <41570B4E.9090109@imperial.ac.uk>
	<1096224850.19065.17.camel@sheriffpony>
	<41571A05.7050508@imperial.ac.uk>
Message-ID: <1096230335.19062.22.camel@sheriffpony>

On Sun, 2004-09-26 at 15:35, Phil Mayers wrote:

> 
> def xmit(self):
>      while True:
>          txqueue = self.txcurrent
>          self.txcurrent = txqueue.next
>          if txqueue:
>              self.write(txqueue.pop(0))
>              break
>      reactor.callLater(0, self.xmit)

This code confuses me. What is the "next" bit for?

> I'm concerned about all those reactor.callLater - since one of the main 
> problems is the UDP socket queue overflowing, every time I xmit I have 
> to get *out* of the protocol code ASAP and back into the select() loop, 
> however one of the problems with the reactors (problems for me at any 
> rate) is that they do pending calls and thread stuff before IO, which 
> IMHO is not quite the right way round.

ABABAB
BABABA

These are indistinguishable once you've done half an iteration, ABABAB
is BABABA slightly timeshifted, it just affects the first and last
iterations.

> I'm also slightly concerned about the number of function calls involved 
> in jumping in and out of the reactor that many times a second (several 
> thousand, if I can get it to go as fast as my previous code) given how 
> expensive they are under Python. It would certainly be quicker to 
> implement this inside the reactor.mainLoop.

Just have a single reactor.callLater(0, f), and f() then calls all the
functions you want done in that iteration.





From jasper at peak.org  Mon Sep 27 02:23:01 2004
From: jasper at peak.org (Jasper Phillips)
Date: Mon, 27 Sep 2004 01:23:01 -0700 (PDT)
Subject: [Twisted-Python] PB release connection
In-Reply-To: <200409260159.46806.uwe@oss4u.com>
References: <200409251331.12841.uwe@oss4u.com>
	<Pine.LNX.4.53.0409251614280.11872@a.shell.peak.org>
	<200409260159.46806.uwe@oss4u.com>
Message-ID: <Pine.LNX.4.53.0409270102580.26110@a.shell.peak.org>


On Sun, 26 Sep 2004, Uwe C. Schroeder wrote:
> That works for me too. Maybe I need to reword that.
> How do you release the connection from a PBServerFactory instance (where you 
> usually don't have a reference to) ?

Ahh, I misunderstood.  I don't know much about PBServerFactory, as I only
create one to pass to reactor.listenTCP().  I imagine there must be a method
somewhere in the object heirarchy beneath the Port returned by listenTCP(),
but I don't see anything off hand.

I suppose you could call remotely to the client and have it disconnect
itself. ;-)  There must be a better way however...

-Jasper


PS Incidentally a reference to a PBServerFactory is kept on the Port
returned by listenTCP(), i.e. port.factory .



From maoy at cis.upenn.edu  Mon Sep 27 13:57:33 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Mon, 27 Sep 2004 15:57:33 -0400 (EDT)
Subject: [Twisted-Python] Async reverse DNS lookup?
In-Reply-To: <Pine.LNX.4.53.0409270102580.26110@a.shell.peak.org>
References: <200409251331.12841.uwe@oss4u.com>
	<Pine.LNX.4.53.0409251614280.11872@a.shell.peak.org>
	<200409260159.46806.uwe@oss4u.com>
	<Pine.LNX.4.53.0409270102580.26110@a.shell.peak.org>
Message-ID: <Pine.LNX.4.56.0409271554100.10851@klondike.cis.upenn.edu>

I'm currently using socket.gethostbyaddr(ip), and sometimes it will block
my program for quite a while. What's the correct way to do this in
twisted? Do I have to create a thread for that? Thanks!
Yun




From exarkun at divmod.com  Mon Sep 27 15:03:30 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Mon, 27 Sep 2004 21:03:30 GMT
Subject: [Twisted-Python] Async reverse DNS lookup?
In-Reply-To: <Pine.LNX.4.56.0409271554100.10851@klondike.cis.upenn.edu>
Message-ID: <20040927210330.29723.1840318759.divmod.quotient.6767@ohm>

On Mon, 27 Sep 2004 15:57:33 -0400 (EDT), Yun Mao <maoy at cis.upenn.edu> wrote:
>I'm currently using socket.gethostbyaddr(ip), and sometimes it will block
> my program for quite a while. What's the correct way to do this in
> twisted? Do I have to create a thread for that? Thanks!
> Yun
> 

  from twisted.names import client
  from twisted.python import util, log
  from twisted.internet import reactor

  addr = '198.49.126.190'
  ptr = '.'.join(addr.split('.')[::-1]) + '.in-addr.arpa'
  client.lookupPointer(ptr
      ).addCallback(lambda (ans, auth, add): util.println(ans[0].payload.name)
      ).addErrback(log.err
      ).addBoth(lambda r: reactor.stop()
      )
  reactor.run()

  Jp



From maoy at cis.upenn.edu  Mon Sep 27 16:17:02 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Mon, 27 Sep 2004 18:17:02 -0400 (EDT)
Subject: [Twisted-Python] Async reverse DNS lookup?
In-Reply-To: <20040927210330.29723.1840318759.divmod.quotient.6767@ohm>
References: <20040927210330.29723.1840318759.divmod.quotient.6767@ohm>
Message-ID: <Pine.LNX.4.56.0409271811300.10851@klondike.cis.upenn.edu>

Thank you!

Continuing on the topic of DNS lookup, does the default setting call
socket.gethostbyname() when each time I do connectTCP()? I also noticed
that my program is not responsive when DNS operation took a long time to
finish.

I took a short look into the code:  the base.py says that if self.resovler
is None then it will call _internalResolve(), which calls gethostbyname().
If I am right, how to set the default resolver?

Yun


On Mon, 27 Sep 2004 exarkun at divmod.com wrote:

> On Mon, 27 Sep 2004 15:57:33 -0400 (EDT), Yun Mao <maoy at cis.upenn.edu> wrote:
> >I'm currently using socket.gethostbyaddr(ip), and sometimes it will block
> > my program for quite a while. What's the correct way to do this in
> > twisted? Do I have to create a thread for that? Thanks!
> > Yun
> >
>
>   from twisted.names import client
>   from twisted.python import util, log
>   from twisted.internet import reactor
>
>   addr = '198.49.126.190'
>   ptr = '.'.join(addr.split('.')[::-1]) + '.in-addr.arpa'
>   client.lookupPointer(ptr
>       ).addCallback(lambda (ans, auth, add): util.println(ans[0].payload.name)
>       ).addErrback(log.err
>       ).addBoth(lambda r: reactor.stop()
>       )
>   reactor.run()
>
>   Jp
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at divmod.com  Mon Sep 27 19:32:17 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 28 Sep 2004 01:32:17 GMT
Subject: [Twisted-Python] Async reverse DNS lookup?
In-Reply-To: <Pine.LNX.4.56.0409271811300.10851@klondike.cis.upenn.edu>
Message-ID: <20040928013217.29723.1681491466.divmod.quotient.6887@ohm>

On Mon, 27 Sep 2004 18:17:02 -0400 (EDT), Yun Mao <maoy at cis.upenn.edu> wrote:
>Thank you!
> 
> Continuing on the topic of DNS lookup, does the default setting call
> socket.gethostbyname() when each time I do connectTCP()? I also noticed
> that my program is not responsive when DNS operation took a long time to
> finish.
> 
> I took a short look into the code:  the base.py says that if self.resovler
> is None then it will call _internalResolve(), which calls gethostbyname().
> If I am right, how to set the default resolver?
> 
> Yun
> 

  The reactor has a method, "installResolver", which you can pass an object which impleemnts IResolverSimple.  twisted.names.client.theResolver should be usable in this capacity.  It is little tested, as most people simply accept the default blocking lookup behavior, so there may be problems.  If you run across any, please give a shout :)  I'm more than happy to attempt to fix them.

  Jp




From maoy at cis.upenn.edu  Mon Sep 27 20:02:40 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Mon, 27 Sep 2004 22:02:40 -0400 (EDT)
Subject: [Twisted-Python] Async reverse DNS lookup?
In-Reply-To: <20040928013217.29723.1681491466.divmod.quotient.6887@ohm>
References: <20040928013217.29723.1681491466.divmod.quotient.6887@ohm>
Message-ID: <Pine.LNX.4.56.0409272159290.10851@klondike.cis.upenn.edu>

I care about this problem because I'm using twisted in a unstable network,
which is suppose to be up and down often.

I took a look, and felt that the ThreadedResolver looks simple and stable.
I'll give it a shot. Thanks.

Yun


On Tue, 28 Sep 2004 exarkun at divmod.com wrote:

>
>   The reactor has a method, "installResolver", which you can pass an
> object which impleemnts IResolverSimple.
> twisted.names.client.theResolver should be usable in this capacity.  It
> is little tested, as most people simply accept the default blocking
> lookup behavior, so there may be problems.  If you run across any,
> please give a shout :)  I'm more than happy to attempt to fix them.
>
>   Jp
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From maoy at cis.upenn.edu  Mon Sep 27 21:46:47 2004
From: maoy at cis.upenn.edu (Yun Mao)
Date: Mon, 27 Sep 2004 23:46:47 -0400 (EDT)
Subject: [Twisted-Python] how to get peer IP address in xmlrpc?
In-Reply-To: <Pine.LNX.4.56.0409272159290.10851@klondike.cis.upenn.edu>
References: <20040928013217.29723.1681491466.divmod.quotient.6887@ohm>
	<Pine.LNX.4.56.0409272159290.10851@klondike.cis.upenn.edu>
Message-ID: <Pine.LNX.4.56.0409272344570.10851@klondike.cis.upenn.edu>

Hi twisted folks,

where is the transport class in a twisted.xml.XMLRPC so that I can call
getPeer() to get the IP and port? Or, is there another way to do this?
Thx.

Yun




From daedalus at eigenmagic.com  Tue Sep 28 03:54:54 2004
From: daedalus at eigenmagic.com (Justin Warren)
Date: Tue, 28 Sep 2004 19:54:54 +1000
Subject: [Twisted-Python] BEEPy 0.5 released
Message-ID: <1096365294.26216.31.camel@snafu.melbourne.eigenmagic.net>

Hey folks,

Hope you don't mind my posting this here. I've just released version 0.5
of BEEPy which is an implemention of the Blocks Extensible Exchange
Protocol (BEEP), written using twisted and released under the LGPL.

Check it out if you're so inclined.

-- 
Justin Warren <daedalus at eigenmagic.com>




From selwyn.mccracken at stonebow.otago.ac.nz  Tue Sep 28 05:08:17 2004
From: selwyn.mccracken at stonebow.otago.ac.nz (Selwyn McCracken)
Date: Tue, 28 Sep 2004 23:08:17 +1200
Subject: [Twisted-Python] adding etag and modified arguments to twisted
	feedparser 
Message-ID: <41594621.9000804@stonebow.otago.ac.nz>

hi,

I am having trouble modifying the twisted-based rss aggregator from the 
python cookbook so that feedparser can make use of the update related 
arguments of 'etag' and 'modified' and save bandwith.

(see http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277099)

I realise that the problem is deferred related, but I can't seem to 
resolve the problem, even after reading the deferred documentation.

Anyway, the series of deferred functions that I think are relevant are:

1) def getPage(self, data, args): #args is the rss feed link
         return client.getPage(args,timeout=TIMEOUT)


2) def parseFeed(self, feed):
	parsed = feedparser.parse(cStringIO.StringIO(feed))

The problem is that getPage() requests the entire rss feed, and then 
passes the stream through to feedparser.parse. Normally however, 
feedparser.parse() takes furthers arguments of 'etag' and 'modified' so 
that only new feed information is returned, thereby saving bandwidth.

I tried modifying getPage() to return feedparser.parse(args), but it 
runs substantially slower than the original method, I presume in a 
synchronous manner.

Any assistance would be greatly appreciated.

cheers,
Selwyn




From exarkun at divmod.com  Tue Sep 28 07:14:47 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 28 Sep 2004 13:14:47 GMT
Subject: [Twisted-Python] adding etag and modified arguments to twisted
	feedparser 
In-Reply-To: <41594621.9000804@stonebow.otago.ac.nz>
Message-ID: <20040928131447.29723.176798352.divmod.quotient.7177@ohm>

On Tue, 28 Sep 2004 23:08:17 +1200, Selwyn McCracken <selwyn.mccracken at stonebow.otago.ac.nz> wrote:
>hi,
> 
> I am having trouble modifying the twisted-based rss aggregator from the 
> python cookbook so that feedparser can make use of the update related 
> arguments of 'etag' and 'modified' and save bandwith.
> 
> [snip]

  Hi Selwyn,

    You may want to ask this question on the twisted-web mailing list.

  Jp



From thomas.weholt at gmail.com  Tue Sep 28 07:32:09 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Tue, 28 Sep 2004 15:32:09 +0200
Subject: [Twisted-Python] Serving files from other web-servers on a
	web-server
Message-ID: <ffb7b7f804092806322f3c2730@mail.gmail.com>

Hi,

I got a subnett full of web-servers using twisted and a main
web-server based on twisted as well. The main server is available to
the outside world. I want to serve files on the other web-servers on
the subnett thru the main web-server. There may be many concurrent
users on the main server so it has to be able to handle many clients.

A few users connect to the main server, requesting files on the
subnett web-servers. The main server reads data from several subnett
servers and writes the data back to the requesting clients. How can I
do this in twisted, without blocking, and handle several clients?
We're not talking hardcore P2P here with thousands of clients, most
likely 2-5 concurrent users, 10 at the most.

Any hints? Or doesn't this make any sense?

-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From itamar at itamarst.org  Tue Sep 28 08:12:51 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 28 Sep 2004 10:12:51 -0400
Subject: [Twisted-Python] how to get peer IP address in xmlrpc?
In-Reply-To: <Pine.LNX.4.56.0409272344570.10851@klondike.cis.upenn.edu>
References: <20040928013217.29723.1681491466.divmod.quotient.6887@ohm>
	<Pine.LNX.4.56.0409272159290.10851@klondike.cis.upenn.edu>
	<Pine.LNX.4.56.0409272344570.10851@klondike.cis.upenn.edu>
Message-ID: <1096380771.22248.2.camel@sheriffpony>

On Mon, 2004-09-27 at 23:46, Yun Mao wrote:

> where is the transport class in a twisted.xml.XMLRPC so that I can call
> getPeer() to get the IP and port? Or, is there another way to do this?
> Thx.

Make a wrapper resource that provides this to the xmlrpc resource. In
any case, web questions probably belong on the twisted-web mailing list.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From exarkun at divmod.com  Tue Sep 28 08:58:50 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 28 Sep 2004 14:58:50 GMT
Subject: [Twisted-Python] Serving files from other web-servers on a
	web-server
In-Reply-To: <ffb7b7f804092806322f3c2730@mail.gmail.com>
Message-ID: <20040928145850.29723.918582170.divmod.quotient.7221@ohm>

On Tue, 28 Sep 2004 15:32:09 +0200, Thomas Weholt <thomas.weholt at gmail.com> wrote:
>Hi,
> 
> I got a subnett full of web-servers using twisted and a main
> web-server based on twisted as well. The main server is available to
> the outside world. I want to serve files on the other web-servers on
> the subnett thru the main web-server. There may be many concurrent
> users on the main server so it has to be able to handle many clients.
> 
> A few users connect to the main server, requesting files on the
> subnett web-servers. The main server reads data from several subnett
> servers and writes the data back to the requesting clients. How can I
> do this in twisted, without blocking, and handle several clients?
> We're not talking hardcore P2P here with thousands of clients, most
> likely 2-5 concurrent users, 10 at the most.
> 
> Any hints? Or doesn't this make any sense?

  Hi Thomas,

    You may want to use distrib or one of the proxy classes.  Please direct further questions to the twisted-web mailing list.

  Jp



From smadi at power.eng.mcmaster.ca  Tue Sep 28 14:21:38 2004
From: smadi at power.eng.mcmaster.ca (m. smadi)
Date: Tue, 28 Sep 2004 16:21:38 -0400
Subject: [Twisted-Python] new to twisted
Message-ID: <4159C7D2.4090706@power.eng.mcmaster.ca>

hi;

i was writing third party sip call controller when a friend suggested i 
use twisted.  I think it will save me a lot of time, but i had trouble 
with the following when installing:
cvs the pserial and pcrypto required package.  the cvs server complians 
about a wrong password (any hints)

i continued without these package and installed using setup.py.  Where 
is a good place to start (the tutorial provided is not really very 
great) - any other suggestions?

moe smadi



From selwyn.mccracken at stonebow.otago.ac.nz  Tue Sep 28 15:44:32 2004
From: selwyn.mccracken at stonebow.otago.ac.nz (Selwyn McCracken)
Date: Wed, 29 Sep 2004 09:44:32 +1200
Subject: [Twisted-Python] adding etag and modified arguments to twisted
	feedparser
In-Reply-To: <20040928131447.29723.176798352.divmod.quotient.7177@ohm>
References: <20040928131447.29723.176798352.divmod.quotient.7177@ohm>
Message-ID: <4159DB40.7020000@stonebow.otago.ac.nz>

sorry, and thanks

exarkun at divmod.com wrote:
> On Tue, 28 Sep 2004 23:08:17 +1200, Selwyn McCracken <selwyn.mccracken at stonebow.otago.ac.nz> wrote:
> 
>>hi,
>>
>>I am having trouble modifying the twisted-based rss aggregator from the 
>>python cookbook so that feedparser can make use of the update related 
>>arguments of 'etag' and 'modified' and save bandwith.
>>
>>[snip]
> 
> 
>   Hi Selwyn,
> 
>     You may want to ask this question on the twisted-web mailing list.
> 
>   Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From exarkun at divmod.com  Tue Sep 28 17:22:36 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Tue, 28 Sep 2004 23:22:36 GMT
Subject: [Twisted-Python] new to twisted
In-Reply-To: <4159C7D2.4090706@power.eng.mcmaster.ca>
Message-ID: <20040928232236.29723.417593103.divmod.quotient.7457@ohm>

On Tue, 28 Sep 2004 16:21:38 -0400, "m. smadi" <smadi at power.eng.mcmaster.ca> wrote:
>hi;
> 
> i was writing third party sip call controller when a friend suggested i 
> use twisted.  I think it will save me a lot of time, but i had trouble 
> with the following when installing:
> cvs the pserial and pcrypto required package.  the cvs server complians 
> about a wrong password (any hints)

  Twisted doesn't use CVS anymore.  You want to download the released version, 1.3.0, or the packaged version for your platform, or use SVN to check it out.

  PySerial and PyCrypto are optional.  As long as you're only interested SIP, you won't miss them.

> 
> i continued without these package and installed using setup.py.  Where 
> is a good place to start (the tutorial provided is not really very 
> great) - any other suggestions?

  The IRC channel (#twisted / irc.freenode.net), the mailing list, the source code.  I doubt you'll find much documentation on using the SIP code, beyond the automatically generated API documents.  Reading the UDP howto and the cred howto is probably a good start, since SIP relies on both of those aspects of Twisted.

  Jp




From uwe at oss4u.com  Tue Sep 28 18:50:59 2004
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Tue, 28 Sep 2004 17:50:59 -0700
Subject: [Twisted-Python] PB release connection
In-Reply-To: <200409251331.12841.uwe@oss4u.com>
References: <200409251331.12841.uwe@oss4u.com>
Message-ID: <200409281750.59862.uwe@oss4u.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Ok, I have to answer this one myself (after 2 days....)
It's not easy to release a connection from the server side since the avatar 
object retains no reference to the underlying transport.
What I did now is subclass the pb.Avatar class and add the line

self.broker=broker
to the perspectiveMessageReceived method.

Not a nice solution, but it works. After the first message that came thru the 
socket (in my case) you can call
self.broker.transport.loseConnection()
in your usual "perspective" (which needs to implement the modified Avatar 
class).

If you're using a pb.Root object you can overwrite the rootObject method to 
retain a reference to the broker instance (meaning subclass the flavor.Root 
class with a modified rootObject method and use this new root class as 
argument to the ServerFactory)

Hope that saves someone a day of digging in the sources.

Uwe

On Saturday 25 September 2004 01:31 pm, Uwe C. Schroeder wrote:
> Hi,
>
> after browsing the docs,api and mailinglist I couldn't find what I'm
> looking for. I'm using a simple pb server with a pb.Root object (don't need
> authentication). What I want to do is release the connection from the
> server-side. Server code looks like:
>
> class MyPerspective(pb.Root):
> 	....
> 	....
>
>
> main:
> reactor.listenTCP(port,pb.PBServerFactory(MyPerspective(self)))
>
>
> so far so good. MyPerspective receives all the remote_ calls. Now I'd like
> to be able to get rid of a specific client (which holds a remote-reference
> to MyPerspective). With the old pb api there was a way to do call
> perspective.broker.transport.loseConnection(), which I was using on the
> client side to end the connection.
>
> I can't see anything like this with the new API that would allow me to
> initiate the "kick off" from the server side.
>
> Can this be done? What would be the propper way to release a connection
> from the server side?
>
> Thanks for any enlightenment.
>
> 	Uwe

- -- 
	UC

- --
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3 (GNU/Linux)

iD8DBQFBWgbzjqGXBvRToM4RAtmRAJ9FaV9+6S46hbzw1HMj1BmXkLJUygCePlf0
TXAB+B5mDgndRz1M/mAWxEA=
=K25y
-----END PGP SIGNATURE-----




From zanesdad at bellsouth.net  Wed Sep 29 07:02:22 2004
From: zanesdad at bellsouth.net (Jeremy Jones)
Date: Wed, 29 Sep 2004 09:02:22 -0400
Subject: [Twisted-Python] new to twisted
In-Reply-To: <4159C7D2.4090706@power.eng.mcmaster.ca>
References: <4159C7D2.4090706@power.eng.mcmaster.ca>
Message-ID: <415AB25E.2040701@bellsouth.net>

m. smadi wrote:

> hi;
>
> i was writing third party sip call controller when a friend suggested 
> i use twisted.  I think it will save me a lot of time, but i had 
> trouble with the following when installing:
> cvs the pserial and pcrypto required package.  the cvs server 
> complians about a wrong password (any hints)
>
> i continued without these package and installed using setup.py.  Where 
> is a good place to start (the tutorial provided is not really very 
> great) - any other suggestions?
>
> moe smadi
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

I wonder if Shtoom will be of any assistance to you.  Check out 
http://www.divmod.org/Home/Projects/Shtoom/  From the webpage:

"""

Shtoom is a open-source, cross-platform VoIP softphone, implemented in 
Python. As well as the basic phone, the package also includes a number 
of other applications -

    * shtoom - the end-user phone
    * shtam - a simple answering machine/voicemail application
    * shmessage - an announcement server

"""

It uses Twisted.  Not sure to what extent, though.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040929/1843deac/attachment.html>

From tom.dyson at torchbox.com  Wed Sep 29 09:22:32 2004
From: tom.dyson at torchbox.com (tom dyson)
Date: Wed, 29 Sep 2004 16:22:32 +0100
Subject: [Twisted-Python] Communicating between listeners
Message-ID: <622628E9-122B-11D9-887F-0003938AE36A@torchbox.com>

I'm new to Twisted, and network programming in general. Can anyone 
provide an example that might help me code the following functionality:

* Server listens on two ports, one TCP, one UDP
* Incoming UDP datagrams contain an identifying string
* A message is broadcast to all connected TCP clients whose username 
matches the UDP ID.

In particular, I can't work out how to access details of the current 
TCP clients - and trigger a new message to some of them - from the UDP 
listener.

Many thanks

Tom

-----------------+
tom dyson
t: +44 (0)1608 811870
m: +44 (0)7958 752657
http://torchbox.com




From exarkun at divmod.com  Wed Sep 29 11:28:30 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 29 Sep 2004 17:28:30 GMT
Subject: [Twisted-Python] Communicating between listeners
In-Reply-To: <622628E9-122B-11D9-887F-0003938AE36A@torchbox.com>
Message-ID: <20040929172830.29723.26053217.divmod.quotient.7911@ohm>

On Wed, 29 Sep 2004 16:22:32 +0100, tom dyson <tom.dyson at torchbox.com> wrote:
>I'm new to Twisted, and network programming in general. Can anyone 
> provide an example that might help me code the following functionality:
> 
> * Server listens on two ports, one TCP, one UDP
> * Incoming UDP datagrams contain an identifying string
> * A message is broadcast to all connected TCP clients whose username 
> matches the UDP ID.
> 
> In particular, I can't work out how to access details of the current 
> TCP clients - and trigger a new message to some of them - from the UDP 
> listener.
> 
> Many thanks

  Something like this, perhaps:

    from twisted.internet import protocol, reactor
    from twisted.application import service

    class SomeFactory(protocol.ServerFactory):
        def __init__(self, service):
            self.service = service

        def buildProtocol(self, addr):
            p = protocol.ServerFactory.buildProtocol(self, addr)
            self.service.addClient(p)
            return p

    class SomeDatagramProtocol(protocol.DatagramProtocol):
        def __init__(self, service):
            self.service = service

        def datagramReceived(self, dgram, addr):
            id, msg = extractStuff(dgram)
            self.service.broadcastMessage(id, msg)

    class FoobleService(service.Service):
        def startService(self):
            udpP = SomeDatagramProtocol(self)
            self.udpPort = reactor.listenUDP(..., udpP)
            tcpF = SomeFactory(self)
            self.tcpPort = reactor.listenTCP(..., tcpF)
            self.clients = []

        def stopService(self):
            self.udpPort.stopListening()
            self.tcpPort.stopListening()
            del self.udpPort, self.tcpPort

        # The interesting bit
        def addClient(self, proto):
            self.clients.append(proto)

        def broadcastMessage(self, id, msg):
            for c in self.clients:
                if c.id == id:
                    c.sendMessage(msg)

  In other words, construct a system for tracking clients, based on the callbacks Twisted does provide, and then access those clients as desired.  Cleaning up after clients which drop their connection is left as an exercise for the reader.

  Jp




From dchesmore at mcleodusa.com  Wed Sep 29 13:37:48 2004
From: dchesmore at mcleodusa.com (Chesmore, Daniel R.)
Date: Wed, 29 Sep 2004 14:37:48 -0500
Subject: [Twisted-Python] RE: Twisted-Python Digest, Vol 6, Issue 37
Message-ID: <A71A102F102594419C79D595A14A96AE013CB697@iacedexch09.mcld.net>

Has anyone started making a yahoo client like the aim and msn client that is
in twisted? 

Daniel Chesmore 
Systems Admin
E-Mail: dchesmore at mcleodusa.com 
Web Site: http://www.mcleodusa.com




NOTICE: This electronic mail transmission may contain confidential
information and is intended only for the person(s) named.  Any use, copying
or disclosure by any other person is strictly prohibited. If you have
received this transmission in error, please notify the sender via e-mail.






From thomas.weholt at gmail.com  Wed Sep 29 15:47:37 2004
From: thomas.weholt at gmail.com (Thomas Weholt)
Date: Wed, 29 Sep 2004 23:47:37 +0200
Subject: [Twisted-Python] Problems using Twisted adbapi
Message-ID: <ffb7b7f80409291447776b6f47@mail.gmail.com>

Hi,

My code below is an attempt to write a general database-abstraction
layer for Twisted. I got one allready supporting SQLite and MySQL (
MSSQL and PostgreSQL in the works ) but it blocks and doesn't use
deffereds etc so I thought I'd try to write one that fits better with
the Twisted framework. It will mainly be used in web-applications. The
basic example is ( and don't laugh, this is my first attempt at using
deferreds etc. ) :

from twisted.enterprise import adbapi

class TestConn:

    def __init__(self, dbname):
        self.dbname = dbname
        self.dbpool = adbapi.ConnectionPool("sqlite", db=dbname)

    def returnOk(self, o):
        return True

    def returnFailure(self, o):
        return False

    def returnResult(self, result):
        return result

    def _returnResult(self, deferred, count = None):
        if count:
            return self.dbpool.fetchmany(count)
        else:
            return self.dbpool.fetchall()

    def execSql(self, sql, params = {}):
        def run(sql, params):
            return self.dbpool.runQuery(sql, params)
        d = run(sql, params)
        d.addCallback(self._returnResult)
        d.addErrback(self.returnFailure)
        d.addCallback(self.returnResult)

    def fetch(self, sql, params = {}):
        def run(sql, params):
            return self.dbpool.runQuery(sql, params)
        d = run(sql, params)
        d.addCallback(self.returnResult)
        d.addErrback(self.returnFailure)

s = TestConn(r'c:\temp\db1.db')
print s.execSql('create table table1 (a int, b int)')
print s.execSql('insert into table1 (a,b) values (1,1)')
print s.execSql('insert into table1 (a,b) values (1,2)')
print s.execSql('insert into table1 (a,b) values (2,2)')
print s.fetch('select * from table1')
print s.fetch('select a from table1')

And the result is :

None
None
None
None
None
None

Why ??? What I want is a general purpose "connection"-class which can
execute queries and fetch data from a database, without having to
create special methods returning deferreds, adding callbacks etc. to
get the result of the query.

-- 
Mvh/Best regards,
Thomas Weholt
http://www.weholt.org



From exarkun at divmod.com  Wed Sep 29 16:12:04 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Wed, 29 Sep 2004 22:12:04 GMT
Subject: [Twisted-Python] Problems using Twisted adbapi
In-Reply-To: <ffb7b7f80409291447776b6f47@mail.gmail.com>
Message-ID: <20040929221204.29723.1831406569.divmod.quotient.8046@ohm>

On Wed, 29 Sep 2004 23:47:37 +0200, Thomas Weholt <thomas.weholt at gmail.com> wrote:
>Hi,
> 
> My code below is an attempt to write a general database-abstraction
> layer for Twisted. I got one allready supporting SQLite and MySQL (
> MSSQL and PostgreSQL in the works ) but it blocks and doesn't use
> deffereds etc so I thought I'd try to write one that fits better with
> the Twisted framework. It will mainly be used in web-applications. The
> basic example is ( and don't laugh, this is my first attempt at using
> deferreds etc. ) :

  Hey Thomas,

    I think you're pretty close.  See below for a couple minor code changes.

> 
> from twisted.enterprise import adbapi
> 
> class TestConn:
> 
>     def __init__(self, dbname):
>         self.dbname = dbname
>         self.dbpool = adbapi.ConnectionPool("sqlite", db=dbname)
> 
>     def returnOk(self, o):
>         return True
> 
>     def returnFailure(self, o):
>         return False
> 
>     def returnResult(self, result):
>         return result
> 
>     def _returnResult(self, deferred, count = None):
>         if count:
>             return self.dbpool.fetchmany(count)
>         else:
>             return self.dbpool.fetchall()
> 
>     def execSql(self, sql, params = {}):
>         def run(sql, params):
>             return self.dbpool.runQuery(sql, params)
>         d = run(sql, params)
>         d.addCallback(self._returnResult)
>         d.addErrback(self.returnFailure)
>         d.addCallback(self.returnResult)
          return d
> 
>     def fetch(self, sql, params = {}):
>         def run(sql, params):
>             return self.dbpool.runQuery(sql, params)
>         d = run(sql, params)
>         d.addCallback(self.returnResult)
>         d.addErrback(self.returnFailure)
          return d
> 
> s = TestConn(r'c:\temp\db1.db')
> print s.execSql('create table table1 (a int, b int)')
> print s.execSql('insert into table1 (a,b) values (1,1)')
> print s.execSql('insert into table1 (a,b) values (1,2)')
> print s.execSql('insert into table1 (a,b) values (2,2)')
> print s.fetch('select * from table1')
> print s.fetch('select a from table1')
> 

  With the two added returns, you should no longer see None in the output, although you will also not see your actual results.  I think this is what you expected, though.

  Jp



From slyphon at twistedmatrix.com  Wed Sep 29 23:25:43 2004
From: slyphon at twistedmatrix.com (Jonathan Simms)
Date: Thu, 30 Sep 2004 01:25:43 -0400
Subject: [Twisted-Python] Seeking Twisted/Python Contractors
In-Reply-To: <20040924205835.GA89572@prometheusresearch.com>
References: <20040924205835.GA89572@prometheusresearch.com>
Message-ID: <415B98D7.8090502@twistedmatrix.com>



Mr. Evans,

Hello, my name is Jonathan Simms, and I've been part of the Twisted core
team for a little over a year, and have worked for the Divmod
Corporation for ten months.

While working for Divmod, I wrote a web-based functional testing
framework to automate testing of their web application, Quotient. It
consisted of an HTTP client, a dom-parsing/inspection API, and a
test-descriptiopn API called "Navtags" that allowed a person to specify
the steps that the tests were to take traversing the site and the
assertions to be made without having to write nasty deferred callback
code. I wrote Divmod's release scripts, several repository-management
scripts, performance-statistics collection and stress testing code,
automated/remote application management code, and documentation pieces
for the developers.

I am currently refactoring the Twisted test framework, trial, and have
succeeded in making it three to four times faster than the current
version in Twisted's svn-trunk. It is now also easily extensible, and
will be integrated more tightly with Brian Warner's Buildbot program.
I have written tutorials on twisted, one of which was a step-by-step
tutorial on how to create a web application using the (now deprecated)
woven package. Another one, which is still in the works, deals with the
new zope.interface component system.

I have been working as part of a distributed team for almost a year now.
I am a competent programmer, a talented communicator, motivated, and I am
available immediately.

If it makes a difference, I have a Bachelor of Science degree in
Computer Science from the State University of New York.

If you need references, you can speak with Glyph Lefkowitz
(glyph at divmod.com) or JP Calderone (exarkun at divmod.com), either of whom
can speak for both the quality of my code, and my dedication to my work.

I would be very interested in talking with you further about what kind
of projects you have.

Thank You,

Jonathan Simms
slyphon at twistedmatrix.com






From behnel_ml at gkec.informatik.tu-darmstadt.de  Thu Sep 30 02:12:18 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Thu, 30 Sep 2004 10:12:18 +0200
Subject: [Twisted-Python] twisted.internet and IPv6
Message-ID: <415BBFE2.1090401@gkec.informatik.tu-darmstadt.de>

Hi!

I'm curious: how much work would it be to enable IPv6 support in twisted.internet?

When I do

---------------------------------------
cd twisted/internet
fgrep INET *.py
---------------------------------------

I get a number of references to IPv4 that make me believe that t.i.* is not quite IPv6 clean by itself:

---------------------------------------
default.py:        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
default.py:        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
javareactor.py:        return ('INET', InetAddress.getLocalHost().getHostAddress(), self.jport.port)
javareactor.py:        return ('INET', addr.getHostAddress(), self.skt.getPort())
javareactor.py:        return ("INET", self.host, self.port)
tcp.py:    addressFamily = socket.AF_INET
tcp.py:        return address.IPv4Address('TCP', *(self.socket.getsockname() + ('INET',)))
tcp.py:        return address.IPv4Address('TCP', *(self.addr + ('INET',)))
tcp.py:        return address.IPv4Address('TCP', *(self.socket.getsockname() + ('INET',)))
tcp.py:        return address.IPv4Address('TCP', *(self.client + ('INET',)))
tcp.py:    addressFamily = socket.AF_INET
tcp.py:        return address.IPv4Address('TCP', *(self.socket.getsockname() + ('INET',)))
tcp.py:        return address.IPv4Address('TCP', self.host, self.port, 'INET')
udp.py:    addressFamily = socket.AF_INET
udp.py:        return address.IPv4Address('UDP', *(self.socket.getsockname() + ('INET_UDP',)))
udp.py:        Returns a tuple of ('INET_UDP', hostname, port), indicating
udp.py:        return address.IPv4Address('UDP', self.remotehost, self.remoteport, 'INET_UDP')
---------------------------------------

What would be needed? Would a new reactor be a good solution? "reactor6" ? Or rather extending the current one?

I'd say a reactor6 would be cleaner, but on the other hand, a simple flag could do the trick from the API perspective.

Any comments on this?

Stefan




From dialtone at gmail.com  Thu Sep 30 03:24:20 2004
From: dialtone at gmail.com (Valentino Volonghi)
Date: Thu, 30 Sep 2004 11:24:20 +0200
Subject: [Twisted-Python] twisted.internet and IPv6
In-Reply-To: <415BBFE2.1090401@gkec.informatik.tu-darmstadt.de>
References: <415BBFE2.1090401@gkec.informatik.tu-darmstadt.de>
Message-ID: <c893b85304093002245477a208@mail.gmail.com>

On Thu, 30 Sep 2004 10:12:18 +0200, Stefan Behnel
<behnel_ml at gkec.informatik.tu-darmstadt.de> wrote:
> Hi!
> 
> I'm curious: how much work would it be to enable IPv6 support in twisted.internet?

> I get a number of references to IPv4 that make me believe that t.i.* is not quite IPv6 clean by itself:

> What would be needed? Would a new reactor be a good solution? "reactor6" ? Or rather extending the current one?
> 
> I'd say a reactor6 would be cleaner, but on the other hand, a simple flag could do the trick from the API perspective.
> 
> Any comments on this?

That a new reactor would solve nothing since the reactor is not the
responsible for connections. Connection.py and tcp.py are the modules
you are looking for (those that create the connection).

Also there's a problem if you only write a new reactor, that IPv6
couldn't be used in other reactors, which is bad :).

I'd rather hack on tcp.py and Connection.py and address.py (all in
twisted.internet).

Those sockets that you see in default.py are to wake up the main
thread under windows IIRC.

Since Twisted is very layered what happens at a lower level is
actually unknown to the upper layers. So yes, twisted is not yet ready
for IPv6, but implementing it won't brake anything (unless you use
IPv6 by default).

Maybe providing connectTCP6 could be a solution.

-- 
Valentino Volonghi aka Dialtone
Linux User #310274, Proud Gentoo User
Blog: http://vvolonghi.blogspot.com
Home Page: http://xoomer.virgilio.it/dialtone/



From exarkun at divmod.com  Thu Sep 30 07:19:35 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Thu, 30 Sep 2004 13:19:35 GMT
Subject: [Twisted-Python] twisted.internet and IPv6
In-Reply-To: <415BBFE2.1090401@gkec.informatik.tu-darmstadt.de>
Message-ID: <20040930131935.29723.282179053.divmod.quotient.8399@ohm>

On Thu, 30 Sep 2004 10:12:18 +0200, Stefan Behnel <behnel_ml at gkec.informatik.tu-darmstadt.de> wrote:
>Hi!
> 
> I'm curious: how much work would it be to enable IPv6 support in twisted.internet?
> 

  Not very much.  About a year ago, I wrote this:

    http://cvs.twistedmatrix.com/cvs/trunk/sandbox/exarkun/ipv6.py?view=markup&rev=10540&root=Twisted

  This is no longer how I'd like to see IPv6 supported in Twisted, but it gives an idea of how few changes are required.

  Jp



From simon at hedberg.net  Thu Sep 30 12:46:41 2004
From: simon at hedberg.net (Simon)
Date: Thu, 30 Sep 2004 20:46:41 +0200
Subject: [Twisted-Python] Problems using Twisted adbapi
In-Reply-To: <E1CD5Dq-0007cJ-01@pyramid.twistedmatrix.com>
Message-ID: <000001c4a71d$d397af00$456271d5@hp>

In response to Thomas Weholts question regarding writing a general
database-abstraction layer for Twisted I thought I'd share this with you
all. I have made a rewrite of the adbapi to use ADOdb for Python
(http://adodb.sourceforge.net/#pydownload). It seems to be working fine
but I haven't really tested it since I just finished it yesterday.
Let me know of this is something that sounds useful to any of you. 
I'm also thinking of doing a rewrite of the sqlreflector and rowobject
to support a more dynamic type checking and validation.
Since I'm quite new in this community I don't really know what has been
done before and not. So any input is appreciated.

Cheers,
Simon




From dave at krondo.com  Thu Sep 30 14:03:16 2004
From: dave at krondo.com (Dave Peticolas)
Date: Thu, 30 Sep 2004 13:03:16 -0700
Subject: [Twisted-Python] Problems using Twisted adbapi
In-Reply-To: <000001c4a71d$d397af00$456271d5@hp>
References: <000001c4a71d$d397af00$456271d5@hp>
Message-ID: <1096574596.18124.52.camel@oneiros>

On Thu, 2004-09-30 at 11:46, Simon wrote:
> In response to Thomas Weholts question regarding writing a general
> database-abstraction layer for Twisted I thought I'd share this with you
> all. I have made a rewrite of the adbapi to use ADOdb for Python
> (http://adodb.sourceforge.net/#pydownload). It seems to be working fine
> but I haven't really tested it since I just finished it yesterday.
> Let me know of this is something that sounds useful to any of you. 
> I'm also thinking of doing a rewrite of the sqlreflector and rowobject
> to support a more dynamic type checking and validation.
> Since I'm quite new in this community I don't really know what has been
> done before and not. So any input is appreciated.

I'm not too familiar with ADOdb, what are the benefits?
By rewrite, do you mean that the new version only uses
ADOdb, or have you added ADOdb as a supported back-end?

sqlreflector and row could definitely use a reworking.
I don't think they are used much. I think people mainly
use adbapi and write their own object mapping system.
What sort of things did you have in mind?

dave





