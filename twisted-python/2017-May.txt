From twisted-python at 2xlp.com  Wed May  3 17:21:24 2017
From: twisted-python at 2xlp.com (jonathan vanasco)
Date: Wed, 3 May 2017 19:21:24 -0400
Subject: [Twisted-Python] process manager for twisted daemons?
Message-ID: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>


We have a few twisted daemons running on a linux machine under Supervisord as the process manager. Unfortunately, Supervisord is missing a feature that is pretty critical to our needs, so must be replaced with something that supports it -- the feature is the ability to persist state across reboots.

We've run into a situation more than once where we "stop" a Twisted service that caused issues, begun to triage it, and then the machine hits a reboot which causes the broken service to start up again and re-corrupts the data.  The only way to maintain a "stop" across reboots in Supervisor is to "stop", then edit the config files so it doesn't start up again.  If someone remembers to shut things off this way, they often forget to turn them back on again.  We're at the point where using supervisor in our stack has caused more problems than conveniences.

Is anyone deploying their twisted services with something other than Supervisor?  If so, I'd love to know.


From dawuud at riseup.net  Wed May  3 17:46:20 2017
From: dawuud at riseup.net (dawuud)
Date: Wed, 3 May 2017 23:46:20 +0000
Subject: [Twisted-Python] process manager for twisted daemons?
In-Reply-To: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
References: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
Message-ID: <20170503234620.GA4606@riseup.net>


why not use systemd to manage the daemon?

On Wed, May 03, 2017 at 07:21:24PM -0400, jonathan vanasco wrote:
> 
> We have a few twisted daemons running on a linux machine under Supervisord as the process manager. Unfortunately, Supervisord is missing a feature that is pretty critical to our needs, so must be replaced with something that supports it -- the feature is the ability to persist state across reboots.
> 
> We've run into a situation more than once where we "stop" a Twisted service that caused issues, begun to triage it, and then the machine hits a reboot which causes the broken service to start up again and re-corrupts the data.  The only way to maintain a "stop" across reboots in Supervisor is to "stop", then edit the config files so it doesn't start up again.  If someone remembers to shut things off this way, they often forget to turn them back on again.  We're at the point where using supervisor in our stack has caused more problems than conveniences.
> 
> Is anyone deploying their twisted services with something other than Supervisor?  If so, I'd love to know.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170503/5bc37ba6/attachment.sig>

From mithrandi at mithrandi.net  Wed May  3 17:46:58 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 03 May 2017 23:46:58 +0000
Subject: [Twisted-Python] process manager for twisted daemons?
In-Reply-To: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
References: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
Message-ID: <CAMcKhMS8npt2cGYeJHhZm5frz+eUJ89OMfSKWZ8WQ2PC=82+_A@mail.gmail.com>

On Thu, 4 May 2017 at 01:21 jonathan vanasco <twisted-python at 2xlp.com>
wrote:

> Is anyone deploying their twisted services with something other than
> Supervisor?  If so, I'd love to know.
>

It sounds like systemd has what you want here, and should work fine for
your Twisted services, assuming you don't have other constraints that
exclude its use.

systemctl stop <service> will temporarily stop a service, but it will be
restarted on boot if it was configured to do so. However, you can do systemctl
disable --now <service> which will remove the configuration to start it on
boot as well as stopping it. To reverse this, you would do systemctl enable
--now <service> which would reenable it and start it.

This is basically doing the same as you were doing with supervisord, but
since you can combine the operations into a single command, you don't have
to worry about forgetting to do half of the process.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170503/95adde31/attachment.html>

From twisted-python at 2xlp.com  Wed May  3 18:59:27 2017
From: twisted-python at 2xlp.com (jonathan vanasco)
Date: Wed, 3 May 2017 20:59:27 -0400
Subject: [Twisted-Python] process manager for twisted daemons?
In-Reply-To: <CAMcKhMS8npt2cGYeJHhZm5frz+eUJ89OMfSKWZ8WQ2PC=82+_A@mail.gmail.com>
References: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
 <CAMcKhMS8npt2cGYeJHhZm5frz+eUJ89OMfSKWZ8WQ2PC=82+_A@mail.gmail.com>
Message-ID: <CC02549B-24DF-4F74-BB5C-D797233EF0A2@2xlp.com>


On May 3, 2017, at 7:46 PM, Tristan Seligmann wrote:

> It sounds like systemd has what you want here, and should work fine for your Twisted services, assuming you don't have other constraints that exclude its use.

we were avoiding it because of a few reasons, but will need to rethink that now.  thanks!

From bra at fsn.hu  Thu May  4 06:04:02 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Thu, 4 May 2017 14:04:02 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
Message-ID: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>

Hi,

I would like to copy a file between two HTTP servers in the most 
efficient manner, which probably means a streaming down/upload (GET/PUT) 
with the producer/consumer scheme.

Can this be done easily, could somebody write a simple example?

Thanks,



From p.mayers at imperial.ac.uk  Thu May  4 07:04:13 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 4 May 2017 14:04:13 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
Message-ID: <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>

On 04/05/17 13:04, Nagy, Attila wrote:
> Hi,
> 
> I would like to copy a file between two HTTP servers in the most 
> efficient manner, which probably means a streaming down/upload (GET/PUT) 
> with the producer/consumer scheme.
> 
> Can this be done easily, could somebody write a simple example?

I guess it'll look something like this:

https://gist.github.com/philmayers/692d04c15a71d3905e075b30f0543f23

Only lightly tested, but seems to work. There's a lot of debugging print 
statements in the above code which can obviously be discarded or turned 
into logging statements in production use.


From bra at fsn.hu  Thu May  4 07:32:24 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Thu, 4 May 2017 15:32:24 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
Message-ID: <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>

On 05/04/2017 03:04 PM, Phil Mayers wrote:
> On 04/05/17 13:04, Nagy, Attila wrote:
>> Hi,
>>
>> I would like to copy a file between two HTTP servers in the most 
>> efficient manner, which probably means a streaming down/upload 
>> (GET/PUT) with the producer/consumer scheme.
>>
>> Can this be done easily, could somebody write a simple example?
>
> I guess it'll look something like this:
>
> https://gist.github.com/philmayers/692d04c15a71d3905e075b30f0543f23
>
> Only lightly tested, but seems to work. There's a lot of debugging 
> print statements in the above code which can obviously be discarded or 
> turned into logging statements in production use.
In the meantime I've started to write one and came out with this:
https://gist.github.com/bra-fsn/42e556ddd74ff34467b17b9a6d613b33

Are there any problems with this approach?


From burak.arslan at arskom.com.tr  Thu May  4 07:58:20 2017
From: burak.arslan at arskom.com.tr (Burak Arslan)
Date: Thu, 4 May 2017 16:58:20 +0300
Subject: [Twisted-Python] process manager for twisted daemons?
In-Reply-To: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
References: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
Message-ID: <0c4cd8e5-4132-52b1-b359-0a113580c366@arskom.com.tr>

Hello,


On 05/04/17 02:21, jonathan vanasco wrote:
> Is anyone deploying their twisted services with something other than Supervisor?  If so, I'd love to know.

We're using djb's daemontools (with the -encore patchset) to manage our
twisted and non-twisted (C++) daemons. Two advantages:

1. Biggest advantage for us: cross-platform. Every Linux / BSD distro I
know of has daemontools supported. You won't have to depend on
systemd/openrc etc. Slightly related: http://cr.yp.to/compatibility.html

2. svc, daemontools' service manager is pretty straightforward to use.
See: https://cr.yp.to/daemontools/svc.html

3. Takes care of forking, logging, log rotation, etc. Can filter logs
based on a given regexp. Logs only stdout but if you do "exec 2>&1"
before starting your daemon, you'll get stderr too.

I also find it dead simple to integrate your app with daemontools. 
Examples and other advantages: https://cr.yp.to/daemontools/faq/create.html

The encore patchset (https://untroubled.org/daemontools-encore/) adds
stuff like "email me when the process is restarted". It's not strictly
needed as you can implement it in your run script but it's a nice-to-have.

I hope this helps.

Best,
Burak


From p.mayers at imperial.ac.uk  Thu May  4 08:48:15 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 4 May 2017 15:48:15 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
Message-ID: <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>

On 04/05/17 14:32, Nagy, Attila wrote:

> Are there any problems with this approach?

You're poking at a private member of the .original IResponse there, and 
moreover the transport object which seems risky.

The single treq.collect call to consumer.write will also not necessarily 
respect the consumer-issued flow control (even if touching the 
_transport was valid, you don't know you won't get buffered data after 
you've been asked to stop)


From bra at fsn.hu  Thu May  4 09:30:50 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Thu, 4 May 2017 17:30:50 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
Message-ID: <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>

On 05/04/2017 04:48 PM, Phil Mayers wrote:
> On 04/05/17 14:32, Nagy, Attila wrote:
>
>> Are there any problems with this approach?
>
> You're poking at a private member of the .original IResponse there, 
> and moreover the transport object which seems risky.
I would like to use the simplest (and correct of course) solution. 
Juggling with buffering/data by hand seems even more risky to me.
Your implementation seems to do things which twisted should do, which 
(also) doesn't seem to be right. :)
It would be nice if this could be solved in an elegant way.

>
> The single treq.collect call to consumer.write will also not 
> necessarily respect the consumer-issued flow control (even if touching 
> the _transport was valid, you don't know you won't get buffered data 
> after you've been asked to stop)
It seems to do what I want to do. :)

BTW (without reading it), I've tried your solution (thank you very much 
for it!).
 From a 1073741824 bytes source file, it transferred a 1056490639 
destination file.
Another run made a 1044534695 bytes destination file.
Well, each run yields a different size.



From manish.tomar at gmail.com  Thu May  4 09:38:05 2017
From: manish.tomar at gmail.com (Manish Tomar)
Date: Thu, 4 May 2017 08:38:05 -0700
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
Message-ID: <CABH8oEM82TKkygcPB9G_DPGV-2qUTJGXeONXEdDnLpCLu5Ok=g@mail.gmail.com>

Have you looked at
http://treq.readthedocs.io/en/latest/howto.html#handling-streaming-responses
?

Regards,
Manish

On Thu, May 4, 2017 at 5:04 AM, Nagy, Attila <bra at fsn.hu> wrote:

> Hi,
>
> I would like to copy a file between two HTTP servers in the most efficient
> manner, which probably means a streaming down/upload (GET/PUT) with the
> producer/consumer scheme.
>
> Can this be done easily, could somebody write a simple example?
>
> Thanks,
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170504/eaa6dd5d/attachment.html>

From manish.tomar at gmail.com  Thu May  4 13:03:00 2017
From: manish.tomar at gmail.com (Manish Tomar)
Date: Thu, 4 May 2017 12:03:00 -0700
Subject: [Twisted-Python] [ANN] bloc - group membership framework
Message-ID: <CABH8oEOrhwas2=Fe0fpmQoOz4_uJnc3T3BpGSsph=+nEqk0C=Q@mail.gmail.com>

Hi all,

I've implemented a simple single-master group membership framework on
Twisted that can be used for mutually partitioning workload among multiple
nodes.

https://github.com/manishtomar/bloc

Please do try it out and let me know if it helps in any way.

Regards,
Manish
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170504/a577531a/attachment.html>

From glyph at twistedmatrix.com  Fri May  5 00:38:47 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 May 2017 23:38:47 -0700
Subject: [Twisted-Python] [ANN] bloc - group membership framework
In-Reply-To: <CABH8oEOrhwas2=Fe0fpmQoOz4_uJnc3T3BpGSsph=+nEqk0C=Q@mail.gmail.com>
References: <CABH8oEOrhwas2=Fe0fpmQoOz4_uJnc3T3BpGSsph=+nEqk0C=Q@mail.gmail.com>
Message-ID: <8BE583F3-9A43-449E-9969-8A49A2B7875B@twistedmatrix.com>


> On May 4, 2017, at 12:03 PM, Manish Tomar <manish.tomar at gmail.com> wrote:
> 
> Hi all,
> 
> I've implemented a simple single-master group membership framework on Twisted that can be used for mutually partitioning workload among multiple nodes. 
> 
> https://github.com/manishtomar/bloc <https://github.com/manishtomar/bloc>
> 
> Please do try it out and let me know if it helps in any way.

Thanks Manish!  This README looks like a great intro.

Are there any plans to extend this to something consensus-based or is there a range of applications for which single-master is better?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170504/f551470e/attachment.html>

From p.mayers at imperial.ac.uk  Fri May  5 02:26:49 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 5 May 2017 09:26:49 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
Message-ID: <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>

On 04/05/17 16:30, Nagy, Attila wrote:

> I would like to use the simplest (and correct of course) solution.
> Juggling with buffering/data by hand seems even more risky to me.

The problem with the approach you've outlined is that it treats the 
transport (a private member) in ways that I suspect are invalid. In 
particular there's no handling of the length of the object or chunked 
encodings - I suspect what you're doing will only work on simple HTTP 
requests with no connection reuse.

I *think* if you use the t.web deliverBody response method, you get 
legal access to a transport (via an IProtocol you provide) and the API 
docs confirm that transport can be accessed and paused.

However if you look at:

https://github.com/twisted/twisted/blob/twisted-17.1.0/src/twisted/web/_newclient.py#L1069

...you'll see that deliverBody starts writing to the transport straight 
away, and you have no way to know if the consumer will have been 
provided to IBodyProducer at that point, or if it'll have been paused.

I think you inevitably will have to buffer some data, and a quick PoC of 
that code suggests to me that handling of the return deferred from 
startProducing is quite complex.


Perhaps someone more knowledgeable than I can chime in here?

> Your implementation seems to do things which twisted should do, which
> (also) doesn't seem to be right. :)
> It would be nice if this could be solved in an elegant way.

On that I completely agree. It could be that there's some simple idiom 
or built-in code for this that I'm unaware of.

> BTW (without reading it), I've tried your solution (thank you very much
> for it!).
> From a 1073741824 bytes source file, it transferred a 1056490639
> destination file.

Hey, I did say lightly tested ;o)

I think it's a bug in cleanly handling things at the end of the request.


From bra at fsn.hu  Fri May  5 03:41:41 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Fri, 5 May 2017 11:41:41 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
Message-ID: <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>

On 05/05/2017 10:26 AM, Phil Mayers wrote:
> On 04/05/17 16:30, Nagy, Attila wrote:
>
>> I would like to use the simplest (and correct of course) solution.
>> Juggling with buffering/data by hand seems even more risky to me.
>
> The problem with the approach you've outlined is that it treats the 
> transport (a private member) in ways that I suspect are invalid. In 
> particular there's no handling of the length of the object or chunked 
> encodings - I suspect what you're doing will only work on simple HTTP 
> requests with no connection reuse.
What possible side effects do you see here? What problems could it cause?
So far I've tried to copy a lot of files in parallel, arbitrarily drop 
connections. Everything seems OK.
The file is either transferred in its entirety or (in case of dropped 
connections) not.
>
>> Your implementation seems to do things which twisted should do, which
>> (also) doesn't seem to be right. :)
>> It would be nice if this could be solved in an elegant way.
>
> On that I completely agree. It could be that there's some simple idiom 
> or built-in code for this that I'm unaware of.
I couldn't find a complete example for this task, so it would be nice if 
somebody more experienced could share the secret of doing this right and 
nice. :)

Thanks,


From p.mayers at imperial.ac.uk  Fri May  5 04:29:15 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 5 May 2017 11:29:15 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
Message-ID: <7a42c647-131e-2132-f55b-ea636aaf891f@imperial.ac.uk>

On 05/05/17 10:41, Nagy, Attila wrote:

> What possible side effects do you see here? What problems could it cause?
> So far I've tried to copy a lot of files in parallel, arbitrarily drop 
> connections. Everything seems OK.
> The file is either transferred in its entirety or (in case of dropped 
> connections) not.

Cool. If you're happy using private members, knock yourself out.


From cory at lukasa.co.uk  Fri May  5 05:10:47 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Fri, 5 May 2017 12:10:47 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
Message-ID: <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>


> On 5 May 2017, at 10:41, Nagy, Attila <bra at fsn.hu> wrote:
> 
> On 05/05/2017 10:26 AM, Phil Mayers wrote:
>> On 04/05/17 16:30, Nagy, Attila wrote:
>> 
>>> I would like to use the simplest (and correct of course) solution.
>>> Juggling with buffering/data by hand seems even more risky to me.
>> 
>> The problem with the approach you've outlined is that it treats the transport (a private member) in ways that I suspect are invalid. In particular there's no handling of the length of the object or chunked encodings - I suspect what you're doing will only work on simple HTTP requests with no connection reuse.
> What possible side effects do you see here? What problems could it cause?

The first is that Twisted will break your code eventually. Private member attributes are not covered by Twisted’s deprecation policy, and they can be changed without warning for any reason. So you’ll need to pin your Twisted version.

As a second note, you may lock yourself out of HTTP/2. HTTP/2 is not guaranteed to give you access to a raw transport object (though it might), because in HTTP/2 the protocol is not a dumb byte pipe like it is in HTTP/1.1. Code like this forces Twisted devs who want to add HTTP/2 support (like myself) to implement HTTP/2 as a multiple-object abstraction to allow each request/response pair’s underlying “transport” member to act like a dumb byte-pipe transport, when we’d much rather use a less complex abstraction (as an example you should look at the HTTP/2 server code in twisted.web, which has multiple classes to maintain this fiction that you can just call “transport.write” and expect that to work).

As a third note, your code does not handle the possibility that original._transport may not implement IPushProducer. While *in practice* it tends to, it needn’t. On top of that, it is not forbidden for an IPushProducer implementation to call write() even when paused, and code that wants to be correct in the face of all situations will need to be able to buffer anyway.

However, you’re right that this is not ideal. I think the best solution would be an enhancement to twisted.web that updates the default Response object to accept an IConsumer as the protocol argument of deliverBody. This would allow t.w._newclient.Response to be the arbiter of what it means to “pause” production, and allow you to continue to proxy between the two but without accessing a private member (you’d get given the producer you need to pause in registerProducer).

If that’s an enhancement you’d be interested in, I can work with you to get that patch in place. Then your code would change a bit (note that this code won’t work right now):

class UploadProducer(protocol.Protocol):
    implements(IBodyProducer)
    implements(IConsumer)

    def __init__(self, get_resp):
        self.length = get_resp.length
        self.producing = False
        self._producer = None
        self._consumer = None
        self._completed = Deferred()

    # IConsumer
    def registerProducer(self, producer, streaming):
        assert streaming
        self._producer = producer
        if self._consumer is None:
            self._producer.pauseProducing()

    def unregisterProducer(self):
        # Raise an error or something
        pass

    def write(self, data):
        self._consumer.write(data)

    # IProtocol
    def connectionLost(self, reason):
        self._completed.callback(reason)
    
    # IBodyProducer
    def startProducing(self, consumer):
        if self._producer is not None:
            self._producer.resumeProducing()
        self._consumer = consumer
        return completed

    def resumeProducing(self):
        self._producer.resumeProducing()
    
    def pauseProducing(self):
        self._producer.pauseProducing()
    
    def stopProducing(self):
        self._producer.stopProducing()


@inlineCallbacks
def copy(src, dst):
    get_resp = yield treq.get(src, unbuffered=True)
    print "GET", get_resp.code, get_resp.original
    producer = UploadProducer(get_resp)
    get_resp.deliverBody(producer)
    
    put_resp = yield treq.put(dst,data=producer)
    print "PUT", put_resp, put_resp.code    


With this arrangement as well it’d potentially be possible to use something like tubes, or at least get closer to using tubes for this use case. Right now it’s a bit of an annoyance that t.w._newclient doesn’t allow the body receiving protocol to exert backpressure on the data.

Anyway, just a thought.

Cory

From p.mayers at imperial.ac.uk  Fri May  5 05:38:49 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 5 May 2017 12:38:49 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
Message-ID: <c6a9c889-b0a4-fcc4-3e0f-2a0a325f851f@imperial.ac.uk>

On 05/05/17 12:10, Cory Benfield wrote:

> As a second note, you may lock yourself out of HTTP/2. HTTP/2 is not
> guaranteed to give you access to a raw transport object (though it

FWIW this kind of thing was, more or less, what I was thinking. It seems 
unlikely that stealing the TCP connection from Response for a few bytes 
was wise...

> As a third note, your code does not handle the possibility that
> original._transport may not implement IPushProducer. While *in

IIUC IResponse.deliverBody *does* guarantee (currently) to provide a 
transport implementing IPushProducer to the supplied IProtocol, at least 
as far as the docstring says?

Obviously that doesn't make accessing the private _transport safe - an 
implementation could wrap the transport to implement the IPushProducer 
semantics.

> practice* it tends to, it needn’t. On top of that, it is not
> forbidden for an IPushProducer implementation to call write() even
> when paused, and code that wants to be correct in the face of all
> situations will need to be able to buffer anyway.

Thanks for confirming this. I suspected as much, but was not certain (I 
make relatively little use of producer/consumer APIs in my own code).

> use case. Right now it’s a bit of an annoyance that t.w._newclient
> doesn’t allow the body receiving protocol to exert backpressure on
> the data.

How does that square with deliverBody providing an IPushProducer? Is it 
the case that the transport may just disobey the pauseProducing requests 
as you've noted above?


From bra at fsn.hu  Fri May  5 05:40:43 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Fri, 5 May 2017 13:40:43 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <7a42c647-131e-2132-f55b-ea636aaf891f@imperial.ac.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <7a42c647-131e-2132-f55b-ea636aaf891f@imperial.ac.uk>
Message-ID: <8b98bec2-892b-fd07-b465-ef3e669cbae8@fsn.hu>

On 05/05/2017 12:29 PM, Phil Mayers wrote:
> On 05/05/17 10:41, Nagy, Attila wrote:
>
>> What possible side effects do you see here? What problems could it 
>> cause?
>> So far I've tried to copy a lot of files in parallel, arbitrarily 
>> drop connections. Everything seems OK.
>> The file is either transferred in its entirety or (in case of dropped 
>> connections) not.
>
> Cool. If you're happy using private members, knock yourself out.
I'm not happy with that of course. The really cool thing would be if 
Twisted could support this task without the need of complicated and 
error-prone code.


From p.mayers at imperial.ac.uk  Fri May  5 05:53:23 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 5 May 2017 12:53:23 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <8b98bec2-892b-fd07-b465-ef3e669cbae8@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <7a42c647-131e-2132-f55b-ea636aaf891f@imperial.ac.uk>
 <8b98bec2-892b-fd07-b465-ef3e669cbae8@fsn.hu>
Message-ID: <94318604-74ca-22a8-d1f6-d5c8f0c03276@imperial.ac.uk>

On 05/05/17 12:40, Nagy, Attila wrote:

>> Cool. If you're happy using private members, knock yourself out.
> I'm not happy with that of course. The really cool thing would be if 
> Twisted could support this task without the need of complicated and 
> error-prone code.

I don't disagree, of course. Cory seems to know the score here, and if I 
understand his email, right now you can't do it without buffering.

I wonder what the minimal implementation looks like right now, though?


From bra at fsn.hu  Fri May  5 05:58:28 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Fri, 5 May 2017 13:58:28 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
Message-ID: <06b4cd40-ac47-c21e-3292-ba5b4d7a6a15@fsn.hu>

On 05/05/2017 01:10 PM, Cory Benfield wrote:
> The first is that Twisted will break your code eventually. Private member attributes are not covered by Twisted’s deprecation policy, and they can be changed without warning for any reason. So you’ll need to pin your Twisted version.
I feel myself unconfortable with this, that's why we are corresponding. :)
> As a second note, you may lock yourself out of HTTP/2. HTTP/2 is not guaranteed to give you access to a raw transport object (though it might), because in HTTP/2 the protocol is not a dumb byte pipe like it is in HTTP/1.1. Code like this forces Twisted devs who want to add HTTP/2 support (like myself) to implement HTTP/2 as a multiple-object abstraction to allow each request/response pair’s underlying “transport” member to act like a dumb byte-pipe transport, when we’d much rather use a less complex abstraction (as an example you should look at the HTTP/2 server code in twisted.web, which has multiple classes to maintain this fiction that you can just call “transport.write” and expect that to work).
Having HTTP/2 (along with 1.1) of course would be the best, but 
currently I can easily live without it. It's far from being standard.
And yet, its multiplexing would be one of the greatest achievement here 
(if correctly implemented). Copying objects with a lot of HTTP/TCP 
channels is too stressful sometimes (too much connections, TIME_WAIT 
problems etc).
> However, you’re right that this is not ideal. I think the best solution would be an enhancement to twisted.web that updates the default Response object to accept an IConsumer as the protocol argument of deliverBody. This would allow t.w._newclient.Response to be the arbiter of what it means to “pause” production, and allow you to continue to proxy between the two but without accessing a private member (you’d get given the producer you need to pause in registerProducer).
>
> If that’s an enhancement you’d be interested in, I can work with you to get that patch in place. Then your code would change a bit (note that this code won’t work right now):
Absolutely. I think this use case is far from being brain-dead, so if 
it's possible to do it right out of the box, I guess everybody wins with it.

>
> class UploadProducer(protocol.Protocol):
>      implements(IBodyProducer)
>      implements(IConsumer)
>
>      def __init__(self, get_resp):
>          self.length = get_resp.length
>          self.producing = False
>          self._producer = None
>          self._consumer = None
>          self._completed = Deferred()
>
>      # IConsumer
>      def registerProducer(self, producer, streaming):
>          assert streaming
>          self._producer = producer
>          if self._consumer is None:
>              self._producer.pauseProducing()
>
>      def unregisterProducer(self):
>          # Raise an error or something
>          pass
>
>      def write(self, data):
>          self._consumer.write(data)
>
>      # IProtocol
>      def connectionLost(self, reason):
>          self._completed.callback(reason)
>      
>      # IBodyProducer
>      def startProducing(self, consumer):
>          if self._producer is not None:
>              self._producer.resumeProducing()
>          self._consumer = consumer
>          return completed
>
>      def resumeProducing(self):
>          self._producer.resumeProducing()
>      
>      def pauseProducing(self):
>          self._producer.pauseProducing()
>      
>      def stopProducing(self):
>          self._producer.stopProducing()
>
>
> @inlineCallbacks
> def copy(src, dst):
>      get_resp = yield treq.get(src, unbuffered=True)
>      print "GET", get_resp.code, get_resp.original
>      producer = UploadProducer(get_resp)
>      get_resp.deliverBody(producer)
>      
>      put_resp = yield treq.put(dst,data=producer)
>      print "PUT", put_resp, put_resp.code
This looks much clearer than Phil's solution and lacks the error-prone 
custom buffering, which is nice.
What can I do to make this happen? :)
> With this arrangement as well it’d potentially be possible to use something like tubes, or at least get closer to using tubes for this use case. Right now it’s a bit of an annoyance that t.w._newclient doesn’t allow the body receiving protocol to exert backpressure on the data.
Apart from correctness having some traces of performance would also be 
good. I don't know how tubes compare to this, but the current (not nice) 
solution can easily transfer more than one gigabit/s with one process, I 
consider that a good baseline. :)
> Anyway, just a thought.
>
Thank you very much for joining and your help.


From manish.tomar at gmail.com  Fri May  5 23:31:30 2017
From: manish.tomar at gmail.com (Manish Tomar)
Date: Fri, 5 May 2017 22:31:30 -0700
Subject: [Twisted-Python] [ANN] bloc - group membership framework
In-Reply-To: <8BE583F3-9A43-449E-9969-8A49A2B7875B@twistedmatrix.com>
References: <CABH8oEOrhwas2=Fe0fpmQoOz4_uJnc3T3BpGSsph=+nEqk0C=Q@mail.gmail.com>
 <8BE583F3-9A43-449E-9969-8A49A2B7875B@twistedmatrix.com>
Message-ID: <CABH8oEOfbMiem5yLLpJgEnchs=i+OpP2uC7V3rpo9+it7A5CsA@mail.gmail.com>

Hey Glyph,

On Thu, May 4, 2017 at 11:38 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Thanks Manish!  This README looks like a great intro.
>
Thanks Glyph! Considering my writing skills, this is a great compliment.

> Are there any plans to extend this to something consensus-based or
>
 Not as of now. Consensus-based extension requires pure python non-network
Raft implementation which would make it easy to add a thin twisted
networking layer on it. I haven't looked around for such library. Moreover,
it's not as easy to reason about and will need much better testing. One
only needs to look into aphyr's blog to realize how all the implementations
of different distributed systems are broken.

> is there a range of applications for which single-master is better?
>
Not particularly except the fact that it is simpler to understand and debug
(if required). If you have a *reasonbly* reliable network and machines then
I think it is useful. However, if you have a large deployment on the cloud
with mutiple availability zones and expect network partitions/glitches then
having a consensus-based tool like zookeeper or etcd is better. Please note
that bloc will work with bad network but can slow down the application
because it waits for stable network before informing the group.

Regards,
Manish
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170505/9c5d28a5/attachment.html>

From cory at lukasa.co.uk  Sat May  6 13:09:13 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Sat, 6 May 2017 20:09:13 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <c6a9c889-b0a4-fcc4-3e0f-2a0a325f851f@imperial.ac.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
 <c6a9c889-b0a4-fcc4-3e0f-2a0a325f851f@imperial.ac.uk>
Message-ID: <891792F4-C404-48FF-82FB-38C859D2A47D@lukasa.co.uk>


> On 5 May 2017, at 12:38, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
>> As a third note, your code does not handle the possibility that
>> original._transport may not implement IPushProducer. While *in
> 
> IIUC IResponse.deliverBody *does* guarantee (currently) to provide a transport implementing IPushProducer to the supplied IProtocol, at least as far as the docstring says?
> 
> Obviously that doesn't make accessing the private _transport safe - an implementation could wrap the transport to implement the IPushProducer semantics.

Yeah, it does. Sadly, there’s some complexity hidden there.

In this case, the “transport” object being provided to the IProtocol is a proxy to the TCP transport. However, that object does not write directly to the provided IProtocol, it writes to the t.w._newclient.HTTPClientParser and that chucks all kinds of data through the system. One of these layers is buffering, and that layer is *not* being told about calls to the IPushProducer methods. Thus, if you call pauseProducing from the IProtocol you provide, you may still get calls to your dataReceived method even though the producer is paused.

Mostly this seems to happen when the first body bytes are delivered, which seems to call makeConnection and then immediately dispatch any body bytes that have been received, even if the makeConnection method called pauseProducing on its transport. Not so helpful!

This also makes it impossible to avoid buffering. There seems to be no way to prevent the Response object from delivering the first bytes of the body before startProducing is called by treq for the upload. That’s pretty frustrating. Worse, the Response will *also* fire the “body complete” callback. All of this can and does happen before treq.put ever gets a chance to call startProducing, which means that you just have to buffer all of these events. This is really quite painful.

This is a design pattern that is in a few different places in twisted.web: situations where the “transport” provided to a higher-level abstraction is a proxy to the TCP connection, but where intermediate layers are actually responsible for calling dataReceived on those higher level abstractions. This causes a real problem if there is any chance that intermediary layers will do any buffering at all, because those layers will not see calls to pauseProducing or anything similar, and so will not respect those calls. The Twisted HTTP/2 server tries very hard to avoid this by ensuring that its classes actually masquerade as transports, rather than delegating to the lower-level TCP transport (though of course, they have to do this because HTTP/2 is framed!).

Fixing this is potentially a bit non-trivial. It involves changing t.w._newclient.Response to be able to act as a transport proxy (probably via some kind of mixin for the sake of code composition) and then to respect the producing state of the protocol receiving the body inside the _bodyDataReceived method, instead of just YOLOing data into that protocol assuming that it hasn’t immediately paused the production.

I consider this a bug in Twisted: I’ll open a ticket.

Cory


From cory at lukasa.co.uk  Sat May  6 13:15:30 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Sat, 6 May 2017 20:15:30 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <891792F4-C404-48FF-82FB-38C859D2A47D@lukasa.co.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
 <c6a9c889-b0a4-fcc4-3e0f-2a0a325f851f@imperial.ac.uk>
 <891792F4-C404-48FF-82FB-38C859D2A47D@lukasa.co.uk>
Message-ID: <80AD232F-9DFA-476F-B621-ABA0DAC72408@lukasa.co.uk>


> On 6 May 2017, at 20:09, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> I consider this a bug in Twisted: I’ll open a ticket.

This is now Twisted ticket #9132: https://twistedmatrix.com/trac/ticket/9132 <https://twistedmatrix.com/trac/ticket/9132>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170506/c020a51e/attachment.html>

From trac at twistedmatrix.com  Sun May  7 00:05:23 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 May 2017 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1494137123.32.7825034246544067067@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170507/02ffe883/attachment.html>

From meejah at meejah.ca  Thu May 11 21:35:50 2017
From: meejah at meejah.ca (meejah)
Date: Fri, 12 May 2017 07:35:50 +0400
Subject: [Twisted-Python] txtorcon 0.19.2
Message-ID: <867f1m7nmx.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Fixing two more problems with the 0.19.1 release, I hereby give you
version 0.19.2 which adds:

 * Work around a bug in "incremental" library (Issue 233)
 * Fix for Issue 190 from Felipe Dau
 * add txtorcon.Circuit.when_built

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

https://pypi.python.org/pypi/txtorcon/0.19.2
https://github.com/meejah/txtorcon/releases/tag/v0.19.2

Releases are also available from the hidden service:

http://timaq4ygg2iegci7.onion/txtorcon-0.19.2.tar.gz
http://timaq4ygg2iegci7.onion/txtorcon-0.19.2.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
c0e05ff4878468474167536a7b30edec23ae69eb26869c3e9ed9878e63ddc882  dist/txtorcon-0.19.2.tar.gz
0e2e85424c8f4c4627066ceebee59a931300e3712007f0a7620791729c80d459  dist/txtorcon-0.19.2-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJZFSkrAAoJEMJgKAMSgGmnlwYIAIc2mFs0tQngDVYauEdg+WTD
0TMDGpXoQTFXgAj2st6MA+UITgc1od3PveIeNkYi7bCYxGndQbZeGJ14itXTwTZR
lce9jHkn2ZG7LHhqcqC1Zdzp1+6lHQSgT81tPYzfUXhrqUHWjJjEHlSjAllZDD4E
zbV9y8zdSuQYK65VqFPnGl4BzOKBAL3VEwrtzf2wYejykodZsXp5Aygl7WAmuSXv
bl5avMfp0GLAu+5XvpfAqdAUQimtSE5/ODIWogF1Emqvu19qIwspQJk81A3yUSCa
wD22S3BQc8RuE9GSjk75ykA8fYAfv8n1fYSqbaJazR7fe9ZMRsNPcwEiyF86jlw=
=cZ/A
-----END PGP SIGNATURE-----


From rodrigc at crodrigues.org  Fri May 12 12:49:40 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 12 May 2017 11:49:40 -0700
Subject: [Twisted-Python] Buildbot and Python 3
Message-ID: <CAG=rPVcAaKz6s5Re=kdEMnT861qAO4eMTmTEPLX=tBDvTJqywA@mail.gmail.com>

Hi,

I've shifted efforts to port buildbot to Python 3.  In March, we reached a
milestone where all of buildbot's unit tests passed on Python 3:

https://medium.com/buildbot/buildbot-0-9-5-is-out-1d83626bd95a

This effort was possible due to large parts of Twisted (especially
Perspective Broker)
now working on Python 3.

Buildbot is a heavy user of Twisted.  There are a couple of bugs in
Twisted's Python 3 support uncovered by buildbot which need to get
fixed/merged in Twisted.  Hopefully these can get fixed and a new version
of Twisted can be released so that buildbot works out of the box on Python
3.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170512/4dda8e5a/attachment.html>

From trac at twistedmatrix.com  Sun May 14 00:05:23 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 May 2017 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1494741923.13.7535979299914319896@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170514/55e7214f/attachment.html>

From glyph at twistedmatrix.com  Mon May 15 00:03:25 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 14 May 2017 23:03:25 -0700
Subject: [Twisted-Python] Buildbot and Python 3
In-Reply-To: <CAG=rPVcAaKz6s5Re=kdEMnT861qAO4eMTmTEPLX=tBDvTJqywA@mail.gmail.com>
References: <CAG=rPVcAaKz6s5Re=kdEMnT861qAO4eMTmTEPLX=tBDvTJqywA@mail.gmail.com>
Message-ID: <CD8BD9AC-17E2-4FD1-8905-CDCB542D2B95@twistedmatrix.com>


> On May 12, 2017, at 11:49 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> I've shifted efforts to port buildbot to Python 3.  In March, we reached a milestone where all of buildbot's unit tests passed on Python 3:
> 
> https://medium.com/buildbot/buildbot-0-9-5-is-out-1d83626bd95a <https://medium.com/buildbot/buildbot-0-9-5-is-out-1d83626bd95a>
> 
> This effort was possible due to large parts of Twisted (especially Perspective Broker)
> now working on Python 3.
> 
> Buildbot is a heavy user of Twisted.  There are a couple of bugs in
> Twisted's Python 3 support uncovered by buildbot which need to get
> fixed/merged in Twisted.  Hopefully these can get fixed and a new version
> of Twisted can be released so that buildbot works out of the box on Python 3.

Thank you Craig for all of your hard work getting both Twisted and Buildbot ported.

Only a few modules remain before we can officially get rid of our 2/3 hybrid installer mess and stop qualifying that we only "mostly" support py3!  Perhaps some other intrepid soul would like to help cross that finish line... ;)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170514/1f9146b2/attachment.html>

From adi at roiban.ro  Tue May 16 02:32:23 2017
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 16 May 2017 09:32:23 +0100
Subject: [Twisted-Python] Combining eventually and incremental dependencies
Message-ID: <CAFycZ9eTkh0ine0h1S2FGLeACkVXNN73tS9vHa5wwp1X+_kvpQ@mail.gmail.com>

This is based on my review of https://twistedmatrix.com/trac/ticket/9111

Is there any real value in having many small python packages doing
only a few things?

Can we pack the deprecation code together with the versioning code...
for example to only have 'incremental'  ?

I feel like we are going to the node.js path where you have a package
for the strip function.

I feel that having multiple separate project just adds a lot of extra
admin works... set up repo permissions/ set up pypi access / set up CI
integration / set up documentation.

In the same time, I feel that deprecation and versioning
functionalities are related.

>From what I can see in the current examples, each time you use
eventually you are forced to use incremental so that you can pass that
bloody Version instance, which I don't know why we can't go with just
a tupple :)

Thanks!
-- 
Adi Roiban


From jlitzingerdev at gmail.com  Tue May 16 22:28:43 2017
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Tue, 16 May 2017 22:28:43 -0600
Subject: [Twisted-Python] Wiki page edit
Message-ID: <20170517042843.GA3871@arch-tinker.localdomain>

Hello,

In going through the instructions on
https://twistedmatrix.com/trac/wiki/TwistedDevelopment#Creatingyourworkenvironment

I noticed an error in the invocation of the twistedchecker-trunk-diff
command.

The change needed is:

 # On Linux/OSX there is a helper to only raise error for the diff
-./travis/twistedchecker-trunk-diff.sh src/twisted/
+./.travis/twistedchecker-trunk-diff.sh src/twisted/


I am happy to make the change, but I don't currently have edit
permissions to the wiki (for reference, my trac username is
jlitzingerdev).

Cheers,
-Jason


From glyph at twistedmatrix.com  Tue May 16 22:31:25 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 16 May 2017 21:31:25 -0700
Subject: [Twisted-Python] Wiki page edit
In-Reply-To: <20170517042843.GA3871@arch-tinker.localdomain>
References: <20170517042843.GA3871@arch-tinker.localdomain>
Message-ID: <F2826206-795A-4058-9043-00AD3D70D67E@twistedmatrix.com>


> On May 16, 2017, at 9:28 PM, Jason Litzinger <jlitzingerdev at gmail.com> wrote:
> 
> Hello,
> 
> In going through the instructions on
> https://twistedmatrix.com/trac/wiki/TwistedDevelopment#Creatingyourworkenvironment
> 
> I noticed an error in the invocation of the twistedchecker-trunk-diff
> command.
> 
> The change needed is:
> 
> # On Linux/OSX there is a helper to only raise error for the diff
> -./travis/twistedchecker-trunk-diff.sh src/twisted/
> +./.travis/twistedchecker-trunk-diff.sh src/twisted/
> 
> 
> I am happy to make the change, but I don't currently have edit
> permissions to the wiki (for reference, my trac username is
> jlitzingerdev).

Thanks for bringing this up.  I've made this specific edit since that was quickest, but I'll add you as a wiki editor momentarily.

-g



From glyph at twistedmatrix.com  Tue May 16 22:32:26 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 16 May 2017 21:32:26 -0700
Subject: [Twisted-Python] Wiki page edit
In-Reply-To: <F2826206-795A-4058-9043-00AD3D70D67E@twistedmatrix.com>
References: <20170517042843.GA3871@arch-tinker.localdomain>
 <F2826206-795A-4058-9043-00AD3D70D67E@twistedmatrix.com>
Message-ID: <3AED43FA-1BFE-4920-AF4E-43592FE58BAA@twistedmatrix.com>


> On May 16, 2017, at 9:31 PM, Glyph <glyph at twistedmatrix.com> wrote:
> 
> Thanks for bringing this up.  I've made this specific edit since that was quickest, but I'll add you as a wiki editor momentarily.

You should have wiki edit permissions now for any future work.  Let me know if you have any issues.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170516/5386b80e/attachment.html>

From jlitzingerdev at gmail.com  Tue May 16 22:45:26 2017
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Tue, 16 May 2017 22:45:26 -0600
Subject: [Twisted-Python] Wiki page edit
In-Reply-To: <3AED43FA-1BFE-4920-AF4E-43592FE58BAA@twistedmatrix.com>
References: <20170517042843.GA3871@arch-tinker.localdomain>
 <F2826206-795A-4058-9043-00AD3D70D67E@twistedmatrix.com>
 <3AED43FA-1BFE-4920-AF4E-43592FE58BAA@twistedmatrix.com>
Message-ID: <20170517044516.GA3963@arch-tinker.localdomain>

> You should have wiki edit permissions now for any future work.  Let me know if you have any issues.
Thanks, will do!
-Jason


From trac at twistedmatrix.com  Sun May 21 00:05:19 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 May 2017 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1495346719.72.199745775436103249@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170521/554c9761/attachment.html>

From jlitzingerdev at gmail.com  Sun May 21 21:13:15 2017
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Sun, 21 May 2017 21:13:15 -0600
Subject: [Twisted-Python] Wiki Developer doc leads to 404
Message-ID: <20170522031315.GA1006@arch-tinker.localdomain>

Hello,

The link to the "Documentation Standard":

http://twistedmatrix.com/documents/current/core/development/policy/doc-standard.html

on https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs leads
me to a 404.  Should this go anywhere or just go away?  Does the
"Writing Style Guide" supercede, or is this in reference to API docs?

I'm happy to update the wiki, but I wasn't sure exactly what should be
updated.

Thanks!
-Jason


From glyph at twistedmatrix.com  Sun May 21 23:27:34 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 21 May 2017 22:27:34 -0700
Subject: [Twisted-Python] Wiki Developer doc leads to 404
In-Reply-To: <20170522031315.GA1006@arch-tinker.localdomain>
References: <20170522031315.GA1006@arch-tinker.localdomain>
Message-ID: <38D1A82F-46D9-4ABE-927A-62E4FC3BEFAA@twistedmatrix.com>


> On May 21, 2017, at 8:13 PM, Jason Litzinger <jlitzingerdev at gmail.com> wrote:
> 
> Hello,
> 
> The link to the "Documentation Standard":
> 
> http://twistedmatrix.com/documents/current/core/development/policy/doc-standard.html
> 
> on https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs leads
> me to a 404.  Should this go anywhere or just go away?  Does the
> "Writing Style Guide" supercede, or is this in reference to API docs?

Yeah, the "Twisted Writing Standard" doc supersedes.  I've removed the link.  Thanks for catching this!

> I'm happy to update the wiki, but I wasn't sure exactly what should be
> updated.

In the future you can go ahead and just optimistically update - the wiki can always roll back if necessary :).

-g

From andymaheshw at gmail.com  Mon May 22 16:53:22 2017
From: andymaheshw at gmail.com (Anirudh maheshwari)
Date: Mon, 22 May 2017 15:53:22 -0700
Subject: [Twisted-Python] Would like to assist with documentation on twisted
Message-ID: <CAEmcWYd-obgS=meixOubrPicd_6=qzM8YVGQh11cJRo=gnr_qg@mail.gmail.com>

Hello!

I'm a beginner with Twisted, and I would like to get involved. I spoke to a
few people at the Pycon 2017 Sprints and was hoping to learn how to start
my contribution by working on the documentation and testing. Please let me
know how I can get involved.

Thanks,
Andy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170522/42816766/attachment.html>

From glyph at twistedmatrix.com  Mon May 22 23:51:42 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 22 May 2017 22:51:42 -0700
Subject: [Twisted-Python] Would like to assist with documentation on
 twisted
In-Reply-To: <CAEmcWYd-obgS=meixOubrPicd_6=qzM8YVGQh11cJRo=gnr_qg@mail.gmail.com>
References: <CAEmcWYd-obgS=meixOubrPicd_6=qzM8YVGQh11cJRo=gnr_qg@mail.gmail.com>
Message-ID: <67F1C2C1-6759-4D53-A106-D09BB84BACD7@twistedmatrix.com>

> On May 22, 2017, at 3:53 PM, Anirudh maheshwari <andymaheshw at gmail.com> wrote:
> 
> Hello! 
> 
> I'm a beginner with Twisted, and I would like to get involved. I spoke to a few people at the Pycon 2017 Sprints and was hoping to learn how to start my contribution by working on the documentation and testing. Please let me know how I can get involved. 
> 
> Thanks, 
> Andy 

Hi Andy!

Welcome!

We can definitely use all the help we can get.  In addition to any documentation & testing work you can find, one of the most important things that we could use is migration from our old logging system (twisted.python.log) to our new one (twisted.logger).  This is a task which should be relatively straightforward, and there are lots and lots of instances throughout the codebase where you can make this change (anywhere that calls log.msg or log.err).

Feel free to ask any further questions here!

-glyph


From meejah at meejah.ca  Wed May 24 01:25:26 2017
From: meejah at meejah.ca (meejah)
Date: Wed, 24 May 2017 11:25:26 +0400
Subject: [Twisted-Python] txtorcon 0.19.3
Message-ID: <86inkq67ix.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Fixing another regression, 0.19.3 causes txtorcon to (once again)
correctly work with SocksPort lines containing unix socket options
when used with txtorcon.connect(). Thas bug was introduced in 0.19.0
which reduced the number of GETINFO and GETCONF calls (to help
filtering-proxies).

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

  https://pypi.python.org/pypi/txtorcon/0.19.3
  https://github.com/meejah/txtorcon/releases/tag/v0.19.3

Releases are also available from the hidden service:

  http://timaq4ygg2iegci7.onion/txtorcon-0.19.3.tar.gz
  http://timaq4ygg2iegci7.onion/txtorcon-0.19.3.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
f73396667909a3c7a98f4dd865edf4ed6a2518ee5a935d92e18b8a479ec244fd  txtorcon-0.19.3.tar.gz
e0901f7743a43ed6389f0de31c1f547d89b32723a5ae9316d6cae9ad8eacdbea  txtorcon-0.19.3-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJZJTJVAAoJEMJgKAMSgGmn5woIAIyFRa7NhSNm/zMMJE92jtgA
C3UY55q3FF4VycC7K77EkaudHPMqlr9MA3EeGkx4NVu0KAX7lIT4GFCsZTlnOdXm
rglZ7FFYh49KoAWSMGCMJ7LlauYUitXptynte3lWcqbvjGJkCqMd6WuXslTooSI2
68gq/aoTbXoHWNg1C6DtBhR0JqvN+Vq7ARHyqc4bDloh1LXAvEUwsbKvDtrpXTbe
eRwMlKTKoUXhXjxO37NtoNSxT6HUFNcOFOYcLnWtBMPty9W90xY2wC1LbWwYymbY
Pk97OUceSyoHxAGsBYjKCdTXEWB6TO5lmHE3+t48OqiYt4ELAWkJFUBf5d6Mnto=
=ZRcE
-----END PGP SIGNATURE-----


From glyph at twistedmatrix.com  Wed May 24 18:42:25 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 24 May 2017 17:42:25 -0700
Subject: [Twisted-Python] on adopting projects
Message-ID: <8DA83CD3-4B6C-4BC9-932A-66CF0432A56B@twistedmatrix.com>

As we're splitting the project into more parts, we may have to do Github org surgery to move projects around.

In particular, recently, twisted.python.url got split out into a new package called 'hyperlink', which we were initially thinking the Twisted org would adopt.  (As it happens a different org will probably adopt it, more on that later.)  Adi created a repo to allow Mahmoud to do this, and gave him permissions on said repo.

I just deleted this repo :-).  In the future, the right way to do this is to have the owner transfer the repo over to the relevant org (this is in the "danger zone" in the github UI).  Creating empty repos to move projects around breaks a whole bunch of github functionality (clones of the original repo can't update, ticket & PR history doesn't transfer over and can't be moved, links to forks get broken) and we should generally not do it.

-glyph


From hawkowl at atleastfornow.net  Fri May 26 00:35:20 2017
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Fri, 26 May 2017 16:35:20 +1000
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
Message-ID: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>

Hi everyone,

Fresh from PyCon US, comes a 17.5 prerelease. Fancy things in this release:

- twisted.python.url has been spun out into the new 'hyperlink' package;
importing twisted.python.url is now a compatibility alias
- Support for OpenSSL 1.1.0.
- Fixes around the reactor DNS resolver changes in 17.1, solving all known
regressions
- Deferred.asFuture and Deferred.fromFuture, to allow you to map asyncio
Futures to Twisted Deferreds and vice versa, for use the with Python 3+
asyncioreactor in Twisted
- Support for TLS 1.3 ciphersuites, in advance of a released OpenSSL to
enable the protocol
- Further Python 3 support in twisted.web, initial support in
twisted.mail.smtp

Please see the NEWS.rst file and download the tarball at
https://twistedmatrix.com/Releases/rc/17.5.0rc2/ . (rc1 fell to metadata
mishaps!)

Let me know if you notice anything out of the ordinary. If there's no
problems, it'll release in the next week or so.

Twisted Regards,

Amber Brown (HawkOwl)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170526/c7ee6ec1/attachment.html>

From glyph at twistedmatrix.com  Fri May 26 00:46:12 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 25 May 2017 23:46:12 -0700
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
Message-ID: <D3CA5583-E0CB-41D5-BE6E-A3482A27E835@twistedmatrix.com>


> On May 25, 2017, at 11:35 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> Fresh from PyCon US, comes a 17.5 prerelease. Fancy things in this release:
> 
> - twisted.python.url has been spun out into the new 'hyperlink' package; importing twisted.python.url is now a compatibility alias
> - Support for OpenSSL 1.1.0.
> - Fixes around the reactor DNS resolver changes in 17.1, solving all known regressions
> - Deferred.asFuture and Deferred.fromFuture, to allow you to map asyncio Futures to Twisted Deferreds and vice versa, for use the with Python 3+ asyncioreactor in Twisted
> - Support for TLS 1.3 ciphersuites, in advance of a released OpenSSL to enable the protocol
> - Further Python 3 support in twisted.web, initial support in twisted.mail.smtp
> 
> Please see the NEWS.rst file and download the tarball at https://twistedmatrix.com/Releases/rc/17.5.0rc2/ <https://twistedmatrix.com/Releases/rc/17.5.0rc2/> . (rc1 fell to metadata mishaps!)
> 
> Let me know if you notice anything out of the ordinary. If there's no problems, it'll release in the next week or so.

Happily, although lots of work happened at the sprints this year, little of it was landed hastily; the things that did land quickly were fixes for long-standing regressions.  So it is my hope that this will be a bit more stable than has been characteristic of our post-PyCon releases :-).

The possibility for a 17.1.1 does remain open depending on how this release works out for those affected by previous regressions.  Please test!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170525/e90267ef/attachment.html>

From adi at roiban.ro  Fri May 26 03:24:28 2017
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 26 May 2017 10:24:28 +0100
Subject: [Twisted-Python] on adopting projects
In-Reply-To: <8DA83CD3-4B6C-4BC9-932A-66CF0432A56B@twistedmatrix.com>
References: <8DA83CD3-4B6C-4BC9-932A-66CF0432A56B@twistedmatrix.com>
Message-ID: <CAFycZ9dOPMayg_DJQTTQH8E1iaaJO8CCNAMy+da6n-r27sVCGQ@mail.gmail.com>

On 25 May 2017 at 01:42, Glyph <glyph at twistedmatrix.com> wrote:
> As we're splitting the project into more parts, we may have to do Github org surgery to move projects around.
>
> In particular, recently, twisted.python.url got split out into a new package called 'hyperlink', which we were initially thinking the Twisted org would adopt.  (As it happens a different org will probably adopt it, more on that later.)  Adi created a repo to allow Mahmoud to do this, and gave him permissions on said repo.
>
> I just deleted this repo :-).  In the future, the right way to do this is to have the owner transfer the repo over to the relevant org (this is in the "danger zone" in the github UI).  Creating empty repos to move projects around breaks a whole bunch of github functionality (clones of the original repo can't update, ticket & PR history doesn't transfer over and can't be moved, links to forks get broken) and we should generally not do it.

Thanks Glyph for the info.

It might be a bit offtopic, but there is one info / policy that I
think that we should adapt when splitting a project.

When a project is split, it is deprecated in Twisted in the same time.

We should keep all the tests in Twisted until the deprecations
deadline is triggered.
This should help prevent any API breaks.

There is still a risk for things to break, even if we have the tests
(as we might not have 100 public api coverage).

So maybe, when a new project is adopted there should be a commitment
to keep the same API backward compatibility policy for at least one
year.

After one year the project can go wild and implement whatever quality
policy they want... ex commit/release without any review or without
tests.

What do you think?
Maybe I am just paranoid, and there is no risk  quality decrease by
outsourcing to external projects.


Thanks!

-- 
Adi Roiban


From exarkun at twistedmatrix.com  Fri May 26 05:38:55 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 26 May 2017 07:38:55 -0400
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
Message-ID: <CAEeXt4MUZknJ5=8VoWmROXznC8XVpD5PZkrqy8i64HQVhC4giA@mail.gmail.com>

On Fri, May 26, 2017 at 2:35 AM, Amber Brown <hawkowl at atleastfornow.net>
wrote:

> Hi everyone,
>
> Fresh from PyCon US, comes a 17.5 prerelease. Fancy things in this release:
>
> - twisted.python.url has been spun out into the new 'hyperlink' package;
> importing twisted.python.url is now a compatibility alias
> - Support for OpenSSL 1.1.0.
> - Fixes around the reactor DNS resolver changes in 17.1, solving all known
> regressions
> - Deferred.asFuture and Deferred.fromFuture, to allow you to map asyncio
> Futures to Twisted Deferreds and vice versa, for use the with Python 3+
> asyncioreactor in Twisted
> - Support for TLS 1.3 ciphersuites, in advance of a released OpenSSL to
> enable the protocol
> - Further Python 3 support in twisted.web, initial support in
> twisted.mail.smtp
>
> Please see the NEWS.rst file and download the tarball at
> https://twistedmatrix.com/Releases/rc/17.5.0rc2/ . (rc1 fell to metadata
> mishaps!)
>
> Let me know if you notice anything out of the ordinary. If there's no
> problems, it'll release in the next week or so.
>
>
Thanks to all who contributed to this (and previous) efforts.

Some of the txkube problems have been resolved but either not entirely or
some new ones have been introduced.  Attached is a log of the failures from
the unit test suite.  I haven't investigated these new errors in depth yet
so I won't say whether these are txkube's fault or Twisted's fault... but
at least *something* is at fault.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170526/7156818d/attachment-0001.html>
-------------- next part --------------
[ERROR]
Traceback (most recent call last):
Failure: testtools.testresult.real._StringException: Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/txkube/test/test_authentication.py", line 124, in test_bearer_token_authorization
    request_bytes = self._authorized_request(token=token, headers=None)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/txkube/test/test_authentication.py", line 108, in _authorized_request
    [(host, port, factory, _, _)] = reactor.tcpClients
ValueError: need more than 0 values to unpack


txkube.test.test_authentication.AuthenticateWithServiceAccountTests.test_bearer_token_authorization
===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: testtools.testresult.real._StringException: Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/txkube/test/test_authentication.py", line 140, in test_other_headers_preserved
    request_bytes = self._authorized_request(token=token, headers=headers)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/txkube/test/test_authentication.py", line 108, in _authorized_request
    [(host, port, factory, _, _)] = reactor.tcpClients
ValueError: need more than 0 values to unpack


txkube.test.test_authentication.AuthenticateWithServiceAccountTests.test_other_headers_preserved
===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: testtools.testresult.real._StringException: eliot-log: {{{
2ad4f697-40a8-4bbe-bcf1-e54383e849ac
└── network-client:delete at 1/started
    ├── kind: Namespace
    ├── name: e
    ├── namespace: None
    ├── timestamp: 1495798510.55902
    ├── network-client:request at 2,1/started
    │   ├── method: DELETE
    │   ├── timestamp: 1495798510.559532
    │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces/e
    │   └── network-client:request at 2,2/succeeded
    │       └── timestamp: 1495798510.564767
    └── network-client:delete at 3/failed
        ├── exception: txkube._exception.KubernetesError
        ├── reason: <KubernetesError: code = 404; status = v1.Status(status=u'Failure', code=404, reason=u'NotFound', details=v1.StatusDetails(kind=u'namespaces', group=None, name=u'e', retryAfterSeconds=None, causes=V1.statuscausePVector([])), message=u'namespaces "e" not found', metadata=v1.ListMeta(selfLink=None, resourceVersion=None))>
        └── timestamp: 1495798510.565738

ffd04195-0b06-44db-9dc3-bc6f99ae5326
└── poll:start at 1/started
    ├── obj
    │   ├── apiVersion: v1
    │   ├── kind: Namespace
    │   └── metadata
    │       ├── annotations
    │       ├── finalizers: []
    │       ├── labels
    │       │   ├── c: x
    │       │   └── v8: k
    │       ├── name: e
    │       └── ownerReferences: []
    ├── timestamp: 1495798510.566214
    ├── <UNNAMED TASK>
    │   ├── poll_iteration: None
    │   └── timestamp: 1495798510.566402
    ├── network-client:get at 3,1/started
    │   ├── kind: Namespace
    │   ├── name: e
    │   ├── namespace: None
    │   ├── timestamp: 1495798510.566587
    │   ├── network-client:request at 3,2,1/started
    │   │   ├── method: GET
    │   │   ├── timestamp: 1495798510.566854
    │   │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces/e
    │   │   └── network-client:request at 3,2,2/succeeded
    │   │       └── timestamp: 1495798510.570049
    │   └── network-client:get at 3,3/failed
    │       ├── exception: txkube._exception.KubernetesError
    │       ├── reason: <KubernetesError: code = 404; status = v1.Status(status=u'Failure', code=404, reason=u'NotFound', details=v1.StatusDetails(kind=u'namespaces', group=None, name=u'e', retryAfterSeconds=None, causes=V1.statuscausePVector([])), message=u'namespaces "e" not found', metadata=v1.ListMeta(selfLink=None, resourceVersion=None))>
    │       └── timestamp: 1495798510.571157
    └── poll:start at 4/succeeded
        └── timestamp: 1495798510.571529

3fd46547-0772-441e-9896-6a52f1f8500b
└── network-client:create at 1/started
    ├── timestamp: 1495798510.571942
    ├── <UNNAMED TASK>
    │   ├── submitted_object
    │   │   ├── apiVersion: v1
    │   │   ├── kind: Namespace
    │   │   └── metadata
    │   │       ├── annotations
    │   │       ├── finalizers: []
    │   │       ├── labels
    │   │       │   ├── c: x
    │   │       │   └── v8: k
    │   │       ├── name: e
    │   │       └── ownerReferences: []
    │   └── timestamp: 1495798510.572287
    ├── network-client:request at 3,1/started
    │   ├── method: POST
    │   ├── timestamp: 1495798510.572626
    │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces
    │   ├── memory:create at 3,2,1/started
    │   │   ├── kind: namespaces
    │   │   ├── timestamp: 1495798510.574204
    │   │   └── memory:create at 3,2,2/succeeded
    │   │       └── timestamp: 1495798510.57565
    │   └── network-client:request at 3,3/succeeded
    │       └── timestamp: 1495798510.5765
    └── network-client:create at 4/succeeded
        ├── response_object
        │   ├── apiVersion: v1
        │   ├── kind: Namespace
        │   └── metadata
        │       ├── annotations
        │       ├── finalizers: []
        │       ├── labels
        │       │   ├── c: x
        │       │   └── v8: k
        │       ├── name: e
        │       └── ownerReferences: []
        └── timestamp: 1495798510.577317

681b6079-8efe-4f84-8e65-1d7813672458
└── network-client:create at 1/started
    ├── timestamp: 1495798510.628154
    ├── <UNNAMED TASK>
    │   ├── submitted_object
    │   │   ├── apiVersion: v1
    │   │   ├── data: None
    │   │   ├── kind: ConfigMap
    │   │   └── metadata
    │   │       ├── annotations
    │   │       ├── finalizers: []
    │   │       ├── labels
    │   │       │   ├── axvp7ist: a
    │   │       │   ├── az8dkywg/l: p
    │   │       │   ├── d74gcupm1vlm/xk5: e
    │   │       │   ├── g-u: dg
    │   │       │   ├── hs0dvu: do
    │   │       │   ├── r: y1
    │   │       │   ├── r2.pa.th.i/rnli: h
    │   │       │   ├── sr: fzaa52b
    │   │       │   ├── w: zr8
    │   │       │   └── y: h
    │   │       ├── name: d
    │   │       ├── namespace: e
    │   │       └── ownerReferences: []
    │   └── timestamp: 1495798510.62869
    ├── network-client:request at 3,1/started
    │   ├── method: POST
    │   ├── timestamp: 1495798510.629161
    │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces/e/configmaps
    │   ├── memory:create at 3,2,1/started
    │   │   ├── kind: configmaps
    │   │   ├── timestamp: 1495798510.631462
    │   │   └── memory:create at 3,2,2/succeeded
    │   │       └── timestamp: 1495798510.633133
    │   └── network-client:request at 3,3/succeeded
    │       └── timestamp: 1495798510.634102
    └── network-client:create at 4/succeeded
        ├── response_object
        │   ├── apiVersion: v1
        │   ├── data: None
        │   ├── kind: ConfigMap
        │   └── metadata
        │       ├── annotations
        │       ├── finalizers: []
        │       ├── labels
        │       │   ├── axvp7ist: a
        │       │   ├── az8dkywg/l: p
        │       │   ├── d74gcupm1vlm/xk5: e
        │       │   ├── g-u: dg
        │       │   ├── hs0dvu: do
        │       │   ├── r: y1
        │       │   ├── r2.pa.th.i/rnli: h
        │       │   ├── sr: fzaa52b
        │       │   ├── w: zr8
        │       │   └── y: h
        │       ├── name: d
        │       ├── namespace: e
        │       └── ownerReferences: []
        └── timestamp: 1495798510.635196

c49ed305-030b-48c0-88fa-3d8f49f7609c
└── network-client:list at 1/started
    ├── apiVersion: v1
    ├── kind: ConfigMap
    ├── timestamp: 1495798510.635709
    ├── network-client:request at 2,1/started
    │   ├── method: GET
    │   ├── timestamp: 1495798510.636105
    │   ├── url: https://kubernetes.example.invalid./api/v1/configmaps
    │   ├── memory:list at 2,2,1/started
    │   │   ├── kind: configmaps
    │   │   ├── timestamp: 1495798510.637864
    │   │   └── memory:list at 2,2,2/succeeded
    │   │       └── timestamp: 1495798510.638355
    │   └── network-client:request at 2,3/succeeded
    │       └── timestamp: 1495798510.639244
    └── network-client:list at 3/succeeded
        └── timestamp: 1495798510.640504

637a1c25-b51a-4adf-a793-3ecacaa0a1ed
└── network-client:delete at 1/started
    ├── kind: Namespace
    ├── name: e
    ├── namespace: None
    ├── timestamp: 1495798510.64151
    ├── network-client:request at 2,1/started
    │   ├── method: DELETE
    │   ├── timestamp: 1495798510.642039
    │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces/e
    │   └── network-client:request at 2,2/succeeded
    │       └── timestamp: 1495798510.645008
    └── network-client:delete at 3/succeeded
        └── timestamp: 1495798510.645366

fca69971-893b-4b04-9c33-e33a6f7008b0
└── poll:start at 1/started
    ├── obj
    │   ├── apiVersion: v1
    │   ├── kind: Namespace
    │   └── metadata
    │       ├── annotations
    │       ├── finalizers: []
    │       ├── labels
    │       │   ├── c: x
    │       │   └── v8: k
    │       ├── name: e
    │       └── ownerReferences: []
    ├── timestamp: 1495798510.645802
    ├── <UNNAMED TASK>
    │   ├── poll_iteration: None
    │   └── timestamp: 1495798510.646016
    ├── network-client:get at 3,1/started
    │   ├── kind: Namespace
    │   ├── name: e
    │   ├── namespace: None
    │   ├── timestamp: 1495798510.646276
    │   ├── network-client:request at 3,2,1/started
    │   │   ├── method: GET
    │   │   ├── timestamp: 1495798510.646669
    │   │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces/e
    │   │   └── network-client:request at 3,2,2/succeeded
    │   │       └── timestamp: 1495798510.649995
    │   └── network-client:get at 3,3/failed
    │       ├── exception: txkube._exception.KubernetesError
    │       ├── reason: <KubernetesError: code = 404; status = v1.Status(status=u'Failure', code=404, reason=u'NotFound', details=v1.StatusDetails(kind=u'namespaces', group=None, name=u'e', retryAfterSeconds=None, causes=V1.statuscausePVector([])), message=u'namespaces "e" not found', metadata=v1.ListMeta(selfLink=None, resourceVersion=None))>
    │       └── timestamp: 1495798510.651176
    └── poll:start at 4/succeeded
        └── timestamp: 1495798510.651542
}}}

logged-error: {{{
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 250, in inContext
    result = inContext.theWork()
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 266, in <lambda>
    inContext.theWork = lambda: context.call(ctx, func, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 122, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 85, in callWithContext
    return func(*args,**kw)
socket.gaierror: [Errno -2] Name or service not known
}}}

logged-error-1: {{{
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 250, in inContext
    result = inContext.theWork()
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 266, in <lambda>
    inContext.theWork = lambda: context.call(ctx, func, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 122, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 85, in callWithContext
    return func(*args,**kw)
socket.gaierror: [Errno -2] Name or service not known
}}}

twisted-log: {{{
2017-05-26 07:35:10-0400 [-] while looking up example.invalid. with <bound method HostnameEndpoint._fallbackNameResolution of <twisted.internet.endpoints.HostnameEndpoint object at 0x7f1c3d205c10>>
        Traceback (most recent call last):
          File "/usr/lib/python2.7/threading.py", line 801, in __bootstrap_inner
            self.run()
          File "/usr/lib/python2.7/threading.py", line 754, in run
            self.__target(*self.__args, **self.__kwargs)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/_threads/_threadworker.py", line 46, in work
            task()
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/_threads/_team.py", line 190, in doWork
            task()
        --- <exception caught here> ---
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 250, in inContext
            result = inContext.theWork()
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 266, in <lambda>
            inContext.theWork = lambda: context.call(ctx, func, *args, **kw)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 122, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 85, in callWithContext
            return func(*args,**kw)
        socket.gaierror: [Errno -2] Name or service not known

2017-05-26 07:35:10-0400 [-] while looking up example.invalid. with <bound method HostnameEndpoint._fallbackNameResolution of <twisted.internet.endpoints.HostnameEndpoint object at 0x7f1c3d243890>>
        Traceback (most recent call last):
          File "/usr/lib/python2.7/threading.py", line 801, in __bootstrap_inner
            self.run()
          File "/usr/lib/python2.7/threading.py", line 754, in run
            self.__target(*self.__args, **self.__kwargs)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/_threads/_threadworker.py", line 46, in work
            task()
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/_threads/_team.py", line 190, in doWork
            task()
        --- <exception caught here> ---
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 250, in inContext
            result = inContext.theWork()
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 266, in <lambda>
            inContext.theWork = lambda: context.call(ctx, func, *args, **kw)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 122, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 85, in callWithContext
            return func(*args,**kw)
        socket.gaierror: [Errno -2] Name or service not known

2017-05-26 07:35:10-0400 [-] Main loop terminated.
}}}

unhandled-error-in-deferred: {{{
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/defer.py", line 653, in _runCallbacks
    current.result = callback(current.result, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/endpoints.py", line 954, in startConnectionAttempts
    "no results for hostname lookup: {}".format(self._hostStr)
twisted.internet.error.DNSLookupError: DNS lookup failed: no results for hostname lookup: example.invalid..
}}}

unhandled-error-in-deferred-1: {{{
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/defer.py", line 653, in _runCallbacks
    current.result = callback(current.result, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/endpoints.py", line 954, in startConnectionAttempts
    "no results for hostname lookup: {}".format(self._hostStr)
twisted.internet.error.DNSLookupError: DNS lookup failed: no results for hostname lookup: example.invalid..
}}}


txkube.test.test_memory.KubernetesClientIntegrationTests.test_configmap
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/endpoints.py", line 992, in startConnectionAttempts
    iterateEndpoint.start(self._attemptDelay)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/task.py", line 190, in start
    self.starttime = self.clock.seconds()
exceptions.AttributeError: 'Redirectable' object has no attribute 'seconds'

txkube.test.test_network.NetworkKubernetesFromContextTests.test_client_chain_certificate
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/endpoints.py", line 992, in startConnectionAttempts
    iterateEndpoint.start(self._attemptDelay)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/task.py", line 190, in start
    self.starttime = self.clock.seconds()
exceptions.AttributeError: 'MemoryReactor' object has no attribute 'seconds'

<not in test>
-------------------------------------------------------------------------------
Ran 141 tests in 15.685s

From paul.tremberth at gmail.com  Fri May 26 07:02:10 2017
From: paul.tremberth at gmail.com (Paul Tremberth)
Date: Fri, 26 May 2017 15:02:10 +0200
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
Message-ID: <CAELvJCvnAzq793br7ZrAgTawULbUJQYQNapOgtiTaTdz4=4=bA@mail.gmail.com>

Hi Amber,

I have tested Twisted 17.5.0rc2 with latest Scrapy:

- the issue we have with our resolver in Python 2 looks fixed indeed, thank
you for this (https://twistedmatrix.com/trac/ticket/9137)

> - Support for OpenSSL 1.1.0.

- I tested with OpenSSL 1.1 and am still seeing what I reported on the
mailing list, about elliptic curves:
https://twistedmatrix.com/pipermail/twisted-web/2017-April/005293.html

is there a chance of getting it fixed too in 17.5?

- I also commented on GitHub about issues with ESMTPSenderFactory and
Python 3
with a couple of fixes I tried locally in twisted/mail/smtp.py
(but I did not open a ticket on Trac unfortunately so it may have been
unnoticed)
https://github.com/scrapy/scrapy/issues/2375#issuecomment-299226510


Thanks.

/Paul

On Fri, May 26, 2017 at 8:35 AM, Amber Brown <hawkowl at atleastfornow.net>
wrote:

> Hi everyone,
>
> Fresh from PyCon US, comes a 17.5 prerelease. Fancy things in this release:
>
> - twisted.python.url has been spun out into the new 'hyperlink' package;
> importing twisted.python.url is now a compatibility alias
> - Support for OpenSSL 1.1.0.
> - Fixes around the reactor DNS resolver changes in 17.1, solving all known
> regressions
> - Deferred.asFuture and Deferred.fromFuture, to allow you to map asyncio
> Futures to Twisted Deferreds and vice versa, for use the with Python 3+
> asyncioreactor in Twisted
> - Support for TLS 1.3 ciphersuites, in advance of a released OpenSSL to
> enable the protocol
> - Further Python 3 support in twisted.web, initial support in
> twisted.mail.smtp
>
> Please see the NEWS.rst file and download the tarball at
> https://twistedmatrix.com/Releases/rc/17.5.0rc2/ . (rc1 fell to metadata
> mishaps!)
>
> Let me know if you notice anything out of the ordinary. If there's no
> problems, it'll release in the next week or so.
>
> Twisted Regards,
>
> Amber Brown (HawkOwl)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170526/723ab7e8/attachment.html>

From hawkowl at atleastfornow.net  Fri May 26 14:07:46 2017
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 27 May 2017 06:07:46 +1000
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <CAELvJCvnAzq793br7ZrAgTawULbUJQYQNapOgtiTaTdz4=4=bA@mail.gmail.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
 <CAELvJCvnAzq793br7ZrAgTawULbUJQYQNapOgtiTaTdz4=4=bA@mail.gmail.com>
Message-ID: <CAMxb2isghk7D=OgwhdLee=+a6+Az6_y_Nv8Xx2MD=_EYurXeGA@mail.gmail.com>

Hi Paul,

I don't think we'll be able to get any of those fixed for 17.5, but since
we have no outstanding regressions, there's nothing stopping me doing a
release next month if those things get fixed in the meantime.

- Amber

On 26 May 2017 at 23:02, Paul Tremberth <paul.tremberth at gmail.com> wrote:

> Hi Amber,
>
> I have tested Twisted 17.5.0rc2 with latest Scrapy:
>
> - the issue we have with our resolver in Python 2 looks fixed indeed,
> thank you for this (https://twistedmatrix.com/trac/ticket/9137)
>
> > - Support for OpenSSL 1.1.0.
>
> - I tested with OpenSSL 1.1 and am still seeing what I reported on the
> mailing list, about elliptic curves:
> https://twistedmatrix.com/pipermail/twisted-web/2017-April/005293.html
>
> is there a chance of getting it fixed too in 17.5?
>
> - I also commented on GitHub about issues with ESMTPSenderFactory and
> Python 3
> with a couple of fixes I tried locally in twisted/mail/smtp.py
> (but I did not open a ticket on Trac unfortunately so it may have been
> unnoticed)
> https://github.com/scrapy/scrapy/issues/2375#issuecomment-299226510
>
>
> Thanks.
>
> /Paul
>
> On Fri, May 26, 2017 at 8:35 AM, Amber Brown <hawkowl at atleastfornow.net>
> wrote:
>
>> Hi everyone,
>>
>> Fresh from PyCon US, comes a 17.5 prerelease. Fancy things in this
>> release:
>>
>> - twisted.python.url has been spun out into the new 'hyperlink' package;
>> importing twisted.python.url is now a compatibility alias
>> - Support for OpenSSL 1.1.0.
>> - Fixes around the reactor DNS resolver changes in 17.1, solving all
>> known regressions
>> - Deferred.asFuture and Deferred.fromFuture, to allow you to map asyncio
>> Futures to Twisted Deferreds and vice versa, for use the with Python 3+
>> asyncioreactor in Twisted
>> - Support for TLS 1.3 ciphersuites, in advance of a released OpenSSL to
>> enable the protocol
>> - Further Python 3 support in twisted.web, initial support in
>> twisted.mail.smtp
>>
>> Please see the NEWS.rst file and download the tarball at
>> https://twistedmatrix.com/Releases/rc/17.5.0rc2/ . (rc1 fell to metadata
>> mishaps!)
>>
>> Let me know if you notice anything out of the ordinary. If there's no
>> problems, it'll release in the next week or so.
>>
>> Twisted Regards,
>>
>> Amber Brown (HawkOwl)
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170527/386c606c/attachment.html>

From trac at twistedmatrix.com  Sun May 28 00:05:25 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 May 2017 06:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1495951525.96.6506409386513711783@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170528/0cd4dcd1/attachment.html>

From glyph at twistedmatrix.com  Mon May 29 13:25:47 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 29 May 2017 12:25:47 -0700
Subject: [Twisted-Python] on adopting projects
In-Reply-To: <CAFycZ9dOPMayg_DJQTTQH8E1iaaJO8CCNAMy+da6n-r27sVCGQ@mail.gmail.com>
References: <8DA83CD3-4B6C-4BC9-932A-66CF0432A56B@twistedmatrix.com>
 <CAFycZ9dOPMayg_DJQTTQH8E1iaaJO8CCNAMy+da6n-r27sVCGQ@mail.gmail.com>
Message-ID: <44FFCC67-A094-4B51-8D26-A576ABB9810D@twistedmatrix.com>


> On May 26, 2017, at 2:24 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> On 25 May 2017 at 01:42, Glyph <glyph at twistedmatrix.com> wrote:
>> As we're splitting the project into more parts, we may have to do Github org surgery to move projects around.
>> 
>> In particular, recently, twisted.python.url got split out into a new package called 'hyperlink', which we were initially thinking the Twisted org would adopt.  (As it happens a different org will probably adopt it, more on that later.)  Adi created a repo to allow Mahmoud to do this, and gave him permissions on said repo.
>> 
>> I just deleted this repo :-).  In the future, the right way to do this is to have the owner transfer the repo over to the relevant org (this is in the "danger zone" in the github UI).  Creating empty repos to move projects around breaks a whole bunch of github functionality (clones of the original repo can't update, ticket & PR history doesn't transfer over and can't be moved, links to forks get broken) and we should generally not do it.
> 
> Thanks Glyph for the info.
> 
> It might be a bit offtopic, but there is one info / policy that I
> think that we should adapt when splitting a project.
> 
> When a project is split, it is deprecated in Twisted in the same time.
> 
> We should keep all the tests in Twisted until the deprecations
> deadline is triggered.
> This should help prevent any API breaks.
> 
> There is still a risk for things to break, even if we have the tests
> (as we might not have 100 public api coverage).
> 
> So maybe, when a new project is adopted there should be a commitment
> to keep the same API backward compatibility policy for at least one
> year.
> 
> After one year the project can go wild and implement whatever quality
> policy they want... ex commit/release without any review or without
> tests.
> 
> What do you think?
> Maybe I am just paranoid, and there is no risk  quality decrease by
> outsourcing to external projects.

I understand the concern.  These split-outs have not all been conducted with the greatest transparency, but mainly because communicating everything publicly is a bunch of extra work.

For the most part, split-out projects will just go into the Twisted org anyway, and will have the same compatibility contract.  I do not anticipate splitting out anything with a deeply involved portability contract, the reactors will remain on our existing CI for the forseeable future :).

Hyperlink is a bit of a weird case, in that its highly general nature meant that a more general org (hyper) made more sense to adopt it, but we are in the process of setting the project up and as I've discussed with Cory and Mahmoud it will probably have commit from most Twisted folks as well.  While this one isn't living in the Twisted org, the python-hyper org takes its compatibility contract equally, if not more seriously.

However, there is at least an unofficial agreement amongst all projects split from Twisted that they will adhere to largely the same compatibility policy as Twisted itself.  In the case of Hyperlink, it is specifically documented as going above and beyond: http://hyperlink.readthedocs.io/en/latest/design.html#origins-and-backwards-compatibility <http://hyperlink.readthedocs.io/en/latest/design.html#origins-and-backwards-compatibility>.

(Although perhaps someone should file a PR to remove the word "legacy" there :).)

In short: let's keep an eye on this, if we start to have compatibility drift or issues, then by all means let's add some belt-and-suspenders checks, but I think we can be optimistic about not having compatibility problems.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170529/ce943844/attachment.html>

From glyph at twistedmatrix.com  Mon May 29 13:27:00 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 29 May 2017 12:27:00 -0700
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <CAEeXt4MUZknJ5=8VoWmROXznC8XVpD5PZkrqy8i64HQVhC4giA@mail.gmail.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
 <CAEeXt4MUZknJ5=8VoWmROXznC8XVpD5PZkrqy8i64HQVhC4giA@mail.gmail.com>
Message-ID: <8DBF3FAC-B164-4196-B92B-9A98E668D4A0@twistedmatrix.com>


> On May 26, 2017, at 4:38 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Some of the txkube problems have been resolved but either not entirely or some new ones have been introduced.  Attached is a log of the failures from the unit test suite.  I haven't investigated these new errors in depth yet so I won't say whether these are txkube's fault or Twisted's fault... but at least something is at fault.

I do think we need to block the final release until we at least know where the responsibility lies for these tracebacks :-\.  These all still pass on 16.6.0 I presume?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170529/fe647a22/attachment.html>

From exarkun at twistedmatrix.com  Mon May 29 17:57:39 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 29 May 2017 19:57:39 -0400
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <8DBF3FAC-B164-4196-B92B-9A98E668D4A0@twistedmatrix.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
 <CAEeXt4MUZknJ5=8VoWmROXznC8XVpD5PZkrqy8i64HQVhC4giA@mail.gmail.com>
 <8DBF3FAC-B164-4196-B92B-9A98E668D4A0@twistedmatrix.com>
Message-ID: <CAEeXt4N8BW8jOs135nkdpidwarMjLx6zteCQGHo7emAzUbB0Dg@mail.gmail.com>

On Mon, May 29, 2017 at 3:27 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 26, 2017, at 4:38 AM, Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
> Some of the txkube problems have been resolved but either not entirely or
> some new ones have been introduced.  Attached is a log of the failures from
> the unit test suite.  I haven't investigated these new errors in depth yet
> so I won't say whether these are txkube's fault or Twisted's fault... but
> at least *something* is at fault.
>
>
> I do think we need to block the final release until we at least know where
> the responsibility lies for these tracebacks :-\.  These all still pass on
> 16.6.0 I presume?
>

They do, yea.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170529/0727861d/attachment.html>

From cory at lukasa.co.uk  Tue May 30 02:40:51 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 30 May 2017 09:40:51 +0100
Subject: [Twisted-Python] on adopting projects
In-Reply-To: <44FFCC67-A094-4B51-8D26-A576ABB9810D@twistedmatrix.com>
References: <8DA83CD3-4B6C-4BC9-932A-66CF0432A56B@twistedmatrix.com>
 <CAFycZ9dOPMayg_DJQTTQH8E1iaaJO8CCNAMy+da6n-r27sVCGQ@mail.gmail.com>
 <44FFCC67-A094-4B51-8D26-A576ABB9810D@twistedmatrix.com>
Message-ID: <0D799803-3001-4407-876C-55610E694C42@lukasa.co.uk>


> On 29 May 2017, at 20:25, Glyph <glyph at twistedmatrix.com> wrote:
> 
> Hyperlink is a bit of a weird case, in that its highly general nature meant that a more general org (hyper) made more sense to adopt it, but we are in the process of setting the project up and as I've discussed with Cory and Mahmoud it will probably have commit from most Twisted folks as well.  While this one isn't living in the Twisted org, the python-hyper org takes its compatibility contract equally, if not more seriously.

To elaborate on this: ordinarily, when adopting a project, hyper will grant anyone with “write” permission on an original personal repo “admin” on it when it’s migrated (because personal repos don’t allow more than one admin, and this is usually what people want). Additionally, anyone who has committed but has no specific elevated privileges is granted “write” on that repo. Naturally, this is done after ensuring that branches are appropriately protected.

However, acknowledging the unique case of a library pulled out of Twisted, an extra step will be taken, which is that all Twisted committers will be invited to hyper and given “admin” on hyperlink. This takes us closest to the original set of owners and permissions while also ensuring that this doesn’t seem like a coup or like Twisted committers will not be empowered to change their minds. If anyone ever feels unsatisfied with the stewardship of hyper, well, you’ll all have admin privileges and be able to move the repo away again. ;)

> However, there is at least an unofficial agreement amongst all projects split from Twisted that they will adhere to largely the same compatibility policy as Twisted itself.  In the case of Hyperlink, it is specifically documented as going above and beyond: http://hyperlink.readthedocs.io/en/latest/design.html#origins-and-backwards-compatibility <http://hyperlink.readthedocs.io/en/latest/design.html#origins-and-backwards-compatibility>.

We have no plans to change this documentation, which means it’ll remain the policy of the library.

Cory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20170530/96bca0f1/attachment-0001.html>

From twisted-python at 2xlp.com  Wed May  3 17:21:24 2017
From: twisted-python at 2xlp.com (jonathan vanasco)
Date: Wed, 3 May 2017 19:21:24 -0400
Subject: [Twisted-Python] process manager for twisted daemons?
Message-ID: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>


We have a few twisted daemons running on a linux machine under Supervisord as the process manager. Unfortunately, Supervisord is missing a feature that is pretty critical to our needs, so must be replaced with something that supports it -- the feature is the ability to persist state across reboots.

We've run into a situation more than once where we "stop" a Twisted service that caused issues, begun to triage it, and then the machine hits a reboot which causes the broken service to start up again and re-corrupts the data.  The only way to maintain a "stop" across reboots in Supervisor is to "stop", then edit the config files so it doesn't start up again.  If someone remembers to shut things off this way, they often forget to turn them back on again.  We're at the point where using supervisor in our stack has caused more problems than conveniences.

Is anyone deploying their twisted services with something other than Supervisor?  If so, I'd love to know.



From dawuud at riseup.net  Wed May  3 17:46:20 2017
From: dawuud at riseup.net (dawuud)
Date: Wed, 3 May 2017 23:46:20 +0000
Subject: [Twisted-Python] process manager for twisted daemons?
In-Reply-To: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
References: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
Message-ID: <20170503234620.GA4606@riseup.net>


why not use systemd to manage the daemon?

On Wed, May 03, 2017 at 07:21:24PM -0400, jonathan vanasco wrote:
> 
> We have a few twisted daemons running on a linux machine under Supervisord as the process manager. Unfortunately, Supervisord is missing a feature that is pretty critical to our needs, so must be replaced with something that supports it -- the feature is the ability to persist state across reboots.
> 
> We've run into a situation more than once where we "stop" a Twisted service that caused issues, begun to triage it, and then the machine hits a reboot which causes the broken service to start up again and re-corrupts the data.  The only way to maintain a "stop" across reboots in Supervisor is to "stop", then edit the config files so it doesn't start up again.  If someone remembers to shut things off this way, they often forget to turn them back on again.  We're at the point where using supervisor in our stack has caused more problems than conveniences.
> 
> Is anyone deploying their twisted services with something other than Supervisor?  If so, I'd love to know.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20170503/5bc37ba6/attachment-0002.sig>

From mithrandi at mithrandi.net  Wed May  3 17:46:58 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 03 May 2017 23:46:58 +0000
Subject: [Twisted-Python] process manager for twisted daemons?
In-Reply-To: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
References: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
Message-ID: <CAMcKhMS8npt2cGYeJHhZm5frz+eUJ89OMfSKWZ8WQ2PC=82+_A@mail.gmail.com>

On Thu, 4 May 2017 at 01:21 jonathan vanasco <twisted-python at 2xlp.com>
wrote:

> Is anyone deploying their twisted services with something other than
> Supervisor?  If so, I'd love to know.
>

It sounds like systemd has what you want here, and should work fine for
your Twisted services, assuming you don't have other constraints that
exclude its use.

systemctl stop <service> will temporarily stop a service, but it will be
restarted on boot if it was configured to do so. However, you can do systemctl
disable --now <service> which will remove the configuration to start it on
boot as well as stopping it. To reverse this, you would do systemctl enable
--now <service> which would reenable it and start it.

This is basically doing the same as you were doing with supervisord, but
since you can combine the operations into a single command, you don't have
to worry about forgetting to do half of the process.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170503/95adde31/attachment-0002.html>

From twisted-python at 2xlp.com  Wed May  3 18:59:27 2017
From: twisted-python at 2xlp.com (jonathan vanasco)
Date: Wed, 3 May 2017 20:59:27 -0400
Subject: [Twisted-Python] process manager for twisted daemons?
In-Reply-To: <CAMcKhMS8npt2cGYeJHhZm5frz+eUJ89OMfSKWZ8WQ2PC=82+_A@mail.gmail.com>
References: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
 <CAMcKhMS8npt2cGYeJHhZm5frz+eUJ89OMfSKWZ8WQ2PC=82+_A@mail.gmail.com>
Message-ID: <CC02549B-24DF-4F74-BB5C-D797233EF0A2@2xlp.com>


On May 3, 2017, at 7:46 PM, Tristan Seligmann wrote:

> It sounds like systemd has what you want here, and should work fine for your Twisted services, assuming you don't have other constraints that exclude its use.

we were avoiding it because of a few reasons, but will need to rethink that now.  thanks!


From bra at fsn.hu  Thu May  4 06:04:02 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Thu, 4 May 2017 14:04:02 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
Message-ID: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>

Hi,

I would like to copy a file between two HTTP servers in the most 
efficient manner, which probably means a streaming down/upload (GET/PUT) 
with the producer/consumer scheme.

Can this be done easily, could somebody write a simple example?

Thanks,




From p.mayers at imperial.ac.uk  Thu May  4 07:04:13 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 4 May 2017 14:04:13 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
Message-ID: <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>

On 04/05/17 13:04, Nagy, Attila wrote:
> Hi,
> 
> I would like to copy a file between two HTTP servers in the most 
> efficient manner, which probably means a streaming down/upload (GET/PUT) 
> with the producer/consumer scheme.
> 
> Can this be done easily, could somebody write a simple example?

I guess it'll look something like this:

https://gist.github.com/philmayers/692d04c15a71d3905e075b30f0543f23

Only lightly tested, but seems to work. There's a lot of debugging print 
statements in the above code which can obviously be discarded or turned 
into logging statements in production use.



From bra at fsn.hu  Thu May  4 07:32:24 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Thu, 4 May 2017 15:32:24 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
Message-ID: <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>

On 05/04/2017 03:04 PM, Phil Mayers wrote:
> On 04/05/17 13:04, Nagy, Attila wrote:
>> Hi,
>>
>> I would like to copy a file between two HTTP servers in the most 
>> efficient manner, which probably means a streaming down/upload 
>> (GET/PUT) with the producer/consumer scheme.
>>
>> Can this be done easily, could somebody write a simple example?
>
> I guess it'll look something like this:
>
> https://gist.github.com/philmayers/692d04c15a71d3905e075b30f0543f23
>
> Only lightly tested, but seems to work. There's a lot of debugging 
> print statements in the above code which can obviously be discarded or 
> turned into logging statements in production use.
In the meantime I've started to write one and came out with this:
https://gist.github.com/bra-fsn/42e556ddd74ff34467b17b9a6d613b33

Are there any problems with this approach?



From burak.arslan at arskom.com.tr  Thu May  4 07:58:20 2017
From: burak.arslan at arskom.com.tr (Burak Arslan)
Date: Thu, 4 May 2017 16:58:20 +0300
Subject: [Twisted-Python] process manager for twisted daemons?
In-Reply-To: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
References: <144E5176-3763-4FA0-9D0E-E9140B713850@2xlp.com>
Message-ID: <0c4cd8e5-4132-52b1-b359-0a113580c366@arskom.com.tr>

Hello,


On 05/04/17 02:21, jonathan vanasco wrote:
> Is anyone deploying their twisted services with something other than Supervisor?  If so, I'd love to know.

We're using djb's daemontools (with the -encore patchset) to manage our
twisted and non-twisted (C++) daemons. Two advantages:

1. Biggest advantage for us: cross-platform. Every Linux / BSD distro I
know of has daemontools supported. You won't have to depend on
systemd/openrc etc. Slightly related: http://cr.yp.to/compatibility.html

2. svc, daemontools' service manager is pretty straightforward to use.
See: https://cr.yp.to/daemontools/svc.html

3. Takes care of forking, logging, log rotation, etc. Can filter logs
based on a given regexp. Logs only stdout but if you do "exec 2>&1"
before starting your daemon, you'll get stderr too.

I also find it dead simple to integrate your app with daemontools. 
Examples and other advantages: https://cr.yp.to/daemontools/faq/create.html

The encore patchset (https://untroubled.org/daemontools-encore/) adds
stuff like "email me when the process is restarted". It's not strictly
needed as you can implement it in your run script but it's a nice-to-have.

I hope this helps.

Best,
Burak



From p.mayers at imperial.ac.uk  Thu May  4 08:48:15 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 4 May 2017 15:48:15 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
Message-ID: <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>

On 04/05/17 14:32, Nagy, Attila wrote:

> Are there any problems with this approach?

You're poking at a private member of the .original IResponse there, and 
moreover the transport object which seems risky.

The single treq.collect call to consumer.write will also not necessarily 
respect the consumer-issued flow control (even if touching the 
_transport was valid, you don't know you won't get buffered data after 
you've been asked to stop)



From bra at fsn.hu  Thu May  4 09:30:50 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Thu, 4 May 2017 17:30:50 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
Message-ID: <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>

On 05/04/2017 04:48 PM, Phil Mayers wrote:
> On 04/05/17 14:32, Nagy, Attila wrote:
>
>> Are there any problems with this approach?
>
> You're poking at a private member of the .original IResponse there, 
> and moreover the transport object which seems risky.
I would like to use the simplest (and correct of course) solution. 
Juggling with buffering/data by hand seems even more risky to me.
Your implementation seems to do things which twisted should do, which 
(also) doesn't seem to be right. :)
It would be nice if this could be solved in an elegant way.

>
> The single treq.collect call to consumer.write will also not 
> necessarily respect the consumer-issued flow control (even if touching 
> the _transport was valid, you don't know you won't get buffered data 
> after you've been asked to stop)
It seems to do what I want to do. :)

BTW (without reading it), I've tried your solution (thank you very much 
for it!).
 From a 1073741824 bytes source file, it transferred a 1056490639 
destination file.
Another run made a 1044534695 bytes destination file.
Well, each run yields a different size.




From manish.tomar at gmail.com  Thu May  4 09:38:05 2017
From: manish.tomar at gmail.com (Manish Tomar)
Date: Thu, 4 May 2017 08:38:05 -0700
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
Message-ID: <CABH8oEM82TKkygcPB9G_DPGV-2qUTJGXeONXEdDnLpCLu5Ok=g@mail.gmail.com>

Have you looked at
http://treq.readthedocs.io/en/latest/howto.html#handling-streaming-responses
?

Regards,
Manish

On Thu, May 4, 2017 at 5:04 AM, Nagy, Attila <bra at fsn.hu> wrote:

> Hi,
>
> I would like to copy a file between two HTTP servers in the most efficient
> manner, which probably means a streaming down/upload (GET/PUT) with the
> producer/consumer scheme.
>
> Can this be done easily, could somebody write a simple example?
>
> Thanks,
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170504/eaa6dd5d/attachment-0002.html>

From manish.tomar at gmail.com  Thu May  4 13:03:00 2017
From: manish.tomar at gmail.com (Manish Tomar)
Date: Thu, 4 May 2017 12:03:00 -0700
Subject: [Twisted-Python] [ANN] bloc - group membership framework
Message-ID: <CABH8oEOrhwas2=Fe0fpmQoOz4_uJnc3T3BpGSsph=+nEqk0C=Q@mail.gmail.com>

Hi all,

I've implemented a simple single-master group membership framework on
Twisted that can be used for mutually partitioning workload among multiple
nodes.

https://github.com/manishtomar/bloc

Please do try it out and let me know if it helps in any way.

Regards,
Manish
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170504/a577531a/attachment-0002.html>

From glyph at twistedmatrix.com  Fri May  5 00:38:47 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 May 2017 23:38:47 -0700
Subject: [Twisted-Python] [ANN] bloc - group membership framework
In-Reply-To: <CABH8oEOrhwas2=Fe0fpmQoOz4_uJnc3T3BpGSsph=+nEqk0C=Q@mail.gmail.com>
References: <CABH8oEOrhwas2=Fe0fpmQoOz4_uJnc3T3BpGSsph=+nEqk0C=Q@mail.gmail.com>
Message-ID: <8BE583F3-9A43-449E-9969-8A49A2B7875B@twistedmatrix.com>


> On May 4, 2017, at 12:03 PM, Manish Tomar <manish.tomar at gmail.com> wrote:
> 
> Hi all,
> 
> I've implemented a simple single-master group membership framework on Twisted that can be used for mutually partitioning workload among multiple nodes. 
> 
> https://github.com/manishtomar/bloc <https://github.com/manishtomar/bloc>
> 
> Please do try it out and let me know if it helps in any way.

Thanks Manish!  This README looks like a great intro.

Are there any plans to extend this to something consensus-based or is there a range of applications for which single-master is better?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170504/f551470e/attachment-0002.html>

From p.mayers at imperial.ac.uk  Fri May  5 02:26:49 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 5 May 2017 09:26:49 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
Message-ID: <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>

On 04/05/17 16:30, Nagy, Attila wrote:

> I would like to use the simplest (and correct of course) solution.
> Juggling with buffering/data by hand seems even more risky to me.

The problem with the approach you've outlined is that it treats the 
transport (a private member) in ways that I suspect are invalid. In 
particular there's no handling of the length of the object or chunked 
encodings - I suspect what you're doing will only work on simple HTTP 
requests with no connection reuse.

I *think* if you use the t.web deliverBody response method, you get 
legal access to a transport (via an IProtocol you provide) and the API 
docs confirm that transport can be accessed and paused.

However if you look at:

https://github.com/twisted/twisted/blob/twisted-17.1.0/src/twisted/web/_newclient.py#L1069

...you'll see that deliverBody starts writing to the transport straight 
away, and you have no way to know if the consumer will have been 
provided to IBodyProducer at that point, or if it'll have been paused.

I think you inevitably will have to buffer some data, and a quick PoC of 
that code suggests to me that handling of the return deferred from 
startProducing is quite complex.


Perhaps someone more knowledgeable than I can chime in here?

> Your implementation seems to do things which twisted should do, which
> (also) doesn't seem to be right. :)
> It would be nice if this could be solved in an elegant way.

On that I completely agree. It could be that there's some simple idiom 
or built-in code for this that I'm unaware of.

> BTW (without reading it), I've tried your solution (thank you very much
> for it!).
> From a 1073741824 bytes source file, it transferred a 1056490639
> destination file.

Hey, I did say lightly tested ;o)

I think it's a bug in cleanly handling things at the end of the request.



From bra at fsn.hu  Fri May  5 03:41:41 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Fri, 5 May 2017 11:41:41 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
Message-ID: <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>

On 05/05/2017 10:26 AM, Phil Mayers wrote:
> On 04/05/17 16:30, Nagy, Attila wrote:
>
>> I would like to use the simplest (and correct of course) solution.
>> Juggling with buffering/data by hand seems even more risky to me.
>
> The problem with the approach you've outlined is that it treats the 
> transport (a private member) in ways that I suspect are invalid. In 
> particular there's no handling of the length of the object or chunked 
> encodings - I suspect what you're doing will only work on simple HTTP 
> requests with no connection reuse.
What possible side effects do you see here? What problems could it cause?
So far I've tried to copy a lot of files in parallel, arbitrarily drop 
connections. Everything seems OK.
The file is either transferred in its entirety or (in case of dropped 
connections) not.
>
>> Your implementation seems to do things which twisted should do, which
>> (also) doesn't seem to be right. :)
>> It would be nice if this could be solved in an elegant way.
>
> On that I completely agree. It could be that there's some simple idiom 
> or built-in code for this that I'm unaware of.
I couldn't find a complete example for this task, so it would be nice if 
somebody more experienced could share the secret of doing this right and 
nice. :)

Thanks,



From p.mayers at imperial.ac.uk  Fri May  5 04:29:15 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 5 May 2017 11:29:15 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
Message-ID: <7a42c647-131e-2132-f55b-ea636aaf891f@imperial.ac.uk>

On 05/05/17 10:41, Nagy, Attila wrote:

> What possible side effects do you see here? What problems could it cause?
> So far I've tried to copy a lot of files in parallel, arbitrarily drop 
> connections. Everything seems OK.
> The file is either transferred in its entirety or (in case of dropped 
> connections) not.

Cool. If you're happy using private members, knock yourself out.



From cory at lukasa.co.uk  Fri May  5 05:10:47 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Fri, 5 May 2017 12:10:47 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
Message-ID: <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>


> On 5 May 2017, at 10:41, Nagy, Attila <bra at fsn.hu> wrote:
> 
> On 05/05/2017 10:26 AM, Phil Mayers wrote:
>> On 04/05/17 16:30, Nagy, Attila wrote:
>> 
>>> I would like to use the simplest (and correct of course) solution.
>>> Juggling with buffering/data by hand seems even more risky to me.
>> 
>> The problem with the approach you've outlined is that it treats the transport (a private member) in ways that I suspect are invalid. In particular there's no handling of the length of the object or chunked encodings - I suspect what you're doing will only work on simple HTTP requests with no connection reuse.
> What possible side effects do you see here? What problems could it cause?

The first is that Twisted will break your code eventually. Private member attributes are not covered by Twisted’s deprecation policy, and they can be changed without warning for any reason. So you’ll need to pin your Twisted version.

As a second note, you may lock yourself out of HTTP/2. HTTP/2 is not guaranteed to give you access to a raw transport object (though it might), because in HTTP/2 the protocol is not a dumb byte pipe like it is in HTTP/1.1. Code like this forces Twisted devs who want to add HTTP/2 support (like myself) to implement HTTP/2 as a multiple-object abstraction to allow each request/response pair’s underlying “transport” member to act like a dumb byte-pipe transport, when we’d much rather use a less complex abstraction (as an example you should look at the HTTP/2 server code in twisted.web, which has multiple classes to maintain this fiction that you can just call “transport.write” and expect that to work).

As a third note, your code does not handle the possibility that original._transport may not implement IPushProducer. While *in practice* it tends to, it needn’t. On top of that, it is not forbidden for an IPushProducer implementation to call write() even when paused, and code that wants to be correct in the face of all situations will need to be able to buffer anyway.

However, you’re right that this is not ideal. I think the best solution would be an enhancement to twisted.web that updates the default Response object to accept an IConsumer as the protocol argument of deliverBody. This would allow t.w._newclient.Response to be the arbiter of what it means to “pause” production, and allow you to continue to proxy between the two but without accessing a private member (you’d get given the producer you need to pause in registerProducer).

If that’s an enhancement you’d be interested in, I can work with you to get that patch in place. Then your code would change a bit (note that this code won’t work right now):

class UploadProducer(protocol.Protocol):
    implements(IBodyProducer)
    implements(IConsumer)

    def __init__(self, get_resp):
        self.length = get_resp.length
        self.producing = False
        self._producer = None
        self._consumer = None
        self._completed = Deferred()

    # IConsumer
    def registerProducer(self, producer, streaming):
        assert streaming
        self._producer = producer
        if self._consumer is None:
            self._producer.pauseProducing()

    def unregisterProducer(self):
        # Raise an error or something
        pass

    def write(self, data):
        self._consumer.write(data)

    # IProtocol
    def connectionLost(self, reason):
        self._completed.callback(reason)
    
    # IBodyProducer
    def startProducing(self, consumer):
        if self._producer is not None:
            self._producer.resumeProducing()
        self._consumer = consumer
        return completed

    def resumeProducing(self):
        self._producer.resumeProducing()
    
    def pauseProducing(self):
        self._producer.pauseProducing()
    
    def stopProducing(self):
        self._producer.stopProducing()


@inlineCallbacks
def copy(src, dst):
    get_resp = yield treq.get(src, unbuffered=True)
    print "GET", get_resp.code, get_resp.original
    producer = UploadProducer(get_resp)
    get_resp.deliverBody(producer)
    
    put_resp = yield treq.put(dst,data=producer)
    print "PUT", put_resp, put_resp.code    


With this arrangement as well it’d potentially be possible to use something like tubes, or at least get closer to using tubes for this use case. Right now it’s a bit of an annoyance that t.w._newclient doesn’t allow the body receiving protocol to exert backpressure on the data.

Anyway, just a thought.

Cory


From p.mayers at imperial.ac.uk  Fri May  5 05:38:49 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 5 May 2017 12:38:49 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
Message-ID: <c6a9c889-b0a4-fcc4-3e0f-2a0a325f851f@imperial.ac.uk>

On 05/05/17 12:10, Cory Benfield wrote:

> As a second note, you may lock yourself out of HTTP/2. HTTP/2 is not
> guaranteed to give you access to a raw transport object (though it

FWIW this kind of thing was, more or less, what I was thinking. It seems 
unlikely that stealing the TCP connection from Response for a few bytes 
was wise...

> As a third note, your code does not handle the possibility that
> original._transport may not implement IPushProducer. While *in

IIUC IResponse.deliverBody *does* guarantee (currently) to provide a 
transport implementing IPushProducer to the supplied IProtocol, at least 
as far as the docstring says?

Obviously that doesn't make accessing the private _transport safe - an 
implementation could wrap the transport to implement the IPushProducer 
semantics.

> practice* it tends to, it needn’t. On top of that, it is not
> forbidden for an IPushProducer implementation to call write() even
> when paused, and code that wants to be correct in the face of all
> situations will need to be able to buffer anyway.

Thanks for confirming this. I suspected as much, but was not certain (I 
make relatively little use of producer/consumer APIs in my own code).

> use case. Right now it’s a bit of an annoyance that t.w._newclient
> doesn’t allow the body receiving protocol to exert backpressure on
> the data.

How does that square with deliverBody providing an IPushProducer? Is it 
the case that the transport may just disobey the pauseProducing requests 
as you've noted above?



From bra at fsn.hu  Fri May  5 05:40:43 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Fri, 5 May 2017 13:40:43 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <7a42c647-131e-2132-f55b-ea636aaf891f@imperial.ac.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <7a42c647-131e-2132-f55b-ea636aaf891f@imperial.ac.uk>
Message-ID: <8b98bec2-892b-fd07-b465-ef3e669cbae8@fsn.hu>

On 05/05/2017 12:29 PM, Phil Mayers wrote:
> On 05/05/17 10:41, Nagy, Attila wrote:
>
>> What possible side effects do you see here? What problems could it 
>> cause?
>> So far I've tried to copy a lot of files in parallel, arbitrarily 
>> drop connections. Everything seems OK.
>> The file is either transferred in its entirety or (in case of dropped 
>> connections) not.
>
> Cool. If you're happy using private members, knock yourself out.
I'm not happy with that of course. The really cool thing would be if 
Twisted could support this task without the need of complicated and 
error-prone code.



From p.mayers at imperial.ac.uk  Fri May  5 05:53:23 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 5 May 2017 12:53:23 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <8b98bec2-892b-fd07-b465-ef3e669cbae8@fsn.hu>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <7a42c647-131e-2132-f55b-ea636aaf891f@imperial.ac.uk>
 <8b98bec2-892b-fd07-b465-ef3e669cbae8@fsn.hu>
Message-ID: <94318604-74ca-22a8-d1f6-d5c8f0c03276@imperial.ac.uk>

On 05/05/17 12:40, Nagy, Attila wrote:

>> Cool. If you're happy using private members, knock yourself out.
> I'm not happy with that of course. The really cool thing would be if 
> Twisted could support this task without the need of complicated and 
> error-prone code.

I don't disagree, of course. Cory seems to know the score here, and if I 
understand his email, right now you can't do it without buffering.

I wonder what the minimal implementation looks like right now, though?



From bra at fsn.hu  Fri May  5 05:58:28 2017
From: bra at fsn.hu (Nagy, Attila)
Date: Fri, 5 May 2017 13:58:28 +0200
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
Message-ID: <06b4cd40-ac47-c21e-3292-ba5b4d7a6a15@fsn.hu>

On 05/05/2017 01:10 PM, Cory Benfield wrote:
> The first is that Twisted will break your code eventually. Private member attributes are not covered by Twisted’s deprecation policy, and they can be changed without warning for any reason. So you’ll need to pin your Twisted version.
I feel myself unconfortable with this, that's why we are corresponding. :)
> As a second note, you may lock yourself out of HTTP/2. HTTP/2 is not guaranteed to give you access to a raw transport object (though it might), because in HTTP/2 the protocol is not a dumb byte pipe like it is in HTTP/1.1. Code like this forces Twisted devs who want to add HTTP/2 support (like myself) to implement HTTP/2 as a multiple-object abstraction to allow each request/response pair’s underlying “transport” member to act like a dumb byte-pipe transport, when we’d much rather use a less complex abstraction (as an example you should look at the HTTP/2 server code in twisted.web, which has multiple classes to maintain this fiction that you can just call “transport.write” and expect that to work).
Having HTTP/2 (along with 1.1) of course would be the best, but 
currently I can easily live without it. It's far from being standard.
And yet, its multiplexing would be one of the greatest achievement here 
(if correctly implemented). Copying objects with a lot of HTTP/TCP 
channels is too stressful sometimes (too much connections, TIME_WAIT 
problems etc).
> However, you’re right that this is not ideal. I think the best solution would be an enhancement to twisted.web that updates the default Response object to accept an IConsumer as the protocol argument of deliverBody. This would allow t.w._newclient.Response to be the arbiter of what it means to “pause” production, and allow you to continue to proxy between the two but without accessing a private member (you’d get given the producer you need to pause in registerProducer).
>
> If that’s an enhancement you’d be interested in, I can work with you to get that patch in place. Then your code would change a bit (note that this code won’t work right now):
Absolutely. I think this use case is far from being brain-dead, so if 
it's possible to do it right out of the box, I guess everybody wins with it.

>
> class UploadProducer(protocol.Protocol):
>      implements(IBodyProducer)
>      implements(IConsumer)
>
>      def __init__(self, get_resp):
>          self.length = get_resp.length
>          self.producing = False
>          self._producer = None
>          self._consumer = None
>          self._completed = Deferred()
>
>      # IConsumer
>      def registerProducer(self, producer, streaming):
>          assert streaming
>          self._producer = producer
>          if self._consumer is None:
>              self._producer.pauseProducing()
>
>      def unregisterProducer(self):
>          # Raise an error or something
>          pass
>
>      def write(self, data):
>          self._consumer.write(data)
>
>      # IProtocol
>      def connectionLost(self, reason):
>          self._completed.callback(reason)
>      
>      # IBodyProducer
>      def startProducing(self, consumer):
>          if self._producer is not None:
>              self._producer.resumeProducing()
>          self._consumer = consumer
>          return completed
>
>      def resumeProducing(self):
>          self._producer.resumeProducing()
>      
>      def pauseProducing(self):
>          self._producer.pauseProducing()
>      
>      def stopProducing(self):
>          self._producer.stopProducing()
>
>
> @inlineCallbacks
> def copy(src, dst):
>      get_resp = yield treq.get(src, unbuffered=True)
>      print "GET", get_resp.code, get_resp.original
>      producer = UploadProducer(get_resp)
>      get_resp.deliverBody(producer)
>      
>      put_resp = yield treq.put(dst,data=producer)
>      print "PUT", put_resp, put_resp.code
This looks much clearer than Phil's solution and lacks the error-prone 
custom buffering, which is nice.
What can I do to make this happen? :)
> With this arrangement as well it’d potentially be possible to use something like tubes, or at least get closer to using tubes for this use case. Right now it’s a bit of an annoyance that t.w._newclient doesn’t allow the body receiving protocol to exert backpressure on the data.
Apart from correctness having some traces of performance would also be 
good. I don't know how tubes compare to this, but the current (not nice) 
solution can easily transfer more than one gigabit/s with one process, I 
consider that a good baseline. :)
> Anyway, just a thought.
>
Thank you very much for joining and your help.



From manish.tomar at gmail.com  Fri May  5 23:31:30 2017
From: manish.tomar at gmail.com (Manish Tomar)
Date: Fri, 5 May 2017 22:31:30 -0700
Subject: [Twisted-Python] [ANN] bloc - group membership framework
In-Reply-To: <8BE583F3-9A43-449E-9969-8A49A2B7875B@twistedmatrix.com>
References: <CABH8oEOrhwas2=Fe0fpmQoOz4_uJnc3T3BpGSsph=+nEqk0C=Q@mail.gmail.com>
 <8BE583F3-9A43-449E-9969-8A49A2B7875B@twistedmatrix.com>
Message-ID: <CABH8oEOfbMiem5yLLpJgEnchs=i+OpP2uC7V3rpo9+it7A5CsA@mail.gmail.com>

Hey Glyph,

On Thu, May 4, 2017 at 11:38 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Thanks Manish!  This README looks like a great intro.
>
Thanks Glyph! Considering my writing skills, this is a great compliment.

> Are there any plans to extend this to something consensus-based or
>
 Not as of now. Consensus-based extension requires pure python non-network
Raft implementation which would make it easy to add a thin twisted
networking layer on it. I haven't looked around for such library. Moreover,
it's not as easy to reason about and will need much better testing. One
only needs to look into aphyr's blog to realize how all the implementations
of different distributed systems are broken.

> is there a range of applications for which single-master is better?
>
Not particularly except the fact that it is simpler to understand and debug
(if required). If you have a *reasonbly* reliable network and machines then
I think it is useful. However, if you have a large deployment on the cloud
with mutiple availability zones and expect network partitions/glitches then
having a consensus-based tool like zookeeper or etcd is better. Please note
that bloc will work with bad network but can slow down the application
because it waits for stable network before informing the group.

Regards,
Manish
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170505/9c5d28a5/attachment-0002.html>

From cory at lukasa.co.uk  Sat May  6 13:09:13 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Sat, 6 May 2017 20:09:13 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <c6a9c889-b0a4-fcc4-3e0f-2a0a325f851f@imperial.ac.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
 <c6a9c889-b0a4-fcc4-3e0f-2a0a325f851f@imperial.ac.uk>
Message-ID: <891792F4-C404-48FF-82FB-38C859D2A47D@lukasa.co.uk>


> On 5 May 2017, at 12:38, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
>> As a third note, your code does not handle the possibility that
>> original._transport may not implement IPushProducer. While *in
> 
> IIUC IResponse.deliverBody *does* guarantee (currently) to provide a transport implementing IPushProducer to the supplied IProtocol, at least as far as the docstring says?
> 
> Obviously that doesn't make accessing the private _transport safe - an implementation could wrap the transport to implement the IPushProducer semantics.

Yeah, it does. Sadly, there’s some complexity hidden there.

In this case, the “transport” object being provided to the IProtocol is a proxy to the TCP transport. However, that object does not write directly to the provided IProtocol, it writes to the t.w._newclient.HTTPClientParser and that chucks all kinds of data through the system. One of these layers is buffering, and that layer is *not* being told about calls to the IPushProducer methods. Thus, if you call pauseProducing from the IProtocol you provide, you may still get calls to your dataReceived method even though the producer is paused.

Mostly this seems to happen when the first body bytes are delivered, which seems to call makeConnection and then immediately dispatch any body bytes that have been received, even if the makeConnection method called pauseProducing on its transport. Not so helpful!

This also makes it impossible to avoid buffering. There seems to be no way to prevent the Response object from delivering the first bytes of the body before startProducing is called by treq for the upload. That’s pretty frustrating. Worse, the Response will *also* fire the “body complete” callback. All of this can and does happen before treq.put ever gets a chance to call startProducing, which means that you just have to buffer all of these events. This is really quite painful.

This is a design pattern that is in a few different places in twisted.web: situations where the “transport” provided to a higher-level abstraction is a proxy to the TCP connection, but where intermediate layers are actually responsible for calling dataReceived on those higher level abstractions. This causes a real problem if there is any chance that intermediary layers will do any buffering at all, because those layers will not see calls to pauseProducing or anything similar, and so will not respect those calls. The Twisted HTTP/2 server tries very hard to avoid this by ensuring that its classes actually masquerade as transports, rather than delegating to the lower-level TCP transport (though of course, they have to do this because HTTP/2 is framed!).

Fixing this is potentially a bit non-trivial. It involves changing t.w._newclient.Response to be able to act as a transport proxy (probably via some kind of mixin for the sake of code composition) and then to respect the producing state of the protocol receiving the body inside the _bodyDataReceived method, instead of just YOLOing data into that protocol assuming that it hasn’t immediately paused the production.

I consider this a bug in Twisted: I’ll open a ticket.

Cory



From cory at lukasa.co.uk  Sat May  6 13:15:30 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Sat, 6 May 2017 20:15:30 +0100
Subject: [Twisted-Python] HTTP PUT a GET's streaming response with treq
In-Reply-To: <891792F4-C404-48FF-82FB-38C859D2A47D@lukasa.co.uk>
References: <b157ddb4-7c08-5664-caad-031d54e4bd84@fsn.hu>
 <6260ca2a-0b7f-5a8d-218a-a0bcfb178f92@imperial.ac.uk>
 <c86c49d6-0ee2-9582-fe12-03a39df76ebd@fsn.hu>
 <72385723-2c3e-404a-37a7-5272e1e6f6a3@imperial.ac.uk>
 <f6ed6c84-6eb1-0632-3826-a40c04ac8a6e@fsn.hu>
 <275d565a-5c59-636a-736d-91c26f618524@imperial.ac.uk>
 <a3af1ec6-d85b-5eca-3936-47a28b78240a@fsn.hu>
 <D0FE2A5D-17F7-4BFC-AD78-2CDAA49D3942@lukasa.co.uk>
 <c6a9c889-b0a4-fcc4-3e0f-2a0a325f851f@imperial.ac.uk>
 <891792F4-C404-48FF-82FB-38C859D2A47D@lukasa.co.uk>
Message-ID: <80AD232F-9DFA-476F-B621-ABA0DAC72408@lukasa.co.uk>


> On 6 May 2017, at 20:09, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> I consider this a bug in Twisted: I’ll open a ticket.

This is now Twisted ticket #9132: https://twistedmatrix.com/trac/ticket/9132 <https://twistedmatrix.com/trac/ticket/9132>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170506/c020a51e/attachment-0002.html>

From trac at twistedmatrix.com  Sun May  7 00:05:23 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 May 2017 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1494137123.32.7825034246544067067@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170507/02ffe883/attachment-0002.html>

From meejah at meejah.ca  Thu May 11 21:35:50 2017
From: meejah at meejah.ca (meejah)
Date: Fri, 12 May 2017 07:35:50 +0400
Subject: [Twisted-Python] txtorcon 0.19.2
Message-ID: <867f1m7nmx.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Fixing two more problems with the 0.19.1 release, I hereby give you
version 0.19.2 which adds:

 * Work around a bug in "incremental" library (Issue 233)
 * Fix for Issue 190 from Felipe Dau
 * add txtorcon.Circuit.when_built

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

https://pypi.python.org/pypi/txtorcon/0.19.2
https://github.com/meejah/txtorcon/releases/tag/v0.19.2

Releases are also available from the hidden service:

http://timaq4ygg2iegci7.onion/txtorcon-0.19.2.tar.gz
http://timaq4ygg2iegci7.onion/txtorcon-0.19.2.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
c0e05ff4878468474167536a7b30edec23ae69eb26869c3e9ed9878e63ddc882  dist/txtorcon-0.19.2.tar.gz
0e2e85424c8f4c4627066ceebee59a931300e3712007f0a7620791729c80d459  dist/txtorcon-0.19.2-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJZFSkrAAoJEMJgKAMSgGmnlwYIAIc2mFs0tQngDVYauEdg+WTD
0TMDGpXoQTFXgAj2st6MA+UITgc1od3PveIeNkYi7bCYxGndQbZeGJ14itXTwTZR
lce9jHkn2ZG7LHhqcqC1Zdzp1+6lHQSgT81tPYzfUXhrqUHWjJjEHlSjAllZDD4E
zbV9y8zdSuQYK65VqFPnGl4BzOKBAL3VEwrtzf2wYejykodZsXp5Aygl7WAmuSXv
bl5avMfp0GLAu+5XvpfAqdAUQimtSE5/ODIWogF1Emqvu19qIwspQJk81A3yUSCa
wD22S3BQc8RuE9GSjk75ykA8fYAfv8n1fYSqbaJazR7fe9ZMRsNPcwEiyF86jlw=
=cZ/A
-----END PGP SIGNATURE-----



From rodrigc at crodrigues.org  Fri May 12 12:49:40 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 12 May 2017 11:49:40 -0700
Subject: [Twisted-Python] Buildbot and Python 3
Message-ID: <CAG=rPVcAaKz6s5Re=kdEMnT861qAO4eMTmTEPLX=tBDvTJqywA@mail.gmail.com>

Hi,

I've shifted efforts to port buildbot to Python 3.  In March, we reached a
milestone where all of buildbot's unit tests passed on Python 3:

https://medium.com/buildbot/buildbot-0-9-5-is-out-1d83626bd95a

This effort was possible due to large parts of Twisted (especially
Perspective Broker)
now working on Python 3.

Buildbot is a heavy user of Twisted.  There are a couple of bugs in
Twisted's Python 3 support uncovered by buildbot which need to get
fixed/merged in Twisted.  Hopefully these can get fixed and a new version
of Twisted can be released so that buildbot works out of the box on Python
3.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170512/4dda8e5a/attachment-0002.html>

From trac at twistedmatrix.com  Sun May 14 00:05:23 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 May 2017 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1494741923.13.7535979299914319896@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170514/55e7214f/attachment-0002.html>

From glyph at twistedmatrix.com  Mon May 15 00:03:25 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 14 May 2017 23:03:25 -0700
Subject: [Twisted-Python] Buildbot and Python 3
In-Reply-To: <CAG=rPVcAaKz6s5Re=kdEMnT861qAO4eMTmTEPLX=tBDvTJqywA@mail.gmail.com>
References: <CAG=rPVcAaKz6s5Re=kdEMnT861qAO4eMTmTEPLX=tBDvTJqywA@mail.gmail.com>
Message-ID: <CD8BD9AC-17E2-4FD1-8905-CDCB542D2B95@twistedmatrix.com>


> On May 12, 2017, at 11:49 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> I've shifted efforts to port buildbot to Python 3.  In March, we reached a milestone where all of buildbot's unit tests passed on Python 3:
> 
> https://medium.com/buildbot/buildbot-0-9-5-is-out-1d83626bd95a <https://medium.com/buildbot/buildbot-0-9-5-is-out-1d83626bd95a>
> 
> This effort was possible due to large parts of Twisted (especially Perspective Broker)
> now working on Python 3.
> 
> Buildbot is a heavy user of Twisted.  There are a couple of bugs in
> Twisted's Python 3 support uncovered by buildbot which need to get
> fixed/merged in Twisted.  Hopefully these can get fixed and a new version
> of Twisted can be released so that buildbot works out of the box on Python 3.

Thank you Craig for all of your hard work getting both Twisted and Buildbot ported.

Only a few modules remain before we can officially get rid of our 2/3 hybrid installer mess and stop qualifying that we only "mostly" support py3!  Perhaps some other intrepid soul would like to help cross that finish line... ;)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170514/1f9146b2/attachment-0002.html>

From adi at roiban.ro  Tue May 16 02:32:23 2017
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 16 May 2017 09:32:23 +0100
Subject: [Twisted-Python] Combining eventually and incremental dependencies
Message-ID: <CAFycZ9eTkh0ine0h1S2FGLeACkVXNN73tS9vHa5wwp1X+_kvpQ@mail.gmail.com>

This is based on my review of https://twistedmatrix.com/trac/ticket/9111

Is there any real value in having many small python packages doing
only a few things?

Can we pack the deprecation code together with the versioning code...
for example to only have 'incremental'  ?

I feel like we are going to the node.js path where you have a package
for the strip function.

I feel that having multiple separate project just adds a lot of extra
admin works... set up repo permissions/ set up pypi access / set up CI
integration / set up documentation.

In the same time, I feel that deprecation and versioning
functionalities are related.

>From what I can see in the current examples, each time you use
eventually you are forced to use incremental so that you can pass that
bloody Version instance, which I don't know why we can't go with just
a tupple :)

Thanks!
-- 
Adi Roiban



From jlitzingerdev at gmail.com  Tue May 16 22:28:43 2017
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Tue, 16 May 2017 22:28:43 -0600
Subject: [Twisted-Python] Wiki page edit
Message-ID: <20170517042843.GA3871@arch-tinker.localdomain>

Hello,

In going through the instructions on
https://twistedmatrix.com/trac/wiki/TwistedDevelopment#Creatingyourworkenvironment

I noticed an error in the invocation of the twistedchecker-trunk-diff
command.

The change needed is:

 # On Linux/OSX there is a helper to only raise error for the diff
-./travis/twistedchecker-trunk-diff.sh src/twisted/
+./.travis/twistedchecker-trunk-diff.sh src/twisted/


I am happy to make the change, but I don't currently have edit
permissions to the wiki (for reference, my trac username is
jlitzingerdev).

Cheers,
-Jason



From glyph at twistedmatrix.com  Tue May 16 22:31:25 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 16 May 2017 21:31:25 -0700
Subject: [Twisted-Python] Wiki page edit
In-Reply-To: <20170517042843.GA3871@arch-tinker.localdomain>
References: <20170517042843.GA3871@arch-tinker.localdomain>
Message-ID: <F2826206-795A-4058-9043-00AD3D70D67E@twistedmatrix.com>


> On May 16, 2017, at 9:28 PM, Jason Litzinger <jlitzingerdev at gmail.com> wrote:
> 
> Hello,
> 
> In going through the instructions on
> https://twistedmatrix.com/trac/wiki/TwistedDevelopment#Creatingyourworkenvironment
> 
> I noticed an error in the invocation of the twistedchecker-trunk-diff
> command.
> 
> The change needed is:
> 
> # On Linux/OSX there is a helper to only raise error for the diff
> -./travis/twistedchecker-trunk-diff.sh src/twisted/
> +./.travis/twistedchecker-trunk-diff.sh src/twisted/
> 
> 
> I am happy to make the change, but I don't currently have edit
> permissions to the wiki (for reference, my trac username is
> jlitzingerdev).

Thanks for bringing this up.  I've made this specific edit since that was quickest, but I'll add you as a wiki editor momentarily.

-g




From glyph at twistedmatrix.com  Tue May 16 22:32:26 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 16 May 2017 21:32:26 -0700
Subject: [Twisted-Python] Wiki page edit
In-Reply-To: <F2826206-795A-4058-9043-00AD3D70D67E@twistedmatrix.com>
References: <20170517042843.GA3871@arch-tinker.localdomain>
 <F2826206-795A-4058-9043-00AD3D70D67E@twistedmatrix.com>
Message-ID: <3AED43FA-1BFE-4920-AF4E-43592FE58BAA@twistedmatrix.com>


> On May 16, 2017, at 9:31 PM, Glyph <glyph at twistedmatrix.com> wrote:
> 
> Thanks for bringing this up.  I've made this specific edit since that was quickest, but I'll add you as a wiki editor momentarily.

You should have wiki edit permissions now for any future work.  Let me know if you have any issues.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170516/5386b80e/attachment-0002.html>

From jlitzingerdev at gmail.com  Tue May 16 22:45:26 2017
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Tue, 16 May 2017 22:45:26 -0600
Subject: [Twisted-Python] Wiki page edit
In-Reply-To: <3AED43FA-1BFE-4920-AF4E-43592FE58BAA@twistedmatrix.com>
References: <20170517042843.GA3871@arch-tinker.localdomain>
 <F2826206-795A-4058-9043-00AD3D70D67E@twistedmatrix.com>
 <3AED43FA-1BFE-4920-AF4E-43592FE58BAA@twistedmatrix.com>
Message-ID: <20170517044516.GA3963@arch-tinker.localdomain>

> You should have wiki edit permissions now for any future work.  Let me know if you have any issues.
Thanks, will do!
-Jason



From trac at twistedmatrix.com  Sun May 21 00:05:19 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 May 2017 06:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1495346719.72.199745775436103249@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170521/554c9761/attachment-0002.html>

From jlitzingerdev at gmail.com  Sun May 21 21:13:15 2017
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Sun, 21 May 2017 21:13:15 -0600
Subject: [Twisted-Python] Wiki Developer doc leads to 404
Message-ID: <20170522031315.GA1006@arch-tinker.localdomain>

Hello,

The link to the "Documentation Standard":

http://twistedmatrix.com/documents/current/core/development/policy/doc-standard.html

on https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs leads
me to a 404.  Should this go anywhere or just go away?  Does the
"Writing Style Guide" supercede, or is this in reference to API docs?

I'm happy to update the wiki, but I wasn't sure exactly what should be
updated.

Thanks!
-Jason



From glyph at twistedmatrix.com  Sun May 21 23:27:34 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 21 May 2017 22:27:34 -0700
Subject: [Twisted-Python] Wiki Developer doc leads to 404
In-Reply-To: <20170522031315.GA1006@arch-tinker.localdomain>
References: <20170522031315.GA1006@arch-tinker.localdomain>
Message-ID: <38D1A82F-46D9-4ABE-927A-62E4FC3BEFAA@twistedmatrix.com>


> On May 21, 2017, at 8:13 PM, Jason Litzinger <jlitzingerdev at gmail.com> wrote:
> 
> Hello,
> 
> The link to the "Documentation Standard":
> 
> http://twistedmatrix.com/documents/current/core/development/policy/doc-standard.html
> 
> on https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs leads
> me to a 404.  Should this go anywhere or just go away?  Does the
> "Writing Style Guide" supercede, or is this in reference to API docs?

Yeah, the "Twisted Writing Standard" doc supersedes.  I've removed the link.  Thanks for catching this!

> I'm happy to update the wiki, but I wasn't sure exactly what should be
> updated.

In the future you can go ahead and just optimistically update - the wiki can always roll back if necessary :).

-g


From andymaheshw at gmail.com  Mon May 22 16:53:22 2017
From: andymaheshw at gmail.com (Anirudh maheshwari)
Date: Mon, 22 May 2017 15:53:22 -0700
Subject: [Twisted-Python] Would like to assist with documentation on twisted
Message-ID: <CAEmcWYd-obgS=meixOubrPicd_6=qzM8YVGQh11cJRo=gnr_qg@mail.gmail.com>

Hello!

I'm a beginner with Twisted, and I would like to get involved. I spoke to a
few people at the Pycon 2017 Sprints and was hoping to learn how to start
my contribution by working on the documentation and testing. Please let me
know how I can get involved.

Thanks,
Andy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170522/42816766/attachment-0002.html>

From glyph at twistedmatrix.com  Mon May 22 23:51:42 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 22 May 2017 22:51:42 -0700
Subject: [Twisted-Python] Would like to assist with documentation on
 twisted
In-Reply-To: <CAEmcWYd-obgS=meixOubrPicd_6=qzM8YVGQh11cJRo=gnr_qg@mail.gmail.com>
References: <CAEmcWYd-obgS=meixOubrPicd_6=qzM8YVGQh11cJRo=gnr_qg@mail.gmail.com>
Message-ID: <67F1C2C1-6759-4D53-A106-D09BB84BACD7@twistedmatrix.com>

> On May 22, 2017, at 3:53 PM, Anirudh maheshwari <andymaheshw at gmail.com> wrote:
> 
> Hello! 
> 
> I'm a beginner with Twisted, and I would like to get involved. I spoke to a few people at the Pycon 2017 Sprints and was hoping to learn how to start my contribution by working on the documentation and testing. Please let me know how I can get involved. 
> 
> Thanks, 
> Andy 

Hi Andy!

Welcome!

We can definitely use all the help we can get.  In addition to any documentation & testing work you can find, one of the most important things that we could use is migration from our old logging system (twisted.python.log) to our new one (twisted.logger).  This is a task which should be relatively straightforward, and there are lots and lots of instances throughout the codebase where you can make this change (anywhere that calls log.msg or log.err).

Feel free to ask any further questions here!

-glyph



From meejah at meejah.ca  Wed May 24 01:25:26 2017
From: meejah at meejah.ca (meejah)
Date: Wed, 24 May 2017 11:25:26 +0400
Subject: [Twisted-Python] txtorcon 0.19.3
Message-ID: <86inkq67ix.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Fixing another regression, 0.19.3 causes txtorcon to (once again)
correctly work with SocksPort lines containing unix socket options
when used with txtorcon.connect(). Thas bug was introduced in 0.19.0
which reduced the number of GETINFO and GETCONF calls (to help
filtering-proxies).

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

  https://pypi.python.org/pypi/txtorcon/0.19.3
  https://github.com/meejah/txtorcon/releases/tag/v0.19.3

Releases are also available from the hidden service:

  http://timaq4ygg2iegci7.onion/txtorcon-0.19.3.tar.gz
  http://timaq4ygg2iegci7.onion/txtorcon-0.19.3.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
f73396667909a3c7a98f4dd865edf4ed6a2518ee5a935d92e18b8a479ec244fd  txtorcon-0.19.3.tar.gz
e0901f7743a43ed6389f0de31c1f547d89b32723a5ae9316d6cae9ad8eacdbea  txtorcon-0.19.3-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJZJTJVAAoJEMJgKAMSgGmn5woIAIyFRa7NhSNm/zMMJE92jtgA
C3UY55q3FF4VycC7K77EkaudHPMqlr9MA3EeGkx4NVu0KAX7lIT4GFCsZTlnOdXm
rglZ7FFYh49KoAWSMGCMJ7LlauYUitXptynte3lWcqbvjGJkCqMd6WuXslTooSI2
68gq/aoTbXoHWNg1C6DtBhR0JqvN+Vq7ARHyqc4bDloh1LXAvEUwsbKvDtrpXTbe
eRwMlKTKoUXhXjxO37NtoNSxT6HUFNcOFOYcLnWtBMPty9W90xY2wC1LbWwYymbY
Pk97OUceSyoHxAGsBYjKCdTXEWB6TO5lmHE3+t48OqiYt4ELAWkJFUBf5d6Mnto=
=ZRcE
-----END PGP SIGNATURE-----



From glyph at twistedmatrix.com  Wed May 24 18:42:25 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 24 May 2017 17:42:25 -0700
Subject: [Twisted-Python] on adopting projects
Message-ID: <8DA83CD3-4B6C-4BC9-932A-66CF0432A56B@twistedmatrix.com>

As we're splitting the project into more parts, we may have to do Github org surgery to move projects around.

In particular, recently, twisted.python.url got split out into a new package called 'hyperlink', which we were initially thinking the Twisted org would adopt.  (As it happens a different org will probably adopt it, more on that later.)  Adi created a repo to allow Mahmoud to do this, and gave him permissions on said repo.

I just deleted this repo :-).  In the future, the right way to do this is to have the owner transfer the repo over to the relevant org (this is in the "danger zone" in the github UI).  Creating empty repos to move projects around breaks a whole bunch of github functionality (clones of the original repo can't update, ticket & PR history doesn't transfer over and can't be moved, links to forks get broken) and we should generally not do it.

-glyph



From hawkowl at atleastfornow.net  Fri May 26 00:35:20 2017
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Fri, 26 May 2017 16:35:20 +1000
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
Message-ID: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>

Hi everyone,

Fresh from PyCon US, comes a 17.5 prerelease. Fancy things in this release:

- twisted.python.url has been spun out into the new 'hyperlink' package;
importing twisted.python.url is now a compatibility alias
- Support for OpenSSL 1.1.0.
- Fixes around the reactor DNS resolver changes in 17.1, solving all known
regressions
- Deferred.asFuture and Deferred.fromFuture, to allow you to map asyncio
Futures to Twisted Deferreds and vice versa, for use the with Python 3+
asyncioreactor in Twisted
- Support for TLS 1.3 ciphersuites, in advance of a released OpenSSL to
enable the protocol
- Further Python 3 support in twisted.web, initial support in
twisted.mail.smtp

Please see the NEWS.rst file and download the tarball at
https://twistedmatrix.com/Releases/rc/17.5.0rc2/ . (rc1 fell to metadata
mishaps!)

Let me know if you notice anything out of the ordinary. If there's no
problems, it'll release in the next week or so.

Twisted Regards,

Amber Brown (HawkOwl)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170526/c7ee6ec1/attachment-0002.html>

From glyph at twistedmatrix.com  Fri May 26 00:46:12 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 25 May 2017 23:46:12 -0700
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
Message-ID: <D3CA5583-E0CB-41D5-BE6E-A3482A27E835@twistedmatrix.com>


> On May 25, 2017, at 11:35 PM, Amber Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> Fresh from PyCon US, comes a 17.5 prerelease. Fancy things in this release:
> 
> - twisted.python.url has been spun out into the new 'hyperlink' package; importing twisted.python.url is now a compatibility alias
> - Support for OpenSSL 1.1.0.
> - Fixes around the reactor DNS resolver changes in 17.1, solving all known regressions
> - Deferred.asFuture and Deferred.fromFuture, to allow you to map asyncio Futures to Twisted Deferreds and vice versa, for use the with Python 3+ asyncioreactor in Twisted
> - Support for TLS 1.3 ciphersuites, in advance of a released OpenSSL to enable the protocol
> - Further Python 3 support in twisted.web, initial support in twisted.mail.smtp
> 
> Please see the NEWS.rst file and download the tarball at https://twistedmatrix.com/Releases/rc/17.5.0rc2/ <https://twistedmatrix.com/Releases/rc/17.5.0rc2/> . (rc1 fell to metadata mishaps!)
> 
> Let me know if you notice anything out of the ordinary. If there's no problems, it'll release in the next week or so.

Happily, although lots of work happened at the sprints this year, little of it was landed hastily; the things that did land quickly were fixes for long-standing regressions.  So it is my hope that this will be a bit more stable than has been characteristic of our post-PyCon releases :-).

The possibility for a 17.1.1 does remain open depending on how this release works out for those affected by previous regressions.  Please test!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170525/e90267ef/attachment-0002.html>

From adi at roiban.ro  Fri May 26 03:24:28 2017
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 26 May 2017 10:24:28 +0100
Subject: [Twisted-Python] on adopting projects
In-Reply-To: <8DA83CD3-4B6C-4BC9-932A-66CF0432A56B@twistedmatrix.com>
References: <8DA83CD3-4B6C-4BC9-932A-66CF0432A56B@twistedmatrix.com>
Message-ID: <CAFycZ9dOPMayg_DJQTTQH8E1iaaJO8CCNAMy+da6n-r27sVCGQ@mail.gmail.com>

On 25 May 2017 at 01:42, Glyph <glyph at twistedmatrix.com> wrote:
> As we're splitting the project into more parts, we may have to do Github org surgery to move projects around.
>
> In particular, recently, twisted.python.url got split out into a new package called 'hyperlink', which we were initially thinking the Twisted org would adopt.  (As it happens a different org will probably adopt it, more on that later.)  Adi created a repo to allow Mahmoud to do this, and gave him permissions on said repo.
>
> I just deleted this repo :-).  In the future, the right way to do this is to have the owner transfer the repo over to the relevant org (this is in the "danger zone" in the github UI).  Creating empty repos to move projects around breaks a whole bunch of github functionality (clones of the original repo can't update, ticket & PR history doesn't transfer over and can't be moved, links to forks get broken) and we should generally not do it.

Thanks Glyph for the info.

It might be a bit offtopic, but there is one info / policy that I
think that we should adapt when splitting a project.

When a project is split, it is deprecated in Twisted in the same time.

We should keep all the tests in Twisted until the deprecations
deadline is triggered.
This should help prevent any API breaks.

There is still a risk for things to break, even if we have the tests
(as we might not have 100 public api coverage).

So maybe, when a new project is adopted there should be a commitment
to keep the same API backward compatibility policy for at least one
year.

After one year the project can go wild and implement whatever quality
policy they want... ex commit/release without any review or without
tests.

What do you think?
Maybe I am just paranoid, and there is no risk  quality decrease by
outsourcing to external projects.


Thanks!

-- 
Adi Roiban



From exarkun at twistedmatrix.com  Fri May 26 05:38:55 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 26 May 2017 07:38:55 -0400
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
Message-ID: <CAEeXt4MUZknJ5=8VoWmROXznC8XVpD5PZkrqy8i64HQVhC4giA@mail.gmail.com>

On Fri, May 26, 2017 at 2:35 AM, Amber Brown <hawkowl at atleastfornow.net>
wrote:

> Hi everyone,
>
> Fresh from PyCon US, comes a 17.5 prerelease. Fancy things in this release:
>
> - twisted.python.url has been spun out into the new 'hyperlink' package;
> importing twisted.python.url is now a compatibility alias
> - Support for OpenSSL 1.1.0.
> - Fixes around the reactor DNS resolver changes in 17.1, solving all known
> regressions
> - Deferred.asFuture and Deferred.fromFuture, to allow you to map asyncio
> Futures to Twisted Deferreds and vice versa, for use the with Python 3+
> asyncioreactor in Twisted
> - Support for TLS 1.3 ciphersuites, in advance of a released OpenSSL to
> enable the protocol
> - Further Python 3 support in twisted.web, initial support in
> twisted.mail.smtp
>
> Please see the NEWS.rst file and download the tarball at
> https://twistedmatrix.com/Releases/rc/17.5.0rc2/ . (rc1 fell to metadata
> mishaps!)
>
> Let me know if you notice anything out of the ordinary. If there's no
> problems, it'll release in the next week or so.
>
>
Thanks to all who contributed to this (and previous) efforts.

Some of the txkube problems have been resolved but either not entirely or
some new ones have been introduced.  Attached is a log of the failures from
the unit test suite.  I haven't investigated these new errors in depth yet
so I won't say whether these are txkube's fault or Twisted's fault... but
at least *something* is at fault.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170526/7156818d/attachment-0002.html>
-------------- next part --------------
[ERROR]
Traceback (most recent call last):
Failure: testtools.testresult.real._StringException: Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/txkube/test/test_authentication.py", line 124, in test_bearer_token_authorization
    request_bytes = self._authorized_request(token=token, headers=None)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/txkube/test/test_authentication.py", line 108, in _authorized_request
    [(host, port, factory, _, _)] = reactor.tcpClients
ValueError: need more than 0 values to unpack


txkube.test.test_authentication.AuthenticateWithServiceAccountTests.test_bearer_token_authorization
===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: testtools.testresult.real._StringException: Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/txkube/test/test_authentication.py", line 140, in test_other_headers_preserved
    request_bytes = self._authorized_request(token=token, headers=headers)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/txkube/test/test_authentication.py", line 108, in _authorized_request
    [(host, port, factory, _, _)] = reactor.tcpClients
ValueError: need more than 0 values to unpack


txkube.test.test_authentication.AuthenticateWithServiceAccountTests.test_other_headers_preserved
===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: testtools.testresult.real._StringException: eliot-log: {{{
2ad4f697-40a8-4bbe-bcf1-e54383e849ac
└── network-client:delete at 1/started
    ├── kind: Namespace
    ├── name: e
    ├── namespace: None
    ├── timestamp: 1495798510.55902
    ├── network-client:request at 2,1/started
    │   ├── method: DELETE
    │   ├── timestamp: 1495798510.559532
    │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces/e
    │   └── network-client:request at 2,2/succeeded
    │       └── timestamp: 1495798510.564767
    └── network-client:delete at 3/failed
        ├── exception: txkube._exception.KubernetesError
        ├── reason: <KubernetesError: code = 404; status = v1.Status(status=u'Failure', code=404, reason=u'NotFound', details=v1.StatusDetails(kind=u'namespaces', group=None, name=u'e', retryAfterSeconds=None, causes=V1.statuscausePVector([])), message=u'namespaces "e" not found', metadata=v1.ListMeta(selfLink=None, resourceVersion=None))>
        └── timestamp: 1495798510.565738

ffd04195-0b06-44db-9dc3-bc6f99ae5326
└── poll:start at 1/started
    ├── obj
    │   ├── apiVersion: v1
    │   ├── kind: Namespace
    │   └── metadata
    │       ├── annotations
    │       ├── finalizers: []
    │       ├── labels
    │       │   ├── c: x
    │       │   └── v8: k
    │       ├── name: e
    │       └── ownerReferences: []
    ├── timestamp: 1495798510.566214
    ├── <UNNAMED TASK>
    │   ├── poll_iteration: None
    │   └── timestamp: 1495798510.566402
    ├── network-client:get at 3,1/started
    │   ├── kind: Namespace
    │   ├── name: e
    │   ├── namespace: None
    │   ├── timestamp: 1495798510.566587
    │   ├── network-client:request at 3,2,1/started
    │   │   ├── method: GET
    │   │   ├── timestamp: 1495798510.566854
    │   │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces/e
    │   │   └── network-client:request at 3,2,2/succeeded
    │   │       └── timestamp: 1495798510.570049
    │   └── network-client:get at 3,3/failed
    │       ├── exception: txkube._exception.KubernetesError
    │       ├── reason: <KubernetesError: code = 404; status = v1.Status(status=u'Failure', code=404, reason=u'NotFound', details=v1.StatusDetails(kind=u'namespaces', group=None, name=u'e', retryAfterSeconds=None, causes=V1.statuscausePVector([])), message=u'namespaces "e" not found', metadata=v1.ListMeta(selfLink=None, resourceVersion=None))>
    │       └── timestamp: 1495798510.571157
    └── poll:start at 4/succeeded
        └── timestamp: 1495798510.571529

3fd46547-0772-441e-9896-6a52f1f8500b
└── network-client:create at 1/started
    ├── timestamp: 1495798510.571942
    ├── <UNNAMED TASK>
    │   ├── submitted_object
    │   │   ├── apiVersion: v1
    │   │   ├── kind: Namespace
    │   │   └── metadata
    │   │       ├── annotations
    │   │       ├── finalizers: []
    │   │       ├── labels
    │   │       │   ├── c: x
    │   │       │   └── v8: k
    │   │       ├── name: e
    │   │       └── ownerReferences: []
    │   └── timestamp: 1495798510.572287
    ├── network-client:request at 3,1/started
    │   ├── method: POST
    │   ├── timestamp: 1495798510.572626
    │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces
    │   ├── memory:create at 3,2,1/started
    │   │   ├── kind: namespaces
    │   │   ├── timestamp: 1495798510.574204
    │   │   └── memory:create at 3,2,2/succeeded
    │   │       └── timestamp: 1495798510.57565
    │   └── network-client:request at 3,3/succeeded
    │       └── timestamp: 1495798510.5765
    └── network-client:create at 4/succeeded
        ├── response_object
        │   ├── apiVersion: v1
        │   ├── kind: Namespace
        │   └── metadata
        │       ├── annotations
        │       ├── finalizers: []
        │       ├── labels
        │       │   ├── c: x
        │       │   └── v8: k
        │       ├── name: e
        │       └── ownerReferences: []
        └── timestamp: 1495798510.577317

681b6079-8efe-4f84-8e65-1d7813672458
└── network-client:create at 1/started
    ├── timestamp: 1495798510.628154
    ├── <UNNAMED TASK>
    │   ├── submitted_object
    │   │   ├── apiVersion: v1
    │   │   ├── data: None
    │   │   ├── kind: ConfigMap
    │   │   └── metadata
    │   │       ├── annotations
    │   │       ├── finalizers: []
    │   │       ├── labels
    │   │       │   ├── axvp7ist: a
    │   │       │   ├── az8dkywg/l: p
    │   │       │   ├── d74gcupm1vlm/xk5: e
    │   │       │   ├── g-u: dg
    │   │       │   ├── hs0dvu: do
    │   │       │   ├── r: y1
    │   │       │   ├── r2.pa.th.i/rnli: h
    │   │       │   ├── sr: fzaa52b
    │   │       │   ├── w: zr8
    │   │       │   └── y: h
    │   │       ├── name: d
    │   │       ├── namespace: e
    │   │       └── ownerReferences: []
    │   └── timestamp: 1495798510.62869
    ├── network-client:request at 3,1/started
    │   ├── method: POST
    │   ├── timestamp: 1495798510.629161
    │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces/e/configmaps
    │   ├── memory:create at 3,2,1/started
    │   │   ├── kind: configmaps
    │   │   ├── timestamp: 1495798510.631462
    │   │   └── memory:create at 3,2,2/succeeded
    │   │       └── timestamp: 1495798510.633133
    │   └── network-client:request at 3,3/succeeded
    │       └── timestamp: 1495798510.634102
    └── network-client:create at 4/succeeded
        ├── response_object
        │   ├── apiVersion: v1
        │   ├── data: None
        │   ├── kind: ConfigMap
        │   └── metadata
        │       ├── annotations
        │       ├── finalizers: []
        │       ├── labels
        │       │   ├── axvp7ist: a
        │       │   ├── az8dkywg/l: p
        │       │   ├── d74gcupm1vlm/xk5: e
        │       │   ├── g-u: dg
        │       │   ├── hs0dvu: do
        │       │   ├── r: y1
        │       │   ├── r2.pa.th.i/rnli: h
        │       │   ├── sr: fzaa52b
        │       │   ├── w: zr8
        │       │   └── y: h
        │       ├── name: d
        │       ├── namespace: e
        │       └── ownerReferences: []
        └── timestamp: 1495798510.635196

c49ed305-030b-48c0-88fa-3d8f49f7609c
└── network-client:list at 1/started
    ├── apiVersion: v1
    ├── kind: ConfigMap
    ├── timestamp: 1495798510.635709
    ├── network-client:request at 2,1/started
    │   ├── method: GET
    │   ├── timestamp: 1495798510.636105
    │   ├── url: https://kubernetes.example.invalid./api/v1/configmaps
    │   ├── memory:list at 2,2,1/started
    │   │   ├── kind: configmaps
    │   │   ├── timestamp: 1495798510.637864
    │   │   └── memory:list at 2,2,2/succeeded
    │   │       └── timestamp: 1495798510.638355
    │   └── network-client:request at 2,3/succeeded
    │       └── timestamp: 1495798510.639244
    └── network-client:list at 3/succeeded
        └── timestamp: 1495798510.640504

637a1c25-b51a-4adf-a793-3ecacaa0a1ed
└── network-client:delete at 1/started
    ├── kind: Namespace
    ├── name: e
    ├── namespace: None
    ├── timestamp: 1495798510.64151
    ├── network-client:request at 2,1/started
    │   ├── method: DELETE
    │   ├── timestamp: 1495798510.642039
    │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces/e
    │   └── network-client:request at 2,2/succeeded
    │       └── timestamp: 1495798510.645008
    └── network-client:delete at 3/succeeded
        └── timestamp: 1495798510.645366

fca69971-893b-4b04-9c33-e33a6f7008b0
└── poll:start at 1/started
    ├── obj
    │   ├── apiVersion: v1
    │   ├── kind: Namespace
    │   └── metadata
    │       ├── annotations
    │       ├── finalizers: []
    │       ├── labels
    │       │   ├── c: x
    │       │   └── v8: k
    │       ├── name: e
    │       └── ownerReferences: []
    ├── timestamp: 1495798510.645802
    ├── <UNNAMED TASK>
    │   ├── poll_iteration: None
    │   └── timestamp: 1495798510.646016
    ├── network-client:get at 3,1/started
    │   ├── kind: Namespace
    │   ├── name: e
    │   ├── namespace: None
    │   ├── timestamp: 1495798510.646276
    │   ├── network-client:request at 3,2,1/started
    │   │   ├── method: GET
    │   │   ├── timestamp: 1495798510.646669
    │   │   ├── url: https://kubernetes.example.invalid./api/v1/namespaces/e
    │   │   └── network-client:request at 3,2,2/succeeded
    │   │       └── timestamp: 1495798510.649995
    │   └── network-client:get at 3,3/failed
    │       ├── exception: txkube._exception.KubernetesError
    │       ├── reason: <KubernetesError: code = 404; status = v1.Status(status=u'Failure', code=404, reason=u'NotFound', details=v1.StatusDetails(kind=u'namespaces', group=None, name=u'e', retryAfterSeconds=None, causes=V1.statuscausePVector([])), message=u'namespaces "e" not found', metadata=v1.ListMeta(selfLink=None, resourceVersion=None))>
    │       └── timestamp: 1495798510.651176
    └── poll:start at 4/succeeded
        └── timestamp: 1495798510.651542
}}}

logged-error: {{{
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 250, in inContext
    result = inContext.theWork()
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 266, in <lambda>
    inContext.theWork = lambda: context.call(ctx, func, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 122, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 85, in callWithContext
    return func(*args,**kw)
socket.gaierror: [Errno -2] Name or service not known
}}}

logged-error-1: {{{
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 250, in inContext
    result = inContext.theWork()
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 266, in <lambda>
    inContext.theWork = lambda: context.call(ctx, func, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 122, in callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 85, in callWithContext
    return func(*args,**kw)
socket.gaierror: [Errno -2] Name or service not known
}}}

twisted-log: {{{
2017-05-26 07:35:10-0400 [-] while looking up example.invalid. with <bound method HostnameEndpoint._fallbackNameResolution of <twisted.internet.endpoints.HostnameEndpoint object at 0x7f1c3d205c10>>
        Traceback (most recent call last):
          File "/usr/lib/python2.7/threading.py", line 801, in __bootstrap_inner
            self.run()
          File "/usr/lib/python2.7/threading.py", line 754, in run
            self.__target(*self.__args, **self.__kwargs)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/_threads/_threadworker.py", line 46, in work
            task()
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/_threads/_team.py", line 190, in doWork
            task()
        --- <exception caught here> ---
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 250, in inContext
            result = inContext.theWork()
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 266, in <lambda>
            inContext.theWork = lambda: context.call(ctx, func, *args, **kw)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 122, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 85, in callWithContext
            return func(*args,**kw)
        socket.gaierror: [Errno -2] Name or service not known

2017-05-26 07:35:10-0400 [-] while looking up example.invalid. with <bound method HostnameEndpoint._fallbackNameResolution of <twisted.internet.endpoints.HostnameEndpoint object at 0x7f1c3d243890>>
        Traceback (most recent call last):
          File "/usr/lib/python2.7/threading.py", line 801, in __bootstrap_inner
            self.run()
          File "/usr/lib/python2.7/threading.py", line 754, in run
            self.__target(*self.__args, **self.__kwargs)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/_threads/_threadworker.py", line 46, in work
            task()
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/_threads/_team.py", line 190, in doWork
            task()
        --- <exception caught here> ---
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 250, in inContext
            result = inContext.theWork()
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/threadpool.py", line 266, in <lambda>
            inContext.theWork = lambda: context.call(ctx, func, *args, **kw)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 122, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/python/context.py", line 85, in callWithContext
            return func(*args,**kw)
        socket.gaierror: [Errno -2] Name or service not known

2017-05-26 07:35:10-0400 [-] Main loop terminated.
}}}

unhandled-error-in-deferred: {{{
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/defer.py", line 653, in _runCallbacks
    current.result = callback(current.result, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/endpoints.py", line 954, in startConnectionAttempts
    "no results for hostname lookup: {}".format(self._hostStr)
twisted.internet.error.DNSLookupError: DNS lookup failed: no results for hostname lookup: example.invalid..
}}}

unhandled-error-in-deferred-1: {{{
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/defer.py", line 653, in _runCallbacks
    current.result = callback(current.result, *args, **kw)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/endpoints.py", line 954, in startConnectionAttempts
    "no results for hostname lookup: {}".format(self._hostStr)
twisted.internet.error.DNSLookupError: DNS lookup failed: no results for hostname lookup: example.invalid..
}}}


txkube.test.test_memory.KubernetesClientIntegrationTests.test_configmap
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/endpoints.py", line 992, in startConnectionAttempts
    iterateEndpoint.start(self._attemptDelay)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/task.py", line 190, in start
    self.starttime = self.clock.seconds()
exceptions.AttributeError: 'Redirectable' object has no attribute 'seconds'

txkube.test.test_network.NetworkKubernetesFromContextTests.test_client_chain_certificate
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/endpoints.py", line 992, in startConnectionAttempts
    iterateEndpoint.start(self._attemptDelay)
  File "/tmp/txkube-twisted-17.5.0rc2/local/lib/python2.7/site-packages/twisted/internet/task.py", line 190, in start
    self.starttime = self.clock.seconds()
exceptions.AttributeError: 'MemoryReactor' object has no attribute 'seconds'

<not in test>
-------------------------------------------------------------------------------
Ran 141 tests in 15.685s

From paul.tremberth at gmail.com  Fri May 26 07:02:10 2017
From: paul.tremberth at gmail.com (Paul Tremberth)
Date: Fri, 26 May 2017 15:02:10 +0200
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
Message-ID: <CAELvJCvnAzq793br7ZrAgTawULbUJQYQNapOgtiTaTdz4=4=bA@mail.gmail.com>

Hi Amber,

I have tested Twisted 17.5.0rc2 with latest Scrapy:

- the issue we have with our resolver in Python 2 looks fixed indeed, thank
you for this (https://twistedmatrix.com/trac/ticket/9137)

> - Support for OpenSSL 1.1.0.

- I tested with OpenSSL 1.1 and am still seeing what I reported on the
mailing list, about elliptic curves:
https://twistedmatrix.com/pipermail/twisted-web/2017-April/005293.html

is there a chance of getting it fixed too in 17.5?

- I also commented on GitHub about issues with ESMTPSenderFactory and
Python 3
with a couple of fixes I tried locally in twisted/mail/smtp.py
(but I did not open a ticket on Trac unfortunately so it may have been
unnoticed)
https://github.com/scrapy/scrapy/issues/2375#issuecomment-299226510


Thanks.

/Paul

On Fri, May 26, 2017 at 8:35 AM, Amber Brown <hawkowl at atleastfornow.net>
wrote:

> Hi everyone,
>
> Fresh from PyCon US, comes a 17.5 prerelease. Fancy things in this release:
>
> - twisted.python.url has been spun out into the new 'hyperlink' package;
> importing twisted.python.url is now a compatibility alias
> - Support for OpenSSL 1.1.0.
> - Fixes around the reactor DNS resolver changes in 17.1, solving all known
> regressions
> - Deferred.asFuture and Deferred.fromFuture, to allow you to map asyncio
> Futures to Twisted Deferreds and vice versa, for use the with Python 3+
> asyncioreactor in Twisted
> - Support for TLS 1.3 ciphersuites, in advance of a released OpenSSL to
> enable the protocol
> - Further Python 3 support in twisted.web, initial support in
> twisted.mail.smtp
>
> Please see the NEWS.rst file and download the tarball at
> https://twistedmatrix.com/Releases/rc/17.5.0rc2/ . (rc1 fell to metadata
> mishaps!)
>
> Let me know if you notice anything out of the ordinary. If there's no
> problems, it'll release in the next week or so.
>
> Twisted Regards,
>
> Amber Brown (HawkOwl)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170526/723ab7e8/attachment-0002.html>

From hawkowl at atleastfornow.net  Fri May 26 14:07:46 2017
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 27 May 2017 06:07:46 +1000
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <CAELvJCvnAzq793br7ZrAgTawULbUJQYQNapOgtiTaTdz4=4=bA@mail.gmail.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
 <CAELvJCvnAzq793br7ZrAgTawULbUJQYQNapOgtiTaTdz4=4=bA@mail.gmail.com>
Message-ID: <CAMxb2isghk7D=OgwhdLee=+a6+Az6_y_Nv8Xx2MD=_EYurXeGA@mail.gmail.com>

Hi Paul,

I don't think we'll be able to get any of those fixed for 17.5, but since
we have no outstanding regressions, there's nothing stopping me doing a
release next month if those things get fixed in the meantime.

- Amber

On 26 May 2017 at 23:02, Paul Tremberth <paul.tremberth at gmail.com> wrote:

> Hi Amber,
>
> I have tested Twisted 17.5.0rc2 with latest Scrapy:
>
> - the issue we have with our resolver in Python 2 looks fixed indeed,
> thank you for this (https://twistedmatrix.com/trac/ticket/9137)
>
> > - Support for OpenSSL 1.1.0.
>
> - I tested with OpenSSL 1.1 and am still seeing what I reported on the
> mailing list, about elliptic curves:
> https://twistedmatrix.com/pipermail/twisted-web/2017-April/005293.html
>
> is there a chance of getting it fixed too in 17.5?
>
> - I also commented on GitHub about issues with ESMTPSenderFactory and
> Python 3
> with a couple of fixes I tried locally in twisted/mail/smtp.py
> (but I did not open a ticket on Trac unfortunately so it may have been
> unnoticed)
> https://github.com/scrapy/scrapy/issues/2375#issuecomment-299226510
>
>
> Thanks.
>
> /Paul
>
> On Fri, May 26, 2017 at 8:35 AM, Amber Brown <hawkowl at atleastfornow.net>
> wrote:
>
>> Hi everyone,
>>
>> Fresh from PyCon US, comes a 17.5 prerelease. Fancy things in this
>> release:
>>
>> - twisted.python.url has been spun out into the new 'hyperlink' package;
>> importing twisted.python.url is now a compatibility alias
>> - Support for OpenSSL 1.1.0.
>> - Fixes around the reactor DNS resolver changes in 17.1, solving all
>> known regressions
>> - Deferred.asFuture and Deferred.fromFuture, to allow you to map asyncio
>> Futures to Twisted Deferreds and vice versa, for use the with Python 3+
>> asyncioreactor in Twisted
>> - Support for TLS 1.3 ciphersuites, in advance of a released OpenSSL to
>> enable the protocol
>> - Further Python 3 support in twisted.web, initial support in
>> twisted.mail.smtp
>>
>> Please see the NEWS.rst file and download the tarball at
>> https://twistedmatrix.com/Releases/rc/17.5.0rc2/ . (rc1 fell to metadata
>> mishaps!)
>>
>> Let me know if you notice anything out of the ordinary. If there's no
>> problems, it'll release in the next week or so.
>>
>> Twisted Regards,
>>
>> Amber Brown (HawkOwl)
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170527/386c606c/attachment-0002.html>

From trac at twistedmatrix.com  Sun May 28 00:05:25 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 May 2017 06:05:25 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1495951525.96.6506409386513711783@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170528/0cd4dcd1/attachment-0002.html>

From glyph at twistedmatrix.com  Mon May 29 13:25:47 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 29 May 2017 12:25:47 -0700
Subject: [Twisted-Python] on adopting projects
In-Reply-To: <CAFycZ9dOPMayg_DJQTTQH8E1iaaJO8CCNAMy+da6n-r27sVCGQ@mail.gmail.com>
References: <8DA83CD3-4B6C-4BC9-932A-66CF0432A56B@twistedmatrix.com>
 <CAFycZ9dOPMayg_DJQTTQH8E1iaaJO8CCNAMy+da6n-r27sVCGQ@mail.gmail.com>
Message-ID: <44FFCC67-A094-4B51-8D26-A576ABB9810D@twistedmatrix.com>


> On May 26, 2017, at 2:24 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> On 25 May 2017 at 01:42, Glyph <glyph at twistedmatrix.com> wrote:
>> As we're splitting the project into more parts, we may have to do Github org surgery to move projects around.
>> 
>> In particular, recently, twisted.python.url got split out into a new package called 'hyperlink', which we were initially thinking the Twisted org would adopt.  (As it happens a different org will probably adopt it, more on that later.)  Adi created a repo to allow Mahmoud to do this, and gave him permissions on said repo.
>> 
>> I just deleted this repo :-).  In the future, the right way to do this is to have the owner transfer the repo over to the relevant org (this is in the "danger zone" in the github UI).  Creating empty repos to move projects around breaks a whole bunch of github functionality (clones of the original repo can't update, ticket & PR history doesn't transfer over and can't be moved, links to forks get broken) and we should generally not do it.
> 
> Thanks Glyph for the info.
> 
> It might be a bit offtopic, but there is one info / policy that I
> think that we should adapt when splitting a project.
> 
> When a project is split, it is deprecated in Twisted in the same time.
> 
> We should keep all the tests in Twisted until the deprecations
> deadline is triggered.
> This should help prevent any API breaks.
> 
> There is still a risk for things to break, even if we have the tests
> (as we might not have 100 public api coverage).
> 
> So maybe, when a new project is adopted there should be a commitment
> to keep the same API backward compatibility policy for at least one
> year.
> 
> After one year the project can go wild and implement whatever quality
> policy they want... ex commit/release without any review or without
> tests.
> 
> What do you think?
> Maybe I am just paranoid, and there is no risk  quality decrease by
> outsourcing to external projects.

I understand the concern.  These split-outs have not all been conducted with the greatest transparency, but mainly because communicating everything publicly is a bunch of extra work.

For the most part, split-out projects will just go into the Twisted org anyway, and will have the same compatibility contract.  I do not anticipate splitting out anything with a deeply involved portability contract, the reactors will remain on our existing CI for the forseeable future :).

Hyperlink is a bit of a weird case, in that its highly general nature meant that a more general org (hyper) made more sense to adopt it, but we are in the process of setting the project up and as I've discussed with Cory and Mahmoud it will probably have commit from most Twisted folks as well.  While this one isn't living in the Twisted org, the python-hyper org takes its compatibility contract equally, if not more seriously.

However, there is at least an unofficial agreement amongst all projects split from Twisted that they will adhere to largely the same compatibility policy as Twisted itself.  In the case of Hyperlink, it is specifically documented as going above and beyond: http://hyperlink.readthedocs.io/en/latest/design.html#origins-and-backwards-compatibility <http://hyperlink.readthedocs.io/en/latest/design.html#origins-and-backwards-compatibility>.

(Although perhaps someone should file a PR to remove the word "legacy" there :).)

In short: let's keep an eye on this, if we start to have compatibility drift or issues, then by all means let's add some belt-and-suspenders checks, but I think we can be optimistic about not having compatibility problems.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170529/ce943844/attachment-0002.html>

From glyph at twistedmatrix.com  Mon May 29 13:27:00 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 29 May 2017 12:27:00 -0700
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <CAEeXt4MUZknJ5=8VoWmROXznC8XVpD5PZkrqy8i64HQVhC4giA@mail.gmail.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
 <CAEeXt4MUZknJ5=8VoWmROXznC8XVpD5PZkrqy8i64HQVhC4giA@mail.gmail.com>
Message-ID: <8DBF3FAC-B164-4196-B92B-9A98E668D4A0@twistedmatrix.com>


> On May 26, 2017, at 4:38 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Some of the txkube problems have been resolved but either not entirely or some new ones have been introduced.  Attached is a log of the failures from the unit test suite.  I haven't investigated these new errors in depth yet so I won't say whether these are txkube's fault or Twisted's fault... but at least something is at fault.

I do think we need to block the final release until we at least know where the responsibility lies for these tracebacks :-\.  These all still pass on 16.6.0 I presume?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170529/fe647a22/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon May 29 17:57:39 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 29 May 2017 19:57:39 -0400
Subject: [Twisted-Python] Twisted 17.5.0rc2 RC Announcement
In-Reply-To: <8DBF3FAC-B164-4196-B92B-9A98E668D4A0@twistedmatrix.com>
References: <CAMxb2isT1OHDbkUVbkBUjDyXXC=XH0Ge=-8--n+tFP7WEqZxDg@mail.gmail.com>
 <CAEeXt4MUZknJ5=8VoWmROXznC8XVpD5PZkrqy8i64HQVhC4giA@mail.gmail.com>
 <8DBF3FAC-B164-4196-B92B-9A98E668D4A0@twistedmatrix.com>
Message-ID: <CAEeXt4N8BW8jOs135nkdpidwarMjLx6zteCQGHo7emAzUbB0Dg@mail.gmail.com>

On Mon, May 29, 2017 at 3:27 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 26, 2017, at 4:38 AM, Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
> Some of the txkube problems have been resolved but either not entirely or
> some new ones have been introduced.  Attached is a log of the failures from
> the unit test suite.  I haven't investigated these new errors in depth yet
> so I won't say whether these are txkube's fault or Twisted's fault... but
> at least *something* is at fault.
>
>
> I do think we need to block the final release until we at least know where
> the responsibility lies for these tracebacks :-\.  These all still pass on
> 16.6.0 I presume?
>

They do, yea.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170529/0727861d/attachment-0002.html>

From cory at lukasa.co.uk  Tue May 30 02:40:51 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 30 May 2017 09:40:51 +0100
Subject: [Twisted-Python] on adopting projects
In-Reply-To: <44FFCC67-A094-4B51-8D26-A576ABB9810D@twistedmatrix.com>
References: <8DA83CD3-4B6C-4BC9-932A-66CF0432A56B@twistedmatrix.com>
 <CAFycZ9dOPMayg_DJQTTQH8E1iaaJO8CCNAMy+da6n-r27sVCGQ@mail.gmail.com>
 <44FFCC67-A094-4B51-8D26-A576ABB9810D@twistedmatrix.com>
Message-ID: <0D799803-3001-4407-876C-55610E694C42@lukasa.co.uk>


> On 29 May 2017, at 20:25, Glyph <glyph at twistedmatrix.com> wrote:
> 
> Hyperlink is a bit of a weird case, in that its highly general nature meant that a more general org (hyper) made more sense to adopt it, but we are in the process of setting the project up and as I've discussed with Cory and Mahmoud it will probably have commit from most Twisted folks as well.  While this one isn't living in the Twisted org, the python-hyper org takes its compatibility contract equally, if not more seriously.

To elaborate on this: ordinarily, when adopting a project, hyper will grant anyone with “write” permission on an original personal repo “admin” on it when it’s migrated (because personal repos don’t allow more than one admin, and this is usually what people want). Additionally, anyone who has committed but has no specific elevated privileges is granted “write” on that repo. Naturally, this is done after ensuring that branches are appropriately protected.

However, acknowledging the unique case of a library pulled out of Twisted, an extra step will be taken, which is that all Twisted committers will be invited to hyper and given “admin” on hyperlink. This takes us closest to the original set of owners and permissions while also ensuring that this doesn’t seem like a coup or like Twisted committers will not be empowered to change their minds. If anyone ever feels unsatisfied with the stewardship of hyper, well, you’ll all have admin privileges and be able to move the repo away again. ;)

> However, there is at least an unofficial agreement amongst all projects split from Twisted that they will adhere to largely the same compatibility policy as Twisted itself.  In the case of Hyperlink, it is specifically documented as going above and beyond: http://hyperlink.readthedocs.io/en/latest/design.html#origins-and-backwards-compatibility <http://hyperlink.readthedocs.io/en/latest/design.html#origins-and-backwards-compatibility>.

We have no plans to change this documentation, which means it’ll remain the policy of the library.

Cory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170530/96bca0f1/attachment-0002.html>

